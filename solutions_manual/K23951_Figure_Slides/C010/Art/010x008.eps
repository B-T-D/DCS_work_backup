%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 010x008.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 361 185
%%HiResBoundingBox: 0 0 360.0044 184.2754
%%CropBox: 0 0 360.0044 184.2754
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 68 8%%BeginData: 8798 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD06FFA87DA852FD0BFF7DFFFFFFA1CAC9CA7DA87DA8FD09FFA87D%A87DFFFFFF52A87DA8C9CAA1A8FFFF7DA17D7D7DA87DA1FD09FFA8FFFFA1%7D7DA27DA87D7DA8FFA87D7DA87DA27D7D7DFFFFA7C9CAA1A87D7D7DFFFF%A17DA87D7D7DA87DFFFFA87DA87DA87DA852FD09FFA8A8FD0AFFA8A8FFA8%A8FD06FF7DFD0CFFA8A8FFA8A8FD05FFA87DFFFFA8FD06FF7DFD09FF7DFF%FFA8A8FD05FF7DA8FFFF7DFD05FFA8A8FFFF7DFD06FFA8FFFF7DFD06FFA8%A8FF7DA8FD05FFA8FD09FF7DFD0BFF7DFFFFFF7DFD06FFA8FD0CFF7DFFFF%FF7DFD05FFA8A8FFFF7DFD05FFA8A8FD09FFA8FFFFA8A8FD05FFA8A8FFA8%A8FD06FF7DFFFFA8FD06FF7DFFFFA8FD06FF7DFFFFA8A8FD05FF7DFD06FF%7DA87D7DA8FD0AFFA87DA87DA1FFFFA8A17D7D7DFD09FF7DA87D7DA8FFA8%7D7DA87DFFFFA87DA87D7DFFFFA8A17D7D7DFD09FFFD047DA8FFA8A87DA8%52FFFFFF76A87D7DA8FFA87D7DA17DFFFFA87DA87DA1FFFFFD047DA8FFFF%7D7DA87DA8FFFFFD047DFD07FFA8A8A8FD0DFFA8A8FFFFFFCAA7FFA8FD09%FFA87DA8A8A8FFFFFFA8CAA87DA8FFFFFFA8CAFFFFFFA87DCAA8FD0BFFA8%CAA8FFFFFF7DFFA8FD05FFA8FF7DFFFFFFA8CAA8FFFFFF7DA8A8CBFD04FF%A8CA7DA8FFFFFFCBA8FD04FF7DA8FFA8FD1CFFC9FD0CFFA87DFD09FF7DA8%FD08FF7DFD13FFA8A8FD09FFA8A8FD08FFA8A8FD09FF7DFD09FF7DFD1AFF%A8FD04FFCAA8FFA8FD09FFA8A8FFFFFFA8A8FD04FFA8A8FFFFFFA8A8A8FF%FFA17DFFA8FD0BFFA8CAA8FFFFFF7DFFA8FD05FFA8FF7DFFFFFFA8A8A8FF%FFFF7DFFFFFFA8FFA8FFFFFFA8A8FFFFFFA8A8FD04FF7DA8FFA8FD15FFA8%7DA87DA8FFFFA7A77D7D7DFD08FFCA7DFFFF7D7DA87DA1FFFF7DCAFFA876%A87D7DFFFFA8FD047DFD09FF7DA17D7DA1FFFFA17DA852FFFFFF7DA87DA8%FFFFA8FD047DFFFF7DA8FFA87D7DA852FFFFCA7DFFFF7D7DA876A8FFFF7D%A87D7DFFFFFF7DFD04FFA8A8FFA8A8FD08FF7DFFFFFF7DFD05FFA8A8FD08%FFA8A8FFFF7DFFFFFF7DFFFFA8A8FFA8A8FFFF7DFD05FFA8A8FD09FFA8FF%FFA8A8FD05FFA8A8FFA8A8FD06FF7DFFFFA8FFFF7DFFFFFF7DFFFFA8A8FF%A8A8FFFF7DFFFFA8A8FD05FF7DFFFFA87D597D527D537DA8A852A8FD07FF%A8A8FFA8A8FD05FFA87DFD09FF7DFFFFA8A8FFA8A8FFFF7DFFFFA87DFFFF%7DA8FD05FF7DFD09FF7DFFFFA87DFD05FF7DA8FFFF7DFD05FFA8A8FFFF7D%FFFF7DA8FFA87DFFFF7DA8FFFF7DFFFFA8A8FF7DA8FD05FF7DFFFFA87D7D%53FD047DA8A87DA8FD07FF7DFFFFFF7DCAC9CA7DA87DA8FD08FFA87D7DA8%7DFFFFFF52A87D7DA8FFA8A8FFFFFD057DA87DA8FD09FF7DFFFFA87D7DA8%7DA87D7DFFFFA87D7DA87DA87D7D7DFFFF7DFFFFA1FD047DFFFFA87DA87D%A8FFFF7DFFFFA87DA87D7D7DA852FFFFA8A9A8A852FFA8A8A8FFA8FD0DFF%CAFFFFFFA8FD0DFFA8FD05FFA8FD04FFCFCAFD05FFA8FD0DFF7DFD05FFA8%FFFFFFA8FD07FFA8FD05FF7DFD05FFA8FD05FFA8FD04FF7DA8FFFFFFA8FF%A8FFA8FD38FFCACFFD13FFA8FD17FFA8FD10FF7DFD34FFFD04A8FFFFFFFD%04A8FFFFCFCAFFFFFFFD07A8FD09FF7DA8A8A8FD04FFFD09A8FD04FFA8A8%A87DFFFFFFA8A8A8FFFFFFFD04A8FFFFFF7DA8FFFFFD06A8CAFD06FFA8A8%FFA8FD20FF7D7DA87DFFFFFF7DA87D7DFFFFA8A8FFFF7DA87DA87DA87DA8%FD09FFA87DA87DA8FFFF7DA87DA87DA87DA87DA87DFFFFFF7DA87DA8FFFF%7DA8A17D7DFFFFA87DA87DA8FFFF7DFFFFA87DA87DA87DA852FD05FFA87D%7D53A8A8FD0BFF84A8FFFFAFA97DFFFFA87EFD08FFCA7DFFFFA8A8FFA8A8%FFFF7DCAFFA87DFFA8A1FD06FF7DFD0CFFA87DFFA87DFD09FFA8A8FFA8A8%FD05FF7DA8FFA87DFFFF7DFFFFFF7DFFFFA8A8FF7DA8FD05FF7DFD05FFA8%A87D8484FD0BFFA8FD087DFFA8A8FD08FFA8A8FFFF7DFFFFFF7DFFFFA8A8%FFA8A8FFFF7DFD06FFA8FD0CFFA8A8FFFF7DFD09FF7DFFFFFF7DFD05FF7D%FFFFFF7DFFFFA8A8FFA8A8FFFF7DFFFFA8A8FD05FF7DFD06FFA8FFA8FD0C%FFA85253FD067DA8A87DFD09FF7DFFFFA17DA87DA8FFFF7DFFFFA876A87D%7DFFFFA8FD047DFD09FF7DA17D7DA8FFA87D7DA87DFFFFFFFD047DA8FFA8%FD047DFFFF7DA8FFA87D7DA852FFFFFF7DFFFFA17DA876A8FFFF7DA17D7D%FD19FF7DFFFFFFA8FD0BFFA8A8FD04FFA8FD04FFA8A8FFFFFFA8FD04FFA8%A8FFA8FD0AFF7DA8FFA8FD05FFA87DA8FFA87DFFFFA8FFFFFFA8FFA87DFF%FF7DFFFFFFA8FFA8FFFFFFA8A8FD04FFA8FD04FF7DA8FFA8FD29FFA87DFD%09FF7DA8FD08FF7DFD0DFF7DFD09FF7DFFFFA87DFD09FF7DFFFFA8A8FD08%FFCA7DFD09FF7DFD1DFFA8FD0EFFA8A8FD09FFA1A8FFFFFFA8FD04FFA8A8%FFA8FD0AFFA8FD04FFA8FD04FFA8A8FFA8A8FD09FFA8FFFF7DA8FD08FFA8%A8FD09FFA8A8FD1BFFA8537D7DA8FD0CFF7DA17D7DA8FFA87D7DA17DFFFF%A8767D7D7DFFFFA1FD047DFD09FF7DFFFFA876A1767DFFFF7DFFFFA87DFF%FF7D76A87D7DFFFF7DFFFFA87D7D767DFFFFFD047DA1FFFF7D76A876A8FF%FFFD047DFD19FF7DA852A87DFD0FFF7DFFFFFF7DFD05FFA8A8FFFF7DFD05%FFA8A8FD09FFA8FFFFA8A8FFFF7DFFFFA8A8FFA8A8FFFF7DFFFFFF7DFFFF%A8FD06FF7DFFFFA8A8FD05FF7DFFFFA8A8FD05FF7DFD19FFA8A8A87DA8FD%0FFFA8A8FFA8A8FD05FFA87DFFA8A1FD06FF7DFD09FF7DFFFFA87DFFA8A1%FFFF7DA8FFFF7DFFFFA8A8FFA8A8FFFF7DFD05FFA87DFFFF7DFD06FFA8A8%FF7DA8FD05FF7DFD2AFFA8A1A87DFFFFFF7DA8A8CACACFA1A8FFFF7DA8A8%A8A1A87DA8FD09FFA8A1A87DA8FFFF7DA8A87DA8FFFF7DA8A87DFFFFFF7D%A87DA8FFFFCAA8A8A87DFFFFA87DFD05A87DFFFFA87DFD05A87DFD2AFFA8%A87DA8FFFFFFA87DA8A1CFCACACAFFFFA87DA87DA87DA8A8FD09FFA8A87D%A8A8FFFFA87DA8A8FFFFFFA8A87DA8FFFFFFA87DA8A8FFFFCA7DA87DFFFF%FFA8A87DA87DA87DA8FFFFA8A87DA87DA87DA8FD67FFCAFD64FFA8A8A8FD%05FFA8A8A8FFFFFFA8FFA8FD05FFA8FFA8FFFFCAA8AFA8FFFFFFA8FFA8A8%A8FFA8FD05FFA8FFA8A8A8FD4DFFA87DA87DA8FFFF7DA87D7DFFFFA87D7D%A87DFFFFFF7DA87DA8FFFFA8A87DA87DFFFFA87DA87DA87DA87DFFFFA87D%A87DA87DA87DFD31FF7D7DFFA8A87D7DA8FF7D7EFD10FF7DFFFFA87DFFA8%A8FFFF7DFFFFA87DFFFF7DA8FFA87DFFFF7DFD05FFA8A8FFFF7DFD06FF7D%A8FFA1A8FD05FF7DFD30FFA8537D527D527D7D7DFFA87DFD10FFA8FFFFA8%A8FFFF7DFFFFA8A8FFA8A8FFFF7DFFFFFF7DFFFFA8FD06FF7DFFFFA8A8FD%05FF7DFFFFA8A8FD05FF7DFD30FFA87D7D7D59A87D847DFF7DA8FD10FF7D%FFFFA852A87D7DFFFF7DA8FFA87DFFFF7D7D7D767DFFFF7DFFFFA87DA17D%7DFFFFFD047DA8FFFF7D7D7D52A8FFFF7D7D7D76FD34FFA8FD17FFA8FD04%FFCAFD04FFA8A8FFA8A8FD04FFA8FD04FFA8FFFF7DA8FD06FFA8FFA8A8FD%04FFA8FD04FFA8A8FFA8FD4CFF7DFD09FF7DA8FFFF7DFD09FF7DFFFFA1A8%FD09FF7DFD09FF7DFD37FFA8A8FFA8FD14FF7DA8FFA8FD05FFA87DA8FFA8%7DFFFFCAFFFFFFA8FFA87DFFFF7DFD05FFA8FFFFFFA8A8FD04FFA8FD04FF%7DA8FD36FF7DA87D7EA8FD13FFFD047DA8FFA8FD047DFFFFFF7DA27D7DA8%FFA8FD047DFFFF7DA8FFA87D7D7D52FFFFA87DFFFF7D7DA87DA8FFFFFD04%7DFD34FFA87DA87DFD17FFA8A8FFFF7DFD09FF7DFFFFFF7DFD05FF7DFFFF%FF7DFFFFA8A8FFA8A8FFFF7DFFFFA8A8FD05FF7DFD34FFFD04A8FD17FFA8%A2FFA8A8FD09FFA8A8FFA8A8FD05FFA8A8FFA8A8FFFF7DFFFFFF7DFFFFA1%A8FFA8A8FD05FFA8FD4CFFA87DA87DA8FFFF7DA8A1A87DA87DA87DA87DFF%FFFF7DA87DA8FFFF7DA8A87D7DFFFFA87DA87DA8FFFF7DFFFFA87DA87DA8%7DA852FD4CFF76FD04A8FFFFA87DA8A1A8A8A8A2A87DA8FFFFFD04A876FF%FFFFA1A8A8FFFFFFA8A87DA8A8FFFFA1A8FFFD04A87DA8A8A8FD4CFFA8FD%17FFA8FD10FF7DFD56FF7DFD17FF7DFD10FFA8A8FD55FF7DFFFFA87D7DA8%7DA87D7DFFFFFF7D7DA87DA87D7D7DFFFF7DFFFFA8FD047DFFFFA87DA87D%A8FFFF7DFFFFA87DA87D7D7DA87DFD4CFF7DFFFFA87DFD05FF7DFFFFA87D%FD05FFA87DFFFF7DFFFF7DA8FFA87DFFFF7DFFFFA87DFFFF7DA8FF7DA8FD%05FF7DFD4CFFA8FFFFA8A8FD05FFA8A8FFA8A8FD06FF7DFFFFA8FFFF7DFF%FFFF7DFFFFA8A8FFA8A8FFFF7DFFFFA8A8FD05FF7DFD4CFF7DA8A87DA8FF%FFA8A8A876FFFFFF7DA8A8A8FFFFA87DA8A87DFFFFA8A8FFA87DA8A876FF%FFA87DFFFF7D7DA87DA8FFFFA8A8A87DFD4DFF7DA87DFFFFFF76A8A1A8FF%FFFFA87DA87DFFFFFFA8A87DFFFFFF7DFFFFFFA2A8A1A8FFFFA8A8FFFFA8%A87DA8FFFFFF7D7DA87DFD52FFA8A8FD09FFA8A8FD08FF7DA8FD09FF7DFF%A8FD07FF7DFD56FF7DFD07FFA8FF7DFD09FF7DFD09FFA8A8FD09FFA8A8FD%4EFFFD047DA8FFA87D7DA87DFFFFFF7DA17D7DA8FFA8FD047DFFFFA87DA8%7DA8FFFFFD057DFFFFA87DA87DA8FFFF7DA17D7DFD4CFFA2A8FFA8A8FD05%FFA8A8FFA8A8FD06FF7DFFFFA2FD06FF7DFFFFA8A8FD05FF7DFFFFA8A1FD%05FF7DFD4CFF7DFFFFA8A8FD05FF7DFFFFA87DFD05FFA87DFFFF7DFD05FF%A8A8FFFF7DFD06FFA1A8FFA1A8FD05FFA1FD4CFFA8FFFFA87DFD05A87DA8%FFA87DFD06A87DFFFFA7CAFFCAA8A8A87DFFFFA87DFD05A87DFFFFA87DFF%A8A8A8FF7DFD4CFFA8FFFFFF7DA87DA87DA87DFFFFFF7DA87DA87DA87DA8%FFFFA8CACACA7DA87DFFFFFFA8A87DA87DA87DA8FFFFA8A87DA87DA87DA8%FDFCFFFDE6FFA8A8FD04FFA8FFFFA8A8FD74FFA97D7DA87DA87D7D7DFF7D%7DFD74FFA85253527D527D597DA8A87DFD75FFA8A8FF7DA8A8AFA8FFA8FD%79FFA8FD81FFA8FD7DFFA8A87D7DFD7CFF7DA852A8A8FD7BFFA87D7D7DA8%FD7BFFA8FD99FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:50:26+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:50:27+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:50:27+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>132</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAhAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qlHmL/CXpQ/4j+oel&#xA;yP1f9I+jx5U+Lh621adaYqlPlRfK/wDijWG8uiy+qGy08Stp/pemZBLeVDej8PLiR1xVluKuxVjU&#xA;+saTpfm+/fU723sUn0+xEDXMqQhzHPeFwhcry481rTpUYqt8ux6Lq19r99GttfwSX6CG6URzIyrY&#xA;WoIVxyBAYMNj1rkJY4ncgNsc04ihIge9Qu0/KWO6mju10BLpHZZ1lFmJA4PxBw3xcq9a5IVWzCRJ&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:21CC7A02122068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:21CC7A02122068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:21CC7A02122068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:50:27+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -184.275 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 184.275 li
360.004 184.275 li
360.004 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 184.275 mo
360.004 184.275 li
360.004 0 li
0 0 li
0 184.275 li
cp
clp
9.90674 29.5317 mo
9.67334 29.7798 9.44531 29.9575 9.22266 30.064 cv
9 30.1704 8.75977 30.2236 8.50244 30.2236 cv
7.98047 30.2236 7.52441 30.0059 7.13428 29.5693 cv
6.74463 29.1333 6.5498 28.5728 6.5498 27.8882 cv
6.5498 27.2036 6.76563 26.5771 7.19727 26.0088 cv
7.62891 25.4409 8.18359 25.1567 8.8623 25.1567 cv
9.28369 25.1567 9.63184 25.2915 9.90674 25.561 cv
9.90674 24.6753 li
9.90674 24.1323 9.89355 23.7983 9.86719 23.6743 cv
9.84082 23.5498 9.7998 23.4648 9.74414 23.4194 cv
9.68799 23.3745 9.61816 23.3521 9.53467 23.3521 cv
9.44385 23.3521 9.32324 23.3799 9.17285 23.4355 cv
9.10498 23.2432 li
10.5366 22.6548 li
10.7725 22.6548 li
10.7725 28.1821 li
10.7725 28.7393 10.7856 29.0791 10.8115 29.2021 cv
10.8379 29.3247 10.8799 29.4106 10.9375 29.4595 cv
10.9951 29.5078 11.0625 29.5322 11.1392 29.5322 cv
11.2334 29.5322 11.3594 29.5024 11.5166 29.4434 cv
11.5742 29.6357 li
10.1479 30.2236 li
9.90674 30.2236 li
9.90674 29.5317 li
cp
9.90674 29.167 mo
9.90674 26.7178 li
9.88574 26.478 9.82275 26.2607 9.71826 26.0664 cv
9.61377 25.8716 9.4751 25.7246 9.30273 25.626 cv
9.12988 25.5269 8.96191 25.4771 8.79785 25.4771 cv
8.49121 25.4771 8.21777 25.6147 7.97705 25.8892 cv
7.65967 26.2505 7.50146 26.7783 7.50146 27.4731 cv
7.50146 28.1753 7.65479 28.7129 7.96143 29.0864 cv
8.26807 29.46 8.60986 29.6465 8.98633 29.6465 cv
9.30322 29.6465 9.61035 29.4868 9.90674 29.167 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
12.6753 27.1021 mo
12.6719 27.8091 12.8442 28.3638 13.1924 28.7656 cv
13.5405 29.1675 13.9492 29.3687 14.4189 29.3687 cv
14.7324 29.3687 15.0049 29.2832 15.2358 29.1128 cv
15.4678 28.9419 15.6616 28.646 15.8184 28.2246 cv
15.9785 28.3291 li
15.9058 28.8105 15.6934 29.2471 15.3423 29.6377 cv
14.9917 30.0283 14.5518 30.2236 14.0234 30.2236 cv
13.4497 30.2236 12.959 30.0005 12.5503 29.5542 cv
12.1421 29.1074 11.938 28.5068 11.938 27.7529 cv
11.938 26.936 12.147 26.2993 12.5659 25.8423 cv
12.9849 25.3853 13.5107 25.1567 14.1431 25.1567 cv
14.6787 25.1567 15.1182 25.333 15.4624 25.686 cv
15.8066 26.0391 15.9785 26.5112 15.9785 27.1021 cv
12.6753 27.1021 li
cp
12.6753 26.8027 mo
14.8882 26.8027 li
14.8711 26.4971 14.8345 26.2817 14.7788 26.1563 cv
14.6919 25.9619 14.562 25.8091 14.3896 25.6978 cv
14.2178 25.5864 14.0376 25.5308 13.8496 25.5308 cv
13.561 25.5308 13.3027 25.6431 13.0747 25.8667 cv
12.8467 26.0913 12.7139 26.4028 12.6753 26.8027 cv
cp
f
16.2778 25.7661 mo
17.7476 25.1782 li
17.9458 25.1782 li
17.9458 26.2871 li
18.1934 25.8687 18.4414 25.5757 18.6904 25.4082 cv
18.9399 25.2402 19.2021 25.1567 19.4775 25.1567 cv
19.9585 25.1567 20.3589 25.3442 20.6797 25.7202 cv
21.0737 26.1792 21.2705 26.7778 21.2705 27.5151 cv
21.2705 28.3398 21.0337 29.022 20.5596 29.561 cv
20.1694 30.0029 19.6777 30.2236 19.0854 30.2236 cv
18.8276 30.2236 18.6045 30.1875 18.4165 30.1147 cv
18.2769 30.063 18.1201 29.9595 17.9458 29.8037 cv
17.9458 31.2607 li
17.9458 31.5898 17.9658 31.7993 18.0059 31.8887 cv
18.0464 31.978 18.1162 32.0488 18.2158 32.1011 cv
18.3154 32.1538 18.4961 32.1802 18.7583 32.1802 cv
18.7583 32.3726 li
16.2461 32.3726 li
16.2461 32.1802 li
16.377 32.1802 li
16.5693 32.1836 16.7339 32.1475 16.8701 32.0713 cv
16.9365 32.0327 16.9883 31.9712 17.0249 31.8862 cv
17.0615 31.8018 17.0796 31.5859 17.0796 31.2393 cv
17.0796 26.6958 li
17.0796 26.3896 17.0659 26.1953 17.0381 26.1128 cv
17.0103 26.0298 16.9663 25.9678 16.9053 25.9263 cv
16.8447 25.8848 16.7622 25.8638 16.6582 25.8638 cv
16.5747 25.8638 16.4688 25.8882 16.3403 25.937 cv
16.2778 25.7661 li
cp
17.9458 26.5957 mo
17.9458 28.3857 li
17.9458 28.7729 17.9614 29.0278 17.9927 29.1499 cv
18.0415 29.3521 18.1611 29.5298 18.3511 29.6836 cv
18.541 29.8369 18.7808 29.9136 19.0698 29.9136 cv
19.4185 29.9136 19.7007 29.7778 19.917 29.5054 cv
20.1992 29.1499 20.3403 28.6489 20.3403 28.0034 cv
20.3403 27.271 20.1802 26.7075 19.8594 26.313 cv
19.6362 26.041 19.3716 25.9048 19.0645 25.9048 cv
18.8975 25.9048 18.7319 25.9468 18.5679 26.0308 cv
18.4424 26.0933 18.2349 26.2817 17.9458 26.5957 cv
cp
f
23.3657 23.7241 mo
23.3657 25.2954 li
24.4829 25.2954 li
24.4829 25.6484 li
23.3657 25.6592 li
23.3657 28.7617 li
23.3657 29.0713 23.4102 29.2803 23.4985 29.3882 cv
23.5874 29.4966 23.7012 29.5503 23.8403 29.5503 cv
23.9551 29.5503 24.0659 29.5142 24.1738 29.4419 cv
24.2817 29.3701 24.3652 29.2632 24.4243 29.1226 cv
24.6274 29.1226 li
24.5054 29.4663 24.333 29.7251 24.1099 29.8989 cv
23.8867 30.0728 23.6567 30.1597 23.4199 30.1597 cv
23.2593 30.1597 23.1025 30.1152 22.9492 30.0259 cv
22.7959 29.937 22.6826 29.8096 22.6094 29.6436 cv
22.5366 29.4775 22.5 29.2217 22.5 28.876 cv
22.5 25.6484 li
21.7407 25.6484 li
21.7407 25.4819 li
21.9331 25.4063 22.1294 25.2778 22.3301 25.0972 cv
22.5313 24.916 22.7104 24.7002 22.8687 24.4497 cv
22.9492 24.3174 23.0615 24.0757 23.2056 23.7241 cv
23.3657 23.7241 li
cp
f
26.3486 22.6548 mo
26.3486 26.1533 li
26.7354 25.729 27.042 25.4565 27.2681 25.3364 cv
27.4946 25.2163 27.7212 25.1567 27.9478 25.1567 cv
28.2197 25.1567 28.4531 25.2314 28.6479 25.3813 cv
28.8433 25.5313 28.9878 25.7666 29.082 26.0874 cv
29.1484 26.3105 29.1812 26.7183 29.1812 27.311 cv
29.1812 29.0054 li
29.1812 29.3062 29.2056 29.5122 29.2539 29.6226 cv
29.2886 29.7056 29.3472 29.7715 29.4302 29.8198 cv
29.5132 29.8682 29.6655 29.8926 29.8867 29.8926 cv
29.8867 30.085 li
27.5459 30.085 li
27.5459 29.8926 li
27.6548 29.8926 li
27.877 29.8926 28.0313 29.8589 28.1177 29.791 cv
28.2046 29.7236 28.2651 29.6245 28.2998 29.4927 cv
28.3101 29.4375 28.3154 29.2749 28.3154 29.0054 cv
28.3154 27.3101 li
28.3154 26.7866 28.2886 26.4434 28.2344 26.2793 cv
28.1802 26.1152 28.0938 25.9922 27.9751 25.9102 cv
27.8569 25.8281 27.7139 25.7871 27.5464 25.7871 cv
27.3755 25.7871 27.1978 25.8325 27.0127 25.9233 cv
26.8281 26.0137 26.6064 26.1968 26.3486 26.4722 cv
26.3486 29.0054 li
26.3486 29.3301 26.3667 29.5327 26.4028 29.6123 cv
26.4395 29.6919 26.5068 29.7583 26.606 29.812 cv
26.7046 29.8657 26.8755 29.8926 27.1182 29.8926 cv
27.1182 30.085 li
24.7554 30.085 li
24.7554 29.8926 li
24.9668 29.8926 25.1328 29.8594 25.2539 29.7939 cv
25.3232 29.7593 25.3784 29.6934 25.4204 29.5967 cv
25.4619 29.5 25.4824 29.3027 25.4824 29.0054 cv
25.4824 24.6753 li
25.4824 24.1323 25.4692 23.7983 25.4434 23.6743 cv
25.4175 23.5498 25.3774 23.4648 25.3237 23.4194 cv
25.27 23.3745 25.1978 23.3521 25.1074 23.3521 cv
25.0347 23.3521 24.9165 23.3799 24.7534 23.4355 cv
24.6807 23.2432 li
26.1089 22.6548 li
26.3486 22.6548 li
cp
f
33.0083 26.5825 mo
33.0083 25.7759 33.1304 25.0811 33.3735 24.4985 cv
33.6172 23.916 33.9409 23.4824 34.3442 23.1973 cv
34.6572 22.9712 34.9805 22.8579 35.3145 22.8579 cv
35.8569 22.8579 36.3442 23.1348 36.7754 23.6875 cv
37.3145 24.3726 37.584 25.3013 37.584 26.4727 cv
37.584 27.2935 37.4658 27.9907 37.229 28.5645 cv
36.9927 29.1382 36.6909 29.5547 36.3242 29.814 cv
35.957 30.0728 35.603 30.2026 35.2622 30.2026 cv
34.5874 30.2026 34.0259 29.8042 33.5771 29.0078 cv
33.1982 28.3369 33.0083 27.5283 33.0083 26.5825 cv
cp
34.0347 26.7104 mo
34.0347 27.6841 34.1543 28.4785 34.3936 29.0942 cv
34.5913 29.6118 34.8862 29.8711 35.2778 29.8711 cv
35.4653 29.8711 35.6597 29.7866 35.8608 29.6182 cv
36.062 29.4497 36.2144 29.167 36.3184 28.7705 cv
36.478 28.1724 36.5576 27.3291 36.5576 26.2407 cv
36.5576 25.4341 36.4746 24.7612 36.3081 24.2227 cv
36.1831 23.8228 36.022 23.5391 35.8242 23.3721 cv
35.6821 23.2573 35.5103 23.2002 35.3091 23.2002 cv
35.0732 23.2002 34.8638 23.3062 34.6797 23.5186 cv
34.4302 23.8071 34.2603 24.2607 34.1699 24.8794 cv
34.0801 25.4985 34.0347 26.1089 34.0347 26.7104 cv
cp
f
64.6841 48.4858 mo
64.4512 48.7339 64.2231 48.9116 64.0005 49.0181 cv
63.7778 49.1245 63.5376 49.1777 63.2798 49.1777 cv
62.7578 49.1777 62.3018 48.96 61.9121 48.5234 cv
61.5225 48.0874 61.3276 47.5269 61.3276 46.8423 cv
61.3276 46.1577 61.543 45.5313 61.9746 44.9629 cv
62.4063 44.395 62.9614 44.1108 63.6401 44.1108 cv
64.061 44.1108 64.4092 44.2456 64.6841 44.5151 cv
64.6841 43.6294 li
64.6841 43.0864 64.6709 42.7524 64.6445 42.6284 cv
64.6187 42.5034 64.5776 42.4189 64.5215 42.3735 cv
64.4658 42.3286 64.396 42.3062 64.312 42.3062 cv
64.2212 42.3062 64.1006 42.334 63.9507 42.3896 cv
63.8823 42.1973 li
65.314 41.6089 li
65.5503 41.6089 li
65.5503 47.1362 li
65.5503 47.6934 65.563 48.0332 65.5894 48.1563 cv
65.6157 48.2788 65.6577 48.3647 65.7153 48.4136 cv
65.7729 48.4619 65.8403 48.4863 65.917 48.4863 cv
66.0112 48.4863 66.1372 48.4565 66.2944 48.3975 cv
66.3521 48.5898 li
64.9253 49.1777 li
64.6841 49.1777 li
64.6841 48.4858 li
cp
64.6841 48.1211 mo
64.6841 45.6719 li
64.6631 45.4321 64.6006 45.2148 64.4961 45.0205 cv
64.3911 44.8257 64.2529 44.6787 64.0801 44.5796 cv
63.9077 44.481 63.7393 44.4312 63.5757 44.4312 cv
63.269 44.4312 62.9951 44.5688 62.7549 44.8433 cv
62.4375 45.2046 62.2788 45.7324 62.2788 46.4272 cv
62.2788 47.1294 62.4321 47.667 62.7393 48.0405 cv
63.0459 48.4141 63.3872 48.6006 63.7637 48.6006 cv
64.0811 48.6006 64.3877 48.4409 64.6841 48.1211 cv
cp
f
67.4531 46.0562 mo
67.4492 46.7632 67.6216 47.3179 67.9697 47.7197 cv
68.3179 48.1216 68.7271 48.3228 69.1968 48.3228 cv
69.5098 48.3228 69.7822 48.2373 70.0137 48.0669 cv
70.2451 47.896 70.4395 47.6001 70.5962 47.1787 cv
70.7563 47.2832 li
70.6831 47.7646 70.4712 48.2012 70.1201 48.5918 cv
69.769 48.9824 69.3296 49.1777 68.8008 49.1777 cv
68.2275 49.1777 67.7363 48.9546 67.3281 48.5083 cv
66.9194 48.0615 66.7153 47.4609 66.7153 46.707 cv
66.7153 45.8901 66.9248 45.2534 67.3438 44.7964 cv
67.7627 44.3394 68.2881 44.1108 68.9209 44.1108 cv
69.4561 44.1108 69.896 44.2871 70.2402 44.6401 cv
70.5845 44.9932 70.7563 45.4653 70.7563 46.0562 cv
67.4531 46.0562 li
cp
67.4531 45.7568 mo
69.666 45.7568 li
69.6484 45.4512 69.6118 45.2358 69.5562 45.1104 cv
69.4692 44.916 69.3398 44.7632 69.1675 44.6519 cv
68.9951 44.5405 68.8149 44.4849 68.6274 44.4849 cv
68.3384 44.4849 68.0801 44.5972 67.8521 44.8208 cv
67.6245 45.0454 67.4912 45.3569 67.4531 45.7568 cv
cp
f
71.0557 44.7202 mo
72.5254 44.1318 li
72.7231 44.1318 li
72.7231 45.2407 li
72.9707 44.8228 73.2192 44.5298 73.4683 44.3623 cv
73.7173 44.1943 73.9795 44.1108 74.2549 44.1108 cv
74.7358 44.1108 75.1367 44.2983 75.4575 44.6743 cv
75.8511 45.1333 76.0479 45.7319 76.0479 46.4692 cv
76.0479 47.2939 75.811 47.9761 75.3374 48.5151 cv
74.9468 48.957 74.4556 49.1777 73.8628 49.1777 cv
73.605 49.1777 73.3823 49.1416 73.1938 49.0688 cv
73.0547 49.0171 72.8975 48.9136 72.7231 48.7578 cv
72.7231 50.2148 li
72.7231 50.5439 72.7437 50.7534 72.7837 50.8428 cv
72.8237 50.9321 72.8936 51.0029 72.9932 51.0552 cv
73.0928 51.1079 73.2739 51.1343 73.5356 51.1343 cv
73.5356 51.3267 li
71.0234 51.3267 li
71.0234 51.1343 li
71.1548 51.1343 li
71.3472 51.1377 71.5112 51.1016 71.6475 51.0249 cv
71.7144 50.9868 71.7656 50.9253 71.8022 50.8403 cv
71.8389 50.7559 71.8574 50.54 71.8574 50.1934 cv
71.8574 45.6499 li
71.8574 45.3438 71.8433 45.1494 71.8159 45.0664 cv
71.7881 44.9839 71.7437 44.9219 71.6831 44.8804 cv
71.6221 44.8389 71.5396 44.8179 71.4355 44.8179 cv
71.3525 44.8179 71.2466 44.8423 71.1182 44.8911 cv
71.0557 44.7202 li
cp
72.7231 45.5498 mo
72.7231 47.3398 li
72.7231 47.7271 72.7393 47.9819 72.7705 48.104 cv
72.8193 48.3062 72.9385 48.4839 73.1284 48.6377 cv
73.3184 48.791 73.5581 48.8677 73.8477 48.8677 cv
74.1963 48.8677 74.4785 48.7319 74.6948 48.4595 cv
74.9771 48.104 75.1182 47.603 75.1182 46.9575 cv
75.1182 46.2251 74.9575 45.6616 74.6367 45.2671 cv
74.4141 44.9951 74.1489 44.8589 73.8423 44.8589 cv
73.6748 44.8589 73.5093 44.9009 73.3457 44.9849 cv
73.2202 45.0474 73.0127 45.2358 72.7231 45.5498 cv
cp
f
78.1436 42.6782 mo
78.1436 44.2495 li
79.2603 44.2495 li
79.2603 44.6025 li
78.1436 44.6133 li
78.1436 47.7158 li
78.1436 48.0254 78.1875 48.2344 78.2764 48.3423 cv
78.3647 48.4507 78.479 48.5044 78.6177 48.5044 cv
78.7324 48.5044 78.8438 48.4683 78.9512 48.396 cv
79.0591 48.3237 79.1426 48.2173 79.2017 48.0767 cv
79.4048 48.0767 li
79.2827 48.4204 79.1104 48.6792 78.8872 48.853 cv
78.6646 49.0269 78.4341 49.1138 78.1973 49.1138 cv
78.0371 49.1138 77.8804 49.0693 77.7271 48.98 cv
77.5737 48.8911 77.4604 48.7637 77.3872 48.5977 cv
77.314 48.4316 77.2773 48.1758 77.2773 47.8301 cv
77.2773 44.6025 li
76.5186 44.6025 li
76.5186 44.436 li
76.7104 44.3604 76.9067 44.2319 77.1079 44.0513 cv
77.3086 43.8701 77.4883 43.6543 77.646 43.4038 cv
77.7271 43.2715 77.8394 43.0298 77.9829 42.6782 cv
78.1436 42.6782 li
cp
f
81.126 41.6089 mo
81.126 45.1074 li
81.5127 44.6831 81.8193 44.4106 82.0459 44.2905 cv
82.2725 44.1704 82.499 44.1108 82.7256 44.1108 cv
82.9971 44.1108 83.2305 44.1855 83.4258 44.3354 cv
83.6211 44.4854 83.7656 44.7207 83.8594 45.0415 cv
83.9258 45.2646 83.959 45.6724 83.959 46.2651 cv
83.959 47.959 li
83.959 48.2603 83.9834 48.4663 84.0317 48.5767 cv
84.0659 48.6597 84.125 48.7256 84.208 48.7739 cv
84.291 48.8223 84.4434 48.8467 84.6646 48.8467 cv
84.6646 49.0391 li
82.3232 49.0391 li
82.3232 48.8467 li
82.4326 48.8467 li
82.6543 48.8467 82.8086 48.813 82.895 48.7451 cv
82.9819 48.6777 83.043 48.5786 83.0776 48.4468 cv
83.0879 48.3916 83.0933 48.229 83.0933 47.959 cv
83.0933 46.2642 li
83.0933 45.7407 83.0659 45.397 83.0117 45.2334 cv
82.958 45.0693 82.8716 44.9463 82.7529 44.8643 cv
82.6343 44.7822 82.4912 44.7412 82.3242 44.7412 cv
82.1528 44.7412 81.9751 44.7866 81.7905 44.8774 cv
81.6055 44.9678 81.3843 45.1509 81.126 45.4263 cv
81.126 47.959 li
81.126 48.2842 81.144 48.4868 81.1807 48.5664 cv
81.2173 48.646 81.2847 48.7124 81.3833 48.7661 cv
81.4824 48.8198 81.6528 48.8467 81.8955 48.8467 cv
81.8955 49.0391 li
79.5332 49.0391 li
79.5332 48.8467 li
79.7441 48.8467 79.9106 48.8135 80.0317 48.748 cv
80.1011 48.7134 80.1563 48.6475 80.1978 48.5508 cv
80.2393 48.4541 80.2603 48.2568 80.2603 47.959 cv
80.2603 43.6294 li
80.2603 43.0864 80.2471 42.7524 80.2212 42.6284 cv
80.1948 42.5034 80.1548 42.4189 80.1011 42.3735 cv
80.0474 42.3286 79.9756 42.3062 79.8853 42.3062 cv
79.8125 42.3062 79.6943 42.334 79.5313 42.3896 cv
79.4585 42.1973 li
80.8862 41.6089 li
81.126 41.6089 li
cp
f
88.6411 42.646 mo
90.3711 41.812 li
90.5444 41.812 li
90.5444 47.7881 li
90.5444 48.1865 90.561 48.4341 90.5942 48.5322 cv
90.6274 48.6299 90.6963 48.7051 90.8013 48.7573 cv
90.9067 48.8101 91.1201 48.8394 91.4424 48.8467 cv
91.4424 49.0391 li
88.7695 49.0391 li
88.7695 48.8467 li
89.104 48.8394 89.3198 48.8105 89.417 48.7603 cv
89.5146 48.7095 89.5825 48.6411 89.6211 48.5557 cv
89.6592 48.4702 89.6782 48.2144 89.6782 47.7881 cv
89.6782 43.9609 li
89.6782 43.4453 89.6606 43.1147 89.626 42.9683 cv
89.6016 42.8569 89.5571 42.7749 89.4922 42.7231 cv
89.4277 42.6704 89.3501 42.6445 89.2593 42.6445 cv
89.1304 42.6445 88.9502 42.6987 88.7197 42.8062 cv
88.6411 42.646 li
cp
f
140.212 85.9023 mo
139.979 86.1504 139.75 86.3276 139.528 86.4346 cv
139.305 86.541 139.065 86.5942 138.808 86.5942 cv
138.286 86.5942 137.83 86.3765 137.44 85.9399 cv
137.05 85.5039 136.855 84.9434 136.855 84.2588 cv
136.855 83.5742 137.071 82.9478 137.502 82.3794 cv
137.934 81.811 138.489 81.5269 139.167 81.5269 cv
139.589 81.5269 139.937 81.6616 140.212 81.9312 cv
140.212 81.0459 li
140.212 80.5029 140.199 80.1689 140.172 80.0444 cv
140.146 79.9199 140.105 79.8354 140.049 79.79 cv
139.994 79.7451 139.924 79.7222 139.84 79.7222 cv
139.749 79.7222 139.628 79.75 139.478 79.8062 cv
139.41 79.6133 li
140.842 79.0254 li
141.078 79.0254 li
141.078 84.5522 li
141.078 85.1099 141.091 85.4497 141.117 85.5728 cv
141.143 85.6953 141.185 85.7813 141.243 85.8296 cv
141.3 85.8784 141.368 85.9028 141.445 85.9028 cv
141.539 85.9028 141.665 85.873 141.822 85.814 cv
141.879 86.0063 li
140.453 86.5942 li
140.212 86.5942 li
140.212 85.9023 li
cp
140.212 85.5376 mo
140.212 83.0884 li
140.191 82.8481 140.128 82.6313 140.023 82.4365 cv
139.919 82.2422 139.78 82.0952 139.608 81.9961 cv
139.436 81.8975 139.267 81.8477 139.103 81.8477 cv
138.796 81.8477 138.523 81.9849 138.282 82.2593 cv
137.965 82.6206 137.807 83.1489 137.807 83.8438 cv
137.807 84.5454 137.96 85.0835 138.267 85.4565 cv
138.574 85.8301 138.915 86.0171 139.292 86.0171 cv
139.609 86.0171 139.916 85.8569 140.212 85.5376 cv
cp
f
142.98 83.4727 mo
142.977 84.1797 143.149 84.7339 143.498 85.1362 cv
143.846 85.5381 144.254 85.7393 144.724 85.7393 cv
145.038 85.7393 145.31 85.6538 145.542 85.4829 cv
145.773 85.3125 145.967 85.0166 146.124 84.5952 cv
146.284 84.6997 li
146.211 85.1812 145.999 85.6177 145.648 86.0083 cv
145.297 86.3989 144.857 86.5942 144.329 86.5942 cv
143.755 86.5942 143.264 86.3711 142.856 85.9243 cv
142.447 85.478 142.243 84.8774 142.243 84.1235 cv
142.243 83.3066 142.453 82.6694 142.871 82.2124 cv
143.29 81.7554 143.816 81.5269 144.449 81.5269 cv
144.984 81.5269 145.423 81.7036 145.768 82.0566 cv
146.112 82.4097 146.284 82.8813 146.284 83.4727 cv
142.98 83.4727 li
cp
142.98 83.1733 mo
145.193 83.1733 li
145.176 82.8677 145.14 82.6519 145.084 82.5269 cv
144.997 82.3325 144.868 82.1792 144.695 82.0679 cv
144.523 81.957 144.343 81.9014 144.155 81.9014 cv
143.866 81.9014 143.608 82.0132 143.38 82.2373 cv
143.152 82.4614 143.019 82.7734 142.98 83.1733 cv
cp
f
146.583 82.1362 mo
148.053 81.5483 li
148.251 81.5483 li
148.251 82.6572 li
148.499 82.2393 148.747 81.9463 148.996 81.7788 cv
149.245 81.6108 149.507 81.5269 149.783 81.5269 cv
150.264 81.5269 150.665 81.7148 150.985 82.0908 cv
151.379 82.5498 151.576 83.1484 151.576 83.8857 cv
151.576 84.7104 151.339 85.3921 150.865 85.9316 cv
150.475 86.3735 149.983 86.5942 149.391 86.5942 cv
149.133 86.5942 148.91 86.5581 148.722 86.4854 cv
148.582 86.4336 148.425 86.3301 148.251 86.1743 cv
148.251 87.6313 li
148.251 87.9604 148.271 88.1694 148.312 88.2588 cv
148.352 88.3481 148.421 88.4194 148.521 88.4717 cv
148.621 88.5244 148.801 88.5508 149.063 88.5508 cv
149.063 88.7432 li
146.551 88.7432 li
146.551 88.5508 li
146.682 88.5508 li
146.875 88.5542 147.039 88.5181 147.175 88.4414 cv
147.242 88.4033 147.293 88.3418 147.33 88.2568 cv
147.367 88.1724 147.385 87.9565 147.385 87.6099 cv
147.385 83.0664 li
147.385 82.7603 147.371 82.5654 147.343 82.4829 cv
147.315 82.4004 147.271 82.3384 147.21 82.2969 cv
147.15 82.2554 147.067 82.2344 146.963 82.2344 cv
146.88 82.2344 146.774 82.2588 146.646 82.3076 cv
146.583 82.1362 li
cp
148.251 82.9663 mo
148.251 84.7563 li
148.251 85.1436 148.267 85.3979 148.298 85.52 cv
148.347 85.7227 148.466 85.9004 148.656 86.0542 cv
148.846 86.2075 149.086 86.2842 149.375 86.2842 cv
149.724 86.2842 150.006 86.1479 150.222 85.876 cv
150.504 85.52 150.646 85.0195 150.646 84.374 cv
150.646 83.6411 150.485 83.0776 150.165 82.6836 cv
149.941 82.4116 149.677 82.2754 149.37 82.2754 cv
149.203 82.2754 149.037 82.3174 148.873 82.4009 cv
148.748 82.4639 148.541 82.6523 148.251 82.9663 cv
cp
f
153.671 80.0947 mo
153.671 81.666 li
154.788 81.666 li
154.788 82.019 li
153.671 82.0293 li
153.671 85.1318 li
153.671 85.4419 153.715 85.6509 153.804 85.7588 cv
153.893 85.8667 154.006 85.9209 154.146 85.9209 cv
154.26 85.9209 154.372 85.8848 154.479 85.8125 cv
154.587 85.7402 154.67 85.6338 154.729 85.4932 cv
154.933 85.4932 li
154.811 85.8369 154.638 86.0957 154.415 86.2695 cv
154.192 86.4434 153.962 86.5303 153.725 86.5303 cv
153.565 86.5303 153.408 86.4858 153.254 86.3965 cv
153.101 86.3076 152.988 86.1802 152.915 86.0142 cv
152.842 85.8481 152.805 85.5923 152.805 85.2466 cv
152.805 82.019 li
152.046 82.019 li
152.046 81.8525 li
152.238 81.7769 152.435 81.6484 152.635 81.4673 cv
152.836 81.2866 153.016 81.0708 153.174 80.8203 cv
153.254 80.688 153.367 80.4463 153.511 80.0947 cv
153.671 80.0947 li
cp
f
156.654 79.0254 mo
156.654 82.5239 li
157.041 82.0991 157.347 81.8271 157.574 81.707 cv
157.8 81.5869 158.026 81.5269 158.253 81.5269 cv
158.525 81.5269 158.758 81.6021 158.954 81.752 cv
159.149 81.9019 159.293 82.1372 159.387 82.4575 cv
159.454 82.6812 159.487 83.0889 159.487 83.6812 cv
159.487 85.3755 li
159.487 85.6768 159.511 85.8823 159.559 85.9932 cv
159.594 86.0762 159.652 86.1416 159.735 86.1904 cv
159.819 86.2388 159.971 86.2627 160.192 86.2627 cv
160.192 86.4556 li
157.851 86.4556 li
157.851 86.2627 li
157.96 86.2627 li
158.182 86.2627 158.336 86.229 158.423 86.1616 cv
158.51 86.0942 158.57 85.9946 158.605 85.8633 cv
158.616 85.8081 158.621 85.6455 158.621 85.3755 cv
158.621 83.6802 li
158.621 83.1572 158.594 82.8135 158.54 82.6499 cv
158.485 82.4858 158.399 82.3628 158.281 82.2808 cv
158.162 82.1987 158.019 82.1577 157.852 82.1577 cv
157.681 82.1577 157.503 82.2031 157.318 82.2939 cv
157.133 82.3843 156.912 82.5674 156.654 82.8428 cv
156.654 85.3755 li
156.654 85.7007 156.672 85.9033 156.708 85.9829 cv
156.745 86.062 156.813 86.1289 156.911 86.1826 cv
157.01 86.2358 157.181 86.2627 157.423 86.2627 cv
157.423 86.4556 li
155.061 86.4556 li
155.061 86.2627 li
155.272 86.2627 155.438 86.23 155.559 86.1646 cv
155.628 86.1299 155.684 86.064 155.726 85.9673 cv
155.767 85.8706 155.788 85.6733 155.788 85.3755 cv
155.788 81.0459 li
155.788 80.5029 155.775 80.1689 155.749 80.0444 cv
155.723 79.9199 155.683 79.8354 155.629 79.79 cv
155.575 79.7451 155.503 79.7222 155.413 79.7222 cv
155.34 79.7222 155.222 79.75 155.059 79.8062 cv
154.986 79.6133 li
156.414 79.0254 li
156.654 79.0254 li
cp
f
167.825 85.0796 mo
167.329 86.4556 li
163.153 86.4556 li
163.153 86.2588 li
164.382 85.1392 165.247 84.2251 165.748 83.5156 cv
166.249 82.8062 166.5 82.1577 166.5 81.5693 cv
166.5 81.1206 166.362 80.752 166.087 80.4634 cv
165.812 80.1748 165.483 80.0303 165.1 80.0303 cv
164.752 80.0303 164.44 80.1309 164.163 80.332 cv
163.886 80.5337 163.682 80.8286 163.55 81.2173 cv
163.356 81.2173 li
163.444 80.5767 163.667 80.0854 164.028 79.7427 cv
164.389 79.3999 164.839 79.2285 165.38 79.2285 cv
165.955 79.2285 166.435 79.4131 166.82 79.7827 cv
167.205 80.1519 167.397 80.5874 167.397 81.0889 cv
167.397 81.4478 167.314 81.8062 167.147 82.1646 cv
166.889 82.728 166.471 83.3252 165.894 83.9551 cv
165.026 84.9004 164.485 85.4668 164.27 85.6538 cv
166.11 85.6538 li
166.484 85.6538 166.747 85.6396 166.897 85.6118 cv
167.048 85.584 167.184 85.5273 167.305 85.4424 cv
167.426 85.3569 167.532 85.2358 167.622 85.0796 cv
167.825 85.0796 li
cp
f
278.139 163.942 mo
277.906 164.19 277.678 164.368 277.456 164.474 cv
277.233 164.581 276.993 164.634 276.735 164.634 cv
276.213 164.634 275.757 164.416 275.368 163.98 cv
274.977 163.544 274.783 162.983 274.783 162.299 cv
274.783 161.614 274.999 160.988 275.43 160.419 cv
275.862 159.851 276.417 159.567 277.095 159.567 cv
277.516 159.567 277.865 159.702 278.139 159.971 cv
278.139 159.086 li
278.139 158.543 278.126 158.209 278.1 158.084 cv
278.074 157.96 278.033 157.875 277.977 157.83 cv
277.921 157.785 277.851 157.762 277.767 157.762 cv
277.676 157.762 277.556 157.79 277.406 157.846 cv
277.337 157.653 li
278.769 157.065 li
279.005 157.065 li
279.005 162.592 li
279.005 163.149 279.018 163.49 279.044 163.612 cv
279.071 163.735 279.113 163.821 279.17 163.87 cv
279.228 163.918 279.295 163.942 279.373 163.942 cv
279.466 163.942 279.592 163.913 279.75 163.854 cv
279.807 164.046 li
278.38 164.634 li
278.139 164.634 li
278.139 163.942 li
cp
278.139 163.578 mo
278.139 161.128 li
278.119 160.888 278.056 160.671 277.951 160.477 cv
277.846 160.282 277.708 160.135 277.536 160.036 cv
277.363 159.937 277.195 159.888 277.031 159.888 cv
276.724 159.888 276.451 160.025 276.209 160.299 cv
275.893 160.661 275.734 161.189 275.734 161.884 cv
275.734 162.585 275.887 163.123 276.194 163.497 cv
276.501 163.87 276.842 164.057 277.219 164.057 cv
277.537 164.057 277.843 163.897 278.139 163.578 cv
cp
f
280.909 161.513 mo
280.905 162.22 281.077 162.774 281.425 163.176 cv
281.773 163.578 282.182 163.779 282.652 163.779 cv
282.965 163.779 283.238 163.694 283.469 163.523 cv
283.701 163.353 283.894 163.057 284.051 162.635 cv
284.211 162.74 li
284.138 163.221 283.926 163.657 283.576 164.048 cv
283.224 164.439 282.785 164.634 282.256 164.634 cv
281.683 164.634 281.192 164.411 280.784 163.964 cv
280.375 163.518 280.17 162.917 280.17 162.163 cv
280.17 161.346 280.38 160.709 280.798 160.252 cv
281.217 159.795 281.744 159.567 282.376 159.567 cv
282.912 159.567 283.351 159.744 283.695 160.096 cv
284.04 160.449 284.211 160.921 284.211 161.513 cv
280.909 161.513 li
cp
280.909 161.213 mo
283.122 161.213 li
283.104 160.907 283.067 160.692 283.011 160.567 cv
282.924 160.372 282.795 160.219 282.623 160.108 cv
282.451 159.997 282.27 159.941 282.083 159.941 cv
281.793 159.941 281.536 160.053 281.307 160.277 cv
281.08 160.501 280.947 160.813 280.909 161.213 cv
cp
f
284.511 160.176 mo
285.981 159.588 li
286.178 159.588 li
286.178 160.697 li
286.426 160.279 286.674 159.986 286.923 159.818 cv
287.172 159.651 287.435 159.567 287.71 159.567 cv
288.191 159.567 288.592 159.755 288.913 160.13 cv
289.306 160.59 289.503 161.188 289.503 161.926 cv
289.503 162.75 289.266 163.432 288.792 163.971 cv
288.402 164.413 287.911 164.634 287.318 164.634 cv
287.06 164.634 286.837 164.598 286.649 164.525 cv
286.509 164.474 286.353 164.37 286.178 164.214 cv
286.178 165.671 li
286.178 166 286.199 166.209 286.239 166.299 cv
286.279 166.388 286.349 166.459 286.449 166.512 cv
286.548 166.564 286.729 166.59 286.991 166.59 cv
286.991 166.783 li
284.479 166.783 li
284.479 166.59 li
284.61 166.59 li
284.802 166.594 284.966 166.558 285.103 166.481 cv
285.169 166.443 285.221 166.382 285.257 166.297 cv
285.294 166.212 285.313 165.997 285.313 165.65 cv
285.313 161.106 li
285.313 160.8 285.298 160.605 285.271 160.523 cv
285.243 160.44 285.199 160.378 285.138 160.336 cv
285.078 160.295 284.995 160.274 284.891 160.274 cv
284.807 160.274 284.702 160.298 284.574 160.347 cv
284.511 160.176 li
cp
286.178 161.006 mo
286.178 162.796 li
286.178 163.183 286.194 163.438 286.226 163.56 cv
286.275 163.763 286.394 163.94 286.583 164.094 cv
286.774 164.248 287.013 164.324 287.303 164.324 cv
287.651 164.324 287.934 164.188 288.15 163.916 cv
288.432 163.56 288.573 163.06 288.573 162.414 cv
288.573 161.681 288.413 161.118 288.092 160.724 cv
287.869 160.451 287.604 160.315 287.297 160.315 cv
287.13 160.315 286.964 160.357 286.8 160.441 cv
286.675 160.504 286.468 160.692 286.178 161.006 cv
cp
f
291.598 158.134 mo
291.598 159.706 li
292.715 159.706 li
292.715 160.059 li
291.598 160.069 li
291.598 163.172 li
291.598 163.482 291.643 163.691 291.732 163.799 cv
291.82 163.907 291.934 163.96 292.073 163.96 cv
292.188 163.96 292.299 163.925 292.407 163.853 cv
292.514 163.78 292.598 163.674 292.657 163.533 cv
292.86 163.533 li
292.738 163.877 292.566 164.136 292.342 164.31 cv
292.12 164.483 291.889 164.57 291.653 164.57 cv
291.493 164.57 291.335 164.525 291.182 164.437 cv
291.029 164.347 290.916 164.22 290.842 164.054 cv
290.769 163.888 290.733 163.632 290.733 163.287 cv
290.733 160.059 li
289.974 160.059 li
289.974 159.892 li
290.166 159.816 290.362 159.688 290.563 159.507 cv
290.764 159.327 290.943 159.111 291.101 158.86 cv
291.182 158.728 291.294 158.486 291.438 158.134 cv
291.598 158.134 li
cp
f
294.582 157.065 mo
294.582 160.563 li
294.968 160.139 295.275 159.867 295.501 159.747 cv
295.728 159.627 295.954 159.567 296.18 159.567 cv
296.453 159.567 296.686 159.642 296.881 159.792 cv
297.077 159.942 297.221 160.177 297.315 160.498 cv
297.381 160.721 297.415 161.129 297.415 161.721 cv
297.415 163.416 li
297.415 163.716 297.438 163.922 297.487 164.033 cv
297.521 164.116 297.581 164.182 297.663 164.23 cv
297.747 164.279 297.898 164.303 298.12 164.303 cv
298.12 164.495 li
295.779 164.495 li
295.779 164.303 li
295.888 164.303 li
296.11 164.303 296.264 164.269 296.35 164.202 cv
296.437 164.134 296.498 164.035 296.533 163.903 cv
296.543 163.848 296.548 163.685 296.548 163.416 cv
296.548 161.72 li
296.548 161.197 296.521 160.854 296.467 160.689 cv
296.413 160.525 296.327 160.403 296.208 160.321 cv
296.089 160.239 295.947 160.198 295.779 160.198 cv
295.608 160.198 295.43 160.243 295.246 160.333 cv
295.061 160.424 294.839 160.607 294.582 160.882 cv
294.582 163.416 li
294.582 163.741 294.599 163.943 294.636 164.023 cv
294.672 164.102 294.74 164.169 294.838 164.223 cv
294.938 164.276 295.108 164.303 295.351 164.303 cv
295.351 164.495 li
292.989 164.495 li
292.989 164.303 li
293.2 164.303 293.366 164.27 293.487 164.204 cv
293.556 164.169 293.612 164.104 293.653 164.007 cv
293.695 163.91 293.715 163.713 293.715 163.416 cv
293.715 159.086 li
293.715 158.543 293.703 158.209 293.676 158.084 cv
293.65 157.96 293.61 157.875 293.556 157.83 cv
293.502 157.785 293.43 157.762 293.34 157.762 cv
293.267 157.762 293.15 157.79 292.987 157.846 cv
292.914 157.653 li
294.341 157.065 li
294.582 157.065 li
cp
f
301.391 158.765 mo
301.593 158.287 301.848 157.918 302.157 157.658 cv
302.465 157.398 302.849 157.269 303.309 157.269 cv
303.877 157.269 304.313 157.453 304.617 157.821 cv
304.846 158.096 304.961 158.39 304.961 158.703 cv
304.961 159.218 304.637 159.75 303.989 160.299 cv
304.425 160.469 304.755 160.713 304.979 161.029 cv
305.203 161.346 305.314 161.718 305.314 162.146 cv
305.314 162.757 305.12 163.288 304.729 163.737 cv
304.22 164.321 303.483 164.613 302.518 164.613 cv
302.041 164.613 301.715 164.554 301.542 164.435 cv
301.371 164.316 301.284 164.189 301.284 164.054 cv
301.284 163.953 301.325 163.864 301.407 163.787 cv
301.489 163.71 301.587 163.672 301.703 163.672 cv
301.791 163.672 301.879 163.686 301.97 163.714 cv
302.029 163.732 302.164 163.796 302.373 163.907 cv
302.583 164.019 302.727 164.084 302.807 164.106 cv
302.936 164.145 303.074 164.164 303.22 164.164 cv
303.577 164.164 303.886 164.026 304.15 163.751 cv
304.413 163.476 304.544 163.151 304.544 162.774 cv
304.544 162.5 304.484 162.231 304.362 161.97 cv
304.271 161.775 304.171 161.627 304.063 161.526 cv
303.913 161.387 303.707 161.261 303.445 161.148 cv
303.183 161.035 302.917 160.978 302.644 160.978 cv
302.476 160.978 li
302.476 160.818 li
302.751 160.783 303.028 160.684 303.304 160.521 cv
303.582 160.357 303.782 160.16 303.908 159.931 cv
304.033 159.701 304.095 159.449 304.095 159.174 cv
304.095 158.816 303.983 158.526 303.758 158.306 cv
303.534 158.084 303.253 157.974 302.918 157.974 cv
302.378 157.974 301.926 158.266 301.564 158.849 cv
301.391 158.765 li
cp
f
19.4854 47.6597 mo
19.4854 47.8628 li
18.959 47.5986 18.5195 47.2891 18.1675 46.9341 cv
17.6655 46.4297 17.2783 45.8345 17.0063 45.1494 cv
16.7349 44.4639 16.5986 43.7524 16.5986 43.0146 cv
16.5986 41.936 16.8652 40.9526 17.3989 40.0635 cv
17.9321 39.1748 18.6274 38.5386 19.4854 38.1563 cv
19.4854 38.3804 li
19.0557 38.6167 18.7026 38.9399 18.4263 39.3496 cv
18.1504 39.7593 17.9443 40.2788 17.8081 40.9077 cv
17.6719 41.5361 17.6035 42.1929 17.6035 42.877 cv
17.6035 43.6201 17.6611 44.2959 17.7764 44.9038 cv
17.8672 45.3833 17.9775 45.7676 18.1069 46.0576 cv
18.2358 46.3477 18.4097 46.6265 18.6284 46.894 cv
18.8467 47.1616 19.1323 47.4165 19.4854 47.6597 cv
cp
f
22.7563 44.8901 mo
22.2656 45.2715 21.958 45.4917 21.8325 45.5513 cv
21.6445 45.6382 21.4448 45.6821 21.2324 45.6821 cv
20.9019 45.6821 20.6294 45.5688 20.4155 45.3423 cv
20.2017 45.1162 20.0947 44.8184 20.0947 44.4487 cv
20.0947 44.2153 20.1465 44.0132 20.251 43.8428 cv
20.394 43.606 20.6416 43.3828 20.9946 43.1738 cv
21.3481 42.9648 21.9351 42.7104 22.7563 42.4106 cv
22.7563 42.2231 li
22.7563 41.7476 22.6812 41.4214 22.5298 41.2441 cv
22.3789 41.0669 22.1597 40.9785 21.8716 40.9785 cv
21.6528 40.9785 21.4795 41.0376 21.3511 41.1558 cv
21.2192 41.2744 21.1533 41.4102 21.1533 41.5635 cv
21.1636 41.8667 li
21.1636 42.0269 21.1226 42.1504 21.04 42.2373 cv
20.958 42.3247 20.8501 42.3682 20.7173 42.3682 cv
20.5879 42.3682 20.4819 42.3228 20.3994 42.2319 cv
20.3174 42.1416 20.2764 42.0176 20.2764 41.8608 cv
20.2764 41.561 20.4297 41.2852 20.7363 41.0342 cv
21.043 40.7832 21.4736 40.6577 22.0278 40.6577 cv
22.4531 40.6577 22.8018 40.729 23.0732 40.8716 cv
23.2788 40.98 23.4307 41.1489 23.5283 41.3784 cv
23.5908 41.5283 23.6226 41.8345 23.6226 42.2979 cv
23.6226 43.9224 li
23.6226 44.3784 23.6309 44.6582 23.6484 44.7607 cv
23.666 44.8638 23.6948 44.9321 23.7349 44.9673 cv
23.7754 45.002 23.8218 45.0195 23.874 45.0195 cv
23.9302 45.0195 23.979 45.0073 24.021 44.9829 cv
24.0942 44.938 24.2358 44.811 24.4453 44.6025 cv
24.4453 44.894 li
24.0537 45.4194 23.6797 45.6821 23.3232 45.6821 cv
23.1519 45.6821 23.0151 45.6226 22.9136 45.5029 cv
22.8125 45.3833 22.7598 45.1787 22.7563 44.8901 cv
cp
22.7563 44.5513 mo
22.7563 42.7314 li
22.228 42.9399 21.8862 43.0879 21.7324 43.1748 cv
21.4561 43.3276 21.2583 43.4878 21.1392 43.6548 cv
21.02 43.8213 20.9604 44.0039 20.9604 44.2021 cv
20.9604 44.4521 21.0356 44.6597 21.186 44.8252 cv
21.3369 44.9902 21.5103 45.0728 21.7061 45.0728 cv
21.9722 45.0728 22.3223 44.8989 22.7563 44.5513 cv
cp
f
24.7021 38.3804 mo
24.7021 38.1563 li
25.2319 38.417 25.6729 38.7251 26.0249 39.0796 cv
26.5234 39.5879 26.9087 40.1836 27.1807 40.8672 cv
27.4526 41.5508 27.5884 42.2632 27.5884 43.0044 cv
27.5884 44.083 27.3228 45.0664 26.791 45.9556 cv
26.2593 46.8442 25.563 47.48 24.7021 47.8628 cv
24.7021 47.6597 li
25.1318 47.4204 25.4854 47.0962 25.7632 46.688 cv
26.041 46.2803 26.2471 45.7607 26.3818 45.1304 cv
26.5161 44.5 26.5835 43.8423 26.5835 43.1582 cv
26.5835 42.4185 26.5259 41.7427 26.4106 41.1313 cv
26.3232 40.6523 26.2139 40.2686 26.083 39.98 cv
25.9521 39.6919 25.7783 39.4141 25.5615 39.1465 cv
25.3447 38.8789 25.0586 38.6235 24.7021 38.3804 cv
cp
f
73.9634 65.5449 mo
73.9634 65.748 li
73.437 65.4839 72.9976 65.1738 72.6455 64.8188 cv
72.1436 64.3149 71.7568 63.7197 71.4849 63.0342 cv
71.2129 62.3491 71.0771 61.6372 71.0771 60.8999 cv
71.0771 59.8213 71.3438 58.8374 71.877 57.9487 cv
72.4106 57.0596 73.106 56.4238 73.9634 56.041 cv
73.9634 56.2656 li
73.5337 56.502 73.1807 56.8247 72.9048 57.2349 cv
72.6289 57.6445 72.4224 58.1636 72.2861 58.7925 cv
72.1499 59.4214 72.082 60.0776 72.082 60.7622 cv
72.082 61.5054 72.1396 62.1807 72.2549 62.7886 cv
72.3457 63.2681 72.4556 63.6528 72.585 63.9429 cv
72.7144 64.2329 72.8882 64.5117 73.1064 64.7788 cv
73.3247 65.0464 73.6104 65.3018 73.9634 65.5449 cv
cp
f
75.8447 59.5146 mo
76.3071 58.8667 76.8057 58.5425 77.3408 58.5425 cv
77.8306 58.5425 78.2578 58.7524 78.6226 59.1714 cv
78.9873 59.5908 79.1694 60.1641 79.1694 60.8911 cv
79.1694 61.7397 78.8877 62.4233 78.3242 62.9419 cv
77.8408 63.3872 77.3013 63.6099 76.7065 63.6099 cv
76.4282 63.6099 76.1455 63.5591 75.8584 63.4575 cv
75.5713 63.3564 75.2783 63.2041 74.979 63.0015 cv
74.979 58.0615 li
74.979 57.52 74.9658 57.186 74.9395 57.061 cv
74.9136 56.936 74.8726 56.8511 74.8164 56.8057 cv
74.7607 56.7607 74.6909 56.7378 74.6069 56.7378 cv
74.5088 56.7378 74.3867 56.7661 74.2397 56.8218 cv
74.1665 56.6289 li
75.6089 56.041 li
75.8447 56.041 li
75.8447 59.5146 li
cp
75.8447 59.8477 mo
75.8447 62.6997 li
76.0225 62.873 76.2061 63.0039 76.3955 63.0923 cv
76.585 63.1807 76.7793 63.2251 76.9775 63.2251 cv
77.2939 63.2251 77.5889 63.0518 77.8618 62.7046 cv
78.1353 62.3579 78.2715 61.853 78.2715 61.1904 cv
78.2715 60.5796 78.1353 60.1108 77.8618 59.7827 cv
77.5889 59.4551 77.2783 59.291 76.9307 59.291 cv
76.7461 59.291 76.5615 59.3379 76.3774 59.4316 cv
76.2383 59.501 76.0605 59.6396 75.8447 59.8477 cv
cp
f
79.7788 56.2656 mo
79.7788 56.041 li
80.3091 56.3022 80.75 56.6099 81.1021 56.9648 cv
81.6006 57.4727 81.9858 58.0688 82.2573 58.7524 cv
82.5293 59.436 82.6655 60.1484 82.6655 60.8892 cv
82.6655 61.9678 82.3994 62.9517 81.8682 63.8403 cv
81.3364 64.7295 80.6401 65.3652 79.7788 65.748 cv
79.7788 65.5449 li
80.209 65.3052 80.5625 64.9814 80.8403 64.5732 cv
81.1182 64.165 81.3242 63.646 81.4585 63.0156 cv
81.5933 62.3848 81.6606 61.7275 81.6606 61.0435 cv
81.6606 60.3037 81.603 59.6279 81.4878 59.0166 cv
81.4004 58.5371 81.291 58.1533 81.1602 57.8652 cv
81.0288 57.5767 80.855 57.2988 80.6382 57.0317 cv
80.4219 56.7642 80.1353 56.5088 79.7788 56.2656 cv
cp
f
149.791 102.961 mo
149.791 103.165 li
149.264 102.9 148.825 102.59 148.473 102.235 cv
147.971 101.731 147.583 101.136 147.312 100.451 cv
147.04 99.7651 146.904 99.0537 146.904 98.3159 cv
146.904 97.2378 147.171 96.2539 147.704 95.3652 cv
148.237 94.4761 148.933 93.8403 149.791 93.4575 cv
149.791 93.6821 li
149.361 93.9185 149.008 94.2412 148.732 94.6514 cv
148.456 95.061 148.25 95.5801 148.113 96.209 cv
147.977 96.8379 147.909 97.4941 147.909 98.1782 cv
147.909 98.9214 147.966 99.5972 148.082 100.205 cv
148.173 100.685 148.283 101.069 148.412 101.359 cv
148.542 101.649 148.715 101.928 148.934 102.195 cv
149.152 102.463 149.438 102.718 149.791 102.961 cv
cp
f
154.43 99.0684 mo
154.301 99.7002 154.049 100.185 153.673 100.521 cv
153.297 100.858 152.881 101.026 152.425 101.026 cv
151.882 101.026 151.409 100.798 151.005 100.343 cv
150.602 99.8872 150.4 99.271 150.4 98.4956 cv
150.4 97.7437 150.623 97.1333 151.07 96.6636 cv
151.517 96.1938 152.053 95.959 152.679 95.959 cv
153.149 95.959 153.535 96.0835 153.837 96.3325 cv
154.14 96.5815 154.291 96.8398 154.291 97.1079 cv
154.291 97.2402 154.249 97.3477 154.164 97.4292 cv
154.078 97.5112 153.959 97.5518 153.806 97.5518 cv
153.601 97.5518 153.448 97.4854 153.347 97.3521 cv
153.284 97.2788 153.244 97.1387 153.224 96.9321 cv
153.205 96.7251 153.135 96.5674 153.013 96.459 cv
152.891 96.354 152.723 96.3013 152.507 96.3013 cv
152.159 96.3013 151.879 96.4302 151.667 96.688 cv
151.385 97.0298 151.244 97.4814 151.244 98.043 cv
151.244 98.6147 151.385 99.1196 151.665 99.5571 cv
151.945 99.9951 152.324 100.214 152.802 100.214 cv
153.143 100.214 153.45 100.099 153.721 99.8701 cv
153.913 99.7104 154.099 99.4189 154.28 98.9951 cv
154.43 99.0684 li
cp
f
155.007 93.6821 mo
155.007 93.4575 li
155.537 93.7183 155.978 94.0264 156.33 94.3813 cv
156.829 94.8892 157.214 95.4849 157.486 96.1685 cv
157.758 96.8525 157.894 97.5649 157.894 98.3057 cv
157.894 99.3843 157.628 100.368 157.096 101.257 cv
156.565 102.146 155.868 102.782 155.007 103.165 cv
155.007 102.961 li
155.437 102.722 155.791 102.398 156.068 101.99 cv
156.346 101.582 156.553 101.062 156.687 100.432 cv
156.822 99.8013 156.889 99.144 156.889 98.46 cv
156.889 97.7197 156.831 97.0444 156.716 96.4331 cv
156.628 95.9536 156.52 95.5698 156.388 95.2817 cv
156.257 94.9932 156.083 94.7153 155.867 94.4478 cv
155.65 94.1802 155.364 93.9253 155.007 93.6821 cv
cp
f
287.418 181.002 mo
287.418 181.205 li
286.892 180.939 286.453 180.631 286.101 180.275 cv
285.599 179.771 285.211 179.176 284.94 178.49 cv
284.668 177.805 284.533 177.094 284.533 176.356 cv
284.533 175.278 284.799 174.294 285.333 173.405 cv
285.866 172.516 286.561 171.88 287.418 171.498 cv
287.418 171.722 li
286.989 171.958 286.636 172.281 286.36 172.691 cv
286.083 173.101 285.877 173.62 285.742 174.249 cv
285.605 174.877 285.538 175.534 285.538 176.218 cv
285.538 176.961 285.595 177.637 285.71 178.245 cv
285.801 178.725 285.911 179.109 286.041 179.398 cv
286.169 179.689 286.343 179.968 286.562 180.235 cv
286.78 180.503 287.066 180.758 287.418 181.002 cv
cp
f
291.364 178.374 mo
291.13 178.623 290.902 178.8 290.679 178.906 cv
290.457 179.014 290.216 179.066 289.959 179.066 cv
289.437 179.066 288.981 178.848 288.591 178.412 cv
288.202 177.976 288.006 177.416 288.006 176.731 cv
288.006 176.046 288.222 175.419 288.654 174.852 cv
289.085 174.283 289.641 173.999 290.319 173.999 cv
290.741 173.999 291.088 174.134 291.364 174.403 cv
291.364 173.518 li
291.364 172.975 291.35 172.641 291.324 172.517 cv
291.297 172.392 291.256 172.307 291.201 172.262 cv
291.145 172.217 291.075 172.194 290.992 172.194 cv
290.901 172.194 290.78 172.222 290.629 172.278 cv
290.562 172.085 li
291.994 171.498 li
292.229 171.498 li
292.229 177.024 li
292.229 177.582 292.243 177.921 292.269 178.045 cv
292.294 178.168 292.336 178.253 292.394 178.302 cv
292.452 178.35 292.519 178.375 292.596 178.375 cv
292.691 178.375 292.816 178.346 292.973 178.285 cv
293.031 178.479 li
291.605 179.066 li
291.364 179.066 li
291.364 178.374 li
cp
291.364 178.01 mo
291.364 175.56 li
291.342 175.32 291.28 175.103 291.175 174.909 cv
291.071 174.714 290.932 174.567 290.759 174.468 cv
290.586 174.369 290.418 174.32 290.254 174.32 cv
289.948 174.32 289.674 174.457 289.434 174.731 cv
289.117 175.093 288.958 175.621 288.958 176.316 cv
288.958 177.018 289.112 177.555 289.418 177.929 cv
289.725 178.303 290.067 178.488 290.443 178.488 cv
290.76 178.488 291.067 178.329 291.364 178.01 cv
cp
f
293.234 171.722 mo
293.234 171.498 li
293.764 171.758 294.205 172.066 294.557 172.421 cv
295.056 172.929 295.441 173.525 295.712 174.208 cv
295.985 174.892 296.121 175.604 296.121 176.346 cv
296.121 177.424 295.855 178.408 295.323 179.297 cv
294.792 180.186 294.095 180.822 293.234 181.205 cv
293.234 181.002 li
293.664 180.762 294.018 180.438 294.295 180.029 cv
294.574 179.621 294.78 179.102 294.914 178.472 cv
295.048 177.841 295.116 177.184 295.116 176.5 cv
295.116 175.76 295.058 175.084 294.943 174.473 cv
294.855 173.994 294.747 173.61 294.615 173.321 cv
294.484 173.033 294.31 172.755 294.093 172.488 cv
293.877 172.22 293.59 171.965 293.234 171.722 cv
cp
f
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
.53452 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
80.6064 .400879 mo
90.228 .400879 li
90.228 10.022 li
80.6064 10.022 li
.746 .676 .668 .898 cmyk
@
grestore
.53452 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
80.6064 19.6436 mo
90.228 19.6436 li
90.228 29.2646 li
80.6064 29.2646 li
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
61.3638 .400879 mo
61.3638 10.022 li
70.9854 10.022 li
70.9854 .400879 li
@
.80178 lw
70.9854 .400879 mo
80.6064 .400879 li
0 .938 1 0 cmyk
@
grestore
80.6064 10.022 mo
80.6064 19.6436 li
0 .938 1 0 cmyk
@
.80178 lw
80.6064 29.2646 mo
70.9854 29.2646 li
@
.53452 lw
70.9854 29.2646 mo
70.9854 19.6436 li
61.3638 19.6436 li
61.3638 29.2646 li
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
18.0679 .400879 mo
27.689 .400879 li
27.689 10.022 li
18.0679 10.022 li
@
grestore
147.956 19.6436 mo
147.956 29.2646 li
138.334 29.2646 li
138.334 19.6436 li
@
128.713 19.6436 mo
128.713 29.2646 li
119.092 29.2646 li
119.092 19.6436 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
147.956 .400879 mo
138.334 .400879 li
138.334 10.022 li
147.956 10.022 li
@
grestore
147.956 10.022 mo
147.956 19.6436 li
@
138.334 19.6436 mo
128.713 19.6436 li
@
119.092 19.6436 mo
119.092 10.022 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
119.092 10.022 mo
128.713 10.022 li
128.713 .400879 li
119.092 .400879 li
@
.80178 lw
147.956 .400879 mo
157.578 .400879 li
0 .938 1 0 cmyk
@
.53452 lw
176.82 .400879 mo
186.441 .400879 li
186.441 10.022 li
176.82 10.022 li
.746 .676 .668 .898 cmyk
@
grestore
176.82 19.6436 mo
186.441 19.6436 li
186.441 29.2646 li
176.82 29.2646 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
157.578 .400879 mo
157.578 10.022 li
167.199 10.022 li
167.199 .400879 li
@
167.199 .400879 mo
176.82 .400879 li
@
grestore
176.82 10.022 mo
176.82 19.6436 li
@
176.82 29.2646 mo
167.199 29.2646 li
@
167.199 29.2646 mo
167.199 19.6436 li
157.578 19.6436 li
157.578 29.2646 li
@
.80178 lw
157.578 29.2646 mo
157.578 38.8862 li
0 .938 1 0 cmyk
@
.53452 lw
176.82 38.8862 mo
186.441 38.8862 li
186.441 48.5073 li
176.82 48.5073 li
.746 .676 .668 .898 cmyk
@
176.82 58.1289 mo
186.441 58.1289 li
186.441 67.7505 li
176.82 67.7505 li
@
157.578 38.8862 mo
157.578 48.5073 li
167.199 48.5073 li
167.199 38.8862 li
@
167.199 38.8862 mo
176.82 38.8862 li
@
176.82 48.5073 mo
176.82 58.1289 li
@
176.82 67.7505 mo
167.199 67.7505 li
@
167.199 67.7505 mo
167.199 58.1289 li
157.578 58.1289 li
157.578 67.7505 li
@
.80178 lw
157.578 67.7505 mo
147.956 67.7505 li
0 .938 1 0 cmyk
@
.53452 lw
119.092 48.5073 mo
119.092 38.8862 li
128.713 38.8862 li
128.713 48.5073 li
.746 .676 .668 .898 cmyk
@
138.334 48.5073 mo
138.334 38.8862 li
147.956 38.8862 li
147.956 48.5073 li
@
119.092 67.7505 mo
128.713 67.7505 li
128.713 58.1289 li
119.092 58.1289 li
@
119.092 58.1289 mo
119.092 48.5073 li
@
128.713 48.5073 mo
138.334 48.5073 li
@
147.956 48.5073 mo
147.956 58.1289 li
@
147.956 58.1289 mo
138.334 58.1289 li
138.334 67.7505 li
147.956 67.7505 li
@
263.413 29.2646 mo
253.792 29.2646 li
253.792 19.6436 li
263.413 19.6436 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
263.413 10.022 mo
253.791 10.022 li
253.791 .400879 li
263.413 .400879 li
@
grestore
282.655 29.2646 mo
282.655 19.6436 li
273.034 19.6436 li
273.034 29.2646 li
@
273.034 29.2646 mo
263.413 29.2646 li
@
263.413 19.6436 mo
263.413 10.022 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
263.413 .400879 mo
273.034 .400879 li
@
273.034 .400879 mo
273.034 10.022 li
282.655 10.022 li
282.655 .400879 li
@
grestore
282.655 29.2646 mo
282.655 38.8862 li
@
282.655 58.1289 mo
282.655 67.7505 li
273.034 67.7505 li
273.034 58.1289 li
@
263.413 58.1289 mo
263.413 67.7505 li
253.792 67.7505 li
253.792 58.1289 li
@
282.655 38.8862 mo
273.034 38.8862 li
273.034 48.5073 li
282.655 48.5073 li
@
282.655 48.5073 mo
282.655 58.1289 li
@
273.034 58.1289 mo
263.413 58.1289 li
@
253.792 58.1289 mo
253.792 48.5073 li
@
253.792 48.5073 mo
263.413 48.5073 li
263.413 38.8862 li
253.792 38.8862 li
@
253.792 38.8862 mo
244.169 38.8862 li
@
244.169 58.1289 mo
244.169 67.7505 li
234.548 67.7505 li
234.548 58.1289 li
@
224.927 58.1289 mo
224.927 67.7505 li
215.305 67.7505 li
215.305 58.1289 li
@
244.169 38.8862 mo
234.548 38.8862 li
234.548 48.5073 li
244.169 48.5073 li
@
244.169 48.5073 mo
244.169 58.1289 li
@
234.548 58.1289 mo
224.927 58.1289 li
@
215.305 58.1289 mo
215.305 48.5073 li
@
215.305 48.5073 mo
224.927 48.5073 li
224.927 38.8862 li
215.305 38.8862 li
@
215.305 38.8862 mo
215.305 29.2646 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
234.548 .400879 mo
244.169 .400879 li
244.169 10.022 li
234.548 10.022 li
@
grestore
234.548 19.6436 mo
244.169 19.6436 li
244.169 29.2646 li
234.548 29.2646 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
215.305 .400879 mo
215.305 10.022 li
224.927 10.022 li
224.927 .400879 li
@
224.927 .400879 mo
234.548 .400879 li
@
grestore
234.548 10.022 mo
234.548 19.6436 li
@
234.548 29.2646 mo
224.927 29.2646 li
@
224.927 29.2646 mo
224.927 19.6436 li
215.305 19.6436 li
215.305 29.2646 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
.80178 lw
282.655 .400879 mo
292.277 .400879 li
0 .938 1 0 cmyk
@
grestore
321.14 19.6436 mo
321.14 29.2646 li
311.519 29.2646 li
311.519 19.6436 li
@
301.898 19.6436 mo
301.898 29.2646 li
292.277 29.2646 li
292.277 19.6436 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
321.14 .400879 mo
311.519 .400879 li
311.519 10.022 li
321.14 10.022 li
@
grestore
321.14 10.022 mo
321.14 19.6436 li
@
311.519 19.6436 mo
301.898 19.6436 li
@
292.277 19.6436 mo
292.277 10.022 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
292.277 10.022 mo
301.898 10.022 li
301.898 .400879 li
292.277 .400879 li
@
321.14 .400879 mo
330.762 .400879 li
@
350.004 .400879 mo
359.625 .400879 li
359.625 10.022 li
350.004 10.022 li
@
350.004 19.6436 mo
359.625 19.6436 li
359.625 29.2646 li
350.004 29.2646 li
@
330.762 .400879 mo
330.762 10.022 li
340.383 10.022 li
340.383 .400879 li
@
340.383 .400879 mo
350.004 .400879 li
@
grestore
350.004 10.022 mo
350.004 19.6436 li
@
350.004 29.2646 mo
340.383 29.2646 li
@
340.383 29.2646 mo
340.383 19.6436 li
330.762 19.6436 li
330.762 29.2646 li
@
330.762 29.2646 mo
330.762 38.8862 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
350.004 38.8862 mo
359.625 38.8862 li
359.625 48.5073 li
350.004 48.5073 li
@
350.004 58.1289 mo
359.625 58.1289 li
359.625 67.7505 li
350.004 67.7505 li
@
grestore
330.762 38.8862 mo
330.762 48.5073 li
340.383 48.5073 li
340.383 38.8862 li
@
340.383 38.8862 mo
350.004 38.8862 li
@
350.004 48.5073 mo
350.004 58.1289 li
@
350.004 67.7505 mo
340.383 67.7505 li
@
340.383 67.7505 mo
340.383 58.1289 li
330.762 58.1289 li
330.762 67.7505 li
@
330.762 67.7505 mo
321.14 67.7505 li
@
292.277 48.5073 mo
292.277 38.8862 li
301.898 38.8862 li
301.898 48.5073 li
@
311.519 48.5073 mo
311.519 38.8862 li
321.14 38.8862 li
321.14 48.5073 li
@
292.277 67.7505 mo
301.898 67.7505 li
301.898 58.1289 li
292.277 58.1289 li
@
292.277 58.1289 mo
292.277 48.5073 li
@
301.898 48.5073 mo
311.519 48.5073 li
@
321.14 48.5073 mo
321.14 58.1289 li
@
321.14 58.1289 mo
311.519 58.1289 li
311.519 67.7505 li
321.14 67.7505 li
@
.80178 lw
292.277 67.7505 mo
292.277 77.3716 li
0 .938 1 0 cmyk
@
.53452 lw
321.14 96.6143 mo
321.14 106.236 li
311.519 106.236 li
311.519 96.6143 li
.746 .676 .668 .898 cmyk
@
301.898 96.6143 mo
301.898 106.236 li
292.277 106.236 li
292.277 96.6143 li
@
321.14 77.3716 mo
311.519 77.3716 li
311.519 86.9927 li
321.14 86.9927 li
@
321.14 86.9927 mo
321.14 96.6143 li
@
311.519 96.6143 mo
301.898 96.6143 li
@
292.277 96.6143 mo
292.277 86.9927 li
@
292.277 86.9927 mo
301.898 86.9927 li
301.898 77.3716 li
292.277 77.3716 li
@
321.14 77.3716 mo
330.762 77.3716 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
350.004 77.3716 mo
359.625 77.3716 li
359.625 86.9927 li
350.004 86.9927 li
@
350.004 96.6143 mo
359.625 96.6143 li
359.625 106.236 li
350.004 106.236 li
@
grestore
330.762 77.3716 mo
330.762 86.9927 li
340.383 86.9927 li
340.383 77.3716 li
@
340.383 77.3716 mo
350.004 77.3716 li
@
350.004 86.9927 mo
350.004 96.6143 li
@
350.004 106.236 mo
340.383 106.236 li
@
340.383 106.236 mo
340.383 96.6143 li
330.762 96.6143 li
330.762 106.236 li
@
330.762 106.236 mo
330.762 115.857 li
@
gsave
0 0 mo
360.004 0 li
360.004 184.275 li
0 184.275 li
0 0 li
cp
clp
350.004 115.857 mo
359.625 115.857 li
359.625 125.479 li
350.004 125.479 li
@
350.004 135.1 mo
359.625 135.1 li
359.625 144.721 li
350.004 144.721 li
@
grestore
330.762 115.857 mo
330.762 125.479 li
340.383 125.479 li
340.383 115.857 li
@
340.383 115.857 mo
350.004 115.857 li
@
350.004 125.479 mo
350.004 135.1 li
@
350.004 144.721 mo
340.383 144.721 li
@
340.383 144.721 mo
340.383 135.1 li
330.762 135.1 li
330.762 144.721 li
@
330.762 144.721 mo
321.14 144.721 li
@
292.277 125.479 mo
292.277 115.857 li
301.898 115.857 li
301.898 125.479 li
@
311.519 125.479 mo
311.519 115.857 li
321.14 115.857 li
321.14 125.479 li
@
292.277 144.721 mo
301.898 144.721 li
301.898 135.1 li
292.277 135.1 li
@
292.277 135.1 mo
292.277 125.479 li
@
301.898 125.479 mo
311.519 125.479 li
@
321.14 125.479 mo
321.14 135.1 li
@
321.14 135.1 mo
311.519 135.1 li
311.519 144.721 li
321.14 144.721 li
@
.80178 lw
292.277 144.721 mo
282.655 144.721 li
0 .938 1 0 cmyk
@
.53452 lw
263.413 115.857 mo
253.792 115.857 li
253.792 125.479 li
263.413 125.479 li
.746 .676 .668 .898 cmyk
@
263.413 135.1 mo
253.792 135.1 li
253.792 144.721 li
263.413 144.721 li
@
282.655 115.857 mo
282.655 125.479 li
273.034 125.479 li
273.034 115.857 li
@
273.034 115.857 mo
263.413 115.857 li
@
263.413 125.479 mo
263.413 135.1 li
@
263.413 144.721 mo
273.034 144.721 li
@
273.034 144.721 mo
273.034 135.1 li
282.655 135.1 li
282.655 144.721 li
@
282.655 115.857 mo
282.655 106.236 li
@
282.655 86.9927 mo
282.655 77.3716 li
273.034 77.3716 li
273.034 86.9927 li
@
263.413 86.9927 mo
263.413 77.3716 li
253.792 77.3716 li
253.792 86.9927 li
@
282.655 106.236 mo
273.034 106.236 li
273.034 96.6143 li
282.655 96.6143 li
@
282.655 96.6143 mo
282.655 86.9927 li
@
273.034 86.9927 mo
263.413 86.9927 li
@
253.792 86.9927 mo
253.792 96.6143 li
@
253.792 96.6143 mo
263.413 96.6143 li
263.413 106.236 li
253.792 106.236 li
@
253.792 106.236 mo
244.169 106.236 li
@
244.169 86.9927 mo
244.169 77.3716 li
234.548 77.3716 li
234.548 86.9927 li
@
224.927 86.9927 mo
224.927 77.3716 li
215.305 77.3716 li
215.305 86.9927 li
@
244.169 106.236 mo
234.548 106.236 li
234.548 96.6143 li
244.169 96.6143 li
@
244.169 96.6143 mo
244.169 86.9927 li
@
234.548 86.9927 mo
224.927 86.9927 li
@
215.305 86.9927 mo
215.305 96.6143 li
@
215.305 96.6143 mo
224.927 96.6143 li
224.927 106.236 li
215.305 106.236 li
@
215.305 106.236 mo
215.305 115.857 li
@
234.548 144.721 mo
244.169 144.721 li
244.169 135.1 li
234.548 135.1 li
@
234.548 125.479 mo
244.169 125.479 li
244.169 115.857 li
234.548 115.857 li
@
215.305 144.721 mo
215.305 135.1 li
224.927 135.1 li
224.927 144.721 li
@
224.927 144.721 mo
234.548 144.721 li
@
234.548 135.1 mo
234.548 125.479 li
@
234.548 115.857 mo
224.927 115.857 li
@
224.927 115.857 mo
224.927 125.479 li
215.305 125.479 li
215.305 115.857 li
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (010x008.eps)%%CreationDate: 27/05/15 10:50 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6pNe;Ldl=ir^cd3bCuYMdK/3_lSAT?TZ/O>!`de*9qp+rV?Mga%;Ra7%7%!F%]?d'o#",e%Ti>/E.@].0rA8:3c*tsKJ!\Th%Co(.T8o(;pekJ#ec0ftLe[tf9H-).Y.$uq.boih`U?V$0EpND]X5<36FBYm@DR\,1Zo[$>FQr7/1OWAR,>Y?(RsLjWqG2FD;18C:%AW+1s;rscOYI$>teK/EJ0*+mMSi2'^)RZ?4YEsQJ.BV;^JCQ#Nj^je.7B2(1#i9F42L]E6'2iPX[eiK7GN",K7),AGHTa+gdM&$j%Z?1>t06WFBfmg>PBD&`pDQd"+IC,FR3S%`=ec)Rl50<+'q9P.fZtV&cm%XL0DH(t*MB5dGo/c+crH,f\P%9Z]P[]^ZZB<]i-t2[t%\YuS/ohkb8;L56IXjoLhTjjpDrp`3`aKh[7&q8i(Z_'_#F4pKTOl!&;Z4TN\X]iD()KXc=1obJ1"Jc+n'+8&E4)ad5RI=2:#KFKB%[Wi0j$4a(cf/ndOB]-C+DdKfRBJ1/2btM?Q%f!@V.h2M/"sPNKX.%M1m!`EW:^bdh.lYT"S<1iRmX2Zq1mb<9U8$ZfDKe9ZmM)*^%g;4BSs1BZUDtF"6UL_T^?G4HA:2$YLkggtMq878ii8U;h=gRrj&1/o.g9B!@l-(KJKk@mLWtJs1[RDP(^Zj"XHU(^Hq5:7^Bc->R%g[J>qEN#nS?WDfXWX;O%'q\MVn2A!l(f8@/i0Rk;.Dp[6L/Fr>3c,hYfJ\u!D'0Vh$`.YY9#3I]KMnWZPU_sVbu+k>PY+cL;Lta2%MIF<TPmTXW<:Cpp1%lF\K.Z(]G`t?n$$j?7P_(X+-^93;nWDfe(_M-^)&Ns5_RMTQn6HkEI)7NR&UZo>LaT8A7Kf>;DYOT9(_a95%fYmKW'T<D`ThM9a0Kq_JF2TeB&[;J2pa2"@H]NTq^1$?SF$<+,"TF$O0L#8bRW&INeG'Gb%/rRB(a#AY`!X3dj+C/&"f'!2LJR7s%5i<;J_>)q%B+_*GnVZ^$Mjt!EkF@"rS72F/lVIrY`pnX*a5020Z!Z-9f$*:b9CRF-#"HW^'1N4Fj/DJsN"8+G'[eq!%rm3i_C(S!%dA=.=Z8q@rk-,#bDGJ*><]IKQc]M+e(-#[j3CUSjmh"g;0&d=dc=_fk%JpX3GjAHn^5pV1+8-[7'<)l4*-$Tg<9QQB?^KO;SQ(nr%X34Wc:G2#ZF`Y-<kmuWoBo$iA43JVemQ<aq3%!U$(E:#j]YD*bX;BcYAVpD=^F0h.p.nQTM>J+hJ`_Q6mU,mYb3D#SgqWX12"A'P%(]RVRrjFB7[`/4\Mtk6hMuP[on[JB3s/!$_1.'d2phspUJ%L4#TB,o;Gn+m#T/a%LS,^@?A:088de$.7+rDk7B";U>$Mh)4WL.6J%;j9qoP$KQS1\dS)[BV8[;\h$_/,0fN(1gCD!]:['ZOHl]B/4rMCJAC)'*Y#VROe:T_Vm^_f&X6M0[dDRho*::Ur@]FN.eW1HX11>%a=$U"a%Y>?9-s<=L$MhSegQch&M$,/DFs1T/"uR'fPcD'fDS.mXtWQ7X9G)Y&F_<b:OC1'*R^,=oZ>(W0UdN3HUenAb8hbC@E+hJ%@eb'-(>iNkbss&)/=US89K?s8hB\^3Ih,0RV)#\#IIn`\AtSe:XTNq<d'*&"I%&[h*DbA-.$5^mU<2R&k8W9#T+agM$MDg(r0piD%B/lC-F8Cg@BgnD5QcCY^%(&pdKK`9p[ug>d^Gb?R)Q,[l-%e=e3?=%1-Ts+UfM5RM]bEfJ=X$P4nZlE<[]qFNS`egd5U2^>#2^l\%A7riMr_\DY_L5XAEgdJU?,20>C!E3>U00;nlEXeS=K`j8kcYUs["36li!E,nWJhOH15ndBBAOKN`V1j"n$"r+n*>VB3E^0fc%q!X%GKr=s?-]o!a].epWH`1AIud/0Y?^\+.E[I.\tS<H;igiaI%f<UIj3Qg'r`1[#'(l:gF%OmR2[i3MCYNC^'/4^HV25tBhiGkQJ>j(%[QSJ,pl#j-UiKVuBLl(?;4mh%Vu_4)j\UT@;NClNCL4\)[d;GQ([C9S@0El/O1YU1,-amET-BP`Ib6VU/n]3-$$+;L:*r+-N<W:5%:q6QTMmu9IZR;XIY$8bIQRHR9A>7CLb0NKF1&4<<ZJ&gqCK!*J7ub8j+lh_"BFbt[10kk]3W\-G74BTf4ebCWgCX"95rAbnj@.(^%Q*MUEo#H/Kd"dnpF8r0/g_T:ITMk`r\lt22>&hQ7W'IS[(b`b\]#sM/Uq+H6>HANUkM7_nKQVR+o,*[rW,#tZ%>JiI_4J+>*d2gn%O"l;X*En(S/BuVQ*eI^e>i3.s0X+<E9_I%K*k:T_S+V?]H'Aa/gK>#QQ*>+2Tb>B''#l.&jM3c4pl%3qeuutRp9mW3Y.YUQ_0eCb%1`4dRDp&2O>T:K?V1-U=6X9Tp/(<&:S/+OC&ENu1R#NX^?#K>DmFJAkSFVJXYT5c6[Z_rJr-H?Ubp&u"9)Yn=`?jQ18)MJfUNWI9%g=AQ7o%Wr67Uc"ZA)56@hk4afWD_[@bDo(]Al8'/A1uImPU/[GYJf?YkI.qq.DXVa+FPtkMj?92jhY/b)>6oL&nn,6YIo%;@(1B/%T1H\;4Y"4#j4EiGJ''[9qM8':/J[0u38UE+_KfjN4r#Z13(qN4W^iD#jdgueY3_GRTRf?u$@Y"a@ouX%)Hi:Nc7"BR]N18r9T'ZH%7Kh#`"+RWuMJmQr0$9iHiBJ-urtjo<gZGidSiZf*="EU1/*/auM"Q[E]CqP!<i?13BTAsFq:<6*h^b0UrDB*[A<TNdkq3[!CZSs+%m^4m(ot&oLIa#>VNcPCVX"mj$r-bZ+r7uC0-\5=qD+0e34gZ(<!TB=kV*B`9<Ja?rl4H#G*pfFK\X`#)4.MXi3#Q?[LmP@OfWK+e%NF8&4:E^4X2oi&lTM^U[:7).:e\DnC(;\^'`*]BmG%smY?R6/(8V$I-BEb;(K'g@n*M>P$V3OGo'P+to4E4"me7>R.eg#P6VcP\G%E=3gS!0t'!lQ$Z5k#B7WJh>]N>4G]CY'iX[.GQ<A4qi&Zi8%&@+s.uR\^02SMX69`b0o=U-)m^gpa*!F6Ka5-PPMUY"Qdg3[Kt<8%c?6m$iDO!H&[!JO974KRnPQjYqOuh!;!Kf@?\lmKP]K:4Mf$i@]PT4[dY'-aRGPgONc0Y^"$61'Hof`dZH<)<*&"nLGP?I2,";-L%ciQr3&lB],[&fP2B3qV?D.K8V&!/DMH7_0AN[*.8-7U1G&fA:oj(n1lMW8[K/(^ISIkJ-R[Bd8b"uH&/5of+@&QBiur)a'#aIsAB%I-S+6(ein,\7>,7*pu_drLCp0Ih"iI(#A)66Y@s!iK9Bl/^Ch)<njX!,ZnCV5d8N3eAe:.EfM3bQ-?^-MGQ]di-MYV1nhii^TsK_%_Fb$dWk'i=Lg!FEg&o]V8B%aNaQ5Frl-PY$RO*O@akGm`j0mph3o:?j,U93EZqL9F0%tm[riX$tAU2JgkrAuu-N(=LV%0gPn2ZI.%E%;6(W16LSLXR.@<B0B-\'Z!A>;H0m/Nr[*jEau$l)(L+Z0*HlPjjt,lrLFsqbHWbWV$GlK"?>"b"8M]BYE@\k<"*4?LRj"EH;Tf%rH-O5V*CEQi?`V7T3+l:N?@_)]@6Ujml#[);R=>Gl_U2ekYtn\Z1RS0TDE=VQ_%agpY5Mi8$AMfI^F0Y'ic1&:-FRIaij<(ru:u]%\c04kq/Th4kZ7;YHDB"+Wc]H7AhEt^g1eT/IF>&PX.;)$4#J+-r'd2V$'*fP?!)\Nl^_p_+H4$$Mte3H-m1WEcqq.ET&+;5S$fCt%2u`Gm*+AC1S\N%mW(qZFo@&+`?aNuGVcrO6Vfi9A:alA4B]Fc[coc1iK)/\\"oKqe42$,L/#793$fp9]\b8q/dJ.tP<86j`Y<`U#%4EjuGB7gcHhd8%=`^fdHV'c:a;XO*??5rS/^Uq2U=&a$eNSbi&)BhKuh;$kq^=og]21>I1D:`Km^%VjcH1"Y157n2Qb1O\PB]3ae%'A1O^qn#_oV@*4Fepj.\7sZUAHUjl=or$2aaJB87eZX:F+]UN%phH"dYTd!A3$kg]Q(R-l=c..$ge[HGSPo=\Dt7D!I/-,ps%1C3%qCm?l+JiiVI!q<4?'s6O;ustpE[k?;m?55kLL`qns'c4Y;JjniiR;,']VNF<d6aJ:WP72r-a0M59rAS0f,uJ(+Ou<nlPfpX0[*eD%&jAY!Jnk9<"st)\J0C2a^@I8sW6q4Er&:$=q"=.afViumVSAsL@@'*F,q[5QV^,:/l%<aBmAKeMKMAKV$=n^PQd^X__D:J3P>8eq%mgr37;?(Pf]iFsn<F7p.+2,Fo0WuHS1`&7HC6@d&I&9Nskuk\lX0U3p5J?bd07?kI/CaLj+$*nGGC)$X1OF=JYC6=r#nMQ.0:O&e%XW!nd%N#n26X^pT$/a,_pX2=p=K1:f^ePP@Bm/7LE+lubSUTmPeC*06s/A)4&Op*eom\l(YFdDpof(C+^7oe^9c1H/lM:9j<8F7$%eFl2J<UJ>c0;)=E2$AU@f7sT$A;#'EAg_k<13>_Bs*choUqe1%1nC<D5Q@e<pgF>B2KnV1n*`/]=t"PT<?r5r&&.>BC5l'AkT,b?%lbHlXc:=/XLeM^\hp@5[j*g^[`58fak4S\J;'Xl5b4oM*:loX'kMt[%#9@*CO8A,;YGH+OF:ZHps5f)34="j+iLTa]c;$=1:Tm"=%?L)AeUp/3YjaVImp_`k*K0EE6/(sCt*HqIbK7bm0,U(2OWITquO=MfF3*a.E:pDYQqbST!U7W8@7*3tpn`+DnRUK=n5<(RXqgXb9%#*9#gAnFVj,k'Bt^]3nT9ETGW+0Y^::k*R0kH1B%CRsTQr[Z%MU\WOp3XM>#eGm">HB=*_4*EGU(@&YM1k,aik!'rqhL#0V$n2]I%1&nNkZ-N*)lFm2ep)\-ibEeGq9`<j,/Dg:'EP8`*`&p/\s6a;RCA\@Js7e5b>5nU%--DP;VZ3"Kg@6V^0m-e.5_rSJJfWB:n"j%O%eC(O^'9:C]78p;712/'5i_2^Ud1/+q$scs-n<3>bQ+hD+*"fI+3ZX:keP_s$4PWo92ZKe#c^g_kBX[\T$u,Yk"Er5iB_Ka:NJl@*%EXsSmfooJ2"(%Wr'aN>=d8#R35!cF-/[E[-kbN";cgiGt\Na?](?=Abnjg1FW;_3Im<mmqe$=q>C"g/F?.q_n(kB]s&tDp_GYk],%3-dG3dXioHFd-gV>%:K>Epg';5P!)r&1_,</fOqc<\fjZ+6pH)<mUMH[IN2gHuV)Nr9:VZkTlM2\gN/V=RWuE">F?-9-?YXdOM)C%3s!P`O1D^uWd!/.!+m7BQ1[8ek(9i7/FHPf)@]H3=7o=TFG2hg6I/J=NV,bC)hcZNSj8HW]:G'N3n*ri2*RK%FLTk9I<#pnK[b;+%#h6)`]f&(.";_UQqCc9b2pto:Vi,>?[6#slmoFL":p.)F<k)+I1eP^!G3:rs>c#h_FcLtOmah?$&V>R?rP-!b8I2>S76?_l(B5T'%ONDsN2QG#'/u'uPOs?i5due6WBU<.@Y2fU]Ml?-(bHZ$!;J"^f^,k6Nn=k^jZ)jsmL)JE'/a[X&[\Q!.9t/>#Ju(m>MUeiMJSk@p%k:!QjU1Z_i@Tb.UGrQCie$eTZPQ&G^YLNgrP%bOd@**TY44*5mC@e4t:0<u$_[=JsU]O7`;upf,+PnE3CAo\VH[mRu>&E6s0Ut,A%Y<KN>\1Vm[X7ki+DpaC]r&$bTm5AbQs&M<Eh3e3;?TG=)[[LI!fK)=!.N=4a!ph:4MIi0sAsUlt85i/s(iaHL3kUZG\.^Pd>d6).%%Hf6$LPH;(=;j>(#\p&2)j"=(^=J4e[mk1B3YGfa:_I_:*Ct"4VC&&>[iRaO8EiQKP%*=P_rBT]F\;QtZk+j:C""-V.p<gAV&e5.%M&&D?7#5M[<04`8d*L<EVcL"o)fY&Y;6/l*/?2_+?*uikpi!i3RefbQL8!H;N%J1-Dk3Dr%m][%:(l3D7@0\G#++YFYZHj57[(lI%,GLQmHJ>!*m/oBM[A$O]X4>r@qGO&j3$Y9'*&Gds>dU&2d)F%(E8@fdqsE]*s3djtCTZL/o0;%l_;Zg>m!:$^I-:/QcgAeSn%IT"%L"7l@I/Wp=dqdq<$50_s*K$C>[0Rl)dZrk[Z_D34mq6jjO41CDB]c%pUe$YlTBl5@qO2=#rb0e+]D"a#pBO+*,+Vo8S&b1\f!FRP%C&)MMflI$qSEmmUgpHB:?lBFP1gaaMe=3\&bP3jG7L-2Ys0hOD5"En"T[g4D`"_FTeaV9"T*nNs%/B#fXX<#B*r68,D6]7U?*/mH%,Yh8<Ig22)pe.'%E']P)*_69JSGq`o-\[?Yi@QD_%tDuN3.S1R?!fr's/=Y0/4=I/UFU>HA\N]"]Af-@TQ8<R>LhQ<'2n&U"!eX$%?qA?(J(5LsQ2GOno%foS^Wkmo;JWX$^K[l9%P?g8"X=T7+>i=+M]ai2HC;9fa7V8&PjYs5M9@f5U#Y`<_aV8klNG1\?7./goK#9@%:ToED'+Jon<'*sq%HTXfNkOp2VFB7i2kk/<7gLAV\^QEI8a\iGa7>*/3oF3?2e[#9FWtK=Ip+LY+*q;E[U7b,-m%(HH+Wguj!l_(%)lVIq2&V;+/o4@C6%qf<"]##3Vj<+b;kr'ls-9fn"Lat*O4`99Y?RZ_-Y9lmYK\KSJ7[Gof>!"f9Q72Hi-t:3a-M(5)e8%_*Y5'j%]/L/_0@FH`dHD/TqJ3jT3rd)"T4-hb*O&qP0blT-GpeFC!ls=jQfYfjh<IFsQDC<,Ht*F!GU;']JJ,>BeLiUWJtdkA(hBU,j^-S#%HW5^,HM?I%)2H=W]9B.^8#$=j$GEp]0u]5`s%-6b>YpBXb`u89jn`m>_.r5$^XM9SdH[8>!CL1;kJra;9d*Eu"-,P<BI)CjUC.J+%8@G7N3m&kRTW<o#9aN="@SO=a`P!()J`;h,WSpHBK\Rl-#&l`:]`p"DDV)apL175uVd+hB8QfHFL9O"5i$DcqHH3A_*8)Jdci"\(%_][+NCGd#QlM%lj;9R6+F&HGXa:"o^61u2bNd$Pb081p8Y]#CgI#(GWfea1=7-kW^mb+Jb"QmR.\5#Y0)3:7?G+Ag>,'r)^3%2Tm%8VsR4S;F9l;HSmomGJNV"qZFCc]9t]&^AX@,&eiNUClUKdrL+EM7@q+XsNj@RIF6^-ho2H&fuk40>-X)e03[AVcsBoFb8guYOqrG%4p#lL^)??s4S;QDpq1pJ<*21F9GL@oZss[^08kYqc'H!&R/UdIFZM3[r7o[9(k-E%BBQ&PYHk?6ZeD$8EF/UEIRrP?#Jj!Z4.XRn%`9X97H#m?nB:'V?I))AN$31kc^_"KVddF97Qg6nq;!\%JrbTl`?bI/L_YiB0r;(b9Kl;jWEk8&-%o/[6oYIiEIaQn$s0fC$G:(X:%X6&6ec'n6'R9r*5hD707B/R"tQoRfN1\5CS/",2?XdrU>rudAoJ*/WZ5>11-Ku<4sAl1TgUr)EA/8\_>P]E[*=6UchcBUW%p#G3m%Fjj5?j4=":?!2QX[*2mW<-+[(4&>NI.bj3hXhGJcg.-K/qf[2.g0+6:YI&2TX0'\GX]3$:gg!fZMlX&P>g[An<n++bL.3kOKBmWd%behojDJ%:"Znh6Vq/[C<"gG,Q_Ga1Tj?>aHR9X\%",<*TLScYn8HnMZb\7q"cGoFFD5=I6ZHZukogV<UDRR,Hpl2t3cm@KrP6S0S%9n*c=B'6mSVrcG2lXtZ`4#?7J2.,QNgSq:FF7];r!8@s^2LSL>X'P."G91ed6g1JHHN_m[h>(8l6<Ta%YK7KDa$QO3QU]YF1mR_k%X.QDaSZkSU3tL5^bE,1d0?..;;$h!%b^S1?-&7J&8$fP@ceq8o-DnC2;lt4>URe%?r7()VeCd!%'^%nu<iS^V.j9ljP>g''D`bI+%mH.`T>\ou924D[2-S"M[m.&-T=jU9ImE*pFBVRA1#MNT'H7qASYK@nCRNn'PLZ""rC0'fJO;G<*hlJG)Xg(>kAnHF3Wa2"H%GE4=%Y*U`L;;fUYmR-0rl@mZ6Y.rA\-iL@E<X<O6EUi$:Zr+1!qg=,VR`bJq-*p3G[(A0P%;tgVI+5=V%i0a8mEVfha?bf_ZD:Y%4ZB]M%h[UPTbj(0eZ)+527OK[(k1&(NEZET-<-`_ecpg;Jqo<GFAj;c?V6EFide:QL<H+_f;K8QtCYnh)ATFm$Rp9'.A%c$8oeF_fOg]Rs%NGdR%<]lAuY"/f[U(!%,oej<ZDc'8(AP'4?gHX8A]A%'kUW0,*=fXZ>2-Q:Uk8nGHUSJW@G5$>tj%nk%/?mOnjV]q_dJ`pP.YT^*%[j[e3jX*MKJRdNnW?9sPk%4]7]p`ZLKf48VI`eIigF0GGRba:4p=h+6N?5%ObK@iIC2fs8]nt**YF`0MH;s><NqHNN[D#uXDY.mb%lfms3i?>GQLZ?]d?_atCf'K"J]iGGRo\P`P\rF\e7Z[PU^Q*/(%;bZNGEKu-d'7c"kOY+'7W0oUXcK[!^dbH$`JMgY_r;GGFQo8Q%9!js9Q%#=K-e@L>Re&7.me3;77iPH?en0-=,<_-[kE_"PkX(o=H2@-'b"g-,:D]h[eW*uNG$EFrXO5o$]PjS`U?H[NkiRl;lP5'\%SaPTC"rbb87`eb#WO0:Ya'.d()P(6lR4tkmFa8Jae#<8[d+45KBqstC;JG%CkS-Sel:VeZQ2G.Z'^I>G^O$j5r71fuD6cWt:@g[A%::0<4(T?3UeL/7I?0FA:duUUWpUTbWc)LV`(&%8?Cp0J(VbHXpd9E1PH(3$ooR&+2T)P^Y^8H]35Oj2H5:uoak53)>.NA6>4P=#O%%t/1AF(`hX:Z&461[\0``f/$614B$<qY%aQF'T*%qJuL\3Tqp2Qn`kKnbTO)o!Yq^]sDb4`M^I`^2765Qh)<BJ(R\F@`eZBAad:R%0c'9VW]\V0b^cV+Z7go*ps]-2d]32O%qEr=7rp0Pm6A:Jp.ji#cRWSu2!?C+f[jbIm4msE1>L>i4nS!1U9.^V5(.:^S0*DoCcXAc%HTr>CFK9Z];@e2eVlW\8i>=(WPc<G9aP6QO['_s8a1O7@m!CdCES=]2:J:Ku5?I8X4E&O\K:Z#5SXWgGk&A\rp"PI9nL8J&"OF<Z%3*-/#B'-8W3bP1&<dE+<>Vi38"eKW]ZaaZ*&C:*s"aoA3<llnWcV!]sMhjE@$ES70%&/D`m8_Ij\_QOF-o7nOMbG)2=]%Pf9rc"g%HXH"'&D'V6VS]%WS0;e2oaf,SipMmDJ$1j!9boon?ZJQC9l,BmZfi"P@\`NFb1gW$UW2BUA\2q0l@$-E:q*p-N=luu7h0B8Wr,%A%%r.@!$Rj6NTWphY26g$GHqJ)%3nc\4)Qc_0:V)O/-f=6&K&0RW#[[D"qRY^HDDs\;k&*L)-0SW7Jf84O3;";^Z)TtjKCA:HdceqC%pdcb^?-T/=]jmnQ6YN7Q41keW\rt/?2+i9Og?cXL."\Ee'&"bd,8Zq3XkUL6qMi``0t']`[BJeW=RP_BWu5-eR/DEg\iplU9LqbR%S^AIA(RnsZpVhD$,3:TJoB_f&g-`f.jekJ"$UMu3#*[0sMhR56V$6U'XZ]n#@'2\Q<tV72[<!j8+asP/XP#[6IqTqTm-VD?&R3d;%BNaF<T?r.sXXs?O3,Gi(Vub-^E-js,[bA_FSk'_6HCKW_H9(;=S9[7*(@jM0MO1$%D/m)3HgA>fQRCkW1cTP@Eu[8ToD8T3Vpn5.%(/X54]X4SLZh+>jnlK(_54.1!/u>kT;boV6KQI_@PaQZ.f8\GX!gOJab/;Qf^5MVkPf!al]%4`cP(/,r"3;`)+8q"d^N8DJ`m<S=%1VUEHnU]YG)*39*M'ncYR(nrJ6=Z.sWWML\^G:(Po1p[8Z6[B&]]eSXOXY)Cr];%eWT9EoVU=dmSE&^ZJh1L)f%q>Y=^KL>F%$Vg%qkQH;>Mc>ZLRjF,qq[9g5Z/]u`''nX9nc@KmN/hWoS3!M@;>m.)")XE\"@DR(;3s%MX=fSUp7SJU##LRd[?(\L8M+\>oZ<Y)WkUX%IiA03(=JK=I$.@W:\)tNpA9YoMmdZV)L4U+$=4*gE1#!&@@hPhUjL_TOD.m3bLNS[SN$rb5mt':&0llQVXWH2?feZT:biIc"li_Y%<TV/-P#^Z+]=EBU?`aHN*K;HWb'2Bml^u7dS<OgBjTYFh@q/rJ%=Nmq,ie7BIcuIUl%BR&SSf"NT/N]g3N,^\MNo3S3h6n07`Nm2%%d_g$p.I>XOG&e=o*q\U].ESW@1cEnh`iEpm8+gib(^7q@%.)%\tK<oW5[ua9$dDJCZ_c9WL3VT)`G=_J<:kU"m])\M63]0[T?6$%ePZ`Gf2]HqSa*?GKllSSN:eNn94I5h3u)Y]3E)8Xrp2)+c/3/97,.X2q.iG=F?"cg(J?N9gF$@'&;-X<TsF:P\1#Oq:/Ht1:t\RM%'/LKF@dL\B0_X!6)ob:&2?_%RSrF"fVpBAMXnd[4W5StGNct\I"j]Nrf]MjR-E1Jgba#m7M6V'^k4SIJ!_4,Frj-lY2)bLslgk$@%;X=PZ-C%RhD^M>O`6MQ<;9PXgfsN8\9uENHTb,ZbBSCOS\Vh9\OU*CtasP)af<u[#,A:BL`3[/'1Ro!'RVt8!]"[cuMX-0(q1cDX%km"]Eg_uH5mRpjlB9R8G5k/'@&JBQq\CI5_GJk+f'%@JG#I"HfWT'Jl?#"Tmi"(TeBemuk:FlJeHJ+ZFMa1e"!ap3`!T5&la586h%S/E=2_'o%[$A&&m8$ud6r1@7s&H%f$I&UrK%$l82ejFXCGs%kZ-YFJBU&K7YCrkmOnA*[F,%Lk]GUP:C9(jCNbMqfOrE8Wqpn"+s%"._8EF=AJ%6E#':e6'SZ)j5?q/A1pQlr8B"H0t@Q#`0oW)`G'k;20ggIh-][*6.im;;mLWH1/eSQ;t,kN"'aQ/e^;@<e_TU5fnA$%>'5Y2cds3h%,^j,&tm3Q&JGuHo8*P.cNi3jJ/oj8Fp(\#M)9HOl&?e?5:.;tKFX.J'B;gOIFj\nj-KnY><:"upVp3c4Dl%6#hAT@%F!dJ&@alOkbJ%<q%Q1Uukg35\KMlO!cVYa6c<X%[n,#!":]njb<F0@?02_eO?Y8uI"b:5%1dfKN5>4;+/PC'C.(VrA:1h\d@b$FI%HNQ`+?oak"2_<jO88n&j,2V,8$Qf!6\UOp+3,M0fEDkK"iiQ$W5O/b.PC[E\/5l6ke[mo6cWd?r91n`](>"Q,]/tbK-\);OC-`4c%U7Mrt.bn3`^H\sb$a%Xb4rA$?,[.0tFFo3LYJ")5>?jNULTQF\N-giRf%%Ue9qYi"PpuM0fD%[0q56C]EL7;JL+IC99!n#!Y"td7%5Nbs"\iZlZ,Db%JNgZ5YC[V%>'T(t1^lup\-IFGOM)N#C"EE\%&hT:@ah3U!U=%ZgL;ntM-X*7@P1MMdg+09Q@QeC5F4OL7.0O[O%GJ\_K1gNTe(57F<_dG!KD=li"&;eHV(E3UHG6)mN4]einSk'-<AHp_1YfU&mI"!%e)&!B\6=X6o=.,2QHJYipM=@q)KMLS#eW@MP%G@"\6I+t*E&IM?ma06@)MM'Fm\HTiO9@uuS>#2n+4\Td[AoAnqGU#q'Iq;K.XJ#N%;;.+jDr.Z,$#D>bF&L,f@<LQ\E/VLs*oHXo%n_!S<PuecVdT@-!pa`=ZS]XEaaSkkkp3iRG,I<]YNiihbSnMDs9T.;E'&*(W>)_#gZ@*7k"R/7nh]GN2hLA&#@@o0jaAo#oI-P&f%#1t&f!+B2#[GfPM_L5PS2N6SAdp6]aSVS^,;&NgNLcfc"`7nT?3B;:j%qOqa]S(>"FX$76(#'.,M-)ms\Kiu!&*!/a?"tO+%Dh4-%+W3_e7s\mI&lM+OF*Z:Klr#@q(]+nF.3IF.JXeQ.o=FW/^3;EUc8BOT_H-cRiu<N^kRNjImC%_ki`C&]XPH-AWN8.g]RMU>+ti!%%7.K?B[/o`$4sdK+Z)UVBq'L.RXbS)5F\2,*M%@,d'cGWRB5@?P1XNIIGb=-AFl+s4c-n%&6tNX%5!nDe<mhsKB0$,NkiaGrA&t@%%cCdgAa-/mBf;L'L%]/:N3HWXdFHA(6NZ:+@[BL'#k#mY56Pl:Za0Gk=cCkV^eB+?kaqbsDLFtW?Nh>,^C(=Nk#+_7\2HgSrF9Wc,%Z#SjOq*gNl5BQC@jkr.@rMiQHN_CZC@@9A.1R0p1>4gLbo73L!kfk`O:.97RCB%7jR>-PRVCLEC9i'^k-N?\Ifl-o1i[N+J]dp_+%T'oYr&l64Q;ucQ7`)8'K%<$O;6a-UgbZ8(_UJo"m)BYd6rMa.`LRs+k@JTkgKQOH237.GRop>Yg2fIb,%-d:f.em%6L-[ld;I&94%W`,T_F1dD*PW;?GnH?JchcDs[e;nq8$b`@*6)(i?KEdG7Okp4Lj/p/,Jct.lhCME^SEq#q'6:Tn[m@HSK]XO4ZptF&3VdBC#b-;D%`.W%4&_rII!oIZA1d`de:Xf%*,']FNf5+cXml3@(-BkKq_;3u+l$Q>12c0($i]p)4eVQYCemW[YN6Zm>DblH0Z'Lq'E5oeM>U-G#%>&@W6KY2^nVK<Y;8MA<SMTZ+nAV#OR>sm]CrPWEG!V6"lU@V_=4[H.<e?k'g4n&c<U[WBiI57ls)a]QbU4fD24n&R?,,f@*,FAMo%@,h"J\.Qq]gN%heid?\:H;8Cab2Q<0UAEtW'nsfi*0'$3FMk.h^fY]Ik^XM.3sm,8A%q;tc0LifmoH?Wd-R0r[Ofa!J>dBQAe3D]%dFiQc8JEmZHqqWPiE:GjiSuqS[tT7j4(E@*hKHP_h4V)l*+pq3ME(.Q=+O/a]^8*/NZud@!/YaqS<<RaHBOG;4CPl5.;h_0$t8o>%EoFn5b&DI@V8`_AaTU8oA3dDImYM-9Cuo#uB*t:,EidEs6/9]R9HPA5UF8,Lr?s]ic6IJ%1P^U'g:FsoI6N`U[L6R_'?C.+ol5A@%4dHLP$,\hg6b@8d11ZC[`^9g1;s<:C-gO_sQ]qVY&p=aTAY9JHObq;de&I'=fY#h7:3e'>q>Q2of3W,Y-A9B*+u4L47V'.E7c'aU%:II[C>09VgM-VB_aR"mr#8*qEFpogPgF$>QT;P*>4?asQ8s4oeE^U+4X6jhB*/KGBcKWMtO4rq%8U=^/9=UgOCLgcnlM<qFnf#^K%EI"K[`j0h%Kt;^n5<0oB[.f2>3o6DW$,%+KA.k`!3[(%"ND,)81ct9TW4=GJrX]bNl!r]"-$MVRpq42#cOF[Y_lfI0[`sP$;^Qh"%?D?8.J='237n#(F5;EK_Rp>.6W-9GeUH4VJd.kS8+nOXs5Hf!mI(7P2Up9("5qA]WUW2K7--W\40d"]_Zg_MD%@oWpOq0KZ7d?*2%E5C4Zj3EF<Q^6[QLNBQ2iDVTHjMN9-LLd3.\:Al#;kG"Q5+MA#G+LcPo!/bK@iIS;*n4EB`?BH53\4eJQ&W@&dZs`3X[IL[j"e?u%+DgeU=@JVYV>^o:6Y3%AH58t-RnLK_$k[dEnb%heP7.(>K_ipqSOEnZ(aR^e#K-i&nI1`8S<"!(*fHGBKPYlJl9TbmTSh!*)KLfq%+JK.,NGE>#9q*osB\#.N4,LE`@uZhpEZ-WD$^P98Z')=%W?n'_&tduWEq_L$hAa:_/O^`f4ODAlhiY^jB+GJk`(Y'B5DB?@B-)gh%+C?\Q?7Ld2,t;:,*#nZdiM_^blGQV/)X.eNWRZil^js7/)6(BjPEC1k4cYJ#W+?qdWK8bkNf6r9BCq-^W5YBk)KlO2I/_^#56'?C%@0*08lo$(A)_M?!iH96I/,=);;,ZA)[+P.PiBl^=XJp1,3UfT[pL."ZJh]1O<4IU1jbTmTWPk>G,o*S$8&ULgE7'E6OB[,H[CA!E%M=;hK"pt=PaP_>dJSpTg`?pjEY\"!&,s&"UCep_eP\*hH8E!,PA"Fp"_q1(2(Dg`l>E\U.-J<]VLjF=17P3RE<t9JDekP%)hh1>_%'dH!4G\>eun/`3##P<Vl[H%#K``;]24B_R7Wn:5hO-PX2PHBg2Dl-LE=>t0^Flqf?Xj0CUa10bPD<>1uV9Qk@>XEDdk/o+,nAep>%bfQ?6'p3^KP.:t8\]m0@3q5ZR]ub08YK)E-pfV90J"OoeA6NE`DV#I<G28!IXWTBT0A5`%1H`Pb0%I+Z2>S;\@CNp`$]Y#O1L$=:%3fX!"h;G;Ik>jr)!=\GWRuL$`POkK-cEAdKKk8mSPEXnDc[BJ]h9B5)hUtt0L0a-),,e@f+5]B_]bZoB=-(KM4M;5CFR/..>O]W0%#bGe2b>2Q+T(\9Z@9;#BrPn&K.:Dk%9.hTl;7f&K/dJM_I)cmOa].GS&R^K:`i].qr9?-(/@>pq[r&uls6#l"gZ2/->L@dU;Mk!Y%&fosa6qsEDZ20LK<8oNUO)pB<F#EG]E^A80lH4,',T!6fE?.(%d.O2Z$JcmdfRB3.Jf@3B#%lr0DaRhT(K;+q9of`>/02Z82?Gd1%rs/]g'm%tl<0ma$?QO;FAOMl4OlI&KA\0")%?\9U<Qot1:GuKT&,iO8UM&$ZjjNhXR5/e@>u8=pho.UiCq?9E\jRoA%[9[(^0WhF%Cq;<73SnS`OeUE`Zg!(3NrVcn0q6Hu,d:N70COrHRk?+U/kEj<Q;&1V2lFZe9c'$ekH)@W/Xqb<L7VX2^>!gYflTNjFD`(1>hO3b%ZV.(EA'LkY?54K)2I0.G;F5lQP>)iMIt8sdO-E?TPY2g0.1MJ8(K=CL^rkZCkn:/gNgNQ(Y6l\,>SrC-#m\CNJo&$Z(`Ocj/h!%r%=5V#c9c'$e(OT0<.+r].(%g[JN1*HgTZ(%c$-O2(5+=1GG#%iD,TAb5/h!&=k$HFYZKZsQ.,p3R+g^FOiUU6bA:A)<3YJ=IKWi$!%RnX\U+TIl'"(fr,]+j3(7V&<@*Pd1?f0?l=O)BjFP'5lgWD&V9754G^rJkB2&cH_DeHK.nj1_]Ln\#76pXLS7=mO>YGk]#aMl1SK%g9Bd*;((?Q2fF;bTO$P8J!-ktP,<Hs?U5X&.3*u<=:;ogb#q-1_REDOeg97@kkJePaRjdHlgeB6(FiLam']^Yp[:==&dB<9R_*O,%]Jm9O_8#^A(`Rcc@cTCjM.7>H?$#2u9@QCSM:7^+Y.5KfJ+Bhqh"a\O#eoM?Ycq?I20\RL9n[=])!IDMXt(_M](7Qr`F!\QoN\p"%rlC3^Fo>4`HM,J.)\D`WA/;!S)VsfZ;>/s)8g]0pc&J5a(V93WJA'MjO`%\),$u*uG2s(arLb_^K4h$sh/l;r[rIAmfgHU!7k2>M%U*Q+:q*^Ie->35o7;upToL@S'lTNuM?[i#da98c8h;AD%L*Dm/g5DJ72\`5Bac>fQrT.#LN@"19coWQp)Y;Q:E_\3gKrM_(Bpl2s%n4cjah30gYM^J6_M.98]4nil`T_Be'2og%j+B0(`hZ`(B-HS4j]hK]p]JiQ<mbGEFLe?'W$nrj[aAm,\hkPs3]]%0@n7OtF+Z%)e%mW$%Q$Ah\!87`%R=V1bk?q;?0,Zl=P]>;guhabk;9Ua$6IE)oK1[;*Q:s1gn$,GlfU5X>@GC"X"?8`ea;S)jS&gL<m##8]rB=%&<%_lN=3U$m`JiU\Q)\`&RV'$c5A\`"%M/Agkc)h\[<Dn$`?o5Vj!U4Aa(7VBWQ)t$2*.;o2n3qB/\E&J^*L-*'H-iBe0R*,?['-T<i%`U16.Qrs59H@&Rg3HkEcMODq[q_kn$gA>gg/HA/p^6\P[o]XN>__L5KP?ROPn%#1c`;!0.V"K]-5&k;i\%-,7r-#_*05?R-i;)b5%ZO;1t\2<Nt9Ff_,Q\Z*S#>/G4N5Bir_B)((ai$bEc4,M$Zf0Mg%CFmn<V`CMI2GV'ZoM*OKIat#Q<oM-'-&$ZaKN6OR`6&,`:VOc%e[)WJ_/`ea#>\g'\^fZ9@DHl>1f\9U__CF@^/BFPI<HTqE:;QVEa3NL=)8k'/:!9Ac/;)jKqEF/1S3nRq+Z-Eb&K#p$_[qfWGGpQ%@6(K=gFtrCU9@5gB+RA,`c0`YMZCRM*1/FG+=(pT%l3!b<\MUfEbVkapT$DZh`EKpc_"RG[[uXknnn7,F8N-/.lCmMD5)uHLB_oj%N:HA.1q]UV1U0eQ5$W=&lK1JC<I+%A>:SIbq"!Bs]VP$R]["jpOrW2S<0?=[1B3<T.J#+b+F:6JKWY.@KYrX=>7GLmHh-mYf-lp^%r#W<&Qi((?4`%Zbe?flP4<L^f@nq6$^"02:b:trfIb+is:!5u^3*5ccrm;ad%YFFV:-ojV-F;E'q)KuJmO=mXm4#rj0E-mt:+'sI%)RX`NWKmHPc[:`3^'f^FpTMFQh:fHAG\;.+Sh<"[=:43:ghOZ,%PcOA;CtHHC6Y=QQAQ!k&WA<LH<[P@,br*$r4<`7jdH2"=c.0j%KTj4bDO_tCeT9TtTQ8ItP6l+]>E)BplAL`,AH/=I?QO0%<Hsj&Jc"/SP?X3I2K]8^9-.oeoEB?#D64/hOoi=gE$o0)T$Ch(TI%oV%9<bfRBi\E]*mGu&`2aN;]OLU,`b!sPgnhtQMhk.$mF)ud9/MQJ\i%huXf*iU7u<#ZQWD$W/_6DARjNOBC?p=cc7?'+7ZK2Zn!2D9%Rpa&d-Eet"3Y-W4e'2@G<gY$(2akNA+h[`_jkBMta2\BF0J5IO[Pa'klc1Rq=cPUs-rIur42E)IW<A"penYSdjDmSb36A$0rrO^_%_eq$G5Zbth,?HCJ#D9qRr/bk6@:p#`#cLf#j8=P$4QML$B]"69/ppinptJFT-^%b*ST5Kq7YE-(0[=PDSDBj/.^eZrr:ZqS9QnG#%(//bo6$RQWeB+WqXDq%6_Dgd.8-BX%UBI?a;e&G]oWBXk<M#m_!TPiH_Q&8nAtgc5^=P?Q?Z&=_<7ZQ*nZ[Z4>H]$GZFF/25qj(\%E]FuV@TG)d)WZHm+,[>;FQ$&/G+]fI"T:)D(1>Q15S$p+S-@R&LYs.;O#9+?(1>)'F0^%2U+F*U3In@nY_Q45d#E@&]:fjM!@H%l%$pLRJBbk)SHj8iXjB7")ErZmKa:VR*8TOlA<o9XX!&q,@rM/pjb(k<X4c'FD^nlF`PT5mpQ0_D_\<A>\F"&2'R,*8e;Eiud8cR/6%Hm/5/O82\f6)&>9?cqOr9C8@^Pg?,Drio,l!\L7EGVUIZBA/jMZ_7T8f5In"Tn^84:D?\)\,$P^2O*Z:^Z`q#0j2hZn+DSYg?e&#%PkN+<2H6DtrF4*-)U#gCdC8r]OC("7/jqs"i_]CG"W?[pXa[ugbf6l$39XDX@5>@thlR`eaYh_aIaPY$NI64%]@Uu.\7O*8rM$Xd%BIdT&f.VHbI^0uonb;l+c*&,S?9\rboOZ5L;XtCnqRMH06&I;;*ZO0H^Z_'ob=W^P\i[OS00u*mdCk"Vg+MVBkdZ!<P2F;=EmB$q%XaWXna#C6F$bh[?'Fo5#EFj@TMU__$qSc+NESTjrSXtEFpsJR'Mr%DUhIImkE3EUj.Qt9;7F$gq;A48X?hCIL_&5Umhs2(q%`W(V%N@2E'l,p9m4Ts[-2_a]Uh!5bn"pEf'2oNCY!OXJsc2QYqqF0!KF!"cKHi9[Wonur4)_CHO*d+M*Q"+=6f.Zu$^Jo@f2@R@PDnrH]%Z"7'r\,%D9@r_8>NFn.t^"4pZI=.gIlPFuMhdH3K%Egs7qtPoZf?[ZZs-URZb`os4oa;,(%<S=>U3lj5*GTo'obd,iMn[^p`d:FO%$m0bqT5\lA8GDriFDB:Op\O^6&UitJ_r&Kn82Mjf5/,F.iRt>^U[G\Pp\KSsZe:'O[SpbuHi9+tSNcn`IaN-en"!_$hs2)C53D]F%!Es<<Hi9\pG2,)?qRq@*DS)MkLV;:m#\+0b64Rt<?UDMJ`-_Fqm2d8C?GA\AcuZ7[e&mL@qDf3.GcRHUgAFM9qF)dMVW+-%K_P=3%YLj*t)sLZnDnl4dae<Pghn=KdM[M8;"!t\50D\^64L\tqHi82UJeMU59mlH:;@3HIiAOXq?k2X:P!_pp[bpsW<2?bf2,(aS^AjeC%JAaku4X!SU(tRDU>EHD>A7J?YHF;CH^?$P..NI%LB9J<<^?@kldo!^F)5:1*1@o][;c;TNe&3Gl:R.>/>hdLrZcu2&orbErSbKf)%_-#a65/!JU?2VjiCjp:p4)[X.amYir,BI4oWT;h*`g!n/ZSd/Ur-bGlJ)8tKH<ts+%P-0,rHouf+)G`=RqJ@[la?=Oj4F/srCHt&%R]ZU]qGkaRjZaCpBD\[pk>GgO\lE+0D14^;hq?:Edl>MJ3a//D;J3Ium-hRBh;$?RjIOl5Y:n;&V4!liQP\gdRJd!C7Rh\#^7&D+%B/ZR.k5M5Wq>IlPD&^r:S^+Q)gZ_nV#etI/+,uVirc35BU]OlHY8.n'jjaH[Ju?<\.<N/q/\#WBSd\ruojjCAh]=o5`RiQsLro7s%1G<^>jNk0&SL\RtliePjU4Wl`2r3_s;jk^h^<]hml6hcs[higYbt`i6bI""WrCf+aR2Y.Lmd]Abbg/U[4+dEGLJ=5$Qml&g0!`o)%]gcBW/[*"Ip9>,Gg.BDGXKm(+l:U#a9-Vr=0X55#90_Om9)Y2bT36Km5.`_59!sM86>pFRUX6+p=7"&TPHA12l6AT!F)AO/Fa]n)%(3b_]$`W=SRobLaB[4clT-bg>hE5[,+(RES<5l&l6+=B(ldsV`f%'F'Hm?NlC#gFOG6+922>sC>4X[5URt\N]:He+j(\IV6s!H(?%fJ14!fd&f,3L]\8"O:nSr*3O#5D^/fl]@a84FaJ2W,*o<(9)IIRP-=)Ik%cd]=[XNbkk<gb<*;-'-Go@Wq0V)HuLe>l9&/_+$?!7%k<VC]cn<!<XiSASmEKRj00#C6@@+;R]^X=#pu"lI3=k]QIRABnC-r&f0I?0=<`H*nO(<>E$JUmSTS&o9g9XEoeUf=e#d$A?irVU+%amL@NrLZ(sN_U)TZj>In:O\m,b!Ynl-6G,?H*-!RRWIcj"ef"2>KKV$F):DbG3L!.<_Dp<C\6aK:Kp[T/_+%-5N[E]hMo\JB#C(E%"E.f;AGV3f8h?_#;sHQ]RT+W7(qeS:RuI3E]p.;eNQ]kK;XndRq76-8m^J)j`TAi##.Cg_2tpF"b2)G8\_$-X4td_P9B*lbDJrDe%JDPc9=E+&.8r,J,7:9cL!Y>XZiOA*jeKXr]d!n67h_oE'*De[Rb/;QJ0)_YBfj?m?_4(p'(+K8L/"`0HGb*KQaUD?/oF\(73/c[o%;l*JP-(e2Vl-0TMi,YAQGgeXQh!30e?I\Yk$LGf[[XcAVgVn3,\h^tkess:PXDDU#qN?$2Y>:Q.M]^E>jT4IN7AS)_>lf6WFB>8J%cI42shE4,YIeV\u$6s07r"e[\gDf2HCSt&/SaBa"XK5cE`VjRddUt1Wm=T,FZuguS!7GoPiOCbWokX/<D_p#/^sN;)cK:FW^Bg!g%rp,;OOELA(jd=@]KK^&Sf:VZU@@Pl0K_[eZnqE-]PA-P8Bf=l)HN!cMWJ#qo-E_8&Bp=k_ZlDeX-<T&RT1ecD<;]l$!P%(3l90FQ%8ci+dg2aFV-;Q!_hL<[9Hsrr2>;/]1Oea#/Ff"/PKVnQtrE7eEqCO?kc"BQ1&Lk3CqNMdgff&0eg'/9+i(]aS@C<OJOS"lf_"Ks^%g>ij<;L*2W-':O7Z9u$\3'#'dgT,CCHq3dMIUUM\@2KQ73*O8_\(aP`INFU^o4fY</NnS!lV+O"T*]WREmOZ.c,#P[h'_eA=E%dp%Q:!5`\@G`+)4B:-Xdtl0c#:D<AnF?.*9#6!b0a+!iTbDAZWNSTbKQSR9Z,?Nb[OFTK9'2JiUD.@PO!<+1(0N5)'FhfQ\_(06KHea%4=FNZ?GP-?jkDL+QXR)F``DbXlZ8is?$P59RQ7u/?7c,E/aqO6Hc>TKfa5MPQ+TKNhlb(%GgEf6r2U.VCk>,L+-l(#C%(nFUUAR]%WB;d!9GW]H<Xt!'ASnIFqm:]>/[''S@AYU+ZHY.4D"Vt7RLVscom#<Yj<SU<[/>9^4h7ASatI;`Y>;mk&rdkci+@boGcpj*5+j*%%%\CKm%G7oqLJ?^77I6_4S$F<=>Ae="T56WcZB__u57`9Zg@Dp?:s45mB\U\qe(ht6rVKMRJ+hYHrEa?T,XAr!EjaQAP_2g3:X[nL%jjW!c?fVP)FWpH%*3d!J`=C%h4:,)uUR%KV3]Pkrg8]X=Ia661DXEsAa;a$U6F"3#p!Kn+)tG?IVR5n!&\Ma>jN<n'[T!)BBr3,[%9dG3J^=S]Hd>;$'REkS4mst[<.!^oJHNp(3d-,<nabQHui9SR%e"U`_IP:D-VMMBoPSfs\R9[ibI('VON#mMm]MBS"G!L;DB,5M,%7+0@t/n>a"`Q(q9PP]#)iS$E-LUSQX^(-^&np'd/1:rUtam:Bap//cP<LqA5ec+iOjf*Hdfm5Q:h\.gCck7[A^a%#\IVqsBJ<LHZ%#Rt[0[sg#31ABAEp@#U1FcljH9SD*L'V5Fk1q+dm2*tfJMY.*=SQJJdC[o5`348S&DmTqJ`C:^t7C<*?a2FntA@TR0V535s[*>!^%>7MZpT,%gqX:]0*kl#1AD%O70cC>h5F.G>"1.#>!D<<-u\8F5q`J(b-;1(MiWg),uotB?OCMAOuH+aIB\31pNr4ZhtDfm+-NqLE8%j&GiPH?-Yqkk(`1T9#6.MERrB<U?]k>3TI6EbG42D/CG]h99Z*.qN=@DVGsLj+hmpkcn68)P,fafMQ:)ZF`!oEVj(T\GF`YY1oLC%1A]5,q7UimYZ7gNjL9#B'CY9E/R]-pXbRNk#R^*\j^$32PI<S27I5j!H^Fhcr6jUg2("-.M)-Nj8*nI*+WC<UPk4^9?c5]gl933-%bBojoa_VgJW7Qi][@U:LOU]>6nso,J8>NkQdG/CurEf$^*$,gO8[1Eb/N/]e[*p\_7VeTSAM!OBFN^ZMi-rQ$o(AXI`(BR_$.G/!%&`6Mo#9uuk"Q"e'$gW>lr8#FKJ5eF5X3a3tpGeqMT)"WiKRr>a#X3h"Xri4%\c-1n4e*MG7!TUgjC;bb.#Q+kqK$4ZZ+!%VaS#X3%4QcqgL#2ZTEC[df'6SA=:4>g#V<M$+WB=<>UjkeI,SpG7Q2lItWk7O0[n689BJ$-f`al\\gAIIThO!ir9K-._q@r8qY'u5VCq(!6%(=`KqQUmM;PV3m&Q^9Q.?jmY4WU+)8d:u';"pSpnH%2iA?f'XGr?P90rMB[pqBaN_O((H'Q&u+?lej%[b)S1b(>:OMPEX>g:s>3I%%`D[@%Q?e9NBgu>_i:=o+SH^>NX`d16S_^GN<QT=ON`FUa)8ioA)?UNoYlOTR0"PFUWiZ'lpbU$TiEiU:UN@\3KmTjs764&]H^N;%=bbkkE@1GXgO]To/LX+maXll52fA,'S=r0fW[$BdR%s%7`_@pEmPr1i&X&O#Q0:1lV#si'*7e%/dRP?OS0DY)AG.6XJ`C`Z^jd4O%'KK"]Yqan)_u?An4`l'f+GpD"4Ns*5hf<1^pDWEkr.?`V!;G_#-pC+&C3F7"pfOlYWEcN?f@2+GfFpJ]W36ipWSftmGWqaf/U_0t%E_2OT]-hQHjhpkI(+btJ<p^@TZcY)s?Kp9nW(5#hQHd8-*8SN1J,QsjQp-:R/k^$8keJObqUsYPn`',c@mVi*I]GSBaLC77N5l5j%ct(X\qtV\S'e<(PNO_Zd;>l]/]BM7Pc[;RY=af3iWN+kO+S"mVB^cO,4IpZ,+6K2cGTfEE%o,6XG0hoBketqaLV%C%d>@%e4TFcd%dqKn=NGjo8GBs4\S9R*^Y_V9]STm3_&:kqX`&#<F[m'985NV<a`uS.)hL4%_/R6IBN$.:,-+PVAp1_iuGNnGlV`"<p-M!_V<6*7e%So</h@Ji/<2FTLfb5O%qP:EDe(JVQ]N'\o,NLrRE`H0U;`Qu`L[pXh`h^Wui#Uh71HLp6CVjEu:I@0bT,DLiKoiB%=Kt;Wo<cO."%YXBag'>!uKGPkL5AsD*&V?prAZh!hMRfmgu\<9.YhfB5&3AD$`J)*hl[6=g%`_:;0E\?mMg\<X-V.;k5d(OWN/baF\PW(s=@@"1d%o%0;mVB=+4bDj[iki`.3\FEmK2!`H1Ff&0k_X6udc'peG/)OuHVU"Vkl@cST48Z]h.Gs,%qoM*u)+:=P]pn/37B^j>-f*XhGc1:<%.4pR5%95Y[FsZb(Oe<Fo,X?93KbJgt'fh)%Eqe?T_7ba.d`V.,h6DS8h_e=?Th'-"TPg:Fc8$)5f8i'C=R%rZTieW=ECs]&!!g2[%)=;A)p)Ok64QImh>l*Xaq8I^,'0cX0M:ariA4TOGA<@@.Nt9.l?j>^Cp0)`'(%1./86gj6Mkl45'i;YCX9,R<)Pd^i"nZgG00eC-%,io;&K@lb;]FVk_dYp_[6Oa,nTakIGMQoRe!3)/(Z4AAZB@JC-ZS2_`78kMK=DS_Y,$fqBG9h+QdWK)U/r-GnUrqXAbcF@%@MMH`%@[9n<a&mR$@NYMJ\5X>0Sa/q@9pg@1@P6uM6D2M1#^b.!8hu^kWc4pm!Y:eWOSAXPE9L3R.A+@7\&L;=j`3!D8X53.Vlr#i^2aNo%/7MSh"Hj://@(-E)G<]c3K_=9j7lkWalh)SIh`$E%5eQV`eGI&(l\^m!GTd8MZaqY1K2"PAURCdO5:6+I$.:Pa@S*@k>Gm>557#+%>QWRph$9&l3CO'ajG;KVF#A!Fi:;^V5pO\bX-'C)<W>uN0\=OZBT[YZo9d]W-"cFBSt:2Lc:NrWJXs:3Kt"NKl<LVG5=e1oGF_-t%!rWF\[`l$qJ*N-K\-)IPck_,WI"TJO1XCM&c%8s*ZcIS:BWR*KQV0K5e[-he.6.oJ^=\mBF!&d.6Za"aXj.<8KZp^/d\?V(b]m@H%/[u>@WTCT5J)JL._RS_$lC84sEOT4W&0;*/Dsuh>SEG]Q\>L3]^up2rBZ^o,#W".&XIk(@E/JA&`"T&*:G6YX&9Ts<5l^4ob$8C3%\8^*;r2/)b<H,ZI$T+"j^TR%BKUp9PNRLO(/_iS%1.fqMi?DBoG4>8B240"(+cB@BX`#aP6%QAe7fI8-Gk1_.TY/%/3Ht)ROMs?h%@.'FJRn@RrZ6I5OL9Ke4@+FMdVVXD&Wc(,W>&VCOT;dmRgY)sEY?f5&`gj,'jl,BBK.!6SWgnku1guL-FjnIkrIkraPYXs1WVn=9%I,nY1m[&\KI$:+B8G$7Gaf>U&<9Ka*<GX7:)<Bs4X7>G^!pIBNn?fo6an[8/!Q/b#:B'IZ.d"GocfNJ%`XJJhF=/fl&=6lFkLls@%4867i/6tup$epf8BA$.k3$@qta5S/8[\c:Mh+#rZgbGJpJUH8N!]U!BG.oD7\\g?8?s5g6:+OXl2l0K^4E'=2Q*%qSbFMWW=6l>b%BFJmdpVi::.o//>9\"t_C<4Wj,"2DA7`rV&TJuUNGZkYjs.057%a>[-oLHEEeWVA0Xt_Z;2#GP:bf1idMLc>M--UMN'%-"m-53.B%-J`t9i-#U<qu+$Emmf&oJD>1<-\##SaM@b"Vo'#rFe)&NRLMiuP1Tc,RuN8:`LB^Wd@<YH=KK&i`C,G3j^>Y1kn+X54-ki8gV02c%#j8i@cdOFc9RhH=5bK+YR7rA%nH)@cgch%&BG(Ik-BQ.8!q4tFHS&f4QBAUtb=i_tIN%n)ETcBLUR>FZ/Z/rp?!4mXeln>6]m`iY%Dm.rBrV<HPHg.AKTm0nth6llqrO#Y+Vs/nCqQhWh0Mk'?J=UpMLM&gOb(0&$Hi%ksnnb^;r[ls-q0*5-e=BU.7nF,fq6eN`bSOH-%s*0<9!Vst;cdFga"I1d$d\-_G1%>)e+Y%hSI,1qV5$(qM03,$/r5H,AXf];O(YVB+)uFf&c.Z=rQ*7Q4[B$FTrN0&5Xk[/\<f=#^%2#NY!UXVHh6TcFHP6s/VM5(uJoa4/lc:jM*!p2KTfH0C735V3ujMAEh7lpB-fmu,Tp&CK`s#tLSZ61D798/Q=X>uQB7q]'EmZRuP%S"=\T.*+"Kf\[mYjHrX.a`.=lE7hi&Sg$BPAN[-sNsn"Y;[\BDT:hT)k$>lT3eD;t_9IOhQtP95Qt@G0o^<bmesH#IVm<+Zc-dGE%oW0+qp8h3Ig*R$R`_??*]N\Ubn3\5!A]GE[7!#9r1s*i)VQ'q-1^N18Ef;A$YR(*KAUtq";0]X;jHkMT*;Ob*1\LG3W3"[a$CRr]%Wli*,1g1'Pg<[)o4LP9N%O43A$gc]q4,JH6P_Ie?;.eAif(]gd2,uWJiA%)kiAhUuLYl6P/:8=lNlJ$q1t])B=*a]GO3quD`TUUj%SOQs(WUq5XH!B-m-/Y^Xs&O1OQ?ZuOrOkE643C4_O5@LKbiREAc)\g?_ohRZeeV&g$9_gSXnHT%'-Q39.DDV<*#Q\=6-LlS[hN]F%fB2hX7\MbBT!riZKcb0\?Dkh%cu^?"@!1;]\3RMsE68MG;c5t".YF3>E-:H=L<AFd$J!3")CgB/.Cf"/R%Z:6RGo8Y)0AK6B^tee%SEVu$4\'I.pm0f"bKCS\;(>=#$ZK1]2*?EN`$uNd[X8h6Q_r?CKVc[kqaM<eb:%IA@VpO_0/^3#HqTITM+YbCN3X\Y-hN"oK'V`d%U/SnKXKr?LcTg*#d&BI0Dr!'"Wmf.817@q.!h?';B-'qf*#t,3fL,C)V'O@JlVl,^G8:K'2J>/3%#D#;Z;\)1'mG?><g4Zh$5]tf%qNgs>S"hP+_%kQrh[10(p^LEe$<lC$QXp@,6jZ/PGl\4q*VG+2JZcY+,a<1^O*mdfoL;4LaI3YSTH"%ZbY8C7=>,*3`+?[9EbFn'%??)rle.nB<JsFV\2JTc]2_/9uY0[B7;IfsAH$@HXOB'LNm/sb\!iq\1La)sNE#4K?`eGGPi]sFNilYMTe6s&=I@qO;"ri;]J>di1%psLd9o&*Mm.TjaqnM\?g;XRkY)cAf.RrK35PqWRR+Vh(.8[i1\/;@1;dKd#YH77T95/D&'m>"g5':#a3N;"QP+Uu@/!>W\mQI6%4%7.A3J_CI;e?0:EID"!^<(b<h@-)[3snd-gLq,0=4(6T5"d&:1f.kHX8QpMX@/BK)q7?M:-$%[d'!AP?W,4WR4U/B%Aa[?SJ<2iem%6>7u"`u!8#54"Ba?Tfsb@hkOl?1h0jN%/t7"[OAgpEHmRiC)enK<(.5]uZ7*&W0uOUp<>o/nH`9,ALcSAeTr9UPmOq\`/$7FF1KH%c(\G#\qaLN9.S6^3j(E0GC'4uW''Is(?dbRI#7*]qbI)Yo]4Npb6`LSjU@459[;!HB'=f"kkdCG(=Jg+Jj;G*r;"^Aiu,&ceB5oi%NI-2:r4):ZGbAM9I:j)u%n^!fOO\dLOO]%Xff<Sc?W\%olP/2VIg^_.qp+3Nm^mNoCQ>s0#8>DYYt*gLZ,C?set.o?o4,8a9+i<(%l7<bm8[tq4@iW9@*auEVIX0-uFe?rhOdEKbP^L(+=Nj^2ha(Xq[Q8)dTU&Mi"Uo_QFm#+n=LG?AG;;D%[5.1R$.1,%ElO8pR#??D%"XkiP]h;1MJI0@;^F0MsUr=,2JnpUhS_]"Am`PIhElV:oe;fFK6Z&,@0]&C6Gl7$UNEeWYjJCpdC7jqa]tY?$Fi9hNi;I#.[Y/n;%Ma7e3nOR<M)OCg.p2fta-O=PMW__uNntnbX3]f;hH+Mg^)K54hF/e`[35FR&Q)C61<qg\'g7brZ0p_XJ>l3PDd"J`0h6B*Bb*7Q)%O,.p]IRBarJBt<8KiZItloMtTLB;MlZuW.NeHC[Dkj2Nal7@!?W3#(1=4,opj3kn6V;.G_/Y68'cYU9GDZ&L8HJ%k\TB`L\N8k&k%d.:2P7ipCkWhJUR\jrf]i<7]Xo2AT@0qP$VH@@=pq`?1([f5a'e1t`^=-fJeRPf)10U9lqaEbJndtRr#dq8RGUNo]7]A?-$C&CaN%s1tUIVe*h>/%SK)kQ!bj8^5\hBfVMD+GS?DU"JUp5@/[YX_,!4GBsQ\f7sTt]B/Z_)Tt=,ZHMK8dMqG-PU;H3YU906HME_fdREa,%om]lsWOX,!K/37FS<?tr5#W*[%k7*/q6<H(r#qa5Uh)!'R(dp/dPZ:L/0ufYhDPcmX_V\.;UtE+#Vtt.V'tR4_DE9A3WT8sZ4mG/%Wi]0TBj*!?fW&\^?g2?\WBr$i:QV<u;S&kY'V^sU6<$=g19.=Yf4<(5.7c6pR21r"I#Bfl(cLrNDV?]G?6amIA^t!W+e?K]/R>1a%8Mt)GOXsZ-4[!`+[Y\MACcr4=h2lbIJKgR-KR?W*S%ZjM>2E.6/7ltm73RP"b1N:PbG]\jAlpeYWaa'a7PS<3%>,-lc)Ut/3*a_T%>R2NB2,r+1atP+m7E1=nigJ%hl8P-oZ?M`p_rC9(W[b`c-ka7s90,Bb9u/.^#ln]S19#Xr,t!hEaAQgVk<cU/$8G6W8#.)]mQtmB%Os]F&.=scW6\oSp153fXL1A_4ae\A;j@Ykt@knJ.ZBdEpMD$Qb.Ae:U8-Q;8Z1f6*C")c`RWP'4%I$7+'*+e1>?9CX)AXPKh8UmC%1tAB592gt/Cdl`V#b)lpOZG!]VT5"--<%3lEI%mrX#?@e!Fue:+N&#?@?t>jpnCO1YA8;fO^nZIT`[]:6"(RG8[9d=e(KCX\r@9D%Fqd9?(*T!^B@N_FCZc-<>=_j3(,@]rcj2CC3XH4HYN_3bHV:=R,uLU46G?H!Klt0RF,`PQ%@r)ESIG+?J1OS]R9Em_#Sour&SA"-%6U<Ea312VVnA5l,!o+?CVBa(4MI[sMPRRsSD:X+:ZVBLA_kaTS+uIU?:q(6M+gu)=:6gnOmC]5n#tAUXVR"Pq_G)a%EtNCZ+h"M_%&:@9Y<S^kO,NR-b1(=T<9`oaFl\7^Q7<#4]Skome"nA6V!lH%76k]]5>^o$"_;$?g)6t_(#se=B+T40s<)<lSC38k]XFW'*7MqgL%JkuLl#XSQ+b+rVV;(:B>5lYrI"D0Dl0<%@t!PfiK'W%ub@7?Vs,BKh,ipelrC24qJ!@$2DQI61n=BUmqXkNm[hNLOuZKs1)l5&3[%.7@2oVNFhg?%N8b1/KUUP!pc)&7__"(u5B&dt]DC[(9%T,cE@#PF4PMEC(Ud(5Z-;IA/l%F=KZah5Zp`7j(A-PM[L5@H<T2ZYuct%,$O#;$NPoo>LCDV7"?3pQ6M!#;2A]I#dGoo&Or]m0i;4J3h7Bk*:t7:?r-j-9FH2]K"`QGWG4,X#*-Ze-l8%e[\7227!Is!Q-Rke%T`U]M1eHYjXJi3.OtJ!4g*T?KTFk<B[0bd,;SCe;?qQbJ3eosGMK2N?Zi^r?LoElRN#/"!U?PMI>.0#6BA;'WbuPP[5]hWJ<&h09%JdfG0)J`dTJg;MQ(fUJHU=)c"F\pLCPl?CG`W:27PXGr]KJ'707utGjWg9QIR[6kiPF=c:d:oB)9rM7H(`KAkUa0bQJo`8q-p,VX%6jP$e;?67`,m5*jUa%*t5egYM9S8J$KFhOK!euac)EoL(8V$"3;rkMX0hYo[_uqm]&=$F(9QZ^9^8K(.cC$/gkpIgA`*fmE@XFCf%TraG/3_Nk%13$&4n/`F2QL6>9)Nr4D+PKU82,."]@TfHU;C)BGB5C-9%M2?t1r^uM%q63_bMH__@Y@Q!+;GJ8TEnP6b2K-Ve,j/S%QH=GefEO-)FISTD<#H!9Z?:j1:=EJS,/r,->qBQ;?pK7F,/@#KS'd);?R%mCA)`O^)"^P/7Hs6<"'>D_iN(06=&]pR+!DuQ`9pfd%9NA`06P'[[;/A]n$Ao9(cn`%(0TO'!La@endNsPX'+Hr@Fb-OH(<);C0RnX.&bmBZ9:XN`+u(W9/4HF/B#^I:lP>0c7=]Lo`*lS&%W",$s(?f1WW2bNp`e_]ek_/mkS%ZjMKQ.D,9+g-#0daa!%,#6iKPGSV,EeN&2Tf32\=4Pm7rY<h4pbqRS2\Dbi+H^-Kig+,4YiM(%_'%YXiHrLi@tIZKC61"R3KdS8_RpKK"%"SrF"*kOf^Qa7RIRSY0Sk=T'4`SF&2%$)WBf8]RC[e\?rD_%C/gN36JP)#67glsH-]3B%"Tm-]/4Ic2"X,Xt%.I8q5%>/j\cX245tr^LCPf_B"JbE0%"/3^C/C"cfXqNJGbR9:Q$$-*LaOB5Q*;`B@9h-s#)*Yu3=U?]C"/s`%4AZnj+B3^hZC$bC9FQWt"p2+_KbbksAMCKD?R8%;Zn%sU(dT+N":[#Cl;"E$!RqLP4g:pWC:JEiJXI.7="(B]6nsd]-'_6!"pP,i%k7SqF5%9?fA$V,k/4EDRpDXC3,05>nH\Q=SYu8/BnX="<G"hIY^T''$`@IsUZBG;bMN/_hV5c0\#2U<X)D^!!,BQWh!td,8+Q6$0%<0@Ij`h#W0_hG'\!u,3":88C-J.OHRoHSEn$&kfTe7$8rdqC2Zi&XeHn(Ek6qq)V;UoQnBb$lfR9eHHK+RKGb+pRuV94kB,RZ-&Z%5bA+2F<$R>W>bOQ&TZMDOZCo`,VYt<F;NLnC`+e>TW9PcJHuYM'O`f!?09NG)0@tNR4)NV,uTdGL+G+ddJGC;:\]of&L1QRQBBQk%"*peI'Z03PYWk!]%Cd,"!gEf%9oU#C`1#:+`%Z!KT0[`q@-GLCbWMX3N0L7X)A=53W,IP?#NSbo;%&[8=eRNY0[#\d_(J_j=:Fg-%e4-QY8to8s&Vt2.qJ@EES?C:*):<sMNlNuU67'bY9O4(0-%HO;SE#glMJ+FHN+]pRar]Oj;q2:sh9ZUtPtD)D"ah\M_%"\Uj55=m%0^;%E1`?FULTP>c!u#)I5*a'V8:k$96<HJ^/7]/f6(C^%Qr.6g;BmNU`PR8+m_PK]9Yo;7pC,RCSl.DV7Vab1K0m'kDoa?>WU6Kj%jb-M4K+PqAV2[qfKXt$&g;%t&SdCuN3mn6*RfK0;B:B=P'Hn<^.]!90$DB8.,"dA'8.?o<$t+#f+lG(O\hu4p8u3480goke5;gR$%MA4%H5%ung9[jinpN0>F0NH-89nbGP9.&6.pm+4MlRjh(ZgN@hPp%#r&G@/s=DX8=)AHeaVV!#Z;5A"0dD.4:J))rLI4s9$MU;n8%R:G/j`7n<0?6B@T&=pjnLq[?eW@$Y<)W!l<N\ZV'?1pVK`0=.$N6WM&F'TXIN3'<KBZsn[Yoh[q>=6<`<$Y4ONrQm?(`B!l!frS7%.2$la?*_gh"\d%Z%5Ld4a:0!G+@H:>2oE2g6LZkL@Ciq4U,/C'%26:5:^cRh7'BoGdh88d]4kJKLk<lekff1i?USFJ)MTYs!^NDo%!Cl,1'V[R,/JDnI"s45H>:/fkB%o9[WW^]Y![3B=;M8%DhCD(I(446c`$)0"enqI(8f<oYg`mWVg4?e&$t_D_>QGsuLfL[ECpAH9%1Mem9&fVP%q,WUde5@b,[_cFfPbpWs`<U5;CRQQSR%qS&**#d*`3b3#n^*Cm;(4aM$?ffpPZi`KPa^0>A,$k8eD*A&UX[es2_k;i%;/4g'#/M]FNX[iMO&?'RV;0,/e1bhe736uVd/[2\%oWRV4eZYZWd;QR]4#G8/Lp&e$WD]4Ue1>&O&L\bVMbOC9Y+#\;6,l!:NV:L%%`4`<emBV[W%AnBHNI&T%3l*="AJlj@DJL/JqUBZ!]+pN]RdTn67.L[4&S4mW8,=&&9n__L!q"p`>6*c-@BnN.EB$IcIB["@BhS&%!W[o+B["\!&YS^Y+E^TP2-mW:`j$56C?lEY13()d?78(SPIFQc*eTkg,[r3.e^+Lt+=9S41FSG!\(ih9Hc5Kj`<u1M6;'mdog5FY%0HEKO)IJgb3ECr5LS^ql8+D7=%"V5"#dA$qZ4"MCB\Z]<"Z@eS<n+am_Li&g#8Tem?q+"Ig;r%L;&'D^.9o1C3l'XYJj`BW6i\oF%7q._A:m>ODL?kTh-T7_5K?^VsJIlh!;sJF37%u3i*9o:_[F@O-.=Db[9i]TBUTM8YpC*6;3)Q.WRUtiabB00f$k35jfE`hi^F@&%%)ds6K@!*5Q!!oue.$dS%J0:/W\oJ0m6KNr^ZYX(6P/nDpB#&1CWsUCWnCdnPBK.of"s;"h:o0qm[h(r,U1EJpN/gaB*A(TJ&C_n$%;h^%2\a`?\7e/AV#>8_-@Bm3ZLbp9c'%)NYVs):eT[m(qR'qk,W1k*P+H63FlZ5Za=PSbMJGTOlUmg'g`5NE2Q5M6^n3A4p/d2gJ%:.+GtFAh[!JLqFeKN*%q5rC7Z+1j3?NUI(g'GY&f!MYlF$u3l")P[Jb7N`P2J]0&O7>:uo%P1\8:qd5sQTu\e#67bd&V,g*+IXKO%PZT]Z8Lt4t_58@U_NO\_:5s3#0EOmu*.kAnMCj0JiK>6]%LZR\`[(rm,,!:-*Gl\rUT8KY/DuWj7&=[*Yfpe]&%E0;?7'u&/kdYF%PHYa,3<TW/&cf.rCCp!c=Z9oL3?eW8RK9'q-5KKr=IpcL9*+pV6P,U6n.eR3&fX9'``BJDk0oG0iY/&%'K4FO9P4SG=:KXbYuHBI%QA'0H#&pt:.*n&n2?8[#+pA#JTWe_jVos;b!<T0?Tn9bm+c%e_[O[Rd(^(&<m?,sn)j_8s2iV1-[nO"?^`3@hJo_),C'k$.E>OH>%0q<A)&S>b()M&_JQ5/i0OldsiLBoW]bp//a$j0'1##8lgY'7[mZ3?/I5`Lr&\.CP[FG\EtV;PN'5YPJ4`7_CLFBfIA`<IF&i7u=\%FDD2:!;jV/P\)ZN"KDHr_?)]?JM<'T@2d''.7?$*U0BBJ0_qGALd>9:p)XQ0J.YQc]<3+**\'?]>>l+Vpmsh.DR#F"K`XMA#:*Hh%%a_Fi$(5"M<=&`%g4Yhs(=a*%7&U;h++eHo0*hajB;dX8/&KXk#)L,u%Mm/85_G^>E!9I^[clQJUc_SLOo]AH`_Ak.W!Is>;<1[b%#$GU^;%R%/[T"$(UPoB8#_:95-4YUY#^r2J.[JM%\X>ctYf!1cZUj;7Uek9\^kh07FjWJO!QDZfd;CZs3Y4k0#f^!'[fgC//GoN8%%Lap#$/k%eZ3tFjN(,QfphQ+4?lOr]ifX"8$:88Mr%0U&?Klh#2(1!m70#_pU$PcmGgQRk`C/Q,5-iC=F(I7c9VPnc(+Z1JS.bmW%#6M(@0A?\2-^Jd1$O"OY`&;'<e.H1qE8<Acr^?H!ZkVpdKAA:$LmL;!\RO*76JPulXY5@TBH$4j_I5bM&5Ap(O;.&NUepRep'4(G%?j%ekNuBXq"2qP`,uGV@+q.]l#K#tHfTru\Q$AP'%5<>b$Y/dm.9%$:7W:!EW3#3G!!/a"%BK[G"V=&!_GH#q4W8,a0Y7%Qdlh[T%1*I6Le5V4^d-Uu>U8s729q)cT`E&HBl<!MY>H"g+nRNc%!<!0aK$:qPq(rBp`29FHgC&b)K_@Z$B8X,&2CGdR2,+Vk(,?ojEAD;Z%eY*HUU,4?HNIacT.>eu5^83OocjZ]gieXAS6B$DHd2(se_Pjk1k8<Df:_OC1&HHW6A]%FPBTkaGH7D[]`!e)NBAnLVEu3LrOpo8h%Rk#.8/cifp[M2!F5!`UM&84N'ViL_B#h*e8Zf-TeFA^h:bT@j+A7Z+Q<+c(_3<:7dM.b<_"@=(^SOkFf9PbT`3!eJ)9F)&T<%q[p%)^GDm9]1knnYd.29;^r?i&([?8/4cH+Nk4+#LQkpr[,m%_ATh<fdb`ab'FNt$k-!V0h$VD].EJ(#A2Cq&?&*2eg<*n2;4L-;l5<B%?]<=aYSi8M$:MS[ZkRZD6$CWU-lnhP\e)f:WG9.F6om"NCtf6C,TWj^@a^IUW#.iM#Y#S\@.;L)nU4s+8jOCsq9Y.r0m4fR*OQSL%OY!NCg_tcP-:SC^Zo=-t=\MSC7"bK,C_XC)"NI9?bYD*ajFbjL-Gh<*2_!0#]'egeOpqm,_[pH?Qu9Khat6'6^Te"jNHj,+HGesW%@)U4mB3%K=M*"gV%3g5UEM0,g5`"HnikAq>7NGEqekQ@]N/XL081'"gOQ-(""!AW+i8uei>Zhm)+:n_CJ/+n,n:dQ_$Ye)n",K]D%&=c<,?_][anMOJ#d&=E*`m2()Kt7L#?[$,nJi*n^KE+rt2/IMGe?l#V02[]skaG+?JC':a"@B%YiNg:/0Sqi^Zk!_b:h7"M!iSPc%Fb=8)=hO2aV-Y%JK4-4?-Q2sh,n9?H.+'e@.HQ*uVM\uMbr2PT_!&B9;s5t@LG^Ig(L/AIl7(?k9(aBMN%0+Bd"$sqfd8LeC_.@#%%\%>9-P5(m$kSUpEZ;&IFQ#hG^hi:u!`C0GA:Y+SCBo(%qqI9Q,H;-(<Cobo4a1;`"J?=;&4ZC893@P""<#Mn!"db#&s_5P_0H4u%`'O_c('o--2Lgc+7MKIU=Gj%7j>Rrn-A"oq(EiLE7T[1?;Uc.@#N%p;0bI)%&h^N`8M%Sc^c##9;o]5g1OTQ`lH)UShJ\l7`qTLT%pFSImj@FH$&H@i]#,K3pS8WF.$B+tE'%!BWN-7N2<Tk#+[p*.o:d]^c5N`mJ`c+^I@5aRE9qh+\l'F4FNCK[+^4UFoIbjmmB2%&7%."?9a\1jj0==GB'$#+YN"*0RX%SF@p%X>X!ZN4T=Zpp<),JD.oeRk^%&bV?#WGaYi^u/rpO`tR"dlpT>R2PM2(fMX_>7A/c7N3Zu%$Ad2>\n5KW!jGpHR)D0VXrQg6)c'GG@G+p9dJjQ+R\g\<+rbgOP'M\hJ'_TIb>3oF#\Za&s,!]30t8$$X7JB6O).,n%kXP]$F_'D%:S]>4$CM,iM2*L'WqV@kZJX"><rI9<`S;ph/1a,BoU)CDMB!kth]1c\#it7C],9<;4p^DPT*HR^Bbt1JW"('MP(8\f^5ZKQG@I8P%qlgCT3=.$h>`:4(PsM.'3XK;l3k$p&Op=*DWQ,Hh(';U!](XSL_u?CR^_jGQY.O]!Jfnpgchg#,1fL;NJCF60;g%GIm#T1q`\j:@%['p'.N$H.&NjoiI[$Rod*_>V9km?R/F/<`Uc;Sa#M0h3>D'3r)ObQYu;IClW-#_(UG@`9<hHak)&G_&Yhs/2W%=P;!GPBlonpI;\%[T*Q3WHmrN(Bg'[M!bYmHE86NPH!#Mc64semZo)i%tOo=`sFpe"FAI-i9Lpc.Q'U<?Rp]T99pM";?hs6#(`;Z8&Vj;+WC*_NU`D-%<@]B]aqJB8L#ip$KmaMJHtp9Bomi3>Xa23Gb+);%9#X6Ed3MK:b(R\+np-f781$J-oF1C"frjTT[LFG"L'cn$"10cND[sYTQ-Nek%XN;'B8/1+96iT>RR#6-Z/B7"?No%\97Rpo-ZR#qBAn_d4qC8/\-nOj2CgGa$egct<6n]Jm;*Xm_CoucT^b=Z?&R2Nmc=>5F2f@8H%n[&ZQSHVe7kA3aYk&'25k62WYGIR5m94%sP#4Wfkn.<9L>=i2a@lY@NZk6\_)V0fNR;u=Q)A"_J@odosWLFsEaZ,&>hF%?R/g)Mp%D(P(Y`P+=[c;dTr_%unLl]VqJ(\!B(9_QHke`bVfNUdK"VClRLe=s2jFj<"IRpOQ0R65)r38Z#S`ZrFc;gHJ_cQ"]#fKkk3g1.Eh%"$)f/=6&J@WHal43NP?5\XGm@P-E0\CO492%I@c]RB&W?<2q`B%n<t(c!1\b\+lp;%J.bJc%VQ$D)56(HKE]%>WoY]cTBnRk9CDu%>!1_=L8+b?4rNj46M;%GL@@n49'B6Xas.$(n^P&s.Me?3e3G;5lLSSX#i/Oder!6Jf'V$X2^]_bRQq]#!2N[Pf>S`!oeZ7a.r%!a%j"fT@cjrMf#%"SgbXq?)U\>XI;B3D@[]f'7&3N(p*(;$6VgU_*Ts6q1b`.T,)G&-E4?IZf+l1XN$6f(X@0eA;a:_)#p&S+oLY,eC%^H$,G^^t>K$_rJ$&]PKT#ef^b"u4Sh_Amm(6!/ZJR7M#NRL&(4:63+P5[#2ZO03u\UkT)r2Zdu'&J=(P3t_.L=+G43nB:uT?8oW\%Ds8d/0b%:mDnPGL@EpY0#/;hSGi5\m5$nks6@bjSFNu5*=87;Y>l_7s!ML,5KGSDH-\l`XL%!-:)WV_8HMmo=RlM%!C5+1qTF_@H%HO[30f+]>6I\p8fJOG/G7LMLH`1NY?[;0nkW-Zn4@4hYD?s`#P1>V\T*Uq&,<1oDo;IgFB"ZeK9%11[:kdN7YG!K3kQUo8MBNkC=%A./!deZ\LD!fU1c+>b-Mg6:RDFQ$]A&.tbUc"Us9p8e$&\aT,n:+Mt:"(O6saG`7!pWhg3C2Lhus+&Tt_';j(dr3Z)>iSBEo`0`q%LFWteMmc20"+8E1U07(Oi`[)12Y#BC6m=`U1rRO%1]TAcF$?@.JsfA\T_JP39FnL(gXcT<GrYCOkn"XPfS]SQpkf-Po'-7qG]to=%f<XmH%Y.@*QmnZ?(1PIMYq3U(NE_f_.k$dKqL^C@glW'b7CrMNi0;`-25.8Ukp[I4@O=EajdWj?JsTnSm"\bqqZ):A[`#F416EET%'/`K.36=2GSq`=b[jk^I(8BLU;ifU9<QP8h8M#M7<W9Rd+7*WF.Y4!2"X=kol2[U,"PAgIreP!H_.2KB@i-DfN*U^b;s4ueUs6Ra%RlFn+ZkHP.i!b`QKLD?f5S@$"DQ7kjl^)!I+U6PE+Ql8Lgea,(JZXDFl;qB%hcfR4Ub?E^*NjenH6os',2T`$#!AkR/ZQs/qg<O5%q>mm=^-;gm[m%?J;63&9SRS6=L%[+b6PumLPkK?6!HMpH9d13>66]PfF)H]#FQqqjK#_N*FJi"q#3>l"`FS@,@`B<>+e9;$nBI<8%3/I]ig>tZ8EAAcijBDdL8Ii6hG60c64+=1dUD'CH^f)^c\"aBAqn2hDZI*C.;?%GYWkF)EE=!W=ThY,;NZkAik8YV@1p&jQ+)D!\%2b@eTWKlokP(CiG5]X]`\.BnV0]'-:8]i4P)DQD#l4NZ8-+(3F\;UNa:)Ri5O#,+_Ie!K#cr8J,_s)QS@tdX.6a14H%q7Y\0cTO!%I&\$]Vf!K,E""I@Qih!65:&LFLr^[S*t"Z+n,(LPdY[DFXqdJGEjVSDZFV):EQ.]I(ZlB?MuZELTjOK:,u''%g^Q8^Pf:3O7`Wp#%<X!i8]T;e_rYk2*j==J(2+lT[_2^6_E=r1n*=UltU\F0N^gcHeO,jYBn0B;,i`VcZ(\sm0DnHcU=K+43G`_1P3apLcAob#D1$e]=%"+M'uk;aQi(Clh%?5E`V7Tec-K:3K,!`RLGL]\iQk:(G\f!4L+Km\fZ4ck8G7*-sX+;HWOf[O;u>\:`j(e2.3q*Vn+=dfFe$33ig%.U37j=br2UFWPk:MNN5D+M3dc8K<Ym?-_RjDZ%*eVIU.Gm5q+"_14Qa2!i)2cf?:Tb-X#'/W,"]OWrpJ,.R2a(#cL>;(!#d4=N8!%BVLiLjq_`KHRk[APeB5;Pk5_'LQ#W:A.5u$?e$nd\V1/J9Rr`qi0&L+/i@B9)(+2G_*msANq08T+*`;G4WB32(doh+I-?@]Wg36*%fJKQ/V%HoT9"V,uShJTrB\BN[CX%;9d>-l57Y@Zb2;bFg=j.-CJhIS0LX>-NQK/_.r]Kgl%Y3E:FuQ?]&qVa6(Y7^J%4$osCl:.?%aM@\6<8P@A&'c4/D,oqW;pe0$52h!SO\Pi@Xqc!a=KBZp"Wg5^D/%`?6WCR99>S*.S@_?s#52;k]ugueme4CY5^[AZ?gS.*a`8=D%dO:s`;V!Ai8-l98L.V,e+:L%LX*"4Or<@)rSOA";Bi-CL6&9&]N.?i*6JgTX/1Q1'N#f"_'?7c'(nIlbSV6/L;%4c/MgRC<FO%rI%X#U)fg'^"aWV9smW"LO;Z<DPg16,c7P4e[i(hH.9nm)8%lt)tTm[+s1&%oY;D!8_0_dQAhpt>^Y*c*iJq`8&D.5@\D;%t?iP!uLu%[C5s3%727F[(*f12#G7"2fJS:Lb5)%-pir]*:h?&]TbCa!^gPr2Y`(YUH9%RK=q!9`Kd!9VrC$u>i)/L3<M"E+?:@1CYb^+_]PS)%DI6aV^I.^$#>rn7j:MVOI[`SQg%;ZqUt7//-/-p`61-itSD]Ni&_I-8Up:&Yo5l2INT6g3GAG/k-2\BBqLS.0=kA[7XC'5L<[(rW%J<gZcKrJ*qCV$hsntf5KCrh-8(FET5+r*eqZ>h-!Tct!K%sD^`(t>p=n7OS2BVkr&>B7a2mPp;?,[E&5&Y\JH5g2\STUM[76qjr,%GpbsQ$SkNl"4I6YF>--h+:/NrRZXZT`g\J*8!2=3KtgGsJBur(0]CIWgP%Ze3L!J&&`PlP+Z[mI3UDJ7,KY3Z$P(jRLJS*9(UY\`%G9-V@W3TJ]]_$/tbtcd[]F\ZLG(T)mg*3Jo7>EBNP15'3&s)0eH'?f3HG=ALRaE(GI?M5*^H@7oA#8jn_:E+R#SZ>$OhM)n^a0SK%9P7=aGn)[`i!qjH"%cGQhfKn2XYOe5CBG#99%hrQh$=;oPNAd;_L9Ih%r&8Md>cIiS:PN&ZRKCG@.ZkN:I*S]5=/aH?\7FleZ*0:%KSI.d2M>r(h]-fS%*0skZ"'[q'@g#?/So;[+)K<Qm!p+U1";BQ5)-j4+:UB8Zsi0ibsH*"*-CTL`aBMKdRmj0Eq%PlKc8j[P,9f6%@s;%s=TYsDZJWRPpF@'CLh;Dfp-C6AP6CT[E#Pq2WbDc\2]\hEWDco3pfC,Ti-9,n^R?b;5[I//[@!>`c+5XHJCrcq?i!6UVuMKj%Fl)!qL/f5L7_UQkV*qg/\>eG0OMf"&8e+]6/n3Kb,ppR1SEbCB+f(&RaG8ReJeZdJfoF.;Hk??AVh'K7j[Soh+kfLELi9DQ=b5;+%9+mna]+/uZ&7FB*40gBlZEUs/1epXGXs/>0dl['TaT0ZB%c\3MOVFZmXm55rpHZY2P%NB<\]X"#XS5&e6KA()TV@;:Q>Pj+A.H2m%!oZMRj0E.'ER3AL>C;qT6hENXnM+L(2`=,h1E/^A5Afji78eSE+.64k)ji]k;L"!E>Qsc!#>FAXZ[n\;aF-H%S)oIXoaP%t4>CK<%^9D=A#*OkM9`mA"Tt>-i**-n$2U.@',3(Lm2k4_'5iP?nD::'S,>P!iLo-s01/3D,S%0GnDYIb3`d5ESi_@l2p6RNmdr`e(htC[G%gG-^c%7('/8C\UaJ:%sh^!q*i&+[+&*_%aT,Vu1sNSPI3&\DT`hua43d"-9a:>l"=B8Xifn>!mE3+j"PeJN1Z4!`$,^)KOS/0O,(%;!J$U4TKHXj2mqS_1E9+W.VfO?NYnHCG%b-Y`@6sie;d?jI"lL[>M^V%RNE>r^lJ]8CauaJ?u7/1UI[K/n*72i8fN0;SEc0b5o)c%ZX42@o)\PNN2^gm/N?Mq>C+VH*>6SPTXWeFV5,dX=c5&R7MX>$SB8#0Pk4)fS?H(a%2!RjR]3Gjo[adeSbKocUpnIQ_1&R16&^qm%[W]Te'H8E*AfVM+I]D;Bpu4tJ1rG,h7:D3M15-#N7)N\]#N$$4'3(<+!,Yk$8@NFY[#^"JUh04:VE6>@[S'>GN!$rX&BcX'cCa-l%kJBF$KfM/PA.dEP]tA<O`?\Mt!"pVG:OHp55t%DtP!HqN$LJM(L=?->AEq_3i-[CN%*c"8(nCcb@_L@,IXg#9mLfCs7$Ln8+*\X^%/,FsRT`+F)$uqm%.Ol__&ObLW8b&%;5T"_PUdUYu'AQl-!tA+qf75\G2Zr<S[fN0)4HNG9Oq*FB[85>?BsRe9V?.#H$98<4Ll%d/%[V(Ar'n!E*:qRA@M&"_ML3-7`Ud7`^R`sIE$P6q',8!8p!DZnU$p0OiYHemkLI"]=!qY"TjH/W"@RS=1oaZrKY<Wq*PMuP)j3W24%[CHh\KdN.g(&d1gV'CE!YNN9EDLX[^;D5-^o'G@g<1LK[n0\67PED9l*^CRJX+<YX)`(`>/WdXG84"9t<ru\l$dlW5F"@,g8P0FV%hF2V$:L]QP`d4JuN"Esj-sg:-4fNm`>'GZ!,3ZKifN[a`%U*`PS5i?F_d>bL%<AO*_f,d)OFW%*fA\J:*(Yfq)Uf-!>A>@j33C36%Q-?$Iko/o3<`0!WpU:SN+g9]K/427o,8>"qd"i"tS-j?V-lbNQ-IEf@:t'k5;?+Z37=_0Bk59'8PZGs-,?N9ElXg5%R6cBp+e+;a%2*SGE<`K3Pjt^g_1)GDA0Ztt#HBSG(R9Btf`HY'a1e@b$@CbIf@#'[U*tCBV'9ibH5.KLW,nN;/[G*7%'/=f6S/ASV&]%bD3sf?,%5U*=$5gkdshmmS"qLP#W+EV:#gBn4)%gu6!4W*uq[DZT_We1TO+FfH?OpG&i'!U>7P)3E]!<d0OIJ%sa$+$8Z+3YAq$/s?arR'QB%q0L5'"%LN(_ENXh4-$q-lpPJp8Q9<=b46=6OLOV=i>W1O%iDY6!9p9njDKb254$CH8&:"fT?1leSP`K/FrCJA>OB6h0(hOr@5%]R%qM>6`NYUW2"-Q2MN$-,PrKsCF@n6GE&/lX8e7$h^8Tb>>pQtK!9baVCZ3d:$%NN'Q"/-)a&3X'EDt,#f1GDZY9bnese/6#tGX]dI%2\4q8^2\S^"Eq2)Of>;p;p5:l'%fQhN9\IH.q$R)",,8Q+FL?:7oU70$p<LMIX_G8TbMN&Q-\`37jI8L(pYb8@AYrC+WK%s@>VY@%LNSWAa#1ebe]N(18hWZrlA+ZW?'O?TJicJWm&rN@.'pPFqT/W7BG5R&%?LoEe_*Q!*%+==AOh'H_tk5dAH1SS\-GeFU$!eQO0?Q2%X_aK`4M`KH%gj2493Z$3VO(45rZpIRTcN--'pQ(q?fI%XX!`$<.Y?q)=+M8A:U@nI[akcdHoUsT`#/4HJVeSBEDBJ9B(:*Aot3D1%.(89U@:3i'aq.^u%iLKNj*$e;Sj:(hOoUJuWY5k*j26MY]OO-^J9UX+#csLJd:faGO?([t6:S2SW6!4Mcj^9aNj6'Vru@7Gm[qYb%SjTKVd&/A2c5JR%;`j9Q<@EhS&e8L*;*VsMCnpo+U[/DfGa+$2j--R?AD8)$1hE/u07_P$KUFiPF"8hLM#,NBG&)6=.>9Q\.@].]%9JV3^P-I67JQ8iI@-M5"B-s!$&1ghYoOe4KZ,`!GYC%Ypl8du5MfN,;([7AU+W\KX/TDDZ@a@C)pHot'LH0Xj(nMT%VL[m]HL7K%%E4'Pl<B1=lNN/PnfPL2b45f::-f0,Jlf[VKM)9he1_=sDlc/E#3*M?nbqKEIgd2L>[%crM-K\cDDs>'N:DU$?R"XMV.XJ[IU2jEt%02Y<,5Z0r#$CM#FmboW1ZqHnULtmrQZ3'ftoMb["4]CQRE+I!$fR^9c]mC@<F=H"`6<,THM$;WDD&e:hM&^]CAS&I4K&Fen0cWPB%<!"85A(&3!'Zmp@3f7#hqKV<nl^1Q3L"eoqdZF44%AQAPX&qGdcR4["L!f!i@6,&>.P6U2-7Op7O\CmKod2XAV/ugZjG1\CQ:M.0%/0Y4X=X<KQfuR`PS7LM)-63iXF]o1%Ub72;qY.H&JS0apnHhX*S`H.)CeKCFOj$5qbWkcWAH&J>/2hAu1KD457!\nGV,ep4T3,F?%MoL/fPX,q4i[?9Rs$FF;I9YK2[2S1on3:"kh2%0[13V,RG&_)k*VH)RFerOurQA]\_D0.oeN,mG5@Vts6RGa5^/=E@*i%T44Ehaa%>hmi'kjD(IDAZioI%8r$Qj)ncf`rP0G*!0DZ=$dC*`GJ@]h._c]hp8smO"m:`![>$;L&r7,<LsoQ>HmupBbAi>7q?D#hG%YG\=c'%Cm`.)7'3G]L+"@B7NLsg-K#WbllgN@m`!;T+b<]]X`jKn[3qlioZn)hKnrQ:g*Tk$o-RWnM8r1Zea>3r7-B%Y9qasX8JJX!M0G>,%k-Ea/L=,BPMqL[>p"q[V^(]N7*5Lb)pU:<O#/Z"(No.[9N//Ro+u3`q1c.'=:E'Mo@MlI`BCCXn%F`&0'GI#+@5^'a*chPX1^I6n%,`tNk$<]RIQk]d#Y`rL"C-2sMNV*4S\ZkCqQ12M%fDLuUU/YVV%*^*,B<0_`P25iMi?=U`N@H^NAb]V(_D"D^[\rY<fOGQiE)mp"%bN:bL>FfS>+$uYlRU'qf+i"421iqlHQW4!BL60,;NEK^gP<R9220I+=;Da:R&99)aY@`Vo88MQNX'E<\_M93p(?n0nACtd<9pF3j%r/A#3&EK_nT'0cPW^mjVS[ciS_^dM\[9509\q*[T_^_*4OkHAQA\>Hf<LpH*A)P1)/lYWTeXeJg'uk97$iAjsaY85CC,R_\%*Y$`%<&ADHW<p?Wlp@+-1I3p#G>b=%6Y/s]3GPmLoY]YE-paqB$HGu/T+0c-]Y@_hQZ.$cqSKhhc>5"^_`+($O7(:UI)AhDfV^oJI$+(-%8B.AcD.$NrD54,<F!MK@'(URS6*6HTUXNXcOaSG-8+gquAN+0YCMo*KN%N8tY&8PT`h8e!;=@;s$?^0sSPC<r:',[cFr3TtFeiC<%/c4+t-B(YL_#Sa2335@iOYP)B4d?jr`=ZmpAGp,8(@<HDUMY!RZ9,V[D20],L2U,]ho-?Q#C3M`?a*-=ia_t7D-a$!qSlhs\oK]a%6j3*,C;sl/RqL_7i?+rmJ;;o6doMrMUeYqkA8uV!F<<;>4&!Y/!nFfKmMc.:.pg51NTuFiW]=a1@P_"ko=@WGS3Qu6VQ$!u&g*PS%R`KL00@!PAg\5<o-EZ[m)W!ck?A<3p/M0P#R\?1^m0K1YqL4%\>T6:$b[$$p))#G6!QUuCf-;EK;:k#G9[451&#u06R>KCD1#Y0)%1.,QG3I+OM,E`"Oegn0'6I7BYRRQbKU7Hlq!h+Ynm-"/TLMh)qfOYqdE_OVE.rg83njl_LBnt)Y,3nK8VaP&G![>(f?J^4S&dfdJ%pT/%.%<s"Y'CkI#N5Rf]ISZ(/1s/*sN6:>+`ROr8!5ik1en[U23!Wihd4j$!'8W(Q(+YrBJ]4VW;4)sHr)$_";7DG+Uj!&2Zug<t%>ckl1HO:NVP'JJEW\i$Q7NZYmi6P8o$UaT;FWT"`i=L;RW*`^t:TcC5DV@9i>OgHH\$rpg^s("ZjR^\paX0-7O..@A]dKP'I!"%F%.0NI[+j"c#,MAu/LF":dH760/q*$-hm]\#>\K4U;S3);Lopg'3Y;773&I9-plc#Z\Cu'i)>2:5B@^(VC$I,R[Zkf$b2Gd-Ag:CJ0%WIkEaLDd"hn@V\baj85q<01(?qd@-&1&]1In3+RCiimIUDNT,DY"Ln"nSP8u6()!.c`Z9D_K7IYdN3Fic=BJs(/8$lh7B$KD/LF"%_Si*@09XmG@DUu_%#'"*oK34BdI`I$80nT'ea'0E4C_6Kq-_/-I,#^@?I7:E@M6'Z@]/cAoiQ8(r4/TWWQj]D&p;maR[!?5.lERt%=ZMW.%e>fr4&UZO_K;oW6NMUS.??r'&%%K_lX?,?C,Vk<"f&sHG*mnR2??s>&Z4ETQ2X7jA6l<[%!"*H8Og%LTr?Wb+pMX*QE(b/%=Z7L@VGYj;d*Dl[oltsGKUDE>V(8n6Sn6'@f8^%0B7:D].@teJZ2.lJb)esu\r*ODa+mZ#r5R`EWnPCUonU["175_Q;Kktu^M4'a%.6kP[WMlM%a<Y,s/75Y%@7obC&LO8R5@LLPCXj"%bK6I'04Z2S/i1s9Mp<+X,qBmuPiN+iC6m(FJkCMMW!]DXOt;1YqqHk1ZDIo(%XF;Q'a>tXr-jifXKGaem)7),CbGe("@oh*<au)@5m]aJQ;o>!aS#&n`TnF_mXi>@cC=!:'!m')`MMu8l(=U-\K[id.Zfhg?j0'kJ%R2'o3b4Q"sW&gt6W\f*6[VZsqZ4r8)\?hi?<RQ5+=h!'5];\r^8HUru!BJ\l@PmQ5T3uJC7:Vb_R<`N\"2l`lE_kf?SV,g*M4@]p%P;uj0D=6L>,Vl?)AY9Mrj>/6BenA07*MsO.67cF$&=7cSOZZ:#4HsT4F]_f8',ao(<GPUJG3-$!rTHboN-C7]_2"Q"R29ekYTpKW%]Z5n%)WO)i]Pa6'OI5@X0V2oW=k8O?-JtMkZDpEIls6\,K'?9.]0;Hm!+]N`XK*'crq2]KpL"H;cQlgGH2V*;s$FY"8jh2]AKQA2%jq0+6f*%IYO%FdP73G'D=Gh3dCZ#U297NLaOWnOk%/ImE\"e\[<ECb7I\$-k:me^,96W9ED"j>_ZH3:PjA\Ju+YXt*2M@u\qCSdk%ehgrE$X;7ioq`@=m4H@pl?_J9O.`XFZCJ[?XC1?]1Uu)@:,ZQ"F62sAC,PM%7HS3>B[?+j:\_YBJVIDn+!.cBnL@7IBqh!ZOgQ2k%F7S8+-kW'^#*o="S1aOK$U@!MZ/?<#`Pc^/Ym"]"1Z,2d:GTX`D(hkJGJa0HkEM6c)+23e63L=f%^R*q08)7$GP-kc?Y:),LW9lt%j,(J'/O:2:aUhl0U9nqoE%-B1MqX&'4-,g'W3T`<1?62;[)sp4[^@U<\hV<KZ@W2T3E7:(^GO+lVGtZ&P-*X*EC2Fn0pucb3JmEM%+$(EFmZ=1`eqC2UR[l2gRF\3g8Qnq;*TE[XD-Vnl5T/@*/!_gIQWRMA8.XWX10#JQ=90B3JL[d^6XsZL,*o3^0/F0R)lZn-SeOqZ%AVP_Kjau_3(BP%&#-/Lh/=HV3_dd!0-Sd7!3Ube*#cme8E;g]\@]@nWkZ0)kLRGH]>Gc'V;ie2.#%4G_"ee!LETU">JC&\0UeOni%LkrVOf(cg[7GWUhTr<RP7h7EKELS7t6a:0Z#=fZp=koDfLkTo2iY&u>^MR(LP!+1@,RosoO[7O-RhMr,c#0L+V[1S6WFTe`QR*iX%8_!567A2itWg)7M(.tSFZOSmI1+P<>NgTQDFVuN#WcY,,]lo>aS-f]LHk9-=.T"4YpAh:*E)p!*PiOIqNE,eQHN7Pi'UE`lcO@<c%A\#.$i/lPhS96U_P!H1h9,5WZk&,cQeW)!i.EQ55=i3;lN3FXG\&A'#Jn@a$@VOb]SEDSkH&WPq=FtgaV*Y+=0,HpOUAt5$@FQYm%,Y!j"+1!6!5,0Q41^a?Kd0_j8nob^(4?03!.o'a#b",fX=Dc<!b[J4",]B`L]N/T#Z`0tIVX9M;_^qo=9Sj_=O.J9kct4HI2J#PK%Z]M(EQ=A%O*a--479RbmOj)NLa\jmH.>$@mXSc^oL'g<p[7G,*H:bi,hc-527EJJo0q>T[h<kZlh/[/aGGZaJ$7RXLY_NXmY8rOe%j?@8W!*WqakjJh2H34i>,M;kB[\1ad,koH<9H-p8V!7C&.Q#ZqQ8]jn'0t\gJW03iP:_1]`AOk1nPXqOTsEb(6DDb'oeS.e!mEe"%&2/FIM3]M1`t%OJVHu"(p(0\`.q[I)WqB3-1`'"aA>hu)LNl&_YVc7T\]Q9SQ65%>jbjf_F[Y^S@5prXeV[<GN:I$<5@9EV-SU;"%gJVF"&?mf?g.*ZW]Rc93+uQIo+@sAV.N;i_C52tH8J?Xg#0>W<clc=]!lh".Ef_+OX)#M.M9@%m@B`9)r@aY-!9mq7HnJ8TAc0T$%6>\36^]ub?FJpp7(F&!^b-D5U.Y>S%QHX(S9VQtmL!/B,fAG$7A'\E]B#*g'jfr<mCI0dr\n(pN;5Gn4Q\ld)9,!ieMbTFI=&eHo%:=X$4V*a<[qPRre)qQBZ,*nM,HtpS6H2MjRQG":S3"g_^"@5On=<,2OS0Z7FO+M"qU$t-O!Qkn1W^5i4'PBjrolDY+l5C@]/))ah%@=d[62/+g&LUI2FU`VI3D'Z4X\/1-f/=an]F=CuM.rq?Q`D>;l9b[R0SF11'Y(Q^,[.1p+6+UHFe$E6:0Sb1Qk9K)1cNp=RLh>HJ%Is8<#;D,KFPjl/N?:Rqb$=o/D.hKa?OJYbO<MXYE(1N%Qh7i_'(?FRn<<:%1V,^`"B!$g^E09G2J=JtX6bB@=h':)p]hT%LR[2NY%LsXpq>H;ucA*86<3m.e7HsNmQ5;h-GGoX,E$b:gP6cFr_:i59jku@Bm(9Aq7LW9s?VLGVoLR8"5RR)&RUG,HLA<?Gn:h>+YOJ2`0%cN%C61*SK-&qepA0^/bBIM;q7-ino>V$g*QQIst2AX7i/GEPrWJs%^bhP2(rb`;u[2+sL1Pa-?^)IGYB5![-)X(4`L1\j(??9<o@%QD^0/IfiSkTUbl:"-*psBK4[5+hZ:M,j&Y3U?@"Q5GoB_$Pl]*J51W1"+4V,FC+dNLK0d.p/l8qo5/^tKOa.J2_<&L_ef([Q@cSe%\)cS38&JH*?P$$gk2?<\>"h_'.WH#qXG#3"MWl\\D]?X$6'Pj3EZQ?+KW7RdLMn9..oj'Y*n%a$FrQ"tXRM@L.,-dAV;.4>.$lj%%?X^u#0,*7K`r92JF_4@FHU]PJEiS6?qAEnJ#$Rt$PFf`CQ,pX151<)+rA'$PV,rX+,,#>Jclt6A$#C9J*;t]aS/ktZ\0E5p,p0^o%Tth8%AAWo@4^#C?='#GNm><)sg<fu`-c@Z^#):cB!]%LR[6mN/?Oj,(pXg!&1S]j;Zb@F%a4C(7L^YrW:g,^<Erj_S9&$0^*6?u7%Q"!@WrCeK$P_P'KbXhDjPq8aIrCTOi4J"<q>RADg+>hh6,fBF`M458]UgbjN'g>UYd05&oZagskC6X+s5/k4ln<fGVi7Y.Ko/fR4%0ReN+0V2"5<+bQ`AeANH%S&bPL<,(OP\5ACDCe==$)OTDegP:$K8e2d8CS8']ih#c*p0cVj=.mJ<QPqK:U(q]M/ed=&L??Ch<;I)%`ej1XoMnB#!ou3"cXg;sRQ-7&\3'jdGdHQe)=E,&:_Zin+V0]+<Q-pDmgE<AD?H&P&*$@U'@S5;fS<$R/:AW_ko3q>Rkj-2N&$KN%,]S#D-=\tbQqi*]C%A*J;bXh.Xr<TcM@'@G6QZH-#-o+YRQ$UELliKe%>ljE&mb8dl'@R`86u`=;._u*Na/]JU9AUrOU[5$*u<1Y%Zr8^p,EEmEP@^VBLe@'%ol"FYRfA$sI%JITL_N8cnIqI0DjeB16]>^^Vkdip*UuO*gd>Y83Lp4SX>-:KJDQ"i&37\dZO-&&nD6@D%U1E99g5J"!_O?ar9?uY?%0NG]WrZ64miKk$AVLG-=I[FH'%;%IaV&Zm[qOV$i;'5`%_n@gCVq,??2YW=!!'UD;OP@NBd/k:WucD%%Fe2I=TpU-,3Mr23#m5-/_@3<d*nc?'oSZAXlo$Zp%;B_FlDG='8;>$`)+aHY-s,_.8eWc$W@81k14/Pj(DP0S5NOO!J4fK"8qiJX%7+<fC&RDG0rsaAp).ilUBKVEo8hA*NH`a7-&i2os2Huc\%T3')F^%[O>loJ2;hMh>OsTVLMWB.ccoVHRF@X,KPS+7_GY0/JP:8j:%T)0ljq(`-2$;3>-ate)_T$nqb"7[si*PFq1Kk2[!>G.l;d^f"CUi8/U;-k<DM0+q8as%%.!t#Dt&mdZ>UI0<AjL<fsaYA13q8cd4%67#i>`=o5eQLGUJbWFUkZoOubC.TA-22R_2M5asgYEO!SJ."^X7MgQO<[tOnR$6)EbD3oBBkC(+apAZF:E3'0`#(p>f<RX#$ZL-$%FN%]Y)_.$cgIM]l&S5\pn"*?&b!d`Sm@n7"Sm<Q!YS=f'la;;!8N;lm+<NKk'0+Z-?[,O!q,5D\1_35p9)8b^B[B5k.UtrN/_'qo%#@a54YsQY3bV6<@*(0Y/<p!F]FU`(<E:feSL&0Z-8f^_+7%otoLbdGPof4sb"#[-q9+"4l65J2.N8efUJPK.<<X%$o&,!99JOmNU%(DUU6c2-f9N8p.rFcF5cJPR2f*MS"Ud'$<@;DoNF!ki7Z#9oMR,:gb6LntDI";$!.Oc1ICd?q1,NUc_a_A3VSmW"1'r6"26k%::%%7%b('H`e>6(BQ=ZXd_V$Sn8*2/kSLI_91#Za<j#F>=<bD&J"X!ihTA-U17IKL<#(Ci(Ht$iR^TD(1jp.-@>ScjB8pal,1@Wc&ikE%2;KJ6'Ld'k,"R9&>[p5<1I3Yu"UbeBh%^l^S4c-[b:<*Tg0.<7PDKAiK;hJ3-#C(&bIjln$WHj1/s7N>T\UCi_^h/Q6ab3!!ZZDV%r_XA`7OLq`jZ!t290^NT/Gm%k7fs/RqRnEU0.#`M8C?W8NP4\5Ts3J&M4'!G@;W?h`),goM0YY';Si)9n]lH/H[2\Ar)Z0g$rCCS%LZq'moY[Wp+Fr-dP=fL;3,pA8"CoTd3@3)g8^ZcY#RXU*+=2^ZXAcI->"pMLZQ%=E\:MaT(SZB!dCO8HFPZ!/Z[r3\aHAojI0R08%<]-40h1k$;](/lIk#K'U3q$8_.se)DQ\%!2kce\G-/5BB)PMURNXDf0B,E9:Z!$pp0V_(r\<%TF2!'6kNRb-hbO;^>k7tGlrdr`,%/MuLc!@<ZQU,*+DpQuO<C$6q*O_2C1;&Yl[P9+hbEYD"[O`bE.j[(e>Ei<b"*?$#$:cMsIK1<e22AWM*:DFM(_;.VH6QL6pFGg/W%V"1+ZD@<a,%onY<bYHTs&Z_)6;)i(oIRh][,.=f@^*_Te11cirF(<c)!Oai*d9W680/?HmXjJdr='DAC^F2GrN/n@!loXBGMlM#n%6Wr`?g*J=jS8GIoSq]'Ha39=4>S>8h4?\c:V3u!4/jLN>U>-0Y+0Ah<olZSq<m4-SLo/BGA$/fjk>Qa7_Hm`.oT)1XgaM`S;N,lC%JqXpZ<p"!8*Q"Nje*e,4**eprG)Vk",<V$#*5aTEJ`XM^Be3&Zpe&Qr-,,ZnS<MMeMK:7:#g4d=TX6a_?t]hSkK4t2qU4`jMUsge%c?TKV23W%)-CnjjZ?c&j&t(!XkdmMP'5%1%DL`+W7FYAIYJ,<0HG[&DB@(Q&MW%k(nS?09BEbr6g4<<m$Sl>V+>+UW08tLVM(SPg%B/*5?cT,(6=l^c9YK>bJ&eD?]\OY?Z1W#%Vl]MSc%WaKkF@n'.og5ZlAeA@dapbgQ1`2BdbS:@MAWNS2N#eP1@4'6.!p*fBcAC3]%RiKC=Q)3BO^MVW-Qo6qG,WfmVD?jca8i5EqI@P5TM6@/Ak6Mj'c1AZo!&P^pal9XY4Z7!P/WL?]Y[+OfPcbl/,kbX".f,*28<n,,%ob5oZ#ge+cH6.BScXmNYW)Y5m7PTY%Z34<Hk>A(1l$C@*].>++/Z^:d1I&)uKBZA4L1u+BKtoE0LcLPJoPR.g:kVrDQF7[<`Dki`%3tLA1qpTi5rRWtfo[PVa2<024haM/EroHAY`@l`@"\(?DVuDr.@ts@cgjN!&5ZK&j,<N06%RUDieu^X&\h<2jkAUD!Q[nOZ0)+):%gdo)Nn7bqnSF`AP>=jaV=-&&`lsKSbp5a.lnFhXHs7/(^r0r35jhLi55BEQQ7=F_bd>@[UdQr[B5?H_MqqXj-o2[-qieVee(SR4M%&eE1scp_CTn)/mVHo]LB1E#c:qQCF3?OmP=s+gO,OM=;+S+l5W'fbJoVDh,^h!@2s^VB2S!4SR!CY&ip21*2(XZ:dcOk.a[77JWh%iKn">f93=t5JhU&3ro68h0)rR71tnX6u%fRbV/NI`)Dbo]R=d.Y'7/q"co&Nih,"^SFg""m\JIO(@A<.5LskVX`Rnn;Y`fZf)t-f%nj_)p_]2PQFGKfR08_C'&UsEN20/,)3E\ZL("'KDr/0;PU!CNdm(SdQ3%/UeEFIHu<nAFF3S%lIQ+SGdXnd[]S[J=^@d[!7^D%KX%OMMc0R88oOYWM]-=J-ahbh"JW;4_jBdIcP_n*,3iI7pK&/BU1cgTgOeX`\FHf+U?J+n^?)es\`ba'E&a0N>k0XCm"T]eE5<pdMtu%a+&)<rej>EL-05MM\l*!LY;J@]C@Fu5@L-=GP(PnM1%;RS$.SbmOdVS4U5fp\Y6b!p!%94:RM1A5Kt_HQ^2=A^@5o_AK:f3((7aQ%Fr_Z#fZ#H-N,r?2R-VH*r.Joo>iTf[?GGkeD./I5X7*L"2tZc.M-Vc\Ra'FS2KlhfgTTL2s%PHGKt03-Y&m!Y!lU'[q2njBotX.l%$ZkLVlFUhM(VU$P]#4PbSL567NpP<fLH%<dS<GldIpn@6/CTitK6]2$7pcd"ZnIqJ%R(R*o6NBMC&O-koH!TVf13#)5!],T<mHX$%$ba"(Kj@pI,1@4f2t=9qmRUTMlb0a^'B[&S+1Y`:GAJr!&jKH)09Ybel[][1b<4$]CO$l2(H)3Dn#69KeagT4**6L^MKe^j,&2DP%-%'L=:cHON\WnR?\\9,iD;P*D,fmjh^UPuL)j*[i&b:`p?bDBrjaPt3@UY:/X7&OJ)u=lR"C'aFpj/;N>MdC!EnL*O2q3?+NI>5Q%NiVWWMDs&bp3n=!B&nX%R_(YO(3Z6WX6YgcT=dYZNf5hEG;LnqSc>bZ-fQ_P3oVaX,1Kf,#A?2MDWpCpJUS.c?g>sso(uI.L]*\A%G1b\KhpSX^UAP\5YMAki$29Y]V5H^,ci5_#+<rH<K,-(/^T`V))&YX-Yka+NV.,%Jd^K`^aRrhLHGXhOq&5;=oD7j4bSPHe>-$tM%+E_RsI6FYBBmc]RlV;XU`b1H\%c(+A)sfb6d;pLllAlAR\7QUB/+Jf?bB8sGC5IIo?FDZO_QM:fY&5R&kbc#h?GsB.a+::p(BF2L%qmft,.EDh%fn1qkS+-r94](*E2Q)#$r9Jq%qeEXq_j^TpjW!Jh\oh5AJ&7f/c$aS??3g=j)s=%$>o[mm]eFX`=FIZ*_*ZspB_B*H%^C.YqfrORZXSS:+%6(#-69@N9ja=qRX5j_<4Y4uUAp=3bOa_4o=h(WlnV"WO^85&F29.(\qr/(XU4$gf`2T6P_Ajdq8c/R*Cq,K4%pUu9kc>,74f_39A)E4#YduK22jCklGDX2=1?Op,g</[ZRC^k:bpZ11[r.b&d\tLe$c1#]R^T/nLP0L4iaEG)\s&tWWqJ?G7oWl^q%=0%>I`r1_<^7Mk6K+i9Rf8-''m<`V*F)I#DDS?q<OTSE8D"YKGh`[X9#<HZps"p-ld[u<_(M3L6)sTWO7QqtS_8eun,gV\f>>'0"%q6onIn@u=a2k\]FS'=:U]N=Q[65SdMHhG(V+5q0b,d\fG'_%19[WFJ#orphGR2sc38ADX(7!2#F7d)r!>IpY8F*tj50A]N$U!f/9%kVF_agb[7+p;1iSri3$fL&%.7VAOOW`JOCD+tXZ>623*>fFPfUNd(qQKNcRpK_Ye^UT]G!g;uIlq0F1^hJs7Z1RKQ^*VD#?d]GMn%@G;T:W#+u.b9^0EHkti]E=1b3BOer&A@V([b]R6eH,@!CY0jbibb'&@4<[4aeT4r])u=lR_KM/.9kA*b)n79ip>\*]J("jT@;^g\%$i!N_8Y0bId'eG_=6N6Ah8=)koto[RnA6gS>^\c[0(bmVebc)ZKjA3&qJNCIB'2)B_VBCuqp?YN2u=VD4]#U[c,B_X)=B)[Fh)tA%cf^>bQB#%t*1sHB:SI/,>GsW'(Nu@of6El@Y:<iL^:ni#Y4l,g-Yu_qDBnoJ\RonkmK?mF2soRY^)e]-YKbO4[[+D-HTq2=IRj>q%YEg!ek.(9a<P5*pq.4KT:cHON\WrNm#`mUrn+g)D^UPuLHTi3-@bV];,BqHRSe_]T1g>AeMVle4"!tC2PK2?m/T5-CcVs_Ehba>I%2ths93Ng*N.c+#%gRGiZo5V'Ic.knEKfP"&qJL=jThYZlhG2KObafZQml&0CE];!l\a_6I4CO^I]qMV79'im(VpfL;HV8QPXP_^n%F$k@K8"hf\-d7)1VP,Ykqt6nSIo>)]Q2K\$.sElLlb@fDc/8MUnj!-A&-)7e:]L1P?iK2+hL>'cs8:@7J,XB$r:I`fIfAHrpOE2,%s8;fVVa(+<O+6ui00fL*o.OI"s3&`<rlZC5q>&4+s7)/""`edSc%#>S^\^h,rpB^d$et-T~>%AI9_PrivateDataEnd