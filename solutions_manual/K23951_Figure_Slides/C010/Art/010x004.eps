%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 010x004.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 378 66
%%HiResBoundingBox: 0 0 377.9956 65.7319
%%CropBox: 0 0 377.9956 65.7319
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 24 8%%BeginData: 3180 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2FFF7DFD1FFFA8A8FD1FFFA8A8FD3CFFA8FFA8FD1EFFA8A8FD1E%FFA8A1FF7DFD3AFFA8FFFFFFA8FD19FFFD05A8FFFD05A8FD16FFA87DA8A8%FFFFFD04A8FD37FFA8A8FFFFA8A8FD18FFA8A8FFA8FFFFFFA8FFA8A8FD16%FF7DFFA8FFFFFFA8FFFFA8A8FD36FFA8FFFFFFA8FD22FFCAFD17FFA8A8FD%07FF7DFD36FFA8FD05FFA8FD13FFA8FD05FFA8FD06FFA8A8FD05FFA8FD12%FFA8A8FD05FFA8FD05FFA8FD30FFA8FD07FFA8FD12FFA8A8FD04FFCAFD06%FFA8FD05FFA8A8FD0AFFA8A87DA8FFFFFFA8A8FD07FFA8FFFFFFA8A87DCB%FD2DFFA8A8FD07FFA8A8FD10FFA8A8A8FD04FFA8FD07FFA8FFFFFFFD04A8%FD08FFA8FFA8FF7DFFA8FF7DFD08FFA8A8A8FFA8A8FF7DFFA8FFFFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFFFFFA8%A8A8FFA8A8A8FFA8A8FD09FFA8A8CAA8FFA8A8A8FFA8FD04FFFD04A8FFFD%05A8FD09FFA8FFA8A8FFFFFD04A8FD04FFA8A8A8FFFFFFA8A8A8FD09FFFD%05A8FFFFCAFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FD0BFFA8FFA8FFA8FFA8FFA8FD05%FFA8FFA8FFFFFFA8FFA8FD0BFFA8FFA8FFFFFFA8FFA8FD05FFAFFD11FFA8%FFA8FFFFFFA8FDB5FFA8FD5CFFA8FFFFFFA8FD17FFA8FD07FFA8FD1DFFA8%FFFFA8A8FD17FFA8FD04FFAFFFFFA8FD14FF52FD057D52FF7D7DA8FD15FF%A87D7DA87D7E7D7DFFA87DFD16FFA87DA87D7E7D7D7DFF7D7DFD16FF7D7D%7D7E7D7D52A8FF7D7DFD12FF7D7D52FD057DA8A859FD16FF7D52527D7D52%7D7DA9A8A8FD16FF527D527D527D7D7DA8A87EFD15FFA87D527D527D527D%7DFF7DA8FD13FF7EA87D7DA8A87DA9FFA8FD16FFFD04A87DFF84A8A8FFA8%FD16FFA8A8FF7D7DA8A8A8FF7DA8FD16FFA8A8A87DA8FF7DA8A8A8FDB8FF%A8FD43FFA8FD1AFF7DFFA8A8FD1CFFA87D7DA8A8FD1DFFA8FF7DFD1DFFA8%FF7DA8AFFD18FFA87D527D7DFD1CFFA87D527D7EFD1CFF7D7D7DA87DFD1B%FFA8A87D7D7DA8FD19FF7DA87DA8FD1CFFFD05A8FD1CFFA87EA884FD1DFF%A8A87DA8A9FD3AFFA8FD43FFA8FDFCFFFD10FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:14:38+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:14:38+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:14:38+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>48</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAMAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqluoxRalMdMcc7QKJL8V2ZT/AHcW1D8RHI0PQUP2sVVtNmlKPa3Dcrq1ISRjsXQ/Ylp/&#xA;ljr25Bh2xVGYq7FXYq7FXYqo312lnaTXTqzpCpd1SnKi7mlSo/HFUHPdalcR/V4rGe1aY8DdSNBx&#xA;jU/ab4JXblx+zRT8VK7VxVZbJcaXWyt7KW4sUo1qYmhAjU9YiJZIzRTutOxp2xVGWF8LyORxDJD6&#xA;cjRFZOBJZNmoUZ1IB269QRiqJxV2KuxV2KuxVIpNY1a9sp2sNOnjEkUiW1x6lsZEnAK/FEzlRwbb&#xA;ck8gwZRTdVsaffabcxXNt9Yu45fUe/t42ty0k5HwOxlEI4gVX4GXom3GuKo3TtTuLmZ7a6s3tLqK&#xA;NZJVLxyJR2ZV4spqa+m3VRiqPxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN5dJa27TMC1KKiL1Z3IVF&#xA;HuzEDFVmn2r28H70hrmVjLcuOhkbrSu/FdlWv7IGKqWpK0DJqMYJa3FLhV6vAftfSn2177FR9rFU&#xA;arKyhlIZWFVYbgg9xireKuxV2Kpde6pJBdqiRh7WGh1CYn+7EmyU7bfaev2U374qmDuiIzuwVFBZ&#xA;mY0AA3JJOKoLREkTTowwKREsbaNgQyQliYkavcJTbt07VKqJu1uWtJltWVLkxsIHfdRIQeJOx2Bx&#xA;VS0trY6fCLZWSJV4BH+2rISrK/X4gwIbfriqhLqki6iIwgNijCCefeq3ElCi0/loQCf5nUdmxVMc&#xA;VaZlVSzEKqirMdgAO5xVLL7V7lZUt9OtTdyyRC4jl5xrC8YPxBWLhixFACFIBZSdsVRNlqdvdW8E&#xA;xrAblnSGKUpycoW+zxZlYFULDiT8O+KoDyyp9Kd4I5oNPLBYILmT1ZVlQss5LepNQcgBxLV5Bj3x&#xA;VOsVSTS3jt72/a9WWK7jj9S6u5ZQYDB6spiZFMjCNQFY0KjiOpPUqq13qt8L57Oys2mkt/TluSzR&#xA;qGhkqB6VXDcyVYDkAvwnfpiqKsNSt722tpl/dG7i9eCGQp6hj+H4qKzbfGvQ7VFcVU/0LZ/78uv+&#xA;ku6/6qYq79C2f+/Lr/pLuv8Aqpirv0LZ/wC/Lr/pLuv+qmKu/Qtn/vy6/wCku6/6qYq79C2f+/Lr&#xA;/pLuv+qmKu/Qtn/vy6/6S7r/AKqYq79C2f8Avy6/6S7r/qpiqJtbSK2QrG0jBjU+rLJKfoMjORiq&#xA;jLpNrLI0jPcBmNSEubhF+hVkCj6Biqz9C2f+/Lr/AKS7r/qpiq6LSLKOeOYGZ5IiWj9W4nlAJUqT&#xA;xkdlrxYjpiqNxV2KoBdDsFAVGuEQfZRLq5VVHgqrIAoHYDYYq79C2f8Avy6/6S7r/qpiqta6fBbO&#xA;XjaZiRQiWeaUfQJHYYq660+C5cPI0ykCgEU80Q+kRuoxVdb2FrBbtbohaKQsZBIzSly/Xm0hZm8N&#xA;z026YqhhoWn8QhNw8YoDG9zcOhA/ZZWkKsp7gih74qmGKuxVBS6PZSTSTVmR5Tyk9K4niUsAFrxj&#xA;dVrQDtiqounWa2TWXAm2cOHVmZifUJZyXJLVJYmta4qsi0m1ikWRXuCymoD3Nw6/SrSFT9IxVVvb&#xA;G3vIvRuA5iNeSK7xhgRQhuBXkCOx2xVbZ6bZ2byPboymQKrAu7gKhYqiBiQirzNFWgGKqDaDpbSm&#xA;UxuJCXZXE0qlGkbk5jo49PmftcKV74qjLe3htoI7eFeMUShEWpNAooNzUn6cVVMVQl3pVjdyrLcR&#xA;l2XjsHdVYI3NA6qQrhW3HIGmKrrHTrSyRlt1YcqVZ3eVqKKKOUhZqDsK0xVD/wCHtKDcljkVgQUZ&#xA;ZplKAcgFjIccEAcjitF9sVTHFXYqwbz7qPnq31axHl+wkube3U3NIweE8vo3CmGZhJGFVXEJAYfF&#xA;y6jjhVKbXzP+YuoXF1bGKIJZz28d9Fb20izxoz2Tt8frmpkhnnJUAMoXqDTFVW3uPzDu/I8EdxHc&#xA;pqtrIIp5IUaC5ljFgTG/71mqwvWUOa0IUk7E4q9Gt/X+rxfWKevwX1eP2edPip7VwKqYq7FXYq7F&#xA;WKfmRceZ49C9Ly/BLJcXDMkk1uGaaKkbPGUCshHKRVUtvSu47hCsak84/mZLe/o0WVra6lMlxLBZ&#xA;mBnk9KNkj9T1DPxopdmBKUegX3woTryfeeaJBqNvrSXItmieeCYwTRzq7SPzRWdpAduJjVfs9BXF&#xA;LJPLRvj5c0v9Ic/r/wBUgF36tRJ6wjX1Ode/KtcCplirsVdirsVS/wAwXWo2ukTz6dAbm7ThxiA5&#xA;NxZ1WRlUFeRRCzBa7kUxV5k/m/8AM/SrOytJbOON5XhtLOW7hklmuJWtWloa3Cnk8yFNz8IFSe5K&#xA;E+8u6j57Hmlo9Uhl+pTu0M4aCT0lCS3zJLDKHaNRwW2U1X4g1eoJxSnnkttQaLUmu/rwje7L2iag&#xA;CJEiMaLQE0JDOrSUpReXEdMCsjxV2KuxV2KtSFwjFF5OASqk0qewr2xV5Je+cfzN0jTdR1GfTlgg&#xA;CSXck13FI8cMgtIqwonr1CC45cTzIbelKjChXbVvzU/T9rdTwObONxxjt7aU28tuzcSzosjFZHQB&#xA;6PX0yab4qzayi1YecdQmLztpD20ahJSRGlwpH90pqGVkP2lpQg1rtQJT/FXYq7FXYq7FWM3/AJ70&#xA;yx1OWwuAY2+uQ6bbyHcPdTpCwqo3CVvIVqKmpOwAriqcaHqqarpVtqCRmL11JaImpR1JV1rQVoyk&#xA;V74qjsVdirsVdirsVdirGPNXnQ6JeQWsNm15IWtjcohPMR3dx9Xj9JADzcsGNCR098VTDy55ktdc&#xA;juJbcfu4jE0Um9JIbmCO4hkFQCKpKAQehBxVN8VdirsVdirsVdiqV6/r9to8dq09AbuZoULGigRw&#xA;S3UrGgJ+GG3kYADc7e+KqGkeZ4tR1AWgt5IVltzdW7SDixVH9OQMu9KckZSCQwb2xVO8VdirsVdi&#xA;rsVdiqC1rVE0vTJr1kMpj4rHEDx5ySMI415GtOTsBXtiqQWnnsXGuCxW1rZGSK2F4GI5TSNcxllQ&#xA;jeMS2TJWtd69MKsswK7FXYq7FXYq7FUquvK2gXV3Ld3NjDPPK6TBpY0k4TRqqrNHzDcZOMaDkP5F&#xA;8MVR9lZW1jZw2dqnp21ugjiSpNFUUG5JJ+Z3xVWxV2KuxV2KuxV2KpfqGgaRqNwk99ax3JVPTaOV&#xA;FkjdAwkUOjhlPB1DKeqnp1NVVex02zsfX+rRiP6zJ6s1O7BFiXboAscaqAOwxVE4q7FXYq7FXYq7&#xA;FUNf6baX6RLcLUwSCaFh1VwCu3+srMrDupIxVQ03QNH0yQvp9rHaqI1hjhhVY4o41YvwjjQKigux&#xA;Y0G569BRVMMVdirsVdirsVdiqhf2Nrf2c1ndp6lvOpSRKkGniCKEEdQRuMVQMHlXQIL9L+GyhivA&#xA;5mlnjjSN5ZiGHqzFFX1G/eyU5d2J64qmuKuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F7C738E30B2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F7C738E30B2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F7C738E30B2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:14:38+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -65.7319 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 65.7319 li
377.996 65.7319 li
377.996 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 65.7319 mo
377.996 65.7319 li
377.996 0 li
0 0 li
0 65.7319 li
cp
clp
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
.53769 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
.268555 25.5313 mo
87.3745 25.5313 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.746 .676 .668 .898 cmyk
@
grestore
.53769 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
97.0532 25.5127 mo
126.088 25.5127 li
false sop
.746 .676 .668 .898 cmyk
@
155.124 25.5127 mo
184.159 25.5127 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
126.088 25.5127 mo
140.606 .367188 li
@
155.124 25.5127 mo
140.606 .367188 li
@
grestore
193.837 25.5127 mo
203.515 25.5127 li
@
213.194 25.5127 mo
222.873 25.5127 li
@
203.515 25.5127 mo
208.355 17.1309 li
@
213.194 25.5127 mo
208.355 17.1309 li
@
251.908 25.5127 mo
261.586 25.5127 li
@
271.264 25.5127 mo
280.943 25.5127 li
@
261.586 25.5127 mo
266.425 17.1309 li
@
271.264 25.5127 mo
266.425 17.1309 li
@
222.873 25.5127 mo
227.711 17.1309 li
@
227.711 17.1309 mo
222.873 8.74854 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
232.551 8.74902 mo
237.39 .367188 li
@
grestore
251.908 8.74902 mo
242.229 8.74902 li
@
247.069 17.1309 mo
251.908 8.74854 li
@
251.908 25.5127 mo
247.069 17.1309 li
@
222.873 8.74902 mo
232.551 8.74902 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
242.229 8.74902 mo
237.39 .367188 li
@
grestore
290.622 25.5313 mo
293.847 25.5313 li
@
297.074 25.5313 mo
300.299 25.5313 li
@
293.847 25.5313 mo
295.46 22.7373 li
@
297.074 25.5313 mo
295.46 22.7373 li
@
309.978 25.5313 mo
313.205 25.5313 li
@
316.43 25.5313 mo
319.657 25.5313 li
@
313.205 25.5313 mo
314.818 22.7373 li
@
316.43 25.5313 mo
314.818 22.7373 li
@
300.299 25.5313 mo
301.913 22.7373 li
@
301.913 22.7373 mo
300.299 19.9434 li
@
303.526 19.9434 mo
305.139 17.1494 li
@
309.978 19.9434 mo
306.752 19.9434 li
@
308.365 22.7373 mo
309.978 19.9434 li
@
309.978 25.5313 mo
308.365 22.7373 li
@
300.299 19.9434 mo
303.526 19.9434 li
@
306.752 19.9434 mo
305.139 17.1494 li
@
319.657 25.5313 mo
321.27 22.7373 li
@
322.882 19.9434 mo
324.496 17.1494 li
@
321.27 22.7373 mo
319.657 19.9434 li
@
322.882 19.9434 mo
319.657 19.9434 li
@
329.335 8.76758 mo
330.948 5.97363 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
332.561 3.17969 mo
334.174 .38623 li
@
grestore
330.948 5.97363 mo
329.335 3.17969 li
@
332.561 3.17969 mo
329.335 3.17969 li
@
324.496 17.1494 mo
322.882 14.3555 li
@
322.882 14.3555 mo
319.657 14.3555 li
@
321.27 11.5615 mo
319.657 8.76758 li
@
324.496 5.97363 mo
322.882 8.76758 li
@
326.109 8.76758 mo
324.496 5.97363 li
@
329.335 8.76758 mo
326.109 8.76758 li
@
319.657 14.3555 mo
321.27 11.5615 li
@
322.882 8.76758 mo
319.657 8.76758 li
@
348.692 25.5313 mo
351.918 25.5313 li
@
355.144 25.5313 mo
358.371 25.5313 li
@
351.918 25.5313 mo
353.531 22.7373 li
@
355.144 25.5313 mo
353.531 22.7373 li
@
368.048 25.5313 mo
371.275 25.5313 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
374.501 25.5313 mo
377.727 25.5313 li
@
grestore
371.275 25.5313 mo
372.888 22.7373 li
@
374.501 25.5313 mo
372.888 22.7373 li
@
358.371 25.5313 mo
359.983 22.7373 li
@
359.983 22.7373 mo
358.371 19.9434 li
@
361.596 19.9434 mo
363.209 17.1494 li
@
368.048 19.9434 mo
364.823 19.9434 li
@
366.436 22.7373 mo
368.048 19.9434 li
@
368.048 25.5313 mo
366.436 22.7373 li
@
358.371 19.9434 mo
361.596 19.9434 li
@
364.823 19.9434 mo
363.209 17.1494 li
@
gsave
0 0 mo
377.996 0 li
377.996 65.7319 li
0 65.7319 li
0 0 li
cp
clp
334.174 .385742 mo
335.788 3.17969 li
@
grestore
337.401 5.97363 mo
339.013 8.76758 li
@
335.788 3.17969 mo
339.013 3.17969 li
@
337.401 5.97363 mo
339.013 3.17969 li
@
343.853 17.1494 mo
345.465 19.9434 li
@
347.079 22.7373 mo
348.692 25.5313 li
@
345.465 19.9434 mo
348.692 19.9434 li
@
347.079 22.7373 mo
348.692 19.9434 li
@
339.013 8.76758 mo
342.24 8.76758 li
@
342.24 8.76758 mo
343.853 5.97363 li
@
345.465 8.76758 mo
348.692 8.76758 li
@
348.692 14.3555 mo
347.079 11.5615 li
@
345.465 14.3555 mo
348.692 14.3555 li
@
343.853 17.1494 mo
345.465 14.3555 li
@
343.853 5.97363 mo
345.465 8.76758 li
@
347.079 11.5615 mo
348.692 8.76758 li
@
31.6553 44.2061 mo
31.4209 44.4556 31.1914 44.6338 30.9673 44.7412 cv
30.7437 44.8486 30.502 44.9019 30.2427 44.9019 cv
29.7178 44.9019 29.2588 44.6826 28.8667 44.2437 cv
28.4746 43.8052 28.2788 43.2412 28.2788 42.5527 cv
28.2788 41.8638 28.4956 41.2339 28.9297 40.6621 cv
29.3638 40.0903 29.9224 39.8047 30.605 39.8047 cv
31.0288 39.8047 31.3789 39.9404 31.6553 40.2114 cv
31.6553 39.3208 li
31.6553 38.7744 31.6421 38.4385 31.6157 38.3135 cv
31.5894 38.1885 31.5483 38.103 31.4917 38.0576 cv
31.4355 38.0122 31.3652 37.9893 31.2813 37.9893 cv
31.1899 37.9893 31.0684 38.0176 30.9175 38.0732 cv
30.8491 37.8799 li
32.2891 37.2881 li
32.5264 37.2881 li
32.5264 42.8481 li
32.5264 43.4087 32.5396 43.7505 32.5659 43.874 cv
32.5923 43.9976 32.6348 44.084 32.6924 44.1328 cv
32.7505 44.1816 32.8184 44.2061 32.8955 44.2061 cv
32.9902 44.2061 33.1167 44.1763 33.2749 44.1172 cv
33.333 44.3105 li
31.8979 44.9019 li
31.6553 44.9019 li
31.6553 44.2061 li
cp
31.6553 43.8389 mo
31.6553 41.375 li
31.6343 41.1338 31.5713 40.9155 31.4658 40.7197 cv
31.3608 40.5239 31.2217 40.3765 31.0479 40.2769 cv
30.8745 40.1772 30.7051 40.1274 30.54 40.1274 cv
30.2319 40.1274 29.9565 40.2656 29.7144 40.5415 cv
29.3955 40.9053 29.2358 41.4365 29.2358 42.1353 cv
29.2358 42.8413 29.3901 43.3818 29.6987 43.7578 cv
30.0073 44.1333 30.3511 44.3213 30.7295 44.3213 cv
31.0488 44.3213 31.3574 44.1606 31.6553 43.8389 cv
cp
0 0 0 1 cmyk
f
34.4404 41.7617 mo
34.437 42.4731 34.6104 43.0308 34.9604 43.4351 cv
35.3105 43.8394 35.7222 44.0415 36.1948 44.0415 cv
36.5098 44.0415 36.7837 43.9561 37.0166 43.7842 cv
37.2495 43.6128 37.4448 43.3149 37.6021 42.8911 cv
37.7637 42.9961 li
37.6899 43.4805 37.4766 43.9194 37.1235 44.3125 cv
36.7705 44.7056 36.3281 44.9019 35.7964 44.9019 cv
35.2197 44.9019 34.7261 44.6772 34.3149 44.228 cv
33.9043 43.7788 33.6987 43.1748 33.6987 42.4165 cv
33.6987 41.5947 33.9092 40.9541 34.3306 40.4941 cv
34.752 40.0347 35.2808 39.8047 35.9175 39.8047 cv
36.4556 39.8047 36.8979 39.9824 37.2441 40.3374 cv
37.5903 40.6924 37.7637 41.167 37.7637 41.7617 cv
34.4404 41.7617 li
cp
34.4404 41.4609 mo
36.6665 41.4609 li
36.6494 41.1533 36.6123 40.9365 36.5566 40.8105 cv
36.4688 40.6147 36.3384 40.4609 36.1655 40.3491 cv
35.9922 40.2373 35.811 40.1812 35.6221 40.1812 cv
35.3315 40.1812 35.0718 40.2939 34.8423 40.5195 cv
34.6133 40.7446 34.479 41.0586 34.4404 41.4609 cv
cp
f
38.0645 40.4175 mo
39.543 39.8262 li
39.7422 39.8262 li
39.7422 40.9419 li
39.9912 40.521 40.2407 40.2266 40.4917 40.0576 cv
40.7422 39.8892 41.0059 39.8047 41.2832 39.8047 cv
41.7666 39.8047 42.1699 39.9937 42.4927 40.3716 cv
42.8887 40.8335 43.0869 41.4355 43.0869 42.1772 cv
43.0869 43.0068 42.8481 43.6929 42.3716 44.2354 cv
41.979 44.6797 41.4849 44.9019 40.8887 44.9019 cv
40.6294 44.9019 40.4048 44.8652 40.2158 44.7925 cv
40.0752 44.7402 39.9175 44.6362 39.7422 44.4795 cv
39.7422 45.9453 li
39.7422 46.2764 39.7627 46.4868 39.8027 46.5767 cv
39.8433 46.6665 39.9136 46.7378 40.0137 46.7905 cv
40.1138 46.8438 40.2959 46.8701 40.5596 46.8701 cv
40.5596 47.0635 li
38.0322 47.0635 li
38.0322 46.8701 li
38.1646 46.8701 li
38.3579 46.8735 38.5229 46.8369 38.6602 46.7603 cv
38.7271 46.7217 38.7788 46.6602 38.8159 46.5747 cv
38.8525 46.4893 38.8711 46.2725 38.8711 45.9238 cv
38.8711 41.3535 li
38.8711 41.0449 38.8574 40.8496 38.8291 40.7666 cv
38.8013 40.6831 38.7568 40.6206 38.6958 40.5791 cv
38.6348 40.5371 38.5518 40.5161 38.4468 40.5161 cv
38.3633 40.5161 38.2568 40.5405 38.1274 40.5898 cv
38.0645 40.4175 li
cp
39.7422 41.2524 mo
39.7422 43.0532 li
39.7422 43.4424 39.7583 43.6987 39.7896 43.8218 cv
39.8389 44.0254 39.959 44.2041 40.1499 44.3584 cv
40.3408 44.5132 40.582 44.5903 40.873 44.5903 cv
41.2236 44.5903 41.5078 44.4531 41.7251 44.1797 cv
42.0093 43.8213 42.1509 43.3179 42.1509 42.6685 cv
42.1509 41.9316 41.9897 41.3647 41.667 40.9683 cv
41.4429 40.6943 41.1763 40.5576 40.8677 40.5576 cv
40.6997 40.5576 40.5327 40.5996 40.3682 40.6836 cv
40.2417 40.7471 40.0332 40.9365 39.7422 41.2524 cv
cp
f
45.1943 38.3638 mo
45.1943 39.9443 li
46.3179 39.9443 li
46.3179 40.2993 li
45.1943 40.3101 li
45.1943 43.4312 li
45.1943 43.7427 45.2393 43.9531 45.3281 44.0615 cv
45.4175 44.1704 45.5317 44.2246 45.6719 44.2246 cv
45.7871 44.2246 45.8989 44.1885 46.0073 44.1157 cv
46.1157 44.043 46.1997 43.936 46.2593 43.7944 cv
46.4634 43.7944 li
46.3408 44.1401 46.167 44.4004 45.9429 44.5752 cv
45.7183 44.75 45.4873 44.8374 45.2485 44.8374 cv
45.0874 44.8374 44.9297 44.7925 44.7754 44.7031 cv
44.6211 44.6133 44.5073 44.4854 44.4336 44.3184 cv
44.3604 44.1514 44.3232 43.894 44.3232 43.5464 cv
44.3232 40.2993 li
43.5601 40.2993 li
43.5601 40.1318 li
43.7529 40.0557 43.9507 39.9268 44.1528 39.7446 cv
44.355 39.563 44.5352 39.3457 44.6943 39.0938 cv
44.7754 38.9609 44.8882 38.7173 45.0332 38.3638 cv
45.1943 38.3638 li
cp
f
48.1948 37.2881 mo
48.1948 40.8071 li
48.584 40.3804 48.8921 40.1064 49.1201 39.9858 cv
49.3481 39.8652 49.5757 39.8047 49.8037 39.8047 cv
50.0771 39.8047 50.312 39.8799 50.5083 40.0308 cv
50.7046 40.1816 50.8501 40.4185 50.9443 40.7412 cv
51.0112 40.9653 51.0444 41.376 51.0444 41.9717 cv
51.0444 43.6763 li
51.0444 43.979 51.0688 44.186 51.1177 44.2974 cv
51.1523 44.3809 51.2114 44.4468 51.2949 44.4956 cv
51.3784 44.5444 51.5317 44.5688 51.7544 44.5688 cv
51.7544 44.7622 li
49.3994 44.7622 li
49.3994 44.5688 li
49.5093 44.5688 li
49.7324 44.5688 49.8872 44.5347 49.9746 44.4668 cv
50.062 44.3989 50.123 44.2988 50.1577 44.167 cv
50.1685 44.1108 50.1733 43.9473 50.1733 43.6763 cv
50.1733 41.9707 li
50.1733 41.4443 50.146 41.0991 50.0918 40.9341 cv
50.0376 40.769 49.9507 40.6455 49.8315 40.563 cv
49.7119 40.4805 49.5684 40.4395 49.3999 40.4395 cv
49.228 40.4395 49.0488 40.4849 48.8628 40.5762 cv
48.6772 40.667 48.4546 40.8511 48.1948 41.1279 cv
48.1948 43.6763 li
48.1948 44.0029 48.2129 44.207 48.2495 44.2871 cv
48.2861 44.3667 48.3545 44.4336 48.4536 44.4878 cv
48.5532 44.5415 48.7251 44.5688 48.9692 44.5688 cv
48.9692 44.7622 li
46.5923 44.7622 li
46.5923 44.5688 li
46.8047 44.5688 46.9722 44.5356 47.0938 44.4697 cv
47.1636 44.4346 47.2192 44.3687 47.2612 44.2715 cv
47.3027 44.1738 47.3237 43.9756 47.3237 43.6763 cv
47.3237 39.3208 li
47.3237 38.7744 47.3105 38.4385 47.2842 38.3135 cv
47.2583 38.1885 47.2183 38.103 47.1641 38.0576 cv
47.1099 38.0122 47.0376 37.9893 46.9468 37.9893 cv
46.873 37.9893 46.7544 38.0176 46.5903 38.0732 cv
46.5171 37.8799 li
47.9536 37.2881 li
48.1948 37.2881 li
cp
f
54.8945 41.2393 mo
54.8945 40.4277 55.0166 39.729 55.2617 39.1426 cv
55.5068 38.5566 55.832 38.1206 56.2378 37.834 cv
56.5527 37.6064 56.8784 37.4927 57.2139 37.4927 cv
57.7598 37.4927 58.2495 37.7705 58.6836 38.3271 cv
59.2261 39.0161 59.4971 39.9502 59.4971 41.1289 cv
59.4971 41.9541 59.3779 42.6558 59.1401 43.2329 cv
58.9023 43.8101 58.5986 44.229 58.2295 44.4897 cv
57.8604 44.75 57.5044 44.8804 57.1616 44.8804 cv
56.4829 44.8804 55.918 44.48 55.4663 43.6787 cv
55.085 43.0039 54.8945 42.1904 54.8945 41.2393 cv
cp
55.9268 41.3677 mo
55.9268 42.3472 56.0469 43.1465 56.2876 43.7656 cv
56.4868 44.2866 56.7832 44.5469 57.1772 44.5469 cv
57.3657 44.5469 57.561 44.4624 57.7637 44.293 cv
57.9658 44.123 58.1191 43.8389 58.2236 43.4404 cv
58.3843 42.8384 58.4648 41.9902 58.4648 40.8955 cv
58.4648 40.084 58.3809 39.4072 58.2134 38.8652 cv
58.0879 38.4629 57.9258 38.1777 57.7271 38.0098 cv
57.584 37.8945 57.4111 37.8369 57.209 37.8369 cv
56.9717 37.8369 56.7603 37.9434 56.5757 38.1567 cv
56.3242 38.4473 56.1533 38.9033 56.0625 39.5264 cv
55.9722 40.1489 55.9268 40.7627 55.9268 41.3677 cv
cp
f
128.439 44.2061 mo
128.205 44.4556 127.976 44.6338 127.751 44.7412 cv
127.528 44.8486 127.286 44.9019 127.027 44.9019 cv
126.502 44.9019 126.043 44.6826 125.651 44.2437 cv
125.259 43.8052 125.063 43.2412 125.063 42.5527 cv
125.063 41.8638 125.28 41.2339 125.714 40.6621 cv
126.148 40.0903 126.707 39.8047 127.389 39.8047 cv
127.813 39.8047 128.163 39.9404 128.439 40.2114 cv
128.439 39.3208 li
128.439 38.7744 128.426 38.4385 128.4 38.3135 cv
128.374 38.1885 128.333 38.103 128.276 38.0576 cv
128.22 38.0122 128.15 37.9893 128.065 37.9893 cv
127.974 37.9893 127.853 38.0176 127.702 38.0732 cv
127.633 37.8799 li
129.073 37.2881 li
129.311 37.2881 li
129.311 42.8481 li
129.311 43.4087 129.324 43.7505 129.35 43.874 cv
129.376 43.9976 129.419 44.084 129.477 44.1328 cv
129.535 44.1816 129.603 44.2061 129.68 44.2061 cv
129.774 44.2061 129.901 44.1763 130.059 44.1172 cv
130.117 44.3105 li
128.682 44.9019 li
128.439 44.9019 li
128.439 44.2061 li
cp
128.439 43.8389 mo
128.439 41.375 li
128.418 41.1338 128.355 40.9155 128.25 40.7197 cv
128.145 40.5239 128.006 40.3765 127.832 40.2769 cv
127.659 40.1772 127.489 40.1274 127.324 40.1274 cv
127.016 40.1274 126.741 40.2656 126.499 40.5415 cv
126.18 40.9053 126.02 41.4365 126.02 42.1353 cv
126.02 42.8413 126.174 43.3818 126.483 43.7578 cv
126.792 44.1333 127.135 44.3213 127.514 44.3213 cv
127.833 44.3213 128.142 44.1606 128.439 43.8389 cv
cp
f
131.225 41.7617 mo
131.221 42.4731 131.395 43.0308 131.745 43.4351 cv
132.095 43.8394 132.506 44.0415 132.979 44.0415 cv
133.294 44.0415 133.568 43.9561 133.801 43.7842 cv
134.034 43.6128 134.229 43.3149 134.386 42.8911 cv
134.548 42.9961 li
134.474 43.4805 134.261 43.9194 133.908 44.3125 cv
133.555 44.7056 133.112 44.9019 132.581 44.9019 cv
132.004 44.9019 131.51 44.6772 131.099 44.228 cv
130.688 43.7788 130.483 43.1748 130.483 42.4165 cv
130.483 41.5947 130.693 40.9541 131.115 40.4941 cv
131.536 40.0347 132.065 39.8047 132.702 39.8047 cv
133.24 39.8047 133.682 39.9824 134.028 40.3374 cv
134.375 40.6924 134.548 41.167 134.548 41.7617 cv
131.225 41.7617 li
cp
131.225 41.4609 mo
133.451 41.4609 li
133.434 41.1533 133.396 40.9365 133.341 40.8105 cv
133.253 40.6147 133.123 40.4609 132.95 40.3491 cv
132.776 40.2373 132.595 40.1812 132.406 40.1812 cv
132.116 40.1812 131.856 40.2939 131.626 40.5195 cv
131.397 40.7446 131.263 41.0586 131.225 41.4609 cv
cp
f
134.849 40.4175 mo
136.327 39.8262 li
136.526 39.8262 li
136.526 40.9419 li
136.775 40.521 137.025 40.2266 137.276 40.0576 cv
137.526 39.8892 137.79 39.8047 138.067 39.8047 cv
138.551 39.8047 138.954 39.9937 139.277 40.3716 cv
139.673 40.8335 139.871 41.4355 139.871 42.1772 cv
139.871 43.0068 139.632 43.6929 139.156 44.2354 cv
138.763 44.6797 138.269 44.9019 137.673 44.9019 cv
137.414 44.9019 137.189 44.8652 137 44.7925 cv
136.859 44.7402 136.702 44.6362 136.526 44.4795 cv
136.526 45.9453 li
136.526 46.2764 136.547 46.4868 136.587 46.5767 cv
136.627 46.6665 136.698 46.7378 136.798 46.7905 cv
136.898 46.8438 137.08 46.8701 137.344 46.8701 cv
137.344 47.0635 li
134.816 47.0635 li
134.816 46.8701 li
134.949 46.8701 li
135.142 46.8735 135.307 46.8369 135.444 46.7603 cv
135.511 46.7217 135.563 46.6602 135.6 46.5747 cv
135.637 46.4893 135.655 46.2725 135.655 45.9238 cv
135.655 41.3535 li
135.655 41.0449 135.642 40.8496 135.613 40.7666 cv
135.585 40.6831 135.541 40.6206 135.48 40.5791 cv
135.419 40.5371 135.336 40.5161 135.231 40.5161 cv
135.147 40.5161 135.041 40.5405 134.912 40.5898 cv
134.849 40.4175 li
cp
136.526 41.2524 mo
136.526 43.0532 li
136.526 43.4424 136.542 43.6987 136.574 43.8218 cv
136.623 44.0254 136.743 44.2041 136.934 44.3584 cv
137.125 44.5132 137.366 44.5903 137.657 44.5903 cv
138.008 44.5903 138.292 44.4531 138.509 44.1797 cv
138.793 43.8213 138.936 43.3179 138.936 42.6685 cv
138.936 41.9316 138.774 41.3647 138.451 40.9683 cv
138.227 40.6943 137.96 40.5576 137.652 40.5576 cv
137.484 40.5576 137.317 40.5996 137.152 40.6836 cv
137.026 40.7471 136.817 40.9365 136.526 41.2524 cv
cp
f
141.979 38.3638 mo
141.979 39.9443 li
143.102 39.9443 li
143.102 40.2993 li
141.979 40.3101 li
141.979 43.4312 li
141.979 43.7427 142.023 43.9531 142.112 44.0615 cv
142.202 44.1704 142.316 44.2246 142.456 44.2246 cv
142.571 44.2246 142.683 44.1885 142.792 44.1157 cv
142.9 44.043 142.984 43.936 143.043 43.7944 cv
143.248 43.7944 li
143.125 44.1401 142.952 44.4004 142.727 44.5752 cv
142.502 44.75 142.271 44.8374 142.033 44.8374 cv
141.872 44.8374 141.714 44.7925 141.56 44.7031 cv
141.405 44.6133 141.292 44.4854 141.218 44.3184 cv
141.145 44.1514 141.107 43.894 141.107 43.5464 cv
141.107 40.2993 li
140.344 40.2993 li
140.344 40.1318 li
140.537 40.0557 140.735 39.9268 140.937 39.7446 cv
141.139 39.563 141.319 39.3457 141.479 39.0938 cv
141.56 38.9609 141.672 38.7173 141.817 38.3638 cv
141.979 38.3638 li
cp
f
144.979 37.2881 mo
144.979 40.8071 li
145.368 40.3804 145.676 40.1064 145.904 39.9858 cv
146.132 39.8652 146.36 39.8047 146.588 39.8047 cv
146.861 39.8047 147.096 39.8799 147.292 40.0308 cv
147.489 40.1816 147.634 40.4185 147.729 40.7412 cv
147.795 40.9653 147.829 41.376 147.829 41.9717 cv
147.829 43.6763 li
147.829 43.979 147.853 44.186 147.902 44.2974 cv
147.937 44.3809 147.996 44.4468 148.079 44.4956 cv
148.163 44.5444 148.316 44.5688 148.539 44.5688 cv
148.539 44.7622 li
146.184 44.7622 li
146.184 44.5688 li
146.293 44.5688 li
146.517 44.5688 146.671 44.5347 146.759 44.4668 cv
146.846 44.3989 146.907 44.2988 146.942 44.167 cv
146.953 44.1108 146.958 43.9473 146.958 43.6763 cv
146.958 41.9707 li
146.958 41.4443 146.931 41.0991 146.876 40.9341 cv
146.822 40.769 146.735 40.6455 146.616 40.563 cv
146.496 40.4805 146.353 40.4395 146.184 40.4395 cv
146.012 40.4395 145.833 40.4849 145.647 40.5762 cv
145.461 40.667 145.239 40.8511 144.979 41.1279 cv
144.979 43.6763 li
144.979 44.0029 144.997 44.207 145.034 44.2871 cv
145.07 44.3667 145.139 44.4336 145.238 44.4878 cv
145.337 44.5415 145.509 44.5688 145.753 44.5688 cv
145.753 44.7622 li
143.376 44.7622 li
143.376 44.5688 li
143.589 44.5688 143.756 44.5356 143.878 44.4697 cv
143.948 44.4346 144.003 44.3687 144.045 44.2715 cv
144.087 44.1738 144.108 43.9756 144.108 43.6763 cv
144.108 39.3208 li
144.108 38.7744 144.095 38.4385 144.068 38.3135 cv
144.042 38.1885 144.002 38.103 143.948 38.0576 cv
143.894 38.0122 143.822 37.9893 143.731 37.9893 cv
143.658 37.9893 143.539 38.0176 143.375 38.0732 cv
143.301 37.8799 li
144.738 37.2881 li
144.979 37.2881 li
cp
f
152.539 38.3315 mo
154.279 37.4927 li
154.453 37.4927 li
154.453 43.5039 li
154.453 43.9048 154.47 44.1543 154.503 44.2524 cv
154.537 44.3506 154.606 44.4263 154.712 44.479 cv
154.817 44.5317 155.032 44.5615 155.356 44.5688 cv
155.356 44.7622 li
152.668 44.7622 li
152.668 44.5688 li
153.004 44.5615 153.221 44.5327 153.319 44.4819 cv
153.417 44.4307 153.486 44.3623 153.524 44.2764 cv
153.563 44.1899 153.582 43.9326 153.582 43.5039 cv
153.582 39.6543 li
153.582 39.1357 153.564 38.8027 153.529 38.6558 cv
153.505 38.5435 153.46 38.4614 153.395 38.4087 cv
153.33 38.3564 153.252 38.3301 153.161 38.3301 cv
153.031 38.3301 152.85 38.3843 152.618 38.4927 cv
152.539 38.3315 li
cp
f
225.224 44.2061 mo
224.989 44.4556 224.76 44.6338 224.536 44.7412 cv
224.312 44.8486 224.071 44.9019 223.811 44.9019 cv
223.286 44.9019 222.828 44.6826 222.435 44.2437 cv
222.043 43.8052 221.847 43.2412 221.847 42.5527 cv
221.847 41.8638 222.064 41.2339 222.499 40.6621 cv
222.932 40.0903 223.491 39.8047 224.173 39.8047 cv
224.597 39.8047 224.947 39.9404 225.224 40.2114 cv
225.224 39.3208 li
225.224 38.7744 225.21 38.4385 225.184 38.3135 cv
225.158 38.1885 225.117 38.103 225.06 38.0576 cv
225.004 38.0122 224.934 37.9893 224.85 37.9893 cv
224.758 37.9893 224.637 38.0176 224.486 38.0732 cv
224.417 37.8799 li
225.858 37.2881 li
226.095 37.2881 li
226.095 42.8481 li
226.095 43.4087 226.108 43.7505 226.134 43.874 cv
226.161 43.9976 226.203 44.084 226.261 44.1328 cv
226.319 44.1816 226.386 44.2061 226.463 44.2061 cv
226.559 44.2061 226.685 44.1763 226.843 44.1172 cv
226.902 44.3105 li
225.466 44.9019 li
225.224 44.9019 li
225.224 44.2061 li
cp
225.224 43.8389 mo
225.224 41.375 li
225.203 41.1338 225.139 40.9155 225.035 40.7197 cv
224.929 40.5239 224.79 40.3765 224.616 40.2769 cv
224.443 40.1772 224.274 40.1274 224.109 40.1274 cv
223.8 40.1274 223.525 40.2656 223.283 40.5415 cv
222.963 40.9053 222.804 41.4365 222.804 42.1353 cv
222.804 42.8413 222.958 43.3818 223.267 43.7578 cv
223.576 44.1333 223.919 44.3213 224.298 44.3213 cv
224.617 44.3213 224.925 44.1606 225.224 43.8389 cv
cp
f
228.009 41.7617 mo
228.005 42.4731 228.179 43.0308 228.529 43.4351 cv
228.879 43.8394 229.291 44.0415 229.763 44.0415 cv
230.079 44.0415 230.352 43.9561 230.584 43.7842 cv
230.818 43.6128 231.013 43.3149 231.17 42.8911 cv
231.332 42.9961 li
231.258 43.4805 231.045 43.9194 230.692 44.3125 cv
230.338 44.7056 229.897 44.9019 229.365 44.9019 cv
228.789 44.9019 228.294 44.6772 227.883 44.228 cv
227.472 43.7788 227.267 43.1748 227.267 42.4165 cv
227.267 41.5947 227.478 40.9541 227.899 40.4941 cv
228.321 40.0347 228.849 39.8047 229.486 39.8047 cv
230.024 39.8047 230.466 39.9824 230.813 40.3374 cv
231.159 40.6924 231.332 41.167 231.332 41.7617 cv
228.009 41.7617 li
cp
228.009 41.4609 mo
230.235 41.4609 li
230.217 41.1533 230.181 40.9365 230.125 40.8105 cv
230.038 40.6147 229.907 40.4609 229.734 40.3491 cv
229.56 40.2373 229.379 40.1812 229.19 40.1812 cv
228.9 40.1812 228.64 40.2939 228.411 40.5195 cv
228.181 40.7446 228.047 41.0586 228.009 41.4609 cv
cp
f
231.633 40.4175 mo
233.112 39.8262 li
233.311 39.8262 li
233.311 40.9419 li
233.559 40.521 233.809 40.2266 234.06 40.0576 cv
234.311 39.8892 234.575 39.8047 234.851 39.8047 cv
235.335 39.8047 235.739 39.9937 236.061 40.3716 cv
236.458 40.8335 236.655 41.4355 236.655 42.1772 cv
236.655 43.0068 236.417 43.6929 235.94 44.2354 cv
235.547 44.6797 235.053 44.9019 234.457 44.9019 cv
234.198 44.9019 233.973 44.8652 233.784 44.7925 cv
233.644 44.7402 233.486 44.6362 233.311 44.4795 cv
233.311 45.9453 li
233.311 46.2764 233.331 46.4868 233.372 46.5767 cv
233.412 46.6665 233.482 46.7378 233.583 46.7905 cv
233.682 46.8438 233.864 46.8701 234.128 46.8701 cv
234.128 47.0635 li
231.601 47.0635 li
231.601 46.8701 li
231.733 46.8701 li
231.926 46.8735 232.091 46.8369 232.229 46.7603 cv
232.295 46.7217 232.347 46.6602 232.384 46.5747 cv
232.421 46.4893 232.44 46.2725 232.44 45.9238 cv
232.44 41.3535 li
232.44 41.0449 232.425 40.8496 232.398 40.7666 cv
232.37 40.6831 232.325 40.6206 232.264 40.5791 cv
232.203 40.5371 232.12 40.5161 232.015 40.5161 cv
231.931 40.5161 231.825 40.5405 231.696 40.5898 cv
231.633 40.4175 li
cp
233.311 41.2524 mo
233.311 43.0532 li
233.311 43.4424 233.327 43.6987 233.358 43.8218 cv
233.407 44.0254 233.527 44.2041 233.718 44.3584 cv
233.91 44.5132 234.151 44.5903 234.442 44.5903 cv
234.792 44.5903 235.076 44.4531 235.293 44.1797 cv
235.578 43.8213 235.719 43.3179 235.719 42.6685 cv
235.719 41.9316 235.558 41.3647 235.236 40.9683 cv
235.011 40.6943 234.745 40.5576 234.436 40.5576 cv
234.268 40.5576 234.101 40.5996 233.937 40.6836 cv
233.81 40.7471 233.602 40.9365 233.311 41.2524 cv
cp
f
238.763 38.3638 mo
238.763 39.9443 li
239.886 39.9443 li
239.886 40.2993 li
238.763 40.3101 li
238.763 43.4312 li
238.763 43.7427 238.807 43.9531 238.897 44.0615 cv
238.986 44.1704 239.1 44.2246 239.24 44.2246 cv
239.355 44.2246 239.467 44.1885 239.576 44.1157 cv
239.684 44.043 239.768 43.936 239.828 43.7944 cv
240.032 43.7944 li
239.909 44.1401 239.736 44.4004 239.511 44.5752 cv
239.287 44.75 239.055 44.8374 238.817 44.8374 cv
238.656 44.8374 238.499 44.7925 238.344 44.7031 cv
238.19 44.6133 238.076 44.4854 238.002 44.3184 cv
237.928 44.1514 237.892 43.894 237.892 43.5464 cv
237.892 40.2993 li
237.128 40.2993 li
237.128 40.1318 li
237.322 40.0557 237.519 39.9268 237.721 39.7446 cv
237.923 39.563 238.104 39.3457 238.262 39.0938 cv
238.344 38.9609 238.457 38.7173 238.602 38.3638 cv
238.763 38.3638 li
cp
f
241.763 37.2881 mo
241.763 40.8071 li
242.152 40.3804 242.46 40.1064 242.688 39.9858 cv
242.917 39.8652 243.144 39.8047 243.372 39.8047 cv
243.645 39.8047 243.88 39.8799 244.077 40.0308 cv
244.273 40.1816 244.418 40.4185 244.513 40.7412 cv
244.58 40.9653 244.613 41.376 244.613 41.9717 cv
244.613 43.6763 li
244.613 43.979 244.637 44.186 244.686 44.2974 cv
244.721 44.3809 244.78 44.4468 244.864 44.4956 cv
244.947 44.5444 245.1 44.5688 245.323 44.5688 cv
245.323 44.7622 li
242.967 44.7622 li
242.967 44.5688 li
243.078 44.5688 li
243.3 44.5688 243.456 44.5347 243.542 44.4668 cv
243.63 44.3989 243.691 44.2988 243.726 44.167 cv
243.737 44.1108 243.742 43.9473 243.742 43.6763 cv
243.742 41.9707 li
243.742 41.4443 243.714 41.0991 243.661 40.9341 cv
243.606 40.769 243.519 40.6455 243.4 40.563 cv
243.281 40.4805 243.136 40.4395 242.968 40.4395 cv
242.796 40.4395 242.618 40.4849 242.431 40.5762 cv
242.246 40.667 242.023 40.8511 241.763 41.1279 cv
241.763 43.6763 li
241.763 44.0029 241.782 44.207 241.818 44.2871 cv
241.855 44.3667 241.922 44.4336 242.022 44.4878 cv
242.122 44.5415 242.293 44.5688 242.538 44.5688 cv
242.538 44.7622 li
240.161 44.7622 li
240.161 44.5688 li
240.374 44.5688 240.541 44.5356 240.663 44.4697 cv
240.732 44.4346 240.788 44.3687 240.83 44.2715 cv
240.872 44.1738 240.892 43.9756 240.892 43.6763 cv
240.892 39.3208 li
240.892 38.7744 240.879 38.4385 240.853 38.3135 cv
240.827 38.1885 240.787 38.103 240.732 38.0576 cv
240.678 38.0122 240.606 37.9893 240.515 37.9893 cv
240.442 37.9893 240.323 38.0176 240.159 38.0732 cv
240.085 37.8799 li
241.522 37.2881 li
241.763 37.2881 li
cp
f
253 43.3779 mo
252.502 44.7622 li
248.301 44.7622 li
248.301 44.5645 li
249.538 43.4385 250.407 42.5186 250.912 41.8052 cv
251.416 41.0918 251.667 40.439 251.667 39.8477 cv
251.667 39.396 251.529 39.0254 251.252 38.7349 cv
250.976 38.4443 250.645 38.2993 250.26 38.2993 cv
249.91 38.2993 249.595 38.4004 249.317 38.6025 cv
249.039 38.8052 248.833 39.1021 248.7 39.4927 cv
248.505 39.4927 li
248.593 38.8486 248.819 38.3545 249.181 38.0098 cv
249.544 37.665 249.998 37.4927 250.541 37.4927 cv
251.12 37.4927 251.602 37.6782 251.99 38.0498 cv
252.377 38.4214 252.571 38.8594 252.571 39.3638 cv
252.571 39.7246 252.487 40.0854 252.319 40.4458 cv
252.059 41.0132 251.639 41.6133 251.057 42.2471 cv
250.186 43.1982 249.641 43.7676 249.424 43.9556 cv
251.276 43.9556 li
251.652 43.9556 251.916 43.9414 252.067 43.9136 cv
252.219 43.8857 252.356 43.8286 252.478 43.7432 cv
252.6 43.6572 252.706 43.5356 252.796 43.3779 cv
253 43.3779 li
cp
f
322.008 44.2061 mo
321.774 44.4556 321.544 44.6338 321.32 44.7412 cv
321.096 44.8486 320.854 44.9019 320.595 44.9019 cv
320.07 44.9019 319.612 44.6826 319.219 44.2437 cv
318.828 43.8052 318.631 43.2412 318.631 42.5527 cv
318.631 41.8638 318.848 41.2339 319.283 40.6621 cv
319.716 40.0903 320.275 39.8047 320.958 39.8047 cv
321.381 39.8047 321.731 39.9404 322.008 40.2114 cv
322.008 39.3208 li
322.008 38.7744 321.995 38.4385 321.968 38.3135 cv
321.942 38.1885 321.901 38.103 321.844 38.0576 cv
321.789 38.0122 321.718 37.9893 321.634 37.9893 cv
321.542 37.9893 321.421 38.0176 321.27 38.0732 cv
321.202 37.8799 li
322.642 37.2881 li
322.879 37.2881 li
322.879 42.8481 li
322.879 43.4087 322.892 43.7505 322.918 43.874 cv
322.945 43.9976 322.987 44.084 323.045 44.1328 cv
323.103 44.1816 323.17 44.2061 323.249 44.2061 cv
323.343 44.2061 323.469 44.1763 323.627 44.1172 cv
323.686 44.3105 li
322.25 44.9019 li
322.008 44.9019 li
322.008 44.2061 li
cp
322.008 43.8389 mo
322.008 41.375 li
321.987 41.1338 321.924 40.9155 321.819 40.7197 cv
321.713 40.5239 321.574 40.3765 321.401 40.2769 cv
321.227 40.1772 321.058 40.1274 320.893 40.1274 cv
320.584 40.1274 320.309 40.2656 320.067 40.5415 cv
319.748 40.9053 319.588 41.4365 319.588 42.1353 cv
319.588 42.8413 319.743 43.3818 320.051 43.7578 cv
320.36 44.1333 320.704 44.3213 321.083 44.3213 cv
321.401 44.3213 321.709 44.1606 322.008 43.8389 cv
cp
f
324.793 41.7617 mo
324.79 42.4731 324.963 43.0308 325.313 43.4351 cv
325.664 43.8394 326.075 44.0415 326.547 44.0415 cv
326.863 44.0415 327.136 43.9561 327.369 43.7842 cv
327.602 43.6128 327.797 43.3149 327.955 42.8911 cv
328.116 42.9961 li
328.042 43.4805 327.83 43.9194 327.476 44.3125 cv
327.124 44.7056 326.681 44.9019 326.149 44.9019 cv
325.573 44.9019 325.079 44.6772 324.667 44.228 cv
324.256 43.7788 324.051 43.1748 324.051 42.4165 cv
324.051 41.5947 324.262 40.9541 324.683 40.4941 cv
325.105 40.0347 325.633 39.8047 326.27 39.8047 cv
326.808 39.8047 327.25 39.9824 327.597 40.3374 cv
327.943 40.6924 328.116 41.167 328.116 41.7617 cv
324.793 41.7617 li
cp
324.793 41.4609 mo
327.019 41.4609 li
327.001 41.1533 326.965 40.9365 326.909 40.8105 cv
326.822 40.6147 326.691 40.4609 326.518 40.3491 cv
326.344 40.2373 326.164 40.1812 325.974 40.1812 cv
325.684 40.1812 325.424 40.2939 325.195 40.5195 cv
324.965 40.7446 324.832 41.0586 324.793 41.4609 cv
cp
f
328.417 40.4175 mo
329.896 39.8262 li
330.095 39.8262 li
330.095 40.9419 li
330.344 40.521 330.593 40.2266 330.844 40.0576 cv
331.095 39.8892 331.359 39.8047 331.635 39.8047 cv
332.12 39.8047 332.523 39.9937 332.845 40.3716 cv
333.242 40.8335 333.439 41.4355 333.439 42.1772 cv
333.439 43.0068 333.201 43.6929 332.724 44.2354 cv
332.332 44.6797 331.837 44.9019 331.241 44.9019 cv
330.982 44.9019 330.757 44.8652 330.568 44.7925 cv
330.428 44.7402 330.27 44.6362 330.095 44.4795 cv
330.095 45.9453 li
330.095 46.2764 330.115 46.4868 330.156 46.5767 cv
330.196 46.6665 330.266 46.7378 330.367 46.7905 cv
330.466 46.8438 330.649 46.8701 330.913 46.8701 cv
330.913 47.0635 li
328.385 47.0635 li
328.385 46.8701 li
328.517 46.8701 li
328.71 46.8735 328.875 46.8369 329.013 46.7603 cv
329.08 46.7217 329.131 46.6602 329.168 46.5747 cv
329.206 46.4893 329.224 46.2725 329.224 45.9238 cv
329.224 41.3535 li
329.224 41.0449 329.209 40.8496 329.182 40.7666 cv
329.154 40.6831 329.11 40.6206 329.048 40.5791 cv
328.987 40.5371 328.905 40.5161 328.799 40.5161 cv
328.715 40.5161 328.609 40.5405 328.48 40.5898 cv
328.417 40.4175 li
cp
330.095 41.2524 mo
330.095 43.0532 li
330.095 43.4424 330.111 43.6987 330.142 43.8218 cv
330.191 44.0254 330.311 44.2041 330.502 44.3584 cv
330.694 44.5132 330.935 44.5903 331.226 44.5903 cv
331.577 44.5903 331.86 44.4531 332.078 44.1797 cv
332.362 43.8213 332.503 43.3179 332.503 42.6685 cv
332.503 41.9316 332.342 41.3647 332.02 40.9683 cv
331.795 40.6943 331.529 40.5576 331.22 40.5576 cv
331.052 40.5576 330.885 40.5996 330.721 40.6836 cv
330.594 40.7471 330.386 40.9365 330.095 41.2524 cv
cp
f
335.547 38.3638 mo
335.547 39.9443 li
336.67 39.9443 li
336.67 40.2993 li
335.547 40.3101 li
335.547 43.4312 li
335.547 43.7427 335.591 43.9531 335.681 44.0615 cv
335.77 44.1704 335.884 44.2246 336.024 44.2246 cv
336.139 44.2246 336.251 44.1885 336.36 44.1157 cv
336.468 44.043 336.552 43.936 336.612 43.7944 cv
336.816 43.7944 li
336.693 44.1401 336.52 44.4004 336.295 44.5752 cv
336.071 44.75 335.839 44.8374 335.601 44.8374 cv
335.44 44.8374 335.283 44.7925 335.128 44.7031 cv
334.974 44.6133 334.86 44.4854 334.787 44.3184 cv
334.712 44.1514 334.676 43.894 334.676 43.5464 cv
334.676 40.2993 li
333.913 40.2993 li
333.913 40.1318 li
334.106 40.0557 334.303 39.9268 334.505 39.7446 cv
334.708 39.563 334.888 39.3457 335.046 39.0938 cv
335.128 38.9609 335.241 38.7173 335.385 38.3638 cv
335.547 38.3638 li
cp
f
338.547 37.2881 mo
338.547 40.8071 li
338.936 40.3804 339.245 40.1064 339.473 39.9858 cv
339.701 39.8652 339.928 39.8047 340.156 39.8047 cv
340.429 39.8047 340.665 39.8799 340.861 40.0308 cv
341.057 40.1816 341.203 40.4185 341.297 40.7412 cv
341.364 40.9653 341.397 41.376 341.397 41.9717 cv
341.397 43.6763 li
341.397 43.979 341.421 44.186 341.47 44.2974 cv
341.505 44.3809 341.564 44.4468 341.648 44.4956 cv
341.731 44.5444 341.884 44.5688 342.107 44.5688 cv
342.107 44.7622 li
339.751 44.7622 li
339.751 44.5688 li
339.862 44.5688 li
340.084 44.5688 340.24 44.5347 340.327 44.4668 cv
340.415 44.3989 340.475 44.2988 340.51 44.167 cv
340.521 44.1108 340.526 43.9473 340.526 43.6763 cv
340.526 41.9707 li
340.526 41.4443 340.499 41.0991 340.445 40.9341 cv
340.39 40.769 340.303 40.6455 340.184 40.563 cv
340.065 40.4805 339.92 40.4395 339.752 40.4395 cv
339.581 40.4395 339.402 40.4849 339.215 40.5762 cv
339.03 40.667 338.807 40.8511 338.547 41.1279 cv
338.547 43.6763 li
338.547 44.0029 338.566 44.207 338.602 44.2871 cv
338.639 44.3667 338.707 44.4336 338.806 44.4878 cv
338.906 44.5415 339.078 44.5688 339.322 44.5688 cv
339.322 44.7622 li
336.945 44.7622 li
336.945 44.5688 li
337.158 44.5688 337.325 44.5356 337.447 44.4697 cv
337.516 44.4346 337.572 44.3687 337.614 44.2715 cv
337.656 44.1738 337.676 43.9756 337.676 43.6763 cv
337.676 39.3208 li
337.676 38.7744 337.664 38.4385 337.637 38.3135 cv
337.611 38.1885 337.571 38.103 337.516 38.0576 cv
337.462 38.0122 337.39 37.9893 337.299 37.9893 cv
337.226 37.9893 337.107 38.0176 336.943 38.0732 cv
336.87 37.8799 li
338.306 37.2881 li
338.547 37.2881 li
cp
f
345.398 38.998 mo
345.601 38.5176 345.858 38.1465 346.167 37.8848 cv
346.478 37.6235 346.865 37.4927 347.328 37.4927 cv
347.899 37.4927 348.337 37.6782 348.642 38.0488 cv
348.874 38.3252 348.99 38.6206 348.99 38.9355 cv
348.99 39.4531 348.663 39.9883 348.01 40.541 cv
348.45 40.7124 348.782 40.9575 349.006 41.2759 cv
349.232 41.5942 349.344 41.9683 349.344 42.3984 cv
349.344 43.0142 349.148 43.5479 348.755 43.999 cv
348.244 44.5869 347.502 44.8804 346.531 44.8804 cv
346.05 44.8804 345.724 44.8208 345.55 44.7017 cv
345.376 44.5825 345.29 44.4546 345.29 44.3179 cv
345.29 44.2163 345.332 44.127 345.414 44.0498 cv
345.497 43.9727 345.595 43.9341 345.711 43.9341 cv
345.799 43.9341 345.888 43.9482 345.98 43.9766 cv
346.04 43.9946 346.174 44.0591 346.385 44.1709 cv
346.595 44.2827 346.742 44.3491 346.822 44.3701 cv
346.952 44.4092 347.09 44.4287 347.238 44.4287 cv
347.596 44.4287 347.908 44.2905 348.172 44.0137 cv
348.437 43.7373 348.57 43.4097 348.57 43.0313 cv
348.57 42.7549 348.508 42.4849 348.385 42.2222 cv
348.294 42.0264 348.194 41.8774 348.085 41.7759 cv
347.934 41.6357 347.727 41.5088 347.463 41.395 cv
347.201 41.2813 346.932 41.2241 346.658 41.2241 cv
346.49 41.2241 li
346.49 41.063 li
346.766 41.0278 347.043 40.9282 347.322 40.7637 cv
347.6 40.5991 347.803 40.4014 347.929 40.1709 cv
348.055 39.9395 348.119 39.686 348.119 39.4097 cv
348.119 39.0493 348.005 38.7578 347.779 38.5356 cv
347.552 38.3135 347.271 38.2021 346.934 38.2021 cv
346.39 38.2021 345.936 38.4956 345.571 39.082 cv
345.398 38.998 li
cp
f
41.2803 62.4414 mo
41.2803 62.6455 li
40.7505 62.3799 40.3086 62.0684 39.9546 61.7114 cv
39.4497 61.2041 39.0601 60.6055 38.7866 59.916 cv
38.5132 59.2266 38.3765 58.5107 38.3765 57.7686 cv
38.3765 56.6836 38.6445 55.6943 39.1812 54.8003 cv
39.7178 53.9058 40.4175 53.2666 41.2803 52.8813 cv
41.2803 53.1074 li
40.8477 53.3447 40.4927 53.6699 40.2153 54.082 cv
39.9375 54.4941 39.73 55.0166 39.5928 55.6489 cv
39.4561 56.2817 39.3872 56.9419 39.3872 57.6299 cv
39.3872 58.3779 39.4453 59.0576 39.5615 59.6689 cv
39.6528 60.1514 39.7637 60.5381 39.8936 60.8296 cv
40.0234 61.1216 40.1982 61.4019 40.418 61.6709 cv
40.6377 61.9399 40.9253 62.1968 41.2803 62.4414 cv
cp
f
44.5708 59.6553 mo
44.0771 60.0386 43.7676 60.2603 43.6411 60.3203 cv
43.4526 60.4082 43.251 60.4521 43.0376 60.4521 cv
42.7051 60.4521 42.4312 60.3379 42.2158 60.1104 cv
42.0005 59.8828 41.8931 59.583 41.8931 59.2114 cv
41.8931 58.9766 41.9453 58.7734 42.0503 58.6016 cv
42.1938 58.3633 42.4434 58.1392 42.7988 57.9287 cv
43.1538 57.7188 43.7446 57.4629 44.5708 57.1611 cv
44.5708 56.9727 li
44.5708 56.4941 44.4946 56.166 44.3428 55.9878 cv
44.1909 55.8096 43.9702 55.7202 43.6807 55.7202 cv
43.4604 55.7202 43.2861 55.7798 43.1567 55.8989 cv
43.0244 56.0181 42.958 56.1548 42.958 56.3091 cv
42.9683 56.6138 li
42.9683 56.7749 42.9272 56.8994 42.8442 56.9868 cv
42.7617 57.0747 42.6533 57.1182 42.5195 57.1182 cv
42.3892 57.1182 42.2827 57.0728 42.1997 56.9814 cv
42.1172 56.8906 42.0757 56.7656 42.0757 56.6079 cv
42.0757 56.3062 42.23 56.0293 42.5386 55.7764 cv
42.8472 55.5239 43.2803 55.3975 43.8379 55.3975 cv
44.2656 55.3975 44.6162 55.4697 44.8896 55.6133 cv
45.0962 55.7217 45.249 55.8916 45.3472 56.123 cv
45.4102 56.2734 45.4419 56.5815 45.4419 57.0479 cv
45.4419 58.6816 li
45.4419 59.1406 45.4507 59.4219 45.4683 59.5254 cv
45.4858 59.6284 45.5146 59.6978 45.5552 59.7329 cv
45.5957 59.7676 45.6421 59.7852 45.6948 59.7852 cv
45.7515 59.7852 45.8003 59.7729 45.8428 59.7485 cv
45.9165 59.7031 46.0591 59.5757 46.27 59.3657 cv
46.27 59.6592 li
45.876 60.188 45.4995 60.4521 45.1406 60.4521 cv
44.9683 60.4521 44.8311 60.3916 44.729 60.2715 cv
44.627 60.1514 44.5742 59.9458 44.5708 59.6553 cv
cp
44.5708 59.3145 mo
44.5708 57.4839 li
44.0391 57.6938 43.6958 57.8423 43.5405 57.9297 cv
43.2622 58.0835 43.0635 58.2446 42.9438 58.4126 cv
42.8237 58.5801 42.7642 58.7637 42.7642 58.9629 cv
42.7642 59.2148 42.8398 59.4238 42.9912 59.5898 cv
43.1426 59.7559 43.3169 59.8389 43.5142 59.8389 cv
43.7817 59.8389 44.1343 59.6641 44.5708 59.3145 cv
cp
f
46.5278 53.1074 mo
46.5278 52.8813 li
47.061 53.1436 47.5044 53.4536 47.8589 53.8105 cv
48.3604 54.3213 48.7476 54.9209 49.021 55.6084 cv
49.2944 56.2964 49.4316 57.0127 49.4316 57.7583 cv
49.4316 58.8433 49.1641 59.833 48.6294 60.7271 cv
48.0947 61.6211 47.394 62.2607 46.5278 62.6455 cv
46.5278 62.4414 li
46.9604 62.2002 47.3159 61.8745 47.5952 61.4639 cv
47.875 61.0537 48.0825 60.5313 48.2178 59.897 cv
48.353 59.2627 48.4204 58.6016 48.4204 57.9131 cv
48.4204 57.1689 48.3628 56.4893 48.2466 55.8745 cv
48.1587 55.3921 48.0488 55.0063 47.917 54.7163 cv
47.7852 54.4263 47.6104 54.1465 47.3926 53.8774 cv
47.1743 53.6084 46.8862 53.3516 46.5278 53.1074 cv
cp
f
137.763 62.4414 mo
137.763 62.6455 li
137.234 62.3799 136.792 62.0684 136.438 61.7114 cv
135.933 61.2041 135.543 60.6055 135.27 59.916 cv
134.997 59.2266 134.86 58.5107 134.86 57.7686 cv
134.86 56.6836 135.128 55.6943 135.665 54.8003 cv
136.201 53.9058 136.9 53.2666 137.763 52.8813 cv
137.763 53.1074 li
137.331 53.3447 136.976 53.6699 136.698 54.082 cv
136.42 54.4941 136.213 55.0166 136.076 55.6489 cv
135.939 56.2817 135.871 56.9419 135.871 57.6299 cv
135.871 58.3779 135.928 59.0576 136.044 59.6689 cv
136.136 60.1514 136.247 60.5381 136.376 60.8296 cv
136.507 61.1216 136.682 61.4019 136.901 61.6709 cv
137.121 61.9399 137.408 62.1968 137.763 62.4414 cv
cp
f
139.656 56.3755 mo
140.121 55.7236 140.622 55.3975 141.16 55.3975 cv
141.653 55.3975 142.083 55.6084 142.45 56.0303 cv
142.817 56.4521 143 57.0283 143 57.7598 cv
143 58.6138 142.717 59.3018 142.15 59.8232 cv
141.664 60.271 141.121 60.4951 140.522 60.4951 cv
140.242 60.4951 139.958 60.4438 139.669 60.3418 cv
139.38 60.2397 139.086 60.0869 138.785 59.8828 cv
138.785 54.9141 li
138.785 54.3687 138.771 54.0332 138.745 53.9072 cv
138.719 53.7817 138.678 53.6963 138.621 53.6504 cv
138.565 53.605 138.495 53.5825 138.411 53.5825 cv
138.312 53.5825 138.189 53.6104 138.041 53.6665 cv
137.967 53.4727 li
139.418 52.8813 li
139.656 52.8813 li
139.656 56.3755 li
cp
139.656 56.7104 mo
139.656 59.5791 li
139.834 59.7539 140.019 59.8853 140.209 59.9746 cv
140.4 60.0635 140.596 60.1079 140.795 60.1079 cv
141.114 60.1079 141.41 59.9336 141.685 59.5845 cv
141.959 59.2354 142.097 58.7275 142.097 58.061 cv
142.097 57.4468 141.959 56.9751 141.685 56.645 cv
141.41 56.3154 141.098 56.1504 140.748 56.1504 cv
140.563 56.1504 140.377 56.1978 140.191 56.292 cv
140.051 56.3613 139.873 56.501 139.656 56.7104 cv
cp
f
143.613 53.1074 mo
143.613 52.8813 li
144.146 53.1436 144.59 53.4536 144.944 53.8105 cv
145.445 54.3213 145.833 54.9209 146.106 55.6084 cv
146.38 56.2964 146.517 57.0127 146.517 57.7583 cv
146.517 58.8433 146.25 59.833 145.714 60.7271 cv
145.18 61.6211 144.479 62.2607 143.613 62.6455 cv
143.613 62.4414 li
144.045 62.2002 144.401 61.8745 144.681 61.4639 cv
144.96 61.0537 145.167 60.5313 145.303 59.897 cv
145.438 59.2627 145.506 58.6016 145.506 57.9131 cv
145.506 57.1689 145.448 56.4893 145.332 55.8745 cv
145.244 55.3921 145.134 55.0063 145.002 54.7163 cv
144.871 54.4263 144.696 54.1465 144.478 53.8774 cv
144.26 53.6084 143.972 53.3516 143.613 53.1074 cv
cp
f
234.848 62.4414 mo
234.848 62.6455 li
234.319 62.3799 233.877 62.0684 233.523 61.7114 cv
233.018 61.2041 232.628 60.6055 232.355 59.916 cv
232.082 59.2266 231.945 58.5107 231.945 57.7686 cv
231.945 56.6836 232.213 55.6943 232.75 54.8003 cv
233.287 53.9058 233.986 53.2666 234.848 52.8813 cv
234.848 53.1074 li
234.417 53.3447 234.061 53.6699 233.784 54.082 cv
233.505 54.4941 233.298 55.0166 233.162 55.6489 cv
233.024 56.2817 232.956 56.9419 232.956 57.6299 cv
232.956 58.3779 233.014 59.0576 233.129 59.6689 cv
233.221 60.1514 233.332 60.5381 233.461 60.8296 cv
233.592 61.1216 233.767 61.4019 233.987 61.6709 cv
234.207 61.9399 234.494 62.1968 234.848 62.4414 cv
cp
f
239.516 58.5254 mo
239.386 59.1611 239.132 59.6479 238.754 59.9868 cv
238.376 60.3257 237.958 60.4951 237.5 60.4951 cv
236.953 60.4951 236.477 60.2656 236.071 59.8076 cv
235.665 59.3491 235.461 58.7295 235.461 57.9492 cv
235.461 57.1929 235.686 56.5791 236.135 56.1064 cv
236.585 55.6338 237.125 55.3975 237.754 55.3975 cv
238.227 55.3975 238.615 55.5229 238.919 55.7734 cv
239.223 56.0239 239.375 56.2837 239.375 56.5532 cv
239.375 56.6865 239.333 56.7944 239.248 56.877 cv
239.162 56.959 239.042 57 238.887 57 cv
238.681 57 238.528 56.9331 238.426 56.7988 cv
238.363 56.7251 238.322 56.584 238.302 56.3765 cv
238.284 56.1685 238.212 56.0098 238.09 55.9004 cv
237.967 55.7949 237.798 55.7417 237.581 55.7417 cv
237.231 55.7417 236.95 55.8716 236.736 56.1313 cv
236.453 56.4751 236.311 56.9292 236.311 57.4941 cv
236.311 58.0693 236.452 58.5771 236.734 59.0176 cv
237.016 59.4575 237.397 59.6777 237.877 59.6777 cv
238.221 59.6777 238.529 59.5625 238.802 59.332 cv
238.996 59.1714 239.183 58.8779 239.365 58.4517 cv
239.516 58.5254 li
cp
f
240.096 53.1074 mo
240.096 52.8813 li
240.629 53.1436 241.073 53.4536 241.427 53.8105 cv
241.928 54.3213 242.316 54.9209 242.589 55.6084 cv
242.863 56.2964 243 57.0127 243 57.7583 cv
243 58.8433 242.733 59.833 242.198 60.7271 cv
241.663 61.6211 240.962 62.2607 240.096 62.6455 cv
240.096 62.4414 li
240.529 62.2002 240.884 61.8745 241.164 61.4639 cv
241.443 61.0537 241.651 60.5313 241.786 59.897 cv
241.921 59.2627 241.989 58.6016 241.989 57.9131 cv
241.989 57.1689 241.931 56.4893 241.815 55.8745 cv
241.727 55.3921 241.618 55.0063 241.486 54.7163 cv
241.354 54.4263 241.179 54.1465 240.96 53.8774 cv
240.743 53.6084 240.455 53.3516 240.096 53.1074 cv
cp
f
331.332 62.4414 mo
331.332 62.6455 li
330.802 62.3799 330.36 62.0684 330.006 61.7114 cv
329.5 61.2041 329.112 60.6055 328.838 59.916 cv
328.565 59.2266 328.428 58.5107 328.428 57.7686 cv
328.428 56.6836 328.696 55.6943 329.233 54.8003 cv
329.769 53.9058 330.469 53.2666 331.332 52.8813 cv
331.332 53.1074 li
330.899 53.3447 330.544 53.6699 330.266 54.082 cv
329.989 54.4941 329.782 55.0166 329.644 55.6489 cv
329.507 56.2817 329.439 56.9419 329.439 57.6299 cv
329.439 58.3779 329.497 59.0576 329.613 59.6689 cv
329.705 60.1514 329.815 60.5381 329.945 60.8296 cv
330.075 61.1216 330.25 61.4019 330.469 61.6709 cv
330.689 61.9399 330.977 62.1968 331.332 62.4414 cv
cp
f
335.299 59.7988 mo
335.065 60.0488 334.835 60.2271 334.612 60.334 cv
334.388 60.4414 334.146 60.4951 333.887 60.4951 cv
333.362 60.4951 332.903 60.2754 332.511 59.8369 cv
332.119 59.3979 331.923 58.8345 331.923 58.1455 cv
331.923 57.457 332.14 56.8267 332.574 56.2554 cv
333.008 55.6836 333.567 55.3975 334.25 55.3975 cv
334.673 55.3975 335.023 55.5332 335.299 55.8042 cv
335.299 54.9141 li
335.299 54.3677 335.287 54.0317 335.26 53.9063 cv
335.234 53.7813 335.193 53.6958 335.136 53.6504 cv
335.08 53.605 335.009 53.5825 334.925 53.5825 cv
334.834 53.5825 334.712 53.6104 334.562 53.6665 cv
334.493 53.4727 li
335.933 52.8813 li
336.17 52.8813 li
336.17 58.4409 li
336.17 59.0015 336.184 59.3438 336.21 59.4673 cv
336.237 59.5908 336.279 59.6768 336.336 59.7261 cv
336.395 59.7749 336.462 59.7993 336.54 59.7993 cv
336.634 59.7993 336.761 59.7695 336.919 59.71 cv
336.977 59.9033 li
335.542 60.4951 li
335.299 60.4951 li
335.299 59.7988 li
cp
335.299 59.4316 mo
335.299 56.9683 li
335.279 56.7271 335.215 56.5083 335.11 56.313 cv
335.005 56.1172 334.866 55.9692 334.692 55.8696 cv
334.519 55.77 334.349 55.7202 334.184 55.7202 cv
333.876 55.7202 333.601 55.8584 333.359 56.1348 cv
333.04 56.498 332.88 57.0293 332.88 57.7285 cv
332.88 58.4341 333.035 58.9751 333.343 59.3506 cv
333.652 59.7266 333.996 59.9141 334.374 59.9141 cv
334.693 59.9141 335.001 59.7534 335.299 59.4316 cv
cp
f
337.181 53.1074 mo
337.181 52.8813 li
337.714 53.1436 338.159 53.4536 338.512 53.8105 cv
339.014 54.3213 339.402 54.9209 339.675 55.6084 cv
339.949 56.2964 340.085 57.0127 340.085 57.7583 cv
340.085 58.8433 339.818 59.833 339.283 60.7271 cv
338.749 61.6211 338.047 62.2607 337.181 62.6455 cv
337.181 62.4414 li
337.614 62.2002 337.969 61.8745 338.25 61.4639 cv
338.529 61.0537 338.736 60.5313 338.872 59.897 cv
339.006 59.2627 339.075 58.6016 339.075 57.9131 cv
339.075 57.1689 339.016 56.4893 338.901 55.8745 cv
338.812 55.3921 338.703 55.0063 338.571 54.7163 cv
338.439 54.4263 338.264 54.1465 338.046 53.8774 cv
337.829 53.6084 337.541 53.3516 337.181 53.1074 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (010x004.eps)%%CreationDate: 27/05/15 10:14 AM%%Canvassize: 16383%AI9_DataStream%Gb",Kq0M>;YNUB8h>u?YQ4B"%kY.[lT'*YkYZb'V:nW.pJ"1/dQ>@pD84"0e3W"$8]Cr]_.#nO8OsO8:e*5->:SUg']Pf_.>"Zr#%S^\?:WEE8"Z^!p>]i."nG5PpWOs.qD0WQ.i7S9.Q8_6]-MO[[_>:&_QRr:MueOK;/h0c8H3e_1Zg$UC;$\+K^ai![2Gu@Do<pTG@%T?5?(q<]u#cL:&EV-:Q9C::n"h4uT7,ll*1oB&iN?9.lXHEFWBP,`@$=FJ1=00>s^;D!9oi8)CWrMNOV+dH(Y]3jW=#9K8Yq#.kZ%m?3$^T#d^kKu;YnZ%E2%rgUScX1m1Hh0->5CGm4iXN>Xloi5mZP1M#NT-5^V'<hVc/ui9\HF[6K*2sQ:%I#?k]&-X^1.Wsm)!$6a%,]sJeR!`9olDf?`WdcWIGH0as[7rB?Dg0NCs$_YnCRQNr:\s/=Vd=4I2JQOG3u("=7F>PM;QZ/&SG,\LniIckWPJJ."YRsbpM-$g%HF*SQ@p_i3]EL%o#N`_$D2LJii4)d(>VrXgQa0$a@G((K,\:2cP464q?iu^g-"U(t)O9,S=uXq6p$`/Z1-I!q_N*BYpKD(K8hMSS%S]C,@Xl<*NW?a(lJRcc)_Z)OoT6?NZ]A'GG=Q]ur'b9&G,Un(b:)g_<+JdR:f*Kf8KoA8i>,3sDKH;&NEjn`H.pEXSPeWBNIs6IT%,k=`2iR9L=e$e5A:uG/MKtjVp:K8.$W[`F#.`'m3/]3*:L&o$t"%jF8PVS1qM:Y=D98-.iA(s7&n/"^M2O&f3n-Pou"XmA!^mg#Z%4=Lu;9W8.j9-qK+[nA#l?7O?HBTHkWBn'fSoI7GpT<!X`i"J`!R,AWM_3k!gkqa.gHpS\f&U_I*3@<t%0IHRJ?SE]!KUO<\B[&4T%pk3Y)?\$"\TM:;<g-1aQEPX#e.?snQk6H<.ED3W.Ylp]k9fd=KHeN\t2qg=bSBhd#62s5"(a",l9lpU(W9H*!A+1:,_>*d6;ln>i%@=7PN^L2/*ro'(7*$F_WV-n]?8S=/`$,nE3+'R_^!'TN;_rm!PO(',%;7pn]d#lf66dKJ]BY1W`5$tZ"rs*+CFIY*pFRV1/215hl%K23mako7W4EC/Q::FH=?9;FRZF5EUXUFf=-jtt:rKi8r_S5K]j"jRp3:+>%6mjQb$]+f21F$:grCp`Y-MRQ>rVsi*toH3H\j\/:k%FNu=QBFQ9c8*SXeG5=rXc+2Bd/<2*Ep*k-*\p*BLhKEUhF1OHV*6[b45`[lOiGBAM]W\u_]Nn\oI8cFXr!._N<0Z'#7A3N4^[rVL%?LZ;>9E-<d\kXF:?i&)*l#6;LrF]:*[q5*</bUiiVbc*_o\\dXrU'T\rt=R*O[@j<o\\48rU'T\s!6bLQ00iFn4Df.roUuZ?SXf6%.qj7.W/t@uYuHt0hn55``,BAk^>])\H-:KI"Z&N[bOeLd:J6sFX<c"Z;:6%Grt]/JSs`$G!T(gD)Ra([HJS9H%M<I;cO>&f[-Dr!%o[iU+6m715jN1W=N?Z3!aa-\)P5_^mX5;`s_;B6)-u@[J.J?i.fPct?F\6DU&!B69k3q6;4T,J/iOp"AE?Jku5cB9nVs#^`/P5RR%Dp//E`A>.Y=jChE(^*N'Q;[n']8L#'kMsilKDaj0-V@*/$.>hJ^D6=R[r<%?3_DAA\m+$f'i$u8bRW.AKe9rC@WS4("W[17T?Wb@%")PEZYg'tm8QkS#Q\rIpGi2C[l*Dq!D0&n;A<`r-I,&?1.'L_LFsr$1d'.uu*r2W_d&L4oJ'"3*'c(@$U]\s`r$J%?n;VIlaN+2b%4MssB#2^&-r_-BA2;qKb#&b1OVVD##?-sD`']1P*D9hUs97YLkBs1(n>I:<T&+MZm%J=_$2RiHPYh(cP]><_:8m<434l?s@o6lJ1%8&)Z6biMsiH#_<-==Y+D-:d,Zk9Kn)TREYTn6'4`f9n@@>2g0VO4\k"IrE`l*#JBtPB/.-;CP;3oCa2-9PYl?Yr(/qj\TdLG3$1i%OqPJZ96Au\D`'"PL!Xaljqh-W*H%J\A%(6AVpCn%pk2a15:pVbiU>s)-7N59JGGBg_C*q+8c=E,g28j!>.]c$c,=G4dX8/D0A>MH%;Cm+kqRcUTbp6p>_#8HU;sRJjj]X/J=V7pSg=7Hs87'<.r,;VEMq)1Zp6YY;Kl/dIW7IFiTiq\!DH)eNj`[\SeL1$1UYJTggo:+B%p'5k@-9-&3G%!*T-&-5o+:MVn,/+7*$4)]%1fWml,WG&>7]#.p9n.IN:1=+e4+@?"\XhMls)^Gf(X6RJWRgsfWL\SP$K_:.D4KMl%NT143:iB".JA7q.]DJdIKp3'cJNWihf3TlWla?J1\b/gH$YggB\^M1>2@*airUnmGf/d7k4UI46Ek>P&X&mXImW>L:;7-E_Iao>O%6AR&Ggtjs(>2TocSpuu/<NNP(;8SLZ:5/O#Ohd]M?!N=(^,CB@m_/&GokGk:gM\qKCuCB8;I]?k8AF^k^&+0gk)RSke`9%@G@(/]%OeK!';Xudj0aHG\q0&(^cF3ZSp[^tuS%m(+4n@\n!WAFNV;u(Ur_Z9g#l*O5!C"&`8g6dEhJsg.,OLZ/fL%D>[srf2GuCeH$/oAI%:0nTBSlOuQ-dgsm4aB\jCc[RF\ctIZ!NAi4>L+.j^bBgU9CrfB/?%_20JKKI#7RT%op*.8l&,J1j1i]X_QVZ4@&)NV)h1N&gb*k/%93RLB:.\^CP6^3hqbR$Y#b,E6(6A\t?;BW@$-TOh:>45n[7s\jMs=[*jAr,./\fm%[I2qZ0WuI$h"c-$SB&$m5#WcuoW269WpJg:%:Ug#G9qIUV$ajdMKeo$:*QI`Bg&&[%V=sL,493gCCt.=1'gf6D:acC#_VDMOn$(!k,`k*i<,jU"-OHb/3\@'c1uA4,^:.mCA>f-.%<G+#&a=Fq&cURNnZUqb-:01S*;*3GT%,E9'I/VR<mSH5bX-%Ce]@GsmXK&3.6/gVDiP?*D+jSa,,VMlHcH#k7=1pm,/Aaop)-ZP$%5K`X@<kr<W(E[l$DR$+MI(N[]AE*!m=1)88&F(1I"7gCOpnQWIPmNJljECM3SbQR\_uCttQJF<7+16EKE!n2VP:]*e_L:h*lVA<X%\q#ifl2$I;:)VV(OB_b&',u9hhB'QrrOY'Oh<6u9rH,WqYN:k_6D'PCfkKASka`32Yk1Gui=S-;r*'C2@p"OSN^H\F)*9!C\tJ]5%eS>W5]);"aPrOY-@]5JZY$1'S^.,F@L5#ZHZ16]NP>j5d/GM.[92$UVa56XbkPs6CfW!KZrh!<lE$4>gTCuJ(6Y$+\A+J#ph_&AC%O)>nAec3+?HB=*_]C0F'i1tkSB`8J[c(DC9pS725<7B(F[NY[o7`7@F40"?VmJWfp\o$Y6;jHa"fr0/YH\_:Jlk8^TT_b]^6^.B<%'fR67,t$u=^qXE^,tl^:pej2fok$mg(]4g'+p5Q>EkD5&/@R.O2[C%lcZMZTXO&^o-2Hh"6f4VTY/M9iY3OsljZtAEDc\qCqGup(%5W2S7F\6[m;k`"AUYIkRHq'j]ikmLhGqoo_8[I"3SlP(mbqmL*YdVlL1cmR>!M:hOY,OfNae/A3_/:XH3m4%WXsuZZT-WN)Djagg%Hg?Qs:9._#qlnlTU^p/B16SMKlU#g#M\mHa1;!a`X0DmUqhUG['9O&(RB!#R[)s+A'di,#8un8#L-i09<UR(Wn7a1)g%M,BdqX&S%n!32rQf.JIao"rDkr:'$%+[Q_ben2YUQ>G\06ml"-otP.j=eQ'g#=X9jr`,s$iIc@UU.7tQ*QPqlot$QV4W()'B`B'h'$&I:RTQc%'NnqZ&[hle'_WCiq6o#q.AScET5M?nW$XU^G4UoU#UQ:l$V-kENU<iSCCsg%'Bh*dC@@t-]M99prb?YG"Q.JDNj-%9H<B,m[9bKt%mFn-"i,YZ?Ze7PAorD$a;aq#s]%+Q?j-&>!(Q5_a2AZ<8c&g%r/_A1*2_LjVgQEeY@agHOC1rrBBWgCs;N%LCN6AJF]]*DW._e"#%r:$Ep>@L`80b#q7I4Xc-TPmDGm$_g[@0DKW"cCj4aFS4,eTDY3Ln\NI;drlYUj36.kHli<`MC9<q-1DTL1H``)6dY`mlSn\X)aud%q&lbu`FoG9>uH6N`Mrn^&r:N6Wg^[0diP0>Me5V,57Ao7nZ,ik7^n)s]B*ofqCS5Y_-[kAU>8;8qH'ZIme#b9s-<3@>I2/t'O)qu%<FmC5:4W:29!Jd\hTR1'NAS%F_h`C"f&<1TfU[OQiX7hXf5SHUU^T"\U1n^T+fL)eD*W-@r)V'$hWoRtj%+Qo6V5'2FWdqlRMq4o%gj8m/+=.hH8a?2%(%qk3W$:a:d6bA0`MPf(=4Au,909F<&hUth'-X*TW$$;NTq?8JG,8C,<T'%NULr-L=BnmLGLQ8]p/eXsReh`3%@<C<=PV$$5DOm:F%q+@M5SAmp_B!=)_WBJum$2(QdcAg7LaXUMhKHM9WBho)<iX[FCA%9(?]*AKB;G=F1".,f7GXpR](gMjY$%'+%]mkHB?gH6WV>9FYp8:h8=PSS%*Ub83n%='[\K9GjIT5'id+X2:DdS!DH8Rfl6%[[f6a<tO-K1^lZ?3a-Q<3J7_sHgeEDfgGc!456%'M6^o1;270:XdQq[<a^9HXGiV^HY[Kd]Tr==h=ROH5><fQ7k08:"R+UF59cNX*1$>9[eSXNOM)?WX[V#AUG@Kc9\PlY?&*ZA'"HQ%1g?6;4p="GC3XNKcNP`t$@HrHAqP&1QeDh0D6]7U?EK!I,Xt]4Ig20Sqb*B(E']P**_68_3rRHi:C7[9_HTbH*r_lUOHE\*Y-0I1%I8oW((*^9Si^R0`R4ht7NYmlk<3B)H0=t(C+ba6<+L0Q!6TSQPUKS23jB&+GmJOWnFZ+`39"idSeTAcSBJER<(kLlTTnup]+>g(l%13W2rCMCd:h/0T0Q`Uoia(LfpMgDY[0o?@PN`"NpFc<Vt?3dZ0khp\;\"e`ub-cqR^$mJjU93uJ=`&UV#UJ,E],;cTgju\iAJI@M%^m41<=L!S)M4ekdDS?a4k^Je$IVI8DiP@FngYH&"06qQoTM(cd9SVQ8"7_4r:uPQ3!iQ%"?-.]aWEsIRs+jf1!aAL&9D!*Cl5$nN%P;8]<[mlU$TOh="\%`)"9Q70r@".^]pFZ-eDiF)XrcfPs5.kc(IutLfN(/kicsQ+6g&<Ymp^A\)CkDprmSdQ-STUHYYAdf7FBQ>$%\!l,$eWQ/=Kl8%7#%!/;>G)+BYhYpG'r._#1BqQn::XH7boTknV:qo^2u6sgeS8_OFu5'fT[63XlVe3@p1M$IieCo1AZi\7/QR?5%$!'X3rgbUKaf=4c,@JUYmeg0bYUW$Je_hDUc\eNfAoqHi4d)r2U<[5tYFrK?=dft(<5b5C#E*p^g&f5>.8lj$/J3#i'H4dZk]H-l%GcOgND]4M<VO_`^C*mMC1$c[dBoJC/;6"KZc?!NOBR+L9#RL]4Q<pn(YG0k=mRAci+m,T;A=aT4Jq<8ehAtpRm_7bbW/#e"<8p8=%.Sn8J<"T]jmL@i=DZV`R03f_J[#E&L(V>^QJ;Bfk3"?;"92]00,\Q*hM%o)^E'$%4K)rnukHi_`917erS-W@k?*?cOj&h<q.hS-:%nQ-%2<@5B/Y7pi!4q\omYK+?C0@V?"9=n++7(%[2F0GBH)*S+Eb.\b]nN?J@9)-&F]i;@\IlCAWP/iSO:qS@A0f5?eQ=I5O^jS7?%>5[1'iu%c/rjbt.poEa1egU9):RmdOW#cTI;'S'BH`(qqQ[%>F,&[esi/FPQ!$C]CM&a<"#V\[G]Wf"`l,>+`,LechVSAMilW:8M%.5uad0YdV7<T0FAXdh#Cc@]'Y)a7A)f.X_)`F&?4kK`/AC:X+4\m9BK.eB]R`^_MRm]<9$F#.HcFD?9lF![)3]!G<C+#WWQj]=>t%s0Hg==ua/DVA?!q7EVahc=6BkWfT6k3_JRsFKYD<XWP<ZWLK2g)0a*Ph9+_MWG,\>;T4&6m6"GXM0-AC[ecG"BH?JWm+\'gCM2`i%>AE#/='P'I4/mI+]"KMok#^I$\\-U'Xf,0N%?4bS%^+X=;@?Q%];\57d7VZuA^=da(;R@V$dTPNQ)T2_;jm&c%>L/\LScYn8NH29%b\<ITS;lVV>u.8iA;e^PlE*P']%QEid;SBjK+@-8OYh%KC&3`Q2qnl)HS)9>=?lCmgSnm'WS(Osg.nH/TA,]6!naYKQ0I%t=RC.l%VYul2*^W@[h'8jFn'9g)'?\`CGtgb-*Xdrk?5c8Ad6u^?XF@0u[_j#3Bg7&j01-X0]GbGE74"m01A`*X=q2M;Nb53\T>?Mi9MBYB%VOFW[7b^-\fr<ZVWNuhGPg536XAkA6=$df_-E!s,?ZpC`g?jMl]%B+SC,D(@9U&^Rl/ULV=jU9ImE+KVBVRA1#MNT'H8""`Dos+X%RN[pNKA_T%26D(8aGX6.B3(@rel\[p1Gca*eLo)53]9TtlZLBf'Y&1oo@SN)H:=:KoJX;QXC##bF+K<7/RBEN2JVB'S^1]=M6sHh%196's4%o19i'pMd-gg'V?m2JrcHP"E*7SXG9q'Ts1,GEMm@^`$XPQPq><3+-FJADF:7Ze^a$G\WV8pUh2@;4m5?;8LrRj.]KJcr!%[MN8QJfEO3nh\g!o@DMAP@O"JjMEqslg<]5O(m1+[+,E8kgmXaaj]J0MKE5Yb0]?W:SU#%-?<iF9q!qDrimO"hj$PI2($So9'Ie+%d@t_BpLsFB-*>O+GJBJ&I^bB`!ZO:0Sl%ioh63EN;FmSWMphEBAqIB&37e&!lI#Q9Ai?m@X-ptSBVX`4VbHruNC#.sfkotg^U4^0%k^f2:/8_Ji"uk8iRg<m'l?R`NMsGiM=HB<Ep&/?=UPEVhcVLI"O+E9S*e3VS)T>`ZZbLGO8h$R`#>9C0e/*`V4o4"23jpUtYgMXi%73[p_a4a:\c_j)J]tKZ=C0u==NESi1'<-u3`@]O%dPj'V<\[Z*rB-RqXO1*,j("P%h*H;r)c^M$Ap:m44cj"4QL`Dd6I/9qr;/R<%SsK,B01`FMD8.Lc1oFDXUYYTghag[VU!M(T2fIe`Y97(`G:qKFctF16-"@O`ddA;$CSC'0FFJLJ_OumkbPR3h7eMgrQ?MnPNN,oM%Kmdm7;]tnZY75/GnrL2LY;SE>m\TjP=9#t@aVnGGc2,dKdB(&ed,hB5IPuT-Kt_UgrR>(mTDP5:T#tDA@8B*Qp\G2Bas91`]uB5t%\&fU`cPP$rl0kY:HYQ[R1[fPNe+,_?Hq`<@d\5"3PMN'jd&30bGP2[KoV;=@j$*-Eba?U)ds#`(D]d1^es5a&YK+DDK:X:,N61+:%\(@14\#l4cSX%A.IJRaAg\00G3F?"ic(<&k9E(imHfkiuZ%2"=`HeUt#!BRo^ZJGQ:EPHeX7"FXN4l$Zbc/suIs4[l4/#G7YE[;\%TVi3.?_=1&Vm*YPE)2hnd&25J[WW>\oW@Y0ILqOEl.#@n_d)ESXo.-n2>$.)Z9BFe@k=6MVD:dfDsKL5f'44so@!!2n*0bhBkNu"%/S%r\>e+qGZ9=NbHB(*L2mpr]iLm+7G8nT^;du1%Q=43AXoLN,b^I;bc:$-_oW1QMAkI7S/Did/ER2?FQLF8MprEN<PZfK,(#\,@%LcTkiZuK[d;@17p/"^[!\_3QNAl_\CfkMY-`>)j!;?[inqkD(?1!Ki=arOZF).H(lr.%Hfjpl+qf8A&6A?NB;RN\tR@LLDN7?=Yg%)kC>5hG6KW2's\(>P3>_h05?Bjn:=6;6g?'Q9uUV9#$D3K,S>!!Xn-pcrd!hMV+kN4s`%#*GqAUNE2pS-f%6RP98=2@GP"5#[[D"%qRYjLDV%%2Ao9sT-0SW7Jf84S38+kf=B-Gp_01&1C%V*RI&%FPNojL=]jjLc+gb+N*Bo&o>tJU[)F[j=Rm!,F75/I%ToFXfEoEG8%Wm.$RDf#-(Z;nE8HpsBtjdpq8)L]dHPM]/?2ohYG#q;j'0Y1cb@ZucH+[7W)Ug1ofRJl]&H\hGMrNoG3&@@sG0U_:AR&`q6/[um<%XkCi#1\K.&7?G+3b,hrQrt/57B(&Fl`]gKWg\4,\[`Vh$ZH=a_T`](7C%efNfOPGa!mM['HUEOrg7h"uSh_"+S%4Sp1$s@YGqBEd%niCrO(SR+2EO[ZKlb(E--fjGI(iqo_*'7-_pGqM6d70]C;!>g0[&9hNp]2Xch60JDp23]n&o#prkFWVY\q^[9bdt1IH>Ith8jp8]%pp7O",!?e)nA2]=25sBn5=4i?Ugf8n5Pi[_3O)ofcetTT^:DV\J`;"o3e(Ooa.#A^^S[&Yq]^qu"klC`Ab+X=mo$pCiXl"XU9j9K%9Ng*\hpH[E`5au;NUDP^*&$aoA1=!lp>1nPnqs#t.sfjZ:\s[ijdfRtf\+o'fPQNP,kZ.MgdA[%.""@#pU'%T2l&A?>7:(UiJr82%H`?^^dE@fLfFI%9o]65dmFK=Cc>3nE1j/c^i\2:u0JD2Xe'RQiOKK;\j,C!aP+?3kha?a7fZI38j8jf\GU)js@7%/NH-&aDmbJRE%VJ2_MQ`"G=qGCW+>+cUb(b$.R\W>nN.]4;BP0kEeN+:OBQ/dXV=.,EDk'EBlE[ch1d%`QKhj#R,INiEF;I6kt(Z=>FNJ6aXoFM4h%N3cacTbGSH'0aKZ\k_Tug*jj1nNJBM<d&lUF@ta7),#08Y[;2#YFV=P&kXLs2l(3_1=r:T781gNn!$e[6eAh93`PkWe+BQg#uq6t%2+D5\oZSu9B(!9n$^6'h_e+*30XB`h@!rD]D!e4-m?Q0"ALTo:f3NVG3n7Nn$gH+0)=(!fQUK^7m8USfk=f0_q6QuH3e*3"&ZtYO%k-#B!d*_Y6[TK%;gckNPKc#IX)(I^dN/Ou(b6aGD,?/h*D8Zj;Ys*Ki?l46.Nt#Tn6lQ2;/PdL@g$US"]5)j=,d(U/BZE2eR"Aro%Ebt@0,8Jh7$0KCuqS_$rEqAF?.YaWjFoJ^m@5g+F46uJ:6!WaZod5f%2K't?8&W\Va'"]qA[8@8"KR8=rImS1N^,+j/+H?Hn;]n-%JODOO:;"1"?lbrp`D1okpK<7B+fjc&%_/\1IAGlV@R7FGh:-P;gh1Mab%'Tl/%Dq-[p>[%X[itZ^B#6fd"=ES$-$t"#f6\rK12eb%kAh@RNreV+n1IH/ZhIr;JB)Q=O.Sk6Z"O0B4,<n+O3_>)P7c(KNq?_DHSgGlou0G/@ClC*?.]_$N\S79]'g%C]CON_B03glUXpi*%(*B7L%s;^0l='0IhaK),"gE5"0d%chOQC%nFis^-H!,O@cf0LFR`E#SiZTIE4#*`g@F')<\pG4Lrkp]E^@o59H`2_<j-0ulg<:s4%UQU*;U)FO=g;?eUNHKO8a1En'hR0YmK*/_ZkhoY_E^0[Pn+Ec^6hl)Dp0_D*eq]QA<NIi_qYBu8U4Cnf_7Cq#a,#9e5nnQ+%:3%\%j+kX8M97ZKK/h/pri5V)X%J0;9+9T-SYi0/j">u>D],tpWp?#69Rhr`ZOB`\g%R.Q6ObU\3j_:9VGu:<0pDp9F-i%oqu2k!Vu`a-%94"R#02_eO?`*M4"b7s-RN^hHn"q1!QR0.](:m%/Ni1(;B%;hW]`FlPY`-of)j]q"Uc6sd*cGrd"crNBgqO"QghMVu32p_!r`5tt%Qh:QJahT_f2CX$<lA\R%o+nq$`MIg\`AJlcFN9L9"E7aF/Q@@^W+UdS$F^d[mgm)%Ki[?l*t6[P@dR,[3l/\7=5PQ:LheF%Y[,YD%I]ig-Xq&2$"PT,;R?AS0O"V34^T2G6LC$7Ya>S7<7-f54H6c\WF$@uam>`^E#\#^+qoh]_D=6P,'T(uD^lup\-IFGOM)N#D"FfUF%&hT:@ah3U!U>bHc?":e''.qTEn`q'@mhP/FfFM0<S9=OFEe0b@SM6Z>NVgf6VNA$)(p'R<5VF1481^>Rh`/Ea)mD]M>eqb3/0P.b%)//'H.VjV)q/NcPN%JQHNGUg`V+0&$H,"5E_Y7AH)N?[W6e]uFH%C84Kf';a'VH5&@P<$A#HK4-"N"55=JQ;Tdq_hle!m2e]>u#L%8<qt;=d1-]."3^^2'h4OpTK;S[M[7LM>4,[H/^A/6sq-qn)epYqE:t'],$.L=Idq23j*1f84Sf`_tW*cI?2#cZ^+.C^)B=$d;*1'%<=J2MWS^4J@T^stqE<=@Zkb^rra;ec_fle6p8ittEtu5(554IZ")O&A5a[nbeSo4\AfR*UL(QOoN)G"?7nebqaq.iDjIr%chY,[E%n[\O/+AJ3J9.5#A`8^4!@[gdW(5qoG0$-e!K=F#p8hEH7+o&^m`M87gSmLb_9Ss*f0(6(K;/1gO@aDnjaG+na+<sV6]W(g^a,\/r%>k@Y>Hkuc6^&cjo,>cArD$uX%hn=lQG6:hkdd#?QrkTG-\<&RXq3/_i#/#$Q*(SJU<JB/J[unM9*f>d(-,m>@5%*;!AR'FB>LO*%%JX2#-qj9%gGu$"M:7pbo.Z8TF#r:\Pio\TJdi"N=LSk96+bq[2K.`9-:C^Z+URhlT.P40:To73hK5AADjNpb1$d52QQGpp*FO:tJ%/6d)S*4ipTSIE*&Cr'P#kb9lspt6[_k0QP0d(-]*UZKikB@)2L)b1C/?UT2"TnE(i#LB+0?-:*)AFtt:AHJFHPknP0U<OIF#6_.s%#J54A("&kVpo+Bp%:`sCPrb$n:Z3oQs%[%NYQ+=8;jd9*?ZanG*igt?SpW/fhXG]GV*t>?]]D-a_$7iGXhN(MVh3kK+/IloY$R*C%Sq>t+r:WcW3`o].BRI\r95h,*f5h[]o_r.=q0#5^5s"=05L3>/Va?U0GSU0Uk)dUZ'C;#LY'OKZ+'RY3h719Dd@h\V:1M&:2hp(3%C[b/^J6^LV`Q=7+h#\cDLJ)e0,SVL\-ZPh;MQ=nA:Wl2jqu\&g4;:1;6P;+iUTMlOXdD"@b8Wn>,5:NY]IMh;kWGG1/scc$H\86f%<=KA0j;u9kP"a%4L]4BmBZD"9I[FtJO;5$e*Q)m:h1g;G?Mh*54uWdnqf5Bp0_?X(0X[rg*geSg/6(jP,*22jhhj6U*oCaTrl_+X%Bbd5.2A$N'+6,<f:R=6l_n*2ujB0AnB^-655<ooKA_ZOe$r@1=cX5H"@#!s4"'!jt`n8.LHK/#V01@4f?f#'cW2uVb&V#nFHZ]`6%MbXp+&7b[!6Kj%V?hV_+c0_5ae7g9eHR>mJbB"?4lPl&@"5!>3CcUZ(MEY$f:A!egMt/.2a%Ht^$ZY2g@l*i8GJ&slTX/MU@kY3H%Ic@'!!hY-khhaN:7@`TC''9$O,Q29==c."bK^h7%\A`SGK]+`.KF>+:_pQjb2)],D-:$`A"7"(m*cF;3./spO.=C:$Ypso%0f-^'%I=-:#U?"N&8($R@*i\1i3?4:4f'.plk6'sY].fO*EW#92+3+WNA+B%&e%Od?[!Uer+`f1n*YNFO6796'?Ddk9Ur;J[&31_qJMrT[%-8NJ6)\\h>k.O6,b3P23p3L8`p-Lnt+Z'toOkC]%,NG%Co)@-`4>Q3O;Kb*]mimKVAoAY$7&5^n0r,4qT6uWGSe@I_rZ7IqS2@U8%4Yj6GD1??]5YORd:/B/^<3Q`Ul$6DaAk358OaVMRlPEjKX"<`6b<q7eQGo%9eFh#\aUsB'[3+JXnOBOsZs(Np'.\4TETolmaCJsW%ZQftieQmb#LS.I7*t.fq\H>Irc`8#\gp#?n7,87_2B+PKWT\$/=ODbOQr-aO74W(:dL"Vd\]u:qG9ZCK3g:'"rgOEck/.XW?JdI4%E1qVMA'Kd]<^oeQm@On*1XBOKHoNM"_NPQjFS86r52:Z+WC,gc"_S4'4!1W?ZlDS"S>5`dT;iJJ+"m7I,U;Eg"jG0YlJ/o@iOgPF%oA$%%[rkdogZY'uYe7s2*--8(_d&L(fr-WfY2m?4`eoW>QgpmV@Cpa(.S:-uoEIhpQ&Ugs/<$Se(OY0M&UEC7lPW>B(W8(^g<B_j%71/l.,hI`3`!23G#0gr/a+RD6lSB,-g$gK@K(bd$eMih/a?A5WO!7O]Y0c7a(,Fi^g,NJ%Nj[M0)_[031glb(=R;6-'o.3./`H%0%qs9>p)rE>oDZgNX&:Ghn5`ss<,CtKn*ZX*oRES"$%gu:]49fpn^0&$M.e*JW7UVH#)u++*W/T6s`,f<)kn"`3jb_SSLV[@9WRp1P%8:C7S7n+uX16.;ma;5dc7OlnDH:BC6im1.)3sN9Grml4QII.>C!,:+FbfIt^MZIX='CFD/+)O)3.U:=M2Z?[cd!6LE.\(hqHlU%P%fMo@gN/]n6/uDo7@ObV,G,If$L$OSO(bugY=tp_3X)Fak<sC_u^>KB\nF);ESlZ_A(AW,i''U6[2GdPXPIeV?!^3G<PKH@8:Pp"\%*&/GIQdgM+!E7Y1S?Fimp+&LrLY#;N(/FeHJY&`]gN1s?TJ<C>#O$fs)7L.s6c.sc0?@B[rn+A\Q(NtuQ(P1A4gjfZ\l_&Ig;nDL%$DiZ'o+nMc0A^QR2tB&M`Elt/qc5+]k4[aHK(BabN7)j`&!m$]]\-C!H"SY,qs^*0XOF!ZY=I!0m'ch8HmlRuKgt`r\b&Lo)4'W4%'9Q_TR4)'U,(oZRh(CV'1[O$tm;c=(09I,qgP`MeW;f&fV>6/#W'ArEY*sNO2&$_>k^@ib;9<]r2RLm-Q0#3R$p.s>o%Wqb#gKTc%]oU;tqhiP#CL16K29PCJ4/dU-_D:JX;7V@X2rTa6*SkWA[[8/Q;[mmF3NUWW*`=3Kb*p@hN6[akAj<fdEi^1eLP+f2cjIs?4J=(S%dWo4'W1of%90[S!EZ0(dg4g/U)tV_^q*n/Ir5j%:3bBTK4-(`>+mss6,jHGOn*!NcmZR<(pV&@`"5b@?V#A`LEh#)1"YGOP+1]^k%lZ)G/)Bq1D4A7KLN?]JJ1\0D3+YSrcWX;>HUVdL5#CS6E!?J%]KRo]ZF4WZVQ\9Lr3+t!W7$i:mit;&t]@uEd+ue.Sb^^O+2I0,i%rOWB2B@@%Gde2C`13,9YOMd"6`AtYK\tE<>==6lSPYDt.?THDJ\hIhYhJBcc][j?ol%4kT!(n:eS'IcSYZs4BmuJ]_/h!&=8A^=O%9c%>!-cV`P(R.SUm(JE2RuSqPSm4;tD*,IJ\tE:hf+0[?Cq?:m7BcAdZg!'c7E:rn(Y#:7d%Bi=dfn!'i5rt`A^^hEdR@qD_dq4"%<L"E*ZMrO!0m@k4bbju5"Va0RN(*&c"(EfN2I1]hNKR!PPY4Mjho;'Y(R.Q/HrJlMflTLpo]D*kRS>0&`RugLb8D0]Rk@6U:A>>F%)`aB?.$q*_]qRl)dfmum`#7AuB%)USjgfL'm)i.H`([oPhg$;%RkAA>r\NpHb,4cR.Dc(Da@PtBJ,qa7^N\]Zh:0J;g?j)YA\;8!%K!EAAG<][UdGOE,\mXo7h"T@<^,MbSI<BONf"1H/hDj.rnPnjE.i,fGl9nn=k"SYhZqFZeO)n<,h"8nK.qlgVL&9f-Y6NoHjXd-)%iLps<FU@ghgA`$91;+IN]"HYb\]WGO]B*8kHfL1H\A8B[jt9mcmu?^Bn?4u>`eKLDN4e:*[dR\$C[N0kM7Vn'G+)=]20X\l-P(RK%SaVeni/@"-F1VT\F4^GhM3'EFJZcQDCLuQqGQ,j^rn#rE4Vt9/5I+os?,)WQhXtID!6"gQR72t"8p>'#PW4%[a^f@kR?80I66d!G%Lpb5j]&Ag0Hs*!(OY^D>K0hO%cUri%l'>rMqD#-#Lb.nQ<.^ZC8MK]*M3,_(BD`W9E+j!.TP^e/T'_^p^\oouJlnXYn,]8W87f&8%O^ggIOilZOF@XB<UZ<@ek2W+Y9KG#mY@lpd>-*E0H/[1,Aj,*=<!1s?30&nDq)sRE9rpMP#>O-i$0R:fSI,X&"mC.2q3>qT:.T<`%#W(pD';:P8(GSc9)Nk+NK^61kbk503OGc'qf`;$<V_M_Zps2)53*.8H.Kc[:+?D#^J/\p=UQZOa`;OTCF7f4S1*>O'1.:"S"SI_"%CG+*lN`-#CF`L>O]GmEu^E,$I%WX"(mlcMiW=/kV1<d)XpTic.GhCAe_qjhXQ%Rk2a'&d^_m/!98,"ROn$j<i%E!+o)_gl'aF'_4%S+9$]_k%h87^smc!*_MTVS$k+*:S\EHM^M58`>(Io4LjPgi1jul6^+Pm<*Mq;d;?Vn3)Yte!'Ye[`$mTDuVBh6f,Nmqj-m<bf@UU%jJA&DZD5HF@6K$TW'oEe7P^UG[-S+%)*5O'?C)HCUH!LIqpOgt%i[.GqD4<;iqd,hiQXVZ9S$M0DarAXW%o5PM93<EE+q6.HE_t/%S"M7G2l?mjEK<#5b2RAO\DP_mYss\Ij'p],2f[<6U6:n8gS*pa[PCsFlcn?Z9UK$)Xr7KaQ\_V=""K%6p[K!(UW;&-<5Q=ej3)GU%%Ge:/oWe0OY.'$*9bi-&ea7UaHfR-IN@DoUONiJsi$?`6Q%e>0p4Qk-;FF<IHI!^c:6"5D8*0i(BfIeT/3uhbWZPcamAsV.5NTao%DXY.r=ku.mY0W_IX>XGJ%J"B5K]`!a4Hq><bh>II/j/@M'f!_CHd_DDf$D9(4o'&fafF/0d8f;ALMa#0J*Y:5'Cq='e*u'U02$>!%UJa[P$d8H(-E#(obbJjbH5!_._@mD,8hDp5dI#&f94+GBq>!0i]<Bo^Y^>"X&ZKIlH?_VYB?$HZ$aJ9_0?Z(+]7+)t8PRArhDeU1%BDu=mWe97.Q'7;!NQJPN<.#"qLO5%pFF21"n;I=@]@4m6O@H>m:MQ`@d5,.)2"&5Shu0VF7^ofY9AWgBJu9"%2jT'k1UihEQ(o2^%/ZBM](c=o=F%c<GjTrklRb]Q>R3\QAebi8Pc?;ptdTMA[T7iEE@KoR?V!8idDGW'*fOTqFbZ:K;RsI1B!SK\:k:[;^=r#nj6==&f%E,nV,e>COLZ/i_^9TMP"?>*>HQ5$Fd0d@k=i9@mM!*]<%Zl#K:EO4*i`+[/a-XN(Jjjb`U[pR]lbU>&\=[[A3-VeIH/n#OYFE=*7%Xf*iUH\mO9QY&XM(@+]19bT^1[Ipa^k7q'&,Q!jroh+N+NNlpE-a,(#3Y-W4e*UV::m`Bs2akNA_7fcRjm)Y/qo8n%0J;-F[Pa's%l_c?,/4Z9t'J!\"(#okZ6k%!BCUF:BE\XFg*%,F<^VS(\YT(b?d%rJNaQ:k.cJUB@5:##QkZJ!J!m7?G5Q@B(%s`RQg3:lB$_LJ3%s6ZYf'?P-d:-%Wi7YE-(Yb0bf34hJ=.[BD8q<`/XRI$0-/K!Z@KCJ69W0:(gB]G[ZKa6qa8-BX?UBI?a;e&G]o^40f0$hnDJGh.7%U/_N/bX>GHIBRYJI^p>q:g*83`kr:lB>8J_b515j%"b`J4-tS.XO#2R5_D2G*^VU4P:dhibRS`iT!5p;OTcR\#LLAR"(qZ.p)uC#%d%cR2S-9b7o,Q)K*%MCND@U(3)q`'.)!FH&^hB\!=b(L5!/&V^NLL(g(S=!/Ac+*p\2f'oCugC'^plCTI<OMBZN)ptDgFq8^Qaf!%.!cL:rdd`<qGM@+XK?`6o(>)$@Q^"J;$jT+%q!KB].`Cj\s+l/IcN4jau>+mDYQm#r+E#-1RIZX<j@/@;SGCj.5%3N#i-AFe,O6_%_=$t8ltiV/n+@>_<:?r<6_=hL]@S\sGd1&qF6n8P,)8'<HCWF?Gg;&$Fg#00Z_>BZY@$q(IKSY4NfXV\OHVZR]m`6S]6gTNmhW5a%":YUll8MB`fAP&6iL*r'h<Pl*X5D"m=0d2O7e9j(^"4nulOI,:_nCNHnbVc"<;YS=(H9*L[!Va6r6UW^'1g54h!=,MmKG1a;>Sof%p\I>)A6;mdR*sgDXaW#&r3>\_MdGf17R?d\f.[,OHm@geLYh;Te9u]H06tD.nVtD:DCr$XNnglXi*O1tdW-?%qF.<[:_3Kfp\I;`%'o4dd8L*$Vf7Q]AXaZE(,4*hO]@S_4<kmROTu$3jMcL)[AYkA6]p#R`A'93)^=@.0h@I0K03Sej]T6ueHi4"\=m.gAKAYu2>t^ge%pgW.H(O`>k`#dfDGn8H(>Q%BYNT"3YkZduuks<rUr*I,=ZdQjZAM)d((KZXi]@UsXD*77"IW=f9)uX*XkZdui]8pl4p@7%\2se5,%hHKitqup`1%">BeO>CaH'6Rd?lPFD7j13`N\CWD1<kgiLC]%`<aBSUrRu9eJf5I<\RteZ/c^0[UgWpf;5/'=q=crIKNLgR)DY4r+%k)/'^(ZN_P!AuE+A`S4:igcQ'qRq@*IP(#Z>f5Ib(R.,Gg0+NXfMM>=7@W[$Ed75'rM%P[5?A>AY?qj\@R`ZoE3EVB]5ki:rF/2+%NdS$;O(.=`e^%r@`-_HQM%.,J:H33?UjN'7'4MXRN89lqqF0l*#T+NF?9`ACr6EEXFVs#LIaOVmI81$)IBR#MXa]otT$d$"j'<!e%Lo#IXK:eEl$WnD:65Klq_g<9a&C\&SO.I""&Ji*9aTM!Ymn!pY>kHDW`JNou>$GhM17+tVXJo@k.e]$B\qlJha&U$Fj<K^;HI-B8%Q-MmW/1Z(Hq>6p9.<kAtdNXcKQ'sa=gW`?sNE#?5^87grO1c1B=T-W2]ptQtr6!6"IW%h?mmm2qn"3<!oh_fijP.ktPdUFq219`I%IAVLDhVO`J<dV._9/kQ&CceI8Chk\nB:kOVQ1IB'qW";rUjlar<e!hLk;-<3pVb&(INna$<+!1M<nCt'hp:G/]"QKFN`+J!lSDK)%m'`&UFhbPXq>$Djf:!6#-(J/_ls.08358'skFXY1b5:q`r/*PA+dFt[2l4s+[lnH[Qp,;p?gQHha1<Vqd[>J<?9A#LrJ?^FGVQt%%>J/7]#PJ9rHi'@LG932lfpk2C]^+n*/mZ1QGdd3^V_&IDk:L=Qi',8T(HFXFh`06r65H;J%(A=SDQ?^8aH:qqQ=m3FP?2rECK$49%Nm,\RU:pS#egm^,jHAs$jNuE&6;'ClGdYEnjs6hpV2L8=1f^XhfLaPmYd]#H6\]b^E':8GT1mj/iI4EDeq,T\Au#f!`Of%@#-Z?(%4DpeI(e9;&`($oAZF>t^<0g2NjQFY9onN<2d+2=RY$^!I,guK/,P=[o\bbI=dL.mEjnV[cOr8212O4kOD&cRTX*N(6mpBEdcYm+F%m(bP8glm%"P'.Y?;89!c[aB,YEnslS7<n6@)`ag/BD=E2(4F4+-YA#/2!6R]QO',;(AYMPJ3V.*G2FW2$X*I4.9G5$%P:TGN\k*J%8H4odGBS2lKpe"b7%/=A59i@t]4L0A]_LDmrlo_m-pDl2X3Q?fpn1W3(KurT8)'NjOC)r`-c.KK?[:V*"nBF@<cK0knU<iNB50ec%-"0F&=Y-P^mN9R#7*'4P.Y&"\U2nj<eB0dSaq7g.UrNXn^m!SC:A[7s9H9TCA?cCE_NUU)P4I7NQ,uN"IblLF'[8X\rIWBH[&ml9%Z5GQG\%=U)Um6PEbSn/Xc=/<hVPRJ>eYgWp_M:uLhQ0qFQ=+R2SP4O,VSkTS^.$jj=-ICFEe@HJF-BI>[?m%\X`:n_<6/EA0>A2b%bl(TA,2]nbe\G3Dn)p97c^FZY-1c:Yj7@;b\g1&CjOPZP!7q,#K*@#@b(PSW?NbOA=TBEb)>^HtEOCV[#l;m1kdSeuFU+5%>NPBf%AJ`+\;ta:Z<:I%XO[\=qB]\iK.'F<=17:FD"s8u=o<\'nH)e*kVW>(b35'S`%:$(-#O`RDPrme>bH&4'=b:n2(COp#\6CNHat(q6%mu<aYd`RmL]-h<:qrX-rZ1MP[ZTXs$XGBj/^!AtTJaW(gjt(i;p?!f'k]cc,72Sn6k-qQZDJtKGYFU"0=1WIXZ*JhRjnE\h8Y<TP%eISO*daA_>"%^V3a5c=Kf(J1ahI`YAL8,'6S]r`8HP%MTrRVM):tF`LQ!lQ]&c,1?h0dLH%bnXA,0]dAOj2E':8[:B9=*<sf%]As%N=lkAR^fn66n^%kBGjK]-<T&RT1ecD<;^&)!P%(3l2u=l8ci*1FZB`;al7uqgJ:uA0C7bI)eKDsPI,t9.g<s>1sI-/cU,kA\%Eh@%?6#Y/Utf_V;dLlJ>HH"`)^m,MRQ;\1C2GmWl*'u7m<pt%aWj!Gind:+,))%gLMEIFjA;H(?Cg-:4.=4cKfS%D@=U/nBTY3fh-'mQ%o8%d]=$)7\iT2k&AV+dr9W4GBHg8YP%MhJ$5++W$K-M&7*3-ikc,E<,87dhLm*tr;Fosod;[Z4^M#PW"*%e!&Y+Bf8Mn,7^eGSRL%1d!os/`tS@po'u(%W?MgR<Ep#[?,^&!OB4UM3usL7#nCp_nsUB$eTbRI66`R1;k)JCmAA94uXD;\X/;VRBtZG`U`KNipOLbQTtM<%SKLU)au[K?mAb!5O*#HZ^RIKXNR;F5<gmoip27T'RQKokddt?$AH)@PjWK%Me>A,<:-3*eH$*#G1I\:+DA3+]X*9c+3[htVj)qPf%'=[)PiihUtjH<[p^64&^4o9t,<of&;2qk(IF3SXn!>WFon-hJ/J0!rpfDo5^Ucjqt;jJ\OMN,m@PE!UN\l@2PQN9pB/O.ki[ERe;%gK*1&k;JVJ5+[\cZ^5jof4s>'#1?eAX8-q=(khI0P/c'*TBEY/4BM/O(SW"g!LnFCm%B<cZZ(%K?)8p8%aHtu[]6a[ce7"#XdtZE%]^_Q=jbp`X[8*]'QT(<iV%mc6n=FbO=3b?aSc%)11ED<h,5K.H]tSS\NL7,Gl'0Nd*baJbOp;l9BAi:d%<"%Z5P-o;?XI-/(>%^>%pL8&QMJ*>eM:&l%ad(AmGO#7IkQ.'pqrGS&)hdC"C*BoL,jjCL6>FnOHqL25R9H-ef>d%W]IcG>Fm.>>a.aZ;fmTqsAj7';O!82=%Wath,p/cH2ceXN/er+PG&Y%I/Q7u_L*a,rAF*f)9*-\nXBQ.1gog=-RF75ZADqr=1P8l8g,0[3ekXj]"F'DmU,;_<Y=H=WTM5E-!%.R*VGN]R48Q'PiZYu-76M"]a%(`V"X%$tY388924gRK.ejj5aVXC?aN2'S$BF['&:)api*A'T4e\],WD)8R*sRor<+VVCK8I\A')%jPN^n9#^IKI4r@^>acgZ?MBR!DD+L!^Fi^5>OBJ_A%hm<1faH&T,_e1g>/aQQQtV)A5DK+-%"pY;L$udgfaW%?X$'s2mZ]b8srhS%g\1H`pgIJh4;KH*h?eXg*?)8JSZV_Ah+.J(lFOZ6[G.<aoViAmHfsa'X'D7<DV\;>51jRQ_AoA@Ns3lA'Ohs']:Mm?D0]lRkRl\_%0EVIRKr5/T-HQ&3:S$\hYqsRXB_5IWB!X#>6r/:"50=hfH_4s@F;SiDX$lU1SeC:M'uq0^*+K^mXkgmrgf/Xs[Gm/c*YdLOYs$rD%C`lGdVcU<deiXhn=S.C4Q4rN!m=`=;lT]*?PNL+'[T:h5pn%=C(ieO[n/esNYRWY;hiI++8>Q-d.X9%t*bVk11]O0RDBM%K_'a3W%r?JNsfAFiLa-/l[/0;e8q,l;q$cV0=r`iT/m&lEbAG^m.4Qcqg\aK<CIRh/sP3(ikSG\UD9@M/F;K9!O8H6d-&mkXS=98WnW91*U%gr<W,7Vb#H2C;X^_WL#Tj.VhtB0+F5X)DGFT3Yh#X_]g([P+Wc(bUq)XXTkuVC+$2r6?-'e._)c`hHIon-f`Zr:9hdnY*J+^%t<r%MY`;7a7Ub09TPo7iQfMplg*ISSk+pi%2RYQe!&h<q,#;#8.WXF6Ol%CNf?;66,S\TYor`Y6&lDi?:-JL"H<Sif9"3Fj2Z&Vpb?^^%.DE;g4B'%lGEeQ2S)$W[f<nLkiOQ6!5A*k%+28o6K6IIq-Hk?&4&0?nIT`nKZ3B>\/#gKNqpoohNRRR`BQ_7>*OE4<8@_<fa6fcA%ejIkuF!]PdO)tC!Q,?e*6e]UknP]Q"SBQGX05s$C%+m4#\KV8n^98&jBXbaT:Clh7)i3Li&eEIQa1%TV@_G7#'*"U82Sa]$#kF#g%QC?VIc9Kln[7_>%g'sJr-%"Xl%(0)e//9'.gRlf)Adc#rI4"A+j2M5IYLJMHWklQOAEE4j2QJr=m1qn0a(httA(_i,c=%-RrcNX=%0msOO/k[a3FC5hnrG:mFIrY;].AiA`hb)3DnniZ'qVq]+BKU%)nbbprq9nkIIBJg<Q[d'6DYuuhR4i\\X,fB+Wr/Cs'(>7J#63&g%j0W;YbWe,XJqrD/S9UQI=C;'TM8s=c]57JoM<DK5s6R\aZk'Rb2orqL]`1c&4AIuVOSkjeO4+R[pp!OU;s_-^o=juK2[5jC:cYfX%&@3rnb9;feiuo_Z-,0(ecZu;Xp"n.9rK2q!EZ3Q>q:5)=$<N2DVT#EO-!f3=G#qS<E:Krb\!S=\o%Wq"jAijgrDid.SpUo,kk(FO%-]A%6WR]`Va#^p+h!)_Xf3?WC4KUP8r[QFRHaelR=p7Pe+umEs2]D3jHCdth?^iC<*R)[\:[\qC!T?WT/Uu)$ki]lH"TGtuTTpQ#%$-%q5)`a8[b\^V2Q'!W=",soTBtCeN,eP!-$aYe7QbUg.2uR]e?ERWV5t<<\_6*I;UKMeIDGna7((I0[Dr0=Y>kp,O3d(-=QRB.W%M!Xk.V/2?*lmDsrVC3q%cM]T_/%jHTSof>>iZ7Km;OSR3)leFAoLeD&,=0M`8:]QE$7GQ,'fcs3`Ql#HJd3(qUm:&6qdTj;^2'S]%6BU3#5i"DjSRj2tY9/*fYgdZeTieWMED$'O!=jGA0\YF.loQWJH-B%]^@]eRjVRAK:](n`9#Tl^-UWLV,E$[5G'k,r#;]>ndU"Hm%Vo#!0O0P_sBTZ7+UB7eQ`@C(O6A&7rY5g6MnF?[PQae"9Bb9%jKD.[a9:?GaEi<En;lBfN)DN"C(a*t,6hZ('rY]k$rlg?g<7+Z:%0\3^j=ck=(\3#k_B5o$HU!'.0&?0\0#r=*[V-$/kMO6i4j;89.6L9?>$C<6[VfR:NZN7C.X-cQWWt=K8(rDkeWKN3O\11a`N5,PY%%*JH1<B,(Lm1dlRSQk+mhJsL#pnZ?WVUO/O7pifo1_qgG9FT#J1_s4_#`Zg"o8H4M_f:&NY2jY<XLAOf`eGCd87P!s,E0VDq`nl>%hhr=%Eb_KHE6A$MFIp,[bkWNVYTh-,`10JcEVn[$Olp2p^?@b:<66R5?q$*CNB)2ONYYk`YpHKmF2P0%BQ@+&=*)SBF"UYWf'kfH%jd?`;oh*QV4D!]Oan*<n>OoZ.q\gB>/B\P:Ol0Lm&LiK"iR!lnp?d&=1)kGqh?7Zbf??0U]K>`OkL(npKfb4ZkCLXQpiX-sj]P<i%P*;(#.-?GiR2P`"p)grBo[2s:n4:V?>:V89&&aF9[G@AM5b2)-cgqCUCa85Sgg6OmTd&p5$OafRU#k[t/<KHC&J#D>d0>!tqZg&[%i'<ZTH"['ab_K,c#"gFd9RM/7T*MR;klS9MhPSLC2M2Bm9q'u3[^Z[af4b^X.Iu6i/kjosbhb=m`+n91d?R9sbCkd]l*Q)^\#@+_%>R4K68nNK]fl7@hD:Z&^F8;$/?O+RKh:0!)%nBdXP5sa:$+-[BG"O9::MKTM:(LBrhJDK5PH!j@j.5k75Q@.OD;A2e+FEKB-8ajq%>q1n":E)FdoL\.4I%^k!/?YI;%du9O5c&^/!))]?a7GFs8_pS2)>GO?kE+oZR,leNDlWD'UK)+^Ii7>1*NS`+XT[k&bOMsR43@:F%,QYf",u4I'SLWd9.5/Zd.E2dg^NCnYdh&uulK@E6"Zu=_Yq00TbmWK$0=1#D><3o$K9!o67VtkLbdre6e!X]2lQc58]`p:i;0KZ&%@_'C#%:E@)Db`qY=1<lO\i=V>8u8Z-/'FJ`,$1h7U2,_IAFGF&4dMZq<%sRbp/$m>k=(4)+cMY>@6e`P3q+sRbl.\FQu1%\Vs07]%$*,FLr*3`@Angt.Mj]PnoSS22\g,FA`=gS!-RKM%6mg`:n)/@![JTX(n_cnk4Fl4-TI54e3QT#7H)JQ@/9RLS-d7;j>Y0$fccu;S%UZBZJQS<%a1);BX@PNug9,X,b6Th)p@)nEZm^=c]/]'O:a7GZe:=C<B2%V0+=XK=UHT]>H/%:Qc'MY;%U^?+$]YI&#^Xj*qAJn'4%\'/CNm&+0,+1H%S[750[Z(/nsG@gTU;/)?Me`oTrYAUW@p@D:$FH]A>>lMC?]5-ZMl<CSm:#^k7qMQft0^&SW*-U<B*M.KU.KbRC%m-W,iag9N<nX"@0k)U;!W&q&I7nFDnq6eN`RP2&;;>YmJJ8B!"BB^BkJr6Nrktlq21%>)e_(0kFI,1nU^6G)K[450EraOi8CTFZ7%L"=Z.`kL83ZZ]BPZ_cfTG.#kL\<DeoV;$pVC4>gbh/BPS9&3u@`8ff>WDM'*33'esY@+0Fe5Xi<d6&cXgOja,,8qFc*io`pUiYFW%D=I."s'HfApSe89Jrk@2j\@^Ic&"7uS\YrN:J.!44m*/LOBiX+^I;\T0q$aZiuC4t@IrW.MYt,Ol$3a1aFKJ$20X<E#qOKD]W2mB%+UD]ng`Et]H/Yl]C%ct=rgdQ@HBS9p7%3bQ;&Ef&T&$0cSondPgI-VHR&OC+G:T^CI]1/Dlt?HXW:&0--Q.3cQ8RWO#(aEnO6MK0%b_,n@RH"NOjBcaMq=S,S6b_C"D#&C*;V(2?L!8(_=lnNj)HO\Op@E*_*npZbLQS2f3VMn(]u7ZKahmDZ.PpAqC]'!CMCP.Pn<?hC%krBG2LYlgK/:8>?NlELGeCh8=?h3ss4\!UX'r-,>FW,[<Usa[SjDB0PQ@(4+r*.-'=Q5>%p32"%lmONl5C3((1m_?L2QmlD%SJI1%Bj3^I.eJB?[bJ.1:Oms/V"g79F'oiCJs]]0DCXAkp#c#!7]ngSS@<WXKcb0\>/t+l0V*t]=C$+Q(GKBO;c^,kOr-M_)-fmeX&B7'%<!HE&E((gE;&NV5Tj*#!.4TtM.IMbO6)Pub)K3sDR=;!cEs1*LDu7ec]o:<p6@Qf)J@kC>i;kJS<j>KUnl7ANQs/A[[MifG>?0H2%6g2J,gA3_bC2D2k[Mh4@V32dVZ6N?soUN+:S"#VS;aG9O$,`S%T5<,!C+7T?*gRVml/d8[9RLg\:=>eJ*[2"&%`qW$A*6u`''JiY%\a.'no)oNg1nAUj`:au"WEH9Z]>Fe68rpL"7J*jVD8,hc.,0,g`HB)-_o4N_KD)g,G.>J-R/n:)JeMg(5f.qRIH=#8SQCi)_Hl8[%mrX`LLaW7+'7p98`rHEe;Z[T_$f=ZuRr>af*dkS$gaXCg7j]$^V_aHqg@!50$<Y4eg&P$.X<9=fLAVH_`E_1^TV`E*`V_t@&Q"%j%BhU3=gb9KK6=g^0B!S0A,Nn@p"r7Y+$n2BXq'tm1?"W06X70)mO9so``)p:4?C2[04Li3e$_p=]KnYTq<gC2R(^l7q<J:!1X8id-%>KFgONMq)X"[>l[qS7>?EZ!4i]Fdtk/;06W?m:1]()1)+1$LGpB4?5&i58Z7c7M',:mXs[ajQO8WA,3E5_;JedTCBq7)\0'#\6LB%Be5-8F)_I2Zk!j\I7U160ViA]nh?K1@>l[YE_7a>`T?lbg:n.[AG0(8$hL`_p6r.1W_c0M3m*&Y,)>n:Z4Gn^jm.Q2,5Z_L*K_N[%6+KR_LD!k7?rBL"OjVB"#2)J$HKXJ^%scRhh7fJWAq=_=DETSR0]VK/g0iLrc0(hl]MhtKF.E"@dpqPCm6td3WU#laGiIfnpZG5q%i#OUu?m2q+SHB8i-hAGlbEr3Ulr<3eYNjW[ap\&/^d`e,G]t]8Z(o#h#_`M;Zua=R^3I`a_PQT=ZFV^UMSO?An#O2+44emnEGG6c%3LD\A9\=t(kPWsWnbcKu1c]nY8)j?LgT;cY*oQ="(`c1i?Z3tEJ8%-?hHKaJ.IGW53_t[H[Uc&ldmZc:Stc$$"I<W2K15lV3JCL!%TpOY[NY0(,ICm+Xq'iJCH,iKID/pq4/3/NsaMuk_6>>]?K'I>L39L!)DO<"-[OE"tUEi<Pk9`8@o9[X;A*m/Ub+"HW=gl.kGFmgn%^O+RRp#;.$P52))]#XPO08TL]40-0of3,P9Gdg>:)K=\ucG%g^(&%%Xre[3hYa$Y%ZZ"!u%Me3oi"5#GD?FXdb@5Finm"DPa87@4%5A.(cQctFVD0M^-o4>K'gNfFuB=GH^H+?ZbKHuV7I9D"dTC7<VZu:_#:&jQ@cC`,sjmm-I;Id<Fi%<=/[pn%Dk'U-2afDVX^Gj2e%MoS`#54Oq']6K^rH<o=9k&Yk$n=?3:lrf;-"P(lj;o(pEgBjmRkGPm]X,c-Ae^3nd'Bq6CTGi-*.W"uD-`As'HS)Krg>/%UkH.3B%g`B.bdfa\tmJaJcJH!2aIBPL<b(!LI#rtTWPK87CC"c-]Z'(!IP92hN%pfpU=>hU@Op=BpHHtX,h.#cR>AH.>mD"iX!4k0Q\D/Y_%Q]e`B1F]r+S0bk2Sk3Ye-j+gZc_Q?B#q;8is53aBpa6#4ag6Yb2)QU-AIT;;%?#U;[[#WD8??U&ptlB(\OXC3-4b7L2!j:q8QeY,%-LW%QA-FGF9?<9e<>E\JC5/<;%80HF-"PcOC8rVr%MIs#p`?F2:OGMb,WVjWE`TG^Q+WenAld?&dtJeJ0La=QL8bcPq_!ZS"6qs=%HmGj.NPoPJ:<mI72qNJ4N2,GY9IQ'dQ"<sl]seE&oM8?WXK5Qn$\K$?L6e)VeaSg1eZ9s!QFGq!5RjNjAs7\*f52sPX,7m'Bi)YG%'RZpD6K"^n%S2kMXD[<\(JCd&A//CX4XF)GL2?WWp:LoYRTW?3c'SWbL8BZ,)-G6.W&78l;pZfM,/8PC>8!WSc.b.E(eIVA?ceo6%Th[bO=h<a24fHZaP!/R?*#Vo.lkrY2<5bY&&?&5;UJ=gQZN_S!%L3mr%%Pji8bimn3bLX1&a?*+bEcENi^kNq:;@o5q;/QsBr'p/%mjs=jo])=t^8G'4n[Q&b\?]YkR\16A?q[BV>n]&V[Amte99L#Y[l&Y,s8,VjbNarfr+2"q-kTG`'pQh=<UsBG#i`_jY?ZT-1(iBO%'e='_q=^0I^CMX@XC[j/\+.6`K*q<[K+sOV;4*7*)ibFW@a^L_(P@tt<+bC'",-LVl.WR4Biq]Y++AlpHIe5oh,ba3Vi#)C%JsKA%`OGkQmuW6XI@[5MqK`f9P+K3.,ul./<M4WBARJ`j+0e:8,tnV-jJgQ,[R^s=(BZ,q/n\`qRqR=#"3:NI"Z9C\:^6/pE?JP[nj3F=%U<"H1/>B)q=K+cs%TUuV]TC\D/:#W)dOu1WCm9aRTWn`gm$Y=9EAe6r7CE&7`1W\nns&4ADVA5l28(=3b^!D/8&X0PQIK?rYWXf"%o6)OAoXsRfG@<m&IJ8b-W&&Zd\s[[T0#g5^*1E2]'7iQ$<@#i4jp#78<AOM!rU3*Fd\\Vl"@?L]5m9t=.nc10=Ft:aqDq3Xa<ET%%A8gKDd?lI`p6PZ<i?J:eTmJK,QJt>2i5gNXp<4GJSTJ%6IHA*qEP=jZ#MQD"W1kh"@C`afT5\pb;(+u$7SE7X9i-pg_]sj5YD,r/%s'>)DKnb#HVA8rR'/l$B*l1O([?e3kVn<)s5DIBI2)QZ6,MFt)/"*Es',`snoT]!(ouK25P.F!32c6[BT\\kH8I)q6[63`9?\HgI%^6aOo0rktGocO=Y+l7S,W?:s_%*g*lSK<Y7=keKO>*/SU[lmXH*OASjpMp[Y#F6'9Yc$Mf9F?\kcuA,r&ot9KB_+2,0k]1;b9]Pf%+LWl\9?dUfdD5/1_X+A+&;a@VQskVddNu1sP1:3hW_=S97J[N+dSCf*\k+=;%H#VKM8DrM$j%Q/7J[3">9UF=5\(2nFY];H653;f%Sk>G@f,'"[$8L<9@N)gO+f9'#`/l5F6Jk^,D\WXOZ9^"(<7N6*Z7_Uh8t\g<5odOL&N`iKk[94h$in8$Yn.mW#*Db(Lhr/QPeP.F%n3/Elm7i1->;gWXRLXct!n"hi69?WI;umj.%02h*l53r;ZBWhS=p0Ht5VYj+YO.VVe3XgN$W'1YA/5fmaA`thdk'1Pb,/=JBUb=-%k"jB55pHqnc`s:5.RJ75P$-s"M;V7+[^Cs_"]bhXC?(\<i?9YI$_aLS:!cVj;FD$_%j*VU)c.,4RUT)uThL48#hi8&Ugp\f)+tRR%PTjCb:3dsMqAS]`"s^WX@5(Lk$@4JJOo_?am9)?$(b.7t)'p\=p4?\7D!\$9JSI[TU]Y_I%.H`+!1b+OZ>?3G?rs0)<OZdQEe"]Q%6LKP\#DO^5?%`e:<]'NIUrWhH%#N8o6)Y,6[\\'A0Jp$-FHspm?4,;"JCnE&71RjZ$R#j#*mUH;P!4GJejap#H_?N>Osi`KA-#$S%".N.=,:fiQA8pU<e"gOhKd[62b1@7]W(O#?`mp@l,H:s.)^=Jk=]QA5[gXi*L>57+FV/5KAQAlN'8VXL!t8gF#Vd##^i@'HCPJug%IN[?,.qEF[p(Y;,5_q+:\5[,0=gGtj:,YftAXSkHEY^oVPU.:NmjWoh,ulLm&-9a`>ui?ReP>mV.>TMTfd[XCQ=V3PLt'oX2EDD;%3s`hE4<UA+mZOaX1=<"A#mWfL=gb3`-gS;EU6<FZ'IJAp#'(gM=sp,D;!FsR?j$b>00hAXjVtq2/&9oT=Vc?[[4V4r<XoZbm&A4:%6"n^@,[I,7>9Ygk#2R=aR>`M<6&8qu!X)iY8EI/9/Obt&b/Rt^d%!]V:Joe;ACGFrA2#Kel+1J9.:#AG,il(!%-#*f.o_3MT[k7r%$!H"jq@FRQ'H@.\+]56c_Tfm18I?[d6G"]hJLN;tV.E=nTaQ^ORhX+8$*[\@6aL3*hGPcGOg$\g1kV`)"r3e!\l7H3KH`,l+^NO$%PV05paY[];0arbr7$@mO$i$<iT^4&3>>cmT&n?u^77M/>25pe^>;^7:+`o(9ak5N7[oA4$FBbS)="R'M7UYY,jDB)Y+Y^mB`FX_\%f<bt/,R.uj"JW1S8Z'`-cSdW&V<G_u#[<XP>-)C$#b!(34U*,=Z@ikn25(!PRAeR@<^H:!AJ=??KOr8iN7!]Co;bHK\3O_43XX&d%%T?noV0'lJY`-X-7A_PK[!cD.fk`\Y?)"uC8?<Mr-t$7Z;$@4Qej9?;qh5/=KVZu'aP^n\E"2tjed1-u,0Y]XKD$mi#)[>nUDXc?%0p:!Z2OP>J7Z=-;(#B%0c"9i]O\>=,-3,o[%[O3ZP!nscS9TQ$)CoAkZkakV>QB$Wf\'_;$^LgR2b]^?5JX3?(G&j#ZCS#!.#)Q8%;#u0_KZXqj'3Ptl(/Z8XCCZ;:63\tS:m#?g6:/X,Ro<!1Bh2lJek7$m^MkB>/>T3K'3_VJj4G'pF<M>EVJ]Vp;S&taq.n_!U+$kK%91.;+HariJnY]3*j(]`.G<ZPHim4EZK60n$Ro+qa;141$pG/m>:'Ep;dYprgCM6n<\U:j8,jcZ5)9KhBfN`og?2__XlB`eXO[Qqt%Pqh?"<V>i"oNK(Bb:,k0V.EUtVfP>3_CZMOA2?lc"Lcr#T^ia29\)mL.&^GP=t]:[#D'R]kZG5E=UO1"K9D@ob"QRn!(M@G(86=r%drFT?ArG*`B)N<Q,]"FQ]!mo9BN/_]W^_8'0m-Z`/hrbf3iqUOgUCaaHn(n10i2G4*.Vm:6?<<mrJ:g326TEp_5(QR5lliGW=HNL%#Vd17<"tNf"C$J7JlQ,goOjZ'G\GU_L4j"[.hd_L3F+RD=r/)t83Aq]9`p:bYp.p(Ulb)]'V_HLD1^tKe5.!r94<^P$2)g\VTGnU%$4mFn2\pbd:c&<B$6"^=<A`S%/a=qlQt[I@b+cl`TE0C8+Juto`>/h80bo=L'NK)R;.Yc1Pf!QUXGJtJg49:lOC$KA(^M*eUE)c*%(("86#su42Z'A*dfmJ>T_jH`<JZPWN:a*cak^0+:joSAHSnBfq)dnCeh_SdiM[9&U#Z@N%U$iTZ9_F]LH$d&#UKk*,cV\m<"NW($%d`KG?_""-F"_Qb\#QrfjeS-&NBA+LOr9:j>JPiCm@#--;8OS4D63X7;W'?EECq(*l>SSG>VG^ET^bh6Zqlip-&Ak6e=uJZl,nM8.%D&5OrZSYVNQD-PNPM(e',d'31'X]k>SW"=2C6i6hlC`V^?'?g2'LGuu*Co4rJF=)^8onE`KWu8]e?8s36X@4qJJ>A/0KKU>JG!'=%hA$lfBean/fd\#JAl=Ub"6Bbb-!>s1U$n*Mf>UW;1\A5b",I,dMX$f<&f6*:W3q2`"%?KsWV;_d3t24d+"#HIAbM:a8.9d48K1S[%Q0A\i=HXk]R$8:^*6-&i+j)>.AbgcfgXAR2!*K9,b18aqA<A>e=e[F68h;oS.'c1]'^Zdh6(+a@VJ=K7kb).Rdt+I_#Ve=Q&EVPP%Y>GGe@$b&=n8rRN*"s)6;l2*"hC/Ts'/1>%2jj!LXnaU^"qCom1'\BmS;1W#$R1:HDX?&\Np&l:[j6ZA`%!Ba3jVY%.ECOE#@1$t%/FF9ZSinP'/9n$9QEgOT1/fO8&ZC>'bL2b-Dt3QqK0(I.$U>iC/1F9,J:;4J?7[$'GF\cYj=XBJ,QNoPN@NjEa>FK]aB2Ej>o5kg%K'l_QUad"(;6`)bo;YKJ)L`;6]*(OcK+^",Y`=DOPPP-4nk1,[D[6>-++9.$PS@`HS,n;b*Wf1bqANcSh1a494"t,N:s'""N?&MH%G:?4`RQ#lL&S?XkjL.Z'[`0;O3$g6l'(m'(ri=P:X><QZLJ;@a9+a`C1YcA4?tbqO*s38lI?1<Xga?U:;CW>u.M/H^!g?PR#Tso3%=nfcaS^eu'bg@Q,g.M4;b;Rh_W>u;?Z'i&(X"_j"ThGtYC8c'&'dZfU'02S'KP<2^7&q:E6K.>Kh56.,)=DG>P%%S"[g_pilYIo1%+Vf\ajsh*s->Yq$,lip!*F'&TG"k>,+`P&0ar99]F?LP$Y!nF]UL"A+Tu'Mj<k78'ON>)?0&Y071T[<!"BA-j$\N#`3Y.cj_V:6Q%-QWC#`i((mUOd&u.o;lnZ8/C#aqeCq($jYQ(^tJa=9l$j.CNUqRUo+!BqT,u#VE!>^FY)lU'@;\Q&eJ2V%f-d_M/M$J>e@LgjTUZ%*"6T);9_D)mGX'7Pod"i#K!I-K*:)=$fes8J=tfBnP'*RdhIj])IP>p7*DZrJnr!YS&XDQE.[#;"uHn_<U`]bW[L5R^GA-RRcsUF%$&Y\a^b)B=;<2u"EG?cDj.-DA`AD.eG?P5$6W]02M=+Nm:n;-''18O$/o'[pkSA8K(1#9tK.'j[W^6ZK%[ITUW#ClO]#l9Ol&]N0%SCUCcASDXnJk9AfTHjjUGgE#eLo1rHpd)Fr[XmC^KKo`>\R>KkE95H"BeeP(:%_$3;Z[5GV1?%qZIsTC$rM"$\-!0OU_"5l&f?fB%"GDB&>3nBVPF:#CCQ^*!=<$lq`Dig/JZCk\&!\^l44U"a6Y\u?;@(hS6Hq!MElpb""c^g<->=52dS-(r7i35:L@#'+>EUJ*@NdK7%MSqD@^t^18VJqXZ28rse7hd>N+'F!>$$S/$b,2?S#t?cY'>tl=NCj<"/p,#kV]K(H^h2f(0ukeS&1pUhU)2i)^:Z.O&c+\6$A5'd%UAgg:jIiSKG`#B@R+qnbZDf#?Blm6lQtY<lODL-@Msd_J11Z*aKn3Es!=W[>p9Q#sc47G`*!jM>q@nT\>h4PU$6'<P0f<K3"l_A<%=p#/!5rZk!ZjItf5W>Y`LO2Yq";W+OA+*83cm\a2$&!WNa`=A3C(+*8&p8D]*bgT.CkHR5Bjg3,`6^*U8edgCV)bPF3Q,Q/;h<[Z%"JQi/6./Tg"gf\`ksDlk:rPa>mJo$b%%TLd0t7i?)/SlBmY-#;5Xh1M^f_ji4apQ`Gl5<E3"WLMem7/4&n+OS!5^DiN<]\27+Ndi%<t'VX\9$d:#69^M)fj@5%KHcUh6Gl<ZJ]_[F+OJoB&_)j%h8RF@as**#7+g'-TD*6K^';W']EQB`<\48+@KLJg(`@T!LTUeI:A!B%!.\TOP]5!)jajZ"!!,Qa")'jAp.+9Q[\bbeRKa")QZV?qK\ujo[;7Y.*)&F(f&Tj[lQKYmmhD3)h8Fb!P>6'^mppI$iH`:l"7U_t%[c#O63&T3\`hER>;46)Ibf%?3=j4".d/c3=RM[)rdpO&F(R'k_pD/AROU`:R(CB*BUbaY*$P!.R$R&oo!<A5s\di.bJ-]PV!A90s%#%0;<o:KN'!&d<CP7ngaZR8o*P(q$X!18Kam+/tn8?IJ0aem'W`BrKB<1.QSp!]H32`/;PA*TB\A*Ojs/44R108(1:nq@WT2-f5N%H-oY$=8>1=WnX9=L&Eir1e-R7+bESq^JU[=<%gijRNe%QR%KPB?HBkc>>L[P"YaERBqjmhW"u0OW1o^a0W&dn^tc^*!QG0C&AiQp%$k*+AmMH4l!=2U5Am*%6#XV3sP(8Dk!,%(N"U6*nAmm1Q&cda(_[_d/!+MZ>E<?:CAuV6e/S,mV>G_D9L@$BL.7=@_$k5<X1&s"(%(28>T%RekXJd$l5-lAVR;u\NZ%8\lJE+jC*T`G.gc7g"PJ,nD566E$J5U7-D`BjY,L41'h1]SY/>YI;3aoOh8UC>72!u)$J:^u]G%J^=B#@lRT[$uYnDKWqrdTs%<`VHXCt9.V1o+p.gqS)?VD!5LF^3K_^Q"qY5o0c)i<#4s+^Of77Q()]AG16k6E)*ls'.+t>1#p>PP%W/*kHhuIj7R"EtR5q/Re#k%L5[T#^=/2@41XSW>B$6s'9$NgZl$m@<TXQMh]bROcG!/+ran\>-T&9;6k4q.o#R"6E.DIA!HTbJF"%'a?)r&63-j@VC:D]BN"S@A*_S;jl=Z(`Io-@Oa\e!7&9tX;Sa*BJOIq$&'Y)gH(Gt!'pjs&/kPMA89?1K:r;Gd?uS=Rg('e"U;IZ%()MMOkUMLK!F6<W1YEfSM[R<QfnL%TJCCP);#gT(_U2XV#Qe\$X'82)bg$:mE9]":iF.9<3)qG,n1ZQ3SL>Nr+AA=>(skpjIM&:F%kU\)8^kK=M!<S2`"ouT''^!Sl^]9%dN9")K!5c6m%]oka=?oq_A,nl2=Rq0u!!OTAR+?ko!<=:o(c.1\d>#EAklTcp:cb#i6H_(G%SeE%C&=piBYh/pZa2B111h8>X+Z9`+_Unhhiku$,0GYUX'f";_L'D%$1>@duT`G-l/7uX^BE7a0@1"l0qU;,m#9jNb:sd]gD/UlR%1g.$gKE_F0HA12%!.[XgL+tLbB7Rb;Uq<6+>kt;g-pK(95f*4:mVJe@!(%,\0IJaYgSUGP/2i%PO(h97G/iGYN"[+[K6O>NKjI%u%2qqDBN!-2_WHm/+]Rl<%h2"*@CQ.'l2uk)$C2chbV!Yu"c^^aI)upO_Y8+Mg4:i8L+M_*,!'lA!bi<=E%3\.:@(Ui#LEbR4MT"NW%ODkq=&;s'mWoDR:JL=.R89@HQ/?Ah7/;RV+G&Y>$OPrGZF2A"Z6:DV"%hKT7#nIST4?UC]_XIOT(C[n8NSsmDdHE2IM[lCh!B9^S%F9)#"2sH>a7L('8kU*Ef70b5'Ll)EBTUa@S]&SftpP9K>#8#8G!"Y#W!WZe9VP/d^=EK&p0n,93e5o/-JoSFc49-Kl"OLf^F=\ln%CGZWop]-!+[LnQ2!/R?<-jf6(q-pS4!Yul.0\bLt(SHW&6Q-Z]iWD:S(*=[7SG3(#`o@.4,-`hNN"<_tS7"sSbnu"GbR]6o!=4fu%-HEoSKYq<$XY<aNUDc'%%R</0bU*Sp%\f+TBsQ(cMI!s`cO7k-.1?YN\R`!@Zd=5/=iJrQ"^M0FZ__>KJ,nVL!"/ME$q1X,iD8V_%-T&Vm\Y0$F(kr5;`*u@J)USn</sp$ST`GMc'&;&n4[900KUM'*Hi=#lAOCVaoJN)Q+dOl@Pt/W@V$Kgu`u.01!s$>a?SF/67P!F1%_ZL![r"A<R$Od$&.^;1B^]5oUQYR?RJ9At-U0q@/p;pd;!\?#*7q8cO5]ln]J5ob)njh2<"IpDJTE+t*N0R=6@Wjr%Es`P[bl^m!%0L2>kS10VoVrQ4D.`-l\fYVb&=IHju8/ai9OL'Pq0c%WWJH6et$Ogu_P^"n;;,[RGo"Y5/KDjHFMNIo>0l?&Ra2e72fJ[f,ZH*#^%a_'B:gc35lR5S=Z0f2-]?=lmH63CI,n^%8(UT./*2M;8_k\)l.0RuIi567N.@)f6VnGeg\F$]s/k/8o^Ck.,b0&5._0/Gk,Pcl#F%TKjWXc-nUjD1cdAfbVF,!Ff`>!28l7MQDZ2?r)fjLE6eQW&dl6=_n)Rd(/)Q"ouS5S\j"ZJDauf6>QY;/=h,]<E_DfR&S2eYlPmO%M[^5*Hk4a0_Unj=d%iE<)h8KP7g`+e$R"23;;)R#T]eKoP/db,6rn.?rC;JB!2_.qfa!-3!(*LmgYW-aDHd1<ORU'<DCOK`kr0$j%@KQV-;U*tL<E4#(mf1l2D(E%?8TnI&s,\l;RYMIeIeQ?,dXm#PRK:7g9ba_(Hf.l2W,=H9heTER\U0jjIQM1R7-k2oRbKT%f)#3C%("#j`72Qu*8-1j4aKYd4kK=)5`Wcugh<X(>-aiu#fhLPS!((o#RQH6W]"PoLo^G+6WZKLo%<u7d%H%Uf;u@m_Lh(.r.5HG21*Um#%Z^5H$H:J0Y>g)lH+p6ImoX%)$JEB5/?U4Lhc-$\)T_i&MG!<)Zp,PW^!,&+bgT^d9\Vmp+!1l+emcN"1`WeQ&]41q$G)Y_h@Vc#V%nMcI;8.%qoQ)rU<@!=Nr_Uni4dm:=!%F@a:1q6usJC-DaYlXci7na9Ei''Z*?@?6t'W:FMIZ:I,S6d_.PPk=dM#(j@MQs[4q0[i"%,Xd5i_$Do9jY*G*,o@O#jM%YMI`[mCG$M<n\HLUu(iTO2KT-t#kllcF)?>1db:QFhG*IblRW%7,17K5-lTj[$k*J)'+HCSh7#a_<%3i;F'j$$oPJFn-^Wc_NYK[4q+etD,m(<,&MSn[P3c,jn_R7>,b=O6Agrj7l/Iqq_J'/rKaf5#kOfsusUF+,?7n!q,3?lhu^SPC_3%bW6lgJXL]^c0H1+jaYcce#O_R`ITkLp7Nf&s)9BMg"&mO`&[I/mJq)d=#^Sb`!\#<HVT))Mo#C-L2Len$RgaZ9?W%Pa/<mF2K:<6%A>4%?Frl<D=G\a)QSI<A<@n]!LQ@n>#X<Z.e$h3t!8\OcEr\fXJL0(I'4DE!]PS&]FG]`M"Ns$q24FZ-i?e5Vf.f,ba=Z]eC+CX`%&L1"<YqmVKrVq"hEpi,'iiYBs&#k_6Q(kaYSA]SD=5SgO];YA,Y<j#AoMmk5^OX=c62VW*iPu`:pkX'<)(Mih.7\L$Y:$aq@UdT]%'P*#Nf_@9j%-/UdZ5MYlZVF2P+U4Z'U0re.[.*RS+U7's)Df;s(k3@O0*"SXCk=WZ/m"+7.%'Y@pgF0534$X&0X*']ms!b;Dn5<Q%5Q!dj%j.26@6WlJ!Kd45Ik>r$1I2FCTdD+B!PHu-YP!>->O*[F:kLU$S*k(S0LJ*WpiBes47D\U'?'7>'"1c]HD4kXJfnYY9H0)%%F89_0^/Yfam"g$0/h2$3IsUk>m^8Zg]p`k]H_3P8""D^^8Q3RCele4OER'mcd"3Kk+=;pUbUbK@A1oB'@K7oX^a(W<l_aXO+Gi+/%lKLs[pSJdb5&INNl5>H&p:\,bOsStuYZ]rjk2#gJ]H%[M=5DUc&Qs?o4!ka?,I_1.dI,@BDT>-ZQbKn<^1gfFF^9&_Y5-^aM'tQ6%mDg2"&JVaXC:!*:+*.RMi2*h'""TL7men!k^i8AJok"=<L`ZHqgI1R_R4->nK6gle0nJRC%J.NR[)*#C9VhJT5b]+:MT.JM9WYEW%mG<,Rq)$DM+=i;c6ntn]/F^6NQggRl!D]4i6npD:oG1;_`cAH5,))(,rY>,Q;4JN*1VLqf.*g?"E7ge>@Ue0`_)KF.`8L1>YN6Ad%fF]egU);O?I3qg]8W>eANXlBCVs+X(`P>OB"Gl&29&H<VUk"#lj8XVi\'0#%n_3FbV\tRBc4"`Ndu@I=@-^2D<<7,IAkC&VIr;*r%X<)jG9.[0%73bILhoJ`+Q;.W,Fa+1[-0G*f(#?b\bk2<%*>eVcCr'S;g$ICp!ac*WOt_FoLDdC5D)n"2"t#&CTSYH-0Y3lORM\T<%QNGN-'*D1)rhbO/7B/$PUmXh&5,jVjc6QI9g7cKd92?[4@ZHK3"u.ZdG]"b0+"<tU=5g[W(q_1oJV$"UIU\.bea*u_ZG]#@24GqA%+QeLkbXA_-j=#?f`V_m>]U:/09+=D-OsaiH?h:NiN*%$[IH37u7QE,jT'O3+X7%k_9bXk6mSI[!$aVoEB]>fQ(/=^P!<98g+:+[q%!H4EOA"+f/0[ms.L.)J@'*B]XK-_ko]MOe<##[sE97nMpZ?"%1&ne'1gJnBB3$ZN'Ngt.Vg<>LOli4IDb6PI/JQj;1A+7_Fa[$3%%,gKq6*7PF\(dRP%P"?9.a<HHObTnnbF:VU+321#*+<EIRM1Mc;,I#+6mAh5kigC,g:-:7(S/I\KmcRSo$^q8N0jAK!!A0TSf]^rc%^0"he;N4dOqkl`aej!nAfk`Q>S/LU3HVfV45+_6Y[TI#<p)U4G3h>`kVRM0&\&i'o/=Mr5^Rbrd"\?hu1to_Xh/SE%)d0.Dc`:C.%2XUDg:&LI<Ldo/:&"5IVje7%-"&03"hdsGRReVH$-9a-4`'?q=,T:CV'hUrMR"OPl$(`brNnR$KdJAWlI^`fU</[PuMDYE[R225'%FJH0ZMu?JLLcO3Ba(18Uk)>7O3%<isZ7h+1^k*bZ5Wl7aU!?,(`*<;\k:DX\(b*2WM"M,#\->CGEDi;dD2L<VGadQH3Sr6,#]o?k%EU^U_D\('>0ZQ'6cJQI^&HgK%?PG5fa`u+(Lblr`D@sa]Lk.N0CJi$c1>.;QLk1f6e1s$n,0J;8*&4_WVir>0;Vr9V]`2bj3.OF,%)[KbP:Ge\:?C47m8$tGC`Y[C:]:3-pAK,n&!\I(k=m3fB0L%_U#\8\C4P`dWlO2dJZ*:cI2XA$)GnlX883jAe3d-t'\DbaaPW-+b%68(5UHsf5CB*<Al;b!B&rcd2*\D`EaDYSdF)^a"'fU]GMF;mK')TJsd-1Z=H%0O/qFl\0fXsWb],M.?;)EogSWCHq&%YnU8D?s+W%RHN`GObbtNdYo4*;ThO!UcF8OcBK@>mV['4%FlHQ9lcUsT3b/]%eHfK\-GG4"+)n\SIQctq8p+j8(,+f4*qH0fK^Gh%c_hsNq]fo%Ab*:T`%X-?q5*Pr$tjlb_CFL3hX/`tb])-1b\[[CO[un19kO0OQl4bJLJIHhoBF$+$j4[_l(u1DKfAJW&]kGo)F;Y!2`%No[#9OS%&\k@]h+)':P9NO)4Z>10)^q(^2PT7K`=)jQJZtO#ca*r,/7Zs3?-Meh/S:B]rt4roAf->7l@Tu"N,/b;,ne+`*g;E:kDmOm.E<L%%CMY]FXq+V$<I_ODAQhQj)>o!RQXm!qR2?-oF2TECU4`=eZ=_/c"0"H(EDhDm.9$oV!j<1:-,c5gIN[d,%kRL^#=MmcaBXq_O6S%N%7'u(X$5YgMiCmqcCN.ZJ#3*=:n\Vhk""SV)+C9B\n]qo\3&uMM[g-NF!%kj+.)3Pk$j4+_5=j`$`,`K4q5_Ue><rZ"EE)3IL5F0J%%7(E/kJOoVq*C;f>Jr5#kp$JsA#:p8M]7N3#9m49J/0m;^d&>"fqDYC@[K]l;o6a4?bAD/+L@P9b]sl>*7p7)EOM&&a\3)K/S@-N%?a]Yg&BuD5[-an0LL=:FF/$V@.pb2jJ\66dXB;Cp712?B\nU,_*Q.`(8.-)fZQeY6XDjDh7]U.4aE]=;R)![*3E]e(;J7*,Z"i(3%O[!sfo1L.@#[Di@3=8"-*a"A/BJ@P^pb`g3QlbI=KMMU,WHaQB5^Gh,Qk^q`_&BH>+pggG.848?/q(%M0I'34X>#dhN(==@&<G`Q%*NnUcKe&T&T;O1X#_Q%c=#=9botqNh<tBtekkMa,'+H>p=\MV5'RX(:Ap>e9*H"A(YgYN?5YKJp6W8_WN/&Jn-aQ^CIV?s9EGSe8%^=^H8\WQ-`"si5f:b:c<CPu2qRsb2s=O4:=+I=g0A<*>%l4!.&bA8(d'`Egg2.\@*g7ql*PMq]jH?'uOafkku-*O100fkkVa=E*a%Phm6*M(#hV.Etle?.l3g>17)"Vj[S,:93Mf)g9a#D^3\YP-)KV'JGT6%!:#?f5ut>fU`GRIMQs6Zca')Fu"bC:10?)f>,*6H``V1%5quAa<qdue=1e#<li:?Pk'YS"Hq8T)&G]J4[8+W$:C!U#]X+4doih!q^8bII.qL$q@u*ZFOJ@9)8R]AU:FWAc5j1a:`r(3,[k')d%\$/IL*s7U>"#R!_mLrg@jZUY4GIUeCG0Tb,QV6F#^%fdj&O8K\1s;,uO8`%1jeAIFFo+jbr-BJs3'fI?\a[FI;.+l]h_k8uqnQ<3%Wn3'@E[*u&<ZZ9_]q?(R[t5e*CqDbs.5*VGp3D@3;JrEm16L](d[P_\lYh]00]quI(N]L^c;?=WC3Frn3BsaeS.dEu1E^b!$7,8J%0BO7qLgDiX%]oCE.2*QPq/W3(0]t]#/mpKu^mo%Hjr=XeO[Y/BNp\k/g`(OpQ\$PDYKG&a#4<JP*N+*9&1E\s0)NLNSHEQED'4,>%'/=WY@%ts>*-\l6lgSEYrQ))FVU/+;k5a.a6&Y>EjVnQlI(.OD9lK/t7%\klbj]U9raP/_h3Dhi'_e5#N*sq6AYr8D-0lhl=0%?\%jEean\BD^PZPVmU"g*j"e"#T$YL`"d"XW"&6Is@7F'_c%#Bd2G5[GJ2<[Vtf5g5`?R$i"<;S*A&*5AtW-qp2<?;<FZ_3+g95l#B&%U'25[\W:7eST;a7Z?tSa$fZR._'[GLR&uVUZaE,qQG0I9,-lcd[6i+2"-"&@:sCL0.n"J5?IfI=6!;TJ>r/U<-k7g@Nf7*N7/++T%P[7uAd#/_6b-"XLm1mq5aL\gnJlfFgr%_#Lb=Eu6(YC([&'VsPOg#0-"J+A[#BO2_jUtJ?P+Mmj.Q:n`JLh/TbW2r:U6mYh?\g.#%:G*cU"'j&1YS+><\uMXKk">cG=L=H:?p4oNjrC!<&W=ns+#EgFlq?I\KrLS'\<ukSEJf%V+3ZaMk3,s*=TM(d8AZl&p`l;0bW2mB%)bfB68@QqMT+0_d!h5MfE=QgH(4\@tN,coD/Io_PrJN]icq5^0S+s#CD*5m\+A;^Wj>jI;/Ta+[=b:cAH2b@Jp;2.R`T2;IZ!fqi%lSl,5;IQ!oa`_rs46Hi>=A.?S#kuD;$@jr=JhO9UUf4>%[#=@QRV-tdk<N@sRXLadc@K,"h:t#P;>kV(ll]>IB82m;#A-EM`LR[#%Cg'99j&pApdge^YH&^iBr!lA^S`Dd98@afV%sIpiQ)03ZV/fg?,(RJi3VkuGK2%p>bI<HU3T^nEFl,]Lo`HpoIUFMKq5!("FHYhb%]j`XGflOl-MmSG;::D<pD%\]AaC?a"Ejm,l[1KGpHd:KK<n9'TcJI9Th7P66.d6K!pD/2VGmOG[9$E*!>4hX12LU$^VU(*@CImZZ%JWQ?O4NuX;3Do8,IF73X((X4;]Vr2q]d0>uM_a*_QIGedU)l,=Y5,Cf)/T;bYZt#cBD@p@gFO3TLq1EM\+oP]VT>'P+X;h2Z:Xa=%l=qK#5<gjnkBtWfeJD4$!`:dJ?CO1"9<B`bRI9B?CM$i/G3+_I[eif)`[3/&47_QN[]uWkARZgkVE-Sjr&G;lKC&jAa&0(-^`J&G%Ma&j'JnYaur-6([f](6QgK05>>M(*H5<H!hTC][(O%@=CYNJPSjcWNlSk3J@iYp.Pc/#M&DTQHCmiZAE>^fDrk63teW7I.r02s-8%bS`9E&&@9%L<Q1j8F;9GPGWo\=1fIYF?kk4Bos0U\I/(7!tcD<%B3j66o\.kXJSqDlAIl>gSTFq*bmg%&W4WecT*;X'=#ZO+1$Cc%k6De#q#e3Mg7-Zg#l^>%_!T'RoB09kWq*'qf]*^VR0J5ff1aI@2M#18TMZ9a*:T:97!b>4LR!!@J,[7-Q#g2Omee*Lr&HI12/WI9%=D+RJ&Enh1EMg`ITOX!A<c&H4Ki19=JgZ+EA==DaJI]V=Y_taoenP=6ckmi:2/*R!JXAnkYf3DV/BDorh:6^?V@tD]S7"7GfH"F$%GLN$b2q)S(O_[)-XP"*B=s0<[[VEX9K-pmZ=@7>>l"]6^Sl`<8X!I#-TPo43\Fe+JQ$9jGJlFXpIUGI3U[dRGrYjdGf1h/rhq7)>%*uMP1+ptVX3jL'uTgbibM_u;tBIt%q!KRq0G'Y#)imIiVe)@qfhff3\ETsEW@mX^P;%9B"^<#r`8kW$hWb!F2gS;m_6D9E0U,<mi%g/bT]%MTbmY.+[/N=_8lV=W4^1gg**BS5RAS"d^X&s4c(9]m[I?D>nt/9O2t2RAcm?ohMZ9.u77$4DEuP>)*0/fddW[Xb1[$7+@5%-^Xftbb]7%6RR-sqXi\'dL.;ZgA@Vm!N6Z`8dDZ7aJRD]6d7e&^W"Vu2jM\>i"!,no\Di"V6^mikO4LC^k,VR&N?!SGqrfoBo=4I%W:U0r<'"lrL^bVpY/<_K9?\ZWjp6#?QVR!FZP'rp2ahSCEU<Fr`+F'o!)irfO/odt/hUGDckQm\/tHVIh;]>eZ>i;;NFBp`)E%hg%c;./XJS$u6PuM3Fr<,fjD^[$S'/<c)%[\Be(\tY!F@+4u#=tY3FUl8cH/r'[+#H#%/%Y@46$pjjHU5<jbib%r'/F@AF4F0(quS[0%cCR]'Ob3G#rH+B)gmu,=*<RE9I$/+@9loObhej$DEp,RL\B*++C/8u]PY#t+_ZpdW'@V[$K1(23U*'t[Om!<l<'Mh;FtE#A?2JH%%k^;uJV6_CZ9R!i,CkG9B2NKJKe!o.[@UaC\VMPGd)Ef*s-;Z3i6S,CgiYaR6/_@DtMFOKgG0KHNVXSBrJ4^m]1""7@DeosL'-`L?%^P+>ccX*a^e*+`I=_@6gi^=uu[+4([gOi&[;U^puF]V4!K/^=8N3g[Ba4g]#_mkCjnS;qMit`R5lPH#-%YI;:[\uWj'C52f+l2"\%hh"N_OWKqRaTb+jR'I:Gj:@$(-nSR(,;G/3g7+CHH=Pp'ju.'cdlMq0d\jNlR]dI/kW>ri&*NT]]Yc`=/>XSjbH/TIPI'fE4;,/G%T;@p9X)8UFnkHH'dNbXtL;lpYl'nQ4diQI'kDbGT)mhn9%J=;)A_0VA<PfRnHG(Ol/5'opW!H,epY(_%NhGHlPuNW"/%UeCCnV,`%5BtmHZ5E27o=V%!i"slpCGT<EF&Tb3#uF>>]+8Q;;DNj^9t&hQ,WElC+4tGf$(d`)Z"3kSQ)JP_BE)3G=\\!LJC,u595"4@3nJI4%^icZL9;ZpXeW0uhS8t/?#V()@$$0R='?#O)s4CIg(r(P^$h\)d`*;@P0\hq5fsV^>IYCif9oio0A-71<n8_i8i]uBFe.,Uq+i->'%:Vc0s3XjFkJ@ul\h50`k6EcU@b>HY`O\8Q*'[p>F;G/F?oq:VRc+?Gn9GO3N6/$JK5CE"h"%)?FOHna?40P*X_WT'JGb%$G7?S#n%86!L7+a8`=VnraGj)!Ntd\-Kg41Tf`NG,[G`h4jh&g1m8:P;*NM;GWe'mh-&mVRa37_`C6[3.E[<L*jVQ;W@`9FgHj+Yt!I5%Z'2%HQoiXPE\2g)^,H*qmM3l:>1D'WQl$`kG#6GAjO8D*qqZtCq;/(90m+A(\1PVm^OCl'et>ELfGWA.I6T,CP=_p)@.q#54)k/I<&4o%2Vpf,lic?!inS>5=r@(^3`bBoI=#ES.f#X&Llr[!JC%Sgja!C3Z\"!A$J![4c/t/[,dB5\4;sC&BT]oVmpX`eMTnNdFDGT]]3U<U%7##/c%P0&M1X[PR*>ZE!9'0QuDml4+cc`R:nlrJ-60Pa)[q@]4%K<ccq5P&4UZC_'R'[H8P9;:MnTc3Sm459>=GRQ`JB3s^T,;E:%e\>'tkncg[7@#W\RK\N:P]'Vn/IG^Tb.9&LC/"pnY*,d%.8D.LZRXu!g^O1&\0?'>X>.dt("_eY#JkeJd7sgB^=Vk&`erR(XRCA$%;dn)%&j]Bf^Lk-TWkVJY4KCZ@gd1Er_3),EKsKL8/9sSVX&7YIo-4(d<P:Xt6'ID^X=dB+;FDEba/((p(TBcrLbC&H-Om]gN::RW%Q).pE]G/Wno6GNpZ7RUf"XXfdbQEEnb)H4V-,ok^U\ISU<Yg/qPtKCT/[+'tXPa;j!LAooQ^PJ':2[bSr!&*RR8F,f8qGYq^Xra4%VS<>Y=B.W6#7(siHt39%BoKJ?S!Wq4#TL<PIK)E[5E923N,cK%^2k!JmY,6>mb`k,<"VD8>qA<QaV,eNopJ]s<H,%Lk#!nk#LS2d%b,qPB1!/&V+>:oHZ=+V.Wm[k6ThuC"@EH>%_K6u`s")iD+uuiiWscO/;5MhuV`o'A^UOX$13d8/^Lt-@]!B&i$ErGt#+?5WS&6Xj%52(g1PPMVib*Et(QuMT2B+(n@0BZ[bH`*`B7D!q_j5<_/XuE+<&K@<MG6ggg,/T02UbOdiXc'\a1.\5hI5M+#"&WiV(5^[F7Ar.4%@%ob=$dE-GO/S)?\@?oZ.-P7S!m-E@-<NHoUmN0&ls1IqRsW0li)EZ'&K--*l'O)RFaK%d>g2L/H=<_J#0c2VTie"iZ2sAl]%+(^%%FhWEiZE^YX?*`#J4+X&A]KMP_#+,L[.kcq6U;5_71NFunac77UHVfr7>oM$'X6X\U-!r-*7:=7Pq_4s'[M55--%p*HYS'X>.Y4?%=Q>O=T&`,W8g:W(n=$3''>^8bl'!>J!1O&&/Dm)Plbofs0Lr47F&&&f/k0^plbaFtS1#kkb@/Dj8SDWKk[XoBc>b#=:UN.,X5nHd%PF=!a1\@$Kf4-Y;PQIR[Y+`GQb2L4,kPPG!fJ_V'fUQ*Za-HPPG-2n2:h6SOV"cNuaroI@)jL3<rAcO^.S[@D!mr^CWV5p5lM9X-%\g^UMF6]3m;ct(paC3GbbG@rEW2ls;Cl)5&`NQ3tHTBkOe#FfaSjca`->rtm-TRIk'SJ=0hHfJ+TXt^4Rd*F_29"]LJ\^6p'N#/4%I3f>4@8jT-U(Cl[f<$]?Zm<!D+m?YlTgd-R",^5JQA9?#&F_#E*SX*&20.pc4g1"['Tgi:Sl;ueQCs<,;[ODHfi6U)Z-i?8`3gon%9c,LLS'0#-X?hVF9uSf//<fhq>.8X_F)coNnb'd4>[j#$X0S%1`>j'')1D:V<`)-3]'Y9@&]*b>&M&(0+1@Ms.%+=Gi[9\j?_8/n%1t;q4juY2r<AjeUm><)-<FlD(1U)n!8pTIL`@>"niO/_#,)g3*c:YJ5HJTRZD-g)P;CAg;9#<,u3H%X=1g2sQa9pb;bn,f"W-#-+%&8"uW@?F+3;pP`QG%o<@KgQ\USJ<d9+(LQ%Pg8Z6Pd'^ChB!Mn.CGD)r,Lni\#V"$cDQ99c/WfO0aEG?`=ZbVm[HgKbtA3ndo7<r%X(QSp(tX*,ElZbRC2uT'UQ/(?5Z">f7?(#O(=Z;b-1>RuZNr3Oe"XlAf6tf4iSrBf$rge,@<t`"I[js>=[">4l\5JR,Z)Q/ka-+3%'hi.ro5hO(hCatZ*C@f?_-2qZW53bQo^Vp+!+TQG1][,hp,VMkq4'pVHqFmf3DG\.l!EO0!+klE3=THYYB.<&Y7"H_WjBh(<9L(D%Fi!5t$H^b&'^)j1B[Jf;*QU:>*LP/e8W;YU*7IeR1$iBg?<loQ32TP6?ONQgBtI*j1$o#;R)XF\>)%Du@nct.,/u?3lMX(Uj's"^%:8?%R1qjZ0/TFT[UnqqPpn4MXeZR#8)?G0Hj.(98l^W-+5,Su9EuF-trZ&iIpGn5coN!2ZDt)p.qEChI;fkuFk;64'?qJ<sVm-gN%1)B%0[J=+RK:49Z39Hh<2-))<52Yn'p3?c_#;t)0+;Y'R"qb^eT%L0<ORL--oZ+\sdmE;<"X_]'B6B$pY`qh@#(>.R$&0ggbi/hJ%n&C<^8O:/r?k%/)-L2lF<\cjVpc5t9`CnV88-'Dr^gHicP/[870ZP#tM5*>Na,*'#De.b60M>TQ#8QJt*'[L=SS&-$DL6#VCbb\<%D8/HDQX=qg;gD'G8n3:qo.!3?YeJpFATh6Rg:06O,'O2T\#P0.]i1OSJF[3"mc#b;?^R,WWua7O+e_LP^5[5QPELOja]>#C:UYsN%mr]AbHTq.0Wq"77<EV=^btNipqZ;]hlM<I.*Qa2P#-_W@`HYf_V[/1[pZAe8<`IX2n5+L,Z?X?!bDE)-]4UgL3Y7$9L&@(u7b#HR%8j?SBPDu>&fp'T?s/`Ap!mcl3qGjGN_qZ<)XJ<\M/B-0i&%E^"#6oBeV5!X>8Yd40lPQl*+q#61/V@5i;q(kpD<d.edULfSR*2lP%@c.YI^E&aXK+[Eep"!5eOjB\+bXX-+EYjOLP@E^#Q-s/U(o`88jgC[7KDJoNkJPri.JTC$N\l^(Nc4)gr;uQb>m36O$]Jo>o7>$Q%KJp.dX,#X?UbVX#$r:Uqb@e0j:TAcbRG]!P9Aho@:DOUWXe(7pjjS;;4BI\n\tnQ-n2udd4:fMf-WTP:lS]/IlDZSsIiFtY.VB@0%0KelJS3b?fgl8TKcNe("F%_+?i<c<uejK=o9%V$$O"F/9?J9QMhhb$AfU^MeDs:\SZ@]t6g[(/pHC`gW4HO,t*gk2IF]9I;m$(J]%(GhPO`#++GAuB1s93u3X^I'e$bYEPgm/cN^j87r8[+VGPmLQW[OmS`MS"16GB?fWo4$O6_XOn4&@rC'[4!0j7:5P3p_sF0a<Hcet%ZEdLjHu4!-]"44b$f\j9(e3#.eO_JB++A'K;H8R!Z!h`P<JfZK@<<R31-,ri7OJq?\i10,dbUpY]WFp9H\n>ueOd/'3<3l<mNu(;%k6&$?8T?h_aDH&lnEiE@c7N;0X\Lc[oA&MLbEnrXE`ekt<18):SSVZ2;pjkU5])Xf3Y,b(SHic-;]TGiF-6SHMW;p9e]Cl0G!0%i%.%,,dX-90mM@82(UuGNOH!?hU"R8m>eYtII?G!=7lG,:?ajTIM>$R%lhCI.NcN@:eH8qc)irs=k?R71uP?=!SPfcZNc@Tu9Q:hkf%b#CGOZ#%Ph%Vohj.1nE1m]:s7"-JJg[Ck5)W[^2'cL>Xu^2S,>&Rb.J<$It)P-Uk;']W_a'7na.(#k.k*7)_S0o(i>As_@>`LNnV%S2C5GMe$7(;)k&r^*tq.?!/>ToearB4f,g=Fk(8d1W5pb`MW?n2E8C3<VHr&8XH=fg:$45lo3k<4:m!o7DT%8I<TFC9q.sfTd(ao%%H?hTM;LsL`6d2*,ls[>d[\aPR_c!9Yp>Z\`8`>>gl#Wo3&W1Pa#CNZGR:h^.2Q`!%JuAma,C;Cs(Q#>B[9qR%*(ZM(1qYCrSc6%%?ArKHPCAP%c_aH;nM^)ANASi4V6Zot^HaV>PC9_%U+7eZP.HCG,gWP`*U8d/`c^jN(/rQ77LGM6,VMaB';M3NSn$)J:FZ+[b`a_[%bB$5Gp_Hkp)$abL/D*UQKlJ1A,_i04.UNpb`L1_m_ZG!Qf<F1np$,Y"#YRSN)GmE#V_2.&6e3'$+676%^0#8$Z@Z#9r85\*Hse]H%.2&D@ecoVbg>:Hd@qLCtc.NZ,At$QWb@%+[d-7L)(/gR^Zko]'QI91p;HKidc(Map+CQoEOR5JORa&Li71,_g$P_5ubWHoB_d(EE%lUl;hMn;Qh\bNsV/lF'P>o;]J[<iaK*9L_m+YpOU>bidnA\ABgN-m/@m=rG*bpErO)iSOh]53CfJkX<;\&ES7b@3Rf>E!sXoL^<q%9DkBf>\u1cV=nr`ePq^;ZGFU8O^/S(,6nE1(i1n3"fU#n#,>B"Wi*[(4ejN:(?QoSUoIq#%E?`3pOfaK+iM#&`Wp+.OVqf%?=>NC%D2U#4)iOb2laJH8r)V>kr/)K@@6osY(ca+F]tI-0R9+N8N1MGC>Drfm/B.du`Q1tiooc3h)/T4f0G[9K:YBhmXN>QRIi+-V8X@3f%J8?nps30%Wm7!o6>p_"60CJbID(i3V9&s2`DC&6W[MOKc%!UHaC>F=UN-me#BpGj*J7U?NaOVOW'2IM^I+)MD^MPRn"e+fqji64)%f/`5!8tHLcALoT4OQl4B/@#F3T.id21TJ-tZ,h=-1:OC,,fjd@dqS)3NnqT?anuq2a1<\&hu35dM?:8O^8:*dgtl<@e_r^2aV)Sg%DfjSk1;>eZ$sP/D?a*e#+rG\IP'(O1W\>ZI8)eeNTVh:($C07r>R-ukJ5*j9KdaEV?BlLnb^pALW_*b#jmMQ$R,icl7LCjFrO0?a%I:qaCnS4L^)ac;=o.-!)kqH56#a#T$p06$sd]Z55$/SugA'2%Yhss_9Ha=`/7%De,4ktEbYuHGT`m4F,o]JhO56!sE9g,VKe6C>J%9_OqK(9@!G<4QK^RVf`oZ5i)7F8hN^5IUFA's]FCfmo'Er%)1Y/&\(Pg41L^WQT=;9p$!g5X[HgF_d47.hs!ZP:&;@:if'AT@bP`%h5^)\=N]G?.tK#u%OKF<%aC<8ejg.DFG']L%o"G:FYlp@gZc1Yrs[SZ]s[b(SuSeN+(rVF-fkH"TshY[l\W/h5aVhR"o7k>'2M(F%jj5Y-%@V1s$_9K+c.P`]N:*cd;efuk7ob(_M;gtY9r[[BKmR+%gd(`c3Ik"RpaJ5<,C%Ra8u?aVKAoe/WMF.?Js*56mn_.^c;@5s%LIl(b='+Fu]MM'LTP6W7B3fR\le1F+(^(tfH%P^3T;mMu9S#LceTi)oKY-QW:U0bV(@bu4qa_df/g=BW^j)ndR1`E#3&[OI,-U_4%W.-m!b#at.qTAYO&L=r(o*6VsS2'iqWR/#sV%GNogROtp4[!V&-:Z+L@aV?D:DLl0P884f)!;>#^.a\>8S+k`L2hYb@@SF$NH7RO%;fOXqF!`Lg)JN@;N)?KX;-;ui_.S?m=Qd:n[WVSbCn:"tUp/.0M)5b/>Y+qe@@`a50XGoIljOb#[a(;BPoZi=l^TP#j"[WV-#f-e%3^8^;SKHLab;nR@)*.=_%_Lm#@@jg-H908k-(:ZIShiH!cC?T7V-PEYoZ4Wo1?Of*`"m8p95L.T$%XCE_`DGr.QGu0q<%d;mHo%p%!J^iJVomG7%I4UKF9DD`@.T\&j4eQl@,J_DhRBsY^\upADf>[P2W+PX5J7$"Is_(d:N&Jr[stR\q[^I?T5Qsok:aUMj$19Vo[CSQ%r23p$kO1Y8qtFHHJ,@]%J,Xr4]`7oaDh%T;c[YiRs1\L'rhnY'q<Qr;o(t*/J,StGrWC7-QFQjjTDn=ErqkIM#7XZ\])~>%AI9_PrivateDataEnd