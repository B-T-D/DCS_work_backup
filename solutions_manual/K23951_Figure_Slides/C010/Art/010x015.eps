%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 010x015.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 267 358
%%HiResBoundingBox: 0 0 266.9995 358
%%CropBox: 0 0 266.9995 358
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 96 128 8%%BeginData: 4720 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD41FFA9AFAFFFFFAFFD5AFFAF7E85FFA95AA9FD5AFFAF7EA87EA9%84FF7EAFFD57FF84FD047D7E845A7EFD57FFAF53A97EA8527E7E84FD57FF%847D7EA87D7E59847EFD58FF5AAFA9FF5AA9AFAFFD5BFF7DFFA8FD5CFFA8%7DFD5FFF7DFD5EFF5227A8FD5DFF52F8FD5EFF7D7DFD4DFFA9FD5EFFA985%85FFAF8585FFAF85A9FFAF8584FD51FF857E84A8857E85A9A97E85FFA97E%85A8FD50FF84A8537D59A984AF84FF84FF84A87DAFA8FD07FFA8FD0BFFA8%FD3CFFA87DA87E7D527D8584848485A87EA87EA9A853FFFFFFA87EA8FD09%FF7DA8FD3CFFA9538584A8538485FF7EA985A859A97EFFA8A8FFFFFFA87D%FD09FFA884A8FD3CFFA8845AA8A8845AAFFF855AFFFF8459AFFFFFA8FD0F%FFA8FD3EFFA9FFFFFFA9AFA8FFA9FFFFFFA9FD59FF7DA8FD5EFF7DFD5EFF%A82752FD5EFFF852FD5EFF5276FD5EFFA8FD4DFFA95AAFFFA95AFFFFAF5A%AFFFFF5AA9FFFFA8FD4EFF84A984FF8485A9FF848585FF848584FD50FFA9%857D7D7E7E7EA9A98584A9A9847D84A8FD1CFFA8A8FD32FFAF847DA97E84%53AF84A87EAF84847DA884FF7DA8FD04FFA8FD13FF7DA8A8FD32FF7D7D5A%A859537EA97E847EA9527E7DA8A87DA8FFFFFF7D7EA8FD11FFA87D7D7DA8%FD31FFAF5A85A8A97E85FFAF5A85FFFF7E84AFFD07FFA8FD13FFA8FFA8FD%33FFAFA9FFA985A8FFAF85A8FFFFA9A8FD58FF7DFD5EFFA87DFD5EFFA852%FD5EFF52F87DFD5DFFA8F8FD5EFFA8A8FD4DFFA9FFFFFFA9AFFFFFA9AFFF%FFAFFD52FFA8855AFFA9855AFFA9855AFFFF855AFD51FFA9847D7D848485%AFA98585A9AF8484A8FD27FFA8FD28FFA8A952A859A859A87EA97EAF84A8%52A87DFFA8A8A8FFFFFFA8AFFD1DFF7D7DFFA8FD27FF7DA884A8527D85A8%848485A87DA884FFA87DFFFFFFA87EA8FD1DFF7DA87DFD28FF59847EA859%7E84FF848584FF7E7E7DFD07FF7DFD1EFFFD04A8FD27FF8584FFFFAF85FF%FFFF85FFFFA97EFD52FFA8FD05FF7DA8FD04FFA8FD59FF7D7DFD5EFF7DA8%FD5DFFA84B27FD5EFFF827FD5EFF7D7DFD8EFFA8FD30FFA8FD2EFFA8FD2F%FFA8FD2FFFA8FD2EFFA8FDBDFFA8FD5EFF7D7DFD5EFFA87DFD5EFF7DA8FD%5EFF5227FD5EFFF827FD5EFF7D52FD4CFFA88584FFFFA984FFFFAF84FFFF%FF84FD51FFA98485AFAF5A85FFFF7E85A9FF7E85A9FD50FF84A8537D7D84%7EFF848584A984857E84AFFD35FFA8FD1AFFA97E7E84A87E8485A8A9A8A9%A88484FD35FFA8A8A8FD1AFF52A87EA8527D84A8598484A853A8A9FF7DA8%A9FFFFA87DFD2CFFA852A8FD1AFF7E7EA8A87E5AAFFF855AAFA87E7DAFFF%A8A8FFFFFF7DA8FD2CFFA8FFA8FD1AFF8485A8FF8485A8FFA885A8FFA884%84FFA8FD05FFA8FD4FFFA8FD5FFF52FD5FFF7DFD5EFF7D4BA8FD5DFF52F8%7DFD5DFFA8F8FD5EFFA8A8FD5FFFA8A8FD3CFFA8FD5FFFAFFD1FFFA8A8FD%3EFFA8FDDDFF7DA8FD5EFF52FD5FFF7DA8FD5EFF7DFD5EFF7D277DFD5DFF%7DF87DFD5EFF52A8FD52FFA8FD0BFFA8FD53FF8584FFFFAF5AFD5AFFA984%84FF7E8484FD40FFA9FD08FFA8FFA8FD0EFF7E7D7D848484A885FD08FFA8%FD35FFA8FF7DFD06FFFD04A8FD0CFFA8A959847DA97DA953AFFFA87DA8FF%FFA87DA8FD33FFA8A87D52A8FF7DA8A8FF7DFD04A87DA8FD0AFF847D7EA8%847D7E84A9FFFFA8A8FFFFFFA8FD35FFA8A87DFD06FFFD04A8FFA8FD0BFF%A95A85A8A85A8484A9FFFFA8FD45FFA8FD0FFFAFFFFFA8AFFFAFA8FD5AFF%52A8FD5EFF7DA8FD5EFF7DA8FD5EFF7DA8FD5DFFA8F852FD5EFF2752FD5E%FF52A8FD52FFAFA9FFFFFFA9FD5AFF8484A8FF8484A8FD5AFF84A9A88484%A9FFA9A9FD57FF84527D7D8453A859A9FFFFA8FD04FFA97DFD42FF7DA8A9%A8FD08FF857D7EA87D7D7D7EA9FFA884A8FFFFFF7DA8FD42FF527D7DFD09%FF8553847E84597E7DA9FFFF7DAFFFFFFFA8A8FD41FFFD05A8FD08FFA985%A9FFA9857EFFA9FD58FFA8FFA8A8A9FD5DFFA852FD5EFFA87DFD5EFFA852%FD5EFFF827A8FD5DFF2727FD5EFF7D7DFDFCFFFD75FFA9FFA8FD0BFFA8A8%FD47FF7DFF84FFFFFFA8FFFF84A8A8A8FFA8A8FD06FFA87EFD47FFA8FF7D%53A8FFA87EFFFFA8FFA8FFFF7EA8FD06FF7DA8FD48FF7DA87DA8FFFFA8FF%FFFD04A8FF7DA9FD5BFFA8FD65FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:53:49+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:53:49+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:53:49+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>192</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FWLed9QfRYYNY+sXAjSVUe3jP7soqvI7MCVH2UPU5kYZCiCHHzRNggpL&#xA;e+d5J9RNzHNLZW9rJEn1eXiikORvKQxT4yaKK79uhy3HGHDRG5/Aa8kp8Vg7D8Fk+m+bbDUNcn0u&#xA;AchFEs0V0rBo5Vav2af6p75RLCRHib45blSeZS2uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2Ksb/ADB8uz+YfLcumRM6+s1JfSMYcxsjI4BkVl3D+GXYJAE2aBDTmiSBQsgsb1Xy&#xA;VcyxLbS3Ik1G8+q30lsrR+tI2nXDSOeLq8bpyuo+dAN/nlpyRlPfaNU1jHKMNvqu0f5N8hXmizWF&#xA;1LNykt4hbujkF/SRCqVKKqFyWJagA6YJ5hRj7gPgmGI2D7yfiznMVyXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8w1v8wFtfz40DyodKuXuJtMvFhuw0YhaK5aCYy7tXjH9Q&#xA;kVh1JpTFXp+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVQvryOzs5bqXdIlLEDqfAf&#xA;SclCJkaDGcuEWUq0zzMtxaXlxeQ/VvqgVmWtSVcVXqBucvyaeiADdtOPPYJIql2m+abW7t7qeWJr&#xA;cWqiRlJ5VRhVSNh18ME9OQRRu0wzgg2KpvTfM1td211PNE1t9UUO6sakowqpHTrjk05iQBva49QJ&#xA;Ak7U7RfMX6Qnkhmg+quFV4QzV5o+47Dem+DNh4Bd2uLNxmqpFy6HpMut2+uPbI2q2tvLaQXdPjWG&#xA;Z0d0r4cohTw3p1NaG9HYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVK7tILu2e3nXn&#xA;DIKOtSOhr1GSjIxNhjKIkKLx3VvLFqvmLzCI9MEM80kL2tyoDSLFELh7iVeJL83+tM3ifnTMqMaj&#xA;x+TjSlcuHzR7W3mKPzbqdhKXTT7srBZ2lIOEcStF9XCekqsAqI1a1679MngBAEjyFsM5BJiOZpNr&#xA;2HVDrV7pjyxO15JbxhI4XT90i1qGMrgBQFrsclj+kSPIWxyfUYjmaS+9hurbzBrNjZWv1W71HVLG&#xA;XT1QKVEcHoySzHgaLyaAk8uvLfeuUxjcATyu26UqkQOdUze5tfMbeZ7OeG5iGlJbXKzIYmPxtJbl&#xA;A1JlDOVSTi/D4d9t8xHKX+Zf0+beBNHUlnkK3Lo0ayonpsUZDMGjp6vDnUE8a0FcVTgCgAJqR3Pf&#xA;7sVdiqU6z+nGvdPSwDCzL1vJY2iV1Ikj48vVDVjMfq8uA5cuNKCpCqbYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYqt9KP1DJwHqEUL0HKnhXDaKYx+ZOpafo3kzXNXluYdPvYrC5WxvpGSKQXBgf0&#xA;Vjkah5l/sgb1x4jVdF4Rd9U+0+60nUoItT0+a3vYJlPo3tuySo6gkHjIhIIqKbHGzVLQu0R6EPq+&#xA;t6a+qBQSUHKnhXrjZqloXa/Al2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBz6zpsF7HZS&#xA;zhbmQgLHQndugJAoK++WDFIiwNms5Yg0Tuul1TT4r2OykmVbqX7Ee+9em9KCvvgGORF1sk5Ig1e7&#xA;c+pWMFzFazTKlxP/AHUZrU1NB8qnxxGORFgbBTMA0TuVt7q+nWUsUVzMI5JjSNaE96VNAaD3OGGK&#xA;UhYCyyRiaJSX8yfJcHnXyRq3lqZxE1/DS3mYVEc8bCSFzTegkQcqdq5WzTPy1oNl5e8vabodiKWm&#xA;mW0VrEaAFhEgXk1NuTU5N74qmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5v+YMF&#xA;7p13ZXcd7Dbvqep2tvHXjzpJLHGWDSCg9OMu1B12r0zKjm9NDoHFlh9VnqUg1fzY+lltYvX+vSjU&#xA;Ghj4tHEzpY231iSYBqfaqqUXoabb7T8Qx9Pkx8MS9XmyXVLoTXsuoelLMXvo4LaWNeShI69P9bY5&#xA;ZE8IEf6NtchxEy/pUlPm3Xib2G5WSBW1G8js7S2nbhM0augcx70UKHqTuSxVR9rAJcHDH4pMePik&#xA;y+382zjQ9VvfQkun0+e9ijkRQVcQPIUJ48aKFVQT365hShVebmRnd+TJLW49eES+m8Va/BKvFhTx&#xA;GQZoDSdfttTvL2C3C8bJ2iZual+aSyQuHi+2g5wtxJ2YbjFU0xV2KuxV2KsOvvPcdj5ovNNluLSW&#xA;C3iSsKSUmhmmlhigWWpNBI09XPECNeG5L0wqyrT7sXlhbXYUKtxEkoUMrgB1DbOhKt16jAqvirsV&#xA;dirsVdirsVdirsVdirsVdiqE1PTLXUrb6vcg8OQdSpoQw7j78njyGBsMMmMTFFAXPlTT2sfqtnW0&#xA;b1VnEq1Y+oqBORFRuVUdPnlkM5EjI72wnhBiANqS6ztrTUBqnlpEa3Giy24W7DcjI80KzF+NF4/b&#xA;K0riNQePiQcA4OFOG8vWDaMNKPIQ0/vFNH5Vryr41weNLj4mXgjh4VbTdG0/TtNTTbaIfVFUqUej&#xA;cgevLxrlcpGRtnGIApG5Fk0qIpYqoBY8mIFKmlKn7sVbxV2KuxV2KtOiOhR1DIwoykVBHuDireKu&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5Z+WXl/z7Zfmb59vde1CafRXuYk0hHVBHKsiCVWDBVYm&#xA;3hMcPgTy8MVep4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUm81Saglgv1MTk8i031&#xA;VeUpREZiqCq/E1KDcVO2XYTEEk9zTmEiAB3sOs/PF5qOhWlmLe7hlurmW0F7IYiHFvKUmHKOSRh6&#xA;dKsSB8IPXfLqiJk1sOnm1eowAvc/cmOla+upeWdOt9Nv47iS7nMDXUEolKoCH+0pNDwdT/qkeOSM&#xA;Y8cpcwAwEpcEY8iSiF1y+h8qRFXeS7mlaCKUBnfiCSWAFWY02FN8ZYo+Ie4C0xyS8Md5NIjyd5mW&#xA;/sLNJmd2uWuVhnkpVjbOoKnc1ryJVgSCB16Vx84HFY5N+EmqPNksNzDNJPHG1Xt3EcooRRiiyU36&#xA;/C4yluauLy0tjELieOEzOI4RIyqXdjQKtSKsfAYqq4q7FXYq7FXYq7FXYqlv+INPGq3Omyc4pbWH&#xA;6xNNIvGER/DUlydvt7FqA0bjXg/FVHwTwzwpPBIssMqh45UIZWVhUMrDYg4qvxV2KuxV2KuxV2Ku&#xA;xV2KrZULxugYoWUgOKVFRSorUYhWAeW/IeqWq2sc87wxWEly0Lt6RlLXazCWRCqcQwe4Lgspr06Z&#xA;lZZxqo7724uKEruW21O8s+SbHyxIlvqdys1ncTC3sYZ+LiSVoFiVeIRVH7mAbHuME8seGo9UwxS4&#xA;rl0THSPI4trl0lWOG0jEixNa/uZWL1AcvHxYMob4TWoPTJZM8eH0jc80Y8MuL1HYclDyp5Pv7DVI&#xA;JLlBHZ6atx9VWoJkmupC8sppsK9qAf0GWca9PVOKEr36Ml07y7o+nXVxc2lpDDNcPzLJEiFR6aR8&#xA;VKgHifTr88xXJbvNDt7rVbbUjNNHNboYykbARyJzWQK4IY7OgPwkE9DUbYqmOKuxV2KuxV2KuxV2&#xA;KpHqXlDTtQvGvZJriO6rG0MqSV9IxyxzDgrh1pzgQ8WBXqQAWaqqcW8KwW8UCkssSKisxqxCilSf&#xA;HFVTFXYq7FXYq7FXYq7FXYq7FXYq8s/O3z6nlfUPJsDaXc6jJe6ssluLbhVpIkMYh+Ij4pDcjj8j&#xA;ir1PFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUn8xaTpupfo/61aL&#xA;d3djdfXtJWRZDCl7DDIIpJHjVwgAdqM3elKtQYqnGKuxV2KuxV2KuxV2KuxV2KuxV2KoW5uJY7uz&#xA;iQgJM7rICoJIWNmFCXTjuOyt8h1CqKxV2KuxV2KuxV2KuxV2KuxV2KoHVtYtNLS1e5DkXdzDZxcA&#xA;D+8uG4JWpHw164qi0t4ElkmRFWWXj6rgbtxFFqfbFV+KuxV2KuxV2KuxV2KuxV2KuxV2KtNGjMrM&#xA;oLIaoSKkEilR4bHFW8VdirsVdirsVdirsVdirsVdirzD87/Pun+VT5UivLG9vBfatDKgsY0kYm0K&#xA;usQ5yR/vJHdeA7gN02xV6firsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirDZvOv1L&#xA;XEiv7qCGzlnkt0gO0gCHir+PxN/HMuWOAh/Sq3FjkmZf0bpW0/zdJf64i2zpLpUrmGNlFangGVuX&#xA;+VyBp4HE4Y8F/wAXNAzS46/h5K0nmO+bW40hCjTfrAtCSKl3P2iD7YRgjwb/AFVanOePb6bpZdec&#xA;hBrCQt6Ueneq0DTOaMSlPUcb/ZSoqadOuR8ACFk+qrT45M6A9N0m+t+XNH1s6edTtxcfou8i1Gyq&#xA;SOF1AGEcm38vM5iuUmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxVYZ4ROsBcesyl1jr8RVSAWp4AsMVX&#xA;4q7FXYq7FXYq7FWD/mJbXg1Ty/qFukZjs7l5rgtXnIUjZYUqAfsPJzFfD3rmTp4cVhx88+GixrWP&#xA;LOvWVtoc8Q+qCxuLmScCSVGeWa4iljJ9MhWCwRemOXQ/6u84x45SosJS4IxsMg1HSNUsrHSp45rh&#xA;ZEZ5JYoliak77xk843Nex+W2WCQnKQuv1NZiYRiav9aXeZfL2r20Oly8S9v9XuLe5VGYsJrxkJkd&#xA;P7s+lHH8J6kkjYHICXHKVd1MzHgjG++2ZXja/ePpVxYutnC0pa4gmhd2A9GYAycJogVLcKLTrQ+2&#xA;Yko0a5uVGVi0x1J9Sj0u4exjSfUUiYwRt8KPKBsN2HU9i3098iya0j67+j4ze+p9YJcsJvS9QKXJ&#xA;QP6FYuQSleO2KozFXYq7FXYq7FXYq7FXYq7FXYqxbX/K2salq73lvfQw2zQxQNbSRyOJFT1iRIUk&#xA;ianOVHHEg/BStGOFWUKoVQorQCgqST95wK3irsVdirsVdirsVU7m6trW3kubqVILeJS8s0rBERR1&#xA;ZmagA+eKsX/Ky7iuvI9hPHMswlaeUlWD8fVneVVJHcK4xVlmKuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVCazpVpq+kX2k3oLWeoW8trcqpoTFOhjcA/6rHFWI/kx5EtfIvk&#xA;W28upLHPqFvI8mrzRVo13MFkINf5YmjUewBxVnOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVTku&#xA;II5YoncLJMSsKE7sVUsQPkBXFVTFXYq7FXYq7FXYq7FVK4S4dUWGRYxyHq8lZiY/2lUq6cWPZt6e&#xA;GKroYUhhjhjrwjUInJixoooKsxLE+5OKr8VdirsVdirsVdirsVdirsVdirsVdirsVdiqhPbySXFt&#xA;Kr8VhZmdayDkGQqNlZVNCf21YeFDviqvirsVdirsVdirsVdirF/yzJPk20r/AL/vf+oybFWUYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsckciB42DoejKag/SMJFIBtdUEkA7j&#xA;qMCULqtidQ0u8sBcS2hu4JIBdW7mOaL1EKepE43V1rVSOhxVgn5DeUfNHlfyEll5nu7i51ie7uZ5&#xA;kuJnmEKmQoiRlmYcXCert3c4q9FxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;vPNV8wX/AJY8xyadp1l9btrmF3iSW4MarKkMk5IHCT4f3YT3Zh2FcypEziLG9uLECEjvtSloetXV&#xA;nqK3LxmaS90mbVDykADhZU9JSaGjOkqHvSuTyy4wAB12Y448BJJ6bs00bzFYanoyasGFvbMOTNIw&#xA;CqKAgljQUoRmNkhwmnJxz4havpWtaZqsUklhcRziKR45Ajq5BR2jqeJbZihK+Iytm1FrNnNqk2nQ&#xA;h5JbY8LmRRWOOQosoiduzmORXp4EeOKo7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgNcv5bHTzNDx9a&#xA;Sa3toi9SqvdTpArEDrxMlad/EdcVQmjearHVdTvtPgguIpbFnR5JUURyelK0LGNlZqgPGetPvBAV&#xA;RNj5h0q+uTbW0kjTAFiGhmjFB1+J0VfxxVAW2vX73RWaOMRJqUmnyhCSeJiEkUgJ6nlRWFO9e2FU&#xA;yi1mzm1OXT4eUk1ueFw6iqRycEl9NzXZzHKj0p0IwKjsVdirFPMPkWLVvMNrq5mZDDH6TASSqOJ+&#xA;1SNT6bVH8wzJxZhEbjccnHy4TI7HY80oXyXBq00F5pl66W1ml1pKSkyIY0trloXi9EERycHt1VWY&#xA;fsg4480Yx/pdFyYjKX9Hqyvy1pH6Ktbm0WP07dbhjaqCD+54qE6fKmQzTEqruZ4oGN+9MrW1itom&#xA;jirxaSSU1NfilkaRv+Gc5S2rF03TlvWv1tYVvnXg92I1ErLt8JkpyI+AbV7DFURirsVdirsVdirs&#xA;VdirsVdirsVdirsVUL6yhvbVreUsFYqyuhoyujB0dT4qygjFUPY6BoWn3Ml1Yada2lzMCJp4IY45&#xA;HDOZCGZFBNXYtv33xVH4ql0Xl3R4LpLi2tY7Zlne7dYESJZLiRDGZpeABd+LsNz3qdwKKoldN05b&#xA;1r9bWFb514PdiNRKy7fCZKciPgG1ewxVEYq7FVlxPFbwSTynjFErPIwBYhVFTsKk7eGKsI/KLzj5&#xA;a8x6HqH6EvlvRbapqUk5RXUKt3qFzPAfjVftxMG2+nFWdYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FUDp+s2l7PNbxh454PtxyLxNK0qNztls8RiAeha4ZRIkdQ3Za1pt7cy21tM&#xA;JJYd3ABoQDQkHoRXBPFKIshY5YyNBG5W2MX/AC8/L3Q/Iuj3Wl6OD6F1fXF89RShnf4Ix12iiVIx&#xA;40r3xVlGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5d+YF7qdt5vtUsrue2W&#xA;6QQXPorsIvQmbkW4tQtN6Q3I2G3vmY43GI83EySqRPklSX2r6XqVjGkky87EpOQu7SvPcxXCu6j9&#xA;2bfhHQqR8XucQTPY/wA5SBDcdzPPIN/qM/loXF5zubshJSgI5EyxJJRS5Vdy3cjK9RWxHc2YL3B7&#xA;020DVLy/t5XubSW3KT3EatIYaFY55I1A9OSQ1VVANcx29b9d1d/MZtPQaPTo4w3renzSXku59Xmv&#xA;psr0AXi1RX2IVTbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwu/wDMHnWDzDewW1h6+lh1&#xA;itWNrLVBxgDzmQOFkVTJKwjUBm4UB3XCrK9NkupLC3kuhS4dA0oKemQSK0KcpOJ8RyOBUTiqX3eg&#xA;6dd6hFfToWmhAAWvwmhqOQ70y2OaUY8IapYYylxFJrbTtM1zVtbivbSPhpd8LVFSoEqS2VtdMZRU&#xA;hiXuW6U2+nGGWUQQOqZ4oyIJ6Mit7OGCWeSPb12DMu1AVUJsB7LkDIkAdzIRAJPer5Fk7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq4ioIrT3GKvKvyIh/MX1PONx50vBdTtrDW1&#xA;ufQjg5tZwpbvcp6aICksaRKv+ofE1Veq4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqsWaF5HjR1aSKgkQEEryFRyHaoxVfirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdiqFu9StrW4hglJDSpLKX2CRxQgGSSRmIAUFlXxqfCpCqvBcQTx+pBIssdSOaMGWqmhFR4EU&#xA;xVD3Oq2Vvpb6ozM9kkX1gvEjSEx8eXJVUFjtv0xVu11K2uZ5II+Qkjjim+IUDRThuDj2JRhvvUfK&#xA;qqvHNDJz9N1f02KPxIPFh1U06HfFV+KpZomhJpRuONxJc+sxKtMI+aqZHl4mRVV3+KVvtsfvqSqm&#xA;eKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpJ5k8vy6uDEs5ghuLO70+5dac0juwhMicg&#xA;ylh6XGhH7Ve1Cq7Q/KllpekNpbObi3aZ5gvFIVXm3IIqQhFCr2GKr4/LcEPll9Ct5mhSS3+rNcKA&#xA;zbxiNnCvyAJA6dMVX6VpE9pePNPN63C1t7OF6UZlg5s0jhQqgs0lKAbUr3oFV3l7Q00XT1skne5C&#xA;cQJpVjWQhEVBzaNU5tRKszVJPtQBV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:27CC7A02122068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:27CC7A02122068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27CC7A02122068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:53:49+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -358 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 358 li
267 358 li
267 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 358 mo
266.999 358 li
266.999 0 li
0 0 li
0 358 li
clp
gsave
0 358 mo
266.999 358 li
266.999 0 li
0 0 li
0 358 li
clp
143.288 37.375 mo
191.288 37.375 li
191.288 58.375 li
143.288 58.375 li
143.288 37.375 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
143.288 58.375 mo
191.288 58.375 li
191.288 37.375 li
143.288 37.375 li
143.288 58.375 li
clp
gsave
142.256 57.5302 mo
190.604 57.5302 li
190.604 38.4131 li
142.256 38.4131 li
142.256 57.5302 li
clp
162.633 57.5297 mo
162.496 57.5297 162.358 57.5171 162.22 57.4912 cv
161.853 57.4228 161.524 57.2658 161.259 57.0758 cv
160.993 56.885 160.783 56.6639 160.607 56.4333 cv
160.258 55.97 160.029 55.4625 159.844 54.9089 cv
159.483 53.8043 159.313 52.4925 159.31 51.0747 cv
159.31 50.104 159.395 49.0886 159.58 48.079 cv
159.705 47.3965 159.765 46.6974 159.765 46.0282 cv
159.765 45.2636 159.687 44.5373 159.553 43.9268 cv
159.422 43.3171 159.227 42.8228 159.055 42.5429 cv
159.013 42.4714 158.972 42.4151 158.938 42.3728 cv
158.881 42.4089 158.808 42.4614 158.726 42.5322 cv
158.454 42.7645 158.096 43.1896 157.757 43.7392 cv
157.071 44.839 156.451 46.4276 156.199 47.9974 cv
156.197 48.0045 li
155.982 49.3222 155.609 50.6226 155.146 51.8048 cv
154.679 52.9901 154.13 54.0516 153.51 54.9077 cv
153.09 55.4777 152.653 55.9664 152.066 56.3418 cv
151.729 56.5515 151.323 56.7314 150.824 56.7692 cv
150.822 56.7693 li
150.666 56.7747 li
150.662 56.7747 150.659 56.7747 150.655 56.7747 cv
150.258 56.7747 149.866 56.6564 149.557 56.4783 cv
149.242 56.2986 149.001 56.071 148.807 55.8357 cv
148.423 55.361 148.192 54.844 148.003 54.2748 cv
147.637 53.14 147.468 51.7616 147.465 50.2297 cv
147.465 49.2175 147.544 48.1445 147.715 47.0594 cv
147.715 47.0598 li
147.866 46.1033 147.935 45.1698 147.935 44.3301 cv
147.936 43.475 147.861 42.7145 147.743 42.1472 cv
147.712 41.9824 147.673 41.8339 147.633 41.7062 cv
147.629 41.7091 147.626 41.7119 147.622 41.7148 cv
147.371 41.911 147.092 42.1858 146.839 42.4966 cv
146.325 43.1118 145.931 43.8999 145.849 44.3678 cv
145.849 44.3671 li
145.199 47.6688 li
143.288 47.2923 li
143.288 42.5875 li
143.478 42.1473 143.715 41.7266 143.98 41.3235 cv
144.482 40.5717 145.087 39.8916 145.774 39.3519 cv
146.234 38.9945 146.73 38.692 147.319 38.5098 cv
147.33 38.5064 li
147.319 38.5096 li
147.509 38.4517 147.716 38.4164 147.928 38.4131 cv
148.008 38.4131 li
148.368 38.4194 148.726 38.5258 149.012 38.6868 cv
149.313 38.8541 149.542 39.0676 149.725 39.2861 cv
150.087 39.7275 150.294 40.198 150.464 40.7087 cv
150.79 41.727 150.932 42.9474 150.935 44.3301 cv
150.935 45.3335 150.853 46.4147 150.678 47.5261 cv
150.678 47.5265 li
150.533 48.4506 150.465 49.3748 150.465 50.2297 cv
150.465 50.974 150.517 51.6663 150.607 52.2531 cv
150.678 52.7163 150.776 53.1152 150.877 53.4095 cv
151.123 53.1155 151.417 52.6743 151.698 52.1442 cv
152.364 50.8988 152.973 49.1623 153.238 47.5152 cv
153.238 47.5144 li
153.452 46.2078 153.842 44.9471 154.34 43.8165 cv
154.84 42.6854 155.439 41.6865 156.135 40.8912 cv
156.604 40.3631 157.111 39.913 157.754 39.6065 cv
158.121 39.4345 158.544 39.3127 159.011 39.3123 cv
159.112 39.3123 159.214 39.3181 159.316 39.3302 cv
160.08 39.42 160.693 39.8377 161.112 40.3016 cv
161.54 40.7731 161.835 41.3151 162.071 41.9073 cv
162.535 43.0911 162.761 44.507 162.765 46.0282 cv
162.765 46.8731 162.691 47.7478 162.53 48.621 cv
162.38 49.4366 162.31 50.2801 162.31 51.0747 cv
162.31 51.7872 162.367 52.4611 162.467 53.0338 cv
162.545 53.4915 162.655 53.8857 162.766 54.1707 cv
162.957 53.9089 163.182 53.5322 163.395 53.0795 cv
163.975 51.8618 164.493 50.1016 164.697 48.3256 cv
164.697 48.3252 li
164.862 46.9178 165.192 45.5507 165.627 44.3227 cv
166.064 43.0935 166.596 42.0077 167.227 41.1362 cv
167.655 40.5573 168.116 40.0575 168.753 39.6953 cv
169.117 39.4928 169.561 39.3382 170.064 39.3378 cv
170.162 39.3378 170.262 39.3439 170.363 39.3565 cv
170.36 39.3561 li
170.362 39.3563 li
170.734 39.4023 171.081 39.5337 171.373 39.7088 cv
171.666 39.8844 171.907 40.0998 172.112 40.331 cv
172.521 40.7956 172.798 41.3236 173.021 41.8992 cv
173.458 43.0495 173.67 44.4208 173.673 45.895 cv
173.673 46.7272 173.602 47.5892 173.446 48.45 cv
173.307 49.2168 173.242 50.0048 173.242 50.7469 cv
173.242 51.4183 173.296 52.0527 173.39 52.5935 cv
173.466 53.0427 173.574 53.4282 173.683 53.7042 cv
173.896 53.4398 174.154 53.0446 174.401 52.5649 cv
175.027 51.362 175.608 49.6334 175.873 47.9086 cv
176.092 46.4963 176.505 45.1079 177.032 43.8499 cv
177.561 42.5912 178.197 41.4666 178.921 40.5689 cv
179.409 39.972 179.928 39.4646 180.585 39.1029 cv
180.961 38.8999 181.398 38.7438 181.896 38.7212 cv
182.011 38.7187 li
182.019 38.7186 182.027 38.7185 182.035 38.7185 cv
182.722 38.7185 183.374 39.0259 183.81 39.4313 cv
184.262 39.8429 184.556 40.331 184.782 40.8512 cv
185.224 41.8938 185.408 43.1199 185.413 44.479 cv
185.412 45.6063 185.274 46.8188 184.977 48.0447 cv
184.977 48.0441 li
184.708 49.1534 184.581 50.2897 184.582 51.2926 cv
184.581 52.0956 184.664 52.8151 184.796 53.3431 cv
184.842 53.5461 184.901 53.7183 184.957 53.8536 cv
184.957 53.8534 184.958 53.8532 184.958 53.853 cv
185.239 53.5725 185.613 53.0598 185.967 52.408 cv
186.683 51.1019 187.344 49.2422 187.643 47.4052 cv
190.604 47.8926 li
190.366 49.3325 189.962 50.7355 189.462 51.9961 cv
188.958 53.2576 188.367 54.3723 187.696 55.2591 cv
187.242 55.8487 186.766 56.351 186.125 56.716 cv
185.759 56.9197 185.314 57.0802 184.799 57.0814 cv
184.592 57.0724 li
184.588 57.072 li
184.591 57.0723 li
183.891 57.0146 183.297 56.633 182.923 56.2121 cv
182.538 55.7853 182.297 55.3101 182.108 54.803 cv
181.74 53.789 181.586 52.6034 181.582 51.2926 cv
181.582 50.0438 181.734 48.6902 182.061 47.3377 cv
182.061 47.3371 li
182.302 46.3479 182.413 45.3581 182.413 44.479 cv
182.423 43.2685 182.174 42.2525 181.936 41.8507 cv
181.927 41.8346 181.918 41.8196 181.91 41.8057 cv
181.837 41.857 181.744 41.931 181.642 42.0284 cv
181.322 42.3308 180.919 42.852 180.542 43.504 cv
179.779 44.8091 179.102 46.6347 178.837 48.3678 cv
178.627 49.721 178.271 51.0348 177.829 52.2141 cv
177.383 53.3946 176.861 54.4357 176.259 55.2712 cv
175.851 55.8267 175.423 56.3053 174.818 56.6653 cv
174.474 56.8658 174.043 57.0298 173.535 57.0311 cv
173.432 57.0311 173.327 57.024 173.223 57.0093 cv
173.224 57.0094 li
173.221 57.0091 li
172.852 56.9575 172.514 56.8142 172.24 56.6325 cv
171.964 56.4502 171.747 56.2339 171.566 56.0077 cv
171.205 55.5531 170.973 55.0541 170.784 54.5111 cv
170.417 53.4275 170.245 52.1411 170.242 50.7469 cv
170.242 49.8305 170.321 48.8722 170.494 47.9163 cv
170.616 47.2439 170.673 46.5544 170.673 45.895 cv
170.674 45.2002 170.609 44.5383 170.497 43.9713 cv
170.388 43.4048 170.225 42.9322 170.07 42.6336 cv
170.044 42.5823 170.018 42.5365 169.993 42.4962 cv
169.983 42.5059 169.973 42.516 169.963 42.5265 cv
169.715 42.7793 169.379 43.2591 169.068 43.8768 cv
168.436 45.1147 167.881 46.8973 167.677 48.6728 cv
167.677 48.6725 li
167.515 50.0569 167.207 51.3978 166.807 52.6001 cv
166.405 53.8036 165.921 54.8631 165.345 55.7172 cv
164.954 56.2848 164.538 56.7776 163.93 57.1515 cv
163.584 57.3597 163.145 57.529 162.634 57.5297 cv
162.634 57.5297 162.633 57.5297 162.633 57.5297 cv
162.517 54.7978 mo
162.517 54.7978 li
162.517 54.7978 mo
162.517 54.7978 li
150.639 54.1815 mo
150.639 54.1815 li
150.639 54.1815 mo
150.639 54.1815 li
158.844 42.2735 mo
158.844 42.2735 li
158.844 42.2735 li
158.844 42.2735 li
148.191 41.3801 mo
148.191 41.3801 li
148.192 41.3799 li
148.192 41.3799 148.192 41.38 148.191 41.3801 cv
156.196 48.0137 mo
156.197 48.0045 li
156.198 48.0019 156.198 47.9991 156.199 47.9965 cv
156.196 48.0137 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
153.704 47.4033 mo
153.913 44.9282 li
147.191 44.9282 li
146.564 47.4033 li
146.839 47.4033 li
147.291 45.6318 147.521 45.269 149.182 45.269 cv
149.38 45.269 149.667 45.269 149.765 45.291 cv
149.997 45.335 149.974 45.4561 149.93 45.709 cv
148.962 51.5059 li
148.907 51.8799 148.875 52.0342 147.719 52.0342 cv
147.279 52.0342 li
147.224 52.375 li
147.686 52.3423 148.808 52.3423 149.314 52.3423 cv
149.82 52.3423 150.954 52.3423 151.393 52.375 cv
151.448 52.0342 li
151.008 52.0342 li
149.853 52.0342 149.886 51.8799 149.941 51.5059 cv
150.91 45.709 li
150.942 45.4893 150.975 45.335 151.173 45.291 cv
151.305 45.269 151.602 45.269 151.811 45.269 cv
153.472 45.269 153.571 45.6318 153.428 47.4033 cv
153.704 47.4033 li
cp
0 0 0 1 cmyk
f
156.486 55.0151 mo
156.486 54.9819 156.498 54.96 156.343 54.7729 cv
155.2 53.3872 155.188 51.3081 155.474 49.625 cv
155.793 47.7109 156.53 45.7969 158.114 44.4219 cv
158.279 44.29 158.279 44.2681 158.279 44.2354 cv
158.191 44.125 li
158.082 44.125 156.97 44.873 156.09 46.27 cv
155.32 47.48 154.991 48.7012 154.836 49.625 cv
154.693 50.4829 154.594 51.814 154.991 53.0571 cv
155.419 54.4102 156.245 55.125 156.354 55.125 cv
156.486 55.0151 li
cp
f
163.45 52.375 mo
163.504 52.0342 li
162.932 52.0342 162.657 52.0342 162.702 51.7041 cv
163.053 49.603 li
163.208 48.6572 163.273 48.3159 162.999 47.9199 cv
162.867 47.7329 162.547 47.5132 161.91 47.5132 cv
161.106 47.5132 160.512 47.9863 160.083 48.668 cv
160.282 47.5132 li
158.708 47.6343 li
158.653 47.9751 li
159.423 47.9751 159.5 48.0522 159.401 48.5908 cv
158.917 51.5391 li
158.83 52.0342 158.708 52.0342 157.971 52.0342 cv
157.917 52.375 li
159.17 52.3423 li
160.391 52.375 li
160.446 52.0342 li
159.709 52.0342 159.588 52.0342 159.676 51.5391 cv
160.006 49.5151 li
160.205 48.3711 161.084 47.7549 161.789 47.7549 cv
162.481 47.7549 162.503 48.3491 162.404 48.9761 cv
161.975 51.5391 li
161.887 52.0342 161.766 52.0342 161.029 52.0342 cv
160.974 52.375 li
162.228 52.3423 li
163.45 52.375 li
cp
f
175.736 49.625 mo
175.769 49.4053 175.56 49.4053 175.407 49.4053 cv
168.817 49.4053 li
168.664 49.4053 168.455 49.4053 168.421 49.625 cv
168.377 49.8452 168.586 49.8452 168.751 49.8452 cv
175.318 49.8452 li
175.483 49.8452 175.692 49.8452 175.736 49.625 cv
cp
f
184.075 52.375 mo
184.075 52.0562 li
183.733 52.0562 li
182.765 52.0562 182.732 51.9238 182.732 51.5283 cv
182.732 45.3242 li
182.732 45.0713 182.732 45.0601 182.512 45.0601 cv
182.249 45.3569 181.698 45.7642 180.565 45.7642 cv
180.565 46.083 li
180.818 46.083 181.369 46.083 181.973 45.7969 cv
181.973 51.5283 li
181.973 51.9238 181.94 52.0562 180.972 52.0562 cv
180.631 52.0562 li
180.631 52.375 li
180.928 52.353 181.996 52.353 182.358 52.353 cv
182.721 52.353 183.777 52.353 184.075 52.375 cv
cp
f
188.595 49.625 mo
188.738 48.7671 188.837 47.436 188.441 46.1934 cv
188.001 44.8398 187.176 44.125 187.066 44.125 cv
186.934 44.2354 li
186.934 44.2681 186.934 44.29 187.11 44.4883 cv
188.001 45.5771 188.342 47.3262 187.958 49.625 cv
187.638 51.5059 186.913 53.4419 185.317 54.8281 cv
185.152 54.96 185.141 54.9819 185.141 55.0151 cv
185.229 55.125 li
185.339 55.125 186.461 54.377 187.341 52.98 cv
188.1 51.77 188.441 50.5488 188.595 49.625 cv
cp
f
212.322 51.0659 mo
212.344 50.9561 212.234 50.9561 212.202 50.9561 cv
212.102 50.9561 212.069 51 212.037 51.0659 cv
211.542 52.0889 210.804 52.2212 210.397 52.2212 cv
209.814 52.2212 208.934 51.748 209.22 49.9771 cv
209.528 48.1841 210.507 47.7222 211.09 47.7222 cv
211.189 47.7222 211.872 47.7329 212.19 48.1289 cv
211.739 48.1621 211.619 48.4922 211.596 48.6353 cv
211.542 48.9209 211.707 49.1411 212.014 49.1411 cv
212.3 49.1411 212.553 48.9541 212.608 48.624 cv
212.729 47.876 211.97 47.4473 211.124 47.4473 cv
209.749 47.4473 208.539 48.6353 208.307 49.999 cv
208.077 51.4072 208.978 52.4961 210.254 52.4961 cv
211.728 52.4961 212.3 51.1763 212.322 51.0659 cv
cp
f
200.002 49.625 mo
200.002 49.4053 199.793 49.4053 199.639 49.4053 cv
196.57 49.4053 li
196.57 46.3252 li
196.57 46.1709 196.57 45.9619 196.35 45.9619 cv
196.13 45.9619 196.13 46.1709 196.13 46.3252 cv
196.13 49.4053 li
193.05 49.4053 li
192.896 49.4053 192.687 49.4053 192.687 49.625 cv
192.687 49.8452 192.896 49.8452 193.05 49.8452 cv
196.13 49.8452 li
196.13 52.9248 li
196.13 53.0791 196.13 53.2881 196.35 53.2881 cv
196.57 53.2881 196.57 53.0791 196.57 52.9248 cv
196.57 49.8452 li
199.639 49.8452 li
199.793 49.8452 200.002 49.8452 200.002 49.625 cv
cp
f
114.169 74.5 mo
162.168 74.5 li
162.168 95.5 li
114.169 95.5 li
114.169 74.5 li
0 0 0 0 cmyk
f
gsave
114.17 95.5 mo
162.17 95.5 li
162.17 74.5 li
114.17 74.5 li
114.17 95.5 li
clp
gsave
113.502 94.9712 mo
161.748 94.9712 li
161.748 75.1563 li
113.502 75.1563 li
113.502 94.9712 li
clp
133.118 94.9712 mo
133.016 94.9712 li
132.629 94.9622 132.251 94.8463 131.948 94.675 cv
131.626 94.4951 131.376 94.2658 131.172 94.0257 cv
130.768 93.5418 130.517 93.0049 130.311 92.4124 cv
129.91 91.2304 129.719 89.7911 129.715 88.212 cv
129.715 87.33 129.779 86.4086 129.917 85.4809 cv
130.044 84.6299 130.104 83.7431 130.104 82.8904 cv
130.104 82.0281 130.042 81.1997 129.933 80.4826 cv
129.838 79.8439 129.699 79.2906 129.557 78.902 cv
129.385 79.1347 129.189 79.4485 128.999 79.8197 cv
128.416 80.9462 127.867 82.5931 127.6 84.2984 cv
127.605 84.2635 li
127.6 84.2979 li
127.377 85.707 126.989 87.0874 126.506 88.3321 cv
126.021 89.5777 125.449 90.6826 124.797 91.5646 cv
124.356 92.151 123.894 92.6523 123.263 93.0221 cv
122.903 93.2282 122.46 93.3943 121.94 93.3958 cv
121.883 93.3951 li
121.913 93.3958 li
121.882 93.3951 li
121.508 93.3873 121.139 93.2825 120.833 93.1202 cv
120.525 92.9581 120.277 92.7471 120.073 92.523 cv
119.668 92.0708 119.416 91.566 119.214 91.0189 cv
118.822 89.9264 118.646 88.6214 118.643 87.1822 cv
118.643 86.1526 118.739 85.0607 118.949 83.9628 cv
118.952 83.9482 li
119.121 83.066 119.2 82.1831 119.2 81.3759 cv
119.2 80.7189 119.147 80.1116 119.057 79.6031 cv
118.968 79.0953 118.836 78.6854 118.716 78.4435 cv
118.706 78.4215 118.695 78.4011 118.685 78.3821 cv
118.629 78.4075 118.566 78.4406 118.498 78.4834 cv
118.281 78.6171 118.024 78.8393 117.79 79.1185 cv
117.315 79.6741 116.957 80.4586 116.902 81.0639 cv
116.486 84.9896 li
114.17 84.7442 li
114.17 79.5704 li
114.352 78.9986 114.613 78.4612 114.925 77.9667 cv
115.448 77.1471 116.11 76.4399 116.915 75.9353 cv
117.452 75.6031 118.068 75.3538 118.77 75.312 cv
118.769 75.312 li
118.905 75.3081 li
118.908 75.3081 118.91 75.3081 118.913 75.3081 cv
119.277 75.3081 119.641 75.3984 119.949 75.5486 cv
120.261 75.6994 120.517 75.9026 120.728 76.1211 cv
121.147 76.5623 121.408 77.061 121.615 77.5988 cv
122.018 78.6739 122.196 79.9553 122.2 81.3759 cv
122.2 82.3756 122.104 83.438 121.898 84.5128 cv
121.898 84.5136 li
121.724 85.4205 121.642 86.3384 121.643 87.1822 cv
121.642 87.8576 121.695 88.486 121.786 89.0158 cv
121.865 89.4834 121.979 89.8751 122.09 90.1401 cv
122.357 89.8545 122.701 89.3631 123.026 88.7491 cv
123.72 87.4566 124.356 85.6238 124.635 83.8396 cv
124.637 83.8305 li
124.846 82.5041 125.187 81.2339 125.608 80.102 cv
126.031 78.9688 126.524 77.9783 127.098 77.1812 cv
127.488 76.6515 127.9 76.1925 128.489 75.8465 cv
128.825 75.6538 129.246 75.4977 129.736 75.4968 cv
129.738 75.4968 129.739 75.4968 129.74 75.4968 cv
129.972 75.4968 130.214 75.5351 130.442 75.6122 cv
130.435 75.6099 li
130.441 75.6119 li
130.822 75.7406 131.124 75.9544 131.358 76.1801 cv
131.593 76.4081 131.772 76.653 131.924 76.9073 cv
132.226 77.4165 132.432 77.9742 132.602 78.5927 cv
132.934 79.8258 133.102 81.3094 133.104 82.8904 cv
133.104 83.8828 133.035 84.9097 132.885 85.9224 cv
132.769 86.6965 132.715 87.4756 132.715 88.212 cv
132.715 89.1265 132.8 89.9771 132.941 90.6579 cv
133.021 91.0633 133.13 91.4096 133.232 91.6609 cv
133.504 91.3497 133.845 90.8472 134.173 90.2313 cv
134.901 88.8758 135.588 86.9706 135.924 85.1254 cv
136.184 83.7089 136.584 82.3056 137.056 81.0345 cv
137.53 79.7622 138.068 78.6283 138.654 77.7224 cv
139.054 77.1178 139.45 76.6081 140.011 76.195 cv
140.334 75.9664 140.744 75.7447 141.303 75.708 cv
141.422 75.7046 li
141.426 75.7046 141.429 75.7045 141.433 75.7045 cv
141.872 75.7045 142.29 75.8572 142.596 76.0605 cv
142.91 76.2665 143.133 76.5108 143.314 76.7587 cv
143.671 77.2575 143.887 77.7955 144.07 78.3996 cv
144.423 79.602 144.598 81.0851 144.601 82.713 cv
144.601 83.5252 144.555 84.37 144.455 85.222 cv
144.366 85.9824 144.324 86.7513 144.324 87.4877 cv
144.324 88.3337 144.38 89.1375 144.477 89.8306 cv
144.545 90.3153 144.635 90.7477 144.733 91.0926 cv
144.938 90.7994 145.168 90.4239 145.396 89.9934 cv
146.118 88.6363 146.841 86.7283 147.266 84.8482 cv
147.593 83.4118 148.07 81.9801 148.62 80.6762 cv
149.171 79.3715 149.789 78.2 150.441 77.2643 cv
150.882 76.6396 151.32 76.1159 151.883 75.7004 cv
152.208 75.4684 152.591 75.2515 153.117 75.1759 cv
153.118 75.1757 li
153.213 75.1631 153.31 75.1564 153.409 75.1564 cv
153.412 75.1563 153.416 75.1563 153.42 75.1563 cv
153.797 75.1563 154.173 75.2654 154.472 75.4333 cv
154.777 75.6026 155.011 75.819 155.198 76.0417 cv
155.568 76.4915 155.783 76.9742 155.958 77.4989 cv
156.296 78.5452 156.444 79.8002 156.447 81.2089 cv
156.447 82.276 156.355 83.4231 156.156 84.5899 cv
156.155 84.5935 li
156.003 85.487 155.931 86.3861 155.932 87.222 cv
155.931 88.1821 156.027 89.0616 156.183 89.735 cv
156.258 90.0828 156.361 90.3745 156.453 90.5846 cv
156.708 90.3063 157.035 89.8263 157.339 89.2266 cv
157.991 87.9598 158.563 86.1633 158.77 84.4353 cv
161.748 84.798 li
161.748 84.8039 li
161.578 86.1874 161.237 87.5469 160.793 88.7771 cv
160.345 90.0099 159.802 91.1082 159.166 91.9908 cv
158.736 92.5775 158.277 93.083 157.646 93.4557 cv
157.285 93.6638 156.843 93.8288 156.332 93.8363 cv
156.327 93.8364 li
156.325 93.8364 li
156.302 93.8365 li
156.298 93.8365 156.295 93.8365 156.292 93.8365 cv
155.901 93.8365 155.514 93.729 155.197 93.5598 cv
154.875 93.3894 154.619 93.1669 154.41 92.9315 cv
153.995 92.4566 153.737 91.9256 153.529 91.3438 cv
153.123 90.1822 152.935 88.7752 152.932 87.222 cv
152.932 86.2162 153.016 85.1547 153.199 84.0853 cv
153.199 84.0839 li
153.369 83.089 153.447 82.1012 153.447 81.2089 cv
153.448 80.3377 153.371 79.555 153.246 78.966 cv
153.223 78.8433 153.195 78.729 153.166 78.6248 cv
152.871 78.9942 152.521 79.5337 152.178 80.1726 cv
151.388 81.6349 150.619 83.625 150.192 85.5129 cv
149.87 86.9287 149.417 88.3178 148.902 89.5669 cv
148.384 90.8171 147.812 91.9212 147.203 92.7953 cv
146.788 93.3786 146.383 93.8673 145.808 94.2567 cv
145.479 94.4712 145.055 94.6782 144.487 94.6837 cv
144.36 94.6797 li
143.906 94.6535 143.499 94.4677 143.21 94.2489 cv
142.916 94.0281 142.712 93.7794 142.543 93.5273 cv
142.211 93.021 142.006 92.4753 141.832 91.8604 cv
141.496 90.6368 141.327 89.1284 141.324 87.4877 cv
141.324 86.6383 141.372 85.7571 141.475 84.8737 cv
141.561 84.1431 141.601 83.411 141.601 82.713 cv
141.602 81.6736 141.511 80.7069 141.362 79.9482 cv
141.318 79.71 141.264 79.4911 141.208 79.2998 cv
141.002 79.6113 140.772 80.0141 140.549 80.4754 cv
139.868 81.8686 139.215 83.8028 138.874 85.6673 cv
138.611 87.0979 138.19 88.5059 137.682 89.7769 cv
137.172 91.0489 136.584 92.1786 135.933 93.0774 cv
135.492 93.6759 135.041 94.1832 134.424 94.5674 cv
134.076 94.7779 133.645 94.9586 133.118 94.9712 cv
133.072 92.4686 mo
133.072 92.4686 li
133.072 92.4686 mo
133.072 92.4686 li
144.332 92.0431 mo
144.332 92.0431 li
144.332 92.0431 mo
144.332 92.0431 li
156.299 91.2325 mo
156.299 91.2325 li
156.299 91.2325 mo
156.299 91.2325 li
156.151 84.6195 mo
156.155 84.5935 li
156.155 84.5925 156.156 84.5915 156.156 84.5905 cv
156.151 84.6195 li
124.631 83.8649 mo
124.636 83.8309 li
124.636 83.8338 124.636 83.8367 124.635 83.8396 cv
124.631 83.8649 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
124.584 84.5283 mo
124.793 82.0532 li
118.073 82.0532 li
117.446 84.5283 li
117.721 84.5283 li
118.171 82.7568 118.402 82.394 120.063 82.394 cv
120.262 82.394 120.547 82.394 120.646 82.416 cv
120.877 82.46 120.855 82.5811 120.812 82.834 cv
119.844 88.6309 li
119.789 89.0049 119.755 89.1592 118.601 89.1592 cv
118.161 89.1592 li
118.105 89.5 li
118.567 89.4673 119.689 89.4673 120.196 89.4673 cv
120.702 89.4673 121.834 89.4673 122.274 89.5 cv
122.33 89.1592 li
121.89 89.1592 li
120.734 89.1592 120.768 89.0049 120.823 88.6309 cv
121.791 82.834 li
121.824 82.6143 121.856 82.46 122.055 82.416 cv
122.187 82.394 122.483 82.394 122.692 82.394 cv
124.354 82.394 124.453 82.7568 124.31 84.5283 cv
124.584 84.5283 li
cp
0 0 0 1 cmyk
f
127.368 92.1401 mo
127.368 92.1069 127.378 92.085 127.225 91.8979 cv
126.081 90.5122 126.069 88.4331 126.355 86.75 cv
126.674 84.8359 127.412 82.9219 128.996 81.5469 cv
129.161 81.415 129.161 81.3931 129.161 81.3604 cv
129.073 81.25 li
128.962 81.25 127.852 81.998 126.972 83.395 cv
126.202 84.605 125.872 85.8262 125.717 86.75 cv
125.575 87.6079 125.476 88.939 125.872 90.1821 cv
126.3 91.5352 127.125 92.25 127.235 92.25 cv
127.368 92.1401 li
cp
f
134.331 89.5 mo
134.386 89.1592 li
133.813 89.1592 133.539 89.1592 133.583 88.8291 cv
133.935 86.728 li
134.088 85.7822 134.155 85.4409 133.879 85.0449 cv
133.748 84.8579 133.429 84.6382 132.791 84.6382 cv
131.988 84.6382 131.394 85.1113 130.964 85.793 cv
131.163 84.6382 li
129.589 84.7593 li
129.535 85.1001 li
130.305 85.1001 130.381 85.1772 130.283 85.7158 cv
129.798 88.6641 li
129.71 89.1592 129.589 89.1592 128.853 89.1592 cv
128.797 89.5 li
130.052 89.4673 li
131.272 89.5 li
131.328 89.1592 li
130.59 89.1592 130.47 89.1592 130.558 88.6641 cv
130.888 86.6401 li
131.085 85.4961 131.965 84.8799 132.669 84.8799 cv
133.363 84.8799 133.384 85.4741 133.286 86.1011 cv
132.856 88.6641 li
132.769 89.1592 132.647 89.1592 131.911 89.1592 cv
131.855 89.5 li
133.109 89.4673 li
134.331 89.5 li
cp
f
146.618 86.75 mo
146.651 86.5303 146.442 86.5303 146.288 86.5303 cv
139.699 86.5303 li
139.544 86.5303 139.335 86.5303 139.303 86.75 cv
139.258 86.9702 139.467 86.9702 139.632 86.9702 cv
146.2 86.9702 li
146.365 86.9702 146.574 86.9702 146.618 86.75 cv
cp
f
155.286 87.6523 mo
155.043 87.6523 li
155.01 87.8389 154.922 88.4443 154.813 88.6201 cv
154.736 88.7192 154.109 88.7192 153.779 88.7192 cv
151.744 88.7192 li
152.041 88.4658 152.711 87.7622 152.998 87.498 cv
154.669 85.958 155.286 85.3862 155.286 84.2969 cv
155.286 83.0322 154.285 82.1851 153.008 82.1851 cv
151.733 82.1851 150.985 83.2739 150.985 84.2202 cv
150.985 84.7813 151.468 84.7813 151.501 84.7813 cv
151.733 84.7813 152.018 84.6162 152.018 84.2642 cv
152.018 83.9561 151.809 83.7471 151.501 83.7471 cv
151.403 83.7471 151.38 83.7471 151.347 83.7578 cv
151.556 83.0103 152.151 82.5039 152.866 82.5039 cv
153.8 82.5039 154.373 83.2852 154.373 84.2969 cv
154.373 85.2319 153.833 86.0459 153.207 86.75 cv
150.985 89.2363 li
150.985 89.5 li
155 89.5 li
155.286 87.6523 li
cp
f
159.476 86.75 mo
159.62 85.8921 159.718 84.561 159.323 83.3184 cv
158.882 81.9648 158.057 81.25 157.948 81.25 cv
157.816 81.3604 li
157.816 81.3931 157.816 81.415 157.992 81.6133 cv
158.882 82.7021 159.223 84.4512 158.838 86.75 cv
158.52 88.6309 157.793 90.5669 156.199 91.9531 cv
156.034 92.085 156.023 92.1069 156.023 92.1401 cv
156.111 92.25 li
156.22 92.25 157.342 91.502 158.222 90.105 cv
158.982 88.895 159.323 87.6738 159.476 86.75 cv
cp
f
184.501 88.1909 mo
184.524 88.0811 184.414 88.0811 184.38 88.0811 cv
184.282 88.0811 184.249 88.125 184.215 88.1909 cv
183.72 89.2139 182.984 89.3462 182.577 89.3462 cv
181.994 89.3462 181.114 88.873 181.4 87.1021 cv
181.708 85.3091 182.686 84.8472 183.27 84.8472 cv
183.369 84.8472 184.05 84.8579 184.37 85.2539 cv
183.918 85.2871 183.797 85.6172 183.776 85.7603 cv
183.72 86.0459 183.885 86.2661 184.194 86.2661 cv
184.48 86.2661 184.733 86.0791 184.788 85.749 cv
184.909 85.001 184.15 84.5723 183.302 84.5723 cv
181.927 84.5723 180.717 85.7603 180.487 87.124 cv
180.255 88.5322 181.158 89.6211 182.433 89.6211 cv
183.908 89.6211 184.48 88.3013 184.501 88.1909 cv
cp
f
170.85 86.75 mo
170.85 86.5303 170.641 86.5303 170.488 86.5303 cv
167.418 86.5303 li
167.418 83.4502 li
167.418 83.2959 167.418 83.0869 167.199 83.0869 cv
166.979 83.0869 166.979 83.2959 166.979 83.4502 cv
166.979 86.5303 li
163.899 86.5303 li
163.745 86.5303 163.536 86.5303 163.536 86.75 cv
163.536 86.9702 163.745 86.9702 163.899 86.9702 cv
166.979 86.9702 li
166.979 90.0498 li
166.979 90.2041 166.979 90.4131 167.199 90.4131 cv
167.418 90.4131 167.418 90.2041 167.418 90.0498 cv
167.418 86.9702 li
170.488 86.9702 li
170.641 86.9702 170.85 86.9702 170.85 86.75 cv
cp
f
166.764 58.3739 mo
166.747 66.599 li
166.746 66.8752 166.969 67.0995 167.245 67.1001 cv
167.522 67.1007 167.746 66.8773 167.747 66.6012 cv
167.764 58.3761 li
167.765 58.0999 167.541 57.8756 167.265 57.875 cv
166.989 57.8744 166.765 58.0978 166.764 58.3739 cv
.746 .676 .668 .898 cmyk
f
167.234 72.6001 mo
169.498 66.6055 li
164.998 66.5952 li
167.234 72.6001 li
cp
f
167.234 72.6001 mo
167.702 72.7767 li
170.22 66.1071 li
164.277 66.0936 li
167.231 74.024 li
167.702 72.7767 li
167.234 72.6001 li
167.702 72.4256 li
165.718 67.0968 li
168.775 67.1038 li
166.766 72.4235 li
167.234 72.6001 li
167.702 72.4256 li
167.234 72.6001 li
cp
f
84.9917 111.625 mo
132.992 111.625 li
132.992 132.625 li
84.9917 132.625 li
84.9917 111.625 li
0 0 0 0 cmyk
f
gsave
84.9917 132.625 mo
132.993 132.625 li
132.993 111.625 li
84.9917 111.625 li
84.9917 132.625 li
clp
gsave
83.8774 132.06 mo
131.965 132.06 li
131.965 112.246 li
83.8774 112.246 li
83.8774 132.06 li
clp
126.281 132.06 mo
126.213 132.06 li
125.862 132.054 125.512 131.962 125.219 131.813 cv
124.912 131.658 124.665 131.453 124.464 131.235 cv
124.065 130.796 123.826 130.31 123.635 129.788 cv
123.266 128.745 123.107 127.506 123.104 126.127 cv
123.104 125.026 123.214 123.844 123.451 122.649 cv
123.67 121.552 123.773 120.43 123.773 119.427 cv
123.773 118.792 123.732 118.203 123.659 117.707 cv
123.617 117.415 123.562 117.155 123.504 116.939 cv
123.308 117.19 123.085 117.528 122.869 117.924 cv
122.225 119.089 121.614 120.756 121.315 122.401 cv
121.31 122.425 li
121.315 122.4 li
121.075 123.707 120.669 124.969 120.165 126.099 cv
119.659 127.231 119.063 128.229 118.381 129.023 cv
117.921 129.551 117.43 130.001 116.799 130.314 cv
116.439 130.489 116.018 130.618 115.546 130.619 cv
115.44 130.619 115.332 130.612 115.223 130.598 cv
115.239 130.6 li
115.222 130.598 li
114.847 130.549 114.499 130.414 114.206 130.237 cv
113.913 130.058 113.67 129.841 113.464 129.607 cv
113.053 129.137 112.772 128.603 112.545 128.019 cv
112.1 126.852 111.882 125.459 111.879 123.965 cv
111.879 123.161 111.945 122.331 112.091 121.502 cv
112.222 120.756 112.284 119.986 112.284 119.256 cv
112.284 118.435 112.204 117.662 112.071 117.041 cv
112.001 116.7 111.909 116.404 111.819 116.18 cv
111.611 116.443 111.36 116.832 111.12 117.303 cv
110.499 118.507 109.921 120.24 109.656 121.981 cv
109.442 123.36 109.06 124.696 108.575 125.893 cv
108.088 127.091 107.507 128.148 106.835 128.99 cv
106.381 129.55 105.894 130.029 105.252 130.367 cv
104.886 130.556 104.451 130.697 103.961 130.697 cv
103.853 130.697 103.743 130.69 103.632 130.676 cv
103.633 130.676 li
103.25 130.625 102.895 130.483 102.6 130.297 cv
102.304 130.111 102.063 129.885 101.859 129.644 cv
101.452 129.16 101.177 128.611 100.954 128.01 cv
100.518 126.808 100.305 125.367 100.302 123.815 cv
100.302 122.917 100.377 121.985 100.541 121.055 cv
100.541 121.056 li
100.719 120.049 100.802 119.027 100.801 118.105 cv
100.802 117.287 100.735 116.544 100.626 115.98 cv
100.625 115.976 100.624 115.971 100.624 115.967 cv
100.444 116.243 100.249 116.578 100.057 116.954 cv
99.3455 118.332 98.6336 120.267 98.2164 122.172 cv
98.2218 122.147 li
98.2165 122.171 li
97.8984 123.617 97.431 125.061 96.8905 126.377 cv
96.348 127.695 95.7386 128.879 95.0954 129.826 cv
94.6596 130.458 94.2279 130.988 93.6716 131.411 cv
93.3501 131.648 92.9712 131.871 92.4441 131.954 cv
92.447 131.954 li
92.4414 131.954 li
92.338 131.97 92.2316 131.978 92.1245 131.978 cv
92.1239 131.978 92.1233 131.978 92.1227 131.978 cv
92.1192 131.978 92.1157 131.978 92.1122 131.978 cv
91.753 131.978 91.3911 131.878 91.0985 131.72 cv
90.8003 131.561 90.5684 131.354 90.3842 131.14 cv
90.0187 130.709 89.8116 130.25 89.6446 129.757 cv
89.3233 128.773 89.1893 127.609 89.1857 126.295 cv
89.186 125.144 89.2988 123.889 89.5408 122.608 cv
89.7302 121.608 89.819 120.588 89.8187 119.651 cv
89.8195 118.702 89.7263 117.834 89.5751 117.176 cv
89.4793 116.724 89.3334 116.373 89.2339 116.186 cv
89.1607 116.205 89.0748 116.236 88.9803 116.282 cv
88.7778 116.379 88.5428 116.54 88.3265 116.747 cv
87.8864 117.158 87.55 117.752 87.4738 118.21 cv
87.4739 118.21 li
86.8279 121.731 li
84.9917 121.394 li
84.9917 116.282 li
85.1806 115.903 85.4096 115.549 85.6657 115.224 cv
86.2157 114.532 86.8922 113.96 87.681 113.578 cv
88.207 113.326 88.7923 113.157 89.4292 113.156 cv
89.521 113.156 89.6142 113.159 89.7085 113.167 cv
89.7076 113.167 li
90.0899 113.197 90.4536 113.329 90.7468 113.51 cv
91.0423 113.691 91.2746 113.914 91.4656 114.146 cv
91.8447 114.615 92.0818 115.131 92.2734 115.694 cv
92.6459 116.818 92.8156 118.167 92.8187 119.651 cv
92.8185 120.775 92.7145 121.97 92.4885 123.166 cv
92.2813 124.259 92.1854 125.342 92.1857 126.295 cv
92.1854 126.998 92.2385 127.632 92.3275 128.133 cv
92.3466 128.246 92.3683 128.352 92.3913 128.45 cv
92.6758 128.075 93.0074 127.547 93.3314 126.928 cv
94.1123 125.445 94.8699 123.433 95.2864 121.527 cv
95.2865 121.527 li
95.6011 120.099 96.0448 118.695 96.5501 117.433 cv
97.0577 116.17 97.6189 115.053 98.2161 114.169 cv
98.6237 113.579 99.0195 113.086 99.5885 112.688 cv
99.915 112.469 100.34 112.253 100.919 112.246 cv
101.025 112.249 li
101.024 112.249 li
101.407 112.267 101.774 112.402 102.054 112.583 cv
102.338 112.766 102.545 112.984 102.711 113.203 cv
103.038 113.644 103.223 114.104 103.376 114.604 cv
103.67 115.599 103.799 116.785 103.801 118.105 cv
103.801 119.201 103.705 120.381 103.498 121.567 cv
103.496 121.576 li
103.364 122.321 103.302 123.085 103.302 123.815 cv
103.301 124.748 103.405 125.626 103.576 126.324 cv
103.709 126.897 103.908 127.346 104.054 127.577 cv
104.086 127.55 104.122 127.519 104.16 127.483 cv
104.428 127.232 104.786 126.767 105.123 126.168 cv
105.807 124.969 106.428 123.243 106.691 121.523 cv
106.901 120.164 107.255 118.846 107.694 117.665 cv
108.135 116.483 108.653 115.442 109.25 114.607 cv
109.655 114.051 110.079 113.573 110.682 113.211 cv
111.025 113.01 111.456 112.845 111.964 112.844 cv
111.965 112.844 111.965 112.844 111.966 112.844 cv
112.088 112.844 112.214 112.854 112.34 112.876 cv
112.339 112.875 li
112.71 112.938 113.043 113.092 113.311 113.28 cv
113.581 113.469 113.793 113.688 113.971 113.918 cv
114.324 114.379 114.554 114.885 114.741 115.436 cv
115.107 116.537 115.281 117.845 115.284 119.256 cv
115.284 120.154 115.209 121.089 115.046 122.021 cv
114.932 122.666 114.878 123.328 114.879 123.965 cv
114.878 124.84 114.982 125.669 115.151 126.326 cv
115.288 126.883 115.492 127.313 115.635 127.522 cv
115.676 127.492 115.723 127.454 115.774 127.409 cv
116.042 127.174 116.4 126.741 116.742 126.183 cv
117.434 125.067 118.075 123.457 118.364 121.86 cv
118.364 121.859 li
118.603 120.557 118.986 119.29 119.449 118.151 cv
119.915 117.011 120.453 116.003 121.06 115.195 cv
121.472 114.658 121.9 114.196 122.493 113.849 cv
122.833 113.655 123.254 113.495 123.757 113.493 cv
123.967 113.503 li
123.957 113.502 li
123.965 113.503 li
124.333 113.536 124.682 113.67 124.956 113.848 cv
125.234 114.027 125.445 114.241 125.617 114.46 cv
125.956 114.902 126.157 115.372 126.319 115.88 cv
126.634 116.894 126.77 118.095 126.773 119.427 cv
126.772 120.631 126.653 121.933 126.393 123.235 cv
126.195 124.229 126.103 125.228 126.104 126.127 cv
126.103 126.933 126.179 127.66 126.301 128.214 cv
126.342 128.409 126.392 128.581 126.442 128.726 cv
126.708 128.414 127.036 127.92 127.348 127.319 cv
128.055 125.972 128.708 124.084 129.005 122.265 cv
131.965 122.754 li
131.965 122.756 li
131.73 124.177 131.333 125.576 130.845 126.842 cv
130.354 128.11 129.781 129.24 129.137 130.142 cv
128.701 130.743 128.251 131.254 127.636 131.642 cv
127.285 131.858 126.851 132.042 126.322 132.059 cv
126.318 132.06 li
126.313 132.06 li
126.281 132.06 li
126.25 129.516 mo
126.25 129.516 li
126.25 129.516 mo
126.25 129.516 li
92.0822 129.508 mo
92.0822 129.508 li
92.0822 129.508 mo
92.0822 129.508 li
123.986 116.451 mo
123.986 116.451 li
123.986 116.451 li
101.024 112.249 mo
101.022 112.249 101.021 112.249 101.02 112.249 cv
101.022 112.249 li
101.024 112.249 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
95.4067 121.653 mo
95.6157 119.178 li
88.895 119.178 li
88.2681 121.653 li
88.543 121.653 li
88.9937 119.882 89.2246 119.519 90.8857 119.519 cv
91.084 119.519 91.3696 119.519 91.4688 119.541 cv
91.6997 119.585 91.6777 119.706 91.6338 119.959 cv
90.666 125.756 li
90.6108 126.13 90.5776 126.284 89.4229 126.284 cv
88.9829 126.284 li
88.9277 126.625 li
89.3896 126.592 90.5117 126.592 91.0181 126.592 cv
91.5239 126.592 92.6567 126.592 93.0967 126.625 cv
93.1519 126.284 li
92.7119 126.284 li
91.5566 126.284 91.5898 126.13 91.645 125.756 cv
92.6128 119.959 li
92.646 119.739 92.6787 119.585 92.877 119.541 cv
93.0088 119.519 93.3057 119.519 93.5146 119.519 cv
95.1758 119.519 95.2749 119.882 95.1318 121.653 cv
95.4067 121.653 li
cp
0 0 0 1 cmyk
f
98.1899 129.265 mo
98.1899 129.232 98.2007 129.21 98.0469 129.023 cv
96.9028 127.637 96.8921 125.558 97.1777 123.875 cv
97.4966 121.961 98.2339 120.047 99.8179 118.672 cv
99.9829 118.54 99.9829 118.518 99.9829 118.485 cv
99.895 118.375 li
99.7847 118.375 98.6738 119.123 97.7939 120.52 cv
97.0239 121.73 96.6938 122.951 96.54 123.875 cv
96.397 124.733 96.2979 126.064 96.6938 127.307 cv
97.123 128.66 97.9478 129.375 98.0576 129.375 cv
98.1899 129.265 li
cp
f
105.153 126.625 mo
105.208 126.284 li
104.636 126.284 104.361 126.284 104.405 125.954 cv
104.757 123.853 li
104.911 122.907 104.977 122.566 104.702 122.17 cv
104.57 121.983 104.251 121.763 103.613 121.763 cv
102.81 121.763 102.216 122.236 101.787 122.918 cv
101.985 121.763 li
100.412 121.884 li
100.357 122.225 li
101.127 122.225 101.204 122.302 101.105 122.841 cv
100.621 125.789 li
100.533 126.284 100.412 126.284 99.6748 126.284 cv
99.6196 126.625 li
100.874 126.592 li
102.095 126.625 li
102.15 126.284 li
101.413 126.284 101.292 126.284 101.38 125.789 cv
101.71 123.765 li
101.908 122.621 102.788 122.005 103.492 122.005 cv
104.185 122.005 104.207 122.599 104.108 123.226 cv
103.679 125.789 li
103.591 126.284 103.47 126.284 102.733 126.284 cv
102.678 126.625 li
103.932 126.592 li
105.153 126.625 li
cp
f
117.44 123.875 mo
117.473 123.655 117.264 123.655 117.11 123.655 cv
110.521 123.655 li
110.367 123.655 110.158 123.655 110.125 123.875 cv
110.081 124.095 110.29 124.095 110.455 124.095 cv
117.022 124.095 li
117.187 124.095 117.396 124.095 117.44 123.875 cv
cp
f
126.196 124.744 mo
126.196 123.732 125.382 122.94 124.326 122.753 cv
125.283 122.478 125.899 121.675 125.899 120.817 cv
125.899 119.948 124.997 119.31 123.93 119.31 cv
122.83 119.31 122.016 119.981 122.016 120.784 cv
122.016 121.224 122.357 121.312 122.522 121.312 cv
122.753 121.312 123.017 121.147 123.017 120.817 cv
123.017 120.465 122.753 120.311 122.511 120.311 cv
122.39 120.322 li
122.808 119.574 123.842 119.574 123.897 119.574 cv
124.26 119.574 124.975 119.739 124.975 120.817 cv
124.975 121.026 124.942 121.642 124.623 122.115 cv
124.293 122.599 123.919 122.632 123.622 122.643 cv
123.292 122.676 li
123.105 122.687 123.061 122.698 123.061 122.797 cv
123.061 122.907 123.116 122.907 123.314 122.907 cv
123.82 122.907 li
124.755 122.907 125.173 123.677 125.173 124.733 cv
125.173 126.174 124.425 126.559 123.886 126.559 cv
123.358 126.559 122.456 126.306 122.137 125.58 cv
122.489 125.635 122.808 125.437 122.808 125.041 cv
122.808 124.722 122.577 124.502 122.269 124.502 cv
122.005 124.502 121.719 124.656 121.719 125.074 cv
121.719 126.053 122.698 126.856 123.919 126.856 cv
125.228 126.856 126.196 125.855 126.196 124.744 cv
cp
f
130.299 123.875 mo
130.442 123.017 130.541 121.686 130.145 120.443 cv
129.705 119.09 128.88 118.375 128.77 118.375 cv
128.638 118.485 li
128.638 118.518 128.638 118.54 128.814 118.738 cv
129.705 119.827 130.046 121.576 129.661 123.875 cv
129.342 125.756 128.616 127.692 127.021 129.078 cv
126.856 129.21 126.845 129.232 126.845 129.265 cv
126.933 129.375 li
127.043 129.375 128.165 128.627 129.045 127.23 cv
129.804 126.02 130.145 124.799 130.299 123.875 cv
cp
f
154.675 125.316 mo
154.697 125.206 154.586 125.206 154.554 125.206 cv
154.455 125.206 154.421 125.25 154.389 125.316 cv
153.894 126.339 153.157 126.471 152.75 126.471 cv
152.167 126.471 151.287 125.998 151.573 124.227 cv
151.881 122.434 152.86 121.972 153.443 121.972 cv
153.542 121.972 154.224 121.983 154.542 122.379 cv
154.092 122.412 153.971 122.742 153.949 122.885 cv
153.894 123.171 154.059 123.391 154.367 123.391 cv
154.653 123.391 154.906 123.204 154.96 122.874 cv
155.082 122.126 154.323 121.697 153.476 121.697 cv
152.101 121.697 150.891 122.885 150.66 124.249 cv
150.429 125.657 151.331 126.746 152.607 126.746 cv
154.081 126.746 154.653 125.426 154.675 125.316 cv
cp
f
141.695 123.875 mo
141.695 123.655 141.486 123.655 141.332 123.655 cv
138.263 123.655 li
138.263 120.575 li
138.263 120.421 138.263 120.212 138.043 120.212 cv
137.823 120.212 137.823 120.421 137.823 120.575 cv
137.823 123.655 li
134.743 123.655 li
134.589 123.655 134.38 123.655 134.38 123.875 cv
134.38 124.095 134.589 124.095 134.743 124.095 cv
137.823 124.095 li
137.823 127.175 li
137.823 127.329 137.823 127.538 138.043 127.538 cv
138.263 127.538 138.263 127.329 138.263 127.175 cv
138.263 124.095 li
141.332 124.095 li
141.486 124.095 141.695 124.095 141.695 123.875 cv
cp
f
137.634 95.4983 mo
137.606 103.723 li
137.605 104 137.828 104.224 138.104 104.225 cv
138.38 104.226 138.605 104.003 138.606 103.727 cv
138.634 95.5017 li
138.635 95.2255 138.412 95.0009 138.135 95 cv
137.859 94.9991 137.635 95.2222 137.634 95.4983 cv
.746 .676 .668 .898 cmyk
f
138.085 109.725 mo
140.356 103.733 li
135.856 103.717 li
138.085 109.725 li
cp
f
138.085 109.725 mo
138.552 109.902 li
141.079 103.236 li
135.136 103.215 li
138.08 111.149 li
138.552 109.902 li
138.085 109.725 li
138.554 109.551 li
136.576 104.22 li
139.633 104.231 li
137.617 109.548 li
138.085 109.725 li
138.554 109.551 li
138.085 109.725 li
cp
f
182.857 .250044 mo
209.857 .250044 li
209.857 21.25 li
182.857 21.25 li
182.857 .250044 li
0 0 0 0 cmyk
f
gsave
182.857 21.25 mo
209.857 21.25 li
209.857 .250044 li
182.857 .250044 li
182.857 21.25 li
clp
gsave
181.42 20.2461 mo
210.601 20.2461 li
210.601 1.39792 li
181.42 1.39792 li
181.42 20.2461 li
clp
200.719 20.246 mo
200.525 20.246 200.326 20.2203 200.134 20.1683 cv
200.134 20.1685 li
199.789 20.0757 199.486 19.9101 199.237 19.7175 cv
198.987 19.5239 198.787 19.3041 198.616 19.074 cv
198.278 18.6122 198.049 18.1053 197.866 17.5545 cv
197.506 16.4552 197.337 15.1611 197.335 13.7707 cv
197.335 12.7213 197.436 11.6222 197.659 10.538 cv
197.664 10.5146 li
197.826 9.72438 197.902 8.90202 197.902 8.12303 cv
197.902 7.39225 197.834 6.69894 197.717 6.11282 cv
197.602 5.5275 197.43 5.04856 197.273 4.76814 cv
197.252 4.72768 197.23 4.6917 197.21 4.66012 cv
197.186 4.67965 197.161 4.70161 197.135 4.7261 cv
196.894 4.94541 196.566 5.36331 196.257 5.91045 cv
195.631 7.00599 195.068 8.60672 194.843 10.2335 cv
194.843 10.2332 li
194.651 11.6062 194.287 12.9886 193.825 14.2657 cv
193.361 15.5434 192.803 16.7107 192.18 17.666 cv
191.759 18.3032 191.321 18.8503 190.769 19.2888 cv
190.452 19.5362 190.088 19.7577 189.622 19.8795 cv
189.621 19.8797 li
189.437 19.9268 189.241 19.9536 189.042 19.9536 cv
189.041 19.9536 189.04 19.9536 189.04 19.9536 cv
189.037 19.9536 189.034 19.9536 189.031 19.9536 cv
188.676 19.9536 188.318 19.8622 188.02 19.7112 cv
187.717 19.5593 187.472 19.3566 187.276 19.1426 cv
186.884 18.7101 186.652 18.2346 186.468 17.724 cv
186.112 16.7041 185.961 15.4927 185.957 14.1208 cv
185.958 13.0077 186.066 11.7975 186.298 10.5537 cv
186.282 10.6407 li
186.298 10.554 li
186.496 9.49603 186.587 8.44907 186.587 7.51091 cv
186.588 6.71355 186.52 5.99353 186.409 5.42685 cv
186.326 4.98981 186.205 4.64366 186.111 4.44484 cv
185.434 4.52833 184.769 4.5691 184.189 4.56962 cv
183.943 4.56953 183.712 4.56219 183.493 4.54471 cv
183.279 4.5267 183.083 4.50422 182.857 4.44988 cv
182.857 2.35509 li
183.445 2.05337 li
183.564 1.53441 li
183.593 1.53934 li
183.68 1.55331 183.9 1.56958 184.168 1.56958 cv
184.175 1.56958 184.182 1.56957 184.189 1.56954 cv
184.193 1.56955 184.196 1.56955 184.199 1.56955 cv
184.717 1.56955 185.419 1.52053 186.068 1.42346 cv
186.029 1.42928 li
186.068 1.42346 li
186.181 1.40679 186.296 1.39801 186.412 1.39801 cv
186.415 1.39799 186.418 1.39798 186.421 1.39798 cv
186.789 1.39798 187.157 1.49483 187.462 1.65253 cv
187.773 1.81125 188.021 2.02141 188.222 2.24341 cv
188.622 2.69169 188.861 3.18685 189.052 3.72243 cv
189.423 4.79206 189.583 6.07222 189.587 7.51091 cv
189.587 8.63618 189.48 9.85041 189.251 11.0876 cv
189.247 11.1046 li
189.049 12.1669 188.957 13.2041 188.958 14.1208 cv
188.957 14.9287 189.03 15.645 189.147 16.1821 cv
189.177 16.3342 189.214 16.4717 189.252 16.5913 cv
189.267 16.5737 189.282 16.5556 189.297 16.5369 cv
189.61 16.1562 189.981 15.561 190.327 14.8506 cv
191.026 13.4283 191.635 11.5378 191.872 9.81759 cv
191.872 9.81723 li
192.058 8.49523 192.406 7.22601 192.857 6.09131 cv
193.311 4.95589 193.858 3.9576 194.507 3.15782 cv
194.944 2.62699 195.422 2.16983 196.051 1.85194 cv
196.41 1.67377 196.833 1.54552 197.301 1.54525 cv
197.474 1.54517 197.652 1.56336 197.827 1.60118 cv
197.872 1.61104 li
197.827 1.60118 li
198.545 1.75802 199.081 2.19178 199.453 2.6502 cv
199.831 3.11677 200.09 3.63953 200.298 4.20782 cv
200.705 5.34306 200.899 6.68442 200.902 8.12303 cv
200.902 9.10555 200.807 10.1293 200.597 11.1435 cv
200.581 11.2243 li
200.598 11.1427 li
200.419 12.0081 200.334 12.9169 200.335 13.7707 cv
200.334 14.4654 200.391 15.1243 200.49 15.6882 cv
200.579 16.2041 200.708 16.6416 200.836 16.9376 cv
201.06 16.6524 201.335 16.2063 201.595 15.6567 cv
202.222 14.3478 202.792 12.4582 203.041 10.5208 cv
203.041 10.5201 li
203.151 9.68451 203.29 8.96395 203.462 8.3426 cv
203.639 7.71982 203.835 7.19948 204.14 6.72189 cv
204.348 6.40803 204.607 6.08638 205.06 5.83804 cv
205.314 5.70071 205.639 5.6042 205.975 5.6042 cv
205.978 5.6042 205.98 5.6042 205.983 5.60422 cv
205.985 5.60421 205.987 5.60421 205.989 5.60421 cv
206.271 5.60421 206.547 5.67148 206.776 5.77414 cv
207.009 5.87747 207.197 6.01137 207.353 6.15064 cv
207.663 6.43223 207.862 6.73336 208.038 7.05617 cv
208.379 7.70154 208.62 8.46969 208.836 9.45014 cv
208.846 9.49684 li
208.836 9.44952 li
209.194 11.1012 209.556 12.7833 209.857 14.1903 cv
209.857 17.8405 li
207.658 18.151 li
207.629 18.1569 li
207.598 18.0055 li
207.571 17.8739 207.532 17.6863 207.483 17.4534 cv
207.385 16.9872 207.248 16.3385 207.085 15.573 cv
206.793 14.2072 206.42 12.4684 206.041 10.7206 cv
206.033 10.7822 206.024 10.845 206.016 10.9086 cv
206.016 10.9079 li
205.823 12.3868 205.483 13.8125 205.052 15.0851 cv
204.619 16.3592 204.104 17.4749 203.503 18.3672 cv
203.095 18.9605 202.665 19.4705 202.045 19.8556 cv
201.691 20.0702 201.243 20.2451 200.721 20.246 cv
200.72 20.246 200.719 20.246 200.719 20.246 cv
188.947 17.2405 mo
188.947 17.2405 li
188.947 17.2405 mo
188.947 17.2405 li
184.329 2.1927 mo
184.33 2.19609 li
184.329 2.19268 li
183.966 1.74825 mo
183.914 1.81298 li
183.914 1.81298 li
183.966 1.74825 li
189.247 11.1042 mo
189.249 11.0987 189.25 11.0932 189.251 11.0876 cv
189.264 11.0178 li
189.247 11.1042 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
193.41 10.2783 mo
193.619 7.80322 li
186.898 7.80322 li
186.271 10.2783 li
186.545 10.2783 li
186.997 8.50684 187.228 8.14404 188.889 8.14404 cv
189.086 8.14404 189.373 8.14404 189.472 8.16602 cv
189.703 8.20996 189.681 8.33105 189.637 8.58398 cv
188.668 14.3809 li
188.614 14.7549 188.581 14.9092 187.425 14.9092 cv
186.986 14.9092 li
186.931 15.25 li
187.393 15.2173 188.515 15.2173 189.021 15.2173 cv
189.527 15.2173 190.66 15.2173 191.1 15.25 cv
191.155 14.9092 li
190.714 14.9092 li
189.56 14.9092 189.592 14.7549 189.648 14.3809 cv
190.616 8.58398 li
190.649 8.36426 190.682 8.20996 190.879 8.16602 cv
191.012 8.14404 191.309 8.14404 191.518 8.14404 cv
193.179 8.14404 193.278 8.50684 193.134 10.2783 cv
193.41 10.2783 li
cp
0 0 0 1 cmyk
f
196.193 17.8901 mo
196.193 17.8569 196.204 17.835 196.049 17.6479 cv
194.906 16.2622 194.895 14.1831 195.181 12.5 cv
195.5 10.5859 196.237 8.67188 197.821 7.29688 cv
197.986 7.16504 197.986 7.14307 197.986 7.11035 cv
197.898 7 li
197.788 7 196.676 7.74805 195.796 9.14502 cv
195.027 10.355 194.697 11.5762 194.542 12.5 cv
194.4 13.3579 194.3 14.689 194.697 15.9321 cv
195.125 17.2852 195.951 18 196.061 18 cv
196.193 17.8901 li
cp
f
203.156 15.25 mo
203.21 14.9092 li
202.639 14.9092 202.364 14.9092 202.408 14.5791 cv
202.759 12.478 li
202.914 11.5322 202.98 11.1909 202.705 10.7949 cv
202.573 10.6079 202.253 10.3882 201.616 10.3882 cv
200.813 10.3882 200.219 10.8613 199.79 11.543 cv
199.988 10.3882 li
198.415 10.5093 li
198.36 10.8501 li
199.129 10.8501 199.207 10.9272 199.108 11.4658 cv
198.624 14.4141 li
198.536 14.9092 198.415 14.9092 197.678 14.9092 cv
197.623 15.25 li
198.876 15.2173 li
200.098 15.25 li
200.153 14.9092 li
199.416 14.9092 199.294 14.9092 199.382 14.4141 cv
199.712 12.3901 li
199.911 11.2461 200.791 10.6299 201.495 10.6299 cv
202.188 10.6299 202.209 11.2241 202.111 11.8511 cv
201.682 14.4141 li
201.594 14.9092 201.473 14.9092 200.736 14.9092 cv
200.681 15.25 li
201.935 15.2173 li
203.156 15.25 li
cp
f
207.028 12.5 mo
207.17 11.6421 207.27 10.311 206.874 9.06836 cv
206.434 7.71484 205.609 7 205.499 7 cv
205.367 7.11035 li
205.367 7.14307 205.367 7.16504 205.542 7.36328 cv
206.434 8.45215 206.775 10.2012 206.39 12.5 cv
206.071 14.3809 205.344 16.3169 203.75 17.7031 cv
203.584 17.835 203.574 17.8569 203.574 17.8901 cv
203.662 18 li
203.772 18 204.894 17.252 205.774 15.855 cv
206.533 14.645 206.874 13.4238 207.028 12.5 cv
cp
f
196 21.25 mo
196 29.4751 li
196 29.7512 196.223 29.9751 196.5 29.9751 cv
196.776 29.9751 197 29.7512 197 29.4751 cv
197 21.25 li
197 20.9739 196.776 20.75 196.5 20.75 cv
196.223 20.75 196 20.9739 196 21.25 cv
.746 .676 .668 .898 cmyk
f
196.357 35.4751 mo
198.607 29.4751 li
194.107 29.4751 li
196.357 35.4751 li
cp
f
196.357 35.4751 mo
196.825 35.6507 li
199.328 28.9751 li
193.385 28.9751 li
196.357 36.8991 li
196.825 35.6507 li
196.357 35.4751 li
196.825 35.2995 li
194.828 29.9751 li
197.885 29.9751 li
195.889 35.2995 li
196.357 35.4751 li
196.825 35.2995 li
196.357 35.4751 li
cp
f
22.8437 256.012 mo
48.8438 256.012 li
48.8438 277.012 li
22.8437 277.012 li
22.8437 256.012 li
0 0 0 0 cmyk
f
gsave
22.8437 277.012 mo
48.8438 277.012 li
48.8438 256.012 li
22.8437 256.012 li
22.8437 277.012 li
clp
gsave
21.4009 277.659 mo
49.9336 277.659 li
49.9336 255.982 li
21.4009 255.982 li
21.4009 277.659 li
clp
48.8438 277.012 mo
47.1615 277.012 li
47.0944 276.919 47.0616 276.852 47.0309 276.795 cv
46.9536 276.637 46.9271 276.549 46.8961 276.454 cv
46.8403 276.274 46.7991 276.1 46.7521 275.885 cv
46.6604 275.46 46.5584 274.896 46.4456 274.205 cv
46.2208 272.827 45.9575 270.958 45.7101 268.919 cv
45.6903 268.755 45.6695 268.597 45.6477 268.445 cv
45.0264 270.439 44.0932 272.353 43.0961 273.751 cv
42.677 274.329 42.2519 274.823 41.739 275.223 cv
41.4435 275.448 41.1143 275.652 40.6817 275.776 cv
40.6768 275.778 li
40.4952 275.828 40.298 275.858 40.0963 275.858 cv
40.0961 275.858 40.0957 275.858 40.0954 275.858 cv
40.0916 275.858 40.0878 275.858 40.084 275.858 cv
39.7213 275.858 39.3551 275.752 39.0651 275.588 cv
38.7689 275.423 38.5443 275.212 38.3679 274.997 cv
38.0183 274.565 37.8264 274.112 37.6701 273.624 cv
37.3703 272.651 37.2466 271.496 37.2433 270.175 cv
37.2436 268.945 37.3617 267.585 37.6141 266.183 cv
37.8033 265.134 37.8904 264.11 37.8902 263.194 cv
37.8908 262.335 37.812 261.571 37.6851 260.992 cv
37.6345 260.746 37.5694 260.534 37.5067 260.368 cv
37.4607 260.416 37.4122 260.469 37.3622 260.527 cv
37.0437 260.895 36.6697 261.465 36.3233 262.143 cv
35.6243 263.502 35.0269 265.302 34.8139 266.918 cv
34.6379 268.231 34.2922 269.511 33.8429 270.665 cv
33.3908 271.82 32.844 272.845 32.2008 273.669 cv
31.7662 274.216 31.2974 274.688 30.6679 275.025 cv
30.3088 275.213 29.8779 275.354 29.392 275.355 cv
29.2792 275.352 li
29.2879 275.353 li
29.2765 275.352 li
28.9089 275.336 28.5514 275.232 28.2483 275.075 cv
27.9436 274.918 27.6903 274.715 27.4781 274.495 cv
27.0554 274.051 26.7777 273.543 26.5563 272.993 cv
26.1239 271.894 25.923 270.585 25.9192 269.162 cv
25.9194 268.309 25.9965 267.42 26.1638 266.527 cv
26.2868 265.872 26.3451 265.201 26.3449 264.559 cv
26.3452 263.85 26.2735 263.176 26.1508 262.605 cv
26.0301 262.035 25.8519 261.568 25.6887 261.289 cv
25.6074 261.146 25.5312 261.057 25.4903 261.016 cv
24.8928 260.94 24.3286 260.79 23.813 260.587 cv
23.4675 260.448 23.1441 260.289 22.8437 260.097 cv
22.8437 256.234 li
24.7157 256.684 li
24.4971 257.593 li
24.5053 257.597 24.5137 257.602 24.5223 257.607 cv
24.8349 257.795 25.3832 257.99 25.9214 258.047 cv
26.6717 258.13 27.2822 258.534 27.7006 258.987 cv
28.1271 259.447 28.4211 259.976 28.6563 260.553 cv
29.118 261.707 29.3414 263.082 29.3449 264.559 cv
29.3448 265.38 29.2717 266.23 29.1125 267.08 cv
28.9809 267.78 28.9191 268.492 28.9192 269.162 cv
28.9189 269.827 28.9806 270.452 29.0858 270.978 cv
29.189 271.503 29.3422 271.929 29.4791 272.177 cv
29.4836 272.186 29.4881 272.194 29.4925 272.202 cv
29.5045 272.191 29.5167 272.179 29.5292 272.167 cv
29.7778 271.931 30.1138 271.485 30.4276 270.913 cv
31.0644 269.766 31.6302 268.12 31.8404 266.52 cv
32.2076 263.864 33.2477 261.178 34.5143 259.319 cv
34.9452 258.698 35.3997 258.163 35.9606 257.738 cv
36.283 257.498 36.6483 257.288 37.0988 257.17 cv
37.0995 257.17 li
37.2897 257.12 37.4923 257.093 37.698 257.093 cv
37.6983 257.093 37.6986 257.093 37.6989 257.093 cv
37.7019 257.092 37.7048 257.092 37.7077 257.092 cv
38.0713 257.092 38.4368 257.186 38.7418 257.341 cv
39.0514 257.496 39.3019 257.703 39.505 257.924 cv
39.9093 258.369 40.1527 258.863 40.3471 259.398 cv
40.7236 260.467 40.8863 261.747 40.8902 263.194 cv
40.89 264.297 40.787 265.49 40.5666 266.715 cv
40.3451 267.942 40.2429 269.139 40.2433 270.175 cv
40.2428 270.97 40.3044 271.672 40.4047 272.199 cv
40.4113 272.237 40.4182 272.273 40.4254 272.309 cv
40.7068 271.959 41.028 271.479 41.3391 270.924 cv
42.0714 269.625 42.76 267.91 43.106 266.363 cv
43.2383 265.779 43.3871 265.282 43.576 264.841 cv
43.7726 264.402 43.9823 264.003 44.418 263.622 cv
44.7002 263.377 45.1559 263.143 45.6754 263.143 cv
45.6788 263.143 45.6823 263.143 45.6858 263.143 cv
45.6885 263.143 45.6911 263.143 45.6939 263.143 cv
46.0715 263.143 46.4245 263.267 46.6824 263.426 cv
46.9465 263.586 47.1341 263.773 47.2873 263.958 cv
47.5887 264.332 47.7744 264.719 47.9457 265.159 cv
48.2773 266.036 48.515 267.148 48.6883 268.558 cv
48.7395 268.98 48.7916 269.396 48.8438 269.801 cv
48.8438 275.425 li
48.4628 276.049 li
48.8438 275.425 li
48.8438 275.843 li
48.5117 276.054 li
48.8438 276.087 li
48.8438 277.012 li
48.3638 276.111 mo
48.3638 276.111 li
48.3638 276.111 mo
48.3638 276.111 li
48.405 276.043 mo
48.405 276.043 li
48.405 274.659 li
48.405 276.043 li
48.2593 276.029 mo
48.2593 276.029 li
47.236 275.227 li
48.2593 276.029 li
46.9488 275.898 mo
48.0508 276.008 li
47.0013 275.664 li
48.0507 276.008 li
46.9488 275.898 li
46.9488 275.898 mo
46.9488 275.898 li
46.9488 275.898 li
47.0013 275.664 mo
47.0013 275.664 li
47.0013 275.664 li
47.236 275.227 mo
47.236 275.227 li
47.236 275.227 li
39.9578 273.187 mo
39.9578 273.187 li
39.9578 273.187 mo
39.9578 273.187 li
25.6208 260.713 mo
25.6208 260.713 li
.411765 .141176 0 0 cmyk
f
48.0507 276.008 mo
48.0507 276.008 li
48.0507 276.008 mo
48.0507 276.008 li
48.7372 275.911 mo
48.7372 275.911 li
48.8438 275.843 li
48.8438 275.874 li
48.7372 275.911 li
40.6785 275.777 mo
40.6796 275.777 40.6807 275.776 40.6817 275.776 cv
40.6938 275.773 li
40.6785 275.777 li
29.2879 275.353 mo
29.2879 275.353 li
f
grestore
grestore
33.3472 266.04 mo
33.5562 263.565 li
26.8354 263.565 li
26.208 266.04 li
26.4834 266.04 li
26.9341 264.269 27.165 263.906 28.8262 263.906 cv
29.0244 263.906 29.3101 263.906 29.4092 263.928 cv
29.6401 263.972 29.6182 264.093 29.5742 264.346 cv
28.6064 270.143 li
28.5513 270.517 28.5181 270.671 27.3633 270.671 cv
26.9233 270.671 li
26.8682 271.012 li
27.3301 270.979 28.4521 270.979 28.958 270.979 cv
29.4644 270.979 30.5972 270.979 31.0371 271.012 cv
31.0923 270.671 li
30.6523 270.671 li
29.4971 270.671 29.5303 270.517 29.5854 270.143 cv
30.5532 264.346 li
30.5864 264.126 30.6191 263.972 30.8174 263.928 cv
30.9492 263.906 31.2461 263.906 31.4551 263.906 cv
33.1162 263.906 33.2153 264.269 33.0723 266.04 cv
33.3472 266.04 li
cp
0 0 0 1 cmyk
f
36.5044 273.685 mo
36.5044 273.652 36.5044 273.63 36.3174 273.443 cv
35.2173 272.332 34.6011 270.517 34.6011 268.273 cv
34.6011 266.139 35.1182 264.302 36.394 263.004 cv
36.5044 262.905 36.5044 262.883 36.5044 262.85 cv
36.4053 262.762 li
36.2622 262.762 35.3604 263.554 34.8213 264.632 cv
34.2603 265.743 34.0073 266.92 34.0073 268.273 cv
34.0073 269.252 34.1611 270.561 34.7334 271.738 cv
35.3823 273.058 36.2842 273.773 36.4053 273.773 cv
36.5044 273.685 li
cp
f
41.6304 271.012 mo
41.6304 270.693 li
41.2891 270.693 li
40.3213 270.693 40.2881 270.561 40.2881 270.165 cv
40.2881 263.961 li
40.2881 263.708 40.2881 263.697 40.0684 263.697 cv
39.8042 263.994 39.2544 264.401 38.1211 264.401 cv
38.1211 264.72 li
38.374 264.72 38.9243 264.72 39.5293 264.434 cv
39.5293 270.165 li
39.5293 270.561 39.4961 270.693 38.5283 270.693 cv
38.187 270.693 li
38.187 271.012 li
38.4844 270.99 39.5513 270.99 39.9141 270.99 cv
40.2773 270.99 41.333 270.99 41.6304 271.012 cv
cp
f
45.6123 268.273 mo
45.6123 267.437 45.5024 266.073 44.8862 264.797 cv
44.2373 263.477 43.3354 262.762 43.2144 262.762 cv
43.1152 262.85 li
43.1152 262.883 43.1152 262.905 43.3022 263.092 cv
44.4023 264.203 45.0181 266.018 45.0181 268.262 cv
45.0181 270.396 44.5015 272.233 43.2251 273.531 cv
43.1152 273.63 43.1152 273.652 43.1152 273.685 cv
43.2144 273.773 li
43.3574 273.773 44.2593 272.981 44.7983 271.903 cv
45.3594 270.781 45.6123 269.593 45.6123 268.273 cv
cp
f
gsave
0 358 mo
266.999 358 li
266.999 0 li
0 0 li
0 358 li
clp
111.075 150.923 mo
111.229 150.923 111.356 150.975 111.456 151.079 cv
111.557 151.183 111.607 151.314 111.607 151.471 cv
111.607 151.618 111.554 151.745 111.449 151.852 cv
111.343 151.96 111.219 152.013 111.075 152.013 cv
110.929 152.013 110.799 151.956 110.686 151.841 cv
110.573 151.727 110.516 151.594 110.516 151.444 cv
110.516 151.304 110.572 151.183 110.683 151.079 cv
110.794 150.975 110.925 150.923 111.075 150.923 cv
108.056 153.942 mo
108.211 153.942 108.34 153.993 108.443 154.097 cv
108.547 154.201 108.599 154.33 108.599 154.484 cv
108.599 154.631 108.546 154.759 108.441 154.868 cv
108.335 154.977 108.209 155.032 108.062 155.032 cv
107.915 155.032 107.786 154.977 107.675 154.868 cv
107.564 154.759 107.509 154.633 107.509 154.489 cv
107.509 154.343 107.563 154.215 107.673 154.106 cv
107.782 153.996 107.91 153.942 108.056 153.942 cv
104.984 156.987 mo
105.142 156.987 105.274 157.041 105.382 157.148 cv
105.489 157.256 105.543 157.388 105.543 157.546 cv
105.543 157.693 105.489 157.818 105.382 157.922 cv
105.274 158.026 105.145 158.077 104.995 158.077 cv
104.848 158.077 104.721 158.022 104.614 157.911 cv
104.506 157.8 104.452 157.667 104.452 157.513 cv
104.452 157.374 104.506 157.251 104.611 157.146 cv
104.717 157.04 104.841 156.987 104.984 156.987 cv
f
108.411 132.621 mo
108.342 141.436 li
108.34 141.712 108.562 141.938 108.838 141.94 cv
109.115 141.942 109.34 141.72 109.342 141.444 cv
109.411 132.629 li
109.413 132.353 109.191 132.127 108.915 132.125 cv
108.638 132.123 108.413 132.345 108.411 132.621 cv
.746 .676 .668 .898 cmyk
f
108.796 147.44 mo
111.092 141.458 li
106.592 141.423 li
108.796 147.44 li
cp
f
108.796 147.44 mo
109.263 147.62 li
111.817 140.964 li
105.874 140.918 li
108.785 148.864 li
109.263 147.62 li
108.796 147.44 li
109.265 147.268 li
107.309 141.929 li
110.367 141.953 li
108.329 147.261 li
108.796 147.44 li
109.265 147.268 li
108.796 147.44 li
cp
f
grestore
74.2705 268.404 mo
74.293 268.294 74.1826 268.294 74.1499 268.294 cv
74.0508 268.294 74.0176 268.338 73.9849 268.404 cv
73.4897 269.427 72.7529 269.559 72.3457 269.559 cv
71.7627 269.559 70.8828 269.086 71.1689 267.315 cv
71.4766 265.522 72.4556 265.06 73.0386 265.06 cv
73.1377 265.06 73.8198 265.071 74.1387 265.467 cv
73.688 265.5 73.5669 265.83 73.5449 265.973 cv
73.4897 266.259 73.6548 266.479 73.9629 266.479 cv
74.2485 266.479 74.502 266.292 74.5566 265.962 cv
74.6777 265.214 73.9189 264.785 73.0718 264.785 cv
71.6968 264.785 70.4868 265.973 70.2559 267.337 cv
70.0249 268.745 70.9268 269.834 72.2026 269.834 cv
73.6768 269.834 74.2485 268.514 74.2705 268.404 cv
cp
f
61.2905 268.261 mo
61.2905 268.041 61.0815 268.041 60.9277 268.041 cv
57.8589 268.041 li
57.8589 264.961 li
57.8589 264.807 57.8589 264.598 57.6387 264.598 cv
57.4189 264.598 57.4189 264.807 57.4189 264.961 cv
57.4189 268.041 li
54.3389 268.041 li
54.1846 268.041 53.9756 268.041 53.9756 268.261 cv
53.9756 268.481 54.1846 268.481 54.3389 268.481 cv
57.4189 268.481 li
57.4189 271.561 li
57.4189 271.715 57.4189 271.924 57.6387 271.924 cv
57.8589 271.924 57.8589 271.715 57.8589 271.561 cv
57.8589 268.481 li
60.9277 268.481 li
61.0815 268.481 61.2905 268.481 61.2905 268.261 cv
cp
f
244.583 51.0659 mo
244.606 50.9561 244.496 50.9561 244.462 50.9561 cv
244.364 50.9561 244.331 51 244.297 51.0659 cv
243.803 52.0889 243.066 52.2207 242.659 52.2207 cv
242.076 52.2207 241.196 51.748 241.482 49.9771 cv
241.79 48.1841 242.769 47.7222 243.352 47.7222 cv
243.451 47.7222 244.132 47.7329 244.452 48.1289 cv
244 48.1621 243.879 48.4922 243.858 48.6348 cv
243.803 48.9209 243.967 49.1411 244.276 49.1411 cv
244.562 49.1411 244.815 48.9541 244.87 48.624 cv
244.991 47.876 244.232 47.4473 243.384 47.4473 cv
242.009 47.4473 240.799 48.6348 240.569 49.999 cv
240.337 51.4072 241.24 52.4961 242.516 52.4961 cv
243.99 52.4961 244.562 51.1758 244.583 51.0659 cv
cp
f
241.944 87.6519 mo
241.702 87.6519 li
241.668 87.8389 241.581 88.4438 241.471 88.6201 cv
241.394 88.7188 240.767 88.7188 240.437 88.7188 cv
238.402 88.7188 li
238.699 88.4658 239.37 87.7617 239.656 87.498 cv
241.328 85.958 241.944 85.3857 241.944 84.2969 cv
241.944 83.0322 240.943 82.1851 239.667 82.1851 cv
238.391 82.1851 237.643 83.2739 237.643 84.2197 cv
237.643 84.7813 238.126 84.7813 238.16 84.7813 cv
238.391 84.7813 238.676 84.6162 238.676 84.2642 cv
238.676 83.9561 238.467 83.7471 238.16 83.7471 cv
238.061 83.7471 238.039 83.7471 238.005 83.7578 cv
238.214 83.0098 238.809 82.5039 239.524 82.5039 cv
240.458 82.5039 241.031 83.2852 241.031 84.2969 cv
241.031 85.2319 240.492 86.0459 239.865 86.75 cv
237.643 89.2358 li
237.643 89.5 li
241.658 89.5 li
241.944 87.6519 li
cp
f
247.279 88.1909 mo
247.3 88.0811 247.191 88.0811 247.158 88.0811 cv
247.059 88.0811 247.026 88.125 246.993 88.1909 cv
246.498 89.2139 245.76 89.3457 245.354 89.3457 cv
244.771 89.3457 243.891 88.873 244.176 87.1021 cv
244.485 85.3091 245.463 84.8472 246.046 84.8472 cv
246.146 84.8472 246.828 84.8579 247.147 85.2539 cv
246.696 85.2871 246.575 85.6172 246.553 85.7598 cv
246.498 86.0459 246.663 86.2661 246.971 86.2661 cv
247.256 86.2661 247.509 86.0791 247.565 85.749 cv
247.686 85.001 246.926 84.5723 246.08 84.5723 cv
244.705 84.5723 243.495 85.7598 243.264 87.124 cv
243.033 88.5322 243.935 89.6211 245.21 89.6211 cv
246.685 89.6211 247.256 88.3008 247.279 88.1909 cv
cp
f
242.032 124.744 mo
242.032 123.732 241.217 122.94 240.162 122.753 cv
241.119 122.478 241.735 121.675 241.735 120.817 cv
241.735 119.948 240.833 119.31 239.766 119.31 cv
238.666 119.31 237.852 119.981 237.852 120.784 cv
237.852 121.224 238.193 121.312 238.358 121.312 cv
238.588 121.312 238.853 121.147 238.853 120.817 cv
238.853 120.465 238.588 120.311 238.347 120.311 cv
238.226 120.322 li
238.644 119.574 239.678 119.574 239.733 119.574 cv
240.096 119.574 240.811 119.739 240.811 120.817 cv
240.811 121.026 240.778 121.642 240.458 122.115 cv
240.128 122.599 239.754 122.632 239.458 122.643 cv
239.127 122.676 li
238.941 122.687 238.897 122.698 238.897 122.797 cv
238.897 122.907 238.952 122.907 239.15 122.907 cv
239.656 122.907 li
240.59 122.907 241.008 123.677 241.008 124.733 cv
241.008 126.174 240.26 126.559 239.722 126.559 cv
239.194 126.559 238.292 126.306 237.973 125.58 cv
238.325 125.635 238.644 125.437 238.644 125.041 cv
238.644 124.722 238.413 124.502 238.105 124.502 cv
237.84 124.502 237.555 124.656 237.555 125.074 cv
237.555 126.053 238.534 126.856 239.754 126.856 cv
241.064 126.856 242.032 125.855 242.032 124.744 cv
cp
f
247.279 125.316 mo
247.3 125.206 247.191 125.206 247.158 125.206 cv
247.059 125.206 247.026 125.25 246.993 125.316 cv
246.498 126.339 245.76 126.471 245.354 126.471 cv
244.771 126.471 243.891 125.998 244.176 124.227 cv
244.485 122.434 245.463 121.972 246.046 121.972 cv
246.146 121.972 246.828 121.983 247.147 122.379 cv
246.696 122.412 246.575 122.742 246.553 122.885 cv
246.498 123.171 246.663 123.391 246.971 123.391 cv
247.256 123.391 247.509 123.204 247.565 122.874 cv
247.686 122.126 246.926 121.697 246.08 121.697 cv
244.705 121.697 243.495 122.885 243.264 124.249 cv
243.033 125.657 243.935 126.746 245.21 126.746 cv
246.685 126.746 247.256 125.426 247.279 125.316 cv
cp
f
223.574 272.298 mo
223.574 272.265 223.574 272.243 223.387 272.056 cv
222.012 270.67 221.66 268.591 221.66 266.908 cv
221.66 264.994 222.078 263.08 223.431 261.705 cv
223.574 261.573 223.574 261.551 223.574 261.518 cv
223.463 261.408 li
223.354 261.408 222.364 262.156 221.714 263.553 cv
221.154 264.763 221.022 265.984 221.022 266.908 cv
221.022 267.766 221.143 269.097 221.748 270.34 cv
222.408 271.693 223.354 272.408 223.463 272.408 cv
223.574 272.298 li
cp
f
230.097 269.658 mo
230.152 269.317 li
229.58 269.317 229.305 269.317 229.349 268.987 cv
229.701 266.886 li
229.855 265.94 229.92 265.599 229.646 265.203 cv
229.514 265.016 229.195 264.796 228.557 264.796 cv
227.753 264.796 227.16 265.269 226.731 265.951 cv
226.929 264.796 li
225.356 264.917 li
225.3 265.258 li
226.071 265.258 226.148 265.335 226.048 265.874 cv
225.565 268.822 li
225.477 269.317 225.356 269.317 224.619 269.317 cv
224.564 269.658 li
225.818 269.625 li
227.039 269.658 li
227.094 269.317 li
226.357 269.317 226.236 269.317 226.324 268.822 cv
226.654 266.798 li
226.852 265.654 227.732 265.038 228.436 265.038 cv
229.128 265.038 229.151 265.632 229.051 266.259 cv
228.623 268.822 li
228.535 269.317 228.414 269.317 227.676 269.317 cv
227.622 269.658 li
228.875 269.625 li
230.097 269.658 li
cp
f
242.383 266.908 mo
242.417 266.688 242.208 266.688 242.054 266.688 cv
235.464 266.688 li
235.311 266.688 235.102 266.688 235.069 266.908 cv
235.025 267.128 235.234 267.128 235.399 267.128 cv
241.965 267.128 li
242.13 267.128 242.339 267.128 242.383 266.908 cv
cp
f
250.821 269.658 mo
250.821 269.317 li
250.469 269.317 li
249.479 269.317 249.446 269.196 249.446 268.789 cv
249.446 262.618 li
249.446 262.354 249.446 262.332 249.193 262.332 cv
248.51 263.036 247.542 263.036 247.191 263.036 cv
247.191 263.377 li
247.411 263.377 248.06 263.377 248.631 263.091 cv
248.631 268.789 li
248.631 269.185 248.599 269.317 247.609 269.317 cv
247.256 269.317 li
247.256 269.658 li
247.642 269.625 248.599 269.625 249.039 269.625 cv
249.479 269.625 250.436 269.625 250.821 269.658 cv
cp
f
254.891 266.908 mo
254.891 266.05 254.77 264.719 254.165 263.476 cv
253.504 262.123 252.559 261.408 252.449 261.408 cv
252.338 261.518 li
252.338 261.551 252.338 261.573 252.547 261.771 cv
253.625 262.86 254.252 264.609 254.252 266.908 cv
254.252 268.789 253.846 270.725 252.482 272.111 cv
252.338 272.243 252.338 272.265 252.338 272.298 cv
252.449 272.408 li
252.559 272.408 253.548 271.66 254.198 270.263 cv
254.758 269.053 254.891 267.832 254.891 266.908 cv
cp
f
264.439 268.349 mo
264.46 268.239 264.351 268.239 264.318 268.239 cv
264.219 268.239 264.186 268.283 264.153 268.349 cv
263.658 269.372 262.92 269.504 262.514 269.504 cv
261.931 269.504 261.05 269.031 261.336 267.26 cv
261.645 265.467 262.624 265.005 263.207 265.005 cv
263.306 265.005 263.988 265.016 264.307 265.412 cv
263.856 265.445 263.735 265.775 263.712 265.918 cv
263.658 266.204 263.823 266.424 264.13 266.424 cv
264.417 266.424 264.669 266.237 264.725 265.907 cv
264.846 265.159 264.086 264.73 263.24 264.73 cv
261.865 264.73 260.655 265.918 260.423 267.282 cv
260.193 268.69 261.094 269.779 262.371 269.779 cv
263.844 269.779 264.417 268.459 264.439 268.349 cv
cp
f
242.637 311.007 mo
242.692 310.666 li
242.12 310.666 241.844 310.666 241.889 310.336 cv
242.241 308.235 li
242.395 307.289 242.46 306.948 242.186 306.552 cv
242.054 306.365 241.735 306.145 241.097 306.145 cv
240.293 306.145 239.7 306.618 239.271 307.3 cv
239.469 306.145 li
237.896 306.266 li
237.84 306.607 li
238.611 306.607 238.688 306.684 238.588 307.223 cv
238.105 310.171 li
238.017 310.666 237.896 310.666 237.159 310.666 cv
237.104 311.007 li
238.358 310.974 li
239.579 311.007 li
239.633 310.666 li
238.897 310.666 238.776 310.666 238.864 310.171 cv
239.194 308.147 li
239.392 307.003 240.272 306.387 240.976 306.387 cv
241.668 306.387 241.691 306.981 241.591 307.608 cv
241.163 310.171 li
241.075 310.666 240.954 310.666 240.216 310.666 cv
240.162 311.007 li
241.416 310.974 li
242.637 311.007 li
cp
f
247.653 309.698 mo
247.674 309.588 247.565 309.588 247.532 309.588 cv
247.433 309.588 247.4 309.632 247.367 309.698 cv
246.872 310.721 246.134 310.853 245.728 310.853 cv
245.145 310.853 244.265 310.38 244.55 308.609 cv
244.859 306.816 245.837 306.354 246.42 306.354 cv
246.52 306.354 247.202 306.365 247.521 306.761 cv
247.07 306.794 246.949 307.124 246.926 307.267 cv
246.872 307.553 247.037 307.773 247.344 307.773 cv
247.63 307.773 247.883 307.586 247.939 307.256 cv
248.06 306.508 247.3 306.079 246.454 306.079 cv
245.079 306.079 243.869 307.267 243.638 308.631 cv
243.407 310.039 244.309 311.128 245.584 311.128 cv
247.059 311.128 247.63 309.808 247.653 309.698 cv
cp
f
gsave
0 358 mo
266.999 358 li
266.999 0 li
0 0 li
0 358 li
clp
242.163 149.812 mo
242.317 149.812 242.447 149.866 242.553 149.973 cv
242.658 150.081 242.711 150.209 242.711 150.36 cv
242.711 150.51 242.658 150.639 242.553 150.744 cv
242.447 150.85 242.319 150.902 242.169 150.902 cv
242.018 150.902 241.89 150.849 241.782 150.741 cv
241.675 150.634 241.621 150.507 241.621 150.36 cv
241.621 150.209 241.675 150.081 241.782 149.973 cv
241.89 149.866 242.017 149.812 242.163 149.812 cv
242.158 152.895 mo
242.309 152.888 242.437 152.937 242.545 153.043 cv
242.652 153.148 242.706 153.278 242.706 153.432 cv
242.706 153.579 242.654 153.708 242.55 153.819 cv
242.446 153.93 242.324 153.985 242.184 153.985 cv
242.027 153.985 241.892 153.932 241.782 153.824 cv
241.671 153.717 241.615 153.588 241.615 153.437 cv
241.615 153.294 241.668 153.17 241.774 153.064 cv
241.88 152.959 242.008 152.902 242.158 152.895 cv
242.152 155.962 mo
242.303 155.962 242.43 156.015 242.534 156.121 cv
242.638 156.226 242.689 156.354 242.689 156.504 cv
242.689 156.651 242.638 156.778 242.534 156.886 cv
242.43 156.993 242.309 157.047 242.169 157.047 cv
242.015 157.047 241.882 156.992 241.771 156.88 cv
241.66 156.77 241.604 156.639 241.604 156.488 cv
241.604 156.353 241.66 156.23 241.771 156.123 cv
241.882 156.016 242.01 155.962 242.152 155.962 cv
f
46.0049 181.201 mo
92.0049 181.201 li
92.0049 202.201 li
46.0049 202.201 li
46.0049 181.201 li
0 0 0 0 cmyk
f
grestore
gsave
46.0049 202.201 mo
92.0049 202.201 li
92.0049 181.201 li
46.0049 181.201 li
46.0049 202.201 li
clp
gsave
45.3555 201.664 mo
92.2398 201.664 li
92.2398 182.061 li
45.3555 182.061 li
45.3555 201.664 li
clp
53.4298 201.664 mo
53.3121 201.664 li
52.948 201.655 52.588 201.544 52.3022 201.379 cv
51.9966 201.206 51.7656 200.985 51.582 200.761 cv
51.2184 200.307 51.0109 199.824 50.8408 199.299 cv
50.5135 198.251 50.3713 196.994 50.3679 195.587 cv
50.3681 194.422 50.474 193.163 50.7023 191.892 cv
50.8671 190.976 50.9447 190.035 50.9447 189.147 cv
50.9448 188.354 50.8826 187.604 50.773 186.959 cv
50.665 186.314 50.5044 185.773 50.344 185.421 cv
50.2691 185.253 50.1932 185.13 50.1419 185.061 cv
49.8985 185.067 49.5158 185.221 49.2012 185.531 cv
48.8677 185.849 48.6506 186.29 48.6254 186.663 cv
48.3456 190.105 li
46.0049 189.915 li
46.0049 184.966 li
46.2705 184.357 46.6573 183.82 47.1151 183.375 cv
47.9072 182.614 48.9508 182.077 50.1502 182.061 cv
50.2217 182.061 li
50.3975 182.063 50.5756 182.078 50.7542 182.106 cv
50.754 182.106 li
51.143 182.166 51.4974 182.324 51.7844 182.521 cv
52.0734 182.719 52.3031 182.954 52.4964 183.201 cv
52.8802 183.698 53.1354 184.254 53.3424 184.865 cv
53.7471 186.085 53.9418 187.555 53.9446 189.147 cv
53.9445 190.208 53.8534 191.318 53.655 192.423 cv
53.459 193.511 53.3677 194.605 53.3679 195.587 cv
53.3673 196.464 53.442 197.254 53.5635 197.85 cv
53.5801 197.94 53.5989 198.025 53.6188 198.105 cv
53.8497 197.775 54.1117 197.331 54.3661 196.815 cv
55.0863 195.369 55.7757 193.353 56.1332 191.4 cv
56.3998 189.953 56.8001 188.541 57.2711 187.274 cv
57.7447 186.005 58.2803 184.889 58.8696 184.001 cv
59.2717 183.409 59.6721 182.908 60.2562 182.51 cv
60.5903 182.29 61.0261 182.085 61.5864 182.081 cv
61.6757 182.081 61.7685 182.087 61.8633 182.1 cv
61.861 182.1 li
62.3033 182.158 62.6811 182.355 62.9582 182.576 cv
63.239 182.801 63.4413 183.05 63.6111 183.307 cv
63.9453 183.821 64.1626 184.384 64.3451 185.016 cv
64.7006 186.274 64.8833 187.817 64.8856 189.475 cv
64.8856 190.269 64.8415 191.087 64.7463 191.905 cv
64.6653 192.6 64.627 193.309 64.627 193.995 cv
64.6268 194.873 64.69 195.715 64.8002 196.444 cv
64.8868 197.024 65.0071 197.535 65.1335 197.918 cv
65.3427 197.622 65.5808 197.228 65.814 196.77 cv
66.5074 195.42 67.1889 193.506 67.573 191.59 cv
67.8702 190.118 68.3267 188.679 68.8682 187.387 cv
69.4124 186.093 70.0331 184.951 70.7145 184.047 cv
71.1762 183.445 71.6473 182.938 72.2795 182.562 cv
72.6411 182.352 73.0842 182.178 73.6184 182.176 cv
73.7891 182.182 li
73.7852 182.182 li
74.1423 182.207 74.4895 182.322 74.7742 182.488 cv
75.0611 182.654 75.2897 182.863 75.4755 183.081 cv
75.8449 183.52 76.0673 183.998 76.2441 184.512 cv
76.5867 185.538 76.7306 186.748 76.734 188.097 cv
76.7335 189.423 76.5828 190.871 76.2582 192.321 cv
75.9831 193.548 75.8567 194.742 75.8572 195.743 cv
75.8567 196.384 75.9096 196.946 75.9942 197.367 cv
76.0033 197.415 76.013 197.462 76.0232 197.506 cv
76.3348 197.16 76.7075 196.628 77.0621 195.994 cv
77.7881 194.707 78.4492 192.993 78.7474 191.447 cv
78.9957 190.175 79.4155 188.922 79.9309 187.782 cv
80.4486 186.641 81.0555 185.617 81.7313 184.792 cv
82.1868 184.242 82.6638 183.774 83.2625 183.425 cv
83.6054 183.23 84.0017 183.07 84.4716 183.026 cv
84.6871 183.017 li
84.6894 183.017 84.6917 183.017 84.694 183.017 cv
85.0347 183.017 85.3783 183.095 85.6752 183.231 cv
85.9758 183.367 86.2288 183.555 86.4363 183.759 cv
86.851 184.172 87.107 184.641 87.3062 185.139 cv
87.6934 186.136 87.8539 187.304 87.8582 188.605 cv
87.8579 189.673 87.7393 190.822 87.485 191.99 cv
87.2591 193.023 87.1529 194.087 87.1533 195.044 cv
87.1525 195.869 87.2332 196.617 87.3629 197.177 cv
87.4406 197.542 87.5562 197.825 87.6362 197.981 cv
87.8855 197.941 88.2657 197.789 88.5875 197.529 cv
88.9888 197.223 89.2745 196.789 89.3373 196.512 cv
92.0049 197.209 li
92.0049 197.932 li
91.6492 198.729 91.0839 199.379 90.436 199.892 cv
89.6087 200.529 88.6209 200.98 87.4928 200.992 cv
87.338 200.992 87.1809 200.982 87.0224 200.961 cv
87.0048 200.959 li
86.6533 200.912 86.3238 200.78 86.0552 200.607 cv
85.7847 200.434 85.5696 200.226 85.3923 200.008 cv
85.0401 199.571 84.8203 199.096 84.6451 198.585 cv
84.3046 197.564 84.1564 196.364 84.1533 195.044 cv
84.1537 193.869 84.2799 192.607 84.554 191.351 cv
84.7622 190.397 84.8584 189.448 84.8582 188.605 cv
84.8589 187.87 84.7835 187.214 84.665 186.727 cv
84.6187 186.522 84.5599 186.349 84.5045 186.215 cv
84.4751 186.241 84.4443 186.269 84.4126 186.299 cv
84.1149 186.582 83.7377 187.062 83.3787 187.655 cv
82.6531 188.843 81.9871 190.487 81.692 192.02 cv
81.1892 194.549 80.0719 197.089 78.8024 198.834 cv
78.3706 199.416 77.9248 199.916 77.3819 200.313 cv
77.0693 200.537 76.7175 200.735 76.2745 200.844 cv
76.3551 200.825 li
76.2741 200.844 li
76.1024 200.886 75.9195 200.909 75.7327 200.909 cv
75.7324 200.909 75.732 200.909 75.7317 200.909 cv
75.7289 200.909 75.7261 200.909 75.7233 200.909 cv
75.3978 200.909 75.065 200.831 74.7818 200.696 cv
74.4943 200.56 74.2579 200.374 74.0687 200.177 cv
73.6911 199.779 73.4754 199.344 73.3077 198.89 cv
72.9846 197.981 72.8614 196.935 72.8572 195.743 cv
72.8577 194.497 73.0094 193.104 73.3308 191.666 cv
73.6056 190.441 73.7345 189.192 73.734 188.097 cv
73.7343 187.459 73.6904 186.872 73.6135 186.382 cv
73.5592 186.028 73.4848 185.723 73.4085 185.492 cv
73.1202 185.805 72.7561 186.319 72.4043 186.953 cv
71.6345 188.327 70.8971 190.269 70.5139 192.183 cv
70.2227 193.626 69.7994 195.031 69.3081 196.291 cv
68.8144 197.552 68.2612 198.661 67.6592 199.541 cv
67.2489 200.127 66.8414 200.622 66.257 201.013 cv
65.9225 201.229 65.4908 201.429 64.9343 201.433 cv
64.8316 201.433 64.7258 201.426 64.6196 201.409 cv
64.1793 201.343 63.8086 201.141 63.536 200.917 cv
63.2602 200.691 63.061 200.441 62.8933 200.183 cv
62.563 199.667 62.3468 199.101 62.1653 198.467 cv
61.8115 197.203 61.6292 195.655 61.627 193.995 cv
61.6271 193.198 61.6711 192.377 61.7665 191.558 cv
61.8474 190.864 61.8857 190.158 61.8856 189.475 cv
61.8857 188.599 61.8225 187.76 61.7121 187.036 cv
61.6291 186.483 61.5149 185.995 61.3945 185.622 cv
61.1964 185.915 60.9737 186.299 60.7565 186.742 cv
60.0853 188.1 59.4349 190.023 59.0835 191.943 cv
58.8108 193.422 58.3906 194.884 57.8932 196.205 cv
57.3935 197.528 56.8246 198.703 56.2052 199.637 cv
55.7834 200.26 55.3636 200.784 54.7725 201.199 cv
54.4334 201.429 54.0014 201.644 53.4343 201.664 cv
53.4298 201.664 li
53.3714 199.404 mo
53.3714 199.404 li
53.3714 199.404 mo
53.3714 199.404 li
75.6439 198.225 mo
75.6439 198.225 li
75.6439 198.225 mo
75.6439 198.225 li
87.0724 200.968 mo
87.0043 200.959 li
87.0104 200.96 87.0164 200.96 87.0224 200.961 cv
87.0724 200.968 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
56.5864 191.229 mo
56.7954 188.754 li
50.0747 188.754 li
49.4478 191.229 li
49.7227 191.229 li
50.1733 189.458 50.4048 189.095 52.0654 189.095 cv
52.2637 189.095 52.5493 189.095 52.6484 189.117 cv
52.8794 189.161 52.8574 189.282 52.8135 189.535 cv
51.8457 195.332 li
51.7905 195.706 51.7573 195.86 50.6025 195.86 cv
50.1626 195.86 li
50.1074 196.201 li
50.5693 196.168 51.6914 196.168 52.1978 196.168 cv
52.7036 196.168 53.8364 196.168 54.2764 196.201 cv
54.3315 195.86 li
53.8916 195.86 li
52.7363 195.86 52.7695 195.706 52.8247 195.332 cv
53.7925 189.535 li
53.8257 189.315 53.8584 189.161 54.0566 189.117 cv
54.1885 189.095 54.4854 189.095 54.6943 189.095 cv
56.3555 189.095 56.4546 189.458 56.3115 191.229 cv
56.5864 191.229 li
cp
f
59.3696 198.841 mo
59.3696 198.808 59.3804 198.786 59.2266 198.599 cv
58.0825 197.213 58.0718 195.134 58.3574 193.451 cv
58.6768 191.537 59.4136 189.623 60.9976 188.248 cv
61.1626 188.116 61.1626 188.094 61.1626 188.062 cv
61.0747 187.951 li
60.9644 187.951 59.8535 188.699 58.9736 190.096 cv
58.2036 191.306 57.8735 192.527 57.7197 193.451 cv
57.5767 194.309 57.4775 195.64 57.8735 196.883 cv
58.3027 198.236 59.1274 198.951 59.2373 198.951 cv
59.3696 198.841 li
cp
f
66.3325 196.201 mo
66.3877 195.86 li
65.8154 195.86 65.5405 195.86 65.5845 195.53 cv
65.9365 193.429 li
66.0903 192.483 66.1567 192.142 65.8813 191.746 cv
65.7495 191.559 65.4307 191.339 64.7925 191.339 cv
63.9897 191.339 63.3955 191.813 62.9663 192.494 cv
63.1646 191.339 li
61.5913 191.46 li
61.5366 191.801 li
62.3066 191.801 62.3833 191.878 62.2847 192.417 cv
61.8003 195.365 li
61.7124 195.86 61.5913 195.86 60.8545 195.86 cv
60.7993 196.201 li
62.0537 196.168 li
63.2744 196.201 li
63.3296 195.86 li
62.5928 195.86 62.4717 195.86 62.5596 195.365 cv
62.8896 193.341 li
63.0874 192.197 63.9678 191.581 64.6714 191.581 cv
65.3647 191.581 65.3867 192.175 65.2876 192.802 cv
64.8584 195.365 li
64.7705 195.86 64.6494 195.86 63.9126 195.86 cv
63.8574 196.201 li
65.1113 196.168 li
66.3325 196.201 li
cp
f
78.6196 193.451 mo
78.6523 193.231 78.4434 193.231 78.2896 193.231 cv
71.7007 193.231 li
71.5464 193.231 71.3374 193.231 71.3047 193.451 cv
71.2607 193.671 71.4697 193.671 71.6348 193.671 cv
78.2017 193.671 li
78.3667 193.671 78.5757 193.671 78.6196 193.451 cv
cp
f
85.1646 196.201 mo
85.2197 195.86 li
84.4937 195.86 84.4604 195.805 84.5376 195.376 cv
85.2085 191.339 li
83.6465 191.46 li
83.5913 191.801 li
84.3066 191.801 84.3945 191.867 84.3066 192.406 cv
83.8115 195.365 li
83.7236 195.86 83.6025 195.86 82.8657 195.86 cv
82.8105 196.201 li
84.0317 196.168 li
84.4165 196.168 84.7905 196.19 85.1646 196.201 cv
cp
85.6704 189.557 mo
85.7144 189.26 85.5166 188.974 85.1865 188.974 cv
84.8125 188.974 84.5376 189.282 84.4937 189.557 cv
84.4385 189.854 84.6475 190.14 84.9775 190.14 cv
85.3516 190.14 85.6265 189.832 85.6704 189.557 cv
cp
f
89.1465 193.451 mo
89.2896 192.593 89.3887 191.262 88.9927 190.02 cv
88.5527 188.666 87.7275 187.951 87.6177 187.951 cv
87.4854 188.062 li
87.4854 188.094 87.4854 188.116 87.6616 188.314 cv
88.5527 189.403 88.8936 191.152 88.5083 193.451 cv
88.1895 195.332 87.4634 197.269 85.8687 198.654 cv
85.7036 198.786 85.6924 198.808 85.6924 198.841 cv
85.7808 198.951 li
85.8906 198.951 87.0127 198.203 87.8926 196.806 cv
88.6514 195.596 88.9927 194.375 89.1465 193.451 cv
cp
f
114.238 196.895 mo
114.259 196.784 114.149 196.784 114.117 196.784 cv
114.018 196.784 113.984 196.828 113.952 196.895 cv
113.457 197.917 112.72 198.049 112.313 198.049 cv
111.729 198.049 110.85 197.576 111.136 195.805 cv
111.443 194.012 112.422 193.55 113.005 193.55 cv
113.104 193.55 113.787 193.562 114.105 193.957 cv
113.655 193.99 113.534 194.32 113.512 194.463 cv
113.457 194.75 113.622 194.969 113.93 194.969 cv
114.215 194.969 114.469 194.782 114.523 194.452 cv
114.645 193.704 113.886 193.275 113.039 193.275 cv
111.664 193.275 110.454 194.463 110.223 195.827 cv
109.992 197.235 110.894 198.324 112.169 198.324 cv
113.644 198.324 114.215 197.004 114.238 196.895 cv
cp
f
101.257 195.453 mo
101.257 195.233 101.048 195.233 100.895 195.233 cv
97.8257 195.233 li
97.8257 192.153 li
97.8257 192 97.8257 191.79 97.6055 191.79 cv
97.3857 191.79 97.3857 192 97.3857 192.153 cv
97.3857 195.233 li
94.3057 195.233 li
94.1514 195.233 93.9424 195.233 93.9424 195.453 cv
93.9424 195.673 94.1514 195.673 94.3057 195.673 cv
97.3857 195.673 li
97.3857 198.753 li
97.3857 198.907 97.3857 199.116 97.6055 199.116 cv
97.8257 199.116 97.8257 198.907 97.8257 198.753 cv
97.8257 195.673 li
100.895 195.673 li
101.048 195.673 101.257 195.673 101.257 195.453 cv
cp
f
240.98 195.86 mo
241.035 195.52 li
240.308 195.52 240.276 195.464 240.352 195.035 cv
241.024 190.998 li
239.461 191.119 li
239.407 191.46 li
240.122 191.46 240.209 191.526 240.122 192.065 cv
239.626 195.024 li
239.539 195.52 239.417 195.52 238.68 195.52 cv
238.625 195.86 li
239.846 195.827 li
240.232 195.827 240.606 195.849 240.98 195.86 cv
cp
241.486 189.216 mo
241.53 188.919 241.332 188.633 241.001 188.633 cv
240.627 188.633 240.352 188.941 240.308 189.216 cv
240.253 189.513 240.462 189.799 240.792 189.799 cv
241.167 189.799 241.442 189.491 241.486 189.216 cv
cp
f
246.106 194.551 mo
246.127 194.441 246.017 194.441 245.985 194.441 cv
245.885 194.441 245.852 194.485 245.82 194.551 cv
245.325 195.574 244.587 195.706 244.18 195.706 cv
243.597 195.706 242.717 195.233 243.003 193.462 cv
243.311 191.669 244.291 191.207 244.874 191.207 cv
244.972 191.207 245.655 191.218 245.973 191.614 cv
245.523 191.647 245.402 191.978 245.379 192.12 cv
245.325 192.406 245.49 192.626 245.797 192.626 cv
246.083 192.626 246.336 192.439 246.391 192.109 cv
246.512 191.361 245.753 190.932 244.907 190.932 cv
243.532 190.932 242.322 192.12 242.09 193.484 cv
241.86 194.892 242.761 195.981 244.038 195.981 cv
245.511 195.981 246.083 194.661 246.106 194.551 cv
cp
f
97.4917 164.334 mo
97.3467 175.295 li
97.3431 175.571 97.5639 175.798 97.8401 175.801 cv
98.1162 175.805 98.343 175.584 98.3466 175.308 cv
98.4917 164.347 li
98.4953 164.071 98.2744 163.844 97.9983 163.84 cv
97.7222 163.837 97.4954 164.058 97.4917 164.334 cv
.746 .676 .668 .898 cmyk
f
97.7671 181.302 mo
100.096 175.332 li
95.5972 175.272 li
97.7671 181.302 li
cp
f
97.7671 181.302 mo
98.2329 181.483 li
100.824 174.842 li
94.8824 174.764 li
97.7482 182.726 li
98.2329 181.483 li
97.7671 181.302 li
98.2375 181.132 li
96.3119 175.782 li
99.3681 175.822 li
97.3013 181.12 li
97.7671 181.302 li
98.2375 181.132 li
97.7671 181.302 li
cp
f
gsave
0 358 mo
266.999 358 li
266.999 0 li
0 0 li
0 358 li
clp
70.4395 222.056 mo
70.5933 222.056 70.7202 222.108 70.8203 222.211 cv
70.9204 222.316 70.9712 222.446 70.9712 222.604 cv
70.9712 222.75 70.9185 222.877 70.8135 222.985 cv
70.7075 223.092 70.5825 223.146 70.4395 223.146 cv
70.2925 223.146 70.1636 223.089 70.0503 222.974 cv
69.9375 222.86 69.8804 222.727 69.8804 222.577 cv
69.8804 222.437 69.9365 222.316 70.0474 222.211 cv
70.1582 222.108 70.2896 222.056 70.4395 222.056 cv
67.4204 225.075 mo
67.5742 225.075 67.7036 225.126 67.8076 225.23 cv
67.9116 225.334 67.9634 225.463 67.9634 225.617 cv
67.9634 225.764 67.9106 225.892 67.8057 226 cv
67.6992 226.11 67.5732 226.164 67.4263 226.164 cv
67.2793 226.164 67.1504 226.11 67.0396 226 cv
66.9282 225.892 66.8735 225.765 66.8735 225.622 cv
66.8735 225.475 66.9272 225.347 67.0376 225.239 cv
67.1465 225.129 67.2734 225.075 67.4204 225.075 cv
64.3486 228.119 mo
64.5063 228.119 64.6382 228.173 64.7466 228.281 cv
64.8535 228.388 64.9072 228.521 64.9072 228.678 cv
64.9072 228.826 64.8535 228.951 64.7466 229.054 cv
64.6382 229.159 64.5093 229.21 64.3594 229.21 cv
64.2124 229.21 64.0854 229.155 63.9785 229.043 cv
63.8706 228.933 63.8164 228.8 63.8164 228.646 cv
63.8164 228.506 63.8696 228.384 63.9756 228.278 cv
64.0815 228.172 64.2056 228.119 64.3486 228.119 cv
0 0 0 1 cmyk
f
68.1926 202.186 mo
67.8825 212.561 li
67.8743 212.837 68.0914 213.068 68.3674 213.076 cv
68.6434 213.084 68.8738 212.867 68.8821 212.591 cv
69.1922 202.216 li
69.2004 201.94 68.9833 201.71 68.7073 201.701 cv
68.4313 201.693 68.2009 201.91 68.1926 202.186 cv
.746 .676 .668 .898 cmyk
f
68.2036 218.574 mo
70.6313 212.644 li
66.1333 212.51 li
68.2036 218.574 li
cp
f
68.2036 218.574 mo
68.6663 218.764 li
71.3674 212.165 li
65.427 211.989 li
68.1612 219.998 li
68.6663 218.764 li
68.2036 218.574 li
68.6768 218.413 li
66.8396 213.031 li
69.8952 213.122 li
67.7409 218.385 li
68.2036 218.574 li
68.6768 218.413 li
68.2036 218.574 li
cp
f
242.163 222.191 mo
242.317 222.191 242.447 222.246 242.553 222.353 cv
242.658 222.46 242.711 222.588 242.711 222.739 cv
242.711 222.89 242.658 223.018 242.553 223.124 cv
242.447 223.229 242.319 223.283 242.169 223.283 cv
242.018 223.283 241.89 223.229 241.782 223.122 cv
241.675 223.014 241.621 222.887 241.621 222.739 cv
241.621 222.588 241.675 222.46 241.782 222.353 cv
241.89 222.246 242.017 222.191 242.163 222.191 cv
242.158 225.274 mo
242.309 225.268 242.437 225.316 242.545 225.421 cv
242.652 225.528 242.706 225.659 242.706 225.812 cv
242.706 225.959 242.654 226.087 242.55 226.198 cv
242.446 226.31 242.324 226.366 242.184 226.366 cv
242.027 226.366 241.892 226.312 241.782 226.205 cv
241.671 226.097 241.615 225.967 241.615 225.817 cv
241.615 225.673 241.668 225.549 241.774 225.443 cv
241.88 225.337 242.008 225.281 242.158 225.274 cv
242.152 228.341 mo
242.303 228.341 242.43 228.395 242.534 228.5 cv
242.638 228.605 242.689 228.733 242.689 228.883 cv
242.689 229.031 242.638 229.159 242.534 229.266 cv
242.43 229.374 242.309 229.427 242.169 229.427 cv
242.015 229.427 241.882 229.372 241.771 229.26 cv
241.66 229.148 241.604 229.019 241.604 228.869 cv
241.604 228.731 241.66 228.61 241.771 228.503 cv
241.882 228.396 242.01 228.341 242.152 228.341 cv
0 0 0 1 cmyk
f
56.856 235.477 mo
56.9697 248.116 li
56.9722 248.392 57.1981 248.614 57.4742 248.612 cv
57.7504 248.609 57.9722 248.383 57.9697 248.107 cv
57.8559 235.468 li
57.8535 235.192 57.6276 234.97 57.3515 234.973 cv
57.0753 234.975 56.8535 235.201 56.856 235.477 cv
.746 .676 .668 .898 cmyk
f
57.5239 254.111 mo
59.7197 248.091 li
55.2197 248.132 li
57.5239 254.111 li
cp
f
57.5239 254.111 mo
57.9937 254.283 li
60.4367 247.585 li
54.4937 247.639 li
57.5368 255.535 li
57.9937 254.283 li
57.5239 254.111 li
57.9905 253.932 li
55.9457 248.626 li
59.0027 248.598 li
57.0542 253.94 li
57.5239 254.111 li
57.9905 253.932 li
57.5239 254.111 li
cp
f
35.3442 277.009 mo
35.2891 289.227 li
35.2878 289.503 35.5107 289.728 35.7868 289.729 cv
36.0629 289.73 36.2878 289.507 36.2891 289.231 cv
36.3442 277.014 li
36.3455 276.738 36.1226 276.513 35.8465 276.512 cv
35.5704 276.51 35.3455 276.733 35.3442 277.009 cv
f
35.7617 295.229 mo
38.0386 289.239 li
33.5386 289.218 li
35.7617 295.229 li
cp
f
35.7617 295.229 mo
36.2291 295.406 li
38.7622 288.742 li
32.8193 288.714 li
35.7553 296.653 li
36.2291 295.406 li
35.7617 295.229 li
36.2307 295.055 li
34.2578 289.721 li
37.3149 289.735 li
35.2943 295.051 li
35.7617 295.229 li
36.2307 295.055 li
35.7617 295.229 li
cp
f
.91405 297.128 mo
26.9141 297.128 li
26.9141 318.128 li
.91405 318.128 li
.91405 297.128 li
0 0 0 0 cmyk
f
grestore
gsave
.91405 318.128 mo
26.9141 318.128 li
26.9141 297.127 li
.91405 297.127 li
.91405 318.128 li
clp
gsave
-.227011 318.119 mo
28.5405 318.119 li
28.5405 297.902 li
-.227011 297.902 li
-.227011 318.119 li
clp
26.9141 318.116 mo
26.7039 318.101 26.519 318.042 26.3803 317.976 cv
26.2161 317.898 26.1051 317.813 26.0224 317.741 cv
25.8598 317.594 25.7946 317.49 25.7426 317.412 cv
25.6476 317.258 25.6224 317.183 25.5948 317.116 cv
25.5474 316.99 25.5283 316.916 25.5053 316.83 cv
25.463 316.666 25.4252 316.488 25.381 316.264 cv
25.294 315.82 25.1889 315.213 25.0686 314.468 cv
24.8286 312.98 24.5311 310.953 24.2359 308.75 cv
24.2187 308.62 24.2009 308.495 24.1826 308.373 cv
23.9194 309.515 23.5685 310.626 23.1654 311.649 cv
22.6535 312.942 22.0667 314.087 21.4193 314.997 cv
20.9796 315.603 20.5336 316.115 19.9153 316.505 cv
19.5617 316.722 19.1176 316.909 18.5707 316.912 cv
18.5288 316.912 li
18.5252 316.912 li
18.5212 316.912 li
18.1253 316.905 17.7398 316.785 17.4308 316.608 cv
17.119 316.431 16.8756 316.208 16.6763 315.974 cv
16.2811 315.502 16.0356 314.981 15.8351 314.409 cv
15.4458 313.268 15.2629 311.889 15.2595 310.377 cv
15.2597 309.461 15.3314 308.502 15.4869 307.537 cv
15.4891 307.523 li
15.4868 307.537 li
15.6033 306.814 15.6579 306.088 15.6578 305.402 cv
15.658 304.677 15.5963 303.995 15.4897 303.415 cv
15.3849 302.836 15.2297 302.358 15.0819 302.06 cv
15.0657 302.026 15.0496 301.995 15.0339 301.966 cv
15.0013 301.995 14.9667 302.027 14.9306 302.063 cv
14.6354 302.351 14.2528 302.858 13.8894 303.493 cv
13.1543 304.765 12.478 306.549 12.1774 308.253 cv
11.9359 309.604 11.546 310.939 11.0753 312.15 cv
10.6022 313.361 10.0559 314.442 9.44961 315.31 cv
9.03789 315.888 8.61846 316.381 8.0395 316.767 cv
7.70745 316.982 7.29555 317.174 6.77207 317.205 cv
6.76697 317.205 li
6.65834 317.208 li
6.65466 317.208 6.65104 317.208 6.64736 317.208 cv
6.23796 317.208 5.83796 317.079 5.53037 316.893 cv
5.21606 316.706 4.98179 316.473 4.7926 316.235 cv
4.41834 315.755 4.19375 315.234 4.00707 314.658 cv
3.64616 313.51 3.4749 312.109 3.47185 310.563 cv
3.47194 309.657 3.53476 308.705 3.67054 307.745 cv
3.67453 307.717 li
3.79606 306.85 3.85292 305.977 3.85283 305.161 cv
3.85292 304.41 3.80452 303.707 3.71947 303.106 cv
3.63586 302.506 3.51057 302.005 3.38823 301.689 cv
3.36788 301.634 3.34726 301.585 3.32778 301.543 cv
2.94345 301.513 2.57318 301.448 2.22181 301.356 cv
1.75361 301.23 1.3226 301.064 .91405 300.807 cv
.91405 297.928 li
2.76628 297.902 li
2.7728 297.902 li
2.77954 298.392 li
3.03806 298.484 3.42477 298.561 3.76995 298.561 cv
3.77631 298.561 3.78268 298.561 3.78902 298.561 cv
3.78777 298.561 li
3.79146 298.561 3.79514 298.561 3.79882 298.561 cv
4.21776 298.561 4.62435 298.702 4.92605 298.896 cv
5.23497 299.093 5.45652 299.329 5.63433 299.568 cv
5.98475 300.048 6.18962 300.558 6.36179 301.126 cv
6.69348 302.256 6.84996 303.636 6.85282 305.161 cv
6.85273 306.125 6.78579 307.142 6.64096 308.165 cv
6.64096 308.165 li
6.5257 308.98 6.47175 309.796 6.47184 310.563 cv
6.47166 311.316 6.52409 312.021 6.61559 312.623 cv
6.68227 313.068 6.77335 313.458 6.869 313.758 cv
7.09533 313.459 7.35754 313.042 7.61057 312.552 cv
8.28435 311.259 8.91824 309.455 9.22403 307.726 cv
9.46888 306.356 9.88696 305.011 10.4025 303.792 cv
10.9207 302.573 11.5287 301.486 12.211 300.617 cv
12.672 300.039 13.154 299.548 13.7816 299.187 cv
14.1404 298.986 14.5666 298.824 15.0678 298.805 cv
15.1529 298.804 li
15.1557 298.804 15.1584 298.804 15.1612 298.804 cv
15.5489 298.804 15.932 298.904 16.252 299.066 cv
16.5764 299.229 16.841 299.444 17.0601 299.677 cv
17.4964 300.145 17.7768 300.68 18.0033 301.265 cv
18.4447 302.435 18.654 303.851 18.6578 305.402 cv
18.6577 306.246 18.5915 307.126 18.4487 308.014 cv
18.4439 308.043 li
18.4486 308.014 li
18.3198 308.812 18.2594 309.619 18.2595 310.377 cv
18.2589 311.307 18.352 312.166 18.5028 312.829 cv
18.5656 313.124 18.648 313.38 18.7269 313.579 cv
18.9945 313.262 19.3265 312.761 19.6462 312.15 cv
20.3771 310.766 21.072 308.818 21.4222 306.917 cv
21.5437 306.263 21.6821 305.7 21.8469 305.209 cv
22.0154 304.717 22.1971 304.296 22.4872 303.895 cv
22.6837 303.632 22.9383 303.356 23.3539 303.153 cv
23.5869 303.041 23.875 302.965 24.1687 302.965 cv
24.1709 302.965 24.1732 302.965 24.1754 302.965 cv
24.1782 302.965 24.1809 302.965 24.1837 302.965 cv
24.5544 302.965 24.9033 303.085 25.1608 303.24 cv
25.4242 303.397 25.6132 303.581 25.7675 303.765 cv
26.0713 304.135 26.259 304.518 26.4332 304.955 cv
26.6188 305.435 26.7772 305.986 26.9141 306.622 cv
26.9141 316.495 li
26.0183 315.506 li
26.9141 316.495 li
26.9141 318.116 li
25.5412 316.481 mo
26.4845 316.496 li
25.5569 316.336 li
26.4842 316.496 li
25.5412 316.481 li
25.5569 316.336 mo
25.5569 316.336 li
25.5569 316.336 li
26.0183 315.506 mo
26.0183 315.506 li
26.0183 315.506 li
6.64356 314.743 mo
6.64356 314.743 li
6.64356 314.743 mo
6.64356 314.743 li
18.3799 314.04 mo
18.3799 314.04 li
18.3799 314.04 mo
18.3799 314.04 li
15.0657 298.805 mo
15.0691 298.805 li
15.0686 298.805 15.0682 298.805 15.0678 298.805 cv
15.0657 298.805 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
11.417 307.156 mo
11.626 304.681 li
4.90527 304.681 li
4.27783 307.156 li
4.55322 307.156 li
5.00391 305.385 5.23486 305.022 6.896 305.022 cv
7.09424 305.022 7.37988 305.022 7.479 305.044 cv
7.70996 305.088 7.68799 305.209 7.64404 305.462 cv
6.67627 311.259 li
6.62109 311.633 6.58789 311.787 5.43311 311.787 cv
4.99316 311.787 li
4.93799 312.128 li
5.3999 312.095 6.52197 312.095 7.02783 312.095 cv
7.53418 312.095 8.66699 312.095 9.10693 312.128 cv
9.16211 311.787 li
8.72217 311.787 li
7.56689 311.787 7.6001 311.633 7.65527 311.259 cv
8.62305 305.462 li
8.65625 305.242 8.68896 305.088 8.88721 305.044 cv
9.01904 305.022 9.31592 305.022 9.5249 305.022 cv
11.186 305.022 11.2852 305.385 11.1421 307.156 cv
11.417 307.156 li
cp
0 0 0 1 cmyk
f
14.5742 314.801 mo
14.5742 314.768 14.5742 314.746 14.3872 314.559 cv
13.2871 313.448 12.6709 311.633 12.6709 309.389 cv
12.6709 307.255 13.188 305.418 14.4639 304.12 cv
14.5742 304.021 14.5742 303.999 14.5742 303.966 cv
14.4751 303.878 li
14.332 303.878 13.4302 304.67 12.8911 305.748 cv
12.3301 306.859 12.0771 308.036 12.0771 309.389 cv
12.0771 310.368 12.231 311.677 12.8032 312.854 cv
13.4521 314.174 14.354 314.889 14.4751 314.889 cv
14.5742 314.801 li
cp
f
20.1182 308.608 mo
20.1182 307.695 20.063 306.804 19.667 305.968 cv
19.2158 305.055 18.4238 304.813 17.8853 304.813 cv
17.2471 304.813 16.4658 305.132 16.0591 306.045 cv
15.751 306.738 15.6411 307.42 15.6411 308.608 cv
15.6411 309.675 15.7183 310.478 16.1143 311.259 cv
16.543 312.095 17.3022 312.359 17.874 312.359 cv
18.8311 312.359 19.3809 311.787 19.7002 311.149 cv
20.0962 310.324 20.1182 309.246 20.1182 308.608 cv
cp
19.2822 308.476 mo
19.2822 309.213 19.2822 310.049 19.1611 310.72 cv
18.9521 311.93 18.2593 312.139 17.874 312.139 cv
17.522 312.139 16.8071 311.941 16.5981 310.742 cv
16.4771 310.082 16.4771 309.246 16.4771 308.476 cv
16.4771 307.574 16.4771 306.76 16.6528 306.111 cv
16.8398 305.374 17.4009 305.033 17.874 305.033 cv
18.292 305.033 18.9302 305.286 19.1392 306.232 cv
19.2822 306.859 19.2822 307.728 19.2822 308.476 cv
cp
f
23.6821 309.389 mo
23.6821 308.553 23.5723 307.189 22.9561 305.913 cv
22.3071 304.593 21.4053 303.878 21.2842 303.878 cv
21.1851 303.966 li
21.1851 303.999 21.1851 304.021 21.3721 304.208 cv
22.4722 305.319 23.0879 307.134 23.0879 309.378 cv
23.0879 311.512 22.5708 313.349 21.2949 314.647 cv
21.1851 314.746 21.1851 314.768 21.1851 314.801 cv
21.2842 314.889 li
21.4272 314.889 22.3291 314.097 22.8682 313.019 cv
23.4292 311.897 23.6821 310.709 23.6821 309.389 cv
cp
f
52.3369 309.521 mo
52.3589 309.411 52.249 309.411 52.2158 309.411 cv
52.1172 309.411 52.084 309.455 52.0513 309.521 cv
51.5562 310.544 50.8188 310.676 50.4121 310.676 cv
49.8291 310.676 48.9492 310.203 49.2349 308.432 cv
49.543 306.639 50.522 306.177 51.105 306.177 cv
51.2041 306.177 51.8862 306.188 52.2051 306.584 cv
51.7539 306.617 51.6328 306.947 51.6108 307.09 cv
51.5562 307.376 51.7212 307.596 52.0288 307.596 cv
52.3149 307.596 52.5679 307.409 52.623 307.079 cv
52.7441 306.331 51.9849 305.902 51.1382 305.902 cv
49.7632 305.902 48.5532 307.09 48.3223 308.454 cv
48.0908 309.862 48.9932 310.951 50.269 310.951 cv
51.7432 310.951 52.3149 309.631 52.3369 309.521 cv
cp
f
39.3569 309.378 mo
39.3569 309.158 39.1479 309.158 38.9941 309.158 cv
35.9248 309.158 li
35.9248 306.078 li
35.9248 305.924 35.9248 305.715 35.7051 305.715 cv
35.4849 305.715 35.4849 305.924 35.4849 306.078 cv
35.4849 309.158 li
32.4053 309.158 li
32.251 309.158 32.042 309.158 32.042 309.378 cv
32.042 309.598 32.251 309.598 32.4053 309.598 cv
35.4849 309.598 li
35.4849 312.678 li
35.4849 312.832 35.4849 313.041 35.7051 313.041 cv
35.9248 313.041 35.9248 312.832 35.9248 312.678 cv
35.9248 309.598 li
38.9941 309.598 li
39.1479 309.598 39.3569 309.598 39.3569 309.378 cv
cp
f
14 318.128 mo
14 328.167 li
14 328.443 14.2239 328.667 14.5 328.667 cv
14.7761 328.667 15 328.443 15 328.167 cv
15 318.128 li
15 317.852 14.7761 317.628 14.5 317.628 cv
14.2239 317.628 14 317.852 14 318.128 cv
.746 .676 .668 .898 cmyk
f
13.9141 334.167 mo
16.1641 328.167 li
11.6641 328.167 li
13.9141 334.167 li
cp
f
13.9141 334.167 mo
14.3822 334.343 li
16.8855 327.667 li
10.9426 327.667 li
13.9141 335.591 li
14.3822 334.343 li
13.9141 334.167 li
14.3822 333.991 li
12.3856 328.667 li
15.4426 328.667 li
13.4459 333.991 li
13.9141 334.167 li
14.3822 333.991 li
13.9141 334.167 li
cp
f
16.2573 349.758 mo
16.2793 349.647 16.1689 349.647 16.1362 349.647 cv
16.0371 349.647 16.0039 349.691 15.9712 349.758 cv
15.4761 350.78 14.7393 350.912 14.332 350.912 cv
13.749 350.912 12.8691 350.439 13.1553 348.669 cv
13.4634 346.876 14.4419 346.413 15.0249 346.413 cv
15.124 346.413 15.8062 346.425 16.125 346.82 cv
15.6743 346.854 15.5532 347.184 15.5313 347.326 cv
15.4761 347.612 15.6411 347.832 15.9492 347.832 cv
16.2354 347.832 16.4883 347.646 16.543 347.315 cv
16.6641 346.567 15.9053 346.139 15.0581 346.139 cv
13.6831 346.139 12.4731 347.326 12.2422 348.69 cv
12.0112 350.099 12.9131 351.188 14.189 351.188 cv
15.6631 351.188 16.2354 349.867 16.2573 349.758 cv
cp
0 0 0 1 cmyk
f
220.704 353.706 mo
220.704 353.674 220.704 353.651 220.516 353.465 cv
219.141 352.078 218.79 349.999 218.79 348.316 cv
218.79 346.402 219.208 344.488 220.56 343.113 cv
220.704 342.981 220.704 342.96 220.704 342.927 cv
220.593 342.816 li
220.483 342.816 219.493 343.564 218.844 344.962 cv
218.283 346.172 218.151 347.393 218.151 348.316 cv
218.151 349.175 218.272 350.506 218.877 351.748 cv
219.538 353.102 220.483 353.816 220.593 353.816 cv
220.704 353.706 li
cp
f
227.226 351.066 mo
227.281 350.726 li
226.709 350.726 226.434 350.726 226.478 350.396 cv
226.831 348.295 li
226.984 347.349 227.05 347.008 226.775 346.611 cv
226.643 346.425 226.324 346.204 225.686 346.204 cv
224.883 346.204 224.29 346.678 223.86 347.359 cv
224.058 346.204 li
222.485 346.325 li
222.43 346.667 li
223.2 346.667 223.277 346.743 223.178 347.282 cv
222.694 350.23 li
222.606 350.726 222.485 350.726 221.749 350.726 cv
221.693 351.066 li
222.947 351.033 li
224.168 351.066 li
224.223 350.726 li
223.486 350.726 223.365 350.726 223.454 350.23 cv
223.783 348.206 li
223.981 347.063 224.861 346.446 225.565 346.446 cv
226.258 346.446 226.28 347.04 226.181 347.667 cv
225.752 350.23 li
225.665 350.726 225.543 350.726 224.806 350.726 cv
224.751 351.066 li
226.005 351.033 li
227.226 351.066 li
cp
f
238.897 348.327 mo
238.897 348.118 238.71 348.118 238.545 348.118 cv
235.509 348.118 li
235.509 345.082 li
235.509 344.929 235.509 344.73 235.311 344.73 cv
235.102 344.73 235.102 344.917 235.102 345.082 cv
235.102 348.118 li
232.066 348.118 li
231.913 348.118 231.714 348.118 231.714 348.316 cv
231.714 348.525 231.901 348.525 232.066 348.525 cv
235.102 348.525 li
235.102 351.562 li
235.102 351.716 235.102 351.913 235.3 351.913 cv
235.509 351.913 235.509 351.727 235.509 351.562 cv
235.509 348.525 li
238.545 348.525 li
238.699 348.525 238.897 348.525 238.897 348.327 cv
cp
f
247.774 351.066 mo
247.774 350.726 li
247.422 350.726 li
246.432 350.726 246.399 350.604 246.399 350.197 cv
246.399 344.026 li
246.399 343.763 246.399 343.74 246.146 343.74 cv
245.464 344.444 244.497 344.444 244.144 344.444 cv
244.144 344.785 li
244.364 344.785 245.013 344.785 245.585 344.499 cv
245.585 350.197 li
245.585 350.594 245.552 350.726 244.562 350.726 cv
244.21 350.726 li
244.21 351.066 li
244.595 351.033 245.552 351.033 245.992 351.033 cv
246.432 351.033 247.389 351.033 247.774 351.066 cv
cp
f
251.844 348.316 mo
251.844 347.458 251.723 346.128 251.118 344.885 cv
250.458 343.531 249.512 342.816 249.402 342.816 cv
249.292 342.927 li
249.292 342.96 249.292 342.981 249.501 343.18 cv
250.58 344.269 251.207 346.018 251.207 348.316 cv
251.207 350.197 250.799 352.134 249.435 353.52 cv
249.292 353.651 249.292 353.674 249.292 353.706 cv
249.402 353.816 li
249.512 353.816 250.502 353.068 251.151 351.672 cv
251.712 350.462 251.844 349.24 251.844 348.316 cv
cp
f
261.392 349.758 mo
261.415 349.647 261.304 349.647 261.271 349.647 cv
261.172 349.647 261.139 349.691 261.106 349.758 cv
260.611 350.78 259.875 350.912 259.467 350.912 cv
258.884 350.912 258.004 350.439 258.291 348.669 cv
258.598 346.876 259.577 346.413 260.16 346.413 cv
260.259 346.413 260.941 346.425 261.26 346.82 cv
260.809 346.854 260.688 347.184 260.667 347.326 cv
260.611 347.612 260.776 347.832 261.084 347.832 cv
261.371 347.832 261.624 347.646 261.678 347.315 cv
261.799 346.567 261.041 346.139 260.193 346.139 cv
258.818 346.139 257.608 347.326 257.377 348.69 cv
257.146 350.099 258.048 351.188 259.324 351.188 cv
260.798 351.188 261.371 349.867 261.392 349.758 cv
cp
f
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (010x015.eps)%%CreationDate: 27/05/15 10:53 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6pNl*qdl=ir^cgV+ZU$T2@tJb]cIp2qa7_4l%!^WQ^-D>F\#R"c[=fenR-uuGc^oCd6`JV0]"1d@F_<J!NM$(58,[;2n_^1M%ChRN_;pq,7UeOEUAMW!^-e3CE9NF(t)%1%n=d>\fSCMc:J6+"J^jF&?bKj7thDoI2?E3C9Ti#U4g.U\Ihj&NaT^i:_.d?86Xk*8C%HF$Xtq+PAj48NI_UK/s*>$mOi>*cK-!bLJ5oB2nBHMI+)>\u'h<SL!IqFFVX\"PFQ(;DZp:Aq$_o3+;38uo-W?gtRb&'RQ?ITl,\%?m*f0lt#)5H;ElM5l#mc[jT_8O*7F$l$P>QpTqNS<hoIjBmmka')ZC`J0eE.cd&Otc!$rB,oinIT%0O8o]^ee-"2m78ho7TCnu1]%9:4#?4OdC2qPaC+.D9#h]N/5F6hsdGo](F/aKh[7')Q38:4?s.ep74h"2.VFA2=o?1g[4?BZtn>>cYO-&O6NV-S'.:Bt[M.0^4SN%%uu&eD)j2`'^Sp#Y-o2@Y^rQ][=6]:TO'5hR[LU+*V!c8<Z;!>%#1^fXD2X*ZM2K+`EKJUVfEHJjqoH2W:f]S;.$WWMi,gBE3&[%%l:mtOUb2:+rQeZas0hM`lR7_&e#CoDa+:)p#@9PY[0NV2J[9PCZ[1^8&-hbX.otAUc>3P6e;KSeALXaLM?FU`ht6'g*Mb4mri%Ar%)?tZE2LZDK%THHuYH$S\<Q1l9b+=pBpbmKB0X-dMi%N!`;MKb!%&7'NlEkCZA(t,*[ZO\]0:&n\/;<!N'2'&I=K5352[]e:;CGq@%EZ(L8bD(RdQco0:>\<H/*jbjOrid0k;gd&>Xo`n--^MV(i?sr.0f^IicYu;IM.LWopke$S0YuVb1#XMZ_@b`Sf#7'rC;pkE-]T/G%+r&(ND),q5p9><l$U:mi\Vr4TI^%uD`sdk79DHWcA0Ya#B74E@A$'7eSN1^_Y^]a^a+p9h':V9GCA*V2)#hKP3'Lu0)-5D%3'R8Y%?T:))s7j]^NY)-,;E-l<A@'@UK]/3(O"ECLJ3A,?a-ea75DF;3`UN$JKoMVq*dc3/`S+l\47gE`3<-2kNm==l*$)c<7a7Oaq!\qi%1&Ao[0q>IlnIs+(kY`:RZCSD@0ZR@)eEtVe6RrYS@F#gf0NrGHKeoV8n#U^Al`=BH2se(2,L4qDhm&Ep3iegbc^qImXQOD212:EB%c>^[9.+:CM^YW^<n"__aC@tVnK-u`R)0J#_n'N5kmEq$%d_/e,YjBU:p;k&q^?o@Hl)W9?Vd3=VHW-4VqM0P<=-WMF7:B!)^[*%7%0)Xo2AcGXG?"X`;0DfCNm'l_UrNe'KgTm?X/cIDqB2?1Tm,-qPqsF>ns&,7oO[6XplsHa1IX?Rt5KWlEpc6V?I^461^R\`u08r]S%$CY9RC3$kT\+A]D_;V`!kOG`YZ?1JgkOZ+eb?OI#bc@S*nJ@KLb@UHKPVf]Pmq@%(/2:hPXK-UchpE1FK[1JTho;ru(OYL+r5(Co%EZ*S_(?mL<;,Q5(G)B+_"lB^_2jJsO7HdpCrg'4aU6tScLu6AkK0nD`>f1c&#0GU888oJIg!ZG+fH1"2h>o5[*IF6akV#';&MQnG%-%)1cP&SW!0%DN<:]e?U%f$&`XuuAZ10Mr":"JoV;5H"_F20$5X-c=lRJtYA[tJ+iREZCt5n12en3(*5XfM4DQGdu]2JfH^V]Olf%:tDV@Li#dE;@DB%qLPu,jlgV#a0$'n^i,^k"1DLT[coB\,-TOo0abYr0=K>"2?W;!-oI<"_T^@[BLHk&br#4>=O'UFIc+R&NHuZ&%VYZ,ZH&o<FiRqi<AoicX&J+M8@rk&&WZrf4r=NXY_A^Z:i1=m2(HAj\W^=&m:MA=A$`J>/UF#h2:Fr5g)Ps77rl?RA3-AVee8pud%TTKkf%KFjKTTW7VrF9UDC6@1SiI@A$A;12V=-jE]2naug>5"m'HU0FhhbcVSZ:*M:(S'225'IcHER#P4]?W?@_7&#*Po6*o5g(V8%c'Lp.hHuum>e:?j(ss&k62\o?NE.$g$_.Zr4.L5X-!YeMF)4S0@oR,hLe"1]qOc`5bnKY*)@Q5d>63@u\]D<Jfr:+Y-LmuXiW_CV%?\s0%=^C#ZA@4+=@;d"__O^a?.QJ3bp`n'ARihPY,P;/`33BMbCgIt0b%3K;[":=;i!hh?Dett)1ZhLARjDnblK0VAq8UQ\I&3eT%`rQ.A\Ed?Jqk%[cS@9cPkKsY&(#YU'iU1l/X_WmI32<n;;/9`</Iq6gB7PCpNRR1TIsmh'.0ae[@%=ptX9qtjX!5mZagaB\ZIOX.%isNaCG=j[6`]&^28t7Z@4e#:mn,k1Z4#hFD'%'$sXW=;Di]"Bm9-/#rQPn[nX2Lc/L.>9sf5&r9mk<[^s4*J>G,U&E,G.%c)f\tG%6CL>[;j<AKL5)dE^$P=,Jla%r*qp!1(/>sjU<)f:<eD%#"F>8qUp_jNG#MP!dPlH@Wjk*G:GCY!3LU2B2,.P#8$Y8$8L;6e_bWgd%4!f]\142sV,f<iK;Lrm)S+HY(b1M*pOk6,,=^203$l_arX>Vu+<3,/GP%YUKIs87@UslW%939+ooG?_VM\W$F/dLl5o4e:Wk`2/c%4'J.CrFWR`1MtI-PK7[4*ZY"BaD;j*0Md.Scfe?gFK.>QP)Q6F`E!:;>Xql622/AhCC.B`=3o6,V4uP<E/`3PA[=mI]]@.(jS>r:%,HN&9PL]-c9X*qajNsjSd+YgOl*;fY/>`U2>&meV\tUE4bn;,#94u0H35uqcL!*<RL(8AAe'F0"BZh)aSOl^t"Y`R!R,$VIP-rND%+/9k-F/0T4.]bb-6./sg%PPG0KD;G;%`apt82ICdE&r4,O75SA30lIE`j%=rqC?ldfXF3-$U'2\a%(:-C=F/?m$[aASt&hC5>C9X%UYh,f%4M0P7i,:mOIfR8a0d"6[+/ph1jA6")l]8'CZDso5&4/)TNM'Sq+p[[1Rjup!:S\,cUXn%XaDs<@k0%\.]mHS4bT0dVt7Cl%gVrIH7dJ6ESO#pA^T+\2;lJ9$<9g[Ob=\hg]B\E[V-[l4$1?BWs7$mfW;qsk\ij/I8uo(;'+dX::m"!F0a35##o]gchU@t%CAkR-%f$/[?43h6IlT9M\B5&m0g%oEtVp?9@RTlooO]smP',8Xi45)Zk([=M5L7mt#G_'6qq,ZZcf*[b&D?1gXRqjZVC:0,3<i,WknIjD<%aE+g:p8f@QqYTTh;>Y$VH1W@IN[q6Wa%NO\qKKPMrJIWbZ17^drX+<Lgs,/%j/\%6@Hl889!_-4G2CDAo$jd<Ifp64o%:q#GiieJ%-b-k=q7B[EVfI.W`dd:G,JB>1\HVD&q5JN)B@FE/b#^I6ONO,CHo5=\]SMe98kFDojV,A!Umqm\]p,kL,GhUCL*+%sjUZn@PEr';%62L:]9"tH&l6M)\10:ZY*+O?=WH8X(Ktl,)(m<LcSqB/.e>be/e;NAM<7K23p8OVJg2B'%8KD`\NAu(RK>N&8:;gAg(oY4mF!XKG%&L/j.k5XFKW$hY)W1<V4g$3&[rA!L5L?ZW`+"rG09'^El/Z!MMn7W#0P1+;?'("l]9)\.Tncm=8d6n#@!9N<aDA/<EJ)Rn;D-'pa%C!NaYmA*CY+.^RG8+!)C2_45oNa&%L<je)<fu'D\&j/=V<i@K0IIu!&rcHR9'j*f)O8kmk97%V4m%'R!KBhdCc^4,$8b]msn^;Xc%RVe`b&NUW?<<qiM]%fk%\[+mC(B\h!8>Y0\K&TUVq)eQ+qKP`D5Q7SG%Rq<2X&K%2^%([HJ?HXA.2s[MVjjo`>>WYt:T`Uc-).gY%(g!P49g>CP-#EnqkH5<g%q1,J@l"cnBc+E;k5Tn\l;1k#5O.[`_Opj.WVu;f2BTR+\FXp.5L&:oXU69dIh08nS]WHZfC0fB#OB04%Q.AG/E!2BZr\nrYs*,Xb2mKURQ$IZTW4g&_iFN)'748GBYP%G`e%q%sd%bKirbJK=6.pm<l[O1h'+`4B@sk1u2eT#QmDkQcG,Ol<%*)Ti%Zgtjm%F,g%Vh6$ArKV2D5_n`Vlel^j$VAEZ5Uq;h"1^1<dL0.&+2lalIik]/;03I=%>8!Z[J0I]NHu9SrXY%6l2<h<"b#ll%J+I,@La<#QgV<d[InTpPCEG50T+HK/OOM3Fl_R4IOoNQY"_bV_(GW'k<E2Q<s0kgN(lS:'k@!)te:6(`rXKmlIm.1#mla1:(hQfG%%-(\Q,2W.`;8$$qhVNTpgT#/ib=:Q7]R*2qN=I@kqpjRE(7Em'8NE*s^LV$6"8J4==cc8U0:/u>'/_$"]\n)IjU8X[.]q!;UXFH_%^L2FKH`elf@RZSS/*U\j)L<093=;:Ml`)"3;XUI2[oV$F7*fW(%`jB>WGY;Jd8['os/NG%?$DF0YQSp(+o^9mFklbjG>>0GZc3;U%4XeloNZ7?rI"@k=0!6'^43jH$(r8s/cTB>KP+EFRj#foVh2X7oR,b+qI^GTPb23GhegGfP>*b:/9j8FF93n@3!-,hJR'i$#:i_(G%SSf(g_C8E+V,Xelb,<*u<pshq,O5hn@HFQ<k(@WM'kX`d5[D"TkQKbCe36!HcgR\$5FmPpQZRJVmW2\U<86k)>aIUq9-?[Na"!p8%]<9>Sj)&Z2<GaV@oufEX,O8J].gaGf1VZlfWRW!J]Vr9mckUfjaF-M.G]/7@6-P",6r(JXF[h8P9]N$Lql!TFm7s_Pl*(F>U<YQ]%Tgk%/V=r:>>bM,[^Tc5ETXR[e*j1.GDDqRQNV^(+>\-'uE1pI9'gT%tju^4\\^kH$Ndh"G=+c_LJUpSh^J<gPi(b)H[YQgWs+4ij%ZC`YT9)Z`f;3l(@0iP@AE\fSYb;_>>o,t$O<-[ElZ"Ue50Q0uu>Xs6b;2-[-XK%YB)::X5G!"'WUc3Hk\'-7PV4n%1l;m8e9)n:g%!\C54$.>&?<f1Q3Z_JMoQ@j!/=SVNb;WC,"9b7DmD"i;^4+0u*J$e*ABi?`e!PAdTBNh,;0GjiW8lX>m<L@qO<Lbq8_Y[1iEJn1O%Zp33'ctTE+WQ)\A'A<D$Jgf?P^K1A=rb/]doIp!^C%\<"G@ZT5"'S^X8;n3eINkUjL7)jiM8k:=>,l#P\b57W:N#/ei#Fb/SM/UY%FbMi$0Nc[Y3Z\sa,.TTU\QjEZk3HrnSqUl(J^TZ+i/Tj_fIY6I9gT"i4[CibdYk[^omFN3gOaoTM>4u%+e&.'dluV=C)N_A?/?NY%(.%*$Y\5L9nD.[Bk=_TC>(,d=i6o0R7`Y7*'W\gS?[M_@heEUhqFsgq9^W50Q7Sq,a/A0M'YG8MK&Kh=q&EAD4PPP(EYM?=Ho`7O%@Sla+>*[\Mlibn^Pe',^rk?`PM7V],P[6B0R_u,'47tk*1S1+LQK=QR?_?$7>.+4\q#*;Oe#i`f2t:P85KVnH04.jPO)/ppX0('r%g4b\C?[mS%27u1?5\noHfU5&.f$S9EI'e$Z=7,Y9bg,HM>#l'V>Z@"'8^d$=]<.3uVAm97C=Uu)IDP58=/]5sp"F.ng!1Q*=a[PT%^/D-n4StGhF]T_V[;3fjRMGb"^[rpPXlBmD?^Jl$*5jo;gW\6\%(SWS7e?;N7tGie)I=?0ErcG@JWDJ2W5Au/0RFtO/RD?%X7_:3%?o3S=c`iS7?qF9-0Bc?[6OBF-VE]P#Tb&%Prc/)3#Sqj/AGg1iI5Mo0UIloB&E']YHZ66$^2RMi`F+q7EqS^%`=(=T..mFg*/b=]%U>se=WjV%_Ib-[7p<ReVB+#K#XYj=t)]nm:/EUpU,8AtT2!MdZA=C_hRCILbZSW>[mPLAhbLSr+$!=(PXBt79K&T,#'9mZeSY3'f%fAZ:W*$!:i<ZH*h\X!f-(Ho`:ZrqYVC%FE@+gI>;N>RuB%>8pVX6>ZJI]`T=M(NO;KT5"fiu-E8kH!#>Egn,%LY@9f4!,J5j<])(%M)J.'7cLk9Tntp/i=eSP;ub9lc(aO'<bZ1G8m!\M>?Is/HFFRL(+SC=9`*qJ*lf7&R:bjJDnuephQ&Q'hbN'UQ@&'X`n"@44@#<Y%^Deq1UraXPnKS25CVD`2s5Q(&UWPGtW52M\<*3pI>pnVf*gICGeree57OLs=KT[DJm6SOt<oWcf/3t;X[+V0G:fPdZ__bB&gb[hr%O/qcXgAZ>tpVLIIfud4FBH/1'U%a<!V\i:t5KSe>)i?A8H2MES=T&[Klo"b>GIlE.WSZpV@,Q0GIOlpQ'nSaoGQa1*,3bsB?W`C[%Z5$`r'h5kDHBQ@tPc1<#eoX!Dh>>S8atBC//)+cpiO_pb&(@<0WU\umk%f(f=H#3+Q:k%1Pf8>Z'6Zn[]S$Zhg@FVna**9(GO-.i%[iiuECXd*!Z?s:@W+@p!*%FYFS\f(tO9<Y;CYc>QQeVc9Y]#CkI"Y)Q$Q$i5@Ud:SdG!YUi$SAiB;@q]nX92^f?"mAe+5345ll1$%$@J3$7,0)NU3mAU#7#3%+<,-HIPa>Ye3B^b^uNqP>+@`Nj^>=p]6m7(-(M(miN6FWE*heFiK<oHgrmN#/[/Pbm4'<['h4h-NFtrQ%&ZAV<b]&p3WJaZKkLK$t@\nF`WHsajFY&:,AMJn4hXIrndiW_dVaI:,\2q2@_s`TbCk')%X6_<:YB2-eS6#Wh*WZ68!1`-Ke%+7.%]O!@U5PkV(`j0&m*B;AC3J<;%>S-_[_Tn1<(TU)c=R5mRraa<X?TdMIh#,"*r;(b1`G^XBnnUg>+8g/od=Z"QrN*>.r,$A#DGQe(%<f4YglS\F91;A-E]T:=;gT+hB\`o;WAo)q`F(K1]nAZMRGlN:a:VX5Go05mG@g`NC`N_kr5`p)ff/(ph5$"'LV6uT^!HbL>WN@7*%Xf7eUC)JtMf?MIt;n6=CWm[sB<8)f&(/gQ$CMi`)^X,*uh:T'gCY&4%A[^C(d4S%n],R_o;nbFGYNAnnjLMp+kH1\Hr='2i`Wk%0%Bk%Me%m+9ZetP#[s,oOa;-=/TN@d9,l=7.BT=(rWcK5?AD,qXF[W!GP[*o\tAN"KkQD[D.Q,/VX4r^QS)FNh&UOC4tnJCrSd#B5+%E:moLMdSJJGElAaX6s1Vo4qQ?;]\iC\[Jo2as]L+:X9$nW_'Bmf0usujn;^?I^XKO*VFOc:^um=he;&mdN#nH'.T&r7dnZ_U=X'.%'51GHV1,kI)LZAVIs90_)D+&j-^@+HXAPA`[WO#hNHJI31\oAd7T[U-g=)7FAlth1T;V&:bk'o;*Au"%7;,^O9C")?N>`Iof(*`@%]M\(m:+DlQrX*EtQ"c;GRnK0EO+WY#YtA46NW$pfVg%mCK.-A`\*dRe?#4Tu.(K`%j-OLMmnCWW>,,k6QR:=/UW:j4JN;9+bcMd@%$B+5\j>DgqEk-VU]"`J:R\/tbFQlXeIsoLo2YsY&Fr8o2RJVCn9oZ#*JS&=k@>VFZk1ejS*h*\oebf>4=JP9J[;.e(d8U==e_b#;%2lg.kA&VTaQHHXX(u"1uq9>Elq,36i)O8J>pLS(RH#dl*`^JsqISbi8Zm'?=4C*V!\g?I9X#&m\TMa"T>+LM(F["CB`L4N9=[1D:%moZ?]]?dddd@1kbhcuDNdCHDL\#TsAWMp:_CGpfTh7pY&6o8XPR%LSDLT!\#d_X_P*G?-j@En4f05^W$*M.pBHFc5@7Q.hZ4]S>7%7W0*>e&U-]BI.c%He[)ggRHlacpf[clYhoFT"b6agt-<U>N*hE8Jc`uQ1.9;e]`;a@q@O1dH9kAA>9s%>N6`eqk7L_OtPA\MW'O9%XHahKIbin:2L9lF\J&Y@>2da*\^k-2&WPXMdXAa9(uFK8TB=afD5j4g540s':Q?E1.s!a9(=D@=\Q&G#g'qoK3a<XHgULTA6).*1%e0mjBO":/kRZG,/B6?,:BP)2V.s'4=1;,TPm2tT,oJF%Aa$plV,gGAAmo3mkhL.M=Ali2&<nM:`Xn"qClgo[iNe*jqAW:S6b<(/B%\Bnu_YDltc=_\Yj,''NN7;&]U:8$#1jm@&?27bF//c$C9h\Va8i=e)K:+d:Tr/FGqkH@#"YurM8elKN=E9MLi/BE>65>.KYdA:4'%!.)[)eYb2MhPui2,G8?+gZMKGN@"%=i9Bnfq<K6ikr\0:5@I>Jk6KRBS;MP1k$Vr<OPs"8<6`3W_ic+4I^_PDi7%Q"pf/dWq:n*h%=h9N=C+43O:XMtq.hC+cdf@CHM7bTdo+Llmrd9-"M15;KoQrUb.:LGf3#[9lhMuj8g7I#)3H)7%^Sej65i(Vp+3T0/;gEa>q"/k+%[-h<QjS;5ahU+)GSmH$#F(<Tnmtsc=hU=*94_5\YaiLskFH2jFO\\1pPg*QD:H?G/50I^P;/a?kIkBuK:NmOjm4.\k9E"[.58n$1%@oGI5F-06kq1IjFjO7CGI9_fP=FNr3S6_"s>Mk`=X)lRRQY)Nc:Zp&Q[Fb6'6?XZb._!`q[c[-hcY:YL9s-SCE7iY4RuJZ_.@=_!%AQW')/"dA.I9Z3"1XS$05O'u#RF7KkbI916\8,H(jnn3L5I(PFO"D&A$M\TIXNmD*D4DPtN5P/Y.OU\qhe\9&e#UNI>T1[$;*q?Y%W49ci^R28.VO=ZWEX,Wn)U-:'+6:OOmQc]F=5<KrEZ_@.ZbY>895*`EqO"\Ckkp>/p+)k7@q+H1=h>F1^=OongRH8R5m7.K,9)oj%^CO,X)Wg8g"m/J1=L$7TYu0n1;J=Q@gcQ;iI@Zgqn/?.>]N7l3\ZZ2K]_4MaFmClq<V&(/HQCcfTQaBBCQrVpA37;2<<ELrgYj<M%dHg\nOcGd_RSWAKa%Ed-A><g"]SAGW16rAbP\`'hG(2Oc_5*2]2N%@PR;Yj$[aR?ej0K9=<oN36/&!8Zp[IcSmodr'pjOVs*Jka_%U87e6l&P@n9c3J-IU;M7Gmj@\k0*5\!VTn"Bb>Ce[%)#QT'X.Xqj:Jhn35El1TtHHe0f_\+EaeH]@%Dk7p*Tr]fl1HqQORMh%kQY%<D(oLl<&F##M)KbripFhi!kbLm53bo#)9S?A4:m;11GR!\bBhnj*mNn/IV";3c^,pZ'?n\\50a&:7':fiTCmnF$F^UG*pPsE7Fh1%)gP%@@0#oIY+Eb^#En.ZY:b7W4(2DeAU(*oJ#7d=%i1DoF_SnffE<1ZKQQ>TB62BdH8s(;K6LU:0V;6^K]iLT9/&R+kW+-j@(l9*%_$P=5F-5KM`V2K8rm29R2M3u=N<"\+6l)s5[>XIqjLNN"j^+2u+nk"d=7-Sn=^-+-nT[hUa#p:i2Zp3&s4R]g.@W9imXWCLZ^t<\%ol.GPrHTgeVcFg[2G/0T/J3P1T4<`T89]rY:B^),8hPE7HF$FO?lpA4Ni0@UC9JHPX&<K_iN&,hH(dU;%]i9H2Yn;[\peXB&<CLp%Q`[qMm.X(>=,QT@7TDUs:@[$+,5)YWEmY_M5\LL2$%6b/TqB4bbt^S!Y)3h?[*Y$fPLJ:"-nk]SfEt--'T&44HXhNTTcKJ_aWV@Y%@l[ANl\A&4R=F&;Fc6/i3Gd6.8$Uro<uJdLM4M`pH/W"7^lM\`(;APM72WfXB1dN5'C&7=I_^&O:@)lPW8L)f!A5d$G4`uFPgD3'%94oc^?Y`llmBAkX-,]<`WS0AYF_P8=;_m5n-*LO81+niKA3Ss/rFrYa'nSu9d?U!2q#tWt[M(0YK(Bp=]3C)RD8-8o&57qgVq3Lb%T+6aT'I-mZnA]RMZb@C+V5"^\Rtr\R^'iMkBU-l6\jZ.&:Bkq?0#]#@kP*5.4^Oglo*;^+Or<%9rYgM."Gr)&S^p;"=[$iBpt-.C%?,mm=rF)d_?Ip:=*a9l,R)mYZ^f]&%Lg[[&%+id.O9pbAX<6hS],su@,_D(o?G2CG2/L-2AS6F=A?0bBl?b:;U!.WXPBgRq2Zu5.%o%ngnm"G$YPu0HCa/=[1c<As;bE4p?dj`.6_sQ;STgqVW($J81'/-pA0jGid8W"1rDV8AeR!,ajHeAWT_taS;q6l9cle;E=Gd^_A%D9+Um4X]u\=/0fnIa/;gD"tGk'OQajO9?M1Ta"f4"&1J+;aXq6\3,#3MLR7&8Fbo]*ff[:6n`mO0a"rSA:"#R"<*22!'C-5JDg3M%p-+FS\ppN2UYMarKZ]V]eOJfoIs,cun1qiT;OO+4=R=,*qt='2In$nAc7M5Qrc`KqaQcseTtZFQa9l)0Oi0MLlpI(gM5uj6B?n91%GCrONe4B1VQQeO;5dfXiq@[s7Q`RZ/iU9QOUZ-(@YJ3SR8:41cW1cor1Gm,IG;6,VTVjpmkMB=-GCTO"=nTt\Sdl7q1=3kH1>mZc%9&AruWWW$E^34L+pc<qk&1Q0D0ths_!EK3oI(4'NfJ+"H7plKa:P3#>hY:OLA"k^fFHFG/fNXWto2OtQoo]<!9><7P^%'%6j0ss[%K^/EE3Sg/KHAFkq?M8u&E1ioL7Lh#88][1j\d[[akhMrok$CmT%5a_4^W;?*ou/\:p%+.!56LCD6$'t,#2SnRl*>gY=4"oaE\^o9%2ligpkRALH^h*Zahk9;<!56K$nT[,2?hgS':4lc4K1S/Q`hB\8q-1,(m\SMg:W>he@$;d"WW)+'BAOhd?;cZY>!+UhM=)4bSra[(%<X[AaA*Oq@Vo#J<m/=XE?Y!aIrP;%l,10-hV@tN)q";l5Kt'UT*53qld-ju-d+/-79rM?SPptBMp\5q0q569/I[CCO7Vm.dEjYQ'%C_oTWJ'Os<aR5iD%1ol9h.'c;CNES?_f2u5#9G?6)+Qd_383;Z')JGgEjXK,&+_[\N^gADGE!&8:HV-?-*LtV]iV3]Aj9s;F2m%V%ab?l;s+CP,B\Grl2MHgd_f.2]#C8C-Lg]apq8O$/hgc_,jpF&`'/:Z[bYT5h='5p8cB$sF@q$bm1fh3"(`QYZGPZGF*kh<:ctL)'%(snTBcO8$&+KT8gVLZ)L'RS6&fO$eH+V93.U*<U9So0a<OPVP5gr/XM`iA+9b2OCD@I[iIdLaDW+-_K[>DuoLWT;L314BiS,1)[q%GBGnarLR$NQ\CPYQ:)Wt-8ho(R5bhiqsIh+n)AOFCT5PIdLb`$Q\EPW(tFgH^Q4Rf<6rqf4k:5m$XJ+o5A>B:*OcHhA0LPL`Ce%g%m[[g?ob.Iao+EJ]QY$lM@<l8uiM3;![Du=lP_c8sciq?FF;;6mrAJ]eeU>u7VT\*JEck_8>2;?p2TJpo-/RCdKUL&=Xn&D=[0XGM%n9L-h7M3<s^!s$7'G8'hr*fu-e-amJ0#:N.7X)Br,>Hk(HMr\\*DI0Wk3lCD/c](&I4R%/5T*k7/QUGLpEn#=%9Ab:W0>DOq]d6C%6Inik:QF-JnB^3+&l"uu'knn"`s1Gt-mDNTPe`l8T7O1^iHk'29g>S3=r-P[VgQ&KgXp!6f-<@FAMLAP@-1]CBb$[qSY6pCF@s=S%Ep2L=kYdhrjNr$,lH>i1giE00](c[pbSD0e%NSbh;&OK2Z5>WX/j=oJB+#3?6PnITRm@jV/N?92?$ljIF*>U.3HXd/FC+CiE&i%1%)0Es?7Zg%SA5W>Nkj\Pnrc@;77@>!Q9HK@q9VCG1E\@f([+V2FJ?Y=6?l*1J@_*6i5F(6.@A8^[E]Z2C.GD`Tgds%$p"u?cMUHrl%Mk7"o@MK*c;o$B%*T#)GPj4fo[ligufT8)!e`W@q<&!%d__f"jeVhi%;ck#?d!ePW#Kr$RNDJ2VktZEnH`j*)hRcFk^s:"D8EX:D%jgg97<+OFI;ap/>3MNe8"Bu5Q<VPnR,>3EXP;F+%4qo9jBcQd;-?'ojq@<`9aVDKqS/=<?/L1sLY[k4l69uf:&f7"S\>n?^Zs8R8%hZmVb6U:i2,aH/'.Rdr_-+%BTr[<@G\U2Zb=o%JSkK.shV;/i=)a9h=C1mUDj&,.nag<gP&Bm1oGF[(I8(mTdXI-]f"HG:YD<OOO%[83h@E0J)lk9ETS@41;.WEm4.^]IYHO\44*H$hii,Z5_0I*_?Y0,$OI<HN!0GYANnK&\8,?$`-!lI(EKA!JI9WCIAE+&N0E>CI)p%LcUoJr`Ylu1K(^KUU"2a7Z#FT9ibE#'UcI[q0,94Z<i8Tnj.TieIc1?5#&C[N:f4=Ta/R=fe]+!f8KW)VsVRlRA@EqPFI)/hh6nN%<5uskbIJutoVgbj]LO'8PQr'jT#0'e&3%<d11Tcig[Ec(46smDp*-R$`?)T?#]Q0?mJ+Rr`0p$<;(e4ldX-]iV5+l&eCqqW\"lcR%."$c;E)Cdi1cfrZ`eNm&K]r=fTUtK)k7*4Rj^4`<Khhb1<lIfuAnH.^:B9j'Ph[M^-pBf>a*$/nLVn/dg7:c[hNpF7K4>eHMZ:!r%=Rfhr=>DubFRK>HmB64pbT+fcL'0W6d*8[feu=``.1*R26k77KT_7E/M9W9R7YI\2H*;4Ynp=oQh&_ufh+3T#"H>ipA9J4MaS7cS%]JhhhO,Q-1PatG+]1CkBfc<Ka&QCJ@Js=*Rj0,0&;h@$um?'sd8OFHN,D3VYp9upe`5EqaFQL0U"hS0*Sq"j.$n60AEZbm8rN%7>%Q0#\cH)P`*Z?R"9\pch-0dJJ1pVL/rr^`<-<XT2$7&cra9.*1Q_pF]]L)q84]>E8DJ3ku=/D@_s%4KagYAWQF_jYohFjik5Ct(;$%`CK5?MB51(%$N_%>"O(G:=,TSFhp>V@ppJ0V.>8QhL$.o+0PY8q?G&sMqgrDBg*NF12J^\msMWuGnrd0_mt%.^5TRQZUZ51iVLbh%*AAQf4BldSq/F$XjXB]Y>chr6</h%VE/Dma)(H^\A7#77k=2!Qk<GZraW2:G>DMCH%A-dai[sEWOLJF7jg)hIL5h&^3<)Dl;+tN(%N%[$sgYFqlEG@b44$[8JCil[i@9BqJ&-up)aV4,KcU]h%0U<m1DXQgA;Ui`@\LuSZeo/J_C0kt47EG,+*YXZT).#^7d/F]WHKHsl%\47Lt;8gUH'q0O+Ud[852NHEb@P.<#`X="O%@C]7(4.<9-!<E.9D%dHI!/#rMf7go2hD6<Ld)N^YK61JOhfpg&,("]bj7[*%gu=^%Hj4^a^0%[C.eN`e7UR2XlhbAS\;\q[pg[tUkl;U#Q1=$6LI$D-WL'C%8A4mA77JcX15_#ibSM3e7OltFHq#U:'$Nn+3X30>rmkYI%II.DE5]572bfIO-(IOMI<P2ZhH*lrmWGl9DD"O]GOn1?V<&j=dp`tUkTW)nh(`RTI>XH&CaAfZKi_BrH$J-")0jlJ9]OE;M<aWma%Y4Qo^Hm'%D&_n8g5Hc]h/.1arUbW8MCp:35-Zqks"Stl-L<>6k:Pp"\*AJPIQdgA'JPt-`S?FiepF@K,_fInW$R`K(@&I^EGFeE_%D[`Z0!IAC&`[ukaORP9'$Sp=ohR@59Q,hn&lVFKr:Mr:Zcdn+L)nF79TmX:d?IO&Z`LBb@,JS)cm1qUd0878TD@\BD3,L^n-rUNM%@(FV*T8aSLGIB8M)gudsokWgEmnr^)].Lc;*Jj,rTi(c:0!d=aLe;j&MTN)<O-a3piW9E3]:Ee.B@u1>g6JU+T40VC[ME_RdGTFb%9Cm#0d9s7!?8_-,C+(EZZ2=<.if`-YCh0=4/'D9s)0X$<`4,8X(R\]UI2eMsp(`p&f/Pi"CXfnUDnl/J)O4`4NQWXGFVW_Gl0rjh%Yf22"Suf!9O&:o9l67NVY.T&V`p%k"AG3o6/gmYr]A&B"LTU&na(&/5Mp?_q6ksh[DY^1G'W5q`WGMpg[L&#nT<EHmaWF;9iaXlE%M=YBn*TA\r:#bTGqMt#Di\(%fF70ufeb;dY@G3AuQ(tu`/kdCnIH2H)Xs_1eA;FcGnM%ob2idYIbh.:"#/!>VX=>DgT+3Y**V@!\%"Eg+"&VbJ/a'Ade>nZ4IZ/8s3QnAP)a$ZqpX_No4LqI+s0`tlAflUXc%.5GNT1p,f9@n<!b0\g`@1FsR0$_jUdtQo3,s$=WYACf6%rQ7uLdm\9"d:Ui:jg@jR9c%DhKM_6$flTD(J`kJWfD[2(l,%K*_DobYflUYGF)'dhFCD_%mb[9NZK\l.kf]fDU2<De9c'*gkP8OU%Pt`&Q]B$@@Bf98lY3;gjl,(#r')FDQCq?kH$U*0fW,0&L>e5/SBom/BYc:TL<n9@%0&[</OP+`lWfZ41Ks>lnYYU3(aJMUjZ!js&%_K+nnmb9.rl,%K*_JdR9-CZWhK'o.k@C,2$[(*^o;)okRB@DS!cDf`QA4("YL#pbU\6!d&Cq?hgME.GY^hc&O\5"Y^1:o:S*=:25%U3GH!c)(jf;".0U^9[#$?&C?:@kps\#%5N4l^s`D7lU+FP'2.W;jf0Q$SZb]rpI2H7J->cY:a(l)"i<"M=41&H!ak*S@-Z?Zp,%D%:coISnVTd0M)m@m\bQmQqX'H@o-_)K/noWEpD('_RDM,Ve5HGTS8oCoWT[09rjmdK-/SY>`\RK.dCR!F%_0[38\5k%qq^d48_d_P%>]U_+PBTN?0_j7;&7Yg_,K=&2Qe6L:e2;I<HAT8t/od=Xe2;IK`?u1Bc!B7lJFJKbqK'9&>]\NoVMU*_Kta_#F(AkK7<cSmUYaVX%,s<'I\Mpm.:0g)N1Of-TDuem(K$9rg6D_<)2bY2TVdpY"lKllSFHM]@IDf;f,2HWu7=d#8bg763HXS';rF_tch/l:G2n^!008M1E%N`<ehU*Q+:q*[V\'@XdV,!7\>50u48Ia?U8=3uC60L;d11jC+i:f(;h=QDlt:f(;XM!k'5EoMHkaaEILN_,SWK(TPC;bON;OVc7o%'@mg;7+KmPM5.Rod^^`FUkuLW_4V+G2rV,-W`&r'WY#+],el*+`X28q#rD211_CV9GErf*U*1DK6?o*&fsu!Y*cpiU58t`4rA9,M%Pi0*m+m1=#:1\sup>`J'qRF?Q*ZZW\,jof-T<#^;Qhd"*OWj^a+fo>/>B@'8;4J97Y*4cBik=RJhY$Z1@6^+,Fl/B"S''*%,/ZO8%IK)(8(sOfEgi,2sIUt`&h!nF>Qf1JQ\79k$d<FC=ZOEUI\EbsBEPQsrOIPfq?\ViFg^S7%?6?UtlqMcQbHT;3mb$nkd3jYBW%=<!%&TP]oYGdqDM7&]?iCuo>f\Q9UC/.jugW1"Cn%OF`!"=,L>2ic7j"hbf7Z`rH[:G&R\Y=CrfMJQCoaGCq3S^nj\7X[sG'7.t>`<.l%q<^g2$XLqpBdT48*"pkiBGk.LQ,FC%L%Ar14[^c`M3F=^)[r'FU9=gfCV'nR$@6d)0UD?EF0$q7Wf6XUqCu#HE-,>/]CIFc)H0lR%dpjn+c;H1kjg\XiT>X..e^:C*aDm'$.b1G+(j-p-+Zk(ASV'PIpMG"4Y1Jdt2Qf604NI-+s.cQfcagV.c#o)m9mIu+E@k^BOW-9Z%9NPe&3NcXr(m,N[eYV[iLp0f&\F,K+J8cG#9cQeC&ffF41Z#QAc\e?8@5GB>=e)GYSefr@:X<&\:\+d<gH&rWI91XS=(Q\p]Z:3d%3HdiM3T#7!G_bT4@\^Yb\G!k[os*_\o&%?n<4KUOjMM:L8^V6sXe2L;3O2M]/BpUprYZB5k/lu'BYF6U[dKk'%`cae27h2;M4=*%%UVuu!He<M5ZYr_8Yg(1`VB,!Mq/G_8F/gP)>-!3*a4ZmRgKI![g2-,8F-U.q+%<->#i8cGNbHq0aCp@JVl5!Qa-]?*-4SjY$!q`J%CZ6\8;/=pQ=rD/K,g[rt]5["Ymio?j;X(j\T@HM\]&8%t.@<>@X1:JUL9^00C-bHgU\$CPPYY*c0XfKpPWUZ,UV><2;%)f89o/!a%`0a?;a^>DW-NU4CXFE1-Qo&V7_(B9"nYo5g*g2WO+/\WGq[BTamSY2bY"^md-#%*m]Dl"(E#kh!TpmU?.Psd*ja+d7a<#Rem1Fl7%4=`!LBN<K^ZlUrj8a+9q9&0"&&_#JblRlV1Q=F(9FK-idX8aeL(?\YlY;iYo/qnY/#?WX=QmaQCRuj*d!plq/[l3D^=/DU=bhRMu%\p"d')"u$$Mr`03hu.Z1fHV(Wbl!IY0I(Ni5En8nIpi:Y?O+S>qo;=(fWorSO_6]J%&---S';(kd&%EuAl,NSN09)*NT)3L,Jagi%IYZ`MNe&gDcpk1&qf`67q=uc(/k41Pb7RQ"GPh454aG-;;pi=k:0mY%>.ni-9q4at'mIf'mkZ/8WIV\S[a<\:Mc=uXlC$P$1m?$&%o<JO`S9#74h%k2iC'&8-f;[tAr<.t-U3@;*qDgR1<)3Ib,44q0S-mpGdOS@`E6Cp[Ab#L5p["65Oc#EHheYF=+M7=tLT7FW/l+\K%l`kNa+3&Wn>kU%rII/X"@pS?9OiD3E2sL_?AUl>IUcEt><S;R3@!<^0Er^XBGi)YS0g!_'r5jf$!0cOFp:Pr>Wf"N.e-h7j8t6'P%1^>`4SDL&EJ4]8K-7b9m!@H%l9OK*cA-"%%!UR)g(7tc?_0XQnWo0_$/4S$RGjl5Kb1Di?HXpt>]9KMN8JIr1P`KgOSU^E4^;,.g%s3RTi&bdN2penhT]PrL1aqm05m@UqRcR6^2YtOmZ25R*n11G?<l:p`RU&)CQYJ7E;#//VaA5V0lq@.g1<8_)tpu'+4=jMrnonsjE%bj]UE];%A*.abqY4jSj$ah</n\,,c[?TCM,6qC)45kk,/.I>onIXt_I7M%BrG,sLCR9]\\.n4/lolmTHr2kE8hd=Looc)1pRIjh#%poHPlAH_c(`Q.9lMbrehY@#`Ub2Md]o<!eNN1!L7*oL?h06&X=d)G6ZrS6]T5EerIBd65okI::6nFJ$=f.UIa-&mNEFg#0CqtPok%H&oVgDkR"&qA+A8p[J^!!khc"hAs4<e]5@P]t*5Qme)K6:LP=>iU?Gt%k8-/16RC%f<5RI^0CPFk=+%&l#j1:r2kG,)+4A[lPH`7%p<#uH9mS1RPp=J!#f"onn$O6WY@"p\&:,GU!;H>De?[G:pA;VV0><_np[KQDf.[,(^R.0urph,1EOYcV*ui&0IdsoDV)&!#_ruIG%qTMPN=dHI?X'\agf'?YWiO&-Np\H2HO)Of?rShbglgI$O6'kC:5/'>Op%-cJ4Q\:Z1St+urPG(=I@[=#k[)#KK::)n*l5O=n[JAf%Y[3M@_oLX!-eqrhe@g<ZS_>pi]mbNS`5$iQi:ld7j3<IpO)Of(G^c^NYVB5)]m^R]C`ZEj,?9K4f.Y8!l,2EE([ouHhoRbN]maDS%A"Ke;,/jbtf.YusB9C*Lhs2(s[KfmqT_J;:@4Yh4A0:RB-+#1X][nf6o\e*jqK46A^0CQk<ee9=c^i_8>Q'6(k(gP"00UO;e]ZT>%GctKPNfARoU$hUFpFGHt**@t&h!5ck\^9AYTZ$U$`S]t$cKuMK?9b>\i<cc*:V?_6;K<qti?hG^YT2Nk,_qbiD7t.aW(=/V4\R6m%^AFM?OMo*<4Y`IO5-20BVSI8`b/Tp>nOp-bCr8W!PWPl`mN`nNCsi3)X/32\a$?`mNm6H&:.i't:QlO0I&aHnK=.8O1fGL>^"bM'%[Iq7<#)q+#m9f$t1Q,VHe!o6ade;F(IcC6;dho]t]W1JgBk,Rpr[CP^*.=IChk/N0VOl=EXFp(DFt_Sge+^>YVp1FOoC^_a"68tN%XEpgp?d)K!:L<0r[GmhKZ]i(%k&[N1En.+kcd]]Oc0n>AUM_'3>op.E:T?3T7csI4cHbe&qo#Vf\>q70e5BoAgA0Fd`E7<_@:MuV%qnAG);5Z@Ko&ef+<;uj%.r?/&-`ts`4k".MQ`sfM'+`*(>CX@MG#JFfk#ZV^QW\Ig*d?&hro@8M]*;S"B2=3LqYIKjQZ)R>mJP/2%-F1bBVE6GUTB+=^S=.Q=m-fZPMpMLBm7aoklJu(68De&0e(*K8Mjq&\aa,HBo.m.UDa+oCf<JE$-/E^,6cXWkRbAq)Wu]\=-ZL\E%5!-qYPLW`b*B3m'HS_mR?tdRaca1dma\5_BpKI]'$cBoOOX^2BDp$T\\j!H>^NFR.*#;l$2fbISh2P\:Fh)<aHleV,2q/'t>CC@h%G&_Ykb2g$kZ"L#uinLGu?(a2&c[VCNb]s)jZ+N<PU/C$e)Z/q"hW<kZI-KX*)o'4.O)%llg0J)UrL/2k,0NR#F_3<CiN_Fqa>lCF%m<k+1aEJ%P1$e>XS>3`(?oU5Bppmt$5=(1_[btdAlb$9DPtT8N"k@K`o>QF-:O-Q!B1H9qIXb%&S<!$^MN@+!`I0En51lKWE??`h%%j&rpq]I7MBGTHX<b11:f&epR(EC_WYk+8qVsrYspu"knFWY/YIRAC-E^N0U0I^onQ;s+FLGCXtEa.]6U'"4kl.C]N8kt[m5V&5o%\A/]$]X-hKrm)Qs8&tL0.RJ^UnFK%Gmb?&CI(\Ib.tsOg3N'$P!PMssb3WY^Q;?B1%a>$];NR5jUXr"=C.6sc<,9&@0`/KODNp2?%CY".b=;u%r;dZ=LEK=QoW!D[(W:hLgJ$iQ@)0K#-/pYtckGq70r;"k5;rQQfCZ`t6oh1MR[^(0?pJ?=/^"lV!?`lS_Gr\ed&dLS1%\Oe27\c9=Wi3%\>&97CO?mfasTHe!5IB/<6/CHIBs61O#[X"WcUU[j8mXJ8\kaOVIIs%E92][f-de^j^50lN?*T*#g#-DTc"Eim?%fXK"6@?jX1B16feo*c(uY<*9O1hWfCkjDQEeb/Mh`oB3b87TZa@PLqeR9Fp;:S3tT9%oo?Utr/R?egZQ+&fo@!G-aLUrpu"%XX"R%Q_uQNaU>R>c_*V>4)ZUb5jb!n;1H78(cPgV[GpXKqeTbRrCY9%>tG\1Fht7'9Ehr&bKTh@Q:psBNLA5Vk/$KJCorC]',]Jn,q40V%`[uhp%8X=,lcdm1[s<MgF2i@q3R:aYk1'Pb^<c=cmUQ0>MTrjlPAQXm5/1soOEf6meb(,3=TP2?;K=R$E<C\Cblb$AZ\Am-_4B+<%GiM+W=I+%h%(OF-KZRF/=nF@`k5lT7.G'cj9qa'@f-N984P6.>R+H8%6)m/[9FnYgC?&6!-tJdZbA/'8.+"DD!G8aJPEYY%4iI%8%T%`78T2KZQV'/-u,MApI#<"SYc#0Z/3TE2kVtn:lho&rr1ZEA928@[H6M9p]50SrP<2T0WRBLYN[WNeD%HK_Hj&ZHnU3@^A:XJ$-%,*jH234ue(knmp:LH"qZr(D285;pOtPk$!p3P0=A1q%AnYVW_TRm%^Zs"uuo:J]"HoBI6C]T+Q`>]#PH[TX&K$Y)u]8/<!_&TdgQ%pt4jo$=80f5j>HLmAc)f(i-KUW]ZP12sT;2Vi?W!PO&/"nt2?0cE4@@5Q-ufLIG.e]#=U8WGK->9Of6US%tIectMC54Oo&WY.ch5%gTBf4j21LXroe315CZ_`-B#Wg[80?bC6.1H(T#_W]ndM0]pU"n5q0MfXo"*JUb2Trrgmk"/?+?_1CX3C0ecjoa>!e"\"L`>/SOYt%(#a?*1cs0:+7!lBa0i@sH77$5>*@Afei/YM2ssV4E`(G\qEQpGHtW3(Z84/`[druK\$:>Tr`IC94LGO2=6n0=ORAfIc*t]M@4;.'%Bl*27EN[gQ\RL?*J:<:ZD!lcBK/1T1_U\$I8l%#*T56'DWZR_&1Gcd<gW(E,`cjV50CF49[*-FW]ZI9)XnVpUpS>]-j`FPXc@69\%e$7O0c6&&7oqc$>LfsVC)@MqhI17/E\Y#Sm#+h@3kVeXc6VfK,p#WS1;)VLi(V;J%6rQ(*NQt6oXGe`Y2trGom\@n:#7hSSa?38=%(1oLUe';e_N%J4k&#me*lphMPC]2j*^+Ed`FmRVRc_BlLYm6RUb^Q;*4q*pkW5@n.m&f]?+$4+FV'k<e4n2u'R);<$G\GsrSD+]=%i2"7Z6GqR;XWQ[UR<r^^]&PDtS`Gke"#IQVA1)p=]\8OO25%3_fm3^s%[p;Q;S7Js:-/F=Q'O_3fJ(2h6jN1.9T87cL'nnNOd_?X%2Q$dr3HE>L;Clp$%7t%PpZ(qSIeX7+jug\PB?]n:&UL^dR?\I?h6%:[$Vb=[s75K[>[3oQGOl3%V.m1*3qm$l4WSG<5&2d;>5-?5%HL:N:ZM7?Y52+)c3g6%/LWX>aT$Z*3p>j>2iI5u[HhliAD'>1tb\F6fAU8cB/)VLj%eIijYuk0":,o0(OYJrF0$Sn$]][Tn/mHM!%]CcK*++#r][nl]jQ-+3WFRqQmc;2n%jri-_0;+&mJ7U;#pdUg]jiL*@,JNVc"p"IQLHAB\5eckg-ea@Rbd%6f]i9mBm)gX<acE!>%H"2-oo-B_66]Lr-Ln<=!.PnHkR"1f-X?n,a4c&02g=,L*J)kR`peH_6d7U[X1o9SWhDSX10U@jb&+M6L1B#r6rU\WjdLq>tc!r@V%fgL3`IdIY+nM,8!P:sQNDY(>)qZ'N^hGT%;q:p*.g?M7+W1b/dN^="**,ki_mE5)\F6W]!^]rb+Cr"*6-4#Kc6i+@!ZIi:\$*prL%K'.6*,M-)UbAZ_0=V*M.VsmV7024<]9>u`h6i'=696(5e@gQSR_j[V,G+2IF%+fML@n\]eL!@s.qHYgk::K7PCI#-'n&gu'P)[Gs%p-a$F_Z^P!S.%Ae](2"Rmu.:ET#rV8(Tgl"B;"/EQhMhbGK$\dePG*Ql8K0Bj@c58*_(jXSWQ+tC]>ZOb)F[V(>1IpPEX>g5`7.X%l"bPR38=d'2?]"n%6'$]_NrdbI&rCj2;mJOTs:i`2;mJ'nRL0[r0T_HP[7TCSg`gN3uja)RFrFHYA*+'Ku_eNr&HpKnG_Sl4a;al%DmG>I]q_jcVr&8-W0FM+Znf)"CL;G6^JVTA>ceL;f+EAa_j$WiB%29e5s6JV2HSo:r'Ue"?TG']3hVHp&jJh;^gZqHI=\.J@aKQA%a;*B0o0%N+"2"M#I<o<$=C2c'Q?\WH5J$7##jXA)PkYK3YT`/XI[GTnQIO.P@/dEWZW01nf<31?.GNlIAu)OAAuW!of\YqAHD^0d%Fuu0maETFjo.(p&-.?8l<3f,/!1Qu[Y'(0@k']+Y\++8ELX/g+TDitYHT$#(E@smHCp\*qA,Ts+/q8'Dk96Oa7,Q.JA+4>\Jbe=/%-YP8MA+BIbDu&taB5OfAY>tQI=P`TYlBs<7a&_Z"8?0gV2N5=r2]DT]'2R(PnM("(`![WLIrOC]g/5T^UD$GPNd'1SUD*+_o),g-%:X_MS*a_,Fn#cP<EoLfe0o"a2STpTHoY?N(ijiOU=e?5C:O+\a/:u$(h8bn"iE?_""LC9iP+1HHTD"d>8mh$NXYCZ\kX810N140;%/\O3&n]R0L'M6`<]h;.a.YY3A9t\H(TG-5&c[f$6;^PVcch$\9TS$"q.(d>%#WB,;rT.4\kIs$+\Fk/"\q?pQ7QFS)\o[1;EQY<>%M+E.1$@ZIs^ZELMAbKog`3b.7H0aE`699Wsae>!g3=c!-T?"`S0*q3Xb<Wp!e*TWm,sHAhQZElc$[=qAGK10]G+Y!`6XjJY0AY`n%'AlMKcC/(BSKD<2a77!Rs0AC;DdKTd)S$IgVf-EYh[6FTIHGhGjA)k:CKhY/n)m<rL4cb'0l1rjTi,[`:-%WtY'%#t]\[mXVgGM0%L4b-g<Brl_AaIN)JsQ"iJA(am:@+f-EYo.@m8Ff)G9.*aQ0"Xm,8UZ;CShjkOl2ouh=ri`_bj655OtLUWU3/BnRfh[.HuZl4Qrol%Bn(2IcUG\DI<PP7H%6CWHL]najIChALtFidj@E*rA<@@.NXhfI@%-UeenaC7QZ+>(IGu^Z>(e@<<'YW'=9Z</W1PPk(!u%`rq4(h%-0^<&1l/:0rqdi),u':C3RBJ4.F]NaRP:%@(s$j*"87:crb6N'rlbg=<:Noo)!b>DN(B9IX#kKAcd4k]9:#`\+]@E0*+h[99<jAM%'JVsSl!Q'R$F(,X.Qj_iT$I#*cT9?8X(![pX?rT'5mVhWUIlBH?r_GN)1r0,A[&T"<J=)4dWY0QftB8GmOpNb&YE#dgN<==I30l(%ON(a!24K-f+cXHA&OBnul$QO-Z,'K=Cf8RAd9(T-!f[XG%$AO6*(CX%L%^)F=KiSJ,kBT0na74^K@55<="kHKI"Fa]MMX?S.[0QL%.$<[*n@nZ]LfEV87#46kR>j4&,0)LB!8A,3o%]lNR7sdKT5'CUB'r*GN\rrFEd9"N9YL#WUQ`!)gi2i":7LgkgY3VaQTWG%'9Vci%2\@K/5Om*d)?0#!'f-f<n_OC`nb;Z7>.iV]r9)K:C5(E#r9(f6X8%+We8_d_FsK!mk?c@K>;Kp*#Ln7qNj;0Uo>2^qF)7t_kWKJ5%hUZjjh?.n@q(;%t#\4l/^ZF&3S-KdK[oHNA*XF?9m:;?LkC>_N;+;M-o05I(EeF\7bfec,-YP^A@VMKCM,WE_o@lBR*I]Roqs@tC%>iIQLE6r"g9eVF*BRKd$OXESH=l7%%q^(hmI[sEFGlR!M"Jo\h7BgU^dGeB[E":0H/66>*I:LrQ$Ckq`Z>Xg[j-S[#`P%hI;_K5Q%/TG,!R!0n(VD>bh?4hQWK@f^1J(<r2VVX>)XDZkO=E"#aT?3/Bc0I)rYFWd#@rBkoErYa8i?Y!YW"'E3Bu2!Nl_^/hHc[[4.K1fi%V088JnrYT!mcXIMr$K&=OQ`$qjOM%aWr#M#<Krfa%/>+cCOCLY,Pl>!:0QP7jF.c*JFU&\2h1Hh'm&8sVrHkb?OWQVF>kr'&@Z.a%VjYtb4o;Ig/6trp$fOWP1]41U2B_I@NQ!tKD,%dkHB"q'ZU]i&Hhb+b6o4^HG/#J8\UugM@9Q3?I[-NXXp_4&ESd-9QV.Q"Q8bk[%=0%gbCQ.4_pPUC^Q60`WA#bLVOs2^N'ES18$Rq"O^u!kSnS(acrAt"H/]n`>l&U&qX"R9H<9%e,C$+/Y1E285'gj<i",lJs-_a\'%:!Q4Z-f+Xfi-#X=qu*a=(ITr@^t`t+VdNC_o"_qa\&7r&FWIt*AOF>7"<HEAZSl,Cq_QA@b#uZA`E+^t(jO-M/5Gp?*DljiZ"/U$%Xn*D<<mKII4CsY]oZ&m")9QBRo46&dcgfN-XWr[)PK3`,!]_;TnD=/Zf2AJW)/2aQb]N:6VcIXT[6EG2lKO#PE[mF5Olc32CST[b%<mRfGm1^Km5@;re-bYbij\H7G4-j3S^,0/sBt=jLIkh0L"qshg@4*,CiJRqK4J;K(hYQ$!3*E?tInSC/_.\C&FaKDE-p`EQ?i+):%q*GJX+7C$^O<'hj=ZXN\T]4UuFJ,:+$pB)3nB0T)?T0Kn:Z[=VWCjARqVpI_CTGeWL$%@^`h)!mZaNpfZfT2dG#<#1h+5MSo(?.2%28AuSm^L+PV;<pKiplNP<2_6>*7]#0(HBk&fOWCPYrjCam:&2r+cD;0#O=\tl.l#$$iPJ(s/uq1qpYXMJs^p:jc29%c)D*lS\YuO%O3<bG4m+OsjBWNRIg^MC&PVT^;2u[TY^,n)#sZaIG$Y841>qq.boN='U1?<SpCm]b"S#0;l[99u:JNELRXNMXJ+m'NY,$P/Q%;-M%$R;b#[sKsDC]1Q@/Pr)uVQ4@KS_)CHk>6pag!p3>;;J37:2od8Y%YZQ%0Cf<+0cIs\-N!.4Qd\\OaFg*jQHK4=nm.jF7Jr$TWHg.%$I%%A7<Q>XC/bA/g<YsOG&.7%*<na3Er=b>>KQ^7+:GOUXA#hdY;o*0]W/j%%1ct6,<L\?l/4Y`-jsBOU8'Hc5;g/,j+oh\K,p`K%SVkh*b.<SHE)Pp_8Fi(Z0a$;_ZLdJ64':KrkOs-!B`'83Ys3QtU-(BH[VT8$NZXLX%PkJ;U/g7\9743]dl@F1:QTV*FPHu9GSJ*g%dSrT]8sc%)(E9p1>]JWO[2%k<S)uaPgHb!cn6gCp$XB?d$&>h'eWeP`MG!n`$=9:WYG0I[RR.Xt:IV+022,oGor"b\X/:+H;MLa*%,\jtt-YEXKB&=2*)hIB8htAfk`s_]_G6@7WY_S"<=g<j<O&DX&q823=8_@dJZ*./I]8WECj(msbc;nFb0!NmY*\Wkn@$GN-3j.WI%'jP#bkM6J/B&#(6G5fTaNM`!b]l^`rW(nr%atWA)"[#A/SU!a[4?+V0@/'%YPt9]hYE'\GhRP"I:oEQb4!;8HaA:&a<P0>)gekY\%*A5^Z]!hFslbdQ1i>'u;^^_1<p^Q!<$JXMP[q5DT6jZV]Gl\5\/bRd_!q!W]81<9+4ubWpcl3Q#aD2tr_"\`j@;\t._Kt1Q+`?nr%'O1NSpPN2:_sYV,''s_;13)'^ZSMXuBnnU"P[Z/1SbGI"#-;8dBcflE$E[dOY8%XIJ[]>%(`R9.Mg_9SCfSbmLE/i:cj'n/l>IM;%!hp$$&4jF'Q2@c%=2Daif\.[2-!f=7Es&]Q0,S>1=:V[A&5g9DOu+.g@55'FLd$V0d%POhf`\Vn(D!b^,cX*OptCcLL=Fi/#cU')%6:t`A&[OA2'W2"B_HU:4nZBJk!+WQ"YN05">s@Bsb?p.1``s,X#of."A%@::&X/+sO<n&*YrFM`,pAAk4tqrg+HbNuOQ'.%KZV.A%@p#mt;^,p,l&*fd^&,#CZbLf_QtKF+eo]GDKeb42;&0:k*8QP*5"$&aTF[V^%e_).,Xj,5Eg+WS`42'2\;hu"aijsACno7fo5j`>%]P."V?-Y.1^bZKo%neG.pc>G+\TN5k\YqW.^Fmkn:<jX(IJ]T%7:sZ@lf[;MioRQ-c^C/t4(d]l6>$,+#8Y``mQgirQi4R8=4nIp%lK$+1'DXf<7Xj!7F"L4nUOb3,Ka3<jHcYKDGf]0e\a1BC\gQj%i,oBFX1ng"f6_.MEp)7AR!"^aYl!JKq6>_7q6=<a\U.,-iq]i`%bpA2ei9G1s*D1-TDqipbBfoq_>5@t;j4=0ESeZNgb"0Xh(0uoFP3$lf/B`5BN<7]%$X5oN?@LQk+onh?jlTTe:2ql3]1t\)P:NuZ%P)G^6Ck<*Eig0QqW%Q,DCQ>%K#2.GaRr[IF8n)=TDPFg"J%j\nf$:\@]QsN<_`&EN:<+@ShlZ(PHLf-MRJhF0oT&CR>S-WA[o[S:%?Y9*LilqsSC>aq=3r`5B=897sgBVnR5\[[taM00B3`_pFK0tmDRglIh-;21Ob%#:\*Ug$krg`JhT4Y93C:b(+R8;#0J(t9tE-A9@%QD_p2Jro%*ZS1Y"cke\"1DAE7<AQj$Y4Lg?a&`##Ej"rg"S<Jnr*-GcDKF[8]]@%551l@"_V'@J=;ub3T:F_3Q_#!P/tG!cW!CUD%Fn[FVEIqrdq5J$PO6d#"aR`?DUK'g'JnjBBWN")I:Jd$558C[+h%Na,s7]]3);<o/ji:9t<SSWhAMO6GX`f/^=?qAkXM0,4pFC_p%>:DSWrfc8)r&!fJXB91*fAVLFd/E.W%$aQ1Zfum7S/ubI<i>`_deRS+/$6S89*i*ifK\7BVO,`4lm%a#:<u1DUdlgBO(NB-ne$3C%R$,mCq#BVDWLq[!r$S>%;Grt^pR.1hB;!&tn7*9KquP/od^#*$8Di8skuW9.,c++Ff$[5JD&@"g="QH2Pu;`f!8A;tRc;3>G9'd;%UqZfWDs6$gFn$_'AT^'dAJIe5hX./hoRGdF/#udLS2PJ:8Q2i,!4,[(#FLX]<-Sd$\$Lsc6KPeDeLXWnX0RttF]j:XTOqJ0!2="(%=k<pg)jZqA8ZB"a2(T%q-"g3cAk&&nX<pM88iO)RA>c\gW>cUq_,)DF^F%-]$KJId>I$ktYZX?BZaqL$D`t.g*+3IX/HZni%"an9%KO(k`U)I!lAn1-\%MQF.NQJc2ctbO=c%dfbcm)!$8f!@)#GP=N'NK]J8eN)EA?.OD7H_S=mAqm*B2up$aq[s@%&6O,)+3!64WW\,%@'=9p2lKp_/6fR*b*]V/]p8\_!&:gCDITfWXCW@C(8+r5)$o@*W`Gg3VQE`b.MP4"WR4Zp=\[HQ,H@86ADNt$BrV5Z;cOq@4u<@T%5uk=oWUa2U$qmAI?m(25da0Nf.9/7!CUQS&-kbGM9'E:N;I_&59@X%NZ::cnFG5Shcu1gRL^^6#[M=JrWauk3<BI8HLb]s_NHCut%Tua6/j0G=IK%RBSRPJ<#i&)d,feB?hcuH!(;'dGJ?l4W7j(m"1"lD\'XjY"X:.<P=Jsh@MV<k9/WA]m6">c[i16Q@X-)&+=H4S&7%0RD5Z(#K,YeL`[?c(lDr\1NsV%gE$;ku-)q/4P^dfh_t>PU(S"cH:l:!(N[7)D(&n+a",s%@8E)UO`\Ng!X=,!C3pqgD=6%+GH28%o-+3M+Z8YbhG]c?HKnSS:=%.]Y:`c:aMIpOnBVgE(]8PQ)8)&l[rq;8YAde_`m_MD<@t#\mTt4@<X)T_X.(mkW(!uu6NGS/,$gj3%$`F54P@^+33=(c_c$PY*<8/0r21euBAC.B77=5AdK?Pft`Q6\uL/cCuN-j4rYrJY?#*`X85(KZsr$=d?ge.`5ap[I2,uZ8PaU$:9%POVCP@K8iK3A43=\j@nQ85fT8:a;?>(lZT_Q$>)M<$Zir<Mj?V5[=:SO9-@RX@s/EObZ%1@Eqj2]:'m!R#1_@l;rQ2qB;0(GlT`h%e[01u&.DRY)&+5PE."k"!qCD)1+e!bi(`950!%P8e)D&G#nW*">E0!)W?ciC.Ss-6@@J<=CTMiBBMD?L:K9SgI!.cr!;H-3+jdfo%/&F],,VTqc#>e-GIU7h@M=Yt'/.`oEUck^[enK-/7C62'Tmi7#^uMba7e-_o@Y6`6jbMM=Z6=lT$,b/m.Nl%u6NDZY47^mUF^lZQ%9qX5s-LkebN33R\Vmdp@Tce#"Mr"LPE&F2+1^R_'[Urr2aJo4\,[h-\j`8J/M8o[V&KgRc&uQp=dfTR`=9X2tOB$n#3g\]hN0K)/%lk;_<qW@kP)XpEf/0m:i%B*!rTc#mC@Z\*g._D,N'!RD>$./qg?'d)T:5USY'S/6pI414L,iX.`]LRhcY^]s=KPB1M9n7%Q2u%/B%K0%6`:npaUZ6YFo$G>+ID_aleh&@?L/4gXN_$gnJ,#s^)n"Q!I;%Jb_A6[pUqdM6I^UV]W6d_8LG?,VI'\T\l&48@D66Hki!>*J?%9"4m*;W^u1,W6JDFe-3ZWD'_HD,bWXT^*@D@bWB-(?g=d[78i4==IB.)?0n1DNd9((H.%&Xj&O.Z&fIT?=D+3=<hQo0]BZ7RSGC>%@$W-DhL!%i'U75c(YsUS#:@nn6Z"<p&-1B!nHfE:\g1ND#d=`+$n,RUln'>SQ!+;'1JPm@<>ZLP8O\&(^p2>l&#(b3=_-gudnI[K%AsIMg<$gA\]_bqkPned/5`__qrn.NrB%X]IWWl-ajMk.gjd[.!cYs0\9k1Mj,fco?%?9=Mf=8i%Bf]>B8V[M1WGsa.KZu\9C7u1=%$ruJJ[RP2g#3g7c=u4[B_-+9u;4nKF<5j;RCS:Q^&6*"*Ti`G=0ZbkTMK9CP7YC#`GdI[d2q\0@MteK`WfYd<HjGEH6=_p.4:!@Y%2MlP]!^-R4?:C^4!S%GY1h;CqK%;Ad4p]N0-#5[sKeR-5!H.t%K\h@5!YE]a"A")cGVBbH%p#Ia8=D$@Lh##$!5O?m@R,Gk6e2)C%8;%"VUpYu8]VE+^W(&g/e#=<(653W99J%%\"CPqs56n"U=g%Qc[,uc:SQ3R1"p:NL?uSg^ld8SJ!CY=00(^tG,W'M^3og9Wh#RP'%;&MSdl[`K._[p:0OY/t^P#]I7W.gH@Es>\Z@4h`a,%:iB=:oMlqddm=+5I"B;$,/7+e8aEL=7_[2uO:l[QFOGV+@Kr$@r5Y)R^aI%VZNS%>3ric>;jQKD3Js7Ui;UoZcVtIn5#IA>V]a6";@!c11V"Q1Xm]aeO$4_,^/;7!rt%i5s`<<AF,rV0*F<;dn!/,@h?o9A=nnA%K:sLL"/)ZHN>XXT7oM7fhat+$@CB!_8.*rM/V??2fee*"(boH'MPoH3F(>pbmPRpT[]2cnQ@YV;RMO9::k/!l6A.n8,%ur[KQIFl%SmeC_KJ8Z-,4=J@*sf,f^P[U`+CiSHKoCT,FWt"A6+BDcZsQgU#"SANg!?U^H.*-0'Z>1+RnSW_9N[sRbZ%Xt1We#J0O*O/R#UeS%!5Kkcr;]?C6,3lAA<986PVEl1^I5d:JEXFMH>Tq=5iL[b>!Y_mlE%l/0l0f09oWn0!Vi*QU.Qi/EmeqI#QQP1dT]$';[r_hAFW)s%U=olI!RkV[O_dZ!_R3SX_:R%LArDAiBd=XLNeR8dSf"g@fshaN@L=e=fecNh\.rZt$Eo1E:JdZ=:!8;%S7L+pW?S4-_,<*-5W?5j%@Ceu4Kh2s#JBm=+PUK32?uU6.Bb"K*fiK/IUmc[[R&Z3jZ>MC=3*mGRE7@OH+dR]eCp&QA5ZACS3)a8,k<:hT)(M8,?..Dr&Jr>f%e7=ai)MG<^!]V5Q?Q!LX\9q9*9=m`^#hqVH8eLEL00bE;H[p(19Rt3mXn\+e"2,nemD8Kb(fY6)kq9ioq;Hsf%]Q09==+]M6XZ#:%M;pLZ>KVZhRKNo(<tO9\qPBr=+i7ssdr[rVR/is8Ve?pcAXNUYBd[@a0#VVQd<rl]&Stg)C#!=(q-dqDp]*9N*k"&d76n._7KBYr%"9::oQpS8T_GiT(RRe!+J0NB_6X3COD0:BR6gVcW/K,Ma(K5o#O=2_t?[t_Z"*7gl5dg%6&o:o'-5t.M,LAkiJb8^]R#MSY".^)J%h6Cij6DfDi)'>;]:dInX@<948AQ[H>V)#M?6=bom\;I,VlD62%"_3(&J=NEQJgkUN"Njj15^0XYfR%/P)DWuPi"5OP,ghFai7Ct^%^c5$u5T,Tc_*%#HWPC)&[,;Z<`h9))M\X&aJf$<YB[/rV#i;o(TTU!IA4lt<JSpF,DDi=HID:ZATq;lXNfH,(U\E+SJ-lGuS"Osj%.>,'1%.m=d('8SqRc9'[/3C&7(;[Ma*a_h[e-mTZb<a7%s3\Y,1Pj'.K97&lUnb4B!F7-6<O0j(5R8O.J/j1G8M^\J.HrYP+jn[&%,\bJrO52-`$\iKKenCXoUW0,&"0DR2a:*fM4pYR9&Eq.8fg66UTt03D48,76h?NV,R]9,Z/.!1II6j8sF+tSJ5femRDiM^0('%s>%Dhg6h%$XL`PCX>XSYAdnOn2Ds\6"p^d9s.'grY]+h1IJJ49aA5)&bt%&$9T;2eN6=;Aa+_Yf=b:A1O0,F](r<N/HaLenDAJaVOV,%61;nP9HG_%AlQen84N@m!_gN%ZSAch@8o6bQB!./.KWqU'85bhaJ]diR_+o;CKj-#Rc[2M3Mukq)BN^%J:W,CH\2.OWt))Z?/$d9%1Pl".*^er"N*IVLhst.rQZCr)+LSA`H>R0m8UrRSq>bhsd<>C2(h:oJRUP8s!`$\CeGM#_TQ/h"0OT0l#HJH\<)K,SmkPM#6>T"t%&09,R>RM=*mK+4MZP;(*b37X(-3+b%?nZ6&.FVKTE:P7s%#kRFJ6#DVZq(c/\sPb`g28E;A"'2KdY-I+e8:1lIq5nj/;8Dlp0DB:%8%"1pbD'PPO9-B(JfE#GN2+^l:<;j&iOauhC4dt>W.%1AF[*fTgmgaa&=Iak.g<Gk2;JcD3A%UnrB_gU2Z3M?09e'\[DqL@2;]e_%@uBNgK[.$t>^WgQ<SF]un60<U94a;XauZpY)nlU[i?b73=e%r<C(3OtCNR/p"G-VB(J"g=ZHrpk?ZLCf7sI;4#3!@:r%Qr"!6%/0%2HrI7'tB9\g;0*tAg&6=Le8!Yg/alE+9W)eP7(H_7Y?:k,Kr[qJRC92Wh9r]*6b/72Bu+]p4b&<dAj,`PO9(['<!dPAfepJXH9Yt%ILkG6L-k@.%fNZR"!9d0!l&lsFC*B0"uB)66O3r^%`'b0K^f$P@ILHa5d(mA!:]*(S*/F>QtOuc?+(`30^BKo/eQqcDXi:*P0h*s%&/Jn%iWQV;EmN[HT1"=JI3>*0VQ'B+P*#/%f9euOfh@]>V[Q42'?BtZ'5-@bFs(T./;(mE:s(-U7>QprXc$!_6p;;O@!E(KMdWt_%imq=M!)lTl(D[rTR&MH"A5-Ll%Q1!_]`tpT_/NoK19\hC:H2aD2Xq>fb(M@*'MoKqBI\!=e2f-M0,>@P87t!BPa$L6`"b,Q&]3-X%LZ!NXYaMq%MB"Tl%S:M'#V8m1-ZgdR8;Di3R,32*LMZVBgPj]pYZNnZZAC5"D)*Qh!4!"6KE,5?26PKVFPq>!_T#8X*<g`uT!?fM%%$oM@R$&!KDAQO`Wo],1\H>OU*N%)X0Y@]V/W]ku1]:?SFFQ<$Ombr5IuM%&I'!JK/%4Ppa>1HL]$G>oC$=PF'b6(\<Foi)Rp38[%Bn@%:*mbZZ:*Z]O\d-&c1qE$$Q3.&hZAMU>qj']V#1Y86p&O)ggd<N:_>T%FHEcX$10P`nCb-,<E<.Yab!`G/k!s-)8^WP&L/XJ:%l#DP5JgiHX$(;P(-"eZ_aob0sjMQP!!@sk$CKV^[7PHO0Fl?%dA`f'r@ORP`W!F^`a^IRAHGZ=%8Ki7(5\+(2aqRC3B,f_<X@=mJ%d0(9q>#g1d*u`3fK6f\M38CV<]RLO;OGMq9=H-_".C$TYkkRON=>a>K)&A-;@g]n9q]FT'Ydp_^e,CNq]bsiNU8fDj"]YPO9Fk06%!HaLC<I2o#JHq&]Z[Tb(YmI.'kQ$@%aK?u/#[1a3X"\'p4bbOT:sguP^cM`&d^H)pTIu4>+XU'Bahp5#J49:]erO#<,6H82$"XRr%<^[5#ALf["b]$uU[ME"KP%(Bk#^P2GLtJ.mLuLY/O^n83#&`e3f3B.K`=-WpaloET`5WXEoaqmY>:?9<5U$ej/q!fbD!MCSL'T)R%6rI,'9t'UXcq&g%1s:$bK.oYh-#r::_SArV[HMTcD%Ru9RL;K\WQa3tD3`4/Eee+N-96.\KcnS>8:AskS1#E`k*T8H&(sD`k$LG+%eccgFmM(I^#9>Z99o0bs"eTHjiY,ri-O=YpVD\NrTko'a]BpM<ABC$#&L+N[GWHRVX]$("Vg6\@3YQp..2>!0"JJ(K17aE3T]l2:%MQ[.OWFAN3bZY'*cjKK.paU.>;o#)cE=OaVW&CanNs>_[Z>bH70bUEBAm%`6>>[A?`.JrTmpto!&fmBlX&9VL;E_-d"H^XBh_JaQ%P=u`[6]Bbsh$AU@^Oh&-c-mG_=%_U:>nY.]aukF!,2WjK<'!BVc9DJ<GeTRL1/TL12Fo$.Qe?Q5*a4C-D$D/BCF<p?$W(93L*+2H%,6P/h;AKukP[W=^=>AS.6L<p)f+a94V=EP;5fYEnMWuVN&Y^4lmolSo":)e%R<;dm`DSaXUI#Z.Co`r.ArKStY:()jK8Z!eQooJO%plE^(U0V=H_DZ,]QEsZ8ipL_T5:(\*I&.^lm>R!oU'*iU'^k?D9hf80MXC+X(S@cbQL5p7@3A[7VDAMCRY41:[9Wde6^0F$KZuNb%`k:?A&'gCI*[&X4+ZYE60\uO%Yd(6t`:j$Zglce'%#G\i/sLCNc^d?E7+-#f)rj6[c4e/Bo=66(.@(%aOf=V'c(Y=hU<*FT*#cOH%I%1OBE4`*9BNdiQPA=501DF7k92^$XZ4A-6"2`O'<4(X96+bhe@3A2OVA"e?@[936KlJpT@D'R1Ycr5:9A*[pKt'"N&8JBk^?>.s%,NEp?q_\GS'IDoP''!qI4UU2S8f-V<FC%ZCKJhq,MdESHCgVjhdAs8e>:tji+%1W3@L@V!M!/uQ]0Dk\>lZbARl[6!mM($5X@EQA%a?3qrL'Z"eD8qrNp*(l^:QX\b!>&1V.65)2QIC>^+109E7Y`3^6ENLA(S1t>4(Y#1M!@0p"<)TOmEFUL^oLS,`a`,U2Dgte(i6@F%;@B?hUqTq)HOaNCf(R!bCBlVJ'\jKol)n7!ZX\ojQ63Og^^SD?\aMS`>"F'5G0VL<!B@H(g<9X)S^8YuB;qY=fVCcGKRlZo!JYkD%5SXW\?iV\]#_k):%gD9bq<efg0P;>Z1<URd7/N+(Ne)=2X'Ch8O[bJ_YdefIk:7g&YU\?ncnU7U,O?,%^rDg:(k[R/0h(!HHP3>H%log8N_3?@&)O*WdC+YW!Z>iN1_$hRt?,I7I#&QmK(pn'd0>Y69^h*bZ755uZ8'`NB756J/*1/]PR%CGt#2>7aOG$pq_dm(?X9c0E%kbLKK!5gHYZ/U*Ia9B_\DX(@4K>=aVV,/U_@8\aUQW=sA<(LbTr<,JAFFra4eo$)aV@Wlr0m^c3Ka"5]F0\*;+3[uOZo767A:rN4%YVbdki2iUO%7=2N^(5^GcHY34YGPa4kp9slm:MaNs3oc4m+@UCfmU^8LRMm#TS:WL3ODS+!sTCB#O\io8/Ge=-RD-V[c,!q?>B_d%i5l\u<^D6u\[Z8uhrH,:_2&hr3P6..#dITFVY4k+.os*W_YsY:Eb:O)635=F?Y5f(d4_I]41Z+FYmQ%&)L354Tqi(IA(::k=9o;2%8bD"h.\<NaW(`0qPgabga^#$11s#`:fW-o40O9YLS0+]dKX/AN4ZG]&g[39l0G"e)V:0<e-hh)]V1ucb<;'h8V4`E$#J8C]SN7bs%gpTuJ-YgGiH9s?qfP##s>gtPnIB45@8-*s%_1rL>_[iaCT]MTgRtEaIkJeNOAi/`I\ZEQhHeG<fB^T>s9XeL`bjB5=G-'jCjo+2>%=YXu"/AkTRre&N\gkR<@ZR)S.@D;oH`.:?_CK=c<$Wl'/P7T$XAA'tK-/%G0K-h?1;mmU.T%2)H_^D.R]E,#R/5M2X0ro%8`pXC.%C-qDf!.^N,dP(!%&(VKaXc6Zq*?(Qg!X&Y-1O^uFP-$hbX.^X0(,e)A:iCF/OH!O9)fBK;'XH`/$<Vm9!K+WqkU/^qa$S:nMn?u$%A3L)#;G1l=3jbp/1@]#ne5C9R:R3%g4h:npQ>m<8]GHJF//97GI9hL%<:R1l^rQc9YDB!'bYH&GF\X*F<SbnU/ec3"4<EV>l?VPB%VTsRe)=Y6195_iED_92R(MfYhAJI+Jg.F/,Ilmd4%=^`p_W(gN&O7hk0Q,%ndX`&WEgI!VL,+!uAggG/EX?>+(#KW?#5fh@Sobck%_0uBrfg':Q#AFHrg[R&=!u>f>fXL>0:$6!:]'GL$c/\OHa6t!^;G3s#'gi@6,%t@CGnY^Vp4au"b.7=IckN^<JOa1'E[8!-Br!a-%AY+'.8Wnn>Mt2[SiWVl'($[Ll(H$[GVN*@%"OKfjHL,ns"XQio<E;s':/1QnTg_pBnaonPWL@Q@dFd'B_jRNEaT@#X_X$dN'3Q?]%B3JZtLTkM8n,0h9/E!@AIpNlas(f7i20Y7p\>A!6;Q(M6X4"j*(nVlupK_$0nFCIJ8:kCt&3d;haNlp<d=fU0)&c&+BW%GS1P7>$%J3N+P+BuHZeTI[fd)i4/C*J5a=7N.**H_+N":*cDb4ipK_ma!qOHD.[`2og1pn*fBC>T;G2gFU"#a^WFnZBuui5&*\F&WKP;cV+#%i\BSrIYYk+c[EHp%Wot[)p?AQ]++R1Ebrkr9F'DD3V3"0e`'FRg`BoaOo$pVX77+BVu[@<WLt`[#'p`t#%o8ANJf>+meOIC"AAsi%LD<Y&R>T;E>V705ct:oin.0-ZIdKV2lNQ<NYC,DP8>?[Z(sHTiYTG,Qr.]A)k3If@*>u>>\L2dG==;e+coZo(LbZRcoEA@<h$AhR%>3UdXa=,5=D<Jht(YT6pHTCgH@$tTB/Y(FC$npcG.<68/a?u+O]493O&1Ij-`X_mZH6@).oI,42RYDb+hPi\$FtXXQ<4?C/gFe?A%8`G-d7B7`M#=.iBhjGoXVdafS`Qh(LgB'F')pC3M6enkA$k;*5#_3TiFldKR)Z\Q'deRdYThSfk0e%hj$*b#ITb2H,#b;,QC^7NF%6bBgHO:8A)69<S[f!L4?>!:mAjft=i+_1cLCL41%\odV)-l_Vf/ladfn3ADnFf5s!c_9j^9UJE<)f@B=]HG0>d:J1o/XL.l0lMtS%)f`Q\fKBFN;`j3=c+.`'PQdVKpBDf@'\3J"`S;riTVei`DFacq'do\$Epr4/DK"/qA9->Wg9<#D'8XI;"YM!SKWo'!@63\(n:KX3%36Eo4_+)mNIUQ%*",8pc`Z^<M5BiQ%CrBio]CI<'QQ"^KBVEuDaFLA01!+UI"#*C/cs;f]NJ)%N5#iXX(`QI:CeF:4\[$(`oT.Wt%UqucD`bcm4XT`B?Q0/Gb^4$(@q[`)Vi#fK@qmImUqGd+*"VP5qlB!4QETJu-bD]>BCpqGmV$4>'%'Yl\-5J&XhR3c-L(D3\2f3i=%ViTjd(c2LGKPcG:-'nooOj!RGeTb<7k?Ncn`8Gs2[0q+,RU@5TUN_R%Y`?PPNYd(O%o*_TVkWefTmC5M@IUk=`GCT4'L.*p6ZY48%iAWW-05Vtq%W-8>l,)ZKa!C1ia16;Y1q7hTb8DhZ[ut9.:+J5nK7T@7=bl*HqQe;'_t''=pZg1J+BeTYcu"]XEORbc9rImtAAhEh%*npKs,!<[U'A%Rgqn/u6bnT4r+K6\lD^5(W`A3"9o^`]`VB_5TOaBd#7Jnhp!W2B]a9l/MCs'Ns;#+jV9J,TrT4tkVJ>oa4Rk%j[%8)/7OXZmVc)N.9eE#Z8JHd4n]+UMcH$^".MMm`C\E2L&/3=HO7[ZI4Ie_7(ciaY#Fo;88NbU2jm1D$6!`Br'FqN;kukb#;$$653Z%C'1Bs[dqr]FZ)M_TkV0bh(Aj<OfR5S*Tal@a/#-H&det5824M/AgL2VQPaPF<gk281)=rQ6Dh]E/d5r_ieX&*CCNC3[#jP"0)ff/%&:I(Y)pq4-)M1`g$CMHL:WT1DLA'87n"VSpksHskA.4j7EG6bn?:ctBC$W6f@m6'W^;<=K)XZ+\Nk)_SCsr.3((Z@.16=#Q"$rEN%PD11O''V,3g%Wa"\BH>6#'l.A('d2#<dL9@B`iBBiOe'2BHaFLKs8.DbI<rE2je^_9>H`.IDWJW%Qi2trYDdtc%Sl;H^Ee)X)A=9%Y$HdqGq;Oro/n`U5n3lUjY^06qqY&e:9oCQa9#Jm0nHJrCSKFO_^u,2glhJl\BXY-+"leq7*Cqa#m(OIftd!Ns-e.)jMWjjI;g=l%#Ak>KYd/4>7lN(A@=Y"\H%*p1*H.7YWM[-XC3k<3KLl:t=ke)`V"gU$liFdOW4&rRbIF5.kH_gWUG+W:KH"4.^(4\!HA/&9m+of"%fAPJsAqguYnc7$E=G>@#HBSaNU?,9J"YR$HE)tp@!9\!cp;ou17kWH)M]r]2Ui`BsoS$ojnos#L&'JsWdK>Gt+\uM_Hm]^Kq&!uT%r`jClV6`PN]aT(97=mI5U7!blFm35[S;IOiG`*?+0#B"WO)53'=5&[0.q(E!-=bfH'+EaMi6[l:SGXP+&:fiDCB8P$lmqP!BESA#%)D?D17'7`TNf?RQD#f)op6F!jO^b-@,QE1312[/P&H1<49WVWV$3pWW2'Cd1GPYb9^8V:mLFWL<P"ahOP_MY0U9LbcPBA*s=Z9i*%3*FG"*H/JJNeie!MN1GK5H`C-M?HM\hc:ZV6Kl@E3MAA:h&C$Y'?Q`e3O.c1df(lcHEZ5Oa-U/c(Z43;(\[c3eh7[%@1eY^#p(iN%MgEa9)V.Zn`..u"$!<I=#k+E+1s;n0pP2R'p9a8n[NP'=\Z.VC`1I."]';)q&4e2<::^s"=Sjp17U88;1,T'Bah9bTSL(LuU_-aj%%m\2X";;"7.0(J$cU6J3oNT>%OQ__EXap\#Y\R'1>Ac^I,Y?i"3Wr7>U$g?HBOWlGn/oLP18g!l#&m`LL)l`\(3&(l&70r(U+Xl$%a/(Q]mQe^]1$a1*6]uMJD\m<[fsUk%njQ$TH^S=<QMa9aEeCOR;XqE9X^QXXGSks?kb0RNOQVjBHAX`(pdrD^@SC[:iB/poH@^j;%><m5qVp8eMJ[&](IbEPT`lMjIcGpaeTB=/O$mgfNlmX-Ld8#Y55@bO`OX:VP"iAsm)VUTg/aA<ertR_a[&XEuhf%.Z,lV[dU<l:2%)5r+\Q);q2Cf*o<2]/6`5?uUg^?(lE4l/l@nV"j27gHC"_[3^A[om;S,AG4i@_F!!P7TI>e@7De1#!PiluFH\7KnN`U5J:[JYWYm%3ZjeI+JcA1f1I20N88Pj2m!)l?K1mE'O!'J(aua`/_ur@T]Ct*-jQ*.=df35H87j3S>ZIo"3q7]qNC,]+i[m:CH5=Mr=]Hkiq"W3%9*_WEV=/?k6Q!M/gileg;)PHDlonNA9`5-gJLE'k&ujFNP![L\DL-7:Q"e$mnY>bkKp=BBdqf`5WMnd$*5nq5#11$p9+8O_W3/ek%\n#UY`4ftROKZ_[ALGWD6Bf8/(^EVRet>Jk1f@#o1i_Z)P5s%4=Yu!j%%70^<^j"hfk$BO!Kbb2h@;U0,#Lf65^/M!Es4>4^]eli%/*NE7O,`XFJOf-"8B7<N@tAaNF&(Up<_cmC[d/g"ULJj<dUf29n8j)/0Wc>&hHsU2j[9<d!3Gu76Es;CF&.MqZ$XR0Wt1(5S0#6O%_Vg9Jl4nKt\SX`$*!I[]W0->Jlh(=0bkL)H/)i9Go][%A,?g)_d]_=sP4(`]+T*)(@`Pbr.?n#Q3MN]a'DH.>o!"GBp@(@Arq]o=%"Gr#RbN'<tLtmfb[GbbeAQmrn57FhK;;[5Jm7+&#h:l,FN$lJ\I`'C?pZ=Dn<"HShN[l;aY4R(C_mgfchq5/14h!VbqIY#+lpeiR%m#pS&lq=1s%$Qdnf'Sj/O<hI)4Ju=$H*H]WZ4%d`>rk+i=mDCm=Lr"ES,:r(qE,DX?3"1qh&Y\a<Qtj*D4u2P$#]'/Y'EfH_apUC%GAIQHkQ]^a];aZE3SAd5kMD8@A^Bal5%G;aI9Io268_Sl*PY>th\`Bi<Or3OrdY*_0^"3L-hr(jZ>c=6LHIf_q@:ccDlDjdMgA_&%!Wcegm5aA,@"guHa0u>P^]Sq)(hcZumCX*ZISnsG-jPijCqn%ji90a+K"sg@F.,",^s[Wc\1r5Eh4IYs;(%C?S:b@-0J4dmJ0Zo@%"Se77()]raF4YitKd-E>Q5Z/\!H<t<.I.bFCo,nrc05l49;&q#D?Mf(q"t3N4-5MFs4$cIGSK0].tbPMcJJXT^*(6Z8Hk/M5^I?L%+#I!=LBk`olU7M`SK"9d_23qje$Ur;;$PPfJ1+@R.nRY[`:+!$Jq@C'Cst=!%Be6[/V?k7q4c*"dA?nB!i3F-R+ZB"0.?'KAq^pZ%,K5SW",_C0qm-)8Sehc-U3kL?1OtUKl6A5!ndV(A"S4mk%+2Po"/up[,@-]BOSo^o[i;Op@>&pL!C@1\/.UOKjam&TKa99[VNN'D%@m7aBV3Mg^2[J&SiI53R%`>RU:Z@ke40drbjo%@7"J7oSO"W`-Y<L1V+5HIGnpX/5JFuI*<6Q2lUcu:.q#ZQ_]4VB3F5V[T.49:1%rh!>YN"dKMH4o3F,psXE&.lReTe')hiF>L9C*\ClK%f@-VWn^T&*1Gg7@)1k47_>OHPqS4-m5;r"4FFT&P6+5OLM"jlO,BZi*qFK%rtH6#2?M<Y"6'%^KQ7b#R$c;k*pPPofG:?XacRO^&2C'%L.7ZN@,Jro6]<BZ`fGhPNu'2f>Uk)C4V5?XXSO!nT_N,BZjW=Wkh>l4%q:MfS00pk'*@$]Cc<K>*nk&&T`q:c3F'Pb(,pI1G1ITgLI*Ns!2b*AE?0&W_O=G^HA)4pgUE96"S2f=3KWdDV6-Jojq)b8Jf+g]F%N\-(0UlQ=nidpqkBW6B1JIDDWc["P/Gjh\W/$PqlXt:@o23_uP(D:@_*/EKFQ8;Ii\Xk=;-gIJs1\s5p+MM'FTIfQrLD']@k)!'N%aErkm3>'L=Ud(7*TY=SLJp`p;kSAnrNl]*CbU5bKl9X`gp,b>5pefo&#+f[oWb_.[ZCg2tLU_>,=HH2_Uqt?,j,'usW%SWs8,"qR%>"LWD]RsX1H@[e->+W'\EX#=lrL8V&$V+X'Eq@R1&YIY_m7/e_`T6tDIQ.aC(_4]8PK/"f%#Yqqr5OB!gC?W18@BOp]f_B'5,Jch%flB;?emq:#,4LZp;W/S%OE]h3dk/`M>S'I0W;OjAci#8%NJ0L/*EW=#hien$VhJ"AkW*tmb0V:W,CkCBA!jk&4J=VB]ZI[gK(jY:%UTA').=$mM`:i'3]QrqM0kkTK)L-ql9+0-dp!f"L7<TmcH!M"e-NW'WdB2sMO!QTu$IG,-4(:"\ih8%T*'uGe]4aR0M53`gK)JLn%q"fl;2O*5P2FbV0'cdM7Ic-<qCNrO"Mat/SQub1)g_c3^P:Ul>*T3WOhNTpp$?B`rj;sZ@c@nRW7o@n9Wj0<>>3r";^$*('n:L<"%gj?G![%D[jp@=Zu^@aKaHU!nXl$!S!#dtsXQ]EC')4lFV$P2Q*%9JY).YQqlX#o7<E[q/S/D#I*H?o#"p%s6:3AVNZmXLme8CK3l%.[,PeJWp4d`dDl.`81cq8_4uV.*4.maiVJFC,5uhl0!UsjXfX=I>Yb+CR"$5Mdg.ZPCQgNF\>W-@;5rk9lC-hpD0K>R9$g]'b;-*%,H,PTc,(B<c.Xe'ZiEM)Ka>+?[MqUB#@^P$%ZE$u7nJ(><HV^[AXf9aj;lTtX#aPtO"!(:md][O^VN.!Nr]E;"/(2E+@^/*#ltkK%bsqoj<k+7J(FUFiBW,)I"!fR8R>?@n!XL2?%Np\\i5!E$U4TBPU:O1OWC9l(^KDfMm0sf9S$UN3-NW$cn$V@^jJ"J!RA^*F;N^7_%QQqEaZ`Xk#p-`sNAXfk>KRoh]D.+]/;F(BJ.'2.b3*r%H2T\i_e"TlMnXP\^ehi`&$k=*&!Zu<5"8a31eqo(]U%JWjQrLP0(;*dW%#[2c7*c?(q(hXJMG/4n,0o8##Q@0gc[rV9UbLho0oN'?s"Mfl^SZUoU^48"mFH^BV)a_W`m!<6!nkj1HUnT!1P+#XEZZV2/1s-S3%Z6k.V\^=P^*T]B)J`LPre7&%8Wf:6G)PA8jF?bLKraKZ1dGtVXM)_C@PPG$)qbEt4^'T'X3Bp_UTZ8L+1i1ZkJ$7Fc?K(!P(Q=Ce%Rk:3=2f9B9@V1_U#.\mjK7V5;F4O^L4oXTthS-#WkAPp#IgcouRc0<G36k&3[BR-"_$n2bQ$6Z_0?X/\YN&h(l05311O6\3&6>TR%U*1ob&p^'>fY?=3M9]L!RaRW>NAl>2fUPuRb'2eJ!.E'3>CMa%#L@N0lU/n18m_QR_3mN2Q_oR#+d8i,i_M&b?\b.RoM19K=/qNE%X2He*=5m&0TZ[<Bbag)2>^0+ah5)iM"p3HJfQS/4AN$=/IXtje&8!+a>Z;V6J,"F`Co,D:0c!nM8h;9!+`qth(e/\m&EP-4P=qbH%//CVas"re4bj#nW!#V8acm05_TccI);K0WC1-6#<\:nT5q#]q])-bJQ92&In/;Lu3"A_j.(J[/<en!pMQnrd[U?#?87Y]PTVDHcf%/Ze`PZ$ffo]KX9.BU9?q,F>jZ,iUOF=*R$p,efB;Op#5N:`M%Qc!t>@.6!!;+ST40!BRjn$!Jm7gmo^Os,gss.VA[gWZEe=D@rtL%LMu:<fI_aQrm<@2r%3RHp&=?o(i/joBd'N@,%n4f]ko/-;:[l@Lp%7,Yg?-lQmVCl7b=OnA/40e<'JXbC6Y3!@aAu5>#5b.HMNM=%XK^:H`V;UHa5\=Dl\_d-)(M>e':?%"'oj[%qFC.5Q"CYnc>Ym6a?d8PnGj4[rsZr3EBfB3,44;`K_PSApPg:7Sf:^d*i:F,%;t]\%1@::#$c`?;Fq5@K#:3TU2iG&,H-(sS;%kUOV!M&]l&*O!!=>IqLce4.Ap?VUJmFRXGXga;&hHXMA"`6Q+>Y,Nb99lc"l%uq-B$O-%C`)\G'8&q6r\-^\iGfsS)%XRfj8ijI1G'_FVQM*1837e%P2G\P4;c'>1#&N[@;tlA#TYR(4Iut(b-4-gN5rgr)]"\LL68EpP2D;?%_qsQ$c0Qok6)\3V/R^5I"E-iKW%*E8G+E16L-:5Z,O-K-.hGhrP3mAt+U,f]HUZ\E,';aacg!<'_&RJ;.`3Kl4'r\%_8=QP1oYYX%mM1OtqB[S/:mOPJQuoO1ckr",ma_!@B[&MI&ViEkk[%+!j-i^q=4S.HEF.eKCcI&FXu+PcH;)%SLX[4+qnPbXR]0#_j[9ptcLJTZ%l;joqk%g1Mog"K*ot[pFV9(PFhC)I[,a)W#BOg2Q'[_q&TGD$f(#^YNU4"?p?^%A3aCU@R2,h!K\6Ut/%!:MB(&@DQ^/p*"Bj6tp%]s8p2P8[_:k.>VVjNA&u"5nNC:m2rfEP(d/R%/sB4$Ooo2=_)M]kKQb<QE7MB<Z=S>K'Cl:-]N'I@ATD6^]jR6qV9e[M,#Vi$N;R%#(^MG,#:?J;!XFb7^V&!RRHUD?-ZPAgWBCiMe<ZHEb?1EY)#/:f1"`C8]_:76@\!N4#<i:4hW4HSb0<.E@49;3d<^e=hGsKG%Pc!%)ehI[[#!(uJ<ZDM<4`a1$NUEf<aMkt*(XpTPIH`S`c1Q#N@@[NFXI0D`SA\.H%d61bag/:f:U%)aT4shY(X;H0oiPZ>cD\F(8J'G%8$MrMX)N-(!\;/tCSX-)9cB`D0.2WpPJ'0JEQgVkmOKo8:gJQS`9Yp7_t>3BE0ub3nDL&;Diu=&_eUtHU^0L[#.?sX^e\e-abnH/%6ahXGJWUb"7gmH&N:R&"dA(=F,&lS#`M\:R(rPK)3"Y+=fU21QE*"PZh*TNlDT/=Li.qtA)<2.;6qNlf@Rf"+n!_/8N3GsD'F1]L%n$e;q!Ed[>/qHQ<c.@7NSf304!Y2f\EPRbI,C^oT!>8CG/`[NZKo9<f#S(k1Ri&+:RT9c$&19ERgAN$N!iptJcQl$=oS.0=#CJAH%3<CS"`K#JOe_ViOC/^3*Iu(?SE4h116aq%?KWsX83#3X&'#G%)*-oE]gCd!r1BN7oQmfLm7BH#g7]=ERM]'?>`f*/[0j`jhJX1u>%6!(af&_JFM2U+)QMC:dYYG=YGTagV49oZqV4\ogGXts9TA5XWlLf#BVXNjI(S9-k_H9`p2mb`p?JR93Nq*%X]7J&007VlTi,<.7?%=JZijP%-t#Me#[0E6F*k-X(k`R:h!*i?%thG7O',8>!W]o12)pMs"^K\$%%4Vr<cPr7fhcmekhk!Ohp\f9*d0f@Q/Qr7fhcmS``B%?S2<OFf'*Wp3!6.s7UT40@0<6VE=hOFf)cM@1l/#J,;@WSU:5pe#.Qi3n'FBq`<3f'].;!,j*stcLgA4^<ZB<hS.:GSRt'CR!\]m%e"(^[3n'F>q`<2mhtfC_STjrlds%g;VQZ#]1Ym>cY;:TP\$%T9\ur4mICltl1OZ+QI4aF^s1F6Ro?kf&Rd\AnW]j`CEZ?&)Gb5VY%=0gNT0ECkESZg358bQ+;c%h97XqOe"_/.+7=bJu]B,JQ6=R^sP"]UT4<0YoB>$6eKLoGC'.:JdbEV;X7ZMHgUH-O?"7mO4@K[=k.%8>K[`+ir:-Kt11FoKkW=lrNJ/9F[H-<ZiKSf9.T]15E$ZSW@McEi2!,%EX8G!Al-sf,6I):r/kY;EWDbTZK'cS'qhRA:0HpXcE@f%D\LNcBEW^_2;oemq7KP6I,OBbK=hoZc2L"f:Tf*&^u>;=(@[#//CE"@`"ShE(D(p-:8DU7Cq2qTjM5`VkP.?W,g`N40,,"c$_%_.%3Te/^O'?6P:MBMSP\ef8/pCJb[^Zo[Me6e=;[$HgWEmi<5TI)iT^Dl@%XJ^l\_c`t*dm55'#2m5UuMhOiS'7)RGYp!J@%u'I%#X@%ajlZ9S(*)D6Bi,^)I\pW^""%YeH?-(>BV/#2Cb*i"m>K:-'8Y#Qq68a7=.mOl%5KcNd6tB^7/[.!g[gM]r/R`Y7Z`iBX5q[Vacqq%.^6e-MAifG4)g!"KtfXV'>Oa>n+]YA'R#5-5^HrR=hi\^b_+U420B=@;NNWbnu1ak#9m$jN@7KhH[$DXG[SokaURM#Vt=SFY)uZ>%RtL-6UK'GcOoH@kX6g'6\+r?5QX49"4#-AB9J^t3JC(ab6t.7Y"pNV!NbagN&HK,8*lo`>Gj)RQ9AZ%XN)_cfL&pOK]HHAc81q4[%^M`X'0[@HQYq(iE@HN[EnLTX?ALmA<glb1%&Ong[lQ5mb0bT_C#]q@1QhD%4JhoKF%Y9C?PDXqj;]Cfl3Ia9-H),sdk=LIDi!Vn4%2."*Dd*;k:9Jg+)HuiCHp.5JmWA0%Y_miR$&rbWR?a@[+jppG,4=*Vi2EFq<;>roU`hLQ;a';cI4MUNB]WMF?O<K2,Im"i_5RJXp%,*R!n4rUG@q'[QkAMg-"K40YVmG=7cP6ZVCi*gY(6\_>#B"0o;(3^Q]LU[GKOE*ZE-9Mi14)D^_KS6Fr(g*ZH=[-5H>!ps$7@diN%ap55dAqt(PA?'";6ohn5Z#_`C`\X`Re$DVE-p/)I*]t(XVgJZfEdO%Jr3=:_9.>5+GH.eGi08H\H"#\>hu=6s@435aBtBV)%c"`#%Osisf0,-#\4@fr<CoB%$VX7j*1f+p1G"`RH1&F@bZc>rfmjs<m6q=8CX5sFn0TcojFim1]1VYJuEG^Ro_=Zc,b`ZKMQ51K<Sg>tl%<(2q33!LBV#'fYX<BGF_<G=;TnR_5UHd83VDOHMmFC8D\nhms(\Puiedo5,_TMYFk3JL"uJ?k#"\TSDgpJfkf-S'ph_j%;n$0R[d%?.ok.UdqbgT\P7?2Pr^+?C<fLo?ajD((lW55CFu2n@X<c-0?4Up*CF;<4'0[eUphm*0W,R7ViQF.^Ds;D=t`j^n#8^JL3tT6bYZY%ML2gkQ>alFo&kR>>.WEWCc&=Oe`q.=?g?s'Q;Y2K<.s8i72oFE.MmqR&I.9=8iI+&L&k_:-NYn7+QRdtM;KsSUDd80X]\ea^ds2%%]jgT6iY=^Nh5[Y'Od7\sq5t`?U&!_%AMC;-csKVi;^eO_@W/:Q-0J0;n^6s&^_I)YJ*9KM%AmZN4GjRuTAG<CZ$+qb>aZH$=D[;'%ROK1Ec8RI-ag+pg<B$2TX:hR6cV`&P;+d.<'(p>`9/k(q%1@a*!g]"+TVruu_O=Q6'\Y-*3,.7%ano"PB<j'1Kk(+Y#^(8:Kh+9:%>+;\G5IMakOkZ[2.uMn1SF(:[AWEA[R+PMPYX$$9+n,:[g8.[m+-qO5c?u-75sreV=:]0F(dn'8disQ@fCjfh2+R])LK*k*VY6*k%$s!r`_D/!mhiqFOUDO5Y]-1SpZ"2J-'MD[\VupF\R>"2f6^Js_.Y(u]78kQTJt2F6A]hu2f=W`a0Ed96@G`baXFO-?>)6-\ZqfMX%(i[lG#\oK9B+XhM7"oGW4rWYSp-#@>JdY\e3<Uu9&Fr^N`3am\P'3gVJq3;cT)l*IdKCFH;88!PPSb\M-ikuM)"qXOP^!&jY_sU`%P,,Np4uAWC60^$=cT\7d82Ws<(7-L#S.J?QP6MRVakR5fNT)tk(3I$Wb%)W@>J*Hkb;#Iq0*\cR6_.qa(6#roScB?5`3:YY;C=4(%#HuhSX=K/51'JJ.PKB8t&>uOOWE*Yk.-pJN?B,oY^)7D,RpDb+XVA5\`cGP7QCQMZ1,4q9s$k_0*FPcFJN'3V;c_;WD)l!l&T!7]%/Oq8>0-=2"Yn#MtX?fFl"`![k2i0pBF=kqnh[hR^BdK@MnoQT(12!VaNCSC(W%G%OYa_@e3U$h2@kq9FdPqgG'[!m==p?&pOjWp%%YKbp,S$HS1b?P(.)*-jhB&H#GP``ReR*OCG^d+NZLWq/O2=U$<2)/>b5j6X41SYkWHuFi!A,oNje1;m>Q#/i:9uFH9E[7uc[QqkE%Ros<t*(Sn>*c45*V]FLGekFT7@3[\(]oFn6@`tu$)dh6qZ+AfT#fdY/"B&<AVVoS:G"5JB/;-f62P1ZCB=A@4%T?-Mk#4^tI<&)]%oiR6Z1dC<ZB'Q\Y*HS]%PclBD]aJUFRtEPB+:'U9%"UFWpk3??W7r%7!Yper:H")h`XSSH3Lkm/(I#'N7@WsQO=bl^*L.+U7]TEa%/8)<ZX8u^OR:#/GjqeA.FIt%HR%FOn2kd1PKfu,KP[Kul9dh6ZYhdl\Krj,kbf7G`eE;5)lIK(?2Q[Rp(+it@b3RP/:Q6+$&Wo%E%3?Nu>k7:%R3jH/RA[iEn2Y/Qfq*fQ?BDrKL%_i]2P/^WIH%o9!'>Y2gPcbCgWjYaWTchPL!coT4`'E\mRBdsj2Vk.$2!doR0:,B(%_(9AQnW/fP?h*6p:hILU!Nb8hl@QLq,0'me6_aYfOQ-&N>mBFE(KlhT9=gtZ.O<1X1[mSC)#aViC.9p20U52<KKtI\MOaeZNj9#r%7WiEr4_0,u(2fRgHUWPlo2U,kAcJe$)&leR+l>PbDP&ABQ2MaHUs[((,X1G"Q1($i4'NH96%F?61"%\AKJ\q3HaJ)]\p75)GQrm8%kheWnbQJ"eKVcSO!"\i:=5tg1J![;>n2\Q0.u)D?oHO,KFIOib>EO\,d>Z*0?p`aIlX.<$TpRL<DIWT)5Y+8N(X*tL;rt-C1U\X;%$:5"]0c1Lcr<#^:>nY75JC(t$cBhsIbkX&s9>j-"hTuCu&0^Eoa0R4F63[r]nj-6.eO[Wp5YE6PGEQX/VVG<iR.a>EN.Y:O-6uQu%iP$B3i>s*,+,5aE;]FSn\R$!-'%Xp-:b02&@<LA)'Fb&o86D7R,X*p_iMlFO@"e1O]^YiH01(=]*L-oS9+Wi[Cr0R90"ar7ZD0q<%Ac[K/p^?ZJV5-X:k\WZj3m&Wss-[q:cd/Hd?/eA'g'p9\hDN(%>sI_FcS*H<78L''/8bOMIq[h*Lo%uV8$JF?,P[u%oR^?Wau8hu%]<;EU@o$QkbDQ63c>Gl],`QPd3!3U,MQG8<D/0Id[8TBN)u2lmVZ_Y`J&p5PlV@p1A.50Y"AfU5,denNO,jfPQ`m,hL2SJ9@\aFn%c@aFZ!3!?96/j_][*O\R,7jI7S);/#"=kC1jZQs>A,sP'7ts'[E["IC017s&,a4e!Mu;X$83XHHH^Lj0W+W`Rp@*c!<BapRmTqf0%>eC9X=M*0uWH`GSXAP61;.@HnhKcA)#<H2dl%/9:[W;qj:+8-N_ns?<,]Y\bCF3BZe"*IIYc&XZogN+c6euPMn\o];k*ftd!8)0+%h"0REi/1$T@PRqB<J3+-<;D=`+JOPqD?2AQ,l2O*aj.6td>t1T=6YE+?_57lacERNVkg=J*MK\FTOSQoi45+Oh#L!(O"s(&U4r6T%\i`mWPV$'!grj^/-c/Ej_&OidlSQ)%1"ut`#>W0/"Ug3`P'DmOZaoTnEpB>.)\YXC`/ldF&j3<0V%6ce5b_",2^Zr3,!fXq_^g>h%XkDFh@CZcgMJf>.]u'7F8l,^SN73[U$FA\_HliaD'_HZMX]0o\(s'cV/&s]E.q+#7E3/pEr#dn>eF0RMe17X8pU/s[m(2Hi_V!^!%C;ju,KD@9t<+Bl.q,8U1E%uMr*<B$A)@2;oEP3p?$sh,H#tbP36P>APBkiT"F&Q8*I&1b.+rD6i%s"Z'PXpOT!(<!Rr2mI<iB7:h%T.;!GlV+bpN5Co8lLe7_#UHL.:^hRWLnmm=E%+HR,`-5tBq%<U.bu'<.gs?&)7;mtn@KDCJL>>!\+_j&nE7`iXYhB59u!s*\&_Uq%FR]/FoiM3="Y6kT=qS*YDot`e/7298;TdGs8-bp(B&hA4E5:^m>p*c/g+a&U&>i??"9U?Ai7,k]RX8W#WaQ=P8-^dWC4OY(KA!Vs%qa'=Z[pQbGmi'5#GIb%%KA,^Sp4EO/Y)n]1rUa*0VZuldZ_?;HnNi,(CqqI.`]U4_2?Mq4;)e'-X"r];:[CYH4<5rM?678t;R:-@%^8qBOC2I@k51,ubNYgcj#WUm_"5#">qfQ@D@Z%+kEh_0u0HS:i%bQVes6mEbr6LVb,KP%Q4r;@f<'8eN>-S9_.&]7-db)/T^#rQ8%+Fu_a=H>9T%ehP`!@]A.TrrTo@)"")<DV1R,`3BA1U,b*ALlQZ-_f<a#S'3@"5MO2&ql<A?/l-JQ><,G)_`t:./WmGD-[N+gH.NZ%E&HN?]cD*dn6XSiII-B4]M+ESqcN95Dk$V@Hu@8YN,0QD.l+\s9*:**b"jX6W>YU]LH>=crr+++ieEe0EW&@0N!ar[9#rFpp%c_/%I(o5ji=ZNkbad'Mll9dn4PYemR2<E26.oTm6Gr$1KB'r7$HJaM#m?%hT[<;X`!1K"o26F"6kDPP7Cq$<%&=QJ6tlh;Qi[]VI&'Z=%m\"bs!YR5s<-2N4SNJ+l$4WX1;D?_AUR??OZL6h;1r"u6%cj?FeSQ.B=O-N@XJHr^5T[3UA,n0(50Z@JT_#2Ok&r%).25%(H-<0.%TTEWnE\P=`!B&J`Yf%R;e`m+oKHddr>g905J8Gt'Cf7&r_/&KcM%@EjJt9''LqP/QMF\)aT9]i!jQWm9JIX:p+2g\N`Yo])(o_W(%3/"To6Je,k$mS9BP"dH[b9VY<:h+XjFp4)p#D@s?`u8e@;'I2tIld>CM23]2lG-c+$6G?K-WHc^S'egNm7-p<XK!J<"Z!Z[B*k:`%>!UEdKchJ3[-$XPFUROF"O!7O;CQTdKdp.'prZ&7>TrGgT<ROf@O6$U'U`F;F'S3LPZ55gal;\K-fn8TiJAs)q*\L<M^Qf5G_c@a%8aW<.)tMt3Yl;U7buEb)*5o)HkHKnO2e(5I;t[,I*^Nk?(d#<)Z(r>f(S1Z\jWjpA:7o71`6IP8(qg2K`.mkE;lpOnoXb"jGuZ@5%I1_r->*6AD4[LY:`_O;F$^-FiWC61QSRG>egXr"9TKaKTeaBYmMjm'<=hF_;XV_)s@1.tdZ-t73(#oj+p@-aYUDU5R2tT\Cc-8R\%/3!gnha4+VnOQ?>AsK]a<?%'e<Y9]M=HpDnH",J]2\PI:fOJL6],tLKb)fVd6Wi6h'WuViW@"JBokQjlQ[[>07WS0b@9rs<q4(<o%4kS.tUW=@Ld>CBXUL;\o\IXG#&c'6H?E8:M/9bZkeG*?F7<dP[R2o:p3]YoViA6Fi:C:MkIMS!WRg"hoVj=>4X=uIp1$G%km%-o"%+@0jqkel3RZUUGQ+O=u<W=tIU&PBr#k2'>J0g\bcZE,[H&&*"$B(-Q-%FLL?9u]fU'KeK2TB;;OqC,l1%$CZ4eA#!@>+2U0REUF3%'pG/^2_44B<k)<D%8n]('(b42.)RN<qDq=o#nHGM\[G"n%mu3XEV?F>T$u33%C20)BcU^h#G63("A'mAf%M71*kbAk#X&G@,58nM%$qP"\q,RUV'0D/*(f5V2-``Rt[@$)m$u9JpSp6)bVp3VGfAo@D:&%K4N085L9Q[VAai'Qebr9A56Ki,/),H=3kTT[ig,,Ye&2fV*%8p2[d;$FS7='Qb+.!2pefqWa1'QAd=JoLn+3$D1>K;O.>AO^7dTT*2f%>e@O=H:ln\7\cD<Me.77T<U:VS$-4\ocA+ms_X`U4XjT%DH:#P_SN:6QRJB2/3VXLS89?Vb&/<C0S>?;X0nLql3V;#K]\fQKJc?Ep&H.M$-7$*C@*,]dVSimeC4l2JS[iVh:_X[BLYb;>5nMW%.bN`,@AG@bqLb/A1MKr3ISE?J*Z;0k_o!$KO&4\TWfM>(^bKl_.MdS8R$,7IpH.RJIp7>&R*s&KI6Yoplh-gK94l?)5/gIg#IQpp%Md9GTHsT51d8Cp;8=Vq9<r[&@X!EYl6:<;.Ekk1+8D*$cq7Q$u$c[(eU`]_N='rI%m4n38X+FZMeT*4h'sKjTC[aZd?>[&EpSfX;%"gB9A!Qoo?lB;Yk2/+o)7]SSB.%iDI#p2]@8^ZjdBZ.J'b@#m/8PgUHUrKL>bjcD!+^5\]NI"Db>3!2^H(@1*\0c!!QMWgX'eU];%0:s'm?>VJ)?E(f%TL]hR"3eXiSNB(6O%&kWU&$MjG,tn/n:=7.()HI;I:O9#_?4$8_9/4,mAiF^#m0FKWhYk-+hY^nJ(5_2luPsm%BpX^Qh6&$9Q,2D-f*BLISp[RiY`i89O`Eu4@FholqjM*lkd$21_?Zn5k'5%FKWVh#Yu/h^<C^^S2`%Z/Vce`R!DLk0Oj8AO%k=0=%M+'Hr?A;]1qP90P-IP:G,.bffA^ROu#T`Abn8g^Rqq=%$/W=46/?*cW`)uQ2YH^;$%pmZS7=%!Q@om<dnT5"h'\':8D37`6frN&3%VJ7j1OuRpDS7GH'ZIOK@3NUOhWeb1)"c@@+P0u6cR@"iY=]2ANUqjss?H*Z4\UKK`Q6+>rbj53*3jRV,UhB6f%4R_N<prq3r/1(s%ffNX1;)4Rl-[HE^ji'imGWpPlXT024rgmKXrJpL92qRftAUQdm50]B6/GE/X.kge]Ke7@S,(Yb#ApVT?3lL:mR!El&A)FAO\_0be%F9;.S\tSAl[>V:Wb#K5LUuX(oJ^OI/)<q9sjnl?E>_o^o5#Td3QmL/;ITdGl54]V\G/nD6Zs(X2R4TMkGU+ciKX5(K(j,B*Y`^\6%Z2+6joPr02=[V'22I\kIjda!$Lm_Hq%-a;p1GPKUdtjDr03o?j&MpoZ&XMseC+(jC=SBklf]VTP,[=b1"iF_SSa&+Ck0Xf7gLeYl%I`ueARPAH\pS>+>R":LWnhsuaLbiO);ULG+-/#fW%[H]mIBFbX5dFD+N+6Rqba)m[g!&Jonshb".ZJ#[b`SoKpJ:D)YAR7ACm%(u%gQ#F#[3jF"hdORL*>BFkD9';^AMTdT<CN.0BirT]GWNC&q(XgE?0][&RG3&3m6jKejU@Q&5f@6&cB;cjP$K/=Fc<ooZmle">*^Hj%O`Y17V&J>ER?(=3SlATOjqNi4@F&Z0euFkAiNcWn?]`f&LY4)WP1E1+qV6=u<io4X>@ofMYLE73%Pk6r@gPN[L@t.(,80F;GJ!;'%PP:@250&a$CQ@?aba'ZHL()$i?LqRTe0`cCeVt^JaSHpTfPdnZmAnrihLgEQMY%!^Cci*CKGPj(I_&V%YG1#HhAE'Bj6HJK+<`c0%P;P-H-=3#_MqB/Aalg=o0eU5O^:,c]q\0SUMhT!+/gH_X:sccUHeVZfEFCZl_Ob,!p]%444;uq;W"1I&#GFi[QCoTOonNqW(G(>3%r#m382Rf(^ELuXVp0&bm;JSN[(D6uc6^4mrB1b.=<B8>J%IIFlRmN,d5bU%1;pmopba?6i4JLq*BL.1tJOCsB!Y4oViZst^LF*X[%ZIcni/`6WG'.te6#S^[!5'9ka9EDb1<_!K@C'E$J?:#K6j3H2mA-]ccM\8(RO\H"=GRO(56OOqq!qJK)F>;[G8L2kV+u7K+gBm/^%>KfT:'!XO?-U&Z_EDRRFNWDgUAAfDQ1.,Caj"H9e2>,)?dR:&K&-uJlK_msN,[N8'V0cg6$5%L(N"@73(dr?>5[$^&]1S%i@7^OD%>K2fB@Ds6UQuqn>7;9n/'L`WMAIEk>(`E2.G4W/J0'N,A[(f8\d8(kMa4DF+q=3(p5P0Xm^F8OeK8sEWa`T\%+REtHW?!M@c7NLF%O:WJ4P3U.t0Fhu1B2pub&IWsN_kWDNCco=XATEV\M?nnHaP=`D_5C[?9h-[Z+ZUg*FbN@,o>BT4.WYRNDu*<I\N(8;It2&i&Fp25%.2(2cCOHg?>:_IC)2O)a%^2-t>60/B%="h\`BcD,`r3>hj?Zl2hF3$RP-5p&JDmmPU7PZb%G7Q[B5@r'_Dq4p0(^`P+4mn+q7;3M%/0#uYX)%K9YG:hG`%>kc<&TRXelY+9Gc7&j`jdBOk?E"j`05Yo>E[.Rbq<IH<=d0Xi`IL<Ot`t*3&'Rj4kCXP/>HG0O"]'IO2NrP%2ZucZ#RoL.@^prZ88[.X8MiuT4#lAq@81##fX^3p(!*'er.#]99eGLD\HK_`)ga$U,IMhhYS_'3OE>1#[:Qg[J@-_Y*tEtZH7+m1%90NKR8NL*/blMWNM]mqPBaF9P<T?t7S_)X<EY?7^J;/iZ&ZH,B936J-aoT'!!',\l53)]&,R^q;4!;fG^A60N1<*QA8Y@'q"&2C^%p`2pub?52-*32'=G3:3H6.$8=<,9)@!rR>3b\-F:'UK%Fb)"sEiN]'6i"!;*m$WY`?E.*<kY)Mg"QOqV!t,T])Ct@<B)L=''m4.4%a;<H/@Yo\G!O<h][t+Yh-`F1R;hcD2*ubBKL-l%:'F.b/Nbh;0.YhQ6CF,Q?E?=U)TR;-Zk?!Nm*!jH.o1R(BlgERse@R>BNg8nd%9=4E.S_FF3<M'+9rG"6X2WSrHD8]b[5>N>4'p];jGSoRE`"BP"=r3KHPpTs?d(p!<G3;/F7'_QS<ihY^I`GcTDBEsce3<RfgL3`C%j2H7e0%E,1d7S03dssD*6A/e0"qpISUnGLm![(f8mEQ.)]+OA"Z5FEG[nR!Qb?,kI"_;a-]CS;47'Od]*hhDRk-Sg[h3oXa;.3QX%QR[idGF_6p/=WZ!l;:-IHm.S%d(/r&XNWR!3d&_mJ5Ri[<n;HciNXe@s$0U^>:J(A6bk9>LCTeN`>aNA+m6*se<f6>aBfS6f^GTN%Y3RB6b9eQO8)D>D[h"G0]16rETEQbO+Yh,$6df<jg;sUd!f4p=d5@F@%Y8ZOg,ZEU5r+#<\;k#Y)!BP<;FE0BBr\ic235i]i(85;%1'p#rD7=;Nes<s<dr!n(EGn>s-m4:C;+8Qq8aJL&WVBK^(stnk]Ma5u9Aku/pj&P]8oQYZefaG4%mj_17RFa',0`!^!S@T!^g+>&%4S:8MjDBSl;kDVbm@'8r"Rr3NKa7iP^sos#*J%%Y/s:'p,g"p[0'7RMT.2:3);0cHJ"([(6#D`9(Va`>6fCk(la_";i=#o5=ssL0%l'^1=4q^k8[LnAF1U.]?d>E6oUOT(:jMI1CI2u2.FAs1kj/u#Dmu6Fc^ep%RWLH,;*g].%;(TXj7#cB?&iE+E@mPpB6DU)UB(7A0%]6IKAE0dfnCf9\L+cRBQESVI@_]MhLWRAL9Yq$DeidDk9k/nNPc&NNX+m'GND;I'Z4cQ*VdH%$9@u[1pc;_-Z_4nuaY$qQ,:XTZq%?/Xana@Zl6?2Xmua`/O9WVUo^)gh/nNSmJ<[iiXkgISUEC)<u#9A%<Io3M/LPp*<+KqQ#4caI!lYaK7P2XF"/"AT.%W4GTKL!1"T%@jt5mYmXaNWf>(mX,+GLX;b6Vo>K_#ZB8aMp"!MFjP:9N:M#>4Bd'SHAI_eRgftLkSG'K9#l,e<$/ep6^P*?_EbZD]WaoNp)QCJ@%B,p^/%5FXsNSau;SpOO"apYTPp=Stp]YCO(rpBBlI9GIRYDSj!aY5Z)Es8Z#.\C;s^j%?0`c2'&?q6fEKKh["+/u3U!>'O/\7?M_%C/[%E7&7[bl(.RE3,l1=*t0pj\iC\%HQ)9'G+,:)f)TLSa#bsi&+G_'H"Q)0f"FIoh;DbX2;e[\8#Ne\^N?U<X+L9f@PLEXn<4VB%*/Ipci#8jr.@A>'^rk"hBX<GO$(ei_lOeeH20k,`3;tN`FVeP/jTtG,SVZj!TZ*`/a\Gneg6=,p)q>Bris&^CG;BmhY:)s,\ruFn%M#N/N2ki$+#_\bKM>(e.L6m(&l#Q,bRG74%(,W-=5iJ5qk+3W!=>>%P_j3"X)pNUQgAMIZe9bK?$33q6]Tl$`eJS>&6]'fl7nCSM%/IjWL"tN"W!UN[NLs.!#<$YE:SS"ZbLIAhZ/"9sDIR@i,PIO([0bRJM#EUaF(tIo`CM%:dqE0m,I?6s0lejHn3jYAG;)F,kpTL&H%e3]C\%"LE:QH_5n-cZN3/l'noAisDdW?$pS>R?fZcY+s4=:+%Oh2!#9K`s.;8Nfh;9N"Y`l&^"T:);Fp\[(!50e`8N=6J3]d\7b1%Ru!%18&2$+;]_[PXZ0@=!^Hl;a:mT,<j&&6@mDM]<Y1)*hG:bRKeYF"aMB+JDKI$YmSG0ZKLi'Z)1H*Glb4"dpu-tG)_'GfiM(SA%UH`IR8lCSO$*_i_qpGg7^o=jkQY?m:G\98E;*)uZ\:2ccb#98cXd7W]goqk/WNl2NMkpB_,#XN<3f!_19bBIAmAs/4+O\XRB47#R%@$Cg?bj[,d'?->k+3^XL1=?/"o*c&Yrd0TJ,8L>8[_"@,7:ZE*nX<H8TB>:STH/>g0,loSI6)&^D4/]&LBrPrk\(2Ag)\V$o5Z`r%UR:]@7"u1L;'g#TVeJ=B-sdg^4K0r)TfRaK`hB'Nj@Ic<2$O4A]:idt7QBalX-$B2*`B'O>d'0Q9N!7iQSFOd2l<5k&*I%\[fZRp%5Gk'e.)g`kr`s=OnDj:'TJfB#,N8bF#`Y/d@Sn958/lpI=HS4+H"*O]]`9!L'cpjRO'%2^6h$Z=87dS\5<0;+p[IuZ]:`P_Qh5m$%KLehA0^?Ur-&Jge\Xe&*EN*&<[7tigZaur_$V.7R]fD$XetH7eNJ35df-)%\1;&LeIZ5U#C&a8\l%-'jQYEd\*7IR)`QMPS?RMHG%Y,-oY'>lHGmGeSCMcaC.ki1kkDE<c9kSCec8G'<2C[hCA!$:#U"@Z4*ZQMS/Z18BT6)eL]Z%\S:8*%Tt50;23j>ZLgY4p%l4MDgQ%<>*Vr.o>uWZBt`g6V*Qe6&2d=%b;N8XFnh497^L]/h,fR5g=PuDP(=KoG-h'?eCm>-iJQD`N?g`QgYNtXt8Yi:"N,D&'8f608i+H%A.lW&YNj#8=Atl$V-[gB^1%R)Em2LQXT35Sl&h\Rm9;kWetNh]&.4)*'dnV7UW_)JMMBqT+H8Blaa>I:;KtbZT:rk#n<Kf.RDcZF%!jFMgPj$koWHbI)rajopOgWq'bSC<`Pec/Z_QcEnTRV30KKPMN%/Xei'XUX]=h]l#m55j#F74[K!o4pC/b\Qthl5NLBI/e9LL$Sn%RRo1n6[4][LS?2bKD.]_M,kT\HsSE4WDSWPI:&h-24gai-Y@=TRaVY]a-M.?#'PKbq+RXJWHjmY;X4k]/e(AJc$>XFb_99>dqn!7%%"QaFp0AU!F?/OFdR4a4k?T!^7$;tb7Q*C7cFYpU-9[Z4bDc/q]B=I/#,%;Rqn$ZsQI*d:LmS*YQYBjW;m4A$K2#lJ2_lN[&31Bh%0'u-Fma<YBXT%gWbQ/tNpqBCB_Vi5j;H:[B=a+T"&t'B4?)E2;)jlt+Q;43KGthW80AL+WK1NR7Q\qlB]/(>5TY(X!]/23'/aP*L%D"PSNf45St/&8kmEtHK^C3A/]e">7^iu_h*pQ)9Ehq%haro:KFrJ1DPrnG3cl+b"3pj[eib<PsS\)7/P^\mlITDn.`If,haTDnEK%O$E[>^OQ+=a$9Oec[Yo`Y<Vuhq_(23nLm-*r7=15jej2LrZ?Xh5="Wf1\pKgpFlRB?bcP($hoNl~>%AI9_PrivateDataEnd