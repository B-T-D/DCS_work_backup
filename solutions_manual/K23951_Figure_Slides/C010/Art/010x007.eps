%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 010x007.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 360 111
%%HiResBoundingBox: 0 0 359.9946 110.4268
%%CropBox: 0 0 359.9946 110.4268
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 5156 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0EFFA8A8FD1FFFA8FD20FFA8FD20FFA8FD1CFFA8A8A8FD1DFFA8%A8A8FD1EFFA87DFD1FFFA8A8A8FD1AFFA8FFFFA8FD1DFFA8FFFFA8FD1DFF%A8FFA8FD1DFFA8FD1CFFA8FFFFFFA8FD1CFFA8A8FFFFA8A8FD1BFFA8FFFF%FFA8FD1BFFA87DA8A87DA8FD18FFA8FD04FFA8FD1BFFA8FD1FFFA8FD21FF%A1FFFFA8A8FD17FFA8A8FD04FFA8A8FD19FFA8FD05FFA8FD1AFFA8FD05FF%A8FD1AFFA8FFA8CBA8FFA8FD16FFA8FD06FFA8FD18FFA8FD07FFA8FD18FF%A87DFFA8FFA8FF7DA8FD18FF7DA8A8A87DFFA8A8FD15FFA8FD07FFA8A8FD%17FFA8A8FD06FFA8A8FD17FF7DA8A8FFA8FFA8A87DFD17FFA8A8A8FFA8FF%A8FF7DA8FD13FFA8FD09FFA8FD17FFA8FD08FFCBFD16FFA8FFA8FD05FFA8%FFA8FD1DFFA8FFA8FD12FFAFA8FD0AFFA8FD15FFA8FD09FFA8A8FD14FFA8%A8FFFFA8FFFFFFA8FFFFA8A8FD14FFA87DFF7DA8FFFFA87DA8A87DFD11FF%CAA8FD0AFFCAA8FD13FFA8FD0BFFA8FD14FFCAFD04FFA8FFA8FD04FFA8FD%14FF7DA8FFFF7DFFFFA8A8FFA8A8A8FD10FFA8FD0CFFA8FD13FFA8FD0CFF%A8FD13FFA8FD04FFA8A8A8FD04FFA8FD13FFA8FFA8FFA8FFA8FFA8FFFD04%A8FD0FFFA8FD0DFFA8FD12FFA8A8FFA8A8A8FFA8A8A8FFFD05A8FD11FFA8%FD05FFA8A8A8FD05FFA8FD11FFA8A8FFFF7DFFFFA87DFFFFA8A8FFA8A8FD%0DFFA8FD0FFFA8FD11FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA1A8FD10FFA8%7DFD06A8A1FD06A87DA8FD10FFA17DFFFD08A8A1A8A8A87DFD0DFFA8FD10%FFA8FD0FFFA8FFA8FD0DFFA8FD11FFA8FD0DFFA8FD11FFA8FD0DFFA8FFA8%FD0BFFA8A8FD10FFA8A8FD0DFFA8A8FFA8A8FD0AFFA8A8FFA8FD0EFFA8A8%FFA8FD0BFFA8FFA8A8FD0EFF7DFFA8A8FD0AFFFD05A8FD0AFFA8FD20FFA8%FFFFFFA8FD0AFFA8FFFFFFA8FD0DFFA8FFFFFFA8FD09FFA8FFFFFFA8FD0D%FFFD04A87DFD0AFFA8A2FFA8A8FD09FFA8FD13FFA8FD0CFFA8A8FFFFFFA8%A8FD08FFA8FD04FFA8A8FD0BFFA8FD04FFA8A8FD07FFA8A8FD04FFA8FD0B%FFA8A8A8FFA8FFA8FD09FFA8A8FFFFA8A8FD08FFA8FD14FFA8FD0BFFA8FD%05FFA8FD07FFA8FD06FFA8FD0AFFA8A8FFFFA8FFA8A8FD07FFA8A8FD05FF%A8FD0AFFA8FFFF7DA8FFA8A8FD07FFA8FFA8A8A8FFA8FD07FFA8A8FD14FF%A8A8FD09FFA8FD07FFA8FD05FFA8A8FD06FFA8FD0AFF7D7DFD04A8CA7DA8%FD06FF7DFD06A87DFD09FFA87DA8A8A87DA8A87DA8FD05FF7DA1A8A87DA8%A8A87DFD06FFA8FD16FFCBFD12FFA8FD0DFFA8FD09FFA8FD07FFA8FD05FF%A8FD07FFA8FD09FFA8FD07FFA8FD07FFA8FD05FFA8FFA8FD04FFA8FD17FF%A8A8FD07FFA8FD09FFA8FD04FFA8FD09FFA8FD07FFA8FFA8FD04FFA8FFFF%A8FFFFFFA8FFFFA8FD04FFA8FFA8FD07FFA8FD07FFA8FFA8FD07FFA8FFFF%FFA8FFFFA8FFFFFFA8FD19FFA8FD07FFA8FD09FFA8FFFFFFA8FD0AFFA8FD%06FFA8FFFFFFA8FFFFFFA8FFFFA8FFFFFFA8FFFFA8FFFFFFA8FFFFFFA8FD%06FFA8A8FF7DA8FFFF7DA8A8A87DFFFFA87DFFA87DFFFFFF7DA8FF7DA8FF%A8A8FD1AFFA8FD05FFA8FD0BFFA8FFA8A8FD0AFFA8A8FD04FFA8A8FFFFFF%A8A8FFA8FFFFFFA8A8FFA8A8FFFFFFA8FFA8A8FFFFFFA8A8FD04FFA87DA8%A8A87DFFA8A8A1FFA8A8A8FFFD04A87DA8FFA87DFD04A8FD1EFFA8FFFFFF%A8FD0DFFA8FD0DFFA8FD0BFFA8FD05FFA8FFA8FD05FFA8FD0BFFA8FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFFFFFA87DFFFD1CA8%FFFFFD0FA87D7DFFFD0DA8FFFFFF7DFD05A87D7DFD06A87DFD06A87D7DFF%FD04A87DA8FFFFFD04A87DA8A87D7DA8A87DA8A87DA1A8A87DA8A8A87DA8%A8A87DCAA8A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0B%FFA8FFFFFFCAFFFFFFA8FFFFFFCAFFFFFFA8FFFFFFA8FDFCFFFD10FFA8FD%05FFA8FFA8A8FD17FFA8FD04FFA8FFFFFFA8FD17FFA8FD04FFA8FFFFA8A8%FD16FFA8A8FD04FFA8FFFFA8A8FD13FF7D7DA87DA87D7DFFA87DFD17FF52%A87DA87D7D7DFFA8A8FD16FF7E7DA8A87DA87D84FFA87DFD16FFA87DA87D%A87D7DA8FF7DA8FD12FFA85252527D597D52A8A87DA8FD15FF7D53277D52%7D597DA8FF7DFD15FFA87D5252527D527D52FF7DA8FD15FFA8527D527D52%7D527DFFA87DFD13FFA8A8A87DFFA8A8A8FFA8FD17FFA8FF7E7DFFA9A8FF%A8FD17FFA8FFA87D7DFFA8A8FFA8A8FD16FFA8A8FF53A9A8A8A8FFA8FDFB%FFA8FD1AFFFD04A87DFD1CFFAF7D7DA8A8FD1CFFA8A8A884A8FD1CFFA8A8%7D7DFD1AFF7D7D7DA8FD1CFF7DA852847DFD1CFFA87D7DA8A8FD1CFF7DA8%7DA8A8FD18FFA97E7D7E7DFD1CFFA87DA8A8A8FD1CFF7DA87EA8A8FD1CFF%A87DA87DFD5CFFA8FD1FFFA8FD8FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:16:07+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:16:07+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:16:07+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>80</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAUAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqlFxbNqs0kiP&#xA;6aWTkWMn/LylQ8hHdV/u6f64PUYqmFldC6tll48H3WWKtSkiHi6V78WBFe/UYqr4q7FXYq7FXYq7&#xA;FUv1JReSLpfWOVed7/xgrTht3lb4f9UN3GKr9NlkUy2U7F5rWlJGNS8L19NyfH4Sre6k4qjcVdir&#xA;sVdirsVdiqF1G5khgVYKG6nYRWwbpzYE8j7Iqlj7DFUPpyNYznTnkeVGBmtZZW5Owr+9Vm7srtyq&#xA;eobb7JxVMsVdirsVdirsVdiqG1LUbTTbGW9u3EcEIBYkgVJIVVBYgcmYhRv1OKpNp+r2FrewxS6n&#xA;b3Empv8AGqTo4W6IqFjqa8GVeKj/ACR3Y4qyLFXYq7FXYq7FUJqVxKkaW9u3G7uT6cLUB4ClXlIP&#xA;ZF332JoO+Kq9vBFbwRwQrxiiUIi1JoAKDc7nFUJL/oeoCfpbXpWObwWcDjG/sHA4H34DxxVH4q7F&#xA;XYq7FXYqp3NxFbW8k8ppHGpZj1O3YDuT2GKqGnW8scbzXApd3LepONjx2osYI2IjWi179e+KrdSj&#xA;kT076FS81ryLRqCWeFqeqigdW+EMv+UAO+KouOSOSNZI2DxuAyOpBBBFQQR1BxVdirsVdirsVdiq&#xA;QWWrS3moXN3HYXE0cB+rWzKYAPTIV2kHOVSRL8JU/wAoHQ1GKqmr3119Saf9G3MUlpW4ilZrbirR&#xA;gk8qTE8StVanYnFUz0+8W9s4rlUaIyD44ZKc43Bo8b0JHJGBU0PXFURirsVdirsVdirH769W+1aS&#xA;waxmvLS1j5MEMISSR+SOKySRlvSXY0r8Tb0IGKqMaatcgx6lpt0yW6GK1kWS1Llidrmpm+GULxAI&#xA;+y3KmxGKproGqNqWnJNIhiuEJSeNqdR0ccSw4yLR1oTscVTHFXYq7FXYqgNN/wBKkfUm3WYcLMeE&#xA;ANQwr0Mp+I+3EHcYqj8VU7m3iubeSCUVjkUqw6HfuD2I7HFVDTriV0eC4Nbu2IjmOw57VWUAdA43&#xA;9jUdsVReKuxV2KuxVASf6ZqPo9bayKvKP5pyA6KfaNSH+ZXwOKo/FXYqgLL/AES7ewO0LhprL2Wv&#xA;7yMf6jMCP8lqD7JxVH4q7FXYq7FUDqTGdk06MkNcgmdh1SBftn5vXgO+/IfZxVbeqtlLHqCDjDEg&#xA;iu1UbegKlXAH++mNf9Ut3pirc/8Apl+lsN7e0ZZbk9jKKNFHX/J2kb/Y9jirm/0PUeXS2viA/gtw&#xA;BRST/wAWKAvhyA7tiqPxV2KuxV2KoLVrm5htGSz4HUJ6xWayV4eoQSGem/BAOTew23xVIgNVjttM&#xA;ks5Yp7hGZhB6DRzOi/71LK/rPRmOxqCPV418cVR2u389xpyxaYQ5uY1nlk4s3G0qDIwQFGLOhIQV&#xA;B6kdMVUGnvrXVILkT289mkAF+YIWjCwMf3DgmWRfhYs3gE5n+XFWR4q7FXYqgNQ/0qVdNX7Eq870&#xA;+EHThXsZT8P+qG7gYqj8VdirsVQGpf6LImpLssI4Xg8YCaljTqYj8Q9uQG5xVH4q7FXYqh7+6a3t&#xA;yY1D3EhEdvGf2pG6dN6D7TU6KCe2KpRpejQQSTWNzPcyThnuFmFzPGJVmcuzBEkCqVkYghRtt44q&#xA;mH6Fs/8Afl1/0l3X/VTFXfoWz/35df8ASXdf9VMVS6+0hZr2KKxmnW4siLoyyXNxIgejCKNlZ2BE&#xA;m/P/ACKj9oHFU6s7pLq2SdQV5VDI32lZSVdG91YEHFVbFXYqsnmiggknlbjFEpeRvBVFSdvbFUht&#xA;7XUhqLTXV7PbNqYDQxRrAwiaNT/o5Z4nOyfGNyOXqHbbFUyOmXZBB1S6IOxBW1/6oYqh7Dy+9jbC&#xA;3ttTu1iUkgEWzHc13YwkmnTftiqhrGnXk0AsE1S6M938Knha/AikF5f7nbhtxP8ANxxVNNOuJZYW&#xA;inI+t27elcU2BYAEOPZ1IanatOoOKorFXYq7FWOzLeXGow6qt5Lb2EtbSBY1iNFdhwm/eRyf30g4&#xA;7HdeB2+LFUVB5daC7nu49SuhNcU9Q0tiNv5R6Pw17064qutfL720k8kOpXStcOXkJFsdzvQVh2Xk&#xA;S1BtUk9ziqFk0dtLsZUt7+5dp3IjgYWxDySfCqbwGiKoAoNlQeAxVG6IlxZxDSrqdrma1RTFcuFV&#xA;pYugNFAFUPwn6CftYqmeKqdzcRW1vJPKaRxqWY9Tt2A7k9hiqhp1vLHG81wKXdy3qTjY8dqLGCNi&#xA;I1ote/XviqLxV2KuxV2KoDTf9FkfTW2WEc7M+MBNAor1MR+E+3Enc4qj8VdiqAtv9MvnvDvb25aG&#xA;0HYsDSWT7xwHyJGzYqqajBMyx3NsvK6tjyjWoHNTs8RJ7OOlduQUnpiqvbzxXEEc8LcopVDo1CKg&#xA;io2O4xVbeXSWts87AtxoFRftMzEKiL7sxAGKrNPtXt4P3pDXMrGW5cdDI3Wld+K7Ktf2QMVUW/0P&#xA;UeXS2viA/gtwBRST/wAWKAvhyA7tiqPxV2KpLqGqWkmrDT29V0sxHc3Qihmlq7EmBKxK4FCnM1of&#xA;s9QTiqpe6hZXVs0XG6R9mil+p3RKSIeSPT09+LAGnfocVROjapFqdgtygKOGeKeJgysksTFJFKuF&#xA;bZhtUbih74qjGZVUsxCqoqzHYADucVSLS9bsbnnqZS5b60ALelpcnjbr9ihEf7f2z8+J+zirWo65&#xA;YWcyakVuEjULDd87W5UGNmojVMYFY3b7i3emKp/irsVSjXNSgSaHSyZPUvFd5vRjklZbdKBzSJWK&#xA;8ywQHbqSPs4qkC2GgsE0h9HcWURq1yNPmHO3H93DURV5V+BvFVqftYpZDoOqxXaz2ZaRrrT2WOZp&#xA;Y5ImZXHKJyJFQksn2tvtV7UxQmuKsU1K507WZ5+Uck66bKUs1a1nlhNzH/eO/GN1Ip+7BG/EsRsw&#xA;xVQim02Iya5badPYXEApBB9RmhYwLvMkvGPj+8IqPi4/CjdjilltrdQXdtFcwNzhnRZI2IKkqwqK&#xA;hgCPkRihCy/6ZqAg621kVkm8GnI5Rp7hAeZ9+B8cVR+KuxV2KuxV2KoTUbeV0Se3Fbq2bnEKgcx0&#xA;eMk9nXb2ND2xVXtriK5t454jWORQynod+xHYjuMVQ+ozSH0rOBitxdEjmOqRLT1JB4EAgL/lEdsV&#xA;RMMMUMKQxKEijUJGo6BVFAPuxVfiqAh/0O/a3O1veFpbfwWb7Uqf7L+8X/Z+2KuX/TNR5dbaxJCe&#xA;DXBFGIP/ABWpK+HInuuKo/FVK6to7m3eCSoVxTkuzKRurKezKd1PY4qpadcyTQMs9BdQMYrkL05q&#xA;AeQ9nVgw9jiq++u/qtu0gX1JSQkMVac5GNEWu9Knqew3xVASWLWFvFdx1mubfk126r8UySHlNRd9&#xA;6gOoH8vEbHFUTf3TPFFBZyD17wfuZVowWPYvN4UVTt25FR3xVSaGLTJoJIB6dk4S2njHRSAEhk7k&#xA;npGfbjXZcVX33+l3KacP7oqJb3/jESQkf/PRlNf8kMO4xV0P+hX7W5/3nvGaS3/yZqFpU/2X219+&#xA;ftirRC32oEEcrWxNCDuHuGH6o1PyJbxXFW9NJt3fTX/3QA1qT+1bnZR7mP7B79CftYqjJ54oIXmm&#xA;bhFGpZ28ANz0xViraldvp8+otpl0upJNzRWa2rHKlY4renrcqMr8aDqXLL9oYqnlxrIXR/r8Fu8s&#xA;7rSCx+EStPuPRPxcQysCG3oKHsMVSZdQa0hsL6GwupJJjWWUfV6zxzD1JX4rKzDjT1AAOg4DriqZ&#xA;+YNW+q6cGtleaS4pxaAoWSEkCWcMzIoWNGryJpWmKoWK/wDqOr21umnz2trPGsUwYwmOMqRHA5Ec&#xA;jtVyRF03+HspxVW17USt1a6cttLcRTsGuzEYwAhr6cb+q8YpMyFe9QCp+0MVa0vUmXWLmwa0mt4J&#xA;D6sTymIoJ3BeWEGOST4iv70D3Y+GKq9np+t21usQvbZ2qWkkNrJV3c8nc0uP2mJNBsO22Kq3o67/&#xA;AMtlr/0iyf8AZRirvR13/lstf+kWT/soxV3o67/y2Wv/AEiyf9lGKu9HXf8Alstf+kWT/soxV3o6&#xA;7/y2Wv8A0iyf9lGKu9HXf+Wy1/6RZP8AsoxVfptldWvr+vMkomkMqrHGY1QsPjABeT7TfF8ycVUp&#xA;LHUhfT3UF1ColCIqywO7IiD7IZZYxTkWb7Nd/YYqu9HXf+Wy1/6RZP8AsoxV3o67/wAtlr/0iyf9&#xA;lGKqF7p2uXVuY/r1tG4IeKUWrkpIpqrCtx2Pbv0xVda2Gs21ukEd5bFUFOTW0hZid2Zj6+7Md2Pc&#xA;4qq+jrv/AC2Wv/SLJ/2UYq70dd/5bLX/AKRZP+yjFWrex1FNQ+tz3MLhovSkjihaPkAeSElpZPsc&#xA;m7d/liq69sr6a8huLe4ijEKsFiliaUc22LikkdG4/CPYnxxVr0dd/wCWy1/6RZP+yjFUHY6LrFnL&#xA;LIt9bvy+GFWtXpFECWESUn+yGY09qDooxVFTWeszQvDLdWrxSKUkU2slCrChH+9Hhiqhp+l67Zws&#xA;h1GCeV2LyzyWz83NAqlqTgbIqr9GKr73T9curdoje2qNUNFILWQlJEPJHA+sb8WANDse+2Kt2mn6&#xA;za26QJe2zBBu7W0hZmJqzsROKszEknxxVtrDVpLm3mlu4P8AR35fu7d1YqRR05GZ9mHt1oe2Kq+p&#xA;2dxdJAIJkiMUqysJEMivwB4gqrxnZ+LDfqMVQEmi6w+oLdm+t6CjNB9Vfg0qgqkp/f8A2gpI/wCB&#xA;/lGKuj0XWE1BrsX1uVNWWD6q/BZWHF5R+/8AtFQB/wAF/McVdbaLrFvfTXS39u3qV9OI20nGMu3O&#xA;Xh/pH+7GAZvfFWrPQ9WtnmP122lWQcI0e1crHDUn0lHr04gsae1B0AxVq00HVoLaaCS+t7hZx6bm&#xA;S2kJ9EDikVfrFeKr95JPUnFWoNC1lLCW0l1GGZpiWkuWtn9UvsEeon2dAq8SB2BxVsaJrIsRbm/t&#xA;jNy9Y3P1V+fr8ufqU+sU+126U+Hpiqe4q7FWHedvzFtPLGoWlvLGXjCm41BqAlbb0bhx6VXQs5a1&#xA;I6EDvSoxVCL+bNhO4ittMulZ5Y4Fnma2Eau8ttE/ILMW+D66h3ABoRyGGlWn8yrl/J9rrCWa2167&#xA;JFdpdECGNzYfX+XKNn+B04otW2LCvShVZ1azevbRT8DH6qK/BtmXkK0PuMCqmKuxV2KuxVjvnnzW&#xA;PLejNcxqJL2USfVI3p6ZaGJp35kvHt6cbdDy8AcVSKT849EMTy22nXs8a8wsn7hFJUoi7GX1AGkl&#xA;VfsfD1O2GlTbyr5yn1w3tu1r9XuYFaW3kYoYXjaR0QVSSRqpwo5oAeq7YqnXl/UZNT0HTdSlUJLe&#xA;2sFw6LXirSxq5Ar2HLAqPxV2KuxV2KoHWtXttI02W/uamKMolFpUtLIsSD4iqj43FSSAOpxVgtt+&#xA;dOmLYxm50+5nvkRfrYthAsQf6v8AWX4mWcbJH13O+wJw0qbaB+Yf6U8wNpzWTxW8jGG3lDRsUmSW&#xA;9RkmAfkOSaeWX4Nq0PY4FTbyrrd7qi6gLr6sxtLowwS2jlkkjCI3KjfEOMheOv7XHkAAcVTzFXYq&#xA;7FXYqtkkSONpHNEQFmO52AqdhirzpPzo0mNLt7i0nmVOU9qtuIam1+qx3KNIzT8OR9Qj4W8Kgb0N&#xA;KiIfzWSfVI4E0yaO1WVre5DtCZg/NI+QAlpwRywNOXLYrtXGlZLa6zev5svNHmjj+qpax3NpKnLk&#xA;fiKSK5qVqDQ/s7Hv2Cp1irsVdirsVULiwsbmRJbi2imkiqI3kRWZeXXiSDSuKpPHZ+T7S+1BEhgF&#xA;1ctCt5E/xB5FjX0YURyV5CNEIjQeBpuMVR+mwaHcackmnwQGwugsqiONVR+nElaDcUHUVFMVTDFX&#xA;Yq7FXYq7FVK6s7S7jEV1BHPGDyCSqrrUd6MD44qkGrnybpOrWt9fRJFfMpgidVcpGlzMiM8ir+6j&#xA;DyMqmRwCeleuKphpkHl2U3IsLW3Uxk210EiRDRlEnFqAVV1dWHYg1xVMoYYYYlihRY4kHFI0AVVA&#xA;6AAbDFV2KuxV2KuxVbNDDNE0UyLJE44vG4DKwPUEHY4qk2raL5W/0J72ziBhuY2skQFKzqriP4I+&#xA;PPirOaMCAKntXFVWzbyzcam/1WK2e/RRceskaFmV2ZfUWQD4vjDKxB2PXriqPtLCxskZLO2itkY8&#xA;mWFFjBPSpCgYqr4q7FXYq7FXYqkut6D5VbRruLUbOGPTmjf6z6amI8HADgNDxkqwAHwmp6Yqhhd+&#xA;SrjVk0p7a3e/hWJFWSBTwLI7xxc2UgPwhc8a9jiqfx29vFJJJHEiSTENK6qAXIFAWI67eOKqmKux&#xA;V2KuxV2KsQ1j8vLfU9UmvnvJ4VN9b6tFFCyLW7tkt0VZC8ctYv8AQYTQUNeXtRVkOhaWNL0q3sfU&#xA;9V4gxklpxDSSMXkYLU8QXY0FdsVR2KuxV2KuxV2KuxVj+u+UYdXvzPJO0cU0MEU6qELA2l0t3A6C&#xA;RJY/tgh1Zdwe1N1Vfy15bg0KGeGFy0bmFIVO5SG2t47aJSx+03GLkx8T7YqnOKuxV2KuxV2KuxVK&#xA;PMfl+PWY7NWkKGznaYAEgMstvLaSqSu/9zcvxPZqHFUPoPlRdJvEm+tPcLBbfVYGkWNZG5yepLJJ&#xA;6KQxlmKqBRB0qaljiqf4q7FXYq7FXYq7FUBr2lfpXSp7ISek78HikpULJE6yRkioqOaCoruMVSGw&#xA;8gQWeqQ30d5K0fr/AFqe2k9NlDq1zKiRMkcT8RLfSMWdmJ4qPHFWW4q7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:FAC738E30B2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FAC738E30B2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FAC738E30B2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:16:07+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -110.427 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 110.427 li
359.995 110.427 li
359.995 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 110.427 mo
359.995 110.427 li
359.995 0 li
0 0 li
0 110.427 li
cp
clp
30.2271 89.9355 mo
30.0039 90.1729 29.7856 90.3428 29.5723 90.4448 cv
29.3594 90.5469 29.1294 90.5981 28.8823 90.5981 cv
28.3828 90.5981 27.9463 90.3892 27.5728 89.9717 cv
27.1997 89.5537 27.0127 89.0171 27.0127 88.3618 cv
27.0127 87.7061 27.2197 87.106 27.6328 86.562 cv
28.0459 86.0181 28.5776 85.7456 29.2275 85.7456 cv
29.6309 85.7456 29.9639 85.875 30.2271 86.1328 cv
30.2271 85.2852 li
30.2271 84.7651 30.2148 84.4453 30.1895 84.3262 cv
30.1646 84.207 30.125 84.126 30.0718 84.0825 cv
30.0181 84.0396 29.9512 84.0176 29.8711 84.0176 cv
29.7842 84.0176 29.6685 84.0444 29.5249 84.0977 cv
29.4595 83.9136 li
30.8306 83.3506 li
31.0566 83.3506 li
31.0566 88.6426 li
31.0566 89.1763 31.0688 89.502 31.0942 89.6196 cv
31.1191 89.7373 31.1592 89.8193 31.2144 89.8657 cv
31.2695 89.9126 31.334 89.9355 31.4077 89.9355 cv
31.498 89.9355 31.6187 89.9072 31.769 89.8506 cv
31.8242 90.0352 li
30.458 90.5981 li
30.2271 90.5981 li
30.2271 89.9355 li
cp
30.2271 89.5859 mo
30.2271 87.2407 li
30.207 87.0112 30.147 86.8032 30.0469 86.6167 cv
29.9468 86.4307 29.814 86.29 29.6489 86.1948 cv
29.4839 86.1001 29.3228 86.0527 29.1655 86.0527 cv
28.8721 86.0527 28.6099 86.1841 28.3799 86.4473 cv
28.0757 86.793 27.9238 87.2988 27.9238 87.9644 cv
27.9238 88.6362 28.0708 89.1509 28.3647 89.5088 cv
28.6582 89.8662 28.9854 90.0454 29.3462 90.0454 cv
29.6499 90.0454 29.9434 89.8921 30.2271 89.5859 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
32.8784 87.6089 mo
32.875 88.2856 33.04 88.8169 33.3735 89.2017 cv
33.707 89.5864 34.0986 89.7793 34.5483 89.7793 cv
34.8481 89.7793 35.1089 89.6973 35.3306 89.5342 cv
35.5522 89.3706 35.7383 89.0874 35.8882 88.6836 cv
36.042 88.7837 li
35.9717 89.2446 35.7686 89.6626 35.4326 90.0366 cv
35.0962 90.4111 34.6753 90.5981 34.1694 90.5981 cv
33.6201 90.5981 33.1499 90.3843 32.7588 89.9565 cv
32.3677 89.5288 32.1724 88.9541 32.1724 88.2319 cv
32.1724 87.4497 32.3726 86.8398 32.7739 86.4023 cv
33.1748 85.9644 33.6782 85.7456 34.2842 85.7456 cv
34.7969 85.7456 35.2178 85.9146 35.5474 86.2529 cv
35.877 86.5908 36.042 87.043 36.042 87.6089 cv
32.8784 87.6089 li
cp
32.8784 87.3223 mo
34.9976 87.3223 li
34.981 87.0293 34.9458 86.8228 34.8926 86.7031 cv
34.8096 86.5171 34.6851 86.3706 34.5205 86.2637 cv
34.3555 86.1572 34.1831 86.104 34.0029 86.104 cv
33.7266 86.104 33.479 86.2114 33.2607 86.4263 cv
33.0425 86.6406 32.9155 86.9395 32.8784 87.3223 cv
cp
f
36.3286 86.3291 mo
37.7358 85.7661 li
37.9253 85.7661 li
37.9253 86.8281 li
38.1621 86.4277 38.3999 86.147 38.6387 85.9868 cv
38.8774 85.8262 39.1284 85.7456 39.3921 85.7456 cv
39.8525 85.7456 40.2363 85.9258 40.5435 86.2856 cv
40.9204 86.7251 41.1089 87.2983 41.1089 88.0044 cv
41.1089 88.7939 40.8818 89.4468 40.4282 89.9634 cv
40.0547 90.3862 39.584 90.5981 39.0166 90.5981 cv
38.7695 90.5981 38.5562 90.5635 38.376 90.4937 cv
38.2422 90.4443 38.0923 90.3447 37.9253 90.1958 cv
37.9253 91.5908 li
37.9253 91.9063 37.9448 92.1064 37.9829 92.1919 cv
38.0215 92.2778 38.0884 92.3457 38.1836 92.396 cv
38.2793 92.4463 38.4521 92.4712 38.7031 92.4712 cv
38.7031 92.6558 li
36.2979 92.6558 li
36.2979 92.4712 li
36.4233 92.4712 li
36.6074 92.4746 36.7646 92.4399 36.895 92.3667 cv
36.959 92.3306 37.0083 92.2715 37.0435 92.1899 cv
37.0786 92.1089 37.0962 91.9023 37.0962 91.5703 cv
37.0962 87.2197 li
37.0962 86.9263 37.083 86.7402 37.0562 86.6611 cv
37.0298 86.582 36.9873 86.5225 36.9292 86.4829 cv
36.8711 86.4429 36.792 86.4229 36.6924 86.4229 cv
36.6123 86.4229 36.5112 86.4463 36.3882 86.4932 cv
36.3286 86.3291 li
cp
37.9253 87.124 mo
37.9253 88.8379 li
37.9253 89.2085 37.9404 89.4526 37.9702 89.5693 cv
38.0171 89.7632 38.1313 89.9336 38.3135 90.0806 cv
38.4951 90.2275 38.7246 90.3013 39.002 90.3013 cv
39.3354 90.3013 39.606 90.1709 39.813 89.9102 cv
40.083 89.5693 40.2183 89.0898 40.2183 88.4722 cv
40.2183 87.7705 40.0649 87.231 39.7578 86.853 cv
39.5439 86.5928 39.2905 86.4624 38.9966 86.4624 cv
38.8364 86.4624 38.6782 86.5024 38.521 86.5825 cv
38.4009 86.6426 38.2021 86.8232 37.9253 87.124 cv
cp
f
43.1152 84.374 mo
43.1152 85.8789 li
44.1851 85.8789 li
44.1851 86.2168 li
43.1152 86.2271 li
43.1152 89.1978 li
43.1152 89.4946 43.1577 89.6948 43.2427 89.7983 cv
43.3276 89.9014 43.4365 89.9531 43.5698 89.9531 cv
43.6797 89.9531 43.7861 89.9185 43.8892 89.8496 cv
43.9922 89.7803 44.0723 89.6782 44.1289 89.5435 cv
44.3232 89.5435 li
44.2065 89.873 44.0415 90.1206 43.8276 90.2871 cv
43.6143 90.4536 43.394 90.5366 43.167 90.5366 cv
43.0137 90.5366 42.8633 90.4941 42.7168 90.4087 cv
42.5698 90.3232 42.4614 90.2012 42.3911 90.0425 cv
42.3213 89.8833 42.2861 89.6387 42.2861 89.3071 cv
42.2861 86.2168 li
41.5596 86.2168 li
41.5596 86.0571 li
41.7432 85.9849 41.9316 85.8618 42.1235 85.6885 cv
42.3159 85.5156 42.4878 85.3091 42.6392 85.0688 cv
42.7163 84.9424 42.8242 84.7104 42.9619 84.374 cv
43.1152 84.374 li
cp
f
45.9717 83.3506 mo
45.9717 86.7002 li
46.3418 86.2939 46.6353 86.0332 46.8525 85.918 cv
47.0693 85.8032 47.2861 85.7456 47.5029 85.7456 cv
47.7632 85.7456 47.9868 85.8174 48.1738 85.9609 cv
48.3604 86.1045 48.499 86.3301 48.5889 86.6372 cv
48.6523 86.8506 48.6841 87.2412 48.6841 87.8086 cv
48.6841 89.4312 li
48.6841 89.7192 48.7075 89.9165 48.7539 90.0225 cv
48.7866 90.1021 48.8433 90.1646 48.9224 90.2109 cv
49.002 90.2573 49.1479 90.2808 49.3599 90.2808 cv
49.3599 90.4648 li
47.1182 90.4648 li
47.1182 90.2808 li
47.2227 90.2808 li
47.4351 90.2808 47.5825 90.2485 47.6655 90.1836 cv
47.7485 90.1191 47.8071 90.0239 47.8403 89.8979 cv
47.8501 89.8452 47.855 89.6895 47.855 89.4312 cv
47.855 87.8076 li
47.855 87.3066 47.8291 86.9775 47.7773 86.8208 cv
47.7256 86.6636 47.6431 86.5459 47.5293 86.4673 cv
47.416 86.3892 47.2788 86.3496 47.1187 86.3496 cv
46.9551 86.3496 46.7847 86.3931 46.6074 86.48 cv
46.4307 86.5669 46.2188 86.7417 45.9717 87.0054 cv
45.9717 89.4312 li
45.9717 89.7422 45.9888 89.936 46.0239 90.0122 cv
46.0586 90.0884 46.1235 90.1523 46.2178 90.2036 cv
46.3125 90.2549 46.4761 90.2808 46.7085 90.2808 cv
46.7085 90.4648 li
44.4463 90.4648 li
44.4463 90.2808 li
44.6484 90.2808 44.8076 90.249 44.9233 90.1865 cv
44.9897 90.1533 45.043 90.0903 45.0825 89.9976 cv
45.1226 89.9048 45.1421 89.7158 45.1421 89.4312 cv
45.1421 85.2852 li
45.1421 84.7651 45.1299 84.4453 45.105 84.3262 cv
45.0801 84.207 45.0415 84.126 44.9902 84.0825 cv
44.9385 84.0396 44.8696 84.0176 44.7832 84.0176 cv
44.7134 84.0176 44.6006 84.0444 44.4443 84.0977 cv
44.3745 83.9136 li
45.7417 83.3506 li
45.9717 83.3506 li
cp
f
52.3491 87.1113 mo
52.3491 86.3389 52.4653 85.6733 52.6987 85.1157 cv
52.9316 84.5581 53.2417 84.1426 53.6279 83.8696 cv
53.9277 83.6533 54.2373 83.5449 54.5571 83.5449 cv
55.0767 83.5449 55.543 83.8096 55.9561 84.3389 cv
56.4722 84.9951 56.7305 85.8843 56.7305 87.0063 cv
56.7305 87.792 56.6172 88.46 56.3906 89.0093 cv
56.1641 89.5586 55.875 89.9575 55.5239 90.2056 cv
55.1724 90.4536 54.8335 90.5776 54.5073 90.5776 cv
53.8613 90.5776 53.3232 90.1963 52.8936 89.4336 cv
52.5303 88.791 52.3491 88.0171 52.3491 87.1113 cv
cp
53.3315 87.2334 mo
53.3315 88.166 53.4463 88.9268 53.6753 89.5161 cv
53.8647 90.0122 54.147 90.2603 54.5225 90.2603 cv
54.7017 90.2603 54.8877 90.1797 55.0801 90.0181 cv
55.2729 89.8564 55.4189 89.5859 55.5186 89.2065 cv
55.6714 88.6338 55.7476 87.8262 55.7476 86.7842 cv
55.7476 86.0117 55.668 85.3677 55.5083 84.8511 cv
55.3892 84.4683 55.2344 84.1968 55.0454 84.0371 cv
54.9092 83.9272 54.7446 83.8726 54.5522 83.8726 cv
54.3262 83.8726 54.1255 83.9741 53.9492 84.1772 cv
53.7104 84.4536 53.5474 84.8877 53.4609 85.4805 cv
53.375 86.0732 53.3315 86.6577 53.3315 87.2334 cv
cp
f
122.358 89.9355 mo
122.135 90.1729 121.917 90.3428 121.704 90.4448 cv
121.49 90.5469 121.26 90.5981 121.014 90.5981 cv
120.514 90.5981 120.077 90.3892 119.704 89.9717 cv
119.331 89.5537 119.144 89.0171 119.144 88.3618 cv
119.144 87.7061 119.351 87.106 119.764 86.562 cv
120.177 86.0181 120.709 85.7456 121.358 85.7456 cv
121.762 85.7456 122.095 85.875 122.358 86.1328 cv
122.358 85.2852 li
122.358 84.7651 122.346 84.4453 122.321 84.3262 cv
122.295 84.207 122.256 84.126 122.203 84.0825 cv
122.149 84.0396 122.083 84.0176 122.002 84.0176 cv
121.915 84.0176 121.8 84.0444 121.656 84.0977 cv
121.591 83.9136 li
122.961 83.3506 li
123.188 83.3506 li
123.188 88.6426 li
123.188 89.1763 123.2 89.502 123.225 89.6196 cv
123.25 89.7373 123.291 89.8193 123.346 89.8657 cv
123.401 89.9126 123.465 89.9355 123.539 89.9355 cv
123.629 89.9355 123.75 89.9072 123.9 89.8506 cv
123.956 90.0352 li
122.589 90.5981 li
122.358 90.5981 li
122.358 89.9355 li
cp
122.358 89.5859 mo
122.358 87.2407 li
122.338 87.0112 122.278 86.8032 122.178 86.6167 cv
122.078 86.4307 121.945 86.29 121.78 86.1948 cv
121.615 86.1001 121.454 86.0527 121.297 86.0527 cv
121.003 86.0527 120.741 86.1841 120.511 86.4473 cv
120.207 86.793 120.055 87.2988 120.055 87.9644 cv
120.055 88.6362 120.202 89.1509 120.496 89.5088 cv
120.79 89.8662 121.117 90.0454 121.477 90.0454 cv
121.781 90.0454 122.075 89.8921 122.358 89.5859 cv
cp
f
125.01 87.6089 mo
125.006 88.2856 125.171 88.8169 125.505 89.2017 cv
125.838 89.5864 126.229 89.7793 126.68 89.7793 cv
126.979 89.7793 127.24 89.6973 127.462 89.5342 cv
127.684 89.3706 127.87 89.0874 128.02 88.6836 cv
128.173 88.7837 li
128.103 89.2446 127.9 89.6626 127.564 90.0366 cv
127.228 90.4111 126.807 90.5981 126.301 90.5981 cv
125.751 90.5981 125.281 90.3843 124.89 89.9565 cv
124.499 89.5288 124.303 88.9541 124.303 88.2319 cv
124.303 87.4497 124.504 86.8398 124.905 86.4023 cv
125.306 85.9644 125.81 85.7456 126.416 85.7456 cv
126.928 85.7456 127.349 85.9146 127.679 86.2529 cv
128.008 86.5908 128.173 87.043 128.173 87.6089 cv
125.01 87.6089 li
cp
125.01 87.3223 mo
127.129 87.3223 li
127.112 87.0293 127.077 86.8228 127.024 86.7031 cv
126.94 86.5171 126.816 86.3706 126.651 86.2637 cv
126.486 86.1572 126.314 86.104 126.134 86.104 cv
125.858 86.104 125.61 86.2114 125.392 86.4263 cv
125.174 86.6406 125.046 86.9395 125.01 87.3223 cv
cp
f
128.459 86.3291 mo
129.867 85.7661 li
130.057 85.7661 li
130.057 86.8281 li
130.293 86.4277 130.531 86.147 130.77 85.9868 cv
131.008 85.8262 131.26 85.7456 131.523 85.7456 cv
131.984 85.7456 132.368 85.9258 132.675 86.2856 cv
133.052 86.7251 133.24 87.2983 133.24 88.0044 cv
133.24 88.7939 133.013 89.4468 132.56 89.9634 cv
132.186 90.3862 131.715 90.5981 131.148 90.5981 cv
130.901 90.5981 130.688 90.5635 130.507 90.4937 cv
130.374 90.4443 130.224 90.3447 130.057 90.1958 cv
130.057 91.5908 li
130.057 91.9063 130.076 92.1064 130.114 92.1919 cv
130.153 92.2778 130.22 92.3457 130.315 92.396 cv
130.41 92.4463 130.583 92.4712 130.834 92.4712 cv
130.834 92.6558 li
128.429 92.6558 li
128.429 92.4712 li
128.554 92.4712 li
128.739 92.4746 128.896 92.4399 129.026 92.3667 cv
129.09 92.3306 129.14 92.2715 129.175 92.1899 cv
129.21 92.1089 129.228 91.9023 129.228 91.5703 cv
129.228 87.2197 li
129.228 86.9263 129.214 86.7402 129.188 86.6611 cv
129.161 86.582 129.119 86.5225 129.06 86.4829 cv
129.002 86.4429 128.923 86.4229 128.823 86.4229 cv
128.744 86.4229 128.643 86.4463 128.52 86.4932 cv
128.459 86.3291 li
cp
130.057 87.124 mo
130.057 88.8379 li
130.057 89.2085 130.072 89.4526 130.102 89.5693 cv
130.148 89.7632 130.263 89.9336 130.445 90.0806 cv
130.626 90.2275 130.856 90.3013 131.133 90.3013 cv
131.467 90.3013 131.737 90.1709 131.944 89.9102 cv
132.214 89.5693 132.35 89.0898 132.35 88.4722 cv
132.35 87.7705 132.196 87.231 131.889 86.853 cv
131.675 86.5928 131.422 86.4624 131.128 86.4624 cv
130.968 86.4624 130.809 86.5024 130.652 86.5825 cv
130.532 86.6426 130.333 86.8232 130.057 87.124 cv
cp
f
135.247 84.374 mo
135.247 85.8789 li
136.316 85.8789 li
136.316 86.2168 li
135.247 86.2271 li
135.247 89.1978 li
135.247 89.4946 135.289 89.6948 135.374 89.7983 cv
135.459 89.9014 135.568 89.9531 135.701 89.9531 cv
135.811 89.9531 135.917 89.9185 136.021 89.8496 cv
136.124 89.7803 136.204 89.6782 136.26 89.5435 cv
136.455 89.5435 li
136.338 89.873 136.172 90.1206 135.959 90.2871 cv
135.746 90.4536 135.525 90.5366 135.298 90.5366 cv
135.145 90.5366 134.995 90.4941 134.848 90.4087 cv
134.701 90.3232 134.593 90.2012 134.522 90.0425 cv
134.453 89.8833 134.417 89.6387 134.417 89.3071 cv
134.417 86.2168 li
133.69 86.2168 li
133.69 86.0571 li
133.875 85.9849 134.063 85.8618 134.255 85.6885 cv
134.447 85.5156 134.619 85.3091 134.771 85.0688 cv
134.848 84.9424 134.955 84.7104 135.093 84.374 cv
135.247 84.374 li
cp
f
138.103 83.3506 mo
138.103 86.7002 li
138.473 86.2939 138.767 86.0332 138.983 85.918 cv
139.2 85.8032 139.417 85.7456 139.634 85.7456 cv
139.895 85.7456 140.118 85.8174 140.305 85.9609 cv
140.492 86.1045 140.63 86.3301 140.72 86.6372 cv
140.784 86.8506 140.815 87.2412 140.815 87.8086 cv
140.815 89.4312 li
140.815 89.7192 140.838 89.9165 140.885 90.0225 cv
140.918 90.1021 140.974 90.1646 141.054 90.2109 cv
141.133 90.2573 141.279 90.2808 141.491 90.2808 cv
141.491 90.4648 li
139.249 90.4648 li
139.249 90.2808 li
139.354 90.2808 li
139.566 90.2808 139.714 90.2485 139.797 90.1836 cv
139.88 90.1191 139.938 90.0239 139.971 89.8979 cv
139.981 89.8452 139.986 89.6895 139.986 89.4312 cv
139.986 87.8076 li
139.986 87.3066 139.96 86.9775 139.909 86.8208 cv
139.857 86.6636 139.774 86.5459 139.661 86.4673 cv
139.547 86.3892 139.41 86.3496 139.25 86.3496 cv
139.086 86.3496 138.916 86.3931 138.739 86.48 cv
138.562 86.5669 138.35 86.7417 138.103 87.0054 cv
138.103 89.4312 li
138.103 89.7422 138.12 89.936 138.155 90.0122 cv
138.19 90.0884 138.254 90.1523 138.349 90.2036 cv
138.444 90.2549 138.607 90.2808 138.84 90.2808 cv
138.84 90.4648 li
136.577 90.4648 li
136.577 90.2808 li
136.78 90.2808 136.938 90.249 137.055 90.1865 cv
137.121 90.1533 137.174 90.0903 137.214 89.9976 cv
137.253 89.9048 137.273 89.7158 137.273 89.4312 cv
137.273 85.2852 li
137.273 84.7651 137.261 84.4453 137.236 84.3262 cv
137.211 84.207 137.173 84.126 137.122 84.0825 cv
137.07 84.0396 137.001 84.0176 136.915 84.0176 cv
136.845 84.0176 136.731 84.0444 136.576 84.0977 cv
136.506 83.9136 li
137.873 83.3506 li
138.103 83.3506 li
cp
f
145.299 84.3433 mo
146.956 83.5449 li
147.121 83.5449 li
147.121 89.2671 li
147.121 89.6484 147.137 89.8862 147.169 89.9795 cv
147.201 90.0732 147.267 90.145 147.368 90.1953 cv
147.468 90.2456 147.673 90.2739 147.981 90.2808 cv
147.981 90.4648 li
145.422 90.4648 li
145.422 90.2808 li
145.742 90.2739 145.949 90.2466 146.042 90.1978 cv
146.135 90.1494 146.2 90.0845 146.237 90.0024 cv
146.274 89.9204 146.292 89.6753 146.292 89.2671 cv
146.292 85.6025 li
146.292 85.1089 146.275 84.792 146.242 84.6519 cv
146.218 84.5454 146.176 84.4668 146.114 84.417 cv
146.052 84.3667 145.978 84.3418 145.891 84.3418 cv
145.767 84.3418 145.595 84.3936 145.375 84.4971 cv
145.299 84.3433 li
cp
f
214.49 89.9355 mo
214.266 90.1729 214.048 90.3428 213.834 90.4448 cv
213.622 90.5469 213.391 90.5981 213.145 90.5981 cv
212.645 90.5981 212.208 90.3892 211.835 89.9717 cv
211.461 89.5537 211.275 89.0171 211.275 88.3618 cv
211.275 87.7061 211.482 87.106 211.895 86.562 cv
212.308 86.0181 212.84 85.7456 213.49 85.7456 cv
213.893 85.7456 214.226 85.875 214.49 86.1328 cv
214.49 85.2852 li
214.49 84.7651 214.477 84.4453 214.452 84.3262 cv
214.427 84.207 214.387 84.126 214.334 84.0825 cv
214.281 84.0396 214.213 84.0176 214.133 84.0176 cv
214.046 84.0176 213.931 84.0444 213.788 84.0977 cv
213.722 83.9136 li
215.093 83.3506 li
215.319 83.3506 li
215.319 88.6426 li
215.319 89.1763 215.332 89.502 215.356 89.6196 cv
215.381 89.7373 215.421 89.8193 215.477 89.8657 cv
215.532 89.9126 215.596 89.9355 215.67 89.9355 cv
215.76 89.9355 215.881 89.9072 216.032 89.8506 cv
216.086 90.0352 li
214.72 90.5981 li
214.49 90.5981 li
214.49 89.9355 li
cp
214.49 89.5859 mo
214.49 87.2407 li
214.469 87.0112 214.41 86.8032 214.309 86.6167 cv
214.209 86.4307 214.077 86.29 213.912 86.1948 cv
213.747 86.1001 213.585 86.0527 213.428 86.0527 cv
213.134 86.0527 212.873 86.1841 212.642 86.4473 cv
212.338 86.793 212.186 87.2988 212.186 87.9644 cv
212.186 88.6362 212.333 89.1509 212.627 89.5088 cv
212.92 89.8662 213.248 90.0454 213.608 90.0454 cv
213.913 90.0454 214.206 89.8921 214.49 89.5859 cv
cp
f
217.141 87.6089 mo
217.137 88.2856 217.302 88.8169 217.636 89.2017 cv
217.969 89.5864 218.361 89.7793 218.811 89.7793 cv
219.111 89.7793 219.372 89.6973 219.593 89.5342 cv
219.815 89.3706 220 89.0874 220.151 88.6836 cv
220.304 88.7837 li
220.234 89.2446 220.031 89.6626 219.695 90.0366 cv
219.359 90.4111 218.938 90.5981 218.432 90.5981 cv
217.882 90.5981 217.413 90.3843 217.021 89.9565 cv
216.63 89.5288 216.435 88.9541 216.435 88.2319 cv
216.435 87.4497 216.635 86.8398 217.037 86.4023 cv
217.437 85.9644 217.941 85.7456 218.546 85.7456 cv
219.059 85.7456 219.48 85.9146 219.81 86.2529 cv
220.139 86.5908 220.304 87.043 220.304 87.6089 cv
217.141 87.6089 li
cp
217.141 87.3223 mo
219.26 87.3223 li
219.244 87.0293 219.208 86.8228 219.155 86.7031 cv
219.072 86.5171 218.948 86.3706 218.783 86.2637 cv
218.618 86.1572 218.446 86.104 218.265 86.104 cv
217.989 86.104 217.742 86.2114 217.523 86.4263 cv
217.305 86.6406 217.177 86.9395 217.141 87.3223 cv
cp
f
220.59 86.3291 mo
221.999 85.7661 li
222.188 85.7661 li
222.188 86.8281 li
222.424 86.4277 222.663 86.147 222.901 85.9868 cv
223.139 85.8262 223.391 85.7456 223.655 85.7456 cv
224.115 85.7456 224.499 85.9258 224.806 86.2856 cv
225.183 86.7251 225.372 87.2983 225.372 88.0044 cv
225.372 88.7939 225.144 89.4468 224.691 89.9634 cv
224.317 90.3862 223.846 90.5981 223.279 90.5981 cv
223.032 90.5981 222.819 90.5635 222.638 90.4937 cv
222.504 90.4443 222.355 90.3447 222.188 90.1958 cv
222.188 91.5908 li
222.188 91.9063 222.207 92.1064 222.246 92.1919 cv
222.284 92.2778 222.351 92.3457 222.446 92.396 cv
222.542 92.4463 222.714 92.4712 222.965 92.4712 cv
222.965 92.6558 li
220.56 92.6558 li
220.56 92.4712 li
220.686 92.4712 li
220.87 92.4746 221.027 92.4399 221.158 92.3667 cv
221.221 92.3306 221.271 92.2715 221.306 92.1899 cv
221.341 92.1089 221.359 91.9023 221.359 91.5703 cv
221.359 87.2197 li
221.359 86.9263 221.345 86.7402 221.319 86.6611 cv
221.292 86.582 221.25 86.5225 221.192 86.4829 cv
221.133 86.4429 221.054 86.4229 220.955 86.4229 cv
220.875 86.4229 220.774 86.4463 220.651 86.4932 cv
220.59 86.3291 li
cp
222.188 87.124 mo
222.188 88.8379 li
222.188 89.2085 222.203 89.4526 222.233 89.5693 cv
222.28 89.7632 222.394 89.9336 222.576 90.0806 cv
222.757 90.2275 222.987 90.3013 223.264 90.3013 cv
223.598 90.3013 223.869 90.1709 224.076 89.9102 cv
224.345 89.5693 224.481 89.0898 224.481 88.4722 cv
224.481 87.7705 224.328 87.231 224.02 86.853 cv
223.806 86.5928 223.553 86.4624 223.259 86.4624 cv
223.099 86.4624 222.94 86.5024 222.784 86.5825 cv
222.664 86.6426 222.464 86.8232 222.188 87.124 cv
cp
f
227.377 84.374 mo
227.377 85.8789 li
228.448 85.8789 li
228.448 86.2168 li
227.377 86.2271 li
227.377 89.1978 li
227.377 89.4946 227.42 89.6948 227.505 89.7983 cv
227.59 89.9014 227.699 89.9531 227.833 89.9531 cv
227.942 89.9531 228.048 89.9185 228.152 89.8496 cv
228.254 89.7803 228.334 89.6782 228.391 89.5435 cv
228.585 89.5435 li
228.469 89.873 228.304 90.1206 228.09 90.2871 cv
227.876 90.4536 227.657 90.5366 227.429 90.5366 cv
227.276 90.5366 227.125 90.4941 226.979 90.4087 cv
226.833 90.3232 226.724 90.2012 226.654 90.0425 cv
226.583 89.8833 226.548 89.6387 226.548 89.3071 cv
226.548 86.2168 li
225.822 86.2168 li
225.822 86.0571 li
226.005 85.9849 226.194 85.8618 226.386 85.6885 cv
226.579 85.5156 226.75 85.3091 226.902 85.0688 cv
226.979 84.9424 227.086 84.7104 227.224 84.374 cv
227.377 84.374 li
cp
f
230.234 83.3506 mo
230.234 86.7002 li
230.604 86.2939 230.898 86.0332 231.115 85.918 cv
231.332 85.8032 231.548 85.7456 231.765 85.7456 cv
232.026 85.7456 232.25 85.8174 232.436 85.9609 cv
232.623 86.1045 232.761 86.3301 232.851 86.6372 cv
232.915 86.8506 232.947 87.2412 232.947 87.8086 cv
232.947 89.4312 li
232.947 89.7192 232.97 89.9165 233.016 90.0225 cv
233.049 90.1021 233.106 90.1646 233.185 90.2109 cv
233.264 90.2573 233.411 90.2808 233.623 90.2808 cv
233.623 90.4648 li
231.38 90.4648 li
231.38 90.2808 li
231.485 90.2808 li
231.698 90.2808 231.845 90.2485 231.928 90.1836 cv
232.011 90.1191 232.069 90.0239 232.102 89.8979 cv
232.113 89.8452 232.118 89.6895 232.118 89.4312 cv
232.118 87.8076 li
232.118 87.3066 232.091 86.9775 232.04 86.8208 cv
231.988 86.6636 231.906 86.5459 231.792 86.4673 cv
231.678 86.3892 231.542 86.3496 231.381 86.3496 cv
231.217 86.3496 231.047 86.3931 230.87 86.48 cv
230.693 86.5669 230.481 86.7417 230.234 87.0054 cv
230.234 89.4312 li
230.234 89.7422 230.251 89.936 230.287 90.0122 cv
230.321 90.0884 230.385 90.1523 230.48 90.2036 cv
230.575 90.2549 230.739 90.2808 230.971 90.2808 cv
230.971 90.4648 li
228.708 90.4648 li
228.708 90.2808 li
228.911 90.2808 229.07 90.249 229.186 90.1865 cv
229.252 90.1533 229.305 90.0903 229.345 89.9976 cv
229.385 89.9048 229.405 89.7158 229.405 89.4312 cv
229.405 85.2852 li
229.405 84.7651 229.392 84.4453 229.368 84.3262 cv
229.342 84.207 229.304 84.126 229.252 84.0825 cv
229.201 84.0396 229.132 84.0176 229.045 84.0176 cv
228.976 84.0176 228.863 84.0444 228.707 84.0977 cv
228.637 83.9136 li
230.004 83.3506 li
230.234 83.3506 li
cp
f
240.931 89.1475 mo
240.457 90.4648 li
236.458 90.4648 li
236.458 90.2769 li
237.634 89.2046 238.462 88.3291 238.942 87.6499 cv
239.422 86.9707 239.662 86.3496 239.662 85.7866 cv
239.662 85.3569 239.53 85.0039 239.267 84.7275 cv
239.003 84.4507 238.689 84.3125 238.322 84.3125 cv
237.989 84.3125 237.69 84.4092 237.424 84.6016 cv
237.16 84.7944 236.964 85.0767 236.837 85.4487 cv
236.653 85.4487 li
236.736 84.8359 236.95 84.3652 237.295 84.0371 cv
237.641 83.709 238.073 83.5449 238.589 83.5449 cv
239.14 83.5449 239.6 83.7217 239.969 84.0752 cv
240.337 84.4287 240.522 84.8457 240.522 85.3262 cv
240.522 85.6694 240.442 86.0132 240.282 86.356 cv
240.035 86.896 239.635 87.4673 239.082 88.0708 cv
238.251 88.9761 237.733 89.5186 237.527 89.6973 cv
239.289 89.6973 li
239.647 89.6973 239.898 89.6841 240.042 89.6572 cv
240.187 89.6304 240.317 89.5767 240.433 89.4946 cv
240.549 89.4131 240.651 89.2974 240.737 89.1475 cv
240.931 89.1475 li
cp
f
306.621 89.9355 mo
306.398 90.1729 306.179 90.3428 305.966 90.4448 cv
305.752 90.5469 305.523 90.5981 305.276 90.5981 cv
304.776 90.5981 304.339 90.3892 303.966 89.9717 cv
303.593 89.5537 303.407 89.0171 303.407 88.3618 cv
303.407 87.7061 303.613 87.106 304.026 86.562 cv
304.44 86.0181 304.971 85.7456 305.621 85.7456 cv
306.024 85.7456 306.358 85.875 306.621 86.1328 cv
306.621 85.2852 li
306.621 84.7651 306.608 84.4453 306.583 84.3262 cv
306.558 84.207 306.519 84.126 306.465 84.0825 cv
306.412 84.0396 306.345 84.0176 306.264 84.0176 cv
306.177 84.0176 306.062 84.0444 305.918 84.0977 cv
305.853 83.9136 li
307.224 83.3506 li
307.45 83.3506 li
307.45 88.6426 li
307.45 89.1763 307.462 89.502 307.488 89.6196 cv
307.513 89.7373 307.553 89.8193 307.608 89.8657 cv
307.664 89.9126 307.728 89.9355 307.801 89.9355 cv
307.892 89.9355 308.012 89.9072 308.163 89.8506 cv
308.218 90.0352 li
306.852 90.5981 li
306.621 90.5981 li
306.621 89.9355 li
cp
306.621 89.5859 mo
306.621 87.2407 li
306.601 87.0112 306.541 86.8032 306.441 86.6167 cv
306.34 86.4307 306.208 86.29 306.042 86.1948 cv
305.877 86.1001 305.716 86.0527 305.559 86.0527 cv
305.265 86.0527 305.003 86.1841 304.773 86.4473 cv
304.469 86.793 304.318 87.2988 304.318 87.9644 cv
304.318 88.6362 304.464 89.1509 304.758 89.5088 cv
305.052 89.8662 305.379 90.0454 305.74 90.0454 cv
306.043 90.0454 306.337 89.8921 306.621 89.5859 cv
cp
f
309.272 87.6089 mo
309.269 88.2856 309.434 88.8169 309.767 89.2017 cv
310.1 89.5864 310.492 89.7793 310.942 89.7793 cv
311.242 89.7793 311.502 89.6973 311.724 89.5342 cv
311.946 89.3706 312.131 89.0874 312.282 88.6836 cv
312.435 88.7837 li
312.366 89.2446 312.163 89.6626 311.826 90.0366 cv
311.49 90.4111 311.069 90.5981 310.563 90.5981 cv
310.014 90.5981 309.543 90.3843 309.153 89.9565 cv
308.761 89.5288 308.566 88.9541 308.566 88.2319 cv
308.566 87.4497 308.766 86.8398 309.167 86.4023 cv
309.569 85.9644 310.072 85.7456 310.678 85.7456 cv
311.19 85.7456 311.612 85.9146 311.941 86.2529 cv
312.271 86.5908 312.435 87.043 312.435 87.6089 cv
309.272 87.6089 li
cp
309.272 87.3223 mo
311.391 87.3223 li
311.375 87.0293 311.339 86.8228 311.287 86.7031 cv
311.203 86.5171 311.079 86.3706 310.914 86.2637 cv
310.749 86.1572 310.577 86.104 310.397 86.104 cv
310.121 86.104 309.873 86.2114 309.655 86.4263 cv
309.436 86.6406 309.309 86.9395 309.272 87.3223 cv
cp
f
312.722 86.3291 mo
314.129 85.7661 li
314.319 85.7661 li
314.319 86.8281 li
314.556 86.4277 314.793 86.147 315.032 85.9868 cv
315.271 85.8262 315.522 85.7456 315.786 85.7456 cv
316.247 85.7456 316.629 85.9258 316.937 86.2856 cv
317.314 86.7251 317.502 87.2983 317.502 88.0044 cv
317.502 88.7939 317.276 89.4468 316.822 89.9634 cv
316.448 90.3862 315.977 90.5981 315.41 90.5981 cv
315.164 90.5981 314.95 90.5635 314.769 90.4937 cv
314.636 90.4443 314.486 90.3447 314.319 90.1958 cv
314.319 91.5908 li
314.319 91.9063 314.338 92.1064 314.376 92.1919 cv
314.416 92.2778 314.482 92.3457 314.578 92.396 cv
314.672 92.4463 314.846 92.4712 315.097 92.4712 cv
315.097 92.6558 li
312.691 92.6558 li
312.691 92.4712 li
312.817 92.4712 li
313.001 92.4746 313.159 92.4399 313.289 92.3667 cv
313.352 92.3306 313.402 92.2715 313.437 92.1899 cv
313.472 92.1089 313.49 91.9023 313.49 91.5703 cv
313.49 87.2197 li
313.49 86.9263 313.476 86.7402 313.45 86.6611 cv
313.423 86.582 313.38 86.5225 313.323 86.4829 cv
313.264 86.4429 313.186 86.4229 313.085 86.4229 cv
313.006 86.4229 312.905 86.4463 312.782 86.4932 cv
312.722 86.3291 li
cp
314.319 87.124 mo
314.319 88.8379 li
314.319 89.2085 314.333 89.4526 314.364 89.5693 cv
314.411 89.7632 314.525 89.9336 314.707 90.0806 cv
314.889 90.2275 315.119 90.3013 315.395 90.3013 cv
315.729 90.3013 316 90.1709 316.207 89.9102 cv
316.477 89.5693 316.612 89.0898 316.612 88.4722 cv
316.612 87.7705 316.458 87.231 316.151 86.853 cv
315.938 86.5928 315.684 86.4624 315.39 86.4624 cv
315.23 86.4624 315.072 86.5024 314.915 86.5825 cv
314.794 86.6426 314.596 86.8232 314.319 87.124 cv
cp
f
319.509 84.374 mo
319.509 85.8789 li
320.579 85.8789 li
320.579 86.2168 li
319.509 86.2271 li
319.509 89.1978 li
319.509 89.4946 319.551 89.6948 319.636 89.7983 cv
319.721 89.9014 319.831 89.9531 319.963 89.9531 cv
320.073 89.9531 320.179 89.9185 320.283 89.8496 cv
320.386 89.7803 320.465 89.6782 320.522 89.5435 cv
320.717 89.5435 li
320.6 89.873 320.435 90.1206 320.221 90.2871 cv
320.008 90.4536 319.788 90.5366 319.561 90.5366 cv
319.407 90.5366 319.257 90.4941 319.11 90.4087 cv
318.963 90.3232 318.855 90.2012 318.785 90.0425 cv
318.715 89.8833 318.68 89.6387 318.68 89.3071 cv
318.68 86.2168 li
317.953 86.2168 li
317.953 86.0571 li
318.137 85.9849 318.325 85.8618 318.517 85.6885 cv
318.709 85.5156 318.881 85.3091 319.033 85.0688 cv
319.11 84.9424 319.217 84.7104 319.355 84.374 cv
319.509 84.374 li
cp
f
322.365 83.3506 mo
322.365 86.7002 li
322.736 86.2939 323.029 86.0332 323.246 85.918 cv
323.462 85.8032 323.68 85.7456 323.897 85.7456 cv
324.157 85.7456 324.38 85.8174 324.567 85.9609 cv
324.754 86.1045 324.893 86.3301 324.983 86.6372 cv
325.046 86.8506 325.078 87.2412 325.078 87.8086 cv
325.078 89.4312 li
325.078 89.7192 325.101 89.9165 325.147 90.0225 cv
325.18 90.1021 325.237 90.1646 325.316 90.2109 cv
325.396 90.2573 325.542 90.2808 325.753 90.2808 cv
325.753 90.4648 li
323.511 90.4648 li
323.511 90.2808 li
323.616 90.2808 li
323.829 90.2808 323.976 90.2485 324.059 90.1836 cv
324.142 90.1191 324.201 90.0239 324.234 89.8979 cv
324.244 89.8452 324.249 89.6895 324.249 89.4312 cv
324.249 87.8076 li
324.249 87.3066 324.223 86.9775 324.17 86.8208 cv
324.12 86.6636 324.037 86.5459 323.923 86.4673 cv
323.809 86.3892 323.672 86.3496 323.512 86.3496 cv
323.348 86.3496 323.178 86.3931 323.001 86.48 cv
322.825 86.5669 322.612 86.7417 322.365 87.0054 cv
322.365 89.4312 li
322.365 89.7422 322.382 89.936 322.417 90.0122 cv
322.453 90.0884 322.517 90.1523 322.612 90.2036 cv
322.707 90.2549 322.87 90.2808 323.102 90.2808 cv
323.102 90.4648 li
320.839 90.4648 li
320.839 90.2808 li
321.042 90.2808 321.201 90.249 321.317 90.1865 cv
321.383 90.1533 321.436 90.0903 321.476 89.9976 cv
321.516 89.9048 321.536 89.7158 321.536 89.4312 cv
321.536 85.2852 li
321.536 84.7651 321.523 84.4453 321.499 84.3262 cv
321.473 84.207 321.435 84.126 321.383 84.0825 cv
321.333 84.0396 321.263 84.0176 321.177 84.0176 cv
321.107 84.0176 320.994 84.0444 320.837 84.0977 cv
320.768 83.9136 li
322.135 83.3506 li
322.365 83.3506 li
cp
f
328.886 84.978 mo
329.08 84.5205 329.324 84.167 329.62 83.918 cv
329.915 83.6694 330.283 83.5449 330.723 83.5449 cv
331.267 83.5449 331.684 83.7212 331.974 84.0742 cv
332.195 84.3374 332.305 84.6187 332.305 84.9185 cv
332.305 85.4111 331.995 85.9209 331.374 86.4468 cv
331.792 86.6099 332.108 86.8433 332.322 87.146 cv
332.536 87.4492 332.643 87.8057 332.643 88.2148 cv
332.643 88.8008 332.456 89.3086 332.083 89.7383 cv
331.595 90.2979 330.889 90.5776 329.964 90.5776 cv
329.507 90.5776 329.197 90.521 329.032 90.4072 cv
328.866 90.2939 328.784 90.1724 328.784 90.042 cv
328.784 89.9453 328.823 89.8604 328.901 89.7871 cv
328.98 89.7134 329.075 89.6768 329.184 89.6768 cv
329.268 89.6768 329.353 89.6899 329.44 89.7173 cv
329.497 89.7339 329.625 89.7959 329.826 89.9019 cv
330.027 90.0083 330.166 90.0718 330.242 90.0918 cv
330.366 90.1289 330.498 90.1475 330.638 90.1475 cv
330.979 90.1475 331.275 90.0161 331.527 89.7524 cv
331.78 89.4893 331.906 89.1772 331.906 88.8174 cv
331.906 88.5537 331.847 88.2974 331.73 88.0474 cv
331.643 87.8604 331.548 87.7188 331.445 87.6221 cv
331.3 87.4888 331.103 87.3677 330.853 87.2598 cv
330.602 87.1514 330.346 87.0972 330.085 87.0972 cv
329.925 87.0972 li
329.925 86.9434 li
330.189 86.9102 330.453 86.8154 330.718 86.6587 cv
330.983 86.502 331.175 86.314 331.295 86.0942 cv
331.416 85.8745 331.476 85.6328 331.476 85.3696 cv
331.476 85.0264 331.368 84.7495 331.153 84.5376 cv
330.937 84.3262 330.669 84.2207 330.348 84.2207 cv
329.831 84.2207 329.399 84.4995 329.051 85.0581 cv
328.886 84.978 li
cp
f
39.3892 107.294 mo
39.3892 107.489 li
38.8853 107.236 38.4644 106.939 38.1274 106.599 cv
37.6465 106.116 37.2759 105.546 37.0156 104.89 cv
36.7554 104.234 36.6255 103.553 36.6255 102.846 cv
36.6255 101.813 36.8804 100.872 37.3911 100.021 cv
37.9019 99.1689 38.5679 98.5601 39.3892 98.1938 cv
39.3892 98.4087 li
38.9775 98.6348 38.6396 98.9443 38.3755 99.3369 cv
38.1113 99.729 37.9136 100.227 37.7832 100.829 cv
37.6528 101.431 37.5874 102.059 37.5874 102.714 cv
37.5874 103.426 37.6426 104.073 37.7529 104.655 cv
37.8403 105.114 37.9453 105.482 38.0693 105.76 cv
38.1929 106.038 38.3594 106.305 38.5688 106.561 cv
38.7778 106.817 39.0513 107.062 39.3892 107.294 cv
cp
f
42.5215 104.642 mo
42.0518 105.007 41.7568 105.218 41.6372 105.275 cv
41.457 105.358 41.2656 105.4 41.0625 105.4 cv
40.7456 105.4 40.4849 105.292 40.2798 105.075 cv
40.0752 104.858 39.9727 104.573 39.9727 104.22 cv
39.9727 103.996 40.0225 103.803 40.1226 103.639 cv
40.2593 103.412 40.4966 103.199 40.835 102.999 cv
41.1729 102.798 41.7354 102.555 42.5215 102.268 cv
42.5215 102.088 li
42.5215 101.633 42.4492 101.32 42.3047 101.151 cv
42.1602 100.981 41.9502 100.896 41.6743 100.896 cv
41.4648 100.896 41.2988 100.953 41.1758 101.066 cv
41.0498 101.18 40.9863 101.31 40.9863 101.457 cv
40.9966 101.747 li
40.9966 101.9 40.957 102.019 40.8784 102.102 cv
40.7993 102.186 40.6963 102.227 40.5688 102.227 cv
40.4448 102.227 40.3438 102.184 40.2646 102.097 cv
40.186 102.01 40.147 101.892 40.147 101.741 cv
40.147 101.454 40.2935 101.19 40.5874 100.95 cv
40.8809 100.709 41.2935 100.589 41.8237 100.589 cv
42.231 100.589 42.5649 100.658 42.8252 100.794 cv
43.022 100.897 43.1675 101.06 43.2607 101.279 cv
43.3208 101.423 43.3511 101.716 43.3511 102.16 cv
43.3511 103.715 li
43.3511 104.152 43.3594 104.42 43.376 104.518 cv
43.3926 104.617 43.4204 104.683 43.459 104.716 cv
43.4976 104.749 43.5415 104.766 43.5918 104.766 cv
43.6455 104.766 43.6924 104.754 43.7324 104.731 cv
43.8027 104.688 43.9385 104.566 44.1392 104.367 cv
44.1392 104.646 li
43.7642 105.149 43.4058 105.4 43.064 105.4 cv
42.8999 105.4 42.7695 105.343 42.6724 105.229 cv
42.5752 105.114 42.5249 104.918 42.5215 104.642 cv
cp
42.5215 104.317 mo
42.5215 102.575 li
42.0156 102.775 41.6885 102.916 41.541 103 cv
41.2764 103.146 41.0869 103.299 40.9727 103.459 cv
40.8589 103.619 40.8018 103.793 40.8018 103.983 cv
40.8018 104.223 40.874 104.421 41.0181 104.58 cv
41.1621 104.738 41.3281 104.817 41.5161 104.817 cv
41.771 104.817 42.106 104.65 42.5215 104.317 cv
cp
f
44.3848 98.4087 mo
44.3848 98.1938 li
44.8921 98.4434 45.3145 98.7383 45.6514 99.0781 cv
46.1289 99.5645 46.4976 100.135 46.7583 100.79 cv
47.0186 101.444 47.1489 102.126 47.1489 102.836 cv
47.1489 103.869 46.894 104.811 46.3853 105.662 cv
45.876 106.513 45.2095 107.122 44.3848 107.489 cv
44.3848 107.294 li
44.7964 107.065 45.1348 106.754 45.4009 106.364 cv
45.667 105.973 45.8643 105.476 45.9932 104.872 cv
46.1221 104.269 46.1865 103.639 46.1865 102.984 cv
46.1865 102.275 46.1313 101.628 46.021 101.043 cv
45.937 100.584 45.8325 100.216 45.707 99.9404 cv
45.5815 99.6646 45.415 99.3979 45.2075 99.1421 cv
45.0005 98.8857 44.7261 98.6416 44.3848 98.4087 cv
cp
f
131.234 107.294 mo
131.234 107.489 li
130.729 107.236 130.309 106.939 129.972 106.599 cv
129.491 106.116 129.121 105.546 128.86 104.89 cv
128.6 104.234 128.47 103.553 128.47 102.846 cv
128.47 101.813 128.725 100.872 129.236 100.021 cv
129.747 99.1689 130.413 98.5601 131.234 98.1938 cv
131.234 98.4087 li
130.822 98.6348 130.484 98.9443 130.22 99.3369 cv
129.956 99.729 129.758 100.227 129.628 100.829 cv
129.497 101.431 129.432 102.059 129.432 102.714 cv
129.432 103.426 129.487 104.073 129.598 104.655 cv
129.685 105.114 129.79 105.482 129.914 105.76 cv
130.038 106.038 130.204 106.305 130.413 106.561 cv
130.623 106.817 130.896 107.062 131.234 107.294 cv
cp
f
133.036 101.52 mo
133.478 100.899 133.955 100.589 134.468 100.589 cv
134.937 100.589 135.346 100.79 135.695 101.191 cv
136.044 101.593 136.219 102.142 136.219 102.838 cv
136.219 103.651 135.949 104.305 135.41 104.802 cv
134.946 105.228 134.43 105.441 133.86 105.441 cv
133.594 105.441 133.323 105.393 133.048 105.295 cv
132.773 105.199 132.493 105.053 132.206 104.858 cv
132.206 100.128 li
132.206 99.6094 132.194 99.2905 132.168 99.1704 cv
132.144 99.0508 132.104 98.9692 132.051 98.9258 cv
131.997 98.8828 131.93 98.8608 131.85 98.8608 cv
131.756 98.8608 131.639 98.8877 131.499 98.9409 cv
131.428 98.7568 li
132.81 98.1938 li
133.036 98.1938 li
133.036 101.52 li
cp
133.036 101.839 mo
133.036 104.57 li
133.205 104.736 133.381 104.861 133.563 104.946 cv
133.744 105.031 133.93 105.073 134.12 105.073 cv
134.423 105.073 134.706 104.907 134.967 104.575 cv
135.229 104.242 135.359 103.759 135.359 103.125 cv
135.359 102.54 135.229 102.09 134.967 101.777 cv
134.706 101.463 134.408 101.306 134.075 101.306 cv
133.898 101.306 133.722 101.351 133.545 101.44 cv
133.412 101.507 133.242 101.64 133.036 101.839 cv
cp
f
136.803 98.4087 mo
136.803 98.1938 li
137.31 98.4434 137.732 98.7383 138.069 99.0781 cv
138.547 99.5645 138.916 100.135 139.176 100.79 cv
139.437 101.444 139.566 102.126 139.566 102.836 cv
139.566 103.869 139.312 104.811 138.803 105.662 cv
138.294 106.513 137.627 107.122 136.803 107.489 cv
136.803 107.294 li
137.214 107.065 137.553 106.754 137.819 106.364 cv
138.085 105.973 138.282 105.476 138.411 104.872 cv
138.54 104.269 138.604 103.639 138.604 102.984 cv
138.604 102.275 138.549 101.628 138.439 101.043 cv
138.355 100.584 138.25 100.216 138.125 99.9404 cv
138 99.6646 137.833 99.3979 137.625 99.1421 cv
137.418 98.8857 137.144 98.6416 136.803 98.4087 cv
cp
f
223.652 107.294 mo
223.652 107.489 li
223.148 107.236 222.727 106.939 222.39 106.599 cv
221.909 106.116 221.539 105.546 221.278 104.89 cv
221.018 104.234 220.887 103.553 220.887 102.846 cv
220.887 101.813 221.143 100.872 221.654 100.021 cv
222.165 99.1689 222.831 98.5601 223.652 98.1938 cv
223.652 98.4087 li
223.24 98.6348 222.902 98.9443 222.638 99.3369 cv
222.374 99.729 222.176 100.227 222.045 100.829 cv
221.916 101.431 221.85 102.059 221.85 102.714 cv
221.85 103.426 221.905 104.073 222.015 104.655 cv
222.102 105.114 222.208 105.482 222.332 105.76 cv
222.456 106.038 222.622 106.305 222.831 106.561 cv
223.041 106.817 223.314 107.062 223.652 107.294 cv
cp
f
228.094 103.566 mo
227.971 104.171 227.729 104.635 227.37 104.958 cv
227.009 105.28 226.612 105.441 226.174 105.441 cv
225.655 105.441 225.202 105.223 224.815 104.787 cv
224.428 104.351 224.235 103.761 224.235 103.018 cv
224.235 102.298 224.449 101.713 224.877 101.264 cv
225.305 100.814 225.819 100.589 226.417 100.589 cv
226.868 100.589 227.237 100.708 227.527 100.947 cv
227.817 101.185 227.961 101.433 227.961 101.689 cv
227.961 101.816 227.92 101.918 227.839 101.997 cv
227.757 102.075 227.643 102.114 227.497 102.114 cv
227.3 102.114 227.154 102.051 227.057 101.923 cv
226.998 101.853 226.958 101.719 226.94 101.521 cv
226.921 101.323 226.854 101.172 226.738 101.068 cv
226.621 100.967 226.459 100.917 226.252 100.917 cv
225.919 100.917 225.652 101.04 225.449 101.287 cv
225.178 101.615 225.043 102.047 225.043 102.584 cv
225.043 103.132 225.178 103.616 225.447 104.035 cv
225.715 104.454 226.078 104.664 226.535 104.664 cv
226.862 104.664 227.156 104.554 227.416 104.334 cv
227.599 104.182 227.778 103.902 227.951 103.497 cv
228.094 103.566 li
cp
f
228.647 98.4087 mo
228.647 98.1938 li
229.155 98.4434 229.577 98.7383 229.914 99.0781 cv
230.391 99.5645 230.76 100.135 231.02 100.79 cv
231.281 101.444 231.411 102.126 231.411 102.836 cv
231.411 103.869 231.157 104.811 230.648 105.662 cv
230.138 106.513 229.471 107.122 228.647 107.489 cv
228.647 107.294 li
229.059 107.065 229.397 106.754 229.664 106.364 cv
229.929 105.973 230.126 105.476 230.255 104.872 cv
230.384 104.269 230.449 103.639 230.449 102.984 cv
230.449 102.275 230.394 101.628 230.284 101.043 cv
230.2 100.584 230.095 100.216 229.969 99.9404 cv
229.844 99.6646 229.677 99.3979 229.47 99.1421 cv
229.262 98.8857 228.989 98.6416 228.647 98.4087 cv
cp
f
315.497 107.294 mo
315.497 107.489 li
314.992 107.236 314.572 106.939 314.234 106.599 cv
313.753 106.116 313.383 105.546 313.123 104.89 cv
312.863 104.234 312.732 103.553 312.732 102.846 cv
312.732 101.813 312.988 100.872 313.499 100.021 cv
314.009 99.1689 314.675 98.5601 315.497 98.1938 cv
315.497 98.4087 li
315.084 98.6348 314.747 98.9443 314.482 99.3369 cv
314.218 99.729 314.021 100.227 313.89 100.829 cv
313.759 101.431 313.695 102.059 313.695 102.714 cv
313.695 103.426 313.75 104.073 313.86 104.655 cv
313.947 105.114 314.052 105.482 314.176 105.76 cv
314.3 106.038 314.466 106.305 314.675 106.561 cv
314.884 106.817 315.159 107.062 315.497 107.294 cv
cp
f
319.274 104.779 mo
319.05 105.017 318.832 105.186 318.619 105.288 cv
318.406 105.39 318.175 105.441 317.929 105.441 cv
317.429 105.441 316.993 105.232 316.619 104.815 cv
316.246 104.397 316.059 103.86 316.059 103.205 cv
316.059 102.549 316.266 101.95 316.679 101.405 cv
317.092 100.861 317.624 100.589 318.274 100.589 cv
318.677 100.589 319.01 100.718 319.274 100.976 cv
319.274 100.128 li
319.274 99.6084 319.261 99.2886 319.236 99.1694 cv
319.21 99.0503 319.171 98.9692 319.118 98.9258 cv
319.064 98.8828 318.998 98.8608 318.917 98.8608 cv
318.831 98.8608 318.715 98.8877 318.571 98.9409 cv
318.505 98.7568 li
319.876 98.1938 li
320.103 98.1938 li
320.103 103.486 li
320.103 104.02 320.116 104.345 320.14 104.463 cv
320.166 104.581 320.206 104.663 320.26 104.709 cv
320.316 104.756 320.38 104.779 320.454 104.779 cv
320.544 104.779 320.665 104.75 320.815 104.694 cv
320.871 104.878 li
319.504 105.441 li
319.274 105.441 li
319.274 104.779 li
cp
319.274 104.429 mo
319.274 102.084 li
319.253 101.854 319.194 101.646 319.093 101.46 cv
318.993 101.274 318.861 101.133 318.695 101.039 cv
318.53 100.944 318.369 100.896 318.212 100.896 cv
317.918 100.896 317.657 101.028 317.426 101.291 cv
317.123 101.637 316.97 102.142 316.97 102.808 cv
316.97 103.479 317.117 103.995 317.411 104.352 cv
317.705 104.71 318.032 104.889 318.392 104.889 cv
318.696 104.889 318.99 104.735 319.274 104.429 cv
cp
f
321.065 98.4087 mo
321.065 98.1938 li
321.573 98.4434 321.995 98.7383 322.332 99.0781 cv
322.809 99.5645 323.178 100.135 323.438 100.79 cv
323.699 101.444 323.829 102.126 323.829 102.836 cv
323.829 103.869 323.575 104.811 323.065 105.662 cv
322.556 106.513 321.889 107.122 321.065 107.489 cv
321.065 107.294 li
321.476 107.065 321.815 106.754 322.082 106.364 cv
322.347 105.973 322.544 105.476 322.673 104.872 cv
322.802 104.269 322.867 103.639 322.867 102.984 cv
322.867 102.275 322.811 101.628 322.701 101.043 cv
322.618 100.584 322.513 100.216 322.387 99.9404 cv
322.262 99.6646 322.095 99.3979 321.888 99.1421 cv
321.68 98.8857 321.406 98.6416 321.065 98.4087 cv
cp
f
gsave
0 -.000488281 mo
359.995 -.000488281 li
359.995 110.427 li
0 110.427 li
0 -.000488281 li
cp
clp
.51184 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
.349609 72.1587 mo
83.2676 72.1587 li
.746 .676 .668 .898 cmyk
@
.349609 72.1587 mo
41.8086 .349609 li
@
41.8086 .349121 mo
83.2676 72.1587 li
@
grestore
.51184 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
93.2871 72.1587 mo
134.562 72.1587 li
.746 .676 .668 .898 cmyk
@
93.2871 72.1587 mo
113.924 36.4116 li
@
113.924 36.4116 mo
134.562 72.1587 li
@
134.562 72.1587 mo
175.836 72.1587 li
@
134.562 72.1587 mo
155.199 36.4116 li
@
155.199 36.4116 mo
175.836 72.1587 li
@
113.924 36.4116 mo
155.199 36.4116 li
@
gsave
0 -.000488281 mo
359.995 -.000488281 li
359.995 110.427 li
0 110.427 li
0 -.000488281 li
cp
clp
113.924 36.4116 mo
134.562 .664551 li
@
134.562 .664551 mo
155.199 36.4116 li
@
grestore
185.335 72.1587 mo
205.972 72.1587 li
@
185.335 72.1587 mo
195.654 54.4692 li
@
195.654 54.4692 mo
205.972 72.1587 li
@
205.972 72.1587 mo
226.61 72.1587 li
@
205.972 72.1587 mo
216.292 54.4692 li
@
216.292 54.4692 mo
226.61 72.1587 li
@
195.654 54.4692 mo
216.292 54.4692 li
@
195.654 54.4692 mo
205.972 36.7798 li
@
205.972 36.7803 mo
216.292 54.4692 li
@
226.61 72.1587 mo
247.247 72.1587 li
@
226.61 72.1587 mo
236.928 54.4692 li
@
236.928 54.4692 mo
247.247 72.1587 li
@
247.248 72.1587 mo
267.884 72.1587 li
@
247.248 72.1587 mo
257.566 54.4692 li
@
257.566 54.4692 mo
267.884 72.1587 li
@
236.928 54.4692 mo
257.566 54.4692 li
@
236.928 54.4692 mo
247.247 36.7798 li
@
247.248 36.7803 mo
257.566 54.4692 li
@
205.972 36.7803 mo
226.61 36.7803 li
@
205.972 36.7803 mo
216.292 19.0903 li
@
216.292 19.0908 mo
226.61 36.7803 li
@
226.61 36.7803 mo
247.247 36.7803 li
@
226.61 36.7803 mo
236.928 19.0903 li
@
236.928 19.0908 mo
247.247 36.7803 li
@
216.292 19.0908 mo
236.928 19.0908 li
@
216.292 19.0908 mo
226.61 1.40137 li
@
226.61 1.40186 mo
236.928 19.0908 li
@
277.095 72.1587 mo
287.413 72.1587 li
@
277.095 72.1587 mo
282.254 63.314 li
@
282.254 63.314 mo
287.413 72.1587 li
@
287.413 72.1587 mo
297.732 72.1587 li
@
287.413 72.1587 mo
292.573 63.314 li
@
292.573 63.314 mo
297.732 72.1587 li
@
282.254 63.314 mo
292.573 63.314 li
@
282.254 63.314 mo
287.413 54.4692 li
@
287.413 54.4692 mo
292.573 63.314 li
@
297.732 72.1587 mo
308.05 72.1587 li
@
297.732 72.1587 mo
302.891 63.314 li
@
302.891 63.314 mo
308.05 72.1587 li
@
308.05 72.1587 mo
318.37 72.1587 li
@
308.05 72.1587 mo
313.209 63.314 li
@
313.209 63.314 mo
318.37 72.1587 li
@
302.891 63.314 mo
313.209 63.314 li
@
302.891 63.314 mo
308.05 54.4692 li
@
308.05 54.4692 mo
313.209 63.314 li
@
287.413 54.4692 mo
297.732 54.4692 li
@
287.413 54.4692 mo
292.573 45.6245 li
@
292.573 45.6245 mo
297.732 54.4692 li
@
297.732 54.4692 mo
308.05 54.4692 li
@
297.732 54.4692 mo
302.891 45.6245 li
@
302.891 45.6245 mo
308.05 54.4692 li
@
292.573 45.6245 mo
302.891 45.6245 li
@
292.573 45.6245 mo
297.732 36.7803 li
@
297.732 36.7803 mo
302.891 45.625 li
@
318.37 72.1587 mo
328.688 72.1587 li
@
318.37 72.1587 mo
323.529 63.314 li
@
323.529 63.314 mo
328.688 72.1587 li
@
328.688 72.1587 mo
339.006 72.1587 li
@
328.688 72.1587 mo
333.847 63.314 li
@
333.847 63.314 mo
339.006 72.1587 li
@
323.529 63.314 mo
333.847 63.314 li
@
323.529 63.314 mo
328.688 54.4692 li
@
328.688 54.4692 mo
333.847 63.314 li
@
339.006 72.1587 mo
349.326 72.1587 li
@
339.006 72.1587 mo
344.167 63.314 li
@
344.167 63.314 mo
349.326 72.1587 li
@
gsave
0 -.000488281 mo
359.995 -.000488281 li
359.995 110.427 li
0 110.427 li
0 -.000488281 li
cp
clp
349.326 72.1587 mo
359.644 72.1587 li
@
grestore
349.326 72.1587 mo
354.485 63.314 li
@
gsave
0 -.000488281 mo
359.995 -.000488281 li
359.995 110.427 li
0 110.427 li
0 -.000488281 li
cp
clp
354.485 63.314 mo
359.644 72.1587 li
@
grestore
344.167 63.314 mo
354.485 63.314 li
@
344.167 63.314 mo
349.326 54.4692 li
@
349.326 54.4692 mo
354.485 63.314 li
@
328.688 54.4692 mo
339.006 54.4692 li
@
328.688 54.4692 mo
333.847 45.6245 li
@
333.847 45.6245 mo
339.006 54.4692 li
@
339.006 54.4692 mo
349.326 54.4692 li
@
339.006 54.4692 mo
344.167 45.6245 li
@
344.167 45.6245 mo
349.326 54.4692 li
@
333.847 45.6245 mo
344.167 45.6245 li
@
333.847 45.6245 mo
339.006 36.7803 li
@
339.006 36.7803 mo
344.167 45.625 li
@
297.732 36.7803 mo
308.05 36.7803 li
@
297.732 36.7803 mo
302.891 27.9355 li
@
302.891 27.9355 mo
308.05 36.7803 li
@
308.05 36.7803 mo
318.369 36.7803 li
@
308.05 36.7803 mo
313.209 27.9355 li
@
313.209 27.9355 mo
318.37 36.7803 li
@
302.891 27.9355 mo
313.209 27.9355 li
@
302.891 27.9355 mo
308.05 19.0908 li
@
308.05 19.0908 mo
313.209 27.9351 li
@
318.37 36.7803 mo
328.688 36.7803 li
@
318.37 36.7803 mo
323.529 27.9355 li
@
323.529 27.9355 mo
328.688 36.7803 li
@
328.688 36.7803 mo
339.006 36.7803 li
@
328.688 36.7803 mo
333.847 27.9355 li
@
333.847 27.9355 mo
339.006 36.7803 li
@
323.529 27.9355 mo
333.847 27.9355 li
@
323.529 27.9355 mo
328.688 19.0908 li
@
328.688 19.0908 mo
333.847 27.9351 li
@
308.05 19.0908 mo
318.369 19.0908 li
@
308.05 19.0908 mo
313.209 10.2461 li
@
313.209 10.2461 mo
318.369 19.0908 li
@
318.37 19.0908 mo
328.688 19.0908 li
@
318.37 19.0908 mo
323.529 10.2461 li
@
323.529 10.2461 mo
328.688 19.0908 li
@
313.209 10.2461 mo
323.529 10.2461 li
@
313.209 10.2461 mo
318.369 1.40186 li
@
318.37 1.40186 mo
323.529 10.2466 li
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (010x007.eps)%%CreationDate: 27/05/15 10:16 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$Dn[dkEa/^c=XmP)oj[0A-Ybm/+MP"Hm_Z!!1Noe*i>Xp/.e7>;ioE9>=i[>]]Yi"Nn$9;Q2QS8a5kZo=%Sr2*Npfs'87>%ZB`p5Q2GPJF\>N+dlXtDC<'[..iFKY"gaM4f]3EkkaG(LdB\Y+RcM.koBl:ag?>-8Rr?hPVpMM(gRY0OiU:e3H!(%g:Wgf6C;&L%%:NEdJIeua5o=Oj?WE-3gRdKQaQSank!%9ADS%l@WjllI9[G"qZWjW@EopJj+fcbL#C>h7+G8kJnhb*Qp<*HEjIZqemG[N_an)r5=%QOJQ>6meHU*8^+A*@+JThsC;EoqU+&[`dK1ZgjDk9t$OnmrJ;`]Io?H$s?/j[XugXWo'q)\Qbmi;C+K,PHN>0pH'ls#"_H:#'h=1%J8+Snj9'I#=8f1#rQeA^Vcp6&gPDPN]6dl]+#7A0dj,5an]BI&^"U2:e@MH".Y)>'d:'@ZXcpbppIk2M#9*]C_#;1Q(Zk?\[7_j[%=oX2\0-r4,!h"Xmo&%tU@LjA:DH.Vlbq%Mk7Dh$IQ:g[[93)])<t%Jr;H>ZQ6.u4THD)+QK3&QTF$_5>\6]!123t?)U8$ZfDRXBr%G7%%jC#K<aJ(>83\,$'V;)79O\(Y41-T"g_FR,'bm,9r_E:HN@XAQ,4KZOR($W>CsS_59qcmY3lje\b*lNWc=s!B])mK-rkjI`Hh%Vd[B=D8U"[^nIb8IoR5TW[^,2<I@t"_;"aN@6c9ZJ7"$3V$mGu)+LUDla1LWA(si"[XhQ=09ibZ-jAMd'1ruH:o[?B2[]e6;CFeu%;@/q\8qm@bQV-b[<5Nj`a4Obc&%79iiD';V-0,6%:^Y2FT25m7`(,^2?psJjARIpq$0108^is3\n-Qj;7.:L?+eGoM(_M/4\D])+%@8,#p@M@LO;D9`uKJKA:_"dgmcOn3R7DogdigVoJlok%_qhD4?chSRN')2u0_>)q%C;Lk,;<'I&1&)-Q@!m?V&M*W/N"8,2(Q8je%+$Qsm!.doo"lk52S404d`%/8,/TMb[SoabeF,'W\X@"GT)oi>H*.&2Za*qI/=>QR&/A_?P)&OBl9Gee_NMFLk0L#8b;Fo\!5/[cA%$_L6"7[HYeb3!IE0o%>'F`SJ`[)/dOHB+5A[(t8sT2WZip("?fm3:D[kBobofWag@MRSVRj88Tks'a5nAKj"lS0MpUL(aH?o]rZ'%Hmb'=X4:KY*)A3S,B\(=GNfXpG%lc9FEa$2QJHh:*cXljgFbC/?[7-H]3$`#.E`A&#Chjdb3Yapi"Pi<rWC7Gs4kBa09Oh.KXcO%%T5!;'pFlNP/Gs?f]PWT*bNJDPq\T9LDW5U/0E+V?Ma`</J+;FI(B/LWi]kQ\L\r.S%R+l=nMgK%J'%I"Xe=pTU9moMjfQ0q.`s(4%<[oS^pTIi;'(gM_^(W5T^Z`:AOh])4H28S_%Gq_H_:tPoX9IsYfOCi@oPKeY!30u]AeCWP-\8L*,u#p6N(^$bb<i<Xs+]u=R*BBn%g"UfH2sn.3^:[IuF@K`D;XCU9(Xr<lDjs2pDQ2^j)FqW9;Q)4^&)S"6Tsob9!dpKhbN?]ak(CM_kH%+;e]gQ5ZT_!W6t+O^Mgts9%kAKaHZ9nP")29<4caM:aNDg4Sfol56/-4e.I4L.q8tOHK/*(t+ps&%fT3i&!3:lR3!J32RXW-!QPiY^lUN3?LC/`sGCq`oS:6AkQ%B0H8^$%,rde0bt7]SSdjrW9NB$(9bB@@ssKktuWU"s8nU>VL'P*cE.Wo2:J7J(_e1+q<1k$rU9K^Pm3kWD$M@e,iDd\ol%@EGAo6%HUf_ZroW7tFQc)4BYN[N+]=k05N?3JgRIVW^o-VSJi>]m3UJ:/VfU.9,_q;'Hg(C9rQj`_ADS1fY^_PZ.UR#oIIVT)<XE&a?@Khl%>_)UZ(6lXTHY1l8LX'Yp[EG!D90b'MIcKuR(X!kI\ik#BU5L[0D.6(4hh8J4+'b+Nr&?jdSN;G<Qplm:K&]0=g7d#*d+MuPb%l$C%W[f6c:@_-A&8W<CAXG1h%og2`)Upi,DDS)AB,k6\"<?#2\,Uk.YWhS[M=YeNS,2oP)=Y*!^+I"\8mVH&r"P`HW5\6gnb+4"QhTm[%-1YVKrc*D,J+6G3l"D,i<"<%!H06,R2'n8?^-[2ee*3e*bH8TJ/P+-l9@\F?j85?5\UNVJ/^RGDdr-n)oSa)h/.C]Z.IYoN:Wios%Y7Zd':r^8.]HlmJcCVPHaP^Xo)KWnGNYY94<gi=RnmW&=\$pj,rqcG9r&9b9MGuge?\bO'Ulb>:nGe5%8d1)jai@=?YN)ZUo=i`_%B6&sq@D0u`L*5XKIqQIAg2mKU9me/KPe\ZUh"`^`QKGhmE%3f)ppREl(cTqZps1MV2Yg\loPVfOF]C-s%_;b,^pgjT#Z'+-oREcN%*GaeVqR.T,8*-eq=a-/:DfeD.S'AKrqo$I40FJBZd8bG3Xfo+rBY!r%+NLH5;W;dN>!nT&re@#nnk;Z\nJ-#=\mfAKD3hXh>U9j_%qI@FAkfB8Q*.=*c@;`Wjh>&Z<Ffrb?qEe(QUsiP-$@!*O>G:j%hVA\9/"X,;p#ZKCF2$*NkLK!=$XKS#p[_7GPccmZD4*AX:TW`C%qCd-$h/<5#FrTnp`,*09I'"_Kg>t7k/:%0iVu"uh,\J"1rHA0ElW1@R=t:7h;5ml>=-NE@]M*hG^]!%B<o9D6DteC-DDhEnese7b%=pIrC<0GkpG,p,C-hVMTgeLbW;tE<B0Cko4E9,U;_I?JJD0K.d@It:<`7I7B!T?n7L<A>ujCZ*ZW-"Q@nY`kV#jYjTq&;<'gW@_6%Ds&p%d;7C)C;#[ug)68EU&;[#N>).Tj1'XGl>;@mn@+X#GQ2ffOOE)>OGEkug'd"g^%Ti+[m"SG5n*rZG?VjrK+QVkhlk:NXn1r.%P5mTl\%B&WHM.4)::L'?<?#?+^"0+n6DWD]m;;I,"acWYo?VHX9'bhmQ>"B]VaC?ME+"gK/hTUL?Q5WQQ<a1QHF8sXm5LL6C![sD%V8V^`iI9nGHM9.XbT2t`X3$&`m_&8L,"#d-UuZM^@N/fajP*ghDj'K8pthO*]_S&pfHXc&&C>oiZBRIFhEOWS$3B%S-"&CnVNT"D%gKRDuF/3+4QhHLLamEHm6(X>,<C6Jf(FQDCYh`.>;^]u!7sa`l38&BliH5T]_?3],Lprs1ciV,/Pq:l=,V5nVs'fA6OUi:,3U83Q%SjeM8SE%B+FMb68)doGrrgWnQP.=lhBU6"N-_6E"YU9t(NK;uf#@TO8('p!*;I3,\2T_+j0:]DMSSFWbRZ$H\]?.0IX]p7VeSF!U%YqW@$[\`T_C,o($%mEo<o(9"eVH)<kj54b?\!oK1P9n_]r=>I(Uq=a,n''W1<\(T8DrC_YmU`0eeuTFOD1b.e3#&g79%G$ME]4<c%Ng2((#4*TYPt%Z?'Sj]_hoUq&Xci&#rho#i7MpE)fDjB7^3qk1f0<*SqMO"K(0T"$;U>)U^$H4TUp_0Z=1MO0^4K=\g(4tDh&IIU%OV-"ZS"8W:ajBjNs8-)?O91@0d;XgUr;<a=rKe8'g"=9ah7m1\BeJ:\Q]XtS4nu1'b8!?LUN\sEXoj0=gU/fQ&XhG"^S)>@a8>A@%M1oNMbhHd4?6QA'Q1=A[TcdKdmFplE(HT,m+8+(T?V?qFa<'8Ds2u&pHV!!7_`Rh/3BQ'\4MUi<]$9^*OMX>VQ2fZSi+(uA%f0St%YB[r0FP-Du%M$L_&;M6\U]N;p6EV_5qVg_I7bPBNmmE@"MI'bj'-UGZoH.G8fa,L4s1tu1hZ&d=0E<d$2_UJa8FheSoDYB^@hQ"E%YJ'ma6N#5^S2YrPDcI_$qQCm&O66=_d>>hRWrBbee:W#$hgJ#T";LmJ7e:iNB`:r2F?fY_8Cd+/D/7/+CdbAr]qbG*eil:pX4sp2%AMqG+raj",^$cunCU6[`_h76$(Lr@"O-&+Ws,s)K%cC\<Cl*!)J%;X$T>2=Ck62*D-tU3I;/USbS)nf>q$)u[pfplW`<n2\<0FH1%2"WBRk%^E[l`)"4;BDX^O*6d5U2RG7#@p30<2V!c2\jJp^WN*ga(Zg!/Nt.AEX$T9SMY,AmTHrHd6,=s"2]K[UtM``$hUFXi#4W0%8cHrS#^/:Telh.+FERC^rZire]$&l<gg+!_F^"J/hhU=e(HsN)b=J)!XUEs]?)/niie!L>h^%ogA05g^DGm86;l8i9W`H[IVS_Dp%\'h9fSY70,^<7NT#X5A$-JL`6F^!%mn%EbTjq<&j2js^52BD63kJ=aMKm?efI.hPfp*DAC'LbfuP^IZpQn@`ID>mOP\%i$g3]\eW%=Xbj-bjI!r>PbJR3H8A*gE"]Wnrtjl6]j7W)e!XrE`eoaPAe((O[;+Xr9`'NNG>cJD)]3hMblb*]Pn^&f\#'G[2-R^G_,ieQJ)T.%/[*XB[D1Fd-Gao4Yp0NU=V!#fW7L8<U0bJ'*F,aHD`6@jn*cgIT/&_ed&m;62_GD3Fg5VLd`19RU_tr@YN:)@n]#j=AQs2n<,=VN%9F^AE%*dlr5\^lGSoHq0N`R^S>NIfaSKD/PYpG]9("4j(g8Cd<%eM@;Na:*c1Q5^U;1W2!.ro$%s6ViK/>D>Gd$.X5$>CRPg,Nrm%IQ$FDI/[0LZQY_`&He>8pO*9-I8t173hKqsdpcD[H'_L'BsB.<O9B#uJu[t:_R'QHihG*=h@IM\;uEZHWStS<H+2S27__A>Eq%Z`%;7,)V<<$1&[6&g5kC;U+qUTJ%R:>Ih,RYNqE<=<ZU_M!+j39-OZ&toLehH+=\oi6F2g-QVNjrJ0b;FZQ5rL#,/C?;c/ec`$\MbS@%<.:n1)^"aeL$;-UV*dhi)0I(,=dg7i$J]t*A0<07F\1lqIMFaGs/JuV&#+bshFj@3n6Su8#V>B4hFP!Z1+.ZBe"Qp$?&!gB2;=C2%V,r4@k)Pm9cXThRlL(hB8aX:C3bdlM`eL2B'9k(O:2ZVm-P&K366lj?A^N)C^V]*d-L@"-T@2fJi<Uq\Wnqp2>cC":TN5%WI'n:t%6=5W#'ka?7Q"-[OS;XsW+*@&CjBT#BfD>:Ab.cH-eOoH34o=!5&hIq;c]344`HU1QZWrQ-G!E%p9PEf[ag^`R^UtJVY96,HeY1XK%6BeLG9!WQOI?mt%jMU?Pq/K;5%*`$VQ4up=*\tF[85I^ZpKG6KftD=p]&+Y\(26k(SLj3DZ(=BC9?WY@NM^LKi`u3lii693!n19@%\+/%I8@8Kq\85Hj$ZlsGphq\;kV;.G"e)R9Dk@*%IPnbq_rlUc!!PQt5dNaW?l/3aaL52B6*Jj,8eRmJ@!r6ED#6koH>l02EZRaO%/Y)h(aX;du!T>UX0FrZ\:H1h;)I6]U#5b@SN@[J:f;1QKO_)78@<]YOPb<&Vl:9M:gBf>$=p'f("rPeYl<i(fGU;g<DRT06lIX_e%74Rt2qn;7"n'GMr="j^'%8;s,PlXPl]pH!^[p;W_7d4fs't\:Q-osQ81n<*S]oGrpk]Mj4:9S/lp%1:I5#DR*CUkHSgeb.*7-oV'%0eM*/Ih6>c*l3rBj`WG3-+O+d*QopYk^Y26GECIomR5D]r\S!(HK]gE>CLJ=8+=k`aP5NSQ]&L9DkLcb`FLB73tS(;#8J:7'KGc(%m7J.!:\A`YqcD!^&_M\E?(uQ7=LUO=:Wde9hAT88!R%k8Dgr.$R,D:n_#3>Cmp#4dh\b)irUE.qI!XV1rZWrV(l]R[Ttf/kZi*,D%nJPB1f`hnogo&#846nj<?f@*Akd"H:\!l,$eWQ/=R;X/KL:%Yr[m18R_/]bs<K*Z(c5<@V3os]$5'p7_Q"m5jdHHA-<i_df_4sk\%!/3V+?Ct[tZ2_`m->k5$<9EbPfjaWFE3Mt*p$ZFr9r**I%tc%/]CTN(_5\%q<.i)h4;(4Ec03#r4Hci1U5gqm=4!4#QDT<M'sXXj%_<g$:[Qo"-MH"Pm-%bTK63ESrSSju5Dm_(R9g^YdZr8SHc(lmAbdt#G)WN,G.+Pb=k;fh8=J"8%6A@djV:Vg#X46Q[GGCIp(irS`%1=$=U_*I]CmuDOO].^]FoWW7k8plFdjTui\.O$(U]eS9kS%q_m$eIoU/`SSW`NE-P5X`qF*!ZZ",q6'(Ou%*E6jiN?\/cR+_#S;U%o2TQ<&^g@\-N]W5fBZ<-3%[W9.q+bdnYHBG.ML\(f*VFK*tAh"fAg32(MXWLV;8*PU=qp*\^u4_'H_leA`!pjGb040-%'%4?7IM^%hbDXnjCuXY-sdZ&)&c4nb;!.8d![rO>5YFra"dMFr6J-?iifYc=JOZ@5&jp.X*R>37ucFPn"%bc?K-*+MS(r'J2>E/JT\c#-#ru%%+g<*[kCq_t9.s=s(noOV2>tLa?b^p38\+Z7L&(DfXpX&#D<5k2FWR&6hro](FoA&H=a[]f^NLsM<m/I+l#t<sWm%Z<)5!me]!Ii/%bfuY(d]*&MYE`)LkfupTI+HB6QhP<2rcdTh[;^@h9J&klMNh>YSYaTsWC#`HlR8;kd^eA([XS.[VJ]S;A_\0\G:SS)V5AO?8eq*"%[.@NS,gu)Rg?NI&Tlm`OZ#=j;XIYXBCoM]X?#?tkm\JiJl1UjYRU:K,kON5;[A$D*2Dg"?**g+XV&$5*G#O=MU6V0sbFZVM/:_T6%(7m%&.T?5EV_[)Q)@S2B%S^.ePB,CQRF<o$S;lVV>u.8iA;e^PlE,eSh/%7pn/H`ETL6:f,RrOVRJnDWc1XO#?H]>Rf'iOjG&#`"%C,X\K[M*B:p\*^6!4M2kAbrh`<kI.tBg63eLX8mopB[e@]CU7#KX*F)?BZffO+g%F09)^\BHlhZ<^0U!g0ouTZlae/QQ_>(?B);^%U(Ys(RJi.g/Vf=.8$g\?YM_lO-Dij\;pA?>U[?s*m*tCfeCaq@'^%nu<[p],.j9ljP>g''],f\*G5EDI/iHLX)GR"h';a8XqRC]n%(,T'+Ha7o.g??c;JT_lbhTPW1S$E9YAdB^W+F)mL:$^UQntO_%RFS.52:h!5b`$I8[0q&f:)bL;lZLBf'NX=9kHXu1oh&p^e(a*7%Z[Q'Qa9=Ku[!6R)g8LEd5G+X/-ITV?afLXOg0'm5"?1X95%usJ#7EhWG%T<Cje,'VC!s*^R@2a0D?l.9B(]1Sg!W`*UD'I7F6`*r%3=]e'.Qot]BVWA,rF7]3dpJ*P6<L!oBm\h#._*lC.6gb%2/do&1-X:W:+iWSZ/.+YqA.?POgb+:NG^n,Prt&_X[i]ZU(!%,oea6Y%D:4]<8<[Z1Q@Gt@pNP_\7ZC"2X&=6NCU>K1c99mq7S,,_m-`3J`h2tP=^\#fb;3mHU\iS_<=3I4ISi.Uc:j=#!lqme;a%_,bKL/K%H8X1H#]953o9=6%[o$gm27kGGmC-,J)a.$HQ_f\,e_io$HP<*4?9N4&FK+%+*:'kO]tRh^DY.mblhTf;nM.8qa5a@/?_atCf'K#5%]i#2OoYH\348$SN7Z[PU^5m,(%;bZ^GEMCUd':%.kOY[77W0rVXkNMU@&)<#i^@PAEH-mn](A?/,uVtK9#&^71McV_c1i&Kk3em)%7iPH?en0-=,<_,pk*GSbkX(?+H2dE!85IEUcPND1e[D(bG+-m\XO6J4]PjSp,3Ui8kiT"[lXb_WmEXfs$6%1;7`eb#Y-bg^a'.^'%)P(6lR4tkmFa8Jae#<8Vd*dq\BVXkB;ISJ;kS/"8nnS>rQ2G-/kGq<P^O%Cos4.-#D6cWt::!.V:,K")(F\.?j_)K/?0FA:dne47%pUTbWmA^#3(&%85FKaSpVi:3\em"XSH(3$ooR%h,T)P^X^8H]35P'>J^+B<5`ok97+s$O84P="d#^pG:F([/b:I!#u1[\0``f/$P%14Am4qY%aQ@pKCjqKi(R*;#J)ba:MaG^J6QH/%&@hH@DUi7%Fg+59lkja:q@%sod%/GYpPm[Z9r`WD`=($E,n)=[8ZrL-B55CFq4%Xh%;T0_UZY18dIrrmO#Em=[\%\l(F^K:XiWI=IO5T#0>2_`_;V6_Ecqg=f9be$m?_q*@![VGksU%s+F?\+5<Xe^14@b5-c2Nj3t(%RE@(7]WLWn>H;gmbY,:c^8LQ=Vk%u([#eS`YKEDoQgM>2cuZd1kGHh@3ZRd6rGLXtHqI'g_(mPmc4rU"RCOu\`gLM/Q(IXSdnK"$%J`U*,/ah<$`:EkJ!?YHpPu8"/ZN>MZ'38aAJMtf460'`$^%0i'kF:iFAS1UGO\#X8/P:i,8JRQdhDZ?7`&&-.;sr"IbRcT$jqi7t%0m?0Hmjh.[PI]E4CPM>eM(LE*(-TlFCik+pq)Agte<lc=Ct7uC\aMEaiq>"3;'LVkaJ"ScV>$bVTLRU\!J1%^1fe:s+uZHl:C3"a%8"8[.UQt*.8[m*mjCe-ZOSc$g_.u86htOe2mCK4Cb\_$g"MLj.:np]'Vm_46<n2t5YT9<%)SLP-+6c1mUNtq7GHB;;#]18lLX4mJ%=&R_E7]@t/Rm!,F7537_65p)VjME^N<LYpC^TlH>b#[K(nf;!Kb<>fQ2u8gr-@_VqDN7-q'2ha.A9>le`?lJo6[iA28@]-&AbOmE%m31i2o\67eKqROTKCNLH`E[8#Bu0aMCX#m4R&Nm[<<T::XisC1n/jq"C\H''+52K-Hi(NJfN*8*>#r2Q-Zia5/'U6n%\'O#W^-.[%gtn-dXgYHia&>HqhIc2^>"h""B3rc5\\*rni^INl>9*(ShE(,rjU(`C%E@2l*6/QSr'!X,.CG;9"Vgee0CA#g2#RE;]^FCJ07,XV%98PLkeFW,;+l1$>AS,6%FZhWH7jUU8o(]i-mijn3jm^*tXu4V)j<#Q?!)bPk7mHjqh`7rJqp42r1VUEHnU]\H)*37TM8u)OR(oMZ%6Mhsb<<_)FDe8Lpk+>Pdb2O!0ntIB'8#EBTLS&7m-fSX-W((tuXrQoa-cf1Dn*I_2Ol^.;)41"M\PN(n[,mi^FkGC"HJ!(m#UK(_%9ADnGe!0Z]i9k=&6#T;4(:G"JKAhi;H@)XbG1!oO7CF5L.]G'SE+l_p<U%`I+@B)ZY:^<[&In?;]fuu)4q$UIEB_[HW[HJ62Z#YU%^-u8:C5tD!0ElBJ4ueJIb@+^4e"h=L`K4e;BZ]A8R@Sd@(kNN:Kcrnm783-U3PW^Na.[&/&.6F^m&S;!_o/V"]C+g-7=Mc][-FS[%ER8i0T"+TUSB4?JiDO!4O*`c#[bK.r(ka]jDXE3S.%a90+OfR9Z$U2[$s1+:\=csWnYstdTk@meh<i",X_kgrJd+dpR69AgWnkj'%NtrKc-1efK;V;PFEJ\cco*M;Y0<5bd&;4eWNi_ls0@=D"]9.]e5JLX5]+#V1nS59l_%^+#Wbd%XZsP@1OE=dE)ptYQqHc^ZNmCgG%6FnH=0!J:5.\/A<Z0'B(o'-'8MFFntn!Up[ZpKQ>7r5Fi1Uql(4UNnL&fE/\DiBU[4Q6M>fEdbu7N4(7@B>Mr2]0Q+gLJ-gaO,aX%=N_A6@((CjfC#*"$&MPr&FF^T&6&'LKTC!,I&>mA2SlH"]07sX<OmDH1DRf(7\0Qq?J*L3^s9O(Ih3DX6+ojcQ-J'?kn12,eoAWK%-r5#/MI=tRVa",Ddh-8IF="YX(Z(8[/s&WE`JI[**3:B`?0q2jp--Z=5"'.7m""EuhFB&u/J_k9ihiU=j?@X#<$"-)=i$Y'^?l!@%DaetCr!d&45nEC>-5ae&+YXF/*\:4.4.!QYnJK%_%e%hV5C5UQ"*j10qtO:s)N/2-]7Vd;s7e_M4rN>'i(+AJ\OTR(PV55#%FaG=%m)"M8Fc>i:dX>c4fTioe459<()8.pgZhOh!J#[!G<mLgXoNfC%<ko=Y,mHu`*b9P_\2n2Njh+66cbIC#NAQ]?.E"S?W-2WL?c&E#%P'-LM]`!\(<.+.[p%M8nM8q%a2RJlLL5)4J&#'sPqqAqbmYu@7n(0(U<NiLjlenFA-?SaP$ooG]P4s9ul4AE:mlf;?^@e0G5`55'%9KumVNti4Q5$58slkhI],Hq61VnoE+Du=)BR&E[l3f)fim&s%M];fu*HAR3bV:0O.Dd5$<rK^lD:gLgmBDPOp+#/T;A`#-HLDj>C%FD-MQ9Wkb[@jhjQk:S'ipAL.mVu`a-+tqHt(Wc[.0@TdU%)<M[bn0L5GLI)!b7`SiJhE4Lj6<kR=Z%EnDnr:W/E=)3L0]!,d[P%m%O#OQCJk(61mb`U9:>/Q^S5_C!Ik+LK]CZ<hafoGfCf:$VeJk()k:KZs`MIf_MebfQk`-hP$!;aE[@d^C;9oM0'lGVAhB,kjKi[?l%*t6[P@dR,[3l/\7=5PRU&D,9o_feIYqRm4mFEMPB'51H6AP.-]4ha`lri+1o+!q,Y+kte7*3Jgtl/?<HYPCR.fc?ES&]AM`oU2'F%g>'s7-lgLpJL?_BNMBdj*,Tpp$2i4k3EkLt-hB5#N^d[=lP^_NSnO.MLgSKlH`sfJM#F!#bun[$-Ps:5]G'G6T]nYGYULi6*<p:.%/C9;F+VK^2a#=J^mfr.*0itRc*fC>UAd6t6Yf^,llhi`21WF%4KZ:GAY#6K[ot4Y@'B+;A0oa2BX!)=on%?HKq8/ST@1#hh8$Njn%MM'Fm)$8ct,qMrJf$eD4&(@#Eft5<GhFNpe?WiU<.k#it8fEl_c24=\JLs?pS4%a==IqJ[$kX>tik)`BO+*-iH"CD4NQ%$7f5XON%6op2n*e"=FmsFgMRC,G/FD2$R7*EGl;N00?;nnBV@^M_hom<V`8/=8[ra=1Di?r@Xp;fSm>X_9&kMDb=J.3+o#kJZY%@:[:`aQDd%(r;uF;/4GELa`p5)57LpCZm*YD0p-\poF:(+AE[8-$4:e`*1uFff$`MX<l`\\0Nku%9hk%;/.8#%Dh4-/fmIRp[lm/`MA=J`T7h-%&>`FK0(oRJ68lL"!uYgqk"Xqr4E`PVjI3PbiO](tnI;_8BEZKQU2?U0rjt+/p26P'6s?-bhEMhZ&Jq`b/:V]mhLKf&TAsV]=B2;Z%HlErNl_0,:>uH&siWBD!ikfj"fp[BB#dc.Q[86DU3Zk??`p#9#U9^.fT-/2m.rGif1S'(7FS(fJ1$$\MB@%sQj2n"\C"/>4LYQqB%*4k>B3li'V7h-QB[BL'#Am((_6Pl:Za0Gk=cCkV^eB+?kaqbsDLFtW?Nh>,^C(=Nk#+_7\2HgSrF9WcTZ#SjOq,rq@*]eP\Ept'[%?;W&(,?#+E==2D:9W=Wf/_Y%"GsK_KFKg\$;\<;mMP!KpeM(%D<2gNKoG$_&o'[h>rVCG>4G@LapI/07o2p\in`4aGonKq#Q4j/F%n<W6""<.nb[e`$(SI.j\p`L%7:\AHboFr!pjgST+d_YM65iWOO?[@pl]Ul/XV"a=UcF5Sb%+8:FqK]6<3Ye)?a/eEr1.Q&[5J_75%j/N@XqGBn5Tc5p-,WZVbe7n:DoYthhD[d`p&s+Vi]/VfkZ<KR>jD`4YK7ni0js2Rd7WDEgq.[AFSUUXXKSP-bAk4,#D6t%HTbZ%R%BmHHZ?KBs+Roe^L+.^I4alUt/AoI0\^8c_bPh`#n:m,O<im=<?)!s;XZQEf6'4aPuA]Jb[EOR*XaD5-`bNC2qDdSMR*<o<f$WF\6%jam65^d=<h+nGDWqamRao(ZOdo3Wh-:93m6[#'SUp__%KGe3N-):kVn+ic'56;sKnp]7)p.be8?Aq2oZHiDa%#;]>g*2'Td2T?Lq%V`.pnrDI1#qW6NJL!'60)Y"'s\lZq&Z04$l!AW0o."jc$o4?6ahV9`06_/BeZY/:_Z91&H]Y6*:H_?=YcB`NHU?GOpf0l5p]I6Q2%I(TTaD'<eEB5GTEa,\cV)g'YjA*enMd>pH_<8cdj+$7l*UPL]h5bac5B;GP94\KcHT!5U5.;j-r$t8o>1?$+:b&DIp98sD7P6oV3%aaj5jF,r7&,*[S6Sgf'LbHWO?#;J$P1OXXqO.t]!kss.cE?;:CS2hRRe(3c<b4C2VZ!A3iQra-W?/LMMd`:A+.AhI4VeGhC-U[#u%DEK3&)MLq(FhCHQF@h>:,p@:g.KaN1O%a)=SMhfWp!%iClBKmFPO8%aI.)c8A3sr\`$;TIUdrGJ@H@BdnT\ToWMSs'*8a0nO3HH?%,)Ac)ZXZNDgckNTq)frYkP[P!M)]3_,C<s/\(^i/`dsM5jIDg3pS_I98CI)^\X4Nd>U'(9:tIA3P#kfCn!AeJV(@NP;5ifIo91C3%6Yep-V;mP7M.s@/+VQAKe8a_@87XK_V:gud7b(dQm12LVO?OHJ?#g17katp8o!r22I>GHP+D`rPRSqP\HEj1L!AU@FNf$lcI\[Xa%DfVC5;"$g)7s-3tT`$ekL<PDlr4KaPo&2q0P/`q$#H`rRN7pK</nU]oM"u!bSqSO:DWpGLOF4P=1K'"PLC;BC*-XSOIr79,HoOX^%)a77H7Qt)DF%AdCLC9K95Lm;akJMR@B]lon,B)nP4LWWnlTr2&h&LHZX2A2.:t_d%OY5h3C;u-fm$I7=#%>,fa!s[j..d^7%$cfI%lWG')D(bV#)'\Xiqq!Wi9J2-4#dp-,3f=^E0hAGTGDH\HnI1l<S8T"651X?j@P5R!:^c!(!`e,_VBP\I"$DH;fsjA4Dd.;qNi%d<%[c:JJIC/O]=AAt<Cr'SQ7'&AkLXZsNHt&`(;/kP7#4IPE_%rc+"<Ju^gNOo^nC`Er*&3X[kk/@MlC#\c%`fHE(J=r2^XrgNiaW'4%/KC%<>+TsK9HtQ%,IKZ()X&jl/0jh64;k+/5NBgUKj)KYOUCnnj2acFH:H4OKj+BlWF<h4pWqa.m]irY!=Q[pqh>u6Qf2Dh1;&J;%CW2@C*@2FQ8;`Bk'eXT7`gR7tSc^(TE$$tQ/f8*Y:5+U?=,rXTQ\aIs;,ZA!+sMb8Ko8t?L"ttJW6LUD:4t:q![R\*,D510"e%lo%*LfGX`h!W=(@.d!Ya@]%.F"ZoOkc-E`]Qa"L[QP^hcug'CiRa%Rq2D]+l_Ig'=EN-?T?tX>.6Y-I1I6K.XHV/n]nXui#!(b#P<Vl%[H#U#qGm@%3*H(5.bR`>:SiuWPHBgLGG\3J=>t0_FlpZTXnG55a10bPChDQ3L!AC:>XEDdikd*Lp\S?dccMZ9'p3^KP.D1=\]m0@%3q7M1]ub08Do[X-qcRT3s-u`cUmb`6DDr.FG+FIf,pt;V?aAG*ApB%N>cM'>C\/o._eshK()ll'B=9YSE>nKt]>7LrcE2h1!Z9e7%2]J%K->,[bSR5P!%a2(4-7=;%hhTPe]A*4]]X.(*%(kZ@78TcW5/)[7B-f+HXr<QuG^:%[kgn/[[U>$h&NnT?Q_2/64maC=Z<UQ(%oGaRsV1@500"Dt&7d].W\fA)onf:N1,SQ^R7Xuu2(N/KHmMDcuB;o_RdC(cjrL\$#KZTi[2ksk@'!_%A@NFG\GYOq#Z20=F<9u5_%O)sb/F#EG]E^AD4b0"_\,Sq^;E?Da;U$H^g'H//U=?K83`f22a"Z,`+[imDe$`])IVFQCZQ4Eat2?Gp5mg'"We`X)dW%JBs^Gom\%AOMl4T&UF6bBC;>2+2>dX-`oBSnu!2*r:'o7aIq>b,+F71M,W`\fcbE^Pd/\flTNjFKnT4*%7:/I(s]lflUZXEkL(I,C-D$B@@#%%*s%Tg@Q'cI8RT)NhR,S.Cq?9E\f_J==uKZJh4,=/2I0-3S[8&O[VS"%(j^5eGdQl5ZKZs]l!-Hs\?b@NAs[hGa-o^=]IQ&2Cq?8l%-%u8V-^u`%rW5kR*\!R2.$lPi;]7!P/uYegJ<ffRVMi"&4(:+=^FGoOEFCD%-QE\-0s^''@r.BG\tE:hgjL,S2I0-3?1:R6UL_gW%<R@3k128_<J/2e,,V3S=ph[Mah)XFYODNuo\tE<>550pEO\HWK6P3sQ&"-->%[ZA,`Nq'^d1J25-@G!)fPJ-l!Vt'K+"3W(gSG/X%0HqalCB+S*\Gk0@HZW1..quKM23m]PYmA>j4$WZZ]86H8pXKF_(ZW650(usbIIF4pS$U\:TCKq;%Z@5o2d3KM4]*Td.Q;9t_Ot2o%3e*[#lJe[bp0L$(SgiG":OP)#h^N1MSI,n((p$B7?D@Cj5qLK#&Zs6'*M9B;S[)H`\_e?U'ZUY@a>J2#4F(j]#D7Npq(XdL4C[A/%GHlQ4,@,BRXI#lDmUE(CKjAaY=FB\DfA-0s#me9/DD8P(^bp?7Djgq<;]+_e4"`$.0=pan*qd;10(-8hXo4AFF6`UuSG(*lT`Yl#%@q6?$@Og39rDDSD)'tK_X_($tU^N/E*$Eh$-IN?i<926^9TP\E],qa(0mH_;geG77He32pH@j5TmRSYVM3S2W0;"'Kf]7uUUBh?(%N=N=T[GS<=o'NnnL.i0E'+I,j1_co?<\/9mBIHb]S;?Uspi=OQ`fg-WkT,isNVVlX3N&1o_F.]i[u=HcGS&CjpEYdZU.Kf0i`Hk0%ci$-Co\P8m`jebIKW5+G]7Bh%3#O*>[rIe'pSNeoaM!M!W"]]_!#<BD>\3&D/UGLW)uaXRJ+h>.1/n,6*XA49&3H/.<-AhD'f!K5%L?-`RN(r;\2u#E0qe2CYE>'4amhgY&7_LYqC)P&@!I1/?PS3FSVt[C8]*nqTPcjbP`5ko4JJ/p`g$F'PiRN1=U$m`JiU\Q)\`&RV%'#"dpEl/pc=bP[P2om`_^Ys(Gbf:muM#qS;)grUtgi,3h9mHindZHKMKeL=EDn*^>J&4tgmo,W=HQqO*]7*U90b\?+UViS\o!*tB%;:M,-gpaO7eis$,DZL^Gp9iP^Udo&]*f_BsS^`fC4m%XQe&R28`3!Yto8.P3T&?'2o@rfH]Vl[d_=QEJAf#cZiR4el1H?S\0@hnk%)(:=jcjT$]#^ZnY-=\DX3B%d-c%]R92UHU\<9<l:oO'6<dH48.S5gHp\+F.2&``)b=E`e#gbbn,,c9aJW19]d%$oq"1O'NGc)hIW%%0MV`Uo@5o.Y_C+nJ/@)a4YH3_S'mJbAk3)h6CtlZ1p>^[t>bs'n4HYm<Gd\j>Z1[.EAiXc%U&n,gni@L#oi<KOKO36r0.qcQIg7%NT%H=joL'J3&"bl5tKq6+(W%OXBlUUjMGMHn%(J]h)d9mc_"RG2IGSUnnn7,F8Khr8ekoLD5)i<LH9TIN:HA.1q]UV1U0eQ5$Vak%lLmVf<I+%A>:SFcqXWTu]VP$R]_:g;OrW2S<0HC\1B3<T.J#+^-sEh2KWU%!KYrXE9+>f]Hh-UQf-obYr#W<&fBc#[4`$OBe?flP%4<L^^@nsLe=DQHRjd;HA^TWEgVI^riS1FIms(I(cKAc]nPE87nag?4jHjRuOH]Dc]HckiZ(]QpJViu<JNESE8e4P4cB>-him_Y[T%rN#EW\$dn^hH?D$V[Ld/Q@eoo\!loR6]C](<!uT_)Pre2V0n5B"Ck*LmZo@Maf',8J(0(V>n\>A$PDNbE&(P>^e',W4lb?-.`Mpe%N,ad/C342hO,"u'qZh9Cidd_&iE[o9`jH+#\&;!Xl3n_,*j!9O3-=27<X!),JR"6R$/#PZkC!EYib,+,#d&uRQ.@<P1CcS<Wl-Km%4u'bLZL20kBlV<?U/O3p>(_$UAoUR)#E$ufl;FjQG_l%@N/5nk]a;2__T/gf*nKJdltU<H+#C608_q!52@TKDQ%a8AJa\'!?0i43%'4h)sE0rAiQ_1]k4b%/FfK]\]L&8p!`j'+RZpd.$O_56Eb1LOL3.s1%"#7\s/O>V+N+j!H#o`>PYd-@W`c;K0BoFrj\MUfP36]\Z%$$Qu-ej,7GEiI[:5Np3V?D!,KdrXfkQdtMRHYMh7ZC@dkcMF.FiCO4>VmciTDG[-$A\2l0He_:A46:&^`]<3)4M*31ACMIM\>N9a%_>5l!!CcH*_<BM#Qr5rXH\up3BBW=1rg-r"<Pg=D;3aT-CYZC+DFQ*TepFanY_2;qY8jOII^qRn@'%]"j^8qkZZA.R+:ki7:lP(C%$\oY,"5Tn'aHn'U!9<2AH<0.C=b+26#gNJCB]B2-!ClE<a7C\!ao[Nk"5*>Pp96"N\kt+7)CfnG@,)a;i,a5)Ac]ojB993RT*6&j%#;Cml*0CCA2[?S5mTXcKi!/nPG?"Q7q(P:cPBcR->ftZbP5Ad,`OhA<hanOB\WdUbbjI]C.A-(CUjqT+^6&5Sa*]>n+C;S:0BMet%V=r5?b3+mrs4F/qJXTJA4;eaB1[Rp:Z_7T8f5In"Tn^84:Lm>9\,$P^2O*Z:^ZaUp5$?4:n+DSYg?e$C8pfSY)_0FPIXTOs)U#gC%dC8r]OC("7/jqs"i_]CG"Y&g+Xa[ugbf12N*-A7=0UZ0u7k9=,EXd2q?hCIL,MukMme%ODD]/:U^Z_a\g<(9#oo"j^Nu+MDs'EIM%q3@`2lfVC]4W-&,PWZmtIW".OOJ%N[`s0*+07"t_ZI6aWm`o_CMrEi[Fg#/Z[#5k,h="[bq"O<<SF[eJX5?bJnI7&?K(%_=AHfZQ%\@anDa(g-OrVCTYESTjrSXtESpsJR'M[h3JD_dJF\C[nhQ(D4Y,3MDIWTeW1?hCIL_&5Umhs2)\%ee(<)c(c-PEfY$HO.@9DrA#F%Ej&iW)A%-8h[oPY"k9j)DtXFNf.X_$554Td^=P%7<kjGR^;9@]W_p8%;*HmmHi9[Woh2(c=bbo0q@/gW2RY/PnQ*E7I&u5=I\UW;%EUWRYF!'<'p\I>9l8R@DI)@QYs*]:4hWs@,`IH*=E+[8Np\G%Rdfqj1-e>t[d0;Hkf6Rl"qF0<,f>i2sT*ufeX.O?PnOWEN%<Q@6%d.dD4dLgp)=i9.;2i'CCnije8PMt2sI\XnfnU(4$gt=6OL./,$I'6nIZdVFZf.Yj]jh6jnpj;skd`5Ts.mSt$Fg#/ZfoD34UYkAR%D79=CjfnLU"^rro,iet"qSffl8%dG,<qP=kp\OP2L7VWJS5r+lf?]l;^g$bje)j03f.T0.2UTk'NHq^7oT"o]Z'"JIoCgArS/b^f%n_NLI]t)MQFJ.:\qF0<,LZeAiI]jj^;K+rRmYMI'<_=u038B2p#L)/?N,sg>g@f1*M2Du_^5'f4msFLp$qOXqd1bNXojOu)[KN2F%<&W=WXB1:mA=G2\Utft?E$kD%@uDCMg23\XR3H*O0/\6/1aV7$^.^'Zq,F>m_mS=%1ttR_hX4U:gA]kX&WG6^mF07hfu<F(bi[6K%[.A:%TD\N@1f=kGMFtUrCeS!T^K]0Ba$455ce%QtWFrUtl`bJph9WN.qSBW6Z?c.d\R%9\1p0%rW^lp3eSOo,l8kQbMLQs*cLqq9%YGM*<9s_Dpg\?%PJ(!_DL2iHh5$FSH;J3Iuo_\UTDW^\7nm6)q<0ugud`g"EbDYtm<-J7T,Gfec>g9IN1E05+F+7+<]t`r+gW&kg%]DZ3b[QE%t=YH>f-f_V0^YYSBWIPfVX1?48XEn8Mn?fYh\T[/0$(&oiPJOlFT'Xne]7X`Xs*!)t2L4/"jot1:r-a^VF8:fJ]c^i_%FHGI)VqZ'2.MXtlce7k_ojmXYmUC%5dE[l"R9$\UhoU0j<InE'4e<X^qH[cK7hDkIfUt6]WI3si+tZMh.g1%DoIB2ZhsqpX4"7\2%<T[(H=Xi-E8_@2X-J",tiO=&5Wnu+g1CK8uB/dh-Te`m8l`TSkj>rRfP!/V`Z?<jS4qY.Zf!amG2\1aeI`G!mP'X9[GdVdIk,^]F%AO804mF0)G6)mXLQ2b_CFRo=\f?a%m=#W51N=>QWSqWur"Z5Mro\2:3S>9D6(1IlI]A,m$l.HsR9qJ2q@tGB#6%58D2"-bbSD=tV%\[k%U&h/"]-9hl@r`UaPg/8D4;XKK$?X-/%Q=b>aGNFOHcf[]bGB?%o5-he3kJ=h+i*cQ/H*A\\GVZ>FK:M_0<VR,/ObH<[Rm3!A%E&8rZ/n\O:iM-SH_1u'2*b=O6L@WX>L'/]/9&<]%WDr:-a_2mZ[P&@\#=24tCDUaIS1Nb-X[(=p!^knfmNSS-h`8]::(FS:#RuG7%5L1V:Z1BH/Nsbft;=G:E3Hb:PcmuK*A>ZXM2L2dDF:Lhl"aQLnH@)0YXf._TC+WMZ1@KomUNF.O[jE]Cg/pG)rhc+so-jHg]$IN+%eXkk,YI<U@UY]`=-+@(<Ecn@C^RSVZ.=@T]Xo(W%E=L@3<]9F0Sk@=sqgBd^G#RGmEhU&i:A!Vu-:IsVrRZZ*B-!3C&SJibljT3\%3'oCqXZUU28A>c/T?lK*br^%Q`6GFTpq*h)^St0*GF):uTgOr2])J@fY=kV&:2J*a#-Ad>Lt%uf`Gak;_CD%<YHm0[k*7cB\]u:E%BRHf7l-<C;eb.)u`8eO55\%gi@PLqjR9o`'bZpH7[^87^8\<_9Vp(1?O(lr6J9%k<;J#Sd#<`4$bL81YW>BGj*hbp8],rMV&[cD'%MtY3YNH+^+;_Pk_3u8hdlSi!rs$iILW=*&2@+rXQ*G.20[p45ADU*-*D]\=`B'O4mR_[S/glerZ6/9n<h=(h*>s;=-B(HS2cPY9Y%f0$4?c'p)dpqA)\\_>!D1sWflS*b%*IJqf_6c)P22n+^pb=Vb<L*ehm/8i8LV0Tp-ri?,&>]=<JJ\5tK!A$ld3=*.:dKu,HT<dB^%fZEqIbS#p`BnqGG'HEId1k2_o$SehLnq,A9EL7g+Ei[G<H(g=;YqE4s:dtK:e/;[qCV)SuJ)(?Gn&),!*qh#tpK!^q.<I+&<;V?4%K55XWFcMOOBV*L&bkWRo".TrnMqIrNCC/M:,P#8Lm3L,6Q`ke%0t-I*Tl*3bWF)hi=:i1CAGu]@N_IB3W!3Jc(Frc9PrZF^;tFq\%%J\RL/L[G?r0^\J>"UAO4mf*^F#.I.q9t17G^>rbbc>OK;+W>ZhX%$nmIik]+n[SmA9$]D0sb3m+'Y9@_9:+3fQntE39oKY`#<K/%Q!^u62B"fjQ]8&6ZePDsnt4Upm_,ll5Q@:F+H*+]Fbp":<S;Dbl/mSI2Z]D-d:f4SRVn>_DLOL4471eNo>8d`rqL!b+Fd8<VMai?%SMR9kF]+8V7B)Gf'EM^EGEZ!K:l923lWte`DTerspZ^8iP$09JP(CA2qh@`hEl<JID,TE)k-t,9MI8Mj#1#,6a#Y1u@')"i&#IL7%,tXY:A+TJ+j"ZZK'm9Id!*%F5+7+P^k4:po<o0G22O5FKT8VC/QZh>9[IG.;kq:-/Hok=:6MWi;@r%FWF'Cf!.m2=8k_F,mk2&$Y%.&6Dc>htE<H?/9.Ch%1[>2/tDSNYf_3N:+>5P\Qu\GKRtP_sU/P?CgfYsoT!=Vk0$9NKoiIucG8Ok;"N59/SH9;cIAXSknlI&?X'%""0<qaO!'PO&'H]2O!o'O#-:ujgAf"2OAn/HS\Sg;`KYocHT%cU_\D_#J`e>^gu:L%i3p84O6q6R17#Ik;F,SMq6ld,+Zm+l@c]+%:*8D2$&YoRVkuQlrIBg^\(&Oda'.i)YaMOARJj2be_SYppEI$<@N9m;?L1%#R'6UPbhMp'4coi,4'Wmb\1QS67:40l7jm+3G;8A.%#E5')Z`>N;$%1se(3ckm)B4sDa'e1#;]8bq%kbc!c9HcSAJcjSb&Af(rHCHF7eInA,oS<\2%QBtc4&BHka6^m=Q%=?OiE44O4Mne%i@ATc\W/JtQt&3&oYn[Z<`4b<G'fH\BLs0=\'q*MEID0Nb:b]=Ar*#0I3aR%bL+?,7;I1LrV1]?f3b/IMSJ8:j,I<U414m)Un!e<%8U[^O:RtJmO*d'PbJ,-7$]4Lf<bl%k1[B,:55uHabUZ2E`QD*I"@'kc)RGWuXng],BE$oU]"M@VgL"L`WDE+ukNlTW>b9&Th,Pdc%fkFX,*2K'b"jdep@N!A$Sl*OFH"r6#&O-d[!sJFRV['4q&GaaMS`h&u1WtMdoNE\UZRaWq:O_^qarANN?YAnN(ttoiM<M!'-.4"g%N\U;hNE(c\]8)O(W'.htGU%tK`HPR'O&q2JUab^'o!Zr7-Y"$PrXdn+,!EH,0K=R\-S9>d]QqA),u2D)eG$e8'-Df"+Sil8i&#pJ%Z4A(?mOqT(+eO+/Trjp^Kc7IPkYVULL?%\DJR,hc@4j^7*83f*(`VOGAWmCWaWpY'AS&-Y66sYG!>.HW#915AqL3l`^W[=1F*16,%8u8BKAoXe0=YZ_%7)$TP!&0]=L-)EGl=7;Cji_<h-dp"FX&.IHRV=kuZfXq/>.",/li4,8kpP.<%^n$j#8f)P0Wcdr1SuNQC&H6n%_UK7``Q"WPO73PdgALO@<:QZl]tO82\;L,M#>XARXI1+uKq^XR"3T638N`+VUDkbkAYpiqTC\`l=!BfSneuPY+ae)/)@II$"H<R:%Y7^Q^!6]0!`>([K6-F&b`J*hl[po9&2uJoS\55:d^nl7>R_P?J8Bobo;JP1$Z3NU,;@B+H*l3JQ"T'Ohi7pChAR=4FfML7QEhnuM%igtSa3rd4aqK'#)@_IfTgE*0G,gt`H;[ht8l*Io5mH:Bh!;i&!>,jsDaCFa=":^mFI\\W94@Tb30138o#AUuV%sDWq^Sjp=m2m:'%ikZ6<e)eWZSJYhL7[k%jTFWrrHo_Q(O-(_G]/,t,XO1dL0%RELC6FhJM-i'g<XH'20FkPk3hMfle5H%/\3e2p$(PA%):th'_Pq)-%mLV:W4B(V_50_,_1iHmW*1Y@&(d@oqqYjt#*9(4h=P2iQ.`V><gdD)#o$:6..uA^*4f?B1jTY:s#u8ile;!MkPhtu-kHF_e.:4b.%M6XYV2c@tLWKUM6jH3F'T55'cGAf>5LF/Tf4,o$k-RW6iOSj_E:T#5ob<J&XFP>\+Rt#P>q(BuX47RFHLYCc-AE)FQs%cBPST]f4%q*ug(:-3^Ya#<H]Z1"jAqr4O/(jM"4EanbdAm;d26Pr,/6V;AlI-o+Ko1&!1]r*aa,85@`1mN(PX63\%Xr+oJMbR&?]!?hQ8lDL)%nZ%GTQr3).O7@S<X*@55X8%*+q%7_qkrWHP(]f>e<c>_nlh&VHV[p+?Daem>[,*A0X&+$/h($^T$C6K9E'f370]KS64JQH$2bch)%R$G.Q4sZd'Z76a!r%lBd?PE#Bq!/-8<dG0"(c/k]aLT6%DW?&G9Z_lKTWr\g:%rh'KJu8-@?rM$jmP"O9g=#"0@qk<TVE1ii7<8.%dB#D_2lUD,$cD5`S%&./Wr/B8SN;+Zb7iSf7.tu<;RX\%p7$Y';i"&JF$Iq$'tr2?Sof>>ignq9V)11F2H0\`l'9a+7tR%JOT<)j%&l.ei=6(J2MOeen"V33m81VlupW!aVI+M%DKHe6$J\#h^43LGs?9e.V@&`0S6a:6%ifs((!Z^j`@C3e;flp8so9c*DF6TG%>VFr\%T(jaJ8AsZ\(INfF.uSN=G'k,r#;aG.Z.I.=WGj6:A*bZJ=sR+dW.<Te@MO-Qclc?`/"i5UGh3&C9AC6_Bb9%jKD.[a9:?GaEi<F)%.F\CARURi!0S&J"L[5+`rY]k$rlU3e<7+Z:0\3^j=ck=(<d3WYSu)>*%UBQEKh.KHEL9mk0#]=";T(,_8rg1G.`=OGX)P$nHoflG%^)A^&=N+P!?\Lb3_[uOC99j$=_c>YnAHX(Lb.tFB;h[T*dSB?1e[[Q?i@UC9M,,U,Cc[!XIIre_8Ri@-b/E4c5\#pVK[<h+3mWU=%2Va29`8uA!NV-<qd+D14&8>t%@>*$1?ltKMr4Rn0O]+'TLJub/V=WcM@*Zgg"Gn*7'6>d+`pJCc,1"6dIF3HSWKL1JJ4,EbNB(&a%7l)b>gCbe&goqEZRU"B-eJpBiS;S/n2*?r14B#^d?Kq9RVsKp1GokU`94%Dg=JNk^bOU9R,^@p47*<oLE+mEGqt?opR>j:IDZXeG%IHCbchOSrcF(lDs_OX-ho0?ec]O*:6GuiCsjJ:j!MYU^sB#]6aq[_O\I'bpf4;'Eied@?'"#8hQD)^WA:oBUDo)+%lgBdbDgT,BJ%<5dU9@6o,\[(O)A"`g1Zm,<M-[)"g'o1N#Bi'<ZTH"['ab_K+j"!s6m9mh9cQj9h4klTRWDc>d2S&'fr-K[8#/Zs]qFdf(s'_uTo%(FJKJAoF2GdV@b?d?R:lQ3eADij=?W\#@+_>R4K68nNK]fl7@hD:Z$8F8;$/pOhK)DX-$%LVkG+8H<hX"PQg14/E\.V_icaV['7t%D`7:Va]*E[n]q!PTDq[:[dGUmOM,f\',kqt/sXK7V[]5BqP8-U^<hO!(=u8.L\D]9:aqtO^f%einU0D5;YTKe#/84)3@+GY:%E&9%2q@`$@23"ihZin%a(g!N.foM8E]gJm:3+&T8\f:LM3C/MVi&$'b"M8?MCjRd5J!&GBo(Lup%.h,Jt72@=I-+ek(RcMQW\L]/Iol#%^p1DiW3,<F=gq7N3cb^CI3]oDf3i2Tb0Dq7/9gl_!DEmbc"ZG(lF)dF([%noWO-emA\#->phFqMFH%G=p:a\XA*H"+N2\qE7hqG;%?A.eiZB2@G%-Yr'#G1(2fmb+EZVC&01&V\:@J/]<T50D1/C"052RBYZ]jed1m`=D!@Ys=!'9f[u_NXE$GAoX!g:]^f4STKs%j8>$%kfKGr%Qn][hWaMS93iq#M.T,<<Cq:_YKco3UZBZJQY=YgA1Ud:`+$SNQ81/ML\-B0JfRKRghgED>%H`B*7*(bE_Lu\d"%f0AJn9u%m-u&gXkZ++-u0G5+=<2fnH,>Rs*H>+>*b;XFN[A?c@5*0p2R_<;/7En'$H,:ITMgg)jP$7?*.F4s4]+`hgW>@NG`bcREM3=G'>OO%=FFscW_%L[R/UP%4q&-%b[Dk?d,Bfd5TWaL\$s+q-I5`9`HUQibo\O!;0Q&T*[O[Vk1@=J0OJMPZh=]6!SQ!#n'X4,";Ojnd\-_?%1%>)e_(0kFI,D%W^6G)K[451pou4fHelH/L$a$2;NIAFFB'l[)B1pK2m:r^#E$lCh9",V5ebn\OFhbo@.!:UH&<DV@Ud@dCii!&k%]n2@^;c?+8LNuVt[Kl=67i3+0*io`pUiSbaD=I."s1^Vamo'JT&qo=U.<i(K2(-iEkR<d0I8ZeRdrR,T"l<h,o!\lX3@7[OEh(#L%*&__aVT@(V):**6,6L^/e_K-Z(J(E]Gul_nL*3!XE-pLek(U8gVV1]<qKIrGlUgr^'5>n87U_65H?P?)He,05D%d(fA#=QLgo[ZT%pn80VZD.^SU:O9QSn-o)>LnH0)?fVW4iS-QQj<T_1<0p(aM$G$o'=,0L4$V"RJ;)V;V(2?L!8(_=lnNj)QeTcmFU#8*npZbLQS2f%3VMmm]u7ZKahmDZ.PpAqC]'!CMCP.Pn<?hCnJmFQ_k/be(;>c17q7d4lYKd[M`guia(W#]@WZOo:8;`d<4Ykg]Ie'GP&Fp"J#g'a%9>%ObrpCkf*T\U@8+0cLjt^_qk1/J0@Hll-D2TcFKq>NeG'c.C#nV'-']7>Y%LciE&2Qu.9h!gJhYaq<aE?['o<tg(n=si(lh&g6%Ra+8AXKK0d$T)CG;c^,kOr-M_)-fmeX&B7'<!HE&W'h\';&NV5_6(Jg'U:u7'_al8TMq"ANOS*39Y]$B3J)%a\,GIB?Dc)+6@Qf)%J@kC>i;kJS<j>KUnl7ANQs/A[[MifG>?0H2UX4jS[InCNe_$D`D)HJ`8gQD5AOiaqkW)uR2`E+0Vh3X('8DA,T5<-De0<>M*gRVm%l/d8[9RLg\:=?p6%k.ns%`op]Z1G%p''K2c\a.'no)oNg1nAUj`:au"WEH9Z]>Fe68rn(LMs+Y6gO/UP;7?;YMX-"8LPp$I#46C6%m;Rp:1'9M1"=MR/J;!g.qT=pcG@!9B$?qa_^=,Z",GG0_9aD)fNr]mUV?A0G(Ohh42W&>U4ns3(\5b`XN_D(F:1kak[G@=?'sL5Q%BELdSZ@^<5)tGdq'm"Bl5W,CR.cpt>&HNWVS&PS@_[U*q+B/QIb"R!.@H;faTRfOa%7?"=<5&]eBpT]_n1$O8/7a@`2T8eRe\*Xq%,^XK_E>D%*0FJ73's&m)__DoB6`ULWK3/.;P\qW`@lC(@+VsuDjm*"QqiSdX#$MrH(!&^4B`ob,f#E<Y.ki=+`RUC/hCnXXQCDqg%:,UP_'3;F2Xa"U)`?C>9;7SNL>8Rr,\M+(fP!p:I,1Bd:!X\5r@]U)soH/f%NCk6='/b_G\P>m+V6RN\5,\,C_[`+5e\f6d<mb7&%<DO@PW*Dhq&0u:@0-^9):/nqk\.[KPMsQ66Ta8e8,!?Y#;?l/BU-tkj2DN923p<-,b<P&VZZl:m(<lp44PY6d>%,G&EOEWae!mO0%ja!c05gOH0>>1*K:MMPW-)[nQ:='Y-B=L0=Ee`F*6Ot_9gXeHiOT&c3"Ch2dcc8cqcZiHf<`WP*hZI]UVi;5-!Ymf^4+g@S:e3['%XR;"%X=dc#c697c_QF/LVsptf0%d`&4,[%LT?b9S).p`,9K;4U*f9(#&u3S%HTDecO54\*8U,cdZXIr$iP+0/E<+I4K\fo.odT:X%I6*EX?<]0]o')mD0i)5,#D$I>m\!F->#(b+;!@#MSRW"7e\9kqbPW(+d_+Tc7%7H'(eY?J0![2iTI@;ADF*qT-6.+)+ud`3(>G&]%Y#,fV]5s1,Q2/Vb[]t"T*TbPdat2:T]K8o/s51NU\U&8;9?I*4^>.aqY8>-*`19n1qq"uZKm:(b:(92Q88$iFQO<W`HiJaH#]+(p%cg7.lTgJuE4#fWR^>"/Vn$4d[<-bVgi:4P(oC!Qtq^$=D:tqQ)bC!Hqr,Eck_V)'Z=C/./"X1u4@UGGYd-!LK1[Wqj<R\^pNq;Eg%LT>f+\^]8L!dG)pp8qG?[Q,F0<q>N;n*eM@iSq+AXA?LjcRp8N[U'b/Y5+S/2LO\c3dVY&3'fFor)Bn_a**&LkkV4GdAg\95rJ<4%e3nVA-`DckT*j?Pc3^Mqs*H?&9\S<fjl`a87GJqXUsfHe?L@a#TRd$S=oG9V%a'9&gBflss%299pb_B6XB8%_f?"ODTEhZW=^!^4%B9EKfEI,plgYH?+X]oR!b3cs-9)uO`4Lj/u-C9ltp6h.N:<o$Z8C+(gH'EkCa_0&>kCf)DPQ,S#PP@lM,j'PI+,].REC+-Jpe")Y%8#4YljMr>;nqVbpPE_p)@IjCp8lhU>Z\5D_=iE/XUh4CF_`"XX[g4drP,9Sl#Vm5f0bliC+d,CtRO'+BQ406L%)YcQdC1CCYUIT@%<DnSL2)Y6b[T/Lm9F9Q!,q[<;0:>sK;\:?\W^.#lQ=<^IU<41C.(\@;i%60hX,8Hm0h<s6<jcc`'LM*(%[),qp6r)JC`'S`4jp[F%7@PY^>+4i4W3WPRpDfQl2)J6-@SIJ%A<leQ[\mdS7BL9=2J^VaK;(%oVXFPGFcA^%eNtNqP+fGu6jfD/<X(7Yi`iE7)p-rn/0s)o%*#H:eXD4'FVH>VCF]k"]S/I;16I"5QA5e;X.Op-SW\ZT&Chj_sWWp0b>II9ML8?+=CbflEK#?.r`V,U\E0-l=>LP$i%95]9WNsCF%XQVR[TLt,5-7qP*(l%"'fSXLO[i!?1lDBE7'[oN4PYDg(fru3e"]LOX:(%[Z.RQ^X0iZVt&7)[\iE<&:64bN!c"NK0,03b$"`'94%MN^D@=so"3#nP7g/Y+ONK\9L6[b.qgm/Vg`Jqahr@bf8_\uE#iVC7m!(lh#(DIAC.V99PslR%7_Z:,po`"5UgC0F_3d59EuR678V%_n\"]WX-Eq>@^(6V$P@hKW$elZ-E>'Oohe&fg_'<8ojKQp;!s[m('6u#dXh7P!K5eE5BXO`KgLf,nk5b+Gs_T_-"""&Ah1]=caG6%mg74F'aiDI"5b?AK+J)l&6%'16FGH]WaZo<TVa9h6E7/u$OZs'@9P8d?dj-jp6HnV9NI:L;i%:&=@RoT([-43`Hk;3LsE4na?k(%%d=FhE5qpmP!FZ1RQX!W(&gW:@FC]EHX8tu@eZ>QFg1IQM_DK:*F[-<7,TYKrAcS=I'gdV35p<g.As*Rj^b!AmQq>mYJXDmd2;'bS%B*+dG.=YCN>FMYZ\4@<!$\9^pWZ]6e9aX1h_#Wtn9W$Mt`'Q4^Lc2Ce_?j0K;&+oq,#`"?ac`Bn][CJ[#ZaV>]<)-[pYs;'Wo=]0%e>V/u0KM`F<cetDO:\'&#"$E/)AFAu$Lbag12`?e;Uu_6kRp=rOu4LXF!6>l)laHAWEIn^e?<'\6<%/UOu7f)][8_sA-M4T9a+tf%2AJhp*SH0>+gsl+-E@SF5j2(s!+.]&b,bk6;Is*^'&X^8,B=]l1DC]MR]Vs9LeX:[5h7s]2\ee&W\0)93qJ4W<Y/+40tYA%E`S<j%#dH6J?']<3jeo?6,U.q:m")-g4P,-O;$!NRJefIs.d=Is7@9o\jb+D33]'R=YW3H+)9\1Ceji0ZOS)OXJPNC`WIf@;A#%O"$5$Ap%\fhCmJgJi^<-hMr@FpU>p-cu*Pq7Y_d%_uuK00fZM(Dd='H.e).('UO]mfq\lA^fkPBF1.^-rk^Akf`_#m`6,e7$=H>aKPiDG-fO%?pJXmhFs?b/qKFLk&gj77fnfiRIO0\_Y7"r'hC@uC3]rZlT3J,U`7sXBk^7ZYnWQQU/2_b$\6jMHF@tP>KAK,VZ21PVLrK\17#!c%]b,\pI)5&,5SV[M.$Oi;LaC7B4U*.E-)r(>,r8:@l&(>"&RL0uUe3!"U`jGg.Of!f!>A"CQ6N@h1u/]cL_@lhFKq(H.F&&>L_(b]%O=3dLq?`*9E+FH7U(fsl3,aTBqT6NaIfrK3KnO(P)9N6'ZunjU16Ege,(Tm5838lk[rpCD7:C%;TR5)S+\u0*T-:rYgHo2)XBD#%%JIk$Q$k5$:5S.)u]"!]l%;$D9M[a3Y@YgjoV:\LO%bMJ)81L>KGWF'MD+P!W&fj#IF,"JgO?=)KEoIKf0X>XK.\K=,7#tr<`5(Ll%MqJ8%;Q62cA4G;62&r3]H.\pLlCNc*)PB_?@OZmjR4S_DO`8ia.Maa!.TK'V,*kiH.9V`n;u^^b(5[UD4j0W^X:%sgs4"_9U-3:N%-W$\=JGRO#"BB;p34Bd?,p5k3&I']hm=@`\St*d=Aq2pM;?.k(PBS!h0EP0UCV!2p66NN!k^kKf!E)I5?j<#J8sgMlIMe$XM_GSX%5D,X`,Y"tt0T!)N1:N.\HAh?G#[Eqc#@p)5EtDkR1=g@/<#--t@3P=i(^<69UdRJ6C9cB$Q*(>,W+KHe'WM<%\EF*P.B=AV0*X53%rE&`F<8GJmchJQh`-$_U!>,B4'SH/8@Q"t[.404DA(J=b<"'bNARjP^`$CY'jogBP&u*@nRE2ZB"sLiOF!:=M@>Zahk[\',_5Sdq%K5(eYJM$+[D=MWr-L,,o-tfCeY7iui65et'^iH2jOc5c+SM#]7,f?:>,/-^\Zj-ffdcpUI@:5i1V&5lF0WRJE0*jhaE^Z`mK>mIP%hbu,(aJ]kf[0/hk$o:FR+t3M$.(8M0n3'^X9lDIR1Jit/#"WS4Yr-G!W+[K>0bRp6oh3Y^#Xh^]k%I<$=TH=`/WDHM!e$%6+4Z(q%&RAYsC,5/XGu9`m!&deEJq_)er!#WE>pn>4G<nc%9%,ZIq+T-_.In0OJDbd;WL@9FU@9Q\ejPU;:l&g(k`W0sMC'I#4jjK`!""<T%VTsE-n.GdG'9?6m1_cbh7[G)8T#BJa3JIu;pB#/?&lD=_0UITOX>"2>#_eD[L[pTFLD$qP'\fpljKWP>"f)?o&?)5tc`!3U2B)$6%o3[l>Ko",6'8<l3C5<_EVR-=mZ"C8m#dQ8o,NPQH;Tq0Jk,kU,%A<o5bGc&W`*huS#.#6goD[KuTbXP)Q>-CXA^jOm.Q7g@OOt1E%FANncbn]>nPUTBc#e*]J'^"VJ,S140..@O22[#rs?R)Vo;[B05;p'smVG[\n,,X3I$K;9FHkJ>-h$O/0Fdj8\3d<=b`6^'<C`,9\%c]f;7UGb>jBH$WW;JL7qU_-P'G*iZ4HkT@'^iUh]ODcK+%>K_QZC$6G(lWDC?j+OhA4sq&g(IW'Z>=$KW6.f#JB<Pi<GV_7^s42*%1p73N!].cfN^DKS'G:I@75O<2kK:/r&/]a1@>`#@,)+PrN:9hMC__=b$4`M\9SGf,oFu(SMR//*/C&SjaV+s<LuJUYNW?=1M4#TS%6W^]IE@,BC?.k/ukdI@5!-Dr_#o<_#BZR:8*+YNc;BoWI.(<0k/;:#rQ4h?J=o5)8g_5DdiHqH?,W4P)fPfTOR?Wr``sm9FQ77d(%>%'RmN#Z\BpC-5^$c2Q_RJUg)PQl"iPLW(s\>/bJKNAa])S4@2Y@R-K&.#Os/>c8m8^DFT[SfD%!<QO70Z*O'_%R^14_uH#"n!9P%E^48#OCdQ>Ob$q;#kC:k]V$b?',.s?`@(hI5>FG#KfpdkfL'-eE)+;Dfa^]K@YI?ImcEY`#ujU*1We(a(;P::"?hmZ-AC(foC`hU%MJF#5F3HQqX&S;]TI@*3Wsle1K4:P;(1<HFSX<C.:s%Ek3:APL&;Q2bR-Ukt@GG']CUZ`N2*_SRZ^Q&1Op,JUmC@$=c>"1:;*$hb%C;>GG?-Lf$%1pK:"ZJ9rN\FCmZPkN6&q"pr)$Y.CUU-E7N2DHgC'#TZOQ#_1PAUt1YrnWB*cXXa9]el#A_`kCe"7'4>D*Rj7u#D(%#bqd50Yn2$&EXSROH70(pM@R96n)D"'t+>Pj9d\\Jl>[s>mS*?J2ZgGAS[7sAY:$,bm;Gr*EuGKO'k#.!qLsD:f1Wt9*!=5Mto,&%e@\K-(R!/hA<9B\V(@J6Q-i-H+gC-a:.Z6+c4b$=A6XM)HOC`Z]?!H#*584_9N*+3,7]AtI[imEij!bH<)k1^<%DDT`*1-JeIBHQ%7;NbId:@3N&.%rl3Y6[7[1(#Y9"%jhWW[(5$.c/:n&Z1t@$jVddb1W#`_@T"Pm9AV##YG*>u\#F[ksB'(^a$%5YQoA,^ZN6n^!Su%LD#e!171en?5Ps@bTNjnbWB<B'1C6s.=7md$ec,J/!`*9;VE[/"Yt3@_0@Mh+U4bJ:oe.Obb4k?W0O<K'On)X>q(q2`J*6G;NHl8%$N-K3-;7P8-6ZpQ5e]Sj!j;X"B'Q8q.DPqW2B^Q#W-d0NJCH;Rp)\hunq:EQ`%XpXI1q;G+dt$WURQ-.iHpI!1bO@pR<Fd>s1sD!%+:[WPf:4D+5+#E>>;STk2YY0]#!rS;em&Jfqm%Q7P$L.BJk^AK;*'n\QAuReB%WE2ZVX0)5QqAH6g^S4K#\b1BJ?DZ6Eq(&!QIJ0%!2S>7Q?5Fr-q%VXWe^aFiN>b2&HIoo>28_IdP?u]$UFiI6\D:e=k4E9!&3]JG+o*>U<>%X&/$l0!1!H20hMF2K[8pM)-Cf4Wu@]8%!2>s1WsGI'!9Q[6:t5amZE,8dBp=,Q_P./9(lK$BRM:G%-ir%nY-\'5N"VesdVNeSe+[7ndU9^00M$u"MD5,k4R,ga92Y%2R6atE%mqd$9iH`<""R,`kcKtYSU@$Y]ZaXYA!'j51=kbK(JG)a)R(Wr[!d$=7#,,p+3Z6^FB?j/g^'LJn<)$sJJG)U$,\^%amL-$5!6F!Z%;J?^H2_J7+J-Wpm"U#YM'EEq91RC04'EAEDI[Eb7!sRm6W[9Mh6!OK0'R+J'C^cYjJOsKEOY*7@?rqR-9giD)k.h9;nA(FV-,>o5%73Rh3\Z-HOI[4N&\eg(b9OL`RMaG3UE-*bE8.ENPFY=)cCdIfiI0\l^dAlEI2&'?G]oZE"(]p!)/EfJVE-*a*5I,/5\eeZ.0R?%Z%,0Z@O0=!4q=TDBVD%d0g+pC(_)C[op#2b\t8-'(&f\R7!'EFLMZe[/N.6o%;UGNl<!"am0*[s??\@9=!"TZCb/R)En@b\a84hbQ:%0TAoOP+7mA6`1LM@$W5L'd3,TQ5W]o0iS-bK.(-EB#0$h2*nI^:]X!0R^cd91^sg-:c+`RrL?CZ$KCJV)Cduq\8YTL!'heV%ToM,%"\DB5dmsL+>Zo6\qcS#f)B]0<Cu5o*Oj/Uo.0'q0FF5bh"j".7M%kK6fPLMk63I`EF5>2.!J"jD0,aor!61Nm/5Q<h158T05_35m%\Qi-Z_?'lPAtYFuRnMB:;k%Ko!'l?PMOR'P-ibC5Fu=6(%T9PKF\q[`iefgE=eGc6Z0Eo0bRB=?57J;,#l""t2us#I\D*bJM9sZ*%EoI39LuL1,[am--!+846_4DmT1=4#+`!OeJKI?lrD(lb>$PEFNMmQqZ!gGAIENb9q\j=<+.mO)+ZE/t\<-28(@03Z<Cn3S,=I9*(%R*UeH#lm@N<+_B2L7/*^_?;tT0[XT'N&544!,^!-QpQ@4!jk`-F%B2?JbIj&Kfr!ESS%/Y=>PK\Q5E9qG[ef7$PT3)VHQOQ/51T>%P@="+A]7COZc(i+"Gd^=cqD$#k$[]b/141XJ2qTN*Z0kM:j=gc'.6$g#29buE<6IV11e[d`X)Wu3aS@:!J'CD]BI0>!6hYUAd:\n%!'nn/@M&SI"G,5W,a$%P!)-H&gKVh-9cb]S"+*<s<B4uqOTGN(K#MET!MW02;Gf#!KLH4R0GZ*&CXQ@5'b(n.*jDaa-WGWi9%AVt%!Ita<c!jm#$@n.t\_L;c!.Z?6[)>9H:`XU"=q'D8V+iT?@K/T$>._f:8k#M/KaRHMK$+-'N;=2S"VcbA<",W2@9A%V6P.HJ'qfF0%ChFgEU"DN*_c,$H%SPbB-5\:!#EMN."Ub<`X?DV.B&i$+\E%&3GrRRFE[-HDYQ-p^N;DML!XaU0aYIp_6EgGT(t3'4!ZhUT((ak)%=9'J,W@CIe=9+e")a[<(!$rUZBDg1i__Y"AW!XZ)T3YWn:"Wnu$b"9H4UT",'YfYkC9tBO'H;rGTF9:ZH94M&#W(X3$OAF6>/168%d/qB,FM>5$11"C8_Za_+Z@Xe71gGPt0ZY'J"Xp)6*I3SZTH,s;(($Y>edMt@@!h^6GehT9U'3Y5()[*oX]^r)$=hHb!$_i%RM;J"%!+srtS4'nG+U[&@fDl<@L']I`(B/i=#6\8s&d.At,SPuN,I2!m!'jWhRM.;=@7%2KieB1o?i^dk"UbSi*\?4Md9m!VROL``=F`^p%PC'8CK6MiY$d`8^g2Xjc5_B4g7$3l%,tYc0Os.aN:c(0eG6W\%kQc*:"Xm&R@<#$k1@Hc7$7?m24s$JVYl_V?MMXCui[?+aJaLA_%#V[VY5gc!c*X6+Y\t4+KXFL:l@KclOM\VlrNThlK<WF7ab?fu>!1;'kMeK$h!%<gf5l^m>%7pg5^t1,91;'H"*iMRr"^j<Q`=3sF%.0>mC]0\jg!2:<(H).,8'FbC.\1gq`@(NEW0!()si`[tB`G&U-;\,iO8c'Vd0o_k.[-Nn#SIcEC9",Z;UHnkoGNb-063R?YoEs8U%9%$kp'b(mSBV[3f9u'R+!)]b=63R?UnAG!aJ<B&I1S0:-:mfH/4!aNkAt$pcUZl(b$Pa4\!Y*7>;3f",/5uUW[]4=UBN_\G=^df^%1fOGt`;F"0%RUD5=!d"jTWnQ?LaLS.Brh;"/60Q0_.!QNCp@(CMG`/"A?c1C%09L`^jnbe)M?#,5S0<V#T!EK$PS*q!(JGKc>Af8%&-p8J#oY@fkgW\U4Mhpd!&3O?@)2mEEH'/*5%n)f-X$LXPX>_Q/A>uGU'1Ok)B)Ng0NnHa]'^K1$8"\g39KZ4s"-K09B,f6TsOKl%=E'u<.)aWG$^MEq"*(%="IQNrl@J1jF!0A-X-uKc-o=>S3W<-j!/9r[,D[+3F;m+d;)P&p!W\?oQ)t+O%GAc"81.XB+Dh(Gm<Jbd%TLIKN/L1IdZ\&Tu=!_&\JN<6%F:r.ZJCQ*m:q0AQXdZIMaSMT.mUl#LCaWP>::85R)/-Y_Ks7[\)D2#WO]9n[(+qj\)@HbBi;s9n%=][Fd^]S",XTH_')"><h5Gf!G3DO8/!:?#e1k$2q5[eJuSOO%7nM0Q*!sU.\\7B1P!u+TpP7Ls%FA5;BFTKsh8=(VG2uqi'DXJ2o%gk6"Q0)uQ\pc.dF!$cdk1I>Ku#p>\\RaW^WKGDhm"U(2Xf`I,P$W)YuD1.3V!!m.96GNSTiCm*e2uG$#O?lh`+jA5T_?D@6iMI_,%(SF,M9FltGGd]OB7Xte5X?j"W&cr`&(lSIL&mN`0/*qos-o>1-A%FUR$W*50imqeQ!'loUMo?'##[\&m?3"ADr6.<;;LJY!7o[bs%9HV3H@L)$VX^)cf=p%0T;%B8J)Z"tMjK?t#p.L2X^of2ri3UG^)'5EX:?0-+_.QJpCIMkmi6Kg\O38GLTXoD@RC4[-[c,HoVWb;i%?,k7)/o(`H#$rmmVgAOb'lsSX-8o`IgI-)c0o,9XL:\+F5[eaQK4%YuPYpW`_K;!5OtHjTjr"ZY5_PLSKrK_nJABe<`0E[#k6qo%%@1"+d3<k;':a9,/`nhrO%qFKr)FA,#Wc5QLJ#`C3>t]5)\hCSnE$kf["#V:t#Vq._Kac$t^^nPKB1>0:Zj^Jg];lkdr:c6EfF7>B%F#)LfSoeVIbM_?KRsXN-c:D-fmE7s9d(SSFJZp?Y)0YHN>%49af8kF612$bG#%S6+(/!(iBpf7/>V\q]-=DVf,E_SRI3@>P9S:4>%(A^2reWnTBCI1,o+)_esNRU]0pVotCa&mVpE<?\e,24_.kK%u?b)/f\Kao.lEc=3(<!2>jZWUm!_b+^CA7<ZHF-<o_+TG`BH-3/;%aM2DA;u9PZW&EhONq8f4O_f<c$1Hor;P*5`/d^o+Q[O7L9:iBGOpNERNg!*?;N>hh2[>L5GGUl49#hgLU!,:A#RrE^g2PZ(\!a>.%A7.Q,@sl;s\`BKS-O*C6nL?./csR\i"rl9*27[6?/Y')i,m,)C3OrZCf?7)L,e;t>0pb"2k)r`.I0n"A"$*rr+*5P?<B#V#/f>,E%RnZ8l'!o2+\ZFXn2b0>F-'=aN8q*;Sd.o8C0pTuY8k0/F>M&4XIZKU`k"J=l18n_AY$6$A.[cJtpW4!YaEY[,[AC^30b3.re&0L:%#LrDW9>[Ed!=b7]laXl_lcq8L49HpnDob$r.k+n(ELi?pm.rGMABs)k#6RJ^F1%EsihHPqo0A>6#H+H]I4ge,?On3'RXi4!0:8s(%$1jEU,^\;;8g^ju!6A4s[j1h4`gof!(u_%0$-+GiG;:m$ElOZo[P-3W>ScL]kW:P;;lLdL8a3sR\Tf7Uh3TmilUdE)9DO`9o_+e-%?sj[dSm`:n]O9f_M4DCcJ4BfA%%'L2<,?nUifZi7A!9@d1@."h,83,_OcW$:E`=!>EaJi]H(4#%IFgj:1.n+b!%ObH]1f6SM+.]X%QQm1[UldD$IZ"]YGZlrMYbs>K[6:l$-5nn^C*SF%>WadH:u.7(#3&p(*gt)e7a4=V0_7j_P(@G=fadS>3Q'Y.7YR=t,A8[0njt)/%WLKFq8J2-IWD64PqT`-_UK!Likb+)i<1>q:8HqR/g0g((/2AM+PPdC:pRsYH`Cr$@96F^,ob5IF_/T`@c6I^uU>)0?=#7r`9!ZD;%3FWJ!g\2ZW+Le`mZk6X3A<MK`Fnl!,e_e?RjI(P@C===u-5jlNE-f!M8Hs?DRVKB..ql.,FbNLE.lqP;6nT@l7K.HSPM&PG/=9+#%n'61^EraKBh'neq23J9-U0H#M16AX,@J/fU/"t?FQOLg8$KdL!A8oWuL0(r9W`gDgPPK9t"WETHCt.]7,*Wj&^Y<cp*-fk,(Q0Y^%5F58mD8-T.=juMZbTp]6pX=403LjfLbTp!*@$2TJn#,aX#"IIt-B`:\nAmCR)EESTd\)_ZS;Xk%VB)DW-F1]XlpbS&)9@qWL1_8>%fQEomE<R+<_Zm*a">Puhqli@2"$:6nCT0+D6NUr^>Z.e2K16&G[Q:f:8@?h`=l^GSM0q\QO9+!2cl=ePl7=7l),9BdpiM*TB!_5>%;Xc/KkOrs`o\DAjBdr^=pg]=ekUFau"1q;r1IB'E<)X+tQE@eabl<+VFdRc7HBe%V$?*=Vq'rE>Y2BUCaC@tmpCDm=<nidU!'D!H%QkCG#0fseeo1ecmLh4rc4VuQ?ZAND9N8%;]M%1Tf0p"+%,*+P(JVo`G/.KP\XNBK+0mPli-BD;.]XgZUj6,.#;Vn]`R=j?Uh75=h%=*3q?-0.8[`#9>J&>R`4q9>bW*HPGUh?rZB@\D"lE6"I^>O:9e^Sbp&a#>i2iu'%ZXJ=\bKh:-gqgL>bCu1PHeu*e'rVUQ:D!nP[%7"@QCZQJa>20$io,F]4m\f;76p^Q5-_+YJ_7>pAWNgVj2f#f^U\cHZ"A`>\eMRFUEXmV!$gkgYC-6s+%^E%jcb[-bu-DGWBLgsh(%gWTJeNjB-u75'ic?4^&U',K*f!g,NEjhBPA*O?&(ga#</'<ChH+E^@g)ps@_2*G*D133lFUk>XV,(#`6@LcZlXA'^VJFe^#)2p@a%*qQ[!Ee^"Ba&C.4>D@QlX:PSW4CNjgcCgafLO4<$RGhAa201lgK/oMW1WMmM&O>Iq83LdRC??A#4(@IlLg<>@$3TO*plL=ncA^qP%k!DR#m`c^R\Kj!f]:o^a%7N@H@j7f_1<2Y7bI*aJ?rkV_k*X%$=$N*_eo`s*(7A[@9&1H90tMGg,>P%/6U`2.OMVpK1Z+#&]>U.Z%/OalV5oo,t61q+81[Gr9HDZ^RZsJ>gi)'OV+>iW-[qH(@'iW.@@Yf$"/qBq]$(D]-L@Ei&@]#1Um<2SW,]sM@eHg!sm0A_N_Ne<S%0n1u@=:;*<G'Z)%9oV5rlZj^D^T$7-ZqMK]7#V!K8KDF^L6fg)r,Ip/pZ:Dd_F,CTCncr@nY&.F@j#FW:fPSqkC&D\3R/'4[[T_S%/iAC;[lmFalOrJ3_k=)$QlMEl>9%<gNe(I0\j^p"a2!_,7\$g';E[#?#+8sDkO(T"Ar_^*T4iW:B3:Be=ACWl'/Gs8#oifrK(0U(%'%*8k*#!&;o9hVa%#!b6H/r[qMuZPL)Wd&!K/q5"#hN[KJWpp&O.ZP0UOn3GY'>X,)^GK^U(m(o7r0m"^hP;+f`8,(n.k)h_C@?0%FY_!*,(blD@nq1$j8:?pTFmiYe1m*'4G'PB@P,PjfrI_&P:iYk(W<-(KFR3k_+5R[WOo:a5om;&k8>`b;TH^JMn=5_@Qoifd2q@'%QZq60-BC/fiSl.0/%<J]n\Q2g\)<47i07$o;JP+U"&JWXq_FQB0RF5pH3sF+`h<j;Q3^i]hNpBDnp&%>`B@]VO+HA?&*7!DacI`V%K#qM3I1%56ZieM\b935Hlo)OQj=sH$nB<)%bat@'djc;K"gPLSCg+m"KE(b#:$WWh@+d\"\dNg&jDh'm??j,@49h,G+NQ@BSedbG%PK0(gCVsOJj>!nV#7>WBNY2Rfqh2mK^9Lm@I:JtM/gI`)BW?WZ[VDhqXu'pog%I1:WhY'MVReT]Tspnf[[(XY5m&"M`Q.36Q=lAK%URoopnYE]UN`f9iJ`a?94>bRqd^s`d4^Mm9l<p$$mbq2kD<YuWWfG_Y;:+7(]u#X:G8qMY/=rMJiUI?8.[g"/4Na*=5"*NCErfks%h8\J[p=4!"]r>qG95CBM#"Gq<+LR])TM[A(*,K/>/k4aORhH/PZ]PhMpSp7daPA[&&UZHX\"aW_>h.8IVq"TVS@D)=`ek&,>$@-n%JS`H)?pTErjRX8FJ8"JhZ#-dE(A(U'(cW4SiNo9'SNZ_M"q3.J40>iOS,&*1q:+%WdXK(L!!n"e-@]b=;SkOjV8/E9TiR)[6tZX,%k`QjqX9:L4OM\8m]#6581<4n=Z.11W(=*+A'3oL,B<B-VqD7AMNF+mj<.oQJ2Ge/76e=r-APjj;G$e'9*6qQ3-AO!KIn/<$e:('l%;*R#]f-ZqCemGfbI4S!I:$Y!8;IjfVgpd(^U_0"5:'EGYRap:8TglR:Yf:OkcUXA:3^OOTYq6O%-fNm&W1G=<"E3Ia-X1tmeOq@t%NG<N=dHVA\ZoXnuiZW#Y,+BTZof>ckLs<"^OKr_s1Wq>4%U41A<<qOB)6A-Uq2W`Klei.j'Ibd!!00lAMcC!=fTmpA>dbrSV"C-b%n1@NYd'+<_m$U8LckOKJ5tn:SQq;GN<6G(\ebO9u+&sZ<dAT3;k`SmM;R0Rejl2<W%P'iMl5HS5PU`rabc3nQAZ.q^^R/$ajERMa%<9N=Q^Jme)"/53HOm6Ubf8XZG*Jio//+Y_6n[u9P:I@?V*5U*AVP<K3`'5'.qXm[T3$EBi(H43Bo`[(N5%1>==\lB*-_V;?f'P,%%?Cb$i5"KfKTY+(O]3KLta71Y>+O*\@%dY85R,6tN)3juL=\tM?$S'kRP@lcS4lqHh6>Z,TQ;b:,EVBr'Ka>&BPFTL5[XF<;ZsW,5%",DdcPpM*qek,a<C53hlOAiZCgChDpcu,%*b:2$N;GZjT-37.eWBJ-G7X`)umACkcL)G+X,P6pCF^j;E-"#R<0n!J&S]ENIAcjb$%@7HeYT;/^p\]!*V4kFmj(jigC+e!U/l9J5Sdsa%:`0qd%B%/QZf/Z%JV0n]_bVST7UOEN\^QHA0+Oj%F6W5lKF^h&k,bY^d>LnHg%O`Ek^4Y$)SR9;>>%`CY'9rOB]AW@uDDH`#_@]Pnn#BF@EiKG_rU.c5Q:C"7f]qn&418a%rV\]3Q+OksF:LZY]UCpU9MR*2+SF5G0%re'HW6AiZ63aFsX_G,e_C1.koF?3WU=SYN3*f-rr9pB/W69f3CSYNoI/l[lG.b[82:^rjf06rHmr2.qo3-_mrF<D@+#+Z6?OO-+h%!2O?jQ$PAk8AuJoSW3pH*k\EcT58,lIumFgdR\es(I2Y-f857Hg>HZte0;u>l#\%klPjq,2NcNpVUL+;b1gb/%1G"?L8_h!/Z.4B%V=V/o`3'c?c5*B(k0c9#H&gSZA<#g@h,<Dk#Z%e=T#3q-X^!n7.>P?l^<$$_R7j06_50@IgeS.WCoi4W0pb(4K1oW+ZKXd&L`jX%%_5]$=T>Pb3YotaK#6Dh/&OM)d,HQVDi2bOQ?mEZBg%5>=/GT:7-O3PLD>)2N"/G3FPsPXe-k@Jrj`1Tn24G(l(f[d)5WgKmdhfrM%qLk85B2*`60O*0N\V.B5+OnfadoNQm#D7b$3);,6G&Nk[F+'A"[ENL/7*Z8E(CFDGlG.]tomK[%5`UZ\9M58'*K60mVNK]^f$11h%ZkN6D!e%*-))bT>rcZ58AqWc7cU,5PE3F.r&U_Kt3\[aeZg'g8"fZnQ;ms1e@^"m64&<FeM7=u]eUa6g,;tBX0<gD@2GjlF%((-1%RT!Q)F6XEN:7W,2T>0I:nS@8^#-#m:,P'-]3gX]T'=DdBaJenu-*\MSIB,jelNbY6F*NnX6p&('Cuf/.SU7YE<2WdgT")V;:Y6f@%(Q?SLNeJN*E)Qjr.'paklWC+FhfV/g$$*K*DG-*fBb9Sm.HK8u@\(\J`WrBS\KtupijUS.8TZTN]"`hjWrqY7#dNZ]huLM']6r(m%$jO[t3,%olJCV%!#/R;A.[&l0+r?&+/[O_1Zk*JC%a;3C_E?m;o/3S_+D0.O/6MQK,-.lhO&1=9%g(GDA.krgAdq6aYj+W6?hn_Z%7?<^WD:%Rd+rln8NFAVT7$g&qm)>!AVU[Q@8"!"e;cj`.4A:Oij:e`rGZ+@?/$N#8cH1_2gPcRO]muI\.e4HhqK)J`]_[9j?@B\l%dK+CTHN_g6`W:,69%U^:Yh"Sb+=*^u<b"tgBGUbm::tm]pp5d#&uGNA2mEi<QP?m@H6;5i[&f+,+<q"(M01"jiRIt:eg<';Y8XPT%D\X9%Pt0nHL%[g-\lf@2lKlgDVc\`@Ej;GQ)069&jij2q#Ng71<%@>KJV!o`@(^`;$_8?cYkQ]3R9)$qnsk?A(E*:?&8$?S*YB_D%e6G72M"@IGJ8+Z_S(>r;:#B8dVU^7NB\0UPOPEQTOB)TaRuKI'X7J7\?ZW$nfu)gr=HX7M$>6[,>dX>a=JjW"Qu"R\c9^>8#6!T(%(;nuZ0UGD.c`HuY-<;.Sp"X00$Z)NJV$YT85]!)NB_B55BpPTlOb@.K%(5MMfVa-1$;.n@Hd#q[X=9'u.EJLk3RZoI%B.JL`2%]f%E%&cV<]EeV5q7dOG*rG_nZ>S4LX@D-oa)M+qLf=3EPZ0'#NQ/[@`B^l)5#N_.!7k]-qUBO$+Dcpp*.^[0K[N"L'S^i*n>?<Jek=&%8.$-Pd)qOgX'0CW0LqY5[Si5$2CN]U8#m<.q3>(N^!4<\7%=]Y*Jc;3#Go^k%\Gp_l9pBQ,-s]>#pRuc3\^FGQr4_56i\Y."Yg`P%@=qHb0La$t0D7L3E$ph9T5@2krFtHUNm0bC3B&C00(!(b-;'h='flfg=Ks/mRL""pH^a/>I93kKel(`ZkAc`Q+o2U>*F$!sDeI`h%_>LS*&`k=P00A$\qLhS$Hc!k''.Jt(5u*tA"M?Fd%W')*OM<-(2B5Tg4?%#Zl9'4K+\5WSLi!@96JHF:Mm9o"Ft[DDrXIEO"*Q>/%(`'7n#kj(Z,g!&&=uIuSfmp52AXf(2MrtLcQ:^bd+Kn7.WY5d;)@>[oc5J'$qh2m[^9LmDI:JtOcDPB,crDlbCL;57Cf[-MeSP)P%DKKu=el?2ocA3@\V_Os`k".ARZ!6kKqC_>iN^DLn\=ZaNS=$a`WWAs1Wi@;8mAuV&\C#EEiG(M4'"k#Zcb[`e[(@ip7kll@G3i,H%YsLM(k*Yf$:2@>.\RIi>Men$2"k%^'@UU'b*4=tA9:aK[R(L$i%IA1Wkk6rL#T6&`Li@O3DIK_g?G]rQ!WGHY)=,l>U%0*69TGnQ%3:p;$j&aJFAjAl(@u3ZL[_1cD>dkj8Rr1=dS/38IFD@'3=l?OO/$L$4PT.Mm*8:o;7JKeNS)s+*&I1W836[KF]aR&%eW<u[je1=]%R<tK5c(VU$H##BW+K:*G8r3U=+(5N&kb\<R"XNJM%KYc!h[!K64MiH+&kJM,)jnKT1W3;7pWR*"\g,",Z+/%Hdcth)5opiCO'[P3%TP9IX!Jos?SGKsc._F.N<kd<C!^9k:+[Lg&`:0?J,%UqM4AEmn*-:E8>n:.^SFdB(RCG4#f?uVq4!V,lfB%MY4"I<=ZMA8#C:._B%2B7N9%?+uCD,32bKr8fbfF7Ql-3@="3NVE5(MZJg:i=akC;FgX-sc,MJO-fCOe<r@PM#'lQ"Dc4n]ec.27LJ\oPb(<Zr%Df&RK!4%ib2.*?pmt6.>M%h'^Ci)0.k:$+14T/3:)d1>[A9%c$I9u0f'DZ0Ac.c5'2C99T['(XB7r>p91P^3=qpJG;<[5Br#ckrEsCQ"$Y8&%-VN*$r*TpM!A7/_aO&f_aas=,T8a,U$I2PhIG#?#H9oj4Em_[q[J*?(_m.@?7a)./FG/'M6\B$JU9?oW,rmM7#Ebc!/?WWqh&3@q%#)Z@29Pt(sFa"N6mY6cMf+1em_8(pU<]cOKn(W_>,q,=]U,TJ,.o'\FjN5uoM^bF`:9Vlr]iu\[hfZj<"/XP4qG58Z#1fOuYMe!9%Z.g_95frhhJE(s[.4YkVp$k<2\@VAOfO_/OS:8><iX7J&+>8\FV-Cj`M::f".@8g`foC8H\m^Ih`jb8GGjf)*LCt>N9LErf6J&sb%gA"/&<@PMDBbX4C=/D3^[S/RmXZI_4jkfLt^9Ce!dN=>Tm@YhqRa,G#ljRP:O"f0cVi%!uA9lUeEk"odXp;I#1U_l4<'!cC1qXB?%&c=YjU2+)<X1H57;5_f:W;r0@'/S1/q1(V:]!MYF;3(ReM+4nT9=r5!fMAWAdgJcA=_mT$F6_0.KK7q4/FD#Qi:V'rIn]*IOH#8l%5T>a3KBmklf5NEBdT9m]K,C?-l0fMrFs%[UPF+7H_^i=e1/C^redR`c?kbtqS.u*#8!o70%'Ef06C>O:R:#3jFC>CfP9Xrt/u]>,%DG)LC,Ltn/0kX#DIYTdKB459?;lN'5ZqZrelKMQ`m?@sMc0ekna#+n=J`o1XG,#a,!90HeMEiqha71/VA*1NG0X]BN.u%nn($;3E%0[:)gm;UNBGlu`G1o0P!-QDD4X1F]4c]##?SK)jn+:Q3K[B6::NU^4S&fMn`j_\Y_.Pak=Y%g>Omr_DML6[U4#/[o!rbOiYC.a/:%6;4HO!\7Ij-GG`>2)3!N+Do_C&r/M)>[AIaoua>?ne>@Ka'YVLDJ.L'D!@H:V`UFKa4l49iUV-1Gf^QNfHeBRcV?aId"=JSJ#joU%M=aZkatChR`0=[q]!k&MV;-m)PF),N.bAQk.7MoQLcuW<p,;I_Dl63A%SfO!6Shq1<eOKg+8ef(Y.Gp@HsJJ@[to!_FbZ`Lc.+sV%I6V100bt@Uo^n)#d\K-),r7^U+:CTp8`H13>p<$FmG"M,1@tD6pYq\S(Xa>RKZL#Gf?8AFJ6LCB(N-0%*IU>cmTH%lgSj-s1CTPp%,b"IMUu=X<4jJpLU\-OSCX;rK]F#boO$_':lEAXpbb!@o<nI"sgn*=PV]R@nY3IP"6"5.D7[HT>A`9AJ[@8g2k3PP9<]VXO-TP@l%S]QX6BN*?_Y:J`<IXBj@3)$Y/cT:K_Z^<ISD"81Z<-,[Zb0AN?&B;l3BmV6I2B]^d)T>!j-7*B$U-tUoj1DuphV#?f:Sj;t(e?^<%aEAmfTN9m<aF27`26bQiX.Xo(^mNe0f`f&<MO-*J%>_s&`_#u@E9$!S`uahP1/:iFAPH_rHBB<DR#>d@T\d6_18]THm`AL"2VB;b%?ATI\S()7e(B/]bHpmgBW9<]8ZRkfeL+KVZ4eaLr:^iBnjP\38dg*b!4V/nFkm0''M(_IudUE&n.cmJgZkoPRB/WC$p0s_f3HBLb%b\;hI9ApC)n[sNH38_NSJ4KH.&C[7#/`p2ad5,/9P@@-.a)Rm'#uT<a?CUN'0qfctT%9,6i?"-nmQ]PDN"VA0WAEoEjK+o?.l5&+%FX"2P"sS+QLi>o'W[>+6X.#GofVhcT"iRRFT3KR+2>6tihPBP[fY5S-=cU!AlO7$2KkrFi$oS1CM)f:]`llT*3YbMgBA#OqV"jN?%WHB[VUqC@aD<i<q159A5=SB&G>'.OiV6eDj@t7B?TgAD\J5-;DY0$GqGQUdt71r1Hf]"t9mI(Pn(^lfVp.7F&&$uN3"-$1O8S#gC%NR@$jjGsNaOH!iRpB*!Eo<RQVJ]=qY1nBR1)IoQj$iPOI0aKp&gj#J<Gt[o%5b!;o5asGlcko<E=d%cq`n9])qX+S,0LaKL#FZk*%Vfk;OmU<XJBG2-l1ksj7?QK_7js):Ng^c5Q+.sT0*bZNV.L"j``^X[Wqgk'3[HdA\9ET+A6L!^&!s?O>CdQ/=Cr6*6@n!5ZqgHIk%UMB^UTE/i)*;9c^<ml^T*b\.!j*cBLZ$0hrpB-Cb^oV3uTP;@95!RDY(F:*r"-!U0a9T]em;WG.%l>W.T['umom`GbhGsAncuDZh%HG_F-/F?)*$gC7(OaK+NXNV:l"us?2p]>%%EkJW4E#]J(][)CcN_:0NQ_G&,g)2(mKCD#%eC%E$\K\F3(bRdPW9B_(h?e2[)gsY!%k"(qU8eF`UI]bKkDhLS]RjdQ=$H4X"(e%oSB'5Fo5\"h8$aqOk>>5;eZ+tRQFEH]\eS!Koe&#[nHfZ"t_UN--ZT42Wb^X&A5L$O%%F\72jSQ_3Z]8&)^T^b]1F%`#3#_2D!(o=N:VT$g'C]q-]MnDX=0fuMp3QuMr9E<?+S/mCSK^?![eT]"UShOeQ;,UH;:9Al7WE3n2%S>06CW1]?-dkj-iH\fD]4:6G*X[Y.o8'QH6V;.S+c<V*ZBGci/HB4:BS]YXD*ZMLY,30rnatt?W.iu,@D`7k\VXd0c?q95_DiW:s%'Ch%*6E+$.aa#.kfs6WP^.o>uS"a\YJN8P5Ym<nn0&:W"!\9c3%r%@3iU-oUc\QW2OOIN.*N(c8q:)Mh\e+oZ1>N9E^']]M3Rbh,%Hs(H9I$kf<1X$5PV"?($\VL)C5stW^KPJLl$i)U+b:lZ]B,V\q>Q/.YE7-0YJDS,h6NC]cJNRiQ`DA5N0aXLsf_U[p-Y/%+'4r,H%&_^HXA5L8df/$pXTT!u!b:S@@HO&mm63OtljVC,ubTc6k4Zl,/<^lWH&4(jq5h%B;EqDu;,u?K+gLs-N%)*3Ih+7[u!,n&(Wo32S%*tmc?$jh$m/:jgqF-8faF4OPt!*)G`GZm2@KJGoLr2E6YFcen>a\k:_:QE5Y-i$[C?L'.l![I^_i[4tT/!Kc(Y^SeRncU\gp-nma%0T2R=pf7piPL6IXS"ri6aP.Kp'*4;]@N_Jm9ETlqgsW)%9=8i,4rJ$j>0`3n).j1*2l+b+(t.T#=o)[%-aI;,IHG@6A!0"n#n3!N%O?OPLN92`9IGU`>9:lk5dO,9W<rF1i.Qj4/jbR7jk4+a$3I3\]dO-!!O*jTm5^$Ge6i>0NQ[0)1PCSZjMk:Y<`6Sarpo15Br>%U8%1lkra\+n&l*'PSqIO^4Y4)XSP&_"fKhVonMUf"W3nWSSj.l<0VpQ4:l-c>.bgE_5'Y$<Kdo_H"K[B:+MWHbs=^%b;6Ve?;<NR/`/%Wb@Pg>lt0qi1BHrcf!7^13B%[Z-JB)6pm]Y^_u9jC=)jH7t;l\TA?@5Enm.liJ[c$'^-7oP_0pj%$?kmA.OFPTm9g%/RtZ!7Wpeo%lFVU-ia3>M6&?3g57kA-6Y]52UeEbZ"WYO)C=^p5qI7C?eg<PR+u[gjIk"H89h>4l<TGH'j]"Q-0Og;%4iOk4OB]rWWs-0).mc<Z%7gf^+*"4,l*MsgFd_e9s;le4-ee+oT&NPD.B&]?H6qCFrRe%H/@Nl<47CIRrQ#pmhM*;>*Kk0gj_%tpF;B!C1@99M<h1@iDq.pAF%`SgnHIOd6gUHsRDBV5S8T>L)(b]-'gH0tT+m[b8$#!G5;>@o)^_U(oO3"AS(RdmGYV,WIbN+"!>#0+e';9uOB!HIKI4P@$2dlA]/%SHIOkVWk^D0oXIYe+T9KTCKn<ZU[mVd3]cZ5Zt-)CW0nh4H>A"#(d++etodU/lac>I)]lkap=Y#;.]s94*;Mu!sBDMDl(0.Ca#,&%^5;gIebAUpR/,aZL[K%I:qVo6-SerN*nm:(c.VIY)KK<L6U&HUc.fngoJYgLbiG$iB'_Rt:5<c$j[;Q[U]3d(M%$E6bTfqZS<+mA%:71-2#%"%/<lg++7'nOT,+tKN>f_cc%..V\TK#F&Q4moP@No=Em+-5T9N3"(G"[YljJ@8tM&\S]i!V9%:$T/eTU;Zs9jV?G',?DH%;bAd,TpW2)2Fl"2^^q/,b[R:nb(:kW7)aa5]4*d_iH]*h*.fB(8[G`7'H,JW_('=gOklc=9F-Lq"@`S+5uAl@j]PDjjJ$2P=?[a$%8`=MQ;Z+1VEM:h.Nec[I-n^kj7J`V'OZ=[U3H5q1U^4mGUEM)'hachg+XtRK.$n.9Un:HorJr3mH3H#P9h:06!:j0.p3"r9%ls07%/1/g"W;(b*LDG91oW0$A,2+V7+N-Z.UXaCCM>*Cm@cE&pQq2/&@SVMa,$jh-".F.`]L>HRaO(\OUdVX_b&9q0L"RNkg0.+ukZSK`%WXa:aWqf8D^,IgC`!Nc7aGLg[0Vh,9*4FWJ-*gC;:C&tD^fbb$:Gb/49"_j67/@?6<gJOXAR:_`[N`7Pr0@uW-sZ<p-.40(hKU1j%5-Ed78P+-"m(3HsZJTPUlFF7SP=q=GY\_`:*uHM&OqVcMF,#6=W3Gm!#q+XPI[QT2G8&di>_m-O/(g&/32RG0-\#27'g.:p+H"?`%e*h67V9Wg*(#__]40q@#"FN//9m)N2Zg@h$IJQX2)Q>mSNu?X4gn;uPD-"WMU))@k>i)J6&^%I98493_CU.a!lAU[2\\I5rV1<Ce%m*`fnN&&ZTSr2P\?_q<lD_L8M%j^Huc22DD,EWCdbL^If<Z6&AI-=J!T4^=BN12%<-\n,2Fa=(-*o[CpRm?!t@iW50iGE+?kYL';%C:"F+?'q`Ln,8><\ZSBVbHqAbO^4KQ^)NI+1f+k')F/&^!a:VjTm6`I1K]hirKQC-HnZmGaSU'Fb@Q,:E,p%(NC)7`1`MB%FR[pb%=[BP]VS+l%PV[De#+ef*]2Lpsjl9tlW@CZL[Mn1\8O&X9F"*UD<T)dTTn%%Z,dCl;j0m&SdrN)9O5.'f":b%"f#m]cPf-V'-b4Km%k1@AtPMFfG$X#WL+&kqm>89_2:)`=[`AT$2s12[6FFZ3k]WuO.^ZB&;KM7!q/S.T2_PT:_$mZnV]+CfDi@Z_(hrQP8T^JDcUYE/^%kUF++FsHkMTR)&>eP[@fN)5Z6GRrE94^k5JZ\)\D_U6pq5]3>Me*_Ydq$2[.0Pnkr,bX&9&C:H?$lB%l.H0%n!dY`aNa"cH1DG,f%&C>>CWY!PABQYqR>^C)650;usa'6XJ'/JY?$+#"SmlB+lLO;j0V,V+'SA%gY^_$&sqCC``OO(t?h"(7L=['T+N^>o7&pD,!Z3IF.%fbaIS:,K>#&,D_ig<(\5dlAp*d.4`%2bikR*4Cl35+d?KT21j9F&pfa8NrIoQs\@/cfHr@oGhMM?Wg.5HnGr;[`IW:)3V<XT5tQ1%Y*Ymc8%ba&4pNFleWA,A(WEF%jR^^@(\cZ+XrHfD]ksu9In,Fm^K5WQ;sWoPkq0UKa*4K?5\L,og\$'#IrFf-6]tGtHb5llE#gtD%o]>H^T9Z1.)"dd7BA'/fi$\/A<TA81@s8<hj*IG#aO`,S]f'<bg0XsZEb!_r.ad[NqqH[MI8\sh[src%kI9?^rR\OMrNH4srI=b:%s47N^B-3WQdl]t<B$G:-;h(C(K1$-ki!O';KF/)NTMaa`NmIlQQ"*4DlZ2bt\H_Tlg4AQC'1K:Rl'J$npoK;_+/@m=IaFYR0TBj0%"+A_H^Qc-G$+gm7mt&dj"piDAGrVE1gU"DFMBH%57Tf'ZI9#6=n=,YmG[UKK*2GcCgo\?hJA/&R=VIE/q;'=]+bBR3CFb+)f6)O[%dT$i]B(9&2>5=s6gd@`.?RpLh?e'B\;X@@mYBk$aW*HC1Na7/01\duaB+95liHKXS%/4Gp1u(m-Ho<WfA-;`!$o36MP[)UX^97&.%II,=)8rhk4IXOZXld+mEf$9&SJ(u9)E1J3:5CQ)rrjkl"$:7(h=4&>_8q^DLa0TfU?8j`Ynpa$C8+]60&)^H*Vq&YFMqMWQrS\"R%<J=3epq4W8G%G!pO6Gn1XtBLi(k>Qj/<,$TCfC&f[CQV8<J@']Dpg#/Zi.Dh/q`'SQQOS@2*Pa6o.%N0R:X#Qd$Jl=SJ_t+T0J%R%S91W($SB_,<IP-ZG3<#E(lRLR+4/V>5&'*L3ks:;q4N$6+):/I1d3LDDtF`4%'aAP4=dij3n69H&*SoY5@IVB#2_Yf%u]iGJR3j"%!I\,0PP./Cnp<N&VXH>9\riU'F;6p,!m3'2Hr_jKf[F$_"8\b35<QdoR@?;Art=3r:]$@:gUE-h+.hD?nU5mBm8#hDr<9JXiWo*e%S^3UK/D*16?S&,/"8]=G#P;SWSsG>_=FU2LI9l$"G!<,$]00=-l3HsTcMgBRR?.!M:B'UdT;I]us)^U3qQe6K1^")_FFIIMDYrPI%+4+.==mLI`cKB>![n!bUrJ3YgH$m4"VB3_)?CL\s?sFmK1EXtF<IP-Z/u*%_@gt%TrIDVbnjt'ufD3,J/;*p>I&ul5cKrJqqt'!U%'uaWaf3=n$lPpQuebQR::CG0M/3j,a^9$ls/"]o=h>Y>sEc't;_Yd[%$Otk#`P+LKm69?`1ku$PgZ:?NJCD!"DnuB:rq5CAhL>=U%J#ND=msk)8?[i!h^\mpeJ+NB_:]KP>hu<1B^]+/G^Ad]hgMd,eoDeXJrTE):me;5-q+nd'n*;Xq^]!hl5Q9pA^]*g'a++!b^B;#1%M;gbuo_8C]5J6qZbVf/&~>%AI9_PrivateDataEnd