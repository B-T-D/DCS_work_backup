%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 010x008.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 378 154
%%HiResBoundingBox: 0 0 377.9976 153.2119
%%CropBox: 0 0 377.9976 153.2119
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 7104 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD57FFA8FD27FFA8A8FD27FFA8FD2BFFA8FFFFFFA87DA8FFFF847D%FFFFA87DA8FFFF7D7DFFFFA87DA8FFFF7D7DFFFFA853A8FFFF7D7DFFFFA8%7DA8FD59FF7DF87DFFFFF827FFFF7D277DFFFF2727FFFF7E277DFFFF2727%FFFF7D277DFFFF27F8FFFF7DF87DFFA8FD27FFA8FD2BFFA8FFA8FFA87DA8%FFFFA87DFFFFA87DA8FFFF7DA8FFFFA8A8A8FFFFA87DFFFFFF7DA8FFFFA8%A8FFFFA87DA8FD31FFA87DA87DA8FD08FFA8A87DA87DFD09FFA87E7DA87D%FD0BFFA8847DA87DAFFD08FF7DA8A8A87DFD09FF7DA87DA8A8FD34FF2727%F82727FD08FF7DF827F8277DFD08FF52F827F827FD0BFFA8F827F8277DFF%A8FFFFFFA8FFFF52F827F827A8FD07FF7D27F827F87DFD34FF522727F852%FD08FF7D27F82727A8FD08FF52FD0427FD08FFA827A8A8272727F8A8A827%7DFFFF5227FF5227F82727FF2752FFFF7D277DA8F82727277DA8277DFFA8%FD27FFA8FFFFFFA8FFFFFF2727F82727FD08FF7DF827F8277DFD08FF52F8%27F827A8FFFFFFA8FFFFFF7D277DA8F827F8277DA8F87DFFFF5252A852F8%27F852FF5227FFFFA8F8A8A827F827F884A8277DFD31FF5227272052FD08%FF7D27202727A8FD08FF28FD0427FD0BFF7D27272720A8FD08FF52272027%27FD08FFA8202727277DFD04FFA8FD27FFA8FD07FF7DA87DA87EFD09FF7D%A87DA8A8FD08FFA87DA87DA8FD04FFA8FD06FFAF7DFD04A8FD08FFA87DA8%7DA8FD08FFA8A87EA87DA8FD5CFFA87DA8FFFF7DA8FFFFA87DA8FFFFA87D%FFFFFF7DFFFFFF7D7DFFFFA87DA8FFFFA87DFFFFA87DA8FFA8FD27FFA8FD%2BFFA8FFA8FF7D2752FFFF27F8FFFF7DF87DFFFFF827A8FF7D2753FFA827%F8FFFF7DF87DFFFFF827A8FF7D2752FD5AFF7DFFFFFF7DA8FFFFA8A8A8FF%FFA8A8FFFFFF7DFFFFFFA8A8FFFFA87EA8FFFFA87DFFFFFF7DFD0FFFA87D%7E7D7D7D7E7D7D7D7E7D7D7DA8FD1DFF7E7D7E7D7D7D7E7D7D7D7E7D7D7D%FD1DFFA87D7DA87D7D7DA87D7D7DA87D7DA8FD1AFF7D27F8272727F82727%27F82727277DFD1DFF2727F8272727F8272727F8272727FD1DFFA82727F8%272727F8272727F827277DFD0DFFA8FD0CFF7DF827F827F827F827F827F8%27F87DFD0CFFA8FFFFFFA8FD0BFFA852F827F827F827F827F827F82727FD%0DFFA8FFFFFF7D277DFFA85227FFFF7EF87E7D27F827F827F827F827F827%F8277DA8F87DFFFF2727A8FF7D277DFD0EFF7D2720272727202727272027%27277DFD1DFF2727202727272027272720272752FD11FFA827A8FFFF5252%FFFF842784A82727202727272027272720272784A8277DFFFF7D52FFFFA8%27A8FFA8FD0CFF7EF827F827F827F827F827F827F87DFD0CFFA8FD07FFAF%FD07FFAF52F827F827F827F827F827F82727FD05FFAFFD07FFA8FD07FFAF%FD07FF7D27F827F827F827F827F827F8277DFD05FFA8FD14FF7D272727F8%272727F8272727F8277DFD14FF5227522759FD04FFFD0427F8272727F827%2727F852FD04FF5227275252FD0BFFA827275227A8FFFFFFA8F8272727F8%272727F8272727F87DFFFFFFA8275227277DFD04FFA8FD0CFF7DF827F827%F827F827F827F827F87DFD0CFFA8FD07FF2727F82727FD04FF27F827F827%F827F827F827F82727FD04FF52F827F827FD04FFA8FFA8FFA87DA8A8F827%F8277DFF52FF7D27F827F827F827F827F827F8277DFF53A87D27F827F87E%A87DA8FD0EFF7D272727202727272027272720277DFD14FF5220272752FD%04FFFD042720272727202727272052FD04FF5227202727FD08FF7E20A8A8%27202727A87D277DA820272727202727272027272720A87E277DA9272720%27A8A8207DFD0EFF7DF827F827F827F827F827F827F87EFD14FF2727F827%27FD04FF28F827F827F827F827F827F82727FD04FF52F827F827FD08FFA8%7DA8A8F827F8277DFF7DFF7D27F827F827F827F827F827F8277DFF7DFF7D%27F827F87EFF7DA8FD0EFF7D27F8272727F8272727F82727277DFD14FF7D%5252277DFD04FF2727F8272727F8272727F8272752FD04FFFD0552FD0BFF%A852525227A8FFFFFFA82727F8272727F8272727F827277DFFFFFFA82752%52527DFD04FFA8FD0CFF7DF827F827F827F827F827F827F87DFD0CFFA8FF%FFFFA8FD0BFFA852F827F827F827F827F827F82727FD0DFFA8FFFFFFA8FD%09FFA8FF7D27F827F827F827F827F827F8277DFFA8FFFFFFA8FFFFFFA8FD%10FF7D272027272720272727202727277DFD1DFF27272027272720272727%20272752FD11FFA8277EFFFF5252FFFF7D277DA827272027272720272727%202727A8A8277DFFFF5227FFFFA82784FFA8FD0CFF7EF827F827F827F827%F827F827F87DFD0CFFA8FD0FFFAF52F827F827F827F827F827F82727FD0D%FFA8FFFFFF7D277DFFFF5227FFFFA8F8A87E27F827F827F827F827F827F8%277DA8F8A8FFFF5252FFFF7D277DFD0EFF7D272727F8272727F8272727F8%277DFD1DFFFD0427F8272727F8272727F827FD1DFFA8F8272727F8272727%F8272727F87DFD0DFFA8FD0CFFA8FD0D7DA8FD0CFFA8FD10FF7EFD0D7DFD%0DFFA8FFA8FD0DFFA87D7DA87D7D7DA87D7D7DA87D7DA8FFFFFFA8FD61FF%AF7DFFFFFF7DA8FFFFA87DA8FFFFA87EFFFFFF7DFFFFFFA8A8FFFFA87DA8%FFFFA87DFFFFFF7DFD5AFF7D2753FFFF27F8FFFF7DF87DFFFFF827FFFF7D%277DFFFF27F8FFFF7DF87DFFFFF827A8FF7D2753FD5AFF7DAFFFFFA8A8FF%FFA87DA8FFFFA87DFFFFFF7DFFFFFF7DA8FFFFA884A8FFFFA8A8FFFFFF7D%AFFFA8FD27FFA8FFFFFFA8FFFFFFFD057DFD08FFA8FD047DA8FD08FFA87D%7D7D7EA8FFFFFFA8FD06FFA87DA87D7DA8FFFFFFA8FD04FFA87DA87DA8FD%08FFA87D7DA87DA8FD34FF4C27272052FD08FF7D27202727A8FD08FFFD05%27FD0BFF7D27272720A8FD08FF2827202727FD08FFA8202727277DFD04FF%A8FD27FFA8FD07FF2727F82727FD08FF7EF827F8277DFD08FF52F827F828%AFFFFFFFA8FFFFFF7D277DA8F827F8277DA8F87DFFFF2727A852F827F852%FF5227FFFF7EF8A8A827F827F8A87D277DFD31FF52F8272752FD08FF7D27%2727F8A8FD08FF5227F82727FD08FFA8F8A8A827F82727A8A8277DFFFF52%52FF52FD0427FF5252FFFFA8277DA82727F8277DA8F8A8FFA8FD27FFA8FD%07FF2727F82727FD08FF7DF827F8277DFD08FF52F827F827FD04FFA8FFA8%FD04FFA8F827F8277DFFA8FFFFFFA8FFFF52F827F827A8FD07FF7D27F827%F87DFD34FFA87DA87DA8FD08FFA8A884A87DFD09FFA8A87DA8A8FD0BFFFD%04A87DFD09FFFD05A8FD09FF7EFD04A8FD5CFFA87DA8FFFFA87DFFFFA853%A8FFFF7D7DFFFFA87DA8FFFFA87DFFFFA97DA8FFFF7D84FFFFA87DA8FD59%FF7E277DFFFF2727FFFF7D277DFFFF27F8FFFF7DF87DFFFFF827FFFF7D27%7DFFFF2727FFFF84277DFFA8FD27FFA8FFFFFFA8FD27FFA8FFFFFFA87DA8%FFFFA87DFFFFA87DA8FFFF7D7EA8FFA87DA8FFFFA87DFFFFA87DA8FFFF7D%84FFFFA87DA8FD58FFAFFD27FFA8FDFCFFFD14FF7DFD04A8537DFF7DA8FD%21FFA97DA8A8A87D7DFFA87DFD22FFA87DA8A8A87DA8FF847DFD1EFFA87D%527D527D527DA87D7DFD21FF7D7D527D527D52A8FFA8FD22FF537D527D52%7D52FF7DA8FD1FFF7DA87D7DA8A8A8FFA8FD22FFA87DA87DFD04A8FFA8FD%21FFA8A87DA87DA87EFD04A8FD22FFA9FDD8FFA8FD26FF7EAF84FD28FFA8%7DA8A8FD28FFFD04A8FD24FFA87D527DA8FD27FF7D7D597DA8FD27FF7D7D%7DA8FD25FF7EA87DFD28FFA8A8FFA8FD28FFFD04A8FD7CFFA8FD14FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:49:04+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:49:04+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:49:04+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>104</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9RW9vAYIyY1rxX9keGKr&#xA;/q9v/vpP+BGKu+r2/wDvpP8AgRirvq9v/vpP+BGKu+r2/wDvpP8AgRirvq9v/vpP+BGKu+r2/wDv&#xA;pP8AgRirvq9v/vpP+BGKu+r2/wDvpP8AgRirvq9v/vpP+BGKqdALOUAUA9UADp1bFVT6vb/76T/g&#xA;Rirvq9v/AL6T/gRirvq9v/vpP+BGKu+r2/8AvpP+BGKu+r2/++k/4EYq76vb/wC+k/4EYq76vb/7&#xA;6T/gRirvq9v/AL6T/gRirvq9v/vpP+BGKu+r2/8AvpP+BGKqdAbOIEVB9IEHp1XFWEeVfMHnm/8A&#xA;P+uaRrHl+Ky8tWQlOl6oIJENwVlVY/jd2RqxljsuKubzB55H5qp5fHl+I+TTHzbW/Qk5Bvq5fj6n&#xA;P0/734fs+3virvN3mDzzp3nrQdK0Ty/FfeXb4xDVdSMEjm3DTFJPjR1RaR/F8S4q780vMHnnQY9L&#xA;Pk/y/FrTXUkiX4aCSX0lULwb908dK1briqO/M3V/NOheW1vvKWix6xqn1iONrNoXl/dMrFnpGyNs&#xA;QN64qv1jVPM9t+XI1mx0eO580/Urec6UYX4/WJAhmj9MMJPh5NtyrtirvLeqeZ778vV1jVNHjtPM&#xA;5trmU6V6LoomjaQQx8HYv8YVf2t67YqpflfrPmzXvLs175u0SPRtTW6eKO0WF4qwqiFXpKzk1Zm3&#xA;6bYqhPyx8weedcm1lfN3l+LRks5I000rBJH6yMZObVkdw1OK/Z8cVU/L3mHz1feevMGkav5fisvL&#xA;VlFOdL1QQSKZysiLH+8Z2Q1RmOy4qz63/wB54v8AUX9WKqmKuxV2KuxV2KuxV2KuxV2Koc/7yTf8&#xA;9f8AiTYqiMVfBd/+bP5mx31wieaNTVEldVAuZNgGIHfFNPsL8ndS1DU/yy8v3+oXEl3e3FsXnuJm&#xA;LyO3qMKsx3OKGZYq+av+cofO/m/y/wCcNKttE1m7023l08SSxW0zxqz+vIORCkCtBTFIVf8AnFzz&#xA;r5u8weZNZg1zWLvUoYLNHhjuZnkVWMoBYBid6YqX0hihhv5xalqGmfll5gv9PuJLS9t7YPBcQsUk&#xA;RvUUVVhuMVfHth+bP5myX1uj+aNTZHlRWBuZNwWAPfFNPvTFCHH+8kP/ADy/4kuKvOk/NS81fW/O&#xA;XlmPSZtPfQbG9ki1b1SRI0HwIUX004k8uX2jSmKvlH/lbv5of9TTqf8A0kyf1xZU+qIvzWvtIuvI&#xA;vl+bSptTl8w2GnvPq3rEem8/GN2kHpvyP7X2hX8cWKcfml+Z03kWPS3j0aTWP0lJJERFIY/SKBaE&#xA;0jlqDz9sVeF/85EfmB540T8zbuw0jXb2wsltrd1t7ed44wzR1YhQab4pAT38jvzQ80Q+SPOXmHWZ&#xA;7zzFLpBs2t7SaZ2ciQurBGIk4+J+HtigvaPLfniXWvy9XzedNe2ka2ubkaYXLPW3aRQnPgu7+n/J&#xA;tXvirynz9+buva7+S1x5n0uG68s3sOrR2SrHO3qlAgcnmEiIDc6Up2xV5X+WP5nfmHqH5h+XLG+8&#xA;x6hcWdxqFvHPBJcSMjo0gBVgTuDikh9LeX/zOm1zzz5g8oto0lmmjRTsNSeQsk3pyJGOKemtOQfl&#xA;9o4oZ1b/AO88X+ov6sVVMVdirsVdirsVdirsVdirsVQ5/wB5Jv8Anr/xJsVRGKvIpf8AnFv8rJZX&#xA;ldL4vIxZj9Z7k1P7OK29K8s+XdO8uaFZ6JpvMWNinpwCRub8alt2oK9cVTPFWDeffyb8meedSt9R&#xA;11blri2h+rxehL6a8A7PuOJ3q5xVd5B/J7yd5Fvrq90FbhZruIQzevL6g4huQoKChqMVZviqWeZv&#xA;LuneY9CvNE1LmbG+T05xG3B+NQ2zUNOmKvNYv+cW/wArIpUlRL4PGwZT9Z7g1H7OK29dxVDj/eSH&#xA;/nl/xJcVYjpn5ieV/NnmXX/IkMN2l7p8M8WoO6IkRQOIH9Nw7sSfUqKriryZvyn/ACIX8xV8gm21&#xA;j9NOnqiX1k+r8fQM/wBuvP7Ip9jr9+Kberaj+YHlbyXrnlzyJLDdvc30Vta6bIio8YTn9WT1XLo1&#xA;Rwq1FxQivzC/NDy95DTT31mG6lGpO8Vv9VRHo0fGvLm8dK89sVYP+eXkf8qrct5184w6lM0zw2bC&#xA;wkXYhG4Hg5QUom++Kpx5T0n8v/yx8hXnm7SYb4aPqFva39xFKyTThHA9MBaqoYev8Q5Yqy3Q/PWj&#xA;6z5JHnG0jnXSzBPciORUE/p2xdX+EOy1PpGnxfdirHLW68k/nb5JlBivU0dL3gyvwglMsCK9RwaX&#xA;4f3uKsE/KLyD+S2u69Nqnli31aG98s3UEjNeyIEMvJylAhfkAYjWtMVem6N+aHl3XvNmt+UbKG6X&#xA;U9Gjma7klRFhPpOsR4MHZjUvt8I2xVl9v/vPF/qL+rFVTFXYq8W/PH88fMX5feYrDTNMsLS7hu7Q&#xA;XLvciXkG9V0oODoKUQdsVecf9DfeeP8AqzaZ91x/1VxTTv8Aob7zx/1ZtM+64/6q4rSd+SP+cofO&#xA;HmDzfo2iXOlafFb6ldw20ssYn5qsjhSVrIRWh74rT6VxQ7FXYqhz/vJN/wA9f+JNiqIxV2KuxV4B&#xA;+bf/ADkT5p8l+eb3y9YabY3NrbJA6Szib1D6sSyGvCRR1bwxTTDv+hvvPH/Vm0z7rj/qritO/wCh&#xA;vvPH/Vm0z7rj/qritMx/KT/nInzT50882Xl6/wBNsba1uUnd5YBN6g9KJpBTnIw6r4YrT3/FDsVd&#xA;iqHH+8kP/PL/AIkuKsd0HzJ+Xl95t1TS9Ga2Pma0Eh1URWzRTAJIqP6kxjUP8ZX9o164q4+ZPy8H&#xA;n1dELW3+NClVX6s31jh6Jk/3o9OlPS/y/b2xV3mHzJ+Xlh5q0rTNca2HmO8MY0gS2zSykvKUj9OU&#xA;RuE/ef5Qp1xV4Z+Z3/OQmsab5y1PQZ/LukanbaRdPFayXsLyuAKfFu9AT3oMU0kd/wD85WeZtRg+&#xA;r6h5c0a8g5BvRuIpZU5DoeLyEV3xWnSf85W+Z5LH6hJ5c0d7HgI/qjRymHgtAqemZOPEU2FMVpnn&#xA;5K/nldeatT1HRdU0nTdK0HTdLuNQkWyikVQscsYcGPk68SszEgLvitPW/IuueSdZ0eS78nGA6Ws7&#xA;RyG2gNtH64RC3wMkVTxZd6fqxQh/I/mT8vdal1IeUGtmktnQamba2a3PNi/DmWjj5n4X8afTiqnp&#xA;fmT8vb7zPrGl6O1sfM9pHN+lRFbNHMFR1R/UmMah/jK/tGvXFWVW/wDvPF/qL+rFVTFXYq+T/wDn&#xA;L7/lONG/7Zg/6iJcUh4Nil2Ksu/KL/yaHlb/ALadt/ycGKl994sXYq7FUOf95Jv+ev8AxJsVRGKv&#xA;ne4/5zA0+GeSE+WJSY3ZCRdrvxNP99Ypp7Z5I8zp5p8qab5gS3NomoxeqtuW9QoORWhYBa/Z8MUP&#xA;kX/nJn/ycGq/8YbT/qHTFIeWYpdir1P/AJxm/wDJwaV/xhu/+od8UF9ded/M6eVvKmpeYHtzdpp0&#xA;XqtbhvTLjkFoGIan2vDFDxO3/wCcwNPmnjhHliUGR1QE3a7cjT/fWKafRGKEOP8AeSH/AJ5f8SXF&#xA;WJW9t+XGjaz5g17RVspfM6W9xPq0cFyHuWEZDyLJHzf0/wB4qg/DscVeGn/nJDyIfNI81HyO/wDi&#xA;BV9Mah9dPPj6fpUp6fD7Bp0xTT2+WL8uNfv/AC15h1xLKHzJLb2t1o8NxchbhPWIkiWNOaep+8ag&#xA;+Dc4ofIf50f+TV8z/wDMdJ/DFkGFYq7FXtH/ADitHYyeedcjv+H1F9Bulu/UPFPRNxbiTmxIovGt&#xA;TigvctW82eQvyx/L+bVvKNnb6ho4vlilt7C6DoJ5kHImSs9GCqtVxQ88/K/88fJEPmiDRvL3k06R&#xA;L5ivIYbu4W8MgLs5CuVZP2fUbYUxWnsml6P+XNt5n1i+0Y2X+KbmOYaqILgSXHHmpk9SEO3H94Fr&#xA;8I3xVlVv/vPF/qL+rFVTFXYq+T/+cvv+U40b/tmD/qIlxSHg2KXYqy78ov8AyaHlb/tp23/JwYqX&#xA;33ixdirsVQ5/3km/56/8SbFURir42vP+cY/zYmu55Us7XhJI7rW6jrRmJGKbfUH5XeX9S8veQNF0&#xA;XU0VL+xg9O4RGDqG5sdmGx2OKHyl/wA5M/8Ak4NV/wCMNp/1DpikPLMUuxV6n/zjN/5ODSv+MN3/&#xA;ANQ74oL6t/NHy/qXmHyBrWi6Yivf30Hp26OwRS3NTux2GwxQ+X7P/nGP82IbuCV7O14RyI7Uuo60&#xA;VgTim32TihDj/eSH/nl/xJcVYYfyn0LT9S80eYNK9dtc8xWl1BMssimHlcfFRV4jj8ajqcVfNf8A&#xA;0K9+bX/LHa/9JUeKbfR8H5R6JfyeUNY1n101zyzZ2cMKQyqIRJbBWow4ty+OvQ4ofJf50f8Ak1fM&#xA;/wDzHSfwxZBhWKuxV7P/AM4rWEGoeeNcsLiv1e80G6gm4mjcJbi3RqHxocUF6355/I4wflVN5O8k&#xA;o8zS6jHflbyZAa8Qr/HRBSijbFDzf8v/APnHf8zdE88aFq9/aWy2VhewXFwyXEbMI43BYhR12xSS&#xA;9/0n8s/Leh+ada822JuP0rrMcq3iySBov3jrI3BeII+JB3xQyy3/AN54v9Rf1YqqYq7FXzV/zlD5&#xA;I83+YPOGlXOiaNd6lbxaeI5ZbaF5FV/XkPElQRWhrikPGf8AlUX5of8AUran/wBI0n9MU27/AJVF&#xA;+aH/AFK2p/8ASNJ/TFbZP+WP5Y/mHp/5h+XL6+8uahb2dvqFvJPPJbyKiIsgJZiRsBigl9qYodir&#xA;sVQ5/wB5Jv8Anr/xJsVRGKuxV2Kvkr/nIH8vfPOtfmjqWoaToN9fWMkVssdzBA7xsVgRWowFDQim&#xA;KQ85/wCVRfmh/wBStqf/AEjSf0xTbv8AlUX5of8AUran/wBI0n9MVt6N/wA4/fl7550X80dN1DVt&#xA;BvrGxjiuVkuZ4HSNS0DqtWIoKk0xQX1rih2KuxVDj/eSH/nl/wASXFWGeVfysh8v+f8AXPN66nJc&#xA;vrQlBsWjCpD60qyni3I13SnTFXN+VkLfmqn5gfpOQSLH6f6M9MemT9XNvy58utDX7OKu83flZD5j&#xA;89aD5sbU5LV9DMRFkkYZJvRmMw5NyFNzTpir5r/Nj8s/zC1L8yPMN9YeXdQurO4vJHguIreRkdTS&#xA;jKwG4xSCxP8A5VF+aH/Uran/ANI0n9MU27/lUX5of9Stqf8A0jSf0xW3qf8Azjz+WvnCy8z67Dru&#xA;k3uk2eo6Fd2K3c8LooeeWAUUsAC3EEge2KC95/K/8vI/Ifl2bRo9QfUhLdPdG4lQRtV0RONAz1p6&#xA;fWuKEH+WP5WQ+RJtZkj1OTUf0vJHIRLGEMQiMhCghmqP3vtiqzy/+VkOgeefMHnFdTkuX1mKdTYv&#xA;GAkPrSJKeL8jXeOnTFWdW/8AvPF/qL+rFVTFXYq7FXYq7FXYq7FXYq7FUOf95Jv+ev8AxJsVRGKp&#xA;IfPXkgEg+YdMBGxBvLf/AJrxVNbS8s722jurOeO5tpRWKeF1kjYVpVWUkHFVbFUu1LzJ5d0uZYNT&#xA;1S0sZnXmkVzPFCxWpHIK7KSKg74q3pvmLy/qkrxaZqdpfSxryeO2njmZVrSpCMxAriqYYqo3d5Z2&#xA;VtJdXk8dtbRCss8zrHGorSrMxAGKpUPPXkgkAeYdMJOwAvLf/mvFU7xVDj/eSH/nl/xJcVYV5a8q&#xA;+c9I89a/5g1rzCbvy1dpM1hpsk8xS1DSrIGKyUjUIisNunyxVJWvK/mqnmQfmBpw8piPi2g/pIcS&#xA;/wBXMXL0ufpf3nx/j1xVOfM/lbzlrXnTy9r+g+Yvqnlu0EEl/YRzzBLtFlMpIWOsbh4yBU9R7Yqv&#xA;/NLyh548xx6WvlXX20JrWSRr1lmmi9ZHC8V/c9acT18cVUfzcmk1DRBo+j+b7Pyxrkc8UzTTXotZ&#xA;BFxaqkIwejcgdxTFUTLDe6/+XD6F5e8zQS+YoLK2t5dZtbozFLhAnORpYy0n7z023O5xVHeW/Lvm&#xA;iw/L1dC1PVmu/MX1a5ibV/UldvVmaQxSeo9JPgDr8qbYqgfy/wBN1vyX5Wli89eY4r+6e7aRNSur&#xA;l+AR0RUi53JWm6MeIxVJPype40e+1WHX/Pdj5il1KaIaTAuoeu8YBkrGqSN1bmv2etPliqa+X/KH&#xA;njTvPPmDW9V19r/y9fRTjTdJMszC3LyI6/u3/djiqldsVZ1b/wC88X+ov6sVVMVdirsVdirsVdir&#xA;sVdirsVQ5/3km/56/wDEmxVEYq/N/Uv+Ojdf8ZpP+JHFkH3N+Rn/AJKXyz/zC/8AMx8WLOsVfJ//&#xA;ADl9/wApxo3/AGzB/wBREuKQrf8AOH3/AClWvf8AMCn/ACeGKl9VYoYL+ef/AJKXzN/zC/8AMxMV&#xA;fDOm/wDHRtf+M0f/ABIYsi/SDFihx/vJD/zy/wCJLirzd4/zVGq+dW8wSRt5OOn3/wChEX6vzBO8&#xA;fL0wJdo+X2j898VfE2LJ9pWUf5qlvIDeW5I18pDTdN/TqP8AV+ZACmXj6gMu8X8p+W+LFPPzSj/N&#xA;V49L/wCVfyRxv6kn6U9X6v8A3ZC8KfWA24+L7OKvmv8A5yh/8m1ef8wtr/ybxSGUf843r5pbyJ54&#xA;HlVlTzBzsv0e0np8edZK19UFPsV64qXvvltPPo/L1V1uRD50Ntc8pB6PAXBaT6v/AHY9KgHDt8++&#xA;KHjX5sJ+Yq/kRcjz86PrR1iExGL0OIt+A4D9wAv2ufXf8MUh4n+UX/k0PK3/AG07b/k4MUl9e+X4&#xA;/wA1R558wN5gkjbyaYp/0IifV+YYyIY+XACXaPl9o/PtixZ1b/7zxf6i/qxVUxV2KuxV2KuxV2Ku&#xA;xV2KuxVDn/eSb/nr/wASbFURiqVHyn5VJqdGsST1P1aH/mnFUxtra2tYEgtokggjFI4o1CIo67Kt&#xA;AMVVMVQV9omi38qy31hbXcqrxWSeGORgta0BYE0qcVbsdF0bT3aSwsLe0kccXeCJIyR1oSgG2Koz&#xA;FVO5tra6geC5iSeCQUkikUOjDrurVBxVLh5T8qg1GjWII6H6tD/zTiqa4qhx/vJD/wA8v+JLirC/&#xA;LPmbz5qnnzXtD1zQVtfK9qsw03UjDKv1njKqKrM7NGwaNmOy74qlbJqo/NZPL48laefJxj5Nrf1D&#xA;cP8AVzJx9T+7/vfh+z7dcVTPzT5l896R518vaJoGgJd+Wbr0E1K/WGUi1QzGNgrRssahYwDuu3yx&#xA;Vd+afmrz/oEelnyhoY1prqSRb8GKaX0kULxb90yUryPXFWvzZ/SWn6ENV8v+WLTzFrjzxxNDPa/W&#xA;G9Eq3Jjw4v8ADxHemKq9zcazo35cNrWg+X7dPM8tlbTyaTBbmMNcuE9SNo0Kyfu+bbFqjFUX5b17&#xA;zbffl4us6ppYtPMxtrmU6UI5EAmiaQQx8HYv8YVf2t67Yqg/y71PzL5s8rzTee9Ah0+9S7dE0+WB&#xA;whiREKScJzJUlnYVGKpR+Vb63q95q0nmbybY6C+nzRfomWOy9BpATJycO/KpXgv2aUriqO8v+avP&#xA;9/558waPq+hiy8tWUU50vVBFKpuCkiIn7xmMZ5IzHZcVZ2LeMAAFgBsBzf8ArirvQTxf/g3/AK4q&#xA;70E8X/4N/wCuKu9BPF/+Df8AriqWWfmDy5eW73EGoIYY3kid3laMcoZDE/2yuwcca9D2xV1j5g8u&#xA;3+q3OlWd+s+oWiLJcQJI5IV3kjFGrxYh4HVgpJWm9KjFVfStQ0rVrX61p87TwVA5hpF6qHXZuJoy&#xA;OrA9wQRtiqM9BPF/+Df+uKu9BPF/+Df+uKu9BPF/+Df+uKrhEgjMdPhNagknr13xVb6CeL/8G/8A&#xA;XFXegni//Bv/AFxV3oJ4v/wb/wBcVaaKJFLMzKqirMZGAAHUk1xVAWms6Dd20FzBfL6VyqPBzlaN&#xA;mEleHwOVYcqbVGKtaZreg6qLg6dei7Fq3Gb0nkbcosgK0Pxgq43Wo7dQcVROnXNhqOn2uoWUrS2d&#xA;5ElxbS8pF5xSqHRqNRhVSDuMVRHoJ4v/AMG/9cVd6CeL/wDBv/XFXegni/8Awb/1xVcYkMYjp8Ip&#xA;QAkdOm+KrfQTxf8A4N/64q70E8X/AODf+uKu9BPF/wDg3/riqleSWdnay3VzK0VvApeWQu9Aqip6&#xA;GuKoVNY0FoFn+vxrE6eqC85Q8OAkqVZgRRDyNRsMVUYPMXl+40+4v7a7e4trVzHMYfXlfkG4gLGg&#xA;aR+R+zxU8uq1GKphaPZ3drDd20pltrhFlglV3oyOAysN+hBxVV9BPF/+Df8ArirvQTxf/g3/AK4q&#xA;428ZBBLEHYjm/wDXFVTFXYq7FVG9tIryzns5uQiuY3hkKHi3F1KmhHQ0OKvP738l9FMSmK9mab1o&#xA;5J57pLR24Jc/WpOJFuvEsSwp9jepUkDDapzpH5a+XNM1aLUbeSeSa2QxRwyPG6LETcv6ZHAMV5X0&#xA;h+Jq9PDAqc+XvLthoNk1pZNI6OyszykMx9OGO3jFQF2SKFEHfbepqcVTTFXYq7FXYq7FXYq7FUJq&#xA;+mQapptxp87vHFcLxMkZAdSDUFeQZdiO4I8QRirBrn8ndASSCT63IYRMsl/JOtr6kiLaPaBRKsCs&#xA;vLmp6/Dx+DiSThtWRaD5I0rRr5ry1uJ5LjjLETIYjRZVgFPhjU/CtrHxr79a4FTjSdNh0zS7PTYH&#xA;d4LKGO3ieQguUiUIvIgKCaDwxVFYq7FXYq7FXYq7FXYqlnmPy/a69ppsLmWWBPUjlWWDhyDRsGG0&#xA;qSRsPZlP34qw8fkz5eS8hpNI1nSUyq4gE7SPNDcJSVYlbirwMxqS3xcQQg44bVOrP8v9MtbXU4re&#xA;/vEl1WJLe7vEaBZuMUkj/CyxABv3zqdunSmBWR2VqtrZwWqsXWCNYw7BVJCACpCBEHToqgeAGKq2&#xA;KuxV2KuxV2KuxV2KpT5msL69sII7SjNFdW00sRpSSOKVXZd6DanKnelO+KpP5O8u+ZNNvWl1i8N2&#xA;625ha5LlzOWmMqV5fFSAMyqW3+L2qSrLsCuxV2KuxV2KuxV2KuxV2Ksa88eXLzXrOK0gI9FkuopV&#xA;alFa4tZIYpt/99O/bfeo6Yqv8raFq2m3t5NfXJmSaG3iUM/qEyRPM7SFyAz/ALuaKHm/xMIqkYqy&#xA;LFXYq7FXYq7FXYq7FXYq7FWNea9F1u/vrOXTZREI4ZYmcsU4O01vLXktHUSRQyQl0+JedQOtFUX5&#xA;W0m/06G9W8k5m4ufViWteIEEUTt3/vZYnm61+PfeuKp1irsVdirsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:20CC7A02122068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:20CC7A02122068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:20CC7A02122068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:49:04+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -153.212 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 153.212 li
377.998 153.212 li
377.998 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 153.212 mo
377.998 153.212 li
377.998 0 li
0 0 li
0 153.212 li
cp
clp
40.3062 40.3062 mo
80.4883 40.3062 li
80.4883 80.4878 li
40.3062 80.4878 li
40.3062 40.3062 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
.49304 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
40.3062 40.3062 mo
80.4883 40.3062 li
80.4883 80.4878 li
40.3062 80.4878 li
40.3062 40.3062 li
cp
@
168.989 40.3062 mo
209.171 40.3062 li
209.171 80.4878 li
168.989 80.4878 li
168.989 40.3062 li
cp
f
168.989 40.3062 mo
209.171 40.3062 li
209.171 80.4878 li
168.989 80.4878 li
168.989 40.3062 li
cp
@
142.365 53.6182 mo
155.677 53.6182 li
155.677 66.9302 li
142.365 66.9302 li
142.365 53.6182 li
cp
f
142.365 53.6182 mo
155.677 53.6182 li
155.677 66.9302 li
142.365 66.9302 li
142.365 53.6182 li
cp
@
182.301 93.5542 mo
195.614 93.5542 li
195.614 106.866 li
182.301 106.866 li
182.301 93.5542 li
cp
f
182.301 93.5542 mo
195.614 93.5542 li
195.614 106.866 li
182.301 106.866 li
182.301 93.5542 li
cp
@
222.238 53.6182 mo
235.549 53.6182 li
235.549 66.9302 li
222.238 66.9302 li
222.238 53.6182 li
cp
f
222.238 53.6182 mo
235.549 53.6182 li
235.549 66.9302 li
222.238 66.9302 li
222.238 53.6182 li
cp
@
182.301 13.6816 mo
195.614 13.6816 li
195.614 26.9941 li
182.301 26.9941 li
182.301 13.6816 li
cp
f
182.301 13.6816 mo
195.614 13.6816 li
195.614 26.9941 li
182.301 26.9941 li
182.301 13.6816 li
cp
@
222.238 13.6816 mo
235.549 13.6816 li
235.549 26.9941 li
222.238 26.9941 li
222.238 13.6816 li
cp
f
222.238 13.6816 mo
235.549 13.6816 li
235.549 26.9941 li
222.238 26.9941 li
222.238 13.6816 li
cp
@
142.365 13.6816 mo
155.677 13.6816 li
155.677 26.9941 li
142.365 26.9941 li
142.365 13.6816 li
cp
f
142.365 13.6816 mo
155.677 13.6816 li
155.677 26.9941 li
142.365 26.9941 li
142.365 13.6816 li
cp
@
142.365 93.5542 mo
155.677 93.5542 li
155.677 106.866 li
142.365 106.866 li
142.365 93.5542 li
cp
f
142.365 93.5542 mo
155.677 93.5542 li
155.677 106.866 li
142.365 106.866 li
142.365 93.5542 li
cp
@
222.238 93.5542 mo
235.549 93.5542 li
235.549 106.866 li
222.238 106.866 li
222.238 93.5542 li
cp
f
222.238 93.5542 mo
235.549 93.5542 li
235.549 106.866 li
222.238 106.866 li
222.238 93.5542 li
cp
@
297.672 40.3062 mo
337.855 40.3062 li
337.855 80.4878 li
297.672 80.4878 li
297.672 40.3062 li
cp
f
297.672 40.3062 mo
337.855 40.3062 li
337.855 80.4878 li
297.672 80.4878 li
297.672 40.3062 li
cp
@
271.048 53.6182 mo
284.361 53.6182 li
284.361 66.9302 li
271.048 66.9302 li
271.048 53.6182 li
cp
f
271.048 53.6182 mo
284.361 53.6182 li
284.361 66.9302 li
271.048 66.9302 li
271.048 53.6182 li
cp
@
310.985 93.5542 mo
324.297 93.5542 li
324.297 106.866 li
310.985 106.866 li
310.985 93.5542 li
cp
f
310.985 93.5542 mo
324.297 93.5542 li
324.297 106.866 li
310.985 106.866 li
310.985 93.5542 li
cp
@
350.921 53.6182 mo
364.233 53.6182 li
364.233 66.9302 li
350.921 66.9302 li
350.921 53.6182 li
cp
f
350.921 53.6182 mo
364.233 53.6182 li
364.233 66.9302 li
350.921 66.9302 li
350.921 53.6182 li
cp
@
310.985 13.6816 mo
324.297 13.6816 li
324.297 26.9941 li
310.985 26.9941 li
310.985 13.6816 li
cp
f
310.985 13.6816 mo
324.297 13.6816 li
324.297 26.9941 li
310.985 26.9941 li
310.985 13.6816 li
cp
@
350.921 13.6816 mo
364.233 13.6816 li
364.233 26.9941 li
350.921 26.9941 li
350.921 13.6816 li
cp
f
350.921 13.6816 mo
364.233 13.6816 li
364.233 26.9941 li
350.921 26.9941 li
350.921 13.6816 li
cp
@
271.048 13.6816 mo
284.361 13.6816 li
284.361 26.9941 li
271.048 26.9941 li
271.048 13.6816 li
cp
f
271.048 13.6816 mo
284.361 13.6816 li
284.361 26.9941 li
271.048 26.9941 li
271.048 13.6816 li
cp
@
271.048 93.5542 mo
284.361 93.5542 li
284.361 106.866 li
271.048 106.866 li
271.048 93.5542 li
cp
f
271.048 93.5542 mo
284.361 93.5542 li
284.361 106.866 li
271.048 106.866 li
271.048 93.5542 li
cp
@
350.921 93.5542 mo
364.233 93.5542 li
364.233 106.866 li
350.921 106.866 li
350.921 93.5542 li
cp
f
350.921 93.5542 mo
364.233 93.5542 li
364.233 106.866 li
350.921 106.866 li
350.921 93.5542 li
cp
@
262.174 97.9917 mo
266.612 97.9917 li
266.612 102.429 li
262.174 102.429 li
262.174 97.9917 li
cp
f
.73956 lw
262.174 97.9917 mo
266.612 97.9917 li
266.612 102.429 li
262.174 102.429 li
262.174 97.9917 li
cp
@
275.486 111.304 mo
279.923 111.304 li
279.923 115.741 li
275.486 115.741 li
275.486 111.304 li
cp
f
275.486 111.304 mo
279.923 111.304 li
279.923 115.741 li
275.486 115.741 li
275.486 111.304 li
cp
@
262.174 111.304 mo
266.612 111.304 li
266.612 115.741 li
262.174 115.741 li
262.174 111.304 li
cp
f
262.174 111.304 mo
266.612 111.304 li
266.612 115.741 li
262.174 115.741 li
262.174 111.304 li
cp
@
288.798 111.304 mo
293.236 111.304 li
293.236 115.741 li
288.798 115.741 li
288.798 111.304 li
cp
f
288.798 111.304 mo
293.236 111.304 li
293.236 115.741 li
288.798 115.741 li
288.798 111.304 li
cp
@
288.798 97.9917 mo
293.236 97.9917 li
293.236 102.429 li
288.798 102.429 li
288.798 97.9917 li
cp
f
288.798 97.9917 mo
293.236 97.9917 li
293.236 102.429 li
288.798 102.429 li
288.798 97.9917 li
cp
@
288.798 84.6797 mo
293.236 84.6797 li
293.236 89.1172 li
288.798 89.1172 li
288.798 84.6797 li
cp
f
288.798 84.6797 mo
293.236 84.6797 li
293.236 89.1172 li
288.798 89.1172 li
288.798 84.6797 li
cp
@
275.486 84.6797 mo
279.923 84.6797 li
279.923 89.1172 li
275.486 89.1172 li
275.486 84.6797 li
cp
f
275.486 84.6797 mo
279.923 84.6797 li
279.923 89.1172 li
275.486 89.1172 li
275.486 84.6797 li
cp
@
262.174 84.6797 mo
266.612 84.6797 li
266.612 89.1172 li
262.174 89.1172 li
262.174 84.6797 li
cp
f
262.174 84.6797 mo
266.612 84.6797 li
266.612 89.1172 li
262.174 89.1172 li
262.174 84.6797 li
cp
@
302.11 97.9917 mo
306.547 97.9917 li
306.547 102.429 li
302.11 102.429 li
302.11 97.9917 li
cp
f
302.11 97.9917 mo
306.547 97.9917 li
306.547 102.429 li
302.11 102.429 li
302.11 97.9917 li
cp
@
315.422 111.304 mo
319.86 111.304 li
319.86 115.741 li
315.422 115.741 li
315.422 111.304 li
cp
f
315.422 111.304 mo
319.86 111.304 li
319.86 115.741 li
315.422 115.741 li
315.422 111.304 li
cp
@
302.11 111.304 mo
306.547 111.304 li
306.547 115.741 li
302.11 115.741 li
302.11 111.304 li
cp
f
302.11 111.304 mo
306.547 111.304 li
306.547 115.741 li
302.11 115.741 li
302.11 111.304 li
cp
@
328.734 111.304 mo
333.171 111.304 li
333.171 115.741 li
328.734 115.741 li
328.734 111.304 li
cp
f
328.734 111.304 mo
333.171 111.304 li
333.171 115.741 li
328.734 115.741 li
328.734 111.304 li
cp
@
328.734 97.9917 mo
333.171 97.9917 li
333.171 102.429 li
328.734 102.429 li
328.734 97.9917 li
cp
f
328.734 97.9917 mo
333.171 97.9917 li
333.171 102.429 li
328.734 102.429 li
328.734 97.9917 li
cp
@
328.734 84.6797 mo
333.171 84.6797 li
333.171 89.1172 li
328.734 89.1172 li
328.734 84.6797 li
cp
f
328.734 84.6797 mo
333.171 84.6797 li
333.171 89.1172 li
328.734 89.1172 li
328.734 84.6797 li
cp
@
315.422 84.6797 mo
319.86 84.6797 li
319.86 89.1172 li
315.422 89.1172 li
315.422 84.6797 li
cp
f
315.422 84.6797 mo
319.86 84.6797 li
319.86 89.1172 li
315.422 89.1172 li
315.422 84.6797 li
cp
@
302.11 84.6797 mo
306.547 84.6797 li
306.547 89.1172 li
302.11 89.1172 li
302.11 84.6797 li
cp
f
302.11 84.6797 mo
306.547 84.6797 li
306.547 89.1172 li
302.11 89.1172 li
302.11 84.6797 li
cp
@
342.046 97.9917 mo
346.484 97.9917 li
346.484 102.429 li
342.046 102.429 li
342.046 97.9917 li
cp
f
342.046 97.9917 mo
346.484 97.9917 li
346.484 102.429 li
342.046 102.429 li
342.046 97.9917 li
cp
@
355.359 111.304 mo
359.795 111.304 li
359.795 115.741 li
355.359 115.741 li
355.359 111.304 li
cp
f
355.359 111.304 mo
359.795 111.304 li
359.795 115.741 li
355.359 115.741 li
355.359 111.304 li
cp
@
342.046 111.304 mo
346.484 111.304 li
346.484 115.741 li
342.046 115.741 li
342.046 111.304 li
cp
f
342.046 111.304 mo
346.484 111.304 li
346.484 115.741 li
342.046 115.741 li
342.046 111.304 li
cp
@
368.67 111.304 mo
373.108 111.304 li
373.108 115.741 li
368.67 115.741 li
368.67 111.304 li
cp
f
368.67 111.304 mo
373.108 111.304 li
373.108 115.741 li
368.67 115.741 li
368.67 111.304 li
cp
@
368.67 97.9917 mo
373.108 97.9917 li
373.108 102.429 li
368.67 102.429 li
368.67 97.9917 li
cp
f
368.67 97.9917 mo
373.108 97.9917 li
373.108 102.429 li
368.67 102.429 li
368.67 97.9917 li
cp
@
368.67 84.6797 mo
373.108 84.6797 li
373.108 89.1172 li
368.67 89.1172 li
368.67 84.6797 li
cp
f
368.67 84.6797 mo
373.108 84.6797 li
373.108 89.1172 li
368.67 89.1172 li
368.67 84.6797 li
cp
@
355.359 84.6797 mo
359.795 84.6797 li
359.795 89.1172 li
355.359 89.1172 li
355.359 84.6797 li
cp
f
355.359 84.6797 mo
359.795 84.6797 li
359.795 89.1172 li
355.359 89.1172 li
355.359 84.6797 li
cp
@
342.046 84.6797 mo
346.484 84.6797 li
346.484 89.1172 li
342.046 89.1172 li
342.046 84.6797 li
cp
f
342.046 84.6797 mo
346.484 84.6797 li
346.484 89.1172 li
342.046 89.1172 li
342.046 84.6797 li
cp
@
342.046 58.0557 mo
346.484 58.0557 li
346.484 62.4927 li
342.046 62.4927 li
342.046 58.0557 li
cp
f
342.046 58.0557 mo
346.484 58.0557 li
346.484 62.4927 li
342.046 62.4927 li
342.046 58.0557 li
cp
@
355.359 71.3677 mo
359.795 71.3677 li
359.795 75.8047 li
355.359 75.8047 li
355.359 71.3677 li
cp
f
355.359 71.3677 mo
359.795 71.3677 li
359.795 75.8047 li
355.359 75.8047 li
355.359 71.3677 li
cp
@
342.046 71.3677 mo
346.484 71.3677 li
346.484 75.8047 li
342.046 75.8047 li
342.046 71.3677 li
cp
f
342.046 71.3677 mo
346.484 71.3677 li
346.484 75.8047 li
342.046 75.8047 li
342.046 71.3677 li
cp
@
368.67 71.3677 mo
373.108 71.3677 li
373.108 75.8047 li
368.67 75.8047 li
368.67 71.3677 li
cp
f
368.67 71.3677 mo
373.108 71.3677 li
373.108 75.8047 li
368.67 75.8047 li
368.67 71.3677 li
cp
@
368.67 58.0557 mo
373.108 58.0557 li
373.108 62.4927 li
368.67 62.4927 li
368.67 58.0557 li
cp
f
368.67 58.0557 mo
373.108 58.0557 li
373.108 62.4927 li
368.67 62.4927 li
368.67 58.0557 li
cp
@
368.67 44.7432 mo
373.108 44.7432 li
373.108 49.1807 li
368.67 49.1807 li
368.67 44.7432 li
cp
f
368.67 44.7432 mo
373.108 44.7432 li
373.108 49.1807 li
368.67 49.1807 li
368.67 44.7432 li
cp
@
355.359 44.7432 mo
359.795 44.7432 li
359.795 49.1807 li
355.359 49.1807 li
355.359 44.7432 li
cp
f
355.359 44.7432 mo
359.795 44.7432 li
359.795 49.1807 li
355.359 49.1807 li
355.359 44.7432 li
cp
@
342.046 44.7432 mo
346.484 44.7432 li
346.484 49.1807 li
342.046 49.1807 li
342.046 44.7432 li
cp
f
342.046 44.7432 mo
346.484 44.7432 li
346.484 49.1807 li
342.046 49.1807 li
342.046 44.7432 li
cp
@
342.046 18.1191 mo
346.484 18.1191 li
346.484 22.5566 li
342.046 22.5566 li
342.046 18.1191 li
cp
f
342.046 18.1191 mo
346.484 18.1191 li
346.484 22.5566 li
342.046 22.5566 li
342.046 18.1191 li
cp
@
355.359 31.4312 mo
359.795 31.4312 li
359.795 35.8687 li
355.359 35.8687 li
355.359 31.4312 li
cp
f
355.359 31.4312 mo
359.795 31.4312 li
359.795 35.8687 li
355.359 35.8687 li
355.359 31.4312 li
cp
@
342.046 31.4312 mo
346.484 31.4312 li
346.484 35.8687 li
342.046 35.8687 li
342.046 31.4312 li
cp
f
342.046 31.4312 mo
346.484 31.4312 li
346.484 35.8687 li
342.046 35.8687 li
342.046 31.4312 li
cp
@
368.67 31.4312 mo
373.108 31.4312 li
373.108 35.8687 li
368.67 35.8687 li
368.67 31.4312 li
cp
f
368.67 31.4312 mo
373.108 31.4312 li
373.108 35.8687 li
368.67 35.8687 li
368.67 31.4312 li
cp
@
368.67 18.1191 mo
373.108 18.1191 li
373.108 22.5566 li
368.67 22.5566 li
368.67 18.1191 li
cp
f
368.67 18.1191 mo
373.108 18.1191 li
373.108 22.5566 li
368.67 22.5566 li
368.67 18.1191 li
cp
@
368.67 4.80713 mo
373.108 4.80713 li
373.108 9.24463 li
368.67 9.24463 li
368.67 4.80713 li
cp
f
368.67 4.80713 mo
373.108 4.80713 li
373.108 9.24463 li
368.67 9.24463 li
368.67 4.80713 li
cp
@
355.359 4.80713 mo
359.795 4.80713 li
359.795 9.24463 li
355.359 9.24463 li
355.359 4.80713 li
cp
f
355.359 4.80713 mo
359.795 4.80713 li
359.795 9.24463 li
355.359 9.24463 li
355.359 4.80713 li
cp
@
342.046 4.80713 mo
346.484 4.80713 li
346.484 9.24463 li
342.046 9.24463 li
342.046 4.80713 li
cp
f
342.046 4.80713 mo
346.484 4.80713 li
346.484 9.24463 li
342.046 9.24463 li
342.046 4.80713 li
cp
@
302.11 18.1191 mo
306.547 18.1191 li
306.547 22.5566 li
302.11 22.5566 li
302.11 18.1191 li
cp
f
302.11 18.1191 mo
306.547 18.1191 li
306.547 22.5566 li
302.11 22.5566 li
302.11 18.1191 li
cp
@
315.422 31.4312 mo
319.86 31.4312 li
319.86 35.8687 li
315.422 35.8687 li
315.422 31.4312 li
cp
f
315.422 31.4312 mo
319.86 31.4312 li
319.86 35.8687 li
315.422 35.8687 li
315.422 31.4312 li
cp
@
302.11 31.4312 mo
306.547 31.4312 li
306.547 35.8687 li
302.11 35.8687 li
302.11 31.4312 li
cp
f
302.11 31.4312 mo
306.547 31.4312 li
306.547 35.8687 li
302.11 35.8687 li
302.11 31.4312 li
cp
@
328.734 31.4312 mo
333.171 31.4312 li
333.171 35.8687 li
328.734 35.8687 li
328.734 31.4312 li
cp
f
328.734 31.4312 mo
333.171 31.4312 li
333.171 35.8687 li
328.734 35.8687 li
328.734 31.4312 li
cp
@
328.734 18.1191 mo
333.171 18.1191 li
333.171 22.5566 li
328.734 22.5566 li
328.734 18.1191 li
cp
f
328.734 18.1191 mo
333.171 18.1191 li
333.171 22.5566 li
328.734 22.5566 li
328.734 18.1191 li
cp
@
328.734 4.80713 mo
333.171 4.80713 li
333.171 9.24463 li
328.734 9.24463 li
328.734 4.80713 li
cp
f
328.734 4.80713 mo
333.171 4.80713 li
333.171 9.24463 li
328.734 9.24463 li
328.734 4.80713 li
cp
@
315.422 4.80713 mo
319.86 4.80713 li
319.86 9.24463 li
315.422 9.24463 li
315.422 4.80713 li
cp
f
315.422 4.80713 mo
319.86 4.80713 li
319.86 9.24463 li
315.422 9.24463 li
315.422 4.80713 li
cp
@
302.11 4.80713 mo
306.547 4.80713 li
306.547 9.24463 li
302.11 9.24463 li
302.11 4.80713 li
cp
f
302.11 4.80713 mo
306.547 4.80713 li
306.547 9.24463 li
302.11 9.24463 li
302.11 4.80713 li
cp
@
262.174 18.1191 mo
266.612 18.1191 li
266.612 22.5566 li
262.174 22.5566 li
262.174 18.1191 li
cp
f
262.174 18.1191 mo
266.612 18.1191 li
266.612 22.5566 li
262.174 22.5566 li
262.174 18.1191 li
cp
@
275.486 31.4312 mo
279.923 31.4312 li
279.923 35.8687 li
275.486 35.8687 li
275.486 31.4312 li
cp
f
275.486 31.4312 mo
279.923 31.4312 li
279.923 35.8687 li
275.486 35.8687 li
275.486 31.4312 li
cp
@
262.174 31.4312 mo
266.612 31.4312 li
266.612 35.8687 li
262.174 35.8687 li
262.174 31.4312 li
cp
f
262.174 31.4312 mo
266.612 31.4312 li
266.612 35.8687 li
262.174 35.8687 li
262.174 31.4312 li
cp
@
288.798 31.4312 mo
293.236 31.4312 li
293.236 35.8687 li
288.798 35.8687 li
288.798 31.4312 li
cp
f
288.798 31.4312 mo
293.236 31.4312 li
293.236 35.8687 li
288.798 35.8687 li
288.798 31.4312 li
cp
@
288.798 18.1191 mo
293.236 18.1191 li
293.236 22.5566 li
288.798 22.5566 li
288.798 18.1191 li
cp
f
288.798 18.1191 mo
293.236 18.1191 li
293.236 22.5566 li
288.798 22.5566 li
288.798 18.1191 li
cp
@
288.798 4.80713 mo
293.236 4.80713 li
293.236 9.24463 li
288.798 9.24463 li
288.798 4.80713 li
cp
f
288.798 4.80713 mo
293.236 4.80713 li
293.236 9.24463 li
288.798 9.24463 li
288.798 4.80713 li
cp
@
275.486 4.80713 mo
279.923 4.80713 li
279.923 9.24463 li
275.486 9.24463 li
275.486 4.80713 li
cp
f
275.486 4.80713 mo
279.923 4.80713 li
279.923 9.24463 li
275.486 9.24463 li
275.486 4.80713 li
cp
@
262.174 4.80713 mo
266.612 4.80713 li
266.612 9.24463 li
262.174 9.24463 li
262.174 4.80713 li
cp
f
262.174 4.80713 mo
266.612 4.80713 li
266.612 9.24463 li
262.174 9.24463 li
262.174 4.80713 li
cp
@
262.174 58.0557 mo
266.612 58.0557 li
266.612 62.4927 li
262.174 62.4927 li
262.174 58.0557 li
cp
f
262.174 58.0557 mo
266.612 58.0557 li
266.612 62.4927 li
262.174 62.4927 li
262.174 58.0557 li
cp
@
275.486 71.3677 mo
279.923 71.3677 li
279.923 75.8047 li
275.486 75.8047 li
275.486 71.3677 li
cp
f
275.486 71.3677 mo
279.923 71.3677 li
279.923 75.8047 li
275.486 75.8047 li
275.486 71.3677 li
cp
@
262.174 71.3677 mo
266.612 71.3677 li
266.612 75.8047 li
262.174 75.8047 li
262.174 71.3677 li
cp
f
262.174 71.3677 mo
266.612 71.3677 li
266.612 75.8047 li
262.174 75.8047 li
262.174 71.3677 li
cp
@
288.798 71.3677 mo
293.236 71.3677 li
293.236 75.8047 li
288.798 75.8047 li
288.798 71.3677 li
cp
f
288.798 71.3677 mo
293.236 71.3677 li
293.236 75.8047 li
288.798 75.8047 li
288.798 71.3677 li
cp
@
288.798 58.0557 mo
293.236 58.0557 li
293.236 62.4927 li
288.798 62.4927 li
288.798 58.0557 li
cp
f
288.798 58.0557 mo
293.236 58.0557 li
293.236 62.4927 li
288.798 62.4927 li
288.798 58.0557 li
cp
@
288.798 44.7432 mo
293.236 44.7432 li
293.236 49.1807 li
288.798 49.1807 li
288.798 44.7432 li
cp
f
288.798 44.7432 mo
293.236 44.7432 li
293.236 49.1807 li
288.798 49.1807 li
288.798 44.7432 li
cp
@
275.486 44.7432 mo
279.923 44.7432 li
279.923 49.1807 li
275.486 49.1807 li
275.486 44.7432 li
cp
f
275.486 44.7432 mo
279.923 44.7432 li
279.923 49.1807 li
275.486 49.1807 li
275.486 44.7432 li
cp
@
262.174 44.7432 mo
266.612 44.7432 li
266.612 49.1807 li
262.174 49.1807 li
262.174 44.7432 li
cp
f
262.174 44.7432 mo
266.612 44.7432 li
266.612 49.1807 li
262.174 49.1807 li
262.174 44.7432 li
cp
@
gsave
0 0 mo
377.998 0 li
377.998 153.212 li
0 153.212 li
0 0 li
cp
clp
257.737 .369629 mo
377.627 .369629 li
377.627 120.261 li
257.737 120.261 li
257.737 .369629 li
cp
0 0 0 .199 cmyk
@
129.053 .369629 mo
248.944 .369629 li
248.944 120.261 li
129.053 120.261 li
129.053 .369629 li
cp
@
.369629 .369629 mo
120.261 .369629 li
120.261 120.261 li
.369629 120.261 li
.369629 .369629 li
cp
@
grestore
49.4438 133.474 mo
49.229 133.702 49.0186 133.866 48.813 133.964 cv
48.6074 134.063 48.3862 134.112 48.1484 134.112 cv
47.667 134.112 47.2466 133.911 46.8867 133.508 cv
46.5273 133.106 46.3477 132.589 46.3477 131.958 cv
46.3477 131.326 46.5464 130.748 46.9448 130.224 cv
47.3428 129.7 47.855 129.438 48.481 129.438 cv
48.8691 129.438 49.1904 129.562 49.4438 129.811 cv
49.4438 128.994 li
49.4438 128.493 49.4316 128.185 49.4077 128.07 cv
49.3833 127.956 49.3457 127.877 49.2939 127.836 cv
49.2422 127.794 49.1782 127.773 49.1006 127.773 cv
49.0171 127.773 48.9058 127.799 48.7671 127.85 cv
48.7041 127.673 li
50.0249 127.13 li
50.2427 127.13 li
50.2427 132.229 li
50.2427 132.742 50.2549 133.056 50.2788 133.169 cv
50.3032 133.283 50.3418 133.362 50.395 133.407 cv
50.4482 133.451 50.5103 133.474 50.5811 133.474 cv
50.668 133.474 50.7842 133.446 50.9292 133.392 cv
50.9819 133.569 li
49.6665 134.112 li
49.4438 134.112 li
49.4438 133.474 li
cp
49.4438 133.137 mo
49.4438 130.878 li
49.4243 130.657 49.3667 130.456 49.27 130.277 cv
49.1738 130.097 49.0459 129.962 48.8867 129.871 cv
48.7275 129.779 48.5723 129.733 48.4214 129.733 cv
48.1382 129.733 47.8862 129.86 47.6641 130.113 cv
47.3716 130.447 47.2251 130.934 47.2251 131.575 cv
47.2251 132.222 47.3667 132.718 47.6499 133.063 cv
47.9326 133.407 48.2476 133.579 48.5947 133.579 cv
48.8877 133.579 49.1704 133.432 49.4438 133.137 cv
cp
f
51.9976 131.232 mo
51.9946 131.884 52.1533 132.396 52.4746 132.767 cv
52.7954 133.138 53.1729 133.323 53.606 133.323 cv
53.895 133.323 54.1465 133.244 54.3599 133.087 cv
54.5732 132.93 54.7524 132.656 54.897 132.268 cv
55.0449 132.364 li
54.9775 132.809 54.7817 133.211 54.458 133.571 cv
54.1343 133.932 53.7285 134.112 53.2412 134.112 cv
52.7124 134.112 52.2593 133.906 51.8823 133.494 cv
51.5059 133.082 51.3174 132.528 51.3174 131.833 cv
51.3174 131.079 51.5107 130.492 51.897 130.07 cv
52.2832 129.648 52.7681 129.438 53.3521 129.438 cv
53.8457 129.438 54.251 129.601 54.5684 129.926 cv
54.8862 130.252 55.0449 130.687 55.0449 131.232 cv
51.9976 131.232 li
cp
51.9976 130.957 mo
54.0391 130.957 li
54.0229 130.674 53.9893 130.476 53.938 130.36 cv
53.8579 130.181 53.7383 130.04 53.5791 129.937 cv
53.4204 129.834 53.2544 129.783 53.0811 129.783 cv
52.8145 129.783 52.5762 129.886 52.3662 130.093 cv
52.1558 130.3 52.0332 130.587 51.9976 130.957 cv
cp
f
55.3208 130 mo
56.6763 129.458 li
56.8594 129.458 li
56.8594 130.48 li
57.0874 130.095 57.3164 129.824 57.5464 129.67 cv
57.7759 129.515 58.0181 129.438 58.272 129.438 cv
58.7153 129.438 59.0854 129.611 59.3809 129.958 cv
59.7441 130.381 59.9258 130.933 59.9258 131.613 cv
59.9258 132.374 59.7075 133.003 59.27 133.5 cv
58.9102 133.908 58.457 134.112 57.9102 134.112 cv
57.6724 134.112 57.4668 134.078 57.2935 134.011 cv
57.1646 133.963 57.02 133.868 56.8594 133.725 cv
56.8594 135.068 li
56.8594 135.372 56.8779 135.565 56.9146 135.647 cv
56.9517 135.729 57.0161 135.795 57.1084 135.844 cv
57.2002 135.892 57.3667 135.917 57.6084 135.917 cv
57.6084 136.094 li
55.2915 136.094 li
55.2915 135.917 li
55.4121 135.917 li
55.5898 135.919 55.7412 135.886 55.8667 135.815 cv
55.9282 135.78 55.9756 135.724 56.0098 135.646 cv
56.0435 135.567 56.0605 135.368 56.0605 135.049 cv
56.0605 130.858 li
56.0605 130.575 56.0479 130.396 56.022 130.319 cv
55.9966 130.243 55.9556 130.186 55.8994 130.148 cv
55.8433 130.109 55.7676 130.09 55.6714 130.09 cv
55.5947 130.09 55.4971 130.113 55.3784 130.158 cv
55.3208 130 li
cp
56.8594 130.765 mo
56.8594 132.417 li
56.8594 132.773 56.8735 133.008 56.9028 133.121 cv
56.9478 133.308 57.0576 133.472 57.2329 133.613 cv
57.4082 133.755 57.6294 133.826 57.896 133.826 cv
58.2178 133.826 58.478 133.7 58.6772 133.449 cv
58.938 133.121 59.0679 132.659 59.0679 132.064 cv
59.0679 131.388 58.9199 130.868 58.6245 130.504 cv
58.4185 130.253 58.1743 130.128 57.8911 130.128 cv
57.7368 130.128 57.584 130.167 57.4331 130.244 cv
57.3174 130.302 57.126 130.476 56.8594 130.765 cv
cp
f
61.8584 128.116 mo
61.8584 129.566 li
62.8892 129.566 li
62.8892 129.892 li
61.8584 129.901 li
61.8584 132.763 li
61.8584 133.049 61.8994 133.242 61.9814 133.341 cv
62.063 133.441 62.168 133.491 62.2964 133.491 cv
62.4019 133.491 62.5044 133.457 62.604 133.391 cv
62.7031 133.324 62.7803 133.226 62.835 133.096 cv
63.022 133.096 li
62.9097 133.413 62.7505 133.652 62.5449 133.813 cv
62.3394 133.973 62.127 134.053 61.9082 134.053 cv
61.7607 134.053 61.6157 134.012 61.4746 133.929 cv
61.333 133.847 61.2285 133.729 61.1611 133.577 cv
61.0938 133.423 61.0601 133.188 61.0601 132.869 cv
61.0601 129.892 li
60.3599 129.892 li
60.3599 129.738 li
60.5371 129.668 60.7183 129.55 60.9033 129.383 cv
61.0889 129.216 61.2544 129.017 61.3999 128.786 cv
61.4746 128.664 61.5781 128.44 61.7104 128.116 cv
61.8584 128.116 li
cp
f
64.6099 127.13 mo
64.6099 130.357 li
64.9663 129.966 65.2495 129.715 65.4585 129.604 cv
65.667 129.493 65.876 129.438 66.085 129.438 cv
66.3359 129.438 66.5513 129.507 66.731 129.645 cv
66.9111 129.783 67.0444 130 67.1313 130.296 cv
67.1924 130.502 67.2227 130.878 67.2227 131.425 cv
67.2227 132.988 li
67.2227 133.265 67.2451 133.455 67.29 133.557 cv
67.3218 133.634 67.376 133.694 67.4526 133.739 cv
67.5293 133.784 67.6694 133.806 67.8735 133.806 cv
67.8735 133.983 li
65.7144 133.983 li
65.7144 133.806 li
65.8149 133.806 li
66.0195 133.806 66.1616 133.775 66.2417 133.713 cv
66.3218 133.65 66.3779 133.559 66.4097 133.438 cv
66.4194 133.387 66.4243 133.236 66.4243 132.988 cv
66.4243 131.424 li
66.4243 130.941 66.3994 130.625 66.3491 130.473 cv
66.2993 130.322 66.2197 130.208 66.1104 130.133 cv
66.001 130.058 65.8691 130.02 65.7148 130.02 cv
65.5571 130.02 65.3931 130.062 65.2227 130.145 cv
65.0522 130.229 64.8477 130.397 64.6099 130.651 cv
64.6099 132.988 li
64.6099 133.288 64.6265 133.474 64.6602 133.548 cv
64.6938 133.621 64.7563 133.683 64.8472 133.732 cv
64.9385 133.781 65.0957 133.806 65.3198 133.806 cv
65.3198 133.983 li
63.1406 133.983 li
63.1406 133.806 li
63.3354 133.806 63.4883 133.776 63.6001 133.715 cv
63.6641 133.683 63.7153 133.623 63.7534 133.533 cv
63.792 133.444 63.811 133.262 63.811 132.988 cv
63.811 128.994 li
63.811 128.493 63.7988 128.185 63.7749 128.07 cv
63.751 127.956 63.7144 127.877 63.6646 127.836 cv
63.6147 127.794 63.5483 127.773 63.4653 127.773 cv
63.3979 127.773 63.2891 127.799 63.1387 127.85 cv
63.0713 127.673 li
64.3887 127.13 li
64.6099 127.13 li
cp
f
70.7529 130.753 mo
70.7529 130.009 70.8652 129.368 71.0898 128.831 cv
71.3145 128.293 71.6128 127.894 71.9849 127.63 cv
72.2739 127.422 72.5723 127.318 72.8799 127.318 cv
73.3804 127.318 73.8296 127.573 74.2275 128.083 cv
74.7251 128.715 74.9736 129.571 74.9736 130.652 cv
74.9736 131.409 74.8643 132.052 74.646 132.582 cv
74.4282 133.11 74.1499 133.495 73.811 133.734 cv
73.4727 133.973 73.1465 134.092 72.832 134.092 cv
72.2095 134.092 71.6914 133.725 71.2773 132.99 cv
70.9277 132.371 70.7529 131.625 70.7529 130.753 cv
cp
71.6997 130.871 mo
71.6997 131.769 71.8101 132.502 72.0308 133.07 cv
72.2129 133.547 72.4849 133.786 72.8467 133.786 cv
73.019 133.786 73.1982 133.708 73.3838 133.553 cv
73.5693 133.397 73.71 133.137 73.8062 132.771 cv
73.9531 132.22 74.0269 131.442 74.0269 130.438 cv
74.0269 129.694 73.9502 129.073 73.7964 128.576 cv
73.6812 128.208 73.5327 127.946 73.3501 127.792 cv
73.2192 127.686 73.061 127.633 72.8755 127.633 cv
72.6577 127.633 72.4644 127.731 72.2949 127.927 cv
72.0645 128.193 71.9077 128.611 71.8242 129.182 cv
71.7412 129.753 71.6997 130.316 71.6997 130.871 cv
cp
f
178.127 133.474 mo
177.912 133.702 177.702 133.866 177.497 133.964 cv
177.291 134.063 177.07 134.112 176.832 134.112 cv
176.351 134.112 175.93 133.911 175.57 133.508 cv
175.211 133.106 175.031 132.589 175.031 131.958 cv
175.031 131.326 175.23 130.748 175.628 130.224 cv
176.026 129.7 176.538 129.438 177.164 129.438 cv
177.553 129.438 177.874 129.562 178.127 129.811 cv
178.127 128.994 li
178.127 128.493 178.115 128.185 178.091 128.07 cv
178.067 127.956 178.029 127.877 177.978 127.836 cv
177.926 127.794 177.861 127.773 177.784 127.773 cv
177.7 127.773 177.589 127.799 177.451 127.85 cv
177.388 127.673 li
178.708 127.13 li
178.926 127.13 li
178.926 132.229 li
178.926 132.742 178.938 133.056 178.962 133.169 cv
178.986 133.283 179.025 133.362 179.078 133.407 cv
179.131 133.451 179.193 133.474 179.264 133.474 cv
179.352 133.474 179.467 133.446 179.612 133.392 cv
179.666 133.569 li
178.35 134.112 li
178.127 134.112 li
178.127 133.474 li
cp
178.127 133.137 mo
178.127 130.878 li
178.108 130.657 178.05 130.456 177.954 130.277 cv
177.857 130.097 177.729 129.962 177.57 129.871 cv
177.411 129.779 177.256 129.733 177.104 129.733 cv
176.822 129.733 176.569 129.86 176.348 130.113 cv
176.055 130.447 175.909 130.934 175.909 131.575 cv
175.909 132.222 176.05 132.718 176.333 133.063 cv
176.616 133.407 176.931 133.579 177.278 133.579 cv
177.571 133.579 177.854 133.432 178.127 133.137 cv
cp
f
180.681 131.232 mo
180.678 131.884 180.837 132.396 181.158 132.767 cv
181.479 133.138 181.856 133.323 182.29 133.323 cv
182.579 133.323 182.83 133.244 183.043 133.087 cv
183.257 132.93 183.436 132.656 183.581 132.268 cv
183.728 132.364 li
183.661 132.809 183.465 133.211 183.141 133.571 cv
182.817 133.932 182.412 134.112 181.925 134.112 cv
181.396 134.112 180.943 133.906 180.566 133.494 cv
180.189 133.082 180.001 132.528 180.001 131.833 cv
180.001 131.079 180.194 130.492 180.581 130.07 cv
180.967 129.648 181.452 129.438 182.035 129.438 cv
182.529 129.438 182.935 129.601 183.252 129.926 cv
183.569 130.252 183.728 130.687 183.728 131.232 cv
180.681 131.232 li
cp
180.681 130.957 mo
182.722 130.957 li
182.707 130.674 182.673 130.476 182.622 130.36 cv
182.541 130.181 182.421 130.04 182.263 129.937 cv
182.104 129.834 181.938 129.783 181.764 129.783 cv
181.498 129.783 181.26 129.886 181.049 130.093 cv
180.839 130.3 180.717 130.587 180.681 130.957 cv
cp
f
184.004 130 mo
185.36 129.458 li
185.542 129.458 li
185.542 130.48 li
185.771 130.095 186 129.824 186.229 129.67 cv
186.459 129.515 186.702 129.438 186.956 129.438 cv
187.399 129.438 187.769 129.611 188.064 129.958 cv
188.428 130.381 188.609 130.933 188.609 131.613 cv
188.609 132.374 188.391 133.003 187.954 133.5 cv
187.594 133.908 187.14 134.112 186.594 134.112 cv
186.356 134.112 186.15 134.078 185.977 134.011 cv
185.848 133.963 185.704 133.868 185.542 133.725 cv
185.542 135.068 li
185.542 135.372 185.561 135.565 185.598 135.647 cv
185.635 135.729 185.7 135.795 185.792 135.844 cv
185.883 135.892 186.05 135.917 186.292 135.917 cv
186.292 136.094 li
183.975 136.094 li
183.975 135.917 li
184.096 135.917 li
184.273 135.919 184.425 135.886 184.55 135.815 cv
184.612 135.78 184.659 135.724 184.693 135.646 cv
184.727 135.567 184.744 135.368 184.744 135.049 cv
184.744 130.858 li
184.744 130.575 184.731 130.396 184.706 130.319 cv
184.68 130.243 184.639 130.186 184.583 130.148 cv
184.527 130.109 184.451 130.09 184.355 130.09 cv
184.278 130.09 184.18 130.113 184.062 130.158 cv
184.004 130 li
cp
185.542 130.765 mo
185.542 132.417 li
185.542 132.773 185.557 133.008 185.586 133.121 cv
185.631 133.308 185.741 133.472 185.917 133.613 cv
186.092 133.755 186.313 133.826 186.58 133.826 cv
186.901 133.826 187.162 133.7 187.361 133.449 cv
187.621 133.121 187.751 132.659 187.751 132.064 cv
187.751 131.388 187.604 130.868 187.308 130.504 cv
187.102 130.253 186.857 130.128 186.575 130.128 cv
186.42 130.128 186.268 130.167 186.117 130.244 cv
186.001 130.302 185.81 130.476 185.542 130.765 cv
cp
f
190.542 128.116 mo
190.542 129.566 li
191.572 129.566 li
191.572 129.892 li
190.542 129.901 li
190.542 132.763 li
190.542 133.049 190.583 133.242 190.665 133.341 cv
190.747 133.441 190.852 133.491 190.979 133.491 cv
191.085 133.491 191.188 133.457 191.287 133.391 cv
191.387 133.324 191.464 133.226 191.518 133.096 cv
191.706 133.096 li
191.593 133.413 191.434 133.652 191.229 133.813 cv
191.022 133.973 190.811 134.053 190.592 134.053 cv
190.444 134.053 190.299 134.012 190.158 133.929 cv
190.017 133.847 189.912 133.729 189.845 133.577 cv
189.777 133.423 189.743 133.188 189.743 132.869 cv
189.743 129.892 li
189.043 129.892 li
189.043 129.738 li
189.22 129.668 189.401 129.55 189.587 129.383 cv
189.772 129.216 189.938 129.017 190.083 128.786 cv
190.158 128.664 190.261 128.44 190.394 128.116 cv
190.542 128.116 li
cp
f
193.293 127.13 mo
193.293 130.357 li
193.65 129.966 193.933 129.715 194.142 129.604 cv
194.351 129.493 194.56 129.438 194.769 129.438 cv
195.019 129.438 195.234 129.507 195.415 129.645 cv
195.595 129.783 195.728 130 195.814 130.296 cv
195.876 130.502 195.906 130.878 195.906 131.425 cv
195.906 132.988 li
195.906 133.265 195.929 133.455 195.973 133.557 cv
196.005 133.634 196.06 133.694 196.136 133.739 cv
196.212 133.784 196.353 133.806 196.557 133.806 cv
196.557 133.983 li
194.397 133.983 li
194.397 133.806 li
194.499 133.806 li
194.703 133.806 194.845 133.775 194.925 133.713 cv
195.005 133.65 195.061 133.559 195.093 133.438 cv
195.103 133.387 195.107 133.236 195.107 132.988 cv
195.107 131.424 li
195.107 130.941 195.083 130.625 195.033 130.473 cv
194.983 130.322 194.903 130.208 194.794 130.133 cv
194.685 130.058 194.553 130.02 194.398 130.02 cv
194.241 130.02 194.077 130.062 193.906 130.145 cv
193.735 130.229 193.531 130.397 193.293 130.651 cv
193.293 132.988 li
193.293 133.288 193.31 133.474 193.344 133.548 cv
193.377 133.621 193.439 133.683 193.531 133.732 cv
193.622 133.781 193.779 133.806 194.003 133.806 cv
194.003 133.983 li
191.824 133.983 li
191.824 133.806 li
192.019 133.806 192.172 133.776 192.284 133.715 cv
192.348 133.683 192.399 133.623 192.437 133.533 cv
192.475 133.444 192.495 133.262 192.495 132.988 cv
192.495 128.994 li
192.495 128.493 192.482 128.185 192.458 128.07 cv
192.435 127.956 192.397 127.877 192.348 127.836 cv
192.298 127.794 192.232 127.773 192.149 127.773 cv
192.082 127.773 191.973 127.799 191.822 127.85 cv
191.755 127.673 li
193.072 127.13 li
193.293 127.13 li
cp
f
200.225 128.087 mo
201.821 127.318 li
201.981 127.318 li
201.981 132.83 li
201.981 133.197 201.996 133.426 202.027 133.516 cv
202.057 133.606 202.121 133.676 202.218 133.724 cv
202.315 133.772 202.512 133.8 202.809 133.806 cv
202.809 133.983 li
200.343 133.983 li
200.343 133.806 li
200.652 133.8 200.851 133.773 200.941 133.727 cv
201.031 133.68 201.093 133.617 201.128 133.538 cv
201.165 133.459 201.182 133.223 201.182 132.83 cv
201.182 129.3 li
201.182 128.824 201.166 128.519 201.133 128.384 cv
201.111 128.281 201.07 128.206 201.01 128.158 cv
200.951 128.109 200.879 128.085 200.795 128.085 cv
200.676 128.085 200.51 128.135 200.297 128.235 cv
200.225 128.087 li
cp
f
306.811 133.474 mo
306.595 133.702 306.385 133.866 306.18 133.964 cv
305.974 134.063 305.753 134.112 305.515 134.112 cv
305.034 134.112 304.614 133.911 304.253 133.508 cv
303.894 133.106 303.714 132.589 303.714 131.958 cv
303.714 131.326 303.914 130.748 304.311 130.224 cv
304.709 129.7 305.221 129.438 305.847 129.438 cv
306.236 129.438 306.557 129.562 306.811 129.811 cv
306.811 128.994 li
306.811 128.493 306.798 128.185 306.774 128.07 cv
306.75 127.956 306.712 127.877 306.661 127.836 cv
306.609 127.794 306.544 127.773 306.467 127.773 cv
306.383 127.773 306.273 127.799 306.134 127.85 cv
306.071 127.673 li
307.392 127.13 li
307.61 127.13 li
307.61 132.229 li
307.61 132.742 307.622 133.056 307.646 133.169 cv
307.67 133.283 307.708 133.362 307.761 133.407 cv
307.815 133.451 307.876 133.474 307.948 133.474 cv
308.035 133.474 308.151 133.446 308.295 133.392 cv
308.349 133.569 li
307.034 134.112 li
306.811 134.112 li
306.811 133.474 li
cp
306.811 133.137 mo
306.811 130.878 li
306.792 130.657 306.734 130.456 306.637 130.277 cv
306.541 130.097 306.413 129.962 306.253 129.871 cv
306.094 129.779 305.939 129.733 305.789 129.733 cv
305.505 129.733 305.252 129.86 305.031 130.113 cv
304.739 130.447 304.592 130.934 304.592 131.575 cv
304.592 132.222 304.734 132.718 305.016 133.063 cv
305.299 133.407 305.615 133.579 305.961 133.579 cv
306.254 133.579 306.538 133.432 306.811 133.137 cv
cp
f
309.365 131.232 mo
309.362 131.884 309.52 132.396 309.841 132.767 cv
310.163 133.138 310.54 133.323 310.973 133.323 cv
311.262 133.323 311.513 133.244 311.727 133.087 cv
311.94 132.93 312.12 132.656 312.264 132.268 cv
312.412 132.364 li
312.344 132.809 312.149 133.211 311.825 133.571 cv
311.501 133.932 311.095 134.112 310.608 134.112 cv
310.079 134.112 309.626 133.906 309.25 133.494 cv
308.873 133.082 308.684 132.528 308.684 131.833 cv
308.684 131.079 308.877 130.492 309.264 130.07 cv
309.65 129.648 310.135 129.438 310.718 129.438 cv
311.212 129.438 311.618 129.601 311.935 129.926 cv
312.252 130.252 312.412 130.687 312.412 131.232 cv
309.365 131.232 li
cp
309.365 130.957 mo
311.406 130.957 li
311.39 130.674 311.356 130.476 311.305 130.36 cv
311.224 130.181 311.105 130.04 310.946 129.937 cv
310.788 129.834 310.622 129.783 310.448 129.783 cv
310.181 129.783 309.943 129.886 309.733 130.093 cv
309.523 130.3 309.4 130.587 309.365 130.957 cv
cp
f
312.688 130 mo
314.043 129.458 li
314.226 129.458 li
314.226 130.48 li
314.455 130.095 314.683 129.824 314.913 129.67 cv
315.143 129.515 315.385 129.438 315.639 129.438 cv
316.083 129.438 316.452 129.611 316.748 129.958 cv
317.111 130.381 317.292 130.933 317.292 131.613 cv
317.292 132.374 317.074 133.003 316.637 133.5 cv
316.277 133.908 315.824 134.112 315.277 134.112 cv
315.04 134.112 314.833 134.078 314.66 134.011 cv
314.532 133.963 314.387 133.868 314.226 133.725 cv
314.226 135.068 li
314.226 135.372 314.245 135.565 314.282 135.647 cv
314.319 135.729 314.383 135.795 314.475 135.844 cv
314.567 135.892 314.734 135.917 314.975 135.917 cv
314.975 136.094 li
312.659 136.094 li
312.659 135.917 li
312.779 135.917 li
312.957 135.919 313.108 135.886 313.234 135.815 cv
313.295 135.78 313.342 135.724 313.376 135.646 cv
313.411 135.567 313.427 135.368 313.427 135.049 cv
313.427 130.858 li
313.427 130.575 313.415 130.396 313.389 130.319 cv
313.363 130.243 313.323 130.186 313.266 130.148 cv
313.21 130.109 313.134 130.09 313.039 130.09 cv
312.961 130.09 312.864 130.113 312.746 130.158 cv
312.688 130 li
cp
314.226 130.765 mo
314.226 132.417 li
314.226 132.773 314.241 133.008 314.269 133.121 cv
314.315 133.308 314.424 133.472 314.6 133.613 cv
314.775 133.755 314.997 133.826 315.263 133.826 cv
315.584 133.826 315.845 133.7 316.044 133.449 cv
316.305 133.121 316.435 132.659 316.435 132.064 cv
316.435 131.388 316.287 130.868 315.991 130.504 cv
315.786 130.253 315.542 130.128 315.258 130.128 cv
315.104 130.128 314.951 130.167 314.8 130.244 cv
314.684 130.302 314.493 130.476 314.226 130.765 cv
cp
f
319.225 128.116 mo
319.225 129.566 li
320.255 129.566 li
320.255 129.892 li
319.225 129.901 li
319.225 132.763 li
319.225 133.049 319.266 133.242 319.348 133.341 cv
319.43 133.441 319.535 133.491 319.663 133.491 cv
319.769 133.491 319.872 133.457 319.971 133.391 cv
320.07 133.324 320.147 133.226 320.202 133.096 cv
320.389 133.096 li
320.277 133.413 320.118 133.652 319.912 133.813 cv
319.706 133.973 319.494 134.053 319.275 134.053 cv
319.127 134.053 318.983 134.012 318.841 133.929 cv
318.7 133.847 318.595 133.729 318.528 133.577 cv
318.46 133.423 318.426 133.188 318.426 132.869 cv
318.426 129.892 li
317.727 129.892 li
317.727 129.738 li
317.904 129.668 318.085 129.55 318.27 129.383 cv
318.456 129.216 318.621 129.017 318.767 128.786 cv
318.841 128.664 318.945 128.44 319.078 128.116 cv
319.225 128.116 li
cp
f
321.977 127.13 mo
321.977 130.357 li
322.333 129.966 322.616 129.715 322.825 129.604 cv
323.034 129.493 323.243 129.438 323.452 129.438 cv
323.703 129.438 323.918 129.507 324.098 129.645 cv
324.278 129.783 324.412 130 324.499 130.296 cv
324.559 130.502 324.589 130.878 324.589 131.425 cv
324.589 132.988 li
324.589 133.265 324.612 133.455 324.657 133.557 cv
324.689 133.634 324.743 133.694 324.819 133.739 cv
324.896 133.784 325.037 133.806 325.241 133.806 cv
325.241 133.983 li
323.081 133.983 li
323.081 133.806 li
323.182 133.806 li
323.386 133.806 323.529 133.775 323.609 133.713 cv
323.689 133.65 323.745 133.559 323.777 133.438 cv
323.787 133.387 323.792 133.236 323.792 132.988 cv
323.792 131.424 li
323.792 130.941 323.766 130.625 323.716 130.473 cv
323.667 130.322 323.586 130.208 323.477 130.133 cv
323.368 130.058 323.236 130.02 323.082 130.02 cv
322.924 130.02 322.76 130.062 322.589 130.145 cv
322.419 130.229 322.214 130.397 321.977 130.651 cv
321.977 132.988 li
321.977 133.288 321.994 133.474 322.027 133.548 cv
322.061 133.621 322.123 133.683 322.214 133.732 cv
322.305 133.781 322.462 133.806 322.687 133.806 cv
322.687 133.983 li
320.507 133.983 li
320.507 133.806 li
320.702 133.806 320.855 133.776 320.967 133.715 cv
321.031 133.683 321.083 133.623 321.121 133.533 cv
321.159 133.444 321.178 133.262 321.178 132.988 cv
321.178 128.994 li
321.178 128.493 321.166 128.185 321.142 128.07 cv
321.118 127.956 321.081 127.877 321.032 127.836 cv
320.982 127.794 320.916 127.773 320.833 127.773 cv
320.765 127.773 320.656 127.799 320.505 127.85 cv
320.438 127.673 li
321.755 127.13 li
321.977 127.13 li
cp
f
332.281 132.714 mo
331.824 133.983 li
327.972 133.983 li
327.972 133.802 li
329.105 132.77 329.903 131.926 330.365 131.272 cv
330.828 130.618 331.058 130.02 331.058 129.477 cv
331.058 129.063 330.931 128.723 330.678 128.457 cv
330.424 128.19 330.121 128.057 329.768 128.057 cv
329.447 128.057 329.159 128.15 328.904 128.336 cv
328.648 128.521 328.459 128.793 328.337 129.152 cv
328.16 129.152 li
328.24 128.561 328.446 128.108 328.779 127.792 cv
329.112 127.476 329.527 127.318 330.026 127.318 cv
330.556 127.318 330.999 127.488 331.354 127.829 cv
331.709 128.169 331.887 128.571 331.887 129.033 cv
331.887 129.364 331.81 129.695 331.656 130.026 cv
331.417 130.546 331.033 131.096 330.5 131.677 cv
329.7 132.549 329.201 133.072 329.002 133.244 cv
330.699 133.244 li
331.044 133.244 331.287 133.231 331.425 133.206 cv
331.564 133.18 331.69 133.128 331.801 133.049 cv
331.914 132.971 332.01 132.859 332.094 132.714 cv
332.281 132.714 li
cp
f
58.269 150.195 mo
58.269 150.382 li
57.7837 150.138 57.3784 149.853 57.0537 149.525 cv
56.5908 149.06 56.2339 148.511 55.9829 147.879 cv
55.7324 147.247 55.6069 146.59 55.6069 145.91 cv
55.6069 144.915 55.853 144.008 56.3447 143.188 cv
56.8369 142.368 57.478 141.782 58.269 141.429 cv
58.269 141.636 li
57.873 141.854 57.5474 142.151 57.293 142.529 cv
57.0381 142.908 56.8481 143.387 56.7222 143.966 cv
56.5967 144.546 56.5337 145.152 56.5337 145.783 cv
56.5337 146.469 56.5869 147.092 56.6934 147.652 cv
56.7769 148.095 56.8784 148.449 56.998 148.717 cv
57.1172 148.984 57.2773 149.242 57.479 149.488 cv
57.6802 149.735 57.9438 149.971 58.269 150.195 cv
cp
f
61.2866 147.64 mo
60.834 147.992 60.5503 148.195 60.4346 148.25 cv
60.2612 148.33 60.0767 148.371 59.8809 148.371 cv
59.5762 148.371 59.3247 148.266 59.1274 148.057 cv
58.9302 147.848 58.8315 147.574 58.8315 147.233 cv
58.8315 147.018 58.8794 146.831 58.9756 146.674 cv
59.1074 146.455 59.3359 146.25 59.6616 146.057 cv
59.9878 145.864 60.5293 145.629 61.2866 145.353 cv
61.2866 145.18 li
61.2866 144.741 61.2173 144.44 61.0776 144.277 cv
60.9385 144.113 60.7363 144.032 60.4702 144.032 cv
60.2686 144.032 60.1089 144.086 59.9902 144.195 cv
59.8687 144.305 59.8081 144.43 59.8081 144.571 cv
59.8174 144.851 li
59.8174 144.999 59.7793 145.113 59.7036 145.193 cv
59.6279 145.273 59.5283 145.313 59.4058 145.313 cv
59.2861 145.313 59.1885 145.272 59.1128 145.188 cv
59.0371 145.104 58.999 144.99 58.999 144.846 cv
58.999 144.569 59.1406 144.315 59.4233 144.083 cv
59.7061 143.852 60.1035 143.736 60.6147 143.736 cv
61.0068 143.736 61.3281 143.802 61.5791 143.934 cv
61.7686 144.033 61.9087 144.189 61.9985 144.401 cv
62.0566 144.539 62.0854 144.822 62.0854 145.249 cv
62.0854 146.747 li
62.0854 147.168 62.0933 147.426 62.1094 147.521 cv
62.1255 147.615 62.1523 147.679 62.1895 147.711 cv
62.2266 147.743 62.269 147.759 62.3174 147.759 cv
62.3691 147.759 62.4146 147.748 62.4531 147.726 cv
62.5205 147.684 62.6514 147.567 62.8447 147.375 cv
62.8447 147.644 li
62.4834 148.128 62.1382 148.371 61.8091 148.371 cv
61.6514 148.371 61.5254 148.315 61.4316 148.205 cv
61.3384 148.095 61.29 147.906 61.2866 147.64 cv
cp
61.2866 147.327 mo
61.2866 145.649 li
60.7993 145.841 60.4844 145.978 60.3423 146.058 cv
60.0869 146.199 59.9048 146.346 59.7949 146.5 cv
59.6851 146.654 59.6299 146.822 59.6299 147.005 cv
59.6299 147.236 59.6997 147.428 59.8384 147.58 cv
59.9771 147.732 60.1372 147.809 60.3179 147.809 cv
60.5635 147.809 60.8862 147.648 61.2866 147.327 cv
cp
f
63.0815 141.636 mo
63.0815 141.429 li
63.5698 141.669 63.9771 141.953 64.3018 142.28 cv
64.7617 142.749 65.1167 143.299 65.3677 143.929 cv
65.6182 144.56 65.7437 145.217 65.7437 145.9 cv
65.7437 146.896 65.4985 147.803 65.0083 148.623 cv
64.5181 149.442 63.8755 150.029 63.0815 150.382 cv
63.0815 150.195 li
63.4775 149.974 63.8042 149.675 64.0601 149.298 cv
64.3164 148.922 64.5068 148.443 64.6309 147.861 cv
64.7549 147.28 64.8169 146.674 64.8169 146.042 cv
64.8169 145.36 64.7637 144.737 64.6572 144.173 cv
64.5767 143.731 64.4761 143.377 64.355 143.111 cv
64.2344 142.845 64.0737 142.589 63.874 142.342 cv
63.6743 142.095 63.4102 141.86 63.0815 141.636 cv
cp
f
186.677 150.195 mo
186.677 150.382 li
186.191 150.138 185.786 149.853 185.461 149.525 cv
184.998 149.06 184.641 148.511 184.39 147.879 cv
184.14 147.247 184.014 146.59 184.014 145.91 cv
184.014 144.915 184.26 144.008 184.752 143.188 cv
185.244 142.368 185.886 141.782 186.677 141.429 cv
186.677 141.636 li
186.28 141.854 185.955 142.151 185.7 142.529 cv
185.445 142.908 185.255 143.387 185.129 143.966 cv
185.004 144.546 184.941 145.152 184.941 145.783 cv
184.941 146.469 184.994 147.092 185.101 147.652 cv
185.185 148.095 185.286 148.449 185.405 148.717 cv
185.524 148.984 185.685 149.242 185.886 149.488 cv
186.087 149.735 186.351 149.971 186.677 150.195 cv
cp
f
188.412 144.633 mo
188.838 144.035 189.298 143.736 189.792 143.736 cv
190.244 143.736 190.638 143.929 190.974 144.316 cv
191.311 144.703 191.479 145.231 191.479 145.902 cv
191.479 146.685 191.219 147.315 190.699 147.794 cv
190.253 148.205 189.755 148.41 189.207 148.41 cv
188.95 148.41 188.689 148.363 188.424 148.27 cv
188.16 148.176 187.889 148.036 187.613 147.849 cv
187.613 143.292 li
187.613 142.792 187.601 142.485 187.577 142.37 cv
187.553 142.254 187.515 142.176 187.463 142.134 cv
187.412 142.092 187.348 142.071 187.27 142.071 cv
187.18 142.071 187.067 142.097 186.932 142.148 cv
186.864 141.971 li
188.194 141.429 li
188.412 141.429 li
188.412 144.633 li
cp
188.412 144.939 mo
188.412 147.57 li
188.576 147.73 188.745 147.851 188.92 147.933 cv
189.095 148.014 189.274 148.055 189.457 148.055 cv
189.749 148.055 190.021 147.895 190.272 147.575 cv
190.524 147.255 190.65 146.789 190.65 146.178 cv
190.65 145.615 190.524 145.182 190.272 144.88 cv
190.021 144.577 189.734 144.426 189.414 144.426 cv
189.243 144.426 189.073 144.469 188.903 144.556 cv
188.775 144.62 188.611 144.748 188.412 144.939 cv
cp
f
192.041 141.636 mo
192.041 141.429 li
192.53 141.669 192.937 141.953 193.261 142.28 cv
193.721 142.749 194.076 143.299 194.327 143.929 cv
194.578 144.56 194.703 145.217 194.703 145.9 cv
194.703 146.896 194.458 147.803 193.968 148.623 cv
193.478 149.442 192.835 150.029 192.041 150.382 cv
192.041 150.195 li
192.438 149.974 192.764 149.675 193.02 149.298 cv
193.276 148.922 193.466 148.443 193.59 147.861 cv
193.714 147.28 193.776 146.674 193.776 146.042 cv
193.776 145.36 193.723 144.737 193.617 144.173 cv
193.536 143.731 193.436 143.377 193.314 143.111 cv
193.194 142.845 193.034 142.589 192.833 142.342 cv
192.634 142.095 192.37 141.86 192.041 141.636 cv
cp
f
315.636 150.195 mo
315.636 150.382 li
315.151 150.138 314.746 149.853 314.42 149.525 cv
313.958 149.06 313.601 148.511 313.35 147.879 cv
313.099 147.247 312.974 146.59 312.974 145.91 cv
312.974 144.915 313.219 144.008 313.711 143.188 cv
314.204 142.368 314.845 141.782 315.636 141.429 cv
315.636 141.636 li
315.24 141.854 314.915 142.151 314.66 142.529 cv
314.405 142.908 314.214 143.387 314.089 143.966 cv
313.963 144.546 313.901 145.152 313.901 145.783 cv
313.901 146.469 313.954 147.092 314.06 147.652 cv
314.144 148.095 314.246 148.449 314.365 148.717 cv
314.484 148.984 314.644 149.242 314.846 149.488 cv
315.047 149.735 315.311 149.971 315.636 150.195 cv
cp
f
319.916 146.604 mo
319.797 147.187 319.564 147.633 319.217 147.944 cv
318.871 148.255 318.487 148.41 318.067 148.41 cv
317.566 148.41 317.129 148.2 316.756 147.779 cv
316.384 147.359 316.198 146.791 316.198 146.075 cv
316.198 145.382 316.405 144.819 316.817 144.386 cv
317.229 143.953 317.723 143.736 318.301 143.736 cv
318.734 143.736 319.09 143.851 319.369 144.081 cv
319.648 144.31 319.788 144.548 319.788 144.796 cv
319.788 144.918 319.749 145.017 319.669 145.092 cv
319.591 145.167 319.481 145.205 319.34 145.205 cv
319.151 145.205 319.009 145.144 318.917 145.021 cv
318.859 144.953 318.821 144.824 318.803 144.633 cv
318.786 144.442 318.721 144.297 318.609 144.197 cv
318.497 144.1 318.34 144.051 318.142 144.051 cv
317.821 144.051 317.563 144.17 317.367 144.408 cv
317.107 144.724 316.977 145.14 316.977 145.658 cv
316.977 146.186 317.107 146.651 317.365 147.055 cv
317.624 147.458 317.973 147.661 318.414 147.661 cv
318.728 147.661 319.011 147.555 319.262 147.344 cv
319.439 147.196 319.611 146.927 319.778 146.536 cv
319.916 146.604 li
cp
f
320.448 141.636 mo
320.448 141.429 li
320.937 141.669 321.343 141.953 321.668 142.28 cv
322.128 142.749 322.484 143.299 322.735 143.929 cv
322.985 144.56 323.111 145.217 323.111 145.9 cv
323.111 146.896 322.866 147.803 322.375 148.623 cv
321.884 149.442 321.243 150.029 320.448 150.382 cv
320.448 150.195 li
320.844 149.974 321.17 149.675 321.427 149.298 cv
321.683 148.922 321.874 148.443 321.998 147.861 cv
322.122 147.28 322.184 146.674 322.184 146.042 cv
322.184 145.36 322.13 144.737 322.024 144.173 cv
321.944 143.731 321.843 143.377 321.722 143.111 cv
321.601 142.845 321.441 142.589 321.241 142.342 cv
321.042 142.095 320.777 141.86 320.448 141.636 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (010x008.eps)%%CreationDate: 27/05/15 10:49 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6k?9CHdP,ub_"V4=##)6_#I8=lLIKKrYSXMt[^"*D4n"I#g-:ih9:aggH0:^\XEhh<eP]DH<%=/*W`D$ig&>m>hcm:RmJef8%A][\_ZB`ul/$5:U.\#7C5ABc&Ab)!-a\X[0fbu>VjsAh?:^n^(9*VCrDSLRK2Hp(>DYp9Xl]p2KG.4rFhJCbL5#U(nNrE./D`4W_%mUrYoQK>a^5ZrBfr-iS8&&1?$)r7?tC>/_h+*$uF?L>/*PfDSeGc15_r2qu=&^j-sk7^#H_#s9@Im7fBqhSfO<CRC^%^,OoAe:4+%2g]o"G^]&R]=%Wb]60a@,eNHhB<D&^W_;P?6WVX4XcR1.NR(A+eo+r1W03b(&Zb\jJ#=Si,B50O5S%BN+U^o0XC5@-NPF<hs&hs4%2er"TQUn(-m@V,m%r/DOBp(kJachqWAts_0HLE*H;ukT>6jN+*UPXdeorH?k.r>;R^ctDAZWd+2d7<$IDLOt-QdQYEJ@].'p339)%U^%$_3fV]nqZ:iLBLkbL[]o[Ga\'JNMLj/.,!i2clB%8+-c$49!"2/4U<Ybgh0%4qIsl5e=m8@D-b[%?IBW6;1mPF:5&^o#QLMZ6%r[4eA<qlKN(1eM#<U#%oOehok.3W[(L(paiHUf9D'r::(3FZS6Bg\q+ldl\B=jg-5r&;=bG9:p"6N:""4q.TXD&YZ3,mI@LpoCFa%<)qnVWfj:1.b#fQ$j0*>#5g4b-tO5latThqL=<T)N,:p"gBMeO^JN(]TbMm,:FK3m6)d`gC6hK]Uf;q$eLE\`<Xf.G=0(i'=s\:s%a+Rg:&"uOc6;@/Y71'6k:^YnZT25mK`*,d)6&XY7b!:mC'AC\V60^e+i"LQ*Mr57&&NLHIcm&7<G/I[;6CWKPOX?b4V4_,`$"^,:%J?f(ScA@L:'T&(4PLLj0-eoBl$#bJXE6e<9Pp$+"'XSB7!>F]`dVA?3oGIL[;U@VY_aGuM0!l-Qi>8k]oKR^9c2e!=:^Yn]T;39[%Q4US>qEU2-!-$6UL\2PDO%:9`&\0X,OHpRJJTJ[ETh@)GrZWZ@5:?W9A"!_+KA*-Oj=.GH5+r\<DeL5T$)n<):^1*iath4R@u!U8%:a"K:FI;;"dl--SBF<,j2D/+('"J\DLsu`:+ueGMoa#=Pi>kNFl3'2J:S*c"KQAn(M)LP]-aFm4Wq[[`?U!18SQ(o7<^*gVS@Iu#%m:L[joabeY*F^7apG.pfmg%d,8J5cZBeWj2^Pje]95;VTK`Akq@MNJN:Jo1Hrg3P8\I8E,^Z8`OX6To*s,ql/8Ug9GjI^"Ghj25p%>P):-8=o=cjPT)Hq9Ar&J#R7p9Ha6dq,aPWhu#/'-TV3_4bpb(:XZH-2u?&CU@p$>8^j_Oh5jY8<jf$e^\f&I]8?RIImqO3POFfL%QD%qZQru>j@1Z`;6;grkWiXqTX]bj6[=Bkp'U(crP<p`CK[:K-<@NBK.B!F2J"XqEp[UuVJcs^bb*VT+:!],%YH5n548CI2"9X4J%h_opi+hnWVZ@k4>)<+Oo;?qZ5HDD%gLhUNt].GQG=p)sk_G\/\?"":674;#ES?j9uV(pjSOXPb]7\Hb3R%C-)Que1PTsY0VZD94X%MAT\4Q[k7[47kJ*$2oH?8P;ml:jo6#$-2NWHma=%*b5-tn5$G:<[+NEdn3\YOWpb,h\i&tK(RWn%6P9[M,['I852aPS75bH&lU&,%'s)198!-2r.@)3`:&5j]i=[Fo0Pr.:M9,qd\ojP8*S%\-di[dlVEpC,d8Gif6FO4&,rj`BfEcWl\\dXsV;P2qINr>2pII0o3dA];%fH/O[@FTmVLlQ`#3O'Dr)3nkWN08upW*f1kaI.D)"6XLuo2:0/W;(33P*4:3)!Uf[cX1@P>R!j`J&_J>T$(\sM=d)50?-p)a!(?'%oUKV%@,arar_co&#.=E+E8.<[PtL$AF8o$Lj3f7*32LdhYY:YgJIaSEQ+c4@e7."DMCiKq#%A=dd7_Lu_c2pOi[ApK-1)K0'i^(S%N@Zm_`bYe*Esmt=@KjV`4#R/LO(`SH99&1"Q>S!B8hSfVnQr;+Mi>D>939Q8$n^eG*@=e,MX%"'XDplJX=[P/FO%]%gVhB6>:5X\%[BW`N-&BeKGqsdk^KibP$E)-=.B2F;P&@rZg(GuAf=[gi]+\57Q#Y'^Rb-^Fr%h'dV;ih."g:LbOXnYI$i1j;DaI5Z\r4Rqdhi!E%Y+C`.)79OP'%'Z:LTu+\=OYAS7f9Zg9n!a=LDkOs7VI+%E%br6m0>/C<a[R_gs^@l6KJ/[l').89uU@;h9lh?X%`@d)g%NaA%4C.%nqZbT7KN-?e9?t+E#e:C5\Pq6K?-ndANk,iq^kui14Kt@2dXX5T8_9cV/Uc%B<>$lq<U!2*O44jh\T:^piiIY8haCOPdM:/K?L,k%'3OKSnN>TJT\&L_E>:Y>P<"`N:')c/c1($0WD02R\(Bt"o,,-dfXf"8\)9"!^XR11^N'9S#[Enu8_I5Ga3bSg`hOfpQP7)569R?d%>*/N"HBJ)g@6Q&i:oT/7&j0*M[4(N0qV1<H#C33)4c$aLn%S)XRU+qZlj-et&V"0[k-:P9rD&]WB(.[0>L(0=nC7X+0h^jZ[RSe>%_JEZbXaGXPC<lu`5)SHnJ,JUR]S^j6HsF"c-&tXU]%A3)'."C$$7).Jg;M_ZI8Y&"aQ>q"$5DhfPm$])`)WDM[sMEF[6\3HKse?F%^5Ec9At4ANMCMG#d1HN%Mo!-%k)C`6N@'0u@.AoC8-rrgO-BocekOL-n6>[/cl`20VA;SkY=SK3;HI#F,@^Uco9Ck/GGe,;a0A9]%jG@YGS8I1=%os3A$(g@F1W%q^USCe!e:t0&M08<p`?K'tV@Q[_TMdFs85WHFa$\J916W.2&X-C0KL+Q\/Y`TV/;1.BC^^"Ym!i3N%$lIqBJ*,rCkdAR++>r.!j-cXa+rcIbY9V!<1^9kJ>?oLaQJaf;9i>R_%-ZLkiZ<Mlqhk0X;ig2qBap1JDMdc[bp"KlNq!`r=j1W-%Z'oJ]`;PqCAh0uEm-KjQV=l;'^%U*Mhf6-]Cql-Gc?K3I[*epAOR5^=qsgnM9#%iC9/1RFT3./pc#<5fX5!XAm'M5N;mXGhqmhhQ%ldfB=Z1QH8T>jMgQ_(#RrpB@T^#-o_hE/8=7+GnOgIRN`W&"@orl3PB2h&6JT=d49<a'u1RdH,ceq)=Sp%2gtgPJFKgoRnuh)'jJ%R.oM<6;M>e7N=@B,s^2Jp,Y`P\-akJ+V7L9Ga*_TXoF^DCc5JiSqEO1F>H["nb>jd@.UpuhX#^chU6'(G1/bCIcOn7?jqb[rsfsf%\3fM[70M\L6jn5g'taEo*>MO7S-"$3DoQ+`24O'<h-0"/r?[7b^iP8DGrCIfrVcQIDSGj/\NU=]j'&qlrmGVQrnZm!5,5?51k*3K%l:;MlFlV8c5<EhM."1qmlSL<@r`^,(4EV5#O2qB\2Kj'pgA'C_#oo>ss4qM`;MDebq`c\1,JB>1]g^MUp>,)mkL,(%g1MYDO=Hd7%Is+XeBFu\AP`k7(Pn3NS,fL7tm%r@V)(C",2u9e;^AL9is.j3TI?;1VQdU!Z^,ej%3L?dmW^+ebE[k?[FO=I>+_hYQ0=I"`[:TLi%53Cl"3>H^<$$ba3Hmb;A?W+q6%M=G2&/"=TFJ@Q<D86=0kpom\O,.6GRfA.p&L%`>"?GS/*M+H2qI>*T7bnBchHrMd[I2rI\!/N3%TLZ>EP+6\fie]h3?Yd?(f3XTEBm3qd=[;*1FC>gl)-Z"/gZUN+BVme*r3r<$eDL/2kP++cs)1f&+brEp`GVGO`,cH7VFp(:8Y_#;%g$,:#Icn>85,k5!e:%?=ggb&I"H1ct]fg&YhnMC0#GAZkXnS0**U.AV*/_P/d%aBMggQNGBi'#*<,j0kVie!dH6)'+ZsN`,^NSN#%l/)=;1n;Pk/[$u.+0G7[7iS`48nM4%;*3T""1jE[I"""i]I>#VhGLn"rC6W$Al\1,6/f]2_>YTm+muVg8QH`eS[J:.T?S-$YQu=&%VeNuns/IrkB`X^3?$tH-]0i2+MVW00W/7!rcUPZM8(og]"7gC>r)N'sf8tqfkP"la9`2*cn4uYbR?r2EHZ.K_BVB!"[RDU#7UPog%q7@/r0&T6K^&DfH=+e$gm++DVZ&+t2jr!C%ZT1,'l92k/p\O:'jcI=\ccSK,%BL$<m_B@!r^ta(UkcX5CZD&s$VAif81d)D8*W\n%PW2f/^LOT&s8,21[_f3V9f0sLlLF7W[9I';pg7hVj8LF6?iXF#D]UG9L#d,un+V>2f4Mg)oDReN'@S%@aD(O`qpN8o-3)+GH#u69%740I;]))FB<=cBTJ&f!P-2.8K)Y8/LA,c(+n%Zh"82\Z)D4AP[X@8A!J#hEEn#p["hR9MdGt"%dIp')pp\o>!\,46.gi*,YPB<Gl%(:*&^^SGTC#5h-V=u8,8^O3%%hg@4,k(WS_36=FeUXnfs[qjfGq?>=8aE(Y7'J$Oa>"Lq?h%3etbIff%f2XuHUc\q2f5?3I+r7;u%J8D0MlBGi,VGaPh=06]3`/I*f`?Sm6S>6b$j7[i#J'r#%[84m-J[p4&\D;Le$M^U[aI65<j5Pp9&FB%HPZ\opjKAD3H]j]nd5#$e%7I/+b]hYp-pHbqY5ouDZAY`&Lecg4OM`BTl*:ORdK-kK#lqpNt-5KdhAua-UeZ%)5=.!greiW>GV^Y"`T=#_W"RB+<P?j75HC]6:%;m4c"k6bSO8Jf/=D'q=-bVH=,k!>d:()+HA<A-WQ`B^Jgrp@WW4"TIHri=H65l?s(3\0NA.5)"Im\@9jrGFN]EaCT64i@\R8r]F9%a;X/0fG]G8dRUP&>FZQ[KUMOX^\Q`$UjN&Xqh(:B,m<D!@o1(sp<n?W+B^r@keCf0]cq>3:+g<8g?ge]GIt779WkZB<k-Xm2G;-'%k5?<*Y1d^$]19VcpDRA_#a%BenR"aj&n:-8d4X"0`P2s%eCi0UB!(aCCm5*+_r4n+ku]`!P\"MH[lg<u&I;1"*=J2aT$0:((FPXn%?BduR/?:7t@><.LV&]bL9CfN,\n-UF/1rDcXDUHbXRb8_1P%t/4TV)db=Wr=+mGN][d5l8hSQ0D[3faRBqf=WP3pm__":'tp"k$_%6Q6gd#Z+f[5gp>hJ.i6&E=&e:(PQQ6JE!Zd&aG.n`$p0*hKpX)6Dscc^Ca`ZGN@]4KW/X_<H%fEqVLVYnE6oog3@>@fUQD<f"3CN%M.Hb+:Xg*%0U)/\f!1@K(1S2dD`J;Ok9adBqM7l4FL['d.sTGBC+Sp4qV2?kTiN+c>ck[rMQPKBCgl*3:[([jE*=9\CmLqFdfPQM%Ws2IJ;4"*2q@2'rr2YC65=cU-D(d7'ZG!!!&Qmbl]ocb9k*u\jNJe-eG8^1'Bm8m&]&/'3(Co2Jf4/f(ebQ*0nb[eT9gn8*4rQoQ%4i,g7j`KVZ1qaD50,u6g1Ker-g?W_J[0`sUjDgVn4rc>saOT&1f';_>"CNNNSHl3b(L/C$.o&`WPp>QSS;P$ZN4;u:$@GuWke)@n%jI_p$7_SctGQ,5+5Z6BjT07BGMfi>io?<83pYQnF>UXchjNH`D+)VV8;\4eniFqRoWK"np4^C5)3[q(PqJLK>oI):AL1W%f98Y!/%G<,\<`(.E;qn:[=AFC13pVoS>,2IRSQRCO+Pd>&/\9tF/C@h*Ml"aWLk1]JP,Y\Vp[pEO$1g7,C9?1VLEt0CSs*!rbha5UeT\ZSs%`t[aV@<cLApB<#H%X`ALFpj;F5$9O,d\8#k^KM-sM&&edj"mWEf3?\QK+#8\o0<KCORA1tHrLA'+Pc&]j5DTd#4FNd7,r(*YWf)[%,7>[Jp$kLVA=641fKJam8l3'!j0cm&m=Z1"IKtd")]6G:j0(p.*6IYM5Mu?epA/U^,5#QGqn(+tGA&^K'oYCtK@.X+Yl^[lU6g^p%GPOie60Wj1PIPEB3BEasBt1,Y\P>t+i&X/<L[,(S?!IW\:H6/[>jFj.2jEV8#PQ$H(`2Sh?I<T\42N*Pb2%5o8`C2QN9(d;[))FT%Dj[e`h2.eJr+SBjn^.<;FhH9PB&^W`;!n7/T1sT&C65ES:QqKXmD8V:(f@f?Ttmg\l.5G;H>;"lq7dQ.Mi\\glQa06*H_a[jAD?%%b=aA.305ndk0)XK'IK3J*\>&Dn$2!2inE%5NL'_soB$NMHAclY?o5HK8H1_hmI("Y^h6c[Fr*9n=q&8[2t$k]TA^64d:M"dh.cVY%>YA%Z)rDJ9L9VBY[m18D@')p'<J$rscPY`B3oust2L?.THDC66g5;))VpioNZ_LBT!/9:`m[.HSZ2Z("->k5$+QN01[bUY;/6G(6%r-,a-7C.;!`k\84]RMI]fG-`,hVl_BXr0eic03$]HmDqD7@hOKXrs?n/56F$.S<FEK?_)6Ck:^]'rdCfQ3b*\$4X63kk1FPGc+IN%-On$CBr>2;bc!'$bbhU3R\19%PXa94o,Pj`.F6R"6@qMQ9!@&e2Xn;Emm\lj8'DR^FHI;5_ZJNO]K<0@ZMRP0+;+<Ad>8B:;Rt)3%",_neipJ&G31<+!n7R-2&mE;_bSOF&_12g:I=["`m#mUs0$/s[9-T)/(c[.8";no_p-.=pBSpJOKI[)4eBMUTH5r8=K,'ftfAs7@%gF<kO`A,3/`)q7\5$rQf>H!H\0ATq:"P!t0ce\:NAG?Ga.=6Bn(O>Rc8pJ+^UK"%2I$cBijY:6W)D@"o%';GFE_O6Wn3.jP/`+n6%$OjeXs0MZ1pS.9pCXr@9';r7Q)@+?4]H`gYh;,X.='hIqjA(7,R?>u9(^KD1WW6uM!X#0A>2%Z7oPt%u&[9QaktgI>qSdMA.a/tc%bceeS<VWG)/&.BLkJ8h7)h,#mY+PAGbJ3GHO6t&QeQVdXFM6g!<T[@YN42JUh-S>W(1p<>g!'BJa%@\&G[kA%hVQYTVr.<or:eWR%B&V[JS6;'d'WJ<_4c@GJR8WI>el-l"Lq3)3[XRkUVJ]S;A_\,p2_0e^e[Bb&8p1,4g4!k&;V>r3D=tHLcoKn;fX#p?f(R6t^=p<K%/h5\h)l\3`]frL"(0=l(\Y@cO<7In`RYE(W)V=@kR>$QSS]mh9BP$=5nu'ha$Xf7D_IHltjPE+iR9Y75*L`9-S#.d-8-SDQ`1]jC%:>>?(D5OU8Z9rtKoi`SLh/)fqaZ!CC^PCGi,6CpgVRHi8ftFHBC3asZqOV'Kb"QlMjpO=f/!X,KYFhBu@&ka,Vm"8fg?%0kpHDYB%!(L8\+]5#Go/GBVZ8@?:a]Oct!n$mdUWeRlZ6$=J0D2(Z7eE[,s4'=E+^01M:25\Z&5gsS4mPuUC[8E@B8[kJ6rt_4HS\Uf:(Yh@%pJZNUp3Gra%ML/e,*8(ideZQA;.FXh>5i@D'@j8SV!?XqY99R=Ci?'%=iqf!+.NJA<SEmXmtVOHg"k6i_SgfX]mEV"JS5O-Z;87L%QYKRic_-/!gXiK!;eqW]n]Zri:UN!"X,2\-_=_'l6t'%Ip[5Zf(XH4HF+0iVO8=/#[1Gn$@I`\<Pc.a[I6*";VQq8KW)q@Xm4HTW%Jr(P<&),Rgr^%1DhTX]]*(2WK7:c)#grsA?/#]SsX4L8"Q4="R:/kTFWKU->.#=g$]t^a[U0s1uD)EZH+0C/n(t"eZ[IA8M9QWoW%c89.XCCa9Wa1D5kKlu,#lc!#QTNOM/<pp=Ab2#S<7J(1\g,BgZ+?J[1]%q&[OdaE:Z=_/3f)=?m=pRu8dep%F+2Wi"V1Z=*gHuZP%+_5f2Q8\_a%o37`ShA?fTg\VnVlCFtoQF(mIEYD..Y2HmgMS"fhW/8NM-eE5?:0R@^AXeWQP0NPPjF]XZ.E+b-G$Bmc`8!8X2.1c%]+^l+0-7SLqKUj-D!R4*\\;,T-@2msH$oC0Iih5Rrodk46PNImAH,p#okFc[4%m0R2&Cn%*rbDO*ncht8G$n7&_Z6l[W]!To9g/a%fB6&nrGsoZW-,U0OkI6OX<=61?^N71`OJqEIP`,qd:Y?"))SmnrRr5<Wm%QhDS',a00RQ3'nPS#Dl.gXo9IHnbI`gJM!Sm.CC5FU%kuC?_^HV+#Ba.<(3C7iZ>2F6<_M)mrHn>Fgo9^q@MeJB!(0Oj7I1Oa$jm<A,&7(Xs(0s?$[tTicpk4L(;bNrM2pj(Yr3b]'OHmIq%m1pXXVSB_\YPm#O/8\:Z9>C$=nP6G1:M43aCXaC7O*@:9T2.\YQhYXJe*CB3k=+%P2t4MpK:YuaO%aJ;3i"\!KB`20Q9P8r0Ki2@%97CE!pHC.se(39l<@SsagcXFr\dNq$.<?k4iD8?G%l=-_7q0JK;45.D$*Cm*hca*uT0=@q?4M:=-"]gl9tWT,LX`c@VmfaQHfXG[%R4m<IqgABkq%%m':Fpd`54>)OR)B&t?^0`AQPo;b1Ab=tKKm.#0<OfC5)DF6+3^_2g4/t>SaFe%*uE)^YFqdm@\4am[>2!?W4B[/%p!BVKMRI[CqXgWWI(CCPZ0BL)cJ;ahdn9/g\In[[=';/W_^/@--r[[QOP9Q><*>c%D-iZ:p,nm1qpeoK:J:Kun#5#*HeOo=#!L":%G&D&c\\g^/f5ER-`2@9_-EIVKMfU36@:jCMHuUJcc)QhN`6q?D:Vk2_PZceLYL1MecP_,k!ERGrPYXp@EJ[A[4U'\%>mq>R6g<,r%2OWCf:+.p!a,>$tOL*pTYr8Su&E!F3M]K/]'1PpZ^hV,eA`VB#fOVAE5nngP3:nO*n#ObpAD8F\YhWB')/GAur/1(A.tjiU3I0Iq%hMUng-O\Dj9dijq"oXQNM+Z=ULSmF+l$.aco-L?;5dW-VeP<"FU=S;cWBdgS4[$oDp*SZ8-c3O"H3CnS2>)7<Li,(U7!$tR7$2^q%PougN)ol_!Vlcsh^p&!,#U+MB+5YG&C/8oqqsLoP[6l?>=?F/!'4&`@K8ANp(acjZ'.RDVOb=>NJ)ni(V[],Xa5:S!,A4'!;u_e/%8]j2DJ$rh0)3\D<Q)c.W_M"0'hl,C/Ha/F]HrlgS,#WgH50\PfUHQ]r=22B"\0/&HDGZhH.i-thQPTA:>%b9m7[Ns2?A4'Df#b%9%K_Q-%=L5K7ra6eum&f"t10_-n:fc8,:LIS4P,06.#Am'544&odk6<e\[6oh],%]EjD&1tHjfJ&nia,d7OOoUn]F7cJ`9'8NXtuBi%O3u9f=Nl3>1$K7Ah\2scL"FDpJd=N&QZi%<(4Uj,?H08B@IF?(Pfcn$*ku?Ll5hK)1[EI!O4\[YQ!!7mrV,Fq(OE=,iIeG=[7O'6%gHp\sA.l6[J&M'<.9aF)pY_jr^:DVaJ`D(ug4-=>:Y(0FIr17$`X7Wu!q4!e9V1#:;iO/17+mnCSU#]qc.]c+MO&T=\`AlgF>N"!%EK>Mn/7nFmhAoKrDUXg0VMEIoLnBH[]5,r*H_YVjdhN%Bn?J7g96I/;nHk?66cBXU#WE-V"nFrja!/3GXhA%_O%Rf9#EMIsb6r.?%[:`H"]eN(,eFea+K4mP<^MN:3"5bILXH_n3[&S,9T;K<j;t^QqEmYr=6*M'9&pS@"U"dFHje`W:=65N]>3O&8WL<-5%1EgV:n`K'%63U;4CX91>h/P7h#D@\?/:12REL::XguE:t5NULs6)+o['F,Y&[>CsQaI\od(XD+Gppd/;Tt:at`B]`/[^$_'Tr^?7"*Gt%@f(;C%#.Ld]XItC9ka02O^_pl[Ik-Va[B8Uu:a;)LUZWRoUOQV>H!q:j1@O[pqGuf"Qcb%$T4"5hY^2uQ6)_ifba#@17Gc7*5B:6(p2=(%%DLk3ah&`Y1@S5uMe[O=Wg,gm_M!FPf2hJ%.qJHR37jjOj&=18e"^rn9V/s4#;?,<J*hV?Q=@E&aY5W3*4*7:ucrqtl%rND;NhQs!%N"!d&>N=-_f5s@GfEfR$UDGY;8M%lb)ba_%h6BOFZtMftXQ)?t@!6r+fD_5j#`5n?+PuY^+A9P7&3I=Gop/1\YR)A9rUl#PNQTMH%YGhX4A`E<RbR;%n!Rb,;p\'eC-\r_Ol0iq-H:7#!opf_Ve0]7/,1nd.N].;"MuXU29(F973$T#9+I,YN'=Vm?(aHu2fT%'ISsA8^%aK53K%AE)lO/h]W=O>c`ChiM`pBem=h"RE369#p4gB!;;6q0_["NXFBTBqXeQmAUR(_7H)oV@AV06aY\0u/)pS>F?;omU?PE8T!]%`*!3`M`(PsK,=T,qcrH8eA@WiKcVdcQ_tBS^Nd+Dba8@9!uliY$/1`g`qEfN03@Rg>KPnCr\Z]AnKI:L;o^49hZ+1G>pL%`^^q#V%#->p!@C_0'3b<dTgd?J@42_4;Bs-Yt8;%+[mDPs.KO#X^ja.b\IM+:`5'Pi^HYA)N'pK/Cg<:s>,F3fq:,O$0Y(rdh)sd(_[sM:Z%h/d.DJ-3-:o\`@[Z9a'hn+pYH+lY\X]<F#;m1E",//Bb'\6,BD'VP,HY\sir0bR#I0EnUMKA2[Jpa51E6t[G&6'>Vb]IU\9?0ST`%P!F1`^Tu8Bn7e!'/]/o%FoC*cM:[QNBon:?4mtcu<7>l]9hT%2>,=C>6?rPokF12Zo?M_N2(7LVnj6i7OTo4l4KB!1!*lFpWF-d\%@JZ[F=X4r!U5RO^AA0U2<m?Gu2kX.VQLh3QL)kIa`(`Ee`1*n(Jm3YGlJ7%3DRRI>3'oO+GUoHX&%t8G1(9TSRhQo<Fe;EAr>%HY%-.R7!KeF\(l&HqW"H:,=/B!1#^b`i&"il5GqZG/lTuc$dK;%-jU7DW^-WlaYqjSmZ`&2Ytcs>%PEN^!=\iTV.'=b1JA4h<d4ha`i%rb9SB*%"(@+kte7(9R=no3&HWa*]@KmS7NEOC0u\@eqD-S%C^'`M.W%n-I_"/D<+nBZ#0h&=6.,d3?UplF/KM1u.urd+GRIU+KOu%3M+Xm?88%-rLekh=_AhS&3+^c*TgKjj*bHH;b5P%%/*T_5qdBg&Zp;*Z#P<)2dhD)Es8&kM2W!jB&JXR]<!;8cB"\O@q$[@FKBM,%OVuiQB7*u\K^ZT$>Vobm%(V[IpC$V_k?-1e7KKa'*.'E73#J7.,7knI@4,&/*rhCL(iGXOD^'CM,@,=CZD^#hd.srFfatQ0hE)Z#%fOFKo8L9u<CD/(H7g'$"nQfF\a1j"#giHo&N[:)&09\#j;qWQ6\bd<#^\?DCe8)&Mkd)GjM4P*=c!hMc6N95a(;kAdp?r#Tcs5e9%pBR/sn%PNNTl2P/OfQRVnBo!L%'W#-!CFPScA"uu$.!&M@i3%aa/@E.]+J<mMDE*d&BE-td+ENFOctjoX+<B=dP%;hq^U"WN]#Qj%@Yohar8J@^A3O[kLRh<NnS=4K0+,fX,!OG5R7aCi_1Too/\rmD;L["P0pV=g/.]*Y;`:iEhr/3<PFPm!o+etI!%YbaL)3%)1;;5G%J1Q0D-HY*RTLreGWTChl0dq#jD^L>hL[>P\qslIuVb^-CY*#n4&)XrT+q[J*B2<ojK<JhDo(d)r5A15'/=`u+oAt;%RDma\8+I:X%`M32/R<+Xh3HS#?#%l6@[fhX5LFtW?/sRGQ%\8ZZ.t`jabL(CpU,2!U>AtQBFC_J,A^Jhi`Q1&]d2@$_>B&XC\j2ub#$k'6i%R05%d2@&mh&W9Qcp_Ton_CV$Ep05RkeN4<,DXQ[U>4q*KD-l$c_9r+A`@]?*$GX3"?N-R`iYoQ2-Y;H&5\3Im,DJ(Ju,F;;^puM-H_^U%p*(#1Knl&.4,IOPru3Jd0^nbEbia:q<aeNZGsY4(j6]6,WVA<_jZ/[E#+RJRI@cEn"iG\7OG<M-EA8M_$9Et(?,%Z7KB:('g*c7%%pljOhOfL10a0Sb7m#2>tFNRKdj=6%dd%i[V,!KQJlWCg:<kRUq#EJZ>Q2![1l!]\;UEH6r@rJ/%6.i\&ped-'>g_lVacVeC!_u&l%Qg?WO;39.p`.cJbTdhESXUsI_%j78/UEIE/,aDbS<!ggr9":b_\5*]!ao4GmBB:X=c]d&C>'9=GDfBnaX+:L(=[[8&,h(JcJN)mK%3cKh#5AY1tKGCbYSKMmk_M2kr?MgrfShLJNI6ONM)"K#e0XiPb&'U4@(@#uNOiR2:2^8cna7gREs"`gG>(rlO9gkM&:[gCP(JA\1%@4Z7$3ECtLRUXRX%rdE!^?(A_#.T;Bqle0fR%_7U!6F0N(_ut?hIO^e;IlNsEpnkeZFGTXnj`3>l51c^SL-Cj`8Y*W&0io*p<;[L%oqM>^droEu9N#5`jX*7B2rS-TSE$BNjd\8,`1ZmmLuI;aH'%"F.;3N*kJk!O[b,r_FpE2ChK@j0p-MWpR0Of8O+hl8Nda!Gf[BpJ%b'A%tid9ld9"O!g)uG`VQ8HYo-I8>2>hHVC>T@a_YsE^l!Br__;!^/c70=`onh8sG$D2Q`XNLK-QC6^"4s%7)BlZoD;07,SbN_(U%*"L,*lh*X.o7?hE*GEW`7f8l!c\N,&a-+On@<fiQB`$(&6fqKZ4=\,_KhcN.18Y+T;A-2ZS/dR35T;*q':E:,NCcmMH*:(=\K`kT%ImiF?2`)]lU15>YRGB#212[IEmnJch,,7mbjen<\/eUQ_G/nTS#bdV+6d"?<n`S!^;aPmR+-B,@8OFFW+p5I-p6RZI_*fR3pi>5d%%_FuhSpSO)4As%.A5=93qH70G43MtjH)OTcZM5aRFo?]:E^XL&lii)bga?)7Y$00tP:1S'$0ak%aJ`fGZQhC<]=Yr4+$r=<I4RLl%`#Fquc`8#\]j[Hp3-@$mZ.Z@!b!_lQ96>Ik">`[8W45IRM[Y3W-J*MRl5^90W/`2,1k,%)aF(M6hq'e\5$[;XdTH,"JBFh4W:B\&%$1f];b_L91/6j'46YDI5jMMFoOZI#:>]@.0\F\\=XlVP5i>f%>pf*4Uq/D2J6S_P'>X6(%C!;Pu+3sh>G*Y3Ho!T%Q@iIS;*i?EB%RmVS43\4eJa@8<+aY!N]440J;\;W'u8D=%`X!fp"j?FbA<&QeWZS8E6>k/kILr^6ja"s#T/i_#c\o&SQ?)6D>6#p7U5]"d\ces)n%Gm5G^a'q(Ri@qnM>sZ*[5S]d31uo]p5XZ3GNU(9KFU&GodCaI\G*:BbN&P&]bM.P=[U;*B&M(um6!2!Z:Z?SBPkb'/_7:.?fM_>l%JHn73m<L!sn@Jo1Gf<?o_&pRHe2,^.3Zqc\fi]e\s!8FgPT:_<e\Y0$WO7T'^bjI_1/_m$c[c+L_(nnAa-2X3pGIti<5:8LN)[k7%)b3@Ii#+[&'sMp=;SufC*M:)hl!%N,%P3.<N'1e6*eoRR_sf-:Y*Jplm3nrQ6*o5=;rL(?AZVkMr&sO@(@K);_?ESKgo56!f9ISX%_PIl$2+f?gmmP*UWGp7FTo`K,*OWF5fGidBSc]V^SWUb[l2m;@SfO;"2Skso+A;@(Y-9^5Y.$54A0ZdU7>\Q]0c[oo'Yh2/;qR8G%?Ytto=,'BZcb68/SE,k9H(3Bmmp4h'Sj=)95]>`/\:ris,d\*O"ds-rDd1JEg1,E6r`uMW;]?7tZaJi97\N%FWh->^fD%DunkGsm%;;=(TG"\>#QVqP(YQpL+S9EOqP\k_VYVbM'cGka_4'Th^L>UcurE;7*7hje$DTa\'#@dI2+KE3$AQLYSY[k5DL^^oP7($>4#Dab\%m;+R@_[\<LY([I9MTi<Z>-nI-hYYN_k'IS8DmC<e2=916-mjJ,qtOcuP252H.+.jUjj1.>4(E=%bP8dZc*4goNQO?[N68A?T:H,t%AbY`^2r<h.)0V"<>f'iLiC#2O[p-^QbU_VNQFcu27eE$CQ-aKHjRG1/k=Yih+'`hH&Ou/*5Iqh2U%s_hUa2KlpPf/SPRZF5GLJXE%7_MH36TAqPn?r;f/`/;Yj6:aZR>k2*4ISYkE>P>r;>41@75L3r-26`\A'\BhI$7fspIjYkES_rW1a/$1jHu::-^@Wo&]ql7_ithi%39"s4,O^%"ne/JU<*2"`50U6W&:<(9pb;[_"u6p7f0C$C_Rs4soIshZ9:j5p#ifKs&T\Bn5O9k35`@([/r2m`DSkVjF@!HZ^,o7_%cDCsVGd4k?a-TL:PY7A,c'&6@dtR6lN\d.WbZ^#cRr5%#FlI5KTZ'EO-BFNgkAh2K/tI@UO!C,H.$lR-_MjdT(US'TNBNa`.$r64%HQ?<K*H_cr\TI2FmJ+!OJo^+#*+iI/F@!TuUXir"V@25q*HsDI&5+I'TCHI@"nc6\RuKq\V@1PCMtWBiaefG4Po:3:Ho>9I*SqC7%l+Er[j2WINBV06/M'^6?9.mJHZKZs]l,`;I34%k$Ep80oar;Xr/dR"mB4TM.3^G=BDFmsUaRIl)6,%E_qa.TNZg!'^l!j&q*?pt*%W.uSRd62"uS_.259:'I#)(LZ"kr7Q_n&&bd"Z=Bu:A]UJl.dgY/-$nM;V__rJ0!6+4%Wf8'XLEcM7]W?=Y:JQfR<3=DQo&YO1VSJ%fXi!pI<CD89o-Kd/nrU7It#Cc%X(r7Q2AshL&[,n&QcNR',1X^M>@'@Y,Y-`hW_e,2EXnt7S^30JEJLs&PRm#V&5.;(ba;,cQJG9%?4j<_]0/rg>b//^SpB4Cr[:>TCliH#_JSl3fNo!c\a,O5d,tucYIR:G],9e$4(l2o?$)Dm9e#Ft]>;c?%suQlk:H_N(YoN9FpkhB%0)h`)OCJV"?$"'Kb/fM/]UMF]fA%[#03i..jN*k&IP,9ho?5Jc&GHfJ(8VX)h4;5VcJ_\r7ZCWsNLWNUHLc$*Zdq*uDRcJd:DRSd%j:'\STHbG/B;NH#FA&r!E<Fg8Lb.nQ<$\#&8MJ9WM6N"7c?M.&i2*F##Ak.ApM:k"HIjf;-A]X2"s;b['LJ,L/97K6:^C3e'A_(!%bH^.J9BP9-G>(%Yk/B,s:+aIPVn?taR1N0h+f^+]8K>c>PO+mZYpS%nH4Na.HP9.Yj*E3uTF12W!qIk*A=Oc[P8H+M9bX3JpWaD/%;Hu`s\.CcCQ(.BKkTLa\picgbZ_,7!RGrY`EPQo9&uRK-AGabW&HgfrL`RQafHcKh_9_Z/8'?9RR`H%g`t7/Hp"!B`16/gHOR(u%%S9TKD4W]Z2(_1R8Sc>;"aAdnF',fqHn%4A6`H[-2kD$V-o.('ViJpeB+,4:9iK!8-K\pc.a=n%;iGQHTa!(&2!cH."I2Mfu\/XD(%]E-U3OZ2BU&&SEd\0JK_KYJru#+7Ds,34Kj\5P<m'5K7rO#JAm@s;:T\2h:Y\$771hL0Zf!>tD$[D]PM7qY",N$0hp@EFRZjpL.*%=[T$KiYcJ+`2og(E6Zc*mGtjkW&'<`kI3+h0)11[d]>A`3T+.LU1&:(:_H]7'[E6]p(6L_-;J#jDD5=a%DNs#T^='kjc/Et,aS)Q%k(##)W!n_k\g>p"nERMOlcQ9(BhVAq9TS#VGns<r/B@Eun0B?N>93,M#.uQ#Vb.E^(l$ke=3?SQcAm_omX6$]NpCiONfE([--pSE%*rOPfiU==g*m\tim&%EMjg^WIL!U:!<7ZgU/B?:b$mS^rHn>*N5m0l@iOVMt!J54A2k_fh6=?r<A@uc_Ss;P$dUlq^Z96gm4Y<k`%T:W0nTB6UTD<mSMp0HKSlcRH*7%$_233Xo*N.#oHi>o(nLdYPEE4sAOlXMYKjh?LeWH<LSabLQ#P/>];]&-:VE[Xea.a<ZYrY^nu%k"4uI>eR]^[dM!G%O\7s24Wm]jNY5j.(9'?*k%X&r+jqJCq5AOZsu6]+0IP4:3VDueuC+@0fQ^ngC-YJb=18I=7^&'i=i5OJG3*)%6\lYE=m`Hk'UB:((dW7Zb&E=VmmVH8->u5,>2-408h\R*%oIB8_U78SMf>DUb'DOnX&JM0_>-Q!0YcdO$_DB,@fDO*8P4M1HCA%f%-7FWp[aa_Hpb[h2IB@cj/NDKB!E3V[@eh:^)(aa_8L.7ukM?Xt-TsAUi"iZLkgUqdKHq];L\Uf/!KU98ZW%8of-\/@-#%*mDt(*o%_*3f2TUY:]<FD+,bj,R26H7+22!+dAnuT2$8#qebV8\tP9VP;kQ+5ojF/ClKlRq-F/[hs@@*3[gCN,SY(?]ddTQ=:6/-SP#LDV]3%Lf7KARt-tT4Q`Ya[l3D-=-\nXb]NN8E:5()0T=+($an7^hu.Z1(ipB<B_`TV@E&jbI].3MJ*?[[5VJ'(O,m;\Z"<l1_3*j#G7Z(C%f^'l.$#M/C@"qsp"DMm:iM&<RTb6_t/%ri</?aW-NcC%`Wt$0Z%ZBpG_Hhhe2,GEg<qXN/#CZ3*4/Sa#q;/^P@<LUK027s-Fqs\9%ZhS`4\5E@fr3jDt%6CIdhhoZs:R]C9B6^jmP4orLB=C=C))Zt(mU@[DY^V0l5VY<W,l05QVGp=bSg*%Q)*/KdrmE<K9"8FZ$<d#7%`j'p]N)W()^Y*ka7f)g/7m[uXb;4sm@Wj@/P??&SjZng\fBtsOk"?L#?-Ee#URj0S%$:^\1^DAb.L46#o^`Wa"6f<q#L3C0fQg4-%:JR,XQo#%%p'14E'Ed0i(O-iJE>Ds1*5LM,oHqfa9IeA]\MAFG@+$%1"Dd(S/AS&AJ2+ZSd91u=KH#EA]U/2O1Q&?RK-.Uf0349H%ZF5p%aqse!MXaro7kDm0%q!KB\M*3&0'*JO+*l(sndQ4c)u``!n%7(uk#+Cp/G<S?nca>38`aJNps,7rpif(7G-Be2mtMbS?9ch*%q/>pFqV=u>Hi9ZL0?.Nc-be1cZ>$Y?T2XGacb#k`h<PmSDQ'hqlPFuMhZ3J;,NM/oj<P4XY@!C/c>WCIggW0r6c24!q@/Y12>Cn)%n4^"$me)LPeSjOG/*X`rUW"gKhWkuKFbcrTiEj:_oD6R(W5d`\QScHt[!VaVj2%':'<'#?h!;uopOXa'."?&pHi9[c1+Xqm9^2!;%<kecWr^?MW7F--K:I3%Wl^.N5^6*Kn6Z;W:l9;q5VnCsbpdQ-P*"073OZQSGh!5bp/]Vk7?Z^T$M851$Y@$pq!q@T^BnUj3I%k`=%l5/,,_G3h\]meA<q?:L?%=YKfZo]+kPr>6+:-)I:/ajkX<kj4+I`T3Od;D5-I=+E;lPG(_+g1PE^Xk+W9?_g3M=:+q^==lGO)M88%LITdqIb9[?iEj:_>Q%IQ6&&hC]m^&qV2[(M>.iB=W?$o/f5EKa4R'P.8abUXrEd8&>Q"c<O)N\0j1ULlfR*SP=M1j5$dME`r*I.2%@+mkae4Fbc?hApg^Xmc?p\I>9l5-dQ9qDb8H)mQVF7Dfqq@3)JVP3JOo;!UWp9TLgO)L+n<oe[VUF3t.>Q%#SF2dS?$OLIp"#]_H%b/j>R-$a_2kkFpBa0j]HEXdN%?VpS9?Y]hh@RJu;(VOW4-\k4,f.VI'mN%S1hWkt'Z%OJJ#IrA=iOX'JHi4SJ*ZXu^5G)HL]%,-#%1?,ur:<*Rql6j5]I\_>hU(_!7EJrY+p\I>IfE`*/l!?S5?f'`%cp!EO?GG^KKp]=O-,.taqGoiOhO`-`oj]NV-cD02n\O+J;@&X0%DF,]UP/DX<j<^[=>Aq57.UlNT*[Wsnn%U5)+E>f(:IHNlL:+JD&Ss(BfdNh&pFQ$&Df``cKqjC]FRl,@/\9j*G*Uog##-V[RJGUT%.B.:Z@?Mgr:R.>/=PLqjZ`Qp[jgLq`h7)2iP$%>4rcLC`]D.e`g&0Qg[U0Q'P@*4:7cpjS=4+LTN@AZ=]/"eRoQ?mXI9bZuH<ts'%%]WV+]mMc6mr)o9RjT<@lh/^/j7;T=EN"@mbVjoG>o%Kbq9R"4a^-IoZ.*$hC,a^V>@3HR=15`g1(H+,L[-`plKjh!rI);aPP]fu%][b_[N@!Af34!\nr9X&"PFm?Wa=+6!(\90Bb_B*QgtS'n^L)/\/S"XQgO6A?]05HmNL/M_KCRaGT5Td]<5>j9e\^<W?JW(<=PDN%%6FV0jL<J`Gal$H3=*Ej!c2OJDI/2:n1O7\oq??;Nr-jg8F2a.;h&p-7EM2IfVn65W.MLL`\(TJ/j*:.Sk%nn7eLdGCR9$]Hn&]0)%;hnW+?'ZJ!q-N8uLN$SeTS7G"1WAY4=]Uu+e.M&Wm<7,DT&G<jG$O$h<>nX[F/<ij,r07%P#sNGV=3tL[;go(cRdmjSQm%fV>A,"%TtdnF;<ZPsX7kVpETM4.I6_7WX_fpKY3o3@ijOtp7X-Q"(g:s2k,^]F@6ua0ou"f?I\r$-<W$\%pPO<aQ]La'MlU^iL73JEbX9hH%!a4$Vl.94REfpe.=ZD?/fOo!\JtATChrIo[4%:t[>NhtFL\#tW_:e(GT;r@p-^r"l]BElVc`0tQeV\BT+gg"PI!Hn4?(Kg.fo[(_%hB#Tu`op`(Ht;tec@^E4_>a@jo3bFCn6e/E#6jW`Vt;H8ObH;0RpV7aE&]5^c=`bPiPPih_5gU\*oukiL@Y&fL'1GlPe=\3<Um_O%.$GrD@I%/!E?GkDqKD,:<fj-ZdM5<!>bD-\hH=C#s#ilsdIDZ,(Vp@8dE`It\aM])kbAVPY8$OCbrKqF%-]:h<cV.7*::E)*S^mU%8kE?d7'D[BR#8IhWRc+M+nrV@AlOgLS(=A]X>\XiVa%Ga6mIS\8_p_U7VGR)K;8+qAE67-/oe8<q<CkWGWrh=<-g@p3lSF7lOme3%>M6Z[H`0-jDYKCNbLJ]?QSXo-3:`7pRofeImm$7o39-ZdPW8]"?mfIj5Th=B^==P_(@a=/rmNmuD=^6QL?[i(\c6!h_;E`kqm2=p%]]r=(&W]/Lno9\[f82'soq40p+!KFY=n8[Q<Ec5)nki=*DOqGko6'cb<F\DX7X*SWXKJ0siB5t\"Zg8N/=$[OQ0G-sf$&D^V5!qY%-1,SUrM&U[nhKOc*`2Q37'5h5(4\d!]-;-6*_514k6Y,G]Dnm?(im7N/!qF(NH+R#h(8TOp<GQseuuI?hN]q^E>RF0_6h6d3lYt9%CUnP:e=NdIDBA.^k*fS#21`$G=cr8f6.XJ2h=(gj\u`)UFNoGs4uHSH+7j#rD-fAu_=o[H0>((#:QsY%B(N^YbK#s//L9+.EHSsN%UT=`oj`#5rP2Z]D>ae0[im/M[^]gW;mneuO$"/&FbJAb!4ROnKlQHf/L$aJ)_^sn;P.'o.Q')dnRV!*(B&Uu"Qb4HKSfFM\XP@Rf%6XD0P4-\j7%;[G#20FM0e_3bad\$8!g3`>?-C=Omb.B0@#o,La*Na`4SO:E`f'45jhr-]c?g.)UBEeSa%MoHIXj.QhT82XJ]\#tj%92?YK"uU4$-N\1]m[8"&4'3,jql'Mt%h<a#Ei93J2]!um,Ek4%Yqtu)q$m,ObUb0m6h3%BEk%?:\9QZJ//Dhm1@r7-VW$cRB!J;;%_+-YpE,`4Ua`Y3'R>&l6%&h,K=(8ai6$@'e*[Y4i^4=@3ouh=kQf5$n7]#fXq:KA/'qR<9AkoLeB?Pd:b<*2QDXm@GFoi,AC>Mh]%0CH+\hQlMPmqr1MRt,2:]fOt<oWGndg=tHLlJobTAF\l+A\WIjeu$U)J+ZR@kLIc2c]k8P[T*NgXkl`\f0Lk#*3Hgh3Ct\".fZ+.%9J3<@nhY%UbG1uGBL\"qE3"mNSnd*s+(u7&#LAKU)UR(s*40+T/J8Pigls*V]lIo[k]l,OQ*$?prFl7/A'0#h5a5Ed@+rcHj4qZF%h:lF"J+D)@rEa>(-P/<T\Q\?3b!@6O8KD"sJ"3S7,$3j%0$$81(MrMgdMHIo+,-cMaXfTc["#Bd<,'!`Ia$+:Wb`clb8Xg-6F"2p%q;/0<S+7n39ki^5A9^oHA5pk8[I)u:83ItBD.NI[jh8D#M_&>g^8EcYV>!4a8")P2dp3DYY%[SgPN5G6ddZqk[:sVuY'hnu1K25g%E0M62S!dO'/:;U6_2Rg"P'IR$=R:Y04O#G<2NXc+gK_fN>)NojCaSo57)lY-lOIZ&:ja:NRW>Oo#9<*%ToOF`d9n'8bZlu$mpGF`%mSk;*B:6o+EV,QAYRbSZ_AYPBD.E&%M/7.Zk(9>DD=Q19M3Z;up9O[=(Sc.o5b!lj]9jd\!Zu`q,opbla$qrP$&gq9PQm_u#G8o=%cTclVAXHV:PicF@Hgc>U/F#NiM`b+CC+_s0S/IK1BUaFV=Q%7=;9.%r+766@@TUW[NX*l)@ZKl8i/4AU]VM3sg\"upTd+Cg?[a"r%bNncrDK2A`1kXA)rHknjHTKsWIF_Q(FRPi_o]Gb_<;F.LI'cc7p89g@%[GMC4fPVbmAZ:ql$dhsHhmP]D'>2#b\Q#BAS-@.b7bt-%0Cp[Of4*i]FFq3F%PMEAH^4F$S%%D1`FX8(@<Xq4lSEJAfCm=8V,j)-=)R::DtImM66BampEf;?'XTW]G?h7F8pP.Yq%6tXciZi6%V2%/!9VD2-cCO/>dW^ud61e&(kOU3jaA79Ohoct^],rEBHl,Q,m6nm=:T<^%Nai-;NmB1#R_+?C\V^(QHc:DRGYiZ5Q1fH8Z%5$6%D80p,NBCt!=T!qfb,Oacl\*+AlVF\%&UEu8cBY1M^8=*g8*p!V\HgA4PQ?R;mDq#4<&T2+_(YW>AHQfB`&jqa(^Rk`_..HZrXl4^%f3ce!qr7bt9ch:YqH2E='?0#Urjf>?fO$p#aOWPDGY[ul$N9Y2ijO<-8(5`%.JbJnQ_rO!V=J0QOFC_h8T"O$/HH'"eE*^Nga8S!%7\cKr)O$^iC%Gi3F]ZkX1VN"OeMFK0Zh$iFbXTmo`eo(mjrt2^RIUJjI!J<D&&o`eT#r[o(9M1:A7/7)bBm1L]COP(l3FUEl5+=t%SmN-'oI)=+hAI2MIN;\4;qWm[_*TSL5<4"]%lLjpfn"n0ONe6>@jC2>:idk'/809f@)iHg?:,4*#TX9k?:,2TEdm@Y4?qslIYoX.%PYVu!koFBuDe:p`o1c?U=a7%:_U"Xo_V:]0Lu9;j^<&,5pPq#>Vr&8+W)TE0U68[7[BFlFDk*Lca/_S.f.feMK:JE1G2.(p@3[$P%Rk)m+I]NdY?TIIFFiZH2=Q1#\%7e)R)%.G1+pQUO6\Q]h+s.bV*BNO?qU7gP`s0t:=G_h/o&JJ"$sC850-u'$"rjdog(0(%Tcl;*%4^<B9e`g,\f!R$@,cTK2he)(U-"s,AcG@M]o9n:[Hfd5QFHYTq!p<YAND&9I_HY,sr?9annk>fcH8G"/dC,$HF"f\2cg^1kQa^VV%Vf9pmM&mTVfYprWRCau@Sc<t+\4XWqWfJ%iD0^]Nj+JOg12S9!q6@XKX,e@I\SABPqibE0j)54LI'o;D]k8^lC1$cZo?M82pn<_g%h2]h!r+*hU&X"7&Ghh[?^\hccj)0XaCjrbOfe1UsG!,3dU%\6cl$,DcJ$S*S\&0)H+74=.m1=gj>K9[_^:ul#3BtL/^loF2cImV*%ZRoG*+g`BT;C/ju<r9,ago'des4\I*-PP1TBfsG\YF\e[bV=R7(.mJQFCjp(c_O1tlrb!?0uMA[0B;q[Tm4_+;1(SMIgJ=&oSp.,%ZiJ!!X4NuhlL`kSV[m(H?Ame#Bt[gFU/6&O3JpaeJgMZbRGbu$jMZ!0ECS&uDOQZ10Iq')]Lnh%BN.lCm;%_K5:5OOi%I:t>5'V1%T[!7T,Nf]3\W+eC)HI7<!2$qdDY)V2;XOsMKipHYQTn8N2uTs8^"b_7"@acs_6s0GUKQG,=.+6*6B9N=2m7.R;>E-I4EYZlf-[jV%38*c/9)1B/fQROUAr%kChX*-==85rHH]iHfjc8f7;VFeM)lb$6lq6Ds#sg(\+TOGC_Adjl'feYbjkcs]JibRd6tQ2kp;dhtkF/B(%:a'ciW#NK`B;l/OlUNQ>/G5O^:m>ccm#kHo^l.&q<;/=mH]AB?n+.3Bc96J=`f'_c-h\<4U;Z3A#8Mj]/W4rEEc_ki#;a<4'!@MO%?c&@=pPD`Q\qj0.5_.IO+pr@UclaaL#k6psmdWR=-0^591l/:0_0HUcP%I+I*3'n;/^sg=)G;VY1Vi;:LZF"grY]k$r[<`"<7+m+%,Sl;I<n,<Sd2b6UBCS0kUR+?A&@HO<$Ss<uV2-=p7a,>DA.f8?+nFP[_6l&244ff_>1!-L`E^uP6I<na'RQ-]-#1VB.(E;IaFT<Z%1A6,E*5.TFbGW\3X`5q:\K"[7WHu#;n9TNO.@3lO,$L7)@/3(.,#O$W=Ah<.M)mQMLsIBTHsF_i-j1P0WYqOk%G?[o*=LqZka7]p%">b(1VL8,rnt>Urg^*%)Q;<m1P=f;ECLpBb]JK+`!o"O9K;b&/,6DK<Lu+NZ1NKk]nsD";7\1QB7`J*(`h,_O0$ToE(>3GIT&fH9%M4&\?a%)H$F51AQ@&G#jiUq=&0.pt)+!`$r>pg5`J:GF/>A!-/57P\MgkL.h0ZDp*?a/PGSu4f>B#-"Q?DKg[22^Dfq,3hr2=3q0%9$Y,;0=GKTp]J`)6q>@oeTp,9O?'aM>3$44N463c!e6k</\`(S"&H?;M-Fl"c>fd2]<0M5n3EYZ[?Ci<SjVZ!%VN/b3</T0;i]di%0_=l/q?\\pIZZH`ZkCE9:X?69&9[cU5h9j,;s"_[_1dM"a_uK.>_U/KY6'`[a=lj@csa\">3"3p7LSsOY"[i^9Xk@oF??T!(,b<.%1EhZVafTJ44$eF]c"?rtY'Bm8Hb[5&P<%b#E+Fd:'#=9(JMreKG'-60.1M@$fD_efc)0>^Sn`)thcR)$e*j:1b"_gOZIdB4Ugm0N%V/lV7Ye^rJ+&o,UB:@2go"+)Hn6Q_:<6DsJYYr(aY^GM)K_tR/#N'(T4XBkM:@`/;2q@`$&JUMl:BUR.TbnkYWZ_;1!__jkOdp>V%&hr*AioH0WW+,1anl5UUU4_FbO7"9*)WGp6o/'ZSY]C<obL4AZ]PnkTBpQKuQ8FDIOLFZ1W3,=YGtq>0c5hI<n'T2K,qQCkA`oO,%Q90?A!2]p=o;h_0EEu1JbO\c;>-/cL=M.^t?#=D8TeRaTh+sL3=FJC*_c3,X`K&/).t[*u)G#-e#&nY8K;SmHp[8[/m,C-IP5Y`R%Ye'DD:Glm!Q=dn!RFt]\;)'ak2e[/9cp[NGYt<1gZ:VOn41LiJgAQKQ\FU%E*^FU'k`[s)*,OQi]Yj5%9jL9?$"lW";2K[NO3QfT%X6RtYQZ14oA1Z;W@PP/390)5("8n#`,TTN)ZJ.F4[F!!?4dsDoj<X]o<<IkoR&;h[ZH!>0[;tS(_PTm]J0][c?8(g!q`ejFe$=q>%V-@QCE:Vh$FH=$%YOAUc6>AM\..51IH)of)FrQFI`ddmIp<32CUX`-nV$k8kda!lLQQ%UFH6\D&"Oiu:+bi90-lT<'?dRam%mXqr%q7"'1Ys!B<=tBW=Y1L=a"`io%.aFeW%b1F1`sTp)>'PCDK4=rXbl%4`.:`RH1Q0\4!jc@oqj2u7m#CO\Za0@*D4?ll<#<Rk4moef%qHR:h*:@_2ftB7YHf["iD;T"CQ1!If<5,><T2esNX"QI1Q8kY(^ZIn24hN9[C)R^T2/):Z['Z?k.U*(>kCd6TE$"##S;]]DeqH67%\Za+-`;-M7h];Ld\H@'^6LqB\38PdF;d'%`%%>gs>fCF+F52S'mBU-p>KE*MTrpOB.ZbH+CgMNaTqCL'H!^Z!A\di<=u\M?J=5Y<%Si[.$+UIN^\DHD#H"'ak2#Gq$J*44M^8-6?PsmgD8n5g'g-*UG>/+lh$TV$&1QAa3:45";?KuJU4.^sH\i\0W8ZH+K2,/<]K:lPs%8*#X<1kP^S?=5Fb-p1j.o(2iU%XksSl1FZHTWHg.$L4\TR``@p22m-1mDm<mH#3Yr3Xku".aYaK[hAT3+:Gm_XN[d7YH_.ce5bJ`%%1a?LOh?J/l/4)8S:s``dAo"%hbC[6_koQi6!g>*hhograu`!uW2fJ3,^E&>QponI1Ab,80:$jV\c)Ik)L[m;aH,2mW6XMUQHb?,%M1b*B6.Qh/BGLAu-+_j;akd!uDieF43mJ,NkUD=UV<PF_<A$5F/iF(8\amD8CFec%2P#!gg'4(mK-%+so7IGGa99tn?oKAhKVL<4%RfZZh%dKu$m\\n[GsFl2E&WJer=.nf%-j_Z(K(IN,t[`RI;dF'3mFg/E,Bj.hd"pZ(ckMD:,j23(S3cPJE905$h"f@K)*jEH:?J$%S@,P#EOuWH-RREq\(F_kHd8tJfUJg?q-fM)WA1(_4:&*mNf+C!pK?Yr-@,X5<YK[/&UNPVGu:,=^6MR9QP\RS)W[HE(^;W'aV3<T%mnq%RcKsk,h^*Ib#oY^83o`&QmOckrB!!P1LC89imdUc'o#H.4I.OI;[e\j=l]u1=Mf/Fsm;W<sE/E=)!sG?O+OIbDK\N[+b_1Lj%?C;?s2t[EadttRH70'bC6j1GgJIpt@"<jk5^=qR)he]hbpi`jN<Bf].9Hh5IB.=k.h4'lKUkj5."&p]^6#N89q&'ga>Z)WIV\Fqr%I\78bJ:MPV,Dcl]N5^?9))Ngaq,*VYnF1r=((Jh'.=kBB&9uVUF7S6;>R2*c6":j,/EuA)QlFI9nA@3nUKX%=Kb+Bf9%)`:$]C],%6?j%Ri0VkDj:h/Te9QiRY>TXjTOU3l):Cc[,639G*%?l/7)[_[:`'7DOq4_P`7A8:,I,**00.Q\Q]Gk&lDNXY=@f//6*9--<`g29%0SM1a=cu2oMc/"j&d8U'JOh=]7H0d[7>m<LPDO%oW)fghK^)[f&RSApH.YU"^Nr_F-RcQA]';VUN,!L""^sk1k9?(EE2E-p^h712%(\nY#64o`W<-B\-V$psY`#0FGZdFA@UIV'MF2bbc\Er%_S0c>[^-&JZ/?R:<f28;3=/T+AMot('I0%+'M/>!'pYPCcOf[Wnp%&Lf%`lf58c^C<>GKet](6Z)/o>3ilP=?,1b*W%=mkr0J?Ic$?Pp[RGJ2Qo8`iHEI'cH\WK2?ehauV1Yh%O/$\o98`03R*EG"(=ML"Fl4%_E+%8=e+2kF'd(ZUJ'8<$0V8lLZ82@dA"b9HTDku+1p'+P/n#9SIM>]M<sPF)uJ!ALEp%R5<i[!gqVuCOlq`5Rf$sKnX-4FIKtJd%l0b3A!\D*:$97\KbOuMP:p_l7[k`;gCN\J?&s>,_Ou&CD_49U#Cd;EEl/%$_"X]c$pfV$m/M4O_(Q;3(:NdO$HRn^Nb?\WF>WXL*%p[q\#_0C$i@I_*:*k?UVlD<RUlQ?&t]pB,d52u8cN;^p^h*Sd-+[HQ^j,m*O2:!$6mJHU.]Kr3RX$+mLb,Z!XFSau.jmcpb0](m\%iDSdB\PHQ#X#tj':u"jW.nA?3`)u0NErD'j5SN#1b1lK/R4/G6*YJ:Tm"R^M$U1ng*Ek>t^#K6FmL*Qi:FkTHh+`E5JPNtFCX+j$%]h1q(HksEN*0nh;X6&K^9C_*0DPm!;\8fXeoUt;kJ#]hf0oe2kL;#kef#V?JK50WI;u*Ioa7';`d.aH8Z=A97C?YOn@GB[bK51;`%XJM3ph&TXIXL.9Pp0]A>7?Gtfs18@:oZ,4rl[*E^p33:$P1/JV$2k+$VOa"f/$8"rqOn"5s#DrpbGOB+H65.BO+h&P?[dLh^UIFT%mbd7T!*pW3TC8#n95.;t&X?WscQ[8&7oUBib/'\1,NA2I-)HO`s/Z0q^<iLIPXL@XUa4(gHMBGqZ&??o6(n7RALW%h^:fl]Ff9PJ%Ou5>))MXF+<B5!O[[$hcad/LL2,!&8I1F_B3H*!)!\d[,JMdQ!mAGCX;C;rqHRT-na_S=7C$GZq,96?'in4KLU_M;#98F1B[OPL,%7?oa8^&o$^4*:_\IXH.;s!Kc3D7qRb2+:#H&TZ,OJ[T$$GuHR(fY.?LoXo#*)!9=ZY\!mLf[g')*/(aA#u*9f,X!D.*E<*]93U1+%<K"cg"dl!Y0!J'CmF5^OAcTQtf)GglKXG,TlClkO7L>5Z2+0s?2,SZ>`[/ssEln4K`O5];i#oJsFWH`I1f]dQ!tur`CP\"0--GO/%=>KqaikGFY%c[@lT^>9QT^BNSD-iRXp>\g&pHQ\a][c&L\UEH03D>OI;cf'n%ps@XpN%=m[U-0u%NWB'E0t$SS@X<sn_m-rqB+c@%<qAb<bB-Fb\.4JHk&i\$5JG()s+;;E[9f%*,Z-uDI18n,o!YWXmK*IsSq^0Bn21'qinFD'oL&N3P4GnhBs,"d<fu60Y5*[eKXo+%%/'Kk7I'NYL%r`*6mtudG6Hu?JR]>LMh/qm$LN/mFFh,fnn\t5"5JTQulZG:->I$omR]3#Yj)PeR&=5J^alVs2(>JO)V]X[^_E?jL%=I:TuN6a;m/tZeSp_*>u%rr6=mfI>QA:ZQ>$'_!L!bEI^jSf'Vo]*'Ei*A?d7I[H"R,D71FTq6VLG-3Gq`,-q>;+:+N/fm83\Xus%Fm9;iX:J[tf)HitZ!&ea>,l&+Tk,@_c8mfd46seM=R1HqIV?Kca:gmX'.U%+]cfFLl=fi9gDmXT^^M010lToJFW%7uJ1n"kVJ>G:%5K#jten]Of?i[*h[j4BCg6RGgVeR3[0>MZ3/Jp@>F0%!H2$<?e[f.B,+MR:Jg0Ddj[K@1V4*:_\5((KLroZ6HD7sfK/_tHpeg(D.%0Xp[69VCe&'kmL6`O>afi#oc,I+3-sI,kS2n576jn58AdQb;uUa$G+=/JCi*L7:)RM6ni<%6r$1S&(Nopl`,ck;\:,HCQn&0>,"!%j0X);:>:OW\^gR;%cXU^5hiOs!c8G-[!>qPgP7Gmeb_?:69Q>lcHCrZ]1/?MkX_RdjDYqXFhB=KFae^XXoBb.#[c>#B_eR9/Zs\I%9X`amf7@q"bNj2,lc0grqL=$Jpq@PXF")1a%SWP_e.lZon0RQ#TAq'$or=E=D:M?b;s=4R5hghr[%4c0D'-LEf)Ggl`4'%iFUfF#%e8]s4W8i!pW:St@hYNl)+MRNcD!TF[Am5ad/?Vh$Z+,71a]ndd*5l&EJ[T&q"POj8C%Jp+[LZ_cX7pZT`*5BU[UWYIg)S+Ho=CI#%%ps@XpN%=-7lF1Ha`)U[\rOELpW2;I@FR;[Ki.$N(Yee9J:l5")b<b8bAD5.$[Kn+m]s>49X)$%?,>OsnAVj8+5e9UmfhEMb+,mB%'50IM"kl.fanu)#3!aB7M(GGPkq:\'&BT[g,0`@SAZ)CjfnV/fm6=?1^?*4f@q:5nk:jfo)lLQnRh&`oQN%Ztpm);RQB;afXTRR+%QIk2@eqYi&bC>Cu]VQ8i4#TMMc!d,#YKLYWn0PPc5K?(&V%[N(2FX:`@@T6ZbA$kC-+@t\a$FP-F]lm\]&]UQ^]`B&KLV<0WZl9b%edT?\\Fi)-6*057&hmk,oZi#EH=nJ'.`n\`mhi,DJ1n1iru_R:I4rt0;Wb>,]b>'@3[W5IiCi&%5K?'k]bbB]j!p4(p/[jQfN*R/%%pNLis't]]>:tjo7TgRI%PrLFE@Q@Kq62/`q+oD!Dn0=$mms]Oap]Ol<fg%0K5MlE#&=EN9A]63U*"=<"Nlaq&P-s[Vp4OJg-0o+%/`"`m&9$e9g5_^9BQG#gc0KE(5((I(h9U'Phg/Qs5(_ajc!V`4%2(mA2f/b7#2i/2qOcdj?Lp#\XU?tphD(CrGH-d,i#&PoG7<%2%^mA<tIu]0V^)(I(.<F2Q9VCe&'kmL6-1C`'ium48$ac=A'hC-B5hW+c;"e<jDXW(4IXK=m&]_ru"3t>0O#KgfO#J/hj=UB\qXH-r%be/On6m?1H&h"\khD3l8Plke+?q]AIT;!EGklf.h9bBp;(oPXEEnW^)aXu>pE=d'Q"PSl1&SQ5&Vp4OJg-0o+/`"`m&A(jaN]4Bo%+:^@9-B'p^Xt\j_p_*$pr#c6L]2YMqAc"cfTljapV02&1QI^gEnLi?&EY..&!c9Q$:>:=+[%4c0D'-LQIK+@.`9ts/[+S3Q8DA\%%[%4c0D'-L1qm/N.6%&!P;<Q:<7NLZIO#g$kO#eAsjK8GB%cU\G=BpWA?u\2c>?kL$>?i8ajK8GB%cXU^5hiOs!c8G-[!>qPgP7Gm%eb_?:iiSe;gT`C5D%>U5H!O2"LG-3gq`,-q:Eg.@c8kJDN#W>fUQ3sfUX"oRnO^Y@j<4.1WaKh;o:CQaj=kIkH!P<-rV."t6N'1[%iqm&Tc)&Wu4"u5o;cfXZ_jA%)Iu]06o@Mu<b>(*VZ`O<CBKL>?g-0n@cX6\p#P"o4Am:%N0\^Vspo*4ppo*fC9A]N;iul)/K#Mlr%#SrcE*/c>sFY'[;?h2eJ*!c"7O437bL"@,KS2RRoC&@BG[sC9Z6+k_]BKPoVTZpo82Qt;<qsYo@H9]G9I-^U")5kAr^,V)?Rdmt:%f?B:/H0]s?K6YZ(H_jufpl6`Jq;Al]4MQO;QMU+tfDM9$+MR:Jg0Ddj[Zg;+d!"tA"PQ%eanu)#3/G'>_EPM??%n8Y-eh4cm:8*]%[!h_4g\d](+MRNc?F`F-fIZ4`n576jn58AdQb;uUa$G+=Kj@W4Nj*<A@Eu$T:tOAXp#A^%qOcdjhWf+7gue,&!fYUjFZF:\^>r>`%k;\:,H3.s(jp8=SN76p33GfkPjAta439]<;8`Kd@&0TY!WJ6NoD$+36`D)Vh"#]Y(Aa18DcXF%P?th[IF_5b:=>Kq!:fUIF0>i;S%W2R:mQR(*]dX_^(S@Sb:5<b_aULC>T[OG*O'K`KJOsQE9?ih(@Y!BseO6@,%(jIMJP)Pt^Y]56uB-J:))@gGQK/D9(>II!miJJ&n%o]+Y$]qm>[XjjP=SY"*&Y:`aph^LQkp1UXgjJ?@3+b:c8_oZa*duXVZE't@)RK\m!!biQ&L*6mDoKj*V6`L+t<<]N:`):D3rIX>a%.Rp8-IR,S25_)'!a9\K@RsA5UGTc"ECUf[u2_C4-;AI*fV$p@$$,fdO%+4R&*uK[\PANr)9,W8Ne5J2p5YOTk>hZVqid+(#;e:Tg%7E;MtX'JA"0LSCl7>R2[<AZFnH3C,!H-9);>`)&U6'.?TQqSCtQ8DU>[4l##\RA^<FfGT371``ZCslWqZT*WFcIPZ^/-XIUK6;^d%eC:k?4%n4>Phd@>77fODZ"t;q1eB",,FK>+"M\CJW*8\N2&J$9bf"<7-6\9dKf]Bp=[bI,8@ede"%;;`dVr.$_Ji+uP@5#CZE6Ir%FK,ht8D>EGUZZb-EeRI3(XOGV`"LU3;\gLSB4Rg7[#+rA:#!O]%".scor+n.]6=j,8^`E`>F'([9op'`NLFCV7"aE'@gHHZ(29h0%onNT^cR?4G(..$0,uRGbHolrfcb(1])$-V?(YQ<+#.u#pO#1'!0uSgU_-i'"R\1gj7+D`-dSKrR_dm'$81@+XV9gnC>ep]`!0^G]%+i+4&WiT$VJlh.;5U?a`)gK".!3(W>.goobo*n:tkqVFN9;+cg*DN1Q18kYAd*bln#",8_;#s:@5dmX2'SKRDK4-IZ9G8@-&V_he%a9d9WTg/'LZRJ;Mk\*d%dT<q<;.rU"'jO@pA5^S"YZ`6,Y01p?U5gPmFNGa"nBf)b;c<FI!f3Pl15Cs;VII(D+\Sh37!OO(4)A_b%aHT[U/Haj>71/9m9#OUm:DGuokj[7A7s,B%Op&g6m[QuOZ6@['"`0Z_V@R2D$oK]k[`i/S!lM#\'C1GTphdlU-K/f*Z@SMLS'1o1%B&Grb+IRba*ru?u!/V"OA"D+)<'"8p_m3u6c(Y;00bmq!oqkLI!0of[/6rI*_/2K(_,Uhe1C/"i#4WTeaXY(7aA+leed7h3A<;,#%Xcg]gZ=Tj1EcPtFIj0G`e?K,WV@e`]-o.Ksa=9)P0Eo71?.GmnWj]qBa2d8G]s`a,:ckU6>.!)i[?2:kL!16q(/g:.2$bDL5TKh9%%Hj(pE0,p<O\&ETmb;DU"7([aQE99eK'%1h6Yr;'2<=dH>soGs,%XGB2R..MiP@=9%<%T_#UW7mMJh*."s>qK</!2n1*G<iSPAU,%"kmBfJl:WhLP;WcF!*3*VP9!FO;4,HQr,+8,TreK"7ftgm:BbP&PP-*.K]ju0S65MR7koj2%9Qf*G;AjX[cfu=7K5tQqW@J4#5r'%,(]luU,EjUdSurTRVqDX9hVaEf`E\8XLRF(kY>TdSPgqP*[uc>&L(QBJJ35t2Jjd8lJ-n*5p=rZ0OiuX&dM5r/Ht@@f/i-"oh"=<%9u8PfG@3sT#'=b3%9$71GX`6E,s!3ce;YUUeRdL`L^q;'9>)0Y(B>Z&-M<-nNBe33[i0D:&4eUUq,MQ?`e?*"=9C+2<'r/ZR7!Vg%nj?)CNg<$'[q[Xq8%11*]LN`AAAb59Y[q=7,<M0W("9$)`NTK$7Vjs3&jW=1&Sff\.]Q'R)4!`t9o8XD#_r7<Sb=9DV+G/n?q#&m%BUZ"^!$W#\FqVq7XH&0.TE/t:,F,K-+LN36[X`-EI`i:^\lT!Dh*^eG,nV5R/6JQ!?J&Z9"m9Z.<1tEO+p1mf1bgYhB'Rl"bCg[B%<TkuA@3]M@[ge<9eY#X@<1S!%gCb)J;CU3G1I3JGK+.FYWG>rdE+sG]%G>q-6VuC^##\M8cMle%(a_7sQEi)'H(`--/OC_cYm^hK%'A4j?au$'EPd)^D'b`!eUbaoG;c9Pe9N;9Y\q9H.=;eqCZ5;GVV=65@]BK[Q&62f2j)/XK?n'GPio%_C#tCj^\Y;^^N-3(CKktg%%*<.@R$=#IiR).o#Ck@?A3p$bI2DI(bRl]pR"+&kC0\lOB@_s)p&3ABR"0X$_[t^V2`XV9`))0Cj7,Q,G$WNRT!/&h>OAa4)P@U1h%N"oQ`NDLIp9443f-lb^R6G3:D0[.7c1e))IiCOd[ZA^RCR<m)l"ppBe'XF@L>iM.S6S.^A!Fj]WSn:M]+*CC$_ETed"th2PP!R&^%4,cLFn3Eik7UTV^1lM'o"4C2+<g69e<(r]`"3I:kD]&c@5gg*og(f<@P@U4LnA-!t3o),@c.4Jt@#923[VZjL:^ULkj8(N[V)M]1%@gK&(f"tlF>rUFT*kOY@VP#9ceguNd/M:g--T]qF^dHYoHHJS1o-qOa]`qbZ![?p*qB63a0)",o'M1)c0UN_8&jHt:\3hr<\!b,<%ZQ?t:Bek74PnIsrK#n@jR6\/R&s4>$Nilai;AkH]81!>Ug[7t<&.K=ei#*XCo#7R5.I/IcLR^\bHBhld9aG=X-&uQjU`PqG;*-$B%jp#>sM2!]\PDIAc=boG=ojeu@d'+r!%O_<Op,ZbM[Af^Zn^8'(D\5*p%NQ!f@t"E4]O9]%3#X011/-M5L5nNto*q:h@F9D$X\qNa%6Z<Au'T7]1Lab*a2bt6!i09=L87JqB/23Il;5hUTr@C3MEc.V9i\3ZL%%DS-+Y_FhGLdlR=t;(E*eY\lAegL^X)oAc@*g[W:s%?E%'iekI6@T*]Z6c5hFBo'n40/d&c8+m-1eTR>&7H_!)H!:=>%9'..UhP:JYjk&USnk\Z=(bq-<.h+Te#t8&I'aU)s`FeXu>rl29[P'%'5SQkZt0<dM6d841$O(F#*iS"a70cFYuO/Yk=n+c<g(ZE5TnVNPX133.Sa(P"2qPQ?=\A!>0Ag8)IHGt/S+H!MHcCN>S+i>R=f(7%;2hTjY#+9dN%+fY*9;Y?D!E2I8K'2&YW*L/quqCj&VjLC1^OPiUpG:IKSKQ%;f+pWe"SCl(1!Nj.1@>f8lQh5WXTA%/g`ld)T3'h%R)NZd"f<OYJp>N,"rA."eF0:H_R]h:o-pr&W2E<`$\^&%)CGZo9S#GB$QdPbL.G8kX),usp(<rj-/([JXD'UTXk$qG5S/nb?*mee%#f&/p>WXd+[aC<_*XiU<nnAuM+[Tl*PYrKU3tX(8RN`/895:g\Ri68P)ablTTg#tq1"LL40V`W*OsZZ?0nBNF<GYTCb64`bP!RSu%K$1CfE+$LRab'9q&\?41A/H2ikp`In.`8%oLnh@9)\VY7&r!JS9e9*tp.=H_0eVFi,n+s-q[G)+"qu.6JKZ2[(;XQa1oau_&Cj#W%;k`WaY$7^D#c?($Q\H;l-A48?XJdRm,/IM5e?Wks)H%lPlF(<a#0Jut2Q3&f'4b",*8MB<NZQ+10:ALf8!1WNl)rF/cqDP]\ekF'%@F-@$[R;[&6?b##KCFPod,b[R[&RO?o$%JYh5"5M^l";X0FWYC[nI^8[.$c++bD$sQk5Z$@FW^,G)O;=8Rr_^.LG=ETEo.fKRud#%)KW(/0Jne_PLbj=1Kchk$quY8P[S,/!;qRm(3Bbk.67]q8fA()ditf(dm,dN9>fm/m'qjkBn30<$$ikeZjH>qjUOWSVD7F5d\r"V%AjbBWkT^i?'Ob[t<?[0/6-+a@"aD)m+Qt59256n0!%NRL-4QCdAMe?T*T(E/$3='^5`fHB*!5dIY`Z4n8ccDUWYRK0#bj?A:FDl+%0LMN\Sr?_Y3[jB3+i/()hk>fm4W65@Q:bVcAEsWY%tIadM1&d`;Lj;(BsDCU7)NC8&\+4dO/Rj\9Fe\A#_H;6ei6TlM>q#;?lCS`%V\RY71(4uS3*B^[)&fW39IB.2]Inal7YRieRKlP293'S(K_0gEdg[(j'Ulk;\m\Hfj%X:1-J9TI^fdS<Q&TkmGIU@*C/c*[!#;^p%ib-o$8fB))ocgm\3;t/&PA-rnlK*\09H+1!M:Lg7;pU"C&;>b1A!9GGp'^E]&?ZDV93/us@Zn6k"X-[a4:VZ"`5%69K1/h>\me+H%@NiW.j?U2F$k)g@bdM7D#joc6_K=jH#jE5&.%46FFh;2u,G7En##mr5gVD_cP/o2+R:I7;V*:RVVFDk_=C$X2%Yr,9XTA)7(hseS%.ku3O_*&sXWklUb'@33\)huWboJDJd+WJ^0@'6Fo"c!]]bm^Ue.]dd(8mNmOO9&'dnTd]\'o<+#35pOoFR0sTWtb1g>nl;F$goFn%A<)F?bU)TuR4QpBB0`<t'%p@V.S@etogN>EFdC;XrMKX:NWEN!h=J[b!&-[8*m"A`le5B_8Wr?Pm!&5C)YCn?.aNC>)[2p$"[VUQ%)4MLPH:E2b`OE>-+YpD#hgO%gf:V_9<`U7c@]bGq'ElK5QSnP=!Mf`+2$/2&!<D@oDA`ES7NW-Y!3icRm:X$5P&H-T8FQ_T<HZ@_%Sg-[Oma8%\Nscg*O:kTOAH9O6gS@&F!9on/O12YDIH<k_$t*Qg"4/],%ZWm\!5uV6&d#:=^"L$<Yls.X4i5ri;bmf?Ag&(ZB<:7-%e`1^q<e=EKr'Fo6Gl>TJ!+)k=QA#<d6-T[h!'k9.Y$O^#p9&`0o;VLKdQ@e,^(&?Y's-K[hcDmD'mY`FHe(kY1EnIu!&+]b-NCg*%:<#d_Z@r93N'[OD`r&po!8bc"fI?lCO#HK*!<@E=h]p!s#>OHb"5o*Jds/?b*u$bd@oY*$^k"(Ql\4k!M=d7G[7-lto/*q4R6IOZ%`<A9Agu]B7g^eIah&LR,>6NBfXXaB\Xd?Sp.<=NORoX.Sp(li8ID+u!Y3HX4X6_G1W41/LgBuRQ/Un_o6@]kA+TRX=UT3gK,64=J%(o.6V<pV#,#=-5q!+c-1D?`8pOoZ,hH_2kl!:lY_AZmI(O$AabU?h#S^KNc9=KkP*@9C0S0WbEWel/t584!;=hr??_O+['h<qWr+%D[HNnQsirG+TT4hg.+1XI6"Yna*Xcg+HjEq\4D1X@0r3q!5u%p@9QbU5aH)A=oa#:1jR2F$NTO2?<Y\WV"pBTF6UNHOMN*s=o_t&%#[a]I#qmk1OSbIY?e0AG0T8":@ad"E&6lL"b';CuU"\8cqTI:g&<i!k=odAGOW:H\V]4moH#4u1]:WrT1W7DU^25Zfjl^<Bq9f=`%Pd=kqX-G68Cb<H_rWd'I=o^h6X0_th;[CJ9gH)(-"TZun-,Rf6!+<1c%Q+6kFQr=o"ook9/5$EP+C/um8I`IaMMnq^JFc.k:n.n1%K2I[#6mKZYcE#K<fk7#t!!D(U$SuYp4f8ptlbpJ]rasi1ciPb+9*$q],liFl=rg0\!:NphBoHmG4\F\s5RP=$9:BW:%MR]+IBf$P%l>XO^[@4Eibd2&'Zcs[e!ViNib[J!.CC2Z/JLiOkkK3UZ*Fe"IUIcf*`;gk3@Xo7a0`Vg*P<o[C`&sg&!/.3Y)/92&Qo_Ph!6DM=%*N-9<2BVOjRc'k;!JHa[-NIh/+>(nAd<1CP*Ne$*,>npM7%[`-9+1fZ1"k*$+QL1'2q,ct/2b3NU)JPHe?V(o\7.^DZQ3dD!3j']%$Y_+]Z\AK4Y$Xt+`WGdO<`&0A3Ea*b5les-gO?US!*IH`dbK3RD'":Zca."rIe3*_gBrEh:QIqNR/B0ti*4hH"RstcH_DQI]aMsc%PSB2nSq@.HJ=bG%nd`Y\OP\i0XT_(;X>OtDoA+(*dgL9LT?SolqBZCI`p[Xp5ld"t]_X#^307q%g;$#d^gF+u2fDI3E1ZV5"E;Wh%gN66;)/aK8r`>l>YtMsRDXU'Z[R!VN!(StpD-7Cbolf$PTcO3TF$;RDWCa^fqpGQdf[9jAR.UGI(k/_4J3Y,ae1CsQ[SY5-K8!eO%Wd4)]l`q,`]EJ?&3>JbA#iL*^':Z/fRSZ+g#m+G#aa['%d=pJt/-l7<M"))\!0bLLH2mq6B35Nt"?*qTAj$,Kk+[PN!!q85V$A,@%PM0+L5\tNQ.J*U*T$=Be/3Ue"/3UegQ6+rf;%LGa[k*ba!!:D=^\%TFi$'d:!2!hkd%DG18BJ:DlgSIC_Lp>?&<XS4VOp5"f+%Z/%_qX@d;(@q$2JE2'7,`PQaT4Tm<Bf[hB,-V0@;X0g%a=!`^94#Wn/3s%qmt'nJ;nD+^^K3"+B$EP;[rf'LG6bh!+7&Dnr6R`53!T"%"_&;3eeRA>"TcCaF?3VPV\`/?!8s:"k5M1^!*2FE:H\]>R`r-8%mZrF*4-ggR-)Ij"E:__N`\g"Q":/rJ\?T)$MN;=!'\]t<l7HH%a.QerZmsu,1Nm1:=;([NM4dp#&Sg!f!$J_eQR2^beK%ej-6UR<@jBii*opMH),mEO1Eb@[.r#-A>ZOdb'gIeV$/!ljMh\A,?brfM%!(JIc1][Rtf1Xs02$#sGd=SYL5X!X,W<hGBaLe`%!/#6S)r@$64]nBai..\/nH`k2J/%*7/5<qCjb7iDY@Js5ecZspBEA1%g8?+p%s&SDY-j&rCh6Tn'.09L7824T7"A$.#\f]!Sl"pnmVN(tIh$TjMiph[M!(c?4`iTRJ[e*/`AV&L`[OM95Fm;U7!,UdoJeke?G!Ugq%.1/%r,mr;W-;G)qU&ZBIG_%)-PV8R"SrOQi&8T**@ZCQ$ms1i5LeMla<WrIr4jJPU!e?LsUbi@k!3lX1R*uj`QBZ<g3_8cmbc1YN%AA\m8("a-Mq6$B9CTse0+ER;q/IUL+?I''V&r:4pCg@%'[:/G?Ejm$_WL;6c;P@b]+37ni2n!i0#A.6A&K"bG(VkKWj''"o@O6LT%=TBO?Z6.6k34\?J'u5q]T!spfBMCJU_I092h-)_[!e<F<n1Ru$\bV2=/:`Ya=UmN'9d&]<I@uW3UeVR7U`!P*h6MQjS[1CpeLG,2%7!e'/+U\:e\@"oWgO1L'mtUNPO_K,qZ2jR?dP8iF!:_(DEgP'@,L>qPAlm1K4h2)>:#ns#^oq0^,2YoESaHI_0jNMX]oU8=Tl7KK%L"qe!B3>4s)H)Ar"O-;%h*$O20kHg.8O$Ns$!C+H-Z[Gk^il7EKmC-2?(FZAVG!JcChq"heLu"C$rj:n?"X3@eU"m%TQBD4.bBa_%ge$N_G?C=6G!oSDC*9<&c6ag*=.!0p`0@+9eAUe53YeO37(@m'F@c9"8Z))r7^cu=_!O/=DVX;6=O?6jS!)*96Eh%CT*I`r+P7^p%R?.D`[@9.I;if#(q,%AmCg_JR[[d%ZL(u-`qmt9E+s?R]==fqS]QDg_F5.$%;BX<AmaqA$Yr1-q>3AWP>M,DE#`H]=k8c/n[WhB'%"2f=g_6Ph*8gkH.1VA7>9tMOENlZ0=^U?=Sh3,Fg3[.C:i]Rr`S;:Oif.S(qjb-D.iP`%]'Dh5KgPP>-].gS`$m!/2FlDbT)#06K%#8(TJ3)!V%FXn^#`;#JV+_CIC*2ktO\OfjKU7AMSI]ELp-<!sG\ph>"SOfnhr?S0:p%(:01bU6j\;5'E`Z&-P0qi>oJ>=n2IEsW=%@oaQP.=[H!W^7P"<KP3c.)lP@(dPgQ:_maRm&h++O>JTaZS4a@b8B1?N&"_00sKAHH+1r*K3%&lJXB)8SFL+]+EH]k](5*WIBZle%8'^lp(2(:bi/I>%=TNeg`k5Zfm`(bOHPKiq3Fa1p8nG?F(kTffXrGcm8G7D=,-B!p6M16J$]R.'lS%CZq0o></Y0S"5K*mg@j(?d%oAY_^]52YL:W<&OiL3,6HlKc5&mR9iB8haYfN2Sl2nlUG6scC'\WJDA*VBO7Yhmm*nO>ENr5(uCo1-BOFje:B<QoRV`dEKbJOo@O%k]@.hNj;D6)mB5JqK&%d)2[G4L)a-!'&"jOn\tgBcJo]f"-3h/P^OSdZ"D%s0d3A#qDdUeV3)k?0p*/dDN?[/bUo$Ai1_fG*O_JL%A3&7mXD*j@Wt#(Jk:tRBdmWqU9IsPSoD"_MO2[4KoBZYS9:=YV2JrB/8/i3cKc.NX&.=(*DbM]s/s&"=dVQRY3!M-9YS\REM$4\g%Dt.`Ac*aFkh03V0H"1<ioQR?X07neVX@%j\EojC]lBW.I`>ditmhPKn\[&u(I?QTZeWH"g5+"8]#tY9m_#>IX3\I?,)F1%B#.5H^%n;MqIMaSKd9>_'['!=C=mArRY`W30b$c]8f\WKtNFZP%1#%1'WHn^Z)!T'n4YZ-q0aK7iW#&B/&QATXD`dk(Qj(Sm?:n1*G;tn``%mEKbOAMM3ADM]`08FZo8MKY82RF`JT[^/BZ;[TKN\q;B#-UGtMat'G]S]@ZV)g&,\m;>@)#`-C@5oCID/BJYlrt,"9fO>th4Y4#Y%=R!;ODm@:"ke[O.$m[5[-5Rtc,^lJF/7oE^%lKNhS/")8eq#NS1OYf4',lm[2B#du/fNgmc83S#/B7OS3I*DgaR_^)\q;TkaJOk+%b^?[Eac8R\@brcV$Z#b_&a>GhKRV8D3]N.QT/\g7<-f*kCm?-slk'c/=t>[(mpMCD@_Sksj;UGilTGDWHm">"r]G7OYq[L@_'Tgi%(N4-=`@m0l0bD;AJhAC564P0QR$dVEQ'=gbVe(rB#-u2=-Jj7^)[0-?V;_Wt*"g[*dGiK1/I'd`9r?HU7@-tW,us..jM_l:e".=<%#?(=(Jh>j#@Z+S)fjaqWBkD%oirHW)<$;fWN)#@1c+[-eB$h]Q$0K^mA#GOV.VijD)g`?4M`GUug.nun^t/-Y<clJ^Oro&I05&,T%q%>T2COK1Nl=mlIg1H)#lbA-*[[;9Q,GkXQ=M9W#3kR0i1L(-h`H]aO3NklV+&m55YI0)sSF^TniDhBj[p%=akYNhj6,qGBegb/b%[;be4(B^ATHdTe;Ep[!K=O>%bV4=qa.%*li2W[@DF4(1'EQ=Pk^aZ]WbQkQ/)^X@U:6*j3Ni7$/a;8oFDi6Hs(\94PVc[Y\YUE-T%2o+$j]e@+p^_U:)@-3BT0:6g_mSm5TOi8,P>8UsI=[%@A0GR8I!IC`$fA__!<@%N"l!ciJ4>;u0*0dtWFR]_p29^o*O7B9<l!e$F%O5g^pB[#<KH04J,5G8s:0n9rY1L1F57\ApS+HN^;g77-'`(@-jVMg<(b9IA*R#"@^R4^[b72KlYdD[bpFKp;MAe=cI,%\LZa,)+C%#K[eR@>4m?jGSkjAg=Mi?^?!D>S-ej5g9pr=VYu%EFb="3k</?eZIVb72YX8>i%kC)#nWcnl^`d6_qdg0OK38AqpaD"Q#.dHq)?F%]rj.u]Wo]t^G*A5+<$kg^)0BIiJ./;@e5IBDe5]Tg^.`O'*P2s5]k\8ZZigG3I#-_'IREBh,1PZlGT29r\e0n,WXdR^6h0l6"mtL%R-)KPM`Ft!:Rt'YhE>?(g'b^?hN;3Dp]qq==YEF^R#bMDO[IF!M^fQ$`tL,*ltUXQ;A%UAP'Ru'M_,-F?&I<E+=er$]r7]P?)[F/%p2r5]iP*-&';?[LGfl`:aC:&dG0Zdn6iC(?Zc0^lEre>m#g\R6ng@t+J[g<lU5R^T&5J?@js(AV+JgVbX5)IhMt_/o?d'*^]fku+%*;/+aa2&RA?=$`XO8"GtipcSi3jIV$!ThE$-=[HPPlQCj"sW5>0uf9r@)k5D@j%p@(PhsA]]GWoY.%cHRQ]q,Yb50S6HD#5bnpOe%&f.I=+2la=).OfK4#^XXXPK3&cnY]"/3G.gHm">&hUj1*%a:.lOWILIQrT5fgd`qc;9$PEMJ/h=1dg+aXDg])fN%[i(^"!=RI#7:%h?]g/jSC0MJ41s#0G=^/j1AR`="uMN^fFFl6j#+ZWa'aB(>NLX`]t6fb)8":RuYOToGAQu2c::.7+RC+-cd]b85$Kk#hM`e+35Y[%2RWqP"#F@Z,gJs&lI!lE,*sX8M5:uF/T-6GX.-f;ffclU.@DsR:o,4$00,c6_j&<)iNPD^@`fPRCCZ7Lg^6>qlVpCmF&g5mSZsS\%-f(+8$O8]ReG68sN+9u!1>^YD],,)%Qq3_KUl:-]b"S$SYU'CUA.OomKuKjHGHZ$``nYaSj!/+DUdi@\k8?1Wrh@VC=NojhR!\bP%nuGm:j9LmeFkn38<@Z7oWY@;R4n=(UD':RXN)IO9G'c,Y9I+:<;oZW$*J+o]PC_d,U(dA>$TVg>?q6%L`4XnIUmXR!5V@h8,=[96%.CKgCCA-K68JS#_oA.PAOrorp8M`]_(oCUu*t2Q$ZiM%",LuF$e*jW]WSU2\;g"$;L<P$V2W=)aG-_HEIlbeu`.bZo]5QOgilYp4%JGc7.IML%&E+5&eJu4L3371=JpqV!Qd+sTB."4TGb'J.U^7t9`Nlhndj>#Q&H8h.>'>Zi.1;YB2D4am19U6-egUT?L;PpLK+2]AA%<BT;H6d`tnq/H"Aj5!<@[&g%"LV]1(,:Ws@X1QlWNZu?^b44hKfRkkX*m[=0kUS<M*u:6XH`'l!h^VAtWJX8[Vk8)nHRg1DVW07A%-T=X#>BX>tZe)mrV&;A,><5qBC"\Z,VL_6Rh-ttKhp-[$-DWDKODHc<S!S)M:ZV(UhcNe+<WPEhL)/BHYp,@R`Tat^*U9_hm9a)6%7+7aTdlR.(O0R;"/2j9dc7r&<b4s3s[M2?7>PmS>UM<JbVTf8X0d:XqA>B&h*5WKM+Xu.AYBe5C`_#LO]:#b2Mu;8r-.6[*C^(D5%:>HX<mp+r\MmJ2d?@5Y-O,dfMoc$PpFcoS-OBraY;eR8%H=JK+U9]X0Dpb_uY$YW11UtNI79!"+/C1nf/'><BY"Mlk<RpmZ='uT;%\--)7Ubfi]=8B6f*EF/QSlq-aj2q(_l`gb0dL*R!)^1GV^K_>1$:20&8>X;=$>$UBg>[&fR3m^V2Z(U$XRf?6I#gg1Ug',@%]l<W%U./kZluNNQQW-S?FMl$PDG^pAH[0O,%["H"]89_^/6PNY3^kbGe@]=P,lO(?#M0L1q$j.JWIX"D`=EbOZX;<%6Ujl'Y>_`b=>*;I%i-%dJ9ruDL\!+)=YjJ!Ud\:2Xlj4bfq2gDnN>Y.uD[[NdYNb`tYadsNY!^5akF@/`e72TAM1!6Q3_M5OIqSjKQsB7'kP>#J.$2ke%&LJ26ijYir%'dJ512!+eJ.en/U$rq:7SGF6^h%dJ`jm.DL?WW%h<dKQ]?]]2X_:tM\(ph7[g"m.D1\u\a;qP[b&X9Ha/;8tM,fm;%jM&9i(07dons?k=+`c@n3l"'.5\d=J^!slZ!%dmYp6uY!/3)0WSg_rH2koVAb4XR_V11KQ<4VE[^:Q_QnJ>*15A?L_qKAp,nT7))%!p2H!mu3WW<]Lrg6],eM8iq6YBf.<#bSnFG^_cGph;<:hGd/UifdbGW-TC);UBjOsVn@oVEn8(HE\5cqaX!WP84mf2oVhS$#^Q?<%1-IUVWe)V.SSE$$eRqnL5Skij:#7>Pc0;`eD<a&+>ag!qk2,,).R'I3B@1hO1e_^20>=;E1O-XJVuO*>7\*([puDct;I)?.)0UkZ%H]"7Gm%Wrb?p77SN@7M1IDAFW*9I$Tl3#Ubjc.1tAJ"WM77Nih4Z,b*h';pm]iMqeiQXP/@?^;r%0_k2EHr^<EPJN@/q(>:93$]G%:@.e%%D)bP(`Clu*6phPEi6SX[@7X@TS>$UF;^,jf(5^f+V7rQ$upU&HE?&i?d`.b]F=BaFW&BeTU48Qla"Rf;a?:q=C)8Ke,$Yk%k[X4-X:'dHi=mET/%JE+\#._u>Wr6ir*ls<<S"$'Xo&MoV&QVhk0XN7CA@_LQYU$0rdGb`W'q0?2%e8m8t3`%?,]'?Eh_Gmea9"a%NFNLn-,QT)`aG$Q+q:SDF+7Uh^)PNi6]Dfr%44=t-T4uG>_t:U>]j_$@>Rff<h@QC78d!dL^63l!2Q"/_*4O8dV.>npi.NZ+4^0e%Zj;M%Af>Z/<@X$T<['\WnB3"(\'!]4M'Zi1Rl&(5.G,jn[sHq\Qon@]<Ja/dAT0M)$S/GX2,]^^3RXC&F^at)S$g/nKi3qXm),dT%WB20'WWW=[^+Se*qUu4(qf7f`'MA%$->N\h92+=JRBqBj5%_Mu\_W&RKlQh8)l""Cno@Ic_$/XY9D1B%"//4_n\6Vp$N5%Z%gZj.%jiSHCSE1.t6Y5/46WrY%rp#-)1RHZHl:t[BA&_p,`reo"bLnJkl*N!6Wc`mF5h:(=F/i(hEidYa--F'(_E,[=X7-r3Wm7"H_\1Q"%f.Se9-aSQ-Z@GTR+Itsp_u_*lcSq(oC_h173,/%onY8%$FeMmj/eF5m6Bm[p1UiUY:0Mn4Yq/laV"]:`DP/Ed_H.W?r:CV/<K=t6%lDf=1E20hDbF2+^Th9+aA+isEC?s\ITkR'NU5P887=OK!%n2e^peDC@]?%ABQY9W*ObNM8L".^uW7pNuG.7A/o*!(WAr:kOj5]X[%?C8D`AmJIW`QcNRdVFNB#)"JGmAg7k[QAmp-J;]@3RCi;DJTdJ8Br+e?g#ogU`n!if1u=fhV*N3GO<34Y;+9[Ks^oALtTVR\NnaV%-ot4k^SW";3juf3a(5'_0?jD6Z`mGEgAW"se#DdAInc?pf?7U_i(<*BLQ/uVa=SAi+Qi9^_o<:+1-4X&&`@u?]648Lei%&O:%-3!%95fgaC9c+:*;AGj>5K]E=DSSu>@ZKB<b5Li>N<%E:)2V(7mOhR,#,S#-a:6@k.UB($K8+d(r1QL/8sqIr&q\M(+(09KBWBqpnneC%EE/:^O3b+39fHlZ!!\>ndpau1EF?QF=d"msHWQhQN7A!OG&SP8+qpoa%qd*3>J3Kf>9Qo,Tr'*$.B2"*$7Z[Y$*6F'blHj/>F\Mi%"6YB^j?[$QP?i2+;NlRf\DLf_,Zd-4]`Q=A%-"G7$)THKs1t;g[LkYE:QJR-;qPA[+pX=BI[meuC=8qr$Z;=bKn:OcZOhS8I\"*$%a75Jti^YZUSh!K#^CFg\Ki,sY5r*2ESfA00N2tK^5&'A)=4uipB9\@-`:NEU@U9UEaq]D>MV#P'B2<9Vc<+)_(8d/e@I"6.$t!G6%QM93t(S:$1P+Lg"gpVaeXEn0/jfS[4b>FPQh$QJEbN,7c;_LYGD#1LjC5#d,K)dG0'@#[C#[eQpf:Zj6B's`M.P6$Vkanen/SHWU%6.KL`*GDOS5pZ3WOIPB&'W$H0KQ@?RZ7E/a7]1"D%ZU,qeSECu?7JQ67+m<].UfQ-c(^Z$W`+!0a4X(-`@k;BS1Ja6]sII3_BDV`%XM)i=P&g2p:M67>h]FZJ>?K*YCNZ$A`sQA3p3^;W4dhs&k#f&>!(i-dp10be@NWeeA<uO87bcDFZ"_sabb,t>I2o[CF)SsKVsV#N%RD\`G+gsNEbdJn*UA9qRYW\D/)IbkaT$23aH]b`aSkfTc:!YsPg[ol%2EdU+HC1<%.9UdO4`NP`CYu!:LQ<PE$.G*/@_Mdq4dgRg%>&Tn%*+H4U@<sCB\!:fW*lp*#?Pon@]e&WUZp&b"3=<t+<'mfr@.)Q*_mM)^;p!)AAUX\Z9s?<93<o(35;hN4S`V<(2Eg;=IWBh"%<tER%cZ9qm[hPjniS49X@5^@%dCAO=mS;AJIqkicoe\pJGM^#M"&s=h[$9(%V'rjd%8]fXlKuiYg_<u,%F>2[#3^Wk!0u>X*X4$S%hS\hiHK:m3cj]=$WW6E7F:ZR'5[Tm1:^'q6$0ZF>FK\IJF=Ub."j5e&W-N8.>S;Ul5WS-ZGh<c[7lKJH"N:JC5$?O20>p?DJ^rE?%Zcbgl'e4j`rjf.-p?Js]GNks1VEtdd,+B2$<[cjL0hXnbPbW3.HZhJ*l>J2;-JrBH6)en3&l1%Mo/,%Z*iA-UAZeu`YoM<!(k#r[%6!?[%W:<?UX?2fp!c"$pj\&B-,lYiU)_Nco>9oP/h<-qU];9\Z=d%_9Ut+?>@.(gnrg.*n9Zdk3eCDuqI@YI)cYb$JonE('*L>9P%65[t^1jip)$OH$o^>FiOV+=aI:!PYaG.Thc*1!%PY<:-3_hneU)soa&7<fE/<,QOkim2mueb.(qiY:hJNTAj'4"sS)BpnOj:$[#&%YDOT,5gs;HhMqYqg):`X2he-)H*rY"?ko<lN^XYaXu8-u;cBR*W$"/uA"q`o1\/IsBRABl:;c55BK!q;.\<$_q<lsc(`c`_E/#A/%Q(j538?]%2Wgg<8W^$>gL-HuA)cHkQLu,[h[9@"A7L[7U<db2^pPjP2e.hOj)*sjNMeXm%E?_L2X36I<4S),$-@\[22M8II-`;4b%N%E;VaV4&:6X.YJZIRYu4>DW9)7Qm^6BA:h4Jm]ACFl:ZXDjiGJX(40GImOi]6bG,C+cch1^f@o\^+*.P9NY=)iZMp7O&Ftl1ef2%3jN&E^d]RJVc/ngNCGA>N6u=7=KHa-dV,F1C_e1f29s=_pVU[?qQ>1BdqF+P2B!*Bec38#2_Ceeg,i$"AMg.MZT+bZM2`16;U;Qc%pTSJ7nV,Y2jA9.]/QL/j#0\t1X[\<lZO+(jaRNb,:KWVC'anc3eL5!9G8*;CUW,8a5pf)e[E$4^YSn$_=cG(n<[3*.?KG["NRA8^%&'6hBKBC%+'@\XalHVjD+!`*62B"T@_L8cCjmd%<CWgVA/BM8.c,e"L3?5#W/PIcG:Mhn:T#*HfT2!_P2"*a,pR0X.HghGl^S0@+%mpTK=clYIOf(WO#s5i.Pr:.tFI$l(+p"(;crbl/Xs19rArTui#s7lIUroa#?r83Q"s39GKq<kkEro&&crp.lpr7<$>r;"P)rqs\6%r:og"+92,6^\mSf+9266bK'(#rpe<aq:!YSIf0$9J,3LpcR%!:]C5auTDmfmrrWlVA*E~>%AI9_PrivateDataEnd