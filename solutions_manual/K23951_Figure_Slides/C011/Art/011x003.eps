%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 011x003.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 293 216
%%HiResBoundingBox: 0 0 292.0859 215.1645
%%CropBox: 0 0 292.0859 215.1645
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6220 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7D52FF527D527D287D52FD76FF5252A87D527D527D52527D%527DA8A8A884A8A8A884A8A87D84A8A8A884A8A8A884A8A87D84A8A8A884%A8A8A884A8A87D84A8A8A884A8A8A884A8A87D84A8A8A884A8A8A884A8A8%A859A8A8A884A8A8A884A8A8A859A8A8A884A8A8A884A8A8A859A8A8A884%A8A8A884A8A8A859A8A8A884A8A8A884A8A8A8527DFD07FFA8FFA8FFA8FF%A8FFA8FF7DFD0BFFA8FD0BFFA8FD0BFFA8FD0BFFA8FD0CFFA8FD0BFFA8FD%0BFFA8FD0BFFA8FD0CFF7DFD11FFA8FD23FFA8A8A87DA8A8A87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DFD24FFA8%FD11FFA8FD23FFA8FD0BFF7D7DFFFF7DFD05FFA87DFD0BFFA8FFA8FD24FF%A8FD11FFA8FD23FFA8FFFF7EA9A8A87EFD04FF527D7D527D7D527D52527D%5252527D52FF7D527D7D7D5227FFA8FD24FFA8FD11FFA8FD23FFA8FD0BFF%7DFD04527D527D7DA87D5252527D7DA8A827527D7DA852A8A8FD24FFA8FD%11FFA8FD23FFA8FD0BFFA87DFFFD0BA8FFA8FFFD05A8FFA8FF7DFD24FFA8%FD11FFA8FD23FFA8FD24FFA8FD24FFA8FD11FFA8FD23FFA8FD0BFF7E7DFF%FFAF7DA8A8FF84FD09FFA8FD05FF84FD23FFA8A8FD11FFA8FD23FFA8FD0B%FF52527DA87D7D5252FF7D7D7DA8FF53A8527D5252A8FD04FFA8FD22FFA9%FFA8FD11FFA8FD23FFA8FFFF83A883A883FD04FF7D5253527D5253537D52%7D7DA8A85252A8527D27FD05FFA8FD21FFA8FFFFA8FD11FFA8FD23FFA8FD%0BFF7DA8FF7D7EA8A8A8FFA8A8FFA8FF7DFF7DA8A8FFA8FD04FFA8FD20FF%A9FFFFFFA8FD11FFA8FD23FFA8FD24FFA8FD1FFFA8A9FFFFFFA8FD06FF84%52FF537D527D527D52FFA8FD23FFFD26A8FD1EFFA8FD05FFA8FD06FF527D%FF52537D527D527D7D7DA8FD65FFA8FD05FF7DA8FD07FFA8A87EA87DFF7D%A87DFFA8FD65FFA9FD07FFA8FD11FFA8FD64FFA8FD08FFA8FD11FFA8FD63%FFA8FD09FFA8FD11FFA8FD62FFA8FD0AFFA8FD11FFA8FD61FFA8FD0BFFA8%FD11FFA8FD60FFA8FD0CFFA8FD11FFA8FD5FFFA8FD0DFFA8FD11FFA8FD5E%FFA8FD0EFFA8FD11FFA8FD5DFFA9FD0FFFA8FD11FFA8FD5CFFA8FD10FFA8%FD11FFA8FD5BFFA9FD11FFA8FD11FFA8FD5AFFA8FD12FFA8FD06FF7E7DFF%7DA852A852FF59FFA8FD59FFA9FD13FFA8FD06FF7D7DFF7D527D527D5227%A87DA8FD57FFA9A9FD12FF7DA8FD06FF847DA87DA852A852A87DFFA8FD57%FFA9A9FD14FFA8FD11FFA8FD56FFA8A9FD15FFA8FFFF7D52A8FD0CFFA8FD%56FFA9FD16FFA8FFFF527DA8FD0CFFA8FD55FFA9FD17FFA8FFFF7D52A8FD%0CFFA8FD54FFA9FD18FFA8FFFFA853A8FD0CFFA8FD52FFA8A9FD19FFA8FF%FF7D7DFD0DFFA8FD51FFA9FD1BFFA8FFFF7D7D84FD0CFFA8FD50FFA8A9FD%1BFFA8FFFFA852A8FD0CFFA8FD4FFFA8FD1DFFA8FFFF53A87DFD0CFFA8FD%4EFF7EFD1EFFA8FFFFA852FD0DFFA8FD4DFFA8FD1FFFA8FFFF59527DFD0C%FFA8FD4BFFA9A8FD20FFA8FFFFA87DFFFFA87DFFA8A87DFF7DA87DFFA8FD%4AFFA9A9FD21FFA8FFFF7D537DFF527DFF52527D287D7D527D7DA8FD48FF%A9A8FD21FF7DA8FD06FF7D52A87D7D52A8527D59A8A8FD48FFA9FD24FFA8%FFFF7D7DA8FD0CFFA8FD46FFA8A9FD25FFA8FFFFA87DFD0DFFA8FD45FFA9%A9FD26FFA8FFFF537DA8FD0CFFA8FD44FF7EFD28FFA8FFFFFF7DFD0DFFA8%FD43FFA8FD29FFA8FFFF59527DFD0CFFA8FD42FFA8FD2AFFA8FFFFA852FD%0DFFA8FD40FFA9A8FD2BFFA8FFFF7D7DA8FD0CFFA8FD3FFFA9A8FD2CFFA8%FFFF7D7DFD0DFFA8FD3EFFA9FD2EFFA8FFFF7D7DA8FD0CFFA8FD3CFFA8A9%FD2FFFA8FFFF7DA8FD0DFFA8FD3BFF7EFD31FFA8FFFF52A8A8FD0CFFA8FD%3AFF7EFD32FFA8FD07FFA8FFA8FFA8FFA8FFA8FFA8FD38FFA9A9FD33FFA8%FD06FF527DFF7D527D527D527D7DA8FD36FFA8A8FD35FFA8FD06FF7D52A8%527D527D527D27A87DFD35FFA8FD36FF7D7DFD0AFFA8FD06FFA8FD34FF7E%FD38FFA8FD11FFA8FD33FFA9FD39FFA8FD11FFA8FD30FFA9A8A8FD3AFFA8%FD11FFA8FD2FFFA8A9FD3CFFA8FD11FFA8FD2EFF7EFD3EFFA8FD11FFA8FD%2CFFA9A9FD3FFFA8FD11FFA8FD2AFFA8A9FD41FFA8FD11FFA8FD28FFA9A8%FD43FFA8FD11FFA8FD26FFA8A9A8FD44FFA8FD11FFA8FD25FFA8FD47FFA8%FD11FFA8FD23FFA9A8FD48FFA8FD09FFA8FFFFFFA8FFFFFFA8FD21FFA8A9%FD4AFFA8FD06FF5252FFFD0752FFA8FD1FFFA87EFD4CFFA8FD06FF7D52FF%527D527D527D52FF53FD1DFFA9A9FD4DFFA87EFD06FFA8A8A8AFFD08A8FD%1BFFA97EFD50FFA8FD11FFA8FD19FFA8A9FD52FFA8FD11FFA8FD17FFA97E%A9FD53FFA8FD11FFA8FD15FFA8A9A9FD55FFA8FD11FFA8FD12FFA8A9A8FD%58FFA8FD11FFA8FD11FFA8A9FD5AFFA8FD11FFA8FD0EFFA8A8A8FD5CFFA8%FD11FFA8FD0CFFA9A8FD5FFFA8FD11FFA8FD08FFA8A9A8A8FD61FFA8FD11%FFA8FD04FFA9A8A9A8FD65FFA8FD11FFA8A8A87EA9A8FD68FFA8FD11FF7E%FD61FFA8AEA8A8A8AEA8A8A8AEA8A8A8FD06FF7D7DFF7D52527D527D52A8%7DFD0BFFA8FD0BFFA8FD06FF83A8A7A88383A7A883A8A7A883A8A7A88383%A7A883A8A7A883A8A7A883A87DA883A8A7A883A8A7A883A87DA883A8A7A8%83A8A7A883A87DA883A8A7A883A8A7A883A87DAEFD0BFF7DFD06FF7D52FF%527D7D527D7D7DA82E847DA87DA87DA87DA87DA852A87DA87DA87DA87DA8%7DA852A87DA87DA87DFD05A87DFD0BA87DFD0CA87DFD0BA87DFD0BA87DFD%0BA87DFD0BA87D7DFD06FF7DFD04A87DA87DA87D7DA87DFD09FF7DA97DFD%09FF7DA87DFD09FFA8A87DA8FD08FFA87DA8A8FD08FFA87DA87DFD09FF7D%7D7DA8FD08FF7D7DA8A8FD08FFA87DA87DFD07FFA87DA87DA87DFD0EFF7D%7D7DA8FD08FF7E7D7DA8FD08FF7E527D7DFD08FF7D7D7D52FD08FFA8527D%7DFD08FFA8527D7DFD09FF7D7D7D7EFD08FF287D7D7DFD08FF52527D7DFD%08FFFD047D52FD0EFF527D52FD08FFA827A852A8FD08FF527D27A8FD08FF%7D52527DFD08FF7D525952FD08FFA8527D52A8FD08FF7DA852A8FD08FF52%52527DFD08FF7E527D52FD07FFA8527D527D52FDC0FFA8FFFFFFA8A87DFF%FFA8FFFF7DFD72FFA87D28A8527D7D527D7D527D7D7DFD72FFA85252527D%527D5252527D525252FD78FFA8FD06FFA8FDB2FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T11:14:22+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T11:14:22+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T11:14:22+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwO0/L3Urax1WzFxb&#xA;SRajMkzq8bcZfRnM/wDpAFORnB9Ob/J+7CqAX8p9QXkXvLS5/c28bRzQMY5hCbT/AEeYcjW3T6kx&#xA;jXenqH35Nqrab5H1ry011dQ6wZJLw6daG99KNrkj1reB2LSrIopGrhRQj4q9RirMxpV//wBXm8/4&#xA;Cz/7J8Ct/oq+/wCrzef8BZ/9k+Kqc+larwHoazdB+aV5paU4chz6W/XhWnviqp+ir7/q83n/AAFn&#xA;/wBk+Ku/RV9/1ebz/gLP/snxVTuNK1UwSfV9ZuhPwb0S6WnDnT4eVLetK9cVVP0Vff8AV5vP+As/&#xA;+yfFXfoq+/6vN5/wFn/2T4qhdTtL60027uv03dJ9Xhkl5tHbOq8FLVKpbl2Ap0UV8MVQ/wBa/wC1&#xA;prH/AHD/APsywq761/2tNY/7h/8A2ZYqp3F1OYJPq+qaqJ+DeiX088OdPh5Usq0r1xVU+tf9rTWP&#xA;+4f/ANmWKu+tf9rTWP8AuH/9mWKu+tf9rTWP+4f/ANmWKqdvdTiCP6xqmqmfgvrFNPPDnT4uNbKt&#xA;K9MVVPrX/a01j/uH/wDZlirvrX/a01j/ALh//ZliqvpdtfXlhDP+m7tnIKSkRW8Y9WMlJAEktlda&#xA;OpFGGBUX+ir7/q83n/AWf/ZPirv0Vff9Xm8/4Cz/AOyfFVODStV4H19Zui/N6cEtKcOR4dbfrwpX&#xA;3xVU/RV9/wBXm8/4Cz/7J8Vd+ir7/q83n/AWf/ZPiqnBpWq8D6+s3Rfm9OCWlOHI8Otv14Ur74qq&#xA;foq+/wCrzef8BZ/9k+Ku/RV9/wBXm8/4Cz/7J8VWaE18smpW13dPefVboRwTyrGshja3hlo/pJEm&#xA;zyNSi9KYqmmKuxV2Kpdr/wDvDF/zGWX/AFGRYqmOKuxV2KuxV2KuxV2KuxVLvMv/ACjmq/8AMHcf&#xA;8mmxVEXv6S+D6l6Pf1PW5e1KcfpyUa6qpW/6c9ZfrH1X0f2/T9Tl9FdsJ4elo3Q3m2G9m8u3sVlN&#xA;Pb3TooimtkaSVTzG4RHhcin2uDq1K8SDTIJefT3X5pNp62EGnyW1m+nXMalpJ7id5SblFYyy+tOj&#xA;lVhkjEko48uJLH7JVHw6n+aSz3cE9s0FokixxywxCeZLYSqomhDIqPIYTVlZnIau21CoQ1fzFgvJ&#xA;povrt26yXDRyzRKPTt53tSGjjDLG8ixeqVjboy8dqmqqdaNe/mG9/p0t+h+pM6Q3duYUVjG6XJ9d&#xA;2BJR19OCqjYcmHccVKC1TVfzJjvtTS0hne0S6pbzxQRtxg9OcoscUixs5MyRK7+o44tUceyqLsF8&#xA;/P5h0y+1O4misWe5hutPt44zCn936TOwBZlYh/jrttSlTVVlOgf7wy/8xl7/ANRkuBUxxV2KuxV2&#xA;KuxV2KuxV2KpdpX+92s/8xif9QdviqY4q7FXYql2v/7wxf8AMZZf9RkWKpjirsVdirsVdirsVdir&#xA;sVS7zL/yjmq/8wdx/wAmmxVFXd9Da8fVWVudaelDLN0p19JXp174CaQTSlDq1rNKsSJcBm2Be2uI&#xA;1+lnjVR9Jx4kCSD84axd6N5bvtSs40lurdVMUcgLKWZ1TcAoT9rxGFkxXTfzUaSwpfWQj1FJBBIq&#xA;Hioke+mslqjEkEej6jKHOxpyPXDSrPKn5matqeopBe2MbWhtjcyT2qTNKoENo9Ft09d3+O7p8PQf&#xA;I1VRmjfmRJeas2nTae7qlzLBLex8Y0jVtTvrC1DRO7SFj+j/AIyO5rQdMCorUfzEgstXudKbT5jd&#xA;pLHBZo7pD9YL9ZEaTinpL0Lcj8XwkAkAmlQWlfmZdazqWlppmkN+i9QuVt/rlxKsb0axW+qsQDEF&#xA;Y3FQ3cEe+Ks8wKl2gf7wy/8AMZe/9RkuKpjirsVdirsVdirsVdiqF1HUYrKJSVaWeVuFtbJTnK9K&#xA;8Vrt03JOwG52yUY2glAeXFvRLq315o2ujeAyekCEFbWAqq13PFaCp69aDpjKr25KE5yKWKRefYpL&#xA;TVZ/qLhtPZFgT1FImE1zJaRMWAPp1lhbkDUqtD7Yql8H5qR3DBIdLcu7R28IaUKGu5GtVMZPE0jX&#xA;6/H+9oQaEUrSppW4vPMGsWgM9t+jrctpd9aPcM4aW3muLdjJUxrDxVnCnjK2/Wm1VWdAggEGoO4I&#xA;wK7FXYq7FXYq7FXYq7FUHrVrNd6Nf2sABnnt5YogxoCzoVWp7bnFVH6/rP8A1a/+S8f9MVd9f1n/&#xA;AKtf/JeP+mKqV1JqF3bvbXWipcW8o4yQyyxOjDwZWBBxVCfoyGlsP8MWlLMEWg/0f9yCeR9P4fg3&#xA;32xVUitWikhli8u28ctuSbd1aANGWQRsUIWq1RQpp2FMVXpHcI7OmgQq7MHZleEEsJHlDEheokld&#xA;/wDWYnqTiqjJp0crXLyeWbV2vKfXGY25M3E1X1CV+Oh6csVVDBKVVT5fgKpKtwil4aCaMAJIPh2d&#xA;QoAbqMVRf1/Wf+rX/wAl4/6Yqq6NbXFvY8LhQkrzXEzIp5BRPO8oWtBUgPQ4qjcVdirsVdirsVdi&#xA;qD1LU4rJUQKZryclbW0UgPIw69eirWrMdgMnCF+5BKjpmktBPJf3sguNTnHGSUCiRx1qIYQfsoDu&#xA;e7Hc9gDOdihyUBZodxBcXWsSwSJLEbxQHRgyki0gB3G2xytKa4qgH8v6C4nD6basLlnkuQYIz6jy&#xA;Lxdn+H4iy7EnqMVWN5Z8tsrq2k2bLLCttIpt4iGgQgpE3w7opAovQYqhdU0jSbOD6xaWUFvcT3Wn&#xA;rNNFEiO6pdxBAzKASFGwr0xVPMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdiqC1LVI7Mxwovr31xUWtopozlacmJ34otRyc9PckAzhC/cglZpuk/Vppb25k+salcACa4&#xA;IoFUbiKJf2I1PQdSdyScM53sOSgJhlaUu0r/AHu1n/mMT/qDt8VTHFXYq7FUu1//AHhi/wCYyy/6&#xA;jIsVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUFqeppZiOJF9a+&#xA;uSUs7UGhkZRUkn9lEG7t29yQDOEL9wQSs0vSzal7m5cXGp3AH1q6oQCASVjjUk8I0r8K/SasSSZz&#xA;vYclATDK0uxVLtK/3u1n/mMT/qDt8VTHFXYq7FUu1/8A3hi/5jLL/qMixVMcVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqE1LUobCJCymWeZxFa2yU5yyEEhVr7Akk7AVJ2G&#xA;ThDiQSpaXps0LPeXzrPqU4pLIo+CNK1EMVdwi+PVjufAGc72HJQEwytLsVdiqXaV/vdrP/MYn/UH&#xA;b4qmOKsDtvLfnWHTtUtpJxO11PHKhN7MC6xz+pMFcryg+sxH0+KbJTbCqXf4N/MBFf1Lw3QWC2R4&#xA;v0hcx+uI/qnKEOFqnD6vcH1OsnqfFSrUVRlr5f8AOenPdXGrarFfC5/Q0MDkSsscttdqrn0y6j4u&#xA;fJmFCzHtQDFXoIrQV3PcjbArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqF1&#xA;LUbbT7b15+TVYJFEg5SSSNssca92b+00FTkoQMjQQSoabYXAme/1Aq9/KCqIu6W8RofRjO1elXfq&#xA;x9goEpyHIcvvUBMcrS7FXYq7FUq0NZ1utYE7pJL9cWrIpRafVIKfCWc9PfFWGfl/azReddcNx9Uk&#xA;uka6+sS2zqGBluuSqY/rFw/FqGTiyj02Zl6k4VekYFdiqXa//vDF/wAxll/1GRYqmOKuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVDahqNtYQCWcks54QwoOUkrkVCRoN2Y0+7c7An&#xA;JRgZHZBKF0+wupLk6nqQAuiONtaghktoyN1BH2pG/bb/AGI2FTKUhXCOX3qAmeVpdirsVdirsVS7&#xA;Sv8Ae7Wf+YxP+oO3xVinkuC5t/Nurt6h+p3sl9LBELi5kh5w3zJI0MMkrxxnk372kafHXjyXfCrP&#xA;MCuxVLtf/wB4Yv8AmMsv+oyLFUxxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVA6&#xA;jqqWrpbQxm61CYVgtENCQNi7tQiOMd2PyFWoDOML3OwQSs07SmimN7fSC61J14manFI0O/pwrvxS&#xA;vX9pu56UMp3sNgoCY5Wl2KuxV2KuxV2KpdpX+92s/wDMYn/UHb4qwnyMrr+YXmRy7Ms0lx8X1ZIu&#xA;bRTovB3BLH0UKcNqOr8qluQUqyWLzzpMtrf3IhuAliyKoKoDOJpmt4nh+P7Mk0bIvPiajeg3wKgY&#xA;vzS8uzHhBDczSEpFFGqxVe5c24+rLykAEq/XYieRC0P2tjRVZP560PVYxBCWiRP0VqK3ErQiNra5&#xA;uoWjf4ZGZNj0kVT4VGFWZgggEGoO4IwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs&#xA;vdTne5On6Wqy3op68z1MNuCK1kII5OR9mMGp78V3yyMBVy5fei0Rp2mQWKyFWaa5nIa5upSDLKwF&#xA;AWIAAA7KoCjsBgnMlQEXkEuxV2KuxV2KuxV2KpVodxBcXWsSwSJLEbxQHRgyki0gB3G2xxVLvLF/&#xA;rlzq+pC/kle1Du1mrwzQRrEZCYgBNZWx5iOgb9/JvU7dlUZ/g3y3/pNLOgu2Z7gLJKAzOSx2DbUZ&#xA;iy0+yxJFDiq3/BHlajgWCrziSAlXkUhYzGyFSGHFwYIzzHxfCu+wxVQvvL2kadBFPZwGOQT2ECVk&#xA;kdY4lvIaRxI7MsafCPhQAYqyPFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq4kAEk0A3JOKp&#xA;Mb281gmPTHNvp1aSamAC0gHUWoNQQf8AfpFP5eXUXcIh9XPu/X+pF2mVlY2tlbrb2sYjiWppUkkn&#xA;cszGrMxO5Ymp75XKRJsppXyKuxV2KuxV2KuxV2KuxVLtK/3u1n/mMT/qDt8VYr5K1C9vPOPmFZNV&#xA;ku7W2nniis3eH92RKEKmFZ5JUEfp8UJiTkCW3qMKs7wK7FUu1/8A3hi/5jLL/qMixVMcVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVUL2+tLG3M91II4wQo2LMzMaKqqoLMzHYKoqclGJJoKSlosbz&#xA;WCJNUjMGn1rHpZIJk97oqSG/4xA8f5uXQWcQh9PPv/V+tFWnIAAoNgMpS7FXYq7FXYq7FXYq7FXY&#xA;q7FUu0r/AHu1n/mMT/qDt8VY1+XIvZo31Ga2ls4tSiF6bdluEhWa6b15TGJLu5j+KSRmPGJOuFWb&#xA;YFdiqXa//vDF/wAxll/1GRYqmOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVL77WI4Z/qdrGbzUi&#xA;OQtUNAgPR5n3Eae53P7IY7ZZHHYs7BBK2x0lxcLf6jILrUQCIyBSKBWFCkCHpX9pz8TfKgDKe1DY&#xA;KAmWVpdirsVdirsVdirsVdirsVdirsVS7Sv97tZ/5jE/6g7fFUxxVgkS/mCIdeSSO5ZpnIsGD2tV&#xA;43E7O1uefwo9r6KRhxUSVLd2wqlyWv5n/F631xk9KLmEmtAxt/VtuUabj/TPTW45PUJuKNXjRVFW&#xA;0fnSP49UiuKKmkI31ie3a3nvRcW5ndPRLvEA1Vp6dGPI/wAuKvQhWgrse4G+BXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqtmmihieaZ1jijBaSRyFVVG5JJ2AGEC1Sk3Oo6tVbEtZacaVv2Wk0o/4ojcfCv8A&#xA;xY4/1VIo2WUI89z3frRzTCxsLSxh9G2j4KWLuxJZnc9Xd2qzse7Ma5CUieaaRGRV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KpVobTtdawZ0SOX64tVRi60+qQU+Iqh6e2KprirsVdiqXa/wD7wxf8xll/1GRY&#xA;qmOKuxV2KuxV2KuxV2KuxV2KuxV2Kpffazb28xtYEa81CnIWcFC4B6GRiQkS+7kV7VO2WRxk7nYI&#xA;tSi0ia6mW61h1ndG5wWSVNtCR9k0YAyuP52H+qq4TMDaP7VrvTXKkuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVLtK/3u1n/mMT/qDt8VTHFXYq7FUu1//eGL/mMsv+oyLFUxxV2KuxV2KuxV2KuxV2Ku&#xA;xVDX+pWVhGr3MnAueMUYBeSRv5Y41Bdz7KMlGBlyQSgeGs6n/eltLsT/ALqQg3cg/wApxyWEf6lW&#xA;/wApTtk/THzP2ftXcphZWFnZQ+jaxLFHUswXqzHqzE7sx7sdzkJSJNlNK+RV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxVLtK/3u1n/AJjE/wCoO3xVMcVSdPN/l94b+ZLhmj01uF1SKWtebRD0141l&#xA;DSRsimOoLAgYqhR+YPlMglbuR6IjgJb3DFjI0aLGoEdWl5XEYMQ+MchUYq1deYdJ1a0CWEzSmOfS&#xA;7jkYpY1aG6uo2hkjaRVWRXCndCelOuKsjxV2KuxV2KuxV2KuxVSury1tIGnupkghX7UkjBVFdhuf&#xA;HDGJJoKl313Vr+q6fD9Ttj/x/XaMHPX+6tzxf6ZCv+qwyzhjHnv5D9aETY6Ra2kjXFXuLyQcZLyc&#xA;85WUmvGtAFWv7CAL7ZGUyduigI3IJdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7Sv97t&#xA;Z/5jE/6g7fFUxxVjw8i6Eq3ir64W9blKBK21JHmjVP5VjmmeRB2Y+G2Kodfy28tIS0YuEeiFXWZ6&#xA;rOjQt9ZHb1ibWOrd6e5q2q2+8p6VYWytD6j27forTxZysJIVt7W6jEShWBJpybck1qcKsrAAAAFA&#xA;NgBgV2KuxV2KuxVZPcQW8LzXEiwwxiryyMFVR4ljsMIBOwVLP0nqF/VdKt+EJ/6WF0rLHv3ih+GS&#xA;X5ngp7Mcs4BH6vkEWq2mh20UyXV07318m63VxQlCRQ+kgASLbb4FBPeuCWQnYbBaTHK0uxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVodvBb3WsRQRpFELxSERQqgm0gJ2G25xVNcVdi&#xA;rsVS7X/94Yv+Yyy/6jIsVTHFXYq7FULfapYWPAXMwR5NooQC8shHURxqGdzv+yDkowJ5IJQn1rXb&#xA;2otbddPgPS5u/jlI8VgQgCvYu4I7pk6iOZv3fr/HvXdUg0KzWZLi6Z7+7jPKOe6Ifg3jGgCxxn3R&#xA;QcByHkNgtJjlaXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu0r/AHu1n/mM&#xA;T/qDt8VTHFXYq7FUu1//AHhi/wCYyy/6jIsVabzFo3No4rj61IpIeO0V7llI/nEAkK/7KmWeFLur&#xA;37Ito6hrMw/0XTDHtXnezJECD04rD9Yf6GC48MRzPy/AWy0dP1m4BF1qXpIRQpZRLEd+oLymdvpX&#xA;iceKI5D5/gLRRNjpWn2JdraELLJT1Z2JeV6dOcrlnen+UcjKZPNQEXkUuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpdpX+92s/8xif9QdviqY4qwG28xecvqWrLdW9yl0s&#xA;6LaullK/pp65W49ICPjKsVvxeNjX1G2FemFUEvmD8xqN9YguIY/RgM7xWLO0SMbPlNEgV/Umb1bn&#xA;lFvw4D4f51VFdc8438dxp+s2MU14IbO8l0aURQJSC4t5JhDLNxWVCnqF2JIUgD5t1uEFlGn+ZNeu&#xA;bKGew8vpNZSKDBJBfWrxFeg4MlVI+WRJKLPciP035t/6lo/9JsGDdbPcgr3zhr1tcQ2b6PBBfXBD&#xA;Q282oWqySRoaylELKzUQHcdMO62Vez80eYL23S5s9CS5tpK8J4b+2kRqGhoy1B3x3Wz3K36b82/9&#xA;S0f+k2DButnuQd/5t8xWvpwSaLDb3l2WjsI59QtlMsoFQqoSrP7hcO62VWz81a/fwGax0SO4h5Mn&#xA;rw39tMgZTRh8JoSp6iuO62Vb9K+cP+rN/wAPB/2UYN13ULzWfNcFuZGtEhlciOBZUtwhlc8Y4+Zv&#xA;lqWYgbLXwGGiu7rPXtevo5HskjuUidoZHhjtpAsibMjFdRNGXuOuNFd/x/aiPr3m3/ljP/IiD/vI&#xA;YKPeu6E1TzB5i0+0ae4jhtq/BC9yltDG0pB4IWbUO5HbDRXdfa69r1288dqkdw9rIYblYo7ZzHIN&#xA;yjhdRPFvY40V3RH17zb/AMsZ/wCREH/eQwUe9d1C913X7C2e7vo0tbWIVknnjto41BNPiZtRAGGi&#xA;u6np/mDzHdh40jhmu7cIt5DAltJ6UjqG4tTUKivUVAqMaK7or6x5nO7QXQJ6hIrEKPkGumP44KPe&#xA;tHvUbzUL+xtXur6XUbW3jp6lxK+kRxryIUVZ2oKsaCpx4T3rR71DTNX1C8jSJbi9uL1IYpbmO2l0&#xA;hwvqoGVgAxbg/VCeow8PmtHvR3PW/wCTVv8AuU/1wcPmtHvUrq91G0t3ubp9Tt7aIcpZpW0hEVR3&#xA;ZmIAGHh81o96F07Wb67b0Vub2e6Km4WK3l0dz9Wdz6MnEMTRk4/F0J6Y8PmtHvR/LW/5NW/7lP8A&#xA;XBw+a0e9Tnn1KKF5boaqlvEpeV3k0uJVVRUszq6EAdTvjw+a15oHTtWW7ZIkkvJ7mZGuII7e9sXL&#xA;2pkIilUC4JKlaVYbVx4fNeFMhA9N9M1Ynufryiv3XgGPCF4VG6ltbOL1ruy1K3iqqepLqKIvJjRR&#xA;Vr0CpJoMPCF4Q1oGr6ZZnV2vbqKwH16NfQu7uGSeIyW8MaJOwmmAeR424KXrxphpIDKMUuxV2Ksf&#xA;8zeV5tckCm7S3tWtLuynj9H1JGW8j9NmVy6qpWgIqjYqmGg6S2l6cLV5vrErSz3E0oX01MlzM878&#xA;Uq3FeUhoKnbuTviqYYqx/wAzeVpdentllu1j06JZBNa+kxd3dGjWRZVkTi0au3CqsKmtKgUVRflr&#xA;QjounNatP9ZlkleaWUJ6alnP7KVbiKDx98VTXFUk8z+W3136hE119XtbS5iu5o1Vy8j28qSxhWWR&#xA;EWhTfmj9aijAHFWvKHldfLunSWguWumkeNmkK+mKQ28VrGFQFgv7q3TlTq1TtWmKp5iqReafKcXm&#xA;D9Hs97PZvpt1FeQGERMpkikRwWSVHFQEIVu1T16Yq35T8rr5ftZoBcm59VowrlBGRHBCkEStQnkw&#xA;SMcn7nw6YqnmKpL5s0F9b0xbZLsWDxSeqLwKxli/duheFlki4SAPsx5DxUjFVPyz5ah0me9vIrv6&#xA;1HfUMHFQqpD601woqpIduV0/x7VFPCuKpyt3asVCzRkvI0SAMDWRASyDf7S8GqPY4qlHmvy9D5j0&#xA;39Hi6NtNBNHOkiFiUkSpXkI3ibo1R8Q3ocVQ/lTytBpNxc38OoG/ivEAhkIUsVaea5dnlUn1S0tw&#xA;1DsANh3JVZJiqD1nT5NR0m80+O4a1a7heD6wgq6CReJZa0+Kh298VSrRvJ9tpWt3GowTf6PIjR21&#xA;oEC+kJBFzHMGrL/o68BT4d/HFWQ4qlnmXRBreiXOlmY2/wBY4UmAJKmN1kH2WRuq/ssp8CDviqS+&#xA;VPy+h8v38d0l89wkUBhjiKcKM8VtC7Fgx5LxsY+KnoakljSirLcVQes6bHqmk3mnSUCXcLwljzoC&#xA;6kA/u2ifY7/C6nwIxVjflz8uodF1G2uxfvciBXZlkQc3uJOYeQyFmbhSVqIa771w2rMMCpd5i0qf&#xA;VdHuNPgnS2e4AX1pIzMFFd/gDxb0/wArFWK6h+Vq3zXbyakFkuXkZWW3T4FuVuluBuxLE/X5PTJP&#xA;wUXZt6lWd4FdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7qH17aWCvH1UZOVK05ClaYq87/wCV&#xA;Q3YtLuD/ABBKWnq1vKYn5QyC2nghcATBW9F7hXTYfYVa9wbVdf8A5Vaje3ME41iO1+rtd+mq25m2&#xA;ufrig/FKiDkt8GlBQlmQUYY2ra/lRqMdvBHFrqRzRy280tyLM+q5tk4KA/r81AWgX4jTvyBpjaGa&#xA;eXtMl0zSo7SZleX1JppPTqEVp5nmKJXfihk4r7DAlMcVdirsVdirsVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0A352559142068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0A352559142068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0A352559142068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T11:14:22+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -215.165 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 215.165 li
292.086 215.165 li
292.086 0 li
cp
clp
[1 0 0 1 0 0 ]ct
34.4067 197.545 mo
285.507 197.545 li
285.507 3.14551 li
34.4067 3.14551 li
34.4067 197.545 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
34.4067 197.545 mo
285.507 197.545 li
285.507 3.14551 li
34.4067 3.14551 li
34.4067 197.545 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
34.4067 192.37 mo
62.3066 185.263 li
90.2065 173.211 li
118.106 158.612 li
146.007 142.468 li
173.906 123.311 li
201.807 101.604 li
229.707 78.043 li
257.606 48.2256 li
285.507 21.2661 li
.884 .769 0 0 cmyk
@
34.4067 196.927 mo
62.3066 196.927 li
90.2065 196.619 li
118.106 195.923 li
146.007 195.614 li
173.906 195.614 li
201.807 194.61 li
229.707 194.688 li
257.606 193.992 li
285.507 193.374 li
.873 .242 1 .129 cmyk
@
grestore
34.4067 197.545 mo
34.4067 195.295 li
34.4067 197.545 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
34.4067 197.545 mo
34.4067 195.295 li
@
34.4067 5.39551 mo
34.4067 3.14551 li
34.4067 5.39551 li
cp
f
34.4067 3.14551 mo
34.4067 5.39551 li
@
31.5391 204.368 mo
32.626 204.368 li
32.626 200.615 li
31.4443 200.851 li
31.4443 200.244 li
32.6191 200.007 li
33.2871 200.007 li
33.2871 204.368 li
34.374 204.368 li
34.374 204.928 li
31.5391 204.928 li
31.5391 204.368 li
cp
f
37.1416 200.446 mo
36.7974 200.446 36.541 200.615 36.3652 200.953 cv
36.1899 201.29 36.1089 201.796 36.1089 202.471 cv
36.1089 203.146 36.1899 203.653 36.3652 203.99 cv
36.541 204.328 36.7974 204.497 37.1416 204.497 cv
37.4858 204.497 37.7427 204.328 37.918 203.99 cv
38.0869 203.653 38.1743 203.146 38.1743 202.471 cv
38.1743 201.796 38.0869 201.29 37.918 200.953 cv
37.7427 200.615 37.4858 200.446 37.1416 200.446 cv
37.1416 199.919 mo
37.6885 199.919 38.1069 200.143 38.4038 200.575 cv
38.6943 201.013 38.8428 201.647 38.8428 202.471 cv
38.8428 203.301 38.6943 203.936 38.4038 204.368 cv
38.1069 204.799 37.6885 205.016 37.1416 205.016 cv
36.5884 205.016 36.1631 204.799 35.8726 204.368 cv
35.5825 203.936 35.4409 203.301 35.4409 202.471 cv
35.4409 201.647 35.5825 201.013 35.8726 200.575 cv
36.1631 200.143 36.5884 199.919 37.1416 199.919 cv
f
62.3066 197.545 mo
62.3066 195.295 li
f
62.3066 197.545 mo
62.3066 195.295 li
@
62.3066 3.14551 mo
62.3066 5.39551 li
f
62.3066 3.14551 mo
62.3066 5.39551 li
@
59.7749 204.368 mo
62.0967 204.368 li
62.0967 204.928 li
58.9717 204.928 li
58.9717 204.368 li
59.2212 204.112 59.5654 203.76 60.0044 203.315 cv
60.4365 202.876 60.7134 202.593 60.8281 202.464 cv
61.0439 202.228 61.1924 202.026 61.2734 201.857 cv
61.3545 201.695 61.4019 201.526 61.4019 201.364 cv
61.4019 201.108 61.3071 200.891 61.125 200.729 cv
60.9429 200.567 60.7065 200.48 60.4092 200.48 cv
60.2002 200.48 59.9775 200.52 59.748 200.588 cv
59.5186 200.663 59.2686 200.77 59.0054 200.918 cv
59.0054 200.244 li
59.2754 200.136 59.5254 200.055 59.7549 200 cv
59.9844 199.948 60.2002 199.92 60.396 199.92 cv
60.9023 199.92 61.3071 200.047 61.6108 200.304 cv
61.9146 200.561 62.0698 200.899 62.0698 201.324 cv
62.0698 201.526 62.0293 201.721 61.9551 201.897 cv
61.8809 202.081 61.7461 202.295 61.5435 202.539 cv
61.4893 202.606 61.314 202.788 61.0171 203.092 cv
60.7197 203.395 60.3081 203.821 59.7749 204.368 cv
f
64.9185 200.446 mo
64.5742 200.446 64.3179 200.615 64.1421 200.953 cv
63.9668 201.29 63.8857 201.796 63.8857 202.471 cv
63.8857 203.146 63.9668 203.653 64.1421 203.99 cv
64.3179 204.328 64.5742 204.497 64.9185 204.497 cv
65.2627 204.497 65.519 204.328 65.6948 203.99 cv
65.8633 203.653 65.9512 203.146 65.9512 202.471 cv
65.9512 201.796 65.8633 201.29 65.6948 200.953 cv
65.519 200.615 65.2627 200.446 64.9185 200.446 cv
64.9185 199.919 mo
65.4653 199.919 65.8838 200.143 66.1807 200.575 cv
66.4712 201.013 66.6196 201.647 66.6196 202.471 cv
66.6196 203.301 66.4712 203.936 66.1807 204.368 cv
65.8838 204.799 65.4653 205.016 64.9185 205.016 cv
64.3647 205.016 63.9399 204.799 63.6494 204.368 cv
63.3594 203.936 63.2173 203.301 63.2173 202.471 cv
63.2173 201.647 63.3594 201.013 63.6494 200.575 cv
63.9399 200.143 64.3647 199.919 64.9185 199.919 cv
f
90.207 197.545 mo
90.207 195.295 li
f
90.207 197.545 mo
90.207 195.295 li
@
90.207 3.14551 mo
90.207 5.39551 li
f
90.207 3.14551 mo
90.207 5.39551 li
@
89.1328 202.276 mo
89.4497 202.342 89.6997 202.485 89.875 202.701 cv
90.0508 202.917 90.145 203.186 90.145 203.497 cv
90.145 203.983 89.9766 204.362 89.6455 204.625 cv
89.3081 204.887 88.8354 205.016 88.2212 205.016 cv
88.0122 205.016 87.7959 204.996 87.5801 204.956 cv
87.3643 204.921 87.1348 204.861 86.9053 204.78 cv
86.9053 204.139 li
87.0874 204.247 87.29 204.328 87.5127 204.381 cv
87.7285 204.436 87.958 204.462 88.2012 204.462 cv
88.6196 204.462 88.937 204.381 89.1528 204.219 cv
89.3687 204.057 89.4834 203.815 89.4834 203.497 cv
89.4834 203.213 89.3823 202.985 89.1797 202.823 cv
88.9775 202.661 88.6938 202.573 88.3291 202.573 cv
87.7554 202.573 li
87.7554 202.026 li
88.3564 202.026 li
88.6802 202.026 88.9302 201.965 89.1055 201.831 cv
89.2813 201.702 89.3687 201.512 89.3687 201.262 cv
89.3687 201.013 89.2744 200.817 89.0986 200.682 cv
88.9165 200.547 88.6602 200.48 88.3291 200.48 cv
88.147 200.48 87.9512 200.5 87.7422 200.541 cv
87.5327 200.581 87.3032 200.642 87.0537 200.723 cv
87.0537 200.129 li
87.3032 200.061 87.5396 200.007 87.7622 199.973 cv
87.9785 199.94 88.1875 199.919 88.3901 199.919 cv
88.8896 199.919 89.2876 200.034 89.585 200.264 cv
89.8818 200.494 90.0303 200.803 90.0303 201.196 cv
90.0303 201.465 89.9492 201.695 89.7939 201.883 cv
89.6387 202.073 89.416 202.208 89.1328 202.276 cv
f
92.8315 200.446 mo
92.4873 200.446 92.231 200.615 92.0557 200.953 cv
91.8799 201.29 91.7988 201.796 91.7988 202.471 cv
91.7988 203.146 91.8799 203.653 92.0557 203.99 cv
92.231 204.328 92.4873 204.497 92.8315 204.497 cv
93.1758 204.497 93.4326 204.328 93.6079 203.99 cv
93.7769 203.653 93.8643 203.146 93.8643 202.471 cv
93.8643 201.796 93.7769 201.29 93.6079 200.953 cv
93.4326 200.615 93.1758 200.446 92.8315 200.446 cv
92.8315 199.919 mo
93.3784 199.919 93.7969 200.143 94.0938 200.575 cv
94.3843 201.013 94.5327 201.647 94.5327 202.471 cv
94.5327 203.301 94.3843 203.936 94.0938 204.368 cv
93.7969 204.799 93.3784 205.016 92.8315 205.016 cv
92.2783 205.016 91.853 204.799 91.5625 204.368 cv
91.2725 203.936 91.1309 203.301 91.1309 202.471 cv
91.1309 201.647 91.2725 201.013 91.5625 200.575 cv
91.853 200.143 92.2783 199.919 92.8315 199.919 cv
f
118.106 197.545 mo
118.106 195.295 li
f
118.106 197.545 mo
118.106 195.295 li
@
118.106 3.14551 mo
118.106 5.39551 li
f
118.106 3.14551 mo
118.106 5.39551 li
@
116.751 200.588 mo
115.071 203.213 li
116.751 203.213 li
116.751 200.588 li
116.576 200.007 mo
117.413 200.007 li
117.413 203.213 li
118.115 203.213 li
118.115 203.767 li
117.413 203.767 li
117.413 204.928 li
116.751 204.928 li
116.751 203.767 li
114.531 203.767 li
114.531 203.125 li
116.576 200.007 li
cp
f
120.64 200.446 mo
120.295 200.446 120.039 200.615 119.863 200.953 cv
119.688 201.29 119.606 201.796 119.606 202.471 cv
119.606 203.146 119.688 203.653 119.863 203.99 cv
120.039 204.328 120.295 204.497 120.64 204.497 cv
120.984 204.497 121.24 204.328 121.416 203.99 cv
121.584 203.653 121.672 203.146 121.672 202.471 cv
121.672 201.796 121.584 201.29 121.416 200.953 cv
121.24 200.615 120.984 200.446 120.64 200.446 cv
120.64 199.919 mo
121.186 199.919 121.604 200.143 121.902 200.575 cv
122.192 201.013 122.34 201.647 122.34 202.471 cv
122.34 203.301 122.192 203.936 121.902 204.368 cv
121.604 204.799 121.186 205.016 120.64 205.016 cv
120.086 205.016 119.661 204.799 119.371 204.368 cv
119.08 203.936 118.938 203.301 118.938 202.471 cv
118.938 201.647 119.08 201.013 119.371 200.575 cv
119.661 200.143 120.086 199.919 120.64 199.919 cv
f
146.007 197.545 mo
146.007 195.295 li
f
146.007 197.545 mo
146.007 195.295 li
@
146.007 3.14551 mo
146.007 5.39551 li
f
146.007 3.14551 mo
146.007 5.39551 li
@
142.921 200.007 mo
145.533 200.007 li
145.533 200.567 li
143.529 200.567 li
143.529 201.776 li
143.623 201.743 143.725 201.715 143.819 201.702 cv
143.914 201.688 144.015 201.674 144.109 201.674 cv
144.656 201.674 145.088 201.83 145.412 202.127 cv
145.736 202.431 145.898 202.835 145.898 203.348 cv
145.898 203.882 145.729 204.293 145.398 204.584 cv
145.067 204.874 144.602 205.016 144.008 205.016 cv
143.799 205.016 143.589 204.996 143.374 204.969 cv
143.157 204.934 142.941 204.887 142.712 204.813 cv
142.712 204.145 li
142.908 204.252 143.11 204.334 143.326 204.388 cv
143.535 204.442 143.758 204.462 143.994 204.462 cv
144.373 204.462 144.676 204.368 144.899 204.167 cv
145.115 203.963 145.229 203.693 145.229 203.348 cv
145.229 203.011 145.115 202.741 144.899 202.539 cv
144.676 202.336 144.373 202.235 143.994 202.235 cv
143.819 202.235 143.637 202.254 143.461 202.295 cv
143.286 202.336 143.104 202.397 142.921 202.479 cv
142.921 200.007 li
f
148.632 200.446 mo
148.288 200.446 148.031 200.615 147.855 200.953 cv
147.68 201.29 147.599 201.796 147.599 202.471 cv
147.599 203.146 147.68 203.653 147.855 203.99 cv
148.031 204.328 148.288 204.497 148.632 204.497 cv
148.976 204.497 149.232 204.328 149.408 203.99 cv
149.577 203.653 149.665 203.146 149.665 202.471 cv
149.665 201.796 149.577 201.29 149.408 200.953 cv
149.232 200.615 148.976 200.446 148.632 200.446 cv
148.632 199.919 mo
149.179 199.919 149.597 200.143 149.894 200.575 cv
150.184 201.013 150.333 201.647 150.333 202.471 cv
150.333 203.301 150.184 203.936 149.894 204.368 cv
149.597 204.799 149.179 205.016 148.632 205.016 cv
148.078 205.016 147.653 204.799 147.363 204.368 cv
147.073 203.936 146.931 203.301 146.931 202.471 cv
146.931 201.647 147.073 201.013 147.363 200.575 cv
147.653 200.143 148.078 199.919 148.632 199.919 cv
f
173.906 197.545 mo
173.906 195.295 li
f
173.906 197.545 mo
173.906 195.295 li
@
173.906 3.14551 mo
173.906 5.39551 li
f
173.906 3.14551 mo
173.906 5.39551 li
@
172.298 202.202 mo
172.001 202.202 171.765 202.309 171.589 202.512 cv
171.413 202.714 171.325 202.998 171.325 203.348 cv
171.325 203.707 171.413 203.99 171.589 204.192 cv
171.765 204.395 172.001 204.497 172.298 204.497 cv
172.595 204.497 172.831 204.395 173.007 204.192 cv
173.182 203.99 173.27 203.707 173.27 203.348 cv
173.27 202.998 173.182 202.714 173.007 202.512 cv
172.831 202.309 172.595 202.202 172.298 202.202 cv
173.621 200.116 mo
173.621 200.723 li
173.452 200.642 173.283 200.581 173.114 200.541 cv
172.938 200.5 172.771 200.479 172.608 200.479 cv
172.163 200.479 171.825 200.628 171.596 200.924 cv
171.366 201.223 171.231 201.674 171.204 202.268 cv
171.332 202.08 171.494 201.931 171.69 201.831 cv
171.886 201.729 172.102 201.674 172.338 201.674 cv
172.831 201.674 173.223 201.831 173.506 202.127 cv
173.789 202.424 173.938 202.835 173.938 203.348 cv
173.938 203.854 173.782 204.26 173.485 204.564 cv
173.188 204.868 172.79 205.016 172.298 205.016 cv
171.73 205.016 171.292 204.799 170.995 204.368 cv
170.691 203.936 170.543 203.301 170.543 202.471 cv
170.543 201.695 170.725 201.074 171.097 200.615 cv
171.461 200.156 171.96 199.92 172.581 199.92 cv
172.743 199.92 172.912 199.94 173.088 199.967 cv
173.256 200 173.432 200.047 173.621 200.116 cv
f
176.51 200.446 mo
176.166 200.446 175.909 200.615 175.733 200.953 cv
175.558 201.29 175.478 201.796 175.478 202.471 cv
175.478 203.146 175.558 203.653 175.733 203.99 cv
175.909 204.328 176.166 204.497 176.51 204.497 cv
176.854 204.497 177.11 204.328 177.286 203.99 cv
177.455 203.653 177.543 203.146 177.543 202.471 cv
177.543 201.796 177.455 201.29 177.286 200.953 cv
177.11 200.615 176.854 200.446 176.51 200.446 cv
176.51 199.919 mo
177.057 199.919 177.476 200.143 177.772 200.575 cv
178.063 201.013 178.21 201.647 178.21 202.471 cv
178.21 203.301 178.063 203.936 177.772 204.368 cv
177.476 204.799 177.057 205.016 176.51 205.016 cv
175.956 205.016 175.531 204.799 175.241 204.368 cv
174.95 203.936 174.809 203.301 174.809 202.471 cv
174.809 201.647 174.95 201.013 175.241 200.575 cv
175.531 200.143 175.956 199.919 176.51 199.919 cv
f
201.807 197.545 mo
201.807 195.295 li
f
201.807 197.545 mo
201.807 195.295 li
@
201.807 3.14551 mo
201.807 5.39551 li
f
201.807 3.14551 mo
201.807 5.39551 li
@
198.563 200.007 mo
201.729 200.007 li
201.729 200.291 li
199.94 204.928 li
199.245 204.928 li
200.926 200.567 li
198.563 200.567 li
198.563 200.007 li
cp
f
204.449 200.446 mo
204.104 200.446 203.849 200.615 203.673 200.953 cv
203.498 201.29 203.417 201.796 203.417 202.471 cv
203.417 203.146 203.498 203.653 203.673 203.99 cv
203.849 204.328 204.104 204.497 204.449 204.497 cv
204.794 204.497 205.05 204.328 205.226 203.99 cv
205.395 203.653 205.482 203.146 205.482 202.471 cv
205.482 201.796 205.395 201.29 205.226 200.953 cv
205.05 200.615 204.794 200.446 204.449 200.446 cv
204.449 199.919 mo
204.996 199.919 205.414 200.143 205.712 200.575 cv
206.002 201.013 206.15 201.647 206.15 202.471 cv
206.15 203.301 206.002 203.936 205.712 204.368 cv
205.414 204.799 204.996 205.016 204.449 205.016 cv
203.896 205.016 203.471 204.799 203.181 204.368 cv
202.891 203.936 202.749 203.301 202.749 202.471 cv
202.749 201.647 202.891 201.013 203.181 200.575 cv
203.471 200.143 203.896 199.919 204.449 199.919 cv
f
229.707 197.545 mo
229.707 195.295 li
f
229.707 197.545 mo
229.707 195.295 li
@
229.707 3.14551 mo
229.707 5.39551 li
f
229.707 3.14551 mo
229.707 5.39551 li
@
228.008 202.592 mo
227.691 202.592 227.44 202.68 227.259 202.848 cv
227.077 203.018 226.988 203.247 226.988 203.543 cv
226.988 203.842 227.077 204.078 227.259 204.247 cv
227.44 204.415 227.691 204.497 228.008 204.497 cv
228.318 204.497 228.568 204.415 228.75 204.24 cv
228.933 204.071 229.027 203.842 229.027 203.543 cv
229.027 203.247 228.933 203.018 228.757 202.848 cv
228.575 202.68 228.325 202.592 228.008 202.592 cv
227.34 202.309 mo
227.057 202.242 226.833 202.107 226.671 201.911 cv
226.509 201.715 226.435 201.479 226.435 201.196 cv
226.435 200.803 226.57 200.494 226.854 200.264 cv
227.13 200.034 227.515 199.92 228.008 199.92 cv
228.494 199.92 228.879 200.034 229.162 200.264 cv
229.438 200.494 229.581 200.803 229.581 201.196 cv
229.581 201.479 229.499 201.715 229.338 201.911 cv
229.176 202.107 228.96 202.242 228.676 202.309 cv
228.993 202.383 229.243 202.532 229.426 202.748 cv
229.601 202.963 229.695 203.234 229.695 203.543 cv
229.695 204.024 229.547 204.387 229.257 204.638 cv
228.96 204.895 228.548 205.016 228.008 205.016 cv
227.461 205.016 227.042 204.895 226.753 204.638 cv
226.462 204.387 226.32 204.024 226.32 203.543 cv
226.32 203.234 226.408 202.963 226.59 202.748 cv
226.766 202.532 227.016 202.383 227.34 202.309 cv
227.097 201.256 mo
227.097 201.512 227.171 201.715 227.333 201.856 cv
227.495 201.999 227.718 202.066 228.008 202.066 cv
228.291 202.066 228.514 201.999 228.676 201.856 cv
228.839 201.715 228.919 201.512 228.919 201.256 cv
228.919 201 228.839 200.803 228.676 200.662 cv
228.514 200.52 228.291 200.446 228.008 200.446 cv
227.718 200.446 227.495 200.52 227.333 200.662 cv
227.171 200.803 227.097 201 227.097 201.256 cv
f
232.301 200.446 mo
231.957 200.446 231.7 200.615 231.524 200.953 cv
231.35 201.29 231.269 201.796 231.269 202.471 cv
231.269 203.146 231.35 203.653 231.524 203.99 cv
231.7 204.328 231.957 204.497 232.301 204.497 cv
232.645 204.497 232.901 204.328 233.077 203.99 cv
233.246 203.653 233.334 203.146 233.334 202.471 cv
233.334 201.796 233.246 201.29 233.077 200.953 cv
232.901 200.615 232.645 200.446 232.301 200.446 cv
232.301 199.919 mo
232.848 199.919 233.267 200.143 233.563 200.575 cv
233.854 201.013 234.002 201.647 234.002 202.471 cv
234.002 203.301 233.854 203.936 233.563 204.368 cv
233.267 204.799 232.848 205.016 232.301 205.016 cv
231.748 205.016 231.322 204.799 231.031 204.368 cv
230.742 203.936 230.601 203.301 230.601 202.471 cv
230.601 201.647 230.742 201.013 231.031 200.575 cv
231.322 200.143 231.748 199.919 232.301 199.919 cv
f
257.606 197.545 mo
257.606 195.295 li
f
257.606 197.545 mo
257.606 195.295 li
@
257.606 3.14551 mo
257.606 5.39551 li
f
257.606 3.14551 mo
257.606 5.39551 li
@
254.486 204.827 mo
254.486 204.219 li
254.648 204.299 254.817 204.362 254.992 204.402 cv
255.161 204.442 255.33 204.462 255.499 204.462 cv
255.931 204.462 256.269 204.321 256.498 204.024 cv
256.727 203.727 256.862 203.282 256.903 202.674 cv
256.768 202.863 256.605 203.01 256.417 203.112 cv
256.221 203.213 256.005 203.26 255.769 203.26 cv
255.27 203.26 254.878 203.112 254.594 202.815 cv
254.311 202.518 254.169 202.114 254.169 201.594 cv
254.169 201.094 254.317 200.689 254.614 200.379 cv
254.912 200.075 255.31 199.92 255.81 199.92 cv
256.376 199.92 256.815 200.143 257.112 200.574 cv
257.409 201.013 257.564 201.648 257.564 202.471 cv
257.564 203.254 257.375 203.869 257.011 204.328 cv
256.64 204.787 256.146 205.016 255.526 205.016 cv
255.357 205.016 255.188 204.996 255.02 204.969 cv
254.844 204.942 254.669 204.895 254.486 204.827 cv
255.81 202.741 mo
256.106 202.741 256.343 202.64 256.519 202.438 cv
256.693 202.235 256.781 201.952 256.781 201.594 cv
256.781 201.243 256.693 200.959 256.519 200.756 cv
256.343 200.554 256.106 200.446 255.81 200.446 cv
255.513 200.446 255.276 200.554 255.101 200.756 cv
254.925 200.959 254.838 201.243 254.838 201.594 cv
254.838 201.952 254.925 202.235 255.101 202.438 cv
255.276 202.64 255.513 202.741 255.81 202.741 cv
f
260.184 200.446 mo
259.839 200.446 259.583 200.615 259.407 200.953 cv
259.231 201.29 259.15 201.796 259.15 202.471 cv
259.15 203.146 259.231 203.653 259.407 203.99 cv
259.583 204.328 259.839 204.497 260.184 204.497 cv
260.527 204.497 260.784 204.328 260.96 203.99 cv
261.128 203.653 261.216 203.146 261.216 202.471 cv
261.216 201.796 261.128 201.29 260.96 200.953 cv
260.784 200.615 260.527 200.446 260.184 200.446 cv
260.184 199.919 mo
260.73 199.919 261.148 200.143 261.445 200.575 cv
261.736 201.013 261.885 201.647 261.885 202.471 cv
261.885 203.301 261.736 203.936 261.445 204.368 cv
261.148 204.799 260.73 205.016 260.184 205.016 cv
259.63 205.016 259.205 204.799 258.914 204.368 cv
258.624 203.936 258.482 203.301 258.482 202.471 cv
258.482 201.647 258.624 201.013 258.914 200.575 cv
259.205 200.143 259.63 199.919 260.184 199.919 cv
f
285.507 197.545 mo
285.507 195.295 li
f
285.507 197.545 mo
285.507 195.295 li
@
285.507 3.14551 mo
285.507 5.39551 li
f
285.507 3.14551 mo
285.507 5.39551 li
@
280.49 204.368 mo
281.577 204.368 li
281.577 200.615 li
280.396 200.851 li
280.396 200.244 li
281.57 200.007 li
282.238 200.007 li
282.238 204.368 li
283.325 204.368 li
283.325 204.928 li
280.49 204.928 li
280.49 204.368 li
cp
f
286.093 200.446 mo
285.749 200.446 285.492 200.615 285.316 200.953 cv
285.142 201.29 285.06 201.796 285.06 202.471 cv
285.06 203.146 285.142 203.653 285.316 203.99 cv
285.492 204.328 285.749 204.497 286.093 204.497 cv
286.437 204.497 286.693 204.328 286.869 203.99 cv
287.038 203.653 287.125 203.146 287.125 202.471 cv
287.125 201.796 287.038 201.29 286.869 200.953 cv
286.693 200.615 286.437 200.446 286.093 200.446 cv
286.093 199.919 mo
286.64 199.919 287.059 200.143 287.354 200.575 cv
287.646 201.013 287.794 201.647 287.794 202.471 cv
287.794 203.301 287.646 203.936 287.354 204.368 cv
287.059 204.799 286.64 205.016 286.093 205.016 cv
285.539 205.016 285.114 204.799 284.823 204.368 cv
284.534 203.936 284.392 203.301 284.392 202.471 cv
284.392 201.647 284.534 201.013 284.823 200.575 cv
285.114 200.143 285.539 199.919 286.093 199.919 cv
f
290.386 200.446 mo
290.042 200.446 289.785 200.615 289.609 200.953 cv
289.435 201.29 289.354 201.796 289.354 202.471 cv
289.354 203.146 289.435 203.653 289.609 203.99 cv
289.785 204.328 290.042 204.497 290.386 204.497 cv
290.729 204.497 290.986 204.328 291.162 203.99 cv
291.331 203.653 291.419 203.146 291.419 202.471 cv
291.419 201.796 291.331 201.29 291.162 200.953 cv
290.986 200.615 290.729 200.446 290.386 200.446 cv
290.386 199.919 mo
290.933 199.919 291.352 200.143 291.647 200.575 cv
291.938 201.013 292.086 201.647 292.086 202.471 cv
292.086 203.301 291.938 203.936 291.647 204.368 cv
291.352 204.799 290.933 205.016 290.386 205.016 cv
289.832 205.016 289.407 204.799 289.116 204.368 cv
288.827 203.936 288.685 203.301 288.685 202.471 cv
288.685 201.647 288.827 201.013 289.116 200.575 cv
289.407 200.143 289.832 199.919 290.386 199.919 cv
f
145.799 209.15 mo
146.407 209.15 li
146.407 214.28 li
145.799 214.28 li
145.799 209.15 li
cp
f
150.834 212.282 mo
150.834 212.579 li
148.047 212.579 li
148.074 212.997 148.195 213.321 148.425 213.538 cv
148.647 213.753 148.958 213.862 149.363 213.862 cv
149.593 213.862 149.822 213.834 150.038 213.78 cv
150.254 213.726 150.477 213.639 150.693 213.517 cv
150.693 214.09 li
150.477 214.185 150.254 214.259 150.024 214.299 cv
149.795 214.34 149.559 214.368 149.329 214.368 cv
148.735 214.368 148.27 214.199 147.925 213.862 cv
147.581 213.524 147.412 213.058 147.412 212.471 cv
147.412 211.87 147.574 211.391 147.898 211.033 cv
148.222 210.682 148.668 210.5 149.221 210.5 cv
149.721 210.5 150.112 210.662 150.402 210.979 cv
150.686 211.303 150.834 211.735 150.834 212.282 cv
150.227 212.106 mo
150.22 211.776 150.126 211.512 149.95 211.309 cv
149.768 211.114 149.525 211.012 149.228 211.012 cv
148.891 211.012 148.621 211.114 148.418 211.303 cv
148.216 211.493 148.094 211.762 148.067 212.106 cv
150.227 212.106 li
f
154.898 212.052 mo
154.898 214.28 li
154.291 214.28 li
154.291 212.073 li
154.291 211.721 154.216 211.465 154.082 211.29 cv
153.946 211.114 153.744 211.026 153.474 211.026 cv
153.143 211.026 152.887 211.134 152.698 211.343 cv
152.509 211.553 152.414 211.836 152.414 212.194 cv
152.414 214.28 li
151.807 214.28 li
151.807 210.587 li
152.414 210.587 li
152.414 211.161 li
152.556 210.946 152.725 210.776 152.927 210.668 cv
153.123 210.561 153.353 210.5 153.609 210.5 cv
154.027 210.5 154.352 210.635 154.567 210.898 cv
154.783 211.161 154.898 211.546 154.898 212.052 cv
f
157.564 209.157 mo
157.268 209.668 157.052 210.169 156.91 210.663 cv
156.761 211.155 156.694 211.654 156.694 212.161 cv
156.694 212.673 156.761 213.172 156.91 213.666 cv
157.052 214.165 157.268 214.657 157.564 215.165 cv
157.038 215.165 li
156.707 214.645 156.458 214.145 156.295 213.645 cv
156.134 213.146 156.053 212.653 156.053 212.161 cv
156.053 211.674 156.134 211.182 156.295 210.682 cv
156.458 210.182 156.701 209.676 157.038 209.157 cv
157.564 209.157 li
f
161.169 211.148 mo
161.169 209.149 li
161.777 209.149 li
161.777 214.28 li
161.169 214.28 li
161.169 213.727 li
161.041 213.949 160.878 214.112 160.683 214.211 cv
160.487 214.313 160.258 214.368 159.987 214.368 cv
159.542 214.368 159.178 214.192 158.895 213.84 cv
158.611 213.491 158.476 213.017 158.476 212.437 cv
158.476 211.857 158.611 211.391 158.895 211.034 cv
159.178 210.682 159.542 210.5 159.987 210.5 cv
160.258 210.5 160.487 210.553 160.683 210.663 cv
160.878 210.77 161.041 210.931 161.169 211.148 cv
159.104 212.437 mo
159.104 212.883 159.191 213.234 159.374 213.491 cv
159.556 213.747 159.813 213.868 160.136 213.868 cv
160.454 213.868 160.704 213.747 160.893 213.491 cv
161.075 213.234 161.169 212.883 161.169 212.437 cv
161.169 211.992 161.075 211.647 160.893 211.391 cv
160.704 211.134 160.454 211.006 160.136 211.006 cv
159.813 211.006 159.556 211.134 159.374 211.391 cv
159.191 211.647 159.104 211.992 159.104 212.437 cv
f
164.706 212.423 mo
164.214 212.423 163.875 212.485 163.687 212.592 cv
163.498 212.708 163.403 212.896 163.403 213.167 cv
163.403 213.381 163.471 213.557 163.613 213.679 cv
163.754 213.807 163.949 213.868 164.193 213.868 cv
164.53 213.868 164.801 213.753 165.003 213.51 cv
165.206 213.274 165.307 212.957 165.307 212.559 cv
165.307 212.423 li
164.706 212.423 li
165.914 212.174 mo
165.914 214.28 li
165.307 214.28 li
165.307 213.719 li
165.165 213.949 164.989 214.111 164.787 214.212 cv
164.584 214.313 164.327 214.368 164.031 214.368 cv
163.653 214.368 163.35 214.266 163.126 214.057 cv
162.904 213.848 162.796 213.564 162.796 213.207 cv
162.796 212.795 162.931 212.485 163.214 212.268 cv
163.491 212.059 163.902 211.952 164.456 211.952 cv
165.307 211.952 li
165.307 211.89 li
165.307 211.614 165.212 211.397 165.029 211.243 cv
164.848 211.094 164.592 211.012 164.261 211.012 cv
164.044 211.012 163.842 211.04 163.64 211.094 cv
163.437 211.148 163.248 211.222 163.066 211.317 cv
163.066 210.756 li
163.282 210.675 163.498 210.608 163.707 210.567 cv
163.916 210.527 164.119 210.5 164.321 210.5 cv
164.854 210.5 165.253 210.641 165.516 210.918 cv
165.779 211.195 165.914 211.614 165.914 212.174 cv
f
167.764 209.542 mo
167.764 210.587 li
169.013 210.587 li
169.013 211.06 li
167.764 211.06 li
167.764 213.065 li
167.764 213.369 167.804 213.564 167.885 213.645 cv
167.966 213.733 168.135 213.774 168.392 213.774 cv
169.013 213.774 li
169.013 214.28 li
168.392 214.28 li
167.919 214.28 167.595 214.192 167.419 214.016 cv
167.244 213.84 167.156 213.524 167.156 213.065 cv
167.156 211.06 li
166.711 211.06 li
166.711 210.587 li
167.156 210.587 li
167.156 209.542 li
167.764 209.542 li
f
171.489 212.423 mo
170.997 212.423 170.659 212.485 170.471 212.592 cv
170.282 212.708 170.187 212.896 170.187 213.167 cv
170.187 213.381 170.255 213.557 170.396 213.679 cv
170.538 213.807 170.733 213.868 170.977 213.868 cv
171.314 213.868 171.584 213.753 171.787 213.51 cv
171.989 213.274 172.091 212.957 172.091 212.559 cv
172.091 212.423 li
171.489 212.423 li
172.698 212.174 mo
172.698 214.28 li
172.091 214.28 li
172.091 213.719 li
171.948 213.949 171.773 214.111 171.571 214.212 cv
171.368 214.313 171.111 214.368 170.814 214.368 cv
170.437 214.368 170.133 214.266 169.91 214.057 cv
169.688 213.848 169.579 213.564 169.579 213.207 cv
169.579 212.795 169.715 212.485 169.998 212.268 cv
170.274 212.059 170.687 211.952 171.24 211.952 cv
172.091 211.952 li
172.091 211.89 li
172.091 211.614 171.996 211.397 171.813 211.243 cv
171.632 211.094 171.375 211.012 171.044 211.012 cv
170.828 211.012 170.626 211.04 170.423 211.094 cv
170.221 211.148 170.031 211.222 169.85 211.317 cv
169.85 210.756 li
170.065 210.675 170.282 210.608 170.49 210.567 cv
170.7 210.527 170.902 210.5 171.104 210.5 cv
171.638 210.5 172.036 210.641 172.3 210.918 cv
172.563 211.195 172.698 211.614 172.698 212.174 cv
f
173.853 209.157 mo
174.379 209.157 li
174.703 209.676 174.952 210.182 175.114 210.682 cv
175.276 211.182 175.364 211.674 175.364 212.161 cv
175.364 212.653 175.276 213.146 175.114 213.645 cv
174.952 214.145 174.703 214.645 174.379 215.165 cv
173.853 215.165 li
174.143 214.657 174.358 214.165 174.507 213.666 cv
174.648 213.172 174.723 212.673 174.723 212.161 cv
174.723 211.654 174.648 211.155 174.507 210.663 cv
174.358 210.169 174.143 209.668 173.853 209.157 cv
f
34.4067 197.545 mo
36.6567 197.545 li
f
34.4067 197.545 mo
36.6567 197.545 li
@
285.507 197.545 mo
283.257 197.545 li
f
285.507 197.545 mo
283.257 197.545 li
@
11.5659 194.926 mo
11.2217 194.926 10.9648 195.095 10.7896 195.433 cv
10.6143 195.77 10.5332 196.277 10.5332 196.952 cv
10.5332 197.626 10.6143 198.133 10.7896 198.47 cv
10.9648 198.808 11.2217 198.977 11.5659 198.977 cv
11.9102 198.977 12.1665 198.808 12.3423 198.47 cv
12.5107 198.133 12.5986 197.626 12.5986 196.952 cv
12.5986 196.277 12.5107 195.77 12.3423 195.433 cv
12.1665 195.095 11.9102 194.926 11.5659 194.926 cv
11.5659 194.4 mo
12.1123 194.4 12.5313 194.624 12.8281 195.055 cv
13.1182 195.494 13.2666 196.127 13.2666 196.952 cv
13.2666 197.782 13.1182 198.417 12.8281 198.848 cv
12.5313 199.28 12.1123 199.497 11.5659 199.497 cv
11.0122 199.497 10.5869 199.28 10.2969 198.848 cv
10.0063 198.417 9.86475 197.782 9.86475 196.952 cv
9.86475 196.127 10.0063 195.494 10.2969 195.055 cv
10.5869 194.624 11.0122 194.4 11.5659 194.4 cv
f
14.4346 198.571 mo
15.1299 198.571 li
15.1299 199.409 li
14.4346 199.409 li
14.4346 198.571 li
cp
f
18.0054 194.926 mo
17.6611 194.926 17.4048 195.095 17.229 195.433 cv
17.0537 195.77 16.9727 196.277 16.9727 196.952 cv
16.9727 197.626 17.0537 198.133 17.229 198.47 cv
17.4048 198.808 17.6611 198.977 18.0054 198.977 cv
18.3496 198.977 18.6064 198.808 18.7817 198.47 cv
18.9507 198.133 19.0381 197.626 19.0381 196.952 cv
19.0381 196.277 18.9507 195.77 18.7817 195.433 cv
18.6064 195.095 18.3496 194.926 18.0054 194.926 cv
18.0054 194.4 mo
18.5522 194.4 18.9707 194.624 19.2676 195.055 cv
19.5581 195.494 19.7065 196.127 19.7065 196.952 cv
19.7065 197.782 19.5581 198.417 19.2676 198.848 cv
18.9707 199.28 18.5522 199.497 18.0054 199.497 cv
17.4521 199.497 17.0269 199.28 16.7363 198.848 cv
16.4463 198.417 16.3047 197.782 16.3047 196.952 cv
16.3047 196.127 16.4463 195.494 16.7363 195.055 cv
17.0269 194.624 17.4521 194.4 18.0054 194.4 cv
f
22.2983 194.926 mo
21.9541 194.926 21.6978 195.095 21.522 195.433 cv
21.3467 195.77 21.2656 196.277 21.2656 196.952 cv
21.2656 197.626 21.3467 198.133 21.522 198.47 cv
21.6978 198.808 21.9541 198.977 22.2983 198.977 cv
22.6426 198.977 22.8989 198.808 23.0747 198.47 cv
23.2432 198.133 23.3311 197.626 23.3311 196.952 cv
23.3311 196.277 23.2432 195.77 23.0747 195.433 cv
22.8989 195.095 22.6426 194.926 22.2983 194.926 cv
22.2983 194.4 mo
22.8452 194.4 23.2637 194.624 23.5605 195.055 cv
23.8511 195.494 23.9995 196.127 23.9995 196.952 cv
23.9995 197.782 23.8511 198.417 23.5605 198.848 cv
23.2637 199.28 22.8452 199.497 22.2983 199.497 cv
21.7446 199.497 21.3198 199.28 21.0293 198.848 cv
20.7393 198.417 20.5972 197.782 20.5972 196.952 cv
20.5972 196.127 20.7393 195.494 21.0293 195.055 cv
21.3198 194.624 21.7446 194.4 22.2983 194.4 cv
f
26.5913 194.926 mo
26.2471 194.926 25.9907 195.095 25.8149 195.433 cv
25.6396 195.77 25.5586 196.277 25.5586 196.952 cv
25.5586 197.626 25.6396 198.133 25.8149 198.47 cv
25.9907 198.808 26.2471 198.977 26.5913 198.977 cv
26.9355 198.977 27.1919 198.808 27.3677 198.47 cv
27.5361 198.133 27.624 197.626 27.624 196.952 cv
27.624 196.277 27.5361 195.77 27.3677 195.433 cv
27.1919 195.095 26.9355 194.926 26.5913 194.926 cv
26.5913 194.4 mo
27.1382 194.4 27.5566 194.624 27.8535 195.055 cv
28.1436 195.494 28.2925 196.127 28.2925 196.952 cv
28.2925 197.782 28.1436 198.417 27.8535 198.848 cv
27.5566 199.28 27.1382 199.497 26.5913 199.497 cv
26.0376 199.497 25.6123 199.28 25.3223 198.848 cv
25.0322 198.417 24.8901 197.782 24.8901 196.952 cv
24.8901 196.127 25.0322 195.494 25.3223 195.055 cv
25.6123 194.624 26.0376 194.4 26.5913 194.4 cv
f
30.8843 194.926 mo
30.54 194.926 30.2837 195.095 30.1084 195.433 cv
29.9326 195.77 29.8516 196.277 29.8516 196.952 cv
29.8516 197.626 29.9326 198.133 30.1084 198.47 cv
30.2837 198.808 30.54 198.977 30.8843 198.977 cv
31.2285 198.977 31.4854 198.808 31.6606 198.47 cv
31.8296 198.133 31.917 197.626 31.917 196.952 cv
31.917 196.277 31.8296 195.77 31.6606 195.433 cv
31.4854 195.095 31.2285 194.926 30.8843 194.926 cv
30.8843 194.4 mo
31.4312 194.4 31.8496 194.624 32.1465 195.055 cv
32.437 195.494 32.5854 196.127 32.5854 196.952 cv
32.5854 197.782 32.437 198.417 32.1465 198.848 cv
31.8496 199.28 31.4312 199.497 30.8843 199.497 cv
30.3311 199.497 29.9058 199.28 29.6152 198.848 cv
29.3252 198.417 29.1836 197.782 29.1836 196.952 cv
29.1836 196.127 29.3252 195.494 29.6152 195.055 cv
29.9058 194.624 30.3311 194.4 30.8843 194.4 cv
f
34.4067 165.145 mo
36.6567 165.145 li
f
34.4067 165.145 mo
36.6567 165.145 li
@
285.507 165.145 mo
283.257 165.145 li
f
285.507 165.145 mo
283.257 165.145 li
@
11.7417 162.527 mo
11.3975 162.527 11.1406 162.696 10.9653 163.033 cv
10.79 163.371 10.709 163.876 10.709 164.551 cv
10.709 165.227 10.79 165.733 10.9653 166.071 cv
11.1406 166.408 11.3975 166.577 11.7417 166.577 cv
12.0859 166.577 12.3423 166.408 12.5181 166.071 cv
12.6865 165.733 12.7744 165.227 12.7744 164.551 cv
12.7744 163.876 12.6865 163.371 12.5181 163.033 cv
12.3423 162.696 12.0859 162.527 11.7417 162.527 cv
11.7417 162 mo
12.2881 162 12.707 162.223 13.0039 162.655 cv
13.2939 163.094 13.4424 163.729 13.4424 164.551 cv
13.4424 165.381 13.2939 166.016 13.0039 166.449 cv
12.707 166.879 12.2881 167.096 11.7417 167.096 cv
11.188 167.096 10.7627 166.879 10.4727 166.449 cv
10.1821 166.016 10.0405 165.381 10.0405 164.551 cv
10.0405 163.729 10.1821 163.094 10.4727 162.655 cv
10.7627 162.223 11.188 162 11.7417 162 cv
f
14.6108 166.171 mo
15.3057 166.171 li
15.3057 167.008 li
14.6108 167.008 li
14.6108 166.171 li
cp
f
18.1812 162.527 mo
17.8369 162.527 17.5806 162.696 17.4048 163.033 cv
17.2295 163.371 17.1484 163.876 17.1484 164.551 cv
17.1484 165.227 17.2295 165.733 17.4048 166.071 cv
17.5806 166.408 17.8369 166.577 18.1812 166.577 cv
18.5254 166.577 18.7822 166.408 18.9575 166.071 cv
19.1265 165.733 19.2139 165.227 19.2139 164.551 cv
19.2139 163.876 19.1265 163.371 18.9575 163.033 cv
18.7822 162.696 18.5254 162.527 18.1812 162.527 cv
18.1812 162 mo
18.728 162 19.1465 162.223 19.4434 162.655 cv
19.7339 163.094 19.8823 163.729 19.8823 164.551 cv
19.8823 165.381 19.7339 166.016 19.4434 166.449 cv
19.1465 166.879 18.728 167.096 18.1812 167.096 cv
17.6279 167.096 17.2026 166.879 16.9121 166.449 cv
16.6221 166.016 16.4805 165.381 16.4805 164.551 cv
16.4805 163.729 16.6221 163.094 16.9121 162.655 cv
17.2026 162.223 17.6279 162 18.1812 162 cv
f
22.4741 162.527 mo
22.1299 162.527 21.8735 162.696 21.6978 163.033 cv
21.5225 163.371 21.4414 163.876 21.4414 164.551 cv
21.4414 165.227 21.5225 165.733 21.6978 166.071 cv
21.8735 166.408 22.1299 166.577 22.4741 166.577 cv
22.8184 166.577 23.0747 166.408 23.2505 166.071 cv
23.4189 165.733 23.5068 165.227 23.5068 164.551 cv
23.5068 163.876 23.4189 163.371 23.2505 163.033 cv
23.0747 162.696 22.8184 162.527 22.4741 162.527 cv
22.4741 162 mo
23.021 162 23.4395 162.223 23.7363 162.655 cv
24.0269 163.094 24.1753 163.729 24.1753 164.551 cv
24.1753 165.381 24.0269 166.016 23.7363 166.449 cv
23.4395 166.879 23.021 167.096 22.4741 167.096 cv
21.9204 167.096 21.4956 166.879 21.2051 166.449 cv
20.915 166.016 20.7729 165.381 20.7729 164.551 cv
20.7729 163.729 20.915 163.094 21.2051 162.655 cv
21.4956 162.223 21.9204 162 22.4741 162 cv
f
26.7671 162.527 mo
26.4229 162.527 26.1665 162.696 25.9907 163.033 cv
25.8154 163.371 25.7344 163.876 25.7344 164.551 cv
25.7344 165.227 25.8154 165.733 25.9907 166.071 cv
26.1665 166.408 26.4229 166.577 26.7671 166.577 cv
27.1113 166.577 27.3677 166.408 27.5435 166.071 cv
27.7119 165.733 27.7998 165.227 27.7998 164.551 cv
27.7998 163.876 27.7119 163.371 27.5435 163.033 cv
27.3677 162.696 27.1113 162.527 26.7671 162.527 cv
26.7671 162 mo
27.314 162 27.7324 162.223 28.0293 162.655 cv
28.3193 163.094 28.4683 163.729 28.4683 164.551 cv
28.4683 165.381 28.3193 166.016 28.0293 166.449 cv
27.7324 166.879 27.314 167.096 26.7671 167.096 cv
26.2134 167.096 25.7881 166.879 25.498 166.449 cv
25.208 166.016 25.0659 165.381 25.0659 164.551 cv
25.0659 163.729 25.208 163.094 25.498 162.655 cv
25.7881 162.223 26.2134 162 26.7671 162 cv
f
29.7505 166.448 mo
30.8374 166.448 li
30.8374 162.696 li
29.6563 162.932 li
29.6563 162.325 li
30.8306 162.088 li
31.499 162.088 li
31.499 166.448 li
32.5859 166.448 li
32.5859 167.008 li
29.7505 167.008 li
29.7505 166.448 li
cp
f
34.4067 132.745 mo
36.6567 132.745 li
f
34.4067 132.745 mo
36.6567 132.745 li
@
285.507 132.745 mo
283.257 132.745 li
f
285.507 132.745 mo
283.257 132.745 li
@
11.7944 130.126 mo
11.4502 130.126 11.1934 130.295 11.0181 130.633 cv
10.8428 130.97 10.7617 131.477 10.7617 132.152 cv
10.7617 132.827 10.8428 133.333 11.0181 133.67 cv
11.1934 134.008 11.4502 134.176 11.7944 134.176 cv
12.1387 134.176 12.395 134.008 12.5708 133.67 cv
12.7393 133.333 12.8271 132.827 12.8271 132.152 cv
12.8271 131.477 12.7393 130.97 12.5708 130.633 cv
12.395 130.295 12.1387 130.126 11.7944 130.126 cv
11.7944 129.6 mo
12.3413 129.6 12.7598 129.823 13.0566 130.255 cv
13.3467 130.693 13.4951 131.328 13.4951 132.152 cv
13.4951 132.982 13.3467 133.616 13.0566 134.048 cv
12.7598 134.48 12.3413 134.696 11.7944 134.696 cv
11.2407 134.696 10.8154 134.48 10.5254 134.048 cv
10.2349 133.616 10.0933 132.982 10.0933 132.152 cv
10.0933 131.328 10.2349 130.693 10.5254 130.255 cv
10.8154 129.823 11.2407 129.6 11.7944 129.6 cv
f
14.6631 133.772 mo
15.3584 133.772 li
15.3584 134.608 li
14.6631 134.608 li
14.6631 133.772 li
cp
f
18.2339 130.126 mo
17.8896 130.126 17.6333 130.295 17.4575 130.633 cv
17.2822 130.97 17.2012 131.477 17.2012 132.152 cv
17.2012 132.827 17.2822 133.333 17.4575 133.67 cv
17.6333 134.008 17.8896 134.176 18.2339 134.176 cv
18.5781 134.176 18.8345 134.008 19.0103 133.67 cv
19.1787 133.333 19.2666 132.827 19.2666 132.152 cv
19.2666 131.477 19.1787 130.97 19.0103 130.633 cv
18.8345 130.295 18.5781 130.126 18.2339 130.126 cv
18.2339 129.6 mo
18.7808 129.6 19.1992 129.823 19.4961 130.255 cv
19.7866 130.693 19.9351 131.328 19.9351 132.152 cv
19.9351 132.982 19.7866 133.616 19.4961 134.048 cv
19.1992 134.48 18.7808 134.696 18.2339 134.696 cv
17.6807 134.696 17.2554 134.48 16.9648 134.048 cv
16.6748 133.616 16.5332 132.982 16.5332 132.152 cv
16.5332 131.328 16.6748 130.693 16.9648 130.255 cv
17.2554 129.823 17.6807 129.6 18.2339 129.6 cv
f
22.5269 130.126 mo
22.1826 130.126 21.9263 130.295 21.7505 130.633 cv
21.5752 130.97 21.4941 131.477 21.4941 132.152 cv
21.4941 132.827 21.5752 133.333 21.7505 133.67 cv
21.9263 134.008 22.1826 134.176 22.5269 134.176 cv
22.8711 134.176 23.1274 134.008 23.3032 133.67 cv
23.4717 133.333 23.5596 132.827 23.5596 132.152 cv
23.5596 131.477 23.4717 130.97 23.3032 130.633 cv
23.1274 130.295 22.8711 130.126 22.5269 130.126 cv
22.5269 129.6 mo
23.0737 129.6 23.4922 129.823 23.7891 130.255 cv
24.0796 130.693 24.228 131.328 24.228 132.152 cv
24.228 132.982 24.0796 133.616 23.7891 134.048 cv
23.4922 134.48 23.0737 134.696 22.5269 134.696 cv
21.9736 134.696 21.5483 134.48 21.2578 134.048 cv
20.9678 133.616 20.8257 132.982 20.8257 132.152 cv
20.8257 131.328 20.9678 130.693 21.2578 130.255 cv
21.5483 129.823 21.9736 129.6 22.5269 129.6 cv
f
26.8198 130.126 mo
26.4756 130.126 26.2192 130.295 26.0435 130.633 cv
25.8682 130.97 25.7871 131.477 25.7871 132.152 cv
25.7871 132.827 25.8682 133.333 26.0435 133.67 cv
26.2192 134.008 26.4756 134.176 26.8198 134.176 cv
27.1641 134.176 27.4204 134.008 27.5962 133.67 cv
27.7646 133.333 27.8525 132.827 27.8525 132.152 cv
27.8525 131.477 27.7646 130.97 27.5962 130.633 cv
27.4204 130.295 27.1641 130.126 26.8198 130.126 cv
26.8198 129.6 mo
27.3667 129.6 27.7852 129.823 28.082 130.255 cv
28.3721 130.693 28.521 131.328 28.521 132.152 cv
28.521 132.982 28.3721 133.616 28.082 134.048 cv
27.7852 134.48 27.3667 134.696 26.8198 134.696 cv
26.2661 134.696 25.8408 134.48 25.5508 134.048 cv
25.2607 133.616 25.1187 132.982 25.1187 132.152 cv
25.1187 131.328 25.2607 130.693 25.5508 130.255 cv
25.8408 129.823 26.2661 129.6 26.8198 129.6 cv
f
30.2622 134.048 mo
32.5845 134.048 li
32.5845 134.608 li
29.459 134.608 li
29.459 134.048 li
29.709 133.792 30.0532 133.441 30.4917 132.996 cv
30.9238 132.557 31.2007 132.273 31.3154 132.145 cv
31.5313 131.908 31.6797 131.707 31.7607 131.537 cv
31.8418 131.375 31.8892 131.207 31.8892 131.044 cv
31.8892 130.788 31.7944 130.572 31.6123 130.41 cv
31.4302 130.248 31.1938 130.161 30.897 130.161 cv
30.6875 130.161 30.4648 130.201 30.2354 130.268 cv
30.0059 130.342 29.7559 130.45 29.4927 130.599 cv
29.4927 129.924 li
29.7627 129.816 30.0127 129.735 30.2422 129.681 cv
30.4717 129.627 30.6875 129.601 30.8833 129.601 cv
31.3896 129.601 31.7944 129.728 32.0981 129.985 cv
32.4023 130.241 32.5571 130.579 32.5571 131.004 cv
32.5571 131.207 32.5166 131.403 32.4424 131.578 cv
32.3682 131.76 32.2334 131.976 32.0308 132.219 cv
31.9771 132.287 31.8013 132.469 31.5044 132.772 cv
31.2075 133.076 30.7954 133.501 30.2622 134.048 cv
f
34.4067 100.345 mo
36.6567 100.345 li
f
34.4067 100.345 mo
36.6567 100.345 li
@
285.507 100.345 mo
283.257 100.345 li
f
285.507 100.345 mo
283.257 100.345 li
@
11.6626 97.7266 mo
11.3184 97.7266 11.0615 97.8955 10.8862 98.2329 cv
10.7109 98.5703 10.6299 99.0767 10.6299 99.7515 cv
10.6299 100.427 10.7109 100.933 10.8862 101.271 cv
11.0615 101.607 11.3184 101.777 11.6626 101.777 cv
12.0068 101.777 12.2632 101.607 12.439 101.271 cv
12.6074 100.933 12.6953 100.427 12.6953 99.7515 cv
12.6953 99.0767 12.6074 98.5703 12.439 98.2329 cv
12.2632 97.8955 12.0068 97.7266 11.6626 97.7266 cv
11.6626 97.2002 mo
12.2095 97.2002 12.6279 97.4229 12.9248 97.855 cv
13.2148 98.2935 13.3633 98.9282 13.3633 99.7515 cv
13.3633 100.582 13.2148 101.216 12.9248 101.648 cv
12.6279 102.081 12.2095 102.296 11.6626 102.296 cv
11.1089 102.296 10.6836 102.081 10.3936 101.648 cv
10.103 101.216 9.96143 100.582 9.96143 99.7515 cv
9.96143 98.9282 10.103 98.2935 10.3936 97.855 cv
10.6836 97.4229 11.1089 97.2002 11.6626 97.2002 cv
f
14.5313 101.372 mo
15.2266 101.372 li
15.2266 102.208 li
14.5313 102.208 li
14.5313 101.372 li
cp
f
18.1021 97.7266 mo
17.7578 97.7266 17.5015 97.8955 17.3257 98.2329 cv
17.1504 98.5703 17.0693 99.0767 17.0693 99.7515 cv
17.0693 100.427 17.1504 100.933 17.3257 101.271 cv
17.5015 101.607 17.7578 101.777 18.1021 101.777 cv
18.4463 101.777 18.7031 101.607 18.8784 101.271 cv
19.0474 100.933 19.1348 100.427 19.1348 99.7515 cv
19.1348 99.0767 19.0474 98.5703 18.8784 98.2329 cv
18.7031 97.8955 18.4463 97.7266 18.1021 97.7266 cv
18.1021 97.2002 mo
18.6489 97.2002 19.0674 97.4229 19.3643 97.855 cv
19.6548 98.2935 19.8032 98.9282 19.8032 99.7515 cv
19.8032 100.582 19.6548 101.216 19.3643 101.648 cv
19.0674 102.081 18.6489 102.296 18.1021 102.296 cv
17.5488 102.296 17.1235 102.081 16.833 101.648 cv
16.543 101.216 16.4014 100.582 16.4014 99.7515 cv
16.4014 98.9282 16.543 98.2935 16.833 97.855 cv
17.1235 97.4229 17.5488 97.2002 18.1021 97.2002 cv
f
22.395 97.7266 mo
22.0508 97.7266 21.7944 97.8955 21.6187 98.2329 cv
21.4434 98.5703 21.3623 99.0767 21.3623 99.7515 cv
21.3623 100.427 21.4434 100.933 21.6187 101.271 cv
21.7944 101.607 22.0508 101.777 22.395 101.777 cv
22.7393 101.777 22.9956 101.607 23.1714 101.271 cv
23.3398 100.933 23.4277 100.427 23.4277 99.7515 cv
23.4277 99.0767 23.3398 98.5703 23.1714 98.2329 cv
22.9956 97.8955 22.7393 97.7266 22.395 97.7266 cv
22.395 97.2002 mo
22.9419 97.2002 23.3604 97.4229 23.6572 97.855 cv
23.9478 98.2935 24.0962 98.9282 24.0962 99.7515 cv
24.0962 100.582 23.9478 101.216 23.6572 101.648 cv
23.3604 102.081 22.9419 102.296 22.395 102.296 cv
21.8418 102.296 21.4165 102.081 21.126 101.648 cv
20.8359 101.216 20.6938 100.582 20.6938 99.7515 cv
20.6938 98.9282 20.8359 98.2935 21.126 97.855 cv
21.4165 97.4229 21.8418 97.2002 22.395 97.2002 cv
f
26.688 97.7266 mo
26.3438 97.7266 26.0874 97.8955 25.9116 98.2329 cv
25.7363 98.5703 25.6553 99.0767 25.6553 99.7515 cv
25.6553 100.427 25.7363 100.933 25.9116 101.271 cv
26.0874 101.607 26.3438 101.777 26.688 101.777 cv
27.0322 101.777 27.2886 101.607 27.4644 101.271 cv
27.6328 100.933 27.7207 100.427 27.7207 99.7515 cv
27.7207 99.0767 27.6328 98.5703 27.4644 98.2329 cv
27.2886 97.8955 27.0322 97.7266 26.688 97.7266 cv
26.688 97.2002 mo
27.2349 97.2002 27.6533 97.4229 27.9502 97.855 cv
28.2402 98.2935 28.3892 98.9282 28.3892 99.7515 cv
28.3892 100.582 28.2402 101.216 27.9502 101.648 cv
27.6533 102.081 27.2349 102.296 26.688 102.296 cv
26.1343 102.296 25.709 102.081 25.4189 101.648 cv
25.1289 101.216 24.9868 100.582 24.9868 99.7515 cv
24.9868 98.9282 25.1289 98.2935 25.4189 97.855 cv
25.709 97.4229 26.1343 97.2002 26.688 97.2002 cv
f
31.5747 99.5562 mo
31.8921 99.6235 32.1421 99.7651 32.3174 99.981 cv
32.4932 100.197 32.5874 100.467 32.5874 100.778 cv
32.5874 101.264 32.4185 101.642 32.0879 101.905 cv
31.7505 102.168 31.2778 102.296 30.6636 102.296 cv
30.4546 102.296 30.2383 102.276 30.0225 102.236 cv
29.8066 102.202 29.5771 102.141 29.3477 102.06 cv
29.3477 101.419 li
29.5298 101.527 29.7324 101.607 29.9551 101.662 cv
30.1709 101.716 30.4004 101.743 30.6436 101.743 cv
31.062 101.743 31.3794 101.662 31.5952 101.5 cv
31.811 101.338 31.9258 101.094 31.9258 100.778 cv
31.9258 100.494 31.8247 100.265 31.6221 100.103 cv
31.4199 99.9409 31.1362 99.853 30.7715 99.853 cv
30.1978 99.853 li
30.1978 99.3062 li
30.7988 99.3062 li
31.1226 99.3062 31.3726 99.2456 31.5479 99.1104 cv
31.7236 98.9824 31.811 98.7935 31.811 98.5435 cv
31.811 98.2935 31.7168 98.0981 31.541 97.9629 cv
31.3589 97.8281 31.1025 97.7603 30.7715 97.7603 cv
30.5894 97.7603 30.3936 97.7808 30.1846 97.8213 cv
29.9751 97.8618 29.7456 97.9224 29.4961 98.0034 cv
29.4961 97.4097 li
29.7456 97.3418 29.9819 97.2881 30.2046 97.2544 cv
30.4209 97.2202 30.6299 97.2002 30.8325 97.2002 cv
31.332 97.2002 31.73 97.3149 32.0273 97.5444 cv
32.3242 97.7739 32.4727 98.0845 32.4727 98.4761 cv
32.4727 98.7461 32.3916 98.9756 32.2363 99.1646 cv
32.0811 99.3535 31.8584 99.4883 31.5747 99.5562 cv
f
34.4067 67.9453 mo
36.6567 67.9453 li
f
34.4067 67.9453 mo
36.6567 67.9453 li
@
285.507 67.9453 mo
283.257 67.9453 li
f
285.507 67.9453 mo
283.257 67.9453 li
@
11.4956 65.3267 mo
11.1514 65.3267 10.8945 65.4956 10.7192 65.833 cv
10.5439 66.1704 10.4629 66.6768 10.4629 67.3516 cv
10.4629 68.0269 10.5439 68.5327 10.7192 68.8706 cv
10.8945 69.208 11.1514 69.3765 11.4956 69.3765 cv
11.8398 69.3765 12.0962 69.208 12.272 68.8706 cv
12.4404 68.5327 12.5283 68.0269 12.5283 67.3516 cv
12.5283 66.6768 12.4404 66.1704 12.272 65.833 cv
12.0962 65.4956 11.8398 65.3267 11.4956 65.3267 cv
11.4956 64.8003 mo
12.042 64.8003 12.4609 65.0229 12.7578 65.4551 cv
13.0479 65.8936 13.1963 66.5283 13.1963 67.3516 cv
13.1963 68.1821 13.0479 68.8164 12.7578 69.2485 cv
12.4609 69.6802 12.042 69.8965 11.4956 69.8965 cv
10.9419 69.8965 10.5166 69.6802 10.2266 69.2485 cv
9.93604 68.8164 9.79443 68.1821 9.79443 67.3516 cv
9.79443 66.5283 9.93604 65.8936 10.2266 65.4551 cv
10.5166 65.0229 10.9419 64.8003 11.4956 64.8003 cv
f
14.3643 68.9722 mo
15.0596 68.9722 li
15.0596 69.8091 li
14.3643 69.8091 li
14.3643 68.9722 li
cp
f
17.9351 65.3267 mo
17.5908 65.3267 17.3345 65.4956 17.1587 65.833 cv
16.9834 66.1704 16.9023 66.6768 16.9023 67.3516 cv
16.9023 68.0269 16.9834 68.5327 17.1587 68.8706 cv
17.3345 69.208 17.5908 69.3765 17.9351 69.3765 cv
18.2793 69.3765 18.5361 69.208 18.7114 68.8706 cv
18.8804 68.5327 18.9678 68.0269 18.9678 67.3516 cv
18.9678 66.6768 18.8804 66.1704 18.7114 65.833 cv
18.5361 65.4956 18.2793 65.3267 17.9351 65.3267 cv
17.9351 64.8003 mo
18.4819 64.8003 18.9004 65.0229 19.1973 65.4551 cv
19.4878 65.8936 19.6362 66.5283 19.6362 67.3516 cv
19.6362 68.1821 19.4878 68.8164 19.1973 69.2485 cv
18.9004 69.6802 18.4819 69.8965 17.9351 69.8965 cv
17.3818 69.8965 16.9565 69.6802 16.666 69.2485 cv
16.376 68.8164 16.2344 68.1821 16.2344 67.3516 cv
16.2344 66.5283 16.376 65.8936 16.666 65.4551 cv
16.9565 65.0229 17.3818 64.8003 17.9351 64.8003 cv
f
22.228 65.3267 mo
21.8838 65.3267 21.6274 65.4956 21.4517 65.833 cv
21.2764 66.1704 21.1953 66.6768 21.1953 67.3516 cv
21.1953 68.0269 21.2764 68.5327 21.4517 68.8706 cv
21.6274 69.208 21.8838 69.3765 22.228 69.3765 cv
22.5723 69.3765 22.8286 69.208 23.0044 68.8706 cv
23.1729 68.5327 23.2607 68.0269 23.2607 67.3516 cv
23.2607 66.6768 23.1729 66.1704 23.0044 65.833 cv
22.8286 65.4956 22.5723 65.3267 22.228 65.3267 cv
22.228 64.8003 mo
22.7749 64.8003 23.1934 65.0229 23.4902 65.4551 cv
23.7808 65.8936 23.9292 66.5283 23.9292 67.3516 cv
23.9292 68.1821 23.7808 68.8164 23.4902 69.2485 cv
23.1934 69.6802 22.7749 69.8965 22.228 69.8965 cv
21.6743 69.8965 21.2495 69.6802 20.959 69.2485 cv
20.6689 68.8164 20.5269 68.1821 20.5269 67.3516 cv
20.5269 66.5283 20.6689 65.8936 20.959 65.4551 cv
21.2495 65.0229 21.6743 64.8003 22.228 64.8003 cv
f
26.521 65.3267 mo
26.1768 65.3267 25.9204 65.4956 25.7446 65.833 cv
25.5693 66.1704 25.4883 66.6768 25.4883 67.3516 cv
25.4883 68.0269 25.5693 68.5327 25.7446 68.8706 cv
25.9204 69.208 26.1768 69.3765 26.521 69.3765 cv
26.8652 69.3765 27.1216 69.208 27.2974 68.8706 cv
27.4658 68.5327 27.5537 68.0269 27.5537 67.3516 cv
27.5537 66.6768 27.4658 66.1704 27.2974 65.833 cv
27.1216 65.4956 26.8652 65.3267 26.521 65.3267 cv
26.521 64.8003 mo
27.0679 64.8003 27.4863 65.0229 27.7832 65.4551 cv
28.0732 65.8936 28.2222 66.5283 28.2222 67.3516 cv
28.2222 68.1821 28.0732 68.8164 27.7832 69.2485 cv
27.4863 69.6802 27.0679 69.8965 26.521 69.8965 cv
25.9673 69.8965 25.542 69.6802 25.252 69.2485 cv
24.9619 68.8164 24.8198 68.1821 24.8198 67.3516 cv
24.8198 66.5283 24.9619 65.8936 25.252 65.4551 cv
25.542 65.0229 25.9673 64.8003 26.521 64.8003 cv
f
31.2188 65.4683 mo
29.5381 68.0942 li
31.2188 68.0942 li
31.2188 65.4683 li
31.0435 64.8882 mo
31.8804 64.8882 li
31.8804 68.0942 li
32.5825 68.0942 li
32.5825 68.6479 li
31.8804 68.6479 li
31.8804 69.8086 li
31.2188 69.8086 li
31.2188 68.6479 li
28.998 68.6479 li
28.998 68.0063 li
31.0435 64.8882 li
cp
f
34.4067 35.5454 mo
36.6567 35.5454 li
f
34.4067 35.5454 mo
36.6567 35.5454 li
@
285.507 35.5454 mo
283.257 35.5454 li
f
285.507 35.5454 mo
283.257 35.5454 li
@
11.7065 32.9268 mo
11.3623 32.9268 11.1055 33.0952 10.9302 33.4331 cv
10.7549 33.7705 10.6738 34.2769 10.6738 34.9517 cv
10.6738 35.6265 10.7549 36.1328 10.9302 36.4702 cv
11.1055 36.8081 11.3623 36.9766 11.7065 36.9766 cv
12.0508 36.9766 12.3071 36.8081 12.4829 36.4702 cv
12.6514 36.1328 12.7393 35.6265 12.7393 34.9517 cv
12.7393 34.2769 12.6514 33.7705 12.4829 33.4331 cv
12.3071 33.0952 12.0508 32.9268 11.7065 32.9268 cv
11.7065 32.3999 mo
12.2529 32.3999 12.6719 32.623 12.9688 33.0547 cv
13.2588 33.4937 13.4072 34.1279 13.4072 34.9517 cv
13.4072 35.7817 13.2588 36.4165 12.9688 36.8481 cv
12.6719 37.2803 12.2529 37.4966 11.7065 37.4966 cv
11.1528 37.4966 10.7275 37.2803 10.4375 36.8481 cv
10.147 36.4165 10.0054 35.7817 10.0054 34.9517 cv
10.0054 34.1279 10.147 33.4937 10.4375 33.0547 cv
10.7275 32.623 11.1528 32.3999 11.7065 32.3999 cv
f
14.5752 36.5718 mo
15.2705 36.5718 li
15.2705 37.4087 li
14.5752 37.4087 li
14.5752 36.5718 li
cp
f
18.146 32.9268 mo
17.8018 32.9268 17.5454 33.0952 17.3696 33.4331 cv
17.1943 33.7705 17.1133 34.2769 17.1133 34.9517 cv
17.1133 35.6265 17.1943 36.1328 17.3696 36.4702 cv
17.5454 36.8081 17.8018 36.9766 18.146 36.9766 cv
18.4902 36.9766 18.7471 36.8081 18.9224 36.4702 cv
19.0913 36.1328 19.1787 35.6265 19.1787 34.9517 cv
19.1787 34.2769 19.0913 33.7705 18.9224 33.4331 cv
18.7471 33.0952 18.4902 32.9268 18.146 32.9268 cv
18.146 32.3999 mo
18.6929 32.3999 19.1113 32.623 19.4082 33.0547 cv
19.6987 33.4937 19.8472 34.1279 19.8472 34.9517 cv
19.8472 35.7817 19.6987 36.4165 19.4082 36.8481 cv
19.1113 37.2803 18.6929 37.4966 18.146 37.4966 cv
17.5928 37.4966 17.1675 37.2803 16.877 36.8481 cv
16.5869 36.4165 16.4453 35.7817 16.4453 34.9517 cv
16.4453 34.1279 16.5869 33.4937 16.877 33.0547 cv
17.1675 32.623 17.5928 32.3999 18.146 32.3999 cv
f
22.439 32.9268 mo
22.0947 32.9268 21.8384 33.0952 21.6626 33.4331 cv
21.4873 33.7705 21.4063 34.2769 21.4063 34.9517 cv
21.4063 35.6265 21.4873 36.1328 21.6626 36.4702 cv
21.8384 36.8081 22.0947 36.9766 22.439 36.9766 cv
22.7832 36.9766 23.0396 36.8081 23.2153 36.4702 cv
23.3838 36.1328 23.4717 35.6265 23.4717 34.9517 cv
23.4717 34.2769 23.3838 33.7705 23.2153 33.4331 cv
23.0396 33.0952 22.7832 32.9268 22.439 32.9268 cv
22.439 32.3999 mo
22.9858 32.3999 23.4043 32.623 23.7012 33.0547 cv
23.9917 33.4937 24.1401 34.1279 24.1401 34.9517 cv
24.1401 35.7817 23.9917 36.4165 23.7012 36.8481 cv
23.4043 37.2803 22.9858 37.4966 22.439 37.4966 cv
21.8853 37.4966 21.4604 37.2803 21.1699 36.8481 cv
20.8799 36.4165 20.7378 35.7817 20.7378 34.9517 cv
20.7378 34.1279 20.8799 33.4937 21.1699 33.0547 cv
21.4604 32.623 21.8853 32.3999 22.439 32.3999 cv
f
26.7319 32.9268 mo
26.3877 32.9268 26.1313 33.0952 25.9556 33.4331 cv
25.7803 33.7705 25.6992 34.2769 25.6992 34.9517 cv
25.6992 35.6265 25.7803 36.1328 25.9556 36.4702 cv
26.1313 36.8081 26.3877 36.9766 26.7319 36.9766 cv
27.0762 36.9766 27.3325 36.8081 27.5083 36.4702 cv
27.6768 36.1328 27.7646 35.6265 27.7646 34.9517 cv
27.7646 34.2769 27.6768 33.7705 27.5083 33.4331 cv
27.3325 33.0952 27.0762 32.9268 26.7319 32.9268 cv
26.7319 32.3999 mo
27.2788 32.3999 27.6973 32.623 27.9941 33.0547 cv
28.2842 33.4937 28.4331 34.1279 28.4331 34.9517 cv
28.4331 35.7817 28.2842 36.4165 27.9941 36.8481 cv
27.6973 37.2803 27.2788 37.4966 26.7319 37.4966 cv
26.1782 37.4966 25.7529 37.2803 25.4629 36.8481 cv
25.1729 36.4165 25.0308 35.7817 25.0308 34.9517 cv
25.0308 34.1279 25.1729 33.4937 25.4629 33.0547 cv
25.7529 32.623 26.1782 32.3999 26.7319 32.3999 cv
f
29.6074 32.4878 mo
32.2197 32.4878 li
32.2197 33.0479 li
30.2148 33.0479 li
30.2148 34.2563 li
30.3096 34.2227 30.4106 34.1953 30.5054 34.1821 cv
30.5996 34.1685 30.7012 34.1548 30.7954 34.1548 cv
31.3423 34.1548 31.7744 34.3101 32.0981 34.6074 cv
32.4224 34.9111 32.5845 35.3159 32.5845 35.8291 cv
32.5845 36.3623 32.4155 36.7739 32.085 37.0645 cv
31.7539 37.3545 31.2886 37.4961 30.6943 37.4961 cv
30.4849 37.4961 30.2759 37.4761 30.0601 37.4487 cv
29.8438 37.4155 29.6279 37.3682 29.3984 37.2939 cv
29.3984 36.6255 li
29.5942 36.7334 29.7964 36.8145 30.0127 36.8687 cv
30.2217 36.9224 30.4448 36.9429 30.6807 36.9429 cv
31.0586 36.9429 31.3628 36.8481 31.5854 36.646 cv
31.8013 36.4434 31.916 36.1733 31.916 35.8291 cv
31.916 35.4917 31.8013 35.2217 31.5854 35.019 cv
31.3628 34.8164 31.0586 34.7153 30.6807 34.7153 cv
30.5054 34.7153 30.3232 34.7354 30.1475 34.7759 cv
29.9722 34.8164 29.79 34.8774 29.6074 34.9585 cv
29.6074 32.4878 li
f
34.4067 3.14551 mo
36.6567 3.14551 li
f
34.4067 3.14551 mo
36.6567 3.14551 li
@
285.507 3.14551 mo
283.257 3.14551 li
f
285.507 3.14551 mo
283.257 3.14551 li
@
11.5483 .526367 mo
11.2041 .526367 10.9473 .695313 10.772 1.03271 cv
10.5967 1.37012 10.5156 1.87646 10.5156 2.55176 cv
10.5156 3.22656 10.5967 3.73291 10.772 4.07031 cv
10.9473 4.40771 11.2041 4.57666 11.5483 4.57666 cv
11.8926 4.57666 12.1489 4.40771 12.3247 4.07031 cv
12.4932 3.73291 12.5811 3.22656 12.5811 2.55176 cv
12.5811 1.87646 12.4932 1.37012 12.3247 1.03271 cv
12.1489 .695313 11.8926 .526367 11.5483 .526367 cv
11.5483 0 mo
12.0952 0 12.5137 .222656 12.8105 .654785 cv
13.1006 1.09375 13.249 1.72803 13.249 2.55176 cv
13.249 3.38184 13.1006 4.01611 12.8105 4.44824 cv
12.5137 4.88037 12.0952 5.09619 11.5483 5.09619 cv
10.9946 5.09619 10.5693 4.88037 10.2793 4.44824 cv
9.98877 4.01611 9.84717 3.38184 9.84717 2.55176 cv
9.84717 1.72803 9.98877 1.09375 10.2793 .654785 cv
10.5693 .222656 10.9946 0 11.5483 0 cv
f
14.417 4.17139 mo
15.1123 4.17139 li
15.1123 5.0083 li
14.417 5.0083 li
14.417 4.17139 li
cp
f
17.9878 .526367 mo
17.6436 .526367 17.3872 .695313 17.2114 1.03271 cv
17.0361 1.37012 16.9551 1.87646 16.9551 2.55176 cv
16.9551 3.22656 17.0361 3.73291 17.2114 4.07031 cv
17.3872 4.40771 17.6436 4.57666 17.9878 4.57666 cv
18.332 4.57666 18.5884 4.40771 18.7642 4.07031 cv
18.9326 3.73291 19.0205 3.22656 19.0205 2.55176 cv
19.0205 1.87646 18.9326 1.37012 18.7642 1.03271 cv
18.5884 .695313 18.332 .526367 17.9878 .526367 cv
17.9878 0 mo
18.5347 0 18.9531 .222656 19.25 .654785 cv
19.5405 1.09375 19.689 1.72803 19.689 2.55176 cv
19.689 3.38184 19.5405 4.01611 19.25 4.44824 cv
18.9531 4.88037 18.5347 5.09619 17.9878 5.09619 cv
17.4346 5.09619 17.0093 4.88037 16.7188 4.44824 cv
16.4287 4.01611 16.2871 3.38184 16.2871 2.55176 cv
16.2871 1.72803 16.4287 1.09375 16.7188 .654785 cv
17.0093 .222656 17.4346 0 17.9878 0 cv
f
22.2808 .526367 mo
21.9365 .526367 21.6802 .695313 21.5044 1.03271 cv
21.3291 1.37012 21.248 1.87646 21.248 2.55176 cv
21.248 3.22656 21.3291 3.73291 21.5044 4.07031 cv
21.6802 4.40771 21.9365 4.57666 22.2808 4.57666 cv
22.625 4.57666 22.8813 4.40771 23.0571 4.07031 cv
23.2256 3.73291 23.3135 3.22656 23.3135 2.55176 cv
23.3135 1.87646 23.2256 1.37012 23.0571 1.03271 cv
22.8813 .695313 22.625 .526367 22.2808 .526367 cv
22.2808 0 mo
22.8276 0 23.2461 .222656 23.543 .654785 cv
23.8335 1.09375 23.9819 1.72803 23.9819 2.55176 cv
23.9819 3.38184 23.8335 4.01611 23.543 4.44824 cv
23.2461 4.88037 22.8276 5.09619 22.2808 5.09619 cv
21.7275 5.09619 21.3022 4.88037 21.0117 4.44824 cv
20.7217 4.01611 20.5796 3.38184 20.5796 2.55176 cv
20.5796 1.72803 20.7217 1.09375 21.0117 .654785 cv
21.3022 .222656 21.7275 0 22.2808 0 cv
f
26.5737 .526367 mo
26.2295 .526367 25.9731 .695313 25.7974 1.03271 cv
25.6221 1.37012 25.541 1.87646 25.541 2.55176 cv
25.541 3.22656 25.6221 3.73291 25.7974 4.07031 cv
25.9731 4.40771 26.2295 4.57666 26.5737 4.57666 cv
26.918 4.57666 27.1743 4.40771 27.3501 4.07031 cv
27.5186 3.73291 27.6064 3.22656 27.6064 2.55176 cv
27.6064 1.87646 27.5186 1.37012 27.3501 1.03271 cv
27.1743 .695313 26.918 .526367 26.5737 .526367 cv
26.5737 0 mo
27.1206 0 27.5391 .222656 27.8359 .654785 cv
28.126 1.09375 28.2749 1.72803 28.2749 2.55176 cv
28.2749 3.38184 28.126 4.01611 27.8359 4.44824 cv
27.5391 4.88037 27.1206 5.09619 26.5737 5.09619 cv
26.02 5.09619 25.5947 4.88037 25.3047 4.44824 cv
25.0146 4.01611 24.8726 3.38184 24.8726 2.55176 cv
24.8726 1.72803 25.0146 1.09375 25.3047 .654785 cv
25.5947 .222656 26.02 0 26.5737 0 cv
f
30.9478 2.28174 mo
30.6509 2.28174 30.4146 2.38965 30.2393 2.59229 cv
30.0635 2.79443 29.9761 3.07813 29.9761 3.4292 cv
29.9761 3.78711 30.0635 4.07031 30.2393 4.27295 cv
30.4146 4.47559 30.6509 4.57666 30.9478 4.57666 cv
31.2451 4.57666 31.481 4.47559 31.6567 4.27295 cv
31.832 4.07031 31.9199 3.78711 31.9199 3.4292 cv
31.9199 3.07813 31.832 2.79443 31.6567 2.59229 cv
31.481 2.38965 31.2451 2.28174 30.9478 2.28174 cv
32.271 .195801 mo
32.271 .803223 li
32.1021 .722168 31.9336 .661621 31.7646 .621094 cv
31.5894 .580566 31.4204 .560547 31.2583 .560547 cv
30.813 .560547 30.4756 .708984 30.2461 1.00586 cv
30.0166 1.30273 29.8813 1.75537 29.8545 2.34912 cv
29.9824 2.16016 30.1445 2.01172 30.3403 1.91064 cv
30.5361 1.80908 30.752 1.75537 30.9883 1.75537 cv
31.481 1.75537 31.8726 1.91064 32.1563 2.20752 cv
32.4395 2.50439 32.5884 2.91602 32.5884 3.4292 cv
32.5884 3.93555 32.4331 4.34033 32.1357 4.64404 cv
31.8389 4.94775 31.4404 5.09619 30.9478 5.09619 cv
30.3809 5.09619 29.9424 4.88037 29.645 4.44824 cv
29.3413 4.0166 29.1929 3.38184 29.1929 2.55176 cv
29.1929 1.77539 29.375 1.1543 29.7466 .695313 cv
30.1108 .236328 30.6104 0 31.2314 0 cv
31.3936 0 31.562 .0205078 31.7378 .0473633 cv
31.9063 .0810547 32.082 .128418 32.271 .195801 cv
f
.209473 127.482 mo
.209473 123.324 li
.77002 123.324 li
.77002 125.072 li
5.13037 125.072 li
5.13037 125.74 li
.77002 125.74 li
.77002 127.482 li
.209473 127.482 li
cp
f
1.43799 122.102 mo
5.13037 122.102 li
5.13037 122.71 li
1.43799 122.71 li
1.43799 122.102 li
cp
0 122.102 mo
.769531 122.102 li
.769531 122.71 li
0 122.71 li
0 122.102 li
cp
f
2.14648 117.958 mo
1.87646 117.809 1.68115 117.627 1.5459 117.417 cv
1.41748 117.208 1.3501 116.959 1.3501 116.668 cv
1.3501 116.291 1.48535 115.993 1.75537 115.785 cv
2.02539 115.575 2.41016 115.467 2.90283 115.467 cv
5.13037 115.467 li
5.13037 116.074 li
2.92285 116.074 li
2.57178 116.074 2.30859 116.142 2.1333 116.263 cv
1.96436 116.392 1.87646 116.581 1.87646 116.837 cv
1.87646 117.154 1.98486 117.405 2.19385 117.586 cv
2.40332 117.769 2.68652 117.856 3.04443 117.856 cv
5.13037 117.856 li
5.13037 118.464 li
2.92285 118.464 li
2.57178 118.464 2.30859 118.532 2.1333 118.653 cv
1.96436 118.781 1.87646 118.977 1.87646 119.234 cv
1.87646 119.544 1.98486 119.794 2.19385 119.976 cv
2.40332 120.158 2.68652 120.246 3.04443 120.246 cv
5.13037 120.246 li
5.13037 120.853 li
1.43799 120.853 li
1.43799 120.246 li
2.01172 120.246 li
1.78906 120.111 1.62012 119.942 1.51221 119.747 cv
1.4043 119.558 1.3501 119.328 1.3501 119.058 cv
1.3501 118.789 1.41748 118.565 1.55273 118.376 cv
1.6875 118.187 1.89014 118.052 2.14648 117.958 cv
f
3.13232 111.1 mo
3.42969 111.1 li
3.42969 113.888 li
3.84814 113.861 4.17188 113.739 4.38818 113.51 cv
4.604 113.287 4.71191 112.976 4.71191 112.571 cv
4.71191 112.342 4.68506 112.112 4.63086 111.896 cv
4.57715 111.68 4.48926 111.458 4.36768 111.242 cv
4.94141 111.242 li
5.03613 111.458 5.11035 111.68 5.15088 111.909 cv
5.19141 112.139 5.21826 112.375 5.21826 112.605 cv
5.21826 113.199 5.04932 113.665 4.71191 114.009 cv
4.37451 114.354 3.90869 114.522 3.32129 114.522 cv
2.7207 114.522 2.2417 114.36 1.88379 114.036 cv
1.53271 113.712 1.35059 113.267 1.35059 112.713 cv
1.35059 112.213 1.5127 111.822 1.82959 111.532 cv
2.15381 111.249 2.58594 111.1 3.13232 111.1 cv
2.95703 111.708 mo
2.62598 111.714 2.36279 111.809 2.16064 111.983 cv
1.96484 112.167 1.86328 112.409 1.86328 112.706 cv
1.86328 113.044 1.96484 113.314 2.15381 113.516 cv
2.34277 113.718 2.61279 113.84 2.95703 113.867 cv
2.95703 111.708 li
f
1.43799 107.354 mo
5.13037 107.354 li
5.13037 107.961 li
1.43799 107.961 li
1.43799 107.354 li
cp
0 107.354 mo
.769531 107.354 li
.769531 107.961 li
0 107.961 li
0 107.354 li
cp
f
2.90283 103.013 mo
5.13037 103.013 li
5.13037 103.621 li
2.92285 103.621 li
2.57227 103.621 2.31543 103.695 2.14014 103.83 cv
1.96484 103.964 1.87695 104.167 1.87695 104.437 cv
1.87695 104.769 1.98486 105.025 2.19434 105.214 cv
2.40332 105.403 2.68701 105.498 3.04443 105.498 cv
5.13037 105.498 li
5.13037 106.105 li
1.43799 106.105 li
1.43799 105.498 li
2.01172 105.498 li
1.7959 105.355 1.62695 105.187 1.51904 104.984 cv
1.41113 104.788 1.35059 104.559 1.35059 104.303 cv
1.35059 103.884 1.48535 103.56 1.74854 103.344 cv
2.01172 103.128 2.39648 103.013 2.90283 103.013 cv
f
1.5459 97.3027 mo
2.11963 97.3027 li
2.03857 97.478 1.97119 97.6538 1.92383 97.8359 cv
1.88379 98.0249 1.85645 98.2139 1.85645 98.4097 cv
1.85645 98.7134 1.90381 98.9429 1.99805 99.0913 cv
2.09277 99.2397 2.22803 99.314 2.41016 99.314 cv
2.55176 99.314 2.65967 99.2603 2.74072 99.1523 cv
2.82178 99.0444 2.90283 98.8281 2.97021 98.5044 cv
3.01758 98.2949 li
3.11182 97.8628 3.24707 97.5591 3.40918 97.377 cv
3.57764 97.2017 3.81396 97.1069 4.11084 97.1069 cv
4.45508 97.1069 4.7251 97.2417 4.9209 97.5117 cv
5.12354 97.7817 5.21826 98.1597 5.21826 98.6323 cv
5.21826 98.835 5.19775 99.0376 5.16406 99.2534 cv
5.13037 99.4692 5.07617 99.6919 4.99512 99.9282 cv
4.36768 99.9282 li
4.48926 99.7056 4.57666 99.4829 4.63086 99.2671 cv
4.69141 99.0508 4.71875 98.835 4.71875 98.6187 cv
4.71875 98.3354 4.67139 98.1128 4.57666 97.9575 cv
4.48242 97.8091 4.34033 97.728 4.1582 97.728 cv
3.99609 97.728 3.86816 97.7886 3.78027 97.8965 cv
3.69238 98.0044 3.60498 98.2476 3.52393 98.6255 cv
3.47656 98.835 li
3.39551 99.2129 3.27393 99.4897 3.11182 99.6519 cv
2.9502 99.8203 2.72754 99.9014 2.43701 99.9014 cv
2.09277 99.9014 1.82275 99.7798 1.63379 99.5371 cv
1.44482 99.2939 1.3501 98.9429 1.3501 98.4839 cv
1.3501 98.2612 1.37061 98.0518 1.4043 97.8496 cv
1.43799 97.6538 1.48535 97.4712 1.5459 97.3027 cv
f
3.13232 92.9829 mo
3.42969 92.9829 li
3.42969 95.7705 li
3.84814 95.7437 4.17188 95.6221 4.38818 95.3926 cv
4.604 95.1699 4.71191 94.8594 4.71191 94.4546 cv
4.71191 94.2251 4.68506 93.9956 4.63086 93.7793 cv
4.57715 93.5635 4.48926 93.3403 4.36768 93.1245 cv
4.94141 93.1245 li
5.03613 93.3403 5.11035 93.5635 5.15088 93.793 cv
5.19141 94.0225 5.21826 94.2588 5.21826 94.4883 cv
5.21826 95.082 5.04932 95.5479 4.71191 95.8921 cv
4.37451 96.2363 3.90869 96.4053 3.32129 96.4053 cv
2.7207 96.4053 2.2417 96.2432 1.88379 95.9189 cv
1.53271 95.5952 1.35059 95.1494 1.35059 94.5962 cv
1.35059 94.0967 1.5127 93.7051 1.82959 93.415 cv
2.15381 93.1313 2.58594 92.9829 3.13232 92.9829 cv
2.95703 93.5903 mo
2.62598 93.5972 2.36279 93.6914 2.16064 93.8672 cv
1.96484 94.0493 1.86328 94.2925 1.86328 94.5894 cv
1.86328 94.9268 1.96484 95.1968 2.15381 95.3994 cv
2.34277 95.6021 2.61279 95.7231 2.95703 95.7505 cv
2.95703 93.5903 li
f
1.57959 89.3311 mo
2.14697 89.3311 li
2.05225 89.5063 1.98486 89.6753 1.9375 89.8506 cv
1.89014 90.0264 1.86328 90.1948 1.86328 90.3706 cv
1.86328 90.7622 1.9917 91.0728 2.24121 91.2886 cv
2.49121 91.5044 2.8418 91.6123 3.2876 91.6123 cv
3.73975 91.6123 4.09082 91.5044 4.34033 91.2886 cv
4.59033 91.0728 4.71191 90.7622 4.71191 90.3706 cv
4.71191 90.1948 4.69141 90.0264 4.64453 89.8506 cv
4.59717 89.6753 4.52295 89.5063 4.42822 89.3311 cv
4.98877 89.3311 li
5.06934 89.5063 5.13037 89.6821 5.16406 89.8574 cv
5.19775 90.0396 5.21826 90.2354 5.21826 90.438 cv
5.21826 90.9917 5.04932 91.437 4.69824 91.7612 cv
4.354 92.0918 3.88135 92.2539 3.2876 92.2539 cv
2.68701 92.2539 2.21436 92.0918 1.87012 91.7612 cv
1.52588 91.4302 1.3501 90.978 1.3501 90.3975 cv
1.3501 90.2085 1.37061 90.0264 1.41113 89.8506 cv
1.45166 89.6753 1.50537 89.4995 1.57959 89.3311 cv
f
1.86328 86.8472 mo
1.86328 87.1709 1.9917 87.4272 2.24805 87.6167 cv
2.50439 87.8057 2.84863 87.8999 3.2876 87.8999 cv
3.73291 87.8999 4.07715 87.812 4.33398 87.623 cv
4.59033 87.4341 4.71191 87.1777 4.71191 86.8472 cv
4.71191 86.5229 4.59033 86.2666 4.33398 86.0776 cv
4.07715 85.8887 3.73291 85.7939 3.2876 85.7939 cv
2.85547 85.7939 2.50439 85.8887 2.24805 86.0776 cv
1.9917 86.2666 1.86328 86.5229 1.86328 86.8472 cv
1.3501 86.8472 mo
1.3501 86.3203 1.52588 85.9087 1.86328 85.605 cv
2.20752 85.3081 2.68018 85.1528 3.2876 85.1528 cv
3.89502 85.1528 4.36768 85.3081 4.70508 85.605 cv
5.04932 85.9087 5.21777 86.3203 5.21777 86.8472 cv
5.21777 87.3804 5.04932 87.7988 4.70508 88.0957 cv
4.36768 88.3926 3.89502 88.5415 3.2876 88.5415 cv
2.68018 88.5415 2.20752 88.3926 1.86328 88.0957 cv
1.52588 87.7988 1.3501 87.3804 1.3501 86.8472 cv
f
2.90283 81.0757 mo
5.13037 81.0757 li
5.13037 81.6831 li
2.92285 81.6831 li
2.57227 81.6831 2.31543 81.7573 2.14014 81.8921 cv
1.96484 82.0273 1.87695 82.23 1.87695 82.5 cv
1.87695 82.8306 1.98486 83.0869 2.19434 83.2759 cv
2.40332 83.4653 2.68701 83.5596 3.04443 83.5596 cv
5.13037 83.5596 li
5.13037 84.167 li
1.43799 84.167 li
1.43799 83.5596 li
2.01172 83.5596 li
1.7959 83.418 1.62695 83.249 1.51904 83.0464 cv
1.41113 82.8511 1.35059 82.6216 1.35059 82.3647 cv
1.35059 81.9463 1.48535 81.6226 1.74854 81.4063 cv
2.01172 81.1904 2.39648 81.0757 2.90283 81.0757 cv
f
1.99854 77.4375 mo
.000488281 77.4375 li
.000488281 76.8301 li
5.13037 76.8301 li
5.13037 77.4375 li
4.57715 77.4375 li
4.7998 77.5659 4.96143 77.7275 5.06299 77.9233 cv
5.16406 78.1191 5.21826 78.3486 5.21826 78.6187 cv
5.21826 79.064 5.04248 79.4287 4.69141 79.7124 cv
4.34082 79.9956 3.86816 80.1309 3.2876 80.1309 cv
2.70703 80.1309 2.24121 79.9956 1.88379 79.7124 cv
1.53271 79.4287 1.35059 79.064 1.35059 78.6187 cv
1.35059 78.3486 1.4043 78.1191 1.51221 77.9233 cv
1.62061 77.7275 1.78223 77.5659 1.99854 77.4375 cv
3.2876 79.5029 mo
3.7334 79.5029 4.08398 79.415 4.34082 79.2329 cv
4.59717 79.0508 4.71875 78.7944 4.71875 78.4702 cv
4.71875 78.1528 4.59717 77.9033 4.34082 77.7144 cv
4.08398 77.5317 3.7334 77.4375 3.2876 77.4375 cv
2.84229 77.4375 2.49805 77.5317 2.24121 77.7144 cv
1.98486 77.9033 1.85645 78.1528 1.85645 78.4702 cv
1.85645 78.7944 1.98486 79.0508 2.24121 79.2329 cv
2.49805 79.415 2.84229 79.5029 3.2876 79.5029 cv
f
1.5459 73.2256 mo
2.11963 73.2256 li
2.03857 73.4009 1.97119 73.5767 1.92383 73.7588 cv
1.88379 73.9478 1.85645 74.1367 1.85645 74.3325 cv
1.85645 74.6362 1.90381 74.8657 1.99805 75.0142 cv
2.09277 75.1626 2.22803 75.2368 2.41016 75.2368 cv
2.55176 75.2368 2.65967 75.1831 2.74072 75.0752 cv
2.82178 74.9673 2.90283 74.751 2.97021 74.4272 cv
3.01758 74.2178 li
3.11182 73.7856 3.24707 73.4819 3.40918 73.2998 cv
3.57764 73.1245 3.81396 73.0298 4.11084 73.0298 cv
4.45508 73.0298 4.7251 73.165 4.9209 73.4351 cv
5.12354 73.7046 5.21826 74.083 5.21826 74.5552 cv
5.21826 74.7578 5.19775 74.9604 5.16406 75.1763 cv
5.13037 75.3921 5.07617 75.6152 4.99512 75.8511 cv
4.36768 75.8511 li
4.48926 75.6284 4.57666 75.4058 4.63086 75.1899 cv
4.69141 74.9736 4.71875 74.7578 4.71875 74.542 cv
4.71875 74.2583 4.67139 74.0356 4.57666 73.8804 cv
4.48242 73.7319 4.34033 73.6509 4.1582 73.6509 cv
3.99609 73.6509 3.86816 73.7114 3.78027 73.8198 cv
3.69238 73.9277 3.60498 74.1704 3.52393 74.5483 cv
3.47656 74.7578 li
3.39551 75.1357 3.27393 75.4126 3.11182 75.5747 cv
2.9502 75.7432 2.72754 75.8242 2.43701 75.8242 cv
2.09277 75.8242 1.82275 75.7026 1.63379 75.46 cv
1.44482 75.2168 1.3501 74.8657 1.3501 74.4067 cv
1.3501 74.1841 1.37061 73.9751 1.4043 73.7725 cv
1.43799 73.5767 1.48535 73.3945 1.5459 73.2256 cv
f
.5625 lw
34.4067 3.14551 mo
285.507 3.14551 li
@
285.507 197.545 mo
285.507 3.14502 li
@
34.4067 197.545 mo
285.507 197.545 li
@
34.4067 197.545 mo
34.4067 3.14502 li
@
117.722 32.9658 mo
202.191 32.9658 li
202.191 7.19531 li
117.722 7.19531 li
117.722 32.9658 li
cp
0 0 0 0 cmyk
f
117.722 32.9658 mo
202.191 32.9658 li
202.191 7.19531 li
117.722 7.19531 li
117.722 32.9658 li
cp
0 0 0 1 cmyk
@
2 lc
123.392 13.5859 mo
134.732 13.5859 li
.884 .769 0 0 cmyk
@
147.976 10.71 mo
147.976 11.4878 li
147.667 11.3423 147.384 11.2368 147.117 11.1641 cv
146.841 11.0986 146.582 11.0581 146.339 11.0581 cv
145.901 11.0581 145.562 11.1479 145.327 11.3096 cv
145.092 11.4795 144.979 11.7227 144.979 12.0303 cv
144.979 12.2896 145.051 12.4922 145.213 12.6216 cv
145.367 12.7598 145.667 12.8647 146.104 12.9458 cv
146.59 13.0425 li
147.182 13.1563 147.619 13.3589 147.903 13.6426 cv
148.187 13.9336 148.332 14.3145 148.332 14.7925 cv
148.332 15.3677 148.137 15.7969 147.756 16.0889 cv
147.368 16.3799 146.809 16.5259 146.072 16.5259 cv
145.789 16.5259 145.489 16.4937 145.173 16.437 cv
144.857 16.3799 144.533 16.291 144.201 16.1611 cv
144.201 15.3354 li
144.525 15.522 144.84 15.6597 145.149 15.7485 cv
145.456 15.8457 145.764 15.8862 146.072 15.8862 cv
146.525 15.8862 146.874 15.7969 147.125 15.6191 cv
147.368 15.4409 147.497 15.1895 147.497 14.8491 cv
147.497 14.5576 147.408 14.3311 147.23 14.1689 cv
147.052 14.0068 146.76 13.8853 146.355 13.8042 cv
145.869 13.707 li
145.27 13.5933 144.84 13.4072 144.573 13.1479 cv
144.306 12.897 144.177 12.5488 144.177 12.0952 cv
144.177 11.5767 144.354 11.1641 144.728 10.8643 cv
145.092 10.5645 145.602 10.4102 146.25 10.4102 cv
146.525 10.4102 146.801 10.4351 147.092 10.4834 cv
147.376 10.5322 147.667 10.6128 147.976 10.71 cv
0 0 0 1 cmyk
f
153.337 14.0229 mo
153.337 14.3794 li
149.992 14.3794 li
150.024 14.8813 150.17 15.2705 150.446 15.5298 cv
150.713 15.7886 151.086 15.9185 151.572 15.9185 cv
151.848 15.9185 152.123 15.8862 152.382 15.8213 cv
152.641 15.7568 152.908 15.6514 153.167 15.5054 cv
153.167 16.1938 li
152.908 16.3071 152.641 16.396 152.365 16.4453 cv
152.09 16.4937 151.806 16.5259 151.531 16.5259 cv
150.818 16.5259 150.259 16.3237 149.846 15.9185 cv
149.433 15.5137 149.23 14.9546 149.23 14.2495 cv
149.23 13.5293 149.425 12.9536 149.814 12.5244 cv
150.203 12.103 150.737 11.8848 151.402 11.8848 cv
152.001 11.8848 152.471 12.0791 152.819 12.46 cv
153.159 12.8486 153.337 13.3672 153.337 14.0229 cv
152.608 13.8125 mo
152.6 13.4155 152.487 13.0991 152.276 12.8569 cv
152.058 12.6216 151.767 12.5005 151.41 12.5005 cv
151.005 12.5005 150.681 12.6216 150.438 12.8486 cv
150.195 13.0752 150.049 13.3999 150.017 13.8125 cv
152.608 13.8125 li
f
154.528 10.2642 mo
155.257 10.2642 li
155.257 16.4204 li
154.528 16.4204 li
154.528 10.2642 li
cp
f
160.571 14.0229 mo
160.571 14.3794 li
157.226 14.3794 li
157.258 14.8813 157.403 15.2705 157.679 15.5298 cv
157.946 15.7886 158.319 15.9185 158.805 15.9185 cv
159.081 15.9185 159.356 15.8862 159.615 15.8213 cv
159.875 15.7568 160.141 15.6514 160.4 15.5054 cv
160.4 16.1938 li
160.141 16.3071 159.875 16.396 159.598 16.4453 cv
159.323 16.4937 159.04 16.5259 158.765 16.5259 cv
158.051 16.5259 157.493 16.3237 157.08 15.9185 cv
156.667 15.5137 156.464 14.9546 156.464 14.2495 cv
156.464 13.5293 156.659 12.9536 157.047 12.5244 cv
157.436 12.103 157.971 11.8848 158.635 11.8848 cv
159.234 11.8848 159.704 12.0791 160.052 12.46 cv
160.393 12.8486 160.571 13.3672 160.571 14.0229 cv
159.842 13.8125 mo
159.833 13.4155 159.72 13.0991 159.509 12.8569 cv
159.291 12.6216 159 12.5005 158.643 12.5005 cv
158.238 12.5005 157.914 12.6216 157.671 12.8486 cv
157.428 13.0752 157.282 13.3999 157.25 13.8125 cv
159.842 13.8125 li
f
164.953 12.1602 mo
164.953 12.8408 li
164.742 12.7271 164.54 12.646 164.329 12.5894 cv
164.119 12.5327 163.916 12.5005 163.706 12.5005 cv
163.235 12.5005 162.863 12.6538 162.604 12.9536 cv
162.345 13.2534 162.215 13.6748 162.215 14.21 cv
162.215 14.752 162.345 15.1733 162.604 15.4731 cv
162.863 15.7725 163.235 15.9185 163.706 15.9185 cv
163.916 15.9185 164.119 15.8945 164.329 15.8374 cv
164.54 15.7808 164.742 15.6919 164.953 15.5786 cv
164.953 16.2505 li
164.742 16.3477 164.532 16.4209 164.321 16.4609 cv
164.103 16.502 163.867 16.5259 163.625 16.5259 cv
162.96 16.5259 162.426 16.3237 162.037 15.9023 cv
161.64 15.4888 161.446 14.9224 161.446 14.21 cv
161.446 13.4888 161.64 12.9214 162.037 12.5083 cv
162.434 12.0952 162.976 11.8848 163.674 11.8848 cv
163.899 11.8848 164.119 11.9092 164.329 11.9575 cv
164.54 12.0063 164.751 12.0713 164.953 12.1602 cv
f
166.938 10.7344 mo
166.938 11.9902 li
168.437 11.9902 li
168.437 12.5571 li
166.938 12.5571 li
166.938 14.9629 li
166.938 15.3271 166.986 15.5625 167.084 15.6592 cv
167.181 15.7642 167.383 15.8135 167.69 15.8135 cv
168.437 15.8135 li
168.437 16.4209 li
167.69 16.4209 li
167.124 16.4209 166.735 16.3149 166.524 16.105 cv
166.314 15.8945 166.209 15.5137 166.209 14.9629 cv
166.209 12.5571 li
165.674 12.5571 li
165.674 11.9902 li
166.209 11.9902 li
166.209 10.7344 li
166.938 10.7344 li
f
169.392 11.9902 mo
170.121 11.9902 li
170.121 16.4209 li
169.392 16.4209 li
169.392 11.9902 li
cp
169.392 10.2642 mo
170.121 10.2642 li
170.121 11.188 li
169.392 11.188 li
169.392 10.2642 li
cp
f
173.36 12.5005 mo
172.973 12.5005 172.664 12.6538 172.437 12.9624 cv
172.21 13.27 172.098 13.6831 172.098 14.21 cv
172.098 14.7441 172.202 15.1572 172.43 15.4653 cv
172.656 15.7725 172.964 15.9185 173.36 15.9185 cv
173.749 15.9185 174.057 15.7725 174.284 15.4653 cv
174.511 15.1572 174.625 14.7441 174.625 14.21 cv
174.625 13.6909 174.511 13.27 174.284 12.9624 cv
174.057 12.6538 173.749 12.5005 173.36 12.5005 cv
173.36 11.8848 mo
173.992 11.8848 174.486 12.0952 174.852 12.5005 cv
175.207 12.9131 175.395 13.48 175.395 14.21 cv
175.395 14.938 175.207 15.5054 174.852 15.9106 cv
174.486 16.3237 173.992 16.5259 173.36 16.5259 cv
172.721 16.5259 172.219 16.3237 171.862 15.9106 cv
171.506 15.5054 171.328 14.938 171.328 14.21 cv
171.328 13.48 171.506 12.9131 171.862 12.5005 cv
172.219 12.0952 172.721 11.8848 173.36 11.8848 cv
f
180.286 13.7476 mo
180.286 16.4209 li
179.558 16.4209 li
179.558 13.772 li
179.558 13.3506 179.468 13.043 179.307 12.8325 cv
179.145 12.6216 178.901 12.5166 178.577 12.5166 cv
178.181 12.5166 177.873 12.6465 177.646 12.8975 cv
177.419 13.1479 177.306 13.4883 177.306 13.9175 cv
177.306 16.4209 li
176.576 16.4209 li
176.576 11.9897 li
177.306 11.9897 li
177.306 12.6782 li
177.476 12.4194 177.678 12.2168 177.921 12.0874 cv
178.156 11.9575 178.432 11.8848 178.739 11.8848 cv
179.242 11.8848 179.63 12.0469 179.89 12.3628 cv
180.148 12.6782 180.286 13.1401 180.286 13.7476 cv
f
187.14 12.1196 mo
187.14 12.8081 li
186.929 12.7109 186.718 12.6299 186.499 12.5728 cv
186.272 12.5249 186.046 12.4922 185.811 12.4922 cv
185.446 12.4922 185.171 12.5488 184.993 12.6626 cv
184.814 12.7759 184.725 12.9375 184.725 13.1563 cv
184.725 13.3267 184.79 13.4561 184.92 13.5532 cv
185.049 13.6509 185.309 13.748 185.697 13.8286 cv
185.948 13.8853 li
186.467 13.999 186.831 14.1611 187.05 14.355 cv
187.261 14.5576 187.374 14.8408 187.374 15.1978 cv
187.374 15.6108 187.212 15.9346 186.888 16.1694 cv
186.564 16.4126 186.11 16.5259 185.543 16.5259 cv
185.3 16.5259 185.058 16.502 184.798 16.4609 cv
184.539 16.4204 184.271 16.356 183.987 16.2583 cv
183.987 15.5054 li
184.255 15.6509 184.523 15.7563 184.782 15.8213 cv
185.041 15.894 185.3 15.9268 185.56 15.9268 cv
185.899 15.9268 186.167 15.8696 186.354 15.7563 cv
186.531 15.6431 186.629 15.4727 186.629 15.2544 cv
186.629 15.0601 186.556 14.9063 186.426 14.8003 cv
186.297 14.6953 186.005 14.5903 185.551 14.4927 cv
185.3 14.436 li
184.847 14.3389 184.515 14.1938 184.32 13.999 cv
184.117 13.8042 184.021 13.5371 184.021 13.189 cv
184.021 12.7759 184.166 12.4517 184.458 12.2251 cv
184.75 11.998 185.171 11.8853 185.721 11.8853 cv
185.989 11.8853 186.239 11.9087 186.482 11.9497 cv
186.718 11.9902 186.937 12.0464 187.14 12.1196 cv
f
190.249 12.5005 mo
189.86 12.5005 189.553 12.6538 189.326 12.9624 cv
189.099 13.27 188.985 13.6831 188.985 14.21 cv
188.985 14.7441 189.091 15.1572 189.317 15.4653 cv
189.545 15.7725 189.853 15.9185 190.249 15.9185 cv
190.638 15.9185 190.945 15.7725 191.173 15.4653 cv
191.399 15.1572 191.513 14.7441 191.513 14.21 cv
191.513 13.6909 191.399 13.27 191.173 12.9624 cv
190.945 12.6538 190.638 12.5005 190.249 12.5005 cv
190.249 11.8848 mo
190.881 11.8848 191.375 12.0952 191.739 12.5005 cv
192.096 12.9131 192.282 13.48 192.282 14.21 cv
192.282 14.938 192.096 15.5054 191.739 15.9106 cv
191.375 16.3237 190.881 16.5259 190.249 16.5259 cv
189.609 16.5259 189.107 16.3237 188.751 15.9106 cv
188.395 15.5054 188.217 14.938 188.217 14.21 cv
188.217 13.48 188.395 12.9131 188.751 12.5005 cv
189.107 12.0952 189.609 11.8848 190.249 11.8848 cv
f
196.057 12.6704 mo
195.976 12.6221 195.887 12.5894 195.79 12.5649 cv
195.692 12.5488 195.587 12.5327 195.474 12.5327 cv
195.061 12.5327 194.745 12.6704 194.525 12.9375 cv
194.3 13.2051 194.193 13.5854 194.193 14.0879 cv
194.193 16.4204 li
193.465 16.4204 li
193.465 11.9902 li
194.193 11.9902 li
194.193 12.6787 li
194.34 12.4116 194.542 12.2085 194.785 12.0791 cv
195.028 11.9497 195.328 11.8853 195.685 11.8853 cv
195.733 11.8853 195.79 11.8931 195.854 11.8931 cv
195.911 11.9009 195.976 11.9087 196.057 11.9253 cv
196.057 12.6704 li
f
197.539 10.7344 mo
197.539 11.9902 li
199.038 11.9902 li
199.038 12.5571 li
197.539 12.5571 li
197.539 14.9629 li
197.539 15.3271 197.588 15.5625 197.685 15.6592 cv
197.782 15.7642 197.985 15.8135 198.293 15.8135 cv
199.038 15.8135 li
199.038 16.4209 li
198.293 16.4209 li
197.726 16.4209 197.337 16.3149 197.127 16.105 cv
196.916 15.8945 196.811 15.5137 196.811 14.9629 cv
196.811 12.5571 li
196.275 12.5571 li
196.275 11.9902 li
196.811 11.9902 li
196.811 10.7344 li
197.539 10.7344 li
f
123.392 25.2559 mo
134.732 25.2559 li
.873 .242 1 .129 cmyk
@
145.238 25.272 mo
145.238 27.4346 li
146.517 27.4346 li
146.947 27.4346 147.263 27.3457 147.474 27.1675 cv
147.675 26.9893 147.781 26.7222 147.781 26.3496 cv
147.781 25.9854 147.675 25.7173 147.474 25.5396 cv
147.263 25.3613 146.947 25.272 146.517 25.272 cv
145.238 25.272 li
145.238 22.8418 mo
145.238 24.624 li
146.42 24.624 li
146.809 24.624 147.092 24.5513 147.287 24.4053 cv
147.481 24.2593 147.579 24.041 147.579 23.7329 cv
147.579 23.4414 147.481 23.2148 147.287 23.0688 cv
147.092 22.9229 146.809 22.8418 146.42 22.8418 cv
145.238 22.8418 li
144.436 22.186 mo
146.477 22.186 li
147.084 22.186 147.555 22.3154 147.886 22.5664 cv
148.21 22.8257 148.38 23.1821 148.38 23.644 cv
148.38 24.0083 148.292 24.2998 148.121 24.5103 cv
147.951 24.7212 147.708 24.8589 147.384 24.9072 cv
147.773 24.9966 148.081 25.1743 148.299 25.4424 cv
148.51 25.7095 148.623 26.0415 148.623 26.4385 cv
148.623 26.9731 148.437 27.3779 148.081 27.6616 cv
147.725 27.9536 147.214 28.0903 146.558 28.0903 cv
144.436 28.0903 li
144.436 22.186 li
0 0 0 1 cmyk
f
149.887 26.3413 mo
149.887 23.6602 li
150.616 23.6602 li
150.616 26.3169 li
150.616 26.7383 150.697 27.0459 150.859 27.2563 cv
151.021 27.4668 151.264 27.5728 151.596 27.5728 cv
151.984 27.5728 152.301 27.4512 152.527 27.1997 cv
152.754 26.9487 152.868 26.6084 152.868 26.1714 cv
152.868 23.6602 li
153.597 23.6602 li
153.597 28.0903 li
152.868 28.0903 li
152.868 27.4106 li
152.689 27.686 152.479 27.8804 152.252 28.0093 cv
152.017 28.1313 151.75 28.1963 151.442 28.1963 cv
150.932 28.1963 150.543 28.042 150.284 27.7261 cv
150.017 27.4189 149.887 26.9565 149.887 26.3413 cv
f
155.096 23.6602 mo
155.825 23.6602 li
155.825 28.0903 li
155.096 28.0903 li
155.096 23.6602 li
cp
155.096 21.9351 mo
155.825 21.9351 li
155.825 22.8589 li
155.096 22.8589 li
155.096 21.9351 li
cp
f
157.347 21.9351 mo
158.076 21.9351 li
158.076 28.0913 li
157.347 28.0913 li
157.347 21.9351 li
cp
f
160.32 22.4043 mo
160.32 23.6602 li
161.818 23.6602 li
161.818 24.2271 li
160.32 24.2271 li
160.32 26.6328 li
160.32 26.9976 160.368 27.2324 160.466 27.3291 cv
160.563 27.4346 160.766 27.4834 161.073 27.4834 cv
161.818 27.4834 li
161.818 28.0908 li
161.073 28.0908 li
160.506 28.0908 160.117 27.9858 159.907 27.7749 cv
159.696 27.5645 159.591 27.1836 159.591 26.6328 cv
159.591 24.2271 li
159.057 24.2271 li
159.057 23.6602 li
159.591 23.6602 li
159.591 22.4043 li
160.32 22.4043 li
f
162.41 25.5474 mo
164.54 25.5474 li
164.54 26.1953 li
162.41 26.1953 li
162.41 25.5474 li
cp
f
165.698 23.6602 mo
166.427 23.6602 li
166.427 28.0903 li
165.698 28.0903 li
165.698 23.6602 li
cp
165.698 21.9351 mo
166.427 21.9351 li
166.427 22.8589 li
165.698 22.8589 li
165.698 21.9351 li
cp
f
171.636 25.4175 mo
171.636 28.0908 li
170.906 28.0908 li
170.906 25.4419 li
170.906 25.0205 170.817 24.7129 170.655 24.5024 cv
170.493 24.2925 170.25 24.1865 169.927 24.1865 cv
169.53 24.1865 169.222 24.3164 168.995 24.5674 cv
168.768 24.8188 168.654 25.1587 168.654 25.5874 cv
168.654 28.0908 li
167.926 28.0908 li
167.926 23.6597 li
168.654 23.6597 li
168.654 24.3486 li
168.825 24.0898 169.027 23.8867 169.271 23.7573 cv
169.505 23.6279 169.78 23.5547 170.089 23.5547 cv
170.591 23.5547 170.979 23.7168 171.238 24.0327 cv
171.498 24.3486 171.636 24.8101 171.636 25.4175 cv
f
178.488 23.7896 mo
178.488 24.478 li
178.277 24.3809 178.066 24.2998 177.848 24.2437 cv
177.621 24.1948 177.395 24.1626 177.16 24.1626 cv
176.795 24.1626 176.52 24.2188 176.342 24.3325 cv
176.163 24.4458 176.074 24.6079 176.074 24.8262 cv
176.074 24.9966 176.139 25.126 176.269 25.2231 cv
176.398 25.3208 176.657 25.418 177.046 25.499 cv
177.297 25.5552 li
177.815 25.6689 178.181 25.8311 178.399 26.0254 cv
178.609 26.2275 178.723 26.5112 178.723 26.8677 cv
178.723 27.2808 178.562 27.605 178.237 27.8394 cv
177.913 28.0825 177.459 28.1963 176.893 28.1963 cv
176.649 28.1963 176.406 28.1719 176.147 28.1313 cv
175.888 28.0903 175.62 28.0259 175.337 27.9282 cv
175.337 27.1758 li
175.604 27.3218 175.872 27.4268 176.131 27.4917 cv
176.391 27.564 176.649 27.5967 176.908 27.5967 cv
177.249 27.5967 177.516 27.5396 177.703 27.4268 cv
177.881 27.313 177.978 27.1431 177.978 26.9243 cv
177.978 26.7305 177.904 26.5762 177.774 26.4712 cv
177.646 26.3657 177.354 26.2603 176.9 26.1626 cv
176.649 26.1064 li
176.195 26.0093 175.864 25.8638 175.669 25.6689 cv
175.467 25.4751 175.369 25.207 175.369 24.8589 cv
175.369 24.4458 175.515 24.1221 175.807 23.8955 cv
176.099 23.668 176.52 23.5552 177.07 23.5552 cv
177.338 23.5552 177.589 23.5791 177.832 23.6196 cv
178.066 23.6602 178.285 23.7173 178.488 23.7896 cv
f
181.599 24.1704 mo
181.21 24.1704 180.901 24.3242 180.675 24.6318 cv
180.448 24.9399 180.335 25.353 180.335 25.8794 cv
180.335 26.4146 180.44 26.8271 180.667 27.1348 cv
180.894 27.4424 181.201 27.5889 181.599 27.5889 cv
181.987 27.5889 182.295 27.4424 182.521 27.1348 cv
182.748 26.8271 182.862 26.4146 182.862 25.8794 cv
182.862 25.3613 182.748 24.9399 182.521 24.6318 cv
182.295 24.3242 181.987 24.1704 181.599 24.1704 cv
181.599 23.5547 mo
182.229 23.5547 182.725 23.7656 183.089 24.1704 cv
183.445 24.5835 183.632 25.1504 183.632 25.8794 cv
183.632 26.6084 183.445 27.1753 183.089 27.5806 cv
182.725 27.9932 182.229 28.1963 181.599 28.1963 cv
180.958 28.1963 180.456 27.9932 180.1 27.5806 cv
179.743 27.1753 179.565 26.6084 179.565 25.8794 cv
179.565 25.1504 179.743 24.5835 180.1 24.1704 cv
180.456 23.7656 180.958 23.5547 181.599 23.5547 cv
f
187.406 24.3403 mo
187.325 24.292 187.235 24.2598 187.139 24.2349 cv
187.042 24.2192 186.937 24.2026 186.823 24.2026 cv
186.41 24.2026 186.094 24.3403 185.875 24.6079 cv
185.648 24.875 185.543 25.2559 185.543 25.7583 cv
185.543 28.0908 li
184.814 28.0908 li
184.814 23.6606 li
185.543 23.6606 li
185.543 24.3486 li
185.688 24.0811 185.892 23.8789 186.134 23.7495 cv
186.377 23.6196 186.677 23.5547 187.034 23.5547 cv
187.082 23.5547 187.139 23.563 187.204 23.563 cv
187.261 23.5708 187.325 23.5791 187.406 23.5952 cv
187.406 24.3403 li
f
188.888 22.4043 mo
188.888 23.6602 li
190.387 23.6602 li
190.387 24.2271 li
188.888 24.2271 li
188.888 26.6328 li
188.888 26.9976 188.938 27.2324 189.034 27.3291 cv
189.132 27.4346 189.334 27.4834 189.642 27.4834 cv
190.387 27.4834 li
190.387 28.0908 li
189.642 28.0908 li
189.074 28.0908 188.687 27.9858 188.476 27.7749 cv
188.265 27.5645 188.159 27.1836 188.159 26.6328 cv
188.159 24.2271 li
187.625 24.2271 li
187.625 23.6602 li
188.159 23.6602 li
188.159 22.4043 li
188.888 22.4043 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (011x003.eps)%%CreationDate: 27/05/15 11:14 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^CuYMdK/4i6kF@M@%_"0#_"0\[rn(^fQ#\h>9bZ[fB(t#+Y/*r:/sWG/V,Bl2V:1pYha[:Fn\3]Smo!%@%[%sk88OGG#VI:e!l0ZgG>/stsX.$U0"gb@D3iKEJeT=k_YF&J3<HRk>Z2+7n?#+PCgWe>RVc.9[S*eL!ZLE(7OZ]STUF2>f9s%`?%r[56ZYIo<1deOpTWVfo&Q(.108iN`L=Ts>Up9aYm=g&nGI_XCd91dr^!N\LoPSY?n$_`:C"ME3.XoDF;`s?C]](:n&GMn&NKYO/0%\m<es7#?eW/0*I3aTNe9rGVDt[.aLPl*`+ucXu2\6`Y#^>Mk_>(OB@Qs&l@fZsAYR40O(AlBQ5ro12s,XGKKeTAhpaM&M4DBbl#f%>"R1o&iONm?sW0'ce<l7P2!B:[FQZEb."uqTDqgl0c5d7509#;hg2DQdJ3&Pl?!$:KLH-jC9<LGj6r?#Q$:p`KKspJ!p>jBH``3Z%hQ6`DgR"'5Wr\&b^[cTN9t1EC*49O@oB%?rEmZZ/Ugok/5?Difn@rQI7O;'ji"`9OPMcTqJ:f#SO_Bc;Y`@G0n"5Rc-b61D7#"q5%c`.PMXX,"YJa(KAdf1rsT+Hn6h!NZ2P]3EsK`clr;6gF>Uk81KUh5V/-XrICTf-"E#8+;!FJ2R5F=U!U9@FS#OT-Xds6bJN.HmD,%_l%(^VsD34Ttm>4%Y&UAT'A@!eTLGi>_]`0>F#Gh/.6o0(6l*U-tQQC1;i@f:r[XON9c)$^gAMO\kiaJ_'bHs'VJF!!,iV[n>&m2%1?C8R/XJ$shCb/RH+?W*+VYT9#sG(RneBqkcZQ$in-Pqa:%/IcTM;Maj;G<15+rCl#X4s<N"b8XBG5d105(rF![bc3Jf._pT?qKN%$W(LMe4I/AlA&9a0)1)TjYFW=I"67SA&:[O-28a(P*QdH$13C(;EI_#AAh*%Io$L+#G6O'8<C3I4<kJk^JG9ka!=?g6JdFi_'f/4%ee._q-_VM&n-PqaIIKh(8@4'>Q.-=%1*$A;RJnn.&c)dbTbQH)isTQ]TcPU0FHLkUAgT0/K)L<WcoS%lcoQE@[$j+2p;&,@,5Mc9%,<R.<_C(S!eg8a<ZWZ0/S0Km&m:JE'FG4EJ:eij$kQ:&d9W!L3KK?tm;D6uJ:sL?'g.#b2;QP%nS\.aiPCJ7+dPH_<':BNj&.E.J%O6Ee2mGsg+Re9_/ZP]<fmM"u"H8"n$hA//jHFf1nj0FaK:rG="D[UG:=rG#T?@nNVWN$=)#ChS1<9ZVX0_%BtQi)Ju$iZ!tjBj*J%RKOi6P(0o7IZ(u%TAu$jNl1.*keDM:4;!(b^WfLD>PofI''Wkf5f@%#Y>c^\`F&13iW"]s#MHp@OXp7PIZ_CDI@="eb]6Q8b%81u%C?;b#_-agQ3V[gG[K'oSH&'2Ws6p>5gVpf-s#Gi3f.MB!#Jne12rGYG?[1=IK:^#4Hg?]:"18[0`\*VLNqa^Q-K"=A:&I0PDo);i%8LC)5?rC"q>LVOaBtaO"UV-=mpg:h=)1WCn-!r6W$G2,:P\GJ<J4hI=V%)-rs82:d.?F:;Q\Z[`f8-$n[=ru1/S!,cY@`\R!c#Mm%,gr&(K4uHB(W/dIX4ci$BWI(HOUf6b>?Q^L9V0UW=gm9oA!j$)[S),mlrUnp-nL]*"$L^>)3au1nd`M<Dj*'\[A:c0?3!:;FJ>V-%LD'Sr%&d,H>M`bU3TrWs^ZbQl:,2"1%Y'&mKPlA^>6UL1#f<GoCdGEA4XX2Q4=-__[&&`!S1br;Z2MhW`'sphk$5sQjcYK)49]!m%hT-I*?pL>"I_-ld^tpB+MKphf9t=Q:9^r=<&DI2r:UGuN;#&&R]A/#-G$'uX`UUce-8DABr!B3,ant"rXO"2L>)Lr20Y#4a<V4+#%]^CsO8WgHu-Ol8J<r@*0S)b%PS&6-:X>Q=--*6!5ajJ]"^OSh@aqkAVKk*'1n/T1DS9FEa)OD&e$.=H.*C<5mNS@1anb$MCUA@kh%9lB?U[&4Y+T&W^F`aWLMIhcNgWX#Qka+AUD.q?p]bSHmJkhQjeNDnlCObiR\9@HihQ;(3iN1gk"Kjd8JEDrm\djg!l]#`X%dnt\*%gF.XFGX%p)">'i,YVO8XdLin&FNqUi_KnA_6:N1H,M'2SbY[,@-8T(a&5REsJa8t0;fflZK^0lC\'+-)ck%B5;OZ<=QWRgD#M6m`%"3OUS^UU.SVPbGd)^_i2\;\cKh1s#n4OpqWcr%?pqO#*8T\IXiMM'Tn]N6^Vf,-(HkIO/ZA4jX6dP:uE]1&4]''2e9'MF#H"Xr!F%U6KJFoM*bGSP,-*ha5re4>"H%LX.?3r\*OHdg]Sq>[t4uCH36>3ftJ2PK!Zu$,k$K?Em5#b0&rak=K!mM4\0I6J]6!b%%H%3hMD`%WDrB]]\fT$CojBoQ(H?OW;Gq),)mm=38krNo*h,IZdB]MSk%E-1TKP1;a&GT7h!"bEh-p-_+&aR]:QdE0,&1W,^pB0#GfYbEFMk>%eODih,NHF<@`/qQQ43A:fHomd;RrS&!4tV.L970XcV;C57UgQB#H*2;Z,o)'J"&X9OjSg2DOS:PRc#Whgnu[&b%pX/r+)$=g1%?/%.\7CmcV:%mM9j$1bi8<bdGLU#Lu5X'e5B(t4HV$<H;8G@WMeqZlQ<foI":e'R?U/<e@Z6>.f*`jT@NhjJH0cL'/JG=K.#)%h^Gb?%;Qm7F?D:I5^4uPM)-soT$a3&caW-!'K8mCTht/RHfJ5ik##^\*Em-/E]e4`fjeF<mOj&_-3^S79l'K3%jp'lqRj[im[Dad+.0[@i%o)9iG'UVH3Jm]r)3I=AI$``]G-1["Rr2_05-fT<5R@Z_7Q<;@`i<1)q]ci.n!sn]+FVA#=54m%kdO3m_dUefe*14KFiq;$b>llHo%DhuMhc6OFm&_J#\Xl_;iGVtVK?uojj'j8l#2RR3[U9DDj9o[)Fd\TDJ<Z/uf6Lu-sJN@WGiOI^F2rD_5rZ+3`X*&nrA17]^IQD;>%d[ptNhFJXG-dL1\r>.WNC,^WH4,p^]@Q%S1^=8>/mE-q/Q99Kh;g[nDP-YiF^7G4OG&,dRB.FXPW*HO5CJ"(.]o7HH^]!%Bf%uk_%Dt,l>Q5Y8'lHPWJQ:!-]C@\CQDY6MJ>d#t6m3IF-bkn#^TdLSn,Cs(7@N_e\4"\B)r!G(9X!"-eoI*0tQ0q._ZX.EH3ug3Tkp;k8%qVsYaKnZaSEjP`!q+.)9RrsbBqhSa[?jqb[s,K.#nI(>O#%:>H9sfGcVL6#QYH%hl%^,mrr&8+=<9j/&pNED+nbF)&6,7PJ'6uKl%@f?9(d]@qA^4eaBOQ/sFqtXF!Sc.C/f"Ro`!B8k!)c`\ifX_B(S)5gMl]=7+W3g:VBD80[9:g-VjqG&9ZAi-pN&JC&GlgY5h7r9`%:*R1!B`=o\IjC?nZZjLe<IX8iLJ0II=S]*G(D=9bcgMWa$8%ttNtMe*5lX1.:(qFuI4rFfn<N)-hrr*5qXOlBrf^<Hj?`A)5tP)h%q"cfJC[Tg)7#mYJj[:kZl:$1WKr@Rp^:oRhY1.5XnM(d!08Zo='0oJDdBf2!pbd'(aX^f0#%?IS67;B,V[^/O0X=Rknq\\0T_Z>N%(a8GN6]b5Mfes<qU-IblD^8*Qp%\sMW3lTE^Qi>I#<eME25s/R&eF?NrCZ,K\+5Q<9sY!*a9!ip-?GZTbKq&cgU0eYNCKB.g4-`V%;Y@A#H24OkG5inC)04BDP&Jr%Gs(e^B=`\dT%5A.Q('o4mC%JUajUU^6LE,!_%KCubol)<ft2l?p%.o^H2ssldJ/*+<ft\9_4_-N%$JgGfqAgonRfmj]82\Zn2i1M1d:jcEU%.u'o"G!)9m/`#VoBZ#[CjZOIl3[u?VNrb3uMUX7GVJ^Fm(a#oDMmsLo,i5qaBhOFDJu7%(fdh""GLpK#Q':TKihfjPH6TU3c">:^Zu>.?kGR@]P54.s/ORuB`XR/?%1T-]1&@So'LUSW/6jmmom1u7G9U[!U=V,r)IH\<Y1=R%E'+((,6!YPnA!)!APqU_j0N&\]nMdBfbUP0l@&'GQesD,\ptmqlLeLWSI1<=@(6-%"WP'F?Ad^4raa;L2`aa<^R]96HT@n+7'lU%%.gFRZ??+m.97Oor*n%sO^U8(.L4qVP32@=_[Nfo@"%kda]mO:qY5\<#-+BUM)<tmsX&]&+YL.0>ET-q*gDKV`U_XAH$i\DA,pnhg%D=>.9kPs0?fVsA7rdSDP_[SVArjH0LGh`,1Z;!NRmn4k^ZVOm*IuC<3fsnfo[Y?%K=T>h\r#O:Us*RkZ++7@h\QW$R9_VoF,"d6$%X$19jmiVMaD+umoWb&./Z=YiVHe\5Allu1C^\65)\Hi'p(7RPf9:FGdJ:G[KMoMXoQ]JQ7)fWeb]G,mX7i;SU<8-/pAu/d-^-W#8%H#@AOk(K$lC<78EL;$+2b`/r&;`DTeWe2FBDq>gNqP*'SW0Zl8]HdkD'e53X.\/@:1m6Z1+-.S%Mh]$-S"G].Bruj@4=.ZG#5?g2%B'0h6^eZi5CLY\Oo;=c>Yg^]m@VKp^q!tcX8Q+pbQ\f0&>Z^ji[-Epk%k?s"o"]Dg.r!b@.?TN[`2R*aLK>TO/U!mgT5l\B1"1_3%;n!SK>*UQPL!=p^[IosL9d*d;Y&n>%QroIrgHO22>0X5=]h86%."$IkRK)Y4H$#5&@+,e+4K*Bdq?/MLWgBN=Ehl],^@;28MoAqj%J(<7)#QRdiB@3BMA/35=IH>[q^\'WdcHBD'K1J:(WR8%/eY(D_CP.`7p&p\/9+[kO&C^REeit+]A>e1"IPDM0L#>)V"uWK!YP$3W%iWV`$renAA4//&"'YO.7h/4Ec2]LN"i2W5SKaY;7]n"mR+n+?0ja+8d5'hSAeGPaI_LZUl^T;HE$ED9<gK6BMs$G6Y@D>e,Q,Y>\%;3't@&Ydq=ek?T#)4Dm'&#`Y7_Gb'e_YK&oo2at<L\&EA&oPg&Fj7A]OSWs2:-d^"U@!^"fO5,FMb4n'3fsk%rO9rTY_]$OTMol6%-)>k.Iq?3nqTYhNnC_TR:7GeKBGb\f\*lCDoOXlhg%dm=)]'_)d(9R7@DkJ4>8#<L&mR:Y$JQR$`Hed9]cY6-?MsB#o1@MecFT9Y%/c%%MaMD5IL8(5.[J&MKB=lWJ56!-G[F]#CN@D#efW(uQCn<odP;U=am!+]43]<.70np9O.r]`e)k.+p&KBA:G7F"BOEHO$M`d!%%0S2cmeHR@e/$H@.j1X<Y0Q)`NFJoQ9<X1+DA*EHi5iD15JWa7p'rCBr2-:jrX+lm(8/K-[0<X#=HY"iTYV`i&O_g0"S-TdfMb8/:%)<cHb[]?fNY61-8*B(O$a7?HLMH/Ekci;S]W2_eh2iN]BP-_!bajT]^EZYKlfLZ.6ZLAL6hr,2h'Dfk6cY;tFE6&_<=)Y-FWI=m\%J<`*:5-/'on4U#Wi@W$P*)Y&@9_P%RY`#n:-`1Icf),2Cp8))r<L[oFg##O6EH)Y@G.^/-hg,1G1-`(trM[+[U"H3)YMXhZGs+8s%6,_=mf@\bC'D8,8Z@'$%Rb-BVrTqh_;,Ypq_d:iY1ds.e1VL,WSuS8uTClA5H/Ih.Im?scd]U#?=gJ#r.>t>EQ`i4a9ejC/ZL00[%>e<`6Vb+_^`bV1j[0E_mdXE'PUP"Nc^TD=IB-QLhctl^3q\88d_sl@gQN\i=%X`ALAcq_A/t"@\ejW5(I^L%k&l"erqI`XH[_JVT%"rHnkkCEue,3"Y!4t;44&DhGjnaI@nJE'[FdJ2uVb`=70a?k],?+^dd=lpYaG":DP&lc#2H`r6B4!B;a5/C^U#)3[qql<a.8+P6p%Aima\I\4klUfq]EhjVE0LDCP(_$X^3(eoCR%N%nQ]o670/S:G+8p?c,fOaBidIGIT_bIg<Fc>;meM0[;Wah:d:`VY^i;gnkV&cDf%:p)D;fF&KM0&!><UXA3U_B=u0gW^"f,T8uUbA(X&K<)C=(pTpfM4f%iBtg8>d/C,Sr77ak^k:r<Dg+FXCrhP+"rZ.50H&$f%W"u.%_[=^D'I`h0Fu9Z$Vg>2)r@;Kj#];r50(QX-?FR^9*gQ!&^,D^E""D^!^]#fR@=kKD_"=,DhRD91^G`OXqssiRq='+^rC'mH0H/b6%UjoM-B)@'[i%qH>ZOIslV%:Fh43N8405qb3FBLMF\!l,$f+O>_`j_!16XP]D>G)*GYgO\c.Rm:WB+4?1H+=a&c5q\D>3gRM2u7O"%eS8aek0YSGJ3k>PDbMm]fRMlqP8=oXO9p7k>HGL]$W^!9r1,CIdAYpi@pm[L69^DBljBFQT5_lBB1+Ll41_XQ*iVnV;*Gii.k!k2%a3_\\b$6aY?utdJ>G/Mp7B0mp-,T)E63BnE3o)hKhJ-'.X+k)jC0iLsAlKO,AmJR`NU[X'PZlhJnf144.F7-2;MIKe9WqU&fC6FS%X@=f54m!#Y1=$:T@=miehYHN0XM3aJ8VDLjG2bld<1ZhEJ0JI#\9H7WN[E+%r4/2jKU2.%o4??i0Hbu<T"mVm<_3X?Q/knN,uMNg%%"c8<!XrH@4("U31dj17_NdAgl?YU.5*!g[cAKj-Hi-`m/X8nGoco(%d`94Wo(@[&rIrs=p<rBYJ5P\VrS28(5`1VuSZ5K&4cuW`%9aR/e2bHM2pCC3q=*[JAKZ:'5,"&+SQ5l*\%D5F@:5cl2oE9n5RfD(?XSPff'PgZodjNEjJ(5$jrV/cCaa;";goJ(3V9#,."$@g=%1!gH`ZU>;]1'BX+riE?1j-[e(-mN,j?Se>Aq=VptS<B@+=I<Iqkj%Y31KI8:FT13OJ&;e_p%@qEB(=.%qV%N'?*+guPaaQ0<1@5X%[6@J+I=!iZR%$*1Uf6l#?Rr,"iN8SQq"R7<T&6iQq;8$TeAB%E0t!r"BM*18AenHdV@&_)USDrA&95ZBA,YV::#C&7a1A[mDc[^H%b>%k+=/t8ZZMd`Q,gu)Rg?M=[TlmlWZ0-;]SF)TBCq4h,>aF+<[n?2!HuiV#c*+j]F*YA`CXK$aCDu1LBjA8eU_YR)G>a@EU6D$q%c(75%*.X;P$VsbYQ21?XV_[)Q:M<p$DORhLWoT,F;dM7o3,Qi[\t2G[aVL/]lA\*^]%QEiP&L!3r=1$HLaoq6ZMd4Bbk?JHcH,;J%cL:\b<bbel24Nnk>D]`\Hh7/e!*aTB3djqkd4TXGgCK_3!>+N>&$[%d4+D$>BM3F12&3Ig8?2=@_CCF8'5:g]k)')f%]f64rUA:L%#cY3#@\$O8[@g-SoK1?`)V3JV_bK=/Jh(,pR-r0l2-WA3[XXpU;mS,UVt[]!+r@4^V6$c%KN)\\:-$L9DK)Glc+R"=h`M4F1m.3"%PZpfFUX+SATXH=SPKj'Q8nW>ANIrqY?F90.[9]^fK/C,o_%Tmrg?d+X(QE$f<0sK5BVia*1Hq3FkOqps=,K&j91`(i]lL[Td!iKP%_)e4QX`WgL]VrR-!\8\(4?j7VeBYauc/;2-Bj\8=Wi1i!QKC9FPoe\@`q@CO6;XMLRC*tkW7"'P<GR%oAi=F/6#?e)hC)r:3=N!2%UASn)SUP?E6'Wq]LPIXf'Pt(iXk%%ZX)UrAX0eU;/NdAE=1Y6hB54dHNNZ5pa4f@kKlu,#S&JN;Vcc5@<prVVV>II%Vpa<7A`$fn%U!gKC9"/S1gf"l#<3>!I[rq`=[LuK;2/.P?bE$(s(6sN_#M3$+WeFEao<YgoVgWe.=R"N0N#l0e?L:Ef67TZQ<6h'j'<%54[dJ"a%%e"9kZ[nBJc8=BF.m<bhU"3:E$FS5q\!5(Lek0nXqg/+5]Wna\>\Rtt,.,eAVlbe.*qockHDFfJmhLI*4]j3t4e=bu"BPA<oX3_[%'\>[PrGuILb9</-43Bpg^)1,>iLe]qOmD4^Ps4Rd,+BS+eopn+4r$u[c%T'lr8%mae2^d(88UI?Q;FDN5IaTJM@$?Uqd_q=8mh4L%YL@$"pFC<p;Jg#_G2(d"IH>`l.1_[roSbV&Isr$pBm'17**'W)p7&ooF*a*Pg0L?F[5<RAq@'?Fo1%R+)T%2Ok@-"HQ"G$4W%G;T%g0%s'/TcE+c7a*3=JXAfF`5Z+WVNgG1(KprV>A\>@F&0B'Nk@W9*;1or,$<6CJC\@].(Mn2?,4EdRoj$Z9ItW1i(G#A9b.TSh-LX%@;]FG5;nkHF5PH9'D;5Xm-+cM?GAd%WT?XI[l>E!2NkoKHm)4Vri+SbVj=)A0tKGRNrNhRA)]P3%Xi4:mk!:M5'=6Ce*$4u+-jka%n^PT6CGN(fhnFiZ]g(CVf>=/o*5*p/4iJDI-BBK[?a`>YG.+<X="ZPpl.aFClbe-*s1/&_5#itrr(g[CcPhaP!REEWo?>AdG^>X(%aeckHhA;MZ`R>lg4f9ChWR/-SFH9Y\ThiEU[EXo.Vj(]K?fe]9Yd[JN:R98PVn8D&FrgGO[IJ:G+3q.UeF_&b>j0X7rnsUgqK,eC%T2<EcQ;;3nRAH"Sc#';a3lfse1qW+$3e)V,=f5%'fbK"?gcg5ER`bq!a*i,KC7VoQ5u6*N2icssBPJm=$k%u7"n5r4mL!ED-;Vn/%:M.Pp9^>HibdW[;gi[P^bkKFDHt37Y:+[/U$h/.i9V"6KhDh&7&dq(mX.4&_]@ie&Alas/l"H`ejUks=;MQm=qb8D!BPJmeVVHaO%QpK3BlX-m<BY&h2Hs>S&:$+W@?S]^29pB%sZfj-pEi&@XgA=H4V:O_g7B:kbO8GYT(iF7Z.n)hP+#UE'V>PL](/uaM0/-eJ#.50q%XicnIB2_^)cJdoR<,$K$H;[_rRJa"S9&mYRA+83ueFsuaFK=i/1ij=6.:VbG(/uaU`pqi8[oN/W)!2<h+dLnHKXZ&tgbCqO^:14h%mLWPNbT/m!.pY_XK.=i]0jO,F9IPOu7hSuSp`nrCRFYVD4oRpIO.<>hD=p!%,UrK_qq^I?cC4ZV/6s@>(+,iQq*F\6g5A\Tk55(h%'Tj"KpNcJe)sorR^\lj+`W`X/CkLGPnRCp-EbRgeXL2Z@kB*_bj&Lo7CTYfQ98XelJi.b!l49b#c/#r],-t8u6-VH[nOWkbQ.#;7%iLiam^^`3%5Z!*%[b;oo4HVC8oJUb4[:5SSS9ef`1uretM\i(Q/\/F<]BbF:MduC#)CBO?F,W3!kP#/F:@K6K>%41do?+5(:?)j]%afBk9ICVF*,ULm'W2JMjUq-d=g<@.6,9f%[5UC$Rp@,])-^Yt!Eql<')bgrDo!]0>!3$h&_]O<gGD9_5r?XGFgG]r&5&bm&6KJG.%nTYZLq)*R=g6YqV'mLP.aOIcF5NR@8i[F]p+s6PLeuZ"NT4kqdic?0O7^kbY*,j_)bgJCfh;'6BjY]1=@=%.IO6Cj?Gt"bE.ui!U%:0V<Q_T-9J*n?h$`[?F`O!W*.&8DtQ$fls2N^\8@[J"4[gFHjA*S`/b/2+5A2niV?V(kNio_$E!K4m`,>dj@'JaUtu;Mt'c>#dZ0%:/gEO.!l9PEnMGC5qj%dQ>#3Ictd']1Xh/mlXG[;(0YHaC1b)M#)9>cC8$S`65c!aB[3e:h;Of]"%'gd<dgok*$u^^Dnhe-*V(`B%TO*BuMM(W7b/EskUa.><KaW#(543)gk\<JG@N`iR>M9H"-kdtU+E<8]G->d_i$p.I'pOh$ST(;Kb"u<R>CgmuD7t%C)Mp9g4l9(N%h2>O!(D\0Wq-K1_[mJ-F6orim"RG]Hdg:.&69Re%<dNhb]U?BLjM9iCDjYXUJ0WfT&(WZn`V,n'>@'DY+-mO-FiD-85u`&V2h\!%%;bBai8TO0L&/FW]ERDagT0)0+q0O*>BV40,^IGRt8*#Hf@W<['Fo4C[1.WWF+?O@t9=$au$*dtb+M3K%`!jYj5(;<q*.)F]NFT7_%)hMQOcUJ&Lh(s'<Y5+'=4GjU-*H)HD'g)r1A"2'lWONV2i*P)BT,:e9gq<WSMD7sT56'l[[$hrLSTT'n5;%/3W(Eemc'sRS&\57!%iPT]79boo]Y\Uc)h^J+?"DU5u`1Q%C',"^W''ZngnbSQ(&OO-gmJbqu2`$s7))^<\+`r.q;\_#'$^r#t784BT4r"pBLX&On$>6,P%4.u,?a9[X;!j^@LLNgfQN"a^&N!FG8\l6Qub8oqo$nrb5-Y]mDHp>%?Gj)%%`*"?+M`(PsK,=T<q`OIueA@WiR3'RmO/EOK^A,&n%ba8@9!t0]^1"qsbpQ]-kX-Oef>Og_k]lS3Tj$VQ#ToY194WQX=FqKX8!F7fe)6bH7R-!_pqNUlBo60Y0IhrWcUj8\-+V>?_[1f=T%&p?]7<ifGKl%qR&ptk]?n"C=+:J`sNBeuM@NEH0cf[XrfG<Qu]hH3j'J%`b*mN!hT"un<Y8.U0V+WD\@nnudP3^hcdHP[HPDgZ@-%(rc>,VI-FNB+!"551m=ImT;3R,FJU/Uqu@hDu>dsA$RnMoH6m_Z+hg&-X>o?rXsj-9./t;C;_gIig+!TTtYtach,hF5/SN-073\L%E2]XF6CX93a0\Hc4VQoXoNZ'MCX569%Fq,9GK:/OogKdLoo$1;\,l*cJu4KPnqZIbnmrDOpcoXpamja]=KIsRGAfaI&1lk2nI=7A%$Ab-eS;9+nnHHDuqTQ\W3S\;']lA^A>k(i[e_Ba$[E6d0@OtFP1tB3"S]NI*d#4sp(lObNZJ?NgiX+h"6!/pJ)hDXTPmW'Gc1_Ga%q*L3hf*=[VMc_JEOA<#6lh*1EG`-?Nc_7D61#lRD]QJAdi?iMM$-9L?J89P+XSc"dK/cO11IIJ=,;!*^/(8"U3a_K85%AeAMhW(T%n^Bu\rOoc-Mbu$o0*72rNQn2'#`CURVZ_#(\/$[%mj#B&_4kB&HUD;\ieb*WM>2<b?[Kb:,1_A^2J;hH:+id6GQm6!60!)uBi.E)%3Xk^[kXI56$PCX.H=Gn7o.Ifg^#o_<_.+?+nBAZe%sD(`W1P/#>K5;b(?nrcr\?@:=3p*AR0[/HNB(^c^)V/Gm?J(#c*sfh(o%(5%4H@)p;&g!?j;&"CQEZo0(f0UbH5LC_AoAnqGU$L75I.4Q<m^iNW6l0aDr*\s,1p@HcUl%s%4`*iJQi6]RdjZjNQ8d]W4ZVKW/eh7%%BnbdXV9qI'tO>^gqW<_G=ZJ*o]W%ni/&K_j,ILb:JCdPC)"R17eZ9O9@-e^kPKmkLA*o0h6:NC,a#.KdI=,ZV&3TmC]XaMKT:d[%ZSD2_M/=*GXiJ''T%Xc#O]`R]$cmb[3iHtDkK*1?p[peC/s/e?n%Oh4]DJ%6b->&S]`7%*8MV77bJSM&L%mN]T9m*5)UUdtMi!=j%&]($]4"S3#[6f&AB4*3"_atn_P,<)&=+A-^NlKb_k+sSU'`_in"*?3/"(cklD#mf>eXJO62h3B?eu+i.p;`iEKrc:FSfG0si0ED&%*)E3"$CrF!6uKa3BLFD71uFbsJ/_ie`tdXfRX*6cS6>?qO7VHon#=:GaV-[&AMLAQ6KVN%D@R['B4(oa4saSF3HWXdFG]X7Ep.g!%ojlD]CH6\N?$$8kA.+DBLQ;#7YREQRZPY]X/inWFAdaWh6PiiRc_(Zg(*"ZV/inWFS_Z#8%UF/\S]H3u/Vbr>K+@8#3-+6\-H`qB%3dA>Yn/T$rThO='N$BTVR6\eKjaK"!H-R1s#6_G&Dg(X^'gYaIri$$C%:`sCPrk+tT#*igrftErhuE)eV_IT6Xsh;9[T?m.55@N=%^"_9JQP08Gn<W6"$6-4qD"V?t3Y`(,nNe)MTA&COoI4GqQ@JlH;\,01#ATm<rmI;&k)EW"0tfeC3T&!#0MJAioo!'D&J^`ka&)D(%RDV):?XZV,IFSEirU<L.Tc8238G#rEd%IX.dMjEI>T.u?83j?Ac/Rg*a_h,@+br^6)e:HiBMRPRCQqX1cVM_Qq"t4J-@@>"1_!$p%QlD;W1ULW:Bj0A!"OCiORa$cadne<Mg#PbNn7cgF3+)<n%?rE<3)GcPA`CLtFVl,Y_pT'bgEU<!XC]EXS?]:A)j/adS<bg%K&43Y%;`Y=I8MA<TlB_b<b5r&o\q\;dqs?<d%?SX)&tT%Xkm:OIVl!0Vm"(4;*/00DO3')=2P_=n=:%]Mp:q3CMkIZCNF2t#K<aOi((nbe%hf8^-rT4qCHqnTBAGoD:U?M0NM?:)4'92dH']IRsE%F%EF?klZ3sqYla*cPrS(BTWhQ9Q-U"M5AI9Dl*!)_X@SNUqNO3X'O-W0M%%nMS^LL1fmNKobDi^+J^kh]CN_msWq0fF9n-L/7M0;=lXT4U?ENk']>fE"lI'"!l%bF%6"!kXgUmisG&KOQ%$7a:QA;TIF-u]J>ut%rDI-Xemni0Iak%)rS/%qLtKkbK[1>rp#T9j]7Wd5__Z^gI#l_:53YSbl#@cF_p9;4b%^0`6c\eLr378UbF!VRT,h:"&+[d#nL8'p%a6..1lq`A[Z.sS'5YMN1DKS(9!_CaKO<j35NljU+-mB=m@:tOU:OVh@UPSJ1A?rl\RIAtYLeNVbKg]HpLQ'<!/W@8"24fV_5.-WG%NYB$\&Wt`e`ss;H@Wi//K3QCR,G1leADTNpPDGEW2KD1i<ib$u@iUGa8C$JAH&p\G!_I^p/f/S%#of"TH)U&l?,c+\n+FjkNH1?H%P:6(rMttI,Q(bT%'[lO></EVN6%_k4e57:8M&;@Pe!=T9DAm\BV7o0IL-k`=G]ZM6.+(8_DWGlV>'mL>Aq4a)@:Dhtn(*E)HOq#M%9'W?;9A5:4K(_pAo5E,?QI\pD-3LXTikplRE.ae72bZD?kZZD:oAQ@.;3OlSkJP9_ZPYD=NosPi1?+&6*XTrD)_`LZaF(MUCr(,S%_tCL)j2d#9?Jk7O)DUgA@\6"C;Ee?9>lN78`gmY'4e\G.%ZS-&6hAr"c`Do\/ahV[=KN&@=TYm+pI#A3J(]dg-aI+!QQF*4hA*(>%2k\O06"6d/FGsj@<4BErgWg@m-f,rk=>IEp014s9H(_K7_&n<j]'t7&TKAa]o:#8n6K4(!&Oai\GSrPpp7=P"2j\7"2;3S:+s7iV%f&W;9mY%?\j1t%AZc,,bG[W/$!L%?9@\6&i38FgJ$1C'_cgE3;r=+BX,C-MIkTbW`gA1+t&if[Q_#]R`aXm)(YTWV_1SG<"(Q5bh%$K?Q?)&Qr*#!Q3M.O2>VnJ%?[3^cGPA`>!i?nb\PlIC,7;X]+TOc]uQ`fZAjq-rC*8-M,NB;>SEIn"2*1!omj\#t&>f:EEZ?nM7n%1\,_,`IMiN*?Eah^Y<pr<4JSuD#C8OTlM#d.\&I'50h)pfMo@gNf?+80'9fe`)O67CnaBjL$RD(0k;b=ZstNG<o6:sXpfItI)39X%_S7i]G[=\6[)f^cP=W_rZN4UA:?i2@'BhHQ)'KqJ4=P?qF2W%m>#PC>"e<FFkBs[/\m?704M5d1Q>kgo%cfIKS"?t##Mk"^7t<eE%ST,%RHUt(Dn-,4q7itt.bK<b'ZMIcT]2KZ0jn#n?dRLB$;^e9AgGemgoAXVd]oh3\c?BYcg"/Q!1UdUU&=g/\@$IhkA$@fPjNY]%%a?*Tth1abAk+!tCHR"F)A@L[PUB<OS/6-G6bb\B=c*1`fl\Gt]c:#43P<4RRg$O/C4MqX]eZOR*qAbo3\$bElQ29r*>FP$M9)ZkL%E7He[ePK!@,PU`Q7O>[Gg!E@S=-gV=1@2*aaWKjC4uC1Fjt8.PloQ]7Y'GI;<%5G?Dnl!C%EkuV7HG/R>_cBa3kX41k$icD:Gqe+%Vm&chH;k2n='@cd7eM-X5l/;CQXaG\me<L"5qOqNnX,Q:6g)/ui/4h#>Q1c%LXW3.e2F,Y[P<jAT5X@<P<YXV7do#$`6P-7FbmXD%22Sobl6i%!fHba'F76a(C>bTBK"PGG<fZbu\Y&tcX<[I"F?M7K6FTJq[ND@`j2M[lK,Jt'gQ7cC"eif5l1&2:eUtT&NIVPggVQ4M%qV3q>7?TLq(C/bi)*sE=E]c[<frF_UL.H-(PqsQ&P>)i]Tmnq.oPD+3>e6Lg;b#'0$OV-`]/[it9c'$e([L/(J[4OWf.4n09c%Cn%a.#d^;UdaN2I4\j,=%G_bbjtk#rJ!og\8aN9c'$e(M$rDbGGZ92^cV:9c'$ea4FY<Q;'ji6Vf<TgMK$dCq?9E3Y@,b=#O?GFE,fV%XP%^3X.nY"V@+Rs+ji*;Cq:bb"eKNm;DqfW/mYi^1e]f5&?<[!aSKPu`E_@B0q6IL$8d3:*/jLs#NT!GCqBB])^Ut+.$osq^5Xq<%/h!&=pnk]$ZKZrPo]D*kRS>07Ks-eqjbsV?9c)kP-i=44NLW]ZPY9Wk?I9q%l%1/pECT\aflV7U=Y=!mH"ABc@]&%9YIkC89c);%%s-`Q_A^borMO4B5A>FN!J,q1'Is0fmh:-)'[+"K4b':I!LgpsdT73>:Aq.Sml@Q^-ESjh6qqd"?pXR7-=mOAZGk]#abGSf.g9Kj)%;((?Q2fF;bTHl7a5L*8OERR!rYFl?N'^il:^)hgnPd:Xi_REDO7M>?[kkJePan3l7f%&T:03#)M\Ll^Khn/n::)If/C[T&Vo'Y-?%#63QQF):(=Llp<E`K"5_FNkip02WPA`D0>=]B4"8rQ2r`F6>V2+S_\C_8:'jfA-&6Bd.)W_Ec`.Z*?(TU-&D7;?(G"igpP0g)E%-%VlsI+C%(gPoEN7I(n!gLQqhj@Dj5\F<0L2><\ksJdY7*O*+5s-:8Ag]WQ:FFR3"?jFt[M:a5C*7E&ZV$ltsLtle+ZAG"4%A:95_.%Gkja0a!PHs)+ALXC@k!M=R/+Sa5?mlbE*$>I<L5RYT!omMmX?]enumh/C':Dkl'Vqnr4seER6co\W6LUN1<h)Z-XXIgfh_9'>B<<%TR.<lER?&D-ZQ5E[:fJ5'DUF;Zc9LM"U%d*r`qd<AXn\m6u<oRk.PIQFQ_M+9NK:LaT*,D7'8:d]eauU`>eem!.X^k(c#%fk8jku%Wt7@X!?p3YcAEIs#"/%H36!.^^Dm*\s#sWKA)'J,kW=M!c`">8!g[hr&jWU`MfRgrme$L']\ROg9Bgck8W6>S(c[XdSk@np%55cN%%=L1j%A-ufa:3@#QLJcOQ5f85RRQulGCt"Tn/Ld"b^:BcT.&Wp][=?"cOG(Cglsb5>WVGQ]^Teui!jnkp7Li<_YYJIB2=39E7]$[%:!CQ0X6AqFEUDEWcR<[+:[Zui&o6rcr3lY7H2Ce3>LK9&*tQAQQ]A:\8)JBAnar5:-0!o%C&5cLA^BM-U%@$\Fa6i2'F2s&?^b9a%l%Vj;rljGRI=8B3iUoH-9S$&#DarAhW&#;QM2C+t\25.R4kN$C9n:A.c0=1hgnW*p=e&e9*k1c^X:aLV\6/@FlaUY&;+XGWmEfhg%f.pHglh01-9K9LBgbfL"/eP!R%HnX`h8`U<NkWi"YnHJQ)deWk:$@HDpW):V\D@XC1fa<2=#]0MmZH=i2l7SH68fXkJ<NOu+:HA4%mFd4+WY%B>oq"GP7#g0:7iDC01$mZAQ67M.f+0Xn[TCe5?YX"*[sM,FXR2SofB:K*=.@P-(AbI^9QL$5n&n^JAo485"s+c:PrZju%Hd_Bnf2(L#4o'&faig/`3E5+RLMa#0GN6l%POamRe*u)+cV&"dV+OmY$d8IS-E$4Zb_&$)od4M2LF4':PZrHYV-B.m(VWMHj_+=l%mCZue_sUsV7&6\#S)O0^SJcdc/a]ssI9DSug%Dt'88;<To#A4t5P#ES:ur,B><*1me='&MLW/G\I(6)19"1ZK:OhnAFE]Kc)cEZA%m7FGP=*j/4PjH$?qR^qh?>6B\;>*V)$D&m>D_qXhGA];$.n;SM>>d+&0eb*'F%c<GjUfIuRba,D-;gg^%0*I6^0D=*F;?'t:X[?m%0fMiOVOACkC/?YQ[`KAqR&riU2YBI/!j[<3cX.Z2CK3>cKtr+Rd`F(\;k#h#mj/M<@<r!dn[;I%AkBhK*ci]>+$Q7gfmji&.kScl%Wjl2GIJ.?od3jZ@?LmBfVmg$a?-HSXCh=8F<6mb1_+DLHSC>`6p1ZsX'HAD?U;&N0G%jfg!cFIrRB+d7g76c"Pt$cge(H7g]b=nl%YYSS.W-'0Vm\cPn5$MHIVS=8iAdmY[a-,r`LQ7E)FC8?uI&o/b-0rSaN\!\l5nkhZZPDL3g-c@h$p/52dc=l]8TC7p,Q7jIHAC<Y%Ne&gDEK49Q%iu,hMt9<Q?%eh-:`uE/mZ$fKHLd.VVIKJqS@\4O[/8`e)EX)J3pMs9rb"WD;??[jD1U+Eg8S!+lC6ZP2j;?XM/:!f%k8].f[mcjH)T*Ng&/Do^5=Qii*$%HfrL+X'.]7Jb&[1a6SI4$LdOToA\n*2q=nKDIIH_@^WIV)EB&d;=fs>!F'!cts4G.USccY?W%*:'qO3D^spNVcP4oqVtN:1aaB;,8*;L<'FTRfhm=PlkY"p<jMB"6f9p#L3C0=F#oC:QC\D(cM](mg\Vl-jI7[05rjLln#r^3Ins/%oZ#,WN6BP?YqgbD@,)a;(j"bo/ASbUJ:1JUU9ahY#W9;tnmBO0p*b5"&,q,Qq>+iHT<,/>Qh'f2M./T6ndu89o+,3NkIWD3+1d[i%jF6/E?ck;u'Q3\=q>=m)rA0f2Gt,&glr(P_:FRogX9d]$;q(b_W57op)shC>@INlQ9iUS`IRB_:jh'+tHLkU<XQS71qF*;ZG4^2T%]Akmj.b;:^IF!WdbIrAP\,$Pq?TCG*6pON,;"sei3UGa+5Mn&)A(WUXFK=:QR9YC5<Xd=8)XLeFkZe!T^;#iflSi#&1@Di)d91\'%Q8.1\(VO0?h@A*8p\MkRY8lq95>Qdmad<Caj<<sa'8_'%"'q-U2TWR\d?4p]8fL^?42'/t7[u]o]meA(?//`4rU0?:IimRh3U`ZN%q@.QhhnVTcn9o\ZoK[srf^?fqWr_Y]lYeAqEN`_kH4#MEO++9>oVM]c-6m)THi87ml+,=t;D-Bi9tu&RU2T]4c57Jt?GC/tY[:Gb%Gg\\<=?3h&LYuD8#4D@3p\I=j!J1"8%<8RY!1&=fdNABn^M#0Hmc04RY@$q(IM$@CKB58GU2KYAG&.T]qF0<,QUhY8%E%Z-)_`dZ%Cg#?[XaY9W=MK4]7e=X[hWl!@5/,G5oo$Q7Dm9-6L@%2(qtPoZf?]AoJ';8=B$0'+q?7&O#!,U/f"HO['5Dotobd,iMn[`Fcg3N<%148/bIaZK[,MhZEd&B`,hs9Gu8+`or%=]JW+OR:3qtNWVL8VNWNOn;1h<PjicDDOqkY@D*n+DT[G5CFsqF/H4]Q\B*J$33UqO!Xc%"cQnXh<Pk?D'qE#8&*Y/HJ7fUQ,DJE(W<SG4!=j=f.Z:!El<>'@dP3Vq-LfWa3\n.+0T7oHi:H^")mjr:7E?i?GG]WfL3KrDTmJ+%U/u.VNfA.aT9h0[E,oV6`cnUno\r30dt(uclPFuM+$$fCoR$NR8\k_<A5.I@ZVkfEK>VQii';=-0B*s\]!h:ZF.sk5Ks+pjNVC-\%,R,MHqXfX67)Z=\<a1a3V(N^hC=YJ(4_L790hUl4AoSt9HKLt!ST\6'I&,,nZC@;t4.K2hf3^Eb!r5fpWIqULX>8O$j^.CZL>Mp^%/L-;++5E'<\_4sjbfo4qVR$/LR%O<Ph6^)SQ)]kY4`="SbJ0n<K;5&;oB5H%c8N#KX)h+OcL,8u.<C!^GhtR]\lc/-*EZAbkI!\K%kAn$)2Kb;2(r\]QkGNZ`o[cuhjgnT!T5FKgfg"`p7`.8\>og)o9^/lf<r23$B.*<J0mRCgmqYQuZoGC5mGe'116nD[gdl/J5F:sl%qTO[lhV?jbb&=Jqb*Fo5g29-eZgEcoL&+GTo$MdJQnN[(4;I@5IPnTZQ.>Wb$'t;Y-eIeA2rV&&G;=Enf99LOI(TF>k$Lnf?ma3'%>V9ufjR9FDT$)'=mfkKSZNE(o45Ff?;lRj(I`ti)C<)O)\*%O*NHPfRAQgnHIjaR4<#'FFG?Js"l?Aq5*5[04K*KUm9]aI\k@nM-%<^j7QVUo6pq77)Og2TDH<bX[aN0ViiQH6-2EFR0b(Oh:Ojk;T+5-sa_Fa@mF(9/#e\aIW.7]oZq0"[<Sa/,gGr=Q<:Z*mZI]Y71;%o@m=2"l[#i@;*adR^;;WQOV&q2iep$ql)Jk<W9V@hoY=m>s6H!0!DbC)f"e\4UXin$Y3/MB&9obbXop!B43I1;jYakF(TTMI8acu%lko92DP3Wq*7"FM#%sifI]b<]T4eqNCSRMU/:4Lh/!mUF#GKsSk)0W3ht$.-cAoIioC8&91ICgknftVJi=G)4#Q++rr5#-*i6e^t%#<DTGX7.alU.UKT2Lcjai,DGG?-L$e_M8NiK6O*5+(Xp?L?eK^L&s`ZPe+P1f($8"W0/SrDX0UkFs%Q#\o-K5P#IVcdM5<!>bDKf%hH=C#s#W`qdIDZ$(Vq'LdEb`[Hg&,@kbAJLY;L?Xk+'/7Nq=(OehU1W$l.XD%[I-qV4]Hi8oK`q\/'MAd@KCQA*0o_@?lm3lcu:N%br4.5Vn]L76mIT'6/=K'7VGS=K;7hEaf$$CKd+lI(TU2_r5J=!F5b$nCZWn6N@PhT>]'(Mm]l\S\_GRgYLfC?0'BfBETALV2DGSI%gje!ai;K=#PW8Q"@&Ke.5Th=>^/ZL4(\'H&rj+WUD=^fcL>h8aHh^n"_;Fl6pUc=p]UM`.&beMgjm)t.Y7k+iP+XU`+!KG8=n8[M%<EQ(Aq5S+uRMSr>`B&A8DQp9aC\"pHkj'$rfT5dnJ<!dAMoAq4AU<US0lp2u.2dV]P'4=;:Zsp,Hq\mQ#IOFE=Y%+.3M6rU/s"bW%`DO/$Glj8pm_8!(L>8s-&uJ/qA)2TPf8FS3cM>K&qR)IC]2g8,mXj%TR.aZUDTi<hQ:h`Yc.UOqk/$ItVV['&$*<O=P*.s=ZBkLU%L1a'/A[9J*3=dnAe8S]Cc''3WH2WO[hq(7SpGm4U9r+u:Ailj@Y9+Qb8@WBnqIU=0=V8Hji8eLg`=;UQ1lk>LT/A<Q$XB_+k`&4=%?s2j>_1nF1(7;]+R"b=PG0[R)QJdn$D7k"f^dCH;m(qO0m!8P,(R2oq2gWQfXZ!rDKgN@>8RC/eL&tscVoVuBmGnuQAIl;a#H'J*%bbn@o?"kded#lJYp5oW9o\$@s3S(p^Gq<<aq'Ip#Je<crV#%4E'"FQhkek-i:8A9D?hkTtCg3eMDPZ^"?`uOnOJD\DIZaqk"L/s3%_84C8>1ZAX%WC1Qr+gHX4uQ=I>5=9XbcDd:V%t[*G>a@0RFB[`ai$"u4\IBhoelNCVA9ZE[o8]<HQfeYHCb/F\.hP/k:ao:Xj4i"%9@!toh3WW$]=88rNAaCokL.sOj!XT6EB/)dP<WFR1L&YFZZbqQ^U"TPe!.1Dfme[uQMX33(]:<?UtQZN(-]pjD,fEccUMufI8bSu%fUg;/]s$ecc\oeBna3,nMES.<l=$Qg<7?gNE,>2j'"\WWnb$SO43<=`o1AIh\i%$o(Q'lEiNH%kk+WGJU;;gI_K]\fB7-@@YT,bm%c8;373ZKuLY:U@oQ->Jf.%OgWoB:GZ+d"An:%NW1<o]Y;h19<QEkum6Y>93YbP*)S`U)i1]C<8_G_s7Y_/_]r:)/C`r_Mh3g;VNG%W@)^T%Wt):+WR_sqb7UD-pL:)\!'[8EbYPqA#WH)h#*V34Xk4iJ#XGPq-:YDoDR>k([L?5SP:!@:Ln]G];/NRA<$!SpILI-j>O=A%iV["h3[']S[GU55DsBJ^_iZ8VdWA:&j!u%^bp7bej"u.3H#6_+Rk$^]]pU>?<&i$ZcHT%cU_\D_qd;nf@EQ6<*\=b9Gb1`I1)n<_%c>>20(7iFb6opV/X<ZcZ34XgR'e$d+6qqr=oE08[?WTbGO4DoR0f,.R,lPp"eXc80pH2H%[Z3O\GP7^^9NZp;[VbBdT#_,VD([4T%g_TAVP$#i]HRIX]mp]6>#IG?dZcae<')9he/T+o_3]=!@O($P#V_mlk555tTIK&au/]3NVUGNcCg4/9qCfV(p>i`_1<V%Wmk0/oE%LUOa+'FX81,O-*apS7\p60nrHb_a-'R*<sC&c?*H1TP2&l?769?YCl-q:ChJEcHNags%K/QY+T,YPWhsDU4(WDs+7a;Z#G7aK3-=%:)/7/a%%)ZG'@]mq+s.']9DA\fpt1+(*7WH\!MU%f+o"`c)f=,e7R:p[X@U"G*l>@+,cE'd0XuR*M1JMG"V@u[ibG;bH(>Wc#%s(%eu(^uTC(,+;Pc.4/_sGT53Q]aOpod`LB;]+)O_PE4.]KnXa+Xgq%5jc+9BFY_W*e&-IDP9c^j8>dPK($W:W\4B!X!haA79M5,]FD%]3hK+Hl-+ff88_W4XJN$4,u&^3SpeJC[<*Sj<ia4gPU4<n=]]>bO+h[@KUmJgV(%4[-CLm`o93Nf:5AB5#3$N^Aa<PEE'W"9ZKaL%LnC[8r=K2T_=sVmKbD2%^Df0;O@]*f<U_0(]<%d0T)&[L#Qs%\&:=[PX<59kErFg#H8n*-dGSGMTT>@41f-jeih%_OMqo+)Jo'hL%J`gj!,M-5YbAWjd=Z"o=StVcKH"jim>UiKL/`e&l?fE")BM3ll*HesY1UhAEQdKPCUoha>Ts4>Me$q&Cm?p`Ad-;QPs*)MMINofb%#MYTq"#LfsR+@KT(t4\82#^kk1?s_g@Umfb7mmOcXaYP6Wd%n+g04GA<^m&)%EIL%/4ko^6K+2l!QWg.<BQBb@i-c(B'LbaQhaIK%/!1mOHO\Z`&3De%NWh:!6H=\hf*HP9JF5:*kDIWkT^F[Jk9BfDDWLb+hX.69`J*<N"sL[teGS_#7V]YTPZ%rceQqr1P?RbVo)KB8%6Wc9ML>^oc.eET#^k,/bb+W!:MnAD:#l]f>oZ+X+1j^6aZouL@8YjBIV\h<YdV!PG3mNfZ!7iZUSZ*)Z7ik<n,,jHkqN8%unP!D"%r\@G$EhM^p`aFQ3qof!2d.+Al1`g8g@D;[7Q4lVtYL-:*IkV'G0R_XcMN=G`27l"VI&t_1Qd=9CCHNml]+_r&kZfEIVF(!mp@%0#%Z\?`T>pet^,PD8cYC'MT`.NbBaXZ*ik,diAX]tS)+)933NFm5c4,<S"RGV(ikL4(JcXhrN)]dSM=?i@gc_"SBH&OaV_V`L3.J.J&%J]-TE+D<lS,Q%;A^?*O6?hLsM^0^UKUNba:#g[n/P?NBB4/j\ofc]l=DD_-D"HUN^pVZomJsRZ,s.J;TfO91'7g4sm%X6V(UOm-Z%4TDM@Z.Oh8iu:DUU@8,GK#_>U4XC'+i3CoX!^ATZ;ocVa54@5j-2,-<*E7FT54$sgY2taKOR]94g6,h?Ep(*IoZc7A)Z;`2g!4:o%`m(]YQ)`%_I[ue*_B\<fhN\pL[DM`t+l?a`Tp%^lmf>fGSG&`QI6%:hI*h+^D-(HQL8@ph^A7-f_K2UcS\<n$iS\FV=n\W;GO>Tk%1P13*+sEQ9c#7.5Du"*:bC"6^OEN=YDEY]aTEhDs;J>0)N^CK-k$d;RfE>CFR34ebna/gD&tc^oX18R<$hOGf]fU+hgO0^k%#K[@%g3&as:H^Z8YWfa*^Gl?_-fDh#pTgPs+d_Lo1KPdTl._[dG>bXBR!kA`]iQ]t`YRq-pKFD0PB#qJ"dPqj.uhj12!\6<=snMl:a>aq%n$1<0N!UH7`.[bTlBsBCa9a0n2.+dg^%dI)_Lc7[N3hGKYQ34Zr-NY+RGb\hC*AfJJd)"jam:Qi6"U#9_h+]ph[N#T:!"UDb60fg%X[@5\1UG,)Yl0ZSpiGEC"4CPhpH5]Zd"i=h7phJeg93!l_<]K7QlaH_qb!g<hG9q/\K54TOE;).Lk,QP.qKFU.\T.)p^uH-4hU`E%a<b_bJ2E(aq8$d,erjWUPoQeAj:pm0DN-XlWu5;fZ:!&*/H:YmjaQ;\;6"<36lbNN@TM('OPV#2[qG4l1=s^C:rlg#S;!Arohn6k%=!M=^<\f\hUQB3ZUC^TH0$a-dY6IOiTU8CL;+Q!nN+1*?X[I"D%Y`9P#X5Ja62H$@$Ef`<G4FpQh\t,9QHKQq;p+9mSCX/7?b)Ob%(=B-U%*Jl:(5X5'a5ZB07b4j'H@.'BjV']+MaGjsTpd.jfT=>`e$2.VLlV;1LbU*OAr?=1PQn8]kX@2gZ[C2W*1%=[67_*Ei#e*E%@bAD.)J#s\)A+YI7n@,bN6'D$b@e8Z&UA9H&K+BTC4BtY3]5q6/[F(!4NZ]QOu)dR:JWNQkIAY)^s6-K_Ya3KSm9\p5=e1oGBkB1%%f_2L>A!-/5;gMugkL.hE/ecl5;;-RSu4f>B#-"Q?DKg[%>s04@]@PVRW]C:P4KgZMlkYMnGq#Kd8BIJF^BA>AWEl-(<$A9j)&W\%-Q_JMbO9`M^mAn+ig*fLErmi_DQBua4cjF8g<"q-cQVn!O#,L_TE"`+.7\>"be1O#IL=PZ'9WQWB&Yf?l/d=7U(/OYAH)9`AM6me%/fZ]>IadWB.SRQOE]B5V^96pT^eRl*`lSBR$ho^b9]EEQ\-SCV*G0\W#0>_-b$rmVlPn#0-ucb#cb@`eO'gf<MgIOb1Q`2<]!s*g%9UlErWF`N].oK&TGW[ANX.5VQZ[4f7gNpAPhXbBp;kKo@l7lhQSZ><%Gh/_bnGB`3&l0TlVSqYPeB$X\c#\-5L^%V5P6/tXY&Z'8%q$Q)0H-!c[Q(LEQ?K!05-@F;<2hRbO/Uq!gk:O[JoNDImhr\$EhlXc18P-^:>7&Ut^")6"2sn0N2+9UEf,p2(Am4bG9`6MJ>&Z9Y%)p?Cce@`./l$8R9F\<Vu5"Jnr0ktLd6WR0d:M5]<XUjXUjpJ!=%k@UValO#h%=f;se=;bq05h2SFE-0ZPfonU91MMfg""fR*#^%a%g&7d>O6*8J0hdjh?0oYVZQdKiTT57jAcO^_*I+$:UjnF*FrTV$POqATK[l86IV)D4ZS_Qsbfn'NNf&B"\j`1UOsZpTNbrN#O\NFY%hSIGI[<m8U\G%cr*^FU'k`\61*,OQi4=BoTVQM00KX2h!Y=(Rif4KH*;>+Ud.l_/R1)?o7Yo)/UV$r1W!$>'h\DsN@G?Yli%dH(C%8+S]uS>8B`)dlJPZd^<hp3;Up<c/p,fJL\SO<fq*nH'f's*H>+4-#SJ9ZKoj:4MT;p/1_YrNhVk81Z-/q&NJKBN1J_G-,poqersr%I/X#H27go+A1i@4f\(8g@dUR+XX3Lk@-4dI`A#@570@`(!?Id1!5o'UhqY?;mE*i-9(>Wd=nD(taQVBZ30+\4;"JI0.jSJ8iT'M3%[KU2?o=mq2O:bGc/LguDN/E2L01f$o>O200Ab!=d['+SJ.ebU-h/@0'-,7efgtgV(4)<.8b#Pn*]JV<7mJC+aG[%mB0<aM>?ZGim%G"/Gjk!M<RhNJ:(%>gha[.P&8>"hX*SK,am6EjbJ%rk-`7\C"P;BG)XcX\!SI*Vc\%fH4Z!Sdi%q,k`ZD\1-L1d3sQ-?^JtESC&T%0VVse*9dA3Z6`"3[)YZsEe)'ip!4?KH(gDm)T\$Aa*2jti9Uh@VXo)l(uU5nS4R\+0,X<)C6@!3q^2:5A''%[rnTs\dF]k+&Yj"3%.'r60\BYk1TJgCskJa"WC5O%sE34.V5a1#pqU6]iYFCCm*RGq.f?4adOb$!K?S6BcJ;W.*[A(D%mpseS4-^:_09=hU];$NP]i9+I%X_M5X<4$#1Mr`Lp3'%KH]["oK^[;g0m89.Es.[c>n#ru@)QLAjG/If^Ij4&P4<OKsRBuC"`B"p4r*-)B12P$A+647jE@OHP3m0%%%V5hsl<7ELB@hsKnW9d_g*%^VPF8NS!%!n/)9TRl?/C.nYQL2l7M1bBj6/%T"ZjJs)M6?PgZ4eA="=^dT_[d0N]-(^OVOO#O]%[(m%grOX$MY!ubXK\I:>3kt9#+Wtk*iuN&N=1!S"OjG[2^L23UGB?K!`u90lDP-ZVVi&35Y#C)2h`g]%HaStlDB@>.>(AeP!.ZnP;E/4%Zf_Us%H$`GB6b@^-OTYU^&WBA>JgPF7RjZP=n3`'02/L7Unu(6pI:L9b:n$I@VpOO/N#HLHqTHiM/la87bLgW'5#OFi;3:0cOkQM%nnjcTr0+6D(+is@l$dnTT3f61Ol2-*E0:Dco+8gti/fL@4`m9;XQ%I<5'9#9VidW\K;LH;6$-t+Ssm'eM%qXF;0p#.>f\#Q=lu2l%N3^Y4='R\3.pR2T2e\1$BSB)cQ5LeV,mAk^,pqETobYUN]^j44:q3VkZB\0QNQ_I.2'FLnFps`l2^L1e^$sL8Qhb6OmD5-9je_NF%=(H>+<]UoYW9)m[XMdQ?65uRiOU*`6@a!)Z.-BO;J3B_o'_;G"L]@Qed26k>\7R9%`6+`ZRE:KCN1>q5]Wl.SAgfBub(md!G*u24%8)Zb<O9t4,Qt(,_pVP^Ik!<h'=W#]+/1cGs=OlDKa&lFP71hk=MuXql[ucRmNMude$\"rCd6RSXA2BI$qF1Gd<SC=h_23u^Z(NfS%ethM7SVaJ^JraEP3DjgsTe@M:P3$W,K/"046%W8dF=amT,%GY%$F6JM3YnQh\Msp/8d"$S*u4%t$mh@-Cn"*t1Iec53A"4NiqE/;%hOfO>,lQ8G_E:-3?8H^7$>ibCUFf"]E]=er1k[BENs7<_ql.YsW"GKZga(<8)(ob[X!<\HGaaU=A/cO%SY+*_kN-FHf$u=>(5V3`%l#CEk:;2a'%6?Sar`[gC[]9f2*%/25o[*ELo0kEue(66"n;3Jf/=nXXKC>2D#8WK500cZPs.g502"N"X+$)9"`iD;2ZLWt7*\^*5%gj&!<:mk/;)2-Fj6CK"%\gJT*\o=A66WWrW<=u`9iI1AnRcfQP(8l=>pqa$L3ecC^i9/-%b3-g>8J>HX3g@sOh.eMjj8`8q@!&?/%FhMX-+2iCpU:':0A")FAR3tF0=t44VaWgJHVau7AJn=33TN(tC-Vt11o]kc9&I)(=YIA^*42nTic\$m]:9J00--hnLClANGCb<=n%:d'@94rll6%C;j!(Zg6'.e:mQggk&/raNETX^)d!H2F9r9,AF`cVc=nG:+S9cU,=Pb]!/I*8c+N+Km#-Y<q-]b0hTSgDppVJ.mu;%qQ54?d;QdDO5pFp;Ps"Q^M3-`+>E&r+kkE4#%5*gim"=R;gk8Xn#JVMSl4@iR;8sB[rO%kH+Ed,5;8n>>=DbfY>PNQaWk8#QJKpN%45_p^>G9Tr^H4RQo8k31Hs4-9k\:/e$V^E!=Q.Gn%lu:fq477YF&Y,K-l;1_YPHZ=qjGmUil2^sks<42IO\^2(rlr_U$&>j*-l?J%W.pn9.ZROM_[3?:kGKZT@m!%7o__Zjp?*g%2ZN6R`%n?:7oc0RNN0WRQq4+ejK-r2D*\3oBs[O4g"<M+?#(h;,l(5%s1tW#-<8;^%C8Qi:QiPrl8^-2"8Mu^e7ul%s0&Q(45@;$pbsnQ.GB+!Tf*D0h42p8YP*CA]AXAUeL`5@]Pt$fiYU91!.""W8aZTG"qEKgDo]IWr%,ftOC$&'"D*r_.Jm%Q._&El>M<Cn5WmiI^('ja!sW4%sK/O`D!L7L12_bGS-%*d($QD+]<^4;W+RWT(W5qr9jLXcLrm3ga'5H(m:%KT^Ht,H53jbJg:E,rA#XMC;EM4.;T8O7^#_ASk/H&NQ:hA.8o4goR:(.RL)u=r.'YPIdl.*SZ-;1eYr*VX#LMa3#=/@fjkoZ76E&%-sG3M1^h-Ae]KA=CF'Eac.]V,"3f,u!'u)Ca2/BQCahj%YjAH#fET,r2etbiL23K<L@&E-VBb@7%Dg>_Tsft""i$0>ZE!&]`_*<5%Z?0)])hZ4K6SQDYD,8mp(R;>gV?+cB/Pji+(hoFV.]@'=.5q^R'MXp`VOM=$E?.\i)Sg1>E_+Z40)`!;c:?kDd7BcQguN8uH$q!<%\Vem!L]Rm;)W`/FQr[[eUpuM2YT@P>l;PVLb_.2r76S:<FZ4*HW.!RND<Bqh;oZ(i#@\";9LhN.,_#o=78:,YqZc9m*4@N<OH/%l%Kjf;YFDVu71`^c]&'QaZnLc"e2pAA_OCDhQ0L5#W5Z4__-(:rk_Gj0,Bs##_(fh/\)=[2U1&$SI\QK@e#.:M?6H"]hMP3'4VE0OX%Q9q&,)Q6,UR&6upLoDRF]I!X@(pq,:N?//>FY,"q/;Tu=1'C`$eQ(j\'S\Z5j-'-b-8himL8R5h"S*V1$@RKW"Q9\3!/ukM*eg9=%CaX!;W\'QXZH,KP&gA^(+N*3<c*jseDE8D)#\(B"-IFCfU3-OWGT\[p5)K+=2[*';kCRY"QQGB+&nTQEMR$KHXCW4qQE-3l9uRl%%J=p3lWA6_4eZgereSUdQ@d#jjJYOV'/u>7]"%+nHG@cT[EXou-P-faK;R;*qRrWq5X,=bt:8rh"&TM0P*3"Li4'oa4a=D/7V7W2*%P_8?e6f`d=<S^RoW0*ce&lAq/CUPN$/g)4CV(fmlJVc*Re0hMb&]K%@l/m$V9+U)EGCaR1;%/H>rc/:R^?%mY)$`NrQ)#]P)p9A@%_T&T=&jpp2kU"L$A/btr@uJKHRfoEc&`-I(628,S#3iQ^?nSr]!3oOZFF%4_",Vap-InohagOnG8JGR0KA@(jX/SW'!9.+HN?O$l%PP8<P22DHN(4K!(W\-3e:`;>6!'soD`X8MDL5@(.AiW9$FPWVYU!>o2\ndI,VJ-[^1YI*p@VZa[O2G5`PS*97jT5$rOU;.XZQ5dE%\qMu-]Vi7Td8/iL)5MPr(IS%u.Kk?/<=U0gd7rHhQ;VjZg,WBb0nWb#,nu`(L0mlcQE?<:a@3CS+lnn$Lp#.W<7o$C$&?BOKEm7P%>9Zp3UG*L`>`rK=L_3XK2bclZ3X#VilVQ#LGK#:O#p:ZS#!jf,aOi>R+$_!6<MjKRV)XAFG([lg[LC#IgTa`U)B&l4S+6a9OsF(:%9in<)<'uB?!\.%R7cfYf3uThG]&fppU,W@3W%QUC<1cq+,R+"OQn$.!M0`VE!"d>]Lf0_`7apL&L.9C[i>>7@W"/-NAn))bM@<rV%3B%tJ(gY<BFj)na;Fq`8JWd\e)dBs^oWAW=<,tIB1!EN9Bctn>1k=l@*Pm@S5bP_[,:\3pbqR,H$P;BZ\RKB@+Pb=:0KRKPR&DY\%WoFSA6kf)?,dOE0+Z5:l-^nM\LoAImd.G<-FU=1eL)8,.en1Z.1g;<K7+P&:A?n3`C)i"K(2us;9tWZHR@G\NEDAK[MI1PN4cu=T%pB9?^2;8g!J=r=%-AG-CBW*#rj!hcC9i8m.MeUXG<K,-76u"`;d8=5e6p1RM541'p<)KhcU7=7c*l1bK"CQt!Gmdb5F3=k6)d+d`%oi?jt8@:":-oAnCW:j**3Q.]#'ZQQV0l]\QqBU6)W]8HFiES!al,i?"bgVEb'CLR)`H>$e@L7/k=BX>%i3:k:8k^ep<$:epd+JmI%r3;\8(n%`R6]9fUhi:9W>7(f$VufD/W(@.gnJ,,_N&EtTVK35"V7@'jW\,>pA-gXE)5\TnJkN)3bGI2UiueD>f-._?==/;hAHj&m%6U;rUVB_GKE?nHd&FM,)j/%BXAP+XNEtRT6;m%61JKZqXQ)\`[q@LkMD2UGgNf-PE%Q/n&LP[13l&[[3WdrZG?nS`g0]p9B#+[;)%#4MscY\=ak%7)P':(.i';LkblmBa%qKXRg/0tZWqQaGD@/]J@M@QHL<;@k=Pdo'ud&O9DK_?.bY<Q\^5:5ornf5Mm+[tt"6^p!Aq%\3)()"0N6od7n)u<MD\8W=nUG/DHn;;7?pm]:*NqQCnOBRBBu<"2o.86U1p$O_824fY.ch0'YX_JZ6/>JCQBud</C'0OGe,Jc:@M%LZqXmeo\I^km$ff*/Cta:,Pc#;*=maoi)G\fn]fF1_u.WFb<^aLD'+MaBOP`&i7NQm\h1^<H(C:[@d[1%>O@MeC5CI,(R)C2(?I_%R>tKnArX?Te^Cfq+_4hKB@5oG*D'D/1126V;I$6[oKD85@W)iT],HM.5R[rl8N!KVWnP+(l>/:8.G[NBV=>ErdU6B6m2<\d6^J1[%&>#W(R?g98Le_RlaSXJcl,!?VDQdj/`:Q#Mi;do@<>bl+-fQ7oO2EN.fL&ZdLu+6XNij"]""TC@;^-(F3j_;IO\/_.SQn/n0sk7s%bZmg^Z.AHb^bd&l6+S%O!JkM@RcNu%a>kre0ee-G\o#QhBMl#js,$os=Ns.U;\Ni32^^'g5+`sS3ei6$DPVR4,U8;u9rFQg087%J%ahuWU*()S(Df%0CPlkCod2Y.H-:+HIE>[j=a2FCal]YGmM;es,KQEj^7E7PbnO.Vh3daq<:Bj+,7h1%M7&)P;jq.V;@&&G5KZJ:1%9m/2o`7&Z4@t'l^`-aROST+?,9l.0LF>MNG(+UIGO=.6BWa#n1K>YQn"I"\VW1(1ZUd_lS+j)""80XQk4A&7TS-^/KB,%OF@OJ(2%o:/`3ai,bnfu"N)5/K7C=+]FWQnbk!qKAsAll0tIC_&<KQ8:3o+bZ4rH7ITsKYU"4P\%s0$5/.S%Wq6bU6CQ:OH'aQs34l;Lo2CO%O<<b@^nc1jeer3NbdHpAOM=r&A:ZhN^e#_>cs@[%Lk_fREm6`io&;i1.Eko@.L:Dm_]/p`%61q78G36RCt!PQRq*BJn^0Ib$c11?%Z9Np`L9''l%29B$UBHP/;h9eY>Z%,tb^q<Z^'3K>_Xl?8@/tlJ;O(3PbrVjJT`MVpGJ/-u,Ru8#"TGRhaAd5:e2@fs*8m2DQ[!ok%0,[KSiLF^:'VFI](r.5L+TR'i09asP!.mb+bn5QSH*T,-5R)4nQt\o!Z8BeMT7D0T9ju81$;A\!MY`!'(0!$;/LY8o?'6WU"-DFQ%`L:$;S0m'T&OEL[`jC#68:u$=6POdsVC`J,+]@nkN&-#pif)mi8aPM;EMdg"-,Fi%-P$5eQ!YAHH0%9I&.fLJkRbPPb/Tpg@LiJo%Z%Q%aP3sh0!0.NfUqFo&JS5UE+2;MMRMl5p,#ZNf%`)u9+sCJ;en"l6X==OH@Was:f;>l04E!SRG*%>a=Z!\s)_(i^d_uWN.)BiH%dVKC900'B!h2sJ6\/Qo'CU=cp6dYI\9N>@k_ikc;Eu^N-SgLOL+;QH(8ghJ&7'm+#F\5$=7SnhRTWK&n7_LJ,E_1C#MrcB7X%q,W%N'W(C!St1uasIo`<g<`sYF(O'-01mrTS9uD3'Mp:VIksnYA,=fJ7(@tJRPFPj&3CsLsS+pmUae.!R6%8Qp&SG1r%J<1_kq1i91`V%5QK=4BK4[%$,j&R\i?R#N!.XgC%0#Z$mKbXc6GmD".F&Yh>iB7RhSQJ>KY@GZ7HD7^eTSWi";@q0kJ.0k)61FO:Dpalo;LWkp-NN%.#/tHC;X^1&8=[^>t_=q/8YZeOP)@267*uu<kDbr.@NaM<2):i78"e\d^O>@9M76V`"+C+H-=Q?\M>E4PHM>rYY$-_CG<4I&Z;h5%n'`/UM\t]GR`B\n+V#cK!+;:R.1N,V7eUfCj"5lI\h/ucY"!SaM32"-`(2"YbR4uLR&;(l'E3ZXME2cJDUq0Cj$Z*u0JoEroJRN=%%83,t3tP;s]G"l[dknYbKTLj0A9!Q*blOPQ*5pPacnHMtaoj'q7@`8*C+^17i4/5"Sd=K__._b\NKFL@3efbW+p]*0]q[/U_I@Lq%9QjfNRq>4O[X`T@:1;?O&=AiW+R0WsKV44u*.i4nQcN'9hMVb)S[tr1'N,.UZt2oBf257\I1UjjB`apSFsX^'7+,0I@m".D(mdWr%JsV'5c>cUe,SdNL,hGK=N6%P"cN_?jY"N"N@86nX.leUO(>!\cM^;j+WiP&^(t?C2Oj\W(@5na#a"Y.g_LnZb0m)R*i:+'fP*!-e%FTiVQGL4tnl@<E(+n8bRq[pcT<*MWG4[X&#U8;t;.0NRWJT$Pk2@WQ_GX3AnVWuU$#*]3XG7<I%@";sTNok#D:1#dsPB9;`"i!BX%Q$/W$bJBeO#[Yc;U?+Wc?g,G?2#r6!*Dmj$.B324>V+)!a"X;EYQenMba@'1oqn[C"YeP9"p/Be+D=hrKS(R:piu.VBfZY6J4QSR%6k8R__:@ddC4g-.ZoXcFjjV"mA$Xc;%N,GDD5QS9)).O"h2t?]feu9<'*,&kG_RAI7D^_eC&&_kQ7EJZ&qh29#tBQr(m@\gEfb"+%Wb:SA(i1l3Ojk[BD8OI:W$t9ZUs1/e.<WN>&0a-T[7n+F3--Du"[RRl$&H?T+B6$N:JkA2LC6@@LX$D=+qnlJAE/ci@u-mA2X[1A%jUm.(^-O.E[R3+aec>&GfoF39#Dj@57,L6bUdlTK^]gW15U6f%?of(*5X`WmWB-hR8@du3/mH\T>pg9<FEm=(&06EXh[RV1LisSp%aCK?[WA^QU\g`hrR'+hB,F!!N_AgO(S-9<5@hPt=iZon.o:&V%-/t7q_%Z7b<<r2+?.uC]E^bG:"G,GG)Y/Re!t\Q*`p%UTVEf/Y%+!@M[9-0i2&R@oB=9fM,GUMSF8R7T[`VMA:Rs0,61s%;aD@"j(4CCKLSJ6Y[boC!+o[[TKf9fYH72E1bWjEX7Jk0L)_\`U]-H7?/%TAZOgMK>:$cDBNeSER$O$25;<L);1i;#m=mZ9a(G*QPHs56kT)Wjonb_R/Qbj=a(9WT>*hI4km?p!9H1\.9ra76NejEo%HU_=I$Z%_CC\G^Uhj8Q=+`A[UjdN6X%DjInGtV$pLNC%5@R[0_gk?*#%KLY>=.*Vi#Pd;_CY].mM^*U^8Q7^W.I:IE!*@6N'>N;YK]1,dsln%"%.>#$H]Xe+YLuT1='T3@0qUG+`':E(mn=ZZRS9##EIbskp0FTKu0Wh.BMB!#qS^lPD[A!U]d-nE"4.f/oQ!G0!O3<V._bPBRiPh%!D%Ml9jKLh#bij?nppoUW[V?"1^Qk"I#7]QOV:\k9.1'Y`_nWhQrF2e$s3/0:cg7'`aej(78eoYPpo&$:c*G7&.kgX*6("S0l\h6%r[jao,0k+%1ma&+Enm1B-c2AtR)Tnl8>cWMMR5kcnDHG@Epj5o9NAM5#_I7c$TfOT;R8BBfd)-*fe$'nY\osZAc`.lbY6/'A]>G#%.%>H1Rm\&=9PE(a*S4L9QkWa_nHKC(o(%>7Oda=!S-^/KB,%OF@OJ(21S%Gsai,bnfpM>85KO`L=BpIs'2,9,@qB5HaC2=_CJ6:(%&e94.6B(#<kp@>SFeWdlJDEuqX_W###F7(GnA(\$;jCG^P%E"VONb<K"E/V(&.P.1>@E)&$:4.6&0N`MD^gi8_%7c?UTn+<3e,Cs%22N[0E5e\tJrhQO*1aa]5mEkj#s<<FP#Ro:;@#g1(3Pg3Y7sqlXV5QH&Af+'!EMg3M.%%0'\*ME1SU7-(ti5`'sOPLnV`.&'Ajm-%&#_>LhBrE6)HdQ=6;ZRZKsq*B0_q`W91T&DKWPGeR6,*A8Gab@MoZI@LJ*5=b$d0"0)4D]?pG9IJ*<IY9Vb%.ep(gFjqJhRab3_L%=A4W=/qtrRMa>4k-6khg1mKgYe_.13P/W/0;7=Uoh-:IM6o7\o&LJV+)HCp@*qHNC@j[;1d7rhXjTn1crCeb/mAT6iH`CM:.A<jT%.Wq'Z9YC<=>%5*[NC.b(PpTdI_#*rD-l@&qR:BET(Le;K94-^5`M02F5+5lc$a!>V`%^`XOOP$k+ZrK-Tsu)6Ob>+;#`u9*8D=[U%64e*0TWDsZ)QOBJ;`/-d/4^3$A]eQiCS)"[>QAUe@:%)):f`5B+3%"t6$6Fhk<Pn5+]p9Yh2ZgpU>:n@k0X)u"&8t%!'91UPdu<?%V4CY^nH.nt\jAb2fS0DEA:)$_",&F_[p"At"uRD(&RlMi26W&.RjP>,b^Hp9PF?R1OL?<WKZY8@0T<I*.qNK1683u8<N*bo-?1<(%hibZ]5a=u'P3OI(+C#+A3m1rb#6GLt'3(mX3""]C:%uF2Sn#VT`:^Kt!.82h)o=.\2iM2jS"n&E'ZfH<>rdps+TD>"\nqb+8/te9%U$b!`H3H\r;$+`WBRu"#fqL[hM@6G_]?]['h3BooFB;[Z$%'=Lc?q=#8!fNk=CiE*&C!epR!I\%CVjKL`c2i.JL7g+;`<lL&WAN0%'?+,"$0Pdfb>.\2r^;#12FM3nBpf2[3\8%.<!J3Q[d=O"^bGhH-@<*bS#4>Z'EO>"c=+qL(7:JU/a="`\=e_)m"097)(!,i/dmkT%gQbFJfP/EX'EmAaK@blj>pOKQ;hYpDjnhot3CIU(LN+qc9Uo%o5)Go%.aE033L>\3I^8Fgch*=3FodNeqo?VflMIonZIdB1Z$lY>%=ShjmY"b4-p_F0$j065$'F#,$S_[]3IHLl&;fstWs1I@cE:tm@&-3?/j`IGGSO\EBPiOt;,DSJh9EraK&bR#EOpioSKfZsY?Nf=]%*CTLP;sr?r"%XnpF(6I`BU3AthV'+DN@2qYP0h.23I6p+$,RW/_'f[N-I*rES]"2s'PBG$RnL^R4$F*=Q!-6)B7j]Thd..kPl*bR%IESd14-J,1gj_;SPb:mQl.<;uKHlS//O>"%oMFh9'M/+#Tr\=6h_W</Vq566n*/3RHRqrS*0(<ZiGeRUfXg^NKSrAt4"n3Q\qIN?%ourFn5XHCl`&o/ue1Pn=0[tm-NgfB4abX6g.(%4H0aEk4N&s&0P#Jo[>L-5mDX[r.<JIZ(/hG+p%-<KjG!`:1qPYntBg0V&CIc_!%?sOs2iFSG2]CeZ%?<Jb:cNG_((-/c*j39h&Z14jk/G1Ph;r-C"Pa`XmDL..eoNT@bE4PN^Xf<%N,A0k?%_6UREi>Y.W>C:Mk<$%`%VrDg:WuTm!U$rVXh\pDbH`.LWfP,n82;`[,IkA61-JAo)pTWmacGfO<oDgX\_b-2.n\FYA"VR"e?q$fh=B!`hNKjmoNHKJA/h3RD%6=[t\$DXg9B-fremW;N"fJ:T,cVf3#/b+!\"hX9%iH_0SH9"KUQD%6bjupp)D2a`*dVuU;+#f:3ks;ae*SDU=P#r0(lufCWJ1\qt%6<8<ep0T6V:I:T%$.JQLW_(fYWBFVA-)tMOQO$Y>VX?IF4#1TQ*9RL$NR^rr;#W7UXC&JT3ErBF$;[GFI=:WB-Hpbn2*%;A]u3Vm%b'EE.qma;!Suj6d0><Ibp[2c?`Yt?BI^#OI1@B5>6V8nkKW?=AFt19B<'jL/9:Q?.23r"*'jGG!f6)p"<NANuXq6YFeTE-9b,q27%#KUe(jI2P5$;u5\-<=<I8lJh;arO(PF3M2Q2*%SI]u3^Eb.6r)qoHF1?WosKc00=]H2G^+jNlEJ>O0A63TSW_5J<*TfiiioMMH>f%-,Y9%E>.7k1@ld8F/S!Od<,Z@gh@"j\^U>U\.J&km?ol(*CKW3.()*P;u[of6boH5RQKnPch,/Zf4RS;pTa;pG2,LM\@l*=gA(iu%j?6p^E$Kh8[.Eb!2*]R859V3HJXPb\R`ml`HXT<p.^cX+S[X5LkJC[q*\<5>QC8S-BD(&k<lp?[DV#krUg#*-OmP^)S7BhGYK>JY%m3QAi#Qdtk45i@SY@H`24+7KorHte]O(K2)@isBI<%O[8Z1B=h];M2aO]'ZR59[#hNg\^]R`mZZHXT3m.^QHI\_5t)Y\(0+ZLh.r%PjZ2sVIsIGlT%>^/ZFR><SOfL3TZ8@@]Pl;_/"'dH$bC?Bg8P$GKP>E?H;O,fCehSQF9SkD9[H^-6E\gQCcX8q/Kq9)K,0#nU\bk%lZP53A2]P5IpaW';3U68Zko/F<2mG4iMMab^!L!=Q='H"8oHoL>=G!8l"CM45H_)s9eVGN\fFAUF3Jpf2*%;A]u81&k#%^3iBAlt%UZZqB^P(GfEPNVuDc("K=`9E]i3'!7Js)DFTSZp>KoH]a8F!`q-N-f*Bh5TIH5'>H[KYciOa1>/Dd0Vo(G>s\6;Db27$##ZHVKZI%-*!F%3eMHC;Z@_X/pL+9W><Njc;1@\\R$LY7n;]ar/TN\'=Xj1$?3g$M,EAhSE-1tlm$"2jDbXBpSQgtpA(RLS^Z]["g[R3>M?([%=oJtK_Pc,[;B1e@.C3/\P$Kr\&%N,0j:55nG(j3h.KE.A5jeq;!`WL?_eL0l<C>h/M/A)IfW>_TR[ufXC.Yimjh"1;_G,*to#aPE%C^A1ael4.8Qe&q?Du0C*4s^'3(R>RK1AFt#SCf6QM&E^-=t?jR_2t$&fO^C5)UB1u#((#:Yj6tB%)!9qWU41FRp.LW81GYt%ONdE%eI2X`)ktqLB_ukM9c#Oj^YgluXub%)DMWpO?+LTJ&+%l*8iMqZ+k6mnBRr9eO-CNg<TTZXm&khkK<6<IBZ7347>6C)q^/I(PnDkc%!$jBs0$]pANdD=/6IW*I2K``(Dj7i_on:>h!p8%'\P=4)8e6ucBl7k"bTsYHRBWO='1l8V'Pha\OYtOYerV;!b=/Ok(F:64A(jqU%a2/6obe$6bX31=lHHenl8K"7hF0HC?6<1]k9`lYk%-C`0?)0iBEq//$.7FkMgq+E`gK0M<;cDWh)lcbWL&B"oQk['_Gf]Xqdf_M"%-RQA@iNBf%BHqTQ4@!ahe=&/m.mLYS(/e-Sc\P1`-'cnJ=BbjreTbp$h9SESR\"MonRj@0MAQRZ+RrI`p^S."2PlW@"(IpK2)11B%[h$4QP-Dk+#pt(QF?-i,aPX\KT&O^4IhLcR*JRUt<->lSJa=f(]!j:*LpE!H;jebR1`qBpG*=$l,tY5:[,$%W*2ROYCSCGVAF,\.%T/9t<+l@-C5r-k!)&f(4H^-(:>BRt5F/Ce!X8D,eHTe/p5jIqqgS>W)#Ql6=k!fLdLeR"^09$UY1qORdB@*!,.YPrgNZkNHWi5FL%6o9X7>*>g9.(UZZ5>h@r+S6rU<],4'422H@CY5Nr^ed%=fkE,PdrC4VD*oT7!L$9<VM%TY:@me"&&LEQk_`UG9M"HQ@X>FE.Vb+J%2Dl:b_Le^-V78.s3#*^(p"nA8IXa/jH<HR>bZE3X^+cge0g[C#'K#ULHC$W^,$!R!j4/*Nn'0@4^dM1!)V,+13i)9ZZO\j34VcD-%CC!*k\j<I@90KBs2*DT,a%LKXs!uRJoE`=U:&t/<?RaRe*JLH4cLmqeSPOo0,tX(u,.l#I;Y3Z`iJ98)ar$&L(?]1BbIR!Sq1(HP%YJ]L8D7P;3-MJ`p=Cr>gP[@-`,e_1PFJa!6@<r"K8Z_Ec*]a3:huc.u#?]G#f&U;PeQ=&\<em:rV4+s2Od!8=&h=;3`QOY$BF<Wr%$B$b>NgHGi>`@Y'Wf(4iRe,/7$-:@aZWM?X4`ql"2NDMFlVs(.>\^CaiLc.,d%kEHkdG9"d5sdM/'<KDlLn-"jr<)t':a<M$*)Ia%FM5Hb77+jId?'dHVH>D*IUji5^grc)2[EG\EgV44<-Ipc&5uJ/Ma1\%IGM3r&V6$B=lcf(ZXn]tj_9r9e@,Y9A:[!`i;:frL5)\#%Fp=1;__t/Vm8C[1L)P&dA$r@QVGLlGUhNC+O-K.)@o[qdW+g8IW#8Qc[%",_\75>CEmE!F\4HWF=*Lu,q$SA+.W.Yg#DX&ia9ZuP%T,HVR1)pC&ZCm:WCo=/lDAjhj/&,Q'<O8H)$piLu?=F!j"INTFhN3B*XRT0Q0dU%j`n/""FcAW>k&fo\0h-j0D;ker?YUA.]l]de%(:r[>6ug'h#i_%EDb=Xq_J_H;#I(RQS_Ec%N"CFm,9sG)M&]R1L18=YG'N`X>?[O'TB=:m*e*u9Lr+\<`JhcPRL``=gWaugLp>;U%+/p'qo*DRUO>Y6#h$fjaDRk^D&3Ih*kU^u)p-[sI]mh*9WLB1W,JbK+H?g&C'hGV%-O7Z5ldDgbbkTn&[%9I;#172-=8SGl>`qWm%L^UCP`'"(lK5T2O)LuV:h.J/`bkFgkAU*EZE%HiiJ><RBOA+UK8akBBelMd"1krpqjM"'V??lF2K!d3V17apfGp)`(6,&%t9`6'P%)=SEQ*o"k]ikmD\E\7lbDM*fNX9'4pRAFrg8U7C/JX*O+?+f$$/ko_I:P4*D-Q7_e:Lkr>.1\3V?b-o/<6W!A!27%-*#%jCLE5`a%L,_:4PNV/jbl9>%)p5#B5a3_TIn<c%*L?0-r?c,$Oh^jPl*u1i*GSk5o@!LaGFfcV8j)Cb4OVDk?njt,(ALnt1dU,q38`BX#nkk3%X%fu_6/p=</L*uO\CZ5nkn&(=pH@+_5o+ee,aXZ^Zp$c>a@2#S-HKYAid?>/30?-5+Hi*'Rihg>#nf,C^:TpcGf3"0P38L:RPNPD%aAU9Of`YG/D-NGOK?#]8B$;UDN/@)D89CD?AX^P.gq)LRBbFp\F>B,,Os@7&$s;6,S1+>u#?RX!eVCbaT#B:*44Pq?2=j:VSclBc%cL8V?%%"&7@\+"Pk=LUg+-3[P&hIq_$sQoES1^^b&o;1\YKrEO?5;uJO=;LHS>_D#,o=F&+FBnuP">[X3MoAY%U`t[:QqJXBqu4R%N#UsR+@o1i(lNBf2.qF6dS:Rm>:%e)ZoD]7QGbK0<%>4b+>HN$9J4@e?1@_J=fUP7ajVNAG,Q3ZVF_?0nta?UQk.iHahlY)elbV3%br/9_L1P?Fdj-6QhJ&DeD6SjP,;rP69IJ"bNp"Ls\Q6Z%j\@+0K/]J4q]mM8GB7._Fomq&GmpV'0m\(2J4VStq+H6/hYq,dA/oR'%bCOp?!3IXq$..h_SE`MA2^f9@*i%q*pmQdDiG/KqpIJU?IT^KZbT%9,,%3Fhmp_36DH!/E!UC--:B,Zj%8uY!W^K!lWN"N<#!qP@%915gJnEU?Y'ApOG\1e:;m.Xt>I^YR"NC5fOR>+u]qai8d[[+[k;Q:-N'8O+;8D(f>_D8\D*uG2M;Jk@&:J<f7AB#IQUosajq$pV1%h@84[71b8]Rop@GHQ\gZjZCGQ'f$7:;GGKiisCc[&!sWa7T*':>MWE#"Qd-$c<'DGItmmD53p**?4-.Z>W(,D1$#l.X9A7@<$<4J%.[b<I;Z@B,>k"2P;q>:;Vbn162p,W@?H:B!29`fhk4]*8g(]0A@9F4+p[!eG$$iE=:#mAE$'?p8/M7tbRNZgq1CseS3j.,"OR6#r%c&G&)mbqmA%$69kGlK>*^,b![^t?R^XGVfnaMKW'iV[2h>S/`=koG"e%d,m3M)Le`;Yan(%7jb48Ghk`301_S`(?lJq/'*o0f]Ik%*Uc4^8rJkB-$pP"FkTPt`BH&3<2>3YYK"&/ID2],Nq`!8?\h@0iPt94__BlekLYoNhF14"OrW@AV<pk.Ok4juFs/*Mj1n@#U*e>S%D_L@S&`q1%FM#D:n$6*KQ8R"5_T#I)@2>/_Gpfr&e5%#q@6McGZ;iS$#uEm%'>,6m$.`4e#t@hF"=#u4j`TeB-KJOh->[td,73;J%Xkf.oFCV0#:/SI?<a=K'deM[iX$csECP,m"X;98JD^d-6e)P1Z1qTd.J;-A"0=q=R9'N0.X6Do.rH"r$aNrCh-N#M/G=H]tLU9)h%rV(Vs6d]#?0h='344ue??\[qVe13KLQbDTta,>P)=:A>dKs'F0CO=H//=QF/X10ohZ_V3OHgd?fWn6=CC@,S<<MDf]NUG.nlWqq=%jAOlMb-VlV?^g4PCMNRU@qlLonho__18dc?>pnEie@gMa'>,Z)PdQk2BiG8bNUdpQf?jtK9u!(,hH_0M9@D3E<Zr^o='`kGY/i/d%71jm.[Bm4e`4PE(9>4A8Rc+]%m;[/Oa,K*+6QaaPXgjc[%W*5PHJ3-QEY+\/)j]BtBGqY!k;58`HBp8P^K9JYZITX)SL!C+OWEKP%3bkkPMMql?5.),d(mdToE?q.:AmTdZ4\=6n8F!mP$o5rI0s,!)3Zja2I+2\QiU(4D&Xl&(N9\bVlW_rjVr<%E\iQH`i5c<##P$S;%hAX[j7c"81a<`KW\ZRuVL,NJ?X'V"UWjS19eYig\29KE.?H4[?2>uOG\o;D+kitKn:)4pV**b.s3q\5Y$f]Yi[h.,DUjaiVJo;Bl%C3X5[IuGT'0dAaOcj)FB/+S(k6X.#_^Z%-0qVfWIMKdm"f%+[sbFE69;V)PY%.K.E8_.'SUm'm+2R;q1SE'=;XV2c4H"njm$`or-%Fa!FkL;%iE7%*_5hStlS'o?_XTs"cBI<Ed,eSB2R[J#af3E<4p::]\bpFg7IXC`Hc<(3PHXSYP1,O_k5p57Z>EiR@4(R."EqNint%K%K(RZM$%<NN1pJ;'$tR3e"6:q%qN4W@nU3HqaCqOpFbb=-e+;)@2JK"X]3ojSj^%Cdu(tNg]N09r]>`>\K8KA=DXk]/I[5L<`Pi%f.QA?V9,OHVY3N$ZZp85!BlX"6\6iSC`nM[3i3ndMO[>j>%4=lj:!uQ@n^3!0(4nX2)i!h6F1IQYb-./rUj?Chn^,dLMQ<jWVG.M%I`K8p41Ug@()R!W7lZcD5U6J@<Ct.>%pZr,!9%XEqWW6YDA>/4!]##W]8GZK:WOiK']_?l*f=t,&/@>.cW[*SLW?l7,7("bXHlNW%0LGP^-F0bf')'TNnK,*`4C_\g%Ur=!3)dB6`c*nh35m#>C/g?pD*[NXA'P(T.%$g4APO^D_/:JYL?)q$Z<pCVW,glDDS<kB3l?J=%SsTakiad239d1Kp0$^pQ[*Gtr*OkGd6X5OqlkDI+/_It0Fgq&rC3gF4ksp).-lbl81n)*iiSgU0>>Y;AUU6FY;umR6\H<V$bdA3$%F_!SuB6.A)A:l;#(<i0Q2^EUn0kZ*g'TB?k1-:Jq@(K4,#Ncl:(Z1h&lV5Wr-GDVIH5cEq5WDjA3'RQ<q51=Uf5%L\#3!Q*M*q./%hAfT1/tmN.NbSNV(rJYKBI$:&Da%]Y-[c7G)!mWhQ<3/$kKP:nFeW-'ST*2'mp<F.>8+c,7=[WC(1D!=O),H#Q/Oi"_Xh8!9S*:J%H5q!i?knAeYi`5c:n#6J(tgVnY@En>HhpC@$CF)^RY?g+M'#d7>\dK$[iR&TY]!6?&IRJflF:8r>ZOcOTXC-:e>N^c2Tf=a@p$W"%gdmI7k#k<:%)"!ti#%NHg4L6e_^sS3UXblT8$^W*AmFhoS5\9Niho`:>^+>=AA4#[<tF1oB0Wd>pH&0p+.-a-Ts[6naB<:sFWlOk%+u@M*[+:AhJ&>N,XeO0GCG'D)&J\JbKSS,^pQF+en]ltkDNr"Xrn=o[VAVmEH[%o+A[T3kgjHS!\,iL%;TsDo'a:52\]dbm.X5ia%a1/dB?M<mQ0;5k!f;"gsNi,@$i.hH'P:as\dq"RaNO[Zoo0a?blFC=HrDlj1Lp`TBaJ]G_1Wi'0I:/8qin9Q:kcHo"U*>9F[MQ=l%)P@m7NE@2OiJ-F]3Ta#>RY"Df?=p)J'g+Fdo=1<cpXRa%lh.![)dtIVeiqUTPq87EjO%3c91C8_X><Em1ATLa[5O-1^1/Mf?BOQ/%2j^qnL^IED_F#EIHWb.96d'mkm?Gd5WMZY'^:CqVO"uF?:(=(DXYh43Y%+WB<`*P424(`%L^L7A_IHhW7kac9oTuA]9>fdV3gQB1%L'4KZ/PFdHP[GYmGjs`qI0O_6>d0<<X"![.S'+E71khqIh4]flX@['6L2TO1Fgje.I-fl^B=GUJ&2YOq\<Tas+h;fW3=i3gi01R8%\Z%t#a,TLL.d,G)^4V"o]?20_NepEm=cCS?4q_H:IIQ!6ku>jmG:se]bPLVc,-:=jJIh9r0_=0@.(9OBi;RT[nj^;+\f:Fm0>8!8%5)tZE5kmp7O2J5pp6>JM/\gU#8`..@j/8mOfiijF;t<V7lRDg\\+s4=D!<#:EK$C)dL$RUiA"F@s'q+'IZhPIgQi[)ApiqNJ%TRA%8<m^$nr7,_(\+RB3'qtK<cE]76:mE'$TE(T4X.gNONML@7foW5AG9'!MUb8*<*>aRV@[FPC8M2\U$k(,Rh5%QA);@3aggB5"oFf8%kHGQcKCCp$ffPqC4R@W;;VWKUZ;!;*mZq'\A^W9D/$PZ7%/ZSj#\FWU"jTs7gC3f=R:B8!N_UP3e:jlj,#?O_`em0uRG7"-[]_0`%![Sf=\CK?qj%2Y0,J3))GgCB;>Z""EIQ<n`EdXF6lB6E>&Y9R&SR]qHYK=?9m3Q("<R,S/4:TFnF>(??"p9KahUrS"#_PA_qoIEr%bZSMXHUPVKm.3r"ffoO>7(*0P_=`ro&:;5j8!;7)\bketODj3[H._N$%_p%F9L0f;if&_377F)'d@)S"OCXe"A?3"+hngFN5)0aD%?mC8KAp^a.)DBhI]RI+X[KfGLrK9<7L^T8RD@aB,ZNo>jfE3MCm=>l:_sod$LLW`$$%)/LGfVU2*]u%KSV;..4n_6r[k&VbTOV!N%%qT]*of?N]=C.1AT=:.de>Y2lG/?u*o738q5X80sr@Go5*iU>gRqh]Fgb!G9#>M],(3F3-V:@<\JQHAuMUmBI6'JQ9kdFpq13RT+%,3sPPeKK3[P&(QKoTiHV?Y@W`MVKC5X6M:)L6APtOuf3h<E66D<Rk:]<HXI0<Lmr)<UZEX.`,la9LTkk%*>NlE1M$N&eL:,93,%P%3p+^5#EVW@5i-di`q\Rg"V7.FB=(P&A+;ThLEf398U?9K6"=PaJ88_/7D51lC_,36P)27lTY:u-K[c.6l\)7QHVLXWhHnVMVon\U%.<ce+j6<!njS>ZPlJ^O0%S_?g2=>Im2jb.(&V\$3H>%%[]R,Z!'<ED@PIHjfkqkEHSaJ<ekNKU!KZoahnqZY`Z>=?N1rKVb8N9=8%1,e[dYsO[B\2S$GH5]=r4_#].;3C*3ZkggE,e8XYdADNPYL(^OECr%PXcAKBaa=f!T5$FKE`#``M>Q.49`sks29==tX"cL)VF""J%*`l8ffuN)p]FNPKr0$\oaWn,`*fprI*dW]?Wr#4\TD`IUL\slW&!fW5Oe^ZkWOR:LXqKStdMo+,[EC"C%88#3HMU=ncUL!__I_\l%([HlRlMF"G2m5LN;2hIn=\gi:KN0a>JlUlZo%"F4SL3O1e"+M?*508cJQl<h.Y1_$;"'"<*-ua_KC2$AJW1JZn9jqV9Kj1E"HSNC%e\*5#VI"#n\=R7WMlr>46=(j&,SMMB-XpZ'Ll`e?s"*.gJM(.rS3r?KJL%;>k4;_Q9%_4"@Oh/o1]pWD?#U5./H1<2-WI*Y:EmV,%]uoE@QH!)WdNoEbL:\;RXu`D&gWthqfV^'&+<\n"rN!r$l/m*\.R>ekgTm_pWTb=&$UeHSGi^rN63]JT3o^nY86`O5QE/3EQt)uY%/(ii#;W-u)/du%;jVf3"q#3oOKD4c`V,RSs;^7XO/HBk4Z1Y4,YC8L^[r.\H"F>>P&<L[uD-@M`AJ373.c_(iG#oQX3f6n]RufBP%b^(YLh*n((b11W.aug8*?HIDKV%LI\>NI'4Z:*WUmYA5K/`^VFoaeEQ8UG=1;QA[:2B^=h;l"\5EIL\IOJ2f)2=9;bi_?-D?6"Q<%&p^j1.pL_UM:c139-DmTlF[u?FSql`a!JfeB.f98-2[$;qg$NF?a&Sc4b*!Mq!<HqMP%$4pL9p*/1t9,h,dJ"h]l5R0Y0-OfZ-Xd%2e6;)\Le>FCBnk?2-bOtrI2u[/^[<e^BoR]dM%46Gh4jOTjYt>YU#H*CMM)^R$pCnX^Z`!,mpg8/cHS5]H[2R*%T`+75P\`986E'%\XI]EWQLuU7sbtR]ilV[6Ek+"gQBuIa.*B@On6\a9AFW`SEEYWO3?kQ*MHC)9=rqVB-:R9F,VuB/gFY`]-#+J,eTdeiRl"VT"<91%`08<@/b&d?eBb&6d;R!35hc/ge^Gi*/[Ye'[p;j2RZKD:ari1i8?6O"7++.c6l_(4K9nng"\c0u'.d4%B7#[Vh:KkMFa;[r;=7!?%T4?.MY=\QNXX.:7:!RaV4,qBCFt_];RG0eMl*]"[f^S$c@ilRUb(?qK)lVXDpA(T"j:/0m99!I"&9N"7&r8N/HHd_3#[bG+r[c5O%?X>3Rio/MLG0@9;OPk+dVI<>c.Ub.MRMnS^4pU&Do?k6^)0"AgUP>u]a?b;Z#(7'WYRCp&ES3+KBD+J?K-Ns>*-9<]'tIoFk)s:p%U>.L`iBAltUR0egrejtbXKkL@15N0qdk^8S,(JGmbZiq_EIm#1mNSW`,H9FX\U&NaY(G5,dSm'b[FqN;NK:f-?,3#JXZ"0l0g.qS%F;INmQeR-(?&)\cZ;sPM#BIne@`F)"8_=`Z"Y53Pj*/jeA+F3l^,cGZTHS+;1NDi&B^Cgjm%gn4Z/O&3j9$of`o=;A4uCiQe9f5@%A%a5<=Dog+X:s\6l\)miHM9a9DqhQcWFnqOn!.['P#h'c%k#adBe8[/Ep"$V4-FpQR.J*DE^"biM478)o@sZHEHrS<llbq-9OeZQ%7.3T9L[>I9Jrk/SSmp7r[a[aNahnHW=<0uhG0C-IlZ)$j`f^Nd7BU8u[HjR]/SV:,X$s"=pX45fC#ID1(QBI+Y]:opfaQ&tZ&YXJ%3Ta$)RZpP'>%4>WjSX24I8!s;m]1DJp%"i^>L/-n1:H8h%-^(1'$j(3N6P"YDM9@QdDp[G95>ZtqnPnrUF'!$BJ+"\'BOQ&KY&j_%pQENORIZnA:%aK69iIe9NqT>Tdg;"&^/Ed)WQ$u^`mulr=Kfe'esf;NlU8;'3oN7TYG7FiL&R!G/7'HiLW8<c)I5G("<l*%5:9Tg%46_WMLng0uk``A7EqEQjQ[H!W[DQ3A3oi-.VE*J8NS_:CZWljcVG^X<0%GW=^A4M04R"AaWm1'.KH$#!B99I8X&13h;i-W3OL*\u%:.'%3gu0R?OU)72c+Sd3+$s5Dr2</eTEVM-cV)hSjUtWTS17e\[a4T>m[:6$%J/jEcq61!cEtu%<Gt`p=k(I.rBUL2&Og-se?d2j%)nZf@$rM*c[ZZnuW^eco.stCLgh/(MS&R$J&[,b3^at&aV)`);('Fhm(Dn*(r$kipJW*64ME)j!cXm`lQ\_F(?;3*[@=oX:Z'cb7%;\'1je7Eh:)\OJq)"D,>O>1j*5n>1OC;2"1V@((N.Y[U,lAXFG"FZ-"o,ap;p[1Ac**"Z2,0O<%#?MRZ%&[U]F=O\:cC"*)%e5;D%!X0.,)QQMMl>F4ilaTN0F!)3Ck3*8TI0K1IfJ7R:,PH+dF/beDin^)WI0sa:pS<\/MQ4aDoL3H,MU8bjd\U,L+@h8e\(nPZ&GeX%%Iem#uMU[UVECi1pG8Et*<A]*O+":-$]sSOrFJ1mV>LFCaLrdd+Fe5Gb+i=_aA5o&`U:Eu[8mS_DkJJ__cY[HLH`95T99I77Dg*T[%7T[*k&(lXO036qa:+hmiFDXAoi$5]t_VeX(^nt#4DASe>(j.j%4&7id=5G!]_`T+C"ct]`fBVub_U[Q,</ZSU,$Ha-oC1rjJGV(;%]pZ9,Lq3+k[CXY)FH23e=='>Kp>iR6\sUq!e@8fnEC(SA9+NojRsb'W-f:[_S?iS$]SH6bea`P9?2lr*ZTh$tcdhPI^0TUAkR/gl%e?d='_\D'05)^*QB7an*Xb8j))_^/.p!6\(p"XSn8H16t&FYF3^2!qMgt,VOY[Fr9JP6g7H?'YC_2&eHa9b^BHQ-K[8?prndPXD1%E@<og-ros(,&4.C(!GtfkR@;)<#+6!"QbZ>r]+Ran;<`3hH]';&J[De_JN8tEQ^OOmI[a=Ob_X.4*b7I@MimUmpp=Hgd8b+%t>\^%R8f[`Ur)N3,\b)ucO-)]ZNRiqOuf/<laH/(;U_BqA)=c0)cm`N%?=8=HW!l7fI>pN)sJ2=,4aRP:+T"[oe8d.8<,^afj<:>mXhGk%RGSY=$1\!Tk$7DES5\9Niho`:>^+?>aIM;bRba!Qb]uhuTOtZCfSX)Z)&r-onONRZZ-PB%-,6V$=LqMB0+gsC5PV.d=E4^ZJE:nq%Em-L:[1jhP2rAsU<[!!$E+#PI;3C*M1`'?\7(Fp3frjf#[;6SLnS"h#fN<kM<WRr'\'lhj'DBNt/B$VoC_[p]!p#_O"g?"LJiB$t%Je8_u_$IMI3QE`KF1'K=.Nh9VQRmL0k(c6X+eK%&W2C1k7'q;Q;;[O73iR`VWQtm_m(0=MjQ^C&,oq,s>a(^re+Po"AeT(Ck,nA\%MCEP>-MUO.5*,F$GAW`rVFrHd&Y>+1ZAKM5U*aALZkr';Wf6+,\W+e!dJN4XPq^D.<WkRe,SrhCk<iI/A.(W/F_F$^B^78?4/&bd%UolfAg?KE`[X*!d>E,T.<[0]5e[h'R'pgMQ>-d/0mB4$@9o(0qVmbHNTKZ4Q2(gO1G9lk-0k5f:jF$O\&iYfKi40G;UN2B!p>p%e%6X(-jM)U'M<$7V-Q*h>-Rb'O<X%@L$,_SnKbtN`S8Et95<9V"B<t&jsBoga(3p(Or*i:*'D8hcrEM''c6D[RSb^o>ZXmht<2%ug#%a:mM=na8F"9^nL@;;PVgVc2\>GKP>=?:XIb5?EFg6X+Q_<KadWM"[AcB?T=c=hYH/=mnFDiRA)f>u1WZXp8Po*u2=mG]QH'N2Y)X%,<PPE\sBaH+Xlg+eg^'#V4-lZcZmjgBD5:nh?ViF7d#K63c\=I`CsLL,1fk6/nq?u'g+FlD,ef#bC3^`FOJ_d5(Y$p95_EjadJ=V%nrU%(ms66.S8nio8ZF#7dg8sPpR5>C]Y1+*:6fU_;sp*A#1`A]G?EIjY;gIgLV@Z%m!d@6/[)r:Wc0GY<s8p"hAPB*n7nIfhH46a%PN49=ZI?%JKD.7:S]&WZd,@YpIr<`30<pRk5rR]FZV]#RIM;%Wp@.Y?=,a3QWHV\'XQ;CFoPK^,=l*YPmhgMfko)4gC8\JfLX/s^%?0%E3UGJn>YF'e9n]TP>@frn@]fZ\\fM?j"I]&Lhot.$gh.cH/<;^Pa^DBt,"Q"cLM"p!3I#lK+`Xq*f!!k@h0H1j2$\X@g`0&IU%YnE**%*[$"@G,lMjZq8S!eTq[-%0#`C:]_mlaHMiPogeRWide@&'?!4*uC%<)=jj),4:mmi<8)m\Y^j[c5c6%kI[d+WiBTX:6Z]\%qj0"uK%1R*ZM$%<NN1pJ;'$tR3dsS0Sc-F;?(-HU#NUn"MJ]F`8i2ZTHaL*g,3a4Nc?=hA0fAH>iAMDHjKAqNP'Sb5[GuB1WTiC#%*Z?UYm=D>.]RWf^mb@=76MZ7uEfR4FlJ97dI4Fn\">\K'Reei!hXt^ROX0^H&lj6ISgZNCpFftS`dlPQS?hiD5E2]$\l#%hjrD.f%4CmsBK4"ndCE>7D,NRKI`b'[05eilcNIeFM**p$t47!(COSt8-6k1C84<t[#DKctR4S,h._`m!"m<.':N24\SK"71m9s0?0?IDoQ%b-fqPGKom]Ac%#6rEZ^W?oH5omDG4l_8AGfGmktO#<Wj-mVEsRa\n?W[1?;:fEZ1FgBXK'm"8.V,P*sF7spm+iq<CE4iSY!8E$gc%Q;lYCWr&#nAFZ4Ge0D$7I:u):dTZg*KpGk9To%?,elSUr[+ZpPc&[trqZ'Cs>Q@9nI3&"^5*J"hd2jR4pH)6K2e[h_"1$\djKB"`%29mOe/2>UFEgAf?4tL%FmnJTY6@'0MIAYB"&%*F`!`!JljDb#ngRDh88S`;mg((5Z8:#/=Yg?RU.$W:db=ZP,L!gmqTsWC_UpSq<%Y</*!]32*[]NO%Tfj9ji$56Ea2P?:.\07bIE_Mm/2$KbV^!'3G.X5iqa1/dBh@X40^R3Fn=KSbX*:W0YXL#B*C*-p9j=0:<N4<?)%Zd*/.4ZFQdLq_CRg0sA[*AXW]e!0>u7N^6XZ<dA.W>%8\C(U<fJTe45Po]G2FWsG\dO)O?aIN^[T,`r-JkOZsk,"1S*&k05<*k@J%9oRmH0.Ml2"SK"^qb`b3X"8kZE$[OQ)%qb5R<9:mF6i6c>VhOL*>$F`heR9*nFj.#)-*AF7X:r-oe.gIG5>e2;Y)Vl\q8P&VOZ]f%m7m,8-)I/QB.GF5+aJ;GVFkV]L!j.O=_Wkq:g0VV7cnjkN[R!d`Kg.bo8huS_tNr#ZjRI501n=fS\-5.'2,#dA.t+e/m&CoeJ.jg%m:@k)W^>=%n5)Usf;,cmbO%Z2EJ?7>MB37lLXBaUa;T(>8h9XN'AX#Vc3<8^%nJRo-#5('dRX_*)qfL9cCoSV7E0[2*-")5/WL]:%/33?B5eMQGd7j;7^O]ZaSan5]I;bPhSD$ZI5WVkWEFQi$2r@eF*`Y+RI\f>PeRisKF6])'*RRuY4mlRT8X<p1F'\#;kMS5WC9]Za%ehGF3bUm6Z]RYr<S$Vi&WHYVF%hr6,NF>8bmeT%ZkLmP)CgD1.d+(!b3C#eE#tMe,=:r5V\RZGSLp5uYX.H/6eV1so2a?iND<lde%g-YuLmO=Ig[d1H9cpnFXeM+g:A>q:BT>F@UH:G.m%A0);MTe;^7:&jDIB.tE&XRSGi5':Sh/%&X-PW-]K.:<%17kQ>!.NH@_6S,*%m%Nn/6X`ql;i^V/4\0PU>5-U0-U)WJV(;jj%&ROibbTQH(N@XK)W1BDesas=pVl6WZI)s&8e?F"s)f_alE(>!p*F)_S$,JRC8KZd%V2g\-.ZtF88C9pZ<2F#0b0ki'ebgZ4DEYuNDn`Bl")-?5q[rjS/\gaEN:4Xdpp3rtCb<Er81?=;4D"ec31E'/MASY"j98!el>"Y"%-92'hhCtm\(h6Io*I)#WKQpQ&*=%1L"3]M]K&Q7\-'s+hVIJf+]fg22C-4+/$!$Z:OQs:7"U""Y+l]1FL_ECWWgn6W4]TeSO/=BJ%:+hqWo5+WXNhig<jp^aJS4VRDc]8nk:!R^Q43$?(jGrCpjd47q8&MhJVJZt2].Rg*D'=BRkQjG"`*`rBZYFU:I4lIHJ&4I5UXP)D%.>>G9/$./ujkeS+c>(6@jBV5&JPpm7o**jM/&,H,/.niqF%"M_'4OR8DG5]C'1&#6HI!iuOuh`mGMd1V(0P-1^KmKH)69=l(lVt?%?K8K`edM><?7t/?]T.E1=M.qtT>oUhB5RH=;?TR&42CWSPsgY90&AaJ,uTsjS**.`&T<@d6&7MUIf6JQJHU<%1R3id9"\H&m=fQb%<MI8u[VNDI/_bh.O0^/pY]56W%Qgm+AQV\hn1:;8c"6tIn("`^E$PaM@r;LP,.@X1>0kM1-q/"WN9V7Cf5Wkn,aD`R$>^#m&&H.d%'CD!?k-GH5io,u+gg\rlODhZCOVGWoe8**0WP#)@NtuDUY+/7Ml`X6(3Z_Q797YA:7%>?qAlj>QH'BKEC5FQa2)@$[:]tL$.W[q!%+G[$JAfQVqN(_Q%cOUd>:!2rJ>DM9^f\X82MX[Q3:Dm;uK`^]pmR'd*>l6eX'XoLY6VhX2'9Mk9OjnTq>Yi&1'!E$`HV%#(.b.HD%47q&!QLkk4.A!A)WFsg:7d0*]LV(lu&0O(j3R7h]e:EHe7oIAIoBogOc66u)k>r"T*bVq/*!>amC<&E3nr%94r/,9n,SEeRPdL)6%KJeNqn\S2MnqS?nP-m-.e7ls.hS#d!:D@JhXuB+=l]tK:qWD-W>5CpdF1#9<iCN9iQ6I?Ug=4=$FO,^5cr.OeQ`,'Qp!#5SJCije%o%&,9T0R*GL-+'H,VR(/jrI?kT4T\2Z?o/@J^]^,W9KW&hH@Q(@Pr@&63uITe_*;G1cZ2>&'SQJC3%#Wp6+u+<N9CqGA*ZB0'hbR%6#=(GD]2&%PE0`+/]f<97*ZKb5uLWOd\o4hC2+KoRTa2a5>*-[33S>$(m!9G4'j%p?U@DP4MVUSJXEW&C[$4)dasDClK+ohIoGd'%,oLjdkd+_Nmp;4DKX^,jj!;0Q3Rt9^hR0/U>P@ll'TO_W?CrGihUN)fh7-R4B^(ff\.dDQUqSkO*:TDe9AWju0+o[-`c*:eL?'2[%f)RDXZfk;9m;@A<a6IubrKMY<6g&-oqWKe>\r_6&9XBTkQ+0>4e4%5YIr(\McK/N3,#sb<ZG-JRJ&`eP/XNK#99B@Yde'!0cLBEm%57&tAODAXSSO0_o8=F-$APQ\6m)Am<cZD@-m<4>9XmRVQ4f,!L^7/)$B&oGfARRHjp1;DPI?h*[p.bTrb2%@rdmKU-2>s\f&ik3O%\(XhF^2ucR=aCNR=&N%i4A&.qe$tdKd]bL<3\-Qb(,X_"_ci3&hJ[V7D;@Pp]]m4oj%dP;)u=`kCb"B#_^3,u$FppB3#CM:g?UT*%G`WYY$]#g>nfV^X\3lX$8!8FI$s2H#GeljT3`WOkmu-W$.O$]M]O"+%+*,2dd>ME<q'p&R)aF#iom<=-R)G-.XhlVZX$HSpk/B\X%5hB%4FAlc)GEJ"MeM'34.m/P3>g(t4=]_eXM/Rgb*&3Q\8$o%K"EdeG>',$d\+sh*QGq3NoE)*<8UqH)Y,9q3doO_Qi>=p8$9Lfq%4Oc]\P&2O'3Z!MeSDUB>V,Ug7VIj_ce/k32*Be)q4'=F>SWKWeME(pS*p8]q(9DV@SDR)MO3-_/AX>liRRXJCZe?]9%QIMJ[CmII%`+/qZ1Ahp"&<G#E;-]/g#^CcQ'r6Z#b44k'9PO<M6_?A1?tolba-Gi<PjjYd(WS^7X?FJ(R"%cqo1aWAUZKJpo$WD>0t!/uD^Bht%Xh<6*melJDK>)+15B:J':2J-%<ACcD8-OS=o7/ssYnMEFR7cP3EgVMLjsAn>oc"K:g!BR%Q[ClW?Aj;GfE<q1*=%8251B<sOp"mn%99Jqlrqro`<aW+/E!XNF*_BllU5(J2^ucbuhi[AqBo7>/fMs14);e3fQImS>S/"&L$nIk8EMqijT'(.T.:3jh90t%l<[J3R9>[;6%QPYqlm6p4qM<K.I(,Y3Q#Y/<64Ap(tObC.Ro'gYbB?u&!-IsZ%6Jko,T]/+*FK[A1KHUS9'K]EL8#u)uZ:;*O22W^2+C'EPR5MIl%-60+t2%N#qg0W2;A4R3:K/Ec&;U;unaSaC@Dh]M<3-^'8O'4;W\u(l$hC*F67^8!fZZI"WC[X"X[aU;qOJo-@AcU7+f!AK!:$Mp]%6)j#&\:@Lts%Uf*;*@suA-I"1,b5jB]KD;Q=V47qh2LlDdA4[hA8in"f.Fm$n_fg_-Y\8bY0tr&od1I6HIf"O^02;@s8OCO3r$l4%^ob^j7*Nqe;DV]Z`.7$/!-hq'_cc'$Eo#KH#@lV(`C83.VL!)]SX+RG>h,eF(j<I^857E01JN0J>X!KGVSJ;^3hI@;0]#bOh7"S.%9TJfU.3_uim(E$ncLli(Fl<C(C[rt@%q9%VJ3FU!4F`W9^IV%?+WW>mTs3=8%Z%J$Ubuc$'.l#k`AJkQT&>J60M.%Y"@i+s*_I@4%N!t,O/n:&/"A$GL;Xb_FfMOL=[r?jS:'_[Mo/,fT/g6+UU]J"L)'lQ25Vq;sBH&al48)7)^>nkEPYCPFE[4R<&sd?PJ9BFsX>?(H%A1fGhq@f9)%treArD#&JTo7Dqp&j:Pr59=0Iq;Krm_F.U99Y6@XC*Y&@,08kJVOO!5X_uHE@M=;MI!6m`1Y7i82N5(+H\GV<d@XH%_.eF!f/>F:@"d3#o`\R8`3@=]e=.A8PouAHXblih)HA)P>d^@%\"0>fX%::&4-hsF$>]5'afpg>j5Tsrr0H!uS,1Fl;f9QJF`&L6%hFdXq>C!?sQVY'&_"&@GoQ*BSjbBA'2gkdR%Q2JncoWqL6]l^;bP46MXtiiq6KD]jk,&Mjgo<.Y6I%[<pqXoP\\U#.JVNtM6"Wq5%(Z*&B:p:6$d-bntTFWC6g*+$J275$*oU%oRaYTl(`t0fTG8s!>%SP^E$u1mKTNIO=4F<%s0g-[P)AA?4cmNF.D!fb",5E#j\DY:?%e)_o3daD,,qGsm;@5+jrUo!C0$ntbKY!pJe_Z/5\*!$u5!/%+rY7R/+U;\^hYIfo`#t2kQ=g8*R9E_>29gm$W,)F`$BpF"njdEdZ%J2%ns(KF0a(BA&@A=C,Eh\fnl/7bhV?/CU@8J/SWLtj.AqPA%mGO;kM!Fl[U1%,nL1"dg'CO/A/]6TBVQEngR5$5ac+H87Jnb4#l%JeMecM8csdnq,BB-L!)GA(%n,0B>a&YTX2OO1T(?eQSlpqAk^ub[`$jJu`lk(d<j1kE0=J1U=/0$dF[(<$6O-B6B,R`Y"V8mRsm:%H)WY9iUk1te'`>tWRcAb(2&K*odL>Ac5JV/):>oV1.8;nO^[KI8(GqCVG(M1q-UIn6R[+,11+'Thn,6)`-!UEb9:$NpKr=E2b4]C%Z:;WbX6\K6Bi_CidolhV<-_aP>j7\EPtBke:UT8d,_RW(ofL(RT[e8ubJq-V*7;L'Ap%),OQ9ua:VOe<.]FGh+K^k?LjW8T3Lc@u%#Bi(%7Ed,HHmOoN$8?A,CO80VVDrQuaH!=S]e(B\,8We!n%*`45Ql?(,tZ@'qL8XXC+eNCU+X$=5<nDu3Qs.Ug/pegH-XO:>AD7Q%eJrh]E[cVLKF5),kr*0K60tQf>'s%l4_6QbgQeul$+[6$X_\,eQ7l^27r=t)]WMhc-4F1pHo&,e0;f^Z\)gO@N.3_"D`9Q61&].Q%Ae`A[)dAb^fj+?l/^;Ye6CuF,h@qDQs"^16#@@3.)4,d5O9@hhWaI%PkaaUg*=$tYNK.gg3b#*j9,j=[aGa9NQ3IV<b26QQqfP,U%-oWPhg<UV#p+rWY;;QR_!t:#l@QstCma]a7L)lYq_;Ke)_>*_GXN:\g*@iL&Q-J'OEQK<-SH7VniSSJ\L<J3BZCO:jOea^*eL5oH%6U>LBghldfa(E>q]U?%NCb$/6gK"NaZ);M3]%1uZF!pjEIc+DIJM;^b2X(=i?]gV^Q0DM91C$E210lH;W3V]Q99'?q-e%V<kU:-m%@n>=q6m:C.TGAk;NHN7,a*Q30#,BG1r`EHC4@uspnoUYmM+bk^f)6)&1)RDV>2%(\a?>;1IRP&,-=`s5N/?e#=k8Q@bnZkE*&,1?%WNu,%\7;fOWu!::\7Z<eDoq<K$?sMke@'cW7:-C.Us[/@W\tVMlLT(-QMA\.<n.A+ph9_0;3)(A;t%5hHkfj$h-D`q<l77\H/n]K%MG,K?lo.2m,30Gu1.]RF9<Q8]_q`n>4e7t(jD*mX-cGnJ0]dgZp!0@;Cu`?'R"fB%G!EQ!n!4.\lb"u^e3mLYT6lOXe-@;t6X/k1%FEuED+sI'<<^a62!gVfgIKoFTN"b-=oS9kA4B?Vf+MlrKl?F.7OG7IE[Iot4_L&>AL<%&7T).\s0GRH5jn:8uiL"u;>SGnpQr\9T%fL]L4"BG2]]o:%1.Jo-Ygq0.!Ik\]7$91KOE8$='&#X#uo$M8oQ[j^o0<+)59UhZL7GOMKiatj9<3ma]6&]9`Z^U9#$?^b3N"61q%Z"4>s!j\;4#)($SaOjbAdiYE&U@=$oUmusYp-IrY4&H]P&nIp?fejQg@+]g:nTk,dWX7ApP-=N4NI;slRm0\_^1FjBHDZKjO7_=&%3KLg"k@A>Qq<^TGLa^r[UZTV6;-t5;a!T72oOIrA8YYHXbuLQj5+B*ijQSUbZ./Z#>s_WOrP7X),&./1I?_V/`0W;^V_2'IU-;>_%H[(pnLF>:4Q&H[GY(okJ6^k6!gC?bh>3>&?p2E&mbm#Xt)jt]BHV4+BA!/+@7&5=Y6=JtRc7#m<fpUPMSi]e`W0Hf'_)kDHD,ZI.%_MA!*V.NhQ*&2bZSh;n<Z:iHHE2hfV[iSk39+@Sc[d^Q@1TlJiHGVs\)$3.nX.P3EC!Tm%41j"0$DV1!)PZ'\Js3gr&FWr38+!/q%.=9PQaW<=W%`VaoY+<7=DmAr:qP=VC*]6au[omt*(p1!E1%D39O1i)`VZ@#Mg<L28]?1*n#R;e3k:dadVd1,Dn=K3=GgpUp6@*n+%&=!Uk;L$\bB"gmgbN;MuJ1n>*^1Hh[8]*raTO8%CT#8#7=SFKm_X,=Kj8S%m?tKRJ*B@S1BJ\dLK[th4_T^8!*g2qCPGW&lXA1]J%9[.2(&G:fq.Ya:AJjZ*(-<i1$k$4L;,]infeHtc[-*5gH>:X_HH#&8':6TbSl1Ru"*P:dS)l:k8oimFqb!<7D_`fia`2S4Ld5rn-%CHFl#A1tPbP@5B;X5Ah21u;.T93>9+A_bEkD;++bP$&'OK<"g7.(04ts&Hq-BjR:`8/)<;h0Kb`$YICCb6t4NG^[U_Sg["hO.FlX%L?OR,':;CgU!oHHLR6cE*F9<=b3jp1`4M?iAV0_rJl-\BT")nKo:9%@jE>V`Q<+)Y><MHJn6+j:%nF6?g!S*#7$JGGBLaIWYo/X`%G(f0iMk1sV8?LM2b_@#k0*ol3_C)Lm*[.t=R!4@XFsc58[rn\aiI%#`E/=7klCf"q4#9,YTj1jiL1FA4/nLYlRnk=V4[Q@-!?f+"%A=TSMfj<_MjhpKRC<,Z1G8ugqec&rMn"*hP@,@a'1NBgTjd2R9MQ<;QQ'ZbG-'+t8>f,$OJB[m'lRK&\6aEaUQP*@]C6CA[F1$XN%0l5#[Y4bGb6WV\A\ZdSWa<c,@Zg*].<B#Td1Qls/Vk#-?-$44lW$Pn:,r$.oCI`Du3FpYn^37H`2r39S)W.4SCWD3N)C<+8<5#lq%%e50kbV,IH`1DM'U@((1^7m+ai?MoZP/A+qh=].F5'a(i^%pjkC@e/Zg;."J[Yo&)J[<U1+6[As,Wj_$.5>bIa<cpe[%k%nU*G\A%kiQ/^7MSETFH[S0h9dinRiQs$l[SW7K6'C]+l[-IK_lI/((%ab,g+;Zp3Z*]61/I%R<VB"h<8T4j@.>$PW@LoG+.i?`S&P,]U(_)%l"oOh="Wm[_Q5$D?7i;1"P^4W[[fOJ=%5p()GDeJ'?K/hN2/&sQn!4A3UL7,^]2;bGj>;*)u3k0a5\ebUQ+`fB_K]GjCg+/FhTBj%fPd%&Th+L.C\UuBLB$TUjJ!O?PuQU.B\Y'/);%Hrg127eO8)V8c`_I7?K&),mf.@_s7jd4lAsX_Ze/b26,C>5V1/<N^Jq;d^o;nS%UoS"Qr>8C+gLAgI'FOm6S$QtL9&a;JlOrX^,@aHr5!3AXLFd&mCOBFR)h<Js/HF(45\L4Lm)jYTFY3,b&46d6+Ht4=%9%MR6oscD%(a@kbR&*\Z6B,(\UATQ*s3,eLYAbJ8<-TOu>`30\bQ8&5EX-X@>[8]cZ.AbW]h#UZ*!+KT/>;>%9>2@14iYrLf?I2(Ri7EH/K&k4%Z1n;s3b.d'"1TBVUZW\`('a@ki%o8ph@BT%'#;F'(P[X%!$GPeahW.q"RNCAPGR>$/Ae!?<olSk.n./cXDZ.D!2O)l#K#jj#hTq+%ZliKFijt&CN]YgJ29,/$#8iXG&8kV'@0Eks,)k7S/2cP_"qbC<,(l;E$8K7-@KYsH?tZijEt(5WfXVT-bj^5b@cXlsIi[9a+T4mu%g&4r\N"6$-!tQLpL\W3HGm4g,/XasW.%UPe?]`-dS`-\]+;]gU]<$fZn;Zr&<9dn%7676g@=#LU_(>9;n<Q#S!8QTI!hRr[:'_'2%qe(pDL6WK.0.6s3OB%[bGf,X-Oh-!C0<.^.A@*=RjS9i*Q5n>dE@hd.MDlMDKHEsG]X#s]ZDo]f,m4p=K7_':h['E@Om\f]%Q46N%6dr:LU5D(M08%D(<_u"?Wt0m(/+T6?9kH[6K=A22"9Hp)cQ.<)b@r<74HN(n1=R`B[0[`tVF`He%r!Z(R1fu7QEoRaa'E:"&nEL[%8gT1\C5F@;2:^=4^=qQ,?)\c5b!jtXCd&VooRe=0SZJYVhDgD(A1/O(>D_k"#[4"C?l3:ZO<JAZ*`8.j)4?Hla?\ZeFTA$kA9+i`%O<u?4HE&MgfNRIp'3OQnL5iea+S;LoDE*)raK7Pih=iik[M/4EM>kTI-,8rKJ0,Z@?m`+P@'+j9^chq>RZWI09`fT?9`X'4Ptp\?%AqCCop@Q)L/Dqodgu.`F8ARG^+Oa!a&Rk?TQ!C7\VQ6p-&&PFWOk[U=]8OB^9F9q>789YQg&r]"/VmZ%;?C%J8qL+OdW\>j*)(K.%\ID15MAfGOet<XnjY4r@&1XWJn(hMmPE#LCi_2n>.[$4#[DnVTh%7go:,Wj#:Pdk$[RZgm3)7+hGp&':QgYVu#%SKYkSEPVdu(YL%V:=@3Rn+#<[,LE8nErs#-p2FFr""aD+i9L"E+^[niQ]:n$]1VC[V$=te"$N[V:6)LE<u&%I)T0L<\I)$[tN\W-nNT%OS,U+W=8Yp%(^:SPoT?jFm.3r"FtN#WX@KM6YU1S^N+j`ba8k0'a,LLhRlONda8f^J2)c"1$62HO5MCg)S<;#*^:WIng8!/?hhSbrZJdsjba*>6%A7i:*>>JjCRmhNWo<lnVAtESL1H<'Y1R#%RB""R(aC]&E8odL8B$9^41,I##=@Y8*m-<GOQl.$;!bL'e"Im$!53N++i(Si^>`!JW%"(]Q[aik/SF!3BZbm]\KL'M;p!2&<]1Qrq?1[-tY1T>7L1F-A,.2$\f).DYg1Gb7-9`Juqf\Nj=PlW-\o<9uS;b2V-fcl9.Q!([R%%kG!U!d2ag-6[8<*&B*t,]ts`)0#D?Vi_##Fq6)*]"+GSq`tBf/(kqO$G?kI<"WcWRi1eo;@B@6L?!l$33EsN!7T/>'koN]cdGnD%5;g-hro:rlCa')[QKSouGOC2\iIKVt!PJjbWDC;<m]HQ?W@!^u$m:]g1"715(@/pV+EhnPZP62!fc4H0TAE65RZ@Zelb$kgDDJR7%JE/<%]!REY&T"S7KaDN#AFk\_n0Uf1Z+<@NKLd6mC'=!!O<+12S]b2P/;R3D-6Q.Ui$GaR<;TEM:*[#tR5-6W2X.ZTj3>k)WORs?%\ZM4='8hE)$`nb*nlX^#1e^oY]C'P=3em(berioI2o;9!#VDZ%W]MIPDCU>CW]MdDJ<[I,=%hVIrGa<bT)C^m_#&hhTXa_W!?Y(W%8piNskR+W]79^J1W^8D*:,e[\82RNRLIMc%g*>pc#'QnB0(jOS.]GnD+R#UdN@tA7fU"3H/rIWKE^FQ6OdEjBDAU;eNHL&F!-*"U%PtNss4bc?1%?#c/m5sZtkIWql<r$,:3e_2lFja`t,7kopau!"LXdETtBX-t*0\WWjk"-kIB#NP,+Q!j3L1TpM7"nV=<\YcjRF,4S%jX%A?-u;HPd[3CK$F1seW%hqecAS]W9B+0Djp8n-oDP#/,o07>P]p4<8UUCFP7dfh3p7Zk7;PNQ/Ufrl-9cgto34@2ob)ubJD,hT%[u,UJW=R1jUEk]oERs@EAQTins#(>5Qhp>T(je)M6gs;n[VjjHR>R86*lSLu/U69fT@6>^j6dN`.e'A;)3VhC^eNH;&dBUk"d+L9%PHK\83>um,f`b5jd[Y88HeuGH*/asuVF"R+aJOh+GVSWm3<\m>RV5%UZ-kG]$1Z;$jt*`oJkag$Au6.T/6BDm<*mVjU<_1?>2^!$%V<.qGl793=3PP,>=HBn-UZ9qE4I:1UWikD#V\DD]F[41J_J4hNS\);(NTjtPI:04KB6_eI-)&Z@0q^8=58Y+bQ,6II\K8H'T,W-Q%kO'W0FDKmC+?C\&1WPBK22[iS6e5N)UQ?2&2PO\D?3`&NS$cG]A<>&Z#)EDJoH3<fk]D-+iS25^+U9n;[L.\3U"!*!M5Xpub+V!1%agU9Bc!'K/TLuqs<qR*0,P^\i=Xb.r(kjMR)g]7FVhV].AI2Bk%92:D?'mmENL!4s=q74L.W_"Efd\2VedJAqCRWTD,<gM\<I$4b%PE;TM_R9GQ!'jR`hJq#i%aH\eNU)bqJ.%T[>F#7,.i[2gl!n(7`D_&Up*`pOqo?i@Rq"Q"gRjaN]R[N$Fik44g&pMi?_iQP*q>\W%jhZS657WK&.squ@e4nUCoDn45WD)6n@u]XZ-KAZ0Didb+/DJ'6WNt%qncYm7LBo\L)hROUXYNhS<kEecf/8Z,r@'-[lj1>;iL#f%%R&(hEROZ8JPU&YXK]G58Que-BFn5\[W=[dIUdWk?[V9jSPt@E7n?t%f:"dNsq+dM:JMZAQD$.:eQ#ml48W7(lgdf6?gUMXr1;iSi%L*LasFd4dd=^aHqe:#1YMC*+.Z"2X#"p.R,6r(I;XA:FuDY9G^qmf.KDohG[kh8(nZ^;C-X#qN;,8>2MNhVqP2,2"s%"cfc;Uqk8%m!$8;@Epad'd7K'ZTahq%7oY<59L+^)Bab&"`Y>Za^Ks8!rjOa3t^b6&`L7_D9a%GT]sCk%NU?C'-)&OHHUhR:U]%m"#?#+h\"h2%CgEdbJhL:*8+dM?4d$EEb@g)@hDgK/.:=:4DNEt;X>YH.Lco7n=C38=Y-S\"b1>]Us-\;ba!Df66^A`_4L-72\kKL)'[a>F2dG&)%>hN.@,8`k;HE0[VXt9-llH'hG>=MU'[IrmE"#eEkN6@LlZEI`cTNG+]a!-Gp@AjA:.!f:<i,ggbih_$]kZ5)jK@3-kWMm)_.`rlg%_50IkPH)b(;hgQW5XbH[K<Nj'(ZAggFj%j6j=c6h:So&Sfi=5+r3=?<W:f43#9k&YI)UnlJR-TE,u3WFh(FW3es$-"$e.FNfon-n%lrlid*;7D#Rb::'Q*lhC3q&V4Q@Us'B)=keH-KUCV>L#BhPE:?-OPoY>U>T)&FZ-!c2t$pfOW6<?5c\WE?dS8j`Tp;OWM9U,+W'5%]EVo+8D"J(7nbITT;tV^oVlO2MY0e%:E3I#JY\;R9U<>naS!&F(:1Pek-[!.rG"6%JIT2oOW8:R=C\%be]BGS:m5[)WM4"0$.0[:%Lt$5j8TJ`);&t12bog5fHSrVaCF_3h-jk,Jd4liKj-J<]D>>q/-bVa#'O*0[E\NS*r3i_%>?=cqAHaid7/"UR"rU_A>c7IB+6;!/%YT[^m!AQ*A.Kn)Xl9Q!n4^6P"&&,[#Jen`.!lDRo)VqbrjB9mY(#rC9LUB#]*Er,!QFn#2h`Io3Y1ZUED7?OGD-1lO?k9[-\<R;0%2dJu'FYCD#20L2Q7(;/f]#!MepL3!2Xa?Y9FF\>tB'KY*oE14_3R674bmfN/1Ig4J#*TP=bl7R!\A6G?RO,?OO(1Gk/#:PFjgVI5%K>k=gYjaV5jrR$gVWjp(O!A]21psOLEC@AV>9JdGZ0S`1iGu;Q[Fs[*ZmM,L@'NLcDo8?h*'Yt@nUU86#IEE1I#torU<-Z#%i/dY%F?(Od&%<JFEc`S;*!8hr>`qkX4dKX4^O:mJbOK`)rBV`G..NB3P)b$%UpWT:IQJc!4[bEZ;2.P0Ln\=mn\.nY;FFd9,%mt#G<[>k%Vs]40&7+D8C5+I#mLipQ0%"X)pueYFg1h>Xh4tbB9a:0-#/X:!Fh%V%/B8!-KmMp>s,op!L=M,>'UrhD2ajan`UG^k]/:Yn`_*Hj%j[)c%Png@Z<]#hm5u#-IA2Rf_a>4-'inU%,$pMjo6W&p;isc#sD-b!\k5>=$osHQ,c#L#W*2C9,rS;jYRJVf3$()oH6Dj*HbL@3R%[3bTg=9'an;qtg$ck`F"r&W7J\hIQ3*ciQ9OH;`r8&d0o;p\XadM1YpIK#D('GZNc/W<?O0mK"r;FWGs0WM;?Gg_jDH"sDefgR`t%cB0I*Xq'gd94R[k-3R/(OkZoL<Njep65@eEk/d(Xg?[6Q7D?Oq%Cd0%'Wj&^E5HR(B.W/s4o+HM@\QHbS<RHX[g4Z6%W]`drr>`U%VF+_dT^S'1`KXLho2(``IQroCa^Ys<B#hA[dH2+*d252!1tpOe63sWr=@q*3VN*+rr=)[h@\&0KTW9SSS'a+q5j-m%26Q;6(<1\0%+&9OXH!h'nSW#?CQZW.ObQQsbQo,d5>T03c,SrQ<?CQUOFbZCF5Q^@'`gZRk&.MEMU1.0'j+`bX+C:1B^s]fi$mVA)]7'4]-(3m5%2-,FRB3heRJ.GsXZl,R]K>AAH^*9<'?HLB?\ALMPY:_i&BLsfc9m\47@7?G`\UFu:Tt)B#D&M<%Bh0)@`r0thH*)t/>g+:nJFN>C%n?\It]=#-!N/KTQ>\hLSG5%kb@hP\1Wf)8&i_irahd45kpW86:OtA+L-qD`/Y0CZQToT=VR/oM"LC/HYXUAcR!@mPZ")0_/dLjiE%aul]sir;^Sd-t]Och3iP#2k<hg1^g$_lt^H8j68=o1a'a=1n$SAJ<g@Y?M+2'QSM=HG=HnnNDUP6qp5BDr4raBfrQqH"%T<+#8SJ%()c^$V?B.=E><?IX[h&8H$ZqRN'O<X6nY'B2oHWlJUC8#)OBV(*Y$*\>K)7r3L_g`0gKhR@?/%4+M;Y`M(QW^n5eF5#6UM7LW,6p%iOdAk,K^r3M\@Z5YfPeR=!Wc\J+jG:iViO4inRmG?"/h&i4B8``C;9JOeJU1B]?Y#2eZN5dMPIq]HcI[+j3LoAVVfuk*h[OF]J?C%T1H;`Y)K@"`"p7hNq""[nS9_VO>s)-HtriM43W"81)<d[@.J'N>7>:73H0$J9?NaeIHoqSiY8BZJFER@=i0I7@C;Iac)Cn8_COpu%M*cbudVVF%je4p-^84^r?MHrX\8D_*f.P`]eK_Orh"k7t:H0Eb%.lER1V7'3Ruq\j$Qr:tYlSKFYO"#<pcT@UDr5%#$JhW,2O@*c%I&`Doi&lpMaU90_JpbU5luD(9(35!JCn>;1'X?l6j;$i94A)gJ>-T<hH.Oc&V<<$'SB$#RBc&GJ6,a/JoDR*ioT1"GF^=Ch=6Ym#%[nC%\B)T4[ocmt5,Y7kZ7R")2CWg^-/UPK\L^0"k'!"[8?I>+FM;^jb#HZo<^#ZIVOG<MS*VksJV7VqB?>9esXD(QZQK1@W!I@pS%oSIFJhAL%4,RZ&F#E(s3&DhDmmi:BUM[6HU,D(-+chJslf9Z0<cf?fsoFhU!+KNjeDoqm-m`ATVHB*U_4"n;^_\E24in]!L'0kIX%NuqdH6jW3-B=C5Eb1GJ:KNHsDB_g3mhDJl4cBFP&0N"0a-.%nO#?J_]GZ^ZATri7h,ZHp_@(`r7-0U<I\TFgU,&>tU_COq&1:#u@%1R/!mb^Pg'>gmo!AYgb]>r%a$'Se2W[O^l(;gg<d+sg7SJSjI%q'8GWO@anXe6I.[IY]@\?jgjkF!BH+[XmhWoc8i,8A1C2^RAHA%F\+kejBWb5\Wf5NMjgl\iQ;&.'*ZP3VDQLWAZSOgSb/Za-aNN3\pWX:)a'G!`$fTs9<W/,?b9[Ni)-o;PVkiSoNTh.LOeS9mTm)E%N!>%i<]P=2-G[IJ2Hd\3$V3rI=70U=;.Il4%YeEBg-W4o"A;LY.76Hi[s79K*5]+i5g4AFTj*8NMGH7uK<:fU)_;Yd<d$F6^r$N3%j/PR6bt/KVCa:niFLC)_V4ON\>AZiGK>2H];GSlT>gt[s'JK/Y-^(@%GoC!NH$`R3F/3LN#.a'+F?V;7@19_Un22gl1q`,tK]t@A%O>0.r3SS"bJNVDLR^GV98I,jDjZCG'Ri""[[mk*B_f<fOPS43X`R?Y0\>d2b0!#-j=?Iu(,$")B7P.UaUlVsASEgAFLb;Sf<gk%#%4\M19h^SsS=`^!p7TAm3k`.BC))sj'o,k?R++toXbqL7QeO5%=9C0khejn"j@h#>'Vrf`e@2DkkEXEH$8r35r1!'<T?HSIKKn0n;%gJ\@8*Z><;F5gE55FAlN3Nq=\0Z\MY;[#Q%,jlf_4o9S$kYY3D>=V2)?-_(9;+'@XK5a<jJTVB)*>JaMXLZPL,:[qUK]d>8#4IA0%gH(I:"en:U?.Oq#]O]'%((!ZhQP!js4E?c,f,-lM?j_s]A9!f/l@CLG\(G_t7M.Z>B3(Ire0CQn.,t8n*/EkN7tO="FHff@Dq%4S%N-Xe$UhMN@6a=)n:oALSNU>l^3b!*c@BnYnBtZ''Df5q)\[o@*C+0e.`MY)_MfOr8N+c9#,L#)$G3,PW0--u1b8/kMMl+MK9?HB3%#u'=YnrA_R3SK=rJ4;,5gF1.U&Ah:TSbi;C^rY25dHDqOO>mk78tO/=7:OI.T7)EVCEu4*).>YO[?>/*8+]IQA*+Y;KT'ZVGXcXC%O)q&bN$*"GpZ*k#mURZZL`moqnQgB.pi+P!JKYq`G?_p7K%Q]q9.TUk4;d2#SK^%tk8d9@M?FPe&]YOUE%!_HFhV=!,lHD@QodcD%`Yi:d\%h9Js6QA-qp59krUo\6J,.!spc%6Jr2[U4Y9/8j^OQ7+hu(_PJ,$p2ps\.!q*4l?:]KJHc[YcPn,DiQs81."rq,r7rt#/%%VgnR7s*T:kp32#^o0<6'5Q'Whhu</\s24j;npFocs6tenp$_qR0E2QFj)Z=~>%AI9_PrivateDataEnd