%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 011x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 267 357
%%HiResBoundingBox: 0 0 266.9995 357
%%CropBox: 0 0 266.9995 357
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 96 128 8%%BeginData: 4736 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3BFFA9FFFFFFAFFD5AFF8485A8FF8484A8FD5AFF84A87E8484A9%FFA9A9FD57FF84597D59A87DA85385FD57FF857D7EA8A8537D8484FD57FF%8559847DA87E7E7D85FD57FFA885A9FFA88584FFA9FD58FFA8FFA8A8A9FD%5EFF52FD5EFFA87DFD5EFF7D267DFD5DFF77F87DFD5EFF52FDAFFFAF8584%FFFFA984FFFFAF84FD55FFAF7E85A8A95A85A8FF5A8584FFA8FD54FF7D7D%53A885AFA9847D847E85FFFFA8FD51FF847D84A87D537E7EA8538459FFA8%7D7DFFA87DA8FD0CFFA87DFD3EFF7D7E7EA87E7E59FF7D7D7E84A9FFA8FF%FFFF7DFD0DFFA8A8FD3EFF845AA9A8A95AA8FFA95A8484A9FD14FFA8FD3E%FFAFAFFFFFFFAFFD05FFAFA9FD58FF7DA8FD5EFFA87DFD5EFF5252A8FD5D%FF27F8FD5EFF7D27FD5FFFA8FD50FF84A9FFFF8485A8FF8485A8FD54FFA9%8584FFAF8584FFFF8584AFFD55FFA97E7D7D7E85A8A97E847DA87EFD1BFF%A8A8FD37FF7E7E59FF7D7E7EA87D7D7E84AFFF7EFFFFFF7DFD15FF7DA87D%FD34FFA87E7D7EA87D527DA87D527E5AAFA87D7DFFA87DA8FD13FFA87D7D%7DA8FD34FF7E8584A984847DFF85847DA9A9FD05FFA8FD15FFA8FFA8FD35%FFA984FFA8AF84FFFFFFA8FF84AFFD58FF7DA8FD05FFAFFD58FF76A8FD5E%FF7D7DFD5EFFF827A8FD5DFF5227FD5EFFA87DFD50FFAFAFFD5DFF855A85%FFAF5AA9FFAF5A85FD55FFA9AF7DA87DA984FF84A87EFFA8FD25FFA8FD2E%FFA87D7D7DA87EA8847D527D7E84FFA8A8A8FFFFA8A8FD1BFFA87DA8A8A8%FD2BFFAF53A97EA8527E7EA852A87E85FFFF7DA8FFFF7DFD1DFF7DA87DFD%2CFFA87D7E84A88459A8AF7E7E7E84FD06FFA8A8FD1BFFFD04A8FD2DFF84%A9A8FF84A9A8FF8484A885FD58FFA87DFFFFFFA9FF84FD58FFA8A1FD5EFF%A17DFD5EFF2727A8FD5DFF52F8FD5EFFA1A8FD5FFFA8FD2BFFA8FD32FFA8%FD2BFFA8A9FD31FFA8FD2DFFA8FDEEFFA8A8FD5EFFA852FD5EFFA8A8FD5E%FF7D27FD5EFF51F87DFD5DFF7D27FD4EFFA9A9AFFFFFAFFFFFFFAFA9FD06%FFA8FD4EFFA97EA9FFA95AA9FFAF5AA9FFA95AA9FD52FFAF85FF84A985FF%84A985FF7EA985FD52FF84A9A88484A9A98584A9A87D8485FFFFA8FD2FFF%A8FD1FFFA97D7D7DA9A9AF7EA87D847DA9A9FFA8A8FFFFA8A8FD2AFF7DA8%A8FD1EFF847E59A87E7D7E84847D59A97DFFFFA87DFFFFA87DFD29FFA87D%7DA8FD1EFFA95384A8847D7DA8A95284FFA8FD32FFAFFFA8FD1EFF8484A8%A87E607EFFA87E84FFA8FD54FFAFFFFFFFA9A8FFFFAFFD5CFF52FD5FFF7D%FD5EFFA8277DFD5DFF52F852FD5DFFCAF8A8FD5EFFA8FD60FFA9FD38FFA8%FD83FFA8A8FD3AFFA8FD81FFA8FD5FFF7DA8FD5EFF76FD5FFFA8FD5EFF7D%277DFD5DFF7DF876FD5EFF27FDB3FF8485A8FF848484FD5AFF84AFFF8584%A9FD5AFF84527D7DA87DA85AAFFFFFA8FD36FFA87DFD09FFA8FD12FF857E%7DA8A87DA87EA9FF7E7DA8FFA884A8FD31FFFD04A87D7DFFFFFFA87DFD04%A8FD0EFFA884527E7EA8528459A9FFA87DFFFFA87DFD31FFA8A87D7D7D52%52AFA8FF7D7D7DA87DA8FD0FFF8485A9A984857DA9A9FD39FFA8FFA8FFA8%7DA87DFFFFFFA8A8FD11FFAF84FFA8FF84FFA8A9FD3FFFA87DFD19FF7DA8%FD43FFA8FD1AFF76A8FD5EFF7DA8FD5DFFA8F852FD5EFF2752FD5EFF52A8%FD57FFA9FD5AFF8485FFFF8485A9FD5AFF7EA9A8847EAFA8AFFD3EFFA8A8%FD18FF84527D7D7E527E59FFFFFFA8FFFFFF7DFD36FFA87DA8A8FFA8FFFF%FFA8A8A8FFFFAFFFFFFD05A8FD04FF847E7EA87D7D7E7EA9FFA87EA8FFA8%7DA8FD35FFA8FF7DA87D7DA8FFFFA852A8FFA87DFFFFFF7DFF7E7EA8FFFF%FF8453847E84598459A9FFFF7EA8FFFFA8FD35FFA8A8FD047D52A87DFFA8%A8A8FFA8A8FFFFA87DA8A8A8FD04FFA985A8FFA98584AF85FD3DFFA8FFFF%FFA8A8A87DFD0BFFA8FD09FFA7FFA9FFA8AFFD43FFA87DFD15FF7DA8FD5E%FF76A8FD5EFF7D7DFD5DFFA8F827FD5EFF2752FD5EFF7DA8FDFCFFFD06FF%A8FD5EFFA8A8A8FD0FFFA8A8FD09FFA8A8FD40FFFD06A87DFFFFFFA87DA8%FFA884A8FFA87DA8A87DA8FD06FF7E7DFD41FFA8A852A8527DA8FFFFA852%A8FFA87DFFFFA852FF7E84A8FD06FFA8A8FD41FFA8A8FFA8A87DA87DFFFF%FFA8FD05FFA8A87DFFA8FD50FFA87DFD5FFFA8FDD0FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T11:10:55+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T11:10:55+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T11:10:55+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>192</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUo80G4i0qS8guXt3tAZDw3DAdQw75dgI4qIu2nODw2DVMWn/ADBn1KS3sdOh&#xA;uLW4KSSXMronEGGPm615MFC9679uu2WYoRB9Q60wySkR6T0tObfz1pwTTI5D6018lXliKtGrKQG5&#xA;EHY/Fyp4ZE4LJronxqAvqyfMdyHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;UFrdnLeaVc20JpLIlE3pUjcCp8aZZikIyBLXljxRIDBtM8kz6Xp7T3dwscssk9v/AKW8fxDUmdSg&#xA;ZFCcnuZk4Cn+T3y7JkjYA3ANtWPHKiTsSKQ2ifljfW6k7W8cSp9XhkYFhJHFHAG+AU4+mjE1qSx8&#xA;Mn4sYEVuGHhSmDexen5hOY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXn&#xA;P59+bV8r+QTqMlnPdRfXrMPJbUDQGK4SdJWJIoOUIUH+YrirOtF1FtT0ew1JreS0a9t4rg2s1BJE&#xA;ZUD+m9P2l5UPviqMxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZZFjjeRvsoCx+QF&#xA;cIFoJpJ9I8yx3xnE8BtfRjE4LNyBiO/LoMvy6fhqjbRiz8V2Ka0XzPHqU8yGEwRohljkZq8ow3Ek&#xA;7ClDjlwcIBu1xZ+IkVTWjeaIdSu5YfS9GMKXglZvtqJPT8BQ8tqeO2OXBwC7XFn4zVIzXtB0fzDo&#xA;9zpGr263mm3ihZ4GJ4sAwdd1IOzKCKZjuQmGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuIBFDuD1GKvJvPfl6O/wDOUsa6akplsglrOwRh9YLIIeNTyURqJOgoCa9a5mY4XG+63EyT&#xA;qVd9KOp3Ou6bfxtpSn9Gy2FtaQ6cyorlDbvG0f2PUEgnEa9t6gjwcYPCD/CDazI4iOpCl5h0e90P&#xA;Vo7cW08ll+h3tZJ45QRc3EqcXpFVm/vPiChRWRuXb4owjxC+gZTlwmupZrpaa3N5IuLWzmVNShWe&#xA;EMVLEvwJ4pxkj4tzYUau3hkdSPVfeE6Y+mu4pxq8fmP9EFLKdDqBkj5zQRrGwh5j1PSSdpo+fCtO&#xA;ZpmO5CZ26yrbxLM3OYIokY03YDc7BR18AMVVMVdiqVXSa63mC1aGQro6xMZkT0vilqa+qXDPQDjw&#xA;9Om/LkemKprirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqxreBplmaNDMgokpUFgD2DdcPEapH&#xA;CLtif5heYrDQDoN5c39vp6tqcMU7zyRxcrZw0co5SU+FTIrN4Y2U0GWAQTBJRxkFOUTijCh7qffG&#xA;1pZa2VtaCQW6cBLI0sgqTV2pU7k+GGUzLmxjAR5K2RZOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVRtr2zuS4t5kmMZo/Bg1CfGmSlAjmGMZg8ittdRsbp5I7edJXiNJAprTDKEo8wsZg8i&#xA;ttNUsLyWWG2mEkkBpKort26kb/RjLHKIsjmiOSMjQPJh35vflXp35i6HY6fcuIJ7G+guorinxCHm&#xA;FuYwaE/HCWoP5wtdhkGbOwAAABQDYAYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;qsnhWaCSFiQsishI6gMKbYQaNoIsU8n8w6vqWha1rFnpU0UcFtYes8fDnIwjES0+0CHlMkhBH8uZ&#xA;hJlRPmXEERGwPIKs3mSHyxq97pM8UglisI43vwYuDztD60jBQ3McQp/Z226jfHxOOr77Xw+C67qQ&#xA;Q80X/l3XpNMdfq90mhS3cjyRt8V7G1tL6amnFowtwyM3XbsRvGczOgfMsowELI8gz628zTweVZtT&#xA;u0kmuYFmNFhkarRqXAcRKeA7EkDK88BGVDk2YJmUd+aO1fzHb6fpS6gIZJfUkWGGKRTbEuxp8ZnE&#xA;fpqKVLN9Fdsobk1jcSRq4FAwDAVB6ivUEj7sVXYq7FXYq7FWEt5/uLbUtVt5o7e8htZo4LY2sqqV&#xA;ldpfUjmaUqqiOOEM0jcRzLRipWpKs1Rgyhh0YAjoevywK3irsVdirsVdirsVdirsVdirsVdirsVS&#xA;O58p2FzrLalMeavxMluVBVmUcRyPce1MvGciHDXxaDgBlxWlOv6FottqmhrcRvJbX13HZFGf4VaG&#xA;2lmiZyQS4Jt1i4k78uvYgZiIcKThBlxJ1qvlTRtUu1ur2IyMFCOlaK6g1o1N6diK7jrgjlIjwsji&#xA;BlxInTtKW1t7m3l4zQ3E0j8CKjhJ+wwOx264Mk+Ij3Ljhw370c6I68XUMtQaEVFQaj8crbG8Vdir&#xA;sVdirsVUltbVCxSFFLkM5CgVZTUE7bkHfFVXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8t/PnT&#xA;PzEurPy1ceTL020tvq0Ed2ohilK/WSIIrkmRXosDOQwApR6n7OKvUsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVQ+ordtYzLZkLcspETHahPzyeOuIXyYzujXNgf+O5dDfVrG4hvNQl&#xA;s6FLkBHVST6dTykElDIeIAXx7b5kZBGRFCnHxmUQbNpha+a5rCx1ddQuo5b2wWNyhZSyGRasGUb0&#xA;Q9clLHCRFbDr8GMck4g3uenxUNC88xwPqVvqUss8th9Wa7XiOcD3IWscm4AKtIoIr4kbVyvIIyrh&#xA;2bMZlG+LdmMeqWb6Z+kixS0EbTOxG6ooJaoFelO2UTiYmi3RkJCwrzzwwQvPPIsUMSl5JXIVVVRU&#xA;szHYAZFk3HJHLGskbB43AZHUgqVIqCCOoOKrsVdirsVdirsVdiqVweZtIlmv43lNsNNZVupLlTDG&#xA;ObtGpDvxFC8bAfQfsspKqaAgio3BxV2KuxV2KuxV2KuxV2KuxV2KuxVgF95B1K61zV5hOVt9SaOT&#xA;1JODIptzI8KqihZKCSZi3Jv4Zl+JHhv+KqcXw5cVfw3aEvfIkd350ZneONrtje3cPqKxkgLQCdAg&#xA;CuVYxLHUgDevXI8cRDb6mXBIz3+lEar+X91c+YtQntxxh1Z4jeXbtUiBGV5IwPtMSVovKvH9mgqC&#xA;YygI3/EiUZmVfwp9p+g2upeUo9P1G3Us0c8Y9aNWaMuzryUONjQ5DUEGZplpwRAWml/oOnXmlfov&#xA;0/q9qHjkjW3CoEeGVZkIWhT+8QEqVKnoQQTlDejbeFYII4VJKxKqAmgJCin7IA+4YqvxV2KuxV2K&#xA;uxV2Ksdl8jaTLdT3TTXH1meaOcyF1ejRGXiOLoyPRbhlHMMQvEA/CtFWQqoVQo6AUxVvFXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXlN95z1mH/AJyIsPLK6GXt59HkK6n9YPEWzMJXmaMRNx4zQGEKW3JBqK0x&#xA;V6tirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqVvaWk+tw6jb28Rvb&#xA;eJ7ZtRKhq27yVmt1dWB5CWBSeQoPnXFU0xV2KuxV2KuxV2KuxV2KuxV2KoZrmYanHbAfuWgeRjxP&#xA;2ldFHxVp0Y7U+nFUTirsVdirsVdirsVdirsVdirsVdiqAm1aOLXbPSDGTJeWt1drLUcVW1kt4ypH&#xA;i31oU+WKo2OKONSsaBFJZiFAA5OSzHbuWJJxVdirsVdirsVdirsVdirsVdirsVWGCAzicxqZ1Uos&#xA;tBzCMQSobrQlQaYqvxV2KuxV2KuxV2KuxV2KuxV2KuxV5T5n8zecrT8/PK2iWmn28uj32nXYF84l&#xA;DLEzxS3YqDx5p9Uj47U/eCuKvVsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY95&#xA;hjuLa+sr2K6lBkuYofq3KkfE15fCOtaZlYCDExI6Fxc4IIIPUILUda1BtcVoJuFnbXMVq0QP94zV&#xA;9Qke1KfdlmPFHg35kWwnllx7cgaWa/qt4dbAt5zHDZPEhjViObuatUV3p0Nf44cOOPBuN5WjNklx&#xA;7HYU688yXk+vXAs5qWWlXMNpdJ0DSSryetR2BpkMWOJjR+os8s5CVjky1orY3McrIhukR0ikIHqC&#xA;NipkCnrxJVOXyHtmG5apirsVdirsVdirsVdirsVdirsVdiqwTwGdoBIpnVQ7RVHMIxIVivWhKkA+&#xA;2Kr8VdirsVdirsVdirsVYR+bVpcXHl5FghM0nJ1iHw8VleNlR2DlVPAnlv4ZkYI3Y600Z5VR6WxV&#xA;tFvdGs1+px/UbuW+trr1Ai0+qcKhQXDrzDrL+yaFhUEZaBcpCHc1E1GJn3qV/p+tah5UutZuYZH1&#xA;C5uYYAYWVOAVG9edKvENpn+zyHxRruOuDcy4R0jSdhHi75WynyzoUS3Wmyzwcr28W4vdQeQcmKkR&#xA;IhkcUHqM6KVPcBqd8ryzqVR7qbMUbjv32ye60e9m1yC/TUJoYIoZYzAogIBkaEgLyiZuJ9I8qtXw&#xA;zHb259GuZfMdvqhuibWCH00syXCrJ8fKRQjqrFxIAeatTiKbmoVTXFXYq7FXYq7FXYq7FXYq7FXY&#xA;qxe+8panda7LfnU3FjJcQzJYcp1VRFCUO6Spvz+IAcR3PIgYVZRgV2KuxV2KuxV2KuxVplVhRgGH&#xA;Wh36Yqo331FbWWS+9IWkSmSZ5+PpoqDkXYt8ICgVqcIJHJBAPNjX5Zarb6x5OhmF4mokXF3HNL6g&#xA;noRcyFVZqt0jKkA/s07YLSQyzFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqhtT0601PTbvTb1PVs76GS2uY/5opUKOv0qxxVh35M/l/a+QfJaeXEmjub2G4lm1K4irxeeWjL&#xA;9oA7Qekv0YqzrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVM3EYuVt6P6jIZA3B+FFIBBkpwDfFspN&#xA;T4bHFVTFXYq7FXYq7FXYq7FXYqos7zRq1nNHT1AHcr6qlUekijiyUbYrWux6g9MVXW1vHb28VvFy&#xA;9KFFjTkzO3FRQVZyzMdupNTiqpirsVdirsVdirsVdirsVdirsVdirsVdiqHa0U6gl5UckieGnFeV&#xA;HZW+39qnwdOmKojFXYq7FXYq7FXYq7FVK7u7WztZru7mS3tLdGluLiVgkccaAs7u7EKqqoqSemKs&#xA;R/KPV9J1LyZC2nXsF6ILm8SY28qShGa6kkVW4FuJKOrCvYg4qzPFXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqhLDVtPv2kW1mEjxGki0Kkdu4GWTxSjzDCGSMuTVtrGm3V3JaQTiS&#xA;eIEuoBpsaGhpQ09sZYpAWRsiOWJNA7q17Z2t7Zz2V3Es1rdRvDcQturxyKVdT7FTTK2xi35Vfl5Z&#xA;+QPJtt5dt5BO8cks91dBeJmklckMRU9Iwqf7HFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXmHnjWNRs/OAtdN1L6jc3cBjaNFhaQosTuZAJFcmknpLtTauZcI8UYi+rizlwyk&#xA;a6IGz1aXTtZ0a0+upFNfeXLnUGJVFmF28kJiCg/aCrOwA4moX54RIz2J5n9SOEQ3A5D9bNvKHmG9&#xA;vvKy6jdRS3NytOUUSj1G5qrUAYoNufj2yrPEAiuobcEiQb6FMdA1ybUtFi1CezntnaFJXjZBVy0Y&#xA;cmJVaQkb7d8obl/lzWW1jS479oBb+pusQkWWgIDAMy7BhWjL2NRviqZ4q7FXYq7FXYq7FXYq7FXY&#xA;q7FXYql+vXdxa6dzt24TSzW9ssnHlw+s3EcBcL0JQSchXbx2xViSfmfY2FtMNQJvJbWe+W4e2C8x&#xA;HBPdiHhECS/7qybkV6bHuaFWUeXtej1jT4Lpoxay3CGaO1aRXk9HlxWSi9m/z3wKkg89tc6nNYxW&#xA;k1rNZXcUTeoYXW4hkvfqDuvBnZVDtyB2NVIO3Uqnmga/HrEdxJHA0McMrRpzZC7BSV5MisWjJKk8&#xA;XANKe4AVNMVdirsVSu68u2F1qiahLyMicaxbcGK/ZLCnbLo55CPCGmWCJlxFI9P0LSPMVm9zLC1t&#xA;BHd6hYy2kbtwkS1vpoOuxUOY+VF6VoOmMM5jExWeESkCyTTtNSxe59Mj055fVSMCgSqgU/DIznxA&#xA;eQZwhwk+aLVVRQqgKqiiqNgAOgAytm3irsVdirsVdirsVdirsVdirsVdirsVUbyzt7y2e2uF5RSU&#xA;qK0IINVZSNwysAQR0OKqVzpOmXMMkM1rE8cqPG44gEpJ9sVG45e2KpJY+SLTT/MFrqNgYLextIJY&#xA;o7NYWMzSTuXlke5Mp58iQaMhPXfc4qntxptlOYjJEP3UonUD4QXUllLAfao7c9/2t+uKohURAQqh&#xA;QSWIApuTUn6cVbxV2KuxVTuY5ZbaWOGUwTOjLHOoVijEUDhWBU8TvQ7Yq8x/5x6X8wT5T1KXzpMW&#xA;u31W9FtbmGKIrSd2uXrGFr6l00tKjYDbYjFXqWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVhtz5tj8uapcafqk892hQS2zLEXevpvKy1Ff2InPyXMnIIyiCBRceBlGRBNhL9D8/Q&#xA;pfudRnmb63bNdQW/BjsDIyKn7K+pFC7ICQWA8clljEgCI3Y4pSBJkdmb6VqlpqlhFfWjFoJhVCdj&#xA;+FcxpwMTRciExIWERDPFMheJg6hnQkfzRsUYfQykZFkstL6yvIjLZ3EdzErFGkhdZFDqaMpKkio7&#xA;jFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYqoX97BY2U15PX0oELsFFWNP2VHdj0A8cVUdP1eyv42aI&#xA;lGWaW3MUo4P6kDFZAAetCOo2pviqKinhmBMUiyBTRihDAGlaGnzxVsSRsxUMCy/aUHcYq1HNFI8i&#xA;IwZoW4SgfssVD0P+xYHFUCmv6a8zQq78o7r6hLyjdAlx6YlCnmF2ZGHFh8JqKHfFUwV1avEg0NDQ&#xA;1oR2xVhvmfyjqWo+Y7W/tnpAqlWBKgKzIYixr8X92xA4+JzLxZYgC/4XFy45EmuqQ3PkLULi8tbi&#xA;xljuVtIktFkSRfQMlgJrVGkIDMrcXIkVejbfs7jFkiBZ5hcsJE0ORZd5R0V9P0afSJzJ6dvKYklU&#xA;tEzIqIAyshVhWnY5DOQaI/mtmEEXfemOk6Fb6daz26ySzLcSTSP6sssm0sjycR6jvSgkoSOvU5Q3&#xA;Kuj6Tb6Tp8VjbszQwqqIX41CooRR8ARaKqgbDFUbirsVdirsVdirsVdirsVdirsVdirsVQWs2U15&#xA;p7wwMEuFaOaAkkL6kEizIGp+yWQA+2KsS1P8tZb9L2U6k63F2zzpGUAWKTnLLEEKklKSTUlK7uoU&#xA;dsNqt8rWnmDy7qWmeXWhiNjKtzPdSWtrcGBC7u6s921VaZ2pseP7XimKp5pfkzT9N8xXeu27kXN7&#xA;6xuYwkaqxmaM1qF57CFe++56k4FRumaBbafd3dzHNPI1zIJAsk88iqPSjjoRJI6sf3deRFe3bFUC&#xA;fLt+Lq6Julmt9Q1KDUZ6r6bRLarH6cacSedTbRA1ptyPgMVRvl7y/aaHZNa2x5Kz82kKIrsaBeUj&#xA;KAZHIX4napJ8BQBVMpHWONnYEqgLEKCxoBXZVBJPsMVYF+Tnnnyv5p0XUhoV4bz6pqeoS3B9GaIK&#xA;l7qFzcQbyogJaJg1Buv7VDirP8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVY55H8h6H5Msb+y0hSkOoahc6lKpAAV7hqiNAOiRoqovyxVkeKuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVoWo6peve/Xrb6qIpnjgjKSK3BXdAS7gJJyVVflGa&#xA;fFTtUqprirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqVeaOX6CuqcvSPAXRSocWxkUXBWm9fR5&#xA;0pirDmvvOmkW97+iNJc2UVxcXNrURvHJE0sruCiv6iqsfBoRHuxYrQUwoTbyX5ve9trK11SSWTU7&#xA;5pyknocIP3TMfSjkAVZeMaVLr8J/yeSrilHaTN5wPmS9TUURtEYzGydURCoVoxEGIkdmJrJvxoRT&#xA;oajAqtoj+aTqF8NUjtltPVHomJ5S1PRi+wHRRw5cq7/arirHbX9MjXb2W4jvYA+pWqaRHePGwkUP&#xA;L9cki4O7BWtuXwUVQqpty5YVZT5bk12Syd9aUJdmQn01RFRRQVVCryF0BqAzUJ8MCprirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVcAAKDYDFUFLo2ny6tDqzo5vreNoYXEsgQI9eQ9IN6&#xA;ZrXqVr9wxVG4q7FXUFa98Vdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:09352559142068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:09352559142068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:09352559142068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T11:10:55+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -357 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 357 li
267 357 li
267 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
133.229 37.375 mo
171.229 37.375 li
171.229 58.375 li
133.229 58.375 li
133.229 37.375 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
133.23 58.375 mo
171.23 58.375 li
171.23 37.375 li
133.23 37.375 li
133.23 58.375 li
clp
gsave
132.599 60.5898 mo
172.142 60.5898 li
172.142 38.5161 li
132.599 38.5161 li
132.599 60.5898 li
clp
171.23 58.375 mo
170.855 58.375 li
171.229 58.375 li
171.229 54.6801 li
171.229 54.6827 171.23 54.6852 171.23 54.6877 cv
171.23 58.375 li
.410611 .142345 0 0 cmyk
f
171.229 58.375 mo
170.855 58.375 li
171.139 57.707 li
170.855 58.375 li
170.564 58.375 li
170.564 57.5898 li
170.564 58.375 li
170.227 58.375 li
169.916 57.7397 li
170.227 58.375 li
168.769 58.375 li
168.688 57.9734 168.605 57.4968 168.519 56.9445 cv
168.31 55.6015 168.086 53.8248 167.882 51.8236 cv
167.469 52.9274 166.975 53.91 166.398 54.7098 cv
165.987 55.2677 165.549 55.7515 164.934 56.1099 cv
164.582 56.3099 164.147 56.4686 163.645 56.4695 cv
163.591 56.4688 li
163.153 56.4604 162.74 56.317 162.417 56.1192 cv
162.09 55.9206 161.84 55.6764 161.631 55.4192 cv
161.217 54.9018 160.944 54.3185 160.716 53.6661 cv
160.273 52.3651 160.042 50.7647 160.039 49.0445 cv
160.039 48.4057 160.072 47.7521 160.144 47.096 cv
160.211 46.4869 160.242 45.8811 160.242 45.3013 cv
160.243 44.3106 160.149 43.3925 159.997 42.6772 cv
159.948 42.4263 159.885 42.1995 159.822 42.007 cv
159.593 42.3229 159.332 42.7541 159.08 43.2549 cv
158.423 44.5506 157.807 46.3175 157.507 47.9719 cv
157.266 49.2948 156.851 50.5969 156.338 51.7794 cv
155.823 52.9625 155.217 54.0219 154.539 54.8721 cv
154.081 55.4378 153.601 55.9203 152.988 56.2767 cv
152.638 56.4765 152.227 56.639 151.742 56.673 cv
151.74 56.6731 li
151.584 56.6782 li
151.581 56.6783 151.578 56.6783 151.575 56.6783 cv
151.199 56.6783 150.824 56.5801 150.511 56.4207 cv
150.195 56.2604 149.938 56.0476 149.729 55.8208 cv
149.313 55.363 149.055 54.8493 148.849 54.2909 cv
148.448 53.1754 148.268 51.8341 148.264 50.3441 cv
148.264 49.3082 148.358 48.2068 148.561 47.0924 cv
148.561 47.0935 li
148.735 46.1359 148.815 45.2015 148.815 44.368 cv
148.815 43.5789 148.741 42.8783 148.624 42.3534 cv
148.591 42.1931 148.551 42.0498 148.51 41.9269 cv
148.478 41.9611 148.445 41.9976 148.412 42.0362 cv
148.08 42.4173 147.684 43.0036 147.305 43.7003 cv
146.544 45.0949 145.844 46.9399 145.515 48.6125 cv
145.504 48.6647 li
145.515 48.6122 li
145.256 49.9171 144.867 51.1962 144.411 52.3487 cv
143.952 53.5026 143.434 54.524 142.863 55.3419 cv
142.474 55.887 142.085 56.3518 141.52 56.7225 cv
141.197 56.9273 140.779 57.1179 140.24 57.1216 cv
140.15 57.1197 li
140.147 57.1196 li
139.735 57.1033 139.347 56.9517 139.06 56.7565 cv
138.769 56.5605 138.561 56.3309 138.392 56.1001 cv
138.061 55.6353 137.865 55.1446 137.702 54.6022 cv
137.387 53.5226 137.239 52.2163 137.236 50.7789 cv
137.236 49.8551 137.302 48.8829 137.443 47.9065 cv
137.443 47.9071 li
137.539 47.2475 137.584 46.576 137.584 45.9285 cv
137.584 45.1266 137.514 44.3607 137.393 43.7061 cv
137.274 43.0525 137.098 42.5075 136.931 42.1757 cv
136.877 42.0642 136.824 41.9789 136.783 41.9211 cv
136.584 41.9343 136.361 42.0016 136.169 42.1116 cv
135.95 42.2334 135.787 42.4073 135.724 42.5239 cv
135.674 42.6625 li
135.673 42.6711 li
135.598 45.14 li
133.23 45.0677 li
133.23 40.8534 li
133.466 40.4904 133.757 40.1791 134.082 39.9151 cv
134.843 39.3051 135.801 38.9242 136.861 38.9187 cv
136.999 38.9187 137.139 38.9255 137.279 38.94 cv
137.682 38.9805 138.054 39.1294 138.352 39.3224 cv
138.652 39.5161 138.888 39.7491 139.086 39.9947 cv
139.479 40.4884 139.74 41.041 139.954 41.6515 cv
140.372 42.8694 140.581 44.343 140.584 45.9285 cv
140.584 46.7147 140.53 47.5257 140.412 48.337 cv
140.412 48.3377 li
140.292 49.1624 140.236 49.9975 140.236 50.7789 cv
140.236 51.4784 140.281 52.1355 140.361 52.6978 cv
140.401 52.9839 140.451 53.2462 140.505 53.474 cv
140.657 53.243 140.821 52.9659 140.981 52.656 cv
141.618 51.4396 142.24 49.7152 142.572 48.0285 cv
142.583 47.9756 li
142.572 48.0282 li
143.111 45.3617 144.272 42.6598 145.566 40.814 cv
146.006 40.1969 146.457 39.6698 147.002 39.2494 cv
147.316 39.0121 147.669 38.8001 148.122 38.6784 cv
148.129 38.6767 li
148.317 38.6278 148.517 38.6001 148.721 38.6001 cv
148.721 38.6001 148.721 38.6001 148.722 38.6001 cv
148.725 38.6 148.728 38.6 148.731 38.6 cv
149.083 38.6 149.438 38.6894 149.735 38.8376 cv
150.036 38.9866 150.281 39.186 150.479 39.3974 cv
150.873 39.8248 151.108 40.2971 151.295 40.8034 cv
151.657 41.815 151.811 43.0141 151.815 44.368 cv
151.814 45.3909 151.718 46.4948 151.513 47.6291 cv
151.51 47.6435 li
151.512 47.6302 li
151.343 48.5607 151.264 49.491 151.264 50.3441 cv
151.264 51.05 151.318 51.7036 151.412 52.2529 cv
151.501 52.7768 151.631 53.2071 151.754 53.478 cv
151.779 53.4551 151.806 53.4302 151.833 53.4035 cv
152.13 53.1161 152.509 52.6209 152.87 52.0048 cv
153.598 50.7714 154.264 49.0539 154.556 47.4342 cv
154.793 46.1354 155.173 44.8405 155.628 43.6561 cv
156.086 42.4707 156.614 41.4014 157.193 40.5344 cv
157.585 39.9558 157.982 39.4624 158.511 39.0613 cv
158.817 38.837 159.182 38.6267 159.677 38.5433 cv
159.782 38.5264 159.891 38.5171 159.999 38.5161 cv
160.05 38.5161 li
160.463 38.5206 160.86 38.6562 161.162 38.8435 cv
161.475 39.0362 161.706 39.271 161.895 39.5116 cv
162.266 39.9965 162.494 40.5239 162.686 41.1118 cv
163.056 42.2831 163.239 43.72 163.242 45.3013 cv
163.242 45.9889 163.205 46.7012 163.126 47.4228 cv
163.067 47.9648 163.039 48.5113 163.039 49.0445 cv
163.038 49.9264 163.117 50.7731 163.25 51.4988 cv
163.382 52.2232 163.577 52.8301 163.761 53.1994 cv
163.763 53.2024 163.764 53.2054 163.765 53.2084 cv
163.988 52.9502 164.268 52.5319 164.53 52.0152 cv
165.138 50.8318 165.679 49.1382 165.88 47.4962 cv
165.94 47.0135 166.009 46.6 166.094 46.2347 cv
166.183 45.8668 166.274 45.5547 166.451 45.2129 cv
166.578 44.9893 166.732 44.7188 167.131 44.4529 cv
167.353 44.3076 167.68 44.1878 168.021 44.1878 cv
168.025 44.1878 168.029 44.1878 168.033 44.1878 cv
168.035 44.1878 168.036 44.1878 168.038 44.1878 cv
168.331 44.1878 168.603 44.2713 168.806 44.3775 cv
169.012 44.485 169.157 44.6087 169.27 44.7231 cv
169.493 44.9548 169.608 45.158 169.712 45.3585 cv
169.909 45.7566 170.037 46.1695 170.166 46.6756 cv
170.415 47.679 170.624 49.0306 170.79 50.7481 cv
170.929 52.1863 171.08 53.5261 171.229 54.6801 cv
171.229 58.375 li
169.916 57.7397 mo
169.916 57.7397 li
169.916 57.7397 li
140.086 54.4795 mo
140.086 54.4795 li
140.086 54.4795 mo
140.086 54.4795 li
151.568 54.0649 mo
151.568 54.0649 li
151.568 54.0649 mo
151.568 54.0649 li
151.47 53.7058 mo
151.47 53.7058 li
151.47 53.7058 mo
151.47 53.7058 li
163.45 53.5051 mo
163.45 53.5051 li
163.45 53.5051 mo
163.45 53.5051 li
140.16 57.1201 mo
140.149 57.1196 li
140.15 57.1197 li
140.16 57.1201 li
151.734 56.6734 mo
151.74 56.6731 li
151.741 56.6731 li
151.734 56.6734 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
143.935 47.1611 mo
144.265 45.1699 li
144.288 45.0601 144.288 45.0381 144.288 45.0381 cv
144.288 44.917 144.21 44.917 144.023 44.917 cv
138.501 44.917 li
138.27 44.917 138.248 44.917 138.193 45.0933 cv
137.522 47.1172 li
137.489 47.2603 li
137.489 47.3701 137.599 47.3701 137.632 47.3701 cv
137.742 47.3701 137.753 47.3594 137.841 47.1392 cv
138.391 45.5 138.633 45.2363 140.129 45.2363 cv
140.503 45.2363 li
140.756 45.2363 140.756 45.2803 140.756 45.3569 cv
140.712 45.5879 li
139.227 51.5391 li
139.128 51.9463 139.04 52.0562 138.105 52.0562 cv
137.973 52.0562 li
137.775 52.0562 137.676 52.0562 137.676 52.2651 cv
137.676 52.375 137.775 52.375 137.863 52.375 cv
139.425 52.353 li
141.02 52.375 li
141.13 52.375 141.251 52.375 141.251 52.1772 cv
141.251 52.0562 141.174 52.0562 140.987 52.0562 cv
140.855 52.0562 li
140.668 52.0562 140.492 52.0449 140.316 52.0229 cv
140.107 52.001 139.997 51.9902 139.997 51.814 cv
139.997 51.7593 139.997 51.7373 140.019 51.627 cv
141.515 45.6431 li
141.592 45.335 141.658 45.2803 141.747 45.2578 cv
141.823 45.2363 142.142 45.2363 142.34 45.2363 cv
143.297 45.2363 143.749 45.3022 143.749 46.061 cv
143.749 46.3911 143.661 46.9521 143.627 47.1279 cv
143.605 47.249 li
143.605 47.3701 143.715 47.3701 143.759 47.3701 cv
143.891 47.3701 143.902 47.3369 143.935 47.1611 cv
cp
0 0 0 1 cmyk
f
146.917 55.0151 mo
146.917 54.9819 146.917 54.96 146.729 54.7729 cv
145.354 53.3872 145.002 51.3081 145.002 49.625 cv
145.002 47.7109 145.42 45.7969 146.773 44.4219 cv
146.917 44.29 146.917 44.2681 146.917 44.2354 cv
146.806 44.125 li
146.696 44.125 145.707 44.873 145.057 46.27 cv
144.497 47.48 144.364 48.7012 144.364 49.625 cv
144.364 50.4829 144.485 51.814 145.09 53.0571 cv
145.75 54.4102 146.696 55.125 146.806 55.125 cv
146.917 55.0151 li
cp
f
153.857 50.8022 mo
153.857 50.7031 153.758 50.7031 153.714 50.7031 cv
153.583 50.7031 153.571 50.7363 153.527 50.9014 cv
153.428 51.2749 153.131 52.2651 152.515 52.2651 cv
152.35 52.2651 152.262 52.188 152.262 51.9351 cv
152.262 51.6709 152.383 51.3301 152.471 51.1104 cv
152.757 50.3071 153.131 49.2842 153.131 48.646 cv
153.131 48.063 152.878 47.5239 152.031 47.5239 cv
151.349 47.5239 150.833 47.9199 150.469 48.415 cv
150.436 47.9199 150.095 47.5239 149.589 47.5239 cv
149.336 47.5239 149.05 47.6343 148.819 48.1069 cv
148.61 48.5142 148.467 49.1963 148.467 49.1963 cv
148.467 49.2842 148.522 49.3062 148.622 49.3062 cv
148.742 49.3062 148.753 49.2949 148.819 49.042 cv
148.984 48.3931 149.193 47.7441 149.567 47.7441 cv
149.853 47.7441 149.853 48.063 149.853 48.1953 cv
149.853 48.4043 149.809 48.646 149.765 48.7998 cv
148.962 52.0122 li
148.918 52.166 148.918 52.1772 148.918 52.2212 cv
148.918 52.353 149.006 52.4854 149.205 52.4854 cv
149.458 52.4854 149.567 52.2871 149.611 52.1001 cv
150.282 49.394 li
150.348 49.1523 150.942 47.7441 151.999 47.7441 cv
152.504 47.7441 152.504 48.2939 152.504 48.481 cv
152.504 49.1631 152.02 50.4829 151.833 51.022 cv
151.734 51.2969 151.69 51.396 151.69 51.627 cv
151.69 52.1553 152.031 52.4854 152.482 52.4854 cv
153.505 52.4854 153.857 50.8462 153.857 50.8022 cv
cp
f
158.477 44.3452 mo
158.477 44.2241 158.378 44.125 158.257 44.125 cv
158.103 44.125 158.059 44.2354 158.026 44.3452 cv
154.275 54.707 li
154.22 54.8501 154.22 54.9053 154.22 54.9053 cv
154.22 55.0264 154.319 55.125 154.44 55.125 cv
154.594 55.125 154.638 55.0151 154.671 54.9053 cv
158.422 44.543 li
158.477 44.3999 158.477 44.3452 158.477 44.3452 cv
cp
f
164.043 50.4609 mo
163.768 50.4609 li
163.713 50.791 163.636 51.2749 163.526 51.4399 cv
163.449 51.5283 162.723 51.5283 162.481 51.5283 cv
160.501 51.5283 li
161.667 50.395 li
163.383 48.877 164.043 48.2832 164.043 47.1831 cv
164.043 45.9292 163.053 45.0488 161.711 45.0488 cv
160.468 45.0488 159.654 46.061 159.654 47.04 cv
159.654 47.6563 160.205 47.6563 160.237 47.6563 cv
160.424 47.6563 160.809 47.5239 160.809 47.0732 cv
160.809 46.7871 160.611 46.501 160.226 46.501 cv
160.083 46.5122 li
160.336 45.7969 160.93 45.3901 161.568 45.3901 cv
162.569 45.3901 163.042 46.2813 163.042 47.1831 cv
163.042 48.063 162.492 48.9321 161.887 49.6143 cv
159.775 51.9683 li
159.654 52.0889 159.654 52.1113 159.654 52.375 cv
163.735 52.375 li
164.043 50.4609 li
cp
f
167.783 49.625 mo
167.783 48.7671 167.663 47.436 167.057 46.1934 cv
166.397 44.8398 165.451 44.125 165.341 44.125 cv
165.231 44.2354 li
165.231 44.2681 165.231 44.29 165.44 44.4883 cv
166.518 45.5771 167.145 47.3262 167.145 49.625 cv
167.145 51.5059 166.738 53.4419 165.375 54.8281 cv
165.231 54.96 165.231 54.9819 165.231 55.0151 cv
165.341 55.125 li
165.451 55.125 166.441 54.377 167.09 52.98 cv
167.651 51.77 167.783 50.5488 167.783 49.625 cv
cp
f
190.333 51.2202 mo
190.179 51.0552 li
190.146 51.0552 190.135 51.0659 190.047 51.165 cv
189.464 51.957 188.639 52.2651 188.079 52.2651 cv
187.517 52.2651 187.22 51.77 187.22 51.1211 cv
187.22 50.6152 187.484 49.4053 187.847 48.7783 cv
188.221 48.1182 188.76 47.7441 189.233 47.7441 cv
189.299 47.7441 189.882 47.7441 190.036 48.272 cv
189.761 48.2832 189.519 48.4922 189.519 48.7559 cv
189.519 49.0313 189.761 49.0859 189.86 49.0859 cv
189.97 49.0859 190.377 49.02 190.377 48.4482 cv
190.377 47.9312 189.916 47.5239 189.245 47.5239 cv
187.902 47.5239 186.516 49.0752 186.516 50.7031 cv
186.516 51.8252 187.187 52.4854 188.067 52.4854 cv
189.431 52.4854 190.333 51.374 190.333 51.2202 cv
cp
f
181.709 49.625 mo
181.709 49.4053 181.5 49.4053 181.346 49.4053 cv
178.277 49.4053 li
178.277 46.3252 li
178.277 46.1709 178.277 45.9619 178.057 45.9619 cv
177.837 45.9619 177.837 46.1709 177.837 46.3252 cv
177.837 49.4053 li
174.757 49.4053 li
174.603 49.4053 174.394 49.4053 174.394 49.625 cv
174.394 49.8452 174.603 49.8452 174.757 49.8452 cv
177.837 49.8452 li
177.837 52.9248 li
177.837 53.0791 177.837 53.2881 178.057 53.2881 cv
178.277 53.2881 178.277 53.0791 178.277 52.9248 cv
178.277 49.8452 li
181.346 49.8452 li
181.5 49.8452 181.709 49.8452 181.709 49.625 cv
cp
f
110.604 74.5 mo
148.604 74.5 li
148.604 95.5 li
110.604 95.5 li
110.604 74.5 li
0 0 0 0 cmyk
f
gsave
110.604 95.5 mo
148.605 95.5 li
148.605 74.5 li
110.604 74.5 li
110.604 95.5 li
clp
gsave
109.266 97.3711 mo
150.214 97.3711 li
150.214 75.2422 li
109.266 75.2422 li
109.266 97.3711 li
clp
148.605 95.5 mo
146.732 95.5 li
146.732 95.5 li
148.604 95.5 li
148.604 85.6129 li
148.604 85.6155 148.605 85.6182 148.605 85.6208 cv
148.605 95.5 li
.410611 .142345 0 0 cmyk
f
148.604 95.5 mo
146.732 95.5 li
146.61 95.0371 146.504 94.4843 146.399 93.8201 cv
146.164 92.3234 145.951 90.288 145.806 87.9546 cv
145.781 87.5433 145.751 87.1541 145.716 86.7893 cv
145.511 87.3496 145.283 87.8948 145.039 88.4161 cv
144.485 89.5963 143.855 90.6495 143.173 91.4895 cv
142.712 92.0488 142.241 92.522 141.64 92.8755 cv
141.296 93.0729 140.889 93.2392 140.392 93.2675 cv
140.391 93.2675 li
140.27 93.2707 li
140.267 93.2707 140.264 93.2707 140.261 93.2707 cv
139.899 93.2707 139.537 93.1784 139.233 93.0272 cv
138.926 92.8752 138.676 92.6722 138.472 92.456 cv
138.065 92.0194 137.817 91.5319 137.618 91.0072 cv
137.234 89.9586 137.064 88.7126 137.061 87.3313 cv
137.061 86.3592 137.152 85.3265 137.348 84.2821 cv
137.529 83.3205 137.615 82.3278 137.615 81.4157 cv
137.615 80.5503 137.537 79.7548 137.408 79.1451 cv
137.376 78.9837 137.339 78.8352 137.299 78.7034 cv
137.073 78.9963 136.812 79.4003 136.555 79.8773 cv
135.841 81.1897 135.137 83.0554 134.736 84.9301 cv
134.424 86.3817 133.96 87.8033 133.42 89.0815 cv
132.877 90.3607 132.265 91.4911 131.602 92.3854 cv
131.152 92.981 130.699 93.4824 130.085 93.862 cv
129.733 94.0727 129.296 94.2559 128.753 94.2591 cv
128.62 94.2551 li
128.621 94.2551 li
128.262 94.2351 127.912 94.1207 127.627 93.9553 cv
127.341 93.79 127.115 93.5824 126.932 93.3669 cv
126.57 92.9319 126.355 92.4629 126.183 91.9595 cv
125.851 90.9547 125.712 89.7709 125.708 88.4519 cv
125.709 87.2133 125.843 85.8664 126.131 84.5155 cv
126.14 84.4751 li
126.131 84.5159 li
126.342 83.5338 126.439 82.5553 126.439 81.6804 cv
126.439 80.9461 126.369 80.2837 126.255 79.7679 cv
126.188 79.4512 126.097 79.1912 126.017 79.011 cv
125.972 79.0512 125.924 79.0975 125.874 79.1497 cv
125.554 79.4766 125.153 80.0284 124.773 80.7097 cv
124.005 82.074 123.304 83.9582 122.993 85.7398 cv
122.748 87.129 122.341 88.4806 121.841 89.6951 cv
121.338 90.9104 120.752 91.9841 120.088 92.8393 cv
119.638 93.4078 119.167 93.8928 118.537 94.2449 cv
118.177 94.4413 117.741 94.5959 117.236 94.5973 cv
117.022 94.5875 li
116.661 94.5558 116.315 94.4351 116.03 94.2665 cv
115.743 94.0978 115.511 93.8878 115.321 93.6665 cv
114.942 93.2204 114.705 92.7284 114.517 92.1975 cv
114.15 91.1371 113.99 89.8824 113.986 88.4986 cv
113.987 87.3185 114.112 86.0528 114.384 84.7874 cv
114.39 84.7597 li
114.384 84.7868 li
114.638 83.6095 114.755 82.4441 114.755 81.4544 cv
114.755 80.8107 114.704 80.2406 114.622 79.8078 cv
114.594 79.6523 114.56 79.5145 114.525 79.3997 cv
114.299 79.4892 114.049 79.6132 113.82 79.7612 cv
113.377 80.0344 112.995 80.4085 112.876 80.603 cv
112.828 80.6875 li
112.828 80.6865 li
112.077 82.7056 li
110.604 82.1575 li
110.604 78.6321 li
110.673 78.5458 110.745 78.4624 110.818 78.3807 cv
111.142 78.0252 111.511 77.7106 111.911 77.4291 cv
112.717 76.8727 113.622 76.4323 114.63 76.2788 cv
114.731 76.2643 114.835 76.2565 114.941 76.2565 cv
114.944 76.2565 114.947 76.2565 114.951 76.2565 cv
115.286 76.2565 115.628 76.3436 115.911 76.4883 cv
116.199 76.6338 116.429 76.8273 116.61 77.0278 cv
116.971 77.4336 117.171 77.8649 117.329 78.3178 cv
117.633 79.2222 117.751 80.2683 117.755 81.4544 cv
117.754 82.6757 117.614 84.032 117.317 85.4182 cv
117.317 85.4177 li
117.091 86.4635 116.986 87.5332 116.986 88.4986 cv
116.985 89.3664 117.073 90.1523 117.213 90.7389 cv
117.268 90.9867 117.339 91.1968 117.406 91.3581 cv
117.677 91.0868 118.031 90.609 118.368 90.0056 cv
119.074 88.7575 119.732 86.9767 120.039 85.2189 cv
120.29 83.8014 120.719 82.3994 121.248 81.1248 cv
121.779 79.8495 122.403 78.7063 123.098 77.7908 cv
123.566 77.1812 124.054 76.6635 124.678 76.2767 cv
125.035 76.06 125.454 75.8799 125.958 75.8358 cv
125.96 75.8357 li
126.164 75.8272 li
126.166 75.8272 126.169 75.8272 126.171 75.8272 cv
126.521 75.8272 126.873 75.9084 127.178 76.0485 cv
127.485 76.189 127.745 76.3825 127.958 76.5935 cv
128.384 77.0198 128.65 77.5075 128.858 78.0289 cv
129.263 79.0725 129.434 80.3058 129.439 81.6804 cv
129.438 82.7742 129.32 83.9502 129.065 85.1432 cv
129.064 85.1496 li
128.821 86.2814 128.708 87.4338 128.708 88.4519 cv
128.708 89.2287 128.775 89.9289 128.886 90.4636 cv
128.914 90.6106 128.948 90.745 128.983 90.8637 cv
129.25 90.5463 129.574 90.0721 129.889 89.5007 cv
130.653 88.13 131.397 86.1985 131.803 84.2993 cv
132.109 82.8771 132.551 81.4956 133.061 80.2589 cv
133.575 79.0211 134.149 77.9337 134.773 77.0713 cv
135.198 76.4969 135.624 76.0118 136.218 75.6376 cv
136.558 75.4303 136.986 75.2461 137.524 75.2428 cv
137.643 75.2428 137.766 75.2527 137.889 75.2742 cv
137.888 75.274 li
138.256 75.337 138.585 75.4953 138.843 75.6849 cv
139.103 75.8755 139.301 76.094 139.464 76.318 cv
139.787 76.7682 139.988 77.2496 140.151 77.7739 cv
140.468 78.8192 140.612 80.0588 140.615 81.4157 cv
140.614 82.5122 140.514 83.6777 140.296 84.8371 cv
140.135 85.6917 140.06 86.5481 140.061 87.3313 cv
140.06 88.0747 140.129 88.7537 140.242 89.2894 cv
140.302 89.585 140.381 89.8369 140.455 90.0252 cv
140.461 90.0195 140.467 90.0138 140.473 90.0079 cv
140.776 89.7161 141.169 89.2124 141.551 88.5866 cv
142.322 87.3336 143.064 85.5889 143.449 83.929 cv
143.455 83.9048 li
143.449 83.9296 li
143.561 83.4516 143.681 83.0382 143.821 82.6686 cv
143.965 82.2981 144.117 81.9715 144.372 81.6403 cv
144.546 81.4235 144.775 81.1857 145.153 81.0092 cv
145.366 80.9113 145.628 80.8452 145.897 80.8452 cv
145.899 80.8452 145.901 80.8452 145.903 80.8452 cv
145.905 80.8452 145.908 80.8452 145.911 80.8452 cv
146.406 80.8452 146.83 81.065 147.084 81.2817 cv
147.35 81.5044 147.508 81.7298 147.64 81.9505 cv
147.896 82.3925 148.053 82.8522 148.201 83.4029 cv
148.362 84.0239 148.497 84.759 148.604 85.6129 cv
148.604 95.5 li
148.544 95.4291 mo
148.544 95.4291 li
148.544 94.3705 li
148.544 95.4291 li
148.264 95.3642 mo
148.264 95.3642 li
147.764 94.6026 li
148.264 95.3642 li
147.764 94.6026 mo
147.764 94.6026 li
147.764 94.6026 li
140.259 90.6967 mo
140.259 90.6967 li
140.259 90.6967 mo
140.259 90.6967 li
125.946 75.8368 mo
125.959 75.8358 li
125.959 75.8358 125.958 75.8358 125.958 75.8358 cv
125.946 75.8368 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
121.31 84.2861 mo
121.64 82.2949 li
121.662 82.1851 121.662 82.1631 121.662 82.1631 cv
121.662 82.042 121.585 82.042 121.398 82.042 cv
115.876 82.042 li
115.645 82.042 115.623 82.042 115.568 82.2183 cv
114.897 84.2422 li
114.864 84.3853 li
114.864 84.4951 114.974 84.4951 115.007 84.4951 cv
115.117 84.4951 115.128 84.4844 115.216 84.2642 cv
115.766 82.625 116.008 82.3613 117.504 82.3613 cv
117.878 82.3613 li
118.131 82.3613 118.131 82.4053 118.131 82.4819 cv
118.087 82.7129 li
116.602 88.6641 li
116.503 89.0713 116.415 89.1812 115.48 89.1812 cv
115.348 89.1812 li
115.15 89.1812 115.051 89.1812 115.051 89.3901 cv
115.051 89.5 115.15 89.5 115.238 89.5 cv
116.8 89.478 li
118.395 89.5 li
118.505 89.5 118.626 89.5 118.626 89.3022 cv
118.626 89.1812 118.549 89.1812 118.362 89.1812 cv
118.23 89.1812 li
118.043 89.1812 117.867 89.1699 117.691 89.1479 cv
117.482 89.126 117.372 89.1152 117.372 88.939 cv
117.372 88.8843 117.372 88.8623 117.394 88.752 cv
118.89 82.7681 li
118.967 82.46 119.033 82.4053 119.121 82.3828 cv
119.198 82.3613 119.517 82.3613 119.715 82.3613 cv
120.672 82.3613 121.123 82.4272 121.123 83.186 cv
121.123 83.5161 121.035 84.0771 121.002 84.2529 cv
120.98 84.374 li
120.98 84.4951 121.09 84.4951 121.134 84.4951 cv
121.266 84.4951 121.277 84.4619 121.31 84.2861 cv
cp
0 0 0 1 cmyk
f
124.291 92.1401 mo
124.291 92.1069 124.291 92.085 124.104 91.8979 cv
122.729 90.5122 122.377 88.4331 122.377 86.75 cv
122.377 84.8359 122.795 82.9219 124.148 81.5469 cv
124.291 81.415 124.291 81.3931 124.291 81.3604 cv
124.181 81.25 li
124.071 81.25 123.081 81.998 122.432 83.395 cv
121.871 84.605 121.739 85.8262 121.739 86.75 cv
121.739 87.6079 121.86 88.939 122.465 90.1821 cv
123.125 91.5352 124.071 92.25 124.181 92.25 cv
124.291 92.1401 li
cp
f
131.232 87.9272 mo
131.232 87.8281 131.133 87.8281 131.089 87.8281 cv
130.957 87.8281 130.946 87.8613 130.902 88.0264 cv
130.803 88.3999 130.506 89.3901 129.89 89.3901 cv
129.725 89.3901 129.637 89.313 129.637 89.0601 cv
129.637 88.7959 129.758 88.4551 129.846 88.2354 cv
130.132 87.4321 130.506 86.4092 130.506 85.771 cv
130.506 85.188 130.253 84.6489 129.406 84.6489 cv
128.724 84.6489 128.207 85.0449 127.844 85.54 cv
127.811 85.0449 127.47 84.6489 126.964 84.6489 cv
126.711 84.6489 126.425 84.7593 126.194 85.2319 cv
125.985 85.6392 125.842 86.3213 125.842 86.3213 cv
125.842 86.4092 125.897 86.4312 125.996 86.4312 cv
126.117 86.4312 126.128 86.4199 126.194 86.167 cv
126.359 85.5181 126.568 84.8691 126.942 84.8691 cv
127.228 84.8691 127.228 85.188 127.228 85.3203 cv
127.228 85.5293 127.184 85.771 127.14 85.9248 cv
126.337 89.1372 li
126.293 89.291 126.293 89.3022 126.293 89.3462 cv
126.293 89.478 126.381 89.6104 126.579 89.6104 cv
126.832 89.6104 126.942 89.4121 126.986 89.2251 cv
127.657 86.519 li
127.723 86.2773 128.317 84.8691 129.373 84.8691 cv
129.879 84.8691 129.879 85.4189 129.879 85.606 cv
129.879 86.2881 129.395 87.6079 129.208 88.147 cv
129.109 88.4219 129.065 88.521 129.065 88.752 cv
129.065 89.2803 129.406 89.6104 129.857 89.6104 cv
130.88 89.6104 131.232 87.9712 131.232 87.9272 cv
cp
f
135.852 81.4702 mo
135.852 81.3491 135.753 81.25 135.632 81.25 cv
135.478 81.25 135.434 81.3604 135.401 81.4702 cv
131.65 91.832 li
131.595 91.9751 131.595 92.0303 131.595 92.0303 cv
131.595 92.1514 131.694 92.25 131.815 92.25 cv
131.969 92.25 132.013 92.1401 132.046 92.0303 cv
135.797 81.668 li
135.852 81.5249 135.852 81.4702 135.852 81.4702 cv
cp
f
141.661 87.6851 mo
141.661 87.3442 li
140.56 87.3442 li
140.56 82.3389 li
140.56 82.1191 140.56 82.0532 140.384 82.0532 cv
140.285 82.0532 140.252 82.0532 140.164 82.1851 cv
136.787 87.3442 li
136.787 87.6851 li
139.713 87.6851 li
139.713 88.6421 li
139.713 89.0381 139.691 89.1592 138.877 89.1592 cv
138.646 89.1592 li
138.646 89.5 li
139.097 89.4673 139.669 89.4673 140.131 89.4673 cv
140.593 89.4673 141.176 89.4673 141.627 89.5 cv
141.627 89.1592 li
141.396 89.1592 li
140.582 89.1592 140.56 89.0381 140.56 88.6421 cv
140.56 87.6851 li
141.661 87.6851 li
cp
139.779 87.3442 mo
137.095 87.3442 li
139.779 83.2412 li
139.779 87.3442 li
cp
f
145.158 86.75 mo
145.158 85.8921 145.038 84.561 144.432 83.3184 cv
143.772 81.9648 142.826 81.25 142.716 81.25 cv
142.606 81.3604 li
142.606 81.3931 142.606 81.415 142.815 81.6133 cv
143.893 82.7021 144.52 84.4512 144.52 86.75 cv
144.52 88.6309 144.113 90.5669 142.75 91.9531 cv
142.606 92.085 142.606 92.1069 142.606 92.1401 cv
142.716 92.25 li
142.826 92.25 143.816 91.502 144.465 90.105 cv
145.026 88.895 145.158 87.6738 145.158 86.75 cv
cp
f
167.708 88.3452 mo
167.554 88.1802 li
167.521 88.1802 167.51 88.1909 167.422 88.29 cv
166.839 89.082 166.014 89.3901 165.454 89.3901 cv
164.892 89.3901 164.595 88.895 164.595 88.2461 cv
164.595 87.7402 164.859 86.5303 165.222 85.9033 cv
165.596 85.2432 166.135 84.8691 166.608 84.8691 cv
166.674 84.8691 167.257 84.8691 167.411 85.397 cv
167.136 85.4082 166.894 85.6172 166.894 85.8809 cv
166.894 86.1563 167.136 86.2109 167.235 86.2109 cv
167.345 86.2109 167.752 86.145 167.752 85.5732 cv
167.752 85.0562 167.291 84.6489 166.62 84.6489 cv
165.277 84.6489 163.891 86.2002 163.891 87.8281 cv
163.891 88.9502 164.562 89.6104 165.442 89.6104 cv
166.806 89.6104 167.708 88.499 167.708 88.3452 cv
cp
f
159.041 86.75 mo
159.041 86.5303 158.832 86.5303 158.677 86.5303 cv
155.608 86.5303 li
155.608 83.4502 li
155.608 83.2959 155.608 83.0869 155.388 83.0869 cv
155.168 83.0869 155.168 83.2959 155.168 83.4502 cv
155.168 86.5303 li
152.088 86.5303 li
151.934 86.5303 151.725 86.5303 151.725 86.75 cv
151.725 86.9702 151.934 86.9702 152.088 86.9702 cv
155.168 86.9702 li
155.168 90.0498 li
155.168 90.2041 155.168 90.4131 155.388 90.4131 cv
155.608 90.4131 155.608 90.2041 155.608 90.0498 cv
155.608 86.9702 li
158.677 86.9702 li
158.832 86.9702 159.041 86.9702 159.041 86.75 cv
cp
f
152.591 58.4159 mo
153.269 66.6669 li
153.291 66.9421 153.533 67.1469 153.808 67.1243 cv
154.083 67.1017 154.288 66.8603 154.265 66.585 cv
153.588 58.3341 li
153.565 58.0588 153.324 57.8541 153.048 57.8767 cv
152.773 57.8993 152.568 58.1407 152.591 58.4159 cv
.746 .676 .668 .898 cmyk
f
154.256 72.6064 mo
156.008 66.4424 li
151.525 66.8105 li
154.256 72.6064 li
cp
f
154.256 72.6064 mo
154.737 72.7431 li
156.686 65.885 li
150.765 66.3712 li
154.373 74.0261 li
154.737 72.7431 li
154.256 72.6064 li
154.709 72.3933 li
152.285 67.2498 li
155.33 66.9997 li
153.775 72.4697 li
154.256 72.6064 li
154.709 72.3933 li
154.256 72.6064 li
cp
f
87.271 111.625 mo
125.271 111.625 li
125.271 132.625 li
87.271 132.625 li
87.271 111.625 li
0 0 0 0 cmyk
f
gsave
87.271 132.625 mo
125.271 132.625 li
125.271 111.625 li
87.271 111.625 li
87.271 132.625 li
clp
gsave
86.354 134.717 mo
126.519 134.717 li
126.519 112.866 li
86.354 112.866 li
86.354 134.717 li
clp
125.271 132.625 mo
124.94 132.625 li
124.94 131.718 li
124.94 132.625 li
124.406 132.625 li
123.926 132.125 li
124.406 132.625 li
123.185 132.625 li
123.103 132.196 123.022 131.675 122.938 131.06 cv
122.743 129.611 122.542 127.657 122.375 125.465 cv
122.244 125.838 122.103 126.203 121.954 126.556 cv
121.437 127.779 120.835 128.864 120.161 129.729 cv
119.705 130.304 119.231 130.793 118.599 131.149 cv
118.238 131.348 117.801 131.508 117.287 131.509 cv
117.286 131.509 li
117.283 131.509 li
117.282 131.509 117.28 131.509 117.279 131.509 cv
116.896 131.509 116.516 131.408 116.2 131.246 cv
115.882 131.084 115.624 130.87 115.412 130.641 cv
114.991 130.18 114.726 129.659 114.512 129.092 cv
114.097 127.96 113.905 126.597 113.901 125.099 cv
113.901 124.173 113.98 123.2 114.151 122.221 cv
114.291 121.416 114.357 120.607 114.357 119.853 cv
114.357 119.158 114.301 118.509 114.204 117.96 cv
114.109 117.416 113.968 116.969 113.836 116.696 cv
113.824 116.707 113.812 116.718 113.8 116.729 cv
113.524 116.983 113.16 117.439 112.812 118.015 cv
112.109 119.169 111.457 120.801 111.166 122.355 cv
110.926 123.62 110.536 124.887 110.065 126.053 cv
109.591 127.219 109.042 128.279 108.442 129.144 cv
108.037 129.721 107.623 130.215 107.098 130.614 cv
106.795 130.838 106.446 131.043 105.986 131.147 cv
105.984 131.147 li
105.831 131.181 105.67 131.199 105.507 131.199 cv
105.506 131.199 105.506 131.199 105.505 131.199 cv
105.502 131.199 105.499 131.199 105.496 131.199 cv
105.135 131.199 104.774 131.101 104.481 130.945 cv
104.181 130.789 103.946 130.584 103.757 130.372 cv
103.382 129.942 103.163 129.477 102.985 128.977 cv
102.644 127.979 102.495 126.794 102.492 125.463 cv
102.492 124.529 102.572 123.53 102.743 122.508 cv
102.882 121.679 102.947 120.839 102.947 120.055 cv
102.947 119.354 102.895 118.696 102.803 118.137 cv
102.726 117.655 102.615 117.245 102.504 116.956 cv
102.277 117.213 101.999 117.609 101.733 118.091 cv
101.086 119.248 100.487 120.9 100.223 122.502 cv
100.001 123.824 99.5905 125.119 99.0704 126.291 cv
98.5476 127.463 97.9222 128.51 97.209 129.346 cv
96.7286 129.901 96.2158 130.374 95.5714 130.707 cv
95.2032 130.893 94.7783 131.034 94.2986 131.05 cv
94.2958 131.05 li
94.2191 131.051 li
94.2165 131.051 94.2139 131.051 94.2112 131.051 cv
93.8471 131.051 93.4818 130.964 93.1682 130.816 cv
92.8506 130.668 92.5849 130.465 92.3657 130.244 cv
91.9283 129.798 91.6528 129.286 91.4358 128.733 cv
91.0131 127.628 90.8292 126.308 90.825 124.841 cv
90.8253 123.698 90.9465 122.472 91.2077 121.234 cv
91.4232 120.215 91.5216 119.232 91.5213 118.375 cv
91.5218 117.708 91.4609 117.118 91.3629 116.663 cv
91.3008 116.363 91.2167 116.124 91.1452 115.966 cv
90.7699 116.115 90.386 116.329 90.0714 116.561 cv
89.7133 116.814 89.4492 117.115 89.3636 117.25 cv
89.4778 118.903 li
87.271 119.055 li
87.271 115.064 li
87.4546 114.857 87.6552 114.664 87.87 114.479 cv
88.6353 113.83 89.5812 113.287 90.6359 112.972 cv
90.6365 112.972 li
90.8577 112.907 91.0947 112.868 91.3367 112.866 cv
91.3861 112.866 li
91.7102 112.869 92.0375 112.941 92.3252 113.068 cv
92.6224 113.197 92.8764 113.378 93.0862 113.578 cv
93.5055 113.981 93.7665 114.445 93.9673 114.937 cv
94.3583 115.921 94.5168 117.073 94.5213 118.375 cv
94.521 119.457 94.4 120.636 94.1429 121.855 cv
93.9257 122.881 93.8248 123.911 93.825 124.841 cv
93.8248 125.527 93.8801 126.159 93.9756 126.686 cv
94.0694 127.213 94.2093 127.635 94.3359 127.883 cv
94.3454 127.902 94.3549 127.921 94.3641 127.938 cv
94.4217 127.896 94.4883 127.843 94.5601 127.778 cv
94.863 127.509 95.2483 127.038 95.6114 126.445 cv
96.3461 125.258 97.0035 123.587 97.2637 122.007 cv
97.4805 120.713 97.8525 119.45 98.3141 118.31 cv
98.7786 117.169 99.3239 116.157 99.9476 115.345 cv
100.37 114.805 100.814 114.34 101.421 113.997 cv
101.768 113.805 102.192 113.652 102.689 113.651 cv
102.767 113.652 li
102.768 113.652 li
103.156 113.664 103.533 113.785 103.835 113.96 cv
104.141 114.136 104.379 114.357 104.574 114.588 cv
104.961 115.053 105.199 115.564 105.393 116.123 cv
105.769 117.238 105.944 118.58 105.947 120.055 cv
105.947 121.003 105.87 122.001 105.701 123.004 cv
105.558 123.86 105.492 124.701 105.492 125.463 cv
105.491 126.24 105.562 126.936 105.675 127.462 cv
105.696 127.565 105.719 127.661 105.744 127.75 cv
106.008 127.418 106.315 126.941 106.611 126.381 cv
107.292 125.099 107.923 123.377 108.219 121.798 cv
108.461 120.516 108.872 119.262 109.378 118.128 cv
109.886 116.994 110.482 115.984 111.153 115.175 cv
111.606 114.638 112.082 114.179 112.7 113.848 cv
113.052 113.663 113.469 113.518 113.952 113.508 cv
113.953 113.508 li
113.997 113.507 li
114 113.507 114.003 113.507 114.005 113.507 cv
114.385 113.507 114.761 113.606 115.074 113.766 cv
115.392 113.927 115.648 114.139 115.859 114.366 cv
116.279 114.824 116.541 115.34 116.753 115.901 cv
117.164 117.021 117.353 118.369 117.357 119.853 cv
117.357 120.779 117.277 121.754 117.106 122.736 cv
116.966 123.537 116.901 124.344 116.901 125.099 cv
116.9 126.006 116.997 126.839 117.152 127.475 cv
117.23 127.817 117.337 128.1 117.43 128.297 cv
117.435 128.292 117.44 128.287 117.445 128.282 cv
117.729 128.005 118.107 127.501 118.467 126.866 cv
119.196 125.594 119.877 123.794 120.193 122.057 cv
120.291 121.525 120.398 121.069 120.522 120.668 cv
120.65 120.265 120.781 119.92 121.008 119.567 cv
121.164 119.335 121.364 119.072 121.761 118.848 cv
121.983 118.725 122.281 118.633 122.592 118.633 cv
122.595 118.633 122.597 118.633 122.6 118.633 cv
122.602 118.633 122.604 118.633 122.606 118.633 cv
123.11 118.633 123.527 118.863 123.767 119.075 cv
124.019 119.294 124.161 119.507 124.281 119.712 cv
124.511 120.121 124.649 120.536 124.781 121.032 cv
124.989 121.833 125.151 122.843 125.271 124.085 cv
125.271 132.625 li
123.926 132.125 mo
123.926 132.125 li
123.926 132.125 li
105.42 128.565 mo
105.42 128.565 li
105.42 128.565 mo
105.42 128.565 li
94.2105 128.249 mo
94.2105 128.249 li
94.2105 128.249 mo
94.2105 128.249 li
123.523 121.202 mo
123.523 121.202 li
123.523 121.202 li
89.3514 117.074 mo
89.3528 117.094 li
89.3528 117.094 li
89.3514 117.074 li
102.768 113.652 mo
102.768 113.652 li
102.766 113.652 102.764 113.652 102.762 113.652 cv
102.768 113.652 li
113.951 113.508 mo
113.966 113.507 li
113.953 113.508 li
113.951 113.508 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
97.9771 121.411 mo
98.3071 119.42 li
98.3291 119.31 98.3291 119.288 98.3291 119.288 cv
98.3291 119.167 98.252 119.167 98.0649 119.167 cv
92.543 119.167 li
92.312 119.167 92.29 119.167 92.2354 119.343 cv
91.564 121.367 li
91.5313 121.51 li
91.5313 121.62 91.6411 121.62 91.6743 121.62 cv
91.7842 121.62 91.7949 121.609 91.8833 121.389 cv
92.4331 119.75 92.6753 119.486 94.1714 119.486 cv
94.5449 119.486 li
94.7983 119.486 94.7983 119.53 94.7983 119.607 cv
94.7544 119.838 li
93.269 125.789 li
93.1699 126.196 93.082 126.306 92.147 126.306 cv
92.0151 126.306 li
91.8169 126.306 91.7183 126.306 91.7183 126.515 cv
91.7183 126.625 91.8169 126.625 91.9053 126.625 cv
93.4673 126.603 li
95.062 126.625 li
95.1724 126.625 95.293 126.625 95.293 126.427 cv
95.293 126.306 95.2163 126.306 95.0293 126.306 cv
94.897 126.306 li
94.71 126.306 94.5342 126.295 94.3579 126.273 cv
94.1489 126.251 94.0391 126.24 94.0391 126.064 cv
94.0391 126.009 94.0391 125.987 94.061 125.877 cv
95.5571 119.893 li
95.6343 119.585 95.7002 119.53 95.7881 119.508 cv
95.8652 119.486 96.1841 119.486 96.3823 119.486 cv
97.3394 119.486 97.79 119.552 97.79 120.311 cv
97.79 120.641 97.7021 121.202 97.6689 121.378 cv
97.647 121.499 li
97.647 121.62 97.7573 121.62 97.8013 121.62 cv
97.9331 121.62 97.9443 121.587 97.9771 121.411 cv
cp
0 0 0 1 cmyk
f
100.958 129.265 mo
100.958 129.232 100.958 129.21 100.771 129.023 cv
99.396 127.637 99.0439 125.558 99.0439 123.875 cv
99.0439 121.961 99.4619 120.047 100.815 118.672 cv
100.958 118.54 100.958 118.518 100.958 118.485 cv
100.848 118.375 li
100.738 118.375 99.748 119.123 99.0991 120.52 cv
98.5381 121.73 98.4063 122.951 98.4063 123.875 cv
98.4063 124.733 98.5273 126.064 99.1323 127.307 cv
99.792 128.66 100.738 129.375 100.848 129.375 cv
100.958 129.265 li
cp
f
107.899 125.052 mo
107.899 124.953 107.8 124.953 107.756 124.953 cv
107.624 124.953 107.613 124.986 107.569 125.151 cv
107.47 125.525 107.173 126.515 106.557 126.515 cv
106.392 126.515 106.304 126.438 106.304 126.185 cv
106.304 125.921 106.425 125.58 106.513 125.36 cv
106.799 124.557 107.173 123.534 107.173 122.896 cv
107.173 122.313 106.92 121.774 106.073 121.774 cv
105.391 121.774 104.874 122.17 104.511 122.665 cv
104.478 122.17 104.137 121.774 103.631 121.774 cv
103.378 121.774 103.092 121.884 102.861 122.357 cv
102.652 122.764 102.509 123.446 102.509 123.446 cv
102.509 123.534 102.564 123.556 102.663 123.556 cv
102.784 123.556 102.795 123.545 102.861 123.292 cv
103.026 122.643 103.235 121.994 103.609 121.994 cv
103.895 121.994 103.895 122.313 103.895 122.445 cv
103.895 122.654 103.851 122.896 103.807 123.05 cv
103.004 126.262 li
102.96 126.416 102.96 126.427 102.96 126.471 cv
102.96 126.603 103.048 126.735 103.246 126.735 cv
103.499 126.735 103.609 126.537 103.653 126.35 cv
104.324 123.644 li
104.39 123.402 104.984 121.994 106.04 121.994 cv
106.546 121.994 106.546 122.544 106.546 122.731 cv
106.546 123.413 106.062 124.733 105.875 125.272 cv
105.776 125.547 105.732 125.646 105.732 125.877 cv
105.732 126.405 106.073 126.735 106.524 126.735 cv
107.547 126.735 107.899 125.096 107.899 125.052 cv
cp
f
112.519 118.595 mo
112.519 118.474 112.42 118.375 112.299 118.375 cv
112.145 118.375 112.101 118.485 112.068 118.595 cv
108.317 128.957 li
108.262 129.1 108.262 129.155 108.262 129.155 cv
108.262 129.276 108.361 129.375 108.482 129.375 cv
108.636 129.375 108.68 129.265 108.713 129.155 cv
112.464 118.793 li
112.519 118.65 112.519 118.595 112.519 118.595 cv
cp
f
118.173 124.777 mo
118.173 124.381 118.052 123.886 117.634 123.424 cv
117.425 123.193 117.249 123.083 116.545 122.643 cv
117.337 122.236 117.876 121.664 117.876 120.938 cv
117.876 119.926 116.897 119.299 115.896 119.299 cv
114.796 119.299 113.905 120.113 113.905 121.136 cv
113.905 121.334 113.927 121.829 114.389 122.346 cv
114.51 122.478 114.917 122.753 115.192 122.94 cv
114.554 123.259 113.608 123.875 113.608 124.964 cv
113.608 126.13 114.73 126.867 115.885 126.867 cv
117.128 126.867 118.173 125.954 118.173 124.777 cv
cp
117.392 120.938 mo
117.392 121.565 116.963 122.093 116.303 122.478 cv
114.939 121.598 li
114.433 121.268 114.389 120.894 114.389 120.707 cv
114.389 120.036 115.104 119.574 115.885 119.574 cv
116.688 119.574 117.392 120.146 117.392 120.938 cv
cp
117.623 125.173 mo
117.623 125.987 116.798 126.559 115.896 126.559 cv
114.95 126.559 114.158 125.877 114.158 124.964 cv
114.158 124.326 114.51 123.622 115.445 123.105 cv
116.798 123.963 li
117.106 124.172 117.623 124.502 117.623 125.173 cv
cp
f
121.825 123.875 mo
121.825 123.017 121.704 121.686 121.099 120.443 cv
120.439 119.09 119.493 118.375 119.383 118.375 cv
119.273 118.485 li
119.273 118.518 119.273 118.54 119.482 118.738 cv
120.56 119.827 121.187 121.576 121.187 123.875 cv
121.187 125.756 120.78 127.692 119.416 129.078 cv
119.273 129.21 119.273 129.232 119.273 129.265 cv
119.383 129.375 li
119.493 129.375 120.483 128.627 121.132 127.23 cv
121.693 126.02 121.825 124.799 121.825 123.875 cv
cp
f
146.322 125.47 mo
146.168 125.305 li
146.135 125.305 146.125 125.316 146.036 125.415 cv
145.454 126.207 144.628 126.515 144.067 126.515 cv
143.506 126.515 143.209 126.02 143.209 125.371 cv
143.209 124.865 143.473 123.655 143.836 123.028 cv
144.21 122.368 144.75 121.994 145.222 121.994 cv
145.289 121.994 145.872 121.994 146.025 122.522 cv
145.75 122.533 145.508 122.742 145.508 123.006 cv
145.508 123.281 145.75 123.336 145.849 123.336 cv
145.959 123.336 146.366 123.27 146.366 122.698 cv
146.366 122.181 145.904 121.774 145.233 121.774 cv
143.891 121.774 142.505 123.325 142.505 124.953 cv
142.505 126.075 143.176 126.735 144.056 126.735 cv
145.42 126.735 146.322 125.624 146.322 125.47 cv
cp
f
136.378 123.875 mo
136.378 123.655 136.169 123.655 136.015 123.655 cv
132.946 123.655 li
132.946 120.575 li
132.946 120.421 132.946 120.212 132.726 120.212 cv
132.506 120.212 132.506 120.421 132.506 120.575 cv
132.506 123.655 li
129.426 123.655 li
129.272 123.655 129.063 123.655 129.063 123.875 cv
129.063 124.095 129.272 124.095 129.426 124.095 cv
132.506 124.095 li
132.506 127.175 li
132.506 127.329 132.506 127.538 132.726 127.538 cv
132.946 127.538 132.946 127.329 132.946 127.175 cv
132.946 124.095 li
136.015 124.095 li
136.169 124.095 136.378 124.095 136.378 123.875 cv
cp
f
129.955 95.5403 mo
130.622 103.79 li
130.644 104.066 130.885 104.271 131.16 104.248 cv
131.436 104.226 131.641 103.985 131.618 103.71 cv
130.951 95.4597 li
130.929 95.1845 130.688 94.9794 130.413 95.0016 cv
130.138 95.0239 129.932 95.265 129.955 95.5403 cv
.746 .676 .668 .898 cmyk
f
131.604 109.731 mo
133.363 103.569 li
128.878 103.933 li
131.604 109.731 li
cp
f
131.604 109.731 mo
132.085 109.869 li
134.042 103.013 li
128.119 103.492 li
131.719 111.151 li
132.085 109.869 li
131.604 109.731 li
132.056 109.519 li
129.637 104.373 li
132.684 104.126 li
131.123 109.594 li
131.604 109.731 li
132.056 109.519 li
131.604 109.731 li
cp
f
162.604 .249971 mo
189.604 .249971 li
189.604 21.25 li
162.604 21.25 li
162.604 .249971 li
0 0 0 0 cmyk
f
gsave
162.605 21.25 mo
189.605 21.25 li
189.605 .249971 li
162.605 .249971 li
162.605 21.25 li
clp
gsave
161.403 20.0898 mo
189.75 20.0898 li
189.75 1.45309 li
161.403 1.45309 li
161.403 20.0898 li
clp
189.604 16.3618 mo
189.604 13.5108 li
189.604 13.5126 189.605 13.5141 189.605 13.5158 cv
189.605 16.3602 li
189.604 16.3618 li
.410611 .142345 0 0 cmyk
f
180.225 20.0898 mo
180.157 20.0898 li
179.81 20.0851 179.465 19.9952 179.174 19.85 cv
178.872 19.7 178.627 19.5001 178.427 19.2881 cv
178.031 18.8597 177.792 18.3854 177.602 17.8766 cv
177.233 16.86 177.073 15.6564 177.069 14.3139 cv
177.07 13.3518 177.159 12.3249 177.352 11.2806 cv
177.344 11.3202 li
177.351 11.2814 li
177.492 10.5196 177.558 9.73851 177.558 8.99646 cv
177.558 8.26532 177.493 7.57144 177.381 6.97721 cv
177.27 6.38361 177.105 5.88858 176.946 5.57426 cv
176.903 5.48786 176.861 5.41599 176.823 5.35909 cv
176.785 5.38818 176.742 5.4235 176.695 5.46541 cv
176.433 5.69858 176.083 6.13095 175.753 6.69006 cv
175.084 7.80926 174.479 9.4267 174.232 11.0311 cv
174.231 11.0314 li
174.02 12.3791 173.635 13.7039 173.15 14.9046 cv
172.663 16.106 172.083 17.1789 171.422 18.0399 cv
170.975 18.6125 170.503 19.1028 169.882 19.4636 cv
169.526 19.6654 169.102 19.8275 168.606 19.8485 cv
168.6 19.8486 li
168.605 19.8485 li
168.509 19.8503 li
168.506 19.8503 168.504 19.8503 168.501 19.8503 cv
168.127 19.8503 167.757 19.758 167.443 19.6059 cv
167.124 19.4532 166.861 19.2478 166.642 19.0252 cv
166.207 18.576 165.927 18.0609 165.703 17.5015 cv
165.266 16.383 165.064 15.0409 165.06 13.5682 cv
165.06 12.7237 165.132 11.8403 165.286 10.9486 cv
165.286 10.9488 li
165.43 10.1174 165.498 9.26726 165.498 8.47248 cv
165.499 7.57448 165.41 6.74422 165.267 6.1087 cv
165.168 5.63525 165.013 5.27075 164.919 5.09919 cv
164.511 5.04014 164.121 4.9543 163.757 4.84821 cv
163.34 4.72473 162.963 4.5831 162.605 4.38683 cv
162.605 1.70363 li
163.819 2.02355 li
164.017 1.73854 li
164.058 1.76258 li
164.226 1.84033 li
164.52 1.96366 165.033 2.10022 165.533 2.15376 cv
165.541 2.15465 li
165.533 2.15376 li
165.914 2.19514 166.267 2.33956 166.546 2.52474 cv
166.827 2.71063 167.044 2.93147 167.223 3.15999 cv
167.577 3.61989 167.799 4.11939 167.98 4.66509 cv
168.331 5.75336 168.495 7.05336 168.498 8.47248 cv
168.498 9.43563 168.417 10.448 168.242 11.4603 cv
168.242 11.4605 li
168.118 12.1761 168.06 12.8942 168.06 13.5682 cv
168.06 14.3834 168.146 15.1358 168.287 15.7275 cv
168.382 16.1404 168.513 16.4735 168.622 16.6825 cv
168.647 16.6596 168.673 16.6344 168.7 16.6071 cv
168.981 16.3295 169.345 15.8355 169.689 15.2155 cv
170.384 13.9738 171.011 12.2288 171.268 10.5672 cv
171.268 10.5675 li
171.474 9.24912 171.852 7.97558 172.334 6.83323 cv
172.818 5.69035 173.399 4.68118 174.074 3.87549 cv
174.529 3.34061 175.022 2.88258 175.659 2.5654 cv
176.022 2.38764 176.448 2.25895 176.92 2.2585 cv
177.025 2.2585 177.132 2.26502 177.238 2.27852 cv
177.238 2.27843 li
177.615 2.32553 177.968 2.46128 178.262 2.64163 cv
178.558 2.82234 178.801 3.04363 179.006 3.28037 cv
179.414 3.75645 179.69 4.29607 179.912 4.8861 cv
180.346 6.06464 180.555 7.47492 180.558 8.99646 cv
180.558 9.91511 180.477 10.8707 180.302 11.8241 cv
180.302 11.8249 li
180.143 12.6854 180.069 13.5394 180.069 14.3139 cv
180.069 15.1128 180.149 15.8297 180.276 16.3614 cv
180.309 16.5127 180.349 16.6483 180.39 16.765 cv
180.689 16.4359 181.062 15.9025 181.422 15.2539 cv
182.166 13.9222 182.868 12.1006 183.219 10.3883 cv
183.208 10.4422 li
183.219 10.3878 li
183.365 9.68078 183.534 9.0685 183.732 8.53549 cv
183.934 8.00176 184.153 7.54713 184.477 7.13164 cv
184.696 6.85844 184.97 6.58496 185.391 6.38852 cv
185.627 6.27934 185.915 6.20584 186.214 6.20584 cv
186.216 6.20584 186.218 6.20584 186.219 6.20585 cv
186.224 6.20582 186.228 6.2058 186.232 6.2058 cv
186.781 6.2058 187.269 6.45909 187.571 6.73358 cv
187.887 7.01466 188.085 7.31843 188.252 7.63686 cv
188.577 8.27426 188.781 9.0121 188.946 9.94219 cv
189.16 11.1723 189.391 12.4172 189.604 13.5108 cv
189.604 16.3618 li
188.151 18.6721 li
187.922 18.5229 187.83 18.4025 187.759 18.3165 cv
187.627 18.1166 li
187.571 18.0165 187.548 17.9567 187.525 17.9029 cv
187.484 17.7991 187.462 17.7251 187.437 17.6431 cv
187.389 17.4833 187.344 17.3057 187.291 17.0882 cv
187.188 16.6564 187.062 16.0783 186.921 15.3927 cv
186.678 14.2091 186.391 12.7108 186.118 11.1795 cv
185.838 12.466 185.418 13.7395 184.922 14.9056 cv
184.401 16.1284 183.803 17.228 183.154 18.1126 cv
182.715 18.7024 182.269 19.2027 181.697 19.5929 cv
181.368 19.8114 180.981 20.0057 180.485 20.0717 cv
180.4 20.0825 180.312 20.0887 180.225 20.0898 cv
180.162 17.5123 mo
180.162 17.5123 li
180.162 17.5123 mo
180.162 17.5123 li
168.502 17.2327 mo
168.502 17.2327 li
168.502 17.2327 mo
168.502 17.2327 li
165.201 5.13536 mo
165.201 5.13536 li
165.201 5.13536 li
163.927 2.05215 mo
163.927 2.05216 li
164.152 1.87599 li
163.927 2.05215 li
.411765 .141176 0 0 cmyk
f
189.604 16.8824 mo
189.604 16.3618 li
189.605 16.3602 li
189.605 16.8816 li
189.604 16.8824 li
.410611 .142345 0 0 cmyk
f
188.964 17.38 mo
188.964 17.38 li
189.604 16.3618 li
189.604 16.8824 li
188.964 17.38 li
.411765 .141176 0 0 cmyk
f
189.604 17.0576 mo
189.604 16.8824 li
189.605 16.8816 li
189.605 17.0571 li
189.604 17.0576 li
.410611 .142345 0 0 cmyk
f
189.051 17.3118 mo
189.051 17.3118 li
189.604 16.8824 li
189.604 17.0576 li
189.051 17.3118 li
.411765 .141176 0 0 cmyk
f
189.604 17.0708 mo
189.604 17.0576 li
189.605 17.0571 li
189.605 17.0704 li
189.604 17.0708 li
.410611 .142345 0 0 cmyk
f
189.465 17.1214 mo
189.465 17.1214 li
189.604 17.0576 li
189.604 17.0708 li
189.465 17.1214 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
173.31 10.0361 mo
173.64 8.04492 li
173.663 7.93506 173.663 7.91309 173.663 7.91309 cv
173.663 7.79199 173.585 7.79199 173.398 7.79199 cv
167.876 7.79199 li
167.645 7.79199 167.624 7.79199 167.568 7.96777 cv
166.897 9.99219 li
166.864 10.1353 li
166.864 10.2451 166.974 10.2451 167.007 10.2451 cv
167.117 10.2451 167.128 10.2339 167.216 10.0142 cv
167.766 8.375 168.008 8.11133 169.504 8.11133 cv
169.878 8.11133 li
170.131 8.11133 170.131 8.15527 170.131 8.23193 cv
170.087 8.46289 li
168.602 14.4141 li
168.503 14.8213 168.416 14.9312 167.48 14.9312 cv
167.348 14.9312 li
167.15 14.9312 167.051 14.9312 167.051 15.1401 cv
167.051 15.25 167.15 15.25 167.238 15.25 cv
168.8 15.228 li
170.395 15.25 li
170.505 15.25 170.626 15.25 170.626 15.0522 cv
170.626 14.9312 170.549 14.9312 170.362 14.9312 cv
170.23 14.9312 li
170.043 14.9312 169.867 14.9199 169.691 14.8979 cv
169.482 14.876 169.373 14.8652 169.373 14.689 cv
169.373 14.6338 169.373 14.6123 169.394 14.502 cv
170.89 8.51807 li
170.967 8.20996 171.033 8.15527 171.122 8.13281 cv
171.198 8.11133 171.517 8.11133 171.715 8.11133 cv
172.672 8.11133 173.124 8.17725 173.124 8.93604 cv
173.124 9.26611 173.035 9.82715 173.002 10.0029 cv
172.98 10.124 li
172.98 10.2451 173.09 10.2451 173.134 10.2451 cv
173.266 10.2451 173.277 10.2119 173.31 10.0361 cv
cp
0 0 0 1 cmyk
f
176.292 17.8901 mo
176.292 17.8569 176.292 17.835 176.104 17.6479 cv
174.729 16.2622 174.377 14.1831 174.377 12.5 cv
174.377 10.5859 174.795 8.67188 176.148 7.29688 cv
176.292 7.16504 176.292 7.14307 176.292 7.10986 cv
176.181 7 li
176.071 7 175.082 7.74805 174.432 9.14502 cv
173.872 10.355 173.739 11.5762 173.739 12.5 cv
173.739 13.3579 173.86 14.689 174.465 15.9321 cv
175.125 17.2852 176.071 18 176.181 18 cv
176.292 17.8901 li
cp
f
183.232 13.6772 mo
183.232 13.5781 183.133 13.5781 183.089 13.5781 cv
182.958 13.5781 182.946 13.6113 182.902 13.7759 cv
182.803 14.1499 182.506 15.1401 181.89 15.1401 cv
181.725 15.1401 181.637 15.063 181.637 14.8101 cv
181.637 14.5459 181.758 14.2051 181.846 13.9849 cv
182.132 13.1821 182.506 12.1592 182.506 11.521 cv
182.506 10.938 182.253 10.3989 181.406 10.3989 cv
180.724 10.3989 180.208 10.7949 179.844 11.29 cv
179.811 10.7949 179.47 10.3989 178.964 10.3989 cv
178.711 10.3989 178.425 10.5088 178.194 10.9819 cv
177.985 11.3892 177.842 12.0713 177.842 12.0713 cv
177.842 12.1592 177.897 12.1812 177.997 12.1812 cv
178.117 12.1812 178.128 12.1699 178.194 11.917 cv
178.359 11.2681 178.568 10.6191 178.942 10.6191 cv
179.228 10.6191 179.228 10.938 179.228 11.0703 cv
179.228 11.2793 179.184 11.521 179.14 11.6748 cv
178.337 14.8872 li
178.293 15.041 178.293 15.0522 178.293 15.0962 cv
178.293 15.228 178.381 15.3599 178.579 15.3599 cv
178.833 15.3599 178.942 15.1621 178.986 14.9751 cv
179.657 12.269 li
179.723 12.0273 180.317 10.6191 181.374 10.6191 cv
181.879 10.6191 181.879 11.1689 181.879 11.356 cv
181.879 12.0381 181.395 13.3579 181.208 13.897 cv
181.109 14.1719 181.065 14.271 181.065 14.502 cv
181.065 15.0303 181.406 15.3599 181.857 15.3599 cv
182.88 15.3599 183.232 13.7212 183.232 13.6772 cv
cp
f
186.158 12.5 mo
186.158 11.6421 186.038 10.311 185.432 9.06787 cv
184.772 7.71484 183.826 7 183.716 7 cv
183.606 7.10986 li
183.606 7.14307 183.606 7.16504 183.815 7.36328 cv
184.893 8.45215 185.52 10.2012 185.52 12.5 cv
185.52 14.3809 185.113 16.3169 183.75 17.7031 cv
183.606 17.835 183.606 17.8569 183.606 17.8901 cv
183.716 18 li
183.826 18 184.816 17.252 185.465 15.855 cv
186.026 14.645 186.158 13.4238 186.158 12.5 cv
cp
f
176.121 21.2746 mo
176.527 29.5085 li
176.541 29.7843 176.776 29.9969 177.051 29.9833 cv
177.327 29.9697 177.54 29.7351 177.526 29.4592 cv
177.12 21.2254 li
177.106 20.9496 176.872 20.737 176.596 20.7506 cv
176.32 20.7642 176.108 20.9988 176.121 21.2746 cv
.746 .676 .668 .898 cmyk
f
177.322 35.4775 mo
179.274 29.3735 li
174.78 29.5957 li
177.322 35.4775 li
cp
f
177.322 35.4775 mo
177.798 35.6298 li
179.97 28.8385 li
174.034 29.1319 li
177.392 36.8997 li
177.798 35.6298 li
177.322 35.4775 li
177.781 35.2791 li
175.524 30.0595 li
178.578 29.9085 li
176.846 35.3252 li
177.322 35.4775 li
177.781 35.2791 li
177.322 35.4775 li
cp
f
22.8511 252.507 mo
48.8511 252.507 li
48.8511 273.507 li
22.8511 273.507 li
22.8511 252.507 li
0 0 0 0 cmyk
f
gsave
22.8511 273.507 mo
48.8501 273.507 li
48.8501 252.506 li
22.8511 252.506 li
22.8511 273.507 li
clp
gsave
21.9912 274.593 mo
50.4854 274.593 li
50.4854 253.315 li
21.9912 253.315 li
21.9912 274.593 li
clp
48.8501 273.507 mo
47.434 273.507 li
47.4332 273.505 47.4325 273.503 47.4317 273.502 cv
47.341 273.282 47.28 273.079 47.2115 272.832 cv
47.0788 272.345 46.9396 271.712 46.7888 270.937 cv
46.4898 269.395 46.154 267.309 45.8511 265.02 cv
45.6563 265.791 45.4215 266.54 45.1584 267.249 cv
44.674 268.549 44.1028 269.708 43.4581 270.635 cv
43.021 271.252 42.5685 271.777 41.9505 272.178 cv
41.5969 272.401 41.1613 272.591 40.6301 272.616 cv
40.6233 272.617 li
40.6203 272.617 li
40.5334 272.618 li
40.53 272.618 40.5266 272.618 40.5231 272.618 cv
40.1534 272.618 39.7818 272.519 39.477 272.358 cv
39.1668 272.195 38.9208 271.982 38.7231 271.759 cv
38.3301 271.307 38.0986 270.812 37.9126 270.278 cv
37.5532 269.211 37.3993 267.935 37.3956 266.505 cv
37.396 265.272 37.5202 263.935 37.7879 262.583 cv
38.0031 261.499 38.1025 260.429 38.1023 259.479 cv
38.1029 258.649 38.0251 257.909 37.8999 257.351 cv
37.8468 257.098 37.7776 256.883 37.7126 256.719 cv
37.6593 256.767 37.6021 256.822 37.5424 256.883 cv
37.1965 257.236 36.7735 257.8 36.3672 258.481 cv
35.5479 259.846 34.7821 261.691 34.4068 263.398 cv
34.1063 264.752 33.651 266.086 33.1159 267.294 cv
32.5783 268.503 31.9683 269.581 31.3073 270.441 cv
30.8599 271.014 30.4061 271.498 29.8114 271.867 cv
29.4702 272.072 29.0605 272.251 28.5475 272.279 cv
28.5422 272.279 li
28.5366 272.279 li
28.437 272.281 li
28.434 272.281 28.4311 272.281 28.4281 272.281 cv
28.0796 272.281 27.728 272.193 27.4337 272.047 cv
27.1348 271.899 26.8926 271.702 26.6974 271.493 cv
26.3087 271.072 26.0796 270.609 25.8983 270.117 cv
25.5477 269.133 25.4024 267.979 25.3985 266.689 cv
25.3988 265.584 25.5159 264.39 25.768 263.18 cv
25.9814 262.16 26.0822 261.1 26.0818 260.134 cv
26.082 259.475 26.035 258.86 25.9522 258.337 cv
25.871 257.816 25.7489 257.385 25.6333 257.12 cv
25.5981 257.037 25.5631 256.971 25.5352 256.924 cv
25.0292 256.818 24.5176 256.704 24.0649 256.598 cv
23.5646 256.481 23.1491 256.377 22.8511 256.291 cv
22.8511 254.45 li
23.5274 253.315 li
23.6824 253.407 li
23.7779 253.435 li
23.9353 253.479 24.1687 253.538 24.4406 253.604 cv
24.986 253.736 25.6924 253.894 26.3562 254.03 cv
26.3549 254.03 li
26.7074 254.101 27.0241 254.256 27.2778 254.442 cv
27.5333 254.629 27.7331 254.844 27.8988 255.066 cv
28.228 255.514 28.4372 255.996 28.6052 256.519 cv
28.9325 257.562 29.0791 258.791 29.0818 260.134 cv
29.0815 261.305 28.963 262.555 28.7047 263.793 cv
28.4954 264.794 28.3982 265.799 28.3984 266.689 cv
28.3981 267.361 28.4544 267.97 28.5478 268.449 cv
28.5815 268.63 28.6226 268.792 28.6649 268.931 cv
28.9434 268.623 29.2859 268.146 29.619 267.569 cv
30.3722 266.275 31.0985 264.472 31.4779 262.749 cv
31.7808 261.385 32.2584 260.027 32.8279 258.783 cv
33.3995 257.54 34.0575 256.416 34.7663 255.511 cv
35.2439 254.908 35.7331 254.397 36.3278 254.007 cv
36.6695 253.787 37.0567 253.599 37.5347 253.521 cv
37.5355 253.521 li
37.6568 253.502 37.782 253.491 37.9088 253.491 cv
37.9118 253.491 37.9148 253.491 37.9178 253.491 cv
38.2759 253.491 38.6365 253.581 38.9405 253.731 cv
39.2491 253.882 39.5015 254.085 39.7065 254.302 cv
40.1151 254.741 40.3619 255.232 40.5576 255.759 cv
40.9369 256.813 41.0982 258.068 41.1023 259.479 cv
41.102 260.635 40.9839 261.888 40.7307 263.166 cv
40.5018 264.319 40.3953 265.476 40.3956 266.505 cv
40.395 267.359 40.47 268.127 40.5929 268.713 cv
40.6338 268.922 40.685 269.108 40.7367 269.263 cv
41.0076 268.938 41.3385 268.427 41.6518 267.806 cv
42.3587 266.418 43.0018 264.48 43.2811 262.617 cv
43.3736 262.008 43.4811 261.485 43.6125 261.027 cv
43.7479 260.567 43.8928 260.175 44.1433 259.784 cv
44.3147 259.528 44.5396 259.244 44.9546 259.02 cv
45.1866 258.896 45.4867 258.809 45.792 258.809 cv
45.7948 258.809 45.7976 258.809 45.8004 258.809 cv
45.8027 258.809 45.8049 258.809 45.8071 258.809 cv
46.2346 258.809 46.6118 258.971 46.8637 259.149 cv
47.1228 259.331 47.2922 259.527 47.4326 259.718 cv
47.7068 260.102 47.8786 260.496 48.0443 260.959 cv
48.365 261.877 48.6177 263.073 48.8225 264.606 cv
48.8317 264.676 48.8409 264.745 48.8501 264.814 cv
48.8501 272.863 li
48.3599 271.71 li
48.8501 272.863 li
48.8501 273.507 li
48.7994 272.909 mo
48.7995 272.909 li
47.9512 271.97 li
48.7994 272.909 li
47.5274 272.694 mo
48.6023 272.876 li
48.6022 272.876 li
47.5274 272.694 li
47.5274 272.694 mo
47.5274 272.694 li
47.5274 272.694 li
47.9512 271.97 mo
47.9512 271.97 li
47.9512 271.97 li
48.3599 271.71 mo
48.3599 271.71 li
48.3599 271.71 li
40.5207 270.043 mo
40.5207 270.043 li
40.5207 270.043 mo
40.5207 270.043 li
28.4298 269.876 mo
28.4298 269.876 li
28.4298 269.876 mo
28.4298 269.876 li
28.327 269.512 mo
28.327 269.512 li
28.327 269.512 mo
28.327 269.512 li
45.0063 261.482 mo
45.006 261.482 li
45.0063 261.482 li
45.0063 261.482 li
25.4782 256.839 mo
25.4781 256.839 li
25.4782 256.839 li
25.4782 256.839 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
33.3315 262.293 mo
33.6616 260.302 li
33.6836 260.192 33.6836 260.17 33.6836 260.17 cv
33.6836 260.049 33.6064 260.049 33.4194 260.049 cv
27.8975 260.049 li
27.6665 260.049 27.6445 260.049 27.5898 260.225 cv
26.9185 262.249 li
26.8857 262.392 li
26.8857 262.502 26.9956 262.502 27.0288 262.502 cv
27.1387 262.502 27.1494 262.491 27.2378 262.271 cv
27.7876 260.632 28.0298 260.368 29.5254 260.368 cv
29.8994 260.368 li
30.1528 260.368 30.1528 260.412 30.1528 260.489 cv
30.1084 260.72 li
28.6235 266.671 li
28.5244 267.078 28.4365 267.188 27.5015 267.188 cv
27.3696 267.188 li
27.1714 267.188 27.0728 267.188 27.0728 267.397 cv
27.0728 267.507 27.1714 267.507 27.2598 267.507 cv
28.8218 267.485 li
30.4165 267.507 li
30.5269 267.507 30.6475 267.507 30.6475 267.309 cv
30.6475 267.188 30.5708 267.188 30.3838 267.188 cv
30.2515 267.188 li
30.0645 267.188 29.8887 267.177 29.7124 267.155 cv
29.5034 267.133 29.3936 267.122 29.3936 266.946 cv
29.3936 266.891 29.3936 266.869 29.4155 266.759 cv
30.9116 260.775 li
30.9888 260.467 31.0547 260.412 31.1426 260.39 cv
31.2197 260.368 31.5386 260.368 31.7368 260.368 cv
32.6938 260.368 33.1445 260.434 33.1445 261.193 cv
33.1445 261.523 33.0566 262.084 33.0234 262.26 cv
33.0015 262.381 li
33.0015 262.502 33.1118 262.502 33.1558 262.502 cv
33.2876 262.502 33.2988 262.469 33.3315 262.293 cv
cp
0 0 0 1 cmyk
f
36.3125 270.147 mo
36.3125 270.114 36.3125 270.092 36.1255 269.905 cv
34.7505 268.519 34.3984 266.44 34.3984 264.757 cv
34.3984 262.843 34.8164 260.929 36.1694 259.554 cv
36.3125 259.422 36.3125 259.4 36.3125 259.367 cv
36.2026 259.257 li
36.0928 259.257 35.1025 260.005 34.4536 261.402 cv
33.8926 262.612 33.7607 263.833 33.7607 264.757 cv
33.7607 265.615 33.8818 266.946 34.4868 268.189 cv
35.1465 269.542 36.0928 270.257 36.2026 270.257 cv
36.3125 270.147 li
cp
f
41.5596 267.507 mo
41.5596 267.166 li
41.2075 267.166 li
40.2178 267.166 40.1846 267.045 40.1846 266.638 cv
40.1846 260.467 li
40.1846 260.203 40.1846 260.181 39.9316 260.181 cv
39.2495 260.885 38.2817 260.885 37.9297 260.885 cv
37.9297 261.226 li
38.1494 261.226 38.7988 261.226 39.3706 260.94 cv
39.3706 266.638 li
39.3706 267.034 39.3374 267.166 38.3477 267.166 cv
37.9956 267.166 li
37.9956 267.507 li
38.3804 267.474 39.3374 267.474 39.7778 267.474 cv
40.2178 267.474 41.1748 267.474 41.5596 267.507 cv
cp
f
45.6294 264.757 mo
45.6294 263.899 45.5088 262.568 44.9038 261.325 cv
44.2437 259.972 43.2979 259.257 43.1875 259.257 cv
43.0776 259.367 li
43.0776 259.4 43.0776 259.422 43.2866 259.62 cv
44.3647 260.709 44.9917 262.458 44.9917 264.757 cv
44.9917 266.638 44.5845 268.574 43.2207 269.96 cv
43.0776 270.092 43.0776 270.114 43.0776 270.147 cv
43.1875 270.257 li
43.2979 270.257 44.2876 269.509 44.9365 268.112 cv
45.4976 266.902 45.6294 265.681 45.6294 264.757 cv
cp
f
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
108.625 149.624 mo
108.779 149.624 108.906 149.676 109.006 149.78 cv
109.107 149.884 109.157 150.015 109.157 150.172 cv
109.157 150.319 109.104 150.446 108.999 150.553 cv
108.893 150.661 108.769 150.714 108.625 150.714 cv
108.479 150.714 108.349 150.657 108.236 150.542 cv
108.123 150.428 108.066 150.295 108.066 150.145 cv
108.066 150.005 108.122 149.884 108.233 149.78 cv
108.344 149.676 108.475 149.624 108.625 149.624 cv
105.606 152.643 mo
105.761 152.643 105.89 152.695 105.993 152.798 cv
106.097 152.902 106.149 153.031 106.149 153.185 cv
106.149 153.332 106.096 153.46 105.991 153.569 cv
105.885 153.679 105.759 153.733 105.612 153.733 cv
105.465 153.733 105.336 153.679 105.225 153.569 cv
105.114 153.46 105.059 153.334 105.059 153.19 cv
105.059 153.044 105.113 152.916 105.223 152.807 cv
105.332 152.697 105.46 152.643 105.606 152.643 cv
102.534 155.688 mo
102.692 155.688 102.824 155.742 102.932 155.849 cv
103.039 155.957 103.093 156.089 103.093 156.247 cv
103.093 156.394 103.039 156.519 102.932 156.623 cv
102.824 156.727 102.695 156.778 102.545 156.778 cv
102.398 156.778 102.271 156.723 102.164 156.612 cv
102.056 156.501 102.002 156.369 102.002 156.214 cv
102.002 156.075 102.056 155.952 102.161 155.847 cv
102.267 155.741 102.391 155.688 102.534 155.688 cv
f
105.797 132.626 mo
105.816 140.143 li
105.817 140.419 106.041 140.643 106.317 140.642 cv
106.593 140.641 106.817 140.417 106.816 140.141 cv
106.797 132.624 li
106.796 132.348 106.572 132.124 106.296 132.125 cv
106.019 132.126 105.796 132.35 105.797 132.626 cv
.746 .676 .668 .898 cmyk
f
106.33 146.142 mo
108.565 140.137 li
104.065 140.146 li
106.33 146.142 li
cp
f
106.33 146.142 mo
106.799 146.316 li
109.285 139.635 li
103.342 139.648 li
106.334 147.566 li
106.799 146.316 li
106.33 146.142 li
106.798 145.965 li
104.788 140.645 li
107.845 140.638 li
105.861 145.967 li
106.33 146.142 li
106.798 145.965 li
106.33 146.142 li
cp
f
57.0036 234.13 mo
56.7497 244.597 li
56.743 244.873 56.9613 245.102 57.2374 245.109 cv
57.5134 245.115 57.7427 244.897 57.7494 244.621 cv
58.0033 234.155 li
58.01 233.879 57.7916 233.649 57.5155 233.643 cv
57.2395 233.636 57.0103 233.854 57.0036 234.13 cv
f
57.103 250.607 mo
59.498 244.664 li
54.999 244.555 li
57.103 250.607 li
cp
f
57.103 250.607 mo
57.5668 250.794 li
60.2315 244.181 li
54.2898 244.037 li
57.0685 252.031 li
57.5668 250.794 li
57.103 250.607 li
57.5753 250.443 li
55.7082 245.072 li
58.7646 245.146 li
56.6393 250.421 li
57.103 250.607 li
57.5753 250.443 li
57.103 250.607 li
cp
f
grestore
70.3984 266.352 mo
70.2446 266.187 li
70.2114 266.187 70.2007 266.198 70.1123 266.297 cv
69.5293 267.089 68.7046 267.397 68.1436 267.397 cv
67.5825 267.397 67.2856 266.902 67.2856 266.253 cv
67.2856 265.747 67.5493 264.537 67.9126 263.91 cv
68.2866 263.25 68.8257 262.876 69.2983 262.876 cv
69.3647 262.876 69.9478 262.876 70.1016 263.404 cv
69.8267 263.415 69.5845 263.624 69.5845 263.888 cv
69.5845 264.163 69.8267 264.218 69.9253 264.218 cv
70.0356 264.218 70.4424 264.152 70.4424 263.58 cv
70.4424 263.063 69.9805 262.656 69.3096 262.656 cv
67.9673 262.656 66.5815 264.207 66.5815 265.835 cv
66.5815 266.957 67.2524 267.617 68.1323 267.617 cv
69.4966 267.617 70.3984 266.506 70.3984 266.352 cv
cp
f
60.4546 264.757 mo
60.4546 264.537 60.2456 264.537 60.0913 264.537 cv
57.0225 264.537 li
57.0225 261.457 li
57.0225 261.303 57.0225 261.094 56.8027 261.094 cv
56.5825 261.094 56.5825 261.303 56.5825 261.457 cv
56.5825 264.537 li
53.5024 264.537 li
53.3486 264.537 53.1396 264.537 53.1396 264.757 cv
53.1396 264.977 53.3486 264.977 53.5024 264.977 cv
56.5825 264.977 li
56.5825 268.057 li
56.5825 268.211 56.5825 268.42 56.8027 268.42 cv
57.0225 268.42 57.0225 268.211 57.0225 268.057 cv
57.0225 264.977 li
60.0913 264.977 li
60.2456 264.977 60.4546 264.977 60.4546 264.757 cv
cp
f
16.1245 343.176 mo
15.9707 343.011 li
15.9375 343.011 15.9268 343.021 15.8384 343.121 cv
15.2554 343.913 14.4307 344.221 13.8696 344.221 cv
13.3086 344.221 13.0117 343.726 13.0117 343.077 cv
13.0117 342.571 13.2754 341.361 13.6387 340.733 cv
14.0127 340.074 14.5518 339.7 15.0244 339.7 cv
15.0903 339.7 15.6733 339.7 15.8276 340.228 cv
15.5527 340.239 15.3105 340.448 15.3105 340.712 cv
15.3105 340.987 15.5527 341.042 15.6514 341.042 cv
15.7617 341.042 16.1685 340.976 16.1685 340.404 cv
16.1685 339.887 15.7065 339.479 15.0356 339.479 cv
13.6934 339.479 12.3076 341.031 12.3076 342.659 cv
12.3076 343.781 12.9785 344.44 13.8584 344.44 cv
15.2227 344.44 16.1245 343.33 16.1245 343.176 cv
cp
f
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
35.3507 273.495 mo
35.1266 282.683 li
35.1199 282.959 35.3382 283.188 35.6143 283.195 cv
35.8903 283.201 36.1196 282.983 36.1263 282.707 cv
36.3504 273.519 li
36.3572 273.243 36.1388 273.014 35.8628 273.007 cv
35.5867 273 35.3575 273.219 35.3507 273.495 cv
.746 .676 .668 .898 cmyk
f
35.48 288.692 mo
37.876 282.75 li
33.377 282.64 li
35.48 288.692 li
cp
f
35.48 288.692 mo
35.9437 288.879 li
38.6095 282.267 li
32.6679 282.122 li
35.4452 290.116 li
35.9437 288.879 li
35.48 288.692 li
35.9523 288.528 li
34.0861 283.157 li
37.1424 283.232 li
35.0163 288.505 li
35.48 288.692 li
35.9523 288.528 li
35.48 288.692 li
cp
f
grestore
231.677 51.2202 mo
231.523 51.0552 li
231.49 51.0552 231.479 51.0659 231.391 51.165 cv
230.808 51.957 229.983 52.2651 229.421 52.2651 cv
228.861 52.2651 228.564 51.77 228.564 51.1211 cv
228.564 50.6152 228.828 49.4053 229.191 48.7783 cv
229.565 48.1182 230.104 47.7441 230.577 47.7441 cv
230.643 47.7441 231.226 47.7441 231.379 48.272 cv
231.105 48.2832 230.863 48.4922 230.863 48.7559 cv
230.863 49.0313 231.105 49.0859 231.204 49.0859 cv
231.314 49.0859 231.721 49.02 231.721 48.4482 cv
231.721 47.9312 231.259 47.5239 230.587 47.5239 cv
229.246 47.5239 227.86 49.0752 227.86 50.7031 cv
227.86 51.8252 228.531 52.4849 229.411 52.4849 cv
230.775 52.4849 231.677 51.374 231.677 51.2202 cv
cp
f
228.838 87.5859 mo
228.564 87.5859 li
228.509 87.916 228.432 88.3999 228.322 88.5649 cv
228.245 88.6533 227.519 88.6533 227.277 88.6533 cv
225.296 88.6533 li
226.462 87.52 li
228.179 86.002 228.838 85.4082 228.838 84.3081 cv
228.838 83.0542 227.849 82.1738 226.506 82.1738 cv
225.264 82.1738 224.45 83.186 224.45 84.165 cv
224.45 84.7813 225 84.7813 225.033 84.7813 cv
225.22 84.7813 225.605 84.6489 225.605 84.1982 cv
225.605 83.9121 225.407 83.626 225.022 83.626 cv
224.878 83.6372 li
225.131 82.9219 225.726 82.5151 226.364 82.5151 cv
227.365 82.5151 227.837 83.4063 227.837 84.3081 cv
227.837 85.188 227.288 86.0571 226.683 86.7393 cv
224.571 89.0928 li
224.45 89.2139 224.45 89.2363 224.45 89.5 cv
228.531 89.5 li
228.838 87.5859 li
cp
f
234.427 88.3452 mo
234.273 88.1802 li
234.24 88.1802 234.229 88.1909 234.141 88.29 cv
233.558 89.082 232.733 89.3901 232.171 89.3901 cv
231.611 89.3901 231.314 88.895 231.314 88.2461 cv
231.314 87.7402 231.578 86.5303 231.941 85.9033 cv
232.315 85.2432 232.854 84.8691 233.327 84.8691 cv
233.393 84.8691 233.976 84.8691 234.129 85.397 cv
233.855 85.4082 233.613 85.6172 233.613 85.8809 cv
233.613 86.1563 233.855 86.2109 233.954 86.2109 cv
234.064 86.2109 234.471 86.145 234.471 85.5732 cv
234.471 85.0562 234.009 84.6489 233.337 84.6489 cv
231.996 84.6489 230.61 86.2002 230.61 87.8281 cv
230.61 88.9502 231.281 89.6099 232.161 89.6099 cv
233.525 89.6099 234.427 88.499 234.427 88.3452 cv
cp
f
228.927 124.744 mo
228.927 123.842 228.234 122.984 227.09 122.753 cv
227.992 122.456 228.629 121.686 228.629 120.817 cv
228.629 119.915 227.662 119.299 226.606 119.299 cv
225.495 119.299 224.659 119.959 224.659 120.795 cv
224.659 121.158 224.901 121.367 225.22 121.367 cv
225.561 121.367 225.781 121.125 225.781 120.806 cv
225.781 120.256 225.264 120.256 225.099 120.256 cv
225.44 119.717 226.166 119.574 226.562 119.574 cv
227.013 119.574 227.618 119.816 227.618 120.806 cv
227.618 120.938 227.596 121.576 227.31 122.06 cv
226.98 122.588 226.606 122.621 226.331 122.632 cv
225.902 122.665 li
225.814 122.676 225.737 122.687 225.737 122.797 cv
225.737 122.918 225.814 122.918 226 122.918 cv
226.485 122.918 li
227.387 122.918 227.793 123.666 227.793 124.744 cv
227.793 126.24 227.035 126.559 226.551 126.559 cv
226.078 126.559 225.252 126.372 224.868 125.723 cv
225.252 125.778 225.594 125.536 225.594 125.118 cv
225.594 124.722 225.296 124.502 224.978 124.502 cv
224.713 124.502 224.362 124.656 224.362 125.14 cv
224.362 126.141 225.385 126.867 226.583 126.867 cv
227.926 126.867 228.927 125.866 228.927 124.744 cv
cp
f
234.427 125.47 mo
234.273 125.305 li
234.24 125.305 234.229 125.316 234.141 125.415 cv
233.558 126.207 232.733 126.515 232.171 126.515 cv
231.611 126.515 231.314 126.02 231.314 125.371 cv
231.314 124.865 231.578 123.655 231.941 123.028 cv
232.315 122.368 232.854 121.994 233.327 121.994 cv
233.393 121.994 233.976 121.994 234.129 122.522 cv
233.855 122.533 233.613 122.742 233.613 123.006 cv
233.613 123.281 233.855 123.336 233.954 123.336 cv
234.064 123.336 234.471 123.27 234.471 122.698 cv
234.471 122.181 234.009 121.774 233.337 121.774 cv
231.996 121.774 230.61 123.325 230.61 124.953 cv
230.61 126.075 231.281 126.735 232.161 126.735 cv
233.525 126.735 234.427 125.624 234.427 125.47 cv
cp
f
211.876 270.648 mo
211.876 270.615 211.876 270.593 211.69 270.406 cv
210.315 269.02 209.962 266.941 209.962 265.258 cv
209.962 263.344 210.38 261.43 211.734 260.055 cv
211.876 259.923 211.876 259.901 211.876 259.868 cv
211.767 259.758 li
211.657 259.758 210.667 260.506 210.018 261.903 cv
209.457 263.113 209.325 264.334 209.325 265.258 cv
209.325 266.116 209.446 267.447 210.051 268.69 cv
210.71 270.043 211.657 270.758 211.767 270.758 cv
211.876 270.648 li
cp
f
215.32 268.008 mo
215.32 267.667 li
214.583 267.667 214.461 267.667 214.461 267.172 cv
214.461 260.374 li
212.877 260.495 li
212.877 260.836 li
213.648 260.836 213.736 260.913 213.736 261.452 cv
213.736 267.172 li
213.736 267.667 213.615 267.667 212.877 267.667 cv
212.877 268.008 li
214.099 267.975 li
215.32 268.008 li
cp
f
220.753 265.654 mo
220.753 264.246 219.654 263.08 218.323 263.08 cv
216.948 263.08 215.88 264.279 215.88 265.654 cv
215.88 267.073 217.025 268.129 218.312 268.129 cv
219.643 268.129 220.753 267.051 220.753 265.654 cv
cp
219.84 265.566 mo
219.84 265.962 219.84 266.556 219.599 267.04 cv
219.357 267.535 218.873 267.854 218.323 267.854 cv
217.85 267.854 217.366 267.623 217.069 267.117 cv
216.793 266.633 216.793 265.962 216.793 265.566 cv
216.793 265.137 216.793 264.543 217.058 264.059 cv
217.355 263.553 217.872 263.322 218.312 263.322 cv
218.795 263.322 219.269 263.564 219.555 264.037 cv
219.84 264.51 219.84 265.148 219.84 265.566 cv
cp
f
226.408 263.564 mo
226.408 263.377 226.276 263.025 225.847 263.025 cv
225.626 263.025 225.143 263.091 224.681 263.542 cv
224.219 263.179 223.756 263.146 223.515 263.146 cv
222.492 263.146 221.733 263.905 221.733 264.752 cv
221.733 265.236 221.975 265.654 222.25 265.885 cv
222.107 266.05 221.909 266.413 221.909 266.798 cv
221.909 267.139 222.052 267.557 222.393 267.777 cv
221.733 267.964 221.38 268.437 221.38 268.877 cv
221.38 269.669 222.47 270.274 223.812 270.274 cv
225.11 270.274 226.253 269.713 226.253 268.855 cv
226.253 268.47 226.1 267.909 225.539 267.601 cv
224.956 267.293 224.318 267.293 223.647 267.293 cv
223.372 267.293 222.899 267.293 222.822 267.282 cv
222.47 267.238 222.239 266.897 222.239 266.545 cv
222.239 266.501 222.239 266.248 222.426 266.028 cv
222.855 266.336 223.306 266.369 223.515 266.369 cv
224.538 266.369 225.296 265.61 225.296 264.763 cv
225.296 264.356 225.121 263.949 224.846 263.696 cv
225.242 263.322 225.638 263.267 225.835 263.267 cv
225.946 263.278 li
225.825 263.322 225.77 263.443 225.77 263.575 cv
225.77 263.762 225.913 263.894 226.088 263.894 cv
226.199 263.894 226.408 263.817 226.408 263.564 cv
cp
224.472 264.752 mo
224.472 265.049 224.46 265.401 224.295 265.676 cv
224.208 265.808 223.955 266.116 223.515 266.116 cv
222.558 266.116 222.558 265.016 222.558 264.763 cv
222.558 264.466 222.569 264.114 222.734 263.839 cv
222.822 263.707 223.075 263.399 223.515 263.399 cv
224.472 263.399 224.472 264.499 224.472 264.752 cv
cp
225.682 268.877 mo
225.682 269.471 224.901 270.021 223.823 270.021 cv
222.711 270.021 221.953 269.46 221.953 268.877 cv
221.953 268.371 222.371 267.964 222.855 267.931 cv
223.503 267.931 li
224.45 267.931 225.682 267.931 225.682 268.877 cv
cp
f
230.613 271.446 mo
230.388 271.446 li
230.343 271.716 230.28 272.112 230.19 272.247 cv
230.127 272.319 229.534 272.319 229.335 272.319 cv
227.715 272.319 li
228.669 271.392 li
230.073 270.15 230.613 269.664 230.613 268.764 cv
230.613 267.738 229.803 267.018 228.706 267.018 cv
227.688 267.018 227.022 267.846 227.022 268.647 cv
227.022 269.151 227.472 269.151 227.5 269.151 cv
227.652 269.151 227.967 269.043 227.967 268.674 cv
227.967 268.44 227.805 268.206 227.491 268.206 cv
227.374 268.215 li
227.581 267.63 228.066 267.297 228.588 267.297 cv
229.407 267.297 229.794 268.026 229.794 268.764 cv
229.794 269.484 229.344 270.195 228.849 270.753 cv
227.122 272.679 li
227.022 272.778 227.022 272.796 227.022 273.012 cv
230.361 273.012 li
230.613 271.446 li
cp
f
241.039 266.439 mo
241.039 266.34 240.939 266.34 240.895 266.34 cv
240.763 266.34 240.752 266.373 240.708 266.538 cv
240.609 266.912 240.312 267.902 239.696 267.902 cv
239.531 267.902 239.443 267.825 239.443 267.572 cv
239.443 267.308 239.564 266.967 239.652 266.747 cv
239.938 265.944 240.312 264.921 240.312 264.283 cv
240.312 263.7 240.059 263.161 239.212 263.161 cv
238.53 263.161 238.013 263.557 237.65 264.052 cv
237.618 263.557 237.276 263.161 236.77 263.161 cv
236.517 263.161 236.231 263.271 236 263.744 cv
235.792 264.151 235.648 264.833 235.648 264.833 cv
235.648 264.921 235.704 264.943 235.802 264.943 cv
235.923 264.943 235.934 264.932 236 264.679 cv
236.166 264.03 236.375 263.381 236.749 263.381 cv
237.035 263.381 237.035 263.7 237.035 263.832 cv
237.035 264.041 236.991 264.283 236.946 264.437 cv
236.143 267.649 li
236.099 267.803 236.099 267.814 236.099 267.858 cv
236.099 267.99 236.187 268.122 236.385 268.122 cv
236.638 268.122 236.749 267.924 236.792 267.737 cv
237.463 265.031 li
237.529 264.789 238.124 263.381 239.179 263.381 cv
239.685 263.381 239.685 263.931 239.685 264.118 cv
239.685 264.8 239.202 266.12 239.014 266.659 cv
238.916 266.934 238.872 267.033 238.872 267.264 cv
238.872 267.792 239.212 268.122 239.664 268.122 cv
240.686 268.122 241.039 266.483 241.039 266.439 cv
cp
f
243.964 265.262 mo
243.964 264.404 243.843 263.073 243.238 261.83 cv
242.579 260.477 241.632 259.762 241.522 259.762 cv
241.413 259.872 li
241.413 259.905 241.413 259.927 241.622 260.125 cv
242.7 261.214 243.327 262.963 243.327 265.262 cv
243.327 267.143 242.919 269.079 241.555 270.465 cv
241.413 270.597 241.413 270.619 241.413 270.652 cv
241.522 270.762 li
241.632 270.762 242.623 270.014 243.271 268.617 cv
243.833 267.407 243.964 266.186 243.964 265.262 cv
cp
f
250.091 266.857 mo
249.937 266.692 li
249.904 266.692 249.893 266.703 249.805 266.802 cv
249.222 267.594 248.397 267.902 247.836 267.902 cv
247.275 267.902 246.978 267.407 246.978 266.758 cv
246.978 266.252 247.243 265.042 247.605 264.415 cv
247.979 263.755 248.518 263.381 248.991 263.381 cv
249.057 263.381 249.64 263.381 249.794 263.909 cv
249.519 263.92 249.277 264.129 249.277 264.393 cv
249.277 264.668 249.519 264.723 249.619 264.723 cv
249.728 264.723 250.135 264.657 250.135 264.085 cv
250.135 263.568 249.673 263.161 249.002 263.161 cv
247.661 263.161 246.274 264.712 246.274 266.34 cv
246.274 267.462 246.945 268.122 247.826 268.122 cv
249.189 268.122 250.091 267.011 250.091 266.857 cv
cp
f
201.185 308.437 mo
201.185 308.403 201.185 308.382 200.999 308.194 cv
199.624 306.809 199.271 304.73 199.271 303.047 cv
199.271 301.133 199.689 299.219 201.042 297.844 cv
201.185 297.712 201.185 297.69 201.185 297.657 cv
201.076 297.547 li
200.965 297.547 199.975 298.295 199.327 299.692 cv
198.765 300.902 198.633 302.123 198.633 303.047 cv
198.633 303.905 198.754 305.236 199.359 306.479 cv
200.019 307.832 200.965 308.547 201.076 308.547 cv
201.185 308.437 li
cp
f
204.628 305.797 mo
204.628 305.456 li
203.891 305.456 203.77 305.456 203.77 304.961 cv
203.77 298.163 li
202.186 298.284 li
202.186 298.625 li
202.957 298.625 203.044 298.702 203.044 299.241 cv
203.044 304.961 li
203.044 305.456 202.923 305.456 202.186 305.456 cv
202.186 305.797 li
203.407 305.764 li
204.628 305.797 li
cp
f
210.062 303.443 mo
210.062 302.035 208.962 300.869 207.631 300.869 cv
206.256 300.869 205.189 302.068 205.189 303.443 cv
205.189 304.862 206.333 305.918 207.621 305.918 cv
208.952 305.918 210.062 304.84 210.062 303.443 cv
cp
209.149 303.355 mo
209.149 303.751 209.149 304.345 208.907 304.829 cv
208.666 305.324 208.181 305.643 207.631 305.643 cv
207.159 305.643 206.674 305.412 206.377 304.906 cv
206.102 304.422 206.102 303.751 206.102 303.355 cv
206.102 302.926 206.102 302.332 206.366 301.848 cv
206.664 301.342 207.18 301.111 207.621 301.111 cv
208.104 301.111 208.578 301.353 208.863 301.826 cv
209.149 302.299 209.149 302.937 209.149 303.355 cv
cp
f
215.716 301.353 mo
215.716 301.166 215.584 300.814 215.155 300.814 cv
214.935 300.814 214.452 300.88 213.989 301.331 cv
213.527 300.968 213.065 300.935 212.823 300.935 cv
211.8 300.935 211.042 301.694 211.042 302.541 cv
211.042 303.025 211.284 303.443 211.558 303.674 cv
211.416 303.839 211.217 304.202 211.217 304.587 cv
211.217 304.928 211.36 305.346 211.702 305.566 cv
211.042 305.753 210.689 306.226 210.689 306.666 cv
210.689 307.458 211.778 308.063 213.121 308.063 cv
214.418 308.063 215.562 307.502 215.562 306.644 cv
215.562 306.259 215.409 305.698 214.847 305.39 cv
214.264 305.082 213.626 305.082 212.956 305.082 cv
212.68 305.082 212.208 305.082 212.13 305.071 cv
211.778 305.027 211.547 304.686 211.547 304.334 cv
211.547 304.29 211.547 304.037 211.734 303.817 cv
212.164 304.125 212.614 304.158 212.823 304.158 cv
213.846 304.158 214.605 303.399 214.605 302.552 cv
214.605 302.145 214.429 301.738 214.154 301.485 cv
214.55 301.111 214.946 301.056 215.144 301.056 cv
215.254 301.067 li
215.133 301.111 215.079 301.232 215.079 301.364 cv
215.079 301.551 215.221 301.683 215.397 301.683 cv
215.507 301.683 215.716 301.606 215.716 301.353 cv
cp
213.78 302.541 mo
213.78 302.838 213.769 303.19 213.604 303.465 cv
213.516 303.597 213.263 303.905 212.823 303.905 cv
211.866 303.905 211.866 302.805 211.866 302.552 cv
211.866 302.255 211.877 301.903 212.042 301.628 cv
212.13 301.496 212.383 301.188 212.823 301.188 cv
213.78 301.188 213.78 302.288 213.78 302.541 cv
cp
214.991 306.666 mo
214.991 307.26 214.209 307.81 213.131 307.81 cv
212.02 307.81 211.261 307.249 211.261 306.666 cv
211.261 306.16 211.679 305.753 212.164 305.72 cv
212.812 305.72 li
213.758 305.72 214.991 305.72 214.991 306.666 cv
cp
f
219.921 309.231 mo
219.697 309.231 li
219.651 309.501 219.588 309.897 219.499 310.032 cv
219.435 310.104 218.841 310.104 218.643 310.104 cv
217.023 310.104 li
217.977 309.177 li
219.381 307.935 219.921 307.449 219.921 306.549 cv
219.921 305.523 219.112 304.803 218.013 304.803 cv
216.997 304.803 216.331 305.631 216.331 306.432 cv
216.331 306.936 216.781 306.936 216.807 306.936 cv
216.96 306.936 217.275 306.828 217.275 306.459 cv
217.275 306.225 217.114 305.991 216.798 305.991 cv
216.681 306 li
216.888 305.415 217.375 305.082 217.896 305.082 cv
218.715 305.082 219.102 305.811 219.102 306.549 cv
219.102 307.269 218.653 307.979 218.158 308.538 cv
216.429 310.464 li
216.331 310.563 216.331 310.581 216.331 310.797 cv
219.669 310.797 li
219.921 309.231 li
cp
f
230.346 304.224 mo
230.346 304.125 230.248 304.125 230.204 304.125 cv
230.072 304.125 230.06 304.158 230.016 304.323 cv
229.917 304.697 229.621 305.687 229.004 305.687 cv
228.839 305.687 228.751 305.61 228.751 305.357 cv
228.751 305.093 228.873 304.752 228.96 304.532 cv
229.247 303.729 229.621 302.706 229.621 302.068 cv
229.621 301.485 229.368 300.946 228.52 300.946 cv
227.838 300.946 227.322 301.342 226.958 301.837 cv
226.925 301.342 226.584 300.946 226.079 300.946 cv
225.826 300.946 225.54 301.056 225.308 301.529 cv
225.099 301.936 224.957 302.618 224.957 302.618 cv
224.957 302.706 225.011 302.728 225.11 302.728 cv
225.231 302.728 225.243 302.717 225.308 302.464 cv
225.473 301.815 225.682 301.166 226.056 301.166 cv
226.342 301.166 226.342 301.485 226.342 301.617 cv
226.342 301.826 226.298 302.068 226.254 302.222 cv
225.452 305.434 li
225.408 305.588 225.408 305.599 225.408 305.643 cv
225.408 305.775 225.496 305.907 225.693 305.907 cv
225.947 305.907 226.056 305.709 226.1 305.522 cv
226.771 302.816 li
226.837 302.574 227.431 301.166 228.487 301.166 cv
228.994 301.166 228.994 301.716 228.994 301.903 cv
228.994 302.585 228.509 303.905 228.323 304.444 cv
228.223 304.719 228.179 304.818 228.179 305.049 cv
228.179 305.577 228.52 305.907 228.971 305.907 cv
229.995 305.907 230.346 304.268 230.346 304.224 cv
cp
f
241.687 303.047 mo
241.687 302.827 241.478 302.827 241.325 302.827 cv
238.255 302.827 li
238.255 299.747 li
238.255 299.593 238.255 299.384 238.036 299.384 cv
237.815 299.384 237.815 299.593 237.815 299.747 cv
237.815 302.827 li
234.735 302.827 li
234.582 302.827 234.373 302.827 234.373 303.047 cv
234.373 303.267 234.582 303.267 234.735 303.267 cv
237.815 303.267 li
237.815 306.347 li
237.815 306.501 237.815 306.71 238.036 306.71 cv
238.255 306.71 238.255 306.501 238.255 306.347 cv
238.255 303.267 li
241.325 303.267 li
241.478 303.267 241.687 303.267 241.687 303.047 cv
cp
f
250.586 305.797 mo
250.586 305.456 li
250.234 305.456 li
249.245 305.456 249.211 305.335 249.211 304.928 cv
249.211 298.757 li
249.211 298.493 249.211 298.471 248.958 298.471 cv
248.276 299.175 247.308 299.175 246.957 299.175 cv
246.957 299.516 li
247.176 299.516 247.826 299.516 248.397 299.23 cv
248.397 304.928 li
248.397 305.324 248.365 305.456 247.375 305.456 cv
247.022 305.456 li
247.022 305.797 li
247.408 305.764 248.365 305.764 248.804 305.764 cv
249.245 305.764 250.202 305.764 250.586 305.797 cv
cp
f
254.657 303.047 mo
254.657 302.189 254.536 300.858 253.93 299.615 cv
253.27 298.262 252.325 297.547 252.214 297.547 cv
252.104 297.657 li
252.104 297.69 252.104 297.712 252.313 297.91 cv
253.391 298.999 254.018 300.748 254.018 303.047 cv
254.018 304.928 253.612 306.864 252.248 308.25 cv
252.104 308.382 252.104 308.404 252.104 308.437 cv
252.214 308.547 li
252.325 308.547 253.314 307.799 253.963 306.402 cv
254.524 305.192 254.657 303.971 254.657 303.047 cv
cp
f
260.784 304.642 mo
260.629 304.477 li
260.596 304.477 260.585 304.488 260.498 304.587 cv
259.915 305.379 259.089 305.687 258.528 305.687 cv
257.967 305.687 257.67 305.192 257.67 304.543 cv
257.67 304.037 257.934 302.827 258.297 302.2 cv
258.671 301.54 259.21 301.166 259.683 301.166 cv
259.75 301.166 260.333 301.166 260.486 301.694 cv
260.211 301.705 259.969 301.914 259.969 302.178 cv
259.969 302.453 260.211 302.508 260.31 302.508 cv
260.42 302.508 260.828 302.442 260.828 301.87 cv
260.828 301.353 260.366 300.946 259.694 300.946 cv
258.352 300.946 256.966 302.497 256.966 304.125 cv
256.966 305.247 257.637 305.907 258.517 305.907 cv
259.881 305.907 260.784 304.796 260.784 304.642 cv
cp
f
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
229.052 149.812 mo
229.207 149.812 229.336 149.866 229.443 149.973 cv
229.547 150.081 229.601 150.209 229.601 150.36 cv
229.601 150.51 229.547 150.639 229.443 150.744 cv
229.336 150.85 229.208 150.902 229.059 150.902 cv
228.908 150.902 228.78 150.849 228.671 150.741 cv
228.565 150.634 228.509 150.507 228.509 150.36 cv
228.509 150.209 228.565 150.081 228.671 149.973 cv
228.78 149.866 228.907 149.812 229.052 149.812 cv
229.046 152.895 mo
229.198 152.888 229.326 152.937 229.434 153.043 cv
229.541 153.148 229.595 153.278 229.595 153.432 cv
229.595 153.579 229.542 153.708 229.44 153.819 cv
229.335 153.93 229.213 153.985 229.074 153.985 cv
228.917 153.985 228.782 153.932 228.671 153.824 cv
228.561 153.717 228.504 153.588 228.504 153.437 cv
228.504 153.294 228.557 153.17 228.663 153.064 cv
228.769 152.959 228.897 152.902 229.046 152.895 cv
229.042 155.962 mo
229.193 155.962 229.32 156.015 229.423 156.121 cv
229.528 156.226 229.579 156.354 229.579 156.504 cv
229.579 156.651 229.528 156.778 229.423 156.886 cv
229.32 156.993 229.198 157.047 229.059 157.047 cv
228.905 157.047 228.772 156.992 228.66 156.88 cv
228.549 156.77 228.494 156.639 228.494 156.488 cv
228.494 156.353 228.549 156.23 228.66 156.123 cv
228.772 156.016 228.899 155.962 229.042 155.962 cv
f
48.0029 178.552 mo
89.0029 178.552 li
89.0029 202.552 li
48.0029 202.552 li
48.0029 178.552 li
0 0 0 0 cmyk
f
grestore
gsave
48.0029 202.552 mo
89.0029 202.552 li
89.0029 178.552 li
48.0029 178.552 li
48.0029 202.552 li
clp
gsave
47.1904 202.099 mo
88.6939 202.099 li
88.6939 179.263 li
47.1904 179.263 li
47.1904 202.099 li
clp
65.2947 202.099 mo
64.9126 202.099 64.5293 201.997 64.2126 201.831 cv
63.8907 201.663 63.6331 201.441 63.4245 201.207 cv
63.0096 200.732 62.7591 200.204 62.5577 199.628 cv
62.1675 198.477 61.997 197.084 61.9933 195.52 cv
61.9936 194.179 62.1289 192.723 62.4201 191.25 cv
62.7232 189.718 62.8666 188.133 62.8661 186.744 cv
62.8663 185.988 62.8239 185.29 62.7473 184.698 cv
62.7005 184.331 62.6386 184.003 62.5713 183.735 cv
62.346 184.05 62.0893 184.478 61.8399 184.981 cv
61.1255 186.407 60.4401 188.434 60.073 190.488 cv
59.7868 192.078 59.34 193.67 58.8098 195.121 cv
58.2778 196.573 57.6687 197.879 57.0165 198.92 cv
56.5744 199.616 56.1336 200.198 55.5576 200.662 cv
55.2259 200.921 54.8307 201.165 54.2813 201.258 cv
54.2746 201.259 li
54.1684 201.275 54.0586 201.284 53.9475 201.284 cv
53.9469 201.284 53.9464 201.284 53.9458 201.284 cv
53.9412 201.284 53.9367 201.284 53.9321 201.284 cv
53.5233 201.284 53.1179 201.15 52.8127 200.956 cv
52.4997 200.761 52.2736 200.521 52.0945 200.28 cv
51.7411 199.793 51.5414 199.278 51.3747 198.704 cv
51.0544 197.561 50.912 196.157 50.9092 194.561 cv
50.9094 193.139 51.0308 191.576 51.2918 189.986 cv
51.5441 188.449 51.6615 186.933 51.6612 185.62 cv
51.6662 184.233 51.5173 183.049 51.3269 182.415 cv
51.1185 182.478 50.9153 182.548 50.7306 182.621 cv
50.5196 182.701 50.3268 182.792 50.1885 182.865 cv
50.1196 183.177 li
48.0029 182.711 li
48.0029 180.732 li
48.0862 180.659 48.1676 180.597 48.2493 180.538 cv
48.5359 180.336 48.8336 180.179 49.1645 180.027 cv
49.8231 179.728 50.6013 179.469 51.406 179.304 cv
51.5283 179.279 51.6565 179.265 51.7867 179.263 cv
51.8581 179.263 li
52.2544 179.27 52.6452 179.407 52.9323 179.598 cv
53.2348 179.796 53.4452 180.031 53.61 180.264 cv
53.9337 180.733 54.1083 181.215 54.2556 181.752 cv
54.5369 182.818 54.6585 184.124 54.6612 185.62 cv
54.661 187.109 54.5308 188.771 54.2522 190.472 cv
54.0178 191.898 53.9089 193.31 53.9092 194.561 cv
53.909 195.364 53.9542 196.101 54.0349 196.722 cv
54.0833 197.101 54.1469 197.438 54.2158 197.715 cv
54.5182 197.292 54.8688 196.687 55.2067 195.975 cv
55.997 194.321 56.7402 192.084 57.1204 189.957 cv
57.3972 188.419 57.817 186.926 58.3144 185.592 cv
58.8144 184.257 59.3832 183.087 60.0121 182.16 cv
60.44 181.543 60.872 181.022 61.4851 180.621 cv
61.8355 180.398 62.2832 180.202 62.8376 180.199 cv
62.8381 180.199 62.8385 180.199 62.8389 180.199 cv
62.9869 180.199 63.1404 180.214 63.2923 180.247 cv
63.3074 180.25 li
63.2906 180.247 li
63.6692 180.327 63.9972 180.51 64.245 180.716 cv
64.4955 180.924 64.6788 181.154 64.829 181.387 cv
65.1257 181.855 65.3059 182.349 65.453 182.895 cv
65.7382 183.981 65.8639 185.287 65.8661 186.744 cv
65.8657 188.335 65.7063 190.093 65.3631 191.832 cv
65.1104 193.107 64.993 194.383 64.9933 195.52 cv
64.9931 196.283 65.0462 196.984 65.1398 197.572 cv
65.2221 198.098 65.3417 198.535 65.4592 198.827 cv
65.4935 198.79 65.5293 198.75 65.5659 198.706 cv
65.928 198.284 66.3792 197.577 66.8096 196.707 cv
67.6785 194.964 68.4894 192.564 68.892 190.243 cv
69.4484 187.084 70.444 184.048 71.5147 182.01 cv
71.8793 181.326 72.2433 180.751 72.695 180.268 cv
72.9583 179.994 73.2502 179.735 73.6884 179.541 cv
73.9213 179.441 74.2055 179.365 74.5234 179.365 cv
74.7529 179.378 li
74.7517 179.378 li
75.2025 179.428 75.5908 179.637 75.8582 179.865 cv
76.1319 180.096 76.3155 180.346 76.4664 180.597 cv
76.7617 181.1 76.9387 181.634 77.0883 182.239 cv
77.3776 183.442 77.5152 184.932 77.5172 186.584 cv
77.517 187.89 77.4265 189.289 77.23 190.686 cv
77.0588 191.904 76.9789 193.134 76.9791 194.262 cv
76.9755 195.542 77.0884 196.706 77.2561 197.526 cv
77.4563 197.172 77.6724 196.738 77.8841 196.25 cv
78.6225 194.561 79.3418 192.212 79.7461 189.896 cv
80.0181 188.345 80.4068 186.877 80.8614 185.582 cv
81.3186 184.285 81.8322 183.168 82.4083 182.283 cv
82.8012 181.694 83.1988 181.194 83.7881 180.8 cv
84.1244 180.582 84.5639 180.388 85.1045 180.385 cv
85.1106 180.385 85.1166 180.385 85.1227 180.385 cv
85.523 180.385 85.9467 180.519 86.2695 180.735 cv
86.2689 180.735 li
86.5975 180.951 86.8304 181.207 87.0245 181.469 cv
87.2177 181.732 87.372 182.009 87.5099 182.303 cv
87.783 182.89 87.9909 183.549 88.1634 184.28 cv
88.5041 185.737 88.6923 187.475 88.6935 189.246 cv
88.6934 190.064 88.6524 190.887 88.5625 191.691 cv
85.5811 191.358 li
85.657 190.679 85.6936 189.963 85.6935 189.246 cv
85.694 187.974 85.5778 186.699 85.3815 185.633 cv
85.2606 184.95 85.0926 184.345 84.9307 183.908 cv
84.7472 184.187 84.5408 184.554 84.339 184.983 cv
83.697 186.335 83.0693 188.301 82.7011 190.414 cv
82.1419 193.574 81.1227 196.645 80.0285 198.71 cv
79.6562 199.402 79.2842 199.986 78.826 200.473 cv
78.5588 200.75 78.2637 201.01 77.8231 201.205 cv
77.5888 201.306 77.3036 201.382 76.984 201.382 cv
76.9312 201.381 li
76.9293 201.381 li
76.9247 201.381 li
76.4708 201.371 76.0468 201.19 75.753 200.969 cv
75.4533 200.746 75.2515 200.494 75.0887 200.244 cv
74.7697 199.74 74.5846 199.207 74.4272 198.605 cv
74.1241 197.407 73.9813 195.92 73.9791 194.262 cv
73.9792 192.994 74.0676 191.634 74.2593 190.269 cv
74.4351 189.02 74.5174 187.75 74.5172 186.584 cv
74.5174 185.707 74.4706 184.887 74.3866 184.185 cv
74.3472 183.851 74.2981 183.542 74.2438 183.27 cv
74.0617 183.602 73.8674 184 73.6766 184.445 cv
72.9557 186.11 72.2509 188.436 71.8473 190.758 cv
71.5452 192.488 71.0613 194.205 70.4808 195.757 cv
69.8979 197.311 69.2263 198.695 68.4987 199.786 cv
68.0057 200.513 67.5095 201.118 66.854 201.577 cv
66.4782 201.833 66.0191 202.059 65.4353 202.095 cv
65.4414 202.095 li
65.4321 202.095 li
65.3046 202.099 li
65.3013 202.099 65.298 202.099 65.2947 202.099 cv
65.3006 199.659 mo
65.3006 199.659 li
65.3006 199.659 mo
65.3006 199.659 li
53.8904 198.786 mo
53.8904 198.786 li
53.8904 198.786 mo
53.8904 198.786 li
62.293 182.99 mo
62.293 182.99 li
62.293 182.99 li
62.293 182.99 li
73.8749 182.109 mo
73.8749 182.109 li
73.8749 182.109 li
73.8749 182.109 li
54.2762 201.258 mo
54.2779 201.258 54.2796 201.258 54.2813 201.258 cv
54.2936 201.256 li
54.2762 201.258 li
74.7517 179.378 mo
74.7498 179.378 74.7479 179.377 74.7461 179.377 cv
74.7504 179.378 li
74.7517 179.378 li
.411765 .141176 0 0 cmyk
f
grestore
grestore
58.7095 192.338 mo
59.0396 190.347 li
59.0615 190.237 59.0615 190.215 59.0615 190.215 cv
59.0615 190.094 58.9844 190.094 58.7974 190.094 cv
53.2754 190.094 li
53.0444 190.094 53.0225 190.094 52.9673 190.27 cv
52.2964 192.294 li
52.2637 192.437 li
52.2637 192.547 52.3735 192.547 52.4067 192.547 cv
52.5166 192.547 52.5273 192.536 52.6157 192.316 cv
53.1655 190.677 53.4077 190.413 54.9033 190.413 cv
55.2773 190.413 li
55.5308 190.413 55.5308 190.457 55.5308 190.534 cv
55.4863 190.765 li
54.0015 196.716 li
53.9023 197.123 53.8145 197.233 52.8794 197.233 cv
52.7476 197.233 li
52.5493 197.233 52.4507 197.233 52.4507 197.442 cv
52.4507 197.552 52.5493 197.552 52.6377 197.552 cv
54.1997 197.53 li
55.7944 197.552 li
55.9043 197.552 56.0254 197.552 56.0254 197.354 cv
56.0254 197.233 55.9487 197.233 55.7617 197.233 cv
55.6294 197.233 li
55.4424 197.233 55.2666 197.222 55.0903 197.2 cv
54.8813 197.178 54.7715 197.167 54.7715 196.991 cv
54.7715 196.936 54.7715 196.914 54.7935 196.804 cv
56.2896 190.82 li
56.3667 190.512 56.4326 190.457 56.5205 190.435 cv
56.5977 190.413 56.9165 190.413 57.1147 190.413 cv
58.0718 190.413 58.5225 190.479 58.5225 191.238 cv
58.5225 191.568 58.4346 192.129 58.4014 192.305 cv
58.3794 192.426 li
58.3794 192.547 58.4897 192.547 58.5337 192.547 cv
58.6655 192.547 58.6768 192.514 58.7095 192.338 cv
cp
f
61.6904 200.192 mo
61.6904 200.159 61.6904 200.137 61.5034 199.95 cv
60.1284 198.564 59.7764 196.485 59.7764 194.802 cv
59.7764 192.888 60.1943 190.974 61.5474 189.599 cv
61.6904 189.467 61.6904 189.445 61.6904 189.412 cv
61.5806 189.302 li
61.4707 189.302 60.4805 190.05 59.8315 191.447 cv
59.2705 192.657 59.1387 193.878 59.1387 194.802 cv
59.1387 195.66 59.2593 196.991 59.8647 198.234 cv
60.5244 199.587 61.4707 200.302 61.5806 200.302 cv
61.6904 200.192 li
cp
f
68.6313 195.979 mo
68.6313 195.88 68.5327 195.88 68.4888 195.88 cv
68.3564 195.88 68.3457 195.913 68.3013 196.078 cv
68.2026 196.452 67.9058 197.442 67.2896 197.442 cv
67.1245 197.442 67.0366 197.365 67.0366 197.112 cv
67.0366 196.848 67.1577 196.507 67.2456 196.287 cv
67.5317 195.484 67.9058 194.461 67.9058 193.823 cv
67.9058 193.24 67.6523 192.701 66.8057 192.701 cv
66.1235 192.701 65.6064 193.097 65.2437 193.592 cv
65.2104 193.097 64.8696 192.701 64.3638 192.701 cv
64.1104 192.701 63.8247 192.811 63.5938 193.284 cv
63.3843 193.691 63.2417 194.373 63.2417 194.373 cv
63.2417 194.461 63.2964 194.483 63.3955 194.483 cv
63.5166 194.483 63.5273 194.472 63.5938 194.219 cv
63.7583 193.57 63.9673 192.921 64.3413 192.921 cv
64.6274 192.921 64.6274 193.24 64.6274 193.372 cv
64.6274 193.581 64.5835 193.823 64.5396 193.977 cv
63.7363 197.189 li
63.6924 197.343 63.6924 197.354 63.6924 197.398 cv
63.6924 197.53 63.7808 197.662 63.9785 197.662 cv
64.2314 197.662 64.3413 197.464 64.3857 197.277 cv
65.0566 194.571 li
65.1226 194.329 65.7163 192.921 66.7725 192.921 cv
67.2783 192.921 67.2783 193.471 67.2783 193.658 cv
67.2783 194.34 66.7944 195.66 66.6074 196.199 cv
66.5083 196.474 66.4644 196.573 66.4644 196.804 cv
66.4644 197.332 66.8057 197.662 67.2563 197.662 cv
68.2793 197.662 68.6313 196.023 68.6313 195.979 cv
cp
f
73.2515 189.522 mo
73.2515 189.401 73.1523 189.302 73.0317 189.302 cv
72.8774 189.302 72.8335 189.412 72.8003 189.522 cv
69.0493 199.884 li
68.9946 200.027 68.9946 200.082 68.9946 200.082 cv
68.9946 200.203 69.0938 200.302 69.2144 200.302 cv
69.3687 200.302 69.4126 200.192 69.4453 200.082 cv
73.1968 189.72 li
73.2515 189.577 73.2515 189.522 73.2515 189.522 cv
cp
f
78.8174 195.638 mo
78.5425 195.638 li
78.4873 195.968 78.4106 196.452 78.3003 196.617 cv
78.2236 196.705 77.4976 196.705 77.2554 196.705 cv
75.2754 196.705 li
76.4414 195.572 li
78.1577 194.054 78.8174 193.46 78.8174 192.36 cv
78.8174 191.106 77.8276 190.226 76.4854 190.226 cv
75.2427 190.226 74.4287 191.238 74.4287 192.217 cv
74.4287 192.833 74.9785 192.833 75.0117 192.833 cv
75.1987 192.833 75.5835 192.701 75.5835 192.25 cv
75.5835 191.964 75.3857 191.678 75.0005 191.678 cv
74.8574 191.689 li
75.1104 190.974 75.7046 190.567 76.3423 190.567 cv
77.3438 190.567 77.8164 191.458 77.8164 192.36 cv
77.8164 193.24 77.2666 194.109 76.6616 194.791 cv
74.5493 197.145 li
74.4287 197.266 74.4287 197.288 74.4287 197.552 cv
78.5093 197.552 li
78.8174 195.638 li
cp
f
82.6084 190.122 mo
82.6084 190.032 82.5186 190.032 82.4785 190.032 cv
82.3584 190.032 82.3481 190.062 82.3081 190.212 cv
82.2183 190.552 81.9585 191.452 81.3882 191.452 cv
81.2783 191.452 81.1582 191.402 81.1582 191.162 cv
81.1582 190.902 81.2983 190.542 81.4785 190.052 cv
82.0684 188.432 li
82.1582 188.182 82.1782 188.102 82.1782 187.922 cv
82.1782 187.412 81.8481 187.142 81.4585 187.142 cv
80.5386 187.142 80.2085 188.622 80.2085 188.672 cv
80.3481 188.762 li
80.4683 188.762 80.4785 188.732 80.5186 188.592 cv
80.5981 188.272 80.8584 187.342 81.4385 187.342 cv
81.6582 187.342 81.6582 187.532 81.6582 187.642 cv
81.6582 187.902 81.5981 188.072 81.5283 188.252 cv
80.7285 190.422 li
80.6484 190.642 80.6484 190.772 80.6484 190.862 cv
80.6484 191.442 81.0386 191.652 81.3682 191.652 cv
82.2886 191.652 82.6084 190.162 82.6084 190.122 cv
cp
82.8784 185.452 mo
82.8784 185.172 82.6782 185.052 82.4785 185.052 cv
82.1782 185.052 81.8882 185.332 81.8882 185.622 cv
81.8882 185.892 82.0981 186.022 82.2886 186.022 cv
82.5884 186.022 82.8784 185.752 82.8784 185.452 cv
cp
f
85.5571 194.802 mo
85.5571 193.944 85.4365 192.613 84.8315 191.37 cv
84.1714 190.017 83.2251 189.302 83.1152 189.302 cv
83.0054 189.412 li
83.0054 189.445 83.0054 189.467 83.2144 189.665 cv
84.2925 190.754 84.9194 192.503 84.9194 194.802 cv
84.9194 196.683 84.5122 198.619 83.1484 200.005 cv
83.0054 200.137 83.0054 200.159 83.0054 200.192 cv
83.1152 200.302 li
83.2251 200.302 84.2153 199.554 84.8643 198.157 cv
85.4253 196.947 85.5571 195.726 85.5571 194.802 cv
cp
f
108.745 194.395 mo
108.591 194.23 li
108.558 194.23 108.547 194.241 108.459 194.34 cv
107.876 195.132 107.051 195.44 106.49 195.44 cv
105.929 195.44 105.632 194.945 105.632 194.296 cv
105.632 193.79 105.896 192.58 106.259 191.953 cv
106.633 191.293 107.172 190.919 107.646 190.919 cv
107.711 190.919 108.294 190.919 108.448 191.447 cv
108.173 191.458 107.931 191.667 107.931 191.931 cv
107.931 192.206 108.173 192.261 108.272 192.261 cv
108.382 192.261 108.79 192.195 108.79 191.623 cv
108.79 191.106 108.327 190.699 107.656 190.699 cv
106.314 190.699 104.928 192.25 104.928 193.878 cv
104.928 195 105.599 195.66 106.479 195.66 cv
107.843 195.66 108.745 194.549 108.745 194.395 cv
cp
f
99.4502 192.8 mo
99.4502 192.58 99.2412 192.58 99.0874 192.58 cv
96.0181 192.58 li
96.0181 189.5 li
96.0181 189.346 96.0181 189.137 95.7983 189.137 cv
95.5781 189.137 95.5781 189.346 95.5781 189.5 cv
95.5781 192.58 li
92.4985 192.58 li
92.3442 192.58 92.1353 192.58 92.1353 192.8 cv
92.1353 193.02 92.3442 193.02 92.4985 193.02 cv
95.5781 193.02 li
95.5781 196.1 li
95.5781 196.254 95.5781 196.463 95.7983 196.463 cv
96.0181 196.463 96.0181 196.254 96.0181 196.1 cv
96.0181 193.02 li
99.0874 193.02 li
99.2412 193.02 99.4502 193.02 99.4502 192.8 cv
cp
f
228.546 193.977 mo
228.546 193.878 228.448 193.878 228.403 193.878 cv
228.271 193.878 228.26 193.911 228.216 194.076 cv
228.118 194.45 227.832 195.44 227.205 195.44 cv
227.083 195.44 226.952 195.385 226.952 195.121 cv
226.952 194.835 227.105 194.439 227.303 193.9 cv
227.953 192.118 li
228.051 191.843 228.074 191.755 228.074 191.557 cv
228.074 190.996 227.71 190.699 227.282 190.699 cv
226.269 190.699 225.907 192.327 225.907 192.382 cv
225.907 192.481 226.005 192.481 226.06 192.481 cv
226.192 192.481 226.204 192.448 226.248 192.294 cv
226.335 191.942 226.622 190.919 227.259 190.919 cv
227.501 190.919 227.501 191.128 227.501 191.249 cv
227.501 191.535 227.435 191.722 227.358 191.92 cv
226.478 194.307 li
226.39 194.549 226.39 194.692 226.39 194.791 cv
226.39 195.429 226.819 195.66 227.182 195.66 cv
228.194 195.66 228.546 194.021 228.546 193.977 cv
cp
228.843 188.84 mo
228.843 188.532 228.624 188.4 228.403 188.4 cv
228.074 188.4 227.754 188.708 227.754 189.027 cv
227.754 189.324 227.985 189.467 228.194 189.467 cv
228.524 189.467 228.843 189.17 228.843 188.84 cv
cp
f
233.321 194.395 mo
233.167 194.23 li
233.133 194.23 233.123 194.241 233.035 194.34 cv
232.452 195.132 231.626 195.44 231.065 195.44 cv
230.504 195.44 230.208 194.945 230.208 194.296 cv
230.208 193.79 230.471 192.58 230.834 191.953 cv
231.208 191.293 231.748 190.919 232.22 190.919 cv
232.287 190.919 232.87 190.919 233.023 191.447 cv
232.749 191.458 232.506 191.667 232.506 191.931 cv
232.506 192.206 232.749 192.261 232.847 192.261 cv
232.958 192.261 233.365 192.195 233.365 191.623 cv
233.365 191.106 232.903 190.699 232.231 190.699 cv
230.889 190.699 229.503 192.25 229.503 193.878 cv
229.503 195 230.174 195.66 231.054 195.66 cv
232.418 195.66 233.321 194.549 233.321 194.395 cv
cp
f
95.0415 163.046 mo
95.1304 172.657 li
95.1329 172.933 95.3589 173.155 95.635 173.152 cv
95.9111 173.15 96.1329 172.924 96.1303 172.648 cv
96.0415 163.037 li
96.0389 162.761 95.813 162.539 95.5369 162.542 cv
95.2607 162.544 95.039 162.77 95.0415 163.046 cv
.746 .676 .668 .898 cmyk
f
95.6865 178.652 mo
97.8804 172.631 li
93.3804 172.673 li
95.6865 178.652 li
cp
f
95.6865 178.652 mo
96.1563 178.823 li
98.5972 172.124 li
92.6542 172.18 li
95.6998 180.076 li
96.1563 178.823 li
95.6865 178.652 li
96.153 178.472 li
94.1065 173.166 li
97.1636 173.138 li
95.2167 178.481 li
95.6865 178.652 li
96.153 178.472 li
95.6865 178.652 li
cp
f
gsave
0 357 mo
266.999 357 li
266.999 0 li
0 0 li
0 357 li
clp
70.5869 221.354 mo
70.7407 221.354 70.8677 221.407 70.9678 221.51 cv
71.0679 221.615 71.1187 221.745 71.1187 221.902 cv
71.1187 222.049 71.0659 222.176 70.96 222.284 cv
70.855 222.391 70.73 222.444 70.5869 222.444 cv
70.4399 222.444 70.3101 222.388 70.1968 222.272 cv
70.085 222.159 70.0278 222.025 70.0278 221.875 cv
70.0278 221.735 70.084 221.615 70.1948 221.51 cv
70.3057 221.407 70.437 221.354 70.5869 221.354 cv
67.5679 224.374 mo
67.7217 224.374 67.8506 224.425 67.9546 224.528 cv
68.0586 224.633 68.1108 224.762 68.1108 224.916 cv
68.1108 225.063 68.0576 225.19 67.9517 225.299 cv
67.8467 225.409 67.7197 225.462 67.5737 225.462 cv
67.4268 225.462 67.2979 225.409 67.187 225.299 cv
67.0757 225.19 67.021 225.063 67.021 224.92 cv
67.021 224.773 67.0747 224.646 67.1836 224.537 cv
67.2939 224.428 67.4209 224.374 67.5679 224.374 cv
64.4956 227.417 mo
64.6528 227.417 64.7856 227.472 64.894 227.58 cv
65.001 227.687 65.0547 227.819 65.0547 227.977 cv
65.0547 228.125 65.001 228.25 64.894 228.353 cv
64.7856 228.458 64.6567 228.509 64.5068 228.509 cv
64.3599 228.509 64.2329 228.454 64.126 228.342 cv
64.0176 228.231 63.9639 228.099 63.9639 227.944 cv
63.9639 227.805 64.0166 227.683 64.1226 227.577 cv
64.228 227.471 64.353 227.417 64.4956 227.417 cv
0 0 0 1 cmyk
f
67.9165 202.548 mo
67.8496 211.868 li
67.8476 212.145 68.0699 212.37 68.346 212.372 cv
68.6222 212.374 68.8476 212.152 68.8496 211.876 cv
68.9165 202.555 li
68.9185 202.279 68.6962 202.054 68.4201 202.052 cv
68.144 202.05 67.9185 202.272 67.9165 202.548 cv
.746 .676 .668 .898 cmyk
f
68.3062 217.872 mo
70.5991 211.888 li
66.0991 211.855 li
68.3062 217.872 li
cp
f
68.3062 217.872 mo
68.773 218.051 li
71.3241 211.393 li
65.3812 211.35 li
68.2959 219.296 li
68.773 218.051 li
68.3062 217.872 li
68.7756 217.7 li
66.817 212.36 li
69.8741 212.383 li
67.8393 217.693 li
68.3062 217.872 li
68.7756 217.7 li
68.3062 217.872 li
cp
f
229.052 220.49 mo
229.207 220.49 229.336 220.544 229.443 220.651 cv
229.547 220.759 229.6 220.887 229.6 221.038 cv
229.6 221.188 229.547 221.316 229.443 221.422 cv
229.336 221.527 229.208 221.58 229.059 221.58 cv
228.908 221.58 228.78 221.526 228.671 221.419 cv
228.565 221.312 228.509 221.184 228.509 221.038 cv
228.509 220.887 228.565 220.759 228.671 220.651 cv
228.78 220.544 228.907 220.49 229.052 220.49 cv
229.046 223.573 mo
229.198 223.566 229.326 223.615 229.434 223.72 cv
229.541 223.826 229.595 223.956 229.595 224.11 cv
229.595 224.257 229.542 224.386 229.44 224.497 cv
229.335 224.608 229.213 224.663 229.074 224.663 cv
228.917 224.663 228.782 224.609 228.671 224.502 cv
228.561 224.395 228.504 224.265 228.504 224.115 cv
228.504 223.972 228.557 223.847 228.663 223.742 cv
228.769 223.636 228.897 223.58 229.046 223.573 cv
229.042 226.639 mo
229.193 226.639 229.32 226.693 229.423 226.799 cv
229.528 226.904 229.579 227.032 229.579 227.182 cv
229.579 227.329 229.528 227.456 229.423 227.563 cv
229.32 227.671 229.198 227.724 229.059 227.724 cv
228.905 227.724 228.772 227.67 228.66 227.558 cv
228.549 227.447 228.494 227.316 228.494 227.166 cv
228.494 227.03 228.549 226.908 228.66 226.801 cv
228.772 226.693 228.899 226.639 229.042 226.639 cv
0 0 0 1 cmyk
f
.57564 290.592 mo
26.5757 290.592 li
26.5757 311.592 li
.57564 311.592 li
.57564 290.592 li
0 0 0 0 cmyk
f
grestore
gsave
.57564 311.591 mo
26.5757 311.591 li
26.5757 290.591 li
.57564 290.591 li
.57564 311.591 li
clp
gsave
-.999528 311.989 mo
27.583 311.989 li
27.583 291.648 li
-.999528 291.648 li
-.999528 311.989 li
clp
26.5757 311.591 mo
25.1246 311.591 li
25.1131 311.58 25.1021 311.57 25.0915 311.56 cv
24.9345 311.405 24.8725 311.301 24.8195 311.217 cv
24.7228 311.051 24.6859 310.951 24.6451 310.847 cv
24.5703 310.647 24.5143 310.452 24.4505 310.213 cv
24.3261 309.74 24.1877 309.116 24.0356 308.362 cv
23.7362 306.874 23.3898 304.891 23.0769 302.805 cv
22.8604 303.625 22.5912 304.419 22.2864 305.162 cv
21.8045 306.331 21.2434 307.367 20.6094 308.197 cv
20.1798 308.748 19.7325 309.221 19.1221 309.571 cv
18.7735 309.767 18.3458 309.925 17.8401 309.927 cv
17.775 309.926 li
17.7731 309.926 li
17.3788 309.916 16.9957 309.793 16.6908 309.615 cv
16.3829 309.436 16.1443 309.212 15.9496 308.979 cv
15.5636 308.509 15.3263 307.993 15.1324 307.428 cv
14.7563 306.3 14.5815 304.939 14.5782 303.443 cv
14.5783 302.477 14.6564 301.459 14.8259 300.436 cv
14.9817 299.498 15.0542 298.557 15.054 297.699 cv
15.0546 296.864 14.9843 296.104 14.869 295.518 cv
14.8513 295.422 14.8315 295.33 14.8104 295.243 cv
14.6233 295.525 14.4176 295.883 14.2183 296.291 cv
13.5745 297.596 12.9711 299.419 12.6835 301.172 cv
12.4609 302.513 12.0798 303.811 11.6048 304.976 cv
11.1268 306.142 10.5638 307.17 9.91556 307.992 cv
9.47746 308.538 9.01148 309.006 8.38803 309.343 cv
8.03215 309.531 7.60424 309.675 7.11609 309.676 cv
7.00992 309.676 6.90151 309.669 6.79284 309.654 cv
6.79311 309.654 li
6.39692 309.6 6.03685 309.45 5.74058 309.259 cv
5.44253 309.067 5.20069 308.837 4.99353 308.591 cv
4.58179 308.097 4.29402 307.535 4.05808 306.915 cv
3.59523 305.677 3.35339 304.186 3.35026 302.607 cv
3.35035 301.996 3.38833 301.374 3.47037 300.752 cv
3.46957 300.758 li
3.47055 300.75 li
3.54098 300.22 3.5744 299.682 3.5744 299.161 cv
3.57521 298.224 3.46394 297.337 3.28761 296.652 cv
3.15309 296.091 2.94337 295.668 2.82663 295.496 cv
2.35331 295.46 1.89933 295.378 1.47516 295.261 cv
1.15831 295.172 .860198 295.069 .57564 294.936 cv
.57564 291.845 li
2.09111 291.987 li
2.06131 292.304 li
2.36239 292.408 2.79391 292.499 3.19877 292.514 cv
3.59943 292.53 3.98015 292.657 4.28696 292.835 cv
4.59636 293.014 4.84106 293.236 5.04509 293.471 cv
5.45021 293.945 5.71547 294.477 5.93327 295.062 cv
6.35805 296.23 6.57102 297.641 6.57441 299.161 cv
6.57433 299.81 6.53322 300.476 6.44447 301.145 cv
6.44367 301.151 li
6.44465 301.144 li
6.38084 301.628 6.35027 302.122 6.35027 302.607 cv
6.34991 303.404 6.43339 304.179 6.5754 304.844 cv
6.71509 305.508 6.92135 306.064 7.11163 306.396 cv
7.14017 306.447 7.16839 306.493 7.19503 306.533 cv
7.21103 306.518 7.22758 306.503 7.24461 306.486 cv
7.49905 306.244 7.84429 305.791 8.17193 305.208 cv
8.83622 304.04 9.44949 302.357 9.72377 300.682 cv
9.94907 299.323 10.317 297.98 10.7635 296.763 cv
11.2123 295.544 11.7318 294.458 12.311 293.584 cv
12.7052 293.001 13.1043 292.505 13.6722 292.108 cv
13.9974 291.888 14.4094 291.684 14.944 291.652 cv
14.9447 291.652 li
15.0564 291.649 li
15.0602 291.649 15.0639 291.649 15.0678 291.649 cv
15.4523 291.649 15.8337 291.765 16.131 291.939 cv
16.4346 292.114 16.6625 292.334 16.8439 292.557 cv
17.2031 293.009 17.4092 293.489 17.579 294.011 cv
17.9057 295.054 18.0508 296.304 18.0541 297.699 cv
18.0539 298.724 17.969 299.82 17.7855 300.927 cv
17.6442 301.778 17.5781 302.639 17.5782 303.443 cv
17.5775 304.367 17.6671 305.219 17.8127 305.874 cv
17.8729 306.166 17.9525 306.419 18.0286 306.615 cv
18.2677 306.345 18.5619 305.928 18.8445 305.418 cv
19.5175 304.217 20.1476 302.508 20.4397 300.849 cv
20.5439 300.266 20.6645 299.763 20.8128 299.318 cv
20.9647 298.871 21.1309 298.483 21.41 298.103 cv
21.5986 297.854 21.8498 297.588 22.254 297.397 cv
22.4803 297.291 22.7569 297.222 23.0362 297.222 cv
23.0386 297.222 23.0409 297.222 23.0432 297.222 cv
23.0456 297.222 23.0479 297.222 23.0503 297.222 cv
23.4145 297.222 23.7544 297.338 24.0057 297.486 cv
24.2625 297.637 24.4471 297.813 24.5982 297.988 cv
24.8957 298.34 25.0804 298.703 25.2522 299.115 cv
25.5849 299.933 25.8327 300.966 26.0323 302.284 cv
26.2073 303.455 26.394 304.598 26.5757 305.63 cv
26.5757 310.122 li
26.1745 310.423 li
26.16 310.451 li
26.5757 310.609 li
26.5757 311.591 li
26.1483 310.465 mo
26.1483 310.465 li
26.1483 310.465 mo
26.1483 310.465 li
26.152 310.448 mo
26.152 310.448 li
26.152 308.989 li
26.152 310.448 li
26.1374 310.443 mo
26.1374 310.443 li
25.4871 309.147 li
26.1374 310.443 li
25.4871 309.147 mo
25.4871 309.147 li
25.4871 309.147 li
15.3651 294.585 mo
15.3651 294.585 li
15.3651 294.585 li
.411765 .141176 0 0 cmyk
f
26.4816 310.192 mo
26.4816 310.192 li
26.5757 310.122 li
26.5757 310.153 li
26.4816 310.192 li
6.79311 309.654 mo
6.79311 309.654 li
6.79311 309.654 li
14.922 291.653 mo
14.9461 291.652 li
14.9454 291.652 14.9447 291.652 14.944 291.652 cv
14.922 291.653 li
f
grestore
grestore
11.0571 300.378 mo
11.3872 298.387 li
11.4092 298.277 11.4092 298.255 11.4092 298.255 cv
11.4092 298.134 11.332 298.134 11.145 298.134 cv
5.62305 298.134 li
5.39209 298.134 5.37012 298.134 5.31543 298.31 cv
4.64404 300.334 li
4.61133 300.477 li
4.61133 300.587 4.72119 300.587 4.75439 300.587 cv
4.86426 300.587 4.875 300.576 4.96338 300.356 cv
5.51318 298.717 5.75537 298.453 7.25146 298.453 cv
7.625 298.453 li
7.87842 298.453 7.87842 298.497 7.87842 298.574 cv
7.83398 298.805 li
6.34912 304.756 li
6.25 305.163 6.16211 305.273 5.22705 305.273 cv
5.09521 305.273 li
4.89697 305.273 4.79834 305.273 4.79834 305.482 cv
4.79834 305.592 4.89697 305.592 4.98535 305.592 cv
6.54736 305.57 li
8.14209 305.592 li
8.25244 305.592 8.37305 305.592 8.37305 305.394 cv
8.37305 305.273 8.29639 305.273 8.10938 305.273 cv
7.97705 305.273 li
7.79004 305.273 7.61426 305.262 7.43799 305.24 cv
7.229 305.218 7.11914 305.207 7.11914 305.031 cv
7.11914 304.976 7.11914 304.954 7.14111 304.844 cv
8.63721 298.86 li
8.71436 298.552 8.78027 298.497 8.86816 298.475 cv
8.94531 298.453 9.26416 298.453 9.4624 298.453 cv
10.4194 298.453 10.8701 298.519 10.8701 299.278 cv
10.8701 299.608 10.7822 300.169 10.749 300.345 cv
10.7271 300.466 li
10.7271 300.587 10.8374 300.587 10.8813 300.587 cv
11.0132 300.587 11.0244 300.554 11.0571 300.378 cv
cp
0 0 0 1 cmyk
f
14.0381 308.231 mo
14.0381 308.199 14.0381 308.177 13.8511 307.99 cv
12.4761 306.604 12.124 304.525 12.124 302.842 cv
12.124 300.928 12.542 299.014 13.895 297.639 cv
14.0381 297.507 14.0381 297.485 14.0381 297.452 cv
13.9282 297.342 li
13.8184 297.342 12.8281 298.09 12.1792 299.487 cv
11.6182 300.697 11.4863 301.918 11.4863 302.842 cv
11.4863 303.7 11.6074 305.031 12.2124 306.273 cv
12.8721 307.627 13.8184 308.342 13.9282 308.342 cv
14.0381 308.231 li
cp
f
19.7363 302.072 mo
19.7363 301.192 19.6812 300.312 19.2964 299.498 cv
18.79 298.442 17.8882 298.266 17.4263 298.266 cv
16.7661 298.266 15.9634 298.552 15.5122 299.575 cv
15.1602 300.334 15.105 301.192 15.105 302.072 cv
15.105 302.897 15.1494 303.887 15.6001 304.723 cv
16.0732 305.614 16.8765 305.834 17.415 305.834 cv
18.0093 305.834 18.8452 305.603 19.3291 304.558 cv
19.6812 303.799 19.7363 302.941 19.7363 302.072 cv
cp
18.8232 301.94 mo
18.8232 302.765 18.8232 303.513 18.7021 304.217 cv
18.5371 305.262 17.9102 305.592 17.415 305.592 cv
16.9863 305.592 16.3374 305.317 16.1392 304.261 cv
16.0181 303.601 16.0181 302.589 16.0181 301.94 cv
16.0181 301.236 16.0181 300.51 16.1064 299.916 cv
16.3154 298.607 17.1401 298.508 17.415 298.508 cv
17.7783 298.508 18.5044 298.706 18.7134 299.795 cv
18.8232 300.411 18.8232 301.247 18.8232 301.94 cv
cp
f
23.355 302.842 mo
23.355 301.984 23.2344 300.653 22.6294 299.41 cv
21.9692 298.057 21.0234 297.342 20.9131 297.342 cv
20.8032 297.452 li
20.8032 297.485 20.8032 297.507 21.0122 297.705 cv
22.0903 298.794 22.7173 300.543 22.7173 302.842 cv
22.7173 304.723 22.3101 306.659 20.9463 308.045 cv
20.8032 308.177 20.8032 308.199 20.8032 308.231 cv
20.9131 308.342 li
21.0234 308.342 22.0132 307.594 22.6621 306.197 cv
23.2231 304.987 23.355 303.766 23.355 302.842 cv
cp
f
48.1274 303.788 mo
47.9731 303.623 li
47.9404 303.623 47.9292 303.634 47.8413 303.733 cv
47.2583 304.525 46.4331 304.833 45.8721 304.833 cv
45.311 304.833 45.0142 304.338 45.0142 303.689 cv
45.0142 303.183 45.2783 301.973 45.6411 301.346 cv
46.0151 300.686 46.5542 300.312 47.0273 300.312 cv
47.0933 300.312 47.6763 300.312 47.8301 300.84 cv
47.5552 300.851 47.313 301.06 47.313 301.324 cv
47.313 301.599 47.5552 301.654 47.6543 301.654 cv
47.7642 301.654 48.1714 301.588 48.1714 301.016 cv
48.1714 300.499 47.709 300.092 47.0381 300.092 cv
45.6963 300.092 44.3101 301.643 44.3101 303.271 cv
44.3101 304.393 44.9814 305.053 45.8613 305.053 cv
47.2251 305.053 48.1274 303.942 48.1274 303.788 cv
cp
f
38.832 302.842 mo
38.832 302.622 38.623 302.622 38.4692 302.622 cv
35.4004 302.622 li
35.4004 299.542 li
35.4004 299.388 35.4004 299.179 35.1802 299.179 cv
34.9604 299.179 34.9604 299.388 34.9604 299.542 cv
34.9604 302.622 li
31.8804 302.622 li
31.7261 302.622 31.5171 302.622 31.5171 302.842 cv
31.5171 303.062 31.7261 303.062 31.8804 303.062 cv
34.9604 303.062 li
34.9604 306.142 li
34.9604 306.296 34.9604 306.505 35.1802 306.505 cv
35.4004 306.505 35.4004 306.296 35.4004 306.142 cv
35.4004 303.062 li
38.4692 303.062 li
38.623 303.062 38.832 303.062 38.832 302.842 cv
cp
f
13 311.592 mo
13 321.427 li
13 321.703 13.2239 321.927 13.5 321.927 cv
13.7761 321.927 14 321.703 14 321.427 cv
14 311.592 li
14 311.316 13.7761 311.092 13.5 311.092 cv
13.2239 311.092 13 311.316 13 311.592 cv
.746 .676 .668 .898 cmyk
f
13.5762 327.427 mo
15.8262 321.427 li
11.3262 321.427 li
13.5762 327.427 li
cp
f
13.5762 327.427 mo
14.0443 327.602 li
16.5476 320.927 li
10.6047 320.927 li
13.5762 328.851 li
14.0443 327.602 li
13.5762 327.427 li
14.0443 327.251 li
12.0477 321.927 li
15.1047 321.927 li
13.108 327.251 li
13.5762 327.427 li
14.0443 327.251 li
13.5762 327.427 li
cp
f
201.184 345.811 mo
201.184 345.778 201.184 345.756 200.998 345.569 cv
199.623 344.183 199.27 342.104 199.27 340.421 cv
199.27 338.507 199.688 336.593 201.042 335.218 cv
201.184 335.086 201.184 335.063 201.184 335.031 cv
201.075 334.921 li
200.964 334.921 199.974 335.669 199.326 337.066 cv
198.764 338.276 198.632 339.497 198.632 340.421 cv
198.632 341.279 198.753 342.61 199.358 343.853 cv
200.018 345.206 200.964 345.921 201.075 345.921 cv
201.184 345.811 li
cp
0 0 0 1 cmyk
f
204.627 343.171 mo
204.627 342.83 li
203.89 342.83 203.769 342.83 203.769 342.335 cv
203.769 335.537 li
202.185 335.658 li
202.185 335.999 li
202.956 335.999 203.043 336.076 203.043 336.615 cv
203.043 342.335 li
203.043 342.83 202.922 342.83 202.185 342.83 cv
202.185 343.171 li
203.407 343.138 li
204.627 343.171 li
cp
f
210.061 340.817 mo
210.061 339.409 208.961 338.243 207.63 338.243 cv
206.255 338.243 205.188 339.442 205.188 340.817 cv
205.188 342.236 206.333 343.292 207.62 343.292 cv
208.951 343.292 210.061 342.214 210.061 340.817 cv
cp
209.148 340.729 mo
209.148 341.125 209.148 341.719 208.907 342.203 cv
208.665 342.698 208.18 343.017 207.63 343.017 cv
207.158 343.017 206.673 342.786 206.376 342.28 cv
206.101 341.796 206.101 341.125 206.101 340.729 cv
206.101 340.3 206.101 339.706 206.366 339.222 cv
206.663 338.716 207.179 338.485 207.62 338.485 cv
208.103 338.485 208.577 338.727 208.863 339.2 cv
209.148 339.673 209.148 340.311 209.148 340.729 cv
cp
f
215.715 338.727 mo
215.715 338.54 215.583 338.188 215.155 338.188 cv
214.934 338.188 214.451 338.254 213.989 338.705 cv
213.527 338.342 213.064 338.309 212.823 338.309 cv
211.799 338.309 211.041 339.068 211.041 339.915 cv
211.041 340.399 211.283 340.817 211.557 341.048 cv
211.415 341.213 211.216 341.576 211.216 341.961 cv
211.216 342.302 211.36 342.72 211.701 342.94 cv
211.041 343.127 210.688 343.6 210.688 344.04 cv
210.688 344.832 211.778 345.437 213.12 345.437 cv
214.417 345.437 215.561 344.876 215.561 344.018 cv
215.561 343.633 215.408 343.072 214.846 342.764 cv
214.263 342.456 213.625 342.456 212.955 342.456 cv
212.679 342.456 212.207 342.456 212.129 342.445 cv
211.778 342.401 211.546 342.06 211.546 341.708 cv
211.546 341.664 211.546 341.411 211.733 341.191 cv
212.163 341.499 212.614 341.532 212.823 341.532 cv
213.845 341.532 214.604 340.772 214.604 339.926 cv
214.604 339.519 214.428 339.112 214.154 338.859 cv
214.549 338.485 214.946 338.43 215.143 338.43 cv
215.253 338.441 li
215.132 338.485 215.078 338.606 215.078 338.738 cv
215.078 338.925 215.22 339.057 215.396 339.057 cv
215.506 339.057 215.715 338.979 215.715 338.727 cv
cp
213.78 339.915 mo
213.78 340.212 213.768 340.563 213.603 340.839 cv
213.515 340.971 213.262 341.279 212.823 341.279 cv
211.866 341.279 211.866 340.179 211.866 339.926 cv
211.866 339.629 211.876 339.277 212.042 339.002 cv
212.129 338.87 212.382 338.562 212.823 338.562 cv
213.78 338.562 213.78 339.662 213.78 339.915 cv
cp
214.99 344.04 mo
214.99 344.634 214.208 345.184 213.13 345.184 cv
212.019 345.184 211.26 344.623 211.26 344.04 cv
211.26 343.534 211.678 343.127 212.163 343.094 cv
212.811 343.094 li
213.757 343.094 214.99 343.094 214.99 344.04 cv
cp
f
219.921 346.604 mo
219.696 346.604 li
219.651 346.875 219.588 347.271 219.499 347.406 cv
219.435 347.478 218.841 347.478 218.643 347.478 cv
217.023 347.478 li
217.977 346.551 li
219.381 345.309 219.921 344.823 219.921 343.923 cv
219.921 342.897 219.112 342.177 218.013 342.177 cv
216.997 342.177 216.331 343.005 216.331 343.806 cv
216.331 344.31 216.781 344.31 216.807 344.31 cv
216.96 344.31 217.275 344.202 217.275 343.833 cv
217.275 343.599 217.114 343.365 216.798 343.365 cv
216.681 343.374 li
216.888 342.789 217.375 342.456 217.896 342.456 cv
218.715 342.456 219.102 343.185 219.102 343.923 cv
219.102 344.643 218.652 345.354 218.158 345.912 cv
216.429 347.838 li
216.331 347.937 216.331 347.955 216.331 348.171 cv
219.669 348.171 li
219.921 346.604 li
cp
f
230.346 341.598 mo
230.346 341.499 230.248 341.499 230.204 341.499 cv
230.071 341.499 230.06 341.532 230.016 341.697 cv
229.917 342.071 229.621 343.061 229.004 343.061 cv
228.839 343.061 228.751 342.984 228.751 342.731 cv
228.751 342.467 228.873 342.126 228.96 341.906 cv
229.247 341.103 229.621 340.08 229.621 339.442 cv
229.621 338.859 229.368 338.32 228.52 338.32 cv
227.838 338.32 227.321 338.716 226.958 339.211 cv
226.925 338.716 226.584 338.32 226.079 338.32 cv
225.826 338.32 225.54 338.43 225.308 338.903 cv
225.099 339.31 224.957 339.992 224.957 339.992 cv
224.957 340.08 225.011 340.102 225.11 340.102 cv
225.231 340.102 225.243 340.091 225.308 339.838 cv
225.473 339.188 225.682 338.54 226.056 338.54 cv
226.342 338.54 226.342 338.859 226.342 338.991 cv
226.342 339.2 226.298 339.442 226.254 339.596 cv
225.452 342.808 li
225.408 342.962 225.408 342.973 225.408 343.017 cv
225.408 343.149 225.496 343.281 225.693 343.281 cv
225.946 343.281 226.056 343.083 226.1 342.896 cv
226.771 340.19 li
226.837 339.948 227.431 338.54 228.487 338.54 cv
228.994 338.54 228.994 339.09 228.994 339.277 cv
228.994 339.959 228.509 341.279 228.323 341.818 cv
228.223 342.093 228.179 342.192 228.179 342.423 cv
228.179 342.951 228.52 343.281 228.971 343.281 cv
229.995 343.281 230.346 341.642 230.346 341.598 cv
cp
f
241.687 340.421 mo
241.687 340.201 241.478 340.201 241.325 340.201 cv
238.255 340.201 li
238.255 337.121 li
238.255 336.967 238.255 336.758 238.036 336.758 cv
237.815 336.758 237.815 336.967 237.815 337.121 cv
237.815 340.201 li
234.735 340.201 li
234.582 340.201 234.373 340.201 234.373 340.421 cv
234.373 340.641 234.582 340.641 234.735 340.641 cv
237.815 340.641 li
237.815 343.721 li
237.815 343.875 237.815 344.084 238.036 344.084 cv
238.255 344.084 238.255 343.875 238.255 343.721 cv
238.255 340.641 li
241.325 340.641 li
241.478 340.641 241.687 340.641 241.687 340.421 cv
cp
f
250.917 341.257 mo
250.641 341.257 li
250.586 341.587 250.509 342.071 250.399 342.236 cv
250.323 342.324 249.596 342.324 249.354 342.324 cv
247.375 342.324 li
248.541 341.191 li
250.256 339.673 250.917 339.079 250.917 337.979 cv
250.917 336.725 249.926 335.845 248.584 335.845 cv
247.341 335.845 246.527 336.857 246.527 337.836 cv
246.527 338.452 247.078 338.452 247.11 338.452 cv
247.297 338.452 247.682 338.32 247.682 337.869 cv
247.682 337.583 247.484 337.297 247.099 337.297 cv
246.957 337.308 li
247.209 336.593 247.803 336.186 248.441 336.186 cv
249.442 336.186 249.916 337.077 249.916 337.979 cv
249.916 338.859 249.366 339.728 248.76 340.41 cv
246.648 342.764 li
246.527 342.885 246.527 342.907 246.527 343.171 cv
250.608 343.171 li
250.917 341.257 li
cp
f
254.657 340.421 mo
254.657 339.563 254.536 338.232 253.93 336.989 cv
253.27 335.636 252.325 334.921 252.214 334.921 cv
252.104 335.031 li
252.104 335.063 252.104 335.086 252.313 335.284 cv
253.391 336.373 254.018 338.122 254.018 340.421 cv
254.018 342.302 253.612 344.238 252.248 345.624 cv
252.104 345.756 252.104 345.778 252.104 345.811 cv
252.214 345.921 li
252.325 345.921 253.314 345.173 253.963 343.776 cv
254.524 342.566 254.657 341.345 254.657 340.421 cv
cp
f
260.784 342.016 mo
260.629 341.851 li
260.596 341.851 260.585 341.862 260.498 341.961 cv
259.915 342.753 259.089 343.061 258.528 343.061 cv
257.967 343.061 257.67 342.566 257.67 341.917 cv
257.67 341.411 257.934 340.201 258.297 339.574 cv
258.671 338.914 259.21 338.54 259.683 338.54 cv
259.75 338.54 260.333 338.54 260.486 339.068 cv
260.211 339.079 259.969 339.288 259.969 339.552 cv
259.969 339.827 260.211 339.882 260.31 339.882 cv
260.42 339.882 260.828 339.816 260.828 339.244 cv
260.828 338.727 260.366 338.32 259.694 338.32 cv
258.352 338.32 256.966 339.871 256.966 341.499 cv
256.966 342.621 257.637 343.281 258.517 343.281 cv
259.881 343.281 260.784 342.17 260.784 342.016 cv
cp
f
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (011x002.eps)%%CreationDate: 27/05/15 11:10 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\U<cnMsg^cd3bCh$u=*1Sb"3Tk3p3&\eo0]8?ZmuP0UXch2ilD>5'hJ[S04nB):C:."jPq#?OV:/Z9T2r)AHJ`K;Z^_^e%,q1?b;N[fO/r5@+HDba`ms3+;<)!q/@*THt&P@sA<AcXY73E.dYLJ$uq5Uq#-f+K#^"4dCS*b*33Ec8YD']^nn*m-A]WF,^mD"ih%c0F%r,$ii$T.>n5^!c=t<Vo?bbR"OhV<=tQ7^I:1oCZ;U/gk5Z7'QS_Wk@[a>u3,%Vr6C^>P"an5ClGm[G<K\gqsBn1\lK+n+WM#%J-dE&4M9M5&HjNZDuTa;rncl3]@DA*h0R;L-G/Zj=1.o3Y7'il-3BH+M*APMIs%41I\"hV(=\i]W00s>4"CW.,c)aq*f*ut26_aO%Fj)"7rNA]hn)`V*]iqI\.>8,brd!ORTZa((#Qjt#:X4EXp$QCld0K#K"IYKBL[A9Y$'!X,=.7Z`ecVkdq4n0HWnmDq*sTF7r5$*#%-Om*[(kRD*T6ci%%i[Lre6<aV.tZlGVW^T=<KVa-?mP8l8Y^r2MR$\M-p"!-?E==rYU\75BMMs>Nk:;F7Vg[J/kIN5_sM?:jp[q9%,n9]:nBW!-s/,HR725URn(1bPET!hUTi2J@mGU'Bi8OjkXAs*;_18.Ha[d>#bSK\7X&SIfQ]m:ZCG6n2,e*dFOg>2c-d2:aC%uD2%pfT.O:g(fQZA_Rj)5#&,I9NW.g[m'l_buqX^GHBmBc<;cZqA<;dkn=gBjqt/6tX9M=NWJ*'Rmqq/6+61WF?Is//IbIZ%us@'ms2a%BH"TjWSmA?Kt]o/VYF&:BT)L3^1f`sJ\COd94=I^'2)c+XIdjQfH^=41>!iL`-tpTT^Q?^n.U:[O73fuU3*+e@up*mqi-(;MLE?"%.5bi:=:4qZT3.sg6'sMnLcM:dV';`KIaU/hcRJQ%GD[>V*AP%Ca=9LU@4CObIUZ#n"DP((1HK"?(JA3:X:_=/U$lIjn.U:[n*'Q,%-cI&KpkbiOJ+uT*O`Cc).r?A4[!2R*\+mu^1Q!9N3gQL^Zfj`&:9d=5.:0Ae>-g(m["S)_b@'cicG\SugU,T).J=9:YnZ;<llW&1%I2>,Q%/)<9[Q*$14-Xcm"j5X:%pQ\UE>r@^3JI$U2(u$cV0&Wf;6&)g.GYPVCIG8<;;AF@eN0h'^/(BMIhZrb1FY930rMCP2,qX]%b.l5<VsbnZenfJ@Q:30VpF1;jI.-PH^?tEO2:J*n[]&PO"(Ge<'&Rl2@Gtt[CUHh$V/M6c5lT_L.MYDG:QjoTk:cdhRLB-UJ*F^9%>#d#iq+LbP3rSIDV>gsVr\b1cD1hd;'^-4n0E&Af7=RCKl+]Wt<2're0E"s)e)/GXqG4?q;0e13LS&Znl#5l(r<rRfPbOmQ9(H#Z%;D9Q,:oT[Ypb3CL/K!QP!e2)h@-D/'+lc`[iN89CitKtm9<&<E9*I\J%@+b0]qgu&#/^!F^.I:?1am%d:p@<5LAsls)[->t2<eHr%>p1d:p`'6gs55hD?ER7,$(d@nWgDp.]d.=QHO7FP'cW/Z$`%]C-Xr,/@dO;Q32uZ^qPI^0n3Qo2IgHV;Ig,/iZ#,oe88>q(iEN*)%/0uJl&;jRUT?Gl6TEigK9-hqf#K7S($UkGQRG^laj!U/5Z:Jn+&#:,PK;F87V$;>YC+mA)&BkHOYQn^'.OC590:0e:iV;-e/<F1B%'W)_X.B6"?7%biR>6:8IPh+f_eSBa*#2p\bDcDX4a=W@6(&GC+rXrO)*),DndT8bblnd`3^jcahc2%eF_9n"cb+]JGVG-lAfS_6H%&WR^@8Z4mX+n)?BI0P2E5dLg"`u,[jXtU]Q(hjr0^J(jiOg\@1J&,&=$OA<ng+MJeGXnU:K^o]5ZjPiX$L>B"G<-KJU=#+=[g?Ao%jqU83kuclR&GeIu-*XX#:LS,Ae'[\TcCf[/$mX7S0Zm59kcCWu9<8pBjVCHo1(qCo$De\>S'=BSp4i3dbG$'WLGY@+8@pX;-T!H\%\KDJ%U=+%U23@>X=lY5->@R2UN3%T:#O+`("h%_M1qm8j9k9KAI>@WXF+JA-,Jcq>%7W!3$>,";I4AAf8l'\9Zm[Qk4N/o/08KbN%Gb=U@a',5/gO^PDa<E-5U4:?t$YqeDNWeC_gDX4V-&+"r#ZN6OR9Qn-0`+N<:ST.HPlb-Y<"`<nci&T<UiVYr$3.jNA`)uO67p<R%+dF>ZV8%j4[q2.1TedD&Jl%a&%)J.Q2LC`hgcQerka8]cM'U!lD9Z$@ceu9(a35G`asE3B^KE?l,lL2896lflU8^bN"=GG4E2IJ\%8ShTaCBC%-(2l">APq)j=QB</1<i2](<;o)TVPe%Kq(J%_"T#afbs6N8JA$lP7<FS%,$s-"^8oR>bb>ERB11o]IhU@SMoH15tV]k%Xd$8)[g"4-?=6ZdBgKT@"@d!GM<XFp_3.YA=gMcnR#GnqdHP47F8?+&1`S5"pSbcU]MI]:Q)r9@#mq\kThJ*@P(ChudlYis(0Rq6%Q-aCt&/f4U-RqD6m:-b8X]glj2Jn;p1b^9ZW!j9+*P`r,4b%;g7+:-pQsVVD7DY,9p.3T!DU3,j\%\Qk,M]"LRtfTu[a&D;UaG'X%Ee3E_Wo5Ot.N6TW_+]ui0!o_X,tk@[UU,qDU!gcKJ$^nC*C;c?c9+Uh1?h*c^-ad-BGF!^>1/ka`(Jru/,lC<=`"8l19m)Y[/9&H%PMR39\#Ir'#Xm.gg?8sQX?VUn=AK4b.$pm_6Z!0p?#jY`hh:`kZmP]E7tOT@OmTDSSU!^N1,m5(I)@\IjKp__oW:`J:faouU*\bM%*bF4[Bin79>+XnL`bX.AZMVj*?).!#hIUa1WC:YBCHP/Bge:%K::2OS4g"I\).o/CFGZYo:F`fLa".]YC8=L!5$`'V0JZ)3(#*(4%3UBm'X-7G5fm]jFm-j#WH+j7,U#@s$qt[0"V&LupM'\2''BAnaq#c\d]Bu69DX1@c0jgle?gGglDY4Hr-')D_fAHFmj?*N(hp-]i%rHbX#k[["1W\gd4HBLIFQcW%hDtMe\qQG):bB]XFbH8PEc$"lCeqR..[H)J<gPN*0UfhP7]1E(5CHcG0"])-`,H#Da(8K<(\(:Y4%O]P'c:BMaD\487lWqJZ?>KqJpf!F\>5M_,o=EJuSD\tV(-F^QN]oV5C]A9ipF[*0IB4(e[o)F\-:<3gFit`rf?q[SO\"uF#s.='1%8dDg*&-'h\(TYemj1S[aHo0^X)Xr#i[mZht_cVE&?JE^on&sZ;%WYJ7p)@qpqY?ai^]"sK)cG]tUK%Cc,gsrR[f+amos*TR8$u8C%FnS$LUu]'lU&#01R$Y'N9B!b>Uebs?VuNYtmj7Q%XnLX(nft]8R(imj=8ck,+#D%:;>$u]bU2oDNNWh6KbY2_`sI;K\pVB(Z\5^d%Z_+JQI>$\++8E)G?[`+@n"_?W&!QaK6F$gRS$N7#e(iFcGq/Mg'$38C$\&J;cm8q3aA/=+Rrr+dK#PiI,&!e^EU"hSf&'6Z&gpn,%,?A*fORN7Mj68JK#?"roYn@6:Lb]`Ho7&JK<9+&a<6fHjQN!gPJ'M95@6!dYishtbmJ\9DKk,WK*mI&F@aZl#'RTDDg3Wdu^4WY(%G>Nj$TtHc:Do%ZH0:[.M]m:JObshT'I^33ooW,0TAu#B](:G^5--noe?7c`E6_DI%4?]`H8QBBnpo!$FkpOfW0SR)truiVQF;>GP%47i3%oigD=MgKuUHeE/H[;3Ra>r3sW]>Bm%@,;K[qak=B>,c%2^e=g1[!E`H**R91P4.3r/_Oq;:YkFIfCPG2s(AD2p=TZ"hl2q7%'K)'pR*]-;kNf$KFh/2^>6F_%mFRQ*W)\[3KSB"VLBg>r6S`-BdoL2H]%,tn^7$W%Y_4)M]5.Dls/Iu,=94WYSU]GpdpZ&DKl4@l%fu/ld=1qtC!I'NaJ2eGKIoX+?.aSG*\+a5pir:tJs-ltiEQYqB1n$:h/Zan$[VuCYp2q=X5CGpV9-+Q5oj>nU.dA(>>Q;kK)nSa\%N:EHP2!8LU^#uks?GHHH&l=t5=o."r#-/8e_a,=prtV_a^k]W'C?Mf3ff8=X+r<N%JR,6AM5&O9K8=[?^IKcf(PBrY"=7-Q7JF"9%D?Wnrs'X_8m/Kd4(d]#9QR>F",.[U-qt9^`0b)cN2W"EtU&ISQcJ(S>[lW1lq4I#;LZ]mZ'K$d&H-2GPs'K2W58j2CZ8_Jhec/Zg%rqQ0KmmaGZ&_SC#drW#&lT`rFLAYG_53e.%O(`T=<qZJpO"A3S]CahFK4T:(s4+#O<MS`AjZ<B2\i/2ls+m6M[IjK>2*3g(1Ekhi%fE8<b0[<P_p0ZS)DCt[=)oh,`<Dk(eYY7qe^=pI9=gVsIE13fLC2caaQqH8JFc-fne_1:Z;DVjqU_RSn<a1&RHfoRbLppJK1r_]Y%/GaM;DRB7Qp#\^?N6WKolglLk?3=OW:F2L]<2,otc9-\d[oZtYZG<8G`m7jbP2]lFbUI-ml:R%BVcit>=RCRc#J+>W8R48T%UFZ1%aV<Y\]RX])Yra7XR+"Bc&C$h'A^-r7VcmRtTj+k4enO43Y#)-G<I:e\f!*"^G!2YeFkV8iHdu`G@JI]WZLH=]gOVph#-4ojj^Gjs%&J;X6A1rrXq&l`"r+3o$4'&l!rE$\e_:UD.FC%pf6;HHlh.L0*o$_DYb^!4Wp&GhPC?^.<<#@OKZ66#64JO1ZG*!:;OD4aeRuLH3%g$<k:T9b:p!p[G&"_plkhO9E6ciO;7s1hT\#AgM'*Emfjh.Zu)gT;Jk\Vb,uiF9LR/:qI#N44;I9!d@A*rl)eX*ZiOJ-,]G5??eG%(Jj4PFpW(<r<:H]@)#a3e^g39UC>T_6\]'nQ=b.[b1JRAnfXue<-W#sZ!b-UA_sE#foc3jU6Ji/=]s014eR4$g.!3jUsjNV2=r#G%,t0hS<K5@cQ2g+'$7r":)=eJK<X<@[e"nVP(;42*>PS,ug14L;F\i0pBL]^g87,A$NSXn6D,Q<n!:N5XM@urkgl2;o-(8T*.Wf`f%.PBEqmen8sfYt$4]`qaT3q$/Ip$fH35S!f4Vi#Y%[JE+Q7^j1bTD+WBqHLRCknI&"ZHAmWRjL,nGYTtM4l46m*ZJm.8I]0iX]("%%E+:,D@q7$32I1su'di02B>N$[4$laMPhJ[h9(f;mBY?>L$^70,8dDYPh.pA01GF57%Mq+tGhG>Q/uaF6q0j@9"okS9k4dni@+e2A%G0+(Ib4%!"bMH($E&o@77$F@8gg*3.hqHmi]f'Q>-1aXo^?[MW<`NeKp8%4S]a7F3,29u5hW'PH;,!9OcBAL3G]=B'm`-NPcX)7I%nP.Xd`u_"tA]''I##fHP>HKao$*9C1Fe2dm\<*%dTjmb\]Q24ILND<qMBJ89T=j3MjZDp<T=NQc]j>LSqN^sBeU`T^pp9-)AH&./%YFK/o[eh0>DC2T2Y2n?hT22qMk:$[IXkOgW?YmVBW[019gLg]C9Kp\hSf]=K8Q57-Biu&OjWQGDN=7Z"rmb]56dbd_f=eFc^.>`a%mH*Q[)oF5>=]2ufC:,)^QB(W'+j77YKi"3Rr+Wi5'WJQ\$(&o[G^CG*3r\C)=p'eTVa.jmqhZ`JMlPa<*BY*6!"J_m!ppcI^cqE-%6JGrq3P/H(-j`Y4ci!Dcg%CZ\<W@Y'j4ot%3ct/7#9O;("5tlQ#nLt%&'W>&LY(,ld6FZ)6ONq^qIC0j[*0=]llNn\`NNOIra'_j%li\#KD4ngV*=P3Gr`?cN>fj0M5M,dXp"F6=,.2$\qlB+?n%`Cm<7$$7NC&i!^jnb87PA6fmlI%PN7.ZJ-[+/i(ci_a1g&9!=N;i8%@3),MNHL2c0!,$E'+&Wj<kDeaNTIb,B"d+G-:L#HGL/7_63Ip<\_@T+8PVbm@Q@!hlu9*+$T0iO0]CWEhsFL4&,i\Ha")!N'G"m[%hX3?!QHG-W#$#N#RLH!/&,.D?OM[iKI#%^'>K^I=WEJWLreai2KN_KZ%sGFic-9>36^cfc>:WB,cn_0SgE/$Tj,[1Nh/<\qaDrA"%II+[<dfIU=\AOEb+rqF9%IYJ0?g"3?r?!QZ)-!cp716OB;.6f#Z\+(;G]li,=\Es_gAN_S&kY4%2hHU#Y(YO]=FqYtmEnK?UF9b2%qH9hA\Q?5X*`c^OhJ9d5U+"^ZFE;!MBG_t%ToZWDVAN.rms)hH"iZSG*-jDKWrE,,<_L1+8X?r\e[lCp#$uMn`t8/C+XkjU1Qbo\%8_*M'_ONe&NUW[N15[RFBHfg+Jr9+u;b_a]mj=O-\:c%`]$_38GG3@pY",\QAApX$>&_qmN&>I=Mbu9p`JN:/<_-`5KG13=Ffdc]%,"0UYILMQJ&E`5bS'="aH_&]c'mk9f<1#4=Kp1^CH]31'];M\_q(!@lhr9Xj!11j9?Q?*Pfd-"BY"bVsb_<fNS<UfE/iTCmSHK$]%0HUQ?'QKD6aAtmXpf.qM.)t0f3'r,r`F//@d/b!0q@$s;7oD:8@K&58#Eon@ja2A,@4daaDabgX]b2LIOnf3ubMGQkn6W]>3YJIY%a.I_G=3U*k\5W$Yn3H&KJ5_'?eK(K\V5(q-d4A')$fQ>mcXCLpSL)<eUIEbuctMspNe,"88,MbG7a50!5d=@40QZ6dqH*V,j@9;c%;K*00arp::fgP9#(ShpCMns[H4\OiJc9lP;'[DWK]7sLh,;Wf2MsKYd^:81URMYOQLY9Y+O1pS1,\?Xj=gfEBg>Bu('m\i6^K(,A%DL_(JT<2*d^P(?aql-s4G,B\`1@i^oC+2AkQ:Rnhf0<>8RA2i"Q2PC3UR,>ueDegFGq+/c;bAVJLQ[a+]:C=oX/TRj<9Zuf6U7gH%WGEQhXNOh&ChS%HfA5`?9;Satb<jI!.dT:LMhuPb]>!uBaEEU;2YYJQ]!8SfSZB-dPcJj!iD(fW<GjH>CPB/TEM9&7==`sdE*WR'%dEZmH8h,2\[$t5SQAj>Q>OEJXAK\(Eb!+G,<2T3=9P+')%I@8Qn!]D&'Cs<ARGBXc3:"a\\sZ*!aUT8L[9J?JFfX=[U>OU]#<b>I%":a.6lJ<_@B(r!FYN4aHj(E@[4#Q=824*bLgPN<0F8PM8JF041S%UEDeZSO^\rW9-+X62<%nI/u0&A$UdddIP-5'2tF,`@iC*fe*%7,$+kH7FDfK,T1&5(<5Z!u`c*C1l'CafePYrLS!\#5*+/1"1hPs$g(fAp\STm>bPKh4L%hbl$eNf`PrQNXOI?:_>Td!uf^eB8i*_%VLPA`m=S6GfK/\@1m.3#<BA=fj2U&G?XJNSl1RDNUN:beb$bj,0=qa5dN1<8!DX[YnC4k9<r6t-U=()"e`E3Af'(62S7bN\$[oWY%)MQ<+>':h'=h2t-lonah&t[DX2S/gf?In!)^5Y<.>oX#+Wonl&c]L[1Bhu&hW\?kgbDSO`7SiY(jlYSGldofgDZ*W.CG_0.B%;sd%gfAjXYHKpc[mJ%JNdMe:Wk@XRB4')l?_]sLnZbD!7@EN0X#?OJC`O:D)QaA$fp=5h7^n)g>^]qnoeahP=LUMch-bZE?(1L]RZ/P'%m=@0!Ie^"S)SK>i%eM%Z)dO:oFJmtB1Gt;LB(_1nY6XfGeUU,sC&PA=Gm\;n,TJF!R\!!B(#&$Bp[[J8ma7G@UZX.KEaY[>olF7A%B_6aF3.K4I5qBZth;>1Rh;;f+I2fkgCV9s2HN%p,Up&5q[_eKh(9[?mX8\)"aQ^mjk3ACbURf)t^dbN!\#9'jn,)hO=Ld5?0DRPQ%\6aW53dlDJD=mAnF4\khBn\GAqc9h!!ZHJ@KZ@D?ahQ5uhjpr\du\tsIGS62R2jl2DYe`8(!u13V,2&WmJ/YT*%am]2BS:.d-1$Z%Bb[qA,F*_Lok2k>X.8]RR`sSRFb)A!c)o=\\9iNE]IYTMYgMffVKr1>SOh(aHd<MTlrr!k$@D0n2:cGjA'rcS'I`edD05)EgiX"A%Cq"W!T#*s<Uf$=`09p^IXM,JISjjMtG,@+Mk_?U^jD%ZmaEEfC(Xf6EZWu:02`cSS^\Z[$Ad**[]7kRcinqG6=8o57Qa^(lbGR?2%H)KBhQOBhMlIBOl@pQ#pQa9KTA`pVel0YJFFVXQ@")Y4`^SacrKBOo3#.tCT0Y:F\Z_tS(]'$&)LsHjn]hcQC[.Q.rP=PpBf2$RV%*s/&Qd_a[1nC*H`e"$$Z6SWGh+O/cV"hoDhf\2F=T=uBH>4Hr3.&K]\:VFI0"MAU<bjMQ=p?9t4F5Njmm`WShb&?uQS6GVMIGHu'%=VUIQIT9RYXA#7afBLn7.er6qBmIsK3^Bs:oTMHPq"F1U8S9F?l0">=FmA^c;=*VTZMkR12K\\871FXU-Rn@?JPY0,YNH/,'UqhA%mQN0)4tRQ\?gE8=pS<ct0plF(PVeS,%X;46&^"ks<hG`A=$07p02?j5ltJ2`lCF2%(GFMN"i'52c7[=W=QZjFduCuaA,[peAt3L9%>ZrPM%5W38FIY/D26/j?+g.6_T0^f4Qs/3"Do)&DI=WJ#KN1q'dTI/HY!LR*1MDb(B95_&emA#cbEA@N.;<\eA;P"&1!OKiok>;A%ptcg0G/,uqAlJ]UB[))IH1QYD);H6Gn^jeshK6K:p6l$82H<4jB?;I$q*l0%V>&Gh7^_LFb>.Z#fDA=LW,D&*)[-uK>7>=IW;J\;%pM6#<(K?c?IXT1)CODo"q$blREO9l62-QK?STYq=9n1[=35$tl#e^."o6"t/]%qHcR^ilD'Zdm5q)-<rET0(4I?cqu7c3/RT[DN7%i1<\DHAYAa]DG3JLVQC,GPLZGF>]?TCR"U'UtLC25QVUW,d:.Q7kS%V=uWSGaYu-S?u-SHC1#pGBt:.6Y?#0oD>O./HumM)R"1@b%#NIlm0=IP"%u!G),3;MRQh`:YZj4O!jekb)$]sItPK@@u`I)0A3U;'oGNNZWbge*2.Nn#&-aVOci^[+e]"'WgS)CMgDVpdGCfS[2%Z>=f6*!5Hf2#G?8[TN^NJ@6A8Y^rsZF_D@gUl5SmXo(]&PdWg%gn"ZWGobYY9A%BFhqaX4%1D:@'DOSGcJ6`t73-.7HNJ>f`(-E\%8Ecb[Yc"AIj9&QU3XV]ZF4Ur!7%,:lr%eSZH^L)\2M>?`@cIbo&u&$[5?n!pdJZXs*t3:g9k-fP*b#O#'r-9>,BE_-_0_.__.gN2%$\A7D_tPp*r6Q+<2hF#<D%DCk&rTbDf#;$.ikj:88lTAAR!iPff)&ruf(R"*38G8<.1`<'h2!l-4njM0daju"2^5N^U*nuW*iAZ4%T;SuAB]W)]U\q@NjTu4c=e<-]F_?R#$)$*Qfd:V;2VE,:IPBJYOkrC,]j5[)8mZ?2cUnhnoBk86B3*`]0hg3[NN7uTE'iTpD"#[o%hIckfPSW<OWd^,#AYVK*lt+Vf<I='BTdtB*iF#GJ[tK%KbQ<)LV1<!sG/W[igeJOg#*9!m@>#3o$'YC&0<SHj@rjC3#l2qOoMfDB%@H(;LSp(Qp._f0WRrp!N3:+;Y:>Pi$No[R7]bIgJER4Ku<Z;5["!loSGs?75Xl72/(euH74ieRB]K*nT"o6<$:Mlmebb-WfD-ss,%[pOK2SHM]BkF4fOJ!hC__ErufEH"H`gOVC<OU`'hr]L-noE#JR5`=%@Q*0W\CZ`>QWgLHZ)`5.\8<Fq%"m]#ZZ)sqX[TcLReP_")%Y+p5/OQpcN"e]sb`iob7M2tq=Uk2<%Hg"puT/kr:q$.=dE1>`BI][RANfG4V@W=kVqrDN4B&GL$<d*>g'PFu+$'f"1<-B5K`!f/@%#eOt6MEQ/27PS5DNBjb/CEnGf*H59\lWtaQCU%<Lj.0U`_6X,%[WV2(MX/piccZ7,eAPt\f$3q_$qH`>r+CrCC9A(i2T5QH\CC&d%-BXV&DPq*eUs=;4<m-%Lfs*"(9uEN8Tb)b\[K<DGGO^7s$'>:GFBk9ED9LlLU"71XoX+@;L5Q(9o6gj2fCp=eEI9K*hiKI*3^N0i%VafpUpR:-Zg$ihp3PHIO+n7HU[i,\%%P5FU5n-S6i:LD=<SV)p9+6k)r8D%JVPF(ffE1!9T8n`6E'+mg!-X,0!8d^cr-defh!d`+%-b7DunC905Xpq\uJ+)BKi,t"X-.7o#=R(h+a52";GfHCPc9+;KrXX9``#>$$^9NSu`:B>UJ]pA=fgRId'UNIVcb+U^ms1h@YES++%/d4X6J8;(&N@!pO+^&I&_Mq?-VrDL<D8-<F86eI6TWZP!dkrWNpMa3O@AH+-(>d[TpO:n4=a',Ra8cH2)>N,o)R2XL-gqLXeIge)%?[K::I-Vr6Nu!X!9N8+>,7;5YpU;`:3a)sWE2(,_BlKQiRm2#p(iN(M+2eI47[qj'N[Yu*?XhB"q(s+PNM?][\7LaGPW(5f\S."Z%:kNl(m!BK+86sCAFtJi:.@'T3*9A@=gu7>>^/soce=i+2jTW[#63Y0EAQg*\!4[2<1Vu8$_t52,Z9T@5d=lU]4BiR;X6035)qZZk%ANV$kW:R.tf];$[]If2j^XkF-hBg7jZlQEkTs@8/>Ht3EWAgnP`^phROi##8mbR-Y\-4@q\/\:ZESO*#GK5O4prl"<>,VTD;U611%'i$@=mglPr!\8>q%gH2RYuW>.SKL#_[Ps+TMeh7p@B6+Wj'G0[F`hqOj6KcUAQ!Ee282=RriRn^*%$3'!R'8l'!:nr)3AOFcc&;*%mZ&gFJ2!JM&`XL@c.uWb,LJUcGc5Ff'(+,0BVSd((mg75d6d"[N8"I\)B!sIBPc1E_BiA0IQc_p]om\.eq:84oCb4?hKS+l#L)3o%PBCDR;2AF;oX@`N7PANn,'Z3PZ#PH-(LTbiF+oP1Z%NZlAn[2$S#f&GkJuPE0t*/I*\0H[V8ft//\Gu!K%F==3fQ(",PojVEPZYd%ChjqX-t"VZ_k)o;%TcHi('m\f5s&(;4bGB[.+g)shhA6&L772[b/+3_If%1&Zm#'[dAm]W[M1oH'(NA<Fm@1pMni.1hp(h)m!Dp$%>8IM7=<)1&*S7\oUr-<qiHohHIR)c+W$TmPCI>0N>SkE/@\fT_p3i;D,P@"4hd\6e]$U0FLXUtghdOuQ5Sqki<N%g'*aC-`fJ&cp%EEiRQiUVB?I9=cQ%0,1J?#%^AO<NRS).3jAF6LV^DS(>Xpp9j0-qfne9Ao0NM)Dmi`AXJnX=54X>f'%or+:6$0!t\k#3^>tO2hj[%O^<W=9TJV7>]-s&]@;_KV#eP7bQXb(P`mG2h:-n*pQ!8H\`Um^GSL3A^*0?ifmtohh6pEgo]f/@[2Z1sOd9W\p(&Lc`5S5f/"R`f%2W,Y"k;\bkXX_[f^(&nGlf*_&-qU!fnKBj*dY[;RZZYrFjm-(%F._O:p"iV?Xj^p/LrrU]I_s=>EnhWqHT6F0kf>1R'?HjTc_*q,%-^-nVd&8IIN_7LbF6LIskV-4[&ik&UXp&C`1!a=q*4kVJ3gM?WFq1']UNQj4?ael@3HX3tFOo+cj6"^BB@&ZLDr]s+KkJc+*1K>+%SQA4ipI"h]<t:ii2lOmomDpP>&sN]E109>'TR!.]3"H:!$/b+/67N,7Yl.K,AfA\3R&]dF2a%>"R(Or+-*R7d8Z*]spV,_PH>B_$%Lii3@Qj1%/;^s)fe*pBR>R]r)cYVuk5!0R=XRT^;hXC<kAGF8b+-tN.M9,uQ91/B5>CRMaG&p0VJqtJ-;Vn`81()DH8l:_O0Vec6%k,^&,;s"@H75Jc5]<?PEW#tQJZi.D'6,L*_"9sk!Okpp`j7;\D6%!]ADjR?A:3Q6^#ru1pgFuht!co!\ST-trG(*UY`9&.n0YpsZ%3&`)p_`'%MAn]0UBfbZf">AcmRa%o**Q@43A9,(5]\Da:S?K6e#"gD?3)l&TFm@>CFVl/Z,GQ@AgB4]If!8cgcE+7DV30@oNK,A[%!cMF@-ln&6U_dQb7HK)GZG6O$XqC7"I\J[I&:&Z,iV>.UY+Sd6C>)Y.*r$Sm;7KI!QjuGsPKU4gQ-^5M#C_J7"LW)j"OkC2N'2Vq%-\<4L>7OM5P`JZgkOccp/1O(8$nq@T-rq,FBZ0A8'4.40`PU(lLSS&%;$[aJo460`h:sWn[lWmZB$\E'AZa_jN;CPam(PME4Bp)p%M'A[Oc`%0i?DJq\5@49M2RdUPB4B0Cqi3bBlZ^p>mHb!W&LAJ&.e#urpRUfk;>?7p,#QXT1D2i;cU(lt-YVpXMHejY6P)EZ>dtok%170%YWNgnf1-RT\F=;1$]:o<L>PXW-RDNU.*32te(cO61e&OiM0M[X!5712IF%IDLb[J8V[U)0pT+>Lom:'EL1uj)SH=jg^4Vj)R%0uH'o6[N3j11lR.-c6"G;eY>pa$[uS,q0$jgs4l_%()]P18,S/b(SsmRJ.VSPWL(Q)iVjcm0,si!dH7=,-s4;7)gfe`;Q+G6tGAH%jkO[BfL:aTbhaUg&4%'&'1a"r55?,o4=(j9k_MnV:)_j=&K+iU2SYMK&1/Y_B-?A#CpOKrl+*]sbUk-,7eYo:DHuf;\$<RfQ%p8i%/Ft5da;^J(dpk.#BAYA<j5-aJdq\t1'.\4T%dAX[AE_b<r7G:"jt8Ue8)R3;*t+)]3?:^[kLGQ?DHLNnGMN\4D)Q'p;W57\@dP4)%_Mj[>b'Q_WTg@&Hj>ua!]b>9(e`LCq7P?raQk).RH$uIK_Zd1h9f*q%>8]@;2*)g3AtHu/q/CMKKe"BcjQr"ZI(1=U;Ferdo?S2B%F?Ws:[%'NJS8IqYSuNAI+"m7I,\,rRq2EMcqSK'"iS5ff>Id+20C,i)[dc0>;8'qS*-,)\K0kl+fslAQ*Q`f]NjU5i.cX1qU\<W'%<L=Y#*8DYk;DpS8-TeKa>kDiF#g!a@Y%JrH>e$+Dcu0uj/5ijq0Y&eq+?&SHB=,;e4Hkl\@hAeTEuJ?gHI2'nW$6;N7U2_]M'uhE%PM2IQgEDc"4DPq9*QMBCYf;S73=V?f$^MtLZ/SG!W$Q]b`'1f.kj34)*ZNCV/VY>R4OhYpc]Q$BB+GJl`(VL>(rO5?1RCJrP:m\i%0,;M,@M:FhNX^EDE*,SEFm@X=NHBi4eEYPaDnobjN7@18A>DD::Eh"uCRIR[.cuX`+sRig)*]>\C[l#4"s!ddS\K;1i*X)S/>0A/%gh,W=L.a_Zn0U9#'n<^[32pkG>&<c/E.R%)d8W*g*;DLRql$K5rY1iD.U5Z^Em.Lm6u8[=8VJ,9&M[`E>e"4`j]:8n/ZoM+,(.eE%6,L5h143E!Y?U'jYt:a$XP$umYtjQkg(W[2V&:a%.m1pPb]UjCn6/`^iW;\[MfZVd1g@-l:_0bCYU,h7b(6.]FZXQnpTT!@q$>=P%]e_;,^P@K%!P'=orV0m7Gu]8F:"Oj:'m"!YWH,7m;VoXlkDGO_%K2StB3r/"G;fmkg;RB</,*'qDWUW_&q]_8V2WhsD[_rNSD;e"%+aI_$WVbVCgPjVC'6cjlSa<fUG'qAdT=IGAO+m4@WZ@>jFq^$If:/eio)&X\,eI>u"_ZKHV:sIm7UJJ<m'`6SY#4Y9B$6)q]2<LP%)dYC=heL4[JC48hk/3A<`*?]FMlS@85oFk"o^oWdo+79tGC(EtGP2c;@Fr6'n8$ObO7/b@;%(ONX,#dLT&'T/>!BOTk'Sm:JS/0W%b&^CSVZX"'e!2dd^+hfYp)/;YOt3eP<#uOdb@)nPhslAcA?,5do.`\9M-KdiHIZ`^=_aG]DVLQ!r\(\a[`P/c[_qiU,\#ra`&bi-%Mjf=TA+^k&<,@fSa14_.\Jk;k3BuhrlH2]T,j2':krNk'U$H^_'Y$SP\G\+X(cRJb%*[(FhaY7HcEA_7RP#Ok<'H,NC]nUB_&iFs%'lhhj(eU=T0+GO]1'An!jEQXZZ<`O$L</'7b%Et5-C`9k6gnd,pt9b<\T@ptVMq'?k83Wnmc'aA2P"2-?*'5;LWZJ%?E]l02I2EO%S8:+>=AeD:flV\gLCYbnR8)j"&m-cWHgXZRS'E[Rc;2<9QVHZ+2^]rD:$7j9B<T!D/=VY;L9=cBCU`]lZK_:-l's`WUpB7_7[HNF%-^mcm^FD;/CcXeF&fa*!aenYK5MqZaa3(:NbG>TUPX`clo;a>qA7a0AF>6jAa3:FP<eVMX.>ii6KL8Wg7Q+P"MN*fokEeh3=5P?m%:$7j9kC6Fe38&D&'b'5`N13P^Oi:WY$-F,'4e'aCG#!8m,TAh7c7bM:ia1"EZK_9V.--?T&[U`smTR/CnbgNpEl:Yd$!qm!24Mmp%6f'WdLWZK8UD2\fL1I*k*C-53fAF2[O)BjEP'3V'WJm1%"Vc=MI7I"TT);I[ebNDcPJ44Qp:UcppXR7-=mI`d\bEq#8uGQOgoqVX%;((ES2g9kjYUEX4J"3S)ihgo0?9oO#.3(XO8.34Sb#o!J_-8@C6ODpKGl6#dA@apu%<8T7$'i[iB#g\@#PT=Z$%i\.c!@PIhOE06%i*Uh;MN,7j1%^pHfWg@>Y.:n%9@u[WZ."qhY.5KhJ+BPigj)X$nA"1)\?MIK20[G,9a#92)![PO936jSFQZplMSA4*m^[;-rNRSg%o#@MnG3bKW2^%P/a=Ks%1qGdGj6XZrS.(rmbD_u_(V''ULqV@bO`%P%,#8teHL)'mID7?R_e5h)h/pj3G>T%*[>?HuN`;ZHX<a0X%q*]nVVWYT07<iK\pdX"?lTNuM?XEbD`!!?$h;CZeL4[QWm7!&C)[\'QZ_KU0IlWX='?PVAp5V_6a1V)(SPr0r@4Ep4>/mWkGSAV(%pEWMnU.O[B`/,hlSpNCjOF%Yd>E_)_&?GB,msO[Vj(+Y[[W-tgqkf4cSU2/-8]a&W4skpr\]QH3HM!S_2u;2-hX%-HA>XUt4n^m;%+a,=;<-AhE'f!W9L@FCP`ZfEP%=Yba5$mA]gdHnd4,0u2EGs+@=se5]!52,[b_UIdVaoA!Sqb-f8iLuj@V@7/d"r0hD"QQ4n7j`-%cu[+\kkUL]gi1;;$(ckb\`&RO=TmW%2p=)e^>WtNbf:=eM0s3`)h/b9gi,3l9mK,$d\/V]"]*#ZDn)ROrrer.*`8=aHQqC&];T!o%0b\?+_m_SDQ"(?^j-Vh/\Si-SXF9m;h?#Cjm;&tF8Is-p4IeZC3n0<3J'Sk/-c1X2`3!Z'pW8Sa".O'qc>TW4jb<)!*'V,cGs4;D%%@?7kRE7YiqI31:S"Z"4I%tZKN3K3F@kr3?PC8)BnpKs"?pcM)@9)/tc2biC*c6q&`L3"-ED&70=tu%tMre$s`(a_K94E58#3o@>%b&BAD2o@!tOkf50e'R9f7$9#WUgY*^+($`]r]WE%P^)ZOjDnLD"'9;THRsW+lg=13;[&e7FZZ#W*j(q&-C!OobiJpCE"_Ddb(=Y=%#I\%DEl7rMK4b`=;A6S.O[Xe>(_1ZSM]WN^dgn7kG1J9<T42dj^NWtPY4%pJ2AXUlf%Md8)LU:'Tt,S1&!`S?[m!fdMMD=XH&>b^%?"nOR)eXPnY'db9o[W=8+0'A=_mWg_^\-[*EHt-lBmAI+QXqnU;5#0b"D.RHdkgi'k)oCEh$I9r_$PlqQ&Zj>kk=Z)V5I07q5o"r%G$f=Z62.Tp6;l9-eDP_ahOHdajn;m$Sh.q+r5O.@+>k_aHK/8\S,#QtW7hC2?Te^/<1?W58#;QFI(8@$7^m"ef6m*pFE]co(XT+c%j%?HG2L=M"PjZ/fq02ig\C#?mZJlqU)17m\^TeKsT7s\cV];Pc?qImW`2HOX=]d;p-jLGjDYM>7RY5#).c+G=p2Z.Rl7@\":Ya'"%0fMi/;:UVP25h45gLQ7IbgsX0Rg(&^51r0Mjt@1S[43#iU@5fSmc9\DWD1(bpQGF.0EV@3G[%4rZ_UF$a4pt=6)X=1%;>:<dUI$p%MOTkHYt$S[5?V"V93r3WHD@e6@d_[M4GscH#52a?NtTRoS8AeE:Fci"s![CCo;*J598d6=F45e4>a6D^(Yn#M4Ec[OH*:'=DN"b:%LqL#YkreUo:U`t/>@IHbhZ*s=Jai5/fs1-=NfOWl?sIYuX?;=cl_cLp/;Kf_'J!\"'B9YX6k$qklF$D,E[dka*,!`VGCc%8@5j<Y%TIU]JOfOc+K>BinIS@6ZZ*T/l"B6n(EW0BB*cf;#Pja0%(I!gro^/K['?P./:-"4r,Jo]Q(hL2PNiq87Q.gClIXBjD-8Xao$cY3i%+?6tblt"T_f!l*ei6D*Q&cqgl-rBPWAjWJemPRG=atn&f@.^9sZmtL0RBXiNmkp-DbK3;oap)cB*jq16l]ks[(7!'!%)jDk/r-3(%`6.1<SNK^i!\$$h/fa*!%X"NfVdDp7!fWTNkaIc(B)rM%i1C,8ZGq[F!Xr4WNYbKOPm&!`#;G]Qp7Nmi\l$dt2cT,p^plCTro`pn%blWhs:Hr,&579/_%U]\e3@"tdD@U'ml<AKKi$QETYZK[Sq</kg=5q'2E%,->-V%]a`Oh?fl6M8/>foP_bjN5n.A,e;UjqW,^4?*C%-[[B#0N#@-0BMesV=s@_b3.2^s4X;s^6VZ%3b]bG1VkF7CoH=\oc*=8W)<$Vj$hJUXaVLe%HY.P07<A#7+QGGHi6:C2F%1)V7k!@%%2J28^W<aT-??:spoT!4jB%A($fR;537>KhIKmE*X.SPjZO(Fdp:JjnPYA7=G:Nl1EXd5r?hgaPA)CY8me%MPDAi1T^[S<dd`M^\%oaBZ\+)cpLoY#]no..knf?Z;r"u9e<3I-:)rLCeh5=HB#Nt$06?hd.rAYi*Lh4<Be(F.3IlX%>FD&7C4FO\!QnaGKW46Jcr<kjdb%iu;1`q;94Oc4"f0EFa:WMU`:4qF+'#8_iVJSt87nnDiEl(VZl!^WB"`j'KJ$;S$c=$QU%$V'bJ6^[PJ+r%j(^^Xk-o*/r$4RnS,U%e!1TiHgnf#Ds4_RE3EWY);oi`h[&uQq:(Re)ZAX`oa@rLi]b*/p\KU$l5-bG2dG3,4mZ36,0)$LY@%(,IYm\NdkLQ'^EKr3-C/5f%hs)"ZN^_di2kDlJpKkTop[O5mY@%(,I`(!^2sU&*hT%S?]mfBQ]Z9sGB;Q)eYFf/UD5\+j@bp>dmSK*gXXA(k?hgaP&`.=$AGFMU%rOA>Ta1Bl@W)K0T^=U\pNp'Wl)Z;k6@A6nup[O68%*rha)gBVnFg#.;31Fc`@67K/^=P$`g$.PSlPCVoEo4trqRq?,l!oaWjeKda%]%8UjD5TINa1p4Zghlf2b#.X#o:oF3SWH4olPJ$R*:mLO=M"gY^=R;=0Qc.9B=BYY]mf[jqVLMXSMi^`]meoHZ&'lA2s.f&i@?f+%`Q#L@c]+8M3'"8Rj13bpHuU=hFJ.:\qM!hl8'gQ?s'@nt-3&X#\gBW==XeV<j_u$7*,#iNAXl+]f=*sK:/iLCi&+2Dj8In!M*?cS%*e'h?EFN&9CE61416[\T2=K+*0=eMY(a4B6fBbdeEquF7]l$p:IAB-1m%kKdO(O(Cc)4<p?p7S*k&>`--d9%tq7$6],'Q9F.R:9$%UNq0r0Yd7FRG7Sp&pE,m$Idls>?^<c>*Iq"bN=bgnl),C4T7NC^HZZ*FZ$)0)2FKHgjZDq;@g4$Q`[U?bDk6OTm$BS;*RsnYNG/c%B!)LZV=]-"ibUiAr`j?DhR)Sfo<%IorB&ikChZD=l_BHM)0p[89E2T\h9GkF9]%AfL\`bD>*@RLIX,p^Q-([BD5O-'n#OE-H#?QZ%D!c-IQ!\HV_R;@Lf'U2=oA-!X%J-DTrM7.#eCXR23u.6oE@nqISWaT..4afQGJ;gYB]EZFk-Y/gY:I5,jmM'[/A.Ns:e[I)luBl=%,_'.=oKm!X@*am9KH/@prbT%oc_NmSqCu?JX.N'mh-I,.[(:N"QWZn*s-[cU;DlZEh6W83;a8rqEeO>?%U12+0ib/W>bm(AH4=70%D7@@<nOt%gg.B\KXKm(+eWnqgQ6=cV.']qOMa+&M9)XKLT36Qs5.f4&MRBG.I"-9W1Z,78<6XUQPOeCDqugPGX`$/%DB9GT_N'q.%KmKo9X_R)(Re,OuViJlX[niJD#H9??<T1!,cn"Hi?U$30YASOQ)g(hMRDYiV/9U70e_;_HS:l9>*qpj@pFRIIYNFuKDrNm9*<T%.%(AuYu8DZ!*SD=\Q>g&;&TZ-?2n?\Lg?E<-;Aa.QlC3P?M;E"JPRGZ]R'shs'c\]#_k^J89AG3(tK15dU_;^s_@#9C&Ut=u=H2^+-%ps-8kEf[Z<^+mC\BRtqEcG*P:O0\\9GGSn9aH??/`LWDk!EI!q\?f.sM;CH0WJckq^6F^!5b`#N/2jMR;9/jC@+&PN&b'=Tal<8k%"X]7)%W\?Nfa&*QcNNL;pF=$M%=d5*oG#ORH/eu$(#,$01V!o5]\?^I#1,t>>[`WK*p6'Ens1F</+ogaYMt=<3SnKhdg"uPXIm^c%&PIsL'Ko(Ej&\UUBDLMe*Os4)YhDadWE-W9>:p[DB3/Ds+8UGaE)C:SUGag&Xo!gMb&c]o?cp%;1ot]-O<#)A41V[d8:Z$docS%r%K.8QpmL*E8F:)Cu,X]=HVll?,2^&.r!r]QM-h!_>\Wn4c<d2YEH,fdI6Nup.(0MjQ%pSkB"QOW>>D*SFk/\dG].d$q<G.2)Ce-aj%P)[^:1iU!64a:&0WH+ojI<h):/h=FRn&7O5e*`Moq<I83np>0?ZEdY7ILd^kDVps>5F-cB\s<SsK2nKnqtGBS&G`IoqOAd-\@k<<%jm_]Qb6/#]f4(0+j'\Y<II/ja^XBfRc..dmV6GFo9RFte[s]srOd<F0)a[^\59@;sbL]sRHWunM(QToiG.,O[m_Vb'HES9ZUJob_%WsnTF5j1#?Fn<.7B@te['26-dWEd.lFYZT[?^T14b&<p0-BXC7e&9Mu&rEmq5fo,KAt\-1r`ib4;=SuR"^on&eH^?Z8jHL=fQ+L\%-:\86gj[CSHsnDk=YNM$Oea#'Ferc,KP%=kqt%>\oioWIXVY4*JWsASIu;og]#.?Nh^!dT]r<e!<pRAC6%.QZC@C2^9ePrbPkJ/4%!Yd[2D6A;]K1"hgp=b,K^S=4Q^,Y7ZfF86Y*%fS#[l_cHINH=\I^PA1(LK?6FXGbLca^Q;h,?OUF0N_UpL3tZ$P!AM-.%7]Ru=,W%QHC3'RAn07ga7JdV6X"\M#PW"*\F:q=&6H-V>T+OC@QC\(8%1rQ4!1DIah9K_jd2rVVB@mZDj0NA;_snM4+AFEboS)'e_X%T_qX^%[`uc+ghX9"Y.g,b2d>28Qd)SAZeN@9b4#/Sm_-&13<,D=Jk8n_g!'H_Qu)SZF?Aeo9q]bNBXHEjb]]\nS+"Vq:A;3fSDBSc*5AZu%'J<##9^1/Cmu1@T^!u(I8Z8Ii-)B2Ih)$i,Use#fL>0h,g[](Cf5,)G=Y?"HU#U(;T'h2"%d@r5$T4M+?B5W-#a^2,ka;YA=GOd0%cF"sUTobZs"JJn3D&o6b4sn^CP,c5)6#+j=K/loSf!pgMV75WAc'='Fk>La7V-El*ep<<AFGJptTpmP-Oo4+tZ1Z<'L%7LiMB;$a%p)tK]\bF&Qb,@FD=1;*[4hZ5^[^fYG2mtp5k>08_-Ok(e]9"\1G/"s/8uX7W0lKZ52*gZ&p$&QJb:,N,YH^PXPhI8UKB^(SHqKrs%oq0p%a7ULRj1rdSFPYL;pl%[[1Pt#^3$$mY=eFeuF7jlo0JeE,Ku:jm_VFcu.f8$^5V[S80(V7h=R)XM4ATNERilD][^)kYA*GG)%:1Y><&?`.a#CKakiZ!^'N6@t<EjC%h3fJNhaZb`P\Z3R2?gY&a<hB1)WUbsjr"4:]O"=^k3]sieZd.qEm;UkK,,=+6n\u*!Pq9TB%dY%EL`Z8T^5(bQ$R\;*[O$)1Vc8FObEQ*54TamC:crtgA*DUGMaVuh,BX)Qg9*jpuo.`/&LZpEnY_:P3N4(T&@`s=N*meB11M]Z*%"2,doY72^XW&*T>c5^JWXc/>XMd&2-!nZi5W0$BPRt\?#UIo61;;Ea5gWOZrkOfq5EI0_"r,pCi.<ck@O4ECYdnK#(H?-Zdn+LD&%?B1iQME.fA=3R)=>4HTNH=u@&I6F&jDrm5OPr,tTYjI:.=bh:aag"r.&tQ7%Yp7Q\FK`@0\GI[Z>[;PTl=Tc(HCt&\^N[s5b15c^%Y'a<?qI$48EFY)J58MX5OMEXfG?qnBg[`PsfFd!O3!)ACimRua-:#=6R1m7YG%TD5NF#8S>]03Qm,[@/UU[k?pN[P#L*;PfNJL-k%.?P\+E/Ysda^0['\pG.99s(=#X6uOr_pUV![3r#oL9d%e#%cP6bsPhb@R#OTS4F1Z-O_Y8s%Q9/Rb(?&Y+u0i4nEeMk.lc!h+td>%"RP:>a,U0Gda;6P*:gXQ9sh;aY>W7l&31*6,B01G,P3KFhY$!NP=$"JLUIL2X';5FVN8gEe^^Mq.VOq2"&M,C#FkPg`dV>d^!)&=%\N5M<6=kGN?!8jTf/2Gnd4b"n!;=B%i/[-+HGjZ*rA%^&M6o1s.2KBVk?8CmS3GO4=03O_qS0(<U,3hF#9-8"+hA$oVDI6=`XLoS%9g0Br69UH;C+U=JON>5Ac*-K[PTEHOgM<E(<TJ)HEM?fLNV#1W'Nl:k;SN^fied:1_dJ$I1HRVrR#a)7''Z*ef8/5lOCMeiQsY&)%Gg()PN?Q>sQsM"4Xq2ZGRpI=70"QQ!QJXphhL8('ba-O"%-\e/(@UBE;i=AHP0,u?p@.6M.f8c5&L2Nj\8JU(_7el.k2hq\$S#^=%#Haefp<6_gpc$=AT5E,0pH%8H]:X),85D9A0ku@e@W<\Vc;438f.0Aa<(HSC-PE?HlSsiPBIn*X:(6tP,D@=sC-FBW4*&uG\#2`V%Nt'(uk_TPtnrm9Q%.IT@?&=%c#4(;5*VdUo?qS]4N#!LNFh3ir%HW>S,SbCc7h>5lr&b_*%lSa*ccm7FWV]@o-0+=u>[2,Zf@5Dk%;ou'<&U[W!Y21g\k`>CUfuC<X/3-5on>TdHpD:1!\Be`SD&XML`7R%RGUQg%rdKah-'<,2k7i;JajPDR(Bf`<D0/!,iO;/8q6RV.%.5\*?A'Ai]%I.)toMTIcekW71GKs!s4#\)U9*7tESa;.-2[>q4OSk"=:PKn_bJ-+-AD$E)Rt#S=X]:sBGMpTIO0lncbeQ;]s5+f@%1@2N+jBipP1@,j/T@gq8_nNmjkh/2^m")&rW9h4p\7_;CQ@nKh`l1PZLO\^?>]B/[<sMN:o^5D[G"r\k\%$TfY$$MLgFV4rdA3i?%f8_2CMANH'Iu>1q:4I%DLK5-CBl=_NY:&4t%6Ah`m;Y93YghCoQgL>M]'f3!hWla8%\?\T'lOiXm_)Q<3N[lZ+otEZju9m3\+2X/%A\PTp9KSUX\"DL\j9(d7$sNU9@*m6!7GR\(C]^^J3(V\7Ek@H^M9j'$og4qJ"[!oSmnVT^m61i#L.$3V:#2)<1Y5>cesp&\?618a%;u#;%IG*#\1G1VcG.pYZds&9=n$uTs1&j:Up)mD6P\o4/n!6SV[RIHn'K2DSUf;[7Zduc5f/f>K%Q4gQaZW[&gEOM3bRl#3RX25p%T]@+;+?#kIM7qu-*(kf\n(]8+K0o]RA``+SfHu45R]1*G&KDG)S#>lLN!.[j@i#H;HhM>*eng3cP"6eT6#Sp+qcfJ:Rfkg6\Z+JQ%*^67g`I6'rFUB$u@f?(c&OH7*Gs6I74q-G'3@\Abf$aFEG:2!Plmau$KIUG15l=6g$@7ua0NE?J+I@Gbk5u`k\2+38+LW)Aa+7Gf%Rc@OkUi+OXW-tO#TieC6T[_)CL]`q?F7P:cR3.3`_RU:-(0SU=c^+[=4*5AdPBCE*01W$okK;0tbWO4<HkgW]@\.P87Btc#GT=@r%3*[=`S/]YD/KB1B`Br9_"ilt)0_W/sQ-blFWc5I'KFZSWTQ>UU$C`]&S^R>7I;<*2>qY.kT2<)NZ>mR+oTY9U@j/P.`/oAfA"cm*%n5rpZcgX%Tg5O@rQ$a(&%9C=8fLXiVH#1E:"S%j4%[>#H=N&S-WO^Hp.DnI:4h3(Fn45`<,KHY!K#<jnEU[`(Kc%*K*!`&c/WT>J%a<@=`i+V1j_;u85S46g%<?i0DX8]`&B<IYNdA#_30@F*s)*V!&o)*=#m$tGb4L"F;R!jHk-dF$]o#!j@I+M+]b*/HBBZiO8p:H?Q%NB;B'!bq2Vgc'Pl4,`IgniU*04%nr'J\nG^Fh-;:ZC5q?4!j'PcPKg;1X6)S5=S0-UU<PY&XPMd?<hLln/601]6WRj4L=TbYTA%p%NG.*fHYpTMo!I.(B"8.ObM0WhAEO+-%hBq\%HmQU+-LYt#Jr$L3u_hr5+L%X;"2Cpim[5j,"<SJZdaJOS'dSU#\FV%1r&9lBapW:%dl`J_Li46E3+/X.HfOa]</^L3Y"k1f9Y:Xs%Qeua9+$]q"dd1XAMuGJm%D/I<\sKa:cNatF\pfL9q=BAE--uL'#:"nJ[VAu:1]]K%.?.Z[l+rgJc'I'JRAk*hhAPd9o:MF?q6"mmfkVBJn<fbh.6[YmD-Ddo:U7sX(CJd9dY;Z&n6T$'PY.iBo[L&8<^-(3eG]62_/H&r%%Z,L+P.]ND9t%ec[#4FsQNf\C=H1XF'dWfbhFd+G'C9XB&hr0C@crg/aaENGoMYOU@?][A[q[:&CA`*Go/p=(R[L(u(#`n>OkYog%1=(ulV&aS?BO@9>eCN0jSC=E!RlNsD5/PA-27hJ%UA[gGb8n;I#ZH,T3N]r!h%g[gd\;l'<6BttL,5hP=6j(<BT1AMmu&JT<h;*H%0NG%EL`s*<'`n+4'.J^m5\qKfpb^<VrW</m0$+d)l&U&qX".!D>[_)RH2cP21Rh#_.Y^:R%OTdB915tUkY-qe9Y,H*_/19/pZlPb%_+S0`J@Xd_:YqmfP_&^i2StM+FWI7kabGIO#r]T^<cb9@EG(LD,\I]F(2HZS1!#I<$kE"T3MHSR@u-@mgR%L9baeFf7?U)7di[H^%'IZI3-Bg024O6nU[uU\:RWnj('?K]gJWJ[f]q3R[6VA>tTdTGE5L"NK\D)7H[$'+\8g7Wp'ue?sX^12BlPK5DqPEo?cW@g1:G+$d%L%F<lY+_0HDs^^k8M1-E?Z[oT5nt(Af^T2g\Fp#$),U0@DL_(JT<2*d^P(?amr!]8]X()u.)CF;>lS'*q*Nbq`WpAhaJBZ%QHq91%W0CHu%OKV^^?7.h;;"%ulY^k0V:*quAYI,i0=K\TII4G(m2YM1m[Ln4@qYHq=)$P@=68kfSPZnugg3t2$>XQ*r"_Ahe2cZD59A[H%$8m`uUC-_f$@>rKc'4/Lc#Ws=*q"eCU,sUX_$65r]'ql=`AjL[s-j,j4`c-I5tjHXngBp6k!YXXS\YrN:F[W,HGL2f.(]nXrW^H,%@i3p`j#fK?@I*'&#(Bm9oXkBSAAH=#S3K.97*ThYkSONB&]?I3D@[`(]ND<*C%dZ\s7W^."%iN)+q6N?MA*)=[<e(j1JUYS)[r[i%\b\a/\$hU.%X#8nD+d.Rc(4"g1h3`DWkoe'^p2MW0g1YM7F5Bpo@<pWq:?QOHp--,^peZQWNXo$C#.R0@'!\8ZLt>sO=Jo0I\&.=%@iOq$0_fpWBCC<+$eDd7OW47#Bl;s=h)_:(-?EfY4Jh+OH4Ip;iHO!2(;@.X7q5MIRVZ-H;L-gu4\!UT'r-8BZQ"=&XO;S2`,0L8%*kkWClW_Uo=Q5>%p@j%elmOM.+16Su=id\JkZ:DULR"4D[)nqR'mRS.>OC+L:4U+nUoYj_qnOno$Y""![Oiril`KWVc$Y#7ZtQJ^%Wcb[CB7h2Y5gjr9_:jXMEIhqoYW0h`9M(1NW!mUAi74gE)CiXo.7>BkBrDGYVU20Si=(u[bnT>+9#";fG`-e(j@lc)loK`6e$Ju7%>$`Q&WFB;Y?@]ZYXPk<R_cMt;PW]a4(2#PJgf!1FGq8L0AHY%O[D&n_/N'sQ4A1[IWCk._N3X\XVprAWJt&6nJmCZPhVNuYcTg*#%P+e^?00cNhag3Ml+q/iJM^N5c1Cjd#%h?]YfOOAQ-7j&VfB9l+mOSu-C=%(JmLWT,A>a%A8^7YZXscGr'eZ`2#+#'#>N7:+i>'rr%cO(Imq"7kOnlt)4QXtmW6ubMc7?.ZJ?2<"p!a0fVLetab4]s;+J.59UPViIeTQ1HtYV<s,@AEVRk*Po+9ASQnHhjN/EE?]A0ig=K%l*0:+bWJBaZ9mlp8tcu1(7d$A,?D&\(C+Cuq,Xa[e;Wmr^f`JuMN-2HV4gHE2_-\pEP%A-i'919%G)%4##fdsn>'?%`8Rb9<KPK#%c##eP\?e9/0VWf22WJ>gPq^m-5Qtq$h!Gs3V8+P^E8W5hLXKaT0h*C(5=F)G<$!%3g^ie,0\"nIWBfOQP_N!YA8Yp(Wrd.lR9[G)%mJWc7@eg2*j@i3Q3FO3a?]qJ0HlN@\l]o@tq<XK%aTjQAZH2W>(n9[J0M!;rP[Y4U'&=!?S<VS_RBURf.s:D\+HOL4nTd,5LE.61%[DUuJXeNG1b-!4iEM\\[jYV!3(83\j1R/1M7jEAcaGn:R&nfuFdN]&NBfN*0CLlF:K1!*#UXAmk_F&luHag3AWE\;jLZPGq<T\ZL%f3?H\^%korSp+pPEfQ?k`:V^Z+T<SXjQ)<D.<=G0S/'A<Sg/I'O95limqX"I8:IiM!dMHOk@:\jcZk^f<``X!g]MucVp0G?"6C-f%S3b4Z.&QB!<qlDW<jS-eIE:\;[jm!].D2k_ir!'ESY_b1&,Tbc%!,hfVX3naO8/<V_.g4,SrWU;A%+PC!^4?L?8+DQkdoW2G(@JT%7&.0LlVlN?qfIr9H0pF/aeqe?`B6NZ3rkRVX+ORfCH9@7d%D34G)clZ<Vpr`03Y9`<Yk'F+n`sRN4*O9jrtUO!K'E@pCbt@@)@*-%0CkkhBsC)eru)&iB6Sg9\%6gpdaco%Q(rs1=IWq2N-FG6/,jb]7'9i9p6%0q[85u\hWl`-NjuEMF8n;AQ4WM.Bi"n-4AskAk,$#1%rS0Wb'*QIGl8/;a]rP7dapnoDT'nSB`k*5D>Uhlq&*WPtddtd&X8=2a@rpBF+3T%7WVs7I.,<LX:1%>1;ai=\,@k*2\tRGk^h;B-%67\s`G4"56A"M!:=m8gmWsKUp:t`<UeR%BcPZc,/YC[R[j5S$fV:;#]/"Bm-b`uP%2Qs5;4`#Dh:USe*-?4WPi;'A9,>[Y/e\LcT%SYK14E.Vi_q5K5C"A_i'4?jRIrTt7tg]."o@KkKA'uf?VX2Ze'-IQUYSCdX&*A!jIDq3_aXb5o2H8cuol$id4LS)/G'I=tQW@IgB%&UNr8QmZI/@O?@#L=:4Xd-[/<DuE/;<UKcW/gKTBnDJ>rP[$u3ZHl?j,rlLg#gZ<c*bB:bnej-/:'erCr."<^i[=7*rs?g-KTN#0%I3o)O$l&I=5PF$YDZKa,'SYUVo);KWf'qe-KOj@.h(ZgDVTChu2T4ZX6C(U^m!s^;Op,p`[9u_$q@4.Q!50J+i`SUhWFf&L8V0X?%gJ>o4^YpI`Vr;*eVQ)XD1^lVN@CiNg!&JXlX%=cG(]XSK6KOZ%PQe!Y0i_m^aD$fG!^t7HL.WTr[/ZGR"Z[r&1'Pe*$tYZn+H^t,%.&._Q/4.'aWg(t,qNd@%<<81Zba`(`[#f#P#Z5YnRSG?\F[QibOsuOF<-V-b-qH8$OIe6b67*piQi^_+r=okeBMC@8;t)p`E.\WC%:6Go_P!q+'C:ZaZ2FVjdP]MF'd>mFFXQ+Z%P#G@$g=+!1W,$p\#hV_+"?#F?JY4>]),ip!64[%XZj1^kRO40bWJX@VBt@[b`&1]6%M?";U&d^sm2>S5MY:S-D)i1[KRQ2#cLfU;r<?rPqd3-\*KU.dgP>mrnc;9Ug&r_[Hb&lPM)*0,o3CQHT!Q6Z#dQ%UP<Y^g?NfJ[d%jYRRr`QfnnZ2d.':!agVDclJmRR1sKA;M#KF\sGuS+JQ_-PAU/Lr*JN*ge8p4&a([P!s%QA=ZZ(Er^b'UU68YoD"n.j^^a/8bYop%^euq,#hB+u%=CMd:]u&=!9OA_n3&'F!tRZa^dg0L4\de!_%%tL_GD8(80Wus:,2jl>>1Q>_"jHn2%d?RPQcA*AElKGl&[XP!=.'R%9c0f2mSsI+qUB\MpdeX;>)C^]R@MSKDlsb?-t..b$3,*R]YL.C6=Y^SU5+O,dh*-b\<soGYoo(BYhlZ.c%10FEHC35#kAL=(l/?X%N0:=VdK%@MOOu64\cNmg;OF17_5#.E2aCH.J)"Uc3CHb9f*0\6;%;1Z'T(0K1sl=]M*s'`54S(B6ng_7>pZ3O7A4FWWaOlsM=q*!%"0G2B7EY86L)c3b`FRH5co_;n#oO4B-9V@mW:L!f;JZ>]$3#.8O]gG=MS'Au71e]V+J;G5I#=0DMC=BNI#99:RRSP;Lel8L<<lDI%nl*nG#Lk"AO@?;gGmI)T2agY'9,-,7`=sRq8j[egVPU"CLb;O=A7Q33FLn0(ACAXTAX`gu)$U]3VP[3rTEtZ5lDeG/,&!G1!9h4t%1,`d]kfClOl@)NlZ,aQi:!kP5g+Y8cpkim<,0=(%g(i(5'aiCm1>ebJWkhMEo*\uq.4BR\aFBpK5aPK'&_I.>bZ1OIGmK4#`D%-/%#h;Wa(^A*$^F,rm,FrF;KNS`5F&\&q'b1(nC(3[%PXJCRPTe#ePU)HJTGBJgf5-hQb(dNmW2g?$RhR%aCeAIsl'MU9FFlF7*`\ri%Wp570TJK#G8D'H3_=Z-R.Y.Q`PQI3q)*CDn6CN[sK"u@h^8G1-`%GUdm09Us'O21lQqI$)%n!?@5`u8M`Cru[#t.1<8*7%l-3Ct>%$IUb"A.m>m;-<l6l)N_EJ6%n?!X+02'a7>M72&B&co$]A93rFNC.&/[W-DceTF(DTL7'erl@u5cBE05R]+fui@B9N2MPqX+N$8SQ%.tFS:R">ns<g!ngnU8<$NPT.?$^$;T-N$;0UBmMm8W65K6Xh?E2uu^:jJ3`fW#gJlle]+,fg?li]2/d-6lI:^Rg#MSJZE5MV8+Y5%=A?RtLpSMo&fH0nOfbbm.ObJ.Y:NU(AkFg9JgF8NGmHnQ)[6MT9Ve\&)(fZbOnM`u:68mAJg?]u,16o)727*%3Jo_`QgW.%&4R@#%!kso:()!qN!2EBa!M2X,%Ib'OAph-S30kcZWhJps-">0Khf%QZ;'?$LQOm^bP-Io"D&].<2$sp`;.iA(BqRV>X<jY2!XQ:9MBgO]%6A5^njMBaYZW#jVJ\<U+<2P;:'&=*t2qVmS"L:Y9l&?E,1:;VZ0HmP1SW*iY+B_g`s0T6R)S7nj0\Y$EEZi.0RP(ntCm^n'+t3["%1n>oM'%$>P0SCGP^'E+c@&=,Y"Y/+L`!'A]PUQ`;6REA`1mib[/0h<Z6KKUsOTM:g.dlH7hDR5-;DLj8>"[5jg'3A7';#["0[4o>%";@-;A<RQ*/3-:g$!D?^`r&WL"_4?kR?8g?0e#@E7*U;0b/"'7gniqY.WdMpOEdQh:jA_Uh?1ScO]#m2i#O:4!@*ek5ggYQV&V5&%>_O$5*]ae*Mn7kr%iQ)eS^:.e7>D<XKGr<I08^nNMA/WRU3[h:(X_OK;fmZ/^j-NUD@"r./dSgn&^#h?]7nb;BljP.&dV/t"AR8`%#fU'\FcA&n#_SC8)Z<Cd>d,G@ME!"VKoLs>;S3`djQLRJR\1>F<!A++-LeN[BPs!N1dgfYQ*MQ@*f?iYL4EeJh=!XN.]o2-BXWj'%Lht3PS\QT4$B,\?<:4L#'`iu&1f`$or\q)jfK5&eWbuc3eKGdfU.B1%JrJ/X([W5/$FYq^*"]PH!eZ[I^9:)WOK).]cGKpA,ad1_%H<Al/+9iQSNfK=M\s>d/.7-j8K-E]@Ql[Nt'aa/[9XTm+:cAeJ\fo,tL9?7M+R!p!gFuGQL.8dkOEp(=,45\6$*?cfFqk"<a,h:S%KFg^%H@RkQ,[H$h[(EUr&0+u?'1i>E9?UO+@69VTN.T(+(P0F&U'#0DQp`030Kp+a15p^M)R#n]e7:%?-Ujq&!l>*"pjal*?r0DB%R1$u$"@[D471t(N@]KtIg^XW[5gh*]W^tqUGa7PCQj\MI;7,]:QmS4J%tXO/1SbijAuQrC"9hMaW?#kiBOYFd,iE/uBN.Na$s+k]%ZoX>MbZ<jKTKcP"*(Wt)k6$B0*Z)cE\2*\>dngamP\S<;9.06@k_U%e@PAL%)C\'CQAUin@At37kWig&)IYP<P_RJB)ktF'%o?(j%e+]6(Zj^,p\]_pl+^Pl&fH^m@=HGHsG+rN7Hmom96)*B@F4K1lp=S%09*HL9W(d&VA7C03XYAQ\JK7/r9!Opm;c-(b^`F7*j;@?-%6NkeU6S+Q@Vh1meYQLM3KMcLtel*j>qYfD^T_K4[c[e]QR-%Cj'Y:U6(u)W8&d^#qi1&'nTqLFfQI/kMFC(Pi@mP_qSCB?oo\p8C%9]go"l3:@.":mh#KE$qFLb)A078aE'!P3m.@Sf="PB9&+QntV6D9G3b5JW#I\.C?[,)\9UO&eL/HAV>e-7W1dftq63HYY`/AhR9e%+uJ+/d;U_5M_/X[ic4PA-F$h`].-Xl:aONoLW]0d9UUc#*)KM*@SfI"M&UO*@>N\Ui!c@J:l&47=u.J!mW]T6./YYF1nY8[]La6W%Cs!7KNP)*OkTO;*,>i?3ON8/'"J+9A3ZUg-f/6\*`Dj*pBSVs%mno`_PmuR2GG+TY=kJCm&hWch&V5`$eASd]kT$"lEe2rD?qI&<%6O7*111+RH-J4cA8?I7[V]qia97kC@9dJ<3!Uqt*TJJ*j'`oh]803RZ-Q7)*Tk9IF[OQ'QWYD7mcKn\&&j-_&eKp-B'F'<%J`=VI%#p9l+FWss_dt,m?<*A^T11d#FGJFY?#[j=YUM%J0&@2<"WlF92U]FmGcI3q:Y\4@oKi;0MeuKt#nRN3SZaCt?Zl@S`.uXk7Pt)+W%]1bML(L`DX/&ZG;.[smfE#t+oJJOVbEoE9:2iR;8Z,m+b"T:eaFs%pF'o\r(*1n8@0VH0H((=J&STr.:KZ'c#@Z,"'GpDe"VQRL'%fatbB)a`7/o'\S`aen031K]jV6u'tM]p*NV.R=VMk&N-VNBgQ>2T0K/cj'"aYQGB4Y\6JS%5YdPErds)k"ps:hDc^#ASclsM[^e'%H%s[8M&U12CF39p5s*.Dbojq?a3JEZ=Ih]&,TE0fkh:J?5G*]OE%jSc@*ZA"XQ`YjS4.=$AYq]'(,GOGMnl:U0+#Eoci^?h]Dr\!%;A/hX5V,JspPV:U9a0#pQsq1<1#di/W#5>T91T7d+mTgh/'p3L!'*We\I)YuVLt>T1("=AM&<c>E;6Xin24X_MBXZt9;Ie?UA0=8%f<VY.>sujR"4.n@`V*D%'ObMU=#.RA+EAL_E@.YV@mUCR;e0#Umo`;g,-J)Icl3'3Om$fejpJr?'UYF@T`md89JRn`5Ci!k8s0IR%@5_ABeeAH'<O@<GZo;OlSd7Y%`L82PKFn9h@;ipqP``g07YHlF0YC+ioO&nqD4o9SA?AQ]2%\,J.>qm:JSBh]P(nY5]YkODk^+/G%,IjL#WR+?HVL\'-'hal2EKuOU"\a;<[!!lH,d7^U,C4lV;]m5MW(E)m+s0F%*-VerW2+oRh2*\W!EPXa[PqSZ(RMQb0T/!ukh:k[%+eh<CJZM.n$msrkP&1LN5R'*6:_eiI.N5JWMeGaUFs*-u;\J<b)VM&SbRWQI'pl?@@VFD(N/E2d9&;r+bEQATQm.29V;m.H`a,-K%(f!!UK"]g=KAr)VPAh1i65FZ3C\%]3*H3,mV4/>4\2Q!AF0N*0XE>%E$;8O?]Ki_fNpIUI-V^5eU=QtsqAC,6+G0i4qhrZU8KdW\%T[C_*Kh2o2l*sC."i)F&(PIGa&OL`]!MK7+3.N1b5\//DTI'\2`(+e''6:m(?AN,gma4]@59TMkASbug)1WE\Z9F+H&;[,Y#TC<m%J4,!W/f;V'Lq&W`aUKBIC`%]:"O<7D$sESKhoN&.TGpSG`$"b&G!mZNL!'b#Kb0tnXD;A(NFYR2ct>Y+DAWU8*)MiLBT/L3d=Is=%i.<@4Z!1HeZEo3LW'iK+QkB[.O9e,.5R^'=22R/\Kok%#kqYBHA3p@]$Q&phJ`msI63n/=lo,qC)E"p1FPM!;/L716Pf+\t"W(Dt%_Ym_&c>V1i9$i%.)T)m"#FSd#l:dIiZUn+4NG$tQ)&TI,quL>2Pq"m(`!?>C_,PXb8i4Xa'LO'K=#cB$#RIa526`nph/I-:66qKA%@+DKd-#m&jiU-j8XXQoE&@u4$LoDos2&dlNoZKe:+f`=#`2lAGVQnguFKn<$^f3c]Pq75(a/P"iW[Z+R=5l[UOhO;t+A+V&aDfq9%0SbjIcuik,njWbN,YP:CTVADOhbss6"joW)kotK#L>hPI"FsQEkHf^_%Kb$+5h"@2^mtg3G+]Z#j<9E23!gAi!0`TuZtZOB\2&eT%8Jh"E#/i@PW\?'`gYu6@ZF>XC%U:]n3ou)e7)Bd_AY,iHOYMa=QG5^aP9:r>Dm1Y2n1"Y:;k^o-29I=<UB?.6&/,,31/3n>XlDGC%>&B]tV2^0=^i6^,"]-MkDj@Cb\mWGq-P/RV&5B%8dVZnP_U-)cU<JtPWJch]@#?H$QV#\m:*[ui@mi9hMb,V$.YD>E@Zut?>7TX:%#_V*!SP!a%7:O,f9J/^uO9gW7l#"gS1K6CVZED[5;7t;fEqdk20WG[&n>5KVekFUb%e9na*)e0B(h0i1N;2Bt1'tPNDiJSGiW3T'%PQBX^4(QHh0;DDS+Og*:653.gjrmk?Ts)Sfd$*ZS"[W?t:1m.>1o-NbETB3s,X[jPV*n7[;N^=IE^:,g->+H+G17g9Lb@X2D^1OO%22\kR77;t]:H#W>Z6JjiK-^6[Jo'uh'j(<%ei=[=(>lA@lJS>QWCXsI0K"iBi+q7E(sKj)V*G2tKX`Mfb_-Nr:ad""]$1'k=Vj5T%";47G.^CXCXuS4,h&Etf_"N/4)Vs8'&<O$$,=FTQCLEV[.YUGT+b@G!9!V`)`+:V]9X%-g<-Tf.U`pON=iqkoEb7RVV5OP$!)o2.%S1pV1M<m*5f;)A#<RP5d)eq46815TO%Y,1BKQg^U(rRIT%`3Bo]3sP#)RPa'L^k(0#W87i.rp2C)T4"TB=^\oV@/&E$1CLI4V!#)%!tS3cbp&;S,/suS^*;"),NC*[dXTr7*!l.K9r@"=;YL#$.+7$tdX!aUIR9Q;;5`G&RgQu7@LIIkT0cS$_Jb13o5p42<89oZ(dOM!%Rs$5"K'Pm`k_@.[<QYeF+]0F]3Ao#3$#AOP^-U!T?"5F:>L*RJ89B%jJOn;H-$8&Gba3K<,2Ipmbu:*F$=0mu.1>o$JrBVuE)f:^%3?W01A5a''nf#o.$B=rS0GU-h6--Ud(BWeq>=ZdY9TT]i'q/N.RgQ&[#m>J=fra6&iiYX`";oY[1,Tuk5\4@:hW=eBmQLL./u4-N%,c)bA.r@F[ihEgF;H>-U=/P=:UuJ\GXdTfq$(Bj1=!YJCamMT&"UAOnlmLlX,TC9dVjEj^d(Sp9[Va/Bdorb@Z:%6l#O-dC45e;5%1=enC%C=7V8r1S%$%pTqORNC^TROF;G,6;n,XDih)4:4BZ&PhC9ZPBq/r63iFAJp9.'`rKHVt;AQ/&2e6eVb.P/=52'G]jjAf"Jf%$p-k(:KRSp5S?p99cbRC^$c)33?]m:$3lf<#=(3bPC40(m(a'?/f31oXYL\_;:l@_<;\?KF']`;mP"h[-M+')/rC%2Z(7qU-g608%BW6)Nb_EC];C#<cmGY@L?iqgRMJd%1kilM#jKA^q,*g5E9<u%L[P,C?(iDs=>:*@68RIm%7DP=,S$SK+`&@2/PUT:[bSHbGSiC`o%b^UP"i8fceP=0U4&bepBJ8@j;!6e8`JL";'[.R#.3fW-N82?@Z5%!HCOX3u41XogH%U#Rd+L\Ds_,)G_mE(elQifa2U9T.S(hlF=%BKUa00B<0?RcFM]U#^Yo(MI]P`*(n+nJlQ3OOtucUO\iX0K^hBFRX*BJ0]6@Xi"[2%D(5e5teI;a4)82:(D;6OmP5l1_OMaltoZ`%N3):H5h&Nne:Hg@.>4Kd=V/039f.I&Pb8Dc'F'4]7[([THJBW.fCid>75hrFrdUA`RiU70.nT(6nf@.oL+Vnegd=0N%CeG")eaTV%OWb^fATscJ1.m6Uo_.,RYt-L=PCbt)"]Q$)l(1F`DJoGpENP$fIg&SeCW!=@Fdii+:WOjVM4H,%[`#7Nn47?D@j0-#4Ec(QBI?pC%.8Lb1O`Zk-+)6Sen4/r2Z*/l1-4jIHceSmk"[8Dn$U[.4>frI**bQP)3la#d7W!H6[*)cW6W'j]D8W<F4cb8dP!*I14bM2qB]i@U%p.oT6HDO;'cX!4cW=X?=[#*dCaW^01Y\J0FU+,S[2:t%q%LK5&DO,]48][q6=)ofkR\'D$?VHeVo()!Hcs>Kd)a4!K.Q^9_p9Eso%FS=RJ>TYV<epebJe#i+'+gtlEopBlhXJj5C8U53*D,6=HFUs,=*7SubjYGd;hL9d$p)Z[hQB='LLVS8-Y%Obg-mOfBD4gg<>q"Bo%bJp-lb%:ND?\jHcZ2,hYcF4b)GJtlMQdp+sLqV,rUKiP%GqA1%kBUO@hB,#UFbQFu=2"O<qo,JhDna&sg+LHa>f5VkBjG+qf'XmR%Lms!=Mi27J*+\m&qfOmmNF2_]hDbH4YP@Fuaq^Lk'GoX4b<+&1)((@R)t\X-:!K<Pn%[*ID)nXP?k"`YL`-'OVs4a8_\j_AlO4VW%J0LNJSj,@6obTjQDgpNoO0AH@9+6-H[W^/?9ns6aoq'g&_qJ5FH?NcD+7f:\\*i`o8$H-MNB8uRMSW^*=)\n/kt#_Z@(]=<UYr$9%4pk;]:YUlaT+;b/`"8t"'#B.r4pogm>>M*_0d+m=?+B<&'UdFhNbS't3N*sq;[,--](unE<HC#q7Do_f*jsH_:A<1R8<_:"61*3#%(&/m-du)]\j:q$'r/KVsI;]a6\$10@GCL%f9pHM&pH"LA<A8`Q4Z_Nrhn#OhJFGCOkD$.#Lgd3E)HQ"M<1teXd)q=Ah95>9Ne)3E%ScM\&KrIO3"o"ZooQ:*XV)nd,$ZG`YmrRq:E9.Of=*V6T]c5aA$?tl])=L?lL%"&JL$&e:^m3fDELW7Tge'6s5$DFajL'Y5jBboC%h:[K=YtQO"TS")%MAJ;TY:N3*q[0tRc"SBnRu>RZ]`#HT'n%/b)K&OZp9$aQ]L07H5-'AKm3Vm3'?I/j,,*amHXE%\QKEHlQ#;I?%NPXCiU)?981(SF^MM`<rG;?Mq]uV#(Y(\',Mp,dOpB4iK3J)n(!7KtQYjU:^:s9p-dT?@9egEMt/aUYh-raonF^NHim.j"ts!H@c%Dc=XLcVqt^;pX3_o)'ZG^Nf;*0`1Uc!KMHaS'\Z@0Phfa4.jCJSd,\uIj^>&oBmc*7>\r!!/VN]a]U$H]V-]#R*dW?XQP,L4Er"I%Z9EAK'58krnFY::<Jug*JDa[.N&H-00jdc`Y5D'<BWCV?X@3-W6ZY9hm)(2Yo3s.])Vd]"m_ncGJ:`j`Q6s^#$/,P^Eof_J$rUld%7K)+b%qj@O8S0.@fR'5/l@tm`k^DP6F9qV?-_diM"%re]9L)KUTu,=h_,Vrs7Cf.c,@)4qW;%a6Y*kL$B)(0hBDA3o0fIh#egs)R%AeV(N:KqB+q:n+@k!+K/3EmSmr"r[.$Ri-g,UgK*80"sn60%9o4aa))%JS(![W8un#lbLp/[+G`6<8-u^c2m0.9s:%OlWI+$c1T<%A)Sn<F7>=.Qf.^mJAR)pHg\Qq+a?TZW7PU?6Aqa37_.Yk$fh)1,,qSPhDs9kSi*0Fd.J0$MC&j9Mi5S7UO.NeAtr]2&j.nYhI>@O%\hV*W+k>rU1UppeM'm>[NHuam%\Ch0*s\GGRI`pdiBXWYkg%C^E+o;ks%alN_^Inu>oLL]UAtieoVI2to7/e4+QM+t#rFTUkiJ=N%I@C&+DHeca^u"3ghP%BXqdSnQkl:Y\JmejIO:G&E+IPkkO->cX4"XPPCPP\/Hjpuh(q,!pec"nkp?NkfnF&g?C@L:[X@9Gen5Wck%)u=Y?>R@[ul1rp;i;1Y"-&oC3BZ'mKH8-ZUI9-_"D+)^t_pP;1\l%XB@c(<A'fo]IITX+7WgeHEBE6o-i:AUh":o$CaMM?+`H7!-%7PB+5nU23$P0E]44B>uSXW?0OUlSHZZ(X9EDBep:<ImrR)S=Gpo<"4\lZ?An?eTTZ#+9gogXRRI,l]s7p%uQ1i[E3PLn+qArL7:-%8?ts/DmUtpj6\PteY#97'K=L0b^jFKERR!mT%2t69,/-Na8$K7?3eodS9p'(BkB3%FmPXo2?l)@W;$#<2Y=PcjB0Km04\.SZU4qK%GG@=00R3cY^baK$E$L7L[qrYh,&"thhYK;K:+M`443Y%r7d/))6kN7Kni.8ukFuU]d?)E:n[d#H24(7oBh+3f9gJXuGZ!@,ZnsmX%76A7Pp^RA9QQhE>dMQDA@&g-UD/0@-S0fB7#H*P0F5&sj<8'W\S3E,i;qK0ea(VPdXlq=7X^N<_P%OsV,'G+jjV;%Z*iTpLG4S7=%Em"%,^&AJ;dc&1A!0GDFFRR]F_c"AHbsf+a0,0d7Ge*V)r_3VPpUe@H7>>cN_H%%3_ra/BWePbNYRm)q5#4Y?C=Pl6FT?q+D>_4$%rQ1tW-u-_srC7fIZNjH><0q-;s/ng4f0VSL)e1lbh]s7O`9;d->FB_"GJ?pVCJ-QuefNn%J734J;ns4XaK`tn#cI>gA"+/4*oOIq%:C/N5%CcZ-X>J-5^92>L$f0FLT2['3nEVX+WOL2`-as:b[67"BK_m:gK?[`0H;bBC?eTg),ib#e[HJB$,&*;?Z;26`E*F<ij?EgE%Uu_fP63k;^q`gX.>427F91*a&5PLT^b.1(9XAe_QLhD^T,SB:Om+6Zc:/Xs:H#<@>lR@BLm(G=Eg)YX?>e.E='HM*N2KuFY'NT!O%*5(JEY'lB31Rdg'3n%KNN?dmUF<FZ41qU#iE)^Ad4"QDl99.RH<:t7f^R6m^9%5]UjOFZB*'eV^F!&ge!PNucr%mA<1bZC*J"ISP%h*>_\<K#pTZmN2^eV8_#SD,^aJ+)EjS>:o\@,^hg1C\kDHRYD?4M]-_<Qr>,&a;1/Chlg%8[^sjm6;2."CpD3M<9R9KW%Vsio>)E%c!>qXbZ^D&kp*[j)\toD(d4C!Z7T?sEcK\+"\[XT#bj:;&FeLe][/fV_PJ!,<-`R[%s>$JH3iA/>[Th4,PV#RU;D-1s(9Y#*t*Z2%4+d<k$'0f(&%FCN]lbOaXr4B(3u+)9f&g78\FeX6!WjuiQA(GgN6&6j"D5F)EnD.p44ruNelC@"HIjVX>>WCn%f,kE_`U]!q1r(V%X]d/^2d"i!%3/kM&;UIpE_]f\6E.]Z9LMkk*tsthm1&6$!nKFs[i5I/Qs"'H/(jTQ%IALu>s5JR;ig'aD8!T(RGA,ATGLgE,l5^A%7B5%3=C>hh[=k198(N@\'-RpGdl]eF4CAC@#OtXPJ$UdCc.(t9MShoG3RREm50VoSZ*bSD\K/aTok^]Z$CN&[Kq/9_-(M4q#YaX0%W<ft9U3/)2J<$cR:s?D(@,PC7ZPJm-JSkcte\"h3YS>b9;9[*1I\+^%G,DFn:Dj,ug:aK_^@r+WGQie-UIM+rS]=9U']`uIrC\9V%9$i"H656jtc[[6?)n^ZN:M<g)N#q0:N./p^*&ph_P8B![#MAj/hC<,8Z9oBM\dl>?pDer*ePuhaW=2+WX,0.36a43@qT#FmN'2,D%\XGGKA!H5'6Uju!-_OonSM4rDeo$Va-M*\Gp6<A\*.06S%,AnP'<--oOXK[\EOc\IQP)#@PuEt9Hl$hL<C%5i*YUi\cKX2UP!+F`%$Wl&<Su_C-8]?)_F!<ib7YV1ip"[D$BuA_1f&Fk/)lr']Nff7'cm@ra(h*N#25_U?q]ctV/Ee.WR@Dt0.`1a===ceTS]Z.q7WQ-P%KB[T[oB2Q<4_2506fC(W3nKI(42e2Cf7.49%YHVd)um@a$>fbakogDm7'MaXT@7KCW>;d[=pX$[l(7M.!i)_Jl]]uj@mp=2q.F)1%[L6j>rK4RqEcHWCb)iAhL4+=U/2rN`5;;Fj%fhp.>u:egHop[O$^eIUJ?M";D\^C%Z=.d]<ECkfGEt2'9u4Th'nW\'OWM:gpm#87%3+5j,9=OiN\3eP"R9Nh(^k5,FRib7#=6.Cp??HMNX!0G@UZhNkUOUr3ibs;%f8m+^FbLr>'%6C`j?b8,QkTAN=R4SUk-GGBrfH#U%E.oG-&ma`Tlnmr6!DEON(Yi'.Yft'NKaL(-!^+-VRsH=OS06]!/<`?_Tk/+a,^Dn$-Y#q"a%s<48J("Y->r["+e5X&(S?*K`"jJU%Fh(8q7L]QYS7TV]ddgpEVj%.RgEKlH)aXNT1SW@74cbu^k_0BZOhBj0`s3;n,VWer+9F@-o=b(Z7D6/9nE[oWgj=</<jFa0U$2rA%8W&3,?&4RD2gdo94p[!bb7:#FfJ,dXKT/j0Q)PI0J/oj9$B^NcIBf\D>#)kI_,0h[=W"ub6C1).U/b%PPOES^lgE#kpfZP%@"l0?%D,B1?K$Q$[D'_aaC![EC'D#`7C'BkX\k'D(aYOK?^_fkQhq\6^j!>9K.nrM7&;JU&YMgU=9_>_0hs84p*-Qm7J=V$N.HL:l?N1d9%!ZEb8O.eT5l7pcsnfuR(>gW(*YJ3UtNul>tcV*HnD\BT/0HW#.NIgoDa<Usr$Y+]A+G5j(rOg/eST5U:><UCLQ9TprH@m!=<_Vj/%Ddmn4r?0?+m0+Zr)iB9Ci2:k+G(.Mt`:+(hEVUD^)rt1+8.Z1T`Y7RL:Y)e)204US>eUF[QZ%C7i:_=Xe?B`:JA<0$dF*T8;-IJO%1GC6OZ?%*!H+BXFaV:)""m/VAP7rn"D(#&,Ur+;Ys5ZMbWTb!&[l^jN@g`i;js(YG-UUMXqhd!R3Ung\++sPjNFt7tEPCMTbigb=%M1QNWRA8^%?2!__F!eom-Dn6;d6A?tlMa:aqTsR_rpW"ArL62o'@DR`2P8CM<QYik6GR3E-e0=RS%j$FLqBj?#,+3TnSqr;p1iR^%)hGCP?>$s9ht?<:Q""9Sr]/hd'-RU#[a5lf#1dH>bkQQNR66"UScc[rR"m\_Uf?uRa)DYOOF'VYK[>9tR$I6+hlE^096LVAS`97g%'8':!UE*XtA-?QZ1.&FLiu_R![P71Q;1/@2[#un&J#>%O+QcF>hi5FF?H5'e2/9-nJ-uA298IP,B1Ss1L!FXb9HrLp?Wi1sK5L_d%*ajN4RmP=6gS^1_qdjE(\*7)_AI-jT]n&6haUiH"\D0.Xl2d,W!W&H^C=Z<9$d]u=NC@0WCc`I&md/gu]4p=),'Fh)&"1.HeU0Z\%!5+:WqDd4t3MEW#+hA;.XU!5!h]q3kLB\:a5XH9-;9f:4@Mnu1oNWV(qF[#]d'fISF3HG?$)+bDd@/JHckoD<['GhjP<5c!/rpuP%@bBKK.OWbTI!g!gT`>GEJ^&/XqNjSaa=:*>f;[OJn2S1#,$$4q"/!`i)f$_/K\uW_H;@Vpkb),uK+&b'AlJV.OM1t`>].?0cW%2S%]/2BaUYJ9h%RaiXfZ7Wl>tVRKIIo.L`=tCmY%\p29hd!QU+\;t^o(*.4XOL@[r/"h#>pO6Lf_)O'Vpck"L7kR80<koZEjU2OT+HS%;fIF1(7Vdq9<l8.\:r>eO,O97UsPST_H=T(fBV#0K3WJTdbh#8;q'o<@0f_prjZQN<%/TZmh7-BIqOut9&IB9)^"TFPq5V$1%nui%/P4jA:W\NOO9RjUFE[k^OF6O`'SbioQrR/7:2N\J(G_`?_aKa"p/=/?2H7S!+^C^qM"pY5iq/#/X*?VP?878!S95Ck##kb`\+b`4%m'^uV-k\-&f\MOB;DCprp&cMo:W&;RDhc*O-In4C,)!&+[aRJ76lJ.b7q.rF[4q#T=9f8c+6Mq,8g(J*=RIh)&Q7W(Vcr-)^6jqh%gfn<o>Cs98RK^'A:I,E?8#$Td;2^&!G@d3JqbcJ"K'mi_M;SA/#%<Qh"NN`^f-(EcCq\WnbaB6B\dZgb$]5,/5rjr@L10hW7$=!h%5-,g`:<&kt<o&^;>/PJa>#VZ>YLu*8d4<V9;<&Cp?Z39R8:#oB>g@KQgLJk(7+`ET_8AASER\=<(?5KnKM0.k=P>B&"iDNQpEDUK%T%#EVK/'8f%:`;@f#$iq!-:H_&D(amZcFtrXT:JH/hXr^/DCQr@EEL./BjFCroas'VJaU1F-2Z<E<g%Xm5o#_),oI3(23/`*)Q$j%"^&.qJeH21B>s5fF]P)@K4bqf<0r2VZ'`FA6RE@+6%h;]=.)J`pPVD<XNg-!qRpP>'p2l-[QiDVS:RA%\LTMHY/)dRYD<<37QK7m%&KuUE/chGVj5&J?-FYOX5(V*CpA)V$^EF6VYBes6p?TGAI,1k!1STa]fF(AT6%L;Si]44rLVYMjCd1"dk7@Ce#4j2`U+fT`D?RZI%Rog'B#lKF^=lu6dJ-@?:`c4R\ZkO`_MO5/uL^.sE'c?;sARX*(aE/G2DWhCFN6n90F2FOC\pJP@I<o'!UE3sfLdk$kWT\P4EmWYi%_SQT=#`tFa'8[hc6*C?U_VOr13&f4Y9'.u_&F9pkhD[38@O!G;GF;U6#)V%JN/EDJGFoglKQbF-KL2&eNs$mlYaD`!&6>)^fROuW%.IcOj*6=\*oWTY%g2cC;kk9\Jmi.P\bIY#1M!9Z+5U)o=I6&Kka]g/M\`Ei2]_o",I:RHg7.@c\emuLtP@bLGf4>XG_O?X\1R2-C%1EaUGaLISCq`3FqdnZC,)3tY$i_b!bN=:ER)bM]OV?RM+i[&1W=[42Y9CSGq/Xai1_f7P?bJq79L7S4\i1g2:`1B3SpMXIDI32+'%*27`PR+iIu=&6jrSCmFgr;Mj.'HM3:+r;i^i$.^9%S>u/_'oeIV5H"DN<&;6HT2W(9`K43U2r($2R,X-.W[W2o-;\tefFH0G5%0^%T7i?6]H@eU30k95jA-7m.M_K3,a(Y+Y-,^YqEkBr,sWq4qbKV+YQr1*"`b-Ardp)U%UOs_CC!p&;Y>".<$g4n6CSt<,_@h":PQ5*%^*eo=0<A7hJ<1f\dnCVFZ%dX@lD[g^`1Fog&9'bBOUt<=Uo]XK0tQZOBt.hbTjl85g<f/13IrAbfrHjZ;=j-Gm%,mfPE*j2,g@$n%>@F`<6=lU>W!TG2]J)2d_o:Dp`[1:6@N5sb`Z]?_Zk.Ng/k"T\Z&B=5M>3!O6`o@5%coIo6C1nFTM5;?Li/mra9l:NAET$u+loD5%MIM[.WklAQWTTK>ZsXW9S!o;AW^Q->9cZ(.Asj\b.DW5HcP96+%+L=KLG:-Qr]60>Zp)n<%YP`oTDW4l2m_,sOf\7+Jn<U;Mq(h>%QO288/)mNclKQNlg?\\W'em=^Fs75"5RVjV[c<@G96G/*k*uL:n-8G0+%SQ'Y^E]PTSmJ%i!^F_b!*+*4#Q>^@5Nt\\93:mQq\%0%MKL%)qIrH2T^)'0l<]54\RJM'3LS>r2Sa'b$HtdeDVm)aBJg<25Z7ajX`@ZsK6<ST(PW)p3*5)::'UV_H@d,"dR4;7/WO7,5*a?j%@pR0B7%'4N+Y%[>N)4f0@[:\<Eun3Fl[aRtn)ZR^M$Tnc!"-]s_+AGdHAo_b$UZXQZd-VG)BeZ:6bsWlT[15GTW7`+U6[t!hIE1u%e!i^bC,*qaU6nl9f,ejX?fCpG`&=Jnkb4teB`-R1a5-^iI1rl#@4h7RX49dFs5$u0LTiGDgs#M@@e>hr2_#pP_f99scO]A7H-*QM%,,H]QQo-g3[)8LX)k1odo>E[JMC4#!%j6('ko8#VH/OJZN-F[A"k-Rt+D'1d8*'8O@l.%]QQ:\9>0-pkn#UN=JL^sg7'GOp%u8gC%5!;B1IaN?;R]D%?.`#8kDa];b4c$.`LY:+oB46oG7TW`b^EH%k>mkqJ%;)Rf,COju[6q0f6ngE%DX;k"%!F'fN6CN`dp%Rk-;i>:%Ws\=?PaW#^@CDN`!?t*Oq=9.T8&O3/6/6UVG,/l`gJEsq"^,o$a#(+^`+C)b_G,i?\5IaaW#m=1Xl*\[Nm2he2EHVpZ0sC4&;a9r%`TGa!l%AGI=ehF742.)/Sp#q7jW6/5c3&]1G$!1b%;'bZ3Fc+d:,V0+'P/Y)o4_:HHUg8T7]tS@"H9A7*PlF-hn.&Zbm"Go6*qY<%hf(0/']4K23k3O2Llles'%+gdTldLG!XWUC7$fXD]+d[;=]F<%6D:sm5s1#G>>U=%HKE&qg$^E*9.SRhjXF`;=,HBc6NAG=`XK_n%F96]ed7)!MBh!?`Cr"-JRc](54,!Es>ZZi?#m.(10RV+ImBR;F%FHQsaG)OKH<Hb\W(7")$&2R4FAs`DG5BcLS*]b,5;<9M2T8;C%+X=jU(-P#%mDeWW=rT%aNLYbh@]YHJ#bn@&7M.X'A,q.Wd>6f_G)5KQ.NDf[$gYAC@6WQ`K[?VnNtl=H!_YO(r%H)6AB!c;*YtL5%67NI4+<c=bG"1k^QFhWPK/kmf68`8(AAK.fifTf`PhTWR;_+cA!aH)H]G+,XWjIk(PR4$OXRE0HS+Wt2FUb3+`7YXjGh%K&^PUA1%\1f$/[ff)9M#eu,F<D\\>FT/d$j'<p/f\LAqGMt,"V7D5Cq[k=q/_r9`WRP2>;Kk87YF)D:c,=+'^?AL-4cD(=X#?c\Z[eWO+htY%8lEi57TD1)rSlE4mD9PuaVYC$C)!M]"qlI-/0&'Lm2k76;q[u1CFR@UhUc9NMpYDZ!<`m&S")'cp14*IDfR$kN&b@54d?P^%X'&k%Nr;s1`-;omV[CO(gqB^,JSe&j2&NP8lTHCb`m5`ur!a^cJ)f:tIXKllGFbO?Ve4/:?*[lfg@c/t/>;u!2[ak27UgHan9uOqU5KZF%7nYdWJ<tR@hZ:X=o7pt.6bWEBn,)tOI<WrC@ZoZgDU?*^YW&Lgqc_Y(`o+ICfQq^LcQD`TMhFmu>I.7AeHshpOseD^TFKV;FP*4B%5eM([%mJ#l5>k?uS-\Ig5jip+-uZZh!"0p]iF\[NM@9_746=g-Pqq12*.m?]_G!HL?>+MkF7KUe;=NAX.d(SZ'Nfm_kk@b0`ib;F%T]$$@2R)\h+u'bd!/DFKkpDaA/H@m47.=Hi?1(I!+lrsGb6m<9K6G;Ga8qe).u;N)4\2&I'1Fnm?5)TY_\s5n>W,<Zks,TXTG,^O%N#$K65Y[`4W]*u?697+^n<ejl6c4jTOLZQ8bcEq*?>Upe97$?C<)Ju_HsNtb1o0CX<\7sO1"3?YUD`5-Y+q(;I;]m14fk+Fd8IM=%c7=FSJ\Y2%A@>u^a/R9mln)&)%T[igBJo5WoZ?&fTstDWH0A/AmdnAq?[!X*NrhWT`J$GLS.,XgC*>+*KbSs/_cF#d_Ym_2mnuG2%-Ofa#+:Glc56K,>g;`'qTgY3k"P0UV*!HuIjWQUdZoNIdN0KG0,#sY/:PLuZrOPr9=ZJ'emlQtV(Mbn6T]_*r#kih]X1SK$fG962%De@Foouu`,LCGr>!P+PI:?7"^'Tie_T8>]*>e,/B;jGapMDiaN;Bs,Ee8G-'Z(p2U6GF^3pd$?8c&W<)_6q-Hn-Ja5j%+keGLW*Q%=aqPnX3u'D%7S]!Vp(L^aWBmq@:]XE=JtRHY_pm9Y^uaoA@smBC(W9Z67T-4(8=U"/+$)#;:,5mA@Na*Dd%$YPP5]ap[OKa9#<=h%KM'8iOq](LZ$Ij0F6<\g2f*\@Jf)[#oY-jT9.Is\1+,'#Cnq5'dc`^/U>faO4#UV7-rnE9TjPr1<1f+[G,ZCI*kP#ufFA9,1B6CF%Ku#@ig99Lj*'Jl=-MpGHaUM+\oT?^Xjnh"i<o+(5X;\inb>#ARlr)W(0U,/e8mf["5Or0f]aPSY/7A#RIG;5IRb39Y8$6hMi12Dm%D9*f8--s'`I`'1rDgKma%r_=5@8!#.I73pHV]G4\oGp=<P*:6l_I&P<4f%*=@I%t]_VoN.a'Vid'IOns+g7#uFSnS6NmiYo6s2'r%E]i>)&I<KSJeQ<CNd$$<`_U-e`q/a7mWM8$)NJZR2fu(id/HYfM8o-jQt"]HrLJ/$XWOS5]_Tc)WB(*!&*0IsUJm/e(p<$ij)L\^%_3-)_mu]%;^Tf4+^G;6mn9BH+rQpM<i/UugU8An*/K)<c/K+"3KrQ7?lt*UB4=Z%^78>V0SqXTL<65I"1O=Ho;_ieF9/7PImM>p7%W!3bK8D_:>^(K[8n=ABl>fW.@r*/onY9s+bAL-mVH2-6eB0oB\Ue7C3e&C$6;`_m.l%$iL%C/iBbjXM9N4L5KU*f@>kZ@CIS=0_<%I"#W$-J)9Vp@XR4`KeB$:\)CNoC(@S"Y].oljoNl&fZD6;mjV"aDP6cn_l6W?4)JGFcrUXjIp$;[W\L!YVm^aV`:P@g)To0imO(U%#]-Nl)ds`67._I;nTQIm`4,$m,95'iP$pX9,cX+21F34Qjmub)Ud.2K13iqfLmRudP"eJu]UO5m'ST6"'!Grp4U#j`pE5^JjEDtu%#9?.Rn>UC,gm*3qD0TSMgk&4CNkM?4WTDrAL-R48\e]Xah2.^?'O--lf@)ZNPV)i%i3[tV;tjr7aGG?D0T*S([YD;R]Z?&Pkgt:d%j"baGai=D'VoB,Jc`_,SM>FGb,`NZa+XXBI"';U<@_pK[J\/k^FFZ(rcum?$b[;%L<a1m4k0BeWirBa[=if*Z5q^h/7R@uS0FRE4%Qati=L,GmYAJkDQS/r^_8n!$k)=0@u5#T3=UV.csg:lZ[E#BauT,WMW]@CIT1=]qo2UuA>7T22LmuO@@3lPZ,JlI+AY[GK;Zt2/$%[:MHID&Hleflmo&DLiU!>6`V^C\Of98@gFO/[LS9/[M.M/VBoOf#&qX^g85L/OT/QPcWMo>h>:MbhE,b99)kl2/Ni;4kA_,b*cP"%6f<dYqAFE`>$P@%%sTiSUDFCQFBZ<A-F_\7Gi#U3[RV"CCfR3^j<>ecgN[G<fuc"0Ob@*iK%i&!OcU*j7h:8_:NN<cEf6XG@4#j-%#au?oZDRJPfL.@GlBr!!M.ddh1t[@+K(jsWT3E/9f[dWV+H,fkc&G^7]fR&BOi]c&[`r7$)G/%Jhe=",.\TK=Niq4t-bD`N&LTIc%jG;<O2glKTp21;0&uXjWN/SEO5HBocB"YME89"aILpPW$8:C'`iAW\`PFWHhj7tT=/ShTV7GK\=;1n0POjrBI6jj.R(`(#(c-siB%e7NMj6pA#`5lfWUSm!4o%1%<$b,9c0Vt:(*HS<)e,>DgA+nBhT6F,$Kg`2G+Gan?s9S3fg9ep5PCT:j*2f2f@mC,LGNmAbNM\.<1%IKDW0=LT'#.)qq*ce[HPLu]%7I).n#M311$82V)t%O?%#hT1_^g__XFeG$/!G`PiK7`.[6`uX,P8#eF<<I&Ps:M$/Ih=lkC*ij!.%qjT+\Q@2Q-2OF@e&XWGjW&Buj8#S>4rCs5&bPnA2S'/Mn<1D(F9;OLoo;O<LdA\^.#2mg=J(%iZZL>obCt[]NC3/(cS7luspKVHS%flsE3fftRq"^mOnfkS42eE2@s\^WOC\^W_g0"$tl,Y=KK^8Fl8A`"f>"ar2+D.GH%Gta?pF4oFrBlhu%<,-L-GH#CIhc+>0R8do?%R8dpBe__WdF4L"aC:<E>7':$X8aWYWF&68kApQE@7Ho<:@-hkSa`-1`*8:>86c!%2Pdnn:;S<]a<3j]5M_lLpW=lDb@to+4\H4L(%\pJH:8Zub8-fYf_g9ZY>Y;J`$3$^i!l4kc0jZ-O(JM9ue#YIMgS!8Wj3JOEB<-?5Un5>)"K"ECpHu>c89uX!Q3mJZ<_PI8<X$3(L%*9-6p@A)l#XG35VnkMtGpjZi>Fs'g4-h3nj3Ja+/2%A1%?#kfl*oAmgI@k8jVco'$a8#>a=4DjT&LF(]'Q*dA(jMKp=TrWt^Cn`N%MDl@KGD$GTT-#"&[R7P8G+d:.(<1qfJJX+N*dB!@L;nrRi&G^$mRO^&hrfd4X8pQ[ZXOCVSiUDrI3P;d7'g@:Ql#L@`3KaL>(9nV%qE/`K(j'=W?/oja'cAb;KXCJ=U>>oh<uFP:N0V_(L*@IbP-$H0mX?5]'na.14I.N:C8Zs#UsRX?J%%89^+Q`T7.#-\E/Dj2JQSlf%@c)>k=!]Ng&6p1Z]q<S55__0g<+FDT6!kn'3m[,3Qj!2$#^Kd5We;'1/lbr*!HTagg*4!c^9)I.hUUGXpN/5ja/F6$\B,nb6#%A+%'1r6(mBOYu4!%1[5.[:h&(`W>o[2e80[g..KejNC"`2-6KuXs`3$CsbK7n<WcNG\MX"-R0dBk12<3+BUYG\)\p!\j"q<l@hK#T,W%d7VK4N9B(>Mt4kp-SWhPj>RoCAr;;84C+0a0%E+M`al6XfS_^79pYb\X8Io7*Q+'HU,)oKCs3en&p2nC]os41d^27km.e;=`8lpW%00P_eqG]l4p:&)BipDPtT\?JPbJ6W@rX,Q0/\.OS:_5mgZR^PEc+@>@"q'8@KagoP71GuVC*Ai^iso`0r&YsP&/gL85W&>2VhQL,%FBba'A(%LRoGQT;7GnZOjW[*W+M4"h&Vo^V=fGZ^acu<rRqnt=]%LnQE&<':)#'pjL$!,[N>ui&/`mGGUCj[5="9@mB$D&i1uL*E%_:*X9\"aPVM&@"d$d,R5TEGaef&QSf6r[Zi>)cZ7mXS9=]I$g4ICFO3TR.?G"'(Q/e/FK8j?<f%R3Xu-TkOb&JV<t%MP::^6tuTq%EtWX5=;gmB9cj=>@USZDd&O1@/4+Gc_DU'4h!2_0MI"+CCY16J2WUSB7-5B`b&_W`MUf(FL`+%`Fh(K4jg.crZ4K&B/]n3WEMq$5%Gaf(La?gRFL[U5oFZ!2c$ju$^m2#;uOCWnj"Ou(*NlPY#RNDd=66s\(A:6jGE+>]\(cDZ]cIV!3n;^FaYV:C0*sh<#fQ9)^ZV/ru%E6X<[:/@WXT8Q7^02kS&M_N06e[nUg7KkE)1f/).br#tU2%(@E"SiI3c#VgW4m/*_k1'n9f_2>*Z$Qq>0/s9dp2ep(hb(3Z?OhH>%9as!4E2NJ5)4sBDaZAUX8V$a:#Jt-r1KmL(P4Qo40%`c^als,qWF!V)d]C!;p<r[Qc:JN8+GiH@3!;jKP>GkY/#m&f:LW<BJ9(HS%Rp+4jTVS7u'-PrI-A6Z&&f);1_m"I7VHjn"i/hbS!u(L+nV/2H$e$Cr@Q7i.'Fq9D=Y+PHhQHN7S-,qZ&]U]7H$gB^l]/!NP6$U]%'blGlCGnkCaJb>>5AuCS%D_KD.aAJg29'Mc-5<:M`]M\??BND+2GWp#^+74h9P+3_Am0>uS_,PT4iRIu)AQIVTfQYQotE+<@TRl(%DXiqu2[V4QEu*3,0hY*t%W:ooh'4j?1!gZ%ep@#Cc+/U&nCE=i7FS+/a,U(MXG0rH0ubmp`&t:4^_MW*]jS2h]P*Cd<hWN-Lu\6?%gZ=1X=Zl^F!(tQj!(NeeQr+I!lb^Ab(dg9NPu+:qX?bQ-Nu=#+n.(,!#mYtt[=pa<=9d1AOXeO?FaD&^.[k(siLSd>(sSM>kl[gE%;!+oDbEWqNUF-h/kDJ[uO&Yj/BW2ORGT^NiZ0*Ib6Ikt-H-MNNO0;Kc0&iSOA*).MEpkcI04gE8JjXKn@Domt\l?Y!0E?n*+UDJB%J:32UNJQLQI)7agWasZ&ZXFMVD]?s8c)s06R^i*FQ;?:7pj-//9u3Y5%-?(bJrp]4;LpWR]CZpaAu=a3@hj[Sc#@4u0`UBI6`ZY`%E675lMNrql[$3MD]F0ORN`:*B+9E'#=!j+ReoSK&@^Y,N=\+<Tlj1ib%93so6W=6%_DkFF`1"sp@DmIUB2ZuBW`9,4!>2HLE;s_C%p167:D(0aoqBXXhZ%I]f#8.S<GTsQ@]%Vn+ADbTJ?d=S:.%h>p+gDTDh6mtIeZ'K,r33j<;U+\K45G)-bsJ_E\PEd)APX.aqSl'4%M3,XdlY89"UZJFu&:`3n;_>onHOdu=Kas'Qf$(frMn$:$jh6f1Ml*:Lb8aW\gPRFL)'F"H3^tMFd`SthRi$';h6:1m=%&^'e8^`_%c)'uPD@Yp_q^hZe\Ts!\;MN]5^OLU3.9ZdDiLU:02eWU7`8c_!#6%n2V<B*\UlCLK:P<15<e)N)N[B_<ZiN;?bhfrF@5Jl'!p0Ck%,a@uL)hVq$6\=^G;#j$i#Mh2:R.S=kkPiG'euiZn.FH%a=LI?Q_m6#;J/#FE[NW36#L!)M]?s/>3I)@dr7CGLTY)I#^-*8E1U:eR%(2%!F'2WhOc?CIWMbj<\Z;fd]i'tW?P%$BX[=W"t%o3MD*u'PX]_<38Tt!5XM[96p:Fm]Y"c/:Q(!0ATTap6P*dl8Mm<u!L9P'(P%(&W$>*Lh9SN9@J\MfcNuT8d:egab=rq6!bZofYnab9\pKWa,uO.F[p=?mH@q7NnbKd((."MbVC7]r&-V_L!P8o3d2oMoL=X-RS>;%eM)IJkpp4YBGM@V<HK-D&DI`4i1XlK`e"t.'>6n2FA_*E#J9&Je.eprDdf+7Hqs4;7Yol0<f#sf%)k>,1#.UGeWs!A,`Tm)Fg3PQ%Vjr\"/!*QoAcFOaZ<aL"40@[?i;stNHcQA%8N3n36b2"=M6<SoZTZ@'LRj9&(XIsAGom=!?T'=?RH"Ack3itY:r\@Mq@lK&nG7nF%;3X)P'iA,]_`9C^,>XB1-8A,JR)&gL/^3!kO:q]4Z1O4R*3Zu8#[47l,5^$3"NL:#Oi5js7%m0WQH;<"KFItcL#Vt@%C6U/<tT*.%;AHOZ@A,'(1-UE@E/8Sd!(K0kCd9t?JOl8`Xp:YHjJ\AuE=$&KZ08DCRik,QFWlg2<9=^UMYE4.&W<XmQ<ZpRs*Y9[H=8]-<3+]o%+Saf!e;6jjN^p1l3VL80;0O,DRd#qd$ja?%59lE\r;9Y6lFBur'kKcFF&rt;f3Vc<NchuJen-I+'?cV3[dBLBE&J=DT_eJhYZ6_H%M-4Q)p?3!k1+_MXj1nb]?d+EuCUpiWq-WH-hAmet5KI,_[.<)Z6sYc]1eE:0nd74aL6,/*f?btoJ%("O&#k^H*+*m<%"nuH$c-m]%UYM]'VS[tUE+mLX;9q'a1g%/.%1PsGdKDfb(l,2E4/A=iemifCE6&#.KtS"`Qh9NU\iiH\&uVBqCA09)TeR(d7(NsU;;<c,cR"9Q%\5ZTP2U&/jMmFTOpcc4J4BsBFo2TnW6HZpLVHYtt\F!)cM)7/?HOQc`CIIts0\WFhh)l'BFU`3EAh"?oR-Q>,Si>#opumIJ%i\Nh%j0AtrmVoe@%+.#c(qWSOM@I+US:8/$gro@6Hn?k.Y!m5Oh]BsMK#@7B<?u:JJs$EmiLB\@+`__(,=J0(MW0COYus"pmuqP+_X7T]%*)dQ::h>dkdaauTA8KK>Yto@LE[m_9^r"mY]H^G]q-+9<,bq3'mIuIb##?LMW_`2QctPd/[a32\YgAk%R(/PS=fFQlf+=0QIc>d]%e'Sgs,AEuX#l%3J&KR$GCcO1A!6M-lErbF\Jo]kn%>5o6HELZ]#-:3<LU;3G6>4#NjYZ&WlXco52+8#5p\N[Sog(.aCIEZE(sN4L%'LIkSFC"HH@F3%]*pfrhWprat0Ihn>X>V:n,N":O@;DRa1l'Ep_&dID6bDdViC(nZVce^V.Vsp8-Fsn"@GQ`f\@T1Yo;31l*rJ$6%?tKbt%X!nJS;%,MYBl6'^6tRa]MCcu$q?m[W(NoL%'.g0?r#+DcDZ?66.S#DCgW<1c8G)@GC]!o_?4ZU-OW)3/XFpD6bZ#!l:"G=%QQ^)Ge_s,S2V2c1VpFZqmaj>E],_^lWmTs>:ZeYoWt>)eiH%H!M>,CLSA'J5WfQ]Pg*'agN=1#NSk3+r<iRJOJHN0>KQ^)5okX@A%Nb2!*GjPMd)&mK%iFYs5/PJ3Y*Z8@V>crG?)!9tqkK%9'nor1n'1AYIi]FOkWY]":\Q"okFfssPYQ-WFCl#A+CeiF8h]kFR6s)?V%ef^HUH]/`L&S):I-'KU:g@b:`jsHbT!fnQtb\*rL9fSkDmje*6VJ91]ah>OG"GG3;#?&`&5A"?2ruUW%RG3`pU&l!):UFo=RE3]a%3S6H;c?B1J&M?d&l5m#u-'V_%MRkP/.4b\6DVOQ!d4Gsdl.KPqV*/qD3elI&kO"($%g@9X"hrA-oKla&Vu32WhU!(0ega\@83blD%<0g8);Z_UEQi!F,'9,@eOAT]5`iAfIOV9`cGsGs@(j=$*&9H/!K8<03+V5XhK+:$PZ'VD[%"kAkism\\`V)81Tsi<9m!Z*]*3!<Q%as+)SI[;P_2$]8lS'H-pKr,V5#J<nlU;n*AGbj=6eVWLK:mQRLLt[%AS7A^7]O\7g8Nqs,g9HEhH3UR3?)g"Gp@*B##ND1i@5(5^%pee=ABsQoM-f.AL$Q`Alnj:9V-3oo#004XO<l*mWc2Sa)klc5Bqp\_=gl-u1LjL(2MFbZ3]M32uo#a66;H0I.FW_*j?ARF]b9u/C%Or"F;9j841G'sgk%,%4&h9KIY2JmJO-XUM&%?+>2RSCmV_+cE;8<lK2bqYt!1l'Sl/rCIbcqb->\>4/h1lE6[?JXQ>P3odlRPl)Y%r]0gqb.$L5VI7Zg/f1[]m'oLd?s,]\grRA7>=\4_<cn4$0]FuN%dg@-S(=Dt=d+kFga9V&_Oes&qgqLa8#gpNfPE]bk!@IN%]FT,%RM!oZcD$YTT>AINBm5mTiq'(/'16Vq<Os@M]&b`U&7s]MJm]n!H'elTdWV%5L5io9qc_LmAPmI>LtnJ4b)%s1kW'P(O&QLleoOBn%<a=LuCsO(hYdG"LFR?C/hKI$(q[2&5F(4F`]p#TVm)'6G4-3Q>J;bcZ6J?QN-<B4JJq`ZiC;HE.<,N)FG,_QDWi0g%".C""39/Jn%XIqp(II_eo+>u/D1Ha"c^fPC8)(+J1*-V26cVt9,`up-?;nUj%cC;^lDk')UdI8pcAX[_p2;Lq%R#<:#[Z`Is-@r3EO-j#8j5[pq%[cf@`[B'#,R@J[G(Pkj,/`GmJ;LcAS_R`Q[1T8XDXPY'<dd6&.("IFc;WTpJ&7#<p1hgE+)rnUe.2WSO![n:Oks,Qq#$qO/7#h\7%2XlPMYk"2IZl=-2Y!a1)AdBUS,XrucKlNR/AGqO)K=&\[=19s=JA"[-09_JNLD5Tl4:d8&9Fo3EI9+`^*khe_WeIO5(;dO$/[rp1%)HbAX_t='s8*>."=@]rAXHHb2`pa'\Ujp=*9\2j.cr2l-_0Rsf$?<,qk=Wpe303QZrV<]PqS#qsO:R:L-RVgSV%jcWL$6rWc8#F4%m@bIg/d2Jh(3Mu.57[%_%MlnSlP&"H<XtM1T&d)I*tqhMpH0S_`;i_*nZ4(Ho)rI_R@@-Umu=PO<5Lf9Qe/;JakD>!jDhVlV(-Mu%E6)fJ:uAeDg?RjnN=D"M!stup+9r^e4r$[ciEGIa]&psh\Qt*V@P9Wt0q/tY5^G*OapQHd](AN],:SbnX$VToXkAQI!dQ!$cYSP:%i[%l$Q^*^W67DXEq/sUOEY*lG!o-c80^B#*_U;!bJ\lB&`S7bP:?(>VV-Fh%-PGdVL%#T<jZ1:N=Z*>)YZ7%Xb&#V<9@XoZ93X5*%"Sa8lgB7W\mK]4DR'F0ENF;D[fKhMW?[E.W:T@m=k-gj^o)g0Y&.lD[Ee/ru:9*;^R)">MEN2"HP\OnFY.MMN=RCWJp:\(KnBS<)%,O2cbo+,"0"s@?/_qMBThB^7seYPlM\QF!Y&W7.JEsk@R('&ZrmA2fhZccbOM"D3H8DM`m/L@_sFGa5u+aaUlCYZ'!)"mN]<9$RU%;J2B.fj49@:!/eBrDM%3bnUnUY6VYk!"KF<aj('50t'?8rkjKSWG@/3<AjJ:+ItC#&87_IC[VFhd#ApfgG9mF==)MAAp/\jm9VM9%T*kIXVYVVYlNYqFeR=`S!6E3(S[Ms:2sK.8oW3BSZd2`'f=U;6q_eSCoDpNG0Hs/o+=:S\iRQ5jne;-QPQ/&Si4sR;h;i@C0A2,[%!&3aNMSgGl!Z3u_&c+6:Z#jGH^>LUg,B%O>$`Qkk3@e%"f((@<HQX=-r&V+6kIi%^,#C@!A^].Bq*3=kriUO[0'C3s!le^cC/We`%.ZagH!0B^njQgcP=93hF>f)Qr/S7-\W@/OAf(t^K3SP!JlU&Eg6/dD-=)2tN+G=J*Vi!0rqn(N3Y,`DO^SVV=UBKff.&QSkG:=Y/%mGa55N%YR]2MFZVAPnd:-m/FrXFrGV!Y/t=j/+[Zkqn8(K_*):AIGqW39m;<4M[d;4fWP.MC"Sl?8om*>#Em:38q0\;S_gX72C0,%6Pu"u%66.d.P4_-q?iD/AfO<=c&QfrlVK@u";11.1&G"<G]1%@Qj>&a%=a270ekU<9XT*5#ftl+,HZ6kPMn_VQACM#1(<@fA;r;^%R&CE)V@@5`;eF]mMY-QZ=f6JI>?!8V:b]J]ML"_W@"!)Qd=\)<?:2&[1DMPiPu2NQ>"oZ?[V3&m?*cgG?kDI;M*ok73R"L2B/F4A%cBkZ%>U>8fBr/4W[`R3C9*es`igSfhYF;[#$4)6tQ]VsX>#=0XNZ`[f6-o;<?r-aq+>s**)S?Us-)4!7M`#B:,X<goS&bt%MI&T!%'K:[[qmeu6efl/O+>e]r&rC%#9gQsXd:^KClop\j/ius4#:+2>3H\&td<Ka&=OS=t"scg8h1dCe`TN#W1ES@s_.o''.[Q<E2B\T6%+OqTo'"I6OD!9aFA&$[h1-&;8]<E/@M0O#fn*Jtrd.hJP2@\!K"1/Dlf;7(.=CsV[M$s\>iV!YUN0q9HEtm&e$DoL*j$HcUcQOqi%BL$2<gr2h'RgON`h3sGSL$A`&UQOQ*oI)C'+Ypnn:dHgn#N\?I$Ri1JIB7AWgQP;;hj;1DSD[e(TjH)DK*;(<naN1]-'jo@!/`I-%I'^Nt*oA4e"5=it^J#;u]e;/M#^J91)51$b#pL+fb0_sahl4s@1k]Bg7[56;GIB5A*=F=ICuiOZEIu:1aEjK#=JjL\fYS\0d5UJR%Ro]qFH&#.C_H[h1qXg&K#mX$9.-(E(^WjI;_!OYZQSTKPCXg$$gM`%b"GS(&9G]mOqE^Hs9FXmd2!A^B(!7DmPct&H_Og5,rEH3.%^WfF/5L*S"b]0hmfCM//^F73TZO7`_.br_9qt!O`U>)@6b[^pZV'rDg.cj&0eFKLnPt;'gO?o-FaljuXq;hH@;YGf9#_:cmqaka_%_Qi2jE6r)4MBr+=81*e-(g8;Z_ROU$<t=j>+=S6BY'_G%F#boq\:O/CmmO[A9gnSekj<VtbDD9N`u)WlfrL\hl^+1V5@4P/I+&n[%BZ.@S"gs]FEj;7/P^aR]:Z/5*'iB;NJH*aGd0%Kr!hKXOi,p5'NWY-/Oq*k"RbktEq+p97:aHit,S+-U@YIca#hQVs!o*s\r7rd1%'t_s%(SVt4"(tiUe-!)6pJ1uF3'SQKN`tgGN.)a::)g`?Y7o=8oQhC08@C2&$pt>%3`Y]U&O*ZCWA#:iN)UDK*10?jN*60G8BgPg%-COk)Y8ai<84VKd%^K6n^hFC:\2DYH;9CZX5WJ?J_iOt`F&_RL)a9?D$Qg2qdO,+h3rie?6t\c%X6B:q?JXfdA[D69e>u<[8V>*L%]'lF,pG.&tOD0<@)n#FjZ(mjuekbiRki[Tp:KeCtmk>F.gefj!*u>P4a!PL=O%JmT('uO4(o7WR+k!+001"Uu=LM@sgk!cbdi<nn%b;ET;C@SjF,FQmMOc#Y\6uZH25&3eV#&tsECmk(qpBu_3]G#k>%M2OfE(+^1-ct.).]u6[*Ws9u(<t$<</7guHfVCSR33W"1$Xu<%_L3A!6=?4@7Em\_"Tmi7nui^@iruD*^-5!o/eRGtJWS`IY:Js4L?Q103T7)>Yd=R<>S-MQ:P"0jV<hoc*G"6(`hBB#9-2SMC?SQ<%F,6l_KiJFf0INr1CQRM'7GFaD-$OKd.URL>Q4l?t/3.09cgR?ZeI-0/Vcq@%hYKNqeqXfQGt#.3Q&@K1(05"r8IUVRirpmL+];XX%+q(YROedr8pk*#)Ga5!MWP$3`*r6]X):c!j<]K8d.;E/UR.57IRH-n-!?9>!A`OMmlDGROo'$BGV]M-h]D!`!Ij!"ElLtMTMY^HG%%Cfk*BM:pW^g7\O'\1'(7it+B@8%Rlr!-PpRr)/]i45Mr?C*,i:*)FC'd#pXlL4ksaa1cL47nYmg,_;C*067W61]N_lKFq3WCU@t%,YGTQ#K1H9P&)(WDcWNM%P31G*!dE^:bR%crorH.<)Z&^9d:(mANlAXTHPeKD5gR90t1+VCRQbP;]qEuUT6NCV/TZMgGFYf!-oRs%A(c\'Nb9u2artL_O2rp@JCru4ALt3p*rt9!%&KId<(!@W>_@#FpCpYFKs*Y<i#AXsHpM5$p;%-s/r!@k&l@GgkqQr:9L)B.P0^&2%3m$s7+]<,)[bS5IJ`)m&8hN[Ch^)b4gO,s+dPl8L,s$<Hor)iL%?HiT$fR*8JY]m&gP.Sr;DNI`g#cfQ/[s<=2<hBik<^,rSoJ$;%P)>?[aR0/hQH#Lh[el7nm2iQ6G8,q@k-Y!(A='LZd^Y."17%B-Y9mcgh5L"*^,t4"7Xd9=Sb'p+cc@mVa0Fo@j-2Z(Ab<gLU_84D%s*EKKkPqF8ZcS_$M:!URWs?>P:B[7XIl^MrAms-gS]_Z+a'"mYnY1p"k[uB"J$68;2O.+^IbQ57O$rsq]1'l4eONi[>D<(FW907c%/7Y<'a65H:g#"1N,Sj"]7OkdR,Up4h261+n$VE3T!D>2+#dAY,!mgs`!E!_Y'DSA[7`Stjmdg_EqkM;%JsE8)es_;f0D:1uCSk/&%7`I:F3Xfd/g8?4PgW@Og=X`!l-6Tp_W7P[N%$10,isRfo%Y:7BG"s*Rb7ue<=i_gN\hn^RWN:9C''>-6=!s']ebju\/e0npquo$&%0)"G.^(@u]W2mI.V1r%sG'bj,=\`0Wk;J[h[%\4+L?C`0F7:nhaFapOH/P5#c:C[?9:1/QY438c=!Mg[A979k\h+I"+CHRc;RAWq%Nl%$]Gl"kbof<PA*_A$#4>3%H%5>&j+3'G^PThA&iD'Y^1GAiMW-k3S,=<,E\47m_%3gnLSh^nG'DkG&-5UYER[?7$F9_INM1KB-%X@+`SgLKtaVetM2@aaK!;RqDNWos?P3.^,32KZ1e''8i6)"S.4BJ2pML^JXNo=61sC*Id9^)>@q'$.ZL_tr2j.lq2)C_LBc-,&&"%n6DMWX%PlB/Kg=Q[iXd;lP:0d!hC4Z;9\05`S@(Eq\'$^Qn$5(rMcMAY9\.8fC8:1M^Lc&eY@>!X_VTo<E,R@D@hW."GWl9jCNG4%MI!uJ?NFB6"#/8HO-+#WLjcKpXJO@@-fOBSQ/#9f=Y5G_[ApR)Ok.7\<)I8WBY%tEML%aX:H$u!nq_$,`E=_IqS>MhGX^&^(5H%F%[U"J^lo@soYtX.T72aOX7V4XR;cp7fS5dH;M=YKu_GK3HHS/QH`%+=:_caJe_X$QBW9bGH4-^nL2?%n@Te:En2\N^$Sqm.1'-fA;%.efH_27(s=ll9qS)%W`B,%[-("1gV_Gk'dR(tH;A_[SVl:qpcJ`YmO/WiZV:PiIUR3FaX3p6,TPN<KLDmOLb*8O4dq2+&7<_!rja%p7ZI6c>!jB(64@h3Dfe`*NL3:&&@PLf;T43#(nSk1.N?U/[%^&DpOR=Ib3'&2QkbUS'+gp3u*!`X1#K?gF&MSMb;i#@2M^$NOK_*%6*;0BiN<-+mjjq.H\Ma:cmmA)'8*nXOF*hL3kE29"UO:EKfo.#6pQc3_%+<BOoQ,h23-(sUn0t@`Oe;Do58u5-B-6?,1mtXK'0oU%G9*Z7(mTVVlr>!=@cl'ZL4SAfM+Y/r$lG((&(CG6,[Q&rF48EO,XRNAguZ!s'qB+0*@]LH&UbV]OX&E'q/7EZd0/<j#:>=En'a0&%[=h\?;["c3)]<*SZauYDpAHTgKVe9UES*p,,C5<OQ7`o"DD!^sa)N5@CpsUULplO'LbLi=i[DtW5g7bFe,Z8ujdB"(aC1%?pW*h!%bN8]X`i=D$fTamM>)-g6Pftm#@[.!m1mc@-EF&1N%0R0%<YQ$1b7\LM^/'^$V4#HN"5KhMi*L5m;@Es&KYAE_<W/L:VRb/#RXnX=%i8R'EI#_Vq8#h9ES/,SVJfEI`Wa/@>'=ph:S+oV-#?'`rrY^7Zo_<B-QYME$B-HSPL)ab[m)rm-r70+,@t<3_'X5LB\sg^X2hao4%OHn9]pqEL0?+F!/)ts2Kh-kcomP40de^rtJLklHtCZ@hfOm`t,_rs3R0NGe).b4/,U7`\jf_JLZf&.;u9L9sI;:Z?f%\/orESrTI%afr<>1LQ&g#no&VX&48=<UdMhl-@VE&q)L%SJ=&TD\(M8^t_:!*gtouV[3Q=_<>p8@N[!0>YMHih-S,PC9&j7`5-!=Z?`opT2[0k%0o1gI6PL*bFI79Oa9i$FVNFYbqUI3sM->oW26Dl!I:PTTb?"%u-dOW'*]Pl][?r;CXd@\j"LX6CrC3Mj4WHdD=Pl3E(.BrFOO7ad%bS!"FRnB0b)/2Xna.4]IYM=5.30CjqnJ6:l"i^Jo504sQ?Pi8e_XMXo@WX;d<bIMA2^:u.(=t\i:pE4XB]=Fb\eU[+Vj2_5fjpOh%Ia(%fm`uAr_%JEIj_h^2%/jfh>S\9,R15!8Iu8AZC_aE-TrC>1kUkE_F<Di-3tU+A*r`^^.h6@0].DQ?qq-T7WTmO*4d:.?2]ee_%niB)J9(jmK"1O7P0h"6KpAMB`'S0%qIM^+V1@;GRWb&L!/s;_A'H#W;8B,2C&Z-GOM-7cVb=[-/0mKb0s6`9D`$/t1l&`<0FI4tK%bUC)/JAPG^h4$rLK\L3Z`N>V>am*Wc<&oA^`$qs6T;p5,15FA#%nYcU0[2$,KL$Wd<q[T_+_qU6@%H/c.jNdho)570^P<M#8Uj<C%Y'4CHS1hhSO9`Wc,kKSB[UtlGPOC40<SdP^6tQ3$fG;mYDJ`LCD'@So\J3roX8'ku!RaB=iDR5SD+!r<&7C14D&0:JFA9Z&mhlZm%e+iU.n+H\KJ&Pdp<LXm&rSmsPPD"T+ge0/'3s-]$reio"r_.e@mJcG/rsG(Lh8#$<G;Lin^EeLYjp.IfmIm]:'m]8\4o=mg^Z06^%hq*qXqkM#1?JPW8`LIaKcWug$PV+[t/;t(GAZ!o#lQp!O+=+MI<@E6?$:t5e*c(6T#"#d8LVR&ic,UUN@6N<^1%;@A[j;p]opD!N%1a#gk.G+*/;XEPRJ]i0[](feEN(\k)5?gVL=+U3Ye(`*0L)\Y!Koq3Z\&qkLO<iaLaP17O$-OMR;bg&P,.e.g#P-hkm]CXq9/]r(%pq4)VkW2o/CchF;j5TUcbM\B,o=<MJn2_C/&"=D!'-[Pu^o0/G4;/tE"b%i@\,`:n3&#*R&HUc3&6U\G!Wuu*rXoS`"dX01Da#S^%&GMmm73SPQbYj-AXFeKZ-1BcmL(#@\Ab^]+?nFcJ[+At]W[R+%QW(7&49*$.1p";g;-+&TH!sE-KMH=F7Nr7%WKp-p<MU`&c/+de%GJ(GjX(qj-ZI7"pj;RQ)Qa?A7VY,-O+dZ;N^Bs"P@).U"Tsu`fH*UhYgm*WWK*S#aHGQFS?QpaO-M>of-Xm*(%N?0b^ml<oN[RH3%Nk_KA#`=;&E)>)]UmsHM%#$;"%l8a^pqL$hU2jY$R<Uf#;hDSb+X[@b6Mho3O%7f[#4=Dj!XZ(p+'TRN*L'FkF]7A+IafL)YNf!2%+KAu(Ec#eQfSXG>9e.$mVVp`A-81dA0EWj51m1K/CDJQ!>p4H;A3R$M,LK"2`teHckG`G$XP-,%bG2g\g%nq1p@ZnhrqO3<Xa%SW%4K#\=(PfQ*(%XsA>$rHt,D"Vt].s%4l2jD*#V3p#:f0)T-SfnU%[r&PQ;:fop@^6tkd`B@cMT!^*JV\d@9bnDCB?*oe#.blO`F$A%a$fK(VGLfSP:R6`?Y==(M[UE3"*)73$SrQaPnRo2>lJkVTV$dl.[-oLMN[f/3*Yd+_CQi!6`cZ5_B`0`Ul<.nP#b7.PtF:FGblFj%a!Ii`66?T>`+1pN4Vg;T"rDt"XOT?6pV;WD3B/H4c.R*E,GhCoZ\tcuU+hLIN`QXdrH8d?/d:8gPt17(Jkds+o1`-"k\ZJP=_K*S%>HB:id]XB!]<HX#GjPK)<_bFt*!TfV$@>keHdjl@7J@\)B/Qk+fP?*[nWsE:Tda82rc2Ete.G6C@F%gY)A\1ji\,l1\PJoai(O,(%@B,Y]W.mAk`YNY<BI?H#f5,=fI_Lj7W[j0/L$I:Nd]rjH,4h9]-j@-M9:pshTkrH1Sp4E+X$-,.j!-FB$C1HKJb`jjg7N<:ll)>]%o(=t8ZtnEj096l/g[-Th1,c@8OTbo>$B/#CYk]9kf>bUA`G=eCrTqCm5NMRrBa?$nMXZ62/tLh5M:!:H/W`e,[1<TUO,'l/Ku@G:%+LJXHi,djB&K;056V(U0@r,9ARSrZF*QZb`'*Z0_%M5637?>6G"[:PL&[?s0miK,_^.XX@ML?(/-Lp?Xcf#:uN4fc=e?PbpN7"1q%cTmF4n</G5*c!)B68.X$X!/CB!t1-mlGs87`*&N_eDIm1"3"[n%nr=$1K&nY7!rZ%:`:RQ@K4l!S#-:m&!7iibmFqFhDg[GNl\),%jW$0nM6R]5]n7-!HrD"n*$u.A)V(eL](O+*<P82@SKZ)7"@g7Te]$39XAuXTi405hrgIG4,`=@hOuT%,G5"`K8C(NMK?gYV8hmbj%V!l46Yq`8AYpE*1CL`(D%-3RTcS"S[6[o%NJVl,@2e>5I(\[M_+/EE50C8L%IX`eM1%MEsV/8LIN,N0,ksfHSB\Xm\c+#$#jV+VP%<]i&cm/it-p-<r&%f-%<!2I-H_O_a%P\o&K!g2-"6Un7+e.n?N]0t&e&*d6'XEY=P$k[\O\oI5'"7JY!Z#`/='k-5YdiJe`S/.j^%kj38a.bWIo1N%(inYB<`g,4Eah(=`om,Bj36-s0;JcdPN*r=SC"LXT7"1bW`0m_-U-Tr*s$09>%jFJUn\;66D#)13c&bg&@'Wm(0%?K![9^e3n08:Lae!kd,fr9c"j_!=0c7b5D(i/J[Qo?m;C@;<Mc"Cg[_UVZm8.FS5Z0J8ALUBT.F>nVNXS=J84i=0.qQ6)"EG-80Y%8u:fnUWG+.5D)oJ6l_<2:?RL8:8G:u*#6p=NUj4hZpY?VH,XZ;BB0cEk?O>ZdHK*Vi"u*,fjhPZ#/^-`[M:((%tse(H>[0DDk4\W%`%u$TcnoU=5.N4"OHoB_E4(*,9;4::3e'Ykif"RK]e_/cN^+qL5-PsNiK-LQmLZVn,hMSV>a[Wu.oi.OFm@0\TZ'O\lS/0<!+AQU%`!L9L^R'27DOQOh39bQo'P;idR-"N6H1cJ-[/Kj3"P,HT#qf3uF2k1[p2^_A@KHs!,+_Ai,5f6tY^RdaF3ZHHI;F();Q&mps!FGG%p*dH7ZFc_;@023,XshT/NFCu8Kq'"I6rd%N54H9I'qT_KK3>0%=W"5>)bGFL8*"!'@$FJ4;N$d5BPQ],`lK+HF1hEmWOb9OHP?a)%i*3#T(a+[Ip29W2-3tMmcDHtH0o+;(,-G5\1L3c<e9]s2NUQ2TpqSZp*%7(X->/HiYEEtqG'r16XBoX5B<'cL5RR#;?`&1jYc&ph%)>!'2@.`H%#d2j4&ED,P1M-Y)WH%\1"HN"9R<1H'Jqq!?2iZh-W.j!&Jj%=-X?su.#R)%?52GZ.>L\=.(*!=+h"$&%1-[ecP"sUq%32U,^jQfu*=jj@skLP+ChSLXh9Fj&/E#i5V[h(Yl^6[bW9`kJ5id7lQg?b]p8rps3D?UMt\;7Xq\B*FuhKVsn,n:<Z&K*BATFSTp%(.tAjp$`1^+QPMZ0!DW;q3#JdQLlG7WtlX<F>i,k9/P*/[4:>rQR^3rd9IN--L]&Y85Vn@c7#7Jl#MgiUp]L1]`@ph4Z/oERi^kR%'")Sl4r5l9HHER*#MIDoDEM3k>*-Ij]KYe-nlf<W8<!^O:n(<,>H4dE'k_Zn\fB:4F02I,1:d7n(ar[jJ0QYB?ghjpr#0P4\r;B*%o?I"1?&5Wecm9,.HNqdF32V\YpkhGiVmfB+bVmM(cOQ[jU)`<Ii29L]Tr0]3AD_t%M!:!]I30:Rq#^qHkcF%[R1W[R-<V4r,E8d=%=P(.O^jC$VT7o49Xc8j0YgKB`q79so@uLJ/`S>7kJOFj&+e286Snl\m>nsd1jfpp/P-<.\AVcVO9oTP0,NZB[,:r2d%f8F7onF94%;_%GBP"O83Dgd<LUkgrH7equ`me7#67OuA8mkR20FQn!-Tdk?A!XYRs'P/*p3P!On85fY^:S*U9kE?IDD(JQnE]]Em*o*.)3&0O;%/?0/^(d0ng#c3_2OTUs>NV!rsk-<4d@cWc5V4RG\Gb=UW8\WkHh[u)%7o1CX7l86<3E7F&+ni2RI35lE>cK&]RKK7p$2K4ui>gf,%EJdSUs!Eo0=#pK[peBpAX%S(i86qXFkd4M,Qn+%;H<$9fO\=4@+"LG"%ts8QSg264&lc]k*Spf&.8<ZnZjiHIW_&&VY#JiR@<d@H%hu0F:]@q+1R&&6?AI;NrCUH6@fnaC]I,S,+e[(_bmbYN>`rmrJ=)tq-mh91V;og;Kl@:Q;@M@d0+q9O*/Egk:>iO+cT-qX*f`Rr>%:F)iT8/ljD3GNXUW>;d[=pX$[\Y&K4C3##rd$'Q*bm93V$g`?IR.K[a\jG[e4q=ia)01t`YV2%Tg[=[OGRunI#-"`9>0+T?KhJh8%Q.&(p^7u!9\QhcHpAAmc_(aJNh@V[Ks0c-Jm+;DWnC.76m4_e&@))BhYHdV6bY?NRI.j&AT.C;SPojjh#PS)SftVosrO9Q1lc8bu%nb!rm>.6J>euJVemh^qqYm40R1219($<3cMI[DrILnnh81*P%Te8u]XLp`>!i4QFnObkBZs.hLBi;Z^[6INrbX(l7,H+7<AaRSot%lU8nG?BCjr@ZS>L,>I*hO!4g^P_8A@Y?B!tj`QoiL`[U-;N>ojb^U<>:J)LmWG!%7VLo;$f+r)@EPPF#_Wmt5>R;WbMc4WiOnob]%^&_K:8i;U>a?qOJ+4!sR>$aF2,$$(m!hX3b3@U6M]?6F.`_'(>glK35L?SHG<0?tX6'OI.f]Q$15N23D@h%dhD93l$6)i:l_dQ"3%qbn+F=!JBBYVDEIMo=-VKNJ#B*ug]gGb1;F$Mn9kc3._c%/=puRMFlUOF\iUrOi7C4ljFS&OA5F]qKaH&]+uJP%Nr%=1ICeC$>n[%X6;T4k:/?"[RJfUZfH9a>>O<gC<1hu<)JhJa9dt9&jpQ:Q^/:T(F>$Fa$c&o4<00BH6Vt0r,W;ZOu`D=;9D[-$b8]Gbrn`.R:BZg%Y;:V<WsiSRWb'T9HhE@\9FEjNT.5aLQ8qgPEbQ]+3*H!"UI<S5FKHepf[j^s[?0b`.=LaR0qKdHdmD%qXX-oR>)b>#LM7o5LIpZ2%"Y1Md'<nr/4r/h6lKBMC6KX6_XW4CE-LriBjNr=T=`!.eHd^ZhrLej<"hcD]N:.Dm%s4FaQ^GE66UrS9G"b7EP!Z%Sf1n3rfT=R)%rZ6KF]c,B82^'4&+f'1S7?,Whmkg&$koe$VZ)NB2bJr>8]H\oC.>-CW0-%]%8CmokW_t"[NJeWROL*Ihc=%5^6,k7b?Ae6:$8T9c%f7L:"813tIC;r?c6r3rBSU9FdosZVG.@-rbN+(/YIoRu>>gEri';s]%UFaIA;+&GPJt1>3F,aK/Gp3c+/M#@<,,pOX.eAli[^!Z"%r-`$n'9rVSoFu5Z<0g5ZGp*\s5VDS#-)P_l4K@!b"ltunfWk[B>FGW\(caKZ@7`XHRY^6dQPD+f[QQo63XVCi2PRC(HlPt:'8Z:A%P8jDI5ORehGEkib@T$EO?4LE/+#iRI10;PV%,Ea)4q<P!Bj:TS$\N!*Rj&e*+NU8;bIIj_eM[qJ1?Rj%5Ahh]7Z:+A\5r3r5i$1t%W`/1Po#G!7B.=6-F!-);A;XbjKW]EX%u5<'RS3X)/q[+\V&(b-WVG1fD>E4nm1$6pWIA*Q"1gVL-h*5k0itB?VTE&e!ua<&>+[%l%.U\W34V`pX5t5.K`n$61"atcg=Ll^FeO6]g4KC:MGC.E.`(T6M/UNF?6J#1$c",;Cm3^WJ;I(X2NchU[Fs:^j=]eXbQ'@??`<%8.%l[LB+[j418HS3stZ/p?_*s3C+.Nct_J)m_Z*:fMTJ\abB%FA!::+s.::ni"pTsgjh@[ED%`hIn"IUBGiD(6X:\<2P<+1L6-mJ/8-%*SAtHmRQO%=qopQV2nIs'D'Ym[?qHZP!6$O`9CM&(gQ"GI!dp<j-msR^86lR,3e-EHuA3/$$kcF'W\'/qRBRq#knR4*hX.L6`u>j%;2:.1gH;<nYoV+hrLD<V'6uS%j.0q"j'r">g#G?]qs\PK]*O8V!F\PA*se^(-h;6)a$(6?f/Pds5o.hFp!uL;<,V*`$6mRZ[>u^+%E8&>rQ*cS_K_Ho\no\[hF15MHp@4ZDQLs^=d['Io8i%cQ1$PT54lRC*@>n-Nn8Zr70*f]II#J.VrB7UYER!2HH/[dunI$^r/W9pZ%iqdc6`tS@H@2,9La-bR)3Vs:[e)XCjp5&Vb-h8tQ@u`d?8eIk7i`sXHR(%3RZ'CC9:_`X>$cXr%c+.'$`tN_Xj^XoTR`=RTaW,C3%)%*BmHlUcKs//O;L<Q%EX6S1NFKLj.&8+LL4/*T3<R(dQ75*=V%k\BjHou%d]%SO$?0c&F!Raf8aMTGKmo7]o-e@g,.3ISH(X``a%Qh%CW-0=0Xdo8O)n!hJ?5*_@nf6X`%L@Hi]41:u5N30G+s&;"u=pRhQYC&I5C+15,?umm\j,#n,o!(t9j^TDq+m^sQNLP]%5"<6,%FaY_]cTUl_pbh!goS["D"^'5*,VD6'O*0]V:YFcNIU08"fF$QHp$$"Jd5OFpL[K.>'ugo\_;$9a^>Uef31eR=39NnqHqGJVjC-KW%of?$N?E0u)DWtX`7(jVha":t#je\$cm&d5(9)<d4kYs`hPs,A1>oEg>D*pJ'_qFQ^fYU\;4^No[V0e.eN(El%dlk]]PChCL`o*24%\O26Kl5PB+.sg%3?$0*?fN7Rl4l30noU7$Ipc8_Rb/_tkqL)fn/'?GUh8g;MSVYnDS_0:L1'nJ_-UbFfLWl-W-0mXTXaGLA'&`>K%!8cg:L3JK_(@f>Uo'sZ,VX]_gZoEC`afESG[#jrE,%n.d3VDFdA]0$=&8Qat9s4<(RO7%EO*rKF>Xf+[gKn'%(!<p>0s?'hZ(o(H%,HRrFJ?4AL`_PX7$o$Lg:[I=FOjR+la9)q!An-OQ2jAH1&M`Zn%k8s]5TE]7\<r`L7^?1*-R):C[7MV:74I,mK=;lfT#s:O&VGh^%rBZf=i*NdAUc]aeX*N;!-g4ZS\!.br1*jDHCSr<d'oU+bSLRAR8[/9dNL4IXSm.MF!d,q7l^Y?p/V8`@3=2SN<,&OJ>cSls.5pKP%LLgf'a.tp$i@N=LC%XAPn$AkDV31lK5d[+-I#[h(l:8<Vo7-tiiE/>MQlG8r^9=3E$ulC7*P/IYBs8b^o7!fJ*c\=F0L]*<$VdrK%m1n-&es.3Qj^tD_@;LS:dkqP7\7CKM)[Z3.8>#cq%Yo<1U2BW$8GYAHUto:i0q<:rAN<bdBemSlEN)KM,#)3mBs,Xh1SW4EdPRP^%H!C)h?hl:!A=lC"b0>0H&&^(;:CJ#o'>[]1<0?<S>T/BT2"0pkPDk7dnVSAiPP3"n0lCbtj)>;l`7C$QE3R&O%I&/5HQp"Z(F5gQ%qAe=^=!c+\_d/K'IW=!6:1Y?l0]HmIR2XM@`[0?J1o,-OM<i[I"(8I`4S%3%:(:p]Z.NK5T,8$0>=9CA*=rKn($UR")<i@\FejRf%MBPb9l"qg(3mnj'N!`iOde!7AFenaTD<ja]<)XrdeUpB[o>[aSD>(WE,J>ur91QQ^M'%$aC$a0Fj#hI[D0rg)Ut6B(X%9iZ\k-)@%e<$9!CTemEQ^B'0NGU/[e,`^BgBV>2fIe7d1Mmlk[NksaMY'Y$"epQQX@J&QAehU*Z`J!]l*Y[c)<lPfgbR;>ePq@Eq^<^RJSbL.%(u0b,PEDI6h^p(dGKF&YHDbf^RuDa`UYtb$.EqJBj.65)qUa@!q!iS._uE^9O8o!9s6&#&s7D(rrX]%fj7!!8J,0%-r8E/(kMQ;(%cTh@!a$9Llp]()F?bcW]J,H3oq>J)+iW$Uko'7Csq%%uQQ[ekp5Q(B<s8>an+-?A^RJcOQmQ^]ss68SD#D*o5`r~>%AI9_PrivateDataEnd