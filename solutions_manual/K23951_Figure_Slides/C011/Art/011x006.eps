%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 011x006.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 253 161
%%HiResBoundingBox: 0 0 252.0054 160.2891
%%CropBox: 0 0 252.0054 160.2891
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 8368 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD15FFA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DFD%04A8FD29FF7D76FD547D52A8FD28FF7DFD55FF7DA8FD28FF7DA8FFFFA8A8%FF7EFD04A8FD05FFA8A8A8FF7DA8FD06FFA8A8A8FF7DFD07FF7DA8FFA8A8%FD06FFA87DFFA87EA8FD06FFA87DFF7DA8FD07FFA8A8FF7DFFA8A8FFFFFF%7DA8FD28FF7DFFFFFF84FFA87DAFA87DA8FD06FFA87DA8A87DFD06FFA87D%FFA8A8A8FD07FF7DFF7DA8FD06FFA8A8FFA87DA8FD06FFFD04A87DFD07FF%52FFA8A8A8FFA8FFFFFF7DA8FD28FF7DA8FFFFA8FFA853A87DA87DFFA8FD%05FF7DFD04A8FFA8FFFFFFA8A87DA8A8A8FD06FF7DA8A8A87DFFA8FD05FF%A8FF7DA87DFFA8FD05FF7DFFA8A8A8FD05FF7E7DFD04A8FFA8FFFFFF7DA8%FD28FF7DFFFFFFA8FFA9A8A8A97DFF7DA8FD04FF7DA8FF7EA8FF53FD04FF%A87DFFA87DFFA87DFFFFFFA87DA8FF7DA8FF7DFD04FFA87DA8AF7DFF7DA8%FD04FFA8FFFF84A8FF52FD05FF7DA8A87EFFFFA8FFFFFF7DCAFD27FFAE7D%FFFFFFA8A8FD11FFA8FD0BFFA8FD0BFFA8FD0AFFA8A8FD09FFA8A8FD0AFF%A8A8FFFFFF7DA8FD28FF52A8A1A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A1FD%05A87DFD07A87DA8A8A87DFD07A87DA8A8A87DA8A8A8A1A8A8A852FD29FF%A8FD217DA85252FD0B7DA152527DA8FD227DA8FD4AFF7D7DA8FD0DFF7D7D%A8FD68FFA8FFFF7D527DFFFFA8FD0DFFA85252FD68FFA87D52FD14FF7D52%A8FD65FF7D767DFD16FFA8527DA8FD61FFA8527DFD1AFF7D527DFD5EFFA8%7652FD1DFFA87652FD5CFF7D7D7DFD20FFA852A1FD58FFA8527DFD24FF52%52A8FD55FF7D52A8FD26FFA8527DFD52FF7D527DFD2AFF7D52A8FFFFA8FD%4CFF527DA8FD2DFF527DFD49FF7DA8FF7D52A8FD30FF7D527DA852FD44FF%A8F8277D7DFD33FFA87D27F87DFD42FFA827F8F852FD35FF7DF8F8F8A8FD%27FFFD1AA852275252FD09A8FD20FFFD0EA852522752FD21A8FD05FF7D52%FD197D52A87DA8FD087D52A1FD1EFF52FD107DA8FD207D527DFD05FF7DA8%FD25FFA87DFD1DFFA87DFD32FF7DFD05FF7D7DFFFFA8A8FF7EFFA8A8FD06%FFA8A8A8FF7DFD07FFA8A8FFA87DFFA8A8FFFF7D7DFD1EFF52FFFFFFA8FF%7DA8FFA8A8FD06FFA8A8FFA8A8A8FD06FFA87DFFA8A8FD07FFA8A8FF7DFF%A8A8FFFFA87DFD05FF7DA8FFFF7DFFA87DAFA87DFD07FF7D84A8A884FD06%FF7E7DFFFD04A884FFFFA87DFD1EFF7DFFFFFFA8FFA87DFF7DA8FD06FFA8%A8FFA87DFD07FFFD04A87DFD07FF52FFA8A8A8FF7DFFFFFF7DFD05FF7D7D%FFA8A8FF7D7DFD04A8FFA8FD05FF7DA8A8A8FD06FFA8A87DA8A8FFA8A8FF%FF7D7DFD1EFF76FFFFFFA8FF7DA8A8A87EFFA8FD05FF7DFF7DA8A8FFA8FD%05FF7DFFA8A8A8FD05FF7E7DFD06A8FFFFA87DFD05FF7DA8FFFF7DFFFD04%A87DFF7DA8FD04FF7DA8A87DA8FF7DFD04FFA87DFFA87DFFA8A8FFFFA87D%FD1DFFA87DFFFFA8A8FF7DA8FF7DA8FF7DFD04FFA87DA8A87DFF7DA8FD04%FFA8A9FF7EA8FF52FD05FF7DA8A87DFFFF7DFFFFA876FD05FF7D7DFFFFA8%A8FD06FFA8FD0AFFA8FD0BFFA8FFFFFF7D7DFD1EFF52FFFFFF7DFD07FFA8%FD05FFA8FD04FFA8A8FD09FFA8A8FD0AFFA8A8FFFFA87DFD05FF7D7DFD25%A87D7DFD1DFFA87DFD31A87D52FD05FFA8FD127D5276FD127D52A8FD1EFF%FD197D7652FD177D76A8FD19FF7DFD4BFF7DFD32FFA87DFD4BFF7DA8FD32%FF7DFD4BFF7DFD32FFA87DFD4BFF7DA8FD32FF7DFD07FFA8FD43FF7DA8FD%04FFA9FFFFA8A8FD28FFA87DFFA87DA87D7D5352A8FD42FF7DA8FFFD067D%52A8FD29FF7DFF7D7D537D52A87DA8FD42FF7DA8FFA852FD047D7EA8FD28%FFA87DFFA87DA87DA87EA8A8FD42FF7DA8FFFD08A8FD29FF7DFD4BFF7DFD%30FFA8FFFF7DFD4BFF7DA8FD30FFA852277DFD49FF522752A8FD2FFFA8F8%F827FD49FF27F8F8FD31FF52F8A8FD49FF7DF852FD31FF5227FD4AFFA827%A8FD1FFFFD13A87DFFFD09A8AFFD07A8CBFD20FFFD17A8FF7DFD10A8A9FD%09A8FD05FFA852FD1C7D7C76FD077D52A8FD1EFF52FD297D76FD057D777D%527DFD05FF7DA8FD1CFFC3BCC2C9CFFD04FFA87DFD1DFFA87DFD14FFCFFD%13FFCAC2C2C9CAFD05FF7DFD05FF7D75C2A0A09AA19AC29AA1A0C29AC2A0%C29AA1A0C276C3A0C29AC2A0C29AA09AA075C2A0CAFFFF7D7DFD1EFF51C2%9AC39AC29AC3A0A09AC2A0C29AC2A0A076C3A0A09AC2A0C29AC2A0C29AC2%9AA09AC2A0C29AC2A0A09AC275C2A0CACAFFA87DFD05FF7D9ABCC276C29A%769AA076C2BCC2BCC2BCC252A09A7C76C2BCC2BCC2BCA076C2767C9AA076%C3CAA87DFD1EFF76BCC29AA0BCA09AC276A0BCC2BCC2BCC29AA09AA076A0%BCC2BCC2BCC2767C9A7C76C2BCC2BCC2BCC276A19A7C9AA076C2C9CA7DFD%05FF7D75C29AA09AC2769A76A09AC29AC29AC29AA076A09AA09AA09AC29A%BC767676A09AA09A9A99C27C7DFD1EFF75C29AC29AC29AC29AA076C29AC2%9AC29AC276A076A076C29AC29AC29A7676A09AA09AC29AC29AC29AA09AA0%9AA09AA099C2A07DFD05FF7D9ABCC276C29AA09AA076C276A09AC2BCC276%A09A769AC276C2BCC2BCA076A09A7C9AA0A0CAFFA87DFD1DFFA876BCC29A%A0BCA076C276A09A76BCC2BCC276769AA076C276A0BCC2BCC29A769A7C9A%C252C2BCC2BCC29AC2767C9AA076C9FFA976FD05FF7D76C2A0A1A0C3A0C3%A0C3A0A1A0C2A0C3A0C3A0C3A0C2A0A1A0C2A0C3A0C299C29AC37DA8FFFF%7D7DFD1EFF51C3A0C376C3A0C3A0C3A0C376C2A0C2A0C3A0C3A0C3A0A1A0%C3A0C2A0C3A0C2A0C3A0A19AC3A0C2A0C29AC29AC3A1A8FFFFA87DFD05FF%7D7DA8CAA8A8A8CFA8A8A8CAA8A8A8CAA8A8A8CAA8CAA8CFA8A8A8FFA8AF%A0A0A0A8A8FFA8A8A87D7DFD1DFFA87DA8A8A8CFA8CAA8CAA8A8A8CFA8A8%A8CAA8FFA8CAA8A8A8CFA8A8A8CAA8CAA8CFA8A8A8CAA8A8A8FFA7A09ACA%A8AFA8FFA8A852FD05FFA852FD197D277D7D7D76FD077D52A8FD1EFFFD11%7DA25252FD167D7CFD077D52A8FD20FF7D52A8FD3AFF7D7DA8FD41FFA852%7DA8FD36FFA8527DA8FD44FF7D767DFD34FF7D52A8FD48FF7D52A8FD30FF%7D527DFD4BFFA8527DFD2EFF527DA8FD4EFF7D527DFD2AFFA8527DFD52FF%7D52A8FD26FFA87D52FD55FFA8527DA8FD0BFFA8A87DFD0AA8FD0BFF7D52%7DFD58FF7D767DFD0AFFA8527D597D7D7D597D7D7D53FD0AFFA8527DFD5B%FFA87D52A8FD08FFFD047D527D527D527D7D7DA8FD08FF7D52A8FD5EFFA8%527DFD08FFA8FFA8FFA8FFA87D7DFFA8FD07FFA87D7DFD62FF7D527DFF7D%FD0BFFA8FD06FF7DA8FF5252A8FD65FF7D52F827FD10FFA8F852527DFD68%FF27F8F852FD0FFFF8F8F87DFD4BFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF525227277DFFA8FFA8FFA8FFA8FFA8%FFA8FF52272752A1FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FD29FF7D527D527D7D7D527D7D7D527D7D7D527D%7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D%527D7752FD047D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D537D76%7D597D7D7D527D7D52A8FD28FF76FD4BFFC3C2C2C9CAFD05FF7DA8FD28FF%769AC3A0C3A0C3A0C3A0A1A0C3A0C3A0C3A0A1A0C3A0A1A0C3A0C3A0C3A0%A1A0C37CC3A0C3A0C3A0C3A0C3A0A1A0C3A0C3A0C3A0C3A0C3A0A1A0C3A0%C3A0C3A0C37CC3A0A1A0C3A0C3A0C3A0A099C29AC2A0CAFFFFFF7DA8FD28%FF76C2BCC29AC29AA0BCA076A0BCC2BCC2BCC29AA09AA076C2BCC2BCC2BC%C276A09A7C9AC2BCC2BCC2BCA076C276A0BCC2BCC2BCC2767CBCA076A0BC%C2BCC2BCC276A09A7C76C2BCC2BCC2BCC276A19A7C9AC29AC3C9FF7DA8FD%28FF7699C29AA09AC29AC276A076C29AC29AC29AA076A09AA09AC29AC29A%C299A076A09AA09AC29AC29AC2527C9AA076C29AC29AC29AA076A076A076%C29AC29AC29A7676A09AA09AC29AC29AC29AA09AA09AA09AA099BCA17DA8%FD28FF76C2BCC29AC29A7C9AA076C2767C9AC2BCC251A09A7676C276C2BC%C2BCA076A09A769AA076C2BCC2BCA052C276A09A769AC2BCC29AA09AA076%C276A0BCC2BCC276769A7C76C252C2BCC2BCC276C2767C9AC29AC9CAFF7D%CAFD28FF769AC29AA09AC29AC2A0A09AA09AC29AC2A0A09AC2A0C29AA09A%C29AC2A0A09AC29AC276A09AC29AC29AC29AC2A0C276C29AC29AC29AC29A%C29AA09AC29AC29AC2A0C29AC2A0A09AC29AC29AC29AC29AC3A1A8FFFFFF%7DA8FD28FF52A8A8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8%CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8%CAA8CAA8CFA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8FFA19AA0CAA8FFA8FFA8%FF52FD29FF7D527D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D%7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D%527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D597D767D597D7D7D527D%7D7DA8FDFCFFFD16FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T11:20:34+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T11:20:34+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T11:20:34+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>164</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqwmWx1H&#xA;WvOut2ja1qFhaafBYm3gspIo1rOspctzjkJJ4DFUQPKkZvDYjzfq/wBdWMTm1+tW3qiIsVEnD0eX&#xA;EsCK0pXFUGdM0UWst4fPt/8AVIZfQmuPr9n6aS9PTZ/S4h/8k74qmI8kTkAjzRrZB3BFxB/1QxVT&#xA;uvKK2lu9xd+btYt7eMVkmlurdEUE03ZoQBviqGfRNMSK1mfzxqSw3zBLKRr20CzM3RYiYqOT4Liq&#xA;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&#xA;V2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0D352559142068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0D352559142068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0D352559142068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T11:20:34+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -160.289 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 160.289 li
252.005 160.289 li
252.005 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 160.289 mo
252.005 160.289 li
252.005 0 li
0 0 li
0 160.289 li
clp
gsave
0 160.289 mo
252.005 160.289 li
252.005 0 li
0 0 li
0 160.289 li
clp
gsave
0 160.289 mo
252.005 160.289 li
252.005 0 li
0 0 li
0 160.289 li
clp
gsave
42.001 153.968 mo
192.003 153.968 li
192.003 144.324 li
42.001 144.324 li
42.001 153.968 li
clp
192.003 153.968 mo
42.001 153.968 li
42.001 144.325 li
192.003 144.325 li
192.003 153.968 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .591757 .631373 0 cmyk
f
grestore
gsave
192.011 156.432 mo
211.155 156.432 li
211.155 141.003 li
192.011 141.003 li
192.011 156.432 li
clp
192.011 156.432 mo
192.011 156.432 li
192.011 141.003 li
211.154 148.717 li
192.011 156.432 li
false sop
0 .591757 .631373 0 cmyk
f
grestore
grestore
42.4292 141.003 mo
42.4292 141.432 li
211.718 141.432 li
211.718 156.003 li
42.8578 156.003 li
42.8578 141.003 li
42.4292 141.003 li
42.4292 141.432 li
42.4292 141.003 li
42.0006 141.003 li
42.0006 156.432 li
42.0006 156.544 42.0463 156.655 42.1261 156.735 cv
42.206 156.814 42.3163 156.86 42.4292 156.86 cv
212.147 156.86 li
212.26 156.86 212.37 156.814 212.45 156.735 cv
212.53 156.655 212.576 156.544 212.576 156.432 cv
212.576 141.003 li
212.576 140.89 212.53 140.78 212.45 140.7 cv
212.37 140.62 212.26 140.574 212.147 140.574 cv
42.4292 140.574 li
42.3163 140.574 42.2059 140.62 42.1261 140.7 cv
42.0463 140.78 42.0006 140.89 42.0006 141.003 cv
42.4292 141.003 li
cp
false sop
.746 .676 .668 .898 cmyk
f
50.6626 146.324 mo
50.6626 152.52 li
51.5957 152.52 li
51.687 152.52 51.752 152.537 51.7915 152.572 cv
51.8506 152.713 li
51.7915 152.853 li
51.752 152.888 51.687 152.905 51.5957 152.905 cv
50.2759 152.905 li
50.2759 145.938 li
51.5957 145.938 li
51.687 145.938 51.752 145.956 51.7915 145.992 cv
51.8506 146.133 li
51.7915 146.27 li
51.752 146.307 51.687 146.324 51.5957 146.324 cv
50.6626 146.324 li
cp
0 0 0 1 cmyk
f
56.3198 145.861 mo
56.3198 151.331 li
57.6489 151.331 li
57.7402 151.331 57.8052 151.349 57.8447 151.384 cv
57.9038 151.524 li
57.8447 151.662 li
57.8052 151.699 57.7402 151.718 57.6489 151.718 cv
54.6035 151.718 li
54.5127 151.718 54.4473 151.699 54.4082 151.662 cv
54.3491 151.524 li
54.4082 151.384 li
54.4473 151.349 54.5127 151.331 54.6035 151.331 cv
55.9331 151.331 li
55.9331 146.398 li
54.6743 146.795 li
54.541 146.824 li
54.4141 146.766 li
54.3564 146.63 li
54.4028 146.5 li
54.5542 146.423 li
56.3198 145.861 li
cp
f
63.561 148.352 mo
63.561 149.308 li
63.561 150.139 63.3628 150.795 62.9658 151.279 cv
62.6577 151.66 62.2671 151.85 61.7954 151.85 cv
61.5684 151.85 61.3545 151.805 61.1538 151.714 cv
60.9526 151.623 60.7827 151.497 60.6431 151.335 cv
60.5542 151.233 60.4565 151.071 60.3501 150.848 cv
60.2437 150.624 60.1675 150.418 60.1216 150.232 cv
60.0508 149.969 60.0156 149.66 60.0156 149.308 cv
60.0156 148.352 li
60.0156 147.519 60.2134 146.86 60.6089 146.377 cv
60.9185 145.996 61.3096 145.806 61.7813 145.806 cv
62.0112 145.806 62.2261 145.852 62.4253 145.941 cv
62.6245 146.031 62.7939 146.158 62.9341 146.32 cv
63.0264 146.425 63.1245 146.589 63.229 146.813 cv
63.334 147.036 63.4106 147.24 63.4595 147.424 cv
63.5273 147.688 63.561 147.996 63.561 148.352 cv
cp
63.1743 148.402 mo
63.1743 148.038 63.1235 147.699 63.0215 147.384 cv
62.9194 147.068 62.8032 146.818 62.6733 146.631 cv
62.5967 146.525 62.4971 146.433 62.3745 146.354 cv
62.1997 146.246 62.0034 146.192 61.7861 146.192 cv
61.354 146.193 61.0151 146.415 60.769 146.857 cv
60.5229 147.299 60.4009 147.814 60.4023 148.402 cv
60.4023 149.254 li
60.4023 149.618 60.4536 149.958 60.5557 150.273 cv
60.6577 150.59 60.7749 150.841 60.9063 151.027 cv
60.9795 151.131 61.0781 151.222 61.2021 151.3 cv
61.377 151.408 61.5747 151.463 61.7954 151.463 cv
62.2251 151.465 62.5625 151.244 62.8071 150.801 cv
63.0518 150.357 63.1743 149.842 63.1743 149.254 cv
63.1743 148.402 li
cp
f
66.6724 150.322 mo
67.9263 150.322 li
66.5591 152.863 li
66.478 153.018 66.3799 153.094 66.2651 153.094 cv
66.0728 153.014 li
65.9937 152.818 li
66.0073 152.717 li
66.6724 150.322 li
cp
f
77.1099 151.331 mo
80.061 151.331 li
80.061 151.18 li
80.061 151.089 80.0791 151.023 80.1152 150.984 cv
80.2544 150.926 li
80.3926 150.984 li
80.4292 151.023 80.4478 151.089 80.4478 151.18 cv
80.4478 151.718 li
76.7236 151.718 li
76.7236 151.146 li
77.5083 150.436 78.2715 149.717 79.0132 148.989 cv
79.3594 148.648 79.5967 148.398 79.7256 148.239 cv
79.8545 148.08 79.9424 147.939 79.9897 147.818 cv
80.0376 147.697 80.061 147.575 80.061 147.453 cv
80.061 147.121 79.9282 146.828 79.6621 146.574 cv
79.396 146.319 79.0747 146.192 78.6982 146.192 cv
78.3618 146.192 78.0635 146.289 77.8032 146.482 cv
77.5435 146.676 77.375 146.916 77.2988 147.201 cv
77.229 147.344 li
77.0986 147.39 li
76.9653 147.337 li
76.9121 147.211 li
76.9121 147.064 76.9922 146.865 77.1528 146.613 cv
77.314 146.363 77.5356 146.166 77.8188 146.021 cv
78.1021 145.877 78.3921 145.806 78.689 145.806 cv
79.1699 145.806 79.583 145.973 79.9292 146.307 cv
80.2749 146.642 80.4478 147.021 80.4478 147.443 cv
80.4478 147.621 80.4189 147.784 80.3608 147.932 cv
80.3027 148.078 80.2046 148.24 80.0654 148.416 cv
79.9268 148.592 79.6772 148.858 79.3169 149.215 cv
78.4136 150.11 77.6777 150.806 77.1099 151.301 cv
77.1099 151.331 li
cp
f
86.1899 148.352 mo
86.1899 149.308 li
86.1899 150.139 85.9917 150.795 85.5952 151.279 cv
85.2866 151.66 84.8965 151.85 84.4243 151.85 cv
84.1973 151.85 83.9834 151.805 83.7827 151.714 cv
83.582 151.623 83.4116 151.497 83.272 151.335 cv
83.1831 151.233 83.0854 151.071 82.979 150.848 cv
82.8726 150.624 82.7964 150.418 82.7505 150.232 cv
82.6802 149.969 82.6445 149.66 82.6445 149.308 cv
82.6445 148.352 li
82.6445 147.519 82.8423 146.86 83.2378 146.377 cv
83.5474 145.996 83.9385 145.806 84.4106 145.806 cv
84.6401 145.806 84.855 145.852 85.0542 145.941 cv
85.2534 146.031 85.4233 146.158 85.563 146.32 cv
85.6553 146.425 85.7534 146.589 85.8579 146.813 cv
85.9629 147.036 86.0396 147.24 86.0889 147.424 cv
86.1563 147.688 86.1899 147.996 86.1899 148.352 cv
cp
85.8032 148.402 mo
85.8032 148.038 85.7524 147.699 85.6504 147.384 cv
85.5483 147.068 85.4321 146.818 85.3022 146.631 cv
85.2256 146.525 85.126 146.433 85.0034 146.354 cv
84.8286 146.246 84.6328 146.192 84.415 146.192 cv
83.9829 146.193 83.644 146.415 83.3979 146.857 cv
83.1523 147.299 83.0298 147.814 83.0313 148.402 cv
83.0313 149.254 li
83.0313 149.618 83.0825 149.958 83.1846 150.273 cv
83.2871 150.59 83.4038 150.841 83.5352 151.027 cv
83.6084 151.131 83.707 151.222 83.8311 151.3 cv
84.0059 151.408 84.2036 151.463 84.4243 151.463 cv
84.854 151.465 85.1914 151.244 85.436 150.801 cv
85.6812 150.357 85.8032 149.842 85.8032 149.254 cv
85.8032 148.402 li
cp
f
89.3013 150.322 mo
90.5557 150.322 li
89.1885 152.863 li
89.1069 153.018 89.0088 153.094 88.894 153.094 cv
88.7017 153.014 li
88.6226 152.818 li
88.6362 152.717 li
89.3013 150.322 li
cp
f
102.18 148.582 mo
102.537 148.739 102.808 148.957 102.995 149.232 cv
103.182 149.51 103.275 149.798 103.275 150.098 cv
103.275 150.559 103.087 150.967 102.711 151.32 cv
102.335 151.673 101.866 151.85 101.301 151.85 cv
100.97 151.85 100.626 151.779 100.271 151.639 cv
99.9146 151.498 99.6665 151.354 99.5249 151.208 cv
99.4561 151.053 li
99.5083 150.924 li
99.6338 150.869 li
99.7988 150.938 li
100.274 151.287 100.778 151.463 101.309 151.463 cv
101.757 151.463 102.132 151.323 102.435 151.044 cv
102.737 150.765 102.888 150.453 102.888 150.111 cv
102.888 149.883 102.814 149.658 102.665 149.438 cv
102.517 149.219 102.303 149.045 102.024 148.918 cv
101.745 148.792 101.462 148.729 101.176 148.729 cv
101.084 148.729 101.018 148.711 100.978 148.676 cv
100.917 148.533 li
100.975 148.394 li
101.148 148.338 li
101.481 148.342 li
101.829 148.342 102.116 148.236 102.341 148.024 cv
102.568 147.813 102.681 147.567 102.681 147.288 cv
102.681 147 102.563 146.744 102.326 146.523 cv
102.089 146.303 101.78 146.192 101.398 146.192 cv
101.131 146.192 100.885 146.238 100.66 146.33 cv
100.436 146.423 100.256 146.549 100.121 146.709 cv
100.008 146.822 li
99.9185 146.843 li
99.7847 146.79 li
99.7295 146.663 li
99.7295 146.54 99.8633 146.385 100.13 146.197 cv
100.506 145.937 100.928 145.806 101.396 145.806 cv
101.884 145.806 102.285 145.952 102.598 146.246 cv
102.911 146.539 103.067 146.889 103.067 147.294 cv
103.067 147.552 102.993 147.797 102.843 148.026 cv
102.693 148.257 102.472 148.441 102.18 148.582 cv
cp
f
108.819 148.352 mo
108.819 149.308 li
108.819 150.139 108.621 150.795 108.224 151.279 cv
107.916 151.66 107.525 151.85 107.053 151.85 cv
106.827 151.85 106.613 151.805 106.412 151.714 cv
106.211 151.623 106.041 151.497 105.901 151.335 cv
105.813 151.233 105.715 151.071 105.608 150.848 cv
105.501 150.624 105.425 150.418 105.379 150.232 cv
105.309 149.969 105.274 149.66 105.274 149.308 cv
105.274 148.352 li
105.274 147.519 105.472 146.86 105.867 146.377 cv
106.177 145.996 106.567 145.806 107.04 145.806 cv
107.27 145.806 107.484 145.852 107.683 145.941 cv
107.882 146.031 108.052 146.158 108.192 146.32 cv
108.284 146.425 108.383 146.589 108.487 146.813 cv
108.592 147.036 108.669 147.24 108.718 147.424 cv
108.785 147.688 108.819 147.996 108.819 148.352 cv
cp
108.432 148.402 mo
108.432 148.038 108.381 147.699 108.279 147.384 cv
108.177 147.068 108.062 146.818 107.931 146.631 cv
107.855 146.525 107.755 146.433 107.632 146.354 cv
107.458 146.246 107.262 146.192 107.044 146.192 cv
106.612 146.193 106.273 146.415 106.027 146.857 cv
105.781 147.299 105.659 147.814 105.66 148.402 cv
105.66 149.254 li
105.66 149.618 105.711 149.958 105.813 150.273 cv
105.916 150.59 106.033 150.841 106.164 151.027 cv
106.238 151.131 106.336 151.222 106.46 151.3 cv
106.635 151.408 106.833 151.463 107.053 151.463 cv
107.483 151.465 107.82 151.244 108.065 150.801 cv
108.31 150.357 108.432 149.842 108.432 149.254 cv
108.432 148.402 li
cp
f
111.931 150.322 mo
113.185 150.322 li
111.817 152.863 li
111.736 153.018 111.638 153.094 111.523 153.094 cv
111.331 153.014 li
111.251 152.818 li
111.265 152.717 li
111.931 150.322 li
cp
f
124.744 150.105 mo
122.18 150.105 li
122.175 149.658 li
124.329 145.938 li
125.131 145.938 li
125.131 149.719 li
125.453 149.719 li
125.548 149.719 125.616 149.736 125.655 149.771 cv
125.715 149.912 li
125.655 150.05 li
125.616 150.087 125.548 150.105 125.453 150.105 cv
125.131 150.105 li
125.131 151.331 li
125.451 151.331 li
125.547 151.331 125.615 151.349 125.655 151.384 cv
125.715 151.524 li
125.655 151.662 li
125.615 151.699 125.547 151.718 125.451 151.718 cv
124.018 151.718 li
123.922 151.718 123.854 151.699 123.814 151.662 cv
123.754 151.524 li
123.814 151.384 li
123.854 151.349 123.922 151.331 124.018 151.331 cv
124.744 151.331 li
124.744 150.105 li
cp
124.744 149.719 mo
124.744 146.324 li
124.551 146.324 li
122.585 149.719 li
124.744 149.719 li
cp
f
131.448 148.352 mo
131.448 149.308 li
131.448 150.139 131.25 150.795 130.853 151.279 cv
130.544 151.66 130.154 151.85 129.682 151.85 cv
129.456 151.85 129.242 151.805 129.041 151.714 cv
128.84 151.623 128.67 151.497 128.53 151.335 cv
128.441 151.233 128.344 151.071 128.237 150.848 cv
128.131 150.624 128.055 150.418 128.008 150.232 cv
127.938 149.969 127.903 149.66 127.903 149.308 cv
127.903 148.352 li
127.903 147.519 128.101 146.86 128.496 146.377 cv
128.806 145.996 129.196 145.806 129.668 145.806 cv
129.898 145.806 130.113 145.852 130.312 145.941 cv
130.512 146.031 130.681 146.158 130.821 146.32 cv
130.914 146.425 131.012 146.589 131.116 146.813 cv
131.221 147.036 131.298 147.24 131.347 147.424 cv
131.414 147.688 131.448 147.996 131.448 148.352 cv
cp
131.062 148.402 mo
131.062 148.038 131.01 147.699 130.908 147.384 cv
130.806 147.068 130.69 146.818 130.561 146.631 cv
130.484 146.525 130.384 146.433 130.262 146.354 cv
130.087 146.246 129.891 146.192 129.673 146.192 cv
129.241 146.193 128.902 146.415 128.656 146.857 cv
128.41 147.299 128.288 147.814 128.29 148.402 cv
128.29 149.254 li
128.29 149.618 128.34 149.958 128.443 150.273 cv
128.545 150.59 128.662 150.841 128.793 151.027 cv
128.867 151.131 128.965 151.222 129.089 151.3 cv
129.264 151.408 129.461 151.463 129.682 151.463 cv
130.112 151.465 130.449 151.244 130.694 150.801 cv
130.939 150.357 131.062 149.842 131.062 149.254 cv
131.062 148.402 li
cp
f
134.559 150.322 mo
135.814 150.322 li
134.447 152.863 li
134.365 153.018 134.267 153.094 134.152 153.094 cv
133.959 153.014 li
133.88 152.818 li
133.895 152.717 li
134.559 150.322 li
cp
f
145.573 146.324 mo
145.573 148.229 li
145.799 148.131 146.018 148.059 146.227 148.01 cv
146.436 147.961 146.634 147.937 146.822 147.937 cv
147.308 147.937 147.714 148.107 148.042 148.447 cv
148.37 148.787 148.533 149.234 148.533 149.789 cv
148.533 150.402 148.348 150.899 147.98 151.279 cv
147.612 151.66 147.151 151.85 146.598 151.85 cv
146.233 151.85 145.881 151.768 145.543 151.605 cv
145.304 151.49 145.085 151.35 144.889 151.18 cv
144.773 151.078 144.714 150.994 144.714 150.926 cv
144.769 150.785 li
144.897 150.728 li
145.063 150.811 li
145.526 151.246 146.032 151.463 146.58 151.463 cv
147.033 151.463 147.407 151.309 147.703 151.001 cv
147.999 150.693 148.146 150.283 148.146 149.771 cv
148.146 149.333 148.018 148.982 147.762 148.719 cv
147.507 148.455 147.182 148.323 146.788 148.323 cv
146.384 148.323 145.98 148.43 145.577 148.645 cv
145.479 148.694 145.41 148.719 145.37 148.719 cv
145.236 148.664 li
145.186 148.507 li
145.186 145.938 li
147.879 145.938 li
147.971 145.938 148.038 145.956 148.077 145.992 cv
148.137 146.133 li
148.077 146.27 li
148.038 146.307 147.971 146.324 147.879 146.324 cv
145.573 146.324 li
cp
f
154.077 148.352 mo
154.077 149.308 li
154.078 150.139 153.879 150.795 153.482 151.279 cv
153.173 151.66 152.784 151.85 152.311 151.85 cv
152.084 151.85 151.871 151.805 151.669 151.714 cv
151.469 151.623 151.299 151.497 151.16 151.335 cv
151.071 151.233 150.973 151.071 150.866 150.848 cv
150.76 150.624 150.683 150.418 150.637 150.232 cv
150.567 149.969 150.532 149.66 150.532 149.308 cv
150.532 148.352 li
150.532 147.519 150.729 146.86 151.125 146.377 cv
151.435 145.996 151.826 145.806 152.297 145.806 cv
152.528 145.806 152.742 145.852 152.941 145.941 cv
153.14 146.031 153.31 146.158 153.451 146.32 cv
153.542 146.425 153.641 146.589 153.746 146.813 cv
153.85 147.036 153.927 147.24 153.976 147.424 cv
154.043 147.688 154.077 147.996 154.077 148.352 cv
cp
153.69 148.402 mo
153.69 148.038 153.639 147.699 153.538 147.384 cv
153.435 147.068 153.32 146.818 153.189 146.631 cv
153.113 146.525 153.013 146.433 152.891 146.354 cv
152.716 146.246 152.52 146.192 152.302 146.192 cv
151.87 146.193 151.531 146.415 151.285 146.857 cv
151.04 147.299 150.917 147.814 150.918 148.402 cv
150.918 149.254 li
150.918 149.618 150.969 149.958 151.072 150.273 cv
151.174 150.59 151.291 150.841 151.422 151.027 cv
151.496 151.131 151.594 151.222 151.718 151.3 cv
151.893 151.408 152.09 151.463 152.311 151.463 cv
152.741 151.465 153.079 151.244 153.323 150.801 cv
153.568 150.357 153.69 149.842 153.69 149.254 cv
153.69 148.402 li
cp
f
157.189 150.322 mo
158.443 150.322 li
157.076 152.863 li
156.994 153.018 156.896 153.094 156.781 153.094 cv
156.588 153.014 li
156.509 152.818 li
156.523 152.717 li
157.189 150.322 li
cp
f
168.125 149.279 mo
168.365 148.924 168.611 148.661 168.865 148.492 cv
169.118 148.322 169.4 148.238 169.709 148.238 cv
170.121 148.238 170.486 148.409 170.805 148.75 cv
171.125 149.092 171.285 149.514 171.285 150.017 cv
171.285 150.476 171.138 150.896 170.847 151.277 cv
170.555 151.658 170.153 151.85 169.64 151.85 cv
169.306 151.85 168.994 151.747 168.704 151.541 cv
168.414 151.336 168.185 151.021 168.019 150.595 cv
167.811 150.064 167.708 149.479 167.711 148.834 cv
167.711 148.351 167.808 147.9 168.001 147.483 cv
168.148 147.162 168.345 146.879 168.59 146.635 cv
168.836 146.392 169.123 146.192 169.449 146.038 cv
169.776 145.883 170.129 145.806 170.51 145.806 cv
170.768 145.806 170.983 145.857 171.155 145.962 cv
171.266 146.146 li
171.215 146.281 li
171.086 146.334 li
170.943 146.287 li
170.818 146.224 170.661 146.192 170.473 146.192 cv
169.875 146.192 169.33 146.449 168.836 146.962 cv
168.344 147.475 168.098 148.087 168.098 148.797 cv
168.098 148.9 168.107 149.063 168.125 149.279 cv
cp
168.214 149.91 mo
168.33 150.468 168.513 150.866 168.763 151.105 cv
169.013 151.345 169.309 151.464 169.65 151.463 cv
169.994 151.463 170.289 151.329 170.534 151.061 cv
170.78 150.793 170.901 150.445 170.898 150.017 cv
170.901 149.612 170.779 149.279 170.532 149.018 cv
170.285 148.756 170.005 148.625 169.696 148.625 cv
169.398 148.625 169.111 148.752 168.834 149.006 cv
168.651 149.174 168.444 149.477 168.214 149.91 cv
cp
f
176.706 148.352 mo
176.706 149.308 li
176.707 150.139 176.508 150.795 176.111 151.279 cv
175.802 151.66 175.413 151.85 174.94 151.85 cv
174.713 151.85 174.5 151.805 174.298 151.714 cv
174.098 151.623 173.928 151.497 173.789 151.335 cv
173.7 151.233 173.602 151.071 173.496 150.848 cv
173.389 150.624 173.313 150.418 173.266 150.232 cv
173.196 149.969 173.161 149.66 173.161 149.308 cv
173.161 148.352 li
173.161 147.519 173.359 146.86 173.754 146.377 cv
174.064 145.996 174.455 145.806 174.926 145.806 cv
175.157 145.806 175.371 145.852 175.571 145.941 cv
175.77 146.031 175.939 146.158 176.08 146.32 cv
176.171 146.425 176.27 146.589 176.375 146.813 cv
176.479 147.036 176.556 147.24 176.605 147.424 cv
176.672 147.688 176.706 147.996 176.706 148.352 cv
cp
176.32 148.402 mo
176.32 148.038 176.268 147.699 176.167 147.384 cv
176.065 147.068 175.949 146.818 175.819 146.631 cv
175.742 146.525 175.642 146.433 175.52 146.354 cv
175.345 146.246 175.149 146.192 174.931 146.192 cv
174.499 146.193 174.16 146.415 173.915 146.857 cv
173.668 147.299 173.546 147.814 173.547 148.402 cv
173.547 149.254 li
173.547 149.618 173.598 149.958 173.701 150.273 cv
173.803 150.59 173.919 150.841 174.051 151.027 cv
174.125 151.131 174.223 151.222 174.347 151.3 cv
174.522 151.408 174.719 151.463 174.94 151.463 cv
175.37 151.465 175.708 151.244 175.953 150.801 cv
176.197 150.357 176.32 149.842 176.32 149.254 cv
176.32 148.402 li
cp
f
179.818 150.322 mo
181.072 150.322 li
179.705 152.863 li
179.623 153.018 179.525 153.094 179.411 153.094 cv
179.217 153.014 li
179.139 152.818 li
179.153 152.717 li
179.818 150.322 li
cp
f
193.207 146.499 mo
193.207 146.324 li
190.434 146.324 li
190.434 146.664 li
190.434 146.755 190.417 146.82 190.381 146.859 cv
190.241 146.918 li
190.103 146.859 li
190.066 146.82 190.047 146.755 190.047 146.664 cv
190.047 145.938 li
193.593 145.938 li
193.595 146.551 li
192.04 151.528 li
191.953 151.68 li
191.838 151.718 li
191.701 151.662 li
191.646 151.533 li
191.673 151.404 li
193.207 146.499 li
cp
f
199.335 148.352 mo
199.335 149.308 li
199.335 150.139 199.137 150.795 198.74 151.279 cv
198.432 151.66 198.042 151.85 197.57 151.85 cv
197.342 151.85 197.128 151.805 196.928 151.714 cv
196.727 151.623 196.557 151.497 196.417 151.335 cv
196.329 151.233 196.231 151.071 196.125 150.848 cv
196.018 150.624 195.942 150.418 195.896 150.232 cv
195.825 149.969 195.79 149.66 195.79 149.308 cv
195.79 148.352 li
195.79 147.519 195.988 146.86 196.383 146.377 cv
196.693 145.996 197.083 145.806 197.555 145.806 cv
197.786 145.806 198 145.852 198.2 145.941 cv
198.399 146.031 198.568 146.158 198.708 146.32 cv
198.8 146.425 198.899 146.589 199.003 146.813 cv
199.108 147.036 199.185 147.24 199.234 147.424 cv
199.301 147.688 199.335 147.996 199.335 148.352 cv
cp
198.949 148.402 mo
198.949 148.038 198.897 147.699 198.795 147.384 cv
198.694 147.068 198.578 146.818 198.448 146.631 cv
198.371 146.525 198.271 146.433 198.149 146.354 cv
197.974 146.246 197.778 146.192 197.56 146.192 cv
197.128 146.193 196.79 146.415 196.543 146.857 cv
196.297 147.299 196.175 147.814 196.176 148.402 cv
196.176 149.254 li
196.176 149.618 196.227 149.958 196.33 150.273 cv
196.432 150.59 196.549 150.841 196.68 151.027 cv
196.753 151.131 196.852 151.222 196.976 151.3 cv
197.151 151.408 197.349 151.463 197.57 151.463 cv
198 151.465 198.336 151.244 198.582 150.801 cv
198.826 150.357 198.949 149.842 198.949 149.254 cv
198.949 148.402 li
cp
f
203.041 152.52 mo
203.041 146.324 li
202.107 146.324 li
202.016 146.324 201.951 146.307 201.912 146.27 cv
201.852 146.133 li
201.912 145.992 li
201.951 145.956 202.016 145.938 202.107 145.938 cv
203.427 145.938 li
203.427 152.905 li
202.107 152.905 li
202.016 152.905 201.951 152.888 201.912 152.853 cv
201.852 152.713 li
201.912 152.574 li
201.951 152.537 202.016 152.52 202.107 152.52 cv
203.041 152.52 li
cp
f
gsave
0 160.289 mo
252.005 160.289 li
252.005 0 li
0 0 li
0 160.289 li
clp
gsave
11.143 107.681 mo
70.2871 107.681 li
70.2871 98.0381 li
11.143 98.0381 li
11.143 107.681 li
clp
69.9658 107.681 mo
11.143 107.681 li
11.143 98.0379 li
69.9658 98.0381 li
69.9658 107.681 li
0 .591757 .631373 0 cmyk
f
grestore
gsave
69.9658 110.146 mo
88.2876 110.146 li
88.2876 94.7163 li
69.9658 94.7163 li
69.9658 110.146 li
clp
69.9658 110.146 mo
69.9658 110.146 li
69.9658 107.681 li
70.2871 107.681 li
70.2871 98.0381 li
69.9658 98.0381 li
69.9658 94.7163 li
88.2876 102.431 li
69.9658 110.146 li
0 .591757 .631373 0 cmyk
f
70.2871 107.681 mo
69.9658 107.681 li
69.9658 98.0381 li
70.2871 98.0381 li
70.2871 107.681 li
0 .808612 .862745 0 cmyk
f
grestore
gsave
150.002 107.681 mo
232.291 107.681 li
232.291 98.0381 li
150.002 98.0381 li
150.002 107.681 li
clp
231.969 107.681 mo
150.002 107.681 li
150.002 98.0379 li
231.969 98.0381 li
231.969 107.681 li
0 .591757 .631373 0 cmyk
f
grestore
gsave
231.969 110.146 mo
250.29 110.146 li
250.29 94.7163 li
231.969 94.7163 li
231.969 110.146 li
clp
231.969 110.146 mo
231.969 110.146 li
231.969 107.681 li
232.291 107.681 li
232.291 98.0381 li
231.969 98.0381 li
231.969 94.7163 li
250.29 102.431 li
231.969 110.146 li
0 .591757 .631373 0 cmyk
f
232.291 107.681 mo
231.969 107.681 li
231.969 98.0381 li
232.291 98.0381 li
232.291 107.681 li
0 .808612 .862745 0 cmyk
f
grestore
grestore
150.431 94.7163 mo
150.431 95.1449 li
250.291 95.1449 li
250.291 109.717 li
150.86 109.717 li
150.86 94.7163 li
150.431 94.7163 li
150.431 95.1449 li
150.431 94.7163 li
150.003 94.7163 li
150.003 110.146 li
150.003 110.258 150.048 110.369 150.128 110.449 cv
150.208 110.528 150.318 110.574 150.431 110.574 cv
250.719 110.574 li
250.832 110.574 250.942 110.528 251.022 110.449 cv
251.102 110.369 251.148 110.258 251.148 110.146 cv
251.148 94.7163 li
251.148 94.6034 251.102 94.4931 251.022 94.4133 cv
250.942 94.3335 250.832 94.2877 250.719 94.2877 cv
150.431 94.2877 li
150.318 94.2877 150.208 94.3335 150.128 94.4133 cv
150.048 94.4931 150.003 94.6034 150.003 94.7163 cv
150.431 94.7163 li
cp
.746 .676 .668 .898 cmyk
f
157.899 100.038 mo
157.899 106.232 li
158.833 106.232 li
158.923 106.232 158.988 106.25 159.028 106.285 cv
159.086 106.426 li
159.028 106.566 li
158.988 106.601 158.923 106.619 158.833 106.619 cv
157.512 106.619 li
157.512 99.6509 li
158.833 99.6509 li
158.923 99.6509 158.988 99.6694 159.028 99.7056 cv
159.086 99.8467 li
159.028 99.9834 li
158.988 100.02 158.923 100.038 158.833 100.038 cv
157.899 100.038 li
cp
0 0 0 1 cmyk
f
163.556 99.5742 mo
163.556 105.044 li
164.885 105.044 li
164.976 105.044 165.042 105.062 165.081 105.097 cv
165.14 105.238 li
165.081 105.375 li
165.042 105.413 164.976 105.431 164.885 105.431 cv
161.839 105.431 li
161.749 105.431 161.684 105.413 161.644 105.375 cv
161.585 105.238 li
161.644 105.097 li
161.684 105.062 161.749 105.044 161.839 105.044 cv
163.169 105.044 li
163.169 100.112 li
161.911 100.508 li
161.777 100.537 li
161.65 100.479 li
161.592 100.343 li
161.639 100.214 li
161.791 100.136 li
163.556 99.5742 li
cp
f
170.797 102.065 mo
170.797 103.021 li
170.797 103.852 170.599 104.509 170.203 104.993 cv
169.894 105.373 169.503 105.563 169.032 105.563 cv
168.804 105.563 168.59 105.518 168.39 105.427 cv
168.189 105.337 168.019 105.21 167.879 105.048 cv
167.791 104.947 167.693 104.785 167.586 104.561 cv
167.48 104.337 167.404 104.132 167.358 103.945 cv
167.288 103.682 167.251 103.374 167.251 103.021 cv
167.251 102.065 li
167.251 101.232 167.45 100.574 167.845 100.091 cv
168.155 99.71 168.545 99.519 169.018 99.519 cv
169.248 99.519 169.462 99.5645 169.662 99.6548 cv
169.861 99.7451 170.031 99.8716 170.17 100.034 cv
170.262 100.138 170.361 100.302 170.465 100.526 cv
170.57 100.75 170.647 100.953 170.696 101.137 cv
170.763 101.4 170.797 101.71 170.797 102.065 cv
cp
170.411 102.116 mo
170.411 101.752 170.36 101.412 170.257 101.097 cv
170.156 100.782 170.04 100.531 169.91 100.344 cv
169.833 100.238 169.733 100.146 169.611 100.067 cv
169.436 99.9595 169.24 99.9058 169.022 99.9058 cv
168.59 99.9067 168.251 100.128 168.005 100.57 cv
167.759 101.013 167.637 101.528 167.638 102.116 cv
167.638 102.967 li
167.638 103.331 167.69 103.671 167.792 103.987 cv
167.894 104.303 168.011 104.554 168.142 104.741 cv
168.215 104.844 168.314 104.935 168.438 105.013 cv
168.613 105.122 168.811 105.176 169.032 105.176 cv
169.461 105.178 169.798 104.957 170.043 104.514 cv
170.289 104.071 170.411 103.556 170.411 102.967 cv
170.411 102.116 li
cp
f
173.909 104.035 mo
175.163 104.035 li
173.795 106.577 li
173.714 106.73 173.616 106.808 173.501 106.808 cv
173.309 106.727 li
173.23 106.531 li
173.244 106.43 li
173.909 104.035 li
cp
f
184.346 105.044 mo
187.297 105.044 li
187.297 104.894 li
187.297 104.803 187.315 104.737 187.351 104.698 cv
187.491 104.639 li
187.628 104.698 li
187.666 104.737 187.684 104.803 187.684 104.894 cv
187.684 105.431 li
183.959 105.431 li
183.959 104.859 li
184.745 104.149 185.507 103.431 186.25 102.703 cv
186.595 102.362 186.833 102.112 186.961 101.953 cv
187.09 101.793 187.178 101.653 187.226 101.532 cv
187.274 101.411 187.297 101.289 187.297 101.166 cv
187.297 100.835 187.165 100.542 186.898 100.288 cv
186.632 100.033 186.311 99.9058 185.934 99.9058 cv
185.598 99.9058 185.299 100.002 185.04 100.196 cv
184.78 100.389 184.612 100.629 184.535 100.914 cv
184.465 101.057 li
184.334 101.103 li
184.202 101.05 li
184.148 100.924 li
184.148 100.777 184.229 100.578 184.389 100.327 cv
184.55 100.076 184.772 99.8789 185.055 99.7349 cv
185.338 99.5908 185.628 99.519 185.925 99.519 cv
186.406 99.519 186.819 99.686 187.166 100.021 cv
187.511 100.355 187.684 100.733 187.684 101.157 cv
187.684 101.335 187.655 101.497 187.597 101.645 cv
187.539 101.792 187.441 101.954 187.301 102.13 cv
187.163 102.306 186.914 102.572 186.553 102.928 cv
185.65 103.824 184.914 104.519 184.346 105.014 cv
184.346 105.044 li
cp
f
193.426 102.065 mo
193.426 103.021 li
193.426 103.852 193.228 104.509 192.832 104.993 cv
192.523 105.373 192.132 105.563 191.661 105.563 cv
191.434 105.563 191.219 105.518 191.019 105.427 cv
190.818 105.337 190.648 105.21 190.508 105.048 cv
190.419 104.947 190.322 104.785 190.215 104.561 cv
190.109 104.337 190.033 104.132 189.987 103.945 cv
189.917 103.682 189.881 103.374 189.881 103.021 cv
189.881 102.065 li
189.881 101.232 190.079 100.574 190.474 100.091 cv
190.784 99.71 191.174 99.519 191.647 99.519 cv
191.876 99.519 192.091 99.5645 192.291 99.6548 cv
192.49 99.7451 192.66 99.8716 192.799 100.034 cv
192.891 100.138 192.99 100.302 193.094 100.526 cv
193.199 100.75 193.276 100.953 193.325 101.137 cv
193.392 101.4 193.426 101.71 193.426 102.065 cv
cp
193.04 102.116 mo
193.04 101.752 192.989 101.412 192.886 101.097 cv
192.785 100.782 192.668 100.531 192.539 100.344 cv
192.461 100.238 192.362 100.146 192.24 100.067 cv
192.065 99.9595 191.869 99.9058 191.651 99.9058 cv
191.219 99.9067 190.88 100.128 190.634 100.57 cv
190.388 101.013 190.266 101.528 190.267 102.116 cv
190.267 102.967 li
190.267 103.331 190.319 103.671 190.42 103.987 cv
190.523 104.303 190.64 104.554 190.771 104.741 cv
190.844 104.844 190.944 104.935 191.067 105.013 cv
191.242 105.122 191.44 105.176 191.661 105.176 cv
192.09 105.178 192.427 104.957 192.672 104.514 cv
192.917 104.071 193.04 103.556 193.04 102.967 cv
193.04 102.116 li
cp
f
196.538 104.035 mo
197.792 104.035 li
196.424 106.577 li
196.343 106.73 196.245 106.808 196.13 106.808 cv
195.938 106.727 li
195.859 106.531 li
195.873 106.43 li
196.538 104.035 li
cp
f
209.351 103.818 mo
206.787 103.818 li
206.782 103.372 li
208.936 99.6509 li
209.738 99.6509 li
209.738 103.432 li
210.06 103.432 li
210.156 103.432 210.223 103.45 210.262 103.485 cv
210.323 103.625 li
210.262 103.763 li
210.223 103.8 210.156 103.818 210.06 103.818 cv
209.738 103.818 li
209.738 105.044 li
210.058 105.044 li
210.154 105.044 210.222 105.062 210.262 105.097 cv
210.323 105.238 li
210.262 105.375 li
210.222 105.413 210.154 105.431 210.058 105.431 cv
208.625 105.431 li
208.53 105.431 208.461 105.413 208.421 105.375 cv
208.361 105.238 li
208.421 105.097 li
208.461 105.062 208.53 105.044 208.625 105.044 cv
209.351 105.044 li
209.351 103.818 li
cp
209.351 103.432 mo
209.351 100.038 li
209.158 100.038 li
207.192 103.432 li
209.351 103.432 li
cp
f
216.055 102.065 mo
216.055 103.021 li
216.055 103.852 215.857 104.509 215.46 104.993 cv
215.152 105.373 214.761 105.563 214.29 105.563 cv
214.063 105.563 213.849 105.518 213.648 105.427 cv
213.447 105.337 213.277 105.21 213.137 105.048 cv
213.048 104.947 212.951 104.785 212.844 104.561 cv
212.738 104.337 212.662 104.132 212.616 103.945 cv
212.545 103.682 212.51 103.374 212.51 103.021 cv
212.51 102.065 li
212.51 101.232 212.708 100.574 213.103 100.091 cv
213.413 99.71 213.803 99.519 214.276 99.519 cv
214.505 99.519 214.72 99.5645 214.919 99.6548 cv
215.119 99.7451 215.289 99.8716 215.428 100.034 cv
215.52 100.138 215.619 100.302 215.723 100.526 cv
215.828 100.75 215.905 100.953 215.954 101.137 cv
216.021 101.4 216.055 101.71 216.055 102.065 cv
cp
215.668 102.116 mo
215.668 101.752 215.618 101.412 215.515 101.097 cv
215.414 100.782 215.297 100.531 215.167 100.344 cv
215.091 100.238 214.992 100.146 214.869 100.067 cv
214.694 99.9595 214.498 99.9058 214.28 99.9058 cv
213.848 99.9067 213.509 100.128 213.263 100.57 cv
213.017 101.013 212.895 101.528 212.897 102.116 cv
212.897 102.967 li
212.897 103.331 212.948 103.671 213.05 103.987 cv
213.152 104.303 213.269 104.554 213.401 104.741 cv
213.474 104.844 213.573 104.935 213.697 105.013 cv
213.872 105.122 214.069 105.176 214.29 105.176 cv
214.719 105.178 215.056 104.957 215.301 104.514 cv
215.546 104.071 215.668 103.556 215.668 102.967 cv
215.668 102.116 li
cp
f
219.167 104.035 mo
220.42 104.035 li
219.053 106.577 li
218.972 106.73 218.874 106.808 218.759 106.808 cv
218.567 106.727 li
218.488 106.531 li
218.501 106.43 li
219.167 104.035 li
cp
f
232.555 100.212 mo
232.555 100.038 li
229.784 100.038 li
229.784 100.377 li
229.784 100.468 229.766 100.533 229.731 100.573 cv
229.59 100.632 li
229.452 100.573 li
229.416 100.533 229.397 100.468 229.397 100.377 cv
229.397 99.6509 li
232.942 99.6509 li
232.944 100.264 li
231.388 105.241 li
231.301 105.394 li
231.187 105.431 li
231.049 105.375 li
230.995 105.247 li
231.022 105.118 li
232.555 100.212 li
cp
f
238.684 102.065 mo
238.684 103.021 li
238.684 103.852 238.486 104.509 238.089 104.993 cv
237.781 105.373 237.39 105.563 236.918 105.563 cv
236.692 105.563 236.478 105.518 236.277 105.427 cv
236.077 105.337 235.906 105.21 235.766 105.048 cv
235.677 104.947 235.58 104.785 235.473 104.561 cv
235.367 104.337 235.291 104.132 235.245 103.945 cv
235.174 103.682 235.139 103.374 235.139 103.021 cv
235.139 102.065 li
235.139 101.232 235.336 100.574 235.732 100.091 cv
236.042 99.71 236.432 99.519 236.905 99.519 cv
237.134 99.519 237.349 99.5645 237.548 99.6548 cv
237.748 99.7451 237.917 99.8716 238.057 100.034 cv
238.15 100.138 238.248 100.302 238.352 100.526 cv
238.458 100.75 238.534 100.953 238.583 101.137 cv
238.651 101.4 238.684 101.71 238.684 102.065 cv
cp
238.297 102.116 mo
238.297 101.752 238.247 101.412 238.145 101.097 cv
238.042 100.782 237.926 100.531 237.796 100.344 cv
237.72 100.238 237.621 100.146 237.498 100.067 cv
237.323 99.9595 237.126 99.9058 236.91 99.9058 cv
236.477 99.9067 236.138 100.128 235.892 100.57 cv
235.646 101.013 235.524 101.528 235.526 102.116 cv
235.526 102.967 li
235.526 103.331 235.577 103.671 235.679 103.987 cv
235.781 104.303 235.898 104.554 236.03 104.741 cv
236.103 104.844 236.202 104.935 236.326 105.013 cv
236.5 105.122 236.698 105.176 236.918 105.176 cv
237.348 105.178 237.686 104.957 237.93 104.514 cv
238.175 104.071 238.297 103.556 238.297 102.967 cv
238.297 102.116 li
cp
f
242.39 106.232 mo
242.39 100.038 li
241.457 100.038 li
241.366 100.038 241.3 100.02 241.26 99.9834 cv
241.202 99.8467 li
241.26 99.7056 li
241.3 99.6694 241.366 99.6509 241.457 99.6509 cv
242.776 99.6509 li
242.776 106.619 li
241.457 106.619 li
241.366 106.619 241.3 106.601 241.26 106.566 cv
241.202 106.426 li
241.26 106.288 li
241.3 106.251 241.366 106.232 241.457 106.232 cv
242.39 106.232 li
cp
f
11.5718 94.7163 mo
11.5718 95.1449 li
88.2872 95.1449 li
88.2872 109.717 li
12.0004 109.717 li
12.0004 94.7163 li
11.5718 94.7163 li
11.5718 95.1449 li
11.5718 94.7163 li
11.1432 94.7163 li
11.1432 110.146 li
11.1432 110.258 11.1889 110.369 11.2687 110.449 cv
11.3485 110.528 11.4589 110.574 11.5718 110.574 cv
88.7158 110.574 li
88.8287 110.574 88.9391 110.528 89.0189 110.449 cv
89.0987 110.369 89.1444 110.258 89.1444 110.146 cv
89.1444 94.7163 li
89.1444 94.6034 89.0987 94.4931 89.0189 94.4133 cv
88.9391 94.3335 88.8287 94.2877 88.7158 94.2877 cv
11.5718 94.2877 li
11.4589 94.2877 11.3485 94.3335 11.2687 94.4133 cv
11.1889 94.4931 11.1432 94.6034 11.1432 94.7163 cv
11.5718 94.7163 li
cp
.746 .676 .668 .898 cmyk
f
18.7832 100.038 mo
18.7832 106.232 li
19.7168 106.232 li
19.8076 106.232 19.873 106.25 19.9126 106.285 cv
19.9712 106.426 li
19.9126 106.566 li
19.873 106.601 19.8076 106.619 19.7168 106.619 cv
18.397 106.619 li
18.397 99.6509 li
19.7168 99.6509 li
19.8076 99.6509 19.873 99.6694 19.9126 99.7056 cv
19.9712 99.8467 li
19.9126 99.9834 li
19.873 100.02 19.8076 100.038 19.7168 100.038 cv
18.7832 100.038 li
cp
0 0 0 1 cmyk
f
25.0435 102.295 mo
25.3994 102.453 25.6714 102.67 25.8579 102.946 cv
26.0444 103.223 26.1377 103.511 26.1377 103.811 cv
26.1377 104.272 25.9497 104.68 25.5742 105.033 cv
25.1987 105.386 24.7285 105.563 24.1641 105.563 cv
23.833 105.563 23.4893 105.493 23.1333 105.352 cv
22.7778 105.212 22.5293 105.068 22.3882 104.921 cv
22.3193 104.766 li
22.3716 104.637 li
22.4971 104.582 li
22.6616 104.651 li
23.1377 105.001 23.6411 105.176 24.1719 105.176 cv
24.6201 105.176 24.9951 105.037 25.2979 104.757 cv
25.6001 104.478 25.7515 104.167 25.7515 103.825 cv
25.7515 103.596 25.6768 103.372 25.5283 103.152 cv
25.3794 102.932 25.1655 102.759 24.8867 102.632 cv
24.6079 102.505 24.3252 102.442 24.0391 102.442 cv
23.9468 102.442 23.8809 102.424 23.8408 102.389 cv
23.7808 102.246 li
23.8384 102.107 li
24.0112 102.051 li
24.3438 102.055 li
24.6914 102.055 24.9785 101.95 25.2046 101.738 cv
25.4307 101.526 25.5439 101.28 25.5439 101.001 cv
25.5439 100.713 25.4253 100.458 25.1885 100.237 cv
24.9517 100.016 24.6426 99.9058 24.2612 99.9058 cv
23.9937 99.9058 23.7476 99.9517 23.5234 100.044 cv
23.2988 100.136 23.1191 100.263 22.9839 100.422 cv
22.8711 100.536 li
22.7813 100.556 li
22.6479 100.503 li
22.5928 100.376 li
22.5928 100.253 22.7261 100.098 22.9932 99.9111 cv
23.3696 99.6494 23.7915 99.519 24.2593 99.519 cv
24.7471 99.519 25.1479 99.666 25.4609 99.959 cv
25.7739 100.252 25.9302 100.602 25.9302 101.007 cv
25.9302 101.265 25.8555 101.51 25.7056 101.74 cv
25.5557 101.97 25.335 102.155 25.0435 102.295 cv
cp
f
31.6821 102.065 mo
31.6821 103.021 li
31.6821 103.852 31.4839 104.509 31.0869 104.993 cv
30.7783 105.373 30.3882 105.563 29.9165 105.563 cv
29.6895 105.563 29.4756 105.518 29.2749 105.427 cv
29.0737 105.337 28.9038 105.21 28.7642 105.048 cv
28.6753 104.947 28.5776 104.785 28.4712 104.561 cv
28.3647 104.337 28.2886 104.132 28.2427 103.945 cv
28.1719 103.682 28.1367 103.374 28.1367 103.021 cv
28.1367 102.065 li
28.1367 101.232 28.3345 100.574 28.73 100.091 cv
29.0396 99.71 29.4302 99.519 29.9023 99.519 cv
30.1323 99.519 30.3472 99.5645 30.5464 99.6548 cv
30.7456 99.7451 30.915 99.8716 31.0552 100.034 cv
31.1475 100.138 31.2456 100.302 31.3501 100.526 cv
31.4551 100.75 31.5317 100.953 31.5806 101.137 cv
31.6484 101.4 31.6821 101.71 31.6821 102.065 cv
cp
31.2954 102.116 mo
31.2954 101.752 31.2441 101.412 31.1421 101.097 cv
31.0405 100.782 30.9243 100.531 30.7944 100.344 cv
30.7178 100.238 30.6182 100.146 30.4956 100.067 cv
30.3208 99.9595 30.1245 99.9058 29.9067 99.9058 cv
29.4751 99.9067 29.1357 100.128 28.8901 100.57 cv
28.644 101.013 28.522 101.528 28.5234 102.116 cv
28.5234 102.967 li
28.5234 103.331 28.5742 103.671 28.6768 103.987 cv
28.7788 104.303 28.896 104.554 29.0273 104.741 cv
29.1006 104.844 29.1992 104.935 29.3232 105.013 cv
29.498 105.122 29.6958 105.176 29.9165 105.176 cv
30.3462 105.178 30.6831 104.957 30.9282 104.514 cv
31.1729 104.071 31.2954 103.556 31.2954 102.967 cv
31.2954 102.116 li
cp
f
34.7935 104.035 mo
36.0474 104.035 li
34.6802 106.577 li
34.5986 106.73 34.501 106.808 34.3862 106.808 cv
34.1938 106.727 li
34.1147 106.531 li
34.1284 106.43 li
34.7935 104.035 li
cp
f
45.8062 100.038 mo
45.8062 101.942 li
46.0337 101.845 46.252 101.771 46.4609 101.723 cv
46.6699 101.674 46.8682 101.65 47.0562 101.65 cv
47.5415 101.65 47.9482 101.82 48.2759 102.16 cv
48.603 102.5 48.7671 102.948 48.7671 103.503 cv
48.7671 104.116 48.5825 104.613 48.2139 104.993 cv
47.8457 105.373 47.3848 105.563 46.832 105.563 cv
46.4668 105.563 46.1152 105.481 45.7773 105.318 cv
45.5376 105.204 45.3198 105.063 45.123 104.894 cv
45.0063 104.792 44.9482 104.707 44.9482 104.64 cv
45.0029 104.499 li
45.1313 104.441 li
45.2964 104.524 li
45.7598 104.959 46.2651 105.176 46.8135 105.176 cv
47.2666 105.176 47.6406 105.022 47.9365 104.714 cv
48.2324 104.406 48.3804 103.997 48.3804 103.484 cv
48.3804 103.046 48.2524 102.695 47.9966 102.432 cv
47.7412 102.168 47.416 102.037 47.0215 102.037 cv
46.6182 102.037 46.2144 102.144 45.811 102.358 cv
45.7129 102.408 45.6436 102.433 45.604 102.433 cv
45.4702 102.377 li
45.4194 102.22 li
45.4194 99.6509 li
48.1133 99.6509 li
48.2056 99.6509 48.2715 99.6694 48.311 99.7056 cv
48.3706 99.8467 li
48.311 99.9834 li
48.2715 100.02 48.2056 100.038 48.1133 100.038 cv
45.8062 100.038 li
cp
f
54.311 102.065 mo
54.311 103.021 li
54.311 103.852 54.1128 104.509 53.7163 104.993 cv
53.4077 105.373 53.0171 105.563 52.5454 105.563 cv
52.3184 105.563 52.1045 105.518 51.9038 105.427 cv
51.7031 105.337 51.5327 105.21 51.3931 105.048 cv
51.3042 104.947 51.2065 104.785 51.1001 104.561 cv
50.9937 104.337 50.9175 104.132 50.8716 103.945 cv
50.8008 103.682 50.7656 103.374 50.7656 103.021 cv
50.7656 102.065 li
50.7656 101.232 50.9634 100.574 51.3589 100.091 cv
51.6685 99.71 52.0596 99.519 52.5313 99.519 cv
52.7612 99.519 52.9761 99.5645 53.1753 99.6548 cv
53.3745 99.7451 53.5444 99.8716 53.6841 100.034 cv
53.7764 100.138 53.8745 100.302 53.979 100.526 cv
54.084 100.75 54.1606 100.953 54.21 101.137 cv
54.2773 101.4 54.311 101.71 54.311 102.065 cv
cp
53.9243 102.116 mo
53.9243 101.752 53.8735 101.412 53.7715 101.097 cv
53.6694 100.782 53.5532 100.531 53.4233 100.344 cv
53.3467 100.238 53.2471 100.146 53.1245 100.067 cv
52.9497 99.9595 52.7534 99.9058 52.5361 99.9058 cv
52.104 99.9067 51.7651 100.128 51.519 100.57 cv
51.2729 101.013 51.1509 101.528 51.1523 102.116 cv
51.1523 102.967 li
51.1523 103.331 51.2036 103.671 51.3057 103.987 cv
51.4077 104.303 51.5249 104.554 51.6563 104.741 cv
51.7295 104.844 51.8281 104.935 51.9521 105.013 cv
52.127 105.122 52.3247 105.176 52.5454 105.176 cv
52.9751 105.178 53.3125 104.957 53.5571 104.514 cv
53.8018 104.071 53.9243 103.556 53.9243 102.967 cv
53.9243 102.116 li
cp
f
57.4224 104.035 mo
58.6763 104.035 li
57.3091 106.577 li
57.228 106.73 57.1299 106.808 57.0151 106.808 cv
56.8228 106.727 li
56.7437 106.531 li
56.7573 106.43 li
57.4224 104.035 li
cp
f
68.3594 102.993 mo
68.5986 102.637 68.8452 102.374 69.0986 102.205 cv
69.3521 102.036 69.6333 101.952 69.9434 101.952 cv
70.355 101.952 70.7202 102.123 71.0396 102.464 cv
71.3589 102.806 71.5186 103.228 71.5186 103.729 cv
71.5186 104.189 71.3726 104.609 71.0811 104.991 cv
70.7891 105.372 70.3872 105.563 69.8745 105.563 cv
69.54 105.563 69.2275 105.46 68.9375 105.255 cv
68.647 105.05 68.4194 104.734 68.2534 104.308 cv
68.0449 103.778 67.9419 103.191 67.9448 102.548 cv
67.9448 102.064 68.0415 101.613 68.2349 101.197 cv
68.3823 100.875 68.5786 100.592 68.8242 100.349 cv
69.0698 100.105 69.3564 99.9058 69.6831 99.751 cv
70.0103 99.5967 70.3638 99.519 70.7446 99.519 cv
71.0024 99.519 71.2173 99.5713 71.3892 99.6753 cv
71.4995 99.8589 li
71.4487 99.9941 li
71.3198 100.047 li
71.1772 100 li
71.0513 99.937 70.895 99.9058 70.7075 99.9058 cv
70.1089 99.9058 69.5635 100.162 69.0708 100.675 cv
68.5781 101.188 68.3315 101.8 68.332 102.51 cv
68.3315 102.614 68.3408 102.775 68.3594 102.993 cv
cp
68.4482 103.624 mo
68.564 104.181 68.7471 104.58 68.9971 104.819 cv
69.2476 105.058 69.543 105.177 69.8838 105.176 cv
70.2275 105.176 70.522 105.042 70.7676 104.774 cv
71.0132 104.507 71.1343 104.158 71.1313 103.729 cv
71.1343 103.326 71.0122 102.993 70.7651 102.731 cv
70.5181 102.469 70.2397 102.338 69.9297 102.338 cv
69.6318 102.338 69.3447 102.465 69.0688 102.719 cv
68.8843 102.888 68.6772 103.189 68.4482 103.624 cv
cp
f
76.9399 102.065 mo
76.9399 103.021 li
76.9399 103.852 76.7417 104.509 76.3452 104.993 cv
76.0366 105.373 75.6465 105.563 75.1743 105.563 cv
74.9473 105.563 74.7334 105.518 74.5327 105.427 cv
74.332 105.337 74.1616 105.21 74.0225 105.048 cv
73.9331 104.947 73.8354 104.785 73.729 104.561 cv
73.6226 104.337 73.5464 104.132 73.5005 103.945 cv
73.4302 103.682 73.395 103.374 73.395 103.021 cv
73.395 102.065 li
73.395 101.232 73.5923 100.574 73.9878 100.091 cv
74.2974 99.71 74.6885 99.519 75.1606 99.519 cv
75.3901 99.519 75.605 99.5645 75.8042 99.6548 cv
76.0034 99.7451 76.1733 99.8716 76.3135 100.034 cv
76.4053 100.138 76.5034 100.302 76.6084 100.526 cv
76.7129 100.75 76.7896 100.953 76.8389 101.137 cv
76.9063 101.4 76.9399 101.71 76.9399 102.065 cv
cp
76.5532 102.116 mo
76.5532 101.752 76.5024 101.412 76.4004 101.097 cv
76.2983 100.782 76.1826 100.531 76.0522 100.344 cv
75.9756 100.238 75.876 100.146 75.7534 100.067 cv
75.5786 99.9595 75.3828 99.9058 75.165 99.9058 cv
74.7329 99.9067 74.394 100.128 74.1479 100.57 cv
73.9023 101.013 73.7798 101.528 73.7813 102.116 cv
73.7813 102.967 li
73.7813 103.331 73.8325 103.671 73.9346 103.987 cv
74.0371 104.303 74.1538 104.554 74.2852 104.741 cv
74.3584 104.844 74.457 104.935 74.5811 105.013 cv
74.7559 105.122 74.9536 105.176 75.1743 105.176 cv
75.604 105.178 75.9414 104.957 76.186 104.514 cv
76.4312 104.071 76.5532 103.556 76.5532 102.967 cv
76.5532 102.116 li
cp
f
80.6455 106.232 mo
80.6455 100.038 li
79.7119 100.038 li
79.6211 100.038 79.5562 100.02 79.5166 99.9834 cv
79.4575 99.8467 li
79.5166 99.7056 li
79.5562 99.6694 79.6211 99.6509 79.7119 99.6509 cv
81.0322 99.6509 li
81.0322 106.619 li
79.7119 106.619 li
79.6211 106.619 79.5562 106.601 79.5166 106.566 cv
79.4575 106.426 li
79.5166 106.288 li
79.5562 106.251 79.6211 106.232 79.7119 106.232 cv
80.6455 106.232 li
cp
f
42.4292 2.14307 mo
42.4292 2.57165 li
211.718 2.57165 li
211.718 17.1437 li
42.8578 17.1437 li
42.8578 2.14307 li
42.4292 2.14307 li
42.4292 2.57165 li
42.4292 2.14307 li
42.0006 2.14307 li
42.0006 17.5723 li
42.0006 17.6851 42.0463 17.7955 42.1261 17.8753 cv
42.206 17.9551 42.3163 18.0008 42.4292 18.0008 cv
212.147 18.0008 li
212.26 18.0008 212.37 17.9551 212.45 17.8753 cv
212.53 17.7955 212.576 17.6851 212.576 17.5723 cv
212.576 2.14307 li
212.576 2.03021 212.53 1.91982 212.45 1.84002 cv
212.37 1.76021 212.26 1.71449 212.147 1.71449 cv
42.4292 1.71449 li
42.3163 1.71449 42.206 1.76021 42.1261 1.84001 cv
42.0463 1.91982 42.0006 2.03021 42.0006 2.14307 cv
42.4292 2.14307 li
cp
.746 .676 .668 .898 cmyk
f
50.6626 7.46436 mo
50.6626 13.6592 li
51.5957 13.6592 li
51.687 13.6592 51.752 13.6768 51.7915 13.7119 cv
51.8506 13.8525 li
51.7915 13.9927 li
51.752 14.0278 51.687 14.0459 51.5957 14.0459 cv
50.2759 14.0459 li
50.2759 7.07764 li
51.5957 7.07764 li
51.687 7.07764 51.752 7.09619 51.7915 7.13232 cv
51.8506 7.27344 li
51.7915 7.40967 li
51.752 7.44629 51.687 7.46436 51.5957 7.46436 cv
50.6626 7.46436 li
cp
0 0 0 1 cmyk
f
54.9805 10.4199 mo
55.2197 10.0635 55.4663 9.80078 55.7192 9.63184 cv
55.9727 9.46289 56.2544 9.37842 56.5645 9.37842 cv
56.9756 9.37842 57.3413 9.54932 57.6606 9.89063 cv
57.98 10.2324 58.1392 10.6543 58.1392 11.1563 cv
58.1392 11.6157 57.9937 12.0361 57.7017 12.418 cv
57.4102 12.7988 57.0083 12.9897 56.4956 12.9897 cv
56.1606 12.9897 55.8481 12.8867 55.5581 12.6816 cv
55.2681 12.4766 55.04 12.1606 54.8745 11.7349 cv
54.6655 11.2046 54.563 10.6182 54.5659 9.97461 cv
54.5659 9.49023 54.6626 9.04004 54.856 8.62354 cv
55.0034 8.30176 55.1997 8.01904 55.4453 7.77539 cv
55.6909 7.53174 55.9771 7.33252 56.3042 7.17773 cv
56.6309 7.02344 56.9849 6.9458 57.3652 6.9458 cv
57.623 6.9458 57.8384 6.99805 58.0103 7.10205 cv
58.1206 7.28564 li
58.0698 7.4209 li
57.9409 7.47363 li
57.7983 7.42676 li
57.6724 7.36377 57.5156 7.33252 57.3286 7.33252 cv
56.73 7.33252 56.1846 7.58887 55.6914 8.10205 cv
55.1987 8.61523 54.9526 9.22656 54.9526 9.93652 cv
54.9526 10.041 54.9619 10.2021 54.9805 10.4199 cv
cp
55.0688 11.0508 mo
55.1851 11.6079 55.3677 12.0063 55.6182 12.2456 cv
55.8682 12.4849 56.1636 12.604 56.5044 12.603 cv
56.8481 12.603 57.1431 12.4692 57.3887 12.2012 cv
57.6343 11.9336 57.7554 11.585 57.7524 11.1563 cv
57.7554 10.7524 57.6333 10.4194 57.3862 10.1577 cv
57.1392 9.896 56.8608 9.76514 56.5508 9.76514 cv
56.2529 9.76514 55.9658 9.89209 55.6895 10.146 cv
55.5054 10.3145 55.2983 10.6162 55.0688 11.0508 cv
cp
f
63.561 9.49219 mo
63.561 10.4482 li
63.561 11.2783 63.3628 11.9355 62.9658 12.4199 cv
62.6577 12.7998 62.2671 12.9897 61.7954 12.9897 cv
61.5684 12.9897 61.3545 12.9443 61.1538 12.854 cv
60.9526 12.7637 60.7827 12.6372 60.6431 12.4746 cv
60.5542 12.3735 60.4565 12.2114 60.3501 11.9878 cv
60.2437 11.7642 60.1675 11.5586 60.1216 11.3721 cv
60.0508 11.1084 60.0156 10.8003 60.0156 10.4482 cv
60.0156 9.49219 li
60.0156 8.65869 60.2134 8.00049 60.6089 7.51758 cv
60.9185 7.13623 61.3096 6.9458 61.7813 6.9458 cv
62.0112 6.9458 62.2261 6.99121 62.4253 7.08154 cv
62.6245 7.17188 62.7939 7.29834 62.9341 7.46045 cv
63.0264 7.56445 63.1245 7.72852 63.229 7.95264 cv
63.334 8.17627 63.4106 8.37988 63.4595 8.56348 cv
63.5273 8.82715 63.561 9.13672 63.561 9.49219 cv
cp
63.1743 9.54297 mo
63.1743 9.17822 63.1235 8.83887 63.0215 8.52393 cv
62.9194 8.20898 62.8032 7.95801 62.6733 7.771 cv
62.5967 7.66504 62.4971 7.57275 62.3745 7.49365 cv
62.1997 7.38623 62.0034 7.33252 61.7861 7.33252 cv
61.354 7.3335 61.0151 7.55469 60.769 7.99707 cv
60.5229 8.43896 60.4009 8.95459 60.4023 9.54297 cv
60.4023 10.3936 li
60.4023 10.7578 60.4536 11.0981 60.5557 11.4141 cv
60.6577 11.7295 60.7749 11.9805 60.9063 12.167 cv
60.9795 12.2705 61.0781 12.3613 61.2021 12.4399 cv
61.377 12.5488 61.5747 12.603 61.7954 12.603 cv
62.2251 12.6045 62.5625 12.3838 62.8071 11.9409 cv
63.0518 11.498 63.1743 10.9824 63.1743 10.3936 cv
63.1743 9.54297 li
cp
f
66.6724 11.4619 mo
67.9263 11.4619 li
66.5591 14.0039 li
66.478 14.1572 66.3799 14.2344 66.2651 14.2344 cv
66.0728 14.1538 li
65.9937 13.958 li
66.0073 13.8564 li
66.6724 11.4619 li
cp
f
79.5513 9.72168 mo
79.9077 9.87939 80.1792 10.0967 80.3657 10.373 cv
80.5522 10.6499 80.646 10.938 80.646 11.2378 cv
80.646 11.6992 80.458 12.1069 80.082 12.46 cv
79.7065 12.813 79.2363 12.9897 78.6724 12.9897 cv
78.3408 12.9897 77.9971 12.9194 77.6416 12.7788 cv
77.2856 12.6382 77.0371 12.4946 76.896 12.3481 cv
76.8271 12.1924 li
76.8794 12.064 li
77.0049 12.0088 li
77.1699 12.0776 li
77.6455 12.4277 78.1489 12.603 78.6802 12.603 cv
79.1279 12.603 79.5034 12.4634 79.8057 12.1841 cv
80.1079 11.9048 80.2593 11.5938 80.2593 11.252 cv
80.2593 11.0229 80.1851 10.7983 80.0361 10.5786 cv
79.8877 10.3589 79.6738 10.1855 79.3945 10.0586 cv
79.1157 9.93213 78.8335 9.86865 78.5474 9.86865 cv
78.4551 9.86865 78.3887 9.85059 78.3486 9.81543 cv
78.2886 9.67285 li
78.3462 9.53369 li
78.5195 9.47754 li
78.8516 9.48193 li
79.1997 9.48193 79.4863 9.37598 79.7124 9.16455 cv
79.939 8.95264 80.0518 8.70703 80.0518 8.42773 cv
80.0518 8.13965 79.9336 7.88477 79.6968 7.66406 cv
79.46 7.44287 79.1509 7.33252 78.7695 7.33252 cv
78.502 7.33252 78.2559 7.37842 78.0313 7.4707 cv
77.8066 7.56299 77.627 7.68896 77.4922 7.84912 cv
77.3789 7.96191 li
77.2896 7.98291 li
77.1558 7.92969 li
77.1006 7.80322 li
77.1006 7.68018 77.2344 7.5249 77.501 7.33789 cv
77.8774 7.07617 78.2993 6.9458 78.7671 6.9458 cv
79.2554 6.9458 79.6558 7.09229 79.9688 7.38574 cv
80.2817 7.6792 80.4385 8.02881 80.4385 8.43408 cv
80.4385 8.69189 80.3633 8.93652 80.2134 9.1665 cv
80.064 9.39697 79.8433 9.58203 79.5513 9.72168 cv
cp
f
86.1899 9.49219 mo
86.1899 10.4482 li
86.1899 11.2783 85.9917 11.9355 85.5952 12.4199 cv
85.2866 12.7998 84.8965 12.9897 84.4243 12.9897 cv
84.1973 12.9897 83.9834 12.9443 83.7827 12.854 cv
83.582 12.7637 83.4116 12.6372 83.272 12.4746 cv
83.1831 12.3735 83.0854 12.2114 82.979 11.9878 cv
82.8726 11.7642 82.7964 11.5586 82.7505 11.3721 cv
82.6802 11.1084 82.6445 10.8003 82.6445 10.4482 cv
82.6445 9.49219 li
82.6445 8.65869 82.8423 8.00049 83.2378 7.51758 cv
83.5474 7.13623 83.9385 6.9458 84.4106 6.9458 cv
84.6401 6.9458 84.855 6.99121 85.0542 7.08154 cv
85.2534 7.17188 85.4233 7.29834 85.563 7.46045 cv
85.6553 7.56445 85.7534 7.72852 85.8579 7.95264 cv
85.9629 8.17627 86.0396 8.37988 86.0889 8.56348 cv
86.1563 8.82715 86.1899 9.13672 86.1899 9.49219 cv
cp
85.8032 9.54297 mo
85.8032 9.17822 85.7524 8.83887 85.6504 8.52393 cv
85.5483 8.20898 85.4321 7.95801 85.3022 7.771 cv
85.2256 7.66504 85.126 7.57275 85.0034 7.49365 cv
84.8286 7.38623 84.6328 7.33252 84.415 7.33252 cv
83.9829 7.3335 83.644 7.55469 83.3979 7.99707 cv
83.1523 8.43896 83.0298 8.95459 83.0313 9.54297 cv
83.0313 10.3936 li
83.0313 10.7578 83.0825 11.0981 83.1846 11.4141 cv
83.2871 11.7295 83.4038 11.9805 83.5352 12.167 cv
83.6084 12.2705 83.707 12.3613 83.8311 12.4399 cv
84.0059 12.5488 84.2036 12.603 84.4243 12.603 cv
84.854 12.6045 85.1914 12.3838 85.436 11.9409 cv
85.6812 11.498 85.8032 10.9824 85.8032 10.3936 cv
85.8032 9.54297 li
cp
f
89.3013 11.4619 mo
90.5557 11.4619 li
89.1885 14.0039 li
89.1069 14.1572 89.0088 14.2344 88.894 14.2344 cv
88.7017 14.1538 li
88.6226 13.958 li
88.6362 13.8564 li
89.3013 11.4619 li
cp
f
100.314 7.46436 mo
100.314 9.36914 li
100.542 9.27148 100.76 9.19824 100.969 9.1499 cv
101.178 9.10107 101.376 9.07666 101.564 9.07666 cv
102.05 9.07666 102.457 9.24707 102.784 9.58691 cv
103.111 9.92725 103.275 10.375 103.275 10.9297 cv
103.275 11.543 103.091 12.0396 102.722 12.4194 cv
102.354 12.7998 101.893 12.9897 101.34 12.9897 cv
100.975 12.9897 100.623 12.9082 100.285 12.7451 cv
100.046 12.6309 99.8276 12.4893 99.6313 12.3198 cv
99.5146 12.2183 99.4561 12.1338 99.4561 12.0664 cv
99.5112 11.9253 li
99.6392 11.8677 li
99.8047 11.9507 li
100.268 12.3857 100.773 12.603 101.322 12.603 cv
101.774 12.603 102.149 12.4492 102.444 12.1411 cv
102.74 11.833 102.888 11.4229 102.888 10.9111 cv
102.888 10.4731 102.76 10.1221 102.504 9.8584 cv
102.249 9.59521 101.924 9.46338 101.53 9.46338 cv
101.126 9.46338 100.722 9.57031 100.319 9.78467 cv
100.221 9.83447 100.152 9.85938 100.112 9.85938 cv
99.978 9.8042 li
99.9277 9.64697 li
99.9277 7.07764 li
102.622 7.07764 li
102.713 7.07764 102.779 7.09619 102.819 7.13232 cv
102.879 7.27344 li
102.819 7.40967 li
102.779 7.44629 102.713 7.46436 102.622 7.46436 cv
100.314 7.46436 li
cp
f
108.819 9.49219 mo
108.819 10.4482 li
108.819 11.2783 108.621 11.9355 108.224 12.4199 cv
107.916 12.7998 107.525 12.9897 107.053 12.9897 cv
106.827 12.9897 106.613 12.9443 106.412 12.854 cv
106.211 12.7637 106.041 12.6372 105.901 12.4746 cv
105.813 12.3735 105.715 12.2114 105.608 11.9878 cv
105.501 11.7642 105.425 11.5586 105.379 11.3721 cv
105.309 11.1084 105.274 10.8003 105.274 10.4482 cv
105.274 9.49219 li
105.274 8.65869 105.472 8.00049 105.867 7.51758 cv
106.177 7.13623 106.567 6.9458 107.04 6.9458 cv
107.27 6.9458 107.484 6.99121 107.683 7.08154 cv
107.882 7.17188 108.052 7.29834 108.192 7.46045 cv
108.284 7.56445 108.383 7.72852 108.487 7.95264 cv
108.592 8.17627 108.669 8.37988 108.718 8.56348 cv
108.785 8.82715 108.819 9.13672 108.819 9.49219 cv
cp
108.432 9.54297 mo
108.432 9.17822 108.381 8.83887 108.279 8.52393 cv
108.177 8.20898 108.062 7.95801 107.931 7.771 cv
107.855 7.66504 107.755 7.57275 107.632 7.49365 cv
107.458 7.38623 107.262 7.33252 107.044 7.33252 cv
106.612 7.3335 106.273 7.55469 106.027 7.99707 cv
105.781 8.43896 105.659 8.95459 105.66 9.54297 cv
105.66 10.3936 li
105.66 10.7578 105.711 11.0981 105.813 11.4141 cv
105.916 11.7295 106.033 11.9805 106.164 12.167 cv
106.238 12.2705 106.336 12.3613 106.46 12.4399 cv
106.635 12.5488 106.833 12.603 107.053 12.603 cv
107.483 12.6045 107.82 12.3838 108.065 11.9409 cv
108.31 11.498 108.432 10.9824 108.432 10.3936 cv
108.432 9.54297 li
cp
f
111.931 11.4619 mo
113.185 11.4619 li
111.817 14.0039 li
111.736 14.1572 111.638 14.2344 111.523 14.2344 cv
111.331 14.1538 li
111.251 13.958 li
111.265 13.8564 li
111.931 11.4619 li
cp
f
122.368 12.4712 mo
125.319 12.4712 li
125.319 12.3203 li
125.319 12.2295 125.337 12.1641 125.373 12.1245 cv
125.513 12.0654 li
125.651 12.1245 li
125.688 12.1641 125.706 12.2295 125.706 12.3203 cv
125.706 12.8574 li
121.981 12.8574 li
121.981 12.2852 li
122.766 11.5762 123.529 10.8574 124.271 10.1294 cv
124.617 9.78906 124.855 9.53906 124.984 9.37939 cv
125.112 9.22021 125.201 9.07959 125.248 8.9585 cv
125.295 8.8374 125.319 8.71533 125.319 8.59277 cv
125.319 8.26172 125.186 7.96875 124.92 7.71436 cv
124.654 7.45947 124.333 7.33252 123.957 7.33252 cv
123.62 7.33252 123.321 7.4292 123.062 7.62256 cv
122.801 7.81592 122.633 8.05566 122.557 8.34082 cv
122.487 8.48389 li
122.356 8.52979 li
122.224 8.47705 li
122.17 8.35059 li
122.17 8.2041 122.25 8.00488 122.411 7.75391 cv
122.572 7.50293 122.794 7.30566 123.077 7.16162 cv
123.36 7.01758 123.65 6.9458 123.947 6.9458 cv
124.428 6.9458 124.841 7.11279 125.187 7.44727 cv
125.533 7.78174 125.706 8.16016 125.706 8.5835 cv
125.706 8.76172 125.677 8.92383 125.619 9.07129 cv
125.561 9.21875 125.462 9.38037 125.324 9.55664 cv
125.185 9.73242 124.935 9.99854 124.575 10.3545 cv
123.671 11.2505 122.936 11.9458 122.368 12.4404 cv
122.368 12.4712 li
cp
f
131.448 9.49219 mo
131.448 10.4482 li
131.448 11.2783 131.25 11.9355 130.853 12.4199 cv
130.544 12.7998 130.154 12.9897 129.682 12.9897 cv
129.456 12.9897 129.242 12.9443 129.041 12.854 cv
128.84 12.7637 128.67 12.6372 128.53 12.4746 cv
128.441 12.3735 128.344 12.2114 128.237 11.9878 cv
128.131 11.7642 128.055 11.5586 128.008 11.3721 cv
127.938 11.1084 127.903 10.8003 127.903 10.4482 cv
127.903 9.49219 li
127.903 8.65869 128.101 8.00049 128.496 7.51758 cv
128.806 7.13623 129.196 6.9458 129.668 6.9458 cv
129.898 6.9458 130.113 6.99121 130.312 7.08154 cv
130.512 7.17188 130.681 7.29834 130.821 7.46045 cv
130.914 7.56445 131.012 7.72852 131.116 7.95264 cv
131.221 8.17627 131.298 8.37988 131.347 8.56348 cv
131.414 8.82715 131.448 9.13672 131.448 9.49219 cv
cp
131.062 9.54297 mo
131.062 9.17822 131.01 8.83887 130.908 8.52393 cv
130.806 8.20898 130.69 7.95801 130.561 7.771 cv
130.484 7.66504 130.384 7.57275 130.262 7.49365 cv
130.087 7.38623 129.891 7.33252 129.673 7.33252 cv
129.241 7.3335 128.902 7.55469 128.656 7.99707 cv
128.41 8.43896 128.288 8.95459 128.29 9.54297 cv
128.29 10.3936 li
128.29 10.7578 128.34 11.0981 128.443 11.4141 cv
128.545 11.7295 128.662 11.9805 128.793 12.167 cv
128.867 12.2705 128.965 12.3613 129.089 12.4399 cv
129.264 12.5488 129.461 12.603 129.682 12.603 cv
130.112 12.6045 130.449 12.3838 130.694 11.9409 cv
130.939 11.498 131.062 10.9824 131.062 10.3936 cv
131.062 9.54297 li
cp
f
134.559 11.4619 mo
135.814 11.4619 li
134.447 14.0039 li
134.365 14.1572 134.267 14.2344 134.152 14.2344 cv
133.959 14.1538 li
133.88 13.958 li
133.895 13.8564 li
134.559 11.4619 li
cp
f
146.835 7.00098 mo
146.835 12.4712 li
148.166 12.4712 li
148.256 12.4712 148.321 12.4888 148.361 12.5239 cv
148.419 12.6641 li
148.361 12.8022 li
148.321 12.8394 148.256 12.8574 148.166 12.8574 cv
145.12 12.8574 li
145.029 12.8574 144.963 12.8394 144.924 12.8022 cv
144.865 12.6641 li
144.924 12.5239 li
144.963 12.4888 145.029 12.4712 145.12 12.4712 cv
146.449 12.4712 li
146.449 7.53906 li
145.19 7.93506 li
145.057 7.96387 li
144.93 7.90625 li
144.873 7.77002 li
144.918 7.64063 li
145.071 7.56299 li
146.835 7.00098 li
cp
f
154.077 9.49219 mo
154.077 10.4482 li
154.078 11.2783 153.879 11.9355 153.482 12.4199 cv
153.173 12.7998 152.784 12.9897 152.311 12.9897 cv
152.084 12.9897 151.871 12.9443 151.669 12.854 cv
151.469 12.7637 151.299 12.6372 151.16 12.4746 cv
151.071 12.3735 150.973 12.2114 150.866 11.9878 cv
150.76 11.7642 150.683 11.5586 150.637 11.3721 cv
150.567 11.1084 150.532 10.8003 150.532 10.4482 cv
150.532 9.49219 li
150.532 8.65869 150.729 8.00049 151.125 7.51758 cv
151.435 7.13623 151.826 6.9458 152.297 6.9458 cv
152.528 6.9458 152.742 6.99121 152.941 7.08154 cv
153.14 7.17188 153.31 7.29834 153.451 7.46045 cv
153.542 7.56445 153.641 7.72852 153.746 7.95264 cv
153.85 8.17627 153.927 8.37988 153.976 8.56348 cv
154.043 8.82715 154.077 9.13672 154.077 9.49219 cv
cp
153.69 9.54297 mo
153.69 9.17822 153.639 8.83887 153.538 8.52393 cv
153.435 8.20898 153.32 7.95801 153.189 7.771 cv
153.113 7.66504 153.013 7.57275 152.891 7.49365 cv
152.716 7.38623 152.52 7.33252 152.302 7.33252 cv
151.87 7.3335 151.531 7.55469 151.285 7.99707 cv
151.04 8.43896 150.917 8.95459 150.918 9.54297 cv
150.918 10.3936 li
150.918 10.7578 150.969 11.0981 151.072 11.4141 cv
151.174 11.7295 151.291 11.9805 151.422 12.167 cv
151.496 12.2705 151.594 12.3613 151.718 12.4399 cv
151.893 12.5488 152.09 12.603 152.311 12.603 cv
152.741 12.6045 153.079 12.3838 153.323 11.9409 cv
153.568 11.498 153.69 10.9824 153.69 10.3936 cv
153.69 9.54297 li
cp
f
157.189 11.4619 mo
158.443 11.4619 li
157.076 14.0039 li
156.994 14.1572 156.896 14.2344 156.781 14.2344 cv
156.588 14.1538 li
156.509 13.958 li
156.523 13.8564 li
157.189 11.4619 li
cp
f
170.578 7.63916 mo
170.578 7.46436 li
167.805 7.46436 li
167.805 7.80371 li
167.805 7.89453 167.788 7.95996 167.752 7.99902 cv
167.612 8.05859 li
167.474 7.99902 li
167.437 7.95996 167.418 7.89453 167.418 7.80371 cv
167.418 7.07764 li
170.964 7.07764 li
170.965 7.69043 li
169.41 12.668 li
169.323 12.8203 li
169.208 12.8574 li
169.072 12.8022 li
169.016 12.6738 li
169.044 12.5449 li
170.578 7.63916 li
cp
f
176.706 9.49219 mo
176.706 10.4482 li
176.707 11.2783 176.508 11.9355 176.111 12.4199 cv
175.802 12.7998 175.413 12.9897 174.94 12.9897 cv
174.713 12.9897 174.5 12.9443 174.298 12.854 cv
174.098 12.7637 173.928 12.6372 173.789 12.4746 cv
173.7 12.3735 173.602 12.2114 173.496 11.9878 cv
173.389 11.7642 173.313 11.5586 173.266 11.3721 cv
173.196 11.1084 173.161 10.8003 173.161 10.4482 cv
173.161 9.49219 li
173.161 8.65869 173.359 8.00049 173.754 7.51758 cv
174.064 7.13623 174.455 6.9458 174.926 6.9458 cv
175.157 6.9458 175.371 6.99121 175.571 7.08154 cv
175.77 7.17188 175.939 7.29834 176.08 7.46045 cv
176.171 7.56445 176.27 7.72852 176.375 7.95264 cv
176.479 8.17627 176.556 8.37988 176.605 8.56348 cv
176.672 8.82715 176.706 9.13672 176.706 9.49219 cv
cp
176.32 9.54297 mo
176.32 9.17822 176.268 8.83887 176.167 8.52393 cv
176.065 8.20898 175.949 7.95801 175.819 7.771 cv
175.742 7.66504 175.642 7.57275 175.52 7.49365 cv
175.345 7.38623 175.149 7.33252 174.931 7.33252 cv
174.499 7.3335 174.16 7.55469 173.915 7.99707 cv
173.668 8.43896 173.546 8.95459 173.547 9.54297 cv
173.547 10.3936 li
173.547 10.7578 173.598 11.0981 173.701 11.4141 cv
173.803 11.7295 173.919 11.9805 174.051 12.167 cv
174.125 12.2705 174.223 12.3613 174.347 12.4399 cv
174.522 12.5488 174.719 12.603 174.94 12.603 cv
175.37 12.6045 175.708 12.3838 175.953 11.9409 cv
176.197 11.498 176.32 10.9824 176.32 10.3936 cv
176.32 9.54297 li
cp
f
179.818 11.4619 mo
181.072 11.4619 li
179.705 14.0039 li
179.623 14.1572 179.525 14.2344 179.411 14.2344 cv
179.217 14.1538 li
179.139 13.958 li
179.153 13.8564 li
179.818 11.4619 li
cp
f
192.631 11.2451 mo
190.067 11.2451 li
190.062 10.7988 li
192.216 7.07764 li
193.018 7.07764 li
193.018 10.8589 li
193.34 10.8589 li
193.435 10.8589 193.502 10.8765 193.542 10.9116 cv
193.602 11.0518 li
193.542 11.1899 li
193.502 11.2271 193.435 11.2451 193.34 11.2451 cv
193.018 11.2451 li
193.018 12.4712 li
193.338 12.4712 li
193.434 12.4712 193.502 12.4888 193.542 12.5239 cv
193.602 12.6641 li
193.542 12.8022 li
193.502 12.8394 193.434 12.8574 193.338 12.8574 cv
191.905 12.8574 li
191.809 12.8574 191.742 12.8394 191.702 12.8022 cv
191.641 12.6641 li
191.702 12.5239 li
191.742 12.4888 191.809 12.4712 191.905 12.4712 cv
192.631 12.4712 li
192.631 11.2451 li
cp
192.631 10.8589 mo
192.631 7.46436 li
192.438 7.46436 li
190.472 10.8589 li
192.631 10.8589 li
cp
f
199.335 9.49219 mo
199.335 10.4482 li
199.335 11.2783 199.137 11.9355 198.74 12.4199 cv
198.432 12.7998 198.042 12.9897 197.57 12.9897 cv
197.342 12.9897 197.128 12.9443 196.928 12.854 cv
196.727 12.7637 196.557 12.6372 196.417 12.4746 cv
196.329 12.3735 196.231 12.2114 196.125 11.9878 cv
196.018 11.7642 195.942 11.5586 195.896 11.3721 cv
195.825 11.1084 195.79 10.8003 195.79 10.4482 cv
195.79 9.49219 li
195.79 8.65869 195.988 8.00049 196.383 7.51758 cv
196.693 7.13623 197.083 6.9458 197.555 6.9458 cv
197.786 6.9458 198 6.99121 198.2 7.08154 cv
198.399 7.17188 198.568 7.29834 198.708 7.46045 cv
198.8 7.56445 198.899 7.72852 199.003 7.95264 cv
199.108 8.17627 199.185 8.37988 199.234 8.56348 cv
199.301 8.82715 199.335 9.13672 199.335 9.49219 cv
cp
198.949 9.54297 mo
198.949 9.17822 198.897 8.83887 198.795 8.52393 cv
198.694 8.20898 198.578 7.95801 198.448 7.771 cv
198.371 7.66504 198.271 7.57275 198.149 7.49365 cv
197.974 7.38623 197.778 7.33252 197.56 7.33252 cv
197.128 7.3335 196.79 7.55469 196.543 7.99707 cv
196.297 8.43896 196.175 8.95459 196.176 9.54297 cv
196.176 10.3936 li
196.176 10.7578 196.227 11.0981 196.33 11.4141 cv
196.432 11.7295 196.549 11.9805 196.68 12.167 cv
196.753 12.2705 196.852 12.3613 196.976 12.4399 cv
197.151 12.5488 197.349 12.603 197.57 12.603 cv
198 12.6045 198.336 12.3838 198.582 11.9409 cv
198.826 11.498 198.949 10.9824 198.949 10.3936 cv
198.949 9.54297 li
cp
f
203.041 13.6592 mo
203.041 7.46436 li
202.107 7.46436 li
202.016 7.46436 201.951 7.44629 201.912 7.40967 cv
201.852 7.27344 li
201.912 7.13232 li
201.951 7.09619 202.016 7.07764 202.107 7.07764 cv
203.427 7.07764 li
203.427 14.0459 li
202.107 14.0459 li
202.016 14.0459 201.951 14.0278 201.912 13.9927 cv
201.852 13.8525 li
201.912 13.7144 li
201.951 13.6777 202.016 13.6592 202.107 13.6592 cv
203.041 13.6592 li
cp
f
11.5718 48.4297 mo
11.5718 48.8583 li
88.2872 48.8583 li
88.2872 63.4298 li
12.0004 63.4298 li
12.0004 48.4297 li
11.5718 48.4297 li
11.5718 48.8583 li
11.5718 48.4297 li
11.1432 48.4297 li
11.1432 63.8584 li
11.1432 63.9713 11.1889 64.0816 11.2687 64.1614 cv
11.3485 64.2412 11.4589 64.287 11.5718 64.287 cv
88.7158 64.287 li
88.8287 64.287 88.9391 64.2412 89.0189 64.1614 cv
89.0987 64.0816 89.1444 63.9713 89.1444 63.8584 cv
89.1444 48.4297 li
89.1444 48.3168 89.0987 48.2064 89.0189 48.1266 cv
88.9391 48.0468 88.8287 48.0011 88.7158 48.0011 cv
11.5718 48.0011 li
11.4589 48.0011 11.3485 48.0468 11.2687 48.1266 cv
11.1889 48.2064 11.1432 48.3168 11.1432 48.4297 cv
11.5718 48.4297 li
cp
.746 .676 .668 .898 cmyk
f
18.7832 53.751 mo
18.7832 59.9458 li
19.7168 59.9458 li
19.8076 59.9458 19.873 59.9634 19.9126 59.9985 cv
19.9712 60.1392 li
19.9126 60.2793 li
19.873 60.3145 19.8076 60.332 19.7168 60.332 cv
18.397 60.332 li
18.397 53.3643 li
19.7168 53.3643 li
19.8076 53.3643 19.873 53.3828 19.9126 53.4189 cv
19.9712 53.5601 li
19.9126 53.6963 li
19.873 53.7329 19.8076 53.751 19.7168 53.751 cv
18.7832 53.751 li
cp
0 0 0 1 cmyk
f
23.1011 56.7065 mo
23.3408 56.3501 23.5874 56.0874 23.8403 55.9185 cv
24.0938 55.7495 24.3755 55.665 24.6855 55.665 cv
25.0967 55.665 25.4624 55.8359 25.7813 56.1772 cv
26.1006 56.5186 26.2603 56.9409 26.2603 57.4434 cv
26.2603 57.9023 26.1147 58.3228 25.8228 58.7041 cv
25.5313 59.0854 25.1289 59.2764 24.6162 59.2764 cv
24.2817 59.2764 23.9692 59.1738 23.6792 58.9683 cv
23.3892 58.7632 23.1611 58.4473 22.9956 58.0215 cv
22.7866 57.4912 22.6841 56.9048 22.687 56.2612 cv
22.687 55.7773 22.7837 55.3267 22.9771 54.9102 cv
23.1245 54.5884 23.3208 54.3057 23.5664 54.062 cv
23.812 53.8184 24.0981 53.6191 24.4248 53.4648 cv
24.752 53.3096 25.106 53.2324 25.4863 53.2324 cv
25.7441 53.2324 25.959 53.2847 26.1309 53.3887 cv
26.2417 53.5723 li
26.1909 53.7075 li
26.062 53.7603 li
25.9194 53.7134 li
25.7935 53.6504 25.6367 53.6191 25.4497 53.6191 cv
24.8511 53.6191 24.3052 53.8755 23.8125 54.3887 cv
23.3198 54.9019 23.0737 55.5132 23.0737 56.2231 cv
23.0737 56.3271 23.083 56.4888 23.1011 56.7065 cv
cp
23.1899 57.3374 mo
23.3062 57.8945 23.4888 58.293 23.7393 58.5322 cv
23.9893 58.7715 24.2847 58.8906 24.6255 58.8896 cv
24.9692 58.8896 25.2642 58.7559 25.5098 58.4878 cv
25.7554 58.2197 25.8765 57.8716 25.8735 57.4434 cv
25.8765 57.0391 25.7544 56.7061 25.5073 56.4443 cv
25.2603 56.1826 24.9819 56.0518 24.6719 56.0518 cv
24.374 56.0518 24.0869 56.1787 23.8105 56.4326 cv
23.6265 56.6011 23.4194 56.9028 23.1899 57.3374 cv
cp
f
31.6821 55.7788 mo
31.6821 56.7344 li
31.6821 57.5649 31.4839 58.2222 31.0869 58.7065 cv
30.7783 59.0864 30.3882 59.2764 29.9165 59.2764 cv
29.6895 59.2764 29.4756 59.231 29.2749 59.1406 cv
29.0737 59.0503 28.9038 58.9238 28.7642 58.7617 cv
28.6753 58.6602 28.5776 58.498 28.4712 58.2744 cv
28.3647 58.0508 28.2886 57.8452 28.2427 57.6582 cv
28.1719 57.395 28.1367 57.0869 28.1367 56.7344 cv
28.1367 55.7788 li
28.1367 54.9453 28.3345 54.2871 28.73 53.8042 cv
29.0396 53.4229 29.4302 53.2324 29.9023 53.2324 cv
30.1323 53.2324 30.3472 53.2778 30.5464 53.3682 cv
30.7456 53.4585 30.915 53.585 31.0552 53.7471 cv
31.1475 53.8516 31.2456 54.0156 31.3501 54.2393 cv
31.4551 54.4629 31.5317 54.6665 31.5806 54.8501 cv
31.6484 55.1138 31.6821 55.4233 31.6821 55.7788 cv
cp
31.2954 55.8296 mo
31.2954 55.4648 31.2441 55.1255 31.1421 54.8105 cv
31.0405 54.4956 30.9243 54.2446 30.7944 54.0576 cv
30.7178 53.9517 30.6182 53.8594 30.4956 53.7803 cv
30.3208 53.6729 30.1245 53.6191 29.9067 53.6191 cv
29.4751 53.6201 29.1357 53.8418 28.8901 54.2837 cv
28.644 54.7256 28.522 55.2412 28.5234 55.8296 cv
28.5234 56.6797 li
28.5234 57.0444 28.5742 57.3848 28.6768 57.7002 cv
28.7788 58.0161 28.896 58.2671 29.0273 58.4541 cv
29.1006 58.5571 29.1992 58.6484 29.3232 58.7266 cv
29.498 58.8354 29.6958 58.8896 29.9165 58.8896 cv
30.3462 58.8911 30.6831 58.6704 30.9282 58.2275 cv
31.1729 57.7847 31.2954 57.269 31.2954 56.6807 cv
31.2954 55.8296 li
cp
f
34.7935 57.749 mo
36.0474 57.749 li
34.6802 60.2905 li
34.5986 60.4443 34.501 60.521 34.3862 60.521 cv
34.1938 60.4404 li
34.1147 60.2446 li
34.1284 60.1431 li
34.7935 57.749 li
cp
f
47.6724 56.0083 mo
48.0288 56.166 48.3003 56.3833 48.4868 56.6597 cv
48.6733 56.9365 48.7671 57.2246 48.7671 57.5244 cv
48.7671 57.9858 48.5791 58.3936 48.2031 58.7466 cv
47.8276 59.0996 47.3574 59.2764 46.793 59.2764 cv
46.4619 59.2764 46.1182 59.2061 45.7627 59.0654 cv
45.4067 58.9248 45.1582 58.7813 45.0171 58.6348 cv
44.9482 58.479 li
45.0005 58.3506 li
45.126 58.2959 li
45.291 58.3643 li
45.7666 58.7144 46.27 58.8896 46.8008 58.8896 cv
47.249 58.8896 47.6245 58.75 47.9268 58.4707 cv
48.229 58.1914 48.3804 57.8804 48.3804 57.5386 cv
48.3804 57.3096 48.3062 57.085 48.1572 56.8652 cv
48.0083 56.6455 47.7949 56.4722 47.5156 56.3452 cv
47.2368 56.2188 46.9541 56.1553 46.6685 56.1553 cv
46.5757 56.1553 46.5098 56.1377 46.4697 56.1021 cv
46.4097 55.96 li
46.4673 55.8203 li
46.6401 55.7642 li
46.9727 55.7686 li
47.3203 55.7686 47.6074 55.6631 47.8335 55.4512 cv
48.0596 55.2393 48.1729 54.9941 48.1729 54.7148 cv
48.1729 54.4263 48.0542 54.1714 47.8179 53.9507 cv
47.5811 53.7295 47.272 53.6191 46.8901 53.6191 cv
46.623 53.6191 46.377 53.665 46.1523 53.7573 cv
45.9277 53.8496 45.748 53.9756 45.6133 54.1357 cv
45.5 54.249 li
45.4102 54.2695 li
45.2769 54.2168 li
45.2217 54.0898 li
45.2217 53.9668 45.355 53.8115 45.6221 53.624 cv
45.9985 53.3633 46.4204 53.2324 46.8882 53.2324 cv
47.376 53.2324 47.7769 53.3789 48.0898 53.6724 cv
48.4028 53.9658 48.5596 54.3154 48.5596 54.7207 cv
48.5596 54.9785 48.4844 55.2227 48.3345 55.4531 cv
48.1851 55.6836 47.9639 55.8687 47.6724 56.0083 cv
cp
f
54.311 55.7788 mo
54.311 56.7344 li
54.311 57.5649 54.1128 58.2222 53.7163 58.7065 cv
53.4077 59.0864 53.0171 59.2764 52.5454 59.2764 cv
52.3184 59.2764 52.1045 59.231 51.9038 59.1406 cv
51.7031 59.0503 51.5327 58.9238 51.3931 58.7617 cv
51.3042 58.6602 51.2065 58.498 51.1001 58.2744 cv
50.9937 58.0508 50.9175 57.8452 50.8716 57.6582 cv
50.8008 57.395 50.7656 57.0869 50.7656 56.7344 cv
50.7656 55.7788 li
50.7656 54.9453 50.9634 54.2871 51.3589 53.8042 cv
51.6685 53.4229 52.0596 53.2324 52.5313 53.2324 cv
52.7612 53.2324 52.9761 53.2778 53.1753 53.3682 cv
53.3745 53.4585 53.5444 53.585 53.6841 53.7471 cv
53.7764 53.8516 53.8745 54.0156 53.979 54.2393 cv
54.084 54.4629 54.1606 54.6665 54.21 54.8501 cv
54.2773 55.1138 54.311 55.4233 54.311 55.7788 cv
cp
53.9243 55.8296 mo
53.9243 55.4648 53.8735 55.1255 53.7715 54.8105 cv
53.6694 54.4956 53.5532 54.2446 53.4233 54.0576 cv
53.3467 53.9517 53.2471 53.8594 53.1245 53.7803 cv
52.9497 53.6729 52.7534 53.6191 52.5361 53.6191 cv
52.104 53.6201 51.7651 53.8418 51.519 54.2837 cv
51.2729 54.7256 51.1509 55.2412 51.1523 55.8296 cv
51.1523 56.6797 li
51.1523 57.0444 51.2036 57.3848 51.3057 57.7002 cv
51.4077 58.0161 51.5249 58.2671 51.6563 58.4541 cv
51.7295 58.5571 51.8281 58.6484 51.9521 58.7266 cv
52.127 58.8354 52.3247 58.8896 52.5454 58.8896 cv
52.9751 58.8911 53.3125 58.6704 53.5571 58.2275 cv
53.8018 57.7847 53.9243 57.269 53.9243 56.6807 cv
53.9243 55.8296 li
cp
f
57.4224 57.749 mo
58.6763 57.749 li
57.3091 60.2905 li
57.228 60.4443 57.1299 60.521 57.0151 60.521 cv
56.8228 60.4404 li
56.7437 60.2446 li
56.7573 60.1431 li
57.4224 57.749 li
cp
f
68.4351 53.751 mo
68.4351 55.6558 li
68.6626 55.5581 68.8809 55.4854 69.0898 55.4365 cv
69.2988 55.3877 69.4976 55.3633 69.6851 55.3633 cv
70.1709 55.3633 70.5771 55.5332 70.9048 55.874 cv
71.2319 56.2139 71.396 56.6616 71.396 57.2163 cv
71.396 57.8296 71.2114 58.3262 70.8433 58.7061 cv
70.4746 59.0859 70.0142 59.2764 69.4614 59.2764 cv
69.0957 59.2764 68.7441 59.1948 68.4063 59.0317 cv
68.167 58.9175 67.9487 58.7759 67.7524 58.6064 cv
67.6357 58.5049 67.5771 58.4204 67.5771 58.353 cv
67.6323 58.2119 li
67.7603 58.1543 li
67.9253 58.2373 li
68.3887 58.6724 68.8945 58.8896 69.4429 58.8896 cv
69.8955 58.8896 70.27 58.7358 70.5654 58.4277 cv
70.8613 58.1196 71.0093 57.71 71.0093 57.1978 cv
71.0093 56.7598 70.8813 56.4087 70.6255 56.145 cv
70.3701 55.8818 70.0449 55.75 69.6509 55.75 cv
69.2471 55.75 68.8433 55.8569 68.4399 56.0713 cv
68.3418 56.1211 68.2729 56.146 68.2329 56.146 cv
68.0991 56.0908 li
68.0488 55.9336 li
68.0488 53.3643 li
70.7427 53.3643 li
70.8345 53.3643 70.9004 53.3828 70.9399 53.4189 cv
71 53.5601 li
70.9399 53.6963 li
70.9004 53.7329 70.8345 53.751 70.7427 53.751 cv
68.4351 53.751 li
cp
f
76.9399 55.7788 mo
76.9399 56.7344 li
76.9399 57.5649 76.7417 58.2222 76.3452 58.7065 cv
76.0366 59.0864 75.6465 59.2764 75.1743 59.2764 cv
74.9473 59.2764 74.7334 59.231 74.5327 59.1406 cv
74.332 59.0503 74.1616 58.9238 74.0225 58.7617 cv
73.9331 58.6602 73.8354 58.498 73.729 58.2744 cv
73.6226 58.0508 73.5464 57.8452 73.5005 57.6582 cv
73.4302 57.395 73.395 57.0869 73.395 56.7344 cv
73.395 55.7788 li
73.395 54.9453 73.5923 54.2871 73.9878 53.8042 cv
74.2974 53.4229 74.6885 53.2324 75.1606 53.2324 cv
75.3901 53.2324 75.605 53.2778 75.8042 53.3682 cv
76.0034 53.4585 76.1733 53.585 76.3135 53.7471 cv
76.4053 53.8516 76.5034 54.0156 76.6084 54.2393 cv
76.7129 54.4629 76.7896 54.6665 76.8389 54.8501 cv
76.9063 55.1138 76.9399 55.4233 76.9399 55.7788 cv
cp
76.5532 55.8296 mo
76.5532 55.4648 76.5024 55.1255 76.4004 54.8105 cv
76.2983 54.4956 76.1826 54.2446 76.0522 54.0576 cv
75.9756 53.9517 75.876 53.8594 75.7534 53.7803 cv
75.5786 53.6729 75.3828 53.6191 75.165 53.6191 cv
74.7329 53.6201 74.394 53.8418 74.1479 54.2837 cv
73.9023 54.7256 73.7798 55.2412 73.7813 55.8296 cv
73.7813 56.6797 li
73.7813 57.0444 73.8325 57.3848 73.9346 57.7002 cv
74.0371 58.0161 74.1538 58.2671 74.2852 58.4541 cv
74.3584 58.5571 74.457 58.6484 74.5811 58.7266 cv
74.7559 58.8354 74.9536 58.8896 75.1743 58.8896 cv
75.604 58.8911 75.9414 58.6704 76.186 58.2275 cv
76.4312 57.7847 76.5532 57.269 76.5532 56.6807 cv
76.5532 55.8296 li
cp
f
80.6455 59.9458 mo
80.6455 53.751 li
79.7119 53.751 li
79.6211 53.751 79.5562 53.7329 79.5166 53.6963 cv
79.4575 53.5601 li
79.5166 53.4189 li
79.5562 53.3828 79.6211 53.3643 79.7119 53.3643 cv
81.0322 53.3643 li
81.0322 60.332 li
79.7119 60.332 li
79.6211 60.332 79.5562 60.3145 79.5166 60.2793 cv
79.4575 60.1392 li
79.5166 60.001 li
79.5562 59.9639 79.6211 59.9458 79.7119 59.9458 cv
80.6455 59.9458 li
cp
f
150.431 48.4297 mo
150.431 48.8583 li
250.291 48.8583 li
250.291 63.4298 li
150.86 63.4298 li
150.86 48.4297 li
150.431 48.4297 li
150.431 48.8583 li
150.431 48.4297 li
150.003 48.4297 li
150.003 63.8584 li
150.003 63.9713 150.048 64.0816 150.128 64.1615 cv
150.208 64.2413 150.318 64.287 150.431 64.287 cv
250.719 64.287 li
250.832 64.287 250.942 64.2412 251.022 64.1614 cv
251.102 64.0816 251.148 63.9713 251.148 63.8584 cv
251.148 48.4297 li
251.148 48.3168 251.102 48.2064 251.022 48.1266 cv
250.942 48.0468 250.832 48.0011 250.719 48.0011 cv
150.431 48.0011 li
150.318 48.0011 150.208 48.0468 150.128 48.1266 cv
150.048 48.2064 150.003 48.3168 150.003 48.4297 cv
150.431 48.4297 li
cp
.746 .676 .668 .898 cmyk
f
157.899 53.751 mo
157.899 59.9458 li
158.833 59.9458 li
158.923 59.9458 158.988 59.9634 159.028 59.9985 cv
159.086 60.1392 li
159.028 60.2793 li
158.988 60.3145 158.923 60.332 158.833 60.332 cv
157.512 60.332 li
157.512 53.3643 li
158.833 53.3643 li
158.923 53.3643 158.988 53.3828 159.028 53.4189 cv
159.086 53.5601 li
159.028 53.6963 li
158.988 53.7329 158.923 53.751 158.833 53.751 cv
157.899 53.751 li
cp
0 0 0 1 cmyk
f
161.717 58.7578 mo
164.668 58.7578 li
164.668 58.6069 li
164.668 58.5156 164.686 58.4507 164.722 58.4111 cv
164.862 58.3521 li
165 58.4111 li
165.037 58.4507 165.055 58.5156 165.055 58.6069 cv
165.055 59.144 li
161.331 59.144 li
161.331 58.5723 li
162.116 57.8628 162.878 57.144 163.621 56.416 cv
163.966 56.0757 164.204 55.8257 164.333 55.666 cv
164.461 55.5068 164.549 55.3662 164.597 55.2451 cv
164.645 55.124 164.668 55.002 164.668 54.8794 cv
164.668 54.5483 164.536 54.2554 164.269 54.001 cv
164.003 53.7461 163.682 53.6191 163.305 53.6191 cv
162.969 53.6191 162.67 53.7158 162.411 53.9092 cv
162.151 54.1025 161.982 54.3418 161.906 54.6274 cv
161.836 54.7705 li
161.706 54.8164 li
161.573 54.7637 li
161.519 54.6377 li
161.519 54.4907 161.599 54.2915 161.76 54.0405 cv
161.921 53.7896 162.143 53.5923 162.426 53.4482 cv
162.709 53.3042 163 53.2324 163.296 53.2324 cv
163.777 53.2324 164.19 53.3994 164.536 53.7339 cv
164.882 54.0684 165.055 54.4473 165.055 54.8701 cv
165.055 55.0479 165.026 55.2109 164.968 55.3579 cv
164.91 55.5054 164.812 55.667 164.672 55.8428 cv
164.534 56.019 164.285 56.2852 163.924 56.6411 cv
163.021 57.5371 162.285 58.2324 161.717 58.7271 cv
161.717 58.7578 li
cp
f
170.797 55.7788 mo
170.797 56.7344 li
170.797 57.5649 170.599 58.2222 170.203 58.7065 cv
169.894 59.0864 169.503 59.2764 169.032 59.2764 cv
168.804 59.2764 168.59 59.231 168.39 59.1406 cv
168.189 59.0503 168.019 58.9238 167.879 58.7617 cv
167.791 58.6602 167.693 58.498 167.586 58.2744 cv
167.48 58.0508 167.404 57.8452 167.358 57.6582 cv
167.288 57.395 167.251 57.0869 167.251 56.7344 cv
167.251 55.7788 li
167.251 54.9453 167.45 54.2871 167.845 53.8042 cv
168.155 53.4229 168.545 53.2324 169.018 53.2324 cv
169.248 53.2324 169.462 53.2778 169.662 53.3682 cv
169.861 53.4585 170.031 53.585 170.17 53.7471 cv
170.262 53.8516 170.361 54.0156 170.465 54.2393 cv
170.57 54.4629 170.647 54.6665 170.696 54.8501 cv
170.763 55.1138 170.797 55.4233 170.797 55.7788 cv
cp
170.411 55.8296 mo
170.411 55.4648 170.36 55.1255 170.257 54.8105 cv
170.156 54.4956 170.04 54.2446 169.91 54.0576 cv
169.833 53.9517 169.733 53.8594 169.611 53.7803 cv
169.436 53.6729 169.24 53.6191 169.022 53.6191 cv
168.59 53.6201 168.251 53.8418 168.005 54.2837 cv
167.759 54.7256 167.637 55.2412 167.638 55.8296 cv
167.638 56.6797 li
167.638 57.0444 167.69 57.3848 167.792 57.7002 cv
167.894 58.0161 168.011 58.2671 168.142 58.4541 cv
168.215 58.5571 168.314 58.6484 168.438 58.7266 cv
168.613 58.8354 168.811 58.8896 169.032 58.8896 cv
169.461 58.8911 169.798 58.6704 170.043 58.2275 cv
170.289 57.7847 170.411 57.269 170.411 56.6807 cv
170.411 55.8296 li
cp
f
173.909 57.749 mo
175.163 57.749 li
173.795 60.2905 li
173.714 60.4443 173.616 60.521 173.501 60.521 cv
173.309 60.4404 li
173.23 60.2446 li
173.244 60.1431 li
173.909 57.749 li
cp
f
186.185 53.2876 mo
186.185 58.7578 li
187.514 58.7578 li
187.605 58.7578 187.67 58.7754 187.709 58.8105 cv
187.769 58.9512 li
187.709 59.0889 li
187.67 59.126 187.605 59.144 187.514 59.144 cv
184.469 59.144 li
184.377 59.144 184.313 59.126 184.273 59.0889 cv
184.214 58.9512 li
184.273 58.8105 li
184.313 58.7754 184.377 58.7578 184.469 58.7578 cv
185.798 58.7578 li
185.798 53.8257 li
184.54 54.2217 li
184.406 54.251 li
184.28 54.1929 li
184.222 54.0566 li
184.268 53.9272 li
184.419 53.8496 li
186.185 53.2876 li
cp
f
193.426 55.7788 mo
193.426 56.7344 li
193.426 57.5649 193.228 58.2222 192.832 58.7065 cv
192.523 59.0864 192.132 59.2764 191.661 59.2764 cv
191.434 59.2764 191.219 59.231 191.019 59.1406 cv
190.818 59.0503 190.648 58.9238 190.508 58.7617 cv
190.419 58.6602 190.322 58.498 190.215 58.2744 cv
190.109 58.0508 190.033 57.8452 189.987 57.6582 cv
189.917 57.395 189.881 57.0869 189.881 56.7344 cv
189.881 55.7788 li
189.881 54.9453 190.079 54.2871 190.474 53.8042 cv
190.784 53.4229 191.174 53.2324 191.647 53.2324 cv
191.876 53.2324 192.091 53.2778 192.291 53.3682 cv
192.49 53.4585 192.66 53.585 192.799 53.7471 cv
192.891 53.8516 192.99 54.0156 193.094 54.2393 cv
193.199 54.4629 193.276 54.6665 193.325 54.8501 cv
193.392 55.1138 193.426 55.4233 193.426 55.7788 cv
cp
193.04 55.8296 mo
193.04 55.4648 192.989 55.1255 192.886 54.8105 cv
192.785 54.4956 192.668 54.2446 192.539 54.0576 cv
192.461 53.9517 192.362 53.8594 192.24 53.7803 cv
192.065 53.6729 191.869 53.6191 191.651 53.6191 cv
191.219 53.6201 190.88 53.8418 190.634 54.2837 cv
190.388 54.7256 190.266 55.2412 190.267 55.8296 cv
190.267 56.6797 li
190.267 57.0444 190.319 57.3848 190.42 57.7002 cv
190.523 58.0161 190.64 58.2671 190.771 58.4541 cv
190.844 58.5571 190.944 58.6484 191.067 58.7266 cv
191.242 58.8354 191.44 58.8896 191.661 58.8896 cv
192.09 58.8911 192.427 58.6704 192.672 58.2275 cv
192.917 57.7847 193.04 57.269 193.04 56.6807 cv
193.04 55.8296 li
cp
f
196.538 57.749 mo
197.792 57.749 li
196.424 60.2905 li
196.343 60.4443 196.245 60.521 196.13 60.521 cv
195.938 60.4404 li
195.859 60.2446 li
195.873 60.1431 li
196.538 57.749 li
cp
f
209.926 53.9258 mo
209.926 53.751 li
207.155 53.751 li
207.155 54.0903 li
207.155 54.1816 207.137 54.2466 207.101 54.2861 cv
206.961 54.3452 li
206.823 54.2861 li
206.787 54.2466 206.768 54.1816 206.768 54.0903 cv
206.768 53.3643 li
210.313 53.3643 li
210.315 53.9771 li
208.759 58.9546 li
208.672 59.1069 li
208.558 59.144 li
208.42 59.0889 li
208.366 58.9604 li
208.393 58.8311 li
209.926 53.9258 li
cp
f
216.055 55.7788 mo
216.055 56.7344 li
216.055 57.5649 215.857 58.2222 215.46 58.7065 cv
215.152 59.0864 214.761 59.2764 214.29 59.2764 cv
214.063 59.2764 213.849 59.231 213.648 59.1406 cv
213.447 59.0503 213.277 58.9238 213.137 58.7617 cv
213.048 58.6602 212.951 58.498 212.844 58.2744 cv
212.738 58.0508 212.662 57.8452 212.616 57.6582 cv
212.545 57.395 212.51 57.0869 212.51 56.7344 cv
212.51 55.7788 li
212.51 54.9453 212.708 54.2871 213.103 53.8042 cv
213.413 53.4229 213.803 53.2324 214.276 53.2324 cv
214.505 53.2324 214.72 53.2778 214.919 53.3682 cv
215.119 53.4585 215.289 53.585 215.428 53.7471 cv
215.52 53.8516 215.619 54.0156 215.723 54.2393 cv
215.828 54.4629 215.905 54.6665 215.954 54.8501 cv
216.021 55.1138 216.055 55.4233 216.055 55.7788 cv
cp
215.668 55.8296 mo
215.668 55.4648 215.618 55.1255 215.515 54.8105 cv
215.414 54.4956 215.297 54.2446 215.167 54.0576 cv
215.091 53.9517 214.992 53.8594 214.869 53.7803 cv
214.694 53.6729 214.498 53.6191 214.28 53.6191 cv
213.848 53.6201 213.509 53.8418 213.263 54.2837 cv
213.017 54.7256 212.895 55.2412 212.897 55.8296 cv
212.897 56.6797 li
212.897 57.0444 212.948 57.3848 213.05 57.7002 cv
213.152 58.0161 213.269 58.2671 213.401 58.4541 cv
213.474 58.5571 213.573 58.6484 213.697 58.7266 cv
213.872 58.8354 214.069 58.8896 214.29 58.8896 cv
214.719 58.8911 215.056 58.6704 215.301 58.2275 cv
215.546 57.7847 215.668 57.269 215.668 56.6807 cv
215.668 55.8296 li
cp
f
219.167 57.749 mo
220.42 57.749 li
219.053 60.2905 li
218.972 60.4443 218.874 60.521 218.759 60.521 cv
218.567 60.4404 li
218.488 60.2446 li
218.501 60.1431 li
219.167 57.749 li
cp
f
231.98 57.5317 mo
229.416 57.5317 li
229.411 57.085 li
231.566 53.3643 li
232.367 53.3643 li
232.367 57.1455 li
232.689 57.1455 li
232.785 57.1455 232.852 57.1631 232.892 57.1982 cv
232.952 57.3389 li
232.892 57.4766 li
232.852 57.5137 232.785 57.5317 232.689 57.5317 cv
232.367 57.5317 li
232.367 58.7578 li
232.688 58.7578 li
232.784 58.7578 232.851 58.7754 232.891 58.8105 cv
232.952 58.9512 li
232.891 59.0889 li
232.851 59.126 232.784 59.144 232.688 59.144 cv
231.254 59.144 li
231.159 59.144 231.09 59.126 231.05 59.0889 cv
230.991 58.9512 li
231.05 58.8105 li
231.09 58.7754 231.159 58.7578 231.254 58.7578 cv
231.98 58.7578 li
231.98 57.5317 li
cp
231.98 57.1455 mo
231.98 53.751 li
231.787 53.751 li
229.821 57.1455 li
231.98 57.1455 li
cp
f
238.684 55.7788 mo
238.684 56.7344 li
238.684 57.5649 238.486 58.2222 238.089 58.7065 cv
237.781 59.0864 237.39 59.2764 236.918 59.2764 cv
236.692 59.2764 236.478 59.231 236.277 59.1406 cv
236.077 59.0503 235.906 58.9238 235.766 58.7617 cv
235.677 58.6602 235.58 58.498 235.473 58.2744 cv
235.367 58.0508 235.291 57.8452 235.245 57.6582 cv
235.174 57.395 235.139 57.0869 235.139 56.7344 cv
235.139 55.7788 li
235.139 54.9453 235.336 54.2871 235.732 53.8042 cv
236.042 53.4229 236.432 53.2324 236.905 53.2324 cv
237.134 53.2324 237.349 53.2778 237.548 53.3682 cv
237.748 53.4585 237.917 53.585 238.057 53.7471 cv
238.15 53.8516 238.248 54.0156 238.352 54.2393 cv
238.458 54.4629 238.534 54.6665 238.583 54.8501 cv
238.651 55.1138 238.684 55.4233 238.684 55.7788 cv
cp
238.297 55.8296 mo
238.297 55.4648 238.247 55.1255 238.145 54.8105 cv
238.042 54.4956 237.926 54.2446 237.796 54.0576 cv
237.72 53.9517 237.621 53.8594 237.498 53.7803 cv
237.323 53.6729 237.126 53.6191 236.91 53.6191 cv
236.477 53.6201 236.138 53.8418 235.892 54.2837 cv
235.646 54.7256 235.524 55.2412 235.526 55.8296 cv
235.526 56.6797 li
235.526 57.0444 235.577 57.3848 235.679 57.7002 cv
235.781 58.0161 235.898 58.2671 236.03 58.4541 cv
236.103 58.5571 236.202 58.6484 236.326 58.7266 cv
236.5 58.8354 236.698 58.8896 236.918 58.8896 cv
237.348 58.8911 237.686 58.6704 237.93 58.2275 cv
238.175 57.7847 238.297 57.269 238.297 56.6807 cv
238.297 55.8296 li
cp
f
242.39 59.9458 mo
242.39 53.751 li
241.457 53.751 li
241.366 53.751 241.3 53.7329 241.26 53.6963 cv
241.202 53.5601 li
241.26 53.4189 li
241.3 53.3828 241.366 53.3643 241.457 53.3643 cv
242.776 53.3643 li
242.776 60.332 li
241.457 60.332 li
241.366 60.332 241.3 60.3145 241.26 60.2793 cv
241.202 60.1392 li
241.26 60.001 li
241.3 59.9639 241.366 59.9458 241.457 59.9458 cv
242.39 59.9458 li
cp
f
113.353 18.0617 mo
70.4953 43.7765 li
70.2923 43.8983 70.2265 44.1616 70.3483 44.3645 cv
70.4701 44.5675 70.7334 44.6333 70.9363 44.5115 cv
113.794 18.7967 li
113.997 18.6749 114.063 18.4117 113.941 18.2087 cv
113.819 18.0057 113.556 17.9399 113.353 18.0617 cv
.746 .676 .668 .898 cmyk
f
64.209 47.3706 mo
71.4136 46.0542 li
68.772 41.6416 li
64.209 47.3706 li
cp
f
64.209 47.3706 mo
64.286 47.7922 li
72.0989 46.3646 li
68.822 40.8908 li
63.1617 47.9976 li
64.286 47.7922 li
64.209 47.3706 li
64.5442 47.6376 li
68.7219 42.3924 li
70.7282 45.7437 li
64.132 46.949 li
64.209 47.3706 li
64.5442 47.6376 li
64.209 47.3706 li
cp
f
139.061 18.7926 mo
180.205 44.5075 li
180.406 44.6329 180.67 44.5719 180.796 44.3712 cv
180.921 44.1705 180.86 43.9061 180.659 43.7806 cv
139.516 18.0658 li
139.315 17.9403 139.051 18.0013 138.925 18.2021 cv
138.8 18.4028 138.861 18.6672 139.061 18.7926 cv
f
186.053 47.3315 mo
181.635 41.4907 li
178.884 45.8364 li
186.053 47.3315 li
cp
f
186.053 47.3315 mo
186.395 47.073 li
181.604 40.7389 li
178.191 46.1297 li
187.084 47.9844 li
186.395 47.073 li
186.053 47.3315 li
186.141 46.912 li
179.577 45.5431 li
181.667 42.2425 li
185.711 47.5901 li
186.053 47.3315 li
186.141 46.912 li
186.053 47.3315 li
cp
f
49.7155 64.7158 mo
49.7155 86.1445 li
49.7155 86.3812 49.9073 86.5731 50.144 86.5731 cv
50.3807 86.5731 50.5726 86.3812 50.5726 86.1445 cv
50.5726 64.7158 li
50.5726 64.4791 50.3807 64.2872 50.144 64.2872 cv
49.9073 64.2872 49.7155 64.4791 49.7155 64.7158 cv
f
49.687 92.6587 mo
52.2632 85.8042 li
47.1206 85.7998 li
49.687 92.6587 li
cp
f
49.687 92.6587 mo
50.0882 92.8095 li
52.8819 85.3762 li
46.5024 85.3707 li
49.6861 93.8793 li
50.0882 92.8095 li
49.687 92.6587 li
50.0884 92.5085 li
47.7388 86.2289 li
51.6444 86.2322 li
49.2858 92.5079 li
49.687 92.6587 li
50.0884 92.5085 li
49.687 92.6587 li
cp
f
62.7837 111.372 mo
106.499 137.086 li
106.703 137.206 106.966 137.138 107.086 136.934 cv
107.206 136.73 107.138 136.467 106.934 136.347 cv
63.2183 110.633 li
63.0143 110.513 62.7516 110.581 62.6316 110.785 cv
62.5116 110.989 62.5797 111.252 62.7837 111.372 cv
f
112.266 139.944 mo
107.708 134.213 li
105.062 138.623 li
112.266 139.944 li
cp
f
112.266 139.944 mo
112.601 139.678 li
107.658 133.462 li
104.376 138.933 li
113.312 140.572 li
112.601 139.678 li
112.266 139.944 li
112.343 139.523 li
105.748 138.313 li
107.757 134.964 li
111.93 140.211 li
112.266 139.944 li
112.343 139.523 li
112.266 139.944 li
cp
f
199.718 64.7158 mo
199.718 86.1445 li
199.718 86.3812 199.91 86.5731 200.147 86.5731 cv
200.384 86.5731 200.576 86.3812 200.576 86.1445 cv
200.576 64.7158 li
200.576 64.4791 200.384 64.2872 200.147 64.2872 cv
199.91 64.2872 199.718 64.4791 199.718 64.7158 cv
f
200.001 92.6587 mo
202.6 85.8125 li
197.458 85.7915 li
200.001 92.6587 li
cp
f
200.001 92.6587 mo
200.402 92.8108 li
203.22 85.3864 li
196.841 85.3604 li
199.997 93.8793 li
200.402 92.8108 li
200.001 92.6587 li
200.403 92.5098 li
198.074 86.2226 li
201.98 86.2385 li
199.601 92.5066 li
200.001 92.6587 li
200.403 92.5098 li
200.001 92.6587 li
cp
f
187.92 110.639 mo
146.775 136.353 li
146.575 136.479 146.514 136.743 146.639 136.944 cv
146.764 137.145 147.029 137.206 147.23 137.08 cv
188.374 111.366 li
188.575 111.24 188.636 110.976 188.51 110.775 cv
188.385 110.575 188.121 110.514 187.92 110.639 cv
f
140.841 139.904 mo
148.011 138.416 li
145.264 134.067 li
140.841 139.904 li
cp
f
140.841 139.904 mo
140.928 140.324 li
148.704 138.71 li
145.296 133.316 li
139.81 140.556 li
140.928 140.324 li
140.841 139.904 li
141.183 140.163 li
145.232 134.819 li
147.319 138.122 li
140.754 139.485 li
140.841 139.904 li
141.183 140.163 li
140.841 139.904 li
cp
f
56.7383 75.4517 mo
56.7383 76.8848 li
56.5874 76.8848 li
56.4712 76.4355 56.3223 76.1299 56.1401 75.9678 cv
55.958 75.8057 55.7266 75.7251 55.4453 75.7251 cv
55.2314 75.7251 55.0586 75.7817 54.9268 75.895 cv
54.7954 76.0083 54.73 76.1343 54.73 76.272 cv
54.73 76.4438 54.7783 76.5908 54.875 76.7134 cv
54.9688 76.8394 55.1616 76.9727 55.4531 77.1138 cv
56.1245 77.4399 li
56.7476 77.7437 57.0586 78.144 57.0586 78.6411 cv
57.0586 79.0249 56.9136 79.334 56.624 79.5684 cv
56.334 79.8032 56.0093 79.9209 55.6504 79.9209 cv
55.3926 79.9209 55.0981 79.876 54.7671 79.7861 cv
54.6655 79.7563 54.583 79.7417 54.5186 79.7417 cv
54.3525 79.8545 li
54.2017 79.8545 li
54.2017 78.3462 li
54.3525 78.3462 li
54.439 78.7769 54.603 79.1016 54.8457 79.3198 cv
55.0884 79.5381 55.3604 79.6475 55.6611 79.6475 cv
55.873 79.6475 56.0459 79.585 56.1792 79.4609 cv
56.313 79.3369 56.3799 79.1875 56.3799 79.0132 cv
56.3799 78.8018 56.3052 78.624 56.1553 78.48 cv
56.0059 78.3359 55.7085 78.1543 55.2632 77.9346 cv
54.8179 77.7153 54.5264 77.5161 54.3892 77.3379 cv
54.2515 77.1626 54.1831 76.9414 54.1831 76.6738 cv
54.1831 76.3262 54.3018 76.0356 54.5391 75.8022 cv
54.7769 75.5684 55.084 75.4517 55.4609 75.4517 cv
55.6265 75.4517 55.8271 75.4878 56.0635 75.5601 cv
56.2197 75.6069 56.3237 75.6309 56.376 75.6309 cv
56.4907 75.5977 li
56.5874 75.4517 li
56.7383 75.4517 li
cp
0 0 0 1 cmyk
f
59.7598 75.4517 mo
60.3989 75.4517 60.9121 75.6938 61.2988 76.1787 cv
61.6274 76.5928 61.792 77.0684 61.792 77.6055 cv
61.792 77.9829 61.7012 78.3652 61.52 78.7515 cv
61.3389 79.1382 61.0894 79.4297 60.7715 79.626 cv
60.4536 79.8223 60.0996 79.9209 59.7095 79.9209 cv
59.0732 79.9209 58.5679 79.6675 58.1934 79.1611 cv
57.877 78.7349 57.7188 78.2559 57.7188 77.7251 cv
57.7188 77.3384 57.8149 76.9541 58.0068 76.5723 cv
58.1987 76.1904 58.4517 75.9077 58.7646 75.7256 cv
59.0781 75.543 59.4097 75.4517 59.7598 75.4517 cv
cp
59.6172 75.7529 mo
59.4546 75.7529 59.291 75.8013 59.127 75.8979 cv
58.9629 75.9946 58.8301 76.1636 58.7285 76.4058 cv
58.6274 76.6479 58.5767 76.959 58.5767 77.3389 cv
58.5767 77.9517 58.6987 78.48 58.9429 78.9243 cv
59.187 79.3687 59.5083 79.5908 59.9072 79.5908 cv
60.2051 79.5908 60.4507 79.4683 60.644 79.2231 cv
60.8374 78.978 60.9341 78.5566 60.9341 77.959 cv
60.9341 77.2114 60.7729 76.6235 60.4507 76.1943 cv
60.2329 75.9004 59.9551 75.7529 59.6172 75.7529 cv
cp
f
63.6401 75.4517 mo
63.6401 76.4038 li
63.9907 75.769 64.3501 75.4517 64.7188 75.4517 cv
64.8867 75.4517 65.0254 75.5029 65.1348 75.6064 cv
65.2446 75.7095 65.2993 75.8291 65.2993 75.9644 cv
65.2993 76.0845 65.2603 76.1865 65.1812 76.2695 cv
65.1021 76.3525 65.0078 76.3945 64.8984 76.3945 cv
64.7925 76.3945 64.6729 76.3408 64.54 76.2339 cv
64.4072 76.127 64.3086 76.0737 64.2446 76.0737 cv
64.0659 76.166 li
63.9287 76.2925 63.7866 76.501 63.6401 76.7905 cv
63.6401 78.8081 li
63.6401 79.043 63.6689 79.2207 63.7275 79.3413 cv
63.7671 79.4248 63.8374 79.4937 63.939 79.5474 cv
64.04 79.6016 64.1855 79.6284 64.3755 79.6284 cv
64.3755 79.7979 li
62.2163 79.7979 li
62.2163 79.6284 li
62.4302 79.6284 62.5894 79.5947 62.6929 79.5273 cv
62.7695 79.478 62.8228 79.3999 62.8535 79.2925 cv
62.8687 79.2402 62.8765 79.0913 62.8765 78.8457 cv
62.8765 77.2148 li
62.8765 76.7246 62.8662 76.4331 62.8462 76.3394 cv
62.8267 76.2461 62.79 76.1777 62.7363 76.1348 cv
62.5366 76.0708 li
62.4414 76.0708 62.3345 76.0938 62.2153 76.1396 cv
62.1689 75.9702 li
63.4463 75.4517 li
63.6401 75.4517 li
cp
f
66.7705 74.188 mo
66.7705 75.5742 li
67.7554 75.5742 li
67.7554 75.8853 li
66.7705 75.8945 li
66.7705 78.6309 li
66.7705 78.9043 66.8096 79.0889 66.8877 79.1841 cv
66.9658 79.2793 67.0664 79.3267 67.189 79.3267 cv
67.29 79.3267 67.3882 79.2949 67.4829 79.2314 cv
67.5781 79.1675 67.6519 79.0737 67.7036 78.9497 cv
67.8828 78.9497 li
67.7754 79.2529 67.6235 79.481 67.4268 79.6343 cv
67.23 79.7876 67.0269 79.8643 66.8179 79.8643 cv
66.6768 79.8643 66.5386 79.8247 66.4033 79.7461 cv
66.2681 79.6675 66.168 79.5552 66.1035 79.4087 cv
66.0391 79.2627 66.0068 79.0371 66.0068 78.7319 cv
66.0068 75.8853 li
65.3374 75.8853 li
65.3374 75.7383 li
65.5068 75.6714 65.6797 75.5586 65.8569 75.3989 cv
66.0342 75.2393 66.1924 75.0493 66.332 74.8281 cv
66.4028 74.7114 66.502 74.498 66.6289 74.188 cv
66.7705 74.188 li
cp
f
208.249 75.1592 mo
208.249 76.5923 li
208.098 76.5923 li
207.982 76.1431 207.833 75.8374 207.651 75.6758 cv
207.469 75.5137 207.237 75.4326 206.956 75.4326 cv
206.742 75.4326 206.569 75.4893 206.438 75.6025 cv
206.306 75.7163 206.241 75.8418 206.241 75.9795 cv
206.241 76.1514 206.289 76.2988 206.386 76.4209 cv
206.48 76.5469 206.672 76.6802 206.963 76.8213 cv
207.635 77.1479 li
208.258 77.4517 208.57 77.8521 208.57 78.3486 cv
208.57 78.7324 208.424 79.0415 208.134 79.2764 cv
207.844 79.5112 207.52 79.6284 207.162 79.6284 cv
206.904 79.6284 206.609 79.5835 206.278 79.4941 cv
206.176 79.4644 206.093 79.4492 206.029 79.4492 cv
205.864 79.5625 li
205.712 79.5625 li
205.712 78.0537 li
205.864 78.0537 li
205.95 78.4844 206.114 78.8091 206.356 79.0273 cv
206.599 79.2456 206.871 79.355 207.171 79.355 cv
207.383 79.355 207.556 79.293 207.69 79.1689 cv
207.824 79.0449 207.891 78.8955 207.891 78.7207 cv
207.891 78.5093 207.816 78.3315 207.667 78.1875 cv
207.516 78.0439 207.219 77.8618 206.774 77.6426 cv
206.329 77.4229 206.038 77.2236 205.9 77.0454 cv
205.762 76.8701 205.694 76.6489 205.694 76.3813 cv
205.694 76.0342 205.812 75.7437 206.05 75.5098 cv
206.288 75.2759 206.595 75.1592 206.972 75.1592 cv
207.137 75.1592 207.338 75.1953 207.574 75.2676 cv
207.73 75.3149 207.834 75.3384 207.886 75.3384 cv
208.001 75.3052 li
208.098 75.1592 li
208.249 75.1592 li
cp
f
211.271 75.1592 mo
211.91 75.1592 212.422 75.4014 212.81 75.8862 cv
213.138 76.3008 213.303 76.7764 213.303 77.313 cv
213.303 77.6904 213.212 78.0728 213.031 78.4595 cv
212.849 78.8457 212.6 79.1377 212.282 79.334 cv
211.964 79.5303 211.61 79.6284 211.22 79.6284 cv
210.584 79.6284 210.079 79.375 209.704 78.8691 cv
209.387 78.4424 209.23 77.9639 209.23 77.4331 cv
209.23 77.0464 209.326 76.6621 209.517 76.2803 cv
209.709 75.8979 209.962 75.6157 210.276 75.4331 cv
210.588 75.2505 210.92 75.1592 211.271 75.1592 cv
cp
211.128 75.4609 mo
210.965 75.4609 210.802 75.5093 210.637 75.6055 cv
210.473 75.7021 210.34 75.8716 210.24 76.1133 cv
210.138 76.3555 210.087 76.6665 210.087 77.0464 cv
210.087 77.6592 210.209 78.1875 210.454 78.6318 cv
210.698 79.0762 211.019 79.2983 211.418 79.2983 cv
211.715 79.2983 211.961 79.1758 212.155 78.9307 cv
212.348 78.6855 212.445 78.2646 212.445 77.667 cv
212.445 76.9194 212.284 76.3311 211.961 75.9023 cv
211.744 75.6079 211.465 75.4609 211.128 75.4609 cv
cp
f
215.151 75.1592 mo
215.151 76.1113 li
215.501 75.4766 215.861 75.1592 216.23 75.1592 cv
216.397 75.1592 216.536 75.2109 216.646 75.314 cv
216.755 75.417 216.81 75.5366 216.81 75.6724 cv
216.81 75.7925 216.771 75.894 216.692 75.9771 cv
216.613 76.0605 216.519 76.1021 216.41 76.1021 cv
216.303 76.1021 216.183 76.0488 216.05 75.9419 cv
215.917 75.835 215.82 75.7813 215.755 75.7813 cv
215.577 75.874 li
215.439 76.0005 215.297 76.2085 215.151 76.498 cv
215.151 78.5156 li
215.151 78.751 215.18 78.9287 215.238 79.0488 cv
215.278 79.1323 215.348 79.2012 215.45 79.2554 cv
215.55 79.3091 215.696 79.3359 215.886 79.3359 cv
215.886 79.5059 li
213.727 79.5059 li
213.727 79.3359 li
213.941 79.3359 214.1 79.3022 214.204 79.2349 cv
214.28 79.1855 214.333 79.1074 214.364 79 cv
214.379 78.9478 214.387 78.7988 214.387 78.5537 cv
214.387 76.9224 li
214.387 76.4321 214.377 76.1406 214.357 76.0474 cv
214.337 75.9541 214.3 75.8857 214.247 75.8428 cv
214.047 75.7783 li
213.953 75.7783 213.845 75.8013 213.726 75.8477 cv
213.68 75.6777 li
214.958 75.1592 li
215.151 75.1592 li
cp
f
218.281 73.8955 mo
218.281 75.2817 li
219.266 75.2817 li
219.266 75.5928 li
218.281 75.6025 li
218.281 78.3389 li
218.281 78.6123 218.32 78.7964 218.398 78.8916 cv
218.477 78.9868 218.577 79.0342 218.7 79.0342 cv
218.8 79.0342 218.899 79.0024 218.994 78.939 cv
219.088 78.875 219.163 78.7813 219.214 78.6572 cv
219.394 78.6572 li
219.287 78.9604 219.134 79.189 218.937 79.3418 cv
218.741 79.4951 218.538 79.5718 218.329 79.5718 cv
218.187 79.5718 218.049 79.5327 217.914 79.4541 cv
217.779 79.3755 217.678 79.2627 217.614 79.1167 cv
217.549 78.9702 217.517 78.7446 217.517 78.4395 cv
217.517 75.5928 li
216.848 75.5928 li
216.848 75.4463 li
217.017 75.3794 217.191 75.2661 217.368 75.1064 cv
217.544 74.9473 217.704 74.7568 217.842 74.5356 cv
217.914 74.4189 218.013 74.2061 218.14 73.8955 cv
218.281 73.8955 li
cp
f
116.724 127.269 mo
117.029 126.96 117.209 126.783 117.264 126.736 cv
117.401 126.619 117.549 126.528 117.708 126.464 cv
117.867 126.398 118.024 126.367 118.18 126.367 cv
118.442 126.367 118.668 126.443 118.857 126.598 cv
119.046 126.752 119.173 126.976 119.237 127.269 cv
119.554 126.898 119.822 126.656 120.04 126.54 cv
120.258 126.425 120.483 126.367 120.713 126.367 cv
120.938 126.367 121.137 126.424 121.311 126.539 cv
121.484 126.655 121.622 126.844 121.723 127.104 cv
121.791 127.283 121.825 127.563 121.825 127.943 cv
121.825 129.762 li
121.825 130.023 121.844 130.203 121.883 130.301 cv
122.05 130.473 li
122.131 130.52 122.264 130.544 122.447 130.544 cv
122.447 130.713 li
120.382 130.713 li
120.382 130.544 li
120.47 130.544 li
120.65 130.544 120.791 130.509 120.892 130.438 cv
120.962 130.39 121.012 130.312 121.043 130.205 cv
121.055 130.153 121.061 130.006 121.061 129.762 cv
121.061 127.945 li
121.061 127.602 121.02 127.359 120.937 127.218 cv
120.816 127.021 120.624 126.923 120.359 126.923 cv
120.196 126.923 120.032 126.964 119.868 127.045 cv
119.703 127.127 119.503 127.277 119.27 127.499 cv
119.26 127.549 li
119.279 127.748 li
119.279 129.762 li
119.279 130.048 119.295 130.227 119.327 130.297 cv
119.507 130.473 li
119.595 130.52 119.746 130.544 119.958 130.544 cv
119.958 130.713 li
117.836 130.713 li
117.836 130.544 li
118.067 130.544 118.226 130.516 118.313 130.461 cv
118.399 130.406 118.459 130.324 118.493 130.214 cv
118.508 130.162 118.516 130.012 118.516 129.762 cv
118.516 127.945 li
118.516 127.602 118.465 127.354 118.364 127.201 cv
118.23 127.004 118.042 126.904 117.801 126.904 cv
117.636 126.904 117.472 126.949 117.311 127.039 cv
117.057 127.176 116.861 127.328 116.724 127.499 cv
116.724 129.762 li
116.724 130.035 116.743 130.215 116.781 130.297 cv
116.95 130.482 li
117.024 130.523 117.175 130.544 117.403 130.544 cv
117.403 130.713 li
115.319 130.713 li
115.319 130.544 li
115.513 130.544 115.648 130.523 115.725 130.482 cv
115.9 130.285 li
115.94 130.195 115.96 130.021 115.96 129.762 cv
115.96 128.148 li
115.96 127.686 115.946 127.388 115.919 127.252 cv
115.897 127.151 115.864 127.082 115.818 127.043 cv
115.629 126.986 li
115.544 126.986 115.441 127.009 115.322 127.055 cv
115.253 126.885 li
116.526 126.367 li
116.724 126.367 li
116.724 127.269 li
cp
f
123.503 128.083 mo
123.5 128.706 123.652 129.195 123.959 129.55 cv
124.266 129.904 124.627 130.082 125.041 130.082 cv
125.317 130.082 125.558 130.006 125.762 129.855 cv
125.966 129.705 126.137 129.444 126.275 129.072 cv
126.417 129.165 li
126.352 129.59 126.165 129.975 125.855 130.318 cv
125.546 130.664 125.158 130.836 124.692 130.836 cv
124.187 130.836 123.753 130.639 123.393 130.245 cv
123.033 129.852 122.853 129.322 122.853 128.656 cv
122.853 127.936 123.038 127.375 123.407 126.971 cv
123.776 126.568 124.24 126.367 124.798 126.367 cv
125.27 126.367 125.658 126.522 125.961 126.834 cv
126.265 127.145 126.417 127.562 126.417 128.083 cv
123.503 128.083 li
cp
123.503 127.818 mo
125.455 127.818 li
125.439 127.549 125.408 127.359 125.358 127.248 cv
125.282 127.077 125.167 126.941 125.015 126.844 cv
124.863 126.746 124.705 126.697 124.539 126.697 cv
124.284 126.697 124.056 126.796 123.855 126.993 cv
123.654 127.191 123.537 127.467 123.503 127.818 cv
cp
f
128.227 126.367 mo
128.227 127.318 li
128.578 126.684 128.937 126.367 129.306 126.367 cv
129.474 126.367 129.612 126.418 129.722 126.521 cv
129.832 126.625 129.887 126.744 129.887 126.88 cv
129.887 127 129.847 127.102 129.768 127.186 cv
129.689 127.268 129.595 127.31 129.486 127.31 cv
129.379 127.31 129.26 127.256 129.127 127.149 cv
128.994 127.043 128.896 126.989 128.832 126.989 cv
128.653 127.082 li
128.516 127.208 128.374 127.416 128.227 127.706 cv
128.227 129.724 li
128.227 129.959 128.256 130.137 128.314 130.257 cv
128.354 130.34 128.425 130.408 128.526 130.463 cv
128.627 130.517 128.772 130.544 128.962 130.544 cv
128.962 130.713 li
126.803 130.713 li
126.803 130.544 li
127.017 130.544 127.176 130.51 127.28 130.442 cv
127.356 130.394 127.41 130.314 127.44 130.207 cv
127.456 130.155 127.463 130.007 127.463 129.762 cv
127.463 128.13 li
127.463 127.641 127.453 127.348 127.434 127.255 cv
127.414 127.162 127.377 127.094 127.323 127.051 cv
127.124 126.986 li
127.029 126.986 126.921 127.009 126.802 127.055 cv
126.756 126.885 li
128.033 126.367 li
128.227 126.367 li
cp
f
131.091 129.166 mo
130.833 129.041 130.636 128.865 130.499 128.64 cv
130.361 128.414 130.292 128.166 130.292 127.893 cv
130.292 127.477 130.449 127.117 130.763 126.817 cv
131.077 126.518 131.479 126.367 131.968 126.367 cv
132.369 126.367 132.717 126.465 133.011 126.659 cv
133.902 126.659 li
134.034 126.659 134.11 126.663 134.131 126.67 cv
134.177 126.71 li
134.205 126.857 li
134.182 127.023 li
134.133 127.061 li
134.111 127.069 134.033 127.074 133.901 127.074 cv
133.353 127.074 li
133.525 127.295 133.611 127.576 133.611 127.92 cv
133.611 128.313 133.461 128.648 133.161 128.928 cv
132.861 129.207 132.458 129.346 131.954 129.346 cv
131.746 129.346 131.533 129.315 131.315 129.254 cv
131.181 129.371 131.089 129.474 131.042 129.561 cv
130.971 129.785 li
131.047 129.938 li
131.098 129.986 131.197 130.022 131.344 130.044 cv
131.43 130.057 131.645 130.068 131.989 130.078 cv
132.621 130.096 133.031 130.118 133.218 130.147 cv
133.504 130.188 133.732 130.293 133.902 130.465 cv
134.073 130.638 134.158 130.85 134.158 131.102 cv
134.158 131.448 133.996 131.773 133.67 132.078 cv
133.191 132.525 132.567 132.75 131.797 132.75 cv
131.206 132.75 130.706 132.616 130.297 132.35 cv
130.067 132.195 129.953 132.035 129.953 131.87 cv
130.003 131.648 li
130.055 131.535 130.163 131.377 130.325 131.174 cv
130.346 131.146 130.503 130.98 130.794 130.676 cv
130.635 130.58 130.522 130.494 130.457 130.419 cv
130.391 130.344 130.358 130.258 130.358 130.162 cv
130.358 130.055 130.401 129.928 130.488 129.782 cv
130.576 129.637 130.776 129.432 131.091 129.166 cv
cp
131.892 126.594 mo
131.666 126.594 131.476 126.684 131.323 126.863 cv
131.17 127.044 131.093 127.32 131.093 127.693 cv
131.093 128.177 131.197 128.551 131.405 128.817 cv
131.564 129.02 131.766 129.12 132.011 129.12 cv
132.244 129.12 132.435 129.033 132.584 128.858 cv
132.734 128.684 132.81 128.41 132.81 128.037 cv
132.81 127.552 132.704 127.171 132.493 126.896 cv
132.337 126.693 132.136 126.594 131.892 126.594 cv
cp
131.047 130.713 mo
130.904 130.869 130.795 131.016 130.722 131.15 cv
130.649 131.285 130.612 131.409 130.612 131.522 cv
130.612 131.67 130.701 131.799 130.879 131.908 cv
131.185 132.099 131.627 132.193 132.206 132.193 cv
132.757 132.193 133.164 132.096 133.425 131.901 cv
133.688 131.707 133.818 131.498 133.818 131.277 cv
133.818 131.118 133.74 131.004 133.584 130.938 cv
133.425 130.869 133.109 130.83 132.637 130.817 cv
131.948 130.799 131.418 130.765 131.047 130.713 cv
cp
f
135.383 128.083 mo
135.38 128.706 135.533 129.195 135.839 129.55 cv
136.146 129.904 136.507 130.082 136.921 130.082 cv
137.198 130.082 137.438 130.006 137.642 129.855 cv
137.846 129.705 138.017 129.444 138.156 129.072 cv
138.297 129.165 li
138.233 129.59 138.045 129.975 137.736 130.318 cv
137.426 130.664 137.039 130.836 136.573 130.836 cv
136.067 130.836 135.633 130.639 135.273 130.245 cv
134.913 129.852 134.733 129.322 134.733 128.656 cv
134.733 127.936 134.917 127.375 135.287 126.971 cv
135.657 126.568 136.121 126.367 136.678 126.367 cv
137.15 126.367 137.538 126.522 137.841 126.834 cv
138.145 127.145 138.297 127.562 138.297 128.083 cv
135.383 128.083 li
cp
135.383 127.818 mo
137.335 127.818 li
137.32 127.549 137.288 127.359 137.239 127.248 cv
137.162 127.077 137.047 126.941 136.896 126.844 cv
136.744 126.746 136.584 126.697 136.419 126.697 cv
136.165 126.697 135.937 126.796 135.736 126.993 cv
135.535 127.191 135.417 127.467 135.383 127.818 cv
cp
f
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (011x006.eps)%%CreationDate: 27/05/15 11:20 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^Cp5X9%aIK*S?oK:2RbDK_"0\[rn(^fPsVskkm5N1c0htqf8ZJ-?'7gV8lA7FFK,/lBs]oCV=&h7P+jQT%A^sI(P+#>r+d#Og[*G*BGF?+:#pL)-X1BFKdL(T)8l?DK]V1c$HEYbFqu(DUL*urf>B;JHGMCsQ?mStT]A?+#ej%NFHLeMtDKl,E%/@Fe^?\rlE=+.6Zg<Eg1s'6]n756Fq:m@PE^TD\>kkFt^fj@=nV?pZ+)5Fha+C#1(Hmdk.c<L1Td6']cRuQ6BoQU?HoOn+#]K$t+%NhD\oW0-2ZgO6ee#YP-Cgn-Gg>(^7u5&>@'O',Xt^YAXgpV5)@!r?7;V5/!$jOlun]@X1rS!Z[NT]T8(<;^H[V^51fE@FIH%n&"K%)Gib5*OA>hr2\BGcUr5U=`6.oKL3ZWn@\EYW6:p0#QjfI:X4FDc2M:P2+4R1!FufU*HiCH2QFuI^XfQ;clO;4p*V;.;=AukLM5&H%m9f)S9%%*)THQ:ns5!#Tl9PTo]k6H%H\G\7X=8JD:fX0\.2YYO-Y\618PrNi$:XiUhutZ^K-Ajod%$cF3psI@>+HBQ\La^j%(H,9%L-:3G=UjqQgRgF7IjY%_)N+AR*&]mciJ=DSLGg2>a<.";$8+LSRs"!J6nhInP(o,V:h*+R(HRiXY`=M_CBb]=s!CBg%tV%ioUd\P%Vl%;.Bu4Mnbb26MIq9Lhatc)EAb*3/K=As,RKfTF%=W"0PgVB:V.m=U_eGQ9`\aBJB`bWV?RTKS:^XqQ-^6*ITiAQ2DjJT9Ug/X0%[2M00eMI`lY1;HUX[_.j/LKj2m3+?MVsl$[/gL(A:FHBpJkmcuI:>>cc_*et$"]c"n-T&*PT]E]TAUB36''q;0G->Xbg7U0KRUgG%J3om$:-qZQ5EpbK_'bJHeH!V/#?jl99W1L\"J=aLdW<i_dWX%s;EM7UN=d[,re"+q5PP@TA->K-aYP\]n/"\_s4@SjWfVFuJ+*cZ%TQarEiKLVg+Rf]6TRZH&7ZhWrTe!)aC1KF,/SG"!`f.9c:`W.?\hUdXSs._mb=T<:]`^,102dE##A'QPN&./On2BMgGmaM&:FJ[,%)u<'<6JdDl-j..UU`!gO\O.c8C*;<VGaS".j#1R2i=s-:CgO>#-$1N:,?-&`'"UBPfnclHOg[V+<]e,mhC$XkJ#)1:AeJu.@np])%0\#TAKR`CB:>SR<fke'/(8I)<qh2R!hqS&6DqdCmB"C.JN6:iR5`6I*iGG&&XKAS;XBpLF]IA^>rX\u@W@63p,`+Xgs-!CIF2<A"%?h.PJXf;M5s!@^03r*Xm-3"heq/$tMDM.pi/<VCS?h.R'7"3m?aa].hV*Z<u?h.R38q,NEaa\p8+-G_?G48)CQ2G7/aC!F]8LZ0)%XWjdQ>1"`:H3HL-rC(HNjr=6U7!dWIoh)?<qPP$e>"(bfY#f_I<`'UFU.Q87!";.mphN7D[i4KWn<@7]<<s(cp:\O><<S;:T\heW%T>"#mTP*as[GLuj`M&LD(^'_+B[4)D^^Pq0>9og\2V)7/)d6!@7U+tlF3T8goTAeI`nTo!CQTEmi1DJ49VhWSjsm3__S=EX%B5U3%W>_NcE!ps.6Q'aBhpkU%K\)_._p;'TVTI4N@=>q$;H%-.K=^;L=e>g)/R>VN>-[:/d2%eP_V/MX[NR][p>^U&=dqs/b=0oa)#l''%0h*HGcU?L]P3[%KPn6XT>EQ:?FI[m-MrHr^6U`ceN-CeuchX(.AaKN@^oYK7?'.O"Y"G'f-1kJrn$FJ7Y>W;[R#GF,Hm`iJ()OdA%-DSRQ0ru;TGk`m@Ua1@m-*dPT/8F5T;Mum-?g()/_Hp*?!(ShE_q56ui9tEKZjTJt!dP_uU`)-<8V*"T3<jU;ksHb[As\)eaQetH%<gakq@nIWC:^U4DG=3\)k#-e0()S)ZF+s11c&d%q:=+tc)8qAVe.b%>iE$K'+d;_7_#L3Ji)u]Y@$GaoC*mhTJ7V<;:`Z.Df\3YK%qMj>g8aGSBi_]_+M,c<@7"P&)?kd!i#g[FSc:pcRk^u:d,oOm`23U:SZ[&9b;ULZZ[Oee^0;/bjN?q)n7(0>Qn+%"tO%Ze51R-/o%VKHWI\hUb@,W82TU4Hi=D)mo-<)S>qYc(B@aZEh@BS9;936(?Mp:RJ>G^*CIW\M(e;O<S`4@KO/]n9O,d8SZ`G$:'&lBLo6qj];/%P5\Vr4e\E?Si`d_/^8,mmcFML6Z!=>q8ltW39m5;1G'X-e-$MeSQL'F3L<8`6;]*&/M0fjk#%VCYpNB54,UMenDZngCK*VXfDH8L%lst?0$-u>*ID`9=*cF0UWGD\TUZ#i4Bq\EKIq=Jq-4h`/,f2-AV>.d!-Sg#MefO%%>E;A\5JEq#W_?Ts8/B5g9#GmP.;Ub'KX/7d%ZJQe1<'[l;Z0ETeN&P)WZ1pe'1:TBHIO<LK@-]L:DlFKQBhdYMOfK<,R7U46aD:^<aDDbKbSd4*;B(b\,/HP:.EHeOCLRarFID\H%QKQ4*dGa1"PO,$hpg+XgG6?)a2D5A:`%n&Z)=t5\EsC%e`!R;[oN*CsGKaCc2Y,,R;Rn?Dc#Sf5Tc?"Cre>'BZj7^n&XA'u78&@h%ITFWi;(/.C(.An%K"j_TrW4)8\e[]cb-LsK_r31u?pL*M1JTJG:.8`*Jed-ro'BX[/&CJ)PJ?V\kSs#XeQ=FbkGDAbRNS-!1ftg/%Fm'W,ffql?KEGo6_auk!hiu5EW8DX+aQX0Db/#k^Mqao@G8l<+%1T8U59X.b2.?t<^f`0rFJqE9N=;Q^oE?pI>1.nr2HDVb6/AJ/%c$k9D2\CeMeJFLk_=6)6-f<j1nrGHGj)ng]Ir*&\&B-qWp)Y)@-W12^:S+7?"s]n*gA-jS,6i&u5'-3S*>s+V*_1g=)Zbr%diL;=%f.suJSAC75cOFI4$7;[%1sCk3.pth3=<;r:o7TEo5KO(qJ2T)'QmN$,M46Bt4Z_2rJ##OmDSQXMb%#'[aGdIg%fS&kobj_J8Zs>C%*QlldY^UYCnNY=Z/V:Y_i;YeVc`%XrX:0_e$cl:te8!k5oC]BOW2u#)VMK*.)QVK@\lcP4@&Xe]@oUI"kD8M)M-/l6#-sUL,mg)[%^j/ldolXBl6$@K>MIQHRZ=7<?>b2/49g+UOkODMg?U^qTr>OPM+`H,,&@"2oQ#?u6J`nKu)2*5M(lr+7<3Ykm-D?h"=6?-L[n9>D%PPPHWWtj&\p<W:n\R%(!OQnQQg#0:jDT+>PlZYe(]t52f1bB5FA$uGtT^AA'/dJL1&j*oPr\=2UcuRlF_]_,.X4a6ZoT/Y!ru^dk%Yk8Ut2CX9l\<-P2e4m%iT'BX3anuVu&bMEKR'&5,0(SlpE#7Y9PCLHg'K&4$Uh*hT#qJ=6[o3Y)1=u?V%7ehI6hIZ'K3)bGSB=ga%`\:;o5c(u%q:KQ)p:4f$&S<oq>7A/M!1M![G[<:c'+8J&)`t^WfbY]q%W?P&X\`X"&;XNJYp"P%Fo80Y^fqigL2BB.lNucUgWjeK%+od@p)9pI2XUN^#d1OiLd+tjgk]1D=MSqOuE(4oodW!m!70+qAqjDg'fSDPi%759qVVp3[rW1>T\V;?!K^M8Vh5O]JqTW7%N,%\c%)_EGfa;[n.>9i:)Z.miQrNg;GBCm37;&ripqHifK6be7H"MqXXh/BfP,AASn+.8tAA1EM>L<Iqn7&EG!_^%:3Q_DW0X&ZsG,I(>f%M0-/SJ=R,0>IjV?4&#oqO2FQ(g[9NPB@_;)jLdMNm?-cSq"OAW(R8l\?jfE_#X:&8:YNSId<<;%gY;,.G8$BRU\ib=?M*Q%W*&Wc%ohY0rQq_0@_#ANVgDW!Aoi<^bLoAn-pR=bF&A=$PZG5@:=.8U6rjVheJQ=j^2;?q.LXq(,4,r<D^#'2fIF>9BlMVu_>F5q)J"\64%6mEY[%?#bDfcTht_=/tbLoZ,X!o0OV("J)3a\ob(BacQJjJT?C";[$dr!bR=oTQ-Nn)-!IdI"@o[*D/WFpc5c.0&b7irm-D3URF[%NRgK*\8*SfL]=qh:hfqJd)1>hp2[k&DLM0C^!G9!<s9YkXd[>;3/mP)pM77o)LU<;`'I/`rF,#oh)t^a0Pl1C@0:8W[lOu:Lfh7A%XmLT3?pA5nr3P6q@[t?^)D6;Q+]P(r"Qj:^noCu(29?Na*]X)0h&I[Iqjm/)3qu3c-'>`.d]`Z)*^42"KqnKg1RUlMc<K0he.l.T%800,]\k2>uI61*+%=@sY[SK^jhY`@^m%H(^&El>M;+M`TmiR6o"+bC9'!SS.VNE8<Z+$/m(/V^.05_ruP23k!:7fti9uQh:'dp0k%^R^e>VEn[%^ZNXBihU*b_JmI;i;l9cdqtlk\A1(6,mr]F@4X\8Io.mdj9#0#Vep!L7>XK`0!O5H38ms)%B*.ms,DL9ahfZVPX.0`%8ZO+;m)am+kMs&NJV6b,#7;`3b)=A.#u)<6_F_L&B_IRc\S1tdR&i2L_tn/Lh&?8e$8^bI7CLieer*Z)OCtkLSt7h*(mULOrZ1]]%LWQk`RR6u(s54J^g)Ef/4.5u`Au#%rbrl'X^$N,_\dcTaI5!'3]0`uQU3VN`4A5gg';Ud[!AfR7V).<Y_kH\qGOhNdC*X%ds(PZ-%iHj?gpqJlG\$%E!q?PERY+fO6LF.*biVEIifBoa9?u)HbeVDE1.qhq!%7/sic/HJNl6.4RbUb9(]$C0MhsY^n'j-3ONn$#UkC;%:%^U/M_qp%DIrnX>F$cRS0:>!M<K(%j+hE]jRGlu"T)XphAhl7n>TtqcI)]J6r]FFn1<*6QO]R@6B%5_:&)4,0u$DQ5*DnZ,[TqOLE%BU#_#=rGgUpOM&q?QRk@?#m@jh?e+4B"g'GIet,o]AKYQKt0*7s1?1aqCjrMpqb*[dCP,.E:@f5*:tBjKcS4p!n;G4Y!et:dH\,n%`Obj5,8K*o;.aJd-.csdpTN'5peg#M@,G)Ps%+i!+Ue:oP9hE8S:)Kls6'EL"rt!SDuZG+J%-`dh;A39';sF[/,SDeq9UHlH%FJp%s0o5DQ]1f'Zo;$+j1hWRIs^kN5HVrp1UKZ8MT/._Q%)qtB]DU0p"=/0I"n-FU*eqI_u.!K*GbUe^L"N>A0)dKhhNJl0t`:cJ,GXT%D6sEF&nQuCe,RU6mIV+<PT%jO+F#I?_2`hkptDkE)p(%[1+(=I8WaG=1.`qjC(3ODd69AH1f]f@s,ph2U`]O^,=Eq`Wr\qA)mWJ,%Kq$6Xc<p7\\J6s\bn_+T+]4ba^eVJCcL@pg^?D/Nf`TA[F4))9i!'$XZ=lrXg.ChY,m\Z!7G:i^S[<80%""-O8&Jn]0c$pmZj+3e%rU7XMs,0"d%7<eR\uB_p`D+;8jnscJ+SS$>VaM>BZ=[R?H#oja0adR<%6>1aS%Xef.rTQa;!#;QTUfK.MFOo?,2JpD*P1+.[p(c.%(O)(^hdP,o:,3]g3^T3hc,"$`!&KkQ3*,)bX[;U7$=NR0bdI=LZepB80PtJm<:`F_i.TofEOYYrDDUFfCA%n2.Hi2qHC?*/Zo-Xm%+QV!9K-]?_)^G,7VY`Gk[lVdp@+aps0bGT)i4Q8sWaFZ?g8uEj"[mq@Ml,25C+[>;e(Te)Vi0cpmHef7<E/o(Q^dAc)4B+MG^GdX%[Cb8onb`3Vl/iBr$4NF(AX*X.:n98na1S\T(TIZKp1q?In%:@mAXJ2h0GGg+R`W9<L9B3m#?WPXi>IhhrcH-%]N9Th_YO1"$+9Q6%12L"]W?7J8)A$*#m^o23\f\iLU)_4R7UX9:ruG8M/>22En.]51n>RJSfO2?D]#CJWnG-;%9tR4e8.?E1)>Xh"qPrCd%6i1h`l/2b%oI`J'.$5(VQ3?8SJuRm%Tpmc5>]b>JqgLB,MI3aq/[@!N5-,9a_/J:`N;jfoMKV(@k'q0KrZJ"bmT7]'DqtoP.Ai!D.Z7J@R_\RU%3Q9A;BHrF\CndWB(a^5,)i&KR,<#\DLadL.?2`q$SEthgM_'j]/HceqW=;7ue_ch7c:9t'0^aduZnDeh^%Ptp6]n-`JW7^p#"!?5%'njs.S$4mI<tdC)(GGR,?<jm*p@;7=B5($4#*O\h3<:<B(Zj`G.^\fLgM\nfUBXu/E7>mh*qO,H[9%3@>5rHJ;-!(0D]$lKS?XAt%am-unnc0@Wlm.-V=a18,D/e1B$%:pfAMcD`3$aBDWOL]e2d4Q6^e0PH(KP0Qn4Sn4@eCGME_J'?F5D'I+W'H?_04!/]oVWcr+ipt%CinRlo=oo)U1+FX%\/0q^[q/iB6Ig0pt>"HIBdi>hnK-iEa!^jJr$L&MdnR)/t,:iAF4X=X=0R[LWo2^EDi#X7:2?],XG6JZD69t%8CcPj<kB7%]PmGR4!;Z^kr8Hk4B[0//IS]sQ`kTo?/*+?@m*_GR<F2_8s=kAS[X\)bmpi8dWl^IUB?S;^V,#-`0#*Ukk5q0+U&'Y%(uDk'@t=u;!?YR>gHdW78Gn1W\nF[\Y#]sC,,`OmIX7:G]1_FhG<q"(m`>Gl1Ant@Ns[$8_HDm4*q#bpE26\o(ggJMs/8*i/;.[q%`%,hYA\MS^&,7_*?KF5mO1N#Aa/@:"$R?MTTMNIpIl6![8DZGGr8@>"D6pd21toYBHe0%j^;XofTQu\>KI/mk%tl9d?:HR([lqtA%V2*l5jK`W5kdW`RIo4P$3^RhheIbDXXc?6/d;!UuKEE3tomRHn6b,CiA']X\ERA+k")48!!.dOQmWSb$P2-`(Ye6e.G.>qI#E@!1%:3cHl:\PUKLZ*HjkE\"LM?haahB'+[9]\]gK;^\4:&<:]!#lV>8E!B4SjWP/Dr`)6e?8Q:Imkn)5V4BB7!:NDlfP2-;458T>:2s$%O>=NCgYZ6M`k,4QE5,Q16d'n4os+N/:'Xb\di!m^([9>_BQ+Ios7JRfrVp;W:VUr+5$5&^&;9G"h?kI@_L\c(AXVuSFb`8[,q<U:%h[g!H\Ir_f5RH5]qLD8>#XpbCdE>Fqb.Z5Gp)o$Jk+MCp$);%7f?`L%UHsh=Kg*,oR%dB]s$SBW0.7#IZfP2adX4OtXH@o/4'Cem%XkjR#0^*Y+HjmjG'LILWE0.4i,H86q>aWu1U(LY[;FY'uD,"OhP$_(XC9$MMm[[n['UPahK<2E_aB_anL?gQ2[V>8<YMihG'VeZ4%jW\)%ART&V\J<Nu0>U%jp)P[0JINgbR30=X(^,,1h0-DerEah.C=V$JNY!OqXDedlA=)h(H1tkBV/SjIlm:MEpMm/PS&PIt^eSn4%So#HATJ$.rmA0NCEObgldr@&aT]IDLK/0NkPj'[>)8Acfpr+*:#*':'!&6J.CA![Gk^<1^JM!kUm3$luQU?rOM9CtD>(S>kEGpOg%K"Vd@iIUeo_TV@6IH8*6#>H=?hhs_n]!%4T_f;U<)W?h"dg2lHO/k'/77r>jWPVdZ2_9L>76Zj-e$YM^PH>=$VZW^54Zc+7_k5cb%m'I[KPU"..p!NDgoD2h=6R4m"LaGRRE3>3VYFSSPb^fe`Ok^e@#OGTf!,rt\';B_XhVC'=8e[R(YV'dk0Da,ZeS@H!/03l=2EusP%I$9f&dhUP^E,'g=%p%f:Md`UUDJjskbatrg/+:@BL@nML>!LJ";d"BY4geNs3(p&G9,h5RWU/$'REBrdd%cs%HtqnijZJei]W%]m%KgSE[XP[W/okLLs4]M^7i".cKntg.D^MLt;6T2;5mJCd<q5)ZmY@XD958A@5S)m&LhqqOc/`q@LHX$C0@)LW"]?]$>GKNpns)9>b%mV93I[IrPUS%)SM41#cK/md-@`CT1gI3k/jHJ2(F)p:]ckq.Ap]eTRg:$%rcC+A!7C8\AT;@C(%jh%DNc@gdiIV.,(3_oSCP&;Yq%:pNS]A,TFOA1_p/8)tV;nR-m9;*brPI-L&Cd*2JVrEdUh#KH5\`cc+R->L7K0X_X/l1ao5'`kbt6=^#'_P:BWh"2\pPs]5`UNq[F%khW'sAO]j+7'DH7PfI%*O-a%hXu)8a<ND_6?[][]?i#gJ_b6UobHKW&I9H-@'TN+-\/,&>\tbYWig4kcCGYR7Kt2*IX4%"997AMb%3d::J.ja5m<@cRPbr)+c[FmQMp"f8C<4RDgC)<^FY=]Jm_+^u?P!3b(SpC!/fUhIOpf=u1GG#rPOnZ0]n0[NgV-1aY,6XUKQIG,<%!PPFR7n.W4DM(u9ZEW7*;rp@'DW=@:jEdr^Q,9V-*Ba$;Y?is0B1FIXGucR;*sKt_T9_-jHn3_Tn)k(gdR;eh/K.VG70b>9"7JiX%oI&b_o-!3rl!Rr[<qNCKO[dm$T@norF5*b!0WMTKbnQ1#/"NYfk]:Cod]llM6LF<JL+<Fqm-^o4S,V[mQMi;8$er4Y/+6*>L#PET%UYiX4V/iY%SBYp!^>:JT>a&dk86LEbPu]!@C5tpTeq=-R=bKB`7k3>/G4A7#Uf"OGce[3*qn'F8V:r$MeYkY,<E]tE(EZ@QV5P/-%mI&<Cet;rhR:iAZWsc4OV>JMY=n&E_IT\X[cH`(d4Su_)dlb4Vb@Wje]isWIpf;_?GtOp:>q+8iX5+Pop3UT3Poe$2bM(P$\p(!a%]c#^"YF`49L03nkp@VOthV>;Z=*hARI==5*I.XN4nb?nO<@P))<r;&\D:Eq_I5$>p6$q:sd\B%?mpjh.4Y(s;>t-U&\$,c&q,5A5%db@EggA9[tXOK45Sk3c^/ltoH.mLOAUr@/Lo_Y^Sdn4!/XD?6pmgeW@\5I$L,I?Fsl%/?0\5IuPF!I.9q9Mh\4YQ4d?_D/cqef7j%kg$B\8r&m/Y+DMPU<eup9=No`;\8*fK?K5g<1:jmU;$+pBm6!<[6/P2]!T%)UQJ/-`Vj@<V<V]rV]<D.9'*UKo"MHY3KX13f+(b1%\GOu52S4otpJPo)X8Z6Nd7RJ8o.KUZFIOp"7(kJDc^N%g:j4PTT=QQHF4\mq;t9b-n*)4P?GBfBWT6RD[kdFD2B%5DV/i"grR98%%:GkLeB'gXe)=FDnc^C7jg@r.,ZFf\cqp^]CcX-OAIb(,,m&)InBsU6BrpJ&*m=V7\VW@dLp%WsclRA]u2L@RXp:B;U[]qX'ZZ\>O%:Yut;9Gd-?V:OoRqG`tfEBem-47=k\Gs&jA/28[(j6:^_[?0s/qG:<t\"A[Wlm;V+chY<RB6_kZnU:7V-'_6=Sl1GoJ(6HKr8'p!%4^D'9TC,:n`f9H9\'F=8JNq-9;tIU3MnVuf`P^<)n'aF6F%5f"=>;,HAQO99<d05^qBG7s8nQWHFQqe,YXtIQo5!bs\T@;H]iaoQ%Np#cgga4h4]q0,uD&r4DO__s^L?7O91>"8gpLW)>j'B"FZPqbj8]*RXI*8MN4nBG7^4.cn,7h"^.T\V\_oFVIFljZGj4"ql&r+t=%5:\J!fq4BBek_U22A"?ML=hlY@>aN%'5%Q\B&%2P*#b@Oj@8#(JkSZ%%]]&Ic)P]jcrtqD,2"kQ"a=V4+ftK3Qe%sn;kH[ig"FPT%qjuF:G.!u\msHWS.d2rW>H(GG5<AP=Pg1(AQu?;ZKh<;3V98TR=/g1=3p.u0bg4VhPn%CjRqJ8JQX'aNpmM#nB9dAD*L15TI4IbI%?'i2RV:IX"*NZut/cp[onDmO4mA#/,B5.OfU%b++`P-tCV;OF_H<7\Db'R-GI5,!o_1F=kYsmYV.G,j]N\PC>XEsf(N]o5,b'/j6%i0'nke*hK.[%'&Oo2NC`js>s^8bJ;<*L.EeeE;VH&f6\9-gjXigDTBEikP3Aa2/"Bja<!/AGa>4CN_":Ir+a4N=5%:j*2:_l:*G=%f&Pa[J7-:MRJVWkY[MG,=-2(7=.s5oH$ij!2QCKfOZVpX$EsQU.^3-0]!gH?73%FF/G)PgcXnJ?I@N;\$QARs[Ye.ZQ>O@J0701i%ad4C=k<(_F^Pe%3`9)7Il;"UF4O9/:7<r<;9rILdYiKq/PJ57HY9kRDZr,/a$]&p9F4.q&Y\QaF>_,L@FQr>)Zu6W6S)j')S$$j)%9Zc*XL]O:qoFHG)No)kf?Gf9Pf';.eDu[WB^%<=0nAM)]+H0[Z`M'!DU8Yl=(e#c(QN#CNO@<UOeR_DB:Wutr%mRmP:IM*C16(_A%S2nm*O,,*Im``@!M<,F7=^1Mp]oUn=<-8\Q4RQl^+*RND!>.NXM*"g`*Xa&3g-&Ffo(o^?=3Zj<8imgQ*Tc#0A`p/U`O>NB`3DGN%Y2-[$V)902\gD?%>oX%^)TH?8Iid<lk0oR;;NtKF:\++!oLG:^MJKcf:>@"3"`Ln/=Hh)\@:$82W-L<:T4,n8`;89+:)F64O9KBm%KFrS<;u#]3XY\h=3#MsS]P/q.:g%e*BZQ_8DK/Y;f5"^!%S%5ncF`qsc#;N2cAK/*0aAfpZnHO/@>$@sAB\$II0YuG-[_TG["I#+%]MXIM-='N27s98p22Z/elH=/$ZX"O)Y61t',#1VR[tNo5Z7oaA"UrN$k`@X0I<Ad=m43RsH2>]$p_j:L(8I]V*TN'ZRJUEc@WIO5%hrnq[7<Y1:X@k9:[[nDl:-%]B9*rJH[c.a0e8TKTVb+pAZo($AiaWe#;>qo520=u#c^](0r$-qbYg)VR^J;"!8&c)8@SoU6qrE):%B&GL$+?T$cMmFDgKZLD)OPL+&1%?Y-@b8SofQ2OW']ULn(_l9r2BqA`&]]%(i>+bm(5lZCn&02Lc[=eUl/jc:eZnY9Q,Ck7WQiT6%c-KVt8"&$-B1q#pXp9)-`VkFfeF@9J+t]'tBBCS;cGmXtbJ#ab[OJj`_jtb?&CM,g"Z7U;Ms&uZ!%F"#8#;'k[Z&fL@U8>R:OAF@%\E'DB5B\/kIICV[gDBJP%EY?A*TTDj0hRLZf/skp7c/B?j/[_C&pFLiX2,)/O<k_iW5/cNQl^@IMK:=mZ/H;4+80X$Cm_sZ=TCPo%dii]HNlQ_T^ht+mi9m5Tha]h7Lei,2Ouk2u:]9;4>!H6jcRpaS?:X3d+rr^rQ(_<.*,J-+B8l]JeDipOs!^a'=<eL71Nj@e=<:Dr%QPhJ)4,E!giprW8<H(_'4nfZbFOD/V-(bGLinBel@gRL*8Ch+RE4..";t7Qa[,69V,`\P!?e6&?ko,]^Ha'R00[q0S$?'a<HbW=`%/3@ucBRg1D)=bP(1hMM&:>Qr;Waitq^@u#DpsqkL%kSPhR'9\b9,&LuhV5IAl=^d._heFbUqpb;DuGjtA%XOUp`N0_1#/#M[nUSO%q%A7%/#VXif%=`!`@_$&TtGZM08+C7L`.Q1A`'Tqa6HjZ[qghB7&dOXi[Dk*F.8A?qejY;<ejRJQ00+P$PWT1QYA=k!-%:VVM'5<%LZujbAJ&c172O%ed;2rfXBOP+Da:K;/F2m%`gq<be=(cLLc=r#]R,'JmTtJb:YT;n*$LeP]G48&:;+.m)(&(271'j/3d7L.EV!1V%;)o\-Z/%sZ]44Ms*]).N$aF(An4^&a@:MV&IVd9lMp/^qk\FHl>,d$oJm?<0DjKo/=5TE5=%+@R]ukTcC4(0akuRpA.3EVjc^0lG%RYq`4nKFdU13]BZ)gl3e,hh0l.1r;dUIm@2R'!!BE=',:DD!<!BW_V'68g]XG%jUVnLZ&C91P7\JTDomgCtnO*dq[7Cg9*=&hO\9%cfAlF(f.qn:p-%feo;%g1WML`/e8l(,BJc0gsVn*PsREUZ!E1,iu*]5"3e:U48,6r=9O[1KYT>FCY[ZT/YdT?*%VsP$X(DXeVC3T%`)]$:fBnOsg1s*Sn`FR[?eRLm0Q+%1:#cK_^u@'7q1rKB4Fp]Z>ZgoIWaIra0(h3+=ioG&Y4)XajDJKoJLn#'@mSf[ol%sS%2!D:%Gig9GCW$"mRHG?:=<?AEolTPIK$(&#I<dB$2S>(8=sq`a/Fr9DhnC1pGA,J=l,g=Vi!ItgdBjb1'@FN)dUF'>`:c?%n^<,W^E65j%55YOX_\$0F,$0?Ln9K,P(gq>A!Q)AAC;Z<1`-kb]2@T'2j'?EGrI?'M8a0^mn8mg5CMl4^jQNrI-C1K$`l3.FhaEphTjjKh/CG4C%G:q96k.PB;h_$c.]*?[SWXt.7_BZb(;%Yh*HZD-s''rLHkEe[Q;`X=(jB,0G<4ZfAqX5GaZ?+:D0)noOnG$Hd0>%BuHFn"p=nq8V%PdMGqPt9)>X8<-#@,c35NtbC`>8qOAj`;,/T:kcJO`(=\h`<_@;NiBXRX!&9Y@QYHqJ8M^m!*glf%e=AEeBG&Ep*(_*29`DPb0(>%Xr90Qc5KI($p&c.^_ChQJhuU'l079UNE#2aTHhm*nf57!$p)HFS43u/R;76hFO[Xa3/9+GK8sOO:7O]7=fIZPkERVY:(CQK"s#e;%A'u@.i!_Y.pMI2U]&3uXOCQb\TlZ,?kC.+5oud%iFJGjphi<X?,^u.H-O[=9&"<7Gr:>H3QJg"?N^a1/.;8`\JsqFV18\f=^eIW(%+XZqU@`<3aL=42iqRs)b\t8:h(m@^t&C]k:G!`#nGT,H(U4Zl;p6i%tAqEstn/<CEiVdIs9o#@Rp0kN1Q\^$n\f@c#h"o3-ZC<Xj%j[\t4-5Bc9,NB?+2CU1t("=YhUcF/R4Co#o=?+3!h>=3^8,]Y>Sf:/T$kg2f`&DArNq>dH)cu'<"nBYK]j75#38)Pd-ffNoDK3+:%puWjaHBX#^XSfFlJB]0g0`G9B3&`)p_)JCjAnXX*BmS'1">AcuRa%o*'?94_A9,@!hsL(Xc<&\?"!rjR`_&"gcQ'O&%YFjrGkCr^%HUOrc[Hn0M1DVlZ)L:AdkdePUkj?PBV8JCYo_cq9YWOU@(7;;Q2+AYEDjX"OOiR27SGtA1#[7&%VTf81JWFaiKqh53Z[PX&ic;+E%,rC>BJWI'oTX!mC@!\2mOiOYD7kf@.b8A=;I#KO=V`,O"YS<LuFu`Vm!Ekeb&\XBOG]a?-$Vh@p8[5Lp&4.f-b+:'<gb([t3pl]S%cU>0P=`+:/I3VL1:E:OI/SCVB&VB"X-DV)(dZXqY04&^hgGci&2.uAf`u3P&3pXe+p3]_jM2)ZG/d_-S'7;bH5LM8!jkMj@i?RtG%7.kg&k!#TN71D$IdF69moCFL2aUsgWla8)"@Ip6(L!Fa01a$0VrsCqgpro"5<>ier1]9+X>]^M9jH0#/i:K!ae?R:=p<%(g%"7eo%/:21LqD+lbs(Bq@j1XfaBQT+KhJjFe,Q!ZJF0%&9(9j>r/%7QCUHFtj7;*=CF#YQM/QP7d0Z-YR&tMA\?@s0XN6('M,;S/'^(D5)%*qP60m#;mFECq'fIr7:Z)0p*G59D1p&Kr@)2iShG#Xr>4.>-A&h\2W[KZ6,:,*RhGL,O$>#$.eL+(Z@D#tW>Zaa"ENliKb)c7'QL%9*s(gXut4YMkT&cQM8;f:kO^<rZhhro5\Pg6>#HKH\HR34&mJN/P*uO8fb<+3WU-:F_rE\ES%G*bK]u?3#'f]r1co.LD&QkFVCAd%f%Ysc2_hbcq@-@QGdh"Th1It[8Q&'(053X)#TB.:kME.]_QBS:S.*d6`J62>iSpK]2blQ,mon.=oAQ@.8X!#hoALnU=\P1nBB<8U%1?-=!*q@@-Mj]\gAj2`/[c"OaiPMGQ2"KTVX)Io8N<o?!Oj>2=-m-`E>lHPrVk"@]4JA>-%SaU;6hAqWc`@BE(3OW<?ENo/=TYm#%pI*_us/I#P:LmSIQg@0.d1r])1S?kA6"6p3FGqS+WS(O"D.a-q'+`,>PtWg_bM_\Fa#]+mlnM&6o+-Yrh=1o>f:m$n&pl0?+<jRu%.pih@GlguZ0%62'ZlTfJ5W5aHagXDq#q*(!J_Eu6`=Qgt4I+BG8[`"Q,S;QLoKcUWVbcB[43I9rLA7n0/D,"4Ohe5FI_1UCp-*gW%`Xt#[gh7*(;U6<m[7@r5[(TEMs,0Rd+?:57B]5VCeG@CqB,^"O)6*:s=3lC_]StA+l"$SRr(J=['sL@V,8KdgVNHuJGUCa-"YB)#%<52q9_t1@?8,R/CL'<[)U"bNrdr<uM)VtV;[A*,uSKnrq98cM/(!_#.VO@j)T*$1SE?@+ScC8:l:5+Vi=&,+iQ\aFq8Q+M:G!q:W%$5[LqEk0`06&R8`:4t:42Ft>Z7cNU]H+HGI'q7TP_O:oVMf_j`hk!*R.Er.O7,^_/@ZD[frR[4L(Dh#t>Ena0B'FW<O*Z$k">/S#%<t=:JXkSuE^>nWIjWd$_jNb9*pDsr.#5EeoNT8@Pp/V(%1>DT+f$(\,VqT,08Th'f>U\2V2YC:%SU'>"g>=CJBGZ$W;Z<e'/f"*=%&q]]r;b$#[3sJ>f:<m[WJ@r4re@kn,D8th_M)1mi9QjWg4$M`CcWm=3k@/`heb)RY]*ZQ_)pHeM"b)'5P2.`_rY]luWHR+$d[.`X%]Bs0nX42QifuhaYWmmU+#$4N'[i4fD@,sMc9Mi$aR.m_)Bl3Ot0>gPSSc-rb++,m2DXW5KcG"odm(*uL?Bqhnp^Wab%DN=`Al(,=%l&C1heYE"Yc51O8Gci9p55S?+3l4L&]$fm62p1;6*i&10E]"J!jl%>l*7R=H*D]3tW]CYI%o\]egtH]$X\OMo;VU2SgI==!J#P60%:&\\;)n]f.&NPn!dNS$`e0O6!X.S<>7;e:[3;:c_=0Z\,o<Nh%Y+4WKEaB*8X<WK?\fR,3^0;lCm>%Z/\8fGq?j>Kb2Wc<+?DoPn%3c(1'q&o=8&[5\5Hg'.]OLk^KR`+Ih9&.[U!DRT'N[L2IgWbgqM!WBhHj7N2ZK]#*k[$uN4IaVHQYtm0P_la2]E2F+0$`]mds:''%765]L<]6NKHK?uil27@=FL13YMHWNqVXngl4?.W'Cc[?65]c1[F+5+]FC)M"?4pkUCcX5a3AL2C3j2dLC[H7ZflY^tFQClTh6teU%VXqs,Zf<agb,4bK>o^8DC,VXWWp$grl+EILi7]uXCc\cio/t]NU22lo>e4<9Bq0!#03!dqaMP:J,-LE1Qqca5"WT`YM?Vaf0e!k]%Rk?b@-HW.Vb,$>`Dpuq-o?*p$^+!u`CcX3PUH'Q_B%(a1YuXNqE^n'pVXq*a'CGtE-I/L[b,#KV=*0C;3j0,&32:iECc];B/=.uX%?g14DM!6kt/+;M1ds6)WIAVFoCcZ3m!Z]"+N)Z\Wkcs.DB/f,'9d*ikDV-h3d;lK'`?#7K@?[60J(T0lhU]ZQn#M@oDaNZ9F]!52%L._p"IB_b[WA4l?/4NFb$+S.&R@k,#8^-=XE`HDpoZki7B`0`@6g,5!!Otlb$YYe)<f2,rK)$$!s7?ql:60'eg`*aijmnqpF6WYN%rC9`%?u`?[o9[RG;`bioHd>EkZ1fII??6oCFtqB%GLh-J]'(beRZcPcGObASO*f-Bl]_D<MsfSYh)qjN$bpDmB:D5hC[RRm%(tfL%]m(6?c!Ah?iHkA78*8mW9/5h`04SocglIP"P_a!pp\#ufLJKoJF`'?(E?^tBcGLKGX`5Q@GY(?,/C*n+)6j!E><(VTV8:u0/"+#R%M<ie^k''<FU/%L0QtZ:`R)`eTg_iP"BPR$+gIUWngF(lrs(0CWZ&mf"0m5o-A<HR08(nE+O@@jM*PB-,9>7B95/t9Gdc)u?Sr%N'%0c$e[r2!sm4T:hK@bm5-NJf.:4c**3X?CcGR_\YES9LiQ.NkDTYjX^F/#-XFT[lREB$QkmI!>!a6mO)I8:$X7G2t-b39nmY0&HA9%"1Y\0VN@5*553^i>_U7u$jbNPE)oAc)[t,hP6d)b@5msapA8BgO&6Q.K'sNX4HnWj$Ws9G8cZCs0$&jXGGg5VEDFD2QdUlMP8K\0%&3H"_M2o;k)I?-N)S0gr)aD(mc4,!)(B8).PoK/4RYCb^GB'LRrsa0,1EXZ]-h=brDt7U%El6]92s&$JV#tYYo:LalDn%%$s7i3#%*eMV,4lLJ"?.c<LLl&Ok_:tHRb-?_o8^*]egpa7/eis#ADZL^Hp9huNU^(Nr*_mk3*F[&c^?5j`$1X]%;=R?@4u$b3ZFOT6r-!*d%?I0b4q"a;-RG>k?>fjK3P<JX47@JriZ'(J:UN"M;YU<df13+"kFbAXF`rC@h=NaEharS_ETifg>blLt3=m7$;FAf1RiTRdBIcX;R%1o?okVWY[sT#J+UbAk4PT>ZD(X8Pa[O5gjmW`2[0d-j04EdmS-G)VZ)n([JT>]5$lCb0oaHB.<.r1g7hcagWXc?537VS"A>\<c^i%hZ]N<H3BXCNpFbE$t##3C!u2_7*qk]>k^c65VNTO3qUCL#gDpnN45ANMoqAg/f")_/$mL6o?-4Dq8I[SAP#8H[SKG3hp"Nj+Y@NS%</BPMJR+jVm(4JOmqD<OYLJ[F2jh:i4lJb.c?n2Eb4iBJHoN`3aZg6<s80)GqGo)qKLNZ"5AbR=5Kc7]hQ&G@lbPgEE2M3Mr@?]q%]t8AdMBtL!LMccCs5A/4>;dT]m6pWnLDqf.o6kM[[Hu%Vb[rd%gHMTNft\QilL)k\]L13nnG_-u:Slc]=uiUqpuTCV#?88tV`Emt%qkC^OffPfuN?(N(V7Y/3=/BHbKuLh(=8nIcX-Y^,W6W6.SFql=@/_d](L6&-`C<MCAK_+EiFR#*(nhqDfLg?i[FHPfor[61[9tT<%Gc8o.JG[9U$l3jC,U07WFfkpKU2HHZE/WCqE,*imKZ#,4LY2NiQs6WhRoK+:f>aB:&iI(2&:Z@D[gb,+d#GKAatlZtoQnHHO<J^,%&(uIK4Y&,$euGZOBd%g[U[Spa`@lLjm-+u&\r4'kMg6'=N>gKJ'u*="MfZTOCS+X(PJ![/A'C9W^b.4m)NU@7>iMd[Yd*C+=4N.;%bg^u.\9B/K(l%+:q+Bi&G<an9LMV\7EdrK_bS7q;:K?/p+$2Y%lbGL[pfMYW9@cm=**Eb6K.'X;AhV"E[##'A):rZoioE^"V`;hr%&bc>W]u+_;a$A7RkTe\pnUnZ,EILHg$a?sH"Tmtsd5ZX2PD>Y_($0)he:fQN++AQNj@$;CTMs.Qc\QP9!f#BFStkVZ;l-`>Rbo/D%PK?MOfn*)H3Uk@4$T]._Ji2t0PlG@o#`4(ZF;.UECMlbDSB`u\]ZN$R.U`%J<s07^b=iJQi-UGNgLY#n!j^4CNQ:GIaElr9aMMtC%i_V1:jY@mr6<5^KFn.eCn>4c.]!/@o)s]sV:;;aM"W0*%cnR%\B*"%$_)hnK@?&=Q!Xr1VNYYENPQ_m]#;GcSG!?\GDUe:5%2Cl2%0PV)jpGooaZN-cKdn<b3cN9&o!uSjE%`e^1RKFD4qA,S)\4'RWg+2ooHt8;4,Os\6\<JY2P=)XaU0YnXFqVc90'+;jB(mC]Pg=JZ%dQ_h&T?mJW;neJL:)%UD9DR@UWVnW>ni=)05B\KJVkk)m:0N28N*?sE2H7>9rSj@W2=A/,]SIK>eSjf\Tj7?g"`I]Uaa/tpY?t\h%16_0*g7-C@:m(2=$U#GD.eicChs)"&^N+p2#`kLoZ0q;V1>(turEQh!9juMTf<'M^A9,ZHXluD!(%5JDi*6.,^;#iflShu%1?uQ%%_-(ulQ7:VT(VF*>g()[&Hi9]$=&*qBT4:'DAB]:=neh,tfnk&^MCuskMfZ(/n4<CeV+iDpS_iWJ+jM1o?GBlb(NgO9fY)a]n)Kls%kM>l5^Tm4eMllQ_n)KmJ#230qfc@S3(#rW8E+q=lHi8QF;b.%?npC=e2\kg@)$pu3lSh.&a/sfAj2.qJK\br1I&il``_cS[rIW;1%YcP4rUj#^B3OQL)mp#a"c[DF4rIW8ochmLW\C]%/9.k&Qj59/=N$[OK^<$'F"lJS]Yf7J4n"CV@WumX;;n1F4pf>-t3mKSS^Xk,N%<nc'/XSH*!U<9aFHi5:t`hVDV(Zdipam\m1^==mnI=1'M+8:22j50+b`8WuCcT<p/rk3be_6d;ll9r580A)u<k?:[??GGE&rBe0K%kfN=F\,()'(Jf.V?`[1q`kL'NQ&b'3cPlgI^,XNA_#*mR:PPdVqG"QaMV[U]'@*HoC?SEXM=:+qEd%<?p\G'6[@DG]NIS.(=8J<O%CO'TuZ0q8mG2(-aiQ:Q]$[1:\ZZ=iJrOaNoE@5:UHi5/bPnW$?(MWX%`:s+f(l"&TrN'0L][tIJ=O14M\C9Rf]%8Sp+Z9qplpeY>%06kHjUY&!/qDm<l%Si%$_mo.-$XR'D3?9O=]mdf,qN5iG-GS/n29@p'QE5q`5:`SgTcEKJPlo.e]o6ufl,NG[aGGckk.cYm2VsMO%PN\.=ki*sV'0CrVZ/4MO/iD<q<>h\MHc^JK_?bkUVIg;.Oi%tu)"d^Ri%p):b$JiIrb,%TgjJ@^#inp\jpj=no0T=<._OU3'Y47S%=$m[;5FSL:Mj`\qlpBs7,j]mu'k`#F93UVShN6-oQ`W8XosZu3Gl2W[rd<PYlY9aO1Ce1Zq>G\*V&jG'0;Z"YbK\'&Tm$B[d6(<V%Xtn8r\a*^*WVi0p3876)^K0'(2r3V.VXsD\s.oNr*UP7tIC-O=-YKlqo_\UTDYEgGp0QuI1fs1nilo]-bDYtm<.=(G.j]WA>V3)"%$X5s"ZsOG\mr*Qi[PiWdn%Y6XrkQ$5o49WQUqI8ffD?43(%>[H]s)mTQOh:XQM1$MclYAliNbIbepGs!O^5PEGOTDahbJM@-I7%i%\A3NU^Fs&BZ++q\k=$pq%b0=nI(q>\V#l#?RAhhr:M-fu/iMiQr;mn(GtIi,SS^;`%EKjOA'(FDhcrr;K)KG>*Lr=\.b64)d_]7q%JRBj2Vnq529cqlmPHl33V=A)j/%PO/O]_4L`.jR1s&SQ&bo;%YB)-HDlpa&d2eKK*_mR1[_P"/;1M=HtWn1JG'-^XnA%R/3o8lKZ%GI5jM_K5Cfd#nbn1ZHiL%`s[=:Ksk)WBT`Mn[j-%..1GL5;-$?DKaqWlL%5*%nXAnim_nF[sdU'$&)dlp*)U0R?(TLo*aoSR)-%;%6kd7dId2hNmhZ;#h&cF'T#3dT(;'%1TB/1^X]DB#V*b?Yh%>r&\b'elZa77ojq^.Q'5?%Er@Iui*7h4s9DjEpV)R_V1B69(Dd!YY%r.A>OK<%H%*c76m+MZiJOb[4S?<Q6^*<4qaBiko:pjPSMB5U?BPqXTR/D"F6pQ%`%+r%I=,p3F:;13,D>P3Rr'G.H5dUS:Mn76a2%nc%u$'h9VVH!CJjKL\8Q"R0pq.\_t.r4J05.@Q1cjosaGW*@Eijg0'uDKkUfTN]Lt.]r@:30.j;9878a2P7;Dj\N"%>\Y4a#3Ti>%SBQIm98Q+P>tWr7=!P(bL%o=ODDE,!HR[T\[EJ6.Eq+1!oqhScn+V\U`Qg>S"&g]*00[pXZhO>pp?e`r`oTOq=WH,:]b2Xmkl'+c%S2CiBLl(`\#^/\7!!GWojBI&pC)MLgj?Hushb&+`%]Gk$l1&t7(OqY3bjQ]An=`12AN^!cQENql]Zt>OBEX:ur!;76B#qIX>^;kM%a]DcR>4[V$\D1U*4qonTmSp5?YO^ge%JJhq(r0Y8h/]>g?^kEukU]uieuHlbOegh#RoAUmP)jn/npkhd`cL82^&T_f^+82,kA_2R%Di$`iFq6fJ$q"XY;AH[]DN/i6^!j-sV["#BCR[7TEW8LqFdWV4qdA8,/M1BH6X$WT*d9EjldF`u.GO:.d0//uW@Hs^]VMD$]&<fJ%FkKl.WR$3M4r%<]?V=paQ#<2?jSPCf(KrUBo47KI9R]fdqt`%PKS5gADJke\PSF4`/5C(P<8<(t.n`E4r7M&NR'T9T!PNJ!!%a1J%3S8;7`rdZ+5NO'&YZ#KmQmJh)dLP-F;RSnYoBa;B#55_/LcM1#@L51Cjjq%N@]l6hd3`dJ@6jqNe/8m")nQ8>IGG-Cn&),!%e1uI%p=?eV.Wd4F>l-nnLWnH=ogRHHUEr%:0]j\F"p?02Q:^c(]bN4cO3iZ2[?F.J?bVCl.bM2U38B>G;nl(KYfoW3dJ.\s*#aW5?OI?]%/s_5q.XQ8MVO$*0>OYK^jeUTBq3bMM>"RhYSp"&UKnZk_dcnt<4?ZIl(Zc,$BV][(2`n!T^Rn0\;D/En(0<C-;u[$CZ1TD>]_&je%l9jsZ1)F##YL-CYr_i^KlMM?&[]UCkDMo=3Ikm;FHYos2rgT<APGXYTR/P&`fa=A9DU,qa5cTf?Bt765n"]_sI^ZgLrS-%IDJ-D&%r3:EA]Vm6"Q1rbD)7I0^WQ0^Mcq&@15dC!o=_p,iQ+,dJViqe%k0qKMHuF0s/lu@Va5<Ioh*i5BTYm<a_K`5n4[.dJ=:SX[B,]-,%*=b.bf9Su9L$Y<Q#_PaIFF:CeQq5gYWqm?\e@=WG1KMb:>]ANIg[jFUlGMe+-%GX:0>F]7?6^$;-FmCJV^c!us!N).j77K#3YJtI%LUnW*&.[@JqkaU0e=O4OgPM5f>ran!>,aDaV6<ST[(:>,'"<=IKjnWf]/?Neg1#nb;bEm?"Rk$*bfYXPZ;^[mBVYa0N?l8']f0"f%M%d5c4.gQ(hQ],%3&sac*?C3dB_XKLkZs7tn]fUDH!WG]J!NS\;g;A'8;o/Rbc[d_5J7.1UBf^4n"U-2I1W"5WEaTS8_V-]0"#LH%5:+aWCo`PKCZk<jhA2dZ-8]J_iR,]9m&m=J7R,=3T1$n.2::VpmB?!0Sqe,]lAKi`)0rNK/ReQ<4L&^4kOo%%3,3YgdGVHXj-R\V%(-`#fd<ugp%^JTsOYFD9,:A&'4kl^V28j!gMY.6A*Ec">[<R'>Nc"d[)_L)`Yt;Nb$15Iu0f#`gF;J)aR+318<a$?HB&>e5BJIi$%2'J#(]cV'o`K;[hRBm!.[PLET7du>t;I5HHlZRVSbk6XkinN]pXg5L5mM0g!Pm-73%3L_mp2[P5IaMB%p)dY&eb8=X>iiGDEkGE9%&*HP<8()\-S5hL_k1j+7r4"\tZhjR(O\;KCH)6!:/Sm%W]Ad>e0WtOA(+YH@'C6Dpm**`bW_9J+cf2poFapf5p:jGm;kNp4cIkLk%?=1cTmi"!SoJA.;%+<tP10=epnr1On8$A]=4?&&^Ln=nh!CZkVdfVKTOF@Kl-O**5bd&rQ]p:/Dr7X$6PFmVkin!DOf3'pL#$:(H%,!rE07!`=[0nMO.HPIahmVt'BZ(Bh(S3)MddQ8qdVlRdG=\:cNZ>Ho4;.$2056TT.8B:H<ilfr'dM#.$lR,Y5P(ECrq`^Bdhui32%V-dm<XQo7%NWCERiE?C,o!udfgA74AWBh@,+,/Vc3;31\pm%<jqT@j?To#"h[Y6or8k;h'*oW`,CWjUQUd;F"OQ&8bfI@:gpPV,u%AKIh?X)mo3W3+9f.k?n<L*lgCqB`]QJA-76ge$=%Qai$T?RDg6Ok+,kj`9U$U%;+&lO/>Qe`p&6s1A+R9XBk0Yb@kQd9S#+H?65s%bXc'goRekhW$g$:SRnQ:&/g:.rTaAeje8un^&E_]MYr)gNqH&@Oe0LE_CHicokSpj:Sam*#4nsbg<%a_I&tGT8B70*@s6HoN_R<!%?JQ(K0sBh!JK0S&]uHRI!BfL%]uHRIAH1:6^OOJ<r=m#6X.2`mdQ:&Qh.=#m95UMkauq]Wi9*EVp\Eta,'ZV^DR'Vc^#N)cjkYFj%Pq&"c[A9,_bZd1(2pK^AA^qsmFir*T0B4CASp$W5g^$Kmi_"0[+7fN7=,uUGNp.ca,u3FLEA[NCZ,#T`1#Tg*'oIrMI:s%4m'&]m%:QHM<MoG5EM>Pusdp#T>nQpiRM172`let#JGf@_MPfi?O(E_u8qR)5UjT`=B207n]p[qP!4;G.42LM)LABM%(I5\*gZ1eARXgPNO%@_op\AG+mu5-)3?*0rh^a(DPlUY-V\cJ^p6lM'uM`V_a_F'53k7Uqo)RqIWi`J_o(:D(8cr2o[_6Jkgb,Tau06)/E=g!>`TX]TrL%C+n.qmJ<F\ZQ"B]Ga<)seG:EE8QGf4H\ltD7Y?2(i:4&3r@n94^iL*NIrO?9Y_.E#7gC(G45=E=Nt+9VjnWNo*Y8-MCOC++hOaWE%jM9eaLHQp_keQ4eLC!h-#+cb,_p'LZr[E1)4P<#3mG3O\gYB1V>S"+M<YBcWCL?4uF-jU%H<R(jB-Q(jNHO%)qK]Kb%-+gB^+-3U%fClCb9e)D]?5<GT1CTiQd=)TDMO1[h`UE-7%qgO?har0"%koQBIf!u-VjEE*IAlmdbD1`5eS`Wk6JfDb;4J:61_C&A"E/`64+:tk%$W?]1UdNj%7biIh&:b;<XJF5>cQ\'lbq-]N?[EH"A&LZb53(CWX@mpV\#pP5Qn?Ye]_CiiCZ"QDE+VZ%13DfaI\/W<qI+Gk[=*<'%%@r%T\'E0W1A865Uq270fhUEXh;34Znh]kuGP301B9[8cg$b.tq(AGpD[Isg&Q1*2qft*'n?l$RXPFeame@hRWQU+%-$)IFYGGPB%&X7lA"DH$rG@E5>,);8Q1,ua6n6hF[e[#$uIr#_5Fj3n2QO#JUjK6m)L6A4DH0cZib.u^?7B9/Q6P;uo39Y3EH,#U"[n*apR%O1q%l/De#?_$jQYuB!T'C3\GPR,^@aRd7&nY%$H/.hVL=tP/mEd)Oe7Rk5a,!lkB!VS$h']^a;3%3PfnDt_:q*;qGlAU6MM!_&6D;a!.%(3l,bWuL+6C6*(g.2Jm%+Ed6b[Xh!K"aSDk.SR]Y_-DgF(5a<Ro;0e"%\28k]T-guj]EpUXrL6SA9biL;+0N%%-C/O0n0mb)r)iX%Y4Ng]c'>IBN'9P4R!,7_pi7@ocIcBYqD'*!Rk"U)^h*e=q]dL?^(b`?kHEI=E?/]&XNc,Zm@n.!p%Hd5/g?>[oI:eGnc=dTU@@-H%W-k2uH#1,2T8b>rC`XNa_=?/[h;EQpb\m4GQtI?DO1AI,5pN9C.M&Ga%FX1VM."^Wq)F?RPnK!5=%7%Z>9bdjOF=r^i45"jKSN#,%(l^sg,6nT/Qe::So&@.t)7s.u5Ks7Pc)cg=R5_cHEd?gB9YK0O1J?C]l*<FUo:D?Hpt3C---c"56mR$/8jk/eT5\I:L49$KKZqFV%\2OH?pqH5"*q.AerOJ'lX)M^>r]F"*MYG;Z+j4WS's*Xi7m:9r6dOHsE;Le>8fk)fEK@WRZ&S=[rIE4=gXn+1&*1:OO!8r/au1G`%bO+sk)p6WI]:@n&E&DS&k(0'>Oa),d)/V(Rs8:l@,<-6H8_hu]"8Cc=Uk'^c*%*q`IOme7iA=(&\$nAGKoTR/YY4PVhNld0q)U+c%8;d2N\I/L_.ag7N0/6Y?IroNCVe*_6Y[lD&j',Pl$nf%@<[kYk[;#jKc:[L%a("T"mJW]`^RI9noARb)G9h^lB*+?olqVDWM^aXH%kO`0<C/%8?T$0($+7G/Liq`%JX*WAWJaBcP&b26RFX]KQ5&IRCdjLP<nV+i&ZEgH63P<ss"/X.S)*G=m!m=*J7^ueIZg^\rc66&g%EKXB>^<+qbKqPBIIV\01*Q@gO<WhpM'j+YsSR?m+P(;N"&hAJ(:?HWTUmK6U*1[LFIoIpQ;ra3Sg?7^8cHJIhXU8-N9AF]dQOH%B%Q?:4I+FUMU;;4nho6-u$I.eDuqM7=QYJJJ4'Wl9d?gdDN!LVloRa^!6eSR=/Xt1ID>-3*qA_<c8jD)$>LW0Top:b7hA*l9L"B0_\%%i[8sX9atRBHlQ3)pk%/!B_rQU]5iEH6;=,POqATK[l24I]cL%Z]b,m@V0Bn8&[_!h4_r572+(<-TW!;81*.Sn)1Va[<mDWH>jN7%*^FU'n<5r5*+\",P1AJ\R_"NT'@)>#ZP(pk?`!HiVrl2O(N@YDA1TY*`*suZ<jFF7L\QZ46leW?[+i==(hi&Z*&$8%Eg$FsTn#Bg%b#=]:g#E7)>.K&4@*un#5a"AB`s[8)rpPi"DAZR*:^oQj3;[POqoAZd8#qit,ut\5iiX\9FrK1?^Y-85rc_K/^AWL>42^,OZ;<Y:%n*V*/V>8\Z1m@]$0_Ilt@MhL!d=<6e5_ii6!0I;IGB<XsBD-/T??m?)2r)"KZLZ:%cD*c3eC)@g)T`f<IC;=J><kB[oXf,R)*sP;%Z>_4C<qJM(M2TO5C#=,Mb:g9+IOtp:IX]]3IN.UV`E_kFDen5MC`#6LfD/VE::[Cu+7=g)?1%?[[U*3g_r8)G)5[$]+8kZuN`;s&%8/tX&Y?0*"8ntM<'M+f/K'gC'La02]!^52snjjRHB)</&1]DlFi88/Wi$erRa$S`qMdT;Un^/42Z2:>Oe#!pu+UYNuJE^tp=`TIU%p>i_K%WEiPr61k,QQeGnJK,PHE\A4=cbD_$>qFZ`!HnV)9S2"$RkQLs(-]u,2!NmYQ>@i2hb9hC)a!.1@W\[mAbV-^e(@+oeCHtX%U9`NU:U*8-DFDY\OEbiErB*a+laEs8#;gDdom0;,A=sP,f?44WTVCq%,D`N.]34dn?DQlPoh!jkG9o(HYB?7]CFC#'*SR^'ATDSh%*$'c_hA#1c?hXX!p*=[Rs!fU:*c/&*)B(ATG/I6NIO=5S]H$pHRBc7`762?^p=lIf1/-f7%s!VpI4E8+->uo\7Tj<t,`(47<X*uQ%MsOZc5$6g(k4T>c..eo@^-1cNWj\;N=OjU@B+A]1LM;r:dE;3:-+_f/@OFFV#uYS2a#Yo5mXePCRI<a?ot'd:[8e%r<gHEZ=^stV%oJZ6E%60m`4]pUK2_O#?'9'91c'6-`L.ZhL"g1U[CT,01;m8`OBrJs/;omBo4@:EtR:77/l#fT2Dt/jXSEVr#*Ck'c\X)+mbKC_`%;_H?t$ZK1M2*?D#GndeieV.D14L\JTQ5VRAXirGb@HbqZ`o]0`C@!RaQ5Tua[@4cHAOgFZW!*uhS"#V9KqO^9[UG?j:U]#&BF3(e%&$*nEr9CtO#/67QP;L@KLDU4#LZAd.EUYMh(2*42H0Cn_N<G4[1gR=H7+W4=WEJPM]tsq'8rn4N$e]#7bBusR8XB21MX-:<Ko7S]%HED14X`3gR1,/i->S(S*,Jnk9IUtp_/$Fm;jh&MG>NnPXiCO$T`eO[bNWB_-k;XZ%Q@HLD11-p,O2'Jn09o>E,#a<%d[<W2/b`j5%*#7uNXTp?[,02Ci>COR[Yo'kXfM_9.YnUtCGTa4,N=j.Llc*rr;L6U1CjsfM'O5Lj)iN]u6\rNW/d/>abH)O&K`aUnlSZ.+`M1ZG%gu=^\_;:-7RoI8cE]sc[V5W-'Em)0FI+l@\^k^A"ne">9BKno1buCi(d((7N%3a<Xn3A+:>=nuG&MQ.a&jr>:g66;+Zb9^h;67!8%Q^mB_X!b8bm9=U=/4<nXY?omE<le!+R"?E4XGB!""gMbb$A8,^JP[nN7DcY["I#!cP6pNoUf+*5q=7Y;)./KCgTZ<"J,QUa6r<M7%<7ughRT/QC3DLgr[j&$cr_2EgK<:9lXiO;Z&JAa3,gp0//h*CAiAEB6Z]RV`2'C<B`Ss7IGC-g&1W1lLh8AO,ar5E:Ngh'SS_e`G%9@#\Z*'VE"/MTBu5-_jn4?7]YEX&.\\\R2bZO?Pg)15g8nU7MA$h7"25sV"pq>!!`Ou$G+\[Ag]*;9FTq.]04nj*#*]$;GZ*gG.)%+fkM<+fi.Hd5kf\T3E%]lP)P6h`3pQIV3qDpX;0j2+q6-K,O"QfH^Cn=QD;ACJRIuq6A\f'nI@_C+U8C$"R=[7lu604<i0Vnb">J%iBCNk7:(<bE:W8!AMMMnr!ikQe($ad$s68u(,4sk\".";TP36NmR;;VCMh0#&e^gAb%`FB@4q*_(8.n=F=ok="=>[Dr1YmjOqq>f%o>W3J41bm,K=.Q!e\8J3W>lZGa$te90]&@u=T%XENa09Mlm64m)di=/^"58n*H>^4k5KLp/g9*=P+W#LGbic+m7W:bqn7J'-O<\X%ok4+qqG73D8e2DoT's)fj'<^E/sW$_#NU,:l1t(4idT#+=PS)?a"h"&)h4po$?pZoh3XJo<1-DM#[!F)2tXWjpe8;#B]\mTXqgk[%/<F!u03p&L2$'ET.fEDI>K`Ot1+deE?$*R<\:!gKX0cNrMJ!_9$e<kjX_ThlLE5"BWRdNW1epm?4[0[/jJe]Cl?du[IC/8R:/LUH%5;eRpiX)X!kGQ2&^NG-Cp]')@XJ1#b7IdqBC%0;uM0'Y%cC;`/*Y_GC9?iMukFhfuZ_%emjF74/&"gG$'I=tQW@Ib<!qbD.OhkUm%@Q&L^%&`8TYs5=shM/.MVr%G8\H8Fn_h6.g8oc4Lb!)T+X2tcbNUVm!UISHhPC,hOHqjsh,5QNTT>Y[-#QG<aL#a-J-fe"T^^\sm%#dda5khkUE*r>[[C$%9A(=_DpP+n%#9\qu@aT`kL91Ye?(GmiqlU"no,r>@fO>R$[WXV$\S>4M^&?>c_05,+W0La7V!eVN_8CY:%%WtL$;F\tt^'\bq51NAuL,Yf"b16YGh>UM.D#;oWq"I8EnqU7uKZk/qMZ%Eg!:0QQkl(X-:2tD^'.F<*&c:amJ,++`6(!12N/uQg:%7FH>.bgCVF'(6kf)+MTL@0[drIX;c=gB6?#e8Y%ae0RLl!RY",o;XFaW0N5CA60KbG$r3ed6oQATp=3@(9HnSDmYds/b?QJ6!JL0%W>XpK0Fbsp,3;Gh>Lh,g';eY9dks$U?4q>bd29s%O8Yq=>,0^[&d-,pGfG3kR:3A-,is/?JuW@uR,8lWe+9l(g5YB\jLh@iL(.p.%R',YI%0MD08d'Zn&:fZ7#nY3DA`)umL+,q9WY#6.a8gfA3[(5lWUr%U-5_K*F<D21a]Y)U+L9JME0IZAWJc(cCGg^B$E9$YNC(dT%"u7*.)g9$5&?SVt1`^[H0V0m*Ai0ViK$;[I5n$JS*-;4K/F[18&D`Eo(IZ\.#@S0;dm]i^!'rEq;4S&aa:SVAWl,R*Z%A`l(fL'8%(_?q8AE7=XUng<O^H%BfjAj<`0t#6</o[IA"rW"8gFs&`</Ek.6,sO8^k0PH/%S?!NF7W;@>^_>;OU:`bGMAO+L9-r@j"?%8Tbdm%8QHO<FeYkYoKB6PU*`E&8&Iba,h90V@/s+s6doDnCfhXo<*_9S(D0'^AKJCJ=#<9f2?CY@*9%op+G)'4S`(]ma#o0>KgS7"a&Qaa%QtmBV#-Qp,W4;8(#]s3>*$@o"EG$uD*f;;+RA8kdkQSa)9i3?Rct"88,UeOAC6/j-MD-?.#bl!"BNnJ*GEu,qb,,5&_L9oKqAq%W%8fLo50hdg#K9R!+$IO"P#sgppdF<d4.]&dh&aTc8UFGSg%/PUjB)kX,B#pc3<AqpFMF`M/',=D76,ir&WG?grS6Pn[g8'mnA<h*9%k]'#p7I1!l8BE4[+rW.38:qKa6P.'F<=E;'/h9I^RKTLW8,sf`Tuf&1%g(*h=eWbf<;MoXC4t++$im;""UQq8$k-!DKutJ<M,<c3%Uma]]BHd^Nfs7(Y"<j"?,bbhZ/HEEeA>5it+o)?C6!#LN.12`1:o@#KciW>?"B'fa;86'>=UtMJHjC;#BG_rHA1T)f&5qM>ME-oV%8W"qT(KF=ef`YbO<%p]R<<?#,g06sB;)^1&dS/'l!um84?4[PT"&(P@nAG?9:O4P4-CJ4%O;f=:Clm>HaZ:T.Ue,[BWM[\6,h!(&%i^P,,a],&ZKERF2!p_WJ*>1_NU-_`IO<E>S!N8d,AI2Wdm8aZo*TA\K,b7j_F&<,U;!2rF$,Nu"O)cjl[6RkuPOK8&5mA3kV^Y;)%h%[*p@_kmS3`nlP;'_NNcoMX1!:dUq;Oq;',4-`u%$7V=l'3f.UVK,W"/ZK&*t0<'-,PHkL"MO7LPQh9RFPENX"#&X/<$goegQS/%<0YOo6m0RD'WK_a'Zr7#'EIePNUiN-q8"aQ_R:RF#TJU]I8(J*8##trN^PXi0Une5*Yf-#.No$g@]tW_5Xl?T%fen:9?/leFQ+Ef%'Z`,)0KNBS*erCC#R5!pN[4p>F-B9WA/Q&KVAKs3Yc/Qk22e\45Vbc\)5&55TZTqV@./Y5aFI0L_C>_jN#aMRJOX&cA>hn<RA.MC%QU/TR+W48;d5&9U'#lV"Kc*=V8D.9&1keP87AJk-,*I&!Yao;Y+f&cuI1ORP9E@MDaYZk:JP\oOZ+rfrTh$I`ekG-^e^2Eb,.?t8%q*E-`ShXg'&=;Tl`$dC^/!udh.@s.&:`3B^:tPe$LKf;r>n[gQNF>46+W)C`ck+;4fd'V'NeBTNaHA%+O>m*/Ud-=&;PKj_#j*?7%O<oOR<d"8-!#$'a&CGJH4IWcWRUYat*@iE3RK_.0<!%kAr"9TP%>JO]6L7K=fJFP@$oVW2'Br$DC.7bm&`&;2Yq6k8VWfH$]m,p)%\H!a-[Cluf*ABl_WK>a%p`beF;S1<Zh1d(&Pu"7c-6%QX8=J0BnfF2;HmqM6S;7lEMJp*bl83NU_CX_\[KXL<.jl;jCpbH2-m45B%T(.Es+:-_hW2aG@;C`BI4fX$+"d-`+n:4'0LdhoELr_O+M4@$h75TjQ^a&se[5C@H^]B$4L5$k?AA)VbWJk4G[Yn#KOXWOLRA*9!%/L]9LO;K>GaOG?I,Y<Z<A4."4$%Bu&;381Phm6_%%!F?^^bD_C,`;eWga6L-?l_nPVeT2>.(G4lPr,gs&=%@&U7q8k!\*&*nmt4G%)GN1:!S"Q:2R!bLn,R,'/VNLVJ0=YSg5Of/"[chN+=<5J)A7H/48.<G!qQKoBRUKm9H&FX5mOuX#QTCSbdK>BJm8oo*[D/:$kORp%_1Id#n8rf;&i9uY:-+0[3>%"G,[m!./8#kJ_1`:nkT,9=R+_gt`0h9j,`0Cp@kc^A,7q)['S=:fDR`6>GY-:N7MVJOIh7m4^J0tq%^m[iOC$8O,U"Ni%Tu1,h'bDcU4IE,oEbYtO>VR81%<7*?CGqO]MG2A6L8Ime1M,=+Vo!up\-/[h4b#cpaG/r4^uTo:3'\,8AFL)-%SIB*g#"Se%)k)q-<Mk=(L\YP<j>BN(1QZ9.4A#&#,-D0*U\!!^aEnO&bO@?NZ%I_J!JE]L5h:e*TdblAVLU94dm^10L0cX68Ld[,%ZD9GsWFZU^c9"n'cK:)I7.DDZ6idG`JTIOs6l-$GiC"iV-5_X-6m7(id]&:u-j7=D+7DUs&0Fh.gPJ5sn-WtR$3;^HM"sjsdZfK[%F$::iBVr_k#B5#i1!.TM%CLg['d1)FN#cZn&/P[>'H6_>*Ya4!H(]+/PR:HQ,sYlY!+LgD&^(IjA@kZ#N4;[iJsClR6:#aOU,cI,%"HsScGn:c!RRr)kb_JLr1_Z:oAM$DqVTS^2csMbNqo"7fE<olmpeX4%NB.QfM*_bFUT0;5;*\BJDnHa;?s*6Y:)&X=(5J1hKip_U%*DR=<Os3N,'4isBF/!mbF/%H[CH56AZGKRr$cO6s"%=B!qkSi*6le;I4omUCe6ZSO'C`3"l(%VRI9&5N=`R>n\PGITPt%">;MYud%c@(;,:orRl0n<[8'hRKA-Q%(6k1]5:0S^Bb,2O!q+UZ-D'4s&cdLkpS=A^tFL\ISgMdN@*8A$<M+ea#4HNFIN<P8'Z5e99&1#b=s%7)1R>Gu$PUGu$?Bp7?(;o:DUPJgB+-'6MOLS_b%,8YCrt\-3.IRb47<["lY+%SjnaUE$/AUQd4-SFZm3L]sWRo)r;@;L([#-fA`,%k.N/#*\-B@o7TQ0b/.?ij_BO+3)9e]Q12L$E$fbp/a!E_VQ"R\P6rj./K!V4!JcT%bW/Jm]V%*%c4f>"Bh7c-,3L5F$)I*B*U5VX%Ela>=*KCebM42`c9aDkTL;A.'RR!/RGeZf`W6rDI15OUZr?_Zo23FRZIM9L"PB33)5Vk)!1UkJ\=Dj<)K\[s`d5eB:!%.CQD6IZ,%/D+`)Hm3"]#=Yf]fP<f-,Y<il/qRLA&>\]MM3#2MdT&'iYs9Q*8;C=u&s02Fl)(N2PS&^+BE:A7Bd.n^JRed.N"0p"#RJ>$ac@q'%FXi%^0-Zd";LsAJ#G?ed)qEk7'^0&T@9\fo?V72j']KOR#s\T:((;mJ\6]dR=*P8/4$&?:@AEn>b;d"3![pq(6`R7F<E/0t.ZmU5%RA^rHC)!DR!/<biKcDcPAJ%<cUC%.'!M[ttQ:[t_Qtug=b/cctE@HkR:=H!JcqM#aJg'2<?(k+JWtb+G.<Z0]#g>?rA,lc1(jHQ>%7=AATF!<M>FgdH#`s%I)BLBih(o"2&V%b1g-&%Aa7T`D?.E)`n<TpCIVFIZl'9iuYR#41?2g4I+&7%$SCDP"@28W6:/q`L-/FEME%UllQ@2Nl0ta<b71X?^*eehWfP!$N+&RMQ;OF4<39+gVE//c^JD*^$'*E.(#Yb*m-6aEo*?WEOuY>poJ;<"+@LO;YtZYlq./-k$QC%NlM.q_CB2fo+7]?-2*o61F+^h&1/$H_Q-?C>E^3o]5#S5?"PfYRC#nWWUYdl+u8<%B2i_=)8Cs'-K].c0;i5;aO"c@Acl<bD?Vp.%J.'/o`'U)tMWk])Ar[>a(d*$M%E:u:j92Cm?)5-N@!GTM5pR%0?,X`'N3Aq\oamC.!EDkPU1*0ba3`n;IF*bL@BY.,_))>@R)dK5%M\&.p!?fI*UW^01.FUR+eg4Nd_Ga.(&PEuM(P%<Xq,]tILVAN[_6De8/*oM@;k^@P.ZiU(1i#77/EgRVdR"TA/cZHNa!9U#MKWAD%6`;i+1tc"=R:W`+Z9ffBZ6JNgSjp>I?ijUh,Dli?SL,?Z7<:giNP/u@AC2[Nf9BsE6ik,_8RMl4V7=ITLIR4,Nkkq9_a)(#b[A;?%VfA:j)*Lnq*2O3ZYhka<kn<D]Fj>Q5JqfY+W1B):e>+M?#V^_gJ>aBOCE-"`FH*;%M/]Mg8OUuLa_]=l@'R'g&VhDf[A8m696A%&%q(e]$bFIm7#gBui>\>*G>\AR8U;FId#"/GcVsB:L'(Pt#lYJh*MsafbY-X.!Y=[E5\]t0g<SMRa^Tj`H?"X;fY[66mB*:R;\B)5+%#U2nc59h<mV-(Lk-%kQgYZtf]QJ#ipF4NYWCF8L2lT/7S@'6gG2R"WMXtr<g_'WVO_1?FSR>2C+)'Hl!@BMCcVc-fU\]tJ8Uq=^Y%cHo<b1-!lg#<RY9XjhItO@f+!ELh6PC2MR*#D^L]3!5::[T`hqc8mi"3),B'$Uf4&F4=NMJJ;#'0Ed+$Rk[.+%_!>N8/F\KD75jn%\]m6i\]o#p[G5AH)<%+GCr:)@)8f.%F.NiFT;_ogS7gbmL`5m11N4kK]Bq`HGb"P/7@lQ+c"W8Q+'6UXRjBWK=Z:0+QoWJHL-"cb%,Ch0JbQu2Q&TNRQ.LtVZEtMXO`V))ARUU<_1P3uhMX<MNR&X#,,gNa!dq(J]Gm9(@3h0hgBBC4UScL#cSF=Z&R-SR>CsUc90uk.M%,`B8$3(%=)c#>Yf3i7nQ3R0lo,"jN@D)-=!POK\L*/g#6LJ?'8f"lm4>@4>l$nS&JEC;p%i+nH9b/A?*ekqjVU@&Am\j@,`ELj@:%A^P5Y3[4o>"i]F^"(S>TmlMbM:7Z+Y3WhW[Z!ci%!/E))`4=1kg`U\WR4ZX22IN;;^q%TANVK.fFe;Mk6cV[/m62b^DUQ4B`.'Zf%Y-.BqZQYMQ*M!!8+Mh=hLRKgh)$+9RA'fCk!CiRgk!&r9'NNG.[NUt:li:It"[b,#F.`P#(.W3HHA!u"(u!KTl6h`e"D?\_LKPSa%!2e_OH6/r6P@hRUi.91:En1nc?AQ@877bVFVJa9]-ql@4+,=6h%?kfhh$.TY[\Z"lj'&7rAf7a?D%+m\qh&;o64A+O\:jr?BS9p-%6'bFLVQ+a!$/WH'&=l*Pc.`fVNXFH/a2:G]^qp3ci!R([J-\QF=cELRk[5c@%;,gM]>l%*NXS$Q/XX5GN8GA\I<1?()HVs+Jgsj-%.hB,>[5l\'&_l8WpR:INF?kX\`.Q-[666`lF3%G'Fscd>,1[dlE3dNHmiL4(M)Yf9=ODjhQW:=N`kAA"eQa'*8fVc`#m_e<g8T[F%c$.,2YjQNC64t4DV4(\P79ZiOF9&fddm<!i`O84h1QEDppFJELdZ]Oj=cf'Ib=l[V#b0BF&RaGH19G*g2NlJTDRA's1Gk)nFc*\j%XpV1?=p%$Rkb_d'=p'_`1LaPj5Z-1r7'&ii`3Pi2D%/0riLCfh5`V.&>oGDn!MIWk1)7GIP0b5UXjIY592+*M#)FleNtE>_!)do)%ZAiXMaGM.p`\i=72As[E%V-I/%N%+,0lfQVCuZEVaN-2`iu2;D>mnHV2/]9:lF(O=&4<9;2.BeMhI-I@gDU>_QF<2u%1lAk(#HOA%A<J>_@I"gS3':['d[7V',hW_i-G%.**>AYcY!@2_@.TiVKVIu02.e2a[*3<G!NCA3J5Gi`KQER@JHp:NfeT`kQt9S;Qm(5H2*b]7%)Z&+!`_@-"Q8rD\@kJO10G,7a!0KZu--ALpC0kBoMUX2d8tg`hD-l8]@$WT+YOT]&FB+_3j'_LjgUbBUoDapH2T^..37-Rj]EbX5%6Mr4OGNr<aiD&]:mm!P3R/dQMj/S->Nc3FBpMO0_Th(!`"9EK/!-b_aR??qDk&-Jsr`$1=+BcG-c)uWbV1e3(M#?&JY(8\VCLc^W%/HuY+EXb:-aj.%6iq3(TLL2.I#W>o6T=tUihlU&.Xq>LD;E'r0Ft;IabcM-5#Y-2]]df#aC(W6X%Kr77d."8s1k"'r2CFVpe$?%M%%7m]`+jP2s:!oUN=l9EePH-j'"Ik]?Hk$e*#50h2GmH<f[>hu+J\9cM7#"E0+mI"NYKt*IlMCfr%(eXX,PF%50$gcpC3*$Qet,&M%_$9Vu&!+HBlb/+n^D_;#P#D^W;?-."<,?&[?UaPO%%BMffKWluj_5!:Sqg_fWD>Yc4!;hQDhpVEUm8j%M6uQ)6=e`@*Q*Q<oJ.%K%*0-TR'X38'1;p0nULTXq/@<GSD)J6O&]=Mj9P,JH2(u_33F.jB<e0gBjjBs_&;^-@%DdIrL=E*Q^'aedI/&Y:cgN7TpgfiWPQ^[e%5MI8fk@Ddm[]KO:hZ])bkdKVk+,g]%o2n+8f"Ulso=4RSqDLi-Y<AYXFTN=9=5m67]Ot2cdOOd]U"p/%gttR#qbC&os7qHK?b3k#%kS$MICtgm3l*Zsp@?ldI`-n0d9hh;UY$XHMLc(Nu3t\_?ar@*O(Wb%AUMUB$3I?k']5[PKO\U%CeY#WtD%FaH%`C8`$0^L#([%N$%M]!*""^X.Bn(6g5O_e^-k-'%HmPQ(Ri2Hdlk,7<9^4"Nnm+kc6CU@YhU=ud+C^c8t&RbEIUUmNN5NY1HUZ[.I7<W)k6ODd=qK1XC%)#Ue0ZY`i2l`$//_7;7<"t%1%W]B7PO2ioONc>X-ii7E6ql7]._f(1b[r"De$e>*:S#L'e=+<$YE&WVENej+"m;qZQ$Bk%;d.Ufl%dqo+r[:6UVp+BOaBO`18jp<><7-$3bnu%+W4cNcNoUCi2C<-l;[YbYAZA.g&'MT")[E$QM,W=H<`Rb*q/2`9pL,Yi3_[Fqp&>)??%'7\;J%Bi5U6Lef8dq9G&c]S`%-gfhC.CoE#7`;[]!Mk\2^\]cF]9H/^GaLqp\h\T:\h"J[b30"PZ5&X%L>Q`O_WZ]:-`U#\]mtei%].hD#rVSgpdY(Ie&;"aFksKn3::+4Cja)L\9c5+j;tanIkQP9b3J0)5OhJ)3as`Si+!Y?]ZSntI1<M]9@On2U*G#p>.AP)mL_>qL%[LBaGN,l0+T.Q&LcM$lQNO#h-+H>l:Xc4H_R#($a0U,$t<ZRL2kgBb8e4^BD)SM]`c-8$FU3fDA!XXBk?/O'9_cnZZ;UPh?0n$gT%U_2sOHcW@Lg]1UtS\JGHh);lF;0HC`<7/OB.O$c?:dsgTQTN[(OMJm)4U2mE.IJlmlBpg-Y?I&ta7p:-m]3b7X55H]cNp6N"-HZs%6rCD+kTbtjjZjki"PZI_>dB/DAAgfU$2/p%KMSlZVO3kA>=fTAYjSCl=bJ'^C48.aU)3'a\@*q4PfJnT!1Mom*q,tVQn/TsQ:1gq%=bIQ8=?L.,hT\uP>Sb0LQc8*Em3=&aYlcV'0J4sF6tfiZ*:(=R;QOb=KF-nR<"Z4iYttJ#,0k:RO]2pO-U"'W^"dqD076_2XSD<k%=K8)3R?%Y:=%+gfA?HfL+s>A.G=BndK7:=P#?:mO=0dFYUA0"95CNQ>>SZ@s\N5P@&q)[8MDFs.)j`%slXUr+($1:Veu4H]GfUQl%(sq,Rrtqq;s0sP)!@AgT<V0`m)VD%q87*[AU4[8^F?q,M#b.hSW$3AUMVJ$lQai..G?,g9^#Y+"kf!m],nNq/l6JXKY]!C\gb5CA%`Rehr]m:S-h4lZiRUYIrReJ#dSq1\NY4m4Qi^90sAhEef/&!`^OXq+)ROs>MZQBt6$K%bl8<bM2`$Pm^(@*ka`:[s1+sobJ6g&c#%_l$:Gd!`@F-8SLUSAdn;n'Hi7\RmCSLcVA94OUql%83Ed%,"'V0&++6X7.3k_+</$cLa,U_,H##3VjT)04.Z7Io4L^^QM&d_B4nP%`Lb_+9@hUk/mX*\'4#-q2uR?D+dPd<RAiu,D6EAgW4UK*7_B*-AF#c.,nh<V/NE*F=*<,d.M;'*KsY`D"!9*YRZ56o%2cG;q4tFK%/`m$ArA/hHbgoIinQ;pgg"'t25C;5(lZ)>$X!8(ckPM8r`nJbX&FPd6,^!+2rX)]?U;>0`H0>FUYX1<$&(mhNB*r[:4PLb<8jH_J%h9?o\6Pp:gbaGR02YKbWafFRt3AgUnca,rOTN^Rt>?X#6m&*tlqL$M1RK^dn>lD+AX>3+2a<th;>(@S1DY7U\*F`7oYdmE-OJC6K%<cn;VGdPk<<^N/aQa1[4Z/h3C,)j:=!"k*_N+RgMPB0_?"f@L.Buth=J7N_*^uXn`nlV3<pjBK$&6qIDII64Qq+):5c&tA>\@Pl%%g.(EbGYB[TX/*poKgAbFI1%RD@UNIs/2Nr?NN:aRiZ8+Gn!R94NU[Lonk'`_9#[ReP[T#q2P6Rg9X;QTB%;P[3=P?k[Ri-*;/!Pe%Y\.0J1:!t=glL^cleWS]]-PDIIh@hF"HmUT8.)RFb/lK%/&2tmZn@>$^?=bV#6;cck&U\3lnQg?\b->h-\n]<5dn+B"o)R#'lAjp%dA%F;^7Prq+.TJb[OhJp2tFTb?u6Z_IK\R:R7#d6?j2b[2$h"/;b"1q4O=[j&X+XGBc[^X!JmB6*nXj%nAW>t[K'i"?*@')^@.4_%MIeFHbo4`2n:de'nk]?ePdU%<g]SbrBu[9[g6M[WGf@1LLV%l@oYWA'c.UMUk)`7b\FbCk[6BZD41=>30-W%K^)QGTJCQYj&:b!I%!g$OQ5lfJ]EiUJd@EuL-OsrXu.qR=5J9^[J7pNaI]tC'-9&)A#)6Qg&!_@%S2sWoi0mGkh&q:bi3TH\Jlsd:_'7[6YAk<^OIk\-F%BjVL&04Krm,Q;#NaqsF(Y<pd(T`"k$F4QfRH_F-![`'="9p...,3%VN?q:,8bf([XPUmE'iib8`isF]UrT$7Pr'o&Hb$*\<=gp^,%EQ&kfBU\H@`7'!((U[Tjg<Ku`%gGjH0%,V[LYB2E+7,lWN:5I2G$\&Ug(,Os&!HXeo+^q=m8p34=^Co)HqkH-+RKEPQ4oU6eS?pV%kncPml_a-CMG(^MCuGcUY=5XZBg:Yq1H.=-59s6Ub*98?o/n!/Fi`-H=E]dTaA-(7gJt)GFJN9MOQe1lJ7WMIU`WM7BlmSU*FqgX%$_m:2K2a\IV&p7Gf;&:.3^si(?aJinJd&5?X?.7Ro=)FU/5g00^W#F%rr!;T(-ImbH^^d6Ae+tk<U!OOJ_u;`>;e\X1EEu.PW^QC%HZBNKo8\U,bdS1UPe,<(m?X!O2'mORjDOBOn5<UX0$O:`*D9`gT9q4rA;""GEqt_(Cr4A#]%1O/j=aDJD^U`c!:aeia`b.>0b5fh%Gs[GXN`qqe&8aNjUAI8<X^,Mk:DQYnUd(HrCY]/tSnSm[iF87[Cbdg1J65"^N@AMKS9V;*>6j0EaEPm"m-!iW)#Y-+NT+H;l:"6C%O$n!kVFMfseKg+<JR,^i%b8JN>_`-XD!O^Jm>'sMS#^d#L;b;$,MuI]iK<G8H6<:.i\ndJYh#$NW#jQci;?(MY*]"O/0ISjX3SV`%qnTn4LJ^5.p.bj<Ce(n?8G2[sI&PnQ%b6K)W*]5SmS3BDF7(#gWe\E$5lIR+D!1?p(0g/X7s\)sr*Q`]?r9'Xooqge^33u_Q(?6.%nNCQ*4m)2"3euPOb?%4ZZr(OaS(&E1-`)BIO-t;p)p8O0XD*"GY9dqN"ZkV#L_IMkVRm-VS1CYN-l:i(fHGV]gOtWJ)WNc;8,SBY%bfL1KnGJ#8pkD9NCd&[4a&sL20phbe=la1CH`K955'"#tB;"ZLJmOso<[J1Yeji[0SJKC-a=EE;r5btRAL,^U4X=O$4uP>\r871n%I(,U;^!NQEh4tR;L]$P9FX'ZX%X(D#_4:.k"^W[t,Jk.C*_7A9V'aj(1.nrBeqXIQ%M.msaQ.CWZ_=!,=<B_/0;rQc%p!(E'm#R$%T(_BLO$5Jr.2_B'Z1fWO5*tN'oMNg/,\3^346eO-$NA=c>H?b25ZYEno]9^Z+[uG-3-K;"qf?c*LSVE"L6ABjrWFc+(*m;aVR5W,%Zf?eNF0l)[AFFt(WufE`_/V7M=E0+^rDtf+h@u$,Dk17foSa?2cmIrQkBs<o2G+qbZ/OF/%rXtrMk.(FNB0_cfI:RJDfmION+8ap%?:F[soTWNCmpl$XcRX@ajpSH2c52f&K<cS`c$-XHc)PE12Hd<Ld-fk(X8M&fq"fob?qUEB($2V#nimbER=fCP5/Ej5RG.c2+Q:XK%-U(c?Mk8fY2XFM\ZE]d(iEjQRs5eP+k=W^g9rs[aYm6:M;h%n"U*0<01,<IN?.V7*e9Uq?Y=e).^G8"#Z!RMnGCMgHpKsNds/@sV%iunKupg[6h%SVl^bJ"_8n9t5PFaO&(`Hr"(G/jR;HcH*WH2m'I+)PIt7i;8`_WUWe55s`V1]F$@@f/HoN))QGGd)8`k7`@Fja$lU%3@Y#P:uN>l2E#Ys`a7EPl(N1e)6_BLrTD'"Y_`c(:`76='W'ec+j9`$m<5@,3V8ff6=PpAYBU[],!_+fA/`lIaKhIXbRd1e%KMCk%&@'stZ&m7e^!hE,)';g5\5)t0f9D`[[bI%WI3+l[r:fu(7's;GXd>%G$5c,S?h,36`Ne&MNh'2nN,F5:m^<12XBWDG#S9#iIckOP%^,M3CJ5=KBm>::l5mi%S3X2(5rU-"`S*d+\bRQtS)"R?6/9EqH:+a,/I,V%Qm#<;jeZ-"-dM;#[0m)!.%,;[28fAg%1]sO;L7g$i%5J3'3d)6d^?A?*]5l0QW7O60$&ht,OLehb'1cYJ@S_>ELXf<+h34<(WpZ),_GrlFgNSu#5fPb2;-\XX%8jc>Cksa_2Xu7!j<^T64%9)+(+$-7SWLoFn0K<4OYYO*A@D6e-emC'8,Db&lH,L;8Df>qlHkr=Q-Hp5_[!%Ud81glFB`)oVI^OT,^+s_h,?KlPCC[4Ue7EB6l%^bQ?!liQP(=LWh4"06->G;apBb=W=8KOpM:^5XioTA;L6cp^3-fkY]Yd`%_p`5\S?A<]+eQK2M#njh<E(FSOoqr>8>I'VPZ=Ml!q%pEsG!_ba/:F=e]E%Y`^Q<*9:^j3@@TVUp'I`Quo_WG\76#[%G6<e%L;]DOieS?S-P%XJp;7E.#&KugREihY'2:*nUiJW*j_-F0?o%,=LF-5^U]`:Crg,_Shs]5+L@G%")a"L*6R5B9Cgp\DA>Mb#/WN&@45:r&sAjY9*f2HHk>+`iMs*@l41U4;=Q1Z9YF(p'+?:!FrAW%KnH0fUbL)Si>GeMUbmj^C^e$OH`-dR00JmOX^!H6KDehnZ@[346CIZ>(5qfmTS[93U1%NB_+$729KNrS1^;/Hi6Tf-KHLc7.bX7D%gis[h"jFFJ[Ma6=>TXQ$jk!iJphZOr()(%r^m^RW[UEH:fAAN!)eCF?bce3Q>V]!bB2.p?n?CQ$[O52FBVK<HdC\SlleOor//AGh%/E*UGP,JMJ'J@3e-pG7Vr#$!OD">"?MFWjGEr;ipHl2RXR<+j7Z_b_Yo-J#_m9rsMA.\g+O.=2W1Rhh7j'iZ?LPKLH'M`rW=P-UI%Qlt`2(^<C#((,Q"Gp=:0I3OF!8H"R9fA&WL*rENK'GmtM1n,lhg]:%"=<IoZQ>AFn/!0K9N>)8D)mQV!<(FO&@R"qjA7-.L-"QM&%QW[i4o!9Ct@B>1)8aioeBUV(qBLS&Tjrm?%BJ`XlGT!R"EGB;W<lYIf/S;t3,3bX%QCar*24pue\'4o[VV.Dn13l8eadU&8mP:i8%hG<%D(O)`bUE3tr3>j!^plG-<1Hu/_IOV@n2)4G[F1,@n>G@5U4"[mOE0VhP<>PK+4gfppr]RuplRJ2[-ShRmjr$M.B,:qsC9"^.%bV%&`hG]>^F$[*+Im]Y^ONpB@b<c[u!DuVQjmb$KVi\uoNp>'q6,dI-dOn4h1D*h>IePp5W6^1n*QZT?R<"U,X=;iphF5_?eY,Fi%-)O%2/R'V;JcN(/Sp:n'a/GWr.cVi68KCS*Dne5OlZ]CgkCnY/k/Z*NqJfs+/O4M7/bJKK6Id.bU=N?<OL#IHE@<c)dgGnhH^EZ'%aVU).2U0t*mOS5L/3_]_EN4+b/;DmXA=Inre%KCWVW2BuT%d0!F!/V:"#<G3Yff&>B1f-mP,>gopc#&e`JC`Dr',2Vd?Z8s!WrJu%h6WDYRoF!i)MYs;]H+#=Bi=3H#?mdkrh*`'/E-(?Q>V_Q#RGY+q4ra>?ka?"hStblrm;PsRsn@A!Catus)NPjdT3cdW%-C.f]\cL%-9N&3>1Q^BUbma<U-kJLZ,pU5@W</nTIQ%,%:PRtMf?.C,J('l@1$)@?C@Af<mHlaa]e1ihZ8@*?MptkrUQ]gc.R$NWhLPJO_F=S%BgO""iKUH&.aRs:\uR4=TQ9n8GAU.n7Ea-%9rpM>g2,s[[dq!.E-DM=aU`Ks=r;8oer"7tCDa.W)6TD8?0'I).;!YGZoWeuAXQ9j%&kfE2VL?BUJJ/8RE^S\>KO`79R_/Or>.Eh;\Rro449lNa[q<,<DO?(D8bR.U4lBQ/8Y>Y%WG?6o('AC."N/hHlncuW=7B_9Aih>u%<K_h;'QhDRBei>nX*HA;g"\L+5A'\hVL%k&k,>83\XERtkPTVT<(@PRDO,-SW`R`\4DLltm=cW>eZ8Gs;,b99W>Rc%X8:!'EiR_9%P[$ts=N\W\Zr)Z#U,g(Y_4V6I-pF3oU-^n2:A(\"PU!)&+FDZ01Wh/dr(NRq<&Qoj?KB0V+s[&FEp@%&:.7is$4-%R"VlK(5$Crk%:j!fYG4\b[$KjX"WZqNih0KFspJfrr4k1-a;+/YTW-U0/g(@;tW,Tfi<%m5lM8<@a>PV,jp$,24X!nISVF=Qb0T2+[c`!^K:rB5a%m?_`IF>XdF=&U1F][^!=K^>Y:K,lfa0rZT)nXp1Y9u43'\\_TG_/-#p^2s^I<GaoT.<^f2.@bCiN)f5FbTL1b@<c$)\X;Xt%Y)tB%#N)m>`>$Ok:ZlTLBSZ*mM(':q1`7PnKpXZ_gFf??FZ-(f.&VAl$N?/dh$OW^4k5b%*fcfnJiJL[V]t,Hl<m+X*R+0j)HH/$QCbr4%,;q"9.<H8%6B@`'QG.]H'8C^jCWXER;0lK7BZd:Y3S!jff9&uc"1f\bS:Z#6o,(%o_0e.J0fdc9Xnp*fcE]@K8PZr)KB/bsJoS5u%X!FTh;gIN#VgqHF]j+@LbZiX:V`;A,pTCDX^)5I#LiZ]DBW"(PjOaqado2&:RAQN[:B>g"FHQ206=n)p>q%M:kG^\@Smpss]qF>a%8".6d'OkR<!1-W7jH)8[eTh?d'N>Za8TeGkm#Lq271Y``!`Ej``'r3Hcc!eF-5SlhrI`pLYe?S-N+X(uCb2/,]l3lBQcJKm0)c6+%g5$cS7EV<2#4]kqU5ESI$6>-G4Hn=`fAEjcSuhMp2YNW-GuP4t,,30MHNt.(,]n;(B[nnsAeAN5AKWep8Js&XN>1aj7#X4Mf9:;5%?i7T=EFlb#\*@\[PD_#*"D)toLPKSN]jRCWTVIclB:<6Ra?-8PldUThX0gQ!)LAh;cKk8F`Hc%PgUIgL!K!3;8`Gr@QP+eo2dBgm%Zn2qq0'O;3cSp9LV09jQ+4P8#k,#IITAs^pVa'WGVg>hgMJS'6543.=D\J62c4O"$KI9pkL#:X5**Qnu&R'(I(#I9GIElIA`r=_j%poP1g*6s?Nh`dG!m>3lg6Y]DEqaK4PU7/^I6i!((DpNEV\bPk<3\WG^m5\uggO/le35lrQ4o:r$cF7/>6-"b"c`Vue&FS3dN"cTm%CoSn*#kr/XrB>m],.5DNU_E1LoNI#h:TTu/Hl+-a7"R'4UZ0XogAqrA`hT/7dg"Iu"C$>nJXgSPb\p+nJOm9'b%8MQFF,ndh\bT9%hG0lbl1U%>r6(eg'1kOhhS;B@(#K0Ahk"+Hk+USohn&YMCg<JpMK33[I4&3_)j\m"j2EG@*64Zub'bhg.<e1MEdua2=bl^>I44j+%%cr_<./1[VX(>7h)[;oVqqd9O_jE;(::Y"=CsaETZ%JQeZQ$*+Rd[dJj2Q<\QZg6*@=2mI7(=uLg4jai%C93T[C+nX*oB(PB'g#r%4,b-Pk^q"rpT2)j(ukg^X\ZmF?c3r3LN*FV?GU7/Zc[E7(jAB<E?FO$mXmO[7N8pei*tJd]jAWaS8mR6(`p[_-93YbnrRQ\$uK:7%)q.<<SfaElHqL'eR#!.u!p,/^A$%t[)s1GNXWYcGa`5Vs1K*XTH)udAF/$'V:6Z^;m=$Xbg_95/6W]+b_d'ecCf0VWjN=2GgF5(c%R0)J6G41[mj,7p"]okJO%cq$E-")u7]e1V+f1rk`lmZ)e=d47r.MR*JoQkn+pe^DO\/Qu(`O^/HE\AGP'e/m''^;tRpL<O`8@]u)%Pl&=d[F3j3::YrN7Z145O.Pn"]UkS4+*aU@L5]0b-^csl2]1T0J);*dL(KKRB:7?VKg*!+Pd/VhRKX)\3cpjH!GEX*db2kmU>*m"%*Nj/-<8N(#95/eR3G&D"D5qI.c$"X+p@Vo_LYgX\1$da"ZIPQ>?%<Z6JY?jlAks-^L!48:@]WB^<'G1>>(qh%.DGXX5<4R&Sf[oa%/jf6Y5Vr4[*F\t:GASGF^<0p$N)C:6ejV#<l^nrNJ`=6BUfE>(iZ<>4HD596(a9?Eo]g=u0#7=:V-1PsNA67+RNCX*RfN`;(a+s]%I/C?TL7p?i@gioNHHZOBWq=r+kaMSSiLu<`!A\b[e#Y>j+FRF(&fDgRc0^Gj!]*\^$kN[TSD/Fp54c_9(]so\I*Kn9JYZkIO:8?W%aE,K&3A%X[-jsrL5Tks.0ENYQ?ef7D!S\=X_T2b/Yc+:;5lOqi>*Y'L!b7dsblQ?i!Mk6jPt,"d;aA'g<_9':5\pPC-m0'BY8&H.%4/s7c+U&!(g'A9@m,0UN+'&JBh$?RQ3Q0H7ogf*t)U!QJU4>)#dK0R\VV$;)3?Ucl5E4;E+TB@2OA,`X[OL-g)&7X#;eL/:RWnF$%]5Bd=HpEVmo%cJ"K_4]t+le+<a);d%@e5Yhh_60Jmu.Bi+Cuff!]g88RW9$3)p(20EuT":T6JH6XDM\%+pk&6QD3n'&dXGAQqd\`%=C2mO,iUo/7KS.__<E3V85_F=Oh_>Z&f@iI!X!$[OMA<l)^bsQl`J@rb)Tr8W,k3HN,@G<:/aNNOTTV*iD.S,b46W5#NXt<pb&:#%+RQt>?cW7^hnu6B3?[]:%4;/:J@,*e!&`0X1hZF9UZ04C!R`li>t"rgA<jq1Jb5BgAK(`IQ#$Ck$o"(IFPHfo_&*9M(!<ZoD#PeK%LV4h/4S98kr;29%;@>%2N2di_YYB+!P`5sd!CS)JpJb0$UaMeYB)k[`p5MX.pk/,Y!WTP@r-d;[+l]EUc9on33V(-qQnB\TX_d>,%YD8](m-5J+6I/cDI-?t=<$/]k6LR:n=EOOr=:G4hbrL8[:L^chom7H)EOAEI+'\.AI(p_QY>:A0XSgs%B-9dHUX[5k`2WL[\e:_I%G*4Z,]dGi#o6L?r3?phXeDeW1fbjh^(J>-IRJP%Xpe>Gq0fB0mPs+Bp:<t%<]_@Y^na]95j6lgR,/qQXF4cIcCbL__E'9%YErDT_%da]gNgsp@Ijn3e_TRfiLQ/<q&U%9S#4&:1BH+mdd%K>acQC]c%]T7Q_kFMQU^Ce]rTk?3!KT<=*-$5)A5G;G#NXG_oV@`T8-YRlG%%*UooBHi/s,4t.Hm!ji)Z`l,)@K8gg'2_j[dfs@9-4(4E5f9HKCB/]1,J&F@-?Kt5Bt9>'E]"B[]:.b673Kq:>S0UWI]aKFXdpq*%!R/"I.Qk@g3rC0XGdW(kPf(:V&l/7*-,lo]6eAf54'rgGX(&g9B;hA$N'NV>TG+Q=D9QeR:eDj7qCT%6WYBeHZVOn,`j1+[I7Y#2%pMGkc?&1$>k@LnT5.fJ8@a7"2n+CR)1\;3Iq,flbCO$J*,992HR>WV$e[r)dN.YSiChF^%&9Xl[?WB3J&13lblHN`c.<oNG?e=^5%\-i4XA"PR?8VH8An;X'1CtO)YJrV,YaAb]M;s7IO\uKf7^5_5\Z<;>-4+6t=\&ZDua"s1?<u$&kBE->,(/d#S>`<l0'\-p-[t=']%&@=ga3GKVCQtS\9BNs^D]'FY.2S4k0@S")\dZT^4Omri=lMg!2qI>@]7o1E+6L=?t)ac"UOg[q5i`%a_0[jQ+bPi*U@QOq.Bs"Bf%@3uOmA6;59OY=EgO1c-+1FHIEQWTn-0q(CrHIfr6-p,(C$anD8(5HI(GVo4D%HHuOb`seg2P+&jTI"df+#>J_RtjK)a6N:VX)2p)%@cerYAj8<Bl#;%AT$;->lRLd'Y%gGIJNQ:u9q0*'Zufn?0`(W6^l-2p\X7'RVPpD]kGabUTC?%/PF66==RPB&*%9$(ao-;D2@m:[%R7j(89I%482@HJWE^Y$(n;t_>eYjPHMXX1](.QFB5W6ruYE-sf,0g$3A.:IQoCDbul]3Y:Zb)8]ahZg.YV!4CZZRR"U0Q33R<K#6%!$!upG`U]R4K<7oGh#VU.$$bEZ4hH#XQQQH`E8i[O2L!-\P.jmb,Ri47_,X:@r9mHn1H*Blf:5=kGmD*'1cobKZU[qk-S^*fYYn7%^!Ge'*p(UEMqYS^)DLcf&UCBf(r4/r`0-7kO"JhMpk2r(N74&(%D/],hG<OmAHg);8@OWh80@9kJr^?HlMq,2)_dSnh**_>/0)"2%[>a.A4T3R>873blbf9o5GmlT&:<$FRXrkp/#0cW\c,U$abn/DRTS2b2q@Tt!A%OE8+G_9(`,=XGj0'2=E0u[q(uohLO%o$.@@n;'%nk;\60IIgscW>*IfeO)u1:fh#)iuh5#K6?&4k7dJ6SD.tDL5Tmfu"/-gZpo?@0b6/ai6'<-1%t\2WhEn8ujG-^8)EtO"Hfam6]%=%p1_MCeC1>Zi4%WT$eTX.?'nCWI>SM$geKc]GJ3RcB[12#"24$.2Z"`*]K4./-bHXdG$icldoCLqEBl)6b^=4Ha5T/dn?I!2HO1Xn%[#nUgO%lM$_FCT-D1mmL>%C4V7Op1D%X0"!ej551a%#.3Q]DTC0g5-5AY*A?=]V"N@Qq5ND')utbf@_1>W)</pj0ADb/MA=J>'.6%@KTN['3o@B)=eM9chV'>9U7emMiDck@f_UJNFq[eYg#f+*juL+`CB/RHYba!R'W_CZ?3BdVJTb2'aT^P#:CI-1YL7AA0\BXE3]N/%b#@1m2HoodnM>-i"gaiX;;XST5Ml5#W_sqI=nAsY@J0mMXrHd]Z>EWM]hR5hc*UAbBSZOb!4BhBY^^n%),J#NZHXHFAHe6dATZT`%.kukkD6j:7URFiTEM<r!D6r)$ZW8")Z>EVdF'dV&T0:(13*;8h%j&eV&Q97]gGM+EbIjS\C;Br`4.@_DOI9ilNmOMG#@hN=W%X@n%,qI_BPb3//afp`R"+n/#8Q$(#_%Z?@ne5R_&.=U@8lL6.bOC1a#a0=(`[#%kq$TJn(Lf3S?qo**T-V`9%TpRLL9G98[%AflB%!Xo%FtS<p>!oGEhY<Z?03,39Z>GGHeLR:deIQgMpmG^V29f4\7>ad@8h/"HqJ05c1eMCm3^$*VHII:)JV'(6Ea":/b"bL:]+EQ^[el(#%Dg#Kr-S`nCcaLe)Ra,eT[P,M'RV\5_-ArQL=fEH1pZ6/%-i5AgnTkh62@cfITX8J.c")rbA@Jqigk&eo.#`36Y\!4+O*K2AmY.d5%L#%S+2N(7"N,,75XK8V(i_1^B[<eWOIqaBt3jU2VgP4VmTE-Rrjm@t4oc0h]Wg;%O':Y%SduFN2Bk!j\aQ[sMnk>CH3DVFcA#B.'%WT,s3.o2S#EqP14HrXehV;/tnp3uj+T&Qm;]!$>4h]SZjbc)VcdR_&:2.P`f.7E#)ZeOcN=)LV'CY9.aH!_BY1'ge.N?'Zdp+3N-%-086+M)_AH,IQPX-,NtJ?;_86EXZ8P,39+m+u^]!l+tS:H62-RddqP797#=Q?II;?T9IUU*A?[?bT29J1(Q54iASMo0GdDFUT9'@%"<b$QcFXH2*3/(R:F)<Hn5:_Z-ilk]60Wt-f[J@k&kk:9l*7Gn#psI3\.iu"_ul`7#YN/t6n4H5PQ7M]I[/F`QMO?6AT+?TA.([0%5h_(bO^Q$<?mSe&a?0LI2YeVcLucpR?U"U8"B35aR"4gLJeIio]ifr<$)VN/OrV;kG$<J'oFanT9/b>3?33#de4Vp#bFQ5o9:7Z,%NG"_e6:Xa#4%-W4UV(1J0aU+h`Hl,iN(_jq.c_5'l,m&[JT?U50s6lHg/PNa--;unM(Y,=ic=;$L::F1h7o[/QO\3";T'iIE'2an%;(f\r8&&LGBXrQ0Ps+T_ARDcR&,FAnUZuI)Y=e?j\mE6>FY8AQ0OZ+$%VEj=\@+L%J:\(cdYc)BDo;6'*]C\G<NA<8$)bDG&)%1#%%^2)"cNFoB;=n*V$76n`Y'7^8e*Q/*Fhu#fm48`OJghlrQk"9Be%o9Cn_hFH"`MVPCRV_Cih:geD(Hu`*_n51aYYrPb=fhm,Y(PZ%m"mK^9K\9<h3&)1J3(#,1@``%)PRjX6(X5*P)8e/"_gO`ENZDe/g9hB3VQ.7A:f5u-VB7FGEkWWM@%?=Q:`qd(2ZOSFR7lWd`30a%H7<&8@FRr(5+V7#-j<kb.p]Yk_U34X0ljs\e*DDA?W%/Bf8Z0jL%aMr[ajA;QHjp^'@*p_AD.Vh^rg0%k8/DD$jiee\6um%klN!Y%E![j6.OK9@dmr$."dTCb9f^((21LF)]:S?sJ:+]!crf"I&=4P9I5pB$mRsQhHU.GfI]7OK!3g2E'D+Mj2Tj871MNUdbK`ueIq?`e%@FKd@G27/%9kX<7T(up%leDm^@L8SSZdMscW[#Z#r7$o]$]C0=5A.7IY<>j#,u:#)-sMa9Bpmk!9Cq9-)B2M>]Z.C_CL6jRHW2\4%*8[Mc$5U5%?-h7uej`^%"_(nEf]'dBoJ(64/04`OrTpQ!:\GBc8&1#,n2DEG)oHh->N49(/6K=;6B6eXhWTrV(,PBUYZgB,&bT2\%V*OAk$gb5@5^'d&8$hcn#01>uTpZol)cM$o%+_qM0W9^`miFka\FMN;W1FUO\PL%MY+EjrZpQa`Nf]@=0eN(l-ISodFC2FMpgq/X%T!d@P+%\'nU<>;+=Q)f1j]-"u,>s^#2HibmDG-%-XCB!KT[\:)GO"Xs?=TZVh6aH]-gFJj`k;ri^]^Ac2QU2T"XhruRPb84[*Wo<%DK?o2Db`t)j]SJGPN9-97]Yg<RUQ7L&36Sl#!Mji;IgQN6C+GrCjW@)(afM'L34'YdrUFK(%%]q2BUQhCnOtEhFl.X>>!1AXeSQa%&j5_MP%^Y0aRcoQ$KF<Oe*hPd[,a8ua!0PH-IE7UrK<]AbqKSuAt%l\0LYXajtL+QH@;d@4;#gE<YO(s\)]WF03M]G=_?A/L3um3%>]S>b<?DFGB9Oerc,Ut[[f<\GPK%#cRFkuE"YVYfSc^.Sjq-s^kru^oW.7#?cZe#M)kYU3I6:f<]+2q[L'Md2aMYWq\R;BFEL;pX%;7eU%O\:SgG%HJ>RAr[V8JtPjEAB"2**cNJ.(>R`k*'@?8f6Pi.$o<6%!d/`I8U]43+8iLX8a(-OR?!2s17KJ!3"-ZRri(%7<DcM%ZFlKOdaEiJ/uDH<f7c=>/;;CIq@Ts,$R7!(#XfCT9c)A$QZ.%T7G*<n.Hs0jYNOY''S\U3X>XAE_@Z1&9Kl&cnd$nt0+s!mdeCt'%_Q^m;eO%5DFJi\9D3D.kP62QQ/g4;N4K6[_E2<uD9qP9#_PUGtGq6cNWoQ\g7`:SNLCJ05\>O5$_J2(5V?cKa8\mH1:?%CfB[5YG%I8((.7@(Ij,mARa@ZR!fYtOe"#Ogoj,gm$BT;3S6`C6@k5n'YQN$SW^j>hM*$5Z:8BK=XGPkFgk-)D^nb^uW9"]5PD>-b2%6'T6U%[bapiqFQW9$F2R]-)nEh6m]KWCT4*P&C$Oo"XE#)n6e`n*mCH'O)VHT6W+J6>efZtnVFqWK+p]af6Jrc_phUi!f+bE`iFCr<>IUj%oNEjn#X`!#d8ki]K$G(2PTWb!oDfb-Jt+d566qg=k>o2e8rs;'H!)FlJiHJBjA9EM#$\3gPGB=_26Scn^fIoo+;BIJ<32"ppYcah%U$PH7EQ<PQ[!dkCn^u=nr?h/cmK"PqgaPg--B>,G4iW0gg=\hM<Zl+[XYTsn]m=+/_X7YG8+$;`i6L.qg.pP]md1kbQTJ(/\UeGO%V:#lt6?Z/>m%F!t08>10Yn5m@00>7TFGtnmLQ8X$j9r6.jVpQ`qXl+'O^,Y660VIOkeFl9:0JOl:,1uTk46:*Uh@uMn!`%A*RP6.%b:C#h&+o0Q:Y&*E^VZP%rVk!hrc:Ig]MJH1>0;djq@b">b%bHCWarlq\1r8R=gi<[oXV\!f!so.?>%2n&ZN5=;fo5WZ'=>e?HEaZ%HG0u^>SAg0<_b[Ilq*#89Ip*KgO#-r;<H18m;=+KiU%&9X,br7)uCAS">.b07F&T,`L_'c2Zc5t3OBJ+[Tm=g,a;th@QsjlV;I(L%lZQbaQ(QZlbSqFKn!,_2cN$RZFbb.,'g'EcY>9e][T\DJ&[.!fpuif/V!#P;0kHi#%EW2.6$^OC"Q1R^)XX6sEF:>n"2@f)`H<<,%d]GnS*[dbq@uLRO2Fc:<%d)`6k]VM9$O4Q,dfK'U=;;A!b"_:b7Wu)rfImr%)j0[C:;FRNCK$S[O7!H"[B*rSf*d`2Uga!P'b/g\%7;p)t`NL>3B@`N.oN1,q7.5mC^+SD:4*o7MG;<-s4f0@OSLd82XAuiVLBJ!HXKDKjUUU1fH,r?cYLIr)iQ'u^XJR@'m"r&cND@Th%l5`,@_OBjDZl_BY:ToF[9WVTrpW`e9G>T]XCFo%CO%D706Sme$1#RQF^4#X2SAEBi3h6St!BELcZ&Bf24pJ_H=tG)(RF/'%=G97^%A1:Pe4SFc:md+Ehcm@j)UEVXk*m&0l^1t.iG@cs,'1lfeA=4?7l:MugjDI%HgP,:=.C..mKQj]<V8-1h(t`U;g'U1>,ae]soUVnW%!T7[>\r.-r]//lNqa=iR(AMC0@M8TqrY^nL!]*pXcj=q^VR@SNl-@b(o"WDH"2eh2&*9L6H]$'AN#88=J=(@lSB6,@T`Mrr1<0uW%\H>uk'Bhcc=ZM:dr6TB6<K*O4PE=Ws)Z\@HK\`#D5tf%q9IrIl".>3^8!ZKOOS?3BpMGlWHQ_.9`55#4i!pu0jKV/nYglATL$-Z8%KeVPUaHI+,fAh.gk9;%jJ*old[l&M@\ik0XCKV9S:#45e)fZ^\cA(,1L1.01W%oR@Jad2:)df"eG@n;-+IZ);(s!9IKnZeOcp8^6%Vj<g>@l&\H!Qk2\=k<:frqba__KdJ)XdVpEG;(41*XF%9,5ZgcB)r:u9n7I":8o`.!mE3gWaH5HT$7UqVsDLbVr-*'.N956(P"3s%LY[]b(dPS7a+<Rqg_[<c.4_)!Lja>.!'#e1Rbd`]'fa@:Io/pAEIWjALUZoHl/(ZB-%2h"4&8:f=ol<WT^ni2D;ACJQk5EJGCKKM%(kt:5eh;uBANi4rU7KF:!5`]#+B:k3JIU*Ce>.g6[d\Xqr/=7S!%@e&'BX%Jr#e_IZ!P;s)q0G_=W@dN@+.(SOI"d)D=0'6UQ2.r%3Wm@Z5qhUP+rD,dmii/j/k.g5rB<lDa>/LQ=Vgo=.n`Ge=#BNY-":/7KAcg]QX>4siU$leM)0*%C??SjN*FqE2=,f_$n'QA'3UEN%OdC'^11fr!)jXj-(U_X-k,s+E<WG;kg?G9:m%GBi[5c;S`VP^aa5MQ,O,nbD*^tMFLotN*V)U]/4cOhM)T\e'[XQVcN8TO*e(D7O%UViopK1r_*ZT>\cU\>5Ro)>5P:,9^!_Qi8hdS*hA\IGA3'$2)n1F-<!E:/+>atd9/7mZ$h0H[FS&PG.lJ5$lN5^8fWRa+S\I_7Q6%/$i901^9i^KLr6d(-52"l!=iSJW,E,R!Z.#&:5IcMP_uZbQY7#CteO2ObuO/[u1e[bfOj)(Dq4]_7sMZ(Wki>//!h=+nc:Wh:!\p%3u@r7[QcdudN&^:*KRdgRpnWdZFMruk!.IZD8BAfABjH;"!OH8r++SI<2QdR)#?*\KSu+lg"7raa0Tk:*ZGXW#0*AW^]lQ6J5@?g%_%$PIL2/j>&+@XboB.$hOV2&t+HVba4h,XHm?s%6(t(m0Lr46@J(t=]-+e)*`>\P/CGt3dM'.%Di]P\Zq9^pUW2<M4e4N($_B36f%&*X9Z`Gcg?13"R(93*nMIMPkgC!.u1,j(,lV=16r\louPC.,.>k(PPb#KTQK1cI*A&kK%U"em>lpj0Nr%8ZA3#LRgFVQ9Fc4.f*H%fcJXc'uM"NWDO.+;h9>iI,n2E@6JJ[*(JQDdY8!2eZ7L*bT,X=Q'2%*Qd8d95MA#?q3[(SgMSuAGL,K-'EX0t4gq;K2@V*.M]2>>%mH6r=\'/<`9\-)?SHGI.^(-mH@j/>IWWY8a'\*bXFTjoT\r5^P`?qQ;WK?kkM]o#p;#;.lllq.All[^9Y<7ZJ>A*]Xgq[k]2OD"0%T`17B?q;#g&C_*PfG`7V)e5*Gm90DuF@7;qdLO`sO*_gI[?$thJ!^FAMIcXcioRYNXdTNBp3gZ-Vno`PoDfD!Be"ZjLp2"@O]c_B%n[_=VOMlg(.HGKEZEtIQdN-5Q63IT`r1pklE?VYI^X'0Dj:jakkXg'FDSOd\3>C3k@&rS"M77/OgZ)OZ-FL1>eIV5iqc6=DND[sl%CrFs[)F?:d"[dCVV(5>/?ZhFSE]Vr4+,Q,VA2s]'WFaC4)e4_H4fE$Wi`F$i6Y05:r9!.qg]uGB#`Q8VllAH`D:*P#N_YC`T)G/&%2+\#Zk+-(A3#.mr.!e=ie8coHb1B&%GQ]kiISlOZgEqN7Jd::(k]s:'4#o]r9i@sl6qEV+4b-EbomfG!c>qBucl@:7c?lT67/,eS%/+gP*\*Qml.p:5f^Rpk-*)h?CTbN\;)=rI.MgQbo[P\0,#H.Z'N9$7<C-_*fQ'/Us+eq=ehI7hg<XlF8=ZT8&=7>pMe?5j8k$U3)%LJ8Y3DGB<f7:+#H:0YhHd3<`ibL:B_:(H*hZ.):MosO#$UPS'&,s$n/5dD=%Cu67%)U8)_gDD:/\\,sFjYgB:*_dY0Bkec4WGYGT%K4(9sC$K:j'h;33U#Iq";r]hY3jF:6DF9nj7oSFjT@njmDW?OaQde"oa*ekhe2SXcjm/].$HotD8o2b<TVu'nrp`k8%6M5o'%F$4%;#Vm.el6e\-u'kTL!KVmENl+7,:5k8X:E?LeG-^l/jWRgXm(rEUSuSeDUM1@qF0*n60j]F2=8s98W?g>,99A3Ykam=-)k,#;-lak%o*d$GfsYX>S[WPim9SK77oNoNkt'NsR[.B@`&0DgWhpamosR9?e-@t%qSRuqVJb&0\.l=o5u0T%C:[,.p`;<;_nTBce25Ad&N3-R%j/#rjg,X7L+J)lH$EgF9CMZL8@jG;,]:-_>3qno.`k[Yr9Jjq#:s1MLC"eYW'%=3DF+HkU2li,U`H8.AB&\X2<`R$.LhS!rBpY3)%eTmaCB`O3V,DkZ@\<u,T&CUl*1#4B5kD3ibhAWkj7Sf.ID)'iXBO^PdB(G?s1sG]"`u&)`Xjhrgk36>5EO_<h*@.,@UnqMPZNMul%o<AVJ[</b?01SYo$Q_B5\u>s7PgV81D!S./1lu;7ZF"^@gr*HaQA16o?@nJ,+,6$P[h$H#FAM`CUQ4cYe)rd'-^Ah23kBAQ$SqP^%Sj)>"aSjLhYX(bQ8$c=1Aoc@7b@oCQe!A:AdD2=g<-3U(,]m"-6sN/f(f`DT&O\I+e]T855C/#-H=WTX*&d">ngO.o2^'LT")H+H%IM!oZEin_rJ4=NZ_7*mgN2!WmM(oiW^tm[\$n'&6P^g5&QN1p($H*5e<HG%rk9rD^<LIRk"V&@76(DK>KH2k9^1pgnS#dQrS(Rt$%dkDlm9F128nRH(?j0gA3qo*<U%:`,/n!gCZU14gSq`OUPMLKkQ_g#1ir?4k237s$S:i.rJ\,-]V5k,/J3"\_<P%q%5%iaeJ0UQ4*%=tB;fLdnA@7VgFPbsaL6l>C,I^MPK>BItFI*lN:^4Z_8nG#>mjRd^`,l>gf_(o\^2,^2+ejb)d2i@F<0C-LIV!`pMmXTe$QjqtO\%V\QeA2eOSU>E0c&P)F,S^q&t-\uKZ@:G4;:mP0SQP+q_ZFjHh$L`+o3=B:7D#qYs?XQ!'lTM`:l54`9E.7SjIpU]`b5K^<WU%0a[%$K#46ZE[R)BbWA.k%q2:$VR@WMqOGuQf8j_fru^mpf"C,od'J@`"9XP"G]IZ#ldH5r\/-K4DFi8";Te9%7_Q57WPhA0rVl/gI#@b%(C$,_Ht<#[[MpB,rV@,1',EATr&'5Ji$08NJgi5TI9]H$.4thG0L*"d`F*MF@>]sD;@Hr89E71)-:/,uM2r6_M*L,g0sO<-MM]Si%<(qZuMi.<g8]RJ@SBA0SE*W`<9L?fro/T-N4ut8F$DI8D@/gM+q5CgW&OHRP*Xh:R+U$";LNLo4Ya$en`Y,>56>.qAQ#7a%&Ber@%<'k7`C",c\NN&[dNt<3\pD.ktJ:G/69*gO9>7iK@#/9DgK+J*IT?s!557SH^:rFW4J;i!0&AmlF>?>&8%8;ZI0;]:I9:)nq$)'(R%Sh^Wr@*<.^#pHtPlKnkN1&oelSON2"17tUXd$P1,%[14<SaNIs0lQ-O+H5Hi)-eYIB$i4C"FD%_$6j.fTo5QG*"hgO^0:_7k>X_O%D(Gr9@]K\^1sP<H'S9c.ioH7h0\XpWom>Z`N^!6e4^n<O$,P6i%>2mj8>-jP,0-MkL2]O,1o@:J*@1jSkdGlN'VZ?<Y-)@O=IONN%-&'>u1>/MN(cqZV8>0I+F@QZIl\m6G`_cTXQ9kR&ge:<g!%rpE$9Dif/q_NDP"(O!Ghm3(8s_j-V.,g&d'-XF,B1YCnSi"M-]W!*%;-(>]%N7th$rI8G#c^TldQoSSA@dOW#e&30jt\(_A&kk%7gO*d2&D:+d,Z?%ohn,\ba+t9RZK9T#U'1XbY&5X`(:3C&;hQbUsR0F%iaQR:q;e:fR__SU@d(LC%Qa<E(j[n@h]4S-P147M2)L3m2NAUUnpJ'Fel%,;RRM@2U)3r47T;`?;JJK,7E!a'Kb\AJVii9[J8"-;%aJ"ZDTc@5u*6$_GPI&OQWk,gI?T6!If=u7*F*;3``F3WlGiUY2a'.iF]BXH^JT^"j4L6"u9/\^`K7M%IFb5G;HU!L4?cCillU`Y&%s6]PM29rj=27g'kh=?QprP!_cQj%BBh=XaBm=0[h-i>nX<bUW5(VSM'E4Tjl!S^)_c!iCPRYjom(D60]W<hTimb2nbp)P`2Wj-!W%QRH`39MVmN9kL*O7pA?5WSn\Za2f]fk3>-2$ku"UD&Q)-[\4Zc^sWbnr4"GHN8h%kDS$N4V1_=-?X3\q-ki(dAh$KW>@#A@L\@B3%XRtr>4fdg8WGn,&4'#>:UM_s'Q8Og(UX&=O'jYuJ'LRgK1A;04k^6:LT^HT2l;b?27YFqXS8mf%<fL`HBu4b7/-<09;"O&(VhnfI%-B`[:M!ce,bkimWIe$(_Na)i(Ys#9G`Tr%SgFP^3A-,6l:pE.\c0SND`E=h<^PX.JD5t21?,8D7Ve<a]'>->CE%8/+4oU,Vi9:.q%Z:P?S0e>4u'UFNq!Z=aJ[90]No=2\KQ5-(,Y$)0)7e'0VC0I+o!&4ph2T]2_%egf'I*9WbpP%\Up8m3)j0h(W(dBJgU%uYcCmdcV%Z]IV^YeVAcONfFKJqD<ZR]hIr+a'8CD/uOUDmsNrRFP(m!L+pfgn*dQ!V8ji9+DlV!ls%??d-*/%VN6Lf3d\5GhOiD0kT>#Q%lk(%ZH9t9Yb#kl<'aC%DUF?=Tn"kmEGHsFUR?7Er.+G+qh3Bo^c#PnLaoJGC49BE-m2_8R>:p1C=l30W+4MP0MMNb-#PBp[NlKq79!^W%:m4mY;*]m5?VNri;\ZgDW1k3'5+B8nU6$,$oBXH5Nf(D%W[L&:r\@DL5dWP!<"uQS*dihn2DcB1-4'aj&r]+EnHH6&@8K@c';""E%(/Y(!]bb2nHRbM.i%+n^gU(0AZ%m,/!_#(&>_u]UEJU5eNfK9:R#B(>'THk0USEhqRZ7`jekr%d]MB;kS;nU1Fg.X9K["OZ'G0Cj%C`UL'-"AU*UM.l4H.&XdJE.D'O@&t`*Q;>!`sGh4-dAcg3#jQ59Lj)5eNYCV3;VaX.%8A+8sE1.,N$T&adt=HUIpbJ5SP&SA5m!J%fk2<C7>)bQb:"L!L2gbR>!-,>X!mo%o*R6&,-I\!(512R9M)JmMC:/)`OGG`%9$0kVf&d3<)SDrSpORM3%R(-0kj`jMjPB&:f<g=%O>n>H'TIIlgdEGWj0#hF6:l03FLkpRMAA'#<C"TjEglYl"=P_Qp?3RVhDO[8pK!`GU:%EAU_FB+`=#S$fVn%*WU'GSPkt;er+&Zh%X\C.&9hH-=b8$G$bBVf/:f>)23dE5)+;VsJR05eCeh*]unI2gMNBF<qV2-CTi%ul_W-bTHPYsp7;id0S&<g!N<nPKj@No#K&S]d:%-RklUqZW0Z@7AaZ4-<)5p_0m<$l<IQAeR8EIM4LDB,HbF6A@pZJQ2Brqs"R5Scgu8ruT@]C)kP?&IXc50t>HFF'+CqqCT]klE8s;%a'.\DILOj^p@'3!Jf78Bn-8h<oZXkkD(PZil@(@#/:"1Gs#.)rHi%P$:EhN3TAJNnlqJ_%reO?JT>f^ZIZ82Bn&K$UK]9TUq;QX_%FN<q.(o@>T\6jWtL$>gRL:W):$L+;jX^M+,C+LAp6mRb>&8UMa2t+KGaj[$,WqFRk'#P_Ol^=%j"rnRY7#Is!Ar#3`'Kq7S.a@DA%?4S9pVBI!0T+a'f>P6XMau$on-)HFiAa`\O=H<K*?[qmO,*><F]QV]TK8@I?W8=g62NcYI,[DXO756uHnP*IqJ9%bW@St(i;W""^%U;j.8']Q?uk%Hq;ES+O(`u-mRY,VnU81Z4uc6pOp!SIKU:1B?RS@9[HM.JP7UU;;N.,A!"ZT<rf-%mA%`3M"jm4ZZ:o$2,4,^*[K%`(!EGQLttEBNHGpV'1aCh)L6[!D-)!&W9(NS$=!==O^oP7Nn>AiXMAG(Q66fMqV**^g`F=4_D6,Cu0Nfc=0YrdJ%4k@TcYdV1WGp%(`e!+/-`XeHF$^)Ch&oPb#p:^9YMsRZ"Ahf@f=V?@D<]K-Eu/>_*DBe('lIr0`lo;,tONW7:9QjpHATE\G1/=rgH!W?o-9\1P``>%s#;$iX56#mQ>'"kar6_l]jko??X>p;2m^kCU-f?T`GP?C.L&Nbo)38X=P0$3:5Qg((7!Tm(bG!&qMmENCpp)t%YN#/'sn$p-'lS`%YkX[m$>]on+i[n#Fr5&2SACp'So5hXMmr;J*+uL[radgG@^%DpgHklS#H#Jr!=]HI<3E9(JES[h<^+5(/F:.sWC1,SkP6CQAPXj)%(C;XnPi`_eCprVhLVTWRl!kT3:1.M"ajqRH=B=Cgh,b1jeh)#'N=f8pq-tl",-^V7&:sfT@[t6.=@$4/Ik<ro4+TinJC;G+@$0a@%WB2<.GpeOf3CRZ.qAdO?>!$jp;7oAhZO&1gWp?`&JOLXWZ3H-#Z5CJ/J\Xan$1*?\CF#ItLVNtZ=(KfN[ue>TX<US%Yh8=@F(<p[%0?%\jr>Xt:>l?`n(-YKhg:BA.(IZ3:Q"T:M;8C1*UR3I"7\mQ#nhJ'@`07*>&DP^UYA0ODq3,!]q>9X22:C<\3\8-p\%FbmiVS'%%\1e<=-n'Y6C]22qB?GgT^_6?*L(VshoEo&&9<#CWpn$c_4Q,\Al7`kC+5UQM-"Ll-Y=9dk%13(QFfcY1>p0_Xf6F`as&kM_TFV!u%B3!7k`R4fu=M,9]^)NK7V\*EX,E^YAm:b`UaZV+)?1IS(CQ,W]eZ^T2cA>oH7/_XHoB2&.TrqGarM"b>,+(`HH!u97kn0IoIW_0j%(8lVsI#8[3A+d8Mo#lT#;WlO?28UCB.2DMC-*`i1;JJE.-dMWdd&g%"+)/;YCZ]5XW73^V'\A`p.^S6-_SFd012MaAeK'NoR,>mb%o8B!'+3UWdjHl5UI]kt;IQ=VQ*%pBoQEH<WNjiGbbfK^4bo.5=q9IILUhMhpV\;M]LT[)nI>Qs#@tg9\O6Uf3LG?oo0e@#UbJ'b<%_"h@QSgWoq&*Ch.UWrVC&N]5>^u9\`f"7>Wp!k9@^PrEZ8$)I#r)ic3f"h2kf>IEJ;*S*RZa;tp5J6j6+h6Qie5U?9>3fG?<HrYm%5*jB]mK[EPm!KMcqCq&Q7_^6B=&/LBM"OcNIl";mfN>VEHEfYu%<P%sX:M0,WYLp6l`2-a-'1:j^*i6BYG)eP>DMkPn>\EVI1^JM%\$<aF%d'jr2XSL(eqZ1bBqE6=cr2sC_6\Vi%A=f4&8$#pC++/g1L;q\7`Za$XD2KKMmGU75d<=@X:GJ4XY:)R*t5%u&'#@J@mRsG%P0.LWrZ%%aPTqa06g$l6@$\cfY=K`CCta&p80:J=?:j7cmug%9q=S<To6l!:cM<Q^3lXnj=qIK)qO!IOqaL?`Ub7"a#5Ao'$0TDH%a5>$231LL.BWL"Af[dcX5%Gh"eHF/&/DKWOo-#,SEPg#s,3#-]_MYbK8ocrTA(IDDBK>>Ska/fRp?Idi9,3cm"RIhU(TM7W#f8kZ%`f2qVqTHeM"F'iVWdM`,4s??`,4s'Olq+thU"Oi@:9HXj/Mm>GM[aF8c">UH@D;\4$j\?s1QE=XXoaa:@:Z].T\adB(GV/A,bc/k%C('#j*gW\90U.:%*lOlNlfWTGC).c=EEYYA\91nu4[Zqm2hZ))fPsZ0P^Sq8na'O[_f_XfmLDBs4\jJt7daII@If`]2'VIa]eI$<%j-.D>j6nuUNNINtc`>l_!W2!&+l/&II;h`ld-N:><fGf/F3COX[XYoZ/QcdsEM^/%+sR#h!OEgR:U4:7^UO(u[)kc[1ttJK]UM!Y%cPID;r;0Rjl`/iA7WJ]\k]Og3YK+OjPn1JJO&`"_m!9cb`Y+\.YK,\AhWa]XI/E0Tlg^La9_<Wn2Q:S?4e>B<SR'"W;_1[@m(+j8%#X7mlUO$3f[A%l3:,P0+\m%b]6a&QQ0T)o2dHa!P*TQe':EBFRkVWrJbVsj]Ys>K;-@-,3NYL\7IW)A>fbE'K3u5MA9:'S`:*I6R%K@=VK@4EGR'Z`oB,b(N4jGsW>\h?^Thu('\G2N_D!:&PY.SJF@[,nRFTFg,i+l+EsY`5+J7C$?%e+;3_ZF;8DaZdK`fcN,bf:\7J%\j[mt)[dqg?r"!4<o2e(/b.*']U.)I,M?QsI65OlG0n.cd&2L+dq1Q$EaL,nFJb#uEXqJ1)ac\sTJ_KhR4&]sL5ClJ]9$LU1aR?]%PA.qi<[?CI*WbCkqo/9?,,,P-M;HcHgeW*LFs!`3\;<*DO+e1nNeeA9N<Q&)0IPRf5ol)$j+XPsQl+6=>^&=G`o`"]DbqDlj-!Te%0%IJUH9#DBapcAE9H-om=,h9u%6Ld$&gH&6mQ:R"L@t1a1MrM+Ij3A(4<"@(C"ckrdY[ZO&'j=j,?`iec*Mu&Eb1ch`d8%1Vq9ND%UAaVq3714Li+#c@kt1jfYeq$7gt7YqnM_'UKFB'_IV'o5'r674UEJr',%A:X.#S7lbiQ^;U`5`qOo]'=e+Ftu5[D-;Gu@_EQq_]\%S:!-,*.]bd6(JeGkbN<1Vu#qteY1VMNh&(Q\`M;g;j7$iO&p3_n*JSq"0u]-h\`35GuE7N0]Dc;"n[O=FVSX!%6%3FDeHl;?gQm(%WUHAhO:NdA8!;KdO7J/?e[_ql!CPlGK*'rn<eGl$j_=b*^3<c%9YgH8h>6;1^m^MhI=H"*&e7[rFmM&lM4-RH"0rIX%g:':!OuVF%kh+Xs:cTj?L;H,BGZ8s@Zi"+iDC!]SHXW`%f982=?,&m2jZbu47^9DleaSl31VR1Va;;Ghe)Z74*U)lA8s\*aNl@#um'Hd!p8Lh\%JQ2L6chd]0Ctj6uc9muNNP$cZ\U"H^D6[_-X:X"8n"j@YScP-ak&Rl"k&A!UOfuM:9i0]M/jL[QKoXHHk(FD/;*)JHrWA6_EK3md%l)e9K%(m"1U?O-NVRd\cF0gEO'VHY&^XGsS]0,$8%O.ED'64F8mkY@X,=(cEm_&XHHW)LE@KO?4o*DE6=tbrjBkfXp\V8u6S^)OT%G+2cJ)msu'c96RJ95:<Ucf"ka??g4QDI`#ATQd!SZQD*287U]A?HU"mU/%]/e@r(Xm$%0(-lS&YS31=&5GhA7Jb@^H,T`rc6mmW[%XSO*t#0r-R"&>d*TXW%lL/^YloqI7ErW!<#"$t3;!$5;I?rc?&Yc0TrU3<RJT\&/t<QQH!FN'XSNi9,oC>XcH/4(?_j-nWb4?&)p%OC^^VJX4(Y2E$+gY@eI<$h4hb:nf/pF*N^-m'Uq<L<a%W7CD9[e7"f9WQX:$4DV)as&,I6+f:S8W(Y4pi\fJ:C"iJCMBOO9U[cjM%A,%rY4cZ:m_LOn=8H=F5HU&tsEF75s9mGCoV?]LZEmbG42e6U;R6RGC%')?akGKA36eP;>SNg3BP#YSlB'RV"hO$FI\R<j)RPHL/%316(h.:?,eNTW?2IR/B-)%I,Wiro*e):#=PQKYDL?h-IB(M]%Ym!g#Fg,hYF3'o%_k(%mPqWdtsm#1)<9U4SpYK&!bnI2acbd2&r%7>90%GXN1ue&s\'Wn/e;A,*G,UfhQOSbb>fb([T7>5i;OfQ7K6@Kn:BrJm&&ls7&cs4UtR[P)+O$9b>f8![`fbT_BP7-$McprJ>"%oep=C%qQ#`7%MXrDq>O8m$M9n=n9AJ<T^Ntdc/\g2JpOl;_c`NeSNtOYa`@$b:u%oM:<`]V+9cklM=Q5Rh<]cB9@nImD<O=6t@KA%2&Lo*LRjF"8X5Hl)!C)0]?pU6,,9E31L,@lD'7%t!^c&dmPBF5?K+8:LrUSU2u_3n;3#;Q\2?Zm:U<Sm<!6[fR<<sJ'R9)u&-:el%2mPUmBHfV^LC!G73#3kda+?fFi<()mo1+3-;t[`gF!1<!X,\23:dRs,r<QM&>j:^5U&5>iDNP<)Wm/;[K#i$62Z8')[^%c!(/C\t%e3a\a+_d=-=cD>`:!ia]/SVo(XT1mdaQf/JN)e6n",'YZ3L?L;Y&tJZg2_Ye799rbXDM"S/fpNh2YY!PY\9jfPes-AOd()Od[b%e%ZP^qXDEJdC5'UY05^(@*.iBNR78^$kIkflPI/am,ChU\7\s^!8KcpN4,Eu3W&.$aPe3)gY_6WC2V(TC-^;EfbWQTUg>%nUQa0+:H%>/r7sX'O=6*c?eA%^j#2(.D;`1jpe=6cTeTaLkoT;mE$(=rY]'#p*%&b\E'`3Ds7Qg<c=f_?%kX`*']]\rAL,/IeVJjN!.CEc;SR%6KH6l7Iu_u6F4`OWn+L(Oa:J[bUT=fd/`AT1!%B!pPlGL*Ii%]`6h%TbD0[0YKd4@k@qD-P?>lf7<J0lX_jL@Ea8W(F0#A`JqpJ&%34se5d:94(cQG%HG[(P<O.#[FKhKJF^i#<02pB?%6[sh+(S*/!fp,?J@MD(0^PDDm<ZN2_ASRZcF=I]\Pr*EVPr1'JI?Cl,Zi'P%%%OC)i%9e%*(b?-fnYLKe4ku@Jk,O)V:OGKPlK?09nN-N@.28IJIM:1EaDI(/"5n"GE,6OH^$F%;NVp]+\8Y_TQ)>RQ`=tk_#)&SL%C'O;p,di0M%m\'8d3dB5\Ibo5]'j%727mVf8Y*gqkn68m6AZrDl0Buc_p&!ga+7'U[!13B.6rrW%(L=2*b,>NS*>N^;CXr!K?UN.%g!N`Z:;@u&AI[(([8MSFG_HOq1Z:9W<4`;>ZcK[*Y`o-K!VQg[Bg0FcHZM_[10anePEGTEKs:LkWB63-o6!J?2?e9F^<@h(Z_fA$%q8Zpr>*pBP]`TN->7g"Uc:ienfAMt+mX'>]@PLn-cZID?gUN>:T>H<4]^2ZR1rI)Z@L1;^lmKb5RJ37SD>HEX7SC.aF-EW#DEt\q%JBrI;T$+::HFqUghN$G)h)9>`70]P<=ZFE(DD;.\+N<FXLHo<?#ZiUK0d*HV>/37@ZCB@Q6H@dEBQ91#1($'N./Cl?!-;DBh6esE%$lO-42T8ac[rM)BUC;5do*["]&Z80HZ_b=-c8ks2/[F'*UV(QAkHaPCH.b/=315\TN%FQWbLm@L]BmM.[BD?(LMb;YFrdgiG&Rd8%&!mO0M?\WOSc#4UT5VY_iC@]AbcuQDZpbF?PX!2pW?1?(7PteX#KJF%iRpdJ9A\V"GS%D1?gJOL&16c&F:10t*#ZY-#CX*l!L8gm%&os+ETg!Y")fe620J54&5;BFCGi+$.jU7IS36#\UfoJ2UU,CI$7]2'o:H)>q,i%cpGrE;<?&LX"rdB#QqIPt7?\OF`H2"?$*`cL/%7kXZt7AlF%>#&fD]2Pco6p<hs5)PdlEq,Pe,f-2l!4:Dga]74T:D8hsfb4gIOi^H9a)e3Y*g(.G@.O+_CdR1hbjh\gm,rW32Ls6+%QOKY9D%&$>L1s^&9cE^XchN7e[3mBC=A)9r0M92s#O$\P=uol!24cZhNEr5]JW0M@LH-Z]()Y[=<fthJ-.okSBCUAV5.r_m[@C#f%[@;0`@_%<:9Uj-!KeSobpN8FW$%8b;[Hb*^LhPq(,pHJ<<6U_FPN.Cq#B7Q&75L!b"8H!Q@ju?Y4kS)jN/j991ims/qicua[KR@V%1ib8?&geKUr/>/5.N+6,[TR,`/u*t\IJc2_)Ta'3(X^Mm[Qo!RbnLf^@Rrs5bp9jcK-)"0;-(Fr8)t-L#k'@?Ok,\Tkt4Di8SBZ'%+>0FO-=lQg(!S;'7rsZ#1m&c(o'8f]Nf6/hb@i$38<QM5j6(_%i\DDi3IR:)To;H.Vlfm?%U17(M^fX40B#gV9]VW$!`ID`HYD)G%Q)SHheC:3F&WLV!=i2-fUd)<jT*$<&Ko9UknmktTk;&ed0&e&nk1#UeQ:1@"65S#S3?n=;I(+pW?!1Z76m$6'kQAAO7fElnUu!:6%G!3F9;,blH=cJ0:BP(HYnJQAifKD\cREB-qgTO1h7_4IH*h*OJQdHX;d9`0e9XW*i7%93XXf[uB_dkUKW1%p`17G)kbo4/6-d0DK%JrE0:>:\i`VMo,YjcF/;N!=m_0qsUr[[UBjb@p%QR2npi+(WRY"!&7"1!+)UG1skX)3$S@MuEur-N-Z`!YWrFiO$Hac=t*Qgha"2%glV[a/+/iQ,c$j,fPViA)^t,GVN>CR>.$pmS?f\`rWm5`SL2K*UcH2YY?aJ`fk32L\WDPWg6-9MX*-T!IHtPhqV,",$sY<gX6B=i%khP.cT8K[_S>SAg:s=E6:?<n;r/<*D#=Tj50</]]FeM@R<mf!(_m/8m+=!ordAKi2,Hksd(9a14n0=]jlGa:'+JXKbF)2^'"Qd%O%N/i_;kR4/E-=RFNN!>HlKgA1XF:Df'IADb;NdSW=j-[II^_kD7(&#IVp`eL-,6H_$PEUp)PPX.U,+kl0_[m%RKL`3Y+gn:geCi.[%_0r7PQJt>9;]C2qGmH[F^J!97m6i?Bfe17<Y,Rdu]$6kGYS@_(ZR!/"A"8bYTTO&e.`Hl)EPF*t[T_@Am1;(u"3<95OQk;Qs+Di/%EYEAGCED@J6MLac;iEt#a"@muqM-;WZd%()e6BSC6$h7jL4o,^5VA9q6\*ZMH/11j<EF=0f&V#eBZALR%/gX.flL+bX&tKj,'KP=%dLCURi_d!SKl-o"*HJg"EP2t?AQs-4.NU%X#@WNl-enHOH'[ZmG&EOFl62p=20d5'!)F)rFH$9sA%4##"5nS=<$;]'[q;2,.]KWQ%*:CgYZD&B1'Do)GV=H=5JFmaRD9OI9n4>L*?`H8(6$JSX0PThH=Jq3,Nn"P/H;%u"hggd.=WJ+OkT8It[At?-?:n`Op01Ra%:/e^%pAZOQQ=>qE#C"Vu<rgGmbF&#mSCmKS1K-%q,(7$WVeg9Ef.N3+I!66XGqObql<caW[UWdn-hHl\(<+3'>ILUFdrb-4EepiLCce($%%`:T<Imu,N#49g^aC(ACZ!`q<X8J[i*"a%b)2j*Wg;,2)X0%nDY;`a8R*UUM<qU'.OH6SZU52AS1!@hY(o3"MFJQnr9n_#l2Jpj=%-:7Q,[7+8f#Y@da##Q$W`D>5=Y)+W<<IRgYeT&Nf9-P]b:#CqB<t(A54d$)->/!AkOpFX%bMnS]Llf[0N3Ytd+k?+N5GK>f#+^)Z%Ukk+.<gF^q;FJa.9;*HBIK]!cU4^!#Wi#6G,/WfN.`<'!m5d`,-mIfIg'3oi&b5s<Ze="W&RI/ZE0;JUR[ZBU.>_BLgc\.?<Q$;Q%o2V6X,1F)I:t*i@R1D/KO=1]Hh:"B,Cub->4AJU=UTbb9f0h<jQ/nU&-9=W[Rckka'7H8:ejOZZN,kkchd/pRCB$pN#_tr#fYKuf%>4XRXZ1Bm%eU>E^lB(Q.i-LI_i@FUu^!1UmQd>5Y+H2*!)](f*F^!=R&j[B%S?2H6Jm]2><brR<ZlIsZclCJ5`TN%"A9tg_fgHBL%4f?D&M',Sp4sC9STCTZ;&VNPFD;;Z-!n*P4O@7G][Knq@&O@"m#\&h#bnLdVeJqpn">L.)f^)6CKH@9Ppq&Kt4C\I3QJ1>Y,L'9`%8-:SVfB;t;%k2)fpX)6"cRep8BcuOTgGQ-b3*/"rJtWD.Hs/):U=r;_dcs[3+k(J!K2!Pg>&qh!5sX#N2(jN#\u@Z^b96[!W.<l_%iSoX5bI2jDAH)f!//rcXjFMD8AbTjbX[,'Ec[8SnVi](^qA%IN9OV&;g]:!aK0slE<^^cWN0kC4p`qH,nb7EnNig_Z*a>e45.hqf%f2c,'&L*>qD!XRFmTU]h4lb1/K1G^.QC^(oo0+3II,<O$MD)p-Nc/a@qX]$]b\>qKa.cnFB,D'5g<Zh]kA80NJ?Q`?bl8;UNX@q<%peOk77F`G3djI'O?otCdgq'9'5G.YAUWQGpA[N(*r9$?.X\cPt/+eZI#I`jNFf^g<Z]i@m':98OX-Sp9F1Xf^$.Rg,8GS6YBJ5;K%&0F:Z\UMdSl"Ujum:nOrnp3<S-q>@u`XN-$Yk'$.HOkTi^YmaYKn"BGXloT:0B=5FH"[0(0>s`?)lkR_N6a$+YM&8`[>AtSeSZ[@%`4%NTrF%B2i)>M*k@cM-F]LThm[Q*"f8]<rLYk$k.c232QdI$!A5$O&bIZu/-X\`)$R2&[aKCLf8T@+('!Vq@q^gN:?T$Wl\=[=-%F4]jiVa%dn_o$)0b6,WUqt^o/7n<FS@XmoEL;.4i;5i[tgZRO-pS-X)/>O^-_E/-c\=\h0XNWfU47^HDM:A7@Zs<q'lP`YX\Cc#]%pR0&*`P.G!o--llPW&o:83knuOM^:29%S^F;6)q!W1n8.pkGm7G@b"KO^H;(?P[&QBuMuBo8D=5c$/KC?PN0``<D[T!Fc)3>PS9*%E:&'R<I#sGe/%^0UKsk:Rb_%nn#,EoB-<7RT45@Id'<?HK;T)EJVhocRn*h$,a+))5pa5d[cT09R_^qoDn:UL&D0NAfaa">ddh2>%VA:6m!4WT!./>a64"CAJ,uV$tT(+#9XY&:c;heWcgL8kS\I]Bm]?`2Q/'b'9;#utFFJ&B/OAVlISEPQmbSQ:!#PRTG46AM?Q=DV\%9sZ8p)[#L8PF].Z&[j>lr09Y+Y)%'_HOj30FQH5=<1FEKf&]`5ae>0M`=%F([jbED+L#@FK*+#/",jM)[$V0N>gk5[`CX2TgO;lu%)>N'!nE.rqMY?(#;LG5onLP*Vg`ib2I5K>S^.hH:2SAtE5Kc)cO.A1Gqs.f#Kq3)T-0q9bPG@?Zf3`.aWutI::M.47/r]33,0Bc;%FIrO^BjC'>?p"jF]2*rZW2-t":pJ3TCqEJnffE^4'-QH"i;`O[6.k<`@>2%!><[/$YVOmhOn,LfG0_?);(7(`4orNpBA7h9jOM2_%F_0GJI*4&,.'mUBZ8`g":P;iK[eW]#[f%QS1]Id)e7h@EpOp<4dcEUm[cHR*mg7`/4JEU%*f(!CDsn";@@gtT:\_pF]?PW+d(;3l%@]&m`]<^Z_!A_(KA=aF!F\>f#=G\)KqG'#WbuXWsAN*9k$bd;.dZ42F[$#9WjuWmjp76TbmO<pV[;#jM9#05?&g27lY]sDW^>1q-%OkfOCPt`K@js-V9jdZ!b>U`bKaHaV+PToj;[Q0d,Kju9/^Ki9._C?os4Xh:pO2Z`!L"9,Pj[kRL)':RO\Wk+J4XmbWC2%n_Up/:@%L5UKp<\)Z0\+rmWf]KrZ;#lkB/1(F9'I*CVb`*5HGG>:S]2:2>DA9NMd3IdCiTi\qNfY36]p,P2J%AM0]@tZAjeH#/B38WM?-ocj%/D\SK.%H1#Vi&WX_XYsDWUr<r-G%6pT4+%M2`jT3;pXUnm73iVB4E=]UB##=Gmp'N&3"-#n=ot$EA*`1Z6m"!L$"qajjR2[U'oi^%):QW]i[O_G),JEbd;C]iLLlC`[r#([->U'KCV.\>`J-SGh.0Pq,7jKr@THsUTmL3,R8qRF%+HUjrpRJ@/B-b@f=%/B%!=W)DDE`B%Xg=?6rjJBYLg[PgIp9-9pQ>8NheTZKjNgSpHG\(`ebo&%f\oWENd=$5`_MOg1j@+$+L1taWQ"F."a'dQD4u[YISAYGV+i6(pft&Y%$W.W#Kd"Gs4:%,YkhGnn9PmS3gT4*b/:O%)qBrqF+Xe;\<PNfh^PUJrXue_Gm=f1sgNs;;kVbK"RJ*&>2[R9Kh2&%/p4IP/q6,M/%obR?/lo+;ug2CR/hKFR;c:<7l?)m:YH=^#!,fuudBW.Xs?k`=[AXQqS\&(Q@&[g,%=h(JV0J#kOkQPi"lkhR+_oMJ,./_^P;WphF%0O;cL8Q7WLQef-^LJVS+XIVs==1D=+XCV\a(7Jt0Obci5?lBU&O(>KQf3^_CX6s56C3bVN`'dk$SK?e5UtMoCp(7Ps(QEUtMT];[%MR[i$nRbW_7U1LUMlRP3Ac.=h>5?5$Us<3g$uC>(ETI\6m0&<VE^0@+4+Sm@Q*603<4Z;a\?)&JG266mr<>".^9beK\PbN]OA[LF%;iZjJ*pbT4K/n#?Fu]3SY5"W'Rk2ij_;Qpu6IZa?i:/3R;HGucUmnsT"WrYX'6Q_L_.-iU\1>+CEAQXXM"LGd0QC0-Wh5'V1,T";%gOM13cGW+U0p'jQe!/[UO?:Aq[^7:H86h2Z3cR=(+g)oqHcd?))An:r_)?9rO:t]oq`0(#'#YMS]oism,H``Ql#UXk>?P!qERNK$%``qDh=uBU;Qn^X?`Q1"bFl&!1ePtVJQ/`q&+DD_Lk"Os?1aQAp`*6Y]dmd<L'lWK>`cu:.,2%a^@SF-\l-'nBU\q#W?2Mp=FQs3$%nL74=&$i2#JIZg^R&DMRV-SPJXt4m5=n#0ld8A'UGO!n?n&$%qAV*M/!9CLaH=43=@Iqa"\^Dqs\9$D2[jn*60NZnL=uQDB\^KTK%b`Q_c[G+h0LUhI%Zung]Q(BbWbV8/dZY\)q!bAJ/T412ge.mdKPn/"kJN%YGLq:SZK@KSS;fV*VViGJJe?qe@D:B;s^8B:WVlmfV%X2n5AE#OZ0*E(ToVP%8F'j-@0OfU+bSf+IWMOU^u%[%B<nK$cG=hZM/f8)D5]eK$/DKY%NIg&_d>K$@'8'd:3cD2Z#>-YV^)R-nN%:rYO/lP!df#>7ntW"2q^>H3.M`AC@6WY^0rUX1iKR1kCK#_6QCp*W@X]sZq'GPsPI>It6]#`TSPP<9%,rnR,I*P50%ilo@[*Y?!?%f8fp&?)3mJ0ReXjHQ8re!d`XYAG$sm'-#-64W[7l>C7L*G!q3^dA*ZB,>Q9cbNO+=M)ZV@q$c&#+4p7Hke?G]fN6aD[.A4+cTRn)%!V"<NF'XTP"3D>#3SX-GZ'obHj7u&1MFT,DjFQZ"G^*?*raM%Qq9<o&,+SHt9[%Db%H:fF';mCN0A)]M7%R?a`?]t94GGZ,$/+Ws%C!:K*T5C.p:$am>ilM!e5GZSmhi"b4l(NR4HT\N2^U_J_Tmj=>clD=0S'LF]e8M'JH+Af(!4*@EVg];C\8Chnq@O#D1j$DuL\P`-%Gon++N#?ltZosPmqf$Y'8thK&Rd#qr,^pDp):,mMhe^"r3q8]apHG,B:#!mKbRY^oN:;Z!:$`;4&-0l`Y3RP`_1?Se,P$W;:&U<>%TMb?'Q'.ekm0KIqL13X9jR44Hr-at$-@^*.D$VM=#M\>.5Yh;*eq4RE+&"he(W!X(bZMdAjR7M:bG6h$(OO3D+1j45!c,028)+VB%nQaIK*5SP.8eN+hmH$>%K>fC.fuEu@4g(L#rEs@($'ccLN%PKsqn:?Y,B?!kEnWPJHP*f]!r&0GkJt-j`3J-!UIs>1+Ii6Kk]":m%M>NtQIIt>Rn93X]b+/@Frc`?CEkc=$?>O)k3ME!\0F^Y?X^9V<q34/D0E\kWG4GmE*])</TNtVl[M8PTKW(UoL\sk.NT?29Br>/W%ncu4ejf0U-b`_pqr4u3V%CIHhbSHFga<.XS,5I.(#0GcCVrHcU,otJJakquMeB$N>g3o"BDcnO<:&`^RR?X2l/RQEuq-/nk%E5Am%rqmphM\TJMo(PIkR;ML"A4O7nr'eQGhh@3j!GNTJ6h1K#h5a<M5'eQWWV*7jZIsRI,koVN2V3;$Yqr8--"Xm[4+DZ@bGVh"(Z]`:%iS?'B]Wkgu4e@@.rKhkida=,[jPJe!X"gB(pAH=KhB'RbYaR!S(QcO0UcHl6MbS"j#p2(gBjUZkgOB!QA9+RU;\Wej&;t%*5KBOf%m,u#YKuG`U_qA>cm0J*qSZr!5A(rrA>6Eq,;Z`gSQsYR]o<WStp6Y&e*94MU?J-=%2^8"_L!AF,aYP;1?-^c5/fNI)V+XRqNRaVe%gYV/:,J%Z`^;#NpOO8#W3K>5/G]@=/RUG=5LP?S.Hi%(MY[9A!lB_CAh0&VX63lsKq'bTQmt'22[lr1:Hb79[IXu_5re`2MHS7q&%qSJKC%YTOVS6#g7:V2Lk!D?2ug#_m0LXL5n"#=)qZHIgP6>!kKLrDl,rim?InS2H#im)d+&H.Zrk_^$4\iVpjX+BZ:>OlMOBmC^`%MB\:#Du%O.#KB+i2Qs87K5\m3<*TR=ieD]#^c&G-Qn`A!X<4[721McRR['6t0NJM5bZYI`\s\ND7?R7Wg\OC@q0q.a(5Xo1gl4<D%8d_uYB=hEKlm],AUN-O>`BM0$5C7Y!/%lq_:nJWRb;m3V)Ft);XC==oH9(@aft0_TK,#<0%`g!JTD#luT&_Eo+k?[8@N?R9ej*DU%+haD#?.Y?J:.)0ZJJgCt2tq`J3a?1hLfme@bp?\*Rm=up3>PAYNEUB3Me-mi>'&o>CM`.i5-49q'krjL\NcRd".G\1)PFTk3L1;a%b5q!qK@CfqGnl<B'7&kCU^`]:0TB7;Sn,.>Jkp7rEG?Me9s$(-e=&VcEH_cS`S7N<X3-I^eEG*p86u&P9P@H\LR+;bViFbM\AjQ-%fZ]ctdPJ)fEa""6&ZB"h%"!qp>Y`I6SpMSl9iDS8>*J7XWT?B[b#`=<XYSR0l3JN5"C;Oj"^D,4VL<g.Ue:[,%tjOR5/%`keMU@5%k`]CoYWrI-at!&qF8VMpH%?A+;Q`\Y,5Je?"bGcLRJnrB+?fN_N]#udQG$qH(jLHlM8@lsmo]efeLJRa?S,=d@XLC5Ys:NI=(olJ%2g-Clcb1^Hir"C<V\L9EIbK)lj3JZir;:hU&$`k\$cKe7m\.QH0ur;M4U^#X>,?VJfQ(06omW3;nS'r^99M`@",Q,6-`%"H@5b*M%mVa/"rI67rinllo:7]H7WQ+=.273?2)4o^#_:78a'O)8>77%2o"1)1JpH/E4?R`Y1s7iq8rq<\u\+eF6Js2C?,i\6cd]uSls'$"B%s'6Og5g>7%kM^P'8;2dQF;Q/1aNDQ!M8L<0rS[EWmeq&bl$r`p?[r%9dncoBP$)8'2$K!>#oLRalhkZQ.4;1LSVPLUq4lq(oZ/61%]P1%QGU]RBZ)-/'hs^NIN9Pikj^3N9jj6eZ2$Qpq8P,:9hZo4AauX+.:2TG!D)Y0GXD'm)LD&R.Lc1^m%l+dfD:]USY`2?W*c(HG%o@ErAPQ'D,RcF>'rpHu)rGMDk#0^[I9A7bmAk9H1U"e]<-]URY/G[2jKh`<Mb6S)%7-jmPbJ!r+#PUI_nuoh-Ep0A!W(W-o'bhGE%R5+`2+VbupV"<K02DgNgB&V)R4f6W>%81j_"^TW97mMLXqHrpDs8'XJrqaOi'DjVQ]H>gY*2oeT2tTOW/F/hg?c7$pKO_cRWQ6h1%Pg%!4:ifbFX1\Pm#s(<g*hor$YP_/n:"GKM);\W"j=cZm1`T'(\R?GnI07N=[JQuB6=b>h(b/U_U7dcA%'",?\!YQX2=?"1UWHQF%lgH`ehd]2O:">J-(`VRO=De;W<'\iGYmUAAcBG/TS42Rpje*jbF`tH39:.9H-:!F&fGuGM=3Wo&gF<^C@4@m`#:_"`<Ke3M$aGqU%J71UE)M#fG*b@kRkf]Zi=FO@_,h[tfLeNJJZN:SjLg,<:oq"lF6q<@as%dW9Z>*O&?,,=r6VJ-Z5m;"aUnR`8KAhAuYURnU+<=u1%?=oYM_T%)o]:,js)pR$AGUoS2eSK)>m8igq*CBeZ9(a0k6Dc5BRPOWcNP(QZgsS'Wbj925&d/ff9_&E)]Qr=h]!;1m;_&:W+.l+d%flA47/M?O())SS,'?f)A@I@o).H$S,8^SP&K^82*WKSGJUon/!\q1Q8Rp+3CZ:L7'(V/h8MfD0gfHUt#;rO=[(#G4EO->;mX,lc7%[1d'?Z->Eag@`K%/0`^8G;_52<SYi$7_-l=#FLWmTW)[@.9'<aGC?Rf\\no[FC42`&*99(FY^!o)&<VD]\[6?7(R&_Wgum\#tPqs%;+1ekImUpBgtb[gqQ6]("a@0G(a82'!$6o8p?8q>-'lE'Qq.dITN%*m.VOVQNQ@om33^tY5.$aFAs#3p-/X52:3Cg,7M@5$JZob!%[utHEq-doDS+(9a_Vf8S*a4Pf)4Pp-J9R#R;U.be$6i02"GH&I+BOS^Aj06)"mXY'b&6lS,^me9hG\^u`\hb5`2V$$7D>9EAV/+*%%DFP>apu[m7`r-=9N#?M//\nQE]&()6<Y$,'dp7h-J)^i\]HicX!,en9e'F>p7-26.qpo09e:^DfN<0%fpQsOFaB,Q]lQk@CXnS-%^;a<E\QWJe<D<2YM:Vo.&UNS<=e(GM,.a]8ZdiP>ZoIY:j)V0=<B46?U+!h>iquV`'`=af%5l04J*A>61KH_M7AVd8V5bL26&Y=S%5lE*\D2rY9%>)(ZG@Ha7F#0Gt4K;$4IqCT)LHtCn:T`bC)]0>'PdC7@q\A)6b[/n+m0^b0a/1%8ARVr]d<)%AIfc!#?epYa=8\nU%ZRTg%*+)W/R@'*[/rf)8g6Ugd@*Cm3I)R_USOffJ[1>rAU=JP9V;QZNL*&tScr0=ZZ"AbO*4KQlrJU9-Xff:X$Z:N2f;.-DUkRpc%en?\!btQhrS-]3%$i_8=\YZ2+_t!ep+jiScNuq$HV*/d+,7VF4%3pOWFILTJ*SEps7GoJYe[[%dc2Fq>7bP^u.eo0+,.e1+Zm@OM%1pf!-qL2R%P(LRtVEClF92+,*ElGD(B$IR9CS%XFIk0s/\6pEi=_om+;+PAl0i<`17-M7?&QFcu,7o*HF:2ctIS,830<?XE,<_.:%Z7d^Ud)HWq=9Ad-((TpC\J2&S:5*tB"4?`f_]R0)URJ=Y9X]R=rEu[`B'/*0@9'i<!hnn3aR&3T,qu'BL#l[e<_DN]UiXPB]IfVr%7Jt4I?.5V"6$GS)nS_Ead@PME_/83)U]a4?R1K!1K>YXhSn?^#Hq%KR$c6&7q!`nZSC1,n82+4Z=lqCi2cZ\3_HaHk3#k<O>FG_!%,h(gPdPbRmp#QM>q\:Th#Al2@n96R.I4(ht;>]s@&moY3E88^SQ:rU'@3T^Yd\*W.N+Th(`dQilLAVTC?3f)igeZ4KNHrS;F)q7t%8c"VQYp&r9jhPie[-j%qX'e=o4j+S$`_3(1a[k;6T;D^&.jNJp>Z&S-'4."9PtPfkA+i#mfC2*9J"&b,&EPSO7/[s3s3s['kN:h3%g6V0aK*/_t]S2WmG;lIsCGK*jqO3s0*Gf:b=tDhlJ$YrJNBo[j/rd^*AkcWBaB$u]AEiMdAS-8*ZGa]U'2-a^&@kI_F?'?,RU97M%k`M]@eO;_QHu%8D@gX;A'LA$oLBCA^g3m(H,K0qNk+!`_Nr7/r?fXUtUJ"Z3>`5nkB5nf&eU6nij=ONUaKTRK?)pBr010j'*+7hd%fe_eL#:7&L;AMZ[_-]fj#3-%aglM5m'e@<09cuZ@I9#CqCo'r\$4%>\Ol4I83gIbNVa.]fnt."^:Fkb\!Q^U_buCS*QLoc#Y0I#8%f/W20jFOoTVYX_ab8WN6#_l(^>[Lus,g51;6d1/7e@idGXh6h0km)koU*09TZ7&2rF:;-4!u&VB#KY+YPfKtM<Q.g"PtbpgHk%_:%ZkSMI\QKSV0MWUaf5DW^`?&D9rVd\;"Fai\3CW!k00Md4Eh6nbQf^^4:ou1-7&)ViJ./#S(DUL'bH[O=RV(BY@MkTjU_ma+qfO-D%(LUM$h$R.]VY\gD(\f_M8qA2/m\[iY'N(kK.JOONV"aSB4ST[a1qI%%E3CS7]INQni30QHglc)sR17\Oe4.7VXfC6B@OS7<"Fl&*%Y),h&&EE:ae*9urB50k/OoY`F6:\8,EbL&eX>c&)'*?A9hp3tqM?4&T`F^ao(V:PP/"-l0VO9G>^Ber%Egqro7R]nQ)#I1^d:PFV%Nq-L-/R,Ug:JH_X;8KF`SlU\nXa,qJ;T+C6Ba(5K.@Y1a'jNEOP"41.,)jF50$b[c_[[3.]q&8+&n#/9C[>?AalE\SrHbE[N?5BK%'cCPAC@9Fa-*a,Y:dmLIqGGF.0jMtlgPok[W53ptV9F5u7tat_]2jeqF*c!1`[hk6'kuHq"3FD/jU't,`%MS#qd?qoO3qO(3FJ)=%$$7mSFlT%9WR-,:n*K-<`Csr=89:E@3MgPRUG\@'_,/@Z:.Bd$jPMb/C-rE!:GUu<ik@.'K6dtPJN=BJdH\.`Q7LpLL,Dq0+*/O'%^*O_%=,`8U1g3iJ:@2Sq2gaWUXa[5_ET@g>l-EC07?Y&'Rk8ii>)U@?Id/l1^0&$;r3PX&_2FO^e1<_)KlR9)k+-0AH&$-"/.YD7%Z<<iE7;:!p:Bq<_7j_'6IZcF!ZZsgUoc)N#;]JVV_)s:-;Y%^37=Vrh(W-n_kG"@$.o<3)G7WAK<M36plOu1T1P>gG03P*?FF#SM%k6=Rs=*?g=%.[!2QkQDrI:q<RI3Tl9)VkIh3JJWR66\sk6d!t10`FWAjEF+^$gHGY7,IKfAcds`Ad3_FU<(kp[qUkt__I`_!>>go%_iZN3T[W#7G\Dj7LjEgupPU1J)f^-rp"S,N3ZA><m--qnlT'RndE0UEF`@Y(99sk-J$GDKDY`UYSO(LBPLC9mWgsgt\\OH,"e=.$%UH/74H-h51Wul]BVo,Pf/*W4l?jm_a\lQ;"0bg#V:r24,:1H6ke&6e"/`$%-BN]dJ1FL-M_lFJY_[DiKdO78E3L(@,NMWb,8:eg(%32&9'ot3&Xhh$'ALf&'(Vd[ZZ`VAO;1`/0,G\lDrZ=NJVDkR&Qd3DOpN(f^2j]KZH0naWQW&:KJ;^^hk63iM?-"c3==Yqa,EBoI.%Z+?hJ$nk<qT>dIaHh4utObal`A<b'O9fj;pF<uE<(ejEVH5n`2V48P<QVrjY(!K#-rNh@Of!S%#2lAfrabd^Co6t7/UpM?j;MA$N%J,V^=cg1]&3C-'>AsU?7TBioccOpgK9)++nY,Q=iUnP>:+Xa#5Zn!!qgBV5tg.%ZjH4:53#tCB.a+h8PRu*N;6EEpWb;!9h`k;FA%e8JT+4LZ61aP-!V^t>GtKn>5X0WN7[YLt.nO1rKX?Z_&im1&5'k4Ku$B*`p8`ft'M8FphtPXT+cki<q$#[7i\ASC;iYK-f(*O[>0%07D=pNO-_b;t_7eKg";kV)nOX?1gZDoSlk8OF8@/)UmEJDdi#0cLA,9VtgQMQ_!+Y3;1E`8ejY@$mU"^8daDkaAM6s0h;d>$h9TE%#1Tb0Go;o$B1:-aAu"FR-c.(IY:g,]W.0:]+m?4dJ$Ac-V@,6nCWiWnii_=,S\!i(Y9;Lq2'bURZoa9-Mupi?:/tPs0KLt@N<m]E%#GQ[(=\J0`h$M?C'W5e&943k*X1#$2D3_"S$mFo'r]%B;oJJ_j97,W+`N,n0.0'+]+I+Z*"CYc^&+^g#L7bs<^3o92@9FAZpLfF3%3[,fMgj$<3`629/"c:S3@&kWtad:Q3QGI+*HF\^u7au?_4taItnnFft&Yo8M>]3'/%+0Ua*l,.PMO#cU^;O`9d#f7\6(UNae>`:6%@#?/0/HuRZ'u(gYh.n8>#X2QE5%9pKN];-oplc'$E=qh05o&4L7IVhIM#(u;kAJ8m2j+S%0VihQSa8%GB]7s-4"7`nQ+u"P.j3I5%H)2ihrN>oV[B)W@OX$g1NG!n^Wa9$BlmAIIh4WEompI_KWHsk?fmukH^Y&P=(F.*>%_SuJ=beh15A(g)`sIW=FbM2_@1loPN1c4<%HEk%d_m,kVQ(dUQM?5EA<6.6tYMV<J<%I";SaZeeN*W-p0;e>cBb=ip?Q^'_+7'UtH4(>\OKJB,AJd*mb!Zb2-":=:J5E['1H[.<%/D6.>+_n)Z<O@1jKVl?.6Pofo'K5OG#4b-tUo.7gpcHjuK8afFF$TG4!3nnhbAjke/.N.G9451ZL'qOOG-?c!0c`-UV*Q<62!a=l%A@S]b6OtQ2jfl"IoMceE9h+n+5I?2O<2/_nEeW1KN^aRQA!'lc"@%J^nbb7H#LT[MXirN9EkSJffQ-/J1^'P^)1ECA2YEiC)e[Cn%"bNg75c>DYOSj)QK^XGSPSNWl`WP#HOifIXI"r"58E7t.oRtU'I$ZG(Xd%A#;O[sOS:N)r25h$$+7qpXW,)n:3tRtu+qW.P-l74Q%Y:i[R[Z<!aYpIVC)e35`XI?i-G@Deh^KHfZPR.9)4mdN^)l-S\V3"fB?3r#"IjpDH4.g!T>&6"4bK2I]RM.,Q^HWl'h+6mlp<-Q=%XO@!&'jE%G"NUt<VM<@Vn-b9o\R]/iE0]@LW>oK3QQXTZlbk?d-Z2?N9#'Y4/(XP.Y9@2h!=T=k<MZkJko7hlJ5rJGGr_WO#DiLZ%'EUC38k6'<_NI)h+m?WHWub<e\NXL.*=%<6Kf^07/uHj7*sAJ0+dVTF8=OX?X>mbH(geX*B:2,YW&RG6G#5HOXA9O!5M.>55-U^4%\WljeHe>4J,jWbG$b2oarrUC+XO%s5[Cleo%s^L4Hk0,,J<"rh,pN?!<)$Vh1&kPblF2QXcYu4UGU"T\DX=%LNGY-'>6)3@5RsdZ%%V`ljS'Mn1Tr8D@I(9<XQtU3gS1Z+n&`$7T,^X8P>p>BsS'K6f-ni:14l-Pb-.Q,-Cg!TrUP-2Cl1tjh]s4%F2hh@mh?Cd/QWdmd%7=jBK5KT#umN>"8)P9r7Bgc@+`,2,uRE=EA!^Nth/10e7ArtoG6AALk'/?*2-G6#lN8MO)(n(?$bjuX*/5,^[i:Uri(BY[-omBPI%88-S%Rm+`iIM2.Km_p*?P^J^hIjS'P;!biWK,/CL[2n.#X@Nf"YFEY5Z7>MR,!6XHf>q#8l@s"fjAf1!bZ^OlE&ThWGf%2,`TF.?%E#X#4k3<m^+"k@VK^K4*Xse1D6lD4JCmsYlbN@;tlA*dkn_dV$GrplU>F=NMe,+4ZRrLe^H,uH_?LBspkabOSSd%26&\Pj;<Z8!M%a#2,Ir2q2#,aWJ5pGt7!%dG=T1;R0768rGmWfkG:>mE.C-:<IZTU$UJ2kkc/Ka8[#R$`_;^N^-1"Qjs200*[JXtl^k3o%*H,cElI%ahgCBeKSjSann<.U7H`kQ?91V:8hM"7pa=0^$qs::t(;9o@;%i"khT3@C6P8'r8XcC?9!*Jqt4gpt"*"Xus]QHOPUCo'@X4=fs3'%&3g+:`rM7!'s*i?/<$9.f.aTrYO&-T7[ONhWUI_!?iiR5ZNLQI0K92+T,<.qSoRg(a=dp3)<PI-8"R;6BlrLWS&5fa1)2*0gPrcO%B(D@Fi#s5U$->uKA[JW<Sm$ai\TDEK$E-*IOK9g_jOoNT+m;Q7Lr@d3HV>:$-d*M/4Ve*skeFKojbl(9V>@;i%um:R\jn8=DN*gM%)^YM5CC&$cl@&)c'Gs9DAB.F[W>?)``;9<>!d9ljRZa13pHX0kZ,04_-cECA4ESZ3"bb$Uh=33?3AhfJ"P-_Ck\PC$GX!B,.M/lp%c('e_^_hjFAOX`A+S5l?>7/--U9%D\[kXlqM51aP/hA]jc)ce1"G;`=*(.e%i)gsG,t"iO'#L^\)c8P/.A'eo]V[>&XE]p.]QVMi%;E(61"iIa$Z`NR%O@;brIj70u%iFj+e4SC:q&WYl'p]9^f9uJPZ0ggZ^IO]ZUs0_7\`I@6Y9t2M=@\Y>_8`Dt8a8mn@591n`e]T9%CHe$O0f11A6`;,./1&8)8=n([M!d81]iXh6hH4"0"D9<A7*XgE-h@-)K^BT;<!p&%@9Yq)<p>^lQTRVl$<4'4IP+.k&gP3,/F##;%3t\;*N3\6I74U\)l;HL>bPh",P*a/q"oFI<n;Wq>qSogmptefJ-l%iXDTRV3i#L:IVM=/UhGU:40g-0=C,42bYnAjaeYJM44';73%O*PiX;HF,rrXN58%_2l246IbK4Z7laUMdo(gCg\g$V%p&B=DCS@S!O@8tEG00XT:h+BeTKB`QqkfGt,>3XhKCpe[ZLN-XcQ,o[``%`1[P<-'MG00/5B=p<j`_=h;1]/5p#rLCj0p"F%4g,[/9#_<J6p+L`$-!/@T`#fA9.$Nde5<0lYUTGJUA7Q]=sg)%.[6TS!cD0DD,%\sOBe$H)-#5c$a.YYA$k(/I?%]I.AL*b])'8i$E\5na=#eV#7HeBNAK07OL*q6D@40op*QBp@[>JtuC=3k/YLjCpu3?3jnT2T.VK%;?p&\fbpHRWZiHB#,G<F^@/)H]2Hl6fG.>a=A]h)e3amil\X7ZF@03mM>8$X8YOgFVFo'd<`te9>#52nC:"8&f2j9jU"i\^:5V(B%6jptk,u:YsC(c?p!N^3TOq*X.)`V`ijP^8Unis!s"2TI_#X+nUE`_IW&0&eG?,#_Z\7kr*Sq9R?WT>j.CRVT/3NoJIDoqUjD(cE2%6F5I,YQ^T_\Z.#K9lP+g5FGYn(Hi=TE^1,Y9)G&^H:P<[(-I[NT-ipVWpL[4`]!KGk$3?4HCB9u[:6jJX=:o.Q&1tYqsY1db+%!3%0f<N-IZgbijKQdJX.^nTFfo4bdc48t>%tNB,o@fr\hW")W52f$G!Iff7]Otq<QMJ.+]$9bW75//$C41+ATmP%'MsSBGYOK0@,9.3%V,dR/mlkGoT+H9Age\UOd"as=]8"=2RMA4iK"GAA^0R\&jLCtWNn^C>RG=g=Cph("i/)m/.[>8?G4@#M,W;CiV0-N_n&2f0b]KX.%(Q;-+l4n1^X(I\8j2O-.)"8]4SamebSS+EJCCZrN8fS%Tn"sbB5(Mih"H(@a#t.1<;LI?'W[bM/[jWjSnA+#<U<J`=2cEU=k(k<X%2lh)cg`oQ60?71%UciPZkLmZD36b[aHpZ96-g&GD4Q;^e76OQHSlNK$ScP%2kOPS6\lW!-/e(''HD^j(e?)FQEDl_nZ:N4A)gQg0%JjTT_jTA#DfqsA2B^+SH,d,0Cr!jcnhhKt([/BlcE^`O0aL;5L/dru*`CXT@5!=nA,>$p8)cFq*,L4^R-eK9:Eg"R,Q,?Os/i`q/%Qc.[*GiIZogN7iXM]"?+PF23'Qr(lFmoC2VjXX8f3NN&)k=(muQS$.CD^RQ-%r#UIO=9"3A$0`G7$]F&b9M&\5:LN]c:4C>;sOOZ%d@[HB5=#cX`\p4Ap`.(*eDJ[f$l=Ep.>''N=rq\=!AC:R?&tiJVU'M40M=*]CfO#I=_[e;2gsrd!5pA?Mrgm4@#\9OJ1+G3\89,/%"6#<K=afB/?k$1N**#/l8n^AN/F6a$_66XK6n;.>2R?NM+"L62Y't0@h?Albc:ImYO_-2(rZhS+oT-p]oV$a;,0A1-a,6C9oPqS;%O2,A5C-j5%dgRtPRRJ>M4*0U-JX(7j.5A<6$8JA#o:U40eis5"GHCIu>`rMI.J8a//^c60m/P`77q'LP)?ib4Jf2!mb)e!eTn)5!%PH@PY5ZVLf4EZQeYF,p>bM:??ghJRJALel(N8X;.5QY0KcU.ls@pf2M[K<`ihdP-HXamL8[e!<\ZJDgU"l1Ai:Y+5h=hc\CAK?Bp%Nu[9Rl^\AR+DK(f\&b*N#&4SmY\Z[f)\'u?Tn!8DXZ_K7g$*MXMpOZi)'1ZcO#O;NO!c2g"@$DMOT-n]X4aRcjWhku>:2mI?]99-%-["1.pWeulLfu?BRjF,iXa8Ko=kp@KYsq(;Xa3,'aK!8_frE)rC"KB*bR@>t]1h-M1AgmDQ)6US)gf3%SsOPFDg1)u]mo'hD_HTc%q:!M?0E:UK55`[_Ie`Y%rP/9m^[6NarVanMJ+o$&c[YlS5MeU&n)rU-n;!>PIe`)%5CNO_h`h#%qrcjCIes#lIt.Iel'Gb+rTgAr%If?Oks*XV+\'Mhhp"/(bJ,&sq^]"b*8!dog_[h7pVgise5HSr^p]~>%AI9_PrivateDataEnd