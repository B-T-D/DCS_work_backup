%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 011x009.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 288 215
%%HiResBoundingBox: 0 0 287.5591 214.3672
%%CropBox: 0 0 287.5591 214.3672
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6712 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA859FF7D847D7D52A8FFFFAFFFFFFFA8FFFFFFA8FD07FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD08FF7D7DA8FD047DA8%5984FD1AA87DFD1BA87DFD1BA87EFD1BA87DA8FD07FFA8FFA8FFFFFFA8A8%A8FD1BFFA8FD1BFFA8FD1BFFA8FD0DFFA8FD0DFFA8FD0EFFA8A8FD46FFFD%26A87DA8FFA8FD0FFFA8FD47FFA8FD0BFFA8A9FFFFA8FD0DFFA8FD05FFA8%FFA8FFA8FD0EFFA8A8FD46FFA8A8FFFFA8A9A8A9A8FD04FF527DA8FD057D%A87D7D7D7E7DA859FFA87DA8A87D7E527DA8A8FFA8FD0FFFA8FD47FFA8FF%FFFFA9FFA8FD05FFA87D527D7D7D527D7DA8FD067DA8FFFD047D52A87DFF%A8FFA8FD0EFFA8A8FD46FFA8A8FD0AFFFD04A87DFD0AA8FFA8FFFD0CA8FD%0FFFA8FD47FFA8FD25FFA8A9A8FD06FFA8A8FFA8A8FFFD04A8FD46FFA8A8%FD18FFA8FD0BFFA87EA8A8FD06FF847DFF7D7D527D7D7DA8FD47FFA8FFFF%FFA8FFCFFD05FF527D7DA87DA87DA87DA87DFF7D7DFD04A852A8FD06FFA8%FFA8FD06FF7D7DA8FD067DA8A8FD45FFA8A8FFFFA7A883A8A8FFFFFFA87D%527D527D527D5253527DFFA8527D527D7D7D7EFD05FFFD04A8FD0FFFA8FD%47FFA8FD0BFFA8FFA8A87DFFFF7D7DA87DFFFD04A884FFA8A8FD06FFA8FF%A8FD0EFFA8A8FD46FFA8A8FD12FFA8FD11FFA8A8FFA8FD0FFFA8FD47FFFD%13A8FFFD13A8FFA8FD0EFFA8A8FD48FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7EA9A8FFA8FFA8A8FD0FFFA8%FD67FF84FD07FFA8FD0EFFA8A8FD66FF7EA9FD06FFA8A8FD0FFFA8FD65FF%A8A9FD08FFA8FD06FF7E7DFFA87D7E7D7D7DA8FD64FFA8A8FD08FFA8A8FD%06FFA852FFFD067D84FD64FFA9FD09FFA8A8FD06FFFD04A87DA8A8A87EA8%FD63FF7EA8FD09FFA8A8FD0FFFA8FD62FFA9A9FD0BFFA8FD0EFFA8A8FD61%FFA884FD0BFFA8A8FD0FFFA8FD60FFA9A8FD0DFFA8FD0EFFA8A8FD5FFFA9%7EFD0DFFA8A8FD0FFFA8FD5EFFA97EFD0FFFA8FD0EFFA8A8FD5DFFA97EFD%0FFFA8A8FD07FFA8FFA8FFA8FFA8FFA8FD5DFF7EFD11FFA8FD06FF7D7DA8%7D7D7D527D7DA8FD5CFF7EFD11FFA8A8FD06FFA87DA87DA87D7D7DA8A8FD%5BFF7EFD12FFA8A8FD06FFA8FFA8FFA8FFA8FFA8A8FD5AFF7EFD13FFA8A8%FD0FFFA8FD59FF7EFD15FFA8FD0EFFA8A8FD58FF7EFD15FFA8A8FD0FFFA8%FD57FF7EFD17FFA8FD0EFFA8A8FD56FF7EA9FD16FFA8A8FD0FFFA8FD55FF%7EA9FD18FFA8FD0EFFA8A8FD54FF7EA9FD18FFA8A8FFFFA97DA8FFA87DFF%A8A884A87DA8A8FD53FFA8A9FD1AFFA8FFFF7D7DA8FF7D7DA87D52847D7D%7DA8A8FD51FF7EA9FD1AFF7DA8FFFF7D53A8FFA87DA97DA87DFD04A8FD51%FFA8A9FD1CFFA8FFFFA87DA8FD09FFA8A8FD50FF7EA9FD1CFFA8A8FFFFA8%7DFD0BFFA8FD4FFF7EA9FD1EFFA8FFFFA859A8FD09FFA8A8FD4EFF7EA9FD%1EFFA8A8FFFFA859A8FD0AFFA8FD4DFF7EFD21FFA8FFFFA8A8A8FD09FFA8%A8FD4CFF7EFD21FFA8A8FFFFA87DA8FD0AFFA8FD4BFF7EFD23FFA8FFFF7D%52A8FFA8FFFFFFA8FFFFFFA8A8FD4AFF7EFD23FFA8A8FFFFA852A9FFA87D%FF7DA87D7D7DA8A8FD49FF7EFD25FFA8FFFF7D7DA8FF7D7DA8FD067DA8A8%FD46FFA97EFD25FFA8A8FFFF7DA8FFFFFFA8FFA8A87DFFA8A8A8FD46FFA9%7EFD27FFA8FD0EFFA8A8FD45FFA97EFD27FFA8A8FD0FFFA8FD44FFA9A8FD%29FFA8FD0EFFA8A8FD43FF84A8FD29FFA8A8FD0FFFA8FD41FFA8A9A9FD2B%FFA8FD0EFFA8A8FD40FFA884A8FD2BFFA8A8FD0FFFA8FD3FFFA8A9FD2EFF%A8FD06FFA8A8FFFD07A8FD3EFF7EA9FD2EFFA8A8FD06FFA853FF7D7D7DA8%7DA8A8FD3DFF7EFD31FFA8FD06FFFD077D7E7DA8A8FD3AFFA97EFD31FFA8%A8FD0FFFA8FD3AFFA9A8FD33FFA8FD0EFFA8A8FD38FFA8A8A8FD33FFA8A8%FD0FFFA8FD37FFA9A8A9FD35FFA8FD0EFFA8A8FD36FF7EA8FD36FFA8A8FD%0FFFA8FD35FF7EFD39FFA8FD0EFFA8A8FD32FFA9A97EFD39FFA8A8FD0FFF%A8FD31FFA8A9A8FD3BFFA8FD06FF7D7DFFA87DA8A8847DA8FD30FF7EA9FD%3CFFA8A8FD06FF7E7DFF7D7E7DA8597D84FD2EFFA97EFD3EFFA8A8FD06FF%FD06A87DA884A8FD2CFFA8A8A8FD3FFFA8A8FD0FFFA8FD2BFFA8A9A9FD41%FFA8FD0EFFA8A8FD29FFA97EA9FD42FFA8A8FD0FFFA8FD27FFA9A9A8FD45%FFA8FD0EFFA8A8FD26FF7EA9A9FD45FFA8A8FD0FFFA8FD23FFA8A9A8FD49%FFA8FD0EFFA8A8FD22FF7EA8A8FD49FFA8A8FD07FFA8FD05FFA8FFA8FD1F%FFA9A984FD4DFFA8FD06FF7D7DA8847D7D7D537DA8FD1EFF7EA8A8FD4DFF%A8A8FD06FFA87DA87D7D7D7E7D7DA8FD1BFFA9A97EFD47FFAEFFCFFFA8FF%A8AEA883A8FD06FFFD05A8FFFD04A8FD18FFA8A97EA9A8FD3BFFA8FFA8FF%A8AEA8A8A7A883A8A7A883A8A7A8A8AEA8FFA8A8FD0FFFA8FD17FFA8A9A8%FD33FFAEFFFFFFA8CFA8AEA8AEA8AEA8AEA8AEA8FFFFFFAEFD0DFFA8FD0E%FFA8A8FD12FFA9A97EA8A8FD29FFAEFFA8FFA8AEFD04A883A8A8A883A8A8%AEA8FFA8FFA8FD17FFA8A8FD0FFFA8FD11FFA8A9A8FD21FFAEFFA8FFA8AE%A8AEA8A8A8AEA8A8A8AEA8FFA8FFAEFD25FFA8FD0EFFA8A8FD0CFFA8AF7E%A87EFD15FFA8FFA8FFA8AEA8A8A7A883A8A7A883A8A7A883AEA8FFA8FFA8%FD2FFFA8A8FD0FFFA8FD07FFA9FFA9A9A8A9A8FD0DFFAEFFAEFFA8AEA8AE%A8AEA8AEA8AEA8AEA8FFAEFFAEFFCFFD3DFFA8FD0FFFA8FFFFA9FFA8A9A8%A97EAFA8AFA8FFAECFA8AEA8A8A7A8A8A883A8A8A883A8A8AEA8FFA8FFA8%FD49FFA8A8FD06FFA9A8FFFD06A87EA87E847DA884AEA8AEA8AEA8AEA8AE%A8FFA8FFFFFFA8FD59FFA8FD06FF7D7DA87D527D53FD047D847DA87DA87D%A884A8A8A884FD0DA87DFD0DA87EFD0DA87DFD0DA884FD0DA87DFD0DA87E%FD0DA87DA8FD06FFA87DFF7DA87DA87DA8A8FFA8FFFFFFAFFD05FFA8FFA8%FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8%FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFAFFFA8FFA8FFA8FFA8FFFF%FFA8FFFFFFA8FFA8FFA8FD0BFF7DA87D7D7DA8FD08FFFD057DA8FD08FFFD%057DA8FD08FFFD057DA8FD07FFA8FD057DA8FD07FFA8FD057DA8FD08FFFD%057DA8FD07FFA852FD047DA8FD07FFA8FD057DFD0BFF7D7E7D7D7DA8FD08%FF7DA87D7D7DA8FD08FFFD057DA8FD07FFA852FD047DFD09FFFD057DA9FD%07FFA852FD047DFD09FF7DA87D7D7DFD08FFA8527D7D7D59FD09FF527D7D%7D53FD0BFFFD06A8FD07FFFD07A8FD07FFFD06A8FD0AFFFD04A8FD08FFFD%06A8FD09FFFD05A8FD08FFA8FFFFA8A8A8FD08FFFD06A8FD08FFFD06A8FD%BFFFA8A87DFD04A87DA87DA87DFD74FF7DA8527D59FFA87D7D7D5252A8FD%73FFA87DA87DA8A8FF7DA87DA87DA8FD33FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T11:22:33+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T11:22:34+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T11:22:34+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwNPy+1WKPX4Y7q39&#xA;LWiwcFG+JfXubgPNSnKST6ysMn+Qgp4AqgJfynvJFDXF3DeR/UJLIacwaGGNXuobpY4pEDFY1eL/&#xA;AH3UgKDt0VZD5a0nXIreWxutZlX9GC3so0tYbWOIiOzgZn4tC7KTI7bBqAU2wKnP6Kvv+rzef8BZ&#xA;/wDZPirv0Vff9Xm8/wCAs/8AsnxVSn0rVuA9DWbnnzSvNLSnDmPU6W/XhXj74qq/oq+/6vN5/wAB&#xA;Z/8AZPirv0Vff9Xm8/4Cz/7J8Vd+ir7/AKvN5/wFn/2T4qpRaVq3Ob1dZueHMehxS0rw4LXnW368&#xA;+XTtTFVX9FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ/wDZPiqlPpWrcB6Gs3PPmleaWlOHMep0t+vC&#xA;vH3xVV/RV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm8/4Cz/7J8VUotK1bnN6u&#xA;s3PDmPQ4paV4cFrzrb9efLp2piqr+ir7/q83n/AWf/ZPirv0Vff9Xm8/4Cz/AOyfFVKfStW4D0NZ&#xA;uefNK80tKcOY9Tpb9eFePviqFnm9G4kgOsanJJCQsvo2kcyqxUOAWjtHWvFgaVxVZ9a/7Wmsf9w/&#xA;/sywq761/wBrTWP+4f8A9mWKqcV1cc5vV1TVeHMehx0814cFrzrZdefLp2piqp9a/wC1prH/AHD/&#xA;APsyxV31r/taax/3D/8AsyxVTnurjgPQ1TVefNK89PNOHMep0suvCvH3xVU+tf8Aa01j/uH/APZl&#xA;irvrX/a01j/uH/8AZlirX1xAyK2r6rH6jpErSWKovORgiAs1mFFWYDc4qj9BN+smp213dveC1uhH&#xA;bzSrGsnptbQy0b0kiTZ5Gp8PSmBU1xV2KuxVLtK/3u1n/mMT/qDt8VTHFXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FUs03l9c1rhTn9bXjXpX6nb0rhVv/nZP+XP/AJK5P0eaN0dbfWfRX6zw&#xA;9ffn6deHXanLfpkDV7Jef+ZLvzpZeaNRuNFt7nVGNtIbO3lFzDa20kdmWT7J+rXSyTACm0gc9eIx&#xA;VLTrP5qKBeJb+o8kUEMkhhvBFGgnuS0ot2gWT1qCJX4w7qajalFUxk1bz5cW7PeG5sLmGazeSCws&#xA;ZJo/q7CL1pEkkRmlPKR6x8Q4A+ztuqhYNZ/M6C2aGGyk9VLa5MKTQSzVIt7iSOVpncsZPrKRRiE7&#xA;lWqPEKE71JvNE/lS+hubme3v7a+9OK7traYvcW8cqsKx2x9ZVkX4GeI1HXxxSkkmv/mcllws9Mkt&#xA;5Fs/3NvNFLdlaWpcSvcuQ0kv1njH6TfFx3O+Kp1Ypr8P6Xt9Yu57sx6tpxsnlhEcZgaW3PKJ1UI1&#xA;X5BlBPEjtXdVkekkG+1mhrS8UH/pDt8CplirAovzB1E2WuyypbLPYS+narxkAiPrSRvHcjl8TwRx&#xA;CeTgV+Bh06kqhH/MzXA0UbaettG9pHIdSmguPqvNrm3ikuFb4U+rRw3Pqmsgb4SCV2JVZF5I1iXV&#xA;La5uriB7e7ujb3M0XBwimSxtiQHI49T9mvKnXArJsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVS3TGC3mtMa0F2pNASdrO36AbnFV/6bsv8Afd1/0h3X/VLI8QY8QRcE6TxLKgcK1aCRHjbY&#xA;03VwrD6RkgWQLA9d/NKfS/NF1oA0z1ZRcWkFjNzIWRZUSW7d6KeHoRypx/mLAbYVRlp+aWmXlBaa&#xA;XqMvqXAt4GMUaJIpinlaZZHkVeCLaPyFef2fh+IYFQzfnFoqqA2k6n65CSLbJFDLK0MkK3AlVYpp&#xA;Kj03X4ftVNOOGlTPzN5vvdE1yxt5rZYtFnEYm1SVZnQyyOyegDCjrG+y8TJQOWCjfAqX3P5q2/6O&#xA;uJrPRr2a9htp7z6o5tkCwQwRXCyyOJmUI6XCU48mrsRirNbWaSa3SWSB7Z3FWglKF0PgxjaRPuY4&#xA;ql3mhJpNJ9OGT0ZnubNY5qBuDG7iAbidjTrQ4Y81Kh5VhtIP0pDarIsKXgA9ZXWRmNrAXZ/UCsWZ&#xA;iWJPXrhlIk2UBPcil2KuxVLtK/3u1n/mMT/qDt8VTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUoR76yvtQZdPnuo7qdZo5IWgAoIIoiCJZY2ryjPbFVb9K33/VmvP+Ds/+yjFXfpW+/wCr&#xA;Nef8HZ/9lGKoVyjm4LeXrgm6dJLkk2f7x4goRm/0jcqEWnyxVD2lhp1ncvdWnlV7e5kl9d5YlsUY&#xA;y8XTmSs43pM//BN4nFUo0ryT5a06xnsx5Uluorif6zL9ZXT3rJwEdQBKqr8ApsN6mtanCqc3NpY3&#xA;WpQ6pc+V5J9RgUJDdyLYtKiqSyhWM9RxLEjwqfHAqyz07S7GJobPym1tC6yo8USWCIyz8BKpVZwC&#xA;HESA+ygdBiqrFqsOlR2mm2+h3Nuj1jtLSL6pQBfiairP8Kr3PQbeIyQiTui1W/n1G9iht10u5h/0&#xA;m2kaWR7XiqxXCSMTwmdvsoegyKUTpX+92s/8xif9QdviqY4qlieZdBeO/kW+iKaYWW/atBEVLKa1&#xA;6/EjLt+0COoOKoaTzv5WjUO9+qo0QnRyknFkLrH8B40Zg7qpUfECdxiqvoc0c9xqs8ZJjluo3QkF&#xA;TxaztyKhgCPpxVNcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqG&#xA;1HULewtWuJuRFQkcSDk8kjGixovdmOwyUImRoIJQ+lafOjyX99RtSuQA4U1SGMGqwxmg2WvxNSrH&#xA;fpQCU5DkOSgJjlaUu0r/AHu1n/mMT/qDt8VTHFWLD8vNMX9IBL27RdR+GVQYPgjWWe4ijjJhJCxT&#xA;3byJUk1oCSvw4qof8qx0ZpUlku7iWSO3ktkaWKxf4J5Vnl5crY8+Uql+L1QEkqoNKKph5T0a00pr&#xA;60t3meO0khtYzLIzVSOytwCVqE5bdQo+7FWQYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqp3NxBbW8lxcSLFBEpeSRjRVVRUknCASaCpbp1vcXtyurX0bRUBGnWjijQxs&#xA;KGRx/v2Qda/YHw/zVskQBwj4/juQE2ypLsVSrQ4EgutYjQuVF4prI7yNvaW5+05ZvxxVNcVdirsV&#xA;S7Sv97tZ/wCYxP8AqDt8VTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q07pGjSSMERAWd2NAANySTiAqTW6PrU8V9MrR6XC3OytnFDOw+zcSqf2R1iU/wCud+PG4+gV/F+N&#xA;v1seadZSydirsVS7Sv8Ae7Wf+YxP+oO3xVMcVYJCfP6WetxypdvPLIPqTg2lVpNKZTb7hQhtxGIv&#xA;U3515d8Kpe8f5lCaDgb5ovqca6gGNsHr9ahLGI14ev8AU/VB4gD1K7n4cUMl8kNrv1a5XWEX67W3&#xA;N7JyHqfWfqNt6gZEX0+vUq1K9BTAlk2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuJAFTsBiqSKDr0okcFdFhcNCvT64y9HNP90A7qP2zv9mnK76P633ft+5jzTvKWTsVdirsV&#xA;SrQ2uGutYNwiRyfXFqsbl1p9Ut6fEVT9WKprirsVdiqXaV/vdrP/ADGJ/wBQdviqY4q7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkktdfle3AI0OM0mlBp9bcHeNaf7pXo5/bPw&#xA;/ZryuHo3/i+79rHmnYAAoNgMpZOxV2KuxV2KpdpX+92s/wDMYn/UHb4qhdK8zPf61daadMu7ZLb1&#xA;l+uTJxidoJQhC16h1dXRujCv8pxVBxef9Mkg1aYW1wP0UA3AiLlcI881rG8VHpSSa2kVeZXsTQHF&#xA;UJcfmVbRRGRNIvpawPPGsYhkY+jOltMpSKSR14SSU5FaHi1D0qqmflbV7HUZNQngmjZrmSG5WJZF&#xA;dhHJZWxDfCTUb0qNsVT/ABV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpLcSPr&#xA;U0llbsRpCVS9u0ahmYGjW8TDsP8Adjjp9kfFyK3AcG5+r8b/AKmPNOI444o1iiUJGgCoigBVUCgA&#xA;A6AZSTbJdirsVdirsVdiqVaHcW9xdaxLbypNGbxQHjYMtRaW4O4xVhv5faPotl5z142NqtlLA9xF&#xA;9WSLhwjlufU5eoltCrLIV5orSuUX4VotcKswPlLy2Tck6fFW8d5LrY/vGlDh+W/f1XPzYnqa4FWR&#xA;+S/LMUsksNiIZJoUt5WieSMtFEaop4sOh3r1qT4nFV/l+0tbOTU7S0iWC2t7mOOGFBxVEWytwqqB&#xA;2AxVN8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSQ3Euuvws5DHooJWe7QkPckG&#xA;hjgYUpH/ADSDr0X+bLq4Of1fd+O5jzTiCCG3hjggjWKGJQkcaAKqqooAAOgGVEkmyyX4FdirsVdi&#xA;rsVdiqXaV/vdrP8AzGJ/1B2+KsQ8mGz/AMb6ukKIJonv1ldZOSMzXaSn0FDMdvUH1jmNpNlou2FX&#xA;oGBXYql2lf73az/zGJ/1B2+KpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirTMqqWYgK&#xA;BUk7AAYqktZdeoQXh0QE1qOLXg3HzWA/fJ/qfbu+j+t937fu97HmnSqqqFUAKBQAbAAZSybxV2Ku&#xA;xV2KuxV2KuxVLtK/3u1n/mMT/qDt8VY35M8q69put3OraoLQT38JS8+rKu8yekBKGEcbVncSySb0&#xA;+wAKgklVKHyLrMNnrVss1sRqkgZ2Jf8Ae8JpJuc44mrzLIsMlK/Au1emKpcfy01hjxePTjHHawQq&#xA;EaRBN6dzDcS290PSYyQFIBAlW+FK/Aa7Ksm8k6Tc6XBc2U129w1obe2cUXgXjsbYFwSvqdtqt099&#xA;8CslxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZpooYnmmdY4owWkkchVVRuSSdgBhAtUm&#xA;EE2uuJLuNodGRg0Fq+zXVNw8y9Vjr9mM/a/a/ly2+Dl9X3fjvY807ylk7FXYq7FXYq7FXYq7FXYq&#xA;lWhxPFdawjzPO31xT6kgQNvaW+3wKi7fLFU1xV2KuxVLtK/3u1n/AJjE/wCoO3xVMcVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVQ2oajaWEAmuXIDMEjjUFpJHPRI0WrMx8BkowMjsglAx6ddajMt&#xA;zqyhYEIe20sEMiEGqvORUSSA7gD4FPTkQGyZkI7R+f6lq03ypLsVdirsVdirsVdirsVdirsVS7Sv&#xA;97tZ/wCYxP8AqDt8VTHFWBx/mNcelr3rJbRz6cxFnGXIPITXEbRTLXkXiithPJxH9247fESqCb8z&#xA;dTaOREk0yO6Ngl3As0yxqSLv0HkJkmjX05Iv3sY5DYj4saVk3k3V01OK6uaSepdNb3JZoXiX95Y2&#xA;x7mRFNT9n1Gp4nrgVkeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVL9R1b6vKtnaxG71GQcktlNA&#xA;q9PUmeh9NNup3PRQTlkYXudggl1hpJim+u3sgutSYFTNSiRqescKb8F8f2m/aJ2oynew2CgJhlaX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUq0OdJ7rWJEDhTeKKSI8bbWluPsuFb8MVTXFXYq7FUu0r/e7Wf8A&#xA;mMT/AKg7fFUxxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKJNTuNQke10ZhwUlbjUyOUUZGxWIdJZB&#xA;/wACv7VSOJtEBHeXyRfcjdO021sITHACWc85ppDykkelC8jndj+roNshKZlzUBFZFLsVdirsVdir&#xA;sVdirsVdirsVdirsVS7Sv97tZ/5jE/6g7fFUxxVLY/MugyQXs8d/C0OnMyXrhgRGyEqQ3+yUrt3B&#xA;HUYqpjzZ5bMUkw1CExRQx3DuGqPSmbjEwI682+EAb12xV2g3EFzNqlzbyLNbz3MckMqEMro9lbsr&#xA;KR1BBqMVTbFXYq7FXYq7FXYq7FXYq7FXYq7FUJqGq2liEWQtJcS1EFrEOc0hHXgg7Dux2HcgZOMC&#xA;UEoP9H3+p/Fqp9C0P2dMiaoYf8vEooX90WidjzGS4hH6eff+r8fJatNY44441jjUJGgCoigAAAUA&#xA;AHQDKiUrsVdirsVdirsVdirsVdirsVdirsVdirsVS7Sv97tZ/wCYxP8AqDt8VTHFWLJ5As47e8gS&#xA;/uRHdstKiEmJI5pLiFErHSkU0zMOVSejVGKqbfl5blFjGpXIjjjt1j+GEsJrW6F7HOSUoW9ccitO&#xA;PalMVRvlPRbTSmv7S2aVo7SSG2jMkjNVY7K3AZlFI+ZpuwUYqyDFXYq7FXYq7FXYq7FXYq7FWndE&#xA;RndgqKCWYmgAG5JJxVKf0le6l8OkAR2p2bVJRVCCOtun+7f9c0Tw57jLeAR+rn3frRdovT9KtLHm&#xA;6cpbmWnr3cp5zSU6cn8BXZRRR2AyMpk+5QEZkEuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVo&#xA;cCQXWsRoXKi8U1kd5G3tLc/acs344qmuKuxV2KpdpX+92s/8xif9QdviqY4q7FXYq7FXYq7FXYq4&#xA;kAEk0A3JOKpUdba6PDR4Pr3b60W9O1H/AD1o3qf881bfY0y3w6+rb7/x70W2uifWGEmrzm/YEFbf&#xA;j6dqpHSkNW5eNZGah3FMfEr6dvvWk0ypLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqXaV&#xA;/vdrP/MYn/UHb4qmOKsDjvPzASLXkkiuWndiumOEtyEZZrhmMBoAU+qiD0/VrWQkN3wqlbt+acqS&#xA;JJPd2iGEFJ1ggmIiDqUZo4+Dm5bcOqkKF360xQyzyXJq7w3R1KAQ3BNubkNJzlWf6jbc1YKvE0P7&#xA;Qbr2wJZJirsVdirsVdiq2WWKGNpZXWONBV3chVAHck4QLVLP06LqqaPAb89PrNTHaj/nsQ3P/nkr&#xA;e9Ms8Ovq2+/8e9Frf0B9bcSazOb8ihW0A9O0Uj/imrep41lZt+lMfFr6dvv/AB7lrvTcAAUGwGVJ&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirTukaF3YIi9WY0A+k4qgn17Q0Yo+o2quOqmaMH7q5HiH&#xA;ex4h3rf8Q6KTSK7ScnoLes537fug+/tjxheMO/Tll/vu7/6Q7r/qljxBeINDV5X/ALnTruUda8Y4&#xA;tu20zxHf/bx4vJeLyQ/lua7ml1aS7tvqk5vRyg5rJQC1gA+JdtxvkkhOcUuxV2KpdpX+92s/8xif&#xA;9QdviqY4q7FWmZVUsxAUCpJ2AAxVLD5isZCFsEl1NiaVtFDx/TOxSAU8Odcs8I9dvf8Aq5ot3DzD&#xA;dU9SSHTYTSqxf6ROe/23CRofbg/zw+gef2fj7F3XQ+X9NWVZ7hWvrlaFZ7tjMVYftIrfBH/zzVcB&#xA;ynkNh5LSZZWl2KuxV2KqNxe2dv8A70Txw7cv3jqu3juRgJCCQhf8Q6B/1c7T/kfH/wA1YOId6OMd&#xA;7v8AEGlMf3Ujz/8AGCKWbYd/3SPt748QXjDjrdr0SC7duyi1uFr9Loq/eceJeJ36UuzuulXbKehr&#xA;bLt8mmVh9Ix4vJeI9zvrmsyH91pyxjt9ZnVD/wAkln3xs9y2e5xl8wNsLa0i/wAv15JP+F9GP9eO&#xA;67u9HzAdzeWinw+rSGn0/WBX7sd1ou+oas5/e6myV7W8MSb/APPUT7Y0e9aPe46Vcts+qXbr3X/R&#xA;0/FIkb8ceHzXh83foO0p8U12zd2+t3K1r7LIqj6Bjwrwh3+H9IJrLb/WD43LPP7f7tL48IXgC5NA&#xA;0JGDJp1qrDoRDGCKf7HHhHcvAO5GRxxxoEjUIg6KoAA+gZJkuxV2KuxVLtK/3u1n/mMT/qDt8VTH&#xA;FWOxeedKktdQuRBcBLApxUrHW4WWZ7eJofjpSSWJlXmVPjQYqgR+Z+ikgLZ3pd2SGNOEIL3cjwoL&#xA;QcpQPVBuUqSQn+XjSpfY/mZoS3uoCBHlluXgu40Z4YgqS2duQHLvUEd6A5IAdSxMqRn+Ob2Y7Cyt&#xA;FpUN9atrot/sTcWZX8cNx7pH5D9aOI9zX6fSYD1tVYg/3kQu9Otoz7KYnlmH/Iz6cfE7o/j8eS2V&#xA;kt95eiCy3C6TdNyRUa61N7t1Z3VVoZopSoqR06Y+Lk93u2+4Lv3JqfMytsuo6RbjoP8ASvW+npD9&#xA;345V6k7rv09H/wBTDpP/AAH/AGdY0V372v0tZuay+aLVBWpFubZPoHqmbbGj3rR71kesaNI0qDzX&#xA;vE3B6yWI3Kq+x9LfZu2PCe9a814uvKp3k10SHsf0iU/CORBjwrwuM/kxvt6rHIvXjJqLyL/wLzEY&#xA;8C8IWS3P5dQxhnfS2BZUqTA7EyMFFSak7tuTjwDuXgj3ImC/8kW5rBcaZEQQwKPbruOh2OERHckA&#xA;Iv8AxL5c/wCrrZ/9JEX/ADVhS7/Evlz/AKutn/0kRf8ANWKqcfmvyzI8qLqtpWFgj1njAqVV9qtv&#xA;swxVU/xL5c/6utn/ANJEX/NWKu/xL5c/6utn/wBJEX/NWKqc3mvyzCgd9VtKFkQUnjJq7BB0bxbf&#xA;FVT/ABL5c/6utn/0kRf81Yq7/Evlz/q62f8A0kRf81Yq7/Evlz/q62f/AEkRf81Yqpx+a/LMjyou&#xA;q2lYWCPWeMCpVX2q2+zDFVT/ABL5c/6utn/0kRf81Yq7/Evlz/q62f8A0kRf81Yqpzea/LMKB31W&#xA;0oWRBSeMmrsEHRvFt8VVP8S+XP8Aq62f/SRF/wA1Yq7/ABL5c/6utn/0kRf81Yq7/Evlz/q62f8A&#xA;0kRf81YqhvLmo2GoXGtT2NxHdQC+VPWhdZELCzt6gMpINK4qnWKpOPKHlwLdKtiireu0l0qs4Ds1&#xA;akgN4sWAHRjUb74qx/zt5K06PyfrDaFYNFrK2DR6a1soeX1ouL24VZA61MkacnpyoK8hQEKpXdz+&#xA;e7e4uLfSILy00WGOJLaGK3t/3FqqwCAWiyIzNIQZRMslSlBQdKlD0PS2vW020a/ULfGGM3SrSglK&#xA;D1AKbfargSicVYBr1754Gr6smmG/TT4vQCEQW8jGpBlezrFQqAQpEhdj8RAHEciqYeTLjztLqN0v&#xA;mBZFiESkoyRCFJeXwi3eMKzgpu/ImjdPDFWX4FSfzdJqUfl+7bTJJ478L/oz20YlfnXYcTHN8J7/&#xA;AAfd1xVg9xffmuI5ai6RxHGZ/ShtWKN6QMf1YFHD85P77kTx7UGFD0uzNybSA3QC3JjX11XdRJxH&#xA;KntXAlVxV515hvvzQXW9UW0hmh0gLANPe0S2mccTKGceorlnkf0+SsKKnvViVTnybcecZdS1JdfW&#xA;VY1C8FZIlgWT1ZABbOgDuhgEbPzrRyQD1GBWWYqkXnWXW4tBkfRZZYb8OnptBCtw5ANSnBlkA5/Z&#xA;5FfhrXFWHalqH5o/6W0Ud7CnMVSCK1leL4JDAtsWSkoZxEJy9QtTSmFD0uAzGCMzgLMVHqqu6hqf&#xA;EBXtXAlfirzfWr38zU1TWFtVuRZLKv1J7aO3fhCEPp+kskbeo0ktPUJJ4rXYbYUJ95OuPOMuoaiu&#xA;vq6xrT01KxiFX9aYKLd0VXdTbiJnL1o5IB6gBLKsVSjzYusnQLoaLLLDqpAWzeFYnIlchELiZJF9&#xA;NWbk+1eIO+KsK1W6/NKKe/jtWu5Io5XVJY4bUmgS4+rGAMlHWV1t/W5fZq1OPYq9Ki9QxJ6oAk4j&#xA;mF6cqb0wKuxV5frF/wDmmura0tsLsaak1LE28Fu8iqEl9L0fUjo4eURepyZqKWNUOFWUeUbjzdLq&#xA;WqrrqusCsPq6ssaxK3rzgLAyAM6fVxAxLknkT7gBWUYqxv8AMCXzPF5eaTy0X/SayArHGoLuOLcV&#xA;BaOdF/ecallpSoJWvIKsTv7/APNhY73glyJVmYIsENs6q4+t/V0gLIC8D8bT1mfdeTUYfFxKvUMC&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpd5jur610O9ubBXe7ijLwpHGZXJH8sahix9gMVYRq&#xA;HnDzwb/WYtL0+5e0LTnSpp9OuSwEemQTIArLbURrkyL8Zdy/wgU6Ko7zPrPnC21GH9Gi5ubeXS5Z&#xA;BFa2cicbsQTusknrQTLRnWMLF6yyK1KrIG2VU9M85ec7nVraGXSWGnXF3LEbmSxvrd1hR0RC6sJR&#xA;GWDNIHY8CoAPFuXEqz7ArsVdirsVdirsVdirsVdirsVdirsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:712E13A9162068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:712E13A9162068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:712E13A9162068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T11:22:34+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -214.367 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 214.367 li
287.559 214.367 li
287.559 0 li
cp
clp
[1 0 0 1 0 0 ]ct
30.0381 197.546 mo
281.138 197.546 li
281.138 3.14551 li
30.0381 3.14551 li
30.0381 197.546 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
30.0381 197.546 mo
281.138 197.546 li
281.138 3.14551 li
30.0381 3.14551 li
30.0381 197.546 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.0381 195.291 mo
61.4253 189.156 li
92.813 178.309 li
124.201 162.445 li
155.588 142.427 li
186.975 117.557 li
218.363 88.2803 li
249.75 54.6875 li
281.138 17.5479 li
.884 .769 0 0 cmyk
@
30.0381 195.738 mo
61.4253 193.718 li
92.813 191.515 li
124.201 189.238 li
155.588 186.957 li
186.975 184.266 li
218.363 181.704 li
249.75 179.163 li
281.138 176.818 li
.873 .242 1 .129 cmyk
@
grestore
30.0381 197.546 mo
30.0381 195.295 li
30.0381 197.546 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.0381 197.545 mo
30.0381 195.295 li
@
30.0381 5.39551 mo
30.0381 3.14551 li
30.0381 5.39551 li
cp
f
30.0381 3.14551 mo
30.0381 5.39551 li
@
25.0215 204.368 mo
26.1079 204.368 li
26.1079 200.615 li
24.9268 200.851 li
24.9268 200.243 li
26.1016 200.007 li
26.7695 200.007 li
26.7695 204.368 li
27.8564 204.368 li
27.8564 204.928 li
25.0215 204.928 li
25.0215 204.368 li
cp
f
30.624 200.446 mo
30.2798 200.446 30.0234 200.615 29.8481 200.952 cv
29.6724 201.29 29.5913 201.796 29.5913 202.472 cv
29.5913 203.146 29.6724 203.652 29.8481 203.99 cv
30.0234 204.327 30.2798 204.496 30.624 204.496 cv
30.9683 204.496 31.2251 204.327 31.4004 203.99 cv
31.5693 203.652 31.6567 203.146 31.6567 202.472 cv
31.6567 201.796 31.5693 201.29 31.4004 200.952 cv
31.2251 200.615 30.9683 200.446 30.624 200.446 cv
30.624 199.92 mo
31.1709 199.92 31.5894 200.143 31.8862 200.574 cv
32.1768 201.014 32.3252 201.647 32.3252 202.472 cv
32.3252 203.302 32.1768 203.936 31.8862 204.368 cv
31.5894 204.8 31.1709 205.016 30.624 205.016 cv
30.0708 205.016 29.6455 204.8 29.355 204.368 cv
29.0649 203.936 28.9233 203.302 28.9233 202.472 cv
28.9233 201.647 29.0649 201.014 29.355 200.574 cv
29.6455 200.143 30.0708 199.92 30.624 199.92 cv
f
34.917 200.446 mo
34.5728 200.446 34.3164 200.615 34.1406 200.952 cv
33.9653 201.29 33.8843 201.796 33.8843 202.472 cv
33.8843 203.146 33.9653 203.652 34.1406 203.99 cv
34.3164 204.327 34.5728 204.496 34.917 204.496 cv
35.2612 204.496 35.5176 204.327 35.6934 203.99 cv
35.8618 203.652 35.9497 203.146 35.9497 202.472 cv
35.9497 201.796 35.8618 201.29 35.6934 200.952 cv
35.5176 200.615 35.2612 200.446 34.917 200.446 cv
34.917 199.92 mo
35.4639 199.92 35.8823 200.143 36.1792 200.574 cv
36.4697 201.014 36.6182 201.647 36.6182 202.472 cv
36.6182 203.302 36.4697 203.936 36.1792 204.368 cv
35.8823 204.8 35.4639 205.016 34.917 205.016 cv
34.3638 205.016 33.9385 204.8 33.6479 204.368 cv
33.3579 203.936 33.2158 203.302 33.2158 202.472 cv
33.2158 201.647 33.3579 201.014 33.6479 200.574 cv
33.9385 200.143 34.3638 199.92 34.917 199.92 cv
f
61.4253 197.545 mo
61.4253 195.295 li
f
61.4253 197.545 mo
61.4253 195.295 li
@
61.4253 3.14551 mo
61.4253 5.39551 li
f
61.4253 3.14551 mo
61.4253 5.39551 li
@
56.7451 204.368 mo
59.0669 204.368 li
59.0669 204.928 li
55.9419 204.928 li
55.9419 204.368 li
56.1914 204.111 56.5356 203.761 56.9746 203.314 cv
57.4063 202.877 57.6831 202.593 57.7979 202.464 cv
58.0142 202.229 58.1626 202.025 58.2437 201.856 cv
58.3247 201.694 58.3716 201.526 58.3716 201.364 cv
58.3716 201.107 58.2773 200.892 58.0947 200.729 cv
57.9126 200.567 57.6763 200.479 57.3794 200.479 cv
57.1704 200.479 56.9473 200.521 56.7178 200.588 cv
56.4883 200.662 56.2388 200.771 55.9756 200.919 cv
55.9756 200.243 li
56.2456 200.136 56.4951 200.055 56.7246 200.001 cv
56.9541 199.947 57.1704 199.92 57.3657 199.92 cv
57.8721 199.92 58.2773 200.048 58.5811 200.305 cv
58.8848 200.561 59.04 200.898 59.04 201.323 cv
59.04 201.526 58.9995 201.722 58.9253 201.897 cv
58.8511 202.08 58.7158 202.296 58.5137 202.538 cv
58.4595 202.606 58.2842 202.788 57.9868 203.092 cv
57.6899 203.396 57.2783 203.821 56.7451 204.368 cv
f
61.8887 200.446 mo
61.5444 200.446 61.2876 200.615 61.1123 200.952 cv
60.9365 201.29 60.856 201.796 60.856 202.472 cv
60.856 203.146 60.9365 203.652 61.1123 203.99 cv
61.2876 204.327 61.5444 204.496 61.8887 204.496 cv
62.2329 204.496 62.4893 204.327 62.6646 203.99 cv
62.8335 203.652 62.9214 203.146 62.9214 202.472 cv
62.9214 201.796 62.8335 201.29 62.6646 200.952 cv
62.4893 200.615 62.2329 200.446 61.8887 200.446 cv
61.8887 199.92 mo
62.4351 199.92 62.8535 200.143 63.1509 200.574 cv
63.4409 201.014 63.5894 201.647 63.5894 202.472 cv
63.5894 203.302 63.4409 203.936 63.1509 204.368 cv
62.8535 204.8 62.4351 205.016 61.8887 205.016 cv
61.335 205.016 60.9097 204.8 60.6196 204.368 cv
60.3291 203.936 60.1875 203.302 60.1875 202.472 cv
60.1875 201.647 60.3291 201.014 60.6196 200.574 cv
60.9097 200.143 61.335 199.92 61.8887 199.92 cv
f
66.1812 200.446 mo
65.8369 200.446 65.5806 200.615 65.4053 200.952 cv
65.2295 201.29 65.1484 201.796 65.1484 202.472 cv
65.1484 203.146 65.2295 203.652 65.4053 203.99 cv
65.5806 204.327 65.8369 204.496 66.1812 204.496 cv
66.5259 204.496 66.7822 204.327 66.9575 203.99 cv
67.1265 203.652 67.2144 203.146 67.2144 202.472 cv
67.2144 201.796 67.1265 201.29 66.9575 200.952 cv
66.7822 200.615 66.5259 200.446 66.1812 200.446 cv
66.1812 199.92 mo
66.728 199.92 67.1465 200.143 67.4438 200.574 cv
67.7339 201.014 67.8823 201.647 67.8823 202.472 cv
67.8823 203.302 67.7339 203.936 67.4438 204.368 cv
67.1465 204.8 66.728 205.016 66.1812 205.016 cv
65.6279 205.016 65.2026 204.8 64.9126 204.368 cv
64.6221 203.936 64.4805 203.302 64.4805 202.472 cv
64.4805 201.647 64.6221 201.014 64.9126 200.574 cv
65.2026 200.143 65.6279 199.92 66.1812 199.92 cv
f
92.813 197.545 mo
92.813 195.295 li
f
92.813 197.545 mo
92.813 195.295 li
@
92.813 3.14551 mo
92.813 5.39551 li
f
92.813 3.14551 mo
92.813 5.39551 li
@
89.5903 202.275 mo
89.9077 202.343 90.1572 202.484 90.3325 202.701 cv
90.5083 202.917 90.6025 203.187 90.6025 203.497 cv
90.6025 203.983 90.4341 204.361 90.103 204.624 cv
89.7656 204.888 89.2935 205.016 88.6792 205.016 cv
88.4697 205.016 88.2539 204.996 88.0376 204.955 cv
87.8218 204.922 87.5923 204.86 87.3628 204.779 cv
87.3628 204.139 li
87.5449 204.246 87.7476 204.327 87.9702 204.382 cv
88.186 204.436 88.4155 204.463 88.6587 204.463 cv
89.0771 204.463 89.3945 204.382 89.6104 204.22 cv
89.8267 204.058 89.9414 203.814 89.9414 203.497 cv
89.9414 203.214 89.8398 202.984 89.6377 202.822 cv
89.4351 202.66 89.1514 202.572 88.7871 202.572 cv
88.2134 202.572 li
88.2134 202.025 li
88.814 202.025 li
89.1382 202.025 89.3877 201.965 89.563 201.83 cv
89.7388 201.702 89.8267 201.513 89.8267 201.263 cv
89.8267 201.014 89.7319 200.817 89.5566 200.683 cv
89.374 200.548 89.1177 200.48 88.7871 200.48 cv
88.605 200.48 88.4092 200.5 88.1997 200.541 cv
87.9907 200.581 87.7612 200.642 87.5112 200.723 cv
87.5112 200.129 li
87.7612 200.062 87.9971 200.008 88.2202 199.974 cv
88.436 199.94 88.645 199.92 88.8477 199.92 cv
89.3472 199.92 89.7456 200.034 90.0425 200.264 cv
90.3394 200.493 90.4878 200.804 90.4878 201.195 cv
90.4878 201.466 90.4067 201.695 90.252 201.884 cv
90.0967 202.073 89.8735 202.208 89.5903 202.275 cv
f
93.2891 200.446 mo
92.9448 200.446 92.6885 200.615 92.5127 200.952 cv
92.3374 201.29 92.2563 201.796 92.2563 202.472 cv
92.2563 203.146 92.3374 203.652 92.5127 203.99 cv
92.6885 204.327 92.9448 204.496 93.2891 204.496 cv
93.6333 204.496 93.8896 204.327 94.0654 203.99 cv
94.2339 203.652 94.3218 203.146 94.3218 202.472 cv
94.3218 201.796 94.2339 201.29 94.0654 200.952 cv
93.8896 200.615 93.6333 200.446 93.2891 200.446 cv
93.2891 199.92 mo
93.8359 199.92 94.2544 200.143 94.5513 200.574 cv
94.8418 201.014 94.9902 201.647 94.9902 202.472 cv
94.9902 203.302 94.8418 203.936 94.5513 204.368 cv
94.2544 204.8 93.8359 205.016 93.2891 205.016 cv
92.7354 205.016 92.3105 204.8 92.02 204.368 cv
91.73 203.936 91.5879 203.302 91.5879 202.472 cv
91.5879 201.647 91.73 201.014 92.02 200.574 cv
92.3105 200.143 92.7354 199.92 93.2891 199.92 cv
f
97.582 200.446 mo
97.2378 200.446 96.9814 200.615 96.8062 200.952 cv
96.6304 201.29 96.5493 201.796 96.5493 202.472 cv
96.5493 203.146 96.6304 203.652 96.8062 203.99 cv
96.9814 204.327 97.2378 204.496 97.582 204.496 cv
97.9263 204.496 98.1831 204.327 98.3584 203.99 cv
98.5273 203.652 98.6147 203.146 98.6147 202.472 cv
98.6147 201.796 98.5273 201.29 98.3584 200.952 cv
98.1831 200.615 97.9263 200.446 97.582 200.446 cv
97.582 199.92 mo
98.1289 199.92 98.5474 200.143 98.8442 200.574 cv
99.1348 201.014 99.2832 201.647 99.2832 202.472 cv
99.2832 203.302 99.1348 203.936 98.8442 204.368 cv
98.5474 204.8 98.1289 205.016 97.582 205.016 cv
97.0288 205.016 96.6035 204.8 96.313 204.368 cv
96.0229 203.936 95.8813 203.302 95.8813 202.472 cv
95.8813 201.647 96.0229 201.014 96.313 200.574 cv
96.6035 200.143 97.0288 199.92 97.582 199.92 cv
f
124.201 197.545 mo
124.201 195.295 li
f
124.201 197.545 mo
124.201 195.295 li
@
124.201 3.14551 mo
124.201 5.39551 li
f
124.201 3.14551 mo
124.201 5.39551 li
@
120.696 200.588 mo
119.016 203.214 li
120.696 203.214 li
120.696 200.588 li
120.521 200.008 mo
121.358 200.008 li
121.358 203.214 li
122.06 203.214 li
122.06 203.768 li
121.358 203.768 li
121.358 204.929 li
120.696 204.929 li
120.696 203.768 li
118.476 203.768 li
118.476 203.126 li
120.521 200.008 li
cp
f
124.584 200.446 mo
124.24 200.446 123.984 200.615 123.808 200.952 cv
123.633 201.29 123.552 201.796 123.552 202.472 cv
123.552 203.146 123.633 203.652 123.808 203.99 cv
123.984 204.327 124.24 204.496 124.584 204.496 cv
124.929 204.496 125.185 204.327 125.361 203.99 cv
125.529 203.652 125.617 203.146 125.617 202.472 cv
125.617 201.796 125.529 201.29 125.361 200.952 cv
125.185 200.615 124.929 200.446 124.584 200.446 cv
124.584 199.92 mo
125.131 199.92 125.55 200.143 125.847 200.574 cv
126.137 201.014 126.286 201.647 126.286 202.472 cv
126.286 203.302 126.137 203.936 125.847 204.368 cv
125.55 204.8 125.131 205.016 124.584 205.016 cv
124.031 205.016 123.605 204.8 123.315 204.368 cv
123.025 203.936 122.883 203.302 122.883 202.472 cv
122.883 201.647 123.025 201.014 123.315 200.574 cv
123.605 200.143 124.031 199.92 124.584 199.92 cv
f
128.877 200.446 mo
128.533 200.446 128.277 200.615 128.101 200.952 cv
127.926 201.29 127.845 201.796 127.845 202.472 cv
127.845 203.146 127.926 203.652 128.101 203.99 cv
128.277 204.327 128.533 204.496 128.877 204.496 cv
129.222 204.496 129.478 204.327 129.654 203.99 cv
129.822 203.652 129.91 203.146 129.91 202.472 cv
129.91 201.796 129.822 201.29 129.654 200.952 cv
129.478 200.615 129.222 200.446 128.877 200.446 cv
128.877 199.92 mo
129.424 199.92 129.843 200.143 130.14 200.574 cv
130.43 201.014 130.579 201.647 130.579 202.472 cv
130.579 203.302 130.43 203.936 130.14 204.368 cv
129.843 204.8 129.424 205.016 128.877 205.016 cv
128.324 205.016 127.898 204.8 127.608 204.368 cv
127.318 203.936 127.176 203.302 127.176 202.472 cv
127.176 201.647 127.318 201.014 127.608 200.574 cv
127.898 200.143 128.324 199.92 128.877 199.92 cv
f
155.588 197.545 mo
155.588 195.295 li
f
155.588 197.545 mo
155.588 195.295 li
@
155.588 3.14551 mo
155.588 5.39551 li
f
155.588 3.14551 mo
155.588 5.39551 li
@
150.354 200.008 mo
152.966 200.008 li
152.966 200.567 li
150.961 200.567 li
150.961 201.776 li
151.056 201.742 151.157 201.715 151.251 201.702 cv
151.346 201.688 151.447 201.675 151.542 201.675 cv
152.088 201.675 152.521 201.83 152.844 202.128 cv
153.168 202.432 153.331 202.836 153.331 203.349 cv
153.331 203.883 153.162 204.294 152.831 204.584 cv
152.5 204.874 152.035 205.016 151.44 205.016 cv
151.231 205.016 151.022 204.996 150.806 204.969 cv
150.59 204.935 150.374 204.888 150.145 204.813 cv
150.145 204.146 li
150.34 204.253 150.542 204.334 150.759 204.388 cv
150.968 204.442 151.191 204.462 151.427 204.462 cv
151.805 204.462 152.109 204.368 152.332 204.166 cv
152.547 203.963 152.662 203.692 152.662 203.349 cv
152.662 203.011 152.547 202.741 152.332 202.539 cv
152.109 202.337 151.805 202.235 151.427 202.235 cv
151.251 202.235 151.069 202.255 150.894 202.296 cv
150.718 202.337 150.536 202.396 150.354 202.479 cv
150.354 200.008 li
f
156.064 200.446 mo
155.72 200.446 155.464 200.615 155.288 200.952 cv
155.113 201.29 155.032 201.796 155.032 202.472 cv
155.032 203.146 155.113 203.652 155.288 203.99 cv
155.464 204.327 155.72 204.496 156.064 204.496 cv
156.408 204.496 156.665 204.327 156.841 203.99 cv
157.009 203.652 157.097 203.146 157.097 202.472 cv
157.097 201.796 157.009 201.29 156.841 200.952 cv
156.665 200.615 156.408 200.446 156.064 200.446 cv
156.064 199.92 mo
156.611 199.92 157.03 200.143 157.326 200.574 cv
157.617 201.014 157.765 201.647 157.765 202.472 cv
157.765 203.302 157.617 203.936 157.326 204.368 cv
157.03 204.8 156.611 205.016 156.064 205.016 cv
155.511 205.016 155.085 204.8 154.795 204.368 cv
154.505 203.936 154.363 203.302 154.363 202.472 cv
154.363 201.647 154.505 201.014 154.795 200.574 cv
155.085 200.143 155.511 199.92 156.064 199.92 cv
f
160.357 200.446 mo
160.013 200.446 159.756 200.615 159.582 200.952 cv
159.406 201.29 159.325 201.796 159.325 202.472 cv
159.325 203.146 159.406 203.652 159.582 203.99 cv
159.756 204.327 160.013 204.496 160.357 204.496 cv
160.701 204.496 160.958 204.327 161.133 203.99 cv
161.302 203.652 161.39 203.146 161.39 202.472 cv
161.39 201.796 161.302 201.29 161.133 200.952 cv
160.958 200.615 160.701 200.446 160.357 200.446 cv
160.357 199.92 mo
160.904 199.92 161.323 200.143 161.62 200.574 cv
161.91 201.014 162.058 201.647 162.058 202.472 cv
162.058 203.302 161.91 203.936 161.62 204.368 cv
161.323 204.8 160.904 205.016 160.357 205.016 cv
159.804 205.016 159.378 204.8 159.088 204.368 cv
158.798 203.936 158.656 203.302 158.656 202.472 cv
158.656 201.647 158.798 201.014 159.088 200.574 cv
159.378 200.143 159.804 199.92 160.357 199.92 cv
f
186.975 197.545 mo
186.975 195.295 li
f
186.975 197.545 mo
186.975 195.295 li
@
186.975 3.14551 mo
186.975 5.39551 li
f
186.975 3.14551 mo
186.975 5.39551 li
@
183.217 202.201 mo
182.92 202.201 182.684 202.309 182.509 202.512 cv
182.333 202.714 182.246 202.998 182.246 203.349 cv
182.246 203.706 182.333 203.99 182.509 204.192 cv
182.684 204.395 182.92 204.496 183.217 204.496 cv
183.514 204.496 183.75 204.395 183.926 204.192 cv
184.102 203.99 184.19 203.706 184.19 203.349 cv
184.19 202.998 184.102 202.714 183.926 202.512 cv
183.75 202.309 183.514 202.201 183.217 202.201 cv
184.542 200.115 mo
184.542 200.723 li
184.372 200.642 184.203 200.581 184.035 200.541 cv
183.859 200.5 183.69 200.479 183.528 200.479 cv
183.083 200.479 182.746 200.629 182.515 200.925 cv
182.287 201.223 182.151 201.674 182.125 202.269 cv
182.252 202.08 182.415 201.932 182.61 201.83 cv
182.806 201.729 183.022 201.674 183.258 201.674 cv
183.75 201.674 184.142 201.83 184.426 202.127 cv
184.709 202.424 184.858 202.836 184.858 203.349 cv
184.858 203.854 184.703 204.26 184.406 204.563 cv
184.109 204.867 183.71 205.016 183.217 205.016 cv
182.651 205.016 182.211 204.8 181.915 204.368 cv
181.611 203.937 181.462 203.302 181.462 202.471 cv
181.462 201.695 181.645 201.074 182.016 200.615 cv
182.38 200.156 182.88 199.92 183.501 199.92 cv
183.664 199.92 183.832 199.939 184.007 199.967 cv
184.176 200.001 184.352 200.048 184.542 200.115 cv
f
187.43 200.446 mo
187.085 200.446 186.829 200.615 186.654 200.952 cv
186.478 201.29 186.397 201.796 186.397 202.472 cv
186.397 203.146 186.478 203.652 186.654 203.99 cv
186.829 204.327 187.085 204.496 187.43 204.496 cv
187.774 204.496 188.03 204.327 188.206 203.99 cv
188.375 203.652 188.462 203.146 188.462 202.472 cv
188.462 201.796 188.375 201.29 188.206 200.952 cv
188.03 200.615 187.774 200.446 187.43 200.446 cv
187.43 199.92 mo
187.976 199.92 188.395 200.143 188.692 200.574 cv
188.982 201.014 189.13 201.647 189.13 202.472 cv
189.13 203.302 188.982 203.936 188.692 204.368 cv
188.395 204.8 187.976 205.016 187.43 205.016 cv
186.876 205.016 186.451 204.8 186.161 204.368 cv
185.871 203.936 185.729 203.302 185.729 202.472 cv
185.729 201.647 185.871 201.014 186.161 200.574 cv
186.451 200.143 186.876 199.92 187.43 199.92 cv
f
191.723 200.446 mo
191.378 200.446 191.122 200.615 190.947 200.952 cv
190.771 201.29 190.69 201.796 190.69 202.472 cv
190.69 203.146 190.771 203.652 190.947 203.99 cv
191.122 204.327 191.378 204.496 191.723 204.496 cv
192.067 204.496 192.324 204.327 192.499 203.99 cv
192.667 203.652 192.755 203.146 192.755 202.472 cv
192.755 201.796 192.667 201.29 192.499 200.952 cv
192.324 200.615 192.067 200.446 191.723 200.446 cv
191.723 199.92 mo
192.269 199.92 192.688 200.143 192.985 200.574 cv
193.275 201.014 193.423 201.647 193.423 202.472 cv
193.423 203.302 193.275 203.936 192.985 204.368 cv
192.688 204.8 192.269 205.016 191.723 205.016 cv
191.169 205.016 190.744 204.8 190.454 204.368 cv
190.164 203.936 190.022 203.302 190.022 202.472 cv
190.022 201.647 190.164 201.014 190.454 200.574 cv
190.744 200.143 191.169 199.92 191.723 199.92 cv
f
218.363 197.545 mo
218.363 195.295 li
f
218.363 197.545 mo
218.363 195.295 li
@
218.363 3.14551 mo
218.363 5.39551 li
f
218.363 3.14551 mo
218.363 5.39551 li
@
212.971 200.008 mo
216.136 200.008 li
216.136 200.291 li
214.348 204.928 li
213.653 204.928 li
215.333 200.567 li
212.971 200.567 li
212.971 200.008 li
cp
f
218.857 200.446 mo
218.512 200.446 218.256 200.615 218.081 200.952 cv
217.905 201.29 217.824 201.796 217.824 202.472 cv
217.824 203.146 217.905 203.652 218.081 203.99 cv
218.256 204.327 218.512 204.496 218.857 204.496 cv
219.201 204.496 219.458 204.327 219.633 203.99 cv
219.801 203.652 219.889 203.146 219.889 202.472 cv
219.889 201.796 219.801 201.29 219.633 200.952 cv
219.458 200.615 219.201 200.446 218.857 200.446 cv
218.857 199.92 mo
219.404 199.92 219.822 200.143 220.119 200.574 cv
220.41 201.014 220.558 201.647 220.558 202.472 cv
220.558 203.302 220.41 203.936 220.119 204.368 cv
219.822 204.8 219.404 205.016 218.857 205.016 cv
218.303 205.016 217.878 204.8 217.587 204.368 cv
217.297 203.936 217.156 203.302 217.156 202.472 cv
217.156 201.647 217.297 201.014 217.587 200.574 cv
217.878 200.143 218.303 199.92 218.857 199.92 cv
f
223.15 200.446 mo
222.805 200.446 222.549 200.615 222.374 200.952 cv
222.199 201.29 222.117 201.796 222.117 202.472 cv
222.117 203.146 222.199 203.652 222.374 203.99 cv
222.549 204.327 222.805 204.496 223.15 204.496 cv
223.494 204.496 223.75 204.327 223.926 203.99 cv
224.094 203.652 224.182 203.146 224.182 202.472 cv
224.182 201.796 224.094 201.29 223.926 200.952 cv
223.75 200.615 223.494 200.446 223.15 200.446 cv
223.15 199.92 mo
223.697 199.92 224.115 200.143 224.412 200.574 cv
224.703 201.014 224.851 201.647 224.851 202.472 cv
224.851 203.302 224.703 203.936 224.412 204.368 cv
224.115 204.8 223.697 205.016 223.15 205.016 cv
222.597 205.016 222.171 204.8 221.88 204.368 cv
221.591 203.936 221.449 203.302 221.449 202.472 cv
221.449 201.647 221.591 201.014 221.88 200.574 cv
222.171 200.143 222.597 199.92 223.15 199.92 cv
f
249.75 197.545 mo
249.75 195.295 li
f
249.75 197.545 mo
249.75 195.295 li
@
249.75 3.14551 mo
249.75 5.39551 li
f
249.75 3.14551 mo
249.75 5.39551 li
@
245.903 202.593 mo
245.585 202.593 245.335 202.68 245.154 202.849 cv
244.971 203.019 244.883 203.247 244.883 203.544 cv
244.883 203.842 244.971 204.078 245.154 204.246 cv
245.335 204.415 245.585 204.496 245.903 204.496 cv
246.213 204.496 246.463 204.415 246.645 204.24 cv
246.828 204.071 246.922 203.842 246.922 203.544 cv
246.922 203.247 246.828 203.019 246.652 202.849 cv
246.47 202.68 246.22 202.593 245.903 202.593 cv
245.235 202.309 mo
244.951 202.242 244.728 202.107 244.566 201.911 cv
244.405 201.715 244.331 201.479 244.331 201.195 cv
244.331 200.804 244.465 200.494 244.749 200.264 cv
245.025 200.034 245.41 199.92 245.903 199.92 cv
246.389 199.92 246.774 200.034 247.057 200.264 cv
247.333 200.494 247.476 200.804 247.476 201.195 cv
247.476 201.479 247.395 201.715 247.233 201.911 cv
247.071 202.107 246.855 202.242 246.571 202.309 cv
246.888 202.384 247.138 202.532 247.321 202.748 cv
247.496 202.964 247.59 203.234 247.59 203.544 cv
247.59 204.024 247.442 204.388 247.152 204.639 cv
246.855 204.895 246.443 205.017 245.903 205.017 cv
245.356 205.017 244.938 204.895 244.647 204.639 cv
244.357 204.388 244.215 204.024 244.215 203.544 cv
244.215 203.234 244.303 202.964 244.486 202.748 cv
244.661 202.532 244.911 202.384 245.235 202.309 cv
244.992 201.257 mo
244.992 201.513 245.066 201.715 245.228 201.856 cv
245.39 201.998 245.613 202.065 245.903 202.065 cv
246.186 202.065 246.409 201.998 246.571 201.856 cv
246.733 201.715 246.814 201.513 246.814 201.257 cv
246.814 201 246.733 200.804 246.571 200.662 cv
246.409 200.521 246.186 200.446 245.903 200.446 cv
245.613 200.446 245.39 200.521 245.228 200.662 cv
245.066 200.804 244.992 201 244.992 201.257 cv
f
250.196 200.446 mo
249.851 200.446 249.595 200.615 249.419 200.952 cv
249.245 201.29 249.163 201.796 249.163 202.472 cv
249.163 203.146 249.245 203.652 249.419 203.99 cv
249.595 204.327 249.851 204.496 250.196 204.496 cv
250.541 204.496 250.796 204.327 250.972 203.99 cv
251.141 203.652 251.229 203.146 251.229 202.472 cv
251.229 201.796 251.141 201.29 250.972 200.952 cv
250.796 200.615 250.541 200.446 250.196 200.446 cv
250.196 199.92 mo
250.743 199.92 251.161 200.143 251.458 200.574 cv
251.749 201.014 251.897 201.647 251.897 202.472 cv
251.897 203.302 251.749 203.936 251.458 204.368 cv
251.161 204.8 250.743 205.016 250.196 205.016 cv
249.643 205.016 249.217 204.8 248.927 204.368 cv
248.637 203.936 248.496 203.302 248.496 202.472 cv
248.496 201.647 248.637 201.014 248.927 200.574 cv
249.217 200.143 249.643 199.92 250.196 199.92 cv
f
254.489 200.446 mo
254.145 200.446 253.888 200.615 253.712 200.952 cv
253.538 201.29 253.456 201.796 253.456 202.472 cv
253.456 203.146 253.538 203.652 253.712 203.99 cv
253.888 204.327 254.145 204.496 254.489 204.496 cv
254.833 204.496 255.089 204.327 255.265 203.99 cv
255.434 203.652 255.521 203.146 255.521 202.472 cv
255.521 201.796 255.434 201.29 255.265 200.952 cv
255.089 200.615 254.833 200.446 254.489 200.446 cv
254.489 199.92 mo
255.036 199.92 255.455 200.143 255.75 200.574 cv
256.042 201.014 256.19 201.647 256.19 202.472 cv
256.19 203.302 256.042 203.936 255.75 204.368 cv
255.455 204.8 255.036 205.016 254.489 205.016 cv
253.936 205.016 253.51 204.8 253.219 204.368 cv
252.93 203.936 252.789 203.302 252.789 202.472 cv
252.789 201.647 252.93 201.014 253.219 200.574 cv
253.51 200.143 253.936 199.92 254.489 199.92 cv
f
281.138 197.545 mo
281.138 195.295 li
f
281.138 197.545 mo
281.138 195.295 li
@
281.138 3.14551 mo
281.138 5.39551 li
f
281.138 3.14551 mo
281.138 5.39551 li
@
275.869 204.827 mo
275.869 204.22 li
276.031 204.3 276.2 204.361 276.375 204.401 cv
276.543 204.441 276.712 204.463 276.881 204.463 cv
277.313 204.463 277.651 204.321 277.88 204.023 cv
278.11 203.727 278.246 203.281 278.285 202.674 cv
278.151 202.862 277.989 203.011 277.799 203.112 cv
277.603 203.214 277.387 203.261 277.151 203.261 cv
276.652 203.261 276.26 203.112 275.977 202.815 cv
275.693 202.519 275.552 202.113 275.552 201.594 cv
275.552 201.095 275.7 200.689 275.998 200.379 cv
276.293 200.075 276.692 199.92 277.192 199.92 cv
277.758 199.92 278.198 200.143 278.495 200.574 cv
278.792 201.014 278.947 201.647 278.947 202.472 cv
278.947 203.254 278.758 203.868 278.393 204.327 cv
278.022 204.786 277.529 205.016 276.909 205.016 cv
276.74 205.016 276.571 204.996 276.402 204.969 cv
276.227 204.941 276.051 204.895 275.869 204.827 cv
277.192 202.741 mo
277.489 202.741 277.725 202.64 277.9 202.438 cv
278.076 202.235 278.164 201.951 278.164 201.594 cv
278.164 201.243 278.076 200.959 277.9 200.757 cv
277.725 200.555 277.489 200.446 277.192 200.446 cv
276.895 200.446 276.659 200.555 276.483 200.757 cv
276.307 200.959 276.219 201.243 276.219 201.594 cv
276.219 201.951 276.307 202.235 276.483 202.438 cv
276.659 202.64 276.895 202.741 277.192 202.741 cv
f
281.566 200.446 mo
281.222 200.446 280.965 200.615 280.79 200.952 cv
280.615 201.29 280.533 201.796 280.533 202.472 cv
280.533 203.146 280.615 203.652 280.79 203.99 cv
280.965 204.327 281.222 204.496 281.566 204.496 cv
281.91 204.496 282.167 204.327 282.342 203.99 cv
282.511 203.652 282.598 203.146 282.598 202.472 cv
282.598 201.796 282.511 201.29 282.342 200.952 cv
282.167 200.615 281.91 200.446 281.566 200.446 cv
281.566 199.92 mo
282.113 199.92 282.532 200.143 282.828 200.574 cv
283.119 201.014 283.267 201.647 283.267 202.472 cv
283.267 203.302 283.119 203.936 282.828 204.368 cv
282.532 204.8 282.113 205.016 281.566 205.016 cv
281.013 205.016 280.587 204.8 280.296 204.368 cv
280.007 203.936 279.865 203.302 279.865 202.472 cv
279.865 201.647 280.007 201.014 280.296 200.574 cv
280.587 200.143 281.013 199.92 281.566 199.92 cv
f
285.859 200.446 mo
285.515 200.446 285.258 200.615 285.083 200.952 cv
284.908 201.29 284.827 201.796 284.827 202.472 cv
284.827 203.146 284.908 203.652 285.083 203.99 cv
285.258 204.327 285.515 204.496 285.859 204.496 cv
286.203 204.496 286.459 204.327 286.635 203.99 cv
286.804 203.652 286.892 203.146 286.892 202.472 cv
286.892 201.796 286.804 201.29 286.635 200.952 cv
286.459 200.615 286.203 200.446 285.859 200.446 cv
285.859 199.92 mo
286.406 199.92 286.825 200.143 287.121 200.574 cv
287.412 201.014 287.559 201.647 287.559 202.472 cv
287.559 203.302 287.412 203.936 287.121 204.368 cv
286.825 204.8 286.406 205.016 285.859 205.016 cv
285.305 205.016 284.88 204.8 284.589 204.368 cv
284.3 203.936 284.158 203.302 284.158 202.472 cv
284.158 201.647 284.3 201.014 284.589 200.574 cv
284.88 200.143 285.305 199.92 285.859 199.92 cv
f
142.53 209.359 mo
143.198 209.359 li
143.198 213.72 li
145.594 213.72 li
145.594 214.279 li
142.53 214.279 li
142.53 209.359 li
cp
f
146.263 210.588 mo
146.871 210.588 li
146.871 214.279 li
146.263 214.279 li
146.263 210.588 li
cp
146.263 209.149 mo
146.871 209.149 li
146.871 209.919 li
146.263 209.919 li
146.263 209.149 li
cp
f
150.495 210.695 mo
150.495 211.27 li
150.319 211.188 150.144 211.121 149.961 211.073 cv
149.772 211.033 149.583 211.007 149.388 211.007 cv
149.084 211.007 148.854 211.054 148.706 211.148 cv
148.558 211.243 148.483 211.377 148.483 211.56 cv
148.483 211.701 148.538 211.81 148.646 211.89 cv
148.753 211.972 148.969 212.052 149.293 212.12 cv
149.502 212.167 li
149.935 212.262 150.238 212.396 150.42 212.559 cv
150.596 212.728 150.69 212.964 150.69 213.261 cv
150.69 213.604 150.556 213.875 150.286 214.07 cv
150.016 214.272 149.638 214.367 149.165 214.367 cv
148.962 214.367 148.76 214.347 148.544 214.313 cv
148.328 214.279 148.105 214.226 147.869 214.145 cv
147.869 213.518 li
148.092 213.639 148.314 213.727 148.531 213.78 cv
148.747 213.841 148.962 213.868 149.179 213.868 cv
149.462 213.868 149.685 213.821 149.84 213.727 cv
149.989 213.632 150.07 213.49 150.07 213.309 cv
150.07 213.146 150.009 213.018 149.901 212.931 cv
149.793 212.842 149.55 212.754 149.172 212.674 cv
148.962 212.626 li
148.584 212.545 148.308 212.424 148.146 212.262 cv
147.977 212.1 147.896 211.877 147.896 211.586 cv
147.896 211.243 148.018 210.972 148.261 210.783 cv
148.503 210.594 148.854 210.5 149.313 210.5 cv
149.537 210.5 149.746 210.52 149.948 210.554 cv
150.144 210.588 150.326 210.635 150.495 210.695 cv
f
152.256 209.541 mo
152.256 210.588 li
153.505 210.588 li
153.505 211.06 li
152.256 211.06 li
152.256 213.064 li
152.256 213.368 152.297 213.564 152.378 213.646 cv
152.459 213.733 152.628 213.773 152.884 213.773 cv
153.505 213.773 li
153.505 214.28 li
152.884 214.28 li
152.412 214.28 152.088 214.192 151.912 214.017 cv
151.737 213.841 151.649 213.523 151.649 213.064 cv
151.649 211.06 li
151.204 211.06 li
151.204 210.588 li
151.649 210.588 li
151.649 209.541 li
152.256 209.541 li
f
159.425 209.521 mo
159.425 210.169 li
159.168 210.048 158.932 209.96 158.709 209.899 cv
158.48 209.845 158.264 209.812 158.062 209.812 cv
157.697 209.812 157.414 209.886 157.218 210.021 cv
157.022 210.163 156.928 210.364 156.928 210.621 cv
156.928 210.837 156.988 211.007 157.124 211.114 cv
157.251 211.229 157.501 211.316 157.866 211.385 cv
158.271 211.465 li
158.764 211.56 159.128 211.729 159.364 211.965 cv
159.601 212.207 159.721 212.524 159.721 212.923 cv
159.721 213.402 159.56 213.76 159.243 214.003 cv
158.919 214.246 158.453 214.367 157.839 214.367 cv
157.603 214.367 157.352 214.341 157.09 214.293 cv
156.826 214.246 156.556 214.172 156.28 214.063 cv
156.28 213.376 li
156.55 213.53 156.813 213.646 157.069 213.72 cv
157.326 213.801 157.583 213.834 157.839 213.834 cv
158.217 213.834 158.507 213.76 158.716 213.611 cv
158.919 213.463 159.027 213.254 159.027 212.97 cv
159.027 212.728 158.953 212.538 158.804 212.403 cv
158.656 212.269 158.413 212.167 158.075 212.1 cv
157.67 212.019 li
157.17 211.924 156.813 211.769 156.59 211.553 cv
156.367 211.344 156.259 211.054 156.259 210.675 cv
156.259 210.243 156.408 209.899 156.718 209.649 cv
157.022 209.399 157.447 209.271 157.987 209.271 cv
158.217 209.271 158.446 209.291 158.689 209.332 cv
158.926 209.372 159.168 209.44 159.425 209.521 cv
f
160.735 210.588 mo
161.342 210.588 li
161.342 214.279 li
160.735 214.279 li
160.735 210.588 li
cp
160.735 209.149 mo
161.342 209.149 li
161.342 209.919 li
160.735 209.919 li
160.735 209.149 li
cp
f
162.347 210.588 mo
165.23 210.588 li
165.23 211.141 li
162.948 213.793 li
165.23 213.793 li
165.23 214.279 li
162.266 214.279 li
162.266 213.727 li
164.548 211.073 li
162.347 211.073 li
162.347 210.588 li
cp
f
169.314 212.282 mo
169.314 212.579 li
166.526 212.579 li
166.553 212.997 166.674 213.321 166.904 213.537 cv
167.126 213.753 167.437 213.861 167.842 213.861 cv
168.072 213.861 168.301 213.834 168.517 213.78 cv
168.734 213.727 168.956 213.639 169.172 213.517 cv
169.172 214.091 li
168.956 214.186 168.734 214.26 168.503 214.3 cv
168.274 214.341 168.038 214.367 167.808 214.367 cv
167.214 214.367 166.749 214.199 166.404 213.861 cv
166.06 213.523 165.892 213.058 165.892 212.471 cv
165.892 211.87 166.053 211.391 166.377 211.033 cv
166.701 210.682 167.147 210.5 167.701 210.5 cv
168.2 210.5 168.591 210.662 168.881 210.979 cv
169.165 211.303 169.314 211.735 169.314 212.282 cv
168.707 212.105 mo
168.699 211.775 168.605 211.513 168.429 211.31 cv
168.248 211.114 168.004 211.013 167.708 211.013 cv
167.37 211.013 167.099 211.114 166.897 211.303 cv
166.695 211.492 166.574 211.762 166.546 212.105 cv
168.707 212.105 li
f
30.0381 197.545 mo
32.2881 197.545 li
f
30.0381 197.545 mo
32.2881 197.545 li
@
281.138 197.545 mo
278.888 197.545 li
f
281.138 197.545 mo
278.888 197.545 li
@
11.4951 194.927 mo
11.1509 194.927 10.894 195.096 10.7188 195.433 cv
10.5435 195.771 10.4624 196.276 10.4624 196.952 cv
10.4624 197.627 10.5435 198.133 10.7188 198.471 cv
10.894 198.808 11.1509 198.977 11.4951 198.977 cv
11.8394 198.977 12.0957 198.808 12.2715 198.471 cv
12.4399 198.133 12.5278 197.627 12.5278 196.952 cv
12.5278 196.276 12.4399 195.771 12.2715 195.433 cv
12.0957 195.096 11.8394 194.927 11.4951 194.927 cv
11.4951 194.4 mo
12.042 194.4 12.4604 194.623 12.7573 195.055 cv
13.0474 195.494 13.1958 196.128 13.1958 196.952 cv
13.1958 197.782 13.0474 198.416 12.7573 198.849 cv
12.4604 199.28 12.042 199.496 11.4951 199.496 cv
10.9414 199.496 10.5161 199.28 10.2261 198.849 cv
9.93604 198.416 9.79395 197.782 9.79395 196.952 cv
9.79395 196.128 9.93604 195.494 10.2261 195.055 cv
10.5161 194.623 10.9414 194.4 11.4951 194.4 cv
f
14.3638 198.571 mo
15.0591 198.571 li
15.0591 199.408 li
14.3638 199.408 li
14.3638 198.571 li
cp
f
17.9346 194.927 mo
17.5903 194.927 17.334 195.096 17.1582 195.433 cv
16.9829 195.771 16.9019 196.276 16.9019 196.952 cv
16.9019 197.627 16.9829 198.133 17.1582 198.471 cv
17.334 198.808 17.5903 198.977 17.9346 198.977 cv
18.2788 198.977 18.5356 198.808 18.7109 198.471 cv
18.8799 198.133 18.9673 197.627 18.9673 196.952 cv
18.9673 196.276 18.8799 195.771 18.7109 195.433 cv
18.5356 195.096 18.2788 194.927 17.9346 194.927 cv
17.9346 194.4 mo
18.4814 194.4 18.8999 194.623 19.1968 195.055 cv
19.4873 195.494 19.6357 196.128 19.6357 196.952 cv
19.6357 197.782 19.4873 198.416 19.1968 198.849 cv
18.8999 199.28 18.4814 199.496 17.9346 199.496 cv
17.3813 199.496 16.9561 199.28 16.6655 198.849 cv
16.3755 198.416 16.2339 197.782 16.2339 196.952 cv
16.2339 196.128 16.3755 195.494 16.6655 195.055 cv
16.9561 194.623 17.3813 194.4 17.9346 194.4 cv
f
22.2275 194.927 mo
21.8833 194.927 21.627 195.096 21.4512 195.433 cv
21.2759 195.771 21.1948 196.276 21.1948 196.952 cv
21.1948 197.627 21.2759 198.133 21.4512 198.471 cv
21.627 198.808 21.8833 198.977 22.2275 198.977 cv
22.5718 198.977 22.8281 198.808 23.0039 198.471 cv
23.1724 198.133 23.2603 197.627 23.2603 196.952 cv
23.2603 196.276 23.1724 195.771 23.0039 195.433 cv
22.8281 195.096 22.5718 194.927 22.2275 194.927 cv
22.2275 194.4 mo
22.7744 194.4 23.1929 194.623 23.4897 195.055 cv
23.7803 195.494 23.9287 196.128 23.9287 196.952 cv
23.9287 197.782 23.7803 198.416 23.4897 198.849 cv
23.1929 199.28 22.7744 199.496 22.2275 199.496 cv
21.6738 199.496 21.249 199.28 20.9585 198.849 cv
20.6685 198.416 20.5264 197.782 20.5264 196.952 cv
20.5264 196.128 20.6685 195.494 20.9585 195.055 cv
21.249 194.623 21.6738 194.4 22.2275 194.4 cv
f
26.5205 194.927 mo
26.1763 194.927 25.9199 195.096 25.7441 195.433 cv
25.5688 195.771 25.4878 196.276 25.4878 196.952 cv
25.4878 197.627 25.5688 198.133 25.7441 198.471 cv
25.9199 198.808 26.1763 198.977 26.5205 198.977 cv
26.8647 198.977 27.1211 198.808 27.2969 198.471 cv
27.4653 198.133 27.5532 197.627 27.5532 196.952 cv
27.5532 196.276 27.4653 195.771 27.2969 195.433 cv
27.1211 195.096 26.8647 194.927 26.5205 194.927 cv
26.5205 194.4 mo
27.0674 194.4 27.4858 194.623 27.7827 195.055 cv
28.0728 195.494 28.2217 196.128 28.2217 196.952 cv
28.2217 197.782 28.0728 198.416 27.7827 198.849 cv
27.4858 199.28 27.0674 199.496 26.5205 199.496 cv
25.9668 199.496 25.5415 199.28 25.2515 198.849 cv
24.9614 198.416 24.8193 197.782 24.8193 196.952 cv
24.8193 196.128 24.9614 195.494 25.2515 195.055 cv
25.5415 194.623 25.9668 194.4 26.5205 194.4 cv
f
30.0381 175.945 mo
32.2881 175.945 li
f
30.0381 175.945 mo
32.2881 175.945 li
@
281.138 175.945 mo
278.888 175.945 li
f
281.138 175.945 mo
278.888 175.945 li
@
11.6357 173.326 mo
11.2915 173.326 11.0347 173.496 10.8594 173.833 cv
10.6841 174.17 10.603 174.677 10.603 175.353 cv
10.603 176.027 10.6841 176.533 10.8594 176.871 cv
11.0347 177.208 11.2915 177.377 11.6357 177.377 cv
11.98 177.377 12.2363 177.208 12.4121 176.871 cv
12.5806 176.533 12.6685 176.027 12.6685 175.353 cv
12.6685 174.677 12.5806 174.17 12.4121 173.833 cv
12.2363 173.496 11.98 173.326 11.6357 173.326 cv
11.6357 172.8 mo
12.1826 172.8 12.6011 173.022 12.8979 173.455 cv
13.188 173.894 13.3364 174.528 13.3364 175.353 cv
13.3364 176.182 13.188 176.816 12.8979 177.249 cv
12.6011 177.681 12.1826 177.896 11.6357 177.896 cv
11.082 177.896 10.6567 177.681 10.3667 177.249 cv
10.0767 176.816 9.93457 176.182 9.93457 175.353 cv
9.93457 174.528 10.0767 173.894 10.3667 173.455 cv
10.6567 173.022 11.082 172.8 11.6357 172.8 cv
f
14.5044 176.972 mo
15.1997 176.972 li
15.1997 177.809 li
14.5044 177.809 li
14.5044 176.972 li
cp
f
18.0752 173.326 mo
17.731 173.326 17.4746 173.496 17.2988 173.833 cv
17.1235 174.17 17.0425 174.677 17.0425 175.353 cv
17.0425 176.027 17.1235 176.533 17.2988 176.871 cv
17.4746 177.208 17.731 177.377 18.0752 177.377 cv
18.4194 177.377 18.6763 177.208 18.8516 176.871 cv
19.0205 176.533 19.1079 176.027 19.1079 175.353 cv
19.1079 174.677 19.0205 174.17 18.8516 173.833 cv
18.6763 173.496 18.4194 173.326 18.0752 173.326 cv
18.0752 172.8 mo
18.6221 172.8 19.0405 173.022 19.3374 173.455 cv
19.6279 173.894 19.7764 174.528 19.7764 175.353 cv
19.7764 176.182 19.6279 176.816 19.3374 177.249 cv
19.0405 177.681 18.6221 177.896 18.0752 177.896 cv
17.522 177.896 17.0967 177.681 16.8062 177.249 cv
16.5161 176.816 16.3745 176.182 16.3745 175.353 cv
16.3745 174.528 16.5161 173.894 16.8062 173.455 cv
17.0967 173.022 17.522 172.8 18.0752 172.8 cv
f
22.3682 173.326 mo
22.0239 173.326 21.7676 173.496 21.5918 173.833 cv
21.4165 174.17 21.3354 174.677 21.3354 175.353 cv
21.3354 176.027 21.4165 176.533 21.5918 176.871 cv
21.7676 177.208 22.0239 177.377 22.3682 177.377 cv
22.7124 177.377 22.9688 177.208 23.1445 176.871 cv
23.313 176.533 23.4009 176.027 23.4009 175.353 cv
23.4009 174.677 23.313 174.17 23.1445 173.833 cv
22.9688 173.496 22.7124 173.326 22.3682 173.326 cv
22.3682 172.8 mo
22.915 172.8 23.3335 173.022 23.6304 173.455 cv
23.9209 173.894 24.0693 174.528 24.0693 175.353 cv
24.0693 176.182 23.9209 176.816 23.6304 177.249 cv
23.3335 177.681 22.915 177.896 22.3682 177.896 cv
21.8145 177.896 21.3896 177.681 21.0991 177.249 cv
20.8091 176.816 20.667 176.182 20.667 175.353 cv
20.667 174.528 20.8091 173.894 21.0991 173.455 cv
21.3896 173.022 21.8145 172.8 22.3682 172.8 cv
f
25.2437 172.888 mo
27.856 172.888 li
27.856 173.448 li
25.8511 173.448 li
25.8511 174.656 li
25.9458 174.623 26.0469 174.596 26.1411 174.582 cv
26.2358 174.568 26.3369 174.556 26.4316 174.556 cv
26.9785 174.556 27.4102 174.71 27.7344 175.008 cv
28.0586 175.312 28.2202 175.716 28.2202 176.229 cv
28.2202 176.763 28.0518 177.175 27.7207 177.465 cv
27.3901 177.754 26.9243 177.896 26.3306 177.896 cv
26.1211 177.896 25.9116 177.876 25.6958 177.849 cv
25.48 177.815 25.2637 177.769 25.0342 177.694 cv
25.0342 177.025 li
25.23 177.134 25.4326 177.214 25.6484 177.269 cv
25.8579 177.323 26.0806 177.343 26.3169 177.343 cv
26.6948 177.343 26.9985 177.249 27.2212 177.046 cv
27.4375 176.843 27.5522 176.573 27.5522 176.229 cv
27.5522 175.892 27.4375 175.621 27.2212 175.419 cv
26.9985 175.217 26.6948 175.115 26.3169 175.115 cv
26.1411 175.115 25.959 175.136 25.7837 175.176 cv
25.6079 175.217 25.4258 175.277 25.2437 175.358 cv
25.2437 172.888 li
f
30.0381 154.346 mo
32.2881 154.346 li
f
30.0381 154.346 mo
32.2881 154.346 li
@
281.138 154.346 mo
278.888 154.346 li
f
281.138 154.346 mo
278.888 154.346 li
@
11.4951 151.727 mo
11.1509 151.727 10.894 151.896 10.7188 152.232 cv
10.5435 152.57 10.4624 153.076 10.4624 153.752 cv
10.4624 154.427 10.5435 154.933 10.7188 155.271 cv
10.894 155.607 11.1509 155.776 11.4951 155.776 cv
11.8394 155.776 12.0957 155.607 12.2715 155.271 cv
12.4399 154.933 12.5278 154.427 12.5278 153.752 cv
12.5278 153.076 12.4399 152.57 12.2715 152.232 cv
12.0957 151.896 11.8394 151.727 11.4951 151.727 cv
11.4951 151.2 mo
12.042 151.2 12.4604 151.423 12.7573 151.855 cv
13.0474 152.294 13.1958 152.929 13.1958 153.752 cv
13.1958 154.582 13.0474 155.217 12.7573 155.648 cv
12.4604 156.081 12.042 156.297 11.4951 156.297 cv
10.9414 156.297 10.5161 156.081 10.2261 155.648 cv
9.93604 155.217 9.79395 154.582 9.79395 153.752 cv
9.79395 152.929 9.93604 152.294 10.2261 151.855 cv
10.5161 151.423 10.9414 151.2 11.4951 151.2 cv
f
14.3638 155.371 mo
15.0591 155.371 li
15.0591 156.208 li
14.3638 156.208 li
14.3638 155.371 li
cp
f
17.9346 151.727 mo
17.5903 151.727 17.334 151.896 17.1582 152.232 cv
16.9829 152.57 16.9019 153.076 16.9019 153.752 cv
16.9019 154.427 16.9829 154.933 17.1582 155.271 cv
17.334 155.607 17.5903 155.776 17.9346 155.776 cv
18.2788 155.776 18.5356 155.607 18.7109 155.271 cv
18.8799 154.933 18.9673 154.427 18.9673 153.752 cv
18.9673 153.076 18.8799 152.57 18.7109 152.232 cv
18.5356 151.896 18.2788 151.727 17.9346 151.727 cv
17.9346 151.2 mo
18.4814 151.2 18.8999 151.423 19.1968 151.855 cv
19.4873 152.294 19.6357 152.929 19.6357 153.752 cv
19.6357 154.582 19.4873 155.217 19.1968 155.648 cv
18.8999 156.081 18.4814 156.297 17.9346 156.297 cv
17.3813 156.297 16.9561 156.081 16.6655 155.648 cv
16.3755 155.217 16.2339 154.582 16.2339 153.752 cv
16.2339 152.929 16.3755 152.294 16.6655 151.855 cv
16.9561 151.423 17.3813 151.2 17.9346 151.2 cv
f
20.918 155.648 mo
22.0049 155.648 li
22.0049 151.896 li
20.8237 152.132 li
20.8237 151.524 li
21.998 151.288 li
22.666 151.288 li
22.666 155.648 li
23.7529 155.648 li
23.7529 156.209 li
20.918 156.209 li
20.918 155.648 li
cp
f
26.5205 151.727 mo
26.1763 151.727 25.9199 151.896 25.7441 152.232 cv
25.5688 152.57 25.4878 153.076 25.4878 153.752 cv
25.4878 154.427 25.5688 154.933 25.7441 155.271 cv
25.9199 155.607 26.1763 155.776 26.5205 155.776 cv
26.8647 155.776 27.1211 155.607 27.2969 155.271 cv
27.4653 154.933 27.5532 154.427 27.5532 153.752 cv
27.5532 153.076 27.4653 152.57 27.2969 152.232 cv
27.1211 151.896 26.8647 151.727 26.5205 151.727 cv
26.5205 151.2 mo
27.0674 151.2 27.4858 151.423 27.7827 151.855 cv
28.0728 152.294 28.2217 152.929 28.2217 153.752 cv
28.2217 154.582 28.0728 155.217 27.7827 155.648 cv
27.4858 156.081 27.0674 156.297 26.5205 156.297 cv
25.9668 156.297 25.5415 156.081 25.2515 155.648 cv
24.9614 155.217 24.8193 154.582 24.8193 153.752 cv
24.8193 152.929 24.9614 152.294 25.2515 151.855 cv
25.5415 151.423 25.9668 151.2 26.5205 151.2 cv
f
30.0381 132.745 mo
32.2881 132.745 li
f
30.0381 132.745 mo
32.2881 132.745 li
@
281.138 132.745 mo
278.888 132.745 li
f
281.138 132.745 mo
278.888 132.745 li
@
11.6357 130.127 mo
11.2915 130.127 11.0347 130.295 10.8594 130.633 cv
10.6841 130.971 10.603 131.477 10.603 132.152 cv
10.603 132.826 10.6841 133.333 10.8594 133.67 cv
11.0347 134.008 11.2915 134.177 11.6357 134.177 cv
11.98 134.177 12.2363 134.008 12.4121 133.67 cv
12.5806 133.333 12.6685 132.826 12.6685 132.152 cv
12.6685 131.477 12.5806 130.971 12.4121 130.633 cv
12.2363 130.295 11.98 130.127 11.6357 130.127 cv
11.6357 129.601 mo
12.1826 129.601 12.6011 129.823 12.8979 130.256 cv
13.188 130.693 13.3364 131.328 13.3364 132.152 cv
13.3364 132.981 13.188 133.616 12.8979 134.048 cv
12.6011 134.48 12.1826 134.696 11.6357 134.696 cv
11.082 134.696 10.6567 134.48 10.3667 134.048 cv
10.0767 133.616 9.93457 132.981 9.93457 132.152 cv
9.93457 131.328 10.0767 130.693 10.3667 130.256 cv
10.6567 129.823 11.082 129.601 11.6357 129.601 cv
f
14.5044 133.772 mo
15.1997 133.772 li
15.1997 134.608 li
14.5044 134.608 li
14.5044 133.772 li
cp
f
18.0752 130.127 mo
17.731 130.127 17.4746 130.295 17.2988 130.633 cv
17.1235 130.971 17.0425 131.477 17.0425 132.152 cv
17.0425 132.826 17.1235 133.333 17.2988 133.67 cv
17.4746 134.008 17.731 134.177 18.0752 134.177 cv
18.4194 134.177 18.6763 134.008 18.8516 133.67 cv
19.0205 133.333 19.1079 132.826 19.1079 132.152 cv
19.1079 131.477 19.0205 130.971 18.8516 130.633 cv
18.6763 130.295 18.4194 130.127 18.0752 130.127 cv
18.0752 129.601 mo
18.6221 129.601 19.0405 129.823 19.3374 130.256 cv
19.6279 130.693 19.7764 131.328 19.7764 132.152 cv
19.7764 132.981 19.6279 133.616 19.3374 134.048 cv
19.0405 134.48 18.6221 134.696 18.0752 134.696 cv
17.522 134.696 17.0967 134.48 16.8062 134.048 cv
16.5161 133.616 16.3745 132.981 16.3745 132.152 cv
16.3745 131.328 16.5161 130.693 16.8062 130.256 cv
17.0967 129.823 17.522 129.601 18.0752 129.601 cv
f
21.0586 134.048 mo
22.1455 134.048 li
22.1455 130.295 li
20.9644 130.531 li
20.9644 129.925 li
22.1387 129.688 li
22.8066 129.688 li
22.8066 134.048 li
23.8936 134.048 li
23.8936 134.608 li
21.0586 134.608 li
21.0586 134.048 li
cp
f
25.2437 129.688 mo
27.856 129.688 li
27.856 130.248 li
25.8511 130.248 li
25.8511 131.457 li
25.9458 131.423 26.0469 131.396 26.1411 131.383 cv
26.2358 131.368 26.3369 131.355 26.4316 131.355 cv
26.9785 131.355 27.4102 131.51 27.7344 131.808 cv
28.0586 132.111 28.2202 132.516 28.2202 133.029 cv
28.2202 133.563 28.0518 133.974 27.7207 134.265 cv
27.3901 134.555 26.9243 134.696 26.3306 134.696 cv
26.1211 134.696 25.9116 134.676 25.6958 134.649 cv
25.48 134.616 25.2637 134.568 25.0342 134.494 cv
25.0342 133.825 li
25.23 133.934 25.4326 134.015 25.6484 134.068 cv
25.8579 134.123 26.0806 134.144 26.3169 134.144 cv
26.6948 134.144 26.9985 134.048 27.2212 133.847 cv
27.4375 133.644 27.5522 133.374 27.5522 133.029 cv
27.5522 132.692 27.4375 132.422 27.2212 132.219 cv
26.9985 132.017 26.6948 131.916 26.3169 131.916 cv
26.1411 131.916 25.959 131.936 25.7837 131.976 cv
25.6079 132.017 25.4258 132.077 25.2437 132.159 cv
25.2437 129.688 li
f
30.0381 111.146 mo
32.2881 111.146 li
f
30.0381 111.146 mo
32.2881 111.146 li
@
281.138 111.146 mo
278.888 111.146 li
f
281.138 111.146 mo
278.888 111.146 li
@
11.4951 108.527 mo
11.1509 108.527 10.894 108.695 10.7188 109.032 cv
10.5435 109.371 10.4624 109.876 10.4624 110.552 cv
10.4624 111.227 10.5435 111.732 10.7188 112.07 cv
10.894 112.407 11.1509 112.576 11.4951 112.576 cv
11.8394 112.576 12.0957 112.407 12.2715 112.07 cv
12.4399 111.732 12.5278 111.227 12.5278 110.552 cv
12.5278 109.876 12.4399 109.371 12.2715 109.032 cv
12.0957 108.695 11.8394 108.527 11.4951 108.527 cv
11.4951 108 mo
12.042 108 12.4604 108.224 12.7573 108.655 cv
13.0474 109.094 13.1958 109.729 13.1958 110.552 cv
13.1958 111.382 13.0474 112.017 12.7573 112.448 cv
12.4604 112.88 12.042 113.097 11.4951 113.097 cv
10.9414 113.097 10.5161 112.88 10.2261 112.448 cv
9.93604 112.017 9.79395 111.382 9.79395 110.552 cv
9.79395 109.729 9.93604 109.094 10.2261 108.655 cv
10.5161 108.224 10.9414 108 11.4951 108 cv
f
14.3638 112.172 mo
15.0591 112.172 li
15.0591 113.009 li
14.3638 113.009 li
14.3638 112.172 li
cp
f
17.9346 108.527 mo
17.5903 108.527 17.334 108.695 17.1582 109.032 cv
16.9829 109.371 16.9019 109.876 16.9019 110.552 cv
16.9019 111.227 16.9829 111.732 17.1582 112.07 cv
17.334 112.407 17.5903 112.576 17.9346 112.576 cv
18.2788 112.576 18.5356 112.407 18.7109 112.07 cv
18.8799 111.732 18.9673 111.227 18.9673 110.552 cv
18.9673 109.876 18.8799 109.371 18.7109 109.032 cv
18.5356 108.695 18.2788 108.527 17.9346 108.527 cv
17.9346 108 mo
18.4814 108 18.8999 108.224 19.1968 108.655 cv
19.4873 109.094 19.6357 109.729 19.6357 110.552 cv
19.6357 111.382 19.4873 112.017 19.1968 112.448 cv
18.8999 112.88 18.4814 113.097 17.9346 113.097 cv
17.3813 113.097 16.9561 112.88 16.6655 112.448 cv
16.3755 112.017 16.2339 111.382 16.2339 110.552 cv
16.2339 109.729 16.3755 109.094 16.6655 108.655 cv
16.9561 108.224 17.3813 108 17.9346 108 cv
f
21.377 112.448 mo
23.6987 112.448 li
23.6987 113.009 li
20.5737 113.009 li
20.5737 112.448 li
20.8232 112.192 21.1675 111.841 21.6064 111.396 cv
22.0386 110.957 22.3149 110.673 22.4302 110.545 cv
22.646 110.309 22.7944 110.106 22.8755 109.938 cv
22.9565 109.775 23.0039 109.606 23.0039 109.444 cv
23.0039 109.188 22.9092 108.973 22.7271 108.811 cv
22.5444 108.648 22.3086 108.561 22.0112 108.561 cv
21.8022 108.561 21.5796 108.601 21.3501 108.669 cv
21.1206 108.743 20.8706 108.851 20.6074 108.999 cv
20.6074 108.324 li
20.8774 108.216 21.127 108.136 21.3564 108.081 cv
21.5864 108.027 21.8022 108 21.998 108 cv
22.5044 108 22.9092 108.129 23.2129 108.385 cv
23.5166 108.641 23.6719 108.979 23.6719 109.404 cv
23.6719 109.606 23.6313 109.803 23.5571 109.978 cv
23.4829 110.16 23.3481 110.376 23.1455 110.619 cv
23.0913 110.687 22.916 110.869 22.6191 111.172 cv
22.3218 111.476 21.9102 111.901 21.377 112.448 cv
f
26.5205 108.527 mo
26.1763 108.527 25.9199 108.695 25.7441 109.032 cv
25.5688 109.371 25.4878 109.876 25.4878 110.552 cv
25.4878 111.227 25.5688 111.732 25.7441 112.07 cv
25.9199 112.407 26.1763 112.576 26.5205 112.576 cv
26.8647 112.576 27.1211 112.407 27.2969 112.07 cv
27.4653 111.732 27.5532 111.227 27.5532 110.552 cv
27.5532 109.876 27.4653 109.371 27.2969 109.032 cv
27.1211 108.695 26.8647 108.527 26.5205 108.527 cv
26.5205 108 mo
27.0674 108 27.4858 108.224 27.7827 108.655 cv
28.0728 109.094 28.2217 109.729 28.2217 110.552 cv
28.2217 111.382 28.0728 112.017 27.7827 112.448 cv
27.4858 112.88 27.0674 113.097 26.5205 113.097 cv
25.9668 113.097 25.5415 112.88 25.2515 112.448 cv
24.9614 112.017 24.8193 111.382 24.8193 110.552 cv
24.8193 109.729 24.9614 109.094 25.2515 108.655 cv
25.5415 108.224 25.9668 108 26.5205 108 cv
f
30.0381 89.5449 mo
32.2881 89.5449 li
f
30.0381 89.5449 mo
32.2881 89.5449 li
@
281.138 89.5449 mo
278.888 89.5449 li
f
281.138 89.5449 mo
278.888 89.5449 li
@
11.6357 86.9268 mo
11.2915 86.9268 11.0347 87.0957 10.8594 87.4326 cv
10.6841 87.7705 10.603 88.2764 10.603 88.9521 cv
10.603 89.627 10.6841 90.1328 10.8594 90.4707 cv
11.0347 90.8076 11.2915 90.9766 11.6357 90.9766 cv
11.98 90.9766 12.2363 90.8076 12.4121 90.4707 cv
12.5806 90.1328 12.6685 89.627 12.6685 88.9521 cv
12.6685 88.2764 12.5806 87.7705 12.4121 87.4326 cv
12.2363 87.0957 11.98 86.9268 11.6357 86.9268 cv
11.6357 86.4004 mo
12.1826 86.4004 12.6011 86.623 12.8979 87.0547 cv
13.188 87.4941 13.3364 88.1279 13.3364 88.9521 cv
13.3364 89.7822 13.188 90.416 12.8979 90.8486 cv
12.6011 91.2803 12.1826 91.4961 11.6357 91.4961 cv
11.082 91.4961 10.6567 91.2803 10.3667 90.8486 cv
10.0767 90.416 9.93457 89.7822 9.93457 88.9521 cv
9.93457 88.1279 10.0767 87.4941 10.3667 87.0547 cv
10.6567 86.623 11.082 86.4004 11.6357 86.4004 cv
f
14.5044 90.5723 mo
15.1997 90.5723 li
15.1997 91.4092 li
14.5044 91.4092 li
14.5044 90.5723 li
cp
f
18.0752 86.9268 mo
17.731 86.9268 17.4746 87.0957 17.2988 87.4326 cv
17.1235 87.7705 17.0425 88.2764 17.0425 88.9521 cv
17.0425 89.627 17.1235 90.1328 17.2988 90.4707 cv
17.4746 90.8076 17.731 90.9766 18.0752 90.9766 cv
18.4194 90.9766 18.6763 90.8076 18.8516 90.4707 cv
19.0205 90.1328 19.1079 89.627 19.1079 88.9521 cv
19.1079 88.2764 19.0205 87.7705 18.8516 87.4326 cv
18.6763 87.0957 18.4194 86.9268 18.0752 86.9268 cv
18.0752 86.4004 mo
18.6221 86.4004 19.0405 86.623 19.3374 87.0547 cv
19.6279 87.4941 19.7764 88.1279 19.7764 88.9521 cv
19.7764 89.7822 19.6279 90.416 19.3374 90.8486 cv
19.0405 91.2803 18.6221 91.4961 18.0752 91.4961 cv
17.522 91.4961 17.0967 91.2803 16.8062 90.8486 cv
16.5161 90.416 16.3745 89.7822 16.3745 88.9521 cv
16.3745 88.1279 16.5161 87.4941 16.8062 87.0547 cv
17.0967 86.623 17.522 86.4004 18.0752 86.4004 cv
f
21.5176 90.8486 mo
23.8394 90.8486 li
23.8394 91.4092 li
20.7144 91.4092 li
20.7144 90.8486 li
20.9639 90.5918 21.3081 90.2412 21.7471 89.7959 cv
22.1792 89.3564 22.4556 89.0732 22.5708 88.9453 cv
22.7866 88.709 22.9351 88.5068 23.0161 88.3379 cv
23.0972 88.1758 23.1445 88.0068 23.1445 87.8447 cv
23.1445 87.5879 23.0498 87.3721 22.8677 87.21 cv
22.6851 87.0479 22.4492 86.9609 22.1519 86.9609 cv
21.9429 86.9609 21.7202 87.001 21.4907 87.0684 cv
21.2612 87.1426 21.0112 87.251 20.748 87.3994 cv
20.748 86.7246 li
21.0181 86.6162 21.2676 86.5352 21.4971 86.4814 cv
21.7271 86.4277 21.9429 86.4004 22.1387 86.4004 cv
22.645 86.4004 23.0498 86.5283 23.3535 86.7852 cv
23.6572 87.042 23.8125 87.3789 23.8125 87.8047 cv
23.8125 88.0068 23.772 88.2021 23.6978 88.3779 cv
23.6235 88.5605 23.4888 88.7764 23.2861 89.0195 cv
23.2319 89.0869 23.0566 89.2695 22.7598 89.5732 cv
22.4624 89.877 22.0508 90.3018 21.5176 90.8486 cv
f
25.2437 86.4883 mo
27.856 86.4883 li
27.856 87.0479 li
25.8511 87.0479 li
25.8511 88.2568 li
25.9458 88.2227 26.0469 88.1953 26.1411 88.1816 cv
26.2358 88.1689 26.3369 88.1553 26.4316 88.1553 cv
26.9785 88.1553 27.4102 88.3105 27.7344 88.6074 cv
28.0586 88.9111 28.2202 89.3164 28.2202 89.8291 cv
28.2202 90.3623 28.0518 90.7744 27.7207 91.0645 cv
27.3901 91.3545 26.9243 91.4961 26.3306 91.4961 cv
26.1211 91.4961 25.9116 91.4766 25.6958 91.4492 cv
25.48 91.415 25.2637 91.3682 25.0342 91.2939 cv
25.0342 90.626 li
25.23 90.7334 25.4326 90.8145 25.6484 90.8682 cv
25.8579 90.9229 26.0806 90.9424 26.3169 90.9424 cv
26.6948 90.9424 26.9985 90.8486 27.2212 90.6455 cv
27.4375 90.4434 27.5522 90.1729 27.5522 89.8291 cv
27.5522 89.4912 27.4375 89.2217 27.2212 89.0195 cv
26.9985 88.8164 26.6948 88.7158 26.3169 88.7158 cv
26.1411 88.7158 25.959 88.7354 25.7837 88.7764 cv
25.6079 88.8164 25.4258 88.877 25.2437 88.958 cv
25.2437 86.4883 li
f
30.0381 67.9453 mo
32.2881 67.9453 li
f
30.0381 67.9453 mo
32.2881 67.9453 li
@
281.138 67.9453 mo
278.888 67.9453 li
f
281.138 67.9453 mo
278.888 67.9453 li
@
11.4951 65.3271 mo
11.1509 65.3271 10.894 65.4951 10.7188 65.833 cv
10.5435 66.1709 10.4624 66.6768 10.4624 67.3516 cv
10.4624 68.0264 10.5435 68.5332 10.7188 68.8701 cv
10.894 69.208 11.1509 69.377 11.4951 69.377 cv
11.8394 69.377 12.0957 69.208 12.2715 68.8701 cv
12.4399 68.5332 12.5278 68.0264 12.5278 67.3516 cv
12.5278 66.6768 12.4399 66.1709 12.2715 65.833 cv
12.0957 65.4951 11.8394 65.3271 11.4951 65.3271 cv
11.4951 64.7998 mo
12.042 64.7998 12.4604 65.0234 12.7573 65.4551 cv
13.0474 65.8936 13.1958 66.5283 13.1958 67.3516 cv
13.1958 68.1816 13.0474 68.8164 12.7573 69.249 cv
12.4604 69.6807 12.042 69.8965 11.4951 69.8965 cv
10.9414 69.8965 10.5161 69.6807 10.2261 69.249 cv
9.93604 68.8164 9.79395 68.1816 9.79395 67.3516 cv
9.79395 66.5283 9.93604 65.8936 10.2261 65.4551 cv
10.5161 65.0234 10.9414 64.7998 11.4951 64.7998 cv
f
14.3638 68.9717 mo
15.0591 68.9717 li
15.0591 69.8086 li
14.3638 69.8086 li
14.3638 68.9717 li
cp
f
17.9346 65.3271 mo
17.5903 65.3271 17.334 65.4951 17.1582 65.833 cv
16.9829 66.1709 16.9019 66.6768 16.9019 67.3516 cv
16.9019 68.0264 16.9829 68.5332 17.1582 68.8701 cv
17.334 69.208 17.5903 69.377 17.9346 69.377 cv
18.2788 69.377 18.5356 69.208 18.7109 68.8701 cv
18.8799 68.5332 18.9673 68.0264 18.9673 67.3516 cv
18.9673 66.6768 18.8799 66.1709 18.7109 65.833 cv
18.5356 65.4951 18.2788 65.3271 17.9346 65.3271 cv
17.9346 64.7998 mo
18.4814 64.7998 18.8999 65.0234 19.1968 65.4551 cv
19.4873 65.8936 19.6357 66.5283 19.6357 67.3516 cv
19.6357 68.1816 19.4873 68.8164 19.1968 69.249 cv
18.8999 69.6807 18.4814 69.8965 17.9346 69.8965 cv
17.3813 69.8965 16.9561 69.6807 16.6655 69.249 cv
16.3755 68.8164 16.2339 68.1816 16.2339 67.3516 cv
16.2339 66.5283 16.3755 65.8936 16.6655 65.4551 cv
16.9561 65.0234 17.3813 64.7998 17.9346 64.7998 cv
f
22.8218 67.1563 mo
23.1387 67.2236 23.3887 67.3652 23.564 67.5811 cv
23.7397 67.7969 23.834 68.0674 23.834 68.3779 cv
23.834 68.8643 23.6655 69.2422 23.3345 69.5049 cv
22.9971 69.7686 22.5249 69.8965 21.9106 69.8965 cv
21.7012 69.8965 21.4854 69.876 21.269 69.8359 cv
21.0532 69.8018 20.8237 69.7412 20.5942 69.6602 cv
20.5942 69.0186 li
20.7764 69.127 20.979 69.208 21.2017 69.2617 cv
21.4175 69.3164 21.647 69.3428 21.8901 69.3428 cv
22.3086 69.3428 22.626 69.2617 22.8418 69.0996 cv
23.0581 68.9385 23.1729 68.6953 23.1729 68.3779 cv
23.1729 68.0947 23.0713 67.8652 22.8687 67.7031 cv
22.6665 67.541 22.3828 67.4531 22.0186 67.4531 cv
21.4448 67.4531 li
21.4448 66.9063 li
22.0454 66.9063 li
22.3696 66.9063 22.6191 66.8457 22.7944 66.7109 cv
22.9702 66.582 23.0581 66.3936 23.0581 66.1436 cv
23.0581 65.8936 22.9634 65.6982 22.7881 65.5635 cv
22.6055 65.4277 22.3491 65.3604 22.0186 65.3604 cv
21.8359 65.3604 21.6406 65.3809 21.4312 65.4209 cv
21.2217 65.4619 20.9922 65.5225 20.7427 65.6035 cv
20.7427 65.0098 li
20.9922 64.9424 21.2285 64.8877 21.4512 64.8545 cv
21.6675 64.8203 21.8765 64.7998 22.0791 64.7998 cv
22.5786 64.7998 22.9771 64.915 23.2739 65.1445 cv
23.5708 65.374 23.7192 65.6846 23.7192 66.0762 cv
23.7192 66.3457 23.6382 66.5752 23.4829 66.7646 cv
23.3281 66.9531 23.105 67.0889 22.8218 67.1563 cv
f
26.5205 65.3271 mo
26.1763 65.3271 25.9199 65.4951 25.7441 65.833 cv
25.5688 66.1709 25.4878 66.6768 25.4878 67.3516 cv
25.4878 68.0264 25.5688 68.5332 25.7441 68.8701 cv
25.9199 69.208 26.1763 69.377 26.5205 69.377 cv
26.8647 69.377 27.1211 69.208 27.2969 68.8701 cv
27.4653 68.5332 27.5532 68.0264 27.5532 67.3516 cv
27.5532 66.6768 27.4653 66.1709 27.2969 65.833 cv
27.1211 65.4951 26.8647 65.3271 26.5205 65.3271 cv
26.5205 64.7998 mo
27.0674 64.7998 27.4858 65.0234 27.7827 65.4551 cv
28.0728 65.8936 28.2217 66.5283 28.2217 67.3516 cv
28.2217 68.1816 28.0728 68.8164 27.7827 69.249 cv
27.4858 69.6807 27.0674 69.8965 26.5205 69.8965 cv
25.9668 69.8965 25.5415 69.6807 25.2515 69.249 cv
24.9614 68.8164 24.8193 68.1816 24.8193 67.3516 cv
24.8193 66.5283 24.9614 65.8936 25.2515 65.4551 cv
25.5415 65.0234 25.9668 64.7998 26.5205 64.7998 cv
f
30.0381 46.3457 mo
32.2881 46.3457 li
f
30.0381 46.3457 mo
32.2881 46.3457 li
@
281.138 46.3457 mo
278.888 46.3457 li
f
281.138 46.3457 mo
278.888 46.3457 li
@
11.6357 43.7266 mo
11.2915 43.7266 11.0347 43.8955 10.8594 44.2334 cv
10.6841 44.5703 10.603 45.0771 10.603 45.752 cv
10.603 46.4268 10.6841 46.9326 10.8594 47.2705 cv
11.0347 47.6084 11.2915 47.7764 11.6357 47.7764 cv
11.98 47.7764 12.2363 47.6084 12.4121 47.2705 cv
12.5806 46.9326 12.6685 46.4268 12.6685 45.752 cv
12.6685 45.0771 12.5806 44.5703 12.4121 44.2334 cv
12.2363 43.8955 11.98 43.7266 11.6357 43.7266 cv
11.6357 43.2002 mo
12.1826 43.2002 12.6011 43.4229 12.8979 43.8555 cv
13.188 44.2939 13.3364 44.9287 13.3364 45.752 cv
13.3364 46.582 13.188 47.2168 12.8979 47.6484 cv
12.6011 48.0811 12.1826 48.2969 11.6357 48.2969 cv
11.082 48.2969 10.6567 48.0811 10.3667 47.6484 cv
10.0767 47.2168 9.93457 46.582 9.93457 45.752 cv
9.93457 44.9287 10.0767 44.2939 10.3667 43.8555 cv
10.6567 43.4229 11.082 43.2002 11.6357 43.2002 cv
f
14.5044 47.3721 mo
15.1997 47.3721 li
15.1997 48.209 li
14.5044 48.209 li
14.5044 47.3721 li
cp
f
18.0752 43.7266 mo
17.731 43.7266 17.4746 43.8955 17.2988 44.2334 cv
17.1235 44.5703 17.0425 45.0771 17.0425 45.752 cv
17.0425 46.4268 17.1235 46.9326 17.2988 47.2705 cv
17.4746 47.6084 17.731 47.7764 18.0752 47.7764 cv
18.4194 47.7764 18.6763 47.6084 18.8516 47.2705 cv
19.0205 46.9326 19.1079 46.4268 19.1079 45.752 cv
19.1079 45.0771 19.0205 44.5703 18.8516 44.2334 cv
18.6763 43.8955 18.4194 43.7266 18.0752 43.7266 cv
18.0752 43.2002 mo
18.6221 43.2002 19.0405 43.4229 19.3374 43.8555 cv
19.6279 44.2939 19.7764 44.9287 19.7764 45.752 cv
19.7764 46.582 19.6279 47.2168 19.3374 47.6484 cv
19.0405 48.0811 18.6221 48.2969 18.0752 48.2969 cv
17.522 48.2969 17.0967 48.0811 16.8062 47.6484 cv
16.5161 47.2168 16.3745 46.582 16.3745 45.752 cv
16.3745 44.9287 16.5161 44.2939 16.8062 43.8555 cv
17.0967 43.4229 17.522 43.2002 18.0752 43.2002 cv
f
22.9624 45.5557 mo
23.2793 45.624 23.5293 45.7656 23.7046 45.9814 cv
23.8804 46.1973 23.9746 46.4678 23.9746 46.7783 cv
23.9746 47.2637 23.8062 47.6416 23.4751 47.9053 cv
23.1377 48.168 22.6655 48.2969 22.0513 48.2969 cv
21.8418 48.2969 21.626 48.2764 21.4097 48.2354 cv
21.1938 48.2021 20.9644 48.1416 20.7349 48.0605 cv
20.7349 47.4189 li
20.917 47.5273 21.1196 47.6084 21.3423 47.6621 cv
21.5581 47.7158 21.7876 47.7432 22.0308 47.7432 cv
22.4492 47.7432 22.7666 47.6621 22.9824 47.5 cv
23.1987 47.3379 23.3135 47.0947 23.3135 46.7783 cv
23.3135 46.4941 23.2119 46.2646 23.0093 46.1025 cv
22.8071 45.9404 22.5234 45.8535 22.1592 45.8535 cv
21.5854 45.8535 li
21.5854 45.3066 li
22.186 45.3066 li
22.5103 45.3066 22.7598 45.2451 22.9351 45.1104 cv
23.1108 44.9824 23.1987 44.793 23.1987 44.5439 cv
23.1987 44.2939 23.104 44.0977 22.9287 43.9629 cv
22.7461 43.8281 22.4897 43.7607 22.1592 43.7607 cv
21.9766 43.7607 21.7813 43.7813 21.5718 43.8213 cv
21.3623 43.8623 21.1328 43.9229 20.8833 44.0039 cv
20.8833 43.4092 li
21.1328 43.3418 21.3691 43.2881 21.5918 43.2539 cv
21.8081 43.2207 22.0171 43.2002 22.2197 43.2002 cv
22.7192 43.2002 23.1177 43.3154 23.4146 43.5449 cv
23.7114 43.7744 23.8599 44.085 23.8599 44.4756 cv
23.8599 44.7461 23.7788 44.9756 23.6235 45.165 cv
23.4688 45.3535 23.2456 45.4883 22.9624 45.5557 cv
f
25.2437 43.2881 mo
27.856 43.2881 li
27.856 43.8486 li
25.8511 43.8486 li
25.8511 45.0566 li
25.9458 45.0225 26.0469 44.9961 26.1411 44.9824 cv
26.2358 44.9688 26.3369 44.9551 26.4316 44.9551 cv
26.9785 44.9551 27.4102 45.1104 27.7344 45.4072 cv
28.0586 45.7109 28.2202 46.1162 28.2202 46.6289 cv
28.2202 47.1621 28.0518 47.5742 27.7207 47.8643 cv
27.3901 48.1543 26.9243 48.2969 26.3306 48.2969 cv
26.1211 48.2969 25.9116 48.2764 25.6958 48.249 cv
25.48 48.2158 25.2637 48.168 25.0342 48.0938 cv
25.0342 47.4258 li
25.23 47.5342 25.4326 47.6143 25.6484 47.6689 cv
25.8579 47.7227 26.0806 47.7432 26.3169 47.7432 cv
26.6948 47.7432 26.9985 47.6484 27.2212 47.4463 cv
27.4375 47.2432 27.5522 46.9736 27.5522 46.6289 cv
27.5522 46.292 27.4375 46.0215 27.2212 45.8193 cv
26.9985 45.6172 26.6948 45.5156 26.3169 45.5156 cv
26.1411 45.5156 25.959 45.5361 25.7837 45.5762 cv
25.6079 45.6172 25.4258 45.6777 25.2437 45.7588 cv
25.2437 43.2881 li
f
30.0381 24.7451 mo
32.2881 24.7451 li
f
30.0381 24.7451 mo
32.2881 24.7451 li
@
281.138 24.7451 mo
278.888 24.7451 li
f
281.138 24.7451 mo
278.888 24.7451 li
@
11.4951 22.127 mo
11.1509 22.127 10.894 22.2949 10.7188 22.6328 cv
10.5435 22.9707 10.4624 23.4766 10.4624 24.1514 cv
10.4624 24.8262 10.5435 25.333 10.7188 25.6699 cv
10.894 26.0078 11.1509 26.1768 11.4951 26.1768 cv
11.8394 26.1768 12.0957 26.0078 12.2715 25.6699 cv
12.4399 25.333 12.5278 24.8262 12.5278 24.1514 cv
12.5278 23.4766 12.4399 22.9707 12.2715 22.6328 cv
12.0957 22.2949 11.8394 22.127 11.4951 22.127 cv
11.4951 21.6006 mo
12.042 21.6006 12.4604 21.8232 12.7573 22.2549 cv
13.0474 22.6934 13.1958 23.3281 13.1958 24.1514 cv
13.1958 24.9814 13.0474 25.6162 12.7573 26.0479 cv
12.4604 26.4805 12.042 26.6963 11.4951 26.6963 cv
10.9414 26.6963 10.5161 26.4805 10.2261 26.0479 cv
9.93604 25.6162 9.79395 24.9814 9.79395 24.1514 cv
9.79395 23.3281 9.93604 22.6934 10.2261 22.2549 cv
10.5161 21.8232 10.9414 21.6006 11.4951 21.6006 cv
f
14.3638 25.7715 mo
15.0591 25.7715 li
15.0591 26.6084 li
14.3638 26.6084 li
14.3638 25.7715 li
cp
f
17.9346 22.127 mo
17.5903 22.127 17.334 22.2949 17.1582 22.6328 cv
16.9829 22.9707 16.9019 23.4766 16.9019 24.1514 cv
16.9019 24.8262 16.9829 25.333 17.1582 25.6699 cv
17.334 26.0078 17.5903 26.1768 17.9346 26.1768 cv
18.2788 26.1768 18.5356 26.0078 18.7109 25.6699 cv
18.8799 25.333 18.9673 24.8262 18.9673 24.1514 cv
18.9673 23.4766 18.8799 22.9707 18.7109 22.6328 cv
18.5356 22.2949 18.2788 22.127 17.9346 22.127 cv
17.9346 21.6006 mo
18.4814 21.6006 18.8999 21.8232 19.1968 22.2549 cv
19.4873 22.6934 19.6357 23.3281 19.6357 24.1514 cv
19.6357 24.9814 19.4873 25.6162 19.1968 26.0479 cv
18.8999 26.4805 18.4814 26.6963 17.9346 26.6963 cv
17.3813 26.6963 16.9561 26.4805 16.6655 26.0479 cv
16.3755 25.6162 16.2339 24.9814 16.2339 24.1514 cv
16.2339 23.3281 16.3755 22.6934 16.6655 22.2549 cv
16.9561 21.8232 17.3813 21.6006 17.9346 21.6006 cv
f
22.6323 22.2686 mo
20.9517 24.8945 li
22.6323 24.8945 li
22.6323 22.2686 li
22.457 21.6875 mo
23.2939 21.6875 li
23.2939 24.8945 li
23.9961 24.8945 li
23.9961 25.4473 li
23.2939 25.4473 li
23.2939 26.6084 li
22.6323 26.6084 li
22.6323 25.4473 li
20.4116 25.4473 li
20.4116 24.8066 li
22.457 21.6875 li
cp
f
26.5205 22.127 mo
26.1763 22.127 25.9199 22.2949 25.7441 22.6328 cv
25.5688 22.9707 25.4878 23.4766 25.4878 24.1514 cv
25.4878 24.8262 25.5688 25.333 25.7441 25.6699 cv
25.9199 26.0078 26.1763 26.1768 26.5205 26.1768 cv
26.8647 26.1768 27.1211 26.0078 27.2969 25.6699 cv
27.4653 25.333 27.5532 24.8262 27.5532 24.1514 cv
27.5532 23.4766 27.4653 22.9707 27.2969 22.6328 cv
27.1211 22.2949 26.8647 22.127 26.5205 22.127 cv
26.5205 21.6006 mo
27.0674 21.6006 27.4858 21.8232 27.7827 22.2549 cv
28.0728 22.6934 28.2217 23.3281 28.2217 24.1514 cv
28.2217 24.9814 28.0728 25.6162 27.7827 26.0479 cv
27.4858 26.4805 27.0674 26.6963 26.5205 26.6963 cv
25.9668 26.6963 25.5415 26.4805 25.2515 26.0479 cv
24.9614 25.6162 24.8193 24.9814 24.8193 24.1514 cv
24.8193 23.3281 24.9614 22.6934 25.2515 22.2549 cv
25.5415 21.8232 25.9668 21.6006 26.5205 21.6006 cv
f
30.0381 3.14551 mo
32.2881 3.14551 li
f
30.0381 3.14551 mo
32.2881 3.14551 li
@
281.138 3.14551 mo
278.888 3.14551 li
f
281.138 3.14551 mo
278.888 3.14551 li
@
11.6357 .526367 mo
11.2915 .526367 11.0347 .695313 10.8594 1.0332 cv
10.6841 1.37012 10.603 1.87695 10.603 2.55176 cv
10.603 3.22656 10.6841 3.7334 10.8594 4.07031 cv
11.0347 4.4082 11.2915 4.57715 11.6357 4.57715 cv
11.98 4.57715 12.2363 4.4082 12.4121 4.07031 cv
12.5806 3.7334 12.6685 3.22656 12.6685 2.55176 cv
12.6685 1.87695 12.5806 1.37012 12.4121 1.0332 cv
12.2363 .695313 11.98 .526367 11.6357 .526367 cv
11.6357 0 mo
12.1826 0 12.6011 .222656 12.8979 .655273 cv
13.188 1.09375 13.3364 1.72852 13.3364 2.55176 cv
13.3364 3.38184 13.188 4.0166 12.8979 4.44824 cv
12.6011 4.88086 12.1826 5.09668 11.6357 5.09668 cv
11.082 5.09668 10.6567 4.88086 10.3667 4.44824 cv
10.0767 4.0166 9.93457 3.38184 9.93457 2.55176 cv
9.93457 1.72852 10.0767 1.09375 10.3667 .655273 cv
10.6567 .222656 11.082 0 11.6357 0 cv
f
14.5044 4.17188 mo
15.1997 4.17188 li
15.1997 5.00879 li
14.5044 5.00879 li
14.5044 4.17188 li
cp
f
18.0752 .526367 mo
17.731 .526367 17.4746 .695313 17.2988 1.0332 cv
17.1235 1.37012 17.0425 1.87695 17.0425 2.55176 cv
17.0425 3.22656 17.1235 3.7334 17.2988 4.07031 cv
17.4746 4.4082 17.731 4.57715 18.0752 4.57715 cv
18.4194 4.57715 18.6763 4.4082 18.8516 4.07031 cv
19.0205 3.7334 19.1079 3.22656 19.1079 2.55176 cv
19.1079 1.87695 19.0205 1.37012 18.8516 1.0332 cv
18.6763 .695313 18.4194 .526367 18.0752 .526367 cv
18.0752 0 mo
18.6221 0 19.0405 .222656 19.3374 .655273 cv
19.6279 1.09375 19.7764 1.72852 19.7764 2.55176 cv
19.7764 3.38184 19.6279 4.0166 19.3374 4.44824 cv
19.0405 4.88086 18.6221 5.09668 18.0752 5.09668 cv
17.522 5.09668 17.0967 4.88086 16.8062 4.44824 cv
16.5161 4.0166 16.3745 3.38184 16.3745 2.55176 cv
16.3745 1.72852 16.5161 1.09375 16.8062 .655273 cv
17.0967 .222656 17.522 0 18.0752 0 cv
f
22.7729 .667969 mo
21.0923 3.29395 li
22.7729 3.29395 li
22.7729 .667969 li
22.5977 .0878906 mo
23.4346 .0878906 li
23.4346 3.29395 li
24.1367 3.29395 li
24.1367 3.84766 li
23.4346 3.84766 li
23.4346 5.00879 li
22.7729 5.00879 li
22.7729 3.84766 li
20.5522 3.84766 li
20.5522 3.20605 li
22.5977 .0878906 li
cp
f
25.2437 .0878906 mo
27.856 .0878906 li
27.856 .648438 li
25.8511 .648438 li
25.8511 1.85645 li
25.9458 1.82324 26.0469 1.7959 26.1411 1.78223 cv
26.2358 1.76855 26.3369 1.75488 26.4316 1.75488 cv
26.9785 1.75488 27.4102 1.91016 27.7344 2.20801 cv
28.0586 2.51172 28.2202 2.91602 28.2202 3.42969 cv
28.2202 3.96289 28.0518 4.37402 27.7207 4.66406 cv
27.3901 4.95508 26.9243 5.09668 26.3306 5.09668 cv
26.1211 5.09668 25.9116 5.07617 25.6958 5.04883 cv
25.48 5.01563 25.2637 4.96777 25.0342 4.89355 cv
25.0342 4.22559 li
25.23 4.33398 25.4326 4.41504 25.6484 4.46875 cv
25.8579 4.52246 26.0806 4.54297 26.3169 4.54297 cv
26.6948 4.54297 26.9985 4.44824 27.2212 4.24609 cv
27.4375 4.04395 27.5522 3.77344 27.5522 3.42969 cv
27.5522 3.0918 27.4375 2.82129 27.2212 2.61914 cv
26.9985 2.41699 26.6948 2.31543 26.3169 2.31543 cv
26.1411 2.31543 25.959 2.33594 25.7837 2.37598 cv
25.6079 2.41699 25.4258 2.47754 25.2437 2.55859 cv
25.2437 .0878906 li
f
.371094 110.533 mo
1.01904 110.533 li
.897461 110.79 .810059 111.025 .749023 111.248 cv
.695313 111.478 .661133 111.693 .661133 111.896 cv
.661133 112.261 .73584 112.545 .870605 112.74 cv
1.01221 112.936 1.21484 113.03 1.47119 113.03 cv
1.6875 113.03 1.85596 112.97 1.96387 112.835 cv
2.07861 112.706 2.1665 112.457 2.23389 112.092 cv
2.31494 111.688 li
2.40967 111.194 2.57813 110.83 2.81445 110.594 cv
3.05762 110.357 3.375 110.236 3.77295 110.236 cv
4.25244 110.236 4.60986 110.398 4.85303 110.715 cv
5.09619 111.039 5.21777 111.505 5.21777 112.119 cv
5.21777 112.355 5.19043 112.605 5.14355 112.868 cv
5.09619 113.132 5.02197 113.401 4.91406 113.679 cv
4.2251 113.679 li
4.38037 113.408 4.49512 113.146 4.56982 112.889 cv
4.65039 112.632 4.68457 112.376 4.68457 112.119 cv
4.68457 111.741 4.60986 111.451 4.46143 111.242 cv
4.31299 111.039 4.104 110.932 3.82031 110.932 cv
3.57715 110.932 3.38818 111.006 3.25342 111.154 cv
3.11816 111.303 3.01709 111.546 2.94971 111.883 cv
2.86865 112.288 li
2.77393 112.787 2.61865 113.146 2.40283 113.368 cv
2.19385 113.591 1.90332 113.699 1.52539 113.699 cv
1.09326 113.699 .749023 113.55 .499512 113.24 cv
.249512 112.936 .121582 112.511 .121582 111.971 cv
.121582 111.741 .141602 111.512 .182129 111.269 cv
.222656 111.032 .290039 110.79 .371094 110.533 cv
f
3.13184 106.064 mo
3.4292 106.064 li
3.4292 108.853 li
3.84766 108.825 4.17139 108.704 4.3877 108.474 cv
4.60352 108.252 4.71143 107.94 4.71143 107.536 cv
4.71143 107.307 4.68457 107.077 4.63037 106.861 cv
4.57666 106.645 4.48877 106.423 4.36719 106.206 cv
4.94092 106.206 li
5.03564 106.423 5.10986 106.645 5.15039 106.874 cv
5.19092 107.104 5.21777 107.341 5.21777 107.57 cv
5.21777 108.164 5.04883 108.63 4.71143 108.974 cv
4.37402 109.317 3.9082 109.486 3.3208 109.486 cv
2.72021 109.486 2.24072 109.324 1.8833 109.001 cv
1.53223 108.677 1.3501 108.231 1.3501 107.678 cv
1.3501 107.178 1.51221 106.786 1.8291 106.497 cv
2.15332 106.214 2.58545 106.064 3.13184 106.064 cv
2.95654 106.672 mo
2.62549 106.679 2.3623 106.773 2.16016 106.948 cv
1.96436 107.131 1.86279 107.374 1.86279 107.671 cv
1.86279 108.009 1.96436 108.279 2.15332 108.48 cv
2.34229 108.684 2.6123 108.805 2.95654 108.832 cv
2.95654 106.672 li
f
1.5791 102.412 mo
2.14648 102.412 li
2.05176 102.589 1.98438 102.757 1.93701 102.933 cv
1.88965 103.107 1.86279 103.276 1.86279 103.452 cv
1.86279 103.844 1.99121 104.154 2.24072 104.37 cv
2.49072 104.586 2.84131 104.694 3.28711 104.694 cv
3.73926 104.694 4.09033 104.586 4.33984 104.37 cv
4.58984 104.154 4.71143 103.844 4.71143 103.452 cv
4.71143 103.276 4.69092 103.107 4.64404 102.933 cv
4.59668 102.757 4.52246 102.589 4.42773 102.412 cv
4.98779 102.412 li
5.06885 102.589 5.12988 102.764 5.16357 102.939 cv
5.19727 103.122 5.21777 103.317 5.21777 103.521 cv
5.21777 104.073 5.04883 104.519 4.69775 104.843 cv
4.35352 105.173 3.88086 105.335 3.28711 105.335 cv
2.68652 105.335 2.21387 105.173 1.86963 104.843 cv
1.52539 104.512 1.34961 104.06 1.34961 103.479 cv
1.34961 103.291 1.37012 103.107 1.41064 102.933 cv
1.45117 102.757 1.50488 102.582 1.5791 102.412 cv
f
1.86279 99.9287 mo
1.86279 100.253 1.99121 100.509 2.24756 100.698 cv
2.50391 100.888 2.84814 100.981 3.28711 100.981 cv
3.73242 100.981 4.07666 100.894 4.33301 100.705 cv
4.58984 100.516 4.71143 100.26 4.71143 99.9287 cv
4.71143 99.6045 4.58984 99.3486 4.33301 99.1592 cv
4.07666 98.9707 3.73242 98.876 3.28711 98.876 cv
2.85498 98.876 2.50391 98.9707 2.24756 99.1592 cv
1.99121 99.3486 1.86279 99.6045 1.86279 99.9287 cv
1.34961 99.9287 mo
1.34961 99.4023 1.52539 98.9902 1.86279 98.6865 cv
2.20703 98.3896 2.67969 98.2344 3.28711 98.2344 cv
3.89453 98.2344 4.36719 98.3896 4.70459 98.6865 cv
5.04883 98.9902 5.21729 99.4023 5.21729 99.9287 cv
5.21729 100.462 5.04883 100.881 4.70459 101.178 cv
4.36719 101.475 3.89453 101.623 3.28711 101.623 cv
2.67969 101.623 2.20703 101.475 1.86279 101.178 cv
1.52539 100.881 1.34961 100.462 1.34961 99.9287 cv
f
2.90234 94.1572 mo
5.12988 94.1572 li
5.12988 94.7646 li
2.92236 94.7646 li
2.57178 94.7646 2.31494 94.8389 2.13965 94.9736 cv
1.96387 95.1094 1.87646 95.3115 1.87646 95.582 cv
1.87646 95.9121 1.98438 96.1689 2.19385 96.3574 cv
2.40283 96.5469 2.68652 96.6416 3.04395 96.6416 cv
5.12988 96.6416 li
5.12988 97.249 li
1.4375 97.249 li
1.4375 96.6416 li
2.01123 96.6416 li
1.79541 96.5 1.62646 96.3311 1.51855 96.1279 cv
1.41064 95.9326 1.3501 95.7031 1.3501 95.4463 cv
1.3501 95.0283 1.48486 94.7041 1.74805 94.4883 cv
2.01123 94.2725 2.396 94.1572 2.90234 94.1572 cv
f
1.99805 90.5195 mo
0 90.5195 li
0 89.9121 li
5.12988 89.9121 li
5.12988 90.5195 li
4.57617 90.5195 li
4.79932 90.6475 4.96094 90.8096 5.0625 91.0049 cv
5.16357 91.2012 5.21777 91.4307 5.21777 91.7002 cv
5.21777 92.1455 5.04199 92.5107 4.69092 92.7939 cv
4.34033 93.0771 3.86768 93.2129 3.28711 93.2129 cv
2.70654 93.2129 2.24072 93.0771 1.8833 92.7939 cv
1.53223 92.5107 1.3501 92.1455 1.3501 91.7002 cv
1.3501 91.4307 1.40381 91.2012 1.51172 91.0049 cv
1.62012 90.8096 1.78174 90.6475 1.99805 90.5195 cv
3.28711 92.585 mo
3.73242 92.585 4.0835 92.4971 4.34033 92.3145 cv
4.59668 92.1328 4.71826 91.876 4.71826 91.5518 cv
4.71826 91.2344 4.59668 90.9854 4.34033 90.7959 cv
4.0835 90.6133 3.73242 90.5195 3.28711 90.5195 cv
2.8418 90.5195 2.49756 90.6133 2.24072 90.7959 cv
1.98438 90.9854 1.85596 91.2344 1.85596 91.5518 cv
1.85596 91.876 1.98438 92.1328 2.24072 92.3145 cv
2.49756 92.4971 2.8418 92.585 3.28711 92.585 cv
f
1.54541 86.3076 mo
2.11914 86.3076 li
2.03809 86.4834 1.9707 86.6582 1.92334 86.8408 cv
1.88281 87.0293 1.85596 87.2188 1.85596 87.4141 cv
1.85596 87.7178 1.90332 87.9473 1.99756 88.0957 cv
2.09229 88.2451 2.22705 88.3193 2.40967 88.3193 cv
2.55127 88.3193 2.65918 88.2646 2.74023 88.1572 cv
2.82129 88.0488 2.90234 87.833 2.96973 87.5088 cv
3.01709 87.2998 li
3.11133 86.8672 3.24658 86.5635 3.40869 86.3818 cv
3.57715 86.2061 3.81348 86.1113 4.11035 86.1113 cv
4.45459 86.1113 4.72461 86.2471 4.92041 86.5166 cv
5.12305 86.7871 5.21777 87.165 5.21777 87.6367 cv
5.21777 87.8398 5.19727 88.042 5.16357 88.2578 cv
5.12988 88.4746 5.07568 88.6973 4.99463 88.9336 cv
4.36719 88.9336 li
4.48877 88.71 4.57617 88.4873 4.63037 88.2715 cv
4.69092 88.0557 4.71826 87.8398 4.71826 87.624 cv
4.71826 87.3398 4.6709 87.1172 4.57617 86.9619 cv
4.48193 86.8135 4.33984 86.7324 4.15771 86.7324 cv
3.99561 86.7324 3.86768 86.793 3.77979 86.9014 cv
3.69189 87.0098 3.60449 87.252 3.52344 87.6309 cv
3.47607 87.8398 li
3.39502 88.2178 3.27344 88.4941 3.11133 88.6563 cv
2.94971 88.8252 2.72656 88.9063 2.43652 88.9063 cv
2.09229 88.9063 1.82227 88.7842 1.6333 88.542 cv
1.44434 88.2988 1.34961 87.9473 1.34961 87.4883 cv
1.34961 87.2656 1.37012 87.0566 1.40381 86.8545 cv
1.4375 86.6582 1.48486 86.4766 1.54541 86.3076 cv
f
.5625 lw
30.0381 197.545 mo
281.138 197.545 li
@
30.0381 3.14551 mo
281.138 3.14551 li
@
281.138 197.545 mo
281.138 3.14551 li
@
30.0381 197.545 mo
30.0381 3.14551 li
@
191.696 32.9658 mo
277.088 32.9658 li
277.088 7.19531 li
191.696 7.19531 li
191.696 32.9658 li
cp
0 0 0 0 cmyk
f
191.696 32.9658 mo
277.088 32.9658 li
277.088 7.19531 li
191.696 7.19531 li
191.696 32.9658 li
cp
0 0 0 1 cmyk
@
2 lc
197.366 13.5859 mo
208.706 13.5859 li
.884 .769 0 0 cmyk
@
221.949 10.71 mo
221.949 11.4883 li
221.641 11.3428 221.358 11.2363 221.09 11.1641 cv
220.815 11.0986 220.555 11.0586 220.313 11.0586 cv
219.875 11.0586 219.535 11.1475 219.3 11.3096 cv
219.066 11.4795 218.953 11.7227 218.953 12.0303 cv
218.953 12.29 219.025 12.4922 219.187 12.6211 cv
219.34 12.7598 219.64 12.8652 220.078 12.9463 cv
220.564 13.043 li
221.155 13.1563 221.593 13.3594 221.876 13.6426 cv
222.16 13.9336 222.305 14.3145 222.305 14.793 cv
222.305 15.3682 222.111 15.7969 221.73 16.0889 cv
221.342 16.3799 220.783 16.5254 220.045 16.5254 cv
219.762 16.5254 219.462 16.4941 219.146 16.4365 cv
218.831 16.3799 218.507 16.291 218.174 16.1611 cv
218.174 15.3359 li
218.499 15.5215 218.815 15.6592 219.123 15.748 cv
219.43 15.8457 219.738 15.8867 220.045 15.8867 cv
220.5 15.8867 220.847 15.7969 221.098 15.6191 cv
221.342 15.4404 221.47 15.1895 221.47 14.8486 cv
221.47 14.5576 221.382 14.3311 221.205 14.1689 cv
221.025 14.0068 220.735 13.8857 220.329 13.8047 cv
219.843 13.707 li
219.244 13.5938 218.815 13.4072 218.546 13.1484 cv
218.28 12.8975 218.15 12.5488 218.15 12.0947 cv
218.15 11.5771 218.328 11.1641 218.701 10.8643 cv
219.066 10.5645 219.576 10.4102 220.224 10.4102 cv
220.5 10.4102 220.774 10.4355 221.066 10.4834 cv
221.35 10.5322 221.641 10.6133 221.949 10.71 cv
0 0 0 1 cmyk
f
227.311 14.0234 mo
227.311 14.3799 li
223.966 14.3799 li
223.999 14.8818 224.144 15.2705 224.419 15.5303 cv
224.687 15.7891 225.06 15.9189 225.545 15.9189 cv
225.821 15.9189 226.096 15.8857 226.356 15.8213 cv
226.615 15.7568 226.881 15.6514 227.141 15.5049 cv
227.141 16.1934 li
226.881 16.3076 226.615 16.3965 226.339 16.4453 cv
226.064 16.4932 225.78 16.5264 225.505 16.5264 cv
224.792 16.5264 224.233 16.3232 223.821 15.9189 cv
223.408 15.5137 223.205 14.9541 223.205 14.25 cv
223.205 13.5293 223.399 12.9541 223.788 12.5244 cv
224.176 12.1035 224.711 11.8848 225.375 11.8848 cv
225.975 11.8848 226.445 12.0791 226.792 12.46 cv
227.133 12.8486 227.311 13.3672 227.311 14.0234 cv
226.583 13.8125 mo
226.574 13.416 226.46 13.0996 226.25 12.8574 cv
226.032 12.6221 225.74 12.5 225.383 12.5 cv
224.979 12.5 224.654 12.6221 224.412 12.8486 cv
224.168 13.0752 224.022 13.3994 223.991 13.8125 cv
226.583 13.8125 li
f
228.502 10.2646 mo
229.231 10.2646 li
229.231 16.4209 li
228.502 16.4209 li
228.502 10.2646 li
cp
f
234.544 14.0234 mo
234.544 14.3799 li
231.2 14.3799 li
231.232 14.8818 231.377 15.2705 231.653 15.5303 cv
231.92 15.7891 232.293 15.9189 232.779 15.9189 cv
233.054 15.9189 233.33 15.8857 233.589 15.8213 cv
233.848 15.7568 234.115 15.6514 234.375 15.5049 cv
234.375 16.1934 li
234.115 16.3076 233.848 16.3965 233.572 16.4453 cv
233.297 16.4932 233.013 16.5264 232.739 16.5264 cv
232.025 16.5264 231.466 16.3232 231.054 15.9189 cv
230.641 15.5137 230.438 14.9541 230.438 14.25 cv
230.438 13.5293 230.632 12.9541 231.021 12.5244 cv
231.41 12.1035 231.945 11.8848 232.609 11.8848 cv
233.208 11.8848 233.678 12.0791 234.026 12.46 cv
234.367 12.8486 234.544 13.3672 234.544 14.0234 cv
233.816 13.8125 mo
233.807 13.416 233.694 13.0996 233.483 12.8574 cv
233.265 12.6221 232.973 12.5 232.617 12.5 cv
232.212 12.5 231.887 12.6221 231.645 12.8486 cv
231.402 13.0752 231.255 13.3994 231.224 13.8125 cv
233.816 13.8125 li
f
238.926 12.1602 mo
238.926 12.8408 li
238.716 12.7275 238.513 12.6465 238.303 12.5889 cv
238.093 12.5332 237.89 12.5 237.679 12.5 cv
237.209 12.5 236.836 12.6543 236.578 12.9541 cv
236.318 13.2539 236.189 13.6748 236.189 14.21 cv
236.189 14.752 236.318 15.1738 236.578 15.4736 cv
236.836 15.7725 237.209 15.9189 237.679 15.9189 cv
237.89 15.9189 238.093 15.8945 238.303 15.8379 cv
238.513 15.7813 238.716 15.6924 238.926 15.5781 cv
238.926 16.251 li
238.716 16.3477 238.505 16.4209 238.294 16.4609 cv
238.076 16.502 237.841 16.5264 237.598 16.5264 cv
236.934 16.5264 236.4 16.3232 236.01 15.9023 cv
235.614 15.4893 235.419 14.9229 235.419 14.21 cv
235.419 13.4893 235.614 12.9219 236.01 12.5088 cv
236.407 12.0957 236.95 11.8848 237.647 11.8848 cv
237.874 11.8848 238.093 11.9092 238.303 11.958 cv
238.513 12.0068 238.724 12.0713 238.926 12.1602 cv
f
240.912 10.7344 mo
240.912 11.9902 li
242.41 11.9902 li
242.41 12.5576 li
240.912 12.5576 li
240.912 14.9629 li
240.912 15.3271 240.96 15.5625 241.057 15.6592 cv
241.154 15.7646 241.357 15.8135 241.665 15.8135 cv
242.41 15.8135 li
242.41 16.4209 li
241.665 16.4209 li
241.097 16.4209 240.708 16.3154 240.499 16.1045 cv
240.288 15.8945 240.182 15.5137 240.182 14.9629 cv
240.182 12.5576 li
239.648 12.5576 li
239.648 11.9902 li
240.182 11.9902 li
240.182 10.7344 li
240.912 10.7344 li
f
243.366 11.9902 mo
244.094 11.9902 li
244.094 16.4209 li
243.366 16.4209 li
243.366 11.9902 li
cp
243.366 10.2646 mo
244.094 10.2646 li
244.094 11.1885 li
243.366 11.1885 li
243.366 10.2646 li
cp
f
247.334 12.5 mo
246.946 12.5 246.638 12.6543 246.411 12.9619 cv
246.184 13.2695 246.071 13.6836 246.071 14.21 cv
246.071 14.7441 246.176 15.1572 246.404 15.4658 cv
246.629 15.7725 246.938 15.9189 247.334 15.9189 cv
247.723 15.9189 248.031 15.7725 248.258 15.4658 cv
248.485 15.1572 248.598 14.7441 248.598 14.21 cv
248.598 13.6914 248.485 13.2695 248.258 12.9619 cv
248.031 12.6543 247.723 12.5 247.334 12.5 cv
247.334 11.8848 mo
247.966 11.8848 248.46 12.0957 248.825 12.5 cv
249.181 12.9131 249.368 13.4805 249.368 14.21 cv
249.368 14.9385 249.181 15.5049 248.825 15.9111 cv
248.46 16.3232 247.966 16.5264 247.334 16.5264 cv
246.694 16.5264 246.193 16.3232 245.835 15.9111 cv
245.48 15.5049 245.301 14.9385 245.301 14.21 cv
245.301 13.4805 245.48 12.9131 245.835 12.5 cv
246.193 12.0957 246.694 11.8848 247.334 11.8848 cv
f
254.26 13.748 mo
254.26 16.4209 li
253.531 16.4209 li
253.531 13.7725 li
253.531 13.3506 253.442 13.043 253.281 12.833 cv
253.119 12.6221 252.875 12.5166 252.55 12.5166 cv
252.154 12.5166 251.846 12.6465 251.62 12.8975 cv
251.392 13.1484 251.279 13.4883 251.279 13.918 cv
251.279 16.4209 li
250.55 16.4209 li
250.55 11.9902 li
251.279 11.9902 li
251.279 12.6787 li
251.45 12.4189 251.652 12.2168 251.895 12.0869 cv
252.13 11.957 252.405 11.8848 252.712 11.8848 cv
253.215 11.8848 253.604 12.0469 253.863 12.3633 cv
254.123 12.6787 254.26 13.1406 254.26 13.748 cv
f
261.858 10.71 mo
261.858 11.4883 li
261.55 11.3428 261.266 11.2363 261 11.1641 cv
260.724 11.0986 260.464 11.0586 260.221 11.0586 cv
259.784 11.0586 259.444 11.1475 259.208 11.3096 cv
258.974 11.4795 258.861 11.7227 258.861 12.0303 cv
258.861 12.29 258.934 12.4922 259.096 12.6211 cv
259.25 12.7598 259.549 12.8652 259.987 12.9463 cv
260.473 13.043 li
261.064 13.1563 261.501 13.3594 261.785 13.6426 cv
262.068 13.9336 262.214 14.3145 262.214 14.793 cv
262.214 15.3682 262.02 15.7969 261.639 16.0889 cv
261.25 16.3799 260.692 16.5254 259.955 16.5254 cv
259.67 16.5254 259.371 16.4941 259.055 16.4365 cv
258.74 16.3799 258.416 16.291 258.083 16.1611 cv
258.083 15.3359 li
258.407 15.5215 258.723 15.6592 259.031 15.748 cv
259.338 15.8457 259.647 15.8867 259.955 15.8867 cv
260.408 15.8867 260.756 15.7969 261.007 15.6191 cv
261.25 15.4404 261.379 15.1895 261.379 14.8486 cv
261.379 14.5576 261.291 14.3311 261.113 14.1689 cv
260.934 14.0068 260.643 13.8857 260.238 13.8047 cv
259.751 13.707 li
259.152 13.5938 258.723 13.4072 258.456 13.1484 cv
258.189 12.8975 258.059 12.5488 258.059 12.0947 cv
258.059 11.5771 258.237 11.1641 258.61 10.8643 cv
258.974 10.5645 259.485 10.4102 260.132 10.4102 cv
260.408 10.4102 260.683 10.4355 260.975 10.4834 cv
261.258 10.5322 261.55 10.6133 261.858 10.71 cv
f
265.147 12.5 mo
264.758 12.5 264.45 12.6543 264.223 12.9619 cv
263.997 13.2695 263.882 13.6836 263.882 14.21 cv
263.882 14.7441 263.988 15.1572 264.215 15.4658 cv
264.442 15.7725 264.75 15.9189 265.147 15.9189 cv
265.535 15.9189 265.843 15.7725 266.07 15.4658 cv
266.296 15.1572 266.41 14.7441 266.41 14.21 cv
266.41 13.6914 266.296 13.2695 266.07 12.9619 cv
265.843 12.6543 265.535 12.5 265.147 12.5 cv
265.147 11.8848 mo
265.778 11.8848 266.272 12.0957 266.636 12.5 cv
266.994 12.9131 267.179 13.4805 267.179 14.21 cv
267.179 14.9385 266.994 15.5049 266.636 15.9111 cv
266.272 16.3232 265.778 16.5264 265.147 16.5264 cv
264.506 16.5264 264.004 16.3232 263.648 15.9111 cv
263.292 15.5049 263.114 14.9385 263.114 14.21 cv
263.114 13.4805 263.292 12.9131 263.648 12.5 cv
264.004 12.0957 264.506 11.8848 265.147 11.8848 cv
f
270.954 12.6709 mo
270.873 12.6221 270.784 12.5898 270.687 12.5654 cv
270.59 12.5488 270.484 12.5322 270.372 12.5322 cv
269.958 12.5322 269.642 12.6709 269.422 12.9375 cv
269.196 13.2051 269.091 13.5859 269.091 14.0879 cv
269.091 16.4209 li
268.363 16.4209 li
268.363 11.9902 li
269.091 11.9902 li
269.091 12.6787 li
269.237 12.4121 269.44 12.209 269.682 12.0791 cv
269.925 11.9502 270.225 11.8848 270.582 11.8848 cv
270.63 11.8848 270.687 11.8926 270.751 11.8926 cv
270.808 11.9014 270.873 11.9092 270.954 11.9248 cv
270.954 12.6709 li
f
272.437 10.7344 mo
272.437 11.9902 li
273.935 11.9902 li
273.935 12.5576 li
272.437 12.5576 li
272.437 14.9629 li
272.437 15.3271 272.485 15.5625 272.583 15.6592 cv
272.679 15.7646 272.882 15.8135 273.19 15.8135 cv
273.935 15.8135 li
273.935 16.4209 li
273.19 16.4209 li
272.623 16.4209 272.234 16.3154 272.024 16.1045 cv
271.813 15.8945 271.708 15.5137 271.708 14.9629 cv
271.708 12.5576 li
271.172 12.5576 li
271.172 11.9902 li
271.708 11.9902 li
271.708 10.7344 li
272.437 10.7344 li
f
197.366 25.2559 mo
208.706 25.2559 li
.873 .242 1 .129 cmyk
@
218.41 22.1855 mo
219.6 22.1855 li
221.107 26.2041 li
222.621 22.1855 li
223.812 22.1855 li
223.812 28.0908 li
223.035 28.0908 li
223.035 22.9072 li
221.512 26.9561 li
220.709 26.9561 li
219.187 22.9072 li
219.187 28.0908 li
218.41 28.0908 li
218.41 22.1855 li
cp
0 0 0 1 cmyk
f
229.158 25.6934 mo
229.158 26.0498 li
225.813 26.0498 li
225.845 26.5518 225.992 26.9414 226.266 27.2002 cv
226.534 27.459 226.907 27.5889 227.392 27.5889 cv
227.668 27.5889 227.943 27.5566 228.203 27.4912 cv
228.461 27.4268 228.729 27.3213 228.988 27.1758 cv
228.988 27.8643 li
228.729 27.9775 228.461 28.0664 228.186 28.1152 cv
227.911 28.1641 227.626 28.1963 227.352 28.1963 cv
226.638 28.1963 226.08 27.9932 225.667 27.5889 cv
225.254 27.1836 225.051 26.625 225.051 25.9199 cv
225.051 25.1992 225.246 24.624 225.634 24.1953 cv
226.024 23.7734 226.558 23.5547 227.222 23.5547 cv
227.822 23.5547 228.292 23.749 228.639 24.1299 cv
228.98 24.5186 229.158 25.0371 229.158 25.6934 cv
228.429 25.4824 mo
228.42 25.0859 228.307 24.7695 228.096 24.5264 cv
227.878 24.292 227.586 24.1709 227.23 24.1709 cv
226.826 24.1709 226.501 24.292 226.258 24.5186 cv
226.015 24.7451 225.869 25.0693 225.837 25.4824 cv
228.429 25.4824 li
f
232.917 24.3408 mo
232.835 24.292 232.747 24.2598 232.649 24.2354 cv
232.552 24.2188 232.447 24.2031 232.333 24.2031 cv
231.92 24.2031 231.604 24.3408 231.385 24.6074 cv
231.159 24.875 231.053 25.2559 231.053 25.7578 cv
231.053 28.0908 li
230.325 28.0908 li
230.325 23.6602 li
231.053 23.6602 li
231.053 24.3486 li
231.199 24.0811 231.402 23.8789 231.645 23.749 cv
231.888 23.6191 232.188 23.5547 232.544 23.5547 cv
232.592 23.5547 232.649 23.5635 232.714 23.5635 cv
232.771 23.5713 232.835 23.5791 232.917 23.5957 cv
232.917 24.3408 li
f
236.594 25.8232 mo
236.594 25.3047 236.481 24.8916 236.27 24.6006 cv
236.051 24.3086 235.743 24.1621 235.355 24.1621 cv
234.965 24.1621 234.658 24.3086 234.439 24.6006 cv
234.22 24.8916 234.115 25.3047 234.115 25.8232 cv
234.115 26.3496 234.22 26.7549 234.439 27.0459 cv
234.658 27.3379 234.965 27.4834 235.355 27.4834 cv
235.743 27.4834 236.051 27.3379 236.27 27.0459 cv
236.481 26.7549 236.594 26.3496 236.594 25.8232 cv
237.323 27.54 mo
237.323 28.2852 237.153 28.8438 236.82 29.2168 cv
236.481 29.582 235.97 29.7676 235.282 29.7676 cv
235.023 29.7676 234.788 29.7432 234.561 29.7109 cv
234.334 29.6709 234.107 29.6133 233.896 29.5322 cv
233.896 28.8281 li
234.107 28.9414 234.318 29.0225 234.529 29.0791 cv
234.739 29.1357 234.95 29.168 235.168 29.168 cv
235.638 29.168 235.995 29.0391 236.238 28.7959 cv
236.472 28.5439 236.594 28.1719 236.594 27.6699 cv
236.594 27.3135 li
236.44 27.5723 236.246 27.7666 236.011 27.8965 cv
235.776 28.0264 235.5 28.0908 235.176 28.0908 cv
234.625 28.0908 234.188 27.8887 233.857 27.4756 cv
233.524 27.0625 233.362 26.5117 233.362 25.8232 cv
233.362 25.1426 233.524 24.5918 233.857 24.1787 cv
234.188 23.7656 234.625 23.5547 235.176 23.5547 cv
235.5 23.5547 235.776 23.6201 236.011 23.749 cv
236.246 23.8789 236.44 24.0732 236.594 24.332 cv
236.594 23.6602 li
237.323 23.6602 li
237.323 27.54 li
f
242.613 25.6934 mo
242.613 26.0498 li
239.267 26.0498 li
239.299 26.5518 239.445 26.9414 239.72 27.2002 cv
239.988 27.459 240.36 27.5889 240.846 27.5889 cv
241.122 27.5889 241.398 27.5566 241.657 27.4912 cv
241.916 27.4268 242.183 27.3213 242.442 27.1758 cv
242.442 27.8643 li
242.183 27.9775 241.916 28.0664 241.64 28.1152 cv
241.365 28.1641 241.082 28.1963 240.806 28.1963 cv
240.093 28.1963 239.534 27.9932 239.121 27.5889 cv
238.708 27.1836 238.505 26.625 238.505 25.9199 cv
238.505 25.1992 238.7 24.624 239.088 24.1953 cv
239.478 23.7734 240.012 23.5547 240.676 23.5547 cv
241.276 23.5547 241.746 23.749 242.094 24.1299 cv
242.434 24.5186 242.613 25.0371 242.613 25.6934 cv
241.883 25.4824 mo
241.875 25.0859 241.761 24.7695 241.551 24.5264 cv
241.333 24.292 241.041 24.1709 240.684 24.1709 cv
240.28 24.1709 239.956 24.292 239.712 24.5186 cv
239.469 24.7451 239.324 25.0693 239.292 25.4824 cv
241.883 25.4824 li
f
249.951 22.3809 mo
249.951 23.1582 li
249.643 23.0117 249.36 22.9072 249.092 22.834 cv
248.817 22.7695 248.557 22.7285 248.315 22.7285 cv
247.876 22.7285 247.538 22.8174 247.302 22.9795 cv
247.068 23.1494 246.954 23.3926 246.954 23.7002 cv
246.954 23.96 247.027 24.1621 247.189 24.292 cv
247.342 24.4297 247.642 24.5352 248.08 24.6162 cv
248.566 24.7129 li
249.157 24.8271 249.594 25.0293 249.877 25.3125 cv
250.162 25.6045 250.307 25.9854 250.307 26.4629 cv
250.307 27.0381 250.113 27.4668 249.732 27.7588 cv
249.343 28.0508 248.785 28.1963 248.047 28.1963 cv
247.764 28.1963 247.464 28.1641 247.148 28.1074 cv
246.833 28.0508 246.508 27.9609 246.176 27.832 cv
246.176 27.0049 li
246.5 27.1924 246.816 27.3291 247.125 27.4189 cv
247.431 27.5156 247.739 27.5566 248.047 27.5566 cv
248.501 27.5566 248.849 27.4668 249.1 27.2891 cv
249.343 27.1113 249.473 26.8594 249.473 26.5195 cv
249.473 26.2275 249.384 26.001 249.206 25.8389 cv
249.027 25.6768 248.736 25.5557 248.331 25.4746 cv
247.845 25.377 li
247.246 25.2637 246.816 25.0771 246.548 24.8184 cv
246.282 24.5674 246.152 24.2197 246.152 23.7656 cv
246.152 23.2471 246.33 22.834 246.703 22.5342 cv
247.068 22.2344 247.578 22.0811 248.226 22.0811 cv
248.501 22.0811 248.776 22.1045 249.068 22.1533 cv
249.352 22.2021 249.643 22.2832 249.951 22.3809 cv
f
253.24 24.1709 mo
252.851 24.1709 252.543 24.3242 252.316 24.6318 cv
252.089 24.9404 251.976 25.3525 251.976 25.8799 cv
251.976 26.4141 252.081 26.8271 252.308 27.1348 cv
252.535 27.4424 252.842 27.5889 253.24 27.5889 cv
253.627 27.5889 253.936 27.4424 254.164 27.1348 cv
254.39 26.8271 254.502 26.4141 254.502 25.8799 cv
254.502 25.3613 254.39 24.9404 254.164 24.6318 cv
253.936 24.3242 253.627 24.1709 253.24 24.1709 cv
253.24 23.5547 mo
253.872 23.5547 254.365 23.7656 254.73 24.1709 cv
255.086 24.583 255.272 25.1504 255.272 25.8799 cv
255.272 26.6084 255.086 27.1758 254.73 27.5801 cv
254.365 27.9932 253.872 28.1963 253.24 28.1963 cv
252.599 28.1963 252.097 27.9932 251.741 27.5801 cv
251.384 27.1758 251.207 26.6084 251.207 25.8799 cv
251.207 25.1504 251.384 24.583 251.741 24.1709 cv
252.097 23.7656 252.599 23.5547 253.24 23.5547 cv
f
259.047 24.3408 mo
258.966 24.292 258.877 24.2598 258.78 24.2354 cv
258.683 24.2188 258.578 24.2031 258.464 24.2031 cv
258.05 24.2031 257.735 24.3408 257.516 24.6074 cv
257.29 24.875 257.184 25.2559 257.184 25.7578 cv
257.184 28.0908 li
256.456 28.0908 li
256.456 23.6602 li
257.184 23.6602 li
257.184 24.3486 li
257.33 24.0811 257.533 23.8789 257.775 23.749 cv
258.019 23.6191 258.318 23.5547 258.674 23.5547 cv
258.723 23.5547 258.78 23.5635 258.845 23.5635 cv
258.901 23.5713 258.966 23.5791 259.047 23.5957 cv
259.047 24.3408 li
f
260.53 22.4043 mo
260.53 23.6602 li
262.028 23.6602 li
262.028 24.2275 li
260.53 24.2275 li
260.53 26.6328 li
260.53 26.9971 260.578 27.2324 260.675 27.3291 cv
260.773 27.4346 260.975 27.4834 261.283 27.4834 cv
262.028 27.4834 li
262.028 28.0908 li
261.283 28.0908 li
260.715 28.0908 260.327 27.9854 260.117 27.7744 cv
259.906 27.5645 259.8 27.1836 259.8 26.6328 cv
259.8 24.2275 li
259.265 24.2275 li
259.265 23.6602 li
259.8 23.6602 li
259.8 22.4043 li
260.53 22.4043 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (011x009.eps)%%CreationDate: 27/05/15 11:22 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mTcS2jV^c?p^CuYMdK/4i6kF@M@%_"0#_"0\[rn(`<;WVf-RjQAVc0i"6>_>=JXccYH8ek<j:2`%?)qE9Sqe#H791`,B%PIdb@%F%G4R[$FA[m*Z(*IjKY@CS30bc6D5T[J-e;&fhS@V/?bK(k/IfAH%#UO1d6^=G?96F5NbGF"DG^FP<)600+MW?cCsom63o%aj#.nodc0Mn!Ho4c[)_KCk#Nt8VC=LTW1.lrdNG!LVM_"[J!KrG?k47:Di1^#N8!_iB%)/1g]L_e_2`E>-%(=UW4C"?pEW=B=2Un%0nLfN&Wqd"Rm!0)"Ju.ChOW6S5<I\EV>Jq^4Ci,jm:P[rdf)S:/*K2jeWRAAO_<jbmoI-MX^N+3$5*Ic'n;,0Zm9)nQdRGW5dccP%"!qd'Qk3QjYKtpPQBL"19"!4s'$@\qB:o3V=B5ku;91,1Er'"D[4`Gj>st4n+I@oJTNSDI;.]\(EkV$=3C!kg-Rj"@Btr92W6q+-%?f6>]l*)(&'C8g"Y-j,YTRrq>X`<41`)J?mL7NE['BJ=+:(mQX/0ZL<1^:-['qYU^?i_5U\W*'?(cBlAqt'cmZ/d/H23YE+<r93Q%RaBWK%f*p4B-$5dQi0\c76Ge+[0@osku?V,i),a*_&961qu`p$U[j6EVJ:nl/*S0c2N]UKMNr'j.;@J6dC3ok9lBsd"jKrl5@'%?%bCWOAL!N):6$44Il8h&XFa0qPjCu.5Dj.X]$VFP;r3@k%AQ_jPZH?a5drh@ClTuK@"_E8":s*pS'RYO/-rhZ\WBpXB//7#6T`AZH%AU%B2K8IHPG[<"dG6l0@?:#1%OZ\=VflJ15(OSOui!DT@'_'%#--q)dpk1E<&UXZ;9G6Dli!DU+(N9MLJ;M@(?j;YL'DR<s!!Sse%:*ND15El5`i"O7tb5c&>"-aH:'.FPC_'aMlE)*>ZZkM.am6E[I,?BEoK2TK,HibYCJqRq1N3jH"Ki5].CLJD%nh0D:TC<5u,OH#6%KQ;UY-^4]3i01Mld1RX);Er[PF9!_%qSV$GcpslAV23oo>R9MGHD$eT7Hu1d=aQ8DllVGmm[.SfGORNLRQLcQi"J]pr<E7W9ZXj8%$"\Y!7%.gJZQ15M;?P<aVSc)/R'm%W6rSmo0Y:_09&raG,>oo^'"J&)X@3tEKQ\c_C+%ZUqrBd57joaN8[Onm3KXce:r`NkrX*Eg%mj-?*>(pNB3=4Lhg<K7rkT@GhFGO)2BOrN%d1/DRP9ddmUqp_UoWicL?Ljtn.ek+`-!jHFs"o]t&V%nekdfWDpe1T4d\]SYi\1+?%gZ5j=9E$p]q<^/CDMS57kK+D-Qi,Un,eq<*nh6+X((!D,-3$R`nlu#<rtPHnpiC+1pa#6!I^<DB0B,b`$AM\9.Rpt=G>'8J]BC)T%d4UkkhLRG-;RB,HiP.h#L;2(j^*d?=ko2AthB)"mq/8OS@;chp#Iq'tpq$QV&`9a$P`'9?n(:)$G>n?B@_ZKE![#&a:Xi*jh>^P*%qYlf%>NMR[>$=Uq22bokcRG-69n-Y8H'_IUn<f/Qrh]oVr^J;XaoA/:9oX1&g-qYS,_>qF!>O7Wd":4&;Ds3616Hk=Q0A<4+W/=.%r59f7&SZk=+k`0deACE%.X=p`Zi`&n-M*s0JEKIqI<*b0`[fQ[pnq$*Qiqk+Gu8]pq:[,u0.I#!:,IXo,',=m[882T1JYX`'+C[K%Ccdk2qDS?7Pn:+;PZlAX4-%U8&a=n$'"Z0aV@J*\X_NGocrm$#n]bU08:.b%e-5:s>4?b6Q=KEmYZQ7-[?dgiSQCO#^%qeQX#ar&%o%/Z?&U"o]5M)4Bs%t;XijYQ]g=rp,A[qt;F[L'JDb>>nBt$c62h&oJ`oW',M<1sb["QX_"\;QDdQUd=(ALg3&obFfPaTMnK]j\Y%>fZIsT$iQ]OM$K+D>*Iq&m`C[Dt^iCi&:a$PDSZfOiD]HoY5*,3>Xn1pUjX>c^9F_]r(Ed/rfh1lF.(!\'Ku""hC_]94;h9,a#XJ%8P<iJ/b]1)1$<7R?$HV"X%T(Q4e+S('<eR,2LX/OCF7Xj[7AhBXD@HBO+ir*IoH,"O>ZDcQqrG0AibV%dV80$qDRKNW'n28Ri:PM%60@ekQ.H2F.C/\AS^g0oAc<.q+M*<b.Bo7cYK?Ig<&j#lgdaZd6ALOU03&Xp9\53G.'Z[k\!1E>Zt,b;UKXOo!Z.-79BsNn$?@R;%r<s@i.SU_b"HUe!aW"sP2tHMYS3AOn14N'[.r2=SFcQ*-]e(T-$d^ctKj@QI]ckkB]KG5D]L2$ild8Sb#J&i^a-RahCS82Vm<MV8%*t-u5*`$>Y\RJpBD=V"0]W2TNL#;=g<dL0JQWE*/Obe%>LV]gs7VEbpotEJL*qLuER8,V,Qi%BP@dt!^P@r;dV.e\DXuqo'Y5:6-%*?fDc^piMcGo,\pHi/e>0s@d%:EcGR.$&*-B`jq"#i[;.QVaikG(B%NJo;X2PaU]R%&.II,&Bq+a>,&)TSORZ^S^P862._dk*sB$%[#GHVFNXUVVAaum`DCoh"m_LJ-o86%[u"X$U<N^W;_O*e2LF<3KnKjni,+I\%'rr0+%P@!nm*QH,,tlY@hcW)-;qjsS5,l^Q6a]0%T6koG(9Q%E2FVEAfWKnf;G7+?]0p+!Y1mPpMMGnAimP>nl%A/9oH/uYV8))Z?ZMsW"'j40=Q`?$$PgeuTC7:+S4=J?C"en5[/\/D%8aTjD?EHV*<Lme9q26XS0eO`OA3)"U_#@ZW..Q^#91oQ*/89c(F;_J,*`7c=JR].Q,Piq<$<#?!C]S=;b;<C[fh.3D,"k\A8%Pc9%N)k$I@GXeBIYb?JQ87TT]N=T!0'(4UqC"9bYq1aMWR[?nJ)XCgp%N-NM!iqEf49?TP2d7\'JbOk\B+^>2Y\!G[m2i.1+ABpOFR!g%a.B9OH[9F@XB4PHPb>01gUK*>p@\FDE:H&,cD)INnTLum"5`I:Ddh2u0pirCOKhIscPMCEW$a>&T5lS%o%X1&IZDE;F=,$)#,=X/%@k!F&AdYDdi?V8AI>[p,T]Z@u)nYWc$p%!*^EId93k3:RS(,J&&Ghs5q&G.-2gOD'?d)!)eES>t/H>H4HBXY(EORdZ:p^\K"h#$^%?'5d6R=.>bl_51=3\BYWn^jEMku+8`.n\l,U%o-JIN>lJFPLcbS+#DUs,N_Ae[iLIZ>>8F592XZl-BPbAL.iV'BeVirehh7[@=q5%S]4ki0q5@)?Y[^SG3'GR9-1eEWP*I2a]Sr^hp-[8]<uJ:Z^$A8<3B<V[3U$R?H,4_hu7O1CN%Jk[s4H/99$]$ok$i`b9<-?20i29%\,)j`Y#cO,FqV\Qk5EW@d$"g"Oh`PV0p'u?SJDhTIK^PX<=i"mH5*-K9(sR@=g']_*KHWeoFao,rUHGl_P1[)\_6uLHmI%-brSA\%IDiBh0SVpiIn(O"pk?^bK*\Eb-<e2l;nh)df@>IFLY%%trgU//.eWZ$Hb7`&pj<ON+Q,8`M*)_FZ2X`OC">L1ha3q\aDn'4rHta!%cMm6RCYr"A5T4R5N@Igom+hfPc0lG7CIt+G<*D/<ZhmV>--nP;o*K\MfuG]t7QXtD4Fq>fh7r9`:*R1!B`=o\IjC?nZZjLf<IX8i%LJ0II=S]*G(D=9bcgMWYKbdOK7gXleQM<f(:(qI(`*S&_f2.X^J"n*tkfY%NqG1!hOpB+@#:3MAi9Shpm'!q%-?@&l/LQ]A<%n*+%.7>]nqYDsm>cH>:iaXHu?P6d/A:UOPU1`B-nS@-/P?5V?%3iZ;KMIh;%hH1c0Q!X9j:P6?5kBJ&0LFh&L*3D$Z7S/67t8[dhl&Qo%fB4YTUXK,\s&P;n*V="\eYFO;8_gQupFD6tho\$$2U*"Z+:G-\R`oUmPG'WL[qhO<)tc&N[JtE6V<V^&o(#r`m/B]d1ZYc?.Gq:.%o!n-3cZB=R4fq^<.Q;YFgMQn4PG].+6LE,!_(Cre)h5pjZZcY^lK@WFoDhkbU@J'5X<O3P6U27)$Jf`Tljf679nKqiU`,SMRma:)%kd41Ed!5LNq;2+P-9Ik";rc(mS6$U-Y=A-VX,0As-bZUbW1.THK5MnrhnSiA?mPs1-fV2TXX.>I=2iPu'[Bu+llRD]EJr(:ZI4PO%`q+\plO?g$&O%,'[G^4t<U.?+J4k0S+*[a&dAOO&]3QRpihbSFeu_o6G)]7I3ZJ0M<SF&[,U:gKSUU_Rs2SjKhiu!`..d<*=g'#b%Tk/Vc74O+pYPn:fgBBn[n=s='rbJK3J\DBef)Kd.`b*=c0tbu-bh;5MkNVZKdqsOeLD6%ff)Bl_Jaq+A*;I@u?h)c9HJ&&&1']om%`)4Pu[/f`We<P,(rFGTlM;>c>mh:u17B\Jr;(#GGp?/X,CkPC=ruc6=qL;BN#4MfrAn-ZH,VSVW\,Z@JlN'*?ce&1mFFT[?ZfZ3'%[>%U"rfoVAFM9Db4?nIQqYq=2&+X^ipZ7,WRJa\,q)aD%s*RkZ++6/t*'7r)Y50g3L_AUgeOT#urM+kPXf4cj[qtG=`YP>`Q`l`f%(PRYA[C7d11[/g[D#F&]@BGlIIn=:2qPO:ZpU0&IE5k;Y1]\co1,.BYBm3pQQ$,%\$JAbH\Z$I8'3Z`^-!tmQoI\d/@@Unt\f"gP%*<bVR]>b!$(G.""[<+q%-/!B=U!i_:dQ-?O7WR/@P;+?Ld4)<[k%CH9>-"8S:Pna0k<=7Jm!QYXpo28E9g%-Lrm^*:Fujn@/=i=G%Z2?/"P#Qe+b="'C?!$sj[-Epk%k?s"o"]Dg.r!b@.?TN[`+a\+_(1V"(n2u)Vjr]>/@8g0e1E"u<i&EX_IhA'D1-"V.mtlEPn%AW%2(NF`[SM"9<jV+=Y>YB7$D63Ik't!;5!-l6Yj%Rm4K*BdqFk;j<A-oYjdB-qq8Od9>AVTmq,a]SJdGgWkcAN2Q)l/i]<D--q6s[C%b'@-*G7Z4e.<TqPl6e#<db5i)2*QR=h\*jU+iH3e]CjK>/_TBsRpXB.BH]@]\O-hdmBurH6F),ET`637HUlR@S3keU[+e;#mq-'6%l<I=FXDjk6Y8:#[/_W:r>e/^-[ZB;%3]4ZaKLhb?q_,!TOXAW?U2?tNMgqF8:h.7>lBT@>o21P6W"Db/ah=)`8i!Ut4:eAo"N"+"%a26qq47cM7Pu$Ru(F@LmbNbO5fcg%Kd[Yj%,mEall.BDOMi11GCH@T:Q2]P"*EY_W;pZu(X:eDoj>o*Q<rHpa?hiuq;Pu)!OM^=^%DVoYgkfZTYZh&`A)]'_)d(9R7@DkJ4>8#<H&jeH?$JQR$`Hed9]cSR7?MsB#o1@MecFT9Y/c%'SOFt:pF[\BOC@/dtcZZ2sIK!<n%C9PkdlVh%%M,dWZfJ3L!P;U=1nOK+8`B#nTdp`_1[]R@(D;<c35T?tgSXO?(>sX3.@MVBN?/YpG:p1<p/lu@pq8RcpDdgkHYB6]M%E39;.bq\j8=s3>0eNc\YRYoPfr>I3sr`-kY+/B;'^)'l<n\&t-&QkM!hFOnBI85HR`^M2g]*req2VZbc[5WV/jpmkdcXXLi28uT_%n`PC;F]?m1hA\r\4Xo#]eR[q>/@c930C0s89j)]Ig)k9jYmGj?a;6[Y@Q<G+;5gtSY#IW:#f'&a3ZhBU/bl/EUi9*!.n;F:30RjM%52p&LjM\8Rf6[Jrb.cA@[;,=#/c4;%+Xq<Gc]5Jsj`b%GZRh,QG!Ba/9IP(`jQlQt?eu(7<tL4r`\hqJcpW%V9pUjK:@l&d]V""?%4%cNAA_;ppP,9YIIAV3FdSk;[mB^,W,ju\cm[k&UMmTPP:6qur;9GW6`T8V07T57a8R(p'@\I'T6IM[fDr\6$O]hk<EN*6`gZTd?%phq\;kS_J;$8bu;h`_3)r@klB_qP5-J,hdE5dQ"mYY2tDO`f'7;I"'nPXL/$!;d0Sg%Lc>c/=2Fi&jg:>,:th)]oe]!sig*aa*Z>%I_a>l[:jr1'uib/DIan9].REHM_+H/L>A!$U]crueD;]bgJ1;5QV[*QPedpJCOan"iCMfDh/)9K`?2G^McB#Ep01J*n'GO\.p.A^%#,d<=:BIFcAhRX1Di9`iN7-No.sBT,$?UY?dr8AA;]VXC7!4I:SE^r&4]D[\:O%KOV:(B%DCF,&G3joA0eV1[]VF?G/]&ZnRbQ'm%QR!EAKOm"sPi6BE%=2i)FWuX&5Kt!T&)H\HbO9<EF?I&CoQKu8bIY>GDih+rFH`E(mD&qF5,.Og6\.u3g9,$rlD\*(AcIWj/j``<%XGc(U[b!+8P=K1FYHNp6k<R1slE>\1ZS93pF^Y!hB^]0nUE>Qap\o1uANmcUOT$FU3\_Pt+k"-V8$i.YCuR7P>dFkOCo%ZZH99:t%&RXJS]BHQ%mqt"p;5#9c.@b;u"U81fNa&.Z-EtoA7MV\s'Jfq^Wk@*p?"]3b=KQ^0h])M>fkRq$Gk5U5,!_i_VKYciUtC1V'pBFJ%,EN4]2-[/q+V.UJ^AONQ[Sa6bmc.^%l_8eI,rcT*Kg+H\6VibRg3.RHWBX:Okb>^Gl;pgS7#msp'pYV-]#!gk/%.]eM2G9S8kXip%7>1p_H??`@>.iCcL0"i'B[sb#%*YY$(hR&W+cZ")(eUpt=a?#QLm2Q4(b*?FC8BI_f5#Wd.orF2q&XU10UZR-P;#8q"n-h\:KChC%QXki!;\%eSL/aa=j+&=_Vmprs2P*X96hk^W8-pm.)<T,<j2lfWb'PHF$F!-#TW9?9ng]J/2THpG*+FL#ggK=2Z\>uH``KY_#Z"a0%7ubQ/3Fo54?,"AJ-.l+`oN"1#fIMA44=FR_oWl5.)i\1XSJhd6*Mf=>bniq@OgJ'[[;aI9;idf/\#X_=MNmNn:"<V40jtY4YKD\1%NM]fu9R\nh3ZS>TId?3c)#e4JBD]%#8(ghB;<^fI332sW4$`f*'?MNgD9h6LjV945hAdAo)9Ij=4(-AI3Io9a0SoX0@;!V8M`"=#%^cK5B525\pQS1?F2h/%c^])X2iL=G\S1Nq&_$U-r+"ZaDkM=DBS%J@$4aFVB.D@5iC](.i^NsXCUb_f?C2,I^F.,Xtk1@=J;OPF,%2mr/FM&ngpAQ/3894t5XKBlu];*!!fh!3-8Y22he1+,O]lPq&,MI4C"dIWg@l0+.MCOP*C/3]Dip6Dd[`D^@FWE)Qcg[2E!Qi'29%E-Gg<mAr>&.p(DEo@CE&[I8%!ibeMR]Y'\?I9#J$G(\A?:CY;^Or.W1h)8.=Q]F5-7;(">c+dl:J1Ck4V:<@\eP'O<^ZqdlGOlJM%bK-b&$`?VB3'64Z'?2IScfoa"%4,5c2-+W(,1b"NkE((d0CF#q)+@N@op>&!!bAb..sFH`hfjP4f="T+6E&RBa4X(\[GRJ:(BiBj%/(NmRU5X9+F5;;d'G#^j%s^^qkhZ&=@mXCg6a*IkPXeWJ%i88D<16ATW\mTEYBF$Ecg?L[mR9[CKbs'^ZD[q,MH[dT>cD/EDB!IS%rtSf'b/AC7AuaMkWjMa%S=Q*sR6&%%Q'-<QW`@3aqFX;Tf&W(%r8n2bC>@Spjn$`\TLom^c:#4NPWnq+3"=kIfpZaFLK6IB]5J[B%M>*`ms/PHQV&?)N4T_4bdaMfP#/+\,HWkQ+C5l8?4>Z#5;rcZiWoH^6EP7T)V-oS3SVQpVjU9Z89Q-b#:Zb+=4Vq5bj5TlCBVfn?%m;)u.RRm=U7BMG@['MUH$*NpQIPe2lp(r<1mEDZfW'Q[qd\p@@,;ZZ/gBupT>4k?6]?4PiV%_s7Hg:6-3sque.6fqZEM_TWrOc<t%l*&)m+fs+LZF01L)-lElP+S_ug,H`<W?5o"-Pt>_Y;_BG5,27F1fj':V5='mZDZ.*'kQ9/<2%aNSk?J-9l-ec1of,Eq0Cf2]<-`c%C/*Dhead3PV+'KRm_SQrMJ=<bmeeVQr+R7E#$-&Y4JR[4\lUuBQ&nW,(6u5(bQOplOOq25g>Uk)Ai?mAbF-@sBVf>`-e/$N8td#(%m?Ve'f3/K`FC.gNPW)WDK.Cg+:4uYoq6W$,`Vk6.Y=HacqHbnddY"sUe)SQf6XZ`$7pe?l8oZGig-7N.[2`*/]q[]3lANKD*r]l%%+1[CQ=R";[,4`jL]XH:%o;RgDD_@:&kP&k%V9\&Z6u(ajZ%OT4qSAGk?;,U?h^A;X<r/P'Hq'=1h65&]9!t(pfkiC?qo\Nc;B@;n%kilfQrqn%ie*?AM3N@81m<=8Tk4C.*[(ANjj"uHNq@'?Fo1%R+3l6Sok@-"HQ"G$4L_n_pm4:#!$XI,9o?5l%(9)C]h-9MNC47_@%N5K:5WBR^hf^i-)"eNL"dXZ'I5HjI%Xi^3Z2s'eKk+AJE>3XI,egK=2B'oDaFDnS0PN@]TbjC>Qa6&P0mX'8$U4-I(4oKo`lSn#V%p&)o((8jOV7VshB?V&YDIqlF\WTC'SN:+uXj+#eXR(,ne6_E,R4%o=A:E=<?oJuj68*+_[4S;:iR`oQr\$)KDn'<rD[IC(I7rQR:%:U.j>aeO^EQgKmDSaG\/Q&?,tqDRs*qJ]fcIkLbp:Xt:Js3m=jZNcUq_"5b/4GtrsSmJ7#EiJQ+pVit/n[(eqcfmrH.eN*mh;d(0%kgQ_.D=]%:.@&Q[=*a0flts]/ag)f\FB:9LY!\hq2I=]&_^.43RbkTI$[l4$+2$)iTC-I['5G%qngSE*ZP;u=\ZM)sk8;N<Zcg(\%oB.KlFo&J,?1D.\pA+=2>X%@3[b83jFVYGl4^GhY30Ko.Tp[_m/1f']+GQ;p.u;$04>\QQR1VeBXZH\2ha2'tf=aHph`p;nOTeiI%[88t;^rI11Fm]r3j)ctG4:J?qEk9BjApZk6=Zp)e]n)W<H\f($*DCkTRgaJecqLaBgk!qA6,Ue0?gu0N\:\OD>N,6LjuujR1<?q!%P[M#-k],0oV=Q4kqaj>Tf&Ym\X*uGjqk@9XDJqlm7:"7^27-8Xr-!<#<%53kkV-@rG_JbjEi$e/PZ4W'\9TE$>+M7V'U<hg5AI)o%^T[M;]_4/SIE*hnWd?5?gk8^c`4N#Q<D'$+4EfYql956df\nQ\d[Q#2:++1)_pe($H,X9Kcq7a5n.Api8h(cZ.3=E+CA2@-"cO[h%cq5H&3VTmpc"5GcDm]17YZ838IRf_MjW8od)h#n4P<Y,)lQb*#KTn;XW8:C$Z&*_>cd,6?;SmCFB>;-d4imSgJ(rVd+L.GR:nK:F%b^E5=/VoIqenk#L%e]@>'b]e8/$mZek)TMYR_(`U#Lfp>DVZ%igT$L2At=qV,QcOhC&5)Rd%hE7!1Hn1W'RMe[R_"V9Gr#"S%4S`%1!MpX]d!nGj`SM"(SR-HRGI&^F[kr@1&<m>K=Tl"-63`jq^1T'n/-FS&tr+lb-%.-it"u.X*u=B\N<)&-.8$VVr&Af\d&Vsbdt))%Ao)i.Q!!8(_sc`Z&:1S%iId;21s)8NT0ntJ8B'KtJ+RTm1GjFFhh%&^^U[2?+Rm&MD*Jkoa(mtS^SXdoq[/7UK'8pFR6%hQVq_ec%*+`J`jSf)!R^I;<'.rrHI*&/1k]TM?n_-/>QF;))mLCZsYNs:9f0fF`7*fAbgU-g]X\l[eC!-QGpt/-mUUnq,q1QiWZ,FU#6Hqi2%JUC;IZ'jHTXh@m0>,CSoK<5d4jTVr5j0MA7)M>8kY@!kC6jjpeASZ3&kWTG!V)TQPX4hQ:R^R[+ZBoM^Qd(X1Jt_,16j#A7YD7DK%9I',2M]p?Pcr)Am1Y_jb0LRHg$PeU5.[]!]F+0D=%bG5R+VZJ;eVB%._o+q)[Ca!+0#(9oZ8t+C32kY5-E_hC>B3VI\54""j,W[s%<uZH""*qo>dU$U>ZK?fNe=9t\]2pp@E:'"<$d-PN:,l)`AVc]@<Zk[`>;)Ni-BTXMk8R$qH]dWN_BPFZ^:-\6>G6IM+s#rrJp$q5%l%B6DTb/O<.m<9XU7&W2AB3bLhlt\f!f:`?,?S<n'K^W@DL)2f^KX;AeJ0*C"B""Jh%5a0:+8%D,ft*DKW+C%N]17Fp2d-Z0n2u,%&KUIig92)/d#n#hA$J!F\97^4MD@^c1*AYoN(^K>h$NU],9XUT*lJI6Ys*0`?kRg$O%j)h7iOd(/^Hlh]A58^mB68UOPGa'&fkm$%1))h[nRJ'?+/uaPRp`;`Y"t#$.Q=P\VIBsu8^)ZF0<O@@87u5agQ*kU+DMO'D=_@KH:7#!Fa1A8lB=Y1&KD^,pNHsm#_?.j.Ii1<%iIjUDJODQ%9Y@Xl@"aX*@_9D.qaQ>3+hd%82G@E6q,BeA`Ic*aA5Q9!Eh<\tg-b$L.nsZOD`aW^V8sMeIg'A`6'(A/,T(/l6ZO5U%*d"<;[k2fCi%`#l31QedIcLCZ%cF%MmPE05kub:pfGVU.q"aN?pCW0:K*shEjISmcY^c1WD-/@hB*T1TY@@!f8G?u;@TP-EFLL2T%BCq5+l%fjas+`cr@J(I^i7paP@0N$CW%qaTp'AiWiqeo:Q1LI>Y2@/"#AKd_V2uQ-UpUl2c6_h7.9WofiM@pqT]1=M)o%0ROE`*`%_cWBGKf.lcG@=Rj6/V3OeF^bl])1g\Q?@+Qflr#MPDo.l7iRU78X"@FHIX2$ID0o6@JIhiQ@N;CY@.4Op%_hn)UAZ/Q671uL3+\B%i0e<KL=.$UAH/#:9Hu]V1RZl[Phm(IFI9b[OPS>V3gpu7%C19&Y`;Oe^T_AICIFe4OP%aJ^EX_U[7huaM0)Fp[+@*1*^J&*-F`^H%4l9'EV7^)?kZhJj"'E</RtEd&cRrl\Qm_njrD9aMOq$mD+uMAe/.7A91\0rCi!R:U^(K8,G#prYAE1mYZOpOuf@O[7--5%k3uj5)%AE0+s"]W142lKLVUPZ6HiR:cpmW@#tTq,LpNQ5/>0Tthk(_TVp"U8BY&SqTA&QU@a(,Xki\E=5gk$9&;N@n\B<'WL\_Q5]Q/Dr+_%TpA&I7:XVi(%Bf)_7Q2PE?uaVZ3.9"Ko5FsD%>]:6A-5^bT5rq3a\9rO4O,q:\<n`j*EO-R#R_%mF"4f]=o-$U\SN[&[JZeZjYj?%L6%R,?955ZMmRo^DI`0L\FmO6A&I;_p1T<XGXc%e`HWTXK,-@Xq)V8'cuQc.jr6VHF_#2`86S%_N`,(10=D6#NHfd3`W>4-J/rs^%'eFsWE^C>*5r9W&Z5/Om+%:OrfM34H=R#f?20)[Bkdm/f?[IbmBY;&!E\-Tp(MGbb[\dK'!atO$p@=1%@!Em)5kqR:m8UoHHAC"f%:pW!*)nEg))3XlZ787:rm2q8O%2"*]rn\4&(8EH/&\g9+9Ul<)&K#3"GC;??pn"/Lp4]2$(8j+(MEA1?Un^oMrb(`q^;o-)<_K5Y%mgT:nFC,lg(W1K,`qN?D(re@PHk0>2qEdC&+07E6s+rMKT"^<1>Xe@@:VA9t!#oG^+LFdTDn%VCF!$_#L(VWmhPKqqNbB&.PTd;^%CdZf?[d>([a1(L&JKeCJ/tpjE*Qu%k\nrq%==2mSE/@aR)eA&=]@91,)C3YP>We#05LYOIMQ%3(`oZTR@$b%?]@bRe'scdD%l?i+%2Qs0riHn)Tls0/1'tt"T,JF3&$h$=uhelX`epm?>cIr`#8u2-Zjh:UI-ugDGa-od6>9!(?j\q[?T:cN3,Mtn,^@c/-/<VjIReVCP%?]!a!rbThABEX>H\F&=(\^#P:Z#T>&%T-BQl]7,f=,NJ7a."k=K+=Ld0SURYkR>$jH9=304dC=Kk_Q\f4bkXNK+>0ja,r_ZCb72j%NfGY[cCp0ATVL1l,NmDW<m!5^K!GQ8ae=X<TOVVYN1**MSO"WDhaYe_Mp@st5;nNA3kpUDmY;9YY8fZ[Y.#pF[j0oNP-@WQj-ar&%&[XZ4$dSp,>,!sfG_h5".;Jl^Jqf#b18`3baA#Ih;b[1U`1fKqm45*=kkD5.qKfSO@7WESVO2\=[hC2:qPW:(cZp3_@%Z-;bA;8M%(gc6T1qZ&\bOOdpcos#\pa)dY/2%LOT="UGS*]:.\I'!rJ!+idQ'#L.:.a_0Etq,CB[Rkfd6D1PlWAXj/c#-@%m9058)ap4\=5dY%[t99.)Z+/n@n[i.#2]b#O=PX`3&u#b>JO"TiKE"$fa8@\PISsXAZCXNVr]+3rW*-8^(j$SL*U5eNCol^=u"&S/ak<DB=2s.k!f13%Vs!StEhtnnYW''P?hD,CP\`g/THr"/`.:/=0RD^e[slu^*XO?+/N^tj)4NNp4n@<ne+-4sTXQSoPR^&UdL-GpqW3;(ZG8eZXs*B2%If&e/"6B!c7-D<YH7#c2;q!';p;"^.Nl"03a(-#Y)cD\rXG!H7Hf,.]78Vh2c<pj0K<a17/S6\(A'4n7oc%D*n2\2POS)8/M5&2*%.LO8n%5d'#.Ag1e+L1,ed/bQEmjNiQ'(]\\CgQ!MHFGqPLM"lNNFc71!mLM\2"n^K4uuo.T1%'3`RdL")P4?,'gA4ACg5UP^-/p@%hYXa*@Q3MP)a;m^7FBFEoH<XKR.p"3_boK\*[">*T/4p1Kq=O=,G$UDLD75-P71mj$l[!:N@Vocd4[@8BMBfrk!ojQ[<'Z15f?_&%-%)TZW@u;lfH"Li)4p*QPC&N@pIRT,:65!k*Id-i:ek5m)qpnp'T_V]04V<_5<D&e%uSEeaXQBEN\AcIfq/\@A%D-.J/B!kh!0,P%"d#P!+A(9I*0l(5d#:Y/L7L%G3VCXDN?ZM,,EqMcOnmiCSWO6+Z&fikh'$EA]H0PuRi9V3N'=Y6SW5LM&S":BG8r]#&;o-qU^V,]%IueuK&o.%;1GXeHBkSa;aM;PuqdYRP0G2De4ZVt.Rp@..cYIPU\!4*<fp@K*Ibn);_=CpI4Og<;=[%[/?b_u#*)RSWHU1RkhOQ,N%7kL['M3U-EVfX,/AAm3Mm)Z9eE*'@D+Z'n]a22JU"@J%FH$(@()qN_q>rMk%Rgj/1<:k(A=M"f(0VbG(b+kcGa@Xama`[TBHH4Gp%.bA3]p0W1a1*:E'oD43`LC7B\)J_MVe1tboCB&[kR!BGlk/6^O$Vs7Id+KWeq/?FJU^ie'(S!':mX2PDhJsV3E'3D)5#igs5$[Gq%84LaW$YYkk[CL;?_g,$kB=UAS0C-tI[a?nsTmM^03$_P*_knscfr06AL$-3e`nD*Z0B5\9P'6;O<E'f3khR@9<&QeWZS6.H>juTC%Lr^7uO(U#3>d0P<FPK"*=elUi6#p9+K\2qZSg!Zno,/^.a8.V\9Ja<i*C5$JT^&#i1uoQl^l0H[)qW[%Rhdp!d@tWBG+?rhT4kkk%QIC@U[U?@9,$#]T6!2"K-hc46"gPgNE,)0S[Ldj4n3B(MI7F>DT050L&Moi/hDm,X4nB)\"7jFjmA5F1^XrUHnm_bD/KC%<>+'UB%9HtQ%,IK;s&ia;R=@VT+GVW1cJ&[V5$<Y<1OUCnnj2aap4JQPb!Z$8TC=k8frU[M$HH+R.%1D)Gqee4\Rc._+).#hZCW51J4%^u-%:bOa+<4L:u)/C^l3!VXm^jXj7\6t/Q3u'C1\8oMe\3t/-7S/="fb#rL.U7('.-4Le6nPPMFs;=M[m@mG1,=)\?/Vs.[pkOla&oYK%A?enp$JQ6X3MdT:)ejUrQC-ikiUF7Nreh.DKe:UGC6NbQ18K8AksR,^`:"\eBj*GYB71<%#?@>rqB1"%/HkMcTl#<5aBUh'fW&:Z%Sr/`^hbr-ug3>0@Y8rrfEo!-Mq0_#4_:P(kDbKJWr3ga^>M.06((-PA4h-1'XMm5qFPT.d9BVhXfiSi3B.Ksnn=/1&PGMdXN1r8a%D>Ekg5b<Fj.Q'HQdOV;/=L-\(7#"u[U0Psb#3&:!45UImY_,TV.q+],7qUCj/\4iVrqjp*ju^4RJ$L"u29g%sPS:jRI=/@ua_kiO%[*nc8jmTD^4)8m-a83I[c*4gjMon-YNlnSASt?6fb3n<EYC0Bf1@/aQ\V)?^iK]]=n$]$sQs[X-%=S%$XO<:R<C5h?X2j+rShC8S%IW3Ej=;[%prTJ8u$dElX-7*BX\ShY)U<IT"^NG$M)KhA"L:#\nk-=sXNLk"Xa4&;s4WB71Gr2c9EL193U@,;_M'a]18`&L_qsM!5%pa3PEka1q,j1Ir9W'_iraF+P(O"7-T/WtbRLFL6QEPrMu7c+##j<\h4W3C#_@[LTsT^QG:&B"-\(e@Vu]*>!#P5>.:TURAT8Fk"F%O'jVF[6E1RM9W2D#/kbll%1>UY9o4"9c'$ef5kTIaOtZ$'41#XcLGJp"m+1O3dGb=CqB-/b&M%BKmCl3B%)_rCE5L+/nj_dTZJEj%ds6NJRS2hOrGcAs"m+/9H'm!bl%6q"M6U^B"m+2&[F_Zpe'YtXP=rr>gQ!qV/h!&]beoAiRkCX^nZ;CcZg!'C7E:rn(IV.fU1ZUA%F@#:1Gd?j1flTNjFO?6!0\LP6W"K1Vl^plfF+nhVCcXd1d.hTP/35*t:gu/bl/G?PP\dq(>WT1e2U6-MTNo(dS+9%jV@,`;Rklg7%2Ou*/^02/81GX>9>u9mXn/k1ZE].3"/mY)r7>Js]$YlAk1V/@cVN]\E\TIA]Q(d2nR=5g`nigkJ>nBC&1[PFiVXorb0`[0R8G*Gm%"'/\,m)2&uWQuu,Vr'@snT(mr`#^s(rJY"tJ%tmGJtn6DhcCWkhLrW;e]#d9ld!h$pV@=iVd_SGYin5I-fQU7Dh>j!,dE_$c;f",%dlVo[TFK3]mN\XD&V0>7ZO!;B[o*W('%fkLr+D,7oT"aYe_Q7(Wa)0:>J>R$GQ1O1Bs9n+\I8/R]43o>r-R$KZ(^n:7UC-PHgY@=%C[S^G6sXmN4&%0jR_-E0-P(RKSaVeni/@"-Rs#1Lk-"_Y'-Z*E#.irWop(XUh>%kJqHn:[pKY5ZhT.KoqYGo7p@^.,Da<*9O]dp)%)0E@]7bNPm2&S-XRMe,J/p-:8!.1hf,2I307D:=uoZ.oSHU1jq#1#no]BPVnDu1ETB+nG#*N;RjZ'&MSjV)&CS"0"]'Z$KBd2Qq4%XnQWPJ,@8>6RIW^faU-\DCC/hem@E>]:feA3'4^HpQoC92jV\.61:3%3p+I=E_\4+6G'mLD]'3apa3"lmR\D=7?d)0`3CZ?T(t<>%i-Q-_)WNjn&5WPKG6.N)EAC9#[;h_)pSNeoSU9NS74A`m"%!8JF-W0Z*RR5,hXG.[pp6U4OI>)mpGh)9L"N@5#haZK<l=ts(nsO@%0c#WCh;H?6pX(`<j!HNLh_>7Y7_LYqY`.V,!-4W8<"L^+Vt\6l28_^4V<bfB0f##&i'`<FgA5,3]GutMqJNe^5/2-")t%AkiFY'8%)t(e97JImIK:$*B%<hnd4q<uV'Q@"-k[rIg_qbSWjUEo0Nk?eog^FG#iJu^m'7Ni(+(YB;M3&\EqX(kNR94eN]tGkt+1qOj--YVq%I2cC"mJW+G(4[QH?]0>*H?A<0_&2ak&XMeIH`f&o5%CNZ>Wa5?T:!+Sfj$=TIQP(m05?R-i;)b5ZO8p.\2<Nt9Ff_,(X!5j#>/G4%S;$QHKKY%oPHg==p^MsNZf0Mg%CFmnW;Nt^4VE["ZoK7eA!Q$EQ<oD*@N6C)CKu-*2iT79M<Uu[g<\b^#0V#"*^#8ck>m@nL&o=@%i`)lX"2hA?p^5^%pXq8u_S'mJbAk3%?*WAY=Ss/jS&(/_$:!_=Aj"[.ZCCF)PiGrgk!Bl'''UHJ@6(JRgFtrOU5,Q$1PgR[0jOHD%B7QWmp2/_68-gd=K8d;,eaqde>1h'd?54i']4]+Uq6T\Ck4?6>^24mSgqN+OE`JT3RjaG[#>a^/&nBf^Bm>F!VfJW*I(7J_jit%m%<TUoLD5hJuj3*4Anrgl=nCkY'958.:8m.PibP\[nVsMmVK04JQ->_Ln-QGmG>C(Oj>EcN4^.PZnBD8Xt]O]p;mU=:,Uo#0%iV@G`%)1/qHmBtMn=cSp'ot,N@C0DtT`jpsko+1:djT=:C3=`%<RS4ZU`TOIQ\>P-T\#(^;^%a7l4.3_jWRTVpUfR=B4nVfIp0DY9h7F*!%ZrFUbHWtV"ShBMN1^3JpDDgT-7jQYi;D0FQ0IkCi9DKFdOMmHRh3-tK&_AsrJ(Fa/XpO;Q$PC9(l"%#c)^gbEc&?j(W#0a5A;ja:%<hiT_H=f\LZ@>Eh?Q=$#<B*R(^jU(JaXqL2RlZ2j,nH#EH7!aoD64/hP(J-Gk"`u]E]WNm!A/b$>)]R`EO4*im*Uce:CNN$jOIm=%DniBcR(K`Xa<H57SpadpPD$8%VjdeUdu#=uGa<R[HYGt9d\>4ogbdu2=/Gf%3Np%ENBG6T8$<3m:5f@o5'^_5hKe%kT5GGACkW06%re>Zb0ha5bQ:.6-o_d?,#KDJDO-R_iAGoWI1Wtnn&B2fECrJAe2A&;1_i@oP1q=HE:`O,sLjsu@hI/@/A"_"T*$\P-K22],c1=<>%>st2?cpU-qgcNhHkfH3K3>LSPkL>2=VqqCHdb'Cef28H9ofj\<P7#qqD@:::TUdR_XhOVuEAO$<PfOW!F3['rG$EJ<W%k#d%oM;T%oj]6Kb-Rj6U0gi/9',]J.H4@!Ti2!h?[>.;8[lo3+cF(d\1_,3,8H=5hJ>;*P<J5s,9cB>b;4smqQ*p3-F#`bQNJtQDqp+?X=%:5%F>,f'NI"M&1.2mcg`/S?<=YN&fLnSN%\P0f+#jW^@c]W,Huc;>^plCTI;`L(6SZrIH@`]%@V5_]blJ5:V`/K/?sIs]op,'R!9<2A%`Y]pjA-']p!UR/h(7bW=6)a&0b'ti^fq[b&4ST.6jm/thIBp<@?-:df,`;+sb""S<c9H\*TC9LiJ*9eEOSb0\Hn!qqZZ*fhb3(u^%m@UqRcdRgNA!c`i7S7[^A4=G^R%""e6Oe4BhdC(a%=>:Nm%SfEoc*aD.,V^ed@1sLA3IuIf.W;pg!TOCm>g@GW*&fjofX7//GK!0%hs*-cIcUjG&-4eJ6f%&E'X3L"rHu)ANFC:Td&hc7A9&-n>;87(CTr0aU2T]Dq>O!4YMX$bQ>uBdMpAoO[>a'N^ZbXmnTLl)^Xk,V%IcY8;qK_G$-Y"K"PD?[":F,?3F`^LNfHBqb7CQf0<n`qhh<D%j1$8:Ah<Pm5gVqtPh="[bq"O<<SF[eJX5?bJnI=:8"lI?ZM?O><%_KSMQ=:K5Q?[luSNdL`!do4<rr93nO7;jZ;D_b3[\C[oSPb)+X,25OiWTeW1?hCIL_&5Umhs2(!%ee(<)c(c-m465CpCM_QhnZZB%Ej&hl(_Cp6h[oPY"^kKsfD:-WlPGPWc[C2Gn+DUQeLtBkDm6m0>1B['fT2$N?GG].r=\?\bV8s$^B([h`g10fhs)$0O7g-:DmX1?%m_+'hmc,8b?GG].r<BlpDclW$ho@\B]ma9=raYqZ1K+Lmf.UemD4hPb@bp>d4eTgX>*%WK^Z\o#qM\b@-c8I2l6kCm4OUol".e.&%oY#^fF@>#4f'rG(%5OCfGotr-ameq'^JX`1Z$ZF9VR,NA)S/jYjEpjbS=Mk?]meB#>2D?OL;2=n."+dJ[/tZZU$hT3*k%9'_kZ,T%(HlU/>NN*`q?9GAk"`tume)JuXrQt<^KA)Q8&!TY-SY2JlGmZXnQnH:Y^s:[8Z0goFK]%n6>WCR?oR5]IaKZ(P/Ki$f?[*VIr]Sn%(rgd'?hE>ET@8@#hs2),Wuj@2BCpQL(eMOMZ"-RVn?Z#5!M.,FB]hX$GVA%r@_0#@d;u$+L4ug>ZAnUlpETqg0)G3sa@+6\Xf]#W%T1_O0>1K^`(OOFcKj^/#;9e*[I-;H+mW[B%Xn.ZAh9'VMrpF_ta^'DLU^6$[V5=aRG-]8,,F*VhCDhHqA%.CB<e#'a0'6a^^G@[8%5F]ghqdFsEkBGBIh,gU;qY%QVjXgFtV@S]9:<fE7RlfBK)R%FPq)Z-SD5YVV/`V-Jo]ou"H?N\%I@Sn!c(E24g=t+W5%><,9UqaC%-.6-nop+iTD1/k_o47lsgD^Uf0QhNJ4u9%]DHZ55]:GM:n&OL[dCcY7iMOS^SSK&)B:#Uar8U7=HiLXH?dWLEPk*tnVG_kih,Unb%l-jhQfpuu(S1A,'S]OCfV.76p*V37GoD-qli`0%:G:-MHgRh`_F5MYok1n):<F8OFl146@PFI%bBn;a9C[lS!q]pZ`eb!*q@t-F.%=BHQ!h<oBsX\Yc;3W5>Ibg_Y#05o1gVAehAC6rYZGlO>9=&W,?-/E.STrHq'Q>m3-eIEKW-S^l>T:`$HWEL%QNgnmU^#_$l`7f2s%bcK7gAC=OOpKJiN(*n_o.p_p%hNhs/q"i4O_q+([F]bS;Cui/X],S:UFh-j6IN=cX2Y9Kb[`7$%rUTeKOj7lLW>C6NnqWnb(MM*o%o3XC$1Yt63/FTLjR&g./F2*pr]=N<W03qn&_`,O%EBO\$]*i.G^Ll?0n]4;DF_>,9_Gce\O`P,XL4*!5n_>j^M;:E]m5^^2M]C#;%$iO=9^ct[LG1T2J$X*1,3EIhI#7a)4XiqRtd_Fnsm@>8?@HQT!O_0:7A`Q@!\&'62b7F=0?ho=Cq8&h3it$2$K3$r:W^W0oD/K8;%I_k!5%(hmT@>,4.j9P-CPs<@Lq[M*CW=9$BKIM%jZ)lu7s%k"/K\Y.4#3%llWc[(6B-jH*3M\0eoXI-iGeCB(FT6QF\te<a/1uN5%_P<a$MY>DB;:.lKIU6gN'[8Xdr>b&Pe?*;ZZ5MA@2`nMY:b;inR9"WTPf:&oRuZnff,c_dKb(53ZrqT"*GMmcG!,__,:,CGkj-`H%j(a8@1cIDJSst[bd9\4&X`^n[<6/E?00^7:m(HI!4Q!Z#hS@Z"n)b\7:RSgX/b=;eakGi](FkI)jOPXn!VH7Bq[;0h.S,E&h["Bt%9E6D+1?;YNic5W\6fL>",MtCtokio1DR>2VPo]csT5q]Y#f4+Z72E0,5qQF[.!V<8;Gdf_1\_R!SY%4c.T;%$g*C#?NDoG#._&Sn%&)Ib-.^pbfj[EOk.)UMHB*WP&\m6lL.P&t@mu<`nnk.%!e!%/NFaZTsZ/fEKZTOoJYK0o#]upG1TQb\*Eu**=mEQBD7!JB2a"S3N%c'L+IJf<tKHb3U396\Z?<n=I6r8+h:kmJ<?n\MTY>B4@7J@Ad03,6a)Xu6f62`(+b*)0gXDjHXSH'#N-?T1)79UE.eL5pP@e#/5l%qJ2[)f]MiO1;9rKD!lB(Gac"R17RZq?GCqollk>bM<gX"4NiT^7Kt5!,:RNGc_YpJ.fQN#"'jcdHB6pm;ui6'YoISial3M'[iVk0%^Ta:#/XRjZ9[YiU\l.Hb6IY;;hCS#=rD=Aq`\VgbaNL\D^XRs(\j]1sgVAgN7T65+=fq)P'_>lHUqI#22L4)U;VYPl.]C^Vb-gr*%1_-eDXjoGOhr-\8?YK%*?iq`#%Mq_0>HK1W57c.sICYn>(S8D42<ri&:*n[dh,D)FE3LJ2m\BK>+un'`bFoLfgg$q'X]4HPekOE(%AiJXX1UWm@&'</Ab2H65iUUt9[@!FD:!K;(9Z,>ce7)`kK9'b^iS]#DQ"d]D;@BJe),Q5aTu;'NK)F9d4ES7.]R\FYq1j``bHTT3%UJuLkI;LfiEmG\k1T*2-oAr3C`LT)+2h1N_4+W?fSE7om,=8io8%Q7h?VMZn`i-96=e9N+qQ><+RbR5!o$bJLAH(e@ANtZN1o?.K%-_40UH$*!q1I\./DA5BGX1+9PFO5oK8*f"t:>D:6MJptGaX+VsHpN_+55Ei"4`U\CNAeXuB)"lDTLH()4@@CNTZ9)51r.ZX$&(u`%b#+BuZ*ARr]^_(SQ]%a:4FjAMc1gWk27%JBF_e0VEuW<s+&BlBl#XK+[b>t_+`nlJ4l9!LK1,]7lIah0dp/kbk)(/DK&T-W?uu(3%*gBNNP-/[M^%CC6roqF#WV3mu2*6._g-5L82h(>.Hu\?HZVrL-eP/)n15_^FnXao\<R,-7mJQ]L/KH9WjS?^T]tSST"u0o.dja2$%HQ^=j-4du)L[k.sL2Sl)c[$SNf9b*djhA:rZe1b8+qKC&h!!P;j@X1GVmR%QF<?7]Hg&:T)k?(oC*Bp74RLqd6>FnNHq^>7REmp7%Y)SWlG[#aYlTisaB1+tWZ2738[=0Z:+2uK0ekk[>m]GoAT=X3bd^+)g&_krnp+Tn`O6kWR\NQ&`a(6&$%;q)JI`Yj:gj:F)]C04Y%7Ln>o3O?mXEYA/oeeZlgOH,=cemg[^'IaLHM\"["j-Y>o6-CsqfI6)q62U+uN%O<\fL6B'<],r4D9`PmF"#?t]i^q=NMp?chiEfL%#4X3S0IJ3m`*eV.N8PK[Ror0I6arQ&r'F'0aM4;dQAb)#k&,XA\MSrYH//]^E-je(GWTgqQeDs'7qV_]EN8e<3Bl0<[C]A,c\L4W%fpstOb3mbn[ICC^\\7q<^:'+oDe>"&V)GYD\)j)$@u#?kn?H(u4?LASZ,;4Ia\HRLoCaDYIX0IMY.<pQ`-ppgrn0Kk03'JXg!X_[%ie*i"-+-%Mq+uSI5sll,FiVCBgmY.<:`T"H%kW<b?[06(_$'%1qLoTR6[E@t&=$R9`GB_Z$H:+_h$8(4H2$V]?4;H:o`c"VUSgM+%jM3L)5KA*c@eJQpo\:^<H<]q-*$/)9EMYhT?>Q9*BtN!+NE/4%AM!@=FNo[7i8]L,rTc[.&kCL,a0`#q%Il7I]g#uD8'!ilJ"[#7%lL.36"%]6bpF>s"cWt-rX/Gql%An^G;$]@@,M%o`>e0iO00L9s\>]#'2UKLe-L*!+&+Ru2Q,W.ul9VlP;9*ad^QIibn)_%'M_+.2%0$hm?V7\Y@/1qYbX-W=;oIo_T!:UWZE(:qOqV5rCraiI*'5;6f<@D[4br"jH=aR"Zh6m)?f)OS*V-hP<p;-G;o`4>&&(@!<9uchd%-&mC0#!)?EHEja=e0AQ0#-E?"DlS%hgtGs16=*+\_2RFR-!!["&jkQBOTG@2_,WU[*of(ZB[&A/No/td)-8"FOEh;WDMTAR6-"T0%NR4pQo,>H+%:EL0)HVTP"e!u(`^TT^h8oK6]\?6PM[RL&%Arb-;tIK))l`YE;,/]*<HmEb9PWPHcNDDL*Q#D01/.*VV)$A8%P4QC%TH'sX[CGPZLrmDO:As^]%ZOf84PLnkga(>.Su3EKL8</T9(Y51ecT$X*-S,=j;<.no+XKLUXkKr$QRJ8#0&;`9goOkIG[';Tr7kN%G^ATLZ%4_Q7cIj]r:lQk6Un9,6]$;3%Q7_iZl_+hL.l?*HarmV7]TfY?T5.XOJM5<r7[iSQ(X6Hfa$9hc=^_sT;fFrgeL?*$(PAu%[&uq&$`B.f\jMEZeX9UMn6nQ2U4"!*k$WWJn)6(;YO9]6cX<Bg'&>H,E/:cJ3d72\^\IC;F-M?mQ(Lt<g[YE6O-:nVj(TIcc]@`N%?[hjOc^"+pb+BO%NP?W!oAr_^omuM+Wr-C[gq1)Di#c]Yh!B8MbWjeMdL=5^f^QE(Tmul.)]gq"gh$)<2EY4*q.CWf2u?EeI"O8g%Yl0'WiGl3A*g2#[iGl3A%/e`rSd+oEom,Ho.Bs,Lm%E?bpL2CVF=i9d6,oZlC.j$CbFS7mdPlMKC\7'hA36]/+#gr\<iWI@piTcC%$MU>HHWQpheI(ImL4"msL/._M^BY1dF4u]7pZ;0?MF".Y[9\Uk$qm_ZI.PbML$)2Q3dSK%Vh:nlB%`53hmjCKc3OcGLkK;j2ntIq%^ZD@2/b?Yi6e]AX](Pj$J0#i6UsR91*//i9beqG-YmIek1I)#5na/gD&tc^oX18R<$hOGf]fU+hgO0^k%#K[@C:_UGVk0B,Qq]6c%0+NQ[$$^FL^$KE5[**TlR4FEeo^0nm438s:Am_E1n(#R6Ym!5d]j</BA.nc66)?"S8u$Gdc0PdElf:eJC4tC44]YaM$"62fKTKM3%4Yn5u3?\Nuk"@b?(LN:l6r<6?E=pt6&YN<nJ+&E-&:E)'/VFHsLd9iWR@U/uW2q(d7'P2"]:ioG.Ci%H$3:W_lVQEpbj9<]Cd2GX%r`o6jJCoeSSgS[g)Gsu@k_fd6qc.2jGWe(ndt8Ot?O>9:qh]DBf0a?gOtIpm0bE8_V2U"2,r>l756?5CLY!S<]>V)_8;#Q`+.NOL%/SR[Tae@?0VbdVc23q>q2SeWhLSTKGrY^.,rQ:+o<7+m+,h<dNXK7a3efAJZZZmLYlfCqkA??is_p$8L.AM^"&[PRiRDcs>a>EZh%#d"MRcLn$;#.-Q[0phU/OS!Q1`L[fJM0KmJL![sJ3AAW![bl^hl_Umm4F?%r`\kEj1.(f$o(aW1p#a(l/uFXtE0Z:=q*;tE;2".8%>WpES3]<MIBB"5$Tjtba,TRh]%9^`+A0Xdg!bic<k,0CmO.;XfhOdU_[*GE__48jC8Nh*!8^%LCN(\f<8"PXtqk@ed[?>5l5`Zo4%)KVWCNcnYk[jC^gF2R^mGfWn^;p3R^)8BjINJ?Uf0$fcPWE4Op@OXCZ9pQ$-el!=@hq.AUP%OMU+qhQ3'9R>1-QLhq9>CG)6"].8%gm`h0I%0q_&b#EUrOF`m;;q3mrOHiC'Q4d\?'a$JU[XM<#<?.-c-D+MR!tDC-')*iV+4GGfNM]\4HMAUeol)nJNgL>SnAR]fg]N/%Ebfem5\8Vc'c*SM;U&E-=]"9Aj<!`/7N:"UT3n+/":)ffX4us<0RPi'BqT,bNYA$khWJ=uiFILuhd35I-/*qY#>LB=oX_O>K<LIY%Sk2ddf6<n(:/q)0aTY-ApQ)INij;Ch#aR;/N;+.tBS1@TMcIs%D_1KOJ^_kip3eQCr;*j/gtPDkM0q9ligp9,E@0&0QJ!mo897D@%j#Pe"jj\+8h;bKgf#+W]Sj3+CqCLH'O!/l;>X^]nZS&Y@ho?1lGl"?p,sF75-B%1Jcf)P])Q4BH$8>Aib-??T.tmf]+TpV$IL_3[%Kp00<n4i*'%"b4\r,&."[hRlOCDk'?Rq$/\[gN-^,lto#,s6\L<gRmb[--H#'K(WK5:01M[,g>9qH:D:i+=#hQBfXmH"f@go.3&i%Q7sRJ#VY0S[5IP!.k9)I1IiS=#P<"W"iK[3Q%.9DEX2%;^l/8.:<LnL2haZ23:CD#jjLuA,?biXe_6l_2+D,^qb<7qb>0#8Qmrc]%309P@7?IO8L6Mj"J=??F4O$I"IuaSQ)s<'AoLHEEeWVA0Al(Fm2#G2Gbf1iu'a#h*Mi?tb-DK+PD<aTQ:V-/S_9ELuH[FPXpBqfZ%5]/UGP<Z#dI,NjD-hr7iXs<CgZQYH2U);g(ZTcbbHS`eZS?iJ=McGmAN-r]E#+GDh+&RTbj/>@h>8OUUZCLZaH(7;udN@?UE%$KE%lB<B<4@`=#[uM0hRUcXo'$0$VJWJ+V]p>lCa%ACi@jc>q^\(e-W;ZPkfgm_@Q4ph,NiHDBWm,Rr<]dM`[p*[_rdNH;h;hHhQTm"e%lo8U^p=cV!P5%?to@]Gl0LuF;-g]mr3^!9?L^toJ\Q`FqPGbIHigXtpk2.bPdC31s*[M/dk1@=J8A<Hfa6*\D$co4-J!\G',H-u5%<":bK'a)chP%J9DXmb#0`TM9j^=&:HCgV:rhqI?gI\Cno]<UOBesu,mX),=lCL!1ZpU<cb[X<.&?Ho[fip!r))5Z>[&,CHp:FajN%,`WeYlQpLR9MH7m*6E7gY[,llECb7BTEjd\*pMJ+A/j\,SGtenq"KIEfE<An=NMS%&Botf5!"<CFs!&jg@UnSU>WX'0Rj?'OsAJ`%a%&.1JA^OBcP65$Tp#!caH6MDGC&]8ljJ-:o6Cobi.3#@8T;!h"S9iPOji[o-N3OGaa0-Lh*`1/fI2[jUM'6JZg4-kc5$b[2J-^e%`LZ:/MB1u$Xn#"JPJ`sfdj.qsRu/@0clf=>b7QasJ^0q'>iaN<'tKZH7=EkHae3Qr.darV*jmkL7mh.d;UO1,We"$oVYrP],f_gY%d:)8%FcO35Ff2H^O/g_+0A=YHrYdkmTrLau2a!u0-ZT^9o>+4k"Uj3gXJ7Mm^NI+=_n%u(6&s>*VdabOZb4^fW[cgp7GUj#B$n)F%b.^lp_%Nq.\%hg\TLX:LoU+IXnm#dDftL^]3%.!5Ug<daX3_NGk\AEj3roCXOCCjDr4k"t$Y!^^\u?RDX3I9[NEg\13:E<U$9Qt=%[>p;b_!*uF_<SVa\:D%^0[0q7;\DG#.YEL*E-:H=J]cnZ$LX#]$rdEA;omDE@"HIn@>[%+1?arJ3TBEd3R]',H]I%<n1DD#QBs=J%U6)#*$ZMHH2*?D#A/#ED,p.a7_UNm'>&'RMDfg98$puBhf%.=_;Iadn\('&u.$qnbP\m6T@HMqCY-3oX*5UehhhF_J5M<'sVBnP^%h(LGHe&uqbCA?ciS>8Hr4N&p53$_.)&"P'gX#T^S:L0%:ktKI.PGU.++hG*Q:X*(n`!R<^-p?K'/ejB>/G%+F7Tnl+/$9i*'e[)e%)mmU"[)++Bb7$':,u"Hc91$.(lRtp;Gib1sTl=4aA1O4,)Hd4$CI1ESr"o]JDFtPYHJtbN0D!F(gOh0Rb"LikY/o[5XE5f;;9QY@%=\4KqKf22]+q\AJ`Km,>;9["U!Cob5.-:c?L]@Qed25Gk3&VNW&nR/)B!S2;On6tN2\lkBL(ZkQHjG+6QPjpb'HRAbR3:8(&rUP]%$Ze\H#I,.Z@8mcDYRlCo<K"I0@pq)+70j>X!dlEP68h;K7.#b3n10cb#&=$tCa]D=7K<Kig/8h4M$Vj<cklh";A`JJ@V`1*P?;]t%PalLPbK$u#q-3Gubf*G@+KgBXjVC<"9J0")Q;h#-U=;"97mTIU+;4"8,5p1kU.*24a[EBgWn5@,TfNt@icBEq)R`N/Y9"D?$&\GF%WI%HTUO!qt60aTMWJI>n>cE*-L`Y5F7<V(Yd%oSHOWMYbBnL[O\OXZWCc!9hk`FKn\bpk^*qjJWc&uLd(`ntaQWE>.l_rC-UXSP4%7I=g$\q&+H@S9B*SI[hh,U5<trF,i#GWE\(F!bPh*AdK+68J8r#8Z<kF9Vc*I*']i:5te6W_]au4QC\t(aD7_]^l`69W7Cg6KpcZ%bn!t5P7Lf%\5;uEX*`9p#[F:s^A919F2^5!;`c*!@+G`,_X:4ho4&<mo4-1@M6B&_b3-f_[?_MIJ1Ft\3`O23hR9g&c$2ckCXncl%1rk#":Pufl<7']i7340ZOo,[lbL4p,WrQ6sTG@gse^s15%%q9@DspYKMJIL/:D/gF\X'Ld\7!Ug0c$Fd\+D:=oh8'KiV7\9QmF>q%-l7h>O`u!3-9EaL(X$Z2mD:j,gCMh;]"iQ;Q=BH8G@K_"=f@[Qq5o+&j*RsFjE8E.<NuG&/6tTTh'%t#E8m!O^XXtoqX+%FOdmOj%b#Ftr2soE("=?8k7!lN$!0"Bi]X_!gWpc/3IC6!1;i:H4F3V,[<h@K^?EX:d%h.^h<l)uN<N7/fGsnaWZ5`Xf#CNCs/$sX!GDAun%4QM<`:MUaN>tok&!gA'`<qnH5K2,'GIcp[Z*#6a@b/O4qC]<u(I\ubC\8fLAoUt/)5F&ETN8k&kd.:1EN'+N^<("u-'h><bi<7]X%o2?=e0qP$VH@@=pqstJ#S,`4d@N!_.UT.+d7TEb99Vg,CE`VN*[\/0HZrqbUD!Y7&Y-epXP5M5Ns5;@LPH*aj2:FrX9RuQG,\D&L%UmamCUVQ+CQZ%)+T<I(sAu!fR41PKel\#.oSRQUg8]j5jZHL?m7#gbj8u"lo=He,!'L!h-A01]!rL_"]qG0[(-'T\Nmjk).;UFI=%d>qT*jUVFk-`JT;KB1j@P,uO$V[:m/Z\DsO8R8[/Y-$?umt@B<=joYVE7hmTR@9GlD,j"Yr[ruV"7Y\*h@`&OZI=JiFW;X*A8TN/%V!THb7%&o\;mN9sRE>J"YNne]dnC.3UUjLWYtYA,ZFZkL#c"7W=j>C]Ui+gf9lU/D\lm3E:N]=V.^l>ZbZ2!,DHf]g5qp?5E]TrF%cjV:9.#:+r+Jt`Q<)gQ),@p"\J2nsnX(Y)B7T:Tp*YI<h*Pch&9\DI95Vk6YGuiI#`0_eS2f%0.mbpOXg+Ih[n=^e(W(uIWZ)b^1%1*=)k2,-Cpj$PcTXCeIf,J$1U8;ua:P+JYB1*aBhA1cE\#U;Z/r`?Jd,B8u^,YetiE]0,o^601471(#&JPS:*4&k+A[S^;.0sHCH%=<]o@WPOsY6tD1$A7KB$g5*N4BV'L[fT^A,hgnnH.9!O,XeN8Te?!C->D)ZMUbSN'%(7h,N3'(Y"K%hA/JH#QbOU7H%b\F<'c@h'%9EeXbC2$gFFgVdJ<3;bB'e9]II":7eZsLlZL"-9-"(D0Uk'k]&$e`.0PNlG3[&91s1rU(]eZt;D+ZfmaDAsFcl_[=.J1N/FRK/_O%;'D;6Z=JL<[K34d8Qk8*%n&/!(\/W$!Sb[D,tpj;NiL7p;%CZoPUPT-<=@[DKHo=g2(<N8!3]KNO>`J())J>'VC&&mZArDHhT?C*%WaX!p)+YIQ9JloCX9fI"T;1@#ig!)uj<QI"F/!r<ptMp4-mOWuH<X@R'qO'0Xgt<Z@EYlt<G4*P1tO'KC0H?`#uQgRA!j,:`Q"\k%.d"h''\``J>Vcp.+r)h$UEV]8\m-*cVe.Zd.7m(s%\cuJ)nBqG?Xf$^?89?Pl?E\>[c,;`;!.k=mAUSpO6XkEfi_<@cQp(^`1sFS%7O>h]E>e<#,Y<$F\@`^4]Li#1#>I7'!G8>s_kPFU[k+_^,+,FrZDlP-Z4olQcu2Qu]U"F_Y3Hpg(>;qmZ#&)kAI.=%^mNCT9[#%U%IDU4g:!CHWg!g92Do,=Ve.(`LTt4C_EBK!@,!3&XL?]n.Z9<r"qJ",0AP;+rWEgee[8i6DgFBC&Z;jX7ZW0aZD\@Q;EEe^#0O$t"%7FOB-MP;6:o%9t#&1P1l_d'!5VQ>N.1>S_(!l2?Y+Kk8D$b$ILQ"2qG+D,#5BP)pL2.<IB1n<QO9-JlM1+$[,h.s$`5H9JgJ@MaU%\:@-H.`$oH"=>HA;4eDrTSa%\:sKuUVs1.f@T-jSWY?`Kpm&ljjlgq9(66aTL)-&,+V*M::co)ZEJ.8`AW^VE4RnXDh4NegVZ]Zr%0eP;Q)?uu*ehPB(<2(pu@\RI#&D&Xn6aBRrT*.3:WR?f1dBIOT0ZUOSaO8Il5]ub$WbW*!\=2hnLh:&\8,?bj;$O\1B+7f]__fD2%E@FQ28.TXK.)`t6QWfegTs4]F%n/G\k%L3D90&G5hK)skP9ECr2,P7^*etVj91mm+9sbW>I/kr1K=GsVYuUXhDJ<'u%JlNnO^8(u%KiBT;4>>e,+qt_SWSUOa9AQ.S&HM+aM#"QL6\L%:Y*4kT$/WTpJAuf/ODWq-;!VdAF][Kd$OI,/j($f5/qrPMif`F\%+7cm<2;NS%gRp:.MAhURDC@OpAKp@d4hM=R$ll<M0dq\^8u$eg/]HfZof8ZMBPaXuU^Y[rlrO`,Gtfam'6AsJaJ#?6<(HOH<)<kk*ej,b7h>bm%qP[lQ<Z%RcU`2YuWiS5bPCSlk[nL$tAY#*@*?-3X[AYHsD9&I=\I(fd?n,/3>LuFODJKa0+,lADLrjun=9ZLEQ%SRBNL2J=TO-Zu%h@GSn>R8h"8^-'/juA)cbRWW'N`$G(;A@='ZQbds.WYRT\h)iRIC'Dk?=1KMIkNL\QpB.K+pUCJM_>4l1^"EGnLt,l7,'G4W=2H8%\;#qH"a6Q(T#s`ofl1Jb9]V+J9dZ>s,j$?h'`l@n`Ph)+KZU3&''FB.7e&DX%o_O:/5/@uUTRU^H:5QIH[8Bh1%Fa4FKIf`6Xcbm%#)HaB;C=%`38Y^q3dcL8"U2P"&NL,c=F;:UAhf,":.-Q;AiZ=A/`l9#N6',@Wo4DG&57.e%o!Pu4!hHu7,gsn;&O=H>Y_pq8XbSd%/oaWFD\[cVGt/Uj8Krk_OUX0Me4Uu-CJ25>&G/C./-$YkpDC!/+MZn!P/.3Q"TDA'AH:gtJ>h0pBW,W9Q#Qnh.&(<#;,&T=@Z=M@%J/$bHUbYQn13$[Cd3u*jPU]U><n(W]/s<m,YuVA)\0;EX!oTHUN"ih3el[?b.OK%.2fB:X].n*o4JC=50[6jJ]tbJ-7C#sme1j[#%^G$\:.qp.l9\5C`eH=cIb$e98,tufD7!7:4,atZo8T[lmPdoc)$8C'i4f(uUkc-.CJf)>T]_*EgZ7QSa-uQ6t&)eKPYp[Ad&3)!h%-siMk:/2Oj3N$+s(N8V2isIO$/HuC,/9oC$79hBPOZb?J%1FLabgAja/E'RD//*kj$l!r9@u,$V"K'm$*X%:Q\jFhiW(f"b7Nja/%?lT]kiqH]A`;V*@F&=(g6@Mf<#t4GQ'\)7(f/O1Q'Y#h^j>]2[MG+^3!Q6fPifb?`ZY4KMC(ckcVb/cc.+?6>HR4IcaWq5f>S&Zj%Xs'&r\u2bm'Wgp<*]c2FN1s46^4tWM3fE!lra*Kg9^8oW$Y\&R_?[S9kU[)J$&1oT[LKRa!(/msYqjS$'r([r[T=RPGs)5VEB"7Y%9/l*/!;>U.)k'08B[gW-L)&8E!sII:^ee<T.E=,!JK67l747dcf5d:,D2[=-9G\L3nK98k_['(j8BiU"OO(@T.F\VK%Q9aK.#q#r%Cs+\X8gXu[nY"=GA0RHJ-8^%r0gsJB7mIDL/=%oRg6Z5i34Y+?CR/iG=Ik8fTp'O7L8iP!m[L(G7AFVY4U[+9nu._F)6@fqAl96W%XJ+m](P2j)5*<-W$Y*(+?Z3J-Q&T78%`Qg)-5oUV"%X8'@DXUc7O,L@b+bR@nt'==fT_[goU69_MD/7b7:jh+9^G*&VAY+T@Cf&&%;'YZj#+i??8o.@T%C$RDFp`k1VeooMo,#e>&.+T"[Qt3W(!I)nQ:nhtWXO\Ya/"h2F9n6M=,sUAa0+eIM.."R>-;*;$(-^+%7`3.%":Z);%&TF2CDbf7j*49GV-KQ$d;>.,'o2!,SNpI%K.2Tqik%mBbu(FXGG-(>.M,:6OS;G$Q9mW*l9dd,LkE^h<mpH(l,XE`47^MA%-kJMLM_*):_\uYI<=H.\UnRcYTl]HL3eB!,<MbBrJ/GjJ9j`5iXP4LE(2=1M/C`b2M;V0k`'QjX2Y4nX2rUr;\F,`a<6!5;Q6Jhf%#\$o=mB+T%>o/2,MDUeT?ZW4N7.;P@L]di-DR6u>+\P*9Q+*EU2i5<.GbccQ@?Dmgl)l1(?Xo&+UIe;n`#Y.UG[_m?`3H/8-4Ea&%3QdL.'&s\G+uY"/7<P=g&c2m7Gi-IhB2PJ_:W/^#m1i-X$c*N<>lp^U>aUpW^"'[7$.C%+,ms?(W2<6JLIgc'0Id3cM$o3m-]+$c%`J)SCQeKF5HG5N8%Pa14=`4A/BfiW:l7eK7b6A@BN=ALJ`Bo&cGUsVU-XH=GX9@Jtb@0183@8XK]KTamJgb5HJoGIbJidkU3XXPW%a-=_[&9u9+9\=b[6>*8Q'P?!dCpH+'GH%T92MXiI8MDUqNer[Nf-^lg;oL$-l'<7,gN;4]jX88_dJF\^C1+%B(j/h:=Tm,Ge$D)o%$#p[4A.c@)Fh0tD-%NqB9:[b6H\$p>L8[c_O<BCJR37ueU0paK.t[#ojXk$-RNj%DnlHg7]n-IA*[_#YN%@?)<rqi)/;I(7E(jM/%]KSoQS16.27Q><#J()La6b`(^)UjPf:iT![0sQCla]M\k9IF4f7trb'S.SO39Sc:61\"i^:fqNsQbrH-(_-<BAs836_(]D]L?j7F%!2P_OSA<4#NrY8d&a9R($jcpM,)fts:tif%m,Poobu)o3).;&]]fe`ufO2Z"5kN<LD^SqdGXsbM:FBO!`6Sa>K-874:#V6d4<-.>%ILC<`3M&M>K%RYK801T^0U!,'k"Q"+k&Eh<_Cl:kR.hAL;[4tcj.-0J1rGIL#6@(Ejo%K6M)nDToEL-XB%X32a!;gaY"SYE"@01<%JI)8W%?lpQ9Lr'C7)^a6Q<M5]DS-49T<K@:XNPU[8LKHoBCiaf+!CnF"39H0J.P57QI@QVn\cq5K_*Gsba/Z1bhn<SKNApg1#FQ2%BDu3+-TV:@),Hj`#Df5"H\;CYW/>dc&lcr<p'?5@.@):S?39-6=:QQBi/!bj6u>8ZJgMgc5rWSGT%<K:D6W&Z/RWUGKs@g).gPFT%dU[Df:E7u!Y%U(6],l%$ORO5m?"F:ST#8(KE_P7nH$tjdEh^(S1:im]Eo+=6>-P<8b@OMRBfL.o#<SAKa(qfCL5\a],QnZOP6Y51%+E8_nP^SRHMhkF]$'LLjUs4bY%H;:`@BIrkB!(9Ff?n,E"cSlr>H7qV5`4/sJIpS#XVF,Yf8qo3GT`Mp%c^1-0lb+hoh!`PWT#hU%.Hblqq3.o1aBH#eGY>RcgZV'[R9<P;IF\b3<:Xk>"V\bE=AqI1p*:Ii!^jof`+tR4a_B`ikB-<=n[G)0ZJg5r=>*(H`F6#=[[:/`%6T.tG%^lKkDTES,9.1MbEY3+T!/oGK#I^@pSp3uFkggN"_+%$s%=t322&&/eMI<;J@gfpi#9Xf:bDA\2%Yc)hTaQ#nBkW%-/4r2J%j&0\4LL\]_>aN,.&9nY<N&k5\US[H,HVt3sa9"GFm&IrU69H!=@!Dn_<`+VdZ5nWY<6G=@PTeuFaBK>]lUS2QJaoZAU1kNk9lh"(%9BGGL0`l#D>VZ_r$j6Y<nrf//`S;pa[gRe/'\cR+Yh<\.Rk00<0cYc^[S't+aMnhu`3^e-G)bq9-;,Kl3'\CE+bNX#ITF6`Q6-)\%g+hX0EVSq4)B0`,4tK6B+W^\<VS#g7?pdE<d"i#GF<_'_F2mS#FRqMI&1O;tg6G=)ehnI^8K&_[6fkG>$C@ng]pjkF0H=36V^olL%L+2$l\M6)MWN;SR&>:_s2EfU,L*,/\.S#<CakWLV3:'b"=^AibKhr4k>0fj0.XfQ>M,\SLL8oL=&U@*Y*4[s@2W%AfL@p/Q[8*5X%+i)\'kmT:e(oHR;CUgV1=<;4m?8#M(C:I@ihYAL"LB(#.?!oadC</aO)8`rd!FoPg^r.E#;4iXl"Ap`8i,hm"&\N*.Eab<6+rM:#%R(?q+iBh:DiSF:e\67GUN&2Nej&dLo!sE6LLp/PZE"VW_,XHI6R'\m$]KuIt`a]h\$&`(#9XQu-%@?MeBDnd0LlFg([rlDNS*6%J%"@Z=2llnfAMfKXB!<a_b-A_Ld/0Us$&Vm$L74!OM&\B0QA(mMPRb/uU0qic2I3T3J+B'=q+Fn0N7N)=PYp[Ad&/ZTD-XN8f9hjt#%U,(nRo60Z5So:F`Jf.e@<%t[39p:dJ"1]1O*br3.cfR'7dEQB1(Lb%sG%>ZZ+Imcgj6"K=EHAO72W%(oEC8c>1L&qq$%"POHDi6%%OEa#WA$A.(Wm"iiM)e/3fI`.A3'^qIJ11F;%@7[19TgYKM2@]8c!/-DDSf_V-er$:+09+V!>lP3)Z_([VtSdolj!0B2%YFZJu5Ot%5pX/nN2o+^`(bm9-eT$.MH^srS6I3#:U4'OLQNHM?HNm"Kd\:he+?Xq1rto:)R(r&B9S('D@Vf=P@.>o$kX9hX%\\Q-+4F`M0#\n%<q3Vh1surgY%!>4?u\[TENt29pq3[b7Z_"47iHBP6qe*VWlq,ZU`pr-D])%="k58cDnj=#%B@U[jjF#1!274ahh;%a]F`B_.KG->%W2;ZBFk%X$S$`2:@!J#pV\Iqh!..CIXJs'/-Cl>9>s-I6R'"hs(M#@R+EVf`$p@uu!C9E6TFmd3?W/emf*$!m7hDcGGRk*KcDZ32%F9s#"K`kd?Y"'rM3=l1aYs5E$%7]Q1FUTBZ+dpiSO@qRkaK`DB'"/;IDU<1GTI/J:YIGJg]BF(NSrZ/sKETX7#`XQiNOWZPUq8ZF%dj"H`^Oj%C;cbE51k8WjmLj1o9+c._nE*GE_l]_*=f5C"Q7DP8!7<C9dg6%KYuh]jf=t9AMGuHIfhd9N%l%AfScg;'$(+td6>AbU%!"d%'V3s_LT;0l"#^d6b&?[epmKp+$R]7(F&Xf;#Ub8!SaXD^VEl!Wjb^f),0jN;f(>Xe*dkn;A'pYV932?_jG0"tR+_7ATYY":&%K<S_E0J%ER-OL!s(guBsR].]ibEUeU]8I\3n\C.EdUa"hKsm9j<.>$AV:2dQ&a]]hD.pEa"$*@f3ns[i'4(jm[!NCdnNI4Oh9oT>%&@WF8aQ:U4]Jc,CoTDac8NN&'2MVRp,S1[j8&U,"C6Knl)).12VcmgH:TJaC7Z?/HV,.:W[glP+dbYVr+6\/&ZCq^r6AFbCQ=*/5%<@Jd%?Q;L<9_Uecs!tpQKaCF&>8uSp$!S-40oHg#;kk/aEQ8&BP\*M$"(?9d`K8Iis.h-![k_W+Q>u09I>b,mfJ;,"+u(I]W!G@0%/gans,YUrJP;oJ02i>B7\>@>DBZs#U9:F;M!RkmIdWbl[UMiU:'>e?\2)]I@(m^C*idjXZ;j\o5NR&Ei/ktZ"0:&Q2Oe+s$ZUDX%%YZEpjU0DXeSW3Y0-If#_VXCQ^-W<2A<P%\pgq--!TCOAGW"_3</h(,!,Yq/MQTD$LC)Lseq2H/5O_I"S7D;T@4@T^=c^'P+`<<d2%1KkJ-BSOQ@SZF%XO!"Nao*iQ;T;1B-_(1_.Lf;5dNDn*'Og?Acefm\0U5VO(pEVRBP,7U6aq;iqFcXM1/10@eRj(Ja]Lae,!02oZ%Lt="GP#K?<c0=@Bibu=+Vmj.gd;2mi_k*OXTdCS[#!1D+ru=Ym(*GU<HXK.2)&GdZD$*qs_X3'\^V0AFn]NSlcH22<<SpDd1)OO)%abX=Y,W>V?-$I53;<Po>%%6i5Z-O#-Nu*Wn@LPs%E7e4CkA!>rj!/FYlFck[>W07.,XG1jbF);sZKV6[&j,.1Z'S?1SC[m:paTp'%0Z;7(@\<&VeIRLZjI!<7.2TWDkENHBputa<f:?q(RFguP-Tt77Pg3s&IJK]5`EI_9d^-7TN#(&I:O6BLjd/rR7kGFe+XK=Kg**+P%@;dO5XB?(bp2^S2WZ1"#3jAKZX-$ihZ>H<4Sl31X]mi?V,'P(K><D9HSlR[Ul`d*H7npV7T`X+kd<V;KGXhm\[\D;9T']ajU)f%a%f"as\789Z*U:np"6'UWR+C*H0oZgJ'1P2q\XUCdC<\tq>rlpFfhe"Z?MNIJ#s/qmC,9a%-#u_Ua:!P)(0/:qT16+HP4t*U%k:/Ci%`DeDJ\]12YQ8K_<1a(WBjI&U?+h]0h)NZ^q@ZLW]N]Uj1.V^_M(@?gu$`ZlT#3D^EUOStH+)DpO1a)ZLUg_8Jl_V/;r+h.dNr,h<%e*T]k?,Dg2<fs`1)G@_bMO`^%[?&JrfY)*WqN=K\LVRfGclE2"V9tYocfoZ/k;#6V-=J\BnNM-F?Y4(CXRh"rbTFs<U!hoe,oL`t%>gf-]'1VFr#jcjU*a)m5Sa.tJoP'&5eC`7r:ehVXa=I);&ooBFa&HBI+r==!/W$OWAGgVNI7RZL0#TXG`Pltfj4#Hre@9(^3top*%ErcLd:%bee_e/ulj,hiFGde^b=mn5YA9`GmI#KHiZ'@H%,)4sd,co>F^"#JPZc,4F$B'PG[W0W-B:<4%\6#Q^Ojq!r.1a'<kE@ci%R-?FfbFNMmQ.N:a]-0u-R.`7pI<ddD`EI`$&$`Ec*u!:.G=,`=Km%CYl<b-ErRT\>\,/'B72b,+5TjOCZbRD#6S?u;=rUl;bn*Or%6JuA$"#17A$c*Al_0<@o#Yh-r=/jf?8fXtH]cs-jM5k$/,G"CYY^c57A$VM_Re2bJC/<=2#b=SQk.aKPg\d!/.3dXu(VGuRb%l$H%VY6PG:/r2MV>PK6IW4<EYPe7MTa>pNT[SJ*ln0?mC(G@>0J]C7ONWBI4/I^o\V6ngoRgh%;:E3V7]P5n4>?$8K5BAQ8q&H*Yh*lO%O^u`a1<ceZjHjF.&ac.bCmJdo:L.,DA#.A`Tf"!F7aLJY?Em5:;h_;KC+o>Wi.uM/A&<m(;7g5)Oi-=[YnJt(R7N^*pj;s7#:@]>%N1PDtX'Y@^jA`'kC&YfZoWpR.:,U'17V4Fa2_UdJJZg]=]_cT]OaNf-.ija&VWaBpgYtqLFR7G?>\d)EUilk!>=A[JfA*o>aJ4K^%W\PiZMu<O:$b**eB0'r'Y?3TJNjdaX@NK'YBgClVJ9AsWlSW9ef?7^A(X11Y?b#i(cs+&W4MK<P''&I*C;,mfrb<@VT:ue5VPk=q%T1b;HLWK9&lQe5Y//&@N0p^_T;BZp$T4%#WJ2E2c8[ca>jl'0E4ZB4HpuO:Xk[?.M3Jb*Q6?Fff&Q"7XhIig9>7OH.WL.blQ940-%OJ`<<1eq&pUo>4uQ1BTQpDe5qGYQ2SU?s:&1.UHOm(VlH[L^LG^qK+2T9]-'PU,pSJV=iA*(jt5F^93bL^Uo_lDnf&f/*qM)qkOr%B%*&/DanOV'q"B\UF+`*7shKQ&#*mP*e`j>5'lD(rmepD.V5(G4gc%N.[t'LO'Z([YsA\rTo5.K7oIqOV@;s_S4V::ihV]Igif-7%5[K3t,W5P>pA>Guk:0iJ]?hBVd&5--0BkY8FDQr6P0GNh9+*-ehMc]g*OF"3e79NbBJ6gQ6'^ifK5qbrmp?^Z/m7@8WUX2,a'g&%%ZK9qUHNP]^=/H>XCfg>?"HrVJ0]do<jIGf7&jMp:kIOT`7ck]*=+Q'??`1[p(,2Wd"L>3H\)6Mcdud"q));q1BSal$j=)pL[Z!sN%XS[S%glImt5,,`PU*.TH/I4:Do\P;;+qLfXX=OJRCmJ.IB@"N/^oD[h<+)?i@pOl*3g)rj@4JKfP7+J$QR#UG14aS:?!q#p/He!1%`<CEX:7F'l[dBK1l6(VP]Emjk`gV[u5027bJPA]#[UMGf]d=O)D_DEY;rqKNPe/>is$C**Oh44$=N9Ch/?fCd24(PT\$*k?,ZJ2I%aj!\X4HMC0'.-t?RZ(1m?LTbL19LlDBk5NZ9*b-Vf+IHB`ItE9eA#21Y7Bh>hdcGLYqI0J^KSgQ*7W_KOP3aB#:'4t&lTi$eo$/t%>OnJ#Gm$s5.AFr^Ttm85N?/06\-#.TN6e,N<oh?.UYbj<4!SH4:,OnS"<k2IS=JZQSVV#i3DP7ni2?#=\J\Ld=e(%V=t$T=QE)N+%HV!fk<i5-lh4p2rP5:M!jau+FSFZ@d5Fj96\eFMlniD)?9Ljg0eeFh\')XOqR`4Q_QsT$*0IUn'g[*?6I/Q;mT]!P2d8')2<l,6<%V'OYL'(]e!hKgP;3oub]ZrFHC[TgT[3S7s,D.l<b=',"QgbP!CR]9>X>0da.]-JAXV(RaY*lslTUtOPcSJND;T7pr[X8:Kql.#>,%433^NIF4PsAA(u;`(')7\^X"6*HdS%75K&U/r[%*DL*aRD]&Q`JSO\rB-9nugH]^f,IOISDW*>ngM0Z1*=Pim3S`+25m%X32@8>?%GfYit5ffa:j[.%H28f"cJEb&$3rIJ\\X@iQ#,9st?-s0N(Pm_Z8^teLFDFEg24Ba(:0XEF8A?0'lSGN>&9=cc:<@rqeg1FL50I41%F@TasYg?OEE4KLK0ptC)/g:;)#'6`*iM-h$k-6(so$/\`IM1rk)kVZIFgo<NAI$W$jV:Nojmn;u1$*FBSBHrW*\>j;qm=kEn)b6[%]&u_>)[j?'_<,0GnlB@i44L=qP0!N6XD>nT;tP%gDEUqc8EsErPQOsK1W`ioXE9nih]qP8plM!JB3WF:0=l;EpL@fZ/8MmsYS;Uc%pYeC`*@#o@61(PGdIp6=P.Ic_m_;Xo\joE\q+`Pu;IN1>l]s6tc8Ud!r#1N\)RhjO,W3j(/0V('2D#N4df_V`gmN%MNX>$=nmFqU%4lqkbQ^I"o3Ql&GWRapl*P:p5f+?qdX]&IjIF"hj`^mk1`"e3S]M<Icnmj@VR>D?%?!1Dg@_E;r-@XHT_@c0h"9hXLB0j%b@e@sb%'nsWCB4W]"PeEO/&tgUlL%-rll[DmVRCod28HYG9Pub$-=laEG7U?[.0&1W=I6_+oc%S%T`Ins<qP,@S$u<LRHoh>A4;%/mFS(uk%Ys:.,V+oHupjbD;P<N_:_2.eOI%2SuZ(Tji0R=PPMP\dlpKgH*pNoWr2nR9"XVJJ$jYUBbR[p\i8\Icao"]$]5$;r`R8/sPr/N&Q%3\%=CQdZsK*6PLUhmg<URB^rgCfY^eD]-/5-RQ"f5FeFZp_R&Kp!'u$L19VD[&]m%W*nJp/V0f3KcjKb))6!\>K47e?La>r<UB[J%qTr&*,;iELkXh*R(>XgcUH9R_@s@o.Y>rb0mr!/!jQD@7"?l"oH#/kQQ]l4ikQ9')gta,hl@VY$KY'gAcenP$.@BV?OP^eo`Q[^n%PN5hW=V=n*n/ZBq_YKWn<G!@C9j#;a49le$@'$*[?.W'(-eiu+ZF($>N#k^7o:IXZdM'Rsc9u??_)[2%':QY<L95Kag/toXWt%,j%nd*>adRFnUAVZ:E&2q?hpt\l4I)fa$n@,PIm4f:WLtm3r\)M+T_)Ae2Rtb2;!Q9r"]NsF%&D^=kU*lF`h%D!YR[E5hkJ_eP3D#m_%K?'oOS<=m$;sQG_aD`ojNZD4/mF+&G)Bt\dN()'hlo0;AjS,hJ'q$PH1+,BsD'B)H9OS*Xh8Q4Q,t7%Yq=3jf&E`OYW,kI^XZu`9%XF%=K\j=C6OqPDD-WJuM88lQ8lhf(j+o*)HU<[M)aERO$q'&FRaZN9#k?J@KBdVjk&$hjIETZ0d'K$F30Vb1pG^BsWAg:>%fC7_Q%P'P!a&tBQ7>AL)*b"`Ph)/7r2&Pr&IZWk0(g$D3Ma!,Gs]Sjic[hMVNbkcj_a!jrRXqgLLU?8dd7T[m\O;7_q2D$aZ;B=H`1/V%&%8U)1(o.#J0mr!tOR8l+AQ2>m%!EFWJ7^;=,&Cs\lU4^!Gc(uu3129.%%C2@@^Hb7C(;#$k`hbpT"U%fl\n-[njboCb3BA!MM=(?(%Hb9YX\pnEHL0n?HdbFT^#7/r\M^\@R7;@uDA/\BR!EitD'r+udFM`;OK$3opclfMeQurH9hhs;K7j_3?[hI4\Jb,dmKMpJN)^\-t%[)FNZ;/g[K(4ie;-b!=sF]l`_a/.VH[:D\Yo&ErkJpYgPWn7(taG1sfq%;)LIJ[Qb@4UL=F^?-W')M4kJ81:m_q'%,JFRe.OLj(a%]HNq,kiFSdNE[Tjb9Yqh.`gKL$jT-BoB*amq7F7L3pHBE!g2q>[<j'e=fP!t+.rThL6C5uA7fJKP?Yb2_?;!(:>#q."uRQ"2g;`a%'93OaMEsrd<3e)@.Z::\M0ACi2!.tM@N)0N>W)d12cOL9\dEe^f+5,<\>e;mq(HW]2h*O?n0==F2[dj%+L>9j136]<.DZCSP#m20%dCI,$:h:/XcV%;RVAqW.C'sd^0rEZ49hZ^F7V7\Vf'QbXjjA_**K[FqHt7f3Ga4^ugs+I6`j%/bWfL"FWM1P-5U\#<0HH=T)duX]%i?G;GgFKOYTN)r!5i`e`llWh"A-r`;7b3WKgWFSqVIf-^WM5h)%<pOIlQAu?E8FlamSs.Dd8WW&M+EuR0L]BGA8OpY^.n(4EHa+H%kc5>@K5D)q(,TbI#h,iqGE0cLD<j<dB$B<Mj$=#64a9^QOU"egaN]&C\bP$Bm27@FZukX1.22Kj\'.Rb[Ch\tnt[:<-eIA9/s;`=%dNP1>6QU,1>*jT7E(jjQ_&F5sFNNZ,!LC=@+aoeTZbs/s4N1Y/I#p3b(V+Q'EnQ:jOS3/9[[QJ*9fAZc0p&@K+5R!J)`ctg?!9*P%YB2%XKFh7$_LGR[GY/dU0>&cAH]2?J2>QTo<#iMtcUU3TioCn_`l[[:D*7Ut)CIbQ0NJgAinP>W`jtP*D0G@%;kK)+Au`MP1iqUX%_\.lNOR[eb<Z)8'./#[`1enY6?X],_(_:"kdIKCj^7Fm/HiKlPH:Fgqs2)'#WeuR"4p,;:4JtBoK?N*[\LeNjH7%$E>F,[$OBlg#%klt'spHf.+]6,.BcY+YE"Q//uS6^1bBSNp89h"*KDD!d>*G6^U.^8SO7Gd8OiO"I##q1N2>PESodcEEGo"DQ<ebqG>C-OLTjAc^!%R6<*4fK6(C(n,F\4_oR3/jMia_WV,@E'[u/H>fguD1thu4(-)I1*>T.nV%[N,llosZh*HpTrFMJM35KEW.rS63NB@MI,7-N&:X4^%=$Q0TO]YIE/s:\?E[Cbag[UDN3ch]ls5WZ[KK<4hB$P[/1H@\<H=1VQFLCF;<`e2D%t[6LU9T"92*l@k[pG*<4M!DP\9i(r>HMtU%k4&d$;Li:onGWnJ.PfWOdOSL2k#!qdk\TU3Qs*LE?Sd"1VA`5/X*me,-45an6LdrJY2n@V]+.*Y%/J7l2A`J#2<<_`]99eq_e`A+%+l@lY;f6I,lc0*QDDLp`%iBf$Q9Pfa3<DgA`U\D=MQbV%#8rHf2Y7mB$:k-3EqSeU&PP(b"2\\W&aR=.&g%i[bm/d&kPkGi:h(io%W_[d?d87D+8OsN#r2IfRVRZ5m-JV.Ha5*6&F`[siOG*MeOROA3c_p;E:%+Sq^U(iS(mgS8<cCWEj#(s>s5iCS"dD#=Y`I;%a`\qP%c7rs_eJ)i*jt\`PW8P/t*i&9eG5eRXqummoGo$^Q6n]Cs)L55\)TrTNd8sUePNQIBLdZZ-I<-9^,`UGPhsgDZ+@jHe_c+$K(oB/R%#B,9E7<<]`82O-S<<fpi5rYt1[rYAme#?1)W@BLi*;(7\M6)SIKZ[TGG*K'rc*Y\t:9c%C?]KF#]dDp([?oNZ1^1(Bl9$-NW9&fl%)q/VHG)@Hfc]IinY'`>)G%-CVH98kfpARX3[P>X1?<Wb\7_hGu5*=iG&!pE:S`TGV(LFX]UfiXlYr,="?Cg3)QoG3]4:]S'b:7Ps%o@?5rSKsP3-ei4g4-qcj8"e2%&NXBF%ZShnKL+_^YR^AiBtE^1,U_?/e2bR>"]eR+adUDc1noT^7X0m7le&a;LqeU4k]/Q$k?mE>%V4$Hon$m.lUJ>?]+^o.EgH0S%pIGo/8F!Wn-='K48YA#/jOB#A@90C.f(4EL2S_3AZ?e..=4RQr8,$ehXh\LjBELA;EmIF^!NAj!%H,mT:B9"j83+rEuRuQJGMV$fJK+i.XiLR<F6MddGV&e#n8`oCsAJUk[IM("`qO/eh[\k9rJi](km[-dnW@,X#g.F,1"GL5$d33ng%[4J%JSOJg/Q?qiOCZ_(IbAs-t$>[I=6ko@DEG)9l3V8AAc2jsp\7Eiq:)[!GD^.BajE9NM7/\c17&O;%MMX&rIlLsQ2fl-#7\?)T%qCrGAN4e7P/!/8!a*c<^9eI75>a?EUb!f"G2A&VMW^=9<2Vq"r)0D0FI6:T[l\giW4c]b$laN:k)"p%68J1F"fAWg9Q4j4VRUEGK%Rg7pmXVV9a\#/4^&istmSlnBMd<gI/A+1a5/a\p,GQOXRL)cV0&#'S$fF/373Zja6G-B"6_V5I'EM?^HS8afZmp;1*#CDIV=\AKd%d[`>]j0F@-dG/:d.QC/SDt6#oPANSMRmG="X!X3ED.Q`d7DWr<3X4\gkZgO90-R&#2G2h,5<p7#23QWK&E^&5D4P-\aG8BpI3+!G%H>G,73P)>[c2"<[Ur&ToZK"?@J/R#iJ9a7G7%Z3cGY0R(5dM`1Gb_-q;a`?_m[e-lC)IA)*B>IH@bu=0aOt(*,p!sn_.]T(&&pV=%Gu*h*ph)D,lsKQ&DqNZY!In@tTA'G,q`)QEQ&;crnqXZ(WS;=W\R;lZ>JR1>ed]Mo>l7XT^[61XTsG?P-*Msm:sW@2f^>'J6??R0%I1@ZPXV^&QNCuGKXPmWPRLiR3rc7P=AZ`cqJ2`YP1SG+fZ.e;]-$803E,J)4%$AG>kJN'P$7DXsE_Tg[*P&kdGu92DMp67Y%EQ4U%R.A$BE].'9R?pBAE89Z;;0a1oYQ^i;h"ti$$P;($@6c*oF>%&bW>F%Ek^c/O@2djKMb+hCgmdMrLuL\4j+]F%[GLS'eC8H`XgZ`N%fn8?ITaHF4pqNK7/IBs"j/Rp*[MsYH\J24*Vhu<7Yg2C&BuI)Q6.F>2?P%+r3GTX6-<O!Y-u1KB;i(jQ)r35$YG:i$'A.C]4O#U\%7;N$7;`3nnA!:o.Du!=_hERtk=Tl[$R.S7:Y.<].dL='&Lc9$rQ9L*eQ^m1nNqRRSgOr(?X`EWZN#7<j1\($^>QVUH,c=D$9=*+7%'(<M,HD,,A;CY]=H1IoUSs%@ch.j>*WpCpp'5g)'?,Dg2<fs`1>0FQ8RY'QhGDs]1fO]tks2FWIKAFb!mdgrHQ<)HSAX5Ct<msJ)%(1H1NSKsIO&fL5")s6/A27X!=HV%&).Ml`qga,/(2=s5E9>sb#]c'`[,/3Jk2?sckFV(DD!>FFHjR+<fR:%lUUTD/Q:*hB7Sl-!^%\@djY7g$T=kDRP:jGH06a3o>m0nZnuR@NFXNquhCfe&m50jOnN^+8:9hC8iZYbn]+)*oEX7WaH\FY+!fI&^j+Qf<W7LVOCBXQK6G%QIn5$(+9&8'B'/Vc6Z.E?kk\_XL68CUFFi4FN9KU%U?FQpg796T*8`UOXJ.Ij#mp(AX^4IJUJpaj-YTh1UY/+9h=QZ?nq,PVN;7&%02%C('lmoNLFE#/-@oHK__b!ESN^$Y>1:nigi@a7n!jS^laOhEf:^o\gqSLk(TaLlPdQkRBiG8fNUf1ekP-&fO_9M_iapb-Obr9L%:IUNtN=:.qZ"o/@+(r4O>/.kENZcBh]3pG`,N`Xr4f#^ENiJ74"%Zu_%$-9=^LL_]+O;rO^Dm%*U>sc83M3^RgEJ4LOF9b9"VWP_%5PJouf[Fc4jpi`jHnZm/VBLS+Fl9Ym[gn)]HYVs[lkqTI91_i=($X=^Hh3Efd3Xp"Ul%1^YSY/Yo,Kd>;*d6jeO/MM<V'C,WQM/<%+RKdGht1aeEH?oR<H@8Fb;k&-ILo%S@`heQ1u'Pa0u"$!P3V(5-I(%WDI#]F>cX6^Yq%cM8QEsBA[[+^pJ/s+c*#^=pCU=a2pX3J%+MoL_3JgY[#W'r:WDk!m&RHT$1,amb>uLoKL/gL7Zdk@l@l+W5[,uTb>Co)7XcCn;e(PFl0R*4+)MRI*a]fn82a_[@D;KW=`h;FR%<+7o/$NlB>[**]>fb1LU+ha78$ZB;tfg[aI<HL2rH,fqM9F:<V+O=jr0^S*0M*J0)cOCNWI@(Y]9#XkIq,21KI(mLt3!UfJ(6JS1%f5Kr3BRs=J\XXY00WVih)IWkLF5J8H';V%-5r$oFW?rR(CMk7N0(0V\9`sjApR\)m*i.S<-?lX:3BA<U=WfuZADmU#4UW_FU+GdV%#^7P:cS9'afAqmrp+e^hWo1Eb*olfPH6:$<Sf6cUJeJ9D-igW2ZmHA8!4l4;?;!]&6t/KBglSIe#sE78N#]NSlrqO`XU/UVQCGK3%AQ0.6GSnaGMa@'hnegjNW'kZR6BnchJ>gRV#',&+=PuSMlp9!h&FZ0"c3(8kq;fdHDAlBgF!Ee:-'-fYi<^$s>k)iZJmgZ%@H^p-%3BY-^pJ:)O&>"u*K)>@lmWg@6cVG&g8@-sC$@Jk#i.6eR+Mm!O9XMGVP<Nn:af*\LP3d;&[!V8):2i.APd4,9W6#)FEdJR&&6)fr%5nNHTlCMM2"L#obAaO&H)HFUpUHHQXFn@j%.(E#K8&*>4Ns"n)l-TQH%XUm#cZG40E+oS'of6HI"[crt.X]WK8>m3`Ei_[@Uuqb9%IGjPm>Y7<aU)o43aK8TeJWlo"#=3G3hD9esqd,2eaP0=G1l?n@7^W]H3FGu-F9\eD'i@c,]oBha&n[-9abcOk$V]-d?85cFd;Rd(%fiCAiS"(8_5!R).]1Ds-`\0(7No/-2&:=GQDl/oWe!(Q1qb:>rgpcQ8iXXTd9(&R!JTFnq$Y:G8fR]H@7np]^[J#c`E2m0:39@;b%]RNL1\aM@IR=@)/1,!H]c[<,Vm@*:b%DiQF]ed`4i70fVXKfuC,:Q`4AB1pe%c0^BYNmM+S>mR=B@S<IrNAeage6s2kFPqFbWq1P%4*I#^;eo8_&C#p/E2$U2(tGd1np$U8ErTj<1*::2A<,<tS9etA,kL1'eHngR<AEZee`0?o`Y'e]UgU]p*CH"1lr06(mtTZs3#`b/%ob5mufCJ)PXS>!)7UN"OX0m>sjh%cD*f%d;Tl@.u!7.b*K#QKc6Orq[W9$Co[3Yc)Y#qgV1K*>bdd6M[qEeMg8Y6MemG2f:27n5p%&kZrhXV1W'^le+1ohLY9nr6Q0?B(Dt$(K[*:Mip>hV=dZOjlV9S-rYeF3<61r,es/lV=u"bfepmFSY>Wn(hTBY@6Bp7B8se)(o#f%[`%CiN`o\&D1*c:n&Apur&aT*Z"M[!%VDi@aF0K+R_H(p*PQbC*p82E2_NnPm-6JS4+))uqGs@8F26r#bY9$ER4C3%GN>-uMCAqG%*bUYFQ<7iH3PV,"+-Y<=qpaG[>Em41Okm^*ATog!rQ=g\^/aOuPPRI&Hp]Eohpa!F]2j?/\cXk8@X$;t>^&uHb<mDgi4r$pU*c)=%BJ6/<W%qKc_G/m^GG,c,E>k[t\Jd>n$T>J,IbLI;I(;PR,H60Q3>]=TkENHBputa<f:?q$R$YYdkjV;M_;1tP"5UBMZd^#"Be$`a%egJ,BE`FCEGNuSG-<sE/$"1+U@N%(k0F-D\n'Sbo$9]]_Y3(51B/M.opM4ZlS?tSH3HBak7oK($;\jU@c6R<[Z-l0`IQQ(D-EeZg%EnD"CM+pW'Ciq'K1@-T&h=;::M"tp4N'-MK=I3[Mp"Qlbg+=T#Ob6Zm:!uhBeF&(AlrR;&W9?`bW"4</L'l\G[@DYVM40Bg+gr`l%Mg^I?H'LSjb'#s*crUF6[=,da%![Q?RQj&bAR"U8LTcXc"8"\FPo5a5APpTtAY9#6c%N8/8LQ3P$l0%I\X+400Vgb>ZL83gk],Q<%Hci"iYQTWW%$K"QEg.`0I(,*EprP3VLo5A[R;5OkP9o&MI^33Nr+&(H[?@-jLg9ce7i<\-*g"<;[bVO0?86,-S9)$7$u,;,h%!3u%]!lEpPYi*Yj<qiECWd3)i[BHY0ScVeb(.^)Hq=ZU2jp!eT9RU[n6BgY0-kndTS[7iT,=pH/kok!%AZ9p:JrcE?:RS(i?n5>cYV&n%9i!CIXiZc*[hQq:Z<U",A>j,)e.rkRAi?d/6`+^gH]7b=G#.N\W)D].q!j2s+7:kTE[1[s+1iNio&8t3CAH>r>Pd3;?!jJgX0m>o%4iV$F\3?J=@ue)M$:rPM7`hGe,Y(c'N\N%8&mr3,M`Gk;O\JB1gloiAesIVYXm`59NjcDs,r-XS`gCkZC1sEkr(KbrViuG(890]d%;X/p-26!YABMTXP7Zi#0'$1IMN]H7XpM-3ehH46_P@Vm\WdR!98*tq5$l*Z5W$KENA+#%[ZUbAa^+,;#do1:H25W')[iq;Kk`Q&r%"EJV>1$tdfK:DP9jOU?mr(AjiZhnXt'AYA(>jWM0,0;X,8uWIReYK@JUHNa5-*#JZj`IEXhD`KF"(%%0a]hENFIJ`[:3RVAF6l)3%NldapD._su@rE5PVYY"X])&O<n"8,(l5[tc_441R"3hG>PLR6FGp]Rb/#Kq(]g<tG#p*_Q`60[*pdJ+)Tg=a]ER8O-*^'mj@.'jj%8mP8m-?W9.mAW1j85aq=+uph'0ups(?B);4)bYR#P)S'h[?&AoW-rWBAW7fRVO2YkK8S>rSuOo.c(,S*h-=80%=t<m-VV.NopFf/%CE]<9P=`#VD/u5ge$O[OR#Y'k*SS;V<C^iid7Q6Pe'!T.TAD5R]^oHd1WZ%XCik9!fhSmbaQoM4SCU^YBgqsAe'Mqb**E,F@%dqs%S9h0L_XuT,FdEg\&Z.VM`D35RiYrA0ZP]Lk8!-AMD@<1U#\F7[QT'HA=PoL_X(ll/?=P04@<_L;VnQqj@4$#Tne_XZ&i9%7HL8"q%X?;81H0g2=PLl`W;)%P9<D4aI\*k"shQ9]C42[FuR'lZ7':t9bdd&iIW+0F7Pj[qpDO&KnGB%8&3`:As4DmN^U*K6"M7FG6+Nd)i%]d52TGW[iB#t2\Ye[#5$8P@<i4Nu$V5NK.`B.O2YLKnYC".SkGT"5o"@Q^S]jn^fb`26sL>skt]rGFq]/Q]l$C0F\Dor&\W&`lr0%LOsRG:3fj'f4[[:-%r60AR(huZ1MrX((bPsgbM^Mh/a_5Xi'Cj%lsd0p#--&S0W.>HP(W98t-JgKS5IT6@@sfo$5///di-V1<UL)%Oi_gq4/=@;FS:YGl@BJ9E'fV^VZEm&_A2oGJ6a))?2N2sC$mTOG078UKQDWB?C&jP)I,0JXKN?#WQiVCq/^&n0qWA89S%l2bEsi$%;3RNn]WkQeK-FMpK5+V2UMmCkRt!;\;BK_T8NjIOHg8p7P/Q7I8.NH4AWV,mlYm&R98SX'O7Cpqp>L6:Zk"eJ]IKt/2-'bL^rAuT%IbMH+Qnp[%*HV"qaqVqED9'fuT'ER,0NsBg12*uTeB,-62\2ggbN<,*V:5[<.T/e(d@>H&'2@c]FfNpZ1f5oQX@<#)eMrK"Xi*c.%aP#r[V]e(@m5)fPUHCbOoQ'<a[Y6rKjj.cOnU4LC^.Q@GC\`itpfU=4?8+EB*HNUpZSdQO@!'p#8Vt:IcirQg_<CN>NnBI29TbGN%K.5@r0ppPA,;GRof0!'"'@e9_QkJ98U8<%:jih-)YGP4_K2"5&V`$K3mbC3o\pP1INf9JN9/5U\f<c_XQo:;@ksVYp%&S^T\@djY%#M1ZD:78r.s)Q?>Y\_oHK@*gpg=3@$*aNkQo3SEJ(J(fM=@H-.*UB#(bA6C*),-Oc3A[$8eN>XTdbQJCQOg*/#,?f.Q%7+DC/?SN%d>[pB'/Ae>9a!OubZ;]qo3RV:aP.(T)G)IMJgnr.)R!ZER8XrN@\WYY'R&j1`,<6#o6,RUm/<.E?Cer9,FEO0AtD"j@s4<12U>fQ%k/L(RLMo^N+<r8r;63:a*j)D3Ah\)*V9E=>Pf[nVhVsEhG-C#O?rWDjPkn`c:%n!^C//'FM'dB>-Ft383A[%3c3(7a7:n5jDWT)M%9%8aB?qRqibNnA?E!p<<@.)R4KB@cFH"rAn1mcIV)\_'j^*+2AN1:h\Yo^HlZmHI'BWgOR?qODiggE`uZeSnOW1G#'St!"uidHe)%e3eR>UOLudN'.Ca"?SAZH8*<Mj9O/&S3c"<E7%3[OWI21p<e+*ZPO:m``j6;,K7MBp.C%q:<<&.Y-j;`CCHiLX,"1ldroGO<OD'-%VbBh\FRLBo/=.BNGh!*_H?QN5!,)"I+O&IhM3dX/(&0b,47H2"J?<VPJJ>B*i$21XdjQ?%nhc<'_<n%R_ZAhtWF:B[2h?)Jc4Rd2%T\gX,SC+DYq<,S4HHJbZP4&IOfC6t`[4RZgV:LgCFI\r55\/fd:e-0lFdI*6ifc;hn44Q)'jGV-XmSc"rP#'AgoqccTg0LlftF;F%`5LnL@W2bO_0&/$65mjq\u3bF55clD%+4`L'ot'4S;'1Yn3-H`235`e3+<YuG3GjB@D,P:.'ots8i!I&dY"[[)QNaJ',q$0e['mN%cAWlYGbhi*9ZMQS&-V19h;j1aNRL+):t6HUFA(,FgO>I$2[j5#7^6)Vo7jchUjln1U(+W"F&$"%L\Y6lBD&Z$Tl#&^Mt0.%9C;;_%%Cp[g;Mq[BI1U<HEq>W<+Ng]E,f6gqN%GR[YjdFo0j'D09Rqmd&DM=t8-G>oB3b:hM,_Y*`eXn__DrhbK#l<b(_P^tMMOg"1a7MS%>iUj##`]FiP>b!TY]9=W&J4"d0DPj)#IL?U9/GqC&.$9DE,fQf6r4!t^Aa:i,,d><j4g:P@b5!b&UA;';%Z;Ip6/%*QjE[4djud!%2RIjUfOH+]8AL)%5B)[8W;%&?!DFSHnsB]+%nRR"-pgtPE^s(3-X62lAW2N)&o+*p]k[TD<9jYH#96<T&ZM"L+kTcf=9XjJ4Yha(%%:#$.FYeV#a":REIMkk2?m""mAQm>7$$P(6Yn5]`BP9ScTR,8@F75SB.5p06`RkIIZuhHe2SrHa$B@[EBm^&]03(9Yp9Q%<20+(4%P3j52!NkmTM9N6.gG&W:Q9Vie`:m\gpaR"cXlW4G&`_%0bTtcTY_Yf"N,/r.B@+KtUi^2]f$Ln(1R#n8^*9,9,HrHUn;'7kS!d;5%,+BJ)K$VH"M]"h,fuB5D$.0:CC!*5eL?&>k-tUd3;3SsMjRt.1+c*Gf#H-=-kZ`X$Q^QE74L2s^,E8MW[ZMRTniCY1,:&kqh"&C3%6lHmXd0OD%=Z[j?!Milh/W4FQ0OgY'*WfQ,C=e%HM1-s3j\V?p)Ni09RiCASc63hik#a)h+WMH,\oVP@+ZVq78m+,?e7:iQ\NL=;%#c]HR+XhO[\sK($Jb3-.o?!KV3L-!D'g+Flo=1<cpM#Qh'BaTm1Ppl@/B:<RSoU7`V`j,s4)=^)+d$ku7iV43oS<XBV&m+-k-@E6%fR3GG#8`5U."_V"g%&<9,VkR\P)MFf0$-kq9=oC"kl_MTLf,"L&2dV?6>k+Y)hKPtIrMt>LqY1Vo9a5T`Zo7Mo?g)9DB%7`,-U&#%0h*AO"H>>/RHO)G5!(oB+jFGVD=Et]d17i=)6mL0A9&D"NC[NUc%Ug3;(fm][S(q*kf>3s,i0Z1P*gp$a!)=?CDPe=1hd4`ODR7)%/J-68VR8CA]WK+CUF=c3<6(*5%bkF/5Q^(PZqqd3l>#QD&q@:d9iZaWU.GR[ldg2oRhL286e?;8b3aIV5.&h7)Tmo4UL1:RiFCB=%alR%kFZ@:D"m!6X(o$Pf$t[r,#-`)H9d2Qn;hq#@4HHgiWI[73k__;<B6%"#@pL-f5^+*7Zh#=n9+qnAb`MS#.Is$r>8&pe)*!(9%j!s2RAcHYPJ#&J9B&#/noT<1r!&g)qQ^W%L5/rUC3]1`,(GHh+O#j$hU(go;eXZt]k<u!7O#AApl<I7(KrO#Qcf&3-[KbhQOp3aO%XkZg"f9La)r..^XM/MJHTgg&)-oe,:f0!WPaQ.`/oTEYM)=e]%0R2uN9"geJ^uMbIO+$aaYkN(!.;[VO+sI&D,tO@>)qmlpcTSem%WIH5/K/3m4(A.ee?9LYCbI"n(Ap<'(e$E+-_PaNcL=8k\S*akVV<`IM2)3)^%B"J`iE>I"Q^4XWP0kk7[BT)TD5Kr/"#.C.`p*<k%=/_:(H:*9rLtmAR19c>#6Wc&<-*V(q;KGEJBVb8gpI%Jj.:jJ6cX0<AUZmiQ_m:"+/+$Z.=(ToeC<=Z=XGI1--kj6)#)(<%X8Rn+%:iM/5!&0FC8Y:9?cTng%\qJlp>@=(m3]!5MFU=[+]A9Q/HqPDTQ\c0(A<R1i'b1($2=lS?QaF$gBG'^A8!NdHmr9^h6f=Xe2BtA2%`A\PMdD[RXh4[4oI^li+dT4C[ndU_FmCLq3QSc-@N'o*&.Z'TFoH^nY!@g5Qq&.*0FPH9J=s2OIYJ`D2/S-gY4i(s03<nPefKMd8%Uj\M^Mtedi&LG0>He_3H%sW2Rmi"<;`HN(8M-_]C4-Z\b2DNTaCiu6r?abo2h_W6%`m2^/7\Z+NPse%VHBOcHplqGn6<JhW8+LJ=%83()N30V"[`(D7'(iEmI5rhI'dl<])59u#*m-?R(5Ha+oD+*oB=EhJO`E-jN;Oko[3Q7MAM\m3Q,nJuajs9A*h)WNG7&R+JEm.)X%bISn<S0/>f.E@rf[VU:bF%)*LBlD9fqIW^O)+itDni8:MSFt3i*9\$3/>a\-ZH/6bT#IT1<>NIbPWQ0l\i%<U$W^2Fb1b&:1oc/n%7X9s:lhGmeFBNf5R?Mk-5pDs)D-E)_#s//n=C-'9bIT6MRK]oXLg4A0,kj?.QUTFq9lkTC3GAs3N?iR3e=:Og2TVIGd`;0VVBg3q%2Ng]fZ6Up*k`ael`Mbaj(<-tt-R;Dh_1Dhk;6\02bKNqSK&]>/NQF1qT16CcFi*93(W19hbFG0G.DD@Ealu0@+!P!R:@NcGT6VJW%ij7)Y:XU6Vp_9@b*lI!ci(.<r@(qo8RU#^%]d0@JPtSD]maCP%900m67\Z,9Pse=^H]m-i#aM(*U0*"f7s7W_-Wk?(C'm^=H^UKq%<H-bBO-+].^Q5WPXqNp,7-C1tPkY[[^lpU74Zp\2]8*W#5WFpRSM3hq-T.=iH#lPJSL>:c-ekI\%r+]n-\3L>8n1Mg,)\\-bup9g%dq""\6$>RmVE)JE"]eL)adUDs<18F!7^e;u3GL4%U./qr6O-O`MkPs9?RG=H(O_*7G6E.:R`D2+CK.c6#%W(qUnW0R1&&&LV677-%7c<iEG'h'1dYf*Q6;$l.!Ma0*4L<\dghWpMC7<+HX@j^eE;e[lPYO)kj?d<2R55n->@#cd=kXj=X&[/FUE)27"-KQsmdUWH`OudH%3X`AA_6W1;)q*ZQ%.J]3@s6#4oAi/TIM[]-#%2J,A]j?,S=ELka$2AV#9r%s"AP+aGZ;:Em@4<eLp"C.O2[g-R`^%n%*onCBl<rj%`5g?3D%V!%l>k'I0AZ%Aa`J^7jXWOnbo&Arl=J9ko4a.5<kiXV*QScM9'mq/[tHn2;[aNtM^TbRU-7je7$?L&]JVa,nPKk:C\X,5%Q^$dCg%1<`d=]g<E$0LnH#PP219:OWFCr.O512-m%0*,XZ`X(O8;`lc%mj0SHf'Z-L<,1[1?r#B<)j0'K?JN5@F`!E'OSG\)iWXh%Zs6$,8XKRVDO$+V/TD@4'b>hSmiH;F7<R#GqB/H^kt`91)9$0N0lXq:dbPJcOB*]=J_t1NWdLPG-;%^BVN`Qs?Ar)U=!bV([j=lW%ftuqekcei\->iDs-Z]$p*""i]4td4i@]qaGljXM1h<<N'.eg'!DOJgDGRoJIXcLX"$r&MFjj59jEbH(eq_JTD1C.pq*FVN)BEe%4%,]q*oCEu$[k5Ofu/rAE8["/jV"D"Gc6fO7;q)u\C74F-f122ZV,]F.c@t%3n8Q_=^5#W..1l3J;EF^4rAKGh_'=[I7:N8s&\BjH(%if^OaoO@>h&si_10/b#69Cg'>j-%h'j)IZ$Pf+mD''#*G5f0V1mJJ,o'Kn4nf/SgX_A\'==[,ep'%[ujhKi]Ff9juaA.mL];H%*=%Q3"[?l&eP>/1a+^,*REMnE?FMaEWY>Pd37kgZh88&EoXNZ^<I9=SufXa+-7L<fc-P49^>h[?2Ys0F`3?F'HtrYW]%G;M8nH?F^]K%+b98W`R+F-`>]OMnZ@b',sb"eb(bQq!O3SN(7#Yo=]c;u\onERijNU),:k;)3e\mQlhZ\pe$1QqSGo=M5;bHtn(h+<ALbDtb?)QD%qGgJ>9a:A0j=rn"4Qe$mK`F6u6H`]VBVKs@8@cim,9WRu;\;Q?2nP2]=/=W9\>6e_jX0#N*l'R>>$TM4O`==ZP4jc<RM+UgaR:Q1%.8!_S:t0$L6Ff7;-OQS)jsUi08EudV,r0ADVSjm"mpN%kQ$BHra0<2bh1rckr#oY,A:0GJ*Ws>]/`S0&Kh.W.M:?bo@%'be@uc*#%2[s)>Xk73A/%qN)12]]hd_jIsEDtk[*m?EX8mKg$Q:o[sFm"^Q'&F:u/-IA9Z9Y,=Sq[n)W\icb;=7!?T4?"GYGXe29t#67;JA`C%=1XGi3QLR:Yb[8;aSe<>OpoNB8UKQhS,2Np3B,:\?3?CS<j3,WT7.OZ'Jn6JL%7@WJ>/Ft(31)j&P+T80G?'s9QKt#aJ:)X*gu)p%m#ajlmiLeW["=).6n&KGMOH(u.(<h$77!2.*@8QC8_nHh7)hsPPSg7a*SaVo'$lj6(m^M^q[f3\[=Z?l`9afYTU;Dg/!T5%723^W%\#:O8L\RG:m+<'K2RT,,nnh!0;Nan<9QE_Ua<[,F(t"n\D+]a_/gYL&;3+-Rjjl8c.+';K7u;$a;Vqm4Q>9DL.?SD09c\%LJeGDT%kVOEcKD+hH`I/150ZuWdX$NcmHct%f:X7.[X(TJ]IYh@7UV)!OMId6L\:R^EK8qUsj?<8Q2Vk6LoS^7<e]9(;<k]^M;rT1o8Cl1L%B_VZT+24;)1cK!oGij9qd5'm48>!H^Z](?J5:"ok!CGKBM)c9;BatXkE:)X."%``CaFJ%U%iK>'k"aR)oA'9cV9D@M245[R[qFRs%TLo7e'&a%jhAPB*ctX2_['>7O8lB-/Or^=g13+IG#-u*Ehg5Wr\`Z<cc&&&]eQi%rck[+!+s4R\4tC6F,O.#NiZSCq#C4C@CFT]0%E+Kde)Cj']mnq7*o21WqnT/d2l;'6N1dIeiO^l*TVAugTS42/__+:CNZ!41kL?'>`cQWQ7_>'*Fe$6(uhu:-O5<lm$pMo^!.MZ<m%jXUoF^%@h;PC@_rgc#a30$BXf^R(8XDUQiAbk#^-(8.!4GrHHe3U`hTSp++K\i&rR2KhS79IK';HZC>-ZBUg7\LT&aUshJl;TF0b%8_s,2Hg9ZNOu*Lgd@?;_Io8#i^K8l.nYS4139_\K^Ra^4R8D4lq[b9.)E6HL.9aMAGKmI"bIgCO5&"6o8;dN8`bsHS!RR`Q(HiI(%4\o25hbu\I?I+P\m[SQ$BmR/?V*P8WpEetq@o/#XE.Obu>k=p=p"pk9WL#g]V3(aQG5@c,X('?SYK*'lXX.!d8^;7Pg;i8sj?AJ=%!4=9E-DLY_Hct',o5<j&=3eF'f(U(;OEH0Nh.-GPDa*<^H1:E!2Eu]8GDcV1R0]VLbaXW,)G@9uf$p2CfUYrZ.S1u/6+0@3F=qZe%3SdU_Fj-bPe9uhRVbV[c8YZ7ubm?t@2\kr`HSmBQDe`c6VqtC9SDR(bO5-5faF/jZa?%/mmP4ac2'6nh*;Fe'S!Q@:]0udS8-Dh2%p.`T7QWfH,?aP">m$gV2M/ps[d[g]oFFs>E;^l_2Vi&uRIl+'0r^;u?!]\ltG=oZMQnuPDE@,sHM3UPno@p8<0mOeMf+Zr7I+jg1%_>=[^Jm5PK./&t3,+_RjXnBXnobg4XeNUbH$k"opheah6(KgNWcti,"K^IRFH%p\5=['`;S]Km&L7[D9MOJb.Mg^?EVf/3?>Fp+S%T"N:j^m[KuB>2%)0t=p"P!+32r'USs+#O,deF)NC;E_Q34ab3%$3qZ(TdL@3p`)j8^/R]FHmIVg/KB.'(`Ah`I))=@g(&<J\>^A;%'CpN_D`B/Bc?"4!;=6".595-=-L9W+G49M:Qm8o^[!?]t?WQ"Fi&aQY_+2GL!7J\R"GoF-K26+E*WA2'%$32N*nPr6flD0<7YTpZ%A+*G9iS>/1UF/`]pUGCRBnXsI8+gDQhHmU:He.h,JKr:KQV+51buZ7d\<5!\3Ig"SUTU*_#bq^bCag%6b@hgDQl@EQ.H3$WN>9c3%)C4:t"q<atZE$Fq7->7U%_e\P4a]Mno\IDTV"nL1Q`4>/:Ha(nOCL/ip7o(niS[A'r@F;VJlFAEQc]m77gU<;K&ofTp.js7Pt3se%=g7fJ)+3:ZMQb_9\bFP-bsNbW1@q9:?6s._DTtBpQAgdT%?6<dF$O8M6;qb)8<P7[`HukCO[7E83s^+tq5aa?0h<?r4M:b+58'!@%CBoI[E7o&n>\\"I_d+N&&J3'TKLDb3@OipH$jd@NRN0E,V)'AeAL;"3P(('d]_]J51cr$Im,!RjoG:91"cdW#%b%=-*e&8Vc[e]C%@:T$7)L)Q^Otf0/>%+CCf;2W@Tg\=[AKc!qhegIL&uF;.,dXA;EQ?\KKd&mq/kHi6/hpLJi8N8g15;Y_j^lSf4A&Z9,\-C?%Zkku%)ZmJmI95C*,qXuIMM+G"BiAB0T[fZV%]2pJ<e\[e6hG<@QEYRBbT+h[\LjgChDV#5JR#^oVTpcf^`%ejoXeZk4;tS!Dra?=KVUdn%-9!u<a%-ZgPlaO(gZ3CTNm1D7$]cAt,.EZmHO3O.VgNPgNa4*=Uu);mW"\6%\uIU+^_32%6VA/kCh>Gr+i:^dITQ90%)W/pgE6>g%DHoLr@>B=[<f2dU/6ce\RL]%3RMTE$X[<L/@?BM*<4a9p3Q)F?8f0W8l_;lQ"On$GFp<T]6E5TUb.o;PAn]mBfYs'X*aho?Psgt7%,S\sjl6[Z[PK@B0#.*lk/P3Q,qZ^Y^\j^.fCmP1I,'(p1s34MpHY-jcWeTnY*]@c`Z`QFoWb:;5qmJpI$o7X)$Qpr>R!LL12+H49%/[;)F'#-IFI<.B6DHHs+G`LS;bS^)cW?r&YQ1j8f"PUcT1IdQPZYrit2WQggH_ml.C)ZWB5<e>7Qj/6VcZk"u/NK>S&Sj/<\RKIp%U[l0"nt.LqAE;n%;Uc4GdnS<4.,'5`&0t@XJ?N9:g[o//k//6k@)-GF(mq(M0A'a,B./@C[k;Xop6$&`GAiJ-CX@3/,c,Nhd^#ct%&i:+Cmi`_6iSb$VX./PuCd1`]8]lAbp*CEPW#hu[$MZ@p0_hZFgEi[5':9Im!cn1\aHYoX6bPj/MtF5jI:$Eb0f,^qE^ab,gAlL$%j5+%S2VsU[dA*OpC(!*b7mq2cT"QO0`VqJI+nU_]b[b`K'q_F`B61Y,9#Bq%r<32XDD!<RJ1::hYt&aM7"q(?X+:gm?2C2DH3qW1%3LIETCfs:X!fR`"q>,)3l^8RH?G);Wc/0hVB!C7H&0\r%iugXAf^/..08-Yu3$2])Xni`!!2R4ZW"hoFqd$oHm8Arh,f9dAEbTF8%^htPYh&/*:W*ik?]V:GjO$U[tP<=Z.;<Y<;]aoX))kL]/^B0N(JjAEsBI!IgWo[A6RH5d'"[T/G#t7&NSE`A6D]."t^m?V@_'RT*%-WI;_&?iMF^Ghmk9-0:0U/*0R)`a&8`bVko1a/^..-k4AR<rW79)<VoX$X[fr+D6u);pBG"X/u3cu#UaO_8spj$(DIAtdqAf^c8D%>90SB`7[sC5bL&0nb?LTafY+P`ZT;3H[Le7D&[*JH5n5t6==pV\Y^hM30*]Kq8^$A<a&++'uKjl^b_R)hBB=ZQ."dHo#UjRZQ;[l%Y',VU,nPn&6l*nAUVa'/+/IAOltE_`a6I<WE3O%6m:RJn:6Hl(6T1pD5!$[V3M<>I\-n!+g8^C]AOU-OC;VbL9%g4Q'k'qLGtP3X%a;[i/3tg3VB]"1A&X)2b;,&hgP;h&\Hg2"PMNBVkotCuC2&C:T9bEp]_>l7N4L0j7Of:3N\'^Fq8a-.-E,JL4)UjcpXGf3H)XMKS%7b$@\IPW""W^4@M"%nr`Jnf63-R9r[3o9e''D5bDF/c9CEEQ4?9j"8NGJ@h./n)\lik!om3KQ(rNc!MSBLN=ubcM>"r)&8LP(rh@%KC#;BE2%E2aJd[jc!8EEj>AqR;gZf1,:\\1d/@D>ZC;0f16G8DnKa(K+ZFOZfNZ?JVVI8--?FSP,f_";gnIUbo.)YcY0;;KQi#l+%+L<Rtgd.;gJXMqe6-@aHKTn(R8(V1e"r'm;p:'1"on-8t@N5+@>9(Ec?N&QW<(&/g\bCh139(5YplRP/d+\ls0#8Lg9HrJGJa')_%*c"YEFtoh9+eDcOW*uTIOL?7aF2?X`%PC<_'^C%gPt0`3'b/e(jPd"B!6?"Lc=5m8#><AFe']i*E_kil7/;HiM\#X:R$^t<bK!cY%Egi3V?a5bbn<=<;@2,N[oYji(OqbCMhrQ?^Z0S@=SiaG1"TX;3,SY3YY!GdKL8Y<6jf[!1oDIK3c>u1_C/&^X"9I_c@u?(IbH8f5%KjCA65h;B?YF+(NR2e&O4jN:%,W_8Hf-=I_0e(fa<X)RLDPu9FjE9C0ppnnGij)nijJfmO:!lW#/Rr'3p<Y@_@IYq1LAG!Q1"e$[%ML>9J\FSLCji#cQj'?3N\u%LZc/XH,]=5.#7(VC.G=JS8Cuh-23,+[6\O99=CuW(g$3O,0\\m*"o\bXM?Lk9a44UCWPI!Z!SaXe6%mA53c]I#f!ji6Y7k9PbS)qc+6c37f2J6qKJ-T9)'Y8ti?NZ.bbR*'[6Z)'b^0K]2[pXI7]@B`I2[]/II]dk@S;;WZdS=pjESuo7]%)BgSK1*[V9hMnbg?'25THu_9iL@-u1jM"5N,tLsd\LEQGm:mXSK[1X:+^FX,b<8lQjWBX\r8-/AfXD<P;5X:8$A"A:M8FBcoGmo'%-%IWBnL?=t8c+/;/6B>rCZc%JDgd`1RV&f=]4U.fjJ>Lm+7_Stj%'/(4W(NY,@B/A>\;"Qg?eSZ[aqG_(YY4#qm^Nlc5ere>^%=]%h7d&eV'%KkOf(Z/\()qbRJD1FTiu94+c&dC`"Sk`4<EL^,N1"<Y\gBh9/Qa;^"g1P\nB0')F3PM_j[Rl./(oW6s<T-mBW-]8.9C-%DLYqZRSsruY:t\?bSG\6T1"Cs8fK9]lA,I7'9H9QI6E`Y\`@<+g9+BGRMno@U["<Y[#BbtTk]<Qg'KE\07o"-f35@j.=Y>aDIh5Z%U@0;qPsO6E2g[pOdTuJkP-`ZRLl'1LkNEt'Zncc<(O$qAe>7FiP56gDK3@h>\H20J>;o-beYXq5\fm;#e$T"r=icn!#p`/g.TA5T%qlFOMZg@WaS#Ml5(&;lG\$d=2`/te(XFujfVc,Zg3%O1R)?,#Q)/@QCFIPS*Y6t$E04I]R3!3N'RIM,`L7pY_OOMNBA3U:"U?'A`%IoZ'Gej$TaL>?/bg(g7%<Sq)Rq0jp(o_c2XlE+K5JT[><$WFD/[uS.O;BI)^rd]Fs1C3cBDhpVk:S[O/4s8m8qc:H2Vf0o0pIlD,%(W$gg1Z?Yu[C'X?nHc7,T>`A]Vshnr5)?L@7hZ@*o>EUmhhgn"1GEE.X^,;G!CGCQA\\e*=,?sWbU_>A9Y9C2>.+]Y!*u+F#2l7/%O7>[WpktTlN9pf\7+%c@m\Ks2qG!,](B`*)'>)/EL$6)M;4mW7'mQ^69To<iY+ENA&\\S*i>:=`lZ\`>Dumhg:jG,3_(P5T,$?FX%?=kM#QZdk?*D?GAX<H*RSJ\iS^mMBiXD[UfrN(kZGR2<V0%pFX1K/*-HE9Q#fkSX]>;lBcdI\=IR:Gk^!b'fBIVm1k>kr%Cia8i?%8Mt'!iSsu]K,#A.\`U3Y3X5H(gYn168/A_N;Q49[5W+#t7rENbNpEK[QSU,!pDe[i&5AYp#2=nXV0?r]+nQ4p-1?LF_cEol>*2g+%7R"nFJV=6bl"4s$,!(6oMZJdA0^-ZmVXS;a]lSrDOUfhRRnDX"O0LKjLZEM!"l_jmrn`uD!s!-?569a'ap0+$\K)5:H;GlfbS/\C%34X>KD,?^_V,$Ma*ZM,F7gI,6g=nWSHq,RH%iNSCcpEJIGHsfWD<TD#40b-W#J8+!_$i!gHc`q!ZHK#Mg_AuKb^qG(D/=D0;C*EF%I-2=k5ZuR3Pc<(3"a@^L=_Osp6TaX0iTTk#8k0R$6KWgF%duq0c6tQgq%&.>5]\o]mOh!G)pU%XP+(]5T<nlO<4p>%;?s<#77M;A%1WiM0$CP2\ftN>Z0t`4dGDmmM3rMJTd1QYbiINQ-?B:f]_R,f^E%jUY`)bD,!'\"?JEeP)?aZehOQ2[YH"]sNj>66B8e7('p#),q%(6X)ESS9EYn(`t"3c+e7r+-AV#2cn#M>_^/e.6J6)4OBVh?BYG6Y(/7!Q&)'5aY;?qQNDG[k8$3o/oFqbVD9W:/M&?O_Lid)Oa8_%&RdPLo2;Plm(1[OPUo4E?E2+(2\8&8Rd+:*@XqFg_[H%,[1J,sdQp=[>V8\`$q_(>B(+W;0+/^mQ/@B[X,OX>/mn1(*=:iM7(rNB%13SC-9&4n1l#LtWIhcNpiGB&X`FQ2A'^Q:j!9@Yuk/e8'bO/Wb*6V<HDQXWCO>:?MAo-MGc^GF<bB6k"gCgSR?*[,.H!++7+RqA1%(q0IiBHM%b+9]";:dg!B&MC'4/X)ea<R)%u;2]gGFd8Q8<S7L"9j#=95qRPQenQn<UPaq\4om[2mS39:)t]F=N#,O7\+HM*miQ>O%)^1HI/[+Xa8nO!r,UjV$k3>K07Pf*-8nLY<s.j1kgjDZh"*$%$6dJqJb/kuqJk9VA>gnqXpl^p\3#UNsBpjN_ebr6HAdm/O8^"d?%34+XABKrjt_G&.Geu&<s;_u3)WA-74qQOXgRX$q[j3s]6VV".sR[Ff>PSD3%\?eQIi)j:Z=_c5fZ^TP[ML)4h/LI`uB!sf+RafR4%].@+0(m`]GqQade?Fd)(/WQPmbogn>hHA+]XBTjK1J@-<+)49I3N:Nde_\Y.A%ZbLk/l^WP?MR?8TYYM-BQS0)&"TSRWM]]c`i=*%M)HY91ppc?1/m0HP5`6Ka#-UD"/WFu/d3TIS[Alld6:;WZh:&dWu7P7Y%D#'[AfSim$FSK=$(KE##rOVqG%;oa`@rXN(:!6gU!X6%M9--YnJYqk*Z&GeXm6:JJURTDs#B*;6#JZ:ZSn2N:f=8_[k?K!0"?C^>^iamElsmX4BK[nmLI=:9*TA*i0b1*&2dm_\1giULsmb&%[s)Pr>S%'!Jp/aOGDYt[V:k'+aJHs*Seaq1-I3^U4qj6W3TM"K;7TX[IH3"<8,i:L+f`13R$U"O^m]UG$O5?UO,1mKY9]98ARK_G%Yq%p'!ruSHU^<0S79i]h'ZOTpR=,W0MN(hcHcp1MA2j;_BLpsPh3[Ka&sA!tZ!uU9:"Uc"l)c]<Q$5\g;:d+N7Xe7K<J3dTdC2:$%+g;g*;Ti38Apb=TC(cFSY9N+k"NHYW<+?7AJ?AKs>XDa=5]=F\Q54qcT,F[BNps,FF+sbmL_UsDht!\;5aR.3^Rl>R$p^8WrR.14%5\T0Mj7Mg<DXa=7Ff)AS:H/JbJ-JjZ[;k7t,1Nj+'=2ONrmnM<+J\0M>A*MJVX8^#kJ`WTMhWg60qTR'6-Ae\5`KW@,pOXFc&ZcL%$P%@%62N*qL;Ue(%+F0`qdde*jEOdhWpeN&X6pL\eJ4+/Zp+s)pFMUae%\lKrF9]s+!sfu4PE>J)jX"7^<NGE=s%s^]^T$)&`81u%daQdIHB^5M>1F+o-DsM?&`i%`2;.nH!Q,$C_O,U`"b^Y=,]lOaQb:t8C=6Ba["jKYM%.h2Ed_PQ]?9a%-,k\QXkZ`CWETFf;an0K%koS+&"h,W>@`%=s[fNIL"uuq$)X!8@Q?d0i"ilVh(mW^HZV[sf0:1HQ#:?o*I;qc7oVGSf=koWMl+s(=(@Mte@@dKNmasT&@G4[5%m^8X:pY.DJ4Y5#U3<EOH@qBH3esam>E_4a8H#3fBg^EtY*J58Gqn`NXP5"%)$d/sZ;H)]KO%47kS2Z;'VFtXMmDq"n*TNhNe`:PP%jq9>,VVnu3SO_c]]+dk<(Q=`%Hl>Y4<KO!WergCBT47T$nZkKub&>`!UF*F?l<kV;_PhP$<I&!W(b^3R!HGr&+r'&Bs$ac'b7NV]%8WRB=\u$aBEZ68f)7!Ig>9sj&^VtU)%./W(C*T?4%P2gLI/'+/B@QJi<pVFT.C/on-1blo*E7>9?t9DWC_%_jHYV_*N9RYHfRp#f%N]bGPOpAhpc=XoCGSJ"aY\N8*U]\J96QgTV_X"<^F<fUS9&XsUFlI@AZh:GYm!?gA\Xp6SLW&McEN>t[=t*dU4li$Lm!%1$p/UC%%g5)!S3CnQj]B^cpn2idpgdC`i9qlRDn$JRTeD0Z&OlAZr'$o$E&hXcfVi7#+.:_@_!jZo(.%[=A&bBH%4FmXAnVZdL,NM=\4h@5V%N]`b6\%_-R!X"<$e'.KlLDp-Hos>;3IS8e^HeJbuBsM-Hn*,E"4k5)`Ok<TM+GK85ORPDE9RKW_b*37jaI_s'?hQX"I>9AD5oAE[%B<ep5O6JGncDLoB+X31dP1D1S:LGm4OidFk?t(1<p8V4b_Y`sJ$l."S-c_DM$"*7RiVk4SD@;0nT.khDThtd<DN[R:r(jrj0uQ4J%dHC!`mB1'O."t/EmBA'&*kY+,h+u=*pHS$g=*DL]PS#djAVg>`XY7_M!t%tC'O@/s&#dcpF$OTpBo4$B^Og^Yh3K$WOABJ@9-,KP%_kgspnN]*eh#m<Y_S1=*Xo:Be7Z[Q2J_F*:U4ih%ORPMH9KZ.MBoO2!#8H\$C\C#)/Kl/`8?FGqk$-Pqh+l7m4J#CUBpX^eWPegk%nIupb31r7(g&Ij/<*W3@'X,*>)Ue:!BAK0j#!]ms9*12XDHh#j-B*=jWuo>$@(^77qb/,"9Kp$(9o*_)&uN:p<0M3IUV5;$#?A3h%%a&X`*W8XcETA\;,?lscfs%Lh7(2-sI^jM2B\W'j1lmo?a1"6*)>iqh@d=esmDu%LgQ?i0Bh.Sjq2X5ZO-+].5MM;BJ'f8sY]=<E%gtoKmYjLE+EfVbi,!cL;6cMlbf`b%8a4"tq[6_7%74l`:kW<.Y29t#;#uW9,[uI&Kf=ZL'S]90'j1lpJ,YHnP]T.m-nCgBRS3h)J%5naeeSg`D$8Q.NUP5I7R;BD\.S<H^4Yrh0X+o+*8BfFm$UcGP\!He06@a(n2gLDA;Xau$=nUoFis!CGT>V1Nk_2HI>?-dtnWnW:c%!F\GB8+9NFgDi__C[2a>D@BcE0&k#kKH"c9P2[K3)4,SuFPT8;CafI.70!&E:i*0OP/6"OIu_M)3bnNpo%c4G>.X[oFZ0rJ1u^dW%DKn3eRfS:#=P-GM7<Z2N!&,ul&l%0><HF^K[Y`Zah+R"R81Y,R:Y%W/j=<FT6AXm(A'EL"Qt?OH-E%26c5'NHT$`a;bK7,YYf*Xq%GptqtbiG$Qr<./iido5CkL\5FcqKAb=rJ"bVF=m1<bH#pC].lB0M2+[/P4QZ/;lf,=;DFk-VjM=D-*OMU4\8Q;U*^nQ:2qO;CBX3%0Y/I`Z3Z+fC:>`8LftQ-((;0\_l$<L%KGuTbcQ[C8)1G6rWZF?4I5++r>hTN>9XNkT-97:G)-<4]S%:Dp1IfheI9&iiY?ntg?*-s%"nor,Rbfn`/PhpUMuhi?Vk`%5"Mp^=%He-&(<a2XI,u^mZI1M,:>1tkmouE\&rbGc%a8Aao='StD.nD>HiJa(LNC1%H3Ye9`fiYP%'t`N9Ka&h0KP*QIalZbhW^WF_iB=;Pn*SmB_1R@k:j(t0%F>9D8Y>\b7%tO@Zo%\YlIPQ8e9&l/o9+IM)Da*OHLq=GZ`&uR7X$=U%Nq8:frV32/iLFhdf(PDO8j?+Qal?$qPmM"1HP^KW)+\),,(57bi%WSDJNhjp*_4RiYLld`/qG_j'dIL5QGX9^d0YKg,"I=<o($IY%6Dba"C?DR1pru_<CPH=n^68+J^_U5I:#:R+El3G=7./HTb""+IB9)5o9(1ZcQd7Z40`\1r]U_R]H.=:sJ07e%c4\tggmZuLZ\3N9%J`,J1*adX].TsY,@)Q-,UD.OJLhm;"(/,tadq;E]&qe%"@,!XdE>u6FA(MO4Q;*Hge5ZQp';72AQRX'5P<`@(dRdY*\k*XDAk"#m%(LQ=87F4I'mN%+fKGT&7WN(=<90L7%\!ejcaZf7,$k$q=.MY-O.01+&`Xd.Ej+$Q;rK%e^Lu]p<FU,G/@9-bL%YRk*";^>MIFNHU%M-]rqJhmt!nEaaD-TS>h1?=*CUP9b>.B/P6!KAMI3`JZ_^9;D4&*$PB+,p@.n"?NekGmGGh\X+GS0-W$(A`%o!;/cV)qHZbgV/)/%/UWT7WWe,fg&f45@O$Qi\g9.T`#77T.OX<AUg&d(N*'O5l^/;`6S.fH=hIh#$Dl//N@U%IYg7j@B16-(H8)p_o>khV"A/2pb6<rf%F2jc)7?9$^].#)XN:@Z*_\XpL6]QL%EPO^h+@Yu"[%03NM,g;sR%Y,5Cn%$laa8RGLh!$u$$-u0<tiA['EAWi=tsM3-+&A4#\(+3%Ctf8<2.I&CLn4kfE/@RmCriZ;)QP,j%TE.,7MlEgjC=_(>gd':eUoIY+uL:?/tlRR'`gVI+cml4?4i0*&;B>EDS8_ug6(WYTdOVJ%h0L01$nf#:a4Dm\HiaO'<GQA'#da4(pm*TrMH.X!HcrsR"-9>4,2YcC\-&DO&=:nB)$tlA^.G;fQjm0kXqGcr*p[Q15Stem]"HDB%qER.nT+W6cj"a]GB!\'(/cjA,!JDmBptQ#=Z3S6CF8:h5(P+"iA:*SL4+,3%>GDD'F6f'2ab<C;aUTcM^1Bko#,FT.,gcoCYqg))%@s@,Q)\VG/<a,tZ`E!V(*LJ94PM"28Qg?YP^;b7kQMo%8??.:.V-2YBO\X7e9IAWILT\f#$q9s9S5\JuHq=aY\Q!3BGtOD9YA:!O%\n1E\H4[Q?`!31i$kAKF)EAC;BG;D+9SJ/U6aVNZ7L>jD\7[Y<=Z0:.PTk"JYZETS3BM5RoU\&er*]P'WS=m5>*!^oB[%9id?KEB%A:GH&8-t9#(Mo0'5ld!/%:obF^4pq#F:ah'[uU&??k,3d`ARbu4^2R.m-ppLohX`N7*.tJ\<lK$ZT$FaeX76ZJVh!&/%n"MKIT1r%!^L9\'aK<A%f87o1:(:Oc2efhEr[]O7G2bm?pj`,0Upe:r#!4%khNFQ!'4kaDE.pF0$]7)i6NR\jh/,m5SDNok#-R3e;aP8A%G,k%NWFM7[?ktDR!\sFV.0KlU*);g(_Bdh"6)s8#"7j%%)<iK1\hjf3p"U'3sNnPkp^(oNun%e[f!ukAj;/>bt_)Y$CFQCOU%YM`+f#r%^k*3Z(_B6."!Vj7%K`SbOkG0p5]]qd]lk"g;8j:OScgaa,ObLY!jAX)<p;egTdf"6#D"le)Cc3u(`3R2e:W9Gf/O%`R+-9j=C#7h%KmDUZ[-f7LLXFWh,1+kcL1b\>BHj,6d`9@@PQ8R"l2Xki&/'^Z!u$ZFTG!+C/)ktf#`2fP;ab(cj>(2/.M=#Og0pLa%#M]'f-O!+%+E8<PnhHu&fH]nd<,!5[/S2nPE>(iQg=":>j[$hOB?EcZP7*;XAA/9$@[EsOrK^in/j=hZ?EO&IEAbDQKh6AX(aO^LpiHn0-AFg<%j0kC3m0!uH8\&$hp?'32IENRO]^lD^ef%<EHIih@jC.V4@0p)b?C*+H`'OZ]M</8(-c)kl=&MJs)BPO/#Zj/VM+Aii8)@)P\U?/D%`(d(c`(G[e^u4Tok(7GYCeR]ig:Nc-S+;Tl@>hXi<mpAp6VF_C]G$Ip[9M[9=S:lUMO,qe^hg"f/`[7AMD%iYf-Rb'pZnP^F)UfW%E3"GS.+'<>5[l8IAICif@:nkh71TBHbs2K.,Vl*.JJ,EQ8PdK?e`R,kb;cnUQRTf$=n3Hn2t]I:RNsEYep#:dQZ>=ai]6Uc%-)4\%-grP1nQ!Fa;@nfRS<])OQDce"<91r'iZ%&BpA4+q7u!d^l!^!h=V#':gB.%#IIWGT7ogne;H3$;Lp.[]pi?)%)61n/aspohYH"Mn%<T?5I,&&`0WFe6`.X$%HVq#(.`[Y\gDdmohGnpim`DuV/pSs"=nPO'LMi`V-EI!D[@;T.7rMZtS]2K`^Wf=LXL@1GeC'11_lq>Xq%Nc9U"@G`N2Y:=im^*W:B377'U)PcC%]<'%BGS5GlhOu&7)f+P5;kgBm9iqkTG3J=QhopU#6nMY5*]4NN89E1^@"MDnI'V<Y2iT.s%\WNFPj`To6?8_\X2I1'a^@^BRhDO]:@QaqrR3k\QR')+`c)XK8-Ni>,R%cUp*QZXsK^l(0e8u#3FQ$)6:S+`Dg(Vd_FP*Dc7-^O`%J^1$*q_#h[9iI'MC>4*d?I@?R3Oq0#8r9Ju&M8k/KR!7">u&&N;rfe^7VR2S41Dn_m7^U(e%iU+?Og4-jNZ98AkrSBlAVVWK\dFq%<%OuNfU9e(W<b(bm#Bau&aCU0at0@p2S*+uSSHNu=[]FI].nFEHeLQ_W=LnfDGS3>\r0$E]/A-#CeY?i/>rB2#cQ(RCfH3+50)0A%$IV>GRl,>h3Y-#HY/8n/'A6CBg^%]\Y'T!JKbQZ#MJVl)+`jWE%usajJ]RBuel3&m^U/#b;q&770f;`:1T#Vg0Q.A#mD&&!j\a1t%I[741),'=b@c@2!`gsp"q<]]PUCW@omjH*T&dHOE.8j;V,@sQ9D@a9`OoR1]$Y.@![iQh2[Yq7:N?%a+PWJN(Yr$b(gMgeWMNNcr%)L0e@-JMfo\.(l=.i,#(#YHQjM2]>PPW05o:\$mU!FIh<o`"A60HUW$neKPLIJ[QN1&h4Kg]%2er1!0Tf73VgIrGAdgL's9J*d40%5Q&u[IJ`@1pU@p;gOK+f07Wd^rq_\*q`k,[fDkUDDh%f\O8ne&s8KLrJ,Q9pqWEA,lbEGd^HI)Brf;R/gV<[P5QC\#huDg<q<.bY%jS?`Os5bp6nA#!YDuW$bD?Hj~>%AI9_PrivateDataEnd