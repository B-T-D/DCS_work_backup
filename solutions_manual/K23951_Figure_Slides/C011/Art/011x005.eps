%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 011x005.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 252 177
%%HiResBoundingBox: 0 0 251.9995 176.4937
%%CropBox: 0 0 251.9995 176.4937
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 8832 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD18FFFD56A8FD29FF522776FD54527DFD28FF52FD55FF7D7DFD28%FF527DFD25FFA8FD2EFF7D76FD28FF52A8FD24FFA87DA8A9A8FF7DA8FFFF%A8FD25FF7D7DFD28FF76A2FD23FF7DA87DFF7D7DFF7DA8FF7D7DA8FD24FF%7D7DFD28FF52A8FD23FFA87E7D7D8452FF84A8A87D7DA8FD24FF7D7DFD28%FF527DFD24FFA8A8FFA8A8A8FFA8FFA8A8A8FD24FF7D7DFD28FF52FD55FF%7D7DFD28FF5252FD237D76FD307D527DFD28FFA87D767D7D7D767D7D7D76%7D7D7D767D7D7D767D7D7D767D7D7D767D7D7D76FD047D5227FD057D767D%7D7D767D7D7D5227527D767D7D7D767D7D7D767D7D7D767D7D7D767D7D7D%767D7D7D767D7D7D767D7D7D52FD28FFA8FD22FF5252FD0FFF7D527DFD6A%FF7D527DFD12FF7D52FD68FF5252A8FD14FF7D277DFD64FFA8527DFD18FF%5252FD62FF5227A8FD1AFF76527DFD5EFFA8527DFD1DFFA85252FD5CFF52%52A8FD20FF7D27A8FD58FFA8527DFD23FFA8277DFD56FF7D27A8FD26FF52%52A8FD52FFA85252FD29FF7D527DFD50FF52527DFD2CFF524BFD4EFF527D%FD2FFF7D27A8FD48FF527D7D27A8FD31FFA82752A227A8FD43FF7DF82752%FD35FF7D27F852FD42FFA8F8F8F852FD35FFA8F8F8F87DFD41FF2727527D%A8FD35FFA8A8522720FD24FFFD0552765252527652525276525252765252%527652525276FD05527D527D52525276525252765276A8FD20FFA8525252%76525252765252527D52524B7D5252527652525276525252765252527652%525276525252765252527DFD06FF52A1FD29A852FD21FF7D52FD29A87D52%FD06FF52FD2AFF52A8FD20FFA852FD29FFA852FD06FF76A8FD05FFA8A8FD%04FFA8FD06FF7DFD08FFA8FFFFFF7DFF7DA8FD06FF52FD21FF7D7DFD06FF%A8A8FD04FFA8FD05FFA8A8FD04FFA9A8FFFFA8A8FD04FF7DFD06FFA852FD%06FF52FD05FF7D7D7DFF53A8A852A8FF7D7DFFFF7DFFA87DA87D5284A87D%A8FF7D7DA8A87DFD06FF52A8FD20FF7D52FD05FF7D7D7DA853A87D7DA8FF%53A8FFA8FFA8527DA8A87DFF7D7D7DFF7DFFFFA8A8FD05FFA152FD06FF7D%FD05FFFD04A87D7DFF7DFFA8A852FFFFA8FFFFA8FF7DA87DFF7DFF7DFF7D%FFA8A8FD06FF52FD21FF7D7DFD04FFFD05A87DA8FFA8FFA87D7DFFA8FFA8%A87DA8FFA8FFA8A87DFFA8FFFF7EFD06FFA852FD06FF52FD05FFA87D7DA8%7DA8FFA87DFF7D7DA8FF7DFFA87DFF8484A8A87D7DFF7D7DA8A87DFD06FF%52A8FD20FF7D52FD05FF7D7D7DA87DA8A87EA8A87DA8FFA8A8A87DA8A8A8%7DFF7E7D7DFF7DFFFF7DA8FD05FFA852FD05FFA87DFD13FFA8FD0EFFA8FD%07FF52FD21FF7D7DFD12FFA8A8FD0EFFA8FD06FFA852FD06FF52FD2AFF52%A8FD20FF7D52FD29FF7D52FD06FF7D525252765252527652525276525252%765252527D5252527652525276525252765252527652525276525252FD21%FFA852527652525276525252765252527652525276525227FD0452765252%52765252527652525276FD04527DFD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFFF7D52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD25%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF527DFFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FD1CFF7D7DFD4CFF52A8FD30FF7D76FD4CFF%527DFD30FF7D7DFD4CFF52A8FD30FF7D7DFD4CFF76A2FD30FF7D7DFFFFA8%FD04FFA97DA8FD42FF52A8FFFFA8FFA8FFA8A87DFD27FF7D7DFFA8FD057D%527D7DFD42FF527DFF7D53FD067DA8FD26FF7D7DFFFF527D7DA852A8A884%FD42FF52A8FFA8527D7DA859FF7DFD27FF7D7DFFFD04A87DA87DAF7DFD42%FF527DFFFD07A8FFA8FD26FF7D7DFD4CFF52A8FD30FF7D7DFD4CFF7DA8FF%A8FD2DFF7D27527DFD49FFA87D2752A8FD2EFF27F8F87DFD49FFA8F8F8F8%A8FD2EFF7DF827FD4BFF52F852FD2FFFA8F827FD4BFF7DF87DFD30FF52A8%FD4CFF27FD1CFFA8A87DA17DA87DA17DA87DA17DA87DA17DA87DA17D7D7D%A17DA87DA17DA87DA17DA87DA87DA87DA17DA87DA8FD22FF7DA17DA87DA1%7DA87DA17DA87DA17DA87DA17DA87D7D7DA87DA17DA87DA17DA87DA87DA8%7DA17DA87DA17DFD07FF52527D7D7D527D7D7D527D7D7D527D7D7D527D7D%7D597D7D7D527D7D7D527D7D7D5176767D527D767D527D52FD21FF7D527D%7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D53%7D7576527D7D7D527D7D5252FD06FF52CAA7CAC9CAA7CAC9CAA7CAC9CAA7%CAC9CAA7CAC9CAA7CAC9CAA7CAC9CAA7CAC9C299C2A0CAFD05FF52A8FD20%FF7D52CAC9CAA7CAC9CAA7CAC9CAA7CAC9CAA7CAC9CAA7CAC9CAA7CAC9CA%A7CAC9CAA1C299C2A1FD05FFA852FD06FF7699C2BCC2BCC2BCA0BCC2BCC2%9AC2BCC2BCC2BCA0BCC2BCC2BCC2BCC29AC2BCC29AC29AC2BCC3C9FFFFFF%52FD21FF7D76BCC2BCC2BCC29AC2BCC2BCC2BCC2BCC2BCC29AA0BCC2BCC2%BCC2BCC29AA0BCC2BCC29AC2BCC9CAFFFFA852FD06FF4BBC9AC29AC29AA0%76C276C29A769AC29AA09AC276C29AA09AA076A09A769AC276769AA076C2%99C2BCC9CA52A8FD20FF7E4BC29AC29AC29A7676C276C2767C9AC276A09A%A09AA076A09AA076C29A7676C276C29A769AC29AC2A0CAA152FD05FFA976%9AC2BCC2C27C76A09A7676C276C29AA052C29AA0BCC276C2767C76C276C2%76A076C29AA0BCC2BCC2BCC352FD21FF7D76BCC2C2C29AA076A09A769AA0%76C29A7676C29AC2767C76A09AA0C27C767CBCA09AC276C2BCC2BCC2BCA1%52FD06FF4BBC9AC299C27676759A7676999A9A9A75769AA075BC9A76999A%767699769A9A75769AA076C299C2A0CFFF52A8FD20FFA84BC299C299A075%9A767675A09A9A999A767699A09A9A75A076A075C2767675C276C299A09A%BC99C2C3FF7E52FD06FF76A0C3C2C3C2C3A0C3A0A1A0C3A0A1C2C3A0C3A0%7DC2C3A0C3A0C3A0C3A0C3C2A1A0C276A0C2CACAFFFFFF52FD21FF7D76C2%C3C2C3C2C3A0C3A0C3A0C3A0C3C2A1A0C3A0A1A0C3A0C3A0C3C2C3A0C3C2%A1BCC276C2C2CFFFFFFFA852FD06FF52FD0FFFCFFD10FFC39AC3C9FD06FF%52A8FD20FFA852FD09FFCFFD0FFFCFFD05FFCAC29AC9CAFD05FFA852FD06%FF5252FD1C7DA87D7D76FD097D52FD21FF7D52FD0E7D52FD117D76FD087D%5252FD06FF7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D%7D527D5227277D7D7D597D7D7D527D7D7D52A1FD22FFFD047D527D7D7D52%7D7D7D7627277D767D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D%7D527D52A8FD24FF7D52FD39FFA8527DFD43FF7D277DFD36FF52527DFD46%FF5252CAFD32FFA8527DFD49FF7D527DFD30FF7D27A8FD4BFFA85252FD2D%FFA85252FD4FFF7D277DFD2AFF7D527DFD51FFA85252FD28FF5276FD55FF%52527DFD0BFFFD04A8FFFFA8A8A8A9A8FFA8FD0CFF7D277DFD57FFA85252%FD0AFF7D597D7DA87D7D52A8537D7D7DFD0AFFA87652FD5BFF7D27A8FD08%FF7D7D7D7E52FD047D537D537DFD09FF7D527DFD5DFFA8527DFD07FFA87D%A884A87DA8A87D52A8A8A8FD08FF5252A8FD60FF52527DFD0DFF7E7DA8FF%FFFFA8FD04FFA8277DFD63FF7D527D5252FD11FFA827A87D52FD67FF52F8%F8A8FD10FF27F8277DFD68FF27F8F827FD0FFF52F8F8F8A8FD68FFA85252%F876FD0DFFA8F82752A8A8FD48FF7D52527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D7D7D527D527D527D527D527D%527D527D5252527D767D527D527D527D527D527D527D527D527D527D527D%5276527D527D527D527D52A8FD28FF527DFFA8A8A8CAA8A8A8CAA8A8A8CA%A8A8A8CAA8A8A8CAA8A8A8CAA8A8A8CAA8A8A8CAA8CFA8CAA8A8A8CAA8A8%A8CAA8A8A8FFA8A8A8CAA8A8A8CAA8A8A8CAA8A8A8CAA8A8A8CAA8A8A8FF%A89A99C3A1A9A8FFA8A8A87D7DFD28FF52A0C2C3C2C3C2C3C2C3C2C3C2C3%C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3%C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3%C2C3BCC2BCC2C2CAFD04FF7D7DFD28FF5275C299C29AC299C29AC299C29A%C299C29AC299C29AC299C29AC299C29AC299C29AC299C299C275C29AC299%A09AC299C299C299C29AC299C29AC299C29AC299C29AC299C29AC299C29A%C299C29AC299C299C2A1FFFF7D76FD28FF529ABCC2C2C2BCC2C2C2BCC2C2%C2BCC2C2C2BCC2C2C2BCC2C2C2BCC2C2C2BCC2C2C2BCC2BCA0767CA0A076%C276A0BCA176A0BCC2C2C2BCC2C2C2BCC2C2C2BCC2C2C2BCC2C2C2BCC2C2%C2BCC2BCC2BCC2C2C2BCC2BCC97D7DFD28FF7675C29AC29AC29AC29AC29A%C29AC29AC29AC29AC29AC29AC29AC29AC29AC29AC29AC29AC276A076A076%529AA09AC2767676C29AC29AC29AC29AC29AC29AC29AC29AC29AC29AC29A%C29AC29AC29AC29AC29ABC9AC9CA7D7DFD28FF529ABCC29AC2BCC29AC2BC%C29AC2BCC29AC2BCC29AC2BCC29AC2BCC29AC2BCC29AC2BCC299C2769A9A%A076C29AA09AA076A0BCC29AC2BCC29AC2BCC29AC2BCC29AC2BCC29AC2BC%C29AC2BCC2BCC2C2C2BCC3C9FFFFFF7D7DFD28FF527CCAC9CAA1CAC9CAA1%CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1CAC3%C9A1CAC9CAA1CAC9C9A1CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1CAC9CAA1%CAC9CAA1CAC3C299C2A0CACAFD04FF7D7DFD28FF52A8FFFFA9FFAFFFA9FF%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF%A8FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF%AFFFA9FFAFFF9AC3A8FFA9FFA8FFA8FF767DFD28FF7D4B76525252765252%527652525276525252765252527652525276525252765252527652525276%525252765252527652525276525252765252527652525276525252765252%5276525252765252525952525276FD04527DFDFCFFFD14FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T11:20:11+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T11:20:11+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T11:20:11+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqkH5g6p&#xA;faT5C8y6rp8vo3+n6Ve3VpNxV+E0Nu8kbcXDKaMoNCCMVQv+DvMX/U865/yJ0T/vG4q7/B3mL/qe&#xA;dc/5E6J/3jcVd/g7zF/1POuf8idE/wC8birv8HeYv+p51z/kTon/AHjcVd/g7zF/1POuf8idE/7x&#xA;uKu/wd5i/wCp51z/AJE6J/3jcVd/g7zF/wBTzrn/ACJ0T/vG4q7/AAd5i/6nnXP+ROif943FXf4O&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0C352559142068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0C352559142068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0C352559142068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T11:20:11+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -176.494 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 176.494 li
252 176.494 li
252 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 176.494 mo
252 176.494 li
252 0 li
0 0 li
0 176.494 li
clp
gsave
0 176.494 mo
252 176.494 li
252 0 li
0 0 li
0 176.494 li
clp
gsave
0 176.494 mo
252 176.494 li
252 0 li
0 0 li
0 176.494 li
clp
gsave
46.2471 168.589 mo
195.371 168.589 li
195.371 157.972 li
46.2471 157.972 li
46.2471 168.589 li
clp
195.056 168.589 mo
46.2471 168.589 li
46.2471 157.972 li
195.056 157.972 li
195.056 168.589 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .591757 .631373 0 cmyk
f
grestore
gsave
195.056 171.775 mo
215.231 171.775 li
215.231 154.786 li
195.056 154.786 li
195.056 171.775 li
clp
195.056 171.775 mo
195.056 171.775 li
195.056 168.589 li
195.371 168.589 li
195.371 157.972 li
195.056 157.972 li
195.056 154.786 li
215.231 163.281 li
195.056 171.775 li
false sop
0 .591757 .631373 0 cmyk
f
195.371 168.589 mo
195.056 168.589 li
195.056 157.972 li
195.371 157.972 li
195.371 168.589 li
0 .808612 .862745 0 cmyk
f
grestore
gsave
12.2696 117.623 mo
77.3931 117.623 li
77.3931 107.005 li
12.2696 107.005 li
12.2696 117.623 li
clp
77.0391 117.623 mo
12.2696 117.623 li
12.2696 107.005 li
77.0391 107.005 li
77.0391 117.623 li
false sop
0 .591757 .631373 0 cmyk
f
grestore
gsave
77.0391 120.809 mo
97.2134 120.809 li
97.2134 103.82 li
77.0391 103.82 li
77.0391 120.809 li
clp
77.0391 120.809 mo
77.0391 120.809 li
77.0391 117.623 li
77.3931 117.623 li
77.3931 107.005 li
77.0391 107.005 li
77.0391 103.82 li
97.2134 112.314 li
77.0391 120.809 li
false sop
0 .591757 .631373 0 cmyk
f
77.3931 117.623 mo
77.0391 117.623 li
77.0391 107.005 li
77.3931 107.005 li
77.3931 117.623 li
0 .808612 .862745 0 cmyk
f
grestore
gsave
165.168 117.623 mo
230.292 117.623 li
230.292 107.005 li
165.168 107.005 li
165.168 117.623 li
clp
229.938 117.623 mo
165.168 117.623 li
165.168 107.005 li
229.938 107.005 li
229.938 117.623 li
false sop
0 .591757 .631373 0 cmyk
f
grestore
gsave
229.938 120.809 mo
250.112 120.809 li
250.112 103.82 li
229.938 103.82 li
229.938 120.809 li
clp
229.938 120.809 mo
229.938 120.809 li
229.938 117.623 li
230.292 117.623 li
230.292 107.005 li
229.938 107.005 li
229.938 103.82 li
250.112 112.314 li
229.938 120.809 li
false sop
0 .591757 .631373 0 cmyk
f
230.292 117.623 mo
229.938 117.623 li
229.938 107.005 li
230.292 107.005 li
230.292 117.623 li
0 .808612 .862745 0 cmyk
f
grestore
grestore
165.64 104.292 mo
165.64 104.764 li
250.113 104.764 li
250.113 120.809 li
166.112 120.809 li
166.112 104.292 li
165.64 104.292 li
165.64 104.764 li
165.64 104.292 li
165.168 104.292 li
165.168 121.281 li
165.168 121.405 165.219 121.527 165.306 121.614 cv
165.394 121.702 165.516 121.753 165.64 121.753 cv
250.584 121.753 li
250.709 121.753 250.83 121.702 250.918 121.614 cv
251.006 121.527 251.056 121.405 251.056 121.281 cv
251.056 104.292 li
251.056 104.168 251.006 104.046 250.918 103.958 cv
250.83 103.87 250.709 103.82 250.584 103.82 cv
165.64 103.82 li
165.516 103.82 165.394 103.87 165.306 103.958 cv
165.219 104.046 165.168 104.168 165.168 104.292 cv
165.64 104.292 li
cp
false sop
.746 .676 .668 .898 cmyk
f
181.691 109.253 mo
181.691 115.192 li
182.261 115.192 li
182.367 115.192 182.442 115.211 182.486 115.25 cv
182.552 115.405 li
182.486 115.557 li
182.442 115.598 182.367 115.618 182.261 115.618 cv
181.265 115.618 li
181.265 114.771 li
180.771 115.446 180.144 115.784 179.384 115.784 cv
178.999 115.784 178.629 115.682 178.276 115.478 cv
177.923 115.273 177.644 114.982 177.44 114.604 cv
177.235 114.226 177.133 113.836 177.133 113.435 cv
177.133 113.03 177.235 112.639 177.44 112.263 cv
177.644 111.887 177.923 111.595 178.276 111.39 cv
178.629 111.184 179 111.081 179.389 111.081 cv
180.132 111.081 180.758 111.417 181.265 112.089 cv
181.265 109.679 li
180.694 109.679 li
180.588 109.679 180.513 109.659 180.469 109.62 cv
180.403 109.466 li
180.469 109.314 li
180.513 109.274 180.588 109.253 180.694 109.253 cv
181.691 109.253 li
cp
181.265 113.432 mo
181.265 112.892 181.083 112.436 180.717 112.064 cv
180.352 111.692 179.917 111.506 179.415 111.506 cv
178.907 111.506 178.471 111.692 178.106 112.064 cv
177.741 112.436 177.558 112.892 177.558 113.432 cv
177.558 113.969 177.741 114.425 178.106 114.798 cv
178.471 115.171 178.907 115.358 179.415 115.358 cv
179.917 115.358 180.352 115.171 180.717 114.798 cv
181.083 114.425 181.265 113.969 181.265 113.432 cv
cp
0 0 0 1 cmyk
f
187.058 115.618 mo
187.058 115.004 li
186.437 115.524 185.774 115.784 185.068 115.784 cv
184.556 115.784 184.156 115.655 183.868 115.396 cv
183.579 115.138 183.435 114.822 183.435 114.447 cv
183.435 114.035 183.625 113.676 184.004 113.369 cv
184.384 113.062 184.939 112.908 185.668 112.908 cv
185.866 112.908 186.08 112.921 186.31 112.946 cv
186.541 112.971 186.791 113.011 187.058 113.065 cv
187.058 112.375 li
187.058 112.141 186.95 111.938 186.732 111.765 cv
186.514 111.593 186.189 111.506 185.753 111.506 cv
185.421 111.506 184.954 111.604 184.353 111.798 cv
184.243 111.832 184.172 111.849 184.142 111.849 cv
184.002 111.788 li
183.944 111.637 li
183.995 111.5 li
184.042 111.45 184.234 111.381 184.569 111.293 cv
185.098 111.151 185.499 111.081 185.77 111.081 cv
186.309 111.081 186.729 111.213 187.031 111.478 cv
187.333 111.743 187.484 112.043 187.484 112.377 cv
187.484 115.192 li
188.055 115.192 li
188.161 115.192 188.235 115.211 188.279 115.25 cv
188.345 115.405 li
188.279 115.557 li
188.235 115.598 188.161 115.618 188.055 115.618 cv
187.058 115.618 li
cp
187.058 113.501 mo
186.858 113.443 186.646 113.401 186.421 113.374 cv
186.198 113.347 185.961 113.333 185.713 113.333 cv
185.092 113.333 184.607 113.467 184.257 113.733 cv
183.993 113.933 183.861 114.17 183.861 114.447 cv
183.861 114.704 183.961 114.919 184.164 115.095 cv
184.366 115.271 184.66 115.358 185.047 115.358 cv
185.417 115.358 185.76 115.285 186.078 115.138 cv
186.395 114.991 186.722 114.758 187.058 114.437 cv
187.058 113.501 li
cp
f
191.18 111.226 mo
193.485 111.226 li
193.588 111.226 193.663 111.246 193.708 111.286 cv
193.775 111.439 li
193.708 111.591 li
193.663 111.631 193.588 111.652 193.485 111.652 cv
191.18 111.652 li
191.18 114.49 li
191.18 114.737 191.279 114.943 191.476 115.109 cv
191.674 115.275 191.963 115.358 192.346 115.358 cv
192.633 115.358 192.944 115.315 193.279 115.229 cv
193.613 115.143 193.874 115.046 194.059 114.938 cv
194.227 114.872 li
194.369 114.935 li
194.429 115.084 li
194.364 115.227 li
194.255 115.338 193.993 115.459 193.577 115.589 cv
193.16 115.719 192.76 115.784 192.379 115.784 cv
191.883 115.784 191.488 115.667 191.195 115.434 cv
190.901 115.2 190.754 114.885 190.754 114.489 cv
190.754 111.652 li
189.968 111.652 li
189.868 111.652 189.794 111.632 189.75 111.592 cv
189.685 111.437 li
189.75 111.286 li
189.794 111.246 189.868 111.226 189.968 111.226 cv
190.754 111.226 li
190.754 109.964 li
190.754 109.862 190.774 109.79 190.814 109.745 cv
190.964 109.679 li
191.12 109.745 li
191.16 109.79 191.18 109.862 191.18 109.964 cv
191.18 111.226 li
cp
f
199.516 115.618 mo
199.516 115.004 li
198.896 115.524 198.232 115.784 197.527 115.784 cv
197.014 115.784 196.614 115.655 196.326 115.396 cv
196.038 115.138 195.893 114.822 195.893 114.447 cv
195.893 114.035 196.083 113.676 196.463 113.369 cv
196.843 113.062 197.398 112.908 198.127 112.908 cv
198.324 112.908 198.538 112.921 198.768 112.946 cv
199 112.971 199.249 113.011 199.516 113.065 cv
199.516 112.375 li
199.516 112.141 199.408 111.938 199.19 111.765 cv
198.973 111.593 198.647 111.506 198.212 111.506 cv
197.879 111.506 197.413 111.604 196.811 111.798 cv
196.702 111.832 196.631 111.849 196.601 111.849 cv
196.46 111.788 li
196.402 111.637 li
196.453 111.5 li
196.5 111.45 196.692 111.381 197.028 111.293 cv
197.556 111.151 197.957 111.081 198.228 111.081 cv
198.767 111.081 199.188 111.213 199.49 111.478 cv
199.792 111.743 199.942 112.043 199.942 112.377 cv
199.942 115.192 li
200.513 115.192 li
200.619 115.192 200.694 115.211 200.738 115.25 cv
200.804 115.405 li
200.738 115.557 li
200.694 115.598 200.619 115.618 200.513 115.618 cv
199.516 115.618 li
cp
199.516 113.501 mo
199.316 113.443 199.104 113.401 198.88 113.374 cv
198.656 113.347 198.42 113.333 198.172 113.333 cv
197.551 113.333 197.066 113.467 196.716 113.733 cv
196.452 113.933 196.319 114.17 196.319 114.447 cv
196.319 114.704 196.419 114.919 196.622 115.095 cv
196.824 115.271 197.119 115.358 197.505 115.358 cv
197.875 115.358 198.219 115.285 198.537 115.138 cv
198.854 114.991 199.18 114.758 199.516 114.437 cv
199.516 113.501 li
cp
f
204.728 109.679 mo
204.728 116.5 li
205.756 116.5 li
205.856 116.5 205.928 116.52 205.971 116.559 cv
206.037 116.713 li
205.971 116.868 li
205.928 116.906 205.856 116.926 205.756 116.926 cv
204.302 116.926 li
204.302 109.253 li
205.756 109.253 li
205.856 109.253 205.928 109.273 205.971 109.313 cv
206.037 109.469 li
205.971 109.619 li
205.928 109.659 205.856 109.679 205.756 109.679 cv
204.728 109.679 li
cp
f
208.808 111.226 mo
208.808 111.659 li
209.168 111.273 209.53 111.081 209.894 111.081 cv
210.113 111.081 210.304 111.139 210.469 111.254 cv
210.634 111.37 210.772 111.545 210.883 111.78 cv
211.073 111.545 211.265 111.37 211.46 111.254 cv
211.656 111.139 211.852 111.081 212.048 111.081 cv
212.358 111.081 212.603 111.18 212.787 111.379 cv
213.028 111.636 213.148 111.916 213.148 112.22 cv
213.148 115.192 li
213.501 115.192 li
213.605 115.192 213.679 115.211 213.724 115.25 cv
213.792 115.405 li
213.724 115.557 li
213.679 115.598 213.605 115.618 213.501 115.618 cv
212.722 115.618 li
212.722 112.257 li
212.722 112.041 212.656 111.861 212.524 111.719 cv
212.391 111.577 212.238 111.506 212.065 111.506 cv
211.908 111.506 211.744 111.564 211.57 111.681 cv
211.397 111.798 211.2 112.027 210.978 112.368 cv
210.978 115.192 li
211.332 115.192 li
211.435 115.192 211.509 115.211 211.554 115.25 cv
211.622 115.405 li
211.554 115.557 li
211.509 115.598 211.435 115.618 211.332 115.618 cv
210.552 115.618 li
210.552 112.287 li
210.552 112.061 210.486 111.874 210.353 111.727 cv
210.22 111.58 210.071 111.506 209.906 111.506 cv
209.753 111.506 209.604 111.556 209.456 111.653 cv
209.25 111.792 209.035 112.03 208.808 112.368 cv
208.808 115.192 li
209.162 115.192 li
209.265 115.192 209.339 115.211 209.384 115.25 cv
209.452 115.405 li
209.384 115.557 li
209.339 115.598 209.265 115.618 209.162 115.618 cv
208.03 115.618 li
207.926 115.618 207.851 115.598 207.806 115.557 cv
207.739 115.405 li
207.806 115.25 li
207.851 115.211 207.926 115.192 208.03 115.192 cv
208.382 115.192 li
208.382 111.652 li
208.03 111.652 li
207.926 111.652 207.851 111.632 207.806 111.592 cv
207.739 111.439 li
207.806 111.287 li
207.851 111.246 207.926 111.226 208.03 111.226 cv
208.808 111.226 li
cp
f
217.197 109.046 mo
217.197 110.136 li
216.564 110.136 li
216.564 109.046 li
217.197 109.046 li
cp
217.208 111.226 mo
217.208 115.192 li
218.869 115.192 li
218.974 115.192 219.049 115.211 219.093 115.25 cv
219.16 115.405 li
219.093 115.557 li
219.049 115.598 218.974 115.618 218.869 115.618 cv
215.11 115.618 li
215.01 115.618 214.938 115.598 214.895 115.557 cv
214.83 115.405 li
214.895 115.25 li
214.938 115.211 215.01 115.192 215.11 115.192 cv
216.782 115.192 li
216.782 111.652 li
215.546 111.652 li
215.445 111.652 215.371 111.632 215.325 111.592 cv
215.255 111.441 li
215.322 111.286 li
215.366 111.246 215.441 111.226 215.546 111.226 cv
217.208 111.226 li
cp
f
225.295 109.253 mo
225.295 115.192 li
225.866 115.192 li
225.971 115.192 226.046 115.211 226.09 115.25 cv
226.157 115.405 li
226.09 115.557 li
226.046 115.598 225.971 115.618 225.866 115.618 cv
224.87 115.618 li
224.87 114.771 li
224.375 115.446 223.749 115.784 222.989 115.784 cv
222.603 115.784 222.234 115.682 221.88 115.478 cv
221.528 115.273 221.249 114.982 221.044 114.604 cv
220.839 114.226 220.738 113.836 220.738 113.435 cv
220.738 113.03 220.839 112.639 221.044 112.263 cv
221.249 111.887 221.528 111.595 221.88 111.39 cv
222.234 111.184 222.605 111.081 222.994 111.081 cv
223.737 111.081 224.363 111.417 224.87 112.089 cv
224.87 109.679 li
224.298 109.679 li
224.193 109.679 224.118 109.659 224.074 109.62 cv
224.007 109.466 li
224.074 109.314 li
224.118 109.274 224.193 109.253 224.298 109.253 cv
225.295 109.253 li
cp
224.87 113.432 mo
224.87 112.892 224.687 112.436 224.322 112.064 cv
223.957 111.692 223.522 111.506 223.019 111.506 cv
222.512 111.506 222.076 111.692 221.71 112.064 cv
221.345 112.436 221.163 112.892 221.163 113.432 cv
221.163 113.969 221.345 114.425 221.71 114.798 cv
222.076 115.171 222.512 115.358 223.019 115.358 cv
223.522 115.358 223.957 115.171 224.322 114.798 cv
224.687 114.425 224.87 113.969 224.87 113.432 cv
cp
f
229.346 111.226 mo
229.529 111.226 li
229.717 111.226 229.879 111.293 230.014 111.428 cv
230.149 111.562 230.216 111.722 230.216 111.906 cv
230.216 112.104 230.148 112.269 230.011 112.4 cv
229.875 112.531 229.713 112.597 229.529 112.597 cv
229.346 112.597 li
229.158 112.597 228.996 112.529 228.861 112.395 cv
228.726 112.261 228.659 112.101 228.659 111.917 cv
228.659 111.718 228.727 111.554 228.864 111.423 cv
229 111.292 229.161 111.226 229.346 111.226 cv
cp
229.346 114.403 mo
229.529 114.403 li
229.717 114.403 229.879 114.47 230.014 114.603 cv
230.149 114.736 230.216 114.897 230.216 115.085 cv
230.216 115.281 230.148 115.445 230.011 115.576 cv
229.875 115.708 229.713 115.773 229.529 115.773 cv
229.346 115.773 li
229.158 115.773 228.996 115.707 228.861 115.574 cv
228.726 115.44 228.659 115.279 228.659 115.091 cv
228.659 114.896 228.727 114.732 228.864 114.6 cv
229 114.469 229.161 114.403 229.346 114.403 cv
cp
f
235.469 116.5 mo
235.469 109.679 li
234.442 109.679 li
234.341 109.679 234.27 109.659 234.226 109.619 cv
234.162 109.469 li
234.226 109.313 li
234.27 109.273 234.341 109.253 234.442 109.253 cv
235.895 109.253 li
235.895 116.926 li
234.442 116.926 li
234.341 116.926 234.27 116.906 234.226 116.868 cv
234.162 116.713 li
234.226 116.561 li
234.27 116.521 234.341 116.5 234.442 116.5 cv
235.469 116.5 li
cp
f
12.7417 104.292 mo
12.7417 104.764 li
97.2131 104.764 li
97.2131 120.809 li
13.2136 120.809 li
13.2136 104.292 li
12.7417 104.292 li
12.7417 104.764 li
12.7417 104.292 li
12.2698 104.292 li
12.2698 121.281 li
12.2698 121.405 12.3201 121.527 12.408 121.614 cv
12.4959 121.702 12.6174 121.753 12.7417 121.753 cv
97.6851 121.753 li
97.8093 121.753 97.9309 121.702 98.0187 121.614 cv
98.1066 121.527 98.157 121.405 98.157 121.281 cv
98.157 104.292 li
98.157 104.168 98.1066 104.046 98.0187 103.958 cv
97.9309 103.87 97.8093 103.82 97.6851 103.82 cv
12.7417 103.82 li
12.6174 103.82 12.4959 103.87 12.408 103.958 cv
12.3201 104.046 12.2698 104.168 12.2698 104.292 cv
12.7417 104.292 li
cp
.746 .676 .668 .898 cmyk
f
28.7915 109.253 mo
28.7915 115.192 li
29.3628 115.192 li
29.4683 115.192 29.543 115.211 29.5869 115.25 cv
29.6533 115.405 li
29.5869 115.557 li
29.543 115.598 29.4683 115.618 29.3628 115.618 cv
28.3662 115.618 li
28.3662 114.771 li
27.8726 115.446 27.2456 115.784 26.4854 115.784 cv
26.0996 115.784 25.7305 115.682 25.3774 115.478 cv
25.0239 115.273 24.7451 114.982 24.541 114.604 cv
24.3364 114.226 24.2339 113.836 24.2339 113.435 cv
24.2339 113.03 24.3364 112.639 24.541 112.263 cv
24.7451 111.887 25.0239 111.595 25.3774 111.39 cv
25.7305 111.184 26.1016 111.081 26.4902 111.081 cv
27.2339 111.081 27.8589 111.417 28.3662 112.089 cv
28.3662 109.679 li
27.7949 109.679 li
27.6895 109.679 27.6147 109.659 27.5708 109.62 cv
27.5044 109.466 li
27.5708 109.314 li
27.6147 109.274 27.6895 109.253 27.7949 109.253 cv
28.7915 109.253 li
cp
28.3662 113.432 mo
28.3662 112.892 28.1836 112.436 27.8184 112.064 cv
27.4536 111.692 27.019 111.506 26.5156 111.506 cv
26.0083 111.506 25.5723 111.692 25.207 112.064 cv
24.8423 112.436 24.6597 112.892 24.6597 113.432 cv
24.6597 113.969 24.8423 114.425 25.207 114.798 cv
25.5723 115.171 26.0083 115.358 26.5156 115.358 cv
27.019 115.358 27.4536 115.171 27.8184 114.798 cv
28.1836 114.425 28.3662 113.969 28.3662 113.432 cv
cp
0 0 0 1 cmyk
f
34.1592 115.618 mo
34.1592 115.004 li
33.5386 115.524 32.875 115.784 32.1694 115.784 cv
31.6572 115.784 31.2568 115.655 30.9683 115.396 cv
30.6802 115.138 30.5361 114.822 30.5361 114.447 cv
30.5361 114.035 30.7261 113.676 31.106 113.369 cv
31.4858 113.062 32.0405 112.908 32.77 112.908 cv
32.9668 112.908 33.1802 112.921 33.4111 112.946 cv
33.6421 112.971 33.8911 113.011 34.1592 113.065 cv
34.1592 112.375 li
34.1592 112.141 34.0508 111.938 33.833 111.765 cv
33.6157 111.593 33.2896 111.506 32.855 111.506 cv
32.522 111.506 32.0552 111.604 31.4541 111.798 cv
31.3442 111.832 31.2739 111.849 31.2432 111.849 cv
31.103 111.788 li
31.0444 111.637 li
31.0957 111.5 li
31.1431 111.45 31.3345 111.381 31.6704 111.293 cv
32.1992 111.151 32.5996 111.081 32.8706 111.081 cv
33.4102 111.081 33.8306 111.213 34.1323 111.478 cv
34.4341 111.743 34.585 112.043 34.585 112.377 cv
34.585 115.192 li
35.1558 115.192 li
35.2612 115.192 35.3359 115.211 35.3804 115.25 cv
35.4468 115.405 li
35.3804 115.557 li
35.3359 115.598 35.2612 115.618 35.1558 115.618 cv
34.1592 115.618 li
cp
34.1592 113.501 mo
33.959 113.443 33.7466 113.401 33.5225 113.374 cv
33.2988 113.347 33.063 113.333 32.8149 113.333 cv
32.1938 113.333 31.7085 113.467 31.3589 113.733 cv
31.0938 113.933 30.9614 114.17 30.9614 114.447 cv
30.9614 114.704 31.0625 114.919 31.2646 115.095 cv
31.4663 115.271 31.7612 115.358 32.1479 115.358 cv
32.5181 115.358 32.8618 115.285 33.1792 115.138 cv
33.4966 114.991 33.8232 114.758 34.1592 114.437 cv
34.1592 113.501 li
cp
f
38.2808 111.226 mo
40.5859 111.226 li
40.6895 111.226 40.7642 111.246 40.8091 111.286 cv
40.8765 111.439 li
40.8091 111.591 li
40.7642 111.631 40.6895 111.652 40.5859 111.652 cv
38.2808 111.652 li
38.2808 114.49 li
38.2808 114.737 38.3799 114.943 38.5776 115.109 cv
38.7749 115.275 39.0649 115.358 39.4468 115.358 cv
39.7344 115.358 40.0449 115.315 40.3799 115.229 cv
40.7144 115.143 40.9746 115.046 41.1606 114.938 cv
41.3276 114.872 li
41.4697 114.935 li
41.5303 115.084 li
41.4648 115.227 li
41.3564 115.338 41.0942 115.459 40.6777 115.589 cv
40.2607 115.719 39.8618 115.784 39.48 115.784 cv
38.9839 115.784 38.5894 115.667 38.2954 115.434 cv
38.002 115.2 37.8555 114.885 37.8555 114.489 cv
37.8555 111.652 li
37.0698 111.652 li
36.9683 111.652 36.8955 111.632 36.8516 111.592 cv
36.7856 111.437 li
36.8516 111.286 li
36.8955 111.246 36.9683 111.226 37.0698 111.226 cv
37.8555 111.226 li
37.8555 109.964 li
37.8555 109.862 37.8755 109.79 37.915 109.745 cv
38.0654 109.679 li
38.2207 109.745 li
38.2607 109.79 38.2808 109.862 38.2808 109.964 cv
38.2808 111.226 li
cp
f
46.6177 115.618 mo
46.6177 115.004 li
45.9966 115.524 45.3335 115.784 44.6279 115.784 cv
44.1157 115.784 43.7153 115.655 43.4268 115.396 cv
43.1387 115.138 42.9941 114.822 42.9941 114.447 cv
42.9941 114.035 43.1841 113.676 43.564 113.369 cv
43.9443 113.062 44.499 112.908 45.2285 112.908 cv
45.4253 112.908 45.6387 112.921 45.8696 112.946 cv
46.1001 112.971 46.3496 113.011 46.6177 113.065 cv
46.6177 112.375 li
46.6177 112.141 46.5088 111.938 46.2915 111.765 cv
46.0742 111.593 45.748 111.506 45.3135 111.506 cv
44.9805 111.506 44.5137 111.604 43.9121 111.798 cv
43.8027 111.832 43.7324 111.849 43.7017 111.849 cv
43.5615 111.788 li
43.5029 111.637 li
43.5542 111.5 li
43.6016 111.45 43.793 111.381 44.1289 111.293 cv
44.6577 111.151 45.0576 111.081 45.3291 111.081 cv
45.8682 111.081 46.2891 111.213 46.5903 111.478 cv
46.8926 111.743 47.0435 112.043 47.0435 112.377 cv
47.0435 115.192 li
47.6143 115.192 li
47.7197 115.192 47.7944 115.211 47.8389 115.25 cv
47.9048 115.405 li
47.8389 115.557 li
47.7944 115.598 47.7197 115.618 47.6143 115.618 cv
46.6177 115.618 li
cp
46.6177 113.501 mo
46.4175 113.443 46.2051 113.401 45.981 113.374 cv
45.7573 113.347 45.521 113.333 45.2734 113.333 cv
44.6523 113.333 44.1665 113.467 43.8169 113.733 cv
43.5522 113.933 43.4199 114.17 43.4199 114.447 cv
43.4199 114.704 43.521 114.919 43.7227 115.095 cv
43.9248 115.271 44.2192 115.358 44.6064 115.358 cv
44.9766 115.358 45.3203 115.285 45.6377 115.138 cv
45.9551 114.991 46.2817 114.758 46.6177 114.437 cv
46.6177 113.501 li
cp
f
51.8296 109.679 mo
51.8296 116.5 li
52.8574 116.5 li
52.9575 116.5 53.0293 116.52 53.0728 116.559 cv
53.1377 116.713 li
53.0728 116.868 li
53.0293 116.906 52.9575 116.926 52.8574 116.926 cv
51.4038 116.926 li
51.4038 109.253 li
52.8574 109.253 li
52.9575 109.253 53.0293 109.273 53.0728 109.313 cv
53.1377 109.469 li
53.0728 109.619 li
53.0293 109.659 52.9575 109.679 52.8574 109.679 cv
51.8296 109.679 li
cp
f
57.7603 111.226 mo
57.9419 111.226 li
58.1309 111.226 58.2925 111.293 58.4272 111.428 cv
58.562 111.562 58.6299 111.722 58.6299 111.906 cv
58.6299 112.104 58.5615 112.269 58.4248 112.4 cv
58.2881 112.531 58.1274 112.597 57.9419 112.597 cv
57.7603 112.597 li
57.5713 112.597 57.4097 112.529 57.2744 112.395 cv
57.1396 112.261 57.0723 112.101 57.0723 111.917 cv
57.0723 111.718 57.1406 111.554 57.2769 111.423 cv
57.4136 111.292 57.5747 111.226 57.7603 111.226 cv
cp
57.7603 114.403 mo
57.9419 114.403 li
58.1309 114.403 58.2925 114.47 58.4272 114.603 cv
58.562 114.736 58.6299 114.897 58.6299 115.085 cv
58.6299 115.281 58.5615 115.445 58.4248 115.576 cv
58.2881 115.708 58.1274 115.773 57.9419 115.773 cv
57.7603 115.773 li
57.5713 115.773 57.4097 115.707 57.2744 115.574 cv
57.1396 115.44 57.0723 115.279 57.0723 115.091 cv
57.0723 114.896 57.1406 114.732 57.2769 114.6 cv
57.4136 114.469 57.5747 114.403 57.7603 114.403 cv
cp
f
62.1387 111.226 mo
62.1387 111.659 li
62.499 111.273 62.8604 111.081 63.2241 111.081 cv
63.4429 111.081 63.6348 111.139 63.7993 111.254 cv
63.9644 111.37 64.1025 111.545 64.2134 111.78 cv
64.4033 111.545 64.5962 111.37 64.791 111.254 cv
64.9863 111.139 65.1821 111.081 65.3789 111.081 cv
65.688 111.081 65.9341 111.18 66.1172 111.379 cv
66.3579 111.636 66.4785 111.916 66.4785 112.22 cv
66.4785 115.192 li
66.8315 115.192 li
66.9351 115.192 67.0098 115.211 67.0547 115.25 cv
67.1221 115.405 li
67.0547 115.557 li
67.0098 115.598 66.9351 115.618 66.8315 115.618 cv
66.0527 115.618 li
66.0527 112.257 li
66.0527 112.041 65.9863 111.861 65.854 111.719 cv
65.7212 111.577 65.5684 111.506 65.395 111.506 cv
65.2383 111.506 65.0737 111.564 64.9004 111.681 cv
64.7271 111.798 64.5298 112.027 64.3086 112.368 cv
64.3086 115.192 li
64.6616 115.192 li
64.7656 115.192 64.8398 115.211 64.8848 115.25 cv
64.9521 115.405 li
64.8848 115.557 li
64.8398 115.598 64.7656 115.618 64.6616 115.618 cv
63.8828 115.618 li
63.8828 112.287 li
63.8828 112.061 63.8164 111.874 63.6831 111.727 cv
63.5503 111.58 63.4009 111.506 63.2358 111.506 cv
63.084 111.506 62.9341 111.556 62.7856 111.653 cv
62.5801 111.792 62.3647 112.03 62.1387 112.368 cv
62.1387 115.192 li
62.4917 115.192 li
62.5957 115.192 62.6699 115.211 62.7148 115.25 cv
62.7827 115.405 li
62.7148 115.557 li
62.6699 115.598 62.5957 115.618 62.4917 115.618 cv
61.3604 115.618 li
61.2563 115.618 61.1821 115.598 61.1367 115.557 cv
61.0693 115.405 li
61.1367 115.25 li
61.1821 115.211 61.2563 115.192 61.3604 115.192 cv
61.7129 115.192 li
61.7129 111.652 li
61.3604 111.652 li
61.2563 111.652 61.1821 111.632 61.1367 111.592 cv
61.0693 111.439 li
61.1367 111.287 li
61.1821 111.246 61.2563 111.226 61.3604 111.226 cv
62.1387 111.226 li
cp
f
70.5273 109.046 mo
70.5273 110.136 li
69.894 110.136 li
69.894 109.046 li
70.5273 109.046 li
cp
70.5376 111.226 mo
70.5376 115.192 li
72.1987 115.192 li
72.3042 115.192 72.3794 115.211 72.4233 115.25 cv
72.4897 115.405 li
72.4233 115.557 li
72.3794 115.598 72.3042 115.618 72.1987 115.618 cv
68.4409 115.618 li
68.3403 115.618 68.2686 115.598 68.2256 115.557 cv
68.1602 115.405 li
68.2256 115.25 li
68.2686 115.211 68.3403 115.192 68.4409 115.192 cv
70.1123 115.192 li
70.1123 111.652 li
68.8765 111.652 li
68.7749 111.652 68.7007 111.632 68.6548 111.592 cv
68.5859 111.441 li
68.6523 111.286 li
68.6963 111.246 68.7715 111.226 68.8765 111.226 cv
70.5376 111.226 li
cp
f
78.6255 109.253 mo
78.6255 115.192 li
79.1963 115.192 li
79.3018 115.192 79.3765 115.211 79.4209 115.25 cv
79.4873 115.405 li
79.4209 115.557 li
79.3765 115.598 79.3018 115.618 79.1963 115.618 cv
78.1997 115.618 li
78.1997 114.771 li
77.7065 115.446 77.0791 115.784 76.3188 115.784 cv
75.9336 115.784 75.5645 115.682 75.2109 115.478 cv
74.8579 115.273 74.5791 114.982 74.3745 114.604 cv
74.1699 114.226 74.0679 113.836 74.0679 113.435 cv
74.0679 113.03 74.1699 112.639 74.3745 112.263 cv
74.5791 111.887 74.8579 111.595 75.2109 111.39 cv
75.5645 111.184 75.9351 111.081 76.3237 111.081 cv
77.0674 111.081 77.6929 111.417 78.1997 112.089 cv
78.1997 109.679 li
77.6289 109.679 li
77.5234 109.679 77.4487 109.659 77.4043 109.62 cv
77.3379 109.466 li
77.4043 109.314 li
77.4487 109.274 77.5234 109.253 77.6289 109.253 cv
78.6255 109.253 li
cp
78.1997 113.432 mo
78.1997 112.892 78.0171 112.436 77.6523 112.064 cv
77.2871 111.692 76.853 111.506 76.3491 111.506 cv
75.8423 111.506 75.4058 111.692 75.041 112.064 cv
74.6758 112.436 74.4932 112.892 74.4932 113.432 cv
74.4932 113.969 74.6758 114.425 75.041 114.798 cv
75.4058 115.171 75.8423 115.358 76.3491 115.358 cv
76.853 115.358 77.2871 115.171 77.6523 114.798 cv
78.0171 114.425 78.1997 113.969 78.1997 113.432 cv
cp
f
82.5708 116.5 mo
82.5708 109.679 li
81.543 109.679 li
81.4429 109.679 81.3711 109.659 81.3276 109.619 cv
81.2627 109.469 li
81.3276 109.313 li
81.3711 109.273 81.4429 109.253 81.543 109.253 cv
82.9961 109.253 li
82.9961 116.926 li
81.543 116.926 li
81.4429 116.926 81.3711 116.906 81.3276 116.868 cv
81.2627 116.713 li
81.3276 116.561 li
81.3711 116.521 81.4429 116.5 81.543 116.5 cv
82.5708 116.5 li
cp
f
46.7192 155.258 mo
46.7192 155.73 li
216.135 155.73 li
216.135 171.776 li
47.1911 171.776 li
47.1911 155.258 li
46.7192 155.258 li
46.7192 155.73 li
46.7192 155.258 li
46.2473 155.258 li
46.2473 172.248 li
46.2473 172.372 46.2977 172.493 46.3855 172.581 cv
46.4734 172.669 46.595 172.719 46.7192 172.719 cv
216.607 172.719 li
216.731 172.719 216.853 172.669 216.941 172.581 cv
217.028 172.493 217.079 172.372 217.079 172.248 cv
217.079 155.258 li
217.079 155.134 217.028 155.012 216.941 154.925 cv
216.853 154.837 216.731 154.786 216.607 154.786 cv
46.7192 154.786 li
46.595 154.786 46.4734 154.837 46.3855 154.925 cv
46.2977 155.012 46.2473 155.134 46.2473 155.258 cv
46.7192 155.258 li
cp
.746 .676 .668 .898 cmyk
f
123.932 160.22 mo
123.932 166.158 li
124.503 166.158 li
124.608 166.158 124.683 166.177 124.727 166.216 cv
124.793 166.371 li
124.727 166.523 li
124.683 166.564 124.608 166.583 124.503 166.583 cv
123.506 166.583 li
123.506 165.736 li
123.013 166.412 122.386 166.75 121.625 166.75 cv
121.24 166.75 120.871 166.648 120.518 166.444 cv
120.165 166.24 119.885 165.949 119.681 165.571 cv
119.477 165.193 119.374 164.802 119.374 164.402 cv
119.374 163.996 119.477 163.605 119.681 163.229 cv
119.885 162.853 120.165 162.562 120.518 162.356 cv
120.871 162.15 121.242 162.046 121.63 162.046 cv
122.374 162.046 122.999 162.383 123.506 163.056 cv
123.506 160.646 li
122.935 160.646 li
122.83 160.646 122.755 160.625 122.711 160.585 cv
122.645 160.433 li
122.711 160.281 li
122.755 160.24 122.83 160.22 122.935 160.22 cv
123.932 160.22 li
cp
123.506 164.398 mo
123.506 163.858 123.324 163.402 122.958 163.031 cv
122.594 162.659 122.159 162.472 121.656 162.472 cv
121.148 162.472 120.712 162.659 120.347 163.031 cv
119.982 163.402 119.8 163.858 119.8 164.398 cv
119.8 164.935 119.982 165.391 120.347 165.765 cv
120.712 166.138 121.148 166.324 121.656 166.324 cv
122.159 166.324 122.594 166.138 122.958 165.765 cv
123.324 165.391 123.506 164.935 123.506 164.398 cv
cp
0 0 0 1 cmyk
f
129.299 166.583 mo
129.299 165.97 li
128.679 166.49 128.015 166.75 127.31 166.75 cv
126.797 166.75 126.397 166.621 126.108 166.363 cv
125.82 166.105 125.676 165.789 125.676 165.414 cv
125.676 165.001 125.866 164.642 126.246 164.335 cv
126.626 164.028 127.181 163.875 127.91 163.875 cv
128.107 163.875 128.321 163.886 128.551 163.912 cv
128.782 163.937 129.031 163.977 129.299 164.031 cv
129.299 163.341 li
129.299 163.107 129.191 162.904 128.973 162.732 cv
128.756 162.559 128.43 162.472 127.995 162.472 cv
127.662 162.472 127.195 162.57 126.594 162.764 cv
126.484 162.798 126.414 162.816 126.383 162.816 cv
126.243 162.755 li
126.185 162.603 li
126.236 162.466 li
126.283 162.416 126.475 162.347 126.811 162.259 cv
127.339 162.118 127.74 162.046 128.011 162.046 cv
128.55 162.046 128.971 162.179 129.272 162.445 cv
129.574 162.709 129.725 163.009 129.725 163.343 cv
129.725 166.158 li
130.296 166.158 li
130.401 166.158 130.476 166.177 130.521 166.216 cv
130.587 166.371 li
130.521 166.523 li
130.476 166.564 130.401 166.583 130.296 166.583 cv
129.299 166.583 li
cp
129.299 164.466 mo
129.099 164.41 128.887 164.367 128.663 164.34 cv
128.439 164.314 128.203 164.3 127.955 164.3 cv
127.334 164.3 126.849 164.433 126.499 164.7 cv
126.234 164.899 126.102 165.136 126.102 165.414 cv
126.102 165.669 126.203 165.886 126.405 166.062 cv
126.606 166.237 126.901 166.324 127.288 166.324 cv
127.658 166.324 128.002 166.251 128.319 166.105 cv
128.637 165.958 128.963 165.724 129.299 165.404 cv
129.299 164.466 li
cp
f
133.421 162.193 mo
135.726 162.193 li
135.83 162.193 135.904 162.212 135.949 162.251 cv
136.016 162.406 li
135.949 162.557 li
135.904 162.597 135.83 162.619 135.726 162.619 cv
133.421 162.619 li
133.421 165.457 li
133.421 165.703 133.52 165.91 133.718 166.076 cv
133.916 166.242 134.206 166.324 134.587 166.324 cv
134.875 166.324 135.185 166.281 135.52 166.195 cv
135.854 166.109 136.115 166.011 136.3 165.904 cv
136.468 165.837 li
136.61 165.902 li
136.67 166.05 li
136.605 166.193 li
136.497 166.304 136.235 166.425 135.818 166.555 cv
135.401 166.685 135.001 166.75 134.621 166.75 cv
134.125 166.75 133.729 166.633 133.436 166.4 cv
133.142 166.167 132.996 165.851 132.996 165.456 cv
132.996 162.619 li
132.21 162.619 li
132.108 162.619 132.036 162.598 131.992 162.558 cv
131.926 162.403 li
131.992 162.252 li
132.036 162.212 132.108 162.193 132.21 162.193 cv
132.996 162.193 li
132.996 160.931 li
132.996 160.829 133.016 160.755 133.055 160.711 cv
133.206 160.646 li
133.361 160.711 li
133.401 160.755 133.421 160.829 133.421 160.931 cv
133.421 162.193 li
cp
f
141.758 166.583 mo
141.758 165.97 li
141.137 166.49 140.474 166.75 139.768 166.75 cv
139.255 166.75 138.855 166.621 138.567 166.363 cv
138.279 166.105 138.134 165.789 138.134 165.414 cv
138.134 165.001 138.325 164.642 138.705 164.335 cv
139.084 164.028 139.639 163.875 140.369 163.875 cv
140.565 163.875 140.779 163.886 141.009 163.912 cv
141.241 163.937 141.49 163.977 141.758 164.031 cv
141.758 163.341 li
141.758 163.107 141.649 162.904 141.432 162.732 cv
141.214 162.559 140.888 162.472 140.454 162.472 cv
140.121 162.472 139.654 162.57 139.052 162.764 cv
138.943 162.798 138.873 162.816 138.842 162.816 cv
138.702 162.755 li
138.643 162.603 li
138.694 162.466 li
138.742 162.416 138.933 162.347 139.269 162.259 cv
139.797 162.118 140.198 162.046 140.469 162.046 cv
141.008 162.046 141.429 162.179 141.731 162.445 cv
142.033 162.709 142.183 163.009 142.183 163.343 cv
142.183 166.158 li
142.754 166.158 li
142.86 166.158 142.935 166.177 142.979 166.216 cv
143.045 166.371 li
142.979 166.523 li
142.935 166.564 142.86 166.583 142.754 166.583 cv
141.758 166.583 li
cp
141.758 164.466 mo
141.557 164.41 141.345 164.367 141.122 164.34 cv
140.897 164.314 140.662 164.3 140.414 164.3 cv
139.792 164.3 139.307 164.433 138.958 164.7 cv
138.693 164.899 138.56 165.136 138.56 165.414 cv
138.56 165.669 138.661 165.886 138.863 166.062 cv
139.065 166.237 139.36 166.324 139.747 166.324 cv
140.117 166.324 140.46 166.251 140.778 166.105 cv
141.095 165.958 141.421 165.724 141.758 165.404 cv
141.758 164.466 li
cp
f
46.7192 2.35938 mo
46.7192 2.83128 li
216.135 2.83128 li
216.135 18.8762 li
47.1911 18.8762 li
47.1911 2.35938 li
46.7192 2.35938 li
46.7192 2.83128 li
46.7192 2.35938 li
46.2473 2.35938 li
46.2473 19.3481 li
46.2473 19.4724 46.2977 19.594 46.3855 19.6818 cv
46.4734 19.7697 46.595 19.8201 46.7192 19.8201 cv
216.607 19.8201 li
216.731 19.8201 216.853 19.7697 216.941 19.6818 cv
217.028 19.594 217.079 19.4724 217.079 19.3481 cv
217.079 2.35938 li
217.079 2.23511 217.028 2.11356 216.941 2.02568 cv
216.853 1.93781 216.731 1.88746 216.607 1.88746 cv
46.7192 1.88746 li
46.595 1.88746 46.4734 1.93781 46.3855 2.02568 cv
46.2977 2.11356 46.2473 2.2351 46.2473 2.35938 cv
46.7192 2.35938 li
cp
.746 .676 .668 .898 cmyk
f
123.932 7.3208 mo
123.932 13.2593 li
124.503 13.2593 li
124.608 13.2593 124.683 13.2788 124.727 13.3179 cv
124.793 13.4722 li
124.727 13.624 li
124.683 13.665 124.608 13.6851 124.503 13.6851 cv
123.506 13.6851 li
123.506 12.8379 li
123.013 13.5137 122.386 13.8511 121.625 13.8511 cv
121.24 13.8511 120.871 13.749 120.518 13.5449 cv
120.165 13.3408 119.885 13.0498 119.681 12.6719 cv
119.477 12.2939 119.374 11.9038 119.374 11.5024 cv
119.374 11.0972 119.477 10.7065 119.681 10.3301 cv
119.885 9.9541 120.165 9.66309 120.518 9.45703 cv
120.871 9.25098 121.242 9.14844 121.63 9.14844 cv
122.374 9.14844 122.999 9.48438 123.506 10.1567 cv
123.506 7.74658 li
122.935 7.74658 li
122.83 7.74658 122.755 7.72656 122.711 7.6875 cv
122.645 7.53369 li
122.711 7.38184 li
122.755 7.34131 122.83 7.3208 122.935 7.3208 cv
123.932 7.3208 li
cp
123.506 11.4995 mo
123.506 10.959 123.324 10.5029 122.958 10.1313 cv
122.594 9.75977 122.159 9.57373 121.656 9.57373 cv
121.148 9.57373 120.712 9.75977 120.347 10.1313 cv
119.982 10.5029 119.8 10.959 119.8 11.4995 cv
119.8 12.0371 119.982 12.4922 120.347 12.8657 cv
120.712 13.2388 121.148 13.4258 121.656 13.4258 cv
122.159 13.4258 122.594 13.2388 122.958 12.8657 cv
123.324 12.4922 123.506 12.0371 123.506 11.4995 cv
cp
0 0 0 1 cmyk
f
129.299 13.6851 mo
129.299 13.0713 li
128.679 13.5913 128.015 13.8511 127.31 13.8511 cv
126.797 13.8511 126.397 13.7222 126.108 13.4639 cv
125.82 13.2061 125.676 12.8892 125.676 12.5146 cv
125.676 12.1025 125.866 11.7432 126.246 11.436 cv
126.626 11.1289 127.181 10.9756 127.91 10.9756 cv
128.107 10.9756 128.321 10.9883 128.551 11.0132 cv
128.782 11.0386 129.031 11.0781 129.299 11.1323 cv
129.299 10.4419 li
129.299 10.2085 129.191 10.0054 128.973 9.83301 cv
128.756 9.66016 128.43 9.57373 127.995 9.57373 cv
127.662 9.57373 127.195 9.6709 126.594 9.86523 cv
126.484 9.89941 126.414 9.9165 126.383 9.9165 cv
126.243 9.85596 li
126.185 9.7041 li
126.236 9.56787 li
126.283 9.51709 126.475 9.44824 126.811 9.36035 cv
127.339 9.21875 127.74 9.14844 128.011 9.14844 cv
128.55 9.14844 128.971 9.28076 129.272 9.5459 cv
129.574 9.81055 129.725 10.1104 129.725 10.4443 cv
129.725 13.2593 li
130.296 13.2593 li
130.401 13.2593 130.476 13.2788 130.521 13.3179 cv
130.587 13.4722 li
130.521 13.624 li
130.476 13.665 130.401 13.6851 130.296 13.6851 cv
129.299 13.6851 li
cp
129.299 11.5684 mo
129.099 11.5107 128.887 11.4688 128.663 11.4414 cv
128.439 11.4146 128.203 11.4014 127.955 11.4014 cv
127.334 11.4014 126.849 11.5342 126.499 11.8008 cv
126.234 12 126.102 12.2378 126.102 12.5146 cv
126.102 12.771 126.203 12.9868 126.405 13.1626 cv
126.606 13.3379 126.901 13.4258 127.288 13.4258 cv
127.658 13.4258 128.002 13.3521 128.319 13.2056 cv
128.637 13.0586 128.963 12.8252 129.299 12.5044 cv
129.299 11.5684 li
cp
f
133.421 9.29346 mo
135.726 9.29346 li
135.83 9.29346 135.904 9.31348 135.949 9.35303 cv
136.016 9.50635 li
135.949 9.6582 li
135.904 9.69873 135.83 9.71924 135.726 9.71924 cv
133.421 9.71924 li
133.421 12.5576 li
133.421 12.8047 133.52 13.0107 133.718 13.1768 cv
133.916 13.3428 134.206 13.4258 134.587 13.4258 cv
134.875 13.4258 135.185 13.3828 135.52 13.2964 cv
135.854 13.2104 136.115 13.1133 136.3 13.0049 cv
136.468 12.939 li
136.61 13.0024 li
136.67 13.1519 li
136.605 13.2939 li
136.497 13.4053 136.235 13.5264 135.818 13.6563 cv
135.401 13.7861 135.001 13.8511 134.621 13.8511 cv
134.125 13.8511 133.729 13.7344 133.436 13.501 cv
133.142 13.2676 132.996 12.9526 132.996 12.5566 cv
132.996 9.71924 li
132.21 9.71924 li
132.108 9.71924 132.036 9.69922 131.992 9.65918 cv
131.926 9.50391 li
131.992 9.35352 li
132.036 9.31348 132.108 9.29346 132.21 9.29346 cv
132.996 9.29346 li
132.996 8.03174 li
132.996 7.92969 133.016 7.85693 133.055 7.81299 cv
133.206 7.74658 li
133.361 7.81299 li
133.401 7.85693 133.421 7.92969 133.421 8.03174 cv
133.421 9.29346 li
cp
f
141.758 13.6851 mo
141.758 13.0713 li
141.137 13.5913 140.474 13.8511 139.768 13.8511 cv
139.255 13.8511 138.855 13.7222 138.567 13.4639 cv
138.279 13.2061 138.134 12.8892 138.134 12.5146 cv
138.134 12.1025 138.325 11.7432 138.705 11.436 cv
139.084 11.1289 139.639 10.9756 140.369 10.9756 cv
140.565 10.9756 140.779 10.9883 141.009 11.0132 cv
141.241 11.0386 141.49 11.0781 141.758 11.1323 cv
141.758 10.4419 li
141.758 10.2085 141.649 10.0054 141.432 9.83301 cv
141.214 9.66016 140.888 9.57373 140.454 9.57373 cv
140.121 9.57373 139.654 9.6709 139.052 9.86523 cv
138.943 9.89941 138.873 9.9165 138.842 9.9165 cv
138.702 9.85596 li
138.643 9.7041 li
138.694 9.56787 li
138.742 9.51709 138.933 9.44824 139.269 9.36035 cv
139.797 9.21875 140.198 9.14844 140.469 9.14844 cv
141.008 9.14844 141.429 9.28076 141.731 9.5459 cv
142.033 9.81055 142.183 10.1104 142.183 10.4443 cv
142.183 13.2593 li
142.754 13.2593 li
142.86 13.2593 142.935 13.2788 142.979 13.3179 cv
143.045 13.4722 li
142.979 13.624 li
142.935 13.665 142.86 13.6851 142.754 13.6851 cv
141.758 13.6851 li
cp
141.758 11.5684 mo
141.557 11.5107 141.345 11.4688 141.122 11.4414 cv
140.897 11.4146 140.662 11.4014 140.414 11.4014 cv
139.792 11.4014 139.307 11.5342 138.958 11.8008 cv
138.693 12 138.56 12.2378 138.56 12.5146 cv
138.56 12.771 138.661 12.9868 138.863 13.1626 cv
139.065 13.3379 139.36 13.4258 139.747 13.4258 cv
140.117 13.4258 140.46 13.3521 140.778 13.2056 cv
141.095 13.0586 141.421 12.8252 141.758 12.5044 cv
141.758 11.5684 li
cp
f
12.7417 53.3257 mo
12.7417 53.7976 li
97.2131 53.7976 li
97.2131 69.8425 li
13.2136 69.8425 li
13.2136 53.3257 li
12.7417 53.3257 li
12.7417 53.7976 li
12.7417 53.3257 li
12.2698 53.3257 li
12.2698 70.3145 li
12.2698 70.4387 12.3201 70.5603 12.408 70.6481 cv
12.4959 70.736 12.6174 70.7864 12.7417 70.7864 cv
97.6851 70.7864 li
97.8093 70.7864 97.9309 70.736 98.0187 70.6481 cv
98.1066 70.5603 98.157 70.4387 98.157 70.3145 cv
98.157 53.3257 li
98.157 53.2014 98.1066 53.0799 98.0187 52.992 cv
97.9309 52.9041 97.8093 52.8538 97.6851 52.8538 cv
12.7417 52.8538 li
12.6174 52.8538 12.4959 52.9041 12.408 52.992 cv
12.3201 53.0799 12.2698 53.2014 12.2698 53.3257 cv
12.7417 53.3257 li
cp
.746 .676 .668 .898 cmyk
f
28.7915 58.2871 mo
28.7915 64.2256 li
29.3628 64.2256 li
29.4683 64.2256 29.543 64.2451 29.5869 64.2842 cv
29.6533 64.4385 li
29.5869 64.5908 li
29.543 64.6313 29.4683 64.6514 29.3628 64.6514 cv
28.3662 64.6514 li
28.3662 63.8037 li
27.8726 64.4795 27.2456 64.8174 26.4854 64.8174 cv
26.0996 64.8174 25.7305 64.7153 25.3774 64.5112 cv
25.0239 64.3071 24.7451 64.0161 24.541 63.6382 cv
24.3364 63.2598 24.2339 62.8701 24.2339 62.4688 cv
24.2339 62.0635 24.3364 61.6729 24.541 61.2964 cv
24.7451 60.9204 25.0239 60.6289 25.3774 60.4233 cv
25.7305 60.2173 26.1016 60.1143 26.4902 60.1143 cv
27.2339 60.1143 27.8589 60.4507 28.3662 61.123 cv
28.3662 58.7129 li
27.7949 58.7129 li
27.6895 58.7129 27.6147 58.6934 27.5708 58.6533 cv
27.5044 58.5 li
27.5708 58.3481 li
27.6147 58.3076 27.6895 58.2871 27.7949 58.2871 cv
28.7915 58.2871 li
cp
28.3662 62.4658 mo
28.3662 61.9253 28.1836 61.4692 27.8184 61.0977 cv
27.4536 60.7261 27.019 60.54 26.5156 60.54 cv
26.0083 60.54 25.5723 60.7261 25.207 61.0977 cv
24.8423 61.4692 24.6597 61.9253 24.6597 62.4658 cv
24.6597 63.0029 24.8423 63.4585 25.207 63.832 cv
25.5723 64.2051 26.0083 64.3916 26.5156 64.3916 cv
27.019 64.3916 27.4536 64.2051 27.8184 63.832 cv
28.1836 63.4585 28.3662 63.0029 28.3662 62.4658 cv
cp
0 0 0 1 cmyk
f
34.1592 64.6514 mo
34.1592 64.0376 li
33.5386 64.5576 32.875 64.8174 32.1694 64.8174 cv
31.6572 64.8174 31.2568 64.6885 30.9683 64.4302 cv
30.6802 64.1719 30.5361 63.8555 30.5361 63.481 cv
30.5361 63.0688 30.7261 62.7095 31.106 62.4023 cv
31.4858 62.0952 32.0405 61.9419 32.77 61.9419 cv
32.9668 61.9419 33.1802 61.9541 33.4111 61.9795 cv
33.6421 62.0049 33.8911 62.0449 34.1592 62.0986 cv
34.1592 61.4082 li
34.1592 61.1748 34.0508 60.9717 33.833 60.7988 cv
33.6157 60.6265 33.2896 60.54 32.855 60.54 cv
32.522 60.54 32.0552 60.6372 31.4541 60.8315 cv
31.3442 60.8657 31.2739 60.8828 31.2432 60.8828 cv
31.103 60.8223 li
31.0444 60.6704 li
31.0957 60.5342 li
31.1431 60.4834 31.3345 60.4146 31.6704 60.3267 cv
32.1992 60.1851 32.5996 60.1143 32.8706 60.1143 cv
33.4102 60.1143 33.8306 60.2471 34.1323 60.5117 cv
34.4341 60.7769 34.585 61.0762 34.585 61.4106 cv
34.585 64.2256 li
35.1558 64.2256 li
35.2612 64.2256 35.3359 64.2451 35.3804 64.2842 cv
35.4468 64.4385 li
35.3804 64.5908 li
35.3359 64.6313 35.2612 64.6514 35.1558 64.6514 cv
34.1592 64.6514 li
cp
34.1592 62.5342 mo
33.959 62.4771 33.7466 62.4346 33.5225 62.4077 cv
33.2988 62.3809 33.063 62.3672 32.8149 62.3672 cv
32.1938 62.3672 31.7085 62.5005 31.3589 62.7671 cv
31.0938 62.9663 30.9614 63.2041 30.9614 63.481 cv
30.9614 63.7373 31.0625 63.9531 31.2646 64.1289 cv
31.4663 64.3042 31.7612 64.3916 32.1479 64.3916 cv
32.5181 64.3916 32.8618 64.3184 33.1792 64.1719 cv
33.4966 64.0249 33.8232 63.7915 34.1592 63.4707 cv
34.1592 62.5342 li
cp
f
38.2808 60.2598 mo
40.5859 60.2598 li
40.6895 60.2598 40.7642 60.2798 40.8091 60.3193 cv
40.8765 60.4727 li
40.8091 60.6245 li
40.7642 60.665 40.6895 60.6855 40.5859 60.6855 cv
38.2808 60.6855 li
38.2808 63.5234 li
38.2808 63.7705 38.3799 63.9775 38.5776 64.1431 cv
38.7749 64.3091 39.0649 64.3916 39.4468 64.3916 cv
39.7344 64.3916 40.0449 64.3486 40.3799 64.2627 cv
40.7144 64.1768 40.9746 64.0791 41.1606 63.9712 cv
41.3276 63.9053 li
41.4697 63.9688 li
41.5303 64.1182 li
41.4648 64.2603 li
41.3564 64.3716 41.0942 64.4922 40.6777 64.6226 cv
40.2607 64.7524 39.8618 64.8174 39.48 64.8174 cv
38.9839 64.8174 38.5894 64.7007 38.2954 64.4673 cv
38.002 64.2339 37.8555 63.9189 37.8555 63.5229 cv
37.8555 60.6855 li
37.0698 60.6855 li
36.9683 60.6855 36.8955 60.6655 36.8516 60.6255 cv
36.7856 60.4702 li
36.8516 60.3198 li
36.8955 60.2798 36.9683 60.2598 37.0698 60.2598 cv
37.8555 60.2598 li
37.8555 58.998 li
37.8555 58.896 37.8755 58.8232 37.915 58.7793 cv
38.0654 58.7129 li
38.2207 58.7793 li
38.2607 58.8232 38.2808 58.896 38.2808 58.998 cv
38.2808 60.2598 li
cp
f
46.6177 64.6514 mo
46.6177 64.0376 li
45.9966 64.5576 45.3335 64.8174 44.6279 64.8174 cv
44.1157 64.8174 43.7153 64.6885 43.4268 64.4302 cv
43.1387 64.1719 42.9941 63.8555 42.9941 63.481 cv
42.9941 63.0688 43.1841 62.7095 43.564 62.4023 cv
43.9443 62.0952 44.499 61.9419 45.2285 61.9419 cv
45.4253 61.9419 45.6387 61.9541 45.8696 61.9795 cv
46.1001 62.0049 46.3496 62.0449 46.6177 62.0986 cv
46.6177 61.4082 li
46.6177 61.1748 46.5088 60.9717 46.2915 60.7988 cv
46.0742 60.6265 45.748 60.54 45.3135 60.54 cv
44.9805 60.54 44.5137 60.6372 43.9121 60.8315 cv
43.8027 60.8657 43.7324 60.8828 43.7017 60.8828 cv
43.5615 60.8223 li
43.5029 60.6704 li
43.5542 60.5342 li
43.6016 60.4834 43.793 60.4146 44.1289 60.3267 cv
44.6577 60.1851 45.0576 60.1143 45.3291 60.1143 cv
45.8682 60.1143 46.2891 60.2471 46.5903 60.5117 cv
46.8926 60.7769 47.0435 61.0762 47.0435 61.4106 cv
47.0435 64.2256 li
47.6143 64.2256 li
47.7197 64.2256 47.7944 64.2451 47.8389 64.2842 cv
47.9048 64.4385 li
47.8389 64.5908 li
47.7944 64.6313 47.7197 64.6514 47.6143 64.6514 cv
46.6177 64.6514 li
cp
46.6177 62.5342 mo
46.4175 62.4771 46.2051 62.4346 45.981 62.4077 cv
45.7573 62.3809 45.521 62.3672 45.2734 62.3672 cv
44.6523 62.3672 44.1665 62.5005 43.8169 62.7671 cv
43.5522 62.9663 43.4199 63.2041 43.4199 63.481 cv
43.4199 63.7373 43.521 63.9531 43.7227 64.1289 cv
43.9248 64.3042 44.2192 64.3916 44.6064 64.3916 cv
44.9766 64.3916 45.3203 64.3184 45.6377 64.1719 cv
45.9551 64.0249 46.2817 63.7915 46.6177 63.4707 cv
46.6177 62.5342 li
cp
f
51.8296 58.7129 mo
51.8296 65.5337 li
52.8574 65.5337 li
52.9575 65.5337 53.0293 65.5532 53.0728 65.5923 cv
53.1377 65.7466 li
53.0728 65.9014 li
53.0293 65.9399 52.9575 65.9595 52.8574 65.9595 cv
51.4038 65.9595 li
51.4038 58.2871 li
52.8574 58.2871 li
52.9575 58.2871 53.0293 58.3071 53.0728 58.3477 cv
53.1377 58.5024 li
53.0728 58.6528 li
53.0293 58.6929 52.9575 58.7129 52.8574 58.7129 cv
51.8296 58.7129 li
cp
f
57.7603 60.2598 mo
57.9419 60.2598 li
58.1309 60.2598 58.2925 60.3271 58.4272 60.4614 cv
58.562 60.5957 58.6299 60.7554 58.6299 60.9399 cv
58.6299 61.1382 58.5615 61.3027 58.4248 61.4336 cv
58.2881 61.5649 58.1274 61.6304 57.9419 61.6304 cv
57.7603 61.6304 li
57.5713 61.6304 57.4097 61.563 57.2744 61.4287 cv
57.1396 61.2944 57.0723 61.1348 57.0723 60.9502 cv
57.0723 60.752 57.1406 60.5874 57.2769 60.4565 cv
57.4136 60.3252 57.5747 60.2598 57.7603 60.2598 cv
cp
57.7603 63.4365 mo
57.9419 63.4365 li
58.1309 63.4365 58.2925 63.5034 58.4272 63.6367 cv
58.562 63.7695 58.6299 63.9307 58.6299 64.1191 cv
58.6299 64.3149 58.5615 64.4785 58.4248 64.6099 cv
58.2881 64.7412 58.1274 64.8071 57.9419 64.8071 cv
57.7603 64.8071 li
57.5713 64.8071 57.4097 64.7407 57.2744 64.6074 cv
57.1396 64.4741 57.0723 64.3135 57.0723 64.1245 cv
57.0723 63.9292 57.1406 63.7656 57.2769 63.6338 cv
57.4136 63.5024 57.5747 63.4365 57.7603 63.4365 cv
cp
f
62.1387 60.2598 mo
62.1387 60.6924 li
62.499 60.3071 62.8604 60.1143 63.2241 60.1143 cv
63.4429 60.1143 63.6348 60.1724 63.7993 60.2881 cv
63.9644 60.4038 64.1025 60.5791 64.2134 60.814 cv
64.4033 60.5791 64.5962 60.4038 64.791 60.2881 cv
64.9863 60.1724 65.1821 60.1143 65.3789 60.1143 cv
65.688 60.1143 65.9341 60.2139 66.1172 60.4131 cv
66.3579 60.6699 66.4785 60.9502 66.4785 61.2539 cv
66.4785 64.2256 li
66.8315 64.2256 li
66.9351 64.2256 67.0098 64.2451 67.0547 64.2842 cv
67.1221 64.4385 li
67.0547 64.5908 li
67.0098 64.6313 66.9351 64.6514 66.8315 64.6514 cv
66.0527 64.6514 li
66.0527 61.2905 li
66.0527 61.0742 65.9863 60.895 65.854 60.7529 cv
65.7212 60.6113 65.5684 60.54 65.395 60.54 cv
65.2383 60.54 65.0737 60.5986 64.9004 60.7148 cv
64.7271 60.8315 64.5298 61.0605 64.3086 61.4019 cv
64.3086 64.2256 li
64.6616 64.2256 li
64.7656 64.2256 64.8398 64.2451 64.8848 64.2842 cv
64.9521 64.4385 li
64.8848 64.5908 li
64.8398 64.6313 64.7656 64.6514 64.6616 64.6514 cv
63.8828 64.6514 li
63.8828 61.3208 li
63.8828 61.0942 63.8164 60.9077 63.6831 60.7607 cv
63.5503 60.6138 63.4009 60.54 63.2358 60.54 cv
63.084 60.54 62.9341 60.5889 62.7856 60.687 cv
62.5801 60.8257 62.3647 61.064 62.1387 61.4019 cv
62.1387 64.2256 li
62.4917 64.2256 li
62.5957 64.2256 62.6699 64.2451 62.7148 64.2842 cv
62.7827 64.4385 li
62.7148 64.5908 li
62.6699 64.6313 62.5957 64.6514 62.4917 64.6514 cv
61.3604 64.6514 li
61.2563 64.6514 61.1821 64.6313 61.1367 64.5908 cv
61.0693 64.4385 li
61.1367 64.2842 li
61.1821 64.2451 61.2563 64.2256 61.3604 64.2256 cv
61.7129 64.2256 li
61.7129 60.6855 li
61.3604 60.6855 li
61.2563 60.6855 61.1821 60.6655 61.1367 60.626 cv
61.0693 60.4727 li
61.1367 60.3208 li
61.1821 60.2803 61.2563 60.2598 61.3604 60.2598 cv
62.1387 60.2598 li
cp
f
70.5273 58.0796 mo
70.5273 59.1699 li
69.894 59.1699 li
69.894 58.0796 li
70.5273 58.0796 li
cp
70.5376 60.2598 mo
70.5376 64.2256 li
72.1987 64.2256 li
72.3042 64.2256 72.3794 64.2451 72.4233 64.2842 cv
72.4897 64.4385 li
72.4233 64.5908 li
72.3794 64.6313 72.3042 64.6514 72.1987 64.6514 cv
68.4409 64.6514 li
68.3403 64.6514 68.2686 64.6313 68.2256 64.5908 cv
68.1602 64.4385 li
68.2256 64.2842 li
68.2686 64.2451 68.3403 64.2256 68.4409 64.2256 cv
70.1123 64.2256 li
70.1123 60.6855 li
68.8765 60.6855 li
68.7749 60.6855 68.7007 60.6655 68.6548 60.6255 cv
68.5859 60.4751 li
68.6523 60.3198 li
68.6963 60.2798 68.7715 60.2598 68.8765 60.2598 cv
70.5376 60.2598 li
cp
f
78.6255 58.2871 mo
78.6255 64.2256 li
79.1963 64.2256 li
79.3018 64.2256 79.3765 64.2451 79.4209 64.2842 cv
79.4873 64.4385 li
79.4209 64.5908 li
79.3765 64.6313 79.3018 64.6514 79.1963 64.6514 cv
78.1997 64.6514 li
78.1997 63.8037 li
77.7065 64.4795 77.0791 64.8174 76.3188 64.8174 cv
75.9336 64.8174 75.5645 64.7153 75.2109 64.5112 cv
74.8579 64.3071 74.5791 64.0161 74.3745 63.6382 cv
74.1699 63.2598 74.0679 62.8701 74.0679 62.4688 cv
74.0679 62.0635 74.1699 61.6729 74.3745 61.2964 cv
74.5791 60.9204 74.8579 60.6289 75.2109 60.4233 cv
75.5645 60.2173 75.9351 60.1143 76.3237 60.1143 cv
77.0674 60.1143 77.6929 60.4507 78.1997 61.123 cv
78.1997 58.7129 li
77.6289 58.7129 li
77.5234 58.7129 77.4487 58.6934 77.4043 58.6533 cv
77.3379 58.5 li
77.4043 58.3481 li
77.4487 58.3076 77.5234 58.2871 77.6289 58.2871 cv
78.6255 58.2871 li
cp
78.1997 62.4658 mo
78.1997 61.9253 78.0171 61.4692 77.6523 61.0977 cv
77.2871 60.7261 76.853 60.54 76.3491 60.54 cv
75.8423 60.54 75.4058 60.7261 75.041 61.0977 cv
74.6758 61.4692 74.4932 61.9253 74.4932 62.4658 cv
74.4932 63.0029 74.6758 63.4585 75.041 63.832 cv
75.4058 64.2051 75.8423 64.3916 76.3491 64.3916 cv
76.853 64.3916 77.2871 64.2051 77.6523 63.832 cv
78.0171 63.4585 78.1997 63.0029 78.1997 62.4658 cv
cp
f
82.5708 65.5337 mo
82.5708 58.7129 li
81.543 58.7129 li
81.4429 58.7129 81.3711 58.6929 81.3276 58.6528 cv
81.2627 58.5024 li
81.3276 58.3477 li
81.3711 58.3071 81.4429 58.2871 81.543 58.2871 cv
82.9961 58.2871 li
82.9961 65.9595 li
81.543 65.9595 li
81.4429 65.9595 81.3711 65.9399 81.3276 65.9014 cv
81.2627 65.7466 li
81.3276 65.5947 li
81.3711 65.5542 81.4429 65.5337 81.543 65.5337 cv
82.5708 65.5337 li
cp
f
165.64 53.3257 mo
165.64 53.7976 li
250.113 53.7976 li
250.113 69.8425 li
166.112 69.8425 li
166.112 53.3257 li
165.64 53.3257 li
165.64 53.7976 li
165.64 53.3257 li
165.168 53.3257 li
165.168 70.3145 li
165.168 70.4387 165.219 70.5603 165.306 70.6481 cv
165.394 70.736 165.516 70.7864 165.64 70.7864 cv
250.584 70.7864 li
250.709 70.7864 250.83 70.736 250.918 70.6481 cv
251.006 70.5603 251.056 70.4387 251.056 70.3145 cv
251.056 53.3257 li
251.056 53.2014 251.006 53.0799 250.918 52.992 cv
250.83 52.9041 250.709 52.8538 250.584 52.8538 cv
165.64 52.8538 li
165.516 52.8538 165.394 52.9041 165.306 52.992 cv
165.219 53.0799 165.168 53.2014 165.168 53.3257 cv
165.64 53.3257 li
cp
.746 .676 .668 .898 cmyk
f
181.691 58.2871 mo
181.691 64.2256 li
182.261 64.2256 li
182.367 64.2256 182.442 64.2451 182.486 64.2842 cv
182.552 64.4385 li
182.486 64.5908 li
182.442 64.6313 182.367 64.6514 182.261 64.6514 cv
181.265 64.6514 li
181.265 63.8037 li
180.771 64.4795 180.144 64.8174 179.384 64.8174 cv
178.999 64.8174 178.629 64.7153 178.276 64.5112 cv
177.923 64.3071 177.644 64.0161 177.44 63.6382 cv
177.235 63.2598 177.133 62.8701 177.133 62.4688 cv
177.133 62.0635 177.235 61.6729 177.44 61.2964 cv
177.644 60.9204 177.923 60.6289 178.276 60.4233 cv
178.629 60.2173 179 60.1143 179.389 60.1143 cv
180.132 60.1143 180.758 60.4507 181.265 61.123 cv
181.265 58.7129 li
180.694 58.7129 li
180.588 58.7129 180.513 58.6934 180.469 58.6533 cv
180.403 58.5 li
180.469 58.3481 li
180.513 58.3076 180.588 58.2871 180.694 58.2871 cv
181.691 58.2871 li
cp
181.265 62.4658 mo
181.265 61.9253 181.083 61.4692 180.717 61.0977 cv
180.352 60.7261 179.917 60.54 179.415 60.54 cv
178.907 60.54 178.471 60.7261 178.106 61.0977 cv
177.741 61.4692 177.558 61.9253 177.558 62.4658 cv
177.558 63.0029 177.741 63.4585 178.106 63.832 cv
178.471 64.2051 178.907 64.3916 179.415 64.3916 cv
179.917 64.3916 180.352 64.2051 180.717 63.832 cv
181.083 63.4585 181.265 63.0029 181.265 62.4658 cv
cp
0 0 0 1 cmyk
f
187.058 64.6514 mo
187.058 64.0376 li
186.437 64.5576 185.774 64.8174 185.068 64.8174 cv
184.556 64.8174 184.156 64.6885 183.868 64.4302 cv
183.579 64.1719 183.435 63.8555 183.435 63.481 cv
183.435 63.0688 183.625 62.7095 184.004 62.4023 cv
184.384 62.0952 184.939 61.9419 185.668 61.9419 cv
185.866 61.9419 186.08 61.9541 186.31 61.9795 cv
186.541 62.0049 186.791 62.0449 187.058 62.0986 cv
187.058 61.4082 li
187.058 61.1748 186.95 60.9717 186.732 60.7988 cv
186.514 60.6265 186.189 60.54 185.753 60.54 cv
185.421 60.54 184.954 60.6372 184.353 60.8315 cv
184.243 60.8657 184.172 60.8828 184.142 60.8828 cv
184.002 60.8223 li
183.944 60.6704 li
183.995 60.5342 li
184.042 60.4834 184.234 60.4146 184.569 60.3267 cv
185.098 60.1851 185.499 60.1143 185.77 60.1143 cv
186.309 60.1143 186.729 60.2471 187.031 60.5117 cv
187.333 60.7769 187.484 61.0762 187.484 61.4106 cv
187.484 64.2256 li
188.055 64.2256 li
188.161 64.2256 188.235 64.2451 188.279 64.2842 cv
188.345 64.4385 li
188.279 64.5908 li
188.235 64.6313 188.161 64.6514 188.055 64.6514 cv
187.058 64.6514 li
cp
187.058 62.5342 mo
186.858 62.4771 186.646 62.4346 186.421 62.4077 cv
186.198 62.3809 185.961 62.3672 185.713 62.3672 cv
185.092 62.3672 184.607 62.5005 184.257 62.7671 cv
183.993 62.9663 183.861 63.2041 183.861 63.481 cv
183.861 63.7373 183.961 63.9531 184.164 64.1289 cv
184.366 64.3042 184.66 64.3916 185.047 64.3916 cv
185.417 64.3916 185.76 64.3184 186.078 64.1719 cv
186.395 64.0249 186.722 63.7915 187.058 63.4707 cv
187.058 62.5342 li
cp
f
191.18 60.2598 mo
193.485 60.2598 li
193.588 60.2598 193.663 60.2798 193.708 60.3193 cv
193.775 60.4727 li
193.708 60.6245 li
193.663 60.665 193.588 60.6855 193.485 60.6855 cv
191.18 60.6855 li
191.18 63.5234 li
191.18 63.7705 191.279 63.9775 191.476 64.1431 cv
191.674 64.3091 191.963 64.3916 192.346 64.3916 cv
192.633 64.3916 192.944 64.3486 193.279 64.2627 cv
193.613 64.1768 193.874 64.0791 194.059 63.9712 cv
194.227 63.9053 li
194.369 63.9688 li
194.429 64.1182 li
194.364 64.2603 li
194.255 64.3716 193.993 64.4922 193.577 64.6226 cv
193.16 64.7524 192.76 64.8174 192.379 64.8174 cv
191.883 64.8174 191.488 64.7007 191.195 64.4673 cv
190.901 64.2339 190.754 63.9189 190.754 63.5229 cv
190.754 60.6855 li
189.968 60.6855 li
189.868 60.6855 189.794 60.6655 189.75 60.6255 cv
189.685 60.4702 li
189.75 60.3198 li
189.794 60.2798 189.868 60.2598 189.968 60.2598 cv
190.754 60.2598 li
190.754 58.998 li
190.754 58.896 190.774 58.8232 190.814 58.7793 cv
190.964 58.7129 li
191.12 58.7793 li
191.16 58.8232 191.18 58.896 191.18 58.998 cv
191.18 60.2598 li
cp
f
199.516 64.6514 mo
199.516 64.0376 li
198.896 64.5576 198.232 64.8174 197.527 64.8174 cv
197.014 64.8174 196.614 64.6885 196.326 64.4302 cv
196.038 64.1719 195.893 63.8555 195.893 63.481 cv
195.893 63.0688 196.083 62.7095 196.463 62.4023 cv
196.843 62.0952 197.398 61.9419 198.127 61.9419 cv
198.324 61.9419 198.538 61.9541 198.768 61.9795 cv
199 62.0049 199.249 62.0449 199.516 62.0986 cv
199.516 61.4082 li
199.516 61.1748 199.408 60.9717 199.19 60.7988 cv
198.973 60.6265 198.647 60.54 198.212 60.54 cv
197.879 60.54 197.413 60.6372 196.811 60.8315 cv
196.702 60.8657 196.631 60.8828 196.601 60.8828 cv
196.46 60.8223 li
196.402 60.6704 li
196.453 60.5342 li
196.5 60.4834 196.692 60.4146 197.028 60.3267 cv
197.556 60.1851 197.957 60.1143 198.228 60.1143 cv
198.767 60.1143 199.188 60.2471 199.49 60.5117 cv
199.792 60.7769 199.942 61.0762 199.942 61.4106 cv
199.942 64.2256 li
200.513 64.2256 li
200.619 64.2256 200.694 64.2451 200.738 64.2842 cv
200.804 64.4385 li
200.738 64.5908 li
200.694 64.6313 200.619 64.6514 200.513 64.6514 cv
199.516 64.6514 li
cp
199.516 62.5342 mo
199.316 62.4771 199.104 62.4346 198.88 62.4077 cv
198.656 62.3809 198.42 62.3672 198.172 62.3672 cv
197.551 62.3672 197.066 62.5005 196.716 62.7671 cv
196.452 62.9663 196.319 63.2041 196.319 63.481 cv
196.319 63.7373 196.419 63.9531 196.622 64.1289 cv
196.824 64.3042 197.119 64.3916 197.505 64.3916 cv
197.875 64.3916 198.219 64.3184 198.537 64.1719 cv
198.854 64.0249 199.18 63.7915 199.516 63.4707 cv
199.516 62.5342 li
cp
f
204.728 58.7129 mo
204.728 65.5337 li
205.756 65.5337 li
205.856 65.5337 205.928 65.5532 205.971 65.5923 cv
206.037 65.7466 li
205.971 65.9014 li
205.928 65.9399 205.856 65.9595 205.756 65.9595 cv
204.302 65.9595 li
204.302 58.2871 li
205.756 58.2871 li
205.856 58.2871 205.928 58.3071 205.971 58.3477 cv
206.037 58.5024 li
205.971 58.6528 li
205.928 58.6929 205.856 58.7129 205.756 58.7129 cv
204.728 58.7129 li
cp
f
208.808 60.2598 mo
208.808 60.6924 li
209.168 60.3071 209.53 60.1143 209.894 60.1143 cv
210.113 60.1143 210.304 60.1724 210.469 60.2881 cv
210.634 60.4038 210.772 60.5791 210.883 60.814 cv
211.073 60.5791 211.265 60.4038 211.46 60.2881 cv
211.656 60.1724 211.852 60.1143 212.048 60.1143 cv
212.358 60.1143 212.603 60.2139 212.787 60.4131 cv
213.028 60.6699 213.148 60.9502 213.148 61.2539 cv
213.148 64.2256 li
213.501 64.2256 li
213.605 64.2256 213.679 64.2451 213.724 64.2842 cv
213.792 64.4385 li
213.724 64.5908 li
213.679 64.6313 213.605 64.6514 213.501 64.6514 cv
212.722 64.6514 li
212.722 61.2905 li
212.722 61.0742 212.656 60.895 212.524 60.7529 cv
212.391 60.6113 212.238 60.54 212.065 60.54 cv
211.908 60.54 211.744 60.5986 211.57 60.7148 cv
211.397 60.8315 211.2 61.0605 210.978 61.4019 cv
210.978 64.2256 li
211.332 64.2256 li
211.435 64.2256 211.509 64.2451 211.554 64.2842 cv
211.622 64.4385 li
211.554 64.5908 li
211.509 64.6313 211.435 64.6514 211.332 64.6514 cv
210.552 64.6514 li
210.552 61.3208 li
210.552 61.0942 210.486 60.9077 210.353 60.7607 cv
210.22 60.6138 210.071 60.54 209.906 60.54 cv
209.753 60.54 209.604 60.5889 209.456 60.687 cv
209.25 60.8257 209.035 61.064 208.808 61.4019 cv
208.808 64.2256 li
209.162 64.2256 li
209.265 64.2256 209.339 64.2451 209.384 64.2842 cv
209.452 64.4385 li
209.384 64.5908 li
209.339 64.6313 209.265 64.6514 209.162 64.6514 cv
208.03 64.6514 li
207.926 64.6514 207.851 64.6313 207.806 64.5908 cv
207.739 64.4385 li
207.806 64.2842 li
207.851 64.2451 207.926 64.2256 208.03 64.2256 cv
208.382 64.2256 li
208.382 60.6855 li
208.03 60.6855 li
207.926 60.6855 207.851 60.6655 207.806 60.626 cv
207.739 60.4727 li
207.806 60.3208 li
207.851 60.2803 207.926 60.2598 208.03 60.2598 cv
208.808 60.2598 li
cp
f
217.197 58.0796 mo
217.197 59.1699 li
216.564 59.1699 li
216.564 58.0796 li
217.197 58.0796 li
cp
217.208 60.2598 mo
217.208 64.2256 li
218.869 64.2256 li
218.974 64.2256 219.049 64.2451 219.093 64.2842 cv
219.16 64.4385 li
219.093 64.5908 li
219.049 64.6313 218.974 64.6514 218.869 64.6514 cv
215.11 64.6514 li
215.01 64.6514 214.938 64.6313 214.895 64.5908 cv
214.83 64.4385 li
214.895 64.2842 li
214.938 64.2451 215.01 64.2256 215.11 64.2256 cv
216.782 64.2256 li
216.782 60.6855 li
215.546 60.6855 li
215.445 60.6855 215.371 60.6655 215.325 60.6255 cv
215.255 60.4751 li
215.322 60.3198 li
215.366 60.2798 215.441 60.2598 215.546 60.2598 cv
217.208 60.2598 li
cp
f
225.295 58.2871 mo
225.295 64.2256 li
225.866 64.2256 li
225.971 64.2256 226.046 64.2451 226.09 64.2842 cv
226.157 64.4385 li
226.09 64.5908 li
226.046 64.6313 225.971 64.6514 225.866 64.6514 cv
224.87 64.6514 li
224.87 63.8037 li
224.375 64.4795 223.749 64.8174 222.989 64.8174 cv
222.603 64.8174 222.234 64.7153 221.88 64.5112 cv
221.528 64.3071 221.249 64.0161 221.044 63.6382 cv
220.839 63.2598 220.738 62.8701 220.738 62.4688 cv
220.738 62.0635 220.839 61.6729 221.044 61.2964 cv
221.249 60.9204 221.528 60.6289 221.88 60.4233 cv
222.234 60.2173 222.605 60.1143 222.994 60.1143 cv
223.737 60.1143 224.363 60.4507 224.87 61.123 cv
224.87 58.7129 li
224.298 58.7129 li
224.193 58.7129 224.118 58.6934 224.074 58.6533 cv
224.007 58.5 li
224.074 58.3481 li
224.118 58.3076 224.193 58.2871 224.298 58.2871 cv
225.295 58.2871 li
cp
224.87 62.4658 mo
224.87 61.9253 224.687 61.4692 224.322 61.0977 cv
223.957 60.7261 223.522 60.54 223.019 60.54 cv
222.512 60.54 222.076 60.7261 221.71 61.0977 cv
221.345 61.4692 221.163 61.9253 221.163 62.4658 cv
221.163 63.0029 221.345 63.4585 221.71 63.832 cv
222.076 64.2051 222.512 64.3916 223.019 64.3916 cv
223.522 64.3916 223.957 64.2051 224.322 63.832 cv
224.687 63.4585 224.87 63.0029 224.87 62.4658 cv
cp
f
229.346 60.2598 mo
229.529 60.2598 li
229.717 60.2598 229.879 60.3271 230.014 60.4614 cv
230.149 60.5957 230.216 60.7554 230.216 60.9399 cv
230.216 61.1382 230.148 61.3027 230.011 61.4336 cv
229.875 61.5649 229.713 61.6304 229.529 61.6304 cv
229.346 61.6304 li
229.158 61.6304 228.996 61.563 228.861 61.4287 cv
228.726 61.2944 228.659 61.1348 228.659 60.9502 cv
228.659 60.752 228.727 60.5874 228.864 60.4565 cv
229 60.3252 229.161 60.2598 229.346 60.2598 cv
cp
229.346 63.4365 mo
229.529 63.4365 li
229.717 63.4365 229.879 63.5034 230.014 63.6367 cv
230.149 63.7695 230.216 63.9307 230.216 64.1191 cv
230.216 64.3149 230.148 64.4785 230.011 64.6099 cv
229.875 64.7412 229.713 64.8071 229.529 64.8071 cv
229.346 64.8071 li
229.158 64.8071 228.996 64.7407 228.861 64.6074 cv
228.726 64.4741 228.659 64.3135 228.659 64.1245 cv
228.659 63.9292 228.727 63.7656 228.864 63.6338 cv
229 63.5024 229.161 63.4365 229.346 63.4365 cv
cp
f
235.469 65.5337 mo
235.469 58.7129 li
234.442 58.7129 li
234.341 58.7129 234.27 58.6929 234.226 58.6528 cv
234.162 58.5024 li
234.226 58.3477 li
234.27 58.3071 234.341 58.2871 234.442 58.2871 cv
235.895 58.2871 li
235.895 65.9595 li
234.442 65.9595 li
234.341 65.9595 234.27 65.9399 234.226 65.9014 cv
234.162 65.7466 li
234.226 65.5947 li
234.27 65.5542 234.341 65.5337 234.442 65.5337 cv
235.469 65.5337 li
cp
f
118.187 18.9555 mo
75.7158 47.2699 li
75.4989 47.4145 75.4403 47.7075 75.5849 47.9244 cv
75.7295 48.1412 76.0224 48.1998 76.2393 48.0552 cv
118.711 19.7408 li
118.928 19.5962 118.986 19.3032 118.842 19.0864 cv
118.697 18.8695 118.404 18.8109 118.187 18.9555 cv
.746 .676 .668 .898 cmyk
f
69.7476 51.5981 mo
77.5957 49.7437 li
74.4404 45.0405 li
69.7476 51.5981 li
cp
f
69.7476 51.5981 mo
69.8561 52.0574 li
78.3659 50.0463 li
74.453 44.2121 li
68.6315 52.3468 li
69.8561 52.0574 li
69.7476 51.5981 li
70.1313 51.8728 li
74.4278 45.869 li
76.8235 49.441 li
69.639 51.1389 li
69.7476 51.5981 li
70.1313 51.8728 li
69.7476 51.5981 li
cp
f
144.611 19.7381 mo
186.139 48.0525 li
186.354 48.1993 186.648 48.1438 186.795 47.9284 cv
186.941 47.7131 186.886 47.4195 186.671 47.2727 cv
145.142 18.9582 li
144.927 18.8114 144.633 18.867 144.487 19.0823 cv
144.34 19.2976 144.395 19.5912 144.611 19.7381 cv
f
192.634 51.5981 mo
187.941 45.0405 li
184.788 49.7437 li
192.634 51.5981 li
cp
f
192.634 51.5981 mo
193.018 51.3235 li
187.928 44.212 li
184.016 50.0463 li
193.75 52.3469 li
193.018 51.3235 li
192.634 51.5981 li
192.743 51.1389 li
185.559 49.441 li
187.954 45.869 li
192.251 51.8728 li
192.634 51.5981 li
192.743 51.1389 li
192.634 51.5981 li
cp
f
54.7415 70.3145 mo
54.7415 93.9097 li
54.7415 94.1703 54.9527 94.3816 55.2134 94.3816 cv
55.474 94.3816 55.6853 94.1703 55.6853 93.9097 cv
55.6853 70.3145 li
55.6853 70.0538 55.474 69.8425 55.2134 69.8425 cv
54.9527 69.8425 54.7415 70.0538 54.7415 70.3145 cv
f
54.7417 101.554 mo
57.5728 94.0039 li
51.9102 94.0039 li
54.7417 101.554 li
cp
f
54.7417 101.554 mo
55.1836 101.72 li
58.2537 93.532 li
51.2292 93.532 li
54.7417 102.898 li
55.1836 101.72 li
54.7417 101.554 li
55.1836 101.388 li
52.5911 94.4758 li
56.8918 94.4758 li
54.2998 101.389 li
54.7417 101.554 li
55.1836 101.388 li
54.7417 101.554 li
cp
f
68.165 121.673 mo
110.637 149.988 li
110.854 150.132 111.147 150.074 111.292 149.857 cv
111.436 149.64 111.378 149.347 111.161 149.203 cv
68.6885 120.888 li
68.4717 120.744 68.1787 120.802 68.0341 121.019 cv
67.8895 121.236 67.9481 121.529 68.165 121.673 cv
f
116.643 153.53 mo
111.928 146.987 li
108.79 151.701 li
116.643 153.53 li
cp
f
116.643 153.53 mo
117.026 153.254 li
111.911 146.159 li
108.018 152.006 li
117.762 154.275 li
117.026 153.254 li
116.643 153.53 li
116.75 153.07 li
109.559 151.395 li
111.942 147.816 li
116.26 153.806 li
116.643 153.53 li
116.75 153.07 li
116.643 153.53 li
cp
f
207.64 70.3145 mo
207.64 93.9097 li
207.64 94.1703 207.851 94.3816 208.112 94.3816 cv
208.372 94.3816 208.584 94.1703 208.584 93.9097 cv
208.584 70.3145 li
208.584 70.0538 208.372 69.8425 208.112 69.8425 cv
207.851 69.8425 207.64 70.0538 207.64 70.3145 cv
f
207.64 101.554 mo
210.472 94.0039 li
204.809 94.0039 li
207.64 101.554 li
cp
f
207.64 101.554 mo
208.082 101.72 li
211.153 93.532 li
204.128 93.532 li
207.64 102.898 li
208.082 101.72 li
207.64 101.554 li
208.082 101.389 li
205.49 94.4758 li
209.791 94.4758 li
207.198 101.388 li
207.64 101.554 li
208.082 101.389 li
207.64 101.554 li
cp
f
194.637 120.888 mo
152.165 149.203 li
151.949 149.347 151.89 149.64 152.035 149.857 cv
152.179 150.074 152.472 150.132 152.689 149.988 cv
195.161 121.673 li
195.378 121.529 195.436 121.236 195.292 121.019 cv
195.147 120.802 194.854 120.744 194.637 120.888 cv
f
145.738 153.53 mo
153.592 151.701 li
150.455 146.987 li
145.738 153.53 li
cp
f
145.738 153.53 mo
145.845 153.989 li
154.362 152.006 li
150.47 146.159 li
144.619 154.275 li
145.845 153.989 li
145.738 153.53 li
146.121 153.806 li
150.439 147.816 li
152.822 151.395 li
145.631 153.07 li
145.738 153.53 li
146.121 153.806 li
145.738 153.53 li
cp
f
64.0601 82.5981 mo
64.0601 84.1763 li
63.894 84.1763 li
63.7661 83.6816 63.6021 83.3447 63.4019 83.1665 cv
63.2017 82.9883 62.9463 82.8989 62.6367 82.8989 cv
62.4009 82.8989 62.2109 82.9614 62.0659 83.0864 cv
61.9214 83.2114 61.8491 83.3496 61.8491 83.5015 cv
61.8491 83.6904 61.9023 83.8525 62.0088 83.9878 cv
62.1123 84.126 62.3242 84.2729 62.645 84.4282 cv
63.3848 84.7876 li
64.0703 85.1221 64.4131 85.563 64.4131 86.1104 cv
64.4131 86.5327 64.2534 86.873 63.9346 87.1313 cv
63.6152 87.3896 63.2578 87.519 62.8628 87.519 cv
62.5786 87.519 62.2544 87.4697 61.8896 87.3711 cv
61.7783 87.3384 61.687 87.3218 61.6162 87.3218 cv
61.4336 87.4463 li
61.2676 87.4463 li
61.2676 85.7852 li
61.4336 85.7852 li
61.5283 86.2598 61.7095 86.6172 61.9766 86.8574 cv
62.2437 87.0977 62.543 87.2178 62.8745 87.2178 cv
63.1079 87.2178 63.2979 87.1499 63.4448 87.0132 cv
63.5923 86.8765 63.666 86.7119 63.666 86.5195 cv
63.666 86.2871 63.5835 86.0913 63.4185 85.9326 cv
63.2539 85.7744 62.9263 85.5742 62.436 85.3325 cv
61.9458 85.0908 61.625 84.8716 61.4736 84.6753 cv
61.3223 84.4824 61.2466 84.2383 61.2466 83.9438 cv
61.2466 83.5615 61.3774 83.2412 61.6392 82.9844 cv
61.9009 82.7266 62.2388 82.5981 62.6538 82.5981 cv
62.8364 82.5981 63.0571 82.6377 63.3174 82.7173 cv
63.4893 82.7695 63.604 82.7954 63.6616 82.7954 cv
63.7881 82.7588 li
63.894 82.5981 li
64.0601 82.5981 li
cp
0 0 0 1 cmyk
f
67.3877 82.5981 mo
68.0913 82.5981 68.6563 82.8647 69.082 83.3989 cv
69.4438 83.855 69.625 84.3784 69.625 84.9697 cv
69.625 85.3853 69.5254 85.8062 69.3257 86.2319 cv
69.126 86.6577 68.8511 86.9785 68.5015 87.1948 cv
68.1514 87.4111 67.7612 87.519 67.3315 87.519 cv
66.6318 87.519 66.0752 87.2402 65.6626 86.6826 cv
65.314 86.2134 65.1401 85.686 65.1401 85.1016 cv
65.1401 84.6758 65.2456 84.2529 65.457 83.832 cv
65.6685 83.4116 65.9468 83.1006 66.292 82.8994 cv
66.6367 82.6987 67.002 82.5981 67.3877 82.5981 cv
cp
67.2305 82.9302 mo
67.0513 82.9302 66.8716 82.9834 66.6904 83.0898 cv
66.5098 83.1958 66.3638 83.3823 66.252 83.6489 cv
66.1406 83.9155 66.085 84.2578 66.085 84.6763 cv
66.085 85.3506 66.2192 85.9326 66.4878 86.4219 cv
66.7563 86.9111 67.1104 87.1558 67.5498 87.1558 cv
67.8779 87.1558 68.1479 87.021 68.3608 86.751 cv
68.5737 86.481 68.6802 86.0171 68.6802 85.3594 cv
68.6802 84.5361 68.5029 83.8882 68.1479 83.416 cv
67.9082 83.0923 67.6021 82.9302 67.2305 82.9302 cv
cp
f
71.6602 82.5981 mo
71.6602 83.6465 li
72.0459 82.9473 72.4419 82.5981 72.8477 82.5981 cv
73.0327 82.5981 73.1851 82.6548 73.3062 82.7686 cv
73.4268 82.8823 73.4873 83.0137 73.4873 83.1631 cv
73.4873 83.2954 73.4438 83.4072 73.3569 83.499 cv
73.27 83.5903 73.166 83.6362 73.0459 83.6362 cv
72.9287 83.6362 72.7969 83.5771 72.6509 83.46 cv
72.5044 83.3423 72.396 83.2832 72.3257 83.2832 cv
72.1289 83.3853 li
71.9775 83.5244 71.8213 83.7534 71.6602 84.0723 cv
71.6602 86.2939 li
71.6602 86.5527 71.6919 86.7485 71.7563 86.8809 cv
71.7998 86.9731 71.8774 87.0488 71.9888 87.1084 cv
72.1001 87.1675 72.2607 87.1973 72.4697 87.1973 cv
72.4697 87.3843 li
70.0923 87.3843 li
70.0923 87.1973 li
70.3276 87.1973 70.5029 87.1602 70.6172 87.0859 cv
70.7012 87.0317 70.7603 86.9453 70.7935 86.8271 cv
70.8105 86.77 70.8188 86.606 70.8188 86.3354 cv
70.8188 84.5396 li
70.8188 84 70.8081 83.6787 70.7861 83.5762 cv
70.7642 83.4731 70.7236 83.3979 70.6646 83.3506 cv
70.4448 83.2798 li
70.3403 83.2798 70.2222 83.3052 70.0908 83.356 cv
70.0405 83.1689 li
71.4468 82.5981 li
71.6602 82.5981 li
cp
f
75.1069 81.207 mo
75.1069 82.7329 li
76.1914 82.7329 li
76.1914 83.0757 li
75.1069 83.0859 li
75.1069 86.0991 li
75.1069 86.3999 75.1499 86.603 75.2358 86.708 cv
75.3218 86.8125 75.4326 86.8652 75.5674 86.8652 cv
75.6787 86.8652 75.7866 86.8301 75.8916 86.7598 cv
75.9961 86.6899 76.0771 86.5864 76.1348 86.4497 cv
76.332 86.4497 li
76.2134 86.7837 76.0459 87.0352 75.8291 87.2036 cv
75.6128 87.3726 75.3892 87.457 75.1592 87.457 cv
75.0034 87.457 74.8511 87.4136 74.7021 87.3271 cv
74.5532 87.2407 74.4434 87.1167 74.3726 86.9556 cv
74.3013 86.7944 74.2656 86.5459 74.2656 86.21 cv
74.2656 83.0757 li
73.5288 83.0757 li
73.5288 82.9141 li
73.7153 82.8403 73.9063 82.7158 74.1011 82.54 cv
74.2959 82.3643 74.4702 82.1553 74.624 81.9116 cv
74.7021 81.7832 74.8115 81.5483 74.9512 81.207 cv
75.1069 81.207 li
cp
f
216.8 82.2349 mo
216.8 83.8125 li
216.634 83.8125 li
216.506 83.3184 216.342 82.9814 216.142 82.8032 cv
215.942 82.625 215.687 82.5356 215.377 82.5356 cv
215.141 82.5356 214.951 82.5981 214.806 82.7231 cv
214.662 82.8481 214.589 82.9863 214.589 83.1382 cv
214.589 83.3271 214.642 83.4893 214.75 83.624 cv
214.852 83.7627 215.065 83.9097 215.385 84.0649 cv
216.125 84.4243 li
216.811 84.7588 217.154 85.1997 217.154 85.7471 cv
217.154 86.1689 216.994 86.5098 216.674 86.7681 cv
216.356 87.0264 215.999 87.1558 215.603 87.1558 cv
215.319 87.1558 214.995 87.1064 214.63 87.0078 cv
214.518 86.9751 214.427 86.9585 214.356 86.9585 cv
214.174 87.083 li
214.008 87.083 li
214.008 85.4219 li
214.174 85.4219 li
214.269 85.896 214.45 86.2534 214.716 86.4941 cv
214.984 86.7344 215.284 86.8545 215.615 86.8545 cv
215.848 86.8545 216.039 86.7861 216.185 86.6499 cv
216.333 86.5132 216.406 86.3486 216.406 86.1563 cv
216.406 85.9238 216.324 85.728 216.159 85.5693 cv
215.995 85.4111 215.667 85.2109 215.176 84.9692 cv
214.686 84.7271 214.365 84.5083 214.213 84.3115 cv
214.063 84.1187 213.987 83.875 213.987 83.5806 cv
213.987 83.1978 214.118 82.8779 214.379 82.6206 cv
214.641 82.3633 214.979 82.2349 215.394 82.2349 cv
215.577 82.2349 215.797 82.2744 216.057 82.354 cv
216.229 82.4063 216.344 82.4321 216.402 82.4321 cv
216.528 82.3955 li
216.634 82.2349 li
216.8 82.2349 li
cp
f
220.127 82.2349 mo
220.832 82.2349 221.396 82.5015 221.823 83.0352 cv
222.184 83.4917 222.366 84.0151 222.366 84.6064 cv
222.366 85.022 222.265 85.4429 222.066 85.8687 cv
221.867 86.2939 221.591 86.6152 221.242 86.8315 cv
220.891 87.0479 220.501 87.1558 220.072 87.1558 cv
219.372 87.1558 218.816 86.877 218.403 86.3193 cv
218.054 85.8496 217.88 85.3228 217.88 84.7383 cv
217.88 84.3125 217.986 83.8896 218.198 83.4688 cv
218.409 83.0483 218.687 82.7373 219.032 82.5361 cv
219.377 82.335 219.743 82.2349 220.127 82.2349 cv
cp
219.971 82.5669 mo
219.792 82.5669 219.612 82.6201 219.431 82.7266 cv
219.25 82.8325 219.104 83.019 218.993 83.2856 cv
218.88 83.5518 218.825 83.8945 218.825 84.3125 cv
218.825 84.9873 218.959 85.5693 219.228 86.0586 cv
219.497 86.5479 219.851 86.7925 220.291 86.7925 cv
220.618 86.7925 220.888 86.6572 221.101 86.3877 cv
221.314 86.1177 221.42 85.6538 221.42 84.9961 cv
221.42 84.1729 221.243 83.5249 220.888 83.0527 cv
220.648 82.729 220.342 82.5669 219.971 82.5669 cv
cp
f
224.4 82.2349 mo
224.4 83.2832 li
224.786 82.584 225.182 82.2349 225.588 82.2349 cv
225.773 82.2349 225.925 82.2915 226.046 82.4053 cv
226.167 82.5186 226.227 82.6504 226.227 82.7993 cv
226.227 82.9316 226.184 83.0439 226.097 83.1357 cv
226.01 83.2271 225.907 83.2729 225.786 83.2729 cv
225.669 83.2729 225.538 83.2139 225.391 83.0962 cv
225.245 82.9785 225.136 82.9199 225.066 82.9199 cv
224.87 83.0215 li
224.718 83.1611 224.562 83.3901 224.4 83.709 cv
224.4 85.9307 li
224.4 86.1895 224.432 86.3853 224.497 86.5176 cv
224.541 86.6099 224.618 86.6855 224.729 86.7451 cv
224.84 86.8042 225 86.834 225.21 86.834 cv
225.21 87.0205 li
222.833 87.0205 li
222.833 86.834 li
223.068 86.834 223.243 86.7969 223.358 86.7227 cv
223.442 86.6685 223.5 86.582 223.534 86.4639 cv
223.551 86.4063 223.559 86.2427 223.559 85.9722 cv
223.559 84.1763 li
223.559 83.6367 223.548 83.3154 223.526 83.2124 cv
223.504 83.1099 223.464 83.0347 223.405 82.9873 cv
223.185 82.9165 li
223.081 82.9165 222.962 82.9419 222.832 82.9927 cv
222.781 82.8057 li
224.187 82.2349 li
224.4 82.2349 li
cp
f
227.847 80.8438 mo
227.847 82.3696 li
228.932 82.3696 li
228.932 82.7124 li
227.847 82.7227 li
227.847 85.7358 li
227.847 86.0366 227.89 86.2397 227.976 86.3447 cv
228.062 86.4492 228.172 86.502 228.308 86.502 cv
228.419 86.502 228.527 86.4668 228.631 86.3965 cv
228.737 86.3267 228.818 86.2231 228.875 86.0864 cv
229.072 86.0864 li
228.954 86.4204 228.787 86.6719 228.57 86.8403 cv
228.353 87.0093 228.129 87.0933 227.9 87.0933 cv
227.744 87.0933 227.591 87.0503 227.443 86.9639 cv
227.293 86.877 227.184 86.7534 227.113 86.5923 cv
227.042 86.4312 227.006 86.1826 227.006 85.8467 cv
227.006 82.7124 li
226.269 82.7124 li
226.269 82.5508 li
226.456 82.4771 226.646 82.3525 226.841 82.1768 cv
227.037 82.001 227.21 81.7915 227.364 81.5483 cv
227.443 81.4199 227.551 81.1851 227.691 80.8438 cv
227.847 80.8438 li
cp
f
120.02 139.478 mo
120.355 139.138 120.554 138.943 120.614 138.892 cv
120.766 138.763 120.928 138.663 121.103 138.591 cv
121.278 138.52 121.451 138.484 121.623 138.484 cv
121.912 138.484 122.16 138.569 122.369 138.739 cv
122.577 138.909 122.716 139.155 122.787 139.478 cv
123.136 139.07 123.43 138.803 123.67 138.675 cv
123.911 138.548 124.158 138.484 124.412 138.484 cv
124.659 138.484 124.878 138.548 125.07 138.675 cv
125.261 138.802 125.413 139.009 125.524 139.297 cv
125.599 139.493 125.636 139.801 125.636 140.221 cv
125.636 142.222 li
125.636 142.511 125.658 142.709 125.701 142.816 cv
125.884 143.006 li
125.974 143.058 126.12 143.083 126.321 143.083 cv
126.321 143.271 li
124.047 143.271 li
124.047 143.083 li
124.144 143.083 li
124.342 143.083 124.497 143.045 124.608 142.968 cv
124.686 142.914 124.741 142.828 124.775 142.711 cv
124.789 142.654 124.795 142.491 124.795 142.222 cv
124.795 140.223 li
124.795 139.844 124.75 139.577 124.658 139.421 cv
124.526 139.205 124.314 139.097 124.022 139.097 cv
123.843 139.097 123.662 139.142 123.481 139.231 cv
123.299 139.321 123.08 139.487 122.822 139.731 cv
122.812 139.787 li
122.833 140.005 li
122.833 142.222 li
122.833 142.538 122.851 142.734 122.885 142.812 cv
122.92 142.889 122.987 142.954 123.083 143.006 cv
123.181 143.058 123.346 143.083 123.581 143.083 cv
123.581 143.271 li
121.245 143.271 li
121.245 143.083 li
121.499 143.083 121.673 143.054 121.769 142.993 cv
121.864 142.933 121.93 142.842 121.967 142.721 cv
121.983 142.664 121.992 142.498 121.992 142.222 cv
121.992 140.223 li
121.992 139.844 121.937 139.571 121.826 139.404 cv
121.677 139.186 121.471 139.076 121.205 139.076 cv
121.023 139.076 120.843 139.125 120.665 139.225 cv
120.386 139.375 120.171 139.543 120.02 139.731 cv
120.02 142.222 li
120.02 142.524 120.04 142.721 120.082 142.812 cv
120.124 142.902 120.186 142.97 120.268 143.016 cv
120.35 143.061 120.516 143.083 120.767 143.083 cv
120.767 143.271 li
118.473 143.271 li
118.473 143.083 li
118.686 143.083 118.834 143.061 118.919 143.016 cv
119.004 142.97 119.068 142.898 119.112 142.799 cv
119.156 142.7 119.178 142.507 119.178 142.222 cv
119.178 140.447 li
119.178 139.938 119.163 139.608 119.133 139.46 cv
119.109 139.349 119.072 139.272 119.021 139.229 cv
118.814 139.166 li
118.72 139.166 118.607 139.191 118.476 139.242 cv
118.4 139.056 li
119.801 138.484 li
120.02 138.484 li
120.02 139.478 li
cp
f
127.484 140.374 mo
127.48 141.061 127.648 141.599 127.986 141.989 cv
128.324 142.38 128.721 142.575 129.177 142.575 cv
129.482 142.575 129.746 142.492 129.971 142.327 cv
130.196 142.161 130.384 141.873 130.537 141.464 cv
130.692 141.565 li
130.621 142.033 130.415 142.457 130.074 142.836 cv
129.733 143.216 129.306 143.405 128.793 143.405 cv
128.236 143.405 127.759 143.188 127.363 142.755 cv
126.966 142.321 126.768 141.738 126.768 141.006 cv
126.768 140.212 126.971 139.594 127.378 139.15 cv
127.785 138.707 128.295 138.484 128.91 138.484 cv
129.43 138.484 129.856 138.656 130.191 138.999 cv
130.525 139.341 130.692 139.8 130.692 140.374 cv
127.484 140.374 li
cp
127.484 140.083 mo
129.633 140.083 li
129.616 139.786 129.581 139.577 129.527 139.456 cv
129.442 139.267 129.316 139.118 129.149 139.01 cv
128.982 138.902 128.807 138.848 128.625 138.848 cv
128.344 138.848 128.093 138.957 127.872 139.174 cv
127.65 139.392 127.521 139.695 127.484 140.083 cv
cp
f
132.686 138.484 mo
132.686 139.533 li
133.071 138.834 133.467 138.484 133.874 138.484 cv
134.058 138.484 134.21 138.541 134.332 138.655 cv
134.453 138.769 134.512 138.9 134.512 139.049 cv
134.512 139.182 134.469 139.293 134.382 139.385 cv
134.295 139.477 134.192 139.522 134.071 139.522 cv
133.955 139.522 133.823 139.464 133.676 139.346 cv
133.53 139.229 133.422 139.17 133.351 139.17 cv
133.154 139.271 li
133.003 139.411 132.847 139.64 132.686 139.959 cv
132.686 142.181 li
132.686 142.439 132.717 142.635 132.782 142.768 cv
132.826 142.859 132.903 142.935 133.015 142.995 cv
133.126 143.054 133.286 143.083 133.495 143.083 cv
133.495 143.271 li
131.118 143.271 li
131.118 143.083 li
131.354 143.083 131.528 143.046 131.643 142.972 cv
131.727 142.918 131.786 142.832 131.819 142.714 cv
131.836 142.656 131.845 142.492 131.845 142.222 cv
131.845 140.426 li
131.845 139.886 131.833 139.565 131.812 139.462 cv
131.79 139.359 131.75 139.284 131.69 139.237 cv
131.47 139.166 li
131.366 139.166 131.248 139.191 131.117 139.242 cv
131.066 139.056 li
132.472 138.484 li
132.686 138.484 li
cp
f
135.838 141.567 mo
135.555 141.429 135.338 141.235 135.187 140.987 cv
135.035 140.739 134.959 140.465 134.959 140.165 cv
134.959 139.706 135.132 139.311 135.477 138.98 cv
135.823 138.65 136.265 138.484 136.805 138.484 cv
137.247 138.484 137.629 138.592 137.953 138.806 cv
138.934 138.806 li
139.079 138.806 139.164 138.811 139.187 138.819 cv
139.237 138.862 li
139.268 139.024 li
139.243 139.207 li
139.189 139.248 li
139.164 139.258 139.079 139.263 138.933 139.263 cv
138.33 139.263 li
138.519 139.506 138.614 139.817 138.614 140.195 cv
138.614 140.627 138.449 140.997 138.118 141.304 cv
137.788 141.611 137.345 141.765 136.789 141.765 cv
136.56 141.765 136.326 141.731 136.086 141.664 cv
135.938 141.792 135.837 141.905 135.785 142.002 cv
135.733 142.099 135.707 142.181 135.707 142.249 cv
135.791 142.417 li
135.846 142.471 135.956 142.51 136.118 142.533 cv
136.212 142.548 136.449 142.561 136.828 142.572 cv
137.524 142.59 137.975 142.615 138.181 142.647 cv
138.496 142.691 138.747 142.808 138.934 142.998 cv
139.122 143.187 139.215 143.42 139.215 143.697 cv
139.215 144.08 139.037 144.438 138.679 144.772 cv
138.152 145.266 137.464 145.513 136.617 145.513 cv
135.965 145.513 135.415 145.366 134.965 145.072 cv
134.712 144.902 134.585 144.727 134.585 144.544 cv
134.641 144.3 li
134.699 144.175 134.817 144.001 134.996 143.778 cv
135.019 143.747 135.191 143.564 135.512 143.229 cv
135.336 143.124 135.213 143.03 135.14 142.947 cv
135.068 142.863 135.032 142.769 135.032 142.664 cv
135.032 142.544 135.08 142.405 135.175 142.245 cv
135.271 142.085 135.493 141.859 135.838 141.567 cv
cp
136.72 138.733 mo
136.471 138.733 136.262 138.833 136.094 139.032 cv
135.926 139.23 135.841 139.535 135.841 139.945 cv
135.841 140.478 135.957 140.89 136.185 141.183 cv
136.36 141.405 136.583 141.516 136.852 141.516 cv
137.108 141.516 137.319 141.42 137.484 141.228 cv
137.649 141.036 137.731 140.735 137.731 140.324 cv
137.731 139.789 137.615 139.37 137.382 139.067 cv
137.21 138.845 136.99 138.733 136.72 138.733 cv
cp
135.791 143.271 mo
135.633 143.442 135.513 143.603 135.433 143.751 cv
135.352 143.9 135.312 144.037 135.312 144.162 cv
135.312 144.323 135.41 144.465 135.605 144.587 cv
135.943 144.796 136.43 144.9 137.067 144.9 cv
137.674 144.9 138.122 144.793 138.41 144.579 cv
138.698 144.364 138.842 144.135 138.842 143.892 cv
138.842 143.716 138.756 143.591 138.583 143.517 cv
138.409 143.442 138.061 143.398 137.542 143.385 cv
136.783 143.365 136.199 143.327 135.791 143.271 cv
cp
f
140.565 140.374 mo
140.562 141.061 140.729 141.599 141.067 141.989 cv
141.406 142.38 141.802 142.575 142.259 142.575 cv
142.563 142.575 142.828 142.492 143.052 142.327 cv
143.277 142.161 143.465 141.873 143.618 141.464 cv
143.774 141.565 li
143.703 142.033 143.497 142.457 143.156 142.836 cv
142.815 143.216 142.387 143.405 141.875 143.405 cv
141.318 143.405 140.84 143.188 140.444 142.755 cv
140.047 142.321 139.849 141.738 139.849 141.006 cv
139.849 140.212 140.052 139.594 140.459 139.15 cv
140.866 138.707 141.376 138.484 141.991 138.484 cv
142.511 138.484 142.938 138.656 143.272 138.999 cv
143.606 139.341 143.774 139.8 143.774 140.374 cv
140.565 140.374 li
cp
140.565 140.083 mo
142.714 140.083 li
142.698 139.786 142.663 139.577 142.608 139.456 cv
142.524 139.267 142.398 139.118 142.23 139.01 cv
142.063 138.902 141.888 138.848 141.706 138.848 cv
141.425 138.848 141.174 138.957 140.954 139.174 cv
140.732 139.392 140.603 139.695 140.565 140.083 cv
cp
f
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (011x005.eps)%%CreationDate: 27/05/15 11:20 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^CuYMdK/:n8kA4t=c#!k+n3#%05PE`2V9i+!SI"h9Z[;)`F^q@NQV+)PWN)bWdcj*q[oI4N4pp]WXs@RW%8ZJYUe.b'FlZsbGhJ&M1HepM\acL$]Qo-Ho7]!MoUtZ*"7E[0HA>/`imC2!AHE2PDD84VJ]jeV,me0\E`P8IUjC.]`4fKcHlcj&=%5KQ6uqY$1FkBHU^8u#Om[(G5GISuK<&ccM)\a\?eerG3o?gHO5Uh\Wa<hD+hb9"NSd)'u.hJKq`Ir"]jKX>(?rC2ipnA'Fkhp:We%5&(@t6q0Q[%r_22!YL[r5C\/`s(M'$h.j^PDEVTFQ/-WH]A!3MY=n)/6WTAIXcR03p$YY^g95!-WKNk'&ZPPhJ#=Si,B50O5S%DD%2@E-EXC7WAotMF<s/[JilIB(O9/r1)p<O]XK:4?,RO""ko&T/H=mo\*)LY#E$6YhBkce?n2c4/3qitddK=1b'i1Hg\7CE"in"WWr%2h.Og.nPZLJ@a[3qKKVG\-E`gGNu;gp(aHF=dJEUCa/*u1b3@aVNjQ$@]N[1[O!F1rtL+T/L_nmX'b"]U`)K*-s9h&lDYHHGK8OZ%8#*J$-'o@;FQmtX;<'fsACi"I\2d\bph-p_KPn_[I_Xa6m6Djr4QL`4.=6;7._,7A;V.p,&H?8E[/hF@`"\;HZqAkt(%K:A(">JJ%9c!`rK:kg"5?3D5_gkP;L<j=k5ue[!W[^,2<HtODjCtFlDj.X="%jF8r%\[/AJe7d0Idfle$bs/D*o2q#2+RB:s-5?'RYO/-rhfb%WF?Ir//I29Ym=nj'mNo](^@WYWPJ*tKtKc$-M.ps8<)[Z]ZHbG8D;u88jSs)'1tQ[=A-alBG#VY)/'V06G"*_aLfeGpk3#$,5;:7%KMM_,Zj8jhh=)5RcmG]TE0Jc^V4_,`$"YS$J?f(SapF+8(C?GdPIsIj:8fPI'A?"E5WS-T<eC5SV4`8+$(+6oP#dcZUrVCHP_/V6%*[Y,8mm?p0'7N758H6RTTc>3E$)O;Cn4@qg8."6*W?5kc1'!Opq-e\@kTa>f;M8tI0;R]_HD$eT7Hu1d=auPHloum#X^dM#Xb4)S%X3":R++-C(,2^a2_@uJmHpS]a>p@N=RuJH*3DosADC37p<g^5pj[<"&/?j-1qNUK?:e/#jl6Uf[b#se0[Lq5e'W[d4-h!8^j?Gsk%)4<m]8Y6[Q&.B<O+-Bnog;uF51`NQEA2-8ffdG4mjIXO:]Zk#DNHF%#N6AjUJ0N!)Gaic,dE:Zaob+pu9j*eOJ+/e<7@F.Q.-(^7%9E'R#%0#::aa]/SXqM*@9E$_AnsfY*s&g-5D-<rXMuK'hP:-8]q6*U;^\M7-?Qrc*&IAD0r[X>WDuQ+$-TV2=I1CZ1T;5i9Dt]+e%7I=$\U8D!aZA!anF<b^(8daRQXsg/]+GcmFAdQ:)J>(kHV.,_r"F>ed78Wno)*]u\Gmr0[R9@[:GoQ^b^c,.MIOa8Chi'[t6W$E(%"=;CX47JeL9VhJgZlTt6;[0acW30)N%Fo0LDu!4iW<;MV8cCd.?17:V]Be$&`MD%aA<o3iE8:__(&sH+rLS96<_AMZp_4Bie&`:"%2D#$WTY>)Ej=bg@i!F:T7=.m?m/f"N/Mcn42>0[DaEIcb>_"bEbV(5%:`a\DQF;UNiUR></mLRNI87rKAYFL.I)d3[6@!epdjC1q%i4Ems2b<D$RWX7L;%2u3O:$^YUn"h^QUi&L-=!0DW0FYEOV613P#C6u22f9'DcJ-,UH3)#1b?HX%"l#hS\/75TOnX3;8N:MDcPu8%JH?;>;bYWGA<`/g5WOEh6nUbP:^I6f%f-S#jq.AYM>Zt22@[Z5_BF/N!%WLo/,6gHrCd!6&-JX.pIS\G50.4D-o-u5JA=,%)C^GL%H"W(7l:CB+Dbu></l=6$&D&1ea>/2OFjcCX_>Qn^$Ela-j'4?qB#7=]%L4YAfE;_?YkJDdW,@JmU:Lg!doFhG9TLnhLh;;UK=7NQ%9f3sBJ;d]mm(4tsS>r@E@#V'iLB4k5(5EAt1Sl,G,s+6-EXjd:'uA"*`%A#D%PfW]Ss+Ys*@Tc1Y#9NkX_%-e)T[,9\+kni-hWm=%OhW)a=j')]17ZWPiU@Xq!^7D/En@Et]_nU;bN'*r3tOBN)e]r]9;P:*BVr-\c)+C,.[.V<>"gTYAB!M<R7jfsojgbC3E5"5a(^)j%^4hPE@=6*4cf/<)QLoD!\*trGq.h<C6W&1tE[8Ki+0""W&$"5kr@<I!*j7E.&OPdVig,M(&%*T#[Aq/],-=CH%A$Ls?V(SL[ZCTl%d(61d+qgb%o\GBq#E^j]mtrp<Yl-iP`qU;"2T.ZlUkRMn#-X#N,s!Pp=W5f7lQb*e5IZIRjRk8+JcA_@I?)8M:JI`?N(>Qt]nT1H%a=KqCW7b]TiH^dDShS(13Rm24.XeqQk%++kJ4C3>8I4c)30[i7"IO2@M\nD@?TRmlg:iZ``8V+T@<m>9b=aBXoNH2cNe[,DNSbMC%!9]c@6YsK@^[S[L#F(=4h.Y0m#.#`Q4AOdo<KGI5'jJ40YmgFAC6N*9=NosQ@_QOQrC+G<^_>=,"o4W[?7P)oIV*X$ZZ9R7)#0$c%RmCRgKC#$5YdFQ%6BV5i9C.!LD<LkiY^c""r2&<$U<UA3B-&f*hAX<Zf'N^=Dkcq:*Q-U('adB!"-eSOUo;'n4-/)cU%"Dai-Scs%3_a)06%T@N\(bNf#]jug/+AkAH`R_LX[mC25/_LC42E>2jqNsWVDaKqor,]PN_1**L&Bc>KOhpX$*0U[LN^!B?+m(\qk?WdE#p^9%Z2,kMMQ@hO*jZ,m^c3daL.qHueJgF*X/Qc&[Vb3dIi(hgDB6k33;*O'2g?O20V!,[EEh8/0CYn@4MWgP'@;L5[on^O2o%.\F@Hl(%VbMK=!:_M7#_#ZSYi6rSbmO7Oht'`PAq)fLZig?Is1qgT>Q[)BIe.)TLckc%k,i+nK2=4RZbN0ZR2cnU)MIZbV@\GJo:-4$//@gc%N6hSuPJ1OjZKrTnas)sJRqX4(S]mes>qS27+)E:YXaS$',_'BnQE\HscRm%C[5-4ofE4"qPC_BfqfE1M!(8f-H-j$[dH]jK)=0<:%h#A`C2t?oJK7!3Y__pALWX*MKrkBpN'u1#m@K[upje=+;?3f-?:@pdehB9'(K11Y;T=;W&,3FB[GSmm7MB&s?12PUs,PB]*VC,Wq%<U.ohk6Pt`84eBA6F+ZpLArVG%!k;fs+oGjoTqO=,a2>1?o(rSj8G3u'hC%MG`O#d9dK!-&UTL@Ust0s&L!Fi8Yqfo9aH4?S9R@c%3N`\.%p3rGD2[(kfTRH<)V]J'&kh/OKk8!:loIHpM;+-')&7f(LlEDIO3)"dgXOM(U9V8c2?od]WOKAr!ro#ubk%/h/c;1Kr[h0`%E-Rj<K'Vq+9C-_e"-Ah5R8c9I2N,sT9^@$)+cRK2,gO.r]Zk'=,1[Bi-gD(\(S:HnhS8Qgs-%uJ0L+mi2mHT^PG'Z>ekKu*ME:lX%kF(_rrX3ZA5Ona]2@.qZBP*LEAg4Q4=<ZaDHq_1jJa;[7c1t+N#&aCEJ%4;:d-uP'7O+/`Jn<*lY'C!Elc-@LR]T#H+ab*.og4eS%4np;`0=L)[U&o'!g=#LGM001gGC0X^]GDS!LAl<X.X?]^0ZIqT'CYCO^TP.Jm^;kM<'%XC>sSE6Y'D/-r$BbC;),TH#!3B+Z[&VV%Ad9gQaR0=lh%0CL=<=5Hn>fd&#GZBKZBA30BPk?9Wklspnu^RDL5eSa[V+]tgMXGaa><!@IWAc`s)uKW)uTU/W/XD.>-K;"EJ0rd%cR6tEoOtkkrpB'\hV3n_I'*?N:L8.DDl?e/q"7G]Xe/21;ZQi@rnHYgZdhMm'8ia:XENo$ndrKnJ$Qi:DjTbXmHuo_SNtB#^Zs'e%7mQB*Wi]Iq]%ZO>UHWBm>LdU(_]?r+NPEi(.cM&\c!`>gf"8U*@MjOt(\(H9;F#I@US;N'1KeDB>IC&TS,@@A:12KEcJN%$<&[tD%rq8O>([ZCp60j!\@&IB@L%>8(3_o/PXlC1*csTSTJ@DD'\,WY4"dKS#!Bp?>@kUlPc,N8_gA,Qtq,QAEgo6,m)b.(2rdJ]C)ng/B%:BKUQg?giURe?9eHi<eb(cL<lH_XS.Jr$fRVmcQ[JaKbbo?V0LNcFbW/%FZNK2@%e)HbLobKJkef-X:$pLjNpB"aPPmC1gLC#L/U%Q,NS`dXKa(B)aTLbT0]ulcGtkm_&)G5u"%AUuZM^U73dMd'p=agOQi,@,!rCjNZTG`ub*J#D)l<PbmGLo);KYee%W=/-5W)Deb+K%;1#@#A.I.JraH43P;muQNBF0ulU^M"'dp2ATT-EG;_Kl0*V\VHEDga*@CV&#i;l7mnnk$/\A0M@,tm;2&M-3=Io.mdj8fH-VmNb#%^gooacEZ9*45j9$%Cf:&rf)D#akSLp1llC7P>4\3YpU'^XcMB)#?!JI%SS!<W4\YE(!r&90:[.M]m:L>1`,ibp64TAUL/Fd1`QD.%8R[>nG!P6&okGPo4li"\Tr2Pr.RmtsO+7%thgY-tMM=s:nNXP(P'fJKH"[-UY[2,CIL?ZOF>$jX[rr5&C_mKehknc&]4fu.P5@f^%GCie63+++rW3gjkA2psQr_@oa)ms4[nNV/o0ga'!%0'D0rV"c2UjnJ/el1'nG0kd-,!=btbpmX(!4E)H=1)C2^;?t/XW]*_]/_u5%67p,=2F#GYUSb@Us7a.Y63W\6UZF>Ws7p$PjtA;oe$b0qqgWhRdp0WAXV*@.;t+)]=)1@<`[="mNI\dDh*r.L#^(%Rha#-[E>ng8%\Zj6"]R;],2)JKM)38YI$DPr"D7olAJ^>_@BMbl3>3T$qmK(#o^YH*!S)gF`hMES#I^[dRIf&O*gY]%4Ka!p1s4qR#D&DULr*\Wi%Gg/Trf_`-9%be-$7iY$`!n;B=Y%0kUimhfHX*+6qa"">/K>Pu'P?bd:h7cq%'uYh+K5G,Js-$>7KJ*$Y&!iSVEjraVrh'4#1LRE>%Gl.NZoS4B+hYuoVeT'a4^TpQTR?&W@8c,<\rkCnOrH-iPOf]e;X+p-tCX(acXnbbff)L\FOeU$%gU?d)=c4]uK<>!O2a0F#c#),j%ZC7oogVf+L5M3-jFs!--#PIgTa]FI>+nHfU,u#=p^qXEc7<?rXbNIU$9fNe1?3ifPZO?suWnmYi]@sA5h]RcG4P(<BYl`)oQ/o!p%%?X)kb`"?"?.FR#b/5A#kggUr,1/FSaG+H/:.Z4=.TTc'<I<n(cq#ut4?S@>!,)Z)Uto_Wcg&c5p)+`20Y,N%[!N7,!C'R(?5&<A%P!AOdK&'b)&kf!`gm4RF:Qk9V\;V56iOVp^f4e:c5-/qBa90nsN210nB`\s$8]7M3L]^t8UCCZk9(iN<,82lX?SYVoo'KClZn"g.%H>B'@enGKMb'16`)o9*#ojl[l\mD;jpUjRE2RpQcGE_j[IbT]S1**I.6C<Q$hIf4V1K(jg;%t7W;Y&WM@!5Yr[Ja1?gOT>Y-$3JE%ZVjg:PhfDi\+89i1?#mGGC,,[oTUgg6]j5uNNb;Hk9E*A-K!t(8--Z9J,@J[X.J\N]Bq8K,*W(t(QLfkC>2t!d6YEq.+!Ik;#<N-%17Xld?F2e2`:%kb8!mOm4fE>)hJ<siH-Q6@^KdVgDKh0!hg9LLA-?kE?iMd[>S;YR@aQfoNTIoO25migX3GDFNThk7[cEOQ-ofpS%%3ug[`\e9_=pVu$VT4;aMC8!jp!!g+#8\]A'$I;Z8LL0[>hU>DZ6XA#VH[Yo^uD)?`9LB:_oi#H3tk^ed5-k5Z)eX94WL04A6\c-%8T3SZ[q_*baY_C%@**TQ4$`F<[FOJhU7mR)&Hq<'KL"!q+b2-NaL_RRc&9HGLHok,mKi7dn\cl*e`\m3]$P`;g96:HKfa>Mf7^,:%[oKL/\'jL6,3\X4EaF62\(I3[l\M[CCrGHB$pRTe/AmFuZWP5el<9-TbeE0ugmoCR#j<KkZ.%YM4KdV<*n4;&C%SqKe,m$90Y()0%X63\/c,dc3-(`P9,2fi^=4f&uN@+lLO&lacjK^C0Omgn1EU^.m(4JJN#hH]!C7"?'XUO+8Np[?fM_O=IW+]F8d(?>Dk?GQ&X4IOb%\7G$+h02!tVcB:kg7C/#>Ap79hXTGV1@GOhQ7OE,-g/SRR!<$e$#Ic$9@.!tMu+jnQ",m&jKda+.Rp;lG.1Xj!"jaH(j-n$DHcO&%Yt/k<MI/B@QG^7H4%6B3[3s#NZ<ZSQq^_QtXOh7Tp\4#mYE$+pJ=euK-]@H+I:nrgg$X@@]9tqN6HQ_*^VAP>Su3]?CYb-*q-k;&%UKXsD]R?)ImGu1_meLj#<Xd5X<`To+dN1/rhT.t4mIs)V*_P9JHJKMO'oR0Lh-QDK^JW.jX2X2$X]Cqg\"p24$8L#4(W'lan@/'+%;5E'#F^-s[j)&lLEW!;0D%/IFSc\:Sm5Lb)0+,U$41Hq?!ANHL$aa,O"SR\e&6]l%.G30s5Y:#nq2A+aP$Mut;ths/1<t:OTL6:T%]^nuDj?U5u$-L.ioFk!dX,#_Nb2=@Aqk8]Tn+q8T0!rh]%.'Rq-,m&mX8YuXgNEW*]f&,cd09dd?N7(_$qBgEl=YIYY?m^C>GTj:%FPkhXI0UPJ>/B]>2^hCJ.O-?9'"s60]ZWI_(o@,s:@,8\AE\8#dpQ0/;B;OB5]r%6%b3;V\u>=pT5]>@[Fu''DCF*OG3fBV0eV1Z%I\>BV4[^HUR_.quQ,FV.$-OfE@"W7fGF5XheHs!6r+Wp?n^.<=G.cNU@cG4HTXXfX5+D-&]KrDQ5"u7P[Kd`c,?WonL4$W4X]rt8%kc%_PAH.Ni/qdG*XH2^c[b&cJP"0)0Df;a3jZpt1RW!Z`;&Fe_HJj6.g*=dh7^]Mu&^:P[k0k?*oG6]<^h@s#Oo0>cgYMm<J^:!0%m4MMFeHgiQDUo+<^;>0,iFU]th.cW$9M8?J/)LU5L9VA/[m16n@'rK/<K*Z(c0/f>3os]43dV^\>.rP_BLQpHe*1K7k0YkKJ3olF%G>'`afRMlq',M?MOE#\+?`Ljc%9?-9rgbT_dB)2a:b_*UhER=eD[N1)%6,`g2'_@_).$F4O(9cRW&#;[($%05V("]!7BYm`^UeWq%bu\2F+uQ[S&u'SITcm[%?GB'iG<3.iWhC93g*mg?1F`b7ZRMu;`cqdo9"jOoGn)-VP\5H(OC8^_l*[#*3qdprC=K8i`uH6rk#pXg%3630$h=9pTl:^Q&7+_mA&Kfq/\MfELMNFCgmQK;aRQt0R$gsenQ>sJ2,3_'(&461Xi1L@V,Xo::E[IrP83ns7:>cBY##KrcY=8ak%&Zr6E+lJg#faRJmEB,jXOh1IH5>/5W1?#>`,1nCX)BOQM+M@%me4&4e[oWf(FoCBBYPeeW5([n!SfSr/4:OhRE5/uZ<2=VXQmu;#%0ju4<08kYqXYsO,9K$(!SIUSon)tSo%"G_cZdYju;%=:U<<pu#cDuHF&!?j)+J.ZMh75Qp]KE%3SHAsV,IoN_%bS*U%cAN6#"8I'%\@ZP@V)el,?sVR7?d-L6X4Nl+><H.oh#-N>n4h<]:01EX_5[#85?LoE0D^CN]=n0N1OZ]</\Ofd)pVAnEW+,V9P)_Ep!e#"mOXJq%/T,s<V(tPbG&$9JJKDM;B2a`'/*En._jaP==ZTNXh"pD#Y$Om=1T+DPkoCu-8mg<7n]QYjYZ/fU1VW>/Q<u+Yo3.Dor2I'p>V@GP%h<r;ZCOW7([(!G]pGT+D[HhY*IA^A9]+9*`l)o&R;-D5K^W?k/ZUJY,B811?iYZB7\#Z?kY+Bf8bLWta>("Mb6`VbgPuC?%2*I4=%Ho4ijI\?d:bD8mAQHl:rG(/T'9H$[\nrdl;dSR5:HXm"T,A\s=HUm-9IIWtca=*_hDSAe_&KnFW:qbJdl@JW?\?VTnj\3q]HId6`%Xo.%i]HY.7;l\+!Q:/*\]pnG"VK<)s]#[7?7dhtdBiE0s!d[S\X?77JICqC/][B4%;ltMKIW^8mIH`rpoIg:r/\W-9eRc_';UkS,%lWOd5l],STo3_K^Y"d17k%<<f^Il,Q0A2chf9rrM>UenRTj"E>D6=%AC.urUX7*KHV:t<h<4OEIqGitTpSKF2Q1T(VnBA)<de7e[%+L';)]`[XULqT/2LGrcT.a9)-*anKe[@5\DF6H&p4j^5[1E3^LPIW\LT5#2)Fq[r7#1mXY<sk^C[J/=%]R%OPT,F_Pj]T@"IH5c+%I9O?E$EVb$]q<X08eYo7[A[0S&FHSNpA?F(0qYhBc\!OY8pbUu\$BA;M);55s3/\%lJ$c)KjMHX.^jH[>No,K_jiaa<f[,.Pq%iU%'jN3OA8b\3l1A'CYS^>R<SCc*\alqG>KY:BkKR4,V,WLuqpS3-[&pg\o:A7SH).Q,O@m\,?PQY=GAGWX\L^+E$Nl[^eD#5D-IShr%Zf>og_>RXsTMf:Rr2NbgJgr?DLC90OVc$J%WHS#KAa<.dkfgNao@5iYYgWLH\LIb^HG;#%5A-ii/\Z)Xhl.^Rhdtqu/%qBeI0<Ss%rcq,D0<Z()U"+$R=8SOGs%3gOoOVTLD;DtTcJDN.V,u!t;ggdsqmQ0"]&)3qq,_mP;1<sTI=1[ho^V]lf2F-$Ki\*6<j,L).XeOs%a'Ni?^XAlASaU(C;LL'DhH`T33O#XAo_DrGT[MRfWSI:*o<$M'>+S?'4YE'uV(4d?;Da;OXn;L,51<,2eVn.fAF9r-$b0)GDI\.9%h9lDiARQkqPqENi1s^Z#''WPEn+d#b]AE4\_HqS4SQ=J%>kGB[KdQX)WO-Upn%'7m;R^k\Ob-33\5Lfl;(M#dZaLYHSk9f#GGYdH%l)),.m&F%b>j>um0=Xo&Au3$+Y&jk)J+^2QeOn],G4YAbPMa'<=9%Q8<XQ4^Q.)gi]i4=pb6=<jlIBOb@pS:[Qa9KT(&m"[o_)8`%^']2_$+AHhhc$QNOm4OC#/#rl@!8fBVGI6A:!ZbUP+NWJ]e@S+[.QG%P=PpB2c"Tu*Whs;b/2h)nC,_Kdi<l&iKu?j=(^pX!oH1D%Ci(Z<:LB1?=8e_"NZ$<d;fAj$!H21(ZTDrh4nA5nm`5%Z^0GKUrh3-LW>4mNf=gbkj-\0aX3r2u14>a#VdFMEi27*^Q$*(JJ7C7s%-Z^X(m6CQ5c;*<HY:HGglM$N`m/*ihnJ(URC@:>d*r'hQd5GkDT>%^>cOYUf2Og/kI96c&>0\5(ecVQ4.@X7V0ZW`5AL=_rn@$%U%Q.HgSRoe`R4\lkI:4&K&Bed6^*L/]&0A?k[^ZTjc0$J,eF4fsGk2"Unp_:8NJnJ1j?7:C71O!3ecC*mb<M&jpf1bGTJEL-1/aqB%%aRf@O!?YHp<DlJdZQad%,?8C&J2L)m6)%e$IFYY*e!o/BAT%HWREc"W>+?`oVH"JmHf)cp6*?V0RW=0aCC[n;2nu#LOh66\Hs^s[%S'EnB?Sb6^9pNQN=`u60Z-pTKjl81j;Ib%LZI?H&kC$Yg9Xf4sQ(f_kNuV9$<-^\hpT'O=(RQo6r7VLCf#11go,46"l_nbT<*Gc^%S`Z42VEaBZ_S!'u(qfApo6nq7h/9eRc.iM(MV,PDpf0qgEU5bHD,i_-#2eAgT[MT8i0I,<HCAX+GIJ=a%Y9msn*oRKkuoS&="3j^%E4#plJIKO68RSB&O'K3kZu358nMf2!aOi!!e\8poP&a@5hlXt?`q7SUq;tf/0EEKm:F^Qf?PH>++7b=V7#DN1QhbQDZj3T1b&8(H%(W;X2/ZP$1Mn-k"aqFa,kfhX2W2l!><J[UnS]k8-L`ZYL%=;aM&#NdQhS(Wd[8eeGbpr>["9LL(C&5)VfVTBk".E6*WBj6_muS`r%8/YHSL"p=SP]f79gn"ZYGo\uc92Ng?f\Dh,9h+^8$2QXicJ7jiisr?i4b:1Clm'g`/G*mfg=+MbquJ!e*C\DC^$A0d,#*o?rgcEN%HaolqD+_E&@cIbo@\tZ:^P.*]FFTUo#:3YkPF.NBKb+>W`Fp@mM!VltjLn%Wi3^tIKu!D5iHlHpJ)H1(lTsaL[RWY/R70u(FYS\G%?7>`N6m7I5m&S=T]K`i8D*RrOo0!\Xo>ic")farKa$*su;Rj(-7V%fhojkStU%:IBkGdh9>'8?O-pR'A70Xr`bS,2WmOVC&!PEb/%47!ELAuWF24t,l%Uj#XMDjT:T;H2EMUCtW<I%,<F)3ms8%+@%UoBP<hSC,\:g\\<BpK7JFV8YErWh3g7C$uQ<HPtFUeK2=gi!S<H%1cU-7X^PNkZ\Z8`;F!/mFl_i3geO(:#-\8GTo>*8)3ar60<R+aE?lD,K`$*HHVc_BR!?^-j)/:Eb-+kD7NIL;%Qj*Y;`DIb4ZP)I%?-5h0EDP=U<uV>H")5dNnpXu%ZL3AVe=A^X4X_7L\3AE;"[utBV[cQ*AZ.3ZD-sk4[U4B1NC8qgSo73nrafu_$4H*]`PF1+D$S@+%M0,E]nX&JnWu#F\"Bpc0>j:N\ABip(6RO4!rs&/a2K33ID8CNFVV'HuD;21j^!fl2Lb><E6\t#GmKJ\oHq((A+A%Mt&>FbN3iD:Q%oq+D-Z2"V5Mf>0CeUO]?K9#RGo#9V\i:b:e35Qf^aFNWi2(?Xf9d`>iNIgFSgkco/@hEn?E#a5m:5i\W7N6ng*S3a`ZTI*Tp,BWV%8=[YRZ&X$_E<XYioN:)71DSNHnK4%pc)HPZb/2EL9FOFZf_fB?_J64aG;eR]K=K_,UF)+($F`s?@rc4Wk=j'M3gn_:rheXLZr2]&%"DU5u`-:a'#mnu\M0*!o\8BFJ#U.d<:@tdbG_V+WZf]:<KWac,U;D=55MqPRC@WMA)98[<p0P'l3#d;#"c4mf7S(0,OKA]h]L.um%S=kV04CEE\SLX'Agr5#g&H6W&8^gQ9IV]2WfM>#U=TfTM<rfkM-ie2_>lHp%iS<orpLh%[;Xg5a4Am,/bQ$7L"i9LAm7X6"Ha)"d%bE'@(q!j;/T:C4T8GYR$M(rdRJG[>=@PQ&=L^+7hQ=Lf<gd>>;Z+k>I+hm+[ikA0V/%QE++[K!f2/XsRO,%9ARY@6&fM9E[T%e])%N0(Q$Z9_3S)lIC<oC'MuL;QQ33%V_I.I[5HVe+CA=%3BR0ZciqIZtE`,Y7L_^oTR`guj"p(5?`jD"3q4+rM%/lgq%VjNm_XQG=Lc%#'U2Mi/0A$:$JceZ@>P)VNDk:#pr-2dehga%N6uTGdh^^%]>%WK.LmX1_HaWQf_P[6ps_$AA%8U-c2"7Q3hA2+rsT4m122!6c_9S%jNbJ`jr:9c.JK&C)!_Q0!1T<hI<YqRg'(1goBZq8O(?EXhDc0SW$KEiARViY:>EM`X[97Na5\+]g_CDYff0R^k4/8VqW?SF"?G1P%LTPQLCf9e(5W(OnL=OC"BOWMjGU1hQ4.Z%Ki1q/ji\;5:7^Chj,NA52JUU^W"WN&+N0Oa1"o8$_c[:;bh!9TDejZ[*$:lOHRWmMU%7D-SsE9,AGd?npW,2Tmlr,gub<rt-'46.;e+=mKA(Ea2$^s%=?mSJnoqoT=\[,0DD,%Bu#X3hJg[XKFs-/+g"\K",7Gp;_`fu,`$%-.ch*>=oHnNiUPoa$/dt$"u0NqsMh`W-H0:=s?/%n^h)%SriW<V8BmONg'&T3URCKGgL[U=]c@NQ4Ekq'Y;\Mm6X2^cTl:d@."3N%OnW+s,'YXb"I9p-j8LB@&WQDBE6T5(aW_TQ5?t&)[d"`9[o:+YY;)TfS#[-LBm7<W^Nm7FNM7*eMp&=@,DsCt$/G[A_%O+R"lgJB%WCNXoAc=<(Kf@L,pEBtQAGPU7$_%T&q\HlO+bD;$O.8W9fs!M[k.=&i.$*iZH8>1W604[G"(a%/Cj6uP[8*O87-*<>Gl)qThk=@L%UrT):!DiJq(iL2-G[fD$@C$fj1U_]B=T%;Ja57tV2LP9+)hnH9+c0HXcA'Yt/&_K-AeQ<Z9AjWr1*:QZ(>jl*hg2q.mC=1a,pFiA%C]SMah=utH[uVMYFPdL<l&pK%*8NQY7X(Z^VAtLO`1rkre<=%M;'*);/\nMTr4L1kPDJEn0.&0G7/.9FpTt(8e;Dr@JVg@n%46?K%-VZ&Fe:*&ENlKb_k,'YR'`^A1+bgfiJMOdl[X]oTod7u<%A6=heX=tdK*_g'0l+dd-O6a_\GPhWNhoNJ"o?<LTpot+&eU$I`NpmT%jMk7VE;=miTc^^j4UYohj*\Do7r#SWqFhAr=jF'DO?$C&RmZ@\Vf)b[4saS<3HX3tFG]X#Ep*]WF_/o3D)m%T?$HPoA.)-VLQ7>$%TF<mH=cAn=(S3o_ZN\CpU%>D9ae87K(*"WU/j+cHS_Z#<%UF;`*RB-Q08D/BK+@P+,]`+].a#FHg4-eVp`-l]WD)*-N$BT6R6W-@%Ppd/Ho\"ifJ=r4tbq:WC6:_I<5F%n=@B>Ee8hY;8;fIQ7]96:eg:rbt$F5-L973mTHPK$2P:+:*\@nGP.1r,*\%:K1=J("Rl`]p=%WF0t1&(9tHe?:2D:O`2F]`(Pt3ETQ.WdVb\b@%WF4)u(SoOsD.Ss>F8Qqg51MHkiI'pphu:dh5*@2Xt=fWo^.p!?Q#m"mCgj),&-%h[0u52"jCb@t]ib_f#_KaVDKpSfTuHc"AEbBZY/0C]t-h8R1P>'<6*DdrHTirt(+qh?kI:+c.&M;)p<t/#H+kEUP)rOU'KS?Bq-2%3KL)%X-MZ"?N9G@<IHf&ZA@L:8Z(%;6Z:OaGi0#)IZSK/Qkcom*@#OC_M2krhY=B;ShLIsqf5$f0]XLm+L<RJ&'U4@(2.fLON7)7%2'WQma7gLDs"`sK=p:h$9nhqbO)Z.nMkn\`+Hj0d*330J9bDa1LY,$lgNH(@IE]O[rR^-CbWsp'#\6dr7N%iI)\6(NMG+jmmT!+L%(?K5JD^5js:4Qj5Bqdt8/F"X:#`a29B*pT,bO2K-4+Z'@EG\jERfH=CR"O4=NXsI%F&&Hc5k-]H6,SWO,f@Z\hq/_<NUKQbg&'EA%#Bp'k\oF7R5SR)\@/tjK_gLg(+-%Q=oFQk"hOK_l*dX.3H9=K'+&^nR"rW$fl0#neq3Ae_Le<[">EeT^q,)bga13]=&@.RN"eR5k%k/jkXonRNCK/7p<Hk2G%M"IJ3oJi2gER#QtbA$;8"6]9Lm'0i0bCi@_T3]d!pTqp"nL8'pa(&cnlq`A[Z.rkXJ3/H[DKS(9Hq7.E%O<j04%a.*V.O#Op@AchU:Q]q+@77XN1>0L"bkGFO6mb1=![9CH,=Z5!)FiSUR7p"<SQX([`ee!>LrepW@L!K30gC5R_<mHTZ-Q?8%I3'Dk8]41f)`o5GX4?p)2@7BV,j,Ts]SC?IJL!DQOGgZGK[%T04OhW6^>q2<pS7:U_i/0s,RS\cEcHD!@Hd(TKll*3<FU8+BTe4;%3pMB?6=scX[$CHlRtf0n@I0$tTo_GR**qP58jqjmNI>\HB-2<Q%'aY-W1-]D]CfY#*X'KAP<(1>8c,2Id)b9/mmau(@3*m\A:R-&%5)bj>2uIrLUZB;rXsHe!*tE$'2]4J6+"h/s`L-I?:7d.i,AuT/Oaqhh+Z!"db_Pf9(7]J1>dUr06p@,Noo5QC&L/AMp,OC.jhpod%bFeXJV"<R#-a^58Ts9r,BHGq'RIr8I`EaJCX49KZ90bE'Sk-$[YM-8T6q1a8WIEVD>d4Vl",_^M,Y#pGa*<oi24KMqm0k.`imDut%P0!lS)$9d!U!=hcHOQ)'JcfK"mW\rZCV_e4M*2X%&M]("<M0Ta5(P1=QYFAq>+^Tp+Igm3jP(.cK]?4q_!O,<@Y?UFSB,E[,[7Je%Oba`bp`M-(_^G02*C[]W@<cMi$apn$,k+Vl^HG'gqk$#2`"=enV83uaUn5+:C7fmYG^HD4rYM&T@<ubRUP6T@;QEaB^1jAfA>E8(%?@;n[_e#WM:F7=ZiF`c@WISOm)6&]N2MmAl^b^F/.U_dYU]qhA*M'rf4lB\Z2CsBeN8/%+*eqj%_sf!8XqcGqm5V(aI^@\f;rIfT%AYQ/Cr#GJkNr,cSE;giHF=LNh^N.Ot\3t/-`^tk'fF]iI.U9Jl.-+FdL+TP:G9VF^ZU)I?1,=5`SZc8Y=g:PoA$">`Z</Js"mlV<%S^NIYN>8$!3T`A33-[#(H>rt`Yf/V0D47V/###Q2]s&fQplbe?:$Zu\XRBTlTSa>S:NC+'P5cR9g'@D)b`1Z/mH.FA\MRUh/Q_;,%Xf'=\`^tG+f:OQo/iLsYI%>QIY2%jUmhcjf`Bs:#==iP,i=^b6%\&F*9lCH+`gki;=<Vs&CT73hS(k$nPnS@0d@KX4qK@67L7a/l%p!8?a>,iU-luj&*@Fq!Ke8jOKnKb_P'S8.-i)8rW:o,h=)0XcX[SWst5-pNnSl;UIfaY*QG&B/O'>V\;I.LdgDK7Y>d`&WEn":(N%@s\!lpjEFlYe.RZb<,S2bHPbh>kh=Amc-C-J(B3,m-8#iKVpcFQ'RL![fp-_bM\eS])!CGl03^HU#AVEa5<hcYP@b(J'$5C(q#-O%n8_>5c$)8n-0`p)@/-+`CuA?CS)3Bdln#Or@CL*tA,d?L"5Dm4B%u9k2A3:dBOW"A/jrFNm]lTp-Rq#Gmc3(IpKS/UPFS9<9BOAg%hB_8C+d.!/LdTeSngSO9jDb!)8hk3'E>b.;pV)W3M4>Y;/=J11AlLdH]PI^eR)'R7&f#E<5T!)0]O)S#1M$h`T#gF=j(5hDE=EN;%lmcU49I?7SO$`;M_YDf+I^sP&GG^=i:$3>^@Wufe/t:->QS-k2P=&p1"g;!&17Kme>>@)GDQKdZlte^IkJKfQa3:E%)$r-dc9:kK%O\P#*9BW3]`lk7No:$C,c_g<WV/t3o-^IIs%7=2L*SYEm\SO=A>WNp]R8c)8?gm!QogH.Nr)Z<7SPA9;;F7$h1>-burTAO5nQ=Id%I^sRZQI727FFL/$6R%H6VMi"%4(^CA(DTL=Uc9--'+W-h(tj$$3AsVjSR3ui=accM2P"2-Sc;E0j(-X7+W/E@))n$[@#M?p&sP1-%H8_=dm@<Ye82bWLSR4!T`4_liACLAI:rjO1,A,D]c"4G-nbgNpG/R(h$!qm!24Mmp6/FEbLWZK8P8*!VL1I*k*C-53f0?leO)BjE%P'3V'WJm1%KfJeYqhZ6X,5\/'X7NeQ-@K6,m!BBin#MA9ZdrKRF74`%Pu"6*\7%+:U/&d0DXIX]@7aodJ"3S)ihgo0?9oO#.3-1%%8.34Sb#o!I_-8@C,72@_Gl6#dA\(%!9mNr*$'hPIG/lE-&+2Z>'*]E<R_)su]Jm*J_8#`W*#j/f@d#[nZ""S[?$#1fQ`uD9@](XY%?#qs[ro?q[\au=(i.'/1E+(\tC[Rp8RL%QC0[qt(Cp"2[kg$eb'Re53giMF8qdW.YeBLWHm@IZShLN*X,I8d1e*-5dO0]@h8ht/:%H=lM3]"jkl6gV5#M0,L='m[)Edpm%+me^k[(d9GZm\X3V^Pa#?Y"`FmGGHGN`(GW<QVW9GCjOBr;$;ZOL2XGY[GJ6<o'Q*W7SFAO%fF:$_DCC/hem@E>]:feA3'4^hpQoC72j)>)@IKS*AB]sEm$q7<Khcp0g+k"Hi([0<h30gTM^I+?M%`Ub4nii__"T1G[jH5I+JA;1%msO[Vj(+Z&C?$]upIu<P481@:Z;PciI7snf\]QH3HM!;W2u;2-hX%-HA>XUt4n^m;+a,=;6?Wp3'f!W9L?R#VN()a))uL]QID!eE%\;:XQG74MDEGs)*/<`%>J6XH<B#O;sl-Xb2_f1u9km$TJ$r(:M3g!j5p:bkj?;5#KH>^534hl$))t%Ak_8C492r'NQMr6\bL)G`^%2r"k1q)DhIOj?aIit'%Y)t(_U.;oK!3qT;^i*eV+%<pn,TAYpM,ER2W-N\1qMqW:e1U6X7I!\ds4neA$NgV\bq_k^tg4pd=/H@$P%^)$U3o^L)F_[5D#,:qO<pKV,h&O'/</tT?'-`/I#2V3nXhbL>t$eqF9I"(t8r6iA7>ab=u-N!/qM_to]L.YqGNP`4^_O^ggak00Y%c4,LYo>0%2%COsoW4^NJ!KP,^g)Q3n)3r$X9/jmp0oh9Pj]C<W9k+N'@X@GHcEk$HiGr1AL/29q\^eNnU!I_83)s]a__C:<^1)9`%I<LR7E:;QBEa3Mb=)8k'/:NWFmI3VE"eTjY4.5CUfhH`*b&K"FF+F]YM=^eRTH)R7D&@g:0gO1F)+6a>"Km*I&Kp:l!u'DJ`rp#N%6,q[)qF0XA/f&JSf;7a.hK`gVnbck0rN^+0DqcWb\*rIQ;H)^9VFkCY_1>mSA*gfX%I\!%9WZa/&(d;b\igWm<UP4d<f6X\SpWL@%0.AjiYP\4&+pV-u<MY>AbWfT``]VF,MVbBq@I#'riGbgF;1gCTT"_i/</NOt]8(7t2>[u-%pLA+2=3dBcA1`1RBp1-YI3Z;Em2aG%hDYO7dk[UUc;hQGIs?aK_r1L$PCQ8bl*PV5H3q`LHOd#sHcC#a([je:VpfhjQ!-8Pe4OYUB:_`;^'dG[pTK0!/XJ+@mTuH8Vb>;o%RY(@IYb(HN,9.XRW>;<I(o<RQQ$eO2Lgqt&I[NuqW7AAGGLqGQ>iRV_(.6k)iFK0[)^c4roo+5TW"aI1A;ja:f#(FU"sP<Vfg!F;%0+GJ".[[$+n%L^=jHd<T9tfN[P5Euf!s.5&>H<.XUgRMi\J$`M:Zi</d,J]7`Rn?/2_-IhO(KAW@]73kYD>?T;-A)tGA/eX,(unG%I9OOPKX3XNgI(AW$7!YW8j't8Bnu''U=Atn1uV;5jbJg!\%4&M*Fku'/&Jt=A&0iCY:NL3%t43$m;g-G(dIaR5f68<]_kakG5fSQ%Z(VYd$]^:5-a@4\<5t'^cngJeAScO!*($-N_3e*5(-bAC`H7!tC`;grYgPW"-?9N:AV**d[5*+`3%3&_$$RP9ekgpJC1T*E5O?KZ%m[/n*1N;WrQdq)0]ejmVfhL*JB@1?[\5E@&lo*bXp"QHDgQ'KrO.47%Vg,XXS9#0lZeN>l7ZCi9]8-gNX</Z!:lLDYNdf5H.$`8p%VMJ<!7SX,G^@[;U&oO*D6Pb-SE?ngP,8H:LhJ>;h,6udMa$LQ,b;0RI,$$=Oj&j7Bj\Uq!clN6K2NTO2kfaNZURj0SN0"2[2[@\e%.Yl:N*2LD8#LI%A&"Nk@ZLStgSfB6g0Q%A.j:1HA.#,<1cZ_<Iln#r^3Iq+loZ#,WN6>#3\MAUL@,)a;(d;t2(1>o;^kgOMn1;@,%6Hro=]U/2O4c6D\K7DfW^.:hUaP)Mq.::Rr'U-(lO(ap:J+uo*c[ACbd%u*jpENK/;SHS6E2-d_k<2K*T=L3422hECQh'rU8oaZ;%K\4S;Rcq)OL:c&U\?hku^"6%Z;1l@SNI3XKk?bpmc&30:c`us3$Z4Vqq"p<L-?D(EXF'mic\@n0]meqLq@/Qo3CYWS:JTn?p\O\'%m/0mKcRi`BfJMr=X5>=n>f6#2%*moPmU!Zt>Q)RU^QRI>2dY8pm_+).=a.BA$/Fh_^0a+]%b9cirSls@Nd%\!CHN#9bkOg$#l"2c%`'(kl0$G@Uk$GglSd`b6Ro$[X^""c*S3PT<Ic7V=gg/9(p\MkDO)OBTpV:#37_4Y!kUFjX5/)#++NM?AGNaq7&GQ#iCWf<)lPH.a%66bpZhs2)mWBe,<8/gMp^B%BHDY4D)(La-el<_6p>Q+IUL5*Ip0AIP+b"A-sH7,76-^OMbJ#hJR@mAmX^Ml!EpHH;'me-1fZ4tjd%_r'brN[<[K^=`2VL#;/3ZGnh.hEsHm<^3\+-?-.qpoT"%oJ"0:pg1]YZdL1dAM)d((KZYdh<R"k2'2Ku^GtuXNIS-=poT"_h8_J>%nF>AU2sS)*DCjXSrqnQNL;2?d0:4ZIM)qp0oa>uBn[[3a\CWD3<keq/21@<.kcK<Nc,F2KlSm=m9dAQ]k=J29XCmNA+5\d"XO-k>%`_V>e\,))rkDJ*](D+lh)f"S3Q*KfNMfX(<q"OW=a0j]HEfGOOT3qF3pU,B\Z'"JI$[:@IcJe<^oa>uu]q]VtHi<k%(3:ka&GQ%?%oIItpf.Y_C_6NJ%)__\+\,&+mN-VV!e$6Wrq?a(EO*.X5GX?3jb1Vc"Y@%'^NPMg(me(YMjUFtFCr:Mcoa>,3Lc?D'p:Yq6\,)5.%HcEhPO-/Lq&51TmLHd:8k;,-R"\oOQL\ERL+f645T*$Gj@T`+<-JNc0GYb&0ihAr7#Z#[RCLb%&kZhl.dAl?bZe.pZbo%bfNpDGK%a[[sjoUsh'._X.BRTB,[Mt]^t;XW\j,XiiJ.Q):WZ(%$@>H-E4I7I5JT6h<kZ0%g0HFY`Er106+r"PrtO/)XFcYpWj4]H2HqY%3P%A$,`rB+L&QcLda4gNulFC2_[3jX.U3mABN.D=+0=p3!oK4$PR)5;2:lqTm]>rI*fhT@$8\VCp0f'Bu]ck1WPA^,b*IGrC0#h5uu_%Pe''4S=<C=[uL%WrU+RcpN-1;CHp<ME7a*ncAg#*o;bi6nS'MMI/I5$Y,QJH;PgU)O=K^;Hd]>WHe.Suf^mpjFcFC6Du.S#mHLhK%-Vc/L`Su2]q)YPtfMa?gm8'n>HYC<.F8!!@WimqbFS5([g!7@'G!JcnGFX,5q]pYujRbcflX8&"=dU5.\c(3!=.Mp:[e+XT3`eP6%^:Lr/Qt^\aW*a-OmGiE%=\I9fQZS97LSfNe3nb24=$(6WSA\C@EcI5-B'M5V4));9p5We\TVe7oH"<2[PK@&Ygi&&!RNEn8N-+U!%FB>I!i9N1WO5";+`_j!![?^']m;:s2[FL-trH2#PhGTsWgKGQNc)[=h6or(mUg=Y)Wum(^>bF)107K=Nb]s#l[<dr"i`>0UgBYFi%rq5sU@eo;$#JQnoSi!d8[(A_rq@3D3M`iF:f:Ri3#g[q],Nn^c*;_)/j4H*GM:k3[blsX3M\OHS#Q7n7_EZF!G2G_QMcoaW-!)NG%LDE4g,;#4Id_D(CS_[RsC$tRQO_0:7B>d;`^Zmp`'H\;G^,Z^i`<T1Nh0G(q+*<A^67oM4BY3a9q#s7r,4'@LPncJd&g)L72<R7@%hesq3b\Tj)--XFlb7tc<qaWD]&TZWm$EsW;W7n_=NG;4SE_'4Rl#DP8n76a2ao:`1<C\DA=^2)JKL\8Q,iu<*.\i%Cr4GnJ.@LY0%jopoLW*@BfA2CUaDKg(BTN[6D.]r@:3/_QL$^PP0et4_d`D<7L>\I<iQJcUrSBQFl98Q+P4d3ItY=<3OEl4Xm\B/CqmA7bK)OKb?%`Veial:^Zrh!a;WnuZ\p%;_k[^[P3JcJ7k=RCAXil^&!EM`A#+3sEh0R.jquQCMqk77*OC7^+[("<\8=+lB:u=3L@X@fQ6*q,Y"(%G@8"m<??YAG4@M6`r>BN"<TZ==iTJ4CAGG/`p;-_N-`j>_iGAsr&jdUSLL_j0);Ls%Q1GgK$-m^i'V!Aj\C$Rnu?S6<a\/KMZkkJ%gb"k5e[=(qO4N)tAZ`'4)+`K;^,`$=/GYZU/Is67CSFf%mrL`;aB]jr3K'YOH]&"Vd,"^u0asIUMe,QmVoH7DhJ&;4e%L[A[ETXB%^OIJ&HcuZ&I5(!7QB!^>6<gTT*k1=Uf7h,U6DiFiUBumM6<VH;ph<CiFi/92kd%qF:nItAIB'ep^)"fr/)37\_=ogPbr)@nAkDGa%o@[IGmH_g4)A6qV\@Gnb;-!hH1,uf^EH)A8Xt1bsnRhq<i0)Qi&*T!'$"-nPbJAq&/FG3;q^DpCKq4`H_(=P5P'6?GQ(ep)RUm$'%k@)^&O1ZaG?6#es[+p!)93s*F4-\fc/Z^A9RlWpZC1B1Ml*(!"m<pt%ae_1tdb\/36A:G27r"YekE%F1]tV;9GI32'(](cEc%'3?%d5%\M]<_S$k7RPEYBCQCilbE;:)2OWR=H65Hg94"%Mm%I53bAKJjUQ`)JHt'c,E<487dhLm*t$!FpgJ@W?nB]7"/b!N`K%N=&6H-%jkSWoC@QC\(7q+qQLjAGI+2%eLGq;o9XhWu>"ZKPJQQ/s+f>5HdUVU$0_*T_!m2%=+3.VkKtTr[jm#M7CTI,lHeH!!41iaEXT"V@%mG8e/q=EM>.5Y]f=\%+o\B1'69XgA$WsPTU(mPjUQ.[din)e8`^!jZs4>6(qkDqjY%e:D^D5QrSg,m3<="j5+=-@=_<XCaoIQ*6\%#Gq'9]]jT[imrK\HCsRuYGfFg.r+k6Z_t?I7Lj-OX,A['CL3&4U^39=kK'%qoN6md(6#Y46D9X3Yp?;MC))b)[N6+H8kIWAL0umA%q8",PB%AWFDWU82@;GPpo=:)KHg)='f3>F5R*Jj;k.@UU+3X[U);DZK?76=PY/m:ha?G7Z2YXrM5oGr#iTbSA92D`2S8GBml]&d5%r;:8SkG08>rT&%qddD=S="-#g!qiFt;?JB)ZT]7lF'3?-s#jCYLN4>Jra:1nY+-+PB&e(nj`.thC,hC;@@HV!G^Mfp\!b0QHCT_.%Y&;I@F*%"eGq_$CFG7W^kec-I>&*<"Er]tI!*nZ7oO,3;b4@a'PhABlG+l.)>.0`h''WAmd6u-bFnu)V92L!LLmi=/oKs+3cVR-F%+)A*AULp[oW;!Lhf68akrJOYN`AmjU4kN9U0L6-h>IUkYHU8Yk\%*VpE*L!J94B1T+2.=)^5Htmfr*(cR9e(!PJB[0D/mT7P-K#W%H46X1/>]%Qn_rYMD"CHZBGk@s)lL66dG?r,A$^KKjrt0KMjd;c$?IHC*8'D)=j2)#N@A@Nh@I*IL=%NiRH&iSm`a(D&c?+COHgO@%]%nFhQTEPqrpB?V;VGC*p[UuEPr[pgocK=Vp2[P5IaM:MG9:1Qp#bSh9^0$4EkI\'p1F^c8'6+rT%5hMp<6[App`8rZhjR(Z'7cq%Z<HupRG2!!p;G#(@9tsA/63NV-eKkkfU8;uPntB`TD=DGlgANDmXCk\V`r@tS[3rh[5sX+hpnSfl"O<f+/IYP7Bd=;j;H.QY#`TF%H"I96&O-fQ",QclV[%$3T_TnVSEM!@1Wr7doNE\TZYS16:4DUqb$1on?YAnF(gO&pLkrF0''ZY1`u+Xmmo>0$GE4M#'C4n2c+S1C%=FS<Pp1.g@Te*%26/=G*or'GUYoghu:8E[>'8G,Bs.h$&W]*`;>Y.!9BBK)!b`34m]ANNQ$#loZ+$0[g84UuUplNfb2UL%$]TX7e%JacMB*ehM`O2.sSr%M1n:C_4uGo0cLA$(8.MWlA`F)>d)^P6?^m/o38S0)S/qO@BX*W7aOVOOW-oM_ckbdL.pV<OElr?Lo,Hj'Le%nPQgV\uQlp)g?`KYNA7,R-kZHKs/&<6RcfrotmV-cc#[p4242.Ch+W(,cc]60%)GE),Dqu+>7I"_&/ut'C"W0ZIKA?$k-A=lMaKA%TsVMHre7_:qL]`IkEf:64cTi&=%7q7?\]Hf7!aGnYeZ^,SK,Dj7iGWhoMEG@`9%9fYq]e5YIPf3ju9rmcsoEOY7V"@LlD-=Y7V!U%ffsX1mN6Lg5K,9.Q-L'LkoHT9n)h)WMbU=:>'d@=_9][Adc[5mLu9;i]#cE)pPr1?QZifQ<6A#IeWO+mZYt-YDj$eYa/VM`l\)&#%I`>)+4m=rFW"G2K`KfpP5F)CRY8l(k*RRBK8=[Q#iMcK<@tBh`@_dI2.24dAooUu]Oi.0m4[!h5Cab,F:HZ^aTA4HrJG0uM9)O;r%=<I;%^b7m+L=H.HB^r?.Vd$^ae8DK`;R*-Kbs5XTcVl"a@&(d<gjHAh]$J<cAGDb3`O1G?9e9C+Q)r[]_.T%rlM]_?q,e0ZD)@`7%krHD3:]J/C^R.0>I4d$lgZ[!2`obsk6iQ*9cVmLj$%K!<VpMp',nc7PJtVY0NU5iKns6IAIl/#lq.B:qN7!X"+Zt[J?>BG$mA-c]%AGt">^X:s]l?M+OGX'D:g$qC^j<*`5h!Hf1r1b9n],g=Fq+!N<Xn)Cr*KRg\Uc#kp3hDE2J$S*S\&08MJ$e6U[mL:I@NA5Rqu5`P%BE&\'"&F):3ICL/caIdELX:X399eLtptD(Ji81<6&"_A9h3l?-:?+?PEW*OT@tsO.XB64/8_<[>q+Re&04$O+(,HAir\8j4)2acf%(WGk/acBh^cJC!s645Iu[=8#?Gc-n24+4(%H7O`&BD$GeMaH75k:"U^$CZd(G_.lhOWD3%k;aj[>qdGh?s_]=qN*rPd&<belH]Nc%ISDE2`a?FdZo6hb6(@E37a<;D$X;3j<@epL!T&0IdcS%9,hs7M9Cm8hY(!"RDYddOHF8$D"GBOdK3S(]8+XB#DGok,R;Aei(2iSp%;>E6P3ck!;=/WEBf\,`E9%c,_fP_*H9bCE@^&(qjY4/hop,&\%o,Z^uV6h*R[T%eal*]"K@tL$,9E8hAKG/_&'fgpNV;Ac#Jd9R&%<6ORqrNX6CcS\WoJP=uQ:q'3_k:$e=S&[,sXRr%=:per@fHlYRJ:l^)<;$]fI>7tfO4gKsQQA.0j2HGm'0?AW#dJ[Q7@BhHb+]lg%*?PL-_&Uk+KPKW/<4J.X0fBA)((lE@#d@YbU**MD%>2NU!+50Q*Y5&Rif4:8K@jKMSd&UTBhfAaOd\R2U%TATQt*Ci!Epj4+q6s3%c`&_o=)K"O$C=B'Yt,T#U0In]ma/4%O4TL7\Jtp0.$^QAR!DO]720_f@NJ/gj&duBOTmHG/sX9/\[h:]K&.k'(=HM'Jm=<[f^i>t%;-QLW_5/o?%r>d<Ys3cUO\9DdFT1R\)V9"rbAcF(.Mi8Df%W\j\X5,fd],tLbm-!>MBY=*ilZO9Pd/V*HmZ#Yj"`NK6BJI7RN]i+%Ls63g0jbiTN-VCY0dEUY8e7ha#,V(T7^1guI):g^QP0a3.c\t8SWO^tke;!S7&a]0iA2^6oYps)Oi%p#7r8Pgo"q=]13U4nJ*K&Z%RQ20912hE"jRUNNR<k.]B9oiEdUmc4k8ej4j'r0QQSckr&s;*X-P7e_J&7m2oCUe03b1/:^qC&a`qR"cn9B-ml-GW?YR5T?l-BHk%U3OFXl*IIg?-,[[Gnfkh2TuSZJE_jQ.!`26-p/+ta#8gur.17*[]u=^&(I#tO$%dIaYk>_bO+s+%Ma8u?!J!`#W6PhAjMq'OEu/e%)/V(Qs8:l@,<-6H;;Ttg"8Cc=Uk'^c*%*q`IOmh8iH0qODf7Go$LP[+_`#VTH<X\\kNas[,:W3<jt:c.WD)2/]u4UCrmA,fS<aHt%_3/[@O)J0R5.D00=I%+meuBAt3%Hhl*t.n.\+bO'rbh"kkJNE*mRdK>B*&g4bYD_DLae=DkO`0<Tr+LW:M/nHO*B/Frqpu;;80*%%5k`ocN+C/S\l9`#T=.k]l''8Cpd,W4=kY^'*8YHTJP,16#bKamNo_Km,M]J`)>GO?kE+oZ36A31hc/d.7So=N^CBi,NadBbWrW%c%E\+?]:3+&T8\f:LM3C/MVi&$'b"Lu7L(8sA5J!&GBo'qec1?%&aj*"cX\)YNMo'Y5Q[*o,/SPdr+Dp)XW,:aZ=^J'gRlL\]5,++m%CN-U%A`oO,Q95#k!2fQgF'<k"\h,8WV*un5WK[ps/DdEuYLX(jBT2Fkn!bXe<h;*80ib.FYT^?oMBMkM##Z5*!Rs7(i+YsMr<EHZ%]/WTVUd)^BXKF\UF,d2fQ2)N!B"""F<",#<*?&0a1_IEM@T#(@FOIl"%W:H+]D&5*#;:_g!T]Q!4F*.55mQg23Wq[qe9.RXE&Js[%Q,j1).Q"&,'mE-XKQ@nPA$O#eMieKPaZt%liZfoaG:]0ODYnJ266k[RGS+SNPOum+%2?r^QKi#%*m`6`b3`[FX!U[EOp#eb?Jr0a%Ir?T+b;,6HDOJW%fl+4R4mk3l)Qi'u@Ps:kn&k34X4FFqlh-24J,?)9g[B@"ePE=nF8>Fem]NCQl>Q&n4c(fpdpGclL-[.7)R'kc%k]#no+?H1fDJt$l9V8Fg9CL<rL3L*l7bq4fH'HC#>28mV,PaZ!T8cY!(6D6BriVbY7SkPA/0-2o/,GjP,Xc54N:4Bdjd/To]N1kt%354U"^Q%p<r)2]kDen7uD-/l8f@`dn::i!"+7>rQ?01dSZCYEQ_r8)W)5[7u&+Omh=";]N,`ZWdegkEJ.5b&0E[8s;_=h8$`"CZ?%JKAV7H)(g4dp7e$=oZ5snF&.<n.:96@juW-75-+;pui-TfR6Z6C"!GpM1Y0$@/*qsQQ2d'4ZUfM!uqY,5;VNdV+f0M+@cX+goJ!'%o.QK!/f)!+J/pp8PMl.b1ZjDA,,X$`-N-$HOpr]8gPIb]YuR;:7b?p&B$WNGX_hT6D9^Ta9"VM('Kah'7Wp<`75T4WcdPk+DQB4F%5_C1cYK,]l"r]dW^!*_`.WV^OP5KX1RmGs"ANG7Q4t.HEY(HN8[ApNN2%?=R?2JcQ9TEt?UVkI)RiHkNlX"&XSn+Ph?^81HK+2ul%6VS<@DKndQcf?('Qc#FP1D[]a=@Zk#I[bF^L.us[K,gZ*:W;PTA=Z?MW2T?\,^EVNRRc881Ab,4#>;_Wh#@9pN?71-d\HQ?.LVZ(%<V'sNlEKi"R'ssIXTD:#U8pE\Fohf:+N9XgS--[m/r7''fs[W?Y7!Qr>Ij`"C!kM>20Q?$B+lBAJCAejKCqsQE<1!G@$9ViVBeVb%</*>1i9Jg#%@,ns'KdTNBrDGYVN@Xhi=(u[bnPULV;E^nU;]35Ei.H%FreE,j]R%R/MCVt<&$W!/APP:f'i[*&Q():arU\D`L4uV%YgbXNhl>[V)2:m\D/=*rV8i4\B;r-p<N5K4-p(=T9$_bogt\F\*<_@IB,`0Xs(&`u]9Y.ar33c6cE?$IW8gNDE0:Dco+8gti/fL@%4nbII/E0@<55/?1VidWLK;N]bKBV#54Z."\i@A0;U@a7C\<&j3YfsT/)J>HKY./@p<k.A1YMU7bh[5^[/2K[:8dGJM$;@tuWiq?f%Gib2FTm0Xc@On"*)Nb2rCB@U'oGB8j@7FYAB(;cN0([>S]#-2qMG*'kY/o[5XE5f;@EZ?PH%CluL"8bY64m`Dq3IWb;(TY^!F&11%-l.RV&O$KqU+tZ[B['X#MNrXc16W`f)*&3:G[o-?c&cB?Pm;jfm4omsO2?TY.H<@q0ur:6m\PULeH=]fZS\h>=]u.tYcbq#Nj5r2%La%?R&HP([DCHO"2o>8U/9url6N\A+U!8[R)B1jGA78,F#U_sY`fe1M(t3kOoqo1lM]Ro?(3mrhQF_B/93/bA(WK]"!V'q?Qa,>o%R#K,j$-7uTb#k$uk2HY;+:X!6&L%kD$n7^3Cn"+#1WIs+3@.MAif<f()GS*ZlM^CniZ^\9h9].<$>!JEUFZ^-E\J6%1^"2OLB]pe%H`>)H.1qGFga(;m.5#0kXWu-4fZckqfiF/%k83\"H-u$8^7H]i!I#'t:Fg51q)Y[fW-<RZ[B)LZe<]Sa:2GdOZ1j+R7H2FgS!R(K%`61.Vc^CBBGKetI$]4?<**A#HdKfpFI*'^T?CdVVWm7]J^#6C*prH68+-$RU''_K0:j>f14,9p*MheAd?-:G9X8Bc6#[F:sZ2QBN%\br#[RGC[%@+Ga/@1T6*o4*j"o4*p3jK(KbM<DosG?,u0J?-"aF<luk]cH,5]((SECZX0G["J6tOVE*.a<8U&bDsP(6h3;M/5'%L%N?VajKj)9bQeutH0n?!H]=XE_.B\q)-V-dUE[>4s3/kDh``Rc.g=!Y;2%Z-oh!p<X-qd`c;9g8Y,jt$E:&!3S03>d*`hdjC2]li,%FFiuM4N6<0pH3Kh_So0ir78UWn\*OIi]?)E3fO%'/6tTTgEf,p3:TP;hjTl=rUtU<6r":AB<';MS+<6T!hCAPU-.=M!QM`&hH['C%2\4""^<6'9)9)Q;\T+G4:5ibuXOdA1%lE83<o0./lVp_Pnd&BbAN07,%er_E<bU%Un#d?%H-DCJ5-%q'F>X)n"ZlT_W]J=nO")`,%opthTF'QA&XH]/PDu$_tLUm!Ao%#\ae&.L7r)@=R@M1&e#+hFo54ZWe:^oNOPom+hJJ1ubcVI92-[:5Xi;'@Vm-gI;gA\iG'!%tf%?!2V/[qapn?m;.2ORmeu[fZg+k<f-Bd5n6*?10-$,l(e6s21aK-Y:7h._:XhkQ!bj:!DY'8NDts5_da/0&Q&_)K5RD]2e7tSQl3B%c/HM#DCN,Z,\<TFg"#.GU.0GuV9u%HX@YT#$D.u016;Fjr$V$(pqd!J?R^8Tr^g6s[4id$$&Oh!MZ/Tam%L&$P-U<0A1RHtoHedM%]RQ0/28F@#:h2)W8uA+XD)qE_:^o4]U#5Y.6/ik!68'_d,F#P,XC9;@X"]/HL^4F]!lcG66"*J0Hj>MS`-%f>3)/&Iq+UAA3cU!\%AuLk<l!fk'T3B+)Ka8?P>tk$61BD0PAOAcVgKDeP%%uE3Z\g?`G4H93P1:l77MH?HFc^kB.4O1aTE>5.oBma8V@U,?\.C+sU)5.d%9?X>mD'Uu5cJ"#HU1PelU.\R!%MK"r^S)QK6T7`k)[pm4@R2P!Fm)r$2@=6ri;;[?!,.O3e/au1AMli,:/_Q?OeQT"CO%p?c"a,M%J=mCb$Xtel;T-Xa#6Kk!4c$B-KC=:]&6'D;LgoVC+D?q$<HUb)(Bj^A(Bj^Amn<b?,7$VQNZ\biqr\)JP>HmJ99]NQ;6mJVgL=Z`%@U'<Gh?58E-mtbL*Q_afjT0bR6#7e:_;3eAP*HF^Bd2$MR[,C4)RV-E2$SgVE1!eD=iHOT(q/d:#M/O`2b56\^T<8K*2;!%T8&%`%/_%:Y,^s8r6Cjnq[7;OcPU$ETJXs2#bG'A@1em/;!s,:!<1(aBk\&?Lb<_kh=SP<"QC(q8g%l*&MN0[^.ag[F]S7ia/3Gq3R%./.%)sLu<OYqjV92!_7U1@!I<"VO?.Pbbs>683$XN26U>F("9Tft>.*CEM!,7k</j$;Nc#t3)P91`9^6rah_Pa)]q<?5hQ,tXCf'S;ut%/J?>P[!C^q#H#YLT&c8<oL1]`D<SH@.?$ea&q\5g9h6I=X&deP'X;Wd!q.iZn5>3>*"uhZ=<D%`6^,kqK^=9(/##liU&KcoV@FW?%B-j@(Br>DO675nOSu$RsK4pH&XGLAa<f=iqU15oF!5hhD5gsQO;'jZ`#\MbS(Ue/>;MM9O"G.tK2oIH\qAKU\)QeuB1(DJ>X$[Fe%P?E$q-7`k6BXSYs7M(2=B]CM:-jV_`*JcC2X32+s9;k&d<gf&GlF;H\8L"5[#.k>U>16F\+^H\aQ6DP\KAWt+kNah<!CTq%CFi%W%W'K&PSiIBM-.H3#0hHe,!_(Eh7)qNS8l=hGMQPRAo-IZuE=pmD;n>A1F$\.Y1$O$!->+&=&-=$nkni#\FeOpEad,WX+ljc5$3KNi%Mu\U/lU&2p`3NsB%N3]@9h!OCWF2kPogp85BIgqi>N$-f7q>iO`)6ji178Dk"3k_8lpG2l5`=I!+gI2@Cj*\BdT)dS8G=#@`^XA:%d7on?WA'-;WrunYp7QtPl/Y"'CJ?RK%>A1[UJ#euO@8F$4U5TI64B!Yka&hA4:RM+-rFXl9*Qh6$)cfeBHDjA#7!K;eI.^[/jPt\%N,GZp9[gGSE^4,6[YUHP->4Y]eg*U0&CVs;%5eDYCrsJuKOB[TP4rcm2/k!9O`^`Q0SO1H18t[k#eYrZIN=/+085?,KG.E7C\Y@g%S)c.HgdEA*8C/)L84BnY;EA9Z7)ja.9:>h]Xbd/n^F-gYJL+gmKLuAE%@P_L-n<WQ1'f_9:P6s/_\+d.5`d.!MRje86ioD<NK8HP%dkKRR/4H;Eco,FY-Q1SKUcqWHKU\E*<O?5gKU\j8:u.oqTH78!62M3Sgu$ru4`I8!V_lqJh[()'`AED!Vtpb$=<1$QU0,r69njRd%R'p5VThY^a9dk_J.-jhA.gGAOPAgrTj!sF,1k^Rk"%9J0b<a[j!(&UW(i#qBl/X_>_R9SF1m1W1e^18e_%]Oh&M%VCG;;'g%+GSO%hl.s**f2:d!\f:L+s*.=.HiPP1EnI*(o!H3nJE.+W82-g&s,NYd*a@20ng[eo]VkfP[SBj3QQb#UgARBP"j.G<DtFm+#YR"PReEO%h:*.=R7S8bZUNUUFfh_P2Am641:W$9&s?(Ca#"+W1g),g!&@Ggb$7qE81@9>9HjM;683+'et`Qq;6(6qaEt4)GtQ2OMD7M#kTD_s%6783F9Vqk*3q):46L'a[eY\Y,Wk0F/k%G5/662q"%3SLpBEfU[:SSb9;6*//$6',X0t,6%3@k;H&>7F.+gtrcNde=UUa@TM@Af,[%"$WQt#fFM(9RKC($sOK?JHhbYUi\I<"h$gp^lg*MO;bG?K<iHAZD)-!:.7#l&HX`MBFY(WN'[VG.CFqu;2AV;,+4$[#S:f/3*)^R%#(YgD$3=b<U/d!lR\YjBTa7>mTaQOU64jg7$@-dL.c`uPZ]GjGbX1/K_(>5Y8NL@]#3lCe,5m=O"/:6*iY`e6'\:2V3\ODK5`cLl%&r=[Qi!s3V!Bp.2hm6iCijK=H%3Tb/g6-'Y!1"s9ln(,E/XX1=1o:V;:ok(n?oEFmOp'eHKT_P$&/c6%7j1<`#o%P*^ee[5325X=%+e\r]<%\b4[OMhV<t4HjQnf_P#_pP*B)Lpj8u%$oR6M9O"19Q&Z3Y'pmSZ(djT%#W_E9H7]#-\K<!Z/%%ic_EGel21MT$$aHeB`f%Wo.7%HO+4$e7PpM+X2`:dFhZdC^RF@R7#&BW^_D0V\DI*;G7jW+FR!.e4p5c-u]TY<0NQPCuVTH@.^uPZ>D9V3D9P(*+Lb'*Fj`X%K^2Pc7+WD>AY&Bj;[@PUDo",,AAV,02<]"bAL:FbZ\`d[je@cTN#c@B5kh8-$Y$OHl?6BQ=Vr8$)RV8\9kIgiU=8XKBdOu:%1GU5%.SG@:UC]d31Wm]H(*H./FY(K?-;$#`E"kt,0G%`^)D$80aCkWfDe]\)e&_]O/khRi"rrUuQjP9PC:_We',SU8.+8>:)XhFhKuhiM%VA!^N+`L35UGP!r`M)$`5u-_o`5Mle3tPiAA!RQDPS@OslVO1Q`+.22QpCa\&qI+tgB7:A`bluPR5X:K)t?VkZr!AeMC/+)6l%&k%[,%RWXlWqW&/2uUXA>[ea,+hYPs`"\_6#6aW-,31WI&0uW(+\l*gpC<)M3<h!!nqT*gts.88e/-_+\YS473]4BU0pT7gMHK-12fl%&>51TpBX&q`Sg0HJL3N:&%^O@"OgpbFH6j7:G'sWEZfs>/]*<jKHOqNMXHT-'<:DBNsr8V<REr2.SWQXNt=]<FLQUM?oBdrKi5\g%dh^aa"OV)(m2c:`API9-:bV;e#J3K$k6^S(5_hDg&MMDb,7t$!O.^+@&D\S(fG5JLBW,LPh'3&dYURjjTmBC4E0#PDQL8pW&59Au%f+=7iCpM>Sh'3NiF<cDumL_c2CT?;6JV5Gq'rUI3Jg"o+FH6j/7!*fQ@qEi*]142(aM^t;-JNO$&B%HtQ[<8c,g=Qi,8aUI`SDcq%>MM@S@E^mo0]jE"#asfppB]hIGBl\T^T%Xt&I_OY'`9"'Mi-7N_@gXB;/G0QWJKCCN!<4(HUfb^%9`=`%#_4\Ek_i%L@"Vo!%&ST%;EEbUo8[cs8oF+=YdbK>]H_qDZKN<c&F(9m+Q=DM"^m2D&QUNAgH,J(5tN3U&N#lpjG7j[6\&inmMo[&Ar+_EijhI/qonGY?Ebui%F+hNS'V-I2r[krF!hmtW[r5fo<%3a>&ZjqfH^;02%Y/mq$m[f%-4@j#NfaY(Di'L:aT?LC@g!@tF?;r=[H>#0";!p6*?u._*?u@+%4%:D<iY_4N\7<I6@ZD$JS2j'OH/(+m:lrmU1(>K4QHX".DZL%m;.KtB<lln[F<+Hs_e_H#:_3h5@&O(D!;SF5$7'C=&=HBdpELLj%/d+OY0M!WJ8K`frp8J>F%F\qX3A=to-!cnZ?kVeC0oi_rM^gRHlUd4XR(lmc"$dIi!80K7"$-uY4<2Q%A2&Qd:2&6&!/H%YKTV+D%`5G\q)M:E!VBR^F7%8<06rmPt_1?AJl,&(;JEa3GW@5[''IQZDONgHXhDP]iqM5O994FRqD-1]ER_ur=<j64Na_]L4V2RYNZ:O&T%!X(g?Z<La>YjSUF@OX,ii:3T$`AP5>KuDf`/i>K^SmcEQ/[/f*0e?.?$MCU=77@49]ms"3eS'1:Cf\Lf9*oAJ'TpPF[SWO;X@.gl%Pt]L*iEB9J/C!!5CuW#6iB`>58[ph2hjRtOpO`1pQHiJc?;:]\63Bi94/NC9=)3["#:/M#"@>S?ma?lpS&l4,!&.F<N=p@>&5,r,%l4Cc_`Kg[M#S=)F*H`bsW&f$OYW<I1&Tu0qj6D^>`RLSK2q*MoEEjG,DUN2\?TiL=^ahi"9FtUa5/e)]`N\tB;k=09S5as1*nm6"%Nht4/9"Ig'9egf!Eo8ZI5ZjE,6OTltZ:O.nfhaEA:i'kN+:F[Q#E]52?3,SNe&df,(G'MXW<$Xas%uI/Qm`83c>Dhe30Ks*#X/t,%,l<=#'G+EQVRf1s_/sEq;c-AZn)9(S!+DTEJqtf\Lo;^]eHqu.&ES_"6b"?K:@eTk;#%o8,7=nam'9V2)<<IT,*?uJRmn2d2/j61%iWRhTA>2m@Uf`dPKg?oZA6!XVK1s-e/npD1_0phN#$nhunU`E-:U#V2N]#L:fH)F"!1#?k82cH_.lt0N>W3&M^gNlrJA.=D[lDHV%Q(<d7K%RLYMM&72/r5/(U03L9aOJJriZLLR3/A\$%K[h(%`/Re,7Y2\N]>+O/H\?2"E?[B/DIR_@5+Cm)S%#I#_pEB>6-V!OT/o0%DX@Q\[W-keF:cHt/CEet+k/Ca5h(;u&5a\$WD5-9*MOO+eKN`4/#RY,6CNj$6Z_uaK*ah%k?T7Pk1&;lfc2K3+Ib_KERf.ICTo?o%!["YV;rSf'$^ci+>GCRHLp5LtWX]PGOYomuN>'U3CqP$Uau3Y[d.ic=fia#^jTUQt_#usUa?N`WpB\(@Fk+DBKHPO:&FVW0kc/t4%!R*Gj.BmA)YpGPW6DulS5Zm/:6prYQF^05Q;,"tiiG9M'jp<9RbfYZW]1*?`8Z!bn+NpF)"J+Lc^qtrp*lJ7?TD25AZBf(6Ad8o7%FbTmjMFBcuQ&ek7TV<8tNZN8_G/fTl3+;_eb]=H;%tf`!a5k&:2L[2rA]/-uJDbk=I/G)m1)D>k&u5_n8s_#IO;\*Yk3i^#&RrRW%+8Qn.Ol:p)0t/2/WGud>EYbGTRM9MhP2V&XQGq831enlNhEaJu"^(B3HN\Js8FnFM1g'%9*&JAS(II"@nA45>+_.8g<G]5cL$jfY%0XeA#5toNKee-Sa#lFK:'A+X#"I%KX7C&-)7]%L)E6&HI!0V'>Y'JfW\2Uf7BIVFTPo=HQ&TSjb)Llb,;sD^Z-OQ8aAD,9Pgk"rX%OWoa#/p&ePrJ+-j_Bq^,-tb'*6b!fcFda\rJ/JlB+iYjhLbVi0Nj7B58a%Tq[^Y^q4cqXGan;I>.FNd(b*VMn&='F4+E3RKL$1?u%aqm?c8TQCh"LBtPo!M"q$-H>"0]ag:M"28l;<@+C-R`>W-qF(oKKI?.Bc^?i%atPrQG`L38-ICDkT35-;*S6ICW@[l[RSLQ('qC;%A'.GYF;oqVp-m[b>sD3^^.8CU/J^@aN^&,WBX+lsdKX&[F)R&FEVP[7\VZo_=]!>q)C\#*ejp:G>9c-P[PcL4:?/r2*MPC%449g,%A%NtVenKMUUr*:IG9l=7\2b1hWN2o>m7/kZ2T2NuoSTBi4XkVs,Td/:F!QP2c&j^"FE&NNl!n8mMMlH[,+GGY"FU9EWYPsOa\:(o%6\oT>"Gf@1#g)4"&]-Fr\mQj:`"8'UO^`HLF!N,jD3!\1ZNqIf*o@qtTEVjnLC=<sblF^Z1`t`,%L=qs'f1B&9Ef(@2MU2G"dQ6X%=^WsV$=!B.Yr"bZ!9S)b`1&:X?rA"3<`;DBN!rYYRRmalD*oTdOi9e`9l"5kK7mlE65&+4:'/%pCqA]1_f-5,7j1<`#o#iIN'&0)%rMHC>Ke%fsI?>e`bL47#.R8TM2(cCWAnbWb!CWfS)C,XK.j@A.4&oN>e^E]/Ch&0ZeI/O?Y!*a>XcMj%`k=W@m-Iqs3m-9t7@M:a%T\M0_]]&a8GfMTWms).RTaEpnUQP9noA">tS1_c%^Fd&@38,p,4H*`GD,/,]jT@-6e+#-J>E\C=GRZPI@!Q0$%r0=?=9*7ZKnpbq%?t.07Dj$+cloON"\d90dd+pjG_dYqcj/1J+)hMS*@_^s%R%aueN\+<,iq,<EYA(WF*I!+;$6:dCPe2j3ADCs`8L)#e4lT[rEF"E-%-7K1)<<>^TA3kVF6m\?!W2]uV69*pld4n<nKigEki0XQTa1D<sAFB^g>i15?a8TAPd1l_6-G#3[cqSX*Dk*RNJHs-DiJNf9SE14C%9aVKC6:%+A[Z\MLjQeD10l0jE2jg`&\02(DHi\tL+YDrqo`#X"DQB3X>Ir/pj?(ST!km5TO)r79-<h#o<)g;MZ:Ge>Ke]W=<MB3]%p?ue;(aCE?f"CNb1@lI`O)q[Ak;MQHS,8r_G?u%gSY!JFFqXB,#^lZkE=m,@^G"XUd@^<0Uu3D'Lm:qH+:mB;N$2Qu1PU:*D<9Xi%o(=aILm;[W]LeJ_#sd?I>Tl\'"-TWUCR$i/%<E2[<!)-HB$.q'0p7Y>^O,e)\U4;_7_IGq9+->Z\bhj-6!GCqq;g;O'B8T-Ki([&%Q;j0+mR#if6((gf"#nURVAJet/4+_q$Pb8HE^kP`kW5YXY;ksR]4V0Trh>]r(N9E`!N1M`es`rX+2eAS`=)i(9o/oHL-T*K]HK[e%"qtp*]^J].n`E/+]X]2A2ci?\Dk]1WDIQ!`gn[6:fTN,o_G)R`#WE'2i<K1!>+I;$!,.F2/B&BBFW\_>;,2-LkPFJ?%-L2J?U3IR%*EflQp?WLbK`ek-<KU4g!V/E)--J3^?G:T9C]d)e#aK6Z6tMj@M/8@o;V<D.$eZj2V6Z'kgI.Nu>DP2B![cW?Q"ET?*aHnYZn0s>%`Eab;YFpL'8[_4Rhdr:1q0UBP2+E%u!=;,((m%hmf^W8]&Mo?'2S?YKVRS9';uIr_"^QqA2E/):,AW+0c./AB2JGu;g8';cc&UKQ%KDkK>hcd.>8$JN,Yn>VeoUs")Ys&`_Vg98uYn>(0<F$BZYn>V==NU$qfEe;6J?JaiP`o;rTK;^Il::6Tm5t4a!VE)qX'[*U17EGb%d]X7=#FWuC0p$@1].j(=ZDFQE[Ie5;d]*p;okO[gWbHWA)h<Sb"k9&@GuE_,b\jLfmZ1*plAlFa7]]L)m[IL[Y2pM#q4_(<pL($;%T5KXnFlCpHFZY*J45aJX>N=7c\i$eVUWOOe20-WP,Xi.i>&W#0mTNaFJ(<I]X(8\7h%-@+lIT,[pl_UP'djN&*&U7&,^KL*NJ<j.%,9,>TRg?Hpql4:0h&<h\@V&QK7a.ZQACb5ah'-gnY7YR@e9UUd_jlG2Y7X<471gR$GR6afVB4R31\@HRdM@REj+XI>A&?a!&]f=?%P@#OFa>&=PGW#VmCRD\?5&1%l5^Vp:\XWnLBX9=[X&P>?e$5#c=]Ctma$sCa7m1DHfZ4`QP/ebt7t#"!Y7[.UUA7=JDC2h^fh)W-%'=UHA[`PS4J19I@eT`7D44u<D?B*BnH32Nq;+QUJd'rR&(mBu1?B(Jtl1W!a">ktA8T'MSh:.XEDN-n.3<OWQjF07Y5#4r&;tF)C%hFA"tP>lg25d^DG!p`ADqXeP+13JuVCCJ#W)BHuei3J`p`"&qGR/r,6RG#FNh=%haS(R-F57#XgX1L%'pq[@F5F<?eIaG]"%&&[&%)8c%qk!)Qm0nc1`UHXpM4;t45C7naLTTV%pK93geM?.u?GW#7S6`*IA)XR]%_]q"lMb'<dh!7;VI!oE3ppsYg6+m'CJ?LdZ%JWO?%=1_m7cf;^e._$'GY\*E3(W:PO+MF<[mfd6JPdA;T!Ftb*dr;KoMYK%(]D2MJB(U4oZ'QEoq5]iG.[*R[(]`F+#((@,97tD)m.Hq[%fc`P4Yl+TB-(tNi&_lU4`*b5@Xg]"a7E!'Q1tW2gHeZjEQ%rj(fF,d!C,"4H04JNKB!<)6o;#ct$di@c)aghGO_Jh>K"[sE$e:JL%093'2_]+6AJ<XKF`<c1sg,2n,C9SMYArI7P]s'08is7;gh7FpX+R`f[IIkO2ACChWib9<C=cuT7@#m=K+O[;S&-bU]oXYTnoEm.?%hZr[--Q1,mLu$Hcn&49n\e1K(.3:uNU@Sk6C4Os:o$''g3^+`(U6/au`^m;6+WAb3hUI@Q`akkk`bjcaB'6bMZjL\>:RFXu>o4f`%LbqI/+3k[bN"R1Y`Q\uB16'YDm2AP8$Dc0&K?<S8_+u/dr7/@t@_/C3h9!M)5m<[^JS.A<]tT[%'^CAtHrFiP+V>HB5,dB`,12=u%3DuppO@Or<9HktUHIdHY+q_N0TIIsYSH?!OG0<8WHDqn`"ltqGP"\ip5AhL;M*s!R:#$ADkXG>C!g3IDn^2oD0N<dec\8%o=4qm-%6SEVk&J#49(nV%K#pi(/NgV<*XN/e1%LgX35K4X-)L@Nk1bR=S+Y7KP3A?gLdJRNC)Y.`<da4>_FD3/;%V[?#@+#U4*]$GV)"D;r%e#iG,o<rK<.VnDKdCY?18K`^1Y.V"u.La!m3B7<K&5m-WL,+iK;(rf@$H/."KHZip4&@C8'r4(X4UFJ/,'G=MF5G$i]p![dS#C%9%dT;XMG%%>Nj;4SDKW`?@VFUCMI1;MN6a9i=$t[Y9Ttj>=.X6/\(5?cl4MF=>+cN(nHpV6IfCRZe.F$+CG8:T.gA['/ePtk3MaOuc%X5;hIDWk'GIh@HT#*.fJTVqt2A&2+c!qr]k?d8CWJV`&pGqi8@.^"phM$V0Zh0BqUT^koG6l]Yd:J'OWabh^?M*i7[:4^77Ng?Ia%>_+s;L6/gNP;#stl>pNFL]l\^r$81SB46VJ5:=8)Tbu*-$l-F<3<@-Hb[:(JASEQS&;M5unkc%V/]g0u`(3lp*\'Z)Y[&@QEpa&I%^rTi95Ql`Pd4PuA6j9:mU-Oq^&qMIB$\9]1AJ.iKga&V]?:[IkBV\3f[Acr4`-DM%(9j.@^Vkj6DNFChoqbZ"V=06,UBWUZH3'.q%R0`F/-59G^]nj`sTn-MdU5$H&K=UJd8T%Jp:CWB:W+_d87Li2WR[uon@28Va;er8WJ3j8U^Pk^eB\os1Jsg:^TOGp$l'T"?VJIU<%)_(G`(UYi%mEkcYoqk4D1aZ4^Vf<[E(:3U7YHLGc3Ni,@[_*1>>uTM<@@$1`"/m3_husOFAlf`1)?>2ds,B(k!+W[/He/h^-B>sT%k!IS0-=Q1F,;!%H$/B<l^M^2+_O!4C]\L2T"5dkSTp&0ocFn#A,.Mh+Y\?:Io"u:.drK3]r;k?8hJD_b!E>))BZ%H:Lfl7m?#q1S%?#sHHXoVEBQ%8+),Mc's.J9k&TU)HHft=s7[rIhkW@qHagLQsKX^Xqee1/3&0%]m<Rr_<j]K=```g_0HCoM^3>_m^X>St.i@cP_H%-8n'CCLZ>K]d>YoS7H)PmTl"l_7aVnj8FbIn`F*j)^!ooZ1Hs\'0Bsc2&E"D2&AaNRb2iUY).Q;n!_mQo<*q0pRV/d`Tg`->?=!I%n%E3PisABs;N:2LEpAiT*c$+*h;*"(iPig#@m#=ddo/4PO?JUbR7kn<D:?ppBP8`S16mQ$pa-PHOmPH+^g7r:n#rTC<o27G(,fY#%J[JHIG9,5^lp3@H=AmI.^%Y[rqu5`JSmjhJHi"11;c,*%NX`:MKb5HG'>S;DU,mS/&u%[`JL,1>`8sp6?R;\qZ$fW>TG.M0Um+[C%!l3#Z0&.#[P!rK7)p3tW6Pi..-oWF,:imN/:^kLVTbt:Z6SZ:4L9RDK-D'Hl_Rdd5?5QC)5]i>McBJ-:RT^0mjJHgQ@R?`#Fk7oU%4NOdd,d>AYkSJ2dV2hf!l%u`jVD?11km>S)kU<_:)*<V"!bkR:4,rV8/0BYVX\Z3M4R[EoHlT#>#3e+[j6HJApi2[o-eE?'dQrks%e`2`&3t<-kj,b2-j5Aaij5>R\j5:%6j5ABZa'f,:mDm&I#k^lYL3f$P/61I]e.]pgC),2o:D0b'>=S&_+A@Za2Yn_JB:SiY]M)PE%c:g1NTTPg2>j82LT"nrflnn4F7.0,RVZAi3T[;p[o[$_8B`Q]/0hapUkK)d2+=fMdiSU]nJeCOVErK_iHd..?7dM[:8BsP:8C)m3%Qd10ma\RL!g/!;r/Y.Q]_69lUdMOiLXj!Adfdn_F\)*d^s)]0QD_G7dCFUg3\R\)US02+&e<$i'GF-mi7BS]-"Wt8CP>BN"e:=Zd%IDpX\/1K6M[n4F(4h-+"8)Xeu+)CU!c^7Rr.*n9&f.aT?0f)tP(oDI6`$is44,rf)K/*m_%,<j?T3c3`^T]UCk`GG>S*+cBX^d.*%Gi,t8Wp?(<%m[^[(<Fc%nT<a$^JL3IQ1#6FIe*HZL`WH%igIt!agmAuiq2r/d8/&4%,C8:9J:8pFP'C"/eG\HSp[Mf]Y\?jlU'>4%GK=P*:L#[rkTb1.9dV)GirnVPUkX!U]XtPd4t,:m+1Q6SbqADp3V#7(3j<^UBJu7<\j-/`4J-YBT\H%uaHK0*Jij(YR=[O-GejP(%\,dN-R3B+%d`QK:Rpo/SBX:D6)s1)FS&6D9C`8@k`Qe4!6):@dFI+LHCAseZMs%1t1VN\fnp&H`XaTbp)inRB#UeiObR+,7Ss<eJ%;5qRe6(O0i[B;&??'jI#oR/Z&ei3=T#3#K3pLVXormf3c=\8p9#mnUE\bhkX4a%k]o_GVdOU'l@cke%S`86[Q)gceN.G4sVe9*bU%ma`DN?EsV-,/dQk:skFXBBmeZh$0/=9#gg@pY6(D2$`OtcbRsT*,pP$\!Hd-g<AmlOPXRr^-F7JM3<TjbeS*!"@unqQ-P1`U'i0U%apeYKoA5)e`K6$>`itGS`oMaDqN<-_2DB?-k)RY'DU8AUbK17!Z'mC&lsMdcVlfk3KUSLfTI[&aW>m9lco?Qr<h*Y!$d<4CMNE"3%F9uK!05+a.r_t@'2*8MI5[T?D5UT6QTY269J<$eDHU,W%\p-L;OLog(qm<pr5f_[)!F"&eUmt1b77j0inikX9Y,q92G)RErREg7@%5R6FD=8[)N9=sQXO=/"(\3QXV*2$HMCg)GAWRElIrhooUDt;;?XeMc:LcRfYfTM<.+Z_kqh5LKu)O*9JVh(>[gh.E5csNri=YW`a%L/-;3iY>R!Z-ai4+Ka9(WIDrilpZ4N26GLb8"cY@#M+5/nKLkH;T!-4<V7.rI=?'(FT/g0ZOFd>b^L,`[KZ9EV$2K/H.KW9JV@CI%Id&"^dCL2dHiS%OnR3b;Mbh@[0g9$Tfj'>:FtuNMajh"k]WV5j`9S<V6bKRQMbPZq:.)\.*g]))iWYg?UsqX\:p#?V.lOGu3:nGg%>pV;kO7Z)_5(:o5^G"(EGo#O1(9$sVh3BAFZ1CMj$kQ;\+<,tSa@lOY`Co;m7VqqZ2art>5U9e)M_GH&4dsL<&c<,l%#LA3.kj&-%jHcG[=Z,sIcFi`f*tcqG10oKmg(9_mI[;bbejW6QX[7dUmqlue)"99IXmR#imZ!USPpWDZXGO$/Iq+BNc.GAFc>:%$884Q8fUk+J%)4^FSkN/S./V&`5h\1`n/+<"r2"qs[60(27_kG4h)GP\b.l`[9Wh`i+WVki'aO1a&d!,X19pZ&Ci^SefAJl_NQ<IITO"'br,"#T?%@T9kY;ng\2dpYd:/sB5lHTp\OrQ*V,S)=OVB5%hpHH]jIHIn-fKf<hUUhqeRcS<lGUp$dXF0eA=:P"J4,TG$`)+@<ObPK?^JC>?q%kikHX#+$:El:&-IGc;JsE1Xr/1KPf_QSBpWR$m\8GXLP9JfP3&d^HN)*XN@5hN4$p]juO^BE1WbA(::D7Q$eW5)-LBjsDTt1cJ]O%.L]is70BLR^pQ9q4`6)2)]bi+Ki^e0dCp;0S3g&O,"'J!N(.6+qSBV]=#ot?N;(IL,*GG"=TMt&4O=H#cdWX;W(tTZ,K&eUmj0.c%RZQ?lOTEMJZh5ha$#85Yc/u4)l$=\(^j;p-[(;`>^>/W^Bo=&/A1>b'#PL6a1.\."jJQmVjcnXm9G9Zn(k`0Bm!jHdes29$`Z]jn%Rl#5K_B&tgoc1flNatC0kiLa-,gnU&X"s,3aNs(#LnAO@q]l&,d[t:EJj9Z;=Fnh;[d*<$A&`o)1c^mS5oW'MHte+1*+epd4Vm-W%_Z#++cI*@T5FOu)OaG0L]/deEQrPR[*p4>QX9JZ^MX)T>3MCKSLalF:kmEN,SR`$ZLM>p0I6G@F@P^/_IJcM_h='7("rc:V5M5L@%HRlXlI:eAo7)ImYH0.ib:p4X,r7,DV;"b./5$<&U)jQ(-(s(1MJZP_%:rfiS&DodoNjt?TjsO&[A\uf"PBB&UVfW0Qco!.u_,TVf%9`>%[K0[^kIN1de1WiB5EQ;J>#K$)LrPDDUJd4Vk[X2!_*iIf2@pcK%Mf/WOFDW2lh*G9AOg4Xi/o=1#%Dg(_g*+oMJBf"cIi4E%%O7k$5T2/q1\@Z5r6r.X$(Q4#]K$fjf5B?>XkX,1P_WYNQhtL$_U/m"]@!*>6Y7hMD5^#PEV^]X6=-AK6/^:0)C%DEkU%a%[`B`C=%FBt28<rI]MdnduJ@\Y5DE[\1JUb00$-C8aP:$0+OOOaY8eDY\Js#0;]65!jKOL54:47\an9T:Pr[_SIi\ReQ'PQmBM#g+dc="H)G%PL5UHVVBKoSsJ&GDij,c#Tk6SM[Ra.+?3rU:7bk=%lT`KSr"NldY6`g"G#$jS0'#n)EYbG!i'MJq*?3nb`D,K"UI&S+Yn\L).a"N%B?gp_+Xo477]k/nB'.=q<t]4mlOdsBL%-9q"k'q,RaeSQ@eq,r#3<S/NsO`\hT^C9mCi1?*$Ht>noaI:D8$9HX$3SU/'uM!5UW9j%F/X3Za;S6GjMe_5$#!!G(P=3+&jHS\XM;h&*n+'KHWgT,IKTf%N0pl2$Y!LbHdlJkO,WQ@E-5Oa[Q[U<%"YTT:YO:mmS!a[bk,cs%#]YQ7KjRPG=qojF^"PRe.scYuZ=B(Gqna/I*%k)kp<p]L*K`8Q<GH=6>-l]oT-^9b,-nh.,S]Y!P#oL4q&LYjYE(O5-5t>3k<)7]%PE_Q_(,@DqrfXI\7N4fgiTEP]@n4Bj\o\P3L'ihZYWKORHWb:(;",rtZe/.gNu&<-<]hRFc/Y(h_[[;"%f#2@nisH+&Vupb<SUGX%!Ee$'k-#=`U)\mR0ojZ//$(pV^fV54PC^b7&>k_Ue`;)kZB9]@%^'48jEB+61$!tCYU=Ds?AA:.ml%2r!#`bYP>hkip+42(6p=>n%rMGL@Oeo+M0N-i0-.Y^[rFo7am8$451rVuQF@TuAs1[&LYoaj!'(l-B@oDCiaAQOSjW5'%9k5^_)\NfYaf%&LS+gqNEJhi]M#=F+%;spiR[n86oS\+c_Z^40.j=(Pn!7($0=$iK/Ga0VpU9bh=R]mAI#8PL%)KHBU+LfK5-3k^BG,uqo+Y&WpR*.dO4'c]83N*\VTr:cX%Y@+02!C.1t6?h]?#ed=OB_u'H!]'(?64cbFZdBR9gacR.:D/>2*#?X'6)\MaXij!1H9!A:0P9n"+O%,<n$mT<VFjjH&;1U@9PTms%+\%ifie)go@q/.IKOX7P&Gi]%/dTF'64h9KQlq'BaXNT"K^g62Fc\3!ZDt9E`!ne/7aGF)9VC<qO=\!u3a4Op.@,DA5a]+4je)uQ%)lT.H6#:9,2,cMk>:Sm=>n5iunl1u!"QXuaP1[YSasShK6AYM>rMk@S3H,df&1K2fD*nk$bk(Gm,R>R)\=];p+l<>;KJI"g:gbUU%]a,]>'81<c:;$fS`+:S:9]R,OK(b`=+ma)DhFRko*a([5nJ-+ASIgIaPiRHa&E4^a]tadpScNAYEY4)JUVB_n#aelfr7.*u;aEs_%;ahE9K]L_LF!dn>+AYX^d#Ei(FC>l:ir5Di,daCRJrkp`T0WfNSBYcfYVoW5-1!5i$%6#L&Aed\'RY]r78)rW6&9/gB0jVuj$OBp%3A=I+b!?1aV+Qjo#JCCar.Q+)8B=)WKcF(A3gg,EJg_DrgNW^U.GnAA6JNl4fd$h(;^PB&+N/@c,O*0c6m\OcM(%EoR3WK[Kd7@B%1.`mKD3@`>/OZ9c6rHII5Ae^bK-C7Xfs;Y*He*^'.dfm6B0#\UMq7kkHe.DL$KLl>_+[D]Tc.$`:d/kTbb3FHCLLqY)0C-s#-C1\%D)1o(ON^ktNEV@:'f@XM?)\Dc%7gq.C!_n(e<2h-d)3LBF4NU,aPJ`ILSrn.B0%AM?DtW8;*R_nQ=_I/11nKa^-:,*04OS7/+(5G%4/>7C]OtSF=T^8k1E3XP-YQ4VZ5cK6/B?O\7"dTn2(`5tB1e\s)5)f9hSO6N8Me6Z6;3B)Yglf1AHAKJpZh3YNE8#L&M)?\qnO9c%Zsn1cI*W%$YoaiNeXCfPZ8aCGY&mSX&5#f;b&SbqZI2fhaC1.3X>'CQm5E2D6V@iSO'YOm35VV/.q)]b0H[brd09d@m((#W2&M@]%DW&2LG4lXQ>>C0J2hYur^#n`jB@.[`A*WO-R`Up#A<qA_%^i=U%62o=c4FWD0ae73Vqd[$82=eRYLJq.)KBB8=.h@7e[<LtR*fHf%E\,nL*-:EXOeKj"qQnX'>LoJE;JT^O,-obaj9WpY,[2%gQXQ>t>qKo(;pX8S!]aDjGa#u&?/n-?[qfkoAoj7^IpgL[OhdD3A!S*u%0P05#n=Xboed0l.ZXaY7JKM@3&YZVP/6S!d--II@A.9'92bV_0,Xo.OOnd>;`%4kQR.Va*(A]r\QXf&943Ug>=@Wg"A0c_jZH`;9%1DVVhZhTn*.u:^(Yqi"S1R:==`Y,;]=.$6`9OTYJAh8su2?bmHOX))=:"lotjf-#p@NWA;Z(0&:rp=Ho53K4]Oc&Q__N:#gQl<7_%18fl.oT^9!f\tI=$s?hmU'>tPABEok>\H#F+=mY>+hien5s4!]/6TlS&ssu'VlFq[k1i;Q(p)Y]/@#HjN>$'KE[32=%_3kn84DqQ%[q$)=;H^ph=i@mgj0>eZH>Om9(&+VCCa(6UA?=f7C2V2r:tIBW7h]LuSaU.6+uugP$tGSX<Gp"&N0g!=K(2`3(7TSEZ=L5H1<e06%9,:k:ZNnm@2(W4Q/Qn)Z9@ibN/QpM":R3R*=+^RiP!s2I(3V2`L]r'B/nE5MP/Z)sUsCVq7-NWBQ7OXS;3j['=i=oV@EIN`#(r(C%Z:<H-g18=bCH$#GZMYS]6WSO"glRf8;FB%!,A^I%%@ljM%>u`'H`UAJp_p<5B*>-U$&<!8$C[qAZ%?j(Em/Ai`X9:c.C"JBIWAK9%/6'n$?@]$f&k"qQC.><&\MN=Ldtj5!9V[&1iGMS854C(Rr+*e+IVs9.:c"/Babo2I)iTOINk/@bcA%fZBRJeG6HV>J:s#,ok=2Ob%eV+aGOa'MsI44hKCV@qo]FX?]%@f_jfCXlH^K,p4Ns*j"<g"2UO49W?MD_d!]\0OaYc@;QR]qImh-n-W-W;U!nZ9;*/&#/0V'/j>%&Q-/hOB&>o1R:-^:CAro#;fL;A''gfR<kg]j.h9X8%2t?l"VB9*QsSL@pL2(N^X("f%c93h/0K7;G/@,rn(Yei\:-)"Oo,T)>8ju%;9W,Fg(S'L=d/)[*)i2e's,Z=`LAf"5Z]`Wmo3<9[$n8pih&EPN9*0PS$<U(i+B(_Q("t&oaoO<AuoDI`f_3tP::V@;59%#VA`/L%@0f@YiESm>L)rjJ)(XME2&OG(0k;!1:/[kAN).@HdG7'Q/nRT(]ZaLBP,FU(Z=%#;d2bB<YnBo*,?MbBZfAebXT>[K)4O;6r,G)@%P[q`7dVITG`?I((D%3ULP_i#7@E!7Qb,nd+,V.I=Q1@qS-!IQ;oqt;5NCjIP)Rog8h"S!or)Z@h/H;(LbN'a$@Cc;G(9B(eW!+^4%+1#@/r*pMD,lb@X.t+60//NilK&m&qgTOi^Em'[R5RDDdq8+N[\bb"`+?*XR!Q`Jd0)rHWb)*?jY7dNeo2U15k,T&Db^>ZZ+>[AY%!+b5m&:e6=63-kfO^IHV=THSrQiL[jWt9g*J/&41$s8q!R/ngd,mGn:JBWP/j<(j=\btKr.@5N:,jh:7.f[!^bN0hT?mYWh/QaV*%\HOKo)m`p`!D"eEf10$LD?>o&Yd+7>(9A'tb^pQ2:i&H(5T)?Y-nl<be:n\>O;Y=/!+\R#&:hu\jT:OsYX/>1'39LU(+^8Pgk(do%+Lbah!9=nH(N%rZPlr5=?sR,V=ZI4Igk(do+Lbah!9CR;(P$Bk"J?-t!0g$)$:&LF8ck)YYZq0K$^M/cDS\pHOB\q_!-/0BLc/k\%ao[YBYgQTf^`$rD?)IErq8[;Q+odp0.cd3e6N.9Bj<$2IA-'cq5Tp+B=1,"-AG2fM!3+?pj<(^$K`H3<Ak5X`Ld7p_OaqIj-3;)I%9EL)[RfjFh$PDS1M>WRg.kd/FTJJuFSQ'ROZ!;6`2[N!u<OWD6pdKOZBB_"Q_4I_"eu=f74/tQ>rb0^E1/]Xf:`8\$Bin4>N\aQ>%aJr"O][L#]`bJEiP"T`4='"E4>-_=6\N_U3'r/(/=uPr)kkoJc/XgG+:8PE2h,S76rB6<02:p\GO)TJ$EX"t'Rc\6RY.YQWq+>p*%^7O1g>'1k9[9FXHfDYSMI#Db,[]\Uo8+g#qpm,@!pm,>pl3]cqW>l[Y5L-Vc>#I-a(d.6"X;1fI^h8=8^RsC99K]+l6VFIn=_Cc.%^]jptV$)1i5cQ"`1IJmSZY`gI]nNkL+X,Io_E_I*.M^i-`"Oo/7I_rsEq-:,b">IGWs\+4UHfQk#Ii&ZHj_G.c8Y#n_.a'(8lW\p%k`fVUNga++Zo1q<K!bs-h_%<kH4trG%U/-jgNf3SpTWf:Wi63NR$u+r5&<\CQ':?bE29b?At?"'_h;.5b_g>4>W7?'.)'7`0"r'-%=n+)NN_2<Gn%c$,FmUnX>4ff*nl,hTi`h.+SL[_C?ThE,3lCMg7EmAk1Y:JM-02B*-UdM@?eFdmU:d1d/<mb.*kts-$Q*d!2/qF=%4?EW%IrYGeW;%-&Q?23J>P(L=lILl3!U6qfi`gL`Q2>@)[hpTmon\tD*gY.#B%5Zmi+K(''d$TG/NO/OR4B`#70fdR[<G`#$XQt\%SYN8%mJrW`KKPtrrqYruUcO;Jhh%V*>r*5QH4b2s5?%)(hFt'!,K7-NS9se.T_VH4.t8gu.Hn<FHRca`maO/^`OG'32GPa9"mX$B%Qa(ZEP+K:=N,@b0i`enBEq-:'#Z$eFDh0CcG4*>YN0Zp&Xe9o9Hn2q:i`i(#Vm]QQ$`c!'3<3*.b@ViM[2;aM;aj0',99.Op2X(,%/T\r&qHH(XgP.0M\)>h+9;L1s!jg65!3<kGaNmh8/&&=c><llJp\J)ZSmo/q$?1R90&9&I^dV>2Z1CFc8LSk$A/27+Qf)>XpKW9-%*W`17$=&?I!#rLKi$*;UKb#]MAXo'Qi!OYO95s!2U]_Lfl$?@+";cCMHK)%0(U,Zh!Z/i^D0&\71?<(Ii6!-5"YM^>XdGPOD/:_Z%a!<fu[/Q??eiG9B?cWp=qMde'*>Q*JIoK4D^r>P60,+'C#hE-A<T(_]1hTMt\/8YTje/[Vf27N<<8b&0/Lk_Y_\X&ti[_(FKpGnH%W<*mU,_fb]^kG4%g51,[FLUP7+r:cV;\"?k95$2_1.u;GXF_bJ@TUAY>",O:'3a3Ck6\8t<q(bKELnjmaqLY,Q57p>hOH%E+U(eX%UCO0Jk*DFPcQr'Sr@KRI/\1eF,.[Q96;ckP^f+,_/=_^!<Mup-(,3B/;,n!:$Kf_TH+)>k1/(rfE_GEgQ2>&@i1I"B(@T.CWV.*f%bJB58g_BOT=$X#qHOEeu8BUF\%4TJ0`OEbr];FRlT_K/ujMeV']!<<,(>n\,du/.@f@>dt`E-5jCQiZiWV@6hBCWBni`geNHE+Z4%GE>C9]_3+2/a7#`p(jm[7]O-*A8.;ZanB2bcW#6AIjMM3fMYMA[f@,CKI)nm0W&*!lY*$.$XneRTAOOfYZd@Ch806OL.C&O+SG7Z%ZL/L3UXf[6\m)gnH`"AY\/n""ID"t`hKV0M;0^:[!%kjKGQfb5(#N-P/]O;C,o,9GG_HoPdDB*)Gb6@KfjZ?0VOJ1/.">$hUse5p%dStt__HVI&]Z?AnQC:ES=i,ocWUcA:Cl"fhE]_I(llq@:@D(j8V#sZAe_cdU<Vk-@.:J'a/*VoD$#hJJ5e6745m$YhY-M:(T^=h+%h0P3-Zm1jlJpd2)h\qg:![_K1XR)7p<Ddq_OIoBn.t8gU[rOi6G3eQkcCGIq.$"g",FmWbYE\sO<O\,>jAiZo(@nJ0/dkh4XUp3!%ka%,n??FB0*&"mgKHW"['jk+k/Jj/Cl;j(%]]tg+6<[=2,pE/0Yg7l6NC9hYj\h1Ah+CS,=5@mGaK'1^$+?j<R8@,<Xn^&=DRgVF%<O\,.jAiZo%.^E&/dB;'Kc'Gn/&,-@8n(V7_8IJ"]&dC_=5=4XV,au[A[AC@nW?i-E[f)QDC$aQbAOj)j;#(-$Hbon7`A%.o"&$X%"^0fd,R&JP/XM(%n<V6V??dtl6!eddIjKfX>RL&=>=f1mb$-J%H0$WEJmoN_$He`-6%Q!LjJB=j$M)VL8IG%:>:p))m4FZD]_5A=%K=pnYHtB^p>Rp>Y>=f=qg05m/H0HoIEP1pE&qmpi<rP]`Dn..SV72U5jJB=Z'XG#J/dWi>"JH6$%eA%P/dH[dXX"-skq/6SXRqg:%5ur:^8O6[/bG?=7^#egEQek>4OI+g]YH7A^90lm1/#4;k]]E%Qf@4gq.$0OC!Xh<892d-&a9u+\+QPto>S?U*=@j.rJlsE,GtflW%KJI#":r]lnDJEj!!A3cb9C:H#>SQaK]-uaH9;9cL1ARd9Q9Em2n.lXjJ_S<>V$tQ?V$r8c:-e(_WT"TN[5@?`f7a:G_sO:q&>73U%Z54]K1De'r2-3FkQZ@RM?0q0]a=UXAV]^90O3%&pB?RMaHRn`lnQWp%g)(U#&;BRHA#3A]MhK32NbX#PetQR/2e#W8(C%)?X!JT7%YO6#q>%Tss_$k:.i53=lkn3ajMdu@Tp_I1SABmk+Qjh+pQjelk9R%#u<J--_&ZI3f24,ePQC99U;=o1WN>0X#l57'qYu;)Y)M2]u%24/>Oeu'E[GjJQLdVCORX]FMh1Z3U`"N,6h-NBdk?p`m:<FFedRb(Fuq@-Hu;-f#W=h,Fe)7t1G@,eJVR;+Eqkshhl`:^f:DfHG6%0#?TfojrpIg0:7KnSNK89'j.326lCj=*-<Bdihe`]CM6jR9b0@\K!5TG<G?jBpp?sG9,8<[F;#5`R&YP^?GoA/:(E/dpY_`]+f<b%+E+i"H.2_I^?KH]mBl6t_N7*a^?r;Uc"iLtQ[&\8$.kTM=*ibLf-/;FSp.l)k31OmV?Q!igNBDXn*cUS>A;t8C6DdbQeat=Ec%oE%QEpTuFt59T??RiK-"XQ9^do>S\'VQa0(lMS'ZF.R\cn+G.Nu","V,<CWtZgZ\+3VLGUdK"MJhP4XQW]DabjuT\@(O$St$SPb25`u%*ElF9&FlK!jM\D,TbcGs`c%af>BU]5KP$85WT[AlKY/d7@YDC;Pqta5hoZf[YC`#V+g7/BN0'CTE^hH%`X$-L(no^r)55iT0g\&N%B7tZfc3X74&gQJF[$%27A%6B3&'?c=aB[#QC2RIF;'7N,DXk;0<`uW:735\aF%OV.(HB(i<YA'<k#VIRC2T1!eWOZbTt`UJSlhu&%AYMfHgcE^&6WnghZGg!ca0B_)X=.(4%9C%i:4nh@MUPs%YjuM4;H\GeXI<1[L4o>98=6!'eBlXl=l,X?"rgL2"rhcV#+Jm^%3p+8%57NA+1sE#Y(7g\S#YDiaS-AI5<c<md5q/."gCdpG(#+Td[UNJ:*,)UZprJ>0Ob+B":ShgGJZt9/WRqtT81hq0`O9^oR,0gdE]OCf%oFu`_X<LY.#$/2_Ne(0<MF1e%YOWj@)HhLpXGg1"JqWnB8=1HMeBlXD=l,Vi!Z=iT!?6)"!Lm4U!`j<_YZt!SIVH3ZU33O+PXf,(%TR<,-.Oo%n&>*mXFB)4+Z>cd%?X4ULm"(-XG0+?/aS/Y7/+:#YTi-s/L.XUT0U6sC_Goea<mf.XCLqaJHX6uLoJ(:&b[M@mH?HW;%b-_m^WS]3.KfTUdq7)FUoZ=X5rA,tqV9DuE3!$u2H5W`)D7iu9Dho4:nkJ_]=(uH^(!!WYmoDZrO%;b,+D"6,>Ae+gYq5@gNieAa%&%@VS07_A$>obF_Q#;W6Weqm%4f`8OWa=d14E8-%<T:#SIL%^g'2FoI957!u0(nAMCL`5rY]7]Ql/^:3nTnAaf,]d-j/&^&`N^=c%IW)m=QJWXbZ'A![?=_5R;-$!+Y>#)lU\/74`74BZA]r=p?=bXTTtJO6RA%:7Q<frHQsZ<.QfG6Q"cpUr4hiI_SKU`\\XqA*1&^L#%?aTPt27A[WF(".tm,ah_Y;hD+*VVaXdSWM_PbYmU^WBf8.QuQnW[b`gE`USN'tqcg=_4ZOPuZ0$OU'n&c5.fk_pOYC'h<c4I2o"[%+6=?M)fpCUalMK_&7>6*GtYlCd9iudN@OC_N;UluIBBf?]U]._CZpJN'(PX8<IUjZUm9haX*^+fK,;Q`$KC`bSB,6Z85[B[@-*-/%<m.eoN:-LtS3$MFSV$^n'']'(98mYfUAI#BOfbbbc;A/r/QuIl/(qVKb#Wn$Q);"d4*rufmI&8+Z>-GPEtl#;GNUB&(%0@J*_W&p%UO8@f4(!f00FC@AS\5b\F\Y*1X)f2?\iT_MO1ICL[#TJoa5"qg3N?o+m-[l^P(<"$[c/g<Z?=C?3Hcu:SHEs#Wn3pO:Zj-,jf2K;%BP!d\;>)J%SYJ01H9+Rl/G!ttOo9Ot6,VpNHo4;fkGp];FM7s%jDdrt(Zfn1SU!8G\b][5Cmis"=4p1rAegZ\MKr>O?SO4ij9fiZ%n<DG`?3\Pol!>g]ea40I9)4F&l97-PlM]M/)$0<$j<!E6bDN.Lq2/<HX^mo?/D2`DVZu7:EJ'(._2Td*dUZPOq7$IFkNk[,N0l'W%_G4IQ>qO<=--<7'\`^@SZnK\:0Q)M8ZQnu<(FS@k'\[:um6Kp*6G$Q!;[VE[n1;UXBUA`WKm%l]n)"l6e[T]G0a#1'9N_QB<-^Q0%d7+k_8n'u7oqImtZ7$/r'%]b<E?KZia!ia;j,kn3l)R<pf;=iTFk2T@qN8kE(_lCdfm2M,33RC3j;:cfb#LiRc?c9@.>&8n2C9b_%(T^B56%%e[j=U1BVZ(tfI8FX]ADgg<cWD4c`LO/sdg=)5SMp<lJ)(WEDmtSN!A^7B)'D1'q-\<#mA-9R+FZi#kZip!3Ys+L?ZST-%moOGMl1g@!d>:^>$PRRh7OQb;(nJ$gcKJY#hEt=qd/d/0a(6e1pU^)5dNEo8N'6c6)Z9#^%Zo7`3m-^F!$7K\R?\^e]D.@7WrlmC%4pM(oM\r>oTUaSce%$%KF:tC>:23:E*UCicSMV6rFCN2.l,:5deVVruX2>[@)WjI87b7,'lG./8hn";;-)B*pS[<=\l6ORqDVhMC%/m\e8loTJ7!ZA'7bM<?$Ve'1i2g:>@FU63[Gb#cc?K]2HlWam]f=AIk?KW6VOh6\Zc?jt6:S7&.QiC!I_Jph97<2se,s>gEeWUT\%H=l_Y"N&(hiQ;F^dHBr?#fPc)kbQkNq_5.<g_TFl=-O[bq!04V>Yt0*"OP@c;I(/k4ep/$FCfiV]Vlt.R5#lQ#BsTuBOjaOkXC7r%+LS5S=reN4of>bJRIZV2"U?c;<,C!POo0p7:%SA,D>83d`'P45Eu0U$Y40LBNSK5i>1q2Se$42dd.h`N4^!R?`<b>hhl[aETohJ[%'>H"m)N"Rh9Z`TX8=A>J]2iOg?d4CsTL5J*^,cY$6R+93L\Jmml"2<=6fWlrNDrRl)VNR,iW:Vj[^!4QX5Y1[gdok.o4S7NAg__$%j>!c`"=!`aEkgihm+P=Ga#`=RZt83(im7sI>0n*,)M)kqma.>E_&XFI9H>#b-4Z"8T'%AS7NN2-6Ih\?&9H+-59m@H:Y$\,E4OdB%H#Vl&Vlu\Th&3bhVSH)R7UFZDb#c9to%$i?>SiMmR6u+0"BPBuoG,iS]/ud(Vn"F;4/:S;1U\D$g%.$X3&%Oc7b".%`gEKZ%@R)?%4;rplFS!aYeg:i`*fZ]6d?Z%@&T0qKI2[g^WGeMq9R.4^YY"<;Z=q,IqJE3:OM1c6a?GSG"\1pt1_\Gj7%J`EJW-bLUebJegnul8%_&1J<UA9BqS52Pd#\+/$=KDcg_l7?p11plO\d[U-k9C;+JhtW,EJ>>Ec7h2qf.cr2S=u"c=[O:?Z\CZUbSkr-Pa8as2N-WQK2%h&%$F>IC&g2Ui"TlJu18b'u0UKan0YRqI0'9FWC.plr$LbP+0k4ccP*tBC,b%Bn9S9t*LbuUl%9i-)BkAFBPnq/p&de0nXp\`](D,7A%Ms^Y`S<>>4$Q+dda=E1s'!pp&p@n/I=R[QMZ7eZpV"E3a$beL6$]'j/"2$U/ZWONGh&K<K_?7I)7-O!bGR"QE,.:M-b5a1<DDGee%(6P`aBasP5k!<qb<J5oh,a_LC77D_CTrIb#.O43o'Lj=tKkQ"gN?Q)1g<mD:5)[jWL8AU7(IqGZ.A`*40!*XT!&#s/RsL&>^^F7%%G"?A/c(:F?aUua-%lD#Zh=B#JmK*Wg.sE.*dr:h3?=XN8C9reGa^_u60`@$PG[6-FGU4m]iVG!p$V.]TY7_YGR+o%feqb#g1XrW5%9GHN!=<l8M.gPaq186L02^[->[7$VZl;*CTBiIQ,I,IJCI!0+,98d2t[01c6f7cdF+!=9g%RsA/:ue%">]FD6)W)sFb?jk;G/fQB%)kBKD&_lX,?R^op/N"t(GP0S[jMdd^r:mc8U*3iMW-M-E\A1GV>:s)-l_@#Q-l4J22sja#>*%1h8oi=*`7Hg+U':Ppa`>de.#Sd[%d6*Th3kh%ZqPOV&2Rhc2bAtuuQ1gC&U1mXFQ\tnOFuj+W(JR<)SLbROW(Y;c(JRkZDcn^00\=Tjd8YP77BnFHd(dFA=Fcd[711QN%jt.BXKhKa4dCTeceqdQFRhp+mQOS)JaT%FaU>1@B7Hf$@//Ma5g#0i+mWluE'?Qd@obBe?>*b)Npj:e:d>L.8$\^7MKe%51M_a92%l'TR]DbHq9//R9,<7;#M>Vo:uTOk[t*I5CFSs?sR9eKVhLukhiE,TdEH6fn.QAZO.@jfGg\6dM,E`)0ia@-t&\L9.sMcR*LcK$/h%&euBc/6\Lp4iAQ"e0efGP7q);Z&%T:A2Q92C"4aMiD-IpMab.V(;`MF#cHUF/FWY-jVEc)4nI-(A"5(cEAsLo/=JYr2i:$(B$"LZ%7SGAE0T&;p!]u</UbMHWMh"M8SgY@_^;J`aV[rm*mNE=-`m$%L/b!@.91@J9$)S64L^.[+WJEr-]ulhmB(8t1TkG1aE+D;_Wp4D=%16DY^&igX=d;iMt845*h=8$h@U=qSjLk)"<915h<!RE&9!9PFN&lD+l,0H9D7(FI57(G7?LjVlK&c&qB,4aD5M<G>,1l5n^96ceJ%Z[YbQ(r]hT*pHi)D^ig:QoIqn6ssr@YT_*RI?EB_/+'e[j@,"tbC[B_n=?d+Y8bm-a;LcOn7kOt;XR=4Ok6PQ^#ssqXDlEZA%]#Q%0AhtPTg'/*g=Z1;`-?P4Y1`J&R,'Yi)V3`3O4f%nc=SH<&@EkB(i7K!9.V!M]2RJW2(2Y<o=0L*bELB\YHLG#B;t8'DO?c(*KZ&'%[#NSS8rdF*?:;KTN>?>SoEpJ\ktQBm=4KD]27*F@Wnff<!uS^DKe$O.B^;_83">p4^Dr=.GTT<]M"@g5KgOL-6+">3Auq^;$*L3a%'=t;q\gH#dDBjQd,m0<bHN8=O<6ZO/i>sYm&JUZ'*^H`:M/"SP*e6_,";LKI%nZ5]l/<[WMBCpK"dUGf'64@h.q`DRnATS$e<_G9%!/?53#W^+bOi*+a3Qqqp*9Q+:*;Z%m*87Wf)Z&5%21-3=2"A\0kZELa,YUQgL_TO;,KC%"R+atQ4h.&GpIc_oJCLp2`YQVQ'5'W:%J<`jl]8<2tL,Q)42[ig!!"&8tAkrA:<WKYiOQ[K=dbZASV[i\49*_.^HL:#@[*[Xp8^Po-kp/*F*R?)6CtYfP,W(cMiZoef:I;qj%,c$1U,c';p,hSLD,hTWe.+mnW;5dp0p7l#_`H`^sj#fkJ\lqWD/,RmoV+Z.(blmY[FO*`TH`g:D,j=k]#3D%$+39s4d"=0]$qoC*%[f2<P/`@mVV\=3<<<(3.O$o,Z3H-O?"&S5DhM:LMX@=OW:=&)Gg!Ta<'\-^h3@HB9`]6SGT7_g]3CjV$3CpjZ3Nt6W3@LNt"CcQM%*'=LN:-Jo-`K,[S-IrMaF4?OAfrlXen\q;pa;6:qgl\nBM:kOXZ\/W``\B=r]OgBQ),M8NYc0PKfI<:qpoFS`rUsAi=Qn>q\"R#a%*_a$YUG1MmO7db%7ni,[YX_C`W7Um"R$RZe&F=DE`*eY,^[l/N1tX%4>?,Gn3EN>2An4lA`3S$iL(=L/Tif1,'ccepJ`<R"I!&8+%qRNa=OO<Ks"73+rs&9;pI!%2R#:X/'gi>bTM_od!G&2S#I^jg]IK=h>q<G&JCU"F4]fIgd;F9Wr_+;30]q"*:G2;#Sm#k`GBaH/W%$7*Q(7Db:`UkXQdUu%Usl&^LEfr3rjf\H&:fd`r^MrRpN3%ICH]/V5"ra_K,OPY#b#8$/_ZVh]DbL%A!W93i4P7`fK\?W":SQdm)%Sk<_j="Hs9PgUCK<DJiPBb%eOMrU"ZMt?1bLff0GH1XAnJ<,A/E!M:ZfD]R,6T`#jp;n6XC#*Q"rr.8ab`VC.Z-dMK6oJjc!cppq%dkhs)[n&5&`HD6kZeaYSa9.s-4b136q8s-iVG:\-mnPCtUd9QYX4P--#nP+9M'HH9ABoqW?aqB$W6B8/8+%:$T3p%Dg*4I*^/!OH%Y@d(FfA$Urp.>ShH2$(rngmKIQs:a99>oGQ4;.1,ak)A&C9#U<p`bRlS]I&Jl'_<aiM$tT9o'J?KIQFc%12Q!]fGVj0a7)i<JD/o%Rp@5P^1N4ONHGX_aFfQZ;qKJ+&fQJeno)HipH-V;%Y[HJnPrY?M/?R\TGs2ae\!"RnscY<E^!L6)HnLpON4^!L*Is=^[RKQ#^K)O%k)PN@;+J]XbRlVa0h9=K/US^O9]c`Ij$)T5l*EJ1$gDHb^5uTtljATg*:6Ai$Z)B%Po//>R\N'pk(P<r@,VHL9/a*1UMOrk3J[],%=W0XMY)kmoGsJl+iX0U`.\WX>@&d4'>Tkag>p2!NY)p1;EJ;WmR4DehPdj'BJW%Ar:X<8h^JKKSrZ.gWSp=l`!]KaIWJ!Hk\T]qd%+NNJZj\JZPMpJ[#6@dkU&D;aC/>XN6/p&8*>puqZfnH4FV&2`U,b<UGQfLIg,]u7_EZl=/);1F>`@&,X]21&qp?Y,]C=,"Js!8',%Z1YRt";u0!gTq7gP76b]ZO7?o-Cmg_P9IuQ$XK,Fk$q'-&i5(@@t3dN+PDH.V"rXa5UD7qRtHmme%NYD*>3*lH.mH5kXiB=:tg"c%09eBNdgO-tCNcDYa-p;t68Z=$Ko+R!mCFV\MG9/m6F#d@>UVMdEWi5<H$5mg!hN[G2Eh(<2VkYH`O89[U"FP3/sJ7nZ3srgAf&$4%Af"(OY1\NWY'Y>c[-a;f-uF<Ie@!&[?)SuT3-DnHl4mE_anN7_n)..Xd+`B2S3WN&m\qBM8<nmJFZH_`6DmRDZm;Yp^Ca>g?^Sn?%\KT)RT=\$3^br&8(H2e.@PH9tPXo6q7*l5a)-E7]r21.l($uqU@kcA'N&1qo0cr3h`15(OF!5;F\M5S6E_?i6])%UeYA6rCost>[%>\9FqL3e820n1P"X+H3lW3qBH.sTBhB)qQ+a-)"tqX?TEna1gl33>DYq,9kf%Y#2l^-^'pD&u8G1/OL78Z"oZG!h8Z%R<-'5(<%V%s738>D#U[%ra4mba"Mf=='MqJX\;:lOOf8Kl'!_!WHAh$6.C+;dDGhqnnB!ZgioT4TM=A)(I.kFQK_1hr8X+aa""cCRq<SFi4n._%#*2l2+oIn/WD9Q1LM2i#afUu<%JD@Jcbc,'q'lnj:)N]pMr4M>Vs."Or8X,,Vfb<=%OP(k>U#R%TR01K%=#J^SLXgE_!2tcV5+YE%epm9k7(04P-7]d]XIUO=eJU7Eq58_oqYX4*o,%AneF/H*opbC'qh)2A'?EsH@"7SY;<(9XM:bJT4BfGl%E;eT4;"LTlYlg+bP%i\%rpe1'dlP`&a+fAJeZS]ns4f&<AZ<o<]@lJm(bcXRG4$A..d,%.iK(0,rO^YDch@7r=8i-aVg)\-%qJ'r/`cYgoN*3?8&T)cLIOA=%@?M5irC&"j%Pl6Nh:\n#eR<pITfu(f^FWY'?(hff=980t+a5i+LQ!>1b+MI<eh1QU1.3mE8a<\\'g7HjMpb7Q0R@$!\'lq2etI."%I)tH4S5]'FQ9gg_,AS>"SRF(`6%hj&pk0i827e.ulqQY0b??6\J?Vdn>(No,/J-JlB8Wu"/D<3aoicC_Flp#_LY?I.Fg!VUo^L9K%>LH8i#gjY6>>3G+&QX,+r0;k*C.Y;uURCWUhD6?Ik71,8""@NMp_t_U]`XhHUK:tfhfEmqcll0TFk24Zei<qgjfdmnb*IqGffK)Q%-g*K_(O.l0rP2fs@eqg"FF&35][ro=+MX(+B'C78HR=7G`D#PcNZ#MTVlF8hUKag05;Is9\hPekRJ^)?a`^.7(1<FcN2eN^hFiGH%m@@3C^]N,"-_\q\O!WYOY)YLK?GNl'M%ln=-N:ofpJ4V7O#sSaSh.EK]-(9gRQF$._#<YhM6K`8!_fA=+n%$dG!a4pT*/>lq^IO=%,(Oqmku.l&f<4r%E%YZeL<kMsjCIoIOMlcab.2&fBj$RbYrm&uTaTrdDnQJ$2'gqu<I:-j7nW/VUGf#?e"Bsb7SO'S<3P=OR+YMi%B@n]f\eMBE6g9_TF0,?m`+X>+qF5/<k]5'$D3@@7H&#6,gC_\4a?#g\'eC=t>(>.(YLH`BNlGn,hR4LLJ""]0W##H(A,#2uI7c>Q%kk;7e7K,nOPQ3^:7^/:u#]3YtFf@i'\'#q-MI,U:cB4_J\_!g.s2@p!bH*N'UH^O.#-[7J-)iE.iXKC@elJZNp6+dDCZt5S'j=Mi%%VBk&/o=1k.\SMRDl!;i)*et;:?hAS29@RJ^gmd=pehV_,Tp8#n8.ck^CgesHfR]Vfl#uD_s)IPpXhAlnWeI+pU"Wih":qNGTr3u%8N/o_e\ZmT5=&>]8,c41*qI%pe'',7UGRs7dpLL@S131U6pFPVL5BsaEiRV3$Odb=]B"cX"t;)7!Y2nn/?@q4`Xq=!4Y(mF4QK62%?2V@eSuCuR$d6h.DPArdTVl#1Zuc*!G@W"L`QQ\pD:n^=pEG($o%GjS?O:2X<+QktZk)^`Kol"pC"&_F)a^Zoj9(3_n:RCO#U7#6%>=e:cP$h)`$*_7i%+!HS6M957km7_jOZ.+20b@]GGRTXZ,3:1nMfV\j$3A::+,Bhd)JBHS_c\rkGYuUO?_Y(f_t9]C0,\j5_1@iP%D&Jhs[Zil9eQA!%GEaCX?qK+AKi[em*4ZF&UMO)dH<o7/e$5`%$tlJFNGYYiCSm#^c\Wq\n*e`J<0$bS3JO$MS#4\gI>GQpVW-%B%,&t]\-OHkL-ID_Q1Jc8+]VDXT:n"7HRl]+tKOAsRm=X7dIeqDJDkLU=,^pmfIj2X+loe%<cTphnn&9:]D&:l][>XuWFC(@'H/rV'%n+:oOW=TW/^B0S5o6m?Vroeck`g#=dM,G+#Pt1_TRaA*Nl!gs9>CP1ZG'E_=+;<tio0Pio-b`XW/+H%2,3e*u'T=3k*]?\Aco@u?%A=]YC;1pQ]\chODYBU)^Vc*S%"hX;EA+*!S*tJ**AOs8sFS][:;:tT,0Xlf>Iij'D"X(aCl/0(@7mX/kccaD+g_$d=,d1r=!rd!t%L+N.5aS0TZS&-7\_GK4DIYI$)5DVnPC%P5UM";'a<]gKg/03<(7(Y*A*fh!"LEB*4-g&Y4KKt:6"@FZ(od\@J>ee/BQ0LG%\k#sJ%,No$!VZ0U(:JIfLEl"%WH6Yah.i_AWnQ."N:C_(40sHlgcA_*".KHrSY="S@hE@9QA=om:S'(&f[A<>$QX(5l<oohdO<7'2fCVe6%(GM<rdX)jXAIcRX1^36@jG2^*5Bs2_O[eGm^/?c/M[DZn9W.jLZQts86Ub+:+&k)K;8s\eobjL,NLt7c'1<nU:kiuRARY;-q$i7"%l]Un4P(al[O1QYD&&l![7g)KddtSolPBn*6'1/iCM#;-J]fc:ZGdR(HBj0"BMS<t+m\4Vo;TB$'-\f04"He)ZIEO0%&NomHq7Cfl%1;l@eV*qT",XDceWCOQm`nVk8/\G7H0q.*AWHe<#TZW4]jTl[12I3;F&c!GQ"4C9"p]kaBX%HjP=fY/tbu.kC:_J'H-,o2F_e-9U%Up$jTDN\6"<LZFr4k9c;_E@Q8KWUl*+?JSG@r#115!uH2It0EO#^d0k=ek;X6j9AW1>6AL9\_+[&/Vd'\LFFMc!oEmM,onQO^*Q6%=eeUg%*aRN`Hj6NA6re"M@M%:=s`e(6i4N%V!h[ZQM@;Mr[)Q/I91^@;_5.CcF,d-*S&XNq]IfZe2NnKXtXoO;(cDsKWsmH.8mB.%8/_/c^O,>0%lu!h<Gj@I*>`WZ'h4%90-5PtY-4Gf,X-r(ONsSZAaYO$*]EshC9MZF^#)@X(S&8^3L"@E;-nXDH8tesZT77CR-SeL%`1)ba%.p-m_F79+c0=28hu`ru\%#?l>ZEUfZg.rk!%%bf.srOJnUdJmUCc+C,?qMW5JLKkUeH"Fn\W*g5_p<mktFpik=id:2FS)f%\[lUTUjc79N8BRn[:^\md;.1e4SqURc&b*Pie0p1N=CMna<HVO9nm$Ua](D[Df_3$fm!eDcc#i>IoPY]J]@F/0!<a%`en-\q7DD>%JIVL=Yq<8^@/=*H5,:tDi%VaQ9+Q[>MQ$2O1(&kGa80[rX'Jp#(JB^u-sWgUip(m3`-[cNK-TqKdb"++inAJr3`M<U<ohLkrL<Y`%DU"G6/_6)g,a1+\&`sQ0A>>0t>t;rh@$$Xbl=Go,;K\WsH8\U1.Z%JV3kCDM$@'5(1dk-A4i9A9AhtlXfR<*b%lFhC2nH#@GHEoJ%=.?.4cP2G`%3:A^R51g&75J?VC!rd5c&U-N,!T!7)ACdSEOu98GcL[8dWpA'9`Nd$C.$f+pTpD'Uls>SoRt<R8P5-C(&d6M4M%/f%qDqVDmG8Ri3[@,f0'#):1$q;$BaBon;MtPfq432SjKD,NLeQZ]XmR/o[X(id"MJJu<'(a2g>>22^I7^:0&M0K@,u,;VlHpI82MaA%mrYIoO>b",bb`crThcg0'I2?Fk/t=IW_)I%P0u)B1k2lqcnV.1>ps@-1N=sg"jR*[!C&%0OYaot+l&)Oe`b*#*2B'\NL)H\bVPoB%&YDlPeS;uA6e0r[gFL`ooghSXBqs^o10?r_<E&0Wk-(]m<]uB93=F:9md7N6[&H(.UsEGt/0"r#Y:B\[jhd>_8hc^4e.#C*Ro.bT%3VE@f@oLXEoMK0'b/+/J#@9@\o9P0<En)]KM7'!<WcBS03uFeOp$INT&I:fCNW\XH3gt4LYq^#2&Fmub'0>BjCrk,sT(4t`=IfPM%Lut@6N@U]W1$HDF[705kFFh#[)lsVG3RnGL4XL2CEWdrP0\K>66Oh9WT1>tT/"u0k,LfphcRdB$dc9o*9gFkY@Q^)lMs6>7-tA\9%)3;G#HtYR]c2]sHot=*;c[KB\Tclh1_7%m]P%:Q_;a$$\c/"%I!K.9&R5RXDJd]JLRq0nBoXQCqGIkf^CcQ`h"?mnAeTfIlGi%UR%&QPlfYHQH%!\n,TY[`s[U4]:&_%N;&&;]'=&J\._.FYK1002\1AA3Y"HSreW>W@kJlS.)BDhQ4_oQQ%pPV8/:e?$osrp]b8P]#;K%,RtkK^6KPtS0kg#RBNdo&XhHJqo8T"A2Bp]GKPRb4I6CJh(EYV?,!%J(J$PuJ*(MJ6k.6@jCcfg[BkqT+'%-q`GZ\o*Ck#0<"E'q%$,A]oWC8A;&UOZ.h&`V5o`4GZ3L.W*q?;/jT"&+AQa&$be1d5^d'Ha>?*[U2aFD,qh!)(3,[l@ROf:&Sk-BCVAS%8><MoboY,L+N%>8\$>D9"+7SNfZ7[de.J_YDjrHHSsEdcb*fmH3.h.QetsIPMe9d'+Zs?d,`R$$7"B;H>J!@Rc\i,e42N3f=?l_M8\"rg/bq(W*\5%n)"0S-\r._"$$AdrDR/F3iG3+4.DDLLBHpYpQEc=-krBW)gFkJR$kH4_DM]OkjBq:";b1=AnSSGGHTCA,!RU6'^#,>HhQ!G_d#I^%(Gj?f"o']seb+(Oi^Q6>INaTo*IXeo'Y=n"1eZp$Y&QQ6.KAmi%`O3Yq%']\(&N"NQM[:/0_*56pi0dh5"(,D8XKta5qJ,N]plPi%QPrJl_2fkf(WAsgFDb$F(F&E38\C>'P.X[TE8h<Yab-O>lg?iaoHQ)t5'RU)aKlC[>:`+iHV\PqE<+UW<AAInQW1/%T56%313M>>%3\$/`*kPcT\"OTQFR.@(e*,+J)QsmBDT9G@Ed;l=2<[!E2UqF+,39Xa_:kGAP'o&JpdZD2WW3pXF#<Cl`iU+hJ3D%7cp\Jd6^8)E%i@[(;>F1Oh=?]&UV;+;N,Tl0jdKXd5*QtEV=_>j0Gj'hi/XE2B6AJ'bU5E.@S0/+^PZ[M1*]%?-&kd[$Mo@M=O8Mbo'=:lcZuh<R%#1o@:rTiR>Af6!]_L@c1OgF$_\68$'hu=h*=SWEI//Ubm&fsYu[GlaNV'g5e<#31b2*@.D!aEC595c-FNY;P+9CX*Y$K)nj+f3G6%8/t?485ps'<L+m#4!kP6?Zdsd"pD5'-)\@t9YEuH?"HllIDMq&]':^uA(^EE`3<:N/GL)4V%6^^$Bl<gI^D2h-35Y;B?j7X;<XWj%Erkl:5n/aTMN/YD=1-nkS)T!>I77pUC'd#C3SGSJ_dHJX:$.i()p)HA@H5W7)&j)XJc2bmrRi/q-R:R#p(RcmS/3?^\e$34qu/0U%<Kpr7)2%:mhapL5.Di>$@1BhHV!O/$?nl>t^gmeq$91!d6SM2,JA[<U"Yl]KcAZb)9q&)ILNRABaeE525\OhSjSQCoHOAF7/?gCE%rr\4p's,83lIZ=r&HSY.0N`Sl0JXod"7l#]3[6A,1[oNX;cK7h@0@q/B(.KL8HOk4S)WBmp3t32+Pd[W[9=sV;g7@#[t)%P(*=@2%@Udcp;?JZRne?-5\eN>Rc@n8-6gM3)*,k*7g%r$ff+EgF"R)-!=%lOD8"@!+.MI@?Fa1L-7tOlPQ#<,C_/i/mUrXt#jRBb/h5b34%bO<+*)jd&#6Qt5,Jha!sFNI."@HdnV<hqi2O@*Lh2PDY'TeTKkYYm_kW(/e6FfcK;4&8&Y6dmpT6O`t[\IPl!D/l*(BD82hp\ij#%q13B4X8E"\#I\>uo&p,-R9S9?E3'>bdVnCd,<h@m9l@:^4#+\ha^APVo#b>kSb1*0(L<K-lRAFPndua>I^XF3OE>:Z9BS3AH>o>V%B$8"RJo(9*i8BK6"m<@J1d8";M)At-P&sfiJ^c\P+S*-7/td\o245d$/oiWG=]KrAPGGjHSJa>*Ep<5;e<bK#=oLEG^OC,B9*`nM%U+R"4#3?J59S>#qq*79%cin4Si8YBIAhL)SXN]_8FHbl92Y9LR.$K>bOVE@d>cMCMbQfn3IeZ`6WNJJ(r'3G3$FL+0]RAj<^rCiC%4][A04\t;?4U\.iU%KK5?*$]("JM)p;"TJO\f:fdgYOMAUBH_iUgoCpP!:_O@EE3R6egj^SiMH+Sum,/US6i$86`,MK[QkA;:N>?%luj7mYk6<kWa+UNDR*/q.W?@uPe?25XZcg^.4`W,;u*JnSC#IOpYTLkL@A>!b:PN!.&l1t=#'G9=Z&k3@"./]qC>7mW9jP0X;F7f%ZJVjmpCrSl2=*]7AW-o>4@"Sdkqgj,q)WA8-,CA$Vol(41>\:'2-+))r8G6kK[,du)sOPt/l*)hGR]h`>fu+Np_&As+u'3bHdjO-%^QKQtBF4)UR'=*+Q6@0RT3R&gC@<#7L;Q3@75hf:(ZO&#Ep(R>$UP@N*CGYQ%FXldm"7^/9("ME9iRT8;NI3;+K98?Xj6OZ`0YI7%Y=t[k,m70Z?0,D]O7kAhXMaU\E+YfL`DaYujE]r#kTUF'dWLg)&I1QH5BNm!L\]6Qd9We,$<k^[V^5GVOT[L0iTKTi^(in*e(LuB%)*,54dNs,_n9iSV?67L1EqB+H5Ha:)OFKf>'Z9c&,b,;eiH(jB<qQKpiqNggY:?)@5%]FL$DF@=3[$(2\;GE+"gKAarWl5e14l[g%)8e\7]A:(+5)Z?=dJO8n6%L#1hhKd720];NQ+p3]$jmm!_fP;=M;2S.@:YKm'JLEE5'<0oNIU7[rVh_mCIr02D@_:.iV/:R#,kqe%0j0]^VuV4"BEci:XklF:iRIE?n^UU<Rt;B6IL%,]H<%B2!b-mW2<bl;?m)M=%*U5cOP5S7kLbEK-R&sVVYgTL"sT;"=:J6fkW,-@%?!VR[&(=q-&r\D,PDk'IaNkn3G/[NM%7b(;f*KH48l;Q@qT78ub`]UpSDK@:;I58Of!j+]B8HI\N-P0!\qd@?]qgIKY*A\n7JD^'%3Wu<h`X_SSn5T-+M!t0:3`9H-R.<H`)(V-Z(W]K@`EY/ofAQMB<;LWI]5`YqObX0(LG8DT2V8L!b,(%Q"3kE<`HYjZosk2gZUS3D%0bX'UgP%'qe=NNqpHQIk#t-E8/8tZQ#U9\C:a/-F79`cTI)H@%Cep6I@FK]<Z&4VS6JDr[*GK4]dC]KA-=&skrSWS,SVap&c5J"1%;6]u>d(>''S(ae)!<idr&JX=>MC?(s:?<IUCebAkPe91m2tYg%[ZKC'k*3@BOVps,mUUXRFtL$dniO+4k-#]o$T`2O4#;*CNJQ,C%3GJukcH;Y!^E@7D4lBIH1!ED/n&1G&H6hV^LudqUO-jI.0^]ImW-YS3(*"oedA/'\/g-nDc3S4CaR97YT_X>&(+i*q#!?fk7_g9=%0/,8akX1uM6`b4?Tj)YK0CfSQ5@ZG6!:[=iDH?`KL;LU+C^??;njNM"07/1M[*B%L#u?<mO:q3\4YD$b<%iN*F?9UL52PC`'O*gJ%M@Ek8DSHkFY3uC;WC9jJ$4"dc;V)=Fnk)):p/g?gL[<S-,<LIM4)jXJ3')HMloCg@IO@&?OWt'`/me,8@AP"^8<rqNP4n9G)I5jJ%c>0X`rQGLgQ5cNM\,K.,-4Dt[R/,K/;`"2Y:0+3J10s%tb7So80:=V;G*,W8'"lcpcO`)AN*VC'Nk3IMdqh7*9;#4A*hPrqg@])P%6s#i.O\*>+P$Q6S8.dgCcVZ'rU:M?fq@!o)'U54MDntWK0CZ4:5i.WMhqZfcqg:r2X#p==():ChR955g:VLT%bN5UX]aQ\r1Z"$]%\mA.;a:/k[*,JXn-R0XCc^+OTYd(dd%4SiFM)/'oBM2PrlX$a@.#G5=6[\.ZjGf(;K%JJ]o[_eaL/>lk7n^aWcC`_P0ij2%<Suo$%*``.N6QeLeiLR\uU*!=]$V;OuF<*EU^jbiuZ"J/U(&aDH"j:jnm%uHq9M-NoP<,N#kI*5(WkJM\N*S^!@VZi3;"%"D7irQrO,5t[%@sT$Y-rn%^^^r0:2DtjG=3aP5XKD>[C]PBHGV.?BQI8$D(DN"nD-NiX@NWOC?&=8q8Hi8.#+&l/F!H_KOX:Ln5>>haGd\_0JJY,H%_SoKR)^He`#uE%+1@[@W*-4tD!\-R9KIXDF&`PP`7@LuSi$(cg0U%%lp*gnuWY^qf*MG+F9#g2,j<LYM#"574=Q&o(T.ue@BN5rP%$ktFfo0T$LXZ+3q"e8Nu%<Z),&*m#%]"ce@:6MZ(-rr,:P,nM^nBX0u6C%Y:7?QRe_!"^NVa<;88.5e@F5-.),A0Bs`ei>NhSl@.%WH`BE:FM+-eo]*U:ptA*)8^apk]CNG8iITR9mCIo:-RtXNHnKBaG2N/bc-tlZ.naeX;JY*)]P0eNo51/1ViAVR+&BYS1KO#N+*>G%9HOR;l"Np,ff2?`O-,*4rmfHnmX2Kc48#(1V3)$fFNj.CDM]d@RAl4VCgP1timjL&NH>Ipkemeg*,.u,D8GQ)a(3%uS4%XIJEK/>%%R4\o`[GDr*\e;n'-J+i&SH>P0LGi[eI$N"jssFfb.BLlL_Y1)o4Q5t"@FenKSb;r2.IfJ0*_`W-mpGRE(,u!?V%c1N_qiK923Be%D:c2(dIl?FF[11T&aE2[q\XCJq^X;5a:=j"iU:u"?kA<tc_bG$N@&73,XlH*L5@5i#U=4m'+*oGWj&U_aJ(O7>Ru[`S#en5,g9,P%()!1,Aq=,V0J\&h/S%.>M/d;S9@I))q()!j2_?9dnbi_F,j*FY_PW"IJkX^%;[N82M4DWV5I_%uTW7>d.1nV6e!TGD9,"9IW?<pA%HJH+>&rb):=To+<eT>Z*K#Eh%r[?tOV,^-1qMhHsq52K>Jcu*Solu<#&fcfmA#=i/6Y[kn'dQnPBsXK?&krf]O.q4O:T:ZV'dT%d%=TaMEd8s4*EoZE4P>mWO`Td.2?WD6a1DM/HM&Qp>AE3QpOp\L7V,.'7<KIN,'kG0\"j*'&9e&^-=-Ug**@+-d6FH#"Z,LQl*@/mU%C4\5WP+68F0/UiLb):;)fK6VQVLlaYe,h$J8Dbdp62J?%"o79HWWocE.1J0m'KBQrb29tIEe-253;+T$QdSNkc&_Y%@irI!n&Mp;%r9Z^sqr_nte$nr'J+[1Kp:pR(s'PX#?iC"Rr3tS_iP53Wa8c,\s7u]inX':MYCHE[s5D]sr58R0Q[ekts73Y6r1>'\rS+f2qU`L[%hgbUl0E:srs71)Xq7"-<?gh?Nqkq4-oj@ad?iKcNhu<:5s3(EEjSap`rX]%u+9.,rmb@aH`6T*=~>%AI9_PrivateDataEnd