%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 005x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 311 238
%%HiResBoundingBox: 0 0 310.0859 237.3901
%%CropBox: 0 0 310.0859 237.3901
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 7484 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF537D7DFFAFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFAFFFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD08FF%A8FD047DFD19A87DFD0CA884FD0CA87DFD0BA87DFD19A87DFD0CA884FD0B%A87DA8FD07FFA9A8FFA8A8FD72FFA8AFFD0BFFA8FD73FFA8FD0BFFA8A8FD%71FFA8FD0CFFA8FD73FFA8FD0BFFA8FD72FFA8FD0CFFA8FD72FFA8A8FD0B%FFA9FD72FFA8FD0CFFA8FD72FFA8A8FD0BFFA8A8FD71FFA8FD0CFFA8FD71%FFA8A8A8FD0BFFA8A8FD6DFFA8A883FFA8FD0CFFA8FD6BFFA8A883A8A8FF%FFFFA8FD0BFFA9FD69FFAE83A8A8FD05FFA8FD08FFA8FD047DFD66FFAE83%A8A8FD08FFA8A8FD08FF527D7DA8A8FD63FFA8A8A7FD0BFF7DFD08FFFD05%A8FD61FFA8A883A8A8FD0CFFA8A8FD0BFFA8A8FD5EFFAE83AEA8FD0FFFA8%FD0CFFA8FD5DFF83A8A8FD12FFA8A8FD0BFFA8A8FD59FFA8A8A8FD15FFA8%FD0CFFA8FD57FFA8A883A8A8FD17FFA8FD0BFFA8FD56FF83A8A8FD19FFA8%FD0CFFA8FD53FFA8A883AEFD18FFA8A97EA8A8FD0BFFA9FD51FFAE83AEFD%18FFA8A9A8FFFFFFA8FD0CFFA8FD4FFF83A8A8FD15FFA9FFA8A87EA9A9FD%04FFA8A8FD0BFFA8A8FD4BFFA8A8A8FD17FFA8A9A8FD09FFA8FD0CFFA8FD%49FFA8AE83A8A8FD15FF7EA87EFD0CFFA8A8FD0BFFA8A8FD47FFA8A8A8FD%15FFA8A9A8FD0FFFA8FD05FFA8A8FD05FFA8FD45FFA8A883A8CFFD13FFA8%A97EA9A9FD11FFA8FFFFFFA87DFFFFFF7DA87DA8A8FD43FFA8A8A8FD13FF%A8A9A8A9A9FD13FFA8FD04FF7D7DA8FFA8FD047DA8FD40FFA8A883AEFD12%FFA8A97EA9A8FD16FFA8A8FFFFFFA87DA8FFA87DFF7DA8FD40FFA8A8A8FD%11FFA9A984A9A9FD19FFA8FD04FF7D7D52FD05FFA8FD3DFFA8A883FD11FF%A8A97EA9A8FD1CFFA8A8FFFFFFA859A8FD05FFA8A8FD3BFF83A8CFFD10FF%A97EA9A9FD1FFFA8FD04FF7D7EA8FD05FFA8FD39FFA8A883FD0FFFA9A97E%A9A8FD22FFA8A8FFFFFFA852FD06FFA8A8FD37FFA7AEAEFD0FFFA8A9A8FD%25FFA8FD04FF7D7D7DFD05FFA8FD35FFA8A883CFFD0EFFA9A87EA9FD28FF%A8FFFFFF7D7DA8FD05FFA8FD34FF83A8A8FD0FFF7EA9A9FD29FFA8FD04FF%A8FD07FFA8FD31FFA8A87DAEFD0EFFA8A87EA9FD2BFFA8A8FD04FF7DFD06%FFA9FD30FFA8A8A8FD0EFFAF7EA9FD04FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FD04FF7D7DA8FD05FFA8FD2EFFA883AEFD0EFFA8A9A8FD05FFFD0DA8FFA8%A8A8FFFD07A8AFA8A8A8A9FD0DA8FFA8FFFFFFA852FD06FFA8A8FD2BFFA8%A8A8FD0DFFA9A984A9FD08FFA8FD0BFF7EA8A8FD06FFA8FD04FFA8FD0EFF%AFA8FD04FFA8527DFD05FFA8FD2BFF83A8A8FD0DFF7EA8A8FD09FFA8A8FF%FFA8A9A8A9A8FFFFFFA87D7DA87D7D527EA8A852A8527D5384FD047DA8FD%09FFA8FFA8FFFFFFA87DA8FD05FFA8A8FD28FFAEA7FD0DFFA8A9A8FD0DFF%A8FFA9A9A8FFA8FD05FF84FD047DA87D7D527D7D527DA8FD047DA8A8FD08%FFA8FFA8FD04FF7D7DA8FFA884A8A8A8FD27FFA8A8A8FD0BFFA9A97EA9A8%FD0DFFA8A8FD0BFFA8A8FFA8FFA8FFA87EA8A87DA87DFD04A8FFA8FD09FF%A8FFA8FFFFFFA87DFFFFFF7D7D7DA8A8FD24FFAE83AEFD0CFFA8A9A8FD11%FFA8FD28FFA884FD04FF527DA8FFFD057DFD23FFA8A883FD0BFFA8A87EA9%FD12FFA8A8FD12FFA8FD05FFA8FD09FFA8FD05FFA8A8A8FD04FFA8FFFFFF%A9FD25FFA8A8A8FD0BFFA8A9A9FD15FFA8FD0BFF52A852FFA8FF7DA8A8A8%7DFF7D7DA8FFA8A8A8FFA87D7DFFA8FF7DA8FFAFA8FD04FFA8A8A8FD05FF%A8FD21FF83A8FD0AFFA8A87EFD17FFA8FFFFCF83FD04A8FFFFFFA87D287D%7D7D527D5259597DFF7D7D7EFD047D52A852A8597D597D52A8A8FFA8FFFF%FFA852A8FD05FFA8A8FD1EFFA883FD0BFF7EA9A9FD19FFA8FD0BFF7DA87E%A87DA87DA87DA87DFF7DFFA87D7DFFFD04A87DA87DFD04A8FFA8FD04FFA8%A884FD05FFA8FD1DFFA8A8A8FD09FFA8A87EFD1BFFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8%FFA8A8A8FFA8FFFFFFA87DA8FD05FFA8A8FD1BFF83A8FD0AFF7EA9FD1EFF%A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8FFA8A8A8A9A8A8A8A9%A8A8A8AFA8A8A8AFA8A8A8FFA8FD04FFA87DA8FD05FFA8FD1AFFAE83AEFD%08FFA8A9A8FD4BFFA8FFFFFFA87DFD06FFA8FD19FFA8A7FD09FF84A9A9FD%4BFFA8FD04FF7D527DFD05FFA8FD17FFA8A7A8FD08FFA87EFD4EFFA8A8FF%FFFFA87DA8FD05FFA9FD16FFA8A8FD08FFA9A9A8FD4FFFA8FD04FF7D7EA8%FD05FFA8FD15FF83A8FD07FFA97EA9FD51FFA8A8FFFFFFA852A8FD05FFA8%A8FD13FF83FD07FFA9A9A8FD53FFA8FD04FF7D7D7DFD05FFA8FD12FFA883%FD07FFA8A8A8FD54FFA8A8FFFFFFA87DFFFFFFA8FFA8A8FD11FFA8A8FD07%FF7EA9FD56FFA8FD04FF7D7DA8FFA87D7E7D7DA8FD0EFFA883A8FD05FFA9%A87EFD58FFA8A8FFFFFF7D7EA8FFFF7DA87DA8A8FD0DFFA8A8FD06FFA8A9%A9FD59FFA8FD04FFA8FFFFFFA8FFA8FFA8FD0DFF83A8FD05FFAF7EA9FD5B%FFA8A8FD0BFFA9FD0CFF83FD06FFA9A8FD5DFFA8FD0CFFA8FD0BFF83FD05%FFA8A8A8FD5EFFA8A8FD0BFFA8A8FD09FF83FD05FF7EA9FD60FFA8FD0CFF%A8FD09FF7DFD04FFA97EA9FD61FFA8A8FD0BFFA8A8FD07FF83FFFFFFA9A9%A8FD63FFA8FD0CFFA8FD07FF83FFFFFFA884A8FD65FFA8FD0BFFA8FD06FF%7DFFFFFFA8A9FD66FFA8FD0CFFA8FD05FF83FFFFFF7EA8FD67FFA8A8FD0B%FFA9FD04FF83FFFFFF84A9FD68FFA8FD0CFFA8FFFFAE7DFFFFFF7EA9FD69%FFA8A8FD0BFFA8A8FF83FFFFFF7EFD6BFFA8FD08FFA8A8A8AFA8A87DFFFF%A97EFD6DFFA8FD08FF7DA87D7D7DFFFFA97EFD6DFFA8FD08FFA8FD047DFF%FFA97EFD6EFFA8A8FD08FFA8FFA8A8FFA984FD6FFFA8FD0CFF8484A8FD70%FFA8A8FD0BFFA8A8FD71FFA8FD0CFFA8FD72FFA8A8FD0BFFA8A8FD71FFA8%FD0CFFA8FD72FFA8A8FD0BFFA8A8FD71FFA8FD0CFFA8FD73FFA8FD0BFFA8%FD72FFA8FD0CFFA8FD72FFA8A8FD0BFFA9FD72FFA8FD0CFFA8FD72FFA8A8%FD0AFFA8A8FD72FFA8FD0AFF7D7D7DA8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A87DFFA8A8A8FFA8A8A8FFA8A9FD05A8FFA8A8A8FF%FD04A87DFFA8FFA8A8A8FFA8A8A8FF7DA8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A87DFFA8A8A8FFA8A8A8FFA8AFFD05A8FFA8A8A8%FFA8A8A87DA8FD0AFF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8AFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A8A8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A9A8FFA8FD0AFF7D7D84A87DA8FD07FFA87D847DA8A8FD07FF7DA87D%A87DA8FD07FF7DA8847D7DA8FD06FF7D7DA87DA87DFD07FF7DA87EA87DA8%FD07FFA87D847DA8A8FD07FF53A87DA87DA8FD06FFA87D7DA87D7DA8FD05%FFFD04A8FD047DFD07FF7DA87D7D7DFD07FFFD047D52A8FD07FF7E527D52%7D7DFD06FFA828FD047DA8FD06FFA8FD057DA8FD06FF7D52FD047DFD07FF%FD047D52A8FD06FFA852527D527D7DFD06FFA852FD047DA8FD06FF7DA853%7D7D7D52FD06FFA87D7DA87DA8FD07FF7D84FD04A8FD07FF7DA87DA87DA8%FD06FFA87E7D7D847DA8FD06FFA97DA87DA87DFD07FF84A87DA87DA8FD07%FFFD06A8FD07FF7DA87DA87DFD07FFA87EA87DA87DA8FD05FFA87DA8847D%A8A87DFD45FFA8FD6FFFA852A8A8FFFD047DA8847DA8FFA87D7DA97D7D7D%A8A87DA87DAFFD65FFA852597D7D7D527E527D527D7EFF527D7DFF7D7D53%7D537D7D7DA8FD66FFA8A87DFD08A8FFFFA8A8AFFFFD05A859A87DA9FD2F%FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T17:20:06+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T17:20:07+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T17:20:07+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>196</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q841z8tdS1G/1i8iS&#xA;zikv5oJLUGQlY5IBchbt0Fvxkf8A0kViflU1/eDYYVZRpFpq91BPPca1dBjdXUaRxx2gjRIrmSON&#xA;V5QM2yKPtMcCo79FX3/V5vP+As/+yfFXfoq+/wCrzef8BZ/9k+Kqa6TqvruTrV16BVQi8LTkHBbm&#xA;Sfq/QjjTFVT9FX3/AFebz/gLP/snxV36Kvv+rzef8BZ/9k+KqbaTqvroRrV16AVg68LTkXJXgQfq&#xA;/QDlXFVT9FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ/wDZPiqnPpOqlAIdaulfkhJZLQjgGBcf7z9S&#xA;tQPfFVT9FX3/AFebz/gLP/snxV36Kvv+rzef8BZ/9k+Ku/RV9/1ebz/gLP8A7J8VU7fSdVEEYn1q&#xA;6acKolZUtApenxEA2/SuKqn6Kvv+rzef8BZ/9k+Ku/RV9/1ebz/gLP8A7J8VU4NJ1UIRNrV0z8nI&#xA;KpaAcCxKD/efqFoD74qqfoq+/wCrzef8BZ/9k+Ku/RV9/wBXm8/4Cz/7J8VU10nVfXcnWrr0CqhF&#xA;4WnIOC3Mk/V+hHGmKqn6Kvv+rzef8BZ/9k+Ku/RV9/1ebz/gLP8A7J8VU20nVfXQjWrr0ArB14Wn&#xA;IuSvAg/V+gHKuKqn6Kvv+rzef8BZ/wDZPirv0Vff9Xm8/wCAs/8AsnxVTn0nVSgEOtXSvyQksloR&#xA;wDAuP95+pWoHviqp+ir7/q83n/AWf/ZPirv0Vff9Xm8/4Cz/AOyfFUJq2maummXb22uXcVwkLtC5&#xA;jsyA6qStQbc7V64qmthJJJY20kjcpHiRnbYVJUEnagxVXxV2KpdoH+8Mv/MZe/8AUZLiqY4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtT/wCObd/8YZP+&#xA;InFXaZ/xzbT/AIwx/wDERiqJxV2KpdoH+8Mv/MZe/wDUZLiqY4q7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqluu6lYWlhcR3E6JLLDJ6UNayP8JHwIKs30DA&#xA;SAgyAROmf8c20/4wx/8AERhSicVYzffmJ5asZr6C6a4SbT5FiuI1glkajJLL6gCBqoI7aRyfBfda&#xA;qpp5fINhKRuDeXv/AFFy4qmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVZPPBBE008ixRIKvI5CqB7k7DG1JQA1o3G2mW0l4D0uD+6t9+h9VxV1941fI8Xcx4r5NfU&#xA;NVut769MMZ62tlWMU/ladqyn/WT08aJ5oonm3PptjZaZei1hWNnhkMkgFXchDu7mrOfdjXCAAyEQ&#xA;ETpn/HNtP+MMf/ERhSicVYzf/l55ev7q8urv15Lm9YGaYSlG9NUmj9EFOP7v07qVN96N12WiqYeW&#xA;7W2htLh4okjeW8vPUZFCluN3KByI60GKptirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVQV3rFhbS/V2kMt1SotYVMstKbEogJUH+ZqD3wGQDEyAUS+u3dQiJpkJ/akpPcEey&#xA;qfSQ+B5P8sG58l3Pkvg0KxSZbifne3aHktzcn1GVq1rGu0cf/PNVxEQogEwyTJ2KoLWre3uNJu45&#xA;4kmj9JzwkUMtQpIND4YqqaZ/xzbT/jDH/wARGKonFXYql2gf7wy/8xl7/wBRkuKpjirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirUkiRo0kjBEUVZmNAAO5JxVLf039Y20q3a+r9m4r6&#xA;Vr8/WYHmPeJXyPF3MOK+Thpl9db6leMUP/HracoI/wDZSA+sx+TKD/LjRPNPCTzRtpZ2lpCIbWFI&#xA;Iga8I1Cip6mg74QKSBSthS7FXYqpXN1a2sLT3UyQQr9qWVgij5sxAwiJOwVKNR16GfT7lbC2uL1W&#xA;hk/fRx8IQOJ+ISymNHX/AIxlsn4ZHMgItM9M/wCObaf8YY/+IjK0onFXYql2gf7wy/8AMZe/9Rku&#xA;KpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqHvdQsrKMSXcywqx4xhj8Tt2VF+0zHsq&#xA;iuAkBBIHNCfXNXvP94rYWkJ/4+bwHkR4rbqVb/g2QjwOCyeTGyeTaaFau6y37vqMyHkrXNCinsUh&#xA;ULEpHZuPL3x4e9PD37plkmTsVdiqheX9jZRiS8uI7eMmitKwQE+Aqdz7ZKMSeQW0ENYurjbTtPlm&#xA;XtPc1tYff7YM3yIiIPjkvDA5n9P7PtRbvqGt3I/0vUBbqR/dWMYU79Q0s3qk/NVQ4eKI5D5rRVrb&#xA;QtKt5hcJbiS5H2bmdmnmHsJZS7ge1cickjt0WlXU/wDjm3f/ABhk/wCInIJdpn/HNtP+MMf/ABEY&#xA;qx3yvrmr3+u6lBeM/wBXjaVrRREI4vR9QCI8mAkLmMjlU0rXbCqUap+ZF7ZSay0bWNzaaVdpBJOj&#xA;qjKvGdpohHLNH60sIiTlwO5ZlVSyEYqyzy3M8lpcKYXjVby84SPxo9buU/CAxYU/ygMCptirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdiqEvdWsbN1ilk5XMgrFaxgyTOB3WNatTxboO5wGQDEyAQ9d&#xA;cvegXS7c9zxmuiPl8UMZ/wCRn0YNz5I3Pkr2WkWNpIZkQyXTDi91KxkmYeBdqmn+SNvAYREBIiAj&#xA;MLJ2KqVzdWtrC091MkEK/allYIo+bMQMIiTsFQH6ca4H+4yzmvK/ZnYehBWtAfUlozKf5o1fLPDr&#xA;6jX4/HNFuNjrV1/vXfC0jNSYLJfipX7LTyhiwp3REOPFEchfv/V/atFEWejaZaSmaGAfWWFGuZC0&#xA;sxB7GWQtIR7csjLITsVpGZBLsVdiqC1qV49Ju2SJ5m9Jx6cZQNup3+NkG3zxVU0z/jm2n/GGP/iI&#xA;xV555O0C1ufPV7q8jLb3tlcXrfVo5iZS8sjJKJwbaH1YatyhPM0HH3woeji0tA5cQxh2bmWCipYb&#xA;8q0674EoPQP94Zf+Yy9/6jJcVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUHeatZ2sghYmW7YVS0&#xA;hHOVh0rxH2Vrtyai+JwGVMTIBQ9DWL7/AHok/R1sf90QkNcMP8uX7Ke4jBPg+CiVonyRdlp9lZIy&#xA;2sKxczykYbu7fzO5qzt7sa4QAEgAIjClxIAJJoBuScVSv/EEE9RpkEupEV/ewcRBUbf38hSNt+vA&#xA;sR4Zb4RH1bfjuRbvq2v3RPr3UdhF2jswJZOn+/p14/R6P04LiOQv3/j9K7qtroWl28wuBD610vS6&#xA;uGaeYf6skhZlHstBgOSR26LSPyCXYq7FXYq7FXYqhtT/AOObd/8AGGT/AIicVdpn/HNtP+MMf/ER&#xA;irEPJOhQ6XrdxEdUsri9t7cw3kFrIxuLh+an61eo0j8ZRSmy/tnelACrOMCpdoH+8Mv/ADGXv/UZ&#xA;LiqY4q7FXYq7FXYq7FXYq7FXYq7FXYqg77VrOzdYXLS3UgrDaRDnK48Qo6L/AJTUUdzgMqYmQCFW&#xA;DXL88rqQaban/j2gIe4Yf8WTU4p7iMVHZ8FEoonyR9nYWdlGY7aIRhjycjdnb+Z2NWZvdjXCBTIA&#xA;BXwpU7m6trWFp7mZIIU+3LIwRR82agwgE7BUu/St/eCmlWjemf8Aj9uw0MXzSMj1pPb4VU9myzgA&#xA;+o/JFtjQIp2EmqzNqTjcRSALbL/q24+A07GTkw/mx8Svp2+/5rSaAACg2AypLsVdirsVdirsVdir&#xA;sVdiqG1P/jm3f/GGT/iJxV2mf8c20/4wx/8AERirBvIt/KvnLXNNMxktzPfTwDm3HkLz96PR5sIi&#xA;jSUqyJz+0vIVbCr0LAqXaB/vDL/zGXv/AFGS4qmOKuxV2KuxV2KuxV2KuxV2Koe91Czso1e5lEfN&#xA;uEa7s7sf2URas7eygnATSCQEFXWdQ+zXS7M9zxe6cEdh8UcX08j7KcG58mO58kbZadZ2SMtvHxLn&#xA;lLISWkkbpykdiWc+7HCBTIABEYUoW+1XT7HiLmYJJJ/dQqC8r0/kiQM7/wCxGSjAy5IJQn1jXb3/&#xA;AHmgXTrcjae6/eTEEfswIeK+xd6jumTqI57/AI7/AMe9d1W20KyinW6nL3t4u63VyQ7Kf+K1AWOP&#xA;/nmq4DkJFDYLSYZWlj9lpOjTtqV1eWEFzIt1MWkeBZpCqgbD4WZtugGFVvoeT/8AqzD/ALhc3/VD&#xA;J+GfL5j9aLRsGg+WZ4llTSbYK3QSWqxt1pujorD6RkCKSwbzfq9poF5qon0XTraxtrO5m0uaSwFw&#xA;Lqe3sZLtk5o8aoyekx9J+PNQSHGKqw81eV/rrwt5SAs0upbU33pWfCkGofo2STjy50E5FBSpWp7U&#xA;KqHu/OXk9Z9L9DRLOO3njju9Qe4ggHC2msdTuVVWBosivpXxctuLfSFVN/NujT27S2vle3txFHL9&#xA;b+s20XOCaG4SBlaJvRdgfUFOh3FR1GKEbF5o8r3Mogs/KQnup3QWMPpWamaN/rP7ypb93Q2MlVeh&#xA;6d6gKWWaXpXlbUtMtNRg0m1EN5DHcRBreIMFlQOtaA70OBUV/hry5/1arP8A6R4v+acVS2+07T7H&#xA;UKWVrDaiTTb4yCGNY+XFoOPLiBWnI0wqnWmf8c20/wCMMf8AxEYFYv5Dj1YXWoTahZ3tg90/1g29&#xA;wLZoA8qpJLwkjHrfDO8qqGcjjhVJNW0vz9c3GtnT4NSs4Wu6WMTX0ZWQCG5Ed1DJ9akeOP6zJE8k&#xA;DKi+mqgIx5qQrNvLa3ItLgyyI6G8vPTVEKkf6XLXkSzcqn2GKptirsVdirsVdirsVdiq2WWOKNpJ&#xA;XEcaAs7sQFAHUknpiqWDUL7UdtLX0bQ9dRmUkMP+KIiQX/12ovccxkbJ5MLJ5Iiy0i0tJDOOU944&#xA;4yXkx5ysPCuwVa78UAX2wiNJEaRuFkl91rdlDObWLnd3w62lsOcgrSnM1CR9esjKMmMZIvkEWpC3&#xA;129H+lTrp0B6wWp9SYinRp3XivuESo7PkriOW/v/AFfj3Lui7HStPseRtoQkkn97MxLyvT+eVyzv&#xA;/sjkJTMuagIrIpdirsVS3RP+P/8A5jJv4YqmWKuxVh2s6t+V9vqerPq0Vj+k7Zbe11aSW09SZk1F&#xA;fRhiZ/TZpVlX4CASAv2qDFU5ceT0juOY09Y7eUi65egBHNLN659Sv2Xef95vuX+LriqUqPyzt7F9&#xA;UjsNNjW7iivpwltCJ3juEaJJZIwvqHkl06VYdHYdziqq9r+XllqK6KdKtIp7OH656aaf+4t4rkyA&#xA;yvMsXoQ+obZ68mFeO/bFUxWHyfpt8eKafZX1zcczQQRTSXRTjy7M0vpz0/mo/g2KtS+ZvKWly2+m&#xA;HULS2l5fVbayR0BV0SohCL9k8Voq7eAxVFDX9E9IyPfQRBYknkWSREZI5acGcMQVDchSuKpZrU31&#xA;qaGawuImSXTL5op6etGyF7fccGStR0NcKpzpn/HNtP8AjDH/AMRGBWHeVG1D/GuqCfVLu7hZr5xY&#xA;TLIEtv8ASIkjDkyPHRkTlb8EWqFidycKs6wKl2gf7wy/8xl7/wBRkuKpjirsVdirsVdirsVQF5q8&#xA;cU5tLWNry/ABNvHsEBFQ0zn4Y1Pvuf2QciZMTLp1U4tJkuJFuNWkFzIpDR2q1FtER0IQ/wB4w/mf&#xA;vuoXHh70cN80zyTNLZ9dtRO9rZo9/ex7SQ24BVDvtLKSI4zt0ZuXgDlgxmrOwRamdN1S+H+5K6+r&#xA;wk/7x2LugpX9u4+CVv8AYBPA1w8cRyHz/V/atJja2draQLBawpBCv2Y41CqK7nYeOVykSbKVXArs&#xA;VdirsVdiqQ2t7bW51G1u4LqktzKfgtbmRWRwNw8cbKa+xxKFOnln/livP+kS/wD+qeR4AjhCNg1j&#xA;S4IlhigvFjT7K/Urw0794skAkMO1/wAmeWda1a61a4a/W9mlWWBlsbvjHSGKEh19P95tDVa/ZLHC&#xA;qFfyNpQkaWK8vFljl52fPSrh0VD9a5CdOA+sN/p0lGalCFNK1qqpJ+XuiIzFby/blDBGWew1BmDw&#xA;QQ2/JBURBWS3HwlCa/tUAGKsh1XRvLeqatqWpXkFzJNqGmxaXG5025aS3WM3JaSKRoSVZxeUNP5R&#xA;gSlzeWbG5kuLnVLu6vb+4FwDc/om5TgbhbNQyLwbjwGnrTfv7YVcvlqyRbVI7m4CWN3Lc2hbSLkv&#xA;6dwJRNHK/Eeox9c8ZKChANDvihCHyHojSHndXrwfAVjOl3PIuHtnl9R/Tq6OLJQqHZa96Ciqe6bY&#xA;QWUcltai4e3jg1icyTW01sqG/vFukiX1FUUQMVWnZe2KWVaZ/wAc20/4wx/8RGBWA+SfrEf5ia6k&#xA;lnKkU/1uWG9mjAd1W8CFfUC7py5CMcz8K9BhQ9HwJS7QP94Zf+Yy9/6jJcVTHFXYq7FXYqp3FxBb&#xA;wvPcSLFDGOUkjkKqgdyTtiSgmktDajqv2PU0/TT+0QUuph7A7woff4/9TqYbn3Mdz5BMLSztbOAQ&#xA;W0SxRAk0Xux6sx6sx7k7nJAUyApD32sWtrL9WRXur4gMtlAA0vEmgZqkLGv+U5A+nLI4yd+QUlD/&#xA;AKN1C/8Ai1ab04D0061dlT/nrMODy/IcV7EN1yXGI/T81pM4LeC3hSG3jWGGMUSKNQqqPAKNhlZJ&#xA;O5SvwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtT/45t3/xhk/4icVdpn/HNtP+MMf/&#xA;ABEYqwH8v7UL5t1N7Yx/U4Rdp6Q9d3jNxcrcJyeavB2DESIDT4VI70JQzSfzP5etzcCXUIFNpKsF&#xA;yOYJjlcclRgK0YjemBK7QP8AeGX/AJjL3/qMlxVMcVdirsVQeoapBZlIgrT3ctfQtIqGR6dTuQFU&#xA;d2YgDxwGVMTKlC30uaedLzVWWWdGD29qhJggI6EVp6kg/wB+MP8AVC74AO9Aj1KKvtRsrGNXupeH&#xA;M8YkALyO38scahnc+yg5ZGBlyZEoHjrOpj4+WlWLD7AKm8cEd2HJIR/q8m91OT9Mf6R+z9q7lH2W&#xA;n2djEYrWIRKxLORUs7HqzsaszHuzGuQlInmmkRkVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVQ2p/wDHNu/+MMn/ABE4q7TP+Obaf8YY/wDiIxVI/LXkqLQ7iCZb17n6taGyjDRQxlkL&#xA;I3ORo1UyPWPq38zeOKobWfIUmpzaq8moKE1N4X4tbq5hMCFEaJuYpIA1Vfsd8Kpt5XtUgsJuLyOz&#xA;Xd2GaSR3rxupRUBiVWvfiBXAqcYq7FUsuNQurieSz0tVMkZ43F7ICYYT3UAEGST/ACQaD9ojoYk9&#xA;zEnoFey060sEkl5F5pPiubyYgyPx7u2wAHZRRR2AwiKiNIT9K3mo/BoyL9XOx1SYEw9afuUBDTf6&#xA;2yeDHpl3AI/V8vxyTfcibDSLa0ka4Je4vZBxlvJiGlYVrxFAFRK/sIAvtkZTJ26KAjsgl2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBa1Ak+k3cblwvpOaxu8bbKT9pCpxVU0z/&#xA;AI5tp/xhj/4iMVROKuxVLtA/3hl/5jL3/qMlxVMcVSq6uLvUJ2s9Pk9G3jbjfXy/aBH2oYNiOfZ2&#xA;/Y6D4vsxJvYMCSdg3Lf2enBNNsLdri6RAY7KD9lTWjSufhjUmvxMatvTkcthj2vkGXLZaujTXjCb&#xA;WpFuaHlHYIP9Fj8OQIrMw/mfbuFU5LxK+n59f2LXem2VJdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVQ2p/8c27/wCMMn/ETirtM/45tp/xhj/4iMVROKuxVLtA/wB4Zf8A&#xA;mMvf+oyXFVGeaXVy9rYzNFYoxS7vozRnKmjQwMOh7PIPs9F+KpWB35MCeLYLTcOx/ROhIkMdsBFc&#xA;XYUGK3AA/dxr0eWnbovVuytfGAiLPwH46J8gmGnada2Fv6Nup+Ji8sjHlJJI32pJGO7Madf4ZGUz&#xA;I2UgInIpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqG1P/jm3f8A&#xA;xhk/4icVdpn/ABzbT/jDH/xEYqicVYtq3npdMN4k2mzSS2119WiijeMmVVtHvWkBYqq/uYXoGO5o&#xA;Nq4qt0K5k1i1uLWETW+mpdXbXF0VeIzrJcysI4GNPhp9txuOg33WJBOzA2duiOid9SjWz0r/AEPR&#xA;YR6bXcQ4NIqinp2lKcUFKGTw+x/Mt4iIc+fd+v8AV80jy5Jxa2ttaW8dtbRLDBEOMcSABQPYDKzI&#xA;k2WSrgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBa1OkGk3c&#xA;jhyvpOKRo8jbqR9lAxxVU0z/AI5tp/xhj/4iMVROKpTdeUvLV21y11psE5vHWS6MiBvUZAQpavsS&#xA;Plt0xVL9K0+61GK4gu6R6RHeXgFspq1z/pUhPqntEK09P9rv8Pwm0SERt9X3Iq2SqqqoVQAoFABs&#xA;ABlSW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqG1P/jm&#xA;3f8Axhk/4icVdpn/ABzbT/jDH/xEYqicVdiqXaB/vDL/AMxl7/1GS4qmOKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KobU/+Obd/8YZP+InFXaZ/xzbT/jDH&#xA;/wARGKonFXYql2gf7wy/8xl7/wBRkuKpjirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdiqG1P/AI5t3/xhk/4icVdpn/HNtP8AjDH/AMRGKonFWK/mJr15o2k2&#xA;s9lcNFdS3SxR28SF5rkmNytvEfQu1RpHCgMyce1RUYqhdO81LZR3ML3ekSRrqFzFHIdQZH5z3Ekq&#xA;xOggYK6qeLUYioO+2FWR+v5j/wCWGz/6S5f+ybAqhfarrFjayXd3bWUNvEAZJGu5aCpAHS18TiqV&#xA;jzmfWlc3WkNAttFchBqDEiNz/eVFvuriWLj8x/MMKptbahrdzbxXNtbWM1vOiyQzR3sjI6OOSsrC&#xA;2oQQag4FVGufMKqWayswoFSfrcvQf9G2KpLH50M1xaelcaV6dyZYI4WvpA7zIUNBytgRxDb7ftL4&#xA;ipVMNL16/wBVtBd6bHp95aklRNDfSOtR1FRbYFRfr+Y/+WGz/wCkuX/smxVKNU82z2X1iOefSrSa&#xA;ya3a8E1+4MaTMSocG3HH1Ejfj8q9sVRVl5hvb65urWzXTri4smC3UUd87NGWrTkBbbVoR8wR1BxV&#xA;G+v5j/5YbP8A6S5f+ybFUvuvM9xaXj2VyNNhuo4PrckT30ilIBz/AHrVtvhT90+5/lPhiqhpnmu4&#xA;uvqVqk2lXV9cwCWNY75wZQvJXZU+r1HxRvt/kt/KaKpv6/mP/lhs/wDpLl/7JsVQmoa5qOnLE19F&#xA;YW4nkEMAe9kBeRqkKo+rVJoCdu2+KpfD51CVjmu9IeU3T2i01Bh+9LEpDT6v9oLQH3wqnfr+Y/8A&#xA;lhs/+kuX/smwKo3mp6zZ2z3N1a2UUEYBeRruWgqaf8s3icVSiLzurySyrd6Q9sLaK5VVv2qI3P8A&#xA;eV+r7h/ViAHuP5hhVOLbUNbubeK5traxmt50WSGaO9kZHRxyVlYW1CCDUHAqobnzEASbKzAG5JvJ&#xA;f+ybFUjg87rcz2jW93pDw3Xqxwxi/flLInBqqfq/RVb6eS+IwqmWm65qOqWou9Oj0+7tiSomhvpH&#xA;Wo6iotsCov1/Mf8Ayw2f/SXL/wBk2KpJfedPQW5VrrSLd7GWNLwyX7fu6v8AErVt9iVVl9iD4HCq&#xA;OsvMN5fXV1a2a6dcXNkVW7ijvnZoy1acgLbvxI+YI7YFRvr+Y/8Alhs/+kuX/smxVINa81z/AKK1&#xA;FVm0i3eJnsZZZ9QdUiuGQni/+jdVX4iPAV6YVTK382eV7S1+r3Gr2aS2LR2d3WZQEn4sOBJp/vp/&#xA;+Bav2TQKn2Kpbr+k3GqWcVvDdfVDHc29yZPTElfq0qzKtCVpV41qfDFWMy/lVp0pkLahc/vOUIFI&#xA;6CzkMrNb/Z61uHpJ9rp4bm1ZxgVA65YXeoaTc2Vpevp89wnBbyJQzxgkcioNNytQD26jFWLj8rrB&#xA;X5x3jwlDbzW8UMUawxXVsLUJKqEMePHToRw5U+13OyrKtG0uDSdJs9MgZpIrOFIUkkoXYIKcmoAK&#xA;nrsKYqi2BKkA8SRsfDFWDp+VdiWLTahMwuLg3F/HGiIkp9WCZFUHm0YWS1VvhbereIobVkPljy6m&#xA;hWMtuLl7uSaRZJZ5FRCfThjt0HFAqikUCA+J374FTjFWD3v5VadNqupanBqV1BdamUdyfTkCMouk&#xA;Yjmu4MV+6KG+yAKdAMVTjy35NtNBu7ia3uJZYpFZLeCQLSJJJ5LmQcgAz8pZmNW6Cg+aqNvvM2h2&#xA;Gpw6Xd3Qiv7hEkhgKuSyyTpbKQQCP72VV67Vr03xVjXm7SvJ+p6hHqGo65aaes1pLZiRZLeKaVHg&#xA;k2M7mrxol4JRHTjy4t3xVCaPpnlC01yTUG8xxyXOkv8AW9SSR7eKNprlJ5UuT0KxFNXYLQ8T8O9Q&#xA;eRVmg8waCUuXGpWpSyVJLxvXjpCkgqjSnl8AYCqluuBWJ+bpPJnmOJpZtUKDy9PD6tzbIZuMl+ir&#xA;FHFxV+UriVPTMdWDMtPDCqV2vljybcTSqvmF4p4po7CW3uBHbyrDMizx2RimVHEjJIKNTl26g4oZ&#xA;9F5l8uStEkWq2cjTSGCFVuImLygAmNQG3ejD4RvgSr6pZyXumXdlFO1rJcwyQrcxgF4zIpXmlduS&#xA;1qK98VYxcfllpb3ck9tdS2sYaCa0tkWMxw3FqLRY5BVeTKF06EcCafa8RRVkujaXBpOk2emQM0kV&#xA;nCkKSSULsEFOTUAFT12FMVRUsYlieMkqHUqSOoqKbYqwHT/ye0qztY7UahcNbclNzEFjAkSMwvGo&#xA;JDMlHtlYkHcluxABtWU+WfLsehWL2y3El3JLIJJZ5AiklYkhT4UCqKRwqPnvgVN8VYVffldYXWoX&#xA;+orf3Fvd3bs0JjoY4VkWVZgsUnNKyi5fkRQcqNStSxtU18ueTrTQru4mt7iWWGRWS3gk40iWSeS5&#xA;k+IDk5aWZjVugoPmFZBirD9W/Lz9KT6lJPqckY1C4+sARRRgx1s3sHUF+fKtvKRWmzb+2Koe7/Kv&#xA;T7kXKnUblFnaVUAEZ4W9x9b9aH4lPLl+kZaOdx8PWh5FWcYFdirsVdirsVdirsVdirsVdirsVdir&#xA;sVYN52/wb/iPSP0x9Z/Sn1rT/wBG/V/9+/Wm9Kvfhy5erXbj70wqx3Sf8B/VrP1f0p/vVafU/rf1&#xA;fnx+saL9Up6W3pf7xdfi48+fx4FS+5/5Vxxm9T9Lej6Fn9Tr9U4et6Gl8PS5/wC7PS+p8/X/AHfX&#xA;j+1hVldl/hT/AAI/1D619R+s6f6PofVPW+tVtPqfpcf9E+36P/Ff+wxVD6T/AIQ/wNr36I+ufUPU&#xA;tfr/AD+pepz/AEfZceP17/ROP1f0ufqfDXlTtgVjsH/Ks+Nv6X6S9H14PT9b6n6frfo+15/70fD/&#xA;ALzfVuVPh6el+3hVU8lf4a5eW6/pT9L/ALmnD6l04Q9fT/0j6rX7XHen97txxQ9mwJdirsVdirsV&#xA;dirsVdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:9417B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9417B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9417B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T17:20:07+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -237.39 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 237.39 li
310.086 237.39 li
310.086 0 li
cp
clp
[1 0 0 1 0 0 ]ct
21.3931 218.835 mo
300.393 218.835 li
300.393 2.83545 li
21.3931 2.83545 li
21.3931 218.835 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
21.3931 218.835 mo
300.393 218.835 li
300.393 2.83545 li
21.3931 2.83545 li
21.3931 218.835 li
cp
clp
.625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
21.3931 190.93 mo
52.3931 164.176 li
83.3931 145.272 li
114.393 127.678 li
145.393 112.878 li
176.393 99.4209 li
207.393 85.3589 li
238.393 74.6694 li
269.393 63.9038 li
300.393 54.4619 li
.884 .769 0 0 cmyk
@
21.3931 182.835 mo
52.3931 153.012 li
83.3931 130.128 li
114.393 110.835 li
145.393 93.8389 li
176.393 78.4727 li
207.393 64.3413 li
238.393 51.189 li
269.393 38.8354 li
300.393 27.1514 li
.873 .242 1 .129 cmyk
@
grestore
21.3931 218.835 mo
21.3931 216.335 li
21.3931 218.835 li
cp
0 0 0 1 cmyk
f
.3125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
21.3931 218.835 mo
21.3931 216.335 li
@
21.3931 5.33594 mo
21.3931 2.83594 li
21.3931 5.33594 li
cp
f
21.3931 2.83545 mo
21.3931 5.33545 li
@
15.8188 226.279 mo
17.0264 226.279 li
17.0264 222.109 li
15.7139 222.372 li
15.7139 221.697 li
17.019 221.434 li
17.7612 221.434 li
17.7612 226.279 li
18.9688 226.279 li
18.9688 226.902 li
15.8188 226.902 li
15.8188 226.279 li
cp
f
22.0444 221.921 mo
21.6616 221.921 21.377 222.109 21.1816 222.484 cv
20.9868 222.859 20.897 223.421 20.897 224.171 cv
20.897 224.921 20.9868 225.484 21.1816 225.859 cv
21.377 226.234 21.6616 226.421 22.0444 226.421 cv
22.4268 226.421 22.7119 226.234 22.9067 225.859 cv
23.0942 225.484 23.1919 224.921 23.1919 224.171 cv
23.1919 223.421 23.0942 222.859 22.9067 222.484 cv
22.7119 222.109 22.4268 221.921 22.0444 221.921 cv
22.0444 221.337 mo
22.6519 221.337 23.1167 221.584 23.4468 222.064 cv
23.769 222.552 23.9341 223.257 23.9341 224.171 cv
23.9341 225.095 23.769 225.799 23.4468 226.279 cv
23.1167 226.759 22.6519 227 22.0444 227 cv
21.4292 227 20.9565 226.759 20.6343 226.279 cv
20.3115 225.799 20.1543 225.095 20.1543 224.171 cv
20.1543 223.257 20.3115 222.552 20.6343 222.064 cv
20.9565 221.584 21.4292 221.337 22.0444 221.337 cv
f
26.814 221.921 mo
26.4316 221.921 26.1465 222.109 25.9517 222.484 cv
25.7568 222.859 25.6665 223.421 25.6665 224.171 cv
25.6665 224.921 25.7568 225.484 25.9517 225.859 cv
26.1465 226.234 26.4316 226.421 26.814 226.421 cv
27.1968 226.421 27.4814 226.234 27.6768 225.859 cv
27.8643 225.484 27.9614 224.921 27.9614 224.171 cv
27.9614 223.421 27.8643 222.859 27.6768 222.484 cv
27.4814 222.109 27.1968 221.921 26.814 221.921 cv
26.814 221.337 mo
27.4219 221.337 27.8867 221.584 28.2168 222.064 cv
28.5391 222.552 28.7041 223.257 28.7041 224.171 cv
28.7041 225.095 28.5391 225.799 28.2168 226.279 cv
27.8867 226.759 27.4219 227 26.814 227 cv
26.1992 227 25.7266 226.759 25.4043 226.279 cv
25.0815 225.799 24.9243 225.095 24.9243 224.171 cv
24.9243 223.257 25.0815 222.552 25.4043 222.064 cv
25.7266 221.584 26.1992 221.337 26.814 221.337 cv
f
52.3931 218.835 mo
52.3931 216.335 li
f
52.3931 218.835 mo
52.3931 216.335 li
@
52.3931 2.83545 mo
52.3931 5.33545 li
f
52.3931 2.83545 mo
52.3931 5.33545 li
@
47.1924 226.279 mo
49.7725 226.279 li
49.7725 226.902 li
46.2998 226.902 li
46.2998 226.279 li
46.5771 225.994 46.96 225.605 47.4473 225.109 cv
47.9272 224.623 48.2349 224.308 48.3623 224.165 cv
48.6021 223.902 48.7671 223.677 48.8574 223.49 cv
48.9473 223.309 49 223.122 49 222.942 cv
49 222.657 48.8945 222.417 48.6924 222.237 cv
48.4897 222.056 48.2271 221.959 47.8975 221.959 cv
47.6646 221.959 47.4175 222.004 47.1621 222.08 cv
46.9072 222.162 46.6299 222.282 46.3374 222.447 cv
46.3374 221.697 li
46.6372 221.578 46.9146 221.487 47.1699 221.427 cv
47.4248 221.368 47.6646 221.337 47.8823 221.337 cv
48.4448 221.337 48.8945 221.48 49.2324 221.764 cv
49.5698 222.049 49.7422 222.424 49.7422 222.897 cv
49.7422 223.122 49.6973 223.339 49.6147 223.535 cv
49.5322 223.738 49.3823 223.977 49.1572 224.247 cv
49.0972 224.322 48.9023 224.525 48.5723 224.862 cv
48.2422 225.199 47.7847 225.671 47.1924 226.279 cv
f
52.9072 221.921 mo
52.5249 221.921 52.2397 222.109 52.0449 222.484 cv
51.8496 222.859 51.7598 223.421 51.7598 224.171 cv
51.7598 224.921 51.8496 225.484 52.0449 225.859 cv
52.2397 226.234 52.5249 226.421 52.9072 226.421 cv
53.29 226.421 53.5747 226.234 53.77 225.859 cv
53.9575 225.484 54.0547 224.921 54.0547 224.171 cv
54.0547 223.421 53.9575 222.859 53.77 222.484 cv
53.5747 222.109 53.29 221.921 52.9072 221.921 cv
52.9072 221.337 mo
53.5146 221.337 53.98 221.584 54.3096 222.064 cv
54.6323 222.552 54.7974 223.257 54.7974 224.171 cv
54.7974 225.095 54.6323 225.799 54.3096 226.279 cv
53.98 226.759 53.5146 227 52.9072 227 cv
52.2925 227 51.8198 226.759 51.4971 226.279 cv
51.1748 225.799 51.0171 225.095 51.0171 224.171 cv
51.0171 223.257 51.1748 222.552 51.4971 222.064 cv
51.8198 221.584 52.2925 221.337 52.9072 221.337 cv
f
57.6777 221.921 mo
57.2949 221.921 57.0098 222.109 56.8149 222.484 cv
56.6201 222.859 56.5298 223.421 56.5298 224.171 cv
56.5298 224.921 56.6201 225.484 56.8149 225.859 cv
57.0098 226.234 57.2949 226.421 57.6777 226.421 cv
58.0601 226.421 58.3452 226.234 58.54 225.859 cv
58.7275 225.484 58.8252 224.921 58.8252 224.171 cv
58.8252 223.421 58.7275 222.859 58.54 222.484 cv
58.3452 222.109 58.0601 221.921 57.6777 221.921 cv
57.6777 221.337 mo
58.2852 221.337 58.75 221.584 59.0801 222.064 cv
59.4023 222.552 59.5674 223.257 59.5674 224.171 cv
59.5674 225.095 59.4023 225.799 59.0801 226.279 cv
58.75 226.759 58.2852 227 57.6777 227 cv
57.0625 227 56.5898 226.759 56.2676 226.279 cv
55.9448 225.799 55.7876 225.095 55.7876 224.171 cv
55.7876 223.257 55.9448 222.552 56.2676 222.064 cv
56.5898 221.584 57.0625 221.337 57.6777 221.337 cv
f
83.3931 218.835 mo
83.3931 216.335 li
f
83.3931 218.835 mo
83.3931 216.335 li
@
83.3931 2.83545 mo
83.3931 5.33545 li
f
83.3931 2.83545 mo
83.3931 5.33545 li
@
79.812 223.955 mo
80.1646 224.029 80.4419 224.187 80.6367 224.427 cv
80.832 224.667 80.937 224.966 80.937 225.312 cv
80.937 225.852 80.7495 226.272 80.3818 226.564 cv
80.0068 226.857 79.4819 227 78.7993 227 cv
78.5669 227 78.3267 226.977 78.0869 226.932 cv
77.8467 226.894 77.5918 226.828 77.3369 226.737 cv
77.3369 226.025 li
77.5396 226.144 77.7642 226.234 78.0117 226.294 cv
78.252 226.355 78.5068 226.384 78.7769 226.384 cv
79.2417 226.384 79.5942 226.294 79.8345 226.115 cv
80.0742 225.935 80.2017 225.665 80.2017 225.312 cv
80.2017 224.998 80.0894 224.742 79.8643 224.562 cv
79.6392 224.382 79.3242 224.285 78.9194 224.285 cv
78.2817 224.285 li
78.2817 223.677 li
78.9492 223.677 li
79.3096 223.677 79.5869 223.609 79.7817 223.459 cv
79.9771 223.317 80.0742 223.107 80.0742 222.83 cv
80.0742 222.552 79.9692 222.334 79.7744 222.185 cv
79.5718 222.035 79.2871 221.959 78.9194 221.959 cv
78.7168 221.959 78.4995 221.982 78.2671 222.027 cv
78.0342 222.072 77.7793 222.14 77.502 222.23 cv
77.502 221.57 li
77.7793 221.495 78.042 221.435 78.2896 221.397 cv
78.5293 221.359 78.7617 221.337 78.9868 221.337 cv
79.542 221.337 79.9844 221.464 80.3145 221.719 cv
80.6445 221.974 80.8096 222.32 80.8096 222.754 cv
80.8096 223.054 80.7192 223.31 80.5469 223.519 cv
80.3745 223.73 80.127 223.879 79.812 223.955 cv
f
83.9219 221.921 mo
83.5396 221.921 83.2544 222.109 83.0596 222.484 cv
82.8643 222.859 82.7744 223.421 82.7744 224.171 cv
82.7744 224.921 82.8643 225.484 83.0596 225.859 cv
83.2544 226.234 83.5396 226.421 83.9219 226.421 cv
84.3047 226.421 84.5894 226.234 84.7847 225.859 cv
84.9722 225.484 85.0693 224.921 85.0693 224.171 cv
85.0693 223.421 84.9722 222.859 84.7847 222.484 cv
84.5894 222.109 84.3047 221.921 83.9219 221.921 cv
83.9219 221.337 mo
84.5293 221.337 84.9946 221.584 85.3247 222.064 cv
85.647 222.552 85.812 223.257 85.812 224.171 cv
85.812 225.095 85.647 225.799 85.3247 226.279 cv
84.9946 226.759 84.5293 227 83.9219 227 cv
83.3071 227 82.8345 226.759 82.5122 226.279 cv
82.1895 225.799 82.0322 225.095 82.0322 224.171 cv
82.0322 223.257 82.1895 222.552 82.5122 222.064 cv
82.8345 221.584 83.3071 221.337 83.9219 221.337 cv
f
88.6924 221.921 mo
88.3096 221.921 88.0249 222.109 87.8296 222.484 cv
87.6348 222.859 87.5449 223.421 87.5449 224.171 cv
87.5449 224.921 87.6348 225.484 87.8296 225.859 cv
88.0249 226.234 88.3096 226.421 88.6924 226.421 cv
89.0747 226.421 89.3599 226.234 89.5547 225.859 cv
89.7422 225.484 89.8398 224.921 89.8398 224.171 cv
89.8398 223.421 89.7422 222.859 89.5547 222.484 cv
89.3599 222.109 89.0747 221.921 88.6924 221.921 cv
88.6924 221.337 mo
89.2998 221.337 89.7646 221.584 90.0947 222.064 cv
90.417 222.552 90.582 223.257 90.582 224.171 cv
90.582 225.095 90.417 225.799 90.0947 226.279 cv
89.7646 226.759 89.2998 227 88.6924 227 cv
88.0771 227 87.6045 226.759 87.2822 226.279 cv
86.9595 225.799 86.8022 225.095 86.8022 224.171 cv
86.8022 223.257 86.9595 222.552 87.2822 222.064 cv
87.6045 221.584 88.0771 221.337 88.6924 221.337 cv
f
114.393 218.835 mo
114.393 216.335 li
f
114.393 218.835 mo
114.393 216.335 li
@
114.393 2.83545 mo
114.393 5.33545 li
f
114.393 2.83545 mo
114.393 5.33545 li
@
110.5 222.08 mo
108.632 224.998 li
110.5 224.998 li
110.5 222.08 li
110.304 221.435 mo
111.234 221.435 li
111.234 224.998 li
112.015 224.998 li
112.015 225.612 li
111.234 225.612 li
111.234 226.902 li
110.5 226.902 li
110.5 225.612 li
108.032 225.612 li
108.032 224.9 li
110.304 221.435 li
cp
f
114.819 221.921 mo
114.437 221.921 114.152 222.109 113.957 222.484 cv
113.762 222.859 113.672 223.421 113.672 224.171 cv
113.672 224.921 113.762 225.484 113.957 225.859 cv
114.152 226.234 114.437 226.421 114.819 226.421 cv
115.202 226.421 115.487 226.234 115.682 225.859 cv
115.87 225.484 115.967 224.921 115.967 224.171 cv
115.967 223.421 115.87 222.859 115.682 222.484 cv
115.487 222.109 115.202 221.921 114.819 221.921 cv
114.819 221.337 mo
115.427 221.337 115.892 221.584 116.222 222.064 cv
116.544 222.552 116.709 223.257 116.709 224.171 cv
116.709 225.095 116.544 225.799 116.222 226.279 cv
115.892 226.759 115.427 227 114.819 227 cv
114.205 227 113.732 226.759 113.41 226.279 cv
113.087 225.799 112.93 225.095 112.93 224.171 cv
112.93 223.257 113.087 222.552 113.41 222.064 cv
113.732 221.584 114.205 221.337 114.819 221.337 cv
f
119.589 221.921 mo
119.207 221.921 118.922 222.109 118.727 222.484 cv
118.532 222.859 118.442 223.421 118.442 224.171 cv
118.442 224.921 118.532 225.484 118.727 225.859 cv
118.922 226.234 119.207 226.421 119.589 226.421 cv
119.972 226.421 120.257 226.234 120.452 225.859 cv
120.64 225.484 120.737 224.921 120.737 224.171 cv
120.737 223.421 120.64 222.859 120.452 222.484 cv
120.257 222.109 119.972 221.921 119.589 221.921 cv
119.589 221.337 mo
120.197 221.337 120.662 221.584 120.992 222.064 cv
121.314 222.552 121.479 223.257 121.479 224.171 cv
121.479 225.095 121.314 225.799 120.992 226.279 cv
120.662 226.759 120.197 227 119.589 227 cv
118.975 227 118.502 226.759 118.18 226.279 cv
117.857 225.799 117.699 225.095 117.699 224.171 cv
117.699 223.257 117.857 222.552 118.18 222.064 cv
118.502 221.584 118.975 221.337 119.589 221.337 cv
f
145.393 218.835 mo
145.393 216.335 li
f
145.393 218.835 mo
145.393 216.335 li
@
145.393 2.83545 mo
145.393 5.33545 li
f
145.393 2.83545 mo
145.393 5.33545 li
@
139.577 221.434 mo
142.479 221.434 li
142.479 222.056 li
140.252 222.056 li
140.252 223.4 li
140.357 223.362 140.469 223.332 140.574 223.318 cv
140.679 223.302 140.792 223.287 140.897 223.287 cv
141.504 223.287 141.984 223.459 142.344 223.791 cv
142.705 224.127 142.884 224.577 142.884 225.147 cv
142.884 225.74 142.697 226.197 142.33 226.52 cv
141.962 226.841 141.444 227 140.784 227 cv
140.552 227 140.319 226.977 140.08 226.947 cv
139.839 226.91 139.6 226.857 139.344 226.775 cv
139.344 226.032 li
139.562 226.152 139.787 226.242 140.027 226.302 cv
140.259 226.362 140.507 226.384 140.77 226.384 cv
141.189 226.384 141.527 226.279 141.774 226.055 cv
142.014 225.83 142.142 225.529 142.142 225.147 cv
142.142 224.772 142.014 224.472 141.774 224.247 cv
141.527 224.023 141.189 223.91 140.77 223.91 cv
140.574 223.91 140.372 223.931 140.177 223.977 cv
139.982 224.023 139.779 224.089 139.577 224.18 cv
139.577 221.434 li
f
145.922 221.921 mo
145.54 221.921 145.255 222.109 145.06 222.484 cv
144.865 222.859 144.774 223.421 144.774 224.171 cv
144.774 224.921 144.865 225.484 145.06 225.859 cv
145.255 226.234 145.54 226.421 145.922 226.421 cv
146.305 226.421 146.59 226.234 146.785 225.859 cv
146.972 225.484 147.07 224.921 147.07 224.171 cv
147.07 223.421 146.972 222.859 146.785 222.484 cv
146.59 222.109 146.305 221.921 145.922 221.921 cv
145.922 221.337 mo
146.53 221.337 146.995 221.584 147.325 222.064 cv
147.647 222.552 147.812 223.257 147.812 224.171 cv
147.812 225.095 147.647 225.799 147.325 226.279 cv
146.995 226.759 146.53 227 145.922 227 cv
145.307 227 144.834 226.759 144.512 226.279 cv
144.189 225.799 144.032 225.095 144.032 224.171 cv
144.032 223.257 144.189 222.552 144.512 222.064 cv
144.834 221.584 145.307 221.337 145.922 221.337 cv
f
150.692 221.921 mo
150.31 221.921 150.024 222.109 149.83 222.484 cv
149.634 222.859 149.544 223.421 149.544 224.171 cv
149.544 224.921 149.634 225.484 149.83 225.859 cv
150.024 226.234 150.31 226.421 150.692 226.421 cv
151.075 226.421 151.359 226.234 151.555 225.859 cv
151.742 225.484 151.839 224.921 151.839 224.171 cv
151.839 223.421 151.742 222.859 151.555 222.484 cv
151.359 222.109 151.075 221.921 150.692 221.921 cv
150.692 221.337 mo
151.299 221.337 151.765 221.584 152.095 222.064 cv
152.417 222.552 152.582 223.257 152.582 224.171 cv
152.582 225.095 152.417 225.799 152.095 226.279 cv
151.765 226.759 151.299 227 150.692 227 cv
150.077 227 149.604 226.759 149.282 226.279 cv
148.959 225.799 148.802 225.095 148.802 224.171 cv
148.802 223.257 148.959 222.552 149.282 222.064 cv
149.604 221.584 150.077 221.337 150.692 221.337 cv
f
176.393 218.835 mo
176.393 216.335 li
f
176.393 218.835 mo
176.393 216.335 li
@
176.393 2.83545 mo
176.393 5.33545 li
f
176.393 2.83545 mo
176.393 5.33545 li
@
172.218 223.873 mo
171.888 223.873 171.625 223.992 171.43 224.217 cv
171.235 224.442 171.138 224.757 171.138 225.147 cv
171.138 225.544 171.235 225.859 171.43 226.084 cv
171.625 226.309 171.888 226.421 172.218 226.421 cv
172.548 226.421 172.81 226.309 173.005 226.084 cv
173.2 225.859 173.298 225.544 173.298 225.147 cv
173.298 224.757 173.2 224.442 173.005 224.217 cv
172.81 223.992 172.548 223.873 172.218 223.873 cv
173.688 221.554 mo
173.688 222.23 li
173.5 222.14 173.313 222.072 173.125 222.027 cv
172.93 221.982 172.742 221.958 172.563 221.958 cv
172.067 221.958 171.692 222.125 171.438 222.455 cv
171.183 222.785 171.032 223.287 171.003 223.947 cv
171.146 223.737 171.325 223.572 171.543 223.459 cv
171.76 223.347 172 223.287 172.263 223.287 cv
172.81 223.287 173.245 223.459 173.56 223.79 cv
173.875 224.12 174.04 224.578 174.04 225.147 cv
174.04 225.708 173.867 226.16 173.537 226.498 cv
173.208 226.834 172.765 227 172.218 227 cv
171.588 227 171.1 226.759 170.771 226.28 cv
170.433 225.799 170.268 225.095 170.268 224.171 cv
170.268 223.31 170.47 222.62 170.883 222.109 cv
171.287 221.599 171.843 221.337 172.532 221.337 cv
172.713 221.337 172.9 221.359 173.095 221.39 cv
173.282 221.427 173.478 221.48 173.688 221.554 cv
f
176.897 221.921 mo
176.516 221.921 176.23 222.109 176.035 222.484 cv
175.84 222.859 175.75 223.421 175.75 224.171 cv
175.75 224.921 175.84 225.484 176.035 225.859 cv
176.23 226.234 176.516 226.421 176.897 226.421 cv
177.279 226.421 177.564 226.234 177.76 225.859 cv
177.948 225.484 178.045 224.921 178.045 224.171 cv
178.045 223.421 177.948 222.859 177.76 222.484 cv
177.564 222.109 177.279 221.921 176.897 221.921 cv
176.897 221.337 mo
177.505 221.337 177.97 221.584 178.3 222.064 cv
178.623 222.552 178.787 223.257 178.787 224.171 cv
178.787 225.095 178.623 225.799 178.3 226.279 cv
177.97 226.759 177.505 227 176.897 227 cv
176.283 227 175.811 226.759 175.487 226.279 cv
175.165 225.799 175.008 225.095 175.008 224.171 cv
175.008 223.257 175.165 222.552 175.487 222.064 cv
175.811 221.584 176.283 221.337 176.897 221.337 cv
f
181.668 221.921 mo
181.285 221.921 181 222.109 180.806 222.484 cv
180.61 222.859 180.521 223.421 180.521 224.171 cv
180.521 224.921 180.61 225.484 180.806 225.859 cv
181 226.234 181.285 226.421 181.668 226.421 cv
182.05 226.421 182.335 226.234 182.53 225.859 cv
182.718 225.484 182.815 224.921 182.815 224.171 cv
182.815 223.421 182.718 222.859 182.53 222.484 cv
182.335 222.109 182.05 221.921 181.668 221.921 cv
181.668 221.337 mo
182.275 221.337 182.74 221.584 183.07 222.064 cv
183.393 222.552 183.558 223.257 183.558 224.171 cv
183.558 225.095 183.393 225.799 183.07 226.279 cv
182.74 226.759 182.275 227 181.668 227 cv
181.053 227 180.58 226.759 180.258 226.279 cv
179.936 225.799 179.777 225.095 179.777 224.171 cv
179.777 223.257 179.936 222.552 180.258 222.064 cv
180.58 221.584 181.053 221.337 181.668 221.337 cv
f
207.393 218.835 mo
207.393 216.335 li
f
207.393 218.835 mo
207.393 216.335 li
@
207.393 2.83545 mo
207.393 5.33545 li
f
207.393 2.83545 mo
207.393 5.33545 li
@
201.401 221.434 mo
204.919 221.434 li
204.919 221.75 li
202.932 226.902 li
202.159 226.902 li
204.026 222.056 li
201.401 222.056 li
201.401 221.434 li
cp
f
207.941 221.921 mo
207.559 221.921 207.274 222.109 207.079 222.484 cv
206.885 222.859 206.794 223.421 206.794 224.171 cv
206.794 224.921 206.885 225.484 207.079 225.859 cv
207.274 226.234 207.559 226.421 207.941 226.421 cv
208.324 226.421 208.609 226.234 208.804 225.859 cv
208.992 225.484 209.089 224.921 209.089 224.171 cv
209.089 223.421 208.992 222.859 208.804 222.484 cv
208.609 222.109 208.324 221.921 207.941 221.921 cv
207.941 221.337 mo
208.549 221.337 209.014 221.584 209.344 222.064 cv
209.666 222.552 209.831 223.257 209.831 224.171 cv
209.831 225.095 209.666 225.799 209.344 226.279 cv
209.014 226.759 208.549 227 207.941 227 cv
207.327 227 206.854 226.759 206.531 226.279 cv
206.21 225.799 206.052 225.095 206.052 224.171 cv
206.052 223.257 206.21 222.552 206.531 222.064 cv
206.854 221.584 207.327 221.337 207.941 221.337 cv
f
212.711 221.921 mo
212.329 221.921 212.045 222.109 211.849 222.484 cv
211.654 222.859 211.563 223.421 211.563 224.171 cv
211.563 224.921 211.654 225.484 211.849 225.859 cv
212.045 226.234 212.329 226.421 212.711 226.421 cv
213.094 226.421 213.379 226.234 213.574 225.859 cv
213.762 225.484 213.858 224.921 213.858 224.171 cv
213.858 223.421 213.762 222.859 213.574 222.484 cv
213.379 222.109 213.094 221.921 212.711 221.921 cv
212.711 221.337 mo
213.319 221.337 213.784 221.584 214.114 222.064 cv
214.437 222.552 214.602 223.257 214.602 224.171 cv
214.602 225.095 214.437 225.799 214.114 226.279 cv
213.784 226.759 213.319 227 212.711 227 cv
212.097 227 211.624 226.759 211.302 226.279 cv
210.979 225.799 210.822 225.095 210.822 224.171 cv
210.822 223.257 210.979 222.552 211.302 222.064 cv
211.624 221.584 212.097 221.337 212.711 221.337 cv
f
238.394 218.835 mo
238.394 216.335 li
f
238.394 218.835 mo
238.394 216.335 li
@
238.394 2.83545 mo
238.394 5.33545 li
f
238.394 2.83545 mo
238.394 5.33545 li
@
234.117 224.307 mo
233.766 224.307 233.487 224.404 233.285 224.591 cv
233.083 224.78 232.985 225.035 232.985 225.365 cv
232.985 225.695 233.083 225.957 233.285 226.144 cv
233.487 226.332 233.766 226.422 234.117 226.422 cv
234.463 226.422 234.74 226.332 234.942 226.137 cv
235.146 225.95 235.251 225.695 235.251 225.365 cv
235.251 225.035 235.146 224.78 234.95 224.591 cv
234.748 224.404 234.47 224.307 234.117 224.307 cv
233.375 223.992 mo
233.061 223.917 232.813 223.767 232.633 223.549 cv
232.452 223.332 232.37 223.07 232.37 222.755 cv
232.37 222.32 232.521 221.974 232.835 221.719 cv
233.143 221.464 233.57 221.337 234.117 221.337 cv
234.657 221.337 235.086 221.464 235.4 221.719 cv
235.708 221.974 235.866 222.32 235.866 222.755 cv
235.866 223.07 235.775 223.332 235.595 223.549 cv
235.415 223.767 235.175 223.917 234.86 223.992 cv
235.213 224.075 235.49 224.24 235.693 224.479 cv
235.888 224.719 235.992 225.02 235.992 225.365 cv
235.992 225.898 235.827 226.302 235.506 226.58 cv
235.175 226.865 234.718 227 234.117 227 cv
233.51 227 233.045 226.865 232.724 226.58 cv
232.4 226.302 232.242 225.898 232.242 225.365 cv
232.242 225.02 232.34 224.719 232.543 224.479 cv
232.737 224.24 233.015 224.075 233.375 223.992 cv
233.105 222.822 mo
233.105 223.107 233.188 223.332 233.368 223.49 cv
233.548 223.646 233.795 223.722 234.117 223.722 cv
234.433 223.722 234.68 223.646 234.86 223.49 cv
235.041 223.332 235.13 223.107 235.13 222.822 cv
235.13 222.537 235.041 222.32 234.86 222.162 cv
234.68 222.004 234.433 221.922 234.117 221.922 cv
233.795 221.922 233.548 222.004 233.368 222.162 cv
233.188 222.32 233.105 222.537 233.105 222.822 cv
f
238.888 221.921 mo
238.506 221.921 238.221 222.109 238.025 222.484 cv
237.831 222.859 237.74 223.421 237.74 224.171 cv
237.74 224.921 237.831 225.484 238.025 225.859 cv
238.221 226.234 238.506 226.421 238.888 226.421 cv
239.27 226.421 239.555 226.234 239.751 225.859 cv
239.938 225.484 240.035 224.921 240.035 224.171 cv
240.035 223.421 239.938 222.859 239.751 222.484 cv
239.555 222.109 239.27 221.921 238.888 221.921 cv
238.888 221.337 mo
239.495 221.337 239.961 221.584 240.29 222.064 cv
240.613 222.552 240.777 223.257 240.777 224.171 cv
240.777 225.095 240.613 225.799 240.29 226.279 cv
239.961 226.759 239.495 227 238.888 227 cv
238.273 227 237.801 226.759 237.478 226.279 cv
237.155 225.799 236.998 225.095 236.998 224.171 cv
236.998 223.257 237.155 222.552 237.478 222.064 cv
237.801 221.584 238.273 221.337 238.888 221.337 cv
f
243.658 221.921 mo
243.275 221.921 242.99 222.109 242.796 222.484 cv
242.601 222.859 242.511 223.421 242.511 224.171 cv
242.511 224.921 242.601 225.484 242.796 225.859 cv
242.99 226.234 243.275 226.421 243.658 226.421 cv
244.04 226.421 244.325 226.234 244.521 225.859 cv
244.708 225.484 244.806 224.921 244.806 224.171 cv
244.806 223.421 244.708 222.859 244.521 222.484 cv
244.325 222.109 244.04 221.921 243.658 221.921 cv
243.658 221.337 mo
244.266 221.337 244.73 221.584 245.061 222.064 cv
245.383 222.552 245.548 223.257 245.548 224.171 cv
245.548 225.095 245.383 225.799 245.061 226.279 cv
244.73 226.759 244.266 227 243.658 227 cv
243.043 227 242.57 226.759 242.248 226.279 cv
241.926 225.799 241.768 225.095 241.768 224.171 cv
241.768 223.257 241.926 222.552 242.248 222.064 cv
242.57 221.584 243.043 221.337 243.658 221.337 cv
f
269.393 218.835 mo
269.393 216.335 li
f
269.393 218.835 mo
269.393 216.335 li
@
269.393 2.83545 mo
269.393 5.33545 li
f
269.393 2.83545 mo
269.393 5.33545 li
@
263.538 226.79 mo
263.538 226.115 li
263.719 226.205 263.906 226.272 264.101 226.317 cv
264.288 226.361 264.476 226.384 264.663 226.384 cv
265.143 226.384 265.519 226.227 265.773 225.897 cv
266.027 225.567 266.179 225.072 266.224 224.397 cv
266.073 224.607 265.894 224.771 265.684 224.884 cv
265.466 224.998 265.226 225.049 264.964 225.049 cv
264.408 225.049 263.974 224.884 263.658 224.554 cv
263.343 224.224 263.186 223.775 263.186 223.197 cv
263.186 222.642 263.351 222.192 263.681 221.847 cv
264.011 221.509 264.453 221.337 265.009 221.337 cv
265.639 221.337 266.126 221.584 266.456 222.064 cv
266.786 222.552 266.958 223.257 266.958 224.171 cv
266.958 225.042 266.748 225.724 266.344 226.234 cv
265.931 226.745 265.384 227 264.693 227 cv
264.506 227 264.318 226.977 264.131 226.947 cv
263.936 226.917 263.741 226.865 263.538 226.79 cv
265.009 224.472 mo
265.338 224.472 265.601 224.359 265.796 224.134 cv
265.991 223.91 266.089 223.595 266.089 223.197 cv
266.089 222.807 265.991 222.492 265.796 222.267 cv
265.601 222.042 265.338 221.921 265.009 221.921 cv
264.679 221.921 264.416 222.042 264.221 222.267 cv
264.026 222.492 263.929 222.807 263.929 223.197 cv
263.929 223.595 264.026 223.91 264.221 224.134 cv
264.416 224.359 264.679 224.472 265.009 224.472 cv
f
269.868 221.921 mo
269.485 221.921 269.201 222.109 269.006 222.484 cv
268.811 222.859 268.721 223.421 268.721 224.171 cv
268.721 224.921 268.811 225.484 269.006 225.859 cv
269.201 226.234 269.485 226.421 269.868 226.421 cv
270.251 226.421 270.536 226.234 270.73 225.859 cv
270.918 225.484 271.016 224.921 271.016 224.171 cv
271.016 223.421 270.918 222.859 270.73 222.484 cv
270.536 222.109 270.251 221.921 269.868 221.921 cv
269.868 221.337 mo
270.476 221.337 270.94 221.584 271.271 222.064 cv
271.594 222.552 271.759 223.257 271.759 224.171 cv
271.759 225.095 271.594 225.799 271.271 226.279 cv
270.94 226.759 270.476 227 269.868 227 cv
269.253 227 268.781 226.759 268.458 226.279 cv
268.136 225.799 267.979 225.095 267.979 224.171 cv
267.979 223.257 268.136 222.552 268.458 222.064 cv
268.781 221.584 269.253 221.337 269.868 221.337 cv
f
274.639 221.921 mo
274.256 221.921 273.972 222.109 273.775 222.484 cv
273.581 222.859 273.491 223.421 273.491 224.171 cv
273.491 224.921 273.581 225.484 273.775 225.859 cv
273.972 226.234 274.256 226.421 274.639 226.421 cv
275.021 226.421 275.306 226.234 275.501 225.859 cv
275.688 225.484 275.786 224.921 275.786 224.171 cv
275.786 223.421 275.688 222.859 275.501 222.484 cv
275.306 222.109 275.021 221.921 274.639 221.921 cv
274.639 221.337 mo
275.246 221.337 275.711 221.584 276.041 222.064 cv
276.363 222.552 276.528 223.257 276.528 224.171 cv
276.528 225.095 276.363 225.799 276.041 226.279 cv
275.711 226.759 275.246 227 274.639 227 cv
274.023 227 273.551 226.759 273.229 226.279 cv
272.906 225.799 272.749 225.095 272.749 224.171 cv
272.749 223.257 272.906 222.552 273.229 222.064 cv
273.551 221.584 274.023 221.337 274.639 221.337 cv
f
300.394 218.835 mo
300.394 216.335 li
f
300.394 218.835 mo
300.394 216.335 li
@
300.394 2.83545 mo
300.394 5.33545 li
f
300.394 2.83545 mo
300.394 5.33545 li
@
292.432 226.279 mo
293.64 226.279 li
293.64 222.109 li
292.326 222.372 li
292.326 221.697 li
293.631 221.434 li
294.374 221.434 li
294.374 226.279 li
295.581 226.279 li
295.581 226.902 li
292.432 226.902 li
292.432 226.279 li
cp
f
298.656 221.921 mo
298.274 221.921 297.989 222.109 297.794 222.484 cv
297.6 222.859 297.509 223.421 297.509 224.171 cv
297.509 224.921 297.6 225.484 297.794 225.859 cv
297.989 226.234 298.274 226.421 298.656 226.421 cv
299.039 226.421 299.323 226.234 299.52 225.859 cv
299.707 225.484 299.804 224.921 299.804 224.171 cv
299.804 223.421 299.707 222.859 299.52 222.484 cv
299.323 222.109 299.039 221.921 298.656 221.921 cv
298.656 221.337 mo
299.265 221.337 299.729 221.584 300.059 222.064 cv
300.382 222.552 300.546 223.257 300.546 224.171 cv
300.546 225.095 300.382 225.799 300.059 226.279 cv
299.729 226.759 299.265 227 298.656 227 cv
298.042 227 297.569 226.759 297.246 226.279 cv
296.924 225.799 296.767 225.095 296.767 224.171 cv
296.767 223.257 296.924 222.552 297.246 222.064 cv
297.569 221.584 298.042 221.337 298.656 221.337 cv
f
303.427 221.921 mo
303.044 221.921 302.759 222.109 302.563 222.484 cv
302.369 222.859 302.279 223.421 302.279 224.171 cv
302.279 224.921 302.369 225.484 302.563 225.859 cv
302.759 226.234 303.044 226.421 303.427 226.421 cv
303.809 226.421 304.094 226.234 304.289 225.859 cv
304.477 225.484 304.574 224.921 304.574 224.171 cv
304.574 223.421 304.477 222.859 304.289 222.484 cv
304.094 222.109 303.809 221.921 303.427 221.921 cv
303.427 221.337 mo
304.034 221.337 304.499 221.584 304.828 222.064 cv
305.151 222.552 305.316 223.257 305.316 224.171 cv
305.316 225.095 305.151 225.799 304.828 226.279 cv
304.499 226.759 304.034 227 303.427 227 cv
302.812 227 302.339 226.759 302.016 226.279 cv
301.694 225.799 301.537 225.095 301.537 224.171 cv
301.537 223.257 301.694 222.552 302.016 222.064 cv
302.339 221.584 302.812 221.337 303.427 221.337 cv
f
308.196 221.921 mo
307.814 221.921 307.529 222.109 307.334 222.484 cv
307.139 222.859 307.049 223.421 307.049 224.171 cv
307.049 224.921 307.139 225.484 307.334 225.859 cv
307.529 226.234 307.814 226.421 308.196 226.421 cv
308.578 226.421 308.863 226.234 309.059 225.859 cv
309.246 225.484 309.344 224.921 309.344 224.171 cv
309.344 223.421 309.246 222.859 309.059 222.484 cv
308.863 222.109 308.578 221.921 308.196 221.921 cv
308.196 221.337 mo
308.804 221.337 309.269 221.584 309.599 222.064 cv
309.922 222.552 310.086 223.257 310.086 224.171 cv
310.086 225.095 309.922 225.799 309.599 226.279 cv
309.269 226.759 308.804 227 308.196 227 cv
307.581 227 307.109 226.759 306.786 226.279 cv
306.464 225.799 306.307 225.095 306.307 224.171 cv
306.307 223.257 306.464 222.552 306.786 222.064 cv
307.109 221.584 307.581 221.337 308.196 221.337 cv
f
130.241 230.37 mo
131.239 230.37 li
133.661 234.945 li
133.661 230.37 li
134.381 230.37 li
134.381 235.837 li
133.384 235.837 li
130.961 231.263 li
130.961 235.837 li
130.241 235.837 li
130.241 230.37 li
cp
f
135.754 234.217 mo
135.754 231.735 li
136.429 231.735 li
136.429 234.195 li
136.429 234.585 136.504 234.871 136.654 235.065 cv
136.804 235.26 137.029 235.357 137.336 235.357 cv
137.696 235.357 137.989 235.246 138.199 235.013 cv
138.409 234.78 138.514 234.464 138.514 234.06 cv
138.514 231.735 li
139.188 231.735 li
139.188 235.837 li
138.514 235.837 li
138.514 235.208 li
138.349 235.462 138.154 235.642 137.944 235.763 cv
137.726 235.875 137.479 235.935 137.194 235.935 cv
136.721 235.935 136.361 235.792 136.121 235.5 cv
135.874 235.214 135.754 234.788 135.754 234.217 cv
f
143.771 232.523 mo
143.936 232.222 144.139 232.005 144.371 231.855 cv
144.604 231.712 144.881 231.638 145.204 231.638 cv
145.624 231.638 145.954 231.788 146.186 232.087 cv
146.419 232.388 146.539 232.815 146.539 233.363 cv
146.539 235.837 li
145.864 235.837 li
145.864 233.385 li
145.864 232.996 145.789 232.703 145.654 232.507 cv
145.511 232.32 145.301 232.222 145.016 232.222 cv
144.664 232.222 144.386 232.343 144.184 232.576 cv
143.981 232.808 143.884 233.123 143.884 233.52 cv
143.884 235.837 li
143.209 235.837 li
143.209 233.385 li
143.209 232.996 143.134 232.703 142.999 232.507 cv
142.856 232.32 142.639 232.222 142.354 232.222 cv
142.009 232.222 141.731 232.343 141.529 232.576 cv
141.326 232.808 141.229 233.123 141.229 233.52 cv
141.229 235.837 li
140.554 235.837 li
140.554 231.735 li
141.229 231.735 li
141.229 232.373 li
141.379 232.125 141.566 231.937 141.784 231.818 cv
141.994 231.698 142.249 231.638 142.549 231.638 cv
142.849 231.638 143.096 231.712 143.306 231.863 cv
143.516 232.013 143.666 232.238 143.771 232.523 cv
f
150.829 233.791 mo
150.829 233.295 150.724 232.913 150.521 232.628 cv
150.311 232.343 150.034 232.201 149.681 232.201 cv
149.321 232.201 149.044 232.343 148.841 232.628 cv
148.631 232.913 148.534 233.295 148.534 233.791 cv
148.534 234.285 148.631 234.675 148.841 234.96 cv
149.044 235.245 149.321 235.38 149.681 235.38 cv
150.034 235.38 150.311 235.245 150.521 234.96 cv
150.724 234.675 150.829 234.285 150.829 233.791 cv
148.534 232.358 mo
148.669 232.117 148.849 231.937 149.066 231.818 cv
149.284 231.697 149.546 231.638 149.846 231.638 cv
150.341 231.638 150.746 231.84 151.061 232.23 cv
151.369 232.628 151.526 233.145 151.526 233.791 cv
151.526 234.435 151.369 234.96 151.061 235.349 cv
150.746 235.74 150.341 235.935 149.846 235.935 cv
149.546 235.935 149.284 235.875 149.066 235.762 cv
148.849 235.65 148.669 235.47 148.534 235.222 cv
148.534 235.837 li
147.859 235.837 li
147.859 230.137 li
148.534 230.137 li
148.534 232.358 li
f
156.154 233.618 mo
156.154 233.948 li
153.056 233.948 li
153.086 234.412 153.221 234.773 153.476 235.013 cv
153.724 235.252 154.069 235.373 154.519 235.373 cv
154.774 235.373 155.029 235.343 155.269 235.283 cv
155.509 235.222 155.756 235.125 155.996 234.99 cv
155.996 235.627 li
155.756 235.732 155.509 235.815 155.254 235.86 cv
154.999 235.906 154.736 235.935 154.481 235.935 cv
153.821 235.935 153.304 235.748 152.921 235.373 cv
152.539 234.998 152.351 234.48 152.351 233.828 cv
152.351 233.16 152.531 232.627 152.891 232.23 cv
153.251 231.839 153.746 231.638 154.361 231.638 cv
154.916 231.638 155.351 231.818 155.674 232.169 cv
155.989 232.531 156.154 233.01 156.154 233.618 cv
155.479 233.421 mo
155.471 233.055 155.366 232.763 155.171 232.537 cv
154.969 232.32 154.699 232.208 154.369 232.208 cv
153.994 232.208 153.694 232.32 153.469 232.531 cv
153.244 232.74 153.109 233.041 153.079 233.421 cv
155.479 233.421 li
f
159.634 232.365 mo
159.559 232.32 159.477 232.291 159.386 232.267 cv
159.296 232.252 159.199 232.238 159.094 232.238 cv
158.711 232.238 158.419 232.365 158.216 232.613 cv
158.006 232.861 157.909 233.212 157.909 233.677 cv
157.909 235.837 li
157.234 235.837 li
157.234 231.736 li
157.909 231.736 li
157.909 232.373 li
158.044 232.125 158.231 231.937 158.457 231.818 cv
158.682 231.698 158.959 231.638 159.288 231.638 cv
159.334 231.638 159.386 231.645 159.446 231.645 cv
159.499 231.652 159.559 231.66 159.634 231.675 cv
159.634 232.365 li
f
164.313 232.208 mo
163.954 232.208 163.669 232.35 163.458 232.635 cv
163.249 232.919 163.144 233.302 163.144 233.791 cv
163.144 234.285 163.241 234.667 163.451 234.953 cv
163.661 235.238 163.946 235.373 164.313 235.373 cv
164.674 235.373 164.959 235.238 165.169 234.953 cv
165.379 234.667 165.483 234.285 165.483 233.791 cv
165.483 233.31 165.379 232.919 165.169 232.635 cv
164.959 232.35 164.674 232.208 164.313 232.208 cv
164.313 231.638 mo
164.899 231.638 165.356 231.832 165.693 232.208 cv
166.023 232.589 166.196 233.115 166.196 233.791 cv
166.196 234.464 166.023 234.99 165.693 235.365 cv
165.356 235.748 164.899 235.935 164.313 235.935 cv
163.722 235.935 163.257 235.748 162.926 235.365 cv
162.596 234.99 162.431 234.464 162.431 233.791 cv
162.431 233.115 162.596 232.589 162.926 232.208 cv
163.257 231.832 163.722 231.638 164.313 231.638 cv
f
169.391 230.137 mo
169.391 230.7 li
168.747 230.7 li
168.506 230.7 168.334 230.752 168.243 230.851 cv
168.146 230.947 168.102 231.12 168.102 231.375 cv
168.102 231.736 li
169.211 231.736 li
169.211 232.259 li
168.102 232.259 li
168.102 235.837 li
167.426 235.837 li
167.426 232.259 li
166.781 232.259 li
166.781 231.736 li
167.426 231.736 li
167.426 231.451 li
167.426 231 167.531 230.662 167.741 230.453 cv
167.951 230.242 168.288 230.137 168.754 230.137 cv
169.391 230.137 li
f
175.646 230.55 mo
175.646 231.27 li
175.361 231.136 175.099 231.038 174.852 230.97 cv
174.596 230.91 174.356 230.873 174.131 230.873 cv
173.727 230.873 173.411 230.955 173.193 231.105 cv
172.977 231.263 172.871 231.488 172.871 231.773 cv
172.871 232.012 172.938 232.201 173.089 232.32 cv
173.231 232.447 173.509 232.544 173.914 232.621 cv
174.363 232.71 li
174.911 232.815 175.316 233.002 175.579 233.265 cv
175.842 233.535 175.976 233.887 175.976 234.33 cv
175.976 234.863 175.796 235.259 175.444 235.53 cv
175.084 235.8 174.565 235.935 173.884 235.935 cv
173.621 235.935 173.344 235.905 173.052 235.853 cv
172.759 235.8 172.458 235.718 172.151 235.597 cv
172.151 234.833 li
172.451 235.005 172.743 235.132 173.028 235.214 cv
173.314 235.305 173.599 235.342 173.884 235.342 cv
174.304 235.342 174.626 235.259 174.858 235.095 cv
175.084 234.93 175.203 234.697 175.203 234.382 cv
175.203 234.113 175.121 233.902 174.956 233.752 cv
174.792 233.603 174.521 233.49 174.146 233.416 cv
173.696 233.325 li
173.141 233.22 172.743 233.047 172.496 232.808 cv
172.248 232.575 172.128 232.253 172.128 231.833 cv
172.128 231.353 172.294 230.97 172.639 230.693 cv
172.977 230.416 173.448 230.273 174.049 230.273 cv
174.304 230.273 174.559 230.294 174.828 230.339 cv
175.091 230.384 175.361 230.46 175.646 230.55 cv
f
177.769 230.573 mo
177.769 231.735 li
179.156 231.735 li
179.156 232.26 li
177.769 232.26 li
177.769 234.488 li
177.769 234.826 177.813 235.042 177.903 235.132 cv
177.994 235.23 178.182 235.275 178.466 235.275 cv
179.156 235.275 li
179.156 235.837 li
178.466 235.837 li
177.94 235.837 177.581 235.74 177.386 235.544 cv
177.191 235.35 177.094 234.998 177.094 234.488 cv
177.094 232.26 li
176.599 232.26 li
176.599 231.735 li
177.094 231.735 li
177.094 230.573 li
177.769 230.573 li
f
183.551 233.618 mo
183.551 233.948 li
180.454 233.948 li
180.483 234.412 180.619 234.773 180.874 235.013 cv
181.121 235.252 181.466 235.373 181.916 235.373 cv
182.171 235.373 182.426 235.343 182.666 235.283 cv
182.906 235.222 183.153 235.125 183.394 234.99 cv
183.394 235.627 li
183.153 235.732 182.906 235.815 182.651 235.86 cv
182.396 235.906 182.134 235.935 181.879 235.935 cv
181.219 235.935 180.7 235.748 180.318 235.373 cv
179.937 234.998 179.749 234.48 179.749 233.828 cv
179.749 233.16 179.929 232.627 180.289 232.23 cv
180.648 231.839 181.144 231.638 181.759 231.638 cv
182.313 231.638 182.749 231.818 183.071 232.169 cv
183.386 232.531 183.551 233.01 183.551 233.618 cv
182.876 233.421 mo
182.869 233.055 182.764 232.763 182.568 232.537 cv
182.366 232.32 182.097 232.208 181.767 232.208 cv
181.392 232.208 181.091 232.32 180.866 232.531 cv
180.642 232.74 180.506 233.041 180.477 233.421 cv
182.876 233.421 li
f
185.306 235.222 mo
185.306 237.39 li
184.631 237.39 li
184.631 231.736 li
185.306 231.736 li
185.306 232.358 li
185.441 232.117 185.621 231.937 185.839 231.818 cv
186.056 231.697 186.318 231.638 186.619 231.638 cv
187.114 231.638 187.519 231.84 187.833 232.23 cv
188.141 232.628 188.299 233.145 188.299 233.791 cv
188.299 234.435 188.141 234.96 187.833 235.349 cv
187.519 235.74 187.114 235.935 186.619 235.935 cv
186.318 235.935 186.056 235.875 185.839 235.762 cv
185.621 235.65 185.441 235.47 185.306 235.222 cv
187.602 233.791 mo
187.602 233.295 187.496 232.913 187.294 232.628 cv
187.084 232.343 186.806 232.201 186.453 232.201 cv
186.094 232.201 185.815 232.343 185.613 232.628 cv
185.403 232.913 185.306 233.295 185.306 233.791 cv
185.306 234.285 185.403 234.675 185.613 234.96 cv
185.815 235.245 186.094 235.38 186.453 235.38 cv
186.806 235.38 187.084 235.245 187.294 234.96 cv
187.496 234.675 187.602 234.285 187.602 233.791 cv
f
192.034 231.855 mo
192.034 232.494 li
191.838 232.402 191.644 232.328 191.441 232.275 cv
191.231 232.23 191.021 232.201 190.804 232.201 cv
190.466 232.201 190.211 232.253 190.046 232.358 cv
189.882 232.462 189.799 232.613 189.799 232.815 cv
189.799 232.972 189.858 233.092 189.979 233.182 cv
190.099 233.273 190.339 233.363 190.698 233.437 cv
190.931 233.49 li
191.411 233.595 191.749 233.745 191.951 233.925 cv
192.146 234.113 192.251 234.375 192.251 234.706 cv
192.251 235.087 192.101 235.387 191.802 235.605 cv
191.501 235.83 191.081 235.935 190.557 235.935 cv
190.331 235.935 190.106 235.913 189.866 235.875 cv
189.626 235.837 189.379 235.777 189.116 235.687 cv
189.116 234.991 li
189.364 235.125 189.611 235.223 189.852 235.283 cv
190.092 235.35 190.331 235.38 190.571 235.38 cv
190.887 235.38 191.134 235.328 191.307 235.223 cv
191.472 235.119 191.562 234.96 191.562 234.757 cv
191.562 234.578 191.494 234.435 191.373 234.337 cv
191.254 234.24 190.983 234.142 190.563 234.053 cv
190.331 234 li
189.911 233.91 189.604 233.775 189.423 233.595 cv
189.235 233.416 189.146 233.167 189.146 232.845 cv
189.146 232.462 189.281 232.163 189.551 231.953 cv
189.821 231.742 190.211 231.637 190.721 231.637 cv
190.969 231.637 191.201 231.66 191.426 231.697 cv
191.644 231.736 191.846 231.789 192.034 231.855 cv
f
21.3931 218.835 mo
23.8931 218.835 li
f
21.3931 218.835 mo
23.8931 218.835 li
@
300.394 218.835 mo
297.894 218.835 li
f
300.394 218.835 mo
297.894 218.835 li
@
16.1582 216.048 mo
19.0605 216.048 li
19.0605 216.671 li
16.833 216.671 li
16.833 218.014 li
16.938 217.976 17.0503 217.947 17.1553 217.931 cv
17.2607 217.916 17.373 217.901 17.478 217.901 cv
18.0854 217.901 18.5654 218.074 18.9253 218.404 cv
19.2856 218.742 19.4653 219.191 19.4653 219.761 cv
19.4653 220.354 19.2778 220.811 18.9106 221.134 cv
18.543 221.457 18.0254 221.614 17.3657 221.614 cv
17.1328 221.614 16.9004 221.591 16.6606 221.561 cv
16.4204 221.523 16.1807 221.471 15.9253 221.388 cv
15.9253 220.646 li
16.1431 220.766 16.3682 220.856 16.6079 220.916 cv
16.8403 220.976 17.0879 220.999 17.3506 220.999 cv
17.7705 220.999 18.1079 220.894 18.3555 220.669 cv
18.5957 220.443 18.7231 220.144 18.7231 219.761 cv
18.7231 219.386 18.5957 219.085 18.3555 218.861 cv
18.1079 218.636 17.7705 218.523 17.3506 218.523 cv
17.1553 218.523 16.9531 218.546 16.7578 218.591 cv
16.563 218.636 16.3604 218.704 16.1582 218.794 cv
16.1582 216.048 li
f
21.3931 182.835 mo
23.8931 182.835 li
f
21.3931 182.835 mo
23.8931 182.835 li
@
300.394 182.835 mo
297.894 182.835 li
f
300.394 182.835 mo
297.894 182.835 li
@
11.5903 184.943 mo
12.7979 184.943 li
12.7979 180.772 li
11.4854 181.035 li
11.4854 180.36 li
12.7905 180.098 li
13.5327 180.098 li
13.5327 184.943 li
14.7402 184.943 li
14.7402 185.565 li
11.5903 185.565 li
11.5903 184.943 li
cp
f
17.8159 180.585 mo
17.4331 180.585 17.1484 180.773 16.9531 181.147 cv
16.7583 181.523 16.6685 182.084 16.6685 182.835 cv
16.6685 183.585 16.7583 184.147 16.9531 184.523 cv
17.1484 184.897 17.4331 185.084 17.8159 185.084 cv
18.1982 185.084 18.4834 184.897 18.6782 184.523 cv
18.8657 184.147 18.9634 183.585 18.9634 182.835 cv
18.9634 182.084 18.8657 181.523 18.6782 181.147 cv
18.4834 180.773 18.1982 180.585 17.8159 180.585 cv
17.8159 180 mo
18.4233 180 18.8882 180.248 19.2183 180.728 cv
19.5405 181.215 19.7056 181.92 19.7056 182.835 cv
19.7056 183.757 19.5405 184.462 19.2183 184.943 cv
18.8882 185.422 18.4233 185.663 17.8159 185.663 cv
17.2007 185.663 16.728 185.422 16.4058 184.943 cv
16.083 184.462 15.9258 183.757 15.9258 182.835 cv
15.9258 181.92 16.083 181.215 16.4058 180.728 cv
16.728 180.248 17.2007 180 17.8159 180 cv
f
21.3931 146.835 mo
23.8931 146.835 li
f
21.3931 146.835 mo
23.8931 146.835 li
@
300.394 146.835 mo
297.894 146.835 li
f
300.394 146.835 mo
297.894 146.835 li
@
11.7466 148.894 mo
12.9541 148.894 li
12.9541 144.724 li
11.6416 144.986 li
11.6416 144.312 li
12.9468 144.048 li
13.689 144.048 li
13.689 148.894 li
14.8965 148.894 li
14.8965 149.516 li
11.7466 149.516 li
11.7466 148.894 li
cp
f
16.397 144.048 mo
19.2993 144.048 li
19.2993 144.671 li
17.0718 144.671 li
17.0718 146.014 li
17.1768 145.976 17.2896 145.946 17.3945 145.932 cv
17.4995 145.916 17.6118 145.901 17.7168 145.901 cv
18.3242 145.901 18.8047 146.073 19.1646 146.404 cv
19.5244 146.742 19.7046 147.191 19.7046 147.761 cv
19.7046 148.354 19.5171 148.811 19.1494 149.134 cv
18.7817 149.456 18.2646 149.613 17.6045 149.613 cv
17.3721 149.613 17.1396 149.591 16.8994 149.561 cv
16.6597 149.524 16.4194 149.472 16.1646 149.389 cv
16.1646 148.646 li
16.3818 148.767 16.6069 148.856 16.8472 148.916 cv
17.0796 148.977 17.3271 148.999 17.5894 148.999 cv
18.0093 148.999 18.3472 148.894 18.5942 148.669 cv
18.8345 148.443 18.9619 148.144 18.9619 147.761 cv
18.9619 147.387 18.8345 147.086 18.5942 146.861 cv
18.3472 146.637 18.0093 146.524 17.5894 146.524 cv
17.3945 146.524 17.1919 146.546 16.9971 146.591 cv
16.8018 146.637 16.5996 146.704 16.397 146.794 cv
16.397 144.048 li
f
21.3931 110.835 mo
23.8931 110.835 li
f
21.3931 110.835 mo
23.8931 110.835 li
@
300.394 110.835 mo
297.894 110.835 li
f
300.394 110.835 mo
297.894 110.835 li
@
11.8271 112.942 mo
14.4072 112.942 li
14.4072 113.565 li
10.9346 113.565 li
10.9346 112.942 li
11.2124 112.658 11.5947 112.268 12.082 111.772 cv
12.5625 111.285 12.8696 110.97 12.9971 110.828 cv
13.2373 110.565 13.4023 110.34 13.4922 110.152 cv
13.582 109.973 13.6348 109.785 13.6348 109.605 cv
13.6348 109.32 13.5298 109.08 13.3271 108.9 cv
13.125 108.72 12.8623 108.623 12.5322 108.623 cv
12.2998 108.623 12.0522 108.667 11.7974 108.743 cv
11.5425 108.825 11.2646 108.945 10.9722 109.11 cv
10.9722 108.36 li
11.2725 108.24 11.5498 108.15 11.8047 108.09 cv
12.0596 108.03 12.2998 108 12.5171 108 cv
13.0796 108 13.5298 108.143 13.8672 108.427 cv
14.2046 108.712 14.3774 109.087 14.3774 109.56 cv
14.3774 109.785 14.332 110.002 14.25 110.198 cv
14.1675 110.4 14.0171 110.64 13.7925 110.91 cv
13.7324 110.985 13.5371 111.188 13.207 111.525 cv
12.8774 111.862 12.4199 112.335 11.8271 112.942 cv
f
17.5425 108.585 mo
17.1597 108.585 16.875 108.773 16.6797 109.148 cv
16.4849 109.523 16.395 110.085 16.395 110.835 cv
16.395 111.585 16.4849 112.148 16.6797 112.523 cv
16.875 112.897 17.1597 113.085 17.5425 113.085 cv
17.9248 113.085 18.21 112.897 18.4048 112.523 cv
18.5923 112.148 18.6899 111.585 18.6899 110.835 cv
18.6899 110.085 18.5923 109.523 18.4048 109.148 cv
18.21 108.773 17.9248 108.585 17.5425 108.585 cv
17.5425 108 mo
18.1499 108 18.6147 108.248 18.9448 108.728 cv
19.2671 109.215 19.4321 109.92 19.4321 110.835 cv
19.4321 111.758 19.2671 112.463 18.9448 112.943 cv
18.6147 113.423 18.1499 113.663 17.5425 113.663 cv
16.9272 113.663 16.4546 113.423 16.1323 112.943 cv
15.8096 112.463 15.6523 111.758 15.6523 110.835 cv
15.6523 109.92 15.8096 109.215 16.1323 108.728 cv
16.4546 108.248 16.9272 108 17.5425 108 cv
f
21.3931 74.8354 mo
23.8931 74.8354 li
f
21.3931 74.8354 mo
23.8931 74.8354 li
@
300.394 74.8354 mo
297.894 74.8354 li
f
300.394 74.8354 mo
297.894 74.8354 li
@
11.9834 76.9424 mo
14.5635 76.9424 li
14.5635 77.5649 li
11.0908 77.5649 li
11.0908 76.9424 li
11.3687 76.6577 11.751 76.2676 12.2383 75.7725 cv
12.7188 75.2852 13.0259 74.9702 13.1533 74.8276 cv
13.3936 74.5649 13.5586 74.3398 13.6484 74.1523 cv
13.7383 73.9727 13.791 73.7852 13.791 73.605 cv
13.791 73.3198 13.686 73.0801 13.4834 72.8999 cv
13.2813 72.7202 13.0186 72.6226 12.6885 72.6226 cv
12.4561 72.6226 12.2085 72.6675 11.9536 72.7427 cv
11.6987 72.8247 11.4209 72.9448 11.1284 73.1099 cv
11.1284 72.3599 li
11.4287 72.2397 11.7061 72.1499 11.9609 72.0898 cv
12.2158 72.0298 12.4561 72 12.6733 72 cv
13.2358 72 13.686 72.1426 14.0234 72.4272 cv
14.3608 72.7124 14.5337 73.0874 14.5337 73.5601 cv
14.5337 73.7852 14.4883 74.0024 14.4063 74.1973 cv
14.3237 74.3999 14.1733 74.6401 13.9487 74.9102 cv
13.8887 74.9849 13.6934 75.1875 13.3633 75.5249 cv
13.0337 75.8623 12.5762 76.335 11.9834 76.9424 cv
f
16.1235 72.0977 mo
19.0259 72.0977 li
19.0259 72.7202 li
16.7983 72.7202 li
16.7983 74.0625 li
16.9033 74.0249 17.0161 73.9951 17.1211 73.98 cv
17.2261 73.9648 17.3384 73.9497 17.4434 73.9497 cv
18.0508 73.9497 18.5313 74.1226 18.8911 74.4526 cv
19.251 74.79 19.4312 75.2397 19.4312 75.8101 cv
19.4312 76.4023 19.2437 76.8599 18.876 77.1826 cv
18.5083 77.5049 17.9912 77.6626 17.3311 77.6626 cv
17.0986 77.6626 16.8662 77.6401 16.626 77.6099 cv
16.3862 77.5723 16.146 77.52 15.8911 77.4375 cv
15.8911 76.6948 li
16.1084 76.8149 16.3335 76.9048 16.5737 76.9648 cv
16.8062 77.0249 17.0537 77.0474 17.3159 77.0474 cv
17.7358 77.0474 18.0737 76.9424 18.3208 76.7173 cv
18.561 76.4927 18.6885 76.1924 18.6885 75.8101 cv
18.6885 75.4351 18.561 75.1348 18.3208 74.9102 cv
18.0737 74.6851 17.7358 74.5723 17.3159 74.5723 cv
17.1211 74.5723 16.9185 74.5952 16.7236 74.6401 cv
16.5283 74.6851 16.3262 74.7524 16.1235 74.8423 cv
16.1235 72.0977 li
f
21.3931 38.8354 mo
23.8931 38.8354 li
f
21.3931 38.8354 mo
23.8931 38.8354 li
@
300.394 38.8354 mo
297.894 38.8354 li
f
300.394 38.8354 mo
297.894 38.8354 li
@
13.4614 38.6177 mo
13.814 38.6929 14.0913 38.8501 14.2866 39.0903 cv
14.4814 39.3301 14.5864 39.6304 14.5864 39.9751 cv
14.5864 40.5151 14.3989 40.9351 14.0317 41.2275 cv
13.6563 41.52 13.1313 41.6626 12.4492 41.6626 cv
12.2163 41.6626 11.9766 41.6401 11.7363 41.5952 cv
11.4966 41.5576 11.2417 41.4902 10.9863 41.3999 cv
10.9863 40.6875 li
11.189 40.8076 11.4141 40.8975 11.6616 40.9575 cv
11.9014 41.0176 12.1567 41.0474 12.4268 41.0474 cv
12.8916 41.0474 13.2441 40.9575 13.4839 40.7778 cv
13.7241 40.5977 13.8516 40.3276 13.8516 39.9751 cv
13.8516 39.6602 13.7388 39.4053 13.5142 39.2251 cv
13.2891 39.0449 12.9741 38.9478 12.5688 38.9478 cv
11.9316 38.9478 li
11.9316 38.3403 li
12.5991 38.3403 li
12.959 38.3403 13.2363 38.2725 13.4316 38.1226 cv
13.6265 37.98 13.7241 37.77 13.7241 37.4927 cv
13.7241 37.2153 13.6191 36.9976 13.4238 36.8477 cv
13.2217 36.6978 12.9365 36.6226 12.5688 36.6226 cv
12.3667 36.6226 12.1489 36.645 11.9165 36.6899 cv
11.6841 36.7349 11.4292 36.8027 11.1514 36.8926 cv
11.1514 36.2324 li
11.4292 36.1577 11.6914 36.0977 11.939 36.0601 cv
12.1792 36.0225 12.4116 36 12.6367 36 cv
13.1914 36 13.6338 36.1274 13.9639 36.3823 cv
14.2939 36.6377 14.459 36.9824 14.459 37.4175 cv
14.459 37.7178 14.3691 37.9727 14.1963 38.1826 cv
14.0239 38.3926 13.7764 38.5425 13.4614 38.6177 cv
f
17.5718 36.585 mo
17.189 36.585 16.9043 36.7725 16.709 37.1475 cv
16.5142 37.5225 16.4238 38.085 16.4238 38.835 cv
16.4238 39.585 16.5142 40.1475 16.709 40.5225 cv
16.9043 40.8975 17.189 41.085 17.5718 41.085 cv
17.9541 41.085 18.2393 40.8975 18.4341 40.5225 cv
18.6216 40.1475 18.7192 39.585 18.7192 38.835 cv
18.7192 38.085 18.6216 37.5225 18.4341 37.1475 cv
18.2393 36.7725 17.9541 36.585 17.5718 36.585 cv
17.5718 36 mo
18.1792 36 18.644 36.2476 18.9741 36.7275 cv
19.2964 37.2153 19.4614 37.9199 19.4614 38.835 cv
19.4614 39.7573 19.2964 40.4624 18.9741 40.9424 cv
18.644 41.4224 18.1792 41.6626 17.5718 41.6626 cv
16.9565 41.6626 16.4839 41.4224 16.1616 40.9424 cv
15.8389 40.4624 15.6816 39.7573 15.6816 38.835 cv
15.6816 37.9199 15.8389 37.2153 16.1616 36.7275 cv
16.4839 36.2476 16.9565 36 17.5718 36 cv
f
21.3931 2.83545 mo
23.8931 2.83545 li
f
21.3931 2.83545 mo
23.8931 2.83545 li
@
300.394 2.83545 mo
297.894 2.83545 li
f
300.394 2.83545 mo
297.894 2.83545 li
@
13.6177 2.61768 mo
13.9702 2.69238 14.2476 2.8501 14.4429 3.08984 cv
14.6377 3.33008 14.7427 3.62988 14.7427 3.9751 cv
14.7427 4.51514 14.5552 4.93506 14.188 5.22754 cv
13.8125 5.52002 13.2876 5.6626 12.6055 5.6626 cv
12.3726 5.6626 12.1328 5.64014 11.8926 5.59521 cv
11.6528 5.55762 11.3979 5.48975 11.1426 5.3999 cv
11.1426 4.6875 li
11.3452 4.80762 11.5703 4.89746 11.8179 4.95752 cv
12.0576 5.01758 12.313 5.04736 12.583 5.04736 cv
13.0479 5.04736 13.4004 4.95752 13.6401 4.77734 cv
13.8804 4.59766 14.0078 4.32764 14.0078 3.9751 cv
14.0078 3.66016 13.895 3.40479 13.6704 3.2251 cv
13.4453 3.04492 13.1304 2.94775 12.7251 2.94775 cv
12.0879 2.94775 li
12.0879 2.33984 li
12.7554 2.33984 li
13.1152 2.33984 13.3926 2.27246 13.5879 2.12256 cv
13.7827 1.97998 13.8804 1.77002 13.8804 1.49268 cv
13.8804 1.21484 13.7754 .997559 13.5801 .847656 cv
13.3779 .697754 13.0928 .622559 12.7251 .622559 cv
12.5229 .622559 12.3052 .64502 12.0728 .689941 cv
11.8403 .734863 11.5854 .802246 11.3076 .892578 cv
11.3076 .232422 li
11.5854 .157715 11.8477 .0976563 12.0952 .0600586 cv
12.3354 .0224609 12.5679 0 12.793 0 cv
13.3477 0 13.79 .127441 14.1201 .382324 cv
14.4502 .637695 14.6152 .982422 14.6152 1.41748 cv
14.6152 1.71729 14.5254 1.97266 14.3525 2.18262 cv
14.1802 2.39258 13.9326 2.54248 13.6177 2.61768 cv
f
16.1528 .0976563 mo
19.0552 .0976563 li
19.0552 .720215 li
16.8276 .720215 li
16.8276 2.0625 li
16.9326 2.0249 17.0454 1.99512 17.1504 1.97998 cv
17.2554 1.96533 17.3677 1.9502 17.4727 1.9502 cv
18.0801 1.9502 18.5605 2.12256 18.9204 2.45264 cv
19.2803 2.79004 19.4604 3.24023 19.4604 3.81006 cv
19.4604 4.40283 19.2729 4.86035 18.9053 5.18262 cv
18.5376 5.50537 18.0205 5.6626 17.3604 5.6626 cv
17.1279 5.6626 16.8955 5.64014 16.6553 5.60986 cv
16.4155 5.57275 16.1753 5.52002 15.9204 5.4375 cv
15.9204 4.69531 li
16.1377 4.81494 16.3628 4.90527 16.603 4.96533 cv
16.8354 5.0249 17.083 5.04736 17.3452 5.04736 cv
17.7651 5.04736 18.103 4.94287 18.3501 4.71777 cv
18.5903 4.49268 18.7178 4.19287 18.7178 3.81006 cv
18.7178 3.43506 18.5903 3.13525 18.3501 2.91016 cv
18.103 2.68506 17.7651 2.57275 17.3452 2.57275 cv
17.1504 2.57275 16.9478 2.59521 16.7529 2.64014 cv
16.5576 2.68506 16.3555 2.75244 16.1528 2.84277 cv
16.1528 .0976563 li
f
.839844 148.455 mo
5.09229 148.455 li
5.09229 147.562 li
5.09229 146.812 4.92725 146.257 4.58203 145.905 cv
4.2373 145.56 3.69727 145.379 2.9624 145.379 cv
2.22705 145.379 1.69482 145.56 1.34961 145.905 cv
1.01221 146.257 .839844 146.812 .839844 147.562 cv
.839844 148.455 li
.232422 149.197 mo
.232422 147.674 li
.232422 146.618 .457031 145.837 .89209 145.343 cv
1.33447 144.848 2.0249 144.6 2.9624 144.6 cv
3.90723 144.6 4.59717 144.854 5.03955 145.35 cv
5.48242 145.845 5.69971 146.625 5.69971 147.674 cv
5.69971 149.197 li
.232422 149.197 li
f
1.59717 142.777 mo
5.69971 142.777 li
5.69971 143.452 li
1.59717 143.452 li
1.59717 142.777 li
cp
0 142.777 mo
.85498 142.777 li
.85498 143.452 li
0 143.452 li
0 142.777 li
cp
f
1.71729 138.75 mo
2.35449 138.75 li
2.26465 138.945 2.18945 139.14 2.13721 139.342 cv
2.09229 139.552 2.06201 139.762 2.06201 139.98 cv
2.06201 140.317 2.11475 140.573 2.21973 140.738 cv
2.32471 140.902 2.47461 140.984 2.67725 140.984 cv
2.83447 140.984 2.95459 140.924 3.04443 140.804 cv
3.13477 140.685 3.22461 140.445 3.2998 140.085 cv
3.35205 139.853 li
3.45703 139.372 3.60693 139.034 3.78711 138.833 cv
3.97461 138.637 4.2373 138.532 4.56689 138.532 cv
4.94971 138.532 5.24951 138.683 5.46729 138.982 cv
5.69189 139.283 5.79736 139.702 5.79736 140.227 cv
5.79736 140.453 5.77441 140.677 5.7373 140.917 cv
5.69971 141.158 5.63965 141.404 5.5498 141.667 cv
4.85205 141.667 li
4.9873 141.419 5.08447 141.172 5.14453 140.932 cv
5.21191 140.692 5.24219 140.453 5.24219 140.212 cv
5.24219 139.897 5.18945 139.649 5.08447 139.477 cv
4.97949 139.312 4.82227 139.223 4.61963 139.223 cv
4.43945 139.223 4.29736 139.29 4.19971 139.41 cv
4.10205 139.529 4.00488 139.8 3.91455 140.22 cv
3.8623 140.453 li
3.77197 140.873 3.63721 141.18 3.45703 141.36 cv
3.27734 141.547 3.02979 141.637 2.70703 141.637 cv
2.32471 141.637 2.02441 141.502 1.81445 141.232 cv
1.60449 140.962 1.49951 140.573 1.49951 140.063 cv
1.49951 139.814 1.52197 139.583 1.55957 139.357 cv
1.59717 139.14 1.64941 138.938 1.71729 138.75 cv
f
.43457 136.792 mo
1.59717 136.792 li
1.59717 135.405 li
2.12207 135.405 li
2.12207 136.792 li
4.34961 136.792 li
4.6875 136.792 4.90479 136.748 4.99463 136.657 cv
5.09229 136.568 5.13721 136.38 5.13721 136.095 cv
5.13721 135.405 li
5.69971 135.405 li
5.69971 136.095 li
5.69971 136.62 5.60205 136.98 5.40723 137.174 cv
5.2124 137.37 4.85986 137.467 4.34961 137.467 cv
2.12207 137.467 li
2.12207 137.962 li
1.59717 137.962 li
1.59717 137.467 li
.43457 137.467 li
.43457 136.792 li
f
3.63721 132.652 mo
3.63721 133.2 3.70459 133.575 3.82471 133.785 cv
3.95215 133.995 4.16211 134.1 4.4624 134.1 cv
4.70215 134.1 4.89746 134.024 5.03223 133.867 cv
5.1748 133.709 5.24219 133.493 5.24219 133.222 cv
5.24219 132.848 5.11475 132.547 4.84473 132.323 cv
4.58203 132.097 4.22998 131.985 3.78711 131.985 cv
3.63721 131.985 li
3.63721 132.652 li
3.35986 131.31 mo
5.69971 131.31 li
5.69971 131.985 li
5.07715 131.985 li
5.33203 132.143 5.51221 132.337 5.625 132.562 cv
5.7373 132.788 5.79736 133.073 5.79736 133.402 cv
5.79736 133.822 5.68457 134.16 5.45215 134.408 cv
5.21973 134.654 4.90479 134.774 4.50732 134.774 cv
4.0498 134.774 3.70459 134.625 3.46484 134.31 cv
3.23242 134.002 3.1123 133.545 3.1123 132.929 cv
3.1123 131.985 li
3.04492 131.985 li
2.7373 131.985 2.49707 132.09 2.32471 132.292 cv
2.15967 132.495 2.06982 132.779 2.06982 133.147 cv
2.06982 133.388 2.09961 133.612 2.15967 133.837 cv
2.21973 134.063 2.30225 134.272 2.40723 134.475 cv
1.78467 134.475 li
1.69482 134.234 1.61963 133.995 1.57471 133.762 cv
1.52979 133.529 1.5 133.305 1.5 133.08 cv
1.5 132.487 1.65723 132.044 1.96484 131.752 cv
2.27246 131.46 2.7373 131.31 3.35986 131.31 cv
f
3.22461 126.51 mo
5.69971 126.51 li
5.69971 127.185 li
3.24707 127.185 li
2.85742 127.185 2.57227 127.268 2.37695 127.417 cv
2.18213 127.567 2.08447 127.792 2.08447 128.092 cv
2.08447 128.459 2.20459 128.745 2.43701 128.955 cv
2.66992 129.165 2.98486 129.27 3.38232 129.27 cv
5.69971 129.27 li
5.69971 129.944 li
1.59717 129.944 li
1.59717 129.27 li
2.23486 129.27 li
1.99463 129.112 1.80713 128.924 1.68701 128.7 cv
1.56738 128.482 1.49951 128.227 1.49951 127.942 cv
1.49951 127.478 1.6499 127.118 1.94238 126.877 cv
2.23486 126.637 2.66211 126.51 3.22461 126.51 cv
f
1.75488 122.212 mo
2.38477 122.212 li
2.27979 122.408 2.20459 122.594 2.15234 122.79 cv
2.09961 122.984 2.06982 123.172 2.06982 123.368 cv
2.06982 123.802 2.21191 124.147 2.48975 124.387 cv
2.76709 124.627 3.15723 124.748 3.65234 124.748 cv
4.15479 124.748 4.54443 124.627 4.82227 124.387 cv
5.09961 124.147 5.23486 123.802 5.23486 123.368 cv
5.23486 123.172 5.21191 122.984 5.15967 122.79 cv
5.10693 122.594 5.02441 122.408 4.91943 122.212 cv
5.54199 122.212 li
5.63232 122.408 5.69971 122.602 5.7373 122.797 cv
5.77441 123 5.79736 123.217 5.79736 123.442 cv
5.79736 124.057 5.60986 124.552 5.21973 124.912 cv
4.83691 125.279 4.31201 125.459 3.65234 125.459 cv
2.98486 125.459 2.45947 125.279 2.07715 124.912 cv
1.69482 124.544 1.49951 124.042 1.49951 123.397 cv
1.49951 123.188 1.52197 122.984 1.56689 122.79 cv
1.6123 122.594 1.67236 122.4 1.75488 122.212 cv
f
3.47998 117.532 mo
3.80957 117.532 li
3.80957 120.63 li
4.2749 120.6 4.63477 120.464 4.875 120.21 cv
5.11475 119.962 5.23486 119.617 5.23486 119.167 cv
5.23486 118.913 5.20459 118.657 5.14502 118.417 cv
5.08496 118.177 4.9873 117.93 4.85254 117.69 cv
5.48975 117.69 li
5.59473 117.93 5.67725 118.177 5.72217 118.432 cv
5.76709 118.688 5.79736 118.95 5.79736 119.205 cv
5.79736 119.864 5.60986 120.382 5.23486 120.765 cv
4.85986 121.147 4.34229 121.335 3.68994 121.335 cv
3.02246 121.335 2.48975 121.155 2.09229 120.795 cv
1.70215 120.435 1.5 119.94 1.5 119.325 cv
1.5 118.769 1.67969 118.335 2.03223 118.012 cv
2.39209 117.697 2.87207 117.532 3.47998 117.532 cv
3.28467 118.208 mo
2.91748 118.215 2.625 118.32 2.3999 118.514 cv
2.18213 118.717 2.06982 118.987 2.06982 119.317 cv
2.06982 119.692 2.18213 119.992 2.39209 120.217 cv
2.60254 120.442 2.90234 120.577 3.28467 120.607 cv
3.28467 118.208 li
f
.231934 114.015 mo
.231934 110.873 li
.854492 110.873 li
.854492 113.272 li
2.46729 113.272 li
2.46729 111.105 li
3.08984 111.105 li
3.08984 113.272 li
5.69971 113.272 li
5.69971 114.015 li
.231934 114.015 li
cp
f
2.22705 107.355 mo
2.18213 107.43 2.15186 107.512 2.12939 107.602 cv
2.11475 107.692 2.09961 107.79 2.09961 107.895 cv
2.09961 108.277 2.22705 108.57 2.47461 108.772 cv
2.72217 108.982 3.07471 109.08 3.53955 109.08 cv
5.69971 109.08 li
5.69971 109.755 li
1.59717 109.755 li
1.59717 109.08 li
2.23438 109.08 li
1.9873 108.945 1.7998 108.757 1.67969 108.532 cv
1.55957 108.307 1.49951 108.03 1.49951 107.7 cv
1.49951 107.655 1.50684 107.602 1.50684 107.542 cv
1.51465 107.49 1.52197 107.43 1.53711 107.355 cv
2.22705 107.355 li
f
2.06934 105.06 mo
2.06934 105.42 2.21191 105.705 2.49707 105.915 cv
2.78223 106.125 3.16455 106.23 3.65186 106.23 cv
4.14697 106.23 4.52979 106.132 4.81445 105.922 cv
5.09961 105.712 5.23438 105.427 5.23438 105.06 cv
5.23438 104.7 5.09961 104.415 4.81445 104.205 cv
4.52979 103.995 4.14697 103.89 3.65186 103.89 cv
3.17188 103.89 2.78223 103.995 2.49707 104.205 cv
2.21191 104.415 2.06934 104.7 2.06934 105.06 cv
1.49951 105.06 mo
1.49951 104.475 1.69434 104.017 2.06934 103.68 cv
2.45215 103.35 2.97705 103.177 3.65186 103.177 cv
4.32715 103.177 4.85205 103.35 5.22705 103.68 cv
5.60938 104.017 5.79688 104.475 5.79688 105.06 cv
5.79688 105.652 5.60938 106.117 5.22705 106.447 cv
4.85205 106.777 4.32715 106.942 3.65186 106.942 cv
2.97705 106.942 2.45215 106.777 2.06934 106.447 cv
1.69434 106.117 1.49951 105.652 1.49951 105.06 cv
f
2.38428 98.8647 mo
2.08447 98.6997 1.86719 98.4971 1.7168 98.2646 cv
1.57471 98.0322 1.49951 97.7549 1.49951 97.4321 cv
1.49951 97.0122 1.64941 96.6821 1.94971 96.4497 cv
2.24951 96.2173 2.67676 96.0972 3.22461 96.0972 cv
5.69971 96.0972 li
5.69971 96.7725 li
3.24707 96.7725 li
2.85693 96.7725 2.56445 96.8472 2.36963 96.9824 cv
2.18213 97.1245 2.08447 97.335 2.08447 97.6196 cv
2.08447 97.9722 2.20459 98.2495 2.43701 98.4521 cv
2.66943 98.6548 2.98438 98.7524 3.38184 98.7524 cv
5.69971 98.7524 li
5.69971 99.4272 li
3.24707 99.4272 li
2.85693 99.4272 2.56445 99.5024 2.36963 99.6372 cv
2.18213 99.7798 2.08447 99.9971 2.08447 100.282 cv
2.08447 100.627 2.20459 100.905 2.43701 101.107 cv
2.66943 101.31 2.98438 101.407 3.38184 101.407 cv
5.69971 101.407 li
5.69971 102.083 li
1.59717 102.083 li
1.59717 101.407 li
2.23438 101.407 li
1.98682 101.257 1.79932 101.07 1.67969 100.852 cv
1.55957 100.642 1.49951 100.387 1.49951 100.087 cv
1.49951 99.7871 1.57471 99.5396 1.72461 99.3296 cv
1.87451 99.1196 2.09961 98.9697 2.38428 98.8647 cv
f
.734863 90.1201 mo
.734863 90.6602 .9375 91.0874 1.33496 91.4023 cv
1.73975 91.7173 2.27979 91.875 2.96973 91.875 cv
3.65967 91.875 4.20703 91.7173 4.60498 91.4023 cv
5.00977 91.0874 5.20459 90.6602 5.20459 90.1201 cv
5.20459 89.5874 5.00977 89.1597 4.60498 88.8452 cv
4.20703 88.5298 3.65967 88.3726 2.96973 88.3726 cv
2.27979 88.3726 1.73975 88.5298 1.33496 88.8452 cv
.9375 89.1597 .734863 89.5874 .734863 90.1201 cv
.134766 90.1201 mo
.134766 89.355 .397461 88.7476 .907227 88.2827 cv
1.41748 87.8247 2.10742 87.5923 2.96973 87.5923 cv
3.83984 87.5923 4.52246 87.8247 5.03223 88.2827 cv
5.54248 88.7476 5.79736 89.355 5.79736 90.1201 cv
5.79736 90.8926 5.54248 91.5073 5.03223 91.9648 cv
4.52246 92.4302 3.83984 92.6548 2.96973 92.6548 cv
2.10742 92.6548 1.41748 92.4302 .907227 91.9648 cv
.397461 91.5073 .134766 90.8926 .134766 90.1201 cv
f
2.22705 84.0898 mo
2.18213 84.1646 2.15186 84.2471 2.12939 84.3374 cv
2.11475 84.4272 2.09961 84.5249 2.09961 84.6294 cv
2.09961 85.0122 2.22705 85.3047 2.47461 85.5073 cv
2.72217 85.7173 3.07471 85.8145 3.53955 85.8145 cv
5.69971 85.8145 li
5.69971 86.4897 li
1.59717 86.4897 li
1.59717 85.8145 li
2.23438 85.8145 li
1.9873 85.6797 1.7998 85.4922 1.67969 85.2671 cv
1.55957 85.042 1.49951 84.7646 1.49951 84.4346 cv
1.49951 84.3896 1.50684 84.3374 1.50684 84.2773 cv
1.51465 84.2246 1.52197 84.1646 1.53711 84.0898 cv
2.22705 84.0898 li
f
1.59717 82.71 mo
5.69971 82.71 li
5.69971 83.3848 li
1.59717 83.3848 li
1.59717 82.71 li
cp
0 82.71 mo
.85498 82.71 li
.85498 83.3848 li
0 83.3848 li
0 82.71 li
cp
f
3.59961 78.6001 mo
3.11963 78.6001 2.7373 78.7051 2.46729 78.8999 cv
2.19727 79.1025 2.0625 79.3872 2.0625 79.7476 cv
2.0625 80.1074 2.19727 80.3926 2.46729 80.5947 cv
2.7373 80.7974 3.11963 80.895 3.59961 80.895 cv
4.0874 80.895 4.4624 80.7974 4.73242 80.5947 cv
5.00244 80.3926 5.13721 80.1074 5.13721 79.7476 cv
5.13721 79.3872 5.00244 79.1025 4.73242 78.8999 cv
4.4624 78.7051 4.0874 78.6001 3.59961 78.6001 cv
5.18994 77.9248 mo
5.87988 77.9248 6.39746 78.0825 6.74219 78.3901 cv
7.07959 78.7051 7.25244 79.1772 7.25244 79.8149 cv
7.25244 80.0552 7.22998 80.2725 7.19971 80.4824 cv
7.16211 80.6924 7.10986 80.9023 7.03467 81.0972 cv
6.38232 81.0972 li
6.4873 80.9023 6.5625 80.7075 6.61475 80.5122 cv
6.66748 80.3174 6.69727 80.1226 6.69727 79.9199 cv
6.69727 79.4849 6.57715 79.1548 6.35205 78.9302 cv
6.11963 78.7124 5.7749 78.6001 5.30957 78.6001 cv
4.97998 78.6001 li
5.21973 78.7427 5.3999 78.9224 5.51953 79.1401 cv
5.63965 79.3574 5.69971 79.6123 5.69971 79.9126 cv
5.69971 80.4224 5.51221 80.8276 5.12988 81.1348 cv
4.74707 81.4424 4.2373 81.5923 3.59961 81.5923 cv
2.96973 81.5923 2.45996 81.4424 2.07715 81.1348 cv
1.69482 80.8276 1.5 80.4224 1.5 79.9126 cv
1.5 79.6123 1.55957 79.3574 1.67969 79.1401 cv
1.7998 78.9224 1.97998 78.7427 2.21973 78.6001 cv
1.59717 78.6001 li
1.59717 77.9248 li
5.18994 77.9248 li
f
1.59717 75.8623 mo
5.69971 75.8623 li
5.69971 76.5376 li
1.59717 76.5376 li
1.59717 75.8623 li
cp
0 75.8623 mo
.85498 75.8623 li
.85498 76.5376 li
0 76.5376 li
0 75.8623 li
cp
f
3.22461 71.0396 mo
5.69971 71.0396 li
5.69971 71.7148 li
3.24707 71.7148 li
2.85742 71.7148 2.57227 71.7974 2.37695 71.9473 cv
2.18213 72.0972 2.08447 72.3223 2.08447 72.6221 cv
2.08447 72.9897 2.20459 73.2749 2.43701 73.4849 cv
2.66992 73.6948 2.98486 73.7998 3.38232 73.7998 cv
5.69971 73.7998 li
5.69971 74.4746 li
1.59717 74.4746 li
1.59717 73.7998 li
2.23486 73.7998 li
1.99463 73.6421 1.80713 73.4546 1.68701 73.23 cv
1.56738 73.0122 1.49951 72.7573 1.49951 72.4722 cv
1.49951 72.0073 1.6499 71.6475 1.94238 71.4072 cv
2.23486 71.1675 2.66211 71.0396 3.22461 71.0396 cv
f
.625 lw
2 lc
21.3931 2.83545 mo
300.393 2.83545 li
@
300.394 218.835 mo
300.394 2.83545 li
@
21.3931 218.835 mo
300.393 218.835 li
@
21.3931 218.835 mo
21.3931 2.83545 li
@
196.169 124.308 mo
295.894 124.308 li
295.894 97.3638 li
196.169 97.3638 li
196.169 124.308 li
cp
0 0 0 0 cmyk
f
196.169 124.308 mo
295.894 124.308 li
295.894 97.3638 li
196.169 97.3638 li
196.169 124.308 li
cp
0 0 0 1 cmyk
@
202.469 104.464 mo
215.068 104.464 li
.884 .769 0 0 cmyk
@
229.783 101.269 mo
229.783 102.133 li
229.441 101.971 229.127 101.854 228.83 101.773 cv
228.523 101.701 228.235 101.656 227.966 101.656 cv
227.479 101.656 227.102 101.754 226.841 101.935 cv
226.58 102.124 226.454 102.394 226.454 102.736 cv
226.454 103.024 226.535 103.249 226.715 103.393 cv
226.886 103.546 227.219 103.664 227.705 103.752 cv
228.245 103.861 li
228.901 103.987 229.388 104.212 229.703 104.527 cv
230.018 104.851 230.18 105.274 230.18 105.805 cv
230.18 106.444 229.964 106.921 229.54 107.245 cv
229.109 107.569 228.488 107.731 227.669 107.731 cv
227.354 107.731 227.021 107.695 226.67 107.632 cv
226.318 107.569 225.959 107.47 225.59 107.326 cv
225.59 106.408 li
225.95 106.615 226.301 106.768 226.643 106.867 cv
226.984 106.975 227.326 107.02 227.669 107.02 cv
228.173 107.02 228.56 106.921 228.839 106.723 cv
229.109 106.525 229.252 106.246 229.252 105.868 cv
229.252 105.544 229.153 105.292 228.956 105.112 cv
228.757 104.932 228.435 104.797 227.983 104.707 cv
227.444 104.599 li
226.777 104.473 226.301 104.266 226.004 103.978 cv
225.707 103.699 225.563 103.312 225.563 102.808 cv
225.563 102.232 225.761 101.773 226.175 101.439 cv
226.58 101.107 227.146 100.936 227.867 100.936 cv
228.173 100.936 228.479 100.963 228.803 101.017 cv
229.118 101.071 229.441 101.161 229.783 101.269 cv
0 0 0 1 cmyk
f
231.53 102.691 mo
232.34 102.691 li
232.34 107.614 li
231.53 107.614 li
231.53 102.691 li
cp
231.53 100.774 mo
232.34 100.774 li
232.34 101.8 li
231.53 101.8 li
231.53 100.774 li
cp
f
237.866 103.636 mo
238.063 103.276 238.307 103.015 238.586 102.834 cv
238.865 102.664 239.197 102.574 239.585 102.574 cv
240.089 102.574 240.484 102.754 240.764 103.114 cv
241.043 103.474 241.187 103.987 241.187 104.644 cv
241.187 107.614 li
240.377 107.614 li
240.377 104.671 li
240.377 104.203 240.287 103.852 240.124 103.618 cv
239.954 103.393 239.702 103.276 239.36 103.276 cv
238.937 103.276 238.604 103.419 238.36 103.699 cv
238.117 103.978 238.001 104.356 238.001 104.833 cv
238.001 107.614 li
237.19 107.614 li
237.19 104.671 li
237.19 104.203 237.101 103.852 236.938 103.618 cv
236.768 103.393 236.507 103.276 236.164 103.276 cv
235.751 103.276 235.418 103.419 235.175 103.699 cv
234.932 103.978 234.814 104.356 234.814 104.833 cv
234.814 107.614 li
234.005 107.614 li
234.005 102.691 li
234.814 102.691 li
234.814 103.456 li
234.994 103.159 235.22 102.934 235.48 102.79 cv
235.732 102.646 236.039 102.574 236.398 102.574 cv
236.759 102.574 237.056 102.664 237.308 102.844 cv
237.561 103.024 237.739 103.294 237.866 103.636 cv
f
242.717 105.67 mo
242.717 102.691 li
243.526 102.691 li
243.526 105.643 li
243.526 106.111 243.616 106.453 243.797 106.687 cv
243.977 106.92 244.247 107.038 244.615 107.038 cv
245.048 107.038 245.398 106.903 245.65 106.624 cv
245.903 106.345 246.028 105.967 246.028 105.481 cv
246.028 102.691 li
246.839 102.691 li
246.839 107.614 li
246.028 107.614 li
246.028 106.858 li
245.831 107.164 245.597 107.38 245.345 107.523 cv
245.084 107.659 244.787 107.731 244.445 107.731 cv
243.878 107.731 243.445 107.56 243.157 107.208 cv
242.86 106.867 242.717 106.354 242.717 105.67 cv
f
248.504 100.774 mo
249.313 100.774 li
249.313 107.614 li
248.504 107.614 li
248.504 100.774 li
cp
f
253.247 105.139 mo
252.59 105.139 252.14 105.22 251.888 105.364 cv
251.636 105.517 251.51 105.769 251.51 106.129 cv
251.51 106.417 251.6 106.651 251.788 106.813 cv
251.978 106.984 252.239 107.065 252.563 107.065 cv
253.013 107.065 253.373 106.912 253.643 106.587 cv
253.912 106.272 254.048 105.85 254.048 105.319 cv
254.048 105.139 li
253.247 105.139 li
254.857 104.806 mo
254.857 107.614 li
254.048 107.614 li
254.048 106.867 li
253.858 107.172 253.624 107.389 253.354 107.524 cv
253.085 107.659 252.742 107.731 252.348 107.731 cv
251.843 107.731 251.438 107.596 251.141 107.317 cv
250.844 107.038 250.7 106.66 250.7 106.183 cv
250.7 105.634 250.88 105.22 251.257 104.932 cv
251.627 104.653 252.176 104.509 252.914 104.509 cv
254.048 104.509 li
254.048 104.428 li
254.048 104.059 253.922 103.771 253.679 103.564 cv
253.436 103.366 253.094 103.258 252.653 103.258 cv
252.364 103.258 252.095 103.294 251.825 103.366 cv
251.555 103.438 251.303 103.537 251.06 103.663 cv
251.06 102.916 li
251.348 102.808 251.636 102.718 251.915 102.664 cv
252.193 102.61 252.464 102.574 252.734 102.574 cv
253.444 102.574 253.976 102.763 254.327 103.132 cv
254.678 103.5 254.857 104.059 254.857 104.806 cv
f
257.324 101.296 mo
257.324 102.691 li
258.989 102.691 li
258.989 103.321 li
257.324 103.321 li
257.324 105.994 li
257.324 106.399 257.378 106.66 257.485 106.768 cv
257.594 106.884 257.818 106.939 258.161 106.939 cv
258.989 106.939 li
258.989 107.614 li
258.161 107.614 li
257.53 107.614 257.099 107.497 256.865 107.263 cv
256.631 107.029 256.514 106.606 256.514 105.994 cv
256.514 103.321 li
255.92 103.321 li
255.92 102.691 li
256.514 102.691 li
256.514 101.296 li
257.324 101.296 li
f
260.051 102.691 mo
260.861 102.691 li
260.861 107.614 li
260.051 107.614 li
260.051 102.691 li
cp
260.051 100.774 mo
260.861 100.774 li
260.861 101.8 li
260.051 101.8 li
260.051 100.774 li
cp
f
264.461 103.258 mo
264.028 103.258 263.687 103.429 263.435 103.771 cv
263.183 104.113 263.057 104.572 263.057 105.157 cv
263.057 105.751 263.174 106.21 263.426 106.552 cv
263.678 106.894 264.02 107.056 264.461 107.056 cv
264.893 107.056 265.234 106.894 265.487 106.552 cv
265.738 106.21 265.865 105.751 265.865 105.157 cv
265.865 104.581 265.738 104.113 265.487 103.771 cv
265.234 103.429 264.893 103.258 264.461 103.258 cv
264.461 102.574 mo
265.162 102.574 265.712 102.808 266.116 103.258 cv
266.513 103.717 266.72 104.347 266.72 105.157 cv
266.72 105.966 266.513 106.597 266.116 107.047 cv
265.712 107.506 265.162 107.731 264.461 107.731 cv
263.749 107.731 263.191 107.506 262.796 107.047 cv
262.4 106.597 262.202 105.966 262.202 105.157 cv
262.202 104.347 262.4 103.717 262.796 103.258 cv
263.191 102.808 263.749 102.574 264.461 102.574 cv
f
272.156 104.644 mo
272.156 107.614 li
271.346 107.614 li
271.346 104.671 li
271.346 104.203 271.246 103.861 271.067 103.627 cv
270.887 103.393 270.616 103.276 270.257 103.276 cv
269.815 103.276 269.474 103.42 269.223 103.699 cv
268.97 103.978 268.844 104.356 268.844 104.833 cv
268.844 107.614 li
268.033 107.614 li
268.033 102.691 li
268.844 102.691 li
268.844 103.456 li
269.033 103.168 269.258 102.943 269.527 102.799 cv
269.789 102.655 270.095 102.574 270.437 102.574 cv
270.995 102.574 271.427 102.754 271.715 103.105 cv
272.003 103.456 272.156 103.969 272.156 104.644 cv
f
202.469 117.43 mo
215.068 117.43 li
.873 .242 1 .129 cmyk
@
225.851 114.02 mo
227.174 114.02 li
228.848 118.484 li
230.53 114.02 li
231.854 114.02 li
231.854 120.581 li
230.989 120.581 li
230.989 114.82 li
229.298 119.32 li
228.406 119.32 li
226.715 114.82 li
226.715 120.581 li
225.851 120.581 li
225.851 114.02 li
cp
0 0 0 1 cmyk
f
235.489 116.225 mo
235.058 116.225 234.716 116.396 234.464 116.737 cv
234.212 117.08 234.086 117.539 234.086 118.124 cv
234.086 118.717 234.203 119.177 234.455 119.519 cv
234.706 119.861 235.049 120.022 235.489 120.022 cv
235.922 120.022 236.264 119.861 236.516 119.519 cv
236.768 119.177 236.894 118.717 236.894 118.124 cv
236.894 117.547 236.768 117.08 236.516 116.737 cv
236.264 116.396 235.922 116.225 235.489 116.225 cv
235.489 115.541 mo
236.191 115.541 236.741 115.774 237.146 116.225 cv
237.542 116.684 237.748 117.314 237.748 118.124 cv
237.748 118.934 237.542 119.564 237.146 120.014 cv
236.741 120.473 236.191 120.697 235.489 120.697 cv
234.778 120.697 234.221 120.473 233.824 120.014 cv
233.429 119.564 233.23 118.934 233.23 118.124 cv
233.23 117.314 233.429 116.684 233.824 116.225 cv
234.221 115.774 234.778 115.541 235.489 115.541 cv
f
242.33 116.404 mo
242.33 113.741 li
243.14 113.741 li
243.14 120.581 li
242.33 120.581 li
242.33 119.843 li
242.159 120.14 241.943 120.356 241.682 120.491 cv
241.421 120.625 241.115 120.698 240.754 120.698 cv
240.16 120.698 239.675 120.464 239.297 119.996 cv
238.919 119.528 238.738 118.897 238.738 118.124 cv
238.738 117.35 238.919 116.729 239.297 116.252 cv
239.675 115.784 240.16 115.541 240.754 115.541 cv
241.115 115.541 241.421 115.613 241.682 115.757 cv
241.943 115.901 242.159 116.117 242.33 116.404 cv
239.576 118.124 mo
239.576 118.718 239.692 119.186 239.937 119.528 cv
240.18 119.87 240.521 120.032 240.953 120.032 cv
241.376 120.032 241.709 119.87 241.961 119.528 cv
242.204 119.186 242.33 118.718 242.33 118.124 cv
242.33 117.53 242.204 117.071 241.961 116.729 cv
241.709 116.387 241.376 116.216 240.953 116.216 cv
240.521 116.216 240.18 116.387 239.937 116.729 cv
239.692 117.071 239.576 117.53 239.576 118.124 cv
f
249.017 117.917 mo
249.017 118.313 li
245.3 118.313 li
245.336 118.871 245.497 119.303 245.804 119.591 cv
246.101 119.879 246.515 120.022 247.055 120.022 cv
247.361 120.022 247.667 119.987 247.955 119.915 cv
248.243 119.842 248.539 119.726 248.827 119.564 cv
248.827 120.329 li
248.539 120.455 248.243 120.554 247.937 120.608 cv
247.631 120.662 247.315 120.698 247.01 120.698 cv
246.218 120.698 245.597 120.473 245.138 120.022 cv
244.679 119.573 244.454 118.951 244.454 118.169 cv
244.454 117.368 244.67 116.729 245.102 116.252 cv
245.534 115.784 246.128 115.541 246.866 115.541 cv
247.532 115.541 248.054 115.757 248.44 116.18 cv
248.818 116.612 249.017 117.188 249.017 117.917 cv
248.207 117.683 mo
248.197 117.242 248.072 116.891 247.838 116.621 cv
247.595 116.36 247.271 116.225 246.874 116.225 cv
246.425 116.225 246.064 116.36 245.795 116.612 cv
245.525 116.863 245.362 117.224 245.327 117.683 cv
248.207 117.683 li
f
250.339 113.741 mo
251.149 113.741 li
251.149 120.58 li
250.339 120.58 li
250.339 113.741 li
cp
f
255.74 114.02 mo
259.511 114.02 li
259.511 114.767 li
256.631 114.767 li
256.631 116.702 li
259.231 116.702 li
259.231 117.449 li
256.631 117.449 li
256.631 120.581 li
255.74 120.581 li
255.74 114.02 li
cp
f
260.798 118.636 mo
260.798 115.658 li
261.608 115.658 li
261.608 118.609 li
261.608 119.078 261.697 119.419 261.878 119.654 cv
262.058 119.888 262.328 120.004 262.696 120.004 cv
263.129 120.004 263.479 119.87 263.731 119.59 cv
263.984 119.312 264.109 118.934 264.109 118.448 cv
264.109 115.658 li
264.92 115.658 li
264.92 120.58 li
264.109 120.58 li
264.109 119.825 li
263.912 120.131 263.678 120.346 263.426 120.491 cv
263.165 120.626 262.868 120.698 262.526 120.698 cv
261.959 120.698 261.526 120.526 261.238 120.176 cv
260.941 119.834 260.798 119.321 260.798 118.636 cv
f
270.68 117.61 mo
270.68 120.581 li
269.869 120.581 li
269.869 117.638 li
269.869 117.17 269.771 116.827 269.591 116.594 cv
269.411 116.36 269.141 116.243 268.78 116.243 cv
268.34 116.243 267.998 116.387 267.746 116.666 cv
267.494 116.945 267.367 117.322 267.367 117.8 cv
267.367 120.581 li
266.558 120.581 li
266.558 115.658 li
267.367 115.658 li
267.367 116.423 li
267.557 116.135 267.781 115.909 268.052 115.766 cv
268.313 115.622 268.619 115.541 268.961 115.541 cv
269.519 115.541 269.951 115.721 270.239 116.072 cv
270.527 116.423 270.68 116.936 270.68 117.61 cv
f
275.837 115.847 mo
275.837 116.603 li
275.603 116.477 275.378 116.387 275.144 116.324 cv
274.91 116.261 274.685 116.225 274.451 116.225 cv
273.929 116.225 273.515 116.396 273.227 116.729 cv
272.938 117.062 272.795 117.53 272.795 118.124 cv
272.795 118.727 272.938 119.195 273.227 119.528 cv
273.515 119.861 273.929 120.023 274.451 120.023 cv
274.685 120.023 274.91 119.996 275.144 119.933 cv
275.378 119.87 275.603 119.771 275.837 119.645 cv
275.837 120.392 li
275.603 120.5 275.369 120.581 275.135 120.625 cv
274.892 120.671 274.631 120.698 274.36 120.698 cv
273.623 120.698 273.029 120.472 272.597 120.005 cv
272.155 119.546 271.94 118.916 271.94 118.124 cv
271.94 117.322 272.155 116.693 272.597 116.233 cv
273.038 115.775 273.641 115.541 274.415 115.541 cv
274.667 115.541 274.91 115.568 275.144 115.622 cv
275.378 115.676 275.612 115.748 275.837 115.847 cv
f
278.042 114.263 mo
278.042 115.658 li
279.706 115.658 li
279.706 116.288 li
278.042 116.288 li
278.042 118.961 li
278.042 119.366 278.096 119.626 278.204 119.734 cv
278.313 119.852 278.536 119.905 278.879 119.905 cv
279.706 119.905 li
279.706 120.58 li
278.879 120.58 li
278.249 120.58 277.817 120.464 277.583 120.229 cv
277.349 119.996 277.231 119.573 277.231 118.961 cv
277.231 116.288 li
276.638 116.288 li
276.638 115.658 li
277.231 115.658 li
277.231 114.263 li
278.042 114.263 li
f
280.769 115.658 mo
281.579 115.658 li
281.579 120.581 li
280.769 120.581 li
280.769 115.658 li
cp
280.769 113.741 mo
281.579 113.741 li
281.579 114.767 li
280.769 114.767 li
280.769 113.741 li
cp
f
285.179 116.225 mo
284.747 116.225 284.405 116.396 284.152 116.737 cv
283.901 117.08 283.774 117.539 283.774 118.124 cv
283.774 118.717 283.892 119.177 284.144 119.519 cv
284.396 119.861 284.737 120.022 285.179 120.022 cv
285.61 120.022 285.953 119.861 286.205 119.519 cv
286.457 119.177 286.583 118.717 286.583 118.124 cv
286.583 117.547 286.457 117.08 286.205 116.737 cv
285.953 116.396 285.61 116.225 285.179 116.225 cv
285.179 115.541 mo
285.881 115.541 286.43 115.774 286.835 116.225 cv
287.23 116.684 287.438 117.314 287.438 118.124 cv
287.438 118.934 287.23 119.564 286.835 120.014 cv
286.43 120.473 285.881 120.697 285.179 120.697 cv
284.468 120.697 283.91 120.473 283.514 120.014 cv
283.118 119.564 282.92 118.934 282.92 118.124 cv
282.92 117.314 283.118 116.684 283.514 116.225 cv
283.91 115.774 284.468 115.541 285.179 115.541 cv
f
292.874 117.61 mo
292.874 120.581 li
292.063 120.581 li
292.063 117.638 li
292.063 117.17 291.965 116.827 291.785 116.594 cv
291.604 116.36 291.335 116.243 290.975 116.243 cv
290.534 116.243 290.191 116.387 289.94 116.666 cv
289.688 116.945 289.562 117.322 289.562 117.8 cv
289.562 120.581 li
288.752 120.581 li
288.752 115.658 li
289.562 115.658 li
289.562 116.423 li
289.751 116.135 289.976 115.909 290.245 115.766 cv
290.507 115.622 290.813 115.541 291.155 115.541 cv
291.713 115.541 292.145 115.721 292.433 116.072 cv
292.721 116.423 292.874 116.936 292.874 117.61 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (005x002.eps)%%CreationDate: 26/05/15 5:20 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q0FMNcT!mC^capqZ3P,OZEn.M:A-goJWk%>J,nj.mI-+n[?'F_MQ3CQqO=(%k4I+*>V8U6-!?Nc4.X[+I[\f5o0)"-mqP`X%e>-tb8]0&@Q=;,fl.u2=Xm<0SYq-jZAIQK+;.VUpS!o8lcng]"_J@-AgWrs'ffST.hJ1kaU"*h!\uWrihj%gEW:Gt?<0F_u7\fXK%AA1odqb3f,HffC[hPc]DSZbX=WN$g>$<?IRs&3i8O+4lMCRs"Om^c5r5@]eA>m(OdL$tg^YPHcEWRafVcrtS\$U*pp"8`sc5Hja+%W#^[,'bOS.\il,]7&BOjq>7MPHbJ2"<-n4<o5T>Um'PJRQ-Lb'>s\KnWg:"tNBFhOIC1#Z?4F53=3QV[8B%4\40=>XM/-f@HD"G5%dt&DqCRAL8mB:j'5HDo^>,>Eg&.[e_^%;+#e=[Td73S;aak9Ibf"#VJH\a^'MHn#mUK4eR5fi`tj[S@&[K$=>T;9=mV=S$ZTg!BP%I\?)/8V^_>?#WpA]@J.\!sC"=>4\J2KrJ=^$p3^@-Lf>]S0\$9=bKXD<Aum(<I>Fh!!Qaai&9kh;q+qtSbd]H\`tGA1m@Rj:8_D5%?"e"FLO<M+1QM+BbPilBU,Mal[3d1>a].4i^ep??d5aL3nU\W[=fEX#W>^AH=R7/FnjjUd`Cd=cO;a.1HK;i_r80XK/Hu+%Fni<p%piKg://23cY/=UPLSq]n:N`3j/XPF5ns3iQ/^&`QQ3FZI$YigF\]eHm0%=lHW8kH3/asQk\LuB`Dt"(@$3dA..);=+!^%nGTME$+%:Wm=mK"&p7G[<"dG6l0@?:#1=8=m\fm(&/;$U17"ZjApi(:8q+PWXR6_'d``(;VB*RrO%m$Z1Jkp]W7$:Okk.6m+jTi"OfRJ"[S1%"?6]H$%AfVm=J-4;_CETlQ;din<e0WE!\_MS##/!H9s]eNF3"6=Wamej<)m'p;&+A,!AJ#9qIIgK>14jg;eN,E.tq4m=S40"g'$J%&"eMq."P0m"mpq<dYgLc#[[me^rU$d-ti+gqM`ck\.5nPh\]]kb6di,3MDAh-'28ZOW*R.e:H1*ab86]gSEB\.C9ULTb`c/BHQ1>%Go&Z<%^[jNAs1D\LN&8]+O\MFR)o]!2P?R2$BYLh(T^C=h[+FYlNAm")c4h+KXHfd%^d-s!hHu"Ss+YWEh\siRRs+bh@Ks(r/\q&%d!"tT,0dJpBGTWlOF8>/9^[W4_:q;2R&5dJAm?,M!#..__V9Y]N)iD$_b8pN2cWkos55Q8MCSS&C#k-G9E)cS"olMJnh6+`9i<27%P(0o7IZ(u%TAu$jNl,ftoNs4@Sqt/B?Tq87Mne=[,$ca_'(M=d/!\1onX'/Ppci66U$pp'oIKa^IZ_CDI@="eb]6Q8b@OV]Mfu@1%cClUGLX_.V$U#/+USufGj^j0.%ZUkUL2r(//h.'?D,GFs%fB<63QEkq?i2u]rq8M$_qT?sj)>$Fc@Ol]L;0"I(;XVK'Pj;j8Yg3g%Q5,#:0IY@jNP,_0!Fp3l:5p?VMViUTorKA5k31[u<h>T:H@k>@>ssC#1bMk(c`mm5%L`8fDF,B%RWuuhR2X-dV*h01f`VE>3qODD%9R=o\4VUac]ra"^Pbo'G`tTc@H)jWg>5#ZK^bsRU4AsG<[r!c%WpT18dupB9I;eHLm1O_?38rR;M$Cmu;e7N\BjnD31/-XEAI4i_%ho>-t6l-sh.q&"Yd)\j3ZoRcQid.:GdKY8(P&UK0Ft&gQL+OMmb"W1#UYOpK;/%aY_,1?@W9T%OQnPraW[_d<==EqL;Ssd#d%qNB%7)&aUI@nWh!H2Dkjmn8c<]n'i;(Wsd!MW"sjqJ@45`$9YD7>D)K'O6f^[&jWC81C4cop/Z693(kn7":]0+[_<l$po9D"T*WPs&5B%1=()E@)Y:h_L(c14Ol81<hS((32)CMUg5:tX5pBN=u3kZ`;7Y2nm2N(PnL?k5V'_7aJ/e'+n;EQA/t*Dp1Y.@WBI/jW)G3ti05WB%LZ@C"8uRE/0q519]nkPqPBVfmL&FfCA^pabFYNYrX^S5d7+)k?^.4eap,;:ce92[Q#kaQs-KTf,8@ZGeE`'oYAA.S&fC=&Xn=">%%]e,M#*LE_N979j*i4)IdR#ZGD)rUkG&b:s]&_Nt@a'PdNaKE(*Miq+5\cG]_Usu:/A,Ii4=b@K297Yk3n0rh_.4bW?Z_[To=VSe=%.Qs52#DlGn3fX$KfOm2jM'214F8uN*bN4rnfKq<MC5*QgW/W.4KT?%r1W5V7a9YINa97G?+/8se5W_dp`_0;FSF_[[VUTWRcjI2b%_)?^h@2>:taTF\.>4J)X9u&VqCDj#fc`"TNCP'P5]OI*Kej35k9VSg4CD@r+dD&!c\(HeQX.fOo2j"5A1L8I@Pi+:CJ5RknkR%5q%'0XM!*6MgF<2k%^/b=u9GriO%R&;D4a#8jbSBr2t.gFI@grkqoC/NuK/+F`8o5o)d-:<kWbm5=io5^H7CTEbsn_4rZQf/P<`3)]*%:o8p:`bTGA>ZpX-']F%/?V/[)D@9$S@Jf&9ojAgWI=p5XY?ds\QC[&b0_!sJa]?eZSLaLXj;jRbei1<QgVPY4S?mI#6?m:G$kjQp%";cl[J?OXfdMA3DTE!tdO[^T6j-Hd<Bm;?e9?$acH$+d,BK)d7o&AYT?K*1T)]:YkYa-CqRZ<>jqE-r;;6mlgX"LYNVW:GWW[1;F%jST.NN7pCXF5afbc,C[0b%8`1,)&l*qMf9XnpJY4Gp%)Y,rHQi/4I@K?B7bX(dmr%V$=`@0eCa.QZ.r/\Koni>'NG&FX6:s3(GN?%RJMDTQ7'R)"WZNK>.1)\H!H4MC(]pPE]e:@IYj,+Ui!8qkIAP9/iIW"o9gr3!!Ef%OkHh&e7,1:WR:`.7stAPccL7U?]kSGVdOSJ%Z=o#'&3ef?!9O0co['#=4Hk^]htP&(i9^PBK8@#=`gu.W=KS+6pQ4aCpFikohC!J$n-tHee,)$BkPQP6q&>=L3t`"@?M7hEDc>tc%POT+Y?]:[P$KJe\I6.iRpKe*a*p%n1T6kq=0g)]o#>2LC[@&@e,@p9QC=*ZP=a'5BYkLbc9T19Hkb]t[+_JR0S:T<54GFJULdn$?%?$,G=8Ia[[dH;h8i=U!h_:H-b0?/G0P!qJ%]S^2BP02bC2iuXiZ2'&$o>63"VG;)/R%C_m:(jbdbAE)OjK0'Z.>_rocYpknE71Ug%Zhbj:^*n9`0F<0'B8M()?%\.P(ABJ&%c]IHS)^)%:^-m(\+0K02Vrtnc1o,$#CG8`Ak6D\Qtmsf9dm>!Y2@;UdkLu@?^^2fM'KTV%5!hE86onUg<af!nHn2S<@+i08eltp3X[_WI4QG>hPOhuHVbPa&naGZ$(91YY_Kp+Z(dE#3:E)O^d8$V4e)"m>DC+Fde^eLfH-rV(%Tk_]5f0?[PhEl7S(5Qnl5P8>7;lR5B+p!rJPtio&*ho"k:\K#%gVqn8<p*,g:.e1(^M8a/>6;u@.a;`!]$b:'#(>4(1b5+B0'A<,%l[PTU'uV<t>Em),>3g:bLgg&n>fDI@U4W"c#,4`Y,FNK"Raj$G9n%Bp-Y7qhS\N"`Ij^ZQr,b/d(Tg_jKCqFfctP3eL&1fZ*2iRc%k"1ajW#l\Ti5_)Jo_ru8;!i31ki'8oHD/c#eDE?Qp.,'5#XQ7INeok;7^2mkH>PP)h(KpI;TWXLe#U5@C?L(jHaU%*BY]Vbok"pF%,.;B@g=B=Ep3%b.5:Z%=L=uGPj-o-NT_XNtY\[fN<hbSW9:iq*V;C*h=uVR,BX[oh`'9EcM>;L/r@1$khW$pXHX-BH-'o:uoD2N-%22,(.Os^QimMPdghp)jNpWu3XD-Bi#2h.SEqrl3F<:lfYW[*XgpQ%qPMMc>t'!TLAVOGR=ZaZ5kAeAAA(K6-Y,j63"aO<bVL'/Ss%EVc+0gEm+]FVB1ma%kM)Vg4;U_&A&^LBsEo\%XcY$D[6YWfT_=YQ2oI7>ha#?XX4Z8h8Z*7Rm%5/GkF<'7SKhJ/ad!htXZq-F7?m%9#EGG_"Oqo6ESW`+IPW-o.m>EK[hS3>-6)ln))q>XdQj_3]q:[CDd'KFHrRj13VO?^lUe\hlfK_<EOg5-B^I]?L[R$.ZGNR_+eP9%:bt4pH[iNhdql29WK9Sp.JTq9.TOEFnHi#^,N,atVd=Xc^o#0?^O_4@a(b>+jMI@aoCc%"<'.K7XlIk5W?N6b48%3t*Y>oA+8*hM%?`Vui=A$rGs5f9#h'=Ymn4n3#YCVAPcSiD]W2mLF+]ThW[K#'#&8gY"&H!q_j5,6r^"1fM[<\?NiSlhk'Js!3T=*rl4uHQhg:r\7%N;<O&XE9OB*odG5C>3MEn"Nn`II35&nP;cn&BaQ^[KJ=QjDB8<pOE/a)ZdR1qV2#tL-OITo@?_#XbN$;rfq?kP5J1X^OHZ8IPfm+%kcUX8J+m:omu7,BY4tf+gA;`>/6u72MIX6tZ=Ztnqciafi"iT1Vghd+rXO$F#.B7tF8`]hoA?4\]XE.-I6+J.mZG_d_/2hWo<$TY%VcE[)pm6rIBP@6lq+s/`nRb,+9CW6<MO*\oP^g5,()eW$RX\>KOO2%#*OLR$-@,Ll06\ZP/'[g\b'P^cg1iuWh':kQL!rf!>O22e%94$-IgImj4oj6afhPg2Jp&^"#`a#EBal->o^Z46f-@;jsn$X1#^Q0k8:ET/@DQ_H8D,iVs)P7XkU]Ljc`3u2ElHS0gX`;`L,LR*4%oDE='>6f!>WCgL&*QLe+[VJJgilX7";-"^Y^f4cqf;QVDC6RS3?T.4gW!f$W+3VZV#+fjJ55ARd0[olF6:q/'l%ZT@ZH`6AoiJ9E%L9MO1&NqtT"T^;#&t0\AEOXJts%f]+.uhoEV5X[d0Rn5L4$/uO'Ba>E,dQ"(]Q)?H2&h:+5d7cl)4MTTXI886`%W2nN)j1`-IrL"%(7J8"Di\[;7+F)$P[%8r5n@\:XC"uB'`'>P^Ju2Z8[aT]dS\hOmf:a:Q"I`,JYWcW,66*&#_6@%!WWUVa:!_W`=Kh/LB)>AC.n#N%nUsuYWd!dIY+559]it&4\0HcY:"&[IB!q?iEkTpB5bJ(Ao@dEL8Ym'Q'#[gV[:8_1PYdY[a0Oau/=*QG\e[XMZYp!UDs,+e!r@`+%9rbATH3MFFW3L#hkZ+'i>eQmh[Tn*YjdPXtJX(4JI'l=1J@@R9fGm8>-NsR3?OW1[MQ&!+hle4#O+(Kq&!DWcgP\pUCp.E=\f'%+%DL3V],4'33M8iOA]*l\)liBUn3j,5I<#"!&Ru[GV\`NF_R6d$,aYEb<m?N/>%H\O6+UCV0dF7;FpoRD3-f8)=2ZI^$;gV%'FM0</%T9]lQf#m@*mCC=GEus2rE!8'Z]F/VnE<4jGP6pGP]"M9[jY)8f^%5EA#W5H^c#0gmBqsD<qU\LFWupH@rDB\#s7o9E;]-YR4dR:`%Z-4Z4^0rZDg`'PX*<DO'IX:CR?LeL<>5o\'?,B,/:,=^SS/7X<$RMT%>!K\i]ie!OH_&_8o9T[`IML6KdmNk,Xnsi'C;3-ZH5",l%Eapm[W4)"0+8M0k^$ClbDS+HjebZ:f5?W)YOk6a8X*csigIp[XH7_m,J+!V_WJ<V3Qn7MnAjDe!Y\?Z!Ze9[%6uZ!N[FkCcTQ"tF%RT-?>WAM6S$CVgFrJdK#X%6_"7sN9%cm"=IUFnoW)YJ.\LWEtg-cBI'\Gk(E<,:%`:/>J_>J4GdZW:VU`%LqbopW],I&54uKM]dX%n(1&/S*UU&\p*$[k-*L<TrCAf#1RahCEbYnpuiJ_F8*#tIROJ(1V+K?)Q>#VDI5O`"dL"2`oiqta'ugV$6)a'^tf"PlY#j;TnOC]%9pSRuc>pLcI$ieQ5=qlDA_8NeWhq2a_a62$hnBZdXl"9hJnm[-HL"NdBXS&a%LL#a=L$8qn>Y+lS4jW&(\sGsFq7852nJ,fC&kG'%/4:S6#ZRSIc?r#F6IgD'Z!f*pe=BF6qtAV5Hd)G2g5S$LIoSh7lGEHG6e=N(TN^aWYKmV@(od3*GD8Mr@TW#SfkZQ#]iI4<h$.mJ%+ukT5,D/pqqPas8lBg"Q_<QTY]:0sZ]]"ffG;ILtHUWTo67T\"6"fDK&mV8a$q2B\aR<^oe,=QOOohR[D6uC>><FMMe94_a1d@qa%J(ki[Z_AsHA\g``3)u]M)#j$/+&ioa*8]X<UgC*-r>AG*)bj83rRQj&.'Q&af$io4e2lQI^iBZl[#RiAJ80"n<Wl'L"B2leRMdU>%e_4q\.AVZYY[QY$hYX=[rI";)g5@`-BMb^;S*u3171^!ppX?5fh_bp/,OB*Uh=2oGJ:Y2aCXDA6Fu>d&W)b3]j7QkH7Wh!C)H&+L%`_/"ge2kiFf#RuVqR!C=fXlqgFZA/O(rnoWKk5?7/Zbtbnn5PMJq^3r!YsA4W![B7UiBtgoChkOVq:&&<<RdC"fqPF>ci/7n'+..%4j\qSfr/m.Z_Ac51CUJ\T6Sms`l8j`3^_H[1(^4`B7LCF5i?@k<]X)M$2$@-N`TqH).Z6!I`l2i_%f-)A2USOh$hMqR^I#IIGG=s%PeMHPI43$Z*Z7(N0rrFJ^QZVH)R)<Nq@0V9`HIJRP.;4J*f"Iad?Q"$)!IuJ7(!Ug_XG^>Ml];)"SE7(C"'JTBI=H&3phu/kC6rD%81[A(Is^ip,G%UU6AfWmQii"6Bc"3M%iCIE:"Uq!*Q0&bWrFqMLrLh"Ym1cCBME28/SYLA-)5[CWm[[laOKd,YB6C2$pq3(>\Q*#%]a1IRPusu[gQej/TRqAPi:PK%[":59#k(cfXB?@0ar]DF(g6#07\Xdr>a#s$1uAL:nVE?PVOV-rV7ElO)_jc0n$N)O>3!!@q-A=\%CaBhnU@q<\k<l7s[/RC9YP-#/c7=CpNmK1[D`;DkDg]G9F$iYMSXq3Q3gD2=Vf?/aM8Ft7FoDjWIV#]R(c3n8G>C1reWRJVj<4ZA%+C>@-i$E5)"ts9WV;]M4Y=)25pB[pK6K<)&@U]sNj]i:7p=1WX8@h&RdV!Sk3lI7R@9s?b,.'EK!pP^N&?:d]-be,H<K:6A>@M_:%=`<:j4,aW">t\#7kZbgkpdssE&oioPcLKHlm2](V]R/6+K30=maI<55cq%m[:rJqOZ;<0?5[Z-e?J+"Rb[M#T.mRCo1gfUGXfL'T%P$L+P?J>8>l0qD'epjger4t&c%6mtD[k<"&ibs&(F*IIsUJh#lghu\\g="!/ooWG)G;iDMft"FW3jl?j\Xlta^2m5r+*I5>j``&Z%oWrk8>!BMHVH/p+:!%;.c=?KYWj)!9k\Aou6sT92fK+<2eFS^g=Ei?Jh>58e\Rf.68l[uRG+WQ(7(Uk#gj%'q[u^9m&)?TMZb([W%.C\`(X&A->:+>%bD_K6P\W&Oj0kWEo(4Bf)VBLt^`cX=3CAI./0=Bf@32ra`bW3&QJ[/0gq717;(@%NOe3YfqLScZE9f&*]PcSkR%`\E[3e$cob)i6E$Ct%7n\2=Oro<%F8q*n^Rlln3B#f4c`mB6S%Fri.-7RfUaI[2m9;R:tSR;CL.8YibdgQtu@YgZFKZaW@@lrs.\%o=.UZ!^]'2+]b@^QgTe]D06H(VIESt84XgUXeJ(L8Ggc&^\#iI(t+brj*0rI"DQiF3if>q5tFlAGF`M,XKB*hS'HEd,@-q1mEWt`%g-J7k5;/Fmq:D%@#E4o>MhG+[.pM<_8?M+oBC3/IN7>@c:s'UM?U73rl0_N]]p_-a+.WSC<S<dX*JPc/gHRNT_Us4gH$Ig3!U0ZK%j?<cD?0c422ht]r>(+)q3jVD?T$GUVqUE$ZG8_;I;QeW75RL]*epZmI?G0g9?g("kqJ9J=hm7l)T2mS)6]p*Uhrf%tBd2q3Mg?,;%BQnTu)iXF=IPPe)%[Vg0G3:c%eKCZE1dYu,/Bm3k4$d_;?G0@]Y&YM<FK57Vc^]Dt-UC:go&F3t,6aS'DlYadrbNVj_N7f_S`Q3=%@&,kVDQYm9htiF444`Xj05o7HhQG*"P\076fQ\N09+RY+&(8(4jj7=2!U4&8dbS(7CMG&Qd+W>d>7^2k.Nq?bC&>5?IL8GG</q_9%>oustKqR9!?JYV03Bdg=HG2;8LE\m[Sa/lRdead@r-;]X@0pc9_/AZ8rbc..&F%_Mo0!fPq8Y.'I0ENa6IG3L<sS-c@&/R(qQdcI%^(H=2]g!6ho]g^7We\Xn^p]g_f38L!@&-;^V<=a`O,ni_+&>)pHq5t-MY>Au=Y5COI;kFkDIXt0l1(D>f88hWJOlF-<fg#cD/1MI%^6AsjH@)WUl<jF>8=ee+WRUY%8dQYHrPhCU-ml%Dca3RDOhU)g5,DDl400uBUtXVdr3!N*LW[g"C(?=XpPh#UJ%cT\=`sc?!hnH6%pe>2+27l/:p9p97/PVpiIXrWdhl;$06b(q9?>cV?Ba,eND3:sKh?n%6U$"eS['i&-&YrXr_28Jsq6A^5NaFJ<I:fm+i'f[/QG<"E%"LO'$Xdr_!`T25-jgW"eT@H%m])!r;A+*Btp2WHR[p%nHnp)&6mcEe6CK3Lk4h^fjIU.Xjr;ba@-g3"er5eLGB1(NFI5&948COJd%C:<T1jf$Lamd@"5J(jgf\k/\bTA-8jWt1n"*Gt?5-2d!tj_7IPol83Ec=sV/DkV(k/iC,Fn>EH;^Xn(/@ZFU?-W=re]-2)S]<f-8%QX01SpY<7DK71:0?i*3_W`,ttVm$!\9uaGgk?#VKk%+`Z]hZ=S;rLLoMQ7]UBckB%dSKR1khCT5VsW<eVk7$or`@HFb-A.ro&`m'%gShZtf$)L=qjOd8'Dh@'q0IK,cEZ'Pm,#WhkgNGtkd;3&FC3dk;StM\95-0iX!)DN]1QdIOgTIWIa.V/l/GcgM`r_'f)8d_Hh"DJ%Qj\5#F`qb:Mn-_k:Ufc#:ZSEeC*q16$S.,=n6tJI$Y"-':X.&.B#N1mlcm5h[uaeHGAkmQpWj"jA>$#o=tZB]i8Y`D3d1e@EB4s_%(5ChLSE60plqD,7)lG3.1f2Zl#dHClK8T,IOi\*%RRu4t4`[!4BGu0f"#_#kG7_dOlQ"f([_D:CJ8Et>$)Td7*b-cH?!>k:It]#Q%VPc*%NI,s+(MI6e]aI8dL7gbG-rQo>qtN8Z.Ff4O0].K9$:q3Q;WE-o6L#QRcR#C;g"C(jZoe4`4-R[4h8eHun!UA+L30?P6+V"S%MA3=>6OQ4Q]l?/Yi,."m%#2=1;[Ch+a7,BiQ+Mc`h"S5lcQ,?7_VF)p)!Q>r'8.(G`A$#`\PNK?O!GDgp`gTH5-;@(4oRot+$!PZ%]BWI>9iCHEkGpVISi-KF<4Y)P/PJ]0o7P1+[24,<k(h`T'Tj#cq_J35NV4Ld?iK:tj+>p(^.iIMGVNEp?<n<gS*g%:"eFr=GSO]Q%Ap[t"/]EbN^o"_*o*<aKl0d=COkHb!!40s_HkHILV)8-Q5&*ptfR[W?"?!,l)f8Kl'.Lgg0;&3A("<*@bWE/(+g2Pc]a._`jQ=2C%D_[D.:XRKkR*>L[1@>^Gh\W6gL$-O`&ds,X=8'm\)Lm9.?4S7Ee(kBU.?UJq4o`_Ld61[ak-gL;&[Cj0.P]D[a.N9\@!XNMiId;2%Zq*m4ha3,"Ugg\AIgk\YF#84agk4(gI>afd"3:-k[/XM\*j5gBs&qSm*QTc=$G;:G@-V5#:O*MU35WD<_T2V[-#;]&4.>VppmajW%dG9VIj4/Rr/1lA7mZ5F?YN]1$VMC3/Ln:N-[qkY6H_^5;f9$r,i3A][7s&CKnHn11;i.h>KUV#N1ARTUA!,VsWP)U-C8GaTK=)?4%ncG;(ldJJ_)oFL,hn$BYMIn^;bKdpTd!ZZr8oZ:TX(nQ#=k`b$_Ht)]Y$,<o#c<24&e/(P]b]aA@2=uL;[hofjgJ?\RG/`-JK\h1%/<hk]-tBP)XecIR4'[qg5U`#?WXff)_o)Z>e[rg"+hpnbdQ/@F**2MX;`?q'4ZTVs?`M<=EDP=U<u^u="'NY>dQqQ%ZL3AVe=@e>%h(K]^\G=E_"_D'h^Go('AZ.2oSNsbEG@%mINC8qgSo6-ehIX.A$]F53V>`*HmY$U?M0,]d$'sgOV]4n4KR/T)XRu-<nn.<:OTUf^%J&?SV#<9$TojE1M;f(p%]&U3Ira@6A6rsf0&Oc<#p-VA33MY)WO<hk!#Z9P5*UgRArTDK$I/Z=M,225SoNsE.Td0Mkk$i=VE9Hk/%*+=puA,pf0S<RQ0L(e%:`W10$4c(&:@fuY?iAgPdR2EtTM`(XWg7F90G,K9<g=u6=+aFb@`]N#tAh&$@@`S$u+/ua`Rp`AbD,!_u%/+Y^W1GL6!`90?hP#cW+\?i"Q*6.)8&2f<OQG8uZ*KrRS>s9fpg19/@"M9E#K8m_J63%B;-2nT3S<+",O@[FRM:]3VNY(2Uljd'C%hop$gACQ"aL!]M+:K58;/8/ol(,\OBqb09)*kSTn.@cC3m=E3B+sS@^"D"Q!+7G:=(al7*)%TOS\l6T&Q[@BT(h,ZK:=Ad-q0m,^%nCUAELpKW-(2X'FL+r]-p3GftW.f<11Hh,e*`!quI.9dFQnSJP%i,;OA$dnO*nZ+aSm$I,m_k0!oZtYDN"8M[LH[G)odP,nllm4O%!`V9](pG94R,q=fIE)60H<#@MYMt+s1f&3B,XR*YG&#f7_S-;tMDYbp4g?@L?i+104Z#Lb$-Iu[D/Pl@&^.p"],H\6cA/13)dDV,%O*=^W]jp0>!!ahgahbGE@Y5pthX;C`7u7%imDHg1XcG%7UY%iO%#X`R9ECU.#Q'h&*@h><,ZEWX1jE<jm2rW`9Qm:q*5i.1%X+ZZ%KI\(?0/7^\qC<R\N>Mk&gbN[ge@.'t\\Sn5?l10cEo8#F7r$aEB[[UYQr`IEDk]@IS-qo++8A@?OW'JT%XFbQ^.8@1FdY.C2ZTFT%d$-92r\4:A^+A7Q+6Xmp3M%l3McFihmL<hE.U2DepdWfG!hq"T-fWB_I)2r!3VP0mN],U"D]AeI<4ir2orHrR2Aq`+`Zg+4;SB]k%=hfY#H>t5P6P7d<[_$$;2usp7"GM*)&TG`lW=VnQI"1@B0,0dtI5'0_Lp^+]klf3$?@T;3\%%0-%UBg/)>>W=XfK>M2hCQm!2a=^%>iQ3'je(6N`*l!")7%I,C!jMa$[iemqmhq.0QtLEBS\CthZN^dYW$cI3K?Q"7Gnc^M-72Y@F7R=PTVS!f:k_!53fT`=>\h1hU'oR%E2"pf,!MOef3U2%M"RG&r&e?,aTcL?\&3SLBY9?V/IG'BLV[:(h<;h$+efiM?Yg_)]F1qgn%"$=n5r-c4>ZKHK3d%0ddrZ9b8B!T%+rMmo>c#I6l5<m:;rMMq0dhr>=!Q"e^&8$2k1eHDMGX@%*lhTI-k6J0EXRO29%ZlR%&\SI4UO'Io66<I]TFhW+';Jb.qnrbe7aZl%\)\V?;;"RKjs8rIL6\aE^b#UTc1l1Z-fa(t:u8H2<6!pVL=^FCeqnL5Lcg%qn)*lm44J&&o_>1)^kj*?j,ILb:/([OC)"R)`qJj%%9$g\]kPN/VL(E0=C=kH\P/pYaB_^At;@I-SC]]9=#osIVk@<qt'&,*l>E=!-4a/*]6tU"d0-KT-9os7>kK*2$qdq6PQh3qLG2L6d%mX\u>E\*N6&"[%#T$.=OH.XaW&AJG>o-t\T+pLP`0i9YO,$;Cg_\2<6.qD]W#,X^6SE-@jBj1M5q@gSe1sXB(04!P;!&3FP6G;ju%Pf`=$"^lsaDrRkS!2r:hT3468S:D.e13TaDEnK)r[kFB6GkqPBkT'CVEq?D',%?\1q:<K>h"XJU=,^d]k#!pRB#/U3kKA#*;_-+"%cf>Y&Q(7gVR<,473HVnq"#K01.01+'To73h9;Er!6e@+CP<h^?jnLiXd2@%f/NAS,3hgCu)0Bt40m4%4F9Wc1(*#Dk/eBJXTF8mX%*$p@m3eNH`h(`dW?$$:AaF,!\LFtW?%d_gnEp3EJb.A`VGeJ.m*4l-C9\teg,:$]c5c8\b5r32"c5)uV"B_BW]6K-h+=V(*<._]9%Yqi3!h8i;di?9QJ8n-3:rsn*gR.kr7'Os;\X"Y`iHm,BdmHoR"M8<nNCPs6b%G5=%nN%b_$AR1-+:[d8m:nEI'XSCo5C\M=#AYhW%[80tUktcKo7]sUq5+&.IDe3GnVGiW^7BWA@$;Ht!+9naf@2U"8YU0=`lCju%GUC/[Mn9iPH7MO"d+BH)N=e'$%DNW'+BS2YAU<]R%[t($2UF!M]ZP=`B-ZQ[[:8j'5Ve%*#rZN*l^(j&)L*U6PNCol^=u#1sD=9*/(U\b;k#M:",j4]6EhtnrZo>KV?hM2DPUrOg<0Cs,%lH#T?(`bTR]cT/A8'HimbDm/o@pq__,&_okD-rY5]mVo7F;T%]?C9J)-kFOg"W$BFNKD3T1MB/p,*21M3r`dF'=8*B9q.$m"!?P_%$4f]MdpXM=90$%X&t0$kJKJ>;6$:3e_$k8fA+s>#6nguVb9;BFRU_TO3PFs5%8)b>U<C.u$GZj?1u^GlKNBP:Z04$l+ZVIE."hU@%o4?8/Df/Xh>Ffq)ZY/:oZ7Ip8U:r@I4`H@@cBdK<;%*Hp3Al>A([XeJO-_!FQM-=,:2I61^?Z6p#+]nS-[VO0#+:61!'Ue^^)MJ[%MVQZJ,g,q(7L&V6ZP%K%';kYgiYFJo&B<%h.9tN<17TA;;Ib@1A-..-e=_A=mYM-9Cuo$CB*t:,Eib/3@A]IOR6EgK7nN9%oV:XB%302VKB+>1.Zup_hj7uONfH.D265ol:c_p;!r`D9H`=251*::K=acJNKSW!i18KlE^N^m%K8QlOcUn,D#)/)B+A0NhrN!]#g@,>Z5%;;R+&VEZ9r[3$<L$'DKSLs5jS&K.d+;%I7c'9U[T<\q(%@M^aC1Ad9f6%hMI:EX4fkO`QVo9<(D&!"^VihW9-*Kbp'CA6JM"CiX=%F8Bq6UGf_LP+Gb:@W!W',I/s5FmGd"Gb*rK6$]D+cE_g1Kt_]?1d.]iZk%aT3o6DW0kW(OOGT5`b!S3%,;O#flMT:/_sX\'q]eW[%UlU4"QUHH=KCeBJ4u]Qk!5!-'fJX]"9r[@4HEhW(!b95A*L18/#E_=!J]W'6NI%MN3\$J,-lotq0Od6$nE9J(Oq/A?Q8I!:35@:e%1@!eF\<qOWA*1]!4:=qSgrS.n+o-(EAu(HS%i:`f39bh#_:EW>q/G-T)a.1G7Qt)DF%F<nLC<=45IJI%kJMR@BP4kC@k[/p4LXc9%lX>$r]/V':X2@8i!,UFROi$Zr[:8N[*0fui#B@A*`@B">..hG>(b$CE_c\&4D(bUl1IU;\%u)m&9J4u@&3=_Nl7>j&`uqoF4<QQK%Nb@jo(4AeGr368C&Q9.B6>+[%';u,t16&e5)\>jL@$B<5I+uY531`&=gl=0p*8lem-?:"YaVHE;8ApC\4pXcjqSYS0UEK7h$r;lD%_%rc+"<M=@\*llGi3NZD3+?K.\NbfPWFqe/F[3ZC]Y.8Us,5.;-p'?ZdDA`uWKjIG^bjIO1/]W$YCQ_,iA+<7-^0\hn3)Ve<.H`\%N)[k7Rm]^q^_o?]'qk=X;T"NG*h9ufh)E+BCfg[Q3H1IM<t/44eF4eGXqcGqm5V(a6)3)n;rL(?AYQ/CiZ._Q'DG@&iIX'Jku>0[%o?&ddi=`DP)CH9&Db%a%WGp7FTp/c0)n!12gkkM(hZaDeb/j'tFb/!chhk,P*Fm=uJAjRK.r8"SkEKQ]Com-%bV@EU_r5B&K,5>C%$<s%leY_SWA]XB1g5T:QM*Et]e$O#icMAT*&#pTMqB1"%/I1_fTm_GEaP8oRfP+SjSr;(JT2O@5fmYDXCn?s$Zb<n9q-qO]`RgLo%mn0/<gobe)?cZm:$AEm$!%oESDmR8.h=/HmC!=\gN>7S"[[t&@^U_Vb[<h+t.!h*5f%s/^jRBL/eGNEBYGYQ4a_j$L)0Xi8E]#?t%LbIHK+s3Cb#FB1,_N;K"B%ZLP\.V^>I:fNQ?&mF,lipNco32[c">Fj<hgAD/S!jXP]!T3F'p`9@9i$7C57aG*G.73CH"UJ])0W-?%M]eh^5/+qg7l;j8Xqm9qq!07HC$GDA8",A3)*HBtf:KmArot.CUokCpr^Q!s25'\rCTbX.BKR8(f)mQ\hslr\UdO==(#Xs)`@_*H%r536u=_c^>DVLQ!r\$/+[`P/e[\EM4,\#ra`&bhBMOHrhA+^j:<,@`1a12`9F#ESaE^AP8)(R([P?cIb8Cin.*4d2X:SCu<LYE><%N,dm6a2*_IpMIiAjFTX*dId2fUWUEgb=9:&l#0uQ;$65)La#D/pPZq,VMlY>(HEO(?Zp/dXs"FI?0)KNa^ij(;<V@](dFKB.$q+*%cBPT?l%/tCln6T*A^^hEd`"7mEi<fcnFapqB%)H:bK4AFN>8j]SP9nWq$<)C0sg+,:'/\:oBQ<#ZKZs]l%1J1GhI1)oB+!0Zg!'^%l1iuu`3SX+A*D%2A%QS*QVA9\9./^QPKKa1l<PC;SnL#fn>b]JZg!'48kASJ-CZWdrrPtS*\3^4.$lR?;]6sO/dPEc877(Vl!ggb%NgWW)#6b`).?6joKL9c27Q+P"NfB5s(R.Q_<o56l9c'$e(OT0<38&C>!;^b+`m(BEfYU]__K&+8c__*@SJ1u)ai;W'$d,:bE3JI2%flTMC'QHV:LtQljF'1,$]Qn':4(>)EKWi%LRS=UJ+TIl'6Y4_l8W&l87V&<@-\)4JY(-0)*o/Y\QF&U7R`]lc=GUIJh=!YP0!g&S%I<EB_`MDt'Mg]N\_#*EVk,e6Ak.LS!8**[S([Y>sT;WECQ(']u@9A\[cQD>M]"%!qrE%@#B*o1-dm+GZGKO%k;;k_.L*I#s,s)#C%A2:hSU+LN&lO0!D1N(r+me?07MA$15k*io$S%LtjK>G=rr>Zc%5@W\2GHkWo@pO/rod/mt]@^gi@Fs9D[m,/fC[QSJ"9`(R2dFue%i0q9o2besA;]+eg4#U,/??G@;4;rUl?/0M[g';+Xk4GcK2=2Dk7c&Z?&0nM0&_#u^+,mN:T1UkRgr@4`M0,FQ%u8eQN>(PG9.KLD%EMge%J3=1l_D-F=)Ve&r3e'(ZEBTf4_X9r`gkh:!'/,s`bLlHW5GJJo9o\"C)f*-"kOcq^Ii0t,CqsrX+a-3r@'TDLa4^uVJAp3h%*PK3->J>r)4q;q[,aU5MS?[-M0bc\0Kj2`fE5FP2%<YJ+,VGNrpEWKjZ1ctfB`d1]E8I,7WIOsu^qU8uYDeZbJuFZ=be,l/K^RX-%Lri87+rT<*Lre,`@fMB.Eq)U`)o/*E1kEjbs1-/Nk:4DFAO+$@UU)/!\A8_>3fUC84Qlu6m_=gLq%u&Q+o73BJ2?Vq\H$1RVZ`+I%jJ&/hYrd@f*3U7jF"(Dp4c,<#$puBt/CE>KWo;K=eBiEWh<=["_q]3$Z%T1:6uKLZCDPlQg^U$5iA]O$RJAgO5#K*iH/kr6h[Od>%glsb9>WVGQ]Po_JnqK5HqbQuYi<+W+ZR8(W\/Vg@->$`SFnGC)\9@5tHQ4uB0DB<mM7!lOr`]@l]R;C*/a:ZNO%0l)91Mf6j6sOq%E!FO[&ollh218rbZ>Xg/aSG5a]"Ft)MSnVdYKefqWT!-T5;P<-?XG?A]GW2U.52+lbm8Y'FXCTG1%?1k=6IK)#9.Eg#se<]3IMm*%HaGd5MkcQrED%t*RPBh_M`%]NM4;L!Q,N=M#p!Y5QJljhDh_%s_R\4UY$o+cM)\LM8B3FN5/'?qr-`aIQ#Q3HjDnLD6W\*658HK(%olg,*WPZul\t.&fO6iaV$0AZ41>1"XS4'q!=BLT!h_pEiM<H1`rsU(oC'*!MdKgD+_k@NV$"<sWr?1-;GN5FmW>>'XrTiHbD?%8Y%[<-l&d<\s$d'oQEP1t3P:p+PSRo;a2nDM*bbVAhIPD4:oFXA@+jMQ,<YAR.t:mLbr[ai7nXY1bkb"E(;_s@65XK%sbQ*R\4QMG/f%ce)k<O7MYfS$;PsSo?YhDX67PGGag]I7UX)BD8Xt]k6-=mU9=U8520'_t2iuF7sE?g2!hfZ5a\C\*b1YWG)a&2pPG$R=BI:.VJ7e%qIp45CH?;P(LP&MiLV9Um`\cSIIUZdpM9UX"KA`n8ZhV04nBgCq_#DV*aFCD/X7s3hHlb(Vp"uW9u6a1grT?W&WZP9e-ekWLs!p#%C+_t=`3IinY9\ioeEU8U^MABRf)uMQKo"uWF>?tBNK]0tk(7e7W#0a5A;ja:2PO->qB@0cfg!F<0+PP#.\*;$i4_,6jHd<T:#4e&%OpCk<I0&/K>H7h3UgRGg\J&u`T?[[X5`;8"(1V,[goRj`HSjd('*BO6Gn&ET4"0DIjt85DZ\Ta(DkGVM,iL<"g"'!s[%^(uNY7DG%0<L%9>*PJ+RjNOFWq<O+kVZG<Z")""p538H`E4f6OB334SVOrVl#pXR<g]QEDhs+85^<+(,lIS&j'tFs(`+58.nsKpqPf,mbE6EK%`QHhLa#J`1&VDg5c<>fF\JTBc*,!`VIt<mA@5j<YTZ\"=,?N%*#D9qRr/bk6iF`T7#cO!bj8?fd4QML$(uKb>/po^N_7,cN:*dH.%3ot2I)%iH>^d3ER@.+<e<2o9ob\rQ3alK<e[U>VH%`5R,U/"1;iJi2?$K%p,,8!b4NZsL4c:fXOe%;K5=*[81"WVpS'`fW:1(sgB%qHi35FGYrU!7lY+nYhH6>H]"SfUuK@@5p/Qj`3>@%9U.\Wf`(V6R^"OdY1%9ZU<QI-]Kc(A-']p!VC'ecrknt1^)tAHG&dAZN)4N%T&[eR@q>\\blJf/"+(l@Tl/?fg^Ou[$SZH.@.61iEO,Z*nhXs\N1U7j2[;%V*'#2N0Q%BYJCV-m/AQ*h9n05AQh$8%MOqb=J)F5=%JW`,<CFe8<I"P1gR*;CS`5:m>_jBrimS!D30'*JO+*k_indQ7d)uWYus&j+:bb]]Y;=#C:PV:B^MT[@t_KX#L$pGVF\9n1/3u_qa%Hi7IgeUOXWaCdm9me)Lp]Jq&"3VL.8O\M;eJ"P0gABopeFg']<Z_8^dY@$q(IRE0tNfa\]OHVZP]m`6W]=?D;GDk,W2@ToIl8M<^%fC6Be__\iX]@S_4<kkp.YGCphN>K'_H`pduefDacJU@?ipZolSTfVsT^UX*)j5'%ad>,GpR6X=biEea2\/.!K7JUH2h!5d4P@7U.%'2!JH\,+("o>eGo07(!`]*ir3]mfM?iu:)C4nMdiOm_6KHH6K.O)H!I'MsJMNa/h-ia0C9eoDDtqF.<[O9kdZp\I<s.ZeR(;T?5u%YE+s?>Q#cC79ZZ.FK]'DXa\)(6c7gI([V\Bb"A-sH7'^`-^OK<I&l/O\fYsr?aLa`GTYfKp\G%Y=WZ)i_r'br%;!>'I'N/5Mn[^p%@Z><9]SB\?Xa\o_:#K?mkZduul!`'qr*I,]ZdL1dAM)g)(Y=ZV]%:j_D`mI$IW=f9)uj6ZkZe"?]8pl0p$pq[2sS)*?7>e_rdlq)%L;2=n.$upBM)qp0oo#D<j)_=ME3EX@XaU@aYORh8,B*7=DD!!r?GE1/D&W4V5@6IGD`qn.qtPo&AjtRs2h!ME^"%&V4]guV^Q<Cm%h,$I_Wf2A0?_"IOa1p4Z3j.SXPABf;rIWJ<`*=g#'H?:C^Z]Anff;1o]meAXG/%(<HEUZea("Ii*9(;>R.JHTn+DUHHZ8=urV@L$%c`MX9bF&&#nW"'kePA5CI]RnpU(^uLK-n2bn+DTFZ&q"(f"HN=])9CdOaS)(]me@e$Nj-/MLD[8oW<T'gn+')oj]6N-cD0*n_qed%aT`.`GG0Wkal0plF,9)Cc:?cKMRY3b%?kYAn%U5)+E>dV:P:)>L:+S>Q>A0rfdNkGmjRmmBaMd-foqlD48IMb(Hq,.3a28&Knblk%eC+<cN0:mMZq2"RVb52RD=1u"q.;,RG2G4McGtAOENJ]orjl@)?hmlmbCA]?h=osbo_2/<8j-.R3r8QU4l`XBP\,tO^<b$lceEg$%bSY9D;>DP[OQiRb_]@b`J+e/u<BWRPY!4ORa6*-HI-p[PF`,#DrgC>W4%Q/3<u^HaXkM?RoD@5?:3X.9eoC!OG\_1dTAQp%^[Lpj%(4JHEmu>mcD&%7HcKs?!]K!YuAX8pr;qh-Ce^D#m\#knd#C30Dqe]]nZ"D<CSJQLadrhgU^3$9FXOjWNH@O(9!AB`sZ7FNErQq*E%BlAL,SaJiQ/t6p[K3*IafqiJ.LX0l+m8k7NjE[6h$f!-*o:i)uF5)KI6-R445gA]@FuoIn.^Glmo9Hl?l1EN^`TBk#P=>F*Wu:@j%duA+B$Fuu0/3,Q[ZeRI!@DCMn'B^X<Eoi4;ZnbR\U9`76f3rUpe-@kuZlgQn1nIC\9'LdtACc>lZ"^$B5K16Tm06pi=a8^^]<RA(%eZ%qPDgd*sgT@WDh<E87de1'JK\4l2ghC$L4=&@c>q>T*i*:[dYiGl1H$/B#L1J<YVsUn0<!Tl^pXM=kjpnPtT9i/O2nSPg2>=J?%JY_+519'.fD``4+Uh"iDYSZ9/a6(HG1Gd(cWUi)mN-Jejd8,*$kPZTWZe%Z22jWu01lC+5d*G%5]iNFE9A5M\_!W[F`T?_fH%'sU%:L0RhGYY%PTa(tr,I^b5&!l8]LJ)R`_2A0Kafb.==nt@qn1J-HV+3WCDoaRk?BiVck?hBRj(8&&]2@Z#1AH;cFa%G%JK\Gkh-DJq%GhbMaaV5o1F/]1%&;r#$[ns8=<@*Q6"d0pn.0EB?<g`7R/5gP2HC2NKn4%Zpo1[OQ]<<^\W5?k"NLZ`RW,GraGm3!W_G"QmG2DU-%mK8-=TWV.f[jN&P7F+',ZW;EVpg*[!as[">1[R`>NQor*0C1.8Ln\fapW]`NfX'r6@/Fgsl3D[8#dDnA`bHZ@3P4u_pok:_\Vj_a%)Fag1bMOs:Q(Jl\&%%&"Rl]l%$XJQJnrqgRbQ8XU?OrL6*`S44B>.3q),UD?KIi4'Q)Uf!r!fq2I$&g"hs%a,gtZY*5O3[kRm,k]%oalXt'<8-Ar<"UCQcOHCg/1]X3ck'.Jt8AYh^UF9%GE,#'oc/`M@a$1Ym9_%;jBG.\)gWI\h(aJ]GCf`bdq"-Ah32RX7+<DbOTu$%psYS:]6!S%c==u:XClfD4'\,KZ?MoE$:4*#\BPm2L"frYV%VUtG9*"n[qhsrkn2EIG@.tAipV!`@XEOh`lK1U.+:A(_<W2eqQ(u%%Aj]\De]3m)I-E\A[%C]=FPpg6CH#Tu1)E7-dXU*B*)U"m<ss,qK8_uO>W89J7)SRS:It:FV_Zs%eEJOKI:YUk/\QR]]@]He9bTIp%.lb\/$B,.Ygl/bQ%6mp\OK&#]#mP@:pZ_j,j%=m.%//dj_bC>ZR(DmRJb[*"f!f%Qi/sg@]QL'd6UJ-G_8/8#H2Ud1Q0&H5HH=6G%Zp*%%6Fol_hV?,*!bPADaB3<IAJOh0!4[FWV`&hEVc);WD^hX5M9;[gM0'6Tfq"*kf"U/jgqV5!H"[Bb,E>h2qOR=0\=^h*_nOi!%U^JiJ\Jd>A4(f1B,jqWRY<,jJU\h"i,S(B-`*0)E#<*H74Y*pZI-7AmhD3jTO\[QEj^[k&@JtF.[=%YSQWhMVSY_X$:!LQ(o@-B-%hh7&*CAI(*2mq#s/>ne40686O=$h`-qutcYN?oEdl$3<+L[mBJ(Y<&ud<;M[;Yo0dIV3#rYNF,JEu/VAk)4T\epd&bB7:1:9f^+F%rEHdJfoL5jftWt@d)J=SW0_-Y#iEo$G&+R.>CKo8S^*e=Y92mZMT/?[pTO!&p:Ru9a17pB9fJ!GZ&QA0loJh!\!&E4,UY5,?cCp/%mHIWa:jb\@Is^lH(QHKJ%;p>#`,ig\ir^`^jkr.>V?&j2iM['o[R)BA(1nOTkn]caPLJp>7(QV[c'KSUNA3Z-6XaU*JoPREc\pOn%%j0-:bh5Xen9^r+)M@:+ja+(n.L*0UT9QV*bNHiB?f[(al@Sq$3+-h-M]S*[I[7-S-_p>+lJ^FiC8k7[J'QC?.d`hYea;g12HS]2%WcuY*L75$H.AL!8LA.c>ZuRd/m,l%%lKLiW,Kh1Sn#b,IA.l6E1Rmr0]n^>^P2p&?mV-on6,U1"`,BslL2X22cH9X<ja3gg1I[lB%8"%cD\`re:nossBbig3DR1IYsPn"YWo@3?J2R9]Jq;p+`Zgs>OV\\P,A6bV=*oLl=Wc%o81S,K_ONQuiFk$;nP^ON-F&bT@Is&!#%=+9RCUe3;ka[^/Y+5+Ma20`rl`m3t.CiJ1lJtTqsn]hZ%Pq9Xne,B.r`pMi;2Bu^T2+(+?+'I@Xl5GhjEQre<UQ.I5Th"Y3a)LD:%:Yoe'AJ?)]\X:eD4!.t=HC3h=%i1(l8'pgJ,@V."F5JA]W**WQ(`N.DrO$)#$CT+p^mUS6d?P=A@Nh@@1c0?e4jGXgQ0mA]YN'YC%CWYAX/[ndDcoeN+LaI!ma4n?^g2!P1j6MQTG^Z#0r_uWg[^2O]9`F-U4"n4pk%<;;3NEo:pSW5eIbm#M'BsnakZhhC>DkSWp_Z*:%.uTJ-b2DId42h\*AuE8;V>B"<mc*NCZW;-/T;_F^&,U_Jm''Hgb[jCjeYs(*R[2G.l.0>F49Q,<N7C'eX5dZ\R6c;?pB1$f@Xd;#%!BUs.Hl;!?FH>[SAKr>2er#m>qDIi-T6lXap=fN/=Zdc1,P=)0"21U#H>LVVL-<S('k30YUQ"!HHhtGDh)RSK^Z0?]ZD6&KT$hMk%D&X!KC<K$CLM4ngo^MI*iU,qq3>4pHm8H&HP)f=/q)TM%j!4=?1qlcf3;WNW@fVAXi)'Y"o"!'\D<&i)W'M7++,/W/3+Dglk*90>%p?L]&Oc'DSCE%]'kKuOLI>iZYYHRTLd0R%!L^'IB_sM8YlQEZP?=qQ'F*3Ll.co46<cPN,?+#oHA:05P!2(nE#'\keWmBJ?*FHh(%S4Hl5m6Vur3S/X,B'd'Go[)kB=T<TcQU)i8f`sU#eO)/0=d\oA0,W0)QSeMG$o7+)oLa2DBgb>nL./k#0N3?Imd+b;,-.Gfj+cUa%-!!g&j$M^iOWhcsiC,kkSmWBd'JoEGj7i@?b*>L.V-YB)2oL`9+_*g_NKCCfobt`.%A@)Q.T_:^"f^+0b!l#bh9,W8]\?6PMp''q%%75B]WMR6&mF5%O.&WB'X8DC-0"(WIk7Jn_a09He#/S!:eABCI#8U92:_-u+XmE[/,5=+=cl`#Id-PnldIn^G-BXmAS79tRaah?q%kVtem"'D`HFf%4Z*-i`JMP,^!hN*U!:1b+@o9YS+O[Gfa(kWhhlnA7b,KIiZP'E@NL\^M)>>>Tp]gbdDrkTFf_"?kF-pEAbC4:B6%pfOlY.:6m/2g@qmG,KfUd()cq9SMhc*N\FFo7_MUINe,%,PD6mXk0[jik`L2A<l!WF&mFdegl.#O0rZU7^G+BS\ogLbcg@0MqN1(%kH[^hN=P>bCn3.Aj=W(b4N3g:iG[i@'`,8H9]C%i&2]ucOo>2[hK%`@cc0ESf;SV(U##J_K!SGEVD]LK:9)H\-HNiX)\)e?NlTt9%pVZom*A9iPrkXW8h%&Jg5MGY;gYjcSJ$e7h.aL?6n[R=D>2pR!j+Zq$P9#^r*VPTmUE,E-*?stdlZh^IpU6B8qkq@RGd;sZn(ia^%gX<JL;@=7&U856Zf08"Zmk0$ps0P8qc:#*^)NSl2)s=%IF,]!gAQ3n">sGh7,H4_RGW"Pdb])h=\+Og\5eNok+F[Wm^EjtDp.jA/%>(Fdo)n01%G'`D`dtc4TDrks-XP#*#60N[i!lR)"5nf@l:[mL*ZK&Fl4JscYj_[OMQreL'hA)+SUm8<oo"@Re5GsfTj0.)<>4%e%%6(@E37f3mk`U3!1$5O$A!:RT_D2I"q'&F%Rja!l;CL:_GRsp`"Y;IqnJ^>ijE9k4(BO:>S9raI1OmVe3r9_1nPooV$1M755A]iYV%Sc)lqP\Dk4rM0F-MQkOmhTmsj_UgiZdt/LSGC5I:em_>*eg2Z=f2F>]#t@rL!N>gY:@,r$j:E(@]B>[f%tXrjbM(;@$"nkYR]5CF%-3tCNgV;n6.17V0-QX&)G56#(MDcc)aZq2g6#U$YqtYpJc@Xlmbg`7XT,\Djn_WlU:-g*kCnH)Q->5WD/-g)@7q$El8*hb">'p8q%h9#=,)h]Jp#Xf($G[;hO+BJjY"2YQK?gcn'#LY8F2$22KG*[l\6!?pMP=9MfArori"4S61/64RBl=<A[JQVn3IE)60N[%NN;Md@k%&B)44QQb''WS@#h*LY+480DHB*6l@EbAo%aLas)/==P3/_El7"pd#1b%.DKDe^#T74oqpUp4JIfEYQ?](K-+D1)^EAPnACORR)&1%%g84lA[cp`b&<8THL!-giD[l8Gu!\mUT[ut)2i1Y64D$B1):0?7)n6/q1:/-UM9Wm>g"L*X<3*@@j<iuQE_$k&LM"=1_:Pr;\<M-%:<aLqISh#jmZSI&U<iC%,B@$a/./A897q^^?Ar=iU1o^cP"A'WL`Fe]Mdf)72I&GP-&p!(UQ3E?b#S=;bL3@-^M&bSL6kF`c]"Bn%=+5U1.6FFZQ3VTi<gV_$2t>slB)+_:'"lC$Og=a0*83/D^\t,tB&bN!Rt*6mT)46[n*Uhe\N17-iU.'OH"^"c^FrZ8/?<J\i@-dJ%Ek^2']c\A(qB7ml*c3H"O/1")c,,?_+D8?(mUa?>I:hk0`ub#]NC_iFB4Ff'b.QIX/5$L!bWC.h&EcJm*Zf8i)sI*i+.R?S#Jr$k%]3Ao%IJ?7Z5g`7F-U,5X01"+Hf.rc/^!531Zj2qY=sUlID.Ner?b`m+P+o[-m6QO+;X#.8/hpJ<Irp)WVe*_6Yb^#^`j]DB+'_?>%XP1PBp)4GKSE1]XpVkqPg[E&>_-ZD3jMMQEpEY9G1P,,N_JXX)MCFMpkL\YsV^??U:1n<'O*Alrmeg^p?Fm2/6MB,eMI_ZY?##Eb%:YRGjoLW[^HsoR*/8j-'L\I6.TN:tjJ=5,6QK9>u,M92\$h-mPkE)(_36A3)hfSkB+<X9l?P`K`7j1(2Q%AmX=dIW_VsnV&&hr*A%_Xg:dF?0(iHRXEh:hBG"A+IQ394!WmS>T$'m_[HHRW:9l,]-%tRAWR2Op6aRdM?h]g8=\5&P2TJKbIk[,Pnp`L2$@Vb.hY2]q]cR%b)?=8I[+9CD@;;CEQM?3QV0hMNp'JR=)3(A1e)_qs$`+mbKgR70NG"DYp6TnWZ_1k'Ia./!,<Rdn2)ZgrW=XS4#g$+Ud)^BXI_QE%F+]pLebO,qB!tc[<"+`4*E'$jRYY93[Ab$42X0(F#<+lsme>3(K:g!L!-67KT);1A?ipq*35LY4FWFU4S.1=^');O"q8QC?m*-q[%E6]Y</652K0sVt'$dd^"pkT9q*ChEggUWhuOQO3J/E&.#P5b5oJ3c3@:n%mHj&qgS\T=KQdj,ktP!BMt$[d'rcXt%;*%U9@Nh+Cc%rA88[P>;(ihFoOLee6ZkSuQ*TX0$E?<kG=/[o[CZrI!.a^#Wo`Rl`:im5\d`p=?7pP5%?to>R#)(hA/k!B^+-%aTS(@KVM&h4;mJ%l*H@An[EPNl/+(sT^QdV4A+["/T#s>PC0(cO89)t$co-0ITFc<,H-u5;3!IM'a)chP+o7+f%8aSb"K9V?gC<aeh=VjDfaqr\(j1(%h`c"kS'LHuFf*s*1Tj?@LHD>W=2)?rDr`h5E;2#.7]AB06TuRJP6s/TM5(9^oa4l+9[+9B/BMs"Ac&\RigB(k5S(<!4OV4;kmkZ-%SH%Ieq"M<$=9TlD=NR.P'?H"e5!"<CG+Y(?g@V*nU0tSQ:k&`'OqZ?QV^GVfJ4'=uHNsG]<69CpjN)l#HTc^trWsgu`KG0Kn3di5%,e,uON-Si6j>?ab8cS]jZG*,a2j$Qd2@C1OkZL&PfQVeTc44lf[c_BA`P(P+MB1u$UN0-qPMMeLo/%2cgPR-pcle1slNoS6JO\!n%0=1"qMX9YgU:q]:/YI%V.NQ60T<q=::IBR'>1)$4We!I_Y5LIe+icLVd:)8%9pWNjH*=Gj:TDqAYM.d_i?gX\TrLau2a!r/B6"L$%bL(O&3=B1pXJ7Mm57P1T_hL;I6&s>*Vdf:91*#Nt'p[X>U@+u7oB9CIA`'NI@#6h2gY_m<d%e6aHHb5GH#[86c+[AL3\%laV-Wmb%X3_NGk\<nbSH&[<8?jH]IUF#K"YmJIgX;&/FoM8Q453sj0"IjacAo>IDrG1FE&nMUYd#K40&S;p9X99+Pf*ifb4'9U>b*pWUGBKO%Jk+lF*L5U>'XI?iS>.j@Rj&?<$p#\+p3?I0cLa3CSg1bRIEQQ#j^h[X<QIo)"h6)?)BP+pa<6f7,p.Z6_TZ%P>&'RODfp?9%$s^`%D/SaFV8h)\DlL!'<A'3S.(`)gb09\^gt\F^3.UifhhF_J5M9c/XsHap4fkdLZYT:blM0?oS>8Hr4N(fME(G_J4a*H?/E4mf55.0e%VidWLK;N_&6$-t+Ssm'\M%qXF;0p/2>f\#Q>NT.)NjHq7='R\4.pR2T2e\1$BSB)cQ5LkX,mAjc,UV;joN0$8]^j44:q3PiZ'A'P%NQ_I.2'FLnFpsbB3$U.dX74r.Qhfd%S`,o^je_Nf=(JTk<]UoYW9)liH&7H(Kf22\+os5GM(Lq:Jlmt)"87r\5qEJA&HMmMU+tZ[%B['WsMNpJ2\W@]<)-J$jG[o-?btqjTPn/Bum;bK5*eXd6nj8FU@ueOYmcDD"c%FZ-ZTPCE=^DR=YbB%lNj650$6k--)#ujbDE/B*%2kp"5/Gk.D7g%<?aCZhfksbXQ<SC=h_2/HR=On;hCK`,fGA?<6i8[p_;:M+Ml>*<)B),*k5g74[OJ#V\)9XXnad?n3J?5cVN(&S;%2NE<@dQfcM5XYf86]#D$gEmTaN,bsp<XY1t\/M!i#Lfo8H@OtRYXC`u2GN!066"PABZnh[*)8pJ%H0Y8UHsj[IO[*_8q\NO2i7/t%L.`K2lGt2*Sn=`(fli]Mk8/1M3I0>jF$3<r"_)d[H<OUPPHU0RPKlpA5$,,Sh<HaZa,)B&4a''ZI$)Y6oW?:cI,a6-Ms!d[iB(Z@%JV@Y&b7?/B5A:6$c$[XZa)6m,nZ'p:YJ9#*#L&=&[bplh<$p+=#,1[^OQM>"*ls,</mkXVOOXGI<<TI'Gi/9Jc#^ic.l2Mor*\(Z%3e]_eioe?'bNHp?8J>HX3gS*Qh.a&Bj8`8q@!&K3FhM)H&A%D!6u1?)V_j2-CPc#9D6"f$^K.kb4@A[$:g&OU%U'$dndD[P6a+5k%T&9YWp?h9SAZ*&(Q["URbfR6rCR$^<+qnGe$<p0l&l`4GJksE?ZD/sbd7(TRLl/jO4$28(?b0M.=IYYsER'$7cI2s:]CQ_ps4rUS%eVatlD;hDh.?<l1?C'1TG;he]Y;:8,nSXBj2;lCtPC@:PC@p9,r=_1WTX7O@VVeb)'*+Eli"5;ODAs_TAanh[mC@4-Nq_(qJ'KJ/%Q\?A2D0L"Oo4>'#LHdJgZWfk&?ER31.ENfD?'a<nk<%TXm9?:7dm&1Aq"'k!>!Aum)K[h;U'2nB<ike%c:=GV]_]eHWAuD44I1nb%WOL[9`PYsFF_1H=p$#?&GCD#KZ^AZ;WhJUR_Ami1-`DckT.5k%S\PQ3U$&=#dM"`/2>$fG=SCo*W4)]OAmu5.h,Dke;R7i+%jo_=%<,u=2rNr8Mq4+Y%f:.P\^MBBnRO%n^kWejLh5%&28^0*>%hhPG?PE%@DGjb2*[8Yh3Lf@,MY4Gb^"'3+r_BU_dEU(tj^'[PRO!$J%;;JY@4JG;j7^^X="^$t97MJ$6P[k:&J+K;N&,L@1:m0nSc\+Uk5nEub5PEKk5H*d18QA>'-1;q@A//E59;n/J;(P.1lAh;18f3;K%;,#TY57b_/W,X48_uC27]8)7#M/NOg/>6Soa%.ZtgN#"P#71hOTHXH%N2;ras+hI#<Qhn0koe3MCX=imbugjD+c)S!dPB:nR$J4a%1t/11[Zs]a)qT.I>37:Pf<eD;Xu_5V;_^%^C04;E\?lZ-7'GW+8"jL_Ro+0fTrPI*;<$l@,r<D+0Q\74EXj\/Fjqncd"(!k<HD#Q%7I)e\dkDHcf5trKCcu8Y[\mE6/iUmO&.pOgQ+%(5Y$4H,j>J/j%G+E>D)/MXAQYh-;3n+i9uKKD_69EQJhfp6pdeX;RYbAX2`\X7%]Xa=r<CNYI6R;W;1M2`5@2YiD,Aq#%dT*JY"i;HXP]?FTeo[$b\?>"+90klJAW;4dE=%6s^V'#*&nK]6_a00RgPBk`F[(0i.=pUG%L+#-JarE9KCUD=2+;&R4R:5?_[nOuDL`Phfa219"U)LNI$'F@`_.=6_$`UFl'J6i=6>E8O;J7k"=X0SR^r)e_iX]X^Xf;Rkmp`V2%)2OW>_i(2'G'"Z>BI:$pQC1TIP6_P4eP*\'TZkb7>bjANje)VD*@*qmR'rb^,rW%f(=E3R)D-"c[\8fW0Ha>fka%0e;?)pn,b[!4%[^;j')R\>I9f*RRVQl:C+q:]OagI5IC<3tWOL0tLW4Ee;RW32bPc7QCBu.2:iOhQn*\.mt@#tMd(d=@WN%3+n7QBiN?cNloAY]T#%\OR5YeR2"BCQ9^`0K`n?KbOV]a.RQs;mdG[-LPQCO>a4P=p?T5#U!:n2jtIA$lK/"8haq0%.P/:VL=(g6=i\7XJ?sXPo,Hrg8D<2%aF`DLq4P-W/D,sfP(D7]jb;_^11[AQ9U1`+C?!C#o+J$JXA&,65n\!CpgdtlWW^K_j`7hT3tJoFnIef$_4?LCTVHh?'ob\Cj%=p^%,,t6KX,Ga8T=3He#ZWEUP!W-BgE(M!,uWJd)3]@V8SA=G-gM9f8n]*;>A,3tS#ic9`j*2AMQEhY>;@>ri`B1h;<Lq\.q?.sFlaoI%f<R0*XpgIi=,'LO=%3qf3?t'gMRVW![^'pF=V8o]='6+l<B"L26%Z4"55@P)YBcBJOeq+4\>6DC\^A(6&blVWTc"92X?VXnTk01'%To#jH-$=>ACV8qir'8.SA3e5t1M@eh%Z-9BH]Skog7UGI6c2Qmk-6\X"9qFOMW'cPaf#hGB9\=7nb!sR<ii=F$)NZEpdlI#Ehj@)%i8mc_L/k%p&,XJ=T6Nmo?4KEh+MO5Gj<_Xca:Zj+e)RTe1?#C/"sI(&#q;Y<2D>Wc0Sgttk8@tJ.^:fLGJ9q)-7V8$VA`FQ2'OlU%$rNm1J^@f1!%"eB&rUXBBJQ9U)2t<#e.C7>2E[p3ZUcB9'bhLr6-LQoj"t"M,*Ho%DBLTk]OkRb^j]s1%)aHXN=1iqE'4@7QjihW%7<D\?Ocj/"Q:gci[hTYAR)>l<":ZSoW@!&<[LrJb1l#+PC^^84j06W5#X<E:2*H'rLXje7A]MK`\O<B5PLs;CB%k$i<+afEiP+GX%A2(oe*D.$b+R!qQ25?7pb,>hEH;[fQNS7!o^bQpq3'00G"dfMMU4\nd\4oLq>a;ms(4M<'L)O3.0MLV2!TfKE9$XNr/OF'<-8':C%QOo!*q\p;N9t0>Rl+d9#_Q10bm1\#KK$4KK.X@)AdJcVjYc()0/qp)].M2\e;&oG(lI,D@f=#ZN`Lp+cg^PH"N^dU5KV=SdcaHrD%W\`>%n*-i=g8F0fd0nRWR2i`(:/kiiQAp0&Qn$K2'hi8T>%?mlK+.pJ#4@2Ta@CGR94B^JlOCrB6,0\(Pt+R#68IWedb'FL%#aBb%)1QpgAC3g`)p:5e52L@.P#oG4iiWB]R_'BKBp'.hl5A3LArG6gOkHW:MF,_tdlchN@]:WI1c"Zh#j3L3o2qDg!eVa8`UM"9A5mQ?%1W"F8pc=F^+l\&l6VnX56<>)m!1q%Y%NZ3fm&mpkE>+V*.dh"/\cQ</j[^UM09MaKb8c(o5iO"Pa!^ZdS1<qiE6>_H+hC\K+fNV]%o4_CM6plpu!<c=uYL<S/U`$%'PDPYm'usm9BSk5"<[N(,+:15/F>>Wi9nMJkCsad4^@P&:>juU/.Pbj0g2C`C)q>WF8n]aQ[LLt9%?CHHSOsOloP\@Y0XeJ4j>UlL80-E!g&GUqTE12H?0rfpKZDPat$A6)p>L?8YHF4L\Vf)9g"*h=^D+0%b)O@J,]L;$e<[P2=5n_no%nB'D,W8cOR#j9q,lStT?r.1ZG8GFa>[N`n4ZQY9`%e`qOg5<sjCfQcfAH,r=[^$OVft>N@p]r.=)%<.=5E%(cA;kQ&LqHq<D08]#%ChY3sntE"N-6PU2VKgT*MKDp#="ICTV?t,9&kQb>).S8K`#-J@$#U*="O@tAU0mi3-VYM(Pa_CGda&boL-[JJq<ts?nb`..=HeJ*%08Cc@Sruf1C^7hQ?b"1nrZ%.O^g[b`N=$'.^gmjGF@@RcQ$S0]B"4WLRZZPiQ9l"?@j+WK/hiD>U@40f,V+mM!#qq,-S2Lk!@<W^%&5guV&_*cZMl/':`e+m\9pFWSRYF5MZ?4bL6(+V9E\/"A)0BW*^qYL7gSAss70c$kb-5**bE*k+>+/$^;AA0r6]%Pa\/Cle(D<;p%#J@hV0%1Ng6GsW@bKs6lKiFE@d<WGt;um8)Be[eN'GEE%[FkuF7.9._)fc7!ZE$euZkfs&(.AJDTtjW,6BM_g6o]!%[$$=o&%EBq%CT(kQo.s/Kmng"-6)&mFfqq2#@2rmspiIGF5uU#ASuu0`q[N032o]u?l;O10K1emn#!$Z0iNR)W[O=5%b1J!0&@92N/PVHe#]"8A%,2k<$)Vk(c7+8C(,Q2#SF?Fid_T.C8eKK&@Y@+f4;/)gPBT,rilq(c!i!)HX77pA]:h2ELBUK3;N2A[Ir,<@m#1oYG-VPQb?haa;%MKBVMA9EtE7jjZNkS8&.B4)E9RDlJ8:`=0Y#s=MJ_]nN'jdJ4_60_1!02"Se2pr)@%#q!IBi-mgDo-To+W=f?Cc87(_08V3NjWE_%L'`"eCNufk9=<o<!>tPW$&>k_-0CBM8l^Cm1b=\4V,6/4ZpY'h+P$eB[4,$*,a$aWYkaE<k4RRD`DKWIl'UBO?\?"h4&ijdbp8$;%;lM20BTbX<;[ep"?7N/h$\bY1#`!+k)3>:_SaCts2rt#q(hu]Q'lLF57SZt%5G8)A&.;60gM%mY$s=!UJs![+X?[\[GnG*=)&2L#%E`A4jaQ[+cT-.:(C"=oi9I&`S2H75Q+\WT(KOu%/X*O7"8@C)\<B?:H3l.\Ho+J$FXA#jK5n[F3pgdD\W]7a2iOh[.]uHR4klGuL%To=p=X:3"q<%7SK-2<DbmJn,r5Ur!p6c/aJ?6V=tQT5,>2n1C-8_tGbMN:i/Epa^#DWT.gPe"5;bI&nj^3(<V`SqsP4sWV/X3"=D%)-aRlR;uUX[?$RZ/hfhJ;[f;B:I^W-3hosPN5,D*dlgFgTgGobW//AjR;h@$Lm?Lj#HR/h='^I"THo>l5VlqnAHbuTGnH6d#)+Q3%7jY,FVhZc?-^cJ/DjRQ.aK?IgF`iPA-E/N\.)W6k&3@6n=^BES`U^#Z09Q*rPmMSEOG(2#I'U==WjoVq_Kh4;HB"u+/k(6"]"0)O%7YS\_O3X!o#PP%ie^]A-Ak*V'Ll/79/?#X<DDj.h"?llY-jIR:Wt1st.%)T[EWi#u<hZZW6j#R:M?H<jnTY6EQ"ZU^?$-p1j](L&%hoN-'WC.A&<lV\CbFr4c.?73`-`;iCSQ!g\VQ^$\fcJmu6mlg1B:RZ3J<rVN?E>?AYd'hjApXVd4ssqj(b]]Q:t\;SjFtGIYSiF;%@XtaOWJik.:klt]&uZ6l6c5e_J%*1OY:r6[ECp>V`4H4E0V)/GQ+=J_VcJ4_K+0_@IlUK:RKBT\5/->BhUY6Mqo[R'LL*o?\8O?i%)[;sP[\J?k()*d@Ws[=.$IJ;$[83Y%$81(Z<.]@)8sYL(8;\Y7R+:8Z\7Ods,l>cAi`;Msbq1qoS7M(_'?queGWh;T/fj=.,SRn:%`u!341M]`#ni'gsQ7:uC;YsRahu\NV35tC/r+&cHVDH)7\+mOpgO&HUfR$Sp.Zt+Si)E2Rm6QT*)'8*sM@@a>_gj:DhRFb%j@8_r%8"_)g\6W\0,id'^i[1+Vc)nM>;ISlg)33*8[;7ZIeiePFbAY`g*$+<M?!\J#&kghf>;&UEf!.!H!sV?dM;aZ/af#h'B9\<lnb8U#%27$9EhJmstrF)"nYHSm<PP#[ZSau"q.\fp7-A@bW;%8T#ne.qlU5VZ,LVu'&j-0+j'?.A<e'0b42bqe&fUli%o[Qk'HsPqdRVj$m%I>+MCYJ)39K5:\MqT;I,c=LQR?Pt,_Y7.&I:IU-b@&>`sH+3R[NpE`j+S=39?-9Ie>)Mh&M==V,Rd?.j+MsrU+!QJ:U3Q<qQcP`?%b8c(.AKqo:%>IVU+ANSO1Ia:S7+%ht?S)O(3OZD_X*O?fJj>)e?h#I5O1ndO<-n1:PXqodAV(-qP2I"k-ZbJK-!8G@(Z"*>44uQ&%]>:In-%<l(bm(g#lC5&9e@jj'dUW)b"'uI-Wm\",C^2`.CbU4QG9omnFMl3DI[:1m"3Y)u$uqA:CP>61;?lJRd.!&,VQ19.L(]J7%1XXD`G9[UVZ!'3P0+_[B=XZ]$Tn)N$`<G`HZ?*HhaH^i_Q6XdVBT/Z`A;Xf'F611A9pI9ufap)1"fBE$`MVZEJXtRAE%%&%YVqC?%Yq9iqjoE0>VFS44)O*ieUB)bZnd$r*W[\7QE,/J"IK[kBcVA,sEUG@9[05\'_kNG52WMI/IR2F&;ThMR_6oA>OBQ0P"(I6>NP6Y%%_(f!$b^m0g#*Bd_)@m'sV[CV?F9NHcgMu#7D$,Kp,:'c;ZRB&e]P@g5,g/M8F=dNYdJ+W`KimHZRnTN/#*nP6NTan(G3B]K*"I`:%7rdcCV*a)"-+llrR>]\t6#-K-`Y`!JnaZ!+&liV0!O\.?G8\kTqe-<';M.=![?+8t$=(Qs0g?\2_1k]3r3Qkn*`.56%=Wp<)_cAS%o`hI3RQBh6YK@s8?nW?F?a//@lbRZoKT12I?nX"n$hhHo/<>PfqhmSQ?</0dHX=VpGm9!"!?@Bc/T?$G:VfU<)IiFGHQC9OlpW57%?nX"o$hcWY5M1ldI)0,d,.5_g#CAHV_'Q-HfZU8Rr3h!h?@T.ummK8Lh?b\'"a^9Ak(t.QP.k<WOJ/_\ItC:?_-UFl2r!m.HT<A>%$ZLKVa2"\6IKcX>q];J9Knf`A8%l`F8(mr0+Z]M;?4\?"YSWSW\gMeL8u20c1;O.7+7/+aA:F(Y+Iqc+5M4`BJ%ceS$[W`(lACI(%94"*=I8ukH05RBR#CBm_Y:%t\$G=2]<Znf?(GVn%:q0tR<0I)sHFT,XP.;e-G"LuaWr?BZCo$\-HQa9S+7+^;[GG:Em,bWgr.Pd/%9;L.D1;O%2+7/+aA6,_E?nWmtpP?$)\@RP&6=!mI+7+,MZ@";.#Bl[7K>"MX<:R'7!+Dlt?$V:^CfNlB3'NcA`>!sbPLP@d`KcB\%c4s2uX&)ksjpUl,!Dt\s"%hqlp4=-,K>"Kp;":X3L_?\8XA!S!pBQ%*5+/%%.`$8P+7/C\5A<I#;b>*$5l)@.68@]c0]/I',]a$L%c5L=^1$I_T?nZP?al[?>"L(`$-(!$PqZ\ZOl!tbentXSRomoa`)6a\Q9%\qjG7-YJNQ]^4"]3'[B0/"s9@I.0(Vj7r)!Qbue^6g%%hH"&"+-ic3h$oF/2rQXHI-]4'GhD3\-"8";4+s9FEnTH_A$bo[O^q*DAAph!2;;*-OgZE!;u*5BcmZ?F3f]6$Y^?J/$V_p(="5@%%iVN[i/]:.ZJdn7$1g3=&9[Ya2eL"#uZ<.U>A1KR/n(;X]pPn8Y(%O!XLed]q=uM)/.<I286S+^'kh+Ba_b:mqf&b6i[**Ft8%/5\%5GmD^[?/g>Q8EnQM4rZTe&5e0='Sg!,1T\YD>Btc?Rk$S6'SY1'EC_TWMjNa7iEWj8E2VE7sDsdO>fG9bu@s,2+*#\%Y(p2"H!b2%f2K_sCq:U<qboB)=H,o];l?hH6&-dW?nF,B.ArkHs4A/5Yo-7e/Bu/&M24"u>EiR9;tlPN3`MW!9#K[=hKO`ZNFqio:5%*R5irdg%8:`Ko.ZkuI.`5[`!JoHR#p#JYR4=C(2RHs]/?#EjLX\4G^0j=$b%3nB"=+(@/p0#h2C,JlXiVh3[TeJ2;(WOPVXZFe!"Of@M.;`O%a_B`CkB'@FipAb01C3]BVY`&[:l"F8(_rAkQ_\s^k6).Uh>lu[kce2e$CSbL1:LnfO=6658!G_;UMtkr]"Yh[[tGkpkVJu:kWEXJ%C`-'YR#36BJrkS$b)d`XDs1MT:gK9AZ;>HVOu"MO8;;\\E>C5nS4aik`(<];B/_')GDNHOKUt4KH&MNN:kn%"nc]&cj4[CC.$WAA%jp?c/).2=!_JI[1rsD[3=s1;B'fc=5?VSS6"Z#&($'L\Q-HHrPaEpla<7j/R8"2dW1gP8RTnMQa8GGH.9MMD,AQ^4IEaBqIO-L"m%0M$di%%ka;7[7@AUKho!^[liQWZf\UpLl$+E=GWY!7>59P[\DpFC7J#DL:IQG$CH=-0m#ho5ZmD.$8Y;QZ6;BOLSb=I$42BU:?5'%]"&lf[RnWATg;n*D7L8^]PLRP"JJ-!CE-_<V4sA5;%VSn3M(nC?6V7fPmJck8:j\IT?L&"($@S%SG.oMj1)PgEhTS'`fb/*<5>)H%3ION?gGq.;49O&?g])J9DmQ4\Y%*AQ6+oW[)R'Hj,=;Db[+!WWY7n,F^:9aP#N^THJZNbLFMijjhQbWU.7WH$]Cs<u!pX!hO=3_q%.#OhK\IHVOh'j[c+M#gLXkfL^MM2Z0V<-`*`>T,q@i`RFm_r?@Lc+b+H;BO\.(LBI4L73j]/?21Z38"&>,>f9"%f&)CpUomg2-?R%1,Fogc#KY.&'Cf4b==J:oOFf%rU[34fm`P_099pUcq[l/D<NVnfm`P_Y8]orSE5bj]E>b<i'7)'f>c[>fWjY'EZ_7pPFS.W:u<kp%b7j1jEK9IE;S.[3]V#GR1q2O6DoT&jN4`kX.h/n,?_B>3er^Z:Nn]KP@I4+sCPlX)+I1gFK`c$!#3:rfCC/r69dLAeoRrkFP!^'U%^QQZS96W_%'Oi)CXPYk%\T=2^HoH2V%AI`JT%Vb]OPRI_Jcf=Vn0hI5N!u/FgHi9/a6,/bM7NYj7HTSpd^+CTqV#GcD+jUAH's;D%SfJc$ZuP0O4cnIb^t*C!22-R<p6$7#W^>>AjWP0/TPga^/rqRR;O@kKgU_pBq2AeC,jO(6"b[q*S+;Q7.I1)T+_h?Z7=0l`6.P,/%;nbcaoD!`3EB4T=o6Mt=B%N9P=M*C,`a\<BCNqC2\.R9(Fl,_e)Qd,ENo\Ij((8]/g+1b/b:D/#g+0V.lW(+,kZh;r]pccPQ`>Nt%]OiWu&]]4_31_fV&Tr/-?!55$8EudVRgEEMAsBckfkEhXbFRu:PYVAt.sCr$YLq-ImB#C@'G@RZe#OZr*]"4mS[*C,FO_UO3J$6t%#I\f&[:JUqDD/2d'KC!rbUMFb0a;d(=SVcQ,MO'nmmdV9>uUL@gXKQ=d%O062iH+]4HS&Wa#4aHVTgQ.0D!Ylg0AjEpW._'^T?_9%.QGLuC+K2E?VtrpoC4KA%PMMLMZ<TiWm5NHVKEgKp(qSlRm5@s":%7EIqHpal$t><dEG7[cC<;5%Z-MF"dj*`#d7D?5/0U)f\uB`%W?jgZ['C9k2p=t+9+C[.bZrUnR[Q`nKDm<VW#JPkQ68:$l^iOeQoQ:97Ahf,B[$TaoiZEu3MqU(FCQZJ1\]0+EM`&aF=UpMMOK-d%WP.58:mK&C#ld#5Dk&EZ*Et[1Z<Z+f(-=-'K?T"Vm5!-Q<QuI3QYCsRq-HIE\Wm>fn)HgD@/2gA1.)VKGPHB5"oWUrZZ&,OD?dD6%5^*%7FAH[4eo#Zq`,DAqF#e'X(n?a3%V[RtXp2$kZTT7sJ(,i3k+n2s:.TIYY[G6u(Rpu>\jma,@CE"?j\<TARGYo'U\KrG`:ItI%hq#/=Q&rjV5YI^gce_M6aF2m]OO9*B?-N`$%T?E?!k$>1Sd>!2I2B&iQX;2KbIs@sEDS@6o;O-";X+Z11CgAaol6>'LG!9L2g3L:%.+N^7MOJFVI3%A$?F'[g<)l`W'9q+>i$\Af0]N5[a6(]US8,^!b1qZp`saN=oB)/O0eT(6?0D^/gMk):]Ea*pW+Be(N9JiGh$Q"u%6<s(\&g=]>O7$QNU7InWaq#aYSZoF@-;?>*91^>^2L+]ugP.%Ka"I+GC1mYZRHKC'_HF#lQQ"Uh(;fo3FP%SGAH0[Yi+4(1>+X0m%%O+C9#,6#T1'U-(_5+]JdoK-rng;K,/ArR!0"LP/4NHiQG)t21+%^#d-LMb9Nd_Q(AT"\dmK<E5''Jr;OcSM7k^(nL!_I^d``u#o%RR3)/k*!"j,_\i3<6#o9Y2tq+_#>Q_3Pdd&+knk_$+8>+m9sBpa[G*j.!slj@!Bnii':6T>`-N607tP5G>K;)nnHT_RI3:UeK,XM%/4j-sjn?n&9FuV8j%`.bQ-\I6e1jVEB`lJJ%W(Opgu'@k3a,16G0grgGgIH\q]=.efRpc(IEBQ7G;?FlP^P2DkH52^..BQ)+AVZ#%dX60gGRu_9T=h_QbFg:D*d#H$Hl9QB9=<Xq6Ji]u:I5k/=\Od$^Uiu!'cll-F+1s!g_[E$e[b?Z>H;i&>"7BOMm_h-mBu6Hji-LQ%mD\@4n&=R_98dq$'?t*WWDU:!HQtX;20L&[YOWeBIVOp*P)Z9_3OW)K2/P6SF.&A3X*.s^LlMN31h_64`ZNW$D16[CErqifb_GR*%Bu<tmbc[Fk0iK>$OE8]p0,R7JF'rdmVjd=bnFlG4EN8^>F3=5,MucXgeNHZ*+Z\!;MMC#;UumDRgeH8el]7]#OOQA42@lm`c).c=%q-^)KZrq9WmnrmCG3JuJY6A&!s8DOB*5I'unZNG\;,CohrF3TM3Iq.tj51ilDk4o'L"rI&Y2b%VOEm6,"(F(PP(s/ORou%5jp/X?%I3no=+CY*t=M55u5oKOE0SFI"[ATHIZqt=XHT2lPqV?(i(=T40hh:mRmd<++K3dUOr__r_2:^1M()r70HP7X'RjPkk%O?0L@E&AP%BsYq9bKMf32TMBT4Y!)EcB$k]YT2IoSW30b%ub4o5)@a#g=`FFV(PG'@PIm"OK#LW8pI.,?/=d\Z\c9"\RH&d/a9CX\IisVVs@XR%509qpIL8$73RZ09Jgi2]kJLkg-I'XtQFO213@1CUg?%"@34#F<iFZJ?QKlB3R0T5aJCK$=C0j&8nl]fO@N7?V^P_DG3)>b8eZLL$%:=pPnBjM?O$JA0qmGtfglQrG_naea<V@0Y!2Zs%]h>J*Tn,nNh'c8^Xf#HF)e(2IQ$P%!VfjqhTb\32C3t,RjLIUS\a56^Ab&Jp:%3Hat^b"SrSh`fcqB>hj(!?gOrML?>_-qUTP?q^M//R+=[c:Ua'=TIHEO*cr/l^'&oa*!2%q22a!_FZbJa!Dh>/lac$h:$^n/(L!=%3\S6_=L#0V01#n/!:g87]><*A\@"Xol<YPN+^P?#,'!n*U\-=9&NL7A^&$4a)dMsh`[hnSJ$gY`E$L4])`-#ZfAu5KDJq%>RjcnL%2Vl3ckZm-=H#ML$Q2,eO@GNED-9NXID!jP,_NKa:OG:!;j'+ju*-,jk1p:ULb*pN/FIIgC:3I&gVh&ok0`<0%6==FZaX[\jXg+%H%!bBNQ<_+uX<d0)DQ*nJgj?X5kmInaKcSVl^hH&)`<PG+ajf\*L5n0q-fQF?%k[rRHcWj?#-\uH=^k3fZKQPBa?SAV(OOQA42@lm`%bpI?\1Xg'l/2sm/W-fYukP;6Nj!jkS&s>OD-H=hbG+(HJ%/Vcm0T!-8"is95qn6)PaZU.c(9?&o(TTE[fBV/#BstmKlFdP<CO*$K%8',caaF+8!\Ya`F\b[],cs1u)U@8TEaE0M*3bQh%J60(fjGd_W3_@/+V`I<.e#;Z1)Lk:Nop5G#Rp&pd#HQUll#(01ZO8^C.o4!a%I$/303g)QFf\4T8m$>%`b:BLZd!o8,:A8(I0qrBUik7.WVL,;crQqXCq8`='lf836rNT7umHC&-5Z7%jgH=to2P7(]bY+jJF56$:%U[i]snc96hZgCE4o^f7+i-t:f0+W#.d*?%uo<01mIe3(_)m*sAo4%0:[+[[X6bN/u0kVph>eAbeZBruP(,)NCgN'h@Jt0VoSaqiZ%I>^9T\^gMr_iHWAiJa*!&C7/#m?]i)h1pSd=03!eW?$;`0G]&JVp[H2#n=[lB-rrabu4t)FD424P&(F=8=J!HF'089Kt*'7P#)R]%6?EFf+^Upb8I/BjQl:\DAT9;!;-bg!GB5^oY9O^',H]NJKK$3K(K`@7C'mF!H\n:ZQ1MYc7'@Sp:BMD2GlM2F@D"bf^1LR;Hl"U%%@g$7iAQs2*MNJR8!'+[f+i,,>]aelGp+.;<MnE^V$-&VfUh<LF&p=fNQGYX>O6lDRa`(gh>tgX_T`*B-0SsC77((KLe=?#fUcIaC%0Yo7H5"07DRmC!B4QqfFq(d8g<2S6==jVU1Z38'/29$_aV8ASb\FKQg?ObV$3@l'SdtO^]l:C>h@'NtMVS-6J]t@U0VS-0(lFgBu%VaP7o%.4P)k>G%=/lGEoFkY>M]oSt%f&LYd,56]Y5Z7=rgJ%+*2P[pubYG&cGj^7*TR7Zf]jCT6Qh#U23^moRH-uQ^)0;^d=':u#%bq8iJ&$#qS`)Lm?fknXXDD,o#Ch\-@H2T^&H^-VQHR8A]D]&I]TA.RRV48#?gE(l!Hh4!q(rU0T+u`sPC-h[J#tNFFNVkl_9<"f5%.;pm2ZYrVqj181'8*9F<I9s/pnqlJXBPfi.g>qIQnh%lRl)/QNk;d]qOYK-XZ(LFqj0LV)eG5+"b`A3%F[URj%0]V6d^B6rX@DY`%?F*_3,Za,Hf0+\%agqL'0A64Vk,(@IZ;ZfFV'R'O)I(8UP4b:;P"c.e=L(\%/6S`0<pZ`8gFG2]OB1_%#=7njHR"hJ4Qaqc!9$&V%i82gnSqbDiQM4@$,^2;RR.ak8?5hC"?9_36?=cn+?AUD4HbI:3](N_NFsO1NE_Z&E/l1A(:8,"+.C'$^SFDM#VQ<3E*4nA_Odo:r%?=IPD'g*#Lo=-nQ0;h:/-XLtXgJJo;9>!rF<]mV\)hYgA=/'q!&I.fbj`42WH/nAq)`ONEY>."+";QFTZ/!g>e-D:s3PboJ]]]H>%rIU/A3r`W^\N^`cnJI,U_D6PQ`:,>emiP=6fpS_N?ic9A:)HMRlkELS_$hOUi<-1!W"3ED?)>&@(0i%'jk:!SZce_+WR:+F^6![E%rXu!,DYfS?'?u*?"&VXnTgJ4s6\o&'aN0mb0oM9+M$l6hkKR)\*g'aa$Y[XRk<kK])0$eJC_cck/m^WDMl.`=</20&IB%Ihc\;?R%:'.&<_#;FFflZH"$Ok&GH/bZF_8b2kKaUsabN<oSbVYF-%@]O1#Ij7d3fqeTlcd4t638QA(u7=*WVi[B6r@QdG<mPolRoR&21$a&%dS[Q2E3XG.QDcPL@sk8uZD:K#'Gq'c:#6-nU23E_o$:;#Q;tmrM=qlk>neFd>.KP.r<;EA>H2]p*>E>"P/Jk*)``#6rq:2=C"VC^%pfu>MiCg]&IQXl8/a:eKU2#flAjE_h^eG(Pp$\DUkPhUgnk+o7?n`!Pp"YAU=mIf6V2ek^'AnOBqCX9s]&!P*kij['n6p),H8ito%%e1'_aT154D(MrcnHG0o8ES*MN%N;&!J;s5mUZ:<QDTFY&mLf/m\7Tn,Pb_?oo%]U<KZUWA[W]fSs9Vj'Jo8q[M640#$V]QCiM!\%iRUE>-dgmL(-5=I/*tcVrWdd\nJmht#"Y`5RrpHT@KjMHs5B@pOdF$'e%M;&a5bhp9<!38?WqEnrMrkr3QN.H\]B>3o8tq&c)]=V%.-3>uKccntI/GHfqumm!!.#V'>$f;J,Z\]&)lYFZE9M$%8_qDHU12(/2DST!.qkt^_C-q2%UGH#hBD4YF]WQFUsW2t6h]s0eWi=4%(7SNINO,]ZeVM'J"$#DZE6.&<5Wk6C@,nO/J"e.RHT)>,0g=PYS46@44HX8Q*?.?;/SuHCJR-F/`!n,7P+.\V@0XKOQ,+&@NsYNG%d?S'4,DViOUn:)mpAB]0/jK7@bpk+$pH/sm@5^($;_kY%RJ\C=Im,U"22$WanpEE='*.)u2@8b>0BN:>8O+CAR^Y:,Zll.]CUToK%Z'i%*:92n'a6'<,5mLH1>@V^PRRrAh)U[en9UK4f^\JW;i#V<,jMl!Ckqc0nb[.iZ`k:T&r_7f^`,aQ,\4.o&BijAS9W^=a2b?1S%S*\Ir[L_*RR\g3^4#$RH<k1F9b*i[uW%P*D:mDE$<"nd1^B#qU6*]fD)or0f#N%e>^B'219*F-p(Rn:%__GW^RVl9kF]Tgq;Qdk%%[-qgJ+p<]Xr20C,Q]U>JLCPnCqtt?'9)+<Daa*)*mq9Ll\J;lcjdQY@`]f&uQS1lc%:i%QKQdrKIIs8%1iZ5/IFSTi+0R4PX"3n=%LhUm&E^\,hc)+X.g'7[2Kjf]A<8FrrT_$W)Bt))tV8\H#g?nB5l#8E:f-I3s#'PBAH[NmWg.18QpcsFQ>T@YYn9Hd:"%V'#G35_6%R0kb!9(GoN;Z=".W`_k$g07M9h:HC;<]/J_r>@jGV*(*aO4Sn$_&C-'MO"7k0kr\%Y6^W[=:PB+=mCD&:X,C@:.:A0DXD2DcODs&%jP=copf!mNc.c8,KTF`i2+r3Sm54"li\?3iiK!GR<nmJccOG2:>_;r_]Ha$1/`YVZ%uAmKDZo&%8>s5aOa,K!mqT!gU*%EaVb1#[%J=*=a&:J.C!NFR47ni@>=Ce93P[`)YO&B!ll1"KNdM6kTPaqCQn8A-jgW&riLppuWj*D#+b8L&G^3kcSh%>^[qM&O]l&tHK8eej]%.s4!*;.N(!8Tt:m8l?#<@ei%(XPltqB.am.!sJ#s(dA1e)PYQ"X+24eC63;bM_3mN3Jr!G[hf^tE^X"*W9#6KB$ri9a(UmLM2^o#%4>Q?hLete;%P$9b%4b,Y!,'G_K2$"+#@dT'`nWhaCN;GDgD`4`.]@A2Z70u`Zhq5N;5LniR^lD(#6o?GaFb,f(MaPAnPg<W.UFm&%R;tf<rt8pKn<u85]Y2NbVeU;/.GlBAH2Jkr@/n2\r(2i*NPJYk*uu8j'lW.sDn+5>'W:$!NVC;D1H\.Q6\(mH1QjdObV^;>FP+l2%V[^"V0&nBkKoM._)GRS\D0`BHUiDC]U=-IF=Llr.9&(/,*(b%nS16Hl#Y[Bb-JO[GX:7j3r_ZO3.0@^+.ug@Lmud;J+-Ym/4Yk>M%9[H=<HN2;=7V1oa`ZdUiYRb4*U1tMV8YIUmnH0B9LP4#+n[)P_No#F1SQ:<c@3SK:q2Fg'qsE,?1Vo"CQ?J6hfI<ftT"f])KtIY4%0KeM%PeUJk+SlH"PjE<q@giJ=G[_TLj)Y*mg(Ob4j^,Umrm#,ER1"T9>m9e'4+iM>a%[=a6f)..3M\TSo2U(Hej%=BRL+Q(+cUhp%I1QdW7B(1Ni;qiTr/koN:AO5g:9-UH-F&LR@D`'I+L)AX)U!)52WTWk"#DlJ/uAK6S3bBDMaX"hC7=hbFIT&YGI7B+Kke$ajF!O2%C?GAq])d'%P5mH\-Gk#]AEq]_/!7u:^5MAa;AHofD@f`I:qY+gnrdF"De+bd9V1nQr?,XUSRsMY@SR"Zj]*X/Pb<f=R"o^s,)CK3%l&`OKN=:+u%mE0_Sk)'i?)D&RgtYX8CZ-RlVp"/e,;;>%Q:Q3R+Y#E23iQSACWY>mR4Xc6?,E41<q93^QW6<9TlErP.3M1L-N<;1%I(._g-]MU@j-Yr4oe`NFhWZNc)]3K^aPW:AM<Yt6.Aq.WThd;\S=Zj#[hf3o&.<=5R%Z1N:)&[GbhZbreDiNZ=K.cg=3^X`-M3)L%e3<\T*R'"-)nj`'g=IAOmq;;r@'^Q4Z?qF$rbP82>"i^8e\:Uf7Up[4e=>V95rVJV@kY>?Pd*2Rs6Ac%NP4X3]<cNi#((&TYfsT>%W'81s_O_foH()K4P&apS<nSr?.(\Bc=+Me2+R0iA[8ZiSRBl22<?VARnPIaT/ls>,]u;E&4Wob[]=@2[*dfYcWT!Zd.\Ejk0/&O+%m2BUGk-R3HVNBMPZmpauMZA4$=MFE(&lH`rT,A%62%o1H>.qjL>o(0;DdQo!45875-;79%5[6fgJB`@2p;F!,To?&4e?"q^4H]AH%RFXdH<P528c+_p)OO,?)YtY/RNq]H#>K[d"pgF_tYdUqk[/^\=4X_'u:FOBt)OYi<b^8$:e;XP:0s80;gK<UpEn?@RfH-%Nm46CM%p\i'egYkcH7.8s2eaLUR8#Y-J5VjEZ@TK7eAi_(/61\N^@ff=_k37P+,#+KkNhs<Wjuu;jf[8<lV2A(:W2Y%8OYG5bX2dhE3p%`R%!bl7-,$L7?VYeeQ\'d!0XdoF/9"2'BV.6>aVJIb'0iuM3V.3+s"NQ4]Nh'ho,9;-r=1knXPe-%`p<4K?/"J910hnWQW4Ad>2EE0:%[3LNrkh,E>CI73L)d1-]*3BUibr]`=RYgH`a[Gmu:jMJLj\dj!_<IgTRHR0hi[r&9a1`O=94s$Lh_<\0?]([0fqn,aB<Lhc'-k]g%lKu\BR*TMCWt>)Qc`o'D!GhjDL3*N#:/=A)q]+AUj'eQ)7Am6oV0`<pB0Q97rg2e"*Rbq1B.4?40f+j\,Q%FmV75h=KR?3NVCrC#%?RPJ(cti/YT!g>U>ojhD;_Hs1m>dt$ea[YSYu*;m8[\'2&c`^6mOE*W(4*Np?##d3qH9f^$$i;Cl+'i<C[bLhC*kB]4H/LrgCM5R%`N_GgnN2ce=BpMqMYsnn;sbAN]5RT#ATJu\ErF02E^lqWSD0MY+-0.ik>@.bA@mc.^jfs4kZ*C^@L@@)Kr)]KB&bDc0(D-HU[t^b%MY(^?dLSK'`K[>(6FKU?PGP&_?6C#I)J`cL(sORCGq.&eFa8MF?17p[cfKG_)QAPri#5n%6fu%?`3aO.YBP1Z2Jgso^>.PoKZXi?%Du&Mnb#6N3^IpSBFLf#o\1`%bYPiKcO,%*1I[q?oWissd^<O@Sk7ame'D"Mk+/V,8#JZCIRMi%kDutl15b73fY*OKnQ2XgB?Ei(?%^)$HPh4gSYO%k[5B<oE?H`s?;3FX>pZd[d,!U5sgop!X*f_?No2_'7,I,JT%77Bh9H)hR[Wk%)tH_W*j,"NQ"8'O32(AEPB:F%&$%!uu^(MDt7SK"12%,S$:Y_GVc^M4KJ)is'%e).j-N_9[4\MW5R@S5,QX'JBc#_D$BaB[P(^6U#<]bO1&'REq.2?Xm$""`i6'QfnZ=%O82t;hQG22\t7?FG9QbZ\dno)2n3.!1EZ=Q::-mOhnRDC\kH>0cq[<oi0>AYR]t>2pj.Emc`H0"mV+0$?mn7n5Q+8ag(L@NbIogF%kZ12YU8,1T?bgI:p0QpgP\E,#(J6CmBd^]@9+a]MLW5##*(%qe^`ImNB7]:b,n?)PV\3+!=f.Tn^:5e>&<pLR7Hs*<dWVj5AfRGP%\k;ZW""r4@NO^er%En;ck.77W=sF5Z?#*7&*ul\UKu_L<5f+GTLKcOL-lm_JQnRpG$rIQLe#&;m4D1&.Z+QEk(_msnKh4#B.$gi!%aperTbjcg@Z2ep[c2r(CfQo#U71tUZ2AF*mkrWSu>*Mh!bF=Vko4-)/kRaQdq3qZ55QCAb6(Jc"=t_s9s1Z<6s7BA%Spd&J]&;C*%:XXQ6"u*sOT@c/K9KP=f7:-&nY4=tEIfMsUI3-/WG6%5FnuJqJ!?d]dY3WLM+8kITbW=+9#3"nbf*o!9[DCa5lPmW0(W&.PU#F!D%Ugl_t;BYqD`gHeq#CCW:L+?E"b.V&bfqB+=89Zj#jI!(=]>1F5"B\T4KEN>)CdRug$8o.04/>K2X;*`D6+8/g/'@Y,cIOa0,*pHr%*Yl"ZCVL_+oSu3)cRc;;ni@!-Z)eXP$:haS)O>A!*/JU2aJJXu>JdDG&V"JsS=IKagK.sELM*IAgO2?TVA8=6Tb@mETN1r;)K[L;%DIKA*T11mSNMrFmbGAh#hMgVf@5a+fX);E$D^+D;=u6iVAV;kaB0t$s-EQ0k[8[h2L8MtZ]Feu6M57:Uh@eMt=WX+i6qiG_Dl$j!%QAE%.a@cWh'QVYcK-qOAF)+Da<[.8=s*IqtSIs:g037mqQ>Wgp=[_63?^5L^5Q.^+doR]er^)6eropV_)]fU(R=i-ebbT@0g6%u0%Xc:"A%*#JJ#utO\BncE#-`eN7mIX3Om)8&"U5<l/k%cM,CC+I"KlQ:)Is-Isa,@*'`&agR]!pNcZP:l-ET1:ph&%HeX]c>$&.h)B%I/SVdYdd<Fh.O&h-?*i(\Mqb6`m^HM!W0`_*`@l=*Toj;@5m83C[HtKF308RPDgb4:aL;**3iL#k00Z>+aEZZ;.jjhH8O69r,#@X%@CHls)`b%5s&?2(Jm_5.P*kEs"G_W^(kjVQjo-*X^G%X#>Md1R7YJ1c^83iZ"UN5uX+V*/?.1dO9We6\U]D_C::>TmhMu?$,p'J^%G/1j<c:ACN7&rsI:\:7%g.C>&V\T='$7EuT6[%3ic/=_c4;u+R_$7GA)G!YICng[mdm!8nd>hrI[R<36GsT\eYnQJVn/S=dHEfnL%T+;Oek?jRYY<MouFQHS.7/jp:5QCB%V!G_4&4D=ZT''\5Q1q8/]k7bQ`m83?NOK'#';o-rM8=hX`j[<.+(Cj"?*rXGe+">KXU`N#%p^=0pQOEKM"gO+)4bI_8+s1[2/&BC&b;1^f]/AVWRdmIpr;rHk@:g9t@]h1dI<6XuP4![U;ogO6QS#"S=K,NlC+OM"W`@NM%Vu%!%$;a(]*?Y%/V$7>S[seWoNZp&g<GO7PAu,Df)mN5.n$<[02R_$Ra=S$;C_+Iq/'UTf_$JW+Q0*4PcRgZl[q7c\8CRFUCaMD>.E-U\%p5Q##8%m2Q$?<l!^2#i(/@bcofkPR[_qI1J$,(\'W`1"hoW2fp2.QqG78$b?C@b?;(A8:t*%B#(r9!Wl[CMp3#f6;(b280+eX,tf%5-[Q;f%nm>cFIPCqE/B0\<f\PR*O,r3UU/da/&!/[,629k/+Vc;'M\m)j82t@2u(Be%!#/p"\C0c$<5FELbXsa!dS*p#r"k2Pr\<%@r04/+@U'V.9;m.1JN;>KU1=r9"I>W]!F&039Qj'6i(NI5?6mI4sVsRb$PkNY<MouE9C;,6N=d95QC@OKfeJOFY?6QeGc9=jC'LA%pEpaQC9a0#?XWg*K@n%MDV(kpdaW#O;?q67DD*1n?8]Z2%9Wr&I<Rri+4/ni76ZNHHfhcQnON)8Xq?64^]9<mSQq8C&;JJ,9?0+:%5St@7K6p67"h0M8:NRAP#BF`,E^0aQ`2p9UN47q1!Xp6YpI6pGTFjjoHT*]-.565dp9'M"Y#J4_Gk_[-#KM`U/>lBjpr[@jMnjb`%B`r)pdq@bb1[1`i^(_6^Lhf;p$AYdiU8F.VDr21>#sU8:=1,VQa(4S8&N+MD65mAI+T/)/@5KAM_.DTNO3XhASC0=SLiKHjG:F=I%L;4uHm"p&:H)tI"Za^<m0a1iP`W7ild=D2rb-]_4(8H=a2DM61B%QI];s3eMC?q<s[;4'IAM]Ol'i2P)BCkpK^&$g#\2&pCNB%@W%IYYDhVIfjh'`_q('M#`J4;C?njPI<t/Z@^6&U5jCM\W(ior13"lHjP>`E-M',l+_Hm'u8Wr'*t3rBC*`DH*YpZ/abe>aP<S#=f"m%1U*MG6ANf:eR<+5eC'ITN^aOQf1#Oud<t;EU\3up-c]H+._-7rND2`B9h7.cQ$;;aUJbS,<SW=2asl4=[86^5S0"dBkK[sZo5N1=%SDH*CK`=/Hq#D:^Ylc7&:1H?%g8qS>5Ou38P,0+:'%,$`=I^Io+UL.N5Mb,9?cAM=Y><]9g,S]WZ.hh%d4m%4e4(@kkrM)ECaN6j%g_T6+TNk/+3:jD[F>DOK_4e&n/*Pg(X'5_oVq_6QK!nI7ekBP@e'duad>71=BZrj8lHk?76qKDScbHJ]]_qE2HA0'?jkqdKpue:K%R9m_1X^4KJ/%B@!pAW!n%REUl?X]X0=N#F(c+E9V\2ad*C'D:gHW`qD?s\.ETiZ1L!>9\^*Nea)DS;bL+1>KAQVem!=3qfk8CB#W%8@Z*;EM&$$pNl0H`dspd3##Ob74n1OV4u.J!@0*/]U8$Xgfal*jN\]*djjR5'o9TA%[dZ(>^i]7.i$8G![&p,N!C[6[pb:&6l9SE%V;a]7LruMm(j9enU<7*N===ogg&VJMJrY^RP"rjZ7UW)lm&l"6;;73Ef+Is;="2)EF))J3:Ebk';'=@sl8.$?(f\f;R77cRdO51'%nK.GOq37hTRD?"Zo;79=EaAIA>[++.c":PN'_`22F#iJ!]c._J"iKDOQql$DXoK^r'oZ88iX)HU1f?3?;Xn#BgkWD?*L\OdK?I_u%2<EKf'BAG,\'pd#rX2bGl,#\ZDB@:':@CB<rNO4rZpWGEFR(4#HPe:e0/X9HWuSQ;l.nn2b'>8NmX%^O)_V@F+`=&H'c.1Yg")``%o2(o:p"@`=1]<)_Q;-_)*2U,@Mho4E@YSlW_fn-RFf@h!TET9B.<"UD>o8dYn8-oPjk0D>DA31,PJcVE=bs4'6o;:e>sTlk9D=W-%K2IIK;GgMLf)3X$1n>q?g?J/i`bp2dPr=P!Ao\H[gjrT'@2f6b7n>r+KX@gMG.=/EouAmsp`pE25!-D*c4.$?7P=IAl9^<Hgf'W<%VDYc.0XAW=M'D.I?7]"q+;bLGD/>jR8]-rMH@tRAQ<%.'/M5eOl&ojYFC3>aka`kTSj)\><*qQ*l2@;kMIUJ]@9VQ"$dICpb2U>7%]B].([Qu8>o(HP+5AVXM@V3Sir,jBEQ_47`V\p"@Lqh<pT7?]QSHe8uePOIQeP@&B#r*b1^kClq+&-X,']cq;,.#s^La>Fhedn(X%f+\im!9(O2$)rf?Zb=;^>&5iP7_e-(.!"t.cF#!]iJ3ApI(I+0V8E3s3fD13VADQ$nbojZ8l\=8&<Wce9(r>(4H4T>3il;KF339X%(fe5"Tl$LXGMM-#hB34]54`gd&VLm28X[c/N:U#8X+4B>>,-_4-t"e4@]/IBX&Mr(18)ah*Jg8g]@@XmY1&hLmA>28,,rm#7sUCe%EiCKFO7$jMk^iFm@RL<6P3&Pp/g@E<mD@"n(*_d$6A9tD4D3258I.8@;[<IN\:I_^M9)1]E`m`)>*6%lQm^_2PVLICIFo!).OI<9%_hBBeg(1B$\oNWqn!0qHgN)9g-Z=>U'XSC2%R3.$H1(fC>_1Tj((lF&EJ?YIpBa*q(J+9d$KbB@NAE@@_096u/d3n(Y-"[.$fogC%R[A6;eDO(_V]p_gb]5"(\bL+RT:ClCn)7P1f+"4n#O#?qI5q-m;nEd5eRh%olO\"Eo;8kIB@r9uQ+9k-CVbdK/nr/FleYh7EJQ2k%mXqg@*o_^(-;pFp_mqP!oq%ZiK4tJ[D]HekhAL@*m+5'W>>>Mi("!=)M!Hut_Cs0DAnlU,eR\0G)>=ifg!5:u\*0C9\Um[rkGgF`%gW\2W1q/lge<X\jY-Yc@-:)l!<+P@lXI,5208ZX,L6mQN=/:S<p0a!X2?_\ZRC^nYP-qku3&aJcF\,=s9t5gt8SQFlo55)-@*!(0%,/R-mOPRI+M$:McZ0biJgjIbd\kSg$G8]?qft/;8pTSl;?V3Q"iml)(FBF'"MY/p(bgrcX2qE"!,Z:>IRZEp`#rZbS80*O^#M+'&%<`/h5DuJ0dA]89V&im[53Pi\(9#F6=me;T5K.(l94&HO<s24OMCQ!@6gL<\`-IWkZ;7r#J;\M(&PZ;6&g5Tqr#!pPtTK.bdo6@r(%KB[ZEd/3>$YH!O75Q.XDWOUgZ(E35C:]F+"]EQ)=Z)f^@3X[\)&(?M)_`O?Cl\r<C4KaT5fK+aRc@CVofT&T1F(,=$OeugXN.H].%aBS5<e4:5MZk?XpX,ILSf"aU`]R&'(T:n$+=o(U8)nd;hWgm7L\B<J&-./MDf$d6Zb(qciQRHP'[aE",9.H]Ff2`dX02Hc\g,^IN%j(4QOB=nsu<M"<P=fd7L1E&iY$X.b<^,V5X,*d_QE40&Y[afY\SA'@em>[sFXY5^VR]`bG#*SUI@Mn^`(N5-qT]tBnoK@EK5XJbp%2.NVS:p)Frb=[K"8;D^\Ub:)L2mE%8S[*U2Iq1!F@o=*\_[mYf@h6_:^0&%JUbB0"C!D=F87%:NCje%"Ub;pA>GZ'a6:,$1D4X-^%?gJ+]]61?[02A=N"gX,b@SM7f:"OOL;AJ_.75_Wi3%Ol(ZbAspBk"4uQ;0KAK"6/1RZn((l\gMJUbB`CTeH,g$AH2b#9P-G1r&(T%mp'9PeT_W4UK%um,-Hq^-6ooZkLq,.-NJh.30_u]4>C]XBNgWs(B`=d@R.<>Yb'#bQmn!'$@.OC,"Z4U`N;ip<uCgG;pH,tVattM%juRA#P7;RKkM3LS#+"YAQSIVQG!9`0:<GJ$S_bg)@G[0FmE%$[iUXCqU`f5PZ9Bi0&BR>QmZl!f*"FVj/(Ep4\^@@cXM&GfCn.0]%2I`8sA4=7PGgAo9@M4='C:3immNj$'Kh!J1)/uM,<m5TOf]BHRe0AqWQM-D5rpPo=AguV&.^]s%R!'BmGZfCHNk)5**WHj*@AUCU%F.!TcL<O6-454b$YQQjqm51t((>C[KC8SHqD*'`4q6jf3Bqt3dd.8T)q$shS7a,&]B;oT&HN_9,g.&u$Q=#E1F'#YU0&'Eo1FS@*%BI7QM0`/4?"BfuD4Xr)+LoHfQ9pi>%()jZaDh4:HhWMS;6Bn(F;`A,?C5m@S'4r]%cE+^UkRGgD1L]"c7S$aOm_JR!m[fuE+`dFB%ruZ/gIV*CEaR:?`;c;[maA3u;<d$NT>KJniqq<ZFZb]Fo:2NZ$&!1eim[T_d#6HF!eM`$Jn8pRZkb8c-n3g+%8RNT,<OZP3_+J]-%;:#aj;C7E<FPk-CKNR^"^*V"5nG\"qSk#4i4bc'@.l)C$B?6<i4*8O"1PU84g;q=M/8laEGs>]I:$WZ[ZaqHK&jPI<`O,jkqplME%`9tMsQM>-LpqJS+l<UHU.t[2&hLa/1X\mGLCXWuG%_;bIhS$V\bkpEt,k.%7`q9k$N^*3Y]f#q<:XC92hY6Z95p'J"U+\;Do&;4B%/bn8d-3?hW`4)_.ch0"4jZi>I\$WZuO$i#l[0;V('hiek<.WiML:a!b83/jdLF)71Ej1[\9O#5M1f&(L]lc?$K$8-i;ETIJ4(j0A%\MW**DFDCJo!#AVKH*To9-WW[`Ii=SS4dK>g!Eksc*#bkU`htT@6)9g;PVlg1a8Q>)%8.JB[71U%Cro$$"<M(&-HtC];fWc+S(d:%<@@DtY(G\5pNS(X6&8DEX;d[qh40Q3)lZ4D1?*7TP^a(n;#e*ec,L)0?'[i1_oeDVq8)/S:3&"Q\d?u]T@i'NKPJu_h-*?._,T[A%Mu/QA,adZ##Wm:5.jNDbR@!]";-b?nN1\<%9LP*]hSoK8e%;!=%#"W=]R2^3R@G+&4r]FX70:CX&;dI8X`!W$o#lcX)7<7("DA(#%j'pK+9-_F"87^0MM6]4+OAYq^J9Y`r4has9Bond%Z4ku[ZluN_88ZNccT&&3ZGtOQ^,lj4LaiR$YDijP!s)P6A5g""k0=qbapP=+%:8W<jdR;k=\$&4UX-1S=o#fk?3M>'[WYj#,Od,-dXg6?dB!3P+Ome*lcdci.R$30GmddX4FDcJo14W0$g^73>.$.VJ-c5W^[XV9R%9^rA#%[+>":e$a"JP9!C2b'dF6FHqf0A:YCYq]rRRVm,7A7Ic>O;@K:YEG78)/(8e_hMm.<SC#gD2(3,r0$_<fL0-4CFjlqCo;AK%$fjJip5O&(d<?'+mCem[_eA)Z4[5)N!';?E@W8Il7P.P"4:nAke.OVid2K(a'kZ?P4L'7*WfdCQb/5b@D495V(s7ZtM]#+iXu?PL%6f(?1Xq&UI@#Z=JR>$AYfEu9QcU7719Ad`#^VXHI9Wpn;%7il.eRJE^pYW7"-R<`ra)J^$@EF(7SEU_Nh-ULeSgk@o81jA7(dNMj%`&C+@ZG=g#.0M[e^5U*%J0Yl^I'_HqHAf+ur8pXu8=_KID)3PBM-P#K[jTqc03RPgCh.bsJc"5""#,;'S\WEj$YMf;%k5a=Kai^=%Yh1R'"dt3.3;)fl"XZ*IE7!g7&Xq#&^*P>8S6Ef&A9lqRP@GE9P$nG[c[matR,-Z]Q+Uq$=6S"n@oi44UX1Hp"$%PT11RH>;.VMC%#2L`YFLP`Wje9`KF.Q>*Of6*5m#oo&2.'@M?3\gB\9fng-=p&s3<o:=eN_ftkk$0q8n3nmccnl*H5YtU,shC-&9GQtJF8XSTq+tP%]rRuD#1#rE%ur^AM(IhmJg$58G]jP$%?mooYA5e/ZXS8Kg0eIZs-^,ZGu45,"5h.-.bs-VmY>_u_rne>"rTH1R=8g3MbVU`7nZC6%c_YM*UT:7jCP4^B3Qu[@K;I*nnX*YTTr]r[dR0d<$JG8TBs7SZ!$8##6V]12C2W.d-Lk5d-1_P$Tg8/jG4(fE0t:EQaP2onZ*Z^d%r&rk,L#+u_dTeG$0ko9-9L9o0j))-#2'(/7m=g/8Y`nM\F0uPM;9!@Deh_SW*fHt&Wf(TSF9$pH_07\N"qY7-:.^2jBa[m=`uHBR%1D&k7S$Hp)E7N,,H#";HL`FolDkmnBr/O7P%EVWP`u^2U8c(UlS(C:aI1']Tgo<bmFG7h,HISega%=40<:H#`m,M5q-u$'qX5,Tm%l!Ld_2"<j//pq0U@pH]VR)t?3dk*JuV(oZplY/ia9_p*fSkkfY;bMET;H)SuFm9UpcHRA&b:u(;[ip^BgE'N\n(USD\]"Q5ATh:I%&X:srU=6Uu\\=0raZ(3[XZ3D;oZ%')]TQZL:funWRq9g>cCqrd&?;_Z(sFcJr3.FVQ\=Sal<h"[)+Psb<hV@\[ZXa;:>Rl(.42M_%HqSLSL5j-K4!E"`KGb<uKXU\5Ci@MP*6=gsAY'Do1@0"sb<MchdF1]Rk-)gU69DKhZ4DBJT^p6HS#]1)TumW\k?SYA>F86Id$\t"%-W5A)LC/`PH'tt]K,Ze_m-LmW)m9m@lE'7UV%^]lm!+;<#6;l5(f(1$"suRI%(u/AY+h6I8nDb\pNo_I)m1d5MohtXJAJ<1.g(u^%]-"0GS<rL"\MD=7!JpDi(UC<Aa8M@Tl-;`+='X6Wn04gf;PCa1fK+kWN^bT;c[R^3"06d!mDoQ4cMA+Hb?dA(l`VK%pA%,?1&+kI%c!1Qu:&%LAAZHb*bcMaN%;7?;SR_r-c59]sNS0Z4ZgKR$SS>+M*d\N4lGF'\J<*#KVT1+]c*@#%<B2Vobg0[>@[bZ]6>AgB['e!%%0m'+VC!Y<6FEH*HcLE7EqLjg4Y33rGb(?RW:H@-O)O1Ir6Y=r44IlfsI;,P!%`EI$Xu)\[l-N/.QG"Q>A%(f\n^,"?AkCdchoN)p%dk(.oeh8?8l>gr:X1VSk6:U1IQe+AA0:d"EijrK?9:M<#Cm[_oHRc.uKOd4UcB)M_+K\l'S0PK5(YK@rI%+M4LDaj=c*a;e4dNh,%;Va7A3f`aDH;?fT,6^YM7g^g.G$m2P&8T"Km`Kp"eYg/6M4qBj3W6!%S?-(0[.u<<)MGuh;N08SKO&3!EhiTdIt8V&#YA`pEV'uV%c_/p9YVY;7't-@"/`[)roR=I:KARF5D?S;[.4=MK-@F7F0@MY;>lg!P(=NZR2=qou/X&hbef@sIBqr[XH-Pb[%"SC<T%XN\@Co)o%&S5m&CeHnN0&:oXj`34='S%u%'41CL$a&@"*-3C+YE$:\Z")I<_,]#m@.>h6^pYsr?R[A*FPY>,k$?8t0k[\mWFhW`a3+.^o$/'!%o,AQn\1-m#Ht:Y@)rD]oiHZW6mm#tr2*1<8ngu[/]EP1eoQ^6oA&?k4<%PSMr63fiBJeK2.hOg/gNHW4GPF(=;luP53l%*oQ6PH,%BE3bqr_Pl<A*A_S&0h$8Q'*jdeMBbpUG7YGQ:Z]'K]]M\%V18X9ucsaF/ipu3HpJF!:U;@PHbOcSoP2HWkhO9-$eAL0cA_L/n@(:%'cAA@XTcIlUbkh9p?.RmVM_>B0rBN0dq#i8B[g/O-n-+c23n0l:'lmf(6nTB(DH)l"jEb9h!sXN`-Fs7>:q`p&]E2R,s!;RRHpql%YViDc'Xk">Y)2RVPp[2s)VCnZPq'B;*`m+Eg,j0`PmoHKk\>P-c5C*R_n*!U.bGFM"Z'(u_=A]uL*[-*4Etd?S&]s4`2^0<=+>*T%69k=LJf-I-*s]1'b%kE.h6dHn`W9:6/UKt[@n:o0OQI?i$!Y-Gn=l]L8\M.Wb.C+cFbRKgD'Q9)g.krnWL@]RZ@d?D8bND_rksiL%MJ:LYa=TIG$:kAlZ]T>n$r)I#:CTD7*st3)H28Y?_ddI3JacP4+4"q7F@7,Gan=2$Kctc-mm,IV&aL!?gAk#[64U>o0jU%H&#KVY%n>'cp4IBU1K.G2J<3SeeU*Qlu:\C71JiW$N<?85gP59b%*nt14`N6kpQ"&.9_%jWbs'SH]bs!kYge5\r''"im&%3>Ki!V:LQ7M8(%YHd`%km;pOSl!sTGHIMImY+*G\tLLUO"1nrl3X$<Q*o`(<L$M^J]tQob71mMgBqcUik0%&=k0flrl?(55WeWZhp`!m%1"$]r[L\"%P%temFWHNkiO\Dh`gTk_PCE6"$+f.[3E^rkI%NH,A_VZ5Mku0)*WRA)l3;o=lQ"^fIQ:kd<,foMV1pb8V4,W^rFg+!QUddmc;f_l%5cfJ"o[Qb/j%VBG4_U;<4!W$r;fsR:7&'TQ93V9M`"n*;E,PX#3#+:S5>upFoq3d(-7JmVIW*=/XPs*P(tjSa:E<20LUFs/#pAU`%r6:UQdGGH-WGFp-%A0<e)Q##Q^G#29a+dbQ`]\OS>S5bs5.*;1Li+MrbSH:r:.Pe.@#])hV0\S;7XARhZfl=Z\t60"1j?X'P^:pZ%/Z$ts-l"k%R[fM>[:"0>'Ed>oIic"Q;BXNh<_jH[Oq*,[m$b^"K0]3,HQ36@kh1SJ$PGMU[RHV#>d(m73DtlVeMD#YPs@1riPr:O%Jj;;2dpWg?ko'RuK0\LC@>@,RZA^^jMg2nuV\H+7SA3#9V_6p;8d@YFeP1)T+@tL]D=%u*khoQ=!Is[N^3#J<?I;mH5h^3?geES^%CQHM"+.<G]/Ln^MJfNh".ppnLd!61]WU]\)[NocpZETjF5'm)b#5"L[qde:&?,Jl`ki6Ga&-'X>$U/O?M83".nSN%%F+*3.aNi0.%$CM^A;KJe=hD08_AWjEBB`UI;Xuq:)h'_^FP(!Ho/*5;Z7aPJ1+'91c:Z`q(lBOUW\-E21]CdH\/H@XHj#o(=Zc:o?5dKY4BZP`n%K"(8T8RB""$g`MuW@T=Z9BKr!m:E<8bgf/qguJ[krh`TUMRhfPbH@ATW'D1sC>T>MK:=T_8b0tOD/kJOO8t[78c.p\cJPA>Nn-r7%<*5QlBgmng9]\;o2^Cm0hMD5BiZn:&NFD4FG1]"q(0`LP/Q"b<6X]JVLae.uQM+JSTqX.8a0u<)U@QFj@lZ/e%)$KLQqTnp&t`/,%<o%d]#>QD=l?),R%E*&hgi@Qe>h.&'OknMLR^8KP7$LBMM=(g@k8Xg=\9&**\HpELF@!J5?"97<8Eq7l(s?%(L:of+0%]h6bPFAI%B,JCb#$p`:`3OZ!rZ5c&RfSiYfC2175*'?aD1$*S[&p83&f7<o<M!\u7F`TPG&pXiF3MLA(ri&_7!Oj)oe@K(!"5J(rGe/ZQ]Y7r%:t!KVHZ5$%bc!;;]M3VNWHSY)*^iH5Ve@]&1PcC0#N7BiT1AA;V=/i.]?5Ja615>?&,!V#4s]dj[B<;P;edJAGA8=1d73sj)YmWF%ptiW6UGB+.ok;FOpEt-ME&?$PhQc.K&m.,q!/]r.V\Nf?>G"[^24SddSBe%Hr3jD'EphZ`@>A/Rh8af:^DhW[ABF8L%4&Ct@*C,9%f?VUI<r;Y5DC^9K?-fdr(mt'N@gl[Oq-.q>#V<NgO>]=idqse%=JeVhbD[5A:30V_-d'>SL)bPX(^PeuG%YY&UJ^qei?WL40jMh9%"TYY75;M>SYCD8X9$Ea-F6i3dS:(/3T=ugVI_:Q_BB6]/rA%@Oo+P.bZ6"MqoVPZ:mn[2:H#kJnpC,#*(lJ?c^3_hgX]+\,^n78E%S.Lh\dh64Rp:`8M.$;RFI=E3ga,Beu,laArs*rDbDr2,-h7atQbQfHoj1!0JU/0TU?uc/C<fsn_Y#C@o8nF+Z#N+BeaIL4[qEHcZ%YPP#%q?,cIPb#Y%D;*ak1_A[*[8Tj`[L9?t%-lEMm-l=6b\D@mrCM5RilO5*o?p"3")h-CEdn>ghF;imPX:8>-%d>(7E%?=Ud1h'%^9ZB^_l9RS5&84J((;>bN:9t1I:q3+?k5EK>_LK&LTc62;n#Z['(m7s9#-h1T!&PX)_&]#:V@6?Vq!'1X<*ra1A`j1r8X:'^0Gh]%ebh`$hDE#i<mc8BLVDf4)a?;=pLh&G\Q7/uThG-@3-LnlM&_eHrIdnu"nb@KTfYT<YOFJW!VD:VW>tZs\&6jY3Q?m9i"[P3'^RPe%YTk&`Sp=55V3kZH.GMJLnlnN<p2^,9a'<h88>T;PC3/$;ej]>qYe4>$*"Hf-)s`./5iau1;@\1(F/m_Elm_F]j:gUjTM$sFmAJdd%%=<\i\atXHZ0L+U,3na!f1Mn'B5O!t`o0:n=AWtj)jZu483hUUUX?Zd7DuJp!ZB'*-b+gQe`5?M$0st17(rE&ON$XI8fdUCT3CC\%_Y"@.<&ssjQ>WlQ1J]E;TSd%^*IJSk[o0'n1.CZ'[VE:PARuWaE_,1DbX;,/X6]<P)acFm(Ca+m*'^IF=FS4q3Aoks$4qV$Qp"8`%_];&L#lU3Ce6))b-$YbaDhI%<9Ha!'kF8'n%/iTBJF6=n'`<K;+KIK43A(oZ)eU,:eVfjpD./hp/^"(_<>(dd^!<XuR:5LGq\]sm%8G@WJP[j/"/$@!iDi8Bd?gGTFQVcbIBqJQ`/@E@V=L<q\[t/t?W6]S?MG9(e8MS_>=R@IjqS7'SW>WoQ:V0LGo;VM-.&r0Bc_,VM%[hb`ul5$deKliVicoI[$KeHge)o-*a]K&l`Jop20h%#+GnO5n%3hcMOV]>LJUnftgh=W7,m4PWh-c0M>hS(:P1MdeI&:]Pi91'ds%N*@Q@^Ui5;o?)m&0lIDRXfI)l2`#>N5j407)8&^;^YjqCWN:EXPe@19RSEnRftC5(:Q4.F`Rf1kkRG-WB?$VR0L5<ugP4-=>5J4U%[b6fuZ"5Q$]=cfPQZV`@Q\jq22A0BZ15kCgG^Ke\I.67;gA.]Z*12@/F1@#t>T$/MR(/;a$]HYD$,-P.R,IM$0<iLVZu9;]LL+Bb%+NE%mqU4<\*qk-X(8OnhW6HL7^bg&cGZtGI-[4(TfE8WtN&.T4\WkJhYIM]Pkgm'S?eO:/(LG#.#)>uYBkB*3ak"Vm.=RXO&MGcO%aqMij4S5U3Zeuu^BLWI_F,/(]f(Ka:\&_D;OYOKohu'b*>0J/1hkl[bcr;XM+8h/@<OLf?_mcO(">O-0]tGmO:*B=J-jNa%28rTs%<;Gl4P_1EJ$:;r*h,I9hC->)u!JG&D+D\%`Z4u!fp+<KR)jVfMH\"<_=4Hs_]C;]q#I.m`d#bJdj(t!(H1.HldW(_B@5VK<G\H>t%S>g:+<)De@nG,1>dQb_FhV+5foj*H3gbBlba8h+i=?/K@MsY&6Mb4Xs@NAb3^J6@U35.k6,`$0$`hO=8k`9$'Z-4g"2Xd8FlEb+i%.s,##+>H+*[Fe;`WRAMYcmt'tm0>A#Y`T<LG6_%$724(C!DqJT%LXBMWcX(K4t\dhY,4jSc#Iu0So$U0jf6bU;lQesaINnj4Zo9V%9RUQ&n\F?4]GC]WcP`V(o4I`J==0bqiAc%]G$aY<@H;aro0$7V'qOIWh0@o7B06r_+?4,E\E-0Z3Y%m8]O_QlpAW"aTqb/uW9\LE%eri*>n!ejs8s3E21q)G4R:9CH\4":UVQ&e(C-6OR[k8ZJE%s:?.TQ/Mp6MM%9WOC`\+-.o.:u9u\"qn*"EoXj;_BSJOb[+9`qZ(r%#OCAs0Eo1r`Hq;3JF#aq+"M&I,(Z`a\9T4U'08K^7,(J69tmrN`)q/R24*UNN^NqV_?LWJV754oX5G_eXNNS$j:u<;om%"XirfWB%n\1*hTQ5055DgB!/fj)hBQF`f:e_1:g4@anEef5b-OHr@Bf4:$4s<kHK(N>V$pWf$b0:Om>"td<&:>OHFdW>j%m]]qMGS+3N+qFS%K-&+JkRBI<1q*Z_1oV1J[$!2@8q>QfHI>_XUXQ,d\98N@[Nb(RT+F,j36$#f))'lSn3"[><ig"K'0K=Sq"HRSZ*Q<6'p&2!lqe2+%p\aD[N-d,J^lKjd.f`u"V6#>A?sWIW[9F`g(F8o;6$IIM8rss/!*PZ=7%8-<Dk#=nhOdnd!U8@kCT^Ir2c*9d2+mehWOI!#U/7F.%>aMTKfI#a%V;(M`RhFo+"!MU>^'45g+Uf=Mq?=;bOT"Psbf9GV`OMBB6_e(/VPEb/)_:L$:Rc4<i]*LCNT9Z_qQNgE1lg%a`\bXC%91'ENVBPe>hf`M>ojM.TLN`W[QokKkC[eU"le:J7+ENt5D#6U^QHZIqj`%X/;AhgBGmI;,Ej%E5qa_RR9WW$5M,U,=4)9mt65f9E%.Rfsp6oa;%+[l?n*mp#I7ls3nA?!mR78<2MO62ld\L+&NdCT\q,]tcE@"Qpn(hN(tf]`^q2q(3?)OJdFkBfesMcKP9rAI+#0Hc=0%k,qEe%2\!`**\U\6JA9b-kBWLBE4k$%Sr$/,]u4XoK#rGLUlrAcK9@a:S+^mCj<IF;Mm3='nidL)[Biknurc&_(P>4r?u5@qbbh,%_oeaf.9FSbe9#[FF=/>[(DraED5uA@$9hU6%rMl$p^Nf6iFuO\O'ZkHCM217?l4cMAo*BWPA-*@0<h[:4>9r,)OrqK=qN\%5\@DX%)oc7B*BB80YYMZ`1mTU7'K?eG^b"/.K'uGsTAH09G\&CpaNa2Fd'M>4d`#jSHrIm/!lX_WZ\^dUZ\]qY8]aUS.pl^f_YUaF1"o#J%ZLI@%&#J)DOTDefhb;&35$hi,V!#@0U722EhLl5/R::#Z-[9s[Xqo_?YVF:g93$>N`/TjDikfEp)*))7>h:>$0pe-Ilc\XP.p`G2%hSXi8HI)%No5VITd#<n%27+:m`M-kW\QHdS!%6=u+qd\_g<do9dG``iDS:9c7.>:_A[O.fO5t>jK$<PUQWR89BmhM&k9YjFV0i`+%G9s#0n9&,430Q)3oZQ-0Cq$\HCY6Z8*r$V%15m%Q6%`ngD;`l$0ZRiaK6o0]f[sm37.U0Yo8:tHdmV2D"B-ssdR&+,C71cp)sGF0%UlPX9\I7b-RSK<NWN&&jB#PEHea@T=buJ2]WFpt,&kXh!<2qJAGcHVrDp#E"Xqq3S<D8PK+?Yb8]>0"%;,_E_g.SLUWgqs4GRV^W%JW#0<rejeOP9"<0q7qM71EMX44N]p6Q3G,1j,=PGXr+aL!(,:9+9e?g#tZ.5(j-JAK_scZ'T(-/8eFC>&e.[.eH3m_m+DdOiFq/L%,7j*$X4`)=YK18lW0=64?4Of>gG0^qU1fsq`25R=dC6oG;?E_aJkOKtiakq$*"Tnr<'HB!FtD\P;6.ZMiOEJnAddCtoZQ7dgSGi*%hPIIFLQ!q1Dqr/PjI,&I'<f3f6tG$T_O":)_0>P_,n5\tPt<r54nb'$UG]VfSXChc&t<O24!Es]^,$1Knh<i*RYG*Tme3MU9^4\O%2<FYCaTbglRhU9,7$hZ.JLD7<MMd"PWO:Z/ckN5fFFP@D2p6*$qDa`koOl%DHQ0J`m+BPl2(u0ZrHE[n0kREad$U&+GqUcl3Mp^]%RKQq(JWFdMTQ#PsD)5Qo9<"VC7R"a5OZG@<RRFY/2W'Bh@&8qkD(">iL#0dA$]nDmjnGb\7#]e%6u"FZDd=5O'.:"-MaaYe"thbl%p$S+TV2/;IPEZ>s_7R<lLu$+/#uN2)";gbe1Gb@=ck8-ojcBp0SS_IG8A2`eSKM,^:u#PNT:12PM>L3_o2T;T&X.19I0mGf'@Mr=%m[$k<Y]Y6jOJrA]\7N599`$s@?/#*;moJW`+/dtL&G^X\>S2S<:2A.f4YRS[e07b7gOcme`Q7*rmC6"je@Kkmm;%bG;[dOn#-tBd%s2hhLjs.*jh!ORCa\fc^a)i[s*M;q<O@.IuU7m3>,HoA0e:?,_'>!YO38ouiYX8^-HokM)(\_XeJdP"X99b"VNn0daXqi"ZMQL%#%[KF.eUY%W1YfIiBBk!5H\6oAPQVgIWjm?9hWWN-@X(,L'[HF3Zg)4Bd)C4^MDEhuu>djWW@Egg<MQ:&ggIj8:%garK2RmcV^N9k6%CCNFOO;VV$,M8R'FYr/$VpmQ*B&l//%p>J_2O'Vf2:81797S0M^4uhV#j#3p"IOKA,->^/d.SU`E5&k('&_3uZ*E/2O`jF#$76bl%TqS/Oe^m6YYX9k;^.rI-!4^`BF9cQ-_G=X!8USuN&K(6FSQOlUa$*hZ7t2MGN=T9!mIO9:V9#1ads9r(*OrA%:NkEXfMjbHfn\1e%g+TZRMr*LK=4lC"2U2+-oVEWbNtt.28eu@KIqEMr9CK7"nZMRCL=b/"8b6V'9s;\AdH^fl6;&JRc"VXIU4oD)=jIe(`+7S7(EUHC%G)3,VBQlFI#@^`=X'`D:QbR:6A2JjoOUtaq1p`Ph$("*4"-KXV:,FOIM#QS,9aOI/(c%,d`a[)eDdQpI+jqINF<S![p.mKf@Pbin%4FLZ'gStSIJ^qa[@F,"#m7B6NbR[O6X:jj``469+?0FH`JYtra?W<?fV9b$>4d'htk24XbR3gh8jMK&n_8R$Ynbm5aZ>V9@1!DSi%Nq4(>OCdG3M%-rqckPQqp&RZj+GI-6Ei,8`a5$Z(Q_pVG0[7.l]dFKcer@ao-HE_HFhiW%bqXPh!(L^C4i9h_K-i=e!<P$EY6`3H%S+L6GE'+\iWCYZR_dQ?I]Z/AVN,N'3\<JPU3k6MaWHKEpNBLrJV63/&l6VE`LN9^6_kbD=A.'P.(E(5:A7HjWWNj[&_FXPE*lUdK%:*gc$V.\8=l,o2>7WhoUm=%@u@koX5c2KK32!Ln!>"!kk>+B[@/!]Nk^aso+5GN0m].Juh4mdfB:4SPb0u3WB2-%uESAWcg9.aC:%F@"jk^?^*V5*bE95Ok8&kmTA*NR#4[Mh=`1FZae$D^LVn8AuR+>u+!2%3F0XSA)=uE&ttNh!N&u2GmK1MB.p_ZV^&g)'Zd3(K)^B%'[Jcko+SUg[`F'd0#mY,1qd1^`XcPGOF]GH7*G+3Q1SWFf5T7=&1s]o'-igl8$q%8O4J_%>PFnk6t2'0lh;r+:H7b&1/2uOdds\m%+\R?$I]FO-XN:j2BlT>?[,WC2B\J2_RXNkN1nK9/%,!L4]pkVI6ZOR?h7[eLrNt)`jtl,8*53aW/oL>-@)H.%Z]'n+dc1CC1m`uk%V9q\i1[ZGA-;"l]m%jDfKkfH',!cPM0=u]\BZmc'Rbd<6KJ;trc,2bn!B$CH3bQWjk^,YsW],\;IlX]Lcf)L<5PUL869H*;DNmMN%'1D=l)%]")&]e0#e"HF?jD%$\d^3#_G`E46BZnh$.]GF+5)?"CZ](dQiG/tPB"=4A#E/mSSmYR#Xe,g`QJP;`NU;;LhnHsD=PplR%[(?VYHbqs\q2O@<j'a+bQum38c+eDfj$eCGK6Kmb=WX\)p1S%+]_gI1[_LC[g]Ybr/7uJ8BZ6@KGJjQh_Uq=s!<%-ZaoRo]h9>,c%>]pSF-MN1H%6%^-^/$W>\Tp+MpAg$q40g3=m7&7A0('a11#smNl?a2KROk#\UV3O<NC6`e]fHE0,]tcE?p`?WN/I<A48Te*@X/M+%U[i]s_F\/8-12e(0m,`h5`TR,R9"8`C8o1i<_bu9Sc*5!DbP+i$K8Zc6;ki;VQI@Mho3g^YP&I4L[-RC<"0KUg>,&?R(<l5PfHeD%#n29N1RFNaA8]pk"QQ#u`g326g(Z,qWLu8#8&#J;)i%]fYUA-r9UskYD6+5!dr7DS/c,b%B"#F%:'kU;r`XFjr#4>1P`4jo;Z4ju%32TY7"'RY]Qr<l[Uc>5NjWrRC&&]<o1S%b>=`I)0PWJc'ckY5[](3(d.0t@i-9uZH5r^kkZaPaR&O3.//?o3s#j_<j[^Unfm42up%;f8ZS^N<(6#FaI)l'-35MW[[2'Z=]A.r1YQ&?$W4(9ZsB0s,/^;JNUtrEZGW"(ZCD\L.M)=7[l;2VAK3.4*4a*E#'s/PNeVr9a@[%?iAU6s4@:6rqHELIf$&Ck'uUpgOK-fs8Dn7s6nkFnK7bJ[t"7Ps7pU5r:g6Q++O/P5Q:YCDu]`RJ,@"\rr$d8nh:%>msk6/^].[8%?bZR35Q:Y#s8K5%q"sf8q`k)QrrI.iil1r^TDmmNo\Y/qrrAQYItn~>%AI9_PrivateDataEnd