%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 005x003.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 361 85
%%HiResBoundingBox: 0 0 360.0044 84.0771
%%CropBox: 0 0 360.0044 84.0771
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 32 8%%BeginData: 4028 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD17FFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD%0EFF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD0EFFA87DA87DA87D%A87DA87DA87DA87DA87DA87D7DFD2AFF7D7DFFA8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8FF7DFFFFFF7DFD04A8FD05FF7D7DA8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A87DA8FFFFFF7DFD05A8FFFFFFA87DFFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FF7DA8FFFFFFA87DFFA8A8A8FD20FF7DFD12FFA8A8FFFF7D7D%FD04A8FD04FFA8A8FD11FF7DFFFFFFA87D7DA9A8A8A8FFFFFFA8A8FD11FF%A8A8FFFFFF7D7EA8A87DA8FD20FFA8A8FD11FF7DFFFFFF7DA8A8A87DA8A8%FFFFFFA8A8FD11FFA8A8FFFFA87D7EA8A87DA8FFFFFFA87DFD11FF7DA8FF%FFA87D7DA8A8847DFD0FFFA87DFFA8A8A8FD09FFA8FF7DFD07FFA8FD0AFF%A8A8FD05FFA8FFA8FD05FFA8FD11FF7DFD09FFA8FFA8FFFFA8FD04FFA8FD%07FFA8FD04FFA8FD06FFA8FD12FF597DA8A87DA8A8A87DA87DA87DA87D27%277DA8FFFFFFA87D7D537D7D7D847DA8FD04FF7D7D7DA8A1A87DA87DA87D%A8F82752A8FD04FF53A852A87D7D7DA8A8FD04FF7D7DA87DA87DA87DA87D%A8A827F87D7DFFFFFFA8FD047DA87D847DA8A8FFFFFF7DA17DA87DA87DA8%7DA87DA8A852F852A8FFFD05A8FFFFA8A8A8FFA8A8A8FFFD08A8275252FD%04FFA97DA852A8A87D7DA87DFD04FFA17DFD04A8CA7DFD04A827277DA8FF%FFFFA87DA87D7DAF7D7DA8A8FD04FF7DFD07A87DCAA8A827277DA8FD04FF%7DFF7D7DA87D7DA87EFD04FFA87DFD06A8A27DA8A8FF522752FFFFFFA8FF%A8FD06FFA8FFFFA8FD0BFFA8A8FFFFFFFD04A87DA8A8A87DA8FD04FF7DFD%06FFA8A8FFFFFFA8FFA8A8FD04FFA8FF7DA87DA8A8A87DFD04FFA1A8FD05%FFA8A8FD06FF7DFFFFFFA8A8FFA8847EA8A87D7DA8FFFFFF7DFD07FFA8A8%FD21FF7DFD12FFA8A8FD05FF7DFD06FFA8A8FD11FF7DFD07FF7DFD05FFA8%A8FD11FFA8A8FD06FFA8A8FD21FFA8A8FD11FF7DFD06FF7DA8FD05FF7DA8%FD11FFA8A8FD05FFA8A8FD05FFA87DFD11FF7DA8FD06FF7DA8FD21FF7DA8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FD05FF7DFD06FFA87DFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD07FF7DFD05FFA87DFFFFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFF7DA8FD06FFA8A8FD21FFA87DA17DA87DA17D%A87DA17DA87DA17DA87DA17DFD06FF7DA8FD05FFA87D7DA87DA17DA87DA1%7DA87DA17DA87DA17DA8FD06FFA8A8FD06FF7DA87DA17DA87DA17DA87DA1%7DA87DA17DA87DFD07FFA8A8FD3BFF7DFD21FF7DFD20FFA8A8FD3BFFA2A8%FD1FFFA87DFD20FFA8A8FD3BFF7DFD21FF7DFD21FF7DFD3BFFA8A8FD1FFF%A87DFD20FFA8A8FD3BFF7DFD21FF7DFD21FF7DFD3BFF7DA8FD1FFFA8A8FD%20FFA87DFD3BFF7DFD21FF7DFD21FF7DFD3BFF7D7DFD1FFFA8A8FD20FFA8%7DFD3AFFA8F852FD1FFF7DF8A8FD1FFF5227FD3AFFA8F852FD1FFF52F8A8%FD1FFF27F8FD3BFF7DFD21FF52FD20FFA852FDFCFFFD3DFFFD06A8FD1BFF%A8A8A8FFA8A8A8FD1BFFFD07A8FD36FF7DA8A8FFA8A8AFFD1AFFA852A8A8%A87DFD1CFFA87DFD05A8FD35FFA87D7DFD04A8FD1BFF7D7D7DA87DA8A8FD%1BFF7D7D7DA87DA8A8FD38FFA8FFA8A9FD1CFFA8FFA8AFA8FD1DFFA8FFA8%FFA8FD3CFFA8FD4EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T17:20:58+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T17:20:59+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T17:20:59+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>60</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAPAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FULq2oR6bp&#xA;V7qMql47KCW4dFpyZYkLkCvc8cVSz9Meaf8AqX/+nyH+mKu/THmn/qX/APp8h/pirv0x5p/6l/8A&#xA;6fIf6Yq79Meaf+pf/wCnyH+mKuh1/Vl1CytdQ0g2cd9K0EM4njlAkWGSehVaGhWFt8VTDVNZ0zSo&#xA;4pdQuFtopnMaSODx5BGkapAIUKiMxJ2ABJ6Yqsk8waNHLLE90qyQpLLIKHaOBlWV60+zG0gDHoDW&#xA;vQ4qmGKseXzJrFxc3ken6M1zBaTvbGdriKLk8YHKikE03xVU/THmn/qX/wDp8h/pirv0x5p/6l//&#xA;AKfIf6Yq79Meaf8AqX/+nyH+mKofUPM3mHT7C5v7nQCLa0ieeYrdwswSNS7UFNzQYqyXFUotfN3l&#xA;26tEu4bwGBzQFkkRh+7EwLIyhlDRsrKSKNyWleS1VR9lqNjfI0lnMs8aFQXQ1X4kWRaHuCjqQR44&#xA;qgNY1q9s9QtLCy0839xdRTzn96kIRLdokNS/UkzjFVH9Meaf+pf/AOnyH+mKu/THmn/qX/8Ap8h/&#xA;pirv0x5p/wCpf/6fIf6Yq79Meaf+pf8A+nyH+mKo7QtUfVNOF3Jbm1kEs8EkDMHKvbTvA3xLsQWj&#xA;JGKrbnzFotrqLadcXQhu1i9co6sq8CsjbORwLcYJG4g8qKxpQHFV1tr2j3Vx9Wgule45cDFuGD8W&#xA;biwIHFqRvsd6qw6qaKo/FXYq7FWP+a/NEmiSafFDCk8t5LxZJGZAsfJI+XJVcLWaaJKtRRy3OKoK&#xA;/wDPE9tdTQJZpIIhMwJkZTSH63tTgQeY0+T4q/DyXY4VTa982+X7K5ktbm79OeI0dPTkahIr1VSO&#xA;+BVH/HPlb/lt/wCSU3/NGKsD81/nl+X1xL5i8m/WZ4tXFhKlsXt5DDcNPal1EbIHK050PqKv3Yq9&#xA;ZxViup/mPoem/X/rMM4/R9xHbT09CnKaWKBGqZQEUvcR7ycdiT0VqKuf8yfLiEMfXEJtV1D13jEa&#xA;fUzE00lx+8ZG4xIo9QU5DkuxriqfadqRvfUDWk9o8XGqXCqCeahhxKM6nrvvscVSnzdqFnp935du&#xA;ruT0oF1Jwz0Zt20+7A2UE4qk3mS98n69NaST6xNbiy5PAIoWPGYsjLKC8T/EoQr4FWYd8VpCXGo+&#xA;Wppp0j1oLKIb+JYvSlYejq0wlZ5KoWqjxngFNCF7V2VpU82fnp+XvlOfS4dTuLgw6i7xJdRQPIkP&#xA;p8d5q0lNef7CscVTzyDqFnqWn6hqFk/q2l3fzT28hVk5RyKjK3FwrCoPQjFUfq3max0vU7LT7iKV&#xA;pb9HeBowhB9N442XiXEhPKdPsqdt+gOKpXZ/mRoV3YC9jhuRGLlbOUFYz6c8ic40d1kaMc6gfa+E&#xA;kc+ONKmOj+arXVvQe2tLoW854LcuqemsnpeqyNxdmBX7JNOPLYE4q7zuwXyXr7HoNNuyf+RD4qh7&#xA;rzn5YntpYV1N4GlRkE8UUgkQsKck5RsvIdqg4qxaAeSNLtBbWOuT2dqyy2qMI2DwJdrCn+jn0eAf&#xA;1YEK8lNKmnbG1pXl89eTfJmgahqc95Ne21nFEEihhImMMEaxqOJWCHnXkduIpQdsVVvJ/wCYflbz&#xA;zruman5duHnt49Pv1nEkMkLRu01keB5qFYjvwJHvirMNb1iDR9Nk1C4jeSGIoHWMoGHNwlayNGtA&#xA;W33xVJovzC0WW/awSG5a5+rG7hTglZI1QueI51A+Ejk/FCejHktWlX2XnzS74uLK1u7hkVpCqRry&#xA;9OOON3bizggqZ1Qofj5VHH4TirJMVYf5f82eX7G0u7W6uvTnj1HUw6enI1K6hORuqkdDiqXX58kX&#xA;epX2p/pidb29gmtnLRM0YimhWIJxESsVQpzX4q1Lb742tL7LWvKg1X9Jrq5kna49a9QpK6K6QSQi&#xA;KMCNPs+ufjb4uKqvYUVpR1r8+/y40XzNa+X9Qu54p7yATw3a28jwfE7IIzwBl51T/ffH3xVn891D&#xA;BEJZSVRmRBRWJ5SuEQUAJ3Zh8u+KqdtqVlcyGOFy0gUsVKOuyu0Z+0B+2hGKr57GynfnPbxSvxKc&#xA;nRWPAmpWpHSo6YqhpND0uRZVeBSJjIXJ68ZmDSoD1CSMKuo2O9cVR+KuxVjvm7TdOt/LPme9gtYY&#xA;r28064N5cpGqyzenbMieo4HJ+Kii8jsMVZFiqVT+V9FnhnhlhkaO4vItRlX15xW5gkSWJxR/hCvC&#xA;jcR8O3TFUND5F8rRQpB9S9SGJSkUc0ssqohhe29NA7MFT0ZWTiNqU8BiqN0jy/pWkyXUtnGwnvWV&#xA;7ueSR5ZJGjQRpyaQsfhQAf24qh9e/wCOr5c/7aMn/dOu8VTnFUmtP+Uy1T/tnaf/AMn73FUfdaVp&#xA;d3dWt3dWcFxd2RZrO4ljR5IS9AxidgWTlxFeOKpZ5T/6XP8A21Ln/jXFUzl0yzl1GHUXV/rcEUtv&#xA;E4kkVRHMUaQcAwQ1MS7kVFNsVSqHyL5YiRoltpDA8foyQPcXDxyJweKkiNIRJ8EhX467U8Biqrae&#xA;TfLtpf299b2pSez5G0BkkZImkjEUjIhYqGdFAY9+vUklVvzr/wAobr3/AGzrv/kw+KpziqTebf8A&#xA;jlQf9tHTP+6jb4qmV9YWOoWktnf28V3ZzDjNbToskbitaMjgqR88VSqWGKHzbpEMKLHDHpl+kcaA&#xA;Kqqs1iAqgbAAYqmepabZ6laNaXis8DMjlUd4zWNg6/FGytsyjviqA1DyjoV/dSXdxFL9ZlKl5Y7i&#xA;4ib4InhAUxuvAcJmBC0r1O4BxVD3nkHypeRzxTWX7u6aRrtFllUTesEEol4sOQcwozV/aFepNVWQ&#xA;AAAACgGwAxVJvKX/AByp/wDto6n/AN1G4xVOcVSLyn/0uf8AtqXP/GuKpodM006iNTNpCdSEXoC9&#xA;9NPXEPIt6fqU58ORJ41pXFUTirsVdirsVdirsVU7m2gubeW2uEEsE6NHNEwqrI44spHgQcVSb/A3&#xA;lb/li/5Kzf8ANeKu/wADeVv+WL/krN/zXirv8DeVv+WL/krN/wA14q7/AAN5W/5Yv+Ss3/NeKq1j&#xA;5T8vWN3Hd21mEuIamKQs7lSylSRzZgDxYjFU3xVJrT/lMtU/7Z2n/wDJ+9xVOcVSa58m+Wrm5luZ&#xA;bJTPO3OZ1eROTEULEKwFdsVU/wDA3lb/AJYv+Ss3/NeKu/wN5W/5Yv8AkrN/zXirv8DeVv8Ali/5&#xA;Kzf814qtfyH5TdSj2AdGBDI0kpUg9QQXoRiqf4qkvm7/AI5UH/bR0v8A7qNviqdYql+q+XtH1aSG&#xA;TULYTyW4dYX5MpUSFS4BUrs3pr92KoL/AAN5W/5Yv+Ss3/NeKu/wN5W/5Yv+Ss3/ADXirv8AA3lb&#xA;/li/5Kzf814q7/A3lb/li/5Kzf8ANeKpppum2Om2aWdjCILaMuyxrUisjmRzUkmrMxJxVE4qkfll&#xA;DFc69A1CYtTc8h3E0EM4+4S0xVPMVdirsVdirsVdirsVdirsVdirsVdirsVdiqTWn/KZap/2ztP/&#xA;AOT97iqc4q7FXYq7FXYq7FXYqk3m3/jlQf8AbR0z/uo2+KpzirsVdirsVdirsVdirsVSbQf+Or5j&#xA;/wC2jH/3TrTFU5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvN/LXk3zfY/nN5m1691O6uPLF1ZW&#xA;40u0lnd4xLK5aRAlQoFuyScVI2EopvXFXpGKuxV2KuxV2KuxV2KvPPzy0Xz1qvk6CPyVdyW2rw6h&#xA;ZyFI+NZI/WC/tKwHpSMkxJoAqHFWfWcDW9pBbvM9w0MaxtPKQZJCqgF3IAHJqVO2KquKuxV2KuxV&#xA;2KuxV2KvNvyq8u+fdL80edrjzPqM95YT6iq6IJStHgEQImoiICfSaKIkd0YdsVek4q7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqlXmbV5tK0h7q3VZLt5Ybe1hanxy3EqxItCyV3f8AmGKpVaecZbiytL2t&#xA;qsE/1BWq5BLXshU8K9wpX4fHkK7blU/0m7murJZJgomR5YZeFQpeCVomZQakBilQCdsCovFXYq7F&#xA;XYq7FXYqxK2863Nxqup2MdtH6dpPFBb3BZ/i9W5+qcmUqAQsqSj4W/YoaFhhVG+X/NMurXKxvbLA&#xA;ri4pxlWWjWrxo/xLsa+uB81NOSlWwKyDFXYq7FXYq7FXYqkXnHzJJoGmxXUcSzSSSFBG5YDjHDJP&#xA;IxKK5HFIWNaU8cVQdz5xnS6traOK35305tbctMSFkECvzPFTzQyv6f7PahPIDCrIdNvVvtOtb1VK&#xA;LdQxzBCakCRQ1KjwrgVEYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsnpfD6nH7Q4cqfa7Ur3xVBt+hv&#xA;rp5+j9a9KOtaf3dZPS67f784/wCy98VVdM+o/o+3+o/7x8B6PX7Pvy+Kvjy3r13xVE4q7FXYq7FX&#xA;Yq7FUnl/wt6Dcfq1NqfV+HqV9cceHp/FX16Up+374qu0v/Df1ofov0OfpNw+rcfS48l9Tjw+DlXh&#xA;zpv9mvbFU2xV2KuxV2KuxV2KoS//AERzj+v/AFfnxl9L1+FePA+rx59uH2qduuKoKb/D9bz7PqUP&#xA;qenX1Of1YV9Djvz+r8f7velMVTS2+r/Vovq3H6twX0eFOHCnw8abUp0xVUxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:023B4F983D2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:023B4F983D2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:023B4F983D2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T17:20:59+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -84.0771 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 84.0771 li
360.004 84.0771 li
360.004 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 84.0771 mo
360.004 84.0771 li
360.004 0 li
0 0 li
0 84.0771 li
cp
clp
0 84.0771 mo
360.004 84.0771 li
360.004 0 li
0 0 li
0 84.0771 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
55.7969 6.87891 mo
108.536 6.87891 li
108.536 35.1592 li
55.7969 35.1592 li
55.7969 6.87891 li
cp
f
.76434 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
55.7969 6.87891 mo
108.536 6.87891 li
108.536 35.1592 li
55.7969 35.1592 li
55.7969 6.87891 li
cp
.746 .676 .668 .898 cmyk
@
74.5215 20.6553 mo
74.5215 19.7656 73.6318 18.9585 72.3936 18.9585 cv
69.3027 18.9585 li
69.3027 19.2246 li
69.4858 19.2246 li
70.1465 19.2246 70.1738 19.3164 70.1738 19.6553 cv
70.1738 24.5259 li
70.1738 24.8652 70.1465 24.957 69.4858 24.957 cv
69.3027 24.957 li
69.3027 25.2231 li
69.5229 25.2046 70.2749 25.2046 70.541 25.2046 cv
70.8159 25.2046 71.5684 25.2046 71.7881 25.2231 cv
71.7881 24.957 li
71.605 24.957 li
70.9443 24.957 70.917 24.8652 70.917 24.5259 cv
70.917 22.3062 li
72.4668 22.3062 li
73.54 22.3062 74.5215 21.5815 74.5215 20.6553 cv
cp
73.6685 20.6553 mo
73.6685 21.0405 73.6685 22.0859 72.1733 22.0859 cv
70.8984 22.0859 li
70.8984 19.5913 li
70.8984 19.2886 70.917 19.2246 71.3203 19.2246 cv
72.1826 19.2246 li
73.6685 19.2246 73.6685 20.2607 73.6685 20.6553 cv
cp
0 0 0 1 cmyk
f
81.6025 24.4248 mo
81.6025 24.3701 81.6025 24.2876 81.5015 24.2876 cv
81.4097 24.2876 81.4097 24.3423 81.4004 24.4341 cv
81.355 24.9844 81.0889 25.2319 80.7954 25.2319 cv
80.3735 25.2319 80.2817 24.8008 80.2085 24.3149 cv
80.1167 23.627 li
80.0522 23.1685 80.0156 22.875 79.7407 22.5908 cv
79.6396 22.4897 79.4009 22.2422 78.8965 22.1045 cv
79.8047 21.8936 80.5107 21.3154 80.5107 20.6094 cv
80.5107 19.7197 79.4746 18.9585 78.1538 18.9585 cv
75.4111 18.9585 li
75.4111 19.2246 li
75.5947 19.2246 li
76.2549 19.2246 76.2827 19.3164 76.2827 19.6553 cv
76.2827 24.5259 li
76.2827 24.8652 76.2549 24.957 75.5947 24.957 cv
75.4111 24.957 li
75.4111 25.2231 li
75.6221 25.2046 76.3745 25.2046 76.6401 25.2046 cv
76.9063 25.2046 77.6675 25.2046 77.8784 25.2231 cv
77.8784 24.957 li
77.6953 24.957 li
77.0347 24.957 77.0073 24.8652 77.0073 24.5259 cv
77.0073 22.1777 li
78.0713 22.1777 li
78.4287 22.1777 78.7681 22.2788 79.0161 22.5356 cv
79.3276 22.8843 79.3276 23.0767 79.3276 23.7095 cv
79.3276 24.4341 79.3276 24.6729 79.7314 25.0669 cv
79.8687 25.2046 80.2539 25.4155 80.7676 25.4155 cv
81.4834 25.4155 81.6025 24.6177 81.6025 24.4248 cv
cp
79.6577 20.6094 mo
79.6577 21.4072 79.2271 21.9941 78.0347 21.9941 cv
77.0073 21.9941 li
77.0073 19.5913 li
77.0073 19.3804 77.0073 19.2705 77.1997 19.2334 cv
77.2822 19.2246 77.5576 19.2246 77.7407 19.2246 cv
78.4839 19.2246 79.6577 19.2246 79.6577 20.6094 cv
cp
f
87.9863 19.2246 mo
87.9863 18.9585 li
87.7476 18.9766 87.2617 18.9766 87.0049 18.9766 cv
86.748 18.9766 86.2617 18.9766 86.0234 18.9585 cv
86.0234 19.2246 li
86.8945 19.2246 86.8945 19.6553 86.8945 19.9214 cv
86.8945 23.9297 li
83.7119 19.0869 li
83.6294 18.9678 83.6201 18.9585 83.4185 18.9585 cv
82.0151 18.9585 li
82.0151 19.2246 li
82.4097 19.2246 82.6387 19.2246 82.8867 19.2886 cv
82.8867 24.2598 li
82.8867 24.5259 82.8867 24.957 82.0151 24.957 cv
82.0151 25.2231 li
82.2534 25.2046 82.7397 25.2046 82.9966 25.2046 cv
83.2534 25.2046 83.7397 25.2046 83.978 25.2231 cv
83.978 24.957 li
83.1064 24.957 83.1064 24.5259 83.1064 24.2598 cv
83.1064 19.4355 li
83.1802 19.5088 83.1802 19.5273 83.2627 19.6372 cv
86.8398 25.0854 li
86.9312 25.2139 86.9404 25.2231 87.0049 25.2231 cv
87.0874 25.2231 87.1055 25.1865 87.1147 25.168 cv
87.1147 19.9214 li
87.1147 19.6553 87.1147 19.2246 87.9863 19.2246 cv
cp
f
94.9663 23.0034 mo
94.9663 22.7373 li
94.7275 22.7559 94.0947 22.7559 93.8198 22.7559 cv
93.5259 22.7559 92.728 22.7559 92.4805 22.7373 cv
92.4805 23.0034 li
92.7646 23.0034 li
93.5718 23.0034 93.5996 23.1133 93.5996 23.4434 cv
93.5996 24.0308 li
93.5996 25.0762 92.3979 25.1494 92.1597 25.1494 cv
91.4351 25.1494 89.7197 24.7095 89.7197 22.0859 cv
89.7197 19.4355 91.4531 19.0317 92.0952 19.0317 cv
92.8931 19.0317 93.8472 19.6099 94.0854 21.2329 cv
94.104 21.334 94.104 21.3613 94.2139 21.3613 cv
94.3423 21.3613 94.3423 21.334 94.3423 21.1504 cv
94.3423 18.9766 li
94.3423 18.8115 94.3423 18.7656 94.2505 18.7656 cv
94.1958 18.7656 94.1865 18.7842 94.1313 18.876 cv
93.6821 19.6006 li
93.416 19.2705 92.8564 18.7656 91.9854 18.7656 cv
90.3252 18.7656 88.8667 20.2061 88.8667 22.0859 cv
88.8667 23.9849 90.3252 25.4155 91.9941 25.4155 cv
92.6455 25.4155 93.3887 25.2046 93.728 24.6177 cv
93.8931 24.9111 94.1958 25.2139 94.269 25.2139 cv
94.3423 25.2139 94.3423 25.1587 94.3423 25.0122 cv
94.3423 23.4067 li
94.3423 23.0493 94.3789 23.0034 94.9663 23.0034 cv
cp
f
149.046 6.87891 mo
201.786 6.87891 li
201.786 35.1592 li
149.046 35.1592 li
149.046 6.87891 li
cp
0 0 0 0 cmyk
f
149.046 6.87891 mo
201.786 6.87891 li
201.786 35.1592 li
149.046 35.1592 li
149.046 6.87891 li
cp
.746 .676 .668 .898 cmyk
@
167.771 20.6553 mo
167.771 19.7656 166.881 18.9585 165.643 18.9585 cv
162.552 18.9585 li
162.552 19.2246 li
162.735 19.2246 li
163.396 19.2246 163.423 19.3164 163.423 19.6553 cv
163.423 24.5259 li
163.423 24.8652 163.396 24.957 162.735 24.957 cv
162.552 24.957 li
162.552 25.2231 li
162.772 25.2046 163.524 25.2046 163.791 25.2046 cv
164.065 25.2046 164.818 25.2046 165.038 25.2231 cv
165.038 24.957 li
164.854 24.957 li
164.194 24.957 164.167 24.8652 164.167 24.5259 cv
164.167 22.3062 li
165.716 22.3062 li
166.79 22.3062 167.771 21.5815 167.771 20.6553 cv
cp
166.918 20.6553 mo
166.918 21.0405 166.918 22.0859 165.423 22.0859 cv
164.148 22.0859 li
164.148 19.5913 li
164.148 19.2886 164.167 19.2246 164.57 19.2246 cv
165.432 19.2246 li
166.918 19.2246 166.918 20.2607 166.918 20.6553 cv
cp
0 0 0 1 cmyk
f
174.852 24.4248 mo
174.852 24.3701 174.852 24.2876 174.751 24.2876 cv
174.659 24.2876 174.659 24.3423 174.65 24.4341 cv
174.604 24.9844 174.338 25.2319 174.045 25.2319 cv
173.623 25.2319 173.531 24.8008 173.458 24.3149 cv
173.366 23.627 li
173.302 23.1685 173.265 22.875 172.99 22.5908 cv
172.889 22.4897 172.65 22.2422 172.146 22.1045 cv
173.054 21.8936 173.76 21.3154 173.76 20.6094 cv
173.76 19.7197 172.724 18.9585 171.403 18.9585 cv
168.661 18.9585 li
168.661 19.2246 li
168.844 19.2246 li
169.504 19.2246 169.532 19.3164 169.532 19.6553 cv
169.532 24.5259 li
169.532 24.8652 169.504 24.957 168.844 24.957 cv
168.661 24.957 li
168.661 25.2231 li
168.872 25.2046 169.624 25.2046 169.89 25.2046 cv
170.156 25.2046 170.917 25.2046 171.128 25.2231 cv
171.128 24.957 li
170.945 24.957 li
170.284 24.957 170.257 24.8652 170.257 24.5259 cv
170.257 22.1777 li
171.321 22.1777 li
171.678 22.1777 172.018 22.2788 172.265 22.5356 cv
172.577 22.8843 172.577 23.0767 172.577 23.7095 cv
172.577 24.4341 172.577 24.6729 172.981 25.0669 cv
173.118 25.2046 173.503 25.4155 174.017 25.4155 cv
174.733 25.4155 174.852 24.6177 174.852 24.4248 cv
cp
172.907 20.6094 mo
172.907 21.4072 172.476 21.9941 171.284 21.9941 cv
170.257 21.9941 li
170.257 19.5913 li
170.257 19.3804 170.257 19.2705 170.449 19.2334 cv
170.532 19.2246 170.807 19.2246 170.99 19.2246 cv
171.733 19.2246 172.907 19.2246 172.907 20.6094 cv
cp
f
181.236 19.2246 mo
181.236 18.9585 li
180.997 18.9766 180.511 18.9766 180.254 18.9766 cv
179.998 18.9766 179.511 18.9766 179.273 18.9585 cv
179.273 19.2246 li
180.144 19.2246 180.144 19.6553 180.144 19.9214 cv
180.144 23.9297 li
176.961 19.0869 li
176.879 18.9678 176.87 18.9585 176.668 18.9585 cv
175.265 18.9585 li
175.265 19.2246 li
175.659 19.2246 175.888 19.2246 176.136 19.2886 cv
176.136 24.2598 li
176.136 24.5259 176.136 24.957 175.265 24.957 cv
175.265 25.2231 li
175.503 25.2046 175.989 25.2046 176.246 25.2046 cv
176.503 25.2046 176.989 25.2046 177.228 25.2231 cv
177.228 24.957 li
176.356 24.957 176.356 24.5259 176.356 24.2598 cv
176.356 19.4355 li
176.43 19.5088 176.43 19.5273 176.512 19.6372 cv
180.089 25.0854 li
180.181 25.2139 180.19 25.2231 180.254 25.2231 cv
180.337 25.2231 180.355 25.1865 180.364 25.168 cv
180.364 19.9214 li
180.364 19.6553 180.364 19.2246 181.236 19.2246 cv
cp
f
188.215 23.0034 mo
188.215 22.7373 li
187.977 22.7559 187.344 22.7559 187.069 22.7559 cv
186.775 22.7559 185.978 22.7559 185.73 22.7373 cv
185.73 23.0034 li
186.014 23.0034 li
186.821 23.0034 186.849 23.1133 186.849 23.4434 cv
186.849 24.0308 li
186.849 25.0762 185.647 25.1494 185.409 25.1494 cv
184.685 25.1494 182.969 24.7095 182.969 22.0859 cv
182.969 19.4355 184.703 19.0317 185.345 19.0317 cv
186.143 19.0317 187.097 19.6099 187.335 21.2329 cv
187.354 21.334 187.354 21.3613 187.463 21.3613 cv
187.592 21.3613 187.592 21.334 187.592 21.1504 cv
187.592 18.9766 li
187.592 18.8115 187.592 18.7656 187.5 18.7656 cv
187.445 18.7656 187.436 18.7842 187.381 18.876 cv
186.932 19.6006 li
186.666 19.2705 186.106 18.7656 185.235 18.7656 cv
183.575 18.7656 182.116 20.2061 182.116 22.0859 cv
182.116 23.9849 183.575 25.4155 185.244 25.4155 cv
185.895 25.4155 186.638 25.2046 186.978 24.6177 cv
187.143 24.9111 187.445 25.2139 187.519 25.2139 cv
187.592 25.2139 187.592 25.1587 187.592 25.0122 cv
187.592 23.4067 li
187.592 23.0493 187.628 23.0034 188.215 23.0034 cv
cp
f
108.536 21.019 mo
141.479 21.019 li
.746 .676 .668 .898 cmyk
@
147.594 21.019 mo
141.479 18.7261 li
141.479 23.312 li
147.594 21.019 li
cp
f
0 lc
0 lj
147.594 21.019 mo
141.479 18.7261 li
141.479 23.312 li
147.594 21.019 li
cp
@
1 lc
1 lj
25.2231 21.019 mo
48.23 21.019 li
@
54.3447 21.019 mo
48.23 18.7261 li
48.23 23.312 li
54.3447 21.019 li
cp
f
0 lc
0 lj
54.3447 21.019 mo
48.23 18.7261 li
48.23 23.312 li
54.3447 21.019 li
cp
@
1 lc
1 lj
128.401 21.019 mo
128.409 58.584 li
@
128.552 64.6968 mo
130.702 58.5303 li
126.116 58.6382 li
128.552 64.6968 li
cp
f
0 lc
0 lj
128.552 64.6968 mo
130.702 58.5303 li
126.116 58.6382 li
128.552 64.6968 li
cp
@
242.295 6.87891 mo
295.036 6.87891 li
295.036 35.1592 li
242.295 35.1592 li
242.295 6.87891 li
cp
0 0 0 0 cmyk
f
1 lc
1 lj
242.295 6.87891 mo
295.036 6.87891 li
295.036 35.1592 li
242.295 35.1592 li
242.295 6.87891 li
cp
.746 .676 .668 .898 cmyk
@
261.02 20.6553 mo
261.02 19.7656 260.13 18.9585 258.893 18.9585 cv
255.801 18.9585 li
255.801 19.2246 li
255.985 19.2246 li
256.645 19.2246 256.673 19.3164 256.673 19.6553 cv
256.673 24.5259 li
256.673 24.8652 256.645 24.957 255.985 24.957 cv
255.801 24.957 li
255.801 25.2231 li
256.022 25.2046 256.774 25.2046 257.04 25.2046 cv
257.315 25.2046 258.067 25.2046 258.288 25.2231 cv
258.288 24.957 li
258.104 24.957 li
257.444 24.957 257.416 24.8652 257.416 24.5259 cv
257.416 22.3062 li
258.966 22.3062 li
260.04 22.3062 261.02 21.5815 261.02 20.6553 cv
cp
260.167 20.6553 mo
260.167 21.0405 260.167 22.0859 258.672 22.0859 cv
257.398 22.0859 li
257.398 19.5913 li
257.398 19.2886 257.416 19.2246 257.82 19.2246 cv
258.681 19.2246 li
260.167 19.2246 260.167 20.2607 260.167 20.6553 cv
cp
0 0 0 1 cmyk
f
268.101 24.4248 mo
268.101 24.3701 268.101 24.2876 268 24.2876 cv
267.909 24.2876 267.909 24.3423 267.9 24.4341 cv
267.854 24.9844 267.587 25.2319 267.294 25.2319 cv
266.873 25.2319 266.781 24.8008 266.708 24.3149 cv
266.616 23.627 li
266.551 23.1685 266.514 22.875 266.24 22.5908 cv
266.138 22.4897 265.9 22.2422 265.396 22.1045 cv
266.303 21.8936 267.01 21.3154 267.01 20.6094 cv
267.01 19.7197 265.973 18.9585 264.653 18.9585 cv
261.911 18.9585 li
261.911 19.2246 li
262.093 19.2246 li
262.754 19.2246 262.782 19.3164 262.782 19.6553 cv
262.782 24.5259 li
262.782 24.8652 262.754 24.957 262.093 24.957 cv
261.911 24.957 li
261.911 25.2231 li
262.122 25.2046 262.874 25.2046 263.139 25.2046 cv
263.405 25.2046 264.167 25.2046 264.377 25.2231 cv
264.377 24.957 li
264.194 24.957 li
263.534 24.957 263.506 24.8652 263.506 24.5259 cv
263.506 22.1777 li
264.57 22.1777 li
264.928 22.1777 265.267 22.2788 265.515 22.5356 cv
265.827 22.8843 265.827 23.0767 265.827 23.7095 cv
265.827 24.4341 265.827 24.6729 266.23 25.0669 cv
266.368 25.2046 266.753 25.4155 267.267 25.4155 cv
267.982 25.4155 268.101 24.6177 268.101 24.4248 cv
cp
266.157 20.6094 mo
266.157 21.4072 265.726 21.9941 264.534 21.9941 cv
263.506 21.9941 li
263.506 19.5913 li
263.506 19.3804 263.506 19.2705 263.699 19.2334 cv
263.782 19.2246 264.056 19.2246 264.24 19.2246 cv
264.983 19.2246 266.157 19.2246 266.157 20.6094 cv
cp
f
274.485 19.2246 mo
274.485 18.9585 li
274.247 18.9766 273.76 18.9766 273.503 18.9766 cv
273.247 18.9766 272.761 18.9766 272.522 18.9585 cv
272.522 19.2246 li
273.394 19.2246 273.394 19.6553 273.394 19.9214 cv
273.394 23.9297 li
270.211 19.0869 li
270.128 18.9678 270.12 18.9585 269.917 18.9585 cv
268.514 18.9585 li
268.514 19.2246 li
268.909 19.2246 269.138 19.2246 269.385 19.2886 cv
269.385 24.2598 li
269.385 24.5259 269.385 24.957 268.514 24.957 cv
268.514 25.2231 li
268.752 25.2046 269.239 25.2046 269.496 25.2046 cv
269.752 25.2046 270.239 25.2046 270.477 25.2231 cv
270.477 24.957 li
269.606 24.957 269.606 24.5259 269.606 24.2598 cv
269.606 19.4355 li
269.679 19.5088 269.679 19.5273 269.761 19.6372 cv
273.338 25.0854 li
273.43 25.2139 273.44 25.2231 273.503 25.2231 cv
273.586 25.2231 273.605 25.1865 273.614 25.168 cv
273.614 19.9214 li
273.614 19.6553 273.614 19.2246 274.485 19.2246 cv
cp
f
281.465 23.0034 mo
281.465 22.7373 li
281.227 22.7559 280.593 22.7559 280.319 22.7559 cv
280.025 22.7559 279.227 22.7559 278.979 22.7373 cv
278.979 23.0034 li
279.264 23.0034 li
280.071 23.0034 280.098 23.1133 280.098 23.4434 cv
280.098 24.0308 li
280.098 25.0762 278.897 25.1494 278.659 25.1494 cv
277.934 25.1494 276.218 24.7095 276.218 22.0859 cv
276.218 19.4355 277.953 19.0317 278.594 19.0317 cv
279.392 19.0317 280.346 19.6099 280.584 21.2329 cv
280.603 21.334 280.603 21.3613 280.713 21.3613 cv
280.841 21.3613 280.841 21.334 280.841 21.1504 cv
280.841 18.9766 li
280.841 18.8115 280.841 18.7656 280.75 18.7656 cv
280.695 18.7656 280.685 18.7842 280.63 18.876 cv
280.181 19.6006 li
279.915 19.2705 279.356 18.7656 278.484 18.7656 cv
276.824 18.7656 275.366 20.2061 275.366 22.0859 cv
275.366 23.9849 276.824 25.4155 278.494 25.4155 cv
279.145 25.4155 279.887 25.2046 280.227 24.6177 cv
280.392 24.9111 280.695 25.2139 280.768 25.2139 cv
280.841 25.2139 280.841 25.1587 280.841 25.0122 cv
280.841 23.4067 li
280.841 23.0493 280.878 23.0034 281.465 23.0034 cv
cp
f
201.786 21.019 mo
234.729 21.019 li
.746 .676 .668 .898 cmyk
@
240.843 21.019 mo
234.728 18.7261 li
234.728 23.312 li
240.843 21.019 li
cp
f
0 lc
0 lj
240.843 21.019 mo
234.728 18.7261 li
234.728 23.312 li
240.843 21.019 li
cp
@
1 lc
1 lj
222.43 21.019 mo
223.084 59.0933 li
@
223.189 65.2065 mo
225.377 59.0532 li
220.792 59.1323 li
223.189 65.2065 li
cp
f
0 lc
0 lj
223.189 65.2065 mo
225.377 59.0532 li
220.792 59.1323 li
223.189 65.2065 li
cp
@
218.185 14.5537 mo
218.185 14.4624 218.093 14.4624 218.057 14.4624 cv
217.956 14.4624 217.947 14.4805 217.91 14.6089 cv
217.763 15.0859 217.506 15.4067 217.204 15.4067 cv
216.911 15.4067 216.892 15.1411 216.892 14.8843 cv
216.892 14.6089 216.956 14.123 216.993 13.8384 cv
216.993 13.8384 217.039 13.481 217.039 13.3525 cv
217.039 12.7656 216.663 12.4443 216.25 12.2793 cv
217.387 12.0132 218.158 11.252 218.158 10.4814 cv
218.158 9.74756 217.479 9.1333 216.36 9.1333 cv
214.058 9.1333 li
213.893 9.1333 213.81 9.1333 213.81 9.30762 cv
213.81 9.39941 213.875 9.39941 214.048 9.39941 cv
214.278 9.39941 214.535 9.39941 214.535 9.5459 cv
214.535 9.60107 214.535 9.62842 214.516 9.68359 cv
213.259 14.7373 li
213.177 15.0586 213.123 15.1318 212.563 15.1318 cv
212.398 15.1318 212.315 15.1318 212.315 15.3062 cv
212.315 15.3979 212.407 15.3979 212.444 15.3979 cv
212.755 15.3979 213.104 15.3794 213.425 15.3794 cv
213.755 15.3794 214.104 15.3979 214.424 15.3979 cv
214.498 15.3979 214.599 15.3979 214.599 15.2236 cv
214.599 15.1318 214.526 15.1318 214.388 15.1318 cv
213.875 15.1318 213.875 15.0586 213.875 14.9756 cv
213.893 14.8384 li
214.516 12.3525 li
215.507 12.3525 li
216.232 12.3525 216.387 12.8389 216.387 13.1782 cv
216.387 13.3247 216.314 13.6367 216.25 13.8662 cv
216.186 14.123 216.103 14.4624 216.103 14.6455 cv
216.103 15.3613 216.681 15.5903 217.176 15.5903 cv
217.91 15.5903 218.185 14.6367 218.185 14.5537 cv
cp
217.406 10.2798 mo
217.406 10.4448 217.36 12.1689 215.498 12.1689 cv
214.562 12.1689 li
215.167 9.74756 li
215.241 9.4541 215.305 9.42676 215.387 9.41748 cv
215.452 9.39941 215.727 9.39941 215.901 9.39941 cv
216.47 9.39941 217.406 9.39941 217.406 10.2798 cv
cp
0 0 0 1 cmyk
f
222.024 17.6265 mo
222.024 17.5991 222.024 17.5806 221.868 17.4248 cv
220.951 16.4985 220.437 14.9849 220.437 13.1138 cv
220.437 11.3345 220.868 9.80273 221.932 8.7207 cv
222.024 8.6377 222.024 8.61963 222.024 8.59229 cv
222.024 8.53711 221.978 8.51855 221.941 8.51855 cv
221.822 8.51855 221.07 9.1792 220.621 10.0781 cv
220.153 11.0044 219.942 11.9858 219.942 13.1138 cv
219.942 13.9302 220.07 15.0215 220.547 16.0029 cv
221.088 17.1035 221.84 17.7002 221.941 17.7002 cv
221.978 17.7002 222.024 17.6816 222.024 17.6265 cv
cp
f
226.573 13.8569 mo
226.372 13.8569 li
226.343 14.0127 226.27 14.5171 226.178 14.6641 cv
226.115 14.7466 225.591 14.7466 225.316 14.7466 cv
223.62 14.7466 li
223.867 14.5356 224.426 13.9487 224.666 13.7285 cv
226.059 12.4443 226.573 11.9673 226.573 11.0596 cv
226.573 10.0044 225.739 9.29834 224.674 9.29834 cv
223.61 9.29834 222.987 10.2065 222.987 10.9951 cv
222.987 11.4629 223.39 11.4629 223.417 11.4629 cv
223.61 11.4629 223.849 11.3252 223.849 11.0317 cv
223.849 10.7749 223.674 10.6006 223.417 10.6006 cv
223.335 10.6006 223.317 10.6006 223.29 10.6099 cv
223.463 9.98633 223.958 9.56445 224.555 9.56445 cv
225.334 9.56445 225.812 10.2153 225.812 11.0596 cv
225.812 11.8389 225.362 12.5176 224.839 13.1045 cv
222.987 15.1777 li
222.987 15.3979 li
226.334 15.3979 li
226.573 13.8569 li
cp
f
229.618 13.1138 mo
229.618 12.417 229.526 11.2793 229.012 10.2153 cv
228.471 9.11475 227.719 8.51855 227.619 8.51855 cv
227.582 8.51855 227.536 8.53711 227.536 8.59229 cv
227.536 8.61963 227.536 8.6377 227.692 8.79395 cv
228.609 9.72021 229.123 11.2334 229.123 13.1045 cv
229.123 14.8843 228.692 16.416 227.627 17.498 cv
227.536 17.5806 227.536 17.5991 227.536 17.6265 cv
227.536 17.6816 227.582 17.7002 227.619 17.7002 cv
227.738 17.7002 228.49 17.0396 228.939 16.1406 cv
229.407 15.2051 229.618 14.2148 229.618 13.1138 cv
cp
f
1 lc
1 lj
295.036 21.019 mo
331.036 21.019 li
.746 .676 .668 .898 cmyk
@
337.15 21.019 mo
331.036 18.7261 li
331.036 23.312 li
337.15 21.019 li
cp
f
0 lc
0 lj
337.15 21.019 mo
331.036 18.7261 li
331.036 23.312 li
337.15 21.019 li
cp
@
1 lc
1 lj
317.783 21.019 mo
318.022 42.8955 li
318.359 59.0933 li
@
318.486 65.2065 mo
320.651 59.0454 li
316.067 59.1401 li
318.486 65.2065 li
cp
f
0 lc
0 lj
318.486 65.2065 mo
320.651 59.0454 li
316.067 59.1411 li
318.486 65.2065 li
cp
@
312.006 14.5605 mo
312.006 14.4688 311.915 14.4688 311.878 14.4688 cv
311.778 14.4688 311.768 14.4873 311.732 14.6157 cv
311.584 15.0928 311.328 15.4136 311.025 15.4136 cv
310.732 15.4136 310.713 15.1475 310.713 14.8906 cv
310.713 14.6157 310.778 14.1294 310.814 13.8452 cv
310.814 13.8452 310.86 13.4873 310.86 13.3594 cv
310.86 12.772 310.484 12.4512 310.072 12.2861 cv
311.208 12.02 311.979 11.2588 311.979 10.4883 cv
311.979 9.75439 311.3 9.14014 310.181 9.14014 cv
307.879 9.14014 li
307.714 9.14014 307.631 9.14014 307.631 9.31445 cv
307.631 9.40576 307.696 9.40576 307.871 9.40576 cv
308.099 9.40576 308.356 9.40576 308.356 9.55273 cv
308.356 9.60791 308.356 9.63525 308.338 9.69043 cv
307.082 14.7441 li
306.999 15.0649 306.944 15.1387 306.384 15.1387 cv
306.219 15.1387 306.136 15.1387 306.136 15.3125 cv
306.136 15.4043 306.228 15.4043 306.265 15.4043 cv
306.577 15.4043 306.925 15.3862 307.247 15.3862 cv
307.577 15.3862 307.925 15.4043 308.247 15.4043 cv
308.32 15.4043 308.42 15.4043 308.42 15.2305 cv
308.42 15.1387 308.347 15.1387 308.209 15.1387 cv
307.696 15.1387 307.696 15.0649 307.696 14.9824 cv
307.714 14.8447 li
308.338 12.3594 li
309.329 12.3594 li
310.053 12.3594 310.209 12.8457 310.209 13.1846 cv
310.209 13.3315 310.135 13.6436 310.072 13.8726 cv
310.007 14.1294 309.924 14.4688 309.924 14.6523 cv
309.924 15.3677 310.502 15.5972 310.998 15.5972 cv
311.732 15.5972 312.006 14.6431 312.006 14.5605 cv
cp
311.227 10.2866 mo
311.227 10.4517 311.181 12.1758 309.319 12.1758 cv
308.383 12.1758 li
308.989 9.75439 li
309.063 9.46094 309.126 9.43359 309.209 9.42432 cv
309.274 9.40576 309.548 9.40576 309.723 9.40576 cv
310.292 9.40576 311.227 9.40576 311.227 10.2866 cv
cp
0 0 0 1 cmyk
f
315.845 17.6333 mo
315.845 17.606 315.845 17.5874 315.689 17.4316 cv
314.772 16.5049 314.258 14.9917 314.258 13.1206 cv
314.258 11.3413 314.69 9.80957 315.753 8.72705 cv
315.845 8.64453 315.845 8.62646 315.845 8.59863 cv
315.845 8.54395 315.799 8.52539 315.763 8.52539 cv
315.643 8.52539 314.891 9.18555 314.442 10.0845 cv
313.974 11.0112 313.763 11.9927 313.763 13.1206 cv
313.763 13.937 313.891 15.0283 314.369 16.0098 cv
314.91 17.1104 315.662 17.7065 315.763 17.7065 cv
315.799 17.7065 315.845 17.6885 315.845 17.6333 cv
cp
f
320.468 13.8359 mo
320.468 12.9922 319.79 12.332 318.909 12.1758 cv
319.707 11.9468 320.22 11.2769 320.22 10.5615 cv
320.22 9.83691 319.468 9.30518 318.579 9.30518 cv
317.662 9.30518 316.983 9.86475 316.983 10.5342 cv
316.983 10.9009 317.267 10.9746 317.405 10.9746 cv
317.597 10.9746 317.817 10.8369 317.817 10.5615 cv
317.817 10.2681 317.597 10.1396 317.395 10.1396 cv
317.34 10.1396 317.322 10.1396 317.294 10.1489 cv
317.643 9.52539 318.505 9.52539 318.551 9.52539 cv
318.854 9.52539 319.45 9.6626 319.45 10.5615 cv
319.45 10.7358 319.422 11.2495 319.157 11.644 cv
318.881 12.0474 318.57 12.0752 318.322 12.084 cv
318.046 12.1118 li
317.891 12.1211 317.854 12.1299 317.854 12.2124 cv
317.854 12.3042 317.9 12.3042 318.065 12.3042 cv
318.487 12.3042 li
319.266 12.3042 319.615 12.9463 319.615 13.8271 cv
319.615 15.0283 318.992 15.3496 318.542 15.3496 cv
318.102 15.3496 317.349 15.1387 317.083 14.5332 cv
317.377 14.5791 317.643 14.4141 317.643 14.084 cv
317.643 13.8179 317.451 13.6343 317.194 13.6343 cv
316.973 13.6343 316.735 13.7627 316.735 14.1113 cv
316.735 14.9277 317.551 15.5972 318.57 15.5972 cv
319.661 15.5972 320.468 14.7627 320.468 13.8359 cv
cp
f
323.44 13.1206 mo
323.44 12.4238 323.348 11.2861 322.834 10.2222 cv
322.293 9.12158 321.542 8.52539 321.44 8.52539 cv
321.404 8.52539 321.358 8.54395 321.358 8.59863 cv
321.358 8.62646 321.358 8.64453 321.513 8.80078 cv
322.431 9.72705 322.945 11.2402 322.945 13.1113 cv
322.945 14.8906 322.513 16.4229 321.45 17.5049 cv
321.358 17.5874 321.358 17.606 321.358 17.6333 cv
321.358 17.6885 321.404 17.7065 321.44 17.7065 cv
321.559 17.7065 322.312 17.0464 322.761 16.1475 cv
323.229 15.2119 323.44 14.2212 323.44 13.1206 cv
cp
f
125.864 77.9121 mo
125.864 77.8203 125.772 77.8203 125.735 77.8203 cv
125.635 77.8203 125.625 77.8389 125.589 77.9673 cv
125.442 78.4443 125.185 78.7651 124.882 78.7651 cv
124.589 78.7651 124.571 78.499 124.571 78.2422 cv
124.571 77.9673 124.635 77.481 124.671 77.1968 cv
124.671 77.1968 124.717 76.8389 124.717 76.7109 cv
124.717 76.1235 124.341 75.8027 123.929 75.6377 cv
125.066 75.3716 125.836 74.6104 125.836 73.8398 cv
125.836 73.106 125.158 72.4917 124.039 72.4917 cv
121.736 72.4917 li
121.571 72.4917 121.489 72.4917 121.489 72.666 cv
121.489 72.7573 121.553 72.7573 121.728 72.7573 cv
121.957 72.7573 122.213 72.7573 122.213 72.9043 cv
122.213 72.9595 122.213 72.9868 122.195 73.042 cv
120.938 78.0957 li
120.856 78.4165 120.801 78.4902 120.242 78.4902 cv
120.076 78.4902 119.994 78.4902 119.994 78.6641 cv
119.994 78.7559 120.085 78.7559 120.122 78.7559 cv
120.434 78.7559 120.783 78.7378 121.104 78.7378 cv
121.434 78.7378 121.782 78.7559 122.104 78.7559 cv
122.177 78.7559 122.278 78.7559 122.278 78.582 cv
122.278 78.4902 122.204 78.4902 122.067 78.4902 cv
121.553 78.4902 121.553 78.4165 121.553 78.334 cv
121.571 78.1963 li
122.195 75.7109 li
123.186 75.7109 li
123.91 75.7109 124.066 76.1973 124.066 76.5361 cv
124.066 76.6831 123.993 76.9951 123.929 77.2241 cv
123.864 77.481 123.782 77.8203 123.782 78.0039 cv
123.782 78.7192 124.36 78.9487 124.855 78.9487 cv
125.589 78.9487 125.864 77.9946 125.864 77.9121 cv
cp
125.084 73.6382 mo
125.084 73.8032 125.039 75.5273 123.177 75.5273 cv
122.241 75.5273 li
122.846 73.106 li
122.92 72.8125 122.984 72.7852 123.066 72.7759 cv
123.131 72.7573 123.406 72.7573 123.58 72.7573 cv
124.149 72.7573 125.084 72.7573 125.084 73.6382 cv
cp
f
129.702 80.9893 mo
129.702 80.9614 129.702 80.9434 129.545 80.7871 cv
128.628 79.8608 128.115 78.3477 128.115 76.4766 cv
128.115 74.6973 128.546 73.1655 129.61 72.083 cv
129.702 72.0005 129.702 71.9824 129.702 71.9546 cv
129.702 71.8994 129.656 71.8813 129.619 71.8813 cv
129.5 71.8813 128.748 72.5415 128.298 73.4404 cv
127.831 74.3667 127.62 75.3481 127.62 76.4766 cv
127.62 77.293 127.748 78.3843 128.225 79.3657 cv
128.766 80.4663 129.518 81.0625 129.619 81.0625 cv
129.656 81.0625 129.702 81.0439 129.702 80.9893 cv
cp
f
133.976 78.7603 mo
133.976 78.4941 li
133.691 78.4941 li
132.884 78.4941 132.857 78.3843 132.857 78.0542 cv
132.857 72.8809 li
132.857 72.6699 132.857 72.6611 132.673 72.6611 cv
132.453 72.9087 131.995 73.248 131.05 73.248 cv
131.05 73.5137 li
131.261 73.5137 131.719 73.5137 132.224 73.2754 cv
132.224 78.0542 li
132.224 78.3843 132.196 78.4941 131.389 78.4941 cv
131.105 78.4941 li
131.105 78.7603 li
131.353 78.7422 132.242 78.7422 132.545 78.7422 cv
132.848 78.7422 133.728 78.7422 133.976 78.7603 cv
cp
f
137.296 76.4766 mo
137.296 75.7793 137.205 74.6421 136.691 73.5781 cv
136.149 72.4775 135.397 71.8813 135.296 71.8813 cv
135.26 71.8813 135.214 71.8994 135.214 71.9546 cv
135.214 71.9824 135.214 72.0005 135.37 72.1563 cv
136.287 73.083 136.801 74.5962 136.801 76.4673 cv
136.801 78.2466 136.37 79.7783 135.306 80.8608 cv
135.214 80.9434 135.214 80.9614 135.214 80.9893 cv
135.214 81.0439 135.26 81.0625 135.296 81.0625 cv
135.416 81.0625 136.168 80.4023 136.617 79.5034 cv
137.085 78.5679 137.296 77.5771 137.296 76.4766 cv
cp
f
220.432 78.4302 mo
220.432 78.3384 220.34 78.3384 220.303 78.3384 cv
220.203 78.3384 220.193 78.3569 220.157 78.4854 cv
220.01 78.9619 219.753 79.2832 219.451 79.2832 cv
219.157 79.2832 219.138 79.0171 219.138 78.7603 cv
219.138 78.4854 219.203 77.999 219.24 77.7148 cv
219.24 77.7148 219.286 77.3569 219.286 77.2285 cv
219.286 76.6416 218.91 76.3203 218.497 76.1553 cv
219.634 75.8896 220.405 75.1279 220.405 74.3579 cv
220.405 73.624 219.725 73.0093 218.607 73.0093 cv
216.304 73.0093 li
216.139 73.0093 216.057 73.0093 216.057 73.1836 cv
216.057 73.2754 216.121 73.2754 216.295 73.2754 cv
216.525 73.2754 216.782 73.2754 216.782 73.4224 cv
216.782 73.4771 216.782 73.5049 216.763 73.5596 cv
215.506 78.6138 li
215.424 78.9346 215.369 79.0078 214.809 79.0078 cv
214.644 79.0078 214.562 79.0078 214.562 79.1821 cv
214.562 79.2739 214.654 79.2739 214.69 79.2739 cv
215.001 79.2739 215.35 79.2559 215.671 79.2559 cv
216.001 79.2559 216.35 79.2739 216.671 79.2739 cv
216.745 79.2739 216.845 79.2739 216.845 79.0996 cv
216.845 79.0078 216.772 79.0078 216.634 79.0078 cv
216.121 79.0078 216.121 78.9346 216.121 78.8521 cv
216.139 78.7144 li
216.763 76.229 li
217.753 76.229 li
218.478 76.229 218.634 76.7148 218.634 77.0542 cv
218.634 77.2012 218.561 77.5127 218.497 77.7422 cv
218.432 77.999 218.35 78.3384 218.35 78.522 cv
218.35 79.2373 218.927 79.4668 219.422 79.4668 cv
220.157 79.4668 220.432 78.5127 220.432 78.4302 cv
cp
219.652 74.1558 mo
219.652 74.3213 219.606 76.0454 217.745 76.0454 cv
216.809 76.0454 li
217.415 73.624 li
217.488 73.3306 217.551 73.3027 217.634 73.2939 cv
217.699 73.2754 217.974 73.2754 218.148 73.2754 cv
218.716 73.2754 219.652 73.2754 219.652 74.1558 cv
cp
f
224.27 81.499 mo
224.27 81.4717 224.27 81.4531 224.114 81.2974 cv
223.197 80.3706 222.683 78.8574 222.683 76.9863 cv
222.683 75.207 223.114 73.6753 224.178 72.5928 cv
224.27 72.5103 224.27 72.4922 224.27 72.4644 cv
224.27 72.4092 224.224 72.3911 224.187 72.3911 cv
224.068 72.3911 223.316 73.0513 222.867 73.9502 cv
222.399 74.877 222.188 75.8584 222.188 76.9863 cv
222.188 77.8027 222.316 78.894 222.792 79.8755 cv
223.334 80.9761 224.086 81.5723 224.187 81.5723 cv
224.224 81.5723 224.27 81.5537 224.27 81.499 cv
cp
f
228.819 77.7295 mo
228.618 77.7295 li
228.589 77.8853 228.516 78.3896 228.424 78.5361 cv
228.36 78.6191 227.837 78.6191 227.562 78.6191 cv
225.866 78.6191 li
226.113 78.4082 226.672 77.8208 226.912 77.6006 cv
228.305 76.3169 228.819 75.8398 228.819 74.9316 cv
228.819 73.877 227.984 73.1709 226.92 73.1709 cv
225.856 73.1709 225.233 74.0786 225.233 74.8677 cv
225.233 75.3354 225.636 75.3354 225.664 75.3354 cv
225.856 75.3354 226.095 75.1978 226.095 74.9043 cv
226.095 74.6475 225.92 74.4731 225.664 74.4731 cv
225.582 74.4731 225.563 74.4731 225.536 74.4824 cv
225.709 73.8584 226.205 73.4365 226.801 73.4365 cv
227.581 73.4365 228.058 74.0879 228.058 74.9316 cv
228.058 75.7114 227.608 76.3901 227.085 76.9771 cv
225.233 79.0498 li
225.233 79.27 li
228.581 79.27 li
228.819 77.7295 li
cp
f
231.864 76.9863 mo
231.864 76.2891 231.772 75.1519 231.258 74.0879 cv
230.717 72.9873 229.965 72.3911 229.865 72.3911 cv
229.828 72.3911 229.782 72.4092 229.782 72.4644 cv
229.782 72.4922 229.782 72.5103 229.938 72.666 cv
230.855 73.5928 231.369 75.106 231.369 76.9771 cv
231.369 78.7563 230.938 80.2881 229.874 81.3706 cv
229.782 81.4531 229.782 81.4717 229.782 81.499 cv
229.782 81.5537 229.828 81.5723 229.865 81.5723 cv
229.984 81.5723 230.736 80.9121 231.185 80.0132 cv
231.653 79.0776 231.864 78.0869 231.864 76.9863 cv
cp
f
315.761 78.4263 mo
315.761 78.3345 315.669 78.3345 315.632 78.3345 cv
315.532 78.3345 315.523 78.353 315.486 78.4814 cv
315.339 78.9585 315.083 79.2793 314.78 79.2793 cv
314.486 79.2793 314.468 79.0132 314.468 78.7563 cv
314.468 78.4814 314.532 77.9951 314.569 77.7109 cv
314.569 77.7109 314.615 77.353 314.615 77.2246 cv
314.615 76.6377 314.239 76.3169 313.826 76.1514 cv
314.963 75.8857 315.734 75.1245 315.734 74.354 cv
315.734 73.6201 315.055 73.0059 313.936 73.0059 cv
311.633 73.0059 li
311.468 73.0059 311.386 73.0059 311.386 73.1797 cv
311.386 73.2715 311.451 73.2715 311.625 73.2715 cv
311.854 73.2715 312.111 73.2715 312.111 73.4185 cv
312.111 73.4736 312.111 73.501 312.092 73.5557 cv
310.835 78.6099 li
310.753 78.9307 310.698 79.0039 310.138 79.0039 cv
309.973 79.0039 309.891 79.0039 309.891 79.1782 cv
309.891 79.27 309.983 79.27 310.019 79.27 cv
310.332 79.27 310.68 79.252 311 79.252 cv
311.331 79.252 311.679 79.27 312 79.27 cv
312.074 79.27 312.175 79.27 312.175 79.0957 cv
312.175 79.0039 312.101 79.0039 311.963 79.0039 cv
311.451 79.0039 311.451 78.9307 311.451 78.8481 cv
311.468 78.7104 li
312.092 76.2251 li
313.083 76.2251 li
313.807 76.2251 313.963 76.7109 313.963 77.0503 cv
313.963 77.1973 313.89 77.5093 313.826 77.7383 cv
313.761 77.9951 313.679 78.3345 313.679 78.5181 cv
313.679 79.2334 314.257 79.4629 314.752 79.4629 cv
315.486 79.4629 315.761 78.5088 315.761 78.4263 cv
cp
314.982 74.1523 mo
314.982 74.3174 314.936 76.0415 313.074 76.0415 cv
312.138 76.0415 li
312.744 73.6201 li
312.817 73.3267 312.881 73.2993 312.963 73.29 cv
313.028 73.2715 313.303 73.2715 313.477 73.2715 cv
314.046 73.2715 314.982 73.2715 314.982 74.1523 cv
cp
f
319.601 81.499 mo
319.601 81.4717 319.601 81.4531 319.446 81.2974 cv
318.528 80.3706 318.014 78.8574 318.014 76.9863 cv
318.014 75.207 318.446 73.6753 319.509 72.5928 cv
319.601 72.5103 319.601 72.4922 319.601 72.4644 cv
319.601 72.4092 319.555 72.3911 319.519 72.3911 cv
319.4 72.3911 318.647 73.0513 318.198 73.9502 cv
317.73 74.877 317.519 75.8584 317.519 76.9863 cv
317.519 77.8027 317.648 78.894 318.125 79.8755 cv
318.666 80.9761 319.417 81.5723 319.519 81.5723 cv
319.555 81.5723 319.601 81.5537 319.601 81.499 cv
cp
f
324.224 77.7017 mo
324.224 76.8579 323.545 76.1973 322.665 76.0415 cv
323.462 75.8125 323.976 75.1426 323.976 74.4272 cv
323.976 73.7026 323.224 73.1709 322.334 73.1709 cv
321.417 73.1709 320.739 73.7305 320.739 74.3999 cv
320.739 74.7666 321.023 74.8398 321.161 74.8398 cv
321.353 74.8398 321.573 74.7026 321.573 74.4272 cv
321.573 74.1338 321.353 74.0054 321.151 74.0054 cv
321.096 74.0054 321.078 74.0054 321.05 74.0146 cv
321.399 73.3906 322.261 73.3906 322.307 73.3906 cv
322.61 73.3906 323.206 73.5283 323.206 74.4272 cv
323.206 74.6016 323.178 75.1152 322.913 75.5098 cv
322.637 75.9131 322.326 75.9404 322.078 75.9497 cv
321.802 75.9775 li
321.647 75.9863 321.61 75.9956 321.61 76.0781 cv
321.61 76.1699 321.656 76.1699 321.821 76.1699 cv
322.243 76.1699 li
323.022 76.1699 323.371 76.812 323.371 77.6924 cv
323.371 78.894 322.748 79.2148 322.297 79.2148 cv
321.858 79.2148 321.105 79.0039 320.839 78.3989 cv
321.133 78.4448 321.399 78.2793 321.399 77.9492 cv
321.399 77.6836 321.207 77.5 320.95 77.5 cv
320.729 77.5 320.491 77.6284 320.491 77.9771 cv
320.491 78.793 321.307 79.4629 322.326 79.4629 cv
323.417 79.4629 324.224 78.6279 324.224 77.7017 cv
cp
f
327.196 76.9863 mo
327.196 76.2891 327.104 75.1519 326.59 74.0879 cv
326.049 72.9873 325.297 72.3911 325.196 72.3911 cv
325.16 72.3911 325.114 72.4092 325.114 72.4644 cv
325.114 72.4922 325.114 72.5103 325.27 72.666 cv
326.187 73.5928 326.701 75.106 326.701 76.9771 cv
326.701 78.7563 326.269 80.2881 325.206 81.3706 cv
325.114 81.4531 325.114 81.4717 325.114 81.499 cv
325.114 81.5537 325.16 81.5723 325.196 81.5723 cv
325.316 81.5723 326.068 80.9121 326.517 80.0132 cv
326.985 79.0776 327.196 78.0869 327.196 76.9863 cv
cp
f
347.368 20.9814 mo
347.368 20.6104 347.051 20.3213 346.708 20.3213 cv
346.308 20.3213 346.034 20.6377 346.034 20.9814 cv
346.034 21.3945 346.377 21.6558 346.694 21.6558 cv
347.065 21.6558 347.368 21.3667 347.368 20.9814 cv
cp
f
351.11 20.9814 mo
351.11 20.6104 350.793 20.3213 350.45 20.3213 cv
350.05 20.3213 349.776 20.6377 349.776 20.9814 cv
349.776 21.3945 350.12 21.6558 350.436 21.6558 cv
350.807 21.6558 351.11 21.3667 351.11 20.9814 cv
cp
f
354.852 20.9814 mo
354.852 20.6104 354.536 20.3213 354.192 20.3213 cv
353.792 20.3213 353.518 20.6377 353.518 20.9814 cv
353.518 21.3945 353.862 21.6558 354.178 21.6558 cv
354.549 21.6558 354.852 21.3667 354.852 20.9814 cv
cp
f
123.643 14.6563 mo
123.643 14.5645 123.551 14.5645 123.514 14.5645 cv
123.413 14.5645 123.404 14.583 123.367 14.7114 cv
123.221 15.188 122.964 15.5093 122.661 15.5093 cv
122.368 15.5093 122.349 15.2432 122.349 14.9863 cv
122.349 14.7114 122.414 14.2251 122.45 13.9409 cv
122.45 13.9409 122.496 13.583 122.496 13.4546 cv
122.496 12.8677 122.12 12.5469 121.707 12.3813 cv
122.845 12.1157 123.615 11.3545 123.615 10.584 cv
123.615 9.8501 122.936 9.23535 121.817 9.23535 cv
119.515 9.23535 li
119.35 9.23535 119.268 9.23535 119.268 9.40967 cv
119.268 9.50146 119.332 9.50146 119.506 9.50146 cv
119.735 9.50146 119.992 9.50146 119.992 9.64844 cv
119.992 9.70313 119.992 9.73096 119.974 9.78564 cv
118.717 14.8398 li
118.635 15.1606 118.58 15.2339 118.02 15.2339 cv
117.855 15.2339 117.772 15.2339 117.772 15.4082 cv
117.772 15.5 117.864 15.5 117.901 15.5 cv
118.212 15.5 118.561 15.4814 118.882 15.4814 cv
119.212 15.4814 119.561 15.5 119.882 15.5 cv
119.956 15.5 120.056 15.5 120.056 15.3257 cv
120.056 15.2339 119.983 15.2339 119.845 15.2339 cv
119.332 15.2339 119.332 15.1606 119.332 15.0781 cv
119.35 14.9404 li
119.974 12.4551 li
120.964 12.4551 li
121.689 12.4551 121.845 12.9409 121.845 13.2803 cv
121.845 13.4272 121.771 13.7393 121.707 13.9683 cv
121.643 14.2251 121.561 14.5645 121.561 14.748 cv
121.561 15.4634 122.138 15.6924 122.634 15.6924 cv
123.367 15.6924 123.643 14.7388 123.643 14.6563 cv
cp
122.863 10.3818 mo
122.863 10.5469 122.817 12.2715 120.955 12.2715 cv
120.02 12.2715 li
120.625 9.8501 li
120.698 9.55664 120.763 9.52881 120.845 9.52002 cv
120.909 9.50146 121.185 9.50146 121.359 9.50146 cv
121.927 9.50146 122.863 9.50146 122.863 10.3818 cv
cp
f
127.481 17.729 mo
127.481 17.7012 127.481 17.6831 127.325 17.5269 cv
126.408 16.6006 125.894 15.0874 125.894 13.2163 cv
125.894 11.4365 126.325 9.90527 127.389 8.82275 cv
127.481 8.74023 127.481 8.72168 127.481 8.69434 cv
127.481 8.63916 127.435 8.62109 127.398 8.62109 cv
127.279 8.62109 126.527 9.28125 126.078 10.1802 cv
125.61 11.1064 125.399 12.0879 125.399 13.2163 cv
125.399 14.0322 125.527 15.124 126.004 16.1055 cv
126.545 17.2061 127.297 17.8022 127.398 17.8022 cv
127.435 17.8022 127.481 17.7837 127.481 17.729 cv
cp
f
131.755 15.5 mo
131.755 15.2339 li
131.471 15.2339 li
130.664 15.2339 130.636 15.124 130.636 14.7939 cv
130.636 9.62061 li
130.636 9.40967 130.636 9.40039 130.453 9.40039 cv
130.232 9.64844 129.774 9.98779 128.829 9.98779 cv
128.829 10.2534 li
129.04 10.2534 129.499 10.2534 130.003 10.0151 cv
130.003 14.7939 li
130.003 15.124 129.976 15.2339 129.168 15.2339 cv
128.884 15.2339 li
128.884 15.5 li
129.132 15.4814 130.021 15.4814 130.324 15.4814 cv
130.627 15.4814 131.507 15.4814 131.755 15.5 cv
cp
f
135.075 13.2163 mo
135.075 12.519 134.984 11.3818 134.47 10.3179 cv
133.929 9.21729 133.177 8.62109 133.076 8.62109 cv
133.039 8.62109 132.993 8.63916 132.993 8.69434 cv
132.993 8.72168 132.993 8.74023 133.149 8.896 cv
134.066 9.82227 134.58 11.3359 134.58 13.207 cv
134.58 14.9863 134.149 16.5181 133.085 17.6006 cv
132.993 17.6831 132.993 17.7012 132.993 17.729 cv
132.993 17.7837 133.039 17.8022 133.076 17.8022 cv
133.195 17.8022 133.947 17.1416 134.396 16.2432 cv
134.864 15.3076 135.075 14.3169 135.075 13.2163 cv
cp
f
10.9683 22.2139 mo
10.9683 22.1221 10.8765 22.1221 10.8394 22.1221 cv
10.7388 22.1221 10.7295 22.1406 10.6929 22.269 cv
10.5459 22.7461 10.2891 23.0669 9.98682 23.0669 cv
9.69287 23.0669 9.6748 22.8008 9.6748 22.5439 cv
9.6748 22.269 9.73877 21.7827 9.77588 21.4985 cv
9.77588 21.4985 9.82129 21.1406 9.82129 21.0127 cv
9.82129 20.4253 9.44531 20.1045 9.03271 19.9395 cv
10.1699 19.6733 10.9404 18.9121 10.9404 18.1416 cv
10.9404 17.4077 10.2617 16.7935 9.14258 16.7935 cv
6.84033 16.7935 li
6.67529 16.7935 6.59277 16.7935 6.59277 16.9678 cv
6.59277 17.0591 6.65723 17.0591 6.83154 17.0591 cv
7.06055 17.0591 7.31738 17.0591 7.31738 17.2061 cv
7.31738 17.2612 7.31738 17.2886 7.29932 17.3438 cv
6.04248 22.3975 li
5.95996 22.7183 5.90479 22.792 5.3457 22.792 cv
5.18066 22.792 5.09766 22.792 5.09766 22.9663 cv
5.09766 23.0576 5.18945 23.0576 5.22607 23.0576 cv
5.53809 23.0576 5.88672 23.0396 6.20752 23.0396 cv
6.53809 23.0396 6.88623 23.0576 7.20752 23.0576 cv
7.28076 23.0576 7.38184 23.0576 7.38184 22.8838 cv
7.38184 22.792 7.30811 22.792 7.1709 22.792 cv
6.65723 22.792 6.65723 22.7183 6.65723 22.6357 cv
6.67529 22.4985 li
7.29932 20.0127 li
8.28955 20.0127 li
9.01416 20.0127 9.17041 20.499 9.17041 20.8384 cv
9.17041 20.9849 9.09668 21.2969 9.03271 21.5259 cv
8.96826 21.7827 8.88574 22.1221 8.88574 22.3057 cv
8.88574 23.021 9.46387 23.2505 9.95898 23.2505 cv
10.6929 23.2505 10.9683 22.2964 10.9683 22.2139 cv
cp
10.1885 17.9399 mo
10.1885 18.105 10.1426 19.8291 8.28076 19.8291 cv
7.34521 19.8291 li
7.9502 17.4077 li
8.02393 17.1143 8.08789 17.0869 8.17041 17.0776 cv
8.23486 17.0591 8.50977 17.0591 8.68408 17.0591 cv
9.25293 17.0591 10.1885 17.0591 10.1885 17.9399 cv
cp
f
14.8062 25.2866 mo
14.8062 25.2588 14.8062 25.2407 14.6504 25.0845 cv
13.7329 24.1582 13.2192 22.645 13.2192 20.7739 cv
13.2192 18.9941 13.6504 17.4629 14.7144 16.3804 cv
14.8062 16.2979 14.8062 16.2793 14.8062 16.252 cv
14.8062 16.1968 14.7603 16.1787 14.7236 16.1787 cv
14.6045 16.1787 13.8521 16.8389 13.4028 17.7378 cv
12.9351 18.6641 12.7241 19.6455 12.7241 20.7739 cv
12.7241 21.5898 12.8525 22.6816 13.3296 23.6631 cv
13.8706 24.7637 14.6226 25.3599 14.7236 25.3599 cv
14.7603 25.3599 14.8062 25.3413 14.8062 25.2866 cv
cp
f
19.4287 20.1226 mo
19.4287 19.3613 19.3828 18.6182 19.0527 17.9214 cv
18.6768 17.1602 18.0166 16.958 17.5669 16.958 cv
17.0352 16.958 16.3838 17.2241 16.0444 17.9854 cv
15.7876 18.5635 15.6958 19.1318 15.6958 20.1226 cv
15.6958 21.0122 15.7603 21.6816 16.0903 22.333 cv
16.4478 23.0303 17.0811 23.25 17.5576 23.25 cv
18.356 23.25 18.8145 22.7734 19.0806 22.2412 cv
19.4106 21.5532 19.4287 20.6543 19.4287 20.1226 cv
cp
18.7319 20.0127 mo
18.7319 20.627 18.7319 21.3242 18.6309 21.8838 cv
18.4565 22.8926 17.8789 23.0669 17.5576 23.0669 cv
17.2642 23.0669 16.668 22.9019 16.4937 21.9019 cv
16.3931 21.3516 16.3931 20.6543 16.3931 20.0127 cv
16.3931 19.2603 16.3931 18.5815 16.5396 18.0405 cv
16.6958 17.4258 17.1636 17.1416 17.5576 17.1416 cv
17.9063 17.1416 18.4385 17.3525 18.6128 18.1416 cv
18.7319 18.6641 18.7319 19.3887 18.7319 20.0127 cv
cp
f
22.4009 20.7739 mo
22.4009 20.0767 22.3091 18.9395 21.7954 17.8755 cv
21.2539 16.7749 20.502 16.1787 20.4009 16.1787 cv
20.3643 16.1787 20.3184 16.1968 20.3184 16.252 cv
20.3184 16.2793 20.3184 16.2979 20.4746 16.4536 cv
21.3916 17.3799 21.9053 18.8936 21.9053 20.7646 cv
21.9053 22.5439 21.4741 24.0757 20.4102 25.1582 cv
20.3184 25.2407 20.3184 25.2588 20.3184 25.2866 cv
20.3184 25.3413 20.3643 25.3599 20.4009 25.3599 cv
20.5205 25.3599 21.2725 24.6992 21.7217 23.8008 cv
22.1895 22.8652 22.4009 21.8745 22.4009 20.7739 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (005x003.eps)%%CreationDate: 26/05/15 5:21 PM%%Canvassize: 16383%AI9_DataStream%Gb",Kq0MTmn)2t$pAf&E91pH*d[d[chtOgkn@$!+5_5Ngqr;nf@sLZ4OG!`rhjg*IhX_]oMIXi8,YPFSVpel;T2r)AHJ`K;[@EIm%/#fL?;D[^9/t7]>HDba`ms3+;,X[`g?r"+H%@%-RVP@4OS7WZDHEYhIqt[8$qBt+m>J8W=[[ZZ%D`Ltu]@oju<o;;gC@\giCps@;%DDeJ5T8@Yu=+@A0Re9:bqc3$YAo\LaA`\4'VpVRdrHu<0]?<dq,(S3V>ifN-eV1#Wmf^;XH>EN0l6iOYH>WBa4mp,go,3$BYP7pm%,7"r#+^$q?h<,A<;#9)IrE9*4dHc"WrC4ElR%[5tgRYN_pCk4mU&PO(8Xd(SSmBj\3mDESNbP:]H;6u/i_T;1/VuNF9.:'k+<*o.%JeBErQqP$e+-$,hbK6<$[8u`/$5L/No>Z8VQXrmT,k=NuSGb;1h9/ioO0DO`A.oRr[VPO_C<Ut<d]C13*hWkq:K$,Fg3p1!d@dt<%5LB/dUr?M&6Z>m#]A=j`K*I>tp!uS/$=gW"#%,n[2/0"0:=3&nWT4K4dZUmf=\8Bq0aQHq14%$1QebHc$IfA>ZDN-[:XIH/G8p"1%f!:QG;KO[ggYG?D*Df[+>3#e[->.>ug['EA2PNIO?Z4>0+:]nC](JTlmdQ`'E:JLHY#T<]o#ZcS7"ShjA@<%^ZqAktFZHEm#eX+9%/%P=s+8AMrs&9^s%0Je2)a90K#$"[uX/bYg<T0pWP,FQP]M76<$n,[(nB3MYP[Qg+_l-O:S[Ju=C`COL2R!\hKi5>gV;N;?6E+E+%8em9RB!DV;MFAplWPHtT"U#V?_XgBR]L+A"p_%sFMrZ>"ae#Phg#*N96(d'K8jT(O:WYEV&UZn_kRi2/^DS?=]?hr#KO<(Npk5(A%SOh#P,PZq@_d@p\T:enF:!u4iJptN`Pc7U^`l86;-T!/L,ZK@kng<T]_4KR[E$MIek%ouY$1\U!63#jVC*FlnH;0un&VIhp$Mqe4%Qr&LL$iP]Rp]\>Uit%abF+D%RP_/nN-Q,@i-%rFsI;"c5!+=+ILQ*1fO&-ih&\9^.OId-P!HWi/Bp[>n`f$'hs.BemNc?E<%c/PG%-;U=bn-PosIma5A9uss9$"]cRM)=7/-9Hm$U]nWkN/&:S0Q%!:$)\>@?uj*'PgGt/8#T2:-$075fnclH&_s&oCRrsMhC$Xk5CtnX%9Z#%bbR&,W%2Jf%n?4A0jIJ]-8ZO@EN(u"o'CKI[n+%R5mICgPFE`reQ/-E[N#3l"D3l.L=,&ADQde[bP[t1$K>0f)b4M=#O=0I'%ndjk;puhW&rt9$O-P6#*q.H/W\,2NiZRk\%Z<5isrDtD/-gk@4Dek:/G5m_TM0,^b+RWV-Y?WEhh7r$CjSU8!*6&IPagdMklkfJU%qPS!q9s9d25gPU0<[n9R@%!kMs&VgkNH1j.V6!h"Pb9Q<6'GP==X^BdTP!g*]gH`Os2*OO)jDS\_6%C$RA?%UrSJo>1C,Gk]W\YK%)!dl6PQ(Hl;,SZ;UT>"DB`\(t@&_O$-!>D<5q#R6=oAKC9!Niog<*/$E-m5F_)#*r0_a/=C;[0>7=(&8,IIO\hPSr!EgDIE2:-9`%G"/;R@=COm$P)<DD!8sFmgN^h?%s#f&`trLKLc;q(XZ<n#u5kdh>\4#`$qS90=.ITn7e2]+08cM5rH_i:9@WUW@P'?XqiS`jcnrb%pU3inXdBj?fbLu/j>gr3*RfVa^Rn''DpVqs[gJ;@psdKZkQu-$=&<V()Ggf?#Ms!d7jJ7$OdXE-$ga?l10P9-EM]s;nb*_f(nMHM%UlY.Br"Li/.=se-D"R4d#'rdJIFf4LfqAo<(2&RD`O9$#`BDbi&U1KHrAOGVN'\$K<*ZHoe0$kFpmeb\NZ"f"NE=f0,c<XrVB(aL%ar]66)N",Xi-CN#*i@OKalLSpo"^_!PtY@CBq'HN(V^:)be:."ltn(r63$iVL.FP&>4DQEI3k+hqE1]F(L*I@S=I[G>f&eZ?S@[L%$#iNt1+'Z[\&mq)CW$%Xb6aGs\jcJ=pqbM.n>)`(&T`&rpfr'-r`,?pi3u7lUV96E,s.lX[%bKB%Y#"1Nq4<;$d3`c/`:UMh1SED%R"HF#oO&!P@W&qH08cl!3RRtV,BeoI_X_U&R^^pS_Wa2l-/&Wi2V>Z4T7^]R+>pJ#)u$;pkTV%^kO8_GU#dkM:10MDOnOF-%aPo,%<\s_Djs\91TmU0E8VrU2-?`M&go>p,:VIRu?P%kS0n95!gMXIWaYW*AIWAc`s)^fq!rm^5C894:(5*>68,.r6I+%pYO1)[fT?_??%=$&-DW3p!uabt'0%2DMW^](CNoeX^8$?3bNs"sTF>d_u$KN;&d<kJ#MH&,eH5M=rQDjTb(g>+FVFTO/(rhqd1*NiQN;JjsIf@=bO%Gh"1dC9-&_@^oA.6/rLJUl&jHf'U<u<*Jba3f%2='jS]+5Y(qD;1s\(rK$#?Zeh_TS@Zg<&TIjk?JkPt"J33HXmT!R,C.[S2k=^&%7o&FcN1j)IhpKFMI\Co>+p8g#M&,Th<9X&UFfh=b_(D=8s5r$neRl/XhQ:rb)K1'6pcNb(,1#7&f&'i<m:N-fjmj&i3N73!NONNu%r9mt,rY8HQ:ubWP<C;_$[@<(kql9fL%E\4&C8[*Xm!huRa`F@Hr>B<W?H4ZMKe$N"4Ft:ns6jR5QcSX)g4-R#O5t=jrZ5dgl;+bd%Qq?G$WaGF02N^4BI!&7eBFu\=S<.F"q@e9=9<d@IIY(#8V<#nYkf4b@nf*/Z9Zg9(0R<[H-#3d6F-_=npJ!6%-YdQGOj'SDd9hhU%lB7(_cq^03Rru[E(lOU07*qA+i7(C.XCRj6,u1n=7T`r989fZbj68JK#@(Z$Z'$F(LbKTDo=l[j<TF/b<).FEM^W+*J'PCXBK4sP%ishqamJ`)pbBbpn<j+E8f`>+iSr<8RZ\Wi=c-9Bj:^S[RBsudPj'TQIF]pPMF*MZRY17Ojo@#SN4Q<X;IM\mZq7jY4/Q?*a5$Ed2%aF!p4s/7i*BE:2_haQ?4*r#^&d&6\+[p(/L&i'0]pT$/>Mt%C@7ml3qC:@&gD8HWbn)&Z6s)B%XRoEL0bIi6[R^I%H7E]p$JLcQ=%eo'O@V[nSqnY8CaraWK?"\f;$p0SlnaB]E5L3IseIgebfI^[dR7RP^1#q3sTXSd9t_<o.uJD`rF3qr?slaOY.XkaY>"gd6F>gR<%%IF`2Ol-sIWlMj$L1$j>LZ._WUG_A.4XDb9O]Ve-rp[sU9`BVHJ0neZGX9g'`8aLfmf:W)`B#%`Znb3"$oS5MKhYucReaXESIq>6?%PX"GmpQ+:QO/:q`e!-92q_)B%LA]t#r7S%A5DJl(25D3C/cX#*7?J\Ye_``@jQs_[GP10<?e]+)Dk*q`s/t5Vjk$!RFs!,J#PDGP%Z8$3@kE>YCG5L1GX2,;D9BKD72>plGeP:"rR1SpoquO-uTirqB?X]:T7Z,aI+4VG!/p2ad["KtXSbNLtmRSBu>OOf,pNlD+h1;fA%^u5!APA\'8n,?0[?I]#?-d/ne^\ZYt2Yqo]Q,ApA6FU8Qi)n-piS`rIH`bf]Fdgjq&$+M^:ZK(#6F[!KY'+S;53:L\'("0q]&faD%B_B^:c&;95iI7/`k>0gF#.0,Wb2aktZAbSng,esP/r]PZntH6@JYgH</!T'3[Ri0k03aDp1k^h\O*KbP"&FV,%tCej0[U(p6;%5$%]3XaYA;?.9qi?'4"(=".,&1Ln$Na]g9.5*o_4>bYnXju?LRY"Q6]j5e@,Bn9GIG,+`m2EnP/ph)qW>#BWgJMY:b=;J`gift-+=k:%U?Rs]KI\[t,ARHl$f*<4eTW8jV!&[-MD$I`1_4rEfso120(]oCJ#bJAQ]V0C,V@[jq@4Wr<GaU>+,K6%0kpj686d]?Mc9^.oH>_%%jqM_KVB)FhMfsl&5DUX]nZ,-_61i<F^Y5lH^P)nJrbJ%"n$[!(^FG4\D[:gK=3g,Mm2"eUUe;8%<S<1%'+dL%;_5hF2R8^j`Yr#c%_jFs"efbN@A0bQAR,4Xu)D"sO4+KAMAr(oDp#_'SR)E%*DtQH_]fEGRmYRi`+:C0Bp16,innb%>JQn2%%A`'J/kJFfY9X",IUM=4%j+UmsMjkK(YG(9^*nFaipP+jMe[o6>)AhN-/i4WD&"KM>bI6JnJo9nj?,q+Cht)+rcQVb>1JC"@]9T"#P?C@VW!:29k\9f;r75\+%P&G1CS,\c?f&+k:4jg(uic="F[646m]6:L&N/'@5oKfh$]1X_YiX@dfJSqmIYBQ?45V8XQ?E6e%9I(Ee45$TV;!D<Hl_fTYO4*"d%Y[2,CHmRS_TuTIB`Qr.t3#H&XYb-$^)c^n_!a7eel$%UQaYSlhj$1%rY!"ghMPaLlZqu!N8-*5Jrol?\Xa7;)n$YHK]f`[]=#X<X%$[<cEHQPVZp):;S1f<(nDbS.T[8%t06,2,ioK:pZla6P\;I@u2-OY/QoK(N+c#Esq]?.oc^[7[T3;U?gl6Aqc,)Nn$)W7+ek(Y-G%>OAmq<%f/c2Y/#F1:L2]_NjD1X0#^+MB&D#^JSj-)WKEL\5mZ9D5#$.d#]D6NQ/Mh6f\j,F4k"+W;bB9f'9ZZ5u6X(gAO!l=YK?K%A!d5OIa):'^=mBY6mu]l%n`Vk:%ec8h7I;8o+p`EOfQj0"#f!)P)'N@B6F["\bFe@]HW($).&8ENKeH`mQ`enJo[DaEI:R7A$OX7%KafD$TWX@F%2+!$fL?m[,qI$jB*Hg\50WJe+"(X=d**eI=cjus+VRW+[kED\qcCZi_%f1L]le*Nj=NY-XK*1c$T>UWa&RJ?1thB(%aMpWEqk+RJi?c68#FlDp6O[@YWbPQr\W;i@:pE2>Cm^%R%4@D)]tLhd(@tq%:@jJ@Y>QKD4n*B1FR@QH/(JqFqTRnLh=e$Z3>1G2%>eKBKY7XD$gRZDsS&h6.Tf=Z`'Mc@(`S-ZW?ebq`M[,F5?B2,W"r"`"bI-X(<B'O_;!>:f1.14=rut15.%7u;r+bnG]q<n1/q>.R%AuGO,mDL=KqG)pYh=iGk=!n5b<d4Wp/9pFj`l]mt:4INBpFD(o%WT&j.+dn:IYJR#L#^\N]X:*0$M4mdosFT<oklH,0].F"D'2h=%UtAn\*C<YjK.1+e71\JO>5]8)'\pi$d'WAtk^QSo?FgKUp;.M!R[!)>k6nQ%&EH.TIX6-I]5GI2&3\b3F9M[a1@b)79j53YW<Hc5%`G22e::UWfUTu!T9eM_Qi?ajmlJ5JhBm>;%H!8ei*F2't#+W'Y.`Ys$?-R%s8l/B6kteee)%.2>(s7&i;%_NK;!#iQkO%U(:XS7q%'Ei^j"KT0d>c[T;n#^#>4lD'Sfs#`>PG6=h1CPo0B=),1@3`uih,pKo*f*WnQllJF&6RYieS^aN6Fe_Xj-=[>rUadTX'&-P^S'L4%bJ)fsjhPMDeU(a"ol=_B#0I+/U!(aQ8Dt_O=\HL.SLep2K\[*(Dg7gWc^4Q,G(bsd3-<UX0?c/e:fHa+XH2!FIV7eJBGk!7hrm=f%%UE9F2_rdVe+m[$rt@sk@TGhdgMc_Rd<$jH;QSna+!?Y<Ha$LraHTYB_,et;0`"UErJro])@q<fSiB!1[CA*%0Ft<VB($!o3N'tp%eN2eukrtRBLggb%g1n%m+[V(pYu!roa(Yog!UkHP;*=Mj!H6*lhQ)BFZQ9sKID!0G[*0?17(lF2-9_-<]aZD7Y`e3!(KaP[=6=!;%\f8dRC&CtLT%(Bel>J:X8\otVI>]'?J0H*&5Be$R_>)K)ooJqmR\^soB"]>,2h[P;l9b=-4Ls:Mf"dotM.n4B(SoWQG=_3RImq5I%>J,7u_ND-e/F4\o+92WA3m[q7de:*lie:`sLDG=b"=nphE7n_>Qb.2WPFs,_I"6:2<"VIF72h=Qj$V5qWe:cOiX/"=]>JD,_\#e#%m%Mh3BD#HjUXlQU]=OPLZuDf]jp'_:,u$lH>;,Sm;%Ot/\4#Q=Lh-WXLD1+;Ss@,7QCC_sVSGH6,W,c[@a>[4JFa<XN"sWr]=XA8%We5&?=r5f`(NXTVl8:6V(D!j1)]sJC^+%e$l*BS:3-Dso#:o)Z7=VB1bMN6RR6FiUQ@;E7lcrF?EUD!F87g;A[FA*'mOXJq/ZsT+%VD:YcFt3C:5`]6#j\h"$bNGkkiCtc/,TS@4IdM;"2m9-:R8^5coF;IRV,(sgpgmaeZ;f#W1VW9XQX2.Yo3.DomSdi_\R%t*]A<.f%f0Zoe[(!SapXZI;ea$J:IA^A9]+9*`l)o&R;->EN]u^WcZUJ(qBB"%C;2fV"gXT3TX/Fe'P-nhs(>j/qcmoK3j](raVPc2/cXnZU%heGF.147]\m$X*icHi#H8]POP?II(d)G52:BWU$)KWJDFh@]QQ?TdNq1eO]tRnqL;"OQL!<:@5bH=6\&Y&C4M?)$KP4_m-A<dnpn%?4gSW.Fi$K974,t]pnG"VK<*"$KrX2UN[OCZmfR3!PKgi;BBn=5$f-R\'[Ute#\"uIWg>^IH`qEpFcUe/\W-9eKr2<;)J,4lWOe`%l],ST$_REXY"m78k%<<f^IGh"0=dMHf9rrMgaF$VY$%_JD6*puC.urU/&,p#7^^tUWH,7dlIT\nh4(EdQIEm6__]'A9&%h^K>9t>%p("II+S&i^+5W5FBJb?$H%<\/f4nLXc_2/_p;!UZc`GSb:Zge%A#`h%gJ-HO'!BilgF,VS9(0%^GkHr>4u:jTo!<dJHdDRIqQt?a%'\K@Ps)gM\)bm+kc(\'(,2-7-m.iSd@QnKb*sYr`7XK4B\$BA9M)8sJs2`E$e[PMR$DVnt<G^p@\'_1t]/as+V&]@i.TIN3/%AI'%akj`Me*530@54_.WjJ=F\ajZ\>:RkIkKR4,UK!:sqpX4-g=P)UH&p<g*,01!Us\bNB16M+DH/_OQXjcO@A)#=H5fLl,)r$K45R[m%gtu*6)E"D:cW]EZW6pcM\F=0Y)F^ciAp;"V2h-%4c?pQo?^Xgp)r7]iX&;3XpIis1F(PceinN)`Sbgb4?"Vs&dAsh/HXNW3+/`*8%\rB$,[+T<\C;7+?hroW[^8u.RY5($1fp`=bo]g^KWfQ=khnC.)f,OT5s$dONbKit^O,q#74s#4AH5ac)ct7dblEs5LUCW[_fP<,8%2gY,.o6"kRWc+ZY]1Y[B#PPQp5$pte1jXKtPoF(W^5Z;d92hh7a/(P+FSQk7MInSE/,_T"ca;)$2<,:;bhYR-!B7%&Xj?Hl4["m5%(7#?TBQdd\H2dc58C,G*cPNP5[B<RGp=cig[*elmU8On<1sor,UKb4uY,DW4h;77>$6%1J7T!N;XgG^YqHE64)I6V$R5.=.)tNuk%d&?r+m:]!C\5@B\\[X:N3WkhcqV$O5-#[/&KmK6Ymp=/;J+_^B>I;f>e!u3+;sjG)"e"64eRud0?0FA:ZVTt"pUTJOmA^#+(%h,#%Cp+qqVc<74eQ\IOGT2XYls_\DTDl!_Su7;h5;Ts!T9f4clXT3,OUcbVT'S'o"?s5XKsR-(V]XHe3VTM.@`ELURD!qTI/@<V[@m^f%I6IS;iqF-cba:ScH@+HSGh^r?h-%GXOf,tV^26[%Q]$ight3m1[Hr><\p*"?'_?U!<E`p6VU*`WoP6W*r:H\i]]MBuT\)p6ad`Zb%qfi(9ZP3-+o1I[som9:[p@VQkIgUK@Fn]uH%t(sdB^7U.:Z#?Zk6Jg;Rn_/q4tHh#/Jen(l[_k+P`7+PQstc616YiNG[''fb%hBd%ccbo1Su7J_VnEQ9[$Y(j9'+@;bP"9=ml?]eKp`B^%f8EF\D'..T-DmGo*gOM$Uq:.k3e/1F2kh(Q"N7u2,j?-i;"-e97-@anpGpo%^delBPuP26<eQNLV!@:aYf<Xu82L`lYBmXroO`;>R9MaUU9fE@k%BMCBba$`mu'.ea>N"R.=Z$=k)^O-o)h#k\N?b/?`QqKe+q#;%CBj%3WA:tF97jJ3)dQ]KhG44l25[9)43`,$hKPHCl1Qa6;)AITQ3/(k._h"hr>MO'!Ya^c?XKMS)W.K:5/T6m*Gq?gNRh]SVqjgh%di\6=DVeGX"CD,"q7:3uDE!8=1Uhpp,4_lcIZ76@*;^4@?W@Vf_0:,2B_;!Q\>N8jSgM\Y@UHD/&D/E+%Nk\0Y,65gNFH6'2g[4p%8767r"?$V\aFu=FFdk7L^X:G!``DW4p(^nsP^E9&C(2b-9Rf9lDiT)P'2VU,TR99&`>7b16Xc+88@a?L1B/XiH]\*-r,f2a6"E"5%UcR1W1#J@)cFP+`Sb^tCFnKae$5%EoP?I9lnKXu?h;4RqNH&(0\*ls\D,nd+ZH>9n%Y=:nRXScXgU$ut5dLZ"Cf&a73i%QC.Dnbr%/,rI"V4EZ'dBfJhY@FJT$!Q$E]DJnC_,.j.5sK"uRJU,pe0-`b-W##EIH4OkKHA9/H[7`45Cb&`LS=?Sn+r`B85l=UJ*%=.*bL\J%%;FFRfQ[I_R-;]Qcdog'FFTIk#=Vp6PF.NBLCaPY7Hbim(cm-/aEnpkK%!Kp('=@<L@8^3pjje6D$4;Fg)^_E8h=-\=;QUTaU;=f%/&Nip_X&dGcFcA"B5Kk\LXSBuSasiY\f4Le7+k)K;RZ#[]b-)IWh,0MHK`#&n9HLA6`Z5.)Wcb1/l+`3+7mDSet'e&-\-A9AV[o!%fOW0.nj.!1,/&V6Hb1Oq-*OcUV%Ui>I(ORfO\07CicIoN\@OX.-T$e*pAQW$I27?*Be`5`l6j,F3r/s&?H0*P[E%\H\:QXZ%ZV*X%)Wi>%MpT'b"Un><,?JO?G(t!E!*Ps08f0"=0_pe'iYphtLQc^CaIgJXV^a&('<O#emM6#)r+a2Hl>T-GY2!$TDLOoBEa$apb$"ML%VgY8>%0MQ?1uit/5B&m@E5Dhu:,dtla;\-hH,66Zq9"^n*Mb[=:ga(R^3Hbu^\7RdM)ZA9hj!F)bPZl*(,@.nK0rPk%\2Plks4@j%cdSLe0@1gIZl#@E;A`bOc.r%\-RS<W#*&%/:h3)'?p,0%AF$5'/a@'=[$2]7lV>)98G+q8!`1pAUY#^B`5aJ9;Sa]N1N\c!c^s[Z%qu_[B\BQ[c?Rsp),NFQ,Yp^j,II]6*1N5-*<-I,e'P@a$$.36m<-B5K`5JG'&A'P9`La[TUDU2^7\EjRfSEpY#9;@p\lT4.ZWJ45%GUJM%GSZsm[Ve9,;&pU*WU+Os9h[%GDSBa-36K2%5?m2LF+(!n+n$L@V2cWUM6sR24#K)HFk1obZlH$.?(8^g1u&tO'S[_3XWUT;%]6M/JKP5p)3\!ilgG0fo`4FS=0(p@4E%tbOI,BM%ot?,\>[P_$2^F<MDNOb>X\jB1^#lhD2Ysii*+'28OE_]e>7CdMLFg7i5n-S7%J9]G3.cORu@`'FF59,X1oItbZZ3#:;Vh`2n3$&H/!5!4bJ@C#[^Q3\#(SBpj,Sr!8htb7/[6_8!mp0$,]T1@R7!e&&QMPXtZ*t`:%Sh]Gm;i_H/s+`Wi@LWUQDsSY\Z$\r%O;T`"$cEZH>b/,ao:h'0Gt$N?8J@gk!>,s_[8Z,*')(+BXLi'fiY1"Ept?DKpV7&k&<mXh%g>"Yn,FX)mFu:6LonUH%)]SA)O#S_li`nK#^k#?PI.47sfHH9=pBG6[&`Pu]Ha#2OlQM24/2i_H_d\$8<Ik!mJ(kU7@mlt"V[A)J%K4mkqrfI(g]J5E@+A+>-\1,,[RaOLm&qP5LVs//:ghDkh/V>B:FlUo?)pT$_VElCZqqd0KUon81]9YuXe4TT?NcGOlG<*4?n"'8D%l;1*CncE<LTaG2f19JSu!5^@%8sj70R!p;b(=C-ikX%9iROno*<HJ*+%HnOYANV$kW,bs-f]8bp]U?h'hs6bQmh4\pZQ6Ko;.YrK%[mF)IU)-lYK@!"gV!r?'\3$7@>Mu:nQ/cj9XrGK+GDoXbNs,=067gcNHH''dE,.c=IdEIUYVL3H0[RCeZr-qh"PJ(JhCRY<Y(;a'%=%+@R]o%(#CAd>9f<9kMP[)Ei^-GTqXtN$[-@hHabM8d0XnS5$ctL,=`PdkK4/tb;K\?8E1+pJH\XUc^1n#cnO"-Wd7_<b"g?=h8%`205DZr#FGj#-ptL.>SZNK%+;\40+ZY@md@='SPBH;Jd#hH@n@qaul.?lfgsY9S+H6JU"_^Qh,EHEgb3aQ".oN<;jZJ/rp]'eFr,%;F4cZJMlk6Z5/Rm+,=XOa@[6<=S^o*27?N2n@G.t?@.[q1u;JskY$io!orFrehi7^J6E)nSrY;>X!_usKVt-/SLV.@6'lm3CmO8Q%6<AD!9lb/`@=]uErF99B+mRsZG;_jnV/XOJ7%Xph;eNgK"CcY(2qO7umn$O=>StOl;.d`3W317e*QB96hsp+2!I]_m/Wh*(2M?Cn%kJCo=(p56\I31A*iHiMPn"CN3\^9m@j3<;hhdKtR0Gfnn<Tn8o4Le8tYW/*P@9`kH_r^]Mqlnjm)#h4h]@<Fa+[a,11;F[`Aa%-0%[RD8u\ociJZ?43u"A8D_,j?AM[OK0>M>2&Q&rgGI:We<5W<Lp3Ln7]DBH/`hdYj6Fa:\Eg,u.+;9<FRc)OQnL\R:Y33GHXe:$j<Q%mq@rVCEd*$WrV)J`=O]8"(cMbD5"8oX#Eo,DP4!t>+JgL5F;Ea(NX2aG]M0bJ2ik@;(R,n<M5D#)nPiGi.soP.@rEeQlBChi4AO5%\pi<&odh*9a8'bhpXE+,oU-\nZ;aYm+EO\*22BHp:>ZI@HqM0WEp1@rkS!.%jNn>m.V-m<D)m%T?$HPoA.)-VLQ9GZ:^.s5/B5u/%$dYK@fn*_sd.oTbAC1-`$]^B;(S3q5cL)N.LFt]AcHUbV08D/BK+@P+,]`+].SAJ,mCusF5DO,q.c[u_is84Q-IBk>AXE_IqeX)o%5gW-uAetKI&<t'*:F2rR(b&spdL4n''HCTQXsB=Gp?tg="^/V7-$QM)HPK#GP:+:*\@nG0.5<poDe24B=J("RCTm?gWF0t1&(9rr%f<6O=:O`2F]`(Pl5$1sFeN[sMAMDe3N*HMuI5jiEccX<W7&MFBMd1rZ'pphuWYh<_LO!\q_j8"5WaeQtYU?%08)4Rd^(hnIB^C`N%7L0s"j)5+kaVDKpRN=QDc"AEbBZY.3[XnYE,\B-uKW:R?[![\S++l8`><t5-,S@jO.L0R!7J(:Ti\#g!H#V$j<V[]UkL"Bl[1_Ba%ocMI\eTV*AM^ZS;19F:lHF"+!"(ulNK7&#6XH9jV#_=cI2InW7qPVm6KLsPFQP2uH+XcLXR9d`$^cYb-JO\5sH$hioAu$8hI';N)%0@N87.QB;&.V'';K]=H`PWkss:tjuNX<JrI%G:h*@i%FJ>DutdR"LOAYNnY3")Z3uPn!=>b4qL`BU'$"OU8ou>SVt8L,g1"46_K$%-U=s+1sq[))g2q4&;kb=B=;\qQc-"$4+Z'@;/KI%RfH=CLr/RAa+n<N3@@Z4WT%u6#S&N1P7/NdI^75c)rI'NZhM0Y#'Tsj\oF7R%^ab)<LOfdp)WlGqr,<@!Ugk[mH#lH0O3k3Ie`-t!I7S@9)Is,JVk4>5jAuPL@p!KIhjTLbc&XnB<6g225fd"*AULBER4$%Te;rX%%#&!dWkT7ac6dh%4e)LS5j.&-rQdaOO#L;M;m'0j[bCh/?pT@$GrTpe&FG^plnJKs^qi`1E/3b!fE1K<C[lPF*4t%il:uZX.LLm-t%MTCH_fP)"ne'PbZ0VlXC9PuO.o<fAOOU9sNJ;DG+L_1M%_oV^2PDRAZ1X!>^.'\[9&Xg=(ll\VpbYK?mE;S^3m.6IgQk,8!,bh*.%N?+.4eS=tcRfm.dP&ghJhSV7`5a%]eEY5dFYSl,XLUqKQQUG>/Iomb,R'Fl-7%nL'/l%JL%%Vg]OH-hL-)0"C-CIE(UJ=?-A4B$o%>FlqKCY7G(A:F^lL%MY.k`X\o`:1FNZ-NmFm),uq(u&YTL+*kO>;+Fm5p4B2WM@+mZl^1h*L^6rh5GP7XeRqI%+*sk%jU5S`BUPE%P^L!V[A8ZA_a,g5-DM'sLPqO40kNV>P@l%L`/U9M&s*V?1F%%\HoV.B_+Eh-%G-o0aG4i<^<ok:,36X15)3[MHoRa<q-@?pF?Z4>%69E@2)LGVBk-9o<=V&tceAWST[5o^H$'gL^-dpQC=7&P*,)9`WWIE><>d4Vl",_^M,Y#pGa7Wu`24KMqm0k.`ikt)M81#/>AI.pt%A"?$qp)#(,"UE!*mW\rZCV_6K`#]jQ&.unN.aWe`:S8Vpb;A2sX\V=s.\"r=jP(.[_XX^ITQV#fEJQJYSB,E[,[7K0,S;Papn1fB%`@(60*CY1%6[W]0$apn$,]KiUhju'DrQcODEPtNt3uGkee2+q7p;n,/[[.?\Iut$SVT3-f/KC(=>+L!59d:Z%,IKT*l5MF5Q]ZSW%R>fXNmn%&c67nDB8;2Gr8S"V`4l^1N67q&Qe=^<ELZ`S]&,=bnL'>qi6amqi@^tJDL,\(2Xm!B6a%;!VS&H_H$5YZS'2=1%c[h/:%\<!'ck>/?SVntmp/&t>;9126aS5d"L*>'Nn_M&q`>]04Of]#N9'B+k@%2.N_Ona3E^2B'G`?p_-Y\"!&767CuBMY:?8i*J`XRIK2%1#[rIi3fB>M[MLu/^!m(dr`8Y@![(bKe;7OT,bpd>.4THIE1/rb"$tGaIR<Rs#hWL%.FFglc1+%c)^,NBtF":Y1PP":R-k2PO`>"%5?FpkCm_^,3qLd*\[u"s0eW0W>Ih4PE@\d7QOo[2fOU4aH=O09js4PKL#ef,VXB(TDR3*):W/'`R-_9PG'qAdT=IGaO+m4@WZ@>j%Fq^$If:/eio"9KtP2.b!JhucO;XJ3qUG&;YG2#YJf;SF-ZfT/te#54Y%Bc.CDDgJg^rUqOo3oaYE\=TD`RU6WTF<nlHMZCkGmMWu%]=e`u48TB.Y\RTNpbg4^j#a2he:KIBl=%5VV`2GOQB1IC3FC!'i0fnBnf60Ckl<4WEM^q?Dj8S7I7E,/j@Z3d[>0D(EmP0<G<@#p%l-sudpm@dLE%=.ImrTIkQJ*[pgG\&rs,4"1D=T'\mI37XM9's!OUcBoU*a=C=FGrL'cA=f3;9+nY%$96k@aaV\T3ilan\YeA0#s:%U$GS?'Y$RehL:hiKH!Da"#KT+[h19Uo;`5)VI7<#ap19e)Z^miY_Tq`%Cp6s$mffJ0?)a@)1n#!E]f)hCtFGI6f`-.jYJ#+P>14q%Tm&A&r+nF/>e5JJ;o[+[o*]fJ]/V1):$7j9([:#&=P7f4l]m[XV@1h<PKfsD.r$(bS'K@UnDWF_ZfqT;J`bC;Z9O1^3kno\57KDT%2P$JtS="OZSR4"?Zh?GbCcZ;J$Ft7p\*`7^l25Sdgc3NRZK_9V(ItSTRSDt[.QZg13^8iA*'TS.VXk`khij&?b,4dRV$jbs7`hP!%X""^fZJjJY&Qa4tbbju4"WT`UMM9f<0e!k]Rk?b@`lY+LbG?GaDj/DBo?4!%^F=)kCc]<<#'38Rc)0OBiiJFKjc#.i:$6.N-bK\I%NL`f,QV09u?I9@jl24"!jG`L=Zg%8QZ<XtSIUsW^,,X6#YIopb:$:+On!WmSZKXcA66*e&N)\1*oN?24]c6Y.VBK9om]^IVUZGr.%MEU[ILC$%<raGQOq-+Z!^990[]a7'pX,EFQemFp\pVDk^Vc#b7YS]K"-fca90gQs89$HFYE`HDpoZk9'BS/*pLX9b6"lME&/-Ms1%XVC;%!dP*5J,6-<d3IA,pNiE-\N45E4S/R1rhClMYW17i"mb6_M&d$([HFC=aSQQ:YITQ2],9k&4%EVo0"Qt2VA+-s?+g-XUL&$)%3@2K@U:YYY2kOmRL>Og"YY?:l20Wl>%)(lM]6H11R_,N]_KGRmNm+IAQZ?9"?Uin&\/um#-kXkjmd-"@&"dktlJ,QTlpSG#SVJrn%>2r#^d?9AL=e+`]1LTtU[W'128qXb?QKR^k$*LLh/Ei*n7%Hk?0[]HJ0TSrSGr(?9d+%QE[ZT-f[SOWMrl^*(@RG<ka4LiT.Z:YM%3RVdn<*>G+h;S7SZ0%NHk%!1.-640!eh_JE/Zse&H,82i@QhPsW++SH3/NP?ffb0*9rpMPDOSB8-ChOlFXeM5j^[3DjB"gm3'l1d%;.ef^'7i7>/g?IAG9hT1#WHdh=W$ep+W#(hZN7_l:D:fCnXb*oF07jj<!H=T6$QEuN#N2QUQYtA`5?K^F6rYk1*<8<15+O>"SI_#%CG+*lM,OJsF`Ln[]Xp7RGWhc<`jq=On=ISF</0%^%#]6"75;HDN#6kY\/RTG1<p>Q[$>#RSB).`ABc=nNk78[(js5,bfn*>o8.j4%ar=[r#B%$jj/0I+^3&R5H,3r,o7f>IqbQ]QiBo*dAkrQbE&VUb9uP!(lgX:9;>&SZpGcd15jmCF&o/T']se!#Gl(\*>LLDF*tK`\%Q]>h&NPFW`f/(@#8jodo/GG!8bCRnq,NlP"lghpd.)sSO?_5RRLuIp;2`'-"?XG'5]SVolj;Wdd1W#^bNQK759[4*%bO`R%K>h#3%JuZK2S,nL94k^l*M^"G&ED)F'XU%G;7IhsIU8BZ!,r%Q,"6WhB9"Z.qS+oQK34Cs$2"Wd\&Z87?1^o$)j"'93he0u#$2;/.0$!WC%E5fi%a.hb,hSqdK.eoO7gW<^paDT.i:l]<GQOd?:8YcS@$d*H0fS1!Z&HaEjSj<KM:#NTQ)?GFu3&%$ZIRIS@+(W%OXBh&Sjl0<i%n%(>]h`EK./=p4M[9j[YoPOJYjS%Cl<,0S2qG`;F4?0Rg;iH,@ddW8TcM0k_I(8&*ea3YbWY4c/>;"diHLg%)]VOIB]^F+hZ5hMq%<07rJ1B3<t)=oENaEt+"_U_(n_VnIjUBWZg4ahP=BbY?3Fq<?qC[O@L*k"a5C>+LcS.F5@1M=>T?>J)Tjd;In\8MSIVI`)4S?$rl%s6pLuLVWef-NT2FdqS3JoFdB!pDhWFp5C09Mt`sXe*4Jp7]d[S[F3gnRAWofn&"&@rN"jGbN6p)33"e(2!]Oa.@<=-CO&]96F"@i%C/KjbU\(jr>_l2d;/Ef!0>#[YlLh:Ah6l/lfD&%1`=Vd#3uKU/`^rQt4X7*6Q(i/cN,X^.>'Of25_R''qhNi%V3kJfJl+#omVCiX%DMah9e;M).gu!i(#j=b4>325""nR&YSWH5&F?X4;>4eo'#[=@(Au,siUD\cX=B59^f8r//_m8\Sma>R970lcnqm>@XKX3XNgTgHd%Kq[QL,p#?Yg*+)8-oO7J9mG/fq-e\;<*/1dA'EGL7<S&g=>1_X<u.a*A)I6,]/4%KN1]tdTOB/Y?@FB9G5fSQYuh7N"in[+P?>,>%.c\TjkSZdN1,_3+%\ZTb+O$cjM]X=5,!*\?2N;qt=QpiL'0-9.1-m"m>)==0%Z9jF_Hhtg'e9hlXUN5Fj.8@Y``0>6JQ!@KXmY]5%9-YgIh1V>>2Z/L>+Ves`h<$f1IQLPEgI(SeULl:7.5tHbauK^Cfkk.FUIMK-"f-`/lUOJKjJ/K+U7X4T9'$c='_*[!aJj^-0>/Q0%EOX/F<>L%enPHmRN)Z`ln7L]X4#sNO3EB_/Ed?Y@Crjb14GjSN\W#(\"777n@KYl3J^/)5)tg`:AV;VMW&]B[<6!2b*5oZX#>hYE%@qPgsX?9"2-V);\N1'i.oEP#^.Uq54kIVZ_EY`'4*'jOFHD>'Q7]!$?>T#[40PV)*"<TWL$SZ<*i/lKun1;@LK$@],]U/2O4c2Sc%_*;lfhb[&hP-l%l;SHQe;,$+M5,)J/s5?WH4SL0#6^R?IglFSV9DRR8iC:SHc[1u35BA9G0T5m>Qh'rU8l=h`K\4QeS)J!I`Oj_T%hUt`#hWr4_W52^:7Qqd6F0AsGk/AKHc]R\h$gl[Gq"p<L-?D(EUjN&pSddQ>Hi:g"oo"r>3CYWS:JTn?p\O\'m-_!)Sm0DcY\DbY%<khKe\`3'Y%*mpkGHYBKXaXd;?V0_Z)_Z(Hoj5E&X?54["Rbpjhle,=L[+AUrM&FUNd%\!+:ePl1VTAA_S(D9ih#$q(M8`I\^rK^%,_NDN-C!pnDtT#"kDs_g?heFRFVj\SHi9\ra#A1eHf2#T,MgBVHckrpO)H!EFDGl=GNaoaN-kMXCWf<)lPH.a66bpZhs2)mWIVb*%8/gMp^B%4>\,(f=$b'"ils@Hr>Q+IUL>q+V(N']mb=\6tH7,76-^OMbJ#cpmfakUE0AI!*]oR)bHi8>,aUT9gq"OW=f.uDN^<$'F%L#;/3ZGm\6n"CeGWuoo&'=cXIr)UR#3fY$]hs2(7.rA`uf)2Y!;>&SGHi:sj`hVDV(ZdipnaH,Y^XY!oI=.fIO7tiP;=F/kC[iJ;%kF\.Ts'@q)?s9WFFX#Z-([b,[F0-g/Y@%(,IRCd"kfN=f\,()'(QW^B?`[1q7_[L#PE+j0cPlaG^,XNAd/3UX:PPdVqMi,MMV[S7%&C.-lC?SEXZ1%@DEd%<Sp\KTa[DY/;7_dR$07D(;[<uSkOm_lMGMC6biUQC0$[:@=;E=$UIXVuh\.^X;]m^Rlat`AXMmRhMm!J[8%$q&uS5Gsc$n+C`+f(W30m^2epme$r`LeS;!FsGl0(VX@r;/E=\rC"<2_9%gV(sfmEiJS(2:'ZZ(Y@%(,IcT:UnaH-\./>7/Ou;e)%B;O[;-AT4KaarOB?:HrnFFF$ri'^!B$XU_])t+%#8b>SZo^ENfM&X?9?gDYlQ^V`tWHiJ!Hc`[$_FXL_]&=(gOl2-=oX\>)pQ7ek%b$JiQrb+dDhgClg#inp\Ae*F:F4,FdQ%-F7BPR9OYC\1RI'c[&(Zq'u136[W>LLgo;.9=uB?Nh/<,3u[p9H\gXo+Dr&!+KOo^C,\%HW/7)Dq8@Y-F]W5VY#LXm:GVMo5^ULIV;u9>h"i,n#Q9\YF4]C7P"G/\iAG?Ud(38X#KGB`dI+Lg&+Th2d=:!lM>1(DFU2S2U]A.%GBYi-+4Ksfqk:`_LDFNGY$YM*?_qe$:R`fprVL>L<Lqm/.U2dS;WZNbT!W@YSoqXup3a>^>pFXZ9g9N!4oP'Q`(:-F=Bs$&?0B]>%H]"Z5rQ]V6%rJgmcCX`:obFc*=7-QimD@Ul#Lqg[`u,]':\*[;:+m;>&,,pWKunnWgRmkVeX9BM:I"!BF7ka]X1O;_R8u8-`ar2u%hLDDl[8[TU8bZ>-B^-u"d>hVLg0kBP,c1p6Mi4r!;m.@s8R"%(4!*oX>rsLHO]<;q-?CJW^ElcnI[!qnd`%j,?)<"&YKna`DP,`%%8&a33B"l$k\!c^8<\!h8k=PJq;gguCCTVM6YAPBol,&ICH:@L3IC!\1"e,&Rihm+)N42TP.gN%+mT&5HIF'M2?XH#NQEP1Li#CtL%8M^TC]34.CYNrZ'lo@Z5r]KO9Gj[@03NqW.fJe'sa,Ua+bSL%h0&XBLUi:K=kiZ+bs$X3GI2Di5k1FI7I&3na>,^-qBsEmss&A-)%G'E'7grFI[bn/^Wn;lpbeTnC?5<)bmEuln&&"_"Vo,u@DkS2pb<b1XGp=;1`(E>$rYfliD<qn)d5Btdpc@[+Nhb`0tfp#l:R#uTY%.Oq%aO(@5ojL6cW+9s)f[;Qj#e\!Hp&[+IJA!RbsA9Wn#rm(XG7jeO%>Qetu7mG<Fjg"P0UQ6>k]MZa!RLAE#"l`Ts>KP+M13E#'%GOZNC<f6GTD=mN]LKdWb/Cdq'5@o9Y5E*bT<n!MG3,`=*AG-C88i3:+RFFBK26-@$+2?N\Ru@QP]p.;eNQ\`k@c;?Nje_`\mWT!S%L"8-*#.Cg[^[P3JcJ7k=RCAXi)j^r_AT;6.GIB13@,?Ara?"?<7806K6Ei6i!Y>XZODi[KX!RZQOoKf[I+u52G@8"m<??WjGO[V7%`r>7u$JonRZ@q<M>5>g!`p;-_N(20__iIXMKmE6k3`B:Y6h4A[*,JqY".'tn_7R]Tj\C$rnu?S4<a\/KMZl4Tgb"f^e^`@7pX\,2%A[SW<*_>#@^,`$=/GYYJQ3WY,<Lt`<pNaOcpo]/ESAS46]gW"anF"&l(l$8;`A5HR`Q#Fbg1ck%V0a#JWuF!$@K/fcp6Z5^I5(!7%QB!_YTe2TQO5'9fl`J(<X\?&/7hZ_$>@f7-iMS9@f+$%<d:HgQTfrubqG_IjHnH$<gU_Ys_Y6'Ub;Z:nB$'70o=83'mIT)P)A6qV%\@Gn^;-!hH1,uf^;/m7u/h\DKnTu8j@+H4G#P?$$"L&lSj^>u#%M+r>rKMs0_G8so@$YaU8NV1_9$mqOc*@TOo<@EN>L#jC(J!^5%/[s=1PdA>NLSDGqM%p2=;eJX(XmbBurH03\]aq#!$0kG=mB*fC<9RG-\Ftaf%[#H3[0>-rUI@;Z0]lTd%1#EC/Wo2)43M#\*ha,9%C+#,r^3g^]<3^;4EHNLL:]6+3@$-N<U[d@q3&D0sJJK6\>cdRW<9EDi:+a3A2W8-rPuT;(jC`)tBK;?kHJ2(FjlaoeMl0L[nFSiN%<)D3*UR'%DhX%$nh/5-99teaO>?n^49`5d'a4;#7ihbfAPTMC4Nk)Y$H]9r,eX,jiB'VPYZ?\<OG$DIYq)r*=]f5Wlk<JQ:88'J5%LY9FJP:cfsDJ-Y`$)H5[N><Iufe.%.k'OGJe%MkGB6U3\a7$&6Ko;*P;u1Xj42[@c0D.;+P%s5^#q36*2iUN:V=\rD+Z_V\><XY;%RdEd%X2WL;lM0,?Vn6V3%d@r5MeYB+]H//6&M+15OY[I1YmuO@OL6BdTp1tM,cOj[D&o6b4sn^CP-2R<+>n'4_2d&$)].;<o(K`#%\ao7[>frVNFGmob>-ANomZLg,FAjJMP5g_.[XS%b:`bEtO[EE9I0^'omX<K81+LW*ea6n5SmFT?gKZA_)dAs+o;C]@PD6aG?-!gS%]3gP(V::a=W&LQ<)G'CioncYnjg:Sqf2s7<8o:C"KB^(SHqKoroq0p%a7YJCEQ#t=\h8(e3htZg9VQ_o9#ikken=fh\b`urR$kh'%_I72$@;^BKQ2U+jJ/UQNQ['Z9=R(M/4ATNERn2!\Ch6O<f$[J@S]WdX8@c0(+5guBMJiJm1P/+=;qO7-N^c6rY`GPkY3K]mYP-Rk%/'n0P<;FKmreN,l,AW[>%ZdaHfXX/=*KJiZ?o5AFhYJD#P(iX:H>qc\\:a.sB;EbSB#mR%,>26?=[P;0Y$-mZe<-RAHPVZ,LLZg'%nj^eNZe.7n`J!sAq&#OLEOq&Z=NkL]UM\88fQ(Al#A,\taVpA`d(CH<YJnm>`0kZKB<F$\=%;\;`N>Z++P6#SW0$C;Rt\?#UIo61%;;Wm7gWOZZcg*e>a6hu%o@HEDV;-KH4k?++:G\i>lH/R.^>#:5H9"mK/,$?a?En.gC;n6,l(+*3p[r>H]p7'X=3B=<_R:gU`X_U_%j(#?73'+lNZ,=lRFK`@0\GI[Z>[;PTl?;n8ofi%WId`dIPcN?F>ktN\og)C&il3+sIOp))THMQ_hA(>W[H3eoA4M#3^^)(B(S;bQ%0nJJR@HKuHLn7a-6DN.).@48P7X"?Ds&%WXg&!miB#EOr73c9?oor".D)b#3kBO0sUq(i:R@@;S^K/=E_f=o]Q.hFm`F;tB4+k+]%]]N'u-=T2m\"$"0pClQPf723^8'RMNFKQkknNHJd0]p0+d+rVhTa3X&hiAc[8>M$e.eo+O4XOiXBAQ2h_EdlE"HUE>f8m_NgitcE%+&<A`1jKq-k[S`C9bc&Hpugr-;L]G++PR-7i]06UbkF'i$Tn2r%S\l`kNJgC=e9JsQ:o[a6i'=8QfnbVqVn8ha)tHHl8Ir*11&.\%Zn^Ac(:QKj=q@I"3S+Y2>!3PbIs6>Z2RANoYX:u&UUs(7FCmYOR";oGaTl=;;GX*T>"_mP,Vfq?q3CoHdR._qHgMJ\(%iMi*7$:#%7X?$f$EoE,S6t<_GTo;e0N_`+e4u#fjs(16+rs=h7dP#C*ZKaPr43ia@t*DpL)u6r?6]eY#`ne<f8.:4p5e&#qo?YBVte5IktHYi%hGJ%XDLOCLf[MCMluR"SIa4dq+28m@Jp.@`-7]Y_4&0?nIT`nJ;MK4jQ.46RIHq+;-5lZ$X?,FU:,ptqBA=c\PE&S#)Bg!(\.TkG%a*[mQQ(rZ*,PoIpM,X1l*0#D\/9!@>%/;J#Kd("a5;WR+EnI"nValc.`Su.3`.Mn%aXnkEGd$)/`'5)kol6T6r8M3WUulkjMiY8,%h9*]kG(X(`MEUWB#5TfuSdO-U4'^(ok)55KI4"5)j6d4Y>\t>0`.E\Aaf>:OHrbNqhCj>FO7dJJ7^G+BT#5pMoWRTXMqN1(kH[dj%NQ*k22U3'Z$5]&DT-ASQpfli?Kta["8N`"@Jk"cYZC`61>G:Wcfj(HiRap:-U`4eNodj-iWO57)PH+JMo2G,GN<]F0^uJkDqdKKG%J`e4&s5:]Q@>F[?+!#Sglu8<95<A:MQ04b[GWb=;Xms@JGZXV=aaqLM%XUbGd=K?U%MAJm%6QN7q\tHbrDW,*Gd;tEft.cA[^g06%\/o/`<g#QBCS1<P\4^0N4K[#C1Qh'p`cKqpg3L6K%-+g"^*u1.Y3oZ/1T=9bGh)RnbV4/8g\<d><P5-@<W'M$Huh40m%(H&o`2m-%CU[Z2GBt^nksN/9><X#hX1'V9.b*:$[u,6)"\hBO1r5[=aH#0#o:2!>g+ji=?s_]=HC'-mOAo+kom;6V5Go9*j0-'$Zo6hb6(d]7%7a<;D$_,`U<Ql6B!T&0IdWTR'8Ve5sfm,'Y.plr+9g;=K=.5IGJER\0\.pYYRWlg6-IpD.a`dOKf'PUJPooV$1M75=F\:DCSc,9`%b-`,+IT"O+MNCa%h9Rje_Ugj%dk3O2h=3X/8t-E$;rrgs?;8*e,%u7g#_:/IG@E5>,);8Qe2qkFnDKH0[Bf@EJ*[`_F3RZBO9dHF%eBQJ<GtN\R`j%d\jdrdtMDgs`LL_eFi1RP#jo)=*^-dLCa5#259+N*UGnKLj@],k2-8poL.1qddRHK43j23!'Qm;Hm@'.)6Ed)Oe%7]q@'78u^/$F!mZ=$`u%MGo5<!dqP6-kBinU.PQa6#83oa+7GfRc@OkUi)8mW-uT&;_1g*5jRK#`.;V$3H`@@b`BY@iEV3f2RJ?e%ShC2A4&iZOnN*tnQQoMHF6.'RAtJ0Y^5Aj/0orl.;(T3a*X?Tu/lr5fkJm(*$V$afZ&nZ[_=?V8N'6WM-0iZe<Oc9O63ehT7.pkc%E;3>b.@n47\&PhoEZ(5>UrpZBKBqp"Vd)V2$gCY<K'!.V$`tV'a.i-ML?Ghh,X)lAo=6tA=9Z`T,B\Y%Yn=S[`+-M@&0CFP&Re.(%c'9>F.1Su=8ZZ=9U\VD;3@Z<j>cs$CK6KdkLnOX^ET"BjEJ2Ys*&8E?mYi-g\3+MaRunLVSWU2#<W?@N;qK7(BT[SXM^4X%L<nAM%4?p0:SWbtT"$>tmg%Y5`ls.si5=e1oGF_-t4T5YB[`m3=^[%!7\-)IPi"ggeI=oSPZUfQuc\#6-ZUB9aBXEY(QcjfCe[-he.63H:%^=^#bE?ATd+Z`4:XY"RS\BM5Nifa1hcZi[Oc+=M9R?dLJHf3"(,&tfn[07Ahdr)dbjW8@mDsuh=SJRB6Geb26+QpLhE68b4#dYrJ%Cn-(RE(\PDOXH/&T3gCk+mO$8-2uZRN4DVP0RMG!q+Yd#CZ'T2k&DY8IbWM/!BZS2)lK%4>.B'(FW./h_F:\>fYQTPdU3J9\1CZ,%Za%(#"9m)ZR^r0H_TCQ9K@9a:lJ0X>,9e`cJ@T:oD(1mDasn3+)SM`kK/En'/\QWh;r<&:Zec)Q5;S;i?0qd#f.LUP@ntUOo(_g`%aV%CA<5uim)V<*ZL?[dg?5!fJ8uG,Ie?8Bo+8Hi*rVDn4DmFEoM11GJ]\;jLFhVRcMXnoVJUZJ')P>n:5lSAX9C'3RS8VXF0\f^g%jH&/sI.!Kp;YloW_XRA*G7l\@IQ=9NSh=[CbgY^3F>^DGD+Ao?VaoR+%_3[W0CCQ0lhY,:D,d(N*!9=cdDtW3\ClqKo1e2e*PQ:h%dsSA[Xh7op(),r\U6V]Wb(j&a4/tiTf!kG$(no(.(JT4W4D0IZW_Vqi6Y;Gq62Cfm;@^8=fKAfaBq?:B#6Z`m3)?'?5Je_J6D!t_%7b,`Rr&7P1RnG^j#"n(h$.fnd7'E5M</i)mF>)Lem2Tm8lY5t,942uE\`LV&hP>2=Jbt?8_N-Nr*GHmk%>gknf`7XKc)F`4bUAfs%c6?dMf%e2QUdLG(0\hHYL^HNj9.%%#^7;ZojLcQfi[f,5rqNXI6931cSIF33H(%pII4SgW`%+*95RtgBI.[DN4^hN[OgK5R9]jZM%Re?)g\+/<g-*rGn7)#lUbEo>7]@*h50C"&[9C93\YBm7A>YaDhkJc7_9/"iQg9l5>?O3ODQs:&P9MdQR`uiYOlj"XoT_-FarnNo*%>H='=8[n$Bh#\I:B+=$$+p2S"rH"7b$Y;O@+0[=>QWj;i5)5)i;JJca<+&c!4b&<Hb2+"CGH4@iQ*tt?8i9qhk]X`6[F[aRF0rEe%DthhbS^m%2V1#7IQ+IQN;X(?)HVmorXM*T^>NC`@pQuKjG^(AHC).FP2<a?@oX'jO.9UqZkCd5iYTMk\m#41?2RkltL%"7Y`;-M7%D[u^BbQ08HOF/V@:GtehM)7CWK-kc6<,gR`Ju_:*G?H'f(=FMLBP:2%oAfn,Xdebso^bs-k;A>G"&A:7r8IH!bY/h2Y$li$5rb(d%p:quu$YtGlZQGY.mi4tYOS!H=dKmloEIp%TX%/R@ldWAOOTDjM=2-0Nf%*ac:kp"CYlkctghArJ;tdf)C>8h!*.,@?P7ngI"TA!K%cOQnp^YVNPlbRHCICkj1o_&'VXP:>o)QVJib.cC_>Ql/%ca+p<C]bXtL48"?l+<S^')VAJF//c8b\\?$ZQgB'.X-'R;bDHbk>8f2%I]&U=n7>!K)PclPUrtN0b$uOS(bPJ]N;cPsC%RCj9)hJG\)kk[oW9ULD`.8sM)UmXhuBh+UV(i!o_qj%+g\ml?7ekl<aH9b2LhH$%i!E%u[:bDg!!+H<YpCFR^bE>-@W$J"X_?h^Xm`=8I".isB^=A%45-R<JWFZ`kre1Gg4m4Z!H4B6SE4[d,XsIeigVB9F_Y/K-,,e!%BB5G78piFK/H*OD<8s>qmX^UOV^1dJn%d&5?DCX_JnriAr$EsJA*?ms0]ak$?$Y#j!1)TEa>V24$5SOU)eEodESeE0q;j@?SXNa>%fOdd9m01g6@rJAFEAsZZ8G+Dpn#>7-k+pp7d$T$c@?U4X[[VMT$.6p,.nf0ob.W`<^6F>81ru)?(^:5#j9Y+WpT.g>BDV;30@67Z%Jjp3<c8co>CQ%i7X>Rt&iIVf@8%c]mm'2+Q^;\Y_bC"9JFj%,.72LFOf!tWY\G0X'(kF(f#dhYbiP)A,1*YYA=%7l&?1!KNF<YOG%&qI+k+9Bl"5_Oh/NX-TCml%r)2dbji?gd$Bb/[eMa[]It9VfRlHSb75(%DX5%kE?7OBH\7r/=as6<"r/V;tk"@P!B*WPDdr7MHfD%)b[G,kpMaagpl1]HZ6b>MrJkHMSN2_$9W$h)**-\63Z&$T58"p7@!<-_MIKnh2IO<=2SRT!>V[b;7C%GQNF2n^k&Zh+%hmE72V#g%r=E*b;gE>TZ6.d0.@+fF<$66d8jb!=+ra[=<FAM4_UY.0hCj1'Q="T(cEu)d'3_^4V$Js@UG.L2Y?W-lB?)8k5);LjAY-rZfJF\(%5lu$K'H=n5_n.(GPEKdH$1#U@=spKVnlSkJc`=s'fKl:IG$%up<HQi8<N&5%=6h8;DFP,U+r#f?VXi['cH'<CEas-C_AP:hoLOj4%M5PLk)&^'>a<B=)Om)^0iM"'!^"_01`%>ra_t):I.WrIclRhCmhL$q)cTANc50&L30g54oYeN^k3HaA&$D2Q'a5T,.F81b5Hse,f%I@UHJnP:&h5b9Y)q:Ma31LAV"e^YHUpAc<2C%L0N5^>a\B+T(oMJ;78eU@FYea0.!*4!0%Xbso:$L_cF3'Z#CB5(uP_`=)A6XA>s%.HgW],Q@UCj>8l4:Ik?YZ.kg\M&bI=//TC!A6j,o3.PF",10TiodT:XIC_t,]QRiDjO5Eq@\+b=*=.t+X+NkRC,puK^n@%OG)e;-%<r7&a0=+S^.uR/aOSIm/``RBiF-2Bb!/7hW\-+Z#QuLjNMu4tr>'*We^IF(;fq"c'XY*q_FH,rdmAODVf&l2uj5#!<`W,A^aOQ3l%?:s@Xp?<XUH_'9M&U2ekp9/OZ$1Vo""?#,U,Fs:!?7PU%ci"M;6(jaI51=Gm]+,S>o\^;Bq/-j\]Z]9YV93lNJ/n$Y4TCr!\mI3O%%_(9aZ-8Q"g2H/*`gtrNp>tBs<TK<*6Io`$%=OfM51?)<=uH8blND\Yo0g`6PtR+>-:"q'Vr(*HB:8?gV'W=Z$=7P/M\hG>;KM-*%E-Cb*=+4H/]OkZ"f^bQ)lE",^iWRfIo2EIqT%F@LJ`irB8#oDC"P(<Z;\SC%StI!HIOZoG4"$u8s(=L"K%f%Gjl^Zb`\.iLdV/hE%YP3N-:dBNeWkUJr#M$TTh1V:Ds%2E=pb_B6XB8%_f?k*LTEhZWH!E6VB9EM@E-feG])>OeXl!g$WnkFRb5f+64Lj/u-'sgkln^-'%P+5%p8C+4kHB`t<a_-:cF$`J7d/Q%S-GIm"j+NXBs*Z4>M?nP'2u9e7^ALHn5EiC;4A=Tr9$&!aGa=G&.jl3tSCCLaVqSSFr(:WL%^bjl$*Ome/2KG7#(^T9:lbJrQoc5<,-"Ks!=h8#d3nQIK2GM\YU)<*pTt%</(T(>U:6eOugNhD%21=bB<i"eZ6HY^bOd'm@M*DFW%I9O(EgdgD2LFDX2rAG*ZeWPF]=0Us9(4NcuOn%'`_i^$t3G0fW,.4Q9/4ESO$3En"N?ebU&5=I$83'+-ST#^jKPXdO>N\X"n1Z)"%=h4rB\hGpqIO$Y`1h@(lF9M^3S8(Wa"$i,=K:671TI,^HIE_p43CVN$jC%G6^^S<tH<JASQL*kF"#Ftp/D9fH_j5/pKJ$Iam^T,=%RQ(lB\=$8),\dhU5_K/Y"JfhEc$'3]>`fGt$NO"';FWPi!Fi8cE%i/l;DMBT$tdSZ**9\0d'E<iLB3)7aA^`B#ZGg[o+nuSW<?`E%]MqlIINu+]*P`U`aYF=.Ln-o@C')1;r9Lcnpi%nl+7pc7OX:9(P,@c?F1@#NJ-3VuU.e0e>#$t%/4sSLFTk0i_$G*"P/NXG\3iUr%XX=?V#afDdOpE&3R#/>o[)d:jp%M+48VW4dKTW_l6CO`96UjhV2:I6Zqa5@%F(#;9b`sarAthm+&./o!fKmLg7CO^]+uKZoKj^pX%W15F'LkqoW!%^]^)&cgJC.V?@Y)LiA!<=Es.t97K$8@6uPE=.!ic$Rh.JonHZ"siq%8:gEGf+H6L2@9/>_&iR'S>uaC.qQJp6n["%$@rps8Cf=9*/^VEP!f/JladITf.<^1<C8=6C,-A:_o,^`$(bR&X:6$t7g,#M_nn)8N>N]f"HtRfeXS*tm=HZ<;`?E68X"]S8BJ$O%+Ia2Q'58b^Pd2mY_PL'6#mVu\7[V9J%B>@]7AfNV#%]?IAS=gt,r.Rg;-AS1!@(mI0VfJ,g)Q8VP?3[8EE,b26C1\/.EdUA(3p`s%MpPI0F.!4<K5d,6T!:+[:Q&/00#UbJ0$I=R4H*qW[rS?+>RXlFkT];l+WeYQ,.rifGBFf0W2^^:^m$*u=,[Dq)[<36&[b?Pe-1B)%>.U@EH'j3sH;W9S2+Viid2u*g*?F&LJV,Z,aQj\^7MG@o(3*KB<>X6)0[6mS(FJ/sYc+k79u8':#o3oQW$^2^rD^rcCoc:td<uK-%fkNDU;372Vb2RbIH9$e?UdI"rU9U+G9/[Fs)lZkuW"t=Sr_4(MP&H%L:]MVA!N@oH/)t:ce<E_YMl=1bg'=10'J)SuE%RD0&VS,r%M-uuM9km*BiMW]s(AAJV5:T>4.n)c\Nb$8WF%n3gjWmLLH.`j=7&U)rl^Hd_2uj[:!J2#X6>N;L1u0=g$MLEObUSe^Z"d]Q"s="[%7>unQR"@RK:Ab-Eb]jYm&njBn8I.#)]YnnQ6QR,s[Ntukc(HQ'Z=r&.U`f&8=L97ZUPpikYdeZ>48M3m;:u0kOptK-!FXWi`;pMd%l%Z5IhCtWc0?N(;&7;E2<@#AYSAU8j?ks%[g,TC)8PnL*6UIfpZmnM^@tgch_^)#?6I=I(U+/jsWjYBb_ZIB&#$"ln)5#SU9,`[Z%pfWb>A]A^LKtLi^O>YKc8iG?"CQmX&e^J3G1b]+DN3[7uKMfa4+H0MeEXFR\9'.B&"$t>81.X&/1K>BQ/4E%>M&<Z,V?!"r6ma^G%"$u4h`0?r,e3a@+IZMa?64@A_@HAWCL1s*26[e$((p=#M6Y<"U_O@u`6^95>L*8Uc'N@G"7>Rb>=N"L4P1)8D@W`8"-ra_=6&Y4@%'43J*$rCJ<"@HQ.O]>uY107(7Rb=M'NAWa%Tme2ukJ.@!6:JJe&fmWZLpYO!XQukoH,EUcF]IQs+jQEJ_RGh>d':u?@\tAkQ])%a%AsuC%*t9Z?&L%=8+GaK9PD2EFHUoPaZ'5W)2)u3_#lpj,!s=P='EK>7!W`+h!)[<!G9Nc17Ahc6;bGFGU=B]Wd7@&LRBSSi@1536%VP[1iQj+R=bquBJ%9"8oVJPIDj[eWM\gF'mTh3b^GsmcGfnr)69edrbLN"L)^edgD):X7:':EWUF1S5fo._!lUd;OH#]5Qje8a(k%WYt=09a$H]"d1iUg*Jbr0r5$6<G^?B#fFiNEZhAug*-Z6&5=-N'tcS#*+:+O"B,G#D-f9:qPK($81]Lm(aa6T\F>S0K6rR4!%u4M%^prlqo.Ch#)Q[kAT[eMoX!'bZ`BmK3o.!>uL'L#cb5G$p:pEu=SF%R<Yu3-k'bXU3J-.eq[0n15"obV@S0<RdL17d_$Il-iYEC\M%*/rNSlo,AS%J5PRb)1lQW[s),F^R%,KjWGBcHZP<9SmLSAoCgcHtB13W4g0fLf4L#e(-AWJ&Lfe+`eYh!)"VLYZ&P-*2eaJ3DPtB%_u9pC3O<:%$sY%$7F^jX";ir=&Bn#ecGm.tk1)kMV+ZDKL.5$@FM81SeBt)1!KatJeEpXu)%Udb;NN*!/g)t$J8',Uju_e2O[B6]%6CfkAk/==i\=//<jPj/nqDbS7^c2fInZ"l5'&uuL/V3:Z-8$4?&n!\*"V=rs\9O8?d998PP$GXlJ`rb#6Y\Ga`PFOeEaU_1,s]Pa%KHNfE;"c1).L`Xp?CEEsZO="bA0SQX%56CjV)YB/leMQV'<b;M(fTea47Od$L/jTH6$!V</D:"#L0l]I>7lb&!!lX<8<O?]!Q6,3%$&qsd7($/K(#i$s7R@A].DT(%SHijP)<aPc"UD(^6oKa,'u5n[UF*NZ'u82#'B9]1X"ZrhM3!^M<</.<>6n8<P%ln7"@00u+@p"i%3!0;a!.oup$W]Q!ZE020!sGY)?mu_rZliHs5\RBZK@+'ADU-[T5Lb:(TZUt@?s&$ui.>:r?q`3t.n7rlNWBnb0Asf!L\"1PhVe%#%"6&mH"69"t#GWcbWSC>i%L/G0F:dPu&-m:K,'k%3(T5YS?k<p#7a!ZmLoB;.aXtDaeHs%2';M39?''[MNnACkOG^fM.=Ck0nTRO>%5od#JW>?JQ;TPRE#AXs/="Q%P"l(5g-In;6h#bN'@iD?KR%]rOL.=X^i(t-nEC*Y,%*L7.TqNq[,ZL""U^H_)Bt5BR/<g>TL'$>"%(sT$o%*dM+:k\*TC'Y@8/3ZsCgP@'/C=JRU@Z`,Ze>VVbSo?5_<k4j&9R36Y.LV+qJM$ZXMjl_,j_PH(2(j^-'1C.QJXB>Y!6h"s%+Y6CM_V@*c9Nm<IcsqVVLqU)Z23(T95d<>k#DgJTk<\KKe.k\W%m5g0Xtj;.E!Mu?GQ=t=6'VNY;n4#09]a,n,_q-d;/t?72$"4t%;@bn6"e224,_mR/PmfiC%3Y0]6qPY/"G#J_mST\@@8+OHrg+'8CDYoNMu_W=Pll%.<7m/FK>[gj!X&b,!,%L0=W3rb,o.ck8NoBC%S>%a_LqPp$n:;sRXkiI\^hcq#`"nFW3!DM]Wg?k-b([CB.3@Vj1PIM(nVANJ/K,a"G[1SM#r!9f!Z4fk>Y%GOO@quR$k=I3Q4TQa%+dAn1\k"7ZC,1#>qI1h_ckH_YJLUM_W@:Ck0SSi$ACZA7`0R?%J-/^OKEe;5QkPkH?o0QkEKFkl&BC:@U)=^_X+L<oFfA65S<cL!%;k\5^'fZG<iYEMm0I*aATK<a)bR$3UdHDd69ECT>U_nJ.7!.6-%#Z?/!)[SV0SRP>`Y1*:-]&B?3<;NLYkd8]V>t5lZ7VA_+fm!q%63C.+N!-!\!!K/%!-U2=qfmmU)\p4DM2r?Z]PZpdikQ7_BG.G9"K#-2/>bhOJLLSeMGDuCR+VH`;h(:fXWdenC_6aTIaUNTV'K/`%-'F#C;B1?/?O''\;Huq,AqfAHR(D+q(I5F3b?Pnoeg"E?$GE:aj2@bo7[\kJV)Z%`?%aAuA[i:[FLb9Z"NR>A#`VJs0IJJ!^bgcp%&f*+44K*%QUBHIE>tY`md?/r''196kpLq`&ll^:C,!>raHQkZY@'?OnF]/3(e:bBcKrGX8`A@P0]>MNnI+W5aQ4J@ImP0SFOHY<o%9i[i"@eZC%O%L_O<1#ujXO4l6JN+>^HnPt`7Vh\4[oJbUMImuSQ8O6](^>&3DB^nO,;'e+pIWS"QcZN8e7kVJJ0r^\"[WOsNLQeB%h#Qi@(:L(EhMoKC,I`'YgN(WHm1O`C)T\V'D(AkA<eF5T/I#l/(`/ifhW4gGKCt3:2Z@W&2'd">R`N\t].BI3WW7[e0aF@m"B+7#%geia<NiK)-`@rZ[m"1bkQ4"nF55oEaDWDW7FHqqjHFPh,js.nd9'eD?5\%ie?"8F9eO0n;--9Vo*>f5,_u$_kE?Pq0_c^0<?B>Nk%9+@;1i!r-l$'M563#LHESL+Q7)-H%4J,h&@4Q[b]OG&6H5nX3Q,6V95eB-W&E*OUt;(!\6^o4kuhrQ5+'+AB1q[M:qCd)qL+I1]p%"147,;u!J0@c1@=3Tq;r&^kZlTPe&p"32At3<\7_1do3sSA;CERV]g^#opk(e*^$L`uQFE4NKiui#&F@ijj&[@f_;da!sKZ/O"-T%>0'XO`PA_cOa=nV2EGk4=0u3L%3,`e@Q,KeWE[5/7t=_\(H;UEAD'c^J7@8N$$Zd@,gJ^93]@'.`/Rd?+MgZ&DCiSBgfT4P>7gju%+n>FL<D,iRY@V]bGQ7l,#pdUrN\Nra"31BrS8B&"&-2noIR<*43b5:K_3]`W#)V*s#S>Gr,KBf%&%Tb9L<23[bn2'Zo+?!'(_b73%,KBeJM+LDda"S!f;fUS0Ia_:A-Z0?2@>C#bNM1]^aiBAE#`TdE0H)m)MQe2fW^I6SnqsZn&S/d;`ON/QUFOZCbmQk.$UC$%`JlU&%YpN>)0#UbH0$I=P4H*qV[rS?'>RWTWkTJ%4+:cCj,.q]2EFT"$WlbES1fcLV637_h6S,AK\%KZ[R`b*oJaRM3L=3lk)3o]G4.HdA%o'[-@K.s^SlPCI"<o*FQ-ZTVLoSnbK"1-srJJ1$JLi/*4@t7^J_/43,+?4Dc6(H$$!5l[s6"o>H#YC0e*!6?>E84+h;CZa=@k?Dm%&3.\@L"g1T.3IiS%Os%_E3/'o.Q=thM'*]r"rQnU=X7*lf4ET1)W2rn@hhMY\De-0Gk\+REMA6nOonR4!kRT#i0XUCnIZm#E6Q.g%^p+5^*i9c6#+053h2;p.#h[VN7ugSO4u#c?LEd@o.Q^^!n1^^L%&V:;3\ZuuErh`,o:]Y(jFiOR)!-&E6=n,Mhc0kCbRo4j313uA%LT7R8n,PjII_c:TSsM"s9,@)\fa8?*Hk,9E3Q.R!*cDkQFH$9ji3<Z!_./#RGbl'9(*O5O`^gbtF+VH"-eTCg%3B"sZ.X#4*/XdX%gn&JTmDP"cL4!9&.CN(eM)>3GWl!%N%d!nT"dm3T'Z-6o,G$l>%,73c:[ja,Z/@?)Sh2+1Cg/oP9H+rS)3&+p(m]S`"GmmL#:`'X%5pAO2oU(E=pb>=0ie\aE'OR-83&?<Q(*>d'+Y8*/_VFpk$Y/^:S1;?l@oT^7j9ZpGk'L<rq,0a&Rhd)0Fs1aJd=p!;0kC%"6MMB`%BQV<)+2_/cOnhlj6C1.t8ba-W7ao<N0u+3_gXmo@E+BeO9[aY>7PJ&026iAR@5U%V(-ctN1k*XNE;Z(.&76*Zh+KXBcR%tJ3Zlbg%&5D?Ja3YL^UU'YL?H\K,NK$1agXQ#n1!ibZj2ZQ,P(Ne:;5em?(^ETSDI4Uni<IqcZ1tS.':iO9!/pAWN#Nj'#-9]2?#dbFZV4e7%,N]#4iV#-LFE>ro`H!]gpoumb>U]nEil=07`K+;l)aEIn)T.g%V)Zof<B$\kO517uDWFUD@I*UMnRGQ(lrA24:7>HSUQcbBM2i([%)^k28HHQQ-/\;Tm<Kl("jOUCUHQ;>U*=NcbNCtW.gcc[4)ATp&;cBZ$N[iNm>bS/aIN/V/1]lDkRbeij;/!<p%gLe\M$)a4WJE_B%&li3m?nEDri]Kn46$r]bHl3'<AT<C-WZk@_2DmH*,T80-$qM'Q(uV9S+<8mBU1q;t5q8]!+_)fG.:C^/`6]5#J^%'md6R=Y7(9FM%J0nj\,V[mG!>#q:JH2qul-FprHcYGO-'^.FFDqdXal!:P<2A_CkNW\cY8#K=0-5jq!AkB6!J3I+&L*^%$[KYY8[<5iV3'9:8F<W<%#aj8+eH6BDl<mno6B"K90T<qW<LpX9!5VhE+Guk]/qij:qlO*PaBVV6DcBim(*M6iU[KoS`W9gu0NWBs-P0Q<0uQ>[+iRBc/Q0a"%Fb1up+N[%cefP2!6m`W`<]>"u&70m;N!]u('CJ29V+N89/>83.C3UR<P?*Gr6j3WI4N)uE$USqB,92MR#8S)65*@9.2b2Pj63oBj%ZDG&bi*<jKSpM,K>,38HZG,iK`PX+=Tpd)KP(Q$TbL/f(7Dr5$>:cU<*hse[2R3qDPD<;<Y)B,q.QN6Npe1hnn!PY71slH$iaHKN%07kXQ8RN*)!<==%5r],Z#_F2dV5Q!H&0Q6Q65^MR!?V<%Y`b=i8:oAu>`1n%_h$a]Y6,rO=gG4#V.:2o`Xj)d@hgn'ZSFFYa^@qU%*eoHcH&pI.lk`=D`:anBq7'<,&tK".E]@n3Scb`E:e:#<!7<Vr&S^L6MGoCbYVC+tk^PXZPZ;9=Sd,R>a>GN-6p9jtho\2Y/GtCm%(;dpSjA(DGH_q'7:+T<]%SVVbF=b>>Ad+\pM\g+r$(6ga#,sX=Y?,+AK.?(c#9oAVg>kC%7Vm-B,%1*/Op!K`KkNm8#ItD?7&Y9O%8oa]uip#"gI&$ub((te?@Et.Be&[/8e7/Me"#nl2*ZU<J8a$Ek6!n2[^i83?:#a7T+fuBHfnHBck_ZbO#K%U=N(`-P6&r5%Mjo@'%2WtD[&q&OU*!(`:E'#KKi-5q:?tlY(,o\c(?iX_B@L.Y!!?eqf8\^@`B":>A5ZXh$<GWcg_Uu(<Jh`93OFAVi7YZA+-Ct:#q^`=;%7$a@b!<d-K&<9YNWbGrS^sWO7$jj86"D5,/EKi=C5^!WZ)lAuJOV,K6"KZ)CJ5V#qS+;9s31I/FAq2m\S3bVcfI.MHHc-G%(oG-H%@gCR10Su50BRYU!OMIe-AOIOL!(?W7U2+a2kmbC_o/MTX:4e15kd&5.<iNYcZ's8e4@1V.;l'[Jc9oJY6-rZ_5k,]p))TN@(kT4>%l$1[E`EJRER@C\A^1noXJV/IZC!tT]aIm%F_2^O60Fcn2Md'+;c%WeB]FE"TZkR<q`b51!2p2.iNENPVhf<+fXHHJMNnK/BR!@ni%&>:ta']*DVAIg1?5Zj8&LS6`#]LVjn@t.`s%KPQA,[n8\7`A9MrRS4De4HTk]S&5W@7#RT"([U+Cg.cfRkm;<=]\kL)tkG:6a$$W%<7D75p^eSX=lCOl\2b[k:'BL6.'ehD&iOAhCDNEnKnU5`(ARumS^dlbL1e^4bSCmC!@Gt7!L>,I0eapa<<Z_l9EU%N-t]d<<@9[M%5U7"I.^YPh.0CH?13!eC/r-IkY`hK:Pamc6[S1#N!D&C`To;`iD)f+iK/a4'LCpZ36\o3+djp7F2SdT^3#Z0r@T*`E+@Ar'&Z1al%>RmJhbC2(&ReBPkWE^W?WOO/g%aIECK;J0A3qJ[<+>XuJ!DVa&NN,?<,u.rJ;@7^bFkF\QAt;g2MS]an2E8;c?t3&u^hL&fh]1A^%02$7(TYTc[a[&*.-04''^2ZLHRV$nSnNmOqC<@uG5`JOkK7c/b([mi5JdJ3\HJm8P)f!d93@1TF\FkGX$h7b+L#\gKL(,77QKUht%^;0X,S1YQadEpC'rC7h7;.Tp?U6/_.d"lFe4mRMN(<-8sBBQUigQ#P/-h'3BEZl=m@I(Zb9M>ZmL*R>obeh=ZF9h0eiHFC=]RBKW%X!Eu.q+NR8pTq69Ub.k-;H;u]n^<T&[c^;5TRY)2:)BjR\7I&EiRpXO%Ytn0=h9e:Rnaq=H+EP&9q5/=ln1hFE`19P2aSSi(8C%\%Yc0#6[>7*6IY1aXJJ'+Tq8P8cVcJJ^GH=8;:N7%YlhA7[<1do*mu^]s9^PJJ&6,Oi(npL./9F[2=&X9W[nd(ulQU7`eZR0(91?6B%+5V#0(#]V$m8pLCbf1;"DSN-eN^JqPUfC9pX-`K`Q(H<!$9MSP6g.tI$)]5q2&Ta3ZH@QQZRB:pWeu'pfnQjMEE6S3,ULrY:C"Kj%gm+k;n`Q-.eTA`t;UFuoVJiJ!"*\`.cKJF+!7IJRBiY^1$\>c7a/n=+h%4Rb;_82$hIkZu#WctQ"M35Iffe^B3=CEMreQ6M$1M?R%du(S%#GKl4kd/XuNTa<kDu&b<'-MrqR^jd1'pG-m)<[sG2EYdhfR9a56)fH0.TPB,oXVfY$jna)+&iR.L^eQ'S"KmD=<$Ku71ZB$%$+1er[hr1;HrBFl,]j>t7/:Stm7]CGU'7t7GKFR;Y_[^oQ#EPRq=LKJo$-pbXGq4sb5EeS+B0rFQ^Q'$i?hWa-S^bHg2lqQQ-,6^%AN%A=k_no5(4G?<aaO&f0e)(OH>f:dF.@uHdUjIF.N&pSR!UrHY!t`c+W<B"3MU6mL[!A!mTXecf^=W7k/>HVI$MQa$->VDXchjH%YZSEH8lTOV>b^lqkH[).osffgM8\CIjMcIYkfh?Shs"H&Pku862JsZDAa@Aaee#OQ+<C/W3%!R/i/e*nU_=XmRe?o.k"rI?Y4q(=%e=56oa&4LUTmP-5]]1>^\:Hd\hF(9eWa>)s&MmR8[)A$O-R]DHlUb%4o1WbOG^(+'O"!@jZ?$$kb/XJu/lgCCd_I7<YkGiqP*2%9%Z*^h(A1MF2k-JK<MM'k^G(V=[c,50[a.RuP<@/cXA!b>t96S!d.!-?hKPKBmL:K+m<O:S_(p!+'XRE7>_2&#@c@Zj9M-U4Wk,[2c%c<-6]pYKN'2Nu%=VhE0NO4J%QA[js?X\)S;[O=sWFWN/DQ\d2;K(+,*:Cc4Z7*X4n!MIWOd;d%<CmR`a`hbO3`MG%hT^b;Ker:'m%0>"'ajdN,%E+UkP2\I*fo!BqA"dH!P(6:<.'G+=+%;*!pW<`],T%ua`B'#^FPnGuP2B%u'WKNL#SeP+#UtFsK%JB'KHZmr%s$:>]%\B#W@ijAH&WF2hdoY)BP#J5!d27gfaK\"a9DLrbC9k[s8kU7@mHs7)Do/R:2;maHkI+c!;qEj?W+m$Kjj:@2lF5tiJbe]Ogfcubb%(W>gEm3Jt!q(W\tV\&Njft$bpf(`g/(Yc7FZ.V2XJQ=?T,PKXR3_?6LNaR6+cu6@g5a1K&;[,-QBU-cl4Wu_!3j.7])YB9QBBb*"%;GsZ[e*QOK*ZXk#e4S:jDR"q1koag4UHd^JVX&XV>Z)_eLAo.06:kZ#)dg^?Su'TXGYg?AOKY8FB`%2=Z$XSga)R%Sp!tuDY.h2S%9aI;724nW?Y;"l.=iaJ45s`$!ouHp"F`ND4q<Fj(U_QbH*nZ5']d)J$o;.Wg0"'@;a8BsnL)Jmk3=-.oY`C&T*XcX>gL*a$%V]6k%+PD+1c$)"D=7PheG)hD.(Y)tk%?=@,!'-4nf@Xn/+M==W:IiVdfI#R*(DTeQbCj.l\%6ND$P3Os$_<]%Wj2h4PM,_3r*21RmL8F=%p]c]r(hgi1T!K::;^W>p+Fu#]4u@^41cP#Y1XK?T55PF`<r`+4F0Z)_b$2C+I@RAs`(8*DVtPA?64;^g$2ts/]\N>N_HbaX9_M(:%\-_:``'q.6YYN%H5*>\L1^=;0C`jm1[u%GB9<f\W`hcWC.02cANJ$$b5AYq!#Zc+Z>Le'Ged*eIdJY/)n2S>tG37gq'ae(T7G%)u%Z+;9-A%k"pVgPlgb6OS!#t&SX$h:$?RZkA/=TE\78_F[-?;^=o,-&+8b,*Mr,+2<:,@(d)Q>\MoJRfOdL)lB]1n;_np70t0[0Ct@%FC/%fO`o@Oq)=X4Jq]%</`o\RR.uJid?N&%P@?r=$Uo2PKQL[]O/h0qZ%R3EC3upb`iSd:l):u)8&R_9n$fH:jR1);msnSMZ?J((%>]rl$=pjgR8OkeuSdqXS`o3K:8JFA=GM?=1dDpb2dL5"mo++C>0)9#Yd7$3,J.N?MKVZuMW&)/)='oLfTQ`-WEg,<%![-#-H4WgW%61-Jra;_I><9'ChAEm77c8#p-fWTN4,F'='dD[J1546+F<74Bk,fI(+WGbLR'7H=?Dl0g#I6Qn5Wh%JmLZYAuo;QP[neL,ZWdK`(%(%<KMg('jrO)*%o?ZtH]Z9F3lZqZ!h4a(^.,`_98?Q,*2'Wec'WLLSbNFjsU)9.Mij@a6b9lPWSY:2RL@q7T[0<R7\g>.Fo`]&Q@%M:mRZ@)SB`@]!AhQBmQl(?_K$$qD/Zj9[Z6g12?Z%YS=?)ji%FZI':FTmdf!4?n^P+"Jg"o2*KuZSr)]oW3^tOlm#dN?Io"V*(N*%^WDD)DD^._'Qfp]_3o#bJA>0CjNFj]c_0;j53.m6J<:7IKELSbK2l)=m,Gh5!0M.p1@ce:ec1J0ZU>4P"u;(d$d,#/PYY.RG,f:C%hU/cg/TgH88s^g7P/;J*HXf'<(Dt+7YS[l\LXrO-pSBii=VgtS0Ltmr5(isr0glk^m!_t$7:Rp&X'7[Z=LCf6_Ne5cd[1Omhps!O%g*G5pC]L)BG6fa>+1he'C)<gPMTM&dZ7osHA&CW#,,.B.?;#GPb(=2):7IB!jsoU\NX@m/&`s1cm(FL>6d'cU=N(<^V0nFbk#)3E%9XD"?<*.2a(NHKPbX8"=&M+;+KAMAa^gN!BA1%If:Yt/]H=WC04R3@%.O-i%pjTO!$B`09<^Y\=c]#CoM3Y--UX^CEa&,DaQQDYB%ZJ+GIKZB;'20f6\f!noTM.TlP9g8:TooR#o3dULTs)kN]+Q%,T4'2/>h.#X*WM-A+nLB/@TR4qaKb$QBQ))m^4VeG"!VmS;?t&[`%PsTr'Z%%ipZRmFOEY(h]'L5k=S0[SH!2Yq:R3j@"[5ZM0!gUZO=,t'CCWq17$Gia-Ben`!6%Hg<O;4alr1ZaTV-Ln4+;EJ"E6NdR%VieZ]BoW,BQqg,D`XF6/;rqr1/c``mIY@cef1&#B"L!nGIW0&kd4;EWSlZH<RKh>#^4Y&j/np0G+i\NpEAE9*#GE4^2U+4oVIfRg%gEnS\Xm?dlccKL)HqahiFKlJCeq>s)9d;f3)10Q+*C-KX3.T1AbaJ]MQX\-H%Vcou-U5ghJpFmP1?2DchjnF\mu^]sCb,L&Z)8`g%?n1qkZ2bP@'&!A4,1$'VbZ9kBc?q*Fq2tlLI!,mHJ<)\,bU7U\/323fbrh1E+UsmI2eep#H/iOBcW[=/"q-\A%0Jbe+Aokl=9^s'%QCJ_(,fB9,S?%l-dDlMkWG:Ha]GDU'SV]DpG,qV7Z$rO3&ep5BH<Z88QH;/j>a8^uKq_ONaJ@Ul-T&YXeoltVs7'<71<0m%2SG0,%0GCB8VeZ0k9_Q_ObMO3#8_]RWNbRFaOa>bV@)mR)WG-dq7EC1'-IRM=9>Y*:b%;'b'Vdd_U]oF[l\pM_>IsCST"E^%##(WLDmR_K%$4X#!:1W"*E5Ve#E"2V7A?Xjm*6qOUn+iEjOgF0(%$BB@,\\\j.JpTEH`e9E:NMjX>jB%cm]nes8uAbPk%/nK_9SrXg#^\HZHG2a%QVHuF<'!2=P,(!C[u`I52Vk/2lJfN0B34W&(+D88TLNfWG$!e9;j8P6+!%gTRZg`+3AT8Lj^k-rnmi^^.bN*M57#k=P-^'$i#PAt%>"B/B-EiO@WKHbq\"p"FQ9%7KP*:$<)IB(Iq:=_\dg7<lDed)RU.)ee]IYfi`_@pdW[6!G/E^ZFIou83=]]6^8XYLp@R]#0PJGfd%KTdA$,2/E]ag"f>liI)gfJI7,(=_D+11[I:PB&D=YI#2Wp2J)5BN"@]RXB/shNQ/ZB;)Q>X#3&4"G>Nm%-Qo#k0#g\kL6iU7YI[K%,e("7nqG_N:DIPB:5KjnZ@GE2=.*S9N%^*7g;$#A4GI#cC(#AI$4XKSS8An:MNhl^lFuZ,Zq#BbE!ifoV!pM6VmCQsje?<:Y.3F_%4tAVfY1Y)#RI(u!Wnf8brUJN;AC_:C.auj)4SD-s\uiBbhSo%JZl)/!\9,VsYN-[ZfR6[bRi[9"C,(#hUK]h:Eb(#1Or%;9&,KU.%p22Ja[Q_6:cSWgHr&3h@BYg4:,t)*0kuFW-RaQs"EE-_#6)[m+$&Z"Wk*cL&5p*gYrI2=Me*CD)Z\T%6WGL@H2#D;R#8?&*E"f3u%lQ!L&fWo(lUOFC=VRhV6f1M:p.OC%mf)&$4[sG8"LE:=JJ]/$$`-Rsd]hYHO4r(`m%NtX_BYm61V/1:A8m<MeccmQkDt1<2[H[Fm%9tsqj.Rut:,-6bD3PLn9Wr%B/QQ>PM]i;\i<3[:B$BR#I*tfL0s7JXiCA68u^f<V*F8X+dInZ,s8V@VpcjaEb%an'f19rh=%<GPj%;56>$)6!2I_!>Uq\A];f6d5KCG-KS:m7_(AY9c(iRDQB!<LenR:TE+8O)^["TMX-46K!(1]4%`rb#hCcPK\c2HZG)Ak/c7j-!qCN%LG*.&.SNeKbcj^HB/<=?j"4a"m`;kjibYGC3+lHAn_.j8mo6NM/[j\o:),XkZ`GXk?I_eJ`N\nOFGgu?(RsKNn@>UP<Z#F6N9.uP%@#ehF2A$B[Bn4,mbhV7LmC+3/f#pTjBZ$hje7>anN'*r-LmaW;hpc/?&Z3ddm+roRKXni.C2iQnCGG.SH[e7=YZ;$H2a("DTLiZW%V&Q1QW`d(A?u<+WWftEoiDIcUD<Mb1;k^:t7QCc"N[uB4/6t6q;t31jC9>%O9kFXV4_U8:GR;(W_.L3r,7EmXS*]G(N4FbE]q2W0%dHX$@C:(,k*#=iY17!K%(-Kb?#b.,/NU!hCX3FZm<Z=P:$iA\HLe!^QMX3049j5[3@`S8K9J\it&,/P<:mH_:j.r)"Q2)._Yl6DQ%(!!m":.ZM2P]Md]Qbr+E7UBWF53<Gb@u*6$29a2\Td6a),&t\SlX9'sGZ%XJ@3bM5UE9@L<r!0:\@X0kNF1]Nj=4FU`j70*T*fpR%lGh3'2P1JLp:nte[1>>\UsGRTCR<14]a7a6V5^Nc:e@Oj;n\o8-CW)S'Rd!iXiVW@q*gp72p]Ms+,^6.&N2AI#p$[i<%Y<@0^\Ui%`P\36:!<SL7k05c>#.bWb@g92o25A[<0;AHHqAQHXF,r*&b%'can%o+h)FNLH7itq8*n,Q;Ie&(NVE4NF\63AoMGAh3\`ph;kctZ%/n7mfLG]sO?<&a::H/W`HSX@.aa!5&,?NXQl>E[\`47*N%u@I/W_&U4^VphQ@=OhFqOA>p(Xn[).`=.;\fo1#=n1Q"0l]>;USV.G%]d_%WU\I(?X.^ODa,\e,>9BAGIb/VnS8LDt=qbpoZQ8R6H*86n,A[%_g"[226%&I_&bC-f*'<.cW4CD=akU,==c9_P<GUSDEGEZ]%^5q;q0+p/$pb_YJ1\o)i0L2F5g&#1r*4kMkQU&e0m9JIcigXI5gC_VJ;.GkQ@P.D])VK;P/.o(EQoead[H;YN]4QE3[d3B\m;<Nr%G^f!-Z8R[='X#:1rkgOZ-ePG"kMOaGJ3+6uWk$98.9f)O+>s\H5@^>(48(?kVX-Uuh*#[P#A_R2drg>b9dM1GOcQ%\S"!-Y;P=Sh%`Sp5k_b%"3Q#EqClfeu2U"fQ'<E#:V`j&+40jk?$._7Y+0V@[m7<[cT9<rD;:PsAlc-.pIRi"_]Nsb\-<Cj6?,.rC8j;so!SAf*r%Bcou1r^j+=`@pglitiY)5)eTtc*)#6nmm0\`=OUkL0^\Pi\c'p<QN8`J!_b&4;R$FWgXPWc/k7oA].1lR2tBP(qDWAHEGo&JMm<d%OTt=a*ekG3<A$i3'3OIUP;-;mSg38$7lp*IS)d"][?jmJls3)[[bjnN(c\D9]#[#+2:?W&T:4'XPR,Wu?)BK;1>RJgSI)f.QS%MW%dhsH(qt/Y*DEDn"I*p.JJ*7_Ak(o<t'2P5.o*n<.anI+l),i1idijcaNC65'+u[6J#sV(*5I/qhDpN%QZ&!7X*LjP6V.!YPc&Sis%\2feI)/AiDQ3>)H\C]n63@F&mlo*t-\_(_5/jL,qI]>"SL"(,`WXH%X&2/AnZ^p40>;Haib^/uSQ"\o3g6p+Ua`DnmLs:O@c+3Bf%F^"6/%C>:On-IJXS+6WVe]TBp2VH4\a)%(hRfHY,.&&E\;N'.5lp@h>a$I3rfjneM:<!TV2:S)U<cbjO0IP=3Y=.(9i)=p+N$=e_%!oI)r/PP8[lPl_6GjI$K6ab.beO<QZJ"2I@Xrnli=C*F$l\[`Aj=Wm?d:\MQW_;<eMeuHWagO;*N3]DE)1<JP:Dd#TSRRX!H"/QD%hfpGfjd,G_6g[icL`?U;GBJ)QlAR\9WVG3>Bq+SVghdh]WSfd5L9Ip.X3Qa)c7=eFW_T0fGI]c<qfPsi=)b54kN]>#D;@Oh/+&`S%h;XBl0rrd_2dOV;leI)_L?q=E%+nUO4dgHd9X,LDJ/R-DjkJolTsN#RcD)VVWE-Q0kD.bC=+a0+O+@`ONpafkU,s_g\j^Y5:*;;m%<XG8:=S^f1f?IXDC,]e3$6)q^0XoKT+UmN_Zj_s1IcrCO-S\[q3/H+!M*1(-\2hf+_-7uk_N5OkaAeL]QTLJ9oHRd#ChJBIrHDD_%(5@SD3#S3N4q?Q:-XiP97:[7Y33u+)o?)WZ<0E(ij42S?W0Wi)G'eQ%?)_^]/#OY1G9`I@(2Ssu[`qs+aBYb,^(mnb5D\]F%`U8c%ZrG:i,nuLT/dk/qhc$gYbmd=R=TlmT87r$[G[a)4l>CU[eDIe3D\g?->->_e0:R_</Bui2c$Uj*S=a5Q/tXo>X:+SjUWO[F_%(-f%hHJb=h7;e(KZ2fiGV\]-2E=-R:$r004XE!j*OSJ.FHF,0J*OU>*\/jC=7hQW$"IUAUO?X2?Z?\qQBS+T;<l.I+,d-$)L9G'4Vq[X%@$)[$_/M8u=o%[LAl8i"Z*7me."hFU?(rNuS?E506']^IV<'!F'Qa+='N4Xnb>K&5*]?MP1QijuCoStGS41rG45[7QZ1I3O3!0Y_%hUcE8eWm0#MOq"B\0h@6g$G-769")c"kjZ>Xu0:1EN'_Yn)DH^G0]d5TUhF&Z@2PMMhbXg,d3U,B(E*=H#,l?H7_okFs9EnYJTAf%ADBasGblOl[taC$DLfXp^!D)Lq,9$Q403[P3U97pI6-sNG(h1X*,:E%-+G+VglePKM+M2Kg6Kh&ot-amq,-u1rW]U81ljnho6d&6%Q9#84lNJ9/bp/g(R(r/0]hD_i(d.#[RmXHbVl?.ES.R<hYN^[O%*RC<4GJp:Lus-:GSr*7l((t?bj/7Q`^<9S4Wg?XEIr)r"rh]<%&ET*G0`hG=P1%N#b*LJs5#mo2+oUR/IEf&S!H`9$2-\=+Uq_R:]cajfCaEo>2E9DX-n5]7Sb*VbLZ^UBrDg0nHYO^+lV%21CF.\G%hhYJu`:@h,mE.#Tb-;85<:aVW$^L8[cpMJ>Nh^V`\MZD;iL(-nftE_/B77".?,@GB(B_4k[_gSB&]UkuH#g"GN632QaQBIc2#?[s%/,Bh3-?%*E7kB#$JQ#"00b<516k>;q.lEKVVh;t0$T!l!-s3H'H?tfq&D5#K]oG$fW]%kuL@6Kom6F<nf2bWF%u[Ak,CAtXlC!&D%/*iRD!9XYN^P?ime7Ut7?dP_eC;U[D);j&.ZU;gq+=Wu*lJWg4)fQet\J-cuB]0:'#)fUDh+*g"]m4gAPu8`fMn'2`O]cYW^*4_8%r"]D;)W=A4:JK5.!`,]'3#H5L5q$nQK$0l\PtlH'b"b_iY"<Tc#RHuV'jVX4U73F!7jsua>Ju-?_&1R10Q:1.>g+S.qEf)QHk;2(%KB1(#)WnAo[Nq6"l/`'u9K0_WM@k9"@]lp8;$"AW'=^/+h/)m#'YW;pJuI_ra1c$;]>/Al-F`F-+0t$:[g]@a,eEKUlINY!cq(`;%ccF;#&"t(;g?eJ=l0+k\5X(HWP*+!c^/3to"F;AE5h?&Mdj:,LIEWY:fkoEp_c\-TSO"VNBfUrCORHNKK]EfKqE5I,Kt4f'33\D6%rj9gmJd5f('BHoP1Z]l[_G9[AG1F]e:Y!$^"ir*[,]l\pqlVjKd7]Q[%UI5Co"8lH=/Z9D:a67h,c\=:C8IX8P6bYQ*/$$f/>&:E%JRfOdX!A8*^1;u8<jpl<c=PSG&T2'-o;O3kM^51*X2Ct>-@jm@9D'kTd\mVLEqS`>>5SRe+iB!sQ#4'&k?*"VEl^9`>:p-QR!LDG%q(h9i7aR:hN%Jo5SZMA2I-6.u3;+F*?ENqpF>3#spQIp:-g@uXn@]TAeuSXH=R*9k"2]bKnnf.73`?2?!`gtl5[o[P']ImPW!CeW%5um&i/4o,o&><1f9o)Aq+s?W9G6A(7S:dl5WBt;`,#f1'hdTR4kXhOs,.`-OM"6hY_jP9#W`%s.fY14o<WRW7S]fINdVANDic<;1%PpuE3Wgr68oFIaVfIbuiec]RLH6%hkS8GgJb"C`NI2,7sZg!D:XGOjdouVXSWkg+BbQ-1O]lS_h1k.9@&BWoUp&%,B*g)(0(-]gQ%s#"Y61\kM_46t`bj]fUOA.'/SjUdW9d"Y)tJMA_@99gWV8SoGW%?cUb!L(>u-s@fBc)G9#Pkf2m([-%[HZm:8rd$7&W]3R",#*CO%0I+(2=H2hD5)W8CT_!;R95KD).GAGbRkaN>i.HUf/09B4FUDc+l!E>X>thJQONo5i.H!M95j;g8)aY/jX^`TW]_T:5g*Xt_o1t]&%9J*S>)Ze&<>#65.GR2FB]r3#)AjEj,f<'f%Y07L0/rO:H3Q`_s%2biDCBqLJV`D9>2e\Z<<?-0^/595Lno!%`LJZa.h]gW(\dR#a%g78?3XiKib(LGIa%6)Kp*%Hh]k5h]]68D7T0*O8]!b31(*.bV.-Xno52so)7F%TJ;*&,+^]Uhs!E2/K6e%N.(Yj:/O#dPVHm(A%5%?cIYDD4`qqRN:)F(O;fk]UYI0e,A*n(YC5S_fY/RNiTK5O_4Hu*d1O&F4-uSY9oS??;@ra$QLa;q63%A1X24l4`1AUq`]D2[6g[a%;qGaf1AA\]-9G"dCf`65I3nfLmG2n:VNl`V8l5.V<E.\SE(,=^!a+LHJ8.au\4_K?ZUk[:YRZb!5\P;)jkLb^=Ji.RgHA67J:XPs%>.j+V)FmagAM[;-_]BnqJWT%KK?qN5j_reDZS4Kj\m/hp.!"B&@9h-]8to?`7/E/SD@"pul+C-dVS/V)e@&gE1P`q[K3Qs_B3BZU%e$nq#*[_m!)I((+GZJqlEhG;7:d=)G2*dL"LJmKuACq&TB>uZJ^I2IOP3=3%f96a@M.d2USZ,NQfh5dMVS%)rUq.q:r7L4Dam1Is%@AV0oW,LL57Uo^n[B"Vaf[uk<D-P\PfcC3jcoE(i8R@``YM"')SEa?6h&P[9k#"Vs5!S-b+_qPK"EC%Ub),F:21eI)$"5djnlR+j%VA#FAc=h?OhJK\0V6@Pt#1*cfbOX"_-m!sDqOoVlG(Vb0mSY_kp:Ap/a(<Ea](7QJrl+J8TDnKTLSnLNroIiVs39Fbs4\We?N:#h%Vn`,Lo'a?njZd($rnm1ZrpFu+5Q16#5QC9N^]+*$J%gF4p$%Neq>%MgcThI#bFeh2o3]94fDV?)5Q:NX07WrlYMYuPnu"_P&'1;Q%-NE>.huD.i4T-?`b^j7~>%AI9_PrivateDataEnd