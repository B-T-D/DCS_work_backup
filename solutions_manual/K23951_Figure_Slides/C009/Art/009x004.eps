%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 009x004.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 252 119
%%HiResBoundingBox: 0 0 251.9976 118.0630
%%CropBox: 0 0 251.9976 118.0630
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 5042 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD09FFA8A9A8A9FFFF84A984FD10FFCFCAFD07FFC9FFFFFF%C9CFC9FD57FFA87E7E7EA97E847EA97EFD0FFFA1FFCACAA7CFFFFFFFC3CA%FFA0C9C9C9CAFD56FF7EAF7EA9A8A9A8A9A8A9FD0EFFCFCAFFC9BCC9C9CF%C9FFC9FFFFC9C9CAC9FD57FFA8A8A9A8A97EA9A8A97EFD0FFFA1FFCAC2A1%FFFFFFCAC3CACAC9C9CAC9CAFD56FFA9A9FFFFA9FFFFFFA8FD10FFCACAFD%09FFCAFFFFFFCAFD5EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CA%A8FFA8FFA8FFA8FFA8FFFFFFCAFD5EFFFD1E7DFD62FF7DA8FD1BFF52A8FD%17FFCFAEAEA8FFAEAEA8CFFD1EFFA8FFFFA8FD04FFA8FFFFFFA8FFA8FD14%FF7DA8FD1BFF7DA8FD17FFA8AEA7AEFFAEA7AEA7FD1EFFA9FFFF5AFD04FF%A8A8FF7E7E84A9A9FD13FF7DA8FD1BFF52A8FD16FFA8AE83AE83FF83AEA8%AEA8FD1DFF7EFF7E7E7EA87EA9A8A9FF7EA87E7EA9FD13FF7DA8FD1BFF7D%A8FD17FFA7FFA8CFA8CFA8FFA7FD1EFFA9A9A97EA9A9FFFF7E7EFFA8A9A8%A9A9FD13FF7DA8FD1BFF76A8FD17FFAEAEFFFFAEFFFFA8AEFD1EFF7EA9FD%06FFA8FF7EFFFFFF7EFD14FF7DCAFD1BFF7DA8FD61FF7DA8FD1BFF52A8FD%1BFFA8527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D52A8FD19FF7DFD1CFF7DA8FD1BFF76%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFFD04A876FD19FF7DA8FD1BFF52A8FD1BFF7DA8FD29%FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF7DCAFD29FFA87DFD19FF7DA8FD1B%FF52A8FD1BFF7DA8FD29FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF7DFD2AFF%A87DFD19FF7DA8FD1BFF76A8FD1BFF7DA8FD29FFA87DFD19FF7DCAFD1BFF%7DA8FD1BFF7DA8FD29FFCA7DFD19FF7DA8FD1BFF52A8FD1BFF7DA8FD29FF%A87DFD19FF7DFD1CFF7DA8FD1BFF7DA8FD2AFF7DFD19FF7DA8FD1BFF52A8%FD1BFF7DA8FD29FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF7DCAFD29FFA87D%FD19FF7DA8FD1BFF52A8FD0DFFCFC9FD0CFF7DA8FD29FFA87DFD19FF7DA8%FD1BFF7DA8FD0DFFC9B5BBC9CAFD09FF7DFD2AFFA87DFD19FF7DA8FD1BFF%76A8FD05FFC39AC29AC29AC29ABC93B58DB599C3CAFD06FF7DA8FD29FFA8%7DFD19FF7DCAFD1BFF7DA8FD05FF93B5B5B593B5B5B593B5B5B58DB5B5C9%FD06FF7DA8FD29FFCA7DFD19FF7DA8FD1BFF52A8FD06FFCAFFCAFFCAFFFF%C98CB593C2A7FD08FF7DA8FD29FFA87DFD19FF7DFD1CFF7DA8FD0DFFC9C2%C9FD0BFF7DA8FD2AFF7DFD19FF7DA8FD1BFF52A8FD1BFF7DA8FD29FFA87D%FD19FF7DA8FD1BFF7DA8FD1BFF7DCAFD29FFA87DFD19FF7DA8FD1BFF52A8%FD1BFF7DA8FD29FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF7DFD2AFFA87DFD%19FF7DA8FD1BFF76A8FD1BFF7DA8FD29FFA87DFD19FF7DCAFD1BFF7DA8FD%1BFF7DA8FD29FFCA7DFD19FF7DA8FD1BFF52A8FD1BFF7DA8FD29FFA87DFD%19FF7DFD1CFF7DA8FD1BFF7DA8FD2AFF7DFD19FF7DA8FD1BFF52A8FD1BFF%7DA8FD29FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF7DCAFD29FFA87DFD19FF%7DA8FD1BFF52A8FD1BFF7DA8FD29FFA87DFD19FF7DA8FD1BFF7DA8FD1BFF%52FD2B7D52FD19FF7DA8FD1BFF76A8FD1CFFFD2BA8FD1AFF7DCAFD1BFF7D%A8FD4FFFCAFD11FF7DA8FD1BFF52A8FD12FF7DA87DA8A8FD07FFA87DA884%A8FD18FFC9CACAA0FFFFFFCAC3CAFD08FFCAA1CFC3FD10FF7DFD1CFF7DA8%FD12FFA8A8A87DFFFFA87EA8A8FFA8FF7DFF7DFD19FFC3FFC3C3FFFFCAFF%C3CFFFFFC9CAC9CFCAFFCACAFFC9FD10FF7DA8FD1BFF52A8FD12FF7DA87D%7EA8FF7D527DA87DA8A87DFFA8A8FD17FFCAC9CFC3A0CAC3C9CAC3C9FFCA%C2C2C9A1C9C9CAA0FFC3FD10FF7DFD1CFF7DA8FD12FFA8A8FFA8A8A8FF7D%FD05FF7DFF7EFD19FFC3FFCACAFD04FFC3CFC9FFC9C9FD04FFCAC9CAC9FD%10FF7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A852A8FD12FFA8A8FFFFA8FD09FFA8A8FD19FFCAA8FD08FFCFFD09FFCAA8%FD10FFA87D7DA87DA27DA87DA17DA87DA17DA87DA17DA87DA17DA87DA17D%A87DA8FDDAFFA8CFA8FFFFFFA8FD04FFAEFFAEFD0CFFA8FD07FF7EAFFFFF%A8A8FD04FF7DFFA8FD50FFA7AE83AEA8FFA783FFFFA8FF83FFA8AEFD0AFF%7DFD05A8AFFFFF847DFFFFA852FFA8FFFF7DA8A8A8FD4FFFAEA8AEA8FFFF%AE83CFA8CFFFAEAEFFA8FD0AFFA8FFA8527D7DA9A8FFA8A8FFFF7D7DA8FF%A8FF7DFFA8A8FD4FFFA7CFA8AEA8AEA8AEAEFFFFFF83AEA8AEFD0AFF7DA8%FF7D7DFD04FFA87DA87DA87DFD04FF7DA8A8A8FD50FFA8FFFFFFAEFD08FF%AEFD0CFFA8FD09FFA8FD09FFA8FD6CFFA8FD60FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:05:14+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:05:14+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:05:14+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>120</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qlGreZLbTZ5IpInkE&#xA;EUUsxWlQbiX0LdFB6tJIGG5AFN8thiMh+Om5YmVLT5otP0ZHeCGQzSXJsVs6p6n1pZGiMZPLgPiQ&#xA;78qU3w+CeKvK/gvEv0nzFBqNwkSRNEk0H1i3Z/tMEf0pkZf2XiegahI3G+CeIxCQbTbKkuxV2Koa&#xA;7vVgmtoAvOa6k4RrWgAVS7sTvsqr99B3rkJTogdS248XECekR/Yu/SFhzKfWYuav6ZXmtQ9VHGle&#xA;tZFFPceOHjj3o8GdXR+Xv/UfkVup366fYT3rRPNHboZJEj48uKirEc2QbDfrgyT4Yk9ycGLxJiNg&#xA;X3qWp6tBp/oq6PNLcMwihi48j6aGRz8RVaKqnvkcmUQrzZYNOcl0QAOp8zQb0/VIr15UQU4LHNE1&#xA;ah4ZlrHIKgdeLCniMOPJxfjoVzYDAAnzHuI5j7vmjcsaHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FUi1XQZL7Upy9fql5bW6NKpAaGexnaeBqH7QZpTX/V98uhk4R5gn7RTEjdS&#xA;/wALzCRYlnH1ZJTfhyqlvr7XDTFwtAfToxUrzrxoAa1Yy8Yfo+FLwq2k6A1hfwFCfqljbSwQs5Bk&#xA;lkupVmnkanasa0967dCYzy8Q8yfu5KAnmUsnYq7FUDf2s7X1hdwrzNu7JMlQD6Uq8SRXurBT8q98&#xA;qnE8QI6fpcjFkAhKJ6jb3j8H4pZbeTbOLUp7ySZpYp3aT6uVVVDO7Sbkbndh/wAAn8u9MdIBIn8f&#xA;j9QcqfaUjjEQKIFX8K/H9aXfsNv9Bt57C6tbZvqr3UTQPNQyEI4o1FZqVplk8AMSBtbRi1cozjKX&#xA;q4TdcuSy60m9vLgPPOF+rgfVpVXcmSJo56rX7LcgVqdmHcYJYpSO55cvluyhqIQjQHPn8CDH9vkq&#xA;aVpZs7qZwOEKwW9lbITVjFa8yHam1SZT9A+jJYsfCT3UAPgw1GfjiB14pSPvlX6kzy5xXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqx78xGZfy/8AM7KSrDSb4hgaEEWz7gjF&#xA;VD/lWHkH/qywf8P/AM1Yq7/lWHkH/qywf8P/AM1Yq7/lWHkH/qywf8P/AM1Yq7/lWHkH/qywf8P/&#xA;AM1Yq7/lWHkH/qywf8P/AM1Yq7/lWHkH/qywf8P/AM1Yq7/lWHkH/qywf8P/AM1Yqv8Ay8git/Lb&#xA;20I4wW+patBAlSQscWqXKRoK9lVQBirJcVdirsVdirsVSqfU7sXjW8IUFrlbSMuCVU/VzctI1CCd&#xA;vhAqN8olkN0O+vstqMzdedfZajPrtydPsZ4I0WW7heciSpVfTi9QrtxO/QH6d8jLMeEEdRf2IOQ0&#xA;COqM02+kuJZUfoUiuITtURzg0U07qyN9GWY52fkfmzhK0flrN2KuxV2KuxV2KuxViWqecLmy8sJq&#xA;6qpmvLilnEY2kCW6uS7uqsh+G3ieRiWAB70zKhgBnw9w/H27MDKhadDzP5b9VYTqlqk7EAQPNGko&#xA;ZuimNiHDb9CK5T4M+4suIISHzDdQ+X9W1S9iR5dLN5yig5AOtryIA5cjVguTOIGYiP4q+1HFtaHt&#xA;/MWpLfRW18sSyRXq2F2sQbgTParcxSIW6FWPplamv2vAYTiFWO6/tpeJk2Y7J2KuxV2Kse/Mb/yX&#xA;vmj/ALZN9/1DPirIcVdirsVdirsVdirsVY95E/44lz/21tZ/7q11irIcVdirsVdirsVQZ02FriaR&#xA;zySZll47grKiiPmrAgiqAD/byvwxZ82HBuk+qar5H0i7NnrGr2FhK0cckNlc3UVsywhWiDIjOjcG&#xA;4svgaU7YPCivhhSt/PX5dwzTzf4o0gvMVG19bAKiCiIB6napPzOSjGiSkRpEf8rG/L3/AKmjSf8A&#xA;pOtv+a8myd/ysb8vf+po0n/pOtv+a8Vd/wArG/L3/qaNJ/6Trb/mvFXf8rG/L3/qaNJ/6Trb/mvF&#xA;Xf8AKxvy9/6mjSf+k62/5rxV3/Kxvy9/6mjSf+k62/5rxV3/ACsb8vf+po0n/pOtv+a8VSJNY/Km&#xA;S0NnfeY9HureP6xHaA6hCpjt7l1kaOqyjdSoUMN+Ip3Nbjnldjbl9jHhTuP8wvy5ijSKPzLpCRoA&#xA;qIt9bABQKAAc8pJtkp6Rp/lPVbVpNB1JL/TxdyvqHoXj30UskkDLJDITLKq1E6uV+Rp0OXeMevcx&#xA;4UxXy5ZRT2pgqkFvMbp0JZ3knEXoRlncsSqR7U9l8Nx4po37v0p4U2ypLsVdirsVY9+Y3/kvfNH/&#xA;AGyb7/qGfFWQ4q7FXYq7FXYq7FXYqx7yJ/xxLn/traz/AN1a6xVkOKuxV2KuxV2KuxVj1j/5MLWv&#xA;+2TpP/UTqOKshxV2KuxV2KuxV2KuxV2KuxV2Kse8r/8AHb83/wDbWi/7pNhirIcVdirsVdirsVY9&#xA;+Y3/AJL3zR/2yb7/AKhnxVkOKuxV2KuxV2KuxV2Kse8if8cS5/7a2s/91a6xVkOKuxV2KuxV2Kux&#xA;Vj1j/wCTC1r/ALZOk/8AUTqOKshxV2KuxV2KuxV2KuxV2KuxV2Kse8r/APHb83/9taL/ALpNhirI&#xA;cVdirsVdirsVY9+Y3/kvfNH/AGyb7/qGfFWQ4q7FXYq7FXYq7FXYqx7yJ/xxLn/traz/AN1a6xVk&#xA;OKuxVp3REZ3YKiglmJoAB1JOJNJAvYNRyRyxrJGweNxVXUggg9wRgBB3CyiQaPNdhQ7FWPWP/kwt&#xA;a/7ZOk/9ROo4qyHFXYq7FXYq7FXYq7FXYq7FXYqx7yv/AMdvzf8A9taL/uk2GKshxV2KuxV2KuxV&#xA;j35jf+S980f9sm+/6hnxVkOKuxV2KuxV2KuxV2Kse8if8cS5/wC2trP/AHVrrFUw8xS63Fot1Joc&#xA;ST6qqj6rFIVCs3IVryZB9mvfK8xlwnh+pydHHEcsRlNY+v43YB+lfz6/6s1n/wAHB/2UZhcWp7vu&#xA;ei/L9kf6pP8A2X/EIbU9U/PFtNu1u9ItEtTDIJ2DwVEfE8iKTntkMktRwmxtXk24MHZPHHhyS4rF&#xA;fVz/ANK8u8s635tsLtIvL9xcid2BFtAGkVz7xUZW+kZr8c5RPpO71eu0umyRvMI13nb7Xv3kfUfP&#xA;93AD5m0+3to+IKTByk7Gn7UI5r891p4ZudNPKfrG32/j5PnnamHRwP7icpHu6fPb9PvZZmW6dj1j&#xA;/wCTC1r/ALZOk/8AUTqOKshxV2KuxV2KuxV2KuxV2KuxV2Kse8r/APHb83/9taL/ALpNhirIcVdi&#xA;rsVdirsVY9+Y3/kvfNH/AGyb7/qGfFWQ4q7FXYq7FXYq7FXYqx7yJ/xxLn/traz/AN1a6xVkOKux&#xA;VZPDFPDJBKvOKVSkinurChH3YCARRZRkYkEcwhtM0bSdKg9DTbSK0i2qsSBa0/mI3Y+5yMMcYfSK&#xA;bc+pyZTc5GR80Zk2h2Ksesf/ACYWtf8AbJ0n/qJ1HFWQ4q7FXYq7FXYq7FXYq7FXYq7FWPeV/wDj&#xA;t+b/APtrRf8AdJsMVZDirsVdirsVdirHvzG/8l75o/7ZN9/1DPirIcVdirsVdirsVdirsVY95E/4&#xA;4lz/ANtbWf8AurXWKshxV2KuxV2KuxV2Ksesf/Jha1/2ydJ/6idRxVkOKuxV2KuxV2KuxV2KuxV2&#xA;KuxVj3lf/jt+b/8AtrRf90mwxVkOKuxV2KuxV2Kse/Mb/wAl75o/7ZN9/wBQz4qyHFXYq7FXYq7F&#xA;XYq7FWPeRP8AjiXP/bW1n/urXWKshxV2KuxV2KuxV2Ksesf/ACYWtf8AbJ0n/qJ1HFWQ4q7FXYq7&#xA;FXYq7FXYq7FXYq7FWPeV/wDjt+b/APtrRf8AdJsMVZDirsVdirsVdirHvzG/8l75o/7ZN9/1DPir&#xA;IcVdirsVdirsVdirsVY95E/44lz/ANtbWf8AurXWKshxV2KuxV2KpVP5p0G3r692kSiV4A7V4loS&#xA;Flao/YidgjufhVtia4qmuKpLqflDRdS1JtSnN5FevDHbSS2l/e2YaKFpHjVltpoVbi0z0JFd8VSS&#xA;TSfJafXP9yOrN+jpEiv+Osax+5MhoGf/AEn7Ir8TDYCpPQ4qmn+BNE/5adW/7jOrf9lWKu/wJon/&#xA;AC06t/3GdW/7KsVd/gTRP+WnVv8AuM6t/wBlWKu/wJon/LTq3/cZ1b/sqxV3+BNE/wCWnVv+4zq3&#xA;/ZVirv8AAmif8tOrf9xnVv8AsqxVQPlHy568sP1vVy0CCSYjWdWIUNWgP+ldSATT+oyHGLI7mzwj&#xA;QPedm7Pyf5cvLSG7t7vV2guEWWJjrGsISjiqni1yrCo8RhjISFjkjJjMJGMuY2Ww+U/LE13PZxX2&#xA;rNc2wRp4/wBM6vVRJy4He5pvwbp4YiYJIHMJlilGIkR6ZXXw5/enGieX9M0WO5SwE3+mTfWbmS5u&#xA;Li7keX00h5GS5klfaOFFArTbJNaOmmjhiaWQ8Y0FWO52HywEgCyyjEyNBQt9Ts7iSFInLfWYRc27&#xA;0IV4zSpUnw5LUe4yMcgJFdRbOeCUQSf4TR8j+L+SKybU7FXYqx38xtvy980f9si//wCoZ8VTP9P6&#xA;F/1crX/kdH/zVirv0/oX/Vytf+R0f/NWKu/T+hf9XK1/5HR/81Yq79P6F/1crX/kdH/zVirv0/oX&#xA;/Vytf+R0f/NWKu/T+hf9XK1/5HR/81Yq79P6F/1crX/kdH/zViqV+QJI5NAnkjYPG+q6yyOpBBB1&#xA;W6III6g4qyPFXYq7FXYq88ufJt/qdjdWqOIbgWut6Lcs5ZKR6tcRzLdRni/JvTQNQdS1CarhVM/N&#xA;Wk+aNfsYW02QaZd2d1dKnOeaIPHwlgilrGp3+IOFZCK9yv2lUdYeVb+1tlji1u8talneKAW0kYLM&#xA;SArXME8lEWiD4t6VoCTgVK9V0TXRH5u9WKGSLXLVLPTfSleSZ5DA1uDMhhjSMEvyJDEAV7YVZsBQ&#xA;AE1I7nv92BXYq7FXYq7FXYqx+6066uZNX09T6S6jNDLJNVlratDFDMqMAf3lIWHanIHMWUCTKPeR&#xA;8qAP3Oxx5oxGOfPgBFf0rJF+W499UqaToOpWumW9tJqUsEkQfklsImj+N2egM8Ur0XlxG42Aw4sM&#xA;oxA4q91fpDHUauE8hkIA333fKv4SAta21mz1XUNSWKO6jeytreBfUb15JLZ5WJdViCLz+sHodqeB&#xA;2JE4kmr2H2fDzSJ4p44Y7MTxyJ22AkI/0r24ft+aF75d1e512ac3QGmz0DKJZRIoEQjoqU4fty78&#xA;urK3VN654JSmTfpP4/X+A2YtZjjiA4fWPIVzvnz6R6dCP4tjZLHUIGMq6hPdsoPC3n+rxxsabBmi&#xA;gDj6MvEJDeyfl+pwzlhLbhEfMcRP2ypLtNsL6E6HaXCIJtNtmF1JExePZBCiqzLGTz3b7O3H5Vqh&#xA;AgwB/hH7HJzZYHxJRO05bXz52ep5cviyDMp1yhdXQgMKBeck8gijWtBXiXYk+yIxyMpVXmxJpR03&#xA;VoL+vpI6AxxzxlwPjim5em4oT14HY75HHlEuXv8AmiGQS5LYLyy1J9QsXSOaKBvq88TFXDq6DkGQ&#xA;j7PxFd+tDjDIJEjuWMwSR3JbceVfJkNxawny7YN9ado1kFpbcVKo0nxVUHcIaUGGUqIHekyogd7r&#xA;Pyp5NuFkr5f05JYZGilT6rAaMNxvwGxUhh7HDCVpjK0R/gryb/1YdO/6RIP+aMkl3+CvJv8A1YdO&#xA;/wCkSD/mjFUtg0fyBIl3PLoml29la3BtBdTW9siPIrCN6VUAUlPp7ndgfaqqKtvLP5f3TSLa6TpM&#xA;7RHjKIre2coakUbippuD1xVCponkhvMEminyzZpMlsLtbhrS19J0L8CFpV6hv5lGKo+PV9H03zBZ&#xA;eVbWKC2aW1luoYI2SIIqOAFSEAV51dvh/lauKorzLrkWg6Bf61Nby3UGnQSXU8MHp+p6cSl3K+o8&#xA;a/CoJ6/LFVWPUgdXm02SPg6wpcQSVqJIySj7UHFkYCo8GU16gKo3FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FUJf28kktpPGvN7WbmUrQlXRo2oTttz5fRlc42QR0LCQ5HuQ1vpEtmY&#xA;fqso+FYrYlwPhtoA5VQB1ar0J2/DeEcRjVeQ+AYjHw8vwGrHy7aWrOxd5vURFYNQfEnIs9Voau7s&#xA;x36nGGARWOIBXm0uslq1tIIFtpTMV48+ZKGOlSdhxc5I4+VbUWRhypUsIJY/rEso4yXMplKbHiAq&#xA;xqNu/FBX3yUIkWT1KYjn5orJsnYqxefyk19pl5pF25jgXUG1CxukCMf3s5uiCrV3SV3XcUK061YY&#xA;qiNF8k6PpunRWjhrp41VWnclWbgixrspGwVB9NSSWJJVaufLd9Fqk2q6bdrFIunvY2toyAqGqZEc&#xA;ysWNfUp1UinbFVN/JFvca5HrV1cu916jSzRqqhGBgFukYJ5MqRqZCKHq7eOKq2ueTrDUdB1PSbdj&#xA;ZHVLWWymuFrIyxTrwk4q7UqVrQ9sVV7XTb9teW/vHV1tLP6pDIo4mV5nWSeTgGbiv7qMAda8u1Kq&#xA;pxirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F0C738E30B2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F0C738E30B2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F0C738E30B2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:05:14+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -118.063 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 118.063 li
251.998 118.063 li
251.998 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 118.063 mo
251.998 118.063 li
251.998 0 li
0 0 li
0 118.063 li
cp
clp
0 118.063 mo
251.998 118.063 li
251.998 .000488281 li
0 .000488281 li
0 118.063 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.79428 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
22.8926 16.6484 mo
80.0811 16.6484 li
80.0811 102.431 li
22.8926 102.431 li
22.8926 16.6484 li
cp
.746 .676 .668 .898 cmyk
@
137.269 30.9458 mo
223.051 30.9458 li
223.051 88.1338 li
137.269 88.1338 li
137.269 30.9458 li
cp
@
13.0889 13.4355 mo
13.0889 13.4072 13.0889 13.3882 12.9268 13.2261 cv
11.9736 12.2632 11.4399 10.6904 11.4399 8.74609 cv
11.4399 6.89746 11.8882 5.30566 12.9937 4.18066 cv
13.0889 4.09473 13.0889 4.07617 13.0889 4.04736 cv
13.0889 3.99023 13.0415 3.97119 13.0034 3.97119 cv
12.8794 3.97119 12.0977 4.65723 11.6309 5.59131 cv
11.1445 6.5542 10.9253 7.57373 10.9253 8.74609 cv
10.9253 9.59473 11.0586 10.729 11.5542 11.7485 cv
12.1167 12.8926 12.8984 13.5117 13.0034 13.5117 cv
13.0415 13.5117 13.0889 13.4927 13.0889 13.4355 cv
cp
.855 .73 0 0 cmyk
f
17.8926 8.06934 mo
17.8926 7.27832 17.8452 6.50635 17.502 5.78223 cv
17.1113 4.99072 16.4248 4.78125 15.958 4.78125 cv
15.4053 4.78125 14.7285 5.05762 14.3755 5.84863 cv
14.1089 6.44922 14.0137 7.04004 14.0137 8.06934 cv
14.0137 8.99414 14.0801 9.68994 14.4233 10.3667 cv
14.7949 11.0908 15.4526 11.3198 15.9482 11.3198 cv
16.7778 11.3198 17.2544 10.8242 17.5308 10.2715 cv
17.8735 9.55664 17.8926 8.62256 17.8926 8.06934 cv
cp
17.1685 7.95508 mo
17.1685 8.59375 17.1685 9.31836 17.0635 9.89941 cv
16.8823 10.9482 16.2817 11.1289 15.9482 11.1289 cv
15.6436 11.1289 15.0239 10.9575 14.8428 9.91846 cv
14.7378 9.34668 14.7378 8.62256 14.7378 7.95508 cv
14.7378 7.17383 14.7378 6.46826 14.8901 5.90576 cv
15.0522 5.26758 15.5386 4.97168 15.9482 4.97168 cv
16.3105 4.97168 16.8633 5.19092 17.0444 6.01074 cv
17.1685 6.5542 17.1685 7.30713 17.1685 7.95508 cv
cp
f
20.1519 11.1577 mo
20.1519 10.5669 19.9517 10.1953 19.5796 10.1953 cv
19.3032 10.1953 19.1226 10.4048 19.1226 10.6523 cv
19.1226 10.9102 19.3032 11.1196 19.5894 11.1196 cv
19.7324 11.1196 19.8374 11.0527 19.8945 11.0054 cv
19.9229 10.9766 19.9419 10.9766 19.9419 10.9766 cv
19.9419 10.9766 19.9609 11.1099 19.9609 11.1577 cv
19.9609 11.7676 19.7134 12.3398 19.2939 12.7778 cv
19.2559 12.8066 19.2461 12.8257 19.2461 12.8638 cv
19.2461 12.9116 19.2939 12.959 19.3413 12.959 cv
19.4272 12.959 20.1519 12.2539 20.1519 11.1577 cv
cp
f
25.1558 8.06934 mo
25.1558 7.27832 25.1079 6.50635 24.7646 5.78223 cv
24.374 4.99072 23.688 4.78125 23.2207 4.78125 cv
22.668 4.78125 21.9912 5.05762 21.6387 5.84863 cv
21.3716 6.44922 21.2764 7.04004 21.2764 8.06934 cv
21.2764 8.99414 21.3433 9.68994 21.686 10.3667 cv
22.0581 11.0908 22.7158 11.3198 23.2114 11.3198 cv
24.0405 11.3198 24.5171 10.8242 24.7935 10.2715 cv
25.1367 9.55664 25.1558 8.62256 25.1558 8.06934 cv
cp
24.4312 7.95508 mo
24.4312 8.59375 24.4312 9.31836 24.3267 9.89941 cv
24.1455 10.9482 23.5449 11.1289 23.2114 11.1289 cv
22.9063 11.1289 22.2866 10.9575 22.1055 9.91846 cv
22.001 9.34668 22.001 8.62256 22.001 7.95508 cv
22.001 7.17383 22.001 6.46826 22.1533 5.90576 cv
22.3154 5.26758 22.8013 4.97168 23.2114 4.97168 cv
23.5732 4.97168 24.1265 5.19092 24.3071 6.01074 cv
24.4312 6.5542 24.4312 7.30713 24.4312 7.95508 cv
cp
f
28.2437 8.74609 mo
28.2437 8.02197 28.1484 6.83984 27.6147 5.73438 cv
27.0522 4.59082 26.271 3.97119 26.166 3.97119 cv
26.1279 3.97119 26.0801 3.99023 26.0801 4.04736 cv
26.0801 4.07617 26.0801 4.09473 26.2422 4.25684 cv
27.1953 5.21973 27.729 6.79248 27.729 8.73682 cv
27.729 10.5859 27.2813 12.1777 26.1753 13.3022 cv
26.0801 13.3882 26.0801 13.4072 26.0801 13.4355 cv
26.0801 13.4927 26.1279 13.5117 26.166 13.5117 cv
26.29 13.5117 27.0713 12.8257 27.5386 11.8916 cv
28.0244 10.9194 28.2437 9.89014 28.2437 8.74609 cv
cp
f
130.172 27.5039 mo
130.172 27.4756 130.172 27.4565 130.01 27.2944 cv
129.057 26.3315 128.523 24.7588 128.523 22.8145 cv
128.523 20.9653 128.971 19.3735 130.077 18.249 cv
130.172 18.1631 130.172 18.144 130.172 18.1157 cv
130.172 18.0586 130.125 18.0396 130.086 18.0396 cv
129.962 18.0396 129.181 18.7256 128.714 19.6597 cv
128.228 20.6226 128.008 21.6421 128.008 22.8145 cv
128.008 23.6631 128.142 24.7969 128.638 25.8169 cv
129.2 26.9609 129.981 27.5801 130.086 27.5801 cv
130.125 27.5801 130.172 27.561 130.172 27.5039 cv
cp
.66 0 1 0 cmyk
f
134.976 22.1377 mo
134.976 21.3467 134.928 20.5747 134.585 19.8501 cv
134.195 19.0591 133.508 18.8496 133.041 18.8496 cv
132.488 18.8496 131.812 19.126 131.459 19.917 cv
131.192 20.5176 131.097 21.1084 131.097 22.1377 cv
131.097 23.0625 131.164 23.7583 131.506 24.4351 cv
131.878 25.1592 132.536 25.3882 133.032 25.3882 cv
133.861 25.3882 134.337 24.8926 134.614 24.3394 cv
134.957 23.6245 134.976 22.6904 134.976 22.1377 cv
cp
134.251 22.0234 mo
134.251 22.6621 134.251 23.3862 134.147 23.9678 cv
133.965 25.0161 133.365 25.1973 133.032 25.1973 cv
132.727 25.1973 132.107 25.0259 131.926 23.9868 cv
131.821 23.415 131.821 22.6904 131.821 22.0234 cv
131.821 21.2417 131.821 20.5366 131.974 19.9741 cv
132.136 19.3354 132.622 19.04 133.032 19.04 cv
133.394 19.04 133.947 19.2593 134.127 20.0791 cv
134.251 20.6226 134.251 21.3755 134.251 22.0234 cv
cp
f
137.235 25.2261 mo
137.235 24.6353 137.035 24.2632 136.663 24.2632 cv
136.386 24.2632 136.206 24.4731 136.206 24.7207 cv
136.206 24.978 136.386 25.188 136.672 25.188 cv
136.816 25.188 136.92 25.1211 136.978 25.0732 cv
137.006 25.0449 137.025 25.0449 137.025 25.0449 cv
137.025 25.0449 137.044 25.1782 137.044 25.2261 cv
137.044 25.8359 136.796 26.4077 136.377 26.8462 cv
136.339 26.875 136.33 26.894 136.33 26.9321 cv
136.33 26.98 136.377 27.0273 136.424 27.0273 cv
136.51 27.0273 137.235 26.3223 137.235 25.2261 cv
cp
f
142.239 22.1377 mo
142.239 21.3467 142.191 20.5747 141.848 19.8501 cv
141.458 19.0591 140.771 18.8496 140.304 18.8496 cv
139.751 18.8496 139.075 19.126 138.722 19.917 cv
138.455 20.5176 138.36 21.1084 138.36 22.1377 cv
138.36 23.0625 138.426 23.7583 138.769 24.4351 cv
139.141 25.1592 139.799 25.3882 140.294 25.3882 cv
141.124 25.3882 141.6 24.8926 141.876 24.3394 cv
142.22 23.6245 142.239 22.6904 142.239 22.1377 cv
cp
141.514 22.0234 mo
141.514 22.6621 141.514 23.3862 141.41 23.9678 cv
141.229 25.0161 140.628 25.1973 140.294 25.1973 cv
139.99 25.1973 139.37 25.0259 139.189 23.9868 cv
139.084 23.415 139.084 22.6904 139.084 22.0234 cv
139.084 21.2417 139.084 20.5366 139.237 19.9741 cv
139.399 19.3354 139.884 19.04 140.294 19.04 cv
140.657 19.04 141.209 19.2593 141.39 20.0791 cv
141.514 20.6226 141.514 21.3755 141.514 22.0234 cv
cp
f
145.327 22.8145 mo
145.327 22.0903 145.232 20.9082 144.698 19.8027 cv
144.135 18.6587 143.354 18.0396 143.25 18.0396 cv
143.211 18.0396 143.164 18.0586 143.164 18.1157 cv
143.164 18.144 143.164 18.1631 143.326 18.3252 cv
144.279 19.2881 144.812 20.8608 144.812 22.8052 cv
144.812 24.6543 144.365 26.2461 143.258 27.3706 cv
143.164 27.4565 143.164 27.4756 143.164 27.5039 cv
143.164 27.561 143.211 27.5801 143.25 27.5801 cv
143.374 27.5801 144.155 26.894 144.622 25.96 cv
145.108 24.9878 145.327 23.9585 145.327 22.8145 cv
cp
f
61.8608 13.5693 mo
61.8608 13.5405 61.8608 13.5215 61.6987 13.3594 cv
60.7456 12.397 60.2119 10.8242 60.2119 8.87988 cv
60.2119 7.03076 60.6602 5.43896 61.7656 4.31445 cv
61.8608 4.22852 61.8608 4.20947 61.8608 4.18066 cv
61.8608 4.12354 61.8135 4.10449 61.7749 4.10449 cv
61.6514 4.10449 60.8696 4.79102 60.4028 5.72461 cv
59.9165 6.6875 59.6973 7.70752 59.6973 8.87988 cv
59.6973 9.72803 59.8306 10.8623 60.3262 11.8818 cv
60.8887 13.0259 61.6704 13.6455 61.7749 13.6455 cv
61.8135 13.6455 61.8608 13.6265 61.8608 13.5693 cv
cp
0 .938 1 0 cmyk
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
68.6201 10.0264 mo
68.8413 9.63574 69.5215 8.23486 69.6357 7.6626 cv
69.7334 7.17676 69.5674 7.05273 69.396 7.05273 cv
69.2148 7.05273 68.9399 7.23389 68.8965 7.45313 cv
68.8794 7.53906 68.8887 7.58643 68.9556 7.68164 cv
69.123 7.93945 69.0811 8.29199 69.0508 8.44434 cv
68.9766 8.81592 68.4673 9.83594 68.2539 10.1885 cv
67.9507 10.7031 67.5542 11.1606 67.0684 11.1606 cv
66.582 11.1606 66.5327 10.7412 66.6089 10.3604 cv
66.6621 10.0933 66.7803 9.83594 67.0034 9.34033 cv
67.5698 8.08203 li
67.6743 7.84375 67.8633 7.42432 67.8726 7.37695 cv
67.9014 7.23389 67.8042 7.14795 67.6802 7.14795 cv
67.4131 7.14795 67.2988 7.38623 67.2339 7.52002 cv
66.2866 9.63574 li
66.1626 9.92188 66.1074 10.1504 66.0923 10.2266 cv
66.0654 10.3604 65.6099 11.1606 65.0952 11.1606 cv
64.5425 11.1606 64.5386 10.6558 64.6035 10.3315 cv
64.6875 9.91211 64.9619 9.34961 65.4517 8.47314 cv
65.6729 8.08203 65.73 7.98682 65.7681 7.79639 cv
65.8442 7.41504 65.688 7.05273 65.2212 7.05273 cv
64.3535 7.05273 63.7495 8.4541 63.7378 8.51123 cv
63.7207 8.59668 63.8066 8.59668 63.854 8.59668 cv
63.9688 8.59668 63.9839 8.56836 64.0488 8.43457 cv
64.1821 8.14893 64.6108 7.24316 65.1641 7.24316 cv
65.2783 7.24316 65.3735 7.29102 65.3276 7.52002 cv
65.2803 7.7583 65.1353 8.00586 64.8247 8.55859 cv
64.3384 9.4165 64.144 9.86475 64.0752 10.2075 cv
63.8887 11.1416 64.5518 11.3516 65.0381 11.3516 cv
65.2856 11.3516 65.6216 11.2944 66.0791 10.7222 cv
66.1743 11.2944 66.7441 11.3516 67.0015 11.3516 cv
67.7261 11.3516 68.2251 10.7129 68.6201 10.0264 cv
cp
f
grestore
75.6084 8.87305 mo
75.6084 8.69238 75.4365 8.69238 75.3125 8.69238 cv
70.2134 8.69238 li
70.0703 8.69238 69.9082 8.69238 69.9082 8.86377 cv
69.9082 9.04492 70.061 9.04492 70.2134 9.04492 cv
75.3125 9.04492 li
75.4272 9.04492 75.6084 9.04492 75.6084 8.87305 cv
cp
f
79.6494 11.2559 mo
79.6494 10.9795 li
79.354 10.9795 li
78.5151 10.9795 78.4868 10.8652 78.4868 10.5225 cv
78.4868 5.14648 li
78.4868 4.92725 78.4868 4.91797 78.2959 4.91797 cv
78.0674 5.17529 77.5908 5.52783 76.6089 5.52783 cv
76.6089 5.8042 li
76.8281 5.8042 77.3047 5.8042 77.8291 5.55664 cv
77.8291 10.5225 li
77.8291 10.8652 77.8003 10.9795 76.9614 10.9795 cv
76.666 10.9795 li
76.666 11.2559 li
76.9233 11.2373 77.8481 11.2373 78.1626 11.2373 cv
78.4771 11.2373 79.3921 11.2373 79.6494 11.2559 cv
cp
f
82.2705 11.2944 mo
82.2705 10.7031 82.0703 10.3315 81.6987 10.3315 cv
81.4224 10.3315 81.2412 10.541 81.2412 10.7891 cv
81.2412 11.0464 81.4224 11.2559 81.708 11.2559 cv
81.8511 11.2559 81.9561 11.1895 82.0132 11.1416 cv
82.042 11.1133 82.061 11.1133 82.061 11.1133 cv
82.061 11.1133 82.0801 11.2466 82.0801 11.2944 cv
82.0801 11.9043 81.832 12.4761 81.4126 12.9146 cv
81.3745 12.9434 81.3652 12.9624 81.3652 13.0005 cv
81.3652 13.0479 81.4126 13.0957 81.4604 13.0957 cv
81.5464 13.0957 82.2705 12.3901 82.2705 11.2944 cv
cp
f
87.2744 8.20605 mo
87.2744 7.41504 87.2271 6.64307 86.8838 5.91846 cv
86.4932 5.12744 85.8066 4.91797 85.3398 4.91797 cv
84.7866 4.91797 84.1104 5.19434 83.7573 5.98535 cv
83.4907 6.58594 83.3955 7.17676 83.3955 8.20605 cv
83.3955 9.13086 83.4619 9.82617 83.8052 10.5029 cv
84.1768 11.2275 84.8345 11.4561 85.3301 11.4561 cv
86.1592 11.4561 86.6357 10.9604 86.9126 10.4077 cv
87.2554 9.69287 87.2744 8.75879 87.2744 8.20605 cv
cp
86.5503 8.0918 mo
86.5503 8.73047 86.5503 9.45459 86.4453 10.0361 cv
86.2642 11.0845 85.6636 11.2656 85.3301 11.2656 cv
85.0249 11.2656 84.4058 11.0942 84.2246 10.0552 cv
84.1196 9.4834 84.1196 8.75879 84.1196 8.0918 cv
84.1196 7.31006 84.1196 6.60498 84.272 6.04248 cv
84.4341 5.40381 84.9204 5.1084 85.3301 5.1084 cv
85.6924 5.1084 86.2451 5.32764 86.4263 6.14746 cv
86.5503 6.69043 86.5503 7.44336 86.5503 8.0918 cv
cp
f
90.3628 8.88281 mo
90.3628 8.1582 90.2676 6.97656 89.7339 5.87109 cv
89.1714 4.72705 88.3896 4.10742 88.2847 4.10742 cv
88.2466 4.10742 88.1992 4.12646 88.1992 4.18359 cv
88.1992 4.2124 88.1992 4.23145 88.3613 4.39355 cv
89.3145 5.35645 89.8481 6.92871 89.8481 8.87305 cv
89.8481 10.7222 89.3999 12.314 88.2944 13.439 cv
88.1992 13.5244 88.1992 13.5435 88.1992 13.5723 cv
88.1992 13.6294 88.2466 13.6484 88.2847 13.6484 cv
88.4087 13.6484 89.1904 12.9624 89.6572 12.0283 cv
90.1436 11.0562 90.3628 10.0264 90.3628 8.88281 cv
cp
f
7.06836 115.863 mo
7.06836 115.834 7.06836 115.815 6.90625 115.653 cv
5.95313 114.69 5.41943 113.118 5.41943 111.173 cv
5.41943 109.324 5.86719 107.732 6.97266 106.608 cv
7.06836 106.522 7.06836 106.503 7.06836 106.475 cv
7.06836 106.417 7.02051 106.398 6.98242 106.398 cv
6.8584 106.398 6.07666 107.084 5.60986 108.019 cv
5.12354 108.981 4.90479 110.001 4.90479 111.173 cv
4.90479 112.021 5.03809 113.156 5.53369 114.176 cv
6.09619 115.319 6.87744 115.939 6.98242 115.939 cv
7.02051 115.939 7.06836 115.92 7.06836 115.863 cv
cp
.66 0 1 0 cmyk
f
11.8721 110.497 mo
11.8721 109.706 11.8242 108.934 11.481 108.209 cv
11.0903 107.418 10.4043 107.208 9.93701 107.208 cv
9.38428 107.208 8.70752 107.485 8.35498 108.276 cv
8.08789 108.876 7.99268 109.467 7.99268 110.497 cv
7.99268 111.421 8.05957 112.117 8.40234 112.794 cv
8.77441 113.518 9.43213 113.747 9.92773 113.747 cv
10.7568 113.747 11.2334 113.251 11.5098 112.698 cv
11.853 111.983 11.8721 111.049 11.8721 110.497 cv
cp
11.1475 110.382 mo
11.1475 111.021 11.1475 111.745 11.043 112.327 cv
10.8618 113.375 10.2612 113.556 9.92773 113.556 cv
9.62256 113.556 9.00293 113.385 8.82178 112.346 cv
8.71729 111.774 8.71729 111.049 8.71729 110.382 cv
8.71729 109.601 8.71729 108.896 8.86963 108.333 cv
9.03174 107.694 9.51758 107.399 9.92773 107.399 cv
10.2896 107.399 10.8428 107.618 11.0234 108.438 cv
11.1475 108.981 11.1475 109.734 11.1475 110.382 cv
cp
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
14.124 113.589 mo
14.2422 112.998 14.1162 112.626 13.7446 112.626 cv
13.4683 112.626 13.2451 112.836 13.1953 113.084 cv
13.144 113.341 13.2832 113.551 13.5693 113.551 cv
13.7119 113.551 13.8301 113.484 13.897 113.437 cv
13.9312 113.408 13.9502 113.408 13.9502 113.408 cv
13.9502 113.408 13.9429 113.542 13.9331 113.589 cv
13.811 114.199 13.4492 114.771 12.9419 115.209 cv
12.8979 115.238 12.8848 115.257 12.877 115.295 cv
12.8677 115.343 12.9058 115.391 12.9536 115.391 cv
13.0391 115.391 13.9048 114.685 14.124 113.589 cv
cp
f
20.123 112.188 mo
20.1401 112.102 20.0542 112.102 20.0161 112.102 cv
19.9019 112.102 19.8867 112.131 19.8198 112.273 cv
19.6689 112.598 19.2402 113.456 18.7065 113.456 cv
18.5635 113.456 18.5005 113.389 18.5444 113.169 cv
18.5903 112.941 18.7544 112.646 18.8687 112.455 cv
19.2554 111.759 19.7568 110.873 19.8677 110.32 cv
19.9683 109.814 19.8428 109.348 19.1089 109.348 cv
18.4985 109.348 18.0278 109.7 17.6963 110.024 cv
18.9849 107.155 li
19.0151 107.098 19.0327 107.06 19.0381 107.031 cv
19.0552 106.946 18.9907 106.936 18.8359 106.946 cv
17.8657 107.031 li
17.7305 107.041 17.6426 107.05 17.6084 107.222 cv
17.5894 107.317 17.6655 107.317 17.7993 107.317 cv
18.2759 107.317 18.2583 107.403 18.2393 107.499 cv
18.2319 107.537 18.1938 107.632 18.1768 107.67 cv
15.6719 113.236 li
15.6182 113.36 15.605 113.379 15.5991 113.408 cv
15.5747 113.532 15.6372 113.646 15.7993 113.646 cv
16.0664 113.646 16.1729 113.398 16.2056 113.332 cv
17.269 110.968 li
17.3701 110.749 18.127 109.538 19.042 109.538 cv
19.4805 109.538 19.3853 110.015 19.3525 110.177 cv
19.2344 110.768 18.5864 111.912 18.3311 112.378 cv
18.1978 112.617 18.1421 112.703 18.1021 112.903 cv
18.0107 113.36 18.249 113.646 18.6396 113.646 cv
19.5264 113.646 20.1152 112.226 20.123 112.188 cv
cp
f
grestore
26.6465 111.168 mo
26.6465 110.987 26.4746 110.987 26.3506 110.987 cv
21.2515 110.987 li
21.1084 110.987 20.9468 110.987 20.9468 111.159 cv
20.9468 111.34 21.0991 111.34 21.2515 111.34 cv
26.3506 111.34 li
26.4653 111.34 26.6465 111.34 26.6465 111.168 cv
cp
f
30.6875 113.551 mo
30.6875 113.274 li
30.3921 113.274 li
29.5532 113.274 29.5249 113.16 29.5249 112.817 cv
29.5249 107.441 li
29.5249 107.222 29.5249 107.213 29.334 107.213 cv
29.1055 107.47 28.6289 107.823 27.647 107.823 cv
27.647 108.099 li
27.8662 108.099 28.3428 108.099 28.8672 107.851 cv
28.8672 112.817 li
28.8672 113.16 28.8384 113.274 27.9995 113.274 cv
27.7041 113.274 li
27.7041 113.551 li
27.9614 113.532 28.8862 113.532 29.2007 113.532 cv
29.5151 113.532 30.4302 113.532 30.6875 113.551 cv
cp
f
34.1382 111.178 mo
34.1382 110.453 34.0425 109.271 33.5088 108.166 cv
32.9463 107.022 32.165 106.402 32.0601 106.402 cv
32.022 106.402 31.9741 106.421 31.9741 106.479 cv
31.9741 106.507 31.9741 106.526 32.1362 106.688 cv
33.0894 107.651 33.623 109.224 33.623 111.168 cv
33.623 113.017 33.1753 114.609 32.0698 115.734 cv
31.9741 115.819 31.9741 115.838 31.9741 115.867 cv
31.9741 115.924 32.022 115.943 32.0601 115.943 cv
32.1841 115.943 32.9653 115.257 33.4326 114.323 cv
33.9189 113.351 34.1382 112.321 34.1382 111.178 cv
cp
f
58.5571 115.867 mo
58.5571 115.838 58.5571 115.819 58.395 115.657 cv
57.4419 114.695 56.9082 113.122 56.9082 111.178 cv
56.9082 109.329 57.3564 107.737 58.4619 106.612 cv
58.5571 106.526 58.5571 106.507 58.5571 106.479 cv
58.5571 106.421 58.5098 106.402 58.4717 106.402 cv
58.3477 106.402 57.5659 107.089 57.0991 108.023 cv
56.6128 108.985 56.3936 110.005 56.3936 111.178 cv
56.3936 112.026 56.5269 113.16 57.0229 114.18 cv
57.585 115.324 58.3667 115.943 58.4717 115.943 cv
58.5098 115.943 58.5571 115.924 58.5571 115.867 cv
cp
0 0 0 1 cmyk
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
65.3115 112.321 mo
65.5327 111.931 66.2134 110.529 66.3276 109.958 cv
66.4248 109.472 66.2593 109.348 66.0874 109.348 cv
65.9063 109.348 65.6318 109.529 65.5879 109.748 cv
65.5708 109.833 65.5806 109.881 65.647 109.977 cv
65.8149 110.234 65.7729 110.586 65.7427 110.739 cv
65.668 111.111 65.1592 112.131 64.9458 112.483 cv
64.6426 112.998 64.2461 113.456 63.7598 113.456 cv
63.2739 113.456 63.2241 113.036 63.3008 112.655 cv
63.354 112.388 63.4722 112.131 63.6953 111.635 cv
64.2612 110.377 li
64.3662 110.139 64.5547 109.719 64.5645 109.672 cv
64.5933 109.529 64.4956 109.443 64.3721 109.443 cv
64.105 109.443 63.9907 109.681 63.9258 109.814 cv
62.9785 111.931 li
62.8545 112.216 62.7993 112.445 62.7842 112.521 cv
62.7573 112.655 62.3018 113.456 61.7871 113.456 cv
61.2344 113.456 61.2305 112.95 61.2954 112.626 cv
61.3789 112.207 61.6533 111.645 62.1436 110.768 cv
62.3647 110.377 62.4219 110.282 62.46 110.091 cv
62.5361 109.71 62.3799 109.348 61.9126 109.348 cv
61.0454 109.348 60.4409 110.749 60.4297 110.806 cv
60.4126 110.892 60.4985 110.892 60.5459 110.892 cv
60.6602 110.892 60.6758 110.863 60.7402 110.729 cv
60.874 110.444 61.3027 109.538 61.8555 109.538 cv
61.9702 109.538 62.0654 109.586 62.0195 109.814 cv
61.9717 110.053 61.8271 110.301 61.5161 110.854 cv
61.0303 111.711 60.8359 112.159 60.7671 112.502 cv
60.5801 113.437 61.2437 113.646 61.73 113.646 cv
61.9775 113.646 62.313 113.589 62.7705 113.017 cv
62.8657 113.589 63.436 113.646 63.6934 113.646 cv
64.4175 113.646 64.917 113.008 65.3115 112.321 cv
cp
f
grestore
72.3003 111.168 mo
72.3003 110.987 72.1289 110.987 72.0049 110.987 cv
66.9058 110.987 li
66.7627 110.987 66.6006 110.987 66.6006 111.159 cv
66.6006 111.34 66.7529 111.34 66.9058 111.34 cv
72.0049 111.34 li
72.1191 111.34 72.3003 111.34 72.3003 111.168 cv
cp
f
76.3418 113.551 mo
76.3418 113.274 li
76.0464 113.274 li
75.2075 113.274 75.1787 113.16 75.1787 112.817 cv
75.1787 107.441 li
75.1787 107.222 75.1787 107.213 74.9883 107.213 cv
74.7593 107.47 74.2827 107.823 73.3013 107.823 cv
73.3013 108.099 li
73.5205 108.099 73.9971 108.099 74.521 107.851 cv
74.521 112.817 li
74.521 113.16 74.4927 113.274 73.6538 113.274 cv
73.3584 113.274 li
73.3584 113.551 li
73.6157 113.532 74.54 113.532 74.8545 113.532 cv
75.1694 113.532 76.0845 113.532 76.3418 113.551 cv
cp
f
78.9629 113.589 mo
78.9629 112.998 78.7627 112.626 78.3906 112.626 cv
78.1143 112.626 77.9331 112.836 77.9331 113.084 cv
77.9331 113.341 78.1143 113.551 78.4004 113.551 cv
78.5435 113.551 78.6479 113.484 78.7056 113.437 cv
78.7339 113.408 78.7529 113.408 78.7529 113.408 cv
78.7529 113.408 78.772 113.542 78.772 113.589 cv
78.772 114.199 78.5244 114.771 78.105 115.209 cv
78.0669 115.238 78.0571 115.257 78.0571 115.295 cv
78.0571 115.343 78.105 115.391 78.1523 115.391 cv
78.2383 115.391 78.9629 114.685 78.9629 113.589 cv
cp
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
84.9541 112.188 mo
84.9712 112.102 84.8857 112.102 84.8477 112.102 cv
84.7329 112.102 84.7178 112.131 84.6509 112.273 cv
84.5005 112.598 84.0718 113.456 83.5381 113.456 cv
83.395 113.456 83.332 113.389 83.376 113.169 cv
83.4214 112.941 83.5854 112.646 83.6997 112.455 cv
84.0869 111.759 84.5884 110.873 84.6987 110.32 cv
84.7998 109.814 84.6738 109.348 83.9399 109.348 cv
83.3301 109.348 82.8594 109.7 82.5273 110.024 cv
83.8164 107.155 li
83.8467 107.098 83.8638 107.06 83.8696 107.031 cv
83.8867 106.946 83.8218 106.936 83.6675 106.946 cv
82.6973 107.031 li
82.562 107.041 82.4741 107.05 82.4399 107.222 cv
82.4209 107.317 82.4971 107.317 82.6304 107.317 cv
83.1069 107.317 83.0898 107.403 83.0708 107.499 cv
83.063 107.537 83.0249 107.632 83.0078 107.67 cv
80.5029 113.236 li
80.4497 113.36 80.4365 113.379 80.4307 113.408 cv
80.4058 113.532 80.4688 113.646 80.6309 113.646 cv
80.8975 113.646 81.0044 113.398 81.0366 113.332 cv
82.1006 110.968 li
82.2017 110.749 82.9585 109.538 83.8735 109.538 cv
84.312 109.538 84.2163 110.015 84.1841 110.177 cv
84.0659 110.768 83.418 111.912 83.1621 112.378 cv
83.0288 112.617 82.9736 112.703 82.9336 112.903 cv
82.8423 113.36 83.0806 113.646 83.4712 113.646 cv
84.3574 113.646 84.9468 112.226 84.9541 112.188 cv
cp
f
grestore
91.4775 111.168 mo
91.4775 110.987 91.3062 110.987 91.1821 110.987 cv
86.0825 110.987 li
85.9399 110.987 85.7778 110.987 85.7778 111.159 cv
85.7778 111.34 85.9302 111.34 86.0825 111.34 cv
91.1821 111.34 li
91.2964 111.34 91.4775 111.34 91.4775 111.168 cv
cp
f
95.519 113.551 mo
95.519 113.274 li
95.2231 113.274 li
94.3848 113.274 94.356 113.16 94.356 112.817 cv
94.356 107.441 li
94.356 107.222 94.356 107.213 94.1655 107.213 cv
93.9365 107.47 93.46 107.823 92.478 107.823 cv
92.478 108.099 li
92.6978 108.099 93.1743 108.099 93.6982 107.851 cv
93.6982 112.817 li
93.6982 113.16 93.6694 113.274 92.8311 113.274 cv
92.5356 113.274 li
92.5356 113.551 li
92.793 113.532 93.7173 113.532 94.0317 113.532 cv
94.3462 113.532 95.2612 113.532 95.519 113.551 cv
cp
f
98.9692 111.178 mo
98.9692 110.453 98.874 109.271 98.3398 108.166 cv
97.7778 107.022 96.9961 106.402 96.8911 106.402 cv
96.853 106.402 96.8057 106.421 96.8057 106.479 cv
96.8057 106.507 96.8057 106.526 96.9673 106.688 cv
97.9209 107.651 98.4546 109.224 98.4546 111.168 cv
98.4546 113.017 98.0063 114.609 96.9009 115.734 cv
96.8057 115.819 96.8057 115.838 96.8057 115.867 cv
96.8057 115.924 96.853 115.943 96.8911 115.943 cv
97.0151 115.943 97.7969 115.257 98.2637 114.323 cv
98.75 113.351 98.9692 112.321 98.9692 111.178 cv
cp
f
201.174 101.57 mo
201.174 101.542 201.174 101.522 201.012 101.36 cv
200.059 100.398 199.525 98.8252 199.525 96.8809 cv
199.525 95.0317 199.973 93.4399 201.079 92.3154 cv
201.174 92.2295 201.174 92.2104 201.174 92.1816 cv
201.174 92.1245 201.126 92.1055 201.088 92.1055 cv
200.964 92.1055 200.182 92.792 199.715 93.7256 cv
199.229 94.6885 199.01 95.7085 199.01 96.8809 cv
199.01 97.729 199.144 98.8633 199.639 99.8833 cv
200.202 101.027 200.983 101.646 201.088 101.646 cv
201.126 101.646 201.174 101.627 201.174 101.57 cv
cp
0 .938 1 0 cmyk
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
206.965 97.8906 mo
206.983 97.8052 206.897 97.8052 206.859 97.8052 cv
206.745 97.8052 206.729 97.8335 206.663 97.9766 cv
206.512 98.3008 206.083 99.1587 205.549 99.1587 cv
205.407 99.1587 205.343 99.0918 205.387 98.8726 cv
205.433 98.644 205.597 98.3481 205.711 98.1577 cv
206.098 97.4619 206.6 96.5757 206.71 96.0225 cv
206.811 95.5176 206.685 95.0503 205.952 95.0503 cv
205.341 95.0503 204.871 95.4033 204.539 95.7271 cv
205.828 92.8584 li
205.858 92.8013 205.875 92.7632 205.881 92.7344 cv
205.898 92.6484 205.833 92.6392 205.679 92.6484 cv
204.708 92.7344 li
204.573 92.7441 204.486 92.7534 204.452 92.9248 cv
204.432 93.0205 204.508 93.0205 204.642 93.0205 cv
205.119 93.0205 205.101 93.106 205.083 93.2012 cv
205.075 93.2397 205.037 93.335 205.019 93.373 cv
202.514 98.9395 li
202.461 99.0635 202.448 99.082 202.442 99.1108 cv
202.417 99.2349 202.48 99.3491 202.642 99.3491 cv
202.909 99.3491 203.016 99.1016 203.048 99.0347 cv
204.112 96.6709 li
204.213 96.4517 204.97 95.2412 205.885 95.2412 cv
206.323 95.2412 206.228 95.7178 206.196 95.8799 cv
206.078 96.4707 205.429 97.6143 205.173 98.0815 cv
205.041 98.3198 204.985 98.4058 204.945 98.6055 cv
204.854 99.0635 205.091 99.3491 205.483 99.3491 cv
206.369 99.3491 206.958 97.9292 206.965 97.8906 cv
cp
f
grestore
213.489 96.8711 mo
213.489 96.6899 213.318 96.6899 213.194 96.6899 cv
208.094 96.6899 li
207.952 96.6899 207.79 96.6899 207.79 96.8618 cv
207.79 97.043 207.942 97.043 208.094 97.043 cv
213.194 97.043 li
213.308 97.043 213.489 97.043 213.489 96.8711 cv
cp
f
217.531 99.2539 mo
217.531 98.9775 li
217.235 98.9775 li
216.396 98.9775 216.368 98.8633 216.368 98.52 cv
216.368 93.1445 li
216.368 92.9253 216.368 92.9155 216.177 92.9155 cv
215.948 93.1729 215.471 93.5259 214.49 93.5259 cv
214.49 93.8022 li
214.709 93.8022 215.186 93.8022 215.709 93.5542 cv
215.709 98.52 li
215.709 98.8633 215.681 98.9775 214.842 98.9775 cv
214.547 98.9775 li
214.547 99.2539 li
214.804 99.2349 215.729 99.2349 216.043 99.2349 cv
216.358 99.2349 217.273 99.2349 217.531 99.2539 cv
cp
f
220.152 99.292 mo
220.152 98.7012 219.952 98.3296 219.58 98.3296 cv
219.303 98.3296 219.123 98.5391 219.123 98.7871 cv
219.123 99.0444 219.303 99.2539 219.589 99.2539 cv
219.732 99.2539 219.837 99.1875 219.894 99.1396 cv
219.922 99.1108 219.942 99.1108 219.942 99.1108 cv
219.942 99.1108 219.96 99.2446 219.96 99.292 cv
219.96 99.9023 219.713 100.474 219.293 100.913 cv
219.255 100.941 219.246 100.96 219.246 100.998 cv
219.246 101.046 219.293 101.094 219.341 101.094 cv
219.427 101.094 220.152 100.388 220.152 99.292 cv
cp
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
227.108 98.0244 mo
227.329 97.6333 228.009 96.2324 228.124 95.6606 cv
228.221 95.1743 228.055 95.0503 227.883 95.0503 cv
227.703 95.0503 227.428 95.2314 227.384 95.4507 cv
227.367 95.5366 227.376 95.5845 227.443 95.6797 cv
227.611 95.937 227.569 96.2896 227.539 96.4419 cv
227.464 96.814 226.956 97.8335 226.742 98.1865 cv
226.439 98.7012 226.042 99.1587 225.556 99.1587 cv
225.07 99.1587 225.02 98.7393 225.096 98.3579 cv
225.15 98.0908 225.268 97.8335 225.492 97.3379 cv
226.057 96.0801 li
226.163 95.8418 226.351 95.4224 226.361 95.3745 cv
226.389 95.2314 226.292 95.146 226.168 95.146 cv
225.901 95.146 225.787 95.3843 225.722 95.5176 cv
224.775 97.6333 li
224.651 97.9194 224.595 98.1484 224.581 98.2246 cv
224.553 98.3579 224.098 99.1587 223.583 99.1587 cv
223.03 99.1587 223.027 98.6533 223.091 98.3291 cv
223.175 97.9102 223.45 97.3477 223.94 96.4707 cv
224.161 96.0801 224.218 95.9844 224.256 95.7939 cv
224.333 95.4126 224.176 95.0503 223.708 95.0503 cv
222.841 95.0503 222.237 96.4517 222.226 96.5088 cv
222.208 96.5947 222.294 96.5947 222.342 96.5947 cv
222.457 96.5947 222.472 96.5659 222.537 96.4326 cv
222.67 96.1465 223.099 95.2412 223.652 95.2412 cv
223.766 95.2412 223.862 95.2886 223.816 95.5176 cv
223.768 95.7559 223.624 96.0039 223.312 96.5566 cv
222.827 97.4141 222.632 97.8623 222.563 98.2056 cv
222.376 99.1396 223.04 99.3491 223.526 99.3491 cv
223.774 99.3491 224.109 99.292 224.567 98.7202 cv
224.662 99.292 225.232 99.3491 225.49 99.3491 cv
226.213 99.3491 226.713 98.7104 227.108 98.0244 cv
cp
f
grestore
234.096 96.8711 mo
234.096 96.6899 233.924 96.6899 233.8 96.6899 cv
228.702 96.6899 li
228.558 96.6899 228.396 96.6899 228.396 96.8618 cv
228.396 97.043 228.549 97.043 228.702 97.043 cv
233.8 97.043 li
233.915 97.043 234.096 97.043 234.096 96.8711 cv
cp
f
238.137 99.2539 mo
238.137 98.9775 li
237.842 98.9775 li
237.003 98.9775 236.974 98.8633 236.974 98.52 cv
236.974 93.1445 li
236.974 92.9253 236.974 92.9155 236.784 92.9155 cv
236.555 93.1729 236.079 93.5259 235.097 93.5259 cv
235.097 93.8022 li
235.316 93.8022 235.792 93.8022 236.317 93.5542 cv
236.317 98.52 li
236.317 98.8633 236.289 98.9775 235.45 98.9775 cv
235.154 98.9775 li
235.154 99.2539 li
235.412 99.2349 236.336 99.2349 236.651 99.2349 cv
236.965 99.2349 237.88 99.2349 238.137 99.2539 cv
cp
f
241.587 96.8809 mo
241.587 96.1563 241.493 94.9746 240.958 93.8687 cv
240.396 92.7251 239.615 92.1055 239.51 92.1055 cv
239.472 92.1055 239.424 92.1245 239.424 92.1816 cv
239.424 92.2104 239.424 92.2295 239.586 92.3916 cv
240.54 93.354 241.073 94.9268 241.073 96.8711 cv
241.073 98.7202 240.625 100.312 239.519 101.437 cv
239.424 101.522 239.424 101.542 239.424 101.57 cv
239.424 101.627 239.472 101.646 239.51 101.646 cv
239.633 101.646 240.416 100.96 240.882 100.026 cv
241.369 99.0537 241.587 98.0244 241.587 96.8809 cv
cp
f
207.465 27.7212 mo
207.465 27.6924 207.465 27.6733 207.303 27.5117 cv
206.35 26.5488 205.817 24.9761 205.817 23.0317 cv
205.817 21.1826 206.264 19.5908 207.371 18.4663 cv
207.465 18.3804 207.465 18.3613 207.465 18.333 cv
207.465 18.2754 207.417 18.2563 207.379 18.2563 cv
207.255 18.2563 206.474 18.9429 206.007 19.877 cv
205.521 20.8394 205.302 21.8594 205.302 23.0317 cv
205.302 23.8799 205.435 25.0142 205.931 26.0342 cv
206.494 27.1777 207.275 27.7974 207.379 27.7974 cv
207.417 27.7974 207.465 27.7783 207.465 27.7212 cv
cp
.855 .73 0 0 cmyk
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
213.251 24.0386 mo
213.269 23.9531 213.183 23.9531 213.145 23.9531 cv
213.031 23.9531 213.015 23.9814 212.949 24.1245 cv
212.798 24.4487 212.37 25.3066 211.835 25.3066 cv
211.693 25.3066 211.629 25.2397 211.673 25.0205 cv
211.719 24.792 211.883 24.4961 211.998 24.3057 cv
212.384 23.6099 212.886 22.7236 212.997 22.1709 cv
213.097 21.6655 212.971 21.1982 212.238 21.1982 cv
211.627 21.1982 211.157 21.5513 210.825 21.875 cv
212.114 19.0063 li
212.144 18.9492 212.162 18.9111 212.167 18.8823 cv
212.184 18.7964 212.12 18.7871 211.965 18.7964 cv
210.995 18.8823 li
210.86 18.8916 210.772 18.9014 210.738 19.0728 cv
210.718 19.1685 210.794 19.1685 210.928 19.1685 cv
211.405 19.1685 211.387 19.2539 211.369 19.3496 cv
211.361 19.3877 211.323 19.4829 211.305 19.521 cv
208.8 25.0874 li
208.748 25.2109 208.734 25.2305 208.728 25.2588 cv
208.704 25.3828 208.766 25.4971 208.928 25.4971 cv
209.196 25.4971 209.302 25.249 209.334 25.1826 cv
210.398 22.8188 li
210.5 22.5996 211.256 21.3892 212.171 21.3892 cv
212.61 21.3892 212.514 21.8657 212.482 22.0278 cv
212.364 22.6187 211.715 23.7622 211.46 24.2295 cv
211.327 24.4678 211.271 24.5537 211.231 24.7534 cv
211.14 25.2109 211.378 25.4971 211.769 25.4971 cv
212.655 25.4971 213.245 24.0771 213.251 24.0386 cv
cp
f
grestore
219.775 23.019 mo
219.775 22.8379 219.603 22.8379 219.479 22.8379 cv
214.38 22.8379 li
214.237 22.8379 214.076 22.8379 214.076 23.0098 cv
214.076 23.1904 214.228 23.1904 214.38 23.1904 cv
219.479 23.1904 li
219.594 23.1904 219.775 23.1904 219.775 23.019 cv
cp
f
223.816 25.4019 mo
223.816 25.1255 li
223.521 25.1255 li
222.682 25.1255 222.654 25.0112 222.654 24.668 cv
222.654 19.2925 li
222.654 19.0732 222.654 19.0635 222.462 19.0635 cv
222.234 19.3208 221.757 19.6738 220.776 19.6738 cv
220.776 19.9502 li
220.995 19.9502 221.471 19.9502 221.996 19.7021 cv
221.996 24.668 li
221.996 25.0112 221.967 25.1255 221.128 25.1255 cv
220.833 25.1255 li
220.833 25.4019 li
221.09 25.3828 222.015 25.3828 222.33 25.3828 cv
222.644 25.3828 223.559 25.3828 223.816 25.4019 cv
cp
f
226.437 25.4399 mo
226.437 24.8491 226.237 24.4775 225.866 24.4775 cv
225.589 24.4775 225.408 24.687 225.408 24.9351 cv
225.408 25.1924 225.589 25.4019 225.875 25.4019 cv
226.018 25.4019 226.123 25.335 226.18 25.2876 cv
226.208 25.2588 226.228 25.2588 226.228 25.2588 cv
226.228 25.2588 226.247 25.3926 226.247 25.4399 cv
226.247 26.0498 225.999 26.6221 225.58 27.0605 cv
225.542 27.0889 225.532 27.1079 225.532 27.146 cv
225.532 27.1938 225.58 27.2417 225.627 27.2417 cv
225.713 27.2417 226.437 26.5361 226.437 25.4399 cv
cp
f
231.441 22.3521 mo
231.441 21.5605 231.394 20.7886 231.05 20.0645 cv
230.66 19.2734 229.973 19.0635 229.506 19.0635 cv
228.954 19.0635 228.277 19.3398 227.924 20.1309 cv
227.658 20.7314 227.562 21.3223 227.562 22.3521 cv
227.562 23.2764 227.628 23.9722 227.972 24.6489 cv
228.343 25.3735 229.001 25.6021 229.497 25.6021 cv
230.327 25.6021 230.803 25.1064 231.08 24.5537 cv
231.422 23.8389 231.441 22.9048 231.441 22.3521 cv
cp
230.717 22.2373 mo
230.717 22.876 230.717 23.6006 230.612 24.1821 cv
230.431 25.2305 229.831 25.4116 229.497 25.4116 cv
229.192 25.4116 228.573 25.2397 228.391 24.2012 cv
228.287 23.6289 228.287 22.9048 228.287 22.2373 cv
228.287 21.4561 228.287 20.7505 228.439 20.1885 cv
228.601 19.5498 229.087 19.2544 229.497 19.2544 cv
229.859 19.2544 230.412 19.4736 230.593 20.293 cv
230.717 20.8364 230.717 21.5894 230.717 22.2373 cv
cp
f
234.53 23.0288 mo
234.53 22.3042 234.434 21.1226 233.901 20.0166 cv
233.338 18.873 232.556 18.2534 232.452 18.2534 cv
232.414 18.2534 232.366 18.2725 232.366 18.3296 cv
232.366 18.3584 232.366 18.3774 232.528 18.5396 cv
233.481 19.502 234.015 21.0747 234.015 23.019 cv
234.015 24.8682 233.567 26.46 232.461 27.5845 cv
232.366 27.6704 232.366 27.6895 232.366 27.7183 cv
232.366 27.7754 232.414 27.7944 232.452 27.7944 cv
232.576 27.7944 233.357 27.1079 233.825 26.1738 cv
234.31 25.2017 234.53 24.1724 234.53 23.0288 cv
cp
f
121.125 101.567 mo
121.125 101.539 121.125 101.52 120.963 101.357 cv
120.01 100.395 119.477 98.8218 119.477 96.8774 cv
119.477 95.0283 119.924 93.4365 121.03 92.312 cv
121.125 92.2261 121.125 92.207 121.125 92.1787 cv
121.125 92.1216 121.078 92.1025 121.04 92.1025 cv
120.916 92.1025 120.134 92.7886 119.667 93.7227 cv
119.181 94.6855 118.962 95.7051 118.962 96.8774 cv
118.962 97.7261 119.095 98.8604 119.591 99.8799 cv
120.153 101.024 120.935 101.643 121.04 101.643 cv
121.078 101.643 121.125 101.624 121.125 101.567 cv
cp
0 0 0 1 cmyk
f
125.929 96.2007 mo
125.929 95.4097 125.881 94.6377 125.539 93.9131 cv
125.147 93.1221 124.461 92.9126 123.994 92.9126 cv
123.441 92.9126 122.765 93.189 122.412 93.98 cv
122.145 94.5806 122.05 95.1714 122.05 96.2007 cv
122.05 97.1255 122.117 97.8213 122.46 98.498 cv
122.832 99.2222 123.489 99.4512 123.985 99.4512 cv
124.814 99.4512 125.291 98.9556 125.567 98.4028 cv
125.91 97.688 125.929 96.7539 125.929 96.2007 cv
cp
125.205 96.0864 mo
125.205 96.7251 125.205 97.4492 125.1 98.0308 cv
124.919 99.0791 124.318 99.2603 123.985 99.2603 cv
123.68 99.2603 123.06 99.0889 122.879 98.0498 cv
122.774 97.478 122.774 96.7539 122.774 96.0864 cv
122.774 95.3047 122.774 94.5996 122.927 94.0371 cv
123.089 93.3984 123.575 93.103 123.985 93.103 cv
124.347 93.103 124.9 93.3223 125.081 94.1421 cv
125.205 94.6855 125.205 95.4385 125.205 96.0864 cv
cp
f
128.188 99.2891 mo
128.188 98.6982 127.988 98.3262 127.616 98.3262 cv
127.34 98.3262 127.159 98.5361 127.159 98.7837 cv
127.159 99.041 127.34 99.251 127.626 99.251 cv
127.769 99.251 127.874 99.1841 127.931 99.1367 cv
127.959 99.1079 127.979 99.1079 127.979 99.1079 cv
127.979 99.1079 127.998 99.2412 127.998 99.2891 cv
127.998 99.8989 127.75 100.471 127.331 100.909 cv
127.292 100.938 127.283 100.957 127.283 100.995 cv
127.283 101.043 127.331 101.09 127.378 101.09 cv
127.464 101.09 128.188 100.385 128.188 99.2891 cv
cp
f
gsave
0 0 mo
251.998 0 li
251.998 118.063 li
0 118.063 li
0 0 li
cp
clp
135.147 98.0244 mo
135.368 97.6333 136.048 96.2324 136.163 95.6606 cv
136.26 95.1743 136.094 95.0503 135.922 95.0503 cv
135.742 95.0503 135.467 95.2314 135.423 95.4507 cv
135.406 95.5366 135.416 95.5845 135.482 95.6797 cv
135.65 95.937 135.608 96.2896 135.578 96.4419 cv
135.503 96.814 134.994 97.8335 134.781 98.1865 cv
134.477 98.7012 134.081 99.1587 133.595 99.1587 cv
133.109 99.1587 133.059 98.7393 133.135 98.3579 cv
133.189 98.0908 133.307 97.8335 133.53 97.3379 cv
134.096 96.0801 li
134.201 95.8418 134.39 95.4224 134.399 95.3745 cv
134.428 95.2314 134.331 95.146 134.207 95.146 cv
133.94 95.146 133.826 95.3843 133.761 95.5176 cv
132.813 97.6333 li
132.689 97.9194 132.634 98.1484 132.619 98.2246 cv
132.592 98.3579 132.137 99.1587 131.622 99.1587 cv
131.069 99.1587 131.065 98.6533 131.13 98.3291 cv
131.214 97.9102 131.488 97.3477 131.979 96.4707 cv
132.2 96.0801 132.257 95.9844 132.295 95.7939 cv
132.371 95.4126 132.215 95.0503 131.748 95.0503 cv
130.88 95.0503 130.276 96.4517 130.265 96.5088 cv
130.248 96.5947 130.333 96.5947 130.381 96.5947 cv
130.495 96.5947 130.511 96.5659 130.575 96.4326 cv
130.709 96.1465 131.138 95.2412 131.69 95.2412 cv
131.805 95.2412 131.9 95.2886 131.854 95.5176 cv
131.807 95.7559 131.662 96.0039 131.351 96.5566 cv
130.865 97.4141 130.67 97.8623 130.602 98.2056 cv
130.415 99.1396 131.079 99.3491 131.565 99.3491 cv
131.813 99.3491 132.148 99.292 132.605 98.7202 cv
132.701 99.292 133.271 99.3491 133.528 99.3491 cv
134.252 99.3491 134.752 98.7104 135.147 98.0244 cv
cp
f
grestore
142.134 96.8711 mo
142.134 96.6899 141.962 96.6899 141.838 96.6899 cv
136.74 96.6899 li
136.596 96.6899 136.434 96.6899 136.434 96.8618 cv
136.434 97.043 136.586 97.043 136.74 97.043 cv
141.838 97.043 li
141.953 97.043 142.134 97.043 142.134 96.8711 cv
cp
f
146.175 99.2539 mo
146.175 98.9775 li
145.88 98.9775 li
145.042 98.9775 145.012 98.8633 145.012 98.52 cv
145.012 93.1445 li
145.012 92.9253 145.012 92.9155 144.822 92.9155 cv
144.593 93.1729 144.117 93.5259 143.135 93.5259 cv
143.135 93.8022 li
143.354 93.8022 143.831 93.8022 144.355 93.5542 cv
144.355 98.52 li
144.355 98.8633 144.327 98.9775 143.488 98.9775 cv
143.192 98.9775 li
143.192 99.2539 li
143.45 99.2349 144.374 99.2349 144.689 99.2349 cv
145.003 99.2349 145.918 99.2349 146.175 99.2539 cv
cp
f
149.625 96.8809 mo
149.625 96.1563 149.531 94.9746 148.997 93.8687 cv
148.434 92.7251 147.653 92.1055 147.548 92.1055 cv
147.51 92.1055 147.462 92.1245 147.462 92.1816 cv
147.462 92.2104 147.462 92.2295 147.625 92.3916 cv
148.578 93.354 149.111 94.9268 149.111 96.8711 cv
149.111 98.7202 148.663 100.312 147.557 101.437 cv
147.462 101.522 147.462 101.542 147.462 101.57 cv
147.462 101.627 147.51 101.646 147.548 101.646 cv
147.671 101.646 148.454 100.96 148.92 100.026 cv
149.407 99.0537 149.625 98.0244 149.625 96.8809 cv
cp
f
3.12708 lw
94.3779 59.54 mo
110.225 59.54 li
0 .938 1 0 cmyk
@
122.972 59.54 mo
110.225 64.1802 li
110.225 54.9004 li
122.972 59.54 li
cp
f
.781572 lw
122.972 59.54 mo
110.225 64.1802 li
110.225 54.8999 li
122.972 59.54 li
cp
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (009x004.eps)%%CreationDate: 27/05/15 10:05 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6H$eO3bW'p`!8dh2dZuMIIHf&2IGaeI_R)uc:n[!AH2kCHrCXM^3$AS7E8KK_pUN*+0VCD2/BP1K>BW&5B`GGSNRiHMrQe)6%e>8rbBLtWjPH(E*dcm=B=hWuMP8,o?`.D.>OPl%mA-Gubi"[Og.B3[BQ.g.@?hIJ"Ut^@!pNjf%Zeb#N,`@/PXlNp`*M-5o\+O@>%rHGQoXM0*0deR2A\^G0B/+)b+[@\/PXFNQ5H7o+PR^Jo_YLe)E,q5<1K&pWso!/M1!%iYti8)sgo;>VR!MoDBmMA"Ri<0%HHp=h/%qp5nI"GnZNhX9t<!gNYS^H\d62gYF?[GPZ,*]'n?DS,L?m=)q<!rUS:.B/dLI<JKfl85R?3oQ2PW*'j+-(iJ,<Y?<B8kBp`&:n[&%QI)ag3NT:]eYrM]P2*$<C\9=A:qk[KDu:,&=]?)$TV(kufh\s2]kfS&5b3iVPHsDV?)ooX1Ah#BZhhsN!!o)j>2Z./IBWB2kj@LC%[XBH9=>bU7%]Y$D?-5=3i4)^(?*pd@Q-5Vj-Oj'ErgAA#`.*q>)3knI`NE$Z4t0gVJiG=B3f)o$KQZ'e]Jj"E7WMX0W=68JNLD(Y%:f`3t&Gi^;pWp5G;*pu$rI2H!#R?nM*]eNK+a\H//%G?S2/?22^bAV@P+%IhJ=$E%6E=)Q='(QbTL^2eJ!,LMIFKeKrl?jDC)VPi%-@Q_g(0$UiIp'dhZA_RjR6I`Pn88#fVI:oJ_dAjeV)/WSBj.?BiA=7[A"$N>1f7EFIk50"=:2h%-^H4tYuIuaD\e9+UfbPjPmT^W%<&>'AY#On9V*a(5'N9<,4g[]T']69hbFi2:M5@FNpkbiO9iapO1MdYP@MrtoIU]o@:=+3i:&'R[YXS>DQmeRTAo&'.@_;/[KOUFT%:<H:75F000i?sqj<"NZ`#:ZQ5VHfp%_GC"TD)nGadS=MO[3Oe!N3!Za&!k*+i?r*/&u;Y,c`"eOIk6<@ZQr5T6JocUi@"WAeku8'%-`%e+pkbiOIJ?C18@=-AQ.D!R=uq1u>P_jON7(5,Nhn/]/ABJs;sKKc8f+Ur@^b>d93?\J%(=I09Pb``9j:>a@f,X.92YZ-p/.F.%GOZ?i@-\G>9=(b76TIYPT\=8IYb`k9[NXa3;lD<NrPF^HjZB<!Eh1cSq1b,<'!^.[Bua+Pm1_X1T0B0&.-7gK;Ji9dVnA]?.c_,j%?`1B^G7nVj[lQ[qifg/7<4a`qGOuF'G'(gjl&Lu[/j")=MC_N^gC?.n=tP'&H7<1sVC2f4&,oA,U<*=)&q/d;:]K@oKn#Wml(:@I%<@Pl^TDm5\qV1h<r\4iXgG#_?%JD0AVb`i_l(::nrc\:=IhM!DM*da4l(<!arc\:=Ig#WZ[HAr"r1nA0^TCl8IqYIM'G\#RWZXN!%!cTi3jA#Q-cOD1=)G6hOU+@e54I"4ORq]QA1lM.0V!@`H?H0a*;_K'sr?'0L\\&4:jGWiHc@f4Ib/HKc2(nq6r!SllO<M8js%J=T%6:XTqZeD+U6BRK[F^(),$k=</Rhd=]*E$4^]#gFeU]fSO(b@`+4b>]?>+.Ae&+Wg(G`-_-/KF7TR?WQt&)6LGKZ=4<Q1\%OUe/@a%&uiK>WMgGY9;G"@5UBcl^\BGW^I[4d0OZt-EU^7p8tpq)Ftg4?P\9*jShCb)3rWXa8Ggq"`J9[&/sJ,+#0KE"#AFl0MU@OU+)$dq%1rA!Yo!F&e-l.o+@7c;Hhk1nK`N,=2f-mbShBMheIPY0t0>U,V7SK++_qRB)lC*^=N,?W8.DOejJs4Uao%#3*oePVWC6YY>/sMdA%925&D=97;[-+t#m?QqY7"K;j@#9"g&h<hNo7f#O>s%*ao4@)[A.;;hR*m*0,OA,L/U!!#T\q7maan.*=D\(hINY+nFWM]NVe&(WX%Z:(8pQ7V/'1&=c2Y'WD\Zs91c)o)[FNnIm5LZE:o$AB+tTP-uV_78<DPBY6&=t!4Z.$tKorFc88&cN+eg344sXRcs!a9C*B'iZ%1%AV*Wtdt'XUb(7q@q!`.ulhqn[(=XPnRKm?,['1Mf9CeAXa0EQ2,$#O"^mYNu&<D'M;Z7@V1(ok*#dX,em%D:kooDtXKpNl`VNL][%I7im1r;PZX4)Y(;pX$GKK9kQpGC1?^4qj/2T^<2m0Z9<@$KQQjbrIhF.;Z@-IDuYWNV`F2kSa&qi0U.A;:$GSLE;_rq_;&k!=ArD%Aa6Pi*%'A`=gf<A<2eD\=a3iuk'KrPI[\JC'C7##p"u.?`-N!fbH0ELg&aAidi*2TZ<E%Vd8gm`L16Fa/&_.KoFp1[[fh1TBGp?i%Yhaa[FP>o:=L=-_("#ZjjL/5^]K,V#Y[u=V,^ig(Zk/iB1mQR";'#*I9$H5t)agT[B%h)LD'Ug"+7mA^66mmSq(nNVpVc%jduaq+%QL^?fjS6("6R3]p*>L,26Q_h%7AbPAjW&_NOVXL6G1?7AABVm/Dq&h@o!FH$f)\dC1C6_3<6=])W=E&/!ARKRUi*,`qKS<M7VKnJ%hCNCR]Pgu:VYE\t/(DI[FGjPYMq#qXr\73/[`"o/ob)kunt@(,>.h)<-JYgb>,K_8auOp>mf,-Kf*'gMFLbDh=<@EACk#lp[:_r(%::fh)qjfpW^QU&.p&7aB"t[mbkG'r"DR;*RQoH9cN9?De%m8S6[XU?MX^CJ6I(n0\XX>d5eMenB4F[67J*Ua1o*jQ)49'$ele-$J%P6jZWBi_k=,^fqOPFpG+_r!)sJ$lmqcKc0JDZ*RR[Q>I4)cCP'P1S6%B/o1?B!kY+-4/JII*hWrSlC82%W2Le!GT7%lN"iD/#8!!%Jrg&hUBhT7q]EpHZeh_TCu"Z\RrA]RNpllT_p."JU&3=987&[X9cL53Oc>o_#o(S_2sN@G0=6aDPX0pZYl`dNo%j:pXqiE+>Q[+d%04QY9S'As"\(^Xk]_PRcoA$L*5)Z1<J%f7Dbsq0Fd3fEE;XO/sDpA.ST3f;3'o!1.nZ1';JKb`mk"sh3lJRP/o),9:W=tg#Ns[=]%DBi,Q_#j3dG'Q+'pmUg]/s,c+2!_hCDSOa$]1%/o<tb-!@/[)ic2M3"R6.EteWWX_gj.q\"&32mK]I,>@*;NAnEhc8/QqHgXHbOa%H1M8im(o%G!;\c+$H^3HrM,IU!Vke.JLaq`[7$%D^"#M+#PGt6KL0@86f66[SlD2%:jbUKa_N)6D%^RJ,mIC$:Yl^3"hPBT<u_ts%!'6]i")T.a7Ziracpq'?&C(6o^jsK.$p`*O[2)F"M#NpNIY0WM=5sb#;=4?+^P-39(EUgg9k)O'8I"nL6+-Cb;gem\e*c,oZ39:.%A?Go<L:qQSXnV*d(hkVfs7DN:>,,GQD)<415I@YK*#FJ'h0LqS`ZFtM(?"F[]h2+halB"BkGOq7X$RWf2ZAJ&/En^rdWajB&*pXC%cPQ<U<VNfLG\bnrB=mA(pbmgXG!`qg,kmM$mM)X2F21J$WjI'mE#`&"J!09V7P3;/r(l-d%+k'=L&\L0If!p`l0i_Yob99I*U(jU%_"76JX?'&^^t+$Z<VuIM.upXJ)oBJ&S&9k'BH`Mjr3THBRVoP/T<Di7$7t4-bANdKo=q<M+'-0fD<E#8s)coB>e\sp;DiGmn5\pY%CS4tn'-N<)^gGW0UC'*biV*6Y7/S.)iI@%!X%o(lO%-G[]nMaAfG:V4oY,5'or!k(/s/YVHMuGfYDQg#g9(Bd_+&=*RppbX319BE%Xkr[(:Tr[T=q)n(d4G7bMSX&FTK(#FQ+s%N&+m+#?Ypdk@4@'pNi3-.G#27$TFBl2CP/!sn\<*o^(l:Cd"F]f?5qb8<kB*bL&ZdB%Z`*m_[312Upb-iWLeMiu^%^j]s'm9]YM"0ts2=Cs)KO^6l+Y]ik0j9?Rli_rPXKk2/9CLa/#r#Mj8KI(NP3%"^X\c;I]`FX;<r]?%D3:WO=jtm.s&b0rnUmt?W&NQtL:c37BRngYs05U-`"+cl[G;)Vn=]c]:H/%YDkJt9r/W[OYQ=cdYni(ks-F8(P8eEe6p)98i!1-Y%F]?!Of64Q+9>9@CHhq!4'ZgV3PE_66[MX`7m93hdVQ-p?>Z-N5oY"J<(bl`,9n91aL2<3`U.rUAl`Y'lgl<9B?AjTZQmoiq?mk>2%X++/g?F8$ln%l8WrhS@ci!\VFAFl6n[$1EU`t7V2nr-ZdS9/$3H0\%"*/p1D`N3`YWR:#gX+(V[h,!l42[h:;l__ge91U?('mtcQ%0_lr6UI:/`>%A8Cq.ljDO&VZbNJU!2H>fq7aP'@^>ktDn=<fB%Jg@rLf(D)k^?<1EZf*<[IQ*\pl*p'<Uh,0Y<s8-!hYS-&^Ds7[%S1=)\<[%:^NaHt2ODF`sHFJOs?Uj7lW+Lab^_sc1r,1VofsI"8Wo!+D.I`Q>4\ZP(7Lcg`L^>BRBZ[_(@Y=_jg->OJUK(+`qVCkC%AKmoMS/8V"%;OX%ZdAe[?kDNDk\BQOXbG6_[284*)u/6,m;R]YW!3thesjo.Gh7tgrQA30m<87!f<8N:Wu1pXkh#j>.MoU^3a]6e%FCY,"W!7qR>&@;EDjHA<9LB4#7DZEEEZiKV1ro0[WeDQXZg:dJ?cc^4WP7'5r8=<6>C9RVdPX1\IT"lH?t`-0m>>ZB5mg8BEZ1ts%Ta`OPe$fRdOJ6Bd;g_^kTR'9eZZKFDRRqGVo=&Iu2+cD.(be@!kW;?-<OLB@I6cC2`@(e4(D%ue,QtV%!@F/sWd.J*Adf@im1/l>%&5VZP=,gO=/dn6EX8RA>>==SC?fQm8h,^ZW:SlJ+%AD,Fb'Erfh6P$7;['VPU)'.Ef_p%h0f2%^A;Q>+-!Gn/9\DHdgqo%E"Nne(%fNED-mT5e0#`T!`U[K$c-.$BOP:P1mHG9(/**S`:`)A]n"mf:e.\!-QdBp^*j&H1)\Z?.Td.ck92Y^@E.)2B,"P[6\[EJ:7?A<B4%g\-B-Kc>)"9Je3@g"fZ(o<$iNeSBdI>V^NQm^jP3_lDuQg7C/#WAgNN?Y!ph*VVO+9,*TOPOmi9%_T<6"SZGh'kjegjigHO/&r^/%alUEk.0`jl]3DBpO9icsSN79^2_F*e8>Oli-*J:Ecf(DgSVFAlC/<-CQK:0r?_?$'B"_Mds8&#Zl.(?C"oR%p$^lM-m42uJOmW-<%]pf>HcBWeSqX`tFn2pl*X`[iXkDO3@8$umhGl'$FS&pH]h=K[&-u"RQ/?MHpTKH`hB-RLY[sp9(ohb4ni,rs#PV:IeFaI9&r5L,m%YEkEV[T[N\IS468:rm\EH6JfU"b0]o6]0At\;\W-A[Hjq4H=nPg"*r,c;UClWVm5Scl7_uXW8r#."DeTG_(#GH=3Aj(IIFs,rr_D%%4DOH-D1;%=0h-DWN6"%?-^!a!d(C9_hAVT?io:>`u,D+d18@gTH9,s.H:9(g(,b<]^(c8\Bm!<fWff$NYK6KXnmCpfsMJikd>sW%M`!2=nG6MbAh]BTXa[_QoBQ#%]L?S[:A7iE1#IQ$*35b.Z5\cM3O]'L-B2>$0&C__RLr0dgRZDsS)ELTAu<DASu4V9EK9;iV/<4W%P]]jj5<b20a(r(%VVG:VbAGl>(,78lWP68`o..a%d@.]7&<l03KFsN8eA):?lG%;Vjq]?Bg@;fR$N6[u<UG%5c&dL3e,aL^)guMC%Mt.&mg72S,OLIC.T/_K=Y$oCQoP`Ph(.1mBC+&m[`,[$V_I@r_]</2Q^4SP4l+Od<_MeRKdqQPpiM&%*<:t5,D:(PSgrHWWG2J)H%!Qof"_iW_!*>TJ$D^"=OkG-l3+"Qgu<3G%G&%4M%@C)H2K8?^Ui_Xl&C[CJrqdHWRP]VlQ&-^(f'(35:#sr%-7ls_(U7BQnkGd1s%?J.)\(rBIif6D3Cj(,(:c'#c8@>]Sh52,Fl@R.35UD;f*'LRsBp1h<@rrj1>Q@/Xp/9PB#mg_'+n@Bhd6h#;RTMP_dP&cOQWih*n%k/JXn#VTp'7`,Qo,E\Zj5t-(%WM[G@GI,QG>XFPk?"jVM]20oqe>(W6ZJqEM/\#OH`i?Jj7DK=CZ"#]&("*@@@7R;@>q=6p"OZek%4GHK_#b1(dS'=!^pH#?PX7d<M5a]c"Kp+J^p,MO7m%1AojK<0L]tc`"!E1K"SoI.1Z;KDjAXc($fG+>%RA9tOED?%MdRc,8K^s]0%5nR0iMJSR=N*dkCJmo,uJKk:7cj]V3)]]b>>+`W'i)o8V1Mf6Mb!BYDF86l*Pd$Ir\@72)@D+G7_P?Z2KU9B+\hJKqp?K_tY+L12%[9kZ+LXT#G,N43pdt":ubLIW0U8<X#WJ7H9+Y6%A76Zd+eTR5uPDp>\VaIB$gH,T@_]S9\G8`=lb(4$(l<s>(H1eB;+kVh[n0IH<%kN\`23Z1BS'H#mK9oZu<?p.0D&C*YI6fcRO]=Wf$WhV<nf#8*k7:4i_HHcc,`P\Okc&]Sth]ue#F@EV[SD)lAK2m3gU0f>I1:KJl%VU*hoV-h+,LAb(T>X-\$;Ajam4ggfL4%lAJM]8:(WQ`b\R9KH#^n[6'g!o$-b'@adn>;FR((MW6[sgD7W`N-<bc0$SHA=ajku67t%IbBejL2:OIg=P07nk5g]?ctd\Gq//Cf8GK-\%ApERU>>"m;;6[]a\Iam5eHch^MXgm_bSl\uXUm<7^[,DrO)iDm<L,R<VF.NmYjh%]1Qi&l=i2bCb-O)`OG1o[`Uj;3OSKa;cB+(B/>h;(E1r5%,WmQktK/Ik@\t_[,J)<0Bm'mN?pY[)XFj>AS\!q4/1WbM[)BfUBD=e%I-TQ487qUiHEUl@"64$6@llR60K#?c);C"ToQ0p#$@qN@:n,-MnRu!N2r2MJkn"/DOU%tBG8K_4.;<>o?5!VqO1@k)0=?sABd2rD%<]u^4]0V^rF<A9pQN<?e?a[6*ZK,(98AAeBMa;49;9X.]e%a>=WS-.`9Y9=dC%pd:4#?mtF7qjKV/kOp'e7)_>!Sq<oSg'ObOhu;%\U>#=(PPf&8e^IG<2Hpa5&M@3q6a5TSo,VQ<][^6TH"0@pTj\c-LG6<):7FF##AOJBsg/10.Q>iWNOH]YY%^RjubD!0(eNXW>%DF%CY>[$Hf]#2Z28e=8p!6Q=R!u7H<GU@q,[@!HuTj&WLj!05"@(sUcm7[<2#6D<Yg&]Q(I28b0@uCP$b'!\W'h@YL5fWW`;8=F+sJ!%?X$C-[mJ%JNdN@JWk@XRB4')l?_p*NnZbD17@WX\X#?OJC`O:D.]j'49.sBGQ#7!*\b`sfl`$-%Z#5&;Bp5stG'VrnBf;$:o`nZ7%q;J[>Wq:1'37+!\XE7mDd[b]Ro[H8IWms2f[N=5]<<F`$VY/8=jXI.VP&Rr#BR2.^>%k=Uh^_pG]16MJQ(G2)aao`Ff?\"OT[N^K%iVY\l"h"-6Fap<<FFTXFpT=(&Y4Wi<l1r@KZbB22=:;0Q>I`DUXSGqD+K$kC>ANR(Q$2ku!\:s1hOa"rESn7-a27N3I`]@Q_i=6Y%e*5nfDl&N8T=^[e8M.$thm[@&&l@hF+[#IebPmbJrU,%RRtg96l1=<uf]9iVG15W4WIRTZ084H,CX9Ifj(N]f[Iq%7L.YO]8Yn+u%3EGD-=at%K^<.<hVod^7<#8*%dbMk?Nk;+m_TTeg*\1M7(hoRkIj`[Ninj81<4h#[R_iBXG+DXehd#f\1^*u0L/qKf'mJJgE2hU(%gdkkM=]-]UKss[db>qi*I8?\tX#j5uX`RLs?ZoGLIOoW+UDHh-4L7r@G?6hXQG<:M_J06m>J']WgX=umPh5o7^K1cDdZr:_LV6XR%qTB$_hWiX(c/W*.4.!9Lm1nfpkNVB5piR>DoE0NF+2=_tnq60Ybm(fi172>uVV0GUFkuXg1W3pambXl#IG4Ob\k/\"TBdl:.h@2,%%;Fef-2?^pokD]slJ\*gSX3sWh?)Ru=DVhH_,"F!J$&Q1,okC2O/Li@G66VZG%PsL/pm6TYIST#KDT\oZ20qQ'rP*F:LEkA>8G8,%SmR`u/MGT9l#lh[QO83<:g."GSdo`+-2jXc"MXiHJ(!!VI/8+7'i+_!16-d2<]6P$hM10aY,[%KpEX>1-Lg8(lh1/uQt*J%g"hF;%^o-;liG1UGl(57B,mJEAT9<eA.fjRh4$n4@_.rSar2SrEil,VMP<CL0f=\e;kMg'"+n,/qo\"qd:!4RNHb+L3Fj*((W>RWN/1rRi%d>+.%005:QIVMo/<^W`r;L\m`^;\UmSp:]"hqo7FO[W@u[8]1;il<pD3cbM=EAe]1(5C@@4Y'WXZTBJXXe./Nd6LCs,K.U/N*Ui"%Mb\G'C<#qDgnE,aK5'Dk&)(Q]mQccHf'N71F,fkE%+r"f1/<%Z?,i>:FE($$57OPjS"@@\2"16[hl.BHgUk6n@0l]]#$*3QIN>!V%<Qb.G%[_0`D8f+_I&5!]$s0EJ<&j%jXj,-d4-fN:5O)n:\1`1G]^\/VF`19kh/lYc\IGVSfXid3<Q_so13]tW.XN"kF,-ZD8oGf(%><5dK.B[[Jh,Z:T#cna'%Nk\8Y,/FQQ'/ZpWV0^POMSj[$*4j>OUILLl_[ZFq8T3@c;sJ<p(^nsQ@&K(C(2bm9n,BmDiT)N'2VU*%@!]l[702-?OC.&m;GP8\RK%:tHbfP\I_*J-!*daXQq_a1bVc8!QCO"qc@##2:%_)j$CJEPafKWpp^n_&0R%,X',idQmJ@N`X_J_h%QE;#H8&.SSbs%F'gT1J95[+s_e3ML641'eo;FZUO+nnheV<s="pWS5C]T2C=-*1[IDskg*VFC(;$2g=4akY3o`?"78HNJ>fA<&dq%Z-^C6@8BUqaTnj,oe;Omc!<Ps&nshbo?SDTmbs<c[jgZ)&K=N=Ot^0fr$gto9_W0[IPB382N9/2>DP"a<.st-O.l,+LY;!4#u97B%>6o$e3kgr3o#$l?1^ToSg)^\Dat/8S]o,0ei^2UJAJh^$b.bH'O8EF&f(R"*38YCs3=i:?h2"57h=lJ';W5pV)j+9@e!"cF%ib7o%Su8ku[.:0D-pR'AGm4=6CF8IIh-"37!dOH=[b2Tbbu/hDIPBV]OkrC+]j5gU9&=C]pIZ(Ao533`VcVU#Lsn2+oBP<hSC&aOmJU1`%q^d8^dUJGAePEKW9_nk6?7*'b[E!.r:'GPq)XL5_[P0A&=Wm11'Hj9LN`_j?gDQl>!GoSU(h84a`oK>;MsH\sfU>J86N0(_4fI^,%9Jg;JI^_!jjB!j\]oGJpj7^+MeBLdf,cAVX95t8&mTEcHC;YR2J7Y6(mfs3L&gr-Y31V2cTPda!^(l\DjH1ITg-fqF6!O3?^3"4.%^\7RD$(;:K[tK)-1,n-FKns8Z:aEI9^bII(%Q$BK3rNdb!ZckXO3o"!?1J/;k.Vou0R;b!,i*=uaH##-oaFNV]r0SmgJ3*NV$'e(%BAa4BWkZ(\5go0?UF(L:5'B5K$?kZMd7'4j3TKZ*#98Y@TALs0<k(LejTfk3-kb<!q&2a@\.KU@S[TrB=g$_:g9EAoh1e^7ic/dj%?Pec5ceXFtN43IFE3/*RLnJqs-Ed:VY7]baYrLV1:7S<A=b%MCgjGol:2KiTAUec9@_K'do0!aqU.g"7ZUJahf7uGWir25CmeBYC%85"ZkWS'#:ZdH+7jZo=%p_<_1iQcD;0SC"="\=J6`=""<`!Rd<;0h0p/`RF0]o/H?h;0qD>RVH,hfgbrIIC#JB.i=*2l)A#:6>@s%_'hJ??F*lr)nt^6`g9%;,i/ml<eCG0JL;9\W50>^llKu@MHcCY`:8X<*tBW3HJ!U0Z2o4:Vh`2n3#rAc!5!4ZJ@Bs0q*)0)/j@b_%=mkhpI)d%aects@^NXZ`n2`o5''Z)&/G7!Q@rFGT4C`>*c=VHsr?(UKQo37,I:F(UR,uf9"-nFNZAVlR/hYJ;T/h*3ht)#2has7e%\eG]!!Nhn22jU]2KOgW2$TC52-P^!8DZ;jR6K/?p"uU78S>K0,^PBE>%Yr>b_nm@^inf`C=I.cQjj3u4+W9q1>8jb4S0m\6N2e,@%ID5Do@JJEk(8"H?-tA"NqE1VTk4ASd-#uM6^`C]7\0;B"=*j1fmN:J[C!_J\_8P<8oY0?X#PFDh]N[BjLK!4AK3$b_BHWNu0D2m7%)DPb>V#=l^3tRG%ZqOlV''Y3QBn'Nb*(/$m:%%@p8%t*(P]@:[J[)pc"0d'=<oY,!f.LaVQtL?)IO&89G[h8+TpctGQc6qD3I^],%[L-C[c\uelITHYeZ;Dh&er7qieMl[J--4J'45u5%Z:W#>&_1:@MeeN]dmR<6n7\hKGIf*0^d0WR`Y0oK1t(+60d7[2*pAB5HE\Q;%``T3ZYeYWNp;e&+be61WkZpS[WPEV-V0TPb=X73V"+(M^'oa().[$p7nV8(@GpOYuZ8'u+!a5?2^4:3j!+lEdF,*r+hIgH9U@g\d%'19e-W"ogZZh6IL0#PB5S',e&RO8.Ia<kNH/ffj.\u14$l)5@L[-rY&-=G5Wo\H4G;=T<DZp]!uj0--/4<a#V98.Y<*@L%)F5-ig%bb3'=1:J[M/KO\7.;YcG[0mRY49Mj.KXhn,8)A<@Mr9_V&:.sPNVg>h7HipTiKc4(OTcaU5?t&)p?F6@DPr*<?6`2`DluR"9=s;;%Eq=*_)T=*I(7/OW7hk"B$/G[A_%O+RL#<i=;NF/hb5>Q/$?)k9mR7m,aR\(M(,d'tq\Hl?+i'D]HVPd]BNUfdoA(T%CW:R>4W49k%U2l<KJN=QX1q\i0[8*O8<93""^4/@Tmm(WEo_>1)iX$\7UQ&^c:IP4HC_S+=`qJj5Mr.WMchHIZL(E0Mh/HaQUlh_)dI;F#V&3W\%2?BOW!_:.nq2"pPS8B,BXXCa1T"?-iiE7&V$h/T.`ij<mkK)%tpJ!27Qc^VYGMbgRh*]FFj&i*05(%AWP0Edqnt99'!IbLIo-tPN%,DJ^7#uM9l_S:0&LF(`P<m30,$r"WV0ZgRHBi<oep(P)_1s4*$2dO8#!''"sdCmU2Pf`=$7:a;;Dka>h+K@h5Slsl6R",ecZ[/El%EmWNj>F*T44FN):E/o;b](spR&WoVI4DWq22nm_#l\oHql=%k[AmtF^OtYF6:G'%NTBRLKbB`mi1ZunXF6IF[qI\*:;Z\;-6Pl=[%QUjn!LMib_<sB\QQK./TKkJb@[brEOk\+<2b+N6#Mm7?e_DCCX[c#duFM=$o)0C>\JtqDRKkJb8B6T<(6Pl=[kN'@:QU;R\6&0W"%&ik&?'BS']mCusF5DO,q.-%c]P6a`V-IBk>A_7E[T<e^a!F[S=RpB8eKod"WIk&9>_akYDQ!W[OVr/,MG9sNTom_bf.EMD"00*OU%[9$d)5']IgKA5-0QP.3bn5^?1$L>%ED#JK?4;EgVnR3?mn+tRFoZ;"nQ?W<@;%H]oA$qA%Ii1q'F%<BbQp.%9S7cDD'W*[LL./8^%L^HhEZVV'+R3OaN>[bh4IFYTtIUje>e;q0Y,^_+5@*mOFl&?640#uiVifbm=]0&6"ZCB08aO-1,ibSc)bXl()N"`4so@%_'5(=!\%"E+J&VBLd%F/*b`L/u5Q9ujr*i'eVjZ[%hMLZs(@Rp<)6TD&,>o2YM?5\WY$@jRODV[gCCLZ*e?,5n1F4YSBs/NZ;WbR,:m,P&jP%dIDl]i9e\oV8LZDoRbl$@<l7P/?hC;CP4gaT4&sBN'+i+nGJVe=3rEV2/OgR%t'&j-sS$G9F$]e`T:2j8n]-K#<p-[K%dXpK'D;*%7[@E5M-pPaQ8+I1Rq%])3PEh%%82fiUW^>#MTCNH1nlqW$*R*SA)V-r0f_/Y."i``o46/]DJkfs>Ffp=ZY-$/Z;tiE7XZM)G2G#<%4Bp)pM.-aJc`&'E]LYgBI_>IKD/S8+cGV&VmlTsQY2<A@p1,ff`A$m;JA>Z'hKQgI8)Ya7,>laU1GW3%cU-,!:Jfrh'Xt#,L*1sA%:#U]dQ,2f(Q5](u-KF.X6\C-eF&t1@A1RZe3E,^sP@IVXa-gNDBDQlJ*i@%HdZ;8oj'5X*5',@0VleP]*7&-jA%UBZ$2+)N]:L)4%kDr'l;oJ0ca3bs\T8]1J\]Le#1F]\PX.p9g6]r.7,];da=9_s1LeMK:SMD?P%F'5/,K_$haUUdN^@hUQ1''EO&<YWb0d>Yd0]N)U%A0Nf"bY!%:9'd`g6tU?M4,<mUqufn%[nj`X5#2Jq5!1$QLm!KNG!lO9X3GQo&r[,gc5F]K&)6H&8UBeW(NE*)2'RD<:cC'(K%jGb%+-q[#jt-*O;955nMpl/c6YG:0UuU=2&olJ(K1r)j;*1Qe1*T*7<p%G?)KBu3^-@4(@es2GFNJ5n@X)58f]S!3p2S\YN,>me@S2@C%er-n^&/d9!l6nkig(+XE%Sa+tDU^c,ekp9Y7d0?\LCs.:ih+g]8j6M<>1,h1iNSVfP>R+u_aVeU(c*8ZcEhJ$`/U9M&s*V?1F%%\%HoV.B_+Eh-%C_XeaG7+8^<ok:,36X15)3[MHoN4Yr2q\H3ZlXq6G&LE2"n3bb@;JUZQ=n2W/F$gC3<@o&s80c-do9t=7&P*,)9`W%aaW"d>d4WW",_^M,Y#pG-[:rsFdn;\m0k.`ikt:[,a/W11'GmlA"?&GrYR!6"UE!*mW_4ICVeI+WBW:/&.uP5<T";>I0.sG>c&+b%BRM(^LhosnPA`OY'9;78,IaGl(5I.p`JL)h9X=mq6P?YuF<A:2gjLB=h,/:f2oMVKo3dL87fp`bq<^0Tf`1<S(e;e\Q3Li$R!Rn`%;#B=37GCIhn\<-R%'sHKNtr5K8?GWMqkfL9OHE_;HM%^a`61]bSkMW=_tPE3;A%(t1/]i6C_@VbLhHXE<5de@8.@TaH?fG?ot^LZ%[:'*<jj7j6mV]Q$dg^64j''iSgQ%I)k;S8m4r#\H/e^s5F3]>t13"Bn(!`F]P>6gi33O;X'eU)dW,Y_o#'NCnQjOYt(im1;[pb1F%nP4`jH8\<==%;34ebMsu4=`=HFG)Lj6l,$_Y+Rq/Y#Cbifi[3)Sn"oJL4e*@L+b0@'XfFQX%fqnb(/I0[269)'7FhmVeOrsSFmnH%%k8Y%qOi&P/c"iY@58rAA8WB:CcAPtc_]m[:Usr[CctcN2GVD!\c,j=Ej;V$P3^=bGNJ6nIRh$&.i,F/`F:""O-^EJGHAV/h=S]p%=j5!YN>7V#[[+K8^:DKJ>rcmp']$lKX)H%6I/',1<;foiYGKr=a_j$\)0W]m8hJ)-&5TUd73OY.%PQA8#$(L4RUN\=CiYeemk\0N%m+IYMPMP`.C&:pu4opW!a#>*+lm?<H.pZCar<g]Oe#'%X[@`5i%(k9kYe7<GYRJ/;`J%ZqepVoNooE9QL0ZqnQgjVo\C0rqrAHSN%o.kQf-*KK;<I-^!9$gjHp#I(@o+`A3qj1QIKMd"S#VUt@Y^FJ)>*9>c#F^](C3A=S:X_CqL7P0L`U1*nGjPH>CLEY0a_X%dcUK+!%*_iFtgps@TfKE9miC$*]aaK]VcokI8Dj'_`Id'rpad_Ah#"6%_4QOl^W-es-+rP;`9I[i<,;'3Wo\R%h09Pin79%at_i1T#6SBBE%+(ha2^-iF@CESQ]DVQnah+S\QOsb947Xs*o&%RG9g$Hjo5YNMocAt<\C;Tc!FFLcB"*^W$SPA8`n?VKAS6RtC?S5W[P:'jOdflpV%:,8:kaBD=sRr5=+Fl[@"^WD7l-BFQhkAh2;/tKWC:El:R0:0u1_MjgUk;R<S9K\fi0:0sjH_"7s*HMWp\THD?gW=$Uq;p$bEL9=/%e+lS%7'.i*:$98@3pCHA5EZX!4d4!bo95g8ai7h%e+r+RKmQFeACL@J9#O+U4I[t_$LaA8FC%qFnWVs7\5*s*@hH$2U2t.@Cc]=9%3kG/Ga_X#Q>WVnSo#AeKo0Y4!1GWi+*QJqB[3R/5AFs\!5MnK[4cjLHCc]=9\fpg*NfZuu-_ZVX\jsuAj-siGdRBX,#-oI_qG$J%%ql&1iILYk>Bcejpc:q3X">D)GeNEs*=`ODR)tiEl+g\!#@FnIJbJaOC4ncUFF`sAT_sXSspF[e@?X;`>'8G@F(H#j-^GtE5#<OE-%9)W_L@dldVOK70l#mtZDZ@)X"=4K`6mi8ul2E4W[#bQit!1m-76AQ!*8eI+0ln@>f:Ht'-Se5gsHTb0'>b3Z3SoK7!s&#"7=Ia0p%Jo1)8`"!"Og@K?$jSan.fA&fT?&WpNS_[Yi0"Qt2VA+-s?+g-XUL&$)3@2K@U:YYY2kOmRL>Og"YY?:l20[VR)1']$GO]AA20VpD%L$S)d*LW*M0?(;FHl723idQR)U-qDI]<a`I5('6Ld(&bmfSO^$3tGif[3g`PUEpY#Z8g<CB>Es4D;g;CQ%jM3Xj#Z3laX)lA3kF8%!d>h7_*lHo,!%VFkKPEl6W:l]g.#97ffo6&c<j%7&0%no4N;7e5Se&eEhqMfJ1Sj'mdU2:`:?VJo.fYRPI?KsnVj#;9<bWD0A'Gt%`"Te?.b6b>PIP;S\gMKlM7)O'9bZUEK_*cj:'F$b55q*KIV"b&';.7@0lu5/&\)oN+sJQ5M561?iC'h($\L6]bf(P"C]JDIdf_F)%]]U@5S?!2]PlZseKP*`l\A8^tSO?R**d31.mD"^Kq%tuO+oI?D`&$h`\VOf0VZbB4jMIF3B6X2k4RR)(k>Jn-HP/\E).FsK/2HJ%%]A_:N\tS;A]@$4#j4nUoC'j<_'=m(^Y#tnbE>PMl#2aA91\5V)Hm52Po#C-Q"#o"pEDp2&\TI%0H,8;jjpcP,p7L9,_M99*AkrQb%E&VUb9uP!(lgX:9;=3#RpGd'95jmCF&o/T']se!#Gl(\*>LLDF*tK`\QO[-'j6sN&G_XG9&lJ1X21;d3jhU#IOn7>lFa7DB']\Ac%YKSX/FMjAhDe?<$^:m.on0V0KPA_/\SItQ0kY+H@@^9o+>aZ,:*\>l_';G%eEs=T>ok8D7(8Y(:a"?*eCIL3D0%.E'->FGt=;')(%2fP95[D^7.]nrB"6uo>\>sk7E&kT*&9ZJjN5/(KLr-``(/+MK*alU%h#-QV2r`Je4fA$'j;[&e7FZZ#W*j(q&-C!OobiSsCE"_C9%A3i5Y"5>L22.D*3_)$n/W!Q`'a<EktL'&INil;2Fotu`tSb7ohVcYM2p9%';otBtFk2Q3UHM_8NK5]Kl1q2r9Ti.*:2Ps)gi$!YW%Sn$>q<uTrCjr%O*.j(oQI<BnRLT9/(YcSW.Da!o8>[C<I)IE1$AOR$/<2^'16(*5VoSe6bH/rVAmY%]ti.T"I8k0AoFF3lPdShU"%r74#I]<Bo^TR5<H+fT0'C2c@ADbcqlEdOp":R5L&Ie18kOIDIA]lC4?c28eJ<,Dj.YFPeqW_KCVUXDe352:3MV;!epX1rm4\iZIs%$`MS-EMZ]^.m<K'9(uWDqR_4l>\U`r=`I)W#+mO$hcL6Jcbb"R;iYm7YbYM<,%)*k(09u<aoTO`gAS<59L>du(%8:/Hb%./kU_H^%T=C*$,&WnRVQ(O.C/?AE[`JfaR&u.A2@W&FI'S7#cX2R?[47Q>U@5fSmc9\4WD1)$Hcc57R"9d*[&m?B=].5^8)+D2KMUbu2P<Lb%8rKp].V`#<O?K%0oZ9G=06n#[dlT,H0&eK8CM"/FeA+8Mp`ttQcImBBI9L&)q+$93kV)=b?!<1*T:7/ik,S?`Z/@NAjfr=>D"\4G%G9\XU%`p4/[*GrFI_&f+Z5(AtqAWgN-4jL4.Q`+YaRQN;#K?qfa3'TJZ@49eaE$J^7$05_3tVsr9giC5W3[7(9eJl)'M$h5ia#r'%GM#XN)!K*FkK)1Gr*XJ?S0&F46N!oeJUhKH0[:d7j<8_@7JRuaFlCg5%_o\6E['12fI:INc\QP:!Y4hVI&6/<;l-oc1qu1g-Bjj<%Z3@"nEtFkt(3VHJ"E3'a<:FMu#`4(ZF;-_23A[@.:A:2$=lgM]'l`rE<tlBnb=ibYn9^.MdcG#8,-o%SNCRjH^j>*EaG/gI`8T@1%Q-4Cl)mXK%X-!Y06QjDRdY.cNZa"Dtj2RDtZ2gZ^!4mJfln#q<)Z4XV?/Bhm/AR@4k@jDH86LI?Er_!P^`J.Qer>!i]:gE]!Ck<7%oKT64C)12VIeo%hdB`hJjo@l<,DTe17a1rRZMG?."h7"#)/PT4;EhZ^d?StG03lXY<0N)JD+2($DqIVqPIZp=>+",qq,0E&I7aIe%V0i=<,>\)4^,T!"d4aVQSu)/L>fu4J`W!8<q0Y?%W-m#[HtPdjn?\hJh<PmGCoC5"p#Acri2qGQT+0nmf.VOCifL8)aS5Ob2Jmp@%I7ejM3?'Hr]m`>pL762sIc7d4`Q55&,8\3E-ZPr/rVRXYk>jgn/S5[K2!fFeh^FmtnTQJfB6(u'f.[&&^Tm72AG>q[(Uo?LY?uP*%*N<TOp\KU4f8m@-FniY!;=c<Y]@YBZ*sOK4Ho62&Hi9JQ4hlP#bTDaaY@"dbK<ioPPjZh7onsCEO*%R4ph1Id(\FqYrM&2i2g3Jn%i2qGQh8^=YaRd0-Dk%m4?u^",k_`B!Hi8\'b=ULT(S73b,OjaNlPI:7JA92s(unr;!EQdLoa@#m[o,$K?GGu6rVSI+ins&<mLB`M%8t/M#-Q=Q`QM9<eX'b5-+)nDj\/X@Q+5[@uqY=N%)CGFXp\KSR)0-g+jEpjBDtOK@j,98u:_11gO4^]Dh!5c*X'[%kV],itlPD?-%D.6Z!r2kEFmF\XirPnHKUYb;QjZ^EKn+@('eM#d-I%tj,msTSYhWs@Ei]ZGM5;OVb]mbFHZre^@7(Uu'HpUQQ[@Y1IIc7d4%@On!%:PKCneW7>QGcZ8j@\)40o"BLDF@=H$f')ku`JJ2\hT%R(1-E2!DqmKWf"HM5iG>rrL@%qXqd.#cB;^f?Y?uNZbC(bikkFrLV2mWX%/Y>mVUjN'WVsSThnG)bSKhpI:]lMVLrVSVjE@5:UHi5/6/'#<S0@K:)Z1%?)E"$$]qUr98H*<hl=Pm?]\C9T\]%8St+Z;&kZ5`=?%^[MsWNalSTlfY.g)k7o$L[j0c(V[C5jE.'9p\KU$l:91f)?4#-M^8=U=Loh#s/_HTceraY3&o8)hTI=&Qu6_i%%O7e@)6WGf#IU'%HP1`>(HqU_H/ccH2V's[c"/LHX(pKSMS3QT%V(1IEF#o)I,p`S*q[$LWV;O,@:_+"G^hOpjDI/(=p4Gr;DX(I]3/RVQ--erG8.Ub%Yu^sd2':)lbD#cRYKU81]--IQ+6BE8IgTBETj!Z=gWS0,Z2.Cj4Zr^-;nkP8mr^Lg]GZKiS*YU4Ro0d*Q']A@kN-=Cr(t$)\>ULK%hcKFB?Sg=0N)KL8F`Fj^8:Rd!f5B=8c2#rbZi6N`DRHjHeFh5Ogl+A1XegO'n*Xe:5,Re6p-X7^LmDRpDHpM<?_t&d:Ko:4rVL>L%9qL)P.Y[hQ;#0dm-Z!S)BAN!63T'3Af?dlNdne\5:OTo@Yu:ZV(>!WNf3.pbS?gT"Icn;ULGiHsB28?-qRWt*=76Wjc2?=1#L2=T%a-I+i-i*?XVAJf-#CCpD,4'jBp1M!CGpX9[dZ=4h>lA40lL&+kVU`qB>\5;DrF`]E9@Y__FO*Ph:&QVcPU"teG1\!!M5bmaiZ]tu%e8#%GBtGDZNi2b>dnYcqA<k,tkuc'`D[C%#NtWI9](f48X42(/opNe>mB[c!W*#PCb4XB[[W9(8C;l_B4=OWUa\T^\f#Dn)lK07P%cL5GG=28nMD5!dBB[2NoT/n;ThEGeY*i-BC<V`il5qg!&IJpf\^:N"6Dp[:'AepSRQft5o6bVlMR?N`ucf8>bkIrfDcDfJWl^Kk0%@`Q7t]`gXn"d8Tf#%tCI5M)7C:Dh(=]C<.o[9fop.V7kk!44i)@VI:i;jlOrh%c:=5+WF%MpVD2s2aP.m0ARIK7h-%qnY&fi(:-,%%s%T#:@XmU7H>M,(VVW=i+R[s?-^2gKo_Pp#Ob:0IZPlM)i?^5>659@1ZH]#74.'oO[uAU\a<#rf`<Y(p<@'ARM1ApkR&Y"/hmR%%ln2MRs0KMbdE+\?'HnFSiTHUO4n`2Npo*/t)i:/\\KGfsJA,LK;J%8F@D]Y4,r1!SMW-+do_(7;C68mYCol3[1;A\g>339@1o:_"%[]sg-qaEUn(/a]4lCN8YTKUK;7lt[Rd3..9_*P,-Y-/Q2Qa<_G`=IC3PJ>2JY&Q9PV8E2J;rp#\^Fs0TDAngG/n@Jk_,'J5#RbV,%Im$o>q`ts]3;Wl`1YN!d&<`aEW`*!Bj;Y?'I"?_sgrVW;gtYM_5ARmlRlk20o`;n@MFEh&s2/#(0>Vq)g(lu+`Z07,\F]=a>BQgQ%c:%5+Q#(2ATn:H^lbU2BFd5&=DTf)nH!.u^GV99dR!,rDb#R&*=5I/&Q^+tanp;KnGPgNec"$"YXD<)H3`tFMZ@AK6$;p9_Us3$T%L"fh-:lauC]1cVjFtK!d4Us@'h:GE.oIJb0fNR%B;=aTC_R.?hE;KmH*c#I/ZP_86jmfiD?bS-4mM.M%/fm`[m1d]0p;5-ZHES9Z%UKuK7<JJbD_!!SlFn<.7HW]7h#s-u,<&W?q3glhm(Zr';o%W?:8Lu.D1i[TK9VSTg:bj<,)7[215?AW:<;bT<"1Vl7o`<pZ&eL?T%^)V%#aV'/]gJ:t20C7a^$YB],P-dTbXq^8bd&cnJIie?sIZ$iclbtc.@-,toTAia'h-hRIC_9$cZ`,`7<ZAY26%.QZDXZVb9eQ#d%PkN\^!Yd[2D685\_P)C$H[W_FhpEX10?UqXc+m`*d5%hQ]<d+Wk7N+*=$)7\n`;Q6B81:#N5H+iT)*H=K1.u8&+\aC3"X#CTEg62%(JB0.PrZE3;i>SI/c7#mQDDY8rL$eM>"L;O4mf,4F)tun`RCehI!VAfcH@1%;+iJ]hX%$nh<n0U.J5HOC2r>`0q5q.*EumhJX;oD%:k#?jg[=&NmPW]J='s+B>HRALbLY5!fkp^tp%NiJpKlUtTE!,26)U\mD.W`j>diEX]"R019q^$+W3k3Ub]]\oS+!KQ:A;3f]X0Jc%5CQs$aBt0rRF8:fhAPjrHE"rqP#+f\9$":1]4p7c8>WfU:%on\C<`ZQ?aH<f'tIFmKnd?*H^Y<eE_(ge?,1]fG\;E&7CX="8'a#"%a#Y3KYcfWW$AH]_+UGbZX)NHlopA9O8uh_#K@Qd[#;]E*Q<Zu:dbFB1f':/nF")J0dOkH%DnSVJ]#/PKhbBC6=T37(fZ*%E6?s\o%71XMArt#^nh"tOcAQ583X4uke4hYlT[^B#92[Z2Ko;C]@PD6U?S^6Cj]3gP(V:61eCc8,S)IRg9qQs>LAX/haf3"1GjYg6?@"*$s%SC1!Q`m8JD1\HdYE7!Z*9m8HW\tY>A9VOI/9#ESh2eMlj\ba!%R$kfeKu;-u_VFceC?`?OJ7eERVp,&-@(D38o/sFFf`FgY:fp=A%)p;$6F=PaQJoPXu52b/s(>hNSAm@.gR%<'^eNs%o3r:mKk,Jp>^Y3&PXZZ>2;WS_^p`jfl+5+L620`rlAt@Zig>JpS77G,Kif,#u%.p7,cV$Ha#N%8G22M3`rR\;*[O5/Kap,14%EQre4UCNknlqonE(f#JXaZD)LN+1g(QS@-?k@8%'a([/NYXI#HMH6)`Z0&h[%uau3%4_m_3K5j-2?]/Dqk[_sFS2lcn[PC0U//GOC"B2eaU\n"[fZLt"*`Yh%Ms=VtWP(%lo=Y&I9\`s7[XMM(<m0=>f425aqD;.IWLb)J%jgtDY_TS'`?88A.NJ]`;<\$B%:%,1_]Pf>IdY4dN]oqM9(UcKs1$^Ns*'"cb9;3*N.<]5W45DD?2XWd"(K]5Ee[jH4K\!%bo^A?W%K6"@\QS%+FVEWXH>+?#LmDgDs#SP@?`EcQGUXhO`"+J2_"%iQ\?[R/Bc30(Z_q^+*&Nd=8KM&GE;Du.1%=[khs&%QTh>9<mk/39Q%h+kmbmjXA?gMr0[ccKLI87VBB,<,:eI]^/)%`d[T<,PKT'T;'%m0q^WnZ%AQ9Z2DdY;q`*5>R)R?iSB=3)m)RYd'>uid9hR?qeCl%nD/#1@0G65hiAc[8>M$%.cc];4fb?[T6UZ!$j2We&3L0;=[0cKjlX1hnp#1g_Vh,)_8f^[#)_XinoJYb\\A=naS#WC4QcrR\c1`?%IRh)q_JjR=%R5Zib&"\s;OXb&_S7k?6oP+u(*A/jmW?uhDPN4Fj40YjCX\h`Z1'd*H73@t\R,'Xl5<_(GK6%Y,9,GD4-\8MRL9n.%1ZJe]%-/^/4r=Ak4cs&g/K;rra?\PG=8-?"&#J[\ohVeAni(8B).+RZH5m`YXGk(;?fS23,!Ear=CBCt:Q@(!OZHPf*NOOHf\?Hg%2MR7f2)dqDr4:JsFt?,W)R4@;ka5`O)R4A2rF<>7r\=0@;tApGktJsUhGJ%XDLO+DfMj?"V<?PRrgZV5IJeQ4#i6/rS#g(<ml6SX%q.8K98f>f</ZIhpo@=6I9eu?RHZ_#hST(slcacWC-QT*%2*s'/E@!`m:\4Y=.n?/0N]9P#8=[Q#i?8*G=Q!^:0fXY#.23Z#qOoXr%Oi.125<X%7/=+<99K^C_TA4Hr_!Eq+.e,13@""nJ#Cc1tkYh"6UW(8WSSmOu;n4&MP);9mUBf(Er+7F#+7/KG4uZhbV!^$9#8q/M%i8Rp-];?W#Sk<&NO"b2]kN`$*L]1Bd[r![c_m4>o&"i]@I=EtuNr*'^fXB2[0#m&,_F+=^o(Q)$=VCO2Gtu2beKl,pj+<rO[#OM:%-i0.44F]7*.f!]LGD+gI^&ahE8h[UOB^MUqIV8W']5sa`^Ee%JG-W4Ph\80h+o)oX:W/:RbJ,NO,'LWBk$Jk9[EA+0$D*'%Uc#kG%Jp7(j^F=COG2,IUY6pkW*@(%e'0L@&qjWM8rDUu_Ge/OMhRehq[^g06\/&U[W[)c_f07F_pF^l:n?b[Rc9uI21`><hf?_Vtb;"I8%jf9RMl.Z-E1QkALMcYVI`Jd'[^U9\$$cPcmMrNpmjI>a,BCDWZXp"ro>/1$AB;_*!4+5cJop-*nc`6Ai(PTMKn";Y<-s.Z+n:YV,%UH<oTcZ<"HX.WtV_7[;VoIcdX5d+_FlLt@4ISMKS`a<?lBPh./KP`'F)qgSQ/8STF</Feo"1%[hV!Zt*PAk/*/BtN(]D?[4]'79#%e#Ua:,:%@<+5FF\4.:BSEg(8$b&f^n[r?]?ou`?kf9rrMYr\^tj3E+_<Q_a%Nr>cXdM-8hd^u-ZqA$QladdOQEVN;sZ'*fV'=MG3%$0ekIMo>fFk:cq9q;b<;-!0/((6j..2@CQG(-jIP5PN2V'0Ol?/HmoG@=c(63^:qm:u+6WZ!aD@mtP<%VKe43AHEqFeml9uaR%Y4%fQk\9rP%pf!UVQ.H_.<;d&7TCa.J:sdZ;K8_;"KgO<2VCqb!iRhG:[D\K2uji,fQ-6pO$"ProD"Pu&G7?3K>0%sNMrEf&Kp0F_K<%0g6'%>1+CoOs;i:SjMhnXU3#l2$9sUG!m7Ije%`Lbg5'(8enLo^p0R]k'=WKkhVq\H_.;`gNkjm$=55QZS;!`?LfM=C;`6^8rI2q%.!QZC-lf>t(?ai&B+(P3;(SNV-oem[7Bu"rXb=-AL;M?\&3a2ZKD,6E'Xh<T4/MOMqpr9C]3N?Q5,!!oY\Ce!oTY94@j.ts7'M';%A"b:PF=aG`B6YF9XiG(K>!>Hs##T>#2Gu>U*?27$5s".$"4]+Z'bNpre6M7sPgLWHT%jSe4I2$IOeZr+_9pE(1jDOOKa>+?S-E:M%/WK6;O[GqLi/Gb9L<F)8\.O!pe.J*B\a$rq3Arb$03Y_p_i$@<B84a^X#rUN.6Ano.hD!Z,;-[EDii'ebOWP=,^e3=7*:XaG\G8_%qt@X^R>j:QDZZp.fA&=1G]sqVc]reJ$?qfhcNAlppiX-q\$DHG"Zn$nOj=iucnirL69dq0l(do?mLbdG[S^:Q*q1%c)nS,nJNU:8%T!obcZAiPQEdN5NJb$J./hV,S\=0mNZ`).W?lg@[7N;'mh`iCJ#S2Sk'R)I]E;FNGdm.=g:(j1*h\S$4E4SI#Df7H.$BsDr@@QC<%]e-GJjQeWm+t;O+jt7#-<+Kp;?4sVis6//n8^#&1@&_du`j`%B$nf%@<[kAc[;#pMc3hh_qa1;CmFOX<IlDN<jMT@tmRdJ#c3,Uf%R@VJ=(K24mcfr9W9hdq@T?Pfo+7G0_r;"Z4UO6-)_<eQ;&Tl7B\s+7cT!k`=djNgHiX:HUA8+uOF*Omf#"k`@,0n]@F&kKq2;iq3%bhtG-5)2P>-:qN\r$L1U'T/WtqPD$S4,3;$Xb,oSb?8P-GCodQ9*3,f9'lK'4.4ECP?pkR1TWB[r`8F)9T<D>BqD6G94m=#CK7m5%=ld"9^!*gXDJ=`n&)%f^(pshG1$_dgcXr3"XcMskH]?M@8(%;_n`:8<'ne#"e=9QGY&9/SFD9.D<%@"I/&RK!f[Y;!%ujGXm!Z.7%a3&IX)Q)fL*cY^+XWh/&THe$Q)+`">&"huDks#/5mufeQRf8,0Ye'DDcP:&(<p%.K1UFJ_U1.ehm\"W,Yse6\M9a<nfVElg*Sg@^%G/'WW*kVp$#FJ_UqW(@#7iStQBG:<b;V/`GO_dSPQ/Dal(7J1(ME@S<+?>@IYul&[Mnt.LA5M':jG40$NZh<WD-tR-cu\')(J,B&%9n.Old%D@iR8(]fnJk3(gccL0C#TRE9d%L:"[784pI7J.$nZ1lL7ZV[rA<irj)3njd7Q#;<YN%AXsdVbC@+X&?GEH=dkA,dI_P*L%IW?a&bF]SpG7CrZIr![$8TGuAqP&$c$p$YYJ/s,)LMK*S[/m+2k4[u`o\"PuoLl^MnEq(5a?/]5NtNG2`Jr2$RP2&?dJ1Lo!SPu^%ccS7["I2m._P)XXU@7nN>ZCDlqmp!9I]9^ICK[V+rJPOegK8sM06N<K[e@u&L9\(.SZT9fPcJj!iD(fW<GjH>lhU34&q5b/;<f.m%_&j3V8qi_Q`)-]mHA*q&V.N=hNoi>&C_-8-*7:;hn6hI',@1)9mUD^4q#B0$s.2;;\f`=A$b;HQME-eG7q]'EmZRuLRpL&m.,$9U%]>"BTj;::3Eh&m03#$8EBAhsL8C)(E7g>L=bIPO^:E5cT(*1GG9EalZK%gB_0eZQZI%(#\Ujr8DZ@Sg$1Q_k[>K$nXFKHTqp5Dr!%fEMRqCT`+`g9%KTX@""G7,&B:G^$(]4O)CA[]49O1iVaQH;%+F?kN%_bFE]?7IKh<&75rk1[sd<AAd$bPI+cd8g(1dWbd*a.0Kef%mH<.X4gkBP%YLB43VMn(]jQ88&io3k8opI,)qGT1246P<i@-';drQpD%_pJYZgae[3Z=dadq$WWerXNmcssGQ;_e,-=hE*@VCMNl%6/36bk2BNE[(b(\K-fAVDL_\q_N+3Hku%=ZQ%dH%Wd_?<F]`oL9Uks:<e2VLZ.5FtFTM];+D!.hfE[/9>nD'-ZY`8_?PgG[[W;>#%d\<]jCY$lkSP=-@"%h[,#O@l)`W`YZ_U9ub2^L21UCuHY_5gMp3\'[U'J^lQFB%83.<Of-StcqM9lUZ=oK+@UpNQp<cLa0BXs:Hb%4NhZGj^eLa.d!Yq"h6)/)BQaN4Got)fn3\;33ucMQ5\r2>FAhN,LEEhNQl<UWNj.p=_d:t<@Z:+PT?G]V<0lGDJi5?2M/r]]a^0s%J$RlUU8:O:5HHK\Z`EgE#em[!-Y^p`%g`XT%`qW$A+*PI.W3qkkIulC/.sdScudQN&6i@LVe3&(c3bAj-p<_.0(?mcQMD;#j"0f\%("Y%`$5ZqAoipJI>N+S.ARYe:\00-Ba+X>mr+[s;XLq_1.,NLGXHcPRL1^P@RK++"4,-F2R,OF:=o<1/bC&oXDZ&U&I]7_M'q&<[%Q-McYCq2J\cZ,)Kd/'\=."][;ZfPgf'FRcP+J+`LMT&[\_?YXuBFGk"XVo<e=R"Ef1YHc;On6pb2AX8IL(HYM4:"&`QPhMA$5\;j%N*kHh*/iO_QPN%I&'edWV/\*2dS^'sFXcU!N2>W$'EL&[#fr]]9A'U!#holpjAdZ?%BT#R2FE;N2gc0mgm6A":5&8!--8KH9fnoH%2mp>+oPc@ji09aGaf?ejAE?I)@E_/;&AM7+3gNtgP;0Tj"^)F_*=Gfp>SI>JUk*Q&Ll)UZL(MX&CR\""1WHg`3@ReFUA"AP4Ih-H%OT,)bEKR!ZDQ'iKKf#s_Od<Kh3LG\#)M46s6\@0=H`>)HW=]d+ga(;m)(mA0e_s#/1<kO[fiF/'k83\"H%+JZI6CB("jZbEr3WcL%-==gd(7UlOHnJ(<41-ATNg$lho[s$`o0k^(P;b.maGH7)<]k#@Nnc?V%P4Ds?i.W*nrlKR@-1+355+:6N)t::D=*%q4`HGZ[.S=_%5^>[ZB+T(oMJ;sLeU@FYeYPpd5%Jf.>8>!?'].GkEV!GuS`Q9q&,Tbc%%G*T9\JUL*qAF6_PG:[HTL04O596*#kS*uHbno:T^-nc%g&[*$Ldl1!f;H!8qfIr9H0pEdaf!=ja#l`\3rkRXX+ORfZ(,8Tkg56+43%K>d(\>lMq0>[Psmc*8E]&37U*,8F-2Hd!(EucHO4F0%0O[bt063g=BsC)eIuFHDZTC,%>?eaFm:mT,b#)JpXNe'T`k1i,(&tmi,$-FXH:aNsg8B">n+@=.NjuEUIK)@OQ4WM.Bi"n-4AskA%k,$#1rS0Wb'*QIGl8/;a]rQrSAI!u]cZ`TLnLdHmQV,TK"+%V`o_`dME5,q$Ci-fEA!o!N[GUZ[KfcosC!4\BWlQK3KWN@#2tVA*%pe6$8B]\m4Xr[FcbgB`\.pXW@2$'HU.f38Hg<6"I1+RYCQ1n0t>eG<_PaYNhq6Q!7\ao(Wf!QgQ_j9K`<-ul!&gsU^StCm]jGBG#%)L-_2F0t38:/DB^5;eRpi!HE7kGR=F^O:]Kqu>MDX?sV4UA.u2ebJ7B6okd=o6UG7K*Bcf6N+UF3iN%WG8"GKrY=?EId1NCP`2E6%WpiAEkeV%DSs2s,RH+B.:=$Iu[pNm_oc*:![JM>^JtSUNK?N(KE[=<#5""#Rj?-6`4@<h-Pef6!B;"`S+XH[Kn)j)W:Z<>-*%-Cb%rVMuo(b+tL&,b(40>@P[G>]-<LWTE`+^)]acOus)AHbd>PDZ#E77.]O?O9/!Z@])l%d^u^WUN>S'FeID]/HbTKC9rQ$`Z6\#[&0?%#['kLT:,eQL1qq-',&`[eP-2ap3/h[Q)prW:m7Pb<E%@t,"\'*U*>I)m(e0$P*e*p77E*8GAUI2#N%hAQ]MA,.n_5%D9?#'1hEUS%2V"lWMR!=Gi*`i[^Dq4]>-Ok75-0GD-#9.dA9HRkboV`d+W>l71!HFC65dVhJ-7f)7P/XH<"1"t+9VD:MIKTtc/`(16%UZR"CrDp%(6Z!Rr.IjGdI!Q@<\`hHoXCEW'qINH'gi%YOYriWUfp&QN04/B"\udO_uWP2"XWDfBSPc&R(D7):Jqp.8e<ied:EXs1g+rDZrMbr%Y*8u&le"rgWu=$9Ve-8_Tj1N-K/HC:5hWAij<5oqYXMOlU4EB'$4h-$@Y5@[7@GTVHjuY;;:J!;SZ'U0Ol/)k@q:HXPD?53.[?*1%W'k7//1Xus/-o_n@00fYQF.49.QOFP7HdJS5ObtHPpB7]#5Uega+gNX5&$c$!I?#a&0[bn;i%NR3["Sn%c*U2;DO)\)=UHZ#Xf@a%M*M3[O<"V@Ve:-<f(`-h<\P@7"1l$VBN\8q$sK3tdHWRPlFKPpd/T@V#6D[f8`LtiENZdD%NW-N$_ls?CoC&CW"R:ZWA#MbBJEM'%>uq>p.Wcc,6D.9bh`(h69TaJ6;p(>8>"VU+M)&"+<.\>;(&FNHEa/2r6(,$@oL]Ss.OIgL<GJE30']IQA89"UNChKMN_,]l)\f#]%[+1&R\-8+jQ4rO`Ki5)kMFeqJ-;u&qU*2Q/at6%\A\JjtfjNTea!uWgZ:\=QS!qKq6[Cs?b#IVPJkc`;%Xh1hGmJ1,I?23DTT^-(%'c^(93E0"DBQ]&'Q-.G_KtV)se@LL:,#aneP"p>".B,'U;[/pN,pnm-"\)]q-mhAldS`ejWkPIU)WR\D'1E/<?l3XA'8rut?K%#q%H3qS4,\p"T8JFmN<%rCt--O1_*DA+Q"B!Z?21blSUM,Nf&;'%0J/EgY)Grl)'UUN,%h1shh%8,$XS6Ou$l4@\"C+>ZKiFt;M?BQU%l+efn.DsXQ`'bOJ&5uRWC.U=+p7>th[!?&)1tk(?3>p`ciIN,.'U+LHhuJF+IrT&8hNIkr'^8"/7+r;F92l6p1gRQ",cW2FaTcO`%5e77e^aF(gA4*`]ZXGb](ima6&HDg(TcAa"VAQngQa4R<<19PG*)m!_P+/-'=Mh?(%`G[6%`G[6!0I^bG?Js:6!r)#9+Kg:-E*Gk%#(WM-*9<)?8=CmsV%BQ%F-[dgU8FqC9+EXA'0/Et"0>g;""Z6G""YtJ!N6S8J0Yct3^t+2d@&+M7N<PdB$Oq.%<IIf[U,8*V9g[A%<6g:E+#R>E)0(GdQ4`:k7#\WGBXSL3_;'mIiA0CTN#H\dLr<`+CcJ(D,XlnpENB4r@EsZrHZ[6bX>;cg&3'r,Q7f]TU$'^G78::K%5*M\P9K9g%=k#DEDPEiO'[D@n&BBGc0P806Oh_A>2;nN9f3`WfE7?8_O>n2>FR(DpSK3hR2B2lKOE&r+V.IIf'KI+mbZ&0(A]'Yj%VIjd*gl[JrX^9\#2I$jtYRG?H6@\N`#D!@UZC"%9,d>['Tsi&GlV:u&^^qg=IUcPF#s>##7pX1"NU>p2"DAERmP)Fa%!*5ZUS[?Z%o+9+BG/8uqmXc!?(C:WuM3)6dL<R^AK28$D!RR%Mk_;ZUX.g5mfap$A$MJfT#&4@[%k.[>9F#&.fKkusc)Q<>Vs0r)T'3[,A2<4t%TKDLcO#kN$UMR^!jsK8>A!9nYj@b&/A5VKE#h/>Z,q(<S7mS#FP=r;VQGE!1H2r*qbg_0GTH<'VQc0.m@C?GoJIJ?k'E\+8fT@ft%9S7&?)hMB563M8=#m>W]<$th!OWC=T!7S9O-t=\,-:^<Qe.(FN=EYVb%>JcGhQpWujE9r;&<f?r+Fnaf79Ud@KU)ln$tEhPZ`-i2%L+be.Fobu;,C1IF1#d'fg0fNf5efTmitd1oBV$d]I1J/5j\*E4M`aA$5WMim4<8bO'!C4.N]'Zgd(b:sOoC=O6,WL)T[X+4#Iq:\%@)sCG'U$fF+j<n&7)Q_BhA9966XiBD1a3bj,)/Fp+t00X7&=&2`Pu$\g,?eK^5OX`TL)<^C'o#$^eFhG#H]5:O@5Y<O:;k#[RgsZ%I1#hb9Xq#7J><ik#skA:@gaRhbCJ<@D+/uJkS,5.U>\B,2)*[;VX^M08^Jn-n94jTj,D]b[AaA4%0cic-lI2C5tl;1O[^i\#]#pq%4n,'HkcZUpNb0(6TOAE,!^d3f&lcdl+;i7D;FiT_Uk;.!EQrBl%Dhdh#:bbJ:+9S7TJ9-m.[as*]#(9%)WN,R\?0nDS.*[75Y12l%mf?B!kXR^gMBS(<JdY''/:=)BBMsU<:l)!IPRn7j:dW6bJFnc<F?jK4MQL>*Ps@la[3:c?W^:[ZV.=<K#U8b[#t,MBB9OW/AAXI.%M+U+_l!'lS%#7M.#R=dTUTZBhS"1*Y'$dmM3tr*DOkMXOC8V+)ZM.&blA=dD.TJX^e0NHial("7/;$cmRckr7V*GeURmB^nG!gK\%:)SVur5'TFJIGAj8<kM.8>e$S>A(XTj1GVU%Y>QT.D_`MjN<$1_*hJbRAnR46\9Qg?iW87%YD'<d/h;5>tWOEg(AI5EW]]7<7ktE%%/b<(ks?Yo%&-[)_]\S7S,g&+R>*se-;"Uk)s0p1TJIbmAdM2KBchm[M%RNF;M`7e#]<A3*,m$NkqBa^O=Q^*FW`c"Qs/td'\X1f%#Z1h@)A\fQe"igN?(ckoL8e%+.XE84CqXG3J7##i3HS;S64?;&+S7fs\*Q=2A]kmEASP7/8mkeBS>GP/jKdhVN*10+?s.OBG@;J3%R;t&i1I]?KKB#;R?,oJL=%;-kpmOT\$!\nr&LEXMjZ'Xop;A]I!"p#8j\32eZ+>VkED3nFZV3@iTr&g1_^R-Lb)n%$j=E=:XVF:e%Cp__PhN@t7-aPD&'S[`(Q*]Pm9+j:-/@iZ;bEDI;U6^0lEjd8!=&:["#N[Ks&#5F1+f`U$Eh'D-:W42l&pi+da,iZ8%%0'/Ut(pN%)/[MIK+9Y[.H%J4(n;a>ce"7(QR)kRpot`MaoMS#YfW;R#ND+k#A0BE;4u44A'325Q^Dr"VB"\KL_=@CO`H`Z>g#Z".dNIBS2V@l%`g6`RC4aBlEoa+!W@h,0/2m^"1ZaX!Cn:5+O#Q11An%u!M`?]'4A<WF/2e6eJ4Z"2VT24J\8SBB]a"_Ym7<.i^'U'oC1o#Fn2`ts%F]cpA5\-DKn1LtZ9oSmGCtQ+bCDVZ7i%>jde9M>ijfpj6AIcIgRZ'pC2H\!uFj_$mQ`/c`L*H4#A;^=(JWWe8A#]fcQ5e=!ieWAt%JHJT9>=2IkSk*MBj+<ALOUHb9Z0+:83a6F+]k`OmS-P&_QY"GEa18k(BV_C+/fC@tLmfY..]nX6E/8X9FZIQX!)>U4/NKaWA/:OH%B`*Z["!q*IrWpe82&\&e_/rr$E^R'f#_CEGL2.VOp]lucQk?B@$.)MA1F#<9,ptD+!.YRuBnul.@11(3"R$J&6npA0MNo'B9%Vil%3_OKa_UUq/Qu7_]H6IA6d0110Od7bE[dFCLGR!+-oJKpmR&a-k_`oIoMYQEA+d"PnBn9SVhLbhqf4[uR`RSaWkUMG=C0=P[6TD7$%0EmH>84jbs^r#7=Y3\N(+CBuF"u)-6\S3MtPlVa[$0AHXfDS[95s*>t!47$9#CI[b0lR;::fU>_^(ZY257N05L*_e)HkD`;6duIS%Q6902]a0b'3=-ms5D3\s$[0?KQ`s-!@)#CQ=(Dq;8kD('!KphT655\RC^Gd/#DGiQ.>gNH^.HCC2-RP.&dBS:XR%,:"2G%+=U3al%e$]jh+KBNT7Fbq,6Ep;CU+E(J'+!8/!9+)b.T2'Nd(l4r#R5VdS9)8LUS)&8qG`<.R.upPOVuW`VJ;&`!J>Q++[n\:Rb%&59VXiY%&LFmL8K]EW"/]T%3X.$Ed"N<g8<?OIdHH`2c=.N@]a*shQ)0:8/;0*2*J[8?ZkehP$W9e3#Z[$ZQV0aVGgI]i*Q-P9,O6'M@1/G>%C_dEdOkHHD%+%uH!N(\\-U*%t`4J9jWDeVU#a,:`mjYh!\kC/F6)c%L.mbL[V@XagT-@u*>A@QWg*A@DP#ssY3YgV+W9L\>A<'&#%Wl3K)cnD-k,AU7::F0-K/t41@#uFK!Q/2!4PnVdo(Fu=bJNo6_JNX:^BPb)G7+pdN\t[[H3F$2^j8tO;JNakO<4\s)P,T>5KJ@t5%',H/'[;L)fn[BYZ<65mA'D*l<2A7.Cg>jj)i;/t&OXF"Loh;#T&S6qTV:*..Tu[oS^g;H@AJ/](0S=Kk9ek:9R\m\?-?3$:#d$j`%%+fh+;.R,DO..C+!kjda^^7@N+=Rq/9bC&Skhn!s@-dcC6sF;n'uAlTpa(fuN'\=q0fl=2-HV"F3uZ.GUO>b0IOWYNieO35A5ai*%'*TRj)k'3kC`:egJ:'1O8eMiL![\ifD(\u5,[-&B$Y:ZkCuDV9cq#*'P5Q+T&Kh0:FrE_i+;UNJmOgpQ=1J$Vd9iX<Z:W)]<K^&,%$RFHt\Pb\``+)+a_Nn6hqClfjEAX?a,7Y7#/ka\`\jm\piGn;g;dFakCtO=-^9YTR@SIql#DnM[FeY-\9pj&u9_.?"g?usB;[W5@%[f8eIa\F`19Efd86jVJTj+9O9%K][&Om%Cj%;QTD-jpC^-Fak\+U:9bR^*;j66?>o`5X>I@b4*m`Is.%!c&Dc>A1J&jB=MK+acNm%JaUE@CU1o9KC!gB?nr0$*=s'YJQOV)<J@\U=!\)@+GrYUWiUi(F[8RBWgM^P(tgZ\>S[`qACm<\KasY*JB4bQ!8be4,'?:MF%tl*%$8.pTNF08qUJ#)-W=4APjBr=RTS/0K*=TC0NPH)A9V?Me`%XkgL'1<aQORG!Cq=&>&I?beKk$F#lXqE^AkJCBBqgOY%ZH7#dV;t?%?N`ZmmA;$.)ZmZ\_^0q3IXuhrntj]QP<9Dc8l.smYtX)7bSLe"ILlK]?XTY&UtS`[B7'iL@S!(g0R2!m=%Ca(Je5tc^1Y>O>c?d=%0iCSkR_^_:^1W=taHo6VJ?`6Rd9f9IN5(B1IO!)NSW,%l6/+nV."hGkV<Brb?oL@tg^n#H?g^fGbSZ"2ck(kd3.7W_d3UhH+DbVj%P0"a`gjpZtf>o-Eh,>N^*XHYmAa`bUdF;_dFqM4T+G<FEC^>Gb'/YCrA]n1$];l,NJ]0.U8V,hn@+tZ\R@4a-VUG5O#>r:Q&6&^.%"h)/YV_W2O2-EhE1c1`TWB-U1P$3!,,nSb:\?)0!@X=?CZeL0jgptG5/>?94#l*N2M%gD_<eh([-AC]QW$aT]8u#B+KXK+u*cD!S%7D9I<>Eh'5A=;g0&L<@L#-8OGbeOC$KTP+Pfo(Ed1p1s06<cqqZFNlC5-M9j\Y;ie8Y^&$!In<dgghtfBdCkJ.YFad=*Rce;Gt=:%apOU_asIujGo1Zc!?rCBotrWQ1l0OYA@fa2D%.\`<b8k7!;p3X:?Fgq<ZYI_Ed"'qbY[)kOO4+cr$pr,kVqdKLCfP7boI;0!qh;i%ScaWoW_,E]3gXt3XF9_(#/ch,,*PnSF5[iG-S8Gk`WeXJSQ&3.kU=t>!J@_3E)WGK8Tm>.e<W?J>=_kH.qMi3E1*^V@AhDP3Eb3`%ULFd;cV]fe:,'-5HH!qn?I:#P',#H!APF@Seq%8r%h01;JE`;2A<.dj7Ml`1_^D2_5a'@bQE%HG<71md1ekP]>a/+<!!*UpKA_*d%.72M=V1<<K6:d2jLCjKM^?<:Ba]f*K;$nR<P6(&ZFNQZ!SI<?K:)_#>:0d2fj2XHQX$kjOa&h7u,D933;oT+u[Y-1eOA.-6&"Q'$%M9uVlPpDA;H6AYOSTP`B<#P-1T1CY,j1/kik^/3,,(Qa/a@0Z@SrOU84Ai$2DBoWl^(I&3p82\Zb+*/HoB6F%ARPBB=?[Yq:rmYp%;(!/R_,8hoOhimiFbB*=7#6_YZYp/'JIj,XR4ME*#:C=I\q4E*3dhu9`dNL34WC9Fa;@6;$t^t+0Z*4m8-)R*"jMWmk2-YK+rP*>%3Y?s,g^VZQ*7Y3;drU*]jA-pQk#)Hn`t!d2%pH"(V$q+h'bWq>"@tNZ;^c0()9jW2(gZ&ba'QZcME5Vs`6bk^dVVAn_XYU"8MhQM%R)n>$q'f]*"!K/>S.lS4)0)5R<@X2l$!)jSMl_<#PYobtp/qsL(WloqPbT8//RVC^lmr@beBk1&%8ERDhDlF@noG?kX4"'X>\_4f%M4A.V)dlf?K+)#P7>NL'h@=][P*gh_P'+YHi*.CQ_e^L!N1eRBL^u-W(gk<X"R$Pf/>W>*)sK,O7aZ3kY60pOAePu6[*/-6!\T,"%nti"W_5rkd86?fSVFV+.+c:)H5deTt%O%j4o4X6pQP/18#,+.&8@_V29ufMT-IK1BJSZ#FTi.F^B/A;j3sVM,4cG#&F-7AZaUK&7%aCkmsq;PiP^.ateicD3[\4T?`OVEpS7WqX*6HJ:W69k;J8AClJZjW%9/nqeoM[kF292Pt8]+ja;A,ObpQPMp/hCN3DAkG`Z+te9W%RP[AZK`mZC&)<VR)a&e]NkWPA&s+QkpI(,t*p<>E8I;LVDQFsRfV2B<J`F.)7L[^-G\B\^JWQH$]ZRPIs1e\'e4d"RDY9;E)Ui61%7E$-"<^nFePa=')'<+hoa4DUcVR'UV0aH^--8AnCL-\31SHTJA(P.]cUC*EOkU_9Pf4a=m$Q#2HA-f]G`IcI\-WMoaV20as3.uj#%KTPT!A/*BYOhF6dDPXN=8Z'=q,I;9*P$ARRcATld(50E"l]SlAJ^,-A^*ZYXE,Ce\IDO:_>@d'66FWT89I57Y*X;F-F'&R%8qc7m%dJ%1niRD3;(O4336K.rYmTOonbE;'CaT%?k?8D*KZ%N`\5Y3(>CXah;"&e7il5B8ns#p+H'=PfH`J2X]Y4@g*5MOfANlR!4;AJ]p%kUDqo?KliWQ"J6,6;:aZAU$.e*jo"1AHetnBfO"lB@d`o+g#(M)]"SoC/s(Z/Jd4[XWJ-L3)',1I4JSM\=?d-(OU'%IekkB08'3l%RZKtJE'F%*8leakL$T0R]t$$:3mr8=moJ@l1gOgC!/"*/02-WciX.^18PgpcKm_P-l6,c<M7;<p6-p''!;h:iX,<j4+sM%NdRZ^A%%GEDd+t-!d:h+,d5u>cS5J1]+RZFmFKKAT49e!Y;+LuPKqPLSMI[i*!+:KWUq$nJ4d.K\S10a!&0+,g0O:NtLNG+iiNojPs_;*S@%QD1=UcFY0]7A?fCB*J2\O&6&F^'X-'8imMUra;*5!i2)"%2h3hTDNidPb1<Lh&%*S<k-;&jQC^8iluY8Hr8Z6"HiY]2e$#_@Y%n2%K7p%lE>A_rd/_=OV]?AifHsi(>[$ho[G?Xp-O\>ej]n^!"b`BL?E8&WiK/>uPdY`Mgl-p'd%W`X;@dLsB-Fh=]oH+kU6s(C[>@6f%>kA82J/GcUhul-P$5-9P(Jq"kW>*P-Ema!r,9n$;c-l8J<.*joCrV2X8hMH;]![,W_+lt)k<qif`&S7DT&,b7THUa0WmTRqi"(cI%G>(%-]2EJVe+C'Km?UpB^"PU.P3l"(dtu#=4\b$Eh4A,kkdS.jo1$SS9Q:F%HJ[J:P([P/YW#RoY03,c^326FH%@=8Mp7>g;RV%J%LZ)PISfVKc.u+_\frt(foYC->XV/KFF=`"[q"ZcFZ[,b,c#4*el^&r1#JJ$bPX&t9rC3@b[tB'*kYR5@h]&i!Dg1s"U0W6j$!9fR%+W6SH<$9-"R;Trlc]Be5DHqq0&Za#KB^<3Ap_g>ZT^=ie3J8\lA<JZ02R/mh&u.%-@rDknFY7J]OnrdY%a<2cmt.=ubKGHEhTP4F%eK95V5UYCjjB2u^NL^pCa7BX;%`GU8-37a0=n#5N#PdlLTr@;g+PNZX2h]59V/e+p/*RniQPTn[`85B*P7QYH]&eM$4l+!/LnM)a%`P+%?'Kr$?)'+`/o:<jB5=6:9d1;soWk&1S/*$^:+-:g_BPW.a2fo`h#3u0,5`?itP1_Z'\X(1ffD:1R.jCAJ;H*IM42\I3Fm0C3%d/XeXE!Z:TEr<(0+W!M=\m,Le-0r"EgctGsZl(U@_M2$L49M&:\oMM%!7Gtl<@tsQln_O(_]f0DfndIR&40S*4+OYip]ilYN9M6-%XA'6FDBuT<,J!REZ!Sh0Auu^U)UU5#6I^uQ(tYck(_&q*0'#mn3X8FOKP!0Th5,)&S36k?O/qnmV\jE8LG28OYS;7>M>%t<<%ipJ%nK=Z/NL774T$a?(X:NMJ#$P+IE`UBWFoaK>o\.s(9qQLe(!e>6l24p/+F^F>D3:-ls7VQJ[^creXUDBCkV6pQ4BsB(g<)[$m+6^,%KL9r#L=qlk#^I5:>nSj(kq%3of;(r:q%nQDnjbJ:jLNSWEik4-aiJr<$f0r*`"Hlt3b-#ONnPEP2c<[8d^3E*DSp=m4ZBkKp'URq%B3U2Kol6`DAIucm7.fgtpJ.e^OAAK*5T0qW#s=_%2p`,(L<D:IU0KFVKPVpEW)]AA*7Qo<;CQ3B19H4WVUhnNOA;Q6.5p^h=tr1:%beD.[/I01&1f@!RH9&NId<Tgc'mVO`D:f,Qe:uTfm:rm8!<b4GeE:.@<37E+it7qA,/2a4Lm#7]Wa7DCMFIu;7UfC1;MRTF94F"@%#q+:D#8'f]kAiLj/0Q*'!\[5G_+ZpHAEu\$#%^sLiIR)mj$m/nrQZZ,`Ys7;SOj%6/Fq\fk[MZj8q_On<2H>.I"\4C,SdWi_NSj?%\sfsTGHb(Joc#Rsn_)(m84<DuC:Ha1(Hr@J`\JK5J?c&(Kfn)BWu*ilU*>O11a&[M5kgk)'O+?/R(omJSV_\^J`IT%IgoP8qs.PL%V/<_C8Xa?mQk,9`Wt;Ub!@q<]%0fO`g76cq+gnl%7C*^H%9(LHos0C4.&4V"o+iO79Sro:eOr2J1qZlTQ)?DLOB:5^aLON1(t`Ws%XjV-&co"N\Nbn#9oskc*WY"Li#r,VPh.1kO8.,o(2_r[^7Qjht2NK8looLU-d4ht2^R9ua2*_u:Ji>KA:di7_@Qg`eeg0=<?(3%d%.*_=)*MZ2umHhC6/S^]48-p5Yf<?-H"Jj2-Q(_fmI1g.RDHAX_Y%39IUj*[WWTsZSO8Nd7,HG4A,<7\RpfhUrcC(k2[F?<no!C<r%S70uG??k,k3OCACWL'#UFsG'[/c+Yg!6O@%[AN?U=uE,=0Zad=qt[8f1\1d:$rueZLN;J$pD]m%#pbOV"2)+6(5ppAVU_H\P&QhP%_aO7mqX9-*(@*['1\mi6Dnpg>/$Wto>D_Io]2sL<r&u?3M(K8^c'Pl'=H>$[p;(uDGU9eK38g'-,'f+l"*n:RYm3@:m(nu3HQf,Y%56!#U^Nrng1u,0ENMA!#+M!jL9%EUf,<4`TX&EU`9\M%j.L3.+YGK>^j+07c!7PNjFL523Bb?d>UMcVPmK'f6)H)^`fWDa&Q8VsI%6:-\B>/4fYrf)Wa"aRIX/81JY$cY7[jTBPlL;bM$440Ii^nlZ8Z)<?L);#)uUss?DK1PCr`ArQAEKgPOY1O/<QnufljpZ9+ZE`up%[)3@#n$S8Ch.g*`kR8Z>m$m,H+u\flNSHp,*AJYo=#LsT,l3*T^ifM8C-tc.\XJ.3J9c`+O]K.Ca9]$4$#2BO-/D5M]T=oCibf1-%T_!!knW5ql5]5`k+uVsbXk)64StODV^sia2o4$+hA%j'p3BGIsR;g-jZ%GSQgV+e<I=CBL=6u&dJ])N<Jq06oa*^1KOl]69"49c%%MBgZ.%MnM6H((Ri^*'l+]$\_:6tf!O$3J(t%,2L"Uf[01ROa2H.[okh*\qP@H\+5h3cpRQ-\u$6C-ip%'=Q':MfmQ1Ho/\kJ*1\L%JXPN&3Iu_1d=mr$Luc&%b]kN`&?m#fI>*WfWk3[@JV6]S0ddMe3Ut>2_hX.T@87pt;X3q^q*ID"A+?'*#ZsaAS4oXh6c(^E'YQb"%cK-48D](U9l,d@lFdd6Ec#@rY0IA,(3K7_(P%g-j+<j]U[f_FgZ<N,TrW<9Ze^D`9TQTo_rss/(<qDoPqhJ"8cHcKD6MU9S#Vf9>%jpWRk@^lAm:J,+VJaGajhoq"$'l;c#XK,LoS(ms1A2_'6jSpCnGtU-frr=:ui91W;F>Rn]mlbKFS.D:k9etR>e".pFgR1(cF-cLd%3.Uc]-)WZkZa?KZmN2Ecni6B)?HY%3EAF+6PK7S7&&4BDLq/"kKp;OOWJXDm$O9*_k'M@cO``<q5HYCL[%@lU^C[*LAVJ?SU"Nq=%CE&Kldt0KpkUnMG<sT_dott\;!d!a$q=T/H$-WWY12THnH15kCq5GSnT-553)$=MXOkoV&mPEiKk16.8fGoB6@eSH;h&7L0QGd5F%F$knY\S3>r!\oss#D`2'aibVaipqhi[-Rf#b7,fDl4D<.RF]QK;&#=#Pnd_aapeTV*Lf]$p6^]ZXXLm!QAf$J'Uf8Q*BFd,<'JY@%Ps)#/j%bul0+dQUka'eS[.l_0\K/+HAb<+]bCdk0IN`Rum>e!$`=/)Wk]rMa?au5F(N=;784h:`ceiZ"I\.[I.:`1%H4W*nqgI1'%Rsk*\)E@93]6"rn5g^b=2\u54[Go/F/F"9ZG4uB>FoF]q(.N+=^E#OuM2>Q"hks[ROlQ0raRT-IbksXf=;%=ppVBO,\G\U<9\[s7%+`rH`AGLX+N:uhU:>;Y[=4:=/0k7cp:TGq^l]K-Up/8UF5<UFXanGY&?*HFUTD$FjPS(H=qlWgpB$'cdUY9]4L^aG!3ps$RZ$>m'%P#W]nk=Uql1O&F*VlFPc#O"c7K3eqSb1)<h"GFKOZ7&UI,lUoiTQqX\6_YoJL6Rn]qJQLYJK%J-s+NlgCr+R4P=l%+;Bh?p(SZ@%%Q/Z!o47k=2R*U]1<$"W)E9,4gW9Gab&q"3Ad6Nq<&cS;J,M04<es%\V:Ej!t<LGRmZjEL$1*a,3Jn1\?-)?>r:DeB)Rpls*RGL7e%4Y;8(F`msuDEdM(BkY%]6;J#TOUU]qMFLALE<c:ZT>q,^*4?E;@MlZ)\*@/2-3jtl-8BiYo>^j3g5T+P;]q3K<N<Xd1J%%,#d=p5%6\9@"9"l%hblV<9'9U^s:l2K,ZkXi36q12n4M>n]0Ot:LbSHD2nhY'K&P4*rFkkb;P[l2)Z<oFOKEtt00FZErKl#'l/;Y!C6--pG%U4/7CpV?N@L^b$.)I0>?S1AgsPmnj`hqX3I^\P`qK:]UnQ#u/J(iM-FG(aK?5^H<P9H4;5i9)0"P1(&ElGg=H4r_o-5T2jOg]fa7%<YGlA`9PaqPMV,Co1KM6_(]mH4?.j/]+D+G`gq^qULl(@N,,(C[;)Jl81-c?+W>UlG32o-/mAo!7`c=;.%$dX&m.BhjFAC90f*,;%g.d<F'@`)00MaZ^<'OQPEdr(u+Vi+g0[`Rt)$`,#K-8g48E6+:jDkKemH>s18]Rt<^R0ufO,5Ua'[>50opI([lo*Cm[!6Q36=Lf.%J.c>joV._J&,V^2f8Gfi2g+53iI'l8J\rDj9!hTu6aY%)$HKOmb.5[.$*f"O`B/P\bHAad$3=Q4]jC%M7_C@f1V.d],W\:+ZXiD]%$kF3d%G4!,:3'>(&a*ls/f<$f:!f-(_S$]Zs.`rZB/Or1Sb6Q3fC#)$L&1>d6uMhHa66l*15$'ZH/\J\%,?3E+XZ=U6>>XM`)9m^%ZXj]nTZ&YPNL1_mX66f+K@)%'7InORkmerYP#&CTF9DF'LjXKYL.1Hg=Dm0akpH0CaX0gF<T4$tJGfCjO&\1o^(OAU`eEAALP"#7%7YFb.IE?iSZJ6E.7hPIagPoc`!H'/W4e7V?NI55#`p`N7_BkXJrdo<J$s`u@h7ukqUX;C^#)<rSgjUKfN+s<LZP&G/?c[+PCD!/G%YVjJ1)mbgnb0K-MX-qLK+W=ELP.bYu2eMML@q?^UF%YHfOu5-Q'\'l0XVWTbf4ZpDcNW)cK)9'nC`j()n_I^-=ZGtQeIEWmn29B/%[::H-(fmo$Wtj)/EWqR+lU$Jl'm_8k0E'EaaG--beW,Wf?T0]\2knulF2k2C<OBXR`NVimO_%tY:"bDICuAAI5tJg5oj!lf%^C`a%jlOACI*8R.#NT-'I%3gj]0_Or[+C/N&\qdG-PEG9a%/[@,=SRt4Vf2L?VfifT3(!3NMmrjWOQ"+%;3j7q.Uq<'TI4D'LeM8jmRln%(_UtZiMQedYf-JVjM2';f1C-&h(==P"/F\TF@Dl<6RK5e#\n4u:,`$ihs2le]2_.!&>+XN*[2#JK.K'K$lBgAB#'dO'aR`L-?DHT%WJkW03*T\eR$EN;Go2[G=rKGi-R.gHb*`cNKUf+co+2!SR2^0=#s;r(np#nfoaFi8!nc2tqV$Z9A@MJ$+#uHPfX%pf'RNC%Dmp&u%BXa2]`ATQ\6Za/.=hc6,Kf9SBAm/.m86g$jaS?gi357-o]%GH(BC1[TP0,SVST#q'1]mMAM'Q<KdDMPoRE<3,<%3>8%g^CuHFE(q%5t5Do96QHHWlnAfVh6`/KZRQ0:4f/ujs&U8oo5'gBb5$@p(9ir<PfX8@Nr1$"&Z'e@PPLf"CfO&ILGY&Goc>mlg)s'FL>R=!kp1`%0W`)<E=JgYZYnb*A!dg1B/MV>C-(XcM&DO32*cVflST:<6QZMhhE[GEJ?Q*/;$q)MdcWZ19!M`@fme+oZlf<^(?JqGXbnkP+#+_U%TJQ\7Wb(L_RXIAY0*@s8[iR!071E,/MF<t9/("?JFIn=X$6)4SBI@[pJk@(\Zm0Otf-[:qO88#C4Mq,N4ZCiF<f4]t4h*D`'BTd3%4)T0s%=o]f2oRfg=k3V0r')%n(i,LK1nC_lILN$sA340E/T=@k:JLK%9'KHa>E6=2Ebh%IO,Ys\I!)_Z#+;$*0Wi"@^&bauP:lg&%b-[/V;s_5\EWD`PF;)IF0.i@SDDTiq=VX9pl'hFk;)7nHSY8]u\0.dP"bcVYBE(F<?14!dgipGWL#S(oM^ICec`k@VmieQ=>aPT'%n0FEb*3t(?[#Ad*VIa`=W*AP5\f#rdQBhP%0CpnY/]2"$d\VZmP)/"OdJCC.&OD_fJNe.9R$M`rULd[I[>Z&U:-k$J9LMY!!7iQK%/1gs[)0JZO-inO*:L;5S0[he-d:p$3!!=+M*C@ZVf.f1*<"';j.Nj*%BRZfS\d,Zu!K>6RCY^qX2%3lhRk1a&mpH=)0#[1uX^Q0;%AI-qj+KPa-I+f+b-!C/1D+K-MfN><@ChthnghCP7hP$Vhc(4YZaWf]PLV6DWDAmr4!LsX:R]):8S/?/Nhb)u>QGNMdbUe6Rg#Dl>%6J7CcRjO'RW-OAcKG^0+jMcbX^s#=b=hBf6=bdu--SG5CaAW:/I:eBROol1H%^EIfTU$h`7RCuO_A2spO2ggu:s7dGQLgL*3TZZe%DZs/u-!aGWkY3[$LH`T^1d<cT4VuY-=p3Ra95s^6=d5<:6[<+m=;8K*b%N5"ZgJp:dN@P4:;cWZeT/)u,`>^-aIN*_c=euDdF-5o%,'3dD/EcX0a\F2h?E>F4\$EZ?oF<255/gbnRebg\0\[./<-\ri2b"u9NuPA%-o]_SqU(m,A;js32]\WA8ud#;%?ZHK1BI"O1t'8R%`sN-qOA&m;Lrt0R:fRK$'."h#5I9N7jB<>:JkVm/8lVkBOl_g(`X0]i0e=hj73Q9U!fhs:cUqt[5]GD_gPBGhS$Ht?h`./TT6H0,%[\KFo;$g+&Z5td6S(KPr@EIa<69Qp7Yu>$f<S)uN;Z[C8%[13-2;r8%DK+#7<KHAX3l*5F*6D%=T8XI>8?of>oKs,22"+J+i+Br'%B\Z)s)O=ML7BQ`#U_uK,VWc$Gf[^D:#RitM'\%*&b^i'Zr5`qn+mX&YG)g1"XPaBBoI;?r+k&k_X26A"=R@s:eQ$i'Y.pjk9?bPk%&.PtFgsg5,Q.V!0boiD8@GY:-73k4r_Jr%E1h$KM9NE%'+'*Y;P^=YWq3@F6(Ba"Sb0"-\XB7EYVUiY_]"r.#Q!0e)Rsa29"&aL5%7puNl"X]&aEo>TVI=9']UX[d!-1._#!N]LVWmIH!U>)^DZ4SUKAV_,*1ol(7Xg7kX/8IO%fs!i2p$\uBb-9k3`+mm6U:pZ(\"nKN%TSXe$Q)s*\-6^-*Ea+?R<D3](%1nYZBb,dD$4'ocfY^';+nHL]mJbLHnI;@D6!o._M8W8uq\Xiid9J?::"03^7jGa#aP7Mt&o@\@%Z;ag5Ks>$3<OK+:8JJ:l1PVdN;DtcU?t1l@TE3asb.[5sltSQ,fqU-"=8AAb$:asAZ[TY4%u%aC>-*`Xd^E4D;cqX\?/I>!T.5Er%f+S^/MCbuc/!Z`bQ(OcM;;IJ4k.HkYMSWrYnu>l7Q53nHA[jY.0T+#&i.LrTK`66q3.-r&?k9\dO=Z@dIR,9%1G$FRGp,%@LWFdK%+R*c;Q?oUf[!E5E7IU6]6;,V5QODi!_'c4<UI4bD&c)!<NJlF.0o?mIVjlTlJ;YPN^Y(.bFe[*FWOi9Oo6Ph5OjUu<(9of$;FiHD%(m/K=GKR:T32DEr\1s9#8c)Z-Wr07`674+]3@]u%Lfof$H<-aL1L%:e<6.GKA_==Z[Q7S[^:[\fSR*/N5-tb$;HJ9C6]0;Ao3!Bo%F9q7_^>7FJ#k>p[@Y)m8Q-+p8Y\8FU9><3.6Q2t&`U*a?cR2B/,?ELB&2SctTlXDf8)0^YOD@3sQOH;.'*[L^h.-%8fk`Z(psDdm%AH>]-h*PYaQ2ek5.]oaOXWu[n[_c/g@fe^c,TA4_0:S%k6mehYm=MTD_n8[Q(W^g9a@jnFOUQ-).N0Yc`C/duWd\M0AhR.e/t,Er%Ju/>*DT0a+*#0\e0o;^"bDQQlr@!#l68Yc%[Ak_I#SmZk.#0eRpq^_Cn8q['"#?t%*te101%)F&mhdeAoC_]EYfrC:=[7;":-a$j%]>nk(1XXoGJoX0ZBg&KA?>))I,h3gj6:(uZNJP>A?%B?+RR>FTZ7)Vd'TA0\Ug]\6U?$;=_uN_)(>@Z7N,45:Q-O>>=t/Vf9Q&O9%JH!lG#<HsG>Zct+%]WBsJjC3%"sfrm<`X>uXC9@k,FTY;BWb?uq1`>qWE`P!E5F;Z=fF$b-&;=TqWmgS(s)@FjfSHH"k?.rDON<E%'0Zs9&tEK=V.5qA^(Q8r\rBB-_o@bCKN"XWg_(1h.//;<H+-iP&J'i'+kJ3B`gdA\nnX]"\aoKh84GRF+q)a@K\AP@N2"/0<MAt+%2Eg[-#n(2^&]%&@_NV@`"Yn/"lAb$uq5R$1RmR?i3V!r.)RVo+XkU6X+^]paFR-XUat75;.qjKE-,S>qB_RLi5pZU-_b=TfhNdK^%%kl7?aG*YoiJ3T9cLdD=2@FfN/#,0qJ>/,^&3&&Kka209UTl;fK]U=khSuIh3neu7`@:sA"T?+<bO'19:,<L%emF6c"W&L=ab@*>%^GeiQlDc(bEGD+4Ea]=;[aaoMXQp?N+mIb)`crHmfi?l?\eo.H?T^;KeI0V4;?j&Y"t?<HrJ77-5PAU#e%JFC(eqRWF!Ku%Ep^RU%8Bq+g'f>[r'B;H@fd95&=f"r?C@5AXN,L[>5OF^H)1!^Re7o3,!U8OZQoXM&&=<JD,VpL)chZtm[jo+UO+@->P]iPd6r;7R+YYWR%^Ptt@#SPf2V&2pRf^COT!GL1i&XRiDfqOT]J13!$UaZkq@hIr^M9)Kb7(UmodI_41VDi304fo@pV:eu)>c=S(\OAN4W_G.'=u<(F%!X\#GIVuUckHuRe)XCJbmjQ47g^-DB`0rI@B<)djko[oLH-X7E&Ph1pGeGYZY\1BU>7ikG>cY1_:gN/R7Th#q=FI^#.2n>@k1sMf%p3lZoJn,Ha4IJuM1Lr@5%&59/'`"Y/-LC20F<P2_!Fd<H6dQ4K^h3>CWo_#?cPjX"n8QkAR&l5qq@uY<N%q$KZpVF#(l-c!Y'r`u%'8K97*;Fk/f7e('<7VS4.e&P\'q#@'*Mtg-^^=.k9lD1Y'Pa=C.s">P-KJ'jW')L]O'D(djkO&YTm]0c[p<8AUA.hYTMgZ\d>a.0%?+Us,Qo,.gM6cI<oI/H(IY?C`ZfUE1Bc.)98]=9Qjl=PXaabOS[mD7E,/,5\Lk(_]jLo(!CV:\@FZCdB%S.#Wp])>n6O0mLWLmU)%ar?I\^2+^5dT"L1\G4#'ig==7Neh!FDQ,)2)3&4ZN[:E$3fGb+NDRC?fYV@TlWR'\@8WOsmquJ@@tEGtg&(I&S%B$>5O2:-3ETi`%fhb]Fm7c3e^-RXXM*.f(%t^KKMtlkF=HPl`_%/eFYunJp.2;V@W$ilMIr;UqW#KO)?&]PSMhQ'R:p*R5,QGcoKkMH%l!"l#bQCN!%=1+duMA3mC9-D1(l'I_EbD!QHW]$P!JuD/^\HF)"_eTY!jI,'7G+13"I*fhj4sG.Bg5(c!pM:U^:*dZ8"/m/%,9&_J2_,78dhXVb%9&NeIlKNlh08g]aHn1G@2i>>s"+b:RR*c#B,1ISqOSqS1?L4E5(O,IiOPj^eV9ZIm0E2U-0IDof%Qt@?6cV,KOIl!BF%u9l4K6tU%C[AieTYT0s%1FdUpNichJQ4[gIq7%o4@`Y371BZ%d^-n,O`_HOBHM,,?t_$/G.<+-MjE9GL`i&8ij`R`<u74D[B_3j`=2r*lcfll%T;78Y-ZU>8)*Re(<i$B!jM8YBg#PC4m;Bb("%-#[q*PW;EcV<`h98WMWnP7HouBQ]LTmCh:fT1FciSco@.2f_JT,c(&%k0m#^4s\%(J&tfG[;MSDY2Q"$`(s)H![.aKmLaGJ7C+Kq`R6]]&-Gp6sZ8u(pYW<3F6)YnptWL76$R*o.`\\jomO!kIAWb:u7S1A!$lPmq#8f%9b%;(-(ul-+;BqXmCeW$M!+Ccr>1gFkMs>#[+HP6<O+IARi;WdGI-<6!n4Ik`t&H.ZTQ)3L7T=i59niZ^/ZK*G]Nsq]qF<E\:H>2%fG]PaL]sF,8,NM">XNr4e3H^<Q%$32@TG'q+HT]CDBSfoB3!a&OAukfE!)fqMar-(JM^^N5ul]*$s]UJ`=9cXRZVq53KWs/l6u.l%?hQcMfU8_Q3lW3FfotG,ig$_"!W%h]j4i:c7Ll5p0R.U\]rWs"kJ3oJb4SusUUm)\5o>U\/9]sl>NRR`<CCGb]],?1(Sh$SjR,R<%H6c^XB,?""_UY//D!?p]]3'eQBUJTZZGMYbV?e>-M%h7sm,)%;7t+\nreROAP@G/11]33up`l$*bLHc4]R0"`^r1[]A1RWbfkj&t%HoE0V7FE[N`Zm#5BO`[oaCC)l\e)k'+i2*Q(GdbcQ0`S4+2qi4rJj+"lNVM%7ikn)7r]h.h9e]sRVDXA9so:PpsF[uoT=cB)4K4j%cVd&,k`,kG6)C%<F^NK%4c8oo$5G=LTA.fb6@-1eJR$O`UQP=Hqm_`K]7G;S`C4\!]Kh5i0+`rY/K$2Q#jpo;(\gO][cta=HsX2n%<h-u##\ETppcPSR?!KZ>r*4Fg^.256re9lu\e#)Fj7d495J07?Z7Q8/H%D>Ulk\)9?D'Y$0@3".f]#14DJm*PrgX$H2D=P.C*uQ^%&119DM"(ObN'[/aTlqRX?;;<>O%%CB@2LB:n0bFh"Vh8b]Kj\Z#J?6:kdH$_q4BU(b`VpGdC'#E-,';q.mtf@qgVL9'.>r`g_+j%%UleW/EarH`rq/@cn*iFfiXt+se*R+jB3:2[Y9'15AGGkh^0god6%]b:_USV_-_JrfqV@eA_k,*8MspVV(Zb<Cda&`jgNT7`q9o38%rNEDSoCBe+s*aj,^\uu<If8fgT76d?^O#_7LO]<n[m0iGcThF'gJ:&Kr:UXcrpnP(O2(SJn,N1C++O-ZkC6ffqt!U5puCgmros(d%s7Q7R!I;8Xk!/e5\,Z)E0E2D,>Y&Q~>%AI9_PrivateDataEnd