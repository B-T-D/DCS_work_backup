%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 009x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 306 110
%%HiResBoundingBox: 0 0 305.7397 109.2490
%%CropBox: 0 0 305.7397 109.2490
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 8442 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2DA8FD53FFA8FD3DFFA8A8FFFF7DA87DFD05FF7DFD05FF7DFD05%FF7DFD05FF7DFD05FF7DFD04FFA87DFD04FFA8A8FD04FFA8A8FD04FFFD04%A8FFFFFFA8FD3DFFA8A8FFFFA8A87D7DFFFFFFA87D7DFFFFFFA87D7DFFFF%FF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA9FFFF%FF7D7DFD04FF7DA8A8A8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD09FFA8FFFFFFA8FD15FF7DA8FFFF7DA853A8A8FFFFA852A8A8%FFFFA852A8A8FFFFA852A8A8FFFFA852A8A8FFFFA852A8A8FFFFA859A8A8%FFFF7D52A8A8FFA87D7DA8A8FFA87D7DFD04A8FFA8FD08FFA8FFFFFFA8FD%31FFA8FFFFFFA8FFFFA8FD05FFA8FD05FFA8FD05FFA8FD04FFAFA8FD04FF%A8A8FD04FFA8A8FFFFA8FFA8A8FFFFA8FFA8FFFFFFA8FFA8FFA8FFFF84FF%A8FFA8FFA8FFA9FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%A9FFA8FFA8FFA8FFA8FFA8FFA8FD53FFA8FD41FFA87DA8A8FD04FF7DA8FF%FFFFA87DA8FFFFFFA87EA8FFFFFFA87EFD04FFA87DFD04FFA8A8FD04FFA8%A8FD04FF7DA8FD04FF7DA87DFD04FF7DFFFFFFA8FFFFFFA8FD09FFA8FFFF%FFA8FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD15FF7DA8597DFFFFFFA87D%7DFFFFFFA859A8FFFFFFA87DA8FFFFFF8459A8FFFFFF7D59A8FFFFFF8453%FFFFFFA8A859FFFFFFA87D7DFFFFFFA87D7DA8A8FFFFFFA8FD41FFA87E7D%A8A8A8FFA87DA8A8FFFFA87DA8A8FFFFA87DA8A8FFFFA87DA8A8FFFFA87D%A8A8FFFF7D7DA8A8FFFF7D7DA8A8FFFF7DA8A8A8FFFF7DA87DFFA8FFFF7D%FFA8FFA8FFA8FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD15FFA8A8A8FFA8FD05FFA8FFFFFFA8%FFA8FD05FFA8FFFFFFA8FFA8FD05FFA8FFFFFFAFFFA8FD05FFA8FD05FFA8%FD04FFA8FFA8A8FFA8FD08FFA8FFFFFFA8FD1FFFA9FD4DFFA8FD04FFA8FF%FFFFA8FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD19FF%7DA87DA8FD04FF7DA8FD04FF7DA8FFFFFFA852FD04FFA87DFD04FFA87DFD%04FFA87DFD04FFA87DFD04FFA87DFD04FF7D7D7DA8FFFFFFA8FD41FFA8A8%7D7DFFFFFFA87D7DFFFFFF7E7D7DFFFFFF7D7EA8FFFFFF7D7DA8FFFFFF7D%7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7EA8FFFFFF7DA8A8FD04FFA8%FFFFFFA8FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD19%FF7DA87DA87DFFFFFF53A87DFFFFFF7DA87DFFFFA87DA87DFFFFA87DA87D%FFFFA87DAF7DFFFFA87DA87DFFFFA87DA87EFFFFA87DA8A8FFFF7D7D7DA8%A8A8FFA8FD08FFA8FFA9FFA8FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD4B%FFA9FD0BFFA8FFA9FFFF7DFFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD09FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FD15FFA8A8A8FD05FFA8FD05FFA8FD05FF%A8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8A8A8FFFFFF%A8FD41FFA87D7DA8FFFFFFA87DA8FFFFFFA87DA8FFFFFFA87DA8FFFFFFA8%7DA8FFFFFFA87DA8FFFFFF7D7DFD04FF7D7DFD04FF7DA8FD04FF7DA87DFD%04FFA8FFFFFFA8FD1FFFA8FFFFFFA8FD19FF7DA87DA8FFFFFFA87D7EFFFF%FFA87DA8FFFFFFA87DA8AFFFFF8453A8FFFFFFA87DA8A8FFFFA853FFA8FF%A8A87DA8A8FFA87D7DFFFFFFA87D7DA8A8FFFFFFA8FD08FFA8FFFFFFA8FD%1FFFA9FD14FFFD06A8FFFFFD04A8FFFFA8A8A8FFFFFD04A8FFFFFD04A8FF%FFFD04A8FFFFFD04A8FFFFFD04A8FFFFFD04A8FFFF7DA87EFF84FFFF7DFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD19FFA8FD05FFA8FD05FFA8FD05FFA8FF%A8FFFFFFA8FD05FFA8FFA8FFFFFFA8FD0BFFA8FD07FFA8FFA8FD41FFA8A8%A9AFFD04FFA8FD05FFA8FD05FFA8FD05FFA8FD04FFAFA9FD04FFA9FD05FF%A8FD05FFA8FD05FFA8FF84FD04FFA8FFFFFFA8FD0DFFA8FFFFFFA8FD0DFF%A8FFFFFFA8FD19FF7DA87D7DFFFFFFA852A8FFFFFFA853A8FFFFFFA852A8%FFFFFFA853A8FFFFFF7E52FD04FFA87DFD04FF7D52FFFFFFA87D7DFFFFFF%A87D7DA8A8FFFFFFA8FD41FFA87D7D7DFFFFFFA87D7DFFFFFFA87DA8FFFF%FFA87D7EFFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFF%FF7DA8A8FFFFFF7DA87DFFAFFFFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD%15FFA8A87DFF7DFFFFFF7DFF7DFFFFFF7DFF7DFFFFFF7DFF7DFFFFFF7DFF%7DFFFFFF7EAF7DFFFFA8A8A87DFFFFA8A8A87EFFFFFD04A8FFFFFD06A8FF%A8FD7FFFA8FFFFFFA8FD0DFFA9FFFFFFA9FD0DFFA8FFFFFFA8FD19FF7DA8%7DFD05FF7DFD05FF7DFD05FF7DFD05FF7DFD05FF7DFD04FFA87DFD04FFA8%84FD04FFA87EFD04FFFD04A8FFFFFFA8FD41FFA8A87D7DFFFFFFA87D7DFF%FFFFA87D7DFFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FF%FFFF7D7DA8FFFFFF7D7EFD04FF7DA8A8A8FFFFFF84FFA8FFA8FFA8FD07FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFA8FFA8FFA8FFA8FD17FF7DA8%53A8A8FFFFA852A8A8FFFFA852A8A8FFFFA852A8A8FFFFA852A87EFFFFA8%52A8A8FFFFA853A8A8FFFF7D53A8A8FFA87D7DA8A8FFA87D7DFD04A8FFA8%FD04FFAFFFFFFFA8FFFFFFA8FFFFFFAFFD09FFA9FFFFFFA9FD09FFAFFD19%FFA8FFFFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD04FFA8A9%FFFFA8FFA8A9FFFFA8FFA8FFFFFFA8FFA8FFA8FFFFA8FFFFFFA9FD0DFFA8%FFFFFFA8FD0DFFA9FFFFFFA9FD19FFA8FD3DFFA8FD41FFA87D7EA8FD04FF%7DA8FFFFFFA87DA8FFFFFFA87DA8FFFFFFA87DFD04FFA87DFD04FFA87EFD%04FFA8A8FD04FF7DA8FD04FF7DA87DFD04FF7DFFFFFFA8FFFFFFA8FD09FF%A8FFFFFFA8FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD15FF7DA8597DFFFF%FFA87D7EFFFFFFA87DA8FFFFFFA87DA8FFFFFF7E53A8FFFFFF7D7DA8FFFF%FF8452FFFFFFA8A859AFFFFFA87D7DFFFFFFA87D7DA8A8FFFFFFA8FD1AFF%A8FFFFFFA8FD22FFA8847DA8A8A8FFA87DA8A8FFFFA87DA8A8FFFFA87DA8%A8FFFFA87DA8A8FFFFA87DA8A8FFFF7D7DA8A8FFFF7D7DA8A8FFFF7DA8A8%A8FFFF7DA87DFFA8FFFF7DFFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD15FFA8A8%FFFFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FF%A8FD05FFA8FD04FFA8FFFFA8FFA8FD7AFFA8FD04FFA8FFFFFFA8FD09FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD19FF7DA87DA8FFFFFF%AF53A8FFFFFFA852A8FFFFFFA852A9FFFFFFA87DFD04FFA852FD04FFA87D%FD04FF847DFD04FF7E7DFD04FF7D7D7EA8FFFFFFA8FD41FFA8A87D7DFFFF%FFA87D7DFFFFFF7D7D7DFFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7D7DA8FFFF%FF7D7DA8FFFFFF7D7DA8FFFFFF7D7EA8FFFFFF7DA8A8FD04FF7EFFA8FFA8%FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA9FFA8FFFFFFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FD15FF7DA87DA87DFFFFFF7DA87DFFFFFF7DA87D%FFFFA87DA87DFFFFA87DA87DFFFFA87DA87DFFFFA87DA87DFFFFA87DA8A8%FFFFA87DA8A8FFFF7E7D84A8A8A8FFA8FD1AFFA8FFFFFFA8FD5BFFA9FD04%FF7DFFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD09FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD15FFA8A8A8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8%FD05FFA8FD05FFA8FD05FFA8FD05FFA8A8A8FFFFFFA8FD41FFA87D7D84FF%FFFFA87DA8FFFFFFA87DA8FFFFFFA87DA8FFFFFFA87DA8FFFFFF847DA8FF%FFFF7D7DFD04FF7D7DFD04FF7DA8FD04FF7DA87DFD04FF84FFFFFFA8FD0D%FFA8FFFFFFA8FD0DFFA8FFFFFFA8FD19FF7DA859A8A8FFFFA87D7EA8FFFF%A87DA8FFFFFFA87DA8A8FFFF8453A8A8FFFF7E59A8A8FFFF7E52FFA8FFA8%847DA8A8FFA87D7DFFA8FFA87D7DA8A8FFA8FFA8FD04FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FD07FFA9FFA8FFA8FFA8FFA9FD07FFA8FFFFFFA8FD14FFFD%06A8FFFFFD04A8FFFFA8A8A8FFFFFD04A8FFFFFD04A8FFFFFD04A8FFFFFD%04A8FFFFFD04A8FFFFFD04A8FFFFA8A87DFFA8FFFFA8FFFFFFA8FD09FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FD1DFFA8FD05FFAFFD05%FFA8FD05FFA8FFA8FFFFFFA8FD07FFA8FFFFFFA8FD0BFFA8FD07FFA8FFA8%FD41FFFD04A8FD04FFA8FD05FFA8FD05FFA8FD05FFA8FD04FFA8A9FD04FF%A8A8FD04FFA8FD05FFA8FD05FFA8FF7DFFFFFF7DA8FFFFFFA9FD0DFFA8FF%FFFFA8FD0DFFA9FFFFFFA9FD19FF7DA87D7EFFFFFFA853A8FFFFFFA87DA8%FFFFFFA859A8FFFFFFA859A8FFFFFF7D52FD04FFA853FD04FF7D52FFFFFF%A87D7DFFFFFFA87D7DA8A8FFFF7DA8FD1AFFA8FFFFFFA8FD22FFA87D7D7E%FFA8FFA87D7DFFFFFFA87DA8FFFFFFA87DA8FFFFFF7D7DA8FFFFFF7D7DA8%FFFFFF7D7DA8FFFFFF7D7DA8FFFFFF7DA8A8FFFFFF7DA87DFFFFFF7DA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD15FF7DA8A8FF7DFFFFFFA8FF7DFFFFFF%7DFF7DFFFFFF7EFF7DFFFFFFA8FF7DFFFFFFA8FF7DFFFFA8A8A87DFFFFA8%A8A87DFFFFFD04A8FFFFFD04A8FFFF7D%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:03:46+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:03:46+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:03:46+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>92</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAXAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9D+XfLvl9/L+mO+mWjM1&#xA;pAWYwRkkmNaknjiqMt/Lfl0xmul2f23/AN0Rfzn/ACcVdF5b8u+pN/uLs9nFP3EX8i/5OKuXy35d&#xA;+suP0XZ04Jt6EXi3+Tirm8t+XfrKD9F2dOD7ehF4r/k4q6Xy35d9SH/cXZ7ua/uIv5G/ycVdceW/&#xA;LojFNLs/tp/uiL+cf5OKuufLfl0W0pGl2YIRqH0IvD/VxVV/w15c/wCrVZ/9I8X/ADTiqlbeW/Lp&#xA;toidLsySi1PoReH+rirrfy35dMZrpdn9t/8AdEX85/ycVRtjbW1sssFtEkEKP8EUahFFVUmirQdT&#xA;iqJxV2KuxVKPMF5dwXOjW9vcC2F9fehNJxVjwW2nm4jnUAs0KriqzzLqN5Zy6PHbS+l9bvTFMKKz&#xA;OiWs8/pLyrQu8KrXr4Yql3kfzi+t2Bl1Ca1Ez3CQWstvWOKZntEumiRZHdmkh5uj7/sE0XdVVXeZ&#xA;fNV7pfmDS9Oh9AR3jRAxzBzLP6tzHA625UgAwRyGV6hvh8BVgqndzqkQ0i61GxAvhbxzNHHCwb1J&#xA;IOQMakV+LmhX54qk/k7zWNXsEe8ubSSeWZorOe1qkN0EhSZzCrvIx9PmyNRjup+WKrdb803th5q0&#xA;7SYxB6F16IMThjcT+s8iOYCGVQLZYxJLVW+Fu3XFU01PW44fLV7rWm8L9YLSa6tliJdZTFGzKoKB&#xA;ieRWmwJxVB+U/Mq6rYobm5tpriSa5jtZ7Wqw3UVvIFM0Cs8h4jkA3xNv3xVD6h5pvrbztZ6Gqwi2&#xA;nSImNgxuJfVS4ZpYiG4hITbKHqp+31X4eSqZavrscHle61vTniu40tWurWUHnC68OSvyTqlPiNO2&#xA;KqPlfzCmp6fbfWbi3fUJvrRQW9VSeG0uTb/WYUZpG9J/gYfEw+IfEeuKoC6823sHneHQysAtJAA8&#xA;ZDC4Ef1eWdrvkWCegrxLCfh+032h0xVM/MOu/UfLc2r2LxSpwjeG4b44FjldV9d+JXlHGj+o1GHw&#xA;jriq3yx5hj1bTbV5pYTfTRyShISQssMczRLcxIxL+lLxDLWuzDc4qx7XvOerQ63q+lQSwWgsreSS&#xA;Kq8rkCO2juFujyZk9B5JDb0KA8waN2wqzCy1CCdYYWlT661vHcSQAjmEfbnx68eQIrgVCeW7eM+X&#xA;dLNX/wB44P23/wB9L74qjbe3jMZ3f7b/ALb/AM598VdFbx+pNu+zj9t/5F98VctvH9ZcVf7Cftv4&#xA;t74q5reP6ygq/wBh/wBt/FffFXS28fqQ7vu5/bf+RvfFXXFvGIxu/wBtP23/AJx74q65t4xbSmr/&#xA;AGG/bfw+eKqv1ePxf/kY/wDXFVK2t4zbRGr/AGF/bfw+eKut7eMxnd/tv+2/8598VX26hWmArQOO&#xA;pJP2F7nFVbFXYq7FVO4tba5VVuIUmVGDosihgGXowrXceOKpT5mvVtjpaNawXQuLziTcbiIRW81w&#xA;0qDi1XCwEL069cVUvK+vQeYoWuprFba6snTgjMsxQXNtHcIyyACjGK4CsB3qKkUJVb1zzWul6tZ2&#xA;P1UzRzmAXM/qKnpC6uUtIeKkH1CZZRyFRQb7mgKqZ3U1npGlXFwsQjtLKGSZooVAosal2Cqvc0xV&#xA;AeXdWj1uJ7u4sltb+ykNu68lm4erHHP+7lAXZ45ELbDfbtiqzU/NKWOuW2mfVjIknoC4n5hTGbuS&#xA;SKDjHSr1eFue44ih3xVH6jd2eh6FdXghCWemW0k3oQhUAjgjLcEHwqPhWg7Yqh9B1BNWia7uLRLf&#xA;UbKWeymUMs3psrLzWObipKvxQnYe4qMVQt95qjg8yw6E1p6sUohSe5LgcHulnaJfTYfGpFo3Ig7V&#xA;Gx+LiqmGq31vomh3F2kAMFhCWjto+KCiCiovRVHQe2KrdDvYtUtV1F7ZIbxHuLOWhEhVra4eGVVl&#xA;opKGSGo2HaoBxVAXXmiH/EiaBLZ+pbXDi0e4ZgQZ5LaW69MxUPwehA1XJG5C0OKphrWpx6NpEl2s&#xA;IcRenFBACI1LyyLDEpalEXm4qabDfFWtCvYNTs01T6ssF2/O2n+y7K1vK8bxiUAc0WRW4nv174qk&#xA;PmDzaPrGp6WumxXSWgdK3Tfu5J4LeO+ZGj4MePoyAq+/x7U74VZRZrbyJHepCkc08MYZwBy4CrIh&#xA;agJVS7UHucCoHy3FJ/h3S/3zj/Q4NqJ/vpf8nFUbbxSemf3zj437J/Of8nFXRRSepN++f7Y7J/Iv&#xA;+Tirlik+sv8Avn+wm9E8W/ycVc0Un1lP3z/YfeieK/5OKulik9SH98/2z2T+Rv8AJxV1xFJ6Y/fO&#xA;fjTsn84/ycVdcxSfVpf3zn4G2onh/q4qq+jJ/v8Af7k/5pxVStopPq0X75x8C7UTw/1cVdbxSemf&#xA;3zj437J/Of8AJxVfbghpgWLHmNzSv2F8AMVVsVdirsVdiqS+ZpbGOTSBdW0txI18PqrQymAxSJbz&#xA;SNKzB46qIUkBXflWlMVQfliLyhqNvDPpFgLRNNuDLFAYfq5SWe3HGT0xT7dvOOJPQGm1KBVX12/8&#xA;sw61pianbLPqCsDZ3BhEn1czypChL0/d+rMyIvi3yqFUxitdK0bSZEVVg0+3WWeYtVgAxaWZ2rWt&#xA;SzMcVSvyzaeVru3trnS9P+ojTXlSK1MZtzDJcIruTEPhq8bqwPgcVX6rf+WovMmnxXtp6uqIFFte&#xA;+jzFv9ZLJGGlp8HqtGyr7jFUa9vo2i+XpIpEEej2Fs5mRwZQII0JfkDyL/DWvWuKoLy5Z+WriK1v&#xA;dMsfqZ036zaRW5j9FoGlkRrhWjG3J2jVq9+td8Vavr7ywPNlpb3FqH1tY1SG+EVfSEyzFIzON0Z1&#xA;il4j59OQqqi7qDRNF8sSW8sA/QtjaGF7XiZQbdI+Hp8DyL1X4ad8VUfLtr5fngtdR0yzNqLaOewh&#xA;hKmIwqk/GeP0weIPrQbnvTriqHvZ/Kk3mgWVxaK2sXEJtFvvSH7cUkv1cTUqHMKyPx/lr44qjtUX&#xA;RNM8uvBd26vpMEKWws+Hqh0NIo4VQ15FiVRR44qs0C10CaG31TS7YW4EBsokCmIxRxSMHh9PYKUl&#xA;BDbdRiqSeZL7ym19qkcumSXWpRWrQ3VxADbu6IkdxJbC6Vo2DeiyyMvLddt+mFWTWVjpxnTU4IuE&#xA;81tFAHJNRAhZ0SlSooZD0wKhvLa3P+HdLo6U+pwU+A/76X/KxVG263Ppmjp9t/2D/Of8rFXRLc+p&#xA;N8afbFfgP8i/5WKuVbn6y/xpXgn7B8W/ysVcy3P1lPjSvB/2D4r/AJWKulW59SH40+2afAf5G/ys&#xA;VdcLc+mKun20/YP84/ysVdcrc/VpaulODfsHw/1sVVeNz/vxP+AP/NWKqVstz9Wio6U4L+wfD/Wx&#xA;V1utz6Zo6fbf9g/zn/KxVfbhg03IgtzFSBQfYXtU4qrYq7FXYq7FUk8zR6a76T9duZ7dxfD6mLeL&#xA;1jLK1vMjRSL6U9I2haTk1FpSvIYqgvKuleWzbQT+XdSlms7e4Z5mSdphMwtxBHHMz8i0aQ8Cg9lb&#xA;fqVVfX7HyrPrmlSarOItR5D6lD6rIJjFLHLGJEBo4jnVGTl0elOu6qZxadbw6TJZXkz3duyyi4ku&#xA;W5Fo5SzMrMf2VVuI8FxVKvK+naCbW3utC1GW5s45JWlcTtN68pRYh6zPVm9ONFC+1Diq/VrTytJ5&#xA;m06S+uBHrDAG0tfWZBN6Jdoy8YPF/TLuyV71p02VRraZZReXZdN1O4e7svq0kN7cXb/E8TIRKZH2&#xA;/ZJ3xVB+W9N0b0LS+0e/mns0+s+ofVaRbiad19SS45fE0iNGQK041IpirV9Z+V3822kk9wE15ow1&#xA;vbeoQJBEswjkaKvFmRZJuFf8rrx+FVF3enadD5ZlsNVuXl0+K0MV7eXMpVzGiUeWSUFSGoORavXf&#xA;FVDy7p+lrb2l5pN9LPp4juFVPULpLLPP6s00vLcyiVWHbjVhTwVQ97p/lefzUOd16XmBoDJDAspB&#xA;U+nJCtwsdePqiKSRVbrxr2GyqO1Wy0qLy3Ja6tcv+j7eBRPeTSESj0aFZTKKH1AyhuQ35Yqt8vab&#xA;psNvb3Wl3ck2ntb8IU9QvG5eRpXnavWV3Y8m69cVSPzLaeSxqGpyXOozWuqPaNJdx2haeVI2RIZJ&#xA;1tuFwpf0QqM3pkhN9uuFWT2VkiTLdQ3Er27W0UMUBb90AhZhIF/nYOAT4AYFQ3ltrn/Dul0RKfU4&#xA;KfGf99L/AJOKo23a59M0RPtv+2f5z/k4q6Jrn1JvgT7Yr8Z/kX/JxVytc/WX+BK8E/bPi3+Tirma&#xA;5+sp8CV4P+2fFf8AJxV0rXPqQ/An2zT4z/I3+Tirrhrn0xVE+2n7Z/nH+Tirrlrn6tLVEpwb9s+H&#xA;+riqryuf99p/wZ/5pxVStmufq0VESnBf2z4f6uKut2ufTNET7b/tn+c/5OKr7csWm5ABuYqAaj7C&#xA;96DFVbFXYq7FXYqkvmW1tZm0uS4voLFYLyqi4pSdprea39BKvFR2ExK0r06HFUL5e8s3WjrEtpqX&#xA;1mJ5w99JIi1kigtVtIok4UVSvpIzN3IO1DQKq2t+WLbUtXsr2S7eD0mi9W3UKRP9VnS7hFW+JeEs&#xA;VTx6rUe4VRy6bcXWjT6fqswuHukminkiX0v3cxYBV67pGwXl3pWg6YqgNB0G8030jFqIuopZHm1G&#xA;Vo0BmcQx28QUJsgRYRWnce+yq7VPLUN7r1rqLXjQhfRM1oAh9b6m7ywUY/EvB5mLU67YqiptJn1D&#xA;y3NpOrziaW9tZLa9nhUJX1kKOUB5AUDbbfRiqH0PRrzTzG0d+LqC4e5ub92RQZp52QxtHxPFFRVY&#xA;UFa/PfFVl75Zt5/MkGr/AFpkdRG7WVF4yvbLMsTciC4C/Wm5Af5PvVVE3OkXV95ZbS9Su+V3NbCG&#xA;5voUVKy8KNKqHko+L4qHbFVPQ9IvdPEKLfC5siLqeeqKGluby5+s+opXZUXm4C71BHhuqh7zytHN&#xA;5iXVo7wrNH/pMNmQvH60tvLaLMWpz4+lOylelaHFUbqWkSahoP1C9uqXISF3vY0Cj14GWVZRGSy8&#xA;fUjDcSem2Kqeg6Pc6YscKXguLARu7AoOcl1PM88s3JaBVJk2Ufw3VSjzB5ZsVudT1OXV47CK6R5J&#xA;BdKhhimngjsWmLF4moYY1QLyA5b79MKshsrW9hnX/SUk09LaKKKEJRvVQtzk516MvEBcCofy3LJ/&#xA;h3S/3Ln/AEODeqf76X/KxVG28snpn9y5+N+6fzn/ACsVdFLJ6k37l/tjun8i/wCVirllk+sv+5f7&#xA;CbVTxb/KxVzSyfWU/cv9h9qp4r/lYq6WWT1If3L/AGz3T+Rv8rFXXEsnpj9y4+NO6fzj/KxV1zLJ&#xA;9Wl/cuPgbeqeH+tiqr60n++H+9P+asVUraWT6tF+5c/Au9U8P9bFXW8snpn9y5+N+6fzn/KxVfbk&#xA;lpiVKnmNjSv2F8CcVVsVdirsVdiqT+YtP1C7l0qSzVWNpeNLPV/TZYpLWe3LoaNVlM4am3zxVKfJ&#xA;vlvWPLlslp6dq8VzcK10LcmOKKKGyjgEiKw5NJNLArMOg5HckVZVX8x+VbvVNf0zUYnh9K0aIu0v&#xA;L1YfRuY7km3oCKzCL0pKkfD49CqmrQajqOhXNteAWN3dRzxAwtzMSvyWNg23xBCrGnfpiqU+UtC1&#xA;fQYIrL0LRba4mkmuktWZIbcLDHHGsCsAWMjoZH2AqzfSqu1ryrd3/mnT9WjeEQ23o8nkUmeH0Hkc&#xA;i3NCKXAk4S9PhUdcVTC9stR1bytdWN1xsb+/s5YHMZMixPNGyAgilePKux+nviqD8r6TqujRRWTW&#xA;9slrPJd3VwlsxWG2aSRWihgUqpZW5OzHiN69K0xVQ1HypeXHnS115HhMECw8iwP1lDAlypjhIAXh&#xA;N9aHOrfs9DX4VUwv7DVNX8pzWV0sVpqd7aGOdEZpYUldKMnKisyV2Ptiqzy5p+q6XFBYSQwCzpd3&#xA;EzxOaRSz3Rmit4lKryjRJGXkQv2Vou9Aql9/5U1BvOCeYYDC6wD1U6i5ZktZrcWtT8PoM0wl+0Pj&#xA;H04qmeuaXf6x5aeylEUV7MkTTREs9uzoyyPCxpyaJypRvh+yenbFVPyxp2q6VbQaZNFD9TiieQyw&#xA;sQqTTTu/1eGMj+6iRuKk02pt1oqkut+TdWl1nVdVsxbzveQyrDzYxz/vrWK1+rl+JAgUxmfvVz0H&#xA;XCrKbFdRhmS1kij+pQ2sQW4DHk04LK6hafZCqpr7/cFQ/lu4jHl3SxR/944P2H/30vtiqNt7iMRn&#xA;Z/tv+w/859sVdFcR+pNs+7j9h/5F9sVctxH9Zc0f7CfsP4t7Yq5riP6yho/2H/YfxX2xV0txH6kO&#xA;z7Of2H/kb2xV1xcRmMbP9tP2H/nHtirrm4jNtKKP9hv2H8Pliqr9Yj8H/wCRb/0xVStriMW0Qo/2&#xA;F/Yfw+WKut7iMRnZ/tv+w/8AOfbFV9uwZpiK0LjqCD9hexxVWxV2KuxV2Ksf822s88mimOB50h1D&#xA;nKEUuE/0W4SKR1H7CzPGT4dcVQHk0eY9Nt47XV7W8ke9uQqetMLtrdI7NPVllmMkn7uW5jf01Br8&#xA;Y+Fd1VVV8zaf5luPMOlT6cZ/qcTReq0Vx6MUfG5je4NxFyX1hJbB0QcW4t/LXkFU4NxqGoaFcSWs&#xA;T6ffzRzparcgckkHJIpGVS2xID0606gHbFUp8ofpqxtorPUrW8BuZXaD6zMLt7eKOGMN69wZJa+p&#xA;NzKDmxowHQGirtcsPMk3mvTrizM/6PT0ebpP6cEfB5DcieDmvretGyLH8LcWFfh6lVMbybVNT8q3&#xA;UunxS2Gp3dnL9SjnpHLFM8bCIv8Ab4kNQ7jbuMVQflU6vZwxWN/a3lLiS7mhe5mW5e2gSRfSiuJz&#xA;JJyd+ZKUZttu2KqOpWXmVvOtndwGc6QiR83jn4wIqJceuktvyrI8rSQ8GCGnE7rT41Uw1RtU1Pyn&#xA;cPYRTWWo3lmWggkYQzxySJXgXUn03FaVB+E4qoeVpNUtra306/tboSsLu59e4kE/oxG6P1a3ln5y&#xA;c5fRkA2ZvsGrHYlVBahbeZovOKahGtw+kwIZJfTmrC8C20ytbLah6tO1yY5Fk4H4QV5DoVU015dV&#xA;v/LEn1GKa3vp44nNssiw3AUsrTQrKrcUlMfJAwagbevfFVPyxLqsNtBp2o21wJkhac3MziYIjzuI&#xA;beSbkxkmSLjzYVG1a7iqrHfM+k+Y5dU1iWSG5utLmt3FuscpeEqbeNIoUtQ5Prrdq0pl4D4NuXbC&#xA;rMdPuJleOxkt5Q0NrDI9ywHpF25KYw1alxwqadAR4jAqH8t3NsPLulgyoCLOCo5D/fS4qjbe5thG&#xA;ayp9t/2h/OcVdFc23qTfvU3cU+IfyLirlubb6y59VKcE/aHi2Kua5tvrKH1Upwf9oeK4q6W5tvUh&#xA;/eps5r8Q/kbFXXFzbGMUlT7aftD+cYq65ubY20oEqElG/aHhiqr9atv9/J/wQxVStrm2FtEDKgIR&#xA;f2h4Yq63ubYRmsqfbf8AaH85xVfburtMykMpcUINR9hcVVsVdirsVdirH/N13JbyaIFuTapPqHpu&#xA;fU9JZCLS4eKJmJGzzIgp36YqgPJnmDVGtYodfa4+t3lwIbBrm1a3ldhZpcTq0SxoESKQSortsQAK&#xA;saFlUR5k1DzHb6/pcOnrMbORovVEVv60cnK4RJxPLQ+isduzSIaryYdT9kqps2qG80S4v9HX6zL6&#xA;c/1NHDRiSWLkij4gp4s69e43G2KpP5Q1y9ktorbV5bmS7uppBYSXdq1rPJFFFG8jSRCOIRhJXdFL&#xA;KKgL1JqVW9b1HzHD5s062s1n/R8gh5JHb+pBJzeQXJnuOLeiYY1RoxyXkTT4ugVTG91aa68q3eqa&#xA;CDcXD2c02mAo1ZJRGxiHB+BPJgPCuKoPytrdzLBDaam873k8l0bCS6t2t55rW2dV9WaMRxrG37xR&#xA;uq12IG+KqOo6j5ji87WltEsw0gpHzCwBrd1ZLgzyTXBX928TRwhF5ivI7NX4FUw1PVrmfylcarog&#xA;eSaazNxYfumMh5JyQiFgGZqGoSlSdsVUPK2szTWttZajJM+qSi7miNxA0Er2kF0YYZZUCRrG7xvG&#xA;3EqpNTRRQgKoLUNZ1+185RxMsw0VELXP+jk2y2wtppHuDcBD++W4SOP0uY+E8uJ6hVNNc1K8byxJ&#xA;qGjiRpJY4pIWSFnmWGRl5yJAw5NIkTMyoV3YUp2xVT8r6xcXFpb2momX9Kek87etCYZGt/WeOCSV&#xA;QAkckiKGZNqGuwpirHPNOseYYNU1iKe4nsdKht5DBMsfpQBFt43imF4VWkzXbND6XqGq0PHeuFWY&#xA;6fqUMrx2TsxvktYbmZSpA4y8lBLU41LRttgVb5a/5RzSv+YO3/5NLiqNt/7s/wCvJ/xM4q6H+8n/&#xA;ANcf8QXFXL/vTJ/qJ+tsVc3+9Mf+o/61xV0395B/rn/iDYq64/ux/rx/8TGKuuv95pv9Rv1YqqYq&#xA;p2v+80P+ov6sVdb/AN2f9eT/AImcVah/vJ/9cf8AEFxVVxV2KuxV2KpP5i1DULSXSo7NlU3d40U9&#xA;U9RmijtZ7gogqtGYwBa7/LFUu8k+cTrdi0l9JapOZo4rdrdz6crS2kd2Y4+Z5M8SyMrU/l5UG6hV&#xA;d5j82XGla9punRrDwu2iDrKWEsomuo7Yi3AI3hEvqyVB+Hw6hVOrvVYI9IutStKXyW0U0ipAwb1G&#xA;gDco1YVHLkhX2OKpT5P80/pix5Xc9oblpmit5LVz6VwFiSZmhDks3piTg9CfiU4qp635rutP802G&#xA;kpHCYLn0Q6yFhPKbiSSOsAHw/uPS5y1r8JHTFU11bWorXy7fazZcb5LW1muoVibksvpRs4VWXl9o&#xA;rTbFUJ5W8xpqtmDPPbPdetcQxSWzfurlLZwjSwBmZig5ANuaN3xVCX/my6tvOtroKxw+hMkPJXLf&#xA;WJDOtyxkhANCkX1UB6j9qtRQclUz1jXYbTy3da1ZNFdxRWzXNvIrhoXULyV+a1+DuSO2KqflnX11&#xA;TT4WuJrc3ztdLwgb4ZUtLlrdp4lYlvTYqrdTTkBU9Sql915vuIPOsOhlIRbOQjgk/WAptprj6yak&#xA;KIFMHpVofjPUYqmfmHXBp/l6bVbQxzKFjaKZjWEJK6p6zsp3jRX5sQfsjFVvlnX4tW023lkkh+uS&#xA;rI5jiaoeOOVoRPGpJb0pCnJD4Eb4qkGt+c9Wi1rVNKs/q8LWcMrRcw0k9YbWK6+sFAyj0G9Uw9qO&#xA;Op6YVZbZX8M6QxtLH9beBJ3gVhzCPsG4V5cSwIBwKg/LdtbHy7pZMSEmzgqeI/30uKo23trYxmsS&#xA;fbf9kfznFXRW1t6k37pNnFPhH8i4q5ba2+suPSSnBP2R4tirmtrb6yg9JKcH/ZHiuKultrb1If3S&#xA;bua/CP5GxV1xbWwjFIk+2n7I/nGKuuba2FtKREgIRv2R4Yqq/Vbb/fKf8CMVUra2tjbRExISUX9k&#xA;eGKut7a2MZrEn23/AGR/OcVX26KjTKoCqHFABQfYXFVbFXYq7FXYqknme6t4TpaTWEF+J70BfrJo&#xA;sBit5rgzp+7mq6rCQoAG5+0MVU/LOs2WvwG5Nh9UmsZVMccnByv1m3SdZFZKgForije9RuNyq7XP&#xA;NFrpmr2VnJaNOZWi9W5BQCD61cJZwmjfE3OWUA8egqfYqpnPJY6Ppc84jENnZxSTvHEo2VQZHIUd&#xA;Sdz7nFUD5ev7TV4frL6etpeafI0Bibg5iMscc37t12o8cqE0+WKrNU8y29lrtrp72jS8vREt0CgE&#xA;JvHeKD4WPJubwsG49NsVR19dWGhaFc3fpenY6ZbSTmGEAUigQuVQbDou2KofQLu11OEXTWK2d7YS&#xA;T2Twng5hYMvqKjrsVfijbfTuMVQ995ltIfM0GjPZtKZFjjkvAUpG1yszRpQ/GQwtWqV6fD70VR+o&#xA;3VnoehTXCW4+qWEBMdrCFUcUFFjQHio8B2xVT0K5tdStY9RFottcxGeyZTxZo/q87Qyorr+x6kNR&#xA;47bYqgrrzJY/4lTRJbNnFwfqZvCVp60lvJdejx+3xMMDMW6VoMVTDWL620fRnn+r+pFEI4IbWMKo&#xA;ZpXWGKMV+FVLOo8AMVW6Fc2WpWseqx2ot7lle1lBCl0NvK8bxc12KrKrUpseuKpF5j8zWhn1PTX0&#xA;aLUUtkZH+tsiwTTQQR3rQkcJmoIZA6twI5bbdcKsmsorWQR36QJHPPBGhcAcvTFXWPlQfCpc0wKg&#xA;/LdvGfLulmr/AO8cH7b/AO+l98VRtvbxmM7v9t/23/nPviroreP1Jt32cftv/Ivvirlt4/rLir/Y&#xA;T9t/FvfFXNbx/WUFX+w/7b+K++Kult4/Uh3fdz+2/wDI3virri3jEY3f7aftv/OPfFXXNvGLaU1f&#xA;7Dftv4fPFVX6vH4v/wAjH/riqlbW8ZtojV/sL+2/h88Vdb28ZjO7/bf9t/5z74qvt1CtMBWgcdSS&#xA;fsL3OKq2KuxV2KuxVJfMr6akmkfXbae4kN8PqZt5fR9KVbeZ2lkYywAxrCsnJSWrWnE4qgvK9t5Q&#xA;vrWCfQ7c20Gn3BlSERyW5EstsFVmRgrMptpl4V+HjQfsiiqJ1y58rx61pi6pCJNRVh9Sl9J5BEZZ&#xA;UjQu6gqgeYoF5dWpTpsqmENnpmk6TJDQR6fCsss3qHkoVy0kpatdqsxp0+jFUr8sWnla5tra50a2&#xA;a2isHlVLdkkgZJJkUsZI34sWMbKV5fske2KrtVuPKq+ZtOS/txJrEYH1S49F3EPrFlj5yAFE5sjh&#xA;OR61p1xVHPa6No/l2WC4oNHsrZ/rPrVkHoIhMhevIsONa4qgvLtl5bmitbzSrdrdbA3VukDK8TRy&#xA;TSK1wJI3o3MvGDVuta98VavrnyoPNtrFcxA6+I1S3uvSc+mJFmMamUDgrMqTcKmv2qfa3VRd3baJ&#xA;pPliW1u4+Wi2doYZopA0/K3SPiVYHk0hK7U3JxVR8u2fl+SC11DSYWhigjns4YiHi9Ok/wDpCvG1&#xA;Pj9aH4mbeoO+5qqhr1/KM3mgWs8I/Ts0Jt1uhExoHikcRetxMYk9JZGCnfjXsd1UfqkWiWHl2S2v&#xA;4+WkwwpbtAwaUsm0caAfE7MTQL3r74qs0C00GSG31LSozHELf6pClGQRpHI3NDG1OLiQEPyFajFU&#xA;j8yXPkv9Iamtzp811qi2rxXb2geGV41RJpIVuedunqeiVdl9QMU23G2FU5vp9N0nT7nzKltPOsFi&#xA;nOGFl5/VoOUvwpI6R1UOSfiqaUwKidN9P9HWv1H1vqXox/Vf7r+64jh9r4vs0674qrR+rxPD16cm&#xA;r/c9eRr+OKuT1eT8fXry+P8AuevEfwpirh6vqtT1+fFeX9z0qafxxVx9X1Vr6/Pi3H+56VFf4Yq5&#xA;/V5Jy9evL4P7nrxP8K4q6T1eI5+vTktP7nryFPxxV0vq+k/qevw4nl/c9Kb9MVX/AOkf8Xf8kcVW&#xA;Rer6Sen6/DiOP9z0pt1xV0fq8Tw9enJq/wBz15Gv44qr29KP9rny/ecqVrQfy7dKdMVVcVdirsVd&#xA;irHvN/p+rofL1ef6R+D0vS48fqlx63q+ttw9D1Om9aUxVJPKH6L4af8AoH9JfVvrh+v+vT1OP6P/&#xA;ANF+s+p8Xoeh6XDj8XLjy354VTHzP/hn/EOlfpH6x9c5w8fR5ejT6zH9V+s0/Z+t8PT/AMr/ACeW&#xA;BUxs/R/wxP8Apn1vq3C6+vfXacvR5yc68P8AdfD7H7XCld64qk/lT6pysv0X+kPq/qz/AKS+tU9X&#xA;1vq8Xo/Wa/s+hw4cd/s/5WFVfXf8Of4u03659a+u/uOXpcvqtecv1L6zTv6vqelT9rr2wKiovQ/w&#xA;HL/iD6x9X+oS/pX6zT1/T9NvWr6f+TWlN6U74qgvLH1b6zYfo39IfV6X/wCk/rHCv1z1Ia/XK7+p&#xA;19PhtSvbCreqf4c/xxac/rH6X4R04cvqfqcLn6t69NvU4+vw/H9jAqLk+q/4BH6c+teh+jl+verX&#xA;65/dDlX0t/Wr/LvyxVD+VvT9ay+pfXv0f6F/631nj/vb9dH1j6z/AMXerz4cPgpzptxxVC6z/h7/&#xA;ABgKfWv016TfVOH+83136pP6dP8Al5+qerTtw96YVTTUfqH+DE/S/wBa9L0Lfn6lPrvr1T0a+n8P&#xA;1j1uP2duftgVQ8p/V+cP1D65+jfqjf70Up9a+syfWfXrv9Y9SvLjt9qv7OFUj81foH9K6z6H179J&#xA;fV5PX9Dh9W9f6tH63H1f3f1j6jw+1tw6fFiqf+bPS/wBqHD1/qv1BvU9H0vX+r+n+94+r+75ely6&#xA;/RgV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:DB7DBEF0082068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:DB7DBEF0082068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DB7DBEF0082068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:03:46+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -109.249 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 109.249 li
305.74 109.249 li
305.74 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 108.002 mo
108.003 108.002 li
108.003 0 li
0 0 li
0 108.002 li
cp
clp
gsave
0 0 mo
108.003 0 li
108.003 108.002 li
0 108.002 li
0 0 li
cp
clp
.5967 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
11.0391 .29834 mo
11.0391 107.704 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .245 cmyk
@
21.7798 .29834 mo
21.7798 107.704 li
@
32.52 .29834 mo
32.52 107.704 li
@
43.2607 .29834 mo
43.2607 107.704 li
@
54.0015 .29834 mo
54.0015 107.704 li
@
64.7422 .29834 mo
64.7422 107.704 li
@
.29834 11.0391 mo
107.705 11.0391 li
@
.29834 21.7793 mo
107.705 21.7793 li
@
.29834 32.52 mo
107.705 32.52 li
@
.29834 43.2607 mo
107.705 43.2607 li
@
.29834 54.0015 mo
107.705 54.0015 li
@
.29834 64.7417 mo
107.705 64.7417 li
@
75.4824 .29834 mo
75.4824 107.704 li
@
86.2231 .29834 mo
86.2231 107.704 li
@
96.9639 .29834 mo
96.9639 107.704 li
@
.29834 75.4824 mo
107.705 75.4824 li
@
.29834 86.2231 mo
107.705 86.2231 li
@
.29834 96.9639 mo
107.705 96.9639 li
@
.29834 .29834 mo
107.705 .29834 li
107.705 107.704 li
.29834 107.704 li
.29834 .29834 li
cp
0 0 0 1 cmyk
@
grestore
grestore
151.616 3.73291 mo
151.75 3.73291 151.993 3.73291 151.993 3.43701 cv
151.993 3.1499 151.742 3.1499 151.616 3.1499 cv
149.984 3.1499 li
149.688 3.1499 149.608 3.22168 149.608 3.52637 cv
149.608 9.74023 li
149.608 10.0361 149.68 10.1167 149.984 10.1167 cv
151.616 10.1167 li
151.75 10.1167 151.993 10.1167 151.993 9.8208 cv
151.993 9.53418 151.742 9.53418 151.616 9.53418 cv
150.271 9.53418 li
150.271 3.73291 li
151.616 3.73291 li
cp
false sop
0 0 0 1 cmyk
f
161.031 3.73291 mo
161.166 3.73291 161.408 3.73291 161.408 3.43701 cv
161.408 3.1499 161.157 3.1499 161.031 3.1499 cv
159.399 3.1499 li
159.103 3.1499 159.022 3.22168 159.022 3.52637 cv
159.022 9.74023 li
159.022 10.0361 159.094 10.1167 159.399 10.1167 cv
161.031 10.1167 li
161.166 10.1167 161.408 10.1167 161.408 9.8208 cv
161.408 9.53418 161.157 9.53418 161.031 9.53418 cv
159.686 9.53418 li
159.686 3.73291 li
161.031 3.73291 li
cp
f
166.043 6.6377 mo
166.043 4.97021 165.128 3.79541 164.125 3.79541 cv
163.111 3.79541 162.206 4.99707 162.206 6.62891 cv
162.206 8.29639 163.121 9.47119 164.125 9.47119 cv
165.137 9.47119 166.043 8.26953 166.043 6.6377 cv
cp
164.125 8.88818 mo
163.425 8.88818 162.869 7.83057 162.869 6.53906 cv
162.869 5.23926 163.479 4.37842 164.125 4.37842 cv
164.77 4.37842 165.379 5.24805 165.379 6.53906 cv
165.379 7.83936 164.824 8.88818 164.125 8.88818 cv
cp
f
168.984 9.35449 mo
168.939 9.55176 168.778 9.89258 168.321 10.0449 cv
168.24 10.0718 168.079 10.126 168.079 10.3232 cv
168.079 10.4575 168.213 10.6191 168.383 10.6191 cv
168.67 10.6191 169.594 10.1436 169.594 9.13965 cv
169.594 8.61963 169.262 8.23389 168.84 8.23389 cv
168.491 8.23389 168.267 8.50293 168.267 8.79883 cv
168.267 9.13037 168.509 9.37256 168.84 9.37256 cv
168.904 9.37256 168.966 9.36377 168.984 9.35449 cv
cp
f
180.166 6.6377 mo
180.166 4.97021 179.25 3.79541 178.247 3.79541 cv
177.233 3.79541 176.328 4.99707 176.328 6.62891 cv
176.328 8.29639 177.243 9.47119 178.247 9.47119 cv
179.259 9.47119 180.166 8.26953 180.166 6.6377 cv
cp
178.247 8.88818 mo
177.547 8.88818 176.991 7.83057 176.991 6.53906 cv
176.991 5.23926 177.601 4.37842 178.247 4.37842 cv
178.892 4.37842 179.501 5.24805 179.501 6.53906 cv
179.501 7.83936 178.946 8.88818 178.247 8.88818 cv
cp
f
183.106 9.35449 mo
183.061 9.55176 182.9 9.89258 182.443 10.0449 cv
182.362 10.0718 182.201 10.126 182.201 10.3232 cv
182.201 10.4575 182.335 10.6191 182.505 10.6191 cv
182.792 10.6191 183.716 10.1436 183.716 9.13965 cv
183.716 8.61963 183.384 8.23389 182.962 8.23389 cv
182.613 8.23389 182.389 8.50293 182.389 8.79883 cv
182.389 9.13037 182.631 9.37256 182.962 9.37256 cv
183.026 9.37256 183.088 9.36377 183.106 9.35449 cv
cp
f
194.288 6.6377 mo
194.288 4.97021 193.373 3.79541 192.369 3.79541 cv
191.355 3.79541 190.45 4.99707 190.45 6.62891 cv
190.45 8.29639 191.365 9.47119 192.369 9.47119 cv
193.381 9.47119 194.288 8.26953 194.288 6.6377 cv
cp
192.369 8.88818 mo
191.669 8.88818 191.113 7.83057 191.113 6.53906 cv
191.113 5.23926 191.723 4.37842 192.369 4.37842 cv
193.014 4.37842 193.624 5.24805 193.624 6.53906 cv
193.624 7.83936 193.068 8.88818 192.369 8.88818 cv
cp
f
197.228 9.35449 mo
197.183 9.55176 197.022 9.89258 196.565 10.0449 cv
196.484 10.0718 196.323 10.126 196.323 10.3232 cv
196.323 10.4575 196.458 10.6191 196.627 10.6191 cv
196.915 10.6191 197.838 10.1436 197.838 9.13965 cv
197.838 8.61963 197.506 8.23389 197.084 8.23389 cv
196.735 8.23389 196.511 8.50293 196.511 8.79883 cv
196.511 9.13037 196.753 9.37256 197.084 9.37256 cv
197.148 9.37256 197.21 9.36377 197.228 9.35449 cv
cp
f
208.41 6.6377 mo
208.41 4.97021 207.495 3.79541 206.491 3.79541 cv
205.477 3.79541 204.572 4.99707 204.572 6.62891 cv
204.572 8.29639 205.487 9.47119 206.491 9.47119 cv
207.503 9.47119 208.41 8.26953 208.41 6.6377 cv
cp
206.491 8.88818 mo
205.792 8.88818 205.235 7.83057 205.235 6.53906 cv
205.235 5.23926 205.845 4.37842 206.491 4.37842 cv
207.136 4.37842 207.746 5.24805 207.746 6.53906 cv
207.746 7.83936 207.19 8.88818 206.491 8.88818 cv
cp
f
211.35 9.35449 mo
211.305 9.55176 211.144 9.89258 210.687 10.0449 cv
210.606 10.0718 210.445 10.126 210.445 10.3232 cv
210.445 10.4575 210.58 10.6191 210.75 10.6191 cv
211.037 10.6191 211.96 10.1436 211.96 9.13965 cv
211.96 8.61963 211.628 8.23389 211.207 8.23389 cv
210.857 8.23389 210.633 8.50293 210.633 8.79883 cv
210.633 9.13037 210.875 9.37256 211.207 9.37256 cv
211.27 9.37256 211.333 9.36377 211.35 9.35449 cv
cp
f
222.532 6.6377 mo
222.532 4.97021 221.617 3.79541 220.613 3.79541 cv
219.599 3.79541 218.694 4.99707 218.694 6.62891 cv
218.694 8.29639 219.609 9.47119 220.613 9.47119 cv
221.625 9.47119 222.532 8.26953 222.532 6.6377 cv
cp
220.613 8.88818 mo
219.914 8.88818 219.357 7.83057 219.357 6.53906 cv
219.357 5.23926 219.967 4.37842 220.613 4.37842 cv
221.258 4.37842 221.868 5.24805 221.868 6.53906 cv
221.868 7.83936 221.312 8.88818 220.613 8.88818 cv
cp
f
225.472 9.35449 mo
225.427 9.55176 225.266 9.89258 224.809 10.0449 cv
224.728 10.0718 224.567 10.126 224.567 10.3232 cv
224.567 10.4575 224.702 10.6191 224.872 10.6191 cv
225.159 10.6191 226.083 10.1436 226.083 9.13965 cv
226.083 8.61963 225.75 8.23389 225.329 8.23389 cv
224.979 8.23389 224.755 8.50293 224.755 8.79883 cv
224.755 9.13037 224.998 9.37256 225.329 9.37256 cv
225.392 9.37256 225.455 9.36377 225.472 9.35449 cv
cp
f
236.654 6.6377 mo
236.654 4.97021 235.739 3.79541 234.735 3.79541 cv
233.721 3.79541 232.816 4.99707 232.816 6.62891 cv
232.816 8.29639 233.731 9.47119 234.735 9.47119 cv
235.748 9.47119 236.654 8.26953 236.654 6.6377 cv
cp
234.735 8.88818 mo
234.036 8.88818 233.479 7.83057 233.479 6.53906 cv
233.479 5.23926 234.089 4.37842 234.735 4.37842 cv
235.38 4.37842 235.99 5.24805 235.99 6.53906 cv
235.99 7.83936 235.434 8.88818 234.735 8.88818 cv
cp
f
239.594 9.35449 mo
239.549 9.55176 239.388 9.89258 238.931 10.0449 cv
238.85 10.0718 238.689 10.126 238.689 10.3232 cv
238.689 10.4575 238.824 10.6191 238.994 10.6191 cv
239.281 10.6191 240.205 10.1436 240.205 9.13965 cv
240.205 8.61963 239.873 8.23389 239.451 8.23389 cv
239.101 8.23389 238.877 8.50293 238.877 8.79883 cv
238.877 9.13037 239.12 9.37256 239.451 9.37256 cv
239.514 9.37256 239.577 9.36377 239.594 9.35449 cv
cp
f
250.776 6.6377 mo
250.776 4.97021 249.861 3.79541 248.857 3.79541 cv
247.843 3.79541 246.938 4.99707 246.938 6.62891 cv
246.938 8.29639 247.853 9.47119 248.857 9.47119 cv
249.87 9.47119 250.776 8.26953 250.776 6.6377 cv
cp
248.857 8.88818 mo
248.158 8.88818 247.601 7.83057 247.601 6.53906 cv
247.601 5.23926 248.211 4.37842 248.857 4.37842 cv
249.502 4.37842 250.112 5.24805 250.112 6.53906 cv
250.112 7.83936 249.556 8.88818 248.857 8.88818 cv
cp
f
253.716 9.35449 mo
253.671 9.55176 253.51 9.89258 253.053 10.0449 cv
252.972 10.0718 252.811 10.126 252.811 10.3232 cv
252.811 10.4575 252.946 10.6191 253.116 10.6191 cv
253.403 10.6191 254.327 10.1436 254.327 9.13965 cv
254.327 8.61963 253.995 8.23389 253.573 8.23389 cv
253.223 8.23389 253 8.50293 253 8.79883 cv
253 9.13037 253.242 9.37256 253.573 9.37256 cv
253.636 9.37256 253.699 9.36377 253.716 9.35449 cv
cp
f
264.898 6.6377 mo
264.898 4.97021 263.983 3.79541 262.979 3.79541 cv
261.965 3.79541 261.06 4.99707 261.06 6.62891 cv
261.06 8.29639 261.975 9.47119 262.979 9.47119 cv
263.992 9.47119 264.898 8.26953 264.898 6.6377 cv
cp
262.979 8.88818 mo
262.28 8.88818 261.724 7.83057 261.724 6.53906 cv
261.724 5.23926 262.333 4.37842 262.979 4.37842 cv
263.625 4.37842 264.234 5.24805 264.234 6.53906 cv
264.234 7.83936 263.678 8.88818 262.979 8.88818 cv
cp
f
267.838 9.35449 mo
267.793 9.55176 267.632 9.89258 267.175 10.0449 cv
267.094 10.0718 266.933 10.126 266.933 10.3232 cv
266.933 10.4575 267.068 10.6191 267.238 10.6191 cv
267.525 10.6191 268.449 10.1436 268.449 9.13965 cv
268.449 8.61963 268.117 8.23389 267.695 8.23389 cv
267.345 8.23389 267.122 8.50293 267.122 8.79883 cv
267.122 9.13037 267.364 9.37256 267.695 9.37256 cv
267.758 9.37256 267.821 9.36377 267.838 9.35449 cv
cp
f
279.02 6.6377 mo
279.02 4.97021 278.105 3.79541 277.101 3.79541 cv
276.087 3.79541 275.182 4.99707 275.182 6.62891 cv
275.182 8.29639 276.097 9.47119 277.101 9.47119 cv
278.114 9.47119 279.02 8.26953 279.02 6.6377 cv
cp
277.101 8.88818 mo
276.402 8.88818 275.845 7.83057 275.845 6.53906 cv
275.845 5.23926 276.456 4.37842 277.101 4.37842 cv
277.747 4.37842 278.356 5.24805 278.356 6.53906 cv
278.356 7.83936 277.8 8.88818 277.101 8.88818 cv
cp
f
281.96 9.35449 mo
281.916 9.55176 281.754 9.89258 281.297 10.0449 cv
281.216 10.0718 281.055 10.126 281.055 10.3232 cv
281.055 10.4575 281.19 10.6191 281.36 10.6191 cv
281.647 10.6191 282.571 10.1436 282.571 9.13965 cv
282.571 8.61963 282.239 8.23389 281.817 8.23389 cv
281.467 8.23389 281.244 8.50293 281.244 8.79883 cv
281.244 9.13037 281.486 9.37256 281.817 9.37256 cv
281.88 9.37256 281.943 9.36377 281.96 9.35449 cv
cp
f
293.142 6.6377 mo
293.142 4.97021 292.227 3.79541 291.223 3.79541 cv
290.209 3.79541 289.304 4.99707 289.304 6.62891 cv
289.304 8.29639 290.219 9.47119 291.223 9.47119 cv
292.236 9.47119 293.142 8.26953 293.142 6.6377 cv
cp
291.223 8.88818 mo
290.524 8.88818 289.968 7.83057 289.968 6.53906 cv
289.968 5.23926 290.578 4.37842 291.223 4.37842 cv
291.869 4.37842 292.478 5.24805 292.478 6.53906 cv
292.478 7.83936 291.922 8.88818 291.223 8.88818 cv
cp
f
296.325 3.52637 mo
296.325 3.23047 296.253 3.1499 295.949 3.1499 cv
294.317 3.1499 li
294.191 3.1499 293.94 3.1499 293.94 3.43701 cv
293.94 3.73291 294.182 3.73291 294.317 3.73291 cv
295.662 3.73291 li
295.662 9.53418 li
294.317 9.53418 li
294.191 9.53418 293.94 9.53418 293.94 9.8208 cv
293.94 10.1167 294.182 10.1167 294.317 10.1167 cv
295.949 10.1167 li
296.245 10.1167 296.325 10.0449 296.325 9.74023 cv
296.325 3.52637 li
cp
f
300.791 9.35449 mo
300.746 9.55176 300.584 9.89258 300.126 10.0449 cv
300.046 10.0718 299.884 10.126 299.884 10.3232 cv
299.884 10.4575 300.019 10.6191 300.19 10.6191 cv
300.476 10.6191 301.4 10.1436 301.4 9.13965 cv
301.4 8.61963 301.068 8.23389 300.647 8.23389 cv
300.297 8.23389 300.073 8.50293 300.073 8.79883 cv
300.073 9.13037 300.315 9.37256 300.647 9.37256 cv
300.709 9.37256 300.772 9.36377 300.791 9.35449 cv
cp
f
161.031 14.6919 mo
161.166 14.6919 161.408 14.6919 161.408 14.396 cv
161.408 14.1089 161.157 14.1089 161.031 14.1089 cv
159.399 14.1089 li
159.104 14.1089 159.023 14.1807 159.023 14.4854 cv
159.023 20.6992 li
159.023 20.9951 159.095 21.0757 159.399 21.0757 cv
161.031 21.0757 li
161.166 21.0757 161.408 21.0757 161.408 20.7798 cv
161.408 20.4932 161.157 20.4932 161.031 20.4932 cv
159.686 20.4932 li
159.686 14.6919 li
161.031 14.6919 li
cp
f
166.043 17.5967 mo
166.043 15.9292 165.128 14.7544 164.125 14.7544 cv
163.112 14.7544 162.206 15.9561 162.206 17.5879 cv
162.206 19.2554 163.121 20.4302 164.125 20.4302 cv
165.138 20.4302 166.043 19.2285 166.043 17.5967 cv
cp
164.125 19.8472 mo
163.425 19.8472 162.87 18.7896 162.87 17.498 cv
162.87 16.1982 163.479 15.3374 164.125 15.3374 cv
164.77 15.3374 165.38 16.207 165.38 17.498 cv
165.38 18.7983 164.824 19.8472 164.125 19.8472 cv
cp
f
168.985 20.3135 mo
168.94 20.5107 168.778 20.8516 168.321 21.0039 cv
168.24 21.0308 168.079 21.085 168.079 21.2822 cv
168.079 21.4165 168.213 21.5781 168.383 21.5781 cv
168.67 21.5781 169.594 21.1025 169.594 20.0986 cv
169.594 19.5786 169.262 19.1929 168.841 19.1929 cv
168.492 19.1929 168.267 19.4619 168.267 19.7578 cv
168.267 20.0894 168.509 20.3315 168.841 20.3315 cv
168.904 20.3315 168.966 20.3228 168.985 20.3135 cv
cp
f
180.166 17.5967 mo
180.166 15.9292 179.25 14.7544 178.247 14.7544 cv
177.234 14.7544 176.328 15.9561 176.328 17.5879 cv
176.328 19.2554 177.243 20.4302 178.247 20.4302 cv
179.26 20.4302 180.166 19.2285 180.166 17.5967 cv
cp
178.247 19.8472 mo
177.547 19.8472 176.992 18.7896 176.992 17.498 cv
176.992 16.1982 177.601 15.3374 178.247 15.3374 cv
178.892 15.3374 179.502 16.207 179.502 17.498 cv
179.502 18.7983 178.946 19.8472 178.247 19.8472 cv
cp
f
183.107 20.3135 mo
183.062 20.5107 182.9 20.8516 182.443 21.0039 cv
182.363 21.0308 182.201 21.085 182.201 21.2822 cv
182.201 21.4165 182.335 21.5781 182.505 21.5781 cv
182.792 21.5781 183.716 21.1025 183.716 20.0986 cv
183.716 19.5786 183.384 19.1929 182.963 19.1929 cv
182.614 19.1929 182.389 19.4619 182.389 19.7578 cv
182.389 20.0894 182.631 20.3315 182.963 20.3315 cv
183.026 20.3315 183.088 20.3228 183.107 20.3135 cv
cp
f
194.288 17.5967 mo
194.288 15.9292 193.373 14.7544 192.369 14.7544 cv
191.356 14.7544 190.45 15.9561 190.45 17.5879 cv
190.45 19.2554 191.365 20.4302 192.369 20.4302 cv
193.382 20.4302 194.288 19.2285 194.288 17.5967 cv
cp
192.369 19.8472 mo
191.669 19.8472 191.114 18.7896 191.114 17.498 cv
191.114 16.1982 191.723 15.3374 192.369 15.3374 cv
193.014 15.3374 193.625 16.207 193.625 17.498 cv
193.625 18.7983 193.068 19.8472 192.369 19.8472 cv
cp
f
197.229 20.3135 mo
197.184 20.5107 197.022 20.8516 196.565 21.0039 cv
196.484 21.0308 196.323 21.085 196.323 21.2822 cv
196.323 21.4165 196.458 21.5781 196.627 21.5781 cv
196.915 21.5781 197.838 21.1025 197.838 20.0986 cv
197.838 19.5786 197.506 19.1929 197.085 19.1929 cv
196.736 19.1929 196.511 19.4619 196.511 19.7578 cv
196.511 20.0894 196.753 20.3315 197.085 20.3315 cv
197.148 20.3315 197.21 20.3228 197.229 20.3135 cv
cp
f
208.41 17.5967 mo
208.41 15.9292 207.496 14.7544 206.491 14.7544 cv
205.478 14.7544 204.572 15.9561 204.572 17.5879 cv
204.572 19.2554 205.487 20.4302 206.491 20.4302 cv
207.504 20.4302 208.41 19.2285 208.41 17.5967 cv
cp
206.491 19.8472 mo
205.792 19.8472 205.236 18.7896 205.236 17.498 cv
205.236 16.1982 205.845 15.3374 206.491 15.3374 cv
207.136 15.3374 207.747 16.207 207.747 17.498 cv
207.747 18.7983 207.19 19.8472 206.491 19.8472 cv
cp
f
211.351 20.3135 mo
211.306 20.5107 211.144 20.8516 210.687 21.0039 cv
210.607 21.0308 210.445 21.085 210.445 21.2822 cv
210.445 21.4165 210.58 21.5781 210.75 21.5781 cv
211.037 21.5781 211.96 21.1025 211.96 20.0986 cv
211.96 19.5786 211.628 19.1929 211.208 19.1929 cv
210.858 19.1929 210.633 19.4619 210.633 19.7578 cv
210.633 20.0894 210.875 20.3315 211.208 20.3315 cv
211.27 20.3315 211.333 20.3228 211.351 20.3135 cv
cp
f
222.532 17.5967 mo
222.532 15.9292 221.617 14.7544 220.613 14.7544 cv
219.6 14.7544 218.694 15.9561 218.694 17.5879 cv
218.694 19.2554 219.609 20.4302 220.613 20.4302 cv
221.626 20.4302 222.532 19.2285 222.532 17.5967 cv
cp
220.613 19.8472 mo
219.914 19.8472 219.358 18.7896 219.358 17.498 cv
219.358 16.1982 219.967 15.3374 220.613 15.3374 cv
221.258 15.3374 221.869 16.207 221.869 17.498 cv
221.869 18.7983 221.312 19.8472 220.613 19.8472 cv
cp
f
225.473 20.3135 mo
225.428 20.5107 225.266 20.8516 224.809 21.0039 cv
224.729 21.0308 224.567 21.085 224.567 21.2822 cv
224.567 21.4165 224.702 21.5781 224.872 21.5781 cv
225.159 21.5781 226.083 21.1025 226.083 20.0986 cv
226.083 19.5786 225.75 19.1929 225.33 19.1929 cv
224.98 19.1929 224.755 19.4619 224.755 19.7578 cv
224.755 20.0894 224.998 20.3315 225.33 20.3315 cv
225.392 20.3315 225.455 20.3228 225.473 20.3135 cv
cp
f
236.654 17.5967 mo
236.654 15.9292 235.74 14.7544 234.735 14.7544 cv
233.722 14.7544 232.816 15.9561 232.816 17.5879 cv
232.816 19.2554 233.731 20.4302 234.735 20.4302 cv
235.749 20.4302 236.654 19.2285 236.654 17.5967 cv
cp
234.735 19.8472 mo
234.036 19.8472 233.48 18.7896 233.48 17.498 cv
233.48 16.1982 234.089 15.3374 234.735 15.3374 cv
235.38 15.3374 235.991 16.207 235.991 17.498 cv
235.991 18.7983 235.434 19.8472 234.735 19.8472 cv
cp
f
239.595 20.3135 mo
239.55 20.5107 239.388 20.8516 238.931 21.0039 cv
238.851 21.0308 238.689 21.085 238.689 21.2822 cv
238.689 21.4165 238.824 21.5781 238.994 21.5781 cv
239.281 21.5781 240.205 21.1025 240.205 20.0986 cv
240.205 19.5786 239.873 19.1929 239.452 19.1929 cv
239.102 19.1929 238.877 19.4619 238.877 19.7578 cv
238.877 20.0894 239.12 20.3315 239.452 20.3315 cv
239.514 20.3315 239.577 20.3228 239.595 20.3135 cv
cp
f
250.776 17.5967 mo
250.776 15.9292 249.862 14.7544 248.857 14.7544 cv
247.844 14.7544 246.938 15.9561 246.938 17.5879 cv
246.938 19.2554 247.853 20.4302 248.857 20.4302 cv
249.871 20.4302 250.776 19.2285 250.776 17.5967 cv
cp
248.857 19.8472 mo
248.158 19.8472 247.602 18.7896 247.602 17.498 cv
247.602 16.1982 248.211 15.3374 248.857 15.3374 cv
249.502 15.3374 250.113 16.207 250.113 17.498 cv
250.113 18.7983 249.556 19.8472 248.857 19.8472 cv
cp
f
253.717 20.3135 mo
253.672 20.5107 253.51 20.8516 253.053 21.0039 cv
252.973 21.0308 252.811 21.085 252.811 21.2822 cv
252.811 21.4165 252.946 21.5781 253.116 21.5781 cv
253.403 21.5781 254.327 21.1025 254.327 20.0986 cv
254.327 19.5786 253.995 19.1929 253.574 19.1929 cv
253.224 19.1929 253 19.4619 253 19.7578 cv
253 20.0894 253.242 20.3315 253.574 20.3315 cv
253.636 20.3315 253.699 20.3228 253.717 20.3135 cv
cp
f
264.898 17.5967 mo
264.898 15.9292 263.984 14.7544 262.979 14.7544 cv
261.966 14.7544 261.06 15.9561 261.06 17.5879 cv
261.06 19.2554 261.975 20.4302 262.979 20.4302 cv
263.993 20.4302 264.898 19.2285 264.898 17.5967 cv
cp
262.979 19.8472 mo
262.28 19.8472 261.724 18.7896 261.724 17.498 cv
261.724 16.1982 262.333 15.3374 262.979 15.3374 cv
263.625 15.3374 264.235 16.207 264.235 17.498 cv
264.235 18.7983 263.678 19.8472 262.979 19.8472 cv
cp
f
267.839 20.3135 mo
267.794 20.5107 267.632 20.8516 267.175 21.0039 cv
267.095 21.0308 266.933 21.085 266.933 21.2822 cv
266.933 21.4165 267.068 21.5781 267.238 21.5781 cv
267.525 21.5781 268.449 21.1025 268.449 20.0986 cv
268.449 19.5786 268.117 19.1929 267.696 19.1929 cv
267.346 19.1929 267.122 19.4619 267.122 19.7578 cv
267.122 20.0894 267.364 20.3315 267.696 20.3315 cv
267.758 20.3315 267.821 20.3228 267.839 20.3135 cv
cp
f
279.02 17.5967 mo
279.02 15.9292 278.106 14.7544 277.101 14.7544 cv
276.088 14.7544 275.182 15.9561 275.182 17.5879 cv
275.182 19.2554 276.097 20.4302 277.101 20.4302 cv
278.115 20.4302 279.02 19.2285 279.02 17.5967 cv
cp
277.101 19.8472 mo
276.402 19.8472 275.846 18.7896 275.846 17.498 cv
275.846 16.1982 276.456 15.3374 277.101 15.3374 cv
277.747 15.3374 278.357 16.207 278.357 17.498 cv
278.357 18.7983 277.8 19.8472 277.101 19.8472 cv
cp
f
281.961 20.3135 mo
281.917 20.5107 281.754 20.8516 281.297 21.0039 cv
281.217 21.0308 281.055 21.085 281.055 21.2822 cv
281.055 21.4165 281.19 21.5781 281.36 21.5781 cv
281.647 21.5781 282.571 21.1025 282.571 20.0986 cv
282.571 19.5786 282.239 19.1929 281.818 19.1929 cv
281.468 19.1929 281.244 19.4619 281.244 19.7578 cv
281.244 20.0894 281.486 20.3315 281.818 20.3315 cv
281.88 20.3315 281.943 20.3228 281.961 20.3135 cv
cp
f
293.142 17.5967 mo
293.142 15.9292 292.228 14.7544 291.223 14.7544 cv
290.21 14.7544 289.304 15.9561 289.304 17.5879 cv
289.304 19.2554 290.219 20.4302 291.223 20.4302 cv
292.237 20.4302 293.142 19.2285 293.142 17.5967 cv
cp
291.223 19.8472 mo
290.524 19.8472 289.968 18.7896 289.968 17.498 cv
289.968 16.1982 290.578 15.3374 291.223 15.3374 cv
291.869 15.3374 292.479 16.207 292.479 17.498 cv
292.479 18.7983 291.922 19.8472 291.223 19.8472 cv
cp
f
296.326 14.4854 mo
296.326 14.1895 296.253 14.1089 295.949 14.1089 cv
294.317 14.1089 li
294.191 14.1089 293.94 14.1089 293.94 14.396 cv
293.94 14.6919 294.182 14.6919 294.317 14.6919 cv
295.662 14.6919 li
295.662 20.4932 li
294.317 20.4932 li
294.191 20.4932 293.94 20.4932 293.94 20.7798 cv
293.94 21.0757 294.182 21.0757 294.317 21.0757 cv
295.949 21.0757 li
296.245 21.0757 296.326 21.0039 296.326 20.6992 cv
296.326 14.4854 li
cp
f
300.791 20.3135 mo
300.746 20.5107 300.584 20.8516 300.127 21.0039 cv
300.046 21.0308 299.885 21.085 299.885 21.2822 cv
299.885 21.4165 300.019 21.5781 300.19 21.5781 cv
300.477 21.5781 301.4 21.1025 301.4 20.0986 cv
301.4 19.5786 301.069 19.1929 300.647 19.1929 cv
300.297 19.1929 300.073 19.4619 300.073 19.7578 cv
300.073 20.0894 300.315 20.3315 300.647 20.3315 cv
300.709 20.3315 300.773 20.3228 300.791 20.3135 cv
cp
f
161.031 25.6509 mo
161.166 25.6509 161.408 25.6509 161.408 25.355 cv
161.408 25.0679 161.157 25.0679 161.031 25.0679 cv
159.399 25.0679 li
159.104 25.0679 159.023 25.1396 159.023 25.4443 cv
159.023 31.6582 li
159.023 31.9541 159.095 32.0347 159.399 32.0347 cv
161.031 32.0347 li
161.166 32.0347 161.408 32.0347 161.408 31.7388 cv
161.408 31.4521 161.157 31.4521 161.031 31.4521 cv
159.686 31.4521 li
159.686 25.6509 li
161.031 25.6509 li
cp
f
166.043 28.5557 mo
166.043 26.8882 165.128 25.7134 164.125 25.7134 cv
163.112 25.7134 162.206 26.915 162.206 28.5469 cv
162.206 30.2144 163.121 31.3892 164.125 31.3892 cv
165.138 31.3892 166.043 30.188 166.043 28.5557 cv
cp
164.125 30.8062 mo
163.425 30.8062 162.87 29.7485 162.87 28.457 cv
162.87 27.1572 163.479 26.2964 164.125 26.2964 cv
164.77 26.2964 165.38 27.166 165.38 28.457 cv
165.38 29.7573 164.824 30.8062 164.125 30.8062 cv
cp
f
168.985 31.2725 mo
168.94 31.4697 168.778 31.8105 168.321 31.9629 cv
168.24 31.9897 168.079 32.0439 168.079 32.2412 cv
168.079 32.3755 168.213 32.5371 168.383 32.5371 cv
168.67 32.5371 169.594 32.0615 169.594 31.0576 cv
169.594 30.5376 169.262 30.1519 168.841 30.1519 cv
168.492 30.1519 168.267 30.4209 168.267 30.7168 cv
168.267 31.0483 168.509 31.2905 168.841 31.2905 cv
168.904 31.2905 168.966 31.2817 168.985 31.2725 cv
cp
f
180.166 28.5557 mo
180.166 26.8882 179.25 25.7134 178.247 25.7134 cv
177.234 25.7134 176.328 26.915 176.328 28.5469 cv
176.328 30.2144 177.243 31.3892 178.247 31.3892 cv
179.26 31.3892 180.166 30.188 180.166 28.5557 cv
cp
178.247 30.8062 mo
177.547 30.8062 176.992 29.7485 176.992 28.457 cv
176.992 27.1572 177.601 26.2964 178.247 26.2964 cv
178.892 26.2964 179.502 27.166 179.502 28.457 cv
179.502 29.7573 178.946 30.8062 178.247 30.8062 cv
cp
f
183.107 31.2725 mo
183.062 31.4697 182.9 31.8105 182.443 31.9629 cv
182.363 31.9897 182.201 32.0439 182.201 32.2412 cv
182.201 32.3755 182.335 32.5371 182.505 32.5371 cv
182.792 32.5371 183.716 32.0615 183.716 31.0576 cv
183.716 30.5376 183.384 30.1519 182.963 30.1519 cv
182.614 30.1519 182.389 30.4209 182.389 30.7168 cv
182.389 31.0483 182.631 31.2905 182.963 31.2905 cv
183.026 31.2905 183.088 31.2817 183.107 31.2725 cv
cp
f
194.288 28.5557 mo
194.288 26.8882 193.373 25.7134 192.369 25.7134 cv
191.356 25.7134 190.45 26.915 190.45 28.5469 cv
190.45 30.2144 191.365 31.3892 192.369 31.3892 cv
193.382 31.3892 194.288 30.188 194.288 28.5557 cv
cp
192.369 30.8062 mo
191.669 30.8062 191.114 29.7485 191.114 28.457 cv
191.114 27.1572 191.723 26.2964 192.369 26.2964 cv
193.014 26.2964 193.625 27.166 193.625 28.457 cv
193.625 29.7573 193.068 30.8062 192.369 30.8062 cv
cp
f
197.229 31.2725 mo
197.184 31.4697 197.022 31.8105 196.565 31.9629 cv
196.484 31.9897 196.323 32.0439 196.323 32.2412 cv
196.323 32.3755 196.458 32.5371 196.627 32.5371 cv
196.915 32.5371 197.838 32.0615 197.838 31.0576 cv
197.838 30.5376 197.506 30.1519 197.085 30.1519 cv
196.736 30.1519 196.511 30.4209 196.511 30.7168 cv
196.511 31.0483 196.753 31.2905 197.085 31.2905 cv
197.148 31.2905 197.21 31.2817 197.229 31.2725 cv
cp
f
208.41 28.5557 mo
208.41 26.8882 207.496 25.7134 206.491 25.7134 cv
205.478 25.7134 204.572 26.915 204.572 28.5469 cv
204.572 30.2144 205.487 31.3892 206.491 31.3892 cv
207.504 31.3892 208.41 30.188 208.41 28.5557 cv
cp
206.491 30.8062 mo
205.792 30.8062 205.236 29.7485 205.236 28.457 cv
205.236 27.1572 205.845 26.2964 206.491 26.2964 cv
207.136 26.2964 207.747 27.166 207.747 28.457 cv
207.747 29.7573 207.19 30.8062 206.491 30.8062 cv
cp
f
211.351 31.2725 mo
211.306 31.4697 211.144 31.8105 210.687 31.9629 cv
210.607 31.9897 210.445 32.0439 210.445 32.2412 cv
210.445 32.3755 210.58 32.5371 210.75 32.5371 cv
211.037 32.5371 211.96 32.0615 211.96 31.0576 cv
211.96 30.5376 211.628 30.1519 211.208 30.1519 cv
210.858 30.1519 210.633 30.4209 210.633 30.7168 cv
210.633 31.0483 210.875 31.2905 211.208 31.2905 cv
211.27 31.2905 211.333 31.2817 211.351 31.2725 cv
cp
f
222.532 28.5557 mo
222.532 26.8882 221.617 25.7134 220.613 25.7134 cv
219.6 25.7134 218.694 26.915 218.694 28.5469 cv
218.694 30.2144 219.609 31.3892 220.613 31.3892 cv
221.626 31.3892 222.532 30.188 222.532 28.5557 cv
cp
220.613 30.8062 mo
219.914 30.8062 219.358 29.7485 219.358 28.457 cv
219.358 27.1572 219.967 26.2964 220.613 26.2964 cv
221.258 26.2964 221.869 27.166 221.869 28.457 cv
221.869 29.7573 221.312 30.8062 220.613 30.8062 cv
cp
f
225.473 31.2725 mo
225.428 31.4697 225.266 31.8105 224.809 31.9629 cv
224.729 31.9897 224.567 32.0439 224.567 32.2412 cv
224.567 32.3755 224.702 32.5371 224.872 32.5371 cv
225.159 32.5371 226.083 32.0615 226.083 31.0576 cv
226.083 30.5376 225.75 30.1519 225.33 30.1519 cv
224.98 30.1519 224.755 30.4209 224.755 30.7168 cv
224.755 31.0483 224.998 31.2905 225.33 31.2905 cv
225.392 31.2905 225.455 31.2817 225.473 31.2725 cv
cp
f
236.654 28.5557 mo
236.654 26.8882 235.74 25.7134 234.735 25.7134 cv
233.722 25.7134 232.816 26.915 232.816 28.5469 cv
232.816 30.2144 233.731 31.3892 234.735 31.3892 cv
235.749 31.3892 236.654 30.188 236.654 28.5557 cv
cp
234.735 30.8062 mo
234.036 30.8062 233.48 29.7485 233.48 28.457 cv
233.48 27.1572 234.089 26.2964 234.735 26.2964 cv
235.38 26.2964 235.991 27.166 235.991 28.457 cv
235.991 29.7573 235.434 30.8062 234.735 30.8062 cv
cp
f
239.595 31.2725 mo
239.55 31.4697 239.388 31.8105 238.931 31.9629 cv
238.851 31.9897 238.689 32.0439 238.689 32.2412 cv
238.689 32.3755 238.824 32.5371 238.994 32.5371 cv
239.281 32.5371 240.205 32.0615 240.205 31.0576 cv
240.205 30.5376 239.873 30.1519 239.452 30.1519 cv
239.102 30.1519 238.877 30.4209 238.877 30.7168 cv
238.877 31.0483 239.12 31.2905 239.452 31.2905 cv
239.514 31.2905 239.577 31.2817 239.595 31.2725 cv
cp
f
250.776 28.5557 mo
250.776 26.8882 249.862 25.7134 248.857 25.7134 cv
247.844 25.7134 246.938 26.915 246.938 28.5469 cv
246.938 30.2144 247.853 31.3892 248.857 31.3892 cv
249.871 31.3892 250.776 30.188 250.776 28.5557 cv
cp
248.857 30.8062 mo
248.158 30.8062 247.602 29.7485 247.602 28.457 cv
247.602 27.1572 248.211 26.2964 248.857 26.2964 cv
249.502 26.2964 250.113 27.166 250.113 28.457 cv
250.113 29.7573 249.556 30.8062 248.857 30.8062 cv
cp
f
253.717 31.2725 mo
253.672 31.4697 253.51 31.8105 253.053 31.9629 cv
252.973 31.9897 252.811 32.0439 252.811 32.2412 cv
252.811 32.3755 252.946 32.5371 253.116 32.5371 cv
253.403 32.5371 254.327 32.0615 254.327 31.0576 cv
254.327 30.5376 253.995 30.1519 253.574 30.1519 cv
253.224 30.1519 253 30.4209 253 30.7168 cv
253 31.0483 253.242 31.2905 253.574 31.2905 cv
253.636 31.2905 253.699 31.2817 253.717 31.2725 cv
cp
f
264.898 28.5557 mo
264.898 26.8882 263.984 25.7134 262.979 25.7134 cv
261.966 25.7134 261.06 26.915 261.06 28.5469 cv
261.06 30.2144 261.975 31.3892 262.979 31.3892 cv
263.993 31.3892 264.898 30.188 264.898 28.5557 cv
cp
262.979 30.8062 mo
262.28 30.8062 261.724 29.7485 261.724 28.457 cv
261.724 27.1572 262.333 26.2964 262.979 26.2964 cv
263.625 26.2964 264.235 27.166 264.235 28.457 cv
264.235 29.7573 263.678 30.8062 262.979 30.8062 cv
cp
f
267.839 31.2725 mo
267.794 31.4697 267.632 31.8105 267.175 31.9629 cv
267.095 31.9897 266.933 32.0439 266.933 32.2412 cv
266.933 32.3755 267.068 32.5371 267.238 32.5371 cv
267.525 32.5371 268.449 32.0615 268.449 31.0576 cv
268.449 30.5376 268.117 30.1519 267.696 30.1519 cv
267.346 30.1519 267.122 30.4209 267.122 30.7168 cv
267.122 31.0483 267.364 31.2905 267.696 31.2905 cv
267.758 31.2905 267.821 31.2817 267.839 31.2725 cv
cp
f
279.02 28.5557 mo
279.02 26.8882 278.106 25.7134 277.101 25.7134 cv
276.088 25.7134 275.182 26.915 275.182 28.5469 cv
275.182 30.2144 276.097 31.3892 277.101 31.3892 cv
278.115 31.3892 279.02 30.188 279.02 28.5557 cv
cp
277.101 30.8062 mo
276.402 30.8062 275.846 29.7485 275.846 28.457 cv
275.846 27.1572 276.456 26.2964 277.101 26.2964 cv
277.747 26.2964 278.357 27.166 278.357 28.457 cv
278.357 29.7573 277.8 30.8062 277.101 30.8062 cv
cp
f
281.961 31.2725 mo
281.917 31.4697 281.754 31.8105 281.297 31.9629 cv
281.217 31.9897 281.055 32.0439 281.055 32.2412 cv
281.055 32.3755 281.19 32.5371 281.36 32.5371 cv
281.647 32.5371 282.571 32.0615 282.571 31.0576 cv
282.571 30.5376 282.239 30.1519 281.818 30.1519 cv
281.468 30.1519 281.244 30.4209 281.244 30.7168 cv
281.244 31.0483 281.486 31.2905 281.818 31.2905 cv
281.88 31.2905 281.943 31.2817 281.961 31.2725 cv
cp
f
293.142 28.5557 mo
293.142 26.8882 292.228 25.7134 291.223 25.7134 cv
290.21 25.7134 289.304 26.915 289.304 28.5469 cv
289.304 30.2144 290.219 31.3892 291.223 31.3892 cv
292.237 31.3892 293.142 30.188 293.142 28.5557 cv
cp
291.223 30.8062 mo
290.524 30.8062 289.968 29.7485 289.968 28.457 cv
289.968 27.1572 290.578 26.2964 291.223 26.2964 cv
291.869 26.2964 292.479 27.166 292.479 28.457 cv
292.479 29.7573 291.922 30.8062 291.223 30.8062 cv
cp
f
296.326 25.4443 mo
296.326 25.1484 296.253 25.0679 295.949 25.0679 cv
294.317 25.0679 li
294.191 25.0679 293.94 25.0679 293.94 25.355 cv
293.94 25.6509 294.182 25.6509 294.317 25.6509 cv
295.662 25.6509 li
295.662 31.4521 li
294.317 31.4521 li
294.191 31.4521 293.94 31.4521 293.94 31.7388 cv
293.94 32.0347 294.182 32.0347 294.317 32.0347 cv
295.949 32.0347 li
296.245 32.0347 296.326 31.9629 296.326 31.6582 cv
296.326 25.4443 li
cp
f
300.791 31.2725 mo
300.746 31.4697 300.584 31.8105 300.127 31.9629 cv
300.046 31.9897 299.885 32.0439 299.885 32.2412 cv
299.885 32.3755 300.019 32.5371 300.19 32.5371 cv
300.477 32.5371 301.4 32.0615 301.4 31.0576 cv
301.4 30.5376 301.069 30.1519 300.647 30.1519 cv
300.297 30.1519 300.073 30.4209 300.073 30.7168 cv
300.073 31.0483 300.315 31.2905 300.647 31.2905 cv
300.709 31.2905 300.773 31.2817 300.791 31.2725 cv
cp
f
161.031 36.6089 mo
161.166 36.6089 161.408 36.6089 161.408 36.313 cv
161.408 36.0259 161.157 36.0259 161.031 36.0259 cv
159.399 36.0259 li
159.104 36.0259 159.023 36.0977 159.023 36.4023 cv
159.023 42.6162 li
159.023 42.9121 159.095 42.9927 159.399 42.9927 cv
161.031 42.9927 li
161.166 42.9927 161.408 42.9927 161.408 42.6968 cv
161.408 42.4102 161.157 42.4102 161.031 42.4102 cv
159.686 42.4102 li
159.686 36.6089 li
161.031 36.6089 li
cp
f
166.043 39.5137 mo
166.043 37.8462 165.128 36.6714 164.125 36.6714 cv
163.112 36.6714 162.206 37.873 162.206 39.5049 cv
162.206 41.1724 163.121 42.3472 164.125 42.3472 cv
165.138 42.3472 166.043 41.146 166.043 39.5137 cv
cp
164.125 41.7642 mo
163.425 41.7642 162.87 40.7065 162.87 39.415 cv
162.87 38.1152 163.479 37.2544 164.125 37.2544 cv
164.77 37.2544 165.38 38.124 165.38 39.415 cv
165.38 40.7153 164.824 41.7642 164.125 41.7642 cv
cp
f
168.985 42.2305 mo
168.94 42.4277 168.778 42.7686 168.321 42.9209 cv
168.24 42.9478 168.079 43.002 168.079 43.1992 cv
168.079 43.3335 168.213 43.4951 168.383 43.4951 cv
168.67 43.4951 169.594 43.0195 169.594 42.0156 cv
169.594 41.4956 169.262 41.1099 168.841 41.1099 cv
168.492 41.1099 168.267 41.3789 168.267 41.6748 cv
168.267 42.0063 168.509 42.2485 168.841 42.2485 cv
168.904 42.2485 168.966 42.2397 168.985 42.2305 cv
cp
f
180.166 39.5137 mo
180.166 37.8462 179.25 36.6714 178.247 36.6714 cv
177.234 36.6714 176.328 37.873 176.328 39.5049 cv
176.328 41.1724 177.243 42.3472 178.247 42.3472 cv
179.26 42.3472 180.166 41.146 180.166 39.5137 cv
cp
178.247 41.7642 mo
177.547 41.7642 176.992 40.7065 176.992 39.415 cv
176.992 38.1152 177.601 37.2544 178.247 37.2544 cv
178.892 37.2544 179.502 38.124 179.502 39.415 cv
179.502 40.7153 178.946 41.7642 178.247 41.7642 cv
cp
f
183.107 42.2305 mo
183.062 42.4277 182.9 42.7686 182.443 42.9209 cv
182.363 42.9478 182.201 43.002 182.201 43.1992 cv
182.201 43.3335 182.335 43.4951 182.505 43.4951 cv
182.792 43.4951 183.716 43.0195 183.716 42.0156 cv
183.716 41.4956 183.384 41.1099 182.963 41.1099 cv
182.614 41.1099 182.389 41.3789 182.389 41.6748 cv
182.389 42.0063 182.631 42.2485 182.963 42.2485 cv
183.026 42.2485 183.088 42.2397 183.107 42.2305 cv
cp
f
194.288 39.5137 mo
194.288 37.8462 193.373 36.6714 192.369 36.6714 cv
191.356 36.6714 190.45 37.873 190.45 39.5049 cv
190.45 41.1724 191.365 42.3472 192.369 42.3472 cv
193.382 42.3472 194.288 41.146 194.288 39.5137 cv
cp
192.369 41.7642 mo
191.669 41.7642 191.114 40.7065 191.114 39.415 cv
191.114 38.1152 191.723 37.2544 192.369 37.2544 cv
193.014 37.2544 193.625 38.124 193.625 39.415 cv
193.625 40.7153 193.068 41.7642 192.369 41.7642 cv
cp
f
197.229 42.2305 mo
197.184 42.4277 197.022 42.7686 196.565 42.9209 cv
196.484 42.9478 196.323 43.002 196.323 43.1992 cv
196.323 43.3335 196.458 43.4951 196.627 43.4951 cv
196.915 43.4951 197.838 43.0195 197.838 42.0156 cv
197.838 41.4956 197.506 41.1099 197.085 41.1099 cv
196.736 41.1099 196.511 41.3789 196.511 41.6748 cv
196.511 42.0063 196.753 42.2485 197.085 42.2485 cv
197.148 42.2485 197.21 42.2397 197.229 42.2305 cv
cp
f
208.41 39.5137 mo
208.41 37.8462 207.496 36.6714 206.491 36.6714 cv
205.478 36.6714 204.572 37.873 204.572 39.5049 cv
204.572 41.1724 205.487 42.3472 206.491 42.3472 cv
207.504 42.3472 208.41 41.146 208.41 39.5137 cv
cp
206.491 41.7642 mo
205.792 41.7642 205.236 40.7065 205.236 39.415 cv
205.236 38.1152 205.845 37.2544 206.491 37.2544 cv
207.136 37.2544 207.747 38.124 207.747 39.415 cv
207.747 40.7153 207.19 41.7642 206.491 41.7642 cv
cp
f
211.351 42.2305 mo
211.306 42.4277 211.144 42.7686 210.687 42.9209 cv
210.607 42.9478 210.445 43.002 210.445 43.1992 cv
210.445 43.3335 210.58 43.4951 210.75 43.4951 cv
211.037 43.4951 211.96 43.0195 211.96 42.0156 cv
211.96 41.4956 211.628 41.1099 211.208 41.1099 cv
210.858 41.1099 210.633 41.3789 210.633 41.6748 cv
210.633 42.0063 210.875 42.2485 211.208 42.2485 cv
211.27 42.2485 211.333 42.2397 211.351 42.2305 cv
cp
f
222.532 39.5137 mo
222.532 37.8462 221.617 36.6714 220.613 36.6714 cv
219.6 36.6714 218.694 37.873 218.694 39.5049 cv
218.694 41.1724 219.609 42.3472 220.613 42.3472 cv
221.626 42.3472 222.532 41.146 222.532 39.5137 cv
cp
220.613 41.7642 mo
219.914 41.7642 219.358 40.7065 219.358 39.415 cv
219.358 38.1152 219.967 37.2544 220.613 37.2544 cv
221.258 37.2544 221.869 38.124 221.869 39.415 cv
221.869 40.7153 221.312 41.7642 220.613 41.7642 cv
cp
f
225.473 42.2305 mo
225.428 42.4277 225.266 42.7686 224.809 42.9209 cv
224.729 42.9478 224.567 43.002 224.567 43.1992 cv
224.567 43.3335 224.702 43.4951 224.872 43.4951 cv
225.159 43.4951 226.083 43.0195 226.083 42.0156 cv
226.083 41.4956 225.75 41.1099 225.33 41.1099 cv
224.98 41.1099 224.755 41.3789 224.755 41.6748 cv
224.755 42.0063 224.998 42.2485 225.33 42.2485 cv
225.392 42.2485 225.455 42.2397 225.473 42.2305 cv
cp
f
236.654 39.5137 mo
236.654 37.8462 235.74 36.6714 234.735 36.6714 cv
233.722 36.6714 232.816 37.873 232.816 39.5049 cv
232.816 41.1724 233.731 42.3472 234.735 42.3472 cv
235.749 42.3472 236.654 41.146 236.654 39.5137 cv
cp
234.735 41.7642 mo
234.036 41.7642 233.48 40.7065 233.48 39.415 cv
233.48 38.1152 234.089 37.2544 234.735 37.2544 cv
235.38 37.2544 235.991 38.124 235.991 39.415 cv
235.991 40.7153 235.434 41.7642 234.735 41.7642 cv
cp
f
239.595 42.2305 mo
239.55 42.4277 239.388 42.7686 238.931 42.9209 cv
238.851 42.9478 238.689 43.002 238.689 43.1992 cv
238.689 43.3335 238.824 43.4951 238.994 43.4951 cv
239.281 43.4951 240.205 43.0195 240.205 42.0156 cv
240.205 41.4956 239.873 41.1099 239.452 41.1099 cv
239.102 41.1099 238.877 41.3789 238.877 41.6748 cv
238.877 42.0063 239.12 42.2485 239.452 42.2485 cv
239.514 42.2485 239.577 42.2397 239.595 42.2305 cv
cp
f
250.776 39.5137 mo
250.776 37.8462 249.862 36.6714 248.857 36.6714 cv
247.844 36.6714 246.938 37.873 246.938 39.5049 cv
246.938 41.1724 247.853 42.3472 248.857 42.3472 cv
249.871 42.3472 250.776 41.146 250.776 39.5137 cv
cp
248.857 41.7642 mo
248.158 41.7642 247.602 40.7065 247.602 39.415 cv
247.602 38.1152 248.211 37.2544 248.857 37.2544 cv
249.502 37.2544 250.113 38.124 250.113 39.415 cv
250.113 40.7153 249.556 41.7642 248.857 41.7642 cv
cp
f
253.717 42.2305 mo
253.672 42.4277 253.51 42.7686 253.053 42.9209 cv
252.973 42.9478 252.811 43.002 252.811 43.1992 cv
252.811 43.3335 252.946 43.4951 253.116 43.4951 cv
253.403 43.4951 254.327 43.0195 254.327 42.0156 cv
254.327 41.4956 253.995 41.1099 253.574 41.1099 cv
253.224 41.1099 253 41.3789 253 41.6748 cv
253 42.0063 253.242 42.2485 253.574 42.2485 cv
253.636 42.2485 253.699 42.2397 253.717 42.2305 cv
cp
f
264.898 39.5137 mo
264.898 37.8462 263.984 36.6714 262.979 36.6714 cv
261.966 36.6714 261.06 37.873 261.06 39.5049 cv
261.06 41.1724 261.975 42.3472 262.979 42.3472 cv
263.993 42.3472 264.898 41.146 264.898 39.5137 cv
cp
262.979 41.7642 mo
262.28 41.7642 261.724 40.7065 261.724 39.415 cv
261.724 38.1152 262.333 37.2544 262.979 37.2544 cv
263.625 37.2544 264.235 38.124 264.235 39.415 cv
264.235 40.7153 263.678 41.7642 262.979 41.7642 cv
cp
f
267.839 42.2305 mo
267.794 42.4277 267.632 42.7686 267.175 42.9209 cv
267.095 42.9478 266.933 43.002 266.933 43.1992 cv
266.933 43.3335 267.068 43.4951 267.238 43.4951 cv
267.525 43.4951 268.449 43.0195 268.449 42.0156 cv
268.449 41.4956 268.117 41.1099 267.696 41.1099 cv
267.346 41.1099 267.122 41.3789 267.122 41.6748 cv
267.122 42.0063 267.364 42.2485 267.696 42.2485 cv
267.758 42.2485 267.821 42.2397 267.839 42.2305 cv
cp
f
279.02 39.5137 mo
279.02 37.8462 278.106 36.6714 277.101 36.6714 cv
276.088 36.6714 275.182 37.873 275.182 39.5049 cv
275.182 41.1724 276.097 42.3472 277.101 42.3472 cv
278.115 42.3472 279.02 41.146 279.02 39.5137 cv
cp
277.101 41.7642 mo
276.402 41.7642 275.846 40.7065 275.846 39.415 cv
275.846 38.1152 276.456 37.2544 277.101 37.2544 cv
277.747 37.2544 278.357 38.124 278.357 39.415 cv
278.357 40.7153 277.8 41.7642 277.101 41.7642 cv
cp
f
281.961 42.2305 mo
281.917 42.4277 281.754 42.7686 281.297 42.9209 cv
281.217 42.9478 281.055 43.002 281.055 43.1992 cv
281.055 43.3335 281.19 43.4951 281.36 43.4951 cv
281.647 43.4951 282.571 43.0195 282.571 42.0156 cv
282.571 41.4956 282.239 41.1099 281.818 41.1099 cv
281.468 41.1099 281.244 41.3789 281.244 41.6748 cv
281.244 42.0063 281.486 42.2485 281.818 42.2485 cv
281.88 42.2485 281.943 42.2397 281.961 42.2305 cv
cp
f
293.142 39.5137 mo
293.142 37.8462 292.228 36.6714 291.223 36.6714 cv
290.21 36.6714 289.304 37.873 289.304 39.5049 cv
289.304 41.1724 290.219 42.3472 291.223 42.3472 cv
292.237 42.3472 293.142 41.146 293.142 39.5137 cv
cp
291.223 41.7642 mo
290.524 41.7642 289.968 40.7065 289.968 39.415 cv
289.968 38.1152 290.578 37.2544 291.223 37.2544 cv
291.869 37.2544 292.479 38.124 292.479 39.415 cv
292.479 40.7153 291.922 41.7642 291.223 41.7642 cv
cp
f
296.326 36.4023 mo
296.326 36.1064 296.253 36.0259 295.949 36.0259 cv
294.317 36.0259 li
294.191 36.0259 293.94 36.0259 293.94 36.313 cv
293.94 36.6089 294.182 36.6089 294.317 36.6089 cv
295.662 36.6089 li
295.662 42.4102 li
294.317 42.4102 li
294.191 42.4102 293.94 42.4102 293.94 42.6968 cv
293.94 42.9927 294.182 42.9927 294.317 42.9927 cv
295.949 42.9927 li
296.245 42.9927 296.326 42.9209 296.326 42.6162 cv
296.326 36.4023 li
cp
f
300.791 42.2305 mo
300.746 42.4277 300.584 42.7686 300.127 42.9209 cv
300.046 42.9478 299.885 43.002 299.885 43.1992 cv
299.885 43.3335 300.019 43.4951 300.19 43.4951 cv
300.477 43.4951 301.4 43.0195 301.4 42.0156 cv
301.4 41.4956 301.069 41.1099 300.647 41.1099 cv
300.297 41.1099 300.073 41.3789 300.073 41.6748 cv
300.073 42.0063 300.315 42.2485 300.647 42.2485 cv
300.709 42.2485 300.773 42.2397 300.791 42.2305 cv
cp
f
161.031 47.5679 mo
161.166 47.5679 161.408 47.5679 161.408 47.272 cv
161.408 46.9849 161.157 46.9849 161.031 46.9849 cv
159.399 46.9849 li
159.104 46.9849 159.023 47.0566 159.023 47.3613 cv
159.023 53.5752 li
159.023 53.8711 159.095 53.9517 159.399 53.9517 cv
161.031 53.9517 li
161.166 53.9517 161.408 53.9517 161.408 53.6558 cv
161.408 53.3691 161.157 53.3691 161.031 53.3691 cv
159.686 53.3691 li
159.686 47.5679 li
161.031 47.5679 li
cp
f
166.043 50.4727 mo
166.043 48.8052 165.128 47.6304 164.125 47.6304 cv
163.112 47.6304 162.206 48.832 162.206 50.4639 cv
162.206 52.1318 163.121 53.3062 164.125 53.3062 cv
165.138 53.3062 166.043 52.105 166.043 50.4727 cv
cp
164.125 52.7231 mo
163.425 52.7231 162.87 51.6655 162.87 50.374 cv
162.87 49.0742 163.479 48.2134 164.125 48.2134 cv
164.77 48.2134 165.38 49.083 165.38 50.374 cv
165.38 51.6743 164.824 52.7231 164.125 52.7231 cv
cp
f
168.985 53.1899 mo
168.94 53.3867 168.778 53.7275 168.321 53.8799 cv
168.24 53.9067 168.079 53.9609 168.079 54.1582 cv
168.079 54.2925 168.213 54.4541 168.383 54.4541 cv
168.67 54.4541 169.594 53.9785 169.594 52.9746 cv
169.594 52.4546 169.262 52.0688 168.841 52.0688 cv
168.492 52.0688 168.267 52.3379 168.267 52.6338 cv
168.267 52.9653 168.509 53.2075 168.841 53.2075 cv
168.904 53.2075 168.966 53.1987 168.985 53.1899 cv
cp
f
180.166 50.4727 mo
180.166 48.8052 179.25 47.6304 178.247 47.6304 cv
177.234 47.6304 176.328 48.832 176.328 50.4639 cv
176.328 52.1318 177.243 53.3062 178.247 53.3062 cv
179.26 53.3062 180.166 52.105 180.166 50.4727 cv
cp
178.247 52.7231 mo
177.547 52.7231 176.992 51.6655 176.992 50.374 cv
176.992 49.0742 177.601 48.2134 178.247 48.2134 cv
178.892 48.2134 179.502 49.083 179.502 50.374 cv
179.502 51.6743 178.946 52.7231 178.247 52.7231 cv
cp
f
183.107 53.1899 mo
183.062 53.3867 182.9 53.7275 182.443 53.8799 cv
182.363 53.9067 182.201 53.9609 182.201 54.1582 cv
182.201 54.2925 182.335 54.4541 182.505 54.4541 cv
182.792 54.4541 183.716 53.9785 183.716 52.9746 cv
183.716 52.4546 183.384 52.0688 182.963 52.0688 cv
182.614 52.0688 182.389 52.3379 182.389 52.6338 cv
182.389 52.9653 182.631 53.2075 182.963 53.2075 cv
183.026 53.2075 183.088 53.1987 183.107 53.1899 cv
cp
f
194.288 50.4727 mo
194.288 48.8052 193.373 47.6304 192.369 47.6304 cv
191.356 47.6304 190.45 48.832 190.45 50.4639 cv
190.45 52.1318 191.365 53.3062 192.369 53.3062 cv
193.382 53.3062 194.288 52.105 194.288 50.4727 cv
cp
192.369 52.7231 mo
191.669 52.7231 191.114 51.6655 191.114 50.374 cv
191.114 49.0742 191.723 48.2134 192.369 48.2134 cv
193.014 48.2134 193.625 49.083 193.625 50.374 cv
193.625 51.6743 193.068 52.7231 192.369 52.7231 cv
cp
f
197.229 53.1899 mo
197.184 53.3867 197.022 53.7275 196.565 53.8799 cv
196.484 53.9067 196.323 53.9609 196.323 54.1582 cv
196.323 54.2925 196.458 54.4541 196.627 54.4541 cv
196.915 54.4541 197.838 53.9785 197.838 52.9746 cv
197.838 52.4546 197.506 52.0688 197.085 52.0688 cv
196.736 52.0688 196.511 52.3379 196.511 52.6338 cv
196.511 52.9653 196.753 53.2075 197.085 53.2075 cv
197.148 53.2075 197.21 53.1987 197.229 53.1899 cv
cp
f
208.41 50.4727 mo
208.41 48.8052 207.496 47.6304 206.491 47.6304 cv
205.478 47.6304 204.572 48.832 204.572 50.4639 cv
204.572 52.1318 205.487 53.3062 206.491 53.3062 cv
207.504 53.3062 208.41 52.105 208.41 50.4727 cv
cp
206.491 52.7231 mo
205.792 52.7231 205.236 51.6655 205.236 50.374 cv
205.236 49.0742 205.845 48.2134 206.491 48.2134 cv
207.136 48.2134 207.747 49.083 207.747 50.374 cv
207.747 51.6743 207.19 52.7231 206.491 52.7231 cv
cp
f
211.351 53.1899 mo
211.306 53.3867 211.144 53.7275 210.687 53.8799 cv
210.607 53.9067 210.445 53.9609 210.445 54.1582 cv
210.445 54.2925 210.58 54.4541 210.75 54.4541 cv
211.037 54.4541 211.96 53.9785 211.96 52.9746 cv
211.96 52.4546 211.628 52.0688 211.208 52.0688 cv
210.858 52.0688 210.633 52.3379 210.633 52.6338 cv
210.633 52.9653 210.875 53.2075 211.208 53.2075 cv
211.27 53.2075 211.333 53.1987 211.351 53.1899 cv
cp
f
222.532 50.4727 mo
222.532 48.8052 221.617 47.6304 220.613 47.6304 cv
219.6 47.6304 218.694 48.832 218.694 50.4639 cv
218.694 52.1318 219.609 53.3062 220.613 53.3062 cv
221.626 53.3062 222.532 52.105 222.532 50.4727 cv
cp
220.613 52.7231 mo
219.914 52.7231 219.358 51.6655 219.358 50.374 cv
219.358 49.0742 219.967 48.2134 220.613 48.2134 cv
221.258 48.2134 221.869 49.083 221.869 50.374 cv
221.869 51.6743 221.312 52.7231 220.613 52.7231 cv
cp
f
225.473 53.1899 mo
225.428 53.3867 225.266 53.7275 224.809 53.8799 cv
224.729 53.9067 224.567 53.9609 224.567 54.1582 cv
224.567 54.2925 224.702 54.4541 224.872 54.4541 cv
225.159 54.4541 226.083 53.9785 226.083 52.9746 cv
226.083 52.4546 225.75 52.0688 225.33 52.0688 cv
224.98 52.0688 224.755 52.3379 224.755 52.6338 cv
224.755 52.9653 224.998 53.2075 225.33 53.2075 cv
225.392 53.2075 225.455 53.1987 225.473 53.1899 cv
cp
f
236.654 50.4727 mo
236.654 48.8052 235.74 47.6304 234.735 47.6304 cv
233.722 47.6304 232.816 48.832 232.816 50.4639 cv
232.816 52.1318 233.731 53.3062 234.735 53.3062 cv
235.749 53.3062 236.654 52.105 236.654 50.4727 cv
cp
234.735 52.7231 mo
234.036 52.7231 233.48 51.6655 233.48 50.374 cv
233.48 49.0742 234.089 48.2134 234.735 48.2134 cv
235.38 48.2134 235.991 49.083 235.991 50.374 cv
235.991 51.6743 235.434 52.7231 234.735 52.7231 cv
cp
f
239.595 53.1899 mo
239.55 53.3867 239.388 53.7275 238.931 53.8799 cv
238.851 53.9067 238.689 53.9609 238.689 54.1582 cv
238.689 54.2925 238.824 54.4541 238.994 54.4541 cv
239.281 54.4541 240.205 53.9785 240.205 52.9746 cv
240.205 52.4546 239.873 52.0688 239.452 52.0688 cv
239.102 52.0688 238.877 52.3379 238.877 52.6338 cv
238.877 52.9653 239.12 53.2075 239.452 53.2075 cv
239.514 53.2075 239.577 53.1987 239.595 53.1899 cv
cp
f
250.776 50.4727 mo
250.776 48.8052 249.862 47.6304 248.857 47.6304 cv
247.844 47.6304 246.938 48.832 246.938 50.4639 cv
246.938 52.1318 247.853 53.3062 248.857 53.3062 cv
249.871 53.3062 250.776 52.105 250.776 50.4727 cv
cp
248.857 52.7231 mo
248.158 52.7231 247.602 51.6655 247.602 50.374 cv
247.602 49.0742 248.211 48.2134 248.857 48.2134 cv
249.502 48.2134 250.113 49.083 250.113 50.374 cv
250.113 51.6743 249.556 52.7231 248.857 52.7231 cv
cp
f
253.717 53.1899 mo
253.672 53.3867 253.51 53.7275 253.053 53.8799 cv
252.973 53.9067 252.811 53.9609 252.811 54.1582 cv
252.811 54.2925 252.946 54.4541 253.116 54.4541 cv
253.403 54.4541 254.327 53.9785 254.327 52.9746 cv
254.327 52.4546 253.995 52.0688 253.574 52.0688 cv
253.224 52.0688 253 52.3379 253 52.6338 cv
253 52.9653 253.242 53.2075 253.574 53.2075 cv
253.636 53.2075 253.699 53.1987 253.717 53.1899 cv
cp
f
264.898 50.4727 mo
264.898 48.8052 263.984 47.6304 262.979 47.6304 cv
261.966 47.6304 261.06 48.832 261.06 50.4639 cv
261.06 52.1318 261.975 53.3062 262.979 53.3062 cv
263.993 53.3062 264.898 52.105 264.898 50.4727 cv
cp
262.979 52.7231 mo
262.28 52.7231 261.724 51.6655 261.724 50.374 cv
261.724 49.0742 262.333 48.2134 262.979 48.2134 cv
263.625 48.2134 264.235 49.083 264.235 50.374 cv
264.235 51.6743 263.678 52.7231 262.979 52.7231 cv
cp
f
267.839 53.1899 mo
267.794 53.3867 267.632 53.7275 267.175 53.8799 cv
267.095 53.9067 266.933 53.9609 266.933 54.1582 cv
266.933 54.2925 267.068 54.4541 267.238 54.4541 cv
267.525 54.4541 268.449 53.9785 268.449 52.9746 cv
268.449 52.4546 268.117 52.0688 267.696 52.0688 cv
267.346 52.0688 267.122 52.3379 267.122 52.6338 cv
267.122 52.9653 267.364 53.2075 267.696 53.2075 cv
267.758 53.2075 267.821 53.1987 267.839 53.1899 cv
cp
f
279.02 50.4727 mo
279.02 48.8052 278.106 47.6304 277.101 47.6304 cv
276.088 47.6304 275.182 48.832 275.182 50.4639 cv
275.182 52.1318 276.097 53.3062 277.101 53.3062 cv
278.115 53.3062 279.02 52.105 279.02 50.4727 cv
cp
277.101 52.7231 mo
276.402 52.7231 275.846 51.6655 275.846 50.374 cv
275.846 49.0742 276.456 48.2134 277.101 48.2134 cv
277.747 48.2134 278.357 49.083 278.357 50.374 cv
278.357 51.6743 277.8 52.7231 277.101 52.7231 cv
cp
f
281.961 53.1899 mo
281.917 53.3867 281.754 53.7275 281.297 53.8799 cv
281.217 53.9067 281.055 53.9609 281.055 54.1582 cv
281.055 54.2925 281.19 54.4541 281.36 54.4541 cv
281.647 54.4541 282.571 53.9785 282.571 52.9746 cv
282.571 52.4546 282.239 52.0688 281.818 52.0688 cv
281.468 52.0688 281.244 52.3379 281.244 52.6338 cv
281.244 52.9653 281.486 53.2075 281.818 53.2075 cv
281.88 53.2075 281.943 53.1987 281.961 53.1899 cv
cp
f
293.142 50.4727 mo
293.142 48.8052 292.228 47.6304 291.223 47.6304 cv
290.21 47.6304 289.304 48.832 289.304 50.4639 cv
289.304 52.1318 290.219 53.3062 291.223 53.3062 cv
292.237 53.3062 293.142 52.105 293.142 50.4727 cv
cp
291.223 52.7231 mo
290.524 52.7231 289.968 51.6655 289.968 50.374 cv
289.968 49.0742 290.578 48.2134 291.223 48.2134 cv
291.869 48.2134 292.479 49.083 292.479 50.374 cv
292.479 51.6743 291.922 52.7231 291.223 52.7231 cv
cp
f
296.326 47.3613 mo
296.326 47.0654 296.253 46.9849 295.949 46.9849 cv
294.317 46.9849 li
294.191 46.9849 293.94 46.9849 293.94 47.272 cv
293.94 47.5679 294.182 47.5679 294.317 47.5679 cv
295.662 47.5679 li
295.662 53.3691 li
294.317 53.3691 li
294.191 53.3691 293.94 53.3691 293.94 53.6558 cv
293.94 53.9517 294.182 53.9517 294.317 53.9517 cv
295.949 53.9517 li
296.245 53.9517 296.326 53.8799 296.326 53.5752 cv
296.326 47.3613 li
cp
f
300.791 53.1899 mo
300.746 53.3867 300.584 53.7275 300.127 53.8799 cv
300.046 53.9067 299.885 53.9609 299.885 54.1582 cv
299.885 54.2925 300.019 54.4541 300.19 54.4541 cv
300.477 54.4541 301.4 53.9785 301.4 52.9746 cv
301.4 52.4546 301.069 52.0688 300.647 52.0688 cv
300.297 52.0688 300.073 52.3379 300.073 52.6338 cv
300.073 52.9653 300.315 53.2075 300.647 53.2075 cv
300.709 53.2075 300.773 53.1987 300.791 53.1899 cv
cp
f
161.031 58.5269 mo
161.166 58.5269 161.408 58.5269 161.408 58.231 cv
161.408 57.9438 161.157 57.9438 161.031 57.9438 cv
159.399 57.9438 li
159.104 57.9438 159.023 58.0156 159.023 58.3203 cv
159.023 64.5342 li
159.023 64.8301 159.095 64.9106 159.399 64.9106 cv
161.031 64.9106 li
161.166 64.9106 161.408 64.9106 161.408 64.6147 cv
161.408 64.3281 161.157 64.3281 161.031 64.3281 cv
159.686 64.3281 li
159.686 58.5269 li
161.031 58.5269 li
cp
f
166.043 61.4316 mo
166.043 59.7642 165.128 58.5894 164.125 58.5894 cv
163.112 58.5894 162.206 59.791 162.206 61.4229 cv
162.206 63.0908 163.121 64.2651 164.125 64.2651 cv
165.138 64.2651 166.043 63.064 166.043 61.4316 cv
cp
164.125 63.6826 mo
163.425 63.6826 162.87 62.6245 162.87 61.333 cv
162.87 60.0332 163.479 59.1724 164.125 59.1724 cv
164.77 59.1724 165.38 60.042 165.38 61.333 cv
165.38 62.6333 164.824 63.6826 164.125 63.6826 cv
cp
f
168.985 64.1489 mo
168.94 64.3462 168.778 64.6865 168.321 64.8389 cv
168.24 64.8657 168.079 64.9199 168.079 65.1172 cv
168.079 65.2515 168.213 65.4131 168.383 65.4131 cv
168.67 65.4131 169.594 64.9375 169.594 63.9336 cv
169.594 63.4136 169.262 63.0278 168.841 63.0278 cv
168.492 63.0278 168.267 63.2969 168.267 63.5928 cv
168.267 63.9243 168.509 64.1665 168.841 64.1665 cv
168.904 64.1665 168.966 64.1577 168.985 64.1489 cv
cp
f
180.166 61.4316 mo
180.166 59.7642 179.25 58.5894 178.247 58.5894 cv
177.234 58.5894 176.328 59.791 176.328 61.4229 cv
176.328 63.0908 177.243 64.2651 178.247 64.2651 cv
179.26 64.2651 180.166 63.064 180.166 61.4316 cv
cp
178.247 63.6826 mo
177.547 63.6826 176.992 62.6245 176.992 61.333 cv
176.992 60.0332 177.601 59.1724 178.247 59.1724 cv
178.892 59.1724 179.502 60.042 179.502 61.333 cv
179.502 62.6333 178.946 63.6826 178.247 63.6826 cv
cp
f
183.107 64.1489 mo
183.062 64.3462 182.9 64.6865 182.443 64.8389 cv
182.363 64.8657 182.201 64.9199 182.201 65.1172 cv
182.201 65.2515 182.335 65.4131 182.505 65.4131 cv
182.792 65.4131 183.716 64.9375 183.716 63.9336 cv
183.716 63.4136 183.384 63.0278 182.963 63.0278 cv
182.614 63.0278 182.389 63.2969 182.389 63.5928 cv
182.389 63.9243 182.631 64.1665 182.963 64.1665 cv
183.026 64.1665 183.088 64.1577 183.107 64.1489 cv
cp
f
194.288 61.4316 mo
194.288 59.7642 193.373 58.5894 192.369 58.5894 cv
191.356 58.5894 190.45 59.791 190.45 61.4229 cv
190.45 63.0908 191.365 64.2651 192.369 64.2651 cv
193.382 64.2651 194.288 63.064 194.288 61.4316 cv
cp
192.369 63.6826 mo
191.669 63.6826 191.114 62.6245 191.114 61.333 cv
191.114 60.0332 191.723 59.1724 192.369 59.1724 cv
193.014 59.1724 193.625 60.042 193.625 61.333 cv
193.625 62.6333 193.068 63.6826 192.369 63.6826 cv
cp
f
197.229 64.1489 mo
197.184 64.3462 197.022 64.6865 196.565 64.8389 cv
196.484 64.8657 196.323 64.9199 196.323 65.1172 cv
196.323 65.2515 196.458 65.4131 196.627 65.4131 cv
196.915 65.4131 197.838 64.9375 197.838 63.9336 cv
197.838 63.4136 197.506 63.0278 197.085 63.0278 cv
196.736 63.0278 196.511 63.2969 196.511 63.5928 cv
196.511 63.9243 196.753 64.1665 197.085 64.1665 cv
197.148 64.1665 197.21 64.1577 197.229 64.1489 cv
cp
f
208.41 61.4316 mo
208.41 59.7642 207.496 58.5894 206.491 58.5894 cv
205.478 58.5894 204.572 59.791 204.572 61.4229 cv
204.572 63.0908 205.487 64.2651 206.491 64.2651 cv
207.504 64.2651 208.41 63.064 208.41 61.4316 cv
cp
206.491 63.6826 mo
205.792 63.6826 205.236 62.6245 205.236 61.333 cv
205.236 60.0332 205.845 59.1724 206.491 59.1724 cv
207.136 59.1724 207.747 60.042 207.747 61.333 cv
207.747 62.6333 207.19 63.6826 206.491 63.6826 cv
cp
f
211.351 64.1489 mo
211.306 64.3462 211.144 64.6865 210.687 64.8389 cv
210.607 64.8657 210.445 64.9199 210.445 65.1172 cv
210.445 65.2515 210.58 65.4131 210.75 65.4131 cv
211.037 65.4131 211.96 64.9375 211.96 63.9336 cv
211.96 63.4136 211.628 63.0278 211.208 63.0278 cv
210.858 63.0278 210.633 63.2969 210.633 63.5928 cv
210.633 63.9243 210.875 64.1665 211.208 64.1665 cv
211.27 64.1665 211.333 64.1577 211.351 64.1489 cv
cp
f
222.532 61.4316 mo
222.532 59.7642 221.617 58.5894 220.613 58.5894 cv
219.6 58.5894 218.694 59.791 218.694 61.4229 cv
218.694 63.0908 219.609 64.2651 220.613 64.2651 cv
221.626 64.2651 222.532 63.064 222.532 61.4316 cv
cp
220.613 63.6826 mo
219.914 63.6826 219.358 62.6245 219.358 61.333 cv
219.358 60.0332 219.967 59.1724 220.613 59.1724 cv
221.258 59.1724 221.869 60.042 221.869 61.333 cv
221.869 62.6333 221.312 63.6826 220.613 63.6826 cv
cp
f
225.473 64.1489 mo
225.428 64.3462 225.266 64.6865 224.809 64.8389 cv
224.729 64.8657 224.567 64.9199 224.567 65.1172 cv
224.567 65.2515 224.702 65.4131 224.872 65.4131 cv
225.159 65.4131 226.083 64.9375 226.083 63.9336 cv
226.083 63.4136 225.75 63.0278 225.33 63.0278 cv
224.98 63.0278 224.755 63.2969 224.755 63.5928 cv
224.755 63.9243 224.998 64.1665 225.33 64.1665 cv
225.392 64.1665 225.455 64.1577 225.473 64.1489 cv
cp
f
236.654 61.4316 mo
236.654 59.7642 235.74 58.5894 234.735 58.5894 cv
233.722 58.5894 232.816 59.791 232.816 61.4229 cv
232.816 63.0908 233.731 64.2651 234.735 64.2651 cv
235.749 64.2651 236.654 63.064 236.654 61.4316 cv
cp
234.735 63.6826 mo
234.036 63.6826 233.48 62.6245 233.48 61.333 cv
233.48 60.0332 234.089 59.1724 234.735 59.1724 cv
235.38 59.1724 235.991 60.042 235.991 61.333 cv
235.991 62.6333 235.434 63.6826 234.735 63.6826 cv
cp
f
239.595 64.1489 mo
239.55 64.3462 239.388 64.6865 238.931 64.8389 cv
238.851 64.8657 238.689 64.9199 238.689 65.1172 cv
238.689 65.2515 238.824 65.4131 238.994 65.4131 cv
239.281 65.4131 240.205 64.9375 240.205 63.9336 cv
240.205 63.4136 239.873 63.0278 239.452 63.0278 cv
239.102 63.0278 238.877 63.2969 238.877 63.5928 cv
238.877 63.9243 239.12 64.1665 239.452 64.1665 cv
239.514 64.1665 239.577 64.1577 239.595 64.1489 cv
cp
f
250.776 61.4316 mo
250.776 59.7642 249.862 58.5894 248.857 58.5894 cv
247.844 58.5894 246.938 59.791 246.938 61.4229 cv
246.938 63.0908 247.853 64.2651 248.857 64.2651 cv
249.871 64.2651 250.776 63.064 250.776 61.4316 cv
cp
248.857 63.6826 mo
248.158 63.6826 247.602 62.6245 247.602 61.333 cv
247.602 60.0332 248.211 59.1724 248.857 59.1724 cv
249.502 59.1724 250.113 60.042 250.113 61.333 cv
250.113 62.6333 249.556 63.6826 248.857 63.6826 cv
cp
f
253.717 64.1489 mo
253.672 64.3462 253.51 64.6865 253.053 64.8389 cv
252.973 64.8657 252.811 64.9199 252.811 65.1172 cv
252.811 65.2515 252.946 65.4131 253.116 65.4131 cv
253.403 65.4131 254.327 64.9375 254.327 63.9336 cv
254.327 63.4136 253.995 63.0278 253.574 63.0278 cv
253.224 63.0278 253 63.2969 253 63.5928 cv
253 63.9243 253.242 64.1665 253.574 64.1665 cv
253.636 64.1665 253.699 64.1577 253.717 64.1489 cv
cp
f
264.898 61.4316 mo
264.898 59.7642 263.984 58.5894 262.979 58.5894 cv
261.966 58.5894 261.06 59.791 261.06 61.4229 cv
261.06 63.0908 261.975 64.2651 262.979 64.2651 cv
263.993 64.2651 264.898 63.064 264.898 61.4316 cv
cp
262.979 63.6826 mo
262.28 63.6826 261.724 62.6245 261.724 61.333 cv
261.724 60.0332 262.333 59.1724 262.979 59.1724 cv
263.625 59.1724 264.235 60.042 264.235 61.333 cv
264.235 62.6333 263.678 63.6826 262.979 63.6826 cv
cp
f
267.839 64.1489 mo
267.794 64.3462 267.632 64.6865 267.175 64.8389 cv
267.095 64.8657 266.933 64.9199 266.933 65.1172 cv
266.933 65.2515 267.068 65.4131 267.238 65.4131 cv
267.525 65.4131 268.449 64.9375 268.449 63.9336 cv
268.449 63.4136 268.117 63.0278 267.696 63.0278 cv
267.346 63.0278 267.122 63.2969 267.122 63.5928 cv
267.122 63.9243 267.364 64.1665 267.696 64.1665 cv
267.758 64.1665 267.821 64.1577 267.839 64.1489 cv
cp
f
279.02 61.4316 mo
279.02 59.7642 278.106 58.5894 277.101 58.5894 cv
276.088 58.5894 275.182 59.791 275.182 61.4229 cv
275.182 63.0908 276.097 64.2651 277.101 64.2651 cv
278.115 64.2651 279.02 63.064 279.02 61.4316 cv
cp
277.101 63.6826 mo
276.402 63.6826 275.846 62.6245 275.846 61.333 cv
275.846 60.0332 276.456 59.1724 277.101 59.1724 cv
277.747 59.1724 278.357 60.042 278.357 61.333 cv
278.357 62.6333 277.8 63.6826 277.101 63.6826 cv
cp
f
281.961 64.1489 mo
281.917 64.3462 281.754 64.6865 281.297 64.8389 cv
281.217 64.8657 281.055 64.9199 281.055 65.1172 cv
281.055 65.2515 281.19 65.4131 281.36 65.4131 cv
281.647 65.4131 282.571 64.9375 282.571 63.9336 cv
282.571 63.4136 282.239 63.0278 281.818 63.0278 cv
281.468 63.0278 281.244 63.2969 281.244 63.5928 cv
281.244 63.9243 281.486 64.1665 281.818 64.1665 cv
281.88 64.1665 281.943 64.1577 281.961 64.1489 cv
cp
f
293.142 61.4316 mo
293.142 59.7642 292.228 58.5894 291.223 58.5894 cv
290.21 58.5894 289.304 59.791 289.304 61.4229 cv
289.304 63.0908 290.219 64.2651 291.223 64.2651 cv
292.237 64.2651 293.142 63.064 293.142 61.4316 cv
cp
291.223 63.6826 mo
290.524 63.6826 289.968 62.6245 289.968 61.333 cv
289.968 60.0332 290.578 59.1724 291.223 59.1724 cv
291.869 59.1724 292.479 60.042 292.479 61.333 cv
292.479 62.6333 291.922 63.6826 291.223 63.6826 cv
cp
f
296.326 58.3203 mo
296.326 58.0244 296.253 57.9438 295.949 57.9438 cv
294.317 57.9438 li
294.191 57.9438 293.94 57.9438 293.94 58.231 cv
293.94 58.5269 294.182 58.5269 294.317 58.5269 cv
295.662 58.5269 li
295.662 64.3281 li
294.317 64.3281 li
294.191 64.3281 293.94 64.3281 293.94 64.6147 cv
293.94 64.9106 294.182 64.9106 294.317 64.9106 cv
295.949 64.9106 li
296.245 64.9106 296.326 64.8389 296.326 64.5342 cv
296.326 58.3203 li
cp
f
300.791 64.1489 mo
300.746 64.3462 300.584 64.6865 300.127 64.8389 cv
300.046 64.8657 299.885 64.9199 299.885 65.1172 cv
299.885 65.2515 300.019 65.4131 300.19 65.4131 cv
300.477 65.4131 301.4 64.9375 301.4 63.9336 cv
301.4 63.4136 301.069 63.0278 300.647 63.0278 cv
300.297 63.0278 300.073 63.2969 300.073 63.5928 cv
300.073 63.9243 300.315 64.1665 300.647 64.1665 cv
300.709 64.1665 300.773 64.1577 300.791 64.1489 cv
cp
f
161.031 69.4858 mo
161.166 69.4858 161.408 69.4858 161.408 69.1899 cv
161.408 68.9028 161.157 68.9028 161.031 68.9028 cv
159.399 68.9028 li
159.104 68.9028 159.023 68.9746 159.023 69.2793 cv
159.023 75.4932 li
159.023 75.7891 159.095 75.8696 159.399 75.8696 cv
161.031 75.8696 li
161.166 75.8696 161.408 75.8696 161.408 75.5737 cv
161.408 75.2871 161.157 75.2871 161.031 75.2871 cv
159.686 75.2871 li
159.686 69.4858 li
161.031 69.4858 li
cp
f
166.043 72.3911 mo
166.043 70.7231 165.128 69.5483 164.125 69.5483 cv
163.112 69.5483 162.206 70.75 162.206 72.3818 cv
162.206 74.0498 163.121 75.2241 164.125 75.2241 cv
165.138 75.2241 166.043 74.0229 166.043 72.3911 cv
cp
164.125 74.6416 mo
163.425 74.6416 162.87 73.5835 162.87 72.2925 cv
162.87 70.9922 163.479 70.1313 164.125 70.1313 cv
164.77 70.1313 165.38 71.001 165.38 72.2925 cv
165.38 73.5923 164.824 74.6416 164.125 74.6416 cv
cp
f
168.985 75.1079 mo
168.94 75.3052 168.778 75.6455 168.321 75.7983 cv
168.24 75.8247 168.079 75.8789 168.079 76.0762 cv
168.079 76.2104 168.213 76.3721 168.383 76.3721 cv
168.67 76.3721 169.594 75.897 169.594 74.8926 cv
169.594 74.3726 169.262 73.9868 168.841 73.9868 cv
168.492 73.9868 168.267 74.2559 168.267 74.5518 cv
168.267 74.8833 168.509 75.1255 168.841 75.1255 cv
168.904 75.1255 168.966 75.1167 168.985 75.1079 cv
cp
f
180.166 72.3911 mo
180.166 70.7231 179.25 69.5483 178.247 69.5483 cv
177.234 69.5483 176.328 70.75 176.328 72.3818 cv
176.328 74.0498 177.243 75.2241 178.247 75.2241 cv
179.26 75.2241 180.166 74.0229 180.166 72.3911 cv
cp
178.247 74.6416 mo
177.547 74.6416 176.992 73.5835 176.992 72.2925 cv
176.992 70.9922 177.601 70.1313 178.247 70.1313 cv
178.892 70.1313 179.502 71.001 179.502 72.2925 cv
179.502 73.5923 178.946 74.6416 178.247 74.6416 cv
cp
f
183.107 75.1079 mo
183.062 75.3052 182.9 75.6455 182.443 75.7983 cv
182.363 75.8247 182.201 75.8789 182.201 76.0762 cv
182.201 76.2104 182.335 76.3721 182.505 76.3721 cv
182.792 76.3721 183.716 75.897 183.716 74.8926 cv
183.716 74.3726 183.384 73.9868 182.963 73.9868 cv
182.614 73.9868 182.389 74.2559 182.389 74.5518 cv
182.389 74.8833 182.631 75.1255 182.963 75.1255 cv
183.026 75.1255 183.088 75.1167 183.107 75.1079 cv
cp
f
194.288 72.3911 mo
194.288 70.7231 193.373 69.5483 192.369 69.5483 cv
191.356 69.5483 190.45 70.75 190.45 72.3818 cv
190.45 74.0498 191.365 75.2241 192.369 75.2241 cv
193.382 75.2241 194.288 74.0229 194.288 72.3911 cv
cp
192.369 74.6416 mo
191.669 74.6416 191.114 73.5835 191.114 72.2925 cv
191.114 70.9922 191.723 70.1313 192.369 70.1313 cv
193.014 70.1313 193.625 71.001 193.625 72.2925 cv
193.625 73.5923 193.068 74.6416 192.369 74.6416 cv
cp
f
197.229 75.1079 mo
197.184 75.3052 197.022 75.6455 196.565 75.7983 cv
196.484 75.8247 196.323 75.8789 196.323 76.0762 cv
196.323 76.2104 196.458 76.3721 196.627 76.3721 cv
196.915 76.3721 197.838 75.897 197.838 74.8926 cv
197.838 74.3726 197.506 73.9868 197.085 73.9868 cv
196.736 73.9868 196.511 74.2559 196.511 74.5518 cv
196.511 74.8833 196.753 75.1255 197.085 75.1255 cv
197.148 75.1255 197.21 75.1167 197.229 75.1079 cv
cp
f
208.41 72.3911 mo
208.41 70.7231 207.496 69.5483 206.491 69.5483 cv
205.478 69.5483 204.572 70.75 204.572 72.3818 cv
204.572 74.0498 205.487 75.2241 206.491 75.2241 cv
207.504 75.2241 208.41 74.0229 208.41 72.3911 cv
cp
206.491 74.6416 mo
205.792 74.6416 205.236 73.5835 205.236 72.2925 cv
205.236 70.9922 205.845 70.1313 206.491 70.1313 cv
207.136 70.1313 207.747 71.001 207.747 72.2925 cv
207.747 73.5923 207.19 74.6416 206.491 74.6416 cv
cp
f
211.351 75.1079 mo
211.306 75.3052 211.144 75.6455 210.687 75.7983 cv
210.607 75.8247 210.445 75.8789 210.445 76.0762 cv
210.445 76.2104 210.58 76.3721 210.75 76.3721 cv
211.037 76.3721 211.96 75.897 211.96 74.8926 cv
211.96 74.3726 211.628 73.9868 211.208 73.9868 cv
210.858 73.9868 210.633 74.2559 210.633 74.5518 cv
210.633 74.8833 210.875 75.1255 211.208 75.1255 cv
211.27 75.1255 211.333 75.1167 211.351 75.1079 cv
cp
f
222.532 72.3911 mo
222.532 70.7231 221.617 69.5483 220.613 69.5483 cv
219.6 69.5483 218.694 70.75 218.694 72.3818 cv
218.694 74.0498 219.609 75.2241 220.613 75.2241 cv
221.626 75.2241 222.532 74.0229 222.532 72.3911 cv
cp
220.613 74.6416 mo
219.914 74.6416 219.358 73.5835 219.358 72.2925 cv
219.358 70.9922 219.967 70.1313 220.613 70.1313 cv
221.258 70.1313 221.869 71.001 221.869 72.2925 cv
221.869 73.5923 221.312 74.6416 220.613 74.6416 cv
cp
f
225.473 75.1079 mo
225.428 75.3052 225.266 75.6455 224.809 75.7983 cv
224.729 75.8247 224.567 75.8789 224.567 76.0762 cv
224.567 76.2104 224.702 76.3721 224.872 76.3721 cv
225.159 76.3721 226.083 75.897 226.083 74.8926 cv
226.083 74.3726 225.75 73.9868 225.33 73.9868 cv
224.98 73.9868 224.755 74.2559 224.755 74.5518 cv
224.755 74.8833 224.998 75.1255 225.33 75.1255 cv
225.392 75.1255 225.455 75.1167 225.473 75.1079 cv
cp
f
236.654 72.3911 mo
236.654 70.7231 235.74 69.5483 234.735 69.5483 cv
233.722 69.5483 232.816 70.75 232.816 72.3818 cv
232.816 74.0498 233.731 75.2241 234.735 75.2241 cv
235.749 75.2241 236.654 74.0229 236.654 72.3911 cv
cp
234.735 74.6416 mo
234.036 74.6416 233.48 73.5835 233.48 72.2925 cv
233.48 70.9922 234.089 70.1313 234.735 70.1313 cv
235.38 70.1313 235.991 71.001 235.991 72.2925 cv
235.991 73.5923 235.434 74.6416 234.735 74.6416 cv
cp
f
239.595 75.1079 mo
239.55 75.3052 239.388 75.6455 238.931 75.7983 cv
238.851 75.8247 238.689 75.8789 238.689 76.0762 cv
238.689 76.2104 238.824 76.3721 238.994 76.3721 cv
239.281 76.3721 240.205 75.897 240.205 74.8926 cv
240.205 74.3726 239.873 73.9868 239.452 73.9868 cv
239.102 73.9868 238.877 74.2559 238.877 74.5518 cv
238.877 74.8833 239.12 75.1255 239.452 75.1255 cv
239.514 75.1255 239.577 75.1167 239.595 75.1079 cv
cp
f
250.776 72.3911 mo
250.776 70.7231 249.862 69.5483 248.857 69.5483 cv
247.844 69.5483 246.938 70.75 246.938 72.3818 cv
246.938 74.0498 247.853 75.2241 248.857 75.2241 cv
249.871 75.2241 250.776 74.0229 250.776 72.3911 cv
cp
248.857 74.6416 mo
248.158 74.6416 247.602 73.5835 247.602 72.2925 cv
247.602 70.9922 248.211 70.1313 248.857 70.1313 cv
249.502 70.1313 250.113 71.001 250.113 72.2925 cv
250.113 73.5923 249.556 74.6416 248.857 74.6416 cv
cp
f
253.717 75.1079 mo
253.672 75.3052 253.51 75.6455 253.053 75.7983 cv
252.973 75.8247 252.811 75.8789 252.811 76.0762 cv
252.811 76.2104 252.946 76.3721 253.116 76.3721 cv
253.403 76.3721 254.327 75.897 254.327 74.8926 cv
254.327 74.3726 253.995 73.9868 253.574 73.9868 cv
253.224 73.9868 253 74.2559 253 74.5518 cv
253 74.8833 253.242 75.1255 253.574 75.1255 cv
253.636 75.1255 253.699 75.1167 253.717 75.1079 cv
cp
f
264.898 72.3911 mo
264.898 70.7231 263.984 69.5483 262.979 69.5483 cv
261.966 69.5483 261.06 70.75 261.06 72.3818 cv
261.06 74.0498 261.975 75.2241 262.979 75.2241 cv
263.993 75.2241 264.898 74.0229 264.898 72.3911 cv
cp
262.979 74.6416 mo
262.28 74.6416 261.724 73.5835 261.724 72.2925 cv
261.724 70.9922 262.333 70.1313 262.979 70.1313 cv
263.625 70.1313 264.235 71.001 264.235 72.2925 cv
264.235 73.5923 263.678 74.6416 262.979 74.6416 cv
cp
f
267.839 75.1079 mo
267.794 75.3052 267.632 75.6455 267.175 75.7983 cv
267.095 75.8247 266.933 75.8789 266.933 76.0762 cv
266.933 76.2104 267.068 76.3721 267.238 76.3721 cv
267.525 76.3721 268.449 75.897 268.449 74.8926 cv
268.449 74.3726 268.117 73.9868 267.696 73.9868 cv
267.346 73.9868 267.122 74.2559 267.122 74.5518 cv
267.122 74.8833 267.364 75.1255 267.696 75.1255 cv
267.758 75.1255 267.821 75.1167 267.839 75.1079 cv
cp
f
279.02 72.3911 mo
279.02 70.7231 278.106 69.5483 277.101 69.5483 cv
276.088 69.5483 275.182 70.75 275.182 72.3818 cv
275.182 74.0498 276.097 75.2241 277.101 75.2241 cv
278.115 75.2241 279.02 74.0229 279.02 72.3911 cv
cp
277.101 74.6416 mo
276.402 74.6416 275.846 73.5835 275.846 72.2925 cv
275.846 70.9922 276.456 70.1313 277.101 70.1313 cv
277.747 70.1313 278.357 71.001 278.357 72.2925 cv
278.357 73.5923 277.8 74.6416 277.101 74.6416 cv
cp
f
281.961 75.1079 mo
281.917 75.3052 281.754 75.6455 281.297 75.7983 cv
281.217 75.8247 281.055 75.8789 281.055 76.0762 cv
281.055 76.2104 281.19 76.3721 281.36 76.3721 cv
281.647 76.3721 282.571 75.897 282.571 74.8926 cv
282.571 74.3726 282.239 73.9868 281.818 73.9868 cv
281.468 73.9868 281.244 74.2559 281.244 74.5518 cv
281.244 74.8833 281.486 75.1255 281.818 75.1255 cv
281.88 75.1255 281.943 75.1167 281.961 75.1079 cv
cp
f
293.142 72.3911 mo
293.142 70.7231 292.228 69.5483 291.223 69.5483 cv
290.21 69.5483 289.304 70.75 289.304 72.3818 cv
289.304 74.0498 290.219 75.2241 291.223 75.2241 cv
292.237 75.2241 293.142 74.0229 293.142 72.3911 cv
cp
291.223 74.6416 mo
290.524 74.6416 289.968 73.5835 289.968 72.2925 cv
289.968 70.9922 290.578 70.1313 291.223 70.1313 cv
291.869 70.1313 292.479 71.001 292.479 72.2925 cv
292.479 73.5923 291.922 74.6416 291.223 74.6416 cv
cp
f
296.326 69.2793 mo
296.326 68.9839 296.253 68.9028 295.949 68.9028 cv
294.317 68.9028 li
294.191 68.9028 293.94 68.9028 293.94 69.1899 cv
293.94 69.4858 294.182 69.4858 294.317 69.4858 cv
295.662 69.4858 li
295.662 75.2871 li
294.317 75.2871 li
294.191 75.2871 293.94 75.2871 293.94 75.5737 cv
293.94 75.8696 294.182 75.8696 294.317 75.8696 cv
295.949 75.8696 li
296.245 75.8696 296.326 75.7983 296.326 75.4932 cv
296.326 69.2793 li
cp
f
300.791 75.1079 mo
300.746 75.3052 300.584 75.6455 300.127 75.7983 cv
300.046 75.8247 299.885 75.8789 299.885 76.0762 cv
299.885 76.2104 300.019 76.3721 300.19 76.3721 cv
300.477 76.3721 301.4 75.897 301.4 74.8926 cv
301.4 74.3726 301.069 73.9868 300.647 73.9868 cv
300.297 73.9868 300.073 74.2559 300.073 74.5518 cv
300.073 74.8833 300.315 75.1255 300.647 75.1255 cv
300.709 75.1255 300.773 75.1167 300.791 75.1079 cv
cp
f
161.031 80.4448 mo
161.166 80.4448 161.408 80.4448 161.408 80.1489 cv
161.408 79.8618 161.157 79.8618 161.031 79.8618 cv
159.399 79.8618 li
159.104 79.8618 159.023 79.9336 159.023 80.2388 cv
159.023 86.4521 li
159.023 86.748 159.095 86.8286 159.399 86.8286 cv
161.031 86.8286 li
161.166 86.8286 161.408 86.8286 161.408 86.5327 cv
161.408 86.2461 161.157 86.2461 161.031 86.2461 cv
159.686 86.2461 li
159.686 80.4448 li
161.031 80.4448 li
cp
f
166.043 83.3501 mo
166.043 81.6821 165.128 80.5073 164.125 80.5073 cv
163.112 80.5073 162.206 81.709 162.206 83.3408 cv
162.206 85.0088 163.121 86.1831 164.125 86.1831 cv
165.138 86.1831 166.043 84.9819 166.043 83.3501 cv
cp
164.125 85.6006 mo
163.425 85.6006 162.87 84.5425 162.87 83.2515 cv
162.87 81.9512 163.479 81.0903 164.125 81.0903 cv
164.77 81.0903 165.38 81.96 165.38 83.2515 cv
165.38 84.5513 164.824 85.6006 164.125 85.6006 cv
cp
f
168.985 86.0669 mo
168.94 86.2642 168.778 86.6045 168.321 86.7573 cv
168.24 86.7842 168.079 86.8379 168.079 87.0352 cv
168.079 87.1694 168.213 87.3311 168.383 87.3311 cv
168.67 87.3311 169.594 86.856 169.594 85.8516 cv
169.594 85.3315 169.262 84.9458 168.841 84.9458 cv
168.492 84.9458 168.267 85.2148 168.267 85.5107 cv
168.267 85.8423 168.509 86.0845 168.841 86.0845 cv
168.904 86.0845 168.966 86.0757 168.985 86.0669 cv
cp
f
180.166 83.3501 mo
180.166 81.6821 179.25 80.5073 178.247 80.5073 cv
177.234 80.5073 176.328 81.709 176.328 83.3408 cv
176.328 85.0088 177.243 86.1831 178.247 86.1831 cv
179.26 86.1831 180.166 84.9819 180.166 83.3501 cv
cp
178.247 85.6006 mo
177.547 85.6006 176.992 84.5425 176.992 83.2515 cv
176.992 81.9512 177.601 81.0903 178.247 81.0903 cv
178.892 81.0903 179.502 81.96 179.502 83.2515 cv
179.502 84.5513 178.946 85.6006 178.247 85.6006 cv
cp
f
183.107 86.0669 mo
183.062 86.2642 182.9 86.6045 182.443 86.7573 cv
182.363 86.7842 182.201 86.8379 182.201 87.0352 cv
182.201 87.1694 182.335 87.3311 182.505 87.3311 cv
182.792 87.3311 183.716 86.856 183.716 85.8516 cv
183.716 85.3315 183.384 84.9458 182.963 84.9458 cv
182.614 84.9458 182.389 85.2148 182.389 85.5107 cv
182.389 85.8423 182.631 86.0845 182.963 86.0845 cv
183.026 86.0845 183.088 86.0757 183.107 86.0669 cv
cp
f
194.288 83.3501 mo
194.288 81.6821 193.373 80.5073 192.369 80.5073 cv
191.356 80.5073 190.45 81.709 190.45 83.3408 cv
190.45 85.0088 191.365 86.1831 192.369 86.1831 cv
193.382 86.1831 194.288 84.9819 194.288 83.3501 cv
cp
192.369 85.6006 mo
191.669 85.6006 191.114 84.5425 191.114 83.2515 cv
191.114 81.9512 191.723 81.0903 192.369 81.0903 cv
193.014 81.0903 193.625 81.96 193.625 83.2515 cv
193.625 84.5513 193.068 85.6006 192.369 85.6006 cv
cp
f
197.229 86.0669 mo
197.184 86.2642 197.022 86.6045 196.565 86.7573 cv
196.484 86.7842 196.323 86.8379 196.323 87.0352 cv
196.323 87.1694 196.458 87.3311 196.627 87.3311 cv
196.915 87.3311 197.838 86.856 197.838 85.8516 cv
197.838 85.3315 197.506 84.9458 197.085 84.9458 cv
196.736 84.9458 196.511 85.2148 196.511 85.5107 cv
196.511 85.8423 196.753 86.0845 197.085 86.0845 cv
197.148 86.0845 197.21 86.0757 197.229 86.0669 cv
cp
f
208.41 83.3501 mo
208.41 81.6821 207.496 80.5073 206.491 80.5073 cv
205.478 80.5073 204.572 81.709 204.572 83.3408 cv
204.572 85.0088 205.487 86.1831 206.491 86.1831 cv
207.504 86.1831 208.41 84.9819 208.41 83.3501 cv
cp
206.491 85.6006 mo
205.792 85.6006 205.236 84.5425 205.236 83.2515 cv
205.236 81.9512 205.845 81.0903 206.491 81.0903 cv
207.136 81.0903 207.747 81.96 207.747 83.2515 cv
207.747 84.5513 207.19 85.6006 206.491 85.6006 cv
cp
f
211.351 86.0669 mo
211.306 86.2642 211.144 86.6045 210.687 86.7573 cv
210.607 86.7842 210.445 86.8379 210.445 87.0352 cv
210.445 87.1694 210.58 87.3311 210.75 87.3311 cv
211.037 87.3311 211.96 86.856 211.96 85.8516 cv
211.96 85.3315 211.628 84.9458 211.208 84.9458 cv
210.858 84.9458 210.633 85.2148 210.633 85.5107 cv
210.633 85.8423 210.875 86.0845 211.208 86.0845 cv
211.27 86.0845 211.333 86.0757 211.351 86.0669 cv
cp
f
222.532 83.3501 mo
222.532 81.6821 221.617 80.5073 220.613 80.5073 cv
219.6 80.5073 218.694 81.709 218.694 83.3408 cv
218.694 85.0088 219.609 86.1831 220.613 86.1831 cv
221.626 86.1831 222.532 84.9819 222.532 83.3501 cv
cp
220.613 85.6006 mo
219.914 85.6006 219.358 84.5425 219.358 83.2515 cv
219.358 81.9512 219.967 81.0903 220.613 81.0903 cv
221.258 81.0903 221.869 81.96 221.869 83.2515 cv
221.869 84.5513 221.312 85.6006 220.613 85.6006 cv
cp
f
225.473 86.0669 mo
225.428 86.2642 225.266 86.6045 224.809 86.7573 cv
224.729 86.7842 224.567 86.8379 224.567 87.0352 cv
224.567 87.1694 224.702 87.3311 224.872 87.3311 cv
225.159 87.3311 226.083 86.856 226.083 85.8516 cv
226.083 85.3315 225.75 84.9458 225.33 84.9458 cv
224.98 84.9458 224.755 85.2148 224.755 85.5107 cv
224.755 85.8423 224.998 86.0845 225.33 86.0845 cv
225.392 86.0845 225.455 86.0757 225.473 86.0669 cv
cp
f
236.654 83.3501 mo
236.654 81.6821 235.74 80.5073 234.735 80.5073 cv
233.722 80.5073 232.816 81.709 232.816 83.3408 cv
232.816 85.0088 233.731 86.1831 234.735 86.1831 cv
235.749 86.1831 236.654 84.9819 236.654 83.3501 cv
cp
234.735 85.6006 mo
234.036 85.6006 233.48 84.5425 233.48 83.2515 cv
233.48 81.9512 234.089 81.0903 234.735 81.0903 cv
235.38 81.0903 235.991 81.96 235.991 83.2515 cv
235.991 84.5513 235.434 85.6006 234.735 85.6006 cv
cp
f
239.595 86.0669 mo
239.55 86.2642 239.388 86.6045 238.931 86.7573 cv
238.851 86.7842 238.689 86.8379 238.689 87.0352 cv
238.689 87.1694 238.824 87.3311 238.994 87.3311 cv
239.281 87.3311 240.205 86.856 240.205 85.8516 cv
240.205 85.3315 239.873 84.9458 239.452 84.9458 cv
239.102 84.9458 238.877 85.2148 238.877 85.5107 cv
238.877 85.8423 239.12 86.0845 239.452 86.0845 cv
239.514 86.0845 239.577 86.0757 239.595 86.0669 cv
cp
f
250.776 83.3501 mo
250.776 81.6821 249.862 80.5073 248.857 80.5073 cv
247.844 80.5073 246.938 81.709 246.938 83.3408 cv
246.938 85.0088 247.853 86.1831 248.857 86.1831 cv
249.871 86.1831 250.776 84.9819 250.776 83.3501 cv
cp
248.857 85.6006 mo
248.158 85.6006 247.602 84.5425 247.602 83.2515 cv
247.602 81.9512 248.211 81.0903 248.857 81.0903 cv
249.502 81.0903 250.113 81.96 250.113 83.2515 cv
250.113 84.5513 249.556 85.6006 248.857 85.6006 cv
cp
f
253.717 86.0669 mo
253.672 86.2642 253.51 86.6045 253.053 86.7573 cv
252.973 86.7842 252.811 86.8379 252.811 87.0352 cv
252.811 87.1694 252.946 87.3311 253.116 87.3311 cv
253.403 87.3311 254.327 86.856 254.327 85.8516 cv
254.327 85.3315 253.995 84.9458 253.574 84.9458 cv
253.224 84.9458 253 85.2148 253 85.5107 cv
253 85.8423 253.242 86.0845 253.574 86.0845 cv
253.636 86.0845 253.699 86.0757 253.717 86.0669 cv
cp
f
264.898 83.3501 mo
264.898 81.6821 263.984 80.5073 262.979 80.5073 cv
261.966 80.5073 261.06 81.709 261.06 83.3408 cv
261.06 85.0088 261.975 86.1831 262.979 86.1831 cv
263.993 86.1831 264.898 84.9819 264.898 83.3501 cv
cp
262.979 85.6006 mo
262.28 85.6006 261.724 84.5425 261.724 83.2515 cv
261.724 81.9512 262.333 81.0903 262.979 81.0903 cv
263.625 81.0903 264.235 81.96 264.235 83.2515 cv
264.235 84.5513 263.678 85.6006 262.979 85.6006 cv
cp
f
267.839 86.0669 mo
267.794 86.2642 267.632 86.6045 267.175 86.7573 cv
267.095 86.7842 266.933 86.8379 266.933 87.0352 cv
266.933 87.1694 267.068 87.3311 267.238 87.3311 cv
267.525 87.3311 268.449 86.856 268.449 85.8516 cv
268.449 85.3315 268.117 84.9458 267.696 84.9458 cv
267.346 84.9458 267.122 85.2148 267.122 85.5107 cv
267.122 85.8423 267.364 86.0845 267.696 86.0845 cv
267.758 86.0845 267.821 86.0757 267.839 86.0669 cv
cp
f
279.02 83.3501 mo
279.02 81.6821 278.106 80.5073 277.101 80.5073 cv
276.088 80.5073 275.182 81.709 275.182 83.3408 cv
275.182 85.0088 276.097 86.1831 277.101 86.1831 cv
278.115 86.1831 279.02 84.9819 279.02 83.3501 cv
cp
277.101 85.6006 mo
276.402 85.6006 275.846 84.5425 275.846 83.2515 cv
275.846 81.9512 276.456 81.0903 277.101 81.0903 cv
277.747 81.0903 278.357 81.96 278.357 83.2515 cv
278.357 84.5513 277.8 85.6006 277.101 85.6006 cv
cp
f
281.961 86.0669 mo
281.917 86.2642 281.754 86.6045 281.297 86.7573 cv
281.217 86.7842 281.055 86.8379 281.055 87.0352 cv
281.055 87.1694 281.19 87.3311 281.36 87.3311 cv
281.647 87.3311 282.571 86.856 282.571 85.8516 cv
282.571 85.3315 282.239 84.9458 281.818 84.9458 cv
281.468 84.9458 281.244 85.2148 281.244 85.5107 cv
281.244 85.8423 281.486 86.0845 281.818 86.0845 cv
281.88 86.0845 281.943 86.0757 281.961 86.0669 cv
cp
f
293.142 83.3501 mo
293.142 81.6821 292.228 80.5073 291.223 80.5073 cv
290.21 80.5073 289.304 81.709 289.304 83.3408 cv
289.304 85.0088 290.219 86.1831 291.223 86.1831 cv
292.237 86.1831 293.142 84.9819 293.142 83.3501 cv
cp
291.223 85.6006 mo
290.524 85.6006 289.968 84.5425 289.968 83.2515 cv
289.968 81.9512 290.578 81.0903 291.223 81.0903 cv
291.869 81.0903 292.479 81.96 292.479 83.2515 cv
292.479 84.5513 291.922 85.6006 291.223 85.6006 cv
cp
f
296.326 80.2388 mo
296.326 79.9429 296.253 79.8618 295.949 79.8618 cv
294.317 79.8618 li
294.191 79.8618 293.94 79.8618 293.94 80.1489 cv
293.94 80.4448 294.182 80.4448 294.317 80.4448 cv
295.662 80.4448 li
295.662 86.2461 li
294.317 86.2461 li
294.191 86.2461 293.94 86.2461 293.94 86.5327 cv
293.94 86.8286 294.182 86.8286 294.317 86.8286 cv
295.949 86.8286 li
296.245 86.8286 296.326 86.7573 296.326 86.4521 cv
296.326 80.2388 li
cp
f
300.791 86.0669 mo
300.746 86.2642 300.584 86.6045 300.127 86.7573 cv
300.046 86.7842 299.885 86.8379 299.885 87.0352 cv
299.885 87.1694 300.019 87.3311 300.19 87.3311 cv
300.477 87.3311 301.4 86.856 301.4 85.8516 cv
301.4 85.3315 301.069 84.9458 300.647 84.9458 cv
300.297 84.9458 300.073 85.2148 300.073 85.5107 cv
300.073 85.8423 300.315 86.0845 300.647 86.0845 cv
300.709 86.0845 300.773 86.0757 300.791 86.0669 cv
cp
f
161.031 91.4038 mo
161.166 91.4038 161.408 91.4038 161.408 91.1079 cv
161.408 90.8208 161.157 90.8208 161.031 90.8208 cv
159.399 90.8208 li
159.104 90.8208 159.023 90.8926 159.023 91.1978 cv
159.023 97.4111 li
159.023 97.707 159.095 97.7876 159.399 97.7876 cv
161.031 97.7876 li
161.166 97.7876 161.408 97.7876 161.408 97.4917 cv
161.408 97.2051 161.157 97.2051 161.031 97.2051 cv
159.686 97.2051 li
159.686 91.4038 li
161.031 91.4038 li
cp
f
166.043 94.3091 mo
166.043 92.6411 165.128 91.4663 164.125 91.4663 cv
163.112 91.4663 162.206 92.668 162.206 94.2998 cv
162.206 95.9678 163.121 97.1421 164.125 97.1421 cv
165.138 97.1421 166.043 95.9409 166.043 94.3091 cv
cp
164.125 96.5596 mo
163.425 96.5596 162.87 95.5015 162.87 94.2104 cv
162.87 92.9102 163.479 92.0493 164.125 92.0493 cv
164.77 92.0493 165.38 92.9189 165.38 94.2104 cv
165.38 95.5103 164.824 96.5596 164.125 96.5596 cv
cp
f
168.985 97.0259 mo
168.94 97.2231 168.778 97.5635 168.321 97.7163 cv
168.24 97.7432 168.079 97.7969 168.079 97.9941 cv
168.079 98.1284 168.213 98.29 168.383 98.29 cv
168.67 98.29 169.594 97.8149 169.594 96.8105 cv
169.594 96.2905 169.262 95.9048 168.841 95.9048 cv
168.492 95.9048 168.267 96.1738 168.267 96.4697 cv
168.267 96.8013 168.509 97.0435 168.841 97.0435 cv
168.904 97.0435 168.966 97.0347 168.985 97.0259 cv
cp
f
180.166 94.3091 mo
180.166 92.6411 179.25 91.4663 178.247 91.4663 cv
177.234 91.4663 176.328 92.668 176.328 94.2998 cv
176.328 95.9678 177.243 97.1421 178.247 97.1421 cv
179.26 97.1421 180.166 95.9409 180.166 94.3091 cv
cp
178.247 96.5596 mo
177.547 96.5596 176.992 95.5015 176.992 94.2104 cv
176.992 92.9102 177.601 92.0493 178.247 92.0493 cv
178.892 92.0493 179.502 92.9189 179.502 94.2104 cv
179.502 95.5103 178.946 96.5596 178.247 96.5596 cv
cp
f
183.107 97.0259 mo
183.062 97.2231 182.9 97.5635 182.443 97.7163 cv
182.363 97.7432 182.201 97.7969 182.201 97.9941 cv
182.201 98.1284 182.335 98.29 182.505 98.29 cv
182.792 98.29 183.716 97.8149 183.716 96.8105 cv
183.716 96.2905 183.384 95.9048 182.963 95.9048 cv
182.614 95.9048 182.389 96.1738 182.389 96.4697 cv
182.389 96.8013 182.631 97.0435 182.963 97.0435 cv
183.026 97.0435 183.088 97.0347 183.107 97.0259 cv
cp
f
194.288 94.3091 mo
194.288 92.6411 193.373 91.4663 192.369 91.4663 cv
191.356 91.4663 190.45 92.668 190.45 94.2998 cv
190.45 95.9678 191.365 97.1421 192.369 97.1421 cv
193.382 97.1421 194.288 95.9409 194.288 94.3091 cv
cp
192.369 96.5596 mo
191.669 96.5596 191.114 95.5015 191.114 94.2104 cv
191.114 92.9102 191.723 92.0493 192.369 92.0493 cv
193.014 92.0493 193.625 92.9189 193.625 94.2104 cv
193.625 95.5103 193.068 96.5596 192.369 96.5596 cv
cp
f
197.229 97.0259 mo
197.184 97.2231 197.022 97.5635 196.565 97.7163 cv
196.484 97.7432 196.323 97.7969 196.323 97.9941 cv
196.323 98.1284 196.458 98.29 196.627 98.29 cv
196.915 98.29 197.838 97.8149 197.838 96.8105 cv
197.838 96.2905 197.506 95.9048 197.085 95.9048 cv
196.736 95.9048 196.511 96.1738 196.511 96.4697 cv
196.511 96.8013 196.753 97.0435 197.085 97.0435 cv
197.148 97.0435 197.21 97.0347 197.229 97.0259 cv
cp
f
208.41 94.3091 mo
208.41 92.6411 207.496 91.4663 206.491 91.4663 cv
205.478 91.4663 204.572 92.668 204.572 94.2998 cv
204.572 95.9678 205.487 97.1421 206.491 97.1421 cv
207.504 97.1421 208.41 95.9409 208.41 94.3091 cv
cp
206.491 96.5596 mo
205.792 96.5596 205.236 95.5015 205.236 94.2104 cv
205.236 92.9102 205.845 92.0493 206.491 92.0493 cv
207.136 92.0493 207.747 92.9189 207.747 94.2104 cv
207.747 95.5103 207.19 96.5596 206.491 96.5596 cv
cp
f
211.351 97.0259 mo
211.306 97.2231 211.144 97.5635 210.687 97.7163 cv
210.607 97.7432 210.445 97.7969 210.445 97.9941 cv
210.445 98.1284 210.58 98.29 210.75 98.29 cv
211.037 98.29 211.96 97.8149 211.96 96.8105 cv
211.96 96.2905 211.628 95.9048 211.208 95.9048 cv
210.858 95.9048 210.633 96.1738 210.633 96.4697 cv
210.633 96.8013 210.875 97.0435 211.208 97.0435 cv
211.27 97.0435 211.333 97.0347 211.351 97.0259 cv
cp
f
222.532 94.3091 mo
222.532 92.6411 221.617 91.4663 220.613 91.4663 cv
219.6 91.4663 218.694 92.668 218.694 94.2998 cv
218.694 95.9678 219.609 97.1421 220.613 97.1421 cv
221.626 97.1421 222.532 95.9409 222.532 94.3091 cv
cp
220.613 96.5596 mo
219.914 96.5596 219.358 95.5015 219.358 94.2104 cv
219.358 92.9102 219.967 92.0493 220.613 92.0493 cv
221.258 92.0493 221.869 92.9189 221.869 94.2104 cv
221.869 95.5103 221.312 96.5596 220.613 96.5596 cv
cp
f
225.473 97.0259 mo
225.428 97.2231 225.266 97.5635 224.809 97.7163 cv
224.729 97.7432 224.567 97.7969 224.567 97.9941 cv
224.567 98.1284 224.702 98.29 224.872 98.29 cv
225.159 98.29 226.083 97.8149 226.083 96.8105 cv
226.083 96.2905 225.75 95.9048 225.33 95.9048 cv
224.98 95.9048 224.755 96.1738 224.755 96.4697 cv
224.755 96.8013 224.998 97.0435 225.33 97.0435 cv
225.392 97.0435 225.455 97.0347 225.473 97.0259 cv
cp
f
236.654 94.3091 mo
236.654 92.6411 235.74 91.4663 234.735 91.4663 cv
233.722 91.4663 232.816 92.668 232.816 94.2998 cv
232.816 95.9678 233.731 97.1421 234.735 97.1421 cv
235.749 97.1421 236.654 95.9409 236.654 94.3091 cv
cp
234.735 96.5596 mo
234.036 96.5596 233.48 95.5015 233.48 94.2104 cv
233.48 92.9102 234.089 92.0493 234.735 92.0493 cv
235.38 92.0493 235.991 92.9189 235.991 94.2104 cv
235.991 95.5103 235.434 96.5596 234.735 96.5596 cv
cp
f
239.595 97.0259 mo
239.55 97.2231 239.388 97.5635 238.931 97.7163 cv
238.851 97.7432 238.689 97.7969 238.689 97.9941 cv
238.689 98.1284 238.824 98.29 238.994 98.29 cv
239.281 98.29 240.205 97.8149 240.205 96.8105 cv
240.205 96.2905 239.873 95.9048 239.452 95.9048 cv
239.102 95.9048 238.877 96.1738 238.877 96.4697 cv
238.877 96.8013 239.12 97.0435 239.452 97.0435 cv
239.514 97.0435 239.577 97.0347 239.595 97.0259 cv
cp
f
250.776 94.3091 mo
250.776 92.6411 249.862 91.4663 248.857 91.4663 cv
247.844 91.4663 246.938 92.668 246.938 94.2998 cv
246.938 95.9678 247.853 97.1421 248.857 97.1421 cv
249.871 97.1421 250.776 95.9409 250.776 94.3091 cv
cp
248.857 96.5596 mo
248.158 96.5596 247.602 95.5015 247.602 94.2104 cv
247.602 92.9102 248.211 92.0493 248.857 92.0493 cv
249.502 92.0493 250.113 92.9189 250.113 94.2104 cv
250.113 95.5103 249.556 96.5596 248.857 96.5596 cv
cp
f
253.717 97.0259 mo
253.672 97.2231 253.51 97.5635 253.053 97.7163 cv
252.973 97.7432 252.811 97.7969 252.811 97.9941 cv
252.811 98.1284 252.946 98.29 253.116 98.29 cv
253.403 98.29 254.327 97.8149 254.327 96.8105 cv
254.327 96.2905 253.995 95.9048 253.574 95.9048 cv
253.224 95.9048 253 96.1738 253 96.4697 cv
253 96.8013 253.242 97.0435 253.574 97.0435 cv
253.636 97.0435 253.699 97.0347 253.717 97.0259 cv
cp
f
264.898 94.3091 mo
264.898 92.6411 263.984 91.4663 262.979 91.4663 cv
261.966 91.4663 261.06 92.668 261.06 94.2998 cv
261.06 95.9678 261.975 97.1421 262.979 97.1421 cv
263.993 97.1421 264.898 95.9409 264.898 94.3091 cv
cp
262.979 96.5596 mo
262.28 96.5596 261.724 95.5015 261.724 94.2104 cv
261.724 92.9102 262.333 92.0493 262.979 92.0493 cv
263.625 92.0493 264.235 92.9189 264.235 94.2104 cv
264.235 95.5103 263.678 96.5596 262.979 96.5596 cv
cp
f
267.839 97.0259 mo
267.794 97.2231 267.632 97.5635 267.175 97.7163 cv
267.095 97.7432 266.933 97.7969 266.933 97.9941 cv
266.933 98.1284 267.068 98.29 267.238 98.29 cv
267.525 98.29 268.449 97.8149 268.449 96.8105 cv
268.449 96.2905 268.117 95.9048 267.696 95.9048 cv
267.346 95.9048 267.122 96.1738 267.122 96.4697 cv
267.122 96.8013 267.364 97.0435 267.696 97.0435 cv
267.758 97.0435 267.821 97.0347 267.839 97.0259 cv
cp
f
279.02 94.3091 mo
279.02 92.6411 278.106 91.4663 277.101 91.4663 cv
276.088 91.4663 275.182 92.668 275.182 94.2998 cv
275.182 95.9678 276.097 97.1421 277.101 97.1421 cv
278.115 97.1421 279.02 95.9409 279.02 94.3091 cv
cp
277.101 96.5596 mo
276.402 96.5596 275.846 95.5015 275.846 94.2104 cv
275.846 92.9102 276.456 92.0493 277.101 92.0493 cv
277.747 92.0493 278.357 92.9189 278.357 94.2104 cv
278.357 95.5103 277.8 96.5596 277.101 96.5596 cv
cp
f
281.961 97.0259 mo
281.917 97.2231 281.754 97.5635 281.297 97.7163 cv
281.217 97.7432 281.055 97.7969 281.055 97.9941 cv
281.055 98.1284 281.19 98.29 281.36 98.29 cv
281.647 98.29 282.571 97.8149 282.571 96.8105 cv
282.571 96.2905 282.239 95.9048 281.818 95.9048 cv
281.468 95.9048 281.244 96.1738 281.244 96.4697 cv
281.244 96.8013 281.486 97.0435 281.818 97.0435 cv
281.88 97.0435 281.943 97.0347 281.961 97.0259 cv
cp
f
293.142 94.3091 mo
293.142 92.6411 292.228 91.4663 291.223 91.4663 cv
290.21 91.4663 289.304 92.668 289.304 94.2998 cv
289.304 95.9678 290.219 97.1421 291.223 97.1421 cv
292.237 97.1421 293.142 95.9409 293.142 94.3091 cv
cp
291.223 96.5596 mo
290.524 96.5596 289.968 95.5015 289.968 94.2104 cv
289.968 92.9102 290.578 92.0493 291.223 92.0493 cv
291.869 92.0493 292.479 92.9189 292.479 94.2104 cv
292.479 95.5103 291.922 96.5596 291.223 96.5596 cv
cp
f
296.326 91.1978 mo
296.326 90.9019 296.253 90.8208 295.949 90.8208 cv
294.317 90.8208 li
294.191 90.8208 293.94 90.8208 293.94 91.1079 cv
293.94 91.4038 294.182 91.4038 294.317 91.4038 cv
295.662 91.4038 li
295.662 97.2051 li
294.317 97.2051 li
294.191 97.2051 293.94 97.2051 293.94 97.4917 cv
293.94 97.7876 294.182 97.7876 294.317 97.7876 cv
295.949 97.7876 li
296.245 97.7876 296.326 97.7163 296.326 97.4111 cv
296.326 91.1978 li
cp
f
300.791 97.0259 mo
300.746 97.2231 300.584 97.5635 300.127 97.7163 cv
300.046 97.7432 299.885 97.7969 299.885 97.9941 cv
299.885 98.1284 300.019 98.29 300.19 98.29 cv
300.477 98.29 301.4 97.8149 301.4 96.8105 cv
301.4 96.2905 301.069 95.9048 300.647 95.9048 cv
300.297 95.9048 300.073 96.1738 300.073 96.4697 cv
300.073 96.8013 300.315 97.0435 300.647 97.0435 cv
300.709 97.0435 300.773 97.0347 300.791 97.0259 cv
cp
f
161.031 102.363 mo
161.166 102.363 161.408 102.363 161.408 102.067 cv
161.408 101.78 161.157 101.78 161.031 101.78 cv
159.399 101.78 li
159.104 101.78 159.023 101.852 159.023 102.157 cv
159.023 108.37 li
159.023 108.666 159.095 108.747 159.399 108.747 cv
161.031 108.747 li
161.166 108.747 161.408 108.747 161.408 108.451 cv
161.408 108.164 161.157 108.164 161.031 108.164 cv
159.686 108.164 li
159.686 102.363 li
161.031 102.363 li
cp
f
166.043 105.268 mo
166.043 103.6 165.128 102.425 164.125 102.425 cv
163.112 102.425 162.206 103.627 162.206 105.259 cv
162.206 106.927 163.121 108.101 164.125 108.101 cv
165.138 108.101 166.043 106.9 166.043 105.268 cv
cp
164.125 107.519 mo
163.425 107.519 162.87 106.46 162.87 105.169 cv
162.87 103.869 163.479 103.008 164.125 103.008 cv
164.77 103.008 165.38 103.878 165.38 105.169 cv
165.38 106.469 164.824 107.519 164.125 107.519 cv
cp
f
168.985 107.985 mo
168.94 108.182 168.778 108.522 168.321 108.675 cv
168.24 108.702 168.079 108.756 168.079 108.953 cv
168.079 109.087 168.213 109.249 168.383 109.249 cv
168.67 109.249 169.594 108.774 169.594 107.77 cv
169.594 107.25 169.262 106.864 168.841 106.864 cv
168.492 106.864 168.267 107.133 168.267 107.429 cv
168.267 107.76 168.509 108.002 168.841 108.002 cv
168.904 108.002 168.966 107.994 168.985 107.985 cv
cp
f
180.166 105.268 mo
180.166 103.6 179.25 102.425 178.247 102.425 cv
177.234 102.425 176.328 103.627 176.328 105.259 cv
176.328 106.927 177.243 108.101 178.247 108.101 cv
179.26 108.101 180.166 106.9 180.166 105.268 cv
cp
178.247 107.519 mo
177.547 107.519 176.992 106.46 176.992 105.169 cv
176.992 103.869 177.601 103.008 178.247 103.008 cv
178.892 103.008 179.502 103.878 179.502 105.169 cv
179.502 106.469 178.946 107.519 178.247 107.519 cv
cp
f
183.107 107.985 mo
183.062 108.182 182.9 108.522 182.443 108.675 cv
182.363 108.702 182.201 108.756 182.201 108.953 cv
182.201 109.087 182.335 109.249 182.505 109.249 cv
182.792 109.249 183.716 108.774 183.716 107.77 cv
183.716 107.25 183.384 106.864 182.963 106.864 cv
182.614 106.864 182.389 107.133 182.389 107.429 cv
182.389 107.76 182.631 108.002 182.963 108.002 cv
183.026 108.002 183.088 107.994 183.107 107.985 cv
cp
f
194.288 105.268 mo
194.288 103.6 193.373 102.425 192.369 102.425 cv
191.356 102.425 190.45 103.627 190.45 105.259 cv
190.45 106.927 191.365 108.101 192.369 108.101 cv
193.382 108.101 194.288 106.9 194.288 105.268 cv
cp
192.369 107.519 mo
191.669 107.519 191.114 106.46 191.114 105.169 cv
191.114 103.869 191.723 103.008 192.369 103.008 cv
193.014 103.008 193.625 103.878 193.625 105.169 cv
193.625 106.469 193.068 107.519 192.369 107.519 cv
cp
f
197.229 107.985 mo
197.184 108.182 197.022 108.522 196.565 108.675 cv
196.484 108.702 196.323 108.756 196.323 108.953 cv
196.323 109.087 196.458 109.249 196.627 109.249 cv
196.915 109.249 197.838 108.774 197.838 107.77 cv
197.838 107.25 197.506 106.864 197.085 106.864 cv
196.736 106.864 196.511 107.133 196.511 107.429 cv
196.511 107.76 196.753 108.002 197.085 108.002 cv
197.148 108.002 197.21 107.994 197.229 107.985 cv
cp
f
208.41 105.268 mo
208.41 103.6 207.496 102.425 206.491 102.425 cv
205.478 102.425 204.572 103.627 204.572 105.259 cv
204.572 106.927 205.487 108.101 206.491 108.101 cv
207.504 108.101 208.41 106.9 208.41 105.268 cv
cp
206.491 107.519 mo
205.792 107.519 205.236 106.46 205.236 105.169 cv
205.236 103.869 205.845 103.008 206.491 103.008 cv
207.136 103.008 207.747 103.878 207.747 105.169 cv
207.747 106.469 207.19 107.519 206.491 107.519 cv
cp
f
211.351 107.985 mo
211.306 108.182 211.144 108.522 210.687 108.675 cv
210.607 108.702 210.445 108.756 210.445 108.953 cv
210.445 109.087 210.58 109.249 210.75 109.249 cv
211.037 109.249 211.96 108.774 211.96 107.77 cv
211.96 107.25 211.628 106.864 211.208 106.864 cv
210.858 106.864 210.633 107.133 210.633 107.429 cv
210.633 107.76 210.875 108.002 211.208 108.002 cv
211.27 108.002 211.333 107.994 211.351 107.985 cv
cp
f
222.532 105.268 mo
222.532 103.6 221.617 102.425 220.613 102.425 cv
219.6 102.425 218.694 103.627 218.694 105.259 cv
218.694 106.927 219.609 108.101 220.613 108.101 cv
221.626 108.101 222.532 106.9 222.532 105.268 cv
cp
220.613 107.519 mo
219.914 107.519 219.358 106.46 219.358 105.169 cv
219.358 103.869 219.967 103.008 220.613 103.008 cv
221.258 103.008 221.869 103.878 221.869 105.169 cv
221.869 106.469 221.312 107.519 220.613 107.519 cv
cp
f
225.473 107.985 mo
225.428 108.182 225.266 108.522 224.809 108.675 cv
224.729 108.702 224.567 108.756 224.567 108.953 cv
224.567 109.087 224.702 109.249 224.872 109.249 cv
225.159 109.249 226.083 108.774 226.083 107.77 cv
226.083 107.25 225.75 106.864 225.33 106.864 cv
224.98 106.864 224.755 107.133 224.755 107.429 cv
224.755 107.76 224.998 108.002 225.33 108.002 cv
225.392 108.002 225.455 107.994 225.473 107.985 cv
cp
f
236.654 105.268 mo
236.654 103.6 235.74 102.425 234.735 102.425 cv
233.722 102.425 232.816 103.627 232.816 105.259 cv
232.816 106.927 233.731 108.101 234.735 108.101 cv
235.749 108.101 236.654 106.9 236.654 105.268 cv
cp
234.735 107.519 mo
234.036 107.519 233.48 106.46 233.48 105.169 cv
233.48 103.869 234.089 103.008 234.735 103.008 cv
235.38 103.008 235.991 103.878 235.991 105.169 cv
235.991 106.469 235.434 107.519 234.735 107.519 cv
cp
f
239.595 107.985 mo
239.55 108.182 239.388 108.522 238.931 108.675 cv
238.851 108.702 238.689 108.756 238.689 108.953 cv
238.689 109.087 238.824 109.249 238.994 109.249 cv
239.281 109.249 240.205 108.774 240.205 107.77 cv
240.205 107.25 239.873 106.864 239.452 106.864 cv
239.102 106.864 238.877 107.133 238.877 107.429 cv
238.877 107.76 239.12 108.002 239.452 108.002 cv
239.514 108.002 239.577 107.994 239.595 107.985 cv
cp
f
250.776 105.268 mo
250.776 103.6 249.862 102.425 248.857 102.425 cv
247.844 102.425 246.938 103.627 246.938 105.259 cv
246.938 106.927 247.853 108.101 248.857 108.101 cv
249.871 108.101 250.776 106.9 250.776 105.268 cv
cp
248.857 107.519 mo
248.158 107.519 247.602 106.46 247.602 105.169 cv
247.602 103.869 248.211 103.008 248.857 103.008 cv
249.502 103.008 250.113 103.878 250.113 105.169 cv
250.113 106.469 249.556 107.519 248.857 107.519 cv
cp
f
253.717 107.985 mo
253.672 108.182 253.51 108.522 253.053 108.675 cv
252.973 108.702 252.811 108.756 252.811 108.953 cv
252.811 109.087 252.946 109.249 253.116 109.249 cv
253.403 109.249 254.327 108.774 254.327 107.77 cv
254.327 107.25 253.995 106.864 253.574 106.864 cv
253.224 106.864 253 107.133 253 107.429 cv
253 107.76 253.242 108.002 253.574 108.002 cv
253.636 108.002 253.699 107.994 253.717 107.985 cv
cp
f
264.898 105.268 mo
264.898 103.6 263.984 102.425 262.979 102.425 cv
261.966 102.425 261.06 103.627 261.06 105.259 cv
261.06 106.927 261.975 108.101 262.979 108.101 cv
263.993 108.101 264.898 106.9 264.898 105.268 cv
cp
262.979 107.519 mo
262.28 107.519 261.724 106.46 261.724 105.169 cv
261.724 103.869 262.333 103.008 262.979 103.008 cv
263.625 103.008 264.235 103.878 264.235 105.169 cv
264.235 106.469 263.678 107.519 262.979 107.519 cv
cp
f
267.839 107.985 mo
267.794 108.182 267.632 108.522 267.175 108.675 cv
267.095 108.702 266.933 108.756 266.933 108.953 cv
266.933 109.087 267.068 109.249 267.238 109.249 cv
267.525 109.249 268.449 108.774 268.449 107.77 cv
268.449 107.25 268.117 106.864 267.696 106.864 cv
267.346 106.864 267.122 107.133 267.122 107.429 cv
267.122 107.76 267.364 108.002 267.696 108.002 cv
267.758 108.002 267.821 107.994 267.839 107.985 cv
cp
f
279.02 105.268 mo
279.02 103.6 278.106 102.425 277.101 102.425 cv
276.088 102.425 275.182 103.627 275.182 105.259 cv
275.182 106.927 276.097 108.101 277.101 108.101 cv
278.115 108.101 279.02 106.9 279.02 105.268 cv
cp
277.101 107.519 mo
276.402 107.519 275.846 106.46 275.846 105.169 cv
275.846 103.869 276.456 103.008 277.101 103.008 cv
277.747 103.008 278.357 103.878 278.357 105.169 cv
278.357 106.469 277.8 107.519 277.101 107.519 cv
cp
f
281.961 107.985 mo
281.917 108.182 281.754 108.522 281.297 108.675 cv
281.217 108.702 281.055 108.756 281.055 108.953 cv
281.055 109.087 281.19 109.249 281.36 109.249 cv
281.647 109.249 282.571 108.774 282.571 107.77 cv
282.571 107.25 282.239 106.864 281.818 106.864 cv
281.468 106.864 281.244 107.133 281.244 107.429 cv
281.244 107.76 281.486 108.002 281.818 108.002 cv
281.88 108.002 281.943 107.994 281.961 107.985 cv
cp
f
293.142 105.268 mo
293.142 103.6 292.228 102.425 291.223 102.425 cv
290.21 102.425 289.304 103.627 289.304 105.259 cv
289.304 106.927 290.219 108.101 291.223 108.101 cv
292.237 108.101 293.142 106.9 293.142 105.268 cv
cp
291.223 107.519 mo
290.524 107.519 289.968 106.46 289.968 105.169 cv
289.968 103.869 290.578 103.008 291.223 103.008 cv
291.869 103.008 292.479 103.878 292.479 105.169 cv
292.479 106.469 291.922 107.519 291.223 107.519 cv
cp
f
296.326 102.157 mo
296.326 101.861 296.253 101.78 295.949 101.78 cv
294.317 101.78 li
294.191 101.78 293.94 101.78 293.94 102.067 cv
293.94 102.363 294.182 102.363 294.317 102.363 cv
295.662 102.363 li
295.662 108.164 li
294.317 108.164 li
294.191 108.164 293.94 108.164 293.94 108.451 cv
293.94 108.747 294.182 108.747 294.317 108.747 cv
295.949 108.747 li
296.245 108.747 296.326 108.675 296.326 108.37 cv
296.326 102.157 li
cp
f
305.74 102.157 mo
305.74 101.861 305.668 101.78 305.364 101.78 cv
303.732 101.78 li
303.606 101.78 303.355 101.78 303.355 102.067 cv
303.355 102.363 303.597 102.363 303.732 102.363 cv
305.077 102.363 li
305.077 108.164 li
303.732 108.164 li
303.606 108.164 303.355 108.164 303.355 108.451 cv
303.355 108.747 303.597 108.747 303.732 108.747 cv
305.364 108.747 li
305.66 108.747 305.74 108.675 305.74 108.37 cv
305.74 102.157 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (009x002.eps)%%CreationDate: 27/05/15 10:03 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6G?\fRdlr)l!8dfVbehN=X<?Z0bumorl4sC$kBZ4gj*^RLeTp7FR.iQ&>\DA?#dnu$Ff;p`]=P"(TAOJ`1i"2X\'<KR(UL-8%B2)+D)MX`hF=i^&msLYV]DaVj:"NW@=AW!2;EG'6enju9>0nig8+2^IY<QCeB()PEHEDD'V,jAAkq6R,)qEQd9R^L'I&_QNlBPE5%X4kasC-_lpW]b4uHo,S.5@6):c=0gu>p/H/q"9P_orYrq`SUuI\,"bQWRXd@VY/[2(OFkj#PJi1ITGq1:n\J&'c!ZhGdB%>##XW7%ds%__[uYF1;sf"?RL_3=AZ+)XWcgSRlO*L7;RNUnC?4&nrN"bQp?K.NFN#euW2TJiI&ADj-#kEZ64[$GCH@QoAec!(<<)9Zrh%0r%:;'i3G=W*YFF%RAs&4\"2\^snOsd.lNI'c^q9_R+dt-SC-9>tnl4([j^L(\She3Hq#3(gl33RM^l93Y5Xi:n$I51%A%]BaFWdiV^%V"K8SEP('iDdD@#/ng8BYUmuA\r)tWTk^aiADr$_,41XqFbB9c`@&bK14uYF%ib2g$0nkWcH"[0F4!8n9[]3\SWB6'8R'A!j9&JY%i(3m[m!ho><:sS$hPB7'U/a5gq'\kon;K%\In.r<XF?gc;`,q<3*?J$AeU"hZWult;4ADWLAL#Hg!.9Y+CGQQVsEhd=n([en6%4q%Wij6H?&,>h%Sq5<4KVT@D=X!(5q:B=(48FubCW]Z<N32b>o1r!/u3JmO;[g$WE^6;_)M.B<2C5'.[Ar:;@/qZ8s#oJJZ"cjA\m,d%$9YLka?-39UqEKcKHkaLDmJOeOtufc<)=t;KN(bq<`APtC':/j#&4:5:iFntjB\\tI)7P8&UZo?Un('%:a>agHGa*_6CiWSBhcGd%;F/"S'@Ki05\'`p,q!P'>*60)I$-E[bt7.kfh'j&G:5K;,F3rZK2bZ3pk5/.&!C+[B;ET+0;O3rYoY6o6JdFm_'f/4g6)Ai:Ju5+%^aGq0qS=QD73X%R>mZ#=aCG9CcK'cR)(?YAF\"sTNO9.n3@R+US<Ss$,rr=2+t;//8-?80OpSOK[n3^D;lCdc67O2::d<ATjB_P6%1f1eXSk1iX%V[r?JOh_`@4!Kug7[Lp;MZkX>d-C<m7p8D>+P./m04kL4i6JRaptBfGEP%5T0+M$8BD/nM):D[-Z)4kW8N.nIKeHI%4./2uX$@G9-R&@T\s_=]q1H/1$o+Q9?=p;jq>j4,=q][-Xhi0&b00RCI*%kXWo/BrQY8gQrmN^p7/SA2?iYh/i\1+oadXWNLqi#C%D3Nl:0DXcjjL=/'h@BLnYsFt;^Z=;7-M]7mP(/mI\P+F20DW)b7=L00jIa<h&Ub.;#G7f!a`$m2r'g;-N07UMb$').WK^-,RdaB3%_dE$FrNjlb]3Hd8-@D0[6I1<K1#Qp=%<D)iK24>F3M[@<NptXQU\F$%Yj[6(P`7dsrS<ar-Dc8-N&N?u09tOCIac($G!q4nC6JKs%bF,r?Q)VTDni$Bqa*1UtD3rohdN\7+W"\u\^,b&uU%(bJf*J91,Q:$5nSccaT"_"GGe]0L`G^OG/^Zpi2Yo(Qg\'\YrQjTV:e<0n%Eg".ED(]?"IG^4&a%7j8\]Bb['Clea3P[^[Q@b90]!A\Uo&:HVJ9\rF4,0CQ\Srk+/gM1g(@QS>jH4lAL0MH_iI\OQ-2i$;/JX#V%YjVX;Zoor+(Mu%us3VJ;9,IH5,VQ/hg4\M)o]&#(%A?ca2#8$%:$%*Q,7KED"kTYgPU3+sP+!pT!R9ZAgS>k-jd"#O(6j";L;o/`%WqRJ)T:?^](T;Pfc3?l"hoc(D?Hl/9*qmPD?$b7`d)^B%d;EJO+RR0@$@5p@RXLOOYj[`mWC3W;'&Nj&i"nb;/0e->'5M&n@S'!d%UhkoIPOt"4m2:HWDb(]O*?V4\N#F]CrsDIfhIcW<UR+o,Q_d-",*2!ZkjI!S9[9KGqWmPVM%Eo_0,![1kJ)S_K?j/;g$#OoI$<6C%B>bQ*I(D9sIP\[2P$+#<T@,IOe&Iot^0sSB:rC%&WJ-J(8<e&jmdpJ2[rHc88<6hM3RpLOUjm6DX3aNZmRDorfVI2\9>A"lEXqJ7%p.LNG%fZ0f>f`0eWb[c0QD=cL6Ec4np/Y">_gG:H,4Zb!7um'"kSZ9Mc/bBcID<+*VGh&SNQ:c#PG`u.-0]nE$.UrL7qhF7ho1N^%NAb%:ZeY?MXT3Am?LkC-$'>WSs)NaT_W1di%U!MB>A%O<67UZI<[sdJ'>`NAj-VZ,Vs\Q50(FtQ@I#GanFdV?2LZp70^[C/2J]_Y%.P(<V)j=\>/F.")6F6-#CFh[(X$i2e6H<ECpK^*eq)gN#088X>LWjdACQSIB>#G.@WEf9^F!dN,14?6jI6(krnW+T>rSKtSP$;Au%B"@TDY4@PVIBKXKH7c/h8C%X6ld9K]Pipa9YKHXPEFZPji@ha=_-b4opkW9]Z+$K+`NQW#g]!I=ABUgraAHluD(jX+qOK9oNkg%l%AU;/Kn3<$]6^%%;BaW>,64+:mMLSTk^.W6V`a9dXR<F*EVD>jH=\3JPh#4gP9<+eKe*H-!$X)[c$8B<h>&6u)fl+abjr2t_Y-`f<%ASY$4\h!]jO>TW/;4BY%]\Z^K]_u_c;U&lORqACj,[1J:eka,s=B\V*T0-;f9^HPhhEi]U^(]lYO5J(F-R-r9>Em)d`[KfU+uW+q%"t"t5T'@mJq*ik5X;Ak1GRhr/NG24?(@dsiH'j>bE9j#B\QoNqR9VHOiAJJn.l<:Z[0#rKK2F?!3Lb!q?0@Kd^@W>M14^,?&(>IW%$FGB^40Z-p8Hn@RV+nG)EnJOWCI\l;X^l969-MQJV6M:Vej<G>Hu/P\a/'N9A52`!:q?QpCNeV#MQNgFNo!VkW*.1Y:NX:sMIGg&%n+WL;AgNMhl+to9BZ5ICokk-)ZL/Fm:sU%q.m0*lmTjZaM[<,mC8o;8o39HXpdC3^V:HHmY&p)@`(?lWBYBO@r&]@J<q$!oM;nj?%rH-OUWBZj0N0--;:Rn>H`XdC&h.chpGFQ?ORH]]7l_U19mo3XkZL%,)TDE>A-9Fp.inN/48$?6tI^E`s1TE:3SU-Sa6ndSmlu2IL%jneFHk=`H_W*@N]lA\hKb*Gu+c!'h@g1_pIIF>&PX.:f=o:-=Tr^'D\W/X4%JsIV0HDfLe%>J6+8ULqU&kJ']0WOj'Z^Zr#Ze"5`%PFp]`'3]F*B<U7%e&cKNI_,"$o2_p.Zh6NA\Pk8\6Mc0:Nt_FXo=.@1.*.5ln8m=Io_ru<;!M^(ki'9:pJSEHpiu+(g[?5f@15Jo%F&(e!5D&S&f1W17dJX^K,Z.=:S_hD&UOMo\[o`Teb7.Y8pIDQE";,E.;;0T&)k8XhBCFAo*Tu+&YMbXX4@A]HBjb)a/hFpk?^EkU%J&C.#NI!N^gi'Y#e&4JVMj`fkV#@;XNS_QH[WkdMWb:KN`NtW/2Q@*YU1B<@$?c+?7,L`qbk5m=_]02Pm.K9"`ub*J#Ef"L<L)oZ%p?k5gee%ZR1]neNf<n;7W4f$$[YX^Q^USrq8tp]iPru$(l:CDa.8F2);6HKeVJ[a=!.+4)3SEIe=C1q_i;q(rDRVkOE.UCP8l`qW%,$9rOs$b$X,9JWaF';W,HV-d"V]u"t\eBO@]L$C54+H;J9")6f*_dkSC6kd9"+0a7g3ids^*.(:C;U$,O4()^i[06cIGpu#n('R6%UcGXY\!PpNIIsNm+,u?<h]sr"*.2W_3q_bB*dbsa>sV7^lW'I?Rm$c8[=<MUdjfrGkMq&2O(F"M.sYe(m]^$pq"^'oJEU;r5@.PO%,dSMY:kVl'3fP?=i?J$%+RULRNOOG-7AA5s[aE$eq>,=/Xn,E5G!Gu(c7:-i]Z0OBCpmY7>H$b(A<ca5FgGofkRPbul_dSp<Jefa%"4aI+X(PdI<5l0e86iek4?,Yb`'$"Ac;LF;ZTA-\X3j<A(>tt0Wtt^4YA3*Q-?*\Tji>'Lg[o3"UXQ1T1%CRfX59o.OE:q=!-PLI%r)N-3<)FU.cL(TM$LrVY%0)g!YU%Z0^4.tS#V@lm:U`k$&c+O100_TJkWF;.Pj?("]2]\p5]?TSGAQOoGtSS7,StNJZIsYPrTX#Z%?V:ufV(uid]A:9f&F9o)@.CFBeO+B0rO5f;l7ei"*!_]0<-KUjA3`_$X-X?uf%#7W;ouEQ$:=n)EqNUVrL0j#<%IkgX;`\g5:Hba%k^n:?=Ah&?\*i)0s7nl;!d5M)YQ(43rbt<O>!JS03f_D\=4YJ@o8,os6%sE\s)/MB0HKn3@Vp@#jM.`RItuS:59I;iHX_sWYgM$-%qd3AK>52L-hWl8%n&a$q<H/D8nSaUP<qp(1?<TKK4$9JAmZBcVj9i3Sj1hC)_$^*5``b2UrP*`Y*SkrrU;BRs#C2C3>=Z*MHYHJA%[HoD3/Mj5;BMN*,XHn:nh2n#2_e*nSC$K;P9!t9bh`>o2&;f*2!iVFQkWC/t2O1;e^T-*GDDRGg/\X,t^iO5k4)'+"H`-PVH0^]f%#KHK%P?.D[?GK>ohUY)iSSXhm'Z"[2K,0ak-cK&6RQ\cm6#2lZ`iO=EO)DR,rVNhQq'6Jea0DqYm@$pmE=m3#\dWfe@d-fm9(`K<%.jf/@E66T]ecP5RNHU$#cs(:8'R3VKX*dpZZkBHE;,;@_:"O6kHG9-RN=R3%)nXd_T3dEp-^bH&4Vl8ZHM9S=I[MTjOsnJ-<[IX4%gFq=*jP'I2hJ%W@QPO[H2%*#BOd+\b`bsn9d9sh:=mpH0;:&7AoIN]oBPF9E5mY\a!_pB\$DU!'VY/DRHo10BDQhOcA1Bp(aRboP%e>Tsl2Eoin/\hYa?Ndbq<*GTcBPW++4"\t=XlbX#\>j.?i_mJ;.&#>%kjS"_Pt%h)3WAuh>PCc[6jrYPs(0Chaeg[<m9nULp^=>m%Sc)H'<1C'b7ld`I`cT0Hf4K>>OeHMVo73dYA9c8h=EM17_7X'%jjs@nUnkEZ[(9jRFp*;bRMR)$V5V"73d-b'ihVaURSI\<[f5%A%"'A7F;iiFgXV/GkcKnrEXnpSD5OmEB[6^j(gLqFC<&a=f..h)Yq9aU\d)O0u#3]>%:9mEU!I,l_`?e4.r)qZi+'G,Cg=#jqD8MKD%IWRfq[a80\g8i9/KfcU?f;,*R[ood3\+7r2-BujVb$"\NeRW0IMcP+`Y$.gZ"Q1Y#MIY?(H5=]V:gK!#(p\'K*o>1:>mTX=2R$,i%7cOi9Ld@:p1Q@u&JjuQeL.8=F?gAZU[mjh9>SCK08.jdf%M^nBd*kR;aN#q<8p8$MPf3=^YW)>Y*=I@a/4Af1bhAh=j]P&dC9Dnn%Rme6:@T50Z.d>b8.-GBH;leN%'=_lKW7CK%QA8I=CtbJ.r3tNJXF=[20J`&fP:]eZDOm;/%q+<!7hY=5_E6-D$("b`crZ6UP:"Tq%%]Nnoe_BLkCEH@YaH]HaI(=RHJmV,M'OF`9at]GISB5iMK]Zb:.>h\>Z2OCh=a4Z1la>=4hh@\?*OXlRr9S_k=aoQ,X2*k[XknE<%1D?1gPk+M5mn`B\c^,2#CRn,bFK't5<6J=&[ner)2g[d&HZkoZ29W3?Zpd\dN;K%$C*^U+p%tL]O"K3)HJNKMQ'6<)SSj!p^X84`%Zc210c"9VMDb4:@'!\EA2l<EC_Oot+6BZX.[W*`Ke+l#FH2P-WBEf5m^'(Q]m3a&C2^sO6<ch]A">GCf:XEi#"STo_+dNp=.F"p<%Lm2T#'S=Z8PT>6GgC-mAR@K$>5aukFI-77mBE@'d-RfRUdW[YpXra3B6\Y21[25;<[9X;]`5SVL!ap4`O-Hkjc2(XEGjRmEHMIQ#%74T3PnG6Mb7W]ulS%V/_kJ]Yuo-^Lpg7@+QTtVb8$*@Th2E*$YHjh,G9k(e0S\-1JROM//>4'gR)ebu+>F@s]HF_NSP"VWHOd_Ut%79WKd_oF-@i-;5Eie/9!FX2aUkUskHgXS5>gAHt.8;)&^'r-p[7;0LERMf8e>5^C=f[AnM=?ZYj?4\0(?e)SlgE[1iQj7rLpX*J<%?CEgocmFLhaL:JfIpt`CG_Vp=Y(,ig$=J0p<83,A;Po@d/P+G[o5<^U(-9O31u6d8At3laC"eQu^EkC(GcA9Yr+9M99_Y,Xa3In0%4.nG!?8JBA8XgVfj(jJ3YPm>Cr!tT27\smC?j9h0aKX&@E$O?M*8ha-QAs_f<\J?*M,F]BRioLsQ2#V4Uqd/8FpY*F,aIMN@5CoT%mY,Pba(8ARG<arQ8M/V5G7)uH1enT)d<j&P;iF9@T6/39%E4^YKYEm-f7,"S<m/5TSLo'4W8:*B0^*Z,5E6@?'gda@i*]m;Lh,4_%Ht$eP;P!TYHn\/b-q5E$d%Z]GX_,0'lJC93U$<7:WKEa;(qkh?os+/Qp)5c5]3U>,%EU#6Sh<IW-nPG*+mkAgGR8mums'#I@gb]Q%ZZV3@?kBfqCGd#Q]^?NH;+o]`*+bMn@#;4o5k[q/q<FR<^(`5WKmcmk`()AX4?hee7?""Of4>n*'Bg).>V&bsds.2SEm_-H+K"3#%_a+TP8P4)kjAat^;5.k8U4<=_(dJOR5<mk8LhM6,$\?[SNCM]L*2c/37I'Fqr@#Ljb+uM0$Gg%?d-r0*!V<T];$X403o)hR<$t@'%pKB3]i?LpllKdDZjXD<$dJ`@<;N]JNAu]C(`s%B`GZBc6BXYjFA+l[SpZZ)6i^ZMS0`9f(cd#&*T4K-JZPndo333$Y5=GA."1?7*%[l]q._CHgf]HJuUAgB2;E58&VMEmLW!/QW@ddF8JQKoZPOR(]%q/"BZ?+q#<inWMjgtI*NLMrWdr+f0m%t=%epq`--G2Ct)s)tk9%GK*E[Wo`-\bpn4Cc)mL>n$s<aB-k#`S3"pUF*"CSbIO%9>;nM@rdc+Rs"<BpIMU7Mo7trZgk'RF.E.RAC!>GXQ"GI_?*/I0$<R3`%erHA(oh@r#XBY#VG'W&Wd^$&uV'_c`4&>NI-K"'hY.SSp[u^76pYG8;Za5$ZW3gH%bH9(gX\um8gmhGH2HF/7faYPb\`a_*<=Q>Q%WEc?2jQ8*;GB4/;Js2[N/Y#,/*2%01k+?C#DW]ucOdkTPIR)FqjJj*hVb5>r46;u(`G&VLo8QEb;RU:XXP=Yg=Z9R@,P$i.GgJmu%-mJrJT=-rj'XMjf]e^#lJb(\,\t,<)NER`RSaB*Wqmh!$6%nW[;Ob<JbLnLjY<*7Nj[1GpVg,/>dCXJ/`gF1oMdB>%;]\S*+"jY#%@%,47fUBSIcV>2'kK^thmim?tl,>]c/neZe;=A_".lF?04,06^p^CfH4>tl`RV9+HR!*qM$PUuB';tSl.HqY*X\r$IQ6Vc#itK_d%D`=2cEHA<_c8U6,1!SdkA!QasrqPOC1p!k&p3>mGP3LKQJT2OW]GI.9=)AJ8c6,[g2"9._Si;!pkXD6]kgdY/<QarEC<G/+`jre=%^e>?M?FBu85iko<U%<7!Jn9BXaE6so]VrLY6^^+jS0(0T[>VfGVD-ImhT$E).Y;>XENU8+oYc28Y29cP_jGVF<c?JAVO9PUCVJ+g%D:Z26l3b4NUJtL[.$WsujisAVrR-_DQn"AVLC.W#3n[kACHVXM4=ioUXX`)sc^3Ta\!;rPqQt\2@nQDrV`-fS7dGB,0^Steg6&X\%:RH%UIo\[*DjQ^kHU.h4ZN6pbobL#3-BHg5D1>h%mV]';9W`=3ZW;@1@TleBB-1A#;oFBoh>LYbs3ith%:sjo1o3\th63I88d*VT%"m,)bAdiYcXm>s]rTNZmAic1@j](h'P3LZs0<0F(;rC!qDC_(NmH&;a#C?BDZG*sacEt8D(<Q4>BmZq:a8OAr*\1<-qrMdoLT=WT%O1u_W6CC"WJ+!0#@P3o4T,Y+;M-tYu-kG.R69*Gh5OGXaf?lsR54'sFSK(ea:B#&^(W#b+6J;51g'_KW*%d-2efP[9&C\U:bS6%G%67`!sfh[jsMa$/'c-5Q@FVZd`VH0U=]JViKSnAiuJE_GhUj;h.S]O[-HV`g\m7PF&$G3F^(!<nm2Wq,T%Lr%dK^%WY]'E@Lo:><g%C(?UH0N1pe=Y&klYe$-H5,NBo4(B%7\u+mKGaOrgo53OO))Kej(/+O2VA#WuX"R1TX8)#7fr2BIr9i\EqUbYO\4N)@r[R]3GH=eo%4t"6P^%u:8Af'UT`T1NE;*=S9^%nLR>t-u*LUl#4fMegGOm4Mo7_F`W?uiE7Vbd?BD;S:8;4gt$]:Y,`C%Hc>3g5VPDP-8JhFBbP%[+Wpkkbmn"a!pQ.f4*>+L,O>S)Ys*C>]WVtIen*_HR\;1DD>r)GjP*7-fSuUB6%Y\U._*WT)*VYH!edD/H)8<eZhRCe!IbS->TlJ%kEk9j2TlMSHBit/k+\L)QPW`Adm/gSk9')JaLD3A:>.dl:HpM?c!OmTBo@Cf<`U<;hF?&o[:D`jh:%>5lc?!-c'PbhkSBZ3:%$la%7R#Y^3..\q52F]=`mj2fgW4(B1Q)i`RledDat0Ubiq/E&l.l*<mM^LW.P1Ho\T@b_4hD="*+O/8@Z=*;_k+$eXrkh_dF(]l)3u%M%9/)-h\grWVRCkAW4IIos1T`S:/)O6B@F)VQ/)NSSn500h,r]0p/]#IB;K_C1bf8mVOD#KRYBme%oO_`0Rp%gTTVI(,QUck^E?-19%pI,iZBPAfeWHdV`VpI3iq?M*t>4*Mn^R$sqn`%U3b7)g9@p?1m=n!hTRH`M4p@^"gWAQkgd;Ia]j1\n/_sM:d;`"XU;'VJYQ/>)E%@8&+V@)..!X",m+a\7]#$&PX&[!<uQX\DQN$`;bMp\LjGmd%Rk?N$Jj\mnFC)]kk42j$d2o<)b89^-@5Y8qjnF^G6gg>Oc<l-2S;%9ue_h__^_-l\a:(O\B3Nn/fks3EHJrMUu=)mD2b4"617j,ZC(kS9t+>mP=M2)sr&1fdbh/^>`(SFH8Xnc,=_Tq"Nh"os(T,,#Xlu%<:6^!fL0krhjBTY;?FASdpHEs%oWFmT+4mSW*.EsWD43^(-feTkJbJVHb+AqQho?@Kc5*A4gWq0lpm/RWk1(W#FAlLh7bBa[8l#a%c8o2"8Hi5Pb0uFI_\Qg6-d[g'-k3318t.*r=N[krgFU(jbBa),l<ROhPLhNb?3W%:Ecn#Kel\%f:=.<Y=Np`fZIU1?I\3>%(LA=^%8knMbH"G=GkOAe5jAf*?52G&!,%^>P:es;S89>C*[Ac#p='09dL.^7bg;D8!^1d0.-AN+8FJD9@9)]`\%3V"3IeY.ms3B!V27Wt4%H2V>"lN\*\MobmMQ$Bk]K`5c_,W)d2BN?h!#\KsZDZ6U\AX5g<QPTA+5I=s<hg`\UHR=0aUT)Z.JB77i+#T@mH0al-fN;J11F#j0%*VWEV*k/dfWt3o'>PG`M\H,QVCaJK]h+=\q,22I)M`5QBC$)neaTlZEB'BasmEL5!Q*T*R7jYV*Ki[T\LJ$DBrDZKu]0&<:DeS@$%mJTU)pM!#mb&_93<Bhp+dbYK?q\J=7fc%FgYS=a9b.p=,eM,<*PGi`XjbRfCDl_EFWLY:@N+a!b65rCNCma4/CMnjJ%[U^B&.3>c%eX%#[_kbK"Mn@[#OC,,CTak9@qo)i`m.r*<-cad5$[!LSmV#niDF6ZCOCk$>g5kSset);]\l0HNK<e@.HRjMJ:sSG&(GD"P1/sUs%G%eEe[pQ^TPsgdoT!'[;hF0.Q$]F84\R:cR[Nii&9KlAMKZj"cduBk/7*ZYF=R#'W1n2&A`=>T@rf-4!D.o%PmgRc+0Vt@(e[E/;%g-7-"M!0_I2l9Eb[CqA?*M:d.6ki5$?'%BA:[*,UV<U9h_DgWg9J#2dr1<n'`_Yehs.Qi&RNC6Jq&2^>U_+J"4)9jKZ96#2d:5OS%Fq_WHl*&&=k&pX1fMcEn/LG8?!EuSlEC@#mJV@lXeZXYe;66DCnP2;A_:&ZQ[X%hC9=qD77qHUUCh0L"]`+KnYtucgrmNlA2`IOT%f$sYN[&k!BRS7&B]G[1YZ?93[HruEYa^S!W4uM+e<XK-:!A:<!l'HYB"c:V.R=*^Hn]i``.gVPKlm0L*[kaJ3(cC2o^iY"f',@bf%$X4R59hf'W4r$(m&)ES(ABm[%G!Y,s@P&jS#/o%7cus(LR)Z'J.1^q6oi1JTjY!-LoW]Ht0%,!mH9\e=Gj+6&ln"<Y`@HJpIM@=I%I\-3rWo6qWN?6s;Ss_q/pu7LkW4Dhu?.]_$8l<>s5-Y@94a$(a]:IfM&R:OK'd&V<GC="]'``KWm35P?Kg7au(pG94)TrM.IDYq6%H6L#cLNr#,c!t%:Y`L!,*?3RqYU<,M@aDnqT%&[UY<D@P4jl[V1!2scD/,H<&^A&q?4D[Hleshp`gXL5iuOG.moYuki4qcNEq$1?%=<U8!pB%,T!-Y!<4kLUcnMNt\.$iL>8[^gT.R<=qn@9jPNg6>],ZWd-1jGqHlT`=;9V+p&3CmXR9V+lFMlCe4?;e/diid`WBuD^H%m$:KNTtY\Y:F/Y%_D"OMZL8k@#HHKOACWI2PZhccYYaaTc@mOQp\c>o5S_FeLV-/^?`X<2]?$K?.fbVH1i8U-^R9PD\L_J751%8@%Ek8e4CfX9PhA]9A7%<_Kp]e]C$'hBL`o>6DI,VKI54`\Y%Q<&"ff7,j<;'A6.L<_:FY\Io`?p:7;SCrOXPY3,]sJE5EtQSdk1qb"%4s:1?bD"/JA+CLHVaBHrf)'lVI$'hBpBMpU(TDR-+Ilhgg,n1C@2INdjNq2[P]j5CG$XKb\-ZGB6=sDpcTT"`VYjAb"ZoCG@n(9U%a(i!Lk=e.9F[,%E$"J0_NJ8?`rB$][P%Sjf(W0oCT*69I2DU88+Z.p21F97uVq#IcfLPlu!f_q]heO,L1nT#PQ:[^pn9_>uT:#SM%q9<WfO&HHUNjloR.qlSV/8Y_c>DM1D'^Fo$]F`JJ-X[kuRWejW@%St%"AbkI?tKVLnaIuC$/teA?8JHZZ:N!DmOrWKcg"ZDDT8FF%?;iHpY:g,c97-O>qT\3S1l,%[>W`[HfqR,+5-Z^O^0IBp<H(.<-1rCW=e*3ch;O?aP5@%n1Lu48O2[*5W.&ged1F\@ifTEr58mSC%:.&:iqHEDp?]AZH:U9POKon-VAi..m]<olEj$_u-]Dq\T5i88AbN+F#%3_A=YqXu^L@[ts^Q0>QE'?Y8mie%%Z&l0`q\p"5^Z/]=%(^l2^.X!Xr$LST1XWJoUka0B<E,dq8+-pl`#d6Db;L@]IFG\e;&T[sj6e>c!p9'P,U\hX+R4d`j89A4:6?f0XVCe)@ilR*Oe<>S?%PXg"u7EfODHX7K:8OTk\(DeQt7"g394"PrL>,e_;(mmpLkT]c/8CKK#CHp4\UM2jB]]G%-"b7=p+7R,g.&6CBL!5^(Dpn".5ZX;c%5-_JE0ENCM($nonjJ]`mDdP])RH]p:,1jmpZ-Kg"M+CVlc*o(WVrK9.Xr,Jcc,4/Wb(=+Fa3/V_EXU-!:ZN(PKamtm,3QD_`mF8D%%#pptVZ_r$L+YZA/s@AO$seC_-\@@lbMcspiZmY0>&Y01F9HAV&Ti,+0m!h0HitIL(*#Ai/sIfGTF6Yn*$g7k5(\fch(`^S?$ldG%Lj^3pL+YZA%eSC%@d*_>b3KQY^0fQC$sdg#PMMA+Kd8,\k[^]V["=UqCsd5f^a7jj`D`_&,/s@RAa%Vt<Q%k5)sd,1D.<)),aSE#%ho'\qRf2*.`E:H6'aAJ%T8>#\hG.6'P8o=d2!Yb+&3mLdQg+9A0YGF2@<d:eQ_T\@0L%,gqB_sX/1pKo5AC-D)!pCm>X^MrEfl6n%SWQ2VSJEZrEYVZSaIkPZ7<6HhQEatOh=CGCpMKT@/+NFA>%`qA=-,tJZ/=!!_JHm8^FMiGXQ[pGps?ip+eFdJ"hXHf$5+5?38Yds%<5mnHMD92O4rPd%'gu5[A5]Lg[NZs';Qa`f?8$nC27R;jU4"E2GrhL$Xn9Bp%I_RY4k,%G=VU`?19HQWqP+P\%;33FUXo.;Z"!F4%;]*fIfoV37X.N/AB-oo_?]6BQL7G%U2=4"n"7ns478CDuLu\A()NjlPj*QWDIi7ttXeJ23`aX>R;]J<d.FS*<<0>b.(opU:9aO#Q%I<Z@R[_3I#OQg0<rp'gtB&qaQO3Ed<(gHd*hK5/3Kuh2tbI]83R3aFAdT9>6=%CVHnR8/?[TLsT#RN*FMk8V7^00s:3pf=)c_R,T%ZIf;aqPFCBkSPB`/]UY]8BBe3/>3Kug7nuscXGIlr5NqM[b,r]nJZSgcFVtm]uVafe3b>\T8%XGM*DtKmccn:jnphXaZ]9lUg<LY%@37hkdMa!tg,!OO(U^E)DN:O>fW[N,O?#P*:a41JepnT=r^D43n>S(\WncoQR2I%0j(nBK8PTOUM@Yd>BH;QaE*,e<[hh&rpGF&I%Kt<3KnUG_1L_#u9V/)unjrN>I45c_>O^lAXLk&SAo%<5LKaK8lQD-p5kAXZ/>$i&5fEaQK7.$3UpDR*]Y=5<"[)dX^79X4GA1YSA%ZT"OG`iEOtrJAp(AFt_t_IOS>71+sshC(LB:_qM)#T;D]q&9)l-.M,"(7@jb0XRN*19b!MIN,%qR$cg%5g4SFZO6p#Gp/O&V1aiL%^,XWMo:Fs4/FOt*TuKfmjc_+b[>VTc+bcW'+(iskHE*cG[@ff4<Tkhil,8P%W+q7>6WX^mG9uSd+JB?1(2[=i(!7fBeI?qE=F2.&%DYe=ANU!BG]XM2smm1WS@7!KG<RQ>t&Mu5PcL7]U,42.G8Hrr#k/2`>E;cE\2b6&9jBg8*j5GO3Yed9[nSfr;/;B+=j)Gj+Lq&#2%7j?sOqM[rc0HMi/>&`!]E66gS'_--iei.iP7Z)H#eE;o%'b;,/07W8nUQ1-$T$YblLPF[:TlFnd8(PTIQ?I=?lrHWE/0V?.I3OC-%^MKb;M+ig%d_f6M\7674%4DB#,R0,qa8*pi4)HVGg_jS\`09d18L,,I1.8:7q`9WLk$ns-(Ms`LfAd`\?F)g,P5/3H8#1gsA`O3P%HNI2V/CT,rZlp2RaD=hYaZ"&F_Vo+ed+W27M[?`[dR[+8-IIG,KKuUqn3OTQ_^G-1*@9\%d!oc*)/Lc$8Dq3E^O8TRLS$`^`t:*`%o0F<2KV!H)e04?kl$TJGrg11sj7HI27gm@+UfPO-6Gl>!Le+Y.]n@:4qMRnX)GNWbrV%]a;B_B(7&3/^fI.qA+eR^<;BZj+6u(4+%d)kf^=+U%Pa'f"UAYPZV(PW;@0YEFTCSgd6*@;IQC_Rh:-sU;tN&25DS-,BqiBCp'>^20d3YX4.\oPkg\4l0S%20'bn;%o8'J=iD%.)f6E`,2[LG9VFVk9/a@)<jAg/p(7WgTel];s`1&AuSPjMXh)GSC3?O)p18l\!Z?7iTRtNjNRiJ_Ns>3[;icb))47dFQ9fKdLQiK%1p*7_=l92STZS%CGB.?OI(0[nm/q`%k3DL6G2on)<$&7ACfT8IouG5NlH.V'Yr>[_S?LU)pcA$;m8dkJA&gXf.r?&.9;Tnm5$UEn%en0P3^>ZQ;;O`k/)Cm0&CcQ\UI<1nLC[o>Y;=k()/\N2Ib3!>nWVJ`I?d?'RK&*S>,4)mNQ!.#hLbIEJHo!h#%PH;77PT=ONNh/D%E$_C\qofi=\t#`afF>!Pk-l8O!FXtP^?N.82mj4=FDcBg.k8E])B]!fIdSF*lu)7Nim,9t,4&Lrk@%';I=):mpKCOL>s0g+nCMe>%e#fCWD.tTaDr?JL^@W,YoN+;B&6pZ2r/Jkp@S#sCVd)iZUN(bpT+8BXGfLJ\Oq+#f<le7)!OqXKn.2F:B;r"+hR4korL[j0guM6X%>OalrRFH45W=Ep7X<qr]=FJ4+.Wplda13So>kNN/>hJD0N0U0N8M4gE,l>XhLT[OlVaqWGrqp3I.;g-q9JBuFI2hYg\Zi0>BR8ep%K??L>AKrma$.^f;:^M=T`"bi^pWNLr;oTNnB/q"70AH/QCP[YMWuM-pRV9::')HecL6&2>Mkpg:R5/k@?'rHdh8MCcBY(EM\l:%Q%p(^:<]jEeBBY#U/3SJ/XTrchEUZoW2+!He0A2KiiP!EOA]\";p1gO37?'p?a/t+D/h4,@.1gO37*T)2a=Yq.i(j]ZUR()JHU?TO(%l%C'h<7,er]o0#D,E8Q.h\@/S1gO4G1/`Be'29:oJ"\5/%i%eT(/#H.;]6pM/hF%sT:$uqe"tjY*AX)/T+sopW*1a$:=s3;V22!A%hdXJkdtPchOkmKD7am(1dY6SC2bZ&6=9cU/O^Y$LUh8St,uHBAK1FCEc(-Zi"3H:XV@/<Y9=S&FJ7uNu*f;tQHba;U\[j>X0&=)o%Z8kg;haHqG%iS.Y<[%L2p3fBYH&EBC!/ub*oe$53G$P(6VEML>@?n3hFA6>X==hs2&)H\"Yfk:`FC/>KlseK=eYTu=+n<:XZnZ@0%\LF^(m%E`Fm_qsQJg]j%>ik)W;!>AZCsJ[8Wk,RrS\ZgiUEbI+g*q"Gi&g$OVGP[C'`AaQn.K[>$r`SN("&J]fCbQSoa/+p)u#!a%7qp1TrEOC[XcrKKFti^CT"i5Kp.((Tjt=(/@]4)13*tSs\k='@'QqZ+J,[QB??>9k,p<,[]Dg#l+kPKqh_Yr(VU3pPGAO@>^$*bV%H'E^$?.sAYgA=6Ak4H%h2=DPm#'N8e:D$`o8NH$QmgnH6:F-lYDImGD5e9M4_`iIME?O(F5t/L9cMZ$$Ykqi]*;rC(_;03ke$hoa%of/(&h3!Ru-WL^O\p,DMA)gMeLa"f82;Z_=eUGj<ad7MU115W7Ji@orhG>W,<5-GQ]V//6BfruerQDJ.)bK+#^NW@l)>!#IFA+:3%KarCUg+m5'd8!Yhh30gUM^I+?M'EJ24nCa0i-Q-_R\MnY&@)Y2hhB!MVMR8uV+m`/]JiPQHL@?%CeAsr))?mWQE-G,i//RbnHM2s%^`WM3K#eZ+\]5lV.\mPc5a`Y27n*&iK->P_P%'V7kls@9Iig<60l8%#r#J.dc`jn@68##m-%K5J(H70ehW`/XG[]7NV0'P#&n=9H%q@7&'UV6,MiT4`\ke#eknG(.TDRcHHU1$$E)t(e=7J%UErP1,`L:]Vo*s[`P$FqU(GSgX&\/XG)]KXopYrCc5_m%H+m`=c[d3jVq%AEJrELq)Cram19b@-pt,HW+*2G5j_L1a`k32R:-PqeuKd!!D)lQMQp>prLLn&]CN@>RJCG>iC&CekhdAq$aZY@bNTq>Vg>H41Qss%c:>/>q"D\kq#Cg>Vu;b"+b"j=@!LL/&6#MBc5RAh(ce!X*Q5m70O1-.^)jAZm3]osDp8Tq=PBOp+gX#(N4)r:>HF7PkdXUXb3QEC%9Q<?l:S#RH(3A^n`q?qC+=8(4*Bc7g3A(o!9(b2!N4P(R<#FK<N\r-<q_l#&f:0i%)a5?:+6.[rs3Xfnk?Qi%k.4'+;r3=>>YBc[%j9A@++35u_`\l\/&Le<C+pH:8JjPIT\jpK9Jo3QPTe9c5^nuPln[>cE?N*nsS&N(Anp#TOXLpH8G.uCNT!QeQm1U,eGC<htBiD'B%AMWa__lhd(m(4VRmqD)fB'P5.l],?/SB.QWmlbKFV7R[R4Id+P'HMq[q0?:G,FL"rAMu%/cPiF[:M1a0eZ1W:lTRAfE3.L=UR?"\%hd6)F@a36e@G?2Z]LCYo2A6amG%*q]_f_mDac>FtXo"h4B;X;K)A/ZW1U/ma<W/&0fL(o_nG_uM"B0(uD]G%7UZ17(@[M%/=<>-M%0=q$<IN-,Qg$s_rqO*rOQkI.A0#.:Md7h$X/h5^aSUdX0r#6*]r0^h>qU1KA$`;EH8r=URkLmh6'^8GP/[ft0@[KQk^+oOl$[fQ5%AEYS`/>&`%_,<<hU.."Q]XpJkZu2'VDD>@P%rDYU84'&#aIL$#Ve]:SO\2<rD:6NXBg\B$rVMb5cX?kZh/of"Ti"]AY,CoF9PC?1%":)=+;/%IaX3sJ6-2;/NOXHH[]]GF:e!h%oQdSNbXXmog(%B];^IU>AF0a>_T2o3Z_QC`Yi2%1KV+"#jEmo\;?#AE$c?e$kf$H<e%\p?ejn#"_k9Sb3WeBWL"rH,B-i!L.+r/K&W,;:c8DM`Z<_"P%I%ZH=SO)9kcbPH2d>F&dF+A*BRfhQMmD'h]h%(^0[PN6c,7<'6D%&cW%c]u+_5a$<]q\43W%qDSUKg%cfL/nU^*QQ`#*$/54P4aG+a;_bugV_3?XS`JNu;[8Ika.77:Hq&c:'JO7X(>?B/Sgq/8`;'&5%O\BXf6jokPk9)gs/ad0!'XMdTTq\+N;Zm0EeksqkT+`FVjn.siia&.,6NNB(]cpTN\'2d%(4WN-@_"lp.V'=-fm(k9#50R&at,!-%Vk4_tfX^@P`=d>Hql8_.E?EkCJT0Sh`GAm?l:L$Z!)\8\@fSZjloPP.=GH;^5gO8ZmjPu=S`b+gjA]!,Bk%,VDd\XKU9>O/6G9'j%7ffKH!=V2j2f07:g@bpo/(6uhVMtUMYssb1!_aO8R'?H'*sK/L8e\:ks&)&?UZ`"Hp]iG599eLjW3(0.ng0hp0q(c2LkaU]LG.c\%h3[aE?-3t'5OsU`jm0qo2u'4srj1,RR7m?<UY%eS.:;:4.;_.L0lpu4RcLfKqRb@_^U'U<^"6%\;8HK8#!O!KGHYAdo3t&9F6\,N%@]MCM]V!X/B[2?)Fg#03fh`p(f.[,(^HUX-LPUWiM+J]N?GE]N]=?D;GDk,[S;+q!oc#0>X+,',kX_lUme)LQeSj[K/*X`r_q?Wj%hWkt"FbdMdi*O0CJ,OI1Wlb#3V2_YumTr*g*Wcp0ToqOR]m_/E05R;>Rud5`Y?uZQ7Ra/5.,:BMlBfB5TB]atpsC^r(Ne*=Id-=]%)`m+EnlEMVmc3V[a:#bDD\rV7>_MO*h6H8*?GC#f3Jr1^ikn]N"b-5nrSj@TjI;*m+n#"21o9A9^Y"!tG&!3.oo$T800E^Bs*O_(%Vh7Q<Bql"'UgrN-iZ>sTp$3Ro&bl.@:BNrPiu?o_^Q;^_PBt"DHi;rF8[sg7ot>hE\,+)1nb!^m:li6=&*pJ4h!5c+X'[42%h,6%%p$4C`D.HMpnu[@ToiTYUI`'FMe)'DWk!$N<n+DUReZZabp]cG5s$"._n+H;7i]lQY4>Nc5Hi:g?BmlPNPNlJhp]WN=f6RSoqSh@W%Q`td1*t06<X.OKTnPJuVolY#u_"[^$_@_4n=bGVPf8hd>p--4LKAl'sI`)"eZ$ZEnbh:L>L3fj.IBR"HZdX]Ef.Z!`jh6jnn9b,N%_T0Su.qB>5k[)%!ANTE%*r]K\pgq&ZQ%RrZ(Y3%E4X'^4f.Z6sEl`V+;L&c_IBR!c@d(AQO)l30?9d;OTsskiVp,`pY?uZBCaNl$%S+9n#p`1<Q`J1tUcW`$:EH9ttN:1)fps"MGdt(ESlPG&O+$$fCpj;sAOhq30ae!bWB;H;0#)CsS_1BPo?DKU"FERIDE2"PR7IOY?%a8=dXM'7G.5'\>h,&CA^.r@l@dO?,H2=2F'SdR-t0M:lFDXgIcnuP7j\t+l4IF"TqAM5udG;Q!-Y<Qle"QHD$'8NX#"_G95/&'lJ%%DDAI=$\FhG]8.<bYBg=btMu'D^mhe7iULG5FY^A^09"5\**DjBBa&Eo'lGOeGT<Y\[0P4n`h)pXpb,\:<kuS2P)j'5;1T&B8>'g%qg&.]r4\](s.6aSQnca5`m.BS1\oA9`q"8Q^,FgFI^6`[Sb8k&Pe/t[S!q^%\#oSs]A;;2TD.k;UNKpN`*J9G4'+)\cRs9m\]=B5%p@`np\#`B-/!\BX9r7FXF\g]!-;Q^oB6Ur9Ffl9^]&Sk&9@nR%45ll`kAr/mKr]fSi/Y(H[m.i,pV$ftc+2ln]=sm#d\Y]N-[4VD%<u]ZM=e#-ngaDphXQF.SedqJk)@JJ/Wbua\e'TO`Yr-s%Y"mMC`\28V=!sH-,3kLdc$9+'Dq&ebLaCke_4eE3q6k8Grb@3_*0ZcE%W19LCQ&0erd8!m%$%(D3+&oY3P-D#cHSQHhV>Dj,=po,&<@_GQ.Gn1kfD,3dd_keC[<5HKNNF"DbBrQoDJcB4NdmX:?*3FRW7dW?%gPsDBqb2HKa3))gHnN0:[c@M7Bm&jmL1&#ja7Z9]>R/kqj/[=Lh:TKRHCEU"]\\3XW4F@9!X.o9P=>GMH.0S[-`,Ib#%*%]*a9j*%c,(1lVG:XU0kqB6M140b3:7S3SD?+"\MB4qU/C9[K79*nm'THjZDAR&.,,bRXur?VWD)dIm],kWmn]?6/*Qtkr5e8*q1C^'_84nW%J$:%[GdQf75uE*X0"jh]<9_g(ju:3p*6lX5Ms2%Dph3u_n7L2FK*&dE:u.OA=("Rd:j3[)3Ze$V<3en?DI7)(*2n^o4h(&\/ZMDT%aU//6cI2t[fj/!ks"d<udE+ZT-c(i4ki\q>4`k%1oML75f,?Y<F&lX08+I#"[@)lg%.1]s?/,[@91`E`9Q,q!R#A]Ckg!*)ETVK0%h5VH52OnbW>&C@49Rbrg'"'.a#'Jh7)J+8!lp'7?9h)s80,0PNFg85Sg:3MTH7lncqsBC7NTLt7#-PC[2u?^&R^q2)AmVZ*=MLBl%6H%86\\3ih!64u(K6`K0.MCaX(S[H5#_4(/L4$%^>qY&RW;4bOag]N!I0YLr)suTsGo(tZ-etmHb2CNt,RYH=^ub.h9jYlK<RcZH%'Rk`+hO#YIWY;3Dg*N@kNL/c20t:=q&)I^!Q!9I(j[EOgW.7+hZNDsph(FqMe`Fol\)u1/AU2Jo'+!=J^A^RQZ/fECZTXs%/B^rE%].62S61-XMSI='W[l6gU;Rq-m3i8TbfA%,oO!p!1qmFm$s3>i7f9b*lNK*mPA_]4MnBMOkIG0i7ZTbbXikobOHL#>;E,Tfpd=J&!%XI[TfV/RKQ/cF91:D)fr^7(a2*i/G-ik#,Z,7*&:IRN,k*%M^f`_IjPmjlk@mag^e[u3*hgba#!Z[f0ZLg\Hbi+CJrlgSt8%]P=M%X.TIUH*?)"2_Gi<(%>H<*,Z+n_pn(o!n\<4MS9P+%(@ML@+UYV2[N3a#Q*!.oD5T7/'V_0oT5ACBmm#QV0naJH$(,X$<U#n,%\0n%>?&h5I;&"r346l'5*b]qE_A]TN`@^>O/-h&B"(iR=oFBCE;r7sDaH=s(icoJfPe58@JY8&54$I`9YU/s\P]8^D>R;T)i8q0a#b:m%ajtmiJ'n`8Fi72=$k@/-ep:A7k31C@c+OnDiF=Z&Y>pV(c^Emi`SCCQj)/b.3-C[Zq_^8<:X=%h)u;%3e8k/9f/pO2:1laLT6m.2%Z+(K79\1pgO0-XB^e;u]fXe86oBG6Ip_p8Q<M-`af:1[:kOm#te!l?gV*EGjh)fCjj6UE)%"Y9Ri55IFVJO6GHu%TRRm>W'?s<E*%9Qgu^lgOMt:?SMF1qti\EW!7mY]3u--Ha)QF\hPOX.+I'.P%oSZOAFoE]];Z%U/]$Gg3kA8^$p2q=eEHHr2P^?Vn^KT7#0X,B?J3%RiRaRRGhNCJJ>qDn.[n3J0+#qfEA9-O:j$!'98f/bK\;lPP'])^/?l6k<>=QF1ukqilq6&o@@6?B%NC;hk/&Fe)sKjpIb$'7AGbf%f/Gb$E`eP*P;9RmnMIimY[!;X?-rK\%bTS6U'G7/StrFAaXB<dG]:7.\5iR]r1'AX[C()HTrrl`'K=1H?Q\)r\Y3oheW`r15`5<C%7o23G0Qo@gL?e$Uejc)m]"Q]2J!!1DlHa"d\+K*hi^f70WOf"eklhORAs0mnBe$j*ZoTXsc.29:?t>/-'TQ+eZW#o-\bY^f!N=BJ%=>K??#7DPKSnGV0R<><>B/f!p$dQV!-D-e'BHZEjr,iNg/!,,f$8pdFdJ!rj+4O0VVZQ`LC?Dg^HN/#8A[h6[43qb,>K?33_*5)X%M5p'l\rE98'3jG&eHJ6kgZ"bG@OmjplfNhK(W1E:8=bku]:9ukJId^JZrf[N2QU(XU"%I`WUE]ss"PM>q+!Y`).XF#VRj:2rHCH&%DX)\NMe91qe3&>k3AhrBa>sPqYu"s?.:[&HO.WWKUK>NG:)M9p@ZKl8i"o%U"[tdO\!s.Pq6mTCnbVRM;I5hKpGV/<Mc4;[f6]aj%\*'OZhrjC'Xj4i-Z.XAIS1+D::QF%bS_h<Io9"2sEQ?>SME>f].m<6Ymk"FMXj1SMRg#R.WD0M>DYrd1lnGUe4r12LXV:%841pq$%mr$BugqI]s?X@l@l>GbueNW_FJ+&mKCfRN7Krs+`fK25j9Bq.Wl_+G;":_JleQktQdrM%I5kBg#HftL[pnc#X4IJIp9@@pVHUQ12%)h@1<<\>)PYL#E-WV<'g0C=1ZVOPJ2VVXm4ip8+X+*uq66D%apKiDRV+<rh54oJ^\H4K](hJ$2@[%g`11SpY8DB"U!Wlmrq&+Q/G%q>StPrTi'bE[?augF%*E,TZD<nT?Nra2bQ6f_@c@^tITSD$.l?P=H@8aQFTHg<-CE:]iKb4po-(E5__fX=MoZm)=aD6Pg1QeiNY0%hF%Ibp_!M9]Y)Tq7O-"J!?-4.%b?QO[Jc(*o:gbiS'*V[;lM<C[`XNinX?<P,NDFC"TWZO;7OLr=+0?lmJ&FVk=j_NDjO(cT2X#3%El"@4`Xf2cJb=M:Hq>70L`^GB;tj-pUg_sj5%@8//nsst(o5Y;q1[s_dtk7;oZM\tJ"h<thVMT76s<%Z`YHPS9<+R)AdX697f"*3%q\ScrIY;=;8Bu=KSA*;S!`p`+(VBsRDM0&M6H6mB)^Aj$n/=WSo`;5s_%e2)@IP0H>f;-Y7eRqq\t@sukKBbAR.QDZF19Wa\[dGl%aj!'#p>G+5DZ9U\"'G&Q@,GK$N-iUURHNH;CoD/93lE>RYijjKj527ZIsb:P<j*aV[YIRp1AOf%.0d2A,]'X%g\J)o^jbC</(F[P%a<RrgKN0#bI]P,?1lE2Q^C4Y1m#-:d%<c-c^HA,0fKRlQ`5>20C+_`^mDOh2C]%)i+1/k=/>!Ehlsg<!dlW38a-uBjja>=_`_2JP%48*/SY#W>>.`;iU)<XrIV2sEf9\Md%p]SkoIooc_"q.>l<I4hL=k0KtYOl]seDkZjNTOVp%f>a`?WVI7P@rh:Z:Ne@qjq8uS^-)1%S6u2>9Y!d4h^VD^oPJ<6f]+5%BKBiPrqomT2C_LpNS2HDU\Z>A](%_DcWm<9>BsVJ<7UG(R!KQ-)Z2rCO1QG0_u,]=03LjF_2cRl%%cb_sg@;]-i@^UL[,]glcTg1S\D%8Bj6NW'"nqu<NlTrc4s^/Aa5_%B$iJ(,SkeX!CND]>.H(A)4K,dY558qef5aD>R.5uqg6Q+C%FD&9nqI]6(7_`R[o:3g1gt^'*<fKh4?RKDcGU-SO^Chcj<]Y^bjBKh^Fo:"j3Fl8TkP\Q]]UX@BF3r$5D,7/4VWCir^A.!c_K2Uc%?+o+9k28h;<Uj^qn(rmPc:A^-&.,`NG((YW^Qk]GD<>W_L9Q;EFo1]'!BEEDUt"](/>[fUc%4oYE!!-F(._87I(L!*`+O8lC:9#=%!^4?5G:+t^]2-Ec+Yc2UTtBr>lFH/7@="nmE<HFcK*O?lbDrGg^Kfr*`@^(Ehq>ZQP>M'=rA&A=Y?&]&D=HodC8F7T[Fe7bR-$q<%)Vr"sL+@YRP<1Bh,MF0qA#6S8,HU3/,NP24c`@_;U1aZXc)5Ym0>8Wc1dS[!`gbmm1]cUAoQ,6#)o6aCe9kdOLaLL#In`_f-E+'f%H^\?IbIsStgRR%FM2_K?]lg=@DpI_@-J3SlN;^<VaT959pRWaU$5sLcqtQ@5K(bt^Eq"C&(aTDc7)+m_CN$t`41QD1B-GA@as'7Y%G[2b26*:jc-OYD.pi6lu*_=&A70J90CsVc]#&,`)8f#O"W^0CR%Y6KTYuK6RX]$(@$q0\_knEJtE>YC,QV,b:M-3NqEZ'Gr=DUdn%I:Oss"(`WKj^9!=>*_fAMmO*ONMVfG=EG=!)>mVCWJp8j[DgH=oKLB+2XesYP06,oHWirdWlndQ#cWbs#DNY=rBM-'/sW!ufaGPP%Y3AY>,D8jlS8[u(hE:S]V3J6P>0WkiHluq(=[^>5=ui4;ASa'=c_T*=6H4U[82<)"2.RRDYSp@o(0UndA,]B%(m/l<jniDl$sNDQ%S&)1%o1:0Ig6S*@;OOs%rXjE6L$jjPK.N9],!nc[R,42F,BCHVnu43T7%PE@7)hm&qO`(r0$X/[Mek757q-`jj@Hu,dh<,B3GG`X%Yd:c!s7WmY(RHu$%g%mO>onf$`'<5-Q>-3_:E:VuGMq<\bjkGW2lq7Jk31.1Bp]Y'/C:!o#0l0%`F=ls2=2kU,j.IR(L+:[_uj7n%Y`=l:.s',`.<974ZlgF2&T=_^7I`X8=F/_0%t)bo`,<-!1+T;DgMN;>V$@XrmG.i"o.3cMpGelVE;o#*LE+-]0QZO)g*nQpIZZ<\%ZkCE1:G6X-@!26%:Y'Hf'D<X;_>1taM/R]G=FnHCY9LENW3:!Kcsa[gqSo]HS1WM\\ic"j1>sEZdd=9u>;2]\cD;piD.[X5M&QUn%2]II[fo;3IhZr9Ah;"ESLEdB)"Fu=bJMsp(S]\6K;]7cj?O&*o1n/+GA>6g:E9k/RSGc-/Cu*Z;+F<E[75DlX0"$J,a)r/BqPZ1n%4u]90QIfpo_g=ft:b2Pq_+O*paPr>c:u3i91[n-#kE)'4368-(hfSkB+B`M4I9Gds/^<hM[0"U&>@_/j[gN-^"TcMX,s6YK<gR=R%[-.#C"9l^++-QqA>4Qi1j".r&n'4%u0.E5$F-8W5o/&VqQ;gD&OLg6Xe5jhLJmbTSc5]3X5+mt+.p-CJW;N,3V`T8^J7aJ!k#^[?%ntqYnQfjm,8nI>XdLj0MoP/eQ2N<hWg&%L0O-QU\U6qrjH[$_ja-%SDK7HpOC-ZM$]C<0Up&7)ufGtqZ:;S+3&lqeupmFFubi87R%;`!_IfI@(tkSAa8Op7Z4:Md%#O\WLZhSIGI[JTp4Id_2_GQ>#1+A`!0EmTC7F1f:!1isaP-QESP:l4<7T::hFB#P]dY2G[9Lfga8%^ga*,(2';P&+L5HW-')F[,(Gp["FJ3G!(PTa@Z0eRfNlXW'GJ\7#r-uB]\rmJlS#9!(d/N*&$g<rP)Di[c:Ima)pZanar_Vmi6O8%hEIC]q92a6\?W*7(X6-ad](jEli6@;>H^7uok#khQn<3GQ$.?lZWquse`p:b+di(A9/[265Z*0)HpEJ-++WR*no&aLF(bDmV-<l#%goU@c"_RCt'c]`#-;\caT?AKdB`@tj*S^]'\[e?O1Pc;dk8':L%7\=`o9U`'m&fr']=dW<C"ZS!;NpW>h>LAU?8gs#7sjS!DKjXa%=hZ@b>.;N5<p0H_.Gn0Dc7:Ca/$IV'Q9(a>*:k<q&+9gYRY8IR"6t1=2(du<b"e);3?d)tpd6#5cNs/N9o:0dr>tEXS^7-3VZZt5%kl?G\"<T/5PBE%0-BF55TRkoH'c]+p/!MIG/dL>'+C0#H](Y3p8.KUk]`+Kf5;,uV?3<2Ci8dWd*hIesaE0Tn-3e]<#\Oe**/K>p%AmFCNqo#.WIOnVEkhjYG;&Pk"&a&<14dt&FI_!`^RR!uNe^)FN[?V^neDXTm1BC4AmPLNTWHd5u%I&BI8\AAiab^GUK)TdfA-Z'J%?`k.:j^<9:ICiGBnFc@NXh)+_lDp8OcG%g;S-A<6cdN&<C]bXtL43GFl+<R3$N'Oq9"k8!9s#G;Z6L9&\o`,5@nqLtk>48_IcoBp%iQFi91e-T)6+:FXON0Q+0j<R9N8A].1OZ*odX+sCD0:7FIB0C7>>6(gnOd<gH[cHMPa>VrZZfQ?SQT7(0,MV</'iur=$G"]nq8=#%gU#!sJ:J</fTm"30T:<D9J'#J1h5idoD<RAfUFJ=\YcXUNj`Z*iF<gG3"L>>Z6gP-Yfd05XRKprAq5_1s3h[l3jmk%9)m?S4<jM[%;<`S!6FQmiS#Gs@9b@V.L7OJQcZfO>BDO"#Sg1brIG8\3m:As3.rC78%Cf'g*Zi[?j=KFX[X8t:PpY(jUohXNpI:LYb:n'TCisTa%D)Jb6I9V]eYt@GEU[0E%0sg)ei;3:\K4j[.c.t(qq'Xo+gpNs*\*fRuoZ<pk'm4nL*_t-+B-(M#*#qj!["n(5N^]K&f;G4<h5M]6%:o!7hY7TMoUo.h,BOZ`)G*F';%MtRp"h+6hR_rt5_%kQrh[UIYp^Q!<$JXO&[q5Ci6qKk@3N3VY3r05""MF?K)PM7WHXo4/W&/N.%J?F`B!i!`.&S<Dd7T_0h\)_D?l#N^%m9Y(=I+TI-@Z$`%9Km@+G@k#n7D(u,,"f*XbfgB[T)l9c9j7fa;[UcYXtN1rA0<di;2Yla%NJ5*81(9F(Kjh#ZoT]G=(A1`<-&#1k1@U!'cD^\SiQ5JV-4JY=`R:K-IWe!L+ImH6LXe*Mo+;kABPH9Wjqf5JLa[nG!Bu`c^6#'J%iqst^rBfTr"3#_*23bhZ&X%\p\Wk+@6ju!923reN0#6!XgYOUZ>-'\6;GK(AV%]<'ntgVP/>a#@YZ_>N/'\[Y0Z>F@=]ArMM\FQK%)?G[G")5"C&P9-['&Sqt9d["]_ePa:(+Ea-&RX%ObHQVFJ*!mk8$_?[R^sjSD-3p8btB:%F=C\B&1pkq15HOq?])^^&tqm\RnS8R%`MN7*FlX,P0=0&XCqWKCo<TD1)tL:YqeDQN$cMUTlZ$p40#!A39tEC!r`mgAG&$XD*%/26o[&$,lUA+Be(64ln;3K1bapUSL$tDF%#8WK100cZPs.gD5[.5M-+1cT8`iD;.]_m`U*jA+_>^tca:q<751C0f^V*$tQF^I=CFoF_hLTKo:]-;3b_V<4OBq6d2=d[iik6J?=%cmA%p(dC7Y83T6R/XlIkduf$,lum_Q+U>OJ%AP/%m-F%@#LJH#`*04U4Q^qG^ZJ(MQaR6ar+gl0QmYFP#GMssm\!R3>^c\iR*_n;%43*^RZ[KO#;qWV&PrW_-,\qF;``hF4F'_DB!JRqXG7,m.R,H0XoAUls>'*[q4@_j6ln4<BQffue3nESMEO9.=e>DI7j6^!0g&LJn%jm$!)QT"G6q\7*F?Hp[jLc[,;rMp"U6G2,#7L_?IaJ@]3(E38GF8&4#&D3GN51+<&RgBt"o\^;Jl#n(f]IdOS;XLH'5`YThSpjFK%hTn"0>hX(,>NYNTm14\S88#Dh\ia?]8lCa@be>X?U!IquBAU*bX64tU\aejV85MLL>o7ZB!NZGOrDp)lD9`BWVS)i\n<`:IFT,)c%2o]/_:=&C,[U'a#Y?7D<2LXbdni_n.S=gdGIO_F]7s9K!jS>e7B[m]bTGi*)C*l0^'3$4&:PEY8IY)>#s'Er$+hkRgqR"eSakMH9%Hlc/1lFifJ,VYiKlYdliKBh@e:.EKkrtP)II+iI=eXW^QRcoM5e:X+31esN?B<hbUiq-4*kk*">YJ#utZeG4:]*P4u_h3m'Ecs01%dQXA39A+#Y)W_:%7ZV.h:\"gWn0t,C2phTVs2fY`s-2ka7`"GVJnCD'rJX($K9H/'dB\,_b9-B'F=fTOT<,&'&$pHj9""qLS7YaL%-tp&T[</gL=JhSdiZqIO$^RW&fn7LO7^^HlU2%+a+es<]g1J/Z2:n%TdC^nKX'iHK2bup7VKD3WVAk7;-)5``C5Q;9D,Z]uEgep_%6SFh<Wb3nX.Hm5"5tY')+QfPoGuH21_/r@H6;$gE1L6p:(ksD.:@k?)S:[d)Sh)nHS'n_Q\qOZf:<@2+Pa5=R1sPTeA2N(2W`--%%;tmX2UNp'BEsm_:H!?K[]I=;dTXpHL8]bZ)m;AA)_/WFmN>Tp0dP)'/TrO]KN93j6)[/T+$r9JbK9Q^slFtcK;Mf\.1>7;DO/Rcj%a(UHor!kJf`,?0+q[\.UknFlDAa#MNMJ/k3BEs+n3U7Gu$2uQT2+$jqaLl/g1<n%HN16B0a^/>.]_</0Ion^_q):Y2$h@9&a1RBr%1R`)%Tm)XsBQh4D`qdJ.f?k$ndp05PBr2V2EBtJUAgEgDcr:-qS<Igb.$PgMPgFcUe>fVY=p*//Pc\]ADeeK1`PE8=5Y."cG/;Rg%AhR^@RYpUQZJm-8F&`(3X(iEIBSHt!nKLe%8T#G=CWK5fhrL%4UR26`':u'u;,J'.DAnAKq-aVE)H/@!5s(0BZni1Y]($p74/4<>%S?P8,Mp;KpmQ/eN5d:a:MP/>AQ"[NlE))GZUJQEPF*0p(9HCZbJYq`=J'sfi!=d/*kZit]4'//]cLm9<kMj]C>O",G#eY5TU@QTp%RYJT!.ih*QSa3!.:6M&8U2YRgF.ljAlF:lt8i5Ce_/=qOSc(hbd-+rm:ggDU8uL\J7H93gBS$F&<DfGDT`7hP&d=+$%&0pCM2&`X%-;J*PWf%1dK9VG8N`+dmVk>H,-^@W7<)"_XWKnl0,^,]4$DeUm:8OU\:bK8mH6lO/2-WOg]4_7V))t,jZRf@$::!bU)E:*["*NC8%VWE%P5UiMc\tM3+.^OX2-HX?7249'Kkt'Od4\jJR?t-aX_/rU78U%bWVZN)L.^%N`.];807le,7SIJU1.R&31oJW_]MBlM^E?)BD%U:;mh!)9k$.S7/E&4KG2,&`4<U.eQ4YU5W#?$19<N!^(QM?4U/#7jg4#u,Vc01@TpqALZROV_"=-Sc*g9\!q]c/aCa618k%H-]K4%:F`003EXZc:o9n3C.LY)Aiqmhn\M15(FG9Cbu=fW;INe]"GQ?O2;OEoTgliN3$9*uVeMRc%78E`h8R]W6dp#E>Z\=E2O$OcV]nFs%VG^]$UOAr"rp]VbM..=rO)'%q%*df\\c`1)d9'*KL':"r9$eu@&V5mA%%Mp=J1tF6M5<V=Q18+N,?RbfAt6jP$lR`Y/Jm/K3K@L7%TFbBZ&1hK/_=/50L_+B[$jD5[,n8%^&Zh]U^ST!W()2=-6":1TS8:)U@r)L$!l7\_QO3mj`='s&*2oHf?mq;#FhBsnU7m-D7PHY_%)UTf5CM(Dg9uhlo6o0Ch5d1HM8[frJb7ohA6"1+SN%A4CL.t(@iI)T[W)/@`H;Yoc0jIF>Yb27)b;=fY7'T]q_CMdnC[)rDUG=f`%C!3JL==:'\Lh-q2YtQB=L7DY;/3k][#q//"T]M_''p8W(Jo[O](mK0]PRO5eb%PML.[gcW7+#/&#a>K]TM*W[PT_9ad,Qepli`Vs%$g&n0<*$gi/K)ca,-g/b#%g9N'uc:Cm]RZ:Z]9R60m$8H$Q91)aq17@K!(?3!&LXPl.E//$8(0Uc'#jn-j%VE`kW!C\[F*+<:CQ/%L/P!M/8-M>E!GGiojf`qTR@M-R"<9Pi6F[mKGmq/ZL/KEf60;Z"r\@((mYa;/\#X(b;+c\=caJd&]Jc*)5W/K=>JtQQVo]>.>=QQ%:nG+q93;rDJRt6=Y`*V.F]Um^:it5G4BP'aE%Th,;F-!G6cQE*@9Ah0"NumjA'%ggqui=:js[AkQ!rm2K]PJf0e=7rRlUg+,FY>E%dX5"Q*:u:o'#ClH#]L(g`A1t74#0D34+UrVQ/?WD<++pol-,B"=\o5_6"="d'Jt_fjb!B1a0BHTH(2Xc7BnCW'[%ml1i8J^/2@oA%2S`cJVa2gn`NUX6$]73TTJ7_PHs@Q2Jt#"\PY&>p,`?+f,R5eH,M<4MUM"-\"%d]9$-A!tg[_`*eBrlmo`?#Y*1\_K#`oY;Z>CK#%15,d4O;O'&,;M2f&-[6;jomN-K.Y]=b!\T91K.[($]4qi9Huel3B:Wl`#spcL@1KO+=!?7\2'/>S<g!C5aEi-a>/_T)<IYDNW`RC%T)^Y=!a0#*WGn^9aSsIp34<oeJIje11_n7P,rf#*OK:nSa+>Lc-"n"5-mK2'IO0XSFoo]"WfjE/;PAhH'MH<JTLeE/NSt`9A/^2]%j$<8sNmZTp$0fF6TMZ\5fPDh,<m"7s(tIBW9-0Z1on-j:&s*8c!*RYcO<Gj$)I`t?"Zl`q.$Ws5E[kC5#38&:A0>)I?RVf:5r,0C%1U',"U):$q,U7nMBHA:#2B&k8)9@VC]<3@Z=f,"<$PEOsA>C01"AoR#&.AlPYIK\*X*R[SW%=eSA3gemQ>$KC-mrc-A.V0D1k"ut%f`Laa2B2-bW14@:&HT12@6g,m"NZ[gY"5d^p^&'1-YU4^Q=HBsNWX^MJ8EtVp)nmEBLopLPEF+L<Xd'$,*6A/VCa>,YYCliRh^LQ%?mgJ@K?[$_UiK<SBXS%S6'9f>)?VbUAB>5@5j^OkdE@P[fcD+@)T=GRcNP1%&/?&i*2@8\VBM#ALnY`H$tMX95Sc0\AB;l%X&TR*%_+t%K9'%J,5thu_!BEt>)9@hKpL-<V1u$Dg+<q6iTh7jF'\+s<&!RZ#EHDN/%]Cai1F#GV.29mU`/kE'&2PWMVuo;L.>41ilF*3T%7g#5t8k9^3JRk0<OGkS;=Z/!n6@Bm-W^Z^I*k4QNW/;`!=f*kqb;992aN4!]<3R$$L/'G$foDssF)=Q:EhN"@P$O&A*s@a4e5<@m%,M?Y*.gBNZ&AW=?Gmd8s$W]ec#,pH+@-hVrZDCM]>&5-5N!2Z0`b>k$OH\_)EiK"[j#D50Ue,"1U,WoFMIRH1iA!f[$jDYs=FaQF%J;bC5[1uc[Z(M@B$Q?o;jQ)[`NWhXu@i%O0PAr,\c>Xc%Sr@/\ZMlNt"&323Dpiu'.i[!F8oT_;RU^V_$oB_)0He!#Sobjk15,d4%O;O&kKj#uE6s\FPE4eG*1eTbjWDK@ZFDlp7=\o6_AJtS)GXIQM'>l6@)lZ?L\4-1TrHpVjVJ@rMAI:f19I!)_SCe#j_5Q9>O:3th%<P>A.+3R1bF<<rWTic.1^l`F]-IR:11q"8/=KWorQQU6`#nfNZcGd(7N(U`BP(Db?2P^c#7S@SZ1W;nN-k\I6UI^-0>ZFec;Z#e"%ODH<ToSb:F=eZKR!t.hgNRC^Z*6D#OeTE]/PlZ&9!G"LS3#3bHA&q,<,g8ln3/V^41rGJTnNp.g#HK2FfMEm+%n/4MBpKo=CoBlP%>Gd'_TV.6,'5O7t9j3mtVco86=sadh$OVSAc@sn!.6'%8>ERi9?F*A\P=e82ROUU*U2UBbBGeTOdE-EcJeR]u2;84ATUEa0,Gd_4%-Z(tk-ksN>)MTrkad"fN,^p`MQq#Yn4;DTdZIMGg*:,`k@;r!i4Zg`>l6;L+87NK5'NQF[@6kL(;C/@Z&I"D]j%)7)Jt'P0FJ`\@%b(-%*a)NC6$]<jhBFMd$.(V%uHj;.A+Ufr]4l@Rk$Q=^QLoW.tU.'M4_5NC*VF[3#BRO)=<,(em&-RSFM'3_AdH+YB_+Pmf$=m8I%S;<N"+ZN:S)8VbPn6lS,Rc2<nf"f=[qSEdHCL@?FF:Ws8c/AI_/q$N:W3M:H=Jen'$PEOrA42B?%%b8[eKhqnpDhr\Ub^>2`]Q47%L]p4t=JcZA_q#W,.ku8mMIO[#/Af^[VB)8N!$SWn&Bbal@[T\N$ot<XQBK0^J/GkKX=^8J.bX3!+:`K8"#9SsO\(0jZ*#=RB?;RQ%_-3[M&rHi]i(D?EMKQ-h.Pa6m3rrjI'^d2&Q&4e.a=nADM&iKK(dh&qWQPJ>=-)AY2Q:N=^69[:'Vk"'ahT36-:!NiBGd0]Va<PH%dsX')@R1S[(,UbUaN;qB*".2saLFp(4CIbY1E?:--Gp[=pt2B?fJVqeVSNhH6P\C.5rM<5P8-nn18&X]/-GUSLb*T@/>*lLm`9>#%8/='APep_E4>cE&KQC$c07gF('I\Qc)SqM5*QU)*)C<'iBqD%sRT,(s$?b%md'.#H.&o\nm&8O'e:QIk%(EQ[Hf!h36.Mfe!fh&m%OA5qV0!opno-p;d2KZC"__e_$OJKKo6pi2VDRtQm6\@1nm7J]9TVuDISS;c*68c+m0b"R0R?Ap.&A0K^]LLJ<4HY2@PPQpDr@B?`%5KbmXT+QcPlBp^fl4Vo+oJ?4&<HN./?(n-7U7Z!(e'Be/k\%uYYbg.ZM4`/@cj<*/n5QXO2;$J'kiY4oQ+.JSfTfIDPdE<cj+PNf%_M9h0i`Zgur!Jleg`D0IThM0X."sZiJpij1QkLf?h8Pl9QdWhe'hge("g,.J7rlHLRSp@@;`J1u'&Kpi:7)foBQ2t#<!5fBa\>-:%Z4j*[P?0f(@QK7q#nn's[OO@IaqW,3;e.7L7['As=_A_-FCW)m'7@i"gZsO7BZ.RsCa^cr7GG%X$JcJ-:7.D\ih_ZS_GnAA`c<At%6:R*.0L[I'WeQI+>E^KK4&3ZnOe"0p_>Vml3ana&D9MW6@B/6n"Qg?bKaI.D\@rkh$M2+;gR:Y:)7Uq:=?QumiW^s$&#P8CY:>S!%JdH3:h=),N;O@h=/G;L^?>OTB1M%@r<k3_g-EJWc6;%nCQl;57."cKT"=XM<LiC2K38m&Y`!$ff\h:U&K"Q^;pJ@M7A/@p=:c)U"%,Ss-BZ,(0%>VI$aG/4llR%5#F=fUh?M%XTil#jfFQUo/]>qh-,.<E>D&>9g#JdE)EOUA^&ic8_Do[?\haTW>[gP5'H$#Qe[[`jJ(%A/@p"'lh&hn]8^T0]cUK\6qo7jt<#@#hZ\Neq>/J:^!QsN?Xb#?ufofD?@Vt"]H[U2JS7Z6'7OS)T+4P_%al^="`]g.H+@T(k0"+%-:aq<!JXtJK*eRfSr.krEW?K)5d6n9#]h(]%Sji95T'B+lC+6#Q^g?$:qqMkVX&pip;&Rr#]h(]%UndX.7"gJ@%&j(\U,WXYY:`%%js1FFmXrWtaaGih#]h(]Obt#i3J7Q)5Zjlq#]h(]%Sl@(C$?ZE@inC'/Y7iF=)o"u'F&*97^1*b0KD`/5CmD6K.3]B5+!>5JaNp@%?qOP`5+!<(fXm;IM-sI_"M=ks@[[+$Eh!J[!mKF);l!lGC5umlOk=Xl6SnJQ'F"540Be$;Tio_ZR^j(Ya/N;GL1]e*alYf5'm$S>%BGM;5AjKp?k"_9`Vh1O+1NpVlAMf=.1Gf@%(N@70dj0KVm"B(G@-14O*6d1E;Z\b!_W5+erfnJI151=JP;nr?'./J`GJ]T[bagG5%.dgWb_(6u9bVG0.R6+htQsusaV@k>FYnJGg(JDa'.liu.$3RV.,@KY/QlMuTT)^Zk_N[t2-VP$45jnlH0I8Do-VTO,ls<8a7)1?%%!aUCI_9AH(3D9T<!G:bQa]"VO@*QM=."\"_0edYr9MobYon#r+&sri^JJifC3\m)a)DEjTmn#qP1\\-7?ksFWAjKp7k'i[;VLkE?%1\S_nFX`S(3<O>qIK;Z,_h2OeLZtfOR$f$Ca"mD,Pd$,F0O5R>gr5Fd=f,"HEtZMKpVZ&?jaNR0QFS*78B!-g*6WpXYUn6/QFS(a%7k+4%)N#?Si.pPH17#J+--*;b@9Ah0"O#R2PG;+H'3OCGQuX\9LWQgfn%=/mV?CJuLWL,/*gWls"Nl<?YU*rsb1mMkK2f&g;!*4o%+r)n;F!qER`/`:`Pdqm5.(I$<5sJ$Lb(@X+bT/Du8ECaD-t>b@Gq%!D/3/js73Ga[(m;ES-HE&m-]j9-0jR.A`='tQ*2m2Z&^sW@%:r\N_WXNJ$Lrl@7*&/`b@n05CQ&s4</3/l)$:Q]tE?oTq9TE!<LaaL84(=(Hbf,_i=\o6aAK!iiGJrPZ`K$)1'#]lj*AKEQ:;pHh%3Kdq\6aBB18EPr"*2A+X5VdE!PS4X!9Fg,KhZXuS,p[P%9F_?p@S(?'O=Vd]>(T5+bT/Du7Kkl)AF>7&;RnXTOX""*,^,]tON\\!%7CiB)$T_`h5Sc0\AF,/PabD@W!Y!0&'@TqB<6WCG,?[hGOp-ggR<rC`N!b"8ak.8*Q'!UicB'$E?bd?(nKJit@a[+n5r/2QjA>!1%QkG^i-`/%QR6+Pl.*E;3APV5]k+7q[UtcV^Jhm)='WII\-&8e!#UmkQ!bLeVa[(ei,A#mNo>L8I,!M;4aYJPn=f)cVF&,I>;Sc*N%R<rDcWJDoKLN9'Z!hPblPdr.gLBR=VPV(LW+HXQ6'Z\uBP9X&r&if$FQm.ej_]Cgu"\%FjBai&;'2t.L?al[UV?CEq@mG5%:98uE%>QY1@m##N#5ith-*6<^UJ1P@BaP7Mo6WEOg5fTso*Wrl"3<O;pIXY?l;pd]m`ib]+/chBP@WET4=%iqAfG0UtFBs(/j@GRc'Zll`%Oj%)c3C^P0VM&LJMCDFX-VKJ15nQYRB`uQ5'pF7a]1,t1,\'nLgRF#o=E5\1'S^.d7ZbhW0f_],4+Ur1M(,>HSsUM>J_gcZ@L=@g%:J=7<?Bu#AK#"W;8-I&O'9cj(il.$24>B8SRg)#2,YJi.)lHOY$VsGnC4G&kSsTT$&re*'\73UhBho0dP)1]dX3%?>RjA0B+E/;.%&qr&a`FSb.G]=E2=%q;e/X;d!3*<Y?.jhZ;;A9dG9NsigE5c?9(9X#+`P`M?O\j:#//a7T!l6Rg0F/%f9En8NMCBZ!>VSYsk%)RV%/5\B[4Z!RUiJPb(8R*J\$*VPfdoF)\Lm'.&Y_PP"m%Ihr$Wg#V:5L(5Y].PqWL,1__f2jKr2uD"KXiT[#6T.TUbs>5()-d"6),jj%Y*^3$S=9L5GJt8Q<#Y;J5qFF9S"MJIF&u%ADL^c"Y*]iV"cZq-qdR\`Bt=-M_UoZ'hJ22%Q5mc3+<\m"%)Ud9PG=?5&eN'sR'L.)%.PucsTP=L79Z%6Hm#+FOg]YLL(R%4RqdN//#,agD/2.?N2bT0>R6j3`8K>_)(R*mCqdN/Gk.[3,(%\`l-l*MJ@[T\^b^D3+5/B2+%P\jUJ(K8lF<6WOKUKFBI'[&=b@d]/rnL=5>'Q[VT3>M)'j<tL[?bdIVJhd#=jDa$`Q5mnr,(LtQ'ZSoEP9X&2'0,-gQm.g;gdi9B%"[un@Bai&;(K2%'?bLtCVM&GS@PGf^O0U@k;gsI2m#EN)><#f,+:F&lZCip#F*C<<;Sc.:)4*t(CQ!d#./PM2E6!&kF(6Ss0:<$)%L5,&TakX"O1SJd;&l+5!;+p[DMDpst@L.ZLMg9!g@u:(BaookI;IjuFiTMQ7\<E0L/u<iN8nh0H_C3oZb<s0"?D=A2J[;-N@o<\T%s"WJm.Gj-65rGNp!\S;cOA>GZ@nK@^]45k-c.t+bOp3R,][J5WC$q#'Pr/3AUpDeMUh'm5d[\7@1ip^ug6]E]8idmG0i^4Co<[Kr%>#9m,Q>&`S@rG%@d`93d;UWqI)cKL#r%,C5Q75Kpb;>re\Mkke]n2m'd+fR=Uk2%=kt2jTd!&f79EgZOme+S11uV+F6F">8e*E"h%s3u/q]<NVaG5QskLYDB@)C1N7,aVD;":-D@>%fQGTYbAmXr3pG+@1L\Li>Rj-c/6oZG&nSB@*/r8aH-ETCID;?"5d\lV5ebAm!ZP%^+rRI:A1K^aE.9^X(olAcd-jNp2=TPrCHcnNk(@op>O7N+dHQS.`\Vlc;WVafD[^EfB6aYgJ>bQA"Etl*Md^L=Qc&s)Sb)ja!JcR%HeXNDkEo\4Q>_*ppZrl@?g[7HS7Cuf]mWn@\ZIpmdRTUmUiT5-nqQi2JWBcJ?]eM%Fr8XfVAm8kDp:#op,;udcT1.BBDtZNjI"]Y%?I-+(#nGBDVGf:YI%1/F+2Q"-r$obB[f?@&;`X"10Ya3eI7WIe29!#5O7`*kr3@C32TOT:-Z;6<V]9dXTZ=MoEm1'o'dbs'iQ3%P%ifR^l?eo(]Q",iXpUA22m!je)jd>pP,6%34>rh';f8B%Y,WR3IEm0u@U#iQ7gILFoDu603?frDMA)AB3YKAT/ce6A98*?6_SRX^'%jHePUq:U8YnipK.PsUMA0E(n:*-;-bIm#j5%-\b<VoIIADo[(1c8"q?Q5m4>-HALW6;%`QW0D*:S/`2">tom6@lfi5Wps.gMo"C+%3MtQF*cB4Wb?nEM--*sJ5!]#la(1(S&qM>I/;qBe0pOQ\[DL$?CPnZQiT5Hr3G'_1*)hQTA#aKgbZ6\`V@'6.<8f0&@8R_6NiAPj%0jEVtQo-`g9,/ee/;9Q&Kul'3P<?,b-HC3XTd:I5M9*qrbN,$ml?^$8NnI@kI26'o*oE,jQHS?V83ppGb7aK29p`sVn^QZbR2j\T%]NL6=P$/>2S&mD@q"8lIN`e9`@P^"kT(WJ"1HD=2#q`DbU<U!rS/bI'ZX2CV*4)NpH#-g4GFN*.bqmC>k2_oPS/ekH:6)<t.4pgq%acopBR?M-\Bl_F`3B<s8#q_F1oWi"F2In/T6rWZtP*m;R.7-[<DA&A,%@P<mdF@iRR2iQ2`g\R$]KEkRa"3Y#0l_fl&t('"-(?ZR%A"osG.5Nt2;hUIX/9*[QA1#?=j4E=n3G-AaMp17LB\FhibiG-d-+$'PM)*6uF)jr3c$Cs_E_NCdH":7,GF)g*bK2K(H01L*S/ek@%:6)<s.4o\Qa`LZ"Q]kooBl_F@3B:\Gc-T@T8MA9KB#A2#9IqKN/=4I5SP!RPb>$u:Zf*Z"-C267/sBf=eAs@aq>0TH*4&Tka2A6M%92q5@Q>EQpNesPaVon(f:??n><0l$SYc(6Ul,KpI>BA"d=Vd:E0p/h=&=&Gh3g@u(P9lYKMoj'qFYq:LaiQ8QMN,[;j`n6pAuV:?%;jD!UWQI$;Cm1&mC2up>9l;^\(<,@qQo^ZUZV=2T=]7,`e7@"N1:c'lR2cl1aWnu>E_NAD>%2N9R+uMF9TFt)Y,BC`0mdTpR#&C;%]-YKKPK>NkK$Y-o-)r8\-Bhs!W68m13Mo^]/MUC+bJ@Y.E_Q4U4l)Q:QH6@f9TFt)I=R,INp0M092(XbZ7I=Ma4/M<f-VlcX=8<6%PF(msk*T_#E_K2&NiC1C1#(fXA#aQA93#jb<>J$bjHrQ.*4&X?N`f::ZrCVbb>Pn(:mi::8a.HmjlDdl1dXi/DA&/&%?nmgOjrJL%R2iQ27ZN>JbJRP)bYjiK'.&fF@PU3T5gs4`9FQ%q4XS3k.\S.0956=d4=8*jf@R@23G++!MoatH.,$&)aQ/^`-+$'NM'C+eEcOhg%c$Cs^Em0t]k7Mu"heeBV+t(E1jQ)\cS/ek(:6)<q.4mEfaY[-7PETMABQD<T3B:\Gc-T@P8MA9JB#A/"9I-Hq/<c9-p<X's0tBkL%DDk08a2CiAdq!LCSf0U9-8//5aY>[+*&EQ'1+!BJ9/K=#a,He$(+,M\3gJ&I-5WZ3@+/Y-9QtnJgR;VeEj<sg`L=n'j65_1dq!Mn%Ve0Z]OTft\RMmQo`)"r6Mod\hMHs#9f<a;qQs*1DM8ePC=A4`X(6`6;EEZ!\DD3&r9SLSCOcpck'ILl%W>Sm6Yj%tkT@fjA3G.V7%O&TP/bao`HAK3mrl0sNM%\$tJc<:a6bqYb]NZ!W(B6VTT94;j7A0A7t@>S10VT%V`prR8C9TJ@66;&Si\=+r]P@Loelf$D7ZQ,:M%@<,'.XSkXtE_M4N>,!]9KgAQq3MpuF[9DPMQo2gZU[W<2gDmO6:6)<jaY?dT3G'e3*)hPi>3^'j.Bt9:-ca`_jHse(Em0u@TqrNg%?C&RTL;i5@pdlN0(6`5hQ-^/%S&F;u_d[X[r,b(R-HGJPO^hkjo(\LjZSX#L6jH%O1mTPUChcY(M4lQ"a5iU_-+(U#8M(1*a5iV*%r-H"%a"39;d?kme6[Sk'QlOSSKU.EFd:?BZ:6)<M=g)++N`f<6GZ;BumP`*Z-.P$<na6A03G*Rf@mWg?UI.[+)b48'HL[<F>--@-%Q=q6WbiL29*7N7@<fn*"L"044CuV&1GjE;.`%,%T!LB5R(n\Y0a2g"$Q1J-tA"Ld3-J,F[:\!4Meh*F6dp"jrVRLYnbeBq&@sUcq%[Ifc&12gl(DX#haHMs_]lq;ZsQo-Zm9<W$_bIXF;N@UG=PKT:VZE@kebao`L-!,2P>g^g9'hsb2jm.5!dI`f$V8qYS?CouPa*_cS%9`EaEk!-F;S?-JBQ0dB_hG6;scF+fj5.`g+1=r"kH;%H6R.X(Ob3dLhYLfhskBK)$Hd(sI^[0eNhp1Gqrld+3O7]Pqb`L+)_`Gj1%Pr\IgH+gr;3Te>AIfmbf9bZ)>8EZ@K^NH82+3&4XO7AZKDEj8$ho+AH3@9^3o(fV?/O$q`R_4\TVK0oDcXttqO#c@:lMKi7Q@r4t%=]=o$lg]P_5+9uAY[*@Zat[\lfAeGCk5Gt-T5UVIF'n\;r`qPH^:2_?a5mF/W>r7A7V]J`T];APK(ne.,'1tVqsW8S=uk`RfsfF;%mKr+tdj_a([bW:fO'gJUh;t%$#<;]4lHV-YYG9.=F3KU`\X#8<m`BoHFcO#=pK-OFqq(`2j)HFC8EZ?ZHJ;1o3Tg(fG[JK21Sf(c%VikQXbO*WKaNo*0XE)OUID<KHa#lOucd0`g+dHQge=Kn4+6Mb`g&LmEr\;GUQ@=9_Nd6#TO*?4Z-DY\+e(!p]b!A3T/'$_M?$"4J%3'!i[,dc'/M+Yme_)',2:$Y+LSiLBlbr;Zq=&Osmibrk]g@k2Y99.^)b2R>[9[2o+`8BXC:*m8H@#5*2U+eSSEqTg60KH"/loYV.%kI\nl>@DPG'ILjg@<0RiQlHcn.4nE,a],dt:m`493QX!K@<,&>P%15j7"q*>Kp-!rBCa,E3&tSFc-T@HRmc=L_r]sH>0;0QEcTCQ%eF>_\/h`:SRU`eLaYB&)TqsA7e4V]*:6)<O`eDR**4)O)S(64DWT@Nm3B:\gr-H"%a)%5VYrOhAT(WJ"F)oKnR\?Q99=.h;S&mDT%Zqh7&aYB>qkHT:mhd)8q2CHO5Ao^RU-H@[*aYApGdLqt;9UQh/RE722PT7#?-HBYS*#"_db1pgSS/bI%P=N(*aYB>YBW93M,'1(6%F)jr3A\F6e3Tb&@pfo?@o(9(FB$6\a;^W2].^MOTA5hXOQtgA@W6E@<SP!RpbS$8+7HWZu[INSQQ5m5BQ:9rsQtk>&Ls3sqCMJTi%at-D%=_&l"7+4=cA1#?-b+2&bja9!IB"L`sM9O'rEL@fQ>UIM0AP,U#DDGL81gDBJ`):X"Eg[orWT9GV/CEQk_r]sH>+.RZ>u$D_%;_tf1jX+uXfl/r3VO"Mo\XXZ21j.lH\pSpNf,V+s:6):c#q].[U0Fq&EcOi"[4YG?jHqe^hmZWt8M(1*b/lARj4E<C3G,<CMos-r%Q*a<uQ"Q+[6Sl+!A;MYV@PTqjNqNK_1-)41Ccj$ta1KML>@hhK<)/I1b/lB]A9(@;VR4;&-I_$F_dmd]*$rWVPK>PM8rebM&l!7%%9MUVIUWFb8jQ)[c2+(#2DA&/&%?lucl6tt`aYUt"%37I++tq:1RU`eJaY=MSTqs)/<(f,D:6)<KeqKRj`VW\0c-T@P-++^D-I3[<%p3f*[P%1rAZA>"j;b-]b&NMj`:!M$_P9lYKMok%I38,a9alJgaZ1F?qSF8)NCm2sq0ps!pQ,tc(jlDf-9PK@+9r?'mL<ASE84nnF%.[+@'PoLI&-*#a:W14i+8^g2<atq(#%3;.=-9$e'c%a?^0pS!bb2hWNVl:o]<9<6#?$"4j3B<s/bg]OS!La1\*[f"X:ual*ro*f+%VIjM@a-'U8(6=Yheul2h>B7q'=Vd-`A#a47+<i2RXJm(@.^DI)AJ(=M'1Md$&XaWf.<ZbpQh0%pQn:'R-6eX`+u2/jM+iqdacr*Y%ggll/BUDJRM50.!AMQ9C;opaK=ea$_L<7OlPr*o"Rlkc9e'J\1C3#N*gh`@J*)f@1Y"VTNH($d79MJibhDN>)PK>Of8M)Z"J6SaV%1-$\A<a^a*jHqe^6VC**;QIX2alJhslg*5i*4&<k2GGO=`6m$?VTInd2)S9)6l+^cBPL5$)*^p/T,*o+3lS8"`Tu4FEm1iA*&AA"%A&_u!9J&0CN5`/iOgr5H\B1GK3G.>/a&HJg9W+%`7c>O>Ht%lJjI"Rk*a&i6A"KQXck;+0A3,*ILVr2?f]d]C9TE7S1WRGmp"<Vk%bZ6\`VD9F(e7"2;aem&!1%gaK:l.D]c\eD6=t6eqeRXe%3Mu\f*cB(SgL45):6)<E[JqYF*7LUL>,j8AKgAS'*"tDLo21kpdigUi%KpSRjjd</(3@5)sA"kY;AgpE6M8GLC38A%:gh9e`NesChQt8!4VGkSkYuma>c%a3Z1%d>JA6YQDZ_h>JWPqS@EO0(nE_QFB]s9UX%k%X+/r73M:09>RjA%'D!1"@G@V&Du@9/\Y&NiA`7KmN[T%4e<Ia[kErUm?YPj5cT8na#_J3G*UHMT3am273*"O-=))e-moD=ea$D%W(`5.V7lo=9TJ@:2BJ-eLV(_aM5:,a[f&=mJ&`eS,e'e@OAN!P6UIni*-ik'iZ4Gl=Ku![ff0b7b>%PCVjE'31*\5T)qJ4&Etc#n%``jg6,[P;p!R&`:bg2s\QoV%Ibd5BMGp7UPp?Tsj4OogI8Q0,>8Q0,>8Q0-M,u'B@,u&'p-/E*<dZ)6mSJm^HQQ!3ukZMCVP8]W(%>2g"ICu!C:0thp48+mC_)Y5e.FI(e19l`T[)`MkR9^c<=WuF)WAkgMgdi3UYG39e8Hi!s5-$.\*@20HYAH/LLa194fhL?F9dkta$%\_\T;@to,ckpqT?pIF`G3g6?5lPfB\CV0c?[kg)q)0=#m]RP$`):CNW=Qc'c18hi4?Z4ib*-6Tko&n[dAeW`W8EZ@KSR^err-%ZO%QQ1'rCNoYaqikTF)-VLV^SUtu*:nOW)?0#nA+"7dG)a&I'mTSU,p?Q(3gKH?pQ+qErb,31KmatnFH,P!YGYT?bj?X(n%ZKu)KUBA%o_Hrnk5K(A4>&!@8Cs5(c-gY45`^u+1&(X]]q&o^rE]-q%1m=!YPfHuQgGljCJ:Y3mJS7mJ%EYDiGNGTm/q1VnDdJXmU&H\[f^Ei%NP$=9XtfZ(jR:E9NOcCY=4`g$fuqJN3Ssf$*-5V.gQ._eA+&g4++H^23G(hFQqes7gj^(0rTkMF45XICkEu-.qen]iA+#trT4d>S%+e<+(Fl\iqHWBV,5I^*>qeqV<1&%Mo^,sBj5M=@akEmE`A+nDsHfaSgcIP!f*nuifQGMXLQp>>A_2r\02@N??M42G<$Ci$`TtF0\%^QMbN%"G62h=^GWCQ2Krb2P'3->)rPi\*/9;fn<2/C@iB$<(FYB:g:R;e%kRSYP[p^=sR4'W/l<@;8IMVT(0@WA.8;ck;&%7,_`F%@<,'&,f_HiaYB>YBSjS='lGoD-HAMLo#O^r*7Lm?Q<5\8jCZ;@E_J$,4^BDTm&BM=$SF*YDoj`WATCJG+LK'u8GOPN/lQ9>WGS=a%;e%kRpStK$;QGL[1Gu',^7K5E1!=03Co54jdlp'6VT*^-SL$0eZl+VCe<kL7-]$$sQqh5UfY!aC[`0kf;e%"-2't(WA!Y?gR)hs7%M9J[<F0d#G3@:2XA!Y@"QqS)q,-s\*Rgke-1!u4JZ=G<&A;\_HR3g#2Crf;1M5IGRbiG-S2;W.8k2l+b3G-B,NenI'QH0I`]jsKB%C.pIl/Q?=s9W%#)O]g[Y0P%'#FPk^!XYj_4/;qa%QtY2$Ls4A9:8P9bAr/:\OI7"#:&>'UR2V8<G)jeiq<i"AEg[gZR8[VT1,W[S%9T=nPKU0.',VD"p/sBdS.62"N9TJ@:6;(RLk]4#g1-$\IP"1h]jHr[g[)?O4/iO_%P@J($lfg/bAl"C+':5muDoj_,ATCJ/+LFOJ%8BE.s.T9h$WH"U];e%kR\#iM1;QGMF1,Ys+^7K5E0hZ(\<2RZ'dQTrr:6"L73_N/4BJL![WA/D"%hOr(0qHJ,0mPe9D2h[J;e)PB%C.qT%NEIT,@q%3e,pkR-aj#R^jHqo!N`d]m@lfn%&sFW1gh`?ONesOlO_$:.VGddQ0j16mc%a@$QoOAWR[bA(LIR;\aNMJ*Em-;,%*"sP&/MS,@DTRXTe<i41>c>coQqjKa`+2HA(5Br11#;QrE,1G9,0M/c2("@W!?s9VVGl_10j16m0MJ@``6gb79W#gO.Qb]3ja=Np%Asl>PM9487W(`1R/uQ]WAO9$hDA&5(%@,$iOd$il<$oY-.\S.<92rIT:mi::8a.HmjlDdl1dXi/Q=t<F@59hiP.I/1P@O=9a>$P;%H$W,D=XoVFi^?[;9F`JY5f7)H9FS<\e735eVp\`-Z(r-C_ddFT2gmjC>%<l>ZA;26M5#EMLeNfm<'!Z?Q7+KsOf:'4Zqh6qWA0sd%c4P=^hee?U,#_tq1,UC&;e)-7e<lUsBSji*@WJe`1-$\AP%0g"jHr[g[)?L3-8ukjP@GdcI:Sb9*4(DiBSjhD9l;j_-HF&%Qd]Jc%bao_5-71C,Doj^kfc2f,e1r?QPY6+cClK<&X"VD%CJ:YS=iTMH[9-O)[`3F<f;#H*VC!+K-<k!"dF/E!ajuhSc-e?k$h+uINN"Ym%k@s\>@V\Z8ZKkW*T'`u+e7*4;=DWs7Mle_AfGZO]P?LH8#1MO#LVi2@Ojb:KL!;?C8n])rMkKQr*=A9G`_Q+r'fO,!W=`=Ri?C7/%@Y_k`R'F!K_dRU[VikQ0iUu/8F3IOL*"s7s/TDV*?HIr@e<p#&@Aq,oQk#t!6t2"2_2t$&PAO[Q[api-YUg8_@q'*<571>!16g3"%K`NYCKYl6+fNF])_UOq_A^`'?*::2S/;:&X;4&78KrHe"@;8IM-FC_M-BYgkYa?CD5KPY'@WG/?&mAbL7#RNDMod^DP<?-%-HC3X%Td:II[(+enQlHc(>u-C#0mdZrQrq!`^EpoONQEpFJ^>$h+_?sUBM=DBU"4pD9TA:93_MT$e7rE:9TA;NYGYT>bjlSbNN"We[.bZ'%WA0r9B8O\B9no>s2("X_ro5akVGhQrW-gb`D2jrSlAmauq"a=r1V$MnKS3OZ*"m!dilEX,([oG(`JVoJai(I">],_-1$tKA2H%7I%XLB,1->pqA[nc9<]\$s$QCI];T0`''CJ8*'B9=/)7#jJird+/McT,Undc?eNdc?eNdc?d<99Wk+92f#79/jsEh/(lpkqT_tkqVLe%Sirr,.4r*)-!o!D`YD4/alQ/;=][FCAl"E7Ot0_q(#<\2dI`f2^96W69onO<H;(L*jl)bWbch!$oWN=s)-/WR8fi?8H1!E%p':*<%4_BnghB^oeL38RA/#b!?it'$TEr6N\Hd(+8B<_?tQG9!DoC:Ksk%juamA#$POR=j@]#XH.3V>!"qYWAJR'5o#p@7DhZcQHjP3t'B%]#W%Dq!I3(/j8@j!KKB$FH7;OBt;")rV5UuoBU6tGlIB6Yl+gRfl>;UOrsKM+@uthkp"S*>0H[1(3bmE0C7?AHNfgTr-H"5aF*sa%jlc/R%PkfUo@Ib)aP=5tp%<Sj^d1$&F=OQWp='#mUOp^<[EnSGOLbB(ip4uXk5I&aIbrE*5=c$I:2uNerK!3aAEIj?60;t_Zi9P9%AF:Q3pchjoA8YbNa7"3]13ZMXT'%5;s6BUZmN?Quqn&:EEjS"NA8^c4rM,"hfCLZM\%W>-6TW;1.]MODhYrGF,25&6m8NdQ#FYJX%J=^["AF?(sa/aj:O:F%:3eGQR[r/B&s)\(gq"7rZk-=PS#FQNVhnBct16ZgAfi-oOQIkZ?Xb4h[[O'!GKaBLhJ^b<d9f,jB(57r_%ihhF'"t.N7LtFHa95:l=#Y^BF[]bHjMp)gdXt]uVA>3])56=bo11b5=K-@(q/.PTh@V;;U%T?n!`G+?$Ek^9PZQ,j``*nNs*2^e.%LFFuuR+;n*S&F8t_dSErm%h]RLFG!L8o':$&fkjJ*2^fq:(#*`Qm1"Y[$GAVdH"n,Ar98=FZj<5aR#nr?4/MAcYk6f94j&TXIush%AfFJ;P!ruO9LQ9Be7P.CVl22BZ_Z.[Mp<T9DZ"gn29@D?%3)&u8LC2*!MVAAVGkF!d2>hCbG$da-DL2?U,,B<;k,0q0B]rA1/$dU%RFk2rM9R<6AMZn)2A9;(F-G83CtMFEM5MVeAMZn);oG!S/CETl_e,'*4=-+@Rn5B',.>F%M)I:32Nq\2WU"7S8S1bXG?h@tH$i8J%=Z2IS+pG4t2B-@FQRk$.A`B\GTf*Qq11b>@RjG3BMp4)HDZ"gn[E0th/K81U9dZJ*!FdiZVGl!1Yo-Ftb@38%-D'o;@P^_*;k><o%0B]r_1.u5J9PdIfM9IfE,r87B1/hC$F-F]#Crf;6M5E+t,r88m;lM@2=ea-bL<MKBBM'LP1=KbpQ.ck=--G"Za@qeSVQQi@1mpKa%RS78+5/!f7/=1'+;1dL7Q`W)e9,<kn19o?M:m\.:SYETPbE?$^/1qTI](,+VegRk0[V^uH7%%02#DgQ[1*%RJN675[=Vd9Z16JpS%&=&)-S`2>#Gra_uPZ]UPA`@a)9O(>W=Xk(rU,'8*.Q<4,c%aA/R7Kr7=Xk(r3gJJ5PpNHcCoC$lM53P&V(toF;opUg=ea'`L<;oP%8EtN$S1(_!7[/bObJRPYbYjiW'-kRM;;"WA[:E.&//(UW$rr]Hdj]mlW%=q@_P2(N9_Wruh-+BUagR0`R48kAHiGgg.aohmbGYgu%Q"<g\.MGDN"AtR:dj\$*Q'_*u<gfd><@01oA`>IFB$$Pm':7r8EOeYGDDkasb/@2Xb]9+$e#Du*\1H%hB#A2[9IqKR/=0:Hp<`"T%;-BX9c%aA?R98`pW_A]2;kqLRjlP_Y<G&d8Q&-/'/lA$1;mS_$R4].AXUGr40%28,bD7^Kjh`2s=f/gFSo)_-b@KYQQqWg&UO@Z[%9U=oW_.?;pPf^4u9U:O1I=dh[QK]*]M93s:DR7PBR4K#8aYGT=/@/"sb=#on92odAQ(&5JaYK!C/@/;&bB,5M,q;Pe\_0fI//(\@%,YR60R6<BY92q4UEjMGp=XK<CS19_6p=./=;0dG799uR"Asm'QQVlF2'=UA.A])__>,`Yp)eM-"E]I,P;TjbgQ0g?_p%<-:Q`8,-%354Qofh@_M8P]SY.beMqQ0*+U$rCK^oU%6eJt@-M27C\MMN^_nf<a:VR;-Q))3+#=UTn+%)V\gmA"(SCggEb0k]#0,1NqJ`lEFQk%;^j?ZE"O'RZ,:"^biiagWP`nI4Z/,?86c:S:[F1q/i.h)H:Vk=ku>7<8A%.!CR806dq)tj`?c.$C9!OM)H15l.(,`a;eA'YEuBl^%/dI<RKUM3(HFPiV/;\3`,;EURHIhfM0OZ:q7$hmQTH"0T@DY_1XNedo_G#_E8/trrFrP%Z_h=F;9UL[SKULpU@3uJJ>U"0O=PR_+%9UL[0KUJYk@AZsp0%!dq`m'7XKUE*<-s7H%Aic4<&re2Pgh^XtR#.K=VoFCX4Z1)M1gZd2&n[HMKUMU#Ef%i6RYiDLa/#+OC20]g%UmXsi>t/?rXVVb8.5TfTols,t=X"M=`ad.b'^b9XABITDBJ*dMUf<Z!A]d\'mJTOeb"S^RQFM<*ghiII>j@A+4+:ONR@3QE\jDR^%l46Ip.X0s=KT(+cAn/el\n(52?nOB0Q^JUbZ59p5Y79g"L:N-[6H+(V8*e,p)pICLanuPcP$)DnaukSeR4!$nCqngh`H.GMf/.%c%f/.%cf/.&N?.5%+>gkNr>glDf9fF$CFNR;F?cpU(V.Z4\9U\WBBSgqTZZ/K6AodcH9%G"WRFtN6\`Ad:GXj\3G;NkX\$,+C7oO"\%PqnObH?jbu1@t1QIG""0R2K%2iCZ:'kBX'<5PAGpG+%#oXuAq=R:0B5qF^V,O7>M3A<30@b^=<c?2)#!DeJeAH?P[dOmPYt%PpI5%bREekdoY\Y\)cl<m2T_%?fPE)5;c0tHBWH<):i5.*l`+WO)YI^[h%u9rB^GtAql^Y55.$`s2R/G59k^H0_;^N#l+)?@HP#bp':Qa%)FHR0FGf."s/kje_ouEt[N"d7@AY!Y*cDKDTDSN4O7uS?q0L6A[$`Uhs1H$00*aI-LRCm`]%fKrqu5_Q^qSP%ld,tp\(s:*pOCeI%0QZ"8qrd49>n?0Rdj^<_NISZdR$kkJL7-B$+F9Trbl-kkq9rd7r`-Q0'PNlEHh&(&-d:B!A!`5:ErUI3^[2IjIY-uAF8qNno?h"/%F8IEckG,r=O:F(;8ohJGp\K1mH&\G_43ZL4p+o?sRJSB!l`7qIO:F(;3l9)-5EF\(k<E>6fA;1KqpJ!kRP&[]>X,s7b7*VfZ_tf)%/C3?<gZt4!W@_Cf),-BR#S`UB/C>m3bnus''/f.c'f]Kr6PPmW(XfA#VS@5@DYnai[EC+ND&M@e>pa1Wro5Y;-;t\H&K"CMbG$[r%-?AedU+flM;k,0A0B]t71.u&e9GFAI6t*[N;OB'MKdeWO\4IBP2AE%36r(>;;OB)cW>([I/5bA<6XdQ"jJ7tjL$:@`8o]^,&k-\]%\4i3FV(S[hA=5S<hJ'gfjmap*B":U$M%g)Z\1H#[j3>)-QAMM?L<<2UknLsFCkhS.Y\>mrVAm8kDp:&\AlH_%9U:O5I=TsDQK]+"%ASd*cc*GtqQAMMfK%Nb_knL%Pc-,p#Zco^8=XGnfAKip5B$!`4M9H*haP8$r2]FN9AYLVVB$!`4aV;Q;1/!kBfoVUQ'2?Ro94kJ'%V?ef:=ea-b%[j:OdF@9BR4>P@`k*hD]KEm(at/s[13%p&&t(&gA\/hJWA;lNaAA;(17>GWN6IAe:Gud]b&l[qj/l<na_]'9RAhsh%Zk!_9WA:$=[uAOmP$&QgWA;l.:Crqn17@\iOa/tE?'SPF;e7.oW_?Zpat/mY13&`=&so*+j^uDAW_=t?at/mY17_$UM9?N;DDkas%b/@1-a`<e!e#Du*\1H%hAtQDL*Dn/L\stAdAbOW013*-dn<PK/<$oc+#]`R;QDg,6AlL,"6rG6s<@5k1MVKs:6[CoJ<1,/`NF.aU%7[^*Y-"Bn$b!aZA5ZCLCkn(C:9SSeRZC"=MM5,KLQqWb/'ShOebOKJFbYjiW'9s5BU2m!P179O(PK>C2\OfJ42G>I?`)38Q179Q>%WT9A4/CENj_doK8*$pb!PDM&c8oBL-&l!9;3=FHdAE'Q2Bl]Zd*Z@a"+tq8[BemkBRS8C-[_u^5Am'#kA=?13[5$0ARS9WX/RpQ3%f7Qe]dq$&YlfltIZUD63N6!iD3847ja>B;[;-V%N8=;#eaY]DFg*_]u1mq*YR[CaXn$^=hPA)d,R3iT4Bemln1mt:9D2HD0U2mT6%1/0*YdU\Zd1mq+8[R=\`.Q8:rdpsXOO^tG]-F8IsD2H@I9lBYb"4rZG,,qVW1.c(RN?f1&Q\W$qRADZ1-;#Pm`+4C-O_r*JP"Z:l%0[sTq9W*[uj"[?rK2%Cu1>VWrCho2:,+C;VA<KV#m/oaeP"_d0/L*$H7$^8PP"ZSW'1?Ao9W'jE6se/_Rq.i+,ajH^P)77*R3aU[%-70C1@WI["gh`?OP)5qZR:S-FVGi='0j16mc%a=cR7Kpp=XGN<m%G"q@^8CcRsiStFVL6'l=ub]OkE[.aMd0$kq,?$-<k#8;-V%N%!GYbS:6R7bj(Ll9Qu%oL'WpIR=jkL0L<14!meV7<[E-kY.N..72f5G5N2*9Q9Tq%`SP!`Z70_t\BPL5')*^p/T,(XA3lO[f`Tu2p%MbG_2aGe(RRBbBg;i<4_@kkB&,]5:VDKI:COVp/210)sNe#B^?;7Hl=T@fjA7:tnnOAoYHbao`TAK3=S_^G.<ldcYY`m.`tLCH#0%8rspGf4T::1.u&-9Oo9R`*nL'R;KrQJkZ*<1/q_79SZ.j,;H![P>-l?1>2EpE,1P<%U1^.@=h2>XR/MdJkUoT/Yd8M.1D*N"I[nF%RubDhR1=4u.(gPe2TRG'#r5AF+;9G81.u&-9GAh]`8N&*\Cn*R+;6sG1<X-Y9W+%W@^/=ZRgk8^1@^PnZ7I?DF=O79(/)$Eg#q^+%7urM!/uQ\\Qp!<Q9IsKkhpQ##`q5Y^5\Z(p'"tU)N5kLW(i!HWa7P`o;-LtL8?W8f*n+W1na#_2*j[u+@Z8>!Ql+Q3O2pm[:/P1a%A4W+>Mot[Z=PEY5bOh/sjXa:)HFV]NF%0&WSC-AD`g7pj9Pmca+e;Y&LNH_M3:]],`B,hZZ!oLkZ>hELQ^adl9KOWTP=E^HL@nTb%gr'Yqh)_g9n7&F-k&TNmIKn';bV=NWSjb9U'0-]6?e:'XXtf7&VT.\WVT.\WVT,]!RMqAORa.'X\k2>RB&enHNQL9TNEK?TX>-8;%B?:</nUbX:/neunY$UD7\tH#WHYRYg>gO*:k[pHnC`P5W=0Kem5nd`hPo,\mH?j\s(j#`Mgie7@@a)&k$!6[]d`td2pqHc7UgqUq%F1k.+`XM/MdoXss^5lCi7(1G!\]3Eb]D^Z5Xtf[K\`[>NR%O6d&'qC56b:8GlPe5Rk1$m$qsf-<0gD;jbLb'7PI]Nq?"8V3NL?^7%gWaeEC<Y$&(DDjNN>Z>@q71o*I_9laq>!1JkH6O([nGi]d5C'pm.P(oNYt3q`cN^!=776qmB^TP?4XI`nu*JUNF.aUesP1sI!aa7%2-j^@mQ^Z"FH*hJmJH^j*8hrF@lcJ?bP_P157e+7LLsOrIdRg1ZYRe`@=I\F(Y[aF6+Y'XMJ[8Ri;99bbT-&Z`nWbna3XO]DlGJc%%sn.\XJmq`YL9W;:Y1uG-Z?20NOaO]J%rZuHb#@<e)$2RLT>KU\ZtPFZ"qS^,'lA_`XM)Me#@GTqg*2<?"8?/2fuXNgce/FO,pFu%2mWCMk#n6c8Cs5(*OY"lC]):!s1*Pfgn,QDk.^I=8k4lOJ$-P8]#G0C)RH?]].9MoGIFY/o@0'EZOE_N6j,PD%$kRk/-`#l6quu6%"\t'A:u8+i?V.@(S,Q;q]'\hBef(mmQ,R*F9[)l%a'WRTVW]QC=JEX;-qoVWS:,u;9TA9N4-.8%q/0ul;OA@9KrHe(Ql<:FVT)#4%3_L0)&queaKrHehP8^bAVT*^-SL"V9<*0oiWA0O!4L,Zu`cN]$,o0,f\_2&$V5)&K;O>jDC<W7fDmSBmo(\LhZWsBI6jbtJ>aB&i%/1sk2ii-pk1/h[DQ1q;`=]4S%VTmVXDZ"gn[DjbeA[.XA'2SK*Z'cNZWH=HY/CA'4Co54jdlp'6VT*_8S]BmSI((tFfpiroRAhp'%R2WDBVT)#93_O"$&t,3uRAhpgPT$l=VT*/(c4ZNkat/Ipe<joA*a(6s@kpJcM9HTDDYBT7l)6>aeE)p_)RH?]HS*=O4M@T2/=EIl%EIuIKR3g!%Mp0\<BPLeNbg`"Rd9.["`:[Y>Ank!uIQcOkA!Y?Ea@qSMVL=!99TA:93_O"L.'kH[;e)P9T-,mf@l!/k,P,ri],J"\%VT)$de<ma>NEIl4A)]87,q_-5bKYdbe<j?1NEIl4@lfn#&sjoU/;q^$Qrls%=Y<W_3gIu'QR05ulu8@2'2)V+Q`2]dC=JW\I!p64%NEI`0@q#S3,q;Pe9,<el0p0ts:mJ"7S]]^<W%=q@?rLWO9K.D`hHFETb-Is>NJXHZJ>etVe"LlLQn6Wq=\P^4`6gb69W#gOMN,[;%j`n6lAuSI`M9;eP;)pLGR7rTsa`Ni9ga"4*)^\Kni[?ZrR7rV)<'!ZGQ>!QT-<"F6.!]?k9TA:93_N/4BQCHB9M7m8M5)]$af."A%B[iE*]KEg&`[m=Q0bK#_&sFW1-&]mpQoJhdW6*PV:8P;8A4`m.RjP&QFPk^!XYj^I/;qU!QoNgsO3#h<:8P;8A;MYV@PTefNqNcg%1,Yq-loZUJkI[iNb@G?]9W#ftASTG03Ai-5doiDcPGm8QW(`2-Ustd.1,Yq-kq#\7U<9d?9T=n)oT>tjC<R_;SL#UU1qD:\QDL@r%6rI+8A89>[)Drik0+W!#0hZ(m9U&(^M9,b:!l\Ya9FNd2e735eVp\`-Z)!\<9ol8.h=^GWCQ2I@b9A]!-AqKt+u2$Q;s>hF=ea!C%LeNebU4%WL9TA9N4-.J+q/0ul&t'XOOf:&IR2WD"VT-Pb3_N.a&sJdoPGp9VPT$l%VT*^-SL#UU1g(TXWA0O"5-djWNS-[oZc$C2%-9$:sZ?4T`39k7I9T@_(UW175jln?SVC#MWL/D-oA-$G%VTIDVEO5d79X_r_.\1-E/lKm/L<8#6meV7<[Dp_W@aek'bW'o0^bj^_%e#?JR7UuN@Ml+MDR.9dTqe<;mVGli->.gHo[`6g+CWomsN>[YV0t#XP1DWnm7cFX$iC8U>esMTK)H2?l0qCpL)24!AE3ZCH2.l23%O&TP'bao`DAK3=S_^G/JC$DQN@qRBK_q(2MV8eJ3la+4SR&)Jo-8NqNiikhOA?hL?'0f%sQ'`K=TlcSk/9*]'PaEAQI:!MoesPR'%/.PTg@V9OB$<(FiPgU1u!@eM8_UOt*=dtJhe<g`NkpX1amC("cKrHe(Ql6WlWA.%SC.o>=Zc(fLOgs)KQl6W&WA2S*C.tPR=^nX(%Me0/\)A>?W,KjP29W-<A@^/=ZRltCf3bh@dF?(qM`pB[%@q,!!pm)i)1oA8\#<GL7QKXSb)H1-TW-P'X;e%kRc4Z0a[2s.19TA;V%YK'j^bjlSbNN"We['q-<WA0r9B8O\B9pS4ZC.p2GrPrJa9W,2dW-gb`D2jrUlAmaUmY]:Edp#gG8?#V:+f/3sNkCO$nW(gsXOo(i%C`Ei,jX043e'L\[8L3D5_g8@lDW6B^Dk5OCGd5d'F#j(O5D/Z>k*Wk<cQY=1M&ZuZY;]8Iggene9omCJ9omCJ9oiGd1d*1p1o2M-%FHbM.c,M?+*g>oV*j[K`fjd(,dZQ+aiY=&g'hsb2j\$_!=#<'P:Q<ec.pCpIh<[/Nda;QFq7<(t1d.^7kqT`CQY1O10oo[p^7BVp%0PeOj*5=slSU8S?4h#4&S&6GV3LlmlbcpLiI3hnTg\<+@,25oNk8n]Vl[GFdF-!m36N6f24m#5*?a$Zu0giOm%-nt`=7Wo4,MuiM%YLDZH]5c`;T-3E?dq#U?8b\T\h.,S]r-%ZOQQC5F!66`H]>k>d[!_47b")2nqdm-IceW)K(Z=KJZ[9p:r_ELX?i:K!*n.+$A%dAf%cY*!>]cLuKjKj/+2h!pHg1,"BnEp$6pR'^@gE/Jfa4t0X4ao@2i#pic3]1-bm/t&q@RmZ)pA,a<DU<J%RX'%:\S_'#j5]14rI]3Q%knMm$mb^jPa3<L[Hd'1UH$l62bl-kkq#=FEA+!^#q]Ai*0m?DW^Wo")c9C*sa5"Gdo.PGX*a`jK*cq@TmIBNaF!F2ZBTF%Z4f2.,%/bep%J%E\UF..Nph.(>pU:7<rpR(h*mJ53oAk;Z`:*%%0rhJ=VX5lK0a*2oWb^Ja-UO(/_F8bX[4_@7ZQp!=`?TH2'pR$5@9933[%dpjR'V'Q==1eJO9dpo,Lb:.CV9S`162?$3_2;%Pf*n+t5&%D8"jf^67dUQ`umm$g"@kpJeM80`5Q:55.9]YOR6t(C8Vq?8/?I!cL%A!Y"(QmbXhM8JnPV(b%Z$<(-&E0D^*Ca_u<M4F4*V(b'0;^j:q=JE[<-qo\YS-5"O0Kl:3.4qf,U<(RhQg$60eE(e?*j_ca)_JS4%4MIZ4/=5TUOb2!oQR1?3Mp(a[Gj9Ut9TSF;hQ=e08Z`5e2Uc0Ina#_r*j][K`FaEi4RE6hApR.K;HdP97%7bmR3!#;qZO0l*n)Q]%*h/Mfh=d4IF*^MjVT2):HH_P?*YXqj/WmS8A8X;9VT2)'HH_P?*g8$F94X>:ZRdl\A"kE'AB@N+aV:Qt1/!kBfc`.7-CVN91=Kb,%e9JG+R?sh\oU$p\4XNp#=sC:@\R^hj*YV7R:RUH%RA.&VAr5iqVTe\"DZ"gn[DshdAW`B%'2A?(OdR9>WK`^i/5^"^A>[C8dlp'.%VT35iSO_i(I!7_c\P/'@bipj%R3&\>VT6Vd8kWE,&so'sQg$60PTI/9VT3d.V'R`eFBKBGkqTH-5dFXla)if-,q_i4\_5ps4XQK+%S1`9#p=/:\EV]J#Q6*A3VT6U\8kW-LW0StadpjT$l_uX&VGhd#)O2VV*c.iMO6OZfa'3o7;HXd#kqS=-%hP#T@lfk&&sFW1/;qXB%QoNe)Lro:V:9j>V]H$CKa"3M?0i9qo-7Yq6/<f<Q0q$H&PFKMOB#A/*9H9nL/<f<QSP!UQaV%=6`FO9g*$p[tPNafm8nj.(&l!7e%QqWQtUFrIdkqRNuoU(HI4M.H1/<f<Q&VAFDP9lYDMokUY39kgY9TSF;8kVjDe9\?5EdCFRI6HE?A!Y3ALeNkdUV6\`9TSF;8kVjD%BX009dpqBNT-,K0@lhTSA+FZSgE*[pVT6VcH;%;8a"3S+A"k`T,q:j1b0>[`oU&0AO'*s]@lfn'&sXcC/;q[CQq0gm=Xp>im%I9[%@^8CcRiNj)@j7nQBehh`:Q6D/Q'[98oU)I14XNds[DZU+@Y*Mn4XPopQla^d3gJ,+O!V1RCjJd9l)q4&>C4R,=Vd.a0i>:g&<Z33%SP!UQa:^q-7:^^<'^ZQ%A9pqIfQfkkc?J#QQH8]cLeNkdaRkiG1-Hs2;d*XNPF1-AQqWQtU\'pb1-ML5.4m8WU<0^.9TP%+'U!$J%HH[EKV'RH]1qD:J1-HtE\satpA+nF90ems!H:s<uanD*1[$EFLJ6J[]Z9;e>Xi3!I*n.*QQ8,p@/I*4AgLIh\le0i1;j3,6PO1*b%kii)rA:%"JAnr9H"aDSe)Ui39cdV<[`V,ZoZ0Q,oHFDQL;iC#tA$J1//@NUK@XH=$9PYN&)bc#+*=CP27S\;('t2/).]$\j/qUsZ%VS`%oZ-ts9L$^UAC6Y$(\-NS:f^>t,B'cV\E7c5\WUuQtG^Xbe*jZQXa$^,(9,s72Pq3^"A)\lZ.5<u_6RaUL=Q4A,.5<t4qn=+h%m4ldm=WF<Z`6R(c'W/o].'4d&"&p*OL$:=sZSinZkqO2fdnt?Mg22mR$I`LZ0Kg`idpn]\oU%%#Bo0`%,&sqt0g-k4dUST^oU&CM%[)?F1(<^/A4XPUj8=%6eQqjKb`+"Q=2`iRfa2Cc?dpdXISf0a=(,(_ekqPh@H;&FRZp\D\?HJor4XPopSfZ?j3gJ,+O!V1TCjJd9%l,KpI>C+Na(_hto0ep&E+-5Y@SP!UQa:_457:gd=/FEDVAU7%JZLOl@4ksn8R7cb*1])QJFH;jHWbOjmXf;j[[464XQ/mjIACb4q%'MCiS%E<E3h.%?a'dJmAf1sn$%BE4)KQuh$Nl9,C(7<:mO80[#+1'#[Q$F.U0i-kDfRCMZMWZ%eDJ=DjDJ=DjDJ=F@\u"XG\YU`,%\YYeVQ>STul1C?J^\!n98^AI,R?X"Bd1WWr=fuFa9J0ZRah"520mdZ"Q<_fMYNTT='hsb2jm-qndI`f$V8qYS?Cou`a8FS=7XBE2%SpJU7CVj:re=GD8DX@2tff`p\eiQFsQsnf\qT;d&4*gl$3g5W6YB,c8rNu+do6KaY2tm+DmN-EsmpFm\L3/Ioeifn6jOAD7kP]Dg%0gFghB'OG9A?Ij_pR#CFA*.M'G4Q]?*qNn@8u$aW0MBUf-`jdIpR"I7np0XX5JBVQArlcXrKm%uK<j84?"5XR\#]66oDRqkZPS8]%H9<^tFP#-NXYJrZ#Q;<\1$5q2fD`<9`nYb2F8F'C-g28.R9<\\+(bJkY2D1o&$6Ics+tOk7VR^i5K;=8j1P,=FG]5rHeps7lgs_7%ojkNXjrSktrL?O)NP-G6heGd-O84,U9?d?Mq"l%?mca>k+m)Pj06ooKpNJ&I`8#jts#U-/_M";'NOO*`L6s,)@QKdmo&KKKB8;l/%;4dZsOW@nKT:u#RcOM](T@LDDYS,'>%PaM86Hf<<!S\-Ar9&705+WKuDW!B6bn4FQTBb$TLR95*@eS;rA*%r'D]N<LTe.F"WCr&(%"=0;3/(#\He4k`:.pWU*P@650pSSU);G4j'\5\j`q0K?S_CT\<&XNh\;YK7N\29S@+g/agM<`7C/dWk*p@dN!$)UX;474_V]1k!&%>nTid-,IN*&kq,X^r0O49&+7rGFK%c.58#i!jg[Y^iV&C-14BI<u-!/0X6cdZJ;:lF=M,RqFWTSfkY2gUVK8nQW%?#bao_kXW[0)%oTfQb,^uQ)7#4@e8gK^9Q7NY5;IDskQc!;/94mbW1`B#%1"b!Cr6ekXcaMu&V6MQiP@$f,hYkt!Onb*-<0_,J;.E`cI\aYFd,'4.%VS.)/D+EXJE4>4GBq4l0MeOiLR.aF98M@?9W"P#X`8YCH@a[pI,eYae8M?JUWl/A'(<^/Akp:f,6C,TdQV7uk@^/=ZS%WF+3RURu%F?(p"^$M`g`X3J7%rY#mb@8mmHm#H-@YnR9@PR+Y%!=Q]-G7P273r^B>YI%-VRps%f<_U8AQ^RB`H7G$[!+_dVRg:b3@,G6Zre*%%M(\>)[i^Nb/t$b7Z$8:a?$'3^'4#'eU.ZaY\l<.-9-gC37,fPU\Clt2jq9gk/k]ZB9;bZd,-aOmAW`AB&j;'o94F>_Vc$G;YsaG<%*>6h+U8Q0`1!O9*NTLk1YKq*#0$@[l95L8u`*nL+al5#!Ac-X1*2^5V-LXXgYbW%e9ns$-h=^GWCN*DdbMk4lAc1oN:PY-<16RY1%KdA3"Mo*u0aP"1d_UOlHZ0NgNSF*bn/;L2VEB(?P%]?a7@:DkD-DNuf-;h;+:mflJ3Jf=\@:Dm-P#7sX7"o2LR+N$3W?4cA@S<V^%;519_Kps(i'3cZYbGfGib8qS,,mH#`DM]r<@:Dl?+JV>5M,q`m0X53]F?($^[:CTn,mm:[1"]GbV59Zq*c3J\b@"H]VR2;R^%l@r%SL$&u-rF*@_QkR`Ar3%kr?t?OknMm4_TUnU1Wr[`bS#WO/9.'$;Me=Ti\:<V%QB6^c%a,8QInc?=UnA53gG.,LF"u4Mo/M[fLbg>%%]?W!U!ZZ1YXF27]k3-^.SK,M2&3!om&<ibipcO*QHHKQVQrUF'U1!S:b#9EVQu/NY(aYJQHUVG6srTg"e,RW=M!V[_:HQ1%$nk?%'$Jq\]:T9@=>H(\&q_JK/;q@:Q+5N%O2:IR:9j1']H$@JY:P=j.l!F*&qfF!242#hKaB,(\4IBP2A@LA6r*<q;OG,FWJ$H`/5]hY%'IL$%:4gMa3-f'GNGoMa,q@^:2&jc%=!FQCWA&U/:Q<""KpRS(jHV32?5Z3n)2/6--(511=&(noXXJ!ja\8_V-sWS!JdmEN/)Bdh%?u&uG_SrCh[Zse;e*_],kH^8=),8+Y!<S1V^P%jao<e1iY@48+CjG<X*pbed<+!Pck\F9<I17^Sf<-n*dS.[;##jAJLV%_pZ-odQ%GO6lN8hh3-Mr8KXl)n<'ZnumS?+\7N)T?7J/V:V_p6tO5kUN?=/Vgu^Ptn0VN4eJO]69J$/mTbI:eW(:7&+;?Q``)YZ5WF7<AK_B%&pkq--(FT@<O1lTak!DrjHW/?U<89pH_9_h<+[D`,jk_U(DM'B.abPF*d9%_*Fd'/G<+8l;-E<b<8oN!-14Z1l7P@KmZL0dDj/i.%D!4MgM3nF2V(Y-2;b8:_=/*F7kY"a/QkYRW00uF58L;bcU;"lYZaq,B-"=HUq@Zd$e-IPOGBnL-:g*c1<2'Gn,lUDX8eum_.O1k7%+YYo&1[-.s=Ak'nVSL]GmeV7<V5>ep61L;1133*FVnf[(bTr@i@#566i\2f-HM6JG0e&qtfl\:KT'SA39]5Q`R6BFKSPgf"1'BG>%1)MjRZ;:+X.1^@=%)#F&LlLU3)mJ*`3i02\.Rr;pYFY$ee]DP>/"sR9Z(oTbWs.X+UgNd4,lKKpoT_OsEE/UG;4mf5o+4D`akJ[:%g1KBmmc<cK._)%n*tWh,TDQ5TTBA_VrtVi#ms^?;H%(8As%"2JZgf<%O*#cY.`-LW[bJM;Da1GSZ^(?&IBCiH^#hntMj='RRuI[4%?Am&#I(4V8ICPpHfAXcN?cgca&%=hGmd_4hL\ohUr6q;<_gd.7pOE+-s7+iNs6oE+s+c+!e"?[<?iTsu^]1dXs7N#apA<bIoM>M\%fDkgH07WqeJ,.]Gs6IH"rkGoAjd1JnqsXRYn,N7YhgbI2s7rkuB.)G,1B-H$s5SV):Oi4j:"Zo[~>%AI9_PrivateDataEnd