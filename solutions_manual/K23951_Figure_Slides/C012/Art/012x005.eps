%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 012x005.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 361 106
%%HiResBoundingBox: 0 0 360.0054 105.1694
%%CropBox: 0 0 360.0054 105.1694
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 6684 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2FFFCACFFD05CAFD78FFC3C9CAFFCAFFCACFC9C9CAFD4CFFCFFD%27FFC9CFFD08FFCACACFFD33FFA8FFFFFFA8FD10FFCACAC9CAA1CAC9CAA7%FD21FFC9CAFFCAC9CFFFFFCAFFFFFFCAC9FD30FFA8A8FD077DA17DFD0CFF%CACACAFD06FFCFC9CFFD1FFFCAFFFFC2C3CACACAC9C3CAFFFFC9FD1BFFA8%A87DA87DA8A8FD0DFFA17D7DA8FD06FFA8A87DCAFD09FFCAC9CAFD09FFC3%CFFD1EFFC9FFFFC3C2C9A0C3C3C29AFFFFCAFD19FFA87D7D7DFFA8A87DA8%76A8FD0AFF7D7DFD0CFF52A8FD08FFCACAFFC9C9CAFFC9FD05FFC9FD1FFF%C3FFCAFFCAFFFFFFCACFFFCACAFD18FFA852FD09FF7DA8FD08FFA87DFFA8%7DFD05FFA8FD05FF7DFD08FFA7FFFFCAA0C9A0C3A0C3C3FFFFCAFD1DFFCA%A1C9C3CFFD06FFCAC9A7FD19FF77FFA8FD05FFA8FFFFFF7DFD08A87D7DFF%7DA87D7D7DA87DA87D7D7DA8FF7DA8FD07FFCACAFFFFC9CAC9C9C9C2CAFF%FFCAFD1BFFCACAC9FFFFFFCACAC9CAC9CAC9CACFFD19FFA8A8FFA87DA87D%FFA87E84A8FFA852A87DA87DA87DA8A87DFFA87D847DA8A8A87DA87DA8A8%FF7DFD08FFCAC9CAFFFFCFCAFD05FFA0CAFD18FFCACAA1CACFFD05FFCFFF%CAFFCAFD1DFF7DFF527D7D52527D7D7D52A87DA8FD08FF7D7DA8FD0AFFA8%76FD0AFFCACAC9FD05FFCACAC9FFCACAC9FD15FFC9CACAFD2AFF7D7DFFFD%07A8FFA87DFD0AFFA87D7DA8A8FFCAFFA8FFA87D7DFD0DFFCFC9CAA7CAA1%CAA8FD04FFCFC9C9A7FFFFFFA8CAC9CAA7CAC9CAA1CACAFFA8CAC3CAFD2C%FFA87D7DFD07FF7D7D52A8A8FD0AFFA8FD067D52A8A8FD13FFCAFD08FFCA%CFC9CAC9CACAFFCFFFFFFFCAFFCACAC3CACFFD30FFA87DA87DA87DA852A1%FFFF7D7D7DFD0DFF7DFFFFA1FD15FFC9CFFD09FFC9C3FD0CFFCAA1FD11FF%CACFCAFD13FFA8FFA8A8A8FD07FFA8A852A8A8A87DFD04FFA87D7DA8FD09%FF7DA8FFFFA87DFD15FFCAFD08FFCAC9FFCAC9CAFD05FFCFFD04FFCAC9FD%0DFFCACAC9CACACAC9CACAFD0FFF7D7D7DA87D7D7DA8A8FD05FFA8A8FFFF%FFA1A1FD05FFA87D7DA8FD07FFA8A8FFFFFF7DA8FD13FFCACAFD08FFC9FF%A7C9C3C2A1C3A1C3A0C3A0C9A1CFFFCACAFD0BFFA1CACAFD05FFCACAC3FD%0CFFA152A8FD06FF7D7D7DFD04FFA87DFD04FF7DA8FD06FFA87D7D7DFFFF%FFAFFF7DA8FD04FF52FD14FFC9FD08FFCACAFFC3CAC2C3C3C9BCC9C3C3C2%C2CAFFC3CAC9CACAFFCACFCAFFFFFFC9CFFD0AFFC3FD0AFFA87DFD0AFF7D%A8FFFFFFA8A8FD04FFA87DFD08FFA8A87DA8FFFFFFA8A8FD04FFA8A8FD13%FFCACAFD08FFC9CACFCAFFCAFFCAFFCAFFCAFFCACFC3CFCFFFCACAC9CACA%CAC9CAC3C9FFFFFFC9A0CFFFC9CAFFFFCAC9FFCACFCACFCACFCAFF7DFFFF%A87DFFA8A8A8FFA8FFA87DFFFFFFA87DFD05FF7D7DFD0AFF7D7D7DFF7DFD%05FFA87DFD13FFCACAFD09FFCAC9CFCFFD07FFCACAC2FD0CFFCFC9FFFFFF%CAC9C3C9C2FFFFFFCFC9CACFCACACACFCACAC9A1FFA87DA8FD067DA8FF7D%FFFFFFA8A8FD06FF7DA8FD0BFFA8527DFD06FF7DA8FD13FFA1FD0BFFA7CA%A0CAA7CAC9C3A1CACACAA1CACAFD09FFCAC9FFFFFFCAC3CAA1C9CAFFFFCA%CAFD09FF7DA8FF7E7D7D7DA87D7D7DFF7D7DFFFFFFA87DFD07FF52A8FD0B%FFA8527D7DA8FFFFFFA852FD047DA8A8FD0DFFCACFFD0BFFCACAFFFFCFFF%CACAFD04FFCACACAFD09FFCAC9CFFD08FFCACAFD0BFF7DA8FD06FFA8FFA8%7DFD04FFA8A8FD08FF76FD0BFFA8A8FFA87DA8A87D7DA8A8FFA8FFA87D7D%FD0CFFCACAFD0AFFCACAFD06FFC9CAFD05FFCAA1CAFD08FFCAC9C9FFFFFF%CAFFC9C9C9FD0DFF7D7D7DFFA8FFA8A87D7DA8FD04FFA8A8FD08FFA87DFD%0AFF7DA8FFFFFF7D52A8FD08FFA852FD0CFFC9FD0AFFC9CAFD07FFC3FD07%FFCACACAFD08FFCFC9CACACAC9CFFD10FF527D7DA87DA852A8FD06FF7DFD%0AFF7D7DFD09FF7DFD04FFA8A8FFA8FFA8FD06FFA87DFD0BFFCACAFD08FF%CAC9FD08FFCAA1FD07FFCACAC3CACFFD1BFF52A8FD05FFA876FD06FF7DA8%FD0AFF7DA8FD08FF7DA8FFFFFF7DFF7EA8A87D7DA8A8A87DFFA87DFD0BFF%CAFD09FFC9FD0AFFCACAFD09FFC9CACAFD19FF7DA8FD07FFA1A8FD05FF7D%FD0BFFA87DFD08FF7DFD04FF7DFFFF84A87DA87D7D527DA8FF7DFD0BFFCF%C9FD07FFA1FD0CFFC9FD0AFFCACAC3CAFD16FFA87DFD09FF7DA8FD04FFA1%A8FD0BFF7D7DFD06FFA8A1FD04FF7D7DFFFFA8A8A8FFA8A8A8FF52A8FD0C%FFCAFD06FFCACAFD0CFFCACAFD0CFFC9CACAFD13FFA87DFD0AFF7D7DFD04%FF7DFD0DFF7DA8FD06FF7DFD05FFA17DA8FD06FFA87DA8FD0DFFC9CFFD04%FFCAC9FD0EFFA1CFFD0CFFCAC9A1CFFD11FF7DA8FD0BFF52A8FFFFFFA1A8%FD0DFF52FD05FFA1A8FD06FF52FD047DA87D7D7DA8FD0EFFCFCAFD04FFCA%CAFD0FFFC9FD0FFFCACACAFD0EFF7D7DFD0DFF7DFFFFFF7DFD0FFF7DFD04%FFA8A8FD04FFA87DFD04FFA8A8FD13FFCAFFFFFFCAC9FD10FFCAC9FD0FFF%CACAC3FD0CFFA87DFD0EFFA87DFFFF7DFD0FFFA87DFFFFFF7DFD04FF7D7D%FD18FFCACAC3CAC9CAC3CFFD10FFCAC9C9CAC9FD04CAFD0BFFC9CACAFFFF%CA7DA87DA87D7D52FD0FFFA87D7DA876A87DA8FD0DFF7D7DA87D7D7DA8A8%A87DFD17FFCFC3CAA8FFCAFFA8CFC3C9CAFD0CFFCAC3CAA8CFCAFFCAFFCA%CAA1CAFD0AFFA8CAA17D7DA8A8FFA8A87D7D7DFD0DFF7D7D7DA8A8FFA8A8%7D7D7DFD09FFA87D7DA8A8CBA8A8A87D52FD18FFC3FD09FFCACAFD0BFFCA%CAFD0BFFC9CAFD0BFF7DA8FD08FFA87DFD0BFF7DA8FD08FFA87DA8FD08FF%7DA8FD09FF7DFD16FFC3FFCFC9CAFFFFCFFD04FFC9CAFD09FFCAC9FFCACA%CAFD09FFC9CFFD09FF7DA8FFA8A8A8FD06FFA87DFFA8FFFFFFA8FFFFFF7D%7DFFFFA8AFFFFFA8FFFFFFA87DA8FFA8FD04FF7DA8FFFD04A8FFFFA8FFFF%A87DFD14FFCFCAFFFFBBC9C9CAC3CAC3C9FFFFC9FD09FFC9FFFFC9C3C9C9%C9CACAC3CAC9CAFFFFCAFD09FF7DFFFFA87D84A8A87DA8A8FFFF7D7DA27D%A87DA17DA87D7DA8FFFF7D52A87D7D59FFFFFF7D7D7DA17DA87D7D52FFFF%FF597D7DA87D7DFFFFFFA8FD15FFC3FFCAC3A0C3A1C9A0C3A0FFCACAFD09%FFCACAFFA1C9A0C29AC3A0C29AC29AFFA7CAFD09FF7DA8FFA8FD067DA8FF%A87DFD09FF7DA8FFFFFD077DFFFF7DA8FD06FF7DA8FFA8A8FD047D52FFFF%A87DFD15FFCFC9FFFFCFC9FFCAFFCAFFFFC9FD0BFFC9CAFFFFFFCAFFFFFF%CAFFFFFFCACAFD0AFFA87DFFFFA8FFA8FD05FF7DA8FD0AFF76FD07FFA8FF%FFA87DFD07FFA87DFFFFA8FFA8FFA8FFFFFF7DCAFD16FFCAA1FD07FFCAC9%CAFD0BFFCAC9C9FD07FFCFFFC9C9CFFD0BFF7D7DA2FD05FFA8A876A8FD0C%FF52A8A8FD05FFA87D7DFD09FF7D7DA1FD05FFA8A877A8FD19FFC9CAC9CA%C9CAC9CAFD0FFFCFC9CAC9CAC9CAC9CAC9FD0FFFA8A87DA17DA87D7D7DFD%0FFF7DA17D7D7DA87D7DA8FD0BFFA8A87DA17DA87D7D7DFD1CFFCAFFCAFF%CAFD13FFCAFFCAFFCAFD15FFA8CAA8FFA8FD13FFA8A8A8FD11FFA8CAA8FF%A8FD10FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T12:18:23+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T12:18:23+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T12:18:23+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>76</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9TTzwQRGWeRYol+1I7BV&#xA;FdtydsBkALLKMDI0BZQo1myIqondezpbzsp+TKhB+jK/Gj5/I/qbfy0/L/TR/Wui1WwllWH1fTmb&#xA;ZIZlaF27/CkgRm+jCMsSa6/JEtPMC6sd43H2IvLGl2KuxV2KuxV2KuxV2KpTdXzyrNKbtdO023cx&#xA;y3j8AzOrcGCmSqIof4akEk9KbE0SmTvfDEdXMx4gKHDxzPTf9G5Nb+Srb2Om3Cs0F1NOEZo5GS7n&#xA;YB1NGU8ZKAg9RhjCJ5En/OP62E8uSPOIH+ZH9TvqBAL6feyRurEMJHa5jLKd1cSMzD/Yspx4P5p/&#xA;Svi9JxHy4T9n6QURY3bXCyLKnpXED+nPGDUBqBgVO1VZWBB/jk4TvnzDXlx8NUbB3CJybU7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqoXt/Y2Fs91fXEVpax09Sed1jjWpoKsxAGKpUnnPQpRztzd3UR+zPa2N7c&#xA;QtXuksMLxuPdWOKufzpoEVGuXubOImhuLyyvLWFT/lTTxRxr/smxVN7S7tby3jubSaO4tpRyiniY&#xA;OjDxVlJBxVVxV2KpTbQtMZ9SeMXV2kk0VnExASMRSNEAla8S3Grt1+gAZjxF3Lmd6+5zJy4axg8M&#xA;aBJ77F/Z0CXL53jWwNxPZtHO8Us9tCrF1kjgBMh9QIOJXia1Hh45UNZ6bI3/AFOSeyzx8IlYsAnu&#xA;J5bX+N+5MYda0TVp305Va5BQu/KFzEQrU+2V4+48e2WjNDIeHn8HGlpsuEcf0/EX+tEaYZI3ubN3&#xA;Mq2zgQyMSzcHUMFZj1K1I+VK75PHtce5rz0QJVXEN/f+PttHZa47sVdirsVdirsVU7i5t7aIzXEq&#xA;wxL1dyFH3nIykIiyyhCUjURZY7cSrPp19p05ktLO5eQ2+pSxuqETP6jhgTG0ZVmKqzUB2IJO2Ykj&#xA;cTE7A9ftdnCPDOMxUpRq4gi9hQ7786uuq6Pyo0lrGiarN6UcJitXhJVVXnzianJlcrsCWHxACvfk&#xA;RprH1e5B19SJMBZNm/dR6bfos+VIx6Nb6Tq8d0dSPwljFYBZHldD6nwBRIzP/fVJ4H7IO2+RGIY5&#xA;3xfDr18/NmdTLNjMeD/O2A6eW3Lv6lPdNiuKz3VynpS3LhhDUMY0VQqKxGxbbkadCaVNK5lYwdye&#xA;rr80o7RjuI9e8/jb7UbljQ7FXYq7FXYqlGu6pfwTWmm6VHG+q3/qNE84YwQww8fVnkClWYKZEUIr&#xA;AszDcCrBVBWflrS9Qjle+1O71mUSNFcs11JFCJIiFaP6tbNDAODL+0hbxJ64qtufLXlKykii9abT&#xA;ZrjkIWhvbm2Llafyyqr8a7Bq4q5dR1Py9fW9rrd8l7o94zRWurT+nBNDOFLiK54COJldUbhIqruA&#xA;pUkg4qjP8beTK0/T2nV/5i4P+a8Vafzx5PABTWbOcnolvMk7+NeERdqe9MVY1ZXEb22i+Ybu1j1f&#xA;XtYga/tGupRDb2UPoCcx2xYSrGVRlUsF5PuzMANlU5sfzF8t3QVBK/rj1EuEjjklSKSJULqZEXiR&#xA;ykCow2c7LjStTfmDpNvJK1xHKLNK+ncQxyzFgI4pCTGkfJePrUYdv1GlQepS6Nawaj5o8vskF3p8&#xA;r/pRFDQw3oib99HItAskrbiKUDlzoORUspCs0xV2KpfJZ3lvNJNYlHjmJaazmJVCx6ujqGKE/tDi&#xA;QfY1JpMCDcevRyRkjIATuxyI/SOvlvt5oVbS1BH+4OQKI2h9EG39HgzcmpH6oT4j1PGp75DhH8z7&#xA;q+9tOSX+qDnd+q/nw39rdo0lwq3WmadFZtOoJupxGG4seR+CEsW33Ksy74xN7xiBfU/s/YuQCPpy&#xA;TMq6C/vPL4AqtvYalYeobeZLwSuZJhcD05Wdti3qxgrQAAKvp9Nq5KMJR5G/f+v9jCeXHkriHDW2&#xA;24+R++/grLrFshCXivYyGgpcAKhJ6ASqWiJPhyr7ZLxh/F6ff+vkwOmkfp9Q8v1c/sVJ9UsIJRC8&#xA;waciogjBklp4+mgZqe9MMssQavdjDBOQsDbv5D5nZZ+lOW8VpcyL1r6fp7DvSUxn6KVweL3A/j3p&#xA;8DvlEfG/uto6xap/fRzw+LPBLwA8WdVZFHzOPjDrY+BT+WkeRifiPu5tyazpiqhW4WYyisUcH753&#xA;A7qsfIkeJ6YTmj337t0DTZD0qu/b71vLV7r7Krp8J6s/GWf6FUmND78n+WC5y/o/f+r701jh/TPy&#xA;H6z9nvVLfS7SGQTsGnuh/wAfMx5yb9eJOyA/yoAPbDHEAb5nvYzzykK5R7hsP2/Gyi8saUG2jaO7&#xA;MzWNuzNuzGJCST4mmV+DDuHybxqco/il8yrW1nZ2qsttBHArGrCNFQE+J4gZKMBHkKa55JT+ok+9&#xA;WyTB2KuxV2KuxV2KpD5jt9VhvLLWtMh+ty2Uc9vc2Yp6jwXJjZnh5FFMkbwIQrEBl5CoNMVYVYeT&#xA;NB1VmtrLzGJLn1xe3FnPG63QuPSSGd5YJZUmj9UxB2UqoB3Aw2tI7UPImm6RaW91qHmY2aQG3El1&#xA;fOBEzQIIk4iWVUjLAb8euNrSBsktILbT7OWPUNS8pWl3LqFzrF1aNIskwUtHGsKr63o+q7TNN6XC&#xA;oAB414hXpllf2N/bJdWNxFd2slfTngdZI2oaGjKSDiqvirFLvyjPbLJDpsNnqGkzTGdtC1RSYIpH&#xA;5F2tpgkxiDFySjRuN/h4DbFVG4vbKwH1y98mSxTSyJbyTxrpjh5LyRYOIc3COyyPIFPJRWu+KqV/&#xA;daaL6Cyk8lH69qAcWzXS6asLmJFDK8qTTtURgfCEYlVNBRTRVMrPy1e3Fylzqxtre2jlS5j0ewWk&#xA;BuIyDHLcTssb3DIVVk+BFBAJViqkKskxV2KuxV2KoHTP3U15aHb0pjLGD1Mdx+8r8vULqPllWPYk&#xA;ef3/ALbcjPuIy7xXxjt91H4o7LXHQOrs7RwWok9JbyUQySDqE4M7AV6F+HCvau2+VZeQHeacjTii&#xA;ZVfCL+0D7Lv4MfuNfTRVe3sLG3jtLe5+rGASenMaIjGQJT4uXPqW8CTvtiyz+HtECga83Yw0hz1K&#xA;cpGRjd1Y5na/h9/cqz/mHpEMRuGgnNqF5GUBCWJSKRVRQxr8E6k1px75I66I3o1/Z+thHsfITVx4&#xA;vj3yHd3xPvXx+fLAOEubeSEkqjUaOTixaYEOFbai2zN/mKka2PUfjf8AUg9lTr0kH5j+b/xTaarp&#xA;FzaP5g05/q5jnSO7Y0RZhyVaSAEhiUkBRuo27VGPiRI8SO2+/n+OiDgyRl4M99iR5e74jcf2p1Hq&#xA;+kyNxjvYHbwWVCfwOZAywPUfNwTp8g5xl8ii8saVssscUTyysEjjUs7saBVAqSSewwE0LKYxJNDm&#xA;gUudUuxztoktYD9iS5VmkYePoqU4g/5T1/ycqEpS5bDz/U5BhjhtI8R8uXz3+6vNf9X1cfEL2Ise&#xA;qtASn0ASK3/DYeGff9n7WPHj/mn/AE37P0LDf3VoyjUI1EJIUXkJPAEmg9RG+KOvzYeJGDjMfq5d&#xA;/wCOTLwoz+g79x5/A9fsPkmGXOM7FUFrGsWOkWLXt6zCIMsaJGrSSSSSMEjjjjQFnd2ICqBiqWpJ&#xA;51vqyIlnosJr6cNyrX1wRXYyCGW3iian7KvIP8rFV36O85RBjDrVrMSOl1YlhUeBhngpXvUNirrH&#xA;zDex38Ol67ZCwvbklbO4hczWdyyoXZI5SsbpKFUt6ciDYHiXCsQqmWo6RpOpxrFqVlBexoaolxEk&#xA;qgnuA4bFWNeTvKPlaTybpJfR7LneaXAl1ItvGryLLbqJAzgBjyrvviqP0K9utPvv8N6pM886IZdJ&#xA;vpalrq1QgEO/eeGoEn8wIfuwVVEX3lTSri7e/tvU0zVJKF9QsWEMrkUp6y0aKeg2AmRwO2Kof675&#xA;s0oH67aprdmg/wB6rACG7AA/btZG4P0qWjkqTsseKpjpXmDR9VMi2Nysk0O1xbMGiniPSksEgSWP&#xA;/ZKMVQfmYereaBaMxEVxqStKoNKi2tp7pPGoEsCH+2mKorzBpB1TTWgikFvexMs+n3fEMYbmI8o5&#xA;KHqK/C4/aUsvQ4q3oGrjVtLjumj9C5BaK8tSeTQ3ETFJoie/FwaH9oUI2OKpjirsVdirsVQM9YdW&#xA;tpRst0j28nu6Ayx/cqyfflUtpg9+36R+lyIerGR/N3/Qf96jstcdTubaC5gaCdeUb0qKlSCDUEMK&#xA;FSCKgjcHBKIIos4TMTY5pZNa3Nmsk7m3u4UQ+rNdD0pVjT4vjlRHDgUr9gZQYGO+xHn+tyY5IzoD&#xA;iib5R3F+QJFfMut7gy28UjaJIpYBwn+jfDXcfakQg7DtjE2Po+79aZwqRHiD/ZfqK2W5mkvBbDS4&#xA;43kQyRvdOg5UPx8REJqleVaEjr88BkTKuH5/stYwAjxcZP8AVv8ATSm1nf210t1dwrfxRtzjS1UR&#xA;CJiKFxAxb1Gp+1zLfyrg4JRNkcQ8unw6/NmMkJR4YngP9Le/Li6e6q7ymkM9hqEZCFJlQ0eN1+JG&#xA;8HRhyVvYiuXiUZjvcSUJ4z3fjv6qZ0PRjX/QLcV7iJAfvAyPgw7h8mX5rL/Ol8yhdS0iBLQyW6Ss&#xA;YnilMCyylWWORXdRFy4MWVSKU3OQyYgBtfzP3N2DUEyqVbgi6HUEDerRkj29/p/qQO8sTgOjW7mN&#xA;24HlxDgrSpXidx4HLCRKNj7GgA450RR8xbG/0Z5xXRntIpmDS2gRy8rNcLc+lwLRzlzSsg5H/J+z&#xA;RtsxODNw0O7437/f9nm7Px9McvERyl3enhvrGu77eezItTuYI7B1nj9RrhTEloSOUrutPTFPHuew&#xA;36ZlZJAR369HW4IEz2NVvfd5rLbTb6O3ijk1O4aREVXYLBQkChO8ROCOOQH1H7P1Mp54GRIhGv8A&#xA;O/4pU+oXX/VxuP8Agbf/AKo5LgP84/Z+pj4sf5kf9l/xSR+YYpNPvdI1i8uZbjTtPuJGvGkEYW3W&#xA;W3kiFy3ponwoX4uTsqsWNADhjEjqT8v1MZzBG0QPn+klAanpvmx9TuL7TA00rTetY3v1ulsLV4Ei&#xA;9IWxJR5Axd15ALX4ue5XLGpBSWv5mwXSX0sslAsxuBC6XCIk/wBVZglsFj5mARzenQM5b4ejElVM&#xA;bq41C60vRdK1QLP5ku7uz1CW0j4n6vDb3cdxI7kBeKRInp8yPieijrgVlt7dJaWc904LJbxvKyjq&#xA;QiliBX5Yql/lKBrfypotu1OUNhbRtx6VWFRt08MVVde0aPVrD0PVa2uYnE9jeIAXguErwlWvWlSG&#xA;HRlJU7E4qpeX9Zlv4pbW+RINasCI9StUJKhiKpLFXcwzAco2+an4lYBVNsVS/VfL+j6qY2vrZZJo&#xA;d7e5UtFPEetYp4yksf8AsWGKsUurPzHp/m/TIrO4/T0VnY3cwtr5hBcRhngjXjcRJ6crFQ6oJEB+&#xA;0Wk7hVkVj5r0q4u0sLn1NM1SSoTT75RDK5Fa+i1WinoNyYXcDviqRw69EPM0t75ctrjW7DUFK6p9&#xA;TUCFbm3ASOeK4naG1kJjHpShJC3wptscVTp/Md/EvOby9qSRD7br9TlKjx9OG5kkb5KpOKozSdd0&#xA;nVll+o3AkktyFubd1aKeJjWglhkCSxk025qK4qj8VdiqC1lGOnySIvKW3K3EajqWhYScR/rceP05&#xA;VmHpvu3+Tfpj6wDylt89vs5oxHSRFdCGRwGVh0IO4OWA20kEGi3hQlspOoX/ANXG9lZsrXB7STCj&#xA;JH8k2Zveg/mGUn1yr+Efe5Uf3cOL+KXLyHU/HkPj5JllziobULM3VvxR/SnjYSW81K8JF+yadx2Y&#xA;d1JGQyQ4h5tuHJwS33B2I7x+OXm3YXf1qDky+nMhMdxDWpSReq9tu6nuCD3xhPiHmuXHwHvHQ94/&#xA;H27NXWnWtyyyOpSdBSO4jJSVR4B13p/knY9xjLGJe9ceaUdhy7un4+1DmTV7RvjQahbfzpxjuF/1&#xA;kPGN/cqV9lOQucf6Q+38fL3NlY58vRL5x+fMfG/eirW+tboMYJAxQ0kQgq6E9nRgGU/MZZGYlyas&#xA;mKUOY/HkeqlLpVq0zTxF7a4c1eWBinIju6bo5/1lOROIXY2PkzjqJAUfUPP9HUfAtfo+6IodSuff&#xA;4bcfqix8M/zj9n6l8aP8yP8Asv8AilS2020t5DKil5yOJnlZpJKdeIZyxC1/ZG2GOMDfqxnmlIUe&#xA;XcNh9iJybU7FVC+vrOws5r29mWC1t0Mk0zmiqqipJxViHl3ypcSNNq0E955bhuyDY6NaMqxQwCvx&#xA;y2syTQLNNXm4WMcNl+0GZlUy1TyrrN5p9xbReaNShllQiKQLZpxfqpJht4ZKBuoV1JG1cVX+SF0z&#xA;9GSNb2QsdRWUw6zE7NLOLuMfH6s8haWbZg0buatGynocVRPnKR4vKGuSoSrpp90ysOoIhYgjFU1g&#xA;higgjgiXjFEoSNfBVFAN/bFV+KpJ5h0q7aSLWdIRTrdipWONm4LdQE1ktZG6ANSsbH7D0P2eSsqj&#xA;9I1Wz1XT4r60LelLUFHHGRHQlXjkU7q6MCrL2IxVGYqkenH1vOGtTqp9OC2sbNnI/wB2oZ7hwD/q&#xA;XUf+dMVQ/nG1tdRuNF0a/RZNK1C7YXkUgDJMYIXnjgYHszR8z4hCp2JxVJ9a8+zaPZamqm1a6tbi&#xA;4g0+2WNgBFb23qL6gEm/xlU+Hj7DwNK2v5pWVtM8OoRh2M80Fu9uY+LenczwoTzkqOawqfvPSmNI&#xA;Xza1pus6bpPmuziax1GO/tbFGkMfqmK5u44JoJPTZ1dHjk5gVNGo3UYEs4xV2KuxVA6N8Fq1oetl&#xA;I1uB4ItGi+n0mSuVYdhXdt+r7HI1O8uL+cL/AF/7K12pXU0aJb2tDe3JKwV3CAfblYfyxg19zRe+&#xA;HJIjYcz+LRhxgnil9Mef6vj+s9Fe0tYrW3SCKvBB9pjVmJNWZj3Ziak+OShERFBryZDORJVckwdi&#xA;qXX6/Urj9KJ/dBQl+gFaxjdZaeMVTXxWvWgymfpPF8/1/D7nKxHjj4Z5/wAPv7vj9/xTEEEAg1B3&#xA;BHSmXOK7FUPd6fa3RV5FImQUjnQlJVr/ACutGp4joe+QljEufNtx5pQ2HLu6fJDA6xaE8qahb9iO&#xA;MdwPmPhif6OHyOQ9cf6Q+39X3Nn7qf8AQPzj+sfairS/tbrkIXq6f3kTApIlenNGAZa+4ycZiXJq&#xA;yYpQ5j9XzV8m1uxV2KsXtOXmq/j1B/8AlGrKTnp0fa9uEPw3TU6wRkfuR0Zv3naM4qyjFXYqxrzA&#xA;p0PUR5pgH+icFg8wxKCS1spPC6AH7VsWJbxiLdSqDFUV50dG8la66sCrabdFW6g1gamKp3irsVdi&#xA;rGdXRvLmoTeYbcMdKuSp1+2UFgnEBVvkUd0UBZgPtIA3VKMqyVHR0V0YMjAMrKagg7ggjFUj8rFp&#xA;pNbvuPFLzU5uA26WiR2JO3i1oTvirXnGfRv0eljqEctzc3bg6fZ2hIu3niIdXgIKFDEaMZCwVOrE&#xA;DFUPpi/mHa2ka3g07UpGqT6kslrJEKmivJFBLHOwHV1iiH+TiqJGoec5VPp6LZwkbE3F+w38VEVv&#xA;LyA9yuKt2fl65k1CHVNbuxf31tU2UMSGG0tmdSjPHEWkZpGUlS8jsQK8QgZgVU8xV2Kpf9avbyWS&#xA;Ox4w28TGN7uQF+TrswiQFa8TsWY9R0OU8UpH08u/9Tk+HCABnuT0H6T+j7Q1Ho0iSyTfpC5MknEu&#xA;R6KiqigNFjAO3jiMO98R+z9STqQQBwxoe/8AWp/o7Uba5kvILj67K6qjRXQVTxUkhY5IlRU613Q1&#xA;PfwHhyB4gb9/4/QnxoSiIkcI/o/pB5/MI+zu47uATIGTcq8bgB0dTRlYAncH+zLYTEhbRkxmBoq2&#xA;Sa2mZVUsxCqoqzHYADucSUgWl0V1qF+nqWqpbWjj93NMpeSRT+0sdU4A9ixr/k5SJSny2H46fj3O&#xA;TKEMZqXql3DkPjvfw+bVrojW9ulsmoXRhj2RKxLxHZQVjVuK9AK9MY4aFcRr4fqWep4pcXDGz7/1&#xA;qxsr9fij1GVmHRZo4WT6QiRN9zYeCXSX3fsYeLDrAfAn9JP3NQX1wk6Wt/GscslRBNGSYpSASVFd&#xA;0egrxPboTQ0YzINSTLFEjigbA5jqP1jz+wI7LXHQ93p9pdcTMn7xK+nMhKSJXrxdSGWvschLGJc2&#xA;zHmlDly7unySO91PXbO/TR9OEeq30sZm53B9EW0VSqy3LxqVcMwIRVVWah7BmWMRIHnY+38fJnOW&#xA;OQsDhl8x+sfb8FcaFrsysb3zFch3qHisoba3hAPZBLHczr8/WJ8KZa0ILWfJurX+nNYp5kvPq8nF&#xA;Jre6itpopYQfiikMUdtcFXHwtSYEiu++KpjomrXLXB0fU7VLLU4IhIiQtztpoAQnqW7EKaKxCujD&#xA;khI6gqzKpzirsVSG81jVL3UrjSdDhi5WnFdQ1O7VntondQ4hSJGjeeTgysw5qqhh8RPw4ql8H5e8&#xA;dDi0WbXtRk0+JQq26/VY0UK3JVQrB6oRDQIpc0UAb0xVMJdJ802372w1w3rgEta6nDAY37hVktI7&#xA;Z4ienIiT/VxVGaHraanFMkkLWmoWb+jqFi5DNFJxDCjDZ0dSGRx1Hg1VCqZYqk+sa1eQ3cWl6TbL&#xA;earMhlYSOY4LeGvESzuA7AM1QiKvJyDSgVmVVL9J8nanY2P1M+YbuO3Bf07WzitoLeKNyT6UAlju&#xA;Z0Ra0UeseI2WgAAVVLXypqum25i0nX7laSSzLDfQ29zAXnkaWQuI0tp2q7k/3wxVD+UIXtNQubbW&#xA;oyfNUkQluL9m9VLqANStq3FPTijdqGHiOBIJ5cg7KssxV2KuxV2KuxVjV7YJfaWnl6fhHcwywlPU&#xA;ApLDBKsnqRcldWZkWjbfCxNdqVw5Q4o+Gef6B3O0x5TjyeMLMSDy6Egijy68u8fYEi8teYn0+4sZ&#xA;LthGtutqkbuxil/d+m71rIyrRVNGWvLmPskHKxp8hiRfSvL8ftbpa3CJiYjvxcXLcb2B08/hwnmC&#xA;ExS31Oy1D9IalqX+gr6v7jnRS0hX0lCBFrwAZQKksd/bLhGUZcUpbOMZ45w4McPVtv7rve+vyH2p&#xA;lpaylZ7mWMxG7l9VYmFGVQixry9yI+RHatO2XYr3J6lxc5G0Qb4RX2k/pRuWNCH1G1N3p9zahgpu&#xA;IniDEVALqVrT6chkjxRI7w2YZ8ExLuIKS6jbQ64LWGXjaalbswntpQCxglQxXCRn9pHRvhddqgV6&#xA;EZjzAyUDtIfdyLnYZnBZHqgeRHeN435g8x7/AHoeHQfN8cq01VEiTmqBK8VVl4r+7KcTwNSorTt2&#xA;GQGDMD9X49zbLV6Yj6N9vxd9f2uOg+cPXZ11ikXEhI2qxBERVasqpX4jvt777APgZr+pH5vTVXh7&#xA;/t95/G23MjbCS5u7WzsmnS9ltnRr3UIwfTJhaoCN0aRioDU6b1psDZAmQEbuuZ936WnKIwlKVcIl&#xA;fDHrv3+Xd37eae5lOvdirGb69i0HzNcalqJMek6nb28B1BqmO3nt3kpHM1P3UcgmqjN8IfkCQWWq&#xA;qS3fkLWpNSv9T0m8ttPubu5muoryHl6skU8cMXoyMFFFpE0lfi+MgjpuVTTT/L3mu1u0vL3XnliW&#xA;RHngqBHwCcpftq+xkaQAAL8HDcFfiVWlLPzXr9te2rzto2mwXEQ1G1nmtluJ53jrHDLC0bSxRiGr&#xA;sDwLcQCSrUCpr/hLSv8Af+o/9xPUf+yjFXf4S0r/AH/qP/cT1H/soxVLtBuLXy7eTeXr5mgS4upZ&#xA;9IvZ2ZluhdSNM0JmkZy1xG7MvFjyZArCvxcVUo0j8u9d05bpLXVFsYLyZGmt7X4QIwZSwVwi02mU&#xA;UVVb4f7zoFKozy3oOpeVp7vUNW1K2i0qSJXvXeZlT1kgtoElZphsQIGDMZPi5DYccVROn6XF5h1W&#xA;81+dbu1s54YLTTljuLqzklht2lkM7pDJCQHa4IRXFeK8tuVMCpn/AIS0r/f+o/8AcT1H/soxVKgl&#xA;l5T164vbqSYaNqcEEJ1C6nnuRbTwPJRJpZmkaKKQTVRi3AOGBILLVVB67+X02qapearaTW8Ul1za&#xA;MMOaPysTbQyvVSA8TuzArXkrEHtQqibTyx5it/Naa5d6jHJaiNo7qPkyFkBdkGyj4Iy5IUtTc+Ax&#xA;VGWd3Dr3mW11LTz6uk6ZBcRLqCf3dxPO0YMcLU/eRRrES7L8JfiASVYAKyXFXYq7FXYq7FUNqH6N&#xA;+rH9I+j9WqOX1jj6de1ee2QycNeqq823Dx8Xovi8uf2Jav6G4j0/r/D9n0/0hwp/k8fhp8spHB04&#xA;v9k5R8Xrwf8AStXsP0F9aHo0+v0PH6zz+s8ab09f97xp9GSh4d7fV58/t3a8vjcO/wBHlXD/ALHZ&#xA;NMvcR2KuxVC6h+jPQH6R9D0K7fWOHDl2+3tXIZOGvVVebbh8S/Rd+X7EuT9C0/dfXuFfh9P6/wAP&#xA;9jx+Gny2ykcHTi/2TlHxevB8fDc3+HKj656nDt+kPrHpV9vrXwVxPh9f9lf6VHj/AMNf5nDf+x3T&#xA;pOHBfTpwoOHHpTtSmZA8nBN3u3hQ7FWm48Typxp8VelPfFWEL/yrr1JP0V9a9P8A3b+gP0l9W5e/&#xA;6M/cc/8AhsVbf/lXXqp+lfrXp/7r/T/6R+q8v8n9J/uOfh3xVmy8eI4040+GnSntireKuxVCat+i&#xA;f0bcfpf0P0bx/wBK+t8PQ4f8Wep8FPnirEYP8B+n/uO/S/1Pf0f0Z+m/qdKmvofVP9H41r/d7Yqi&#xA;NP8A+Vefpa39Xl+l+S/UP039b+s8uRp9V/Sf7z7X++sVZjirsVabjxPKnGnxV6U98VYQv/KuvUk/&#xA;RX1r0/8Adv6A/SX1bl7/AKM/cc/+GxVt/wDlXXqp+lfrXp/7r/T/AOkfqvL/ACf0n+45+HfFWax+&#xA;n6a+lT06Dhxpx402pTtiq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:782E13A9162068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:782E13A9162068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:782E13A9162068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T12:18:23+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -105.169 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 105.169 li
360.005 105.169 li
360.005 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
229.279 41.2222 mo
236.386 45.4868 236.386 52.4023 229.279 56.6675 cv
222.17 60.9326 210.645 60.9326 203.537 56.6675 cv
196.428 52.4023 196.428 45.4868 203.537 41.2222 cv
210.645 36.957 222.17 36.957 229.279 41.2222 cv
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
229.279 41.2222 mo
236.386 45.4868 236.386 52.4023 229.279 56.6675 cv
222.17 60.9326 210.645 60.9326 203.537 56.6675 cv
196.428 52.4023 196.428 45.4868 203.537 41.2222 cv
210.645 36.957 222.17 36.957 229.279 41.2222 cv
.746 .676 .668 .898 cmyk
@
grestore
210.458 50.5117 mo
210.458 50.4229 210.458 50.3604 210.342 50.3604 cv
210.245 50.3604 210.245 50.4136 210.236 50.5029 cv
210.165 51.7754 209.212 52.5049 208.243 52.5049 cv
207.7 52.5049 205.956 52.2026 205.956 49.5508 cv
205.956 46.8896 207.691 46.5869 208.234 46.5869 cv
209.204 46.5869 209.996 47.397 210.173 48.6963 cv
210.192 48.8208 210.192 48.8477 210.316 48.8477 cv
210.458 48.8477 210.458 48.8208 210.458 48.6338 cv
210.458 46.5249 li
210.458 46.3735 210.458 46.3115 210.361 46.3115 cv
210.325 46.3115 210.29 46.3115 210.218 46.418 cv
209.773 47.0767 li
209.444 46.7563 208.99 46.3115 208.136 46.3115 cv
206.472 46.3115 205.039 47.7261 205.039 49.5415 cv
205.039 51.3838 206.481 52.7808 208.136 52.7808 cv
209.586 52.7808 210.458 51.5439 210.458 50.5117 cv
cp
0 0 0 1 cmyk
f
215.264 51.793 mo
215.264 51.2949 li
215.042 51.2949 li
215.042 51.793 li
215.042 52.3091 214.819 52.3628 214.721 52.3628 cv
214.427 52.3628 214.392 51.9619 214.392 51.9175 cv
214.392 50.1377 li
214.392 49.7642 214.392 49.417 214.072 49.0879 cv
213.724 48.7407 213.28 48.5981 212.852 48.5981 cv
212.123 48.5981 211.508 49.0166 211.508 49.604 cv
211.508 49.8711 211.686 50.0225 211.917 50.0225 cv
212.167 50.0225 212.328 49.8442 212.328 49.6128 cv
212.328 49.5059 212.283 49.2124 211.874 49.2036 cv
212.114 48.8921 212.549 48.7939 212.834 48.7939 cv
213.271 48.7939 213.778 49.1411 213.778 49.9331 cv
213.778 50.2627 li
213.324 50.2891 212.701 50.3159 212.14 50.583 cv
211.473 50.8853 211.25 51.3481 211.25 51.7397 cv
211.25 52.4536 212.114 52.6738 212.674 52.6738 cv
213.261 52.6738 213.671 52.3223 213.84 51.9087 cv
213.875 52.2646 214.116 52.6387 214.535 52.6387 cv
214.721 52.6387 215.264 52.5137 215.264 51.793 cv
cp
213.778 51.3394 mo
213.778 52.1782 213.137 52.4785 212.737 52.4785 cv
212.3 52.4785 211.936 52.1704 211.936 51.731 cv
211.936 51.2412 212.309 50.5029 213.778 50.4492 cv
213.778 51.3394 li
cp
f
218.37 51.4814 mo
218.37 50.9746 li
218.147 50.9746 li
218.147 51.4639 li
218.147 52.1226 217.88 52.4604 217.551 52.4604 cv
216.955 52.4604 216.955 51.6509 216.955 51.4995 cv
216.955 49.0254 li
218.227 49.0254 li
218.227 48.7495 li
216.955 48.7495 li
216.955 47.1123 li
216.732 47.1123 li
216.723 47.8418 216.457 48.7939 215.584 48.8296 cv
215.584 49.0254 li
216.34 49.0254 li
216.34 51.4814 li
216.34 52.5762 217.168 52.6831 217.489 52.6831 cv
218.121 52.6831 218.37 52.0513 218.37 51.4814 cv
cp
f
223.638 52.585 mo
223.638 52.3091 li
223.175 52.3091 222.953 52.3091 222.944 52.042 cv
222.944 50.3428 li
222.944 49.5771 222.944 49.3013 222.667 48.981 cv
222.543 48.8296 222.25 48.6519 221.734 48.6519 cv
220.986 48.6519 220.594 49.1855 220.452 49.5059 cv
220.443 49.5059 li
220.443 46.4092 li
219.162 46.5068 li
219.162 46.7832 li
219.785 46.7832 219.856 46.8452 219.856 47.2813 cv
219.856 51.9087 li
219.856 52.3091 219.758 52.3091 219.162 52.3091 cv
219.162 52.585 li
220.167 52.5586 li
221.164 52.585 li
221.164 52.3091 li
220.568 52.3091 220.47 52.3091 220.47 51.9087 cv
220.47 50.2715 li
220.47 49.3457 221.102 48.8477 221.671 48.8477 cv
222.232 48.8477 222.33 49.3281 222.33 49.8354 cv
222.33 51.9087 li
222.33 52.3091 222.232 52.3091 221.635 52.3091 cv
221.635 52.585 li
222.641 52.5586 li
223.638 52.585 li
cp
f
228.105 49.0254 mo
228.105 48.7495 li
227.901 48.7676 227.642 48.7764 227.438 48.7764 cv
226.664 48.7495 li
226.664 49.0254 li
226.939 49.0342 227.082 49.1855 227.082 49.4082 cv
227.082 49.4971 227.073 49.5151 227.029 49.6216 cv
226.129 51.811 li
225.142 49.417 li
225.106 49.3281 225.088 49.2925 225.088 49.2568 cv
225.088 49.0254 225.417 49.0254 225.586 49.0254 cv
225.586 48.7495 li
224.617 48.7764 li
224.376 48.7764 224.021 48.7676 223.753 48.7495 cv
223.753 49.0254 li
224.181 49.0254 224.35 49.0254 224.474 49.3369 cv
225.809 52.585 li
225.586 53.1104 li
225.391 53.5996 225.142 54.2139 224.573 54.2139 cv
224.528 54.2139 224.323 54.2139 224.154 54.0537 cv
224.43 54.0176 224.501 53.8223 224.501 53.6797 cv
224.501 53.4482 224.332 53.3057 224.127 53.3057 cv
223.95 53.3057 223.753 53.4219 223.753 53.6885 cv
223.753 54.0889 224.127 54.4092 224.573 54.4092 cv
225.133 54.4092 225.498 53.9023 225.711 53.395 cv
227.278 49.5952 li
227.509 49.0342 227.962 49.0254 228.105 49.0254 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
258.403 84.9082 mo
265.51 89.1729 265.51 96.0874 258.403 100.353 cv
251.294 104.619 239.769 104.619 232.661 100.353 cv
225.552 96.0874 225.552 89.1729 232.661 84.9082 cv
239.769 80.6431 251.294 80.6431 258.403 84.9082 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
258.403 84.9082 mo
265.51 89.1729 265.51 96.0874 258.403 100.353 cv
251.294 104.619 239.769 104.619 232.661 100.353 cv
225.552 96.0874 225.552 89.1729 232.661 84.9082 cv
239.769 80.6431 251.294 80.6431 258.403 84.9082 cv
.746 .676 .668 .898 cmyk
@
grestore
242.002 94.6421 mo
242.002 93.8687 241.269 93.2007 240.277 93.0942 cv
241.139 92.9253 241.753 92.355 241.753 91.6968 cv
241.753 90.9233 240.935 90.1934 239.778 90.1934 cv
236.521 90.1934 li
236.521 90.4683 li
236.735 90.4683 li
237.419 90.4683 237.438 90.5669 237.438 90.8872 cv
237.438 95.5776 li
237.438 95.8979 237.419 95.9956 236.735 95.9956 cv
236.521 95.9956 li
236.521 96.271 li
240.015 96.271 li
241.201 96.271 242.002 95.479 242.002 94.6421 cv
cp
240.89 91.6968 mo
240.89 92.2671 240.455 93.0142 239.466 93.0142 cv
238.176 93.0142 li
238.176 90.8247 li
238.176 90.5308 238.194 90.4683 238.612 90.4683 cv
239.715 90.4683 li
240.579 90.4683 240.89 91.2261 240.89 91.6968 cv
cp
241.113 94.6343 mo
241.113 95.2651 240.647 95.9956 239.725 95.9956 cv
238.612 95.9956 li
238.194 95.9956 238.176 95.9331 238.176 95.6392 cv
238.176 93.2104 li
239.854 93.2104 li
240.738 93.2104 241.113 94.0376 241.113 94.6343 cv
cp
f
246.194 95.2124 mo
246.194 95.1226 246.124 95.105 246.079 95.105 cv
245.999 95.105 245.981 95.1587 245.963 95.23 cv
245.652 96.146 244.85 96.146 244.761 96.146 cv
244.317 96.146 243.96 95.8794 243.756 95.5503 cv
243.489 95.1226 243.489 94.5356 243.489 94.2153 cv
245.972 94.2153 li
246.167 94.2153 246.194 94.2153 246.194 94.0288 cv
246.194 93.1479 245.713 92.2847 244.601 92.2847 cv
243.569 92.2847 242.75 93.2007 242.75 94.314 cv
242.75 95.5054 243.685 96.3687 244.708 96.3687 cv
245.793 96.3687 246.194 95.3813 246.194 95.2124 cv
cp
245.607 94.0288 mo
243.498 94.0288 li
243.551 92.7026 244.298 92.48 244.601 92.48 cv
245.518 92.48 245.607 93.6812 245.607 94.0288 cv
cp
f
249.407 95.1675 mo
249.407 94.6597 li
249.184 94.6597 li
249.184 95.1499 li
249.184 95.8081 248.917 96.146 248.588 96.146 cv
247.992 96.146 247.992 95.3374 247.992 95.1851 cv
247.992 92.7114 li
249.264 92.7114 li
249.264 92.4351 li
247.992 92.4351 li
247.992 90.7983 li
247.769 90.7983 li
247.76 91.5278 247.494 92.48 246.622 92.5151 cv
246.622 92.7114 li
247.377 92.7114 li
247.377 95.1675 li
247.377 96.2622 248.206 96.3687 248.526 96.3687 cv
249.158 96.3687 249.407 95.7378 249.407 95.1675 cv
cp
f
254.675 96.271 mo
254.675 95.9956 li
254.212 95.9956 253.99 95.9956 253.981 95.728 cv
253.981 94.0288 li
253.981 93.2632 253.981 92.9878 253.705 92.6675 cv
253.581 92.5151 253.287 92.3374 252.771 92.3374 cv
252.023 92.3374 251.631 92.8716 251.489 93.1919 cv
251.48 93.1919 li
251.48 90.0952 li
250.199 90.1934 li
250.199 90.4683 li
250.822 90.4683 250.893 90.5308 250.893 90.9673 cv
250.893 95.5952 li
250.893 95.9956 250.795 95.9956 250.199 95.9956 cv
250.199 96.271 li
251.205 96.2437 li
252.201 96.271 li
252.201 95.9956 li
251.605 95.9956 251.507 95.9956 251.507 95.5952 cv
251.507 93.9575 li
251.507 93.0317 252.139 92.5337 252.708 92.5337 cv
253.269 92.5337 253.367 93.0142 253.367 93.521 cv
253.367 95.5952 li
253.367 95.9956 253.269 95.9956 252.672 95.9956 cv
252.672 96.271 li
253.678 96.2437 li
254.675 96.271 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
316.651 84.9082 mo
323.758 89.1729 323.758 96.0874 316.651 100.353 cv
309.542 104.619 298.017 104.619 290.909 100.353 cv
283.8 96.0874 283.8 89.1729 290.909 84.9082 cv
298.017 80.6431 309.542 80.6431 316.651 84.9082 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
316.651 84.9082 mo
323.758 89.1729 323.758 96.0874 316.651 100.353 cv
309.542 104.619 298.017 104.619 290.909 100.353 cv
283.8 96.0874 283.8 89.1729 290.909 84.9082 cv
298.017 80.6431 309.542 80.6431 316.651 84.9082 cv
.746 .676 .668 .898 cmyk
@
grestore
301.376 90.4683 mo
301.376 90.1934 li
300.335 90.2197 li
299.294 90.1934 li
299.294 90.4683 li
300.21 90.4683 300.21 90.8872 300.21 91.1274 cv
300.21 94.9272 li
297.07 90.3081 li
296.99 90.2021 296.98 90.1934 296.811 90.1934 cv
295.298 90.1934 li
295.298 90.4683 li
295.556 90.4683 li
295.69 90.4683 295.868 90.478 296.001 90.4868 cv
296.207 90.5132 296.215 90.5229 296.215 90.6909 cv
296.215 95.3374 li
296.215 95.5776 296.215 95.9956 295.298 95.9956 cv
295.298 96.271 li
296.339 96.2437 li
297.381 96.271 li
297.381 95.9956 li
296.464 95.9956 296.464 95.5776 296.464 95.3374 cv
296.464 90.7085 li
296.508 90.7534 296.518 90.7632 296.553 90.8159 cv
300.184 96.1558 li
300.264 96.2622 300.273 96.271 300.335 96.271 cv
300.459 96.271 300.459 96.2085 300.459 96.0396 cv
300.459 91.1274 li
300.459 90.8872 300.459 90.4683 301.376 90.4683 cv
cp
f
303.877 96.271 mo
303.877 95.9956 li
303.29 95.9956 303.254 95.9507 303.254 95.603 cv
303.254 92.3374 li
302.008 92.4351 li
302.008 92.7114 li
302.586 92.7114 302.667 92.7651 302.667 93.2007 cv
302.667 95.5952 li
302.667 95.9956 302.569 95.9956 301.973 95.9956 cv
301.973 96.271 li
302.952 96.2437 li
303.263 96.2437 303.575 96.2622 303.877 96.271 cv
cp
303.388 90.896 mo
303.388 90.6558 303.183 90.4243 302.917 90.4243 cv
302.614 90.4243 302.436 90.6733 302.436 90.896 cv
302.436 91.1362 302.64 91.3677 302.907 91.3677 cv
303.209 91.3677 303.388 91.1187 303.388 90.896 cv
cp
f
307.846 95.2124 mo
307.846 95.1226 307.757 95.1226 307.73 95.1226 cv
307.65 95.1226 307.632 95.1587 307.615 95.2124 cv
307.357 96.0396 306.778 96.146 306.449 96.146 cv
305.977 96.146 305.194 95.7632 305.194 94.3315 cv
305.194 92.8804 305.924 92.5073 306.396 92.5073 cv
306.476 92.5073 307.037 92.5151 307.348 92.8354 cv
306.983 92.8628 306.929 93.1304 306.929 93.2456 cv
306.929 93.4761 307.089 93.6548 307.339 93.6548 cv
307.57 93.6548 307.749 93.5034 307.749 93.2358 cv
307.749 92.6313 307.072 92.2847 306.386 92.2847 cv
305.274 92.2847 304.456 93.2456 304.456 94.3491 cv
304.456 95.4878 305.336 96.3687 306.369 96.3687 cv
307.561 96.3687 307.846 95.3013 307.846 95.2124 cv
cp
f
312.412 96.271 mo
312.412 95.9956 li
312.083 95.9956 311.886 95.9956 311.548 95.5229 cv
310.417 93.9312 li
310.409 93.9136 310.365 93.8589 310.365 93.8335 cv
310.365 93.7974 310.997 93.2632 311.085 93.1919 cv
311.646 92.7378 312.02 92.7202 312.207 92.7114 cv
312.207 92.4351 li
311.949 92.4624 311.833 92.4624 311.583 92.4624 cv
311.263 92.4624 310.711 92.4448 310.587 92.4351 cv
310.587 92.7114 li
310.756 92.7202 310.845 92.8179 310.845 92.9341 cv
310.845 93.1118 310.72 93.2183 310.649 93.2808 cv
309.395 94.3667 li
309.395 90.0952 li
308.113 90.1934 li
308.113 90.4683 li
308.736 90.4683 308.807 90.5308 308.807 90.9673 cv
308.807 95.5952 li
308.807 95.9956 308.709 95.9956 308.113 95.9956 cv
308.113 96.271 li
309.083 96.2437 li
310.062 96.271 li
310.062 95.9956 li
309.465 95.9956 309.368 95.9956 309.368 95.5952 cv
309.368 94.6782 li
309.937 94.189 li
310.623 95.1323 310.997 95.6304 310.997 95.7905 cv
310.997 95.9595 310.845 95.9956 310.676 95.9956 cv
310.676 96.271 li
311.637 96.2437 li
311.895 96.2437 312.153 96.2534 312.412 96.271 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
262.043 15.7383 mo
269.151 20.0034 269.151 26.9189 262.043 31.1841 cv
254.934 35.4492 243.41 35.4492 236.301 31.1841 cv
229.193 26.9189 229.193 20.0034 236.301 15.7383 cv
243.41 11.4736 254.934 11.4736 262.043 15.7383 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
262.043 15.7383 mo
269.151 20.0034 269.151 26.9189 262.043 31.1841 cv
254.934 35.4492 243.41 35.4492 236.301 31.1841 cv
229.193 26.9189 229.193 20.0034 236.301 15.7383 cv
243.41 11.4736 254.934 11.4736 262.043 15.7383 cv
.746 .676 .668 .898 cmyk
@
grestore
241.834 27.1016 mo
241.834 26.8257 li
241.674 26.8257 li
241.141 26.8257 241.016 26.7637 240.918 26.4697 cv
238.996 20.9077 li
238.952 20.792 238.934 20.73 238.792 20.73 cv
238.649 20.73 238.623 20.7832 238.578 20.9077 cv
236.736 26.2295 li
236.576 26.6836 236.219 26.8169 235.739 26.8257 cv
235.739 27.1016 li
236.647 27.0747 li
237.67 27.1016 li
237.67 26.8257 li
237.225 26.8257 237.002 26.6035 237.002 26.3721 cv
237.002 26.3452 237.011 26.2563 237.02 26.2383 cv
237.43 25.0728 li
239.627 25.0728 li
240.099 26.4341 li
240.108 26.4697 240.126 26.5234 240.126 26.5586 cv
240.126 26.8257 239.627 26.8257 239.387 26.8257 cv
239.387 27.1016 li
239.708 27.0747 240.331 27.0747 240.668 27.0747 cv
241.834 27.1016 li
cp
239.53 24.7969 mo
237.528 24.7969 li
238.524 21.9048 li
239.53 24.7969 li
cp
f
249.364 27.1016 mo
249.364 26.8257 li
248.901 26.8257 248.678 26.8257 248.669 26.5586 cv
248.669 24.8589 li
248.669 24.0938 248.669 23.8179 248.393 23.4976 cv
248.269 23.3462 247.975 23.168 247.458 23.168 cv
246.711 23.168 246.32 23.7021 246.168 24.0405 cv
246.043 23.2661 245.385 23.168 244.985 23.168 cv
244.335 23.168 243.917 23.5508 243.667 24.1025 cv
243.667 23.168 li
242.414 23.2661 li
242.414 23.542 li
243.036 23.542 243.107 23.6045 243.107 24.0405 cv
243.107 26.4253 li
243.107 26.8257 243.009 26.8257 242.414 26.8257 cv
242.414 27.1016 li
243.418 27.0747 li
244.416 27.1016 li
244.416 26.8257 li
243.819 26.8257 243.721 26.8257 243.721 26.4253 cv
243.721 24.7881 li
243.721 23.8623 244.353 23.3643 244.922 23.3643 cv
245.483 23.3643 245.582 23.8447 245.582 24.3516 cv
245.582 26.4253 li
245.582 26.8257 245.483 26.8257 244.887 26.8257 cv
244.887 27.1016 li
245.893 27.0747 li
246.889 27.1016 li
246.889 26.8257 li
246.293 26.8257 246.195 26.8257 246.195 26.4253 cv
246.195 24.7881 li
246.195 23.8623 246.827 23.3643 247.397 23.3643 cv
247.958 23.3643 248.055 23.8447 248.055 24.3516 cv
248.055 26.4253 li
248.055 26.8257 247.958 26.8257 247.361 26.8257 cv
247.361 27.1016 li
248.367 27.0747 li
249.364 27.1016 li
cp
f
253.234 26.0425 mo
253.234 25.9536 253.164 25.936 253.119 25.936 cv
253.039 25.936 253.021 25.9893 253.003 26.0605 cv
252.692 26.9771 251.89 26.9771 251.801 26.9771 cv
251.357 26.9771 251 26.71 250.796 26.3809 cv
250.529 25.9536 250.529 25.3662 250.529 25.0459 cv
253.012 25.0459 li
253.208 25.0459 253.234 25.0459 253.234 24.8589 cv
253.234 23.978 252.753 23.1147 251.641 23.1147 cv
250.609 23.1147 249.791 24.0313 249.791 25.1436 cv
249.791 26.3364 250.725 27.1992 251.749 27.1992 cv
252.833 27.1992 253.234 26.2119 253.234 26.0425 cv
cp
252.647 24.8589 mo
250.538 24.8589 li
250.591 23.5332 251.338 23.3105 251.641 23.3105 cv
252.558 23.3105 252.647 24.5122 252.647 24.8589 cv
cp
f
255.761 27.1016 mo
255.761 26.8257 li
255.166 26.8257 255.068 26.8257 255.068 26.4253 cv
255.068 20.9258 li
253.786 21.0234 li
253.786 21.2993 li
254.409 21.2993 254.48 21.3618 254.48 21.7979 cv
254.48 26.4253 li
254.48 26.8257 254.382 26.8257 253.786 26.8257 cv
253.786 27.1016 li
254.774 27.0747 li
255.761 27.1016 li
cp
f
258.165 27.1016 mo
258.165 26.8257 li
257.577 26.8257 257.542 26.7813 257.542 26.4341 cv
257.542 23.168 li
256.295 23.2661 li
256.295 23.542 li
256.874 23.542 256.955 23.5952 256.955 24.0313 cv
256.955 26.4253 li
256.955 26.8257 256.856 26.8257 256.26 26.8257 cv
256.26 27.1016 li
257.239 27.0747 li
257.55 27.0747 257.862 27.0928 258.165 27.1016 cv
cp
257.675 21.7266 mo
257.675 21.4863 257.47 21.2549 257.204 21.2549 cv
256.901 21.2549 256.723 21.5039 256.723 21.7266 cv
256.723 21.9668 256.927 22.1982 257.195 22.1982 cv
257.497 22.1982 257.675 21.9492 257.675 21.7266 cv
cp
f
262.739 26.3096 mo
262.739 25.8115 li
262.516 25.8115 li
262.516 26.3096 li
262.516 26.8257 262.293 26.8789 262.196 26.8789 cv
261.902 26.8789 261.867 26.4785 261.867 26.4341 cv
261.867 24.6543 li
261.867 24.2808 261.867 23.9336 261.546 23.6045 cv
261.199 23.2573 260.754 23.1147 260.327 23.1147 cv
259.597 23.1147 258.983 23.5332 258.983 24.1206 cv
258.983 24.3872 259.161 24.5386 259.392 24.5386 cv
259.641 24.5386 259.802 24.3608 259.802 24.1294 cv
259.802 24.0225 259.757 23.729 259.348 23.7197 cv
259.588 23.4087 260.024 23.3105 260.309 23.3105 cv
260.745 23.3105 261.252 23.6577 261.252 24.4497 cv
261.252 24.7788 li
260.798 24.8057 260.175 24.8325 259.615 25.0991 cv
258.948 25.4019 258.725 25.8647 258.725 26.2563 cv
258.725 26.9702 259.588 27.1904 260.149 27.1904 cv
260.736 27.1904 261.146 26.8389 261.315 26.4253 cv
261.35 26.7813 261.59 27.1553 262.008 27.1553 cv
262.196 27.1553 262.739 27.0303 262.739 26.3096 cv
cp
261.252 25.8555 mo
261.252 26.6943 260.612 26.9946 260.211 26.9946 cv
259.775 26.9946 259.411 26.687 259.411 26.2471 cv
259.411 25.7578 259.784 25.019 261.252 24.9658 cv
261.252 25.8555 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
192.874 84.9082 mo
199.982 89.1729 199.982 96.0874 192.874 100.353 cv
185.765 104.619 174.24 104.619 167.131 100.353 cv
160.023 96.0874 160.023 89.1729 167.131 84.9082 cv
174.24 80.6431 185.765 80.6431 192.874 84.9082 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
192.874 84.9082 mo
199.982 89.1729 199.982 96.0874 192.874 100.353 cv
185.765 104.619 174.24 104.619 167.131 100.353 cv
160.023 96.0874 160.023 89.1729 167.131 84.9082 cv
174.24 80.6431 185.765 80.6431 192.874 84.9082 cv
.746 .676 .668 .898 cmyk
@
grestore
176.594 93.2808 mo
176.594 91.5903 175.393 90.1934 173.871 90.1934 cv
170.614 90.1934 li
170.614 90.4683 li
170.828 90.4683 li
171.513 90.4683 171.53 90.5669 171.53 90.8872 cv
171.53 95.5776 li
171.53 95.8979 171.513 95.9956 170.828 95.9956 cv
170.614 95.9956 li
170.614 96.271 li
173.871 96.271 li
175.366 96.271 176.594 94.9546 176.594 93.2808 cv
cp
175.704 93.2808 mo
175.704 94.269 175.535 94.8022 175.214 95.2388 cv
175.037 95.479 174.529 95.9956 173.63 95.9956 cv
172.732 95.9956 li
172.313 95.9956 172.296 95.9331 172.296 95.6392 cv
172.296 90.8247 li
172.296 90.5308 172.313 90.4683 172.732 90.4683 cv
173.622 90.4683 li
174.173 90.4683 174.788 90.6646 175.241 91.2964 cv
175.624 91.8218 175.704 92.5874 175.704 93.2808 cv
cp
f
181.399 95.479 mo
181.399 94.981 li
181.177 94.981 li
181.177 95.479 li
181.177 95.9956 180.955 96.0483 180.856 96.0483 cv
180.563 96.0483 180.527 95.6479 180.527 95.603 cv
180.527 93.8237 li
180.527 93.4507 180.527 93.103 180.207 92.7739 cv
179.86 92.4272 179.415 92.2847 178.988 92.2847 cv
178.258 92.2847 177.644 92.7026 177.644 93.2905 cv
177.644 93.5562 177.822 93.7085 178.053 93.7085 cv
178.303 93.7085 178.463 93.5308 178.463 93.2983 cv
178.463 93.1919 178.418 92.8979 178.009 92.8901 cv
178.249 92.5776 178.685 92.48 178.97 92.48 cv
179.406 92.48 179.913 92.8276 179.913 93.6187 cv
179.913 93.9487 li
179.459 93.9751 178.836 94.0015 178.276 94.269 cv
177.608 94.5718 177.386 95.0347 177.386 95.4253 cv
177.386 96.1401 178.249 96.3608 178.81 96.3608 cv
179.397 96.3608 179.807 96.0083 179.976 95.5952 cv
180.011 95.9507 180.251 96.3247 180.67 96.3247 cv
180.856 96.3247 181.399 96.1997 181.399 95.479 cv
cp
179.913 95.0249 mo
179.913 95.8647 179.272 96.1636 178.872 96.1636 cv
178.436 96.1636 178.071 95.8569 178.071 95.4175 cv
178.071 94.9272 178.445 94.189 179.913 94.1353 cv
179.913 95.0249 li
cp
f
185.831 92.7114 mo
185.831 92.4351 li
185.626 92.4536 185.368 92.4624 185.164 92.4624 cv
184.39 92.4351 li
184.39 92.7114 li
184.719 92.7202 184.817 92.9253 184.817 93.0942 cv
184.817 93.1743 184.799 93.2104 184.763 93.3081 cv
183.855 95.5776 li
182.859 93.0942 li
182.806 92.978 182.806 92.9429 182.806 92.9429 cv
182.806 92.7114 183.152 92.7114 183.313 92.7114 cv
183.313 92.4351 li
182.343 92.4624 li
182.103 92.4624 181.747 92.4536 181.479 92.4351 cv
181.479 92.7114 li
182.04 92.7114 182.076 92.7651 182.191 93.0405 cv
183.473 96.1997 li
183.526 96.3247 183.544 96.3687 183.66 96.3687 cv
183.775 96.3687 183.811 96.2886 183.847 96.1997 cv
185.012 93.3081 li
185.092 93.103 185.244 92.7202 185.831 92.7114 cv
cp
f
189.461 95.2124 mo
189.461 95.1226 189.391 95.105 189.346 95.105 cv
189.266 95.105 189.249 95.1587 189.231 95.23 cv
188.919 96.146 188.118 96.146 188.029 96.146 cv
187.584 96.146 187.228 95.8794 187.023 95.5503 cv
186.757 95.1226 186.757 94.5356 186.757 94.2153 cv
189.24 94.2153 li
189.435 94.2153 189.461 94.2153 189.461 94.0288 cv
189.461 93.1479 188.981 92.2847 187.869 92.2847 cv
186.837 92.2847 186.018 93.2007 186.018 94.314 cv
186.018 95.5054 186.953 96.3687 187.976 96.3687 cv
189.061 96.3687 189.461 95.3813 189.461 95.2124 cv
cp
188.875 94.0288 mo
186.766 94.0288 li
186.819 92.7026 187.566 92.48 187.869 92.48 cv
188.786 92.48 188.875 93.6812 188.875 94.0288 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
353.056 55.7842 mo
360.164 60.0488 360.164 66.9634 353.056 71.2295 cv
345.947 75.4946 334.422 75.4946 327.313 71.2295 cv
320.206 66.9634 320.206 60.0488 327.313 55.7842 cv
334.422 51.519 345.947 51.519 353.056 55.7842 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
353.056 55.7842 mo
360.164 60.0488 360.164 66.9634 353.056 71.2295 cv
345.947 75.4946 334.422 75.4946 327.313 71.2295 cv
320.206 66.9634 320.206 60.0488 327.313 55.7842 cv
334.422 51.519 345.947 51.519 353.056 55.7842 cv
.746 .676 .668 .898 cmyk
@
grestore
332.936 64.8511 mo
332.714 64.8511 li
332.616 65.7588 332.492 66.8711 330.925 66.8711 cv
330.196 66.8711 li
329.777 66.8711 329.759 66.8091 329.759 66.5151 cv
329.759 61.772 li
329.759 61.4697 329.759 61.3447 330.605 61.3447 cv
330.899 61.3447 li
330.899 61.0693 li
330.579 61.0957 329.768 61.0957 329.404 61.0957 cv
329.056 61.0957 328.362 61.0957 328.051 61.0693 cv
328.051 61.3447 li
328.264 61.3447 li
328.95 61.3447 328.967 61.4429 328.967 61.7632 cv
328.967 66.4531 li
328.967 66.7734 328.95 66.8711 328.264 66.8711 cv
328.051 66.8711 li
328.051 67.147 li
332.687 67.147 li
332.936 64.8511 li
cp
f
335.517 67.147 mo
335.517 66.8711 li
334.93 66.8711 334.894 66.8267 334.894 66.4795 cv
334.894 63.2139 li
333.648 63.3115 li
333.648 63.5874 li
334.227 63.5874 334.307 63.6406 334.307 64.0771 cv
334.307 66.4707 li
334.307 66.8711 334.208 66.8711 333.613 66.8711 cv
333.613 67.147 li
334.591 67.1206 li
334.903 67.1206 335.214 67.1382 335.517 67.147 cv
cp
335.028 61.772 mo
335.028 61.5317 334.823 61.3003 334.556 61.3003 cv
334.253 61.3003 334.076 61.5498 334.076 61.772 cv
334.076 62.0122 334.28 62.2437 334.547 62.2437 cv
334.85 62.2437 335.028 61.9946 335.028 61.772 cv
cp
f
338.062 67.147 mo
338.062 66.8711 li
337.466 66.8711 337.368 66.8711 337.368 66.4707 cv
337.368 60.9712 li
336.086 61.0693 li
336.086 61.3447 li
336.709 61.3447 336.781 61.4072 336.781 61.8433 cv
336.781 66.4707 li
336.781 66.8711 336.683 66.8711 336.086 66.8711 cv
336.086 67.147 li
337.075 67.1206 li
338.062 67.147 li
cp
f
340.536 67.147 mo
340.536 66.8711 li
339.94 66.8711 339.842 66.8711 339.842 66.4707 cv
339.842 60.9712 li
338.561 61.0693 li
338.561 61.3447 li
339.183 61.3447 339.254 61.4072 339.254 61.8433 cv
339.254 66.4707 li
339.254 66.8711 339.157 66.8711 338.561 66.8711 cv
338.561 67.147 li
339.548 67.1206 li
340.536 67.147 li
cp
f
342.939 67.147 mo
342.939 66.8711 li
342.351 66.8711 342.316 66.8267 342.316 66.4795 cv
342.316 63.2139 li
341.07 63.3115 li
341.07 63.5874 li
341.649 63.5874 341.729 63.6406 341.729 64.0771 cv
341.729 66.4707 li
341.729 66.8711 341.63 66.8711 341.035 66.8711 cv
341.035 67.147 li
342.013 67.1206 li
342.325 67.1206 342.636 67.1382 342.939 67.147 cv
cp
342.45 61.772 mo
342.45 61.5317 342.245 61.3003 341.978 61.3003 cv
341.675 61.3003 341.498 61.5498 341.498 61.772 cv
341.498 62.0122 341.702 62.2437 341.969 62.2437 cv
342.271 62.2437 342.45 61.9946 342.45 61.772 cv
cp
f
347.513 66.355 mo
347.513 65.8569 li
347.291 65.8569 li
347.291 66.355 li
347.291 66.8711 347.068 66.9248 346.97 66.9248 cv
346.676 66.9248 346.641 66.5244 346.641 66.4795 cv
346.641 64.6997 li
346.641 64.3262 346.641 63.979 346.321 63.6499 cv
345.973 63.3027 345.529 63.1602 345.101 63.1602 cv
344.372 63.1602 343.757 63.5786 343.757 64.166 cv
343.757 64.4331 343.935 64.584 344.167 64.584 cv
344.417 64.584 344.577 64.4063 344.577 64.1748 cv
344.577 64.0679 344.532 63.7744 344.123 63.7656 cv
344.363 63.4541 344.798 63.356 345.083 63.356 cv
345.52 63.356 346.027 63.7031 346.027 64.4951 cv
346.027 64.8242 li
345.573 64.8511 344.95 64.8779 344.389 65.145 cv
343.722 65.4473 343.5 65.9102 343.5 66.3018 cv
343.5 67.0156 344.363 67.2363 344.923 67.2363 cv
345.51 67.2363 345.92 66.8843 346.089 66.4707 cv
346.125 66.8267 346.365 67.2007 346.784 67.2007 cv
346.97 67.2007 347.513 67.0762 347.513 66.355 cv
cp
346.027 65.9014 mo
346.027 66.7402 345.386 67.0405 344.986 67.0405 cv
344.549 67.0405 344.185 66.7324 344.185 66.293 cv
344.185 65.8032 344.558 65.0649 346.027 65.0112 cv
346.027 65.9014 li
cp
f
352.425 67.147 mo
352.425 66.8711 li
351.962 66.8711 351.74 66.8711 351.731 66.6045 cv
351.731 64.9043 li
351.731 64.1392 351.731 63.8633 351.456 63.543 cv
351.331 63.3916 351.037 63.2139 350.521 63.2139 cv
349.872 63.2139 349.453 63.5967 349.204 64.1479 cv
349.204 63.2139 li
347.949 63.3115 li
347.949 63.5874 li
348.572 63.5874 348.643 63.6499 348.643 64.0859 cv
348.643 66.4707 li
348.643 66.8711 348.545 66.8711 347.949 66.8711 cv
347.949 67.147 li
348.955 67.1206 li
349.952 67.147 li
349.952 66.8711 li
349.355 66.8711 349.257 66.8711 349.257 66.4707 cv
349.257 64.8335 li
349.257 63.9077 349.889 63.4097 350.458 63.4097 cv
351.019 63.4097 351.117 63.8901 351.117 64.3975 cv
351.117 66.4707 li
351.117 66.8711 351.019 66.8711 350.423 66.8711 cv
350.423 67.147 li
351.428 67.1206 li
352.425 67.147 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
330.146 12.0981 mo
338.676 16.3633 338.676 23.2783 330.146 27.5435 cv
321.616 31.8086 307.786 31.8086 299.255 27.5435 cv
290.725 23.2783 290.725 16.3633 299.255 12.0981 cv
307.786 7.83301 321.616 7.83301 330.146 12.0981 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
330.146 12.0981 mo
338.676 16.3633 338.676 23.2783 330.146 27.5435 cv
321.616 31.8086 307.786 31.8086 299.255 27.5435 cv
290.725 23.2783 290.725 16.3633 299.255 12.0981 cv
307.786 7.83301 321.616 7.83301 330.146 12.0981 cv
.746 .676 .668 .898 cmyk
@
grestore
304.289 21.3877 mo
304.289 21.2988 304.289 21.2363 304.173 21.2363 cv
304.076 21.2363 304.076 21.2896 304.067 21.3789 cv
303.996 22.6514 303.043 23.3809 302.073 23.3809 cv
301.531 23.3809 299.786 23.0786 299.786 20.4268 cv
299.786 17.7656 301.521 17.4634 302.064 17.4634 cv
303.035 17.4634 303.827 18.2729 304.004 19.5723 cv
304.022 19.6968 304.022 19.7236 304.147 19.7236 cv
304.289 19.7236 304.289 19.6968 304.289 19.5098 cv
304.289 17.4009 li
304.289 17.2495 304.289 17.1875 304.191 17.1875 cv
304.156 17.1875 304.12 17.1875 304.048 17.2939 cv
303.604 17.9526 li
303.275 17.6323 302.821 17.1875 301.966 17.1875 cv
300.302 17.1875 298.87 18.6021 298.87 20.4175 cv
298.87 22.2598 300.311 23.6567 301.966 23.6567 cv
303.417 23.6567 304.289 22.4199 304.289 21.3877 cv
cp
f
309.094 22.6689 mo
309.094 22.1709 li
308.872 22.1709 li
308.872 22.6689 li
308.872 23.1851 308.65 23.2388 308.551 23.2388 cv
308.258 23.2388 308.222 22.8384 308.222 22.7939 cv
308.222 21.0137 li
308.222 20.6401 308.222 20.293 307.902 19.9639 cv
307.555 19.6167 307.11 19.4746 306.683 19.4746 cv
305.954 19.4746 305.339 19.8926 305.339 20.48 cv
305.339 20.7471 305.517 20.8984 305.749 20.8984 cv
305.998 20.8984 306.158 20.7202 306.158 20.4888 cv
306.158 20.3818 306.114 20.0884 305.704 20.0796 cv
305.944 19.7681 306.38 19.6699 306.666 19.6699 cv
307.101 19.6699 307.608 20.0171 307.608 20.8091 cv
307.608 21.1387 li
307.155 21.165 306.532 21.1919 305.971 21.459 cv
305.303 21.7612 305.081 22.2241 305.081 22.6157 cv
305.081 23.3296 305.944 23.5503 306.504 23.5503 cv
307.092 23.5503 307.501 23.1982 307.67 22.7847 cv
307.707 23.1406 307.947 23.5146 308.365 23.5146 cv
308.551 23.5146 309.094 23.3896 309.094 22.6689 cv
cp
307.608 22.2153 mo
307.608 23.0542 306.967 23.3545 306.567 23.3545 cv
306.131 23.3545 305.766 23.0464 305.766 22.6069 cv
305.766 22.1172 306.14 21.3789 307.608 21.3252 cv
307.608 22.2153 li
cp
f
312.485 20.0703 mo
312.485 19.7856 312.209 19.5278 311.827 19.5278 cv
311.177 19.5278 310.857 20.124 310.732 20.5068 cv
310.732 19.5278 li
309.495 19.6255 li
309.495 19.9014 li
310.118 19.9014 310.189 19.9639 310.189 20.3999 cv
310.189 22.7847 li
310.189 23.1851 310.091 23.1851 309.495 23.1851 cv
309.495 23.4609 li
310.509 23.4346 li
310.866 23.4346 311.284 23.4346 311.639 23.4609 cv
311.639 23.1851 li
311.453 23.1851 li
310.794 23.1851 310.777 23.0874 310.777 22.7671 cv
310.777 21.3965 li
310.777 20.5156 311.15 19.7236 311.827 19.7236 cv
311.889 19.7236 311.907 19.7236 311.924 19.7324 cv
311.898 19.7412 311.719 19.8481 311.719 20.0796 cv
311.719 20.3286 311.907 20.4619 312.102 20.4619 cv
312.262 20.4619 312.485 20.3555 312.485 20.0703 cv
cp
f
316.925 21.5566 mo
316.925 20.4175 316.036 19.4746 314.958 19.4746 cv
313.846 19.4746 312.983 20.4443 312.983 21.5566 cv
312.983 22.7046 313.909 23.5591 314.95 23.5591 cv
316.027 23.5591 316.925 22.687 316.925 21.5566 cv
cp
316.187 21.4854 mo
316.187 21.8057 316.187 22.2866 315.992 22.6777 cv
315.795 23.0786 315.404 23.3364 314.958 23.3364 cv
314.577 23.3364 314.185 23.1494 313.945 22.7402 cv
313.722 22.3486 313.722 21.8057 313.722 21.4854 cv
313.722 21.1387 313.722 20.6577 313.936 20.2666 cv
314.176 19.8569 314.594 19.6699 314.95 19.6699 cv
315.341 19.6699 315.724 19.8657 315.956 20.2485 cv
316.187 20.6313 316.187 21.1475 316.187 21.4854 cv
cp
f
319.453 23.4609 mo
319.453 23.1851 li
318.857 23.1851 318.759 23.1851 318.759 22.7847 cv
318.759 17.2852 li
317.477 17.3828 li
317.477 17.6592 li
318.1 17.6592 318.171 17.7212 318.171 18.1572 cv
318.171 22.7847 li
318.171 23.1851 318.074 23.1851 317.477 23.1851 cv
317.477 23.4609 li
318.465 23.4346 li
319.453 23.4609 li
cp
f
321.856 23.4609 mo
321.856 23.1851 li
321.268 23.1851 321.233 23.1406 321.233 22.7939 cv
321.233 19.5278 li
319.987 19.6255 li
319.987 19.9014 li
320.565 19.9014 320.645 19.9551 320.645 20.3911 cv
320.645 22.7847 li
320.645 23.1851 320.547 23.1851 319.952 23.1851 cv
319.952 23.4609 li
320.93 23.4346 li
321.242 23.4346 321.553 23.4521 321.856 23.4609 cv
cp
321.366 18.0859 mo
321.366 17.8457 321.162 17.6143 320.895 17.6143 cv
320.592 17.6143 320.414 17.8638 320.414 18.0859 cv
320.414 18.3262 320.619 18.5576 320.885 18.5576 cv
321.188 18.5576 321.366 18.3086 321.366 18.0859 cv
cp
f
326.892 23.4609 mo
326.892 23.1851 li
326.43 23.1851 326.208 23.1851 326.199 22.9185 cv
326.199 21.2188 li
326.199 20.4531 326.199 20.1772 325.922 19.8569 cv
325.798 19.7056 325.504 19.5278 324.988 19.5278 cv
324.338 19.5278 323.92 19.9102 323.671 20.4619 cv
323.671 19.5278 li
322.417 19.6255 li
322.417 19.9014 li
323.04 19.9014 323.111 19.9639 323.111 20.3999 cv
323.111 22.7847 li
323.111 23.1851 323.012 23.1851 322.417 23.1851 cv
322.417 23.4609 li
323.422 23.4346 li
324.418 23.4609 li
324.418 23.1851 li
323.823 23.1851 323.724 23.1851 323.724 22.7847 cv
323.724 21.1475 li
323.724 20.2217 324.356 19.7236 324.926 19.7236 cv
325.487 19.7236 325.584 20.2041 325.584 20.7114 cv
325.584 22.7847 li
325.584 23.1851 325.487 23.1851 324.89 23.1851 cv
324.89 23.4609 li
325.896 23.4346 li
326.892 23.4609 li
cp
f
330.772 22.4023 mo
330.772 22.313 330.702 22.2954 330.657 22.2954 cv
330.577 22.2954 330.559 22.3486 330.542 22.4199 cv
330.23 23.3364 329.428 23.3364 329.339 23.3364 cv
328.895 23.3364 328.539 23.0693 328.334 22.7402 cv
328.067 22.313 328.067 21.7256 328.067 21.4053 cv
330.55 21.4053 li
330.746 21.4053 330.772 21.4053 330.772 21.2188 cv
330.772 20.3374 330.292 19.4746 329.179 19.4746 cv
328.147 19.4746 327.329 20.3911 327.329 21.5034 cv
327.329 22.6958 328.263 23.5591 329.287 23.5591 cv
330.372 23.5591 330.772 22.5713 330.772 22.4023 cv
cp
330.185 21.2188 mo
328.076 21.2188 li
328.129 19.8926 328.877 19.6699 329.179 19.6699 cv
330.096 19.6699 330.185 20.8716 330.185 21.2188 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
208.264 58.7158 mo
188.145 82.8594 li
.746 .676 .668 .898 cmyk
@
223.169 59.0869 mo
238.769 82.4883 li
@
263.852 29.9204 mo
325.504 57.0469 li
@
329.261 72.2451 mo
314.703 83.8916 li
@
305.411 81.7524 mo
313.067 30.7119 li
@
292.991 21.0264 mo
267.296 22.4546 li
@
320.818 30.3071 mo
334.17 53.1953 li
@
256.966 33.334 mo
295.985 82.7573 li
@
246.106 81.7148 mo
248.597 34.377 li
@
198.205 92.6304 mo
227.329 92.6304 li
@
263.734 92.6304 mo
285.577 92.6304 li
@
92.981 33.9409 mo
102.221 38.2061 102.221 45.1211 92.981 49.3862 cv
83.7397 53.6514 68.7568 53.6514 59.5156 49.3862 cv
50.2744 45.1211 50.2744 38.2061 59.5156 33.9409 cv
68.7568 29.6758 83.7397 29.6758 92.981 33.9409 cv
0 0 0 0 cmyk
f
92.981 33.9409 mo
102.221 38.2061 102.221 45.1211 92.981 49.3862 cv
83.7397 53.6514 68.7568 53.6514 59.5156 49.3862 cv
50.2744 45.1211 50.2744 38.2061 59.5156 33.9409 cv
68.7568 29.6758 83.7397 29.6758 92.981 33.9409 cv
0 .938 1 0 cmyk
@
grestore
64.0791 43.2305 mo
64.0791 43.1416 64.0791 43.0791 63.9634 43.0791 cv
63.8652 43.0791 63.8652 43.1328 63.8564 43.2217 cv
63.7852 44.4941 62.833 45.2241 61.8628 45.2241 cv
61.3203 45.2241 59.5762 44.9214 59.5762 42.2695 cv
59.5762 39.6089 61.3115 39.3062 61.854 39.3062 cv
62.8242 39.3062 63.6162 40.1162 63.7939 41.415 cv
63.812 41.54 63.812 41.5664 63.9365 41.5664 cv
64.0791 41.5664 64.0791 41.54 64.0791 41.353 cv
64.0791 39.2441 li
64.0791 39.0928 64.0791 39.0303 63.981 39.0303 cv
63.9453 39.0303 63.9097 39.0303 63.8384 39.1372 cv
63.3936 39.7959 li
63.0645 39.4751 62.6104 39.0303 61.7563 39.0303 cv
60.0923 39.0303 58.6592 40.4453 58.6592 42.2607 cv
58.6592 44.1025 60.1011 45.5 61.7563 45.5 cv
63.2065 45.5 64.0791 44.2627 64.0791 43.2305 cv
cp
0 .938 1 0 cmyk
f
69.3472 45.3042 mo
69.3472 45.0283 li
68.8843 45.0283 68.6616 45.0283 68.6528 44.7612 cv
68.6528 43.0615 li
68.6528 42.2964 68.6528 42.0205 68.377 41.7002 cv
68.2524 41.5488 67.959 41.3706 67.4429 41.3706 cv
66.6953 41.3706 66.3037 41.9048 66.1611 42.2251 cv
66.1523 42.2251 li
66.1523 39.1279 li
64.8711 39.2261 li
64.8711 39.502 li
65.4937 39.502 65.5649 39.5645 65.5649 40.0005 cv
65.5649 44.6279 li
65.5649 45.0283 65.4673 45.0283 64.8711 45.0283 cv
64.8711 45.3042 li
65.8765 45.2773 li
66.873 45.3042 li
66.873 45.0283 li
66.2769 45.0283 66.1792 45.0283 66.1792 44.6279 cv
66.1792 42.9902 li
66.1792 42.0649 66.811 41.5664 67.3804 41.5664 cv
67.9409 41.5664 68.0391 42.0469 68.0391 42.5542 cv
68.0391 44.6279 li
68.0391 45.0283 67.9409 45.0283 67.3447 45.0283 cv
67.3447 45.3042 li
68.3506 45.2773 li
69.3472 45.3042 li
cp
f
72.7734 41.9136 mo
72.7734 41.6289 72.4976 41.3706 72.1147 41.3706 cv
71.4648 41.3706 71.1445 41.9668 71.02 42.3496 cv
71.02 41.3706 li
69.7832 41.4688 li
69.7832 41.7446 li
70.4063 41.7446 70.4771 41.8066 70.4771 42.2427 cv
70.4771 44.6279 li
70.4771 45.0283 70.3794 45.0283 69.7832 45.0283 cv
69.7832 45.3042 li
70.7979 45.2773 li
71.1538 45.2773 71.5718 45.2773 71.9277 45.3042 cv
71.9277 45.0283 li
71.7407 45.0283 li
71.0825 45.0283 71.0645 44.9302 71.0645 44.6099 cv
71.0645 43.2393 li
71.0645 42.3584 71.4385 41.5664 72.1147 41.5664 cv
72.1768 41.5664 72.1948 41.5664 72.2124 41.5752 cv
72.186 41.5845 72.0078 41.6909 72.0078 41.9224 cv
72.0078 42.1719 72.1948 42.3052 72.3906 42.3052 cv
72.5508 42.3052 72.7734 42.1982 72.7734 41.9136 cv
cp
f
75.2202 45.3042 mo
75.2202 45.0283 li
74.6333 45.0283 74.5977 44.9839 74.5977 44.6367 cv
74.5977 41.3706 li
73.3516 41.4688 li
73.3516 41.7446 li
73.9302 41.7446 74.0103 41.7979 74.0103 42.2339 cv
74.0103 44.6279 li
74.0103 45.0283 73.9121 45.0283 73.3159 45.0283 cv
73.3159 45.3042 li
74.2949 45.2773 li
74.6064 45.2773 74.918 45.2954 75.2202 45.3042 cv
cp
74.731 39.9292 mo
74.731 39.689 74.5264 39.4575 74.2593 39.4575 cv
73.9565 39.4575 73.7788 39.7065 73.7788 39.9292 cv
73.7788 40.1694 73.9834 40.4009 74.2505 40.4009 cv
74.5532 40.4009 74.731 40.1514 74.731 39.9292 cv
cp
f
78.6997 44.165 mo
78.6997 43.6934 78.4331 43.4263 78.3262 43.3198 cv
78.0327 43.0347 77.6855 42.9639 77.3115 42.8926 cv
76.8135 42.7944 76.2173 42.6787 76.2173 42.1626 cv
76.2173 41.8516 76.4487 41.4863 77.2139 41.4863 cv
78.1929 41.4863 78.2373 42.2871 78.2549 42.5635 cv
78.2637 42.6436 78.3618 42.6436 78.3618 42.6436 cv
78.4775 42.6436 78.4775 42.5986 78.4775 42.4297 cv
78.4775 41.5308 li
78.4775 41.3799 78.4775 41.3174 78.3794 41.3174 cv
78.335 41.3174 78.3174 41.3174 78.2017 41.4243 cv
78.1748 41.46 78.0859 41.54 78.0503 41.5664 cv
77.7124 41.3174 77.3472 41.3174 77.2139 41.3174 cv
76.1279 41.3174 75.79 41.9136 75.79 42.4121 cv
75.79 42.7236 75.9321 42.9727 76.1729 43.1685 cv
76.4575 43.3999 76.7065 43.4531 77.3472 43.5776 cv
77.543 43.6133 78.2729 43.7559 78.2729 44.3965 cv
78.2729 44.8501 77.9614 45.2061 77.2671 45.2061 cv
76.5195 45.2061 76.1992 44.6992 76.0303 43.9424 cv
76.0034 43.8271 75.9946 43.791 75.9058 43.791 cv
75.79 43.791 75.79 43.8535 75.79 44.0137 cv
75.79 45.1885 li
75.79 45.3398 75.79 45.4019 75.8877 45.4019 cv
75.9321 45.4019 75.9414 45.3931 76.1104 45.2241 cv
76.1279 45.2061 76.1279 45.1885 76.2881 45.0195 cv
76.6797 45.3931 77.0806 45.4019 77.2671 45.4019 cv
78.2905 45.4019 78.6997 44.8057 78.6997 44.165 cv
cp
f
81.957 44.2007 mo
81.957 43.6934 li
81.7344 43.6934 li
81.7344 44.1826 li
81.7344 44.8413 81.4673 45.1797 81.1382 45.1797 cv
80.542 45.1797 80.542 44.3696 80.542 44.2183 cv
80.542 41.7446 li
81.8145 41.7446 li
81.8145 41.4688 li
80.542 41.4688 li
80.542 39.8311 li
80.3193 39.8311 li
80.3105 40.561 80.0435 41.5132 79.1714 41.5488 cv
79.1714 41.7446 li
79.9282 41.7446 li
79.9282 44.2007 li
79.9282 45.2954 80.7554 45.4019 81.0762 45.4019 cv
81.708 45.4019 81.957 44.77 81.957 44.2007 cv
cp
f
84.6621 45.3042 mo
84.6621 45.0283 li
84.0747 45.0283 84.0396 44.9839 84.0396 44.6367 cv
84.0396 41.3706 li
82.7935 41.4688 li
82.7935 41.7446 li
83.3721 41.7446 83.4521 41.7979 83.4521 42.2339 cv
83.4521 44.6279 li
83.4521 45.0283 83.354 45.0283 82.7578 45.0283 cv
82.7578 45.3042 li
83.7368 45.2773 li
84.0483 45.2773 84.3599 45.2954 84.6621 45.3042 cv
cp
84.1729 39.9292 mo
84.1729 39.689 83.9683 39.4575 83.7012 39.4575 cv
83.3984 39.4575 83.2207 39.7065 83.2207 39.9292 cv
83.2207 40.1694 83.4253 40.4009 83.6924 40.4009 cv
83.9946 40.4009 84.1729 40.1514 84.1729 39.9292 cv
cp
f
89.6992 45.3042 mo
89.6992 45.0283 li
89.2363 45.0283 89.0137 45.0283 89.0049 44.7612 cv
89.0049 43.0615 li
89.0049 42.2964 89.0049 42.0205 88.729 41.7002 cv
88.6045 41.5488 88.311 41.3706 87.7949 41.3706 cv
87.145 41.3706 86.7271 41.7534 86.4775 42.3052 cv
86.4775 41.3706 li
85.2231 41.4688 li
85.2231 41.7446 li
85.8457 41.7446 85.917 41.8066 85.917 42.2427 cv
85.917 44.6279 li
85.917 45.0283 85.8193 45.0283 85.2231 45.0283 cv
85.2231 45.3042 li
86.2285 45.2773 li
87.2251 45.3042 li
87.2251 45.0283 li
86.6289 45.0283 86.5313 45.0283 86.5313 44.6279 cv
86.5313 42.9902 li
86.5313 42.0649 87.1631 41.5664 87.7324 41.5664 cv
88.293 41.5664 88.3911 42.0469 88.3911 42.5542 cv
88.3911 44.6279 li
88.3911 45.0283 88.293 45.0283 87.6968 45.0283 cv
87.6968 45.3042 li
88.7026 45.2773 li
89.6992 45.3042 li
cp
f
94.1841 44.5122 mo
94.1841 44.0137 li
93.9619 44.0137 li
93.9619 44.5122 li
93.9619 45.0283 93.7393 45.0815 93.6416 45.0815 cv
93.3477 45.0815 93.312 44.6812 93.312 44.6367 cv
93.312 42.8569 li
93.312 42.4829 93.312 42.1362 92.9917 41.8066 cv
92.6445 41.46 92.1997 41.3174 91.7725 41.3174 cv
91.043 41.3174 90.4287 41.7354 90.4287 42.3228 cv
90.4287 42.5898 90.6069 42.7412 90.8384 42.7412 cv
91.0874 42.7412 91.2476 42.5635 91.2476 42.332 cv
91.2476 42.2251 91.2031 41.9316 90.7935 41.9224 cv
91.0342 41.6108 91.4702 41.5132 91.7549 41.5132 cv
92.1909 41.5132 92.6982 41.8604 92.6982 42.6523 cv
92.6982 42.9814 li
92.2441 43.0083 91.6211 43.0347 91.0605 43.3018 cv
90.3931 43.6045 90.1709 44.0674 90.1709 44.4585 cv
90.1709 45.1729 91.0342 45.3931 91.5947 45.3931 cv
92.1821 45.3931 92.5913 45.041 92.7603 44.6279 cv
92.7959 44.9839 93.0361 45.3574 93.4546 45.3574 cv
93.6416 45.3574 94.1841 45.2329 94.1841 44.5122 cv
cp
92.6982 44.0581 mo
92.6982 44.897 92.0571 45.1973 91.6567 45.1973 cv
91.2207 45.1973 90.856 44.8896 90.856 44.4497 cv
90.856 43.9604 91.23 43.2217 92.6982 43.1685 cv
92.6982 44.0581 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
165.917 85.7114 mo
92.4512 49.6235 li
@
156.468 4.81689 mo
163.577 9.08203 163.577 15.9976 156.468 20.2622 cv
149.36 24.5273 137.834 24.5273 130.727 20.2622 cv
123.618 15.9976 123.618 9.08203 130.727 4.81689 cv
137.834 .551758 149.36 .551758 156.468 4.81689 cv
0 0 0 0 cmyk
f
156.469 4.81689 mo
163.578 9.08203 163.578 15.9976 156.469 20.2622 cv
149.36 24.5273 137.835 24.5273 130.727 20.2622 cv
123.618 15.9976 123.618 9.08203 130.727 4.81689 cv
137.835 .551758 149.36 .551758 156.469 4.81689 cv
0 .938 1 0 cmyk
@
grestore
138.65 16.1802 mo
138.65 15.9043 li
138.169 15.9043 137.982 15.8687 137.715 15.4771 cv
135.66 12.4512 li
137.261 10.9121 li
137.333 10.8408 137.804 10.3867 138.525 10.3779 cv
138.525 10.1021 li
138.294 10.1289 138.009 10.1289 137.769 10.1289 cv
137.448 10.1289 136.941 10.1289 136.639 10.1021 cv
136.639 10.3779 li
136.995 10.3867 137.048 10.5918 137.048 10.6719 cv
137.048 10.814 136.959 10.9028 136.888 10.9653 cv
134.102 13.626 li
134.102 10.7964 li
134.102 10.4756 134.12 10.3779 134.805 10.3779 cv
135.019 10.3779 li
135.019 10.1021 li
134.708 10.1289 134.049 10.1289 133.711 10.1289 cv
133.373 10.1289 132.705 10.1289 132.394 10.1021 cv
132.394 10.3779 li
132.607 10.3779 li
133.292 10.3779 133.31 10.4756 133.31 10.7964 cv
133.31 15.4858 li
133.31 15.8062 133.292 15.9043 132.607 15.9043 cv
132.394 15.9043 li
132.394 16.1802 li
132.705 16.1533 133.364 16.1533 133.702 16.1533 cv
134.04 16.1533 134.708 16.1533 135.019 16.1802 cv
135.019 15.9043 li
134.805 15.9043 li
134.12 15.9043 134.102 15.8062 134.102 15.4858 cv
134.102 13.9287 li
135.135 12.9497 li
136.745 15.335 li
136.799 15.415 136.879 15.5303 136.879 15.6372 cv
136.879 15.9043 136.532 15.9043 136.354 15.9043 cv
136.354 16.1802 li
136.665 16.1533 137.288 16.1533 137.626 16.1533 cv
138.65 16.1802 li
cp
f
142.716 15.1211 mo
142.716 15.0322 142.646 15.0142 142.601 15.0142 cv
142.521 15.0142 142.503 15.0679 142.485 15.1387 cv
142.174 16.0557 141.373 16.0557 141.284 16.0557 cv
140.839 16.0557 140.483 15.7886 140.278 15.4595 cv
140.011 15.0322 140.011 14.4448 140.011 14.1245 cv
142.494 14.1245 li
142.69 14.1245 142.716 14.1245 142.716 13.9375 cv
142.716 13.0566 142.236 12.1934 141.124 12.1934 cv
140.091 12.1934 139.272 13.1099 139.272 14.2222 cv
139.272 15.415 140.207 16.2778 141.23 16.2778 cv
142.316 16.2778 142.716 15.29 142.716 15.1211 cv
cp
142.129 13.9375 mo
140.02 13.9375 li
140.074 12.6113 140.821 12.3892 141.124 12.3892 cv
142.04 12.3892 142.129 13.5903 142.129 13.9375 cv
cp
f
147.495 12.6206 mo
147.495 12.3447 li
147.291 12.3623 147.033 12.3711 146.828 12.3711 cv
146.054 12.3447 li
146.054 12.6206 li
146.383 12.6294 146.481 12.834 146.481 13.0029 cv
146.481 13.083 146.463 13.1187 146.427 13.2168 cv
145.52 15.4858 li
144.523 13.0029 li
144.47 12.8877 144.47 12.8521 144.47 12.8521 cv
144.47 12.6206 144.817 12.6206 144.977 12.6206 cv
144.977 12.3447 li
144.007 12.3711 li
143.767 12.3711 143.411 12.3623 143.144 12.3447 cv
143.144 12.6206 li
143.704 12.6206 143.74 12.6738 143.855 12.9497 cv
145.137 16.1089 li
145.19 16.2334 145.208 16.2778 145.324 16.2778 cv
145.439 16.2778 145.475 16.1978 145.511 16.1089 cv
146.677 13.2168 li
146.757 13.0122 146.908 12.6294 147.495 12.6206 cv
cp
f
149.871 16.1802 mo
149.871 15.9043 li
149.284 15.9043 149.249 15.8599 149.249 15.5127 cv
149.249 12.2466 li
148.002 12.3447 li
148.002 12.6206 li
148.581 12.6206 148.661 12.6738 148.661 13.1099 cv
148.661 15.5039 li
148.661 15.9043 148.563 15.9043 147.967 15.9043 cv
147.967 16.1802 li
148.946 16.1533 li
149.257 16.1533 149.569 16.1714 149.871 16.1802 cv
cp
149.382 10.8052 mo
149.382 10.5649 149.177 10.3335 148.91 10.3335 cv
148.608 10.3335 148.43 10.5825 148.43 10.8052 cv
148.43 11.0454 148.634 11.2769 148.901 11.2769 cv
149.204 11.2769 149.382 11.0273 149.382 10.8052 cv
cp
f
154.908 16.1802 mo
154.908 15.9043 li
154.445 15.9043 154.223 15.9043 154.214 15.6372 cv
154.214 13.9375 li
154.214 13.1724 154.214 12.8965 153.938 12.5762 cv
153.813 12.4248 153.52 12.2466 153.004 12.2466 cv
152.354 12.2466 151.936 12.6294 151.687 13.1812 cv
151.687 12.2466 li
150.432 12.3447 li
150.432 12.6206 li
151.055 12.6206 151.126 12.6826 151.126 13.1187 cv
151.126 15.5039 li
151.126 15.9043 151.028 15.9043 150.432 15.9043 cv
150.432 16.1802 li
151.438 16.1533 li
152.434 16.1802 li
152.434 15.9043 li
151.838 15.9043 151.74 15.9043 151.74 15.5039 cv
151.74 13.8662 li
151.74 12.9409 152.372 12.4424 152.941 12.4424 cv
153.502 12.4424 153.6 12.9229 153.6 13.4302 cv
153.6 15.5039 li
153.6 15.9043 153.502 15.9043 152.906 15.9043 cv
152.906 16.1802 li
153.912 16.1533 li
154.908 16.1802 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
93.5166 34.1963 mo
128.829 18.9263 li
@
126.278 84.9082 mo
134.808 89.1729 134.808 96.0874 126.278 100.353 cv
117.748 104.619 103.917 104.619 95.3872 100.353 cv
86.8574 96.0874 86.8574 89.1729 95.3872 84.9082 cv
103.917 80.6431 117.748 80.6431 126.278 84.9082 cv
0 0 0 0 cmyk
f
126.278 84.9082 mo
134.808 89.1729 134.808 96.0874 126.278 100.353 cv
117.748 104.619 103.917 104.619 95.3872 100.353 cv
86.8574 96.0874 86.8574 89.1729 95.3872 84.9082 cv
103.917 80.6431 117.748 80.6431 126.278 84.9082 cv
0 .938 1 0 cmyk
@
grestore
101.956 90.4683 mo
101.956 90.1934 li
101.68 90.2109 101.324 90.2197 101.093 90.2197 cv
100.079 90.1934 li
100.079 90.4683 li
100.542 90.478 100.728 90.7085 100.728 90.9136 cv
100.728 90.9858 100.702 91.0386 100.684 91.0913 cv
99.0552 95.3813 li
97.3555 90.8872 li
97.3022 90.7632 97.3022 90.7271 97.3022 90.7271 cv
97.3022 90.4683 97.8096 90.4683 98.0317 90.4683 cv
98.0317 90.1934 li
97.7114 90.2197 97.0972 90.2197 96.7593 90.2197 cv
95.6289 90.1934 li
95.6289 90.4683 li
96.2075 90.4683 96.3765 90.4683 96.501 90.8071 cv
98.5659 96.271 li
98.6279 96.4409 98.6724 96.4663 98.7881 96.4663 cv
98.9395 96.4663 98.9575 96.4224 99.002 96.2983 cv
100.986 91.0659 li
101.111 90.7358 101.351 90.478 101.956 90.4683 cv
cp
f
105.694 95.479 mo
105.694 94.981 li
105.471 94.981 li
105.471 95.479 li
105.471 95.9956 105.249 96.0483 105.151 96.0483 cv
104.857 96.0483 104.822 95.6479 104.822 95.603 cv
104.822 93.8237 li
104.822 93.4507 104.822 93.103 104.501 92.7739 cv
104.154 92.4272 103.709 92.2847 103.282 92.2847 cv
102.553 92.2847 101.938 92.7026 101.938 93.2905 cv
101.938 93.5562 102.117 93.7085 102.348 93.7085 cv
102.597 93.7085 102.757 93.5308 102.757 93.2983 cv
102.757 93.1919 102.713 92.8979 102.303 92.8901 cv
102.543 92.5776 102.979 92.48 103.265 92.48 cv
103.701 92.48 104.208 92.8276 104.208 93.6187 cv
104.208 93.9487 li
103.754 93.9751 103.131 94.0015 102.57 94.269 cv
101.903 94.5718 101.68 95.0347 101.68 95.4253 cv
101.68 96.1401 102.543 96.3608 103.104 96.3608 cv
103.691 96.3608 104.101 96.0083 104.27 95.5952 cv
104.306 95.9507 104.546 96.3247 104.964 96.3247 cv
105.151 96.3247 105.694 96.1997 105.694 95.479 cv
cp
104.208 95.0249 mo
104.208 95.8647 103.567 96.1636 103.167 96.1636 cv
102.73 96.1636 102.366 95.8569 102.366 95.4175 cv
102.366 94.9272 102.739 94.189 104.208 94.1353 cv
104.208 95.0249 li
cp
f
110.606 96.271 mo
110.606 95.9956 li
110.144 95.9956 109.921 95.9956 109.912 95.728 cv
109.912 94.0288 li
109.912 93.2632 109.912 92.9878 109.636 92.6675 cv
109.512 92.5151 109.218 92.3374 108.702 92.3374 cv
108.052 92.3374 107.634 92.7202 107.385 93.272 cv
107.385 92.3374 li
106.13 92.4351 li
106.13 92.7114 li
106.753 92.7114 106.824 92.7739 106.824 93.2104 cv
106.824 95.5952 li
106.824 95.9956 106.726 95.9956 106.13 95.9956 cv
106.13 96.271 li
107.135 96.2437 li
108.132 96.271 li
108.132 95.9956 li
107.536 95.9956 107.438 95.9956 107.438 95.5952 cv
107.438 93.9575 li
107.438 93.0317 108.07 92.5337 108.64 92.5337 cv
109.2 92.5337 109.298 93.0142 109.298 93.521 cv
109.298 95.5952 li
109.298 95.9956 109.2 95.9956 108.604 95.9956 cv
108.604 96.271 li
109.609 96.2437 li
110.606 96.271 li
cp
f
114.486 95.2124 mo
114.486 95.1226 114.415 95.105 114.371 95.105 cv
114.291 95.105 114.272 95.1587 114.255 95.23 cv
113.943 96.146 113.142 96.146 113.053 96.146 cv
112.608 96.146 112.252 95.8794 112.048 95.5503 cv
111.781 95.1226 111.781 94.5356 111.781 94.2153 cv
114.264 94.2153 li
114.459 94.2153 114.486 94.2153 114.486 94.0288 cv
114.486 93.1479 114.005 92.2847 112.893 92.2847 cv
111.861 92.2847 111.042 93.2007 111.042 94.314 cv
111.042 95.5054 111.977 96.3687 113 96.3687 cv
114.085 96.3687 114.486 95.3813 114.486 95.2124 cv
cp
113.899 94.0288 mo
111.79 94.0288 li
111.843 92.7026 112.59 92.48 112.893 92.48 cv
113.81 92.48 113.899 93.6812 113.899 94.0288 cv
cp
f
117.948 95.1323 mo
117.948 94.6597 117.681 94.394 117.574 94.2866 cv
117.28 94.0015 116.933 93.9312 116.56 93.8589 cv
116.061 93.7612 115.465 93.646 115.465 93.1304 cv
115.465 92.8179 115.696 92.4536 116.461 92.4536 cv
117.44 92.4536 117.485 93.2544 117.503 93.5308 cv
117.512 93.6108 117.61 93.6108 117.61 93.6108 cv
117.725 93.6108 117.725 93.5659 117.725 93.396 cv
117.725 92.4976 li
117.725 92.3472 117.725 92.2847 117.627 92.2847 cv
117.583 92.2847 117.565 92.2847 117.449 92.3911 cv
117.423 92.4272 117.333 92.5073 117.298 92.5337 cv
116.96 92.2847 116.595 92.2847 116.461 92.2847 cv
115.376 92.2847 115.038 92.8804 115.038 93.3784 cv
115.038 93.6909 115.18 93.939 115.42 94.1353 cv
115.705 94.3667 115.955 94.4194 116.595 94.5444 cv
116.791 94.5796 117.521 94.7222 117.521 95.3628 cv
117.521 95.8179 117.209 96.1733 116.515 96.1733 cv
115.768 96.1733 115.447 95.6655 115.278 94.9097 cv
115.251 94.7944 115.243 94.7583 115.153 94.7583 cv
115.038 94.7583 115.038 94.8198 115.038 94.981 cv
115.038 96.1558 li
115.038 96.3062 115.038 96.3687 115.136 96.3687 cv
115.18 96.3687 115.189 96.3608 115.358 96.1909 cv
115.376 96.1733 115.376 96.1558 115.536 95.9858 cv
115.928 96.3608 116.328 96.3687 116.515 96.3687 cv
117.539 96.3687 117.948 95.7729 117.948 95.1323 cv
cp
f
121.454 95.1323 mo
121.454 94.6597 121.187 94.394 121.08 94.2866 cv
120.787 94.0015 120.439 93.9312 120.066 93.8589 cv
119.567 93.7612 118.971 93.646 118.971 93.1304 cv
118.971 92.8179 119.203 92.4536 119.968 92.4536 cv
120.947 92.4536 120.991 93.2544 121.009 93.5308 cv
121.018 93.6108 121.116 93.6108 121.116 93.6108 cv
121.231 93.6108 121.231 93.5659 121.231 93.396 cv
121.231 92.4976 li
121.231 92.3472 121.231 92.2847 121.134 92.2847 cv
121.089 92.2847 121.071 92.2847 120.956 92.3911 cv
120.929 92.4272 120.84 92.5073 120.804 92.5337 cv
120.466 92.2847 120.102 92.2847 119.968 92.2847 cv
118.882 92.2847 118.544 92.8804 118.544 93.3784 cv
118.544 93.6909 118.687 93.939 118.927 94.1353 cv
119.211 94.3667 119.46 94.4194 120.102 94.5444 cv
120.297 94.5796 121.027 94.7222 121.027 95.3628 cv
121.027 95.8179 120.715 96.1733 120.021 96.1733 cv
119.274 96.1733 118.954 95.6655 118.784 94.9097 cv
118.757 94.7944 118.749 94.7583 118.66 94.7583 cv
118.544 94.7583 118.544 94.8198 118.544 94.981 cv
118.544 96.1558 li
118.544 96.3062 118.544 96.3687 118.642 96.3687 cv
118.687 96.3687 118.695 96.3608 118.864 96.1909 cv
118.882 96.1733 118.882 96.1558 119.042 95.9858 cv
119.434 96.3608 119.834 96.3687 120.021 96.3687 cv
121.044 96.3687 121.454 95.7729 121.454 95.1323 cv
cp
f
126.055 95.479 mo
126.055 94.981 li
125.833 94.981 li
125.833 95.479 li
125.833 95.9956 125.61 96.0483 125.512 96.0483 cv
125.218 96.0483 125.183 95.6479 125.183 95.603 cv
125.183 93.8237 li
125.183 93.4507 125.183 93.103 124.862 92.7739 cv
124.515 92.4272 124.07 92.2847 123.643 92.2847 cv
122.914 92.2847 122.299 92.7026 122.299 93.2905 cv
122.299 93.5562 122.478 93.7085 122.708 93.7085 cv
122.958 93.7085 123.118 93.5308 123.118 93.2983 cv
123.118 93.1919 123.074 92.8979 122.664 92.8901 cv
122.904 92.5776 123.34 92.48 123.625 92.48 cv
124.062 92.48 124.569 92.8276 124.569 93.6187 cv
124.569 93.9487 li
124.115 93.9751 123.492 94.0015 122.931 94.269 cv
122.264 94.5718 122.042 95.0347 122.042 95.4253 cv
122.042 96.1401 122.904 96.3608 123.465 96.3608 cv
124.052 96.3608 124.462 96.0083 124.631 95.5952 cv
124.667 95.9507 124.907 96.3247 125.325 96.3247 cv
125.512 96.3247 126.055 96.1997 126.055 95.479 cv
cp
124.569 95.0249 mo
124.569 95.8647 123.928 96.1636 123.527 96.1636 cv
123.091 96.1636 122.727 95.8569 122.727 95.4175 cv
122.727 94.9272 123.1 94.189 124.569 94.1353 cv
124.569 95.0249 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
83.3218 52.0879 mo
103.814 82.2856 li
@
32.6914 12.0981 mo
39.8003 16.3633 39.8003 23.2783 32.6914 27.5435 cv
25.5825 31.8086 14.0576 31.8086 6.94971 27.5435 cv
-.158691 23.2783 -.158691 16.3633 6.94971 12.0981 cv
14.0576 7.83301 25.5825 7.83301 32.6914 12.0981 cv
0 0 0 0 cmyk
f
32.6919 12.0981 mo
39.8003 16.3633 39.8003 23.2783 32.6919 27.5435 cv
25.583 31.8086 14.0581 31.8086 6.94922 27.5435 cv
-.15918 23.2783 -.15918 16.3633 6.94922 12.0981 cv
14.0581 7.83301 25.583 7.83301 32.6919 12.0981 cv
0 .938 1 0 cmyk
@
grestore
15.522 19.439 mo
15.353 17.4365 li
9.91553 17.4365 li
9.74658 19.439 li
9.96924 19.439 li
10.0938 18.0059 10.2271 17.7124 11.5708 17.7124 cv
11.731 17.7124 11.9624 17.7124 12.0518 17.73 cv
12.2383 17.7656 12.2383 17.8638 12.2383 18.0684 cv
12.2383 22.7578 li
12.2383 23.0605 12.2383 23.1851 11.3042 23.1851 cv
10.9482 23.1851 li
10.9482 23.4609 li
11.313 23.4346 12.2207 23.4346 12.6299 23.4346 cv
13.0396 23.4346 13.9561 23.4346 14.3208 23.4609 cv
14.3208 23.1851 li
13.9648 23.1851 li
13.0303 23.1851 13.0303 23.0605 13.0303 22.7578 cv
13.0303 18.0684 li
13.0303 17.8901 13.0303 17.7656 13.1904 17.73 cv
13.2886 17.7124 13.5288 17.7124 13.6978 17.7124 cv
15.0415 17.7124 15.1753 18.0059 15.2998 19.439 cv
15.522 19.439 li
cp
f
20.1318 19.9014 mo
20.1318 19.6255 li
19.9272 19.6436 19.6689 19.6523 19.4644 19.6523 cv
18.6899 19.6255 li
18.6899 19.9014 li
18.9658 19.9102 19.1084 20.0615 19.1084 20.2842 cv
19.1084 20.373 19.0996 20.3911 19.0552 20.4976 cv
18.1563 22.687 li
17.1685 20.293 li
17.1328 20.2041 17.1152 20.1685 17.1152 20.1328 cv
17.1152 19.9014 17.4443 19.9014 17.6133 19.9014 cv
17.6133 19.6255 li
16.6436 19.6523 li
16.4033 19.6523 16.0474 19.6436 15.7803 19.6255 cv
15.7803 19.9014 li
16.2075 19.9014 16.3765 19.9014 16.501 20.2129 cv
17.8359 23.4609 li
17.6133 23.9863 li
17.4175 24.4756 17.1685 25.0898 16.5991 25.0898 cv
16.5542 25.0898 16.3496 25.0898 16.1807 24.9297 cv
16.4565 24.894 16.5278 24.6982 16.5278 24.5557 cv
16.5278 24.3242 16.3589 24.1821 16.1538 24.1821 cv
15.9761 24.1821 15.7803 24.2979 15.7803 24.5645 cv
15.7803 24.9648 16.1538 25.2852 16.5991 25.2852 cv
17.1597 25.2852 17.5244 24.7783 17.7378 24.271 cv
19.3042 20.4712 li
19.5356 19.9102 19.9893 19.9014 20.1318 19.9014 cv
cp
f
22.5791 23.4609 mo
22.5791 23.1851 li
21.9829 23.1851 21.8848 23.1851 21.8848 22.7847 cv
21.8848 17.2852 li
20.6035 17.3828 li
20.6035 17.6592 li
21.2266 17.6592 21.2974 17.7212 21.2974 18.1572 cv
21.2974 22.7847 li
21.2974 23.1851 21.1997 23.1851 20.6035 23.1851 cv
20.6035 23.4609 li
21.5913 23.4346 li
22.5791 23.4609 li
cp
f
26.4771 22.4023 mo
26.4771 22.313 26.4058 22.2954 26.3613 22.2954 cv
26.2813 22.2954 26.2632 22.3486 26.2456 22.4199 cv
25.9341 23.3364 25.1333 23.3364 25.0439 23.3364 cv
24.5991 23.3364 24.2432 23.0693 24.0386 22.7402 cv
23.7715 22.313 23.7715 21.7256 23.7715 21.4053 cv
26.2544 21.4053 li
26.4502 21.4053 26.4771 21.4053 26.4771 21.2188 cv
26.4771 20.3374 25.9961 19.4746 24.8838 19.4746 cv
23.8516 19.4746 23.0327 20.3911 23.0327 21.5034 cv
23.0327 22.6958 23.9673 23.5591 24.9907 23.5591 cv
26.0762 23.5591 26.4771 22.5713 26.4771 22.4023 cv
cp
25.8896 21.2188 mo
23.7803 21.2188 li
23.834 19.8926 24.5815 19.6699 24.8838 19.6699 cv
25.8003 19.6699 25.8896 20.8716 25.8896 21.2188 cv
cp
f
29.9741 20.0703 mo
29.9741 19.7856 29.6982 19.5278 29.3154 19.5278 cv
28.666 19.5278 28.3457 20.124 28.2212 20.5068 cv
28.2212 19.5278 li
26.9839 19.6255 li
26.9839 19.9014 li
27.6069 19.9014 27.6782 19.9639 27.6782 20.3999 cv
27.6782 22.7847 li
27.6782 23.1851 27.5801 23.1851 26.9839 23.1851 cv
26.9839 23.4609 li
27.9985 23.4346 li
28.3545 23.4346 28.7729 23.4346 29.1289 23.4609 cv
29.1289 23.1851 li
28.9419 23.1851 li
28.2832 23.1851 28.2656 23.0874 28.2656 22.7671 cv
28.2656 21.3965 li
28.2656 20.5156 28.6392 19.7236 29.3154 19.7236 cv
29.3779 19.7236 29.3955 19.7236 29.4136 19.7324 cv
29.3867 19.7412 29.209 19.8481 29.209 20.0796 cv
29.209 20.3286 29.3955 20.4619 29.5913 20.4619 cv
29.7515 20.4619 29.9741 20.3555 29.9741 20.0703 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
54.5342 84.9082 mo
61.6431 89.1729 61.6431 96.0874 54.5342 100.353 cv
47.4258 104.619 35.9009 104.619 28.793 100.353 cv
21.6841 96.0874 21.6841 89.1729 28.793 84.9082 cv
35.9009 80.6431 47.4258 80.6431 54.5342 84.9082 cv
0 0 0 0 cmyk
f
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
54.5347 84.9082 mo
61.6436 89.1729 61.6436 96.0874 54.5347 100.353 cv
47.4263 104.619 35.9009 104.619 28.7925 100.353 cv
21.6836 96.0874 21.6836 89.1729 28.7925 84.9082 cv
35.9009 80.6431 47.4263 80.6431 54.5347 84.9082 cv
0 .938 1 0 cmyk
@
grestore
36.4932 95.4878 mo
36.4932 95.4351 36.4932 95.3374 36.3774 95.3374 cv
36.2793 95.3374 36.2793 95.4175 36.2705 95.479 cv
36.2173 96.1108 35.9058 96.271 35.6831 96.271 cv
35.2471 96.271 35.1758 95.8179 35.0513 94.9897 cv
34.9355 94.2778 li
34.7754 93.7085 34.3394 93.4146 33.8501 93.2456 cv
34.7134 93.0317 35.4072 92.4897 35.4072 91.7944 cv
35.4072 90.9409 34.3931 90.1934 33.0845 90.1934 cv
30.2817 90.1934 li
30.2817 90.4683 li
30.4971 90.4683 li
31.189 90.4683 31.207 90.5669 31.207 90.8872 cv
31.207 95.5776 li
31.207 95.8979 31.189 95.9956 30.4971 95.9956 cv
30.2817 95.9956 li
30.2817 96.271 li
30.605 96.2437 31.2427 96.2437 31.5898 96.2437 cv
31.9365 96.2437 32.5684 96.2437 32.8892 96.271 cv
32.8892 95.9956 li
32.6753 95.9956 li
31.9902 95.9956 31.9722 95.8979 31.9722 95.5776 cv
31.9722 93.3257 li
32.9956 93.3257 li
33.1382 93.3257 33.5117 93.3257 33.8232 93.6284 cv
34.1616 93.9487 34.1616 94.2241 34.1616 94.8198 cv
34.1616 95.3989 34.1616 95.7554 34.5264 96.0933 cv
34.8911 96.4136 35.3809 96.4663 35.6475 96.4663 cv
36.3418 96.4663 36.4932 95.7378 36.4932 95.4878 cv
cp
34.4907 91.7944 mo
34.4907 92.4097 34.2773 93.1304 32.96 93.1304 cv
31.9722 93.1304 li
31.9722 90.8247 li
31.9722 90.6206 31.9722 90.5132 32.168 90.4868 cv
32.2573 90.4683 32.5151 90.4683 32.6934 90.4683 cv
33.4941 90.4683 34.4907 90.5044 34.4907 91.7944 cv
cp
f
40.7915 92.7114 mo
40.7915 92.4351 li
40.5864 92.4536 40.3286 92.4624 40.124 92.4624 cv
39.3496 92.4351 li
39.3496 92.7114 li
39.6255 92.7202 39.7681 92.8716 39.7681 93.0942 cv
39.7681 93.1831 39.7588 93.2007 39.7144 93.3081 cv
38.8159 95.4976 li
37.8276 93.103 li
37.7925 93.0142 37.7744 92.978 37.7744 92.9429 cv
37.7744 92.7114 38.104 92.7114 38.2729 92.7114 cv
38.2729 92.4351 li
37.3027 92.4624 li
37.0625 92.4624 36.7065 92.4536 36.4395 92.4351 cv
36.4395 92.7114 li
36.8667 92.7114 37.0356 92.7114 37.1606 93.0229 cv
38.4951 96.271 li
38.2729 96.7964 li
38.0771 97.2856 37.8276 97.8999 37.2583 97.8999 cv
37.2139 97.8999 37.0093 97.8999 36.8403 97.7397 cv
37.1157 97.7046 37.187 97.5073 37.187 97.3657 cv
37.187 97.1343 37.0181 96.9917 36.8135 96.9917 cv
36.6353 96.9917 36.4395 97.1069 36.4395 97.3745 cv
36.4395 97.7749 36.8135 98.0952 37.2583 98.0952 cv
37.8188 98.0952 38.1841 97.5874 38.3975 97.0815 cv
39.9639 93.2808 li
40.1948 92.7202 40.6489 92.7114 40.7915 92.7114 cv
cp
f
45.6592 96.271 mo
45.6592 95.9956 li
45.0361 95.9956 44.9648 95.9331 44.9648 95.4976 cv
44.9648 90.0952 li
43.6836 90.1934 li
43.6836 90.4683 li
44.3062 90.4683 44.3774 90.5308 44.3774 90.9673 cv
44.3774 92.8901 li
44.1196 92.5698 43.7368 92.3374 43.2563 92.3374 cv
42.2061 92.3374 41.272 93.2104 41.272 94.3579 cv
41.272 95.4829 42.144 96.3608 43.1582 96.3608 cv
43.728 96.3608 44.1284 96.062 44.3511 95.7817 cv
44.3511 96.3608 li
45.6592 96.271 li
cp
44.3511 95.2212 mo
44.3511 95.3813 44.3511 95.3989 44.2529 95.5483 cv
43.9858 95.9702 43.5854 96.1636 43.2026 96.1636 cv
42.8022 96.1636 42.4819 95.9351 42.2686 95.5981 cv
42.0371 95.2358 42.0103 94.7319 42.0103 94.3667 cv
42.0103 94.0376 42.0283 93.5034 42.2861 93.103 cv
42.4731 92.8276 42.8115 92.5337 43.292 92.5337 cv
43.6035 92.5337 43.9771 92.6675 44.2529 93.0679 cv
44.3511 93.2183 44.3511 93.2358 44.3511 93.396 cv
44.3511 95.2212 li
cp
f
49.6104 95.2124 mo
49.6104 95.1226 49.5391 95.105 49.4946 95.105 cv
49.4146 95.105 49.3965 95.1587 49.3789 95.23 cv
49.0674 96.146 48.2666 96.146 48.1772 96.146 cv
47.7324 96.146 47.3765 95.8794 47.1719 95.5503 cv
46.9048 95.1226 46.9048 94.5356 46.9048 94.2153 cv
49.3877 94.2153 li
49.5835 94.2153 49.6104 94.2153 49.6104 94.0288 cv
49.6104 93.1479 49.1294 92.2847 48.0171 92.2847 cv
46.9849 92.2847 46.1665 93.2007 46.1665 94.314 cv
46.1665 95.5054 47.1006 96.3687 48.124 96.3687 cv
49.2095 96.3687 49.6104 95.3813 49.6104 95.2124 cv
cp
49.0229 94.0288 mo
46.9136 94.0288 li
46.9673 92.7026 47.7148 92.48 48.0171 92.48 cv
48.9341 92.48 49.0229 93.6812 49.0229 94.0288 cv
cp
f
53.1074 92.8804 mo
53.1074 92.5952 52.8315 92.3374 52.4487 92.3374 cv
51.7993 92.3374 51.479 92.9341 51.3545 93.3159 cv
51.3545 92.3374 li
50.1172 92.4351 li
50.1172 92.7114 li
50.7402 92.7114 50.8115 92.7739 50.8115 93.2104 cv
50.8115 95.5952 li
50.8115 95.9956 50.7139 95.9956 50.1172 95.9956 cv
50.1172 96.271 li
51.1318 96.2437 li
51.4878 96.2437 51.9063 96.2437 52.2622 96.271 cv
52.2622 95.9956 li
52.0752 95.9956 li
51.4165 95.9956 51.3989 95.8979 51.3989 95.5776 cv
51.3989 94.2065 li
51.3989 93.3257 51.7725 92.5337 52.4487 92.5337 cv
52.5112 92.5337 52.5288 92.5337 52.5469 92.5425 cv
52.52 92.5513 52.3423 92.6577 52.3423 92.8901 cv
52.3423 93.1382 52.5288 93.272 52.7246 93.272 cv
52.8853 93.272 53.1074 93.1655 53.1074 92.8804 cv
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.1162 34.645 mo
35.1191 25.7427 li
@
69.1743 52.0879 mo
48.5288 82.5122 li
@
23.0454 30.5703 mo
38.438 81.8804 li
@
163.75 41.2222 mo
170.858 45.4868 170.858 52.4023 163.75 56.6675 cv
156.641 60.9326 145.116 60.9326 138.008 56.6675 cv
130.899 52.4023 130.899 45.4868 138.008 41.2222 cv
145.116 36.957 156.641 36.957 163.75 41.2222 cv
0 0 0 0 cmyk
f
163.75 41.2222 mo
170.858 45.4868 170.858 52.4023 163.75 56.6675 cv
156.641 60.9326 145.116 60.9326 138.007 56.6675 cv
130.899 52.4023 130.899 45.4868 138.007 41.2222 cv
145.116 36.957 156.641 36.957 163.75 41.2222 cv
0 .938 1 0 cmyk
@
grestore
149.682 48.5625 mo
149.512 46.5605 li
144.075 46.5605 li
143.906 48.5625 li
144.128 48.5625 li
144.253 47.1299 144.387 46.8364 145.73 46.8364 cv
145.891 46.8364 146.122 46.8364 146.211 46.854 cv
146.398 46.8896 146.398 46.9878 146.398 47.1924 cv
146.398 51.8818 li
146.398 52.1846 146.398 52.3091 145.463 52.3091 cv
145.107 52.3091 li
145.107 52.585 li
145.472 52.5586 146.38 52.5586 146.789 52.5586 cv
147.199 52.5586 148.115 52.5586 148.48 52.585 cv
148.48 52.3091 li
148.124 52.3091 li
147.19 52.3091 147.19 52.1846 147.19 51.8818 cv
147.19 47.1924 li
147.19 47.0142 147.19 46.8896 147.35 46.854 cv
147.448 46.8364 147.688 46.8364 147.857 46.8364 cv
149.201 46.8364 149.334 47.1299 149.459 48.5625 cv
149.682 48.5625 li
cp
f
152.974 51.5264 mo
152.974 51.437 152.903 51.4194 152.858 51.4194 cv
152.778 51.4194 152.76 51.4727 152.743 51.5439 cv
152.431 52.4604 151.63 52.4604 151.542 52.4604 cv
151.096 52.4604 150.74 52.1934 150.536 51.8643 cv
150.269 51.437 150.269 50.8496 150.269 50.5293 cv
152.751 50.5293 li
152.947 50.5293 152.974 50.5293 152.974 50.3428 cv
152.974 49.4614 152.494 48.5981 151.381 48.5981 cv
150.349 48.5981 149.53 49.5151 149.53 50.6274 cv
149.53 51.8198 150.464 52.6831 151.488 52.6831 cv
152.574 52.6831 152.974 51.6953 152.974 51.5264 cv
cp
152.387 50.3428 mo
150.278 50.3428 li
150.331 49.0166 151.079 48.7939 151.381 48.7939 cv
152.298 48.7939 152.387 49.9956 152.387 50.3428 cv
cp
f
157.922 52.585 mo
157.922 52.3091 li
157.299 52.3091 157.228 52.2471 157.228 51.811 cv
157.228 46.4092 li
155.946 46.5068 li
155.946 46.7832 li
156.569 46.7832 156.641 46.8452 156.641 47.2813 cv
156.641 49.2036 li
156.382 48.8833 156 48.6519 155.519 48.6519 cv
154.469 48.6519 153.535 49.5239 153.535 50.6719 cv
153.535 51.7969 154.407 52.6738 155.421 52.6738 cv
155.991 52.6738 156.391 52.376 156.614 52.0957 cv
156.614 52.6738 li
157.922 52.585 li
cp
156.614 51.5352 mo
156.614 51.6953 156.614 51.7129 156.516 51.8623 cv
156.249 52.2847 155.849 52.4785 155.466 52.4785 cv
155.065 52.4785 154.745 52.2485 154.531 51.9121 cv
154.3 51.5498 154.273 51.0454 154.273 50.6807 cv
154.273 50.3516 154.291 49.8174 154.549 49.417 cv
154.736 49.1411 155.074 48.8477 155.555 48.8477 cv
155.866 48.8477 156.24 48.981 156.516 49.3813 cv
156.614 49.5327 156.614 49.5508 156.614 49.7109 cv
156.614 51.5352 li
cp
f
gsave
0 105.169 mo
360.005 105.169 li
360.005 0 li
0 0 li
0 105.169 li
cp
clp
.809 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.4028 43.9229 mo
132.911 47.1919 li
@
169.081 48.9443 mo
198.205 48.9443 li
@
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (012x005.eps)%%CreationDate: 27/05/15 12:18 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6pO;BgdkH)cJ9uel,U!?H90+AppYJ7=/'/,!!b@YlO71f;)&6@6[P;>XcT^MTC]?;DYq1l(UM8.Il#`Wpe#7^Ph?qNBQBJOi%,umT1C8RQO/0g9PDh";.3rUm;acL$aR$AuNJC4_N20_R9.]*WXQ("m@?aWAt\D;P7FZRKR^"Mg)-&[7S)TdWS)a()FDeerko?Us@%??uKCV"6\E;u*1p.lZ3iPqKG,Pn5>o:PGF%HM-djl_W0=8uf=Z@.f@UH-q2STN_7g_)mY.qG4MB%$fDD4(%KeK+H0Ro)5Z@m6X#;%'1B-NE3go9#Z16Pm+lCCmA&-I=1TKu`^>J<fl"74.d^#V?%W(b=\5'j6D'h#^0:2%[mioa8pXMC<6;'8SX"k'P#@/<%tK&=KdBFL%0pd!i5<`h3/g[uBQ"mEq.?napcT_=5\h%Wc,gfEajRf?VCL8n^\q$?/+IePXTNSDITeYa/EkV%`H2n\iT<uCZV>XH\_O*:J5M5_,%Ur?Pg+kX!r?#*C(@09$%>3!8@8[)GV1c&k13mu??X<deK(mIig=k0#HAbVD>MmZq5]Q+[?jqn<gW;Z8[d9*];Mi(9ME3&q7Fbe=C%Or"!=ph)2;J"-I6&VWDm]<qi1*-eK.i79,Efn2*7_"g'r=ekNg"HsQNWC]YhO=:/_1eO$NALV=1Q3IH^=0h=>(HG-?J#\BuL4Pu*%NM"06LT2j'<E4FHWq]Onl-jYjhkk<0#*q"Qr+-^IatU&a@?esJ:><cD[Z+j7)jpm0@O^'O;YU\cYuIuaV2@]hZWP-n`?LTsQgne#%C`)qj\W"kXAblnUR,Ud/Te4]jpa1Kn!dilRQGPiE-^MV5nXe0AfH^=41>!iL`-uc"d!)`jpkcbi8,.ou;***nYt+SGrPlSX`BI_"%Pa\t-/;=&>:FoEs,E.Zo@SUW2WCX"ATCbk3F,E-"S`3+C8'LcGnIkI9QGWX[-e:[UOS5,,UEbMCYnZnmO"dC;I2Dd9TD/e@8&l]9%.HUoP:Fq4u_bW=NPY3E1C&?O,k5iMko+)p!MBAZUQD/K]FJ1jqfH]Mm0A8%\R?&.9_>dp]llG7_llEf7HVL,As6p[p;?"T7;4>jU%nIs)Rmh0?[fmN3ab0^tQGB4hf]Y_2g0rLO.H%F9L5,OS4'K\p0g+K3@@a7JspPn0mV0M=5G5=CN:B+28l-,sY9ZN[OL=T0Js![oY%Z^ngo8FtO"c7D^<QhMqQF1uko&)VPULsL0ePW>#bEBoIB-1Pi=)B;h=05m3.9AbtFM>Y9+<%?&WT;'[[mU,f$2&H75s3cCR['!>`%qj7:<:&<WC9E/-1rG>]MD2\A9kNNZS0E"s#d,47uqCds`PpjTL9E/jHdbjJ"qG2/2;0e13LS&Znl#6QZre:>#>#Ebl,m>`a#GRM0%]pLI>9FH<M72rt-l2S^Xr5.>;%I"BL'5>E:,8B%@8/Y;-N_/*%/\p8,/?rjWG$\d16*WbW13oMCDpolK?hA9aL:SY3")@oMQh%Fb%Jo?mGYsuMu6I&t@aNjZO"gH=Z<`K?VqW%_/#7B%6g;s;imLhdYDZ!4E7(?ADp"Km:rZ,Vq[^A\A//(&n76<0=?he6r=YECQNV-\]%Ar5,qD4:`D"j2rTUd)FW@#TtS:2>HfUbgf*"B,&O3-6XV[n<r[mH=nrPkE%j=O;M\p2i>Jpm:ou&gj^gH9ljDHfOaoKR\Pf18/<J%;&uS:mu`'fVHYDiHWiA)!+J\P:8odnG;(n"mjV<L)V@=04MK&o.<&U6HCnh]l2P<ipH7b#rf;!8hb?be1CC\Q:O.K=a"1@3r@L4N%[lKur-^4q`j]R'Z:4'p6E-Re1)BH)q91<Ye=0USn6N?%(g(J8=iPI\r0nXpf]r(HX$?2B61Q"IK$Kiop6R@rFJ_*HYcWcWdpf$ar%`+BY+:@&3p:,('4gnn>.Dt$m\bj%<CWs">)UH,I0Uc;dYh7b$K\M0HB25;qP0kX2OP`f94OC"t]ek#3We,Q+*);D#?npV0s^`7Q3%<G&QTpmKDmlifM:R;AQAVK*#`)+;5<S/G<aQ`=.8jVBl^BF3*rhW5hFSkpK%'IG%2,?>GegA)+fS0#3sa.74W4[O3-qa$nc<i0)U%cSeC6#;7%RL@N4X%28pO+B'^S,_GC*(^VLebeA.)<!h\UI)7.s+jaS;3)F\Y\fo3cL:MpUQ:!)JCJ4f@EY6>t+d1D/'FD3u08u:X%4QRPMa0<d`8X[gIeXZqM#,=*7I*Gl.cRi49pQhIOUlrir,B('cs!$H(k*2Zd&mhmN5BD[9o!cj9U;/M#s.#^\*cq,*REZ^Q0(%=O%jIJ"KndIu]GBhX!#0rj*1RUoh.VtE83M$Y#Zk4",\^Pn?$.)u[2jPK[AoN#kB;e0n_\r7OQ-TS?6f_7aebIW>RRhIpO%Qt1O[;eR%*"AU)B+@(]7!:Fug"c5F.n>'"1c-3^?(c4tb&3OrLsFO=H\,s_JtURPeah"EpJG2RFRl:g<s8KhE$*ID#,dojnO+hp8pI_QW2([2%kFHMqj#/ffOcG%%'?6Np,rV*hgp5nF`1=RoI[#H"CO&u6i]#KK@FQg5\Xn#L1"gq3q&FJF.LX\09J&q%,"r5$>iiCgBP0,,Y.58,%]#YcV6<T]'Pg;?Q#T*%l_/p7B,cjEqT+%'1$-i(e86T=<+Rb/^jk:jl$^Xd4b.&G/oRcF5H7"dRNb(`7/r6gWQ,2*:>!nhGOa;:Z%!rJ$qgUp;=kiB:?QX-'5U?k>Yb\&`,412&!hEKE/Nng@Y)&8(bg1+/qhSZfkU$o!_P10Cjp0(%X6&t%WHSpm@?g7L;(p@@T2i4C^%40;FE88JE1=qR:('Th!mQ`0VPXmri)$/sOMU]k@#C4]tG1Kp+KY2=?tk?'OA:].Cc-'M,W$(B$*>;<mO[DY0WAdu#S2dLjKgN)tF%b>"5Q\-;54@?o/5B$8Z31bRUoVP\3g?3-a"fsP57@rb)^DZ_^G=HZBF9pJh_bdoBH0:%YBGq*QB@cba;,,,7a4[DrJ\WlhP6](/%%(3_)A$[b,O42t`mbSI%e1Yr:*iY=jQiQ;0SN.7`HPq1=&2A5K*[2lbol$BOnh]U&WD@KM^i)mU=G)P3>)gS07kR@/IiO0B^672*X%41C"L]7ns_N%58>`ZqL!%2"&_dZ7R"30kCOZUI'Q*:;+HbWRt(\^<=Wa=,QlUQG[L@laCAn=Io%8=ms*:R7uNWnT-23cq&r5..,`%h(3VCg6LBPX]T12'q:N/^EdiM2N;o3>cW][c$`24C\%;cZ(r@2i*n<`,FkK>aphT2&:/D8A<K:/r_.JpF+mOsN$gTi%>/@*Mcoe7%-09JLi$tm.4F5QoAkARs+""Cm#fi084d5&,f:k$QlOq8,FM&em73#ap*KuF-f<.$"-+;j9Po\&co08RA?G9m7#9=[bZnPcI\+^?B%k`,o8[k,IEaD[V@.7SH[".>+7h.K[hb7Yi/oOakUX%)_cZ2'*SH6'_kFPLcbRr@qeo:8!(X*&nqFD6^3IQD:3l&Q$$=!\?u'C4nm%rWA4ig<H8@:?,D30q5@)?Y[^SG3'Hr-')A]f3Z(Wj=CDChp-[7]!ZA9UQp\;W*HO5CJ"@6?7%o4hu7P\C;65)0DBSrh/*!dX#F6L%[19"\W$\\tm8j7eO6`'#V4AlNVrmr=5N#*:B]Rb3_I?JJCNirI0_,Q"ibK[2JFFsV6^@(dZ;@_^WZA!TqU:?^L%VY<lkL<pgW;eZ%Vt6KBD`6oV[GFDKm0l[]=T74*`\Db4ER^Wal>;@mn@+X#GQ2ff5j@bRi8MG]p0sk)s*/<\>43Q:5n*rZG?U`e#%=UJ^L!B%O3X*8%:BKUeddDRsen\oJGIk2cW7m=O^HNQ9?pl3p>\om:/_mq#4F=9=C8B/CH^U*\F"5\35QZj!G&]6?ptG?HDT1i=?*AA`\\1K(cNa3-%>Y<5sJb6#@e@Q6ZAF?\m<D+qiEb?J$/a*Nl+si9_'&*uf$/\JkHum54K($gCP1P3$O'VPO)aJm"ALVnd]R,a'<<-Bu-?'L7FZ#;V%@W+8hbX&l1QXC))Eq/JMal?",#)l?^3.=GPm=IWo3f0HA0upJSj+>_cYA4[^mR)+@h0So_$4J^kZ:#d3`klKi*sRIWI)(id)6S?k%%b9c=3W9tP'7YGC+uLk;^WCCCRG39_Zd=l*F@m1bT%pM+hL6qm+DdJu<$2QF?;BVi0P/lEa6d'.ecnii?MgdmgoPsH.k`";O7(o4%0WuJ*,N[[f8tP5fqFm14l"R7dWj7gY5Mamd2gJSX.Fe@l+#7:sGB4:CBD1bd<rMgh&fr1]?8OiPRoSD"2B!9\?")K&@,;K[]1HOW%>,gLX^eOs31cd3B*#c#1-f<W"eR[k'Iqh_kKUu7jrL])3lXpl-J"p2u=4C!R?p_>rT!+c4`U-8gD'.-.9"1+66*3b\+Y9.q51i)Q%*g.,)S`HW@lb(PnIFT95?kGUA:=k)is&#cqYQ?`K]D/o5GDeW/jkK/0AJ6^$?aXdJ$J[L"!qL:9r)%0X<.IFl\=J*O'*!(orf^;`%G0@P4J(1MQ>?Dc8C_7#klt_*`r,`Ou"nJUYYQ%_i<)E=^h"hNlD!Wd"0ueG6UH(ElkWHQXFLo`#jcI=\cH:W[(jI-KLP%]kqBK>@%J.FaAf$7\G(?2RYOB_d6#BlpNV&ugG5)<=-s*^[UHdU"FF\m+dCB+8jRZ0!Nr"o7MZ2Z2^?iX@!Dk8L7M<+&NkLZ@+2%A3;J%Yc1%6N*%,S2GfMY;MK^n?;2BO6?D7kbMT?;uball9R2nn%QJDGpNEuhY\DDRm0-;h=pn318Lusl.WnR7h#4M?G4rShVS.!gTmVfA](tV%A_l@up\*pLf`gtd^\4^$F%Q6&OSb+=P-4J$i*W3p5r\bW>h>!3iJ\(g+TN[#)%:[fg>/*-V-Qg0@R_/^Xt,rMKpG:[aVSS,qA*ph%1X=?i<=^`3%oVXr]>b0)[os";fha9N.ETJ%`Cf0O9'=D))Mr'aO2dQOa$O1Sc&Y?gZrTD0T$l;Eb'iung%iE"aA^'O23hjqq,<n.%f]hH7Z7J'$g@DTJ8Q+scQat([\?>JOC"4_`+&psdoRU^Z7aa,1>sOaL85f9%#qo_Y@I-b253Cp>&u#PNVJ:&WZmo'6'IKHce^d7A%kmF90=/Eeq_1rapZL&lBVq(/1hQ,-j>_^Sn,kF7VVA#N]10F:(0FqohpHAW%^?d/MU)7U0P/!LeArF]7Rt&rA/IVV86t^'o$eehs%G+\T$nkZsERId`8mJna+PR0K?OYqlQYVq<JMbbbC[p3I>&7h4oh>0X:QL&_Jbtfr9P`RrP*J#-[\(CIH$YY)gTYFm7]`GRS:7'Q2%C:BZtmq-'6:p.)F<k)84f8F$C]Ajo:Y$>m'gIK#-F_ZBN#baMmp(qXP&q]CXd5KsC`BU"5)!mS]^!_/e1<QmS3FXBDN\j[%;9#cL%Op>,AU;Bh]a27(5P^0>#l@ecHMc+;HAQ?]+b`MNiBa94'-/H:N\n-UN/1E&fXDUIMD"Fj5UVJ(2Sg$seAYkLN0qXm*[d4fork`<O%Pre5oBn@8-A@q:lM"G8Tn^2W;WD/8t$K,3g5gs1BJ6NZ%]0oTB?\N2):rR^d-+k<h';tWe8*>N-$_;Djh-0GTA0;,,9i+8?NG@ja%njg=@#=&5=B=6?'KBj4U#I:A8&Xt+,rBsDc$o?b]&fr!+BLrXXNicN@GAq%:JRcV54.ED3o*VhfTsJ-@FBp&gKh?2-Ek1aEb;\;C%I1)71pe$=IJCEgLB!X<O*Z)?Zpt7o)0'\VLp\c!_%fT<MbTFb2iNee,m?,)VPn@-POhHlf&Tgd$LaGOo\\!fF^,F`r>.)t49BH_R%?-d"XXm5>SmIA5([5p/;MsLnJH;?6'A3%2GI$WPX`JZfLE)RNTK(^-gY&D0`3V"%^*ZGSW0pm8km7R$ROhb/";<P"1M[OeZ(+N'T%aX]m*E]=_LV`s2$rQ2Tf=g%GkopL6-f4rjuY@#tT:(=.(^n2Y9+H,^$IV$&1g$HH)g6p=AKp&WHIt)br4C:AsCX(hjfjYWW;)MK?%g,dKZG4L**kNjTG.u%Xg.SGXEC%n$%Dks;qk-'hl/J>`MGhjGQ'oTH"m7rtM^G3s,RjI/HNCMCiDs:Bu']Puq-\BdRi(rC@:Q\f_%f5]KVN472#XQ-Kb[aF-Vq$Jr_eXo#/3rNf<D2+)T'L2aa\j3S&1U'ONKug])8\qR\6V;sZ'JMb(9"+[E9g-"Za#FT?J/01)keW$@%i';P1$,XSeoGs"=WC>E?QdJ$tF<_.omCHgS0!`\;:@+"N,pfKpU\7`.\*\h_HMKg_`B"ifGjUPq4hQqbNGc2roA[74r'dXY<r5tI%(#P_(>cD*6OrK*%3?ec`-B2?O0&Cb7bo!:hbuX2:FYIobSnY^5(U8ut>eiBiBa<r@ANa-#lR*>'GcA'FQlF5VKcPO!6VNBG.W:ts%IROMfg2aeC+d1W@0Z:8S*noRfm2'MR@<Ecm+2=9u0H[l5Q'Pe2oMI`H%=#M^dH)i2c5T`j\S<ma[N4.rfS:.^2&&%BYO-'?6VmAI%/,Mi\EY6g<@U64Mq-LNq,nFQJYHNp6iBYSnlE>[F;4(am3p;$6h#!Can(5VR>CS\!R<NQddU/fh!i+.+"TE2M2r"AM".s#`RVfE>%.t&nK\$Jg@nHBH4M_<1qGH9DV1+f2q.t%4J0[>qs]*1h="=kKRWF?PVCrRSjeLC70f%HfJXO]ESDiK41Cphu"Z?\9a&[9W/di23o%.J@De@cDuK6tNO6RP!'=JHW##?iEfdg7[!NI09tkmZ*>S"e.hTkQ;>IoOoN+1ntEdqFJ&hM`T"Z?U7a,=dft(<2>t##E*p^f`K,=%'WKNGQ3b#/Ka)KZ3o)hIhJ-'.S&Sp=Br>3pR\;9-bdt#F)WN-6.(-KrjZ*qs>+YUG6A@djVq8$%CW,[a=/2(P4m#RL1=$=Ud6[ID%muDTf='p!71r<Q1NVF'Ob-Pe%X,,CWmbP3DU']%t5BiZ_cnZY$?UUFf"!TGf#ojY!Q))K%8P[6)&h,BOi$(-KJ-!VskOYGP.\cGN%c31;GY1KHHEDd8n.u;BXpf`8&PmMC%6\<)$8&?MBon8\1L"bIuZo^,j<',n#GFL7QiZiE?ll4oTaAWVIKTE/m8juDI%o`.6H%K-$%a3.p96_ilu3@6s/A=X3i(B<ab#n4R-s4mUPqQ&s3eu85<:RkGaW#^Edp]-cD]u.D9bIh^bOZ*LLBh!/RE$"L]M&aB$#Yp3R=`J)p%dRuH.7]^`]9n,(af.UKO;JuJA@=J0gX5Z',><,haSHgOf2tC?Z>sIcn9#'_pcgAj'eOo(mFL1*l<T[@YNV?CAh-Nf-k%7@%l.#Xb%k=R4FG\a2mhETrGo<2tFrb(IH[;^(j8hEX?MNh>YR3g,DWFG!XlR8;+5d'aYXWK^0W<Gr&N*G?.G%L3Sgbc36WTl[4[\%<R7(V2\%>CFUHZjq:=p?^(n[CpUG/N7UUbK]bZX]2k`hjg$7o;f(c>i';$<n++b\crkDSSP^BeAC>-:280[Zr6M!fe_u[Ks8hO_GaH1ANi<D%WD'ejJR-HT?.0QaV4;^PlEj5HcMI+%Xs_Y"ZGf:CogY]e/MoPEoG`-s^B8/6TRlE)dpE7*Cu8=^[&giWrQMH^V5@OmAoeu./!3k]%DOt28YZ7$idl/SXg?$V&q]Sm!5X[d!!NG&6q-.]&=djupA4"E`U!\W'UZ=>%8Gek+:Xm^6=JO40L[XY"8>F-?j0Z+j">pO]hm'?F%YeG!jFuoX@guuo!FD#3cfa;K$rUZPMRXLSb]dJffE=nY)b0p,Y8>F2cPdUG4%W57X\X1J%Kp/0!'C!e1\[@YcqD^GDlDq9Lg"[*T%FCo`(3s[)"7Jm'afu6E:^r\_BT"%\IH?TR"e=&Oq\hph7)Ej[[nVsMkDJmurUG05b2VgiB<\AS;g(0N'K]b/)N@mBY(Y-!"@&&d@%kD,ajR^ld<1SiDdg=Im7.SS78dX3FPd:;cF]7/XE#\p_&ZZ[Pu24@''Zhf#\VGQ"Sl77n[NE!?__n\_hb&?Fll'HE)e>Q>qGUSbF%;'u2;C.tKh)[F?d7Oup<_Xh>XUK^WFVD`5Hp_m^aXPKFP=D*&q=e,.ZRe9$boq"(QH2h%@1jZbXm@0"h2EKI=k]X("AniM!c'g56%?ha#,.j9ljPNHMcr#"!u8NN5cY^MKt/%"!#n"l$$mDIDg7aIB5eBg\ZC1jO\dcfM]FS:reJ5uaK]!ks,]XuG4"u^cfds)7;o^)O0%8RJr(CkXaY-!frH<e;:H=47uINKr&P7U*J<ToEABD,#,/h@Ju=O`\"F<sij;?u>N"n`8XPYgJ6$cQ-AfU_VJImi/rD%VbRlOrc[W%`Sa2rJ%*.PCeG4RoP%qMA9)?jgZc'?<(NcC(XhHdf5=ukf&>UVC?&`B',k0Q-B3TmF/@=2PPN-8I8Mf78X$^@YKW+uQ'o&5D/W5E%V<>Cc4>sdtUM6<KIj`[no'Xse1qVK8Mo&51HBgAA?(^la1^/b#6Q7W4a?*]o\BsYKXJN/K/85gp,"e]&7GcX*f@T6ao(I`&)dSg)%(-RZBmgC`7n<l,5:+[4T]T#[[jKH3QYZ]**f64mZjSZWZo#kD=pJQQ"\oa,.Oa!O&HTn@mX]B^&I+F"cI51]Q>]QJ6T&-!Y?^G1s%hpM/o$$s`>5D\1EFNE2j#1N1_1jf)2B)8);QMe\kmX/4;ViCG-lU3f+\TtioF<CA/;W^`H_k4YE*bX9+5)L5AH"HjG2>$;7q8TuY%rq,=9f5f5:68<!@B]A\r4616oH[:&#U-kRPReaC?F^N@B/H9<XjbY;`e!Jms#,bS=o?5QE[k\&W?DV"LWUQh[V572dBb/1SduWWj%khEkaa0"aUVk9;Ji?[V9UY+12H0m?QD<UE0Z6&ja=4,U%6_D(N?I&8^.5m`chRT6dICbh2Gc?B\h,W#RjD^"<;p&'O.HG>o>M<>Q%j*b7&?1pFP5<nD6Z_te/MLSZET0I8=jb'.g3BK1-cHY=@VsCf28)dHdbll@s\2[PX)eS68kW3@NCK>o4,@!%$4,'8E0t"N,hgjne%q]%i+#V2eg8uG,U\,oN?:SBYkS3\W5=F6=^!gfDD$"[`AG`c\B3A#!%[7M+2q!Jr@G/,sKAlJ-5C<V2IH2W@N);H6Gn^iZIhIQ%a%od'^GD.417SOJUD()rfO;;P&7)Drih03\$1;=D-AU:S#ID%osrD`P1%WVl)O/>uE(?Vk1F#5&]MXbr*QB2_-lem[N2BXBf`4m=lY%R=)3/$@6(P&U<\ilKaHh\lJJ]R^i`A'Zdnd"?"?'ET0&>I8t[u7c3/ZUsYZen=EC>4.8\.Hi$E_LX8N<GBaX9F=!1]C6\L&UtP^7%:]_;g,d^FU8'X8->-iMGj;T%d0XckJeZ\2"[+s]f=/0[oA+KM:oD2"B0Hhb8GK+i#?50'Yp\B(X,3;STkLhM,Zj4O!q56r?$]sId%K?7Zu`SAMpdXqA$es`_41KU3eX+7-aXisC1L`^%/C\IJODh>lq]ldBXYuTJqQ<!AC#mdVLVV0#,6'F/k$u"LJM[acF[7-!u,%X1+%'lrcN;VLq+om.B)jE9Mt04?A8@X"Ggf/^tia7+-gS[k@Q:*"*@qZ:mf`(-C78Ech][&^+Rj9&QUWZOj*p.c/kM)7Tbl":3&pL$:T%=dO<eLlF&a8VjN3r"Sj0U'Hl%58`ZhPK&jb4iA1&.RsHZ8)Nhu"7NYt#YmGZRg\U*)SR#]j+j4N]Fi*PC\g#t0<nVZBO172-I3EU%QhsbuLY8"1*PFZmB5QIS8(0U5TCQA.h$uGd]Q50NV%dh7h'%X:'g3F9oJ!rhpcNG?LK5F=1cFfHg*-Qk5448S=Eg2>T+K^>DE?hf%_.I+sJUT<,nORROfA8')B;I#bK4cKejTThp`]#E=d28ZplMBW<5r>9T>dj@'&b"0[<(cb%H<!&P::&@:@J3FDb%5YT%\YCt/`>P\%6Ec&fc:e=df;4R;>%l$CWL<.&*#M!XCkWHj$7/C6]fEjMH,nlS&eGDIZ0\O6M8R94bWG:UH<#Ej*&QtP6ugS!=.-StM&aW/H/V(r%^lLS.(Ui&E_\aL6B/fQO#F#`HI_]p660qq7W8Q344t.m\G')^d-"$q*l#$[a[C5bV$0idT1-FHUC>FeQNtiEb,kJ]:;V_]1EJ\e9%n-S7A:TG.D&;45GNir#503C#Sh+5NG+5a<Mh*R!8HS&?l@Z#"c<O]V]g96eTP]^9N)hCt4I5_;*UJlnA#YJRmJg(qIdQ'Z2C]*NJ%T?Z8'=@CpAT(-Sa)g$3"^__nbJm69&UG.=nOg23u`je"OUJ@a-)kjR,BI@CGMY47?#,BgLHYaB0-/&nECO%f^R-bs8[CbQ;6D>57%`&c`r`"bBDO^j+2pJbD<-?rR7f-eQr.gstd;_]8'C@e(C$`gf=e6/.4p>]$u#b+4c.GRTjO%>hLNh_n-A[6)M"Ik/#rImQ[7'ICk%-,,9RN_"g;8>P:o`+rQeL'Y1>[eijIT4^,*U,Ci:0m%j,@hmT3$h=bkU8Amj5':X?*]brW+e0#!G*(`C,9nK5#3]*?*nl/k(al7*%#S3FHCo</7/9cp/0n;J.Nm_H&Im:@AGj)%%`*!3aM\Z:SK*VI,s#g9EoPeD]U'Hn;@jqQG(E_7`g%)n%E'`tC7fO+c^*?bFb*rp4%Xn_FF?D!a5I),^LlI^pC1Vj0'(U8c20Z?DIJT.oM=PbL0:>)7"mhF[P:[p[tbnF@iM3%_h:5g)afQBQem[AhGT@coXf<3_S%ulZq%K!JfjRi/&<<:]M;Y(hSCrbth]@pRsinZ$0NX"4&O3!d[B#N*[c*>1>W[n!J/&bl+T`J*7i+'AZP=C8r;MtQm6!Vl9&[O"hlLd<%I%'R1f2?;l11L[H5tNG7='35NQ4VY$Hq8r(ZX(pmL.8Om:NW^.]8$r_iEqLprYT-O325rrBHr/,HlY%9r3Q:T&\8p`^]nc4(*EcPsA%YPEq<:s,j06=YG+!atsNXUd#a4M.7(@@mC*qOq_.TT,`1+uqZT/W5Ne1ZIg3lkR;k5*'X7Guk,bZ>h)FguAe1p%=`&$$&"B8$$^/%Cg?L2XK$L0%4[Q]d_o7`n8YIPG<-hT:o+tpj%1i*)p*;J$s?BA$k0.i>-JV3N3H4=ecPjM^mZp`1@P'IW-&\fV#o*P(1t8RAs$nL%%@oLq<A\=CX%9\%%^'[NrCX.baUYi#(J;j-[5j2`KFfqMR6+<@FZqTE'!:acTBN&^j%;-Nbf4k!ETqDd?!iO7d<lONW,-8_mD>-%%_co_MQ]<TD,3M.KgDD1S)1?F:CtO'.-!DLA4eo3oP'S>'K,+g#c8n]QE9;BMbi_9UF_"oX86@n][SkaI0>7f+4J&.s35W<9YX@li%_F<rr63o/![)R_mefr?0UM.ad>K?l,D;JWs7^hSB?8iPVCTfI``p:ekI;//[i4/Tk2%:cEYSN:.01HW\X!_oqKWg]GSLUG,?C,sT%CmJ[O,?K+79lb_p;1YgArF8^Y&Ge?Sf7j90N1N%dptDr-E>l>U?m(O!qJ&.d4ful-$U]1jN]+P-lWP[a;(Qbf4h,pt,O]$i''[fO%+k@=/$fbqU;GU!`5"^`qH:G@3Z'HM<kkP%-BuBi:W+jnZ$YeZO;B%gmXqW*sOA16b/tq!<Bf>*;/9`%&E::n$[AS2dOGK\@Ym&'+%F<*3I]fpK7fmQ#FV+\iTFEV$3Rb`D22PXBU.GismKTXI_c18)EC*@a0d.9"/O!FKkH3mJ(3?i]gH.<Pq;Cc>qHPBC5)ijJS:7>(j%Y5X+C*K@CHc&5Zu.KFdB"&(AR"(cklD6^DGX#G%LDQp-/>+JjRgE-M2(UI_TG]MHjJ9NQ:i`Q&aW_af5-?A^[LEg9%V"iNZ#Mf)H%-a'Mrf(=SaTP*6-I?H88GtT_I:7gYm.Z8TF&MrT.j6"]K_\nh-7ns@-6OmCD#$iE9SfG>57QhW2<*G<R6Pl:ZLY7:>aJ#AM/M)O7%GnqXfcp_ToZ#%7=F6EZEFY`04Z3?$*To73hj(ERpRR7m^60ICENKupJSO&$OC`GHWIM(\t%ir;h3Hu$>Y::3p,EiC)==2Db9Y$c#%/c';BGsL"SoO\mM;@t<Gm@R!)dkFhB<4N[Qkp\a5jBkJ0q<d(RF:,@'mn0ackBdquUm!IMe@WDb;CU!X%<$O;_ls1=bZ8(_UJo"M%)BYj8rN9FdLS'1l@JTkgR!c-N3)KX.op=NG2fIb,N9L4;b5#(-L*8TFWF+^9$E;CJ3F5/SPW?Tjr>Be-^TVtAW#tQJ(V4TFK1'V]%#n7gM,J>hK`g_U!"UW6b]igjF3S>ul-ff6gDM)a/$-c%HBT3Y)Eq7\"&N9XhKF-NC,.JeQ(r"C0BSKP]T;L`+7IVl&Y1^H9hu3=4%SkQ;O#BtNIL\!qDgd&t+M?>/m<[J=S=bkCU1G\f8^-*#X@P'Z2i/EF#\OKp&Zs(0t$+t[@VK<Z$P$XO/eLqHWQN\.>F:FAQpX;n_%%?SX)&tT%Xkm:OIVl!0Vm"(4;*/+WopW5+R2M<'N=:%]Mp:q3CMkIZCNF2sXK<`J#m7&csD9Dr0lfVboP&ks0<Rrfl-42EpW[Lp!%cd@R+8N4:C#)YjIM%3(]IRbRRTpRK[VJpsikhYO2*L],)f9YO/#oN>p3S=LWHuufeEtUp6.R#6Vi:*g1b4tKH1q/0ej4e'bp>36k%J_d!*DB*:B[#0=lTr.saKR)=44rd!2klDFYr&H##8*EO%lg]YQI8"X=)e95LB93K;k#[;$UL.bPd$dXYbmti[43p(;J;C?*9B8e*%;dYPbWB5p*)4p*QUO*\&pIRT,:65!;*TtZ*TU`Gc2cQC[A<6+c?cFq_J+*/EI#pK,O%qFI4$H$DB7D[KNoe9u!j5JcjAs;g.KCb@%#"lbXiM[0lJKck3)0X`$kgVQ[2$tdN6mgY-Onm]?NQ?eB=@bhlGK>T!=2N%*;r`_UW)H@Bkr>r+(_N1lEU4g".V?__1:VK)2=c#b%0]r<Y15Ru)BHp#XE4+F!f#C"CLub(tSG/u,/srHtST6HoP]2WKb<oQ"mn-nrH*:QrC6YtSSj]9T?d)<+a:,2aTTG1XVb0Xd"dD]^%e57Th';:P^CJ1uYGE&!%_V?5b6SX!?4M'Ts.+(8_DWGlV>'mdFAq4a)@De=ehQ7T0pE1)\PgiRX9A5:4K(_pAo5E,?(=l>':.Aps%`J5W.i<DNMDjYp^d'][Sk/1UXUF)c0c\IFHB/*jZS<IUEabUlsHR'jYDSV4\+nOZEZN\C?&(b/lN[#XkZ202NeVK=u(],28On.H4%`oVD]DVY&,h@nUgma0%u3\6>/oZVV\DfHSKgst\oO<mpclCLOJnm=:bm>:1rnYHFe]6D4Dap]]lDNG\b)kGKb0WNf2oPJ5sa:n#L%cWDs5E%aSWh`T7gUhGftEa<oTCsX3KBR.ku-6]e;q@#d9Bm:N\6$lD#lC5sRj;Ml#6kLpgf@K#P(7BiN=lW'?38S*dCV2Wmdsu/@%@&ZpG<h/CV[=h>JfOoCBh>Ie8@j>*[`TSOt#MT"@3taOJm(i^_R)poO`iq/ibi;M)jGV"3982oNfE@.r@fmf)*0lXiR<T'4,97sQ%[5.7b(bcdX,P>e6)6*Afj2ad1>/l\eMYU`Aa@O9r7aFWE>5T8;@E1Y-cel>!nZP(p(/S3.h.G`=L5Q)]n2`V5'n<^[.&h/O>&=,9%E1u;Iel4X'*;DLRqlm&=_%[i4.U5Z^El:qe6u8Yg8VQK`&M[fG>dRofjAt/+/ZoM*,(.eI6,LAl13d,2TNgJ]Yt:a$XP$umYtjQk%gCrd2V&:a%.6K%Wb]C^Apf^Sq`<DFA(?^(Q8[_qCU)mW%;+in=Plj0Dl_`jHmm6]@M@lM*H=u#"n/`3##3:B[[A3JuqIScf1g0e1%/DF)BO6,u@j3<QgGG\J+?T2oEFloOTc1XVUgGn(B(:(-_@Ni49QOo[p\2$\.r@qCiF7NpQ7HC#AV!c*<DR3*(NkH#nDmJ-gld:8#%IMNjPhriE<WFf8<gN>o=?"]m:c&!+PQgAm%#g]`m9=69YNBTjEfPN4o6DOPWba.BQ:8@f!2nWnZ\^aMM!2K;Ybsj"kak>$1k?!ta%_D:J:aiSJ]k<:`?mcH,On*DPS_le96*n2UQO)Mf,?4G)^X$u+_Sm7%0\p8P0-2:qu!`(]'jeo=P:O6+LVCQGRHt.Q<'JTC"-'r,l%W86o4Qbuj+^>gq"a].H;&R^LeM-KtYqpfE1=_\nmDVLQ!rm*NL[`KUe2l$+`,\#ra`&bhBLmg`fA+^k%<,@f3a1:s#F#EG]E^A80%eWo1-8M3OWdWOV7LT\[o;s5"=_=kd2@b`s&0eaj@I2h_i\Y,r.CO0fa@JQSbAKtm+o_'sMWBPM87%kmirR.@..3h[[7?0m*03bhJ%f+>K^?,[5.nRU)P@H_&m(d4?@.$q+"cBOHtl%/tCr%?:bA^^hEd`"7mEhI6[nFaqDB%)H*bOK2nN>/d\SP9p]Hj"EZLtQkk,D"t)%H0>/dZKZs]l%12)B\@JnIWJubflTNjFO&V+fWsb/@Hbh0j1B0KQVA9\9BX<'`g'771qFrI4k=G\i)S0EB@@$XPS!=%:GuM*p][7*%4An(C:bH%\V)1k(>u4OX!A!K.9c%l)GJn;YIoXS[j.]Y_9fO97@V!s,Vq<ENF@!HZFS0L@flTNjFMTotNKR!P<'bHJaJdd6!a2&D%P-CI=iNqd#D!-KO5dHNYl%3s?qV3S^6oJ>t#Xt924_-IAfNk(A(XK8n,tH2OS+)^;@C,3M3oiNSI\:L<01lfd?pmJaf)Z:^EW*Qa%pZSJ<?IDT`CF\B+@KFFh3oBl_]1DpMpXKFO(ZW650(usbIIF4pS$U\:TCM?%*L9HsDR<j"H_O9R<GpXrKgASq2Lh6tlJe[bp0L$(%SgiHM:44\oh^N1M8;1uY(^q^\0@B=9+Hbp]Lt:\DN\=A7:>%4khXB9M'IO;Ia>J2#13n([#D7NnqC+>pI`0<CmUF3h7_7a-R4hDR%h8N,f$G5G<Yl2\]??>9k,p;uW]>;@%!S?-"^M+m&S&.GBgi6U;H-r14nYlIFGB(r_C[I*$R8_]jjKr"'%(u[]01KPN,,WcDg)FTF%53$2;ghLH^7(Ua9LBHnN-Aci^,o-6]37B*b_!VACi>=[-%I^/uR_A)IEBTf4_X9qulGQ;HM3h"+G\hE?T2C8sVFGL2NO@WLFo:@q%?\V5cla%OXJDF$u=ff<XZ$&K#AT;m88+/)YP&Dn>O+Z:Dl0t(TSrn)/8M*WtKhKUVon77X)X*d2EEk?Bmn"L7@dTS5dfd3?iN+c:%;ZX/'!;eAk^G8R($"+]BR!EV=#i3%8*g;h_,8jlU\<3i9>d$YY\Tl#a%H,Q])FJ+os4lXbEtr/^1-fFJd9.%`ggCDKNajUQpUe8f%Z/8'pI#OQ9&:MS1ehcTn\QI$7:'mTFa[I*;mdB`Hom!Cn+ICOLhNJeEatRcY_`SldmkhZscSY:ME&W/njWHM;Yu\`>iE1!-UMCY(%GMEW_%E!+o)_gl'aF'_4S+9%@L-7KNNGqhQ!5<R99mP^HE53F\kj:Un-\_;obb%$1El21t>rOJOCTjJA2oV%lpYVa53Baok@nWo:%s7Y=O0]_V:Z#<3pc?q_k6XDh'Or\ts're*l&!_rTcUdI;Q^0e(CPL,QVq:$!m84ic^O9g>Tk>8rc2'5["8;E,RYKDr,r#QmiOg%:%O.jR(lm*q@#/d:jnE[mp>&M3Wr6_#UMT%a4*%Qq'/&UD5?A^UL*$#j=YIomb`Y=]Vo[FB$Z_Wl&Ea5dQ:LYNYe`!B6^i>2V<GFe:%0^M!;@WqBlG+=eAn([VX>]2r1C`IdQIZEa=i($_"T6#-2T'IHn9mL6kE@kdDTaNi:FAHIV3NbO"0L@do#Gp95L_-O?>kc;`5WB2L%-MAaA#i,'iN483)o?sOA/ECuX8s?[=ZdS^Jg%fCSH/='i>K8S0n+sb'<G'f/8lY>B^og3_rnWcmGIW)O2X8D>lV(XA*/gL?mlbJ[%`Od'r5+I_$'V:'2rcqh56Q;<5dTfo:T.r?;Sn9$3n(!o3FW[2o3)ORmiJh_LhHosq-'FnX_m]0"I1*ZB/JF88G-$J^_f]S8l*dhJ%>4lGeAnKZ`l63-@RE-?1.fRXVZ:!.cnD;<-8>F18>!"8uLZQE:75VS5AU*?qs.[,hakMnHX_gjKV8(DV?__`#Ku:ZPQf3pADI/R@%UH4*)(S#Cp"nQAE2<QJ[.Fq^$/P7a4Pb.'(nhJ8f`KltK9ik%UYAZ8tXp&IK-9u\h,MX[*A?_F?-\84B`k*-gMS!^\`[tf'dA]i'%&X%\2+):D6#2EAsN`%TN?^l"T9AJ$ocJX&kK5I!IJ8W$%<In:NW7PPIK^;((ZT]>Tib,+,fNK"K/$7,=brGX>WtLc3qX!J6QZX*c%QPT<H,*;*CV_pG+,`?`T3RBsl.$T=Y`'_b8B#H;RL/#HX'0^EDH+u9#'j$kLa-`:h$?bgU=>9**<u*9V#JU*"B!KZ_Qlu,^7)Fm+%]_o;(gA++V`s+RY/j)>+3K>EOa%[1LN]_qB<lS`%`Z_^G(k`dXCC0"];G<uJcDD3R!\:n#DCignQcJ;7=3?.#K>Z^HQuEjMB+5O\%W0DYhr.CS'jGg-Ph`[kiHs5q:\!P*0,eK'tjfJJ"&Y;t;IWerRkQ^ERWG_CRDi^C0A>e4!_)UTtKP.b_SW"K))YY?h^0*Zi,+obn%"c@b(N@C.A];A,"H%o&tm!n77X\-*7-E=B8H]@p^j^t;tA\C#A&)53tou`CHl^,dN#fZYA>Rj6.4tDs%F`Lj$&#EB(\o=T(44&t5%JpnR]$SZH.TP%:8S-@Q'6Z<O.`u6$Z$SZ&O3F4g.<Yf)u*5K9IY_Q45d#E@&]:i\H!QN@b$pLRJDAHVbH3WWVpfW,eEr]_Fa:VR*%EH;-WXM.,9!H(_MH@+bgP`P60oHYLU"./TOjlAU.>Oa?-lZWu\GV8*Q&n^;K^6Hrf?d_/\.::0paCDrKDicC&n<`_AcVjXQ0'2\<%Z%)+<^-G=?/tIq,gR2Hus(nXMme%OcCoCe2ob0bnn#_%+T+0nof.VIA@\9abf_>52G&;EpI7h-33?'I!]mbCUL)S7KIaPY$%?OpW%67tYk:?#+Eq?7c'm]CrP>Kk*kBfP<W^L8n.#2cO"T#ikB]meA<qMflP-+hcI[(']&Hi9\FmRSj<\CWB[^OEg9Wr;DZMjn'6g:_s,%q9Y<['?J9_h!=,MmKG&N.!oclHi9[/1+Xqm9^2!3<kfJkr`Jpk7;KNF]:f&WlPKRb^6*Kn6Z;W:l9;q5<F50CI&"nN[h`%g8$5r'%E3EVuBfV3#rM%b>BEWeVHi9Zt'o4dd8L*$Vf0`0VXaZDm,-9;d]@S_4<kmROTu$3jM`(h;AYkA6]p%^'Z/n+Ohs*/ig^gsI0A6g?%]T6ueHi4"\=m.g@KAYu2>t^gepgW.H(O`>k`#@N@Gn7<]>Q'?t)oK@<dC8rudXt62n9b*<bXrgYQF1t<?X,VBmp<cVXRWgpqSg"+%DtJDTU2T]Dlor-lViUjA^1$L'o@DncjtA\MAak'FJq@\=SZ!4f?GC0/R[e.VL3rlnDtWGV]uEj&O1a"=\@Hj[Hi4.0[;"iOrI!jc%^@eSdn)G?4RMC)ihrr2OlrLkupK[68rBeBSCdSZdWA=%XIW<Y.+8oN\kdZrQ:9NREoa=A6F+(.j/N2+lIaN$ph)RUo]me@H]73ik%H`pcf`FA7g*8k/<R"".Qp\Mk_4ZN#GIQ`FZk>jgFPnEKXEs=Pl<^5QMq2t+<Mb](&oQ,1chWkuk@O"]cUjN'QGkluU6ea</Hi9ZT%(]'X3'`24OkZe#L\NQ_Flc2j0:5G`^ie*kgOpb(r\"Urqk3u]q3Q-#Vlb2IL703j(_rMd*HgaN786kfW';^O)_cg8]#r7j8CojU=%Y82K12I40j\YGVP%.^+4(Z"PegIgWl"_qU-21Kg0-0;9o9j.\kWDZY"CHG[5[ZS_GhR,2JrOuJ?MU`g8PDd!)`NRKZiO^4L^E)Ga%^OHS[lFp.riS3tDPdUFq3IPl=IB%dHhV=NF<dV4ab1G=[CceK^De[OOe'EsFlIg`.omU4/eA!YLCVQaLnenS%HfFsF09Q6=WioYd%C[8<dmjI]gh;2f^LT.>lopI7OG0<GV]%bo[r4Gh^C!HP/&fFl9fsu9GIWh.%c9H3BPdg,)q%\$a6RioG$<$]Ol`RU+9V8cJch;1e%@pQouktF8Z0-1#Qmat)74J-!*/RE#=I=$RD^&?6a482I^CsJU\?M3u%QS.1`5M>kaP89%tZ^*C"Gb='CZ^dW1DsZos&W;_Q]%`cn%\(.HWA5D)q.l4TnaiiH1[AcVW#NISABQ$,!okLLa\YQi"3AgE8d*`DD^Y1u+j<UVnjn&)N1f^RXm'u:;fNZ)S"'mu@\rfu.:St^$%\DIq;=qE"2N-+TfFBbnRPNt#_%pPs``aQ,5Z'"@Tlu(lFe`F)"q0BVu[@obcfc"X1oul[u6or)"UgB^cbAU]=]g-X>T)UW%RITEZ%@sL;h-G@QO2>93.]rS33q9@+KD>XUo4g&EPBm5+hokXCuRs7\+XuhPg&Y?Sh8'^AP)?*@%-*^sQM:mEOjrDM?"bF#/JtK(Oj<nWG%]/KR<B)-6(>^97.Yb9]eBtgs9r[H02n*J+'1[e+r1e2X@,<iEF($EEGpgAUNeTnAI5'So"c@_Y^TN-@Q>*4M/>D7">00#I8@2H7'%]^Xm3pu"lI3Y/OWIRAC-C-t=Q0I:WjQ;s[R%qY#MjL-ZT,R9F0d^=uTQ(0DeJ6+GhEIe_kG\<01rm)Pt8&tL0;M8k>LS(K-o$DZE%iM28pY8)A@k+'#3%fD3$/"*AQL(3"a%N,@^V'n"'7W4<mU_U:FWRc+W1%VI@DNp1hF_fD<]T'>Zkq?KpZ&#,MWVcU.W:i&,GdT[n%)>.$W+h?,A(TU3Jr5J=!F7J)ACZWn6N@WK_[SjW)HRqBmme2mhlh(K)QZL\gENkX2"[W:?q_.gSc9/$*'5,&[G"SY4#!t*;>@lf7%OaI9%T?Yc%Kj/[=e]j*En?]Df^8Y')<u3?2e$6t<R=El3k62^+'3d5NTJ](X6/D?>qQ2MQ>\-:n=]$/T?D)k-FoL;nj&>&?GP^m)%Y$[E55Mi`#4D*A$Q?&7Ul(tl/bXHeg;u>C7[(CI/_YdO41$r*b;"dsYY3b$,&4>Nj4R$pQ7,`=P.9+*pqkauCQsK<Q"<SF!j7[9#%?M]rTS8YL1?YfJNCMD40/pQc9BqMbSK\6@REp;P]3P0Q:37ofnl>8YP^t:8U9%ieYC$EBMG_St!5#rQ`o752#K'W8ST$FRWocm/E%c\ZK+A)_a%NkR?>m;0LcIbR7Wi_:*<2iAs($32YFP+.#[)u+Jg*^n!92&(QKcD]U;)j_2SZG`'H%6%EF@.MlY(?5eW3T#Ek_MKOT%PH??(-R:On+7.83T%@n+6#&MD64]mIC@bA1.&L2Wjg>OA.+"GE"_"gIPEYX*4f%cmT%`6;T2KBIV("^(,MD&07liVOc>Kc0nbsQS%POZUH046^m(id&VS)7s4U%rs>+6M[.,$fTqbh&4igH$)7#'Nf@Gg4(!(u9u;'.c*[LuhG@%W<t#\je/jG\a5>?aC^H;+N8ej[8l#%ZZ<R?>.At88M0(::/ga3'@ZaK/@CjHfC5Q(=ua%K:1`/HL"&HSGm;s]dUcnM^OR;.SO^ZBc3r:;07Q(Gi\KpZg=WJhDglR\^2qU>%QSYNuq=E_*Z_a3S@lJo21HPW$VOVdrrS'3_Epr8TJq#Y/2B/F=i^\:*%IIGND`"rX2s$rkmE,:RgWG!E]VJ8eI[tRUM<38Z4j9.d%C:[8/MQP`1'%9,q]cO;&SXd2AT9Oe![jIHk@d+%Wrqb^A/nj=%%QE*<j-f'(plLDQ3I$:MBu#aO3,%5T>GN*.R41dl3i,=)k]l,2%OY2uBrHSB@PEt\)JQh3r6J>IHTB8%tn)'a0g!f,-n^hO9,mMb&P,nD%WY@klJ!.k'/tV2`HQlP`:`$>HnUSm?06U/]q+8*-SSIE2%V>\l&V9R^aiH'29A97YC6f.U`kOPI?YE)Gh<0n!:S'jnN+F$\oFB6[t[I*nD80]-HD34\SoNklcTh`hccZI=mH4SMFi8d28mcetD%7O,C1`:&#BNit+>9oHTno"E\FR3K5Z;.=WbAo]3*nD2eg0tNDuo,^"rCnpJ^9.a[45gmpm(/g(AiaX1'b'_])\2I+MnSJSjY9QqD%*fkccamPY`0`&%$q^>q9Z3I(R\[T.KId3N&2P5u(pXk[XBF,@'iK7[j5IW#G_f<;HN/"g\><arF1AB?kp[5X1FcZ_%%)V@OMOjr7%oPBFIf7:n2($dT-3`nuVC[o5`33i;"DmTqJ`CB)E+gh9pa4R1/Uq:$N&m"TX>%)$aQ:(Q)UW!:IeqcEmH9^+i)api*B?gsV\]u1!%)'LXK$X$%%fBq]S^X/-%nujErjjO"<^7/JC0$Sp=f6mY>mJ1_]f6M.WZi0B6Ut8rpVb01=j.hT=]/s#;5#fhMp8#E'[\lm$`J<9k%mH'tL[=q#[OO`'Ob09_;Q7kGA&+dr+A$N<b3l+Us,L5XdB64(4p-!nSH.?6(g$MT!IHoYdhEKcQXAif;S%$q)GBTF@0F$e(6P1mQ%"[$:?a4'@a/Pf)l*V"Q=,65Y852Hr_!q],MF/!`sc7Bp/d4;&Xc)t<&Sc$ucO>iJL5>U=m0VhRL&^f3V8u+s8*+R'2Z<&38mN+i=%;sW]"MKe7QT_+7;mI=qrJLmYb?J.5?o?`i/fFQ@]-dmYE$%pFQJ'o!ck07D5/*T<H:OVVk3:IN%&(3*>!N5b*O^eBJFFUDZ%f+oA%'5dElYLG677#jV'#on0f#lVp=2fn6BpqR*q@;Na"8c]XFj<=?0ZEi+g!=c?B%uTOdIj<QNhofs((KjQnQY5ed.PFLT91u,'WZh<c%qB`iU^qKpWgelm-T=Bl]?UefkOZ"Oj`F@eIVK#tcRPULJe`p)7s&o<K:UAGsY^K)+5^,N2[&/5eR%CsdnHWPhW$g#ONCBlh&K)Fm%q;o;hdX>hFC\8@:MY^%.:@q2\OWMJp+tFl?lIWjT4HU[p(bE%*AgbV@o:[L4,!F<F)R?suEbkk"$gMU4Ns/7]&`hREdqd%H'u=BG%dqd%H7JDl!M#56*gJ>qL$`-c*6[FNeq:jS^e9kOPV\Yl(]D-Fo[IF1m!@)iE\8JU2_7cUCk4t?t$S%WJ%U)FUmb0U;n8Fhj5KBc+%mrck%p)rBBOWJ_:@b:rXT>d)Z3'Z@(>d#-u;]X:V*_W"IW8fT.Og2^l3&0X3$l+X>W;4.^fV-4^U-1Y]Hu'pc7o)7kQ65")@Yjas%m7R;/1"ZL#Bg4"0##f8[HariQUX^uhYA;b.,q7R^5A$jt''-%=IB`\5q93[F,B]?0X(:!KJb(B6`YGmhnPledG6jg@SuHjjn)cth%>.1\P%PHqc*^9PglL'&r%/7:`Z#-6<Ri(IhF8,M%Mr0RM]d30Nr02eOb6p-J-Nl`qE?!`[:\ZMKIep.lQ1O[kmhiC#I"Qb-bFR/J%"5c[Mq9B2$GP=RZIq[c^Y`o#>s5^s'&X%W_i5r3uIecJ=Sd[^;Ab1rm4C@4GB*Y":qbV'UK+,CSp]&?d-c:sk8H."f-c:rVpot8j%1[Ma>o=k0%mN-VaK?DlZO*e<hCH7%hA3?q=\&?l^m5aVfID,B^7fUb%^2ob,\G=[]bpkZ2?`1l?LaHE\]5fd.;ETHV`*:FkFRn2]%3T*n"Vu9Wn]GuD/2X'e8Z7GQt^f%3l?]K>ViOREmH*9/93-\VFQMjg^4*PQWB=&#3L]fOXS)<Fiht#6TP5-SpR!(/6D`tg+a9OCL%)78rta.T%<o=4>Bh#ppKEKIENjE;d2&tc^oX18RG$[=r1hAnQ2gO0^k%#K[@2KbA$:-CQ7n2\0e^GnVL-h+s3pTgPsG?h:Lc.jZ%%:>[\Zg^1=XIJ.7;oNn[oBNr!Qh^att9hqsc'K2DSUsqGLdsPJaCRsf`(E8_/j;ohJabd6q$:IFgUn0RY[%'bl`9'uXZ'S^X6V1,>%S2hk)G=_e:/H=KG3CN@B1URcd"IB8V`l[Qu,=,o>a?tQUNjB[^24G56Ub<>LTXPEkrBb,B+i3k>G2i7MNt:H%n_WlU:I1aLC`\![%+t,[]a9Sn=#@W!66ffi;>'W1Amc8\M?%p(P:dp<MLgMT36*Cn>U^DSTjDke"I%]L4G=GsY`7FkE3!a:k1EoI%eI?g3Fhk@2'T:KN%PWIJ@EM/JE7\-hLF/(Eh1fjatqGo=$nn#o/Nh"k1A0'@^bFtpI\T0Y91Fr$m=@HJTQmH"Z.2H6DLkEGLQRft/F+*;ZJYQ#AQqR=W%&GU8_`h%=`')F@g'eWQWd"0LO3qn!$E;3>b/tK[8\&L;<jYAI[8`fPqKBpd7Y?XaBMs+.fL?(]CMl\+Ua5ZZ87c^i5Apbr.jE#UJ%[gI],L?aN7@mbDaN5l!>TKMAW,)/Q^c'7Wl(_01$d9FGW:\"f13A)W?>cs$DK3okL`K5Mq3/Ch]3?g^57uYHXX-'.\QVVE()L64&%ND*T[g@&4*\Rs,UMqf8CVn"og@]!K-l%u>)*&i-afNCjRG^EX>c6^[)_aGbtf1ABQOe6l3b:NPa]7u`5gN[W<C%9g!2gW-koBbYg%/6[b^MsTW@`iAfVZ..l<9fnN%P4KgYMliBbpAr)PUSIJ/lFcUWa;eD70"MS3N463cSGPRB>(4Zd#JP"!)RnL*STCJKmC%l[_?6Ln%Xdq#Ko,NRAH]ld2oDJ=n8NFWi@HQ\=oi#rS:1tOoGiC"=l/cb'UCJXZe:2h917-W!/fZ]^IadWB.QUoa3>+oG?e9L@^eSG6`lSC`%(@N>NR3ZL7GS)JIG4bPF2&q6i+cB@BXD]XO6%RKO4o7.(5CWR=?eX7+S[nQ8FGbDX^t^_s$;+pB]HY:YL9KcNJ(;B4TQcHpC0M4X%em&.?BBj!u[X*ncCZdJBR$2Zl4T%<ZnANdGPr%s@-?QQ#DE9ej=-NfPdRb$6[At:n8%sSd?QLut9m4f*dB?*(<ti?Jc8U_`Z+9dD%^s?4cj3qc]aa]f?BmmIRo1_aW`nO+Ur6\_Kb^EE]9:o.!149)PS]"2h>`PeUV)K4Wbi?^KF?)33Ce&fCAOkS)%_3[g0CCQ0C\gEL%D,d(O*$JH,i8`r,h<YC"q5/u0%c0$qB`ZkVPb0UIMMZFhhTD)+Rg5:G4/sE)CBZFL7VT1*`KD:c:DkXL.MKG4OI>9#5lSPeb$m:@%S,3[ZbmC.p%fiq1o#,8=,@87PaV-nfR$_$FrT7R$A!'0u:^GmojLSlYkd=oaM,B@+GMYEkSO;dn4`9'P$&fBK[iG4cT2^h+E,XT!%pjo9EK6/<jO>&3$#5Bb!-Q6Q77_(p-(,9=(l6[:!$sCa2E$(/d.Y'RG9PLtY0l+VLGrqHB=l_F<nP)B%EgUDn)7.A)/@BNa80Xd"%'S&#k*01n\n,/fcKP=RYdaB^'R61AHf@ia^O110>EZq]XaQ7VVq4^`'QJ8h$H0qeQWVQD^<GQ]?9?CH<XLPTHl)!*LZW^"b$c2IJ%;i"jY"iUOdiW1'kr;]e$P^_:iTA,R-X-M*dl"82T>9K\YYED"?0VIR[5$)F3d),\#4)PGIVWNAoc7gKAPZj:]'\&"kk:[-=fj!M&%G%L3Sgbc36W@H1H[bYk=od.B"3o&QDZTDsRp<$CDgq;/i2r")9;X(W;F'`1tYJ-1h>O7;HpQuK]G^*"6e2/M4C=q-2ltIn+<O-X%%cO"!k\0'^lmYlZ$lTuZWh"P=uj*]GXD[u^BbQ0I&1&4qo*H0;n'5;K/##";H/sE[,3EM$2m':U,>9HS!?tbU^EqB?e_Y*X;r4J-U%Gn'DeJE&^KGB!84Rd#4V2%59cLh@@Um(7prk,jGRp3i/(SR]cfP5ai:)K9L,a&o*LodI.^S_2L/(f2/-[I_gAFZ%,KFh!_X90a*6%Sbge\A$;AZ-61ATYh.&14ct:acsJDGr.'[[bI&V1m-eKCgRZR<f?9qpB(%-%<\G2QJ#d=[$9#8`Vi13"#!=pTIU;3i]:X9[s7RiK%U]7(4XRE@_,9!S^E-B-/8q!Gs:cohIVn')%A]-VJU\n&'b;*>anIKr)Q?t)NpH%UsqT;p:q^BQjo#<5.X2t3CeNI$oQ0%^`Ir"C!%0+f;>HWcr`X=]p.M\??WkC^,nSnJjb_@g)?.I[unn,t2SUuNF3`caYl/58&<D=adsICYL+cB[O/?!H8XgU,PRYmhtL#9KtL],MR-%Q3ki>_.H;K#X`0B1BjsW*Rmn'ge8k0GsF`.E&32#r=*A;$u2ZL#>tbsOsF5D4XXn=NFpKK>T:E=2p_%MJPHpN'@$[7V/HeR@2Z>-%Ko\r8"nT^4ohAkoERqj$`T8iVSX<M`hr7:gbrOZZ@qVN@FuQ149=5'hkH!P;qDdqCn1j6F_kcIfCt6YS;PJ*d0/'?SbBG]MHt`UW%d\(4o&f;Z0P,5C<cBCk&SBKN^Y(uEr&i=FOFN3PV>?bX9B!!QN$5]in4cgC2YfD'Uq;rWk/G%g8f+$UE(L-YD>2orni=_Jg"pdU'%6(iLS#^:.YKbK$=]Q,21Dl\qHV%^'F8V")nKEP87+VEk6"<so`^RO4<he]8Tpi<RJ<'KT)9J4=WB-JA(gma]HW(9s&"'@"XK$:m>%j_)Xak2PAc/>^-3jp.=e!>W,&`^$ff]!44+.>)5D-9Gs$E]tJa`hL;\+iRh=?Nn0NbD\Q.'qPaJ1-ouN:b;&$?C2[04Lgl#(.OQC%$O\*mX=A5!@k90c<Y9q9=91FHDBTs/1ns\2/GPXULBF%COkl*'RMu8BaMO7k#YIM/N<P#;?qe.qX#%#g=7f?@2s6KsC8f=rXCV-"%n^Nqa_]V7YEd94F0HsqG@19FeM`_coVR\Yp&rHdf=<A=Ch[M$'P^Jro<&[:33]SLNa5YD>SD#'?D&E6%KAo"qU:mG)Sgot%V2hi(%B]O+`,&mm$.N]/'7eU>S*K_Q\_73(4LD!k7?rBMEaMc=-LMW_QU[rR&qn2.dDI(Lb\%m+s2]nAeR.GH"CG>5LqK#MZg9*&iF.E"<%dmN;hpl!Xc;qEZLaGH6>4J">h6gg<b#8U4pf/^'sr+$BBn9jKHLJEi#nZ#?dX?;]V#PuN&)fL`A.O+.>K2?eh9KS$2mYQ_#/mQKC%+fft,WX)q/n@&0dn8mE0(8l?4SV('$b_=lFE6aM-'[MgDVo`(g3Y]o$h.eN5oDhs*_<=^il[%=*4q?TrNRl6*O(kN[PBg?mV'R?6%T.E#=o+]I<!*GPh%N7d;jTJdRK3j#_4sBu-mHa/1bYN41cT=EZlB<_9A'#n<GrEYD'Tn^<-)dENK]A)bkD!-f@Z,9C2+llRmbD>c%Ac?/LD6.#VLO&Kb3m/9UDpM<DrcdNpY+Aqm;DLJe:\XY@Ws*J`EI/G`r`,79+l;Y6TE_!4UpG"4$\a$+\U1,"#]+*&:[FSAVIKcj%4#fWR]%t.?DmNtqWUa$GVoSZa:HtbYmcVg%_elkl/G".tqV-:g$"p`YI<iP!'nmooLiljL6_Egtca7VE<_`V\35M5B*1c3?b([i9%'/3U_ZYu[tZcr6<ZBCP]Gs=2W`Uek*WBTj@5<ZcRfmHrX\Dh"Ed.!TulE"-IirmoZo2F%,*nq"$U$&>b8#q[/"P(lj;\SCMStI!J%IOZuI4"$sbs3FkX);<o/jep?m<EpS=Usf<(X*&nq=?q?ceD<A-qj"p3m=_"*s%2]%I[YFX<ii*klgR83kl+4aQBY+dRH-OK:/AEJ%]3G,Vm=$l2Q1j+W,m7KqlsK+DP"SAMp'Jko-YEH!km9u"UC=:s4opC6#q;9ts0)GrI)DSOKTr;4I3p4o#X&#(IdFq<hZ3L/.8.d8%jP>HQXQ#/9$!F^BOs.q=eWR5D,TFk/KOuE%f3HtB$e$XiX-bYmS6%_L*`1U?iYN`8C1^LH/N]qG>#s'&$X-DM/ZWT?Rab:uCKd0i%'Hg$!1+Y6G^8G(96W3U</(>kV'iiZ_VVsm-'-<U*/rL9$X4rBnGu'1K/PE2$Kl@HjpGec6Sl<75A`8oMMgtp!pTBl3"*mZU;V'?V%Um*`1nnD4qC"ZO-&%H0e`oB#WQL*\)rsL8t-M$8JJ.LNN=,BE+,[i'51Wer5@D^)>@B^9RC`1Su/SjX[MY%]nQ=e61&&ab[K0V7b%;-aI(LFR#8\!.!"FH_`@@d>phc[`UkH]"P+m:o\.FaVMg*[s,f&^rEF!s<:99G`<Ll%lVkQ3&hb3itt/aETcX.',rHH-_$BHBtWZ%Bh^>`^g"0+`E$glK!,2QL2)UBJD@_r&2S+lhPhu`P%nO$]-d!;Xq6\l91mV7JC9ZSVVqS_`?>d"\I`).!s-%K?nMIli>b7_nA$U0%e<:pZ$jME!MIa=12OlK!hGU@cqqb7F1/X]^>pUm!/Q<(>D+u;nQs!^(eC8&h%^;b^T"5@ZDQ$kM[&gD[MHC5*eL$YNQ'u<C&0,*O%Sc_otQ=VP!%<P;kS>+\iGYW;g63l/i$sbFG&5%Z!:#AVeo;)_UIdSSWW\S\NZq4,!,nnr6PAJU'#a&tf2J_$^iMm7%dPbnX!f-hM%2'bmEV:\r*2Io^L/<QnX5X6qEq@3Z'>Ht:UXiHa`aX1Bu'2jri+SB3(b"GKqi/*m+ashFARRB&l+PS_L&?,d[fa*;jX*##MA-#IC%4-[4O7JgsqQ9l]@c:A1le:>rN9\!?>dhUS\<O-0X6jKu'9F*=8.mrV*#6C]SKLgD3((+=IaJs'=BdHt5RJK/mU'A]O<[F"B;H7R;%aoK.#`3s5T&VJG]PV'ic9#2Y7.$tR?!!eDn*E8lW7a_=:[S:*Rdhs;9#^e]4VQ%0=g74mn0Z!jVBbH6!(mYtIk`!@[bVXF0Q3%dm%d$/X1nXHQ,Y"4;Hna;ep/Z%Gl,/fRZg-*\;Bhanqkq7XP'E4?;;@X3=d1u#Q$NV1((D!G/=\5p_LdGA__#]d\,uYdW6Xje$B>%.f%8KeXtl#%Uu$oJ'bTUJCV<>h&\Ej<L$b(8cVXKqR;%!YiCRI:bS!>>Kf%3hH[RL<P0<Z#>Q;SZ4E,S7E8d-:Ue/Wj`X9Pc+,Hd>`8%M?D(LQ1CiPe+O1]FTeGnRd!0&Ui@^o/*4u[GbgfM#b@_YP[/f^J5[Q_Nbq\9BA$7S3A:oLUS3fq%W!\MJ3`m%`%DWfZA**3#11qg%KX6c3#VfkE0S*UZ@$kNMn<RMp2/=URl%fmY,s(W<(pp@.#04kAj\Qf8!1goYGC*bkdr8qG_DDtO/uVN2(?$\U$&)jtC.C/jOjO2J%NDBcgL;0,F^`:k>!i<O@"Ckq>(L]#C^d`u"MIKEm"iP3YdF%`2+KqU,Z6boJ.:L.0:f>DA*^Bp,2&R=<-m'<B@13`9,^Z)t'NN`f%Bb(bHAgX#UTlpGnWK8RsJme.!:hO'e!KYkeeN=C>SgH2*9e-"dEb!r+1%62U,6Y@WPK#@T)^&1\RE$F@)&l6_h%iY7]r,Wq'n'%O%TG8RW!Y\'9@%_[KfY.Uno>gp.JhSl''q(MQV?,/l#6RggeKrjFRO5f]@`suD2+8;^n/!W;JcuB6&Q0E1NnT2UAP;V]=SiM)9R'r)%cEoZ,^OQTP'ft)dJ>n:$QiQ.4J2C5!>AVc_W\b!uOCqOh0]30Tbe(FlK@*bBQ&MJS0\oCHAK4i&?!X3Dh(r7l]TF?gS(`n2L*BuX%BIJ(_#m'2:e:foqbU[m`@fs(&WgBRaN"HF8(T)nAVZ&$Q:Z`\A=@3W4?QKaj<JVJe#`3RTf\FR@^lB&*NK(q:5W!)a&-2D97$jWo%V4Ir;/_14:m1BCtd@>`uA5+t8\`#ljTJ@4UD+0h+W\uH*&d&5A0:bETb@7dtn7$(QQ;+cZ7`bgs65%MM3WW(qlO4ud1'D'\)<=*m%PiP4WM_NRBKP76^HQgTX@$"j7"*7#0@&u^<Bq<&tV_6D'JK?SQLQ)`[1pSU\74"T/F3(N"='6+iKA'nY#LQPGc(W`c$cCMh%Y2`@%WpA`eL1DtFC-&=8(saJ%dNLD;=re?E7dLE(KtJ&*M!jbs;D#-f6![N*)%\/FH]Rr'"Jui!5Y[!7'8T,:+VCI'14RW$=UP"(fH(cF%?mcg?$328SVX?e7H]hoD@O[)Rn3o\f01*H*V?%tD#'RX1eh0gN0$o;<(i.eM%,d?O$W8o4Sgk1W0lr%V?rG9ZQ7eR+B]@G8XFne3%B,n.[U3O2t-Q.depuk19<>.@=5W'g\6`:Pdc2rquoOMb?SRm`tEJS2$ir^%fpJ_M&3i$NqfY9K".MuSLFL3Q@cmFW%M\+CW?s<o?%+kOhn=LSBPg?5Y"=MfEtEj-:XrbrEf+[*LX+q4:^N^Ed50]_#M58'q_^PRkb"-li)KYP/R8O>#&A'EIK<!#]\,K'`tYIG.2832(O%W.R+3:1,2ZD"14TUF=+']^nAsPt"7`R&sboLq)'aU;?mQLLL.3R#RAMR"2hCUOp0b,R1Z:_(CU(fuRJB_8!W:@d,(iL<cH@77TWD%=Qg+%>Rn]-/V3;I0G[*\HXWe+%6=%]LkUslQ\lb\,X"'mnMlL$ge^kD\SjO]A(Y"lPJ)AqnedPk,AU\C$Yc>crr3U>16"%6j]"!h%OLes06B0or:jU<`HXA56f][M[$m_`BhBNXQ+fHak!(2FR`aB^tB!Mp!(ceh:-o"GKc=+R7*)\'J'KYN##IZ;&(bmG_Zo-T21pFei%>8N,cXYMXU&i,dR+;'WC_>tg0U4T@k5Unhf:;niXoB+"0_U7GKI1M;7KLp".M+--LJd.ck8U#\9Rs;c_UW?mNA=DO,X!G,BVLkZV%(,od(&fk)F^do":LPnR95[&^mZRD$,a8c2o$s@`RYG?3pZt,khgR=-(^Sc@Dq_ZUk&rgs\H!rO5@;&=[,6U\7!h_)?!O(Q9)CQ9A%OC?)b7#W?U5r!n,BcM1mAqEWEneoNGP2ZLE(cUFSHjN>QR[t^d,144L`Xn<\P#4!mn=[XCV<#W=JC#eI@\TnU5\.I1;5F0-(q]sO%;[T3?keI=i"[NF=?U`,SS0]FH,=nZ+CKi3J`8N!RME9]FTp3LT6&mpD+VI<ag1(UZ.Mt4CMlG[B[U=Ot\ROL>&WRcbcp=ojKIiA9%>hrh^gXjV-@dM;m6/<H<e/3f4o"kZjmh;(_0bt(IabicdB+>?=Vq-T2d,;+N"!FYdTF,LeO^$N0P]6[KPj:Z?(R@g$<#5a;:q$mg%'F>J._(:ZX"=Ce9$Nod+;LrNFbTPoL3eJ#[$[;`CP9`J:>r@=MNR:suW^,Q";YG3?%Vk4>RsG@!NCdE+!C7t;q&YVt#cG1"%uqN*%`kroGH8:dgMN=pZ_TKPS5ZGFrYaIuRSFG"4;ZK:Q5$dsn&;c<i!CHS_j&3jL!tf(C"%)/UYn[6GL+-,$`W-^L*FB0ZR%[(QN=c45%"s!oj2C;*KQ-W<\i-WO2W_gc%'d_>.XkL3Q+ABB)UpZ&38mj8^hhC8Nb)Hs;0.$(tC=\*L.MZ?W,muD[fX`O?<fRG_-'_(^%R[A@%gb'1.Bo]Ue]'b8K*!Er)^fY4`6=Jq/`?[5Z.-2jTmn\]DOEQAV.9mE>[1EU0RLtb!J.#>En[J[R;2;\N7aEfP9O]cE&efj:6M\DO%\6(2JXWTV.W!`Vq,-_L\,*5]U1%s^O]+EIWMWQ(Y!$cU&jUt5ZP#@ZBq`^pEXEhsOa/.7@6Vjcik#/`$mWLVZ\\=Jd$cA,O\9+0U%+=ddOSL+BX(hD]uf-I:6QZ:im*Ji0.InanHSB;iWc9]7"o^m$?VtYZ_L&Th%YLhgbA=H$o*J*l0_Am!^6-\n__/s-6BX5aS$t;4%%jp4D'="u!%k(1mE;\:3@lTcm"L+C*?7I&LXg+8Jpd13,h(fa=e#8niiEUhIfB\4$4,ck;5<kX$s"*6RPKGh(hG^H5u9i$7X\^mSE%VhpNkBMcPo+TY]``C$#%TN."+E#(tnKmU,&joah5,SN:#N13L`08ql!*XMT$p;N;0,)gV<@qsDVB1P(p;T4O'5IkOEf5sIQZm@sW%HlNF.\gY4H]gGSTeR^FllS9D0k"3B*M35oA<>I^DFd_h*[mt"4<u@Q,F-,-S"JQNSSTHmEZH6cf/;*et8b!&Y+[$B*Pr7,>KlJ09%HXRC33tTCPr]/!ll_+!M.4!P>faA8*0/(D^^*,lfp*eLbOfa6KDK@O;#RWh]\>nXBV;ZS;6;-)*6*NBGRKJ^QA4$OPK34qfQ>e&`%2FgJ5#'hM..Yb'`V$+_J,&dFn_k&+"Ai;=.0)t1?Qm1!b?7q-Z7+R`\M+5&]@Z\s#$fWMk53X-EL?CT#*Z20-l]c^a+^")a%#Vmf%HAqcI+N3Fn-<upRDg5XuI28%95U9g9$hI;I&N"L8=uP44aXEpgf*Dd."qI-Gp*,%kVbg<6(ap#:F!;&7(gW%$#i/K)6;/O<nOhXn%AT%mm<\ub`5ThK(S@7Wc)X@m$;n+->7^SP4L]C_d>_`nu6Kd6jKef[o#u^l`5g]%%D>K^dqY:+M81E<A=;Zg0U/Xs\(pXOCc0;56%6`_T'3?Q0[+oNOQ^he_-d*fX")Ke6b1T\[+C^Q:^Jq*h%4$dB$0pkWZA6=tQ990?%M?b;(9QLJVcCfJ[-tPscNFeMkGmP$q:Y#8f%%a7ad>)MZ(F!;QV//eoSZM4Y;:DJL-i8B0Rdg`cB!X(tYObo<F?l8ndqbjXBgCPPJUcAS\=g!*E]-kd2.F+ii:iO$80/jR'U4P3X%.?bp%$U5ZjK"Ikp*>%BXe>]^q*Jbjnm>5Y<PLH7!Zc'8fI<Tf@1K_"V`Qc@)U1b78OhGu\#a`(GbXA3>)O,=r=t!GS^M>k@0Te%6%_G#f+-eg_;:9VSY0R!eUfbmJF'b_W*&V?5U1ua$>j9_pDZ5(7b0f2m\:`QD:E_BPW*K`T$_Mf8Ca2/po4\@pDjp57N70t"$'c_1`%9dFh14V/6DVt>%<Z>S,,9hSrZ93:?FH;gOo`5\)!,&n3N!C9g%VsD&&F520QGNR=B'%]$`@BLUV0GAYn]=K%+Q=28G]C1;)GMe+2%3^\EP*e`5V0oYP[+R0@O`k"NR'@EZZ9#ul64%7qsY/8/3*0:&SFAY^f"N((b(BtT(EI0E/_7!&V$'NC'.5LU__BRGG[<D?d/#2*$%J7t7E1L>-1Wf0U$cH*V2_)SLTjJBN/@0@f39236BY7hc/RHZ+tS0TkbY!d)';4.!WBNm$fVI=j>-*@pR%&uRJcN'RGKs1s$`?JUH%^)=Y_K4_Fq5@YB.,WpCa2Vf%+EFOo`3<oW)!NLJ&dnJQ;0@oPV*"8A331_ss9ku[f>V`,F4Gn[ll07(:CYJdrC%U;+n,l_!9tCJ(%)9C*RrtehDUYBB?N%WPQEsRX7Lg_]JQ.c&7ZS*C:/BOJuTW2gYFn4XJBct&[%5ussb[G<.O6egc0SDuo5p9XbdBuu[D[IY\hc.&T%964AI*%ngl*arRuUk*N5\q!N\ae8GF#dAF+T>LZ4Uo,Qu5dq"2:S\W/cVZ(c/4*9([YB\5+(D:u]l!g+<(%$)-i#\^HK#bD^s:?]%O^$0bkM=+g";i:(>GIHs<?s5.T+$oTZFRn_!mI>dE!Yks&1FP7:DT;:%90q`"NH\M%2!39rL=-JaUGK>L1:9N$\L]D[K`qAh,=MI%E\5Qe#2,=g_CVRUYt`a(FKJk-/9bJ.^bR;NVFIGX#f-t,Y6b_uFceU268Zqd]p':?KS5S(W/8_i9pY@,QQSUgKeX^$'Ea_Ohm_[D%W0V'cLbM"n\8Z%6Bh-PT#`1'Y+dbg]&:gp@;&ISIZn1Me9Em!IXToG)lmIH_6OK/$EM\jOb`VBR_JE\;iYi^2#b%H[8>Agb,g1uE%kh7KA0BSKbY9*FIii4T8K?:F#7@PZMM"EPO,gj!<>lZ!U83bpf<4YXgCeUPm)Rk[LZ;%PF$<]r_fnO;/]j[&m^C-g?m?9t@C1Hl/%4YSF*Z\<nN-IRU"<)P7FD32.:!C6KNRj0%dArWod]-'#!:pFGUL6oA%n>Q]R;]Wp*'R=YicipLa?TA/LYaN]JRm]AP5"6ZJT[*m7%@#0p+OG:Sj1CX+pfV6TW$K_eO^nfRe#hp)fWF@%+q'f7JKB9+j&BnFS>AbIK86#]1OCsij!)-klc$g8e:eRVmCEBL-+0I=ajcgEd%%TPBTgEj4abOCr@!cb0]@3S\lQpXkm,:piCN*mcAFjiu_K3>*i+bRd""faTpJZ9\:;H86-P)%WV6?JN[.?[\]3TMsZ,+F@hI[R^l%;AF1_%<W\XARB!(P/\n=q1`So11_q67E(3I$Z1g,)-NdjCpn\]6g.FPnUJ_DQQ9:rj#fOl^VcX^W.W6>k0S"eJ:Ro@5b8o_qhR/C%R^+BY#2e;1s)H0%[@6(e#Nc%Hg\pN@>$7!^aLJ#`=T$"OgX51&\38,.l?A/'$KeXtP8,Rf5\QPq!_\N()&O_?"`f/C5+nU.=C:+=%'*eo,cMk2T#I_bcD%lms^6"Xr#FSj&/r:En6G%CTU(ngF-;YWMrjZ%c!F0+5K71q%?P^b38=kBS3;891#qA,ZfhAPO\XdoPjn::"%gcpF549$J5qajkJeC^J.Od/Jfn&*2'V8iIb=4\<.4uo+JQ:5$_SRKuGYf5j*$ofaHcB<9*d;9__G+#B6G'&YCXn:Y]o0f@Dqq+/$%WjkEPbU/_Y=/7gHK-];%IS4L?EJ@Vr[]F](Zg+,B=0Z#_%*l.mW2TtY=jB:$S-IPu]DDL#4eX41ph9>f:H$U(hJ]Ol+SOPu2MoXi%P6&X"4XQ@/nU9bNPVS]__cJGu<Fd'$QkeN.e85F;AI2jU2"de+JqgG>6eeH]XU]:7j,*:"j>gl7_G(a$7)*/HE!ErYn9ZqT/,<^=%)mgST.Be$UanFin`0dH<fRhbN!qRJ``7R#U_bDaf:Z8g+&FS*+h_s6$WIYegL#(P#HoHa404BKe=,@#([StNo*JC1fISa/5<.ScF%X14?^+I>F"<s@a"lB].+]2j./@-69Ls3X5c9erC*J!'>dD<\jsR:R;O:PQ/e34l*7JT^fQj3sHb;tPUoF5S.>D1^UE1Z&rUh2A3P%%!d33!E<,Uqa]3M9rm3b=6/_.?k9k9*DVEM_&?W0mK`Z8m1\dMM-Xo']/5*_I#p3G\pqcmfuM41d;IrjWNoLjPBk&TjHDHsle3rp%@N,a_9b</*?"4n%JM')70^=;nJPr*J4#HuNmVT_gJL4C`o;P8Z:>@\o[:^U]"nun]Kt<bH[uk1"_/#dYT*ZXJb;t0HHbI7\1-j-n%H(dA6>+6*+N6#M?7#"UGlP_?%]pg;;L=?-69K`#7YSH*$Y0(6pWC;I(jPO!\,KAmiJa:sV5pY8]RC4ohWP=Hqb.D65HiDYp3TJ/?%MLEB?o0VeVpkq)+:DLm5b`Xn6qCT@8j9B!;)_5sJK(FBQZJB@"E-Gbt.Rh5-kOU8Z`0@g.AOHgV&kpq/U'A1`-BM#(]oa+_!j'QO%U_`@H79(4qp8$/oHek9en#k>[VFn(3SpHOdjR_aU6se#kEj""-i;hF(m!j(;$VKi/kqjHOP+[K(eZJWM)0!&.HRee+?!+aRb-/6U%):pn#<<ATUSq(Nk@ZP*oWSip"^jb&\$FX+:lKs%25JP=`Qi.*QmCt+7r9>!N).qU9k'b5CFY_UR!8OVQk1(,h\01N;5b0#)h#bCQ%P$bmo+J^ns\.HinBj]J#:mL"JYelseKBV0k[eLur3PE=^[6k)^ioOkN7n(@c`;O;[D=jIXL./2?(o-scAZ":#WU[fOG?ra,NN4'&%:oKA-2:(3.#:;a6(A)`BKW3CR1G=(09,lMD3oebmbd2G^iRQQ<oCkl.pJi`X@,4b01tKikRV@sma9LeHH=1fSEI9pn7(B5iY6S3s%HChqor?1Ch[+Y.p3Z'E2pWL7X]aCI&GZD5R;e5[P^RD<#'FXU('E,nHG5$O*ep<YL\KB(3gl5FsU,sT5cW=LQf/SjieBU9a"7PW$%/bEeF"MLJ/I98%cME1l?3$B>rN[s[j0JhShC"31J`Ghd<]cAOr3q.4@5J0AJ#1LTU=$S/bEa7n)r(?Uda,+nsg2.'cjq*q?A$eu"%8VeKdc9cR;K0I.d4+](PgCS0alB&7k(gTl<ah/Yqa?41R&7X&?S[(g[N1-W"'\iU&I$Ht"3eF8m1dt!B`_oMor63>9OLn0-p%uQp%Wfs:/_'+XE-_"8?1R71mp&%dhAT^Dkfdr4B<5-Z-jFs.ci=iG/@DH;_lY<h*YRKjD?0WiROU<:=<pI.]W>%3#&R-02Y4lt$d@LTF%"^_r>-Pta:J&2gO961TLq+ME)&/CQhF'<<)a\%l-HsmZXp-.#:EH-GEApSTVF6k4j=gBhG=Lu9Fa-H_lV36^[N[k\>i\k6hD#JM,%b?[4%j_GN)l-emC-0V4m+LK/HRq`a+q[3:+T$m/hA]"6($XZAF<0grgZB?(`8bAq%e;O^8:USpk]>Y/!k6qPe+B6oQ\ITAj)L7>@%Y)edGM%\GXe""gil+[cb:'ui5DZJo(*0BM;!8<CGfcX`oQ,Jn-Q+I!`eAI&))3r(tD$DZR#MK(#npY=I,:NBEq>Kh7`37#CF3=/$%A`Ua2lsMH6$XV2r=A13,H8HF*Hf!qT^=r^b_9=SMJfW(3N,@I;@a-N.'&<=!,W@S:Zhq5DY0F%]fr#n.-='ETkCJGILH3O`R*X>l%EsO\CP:)S-[fI&qD6\LA*AIE%GBQ5d_S$td;pk["AodqjIt_5$gqPFuj4.-[*?:=tKM$'sHh\b#BYP)tq?p>f3Y^e[GX7I'ITGI,%I(u6$a=\-T:-=eK.c=AQf8pOud8`1^EU(5lKQ;&kA,s(n(0BT*Y+,A@;_IZIVIT$g`;@_`Pu0:-/#PJn"l$NMLO=4Ni3Vg+.?n#r%6a2iCZC__9jU2h6\n*g-AOncQk^ab2\9r/!I?dt$(&XC?A5un1bqjVQm5ndkb+#B6nho3N;OihY".Q>HC8H!=(92Q`SM>*"-LRl"%BUYhSUk2]_@6D=pTVlk\%.Oo>V6&7s4I'9bc(E?@<8=1(0f)K'qp[Eu>dS&FPsZft-ZJ=[E8Ta&V(.ckT5W68,J%L#mLL5Kog03c%>Xg\=[$spQ`t2SdT>+b$`%,5V=Y9*_r8!0-a,=$rGlo_Wp(qtsrJeq^YH;ehns+!W#.K<,%(>,%A-9CGB+Hb8S`'9ac\'U&>u7#j%6P>$<<NITjSPo%X"t#3hA,!V#&;>:P'$=ARR)/JY4V@?Yh^g"D[D0iq%Bg8I?oNTc5iqAuC.76\ToX^Rm.b6#>r;Ti=;jn@NfD+G%maZQ!o#XL<X*Z:_&YsQ4`3>d*H`349:p$n*7#f;Y9A$BFM8T7'MH2DD3g>HuKI&&CLC)>\]h@]Vp=jfW=<1k_>$[,9S4k-pYq&g6%PTK&TET+pD[X6mt'2EE(Y7lm^PG<KZ`F*BSI^pQCjtNMt7OOb7O&Fb]nP,F[RXsD[j=s/F5Cs[d't;6k5BkL06A[hFo1(2D.\:3,%HMTZ`G;M]j#pT4,OUW5AT@SkU/0GA8NM`baSE/N3@5GGsc4W,I9lTP80D2<-gT?:1"-[)V.'CQ<$(1=BHe)1mOqr16S"Z<;-i5lk%f07)45*.%pS7=L9bkb+9o,/\+*2mhf'pIATeVB;ANngt2UD$eri]Rk-+<YTT-BXugSX[+rHr'P1mr+\(Y[\o3c[`cADgMOFfH0B5%TZ(&\&,$3'a@lBi]bd+bi=EW:D&->!0Wf2WTHFK%3lG&)bZ^^>?_p?lj&LsYm,"ssC?#kB5VCcc<^Rn'^*PD^Z(8"%Wa1"R%]MJs%;B=bE)PfF4bq_gI&=9E%.+Q,G[[H9nRog]*<!+qU%e7n,V"u@P3*l6)%CVNeVosm,]&_+\*FU-[<2hY%3F+8F`RrZ$db'G(\dZNS%bCF]G`*PNb0G3=-Z7a6W?(t4c)oYHq`FZW.r]3f@]]EJ)3sB*,M0;uuh#+k5_d"(09pLIm9Y&)!s-P8<o=8munbo%/i>]:)S14X2%WR=o8:4[-B=`R)TOGf7C@s88R]+Y<3FEH8:M3"0Hi6mpA.3!Z7I$4$!LZ^:6Er3:a(!\DsArIla-<H@6#%$[RmAE+SD?\RL)E%^2%f7'&Q8Cj+!9kp`rA<!RL.73*m+[ulL*18InLA!*J+J$XO2cVe"4M59pM/(-jHm?<:p`M(DZhp'1UQ6(&s(cAh##_^+\I#[Q:?;=>%(U$Z8WW>LsifX4.XQLMF0M%nWk[:I>>/3^mR*%+^S(;F2($Q<f:7188I>XGZ=A%H1+sh*\e5P'hR\V.L74=GNiW=%*C.7M8Ba8U!%Bat3s:ol#@6UZ$-A&IilJH"1,Ls99`3l(+T+>?ntnHP:4>'_F3J!,4U?!WH,kVe(;7$fkij6*)P#GZ;B7'&4#Q(&t\>.Oeu<@$G?%0&o)-2[F0Ik^@O]3TWYPO!+9r_GHaIe+V!*9JSQ`j*Bmen3.L2jfZH@1J87M\I>lg=^;8_[ZV8*9rtGB3P/(*ouE?u:7+K3]4fE%%7)*t[Qe#&'mTnJ=`KI0W/%AB#dc]&[a6['MQ^D\0C>:5'?Ud6:NZk3p_D"`CSc3>2a)0^ah7=Y0FYS`o<YNF0auM*DYhWO))2UcD%-lQ3]+Vg])3c28_8t$,6J9oU<I#2o)LfdPU>)-I:maFO7ThCPckt4ric()X'+3tBf3tk6F8gd:3mt5Yhge4RXmt(Vpb9.5W4UQfo%K9=hBLi@Vc"U6_AdVOe$8=C1e`*$1I,?#K;DnfI;aUX3&lX483%LtA)%,7dd@cCl6M?W'&M#e:,ple'=b.f=42g'iU$R;T?A4bSF%fKq?(PFB4097pbCgAeHR1<lMVQR7(n-h'juq/6u5J&7pV"7qP"NFTTJ@@C1k2,7[/XeiS`Jl&'Ee4]9bW.VT@_lOd^4#q#sU5.ZG%*!Da=/O5*akMYHf-/Lo7gH;"mmcd9;I#-%T&VP$o[,0Zc?"OrBDr8KJi6POh29Z3\%a.-bVQgIFGknqc5TT\[-_Xn868[^(FGeoN%7)H@8PHBB>Fd&gU>ul:t-P@jrF@ia%&hJu5,)gJ5`m9KaYY;](pFp<(h(KKt-`*"7(O=]7-ZaX.C3Em6TomhRir54>c0_YIZYC%)%B1'*iHkVh[\<Tl6c:pa`5[l%]JR]Kgk3<,"jXEhnVaW=LktDbJR,'Y,'RbKm6mQ4ZXPbnC5Ua!r]uS6C!gV[\cA%\r4<hC!7qV[Q%88+o].^ZR6<8fGlcU)?]RJn=</e!AiOYhMcmks>j0g-3bRrasO).q:JMQamoK;[X5"\d!HeSM'[a'G*(>l9=7WFiOP=MY?BlCO-$%g*bJbIntp.Y\^Xi.@1`,^q/Jaa,=:"1>GTj_ZG2V=$Tp],7#tKL]8WS(!t_-4>r:?6=TAn$Pa,m_P9Ea-_[mn]T4gQ>\!K$;Wu8M%Yf05;WmO&&lKq)06m3/g:E3R&h\TCW]7('d,5\N]R6LL-)5@<j3/[(`Bu5_A-$P]<:Hla(FHjr'jmrbtUIul`%@t=&;o=:lf#tIM%*+TLm+n8OIOnOrt,pXarQq\5R+l6,KA*uUn15K*JMafPg<@T5Z.M;oBD]eQnod>Y.'MutAeE<RKV6>'np:k]5-IJH\C20*8&n%)F%P/ob:n>IVY3P3VNG)oS_0VO9>U4K\_g*5kO0mOOH,\Er`d&BZ%mp:]9/NN"uB10ZeVs.L0\mU_H?Q2tT*fJhg!Ud6Mk?U475sK(&%/ih`srK/ZW(8<)QFf'!7Q/--,l8At:7?(#KO[/a!/:*VfHWX=.I&6s9RSO##OSM,/&HY2+WG@6SC79SU?$^&GFi1RPeY71p<jr`'%2/9\fFXu=u(r33<Z-e@9(`c"Nap0NLX)nmnT(/%I/kLoBk.%Rf+h4&aNgJ.lQ7R1,o+?7?<^S/Gq^:tRH'cCQ<'+".#Z%IiTae:3%r`OM2,N4IHF1FEa.p\YT7cfrS.&&GQ1QYkZGht^GM96?@%9u0_57XK1'mBPT7cM1T/a@Uhd%'<)3&U@==QrgmcVPY-(m.HR]`Oln%Ttfpl/MR,t$&g.->[n\9X/Tluf3^/(WUMA8,YY6hP#,2@M7D6NKH]KW#$/nrmS-$kq[R6&=YH(E2U"*G1d@/_Oi^YQ6?u-.[D>rr%oN134'8TFRcJ\2aO.V'H30RELRbc60-Ta3q5`\gseZ7?m]ab<PndF8ndgttCAM1BCd@VkLXIkEh\hk_+3_gl=,0QgnABNJg\]T#?%Te.(%G=jh*-$[^WI(PUlMt*[G)>iXZaknVC^FZ646`i+nc\^79&:WO,S5.!-U$ifHA+@\\$EK)6[B,X`i0n>B=`^!aC`Oq$j9r!l%Ui</VQBEN)GgiK%Q:0O']dt<S\(%G_8W4p+VW2u?5;SId,d?ERSEPeLR-lg,]+Su!(AQ]PHQ0bBXSV$^.]IJ3/-=4B%eSB6WCpmf%f(C2C?]B=OaZb<dPfRKq2KbAWC1dh^p$ut?jDQM(Rrl@ggCm9F3fVnlEW`R6q3Gu'I=DV5W?rof+4?#^<S,L;QpV+j=0nkjR6#Pu%as<<VP2f'=<.n$77<%O1.biF!A7"$&n'4J:%XWZ^CsVRo\_$,<\Nde?A%]c39Dh+Y8SA7A:0'/4p!UL@ptWkq1*tYF'/AU3W9CLN%7`Bqt->X5;iU=m0b.?Gqi(]/Y!C^O.eiB,S1;](b;6e2s_[Cb/&J?N7A=17*+8OjCTJ><,%#&T,`:>pq_P2&Bh?='jH[SD2_bd4J%jhc`q1>=K:T4eW0"_:QFR`o%`Ym*t-@hAUsAt`!(VKJMG2\V$;3X^AY=m/d_X^Ar:!OB76g`\r=`!Mc+:/O7s;N=*`3B+q7GW3HN%]+&YTEP\a-[9?7c8BdL5gqB=,;U2MZdD#Ea1r0M%+aL%3.i*4t<sG%V(%VdP?5\A'R1E$",!3nM`(;<D2jq]`T@6^'#pV$\1JkK4%fs]tV^BM'X:q]OAYe*_BeqK2RGcebHd^\;6F-F<'ghc_YaAgS/UW&)A@J?J?Fs";fX;9%%js=Q^*#dPSb;frY+K<IcXG<sih[u@8%2q'YX&K,*V_gDuGVkS44>"%ASJOG.FB[p"Hh\n05podDlLWS@'Lc$lg]YE8oec7j1XNlF-&:(:R;ln;49;d.%J#gj8*"u[g2X"=B%)^eo)e@K+^G)?74pH==W=]X0.IId>q8J"LJ?PGB79-&DH;mEZq0:o[Sr]1V"iH;/C$NS).JL&c\OaO1jBR_MNUt9s?$"@=6W(N9:%EnoTi\s.CiOf1$GDg<KE=U2Xi]`^!pSU_RlD)dlj\8?L7ADP8H[rkb@he/d3!'8rKbEjrfLbZ/u]k<R+DG0@#W5q3\+qh*GMGU0!%lkPQs[bYH\XrQ"ZG7U*_m,]XW+s@QgR'Z\eBq%htefoNFG(u)qeY@ca+6un4L0\QgM#6BrI_><A-V&]:POj3GF5OS5>8'4=Hnh'+%Sm7+r)#k_(i#*1?Z')!h5jalD1ueisUu[3_'SEZi<Q`qJ?9N81ca73X#9![\"sZ_ob%_Q**$O?f"U#>c7\'8Z.Xr^!b>mW?nr#SO%p6N_/7ph\B$Za@@QZ&9JiX4tuAK/EUfdqtZmUM%Vikd_E92&0]#Ju=72#SQ8cCq8L0dctM]4aN)I!L@)OTdK(@M(jO>F4]4?)*`C%["8/Ih7f=Q$GMi!OrWE6@@W`:RFj]f`7m<)O-9B@$2:%]L+>V:3:A_0!cZnV@A5U/HN!.'G6@tKS\%u#@n=rU"0TtZ%$.Tgq3QA(%FLQoAW&PXsrI)WImb%qun(W;:+Bj?pS5o00cJK+!=Mu<62/r-aFaaMj"47qI/V<;XNrM$cP[DP7V`2`t]KZNH$>?B"f"57EpN3X(%n*tF]F\df9beNBF69tn.<ar%!b'g99iH5W[D\[\<<mJuEM!B5F!U::(:Fh:\NUkfaIL`&`-C1K6$<M"KhSccOJO!!r)m-oK:;8/J%^1gulYIOD<]*<bG$5t.f-gp;nNpop[-8f("C.bAke4!G,1,'@d8br<Z-b/Io6D5EgOjDYc?7HT%."K;#)Z_+e3PuOQN'Y5h_D"#e%:4B;HWPEZ@L-Q+m9ir"L>e3e-io$BbH_6WnQLsBjOJU/eeKf_XAD,!<h`d@-$aC1OlF"G\Kd/OWY)]</5j^rYZ+r2f0&OVEQ3&(@%$9tFR>)Kj:]ZcZT4PfHXg$<V92KHBl6.N)EJQ5*f?iU_])N0o!`]sb$)[Asgd<RP>rY?>oG,sl>S2&5Z+L'#&lNU7,?WCg72g+,C%kYp\5n8SQ@P!$.T$\R8QZAd]rdsCI\$n!YT<sDe4ag;ngC@h>JkNJi2lm&eGo1@5?1J?(+p=id&a`%P3?+EKA;aUQ7>i>'tN][;?%Y._SeKY0i%l$Ei<eF+4F:3mTRFX?LM7b5j,I+:PY/@*5h#eofbh57NKZ.L.uj8fS%>'9H6/Re<PW^Y6qH!XG,V6#K\%1#b_@0UFl%2&YQpgnu0H&92Cji@ZjH/>jQRP0/AU"7seh06[D52,n3cWlCd?3^SSo;l\0=N0j/E-H&>61_\JgSZGmdn4;i\CLQ\Hn:kO7[FiY=%o"#iO!V+F74NB^S+;.'`j"<.G=CCuqeFm3!Ucmk*o/!.;&VN%gG_\'d;6O#*6.@9&j]VAJc9_U9VXh_uAfX%jlO[78=DS"CSrL-^%i5+lp:C;Y!$iG+.Ku=)m/s22KqooYWH!Q!CqjGbYe99N^JHc"@-Xh%2H+u,%7jNSNYm&TiOLf$3>s7l^)\3RbA=fVCd-3iN:83.k%[Rd\H5@b&[!HQTG];eU#6"iJ-cT1%L$,6]M\,5P8pX*Pg,0tC8grE=LlZo9)3]9==^8,0NGY"uoCK<\0qZMW`e)N@((kWN/>o<Cu%;\r57]+gJr;\%nOE?9eJL?AWuL6Z\WXD\ik/c!(1&G\Idpr634n&2@-o=&_)7^Out<f3rbZd9(3p<N)[+Dp<l%I_AjoYRu_JaHTj%\[,0uAqA$>(9m"(HPWgs#Fkt-h2?rCjQ&7bm9(PeXaa4V`^o=d'IEiJ@1Ih[><A\^Ht8;]*QYPV%^"?`S:gf(+eB;DEk!pc;>NNe%+jgo)FfF5Dh?Pcu1:q;,)f8[i6N^p<!PDE,M"4NEGfuh%#18EY(6p)8X(!Y43o>tT6`-%jlY0S66rLt5:S)W.&W/b(:%H>m@BuKW%G*KCke5MP&lr#cFY4B8aoD=]2q/MCkcP?:pgoMa[2s!AeE[-'EW?t=W8o6?S':C^LDfo)+Nn*0#%-_eoKj?k-+=i<^X_C0+6abH>%10(8t[A<UD.lsq1rO&GZXn6l5Q9Xb<d)J!<lDpEAZifi!n2eGBAB$qqU$8;raY=>9EV0'M0Il!Hf#i"9aD5O'.Cp6i=)RkUOp/:/%kT(3hARZ/5Z!t\9bW,0=SRXV#A3s-/!A1\n^a6uL.Xsl\B#(*+,?LCoWPlS;aLX5Od5m<<@k$2+l"77F0KdFaZpH'7';^BYa5mZP%F\$39_s8)#;/aq_531oRp>9SkPL*A#4[+S\J5!>^)5\5:`Xfp7\GZ<*P7i`%5h^(AWhL+K)+2,&NMo^1*@D-7!U9f,YNEF`C<>1Z%+;/pDG>lu$rVP.mZ'J[d#^7_i*]5kFb8cE82.%0J?&888rI:B>8[-=Di-Y\)Rm4aWq+Og7BBW;&4`TjFd^;sr@=BILpjag5FJ2YV%$W\g0,Y<"N*hUmr;!Q"Prhl-eW8ZE2ehCMaA^k<RHRON^.oMnDDIRaL3=![.di)sJ@7OqZ2DD<PX>sng'22Wl&_LDE&XoKFf]\-H%fCRZQi+"o;G7!XE?,6Q)V=jKj?bWg?;nh9R(q+el4CS"sNf))aa)Kl*J^l[5=c+S(hsqdU[sSG@QB,qsKpci@pj4Rto#YY3r8OP>%`OY/YrB(r5=kYECqDR)t4tm:[@#Vk2FEZ`Bmi]4+$d:PXBE^,Mg>2:,]'87aQe:Cc,gMEeq@96h^;,-FG;-.K;A6B2/i,`]?/K7@%gF'#fIN8;7+$)D!bIj3GCNnf?=bhuD^'5pdE]/TUfFS<Men_A\J4'3Y,/#$YZG9^8Fti4&!`9t@^:JXID^?9'n$WhE(P*:LV6HBZ%eR5De!?Q$&B=A8b^g%E<g^\l0<fBZsWa<RibPDc.d;%UuI4-f<6[5EOfS>?/Tt'sW+K@U2/G,XO<7"():F"7JKK`otp7[ArFGBpQ%ntA9N/8$MWJbg%n>5"$*UqQ[4U0=h;>UpSWC;ot#\HIU&#a6op>pe=<PustX-pZCA"l`^j^k,Mfe&pFg*AeV4cVpd^U9M48b=80h%O"7WLaGK_dAEdM\fWW@-p#>BX#r)ce9?fbg&MbqP>t?)tA^e)S'#/1q#FBKD0[Tom16gi.ce$6GjNUK!NUE:n^T"UG9hqqVebP/\%YJ)404lZe#Q1O`@T6qVLg*#qb:9PODKgKgZDP#pQ2jWI/*D;Zk],O514GYR&Rq8"Q+"&"`itt=LeVJF*1m5;`r$`gFSKs4i!*T#J%HFAC#B?A1;%4nLP5RYEA=-#bO["BLSgs"K0c8rU.5iC>@'+p2P!V@-uM>eE6A;=&U_sH%gpE5Xq.j2MY@&N6Ml'8QSr1#@8W^T:S%CK2h6@35k$$'K*H8"h3Wj#+gj&^dFOB_T7c)X*r_p-_i?KB5Z43&#*'aV]X)r]s0#'blm)^19oNg]\%P8c5TcB`Z<_m^]_1JAk[n%;[4TD&R5B\i8Dp?eZ4ntpXU<WV+W%K@3ipeA/oN[_W7]Li_Cn9GRZC86kpC/+16#2K1-!k/euA[K+YeWl;p?AJ),ie(.kB+E'09H%b,B6Ra(&hHWVt-[B+4R&TfM9^R;VJ;i+f`/AfS0MqlrFWW-&6np;^k*5M;_I3^@0c%:$X/ehkpW',ZdM<tLrjj,Y)8m_gU5O'+('%a8G&/TYlcPY(2_&YPX%))=lS\7OmG$.cWrIo9W#074;nMH3iVW\W]B/GjJQ]^I0D)b2h/eS<9;PL14h'>jsZ!kTV.VM_G9Q:IC,;%,#fKA0pl@?JOeqaP``C70des)Yo#t?jhqdj=jSFB"5(JUbfsn=`!Yc&.]$egOdU+!$!=JLEs+ElI1pce<=nTZ=Aep8Csim9Z>UqH%fl6V5PiAP!#$(TFrRXjHB3Hb[(-+hORc>6Be'C`LZ_^(<f!6bbK?HAaPiV;]EGC7$)YHfIQ_]*r9M%9KN<IF=$J5qgHrhp>Oc>&'%%NlF/!EO?)fipWd>h$C7fLKI<lrc,4DfP:q[j"DNG<!O4e?*s3\e%UsSO>"lU>2;nC0d"4qe1m5-M-1@Z2(p?5m0Mo]t\E=^5R]^%j(&mJ3W&2j<*10"`4?la3#MtWj)'9+!i_tMpjU<h)i:!h/,>F,]rpBUCQ(uhamAb2e&H]:(PkH93m.FolV(LqJP]ZK4gWr$Tj:/T%-]K[@^^%p,]_"-aOks811Cf'i!IK9X^BY0h,3Z6:qL"2lX6D7ZJ^bC'6AD^#D[O'R+!PR%I#WdqYYO%^Al:]8Fkt#8'"BC0'KbtC%hq3QTr1XD`p_J<hC?u/KT?&7?S#3?/ngX$o\]RO`?^/2h06Qcs6iGHseO,<0^J8tH5^DD"YWDs'M%PD"j%cBs'&4^tU<u('67rks%!dn84e0pC>U2?5q/,W)/(a;hT>pZ*WfR5#)Ssu07H\k)o^b&GeQ"HcA4?$!]Z+hn(#'L7t8V#65q)[U2F7p/:[7u86^*?'%*=%=<%(!rO;":Po+MWT'8/ZhEU/tUJ&Pia7.RqR*`#V8>SMrW"dP\/*IclHACiofm,o8XH_-8e8!aQnhj3n'/Ac4cI_n0VjS:pMA+q`:-7%9[+X,&.FE/1EDdeN.d$I;4.Fu`n1F];8r(Pht:up/o`>Vm_b0G+so_`@GkVUgVpTTr10PZrd9VPE<&t[[6q_4F*K:#eILl(3U&7l%h<K>27$V0;;"i'SK'736Gn?*4%T9Rpr8Uq;hZ@7R:n[Yg-W11^/s`SV4=36k,,n6%(33=%qqVg03:qF.^E(NeS0XmqW0pd<,KK<m%R7*RXD=X%)hYTYXYZrb$A5o"<*_$)Rl1=+p7IlHZ]p59rgKEf*_TUBEBVj-@fA++gh.Y.Na4aD%N*'D]d@.ND@Q;`jM4V>']EZ2\%T^(sI63I+-Z9^>k!obqH"4R9:>63@$U"_=8Hru_[*3g&2>]N1lk7ah(]5o[ga6&9q2q>F7KR/cPUcP32a>#/;>C*8FnLOe)q=Ah?%,%1NDEL)F)[M0!K<,:8eFA6DbM&YDr%mhkhqqG_MrpBkOHT(Tl3WXPF&'TB68$f&E6bC>ZhE<]W,Z\9ATcSV-I?ualJ,`*7-NucY%kd]0!9K*7PU^Pk%HlJd=OaOICfmq+_T(XGtTjC,--XMTqiiDKjLs4R]A.?]CeOFa!O/#68ghOO;D&,#_S)LLWfo71)\4jS3WB](#%d$M7A+I>+5A2"<5/1l[r2RQ!Y@>81mGjNjo-SL,fM1H63pfn`g(,_P$J$W;A5uTQ"*^(o*mm1WHHHa**U?)Uu0!lioRfCT.lolA&%B3B6u*f0cDloouGpK<qg_7IdEaC`t4+*oU_KaW`Uel`MQF8VW6qXR(l7M:p=7q>cX;##s]G!s5[p4oGu&4WJkiB;;tU1TZD_N$^>%,U)=-h_kj?ND-se^3kQ+%7YqK,BIS8Ot@`]5/%n5(4btBp`D5_3F$[/;;kK?CIe:+M#^@[HhM)oLUHD*G%]*c_qGNuF#WUl\+X&t%Jd]>hCSm1B(QhdugiS^:Ug=Ij?23#biS@9,p[,5Q4kF$.\T5@bS%O.)0@V$Abt7"uW'*Of^P!k6Q7hk]1/0ukMi/kcJ7SEmO95@t%$*p@Zgo%YIE!_+`0qBV7.bi3kg=i>dcV.6[HbV$(>l^$e1D8F$ID-_\=2ZB2YnSq&X$UP5_PiEl(4r-b]X)dT=pV.Tg<PTQ+CeYF%f&G]F:F*>eV]V>fgeH.FXr[oG;[Req;%%#&d*TZcH^K^+DIXn];C+6F+m?f?n3bKUJs\DZ7Aq#%[_86-BocY$-)i:k+,[K<Ij%6+%XT,h5,fH4tP"Uo$mQkHUBp2=V[ao2u'V[7U2B]N*,=.n`UfSKbU]i818`rdj$0dEXrkLuOCj+WZHN/9TfXecBLt4"!fZA`9H*Uf^%V&gcf0ET-:epP[VN7dJVFGEb\-Sj7X_3%j&?tZ&]Qu?/k<KXhDG:e$Ai0To0[5W[I+rk"3($s!t"!]^uALN!O4'-AhOt.AH!%$<u%V#a%(Nc_BJ=)cH3-Il"oc15D]#7sf>7j2#SA<JKg'2974Z\/L@ab$k!@Wo%b`(BEumF6Y/<+X'[_8m:O1tALg9%]#9&me-F]ZEna%*18&[7NgL6@iAa^o/4OKQn0)h-_i\dP"`$M/3"88(;-%]$YEuN9cqSi_$h\ujRXp*0RiF>nhH:Y(r:JL+/umX7_<g+aHZ@7oP9+8%hXrF&E9s6`/3#CX(<j]&ngT_PQq:%*8L#[pJl,#@/./q>+l/`dpI_UH]`;3<?md+!E+G+^fEL2IJ5H=MJrR<mn\HdtV=Y2,P6GUT%)olL*?q`WIaau>.7.u]I39sEfAddH?.$X97/D5WIa)jEeB''`aI/F`ZOs0]FU66l4j$Asf$/k7Qd_l.)dE]?B(gMKo!_1&U-4'4]%Y`i?R`sja5B,><!p]8tP*GL>qOV-,EenQLUY%pAR>m_1<91VV_;A"aYo"fC$g.3='oEH7Nb9&@)I1N4.GemuA)\L0B7d$+j0V@n4%gLf"Y*[al@_n*%LP=QFI]Y?nT=s@3]PLhJsnqRK_EKOO&J*p?-<.UY$D`,&2I1KFm'qM4@AQl`:5[""Rq.j-P2Is,X''-uf[!D)*%G$IWKCt7T,\P^u^6V`!!O=8/b]Xu=u2sCt%q2jWK'[kelql6P6pXl_iT#07t5=,_:N'NqVolDP:PL?<!X"4\@&ljP0P6Dh9bKe'*%ad;<od)t]^'3h^(TD,sg!dBg9IY7jB#@jW;&A$4mEaaR:g"R,N"&VQ1bOA-?'+gACnnD_ZcA[K\W[AHL9f).t,=ld[gDPer';g'L%17*6LHNmpjhN`j)`$4\dL@:"Q$-32<%)f5j0&oIC5YN%uJpO^F[I8o`+:_(#&5rQkNVV]Z2R%*C&9d&:EMJ*`?k,2Q"0iia)d*Y[%]_nA.qp$f&q<F[!EtG*EWO<R8=hX2Zo@e9Fl;>.:j:l`F1ol6`-o+Q)]W;:QXT\\V(&8/7'R9iuX&fUc3FZSQc1B6AQlq?i_G+>L%bCNPKO"ppU`DT.[Wk"a0[rIMK-O,V87XMYhI(Ho]8.P>kG8b0.WFicF(/$NA<*RR$Q)'b[$e*.NDFMNP&2NHbD=U2_ia'r/apA.j%*b<F#\'[>l^i&CVZ3B!6P=Q5&c1Pa?&#9M9m$/j,S_t9j$>M7`+'>)FK9SMTg(UsjX;&O=P9@SISEC9s/B)g7M>_i6DZm7S_+?Eu%Ji!"[-%pQ&!^Y%lCi/U!RUqR3>=!A99Mjp&p0gN6UHJg./)nHY`kJQ1#L:>7aQn9#0Ni&2.P]OckF&]X9V"6aDIb\Wch]N4Y8G`k%fe=[^m9(Do<<A+>O_W1C-Vl>5[(NuP5Z/hg;MGVB,,p(5OsV'EIjtcM\Z@-pD,F&a4R2!hAglbo2WtBS,*kqWV^F3tfka9RS!1q3%K_rSDcfrVV0:(Ujp:WE=;\+bmZ3[!KMTGj67(N-U#=CtP@SD@BC?Tj'na#$]ToMjAjFpJi5>$HV+0UkVYL!V#N7WGPXb#`d\g3a8%Sm#P.IAM""S`0_jVUd1TUg\#/9^$ZDX@#*t_ot.eZN$M!*JBh<0^ZSAc95U]6rk#X_#)?e,gq,i[6uAWB%EIDoea)9Qnq[21niB4%@C#hV9BDGm=iuRrXb#-Sl6o?.Ja(Z&M+gH5no#SUerm+VB.4LZ'1UM9k#S9?T/4cp;srnfgcEDHnsEXZ\EJUT1Fc6dM)U+>ZV*.L%:^TeAC7JQ=KZS?]SQi_]YjK!/j)ss`>B,hTa[bOFqm;]n(?\`%FdQAFa0FBu5&"Yt8p"r.''Ii]Zu]!I<XnX$/@+o\mZT0fAr]2F%nr/74[7dg#@rC\2C@SjB9+m@@CN_Fl4m#cYAgh1TB@[N6@T=!&<C8sP#%2N"OH!b;Z)lcA;Q\J/pEA4N*_q,i[;N<^'St&96Tf:I%R<?T1A9dt_/+ZR>Dj!pmCjOE*2Ego\qE0P%k*EgkVQ)IQF6h%-[gZcJ1USWBiP[iK4]Jo[MM<Q\.!:B/pf?3?@]EXFY.A3:0\q^b%Fh=]b<OXV]GL^Q4E\/;2[uO]jb>8SWIn-s42Bk.)e'Gui%91KuIo2P5;r,;nD9R$dU;)nmD@[ki>=Uu%)k!XB2c8+BeKD=uF^$`m%lCKK+L+qMK)+#QT:Zj@?MN;7;#u@n)PI6q-2qb4ca@(.Y\#c<]92Wj+Sbig`qTP4Hc-fK]K&pk"D'Z!ih98j-+@R(bl:LJdE#=P6%>C9aYNOGd'&I.3Ol3;Jobgmbi0U^'mQgq4kWnZ/l9m%DCWG_7+TkZL5h-qWe4V5`,"I34`HbV-!&?hVF9m9h77WRg4SHRbcA>6\Y%$2>cu$KO1Gknd9.\4a[//dKoY^2@4B`?^KR]?h/?/\Q#u$sHdnO3L]8h<c7M?7H@ldG6tsl@5kL&gHU97a*?lQ^0]_Ci:f`fJ4np%^M\(R@#s/XY2S%X;nJskIS&Z]k%Y;mo/Z7%G1O\Z&^pO$%@NlA80_Z'9M!gU'H?#A1aJC)IetHm"+P3$Mqi7&jH-tT#%#%3Q^Ji7%F87I&8q*$3SEiq<^_c<.-KS5Sf6Wa>B)%9>.BbM#VcT)h.WEHSs7l75d#=Z/ED"]ENjq.F,,pE5Wc,-YqS4@_0spr(mdkSq7tIlT%egTHA%jK-Z7l*\h_SK6nZlI+_KdEOL@ST!0[s56V>P:D&;EIC3QqW2o<#BHSWP-lIS0Bf/3sam?*$el/Wjoh]PaXIj/0gh85o=5V%[4Juqo$3[[ltAq3'pqJDIukC>W5rBEI/UFJTLSc_CD2)ikA9Wc=`2e$U</-QR7:Sr>'TVZ(&$#K?h#?c;*b=OEP9EU<32.En])07%%@#(!H+.8:WBdkjP:!`!KYG4+cX:dZ3;m1KhX8a?c$LP>1/7?^:9F=P"Lo,`Bk^^*`D-ZgK/'D2^(@buRO(]1Gnj")=pU//M+99p%'rJ.TM._D<U5qi%3<u-cA9UiL!Q)@VP0N<!m/s>..f=ZU(_%*LRO&lkEL9/b6<6+.9:bL!MDja1+<5(=ZFt]@@VNYQR!p,Oi(6BO%&b&nCP/8I(_>&_@$;d"GP<MSeoDWneQPJl#9A^A1OPO]%NH24CO9eR5-tZP*QScE4Qb4]*nX?FSc9[o\$#;>2<Mp:"aeTM`Nu0p#%W!"Vfe_of!3!<L1n1$bD/1NuSJkjE8CF,BSA#XdZ>m"NRAWTe9[M*Du8<7jW&]*8C0Ce@F$oo3I&8.Ygh:jD.799hDb_=HcT1^IA%H1#R>'MGumGs4bH@0GN7[t>FJ*::5E,oO2#=H#ekb4LPHV4dWahsJQ$*D1Z5c'=#%2JZB6WfYWZ/0UIB[])8oG+1]l$G73d^keBE%n11e-YqeAn0s<4S?hH"u]JP1bhD&!*G>4!lH,gDlH,oDj(ADWV+>hX?]OM2o]OQM<,+=.0D'aeQ-=2J@*,ZOH`R=5Z3t]`<(bP1n%6=84WP0Q>,aZ>>-U*5F$C/\-UFjDb*(a5Xo=o.W6h->9*n:SsCnlc4/&Pfb%9P^)Qk$V#o"&uO^ef6Ik=d-@0-5nQJfqXeo4jcVX%ae`.W2%pEL-ar6-;[+L%(@"2g!:X+!.E2`=rhfZ7;pg,#QCLECd88%U;o$Q-3RD:n#LR?EXEggs4[`,*DIP/QmZi#\RY0"r"QU3M%FNl[a1pn[+6+p<VBkn=p@-&8,`_AQ?9jjt<TjTDj2KR,._O<X,1X_ps&eAlH$=/;8)Qt/0`a,\[alr>WOO*W.%)R1[CGi8OAH2f]%UP4Y:W!o24FN)[+*D%Y:=#(ti,$mKtG3k0rJU)RH],<>eKoOFmZZVM#)F?ntJ5N\N''aTQcRp!cSp_fH\HX^j=#u1=@F%-,mF_`l%lIu_/kQb7%,S]-'_kk-]e-QsVg$33sC.EVDN<CNYe&2chKQ>Q_6"4sRe'.b5RaF#IcY+8b`qBYb]XjPJltCfA8Hre%_$f'Nf:U.2%?'V:o-**@,(;>tT=]:eEV/6@(d<6a/BH)Coo@AKV$K)5-_<=c:8pOdqKXS'/ia(A09]qT&I>/BhM#h<8<*?1q"IkdRJNpWW&X&*W%q86JRm]Fl4X&EqJ"PokB*sO96UXo3T-iW`6<,c:8=1cA%s842sht@Gc/FqTk7OJ(&-N-@[j$b:KbP6-6iVg\D'YW]:6D7HN&.22-%IpOTaVE@F]r0eTemX<8;\sB5eP%>B=a81Z%o04G&2HYR1@52\Q'-*S6rqi7$Z[8MYlm":\B?RY")%GU9,*>cAP-apL0\PD4+"MBj%VRH=DH6j-DI@^gXn6?Ter_Ua%:BN&\$GlI7bXPW$9fuAm'cB_8%jHor6;A4PF]YVD0ZG+p8ibklOcX?cfuRZ^(=$fT9-ibPi\&#2%\-<^/lEhb9R/LAEk%T?-;37$d^4/`Tn,)G&C8-!O=k84AQ<*`;#.q\!$^$;DCQL)Il+F<P_Yo\Ena,[ETo"ZPU%d.p*CQ_UeQ,_i%J/W@+@RR->.ep]1[$+8A\as3bf&4shR'sN/ejf0$^q-qlUr5>!5hA=)k)BV>]?gB/B"03jV:qu/6%S1e[VN<WJSg4S.r+G2@!j\(%.W*q;il,BC'1oBRJOf:QqCiH0/qpMeH.J05V0l^aSbT*aVQ!F(YTN"8D:-@H%q#5/#UlBVG"@c#q1D%uG*^DpA;gZYN!%]@m$u:&%e6&R0XrWT!Sc*Hk+Hk5i'>81BcX@)'AE#ln/2fIN+F=8^i#"hRA,:^"ktS1"l`0[TFC!nQ]LHjPP0mMHngTe1P=L6c`Ts<5pYQ74%de)s&_pf]c1X^oWf,i-R5s-M</JUO<r6`VJY<&Vt#mTo);hK<K^K0FVaX`K9omW':e4Afso(dI5$d'HPUfK0+KEW6gl@j'#dQd2c%=DctU_k:1-!f#@HnO$,ORmu+pPE`)#'2ehSNrAcs0Rb-n:)lMC.;%3aa`/PG;)MMF?)1AtP]Mn;f9I^?:,TX8IFnAN_-H=A%dZ"&%$\;:23(_E\R=k.k;H!e*&;t_833rBOpb7.NU(WbPjR-uFG7KI4b`>De7$NMk(]rVD-)Oq:<!c&'6I.B3:/&46HC*M&Mmo2&p?<^c%CA+/QG_gMl-"^UFab*<hM)h*I_!=XsBt[J'?UM8E+L"cV*FNCmd0IPCLO?r^QR#YQPhqcXQKf*V&u9T`fauP4-O>HEHKVfOEfj"<%Aoa$=bX=X'X<B\%MJ`>T/Qeg3T$?L3]"Z.3[PP5n57+5RU`qb,5;<3?]$,i?+QZMd8IjKm+Tml<VarpoDu/_p\kBl&932PiTV,];%Zg6_bgh(^t,TU@SF2<EkA6cEeBa(E>88)S3cOI3>LM[jLS8-7K"U]_iTdXaBON0?Z\d\f.4j6TO.pHXG\?lR69;5)gV6WMP.H]pV%_Sgu;(^`.-9:"'2-^!k?@V1P%c"TX6W>>k4.1T_T:LC^G2X'Z/+gI"6m=u3]f.bL9%b_GB[[rcXc>0c"bJL1O*r"PTleWK5//Z;F%Uth]N%kVP5c?hTt(S.l]l3ipd>pIQ0F6R-I-*rT\SMqa2oq"K!KGr=JVQ88P(F%)Gbbg2sn<D4aY@u8%hO\=5/!9fRmcM+qj%H@g%*,ZbVBWH3>ULEPpO0_DBA.QIS**R^eKZi-.Ng+c3<Xs=!S4pKJF(6SZHYm&+qi_SsArPr6"@VqM0!g%emRSuqmft1QonSthW]SYF%kdCT1R$d#N7*o[j7fq]('[,"WK0'];M;CcG.@V1sN\(ONJI#?i0HS^:7\WFSDP9a&Is:KR!m)`/hFNlTY;:W.+P\p]ind5-FWH#r%6pt&0N[tJ'4/1S&JVc;u"Yc]=o?k9e'ut3#Sh4-GWp@67_DX,eUlES;#qnp=b'IXp3S@>KK?hE)maYbqX7oqOSi]^&oHM^i\&i#L%[]dbcYE][PDj_1oL\\G*YLYEGi2jW/"9HBiKPs@!c,:/n<LRF*7`FY)mQHFIchDu5+$79ZCtI79`6R'%22J@dZuJ3a\rUa;h&[*(%P;iuAb;tL0+e1Fm@l9TX*;Y6U6$<dU^d(rh_9!B8jnVN0NT!Yt2DXW/$VXmOZ[ShtF:rA])T1HUBJd(5*NIe>'ZjdfCP;Ptr5M48%7=$Ws<I$&Ok;p`@Q'L:q>G%COc@i^U"^s)qG!!2k*^oBN&!fhZnb9sD)1Y<6%*2BFW*LbBnH<(gf9,S%$Y'koQ#U8jBrV6qg^#Da%]t7leDqGFAM.\FpK%Pg3(tE*^K%)=WQH,.^)[3?-c80b_KKUn>@':dIq_M*1OSJWTOu8)i/.ihK;FSdqajC$(T_D=\.6-Um1\oBY%e>trY(jQ[FAeRXk`he$,Y"j;om[$#>TD,7bNh:7eh,)`LM,l5nDrBa#IUU0iWHUA+&ns!CBhpMCF3cU-#e<k\kQOa;WIL%(lDmUG%JMtZ(Gmf3tNc4g\X2Vi1GB>K,UGCX*S1&!u(l)rNr#`RDP,-[F^5i"j,"ihibb!@*PAR-i_Lpi9J4EOL0Z:'E>4CIeh)E9oa>$FX%`/=q,G:>o`5S1@p,T5B*69IGcE9$M(8[8tZ6tZe`5"g*ZR4/F8c-&Fc)S2RQgAk:%Bh@g=N,*ken'Wd)1#(@$aZ?gT'$6=T,r!k]%I=#,_,dY>je&Wn(b;+HX.+QkN/!<s3a55\Tn/CQ*`S!Uc*PYALp<WKJ.A?M7KSo:3M+1/3^U5L%;$se=Tt-W1OU=g?Ms_ssdQ"iC%K-)(=A)("%D6]9635+d@q#4!#[t"]c_PBOcjYZ4Ed\iTJSNVWL`@"uRS&T0<:C]q7erqfs/$;p4I.I5)nj6Q[rJOC@;dSbI@1No`%OI*->iP!DgrafKD<"0$;_a"3JS:SbgWC/3k)2'T-P11e&3NR!f/ga7Y+trtH\rq0fah1#tT=M-$6tlR6jATMT119f.V;"B2/B3(O%M3rb.o(hS!/T*jeG(0D&%FfL_+DfSPq)htl)j<OE(]9&Z"ke;o./V==i?jI%hVMFu[\i'HBPUW00WsMkNQ*T)'-KNMC$:mXWgnd=%:Fds\*='F-EYZt0TK^Z0BltUo_a(*2<9tQ@[.31a#JD3,m*&-57:s//,eS&+qNaYjK3?&m\7]Zi3HQ9RHn8#=oKkn&h2>bgbMa,1%AR0CLn6Ee\[)GpG6g:AHA0mD,N+U",^)ot6X(lj4g_dE)82$&q_3%R8qOFgEbetcdUUs)]"-@uJW""0J<IJ])p-;!\Yi:H@_82\#%HuN_3<?q'[N5cc.h6gbj=A1%l$F@i7nM<(T)W7,2?hktLdk^'n6/B:n1rMO\^-I(:aHhJ+7)4.8(e?\HPI<r+,*HVK'6s'pM*?fM%Z!DP`Y\JJnFjdR`<R-i:ZG"Kc6%$1-TX^?8Kq%<b:#8lYq#XU\;3##%@?dNB_%1?9[X$Rp)Rn+F@[B]%gq`D$iugG:a_&'FKs)c]%ShnN3Z"V>`5oESV7%.2Yeon$mM=3-,_P&Nh,Zji;FnN##f67,f2nE+f!@OEaRHG-]n;B:hf$FVoUE0n))+sn.M]h[e?Z.56;g%Js%IJhVS]Dqn\n`/NArT<#9a7`m?rqHH[j0sO9q%%uLGAk7lc%#`[msb6hJ,&F2Gl7Jp\)7/UDu\/05CWM,huD0?r:XKHra5F"r:o(i%IfAM[q56ITr8XFLq`k$dOS]V?rgVgCrI=YSDuU?NfYp\~>%AI9_PrivateDataEnd