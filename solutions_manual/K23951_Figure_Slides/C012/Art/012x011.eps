%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 012x017.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 168 136
%%HiResBoundingBox: 0 0 167.5752 135.4961
%%CropBox: 0 0 167.5752 135.4961
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 7312 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFF7D52A8FFFF7D52FFA8527DA8FD73FFA87DFF52FFFFFF52FF%847D52A8FD1AFFAFFD2FFFAFFD28FFA87DFF53FFFFFF7DFFA87D7D7DFD4B%A87DFD1DA87DFD0AFF527D7DA884A827A87D7D527D7DFFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8FFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD04FFA8FD0BFFA8FFA8FFA8A8A8FFA8FFA8FD69FFA8FD15FFA8A8FD%68FFA8FD15FFA8FD69FFA8FD15FFA8A8FD68FFA8FD15FFA8FD69FFA8FD0A%FF7D7DA8FFFFA87DFFFF7D59A8A8FD68FFA8FD09FFA87D7D7DFFFFA852FF%A827A8A8FD69FFA8FD09FFA87DFF52FFFFFF53FF5252527D7DFD36FFA87E%A9A8A97EFD2BFFA87EFD09FFA87D7D7DA8FFFF53A8A87D7D7DFD36FFA9A8%FD04FFA9A9FD2BFFA8FD0AFF7D7DFFA8A8A853A8FF7D7DA8A8FD35FF7EFD%05FFA8A9FD2BFFA8FD15FFA8FD35FFA8A9FD06FF7EFD2BFFA8FD15FFA8A8%FD34FFA8A8FD06FFA97EFD2AFFA8FD15FFA8FD35FF84FD08FFA9FD2AFFA8%FD16FFA8FD33FFA8A9FD08FFA8A9FD29FFA8FD0BFFA8FFFFFFA8FD05FFA8%FD34FFA9FD0AFF7EFD29FFA8FD0AFF52527DFFFF7D27FFFF7D52A8A8FD32%FFA97EFD0AFFA9A8FD28FFA8FD09FF7D7DFF7DFFFFFF7DFFFF7D7DA8FD33%FF7EFD0CFFA9FD28FFA8A9A8A87DA9FD04FFA852FF52FFFFFF52FF525252%847DFD31FFA8A8FD0CFF7EFD28FFA8FF527D52A8FD05FF7D52A9A8FF7D52%7DFF7E7DA8FD32FFA9A9FD0DFFA8FD27FFA8FF7D7DA8A8FD09FFAFFFA8FD%05FFA8FD31FF7EFD0EFFA8A8FD26FFA8FFA87D7DFD11FFA8FD31FFA9A9FD%0EFFA8FD27FFA8A8FD047DFD11FFA8FD30FFA9A8FD0EFFAF7EFD26FFA8FF%7D527DFD11FFA8FD31FFA8FD10FFA9FD26FFA87DA87DA8A8FD09FFA8FD06%FFA8A8FD2FFFA8A9FD10FF7EFD26FFA87D52A852A8FD05FFA859A9FFFFA8%7DFFFF7D7DA8FD31FFA9FD10FFA9A8FD25FFA8FF7DA87DA8FD05FF52A852%FFFFFF52A8A8FF527DA8FD2FFF7EFD11FFA9A8FD25FFA8FFA87D7DFD05FF%A87DFF7DFFFFFF7DA8FFA87DA8A8FD2FFFA9FD12FFA8FD25FF7DFF7E527D%A8FD05FF527D52A8A8FF277DA8287DA8A8FD2FFF7EFD12FFA9A8FD24FFA8%FF52FF7DA8FD06FF7DFFA8FFA87D7DFF7D847EFD2FFFA8FD13FFA9A9FD24%FFA8FFA8527DFD12FFA8FD2EFFA9A9FD13FF84FD24FFA8FFA87D7DFD11FF%A8FD2FFF84FD14FFA9FD24FFA8A852A8A8A8FD10FFA8A8FD2DFFA8A9FD14%FF7EA9FD23FFA8FF527D7DFD11FFA8FD2EFFA9A9FD15FFA8FD23FFA8FFA8%7DA8A8FD05FFA8A8FD04FFA8FFFFA8A8FFA8FD2DFF84FD15FFA9A9FD23FF%A8FD0AFF7D52A8FFFF7D52FFA8527D7EFD2DFFA9A9FD16FFA8FD23FFA852%FD04A8FD04FFA87DFF52FFFFFF52FF59A87D7DA8FD2CFFA9A8FD16FFA9A8%FD22FFA87D527D7DFD05FFA87DA87DFFFFFF7DFF7DA8A87DA8FD2CFFA8FD%17FFA9A9FD22FF7DFFA87DA8FD06FF7D52FD04A852A8A85352A8A8FD2BFF%A9A8FD18FF7EFD22FFA8FF52FF7DA8FD0CFFA8FFFFFFA8FD2DFFA8FD18FF%A9A8FD21FFA8FF7D7D7DA8FD10FFA8A8FD2BFF7EFD19FFA8A9FD21FFA8FF%FFA8A8FD11FFA8FD2CFFA9FD1AFFA8FD21FFA8FD15FFA8A8FD2BFF7EFD1A%FFA8A8FD20FFA8FFA87D7DFD11FFA8FD2BFFA9A9FD1AFFA8AFFD20FFA8A8%7D7DA8A8FD05FF7D7DA8FFFFA852A8A87D7DA8A8FD2AFFA9A8FD1BFF7EFD%20FFA8FF52A87DFD05FFA87DA87DFFFF52A87DA8527D7DFD2BFFA8FD1CFF%A9FD20FFA8FFA87D7EA8FD04FFA87DFF52FFA852FF7D7D5952A8A8FD29FF%A8A9FD1CFF84FD20FF7DFF7D7D7DFD05FFA87D7D7DA8FF7D7D7DA87D7D7D%FD2AFFA9A8FD1DFFA8FD1FFFA8A852A87D7DFD05FFA87EFFA8A8FF7DFFFF%A87DA8A8FD29FF7EFD1DFFA8A9FD1FFFA8FFA87D7DFD11FFA8FD2AFFA9FD%1EFFA8FD1FFFA87DA8537EA8FD10FFA8A8FD28FFAFA8FD1EFFA9A8FD1EFF%A8FF7EFF7DA8FD10FFA8FD29FFA8FD1FFFA9A9FD1EFFA87D527D7DA8FD11%FFA8FD28FFA8A8FD1FFF7EFD1EFFA8A87DA8A8FD07FF7EFD04FFA8FFFFA8%A8A8FD29FFA8FD20FFA9FD1EFFA8A87DFFA87DFD05FF527D7DFFFF7D527D%A8527DA8A8FD27FFA8A9FD20FFA8A9FD1DFFA8FF52A853FD05FF7E84FF7D%FFFF52FF7D7D527DA8FD28FFA9FD22FF7EFD1DFFA8FFFF53A8FD05FFA852%A852FFA853A87D52FD047DFD27FF7EFD22FFA8A8FD1BFFA87EFF7D7D52A8%FD05FF7D52FF7DA8A87DA8FF7D7DA8FD27FFA8A9FD22FFA8FD1DFFA8A853%7D7D7DFD10FFAFA8FD26FFA8A8FD23FF7EFD1CFFA8FFA8A853FD11FFA8FD%27FFA8FD24FFA9A9FD1BFFA8A87DFD13FFA8A8FD25FFA8A9FD24FFA8A9FD%1BFFA8FF527D7DFD11FFA8FD26FFA9FD26FF84FD1BFFA8A8FFA8FD13FFA8%FD25FF7EFD26FFA8A8FD1AFFA87D84A8FD07FF7D52A8FFFF7D7D84FFA87D%A8FD25FFA8FD27FFA9A9FD1AFFA85252527DA8FD04FFA852A852FFA859A8%52A87D52A8A8FD24FFA8A9FD27FF7EFD1AFFA8FD09FF7D7EFF7DFFFF7DFF%527D527D84A8FD24FFA8FD28FFA9A9FD19FF7DFD0AFF527D7DA8A87D527D%A87D52A8A8FD23FF7EFD29FFA8A9FD19FFA8FD0BFF7DFFA8FFA8A8FD04FF%A8FD24FFA9FD2AFFA8FD19FFA8FD15FFA9A8FD22FFA97EFD2AFFA9A8FD18%FFA8FD15FFA8FD23FFA8FD2BFFA9A9FD18FFA8FD16FFA8FD21FFA9A9FD2C%FF7EFD18FFA8FD15FFA8FD22FFA9A8FD2DFFA8FD17FFA8FD0AFFA87DA8FF%FFFF7DA8A87D7DA8A8FD21FF7EFD2EFFA8A8FD16FFA8FD0AFF7D7D7DFFFF%7D7D52FFA87D7DFD21FF84FD30FFA9FD16FFA8FD09FFA852FF52FFFF7DFF%7DA8FF527EA8FD1FFFA8A9FD30FFA8A9FD15FFA8FD0AFF7DA87DA8FF52A8%52A852A8A8A8FD1FFFA9FD32FF7EFD15FF7DFD0AFF7E527EA8A8A852A8A8%5252A8A8FD1EFFA8A8FD32FFAF7EFD14FFA8FD15FFA8FD1FFFA8FD34FFA9%A8FD13FFA8FD16FFA8FD1DFF7EFD36FF7EA8FD12FFA8FD15FFA8FD1CFFAF%7EFD37FFA9A8A8FD11FFA8FD15FFA8A8FD1AFFA87EFD3AFFA87EFD10FFA8%FD15FFA8FD19FFA9A9A8FD3CFFA97EFD0FFFA8FD0AFF527DA8FFFF8452A8%A87D52A8A8FD15FFA9A97EA9A9FD3FFF7EA9A8FD0CFFA8FD09FFA87DA87D%FFFF52FF7D7DA8A852FD11FFA9FFA9A9A8A9A8FFA8FD41FFA9A984A9A9FF%A9FD07FFA8FD09FFA87DFF52FFA852FF7D52A87D7D7DA87EA8A8A87EA8A8%A87EA87DA87D847D7E7D7E7DFD1DA87DFD2BA87D7E7D7E7DA87D7E7EA87D%7DFD0AFF7D52A8A8A87D7D7DA8527DA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFA87DA8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFA8A8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%A8FFFF7DA8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA87DFFFFA8A8FF%A8FD0AFFA8A8FFFFA8FF7DFFFFA8A87D527DFD16FF7D52A8FD15FF527DFF%7D527DFD13FF7D27FF7D527DFD13FF7D7D7DA8527DA8FD15FFA852FF53FD%16FFA852A8FD16FF59FF52FF7DFD14FF7DFFA85284FD14FF7D7D7DA87D7E%FD15FFA853A87DFD18FF28FD15FF7D7DFF52A87DA8FD13FF52FFFFFF52A8%FD12FF7D52FFFD047DFD16FF7D7DA8FD16FFA8527EFD15FF7D52FFA87D7D%FD13FF7E52A8A8537DFD13FF7D52A8A87D53FD18FFA8FD17FFA8FD17FFA8%FFA8FFA8FD15FFA8FFA8FD17FFA8FDFCFFFDFCFFFD4EFFA87D7DA8FD7CFF%A852FF52A87D7DA8A8527DA87D7DA859A8A87D7DFD6CFFA87DFFA8527D52%7D53FF52A852FF527D7D7D5253A8FD6BFFA852A852A85284A87D7D527D7D%FF527DA8527D7DFD6DFFA87DA8FFA87DFFA87D27FFA8FFA87DA8FF7DA8FD%74FFA87DA8FD33FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T12:24:50+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T12:24:50+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T12:24:50+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXnX5jfoBvNmiRe&#xA;bZFTyq1jqDfv2KWxv1e3MPOhH7wQ+qYq78vs/Fiqv5O1PT7j8u9M0rzjdIt+ujW95rEN67ROts1U&#xA;WW4dypWvpnkWPUGuKsHGo6Hdfk9o1jp11YTW0OsJb3MckyGwhja8mdEv1Q7QMlPhNK1XthVk/wCV&#xA;Wtz2+hR6VZWJvq3eoyLPaSoNPSFLshfqjSHl6BL0jUVpQ74qz36/rP8A1a/+S8f9MCu+v6z/ANWv&#xA;/kvH/TFXfX9Z/wCrX/yXj/pirvr+s/8AVr/5Lx/0xV31/Wf+rX/yXj/piqnPqusQoHbSWYF0SizI&#xA;TWRwgPToOVT7YqqfX9Z/6tf/ACXj/pirvr+s/wDVr/5Lx/0xV31/Wf8Aq1/8l4/6Yq76/rP/AFa/&#xA;+S8f9MVd9f1n/q1/8l4/6Yq76/rP/Vr/AOS8f9MVU7fVdYnt4p10llWVFcK8yKwDCtGFNjiqp9f1&#xA;n/q1/wDJeP8Apirvr+s/9Wv/AJLx/wBMVd9f1n/q1/8AJeP+mKu+v6z/ANWv/kvH/TFXfX9Z/wCr&#xA;X/yXj/piqmuq6wbh4P0S3JERyxmTiQ5YAA06jhv9GKqn1/Wf+rX/AMl4/wCmKu+v6z/1a/8AkvH/&#xA;AExV31/Wf+rX/wAl4/6Yq76/rP8A1a/+S8f9MVd9f1n/AKtf/JeP+mKqcuq6xG8SHSWJmcopWZCA&#xA;QjPVtth8NPniqnqGuatY2U15JpDyRQI0kojniLBEBZiAxUGgHjiqdYq7FWnRHXi6hlqDQioqDUfj&#xA;iq14IXLF41YsvBiQDVevE+2KrY7S1jRo44URH2dFUAN23AG+KoFVVfMQVQAosqADYACXFUzxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLvMv/KOar/zB3H/ACab&#xA;FUxxV2KsW8za75jXzDp/l7y+tql5dWlzqE1zfLJJGsVrJDGI1SNo25SPcAcq/CN6N0xVE+X9fv8A&#xA;zJ5I0/XNMSG1vtStI7iGO4DSQxyOoLK3AozKpr0IrirEtV/M/W9P/LrSNZkhgk13WNQ/RUXowTyQ&#xA;LKZpk9RbdGkmf4LckIHqW2riqc+TfMK6lc2813qUF5eSQTQM6W8lgxlhuCrxG1neSRJI6UcV98Ks&#xA;0wK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgbjXNKt53gluAJo6CRAGYqSAwDcQaGhByYxyIukW621&#xA;zSrmdYIbgNM9eCEMpagqacgK7CuJxyAultHZBLsVdirsVdirsVdirsVdirsVSrzXcQQeWtUaaRYl&#xA;a1nVWdgoLNGwAFe5xVNcVdiqQ+Y/KFrrV3a3y3t1pmo2iSwR3tk6JIYJyhmib1EkUq/prvSqncEH&#xA;FV9l5Vg060js9Lv7uws4LCPTrO2iMTxwCKvGdFmjlrNQ0JfkpAHw9aqpTb/lnYxeX4tGfVtQnWzu&#xA;hf6ZeS/VRPaXIZ35xGK3iRqtK1RIrDenTFUV5a8u2ug6o9pDNLdSTwy3V3d3BUyzXE8/KSR+Cogq&#xA;eyqABsMVZPirsVdirsVdirsVdirsVdirsVdirsVUru6htLWa6nPGG3RpZWArRUBZjQewwxFmgqE0&#xA;O1mgsBJcrxvLtmubsdSsku/CvcRrSMeyjJ5DZ25BAdrltPNYGW1HK9tGW5tANi0ke/p1/wCLE5Rn&#xA;2bHGQDvyKlF2l1Dd2sN1AeUNwiyxN0qrgMp+45CQo0UquBXYq7FXYq7FXYq7FXYq7FUu8y/8o5qv&#xA;/MHcf8mmxVMcVdiqTeYvOGgeXvQXVJ3SW5DtDBDDLcSskVDLJ6cKyP6cYYF2pQYqi5tc0yLRhrPq&#xA;mXTWhW4SeBHnLxOAUaNIld35BhQKpOKobTfNmhaj5aXzLBccNGMUk5uZlaLjHEWDsyuAy8eB6jFU&#xA;LoOuadrt5a6vprmSxvdP9W3dlZCVM1N1YAjp3xVkOKuxV2KuxV2KuxV2KuxV2KuxV2KuxVKtXpd3&#xA;tlpYoVdvrd2Nv7m3YFVP+vMU+ahsthsDL4IKa5Ul2KpTpH+iX17pZ2jRvrdn/wAYbhiXUf6k3Lbs&#xA;pXLZ7gS+CAm2VJdirsVdirsVdirsVdirsVS7zL/yjmq/8wdx/wAmmxVhnmzzn53tNY1LStKsY4ja&#xA;A3kOoT2lzNb/AFCGyM0hd0aNGlkuh6KqrcgPiocVZ7YXElzY29xJGYpJokkeI9VLKCVPyrirE/NO&#xA;m+YbbzfYeZNJ079Loum3el3Fl60cJRriaCaKX96VVkrCRJvyp0B6Yqr+VrPW/LHlLT9D/Rr6jLpG&#xA;l2qCW3lhVbi5UFJIIhM8fHhwDcn4qQw71xViegeUPPF55A0rQLi3TQbnSrz6xcwagIr23vYxLJOi&#xA;MtnchuCyOjEFxUr0IxVOfy10PzHpVnplhrkqQ3tpZuGgtlULwaclUkJafkwJJqjDCrP8CuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVKtDrctdas1aXzhbatf95YarDSvZyWlH+vluTao933/jZATXKkuxVK9c&#xA;rbG21VdvqLkXP/MLNRZq9dkosp/1Mtx73Hv+/wDGyCmmVJdirsVdirsVdirsVdirsVSrzXG8nlrV&#xA;AkrQkWs5LIFJIEbfCeasKH78VeXeel1W582zX2mTW2pW9zBJb2sx1WGCG1jmspbZ0eFpR/u5xLzj&#xA;Qsfs9hhV6/YRmKxtomm+sMkSKZ+vqEKBz/2XXAqvirsVdiqW/wDTSf8ARn/zNxVMsVdirsVdirsV&#xA;dirsVdirsVdirsVQGu3MtvpFy8BK3Lr6NsR/v6YiKL/ko65PGLkLQUXa20NrbQ20I4wwIsca9aKg&#xA;4gfcMiTZtKpgV2Kqd1bQ3VtNbTDlDOjRyL0qrjiR9xwg0bVCaFcy3GkWzzktcovo3JP+/oSYpf8A&#xA;kojZLIKkaQEfkEuxV2KuxV2KuxV2KuxVLvMv/KOar/zB3H/JpsVeO/mD5f8AKena5rWnhPL8MGtW&#xA;saTPeWcrS6WvpGMSo1tC8aIWX1F9R4/jqeXTCr22xtltbK3tkYusEaRq5pVgihQTTbemBWF/mBKk&#xA;/mbyzo99ezWOh3638l7LBcvZl5reKNrdDNG0bj7TvQN+ziqI8hamNZ8gWMepai0t1d2k/K6WUw3L&#xA;2wkeFLlXQq6kpxb1FpvvirGPKt95eT8sL1vMWpXLaZp+q36Flu7g3EiRX0sdvB6iP68nOiqqcvi6&#xA;b4VTn8uI9YtfRS/E8puI7iW3hluFupLO1kuC8FvPO7l5GjQgbcqdOgrir0DArsVdirsVdirsVdir&#xA;sVdirsVdiqV6n+/1XTLKlVDyXkoPQpbqEUfP1ZkYf6uWQ2iT8EFNMrS7FXYq7FUr0ykGqanZ0ope&#xA;O8iA6BLhSrD5mWF2Pzyye8QfggJplaXYq7FXYq7FXYq7FXYqlXmuR4/LWqFImmJtZwVQqCAY2+I8&#xA;2UUH34q8+84wzT+ZdbstE/TkyXscMPma20u306SIlrcKoWa+kheOR7dlB4cgBTod8KvULJI0s4Ej&#xA;iaCNY0CQNTkgCgBDQsKr06nAqzUdL03U7Y2upWkN7asQxguI0ljJXcHi4YbYqtn0fSLgOJ7G3mEl&#xA;u1nIJIkblbP9qA1G8bd06YqlkXkDyJFaT2cXlzS47O6KNc2y2VuscjRV9MyIE4sU5HjXpU4q1pOi&#xA;6No+tfVNIsLfTrT6qX+r2kSQR82lFW4RhVqadcVT/FXYq7FXYq7FXYq7FXYq7FXYq7FUssKT61qV&#xA;1+zD6VlH3/u19Z2B92n4mn8uWS2iB8fx8kDmmeVpdirsVdiqV39INa0262An9WykPT+8X1kJPsYC&#xA;o/1ssjvEj4/j5oPNNMrS7FXYq7FXYq7FXYq7FUu8y/8AKOar/wAwdx/yabFWNJ5Y8l+atRn8w6dq&#xA;V+Li8itjPNp2oXlmrRtCskHJIZIhvE6tuO+Ks0hiEUKRAswjUKGdizEAUqzGpJ9zirG/M/mbWbPV&#xA;7LQ9B0+HUNVu7a4viLmc28KQWrRIw5qkpLyPOqrtQdT7qonSPMk2veTrTzBolskk+oWqXNpaXMpi&#xA;QO4B4SSIstOJqCQp6YqksX5gajL5S0bUU06Jta1y9bTbWy9Zvq63CtMGZ5vT5+mqWzv9ip6YqifK&#xA;XmGfW9VuHu7UWeoWCzWF9bq5kjE0EwBaNyqFkdSGUlQaHCrLsCuxV2KuxV2KuxV2KuxV2KuxVbNN&#xA;HDE80rBIo1Lu56BVFSfuwgWqB8vwyR6RbtKvCe4DXU6EU4yXLGZ1/wBizkZPKfUfxyQEwytLsVdi&#xA;rsVS7zDFI+kXDxKWmtuN1Cg3LSWziZF/2TJxyzEfUPxzQUfDNHNEk0TB4pFDo46FWFQfuyBFJXYF&#xA;dirsVdirsVdirsVS7zL/AMo5qv8AzB3H/JpsVeLeddI8i6T5j1709I8r2bWEUd61hqsJ+sX5kirS&#xA;zCOojVnHD4Y3Jk/Z33KvdLEILK3CQm3QRoFtyADGOIolB/L0wKkfmTypdanqdlq+mapJpOq2cM9o&#xA;J1iSdHt7lo2kRo3p8QaFWRgdj1DDbFV2j+V7nQ9Lt9J0jUPR06x0+KysYJoVlKzRE1uZHBjLlwRy&#xA;TYdx1xVJ7b8uL6Ly7aaW+tVutKvf0jpF/HbKnozkylhJG0jiVGFw6kVXY9e+Konyz5UtdF1hkml/&#xA;SF/Mk19c38saKzXNxNWRkVRSNaUUAdh1OFWX4FdirsVdirsVdirsVdirsVdiqWeYh6tgtiK8tRlS&#xA;1IHUxuaz0Pb9wrnLMWxvu3/V9qCmeVpdirsVdirsVdiqWeXax6ebFj8WnSvaAHqI4zWCvzgZDlmX&#xA;nffv+v7UBM8rS7FXYq7FXYq7FXYqlXmu3gn8taos0ayqtrOyq6hgGWNiCK9xiqV6v5v0mHWZLKLR&#xA;73Wb/TSvryWdqswt3lQOqmSRowHZGDUU9DirJoZPUhSTg0fNQ3BxRlqK0Yb7jFUBrnmXQNBhjn1n&#xA;UINPilYpE07qnIgVbjXrxXdvAbnbFUXJf2MVkb+W4iSxWP1mumdREI6cuZcnjxpvWuKpXH548oS6&#xA;O+sx6vavpkcghe5WRSolYgLHQb82qKLSprtiq3StW0zVtWjv9MuY7uzls2CTxMGUlJyrDburAgjs&#xA;cVT3FXYq7FXYq7FXYq7FXYq7FXYqlcwNx5igjO8dhbtcMD09W4JiiYfJI5h9OWDaHvP4/QjqmmVp&#xA;dirsVdirsVdiqWQ/6P5ini6R38C3CKP9+25EUrH5pJCPoyw7w934/WjqmeVpdirsVdirsVdirsVS&#xA;7zL/AMo5qv8AzB3H/JpsVea+dOcXmXzDqum2+omPS4IZvMM1rq508cEt/UX0bfgyyMsX7TMoO4rt&#xA;hV6rYtG1lbtGzvG0aFHkrzKlRQvXfl41wKxDzdFf2PnHSPMK6VPrGn2+n39hLDaqsssU1y9vJG/p&#xA;sVqrrA0ZYdK/FtiqQt5d8xRflFaeTDZTy61Y6bYXE1AhgkMFykklmkrNwaXhCUp0oQa4qgdf0jX9&#xA;Wk1TXLbSb7T7W71TSpo2WNRqUcdlE6y3kNvV/j5MqAOCStTxO2FU6/K/S9YsHkS6jeD1Zb64L3sZ&#xA;F5cxTXbOk8wVwsUslasONKU+FemKvR8CuxV2KuxV2KuxV2KuxV2KuxVK9E/fPf35ofrVy6x9yI7e&#xA;luBXwLRs4/1ssybUO4ffugJplaXYq7FXYq7FXYqlet0hewv9h9VuUSTtWO5/cEV8A0iuf9XLMe9j&#xA;vH3boKaZWl2KuxV2KuxV2KuxVKvNazny1qnouqN9Vn5F1Lgr6bVAAZN/fFXlHmu80fUtQvtQ1LUf&#xA;KFzeaFCiXUl5YtLLK8cIndYv9PT1EDseCNXi23XfCr2axmkmsreaUUlkiR3HEpRmUE/CS3H5VOBV&#xA;bFXYq7FUt/6aT/oz/wCZuKplirsVdirsVdirsVdirsVdiqE1e9ax0y6u0AaSGNmiRujSUoibfzNQ&#xA;ZOEeKQCCv02yWx0+2slYuttEkQc7FuCheR9zSuCcuIkpCIyKuxV2KuxV2KuxVD6lZLfafc2bNwFz&#xA;E8XMCpXmpHIe4rXJQlRBUrNIvWvtLtbt1CSzRq0sY6JJT40/2LVGGcakQgIvIJdirsVdirsVdiqX&#xA;eZf+Uc1X/mDuP+TTYqwbW4L7SdX8xJaeWZL241BEl8u3tjZ2jJHP9WEZE0r/AGXWdOZaUceJFK0o&#xA;Sr0W0W5S1hW5cSXKxqJ5FFFZwByIHgTgVh/m2bVL7zhpXl231ifRbSbTr7UJbi19ISyTW0lvHEvK&#xA;VXHBPXaRlH2qb/DXFUum85+YJPyW0/zKsgg1m+ttPEtyEUiNryeGCS4CUdfhWUyAUp7Yqx7zT5g8&#xA;4aPJe+VtMv7vUWl1jTLC3vnkhS9ihv7eWeaP6wY/TB5QgK7ISqv3IGFWV+QtXjuLkQSfXTd2oubG&#xA;5W8c3ciTW9yQ4a4jUKydOLNTb3xVnmBXYq7FXYq7FXYq7FXYq7FUs1is13ptiu4lnFxOB19K1HqB&#xA;q/8AGf0h9OWQ2BP43/ZaCmeVpdirsVdirsVdirsVdiqWaQTDd6lYHYRTm4hB6mK6/eE1/wCM/qj6&#xA;MsnuAfxt+ykBM8rS7FXYq7FXYq7FUq81zpD5a1RnDEG1nUcEZzUxt1CBiB79MVea+efJF/5r17XG&#xA;s3h1K5tZEtVsprq6s/qkc9ghjdWWNkJSdvWqleQJUmq8cKvV9PtntbC2tnYM8ESRsyigJRQpIH0Y&#xA;FQWv+VfLvmGKKLWrCK+SBi0PqD4kLCjAMKNRhswrRhscVak8p+WpZZZJNNgf1rJNMliZAYms42Zk&#xA;g9L+74KXNBxxVRh8jeUYdIl0iPSrcafM4llh41LSrQrIXPxl14ji/LkKCh2xVbpGj6Zo+qx2GmWy&#xA;WtpHaMyxRjbk85Z2JO5ZmJJJ3JxVPsVdirsVdirsVdirsVdirsVSqw/0rWb69NDHb8bG2PX7NJJ2&#xA;U/5TsEb3jy2W0QPj+r8eaAmuVJdirsVdirsVdirsVdiqV6hS11ixvukdxWxuT2+P44GY/wCTIpRf&#xA;eTLY7xI+P6/x5IKaZUl2KuxV2KuxV2Kpd5l/5RzVf+YO4/5NNirySHX/AMstc1yHU/MsUEOp3Onx&#xA;nULuJ72FluUfh9Xoj04qm9Pxwoez2f1f6pB9WNbf019E1JqnEcd236eOBKQ+ZfOEmlala6VYaZNq&#xA;+qXME161rC8UXC1tmRZJC0rKCxaVVRR9o+A3xVdc+edHi8lw+bo0muNOuYbea1hjVRPIbtkSGMKz&#xA;KodnlVd2pXviqEg/MK0TT9Ym1ayl06/0R447zTyyTu73Cq1ssDREiQzcwqjY8tqYqv8AKXmD/EP1&#xA;DWvqxtPrun+obZmDmM+sVKlgAD0wqynArsVdirsVdirsVdirsVQ2pXyWGn3F445CCNnCVoWIHwoK&#xA;92Ow98lCPEQEErdIsnstNgtpGEk6ryuJB0eZyXlf/ZSMWwzlZtQi8gl2KuxV2KuxV2KuxV2KoTVr&#xA;J73TZ7aNvTmdawSmvwTIQ8T7fyuoOThKjaCu02+S+0+3vFUoJ0VzGeqMR8SN7qdj74Jx4SQoKJyK&#xA;XYq7FXYq7FUu8y/8o5qv/MHcf8mmxVMcVdirFvM3lfWrnXrTzDoF7b2mq29ncadILuJ5omguXjk5&#xA;Dg8bB4nhDDs3Q064qhJvIF5/g2Hyjb30cWn2NlYR6fdtEzTi9sJhMJpV5hGjZoYzwFD9rfcUVQqf&#xA;ljPqVzc6pr+pyR6xdXkF8H0mtvFC1rbm3hRfW9YvxV2bkw+0dqUxVX8jeUJPLZsdKub6a+mtLR29&#xA;VpGC/HN9kKvAFB2DA71wqzfArsVdirsVdirsVdirsVSvVT9Z1HT9OB+Euby4H/FdsVKD5+u0Z9wD&#xA;lsNgT8Pn+xBTTKkuxV2KuxV2KuxV2KuxV2KuxVK9KrbajqGnmvAOLy3r/vu5LFx7kTrIfYMMtnuA&#xA;fh8v2ICaZUl2KuxV2KuxVKvNcCTeWtUVywAtZ2HB2Q1EbdShUke3TFU1xV2KqF7f2NjAbi9uIrWA&#xA;EKZpnWNKsaAcmIG5xVWDKV5AjjSte1MVQJ1/QRYtqB1K1FgjGN7szR+irg0KmTlxBB7VxVD211bX&#xA;WupcWsqT28llWOaJg6MPV6qy1BxVN8VdirsVdirsVdirsVcSACSaAbknFUq0UtdzXOrsKR3nCOy7&#xA;E2sXIxuf+MjSO4/ySvfLcm1R7vvQE1ypLsVdirsVdirsVdirsVdirsVSrW+VpLb6woJSyDpeAbn6&#xA;rLQyMBTrGyI/+qG7nLce9x7/AL0FNFZWUMpBUioI3BBypLeKuxV2KuxVLvMv/KOar/zB3H/JpsVT&#xA;HFXYqwP8w4LaPzL5Z1XVrRrzy7YrqC36i2e8VJ54o1t5HijSVqUWRAePVvfFUlS01Ifk1L5WSyuk&#xA;1iTSbiaHTeDrILUzkLb8tqSeiwQR15dsKoNdW0PSLrzN5ns9Alm8uNb6ZDp2n/UHgE2owmdWZIpI&#xA;wU9NXRHk4bUpvxpiqeflfbxW4X6lNFdi5Fzc6gyJNawwz3E/qvFbQyxhvTQvQVpXr1JGKvRsCuxV&#xA;2KuxV2KuxV2KpRqpOo3a6LH/AHBUS6o3/FBJCw/OYgg/5AboSuWw9I4vl+PJB32TcAAUGwGVJdir&#xA;sVdirsVdirsVdirsVdirsVcQCKHcHFUo0knT7t9Gk/uVUzaYxqawVo0NfGFiAP8AIK+By2fqHF8/&#xA;x5oHcm+VJdirsVdiqVea2nHlrVPRRXb6rPyDsUAX02qQQr7+2KprirsVdirsVdiqW/8ATSf9Gf8A&#xA;zNxVMsVdirsVdirsVdiqX32riKf6lZRfXNRIBMCtxWJW6PO9D6a+GxZv2VNDlkYWLOw/HJBKppWn&#xA;tZW7eq4mu53M15cAU5ysADQEmiqAFQV2UAYJys+SgIzIJdirsVdirsVdirsVdirsVdirsVdiqC1b&#xA;T2vIEMLiK8tnE1nMRULIoI+IDqrqxRh/KT3ycJUfJBC2w1dJ5jZ3MZtNRQcntnNQyjq8L0AlT3G4&#xA;25BTtjKFCxuFBR+QS7FXYql3mX/lHNV/5g7j/k02KpjirsVYj5n1HzFP5q0zy3o19HphuLG71Ge8&#xA;eFbhz9WkgijiVXPEKzXFXPWg2od8VS6T8wNWk/KCy83wwRx6re21nSMozQpPdzR25fhyDGNWl505&#xA;dO+Kpdd+aPOFjqT+U31SKe/m1OxsbfXGt40kjhvLSe6ctCD6JlX6oyp8NPiFQcKo3yp5wP6Zurbz&#xA;HfQLd2Ul7pyX7+nbR3H1SdCG4luIk4TLyVe4PTFWYf4o8tf9Xay/6SIv+asaV3+KPLX/AFdrL/pI&#xA;i/5qxpVGTzn5Vjco2qW5I7o4cfetRhESi1CTz/5QjYK2ooSd/gSRx96qRhGM+XzC2pn8wPLzmlpL&#xA;9ZalSS0duo+ZuWh/4UHD4feR9/3Lajc+ZllirLq+n2MTvHGUtJkuZ6SOF5CSQxIlOXxfu2oKnD6R&#xA;5rumNjqvlGxg9G21GzRCS7k3EbM7t9p3dmLOx7sxqchKRkbKhEf4l8uf9XWz/wCkiL/mrIpd/iXy&#xA;5/1dbP8A6SIv+asVd/iXy5/1dbP/AKSIv+asVd/iXy5/1dbP/pIi/wCasVd/iXy5/wBXWz/6SIv+&#xA;asVUrbzX5cnt4pxqVtGJUV/TkniV15CtGHLYjviqr/iXy5/1dbP/AKSIv+asVd/iXy5/1dbP/pIi&#xA;/wCasVd/iXy5/wBXWz/6SIv+asVd/iXy5/1dbP8A6SIv+asVd/iXy5/1dbP/AKSIv+asVUl81+XD&#xA;cPB+krYFER/UM8XA8ywoDy6jhv8AMYqq/wCJfLn/AFdbP/pIi/5qxV3+JfLn/V1s/wDpIi/5qxVC&#xA;6hqnlG/hEVzqVoeLB4pFuY0kjcdHjdWDKw8RkoyMTsgoRfMn1VQP0tpmpxr+01xHbT0HjQyRO1P+&#xA;MY+WT9B7x9v4+1d1y/mD5YX4bm5+rS/77NJtv9e2M8f/AA2Dwj0I+f66W2x+YXlEvGq34PqNx5FH&#xA;QL8LNVuart8NNu5GA4yO75hbUNe84+VptC1KGPVLf1JLWdI1ZwvJmjYBRypUk9Bg4SFtlWRS7FUl&#xA;8x+UNE8wG3fUFmWe1EiQXNtPLbTLHNQTR+pCyMUkCgMp/XTFVsvkny3LaNYvbN+jmsotNFgJZFt1&#xA;t4WLRhI1YBHUn7a/FsN9hiqEj/LjyummTWDR3ErXEyXUt/Lczvem4hFIphcs/qhoxstDQDbpXFWC&#xA;SS6loEvmKXRtQmsbHyxqlhbRaW/CWO7F+LeS6lu5JQ88kk7XZ4v6gIoKdxhV7FgV2KuxV2KuxViv&#xA;5iWPmu70/Tk8uPOskd8smopbXEdrM9oIJgVSWVXUH1TGemKo/wAlava6v5W06/tXuJIpYyvK8Ktc&#xA;c4mMcglZPgLh0IJXbFU7xV2KuxV2KsI/NW41ex03S9S07U7ixMOp2NvPbw+l6dxHdXcMTCUujPRU&#xA;LU4MvXeuKpJ578weZbe982X9hq8linlGxtLu00+NITFcyTCSST6zzV5GV1j9NApWhqdzir1LFXYq&#xA;7FXYqhtStZruxmtoLuWxllXit3AEMsdf2k9VZEr81OKvNdKk8765+VegXGnXdzc6q10zahcJPHbX&#xA;EtvHLOjD1XRkB2T9jCrM/Imqwal5aglje6d4JZ7W5F86SXKz28zxSpI8fwNxdSAV2IpgVkGKuxV2&#xA;KuxV5XPrmvaPqfmSXSNVvNesdB0i9uNW+vCJoV1ONBNbQW7xRxnkFD+qgqqgr+1iqc+Tr/XbfzMm&#xA;k32rSaxb32jw6t6syRK0U7y+nIIzEkQ9GStUU1Iod8Ks7wK7FXYq7FXYqkt95L8rX+sxazeabDNq&#xA;UJRlnYHdojWJ3QHg7Rn7DMCV/ZpiqdYq7FXYq7FXYqlmu+WtH12KKLUopJFhYtGYpprdhXqC0Dxs&#xA;VNN1JocVRenadY6bYwWFhAltZ2yCOCCMUVFHQAYqiMVdirsVdiqU+YfKmg+YY4I9Xt2uY7dvUhQT&#xA;TRKHDKwYiJ0qVZAVJ6HpiqHvfIflG/uLS5vdMjubiyjjhhllLuzRwmsaTEt++CN8QEvL4t+uKp9i&#xA;rsVdirsVUb2zgvbWW1uAxhmHFwjvG1PZ4yrD6DiqQR/lz5Qi0oaVDaSxWCyidIY7u7TjIFZao6yh&#xA;1BEjVANDXfFU60rSdO0nT4dO023S1soARFBH9leTFm6+LMScVReKuxV2KuxVINI8h+VdId20+zaF&#xA;JPU9SAzzyQt6xJkrDJI0Z5kmvw4qiNB8o+WtAMzaPp8Vm04VZXQEsUSvCMFiSI0qeKD4V7DFU3xV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb8w+cZNL1yy0S00q41XUL62nu4ooHgiAjtmjV6&#xA;tPJEtSZVpviq21/MbynJoq6te3i6TEZ5bSW31ApBNHcQMVlhdOTfElKniSKb1piqJ1Tz35M0owDU&#xA;dbsrX61CLm3Mk6APAfsyg1+w37LdD2xVfP528owahc6dPq9rFe2as95A8qqYVVQ5aWpog4sD8VMV&#xA;aHnbygdHbWRrFodMWT0GuvVXgJjSkXWvqGoon2vbFU0sb+x1CzivbG4jurSdeUNxCweN18VZSQcV&#xA;V8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirEvMnl3zHN5&#xA;v0vzFoxs3ewsruzeC8eWME3LxOHBjST7Po9PfFWNXP5T60PqepJeJd6ytxqF3qMCXd9pVvJJqTRs&#xA;wims2adBEIFQcuXIbsK0oqx7zx5P1/S9GvtA8vWCzPr2j2WmNZJBf3cVubV5QBDfMrRqgWXpcOpX&#xA;7QrXjhVnGrflxcajo/m2yNykU3mDUodRtpkaRCq28dqEjkaMo+72rV4nYNtvgVKLj8q9WuLOG4CR&#xA;2mrW+orqDxprGrTrdcbRrQepfOVu4nCP8Jj2AHE8hirOPJ2iNovl+3sHgS2lV5pZYYrm4vEDzStK&#xA;xE91++fkX5MWA3J2xVOsVdirsVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:A937C3031D2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A937C3031D2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A937C3031D2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T12:24:50+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -135.496 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 135.496 li
167.575 135.496 li
167.575 0 li
cp
clp
[1 0 0 1 0 0 ]ct
28.8027 114.674 mo
167.403 114.674 li
167.403 3.29883 li
28.8027 3.29883 li
28.8027 114.674 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
28.8027 114.674 mo
167.403 114.674 li
167.403 3.29883 li
28.8027 3.29883 li
28.8027 114.674 li
cp
clp
.34375 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
28.8027 114.671 mo
35.4033 114.671 li
42.0029 114.666 li
48.6035 114.522 li
55.2031 113.929 li
61.8027 111.977 li
68.4033 107.161 li
75.0029 96.7871 li
81.6035 78.1724 li
88.2031 54.5625 li
94.8027 30.7432 li
101.403 15.0908 li
108.003 15.0522 li
114.604 30.5083 li
121.203 54.4229 li
127.803 77.938 li
134.403 96.5596 li
141.003 107.218 li
147.604 112.131 li
154.203 114.086 li
160.803 114.542 li
167.403 114.661 li
.884 .769 0 0 cmyk
@
grestore
28.8027 114.674 mo
28.8027 113.299 li
28.8027 114.674 li
cp
0 0 0 1 cmyk
f
.171875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
28.8027 114.674 mo
28.8027 113.299 li
@
28.8027 4.67383 mo
28.8027 3.29883 li
28.8027 4.67383 li
cp
f
28.8027 3.29883 mo
28.8027 4.67383 li
@
29.2734 116.8 mo
28.9092 116.8 28.6387 116.978 28.4531 117.334 cv
28.2676 117.691 28.1826 118.225 28.1826 118.938 cv
28.1826 119.651 28.2676 120.186 28.4531 120.542 cv
28.6387 120.898 28.9092 121.077 29.2734 121.077 cv
29.6367 121.077 29.9082 120.898 30.0928 120.542 cv
30.2715 120.186 30.3643 119.651 30.3643 118.938 cv
30.3643 118.225 30.2715 117.691 30.0928 117.334 cv
29.9082 116.978 29.6367 116.8 29.2734 116.8 cv
29.2734 116.244 mo
29.8506 116.244 30.292 116.479 30.6064 116.935 cv
30.9131 117.398 31.0693 118.068 31.0693 118.938 cv
31.0693 119.815 30.9131 120.485 30.6064 120.941 cv
30.292 121.397 29.8506 121.625 29.2734 121.625 cv
28.6885 121.625 28.2393 121.397 27.9336 120.941 cv
27.627 120.485 27.4766 119.815 27.4766 118.938 cv
27.4766 118.068 27.627 117.398 27.9336 116.935 cv
28.2393 116.479 28.6885 116.244 29.2734 116.244 cv
f
61.8027 114.674 mo
61.8027 113.299 li
f
61.8027 114.674 mo
61.8027 113.299 li
@
61.8027 3.29883 mo
61.8027 4.67383 li
f
61.8027 3.29883 mo
61.8027 4.67383 li
@
60.8916 116.336 mo
63.6504 116.336 li
63.6504 116.928 li
61.5332 116.928 li
61.5332 118.204 li
61.6328 118.168 61.7402 118.14 61.8398 118.125 cv
61.9395 118.111 62.0469 118.097 62.1465 118.097 cv
62.7236 118.097 63.1797 118.261 63.5215 118.575 cv
63.8643 118.895 64.0352 119.323 64.0352 119.865 cv
64.0352 120.428 63.8574 120.863 63.5078 121.169 cv
63.1582 121.476 62.667 121.625 62.0391 121.625 cv
61.8184 121.625 61.5977 121.604 61.3691 121.575 cv
61.1416 121.54 60.9131 121.49 60.6709 121.412 cv
60.6709 120.706 li
60.877 120.82 61.0918 120.905 61.3193 120.962 cv
61.54 121.02 61.7754 121.041 62.0254 121.041 cv
62.4238 121.041 62.7451 120.941 62.9805 120.727 cv
63.208 120.513 63.3301 120.228 63.3301 119.865 cv
63.3301 119.508 63.208 119.223 62.9805 119.009 cv
62.7451 118.795 62.4238 118.689 62.0254 118.689 cv
61.8398 118.689 61.6475 118.71 61.4619 118.753 cv
61.2764 118.795 61.084 118.86 60.8916 118.945 cv
60.8916 116.336 li
f
94.8027 114.674 mo
94.8027 113.299 li
f
94.8027 114.674 mo
94.8027 113.299 li
@
94.8027 3.29883 mo
94.8027 4.67383 li
f
94.8027 3.29883 mo
94.8027 4.67383 li
@
91.7773 120.941 mo
92.9248 120.941 li
92.9248 116.978 li
91.6768 117.228 li
91.6768 116.586 li
92.917 116.336 li
93.623 116.336 li
93.623 120.941 li
94.7705 120.941 li
94.7705 121.533 li
91.7773 121.533 li
91.7773 120.941 li
cp
f
97.6934 116.8 mo
97.3291 116.8 97.0586 116.978 96.873 117.334 cv
96.6885 117.691 96.6025 118.225 96.6025 118.938 cv
96.6025 119.651 96.6885 120.186 96.873 120.542 cv
97.0586 120.898 97.3291 121.077 97.6934 121.077 cv
98.0566 121.077 98.3281 120.898 98.5127 120.542 cv
98.6904 120.186 98.7842 119.651 98.7842 118.938 cv
98.7842 118.225 98.6904 117.691 98.5127 117.334 cv
98.3281 116.978 98.0566 116.8 97.6934 116.8 cv
97.6934 116.244 mo
98.2705 116.244 98.7129 116.479 99.0254 116.935 cv
99.333 117.398 99.4893 118.068 99.4893 118.938 cv
99.4893 119.815 99.333 120.485 99.0254 120.941 cv
98.7129 121.397 98.2705 121.625 97.6934 121.625 cv
97.1084 121.625 96.6592 121.397 96.3535 120.941 cv
96.0469 120.485 95.8965 119.815 95.8965 118.938 cv
95.8965 118.068 96.0469 117.398 96.3535 116.935 cv
96.6592 116.479 97.1084 116.244 97.6934 116.244 cv
f
127.803 114.674 mo
127.803 113.299 li
f
127.803 114.674 mo
127.803 113.299 li
@
127.803 3.29883 mo
127.803 4.67383 li
f
127.803 3.29883 mo
127.803 4.67383 li
@
124.853 120.941 mo
126 120.941 li
126 116.978 li
124.752 117.228 li
124.752 116.586 li
125.992 116.336 li
126.698 116.336 li
126.698 120.941 li
127.846 120.941 li
127.846 121.533 li
124.853 121.533 li
124.853 120.941 li
cp
f
129.271 116.336 mo
132.029 116.336 li
132.029 116.928 li
129.913 116.928 li
129.913 118.204 li
130.013 118.168 130.12 118.14 130.22 118.125 cv
130.319 118.111 130.426 118.097 130.525 118.097 cv
131.104 118.097 131.56 118.261 131.901 118.575 cv
132.243 118.895 132.415 119.323 132.415 119.865 cv
132.415 120.428 132.236 120.863 131.887 121.169 cv
131.538 121.476 131.046 121.625 130.419 121.625 cv
130.198 121.625 129.978 121.604 129.749 121.575 cv
129.521 121.54 129.293 121.49 129.05 121.412 cv
129.05 120.706 li
129.257 120.82 129.471 120.905 129.699 120.962 cv
129.92 121.02 130.155 121.041 130.405 121.041 cv
130.804 121.041 131.125 120.941 131.359 120.727 cv
131.588 120.513 131.709 120.228 131.709 119.865 cv
131.709 119.508 131.588 119.223 131.359 119.009 cv
131.125 118.795 130.804 118.689 130.405 118.689 cv
130.22 118.689 130.026 118.71 129.842 118.753 cv
129.656 118.795 129.464 118.86 129.271 118.945 cv
129.271 116.336 li
f
160.803 114.674 mo
160.803 113.299 li
f
160.803 114.674 mo
160.803 113.299 li
@
160.803 3.29883 mo
160.803 4.67383 li
f
160.803 3.29883 mo
160.803 4.67383 li
@
158.13 120.941 mo
160.582 120.941 li
160.582 121.533 li
157.281 121.533 li
157.281 120.941 li
157.545 120.67 157.908 120.299 158.372 119.829 cv
158.828 119.366 159.121 119.066 159.242 118.931 cv
159.47 118.682 159.627 118.468 159.713 118.29 cv
159.798 118.119 159.848 117.94 159.848 117.769 cv
159.848 117.499 159.748 117.27 159.556 117.099 cv
159.363 116.928 159.113 116.835 158.8 116.835 cv
158.579 116.835 158.344 116.878 158.102 116.95 cv
157.859 117.028 157.595 117.142 157.317 117.298 cv
157.317 116.586 li
157.603 116.472 157.866 116.386 158.108 116.329 cv
158.352 116.272 158.579 116.244 158.785 116.244 cv
159.32 116.244 159.748 116.379 160.068 116.65 cv
160.39 116.921 160.554 117.277 160.554 117.726 cv
160.554 117.94 160.511 118.147 160.432 118.333 cv
160.354 118.525 160.212 118.753 159.998 119.009 cv
159.94 119.081 159.755 119.273 159.441 119.594 cv
159.128 119.915 158.693 120.363 158.13 120.941 cv
f
163.562 116.8 mo
163.198 116.8 162.927 116.978 162.742 117.334 cv
162.557 117.691 162.471 118.225 162.471 118.938 cv
162.471 119.651 162.557 120.186 162.742 120.542 cv
162.927 120.898 163.198 121.077 163.562 121.077 cv
163.925 121.077 164.196 120.898 164.382 120.542 cv
164.56 120.186 164.652 119.651 164.652 118.938 cv
164.652 118.225 164.56 117.691 164.382 117.334 cv
164.196 116.978 163.925 116.8 163.562 116.8 cv
163.562 116.244 mo
164.139 116.244 164.581 116.479 164.895 116.935 cv
165.201 117.398 165.358 118.068 165.358 118.938 cv
165.358 119.815 165.201 120.485 164.895 120.941 cv
164.581 121.397 164.139 121.625 163.562 121.625 cv
162.978 121.625 162.528 121.397 162.222 120.941 cv
161.915 120.485 161.766 119.815 161.766 118.938 cv
161.766 118.068 161.915 117.398 162.222 116.935 cv
162.528 116.479 162.978 116.244 163.562 116.244 cv
f
87.0732 129.401 mo
87.0732 133.443 li
87.9219 133.443 li
88.6338 133.443 89.1621 133.287 89.4971 132.958 cv
89.8242 132.63 89.9961 132.117 89.9961 131.419 cv
89.9961 130.72 89.8242 130.214 89.4971 129.886 cv
89.1621 129.566 88.6338 129.401 87.9219 129.401 cv
87.0732 129.401 li
86.3672 128.824 mo
87.8145 128.824 li
88.8193 128.824 89.5605 129.038 90.0313 129.452 cv
90.502 129.872 90.7373 130.528 90.7373 131.419 cv
90.7373 132.317 90.4941 132.973 90.0244 133.393 cv
89.5537 133.814 88.8125 134.021 87.8145 134.021 cv
86.3672 134.021 li
86.3672 128.824 li
f
95.1631 131.911 mo
95.1631 132.224 li
92.2197 132.224 li
92.248 132.666 92.377 133.008 92.6191 133.236 cv
92.8545 133.465 93.1816 133.579 93.6094 133.579 cv
93.8525 133.579 94.0947 133.55 94.3223 133.493 cv
94.5508 133.437 94.7852 133.343 95.0137 133.215 cv
95.0137 133.821 li
94.7852 133.921 94.5508 133.999 94.3086 134.042 cv
94.0664 134.084 93.8164 134.113 93.5742 134.113 cv
92.9473 134.113 92.4551 133.935 92.0908 133.579 cv
91.7275 133.222 91.5498 132.73 91.5498 132.11 cv
91.5498 131.476 91.7207 130.97 92.0625 130.592 cv
92.4053 130.221 92.875 130.029 93.46 130.029 cv
93.9873 130.029 94.4004 130.2 94.708 130.535 cv
95.0068 130.877 95.1631 131.333 95.1631 131.911 cv
94.5215 131.726 mo
94.5146 131.376 94.415 131.098 94.2295 130.884 cv
94.0371 130.677 93.7813 130.571 93.4668 130.571 cv
93.1104 130.571 92.8252 130.677 92.6113 130.877 cv
92.3975 131.077 92.2695 131.362 92.2412 131.726 cv
94.5215 131.726 li
f
98.7773 132.024 mo
98.7773 131.568 98.6777 131.205 98.4922 130.948 cv
98.2998 130.692 98.0293 130.563 97.6865 130.563 cv
97.3447 130.563 97.0742 130.692 96.8809 130.948 cv
96.6895 131.205 96.5967 131.568 96.5967 132.024 cv
96.5967 132.488 96.6895 132.844 96.8809 133.101 cv
97.0742 133.357 97.3447 133.486 97.6865 133.486 cv
98.0293 133.486 98.2998 133.357 98.4922 133.101 cv
98.6777 132.844 98.7773 132.488 98.7773 132.024 cv
99.4189 133.536 mo
99.4189 134.191 99.2695 134.684 98.9775 135.011 cv
98.6777 135.332 98.2285 135.496 97.623 135.496 cv
97.3945 135.496 97.1875 135.475 96.9883 135.446 cv
96.7891 135.411 96.5889 135.361 96.4043 135.289 cv
96.4043 134.669 li
96.5889 134.769 96.7744 134.84 96.96 134.89 cv
97.1455 134.94 97.3311 134.968 97.5234 134.968 cv
97.9365 134.968 98.25 134.854 98.4639 134.641 cv
98.6709 134.42 98.7773 134.092 98.7773 133.65 cv
98.7773 133.336 li
98.6416 133.564 98.4707 133.735 98.2646 133.85 cv
98.0576 133.964 97.8154 134.021 97.5303 134.021 cv
97.0449 134.021 96.6602 133.842 96.3682 133.479 cv
96.0762 133.115 95.9336 132.63 95.9336 132.024 cv
95.9336 131.426 96.0762 130.941 96.3682 130.578 cv
96.6602 130.214 97.0449 130.029 97.5303 130.029 cv
97.8154 130.029 98.0576 130.086 98.2646 130.2 cv
98.4707 130.314 98.6416 130.485 98.7773 130.713 cv
98.7773 130.122 li
99.4189 130.122 li
99.4189 133.536 li
f
102.997 130.72 mo
102.926 130.677 102.848 130.649 102.762 130.627 cv
102.677 130.613 102.584 130.599 102.484 130.599 cv
102.12 130.599 101.843 130.72 101.65 130.956 cv
101.45 131.191 101.357 131.526 101.357 131.968 cv
101.357 134.021 li
100.717 134.021 li
100.717 130.122 li
101.357 130.122 li
101.357 130.728 li
101.486 130.492 101.664 130.314 101.878 130.2 cv
102.092 130.086 102.355 130.029 102.67 130.029 cv
102.712 130.029 102.762 130.036 102.818 130.036 cv
102.869 130.043 102.926 130.05 102.997 130.064 cv
102.997 130.72 li
f
107.003 131.911 mo
107.003 132.224 li
104.06 132.224 li
104.088 132.666 104.216 133.008 104.459 133.236 cv
104.693 133.465 105.021 133.579 105.449 133.579 cv
105.691 133.579 105.934 133.55 106.162 133.493 cv
106.39 133.437 106.625 133.343 106.854 133.215 cv
106.854 133.821 li
106.625 133.921 106.39 133.999 106.148 134.042 cv
105.905 134.084 105.656 134.113 105.413 134.113 cv
104.786 134.113 104.295 133.935 103.931 133.579 cv
103.567 133.222 103.389 132.73 103.389 132.11 cv
103.389 131.476 103.561 130.97 103.902 130.592 cv
104.245 130.221 104.715 130.029 105.3 130.029 cv
105.827 130.029 106.24 130.2 106.547 130.535 cv
106.846 130.877 107.003 131.333 107.003 131.911 cv
106.361 131.726 mo
106.354 131.376 106.255 131.098 106.069 130.884 cv
105.877 130.677 105.62 130.571 105.307 130.571 cv
104.95 130.571 104.665 130.677 104.451 130.877 cv
104.237 131.077 104.109 131.362 104.081 131.726 cv
106.361 131.726 li
f
111.387 131.911 mo
111.387 132.224 li
108.443 132.224 li
108.472 132.666 108.6 133.008 108.843 133.236 cv
109.077 133.465 109.405 133.579 109.833 133.579 cv
110.075 133.579 110.317 133.55 110.546 133.493 cv
110.773 133.437 111.009 133.343 111.237 133.215 cv
111.237 133.821 li
111.009 133.921 110.773 133.999 110.531 134.042 cv
110.289 134.084 110.04 134.113 109.797 134.113 cv
109.17 134.113 108.679 133.935 108.314 133.579 cv
107.951 133.222 107.773 132.73 107.773 132.11 cv
107.773 131.476 107.943 130.97 108.286 130.592 cv
108.629 130.221 109.099 130.029 109.684 130.029 cv
110.211 130.029 110.624 130.2 110.931 130.535 cv
111.23 130.877 111.387 131.333 111.387 131.911 cv
110.745 131.726 mo
110.738 131.376 110.639 131.098 110.453 130.884 cv
110.261 130.677 110.004 130.571 109.69 130.571 cv
109.334 130.571 109.049 130.677 108.835 130.877 cv
108.621 131.077 108.493 131.362 108.465 131.726 cv
110.745 131.726 li
f
28.8027 114.674 mo
30.1777 114.674 li
f
28.8027 114.674 mo
30.1777 114.674 li
@
167.403 114.674 mo
166.028 114.674 li
f
167.403 114.674 mo
166.028 114.674 li
@
14.7578 111.931 mo
14.3945 111.931 14.124 112.109 13.9375 112.465 cv
13.7529 112.822 13.667 113.356 13.667 114.069 cv
13.667 114.782 13.7529 115.317 13.9375 115.673 cv
14.124 116.029 14.3945 116.208 14.7578 116.208 cv
15.1211 116.208 15.3926 116.029 15.5771 115.673 cv
15.7559 115.317 15.8486 114.782 15.8486 114.069 cv
15.8486 113.356 15.7559 112.822 15.5771 112.465 cv
15.3926 112.109 15.1211 111.931 14.7578 111.931 cv
14.7578 111.375 mo
15.335 111.375 15.7773 111.61 16.0908 112.066 cv
16.3975 112.529 16.5547 113.199 16.5547 114.069 cv
16.5547 114.946 16.3975 115.616 16.0908 116.072 cv
15.7773 116.528 15.335 116.756 14.7578 116.756 cv
14.1738 116.756 13.7246 116.528 13.418 116.072 cv
13.1113 115.616 12.9609 114.946 12.9609 114.069 cv
12.9609 113.199 13.1113 112.529 13.418 112.066 cv
13.7246 111.61 14.1738 111.375 14.7578 111.375 cv
f
17.7871 115.78 mo
18.5215 115.78 li
18.5215 116.664 li
17.7871 116.664 li
17.7871 115.78 li
cp
f
21.5576 111.931 mo
21.1943 111.931 20.9238 112.109 20.7383 112.465 cv
20.5527 112.822 20.4668 113.356 20.4668 114.069 cv
20.4668 114.782 20.5527 115.317 20.7383 115.673 cv
20.9238 116.029 21.1943 116.208 21.5576 116.208 cv
21.9219 116.208 22.1924 116.029 22.3779 115.673 cv
22.5557 115.317 22.6484 114.782 22.6484 114.069 cv
22.6484 113.356 22.5557 112.822 22.3779 112.465 cv
22.1924 112.109 21.9219 111.931 21.5576 111.931 cv
21.5576 111.375 mo
22.1357 111.375 22.5771 111.61 22.8906 112.066 cv
23.1973 112.529 23.3545 113.199 23.3545 114.069 cv
23.3545 114.946 23.1973 115.616 22.8906 116.072 cv
22.5771 116.528 22.1357 116.756 21.5576 116.756 cv
20.9736 116.756 20.5244 116.528 20.2178 116.072 cv
19.9111 115.616 19.7617 114.946 19.7617 114.069 cv
19.7617 113.199 19.9111 112.529 20.2178 112.066 cv
20.5244 111.61 20.9736 111.375 21.5576 111.375 cv
f
26.0908 111.931 mo
25.7275 111.931 25.457 112.109 25.2715 112.465 cv
25.0859 112.822 25.001 113.356 25.001 114.069 cv
25.001 114.782 25.0859 115.317 25.2715 115.673 cv
25.457 116.029 25.7275 116.208 26.0908 116.208 cv
26.4551 116.208 26.7256 116.029 26.9111 115.673 cv
27.0889 115.317 27.1816 114.782 27.1816 114.069 cv
27.1816 113.356 27.0889 112.822 26.9111 112.465 cv
26.7256 112.109 26.4551 111.931 26.0908 111.931 cv
26.0908 111.375 mo
26.6689 111.375 27.1104 111.61 27.4238 112.066 cv
27.7305 112.529 27.8877 113.199 27.8877 114.069 cv
27.8877 114.946 27.7305 115.616 27.4238 116.072 cv
27.1104 116.528 26.6689 116.756 26.0908 116.756 cv
25.5068 116.756 25.0576 116.528 24.751 116.072 cv
24.4443 115.616 24.2949 114.946 24.2949 114.069 cv
24.2949 113.199 24.4443 112.529 24.751 112.066 cv
25.0576 111.61 25.5068 111.375 26.0908 111.375 cv
f
28.8027 102.299 mo
30.1777 102.299 li
f
28.8027 102.299 mo
30.1777 102.299 li
@
167.403 102.299 mo
166.028 102.299 li
f
167.403 102.299 mo
166.028 102.299 li
@
14.999 99.5562 mo
14.6357 99.5562 14.3652 99.7339 14.1797 100.09 cv
13.9941 100.447 13.9092 100.981 13.9092 101.694 cv
13.9092 102.407 13.9941 102.942 14.1797 103.298 cv
14.3652 103.654 14.6357 103.833 14.999 103.833 cv
15.3633 103.833 15.6338 103.654 15.8193 103.298 cv
15.9971 102.942 16.0898 102.407 16.0898 101.694 cv
16.0898 100.981 15.9971 100.447 15.8193 100.09 cv
15.6338 99.7339 15.3633 99.5562 14.999 99.5562 cv
14.999 98.9995 mo
15.5771 98.9995 16.0186 99.2349 16.332 99.6914 cv
16.6387 100.154 16.7959 100.824 16.7959 101.694 cv
16.7959 102.571 16.6387 103.241 16.332 103.697 cv
16.0186 104.153 15.5771 104.381 14.999 104.381 cv
14.415 104.381 13.9658 104.153 13.6592 103.697 cv
13.3525 103.241 13.2031 102.571 13.2031 101.694 cv
13.2031 100.824 13.3525 100.154 13.6592 99.6914 cv
13.9658 99.2349 14.415 98.9995 14.999 98.9995 cv
f
18.0293 103.405 mo
18.7637 103.405 li
18.7637 104.289 li
18.0293 104.289 li
18.0293 103.405 li
cp
f
21.7998 99.5562 mo
21.4355 99.5562 21.165 99.7339 20.9795 100.09 cv
20.7949 100.447 20.709 100.981 20.709 101.694 cv
20.709 102.407 20.7949 102.942 20.9795 103.298 cv
21.165 103.654 21.4355 103.833 21.7998 103.833 cv
22.1631 103.833 22.4336 103.654 22.6191 103.298 cv
22.7979 102.942 22.8896 102.407 22.8896 101.694 cv
22.8896 100.981 22.7979 100.447 22.6191 100.09 cv
22.4336 99.7339 22.1631 99.5562 21.7998 99.5562 cv
21.7998 98.9995 mo
22.377 98.9995 22.8184 99.2349 23.1328 99.6914 cv
23.4395 100.154 23.5957 100.824 23.5957 101.694 cv
23.5957 102.571 23.4395 103.241 23.1328 103.697 cv
22.8184 104.153 22.377 104.381 21.7998 104.381 cv
21.2148 104.381 20.7656 104.153 20.46 103.697 cv
20.1533 103.241 20.0029 102.571 20.0029 101.694 cv
20.0029 100.824 20.1533 100.154 20.46 99.6914 cv
20.7656 99.2349 21.2148 98.9995 21.7998 98.9995 cv
f
25.4346 103.697 mo
27.8867 103.697 li
27.8867 104.289 li
24.5869 104.289 li
24.5869 103.697 li
24.8506 103.427 25.2139 103.056 25.6768 102.585 cv
26.1338 102.122 26.4258 101.823 26.5469 101.687 cv
26.7744 101.438 26.9316 101.224 27.0176 101.045 cv
27.1035 100.875 27.1533 100.696 27.1533 100.525 cv
27.1533 100.254 27.0527 100.026 26.8604 99.855 cv
26.668 99.6841 26.4189 99.5918 26.1045 99.5918 cv
25.8838 99.5918 25.6484 99.6343 25.4063 99.7056 cv
25.1641 99.7837 24.9004 99.8979 24.6221 100.055 cv
24.6221 99.3423 li
24.9072 99.228 25.1709 99.1426 25.4131 99.0854 cv
25.6563 99.0283 25.8838 98.9995 26.0908 98.9995 cv
26.625 98.9995 27.0527 99.1353 27.374 99.4063 cv
27.6943 99.6772 27.8584 100.033 27.8584 100.482 cv
27.8584 100.696 27.8154 100.903 27.7373 101.088 cv
27.6592 101.281 27.5166 101.509 27.3027 101.766 cv
27.2451 101.837 27.0605 102.029 26.7461 102.35 cv
26.4326 102.671 25.998 103.12 25.4346 103.697 cv
f
28.8027 89.9238 mo
30.1777 89.9238 li
f
28.8027 89.9238 mo
30.1777 89.9238 li
@
167.403 89.9238 mo
166.028 89.9238 li
f
167.403 89.9238 mo
166.028 89.9238 li
@
14.6875 87.1812 mo
14.3242 87.1812 14.0537 87.3589 13.8682 87.7153 cv
13.6826 88.0718 13.5977 88.606 13.5977 89.3193 cv
13.5977 90.0322 13.6826 90.5669 13.8682 90.9229 cv
14.0537 91.2793 14.3242 91.4575 14.6875 91.4575 cv
15.0518 91.4575 15.3223 91.2793 15.5078 90.9229 cv
15.6855 90.5669 15.7783 90.0322 15.7783 89.3193 cv
15.7783 88.606 15.6855 88.0718 15.5078 87.7153 cv
15.3223 87.3589 15.0518 87.1812 14.6875 87.1812 cv
14.6875 86.6245 mo
15.2656 86.6245 15.707 86.8599 16.0215 87.3164 cv
16.3281 87.7793 16.4844 88.4492 16.4844 89.3193 cv
16.4844 90.1958 16.3281 90.8657 16.0215 91.3223 cv
15.707 91.7783 15.2656 92.0063 14.6875 92.0063 cv
14.1035 92.0063 13.6543 91.7783 13.3477 91.3223 cv
13.041 90.8657 12.8916 90.1958 12.8916 89.3193 cv
12.8916 88.4492 13.041 87.7793 13.3477 87.3164 cv
13.6543 86.8599 14.1035 86.6245 14.6875 86.6245 cv
f
17.7178 91.0298 mo
18.4521 91.0298 li
18.4521 91.9136 li
17.7178 91.9136 li
17.7178 91.0298 li
cp
f
21.4883 87.1812 mo
21.124 87.1812 20.8535 87.3589 20.668 87.7153 cv
20.4834 88.0718 20.3975 88.606 20.3975 89.3193 cv
20.3975 90.0322 20.4834 90.5669 20.668 90.9229 cv
20.8535 91.2793 21.124 91.4575 21.4883 91.4575 cv
21.8516 91.4575 22.1221 91.2793 22.3076 90.9229 cv
22.4863 90.5669 22.5781 90.0322 22.5781 89.3193 cv
22.5781 88.606 22.4863 88.0718 22.3076 87.7153 cv
22.1221 87.3589 21.8516 87.1812 21.4883 87.1812 cv
21.4883 86.6245 mo
22.0654 86.6245 22.5078 86.8599 22.8203 87.3164 cv
23.127 87.7793 23.2842 88.4492 23.2842 89.3193 cv
23.2842 90.1958 23.127 90.8657 22.8203 91.3223 cv
22.5078 91.7783 22.0654 92.0063 21.4883 92.0063 cv
20.9033 92.0063 20.4541 91.7783 20.1484 91.3223 cv
19.8418 90.8657 19.6914 90.1958 19.6914 89.3193 cv
19.6914 88.4492 19.8418 87.7793 20.1484 87.3164 cv
20.4541 86.8599 20.9033 86.6245 21.4883 86.6245 cv
f
26.4492 87.3306 mo
24.6748 90.103 li
26.4492 90.103 li
26.4492 87.3306 li
26.2637 86.7173 mo
27.1475 86.7173 li
27.1475 90.103 li
27.8887 90.103 li
27.8887 90.688 li
27.1475 90.688 li
27.1475 91.9141 li
26.4492 91.9141 li
26.4492 90.688 li
24.1045 90.688 li
24.1045 90.0107 li
26.2637 86.7173 li
cp
f
28.8027 77.5488 mo
30.1777 77.5488 li
f
28.8027 77.5488 mo
30.1777 77.5488 li
@
167.403 77.5488 mo
166.028 77.5488 li
f
167.403 77.5488 mo
166.028 77.5488 li
@
14.7363 74.8062 mo
14.373 74.8062 14.1025 74.9839 13.916 75.3403 cv
13.7314 75.6968 13.6455 76.231 13.6455 76.9443 cv
13.6455 77.6572 13.7314 78.1919 13.916 78.5479 cv
14.1025 78.9043 14.373 79.0825 14.7363 79.0825 cv
15.0996 79.0825 15.3711 78.9043 15.5557 78.5479 cv
15.7344 78.1919 15.8271 77.6572 15.8271 76.9443 cv
15.8271 76.231 15.7344 75.6968 15.5557 75.3403 cv
15.3711 74.9839 15.0996 74.8062 14.7363 74.8062 cv
14.7363 74.2495 mo
15.3135 74.2495 15.7559 74.4849 16.0693 74.9414 cv
16.376 75.4043 16.5332 76.0742 16.5332 76.9443 cv
16.5332 77.8208 16.376 78.4907 16.0693 78.9473 cv
15.7559 79.4033 15.3135 79.6313 14.7363 79.6313 cv
14.1523 79.6313 13.7031 79.4033 13.3965 78.9473 cv
13.0898 78.4907 12.9395 77.8208 12.9395 76.9443 cv
12.9395 76.0742 13.0898 75.4043 13.3965 74.9414 cv
13.7031 74.4849 14.1523 74.2495 14.7363 74.2495 cv
f
17.7656 78.6548 mo
18.5 78.6548 li
18.5 79.5386 li
17.7656 79.5386 li
17.7656 78.6548 li
cp
f
21.5361 74.8062 mo
21.1729 74.8062 20.9023 74.9839 20.7168 75.3403 cv
20.5313 75.6968 20.4453 76.231 20.4453 76.9443 cv
20.4453 77.6572 20.5313 78.1919 20.7168 78.5479 cv
20.9023 78.9043 21.1729 79.0825 21.5361 79.0825 cv
21.9004 79.0825 22.1709 78.9043 22.3564 78.5479 cv
22.5342 78.1919 22.627 77.6572 22.627 76.9443 cv
22.627 76.231 22.5342 75.6968 22.3564 75.3403 cv
22.1709 74.9839 21.9004 74.8062 21.5361 74.8062 cv
21.5361 74.2495 mo
22.1143 74.2495 22.5557 74.4849 22.8691 74.9414 cv
23.1758 75.4043 23.333 76.0742 23.333 76.9443 cv
23.333 77.8208 23.1758 78.4907 22.8691 78.9473 cv
22.5557 79.4033 22.1143 79.6313 21.5361 79.6313 cv
20.9521 79.6313 20.5029 79.4033 20.1963 78.9473 cv
19.8896 78.4907 19.7402 77.8208 19.7402 76.9443 cv
19.7402 76.0742 19.8896 75.4043 20.1963 74.9414 cv
20.5029 74.4849 20.9521 74.2495 21.5361 74.2495 cv
f
26.1553 76.6592 mo
25.8418 76.6592 25.5928 76.7729 25.4072 76.9868 cv
25.2217 77.2007 25.1289 77.5 25.1289 77.8706 cv
25.1289 78.249 25.2217 78.5479 25.4072 78.7617 cv
25.5928 78.9756 25.8418 79.0825 26.1553 79.0825 cv
26.4688 79.0825 26.7188 78.9756 26.9033 78.7617 cv
27.0889 78.5479 27.1816 78.249 27.1816 77.8706 cv
27.1816 77.5 27.0889 77.2007 26.9033 76.9868 cv
26.7188 76.7729 26.4688 76.6592 26.1553 76.6592 cv
27.5527 74.4565 mo
27.5527 75.0981 li
27.374 75.0122 27.1963 74.9482 27.0176 74.9058 cv
26.833 74.8628 26.6543 74.8413 26.4834 74.8413 cv
26.0127 74.8413 25.6563 74.9985 25.4141 75.312 cv
25.1719 75.6255 25.0293 76.103 25.001 76.7305 cv
25.1357 76.5308 25.3066 76.374 25.5137 76.2671 cv
25.7207 76.1602 25.9482 76.103 26.1982 76.103 cv
26.7188 76.103 27.1318 76.2671 27.4307 76.5806 cv
27.7305 76.8945 27.8877 77.3291 27.8877 77.8706 cv
27.8877 78.4058 27.7236 78.833 27.4102 79.1538 cv
27.0967 79.4746 26.6758 79.6313 26.1553 79.6313 cv
25.5566 79.6313 25.0928 79.4033 24.7793 78.9468 cv
24.459 78.4907 24.3018 77.8208 24.3018 76.9443 cv
24.3018 76.1245 24.4941 75.4688 24.8867 74.9839 cv
25.2715 74.4995 25.7988 74.2495 26.4551 74.2495 cv
26.626 74.2495 26.8037 74.2715 26.9893 74.2998 cv
27.167 74.3354 27.3525 74.3853 27.5527 74.4565 cv
f
28.8027 65.1738 mo
30.1777 65.1738 li
f
28.8027 65.1738 mo
30.1777 65.1738 li
@
167.403 65.1738 mo
166.028 65.1738 li
f
167.403 65.1738 mo
166.028 65.1738 li
@
14.7734 62.4307 mo
14.4102 62.4307 14.1396 62.6094 13.9541 62.9653 cv
13.7686 63.3218 13.6836 63.8564 13.6836 64.5693 cv
13.6836 65.2817 13.7686 65.8169 13.9541 66.1729 cv
14.1396 66.5293 14.4102 66.7075 14.7734 66.7075 cv
15.1377 66.7075 15.4082 66.5293 15.5938 66.1729 cv
15.7715 65.8169 15.8643 65.2817 15.8643 64.5693 cv
15.8643 63.8564 15.7715 63.3218 15.5938 62.9653 cv
15.4082 62.6094 15.1377 62.4307 14.7734 62.4307 cv
14.7734 61.875 mo
15.3516 61.875 15.793 62.1099 16.1074 62.5664 cv
16.4141 63.0298 16.5703 63.6997 16.5703 64.5693 cv
16.5703 65.4458 16.4141 66.1157 16.1074 66.5718 cv
15.793 67.0283 15.3516 67.2568 14.7734 67.2568 cv
14.1895 67.2568 13.7402 67.0283 13.4336 66.5718 cv
13.127 66.1157 12.9775 65.4458 12.9775 64.5693 cv
12.9775 63.6997 13.127 63.0298 13.4336 62.5664 cv
13.7402 62.1099 14.1895 61.875 14.7734 61.875 cv
f
17.8037 66.2798 mo
18.5381 66.2798 li
18.5381 67.1636 li
17.8037 67.1636 li
17.8037 66.2798 li
cp
f
21.5742 62.4307 mo
21.21 62.4307 20.9395 62.6094 20.7539 62.9653 cv
20.5693 63.3218 20.4834 63.8564 20.4834 64.5693 cv
20.4834 65.2817 20.5693 65.8169 20.7539 66.1729 cv
20.9395 66.5293 21.21 66.7075 21.5742 66.7075 cv
21.9375 66.7075 22.208 66.5293 22.3936 66.1729 cv
22.5723 65.8169 22.6641 65.2817 22.6641 64.5693 cv
22.6641 63.8564 22.5723 63.3218 22.3936 62.9653 cv
22.208 62.6094 21.9375 62.4307 21.5742 62.4307 cv
21.5742 61.875 mo
22.1514 61.875 22.5938 62.1099 22.9063 62.5664 cv
23.2129 63.0298 23.3701 63.6997 23.3701 64.5693 cv
23.3701 65.4458 23.2129 66.1157 22.9063 66.5718 cv
22.5938 67.0283 22.1514 67.2568 21.5742 67.2568 cv
20.9893 67.2568 20.54 67.0283 20.2344 66.5718 cv
19.9277 66.1157 19.7773 65.4458 19.7773 64.5693 cv
19.7773 63.6997 19.9277 63.0298 20.2344 62.5664 cv
20.54 62.1099 20.9893 61.875 21.5742 61.875 cv
f
26.1074 64.6978 mo
25.7725 64.6978 25.5088 64.7905 25.3164 64.9683 cv
25.124 65.147 25.0313 65.3892 25.0313 65.7026 cv
25.0313 66.0161 25.124 66.2656 25.3164 66.4438 cv
25.5088 66.6221 25.7725 66.708 26.1074 66.708 cv
26.4355 66.708 26.6992 66.6221 26.8916 66.437 cv
27.084 66.2583 27.1836 66.0161 27.1836 65.7026 cv
27.1836 65.3892 27.084 65.147 26.8984 64.9683 cv
26.7061 64.7905 26.4424 64.6978 26.1074 64.6978 cv
25.4014 64.3979 mo
25.1025 64.3271 24.8672 64.1846 24.6963 63.9775 cv
24.5244 63.771 24.4463 63.5215 24.4463 63.2222 cv
24.4463 62.8086 24.5889 62.481 24.8887 62.2383 cv
25.1807 61.9961 25.5869 61.875 26.1074 61.875 cv
26.6211 61.875 27.0273 61.9961 27.3262 62.2383 cv
27.6182 62.481 27.7686 62.8086 27.7686 63.2222 cv
27.7686 63.5215 27.6826 63.771 27.5117 63.9775 cv
27.3408 64.1846 27.1123 64.3271 26.8135 64.3979 cv
27.1484 64.4766 27.4121 64.6333 27.6045 64.8618 cv
27.79 65.0898 27.8896 65.3745 27.8896 65.7026 cv
27.8896 66.2085 27.7324 66.5938 27.4258 66.8574 cv
27.1123 67.1284 26.6777 67.2563 26.1074 67.2563 cv
25.5303 67.2563 25.0879 67.1284 24.7813 66.8574 cv
24.4746 66.5938 24.3252 66.2085 24.3252 65.7026 cv
24.3252 65.3745 24.418 65.0898 24.6104 64.8618 cv
24.7959 64.6333 25.0596 64.4766 25.4014 64.3979 cv
25.1455 63.2866 mo
25.1455 63.5571 25.2236 63.771 25.3945 63.9204 cv
25.5654 64.0703 25.8008 64.1416 26.1074 64.1416 cv
26.4072 64.1416 26.6416 64.0703 26.8135 63.9204 cv
26.9844 63.771 27.0693 63.5571 27.0693 63.2866 cv
27.0693 63.0151 26.9844 62.8086 26.8135 62.6587 cv
26.6416 62.5093 26.4072 62.4312 26.1074 62.4312 cv
25.8008 62.4312 25.5654 62.5093 25.3945 62.6587 cv
25.2236 62.8086 25.1455 63.0151 25.1455 63.2866 cv
f
28.8027 52.7988 mo
30.1777 52.7988 li
f
28.8027 52.7988 mo
30.1777 52.7988 li
@
167.403 52.7988 mo
166.028 52.7988 li
f
167.403 52.7988 mo
166.028 52.7988 li
@
14.7578 50.0557 mo
14.3945 50.0557 14.124 50.2344 13.9375 50.5903 cv
13.7529 50.9468 13.667 51.4814 13.667 52.1943 cv
13.667 52.9067 13.7529 53.4419 13.9375 53.7983 cv
14.124 54.1543 14.3945 54.3325 14.7578 54.3325 cv
15.1211 54.3325 15.3926 54.1543 15.5771 53.7983 cv
15.7559 53.4419 15.8486 52.9067 15.8486 52.1943 cv
15.8486 51.4814 15.7559 50.9468 15.5771 50.5903 cv
15.3926 50.2344 15.1211 50.0557 14.7578 50.0557 cv
14.7578 49.5 mo
15.335 49.5 15.7773 49.7349 16.0908 50.1914 cv
16.3975 50.6548 16.5547 51.3247 16.5547 52.1943 cv
16.5547 53.0708 16.3975 53.7412 16.0908 54.1973 cv
15.7773 54.6533 15.335 54.8818 14.7578 54.8818 cv
14.1738 54.8818 13.7246 54.6533 13.418 54.1973 cv
13.1113 53.7412 12.9609 53.0708 12.9609 52.1943 cv
12.9609 51.3247 13.1113 50.6548 13.418 50.1914 cv
13.7246 49.7349 14.1738 49.5 14.7578 49.5 cv
f
17.7871 53.9048 mo
18.5215 53.9048 li
18.5215 54.7886 li
17.7871 54.7886 li
17.7871 53.9048 li
cp
f
20.1748 54.1973 mo
21.3223 54.1973 li
21.3223 50.2344 li
20.0752 50.4834 li
20.0752 49.8418 li
21.3154 49.5923 li
22.0215 49.5923 li
22.0215 54.1973 li
23.1689 54.1973 li
23.1689 54.7891 li
20.1748 54.7891 li
20.1748 54.1973 li
cp
f
26.0908 50.0557 mo
25.7275 50.0557 25.457 50.2344 25.2715 50.5903 cv
25.0859 50.9468 25.001 51.4814 25.001 52.1943 cv
25.001 52.9067 25.0859 53.4419 25.2715 53.7983 cv
25.457 54.1543 25.7275 54.3325 26.0908 54.3325 cv
26.4551 54.3325 26.7256 54.1543 26.9111 53.7983 cv
27.0889 53.4419 27.1816 52.9067 27.1816 52.1943 cv
27.1816 51.4814 27.0889 50.9468 26.9111 50.5903 cv
26.7256 50.2344 26.4551 50.0557 26.0908 50.0557 cv
26.0908 49.5 mo
26.6689 49.5 27.1104 49.7349 27.4238 50.1914 cv
27.7305 50.6548 27.8877 51.3247 27.8877 52.1943 cv
27.8877 53.0708 27.7305 53.7412 27.4238 54.1973 cv
27.1104 54.6533 26.6689 54.8818 26.0908 54.8818 cv
25.5068 54.8818 25.0576 54.6533 24.751 54.1973 cv
24.4443 53.7412 24.2949 53.0708 24.2949 52.1943 cv
24.2949 51.3247 24.4443 50.6548 24.751 50.1914 cv
25.0576 49.7349 25.5068 49.5 26.0908 49.5 cv
f
28.8027 40.4238 mo
30.1777 40.4238 li
f
28.8027 40.4238 mo
30.1777 40.4238 li
@
167.403 40.4238 mo
166.028 40.4238 li
f
167.403 40.4238 mo
166.028 40.4238 li
@
14.999 37.6807 mo
14.6357 37.6807 14.3652 37.8594 14.1797 38.2153 cv
13.9941 38.5718 13.9092 39.1064 13.9092 39.8193 cv
13.9092 40.5317 13.9941 41.0669 14.1797 41.4233 cv
14.3652 41.7793 14.6357 41.9575 14.999 41.9575 cv
15.3633 41.9575 15.6338 41.7793 15.8193 41.4233 cv
15.9971 41.0669 16.0898 40.5317 16.0898 39.8193 cv
16.0898 39.1064 15.9971 38.5718 15.8193 38.2153 cv
15.6338 37.8594 15.3633 37.6807 14.999 37.6807 cv
14.999 37.125 mo
15.5771 37.125 16.0186 37.3599 16.332 37.8164 cv
16.6387 38.2798 16.7959 38.9497 16.7959 39.8193 cv
16.7959 40.6958 16.6387 41.3662 16.332 41.8223 cv
16.0186 42.2783 15.5771 42.5068 14.999 42.5068 cv
14.415 42.5068 13.9658 42.2783 13.6592 41.8223 cv
13.3525 41.3662 13.2031 40.6958 13.2031 39.8193 cv
13.2031 38.9497 13.3525 38.2798 13.6592 37.8164 cv
13.9658 37.3599 14.415 37.125 14.999 37.125 cv
f
18.0293 41.5298 mo
18.7637 41.5298 li
18.7637 42.4136 li
18.0293 42.4136 li
18.0293 41.5298 li
cp
f
20.417 41.8223 mo
21.5645 41.8223 li
21.5645 37.8594 li
20.3174 38.1084 li
20.3174 37.4668 li
21.5576 37.2173 li
22.2627 37.2173 li
22.2627 41.8223 li
23.4102 41.8223 li
23.4102 42.4141 li
20.417 42.4141 li
20.417 41.8223 li
cp
f
25.4346 41.8223 mo
27.8867 41.8223 li
27.8867 42.4141 li
24.5869 42.4141 li
24.5869 41.8223 li
24.8506 41.5513 25.2139 41.1807 25.6768 40.7104 cv
26.1338 40.2471 26.4258 39.9473 26.5469 39.812 cv
26.7744 39.563 26.9316 39.3491 27.0176 39.1704 cv
27.1035 38.9995 27.1533 38.8213 27.1533 38.6499 cv
27.1533 38.3794 27.0527 38.1514 26.8604 37.98 cv
26.668 37.8091 26.4189 37.7163 26.1045 37.7163 cv
25.8838 37.7163 25.6484 37.7593 25.4063 37.8306 cv
25.1641 37.9092 24.9004 38.0229 24.6221 38.1797 cv
24.6221 37.4668 li
24.9072 37.353 25.1709 37.2676 25.4131 37.21 cv
25.6563 37.1533 25.8838 37.125 26.0908 37.125 cv
26.625 37.125 27.0527 37.2603 27.374 37.5313 cv
27.6943 37.8022 27.8584 38.1587 27.8584 38.6074 cv
27.8584 38.8213 27.8154 39.0283 27.7373 39.2134 cv
27.6592 39.4058 27.5166 39.6338 27.3027 39.8901 cv
27.2451 39.9619 27.0605 40.1543 26.7461 40.4751 cv
26.4326 40.7959 25.998 41.2446 25.4346 41.8223 cv
f
28.8027 28.0488 mo
30.1777 28.0488 li
f
28.8027 28.0488 mo
30.1777 28.0488 li
@
167.403 28.0488 mo
166.028 28.0488 li
f
167.403 28.0488 mo
166.028 28.0488 li
@
14.6875 25.3057 mo
14.3242 25.3057 14.0537 25.4844 13.8682 25.8403 cv
13.6826 26.1968 13.5977 26.7314 13.5977 27.4443 cv
13.5977 28.1567 13.6826 28.6919 13.8682 29.0483 cv
14.0537 29.4043 14.3242 29.5825 14.6875 29.5825 cv
15.0518 29.5825 15.3223 29.4043 15.5078 29.0483 cv
15.6855 28.6919 15.7783 28.1567 15.7783 27.4443 cv
15.7783 26.7314 15.6855 26.1968 15.5078 25.8403 cv
15.3223 25.4844 15.0518 25.3057 14.6875 25.3057 cv
14.6875 24.75 mo
15.2656 24.75 15.707 24.9849 16.0215 25.4414 cv
16.3281 25.9048 16.4844 26.5747 16.4844 27.4443 cv
16.4844 28.3208 16.3281 28.9912 16.0215 29.4473 cv
15.707 29.9033 15.2656 30.1318 14.6875 30.1318 cv
14.1035 30.1318 13.6543 29.9033 13.3477 29.4473 cv
13.041 28.9912 12.8916 28.3208 12.8916 27.4443 cv
12.8916 26.5747 13.041 25.9048 13.3477 25.4414 cv
13.6543 24.9849 14.1035 24.75 14.6875 24.75 cv
f
17.7178 29.1548 mo
18.4521 29.1548 li
18.4521 30.0386 li
17.7178 30.0386 li
17.7178 29.1548 li
cp
f
20.1055 29.4473 mo
21.2529 29.4473 li
21.2529 25.4844 li
20.0059 25.7334 li
20.0059 25.0918 li
21.2461 24.8423 li
21.9512 24.8423 li
21.9512 29.4473 li
23.0986 29.4473 li
23.0986 30.0391 li
20.1055 30.0391 li
20.1055 29.4473 li
cp
f
26.4492 25.4556 mo
24.6748 28.228 li
26.4492 28.228 li
26.4492 25.4556 li
26.2637 24.8428 mo
27.1475 24.8428 li
27.1475 28.228 li
27.8887 28.228 li
27.8887 28.813 li
27.1475 28.813 li
27.1475 30.0386 li
26.4492 30.0386 li
26.4492 28.813 li
24.1045 28.813 li
24.1045 28.1357 li
26.2637 24.8428 li
cp
f
28.8027 15.6738 mo
30.1777 15.6738 li
f
28.8027 15.6738 mo
30.1777 15.6738 li
@
167.403 15.6738 mo
166.028 15.6738 li
f
167.403 15.6738 mo
166.028 15.6738 li
@
14.7363 12.9307 mo
14.373 12.9307 14.1025 13.1094 13.916 13.4653 cv
13.7314 13.8218 13.6455 14.3564 13.6455 15.0693 cv
13.6455 15.7817 13.7314 16.3169 13.916 16.6733 cv
14.1025 17.0293 14.373 17.2075 14.7363 17.2075 cv
15.0996 17.2075 15.3711 17.0293 15.5557 16.6733 cv
15.7344 16.3169 15.8271 15.7817 15.8271 15.0693 cv
15.8271 14.3564 15.7344 13.8218 15.5557 13.4653 cv
15.3711 13.1094 15.0996 12.9307 14.7363 12.9307 cv
14.7363 12.375 mo
15.3135 12.375 15.7559 12.6099 16.0693 13.0664 cv
16.376 13.5298 16.5332 14.1997 16.5332 15.0693 cv
16.5332 15.9458 16.376 16.6162 16.0693 17.0723 cv
15.7559 17.5283 15.3135 17.7568 14.7363 17.7568 cv
14.1523 17.7568 13.7031 17.5283 13.3965 17.0723 cv
13.0898 16.6162 12.9395 15.9458 12.9395 15.0693 cv
12.9395 14.1997 13.0898 13.5298 13.3965 13.0664 cv
13.7031 12.6099 14.1523 12.375 14.7363 12.375 cv
f
17.7656 16.7798 mo
18.5 16.7798 li
18.5 17.6636 li
17.7656 17.6636 li
17.7656 16.7798 li
cp
f
20.1533 17.0723 mo
21.3008 17.0723 li
21.3008 13.1094 li
20.0537 13.3584 li
20.0537 12.7168 li
21.2939 12.4673 li
22 12.4673 li
22 17.0723 li
23.1475 17.0723 li
23.1475 17.6641 li
20.1533 17.6641 li
20.1533 17.0723 li
cp
f
26.1553 14.7842 mo
25.8418 14.7842 25.5928 14.8984 25.4072 15.1118 cv
25.2217 15.3257 25.1289 15.6255 25.1289 15.9956 cv
25.1289 16.3735 25.2217 16.6733 25.4072 16.8867 cv
25.5928 17.1006 25.8418 17.2075 26.1553 17.2075 cv
26.4688 17.2075 26.7188 17.1006 26.9033 16.8867 cv
27.0889 16.6733 27.1816 16.3735 27.1816 15.9956 cv
27.1816 15.6255 27.0889 15.3257 26.9033 15.1118 cv
26.7188 14.8984 26.4688 14.7842 26.1553 14.7842 cv
27.5527 12.5815 mo
27.5527 13.2227 li
27.374 13.1377 27.1963 13.0732 27.0176 13.0308 cv
26.833 12.9878 26.6543 12.9663 26.4834 12.9663 cv
26.0127 12.9663 25.6563 13.123 25.4141 13.437 cv
25.1719 13.7505 25.0293 14.228 25.001 14.8555 cv
25.1357 14.6558 25.3066 14.499 25.5137 14.3921 cv
25.7207 14.2852 25.9482 14.228 26.1982 14.228 cv
26.7188 14.228 27.1318 14.3921 27.4307 14.7056 cv
27.7305 15.019 27.8877 15.4541 27.8877 15.9956 cv
27.8877 16.5303 27.7236 16.958 27.4102 17.2788 cv
27.0967 17.5996 26.6758 17.7563 26.1553 17.7563 cv
25.5566 17.7563 25.0928 17.5283 24.7793 17.0723 cv
24.459 16.6157 24.3018 15.9458 24.3018 15.0693 cv
24.3018 14.2495 24.4941 13.5938 24.8867 13.1089 cv
25.2715 12.6245 25.7988 12.375 26.4551 12.375 cv
26.626 12.375 26.8037 12.396 26.9893 12.4248 cv
27.167 12.4604 27.3525 12.5103 27.5527 12.5815 cv
f
28.8027 3.29883 mo
30.1777 3.29883 li
f
28.8027 3.29883 mo
30.1777 3.29883 li
@
167.403 3.29883 mo
166.028 3.29883 li
f
167.403 3.29883 mo
166.028 3.29883 li
@
14.7734 .555664 mo
14.4102 .555664 14.1396 .734375 13.9541 1.09033 cv
13.7686 1.44678 13.6836 1.98145 13.6836 2.69434 cv
13.6836 3.40674 13.7686 3.94189 13.9541 4.29834 cv
14.1396 4.6543 14.4102 4.83252 14.7734 4.83252 cv
15.1377 4.83252 15.4082 4.6543 15.5938 4.29834 cv
15.7715 3.94189 15.8643 3.40674 15.8643 2.69434 cv
15.8643 1.98145 15.7715 1.44678 15.5938 1.09033 cv
15.4082 .734375 15.1377 .555664 14.7734 .555664 cv
14.7734 0 mo
15.3516 0 15.793 .234863 16.1074 .691406 cv
16.4141 1.15479 16.5703 1.82471 16.5703 2.69434 cv
16.5703 3.5708 16.4141 4.24121 16.1074 4.69727 cv
15.793 5.15332 15.3516 5.38184 14.7734 5.38184 cv
14.1895 5.38184 13.7402 5.15332 13.4336 4.69727 cv
13.127 4.24121 12.9775 3.5708 12.9775 2.69434 cv
12.9775 1.82471 13.127 1.15479 13.4336 .691406 cv
13.7402 .234863 14.1895 0 14.7734 0 cv
f
17.8037 4.40479 mo
18.5381 4.40479 li
18.5381 5.28857 li
17.8037 5.28857 li
17.8037 4.40479 li
cp
f
20.1914 4.69727 mo
21.3389 4.69727 li
21.3389 .734375 li
20.0918 .983398 li
20.0918 .341797 li
21.332 .0922852 li
22.0371 .0922852 li
22.0371 4.69727 li
23.1846 4.69727 li
23.1846 5.28906 li
20.1914 5.28906 li
20.1914 4.69727 li
cp
f
26.1074 2.82275 mo
25.7725 2.82275 25.5088 2.91553 25.3164 3.09326 cv
25.124 3.27148 25.0313 3.51416 25.0313 3.82764 cv
25.0313 4.14111 25.124 4.39063 25.3164 4.56885 cv
25.5088 4.74707 25.7725 4.83301 26.1074 4.83301 cv
26.4355 4.83301 26.6992 4.74707 26.8916 4.56201 cv
27.084 4.3833 27.1836 4.14111 27.1836 3.82764 cv
27.1836 3.51416 27.084 3.27148 26.8984 3.09326 cv
26.7061 2.91553 26.4424 2.82275 26.1074 2.82275 cv
25.4014 2.52295 mo
25.1025 2.45215 24.8672 2.30957 24.6963 2.10303 cv
24.5244 1.896 24.4463 1.64648 24.4463 1.34717 cv
24.4463 .933594 24.5889 .605957 24.8887 .363281 cv
25.1807 .121094 25.5869 0 26.1074 0 cv
26.6211 0 27.0273 .121094 27.3262 .363281 cv
27.6182 .605957 27.7686 .933594 27.7686 1.34717 cv
27.7686 1.64648 27.6826 1.896 27.5117 2.10303 cv
27.3408 2.30957 27.1123 2.45215 26.8135 2.52295 cv
27.1484 2.60156 27.4121 2.7583 27.6045 2.98682 cv
27.79 3.21484 27.8896 3.49951 27.8896 3.82764 cv
27.8896 4.3335 27.7324 4.71875 27.4258 4.98242 cv
27.1123 5.25342 26.6777 5.38135 26.1074 5.38135 cv
25.5303 5.38135 25.0879 5.25342 24.7813 4.98242 cv
24.4746 4.71875 24.3252 4.3335 24.3252 3.82764 cv
24.3252 3.49951 24.418 3.21484 24.6104 2.98682 cv
24.7959 2.7583 25.0596 2.60156 25.4014 2.52295 cv
25.1455 1.41113 mo
25.1455 1.68213 25.2236 1.896 25.3945 2.0459 cv
25.5654 2.19531 25.8008 2.2666 26.1074 2.2666 cv
26.4072 2.2666 26.6416 2.19531 26.8135 2.0459 cv
26.9844 1.896 27.0693 1.68213 27.0693 1.41113 cv
27.0693 1.14014 26.9844 .933594 26.8135 .783691 cv
26.6416 .634277 26.4072 .556152 26.1074 .556152 cv
25.8008 .556152 25.5654 .634277 25.3945 .783691 cv
25.2236 .933594 25.1455 1.14014 25.1455 1.41113 cv
f
.220703 88.8228 mo
.220703 85.8359 li
.8125 85.8359 li
.8125 88.1167 li
2.34473 88.1167 li
2.34473 86.0566 li
2.93652 86.0566 li
2.93652 88.1167 li
5.41797 88.1167 li
5.41797 88.8228 li
.220703 88.8228 li
cp
f
2.11719 82.4927 mo
2.07422 82.564 2.0459 82.6426 2.02441 82.728 cv
2.00977 82.814 1.99609 82.9063 1.99609 83.0059 cv
1.99609 83.3696 2.11719 83.6475 2.35254 83.8403 cv
2.58789 84.0396 2.92285 84.1323 3.36426 84.1323 cv
5.41699 84.1323 li
5.41699 84.7739 li
1.51855 84.7739 li
1.51855 84.1323 li
2.12402 84.1323 li
1.88867 84.0039 1.71094 83.8257 1.59668 83.6118 cv
1.48242 83.3979 1.42578 83.1343 1.42578 82.8208 cv
1.42578 82.7778 1.43262 82.728 1.43262 82.6709 cv
1.43945 82.6211 1.44727 82.564 1.46094 82.4927 cv
2.11719 82.4927 li
f
3.45703 80.0479 mo
3.45703 80.5684 3.52148 80.9248 3.63574 81.1245 cv
3.75684 81.3237 3.95605 81.4238 4.24121 81.4238 cv
4.46875 81.4238 4.6543 81.3525 4.7832 81.2026 cv
4.91797 81.0527 4.98242 80.8462 4.98242 80.5894 cv
4.98242 80.2329 4.86133 79.9482 4.60449 79.7344 cv
4.35547 79.5205 4.02051 79.4136 3.59961 79.4136 cv
3.45703 79.4136 li
3.45703 80.0479 li
3.19336 78.772 mo
5.41797 78.772 li
5.41797 79.4136 li
4.8252 79.4136 li
5.06836 79.5635 5.23926 79.7485 5.3457 79.9624 cv
5.45313 80.1763 5.50977 80.4468 5.50977 80.7607 cv
5.50977 81.1597 5.40332 81.4805 5.18164 81.7163 cv
4.96094 81.9512 4.66211 82.0654 4.28418 82.0654 cv
3.84961 82.0654 3.52148 81.9224 3.29297 81.623 cv
3.07227 81.3306 2.95801 80.896 2.95801 80.312 cv
2.95801 79.4136 li
2.89453 79.4136 li
2.60156 79.4136 2.37402 79.5132 2.20996 79.7056 cv
2.05273 79.8984 1.96777 80.1694 1.96777 80.5186 cv
1.96777 80.7466 1.99609 80.96 2.05273 81.1738 cv
2.11035 81.3877 2.18848 81.5874 2.28809 81.7798 cv
1.69629 81.7798 li
1.61133 81.5522 1.54004 81.3237 1.49707 81.103 cv
1.4541 80.8823 1.42578 80.6685 1.42578 80.4546 cv
1.42578 79.8911 1.5752 79.4702 1.86719 79.1924 cv
2.16016 78.9146 2.60156 78.772 3.19336 78.772 cv
f
1.66797 74.645 mo
2.2666 74.645 li
2.16699 74.8301 2.0957 75.0083 2.0459 75.1938 cv
1.99609 75.3789 1.96777 75.5571 1.96777 75.7427 cv
1.96777 76.1558 2.10254 76.4839 2.36621 76.7124 cv
2.62988 76.9399 3.00098 77.0542 3.47168 77.0542 cv
3.94922 77.0542 4.31934 76.9399 4.58301 76.7124 cv
4.84668 76.4839 4.97559 76.1558 4.97559 75.7427 cv
4.97559 75.5571 4.9541 75.3789 4.9043 75.1938 cv
4.85449 75.0083 4.77637 74.8301 4.67578 74.645 cv
5.26758 74.645 li
5.35352 74.8301 5.41699 75.0156 5.45313 75.2007 cv
5.48828 75.3936 5.50977 75.5996 5.50977 75.8135 cv
5.50977 76.3989 5.33203 76.8687 4.96094 77.2109 cv
4.59766 77.5601 4.09863 77.7314 3.47168 77.7314 cv
2.83691 77.7314 2.33789 77.5601 1.97461 77.2109 cv
1.61133 76.8618 1.42578 76.3843 1.42578 75.771 cv
1.42578 75.5718 1.44727 75.3789 1.48926 75.1938 cv
1.53223 75.0083 1.58984 74.8232 1.66797 74.645 cv
f
.414063 72.8984 mo
1.51855 72.8984 li
1.51855 71.5801 li
2.01758 71.5801 li
2.01758 72.8984 li
4.13477 72.8984 li
4.45508 72.8984 4.66211 72.8555 4.74707 72.7705 cv
4.83984 72.6846 4.88281 72.5063 4.88281 72.2354 cv
4.88281 71.5801 li
5.41797 71.5801 li
5.41797 72.2354 li
5.41797 72.7344 5.3252 73.0771 5.13965 73.2622 cv
4.9541 73.4478 4.61914 73.54 4.13477 73.54 cv
2.01758 73.54 li
2.01758 74.0103 li
1.51855 74.0103 li
1.51855 73.54 li
.414063 73.54 li
.414063 72.8984 li
f
1.51855 70.0972 mo
5.41797 70.0972 li
5.41797 70.7383 li
1.51855 70.7383 li
1.51855 70.0972 li
cp
0 70.0972 mo
.8125 70.0972 li
.8125 70.7383 li
0 70.7383 li
0 70.0972 li
cp
f
1.96777 67.2461 mo
1.96777 67.5884 2.10254 67.8589 2.37402 68.0586 cv
2.64453 68.2583 3.00781 68.3579 3.47168 68.3579 cv
3.94141 68.3579 4.30566 68.2651 4.57617 68.0659 cv
4.84668 67.8662 4.97559 67.5952 4.97559 67.2461 cv
4.97559 66.9038 4.84668 66.6333 4.57617 66.4336 cv
4.30566 66.2339 3.94141 66.1343 3.47168 66.1343 cv
3.01465 66.1343 2.64453 66.2339 2.37402 66.4336 cv
2.10254 66.6333 1.96777 66.9038 1.96777 67.2461 cv
1.42578 67.2461 mo
1.42578 66.6899 1.61133 66.2554 1.96777 65.9346 cv
2.33105 65.6206 2.83008 65.457 3.47168 65.457 cv
4.11328 65.457 4.61133 65.6206 4.96875 65.9346 cv
5.33203 66.2554 5.50977 66.6899 5.50977 67.2461 cv
5.50977 67.8091 5.33203 68.2515 4.96875 68.5649 cv
4.61133 68.8784 4.11328 69.0352 3.47168 69.0352 cv
2.83008 69.0352 2.33105 68.8784 1.96777 68.5649 cv
1.61133 68.2515 1.42578 67.8091 1.42578 67.2461 cv
f
3.06543 61.1519 mo
5.41699 61.1519 li
5.41699 61.793 li
3.08691 61.793 li
2.71582 61.793 2.44531 61.8716 2.25977 62.0142 cv
2.07422 62.1567 1.98145 62.3706 1.98145 62.6558 cv
1.98145 63.0049 2.0957 63.2759 2.31641 63.4756 cv
2.53809 63.6753 2.83691 63.7749 3.21484 63.7749 cv
5.41699 63.7749 li
5.41699 64.4165 li
1.51855 64.4165 li
1.51855 63.7749 li
2.12402 63.7749 li
1.89648 63.625 1.71777 63.4468 1.60449 63.2329 cv
1.48926 63.0264 1.42578 62.7842 1.42578 62.5127 cv
1.42578 62.0713 1.56836 61.729 1.8457 61.501 cv
2.12402 61.2729 2.53027 61.1519 3.06543 61.1519 cv
f
1.96777 56.0977 mo
1.96777 56.4399 2.10254 56.7109 2.37402 56.9106 cv
2.64453 57.1099 3.00781 57.21 3.47168 57.21 cv
3.94141 57.21 4.30566 57.1172 4.57617 56.9175 cv
4.84668 56.7178 4.97559 56.4468 4.97559 56.0977 cv
4.97559 55.7559 4.84668 55.4849 4.57617 55.2852 cv
4.30566 55.0859 3.94141 54.9858 3.47168 54.9858 cv
3.01465 54.9858 2.64453 55.0859 2.37402 55.2852 cv
2.10254 55.4849 1.96777 55.7559 1.96777 56.0977 cv
1.42578 56.0977 mo
1.42578 55.542 1.61133 55.1069 1.96777 54.7866 cv
2.33105 54.4727 2.83008 54.3086 3.47168 54.3086 cv
4.11328 54.3086 4.61133 54.4727 4.96875 54.7866 cv
5.33203 55.1069 5.50977 55.542 5.50977 56.0977 cv
5.50977 56.6606 5.33203 57.103 4.96875 57.4165 cv
4.61133 57.7305 4.11328 57.8872 3.47168 57.8872 cv
2.83008 57.8872 2.33105 57.7305 1.96777 57.4165 cv
1.61133 57.103 1.42578 56.6606 1.42578 56.0977 cv
f
0 51.272 mo
.53418 51.272 li
.53418 51.8853 li
.53418 52.1133 .584961 52.2773 .676758 52.3628 cv
.770508 52.4556 .933594 52.498 1.17676 52.498 cv
1.51855 52.498 li
1.51855 51.4434 li
2.01758 51.4434 li
2.01758 52.498 li
5.41797 52.498 li
5.41797 53.1396 li
2.01758 53.1396 li
2.01758 53.7524 li
1.51855 53.7524 li
1.51855 53.1396 li
1.24707 53.1396 li
.820313 53.1396 .499023 53.04 .299805 52.8403 cv
.0996094 52.6406 0 52.3198 0 51.8784 cv
0 51.272 li
f
3.06543 45.2275 mo
5.41699 45.2275 li
5.41699 45.8691 li
3.08691 45.8691 li
2.71582 45.8691 2.44531 45.9478 2.25977 46.0903 cv
2.07422 46.2329 1.98145 46.4468 1.98145 46.7314 cv
1.98145 47.0811 2.0957 47.3516 2.31641 47.5513 cv
2.53809 47.751 2.83691 47.8511 3.21484 47.8511 cv
5.41699 47.8511 li
5.41699 48.4922 li
1.51855 48.4922 li
1.51855 47.8511 li
2.12402 47.8511 li
1.89648 47.7012 1.71777 47.5229 1.60449 47.3091 cv
1.48926 47.1025 1.42578 46.8604 1.42578 46.5889 cv
1.42578 46.147 1.56836 45.8052 1.8457 45.5771 cv
2.12402 45.3491 2.53027 45.2275 3.06543 45.2275 cv
f
1.96777 42.4404 mo
1.96777 42.7827 2.10254 43.0537 2.37402 43.2534 cv
2.64453 43.4526 3.00781 43.5527 3.47168 43.5527 cv
3.94141 43.5527 4.30566 43.46 4.57617 43.2603 cv
4.84668 43.0605 4.97559 42.79 4.97559 42.4404 cv
4.97559 42.0986 4.84668 41.8276 4.57617 41.6279 cv
4.30566 41.4287 3.94141 41.3286 3.47168 41.3286 cv
3.01465 41.3286 2.64453 41.4287 2.37402 41.6279 cv
2.10254 41.8276 1.96777 42.0986 1.96777 42.4404 cv
1.42578 42.4404 mo
1.42578 41.8848 1.61133 41.4497 1.96777 41.1294 cv
2.33105 40.8154 2.83008 40.6514 3.47168 40.6514 cv
4.11328 40.6514 4.61133 40.8154 4.96875 41.1294 cv
5.33203 41.4497 5.50977 41.8848 5.50977 42.4404 cv
5.50977 43.0034 5.33203 43.4458 4.96875 43.7593 cv
4.61133 44.0732 4.11328 44.23 3.47168 44.23 cv
2.83008 44.23 2.33105 44.0732 1.96777 43.7593 cv
1.61133 43.4458 1.42578 43.0034 1.42578 42.4404 cv
f
2.11035 37.0234 mo
0 37.0234 li
0 36.3818 li
5.41797 36.3818 li
5.41797 37.0234 li
4.83301 37.0234 li
5.06836 37.1587 5.23926 37.3301 5.3457 37.5366 cv
5.45313 37.7432 5.50977 37.9854 5.50977 38.271 cv
5.50977 38.7412 5.3252 39.126 4.9541 39.4253 cv
4.58301 39.7251 4.08496 39.8672 3.47168 39.8672 cv
2.8584 39.8672 2.36719 39.7251 1.98828 39.4253 cv
1.61816 39.126 1.42578 38.7412 1.42578 38.271 cv
1.42578 37.9854 1.48242 37.7432 1.59668 37.5366 cv
1.71094 37.3301 1.88184 37.1587 2.11035 37.0234 cv
3.47168 39.2046 mo
3.94141 39.2046 4.3125 39.1118 4.58301 38.9194 cv
4.85449 38.7271 4.98242 38.4561 4.98242 38.1138 cv
4.98242 37.7788 4.85449 37.5151 4.58301 37.3154 cv
4.3125 37.123 3.94141 37.0234 3.47168 37.0234 cv
3.00098 37.0234 2.6377 37.123 2.36719 37.3154 cv
2.0957 37.5151 1.95996 37.7788 1.95996 38.1138 cv
1.95996 38.4561 2.0957 38.7271 2.36719 38.9194 cv
2.6377 39.1118 3.00098 39.2046 3.47168 39.2046 cv
f
3.30762 31.7271 mo
3.62109 31.7271 li
3.62109 34.6714 li
4.06348 34.6426 4.40527 34.5142 4.63281 34.272 cv
4.86133 34.0366 4.97559 33.709 4.97559 33.2813 cv
4.97559 33.0386 4.94727 32.7964 4.88965 32.5684 cv
4.83301 32.3403 4.74023 32.105 4.6123 31.8774 cv
5.21777 31.8774 li
5.31738 32.105 5.39648 32.3403 5.43848 32.5825 cv
5.48145 32.8247 5.50977 33.0747 5.50977 33.3169 cv
5.50977 33.9443 5.33203 34.4355 4.97559 34.7993 cv
4.61914 35.1631 4.12695 35.3413 3.50684 35.3413 cv
2.87305 35.3413 2.36621 35.1704 1.98926 34.8281 cv
1.61816 34.4858 1.42578 34.0151 1.42578 33.4312 cv
1.42578 32.9033 1.59668 32.4902 1.93164 32.1836 cv
2.27441 31.8843 2.72949 31.7271 3.30762 31.7271 cv
3.12207 32.3687 mo
2.77246 32.376 2.49512 32.4756 2.28125 32.6606 cv
2.07422 32.8535 1.96777 33.1104 1.96777 33.4238 cv
1.96777 33.7803 2.07422 34.0649 2.27441 34.2788 cv
2.47363 34.4927 2.75879 34.6216 3.12207 34.6494 cv
3.12207 32.3687 li
f
1.63281 28.1919 mo
2.23828 28.1919 li
2.15234 28.377 2.08203 28.5625 2.03223 28.7549 cv
1.98926 28.9546 1.95996 29.1538 1.95996 29.3608 cv
1.95996 29.6812 2.00977 29.9238 2.11035 30.0806 cv
2.20996 30.2373 2.35254 30.3159 2.54492 30.3159 cv
2.69434 30.3159 2.80859 30.2588 2.89355 30.145 cv
2.97949 30.0308 3.06543 29.8027 3.13672 29.4604 cv
3.18652 29.2397 li
3.28613 28.7832 3.42871 28.4624 3.59961 28.27 cv
3.77832 28.085 4.02734 27.9849 4.34082 27.9849 cv
4.70508 27.9849 4.99023 28.1274 5.19629 28.4126 cv
5.41016 28.6978 5.50977 29.0967 5.50977 29.5962 cv
5.50977 29.8096 5.48828 30.0234 5.45313 30.252 cv
5.41699 30.48 5.36035 30.7148 5.27441 30.9644 cv
4.6123 30.9644 li
4.74023 30.7295 4.83301 30.4941 4.88965 30.2661 cv
4.9541 30.0381 4.98242 29.8096 4.98242 29.5815 cv
4.98242 29.2822 4.93262 29.0469 4.83301 28.8833 cv
4.7334 28.7261 4.58301 28.6406 4.39063 28.6406 cv
4.21973 28.6406 4.08398 28.7051 3.99219 28.8188 cv
3.89941 28.9331 3.80664 29.1895 3.7207 29.5889 cv
3.6709 29.8096 li
3.58594 30.209 3.45703 30.501 3.28613 30.6724 cv
3.11523 30.8501 2.87988 30.936 2.57324 30.936 cv
2.20996 30.936 1.9248 30.8076 1.72559 30.5513 cv
1.52539 30.2944 1.42578 29.9238 1.42578 29.439 cv
1.42578 29.2036 1.44727 28.9829 1.48242 28.769 cv
1.51855 28.5625 1.56836 28.3696 1.63281 28.1919 cv
f
.34375 lw
28.8027 114.674 mo
28.8027 3.29883 li
@
28.8027 114.674 mo
167.403 114.674 li
@
28.8027 3.29883 mo
167.403 3.29883 li
@
167.403 114.674 mo
167.403 3.29883 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (012x017.eps)%%CreationDate: 27/05/15 12:24 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6pO4m.dP/0i^cd3bCuYMdK/:n8kA4t=c!q/!n=2<'++*CU;JL@'M(nBW]>&d>)%:8&<N/qI<L$N]3aHG![VCfQ8"on=Q)&5p%8_#__Wi@=e<DB:<4,pRmcW_c4)jUXBZ^S$6W4&5H2:Y1"-s9c\9_;YjrV$+oDtQo;mC.DF=)9hMh;1c0pij-24KO")-e2b$=ag0>%V";4pF/@9c=5)L!C-O/j=U>FHjgjm8B\&2m^L-<_'njke@eCVV]'LR_#Te@@`Oi7]k&7ANJq2Ef]AMgl%j%+aq"o?Mha]7`,fkeQ%io0:=8/WnRs-pbfX+)sPrGK%#BX]$='P4c0q6"nUd-D>@T-5^VdoOPrMu%Xq=mafqF&Y`WlA/F;l$TBd;'U'4`BXrE,H4mD_dj3t%GZOjF;?+s7Ei36Ge[pK%q/65FnNWtoZDL2+q'8b]I[g#uAZO3Ke>Z8T',DUsC\9#@`o!sVWun\P#_;M<.U5rb+8%h_m<8(;g:i`W%(^AIn#M$TT?,A`iE87G%0%sBob%2%T\g8^5e1=1We0OrkXe]c+<YGC!,(d@kPZ<]QQ^pp("@*#RL'a[>"SLPi\+.jZX]W\V740+e%h/1Z3r\Tn976Y[#ZBk!Pc2Jqe,6mf;obMBJ'!UAh"%SN[LZ\fV`@$hZ<jdLg-S#J*Ua7T\9`[gTX&SIf&Q0@#^eXjCahlq`O>@4A%;cWTL%/@2Hpad1`WN*gB<J@?N$;XZe4KVT@D=X!$5V9m(?\STh$j15^7]!t0g,@HcD5^t!+?K!.C=tMpJoC,b[>IDO<@l"V`?IDn%(84L"!`(<]_go3H'mO&aOEUuLKO-tU_+:07S*W0!#P`sUcmJO@>0nVI;Xt6""J8Kq=p1JEDT3"R0!kpKi>8j,4ol;T'7gQDJkp&=%r.S$^'At.k,l"&KZjT'k:8J#'XFGb@_ILGO_Bnt&Dj$D"l3Zj22M)qtB77^5OFL(7g'=5MM=_p)20hZ;%/rRFBHQPK_A2VoZk#@Z%(UT4p5C=*dT`dQQ(:4T98M:]*+abU2!@*d/TUa+7lSCjLiB#I4Ht.OI/LT$Mjb,7<QU#0]7;B&V:^:1E,SO>dDj+4cVpIX&KN^dX%Tm_SAjB_P63mbH+RRoCV4+qYX"-IIJ_b=*uZiT8V;MZm.EP_L9n=<BG\5)N+^&d>s7p+LOm8/^L-d^!4j>m$+-mp7'82KLO_A`QM%K)ZGYF[eH<-]r#9eJVMK:QFcTl"4u)a</(^a:K<T:+nCU48f-n0i#U?%Q>6,N*_7*^a3pAZ@r7o?_S9HqG0u0'B_%E#P/f1F8h>P%M6sFL''CqDB:@njo9]B]/FqQ$(iG92bNHt\k:cX4.$3?3?h,k4/sStao9]A*QcX1/0DR!cImfnrhn^])=7VjZ,(EJe'Wn=uQ'.B8%<6UN.j=Md8Dj<rOdM9*A8kPrf^W]TP!p/n^r[-'Z7c,Z:k^E+'&j40`/cLJshLP&k!ro<c1t4_e]Hiib?_@Dg!Cf`*>Dc!eP;32l%:^;J9.bl?,^Z:maF*QI.$2Z@qZ5Ya?'^&0kG=g6Hhh$ZR5bn@E%%I0[Fc*)M1p83kq:,eO+lr_`i@ps\n.kKGG/#KZ6=3`K,QQr%%='RHH!Qe0s48b03ZteM;Ab7lgZ->%eNWLYN@j4n:.UZY)K&=!kcO%YY]Zo;G;G/8CrWhnt(;b,-E<*59d6P2d]Z[g[ngBSdC:e6m%goAB(.q+<S^&/uu91(ReM`,nlDp&?eTlOBRVh]8ti0'<;TpXlKBkto/)gT;7er,F-`\),AJn5D?$?^o\Ch+1('Ag"A`Sch4:Ga_R%[n,7@BdWe2.FOT"LjFXE51'iGNm'LbV"@Rl#KhnsJ@=J+2X*GN)cKe7Zm`$=V%TICg?S*A/4l(MXM5'bgkISZ68@-f+qc6G:/-<B%]j2DYOO<?n.ktr$R\Wpt/l7T*`!mUF7&#&S,GIU*F%-b_(=<U/GD/To]]WZF4EL:P^&unb1O8gn-5^;hYG*he&aTW)J]RI%Q(JE4%r]geJQXqfa`^>8Bosl2>XG5(CTLGQeeOa&Q%!^]I7LPR@MIOHWM@0Wc7,aAD9I#2Nd2!U9[c%pphae[/N2m59b&rQ\AcjgG#o&\.%*N0DlRp^<\%\Xm#64K?C<JB]GdLtF6U_P34ZPj]kp^Pak'r(=+<)Aup2+`9r$0'[2c7=9S@MghB3cDFK-kDpF0u$=#]-1Y(dXlEu%(qnK$bUH3qPp5NI=jZ>h_W9C4+uV%nNC6qu^qo&82L.q0a0or5+&RQf,Q-.nV@u8)PF2^(@aT1l0[=_G._9c-6FDhi3H$FRUOgKj%64Xm2SD%5kb=k"%3kTsAG*V<.U+gGX%m\;Gg-P;]@X.=H*I-3PPLquEBM7/u#n[(qcP8WNa9=JW17V1mYJ3UgQ(='lNtr&R4B.XP%AV\JUf]oegO4cp!ELVi-*(im_glfQY`4hAK=Os#9YeI1u,LcmNbnO-@&\[>RJpY?P_3KP"aHKq!P$/Xk@K*4$m=MtN"B);Ekq(9q%$5b:fKK0eJL.Q^'/<2##?d-roo/<_3l)/CZdU:L+;U?GOk5m8ic<ef.[-+sMk11g.k@FQ'k#!`3(f&28-=enFM(GFYXl(8$Yjk9B%nTM,K?ZmP'Ruu$O$Gh_:X+Vj:r`2^4`&$X)I82In92fJl:s_CR<Y\e*B*p+!#Tjpo=:un1Ve"Xr\eA"KA5YeKcD1Z(0p?XIgU`&)%l78hRP%2gQll2+q6GORM<4M%@kCJ4E3tS?8Pj"j<JY2$q03]?]'4J%oEq5aGJo$2$g6oV"quLHK'8rVPX;;9B:hJB?ZT=u9A@dge%VH.KcYuZ\t9;I5;8S;`e0:3+EQJ9GjUP4YFN`d*6D"_b<g?4Jr_-01[c";Cd&VrUgR4YY^_S$.7s0*+#RFt"\cME@A^>)=\MTe9I%FVkh53b#[\8sPY(o43Q60uaM`;Q7@2E-n!]B"f&0MIa@ZRLe6Xfi"600Us0tI0@u.KEfBpZCm+mqR.\R3s743RZ('T!BXHo^WZ8$%mdrEG0$Da+<6-TrZ:Nm6Xi)7bH!>?2PA5@-KouA#<HkXf-%]:=*[E@84A]G(6bB$-)'(=[^mXTSLkC$O)q"Q8P@X0!+pXL@,*OUX%ip_ne2f+fnY).2E/4$L'1%-U1%Mc&em[KF1/S\h5:$*$A8r33GDe`6Dd<NUD$(:`<dganlkHfFNj.eb,raO$nN"YV0_(UKASEQ)5%+>sE!O+&_qb.0'fR*76HCkg*QN:f0:ULQ:f]h(\Mo7m-\e=17YG!)bN2Zu4"iGblF0c&p$i*NG"FZPfq&l0(O=I$i@ga+-LR9\`K%Y2Ykj?s9.0ctt*mA:tOhW[l;+&hLJs,NiV:-5oXafZ5D&_sDeS(&\V'8ea15F3iZ]k&3_YUFR<IL>Q$ghB9/2dpco6iu+?N>Z:Rd%G`mHM\nY4fC/$q#1;aDo9O]5F4m?Wj_I(H$S&oQEA/&0rP<'su6=OjA$K3G^G1\i2$I6:W3%r9QM$GV9mtTk$ED.^?]/V\\Z!0n]%Q^(*85*8U,>;]N^,i=LHDcg*/Yr0ahDS+U$+OBh,r8bNIs6Yp@=T&'lW/YON>-LJb35SImkEG$]HF2LFs)rQin*S&@^=Ib8-SN']%2cMASr;*>jf$>W)Bn>mCr3t(WB<."e-59:Q=mae(j<8ges($VSh_*I:gYHf2F])C\rDddE3s&Mj;JjsIf@=ad)Y?V-g8]=[\=>oM%B`*RU<"Y02fM5QXT_33+K,B>M_,WT'67N8%@N_]E5Ege5]iFB<f]8s"E)IG\n,*Vqe%<^gpUBmb]P+dD*3B#LLJEbI.FeBAi&JP+%[#S@D6%bP<"YZa#\,WYLJnbO#5S*n>d#6FdZglGFG!6j`IL(=mF%kZJ0S8ulpM7Cok^>P`,a=fu]D]`RZ[VmtY@%;>K*L+UDmX7M%&@$D"W,7$.@,"ZOr3P+VA!m5@$Ee["!UA!%",f3`Gr].*g>iQV#3u6EXS3@<rDre[/c6j(P*j!Sg9:A-lp#*F\YJG64h6fuSN"8E%W%#*2PWV]3F;N4=qKA044*($.Cfc^_]_NNFfL'$FTVDH3ALVnl]RQ0/2,nsEQ@OrV2ml&6W4g_L15G@n^R.@;,_s+T7\3SKFX6aL%MNcX[cos"RWL"ISSTXLh3%8el%+[*`4@%gm^(%FM<u@d;A;NDmJd#Q]03X;7GmXY(;d.ko0J]CfkLa_&Sa`]M#2H/#s2MgMA8W2H%RR`b+,d3%Pp>eNIp$l8b5g#t[JI,ineX)K1!ZEidKp-Df=7;lOk+_k4I^33ooW,0TAu#AbWQ]n1L:DW??HqN@LHJK]o^o4k`LuSY%nSc26gJ=D@d1GS$rWi1"db.qrhO2,CXOeB*hnfI,h9/jZX^+:LgBE5H[jcDP(E.LbjF.`[SH)YL#OE]KPub)@%#<EghoUpsUR(7(%rhn$\,IG,'i.&/gDdR?Lq?NF"4]Ul[#7]lLK(JrqX?'&^JC[!QWqPc#=.!!m2$B1c2hqW.W.hb%k,2@!e9':(s*cn2W5:<;[!:'t%TDqo.rmD-3D7fSQs*'5^c/lRn.M3=Q"lK!%[>(JmHiiBV#l(ISD,_+.;!7QO%7L+9Vr<,h$`d$n\'IOML.2QQj3]GF75XkPNS!&O%&A!N:%Ee?N/%mFV4eT:`QTI*KPM?ki44.TacaJ/GDniu7qg12nZ9Ybe^Y94!%>3Jf+0>ATYB`YKHiM[:5oZ-LLuX:hJD-%%PtWT'%]R"F&[4_LV==(Cb:`,X7P,m3/gXg2LK"1<"Y\f?qIo6W.cisI3_%Mr'm^DlHs7:_V#4+2dDuZGsrbt6MgV;RR3mODo=163qo8t<h%oH.i5s'%nI:WNDSfc$I"o^?P>hgV^':SZM@N6sk%<];W+?e-Dnr*ZQhl]$tOBQIBYorMaEs0cMol3H):g?p3Wn=]d;-OEJo/S+k@%^SGRr%JZ8`[V0RTJ,*>2\Hun8`!ZSOEL)/`8%%*$D-+?Wj;[.oP39EN.99iIUlp,eh%3_sbKMq5f2XuDVE>:6O)CLC+qcFS!6o>G%b%n;%;mG'QX4fYu5pOcnnaICD6>6_lUto_Wcg&c5p)+`20Y,N%[!N7,!C'RDYDG_1ae*hm_/:o%M5ATka-N?1:Qk9V\BLql_KD\E%YLBTPI9>lcOU%ap)+i;aFb*dk,#0I"#J:2-Y-AolH\@TFM4*KZR4=hV44P8:$BpJ+>,RME9d*d;Y4cNR=LY#rm!;dcla6P\pSuJm%,OkNbAH''qk0ZbtK6:6$o<@*KN!Nf\MO,HC@\d!r^@M>:LW*NQJ(;.O#QRdik@He,AL0XqIH>Z'^We)=cDu9#LIa^,WR<R:=ejIP%CP.^&q[Ap@gEB#n+K#+lD`1elA?Xm-Ik_\3"Mh\.$8nc!Dp:`VnH,FMs$]<B"&[6L3kY0<h.\*_[p(r2j=9I]Q&G<IZ\Zh@Vn`2r%<LW;up\=^#=8,<V!!iAns"`Yu&6'IHG-Pj7s+Sgmc@2lRX0"=XUFaKC%do2Uf4Jb?aj;k7o73cn!'Fb;/=<Vc1@J3"GW7pt.cH[q%=&hr3%)@p>ErmP$3c3Jjb7#"c>ZHkfh$S"$q7h>AJV@&d".9ef8ce-!URoT9lrB8+b3*]n->eo[U1qE+mDsL%kc8I!dJH=!)cn6a%d(9R6VSrT:>8!$A$)X.-KP:qtihG6@h@JTPYC>$c29<AUH,&(:LVJO)Eqn7>WG&b@X8fZWkk64ao=f6OIquOGS7:f?Xf?3Ujp;G\%;,Ss_N7YC<`l@:I$t7AoF^V^@2`;8p7r2Y4__l[D_9i^jZ,kAW4%`<WeCq_!9(f<XDgaGe/)uq?C'TUrDmcdQ=dg7)$62$30p%RA%\g0_Y?\cV:^ZnqrrF@'RpL;W)h()YH^9tN>%:tGOkCfdI>ZK._X$GiP]3D>f"qA(Qm\nrc4Vjqqh-%-KC&GHs7&\u4hCp_R$-&8^%-d*n#aTIoT@4)@tb/-fu?A$Gk:$=+J*i$hg_]`$=9YKh2[FP=%!%K_g4Aak@i0Ro8_HVn)3Mr+[\S+&nY`#n:kI>*6cH#Z\p9e&,%f@o]^g#$*VENoL.HgXWEhg,+E1-;ets/^E#J^B+>Dr6%o\Lfp>7E!b<Qe;+C)i^UrZ?!U+Q<3J7_u/ruEDfgGc!4:M'M6^o15"H)%!:'9)UKJ*Rmi/t.%>]mA]!ZE/9@huKA`7<BrG&C`G5PRmf)q;*C"EaO1o^9)HAe_"Do"Ie*LH:S3f#KhgW?l.*'$fKG,P$Q;5"d0%iN4-U(T7BPnDP,9/MmP+`*Weh7;E6R[2r-X3DD]te$!B8>LV+#/%U[\?NKAPmLSc6<!bPrmWsKUn5fL@".\Z8n<u--8(E'%-,dDZ%?AT&lo*kf6-Z2NGX4OA$<1Rkf!L6t1TWr/4!sl+1<Gr'DH#NA^^#)npc/u-+CNd;XD+B!Z<cbX"iQH+8ReVss:mrYU)7t4HnMFb*%m^G9_lSam!j7,fq<P:qGN9UJp0ktd0A(5Wum6<ho!68l_)^a?:Y:Jtl$gqJ/[8[#hZd!iQ66_f/m1>QD1kZL-<V4'2fBVfY@gf=N%IdQpZIRW:js'>#:[8"TXK5mQnqi*e/o&@;JVD`(U%-2792CM&!_DMeuG5YXSQA*[aZeEP#'sh3P\"HnHg"gJJS*qV`lL`ri>%,R)%eEJgIrYD4^r`&R+rFWE,f)(D@A+q4:&#ddO3t1AUd\26>n.m5Dl[6.Qs2+o161rr;Y[FLD!1Vdq%jJa)nVZ:Jg"bCtpVTZt<7=^Y%&HWAN-/<Bh)OS<TNsr$*<<\l>cVilt?KjLt(r0=gfD'#JEO+'XB(>$20L:4]T5AdG0qd6Mi`-X.'LRC2qJ*`DIn(EYQ@/Wm=mD_a%]c3YQd-FI,=H^EJKISk;fM'nUUmkt@ARRccXmi?<15`*qbX@bo"B?2IVVD+8hT[rcFc!-Ja@]*]hF3]aE'8OG-EZ.he:LOb22[jS%MZF^GKn7nk<_-`5"9YLWFfdc]&k)"@5=W^J#kR]Bc"8!n^!:BB.c4`r!%.<=EY9@&O7CN/Ha<L2]-7j\JnW(-\5]V*irC96Vmq*"%2NB+\(]M9k;?H0ogjG6+*"3+HHm!B)KN40Z>pVKE=%T3\(kY36#QY-+K>"HX#>Gf4Y@&Mm1j-,Bk)\PKBWr\'q%8+B?qY(J>>[em%=!BI`#i@mlfitG6]U*N>%ZK]Lald"-'iKD^l'+=o4:lcVOHe[PF[rE%mH?6([)cao66okQ',atjB?;m]B]4(p0Nu,a@j!K'g&B;m%UZM_?:p!_<9V4;Jr`)0NqP/UdP';-5lCdW-.7NYE(uQ:RNIc)bSgADR/sa;'aIa8mG:gL-#@Rb6M];MN\[ZqXRZhcMLJ*PpT7%Hg%.GEM?MTR$2no+<>Wk*K'09k>\mB<)FZh8(t?+SkM:R/ol1ZL9V;0USibIP0i6oq`cn[4\**8T;IV9]?lo^\SJ/cMoCVj7g28uZCd%:m#ea\+:HMSgn>I[@Yf.7)YA)[*@Wt%CKTCQ>pPbhlSKF<8-KB.b1&ed`upIQq2G5)sa^'V9[KFf"TtpY]eU#Z^(6TG#droge"?S%b3_W/4hptC0BC@n`M1Wdf/1E#d^X0r9.aF4mA?2OALk1`Q9C"(=\r-o/Nq_X<2T399P+'S"uInV2GIC:PB,CQ)95Dh:>>?&DC3e.%ZU9(LrDk.Z/[Tjpj;WO;TSLT:+Ts`2VRHnofmTgUCK^>GqH_n/:<bgnc/s?'Fs='dhS-XsK'fF7S%UD1?rq\6h8`4R&.!E@LKKPm%?+eX`Pa)FERZ(Bp/0KAR1eJ8+7,!8o5?5J05tG@oO$ETd!2RS8j/fhnp`W)>hm9KITXO9%FuoZbO*#5R[Pp.ome@smrk;oUk$McH%*\^L?0*5=V,&OId+>p$/XOVOL+/sG\+B:$$Vg_/Ml/#C9Z][Li*1lu6<SF$^*s<dYgH3alK@kP(I<\]a!,2X/nc4<?Y19o9T0k8H%m=ASLRG"6(:Zge%IB$S?gJ*V@%Be<gK+pf:C@AG)GkHr*4u8":j]T@"IH5d<4tU+]"X5gFn)na/Bd2q1Mg?*IdGE#TcQDD.q4uho%*\@+1mEKM'b'lkpBnTOebfggegO=!n?G2UR[WLSgFK4n?cCB;5a*pRUb2Zt8,6aY)D6#C^rb<GhK90-1mA6."J#(gsI]bkQhKk8]%4kB!r05].GhCd-$#0l:m[f/ORQ63gj/u3],dXeq["4Dl(Uc\6-*iXuQ6>LbWD*>DDWs0\(VTl;JjXCIL8NL+$Zopql(4p`(B4^C)%pZTg;l1sV7)MiLMI]c9D8FMnAoB4=3_W'>$rLNf4rEX$l([9ITlQZu*q<'3W^(+&V6IB[D=8SOGJ#!<aqQdE7[dK3`ZSrVTo]g^K%WfQ=khmOS!f:2X`J#%i=jl`Pja%'L4O2kV>*i'V\7Jl7KY>kXc5$66CYIX"\o]T*6qq/>V?_l#[b=Euc[^DSg?VCVG]tKZQNUK#;%Ut3ra<,1`=\VuWQr*Z=6(3?k2n$Dg`OhRh5c_/D8*E3h/;Is`UI`L9m"6jB*,nEP5#%j=e5<k"sXM":TJ^CQD]rJ<gSmA6bqjWM8%QDW"sT-6`5\+6\+&MA3QQQ%A=R`.fp>=>U#]?Ju4m!FgHY3nt$"R2er^[+:eIkGlNUDJkgSQRE0]91Bhk-)M-!3P=!CH#U=1\oj"%H1eB?B;IkUY+0)em%%nC?S9Fl<j+\+*pZ/M\X\(_Y;jik:N'%jn#N+ZT4!$EqE:[D+0",FCr"f(%qZW9C&7Hth=Nfe/GY^]h>=Lj%:KsGi2i2Y7F7WpdjWX,mV(A.M"@)jd50Z)`4WH8To?-FU>N"6@Mlf]"q!%,7ql8OPbV<W(Gj=[=-fAiWB6IqTZ:CM#ci)K;fU%MU%eN`]*4LO0sqRUn-@N=ubIT9Q^<i43llh"sF(&[]t['K*^*T5RCqT566I/?_>UpCa0o]o*uSGGCF*;f`8Cchm7NLG4*WWt`D;m_OR%^o)+QfCOW&Nm4G5G97S%T9f)(YP#]/HckK8*6b[88t!f&"MCl*8EKLJf&i7n<R9.5MppN0I9OjtGt6uA`QRsAhX<HGZO8RYbT->'%\p:c-/3ZM*RG\quQPYNe_p$pQ*Tp+<bpq%cLhim[B>F*jVO$uC>NGVZ\U]_lPZ:USV6_@n>U*6]c[[lJSO&uY.)+tLJa(GIPVT^s%Z:nm53A&Mf)q-8Fn\&l#llanR(eqP.X#5[faI?P`aiN:((uNq)^?Jm4rAB4LgJf'GSRn.n(6L5P.3GGg8<)lub>.Y8SG+&20\tRh%,"5GW+#sn3<-^\hpHqQn$VZq+IVf7a2%cg24sM2XNXFqNdb='S["G_ErE2>uk'bdti/O@smsBe2]BMYN\ICrafXn<]+f3aLp)SB^%<=a_uGBaH[HM\Q7d]#i7F3XUM[US,;&1RAaTDhC5;HZ5[fGDG=&*<p2N%L2XUgT6g\GERM1\CG]m<rM](%5npiAF3?Vr-rDA3FH!%kG`iM/8CQ&ReeCs4/sq@W6GkK73Nl:%,@3FDg/PnWW1+Z(Fp<?QLc].PFWM2NTl]Sk@:8C?b;u65)r\fVJ^K2CE4RI"9:@HSXD^0%L(/M,^4b!:[1&F&k4&`\Cm<E@A*L3l&RY^0+`OAG9j@(J.]u;[<dKJTB>'Pl+(oK;JqgpuH1_eXfbU(SZF@qH^-"\GB>L#5?!uG2%2SUV9GD^h0=b28Jc:`M13fQ?h,d3t6qQb>D84o[,;:!!u89>B/PdsM&f88.)!gT/;b2[DKhdO)\bMe):Y-ghpakK.<!Mj23%t@"@%h`:76UO-sK[r3FoI:2hV#50-`iph=+qQK:Kcq%bG:gdQ;!g=E-Ik"=2iX#GH18"<]QE9J/T5_Llic?0/7X$);*;A)UbYedlp>1VL%EiYdjUO).:O6Cj=]=V)a[5Z5=]3UPM#TiTU?(sE=PtqDKT$!S:!RrZcQcKEn*K0P"9'u#OHW5l;gOE2^=IsH[DEXbXpVnm];`Cm4%%`9.nrNa+$$Zr!EOA]8@e#N79G*_k$J?Y@pQE0`3%0BW#7\G;C6FV\paikt"DFsrc[+(5=1NPWT&fAD"^d8n`"YqG!fj7orZGRt+%#DE##/:0YP3(uGBmW#]i39=3lI\RBC'Sd]QeZ#%qd%6bnQS.AGppd5=TrSV)Jq5c=I!Ir\6WnWM#O5&3Lcm.*<ObfLUBO(oa/>FU%JMP`@rjFIc)r%PZ^IBD=7aJQ>HN,`Z@"j;Val6]pe@#JB\3rASq=r/*QdlI##QcSI5$,>l(KiQgrQpDCgV6%f]+#b5EEfZ=M(,n+%<82T^C%&En+JS0q]HK]92tmAE3^0=g"HXnK/dP=j-6;Qd=T)mYG\m?[_]mmuGP,;ngn5njLO??d4h,q24cV3%1GSqlDbWj0>gj#,%@q,MN%<l99j&gt?2]Tl0]+a4lW6n)m=N@f]_<_XkY5Jg5&e\i^@BAL[@9gXT!'OAmq+SbMD#?e7Irf@6UU"k11D@Z'-8tnWU9L*P%_jsMIru`q<r2<2_Q,;q<m$QS]kj`@I:a\=_Kth?3'<Mrm#QZK4PkZk;0HhTC+H_]-'=Vg=*$N83fSL[C*m\d[@+P8.J^F)'7oUI8%bg/3nMjdD&qojVi4SE*f69#p4gBEEeLIOhI#fp&!!T"tm0MYG3:`_;QkY;k:?g_C@@gIQDR&&spIm:@CGjM=Qi[f\?Ke%]0@2+7$%I4g!k[;^#.VYd^TAL[E"0-7)%ZK;,Q_Lg]gN:nRGOZch3bN6e$G5QU)TMJ<G4s^*!lGT&I0Yi*H(U9@h1W0BL!DB_V=mdH9cIcJa%pCQ6R%WPi'bnXLkLl`aYSJjGQYig[MSM^d64gCQ8mle/Y*Z-&?"_E=T2E+C[M!!TI>n)ROrbtta@oM7]F\g2\H`i;9E+"ik*;h30%2Frqj]n'=/KXfA&*\7`WHJ%45Ma]BJ.b<c["j!>1[k3.m7L\\jWk]?`E1>9[^L[A3BM9X2L_EI@2Pp-g;`\U)`8KIoBf_b&B,Y<#%bFj\gh7PT-U*V!m)C4?Sh`DF1e?hnWdh:o4>%rK%;'&'L*D,\cHY:'T)O,8<H%E67:^+(KRF[-p!3TVSPVLM@0`=PN/E.,2kX$RU%Sh1>.<HI0f%;6J+bBQ.`;9)rS;3QtQnR`i7J#dM5]h=H^c$%_X8&-GdDZrsi6Z6(t%"fnH,)&Nbh7M-=^BIAYE?uYnESO*n]445g%4sSDb$F*u+i/Fp=iBT^.rm3H.+>EQd@%_WSCS_*\$'s`0p1=nTE=EmJFB(/0goH7?Xq!\Pq"g6U9Z[dT`YZ_=5P529_ZVYL@$s)U%U\2>V!ue<9[?uc;]AmW_`0d[!Ljk2hk&)fld:f*W49@DqNHXQ"[*^HOLeGe=BVAoXp"KU+)X`#tBP^X-i>O9[+3sXsY8C$UHI,Pu%T!.28Hq04/_`Sts?:PbHKnQ9iIk-4joO>EDOiK6h)i$3C!pn!TY$_i(Q4a8B%'4GuPI64dq/NoVN3-WQN0PKf;I`r(N3:p7i3h1(%:?0ULLq^7.?_H:=gR:T/$38%VfS^?\iS]B,Jabo2g8T\_%(ar`:pVp,(V7I&C6EppKa"d[p5apPL8]NYhUrI*/VfCW7/Y`B3d'Ss%7:7O)n)epOp,rH<SdPX3/C&'V*S7\oUr,U]iFdE4IR)ea?;%*7T+(frpfnYS(;k*#g@o$^(ksiTI1K0Pk!JM)%lYFkr.GNsJ[pk1%Y!Qd=kJ<Em-lZb3+S8=bCq)5BF!$^S%E#sRGaI-*2l')7<X.1XiY]8s)r#6P3WA6V)9UARr=V*$Ddn^o8@;/P(2J^r4-ulnZ[SZ3%BU;nQ?%_otQ&@"%d?.a/<(r/<+'e5J$$N9_Zc`Fa;_]4bnk`)M;Ri_)#4ERlZZFAc=7@[>G^Mje0>%BuEk?/h=S1lQS@':9Pt7r3%X8<,8&E70MN"o+u=rVGTj`;D7T7@:@O`*TGhmt'W(.jBr9mk$AY@QQPo@\kIf^e\dpt3X_EkRO`EpN@c*29a/=.^UVXrKBUNd%C>%"s#lR?ii?1i>H`ooON"+#*?DOk_QYe5DLjRK+>0j-]pbd``c1C*VCu'cCkWlTVL1lA*;57,39\aIbB=JjNrTnd'9o=`m(1bc_,?"%ho<j5$dYIJ4Z8-:3j4E]mt^UDY8f`]DK%'=[j0o=8Pgb\a]p.7K,/mDi&i-t'#*&<78sOa@Jcr8e23,L0idIlDL)X"0mQh594%KS%P#"BpmsW<Gle,Tu&c(Jo0b&#=-X983Vr=a1\-1AqT@s),I!@+X?K6Yp]Kc(iaiK\'4tNo;&lT9@Q\T=JYl6DFm,j=5"Yi0/Umu(/%A/(n>P+j.%@718GbqTdW.<AV2U'8!lh,ca]e.6oc9DuAi6,L*_"9sk!Okpp`j7;\D6%!]ADjRBB:3Q6^#ru1pgFuht!co!@3obmn%G^`gK`9&.n0u7'["?.S<_`'%MAn]0UBfbZf">B?(Ra%o('.)i3FE4cE]\Dc0SZf'^#"fY.*%K(;3d'Z23XcOhiSG+9m1HZkf!8cg%c</_\c,^i2<lYk#6#U+*-ln&4U_dQb7HK)GZG6O$XqC7"I\UMN+nGD7_t.64>sYOLe?l3:4n(1dUMu@f3?:N9QB5Sk/"nD$&,[!N%#\r,^#c<YC(q]gZ:'<B"[N#?NP`J\]kOcar(6p'W7[JI%'S&V4)Y"d2KNBP:Z1'Tt+ZU<\'LDrC4P;NES(hNK<i;M(m$YAl/B^b<%W,KnrmQ8IEB?Th/-mCp(9h!FuU--Qen_uL9KmhuC'6Ek2G2.XS^U%gfZPNlk8j*R_n7\2MSaaNo`1A"o;9kXe'&>q$;I#81B^A*D%>ML>g&3p+u\0/OAQlT&'Z$pID4uPW?:ujT[70>lbnupt-L!MkA<i,dLDJ!jbO,*14OrTU5'V6B/dQ7<M@DA>@?9`Bm+3GYZKsjZg%`;eN`N-IR6/0:EmL3Gb7p;$Z<a;iAt7Ka^/OQTZb,Kbce,mHrXcJbu9[%S[!Tc&%-K_Q7LpDQMc4!Kk/N6$D8"\*#(A1SiIZSu>]%`iW\1rL(bqACR$4lti3E7?!&HhB[7U+V=5Y8/^2Hq&]Dq-.M,*&Xc%W1pjM419ar!s(IU(9Ls3L5gF`/Af""dEt>gK>>!P,m)_WN%]]`"+@sL9g%lMR5(/LZ$2_PuF`tX9R^0aFO]i-5Sf7G?;=K/&XU_>L.USb0;O52X/mL!HR":9eSZ/Fi/e"B*N?JX8sL3<2uf?Fl]%AqRZD'u!m*f'Yh3bW)SsU6i5/)?c$nY4HP\3t^%@\KjOVo]!cEq/F6Df/H;c>i8f67.]@;bIGZmdJ7`9o.7o*LZ<XqY)KlQZUY)f%iJ,QI*AJY]5?i*Tq/Fa8EYA1eh!,hA<?jss>jQN&`la).l'FX-Kh:IF\PHmO\O0j[ld.c&nMBK>HAfBpjK)AeKe*8W\9fD?c%"9(%[3m^Zj%K(*p>Cg.Ql/^?g`S=L2EHT!1p5M:oPA.GaV0_i1Qb?`fZOii2\1$H.G/-l>Se@k)g97X=C)B,5tL@ILlR9O%'K^qB_Mg4%Oh".1Y0m)6'EQj^[O0mTn/r^s)@(0#nJ3@Nn_ur3"")]QV2.O@35Yte#p):8cgE2Bq\t9f7^-9YiC<q[[I`-o,d@=%K0pV5P?Af_%@6s1HbG"XO(Q5bh$K?Q?)&T6kL-Ad#/0hP`p$A/;3^Q;NFm@L9?nbhTlLe[C;BL?7Oc]uI-BXDtq-oQ/8-M!5B;>SCDanKg1!n>D%>LruV[;3Y]BZnJ67da]pln]&g_W+hiGMA.A$Kj@+9g0:EY[8`G$Kmo]+3/@C2&4E/A!9ZAMs4<'R0o:::"2/%E!&0G7SJLD2[kDq%lJ&P^Q/PJk07#NIGZR@hc`?Y[M``LJM0+\6)ZUZ>Uop@RJZ_q?&[8OWP9S%P7goX+,t0I>i"WUZkGq>+ou_gLiO'K1KG/iU+K&r0%%\32TllK+\!q](PN*Gl16ULYM?]_g<r41XrW]lcHCVStg4gXf\\_&kjDrph:`QH/sH&Jj^0AVo*>PT<"@]rnT^(lQ[gcet0E8G#e%;7c"O_:"^73u][qmqaRu++/.!Fh2VQN[VK&h,`En&&n%EJ5lPR8?\lD6-4"'+W5I:WCe`i%M2FAgI38F_[\<LXp-%t$-f^/?FC$5%hYYMt(4.%#2q\YCRc_'tM@!\O5/-isA2cLfLidWRofFS>cBt4&0n(2G1[K#J_t)*e__UT4(DhNkfmS5Qp!6f<L0ZqnQgjVo(hrg0%ITu<\]F:BGWN4?285BIY#n9sn*e0r*^>dW=r\[be6.?qc_Wq4<RdYJfC=9*Q_!j'Ifta`f2SIRRfNDrn_J\+qa8Ra##.DXGbdPF`%Ca<KQdDS)a?&4r&h.-*k:/l%mgrHrqm^X84-94<VQct_Y]LgCe66tm<&VmO0j\t(Qal2s2P[`E-i\E2TmsQ/F&ii0Q=>X;Abc#On%H.`JU0S:tL,q@oWJM<7?H+u3&B$([J4H\YY`liNgiYj"RZ`BGo0pui=575*)$0,[Iq;p$6gmKp@2P"3jMqu?4\SO=A>e4#b:C`Xa%(VF'7a_\O2D)p9c]!8!\Z*W]mS.?]5*]';2AL,W-3qq:!6oLTC/tJVh))%K)cYlQP4IaVLQ]A8_:+Vlp)MYD"3k!ddEnPP`\TCRd%Al@<(I_CZ7ee?<*o3W6'F>f[38I9s>a^ilroq1]p`a`T/q;p%Y>=tZ$e+nPe$jeIGRkEh1n!MdM?;Md7PN#]S9fOE=@V!s,kL_cI%FFLcBAG'f&flV\RFT+5\NK[*"#@K5uADCu^JLu8W,Ud;9oP?QQgH"4UODO9"3knq2LjMQ\aJSRpTo_(A8'IhDS',j:iq\jjm"h'Y%'>3m"C,VViK=kjN&!]lP-7Qk6%*;%_4+KLFY((WT*o.Oh-1+0-;].5)$ZYO<pCfF:7J97-=6FL-9_uK7f_6^\hH(LPB<Ap.kM?G*%.\B?3E5Q/S7%KF?gtW2C_ihrSr]"!0`D,e@]Ri%$;`KA)OVWK1Pd:pqK""Vd7hUcInG&oRb&htuS+9n3'.R'rm#G`8+5D>[-O_oW%20ZktH#I-sK7E?83B$GW`6`;f@`L+@]&o$6Q`uD9@](XY?#qs[ro?q[\au=(i.'/1E+(\tC[Rp8RL%QC0[qt(Cp"2[kg$eb'Re53%giMF8qdW.YeBLWHm@IZShLN*X,I8d1e*-5dO0]@h8ht/:H=lM3]"jkl6gV5#M0,L='m[)Edpm%+me^k[(d9GZm\X3V^Pa#?Y"`Fm%GGHGN`(GW<QVW9GCjOBr;$;ZOL2XGY[GJ6<o'Q*W7SFAOfF:$_DC>W=em@E>]:fe?3'4^hpQoC72j)>)@IKTE1?O9HG"sWD6DqJ(%D&F!^n0Y0/mR`qe7?d)0`/,hlSpNCji-Q-_>E_)_&4$'DG<YhfEAC9#[;hG!qkf4cSU2/-=XcCp4skpr\]QH3HM!;W2u;2-hX%-H%A>XUt4n^m;+a,=;!d5-H'f!W9L?R#VN()a))uR5E5$mA]gdHnd4,*a\\@:T%PY%AX5d$:Y1ZFt]l-XJ*_f1u9km$TJ$r(:M3g!j5%p:bkj?;5#KH>^534hl$))t#,?i*eU-)t(e97IV=A_[OH@)t&I)HlOl5aQKG5nV?)=%<l=;PW+7K*I:Xjn1YjQL-'GQ:[gs7&\u'4%'*1&I7I@[CR94eV^:btu*ddZ"a35FBI@F>JmDG"Z(4[!8?]0>*H?eT4i<8`"&X;YWH`f&m#TkN.(X?.N'@W6LRqkL=D^X/uL$__W%5/2MWIVE1,Y0;5KPC</t`>XIi6R=J_7cE,?@8DHoAF(QgIY6V%I.6f:6S14t-uUqTJ7ES[2@!W07V-Pod`o$tN2,EBq3<mYe!S"8%R%Cp@o.7m:>`S-pn4?;5[lW.uoJnN9Vb.D4(^Ag:=3Q]>c]57CmX:R0NpCQ?M@I&8iodi.%Y$<8n2XRZPI^+Dh39jl*7nXX(V#!Z%8.P\.b&JHSL(PgG"!e>I5m0SMi4;Ds!J52K0VL(I9OO_>AA%<2?^/:c@Ni4)?(.qbSX25NcS*l(08g&2[XCJ_qedH)2.^Z8W^J0T%*7tud`kK(5n;]EQ7&6u5\DHl.m>2[[Eo4dC;S9d;jMM:L8\o+ch;=P63=r/hOVWO(s,?1[o.9J]HEZaiXbYhf_l66u%7[olI<XpA%MD[W1LMccCq[mo\>:(UQm6hK1L[33QZX%"C[HbkSbfk"^2Zlt,18-YP<P=fMG_[b]nG_-5!)d;fXW<[5K(@ll6]c33(p<Dg^$+m+%qCVcI[Gsl]oHHHi+=6n;\GYc%"X>Uc0.ZHsSUm\3r#8AHr*<FNH0Q!%%G"L:;@JB0bJHk87Qn\pQ$0q/9TuF*\!hNm!ai,#R6$6L%mZVTF=NlbgLoG^?]c'k-]59=C/S=>-WD*I,&teM4@e5q@gfbFd;UK\qRrEC@gsi4Xn9`:UD4#m)DS3)O^0+>fYK,E))8W6BL^e%f%ZdN<!XbrU5(9p@cN]]$mif[B]T&-EI]9p4;QtI!teA+8MiCUmhS?qUVp1]5Cj<#Zh@D&s7G%jfgHu>DBW2oL,`e%E#Q,en>;stI;%hMndJ(m.l8W1A^Xqrr8a@OmD0q\u2:-4jL4.Q_hQaRQO/%ZCdUO-M)tAGoKIOlaqGLgjq3G%)FXRu"nJ;8!`08M7u(MW8LknLh&o%47";7%!6'45'"%dHn[N.c4:5*+a2F5JUhKH0[;oLa[>K`MY8iFlGAn<NP<(_Fs>U6fI:I\B107-!Mf!>hqn%\WD_K2b\rQ3a^h<>%Cr&*o*!Bo`Kq4/@_]!_2'td[67O"KB*CUtHR[Hu%VgD,MYO[XB$5e3U'`fW91(sjCr*JDS\t"^Y!&f).nYhEe=K`\P=B$p!0H?!Q%\K$W>&M'282=a"Z#isW'\o=;u44K79_Yc/U(1>o;5hDqS3X]ng#6,Z.QSgsK(1>5+F1ca<X=V/s3Im5NYQo^rl:*qoh,(A_!9<2A%qOc4U2[_;l5Q0`epfW,eEr]_Fa<=]:EH;+)<o:d#!4N4kK<=]Nb").R\e5PQJP5e_,rm/b/)I+M;(#47k#+C;@<V\09DL^E-2g2t%ncdg04Q/s/L5Ed,IOUo`/@Bui;Ei\`p5`M%kA)Ncjc^9c4(E$"c\<A+?GGIEL)T_k5>aiYhWd&jfhe8erPCKH7V"[&^=P$FC%LBR%;qd_bfhesAontpOC*NEKL#;/S7"457\I^qbM'LjBk@_"\\,(Af0q5tU@D?%F7`j^0I^`d*-J*52qM!hl2tm38oNo<&ig+TQoaB*W%_cS7)Y@%'RrHLD'U[Rl6RpS24]md-S0T\$L/'0$klfTP]q+Ys>p=M(nqM"ZS:fc;'dbX/iIPKj[Z0q8mTC(Y+Jr[Fo0E-BIA*:K0%hWd&JI=+CXH2dR.NACVV.$!^*?*P=-?GC/j3Ji+]_UDFS"Fg8qrPCK.Lc62CA)-B/^e34\I\H]aXOKYolPG#NT7=l-nFud5RtFR@%Bp2-WUiYY9nfI^Ioc&5D#MeV]D?fmma#ClKIQgSoU3_=aHi:gT7,5g!qd.&,>Q$n>pkHt=W/'3oL\9:&me$t&eM!%+Af(a0lSi?T%g;L:u`EW<#lER:7rPl1`j50)<k<?WMn+@('eShtppdQ8fhY[(;^":R>`I#h$IqHjmp\O[hdtTn\-e>t[i=7_/f6RMmqM!hl(ZE'I%:PKCnePE]cGcZ8jL,u_VjEphfl%kr(XO6Ls)^_!gH6;&>ameq'^N'!QZ$ZEN_V'#u%Ge!=p:Yopc;#J]?GH!>QMXF[dI6c"9-85&%/Y?0^UjN'Wh0-)FGl2pe_VKD(W#YJ:5<k1Ig^-!Z]m_^7at`AXMm[nNm!J[8$q&XKIN6Oup\OE?otAmO3,O,GHi:ep@M;VaDTmJ+%_H1OVNfA1bT:7HOE,oJ.`cJ=jpu4WYks2NBoaAObO.=r\rk3c>,l`O"Z6hd5=XcA'al+jkEZdBTQZ3Kih:V]H3)L9S"g;@?NVA)"%,l/c=HK9qP`/.o>XEOf<92.=%C>M+3]k#k-A#.n"h;FiOjRP_MHJPaPqb3\tAM:H9Il&D3DSAeB"nJWj1PZp]=_YU8b.ZVT1q!4k%=$[gA52)p$$hMR!RCU116/),ob"r'8(6$a1[AK[:03^6`l>LtAnG)0?s7s7>2ta9GAfXoiZMW<m8jCtZ?4(=PQ^bDS6f\%7U4/p<%>g:mXB<LhDXn68kibUiAr`X$=h6cL;o<"Wto-`AMC)KO@l_D_8)0LD_8AF'NmUgo4Vsh%e6[],^/^E_<\@af98nAg2[Sk8gcdh$D%3k$D8$Mt"+o)?'FD&]foh<p1ahsFRuBY<u7T8_Bnrd'(2;ZSNef5o-e=nTS%@VKb1Eo#S>)_RVdVu9\F?.l'TG6cH;rp@&pC@]$T%qZZDOr-a^V$i-oW4[3OeG+e!kB=hGl-5G7_chZj2rFGcimUB\'e]je:R8pVThs"`)<J+Q)4dI(VqH`B"8$H@fY_@-2;u+ST79Z.Z%f21-lgMO0=4MqC]mA/r6<bX[aba$'DQ:S.REFQgV(Oo)%Q21s(5-t$oI<K*?'l-`P\c1=><j#M.Xk;*0-fsYGoa.n*[B\Q#\p6iB%o/fG,'u@HW@:71\Re-+0QO1cm[ng5/#H9=n<W9UYd*(lb?U$30YASOA)f"e41CHdd9>mgecu6PKF-:SBH.\&Egh/fk:=%4jDt6#N%*@%/C/bILs^j3[ciTta7ch/U^'?t"\?1bIjAZo*SQ*PFD+g=&V@VI:i>FFC%h3F>h5+`L&7d,:jHt;uPr5#-&i*c)75?J[C4IL?k%+=BA:'L)^OZLDP>n,rIi7gieZjnpX0I'b._ps<dR5o/?r..>Ar8MDI7a?.Q[(!lbI13!nHgQr8O"0nfY[u65\:6ook<ZpXHM)+R2%GF?SPmfHKZ-O3dZ"`K&a5L1V:Z1f`CNuIr/;912T$gQjXP#oH$A7i+bg3L0>\.9.:U:a*\hB$;a(:@PLenY.4o3V>O.`[7?2/NZV%`l?-e2n"ra7+!fiHi.U]p+/-bfR]NN#/OV<%Tqb3IAN=GS6^OlI[^/)r'e>B%C:Vf'^cd/.aOO[I3nK.dpW,pTfOBXm,UnBZN0.d%f7PA5%]W'UZeq_JN!o^mKOi05lI=?>reB'T^-KCImaN8EDJk`[hmHbf9qAQ(qZsum%TShbp]E'SQcOEBg6PSH>''HNJt8M]hl8KO%FkS-K<J=BCM@a$1Z3MHi)_-%mDp,2mH!,^sGV9iRQuTT?b#R&*=$Bf/Q^+tap1GL^GPgNeqQ]*kf!RW5*3=upftYi6KckSbgu^/J%_X/q<;M"98LPj9:fsOr%oJk>;GMbL,dX/QLZ*h#cUZM5gUhPn#i3j/.4kc&LZQZ^;b2[Jg^3j3Ggacp(>r\:gfI<&]m"M(?oNjI=%7trY^WsnZHOOC%alfMuFN3L1D',l7*;qYDcl=?4Q^,2JLQ/B<)Coef=VMUesAK58M"^2*X2^9qm_9\B8Ual@[J-'!8^&!99\<<L9%MetK,E0J6]->u+[+hk1Eo.67TGU-u.Dd=g_OO,P*YWiYF?@V#^WV+,n*n#)pm4WaaR-me62n#rb!,q-2.BAHaS><pf"1S$`e0^OY%PY-:<D$a3'QFYL/Oj5+[G'eXg[I7c@pFl/a!La&*LneO5I_2ofk3!?Q0X#X4l/Klf^.oEtp6bn"M0nO>D%7?#kW\8r_1G#pYo7;l%_9Kqkhah==md/H_>BUB<$E5>JE^Y@gerEd/934p$WTDpj=_dJKC)3D4Vj?r>#(4ou98>GfWD'e5PZg\mb^il$3C6F<(So+&(Lc="%k67(l.R2]n>_Tj\>NP-Cq.m&(PC(uoRQJ.+?`a6p0C@U8Hhm9jq'e.6.TnCj5E<jOqb4Jc]W2>AD%*5Z7V0#dnD4"Y[<K3kQ05!7%l2:(lg-P_4Us5.\:O?a,o'3%mk=SW(h'rHGf'fK@l(F9tN]5ch:0c#@V>&ZgoSQg']qU7r4aWWUB&o$X\%2k)\`WS[5`/r0G`J;.%5`^%ICr'4X-59(?),$-=V,lRMAEtt4Y*=&,AI)=HbRaDDQs%13greCC_Ue"ikAr)!p<kP,YI@hJ0\p0JRd[+GIOtLHASgDtH(d>3%\KZg?+Su][f\HA$#A$l+Kr`tM/3U[eE43/PXu?\poCJmASWef@oom_`9=s)@?DZ/9$e1Zo8e%S@ch_0Oc=ODSr:a;V*Qi5pq1JLV%\T1<4R#U"VPfNG<Wo6L3LM=?#iUI'\he!M9l#@WU\[jLGcHXn3jh].Td1m-iUC2.lCT4/&c2jlk")s\&d=^O5.*qM7;J$;Ng4dCA%C=ud>8u,CR7M@6&f'*:L/OB&(+DSpXd187i4[U7_I]U@LNgdMYUY`c>?f.tJpFfG+(ZY9Hp0\tF_ZViACu*+Vm0RWKgua3]_/8_n%08YrFI.Yj>q_#nUA=kb)ATfpu:')M_[)F&$8B/YLlS4VbZBU*8`J:)'Z->LYULfZmCn0Ws7XOTON6UWrRYr_!/8?e'/'O!/3O$a1%Z^C4&)H4Z&]H;$p%AR!\1Znnd*+t;7N8PM1Krh'mfBr8[^XSCSno(ErQ."fh^6`2AYKS.SYQ'Cu\!NklpP[=3\bl/JX>aLYAkKhg%PN/cM[m*f93E"-Qp9_P2Z"M?s`Q,[VS^lVYNMT%SOO^pDb1u-r[O48Y%eIj%A$N=!3l+Rr_p7UjYIrMtqoiDP?$BB9G4uBP54rXh%m$o)\X4=asq5uXK8PdeJqB4UC/:rSK+O=0HFgX7_k*[)t8,PJ7%j:!NT,t3kJ``:IF/!kHcR^"9l*XF3B%O2JSc%8mPda]f^<Y`k%0GpeDLkrF0''ZY1`u+Xmmo>0$GE4M#'C4n2c+S1C=FS<Pp1.g@Te*%26/=F?HIS7;fFQr.'C"KSK]2Ui5O""Lo]?IN.nN8/b^:Lk%g$p55pR>M<!?D(:fJ.nE3dOiCLOANpJ[U$iS^\bjKTAIh-lcmu#lMii%s-k&jNpA[LTuOsed?)bQp/AOf@H8bCM3q*5!Te-q8$+7%^U]uod4_h>]"'jl5GcNFCqI&PR][OV5;L!l<rgS_+,)eZ]BW8&ET`\Y0IP;gFJi4lI*K&?8m-5<(I#6Q-J&4Qq'Bcf,Ptjn=Zo/o%ObW,EG_.XPGtF21`ZV+L82%H<X_(+7?s*'%q_P((de<D2(Xaeu%rO@u?Xi^#3$o>G)&[ID*F?Ytkm<*\!\mV83I[T]1q41_Tn_0T%bmi$0A&t$EF$jK^Dg788a+bF;,7^jf)=neR,7Z?3J*^4k5N^gOMI0U<SLG,u4%_*]c#9EoRp%,GoN^.'T6%!.cTdI%_)m6kP>qnV%*N(YGmhRIQPbB/8P$6_KDk5hD,X[(:W^GY/KVRp``_@X?kr?Y\&X%shQ1-atQ316m*7[t.d79d!SAMJgW:rYhJWk(_^jd4N'KHm(%a;F9b@=Q[r*]ZDBPf/2%*b<GiDE0GeHOY0FrkTGQO8F%W(EZ"3C49g&pfOTGX^#[W2qTFUfMfOsTWdA<WK;P4dGoUl^=Z!4BAuZA%cCVhj[>&Zq/6FlsXP+c4B9hZFrSjaN=:a##1n0-^3P:,Cs1Z4^Qp$4Q/h;%ukg1Zrk1RU=ro3Lp;bShNJ#b]0d'qOO&s!]XT^eh;%m,uF[QENE#2&@b<B(\rYd>bma3/a&.CAj:^UoOE)rRAH#UVT1En[R?DI[GVjj+Rc\5M5M9gL5R,7lqc945=E=O*3WijnWON*d@KP%COF$A]JK9]ac=Et%XUbGd>l9'%MAJmFZ_PJqjWM8rDUu_Gd;sZn(ia^gVU?<645P$;3F$#CL?deH^DH1GZpkdB-Q(jNT[gjp%*3`%)9-U$+t>^=Y3fRX1T=9bGh'`:b])h=O7@S<5eNo++F[ZnIKUU3p.j9S>(FdolaPd,42#alksN/9>;7*[X1'Tc&F/\s"6,i$TSZ3q%-[>5%g$r9lSl7E%"V];ok2l!.%gh:sNCmAXrE5ei?W2len^lFs=rVFBT[!7T,CYKq_UeBH'oN6AJG7ok[%5s"'(-0bV0P+D=23'd%2uTs8^"U+]!^`gC_6*U?UNrbEDGok,R;Aei(2iSp;>E6P3ck!;=/WEBf\,`E9%c,_fP_+YV?e][hYeuE=85rHHeP15iB+co8ng(.%CoIILdVGfu`WRmV0EJ-J&l.f4=6'o.P^;M_"V2(N&=1l(qd[nScS\WoJP:#bTPg=GcVkTY2ih5q=R#A3:_[b=m#jmd^d2m%.f4qD%5%h^W@s7.`V+2$:G]DX4`(iTC6>R]m;'m^+Z7#rra+ls$0LtacTj%7O(%1./N"&+870Fe=!:3dE+NRPL_gq4X^mBDX`rkRm\0D('%+LW)AVa4EXRM/,1Uh5]eW-sCXk#e]sJC_i&8-@9;F6\__PoE5l_PIlb//#n6.$jt04*5;bj)nlbQQq%mV/eC%1G?nI#U6E>b[[V_%*")rodbk;f87caaDQ\ApT_AbKKsVYL+IAi/p:MW8W%FcqE257B%r>d<Ys/5?bGDRE3e-8#`jOUp161iqQ&>^Ap%Hd30;a\^Zml_V%o7;jSJd@IC\8n/QASe^cT8BWE*#T[u+ir;,bn+H&`+B.oQnJn:`k59hR#t<gV2%uAK@5*e"'G&+5%-p@bD?Bm.c\t8SWO^tke;!S%7&a]0iA2^6oYuJ=,DRd%O4k4YjFpHDAF+?es3u,>2<,K)12hE"jRUNNR<k.]B9oiEdUmc4k8ej4j'r0QQSckr&s;*XSqrWK5N0tT%H2?o(*ASRXi8+TqnU9g14PlVtqK$3hXMUN>qXZtI+PnbQqCJ[]=5kYhO(,iUL7*$&@/;$-8fk)f$BKkaZ&RbKo0CNEgXsb2&(I#t%O$%dIaYk>_bO+s+Vc;a5G&^)u+CO'_c%7o.+SG5S1YQ6,s7sV_7rTTpU:dgX#4BAX8HVDQ3)4jIrE+`O_s%g(hqhth(#":5LM`43%oX;CBcIZb?7oJEWc!BP;;jk@>HATJTrM+/W3%YdrJgK4_*oF7-I;g??Ypu0dX]6DV3%Hhl*t.n.\+bO'rbh#VabM*.gm%m%S-`.k%1-:aY+f7(WSC<+5:/+%CT?Pfo+7H:lr;#eTUO6-)JaBcP)9E`A\l9`#T=.k]l''8Cpd,W4=kY]X%du9;5c&R+"AeDGa7>@r&a\,i%%"+973@+GY:@`/;2jJmA#`/':[t0"b;2EP:'k%&INhuF)8c5'>":Vc)nGLZq<Qoki?:nQ\F>/+@d<T2u+YLelcdUu%47fhe.UC:M%$JU\Lk35aPUd<92Bo@%kg4oToFc`W0R:BXj,Pnp`"ulEVk2-lXhVj4oAXX,eVj3ULgL;@4>-p&M9)7u!EdAJbeTsLiN=hcKIFG"4%b&`:cVWuYP2ImS+'r6?+5fuDLJ=;674O"2Gs*tI#0$Y+Xl&TciX".!D>bc%GAc@IaRB:$?'a#b(LBc?F9gl1WQrK%hSTO>7K:<rt%p\qPmi+4T)JD>1,-Z;mCkeR-c:@KK&>t<TTB1&CjM/7^G6?B/,EG(M/3+igY(2HZS1"%3q)<gKUHpe.tN[5@qD-tRmB]OO\0B+O'%P5b6MJO2B>;On6Lj#NQ3\U?#;eKcV0P!BMt$[h[Imu<!7=[pif/MieVqeaora5+a*UQo(VX<qu`?!4mXe_6:+]m`iYDnjeNqu*\,%qT5"5/q73_h6llQrN0A+-h2muqMQf@0ZXAc"*WZ)*No>@6jJt5mHq*Jl*L%tl!:mVnEq(5W&s<)NtN=,M]6#=,[Y6LZge@V!j\fE%hj&9(#V)[:V*bDu7Gm^'KW+7.nU7mTr).6uf;_d``u!S"\$>q$?g8WuD=-)k%;TVD3a6=UBijEa_jsc<X5%#\f(83G3;aORUXV<d%6TcFHPmTAVM5(uroa4l+9$NU%*6E7gAUCX'ieZr[5S#c,4OSqUkq9pMXT./tq"L0YGR-Y,Z'7?',*3IPHuoQeloqE,[-7`aM1Y0$%@/*qsQQ2d'4ZUfM!uqY,5;VNdV+f0M+@cX+goJ!'o.QK!/f#JF!'>dO-Gf)#_jD6p781%K9`!qmOpr]8gPIb]YuR;:7+^^$B$WNG%X_hT6D9^Ta9"VM('Kah'7cp"e,+:U<k@lDP[oH-^TKs-mf4/hF"-&tg?KTl@'tMp88U`hTc(K"L17c-cT9Ke3=$_9->#j7bRYF,T%Y5LCc-HA$[d:)8%9ocsbFYC"<:U8@EYKGY__$2uqTr&002a!qdB6"L$bMc6c)%5=kXJ7L"^J29j_koQi6&s?5:;uGSA3&'s.OtBE%8`#cBk0^Z<beDVtK-fAfDL_\I7Z[*Ql-]B0Q%dH%Wd2!7F]`oL9\\Q`<e2VLdFFfi3roCXOCCjDr4k"t$Y"!b[]O6)lb^uu<j'26%>-rEhN?)lbfu1ohi,g%4@"$MW\:D%^0ZilE;\C;l.`7`)E-:HML<B!t$D*B81fT2g;omDEE/)N>Ar:XPV;E^nU;]35Ei.H%FreE,%j]R%R/MH/4WFC=60>Lk=f'o=`,D'$4PW]!^M_gi6@B"8'^/`/610cjt[B[9eQ5\KcSu'H`<2JSj7bNph;gQ^ki9'/IcN,lbq)1oe%rlK<sG:d6Lq-eDKSR&pq;9,#hi$8bPjrl@0K0ur?m'6;d@M*8LossPN4,jB&)Dn#F%AIWro[Ksb`ED/O'r=F5_M.?]JRuR7ei:j#%E5ctCZbf-IIf7j-r)U>GAXO\C;*kh-;..7h=++XR^alUI$,sO1'3j]he;,XU>nb!TU;qcj$Sqht2N'e:ELCaZe/a"K='R3sG=<hp%A#1uD%U8AGbR7[o/$qL7'FGthk\U&4&]@"@)R-(!$Y"+S&`Ei-=YrSf)m("$6a>'X<+`Gr2C%CY!H0M-Xr1+GU%/3QUg7TniBasR%/7nb!2We,sdCln@U3^c:j"-1j@@!2\!3@\j[pps@#D*5S5m2]KV-D*^k`)hF&5-?'o$BYBIV:O5TuMft!*RrP)T%>mZ*C)Y!62B%%\9_*.qaD%9EXPXeR?kF16>KW9'c4en*!,SFPp9eLV(ijO$PJO9=d60F1!RZLO?a]ia!*ns\f"C*/(lhKY\&ipF`L*IN5Zh-3Am7[%*RsuPLW)[`U:[,"/eH18>";^.B&m>L6>6]@.M!!6N9mAb4/PCoJoQuFO/0:MiO"V),@`YO3Fl>W&tNCN5NG8BGPc]X\-7n>=FOFV%UX%J2]g]W`S$-DbH)J*(cZ*De9TQk_ln8uI:>NRQ_C&[8Z$=Rd*55ne+';']?[cB+r^e=?aR^]B++&-N`iD/,[e>=5*oJ8-D1-@6%<$]t7#,1OZR-'1*mYck%/mZWtOO\bf<<TI'pfN"^r*8EUjdFq#IP>Pl]!)E<r;>1lnbcMM2"@uO,Ot]amEUSW%WLM;7Rn(of@r"i%TGrq_ZrVX(8orX_MknL27g;OK?02po%*@s'AQcT*BG:Ki.:<1/?@LWh`W[(CgYKQe:3!BenfT+Gad%gi_AREWNNiJ;[AA3VC*54H%h=6EY-qd`c;9g8X,jt$E:&!3S03>d*`hdjC2]li,FFiuM4N6<0pJ0f7`=XaLo3;*4NpjYf'%[_>em[oPBB^&gh(B"K^kkQBrRSV\%kdTIH-ZXf(3E(@'hinWl!9j(5&EW_*$R";;n`Ea2\TpH#pJmf7cRA.HbRKoI4#*&sZ<I.C+)&OEX\N),Y#@b4aWk>%QJKpN3T)^\%=eSjE^UlW'o9^btHrdf-k\:/e$Zu6I<9;;nO".8WopthTF'QA&XH]/PDu$_tLUm!Ao%#\ae&.L7r)CCB0o6QC"4'aH+*h<CW!8ic%l5ZoeJJ1ubcVI92-[:5Xi;'@Vm*AI(D?&K4M,f4Q=-fK%XdZa^Qq4,Paa(T"gOT_.F.rT\BH:(PY'1P"P5J*Bs+=+r:<JHZ<-0/Z%d%U*i2)10X-KRql!#\PX\U:knC:s3Ym8gXlGB*kED@R10G>$&C,cU["lE2Js&N.umWf8'2?qp20;>?ZCP'Q]Wc$pA@kg+688s94&%,pZ(gHMBGqZ%p'k5t1fFb#7daH2f9=C[g=d6FN/\C!(a"PHCoqC3K/0TrN-62&4dn4)i>a`QfBj%;#HC?Inb"GE@&Fr#fN_#q9Xm%>#NM3L5edZ:FM#S),V_l<D>@DjF=i2Rjt.&[V_-J<-F@",X#q4Z:W1i`Ip!Lam,ati\F4_/6le"AQ-$7R@TTW-rG)D6'2EY<2M,Z%"$Eqa".*.)K5+q.6cN]+:,1rN!b,h>VCN@5Bk:;f^c6FoE^is4LfF;TTi2HDB%GC)i/D-f":$Qc%3:d<":)T?BbJEokme2/dIFiW%9\Z9,=\4ou4)Bh`"4=2R2UJ0j)Jo_d9pMDCQ>&,d$S9u\E1+Z^AS"^hJB=gc3Luj8L+3N3@6A/P\L:qe.jFYS\5'CDV[5FFT1RmE%$dp[Ql1^r<.#SX;/?0E8IY*A'if)tHT)kSk914pIR%l0an,"u2f8EEC#P7<jjrA)nL#5/le?#An$>PK]2'lPJ5ZB!T[d'+![['o%%ai#Ko@@Obp2g+\_,cbPJ/HKFK-!R;V%3&SN;(X&nWWci3O-"1i8rsafpcVr\An=uMOocmc-4JE?nL7U41+eBE;MF19Qf1)&3Kc6V%b*,0hBZV3*P(CW*=:9kc,m$C8<Pkb)5_gE7\g\7<UCjQ-,2p1&BV&$iRD9tc7WEeW3uLnckF?GH0AbP9-7VP]9(%.n22_crAX^&+%L*9/[*rmIm.1mPgK%5IE2.TEmKW'W_b7rd>E%P4Z2;BIQ=:BB[D`BC;`7QEQ7j0$92&$ij"]PtI32Hs:T<O)L/u((Wm-[q[nqPn8%8@n5lL#*ID+mKIuF9QbWN&4*<M:/]0Weto)!hjU/&`iut_n!^J$+sd_EJAP/H)Go!%Q\ak&rkS-0Uk*!81<NpW"Q6pidqJ7CV6gC%H\=/WHfC2#!@F0B1nkCM_lPV(7E+_bkc69sAI%WY#u/dr0$ko`^BjM3VAVoX6]iN8@fViuW9Z0dP"eEPA/VlWJ&*F!`B]hC=Tjtc%,$@q\(t^mOV99&qO_%g<9&Mj#Z`RnM/JEefPSh1o.+)j'-@gQ_mB`1-l:?7MLj,#Xg/s";`GcVa(3t`Q+Zg$j((<VdW/e9IeU^Sc%L4Mi/)Lj6U,qDCJC1(CVRT80ce1#8c-r!"l.`Bbu`EJ)PL7s_B9f$dGWmY=YR]9-?P@]U#dNf38n]:fs?n)b$<1?^@=q=e5-rXM1%RCFotM],URaB#c)64&W8dUGr$EJ\.-KM:,U<(_`p=TkG#fS">l+LIGF'%1W$/0UR`g57')6>B]$/B8`^&mM[KcP8l,)2Cq=c@2cg%\fBCLUr64X;_2qb;^fM;U]<qSYN^dt:<hLmX]$u(;&[m7WgXV-7ljAR/[9T.KWp0R4g0PJB-NbbSgGbPMPk+jgXb&)aKUt!I&J!+%L"&GJ-='4K[K]'ud4TPPG0hntoG0<P;\iR\`WQsRM7<d5BJQJ:[R,oZ-C>2Q9LEt+%,Nq)YFuk0fn!6pkFi"UY+b)j\jEa$i\!SB%@4;%Z9/g!<O>7JP1pRim-K%=0;/J1`%#noZG<*nj789D?JUrdH>/cT0L7u\_"cJT^P!@?GKbD;?HCS/;:dRU>Rp:iEAlVF0@%g!;%/]W#J$`GN4'N$AW!(/>,!?&?o"d5h7.?MerUsh:nPG0h.9LMTi84^j$]h'@j(L(n6Y>@]$+@_W6UCj=Q!p*16dlamonpj*eCuY3m%Aoan2b;n[s>J-NI$s;*pC;<.R[`<V1L8^K>,KG>bdV'FpUC1!e$tj=D6&CVdSn#LF8pJDI127(%OJo90i8YTL5S^[g"j3fYlKVMe%^dA&oMQVfDO@7`U/ODd;/6R&S"383#;2)_,*?nD,98*!FAX!QB''BtL-h*<u`OX8C(OF*WJ"d\$@i9m,Fin/Dm?h8_[3_k(C0RSe%[aL0B-BJYZ6?\\H$s*#7AS5ktE[sq`bYd*X?#1(.9%te9PW!tlZ<[gk7`&u/r^@;te.U:2H9`?LfhNd%arY44W,)XL2q7>/2S0F\%Kp<?HG+j_[kMSF)E_r06Z_K;1@brQBfkkJ*3(>tZOjP_G'TI;*i%,YG^d^CFH+$1X@<3ERBZq#s7Q\OA80!fE6@)M68-q$);2JjV%j?77bgI>5+AND$?eS[_g:F.e'[bA\%C?7HEe7o4BP"qnjCpa?tSbg1HC'TVAK,W"eC^6tObn-`aBJ"4!S]M*2A;IZW0NU'o*/1M<%<+="og8@t5.\f07ZeD,-%@R&%QqGjRflC<a:75V"_i"km[YWHD^qk2:XEJQWC#bT.NWm<Epk[<-9i6^e-.]S#\jA7,D2<]l\l]9D%a]=+H#UQK[&V`***S@D3FDf&E4";sY)LESR]2R^2VGKZSFpAR7fc>0pamK_Z9PB3#ArQ?43>T4ToX#6_BiA6+=R8##-BU@5@L)U)%fG#:s!-Jj/_=!7sa']u+l(CXS6"UlbG08h0rjZ?fPV0-i-uGY/Y3q>Y-C>2e<OO1jkN%&%<Om4d:rY>pWZ[ctpFDnT20"H_eef0&%'.G1T@1b4^Y*K1l<)'+<X)*DTK//Y7mqPnDDh5j\UlpG],q`&*M4##(Gn$R$M3ic_1mH?PVZp0)/tb,+7LTasRV<Tq14nk)>ROOU%2MWPT!dKQ<g*V6/QY@#?_2r2[g3t@er0RIQ,BYQ^An7pA&GRENU[^6Q#%O5I\(P^m#Z#Q%fq,:2.P&FrP"^^si%K>,7^DN<Hb^i#%(DSBT@CT)AQ+0t_K\DF_bq_g16^M3I#\A)fVnG[G;.NLmR(ip<8gr%pKG"Vc(B!1*W@AO+c%'b`X"Duh`\#bATnMnAWEWN,`VBo:%Ck.1b?`!N3gEN.SMFY-4b$\/e[<+j2JP]:rga.iPR.NOJ7XH.ING6l+(E=o0,13n#%Q.(1MFpj/L6NOX-!Oj.!@YDd)@<*0'UMBJ%(1J-sPoiF@b1A?3H^ZLJ3hY'GCQ`O226Nr+Af`gP&RR,\$nD"M`l@I#H5ZOsW['R$0\ie39Z#VUcPGdf>6t0p$(BINrfr?tNbm@d%$HHHiPTUCOEf6uO>5^c*p%ee^e2%g.EW8n/ML(ZljjZ=&g;cnn'uugQ<NLnCAQ',*6:-=IQ8CNa1d7;'6`GYP9hc9Mk9WIlKJL[R%%Z,7aitM40WT%1GPk1L:p)im->u.E6$=ttMY]16TZtpXi_%s\@K5Zog]`lQ#i_32s%$RR:JUf&r<Pf^#bG`l;5ba:4J<.='!`dal%F9ndnW2j:)[gH\'L;[jNGq`KB/2V)e_i;oM[P=]%6KWtQMfeP'Tli[>jT1.Tq8De0ggifmQ?0W_[s7e1qPnen'Y19UKOtX'ZQ]c/%$Q:+=C<3cj5j?Xi-JfSI@eYEh.6:-d&C-E"VNDJT\18hiL`&T]5ehlA6=l=:fE3Fs"DT#:"2K"%PfNjLU@6JbjK>Hnmf>r`o&Ndi%q0Ah\A)t'-K+4(gB)l/8QlqbC:mnD"n/fr8VA.Rhd.@J7/o):W.6?kZAI!iM3FICW"@1BLga4l"BTuXrKLq;JZASe+N/`.@QOsE?%&g\'T!Pu&kO_/#:$RM5BRMd"N*X6>EM:mhYOtH6nD4p#WM5AA+=<_^HQ[p/qO]hmL!ZK"#Yi-(D$'r5YBnA+j;@!pjh7UkBFhFM0%aHlu]@h8Yeh@cPX;,irQI5O[J#fS,[@o:P_Puo0j:a4Y%\KHJM6R1[.WXeG50_o\B9f0?>h^Y_$_Jee8n<,^MX-H@_(2Ff'$PseY%9Iu%MOcTU&hZN2_+I&(G'e2LjYY+,f$j'"_S[K8]g.Uf!&rnil+OKT\mg8b)b9Sq621roAM'p3`RL+Sd+SG4>+\Wn-pg@OHmM0Vl%8Hd0=Dih=,7f]1jZ(,c(#!5Mt4-:d+QQQGV4!fPm34pEa6G*QP%[YgM&s3E,PLhYPf?k)VO\nH@>ZMPD#od5Rb$ck=8l388!_cV%%.FWO0$usg0_Y#62[>9o@kSC8lR"PUp7"n9I^^pcOFY_#i"6iB.,Shn-n^p3'el8PtE6=IUZ&V+%0#/"H.$Pk=1YdpUb1JTXUJ/W,%_+!rLp@FuYA4q'3+<e5YHaJaN/-(h:1RnReWJG@^W_A/KMG-npP@0Wj-rs"c\<a"TJSrXh*<HQN#?V;s:0XWrQe"J*cCfg,e49Tu%TWr[+<S!_L$/l1K.U4`F^]Ntt<'0[Z?7Q#:%#]p8`kG@UrG.R-#X#,[6o!nW#.@6*)po+al"D%Rkpp"N^]Y,nZ>Gb.RLUJe6RJih%]S+5(<Nu1%[:Ggp8'4HDEGc^+,nnkN2&[Mpn[&[8cn$.jf1gm^=>XEg;Z+Vn_m9Y&!l;7[ZOu'#^iCeq)Q$!%+W7"#QiQ>+.$9U'%TnLTE'iG@(BM"lQ-8aBko'W/=ZPCG.+n+*IY)9V$&4DFAZ8I==^*1Js-)tL\!'OXgL,*:cORP59QGR,5"AgMOaa.bXi@;a=eg>qo%1F6OF1t8[+c%$Ld7Mg_W;Fe$0B9C!VaEY-M&o'?W9pi4XRt^[,Y"?D7'e7&rN(&tdN2@-6=\.P//=L*iKs_sr,A!/J_)<R`A?V.P%h[1[<U9R]C=saoXK1!L#75@jJ+.77^RBIN3[P/"Db+4)TRjX5&`WMnIjV*k\i'DF%ZLLVU8PE_&HBr^UmM7q)g"IHLH%_Rse=P$\%(cXKR#L9:@/*!CoRn4(mb-Q#k$k5b5dRH_`Pb@P37^RmPq3['Q)ts]"<rdrc6&#E#Sc`ISSLd#D\un(?FP+d:m]IjMWX)*=@1sG8%=9GlDOX;o4%:'Y3js?$ULh3#@CJdV8P!D`cn6p%[*6HaPm"$u0Tb>h6R0ltJD]LL)A)+N28sDsM+Nd=n2U6;;PL*6mDK"EhCKh"3%,`0c:c,ss0B&Rk8DG3?Q9ViCQ/1<5QM=q/+'lWk1ZMY2DGfE/u3o2=e-,:rXd<&B39#u?i]u-h'>[U^c"_602l(0;j95V8IX<T15%n&[u*j'Bk92=NF+Z]USFYfq\h""b/a!s;RfFPXFM2*s8^s"X`n[@2b*?)O8+OsABTjP>Z&(P7$hko/Iah;RC-!G!6"DG:-NQorq"%Pi31:=Gup7/LuMGA4mRd+n&QY$PSbuBe&B4HOCdHU4cVa(8!ml3?SnYX=HukPEK<@J!2W-p#>rO.T(0WMYdXWKP[_)quaj6S"L`u%7)OQ`$b$"2#r8#-Q\StADNrtbO>Wh3Z\h(9G.gQa1\2/SRDSl'\u(I!=OWE:%fo:AA4c8&#27:L"I&96(OZFabjc8F.Llsp4p$u-%jV@2.(gq>sL>X:A.ho"iR?%>b"om'A&V(t]_`65^!@lrH=hY*MXklZp>'+!P6ot'^R?%?-LCgKG,G5\*VNs.1&Q"=\:e8f#&BgH%%+MLEp":%!Z&V()=<*VTg#`>Sf/cmk!d08jn!5h76>V:U/(9;&*[D66O9u0=R+95neDGG`h8M)4I,G5ZL2`8EA&5/COi05r<!?dN'%$hY)3*>fTeNrVSie@R#%!q`^n)WH:VSQV5Y"[no`$`4.MF`][a4p%rmVZ$Se&YN?=WWJ!;+NcD.&I,&bnI^Qed-*)F;$T?+a:qX)%7X%Th.R9d+Ws'5gb)dqdB-U>DaP!YH#<++U)aOTA@)B?!D_8Ws,="RF9qoWG;ZS4u`Tck=._p^o=1/8I!$s*p?<dYYS*['R*MW)8%>6XLO7g/ll=clu>^nb[&NX>d_$p**u$@l0mCal@aBWJ#bJdML,Qsu9['p)u66*O32OS*(@[5>1r,H(SOaUH]c>Qqol#"9,(!$q9*%\u5[PU0CnQ5UbYB5^8Km!"PR#!(;HTqu`A*]420JRNbnOG_ZKmL2OLXJ-ka#lDN$5?rA`O=9G3/`DRF0ULZ-S*"?;uKLeT8La>^s%3+Ybc?q<-8KJ`b&e#DNH1]VX/9s&Q4!MG&S)E=C")[:kf\hjCr!a^BkC*CmUe.*WO5U6-MV#kc"Lstl^<Ic40<!@NCR]6Af,U>b_%[Su:tCXmF@"Kk`8,^"Oq`?^p(R`&MfNsXr2,\tN/Lko_h8JE%`W$Nc'-*2Ao)3b[g*L3QG/[?[bkS-dFK6?Oi"I,#[-7VC6MhZ#@%?J"[)!^qr!Q6;SRD2l9Mb9TY&cj:uN`47$$3Z6V$BV<.VS1%KN;BQp7'+V&RYkd0j*\2NR9pRZU&8R\:_cAW,OpN"_VAl.a>QMM-%L_=8;YTLk!kS?fnl^T`M!tL.YM5(`oabf">kCbqqipAn#[3RrP'?`<e_ndd."sjm'E.Ab(),,krq21OtLmeuL9LU;X6,E[MNT;P@%AAANu6GnL4fe>t7#p@nHX"=fB<.[TA:&B\W,t!dD-G?@`2-U_g6gfEB,t&g<ed>^kab)mGq'dRW0MFV^Ho@D?"KH:$gaQ&PPjnD:%1<p%-M)1$_'=l5@Ed5k8(]22-H\,HQ>MrB,2TQ(o8@'#=98o/WLh-dZ,BO*UnTS\Mdg$rM%k_(jpWh,j]"p.X0CQt).\U_?\cId.%*ON8R)Z[;iWWn[S2;kKcQO'TW.&3en!ofZ"+VR<p-]*ms:,X3c]Q&O8YgDa>.@O?H2C\ViQ$pi9,rp#-(Z[g1V>t>(L=;^>V3I&A%!>cS)1mlr*$DBdZ5ZG3hh2n;E+$[f;]Q(85C6s4_0538+7O)WfW$*cs&gANGgZnqVD65)5V*!HD4!EH?a'8dK:oML9bITO(6K9D;%oZD74\Rij31!9Q_FMCEdJJ0R&g!_@?l6<."4:u5#KQ)rq8B)#lT+Z^NFsft\QP\^]ctZ5Fe4&r]lsfjNcb4(:iPspc0tnhb^#Y>q%^X\tAlPB$O66R%VS6>?7Gk2nr-!3aA-`\jMdtA'fS)D[Ec[E90YF"@OEm.Vg,$uRuk,[\\V2q5f\\,CoPhfH>TB0PpZ-'33eNAq,%I`>pbHV$+Y]XfqT>UZ4Y0"B6IQ+R*hZT)?2Gr;3eO/ld9hWD2HI5RWqNfdhslL$^Xfn=V53p(M7$ApiZe`Af,6H,HP_4tA/HS7A"%kq>55QeVbAd;bLt[_/'dLr>;8EHY"'C0Jl#EE?Lm2%O55\77SnXe;%'<aD:c-</2H'AVb\mT5mc2oZ6QmAms9?HmE,mB4upEJ+_(%OD5N@K+?!ZP(p)JV?JWp']mjkD7WQHEu3X/j[8Lue_IVHf+GOuCb&rHn(<d#Ftqn3Oi6]u/+I=.5$Q6TFsO+5#l_Dg@4=8N=jRT[%Z6kAnf-Np+gbTq*r9hL'YO!h$'^%e&DNu6ak]"p%`5'uj&Hr&5gQ<n-aSAMoFLPj%1KAW$B.LD8&Y[L,_l`9D,/O[kib4o,ipfW'%8pl>nBR5hJdSLEUY&DD[L'oknVBU#j",YS4AifF5>Ye[3d\[E63d8E8?_2Ttmn!@0[/R?Ul#b)W@u8k1T\<;ADL/1%iG?s]Y](0X%%,o>/,cec;8li5@WSNHf)pVW_h-//g77$3pl4A[+%bm(A->6_M@q$\<'="mC<u"S&T3dt9Zo#?C$<eA3Q>9]NJ)N/&o/h;^4-4='%3i4t-P"\SN?.PhY'cL/aF._e^pTtmurTK*#IbA=D>\=N4Og->?q2b/HL#,%[QF7tM8"P[Ve<m$KI+,6\_C42,SOj'l;&CG(SCo<L%HeNHV\l!Dl.G-@6$<E</"fj7M;A[KRZ4$*Lh4'ai!h<I9UW6G9_f;HIWmNc95"$!S,me]s3[U3JOjlG4>R+;+kfKjJg,,Kik9bHG%bB*.6c%uD=N5CQShOXND7#@8!)&]4)n7Wot8;8C3c"soIJ8g*f7V'FVm[2<Q0?@e!<L;jI$g"_J"nrlVr>K8KIQg,diiCg0AUm:8%Uqq1XI9jr8+]Xl;-cmB#m7Wg]_+QOP=`ml:-<03a"OI%PpYKL!DTD4UXr*YCkh_u?^`FA_'%liLZcPbmf9lR2SX<q:K"X->qNeUi%&V\PRHfalXH1?sChlf\D[N[U?[sVId4/"%Y9#CN_!4dK/-@6X,1Ib7CCIMOW72!S!N0AO?%cPZ0gW*ke.:G)?33h$TQqsijSTRHd%5,q7j(nF?d`-q39XAcSr'60/u!YX29-b[)d;n+Pu*Wp0(;)l"^:HH_Bb<\<k24H3%neID0XXoQ3`T]mK*/gt_":@2&oY?HO/j#f\%9r<*TL8(e;<hd,9pQH_qmHN04F/XQhU7W.5"IVcH%d$J7&adjmf;Z,0ZJS:a&I[YP\07Rn?K\2h>eM7J?*[D=Wj]%[drqa^V[h&S%Hu9F&nj(PRV*-!0G8gaHH)F<6'a=lt6mB;(^P<=uFD-*#\h[[M0F\f=0`W&3"lpBd^VKOYrL$p7!\:ho3d@9D%t!2!%ErZmOMsaU%mU(tu<ok;g[WOq4_5+qUq`)'!d!ZF&ms[KnDFG!2*F"rh0'<%8RJ;3s5s?m?B8cT2<i.,8ZW<'MOfcjLp!PO?@%^$k@B:%]2kJf*%#3OQ=7PY-H*.$l2MM*K[S-S?@MB\^]qW3TDR\Cpi"IeqIX2@L"b7tcW*^)kD=&eZV%NA@<'[agFg:I%d4,GI(FDj&SYa)7.pR2<,%cXlC1U;k.^,T7JdW?;O'2+;Y]9UEjYmUCOH4SN.<aQR!8r;"kMB9kh7O;'f&^79MU1,&#[##D6=bj0Gq&,Qc#1-+.j%8T;gZQ4\3%d@1k&kS3o]Wae@%^KD/B?qL!&7H?oXB\AiVLgI05hO2)]%)u*)/5:&JCP2'WG:7"=RFrukDF[Uj*-3-F8Z!i<0'UepEeV-XWDiM^%HeQP_T![)nnQC1?_O)%T*]qBgs2Y+C@dbtm97%P&s2cZ_"Q*]4nDOWH93Q!rPkt`'TGrT3[$)4E7U]\A=kP2_P)P!&DA9`/SUaRC%bgI'Fk&L`Fe(n4E2?='W@S-Nn.NsnQTIOq[>BNE.GF:):-ml2>8W@f8<T"%kR_65-9GbiOmXfep4S<":aAhO4ZO*u&4f49)PfMQC%5";gQTW=@_1?<+]M:$bSEZ=E[,*:;ja)#cb5rJb=\sT?<PYL9Oguc5X/rTia-ch"%O)DAQUPja#m6R\Ao'3eUT8$1PX]%lhJif-a%kEmd99/8YUF\.uRPcNRCpMP9A]8r:.-]]l0#[+"h7YZ7K`uZ*[,r!h,2ktg8A(K2.hgWLO<2s=2,9pP^n]NrC\c2j<YP7ua_dK2)%^-Tn0AFgKKFkb2fot;YKo`n$;q07&3h:fQsH9.fZm!&5[^Ko(XrPSDY3-Lo0j0Q^P0DL8.B0_5UIaid@"CW/`;$A*>FZo#UBOk!T%rMZ2WA1H8EHIU1ZS02YX4m=l_hR%Um%A>*lDQ0#G<,ANd`2rbp[n;<ZOe-WpeCZ273OcFk&WOFHnMn6$87SlE8[l=O*,2stTgtS!%'Okg%nE+`r&rk)%BHRX;,t2sMaq2]0*eJa:4EoTsH"2>4\;j&8E*=)*%OY$,6'gh:*B'"GJFp_i]#VYdiIWZX!_j%s@]H(1nV0-V%i"KhcN>,@\Q*YDZ0bK*9LE[F!/bPoD"ikeuT6n<c;$R\ATBRkr+g7;,>'^FFlba%j<O,R>'c`AuP1l6VeUj,uMXp%q2I.`_\I5#*%Aad=qaI>iWE%XBAY"U-RfHXmpo\u!_X4[<-noEg9;:fCsY`^.6hhRjp'nfjHb!`ZGaEic.Xfr1#F"2oQ8;LISa4rLr8S/mR\sTK@%PYGhXgZEl?/h@)7=Qrf*=(([\4?<hLP("P*G3R\WMf_N_i=O^ne?XV3q-JrZaJqjYFEq-G0!k;nF16!P2te%D$91:?^7cBkoJ]E7%"*>I--OjPgbJZZ$>QnikHnJsJg[(<P.kS^e?;qWf1W6Oi*$X-*c^ee4!$2p%s5L)^kBKi:*,%5$?=1`^['EY:ZQ=hQNhjZ@9NC!s%R?kLsUdl6D[I&QmO$*0kZYrr&E/@!\o2OUDYp%VJpFgNHLq53s61?%@Zug<sUtRj%4ET7a6961TT(3?^`R*M:O)KiELJ$,]s2n)-%ails8(ff\VN^1p1lQQ+dAH%D\=DB8BhaJ(^1B^B5I?i/?:tR?,KUaEc#e5*LEa/me4V/sBdR.4Od*ZQK9)-OY,LqNYqOR[Mg4oWm%5.^E3:hhRdU5P>eFs.f%%V?oc?B="j9W9nkn$F76<TRVcHUp%XJX<b'%6I)qi#5O+^f]->:e8rdYm9N_JrB.U",GHuFglrqPK\[p%>akFOXPgcWl*>^WVaW@lAJIZGOl&[P<mZscCD&O:F$#*5M#gGL*4_KB#pLQcL^s^&>ja2s22)q?#T,qqYe?(q/'5-<>Q@-0;k!]e%:/b\3$o+tqZ""2B5^nHjBCu'@b[FF=LYXtW78:m$J72EgW;*e+UJ8G^kZ$F@[mgT_ZQ(]FZ@$_ToPao?cESTPHig?^[GGRf6#-.g%2FMlF6u:H=CZm(18o5>$N?0mf:cn,Xnjb`FX<<6OSL)nM@88G;LI/Q$JS\9&1!r7NUe6Nu6Bc[!Mn28nl]UF[HPnKeDjU0cH=>Ip%fL5^^1#LkV`p[F3pLu?G>Klh"O_!hf>Vf^((`YZu0T6JsPD0S/qf$%(E4c/`@q'Cr=TH"<kZ@/gOpDP)h#P*T'Eeo^L9/"dT[*9G%U,J*faU\oEHII4&(E8%g<Fk,9NAEtHOlX*o=$o*]-tqi+FfN[r3)-,U.EPiY5b_tDC&=YF;it.I'PS2j[U&+\Olq2JG*)82>XFX<%a,Lp;)8fQ#4;h1HktT4X!@C3-g^W<MWT9R!GCrSj%bl)3)+i(rCbUig.VD9d5cX3X^k93A14`'de.'QK,H"I!Ue;GbTtn;Yl)Vd`%9*Hn=bd^Z.RfY-1+k2\<4'ZV!IqkE<hL7,s<9.%*4fUW<C_JgQaPLd[>K<GspE4<D-=Oe5)/GC)k`L@qf_^Tto%('PRl,_kH\-1s%@rH+Jb@D'd)/?c<\<Y2FUL=Rc`%Hg"E$-##a4qMV6"UP4ZC%18OAB:$g1Rt(/=?QU_:m,j<./."b.5"44;g\T?1MN2aE&eo/4=Y,%29[dj]pIadZHBHk9r-.D8fcaXe7[OEZ!NnCi.H2oUiD1LGg,8Z'*1ct"e#ZM`8EYINH2cSn;.]IC:%J3US8`tF&?/c9UElaYKQ<3%h"rno^hcUJMiYG5]FkB&NU*uRLWb6CVQLdg>\jXCgDk8D=?36'Y:D'M,RS[`eBoR<rK\;aDub/Af/4/t00=>#0:98+E.L&V@3"8d%$3q'XT"al4]RB)OS=*BJEU9]U*2@2?:Hnpn+,hgbr^]r[GX:iEH(^Y,UOR`X,h,_<D$Z^F2GZJ0_q&u'+/1$V9;k?PocX]n4,T8:%*#@Y1@T0<C=DofcPLR^J!WU<Mj9<(H]e\3K$^CNVK`9>>?^4#40)Qk+LUj7X:ZX.81YZN.m1f.S,-sYg%9N#H=gu<3RlPN$U>s'C%&L2@8o?Idf8Pjn:>*aV0)DJU&K)VY(3Xs%**4F`U86l[@[8V4e+?R&,TjpN51Io;krbAQA;Fq-Y_JV?b[kpT@8;2:9\eQq28iSBQ%]Sq[WYRP6X6QV+"q8]crYua%g:E%8MS>E#fM1MgXVct+s%O6PH39>A94ER8I9j\t&I2W`lb\k&CHUf;]B/V&:ajD;5QJq!:MO[dD%m$'fl-FtB6#?K>[epoL^:dc4n<BRE\)P^B&Eluau/r2ubP3K0+F?>\8q+"udi*P:K_C<B/)2;8,C.L1ZS6:WoJOIsBVTcuX>\@+N%#4'VfKrK)fARN$bV]);nPRl5\j%Gff4.Fo*dYJ;Ermd)26e@i@)fVu'RHCuB*P=!M4Gt`Pg,(fPfNTlk=I7;Zr@(L=F;qCuF?*CO%c5>[P0buVl`?KQf3G=6:p((LoorG5Gj^g`[&fl\k8r;B<0%PI8':Pc^H7FLOZ40[OV!1a>Bnl;??%3ECk>eZrh@Sue[#itCZX3(n%-g\b"?*@\OA%2Km`I*0E+2<kRqPV=-Cb_R)f.\j<FijFt%#`U@o9(6C8>#r,7^/X5@Uu&c8L"lNJsXcQ^]BCm+IWRjSWo83U``nE%+/>[t+E+KZ6mr81[@FE$(QZ857!prS/`gc(Y:MOtP[k(7Eda6c_56^%$nf(8WI9>s'"f@=P?4*XksDr+?1@'EkMH*'Y@4"8\=W:L%(`'(_:iFbYC[jRN.B09&;SIm2nr,O`1#+@l-g-bWeF%u1<IQ:V?pf>6S?;n)hfa7_-Y5UXN#nh`eWcs8[VkIuO-6RLnWdZTLm!]\%Qg;!9K944g0t?-JnCBV^3j=3@9ibKLV9'Di2n="5m!\U`>6B<j"=_I:?s(_*J5Hs_.K-AXmk;gncjhZZ)4b9t?Zq;8Lc"<-O>Z1:%?a?'A9C$cgfS)\QANsb-qBS(o.OK_aYHV7`[Uirr'.ZQB8?F$.rh<tId,?/HaV$XGgh3/+b'd;Oq)lo-^E2q`mMA*""9OB6jd=d9%0?A!j=-kJ%$g%**"a:opOp*^9k`g)eb%]sDP*=3jI83WMqeS+_Yi1=I9CJ6"#?F[&(fjpK=%oPpI8'.oQfm6&aE::Ecme!=kF>T@%o?qQSdd2+6\kR1Z^iV(<aOY7LBMc>][lIc!Z:lm7gFnoJD-ZL0Z\3d7QG4&5\X2C4o2M@>\%#Cd-Y%a@+H9RD9F"mcWQApK\oa?F%j"@h8b(m]Xl,tZk\+Xq*@bC/=jaOh/n,%.qqf'D9/]MF]q%V9ucchr/F!GI^@6lB`K4]1:VY^Dun_BQ#[jlVD*#s.99_JUR@#$.R%8jmnR#b1Lnjm'pHgR7L%muP+\@oQF@]@#ains5[2nWf6ZUElV+kPC.1mSZ'%h'ERWg6XND+UTtf7<P<K&B])9JpY6ppYJE;qu)kf%qu)LN`XQui3F8AJH;u0=F1aaS";)fUo*makLCk"X?C.^=IH*k5[UR=I-U6(#MS/MIC+Bp=n.nE9`hoh2FQ`Hp3VQ9S_%.\t4?bMq%Gnaf5o3@d4dp4;uYaa8GCdZc.eUSHH9(L]!-=%tM[u$Z%AFI!/4Em;O"Zo+3m=o2D43kp!*?m^Jkl#"*k/:PQ%b_-$3,qZg<:#`%%D2Phuo#fY&e*P,_@h!@rR2[LkKGNEfP/-aiiSUiD<:A2G]U'HR=3Z`RFt!(`U2A=fit8.(4!-H4&m20QpqSO;rGC[&dh<[@r$s%$%S?fE_SKnVREm:.#N!8AmR3[a3236/u9,Q\f_l0(O]Imo=Y_3f6n^@ICM=n`DT4@:?iK`W*_Z/_ES"oBW?UT/9Z=3.WJL29cLAr0[%-%$qbq"?;EKPC0]AdMuF?[d<7F6)o@6Qt(X=3_FJ8^e1%LO<"Bgf_K2[&hPe_@Z!KR3i?Yqq>`#2MMl>(rgj/9G>DrTX/0t0Sf;-%d&!mcC\EG2'!^]h^DLFB9:P#RrM$lkBu5t;N1D:(-.JMX_<dNes&Ud68N?ITOG&tJS"1g`d3H22K-ZC1VL`JK&mhAOY='#Cn86WL%eqGAs&+Y'8As2XE_t=_,0WaiTG*;?SQ$-c&0Vth<,]&Za,736K-uuq;m[I^YpB&*.b]gb9oQtf>4tjogMtmcQ\/fsLb.Ku[D&m[]%DEG(c?\p$:U]h'Xe6ZP<_)qVihB+GjEWR*3\oEBHEAnel(3JN?R[1"d#?^I\<%)@#:*eeQK`"87oX&n$]ELkdI3jR%<04D/\*B44%RtO]=D[7CT1bUQ55nmjEMX!Nr/sC)+`V*V`m^iuT@Jm]<5L76kEle'd5\ep24L0-]PTYPHXpa5"-%V0W$fER^S>Snm[:?F!H3u(^%<-aZQeTT%Ap%B]RF;[Ne`4k;s2mlAB\)7OiYCqt+b#-UT<gtjkP>'-u%C$pED0*oYi!#O3]XFV-'?Sel;Pu/#qs>+e(bHS]rrEmc%@ulS"d<KIA@E753P\4kVZ\8,#f<[RZ`B*_6Qo=-t7C)\fC%]/-?-a?0<momBVK:Z:EH6gkgomt^muZnmY;&/jiMUtT%`R:3Zn7j2%d@&A(1WRq:7u"$S#YB-\DdeSHIerG%/36B@N%^n"V9pa,L#FK%pQ*RFAluA-E8R9)Q<Q_Njq!RQneK'J0d5P*2WEBX=Bp?fR-u]2%nbZE'5:slfMtme!ZCM6'l[<clNPAtP'*'<+Rj2I?Q*mGI#;m,rp#&q'M.JGJIJeS2\]kkHeE0Y$a7ck$]%WJ)S.adLDMsJhWUXl8%a2YE%L:d]-14?!0``/+!*k2!1(`?3hGqpYk85=%TR&V891*oA3CWgQiTj6P/G]_)Lf6q%/i\*fZO6*`&bfPgFfA^:3H),7*55$s(%3mVZ'-m,gpH$l\9WSIk2(*>'goLNi%[<:HGR,^Q%>"WX,\P#Spc)k2kC3/kYdoX\'9I2.JEN;lLO\%%!:57[58=@^;EufKkVC&K`%D4/X;-J,cLSU4r:]3"o&Lmp2iA&mle,@bT6CbEJ>>A!K/4MNC.cSXO$I7;YQ@ulR_F*(-OGJl&;I`s"g$"NGE/12VI)cO]k?V;j@%.kK:6FA_l=G"t86nTGIjJ'g/]?^2nS)2B>o6rZN``d)JN'2aaK0#`*Nr;UGeVZpZH4%`l`#bc\M:Q<.P'2QjbfoVDq(16;ASX#bW%ZR:faqUQ2nj/I#LXr0>Z)Bm3AVAD3WNcf2$2.5odSYl[bes1Jp*;?RR4>gO@IQi!k;4I.+*-_jW9DV2)C0n@?e0pF@;R?6fbXMd[%p`1T@\n]P^QRL!u'++"`-S:-h1_AtD6o?+#YDoIbm&DQJeRShDK;dp_#+hD<@89d[AO_MkH'L+]R]J95EuQ++ZofZ\kM-isM71Q+%_[s%[1`d4n>hu>n*:d`:<4,h=ljCoJ47K4Zs,+Yd7%1!)7L1r(o@g-X1;.=pWY)dRU8n#?I&<o$k,>F%<R!6GL2g>)j)X]-[<;/%%WWoPsf+1VC"/*;%7q)U4XDnI["mLUO[G`Q"44S,tmIt(VW+rS:V=Bb5HXGgt,FpMhOHIR]D0A\m'%pQ&8=bl"3tsI[6qODSW%Bio%-aBU3jL-[dm^H76SdegbT;'UNq]4PgD\r"nD`iIjDY0jGphV[WTrL!28PHs9#W[%OH!rs#[5T<5)`&k%NN1QkHIIMu^d;h\iE7sU%j=JE)SLZIB90pY!lbRA<m[Q;F[g7,:8F8!\T0-dYA2Qm6Juk9P&o(Mu8GQb"FilHITo=dCJif-a(RXL'$Z\+MF\.uJPAAsmNa@#!%]+9!@r8gPECKtW`F(uPmp!>Q-a<4[/m*/(>@$]K86o6`@H0C\?.C6KkbT![XCFnWQ%M)iTD+lDEB3c\p2".,RPl!p4ZaY,CbaH.i%5a&hoH<;Xf3Fl?:8i01-#o>23f)Op1"ggC.NMX.BXK&?lPp_f5,3KHh]Bp>=%H=:mhMa40m#eQ8dsC=u8'^G6Qfjrb5LMq5:]*8`%7Scelm$KY#]l#r&gR-POimn5oO]-H!Di[J+>)XA%n85kYEkSs6h6-&_fSJ%qh@@N]?aS'?E@$R*9#<d)r&kS2:8DNG;@3ti>!$_X%UZ"2Wbosb(fXUqr,Tn4XSghV3OZ+WgD'+mZ'*T74,$/F,SIis-4X#&>fY"[H)`EbF83lBmUU63M41XU#qiZUn2$:,,I;0P_Pu\,6%U(gUYI2-KX;^u9SVUlS%2j&-aLtEgGmK3n(l=(l<U&bj14jeeYphL$B#_;$I0H*dQHD1*6\;p19J:<_V"%pul%>^"HB;,D-BsVY5%+AR]5,T9LHs/]`TDa=KZ^*4"78hq;]Y0UcH+dEXedSM?s&6SNZ-9<h!co)_4"3SbC)Gk,&Qo!,?H)S(<hLYq7m&D;XJ:J>D:QPb`%'CI:ZPQh8LO,5p6#=u87I7JPOAXbYbNqeX2dsu+"m,=`iVKG=2Bk[s6cTRtR"XH:P81YlR1g4n$oT?D/U**kFjiWMcA-*X^-U\Fi%)O<*P)PSLM:m$ljZ6G82'^@Rh:isg78b[c=`*]-KA%CDLaOrKPNpB:_+NVANV<s7;ktjrO1:8j'Cs2P'ME9lS&da@%?^i?C5UPbc%!hrj9CZ:N*`FsN$)Ih=fp"I1G\ji;-Zm(j/VlJPG;5^oSXnt:SI8CM<ODTM/-;BPa<[;Z.#q5,c83ik[,6<'[4EjhL7XC?(&g[>'%NXQ0uA%-n/`!3AM?=WX=PF!R!oI/dDIgP(fq6MKXNcogQMk;V5K"Qg\meb$?d/*jSDDI+jcGhpDAme<fLJ8(QVuS5>[>65)\=-g6%P9JZL9"c3'!?8?W.i3]e,\7LJ",Z=GWHan8BWi<6ljKL:\2h%\W#S9#f&[^I+I&!B=RjNg-8_[n+92M3\4J>ZhGnXTX(mBW<Y]uJ%=MZ,*:oqh'dViOmgMVj_'mo+fRU$Zs0rlcbh\elc@'jg%URl>P]fq<l+Pf<sI']J)NV9AFhAd'%*KjJqIMWjp:b7Hs1"JQNJrKP0%TB)lfi=mUYOOA4%j!9W+[WHnEI5,>YqfdCP@(phXliVS1052OIQ3ScM8niYsfWjLN)YVJFNb`=.cABL?=Uu"aBm;C(*(BBLp3+T8%n/Hj(O/06`*.B(e2"e,9$l"QB$E-MDBpL?=K+OeAV0Yip<'1j(<+",$>#aLp$seYPB/6pu8VLeDhPdMYB$FZlA`'j=g]\gJpB/KZ%MRi*[(D3@.gm/0'7*sE=(@aUE_XKVN1rYX']0'H*ko=><8&@7[,]2<_:M'Zj1^YfUi4u!F2.)T<;dj!>]kKF,-_t(33%SS&JLs,h%NI+S]VqN4A]1=\$XcN+>)oEMg:i2$^aHcnEE"4#'H25VJaEBL5->Oj4%R3?2%3j#^!?J5oWXS=/!H[Ha1JSg!7qZc91rOb)WWG\.%kI0`@ooe?"<`aG-EsU3COJS"[DG<VYEfj$iFGW^[l7/?.+"*`Y+W+FZKj^Jp_:C8$G'fH2O$MdKL.?pH'p;\&8:i`;JbQ828Nf&a%clOFnJ-3O(s(.X4K!"[)U_17j`C4>nC50F'N*iB4&5,n"^oUe.D)@BB\-FN[aOQU&8]+"`<$r$a%P]8ml4A>[L6]2?p@Ii:*n%AB%:/3FGLt=O*i2UO`=X%4Z-I_%%ep*4;^bB<SCR`1)Q"B^&=q+/;USj\6aHabbh_g\aWpDQLSHn@9qjNCYU4(9KpP*;%aN/Z!ZHpPi%#FVmRZLN+VpW-mX/kqRRq9\3?/X"d_B<:6/`:L66`^m5#WJu]BUnuaMoqQld0P3KUK#alo@D+]Q[$o`HA`>Il-*\I]D+g72?u#D6%ck<(!Y?dD,&[uCR3"E&A4g/tM[)@jUFlI%1i2o(\>\g;pjd5+T0IQ$0X,a>hK6LD.2!Hs.1V55G6Z:1(EfZT'?dXs4L<WrFU4Ic%%o?uoX(hIgtVS;DJ"QEA7a2fa-5\6lumS4r]%.7EiaBs)bM`mDK%kqU7aS!(EmZMl>fuPelh'HT&Y)U\h%\[.;pQ>`/D=`$b[%l^=%CtKD8#2HOV?2N]Y(%'PWaW7\&rK@(E_m5?UYn#$PR"X2.`6rRD(6$@HfXhtq'&3m'rrU8>s+4hmaLs@$2K!M8"RK[U&Kn1];Y^Gb%7daD3rios)<cco"@f"jR*Kq^TbQ;eME-9JuV]Ir3"s03DFimc[LS[*;f+>^!6Vp`laOd4S_m3J7c<IgIb['cP9>@keIYC3LWO$qC%e3r]%..!;-dkg?q@jb"`+8]u5]tYskp1HRX;D#'5<(k*@QLnCbjgdLF#YS2HT2/#JG3C!V7EUt'9pnp8>FE.aWbEW-CKdaKK."c0%fR]Slr3NXb024n%6J)i:A0a^g0)oTgF^>V?EBI66L+S'6itm;/U<Uk.Z5`fh8j_C^ETR%sd-oIPMH#BXeO_3Ahq_BGTb4D*7'r[L%n?6(m?BAqY<S*s+'e8mA$NAh-iVRnW>JE4BF`ScQ=&bC=!o`ouE!VJu/RSojO[O].p`@b@O<p)oY)"\&b\u]P+eYRP=++D\*4LfA%9rN!%F'IrZQ2,c,;t/TNh%ScglPL*feD8W;\gI$*qN./CR?O:AFWm8#ah)E+]mYco?C736IH?pgP$FWY51dA=jZVXe5PO&Y/iE:k%UOg&-^>(te!\IlB*@pl9V_78^1+"(*mG7KO$Bs=HbM5'f.\Gmg<*uH"^;ZcX12SU++l]OD8:`[2fb).dWOph?lfILLbiIV)^Y(k+%%P!Zi7@:-BBh]7?,(/[=;(0-`F)bKs(ZGh,L?,Z__m3`**,b4]\"'Y+oNOES0hfoB]#oA^WWdl]C5PJ@I;"qTCWX/)B0VjWQB,eW%Hq%-lL3[=*W^05'*(/O"Ss^"kWg6W1&IG76Fh(38)^B]a]hE1U%[i@[l`2Ub?7-e:/S/-5Gd6-r=saf4b*;6VN1!5t/DDp7OADq?%AHF+_-=cZ3Ak6)PiZg8#;3745>b)c,&BYc=&DRk7?="sJQOQP:WG)k;W3==1aihV9P,^\KD\B(9>,Ont-K6Q-P8E<69\$PL:5);g%V1Lr+hT'2:moRPumHhc!TgUm0@Fdo7gXWr15SD(;q_Bmj%(We$k`Kb!j!uq,/?-!e[TQtj[tL!GUc!^TT0(uelI`n;CL/8?*6>UH%g4k8ek!]?hW1S?t0TLKpSK`?ALp(&Z?BT([e`Su;WOuSCo&nla(('Ra62%R9frE@s)"uUe"*s:k1PXDa>bQ&2BpP'605X+1\r=_-%.Hs[fpKfg>!O3/Z"[EiE<0QUFLXO.j8*"HkZ\E&G3tZAYlK7<F`6rSK1Ob$$YiStuqs?>HJfH7CQ>^0q[jUo\L:unZ@$SNX0F9%e%,o`B^hLCksCj+?+onafg_;I0D*^u/H-WoYDHBMWBo_X8&=gRIY\[B`-AMEJUA&l7cCbC?Kfjuig>Qu<@p)*->nDl=^O[hF,1N-ZE%?RHl`6O(T8cAm8rL9q"tSB5>-gs$aSEuC&AGcBL3Q[qpANfdQN6aFmCfVTK2-LUb[ng0TNCFcSsfk!FeIaoZOE>e6si2Oj2T4-`$%@eK(D5S[;&ji"\#]q\_SjD&JF/ja1j\ho>o^upucSt$#I<[`B;)K&5H#aj(KKBD4@qVX1Q?3<tXAZ(([i&1<=#bY;QW$*XaXD;kp%_"qXC[kF(=SA8)+DL;mb/jk"sMfTSC96dUW7H,2Iaa=,Ug&Z%oFr1dg?hNPRb*boOH[BU'"gQeD0JL1*CZ-s$a47V7)Nl+qpr]rX%"dpuaFf+X>b/]5ErnMQ:*JV7'*@nfNIfV:WX/,u[H)]N*\I4?$;)_>,"b]pX]U`(G3t)%IXiod%f^U[tD_`_QgO'/q1hZLk+EZ)]%-:b^E'/o6B8kNQ5JPoBo%(eadjt/:V55>OZQ`tbFL1FX7^+q!;3Msl&QYAN,8faX(5Bg=($m(QSc[7<j9r.>0-HGaIZ@jo,4c\c.%Q-9^5i#I#/:-Hd_CRKlHER-#nFtU58S&KSleL<R;!D'ojUnDF6NIG/6SI3o3[hF?<%tDd#eqU,tGuYG`FTcU5>S?Kfem=t#4!>=G%Qm58l82MtcWWOoqp#OXLD7WQHEu3X/jgk+J.aW*,Xc^@DkJ4<L0Y+b_MJ$Sd-'j!Aoq=(WndReSSc%F?pPU]2lMX4-/Jd6?aUJN=%],[qc'8t?pg[Q=_B\@f!_Bd$lT0>VVkG^C/4D@9BP4PuE5tBCHGCY^WK,uYNPg"!6Ar,;f8=C7maudmAK"Ef3lC'%B&#%ds]&3nZ%cds22"H+'&79NS]<i:YCK[Q@&$0T"m4?AWoYVRVrfsTk%og3OH,rQ1ad%(P'-U;oQ,8]kI5PLc.o)UmQ40pY.M#",6ig7[l]/rM>%:$6NTJliPD:<@`;SQH)Q.e@%B#umVJ-WbQJoF@9Fni$)+I,MU.3d5N2_roF/f:?hI.W\VVUI:anp'?VRNaW_a#<(kKqp5`>CT)K:%AAcY%i_8#2q!2ZaH#nCDX.4HR]5Ya!`fB[Tg:gfD0nVkdB<)k8-W`HeofN]j!-jE)%#g5]noEuVDOkf;#:B[pF%;AC7bm&K=X4]F%aj8IDl'G%WfMOVG>)"/c`e2m6LLB2(`5KYAdM"l<nM^924>3%+[p.d2D%$<,BOc+oR'^Pb@2kd9122N>+lr!&l;0iip@D;<pe#JE%;:)O'RO7]ooB?)4=8$$jel1IN#\<ah&r(Dg<';Vk<9J@=)E#Br-9t&po4:Z)p.Ml9Bb4<n\:,FI3rNbQNhXW<RN<DiR&GNl8:e/D%)f)54+]1<HA]28WLpM\m+>["K^XQAS[qDgH@^VFo,^&J[4"2bS^s9*P,mGDGEK>d=W'Op2++8RbJsLqH;RF20NBBs]K8#f5EfE>+%iU'_"^D`Kg7-9[/B")#3LG1]m4P+:]4_F&?+D.V4d[$Ybga$Zmkp``+=rY\sGHj0<]Vb+CPJr@4=s+RC'-<CT*(4:?TU7+3\NeM@%.RqE"<O3"J!\l1\&=F(MBA)$@AE'AWZY1>Kk.#/-pS1`OQC(&f73nNPZ^jn5Kq)diel!q*Mq;>AWpS<,'AW\hHZbhEgjoPP$XZ4N%[*)5LF7Y)2*VsPP]A.SY783(=coa=420r&IB_I^<WqC0VdGo5a6nXheBM#I#W@\E"eMd64^j>HqIs%!U3Jko$&lbPo^T!Thjm,%Z%H)BK9=a'#Z-psXIOl)Eag]!JV9;A;/WMeM^*Fbp!SjT@bALL9mlQB7LA$[a)G/?mbO05<(R-,-c"W>/dWJ`e2AB!!\.-e;P)4Wb3%:GG?`_kCg0&7?bQ(R[F:'_S&ek4^%g1t2+B";kG8ZVkpM`'hI-r.q:CO</b:q<Po_\n+H(44`2(o-JrR(5Tg;mEG]0MIu.)1\MT^%6chma0oQstV.+<Xq!0jeZ58/ZEb=;d,Ak^^Go$nB='nE`@DfN,1[F`:',P#)r;F+=r81l4%tF2[5Q'F=PQ(7MLG(mkrBIdkpQ'h#%\&V;EoCK/8pNKtnr:+-CqW#p%qWgrWnc&-`?iKheTDn0>++F(8TDnc?TDn]YJ)5\NiK(bQr0P1tq:D6gprgGPq7hL95I&Oar:(m/%f0=]Zs6J6jX8~>%AI9_PrivateDataEnd