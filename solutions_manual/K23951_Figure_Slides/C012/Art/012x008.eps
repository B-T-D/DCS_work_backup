%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 012x008.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 278 216
%%HiResBoundingBox: 0 0 277.1924 215.6772
%%CropBox: 0 0 277.1924 215.6772
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 4982 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA853FFA884A852A8FD78FF7D7DA8FF7D84527D7DFD17A87D%FD31A87DFD28A87DFD05FFA8FFFD04A87EFD19FFA9FD17FFA8FD31FFA8FD%0FFFA8FD0BFFA8A8FD72FFA8FD0BFFA8A9FD72FFA8FD0BFFA87EFD72FFA8%FD0BFF7E84FD72FFA8FD0BFF7E53FD72FFA8FD0BFF7E7EFD72FFA8FD08FF%A8FFA87E59FD72FFA8FD04FFA852FFA87E7D7D7E7EFD72FFA8FD04FF7D7D%A8FF7D7D527D53FD71FFA87EFD05FFA8FFA8A8A8FF7E7EFD72FFA8FD0BFF%A87DFD72FFA8FD0BFF7E7EFD72FFA8FD0BFF7E53FD72FFA8FD0BFF7E7EFD%72FFA8FD0BFFA859FD72FFA8FD0BFFA87EFD72FFA8FD04FFAFAFFFFFA8FF%A8A87DFD72FFA8FD04FFA852FFA8A8A87D7E7EFD72FFA8FD04FF7D7DA8FF%7DA8527E59FD72FFA8FD05FFA8FFA8A8FFFF7D7EFD72FFA8FD0BFFA853FD%72FFA8FD0BFF7E7EFD72FFA8FD0BFFA859FD72FFA8FD0BFFA87EFD72FFA8%FD0BFFA859FD72FFA8FD0BFFA87EFD72FFA8FD08FFA8FFA8A87DFD72FFA8%FD04FFA853FFA8A8FF7D7D7EFD72FF7EFD04FF7D7D7DFF7DA853A853FD72%FF7DFFA8FFFFFFA8FFFD05A87EFD72FFA87D7D7DFD08FFA859FD72FFA8A8%7DA8FD08FFA87EFD72FFA87D527DFD08FFA859FD72FFA87E59A8FD08FFA8%7EFD72FFA87D7D7DFD08FFA87DFD72FFA8AF7DA8FD08FFA87EFD72FFA87D%7D7DFFA8FFFFFFA8FFA8A853FD72FFA8A87DFFFFA87DFFA8A8A87D7D7EFD%72FFA87D7DA8FF7D7DA8A87DA87D7D53FD72FF7DFD05FFA8FFA8A8A8FFA8%7EA9FD71FFA8527DA8FD08FFA859FD72FFA8A852A8FD08FFA87EA9FD71FF%A8A87D7DFD08FFA87DFD72FFA8FFA8FD09FFA87EA9FD71FFA87D7DA8FD08%FFA853AFFD71FFA8A87DFD09FFA87EA9FD71FFA8A87D7DFFA8FFFFFFA8FF%A8A859A9FD71FFA8A852A8FFA852FFA87D7D7D7E7EA8FD71FFA87D7DA8FF%7D7DA8A8597D527E59A9FD70FFA87E7D7DFFFFFFA8FFFFFFA8FFA884A8FD%71FFA87DA87DFD08FFA87EA9FD71FFA8FF52A8FD08FFA884A8FD71FFA87D%527DFD08FFA87DA9FD71FFA8A87DA9FD08FFA8A9A8FD71FFA87DA8A8FD08%FFA87EA8FD71FFA87D7DFD09FFA8A87EFD71FFA87D7DA8FFA8A8FFFFA8FF%A8A87E7EFD71FFA8FD04FFA853FFA87D7D7DA8A87EFD71FFA8FD04FF7D7D%A8A87D7D52A87D7EFD71FFA8FD05FFA8FFA8FFFFFFA8FF7EFD71FFA8FD0B%FFA8A87EFD71FFA8FD0BFFA8FF7EFD71FFA8FD0BFFA8A87EA8FD70FFA8FD%0BFFA8FF7EA9FD70FFA8FD0BFFA8A8A87EFD70FFA8FD0BFFA8FFA8A9FD70%FFA8FD04FFA8A8FFFFA8FFA8A8A8A97EFD70FFA8FD04FFA852FF7E7D7D52%7EFFA97EFD70FF7EFD04FF7D7DA87E527D527E84FF7EFD70FF7DFD05FFA8%FFA8FFFFFFA8FFFF7EFD70FFA8FD0BFFA8A8FF7EFD70FFA8FD0BFFA8FFFF%7EA9FD6FFFA8FD0BFFA8A8FF7EA9FD6FFFA8FD0BFFA8FFFFA9A8FD6FFFA8%FD0BFFA8A8FF7EA8FD6FFFA8FD0BFFA8FFFFA97EFD6FFFA8FD04FFA8A8FF%FFA8FFA8A8A8FFA87EFD6FFFA8FD04FFA87DFFA87DA87D7DFFFFFF7EFD6F%FFA8FD04FF7D7DA8A8527E7DA8A8FFFF7EA8FD6EFF7DFD05FFA8FFFFFFA8%FFA8FFFFFF7EA9FD6EFFA8FD0BFFA8A8FFFFA953FD6EFFA8FD0BFFA8FD04%FF7EA8FD6DFFA8FD0BFFA8A8FFFFFF7EA9FD6DFFA8FD0BFFA8FD04FFA9A8%FD6DFFA8FD0BFFA8A8FFFFFF7EA8FD6DFFA8FD0BFFA8FD04FFA97EFD6DFF%A8FD04FFA8A8FFFFA8FFA8A8A8FFFFFFA87EFD6DFFA8FD04FFA852FFA8FD%047DA8A8FFFFFF7E7E7EA9A8A9A8A9A8FFA8FFA8FFA8FFA8FFFFA8A8FFA9%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFA8FFA9FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD04%FF7D7DA8A8597D52A87DFD05A87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87EA87EA87DA87DA87DA87DA87DA87DA87DA87DA87DA87EA87DA87E%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87EA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87EA87DA87EA87DA87DA87DA87DA87DA87D%A87DA8FD05FFA8FD05FFA8A8FD15FFA8A8A87EA87EFD13FFFD04A884A8FD%13FFFD06A8FD13FF7DA87DA87DFD19FF7D52AFFD14FFFD047D527DA8FD12%FFA8527D527D7DFD13FF7D52597D527DFD12FFA852527D527D7DFD18FF84%A8FD15FFA87DA87DA87DFD13FF53A87DA87DA8FD13FFFD06A8FD13FF7EA8%7DA87DFD62FFA8FD6CFF7DFD7EFF7DA8FD067D537D7D7DFD74FFA87DA852%7D527DA87D527D7DFD78FFA87D7DFFFFFFA8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T12:20:31+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T12:20:31+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T12:20:31+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qw/SPJ+oabqmsXJS0&#xA;u7fVGm9WOSqmdZZridfrFI2U+n66QLs37sV8FxVjJ8geZNITS9aWazin8uaU0EYjd3Xnbw3YUqGi&#xA;QlX+spUclA47h/h4lXoMWm64kYVtYaVh1ke3iDHfvx4j8MCr/qGs/wDV0/5IR/1xV31DWf8Aq6f8&#xA;kI/64q76hrP/AFdP+SEf9cVd9Q1n/q6f8kI/64q76hrP/V0/5IR/1xVTgsPMHA+tqi8+b04QJThy&#xA;PDrTfhSvviqp9Q1n/q6f8kI/64q76hrP/V0/5IR/1xV31DWf+rp/yQj/AK4q76hrP/V0/wCSEf8A&#xA;XFXfUNZ/6un/ACQj/riqmth5g9d+WqL6HBfTpAnLnVude1KcafTiqp9Q1n/q6f8AJCP+uKu+oaz/&#xA;ANXT/khH/XFXfUNZ/wCrp/yQj/rirvqGs/8AV0/5IR/1xV31DWf+rp/yQj/riqnJYeYOcXp6ovDm&#xA;fW5QJXhxanH358foriqp9Q1n/q6f8kI/64q76hrP/V0/5IR/1xV31DWf+rp/yQj/AK4q76hrP/V0&#xA;/wCSEf8AXFXfUNZ/6un/ACQj/riqnPYeYOA9HVF580rzgSnDkOfSu/CtPfFVT6hrP/V0/wCSEf8A&#xA;XFXfUNZ/6un/ACQj/rirvqGs/wDV0/5IR/1xVA63Br9tpF5dQ6uUktoZJlpbxbmNC1DyDbGmFWQY&#xA;FdiqW+Zv+Ub1Wn/LHcf8mmxVZ5Tupbvyro13K7SS3FjbSySOaszPCrFmPiSctzCpyHmWMTYCa5Uy&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7zL/yjmq/8&#xA;wdx/yabFUxxVjWieb5tV1HVbGO0jjlszKtnynNZTDcT2pEw9OsXKS1ZloHqhr2IxVjl/+ZD6hYwW&#xA;T6d9XTVdHa7mnMjyLHJcQXRihQiIBz/ob1LcdvfbCrKvILh/I3l8gEAadaL8QKmqwqp2IG22x79R&#xA;tluo/vJf1j97DH9I9yfZSzdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVSrzXOkPlrVGcMQbWdRwRnNTG3UIGIHv0xVNcVQraTpTNKzWUBadi87GJCXYoYyX2+&#xA;I8GK79jTFUq1vQtEtPL1+1pp9tbtbWd0LcxQxoYxJG3MJxA48u9OuKr/ACJ/yhHl7/tmWf8A1Dpl&#xA;2p/vJf1j97DH9I9yeZSzdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVS7zL/yjmq/8wdx/yabFUxxVoMpJAIJU0YDsaV3+/FUs8ySxHy5qVHU+pZ3BjoR8Q9Fj&#xA;8PjtiqF8gsW8k6GD/uuygiHyjQID9y5fqf7yXvYw+kJ9lDJ2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLvMv/KOar/zB3H/JpsVTHFWH6N5Pv9M1XWrwpZ3M&#xA;OqtIHhbmhmSSa6uB9YJRwxU3KwjY0jBPgoVSLUfIOswabpF/cXkKf4e0ieyexj5PEEWylgLwsVj+&#xA;KWsZYMm3EAE03Kss/L1SvknRwWLH6upqaV3JNNgOmXan+8PvYw5Mhyhk7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlXmuN5PLWqBJWhItZyWQKSQI2+E81YU&#xA;P34qmuKuxVLvMv8Ayjmq/wDMHcf8mmxVAfl//wAoXo//ADDJl+p/vJe9jDkGQZQydirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7zL/yjmq/8wdx/yabFUxxV&#xA;jGk+cnv9b1LTGt4oBaGUWztP8TmGVoSJU4fuuTJyT7VV3xVJtU88XF3o1pALe2dtY066luYoZ2eW&#xA;ARwSlpOPphTEHVUqWBJbYbYVT38vGDeTtOpXiBKqggggLM4AofADLtSf3hYx5Mjyhk7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlXmudIfLWqM4Yg2s6jgjO&#xA;amNuoQMQPfpirFPKGv3l7581jT5NSnuY7Jr6M2UkaIsSpcQtCx4yO4P76REZgvNACB8O5VnJsLEv&#xA;I5t4i8xBlbgtXIHEFjTeimm+BUp8waPpEOgahJDY28bwWdx6LpEilKxuTxIHw1qemKqf5ff8ohYf&#xA;89v+Tz5fqf7wsY8mQ5QydirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVS7zL/yjmq/8wdx/yabFWEeRYVg896vbRXFw8MC3aRwSNI/EfWY/78SXEwXj0t6Rpzj5&#xA;MeXXCr0cOhLAMKp9oV6bV3wKlnmKWJ/Lmp8HVudlcMlCDVREdx4jcYqgvIAI8qWiH7Ub3EbfOO5k&#xA;U/iMv1P1n4fcxjyZDlDJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVLvMv/KOar/zB3H/ACabFWNeRrzy3favqN7pWsx6lNctPJJA8bJcwgz7o5c8uEbfAo4j&#xA;amFVfRvJt/pmp6xd87W5h1Npg0UiMDLHLNc3IE5AIco1ysK7f3anuaAKx2b8udSsNKtbm4ntv9w+&#xA;ltbMYVbmBbwXiKImYDisovB6gp+wBv1UqzDyCpXyxCpYuRcXoLGlT/pk25oAMu1H1/AfcGMeTIco&#xA;ZOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpV5rjeTy1q&#xA;gSVoSLWclkCkkCNvhPNWFD9+KpL5a0/T4/NeqXdrqr3js1wstsI5Aiu04Lq8pLRSNCymNAoBUcga&#xA;nCrL8Cpd5l/5RzVf+YO4/wCTTYqgfIgI8uIpFGW6vlYHYgrezAg/IjL9T9fwH3BjDkn+UMnYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu8y/8o5qv/MHcf8A&#xA;JpsVYh5KF3/jTV5QkkdjcfWZRzhuIY2Y3C8TEJI415AFhNViefSgrhVGJ+Y3FfMUk1mlNFhuri3g&#xA;jmJmmFnLcxNG6lBwaT6mzpTlVT7bhUh1L8z7m6kk0SSxh4XVreQz3kEzSR+ogvkVojwHJW+odOvx&#xA;H+X4irNPJMiSaLOy1odS1Q0YFWHLUbhgGVqMpoRsRXLc/wBQ/qx/3IYQ5fE/en2Us3Yq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUq81zpD5a1RnDEG1nUcEZz&#xA;Uxt1CBiB79MVYZ5Gl06HzxqWl2npf6INRPrA3TvKZL2OR1BnQRp9XZ+EgjkbmSCaUphV6GLS0EjS&#xA;iGMSs3Nn4jkWClKk068SR8sCpV5h07T4/L+oSR2sSPBZXKQMqKCimJqhCB8IPtiqj5MI+q6oO66t&#xA;f8h4VuGI/A1y/PzH9UfcxiyDKGTsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdiqXeZf+Uc1X/mDuP8Ak02KsZ8gokuoX19LZ3dndz8pDHeWbRsq3LLdSRrdvBCz&#xA;pFPPJGqFj9nkBSmFWarLEzuiurPGQJFBBKkioBHbY1wKlfmO6tm8uahxmQ+vZ3BgowPMCFieG/xb&#xA;b7YqhPKI4zeYI+oTVpyD/rxRSf8AG9Mvz/w/1f1sY9WQ5QydirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7zL/wAo5qv/ADB3H/JpsVTHFWER/l9eoPMUS3kS&#xA;Ra/HdW7TJG6zKl091MJHbl8bxPdhE6URfegVSa8/La+04z60L2JDDZXontYUZIo1lN7MYrdK8QrN&#xA;eLyZhX93tTkQCrLfK4aHWfM1q8rTut9DMZX4ByJLG3XcIqLt6XUDLsv0wPl+ksI8yyPKGbsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqVea43k8taoElaEi1n&#xA;JZApJAjb4TzVhQ/fiqa4q7FUu8y/8o5qv/MHcf8AJpsVS+0/0fz7qES7rf6fbXDezwSyRH/gldfu&#xA;y+W+IeRLHqyHKGTsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdiqXeZf+Uc1X/mDuP8Ak02KpjirB4/zIIPmQzW0P+4WK4mtokm/eSG2lu4jHKCvwM4sWkWlfgPT&#xA;4d1Uo1D8zLi9jTSDZKVvbfVIbq/iMj25a2S5SM2z8eMgf6qzNU/DUDetcKsrlnhbzrpFyocLd6ff&#xA;wASI0bco5rZ1+Bwrjbn1Hhl0d8R8iP0sT9TJMoZOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KpV5rnSHy1qjOGINrOo4IzmpjbqEDED36YqmuKqX1W1DmT0U5&#xA;s3Nn4ipbjw5E068fhr4Yql3mK1tk8t6gqxIqwWdwIAFACfuWX4P5dttsVQvmFRH5g8s3RNB9cntm&#xA;+U1nMw/4aFRl+L6ZDy/SGMuYZBlDJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVLvMv8Ayjmq/wDMHcf8mmxVMcVWLNC8jxo6tJFQSICCV5Co5DtUYqlPmHUL&#xA;CTQNRjjuYnklsbh4kV1LMojYFlAO4HiMVQ/nYenY6dek0Wx1OylkbwR51gc/Qsxr7Zfp+ZHfE/rY&#xA;zZDlDJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLvMv/&#xA;ACjmq/8AMHcf8mmxVMcVYavkG6W81uRb6NItYjuICyxMJVjumeRmd+fxvG0nGPbZfnsVSe9/L+/s&#xA;dPa5lubRreyhv7t7eC3MNJ54ZUUxtzYhI0laiHYszMe1FDMPM2lXF55S1PT0kkubqS1l9CRgvMzB&#xA;S0W0aouzhaUGWYJcMwfNEhYRui6rbatpNrqVswMN1GHAH7J6Mh91YFSPEZHJAxkQeiQbCNyCXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlXmuN5PLWqBJWhItZ&#xA;yWQKSQI2+E81YUP34qmuKuxVLvMv/KOar/zB3H/JpsVTHFWP+THP1fVYO1vq18F/56zmf9c2X5+Y&#xA;P9EfqYxZBlDJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpd&#xA;5l/5RzVf+YO4/wCTTYqmOKsIh/MZz/iNpLaInRorqS3gSX9672kt1H6UgI+FpVsjKlK/AfapVSi8&#xA;/MTUtQil0hbS3uJru3u7cfVZGdriQC+RXtAR8aD6gOfhz9viKs7TzFp7qGEV6Af5rC9U/cYQcCsc&#xA;h1y50fXNSMWk6hf6Xqcq3aS29rMJIZ/TSKRHSZYqo3pBlKk7kimZB4ZxG9SGzDcFN185WxUE6Xqq&#xA;kjdTYT1HtspGVcHmGVq6eatOZQWttQQnqjadfEj/AIGEj8cHCld/ijTf983/AP3Dr/8A6oYOFXf4&#xA;o03/AHzf/wDcOv8A/qhjwqpwebLF0JktdQiYO6hTp98aqrFVbaD9pQG+nHhVU/xRpv8Avm//AO4d&#xA;f/8AVDHhV3+KNN/3zf8A/cOv/wDqhjwq7/FGm/75v/8AuHX/AP1Qx4Vd/ijTf983/wD3Dr//AKoY&#xA;8Ku/xRpv++b/AP7h1/8A9UMeFVNfNliZ3jNrqAiVFZZf0ffUZmLBlp6FfhCg/Tjwqqf4o03/AHzf&#xA;/wDcOv8A/qhjwq7/ABRpv++b/wD7h1//ANUMeFXf4o03/fN//wBw6/8A+qGPCrv8Uab/AL5v/wDu&#xA;HX//AFQx4Vd/ijTf983/AP3Dr/8A6oY8KqcnmyxV4glrqDq7lZG/R98OC8WblvBv8QC/Tjwqqf4o&#xA;03/fN/8A9w6//wCqGPCrv8Uab/vm/wD+4df/APVDHhV3+KNN/wB83/8A3Dr/AP6oY8Ku/wAUab/v&#xA;m/8A+4df/wDVDHhV3+KNN/3zf/8AcOv/APqhjwqpz+bLFEBjtdQlYuilRp98KKzBWbeD9lSW+jHh&#xA;VU/xRpv++b//ALh1/wD9UMeFXf4o03/fN/8A9w6//wCqGPCrv8Uab/vm/wD+4df/APVDHhVBa5r1&#xA;nc6FqEMFvfvLNbyxRJ+j70Eu8ZCjeHxPXpjSsjwKt9KLkW4LyJ5FqCtaca1+W2KpZ5i0y6u9BvLT&#xA;TSsF68DxWsgYxceQ+yJEBaPlSnJdx17Yq15WsL+w0OC1vj+/V5mWP1Gm9KKSZ3hh9R/if0YmWOv+&#xA;TiqbYq7FXYq7FWO+dLHV7qDTW0u2NzPa6hbXMg9f0AIoZA8gNdm5KONDirD5fI3nxhLxu6FrhmU/&#xA;XZh++Jl43/T9nmn7np8PsMKHqWBLsVdirsVSvzRBeT+X72Gys0v7t46QWkshhjd6igd1oQo6nx6Y&#xA;qwQeSPO/GP8A0qSRUtrZJhNfSiSeKIWwls34AopkMMx9UGv7z54UM+8uWd/ZaFY2moS+teQxKk0n&#xA;NpPiHbm1GenTkdz1wJTHFXYq7FXYq8xtPJXnRLqB45BbWi6i1zDAbp620ReyblxjHCX4La4Tievq&#xA;Vb7T4VZP5A0PXNH0qa31eX1JnlRkHryXO628UcsnOUBh606PLx/yvEnArJ8VdirsVdirzvXvJ/nO&#xA;68y6jqKXa3em3MUCR6es8tp+6hnVzbh0LceS82ZwPiJ4n4ehVMPJvlrzXperNPrF59bX6osU9z68&#xA;sn1iXhAqt6TgLH6Ril3H2vUr44qzTArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;zzU7X8yIb3ULjRYp/ULz0FzcQyQTRPcQ+l9VjeSQRSR2/q05qi1pUNWoKoW01X80bvXW0qVZrVlt&#xA;rdri4SC1MEZM1iJWSQtIPW9J7slDVdhxqRiqrHcfnSssIktomiF2TOy/VCTCCKBQZErEV5daSA06&#xA;9lXpGBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:A637C3031D2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A637C3031D2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A637C3031D2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T12:20:31+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -215.677 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 215.677 li
277.192 215.677 li
277.192 0 li
cp
clp
[1 0 0 1 0 0 ]ct
25.811 197.545 mo
276.911 197.545 li
276.911 3.14551 li
25.811 3.14551 li
25.811 197.545 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
25.811 197.545 mo
276.911 197.545 li
276.911 3.14551 li
25.811 3.14551 li
25.811 197.545 li
cp
clp
1.125 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
26.3496 10.689 mo
26.8887 58.4248 li
27.4277 101.185 li
27.9663 119.319 li
28.5054 129.234 li
29.0444 137.674 li
29.583 141.328 li
30.1221 143.232 li
30.6606 149.835 li
31.7383 160.074 li
32.8159 169.567 li
33.8936 175.447 li
34.4326 178.456 li
34.9712 180.343 li
35.5103 181.069 li
36.0488 181.105 li
36.5879 185.416 li
37.127 192.544 li
37.6655 194.227 li
38.2046 195.142 li
38.7432 195.783 li
39.2822 196.167 li
41.437 196.876 li
43.0537 197.115 li
46.2871 197.326 li
47.9033 197.377 li
48.4419 197.353 li
49.52 197.436 li
52.7529 197.458 li
53.8306 197.482 li
57.603 197.49 li
59.2188 197.521 li
64.0688 197.51 li
74.8452 197.539 li
86.1611 197.539 li
110.409 197.544 li
271.522 197.544 li
.884 .769 0 0 cmyk
@
grestore
25.811 197.545 mo
25.811 195.294 li
25.811 197.545 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.811 197.545 mo
25.811 195.295 li
@
25.811 5.39551 mo
25.811 3.14551 li
25.811 5.39551 li
cp
f
25.811 3.14551 mo
25.811 5.39551 li
@
26.2568 200.447 mo
25.9126 200.447 25.6563 200.615 25.4805 200.953 cv
25.3052 201.291 25.2241 201.796 25.2241 202.471 cv
25.2241 203.146 25.3052 203.652 25.4805 203.99 cv
25.6563 204.328 25.9126 204.496 26.2568 204.496 cv
26.6011 204.496 26.8574 204.328 27.0332 203.99 cv
27.2017 203.652 27.2896 203.146 27.2896 202.471 cv
27.2896 201.796 27.2017 201.291 27.0332 200.953 cv
26.8574 200.615 26.6011 200.447 26.2568 200.447 cv
26.2568 199.919 mo
26.8037 199.919 27.2222 200.142 27.519 200.574 cv
27.8091 201.013 27.958 201.648 27.958 202.471 cv
27.958 203.301 27.8091 203.936 27.519 204.368 cv
27.2222 204.8 26.8037 205.016 26.2568 205.016 cv
25.7031 205.016 25.2778 204.8 24.9878 204.368 cv
24.6973 203.936 24.5557 203.301 24.5557 202.471 cv
24.5557 201.648 24.6973 201.013 24.9878 200.574 cv
25.2778 200.142 25.7031 199.919 26.2568 199.919 cv
f
79.6948 197.545 mo
79.6948 195.295 li
f
79.6948 197.545 mo
79.6948 195.295 li
@
79.6948 3.14551 mo
79.6948 5.39551 li
f
79.6948 3.14551 mo
79.6948 5.39551 li
@
74.6787 204.368 mo
75.7656 204.368 li
75.7656 200.615 li
74.584 200.851 li
74.584 200.244 li
75.7588 200.007 li
76.4268 200.007 li
76.4268 204.368 li
77.5137 204.368 li
77.5137 204.928 li
74.6787 204.928 li
74.6787 204.368 li
cp
f
80.2813 200.447 mo
79.937 200.447 79.6807 200.615 79.5049 200.953 cv
79.3296 201.291 79.2485 201.796 79.2485 202.471 cv
79.2485 203.146 79.3296 203.652 79.5049 203.99 cv
79.6807 204.328 79.937 204.496 80.2813 204.496 cv
80.6255 204.496 80.8818 204.328 81.0576 203.99 cv
81.2261 203.652 81.314 203.146 81.314 202.471 cv
81.314 201.796 81.2261 201.291 81.0576 200.953 cv
80.8818 200.615 80.6255 200.447 80.2813 200.447 cv
80.2813 199.919 mo
80.8281 199.919 81.2466 200.142 81.5435 200.574 cv
81.8335 201.013 81.9819 201.648 81.9819 202.471 cv
81.9819 203.301 81.8335 203.936 81.5435 204.368 cv
81.2466 204.8 80.8281 205.016 80.2813 205.016 cv
79.7275 205.016 79.3022 204.8 79.0122 204.368 cv
78.7217 203.936 78.5801 203.301 78.5801 202.471 cv
78.5801 201.648 78.7217 201.013 79.0122 200.574 cv
79.3022 200.142 79.7275 199.919 80.2813 199.919 cv
f
84.5742 200.447 mo
84.23 200.447 83.9731 200.615 83.7979 200.953 cv
83.6226 201.291 83.5415 201.796 83.5415 202.471 cv
83.5415 203.146 83.6226 203.652 83.7979 203.99 cv
83.9731 204.328 84.23 204.496 84.5742 204.496 cv
84.9185 204.496 85.1748 204.328 85.3506 203.99 cv
85.519 203.652 85.6069 203.146 85.6069 202.471 cv
85.6069 201.796 85.519 201.291 85.3506 200.953 cv
85.1748 200.615 84.9185 200.447 84.5742 200.447 cv
84.5742 199.919 mo
85.1211 199.919 85.5396 200.142 85.8364 200.574 cv
86.1265 201.013 86.2749 201.648 86.2749 202.471 cv
86.2749 203.301 86.1265 203.936 85.8364 204.368 cv
85.5396 204.8 85.1211 205.016 84.5742 205.016 cv
84.0205 205.016 83.5952 204.8 83.3052 204.368 cv
83.0146 203.936 82.873 203.301 82.873 202.471 cv
82.873 201.648 83.0146 201.013 83.3052 200.574 cv
83.5952 200.142 84.0205 199.919 84.5742 199.919 cv
f
133.579 197.545 mo
133.579 195.295 li
f
133.579 197.545 mo
133.579 195.295 li
@
133.579 3.14551 mo
133.579 5.39551 li
f
133.579 3.14551 mo
133.579 5.39551 li
@
128.899 204.368 mo
131.221 204.368 li
131.221 204.928 li
128.096 204.928 li
128.096 204.368 li
128.345 204.111 128.689 203.76 129.128 203.315 cv
129.56 202.876 129.837 202.593 129.952 202.464 cv
130.168 202.228 130.316 202.025 130.397 201.857 cv
130.478 201.695 130.525 201.526 130.525 201.364 cv
130.525 201.107 130.431 200.892 130.249 200.73 cv
130.066 200.568 129.83 200.48 129.533 200.48 cv
129.324 200.48 129.101 200.52 128.872 200.587 cv
128.642 200.662 128.393 200.77 128.129 200.918 cv
128.129 200.244 li
128.399 200.136 128.649 200.054 128.878 200 cv
129.108 199.947 129.324 199.919 129.52 199.919 cv
130.026 199.919 130.431 200.048 130.735 200.304 cv
131.039 200.56 131.194 200.898 131.194 201.324 cv
131.194 201.526 131.153 201.722 131.079 201.897 cv
131.005 202.08 130.87 202.295 130.667 202.539 cv
130.613 202.606 130.438 202.789 130.141 203.091 cv
129.844 203.396 129.432 203.821 128.899 204.368 cv
f
134.042 200.447 mo
133.698 200.447 133.441 200.615 133.266 200.953 cv
133.09 201.291 133.009 201.796 133.009 202.471 cv
133.009 203.146 133.09 203.652 133.266 203.99 cv
133.441 204.328 133.698 204.496 134.042 204.496 cv
134.387 204.496 134.643 204.328 134.818 203.99 cv
134.987 203.652 135.075 203.146 135.075 202.471 cv
135.075 201.796 134.987 201.291 134.818 200.953 cv
134.643 200.615 134.387 200.447 134.042 200.447 cv
134.042 199.919 mo
134.589 199.919 135.007 200.142 135.305 200.574 cv
135.595 201.013 135.743 201.648 135.743 202.471 cv
135.743 203.301 135.595 203.936 135.305 204.368 cv
135.007 204.8 134.589 205.016 134.042 205.016 cv
133.489 205.016 133.063 204.8 132.773 204.368 cv
132.483 203.936 132.341 203.301 132.341 202.471 cv
132.341 201.648 132.483 201.013 132.773 200.574 cv
133.063 200.142 133.489 199.919 134.042 199.919 cv
f
138.335 200.447 mo
137.991 200.447 137.734 200.615 137.559 200.953 cv
137.383 201.291 137.302 201.796 137.302 202.471 cv
137.302 203.146 137.383 203.652 137.559 203.99 cv
137.734 204.328 137.991 204.496 138.335 204.496 cv
138.679 204.496 138.936 204.328 139.111 203.99 cv
139.28 203.652 139.368 203.146 139.368 202.471 cv
139.368 201.796 139.28 201.291 139.111 200.953 cv
138.936 200.615 138.679 200.447 138.335 200.447 cv
138.335 199.919 mo
138.882 199.919 139.3 200.142 139.598 200.574 cv
139.888 201.013 140.036 201.648 140.036 202.471 cv
140.036 203.301 139.888 203.936 139.598 204.368 cv
139.3 204.8 138.882 205.016 138.335 205.016 cv
137.782 205.016 137.356 204.8 137.066 204.368 cv
136.776 203.936 136.634 203.301 136.634 202.471 cv
136.634 201.648 136.776 201.013 137.066 200.574 cv
137.356 200.142 137.782 199.919 138.335 199.919 cv
f
187.463 197.545 mo
187.463 195.295 li
f
187.463 197.545 mo
187.463 195.295 li
@
187.463 3.14551 mo
187.463 5.39551 li
f
187.463 3.14551 mo
187.463 5.39551 li
@
184.24 202.275 mo
184.558 202.343 184.808 202.485 184.982 202.701 cv
185.158 202.917 185.253 203.187 185.253 203.498 cv
185.253 203.983 185.084 204.361 184.753 204.625 cv
184.416 204.888 183.943 205.016 183.329 205.016 cv
183.12 205.016 182.904 204.996 182.688 204.955 cv
182.472 204.921 182.242 204.861 182.013 204.78 cv
182.013 204.139 li
182.195 204.247 182.397 204.328 182.62 204.381 cv
182.836 204.435 183.065 204.462 183.309 204.462 cv
183.728 204.462 184.045 204.381 184.261 204.219 cv
184.477 204.058 184.592 203.814 184.592 203.498 cv
184.592 203.214 184.49 202.984 184.288 202.822 cv
184.085 202.66 183.802 202.572 183.438 202.572 cv
182.863 202.572 li
182.863 202.026 li
183.464 202.026 li
183.788 202.026 184.038 201.964 184.214 201.83 cv
184.389 201.702 184.477 201.513 184.477 201.263 cv
184.477 201.013 184.382 200.818 184.207 200.683 cv
184.024 200.547 183.768 200.48 183.438 200.48 cv
183.255 200.48 183.06 200.5 182.85 200.541 cv
182.641 200.582 182.411 200.642 182.161 200.723 cv
182.161 200.128 li
182.411 200.062 182.647 200.007 182.87 199.974 cv
183.086 199.94 183.295 199.919 183.498 199.919 cv
183.997 199.919 184.396 200.035 184.692 200.264 cv
184.989 200.494 185.138 200.804 185.138 201.195 cv
185.138 201.465 185.058 201.695 184.902 201.884 cv
184.747 202.073 184.523 202.208 184.24 202.275 cv
f
187.939 200.447 mo
187.595 200.447 187.339 200.615 187.163 200.953 cv
186.987 201.291 186.907 201.796 186.907 202.471 cv
186.907 203.146 186.987 203.652 187.163 203.99 cv
187.339 204.328 187.595 204.496 187.939 204.496 cv
188.284 204.496 188.54 204.328 188.716 203.99 cv
188.885 203.652 188.973 203.146 188.973 202.471 cv
188.973 201.796 188.885 201.291 188.716 200.953 cv
188.54 200.615 188.284 200.447 187.939 200.447 cv
187.939 199.919 mo
188.486 199.919 188.904 200.142 189.202 200.574 cv
189.492 201.013 189.64 201.648 189.64 202.471 cv
189.64 203.301 189.492 203.936 189.202 204.368 cv
188.904 204.8 188.486 205.016 187.939 205.016 cv
187.386 205.016 186.961 204.8 186.671 204.368 cv
186.38 203.936 186.238 203.301 186.238 202.471 cv
186.238 201.648 186.38 201.013 186.671 200.574 cv
186.961 200.142 187.386 199.919 187.939 199.919 cv
f
192.232 200.447 mo
191.888 200.447 191.632 200.615 191.456 200.953 cv
191.28 201.291 191.2 201.796 191.2 202.471 cv
191.2 203.146 191.28 203.652 191.456 203.99 cv
191.632 204.328 191.888 204.496 192.232 204.496 cv
192.577 204.496 192.833 204.328 193.009 203.99 cv
193.178 203.652 193.266 203.146 193.266 202.471 cv
193.266 201.796 193.178 201.291 193.009 200.953 cv
192.833 200.615 192.577 200.447 192.232 200.447 cv
192.232 199.919 mo
192.779 199.919 193.197 200.142 193.495 200.574 cv
193.785 201.013 193.934 201.648 193.934 202.471 cv
193.934 203.301 193.785 203.936 193.495 204.368 cv
193.197 204.8 192.779 205.016 192.232 205.016 cv
191.68 205.016 191.254 204.8 190.964 204.368 cv
190.674 203.936 190.532 203.301 190.532 202.471 cv
190.532 201.648 190.674 201.013 190.964 200.574 cv
191.254 200.142 191.68 199.919 192.232 199.919 cv
f
241.348 197.545 mo
241.348 195.295 li
f
241.348 197.545 mo
241.348 195.295 li
@
241.348 3.14551 mo
241.348 5.39551 li
f
241.348 3.14551 mo
241.348 5.39551 li
@
237.843 200.587 mo
236.162 203.214 li
237.843 203.214 li
237.843 200.587 li
237.668 200.007 mo
238.505 200.007 li
238.505 203.214 li
239.207 203.214 li
239.207 203.767 li
238.505 203.767 li
238.505 204.928 li
237.843 204.928 li
237.843 203.767 li
235.622 203.767 li
235.622 203.126 li
237.668 200.007 li
cp
f
241.731 200.447 mo
241.387 200.447 241.131 200.615 240.955 200.953 cv
240.779 201.291 240.698 201.796 240.698 202.471 cv
240.698 203.146 240.779 203.652 240.955 203.99 cv
241.131 204.328 241.387 204.496 241.731 204.496 cv
242.075 204.496 242.332 204.328 242.508 203.99 cv
242.677 203.652 242.764 203.146 242.764 202.471 cv
242.764 201.796 242.677 201.291 242.508 200.953 cv
242.332 200.615 242.075 200.447 241.731 200.447 cv
241.731 199.919 mo
242.278 199.919 242.696 200.142 242.993 200.574 cv
243.284 201.013 243.433 201.648 243.433 202.471 cv
243.433 203.301 243.284 203.936 242.993 204.368 cv
242.696 204.8 242.278 205.016 241.731 205.016 cv
241.178 205.016 240.753 204.8 240.462 204.368 cv
240.172 203.936 240.03 203.301 240.03 202.471 cv
240.03 201.648 240.172 201.013 240.462 200.574 cv
240.753 200.142 241.178 199.919 241.731 199.919 cv
f
246.024 200.447 mo
245.68 200.447 245.424 200.615 245.248 200.953 cv
245.073 201.291 244.991 201.796 244.991 202.471 cv
244.991 203.146 245.073 203.652 245.248 203.99 cv
245.424 204.328 245.68 204.496 246.024 204.496 cv
246.368 204.496 246.625 204.328 246.801 203.99 cv
246.969 203.652 247.057 203.146 247.057 202.471 cv
247.057 201.796 246.969 201.291 246.801 200.953 cv
246.625 200.615 246.368 200.447 246.024 200.447 cv
246.024 199.919 mo
246.571 199.919 246.989 200.142 247.286 200.574 cv
247.577 201.013 247.726 201.648 247.726 202.471 cv
247.726 203.301 247.577 203.936 247.286 204.368 cv
246.989 204.8 246.571 205.016 246.024 205.016 cv
245.472 205.016 245.046 204.8 244.755 204.368 cv
244.466 203.936 244.324 203.301 244.324 202.471 cv
244.324 201.648 244.466 201.013 244.755 200.574 cv
245.046 200.142 245.472 199.919 246.024 199.919 cv
f
140.904 209.906 mo
140.904 213.734 li
141.708 213.734 li
142.383 213.734 142.882 213.584 143.2 213.273 cv
143.51 212.964 143.672 212.477 143.672 211.816 cv
143.672 211.155 143.51 210.675 143.2 210.365 cv
142.882 210.06 142.383 209.906 141.708 209.906 cv
140.904 209.906 li
140.236 209.359 mo
141.606 209.359 li
142.558 209.359 143.26 209.562 143.706 209.953 cv
144.151 210.351 144.374 210.972 144.374 211.816 cv
144.374 212.666 144.145 213.288 143.699 213.686 cv
143.253 214.083 142.552 214.279 141.606 214.279 cv
140.236 214.279 li
140.236 209.359 li
f
148.565 212.282 mo
148.565 212.579 li
145.778 212.579 li
145.805 212.997 145.927 213.322 146.156 213.537 cv
146.378 213.753 146.689 213.861 147.094 213.861 cv
147.324 213.861 147.553 213.833 147.769 213.781 cv
147.986 213.726 148.208 213.638 148.424 213.517 cv
148.424 214.091 li
148.208 214.185 147.986 214.259 147.756 214.3 cv
147.526 214.34 147.29 214.368 147.061 214.368 cv
146.467 214.368 146 214.199 145.657 213.861 cv
145.312 213.524 145.144 213.058 145.144 212.47 cv
145.144 211.871 145.306 211.39 145.629 211.033 cv
145.953 210.682 146.399 210.5 146.952 210.5 cv
147.453 210.5 147.844 210.662 148.134 210.979 cv
148.417 211.302 148.565 211.735 148.565 212.282 cv
147.958 212.105 mo
147.951 211.775 147.857 211.512 147.682 211.309 cv
147.499 211.114 147.256 211.013 146.959 211.013 cv
146.622 211.013 146.352 211.114 146.15 211.302 cv
145.947 211.492 145.825 211.762 145.799 212.105 cv
147.958 212.105 li
f
151.988 212.39 mo
151.988 211.958 151.894 211.613 151.718 211.371 cv
151.536 211.127 151.279 211.006 150.955 211.006 cv
150.632 211.006 150.375 211.127 150.193 211.371 cv
150.01 211.613 149.922 211.958 149.922 212.39 cv
149.922 212.828 150.01 213.166 150.193 213.41 cv
150.375 213.652 150.632 213.774 150.955 213.774 cv
151.279 213.774 151.536 213.652 151.718 213.41 cv
151.894 213.166 151.988 212.828 151.988 212.39 cv
152.595 213.821 mo
152.595 214.441 152.454 214.908 152.177 215.218 cv
151.894 215.521 151.468 215.677 150.895 215.677 cv
150.679 215.677 150.482 215.657 150.293 215.63 cv
150.104 215.595 149.916 215.548 149.741 215.481 cv
149.741 214.894 li
149.916 214.988 150.092 215.056 150.267 215.103 cv
150.442 215.15 150.618 215.177 150.8 215.177 cv
151.192 215.177 151.488 215.07 151.691 214.867 cv
151.887 214.658 151.988 214.347 151.988 213.928 cv
151.988 213.632 li
151.859 213.848 151.698 214.009 151.502 214.117 cv
151.306 214.226 151.077 214.279 150.807 214.279 cv
150.348 214.279 149.983 214.111 149.706 213.767 cv
149.43 213.423 149.295 212.964 149.295 212.39 cv
149.295 211.822 149.43 211.364 149.706 211.019 cv
149.983 210.675 150.348 210.5 150.807 210.5 cv
151.077 210.5 151.306 210.553 151.502 210.662 cv
151.698 210.769 151.859 210.931 151.988 211.148 cv
151.988 210.587 li
152.595 210.587 li
152.595 213.821 li
f
155.984 211.154 mo
155.917 211.114 155.843 211.087 155.762 211.067 cv
155.681 211.053 155.593 211.04 155.498 211.04 cv
155.154 211.04 154.891 211.154 154.708 211.377 cv
154.52 211.6 154.432 211.917 154.432 212.335 cv
154.432 214.28 li
153.824 214.28 li
153.824 210.587 li
154.432 210.587 li
154.432 211.162 li
154.553 210.939 154.722 210.769 154.924 210.662 cv
155.127 210.554 155.377 210.5 155.674 210.5 cv
155.714 210.5 155.762 210.506 155.815 210.506 cv
155.862 210.513 155.917 210.52 155.984 210.534 cv
155.984 211.154 li
f
159.777 212.282 mo
159.777 212.579 li
156.99 212.579 li
157.017 212.997 157.139 213.322 157.368 213.537 cv
157.59 213.753 157.901 213.861 158.307 213.861 cv
158.536 213.861 158.766 213.833 158.981 213.781 cv
159.197 213.726 159.42 213.638 159.636 213.517 cv
159.636 214.091 li
159.42 214.185 159.197 214.259 158.968 214.3 cv
158.737 214.34 158.501 214.368 158.272 214.368 cv
157.679 214.368 157.212 214.199 156.868 213.861 cv
156.524 213.524 156.355 213.058 156.355 212.47 cv
156.355 211.871 156.518 211.39 156.842 211.033 cv
157.165 210.682 157.61 210.5 158.164 210.5 cv
158.664 210.5 159.056 210.662 159.345 210.979 cv
159.629 211.302 159.777 211.735 159.777 212.282 cv
159.17 212.105 mo
159.163 211.775 159.069 211.512 158.894 211.309 cv
158.711 211.114 158.468 211.013 158.171 211.013 cv
157.834 211.013 157.563 211.114 157.361 211.302 cv
157.159 211.492 157.037 211.762 157.01 212.105 cv
159.17 212.105 li
f
163.929 212.282 mo
163.929 212.579 li
161.142 212.579 li
161.168 212.997 161.29 213.322 161.52 213.537 cv
161.742 213.753 162.053 213.861 162.457 213.861 cv
162.687 213.861 162.916 213.833 163.133 213.781 cv
163.349 213.726 163.571 213.638 163.787 213.517 cv
163.787 214.091 li
163.571 214.185 163.349 214.259 163.119 214.3 cv
162.89 214.34 162.653 214.368 162.424 214.368 cv
161.83 214.368 161.364 214.199 161.02 213.861 cv
160.676 213.524 160.507 213.058 160.507 212.47 cv
160.507 211.871 160.669 211.39 160.993 211.033 cv
161.316 210.682 161.762 210.5 162.315 210.5 cv
162.815 210.5 163.207 210.662 163.497 210.979 cv
163.78 211.302 163.929 211.735 163.929 212.282 cv
163.321 212.105 mo
163.314 211.775 163.22 211.512 163.045 211.309 cv
162.862 211.114 162.619 211.013 162.322 211.013 cv
161.985 211.013 161.715 211.114 161.513 211.302 cv
161.31 211.492 161.188 211.762 161.161 212.105 cv
163.321 212.105 li
f
25.811 197.545 mo
28.061 197.545 li
f
25.811 197.545 mo
28.061 197.545 li
@
276.911 197.545 mo
274.661 197.545 li
f
276.911 197.545 mo
274.661 197.545 li
@
11.5659 194.927 mo
11.2217 194.927 10.9648 195.095 10.7896 195.433 cv
10.6143 195.771 10.5332 196.277 10.5332 196.952 cv
10.5332 197.626 10.6143 198.132 10.7896 198.47 cv
10.9648 198.808 11.2217 198.976 11.5659 198.976 cv
11.9102 198.976 12.1665 198.808 12.3423 198.47 cv
12.5107 198.132 12.5986 197.626 12.5986 196.952 cv
12.5986 196.277 12.5107 195.771 12.3423 195.433 cv
12.1665 195.095 11.9102 194.927 11.5659 194.927 cv
11.5659 194.4 mo
12.1128 194.4 12.5313 194.623 12.8281 195.054 cv
13.1182 195.494 13.2666 196.128 13.2666 196.952 cv
13.2666 197.782 13.1182 198.417 12.8281 198.848 cv
12.5313 199.281 12.1128 199.497 11.5659 199.497 cv
11.0122 199.497 10.5869 199.281 10.2969 198.848 cv
10.0063 198.417 9.86475 197.782 9.86475 196.952 cv
9.86475 196.128 10.0063 195.494 10.2969 195.054 cv
10.5869 194.623 11.0122 194.4 11.5659 194.4 cv
f
14.4346 198.572 mo
15.1299 198.572 li
15.1299 199.408 li
14.4346 199.408 li
14.4346 198.572 li
cp
f
18.0054 194.927 mo
17.6611 194.927 17.4048 195.095 17.229 195.433 cv
17.0537 195.771 16.9727 196.277 16.9727 196.952 cv
16.9727 197.626 17.0537 198.132 17.229 198.47 cv
17.4048 198.808 17.6611 198.976 18.0054 198.976 cv
18.3496 198.976 18.6064 198.808 18.7817 198.47 cv
18.9502 198.132 19.0381 197.626 19.0381 196.952 cv
19.0381 196.277 18.9502 195.771 18.7817 195.433 cv
18.6064 195.095 18.3496 194.927 18.0054 194.927 cv
18.0054 194.4 mo
18.5522 194.4 18.9707 194.623 19.2676 195.054 cv
19.5581 195.494 19.7065 196.128 19.7065 196.952 cv
19.7065 197.782 19.5581 198.417 19.2676 198.848 cv
18.9707 199.281 18.5522 199.497 18.0054 199.497 cv
17.4521 199.497 17.0269 199.281 16.7363 198.848 cv
16.4463 198.417 16.3047 197.782 16.3047 196.952 cv
16.3047 196.128 16.4463 195.494 16.7363 195.054 cv
17.0269 194.623 17.4521 194.4 18.0054 194.4 cv
f
22.2983 194.927 mo
21.9541 194.927 21.6978 195.095 21.522 195.433 cv
21.3467 195.771 21.2656 196.277 21.2656 196.952 cv
21.2656 197.626 21.3467 198.132 21.522 198.47 cv
21.6978 198.808 21.9541 198.976 22.2983 198.976 cv
22.6426 198.976 22.8989 198.808 23.0747 198.47 cv
23.2432 198.132 23.3311 197.626 23.3311 196.952 cv
23.3311 196.277 23.2432 195.771 23.0747 195.433 cv
22.8989 195.095 22.6426 194.927 22.2983 194.927 cv
22.2983 194.4 mo
22.8452 194.4 23.2637 194.623 23.5605 195.054 cv
23.8511 195.494 23.9995 196.128 23.9995 196.952 cv
23.9995 197.782 23.8511 198.417 23.5605 198.848 cv
23.2637 199.281 22.8452 199.497 22.2983 199.497 cv
21.7451 199.497 21.3198 199.281 21.0293 198.848 cv
20.7393 198.417 20.5972 197.782 20.5972 196.952 cv
20.5972 196.128 20.7393 195.494 21.0293 195.054 cv
21.3198 194.623 21.7451 194.4 22.2983 194.4 cv
f
25.811 175.946 mo
28.061 175.946 li
f
25.811 175.946 mo
28.061 175.946 li
@
276.911 175.946 mo
274.661 175.946 li
f
276.911 175.946 mo
274.661 175.946 li
@
11.7944 173.326 mo
11.4502 173.326 11.1934 173.496 11.0181 173.833 cv
10.8428 174.17 10.7617 174.676 10.7617 175.352 cv
10.7617 176.027 10.8428 176.533 11.0181 176.871 cv
11.1934 177.208 11.4502 177.376 11.7944 177.376 cv
12.1387 177.376 12.395 177.208 12.5708 176.871 cv
12.7393 176.533 12.8271 176.027 12.8271 175.352 cv
12.8271 174.676 12.7393 174.17 12.5708 173.833 cv
12.395 173.496 12.1387 173.326 11.7944 173.326 cv
11.7944 172.8 mo
12.3408 172.8 12.7598 173.022 13.0566 173.455 cv
13.3467 173.894 13.4951 174.528 13.4951 175.352 cv
13.4951 176.182 13.3467 176.816 13.0566 177.249 cv
12.7598 177.68 12.3408 177.896 11.7944 177.896 cv
11.2407 177.896 10.8154 177.68 10.5254 177.249 cv
10.2349 176.816 10.0933 176.182 10.0933 175.352 cv
10.0933 174.528 10.2349 173.894 10.5254 173.455 cv
10.8154 173.022 11.2407 172.8 11.7944 172.8 cv
f
14.6636 176.972 mo
15.3584 176.972 li
15.3584 177.809 li
14.6636 177.809 li
14.6636 176.972 li
cp
f
18.2339 173.326 mo
17.8896 173.326 17.6333 173.496 17.4575 173.833 cv
17.2822 174.17 17.2012 174.676 17.2012 175.352 cv
17.2012 176.027 17.2822 176.533 17.4575 176.871 cv
17.6333 177.208 17.8896 177.376 18.2339 177.376 cv
18.5781 177.376 18.835 177.208 19.0103 176.871 cv
19.1792 176.533 19.2666 176.027 19.2666 175.352 cv
19.2666 174.676 19.1792 174.17 19.0103 173.833 cv
18.835 173.496 18.5781 173.326 18.2339 173.326 cv
18.2339 172.8 mo
18.7808 172.8 19.1992 173.022 19.4961 173.455 cv
19.7866 173.894 19.9351 174.528 19.9351 175.352 cv
19.9351 176.182 19.7866 176.816 19.4961 177.249 cv
19.1992 177.68 18.7808 177.896 18.2339 177.896 cv
17.6807 177.896 17.2554 177.68 16.9648 177.249 cv
16.6748 176.816 16.5332 176.182 16.5332 175.352 cv
16.5332 174.528 16.6748 173.894 16.9648 173.455 cv
17.2554 173.022 17.6807 172.8 18.2339 172.8 cv
f
21.6763 177.249 mo
23.998 177.249 li
23.998 177.809 li
20.873 177.809 li
20.873 177.249 li
21.1226 176.992 21.4668 176.641 21.9058 176.195 cv
22.3379 175.757 22.6143 175.473 22.7295 175.344 cv
22.9453 175.108 23.0938 174.906 23.1748 174.738 cv
23.2559 174.576 23.3032 174.406 23.3032 174.245 cv
23.3032 173.988 23.2085 173.772 23.0264 173.61 cv
22.8442 173.448 22.6079 173.36 22.3105 173.36 cv
22.1016 173.36 21.8789 173.401 21.6494 173.468 cv
21.4199 173.543 21.1699 173.651 20.9067 173.799 cv
20.9067 173.125 li
21.1768 173.016 21.4268 172.935 21.6563 172.881 cv
21.8857 172.827 22.1016 172.8 22.2974 172.8 cv
22.8037 172.8 23.2085 172.928 23.5122 173.185 cv
23.8159 173.441 23.9712 173.779 23.9712 174.204 cv
23.9712 174.406 23.9307 174.603 23.8564 174.777 cv
23.7822 174.96 23.6475 175.176 23.4448 175.419 cv
23.3906 175.487 23.2153 175.668 22.9185 175.972 cv
22.6211 176.276 22.2095 176.701 21.6763 177.249 cv
f
25.811 154.345 mo
28.061 154.345 li
f
25.811 154.345 mo
28.061 154.345 li
@
276.911 154.345 mo
274.661 154.345 li
f
276.911 154.345 mo
274.661 154.345 li
@
11.4956 151.727 mo
11.1514 151.727 10.8945 151.896 10.7192 152.232 cv
10.5439 152.57 10.4629 153.076 10.4629 153.751 cv
10.4629 154.427 10.5439 154.933 10.7192 155.271 cv
10.8945 155.607 11.1514 155.777 11.4956 155.777 cv
11.8398 155.777 12.0962 155.607 12.272 155.271 cv
12.4404 154.933 12.5283 154.427 12.5283 153.751 cv
12.5283 153.076 12.4404 152.57 12.272 152.232 cv
12.0962 151.896 11.8398 151.727 11.4956 151.727 cv
11.4956 151.2 mo
12.0425 151.2 12.4609 151.423 12.7578 151.855 cv
13.0479 152.293 13.1963 152.928 13.1963 153.751 cv
13.1963 154.582 13.0479 155.216 12.7578 155.648 cv
12.4609 156.081 12.0425 156.296 11.4956 156.296 cv
10.9419 156.296 10.5166 156.081 10.2266 155.648 cv
9.93604 155.216 9.79443 154.582 9.79443 153.751 cv
9.79443 152.928 9.93604 152.293 10.2266 151.855 cv
10.5166 151.423 10.9419 151.2 11.4956 151.2 cv
f
14.3643 155.372 mo
15.0596 155.372 li
15.0596 156.208 li
14.3643 156.208 li
14.3643 155.372 li
cp
f
17.9351 151.727 mo
17.5908 151.727 17.3345 151.896 17.1587 152.232 cv
16.9834 152.57 16.9023 153.076 16.9023 153.751 cv
16.9023 154.427 16.9834 154.933 17.1587 155.271 cv
17.3345 155.607 17.5908 155.777 17.9351 155.777 cv
18.2793 155.777 18.5361 155.607 18.7114 155.271 cv
18.8799 154.933 18.9678 154.427 18.9678 153.751 cv
18.9678 153.076 18.8799 152.57 18.7114 152.232 cv
18.5361 151.896 18.2793 151.727 17.9351 151.727 cv
17.9351 151.2 mo
18.4819 151.2 18.9004 151.423 19.1973 151.855 cv
19.4878 152.293 19.6362 152.928 19.6362 153.751 cv
19.6362 154.582 19.4878 155.216 19.1973 155.648 cv
18.9004 156.081 18.4819 156.296 17.9351 156.296 cv
17.3818 156.296 16.9565 156.081 16.666 155.648 cv
16.376 155.216 16.2344 154.582 16.2344 153.751 cv
16.2344 152.928 16.376 152.293 16.666 151.855 cv
16.9565 151.423 17.3818 151.2 17.9351 151.2 cv
f
22.6328 151.869 mo
20.9521 154.494 li
22.6328 154.494 li
22.6328 151.869 li
22.4575 151.288 mo
23.2944 151.288 li
23.2944 154.494 li
23.9966 154.494 li
23.9966 155.047 li
23.2944 155.047 li
23.2944 156.208 li
22.6328 156.208 li
22.6328 155.047 li
20.4121 155.047 li
20.4121 154.407 li
22.4575 151.288 li
cp
f
25.811 132.745 mo
28.061 132.745 li
f
25.811 132.745 mo
28.061 132.745 li
@
276.911 132.745 mo
274.661 132.745 li
f
276.911 132.745 mo
274.661 132.745 li
@
11.5483 130.126 mo
11.2041 130.126 10.9473 130.295 10.772 130.633 cv
10.5967 130.97 10.5156 131.477 10.5156 132.152 cv
10.5156 132.827 10.5967 133.333 10.772 133.67 cv
10.9473 134.008 11.2041 134.176 11.5483 134.176 cv
11.8926 134.176 12.1489 134.008 12.3247 133.67 cv
12.4932 133.333 12.5811 132.827 12.5811 132.152 cv
12.5811 131.477 12.4932 130.97 12.3247 130.633 cv
12.1489 130.295 11.8926 130.126 11.5483 130.126 cv
11.5483 129.6 mo
12.0947 129.6 12.5137 129.823 12.8105 130.255 cv
13.1006 130.693 13.249 131.328 13.249 132.152 cv
13.249 132.982 13.1006 133.616 12.8105 134.048 cv
12.5137 134.48 12.0947 134.696 11.5483 134.696 cv
10.9946 134.696 10.5693 134.48 10.2793 134.048 cv
9.98877 133.616 9.84717 132.982 9.84717 132.152 cv
9.84717 131.328 9.98877 130.693 10.2793 130.255 cv
10.5693 129.823 10.9946 129.6 11.5483 129.6 cv
f
14.417 133.772 mo
15.1123 133.772 li
15.1123 134.608 li
14.417 134.608 li
14.417 133.772 li
cp
f
17.9878 130.126 mo
17.6436 130.126 17.3872 130.295 17.2114 130.633 cv
17.0361 130.97 16.9551 131.477 16.9551 132.152 cv
16.9551 132.827 17.0361 133.333 17.2114 133.67 cv
17.3872 134.008 17.6436 134.176 17.9878 134.176 cv
18.332 134.176 18.5889 134.008 18.7642 133.67 cv
18.9331 133.333 19.0205 132.827 19.0205 132.152 cv
19.0205 131.477 18.9331 130.97 18.7642 130.633 cv
18.5889 130.295 18.332 130.126 17.9878 130.126 cv
17.9878 129.6 mo
18.5347 129.6 18.9531 129.823 19.25 130.255 cv
19.5405 130.693 19.689 131.328 19.689 132.152 cv
19.689 132.982 19.5405 133.616 19.25 134.048 cv
18.9531 134.48 18.5347 134.696 17.9878 134.696 cv
17.4346 134.696 17.0093 134.48 16.7188 134.048 cv
16.4287 133.616 16.2871 132.982 16.2871 132.152 cv
16.2871 131.328 16.4287 130.693 16.7188 130.255 cv
17.0093 129.823 17.4346 129.6 17.9878 129.6 cv
f
22.3618 131.881 mo
22.0649 131.881 21.8286 131.99 21.6533 132.192 cv
21.4775 132.395 21.3896 132.678 21.3896 133.029 cv
21.3896 133.387 21.4775 133.67 21.6533 133.873 cv
21.8286 134.075 22.0649 134.177 22.3618 134.177 cv
22.6587 134.177 22.895 134.075 23.0708 133.873 cv
23.2461 133.67 23.334 133.387 23.334 133.029 cv
23.334 132.678 23.2461 132.395 23.0708 132.192 cv
22.895 131.99 22.6587 131.881 22.3618 131.881 cv
23.6851 129.796 mo
23.6851 130.403 li
23.5161 130.323 23.3472 130.262 23.1787 130.221 cv
23.0029 130.181 22.8345 130.161 22.6724 130.161 cv
22.2271 130.161 21.8892 130.309 21.6597 130.606 cv
21.4302 130.903 21.2954 131.355 21.2686 131.949 cv
21.3965 131.76 21.5586 131.612 21.7544 131.51 cv
21.9502 131.409 22.166 131.355 22.4023 131.355 cv
22.895 131.355 23.2866 131.51 23.5703 131.807 cv
23.8535 132.104 24.002 132.516 24.002 133.029 cv
24.002 133.536 23.8467 133.94 23.5498 134.244 cv
23.2529 134.548 22.8545 134.696 22.3618 134.696 cv
21.7949 134.696 21.356 134.48 21.0591 134.048 cv
20.7554 133.616 20.6069 132.982 20.6069 132.152 cv
20.6069 131.375 20.7891 130.754 21.1602 130.295 cv
21.5249 129.836 22.0244 129.6 22.6455 129.6 cv
22.8071 129.6 22.9761 129.621 23.1514 129.647 cv
23.3203 129.681 23.4956 129.729 23.6851 129.796 cv
f
25.811 111.146 mo
28.061 111.146 li
f
25.811 111.146 mo
28.061 111.146 li
@
276.911 111.146 mo
274.661 111.146 li
f
276.911 111.146 mo
274.661 111.146 li
@
11.5835 108.527 mo
11.2393 108.527 10.9824 108.696 10.8071 109.033 cv
10.6318 109.371 10.5508 109.876 10.5508 110.552 cv
10.5508 111.227 10.6318 111.732 10.8071 112.071 cv
10.9824 112.408 11.2393 112.576 11.5835 112.576 cv
11.9277 112.576 12.1841 112.408 12.3599 112.071 cv
12.5283 111.732 12.6162 111.227 12.6162 110.552 cv
12.6162 109.876 12.5283 109.371 12.3599 109.033 cv
12.1841 108.696 11.9277 108.527 11.5835 108.527 cv
11.5835 108 mo
12.1299 108 12.5488 108.223 12.8457 108.655 cv
13.1357 109.094 13.2842 109.729 13.2842 110.552 cv
13.2842 111.381 13.1357 112.016 12.8457 112.449 cv
12.5488 112.88 12.1299 113.097 11.5835 113.097 cv
11.0298 113.097 10.6045 112.88 10.3145 112.449 cv
10.0239 112.016 9.88232 111.381 9.88232 110.552 cv
9.88232 109.729 10.0239 109.094 10.3145 108.655 cv
10.6045 108.223 11.0298 108 11.5835 108 cv
f
14.4526 112.171 mo
15.1475 112.171 li
15.1475 113.008 li
14.4526 113.008 li
14.4526 112.171 li
cp
f
18.0229 108.527 mo
17.6787 108.527 17.4224 108.696 17.2466 109.033 cv
17.0713 109.371 16.9902 109.876 16.9902 110.552 cv
16.9902 111.227 17.0713 111.732 17.2466 112.071 cv
17.4224 112.408 17.6787 112.576 18.0229 112.576 cv
18.3672 112.576 18.624 112.408 18.7993 112.071 cv
18.9683 111.732 19.0557 111.227 19.0557 110.552 cv
19.0557 109.876 18.9683 109.371 18.7993 109.033 cv
18.624 108.696 18.3672 108.527 18.0229 108.527 cv
18.0229 108 mo
18.5698 108 18.9883 108.223 19.2852 108.655 cv
19.5757 109.094 19.7241 109.729 19.7241 110.552 cv
19.7241 111.381 19.5757 112.016 19.2852 112.449 cv
18.9883 112.88 18.5698 113.097 18.0229 113.097 cv
17.4697 113.097 17.0444 112.88 16.7539 112.449 cv
16.4639 112.016 16.3223 111.381 16.3223 110.552 cv
16.3223 109.729 16.4639 109.094 16.7539 108.655 cv
17.0444 108.223 17.4697 108 18.0229 108 cv
f
22.3159 110.673 mo
21.9985 110.673 21.749 110.761 21.5669 110.93 cv
21.3843 111.098 21.2969 111.328 21.2969 111.625 cv
21.2969 111.922 21.3843 112.159 21.5669 112.327 cv
21.749 112.496 21.9985 112.577 22.3159 112.577 cv
22.6265 112.577 22.876 112.496 23.0586 112.32 cv
23.2407 112.151 23.335 111.922 23.335 111.625 cv
23.335 111.328 23.2407 111.098 23.0654 110.93 cv
22.8828 110.761 22.6333 110.673 22.3159 110.673 cv
21.6475 110.39 mo
21.3643 110.322 21.1416 110.187 20.9795 109.991 cv
20.8174 109.795 20.7432 109.56 20.7432 109.276 cv
20.7432 108.884 20.8784 108.574 21.1616 108.344 cv
21.4385 108.115 21.8232 108 22.3159 108 cv
22.8018 108 23.1865 108.115 23.4702 108.344 cv
23.7471 108.574 23.8887 108.884 23.8887 109.276 cv
23.8887 109.56 23.8076 109.795 23.6455 109.991 cv
23.4839 110.187 23.2676 110.322 22.9844 110.39 cv
23.3013 110.464 23.5513 110.613 23.7334 110.828 cv
23.9092 111.044 24.0034 111.315 24.0034 111.625 cv
24.0034 112.104 23.855 112.469 23.5645 112.718 cv
23.2676 112.975 22.856 113.097 22.3159 113.097 cv
21.769 113.097 21.3506 112.975 21.0605 112.718 cv
20.77 112.469 20.6284 112.104 20.6284 111.625 cv
20.6284 111.315 20.7163 111.044 20.8984 110.828 cv
21.0737 110.613 21.3237 110.464 21.6475 110.39 cv
21.4048 109.336 mo
21.4048 109.593 21.479 109.795 21.6411 109.938 cv
21.8027 110.079 22.0259 110.146 22.3159 110.146 cv
22.5996 110.146 22.8223 110.079 22.9844 109.938 cv
23.146 109.795 23.2271 109.593 23.2271 109.336 cv
23.2271 109.08 23.146 108.884 22.9844 108.743 cv
22.8223 108.601 22.5996 108.527 22.3159 108.527 cv
22.0259 108.527 21.8027 108.601 21.6411 108.743 cv
21.479 108.884 21.4048 109.08 21.4048 109.336 cv
f
25.811 89.5454 mo
28.061 89.5454 li
f
25.811 89.5454 mo
28.061 89.5454 li
@
276.911 89.5454 mo
274.661 89.5454 li
f
276.911 89.5454 mo
274.661 89.5454 li
@
11.5659 86.9268 mo
11.2217 86.9268 10.9648 87.0952 10.7896 87.4331 cv
10.6143 87.7705 10.5332 88.2769 10.5332 88.9517 cv
10.5332 89.6265 10.6143 90.1328 10.7896 90.4702 cv
10.9648 90.8081 11.2217 90.9766 11.5659 90.9766 cv
11.9102 90.9766 12.1665 90.8081 12.3423 90.4702 cv
12.5107 90.1328 12.5986 89.6265 12.5986 88.9517 cv
12.5986 88.2769 12.5107 87.7705 12.3423 87.4331 cv
12.1665 87.0952 11.9102 86.9268 11.5659 86.9268 cv
11.5659 86.3999 mo
12.1128 86.3999 12.5313 86.623 12.8281 87.0547 cv
13.1182 87.4937 13.2666 88.1279 13.2666 88.9517 cv
13.2666 89.7817 13.1182 90.4165 12.8281 90.8481 cv
12.5313 91.2803 12.1128 91.4966 11.5659 91.4966 cv
11.0122 91.4966 10.5869 91.2803 10.2969 90.8481 cv
10.0063 90.4165 9.86475 89.7817 9.86475 88.9517 cv
9.86475 88.1279 10.0063 87.4937 10.2969 87.0547 cv
10.5869 86.623 11.0122 86.3999 11.5659 86.3999 cv
f
14.4346 90.5718 mo
15.1299 90.5718 li
15.1299 91.4087 li
14.4346 91.4087 li
14.4346 90.5718 li
cp
f
16.6958 90.8486 mo
17.7827 90.8486 li
17.7827 87.0952 li
16.6016 87.3315 li
16.6016 86.7241 li
17.7759 86.4878 li
18.4443 86.4878 li
18.4443 90.8486 li
19.5308 90.8486 li
19.5308 91.4087 li
16.6958 91.4087 li
16.6958 90.8486 li
cp
f
22.2983 86.9268 mo
21.9541 86.9268 21.6978 87.0952 21.522 87.4331 cv
21.3467 87.7705 21.2656 88.2769 21.2656 88.9517 cv
21.2656 89.6265 21.3467 90.1328 21.522 90.4702 cv
21.6978 90.8081 21.9541 90.9766 22.2983 90.9766 cv
22.6426 90.9766 22.8989 90.8081 23.0747 90.4702 cv
23.2432 90.1328 23.3311 89.6265 23.3311 88.9517 cv
23.3311 88.2769 23.2432 87.7705 23.0747 87.4331 cv
22.8989 87.0952 22.6426 86.9268 22.2983 86.9268 cv
22.2983 86.3999 mo
22.8452 86.3999 23.2637 86.623 23.5605 87.0547 cv
23.8511 87.4937 23.9995 88.1279 23.9995 88.9517 cv
23.9995 89.7817 23.8511 90.4165 23.5605 90.8481 cv
23.2637 91.2803 22.8452 91.4966 22.2983 91.4966 cv
21.7451 91.4966 21.3198 91.2803 21.0293 90.8481 cv
20.7393 90.4165 20.5972 89.7817 20.5972 88.9517 cv
20.5972 88.1279 20.7393 87.4937 21.0293 87.0547 cv
21.3198 86.623 21.7451 86.3999 22.2983 86.3999 cv
f
25.811 67.9453 mo
28.061 67.9453 li
f
25.811 67.9453 mo
28.061 67.9453 li
@
276.911 67.9453 mo
274.661 67.9453 li
f
276.911 67.9453 mo
274.661 67.9453 li
@
11.7944 65.3267 mo
11.4502 65.3267 11.1934 65.4956 11.0181 65.833 cv
10.8428 66.1704 10.7617 66.6768 10.7617 67.3516 cv
10.7617 68.0269 10.8428 68.5327 11.0181 68.8706 cv
11.1934 69.208 11.4502 69.3765 11.7944 69.3765 cv
12.1387 69.3765 12.395 69.208 12.5708 68.8706 cv
12.7393 68.5327 12.8271 68.0269 12.8271 67.3516 cv
12.8271 66.6768 12.7393 66.1704 12.5708 65.833 cv
12.395 65.4956 12.1387 65.3267 11.7944 65.3267 cv
11.7944 64.8003 mo
12.3408 64.8003 12.7598 65.0229 13.0566 65.4551 cv
13.3467 65.8936 13.4951 66.5283 13.4951 67.3516 cv
13.4951 68.1821 13.3467 68.8164 13.0566 69.2485 cv
12.7598 69.6802 12.3408 69.8965 11.7944 69.8965 cv
11.2407 69.8965 10.8154 69.6802 10.5254 69.2485 cv
10.2349 68.8164 10.0933 68.1821 10.0933 67.3516 cv
10.0933 66.5283 10.2349 65.8936 10.5254 65.4551 cv
10.8154 65.0229 11.2407 64.8003 11.7944 64.8003 cv
f
14.6636 68.9722 mo
15.3584 68.9722 li
15.3584 69.8091 li
14.6636 69.8091 li
14.6636 68.9722 li
cp
f
16.9243 69.2485 mo
18.0112 69.2485 li
18.0112 65.4951 li
16.8301 65.7314 li
16.8301 65.124 li
18.0044 64.8877 li
18.6729 64.8877 li
18.6729 69.2485 li
19.7593 69.2485 li
19.7593 69.8086 li
16.9243 69.8086 li
16.9243 69.2485 li
cp
f
21.6763 69.2485 mo
23.998 69.2485 li
23.998 69.8086 li
20.873 69.8086 li
20.873 69.2485 li
21.1226 68.9917 21.4668 68.6406 21.9058 68.1953 cv
22.3379 67.7563 22.6143 67.4731 22.7295 67.3447 cv
22.9453 67.1084 23.0938 66.9058 23.1748 66.7373 cv
23.2559 66.5752 23.3032 66.4067 23.3032 66.2446 cv
23.3032 65.9878 23.2085 65.772 23.0264 65.6099 cv
22.8442 65.4478 22.6079 65.3604 22.3105 65.3604 cv
22.1016 65.3604 21.8789 65.4009 21.6494 65.4683 cv
21.4199 65.5425 21.1699 65.6504 20.9067 65.7988 cv
20.9067 65.124 li
21.1768 65.0161 21.4268 64.9351 21.6563 64.8809 cv
21.8857 64.8271 22.1016 64.8003 22.2974 64.8003 cv
22.8037 64.8003 23.2085 64.9282 23.5122 65.1846 cv
23.8159 65.4414 23.9712 65.7788 23.9712 66.2041 cv
23.9712 66.4067 23.9307 66.6021 23.8564 66.7778 cv
23.7822 66.96 23.6475 67.1763 23.4448 67.4189 cv
23.3906 67.4863 23.2153 67.6689 22.9185 67.9727 cv
22.6211 68.2764 22.2095 68.7017 21.6763 69.2485 cv
f
25.811 46.3452 mo
28.061 46.3452 li
f
25.811 46.3452 mo
28.061 46.3452 li
@
276.911 46.3452 mo
274.661 46.3452 li
f
276.911 46.3452 mo
274.661 46.3452 li
@
11.4956 43.7266 mo
11.1514 43.7266 10.8945 43.8955 10.7192 44.2329 cv
10.5439 44.5703 10.4629 45.0767 10.4629 45.7515 cv
10.4629 46.4268 10.5439 46.9331 10.7192 47.2705 cv
10.8945 47.6079 11.1514 47.7769 11.4956 47.7769 cv
11.8398 47.7769 12.0962 47.6079 12.272 47.2705 cv
12.4404 46.9331 12.5283 46.4268 12.5283 45.7515 cv
12.5283 45.0767 12.4404 44.5703 12.272 44.2329 cv
12.0962 43.8955 11.8398 43.7266 11.4956 43.7266 cv
11.4956 43.2002 mo
12.0425 43.2002 12.4609 43.4229 12.7578 43.855 cv
13.0479 44.2939 13.1963 44.9282 13.1963 45.7515 cv
13.1963 46.582 13.0479 47.2163 12.7578 47.6484 cv
12.4609 48.0806 12.0425 48.2964 11.4956 48.2964 cv
10.9419 48.2964 10.5166 48.0806 10.2266 47.6484 cv
9.93604 47.2163 9.79443 46.582 9.79443 45.7515 cv
9.79443 44.9282 9.93604 44.2939 10.2266 43.855 cv
10.5166 43.4229 10.9419 43.2002 11.4956 43.2002 cv
f
14.3643 47.3721 mo
15.0596 47.3721 li
15.0596 48.209 li
14.3643 48.209 li
14.3643 47.3721 li
cp
f
16.6255 47.6484 mo
17.7124 47.6484 li
17.7124 43.8955 li
16.5313 44.1313 li
16.5313 43.5239 li
17.7056 43.2876 li
18.374 43.2876 li
18.374 47.6484 li
19.4604 47.6484 li
19.4604 48.2085 li
16.6255 48.2085 li
16.6255 47.6484 li
cp
f
22.6328 43.8687 mo
20.9521 46.4941 li
22.6328 46.4941 li
22.6328 43.8687 li
22.4575 43.2881 mo
23.2944 43.2881 li
23.2944 46.4941 li
23.9966 46.4941 li
23.9966 47.0479 li
23.2944 47.0479 li
23.2944 48.2085 li
22.6328 48.2085 li
22.6328 47.0479 li
20.4121 47.0479 li
20.4121 46.4067 li
22.4575 43.2881 li
cp
f
25.811 24.7456 mo
28.061 24.7456 li
f
25.811 24.7456 mo
28.061 24.7456 li
@
276.911 24.7456 mo
274.661 24.7456 li
f
276.911 24.7456 mo
274.661 24.7456 li
@
11.5483 22.1265 mo
11.2041 22.1265 10.9473 22.2954 10.772 22.6328 cv
10.5967 22.9702 10.5156 23.4766 10.5156 24.1514 cv
10.5156 24.8267 10.5967 25.3325 10.772 25.6704 cv
10.9473 26.0078 11.2041 26.1763 11.5483 26.1763 cv
11.8926 26.1763 12.1489 26.0078 12.3247 25.6704 cv
12.4932 25.3325 12.5811 24.8267 12.5811 24.1514 cv
12.5811 23.4766 12.4932 22.9702 12.3247 22.6328 cv
12.1489 22.2954 11.8926 22.1265 11.5483 22.1265 cv
11.5483 21.6001 mo
12.0947 21.6001 12.5137 21.8228 12.8105 22.2549 cv
13.1006 22.6934 13.249 23.3281 13.249 24.1514 cv
13.249 24.9819 13.1006 25.6162 12.8105 26.0483 cv
12.5137 26.4805 12.0947 26.6963 11.5483 26.6963 cv
10.9946 26.6963 10.5693 26.4805 10.2793 26.0483 cv
9.98877 25.6162 9.84717 24.9819 9.84717 24.1514 cv
9.84717 23.3281 9.98877 22.6934 10.2793 22.2549 cv
10.5693 21.8228 10.9946 21.6001 11.5483 21.6001 cv
f
14.417 25.7715 mo
15.1123 25.7715 li
15.1123 26.6084 li
14.417 26.6084 li
14.417 25.7715 li
cp
f
16.6782 26.0483 mo
17.7651 26.0483 li
17.7651 22.2954 li
16.584 22.5317 li
16.584 21.9243 li
17.7583 21.688 li
18.4268 21.688 li
18.4268 26.0483 li
19.5132 26.0483 li
19.5132 26.6089 li
16.6782 26.6089 li
16.6782 26.0483 li
cp
f
22.3618 23.8813 mo
22.0649 23.8813 21.8286 23.9897 21.6533 24.1919 cv
21.4775 24.3945 21.3896 24.6782 21.3896 25.0293 cv
21.3896 25.3867 21.4775 25.6704 21.6533 25.873 cv
21.8286 26.0752 22.0649 26.1768 22.3618 26.1768 cv
22.6587 26.1768 22.895 26.0752 23.0708 25.873 cv
23.2461 25.6704 23.334 25.3867 23.334 25.0293 cv
23.334 24.6782 23.2461 24.3945 23.0708 24.1919 cv
22.895 23.9897 22.6587 23.8813 22.3618 23.8813 cv
23.6851 21.7959 mo
23.6851 22.4033 li
23.5161 22.3223 23.3472 22.2617 23.1787 22.2212 cv
23.0029 22.1807 22.8345 22.1606 22.6724 22.1606 cv
22.2271 22.1606 21.8892 22.3091 21.6597 22.606 cv
21.4302 22.9028 21.2954 23.355 21.2686 23.9492 cv
21.3965 23.7603 21.5586 23.6118 21.7544 23.5103 cv
21.9502 23.4092 22.166 23.355 22.4023 23.355 cv
22.895 23.355 23.2866 23.5103 23.5703 23.8071 cv
23.8535 24.1045 24.002 24.5161 24.002 25.0293 cv
24.002 25.5356 23.8467 25.9404 23.5498 26.2441 cv
23.2529 26.5479 22.8545 26.6963 22.3618 26.6963 cv
21.7949 26.6963 21.356 26.4805 21.0591 26.0483 cv
20.7554 25.6162 20.6069 24.9819 20.6069 24.1519 cv
20.6069 23.3755 20.7891 22.7544 21.1602 22.2954 cv
21.5249 21.8364 22.0244 21.6001 22.6455 21.6001 cv
22.8071 21.6001 22.9761 21.6206 23.1514 21.6475 cv
23.3203 21.6812 23.4956 21.7285 23.6851 21.7959 cv
f
25.811 3.14551 mo
28.061 3.14551 li
f
25.811 3.14551 mo
28.061 3.14551 li
@
276.911 3.14551 mo
274.661 3.14551 li
f
276.911 3.14551 mo
274.661 3.14551 li
@
11.5835 .526367 mo
11.2393 .526367 10.9824 .695313 10.8071 1.03271 cv
10.6318 1.37012 10.5508 1.87646 10.5508 2.55176 cv
10.5508 3.22656 10.6318 3.73291 10.8071 4.07031 cv
10.9824 4.40771 11.2393 4.57666 11.5835 4.57666 cv
11.9277 4.57666 12.1841 4.40771 12.3599 4.07031 cv
12.5283 3.73291 12.6162 3.22656 12.6162 2.55176 cv
12.6162 1.87646 12.5283 1.37012 12.3599 1.03271 cv
12.1841 .695313 11.9277 .526367 11.5835 .526367 cv
11.5835 0 mo
12.1299 0 12.5488 .222656 12.8457 .654785 cv
13.1357 1.09375 13.2842 1.72803 13.2842 2.55176 cv
13.2842 3.38184 13.1357 4.01611 12.8457 4.44824 cv
12.5488 4.88037 12.1299 5.09619 11.5835 5.09619 cv
11.0298 5.09619 10.6045 4.88037 10.3145 4.44824 cv
10.0239 4.01611 9.88232 3.38184 9.88232 2.55176 cv
9.88232 1.72803 10.0239 1.09375 10.3145 .654785 cv
10.6045 .222656 11.0298 0 11.5835 0 cv
f
14.4526 4.17139 mo
15.1475 4.17139 li
15.1475 5.0083 li
14.4526 5.0083 li
14.4526 4.17139 li
cp
f
16.7134 4.44824 mo
17.8003 4.44824 li
17.8003 .695313 li
16.6191 .931641 li
16.6191 .324219 li
17.7935 .0878906 li
18.4619 .0878906 li
18.4619 4.44824 li
19.5483 4.44824 li
19.5483 5.00879 li
16.7134 5.00879 li
16.7134 4.44824 li
cp
f
22.3159 2.67334 mo
21.9985 2.67334 21.749 2.76074 21.5669 2.92969 cv
21.3843 3.09814 21.2969 3.32764 21.2969 3.625 cv
21.2969 3.92188 21.3843 4.1582 21.5669 4.32666 cv
21.749 4.49561 21.9985 4.57666 22.3159 4.57666 cv
22.6265 4.57666 22.876 4.49561 23.0586 4.31982 cv
23.2407 4.15137 23.335 3.92188 23.335 3.625 cv
23.335 3.32764 23.2407 3.09814 23.0654 2.92969 cv
22.8828 2.76074 22.6333 2.67334 22.3159 2.67334 cv
21.6475 2.38965 mo
21.3643 2.32227 21.1416 2.18701 20.9795 1.99121 cv
20.8174 1.79541 20.7432 1.55908 20.7432 1.27588 cv
20.7432 .884277 20.8784 .57373 21.1616 .344238 cv
21.4385 .114746 21.8232 0 22.3159 0 cv
22.8018 0 23.1865 .114746 23.4702 .344238 cv
23.7471 .57373 23.8887 .884277 23.8887 1.27588 cv
23.8887 1.55908 23.8076 1.79541 23.6455 1.99121 cv
23.4839 2.18701 23.2676 2.32227 22.9844 2.38965 cv
23.3013 2.46387 23.5513 2.6123 23.7334 2.82813 cv
23.9092 3.04443 24.0034 3.31445 24.0034 3.625 cv
24.0034 4.104 23.855 4.46875 23.5645 4.71826 cv
23.2676 4.9751 22.856 5.09619 22.3159 5.09619 cv
21.769 5.09619 21.3506 4.9751 21.0605 4.71826 cv
20.77 4.46875 20.6284 4.104 20.6284 3.625 cv
20.6284 3.31445 20.7163 3.04443 20.8984 2.82813 cv
21.0737 2.6123 21.3237 2.46387 21.6475 2.38965 cv
21.4048 1.33643 mo
21.4048 1.59326 21.479 1.79541 21.6411 1.9375 cv
21.8027 2.0791 22.0259 2.14648 22.3159 2.14648 cv
22.5996 2.14648 22.8223 2.0791 22.9844 1.9375 cv
23.146 1.79541 23.2271 1.59326 23.2271 1.33643 cv
23.2271 1.08008 23.146 .884277 22.9844 .742676 cv
22.8223 .601074 22.5996 .526855 22.3159 .526855 cv
22.0259 .526855 21.8027 .601074 21.6411 .742676 cv
21.479 .884277 21.4048 1.08008 21.4048 1.33643 cv
f
.209473 128.578 mo
.209473 125.75 li
.769531 125.75 li
.769531 127.91 li
2.22119 127.91 li
2.22119 125.959 li
2.78125 125.959 li
2.78125 127.91 li
5.13037 127.91 li
5.13037 128.578 li
.209473 128.578 li
cp
f
2.00488 122.584 mo
1.96436 122.651 1.9375 122.726 1.91699 122.807 cv
1.90381 122.888 1.89014 122.976 1.89014 123.07 cv
1.89014 123.415 2.00488 123.677 2.22754 123.86 cv
2.45068 124.049 2.76758 124.136 3.18604 124.136 cv
5.13037 124.136 li
5.13037 124.744 li
1.43799 124.744 li
1.43799 124.136 li
2.01172 124.136 li
1.78906 124.015 1.62012 123.846 1.51221 123.644 cv
1.4043 123.441 1.3501 123.191 1.3501 122.895 cv
1.3501 122.854 1.35693 122.807 1.35693 122.752 cv
1.36377 122.706 1.37061 122.651 1.38379 122.584 cv
2.00488 122.584 li
f
3.27441 120.269 mo
3.27441 120.761 3.33496 121.099 3.44287 121.288 cv
3.55762 121.477 3.74658 121.571 4.0166 121.571 cv
4.23291 121.571 4.4082 121.504 4.52979 121.362 cv
4.65771 121.22 4.71875 121.025 4.71875 120.782 cv
4.71875 120.444 4.604 120.174 4.36084 119.972 cv
4.12451 119.769 3.80762 119.668 3.40918 119.668 cv
3.27441 119.668 li
3.27441 120.269 li
3.02441 119.061 mo
5.13037 119.061 li
5.13037 119.668 li
4.57031 119.668 li
4.7998 119.81 4.96191 119.985 5.06299 120.188 cv
5.16406 120.391 5.21826 120.646 5.21826 120.943 cv
5.21826 121.321 5.11719 121.625 4.90771 121.849 cv
4.69824 122.071 4.41504 122.179 4.05713 122.179 cv
3.64551 122.179 3.33496 122.043 3.11914 121.76 cv
2.90967 121.483 2.80176 121.072 2.80176 120.518 cv
2.80176 119.668 li
2.74072 119.668 li
2.46436 119.668 2.24805 119.763 2.09277 119.945 cv
1.94434 120.126 1.86328 120.383 1.86328 120.714 cv
1.86328 120.931 1.89063 121.132 1.94434 121.335 cv
1.99854 121.538 2.07275 121.727 2.16699 121.909 cv
1.60693 121.909 li
1.52588 121.693 1.4585 121.477 1.41797 121.268 cv
1.37744 121.058 1.35059 120.856 1.35059 120.654 cv
1.35059 120.12 1.49219 119.722 1.76904 119.459 cv
2.0459 119.196 2.46436 119.061 3.02441 119.061 cv
f
1.57959 115.152 mo
2.14697 115.152 li
2.05225 115.328 1.98486 115.497 1.9375 115.672 cv
1.89014 115.847 1.86328 116.016 1.86328 116.192 cv
1.86328 116.583 1.9917 116.894 2.24121 117.109 cv
2.49121 117.326 2.84229 117.434 3.2876 117.434 cv
3.73975 117.434 4.09082 117.326 4.34082 117.109 cv
4.59033 116.894 4.71191 116.583 4.71191 116.192 cv
4.71191 116.016 4.69141 115.847 4.64453 115.672 cv
4.59717 115.497 4.52295 115.328 4.42822 115.152 cv
4.98877 115.152 li
5.06934 115.328 5.13037 115.503 5.16406 115.679 cv
5.19775 115.861 5.21826 116.057 5.21826 116.259 cv
5.21826 116.813 5.04932 117.258 4.69824 117.582 cv
4.354 117.913 3.88135 118.075 3.2876 118.075 cv
2.68701 118.075 2.21436 117.913 1.87012 117.582 cv
1.52588 117.251 1.3501 116.799 1.3501 116.219 cv
1.3501 116.03 1.37061 115.847 1.41113 115.672 cv
1.45166 115.497 1.50537 115.321 1.57959 115.152 cv
f
.39209 113.498 mo
1.43799 113.498 li
1.43799 112.25 li
1.91064 112.25 li
1.91064 113.498 li
3.91553 113.498 li
4.21924 113.498 4.41504 113.458 4.49609 113.376 cv
4.5835 113.296 4.62402 113.127 4.62402 112.871 cv
4.62402 112.25 li
5.13037 112.25 li
5.13037 112.871 li
5.13037 113.343 5.04248 113.667 4.86719 113.842 cv
4.69141 114.019 4.37451 114.105 3.91553 114.105 cv
1.91064 114.105 li
1.91064 114.551 li
1.43799 114.551 li
1.43799 114.105 li
.39209 114.105 li
.39209 113.498 li
f
1.43799 110.846 mo
5.12988 110.846 li
5.12988 111.453 li
1.43799 111.453 li
1.43799 110.846 li
cp
0 110.846 mo
.769531 110.846 li
.769531 111.453 li
0 111.453 li
0 110.846 li
cp
f
1.86328 108.146 mo
1.86328 108.47 1.9917 108.726 2.24805 108.915 cv
2.50439 109.104 2.84863 109.199 3.2876 109.199 cv
3.73291 109.199 4.07715 109.111 4.33398 108.922 cv
4.59033 108.733 4.71191 108.477 4.71191 108.146 cv
4.71191 107.822 4.59033 107.565 4.33398 107.376 cv
4.07715 107.187 3.73291 107.093 3.2876 107.093 cv
2.85547 107.093 2.50439 107.187 2.24805 107.376 cv
1.9917 107.565 1.86328 107.822 1.86328 108.146 cv
1.3501 108.146 mo
1.3501 107.619 1.52588 107.208 1.86328 106.904 cv
2.20752 106.606 2.68018 106.452 3.2876 106.452 cv
3.89502 106.452 4.36768 106.606 4.70508 106.904 cv
5.04932 107.208 5.21777 107.619 5.21777 108.146 cv
5.21777 108.679 5.04932 109.097 4.70508 109.395 cv
4.36768 109.691 3.89502 109.84 3.2876 109.84 cv
2.68018 109.84 2.20752 109.691 1.86328 109.395 cv
1.52588 109.097 1.3501 108.679 1.3501 108.146 cv
f
2.90283 102.375 mo
5.13037 102.375 li
5.13037 102.982 li
2.92285 102.982 li
2.57227 102.982 2.31543 103.056 2.14014 103.191 cv
1.96436 103.326 1.87695 103.529 1.87695 103.799 cv
1.87695 104.129 1.98486 104.386 2.19385 104.575 cv
2.40332 104.764 2.68701 104.858 3.04443 104.858 cv
5.13037 104.858 li
5.13037 105.466 li
1.43799 105.466 li
1.43799 104.858 li
2.01172 104.858 li
1.7959 104.717 1.62695 104.547 1.51904 104.346 cv
1.41113 104.15 1.3501 103.92 1.3501 103.664 cv
1.3501 103.245 1.48535 102.921 1.74854 102.705 cv
2.01172 102.489 2.39648 102.375 2.90283 102.375 cv
f
1.86328 97.5884 mo
1.86328 97.9126 1.9917 98.1689 2.24805 98.3579 cv
2.50439 98.5474 2.84863 98.6416 3.2876 98.6416 cv
3.73291 98.6416 4.07715 98.5537 4.33398 98.3647 cv
4.59033 98.1758 4.71191 97.9194 4.71191 97.5884 cv
4.71191 97.2646 4.59033 97.0083 4.33398 96.8188 cv
4.07715 96.6299 3.73291 96.5356 3.2876 96.5356 cv
2.85547 96.5356 2.50439 96.6299 2.24805 96.8188 cv
1.9917 97.0083 1.86328 97.2646 1.86328 97.5884 cv
1.3501 97.5884 mo
1.3501 97.062 1.52588 96.6504 1.86328 96.3467 cv
2.20752 96.0493 2.68018 95.8945 3.2876 95.8945 cv
3.89502 95.8945 4.36768 96.0493 4.70508 96.3467 cv
5.04932 96.6504 5.21777 97.062 5.21777 97.5884 cv
5.21777 98.1216 5.04932 98.5405 4.70508 98.8374 cv
4.36768 99.1343 3.89502 99.2827 3.2876 99.2827 cv
2.68018 99.2827 2.20752 99.1343 1.86328 98.8374 cv
1.52588 98.5405 1.3501 98.1216 1.3501 97.5884 cv
f
.000488281 93.019 mo
.506348 93.019 li
.506348 93.5991 li
.506348 93.8154 .553711 93.9707 .641602 94.0518 cv
.729492 94.1392 .884766 94.1797 1.11426 94.1797 cv
1.43799 94.1797 li
1.43799 93.1807 li
1.91064 93.1807 li
1.91064 94.1797 li
5.13037 94.1797 li
5.13037 94.7876 li
1.91064 94.7876 li
1.91064 95.3677 li
1.43799 95.3677 li
1.43799 94.7876 li
1.18164 94.7876 li
.776367 94.7876 .472656 94.6929 .283691 94.5039 cv
.0947266 94.3149 .000488281 94.0112 .000488281 93.5928 cv
.000488281 93.019 li
f
2.90283 87.2949 mo
5.13037 87.2949 li
5.13037 87.9023 li
2.92285 87.9023 li
2.57227 87.9023 2.31543 87.9766 2.14014 88.1118 cv
1.96436 88.2466 1.87695 88.4492 1.87695 88.7192 cv
1.87695 89.0498 1.98486 89.3066 2.19385 89.4956 cv
2.40332 89.6846 2.68701 89.7788 3.04443 89.7788 cv
5.13037 89.7788 li
5.13037 90.3862 li
1.43799 90.3862 li
1.43799 89.7788 li
2.01172 89.7788 li
1.7959 89.6372 1.62695 89.4683 1.51904 89.2661 cv
1.41113 89.0703 1.3501 88.8408 1.3501 88.5845 cv
1.3501 88.1655 1.48535 87.8418 1.74854 87.6255 cv
2.01172 87.4097 2.39648 87.2949 2.90283 87.2949 cv
f
1.86328 84.6558 mo
1.86328 84.98 1.9917 85.2363 2.24805 85.4253 cv
2.50439 85.6143 2.84863 85.7085 3.2876 85.7085 cv
3.73291 85.7085 4.07715 85.6211 4.33398 85.4321 cv
4.59033 85.2432 4.71191 84.9863 4.71191 84.6558 cv
4.71191 84.3315 4.59033 84.0752 4.33398 83.8862 cv
4.07715 83.6973 3.73291 83.603 3.2876 83.603 cv
2.85547 83.603 2.50439 83.6973 2.24805 83.8862 cv
1.9917 84.0752 1.86328 84.3315 1.86328 84.6558 cv
1.3501 84.6558 mo
1.3501 84.1294 1.52588 83.7173 1.86328 83.4136 cv
2.20752 83.1167 2.68018 82.9614 3.2876 82.9614 cv
3.89502 82.9614 4.36768 83.1167 4.70508 83.4136 cv
5.04932 83.7173 5.21777 84.1294 5.21777 84.6558 cv
5.21777 85.189 5.04932 85.6074 4.70508 85.9048 cv
4.36768 86.2017 3.89502 86.3501 3.2876 86.3501 cv
2.68018 86.3501 2.20752 86.2017 1.86328 85.9048 cv
1.52588 85.6074 1.3501 85.189 1.3501 84.6558 cv
f
1.99854 79.5259 mo
.000488281 79.5259 li
.000488281 78.9185 li
5.13037 78.9185 li
5.13037 79.5259 li
4.57666 79.5259 li
4.7998 79.6538 4.96143 79.8159 5.06299 80.0117 cv
5.16406 80.2075 5.21826 80.437 5.21826 80.707 cv
5.21826 81.1523 5.04248 81.5171 4.69141 81.8003 cv
4.34082 82.084 3.86816 82.2188 3.2876 82.2188 cv
2.70703 82.2188 2.24121 82.084 1.88379 81.8003 cv
1.53271 81.5171 1.35059 81.1523 1.35059 80.707 cv
1.35059 80.437 1.4043 80.2075 1.51221 80.0117 cv
1.62061 79.8159 1.78223 79.6538 1.99854 79.5259 cv
3.2876 81.5913 mo
3.73291 81.5913 4.08398 81.5034 4.34082 81.3213 cv
4.59717 81.1392 4.71875 80.8823 4.71875 80.5586 cv
4.71875 80.2412 4.59717 79.9917 4.34082 79.8022 cv
4.08398 79.6201 3.73291 79.5259 3.2876 79.5259 cv
2.84229 79.5259 2.49805 79.6201 2.24121 79.8022 cv
1.98486 79.9917 1.85645 80.2412 1.85645 80.5586 cv
1.85645 80.8823 1.98486 81.1392 2.24121 81.3213 cv
2.49805 81.5034 2.84229 81.5913 3.2876 81.5913 cv
f
3.13232 74.5103 mo
3.42969 74.5103 li
3.42969 77.2983 li
3.84814 77.271 4.17188 77.1499 4.3877 76.9204 cv
4.604 76.6973 4.71191 76.3872 4.71191 75.9819 cv
4.71191 75.7524 4.68506 75.5229 4.63086 75.3071 cv
4.57715 75.0908 4.48926 74.8682 4.36768 74.6523 cv
4.94141 74.6523 li
5.03613 74.8682 5.11035 75.0908 5.15088 75.3203 cv
5.19141 75.5498 5.21826 75.7861 5.21826 76.0156 cv
5.21826 76.6099 5.04932 77.0757 4.71191 77.4194 cv
4.37451 77.7642 3.90869 77.9326 3.32129 77.9326 cv
2.7207 77.9326 2.24121 77.7705 1.88379 77.4468 cv
1.53271 77.1226 1.35059 76.6772 1.35059 76.1235 cv
1.35059 75.624 1.51221 75.2329 1.82959 74.9424 cv
2.15381 74.6587 2.58594 74.5103 3.13232 74.5103 cv
2.95703 75.1177 mo
2.62598 75.1245 2.36279 75.2192 2.16064 75.3945 cv
1.96484 75.5771 1.86328 75.8198 1.86328 76.1167 cv
1.86328 76.4546 1.96484 76.7246 2.15381 76.9268 cv
2.34277 77.1294 2.61279 77.251 2.95703 77.2778 cv
2.95703 75.1177 li
f
1.5459 71.1626 mo
2.11963 71.1626 li
2.03857 71.3379 1.97119 71.5132 1.92383 71.6958 cv
1.8833 71.8848 1.85645 72.0737 1.85645 72.2695 cv
1.85645 72.5732 1.90381 72.8027 1.99805 72.9512 cv
2.09277 73.0996 2.22754 73.1738 2.41016 73.1738 cv
2.55176 73.1738 2.65967 73.1196 2.74072 73.0117 cv
2.82178 72.9038 2.90283 72.688 2.97021 72.3638 cv
3.01758 72.1548 li
3.11182 71.7227 3.24707 71.4189 3.40918 71.2368 cv
3.57764 71.061 3.81396 70.9663 4.11084 70.9663 cv
4.45508 70.9663 4.7251 71.1016 4.9209 71.3716 cv
5.12354 71.6416 5.21777 72.0195 5.21777 72.4922 cv
5.21777 72.6948 5.19775 72.897 5.16406 73.1133 cv
5.13037 73.3291 5.07617 73.5518 4.99512 73.7881 cv
4.36768 73.7881 li
4.48926 73.5654 4.57666 73.3428 4.63086 73.1265 cv
4.69141 72.9106 4.71875 72.6948 4.71875 72.4785 cv
4.71875 72.1948 4.67139 71.9722 4.57666 71.8169 cv
4.48242 71.6685 4.34033 71.5874 4.1582 71.5874 cv
3.99609 71.5874 3.86816 71.6484 3.78027 71.7563 cv
3.69238 71.8643 3.60498 72.1074 3.52393 72.4854 cv
3.47656 72.6948 li
3.39551 73.0728 3.27393 73.3491 3.11182 73.5112 cv
2.9502 73.6802 2.72705 73.7612 2.43701 73.7612 cv
2.09277 73.7612 1.82275 73.6396 1.63379 73.3965 cv
1.44482 73.1538 1.3501 72.8027 1.3501 72.3438 cv
1.3501 72.1206 1.37061 71.9116 1.4043 71.709 cv
1.43799 71.5132 1.48535 71.3311 1.5459 71.1626 cv
f
.5625 lw
25.811 197.545 mo
25.811 3.14502 li
@
25.811 197.545 mo
276.911 197.545 li
@
276.911 197.545 mo
276.911 3.14502 li
@
25.811 3.14551 mo
276.911 3.14551 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (012x008.eps)%%CreationDate: 27/05/15 12:20 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6pKB(-dl=iri-V[/"")Zk!uW*"iK,i4liS5dD/;#s45V-,mAj.QFsi(@I^Aq<R:hIaXY,l2<M_0:-"XDeXe04mU\V@KqX7<c%23kOd3b^s&d\^lWZIte0dsBVQ->shUPfkS;U8#MJhDJ77]qOV+oRU=![9e?slHS0WVtF6^G)NIlX4(?H(]UWrdtcI4oV@r4C/eP)%;q]E$o;V<.W)m/nYA,_mWd+buWqNgmo?jKWrHu<.4%j;DFTJR.@9aUSKEU7dmf^;XHu8f2l6cjO]sdfl*d?RorIhqXeU'I/!(;Er%W%/qGm)tV:./e)Xm^2uedHu(V]oQ4c+\/U"[+\m;c6mpD62t)fQF:(Y4?K`r[2[Y&*V2a%be/d'`Ll-O/VtC&95,/fTNZ'YJJ'kV%R,D-GYE/O0QI7kfC9?>9*89cOc9D442-DdF73S;aaluTrhRR<KoFQ.+J6]sc_cEnr5aCm6.uig5D#lsG5"U=sC?M_U6_3%Jr'9#'%dLN;YFhpB:ms9b.%k9PVf:1s*92+HAW`XPc0TEGNX*N5Me?kN3]nMp=.S^o]f.=eJ[&P(XIT:cYC&f]UA9HS(VbU(G*Hs^(5+5,>%H;QIiQYq"2C8+48/a\W1gml#%rU7&l$/LC@]jABDgOVboGUW&09)e==<,hhsUoml!5l=QC.]A0`%\dPCa[WU9m8]M$L?iNOKDq@s%qRZuqVP&FM%\K$jT<8Qo`?Ks"3rINNGcL*!<7f7@8d4&uDcmj?Z7Pc^=]!8HTTj"f.L`6@65eC/19M#%"+R#/lU!&q#+n_l=G0Sk%,.q&0_NSF@b#Bk[Zr4.[Ge6k)kEQC"LJU\.-1m9;a]!GJ4kGh+_'bJ!2Sgc*Ji9m"P%W,cpk1EL,5?h71JX$UThY"_^S"$b$()!j%#\I`^HpYI(00l4*:ab3KW?4_u]AO@F<%7lXr<&8t*YU.=0#8o\PI-iV:M;,_OkPA,ejleEq$3ahIIIQ18.UkaP@p]3i%L=Hp9>Yc%>TrQ&qqr-:60h)A_^D,t+Rf]6TRH<$HBC`)i@ClLC1K("PV`,DI7EEF>_c41Di??Fjb.rQSBs^i-(%hbOV7"&P_%C?ab86]gSEB\%.C9ULTbNW-BHQ1>Go&Z<%(%XPAWk;[LN&:'5bsmk0U!4uD*U+D'I!oY03FhZ^(]c;f1EZ/Da6>K&_8j,4-X3^'C=e.nsoV&PS;:e%dS0M-n:k>Li.".DKsm1h;H]m!6F.N$K^9B:Ao]Qc&)J'W`&(cl1?5\(#G?lm'&FDZ@'h\8=hOqkGuI]Xr"&c>X/OHrRRWm)^Z6Jq%AFNCm-3$kGdj,LpQi+1,nlu#<ru?glFrXPl6iV"@Osf6Bq7!b#IZ(u%?Rf80&W$3Trft[f\+iVq.Jt9mkKnGB8c"_MB"uDoe3;,*%)J5hA(mW7@A*WRJ)!IHtku:9`;lSCq]<mFp3ejWMY=_Bo2]]M`HD[L=n?#U:*:d/c!<YZJ0Hs%*PsrBll,#OW$$q7%72/eD2e<Br%iqbJB`:ZIt++Z]5!40k/i@SW-;(I#*nK*9Acu,Kgn<n;;KEiE@!\O)YBb50D\)A:q"4sD*l<*qW4h-^m_\T3j3#+_f6n;/<01X4l%*mkass!i]N\8G[@;Obe7i&6e.i@erPQYTKWTcV#-V[;):V7aR^d;<=j*SY$n:a=\Nhj,OXocJMopDe$!HE2YPW=uj[%4i&U8c-#F%RrZdG9j5<)&aIBkUJKr05^N:a!:Ga8kj=Hm7-c`]@5U=+I`d3g+^5dZL#Nb$:m,Ba=9/+(^Boj-OnG<f4eWj2YY$07VGZIdYr%D_%p'-`1T_?g*G.hg53`11d1#.Brp5E1Q^3=62*Y+=D;(kJ:0U9L9PaHU/<_KU/6?l6Zi'&bl9T$&)OrX!u!NV-(:9dZR*C%N.MTdgG%(4-;Q\]cdH45h!$ZK]MM&_kL=k&1pn)O2jL>FEc0[\YNIH$,/:b_sMW;lN`1`!T(I\82J#H(Jpdb'fYdJkE=h\;^iHU617u'g3j8%;nRu(0--Z!;E&Bli!4OKe+LAsXY#Y;;oAH;&Z'#2KPc90AB6K=9,(OdB\eh.oi'"Yi1hAe.W2HO+,;@4E*NX6)ZgfkRD.V_^B&Iu%39LmK>hFu6E^VRK[3;XtV.?0=D:=$5Hk[dsPeGYI;Xngf[^>Da!)O1!c2.WY`1m@L?L!#u@k@H5,MWC(Ktc/oPJ)`U?(ud@Lnq<,%Z*OAV*Qtu:3(1boTU+44gp\$us/`(l=7fV=s/tgo,P+%qIjPCds!Ou(pHS(mdUO>fb^<D;>uCV8IuW(hr."&P;RnQ446ce,^q(cV%LngK`5Q(uI<)_F-lDNslCM+k(Kikjt::qc//qI)b3JgA,#'lDW1q9n^7pof>8Bd`j2s@1G&<2qEPX<(G(duXUNLj;c%e.XYN)M<A%/2N=pb$.j9XWil2]3JdYOp1gmo;HJXeV#M0D24e,VW4X4EgLm#f[+HF=bHN0nu^R@K)*kJS#JL6Zl6&*nr/(=:X87=T/N*[`4qq)%>,_'`'4q;E8,.r4FOKqMO1%-PTD!0oG:PP_=_k_#e*!:e.k6iKIecolmH)d&'Hk,\rI"8&q<CI3(Q#*=W-7H?ndrKnJ$QiZDjTb(%>FdG;3e<TdJ(5L?[Y0r6Wm+`DWnM1-UHWBkS(17P_`?k3O2'&*.cQT+/RSmHeiV\G@MjOt(\(K:;*]GlTV?2i4h]CE2eu]ZS,Dmk%:13Vec<ar)\<Ge7r,giFkH.d;U\-h1fI7Y)U&;[#NYD=Wo=.@/e6`k@i3-k$e,.bIJkCgMJ0+]ZYnsI#`lD;]g4''H%B:Q/3Nn9%%)apq0rd&995.Y)fSg;BK[F>"tD:Ho2me5pQ;:pC<^H\/E,`(*a$#3[OD-.fPT=n=\Fc<[$?GRr63(!3C=^]q&/hTU4?^Em+7BbS*%NI!N`fPe4te&4K!9<$T+AGrMmNS[#T>r\j5e^Fo*_V)t2)`<<b;:<K6Ks!:]U2QqY[dLMp@]Nj.qYG.&@h4"`K0]H.X%N4BIJ9D1%CC#<9RY'Y#lWU;Rbhd@i>sS(W^R.@;,XGdR,>Y>!3YHg6`Q:b&CqUEolDFDY+\uEC-X44rL2.>9*[#P[htl&W$OkKcW^7a=_#cIn%(Bl$O5%"Y:8h4*G,pW7bJc/'o$,8Z1JK*.bhtX[D0'o<&Z`#3.btI&I4ag.D^AV$gOKiN-@/sFqjjeH]$`OP_iM9E@eiRQ@3NrIl%QS-lRHI\@C`^fK9;OAV_L#:-M]t0'@*qE!+d*pHi'r,fua$792:G7-"74Qg_p`J:$BsEUhhO2&=XOfXb^8(uV\eiVPf2`@&C^1r;%^o#Hn9;Hd!jB`bCSKQHB#M_-KQ"ILb*/E\Bhs%Vq7kNQqpn'TcN7@D:_uJD+]mdC$l#1*sobDVuD5>N!K]h[!;&)e3_=iH6<UJ>c%0/0D8D[6[dXq)&':^_9(btbRmW9LD.s8?[h;1V12B_&#(5Q@e<pn7jrg33:3n*`/_>1i1`W^KOn'R\GXeJaURd0WX),N,b?kG*oZ%KK?U>D]n'>3">nW>Z_bQ?Jdsc25Dh2N6eq'"d/M$5$i\a5j/8ue1]F'/Tn*Jp41uq?gcRb:%D0jn&1DM45K6e^&E,#XfpiJ_@k,I%s)'d"2Y;1uI^&HGZK<;jm/C3.#AmR6,*##_!GX\/=#-Gen`o3<Rs"D]a""V7rPHoHK3Z)*hnE^')9.C1K5G,Js-$>7J1^OT.n`2U%H/%3SrLa+",@J"NnbW9Bi=@m.XS(%fXlGD8s2m7qA3Q;I[`aq^qYq=&%l/-Sa#8Zjebs^"k3ntor9'j+H]N$+B%qU]eVnu\M^\,o%Xa71#]Y2@4gR;m>/_ekUA^+]6pUBIbeO/3P62c"gm*^mF.i(>J9:FGhJ:G[CMh\,/QOgLa)fN_a]JTX2%l,ij;=4!^>1HA"r<ccl%a`CC51l/@kBeB;#]-4UrLO!m*C$K;T8TbT?Dk/q!6nDM:J84>/c:bIrVIHt/=1*CpkDWrT`Q)K0I\8K)-`rGAn$Lq2Dk.O.J['Xs%Ut,Eo([t@_o9rdgPKd$u+kZ1";I\nOUi>F.fores5?fIlZ.Z_:8%7<Qrd@o9I$+`Cj&g$MG"mfu9HqcMO;2)QKT=!1;LQF(aM^a[%Q;$+D*,&DhZn#si]s[Q(Si;@Bjf@+3NF:S"HEuR@?+8YTq;//15(p^im\VpmH7_<@.=<([#4o(UI?0f2N"n!;']k0P-2j=Z?aeXP%C[80MV[`74PgEPikUCdG13T:Z]9T!XK*g^P^!fEGTVp<'=dj)%C8@[la9m1o9>3!6;*p(QrU_!Mc$HtUla/jDM9nS.So]N&f!a2M%7iUt"-@u/S<:(,lbA[epqpFi=&AMGo*GKImc*5((HD=>*hR2S9i,Y)PX4960rOZ;.91B0lHM.<Daq\Vc>qXjIZEa0@WWmV>9=7W6%^+pYh\;hKT'jKI^l(K@idtHf`;2[\ab3W4i?h%O\Y.jJ[r:$G6>B3kPZRn87IU&<T&6i&>h(Tj29OMj;8RbCAZ=2kpp@nV';=kQ5%8hR/t<"Fgq9X[s9RIh:ZH`]2>PAD0I"-2Zd^&pc1<gt2eGGNs&(dW]/70j;H&H^UIJ:^F5ebgh3G5r??Xg[kN(f,DHbE)&r=Va'a%<I=E&[r=hIrgGYXm5AbQs&M<Eh&-"dYFO-M>>7#Q\0b[cY$-[-!pV.+MIY>]H5=]V86q-.N7bT@LUV=<'*3O"#'R#LiHb\'M5[]#%e*%)_BS9Q+?ui+?>2O/12.?sRQM=(-M?%R;TWgG2SkKIo*krO?ks\NJ@c+B,g>H=\/Gqf>&8li7eK3HqHPqC2\a>AeM_sQaQtT`(%ZFe:FkA.+sX4R1g\9-].eaknhLK.8(g7E]i\)'AMrPi'ZaLETX>H4,ET:D_g@,Q`u,d8X(Y<_t*/eOT"=,q](PK/GGVAQjigRW*H%",HrY`2W?:p!SG!8jj#).=UBGH4FSnmhEYlet.I!b6mXGYL!,>UL(.3IfI^nFR+a@>O\ubm:?$`f<7=.,?qkUH7'Md>q5[Hp%PB9%_t+U2Coqc8SLq:3*nA](j6b;ih+ceQm[bGs<R!;c7;YUp']VC/+-#nmh>7)tW(3$FKjON"LWW%H[8&YVQJX*%dFI7IeRl-6i`jj_%I>+&(f8\]F.JVA>N@@bD_D3aob@LJiA/tVdkF6mNS?G2Y?2KI-d#Gs4g'[9V;udp5kQ7k5d_Ho\(F&1>,pg=[$n7$bV?$Q'.bX?Y%[*@N\*p5X^!8=7GUH9P4632bKS7Fb[7Gm'oJpK8fL'mHJ[22sOnZIW`iZcQnJRWib*@X;9Re=.ifX2AjkiDmt(2[FbiUstNNGp/X%S%X4DkJcnrq2<`@mEY0d0]/SCKN55XfaUCaT1&cMPK[>[0&@2&AqJIE<]b<S#'+g5O_M>)Q`3_V>bX8FBhif&Z6$#ua!X!cnP\aB%#re+78/q9>],2?$=5VA<o/jf3Od\A6#a6MP64(hNAnZg4p"qH49</^lmJ,.V62Jt*Wj_lW->)2PFeH3j+$DOC-$b+OD.8k@j_Yh-%-cWC-1COG1rG/<sLT.1@[@R=J@CZY]6*VL%]@g5o^d0$,l+XkiUPo:(dr)ht/^;-8;q6TkS'`9]mQI_4S[Wi-TJGumBh3`92Ot\E%DBY1Xp3Wk35A]=8XB_e.*c*\<@AB%LPDCl2MGSCt2KlQ6]dVJFPn_4s7Y!d+UAYiUJI/E$M,GWJ.f##hSglDf6C6B#&D$.&O1/^@%-en#`*q(,/&d0WThX\r@L(sM\Z=<BV@K\GpY@^H#hoLE"dP$*J9-#jhG@CshH<p0([.N`=oDtjWGt'(.[\F4'j,rUp(Zg9H>X:(W%3JJ;M<9BY6#+KrmgB,VG.T.KA/J3.B'cJ4ekk5q%Ge75hY8W;GWd2,XQr.!_b_EJkRc#JgP^:BVnf144.F6uj.D[,VdVC]YFWC.5%eYm&n`>g$pDmI5o#`sJ[4-/gOl:^*!bcl$-:4,T'jk2F"-mCR,HadhOf`W51T8Og<[#?BVQV#5]!>1Rj9cOjUQ)$rP8P\AI&g_@S%5nH#o"9Y%-mcR(Z%2$k2E$5dY]$Z=ka)O,8XN4Y\,p+Gc;OR/X*"hP&(^gkkf/LD00@W;89;bu!7Wj=DF0G6<)*X4*WkKPBRsF:_%Pjj.pc;KeQn^CJ-,**%gOEadN@q`<hP%4?`M:_"-C%5t/ho,#2lT[HQ2*]6t@a/Y;p;C,,YPKEJ+!6:dS)3R<mMB2l;<1H&!M5G'%(siBY/6)\[$iu(74=fjf3bG?$_?a9,f?@lSIf8i6TG6N!(Zs?,HTHQ'N0RaC3e-XWJ&;e_p%@q5<p@**rOF_0\lp]a<c6L`;f.!V%e9]I%oUXOV@U\CUQ-IOVIBI+$8%3AJiV`jAHN'J]bl95bAJPcZ9:861:f@_%2m^#?1K2Nr1:gZ`&.r"?1tI_[fCUXbGH>$7lZQk0%\^IdeFJU=U.Q^H!@Og-sXKB3Q0!p]52YPtpR^9>@Q*7Q4NQZA*r`1K(<c625X.-/nlJ/8mUp]DbK/F*XN&7]d0es-'O1UfKB@4iF%^ZNk8<=ZgeR>%Q-RE9l)2DVi"ed"#`-TB:P3)p=*fdX+m1n;#93SR)9Tk'Yd`p/OLfXfVu*g(C5`IfceUP(,,rj;VmJBZ;ep!1YE%#L:Zng3.(30K!5$3npX8p2fj'JcOO7V)Ea#P0kn+Y<*9*dNK1e+V1gr]fU^Z9P@(?kVX*]nlVpaiPI($8lJl"[H9.@ZP-C(F6DMo%G7d_en\mPk/o!\;U>G?"=)(iAG76FBq&*H%b/ACGAuaAkWjMBhS=c6uR6&%%Q'-TYW`:OkqFX;Tf&W(%r7_[`e@<%j.d($NJgsK+%]+^J';YKnGn2.)Gb4]B3+LKRb]`[:KN4g$uqc@VF.a9,.mUPb)Q(Bj[1[%9&e^pip;erbgPF3:qT,QndFotg'Pj>.s.KuqZmQP_6%/mkj,kP?]7H87-gDhYu!*uE7a67]GO^X$M2V5^Q">1BTD7Cu4ah;Cn$lpp+4rEpeIddG?5N>bc1.Z:;ahfCSXp$JE\6Ef5o'j!C&%XE:3-Al"tHBu`N).[>dE$Eb(ZZG3NmAG3?T=:D7;Wba=N?NsTCX_c;4BC-XFV::NJHBSa&[&l9FZTb3g5;H:.8YtPGc\eXKgD/hc%?<!WH\\:[[l7K*:W@Y(#DYr17E-GLqWRRBD5AQP)YY%R2iS9(OWta)NWnmV[gA',W3Xr1_CjAJ\X`V=,VCNgThCU3i:Upd2941uu%GNq\B\%12-8hXhGDkWGf^&OhX=&]O7ct^%TbPh-,E2<ecp7ejtZ5Qt^HZ(+8d`\QUM&m`4"5A.'>cmI]Jh&uh.mH2rH?]^so\oRd%f2jE(Ki\*6`iN0,._U%jLMgTV\C.-:mB:$Od/tnIg0I*)3OGoZm+Hb5Usb_?V>Tkk(KdYXZoF3$GZZMl8sd83V.^PV<pAehI\N+A%kW,9`jDGL.F1>+bAo2_3gX62cH#@=0.UD6WBqG<OVm=e:hU=KbG.$?hL#(>P.]p(e54<9$"qC2b;X)bl]'D5,$_?_)=p?J$j%<0Q%A?3)LaP'haq'qqBhO1T=V<dFGU8Lo\IA(Kt4l]0-WMSUg\'c_0r7.,\<3,fKg=`R:R/HA`r:\b?Za<.O?2Bi\Z$2pBIm,6t>J9lD%q7I)Vk@4:m[3V@@T&0BC^FmEq^4YnI'D.MmIUmatdiiY)5+%opB'Ic/FkcZ?EmuI+GPBSV5Ae,1>c4m$cg?qPV>JW;N])+X*<,TD%qD]^kqD`(]DJIY0YG#kVbW".]n>@q[^R'SE@ZFTT`tPX04!AN(44?8A(L?V(pWU,4_gO9>Z2BA@<@=+1:LEh@RZ(_WcS%r_bf^E>%HBin-AAXtqQ^1[kdlrdTB-6N?d's&I:>.e':HpM?X^=@i.EB.d.r12SDklIo=uJa?mV0\pFm.<+k0)FD36.mPe%>?qThik$LG/>I%VgI.oKGr.@c&=QG>7,Z1gel4pF0*VZZcg(\oB3m"lh"mG^Z*kfSb)%3\]pf1=D-foesST>oQ:%Tj&gbf68L&G/2#3__2"Gh.uN7Y%%a?J!Ajg=0oqil&/S5dmg`$t'r],ap4MWG7L!jZI5-C!HF/QemVnjL\0XSRZkn^UpSI'.Fojj2F#&70[+k@u_;";4P''u:<9[]fT%U!oMt@H@(lfOP]aTGi<`nG4I>+0.%TAD8HR&FM)qN3upTr/14A/#6'YEq5s\\<Fs];(W3c\"T(]+m=t*>,bEqI<66(.Ff4O0OKId%$C03'8r^/+WD_nmlV+=c2Ea2P.d^!Ff2&5_?hZ:"m<e-aN`E[Hn5Pjg$*=oHG?#$NP^;@LG2R5fI11k_iA%.VRtpL!:/nfZBAE6i%'upfXPsXj,*aIr%-6H29Nl>tF#;`%^`Z@]bV;RE)Hht,;ZKgs=gAAtE.c/ajU.^YiO$@!rfQ,R(pLF$q=LKn,--^W`GLTr8Tf1eH%c:]rk6?/W1^V$m9aS]+g3nUqb[[_22Rk.ksHqZ.ELl\t;D!daIqKT^]0m0Uh>A6b%7t>!lh3n+lBioGcmn1Z;<Qe4Fc6>H/J@0E`%IOlJIBEd%>AebSd:t&J"UkiZ\$lcm^_L&t\jWCDWaF[04*V88:W+B1Nmdo9r,Pg=%rLAUMmUqQ"L\Ue]M7R%R7\5oJki9=]B4eLF%"%;]0NhfHp2i+8/Q4il_1P8*iE']sr=*DQANGkO(1L5A&g"I69%q[hL:st==R8`[c&EWsJ$/1/!@f,U&7Bc5E36Bo6(YV&lHnRh`%%jLOS4UD#<nk!LGZR@<m0)C^0F'F,DEQF:KqskpQpICONmJH?c^8I-8*k=bL6Y_W_pCXa=X]p!f87m-A:JR8u3pn5=*m<ECeVEOO%o)3GrAg"t2,&r\-:1N;t_RmiDB5\&5$fqQ_6$^L_HMaQ4B$mZEZIo`=8j&FVfX)Ti<q>)aUhT]%jnW=AUS2&'pSWT1dh#DLo1<+c%5KQ^MhX;-O19T`E20+<l'YK`Fi(E4@0[I:D7,E&8Umi.RC3=9'-Va_1fE/HW`[IO>.D3.P=./Do8]DE1_)tbHW;&JK11X_)S*M0e%X-Fg0__[1&l<SPlqBrQr-e3nYFTF\oBNs\86_@a/b;`__&+*3ESa_3A;bUZpb=3679^u7O);4O5:6\-aC.iJ,OKQ"YQYoVEOX-^b%)bRef;<[Vg,._=!^Ir=rTjq=W)esbPAbsm?L,oI2*[;aW4oL;ORCced^uXtAYhn1?NpM!R=PpoYfR'W8HgS1i=@s1Q'a&@W;8)Y9%&<`&L.5`7oa`A8OW,S)`G?psBF/OCLJ"L3_mIP]$Y8Q`SOo@_Q=HX`\55?*c(o.`]OI\8L-!?huK\3OAOPN;00nXHs`ig>?@o&Z#%ED3fS6ZB-ofna$[q?#:*RbnCmUY$^Gn]i8Ni+[ufgU_j[,RnRA[Bd8*0fH/h])J9n&1A3as)_RNbmiUV]"3BQPWM1\UpA_*c,B71%gf`t6@6)ga$_JWq2;F$I$8I3!/VoYP+^R,O&QU$>:!+-QD`JXX`4OZY=*n:b3$0nj^?r_copnlX6nB)f)j3Wa1!+hn0PV-SQb5/G%NP=e3`0V]]8Gj3aXTj3d6_7\K8I`ddJ9oS5.c.np`K%t=nSgHZPB$,A@KZ,HbJqc482:rt!-ST%!<2\;idK=nRDG:4b]8cB&3.E!%Uc-G`s0E(@Jl`94Qcd>A@&^&i+1g4Kk;2sEEZ4Hkl$q=*`iM?-&"L7&`2iqR%i#:"aW>&><Eu/:57:d4ht*mn@$'N=>mcuC5uKd!%l<M2tR$&2"(1);"#8LTm?N301L;Yks)qMBa;49s*ruUNA3/iiPUS^!$e\*'nYcN2lb1I"19JVc`Df*Q"8Wpa<2l[?Bn+3pl$c=ne%[KMOuZ&FO/lgpMG'[I$]QG=Lk!I#efi0e<K]$_N^AH/%`9HuPg179!J9(*-h3_Wlnn8@Jl2OYO=%'k0%Y^oVX^T_A1,pHq<,l4h8%*sdX:=t[0rWGFo%[,2ZJ%j:%%P2#m5O`.0&A\:B:kZhJj!Ed+XRY)OZcRrnRQm_njrD:3ZiXI!n+sf7;0+3\<1\0rCBGH-\HkG8?%H<3MajHIf4Z\U9Ee^nI5--5%747%qOAE0+s"]YH#2lKFTV+Im^iKI70mW@#uTn?ZLM8r^d(s-rF%#H>s",!fh%lOL8#V-Vk$]=Z`%*r/-bH.N9g]o,9/'p)1p0^JBjMg1.qW92H,d=h*t7D*bcnDP]JXor9=I_[hT:fdRpcbV_;#W"i6\K`\0pG:E6dCPtAWL0qPWC915%g%^TlQ[!H:qI1.sk*polaMqi>/qcY4hG]#Ol(f(H;YO&'NPV@JhY0d)%>uUfU8=%5)1Clej,$kK>1f;*lSsS`c1,tE07q40aO6fE%Zud/OV9k3.C_n:QGl$RB!Tm[<*I?$H/:o6)6K"8_2]h=k(6P117pF!O7Ma*Jq>N-*Z<,B9\sWh2HVG>6?=+0[97-O>qTZLOBc*TF%=?MVW4JOkQT#`Jp4tL,(<A:$DOEqaYQ=b%[=*PrqE^-k.M6*BK@o9!EC>Z[R1dnReB['*p*t>7aVh&%T#)`2YYK#V['3*hn0N?&T%N.tD*6gI]08jr*^#P[]allGB!<-Io]&F`)KKule=N$k<K+#Spa4<satJ0ek[jRN4WUZ)/qPT'7TKk0<qE\r1/?RZ33+I`A)?U@9#%V:gP!Yf&GYi7?poC/:CV/s09SiX<ggF<.13hAA8`G$bd@l&pK%eaD`kg)Xt;.E<(#G^OIeH86S<j^GdN6Mqb?cc\X1M27eg`C)#:%Lg]?8%SO$!XdEJ^)jlNYE0:G5d^6.Bg/%M#d3Lg*]QAk2!^O[_J9p/p.-''!$cq=/Dj%3X!30"!T3C)9(kWA9o6-l(jKQ#mDdP[S%nam-fckuR*Eq?D'+qg$6q:<Ihh"XJU=,^d-k$^&"ZJ`<ToB!Q%RDn<l-ZY$cihl\\R<.Jc3HVnq"#K01.03r"To73h94c/-6e>D=%-\IF]bL(CpU,2!U>AtQBF@=`t1?`C^0ldb0F9Wc1(*#>i0!J6F5o5b;3(sffF9WaI]49>1]''P`Oo%%?%UF/\*S@W:jO!]sP]o?6%n9X3S3HY3eRCjOXc]Efk!hIP7iZ`%rAdcoeJm+m-]6K-h+=V(*</S8AM)(qXh8i;diDWGLQ,JjCs,H,=R.kr/&n=)ZX"YfkHrE`;%gY3%$;XnIGbB"_U%G5=%qD'"\$AR1-+:[d8rGk$k'XSCo+29(cKB:('g*a#;oI%7rB<K+=*`#\M[k]]Idj[k.1KRFAKdP&!'_*Vn%=N9>([d;mQ4n,NpNl2`[8N28iDZpH<2"o8f-C?\D&&&c(+BS2IEH:,N[t($2_^2o(Z5"WA-ZPhCb#B,%:Fej.qu\W"Hn1!eL85I#%7chu*Xb8E'gUiC%=m]S&H-s@dj?/i)Y#Y`;H\8s%71\0=a^u4l8i!MD*;ZuOUF4?+mt\mULfk=*fa0"NfX)e@Ok2df[VqT;]mVW4%F;T%]?C9I^QNuZr!Xj.^L</EPM&VQ]aQ%W(c@;8S9Nm.JVG0JFJPU5)KnlJuaY8l9U`?F'#u*.$i!7n':tt]h?j=,nM>OJ$AhZT#%b5m^D`>E06:2_muE@EY?FEpqV!Ei[#Oh?fcH?BW9MbXp+OCN9#+iJ?DQT_ZtIC&.nlEh4n4d4B^A[r+$l^L`("3:3#CcQqW71>("%M&7/&[7:rqSqD,hg,H`%[UAQ@a#gOFFOgm3p-MWpR>3s/4q$tj'7DitgsZ?Nb5$*Jid9l\8K.,PkrtoQ-(SQPj(D0o(D^),ZQh([%2J>f3^un2sMUcdoCd>p>rZurhn>S(]Wmht5bRDhinaSb7P%2q$U=8-b<em;-*0eq'm=gS`"8QH=d$?D#r1@8e`Wu<LanV*>HH52^%p[(b2bd#$06pLm/4L[?h;#qqV#tU5&%S(*'%5]:CR:0`eM,1C%Y>I]5B4UT31GW<aTeeGI1);ViZT$s(N7YqFqbuOCOjU(mo$^1m%/eZCLm#>K[&OJ36L6TOAPHU+p;aPmR59l@aP(kmcN!udg]ALUf(_`%%e!KYI[Fk_HoXlZ?E(^KVOaVMRlfUFMlR_MFje5.(bOS4=%qYJ2/jG:\"h@H('na9@J(q$#&-;j%VT@/Q5O\sSnAk-_WG'>7g+$r:;I4Tbh8Mhh1T3!uB\RFlRfQB!c[b7m&b!b^L9=0$W(c+eL%W#R,N7o"ZU-J/&PlCCK3W*GJd)Sc&$A3Sf,kOf:J%i;gC1tI%6W+FIheG+F$KR"=Xk/6^O$Vs7Id+KWeq/?FJU^ie'(S!':mX2Nh%CH7E&3:?GKT;n"r+"m(D,U;Eg"n^!1qV8UPiOgPFZeV7:QZZs_gZY'u0YA];*"o=&@8iJBCt(V1_X_'B'((O7bP9M<\D=o/($,W6%q_q%SQ&Ugo/<&jP(Ob$U,4`\4nVecX$hc?/`m"UV710#2,hI`GL^grU)*G)_T+Vcd/>aX)Wo7N&"RS@'.Q3W-a>M\%)+?eKY-#f)%D6/DcH/l^-,gg([2dRKIBttuuYS<:WPsg$3Q>lLgI!/"Wlu*`2)TdU`7NVq!d*?ReOheeG%h<Qs9Q$PR%LZ1\499Ri^0%\S<&"?=%R"8+XCuD(BUG>`J'2O0nUdJ[g<[V2T-O^4&8A,p;7dBsH3&4A4b;_7T+^]%*)6&.!oScbbim1.)3sI`0J*X*f^@lAF!,EIac,cr?%MZIR;*BgTkI(/JkWGk.uf_AD(6Mk>qWGpi:p`tFfYc2TX*#j)O>f+!k`)O6G@\Q=`L$RJ*0k;b=ZstNG<o6:sXpfItI*oDh_S7i]%G[=Z`=QE\k8S&R:f`8<G-Zt.1$1sb9N0'#U4XkHrF2W%m>#P:X!`!/sEk^6Q?*=YS*aZET9/t#u#BH9a:#B+2KC2$jB7Sj\ST,%R%HUqfli!V<lNo.;bQdr"^AF6:"EMk]9/*C[qjc)TFVH>ic[r:bYk,$gQB4H#'3o;H*j^3qbXhm8,6?(LfK2K)9T7`t]:>TfgLqL'Z%b[("gD9f>]'CUmS2q`'Dp%V@TI[2H@hrh9qR9!FqgN>o=?$E#@/'&(W96NDS$I>r/9=:g/Ps.]MfPN:Q;PjBiba.D']Ma6b)dG8F%D`*am^rUqOZVeh^C-K#Qq3C'FYREU/Eq7u]\IZrh]=EjB48XoXY\Tf%#?Aq7j#a3Sf>9<0l;>*F^TPI)/K`ec9<jkV_,F'Vq'iDn%?[\Z%e<O'q^JR!u$L%HHP08\9)YXKaje*BXms%/kd\69J$?/G%i`:LHro#^!/@>q$[r&uls6#l"gZ2/->L@dU;Mk!Y&fosac'h&V%A+^j:<+;$'a197Y\Jk5i\KL@-N0WG98M4[A,jWN+LTW#d;s5"=_=kd2'&5J+EA/X+I2h_i\KFjR1d+%HY]:;%fa.@,r@JF'.d!mb%.$CBG^GP.dap=/X1WLa(bB?&2)BuH><R-+3:GuJiL&TVUdBi(hEp<Gg9Goj[/ni+[h8MCgCq?9E\jRoA%[9[(^0WhFCq;<93SnS`%O_1^/B@@"f*s%Ne@Q'dt8YEV9?JQ\n2I0-3?''aX/Xn@@DGH0SRk?+UNj$-V/Xqb]L7VX2[bGtQflTNjFCH;'>hO3b]o-O*a-o^=%]IGu1Cq:aP;A).QaefI2^VH%m8'7\:b,($iP_R;W$UU*s&6XB=?,@?5&[Ua"W'K@_`Na*KE'TF0aJMVUYu.gkJo^+slJ";)l%3s?%JoAdN-(?Lm6%@2$W7c8*>PMr)=O,"WflTNoF38tTfuVig6+M(lpPKHC9c);H&SH1rR8#%fQfZXAM^q0JOYH_\I-#e/Cq?8Dq9QDi%.%ALT;FCL%Oceo<!!?8,s6M'q\g\sug5W_A10H4Fin-Wm4&4I?p;buj([PFdqnBY[pEmi8=-kaVXZ&K)h$6"mT1Ze1a.iT%SVX?%%]EnptP/MbI,ZiMB:%.G`Ji5_i3/156*e<^DZO!;B[o*W(''N!\r+D,5oL;77l<`($<N]-.D;Vk\^],_(1tWr&gkFMD]s/RdrjCqP%f[0L-,HnXN4EiO.20W;4U+X#MS>I!Dc.ue)PD?j6c?DlGn3qPR9tLR6Eu0>T7*%9?JZcOn@qF^iGQ,RVphT;\SdX0,+*hHn?b]FD%hXP1@%>alf15f$:SaQ4N./WM5,brA]k!i+A$f-(f^g:fH82jdOOY;VK4)tPlIaAjj_6_SJDRu[tgGm1FCa'8!,8G2G;%cR.Hm1+O%P;E2s+uhD:HD>>Ooq(Q707WmTA:dq-DX[[M6Qousp*(m<%>Blig!LhR^DpIlZ"-$.HH.:t0gD7lF)!EF3ol!!bCk,W2c1$+:Z=>d%RUl.<N]"*8beIinhj\T9*7q0?J1A@L$coMFP&Z)P9k)>Z2betngcJ<Q8i_tAE$<0D<Gns(U5*!diQh_tB0VA!1W=k3EPT*lM,P9'%Z@hABL]MBI7#t(U//$"Zi5bfjd4uf--8J!H0a)_j]epV1N8p-&Eh-I"'/+O,a5c]ii?4K8p"trMRE@4&,/ZP1IBOPqN^jP,2r"k7%?TH1:GI3ZT2&sdKG@\rBr/SBTe1gfT])a]0LWh+Q\1)?<2=.s6DM4MM#)K*#DorGh_Z=\c,Id]+T+i?!bb%$1El22<Y+(*$[9(c1%S!)L1qsRD;SA*dfYpIuXJ,=-b)"RC.`4)O4B0IAs+YOjEacF1!$KHu"Ti+JPN"eH1CY?2-B'B/9Ea<#$*lYtegQuLgqUBIuet8?M%Ycf^B)I<r=`"Y0=kKO9Z%!<m1-Sb-1%$tSDY6Q"[\Hu+.B63o/QLnj35aFeg_riVb*,?l\3\F97H(?dO.4U2=W=q><i`ZQ0EP3DU%M$`?GLV&9Aa!K_EW<"$WYl"3Qq9eri0il0)Dr]#\]a7uLiVlsM*7p[rO/<7KkNZYAf0-F/o#?pS>0IdL(N<:*5%J(^Y'o%Y67&@e%V#E0+J>b2-pIJqITGnAWBM/mMR-OtpD`b#_V,+M/<S4o5:"K'a9'c(]kGt`JGmf&T4s@IbfCtQ!2R>;=+p/@IfTeJ:^3e;tNn."f%8j2uhh9!j0'7$V#HOnk/na=D`%k$HbKr<mPI\)nUcq9R\1)H8PB2).SVn!$mHM&V$h1m?t:/oqnGbs/Y[hlbNZ/oWmYjK0chnnei%b=/5(SXAC3E8;CY\g-UMepU\]\_6Yf7S%8t0(R#mW^$(cmni*ShHr8LWRRB\)FpXeY^EsYLe>.S/<@O?0=q$<GoKY\Zf=WZoN-A(%X-Dt_i:=L0).%$fHr9G-l4c?di882Tk0Mgt_,lY9XM:Q;<"`S<T')Ct'9kj(>AEiR@[KQc^+oPt(AMoE^sH5C#bRoV_%LXU6qfIZ%hUS8sdVY0SDD>@T:2T9c+UQ6h+[1Bi^o^Vq,S^FU[7MaT,Y`.@%_e8lfSA^\cqUsV.POL&`q>!H+_1:h(:+#nGue+#X]7s!dUMo`%-BT[18m_(Gg!^n,FdI'6(5j^fM!E`m2)n/eMfZHecp"Q[P(I>'LX;Ag`%EW69u'I:5''`<?^pYUX7F>QbVXW7\9AT;(rkX%Kj*Yj%ms_iNN7eOO'`NhhQn_8f5F."q5P4m+5R5;_c]=@3Z"3f8`\Yf#B+QB3fPDopKJo*G0uHI46'>JF(_e@N1u_kMV0CROjV[4((h;WA%Aamh"Y^([g\;Tj_#+>gr<r2"T#<d@R4/ZP8pRSnbl#bp'027s-Frb_J=o9-LSlEKb^Fc[6K6F9E[U\p`P@cS\)3HM<jICklm'`jV%;%n37*hpM1lR,4+P\3Ju7mEokPfi5r;oG_!6`1"*?[>.;8[lo3+cF(d30l1ZOUB2+D`/ZFOaZP\,9_ugjV`_]0e8TCE@b_`EhGlC%)#'^DlUr$(%;#jV;,8*;L<'EiRKMd$b(6l!qe6>]!VCWs"(qX(X?7l":JR,XQo#%%p'14E'Ed0i(UtD6E>Ds1*5LKRHBVqA-KSme%=ID8Z0PM#)Jf$Kl$SZ9)@*In?F;Ed=Tr,S)r_*(.*^rla_*;lf?`YNnA8NX)PV;GMMXaro7kDmP5C=oPn%PTIkYf-VqiSpH.Gl8S%E5Q&*k<DW,T=L341Q)-@Qgt<+8kJhh7JP/qReX4_#.rK*Yd:$X^"6%<;>n!#%=L.!mp<cmc&4;Zc\_,`Meq,6kkgV<`cF%;U3liJ%c\<@]]meA<q@/Nn3C5>d5Yg<8p\G%Rm,D&1h^rGMfJFRiX5>V!>_DKG%+!uQls@Hj>Q%%*^QRI>2qkoUdX1qeZgMcaA%:,DHG=p7%*NJZ(qBaCi*:7&sO$<2IbQLQ/&GQ$X`4_gp0$57TjBfUbSd`e7)cO=0^""dP4Fa)PrLufoUq<;[me'5%+5b."n"I5e%<WcM^dDGt%I=.f'TYMafGN=Y3!;H?/>K_$AlPH+`6>#.G^Xk,b;h9=[OYXeeIXS<ih!,^/0@EHegqA0a\,$8@$k7Zh?aMm3Q^'J#oM.GJN\0]C%pf>.\F[+qn^M#PKn34Q0me$t'Z4PXbKAYu2N@!^N^;TdB7GmAHZ,S_)hEsHk<^1E@`c/+goW<SAll^$[I]qXZ=_VBhZBfG%95;N,%me%OD)c(d`?]t<]7_dP.qGtAImc,6eIJij0%=>:N(Q8<\^Ym>#_=.%)RS4[a7%Ha?qF(Y=pg!,>h!5c)X'\QmRQMHOnlA!>k2MNk%oc*,EVP3JOo;*].f!C+GO)L-5XN:;67Sec:\,))qkDJ*](G_OU2q63F.O3j:QfRN*dI6adT%EPiaYj"0IR34.,1[)<`J1tU003ns%4,6>@f.T1$pM8lpp\G&5/E'@F!UfVR(fu`BY@"$[K-T:>fB3usDY<%tN-MNJn(>E[rM7p)8%R;*3[$Br([NK]f.VHh7cN&kp\K1"%nkW!jmDJ_eoo!-]LcHJ(n\'D!\,)5.HUbd%O-(-H&51Tm#<s`8&26*!L(4\=L\E"7+f9&0msQQ5@T`CD-JNe&InsN=ihB5?#Z&AY%f%OkCZFSIrUK,Qb8$V6)9/&ga*7le!a[_q)oUst'B\iCk)HQPeo63]'9&]Wq-:K&L.Pl4W[[U?1S!h.Z?/*^fms>efZ,VFnlXFaT%nLHQ)ot@3g]H(iaIfF4eRJU_n8)KmsVOZb?o(:o2pSmueH#mVfH/mF8XBar_o::hcY\cL@SUOnHf?Ol.X7u5^OnjDc>Q6j/[@&gC%IjWH:pJ]bkV8gZ#X1gdPr-krdZ^m)QFd0Et>+_52B=G#0n%7E3gs>lYS^G$P0B'(QR@S+0k@^-Lr;>SE7XP$HS6sZV2O)A8rg$IX%rOSnC>LTL@cEfUekrMm:?b2G^ek=VB\NAcLJEQO)KuL+*Ic*u*['r8R:A;I+Qd*()_5k;Am*b"MK-tm7oiE*VjB7uH$f!-*o;lQe%2E)->Js_8FJXY>_mWA*#9OpfRB<*i]PKD#&o<kQ0Vh"VT=u5#a-6'?d%<>&7=E8*;B;'/^_1&f0-I,3,Cf\j-ZcZ7\L0uA\YJ]5j%W=Nat8Q!^5deRE/<_E*j,-r''M)?efr$gH&lIYh-bi6P6l*YY5XA*LFH7O=]Kl1b<i_FroPcm";8&Vjug32NIqEC2#gp&Uf#g_Tk%6VB&YS5n`:D+J9OH/)LcaE2C%2SWE#h9Go!X/Gdajn0+26d7c.j<85]JHYX]k"Q(N:.h3=$[WJWH7VN<R/%Wn9qB7Ea+u*d'E,<$%E8E6'34j&"F*.N`7&/C?#Q649fkZj>V5t[u#jmX-?WtPM<+^>tGL_D8pSUuV&\=Tu+1]'7IkWN?31,3W%i473O*7'Y.*)qQ`Aab3%<I2$coaU^#7rpHP@ePKj5$F$i]GWU++HPtM<-P2t'GqI[e=FR9NlV)CQ%TEsm0aBUJQPn=\]'VE5ue7_<ZpXHJMQ_*GEL#HcQ"f4%-O4p%"E/r`5>N$]U&1RYNuIr/f#T;/F8G_nP#nSdb>%)>[.A0YE?CiWMWut!o]A,oCXKU2h-$mFk'e-(Xig07_jPVBBOgF?q?qXB%F@OY:W;GRhK_Dc,382*9N;Cq.-j$MnZ+<oi]U3#S0#$*;mEP7IjqWgZY-rI3pK2^`h<f!gfBWsu0B]nXETALV[kJ1tgj_=di-J3g%6Ce'BYZ%7t0G0Hmhl7?VMte6#s4JCf[WSY>^i4@i4oDDJic"[Xqpe%>hFo?'M"M9nq7Ju<lbp5hHI/(rNtCa(=n8[U<EuA+nlaL&%2(tn[MfnaOc![PlC\"pHkj'$"fT5dnJ;dX?Mkra_AU<UC3HJ&#.3!d5P'4=<J'g6AHq\mQ#IK*u=XncB"eZFfDA0K>O([GFjp>"]%]D&14(im7NbEs>:NHP-+djY1?G0`*Jeut(XrG,umk:V#XK5$scjMl!9CUs(VgmTg%D&r%]jVf.!R_[Y1.P(>d+D^5VDKpo70'fPX%NHpW5VhXO6F.R'tf(C7c^<_X`iFCkXRe4<LS*uYM5JLK?+lT;Tl^L=*bDH9h%OX1[/oJJNV0QT$riCYO>i<;AO5@BG!1([>*,N.,%iso"s+7h2$YZ($CR&0ROdLP-F;WLbCe*OpM/F7Z\<Yq"_1H0X$b,r*9eV.J@9hA[G^kMobWDd?/eohFYq6COdhM5%!4Q]QkmB*`0%<9RHG;Ys!GLZn*ul5XTsd6-i(kjpB>##%K+/X#D.gIpIR*ha,AE[R,(5(@J$WF=OFQ#Isfchr%D_4j'(O8;ZCi(uopLO*oYF0X<&%1:a/a2`(K&hggcib^rkU,!U-!7n]8(bK&G_@U\CU1]M6")P3O3(,tnDpo%a>%^1(3\P?c\Z]KI(!O9-K6;6DUAB.a6@Gn!F"dJI+%hqVLBL:p%qjm$p_F//P:Gi#s#3PF*.?iDicg:aid2U?ha-]lbUnm'h^L!*MAcaFVeWsPTU"I0`e.aoD;ht?_5CSu5PH!8jggcU$i%3S6GI),mBh^Ug>qoBKp/AkGZIgFNBG<c9@jl_'MLO4V'2:=>S\Q$uN<-^XI7klisBouYfj1a5FH\Cj.bcO><A#>t]J_)(.G"+%&d%@2!a"O\i";VAr%hQC;$u-Q<SqCo([2cNCBif6m#s<&<hV>dsG'1q0`;s8H!?T0@IV^K6mX$(*>IY&AJ=V')*(P;9RinMF>8S%0_u%\fh"a%bTS6U'G7/StrFAaXB<_FE"gr<3C^eIEp.;.drmTW#OW`L!A'6f13;JC8b>nRPIJWaRGepLfVg^NLe=tOa9'OgW8r@o6YoM%(C=R%I\np8d!MF?,=rrPl(3VW(GpN/8b/`+C&%Pqg9`t#=2,RK1K3@236I3*btP9N(;AN.?q(YLADTfe(->ndcS>m=%:j29[MCWV%cJi=`S&p(8OE#.:\qda0.)$0Z9mIrZ!L;K=lDXFj.JkN*k-C"ns)NU3\+8$1c]k'(j7gL75.$"MC[fERNLef;g#/[N"[Rdqigh/H%=#0O$c1^V<(q#P0g5M!DjV0]]Ht[@iWbY/F7Q'K<N&pNo"s1_g+2bA05CTMAQr.[ak$ggWmsIgQl9Uks4BO.L*^SPL)7&DO2YW2?%JXSHjN1k5Ug0Yf;Y)m$d9UprINin?!(Q2LC773d'c-bZ?>M7YVrH2'gXj<J`RgZ?p)&29,*`1egI'iG@]Y.S<4M2Z'NL.\bdSKPs%Gb`XM9l3$8BkJ0)dTii_;l@%__qsJ"o$?(E67TU42`d;Zbkg,'DgmWck#K4;@cd.H"?XR4#IBWMo)-Pqqr[_9<G/l1G!8dh1[k&3%cKRX*>+Nd%Deg$ToJA/!&$i<m,'XA3MN$(k:TK]14>hijM!o]S!Q=oqj#qQ4d.e7::3;Q\R:S`bHDQntq3<Jk-U78Fe;`S'cdQDg%%'J+G7)XCIWU.]d@fh";pF7F,]8%97M>-Xh`Og29:jseRp39*4JNTd"IbQbaor'HPnK4K@:1XZk'*bqLs(!C8Wjbdf=@kR5Hg9p)%`/]o:HdMOS$/j@kNB@H-b/TJlplNfbVJ*$.r]q!jJacMB5(b*2O!(T1J$YI_:(CPdGZYpK@q?#W'U)&^kK:qVDZu+CgBVEM3BPkA%o[`aqGKbt-)K%1RcqgLD1u0W5PpU:4nrJ__aUJ6W-,AH!)Qrq\D:7rc[$jorCU.4sDLKeemn7qQVAh\*q?GONh=2e/A0^tZ@p(r[%F-2/j:\c>IqXTfh58f*4H7HPZ>]^kr1BW81^Uud2\h@o=YC7[rU4;3Xj7+Em:QOL%iK]N+a4J-r4I$rI1g"G9e5&irk<g\".Q``<%%GBMJ4#V\L"Z85*`e)]U"?SMlH4?iY&Mb,t?:-1YffsX)miV.=5K,9.PYO*'dQ>Uqhp-+Mjr6c9Zg^rKK:arfL%deB0S=QPlR'e/%\TaRc4o]\56)>"O:bA*S4nhE>rf)!aO*c!tH6)TnH]W<4b)Uh?@b;Q]R)P?SH%%:LY[0>+UcN%F4I18MTSB5uO.6Rt:CmWub>;-"%"'$F)#<VRb^[+`,4[1id`'Ydkk0&g(3ADe*N=I96_)^.unED'/ILN4*m*9SAA'K1pEkZErj,g(r:Aib<Yt@ig6MA78lhSb@nKW+A%901.M4b<2T+4_1s@,Y(jC2\oq<Lp,`MXU7+4kd?lC^t(?n/adblg!ncq@*)./CA=0"1oE9VfVU%k8/Uh'1PRg>NI;d^+D""q)E($%1mt_5rVTdS2ChRqNOd2DU\Z?hG2mKHc[;RY=aa[>WN+kO+S.4'2#)he*d9^&&+`S?]JN"H%sC)'Fr4Tcd>l9'%X6V(UE.Z]H2cKW%a5&r/)W)YX06I5dm!.=QY_V9]m<IFR0EXPJNi.ncDggKOInK'Y-Te:%hL4%_/R?OC[34WE-+,>>p?BkJGNkUqV`"<p-F02kG`8,!%4Y,-OA,JA>=+s/mQ2N3fP%qu-(IPpU$puDWXe.t8i]6<pnagel/bu'g\([G'!Y!8RhL+kWoYP[I%ujn6jQYT:ZW6Ojd!+p]MDKj9%-6aV)i6?1Na)C'R7a$3sfoUA2X):/9.3Jjd.k.k%4\)3<'D&Hu=)7r?o`[n5Aph3&^Vjc&j(b`S`<&3<Hga^5ic^rY2a_%_QE'BD%f;[r1+/[N1NJf#(F93N=GV;.I(&`0DBbed$4+1c-k"a@IpXtn4dsJJ`@;Nj,I]lbo[i!/71/M\>YgVal9f'K"f/gI+Jf;ILI#jQD%@SGG$,pm/(1=(mc7R8^/W;2ZQm)<&e&/LMAB:K/"Jd&*=je'.pc33#^;[]9m&1l0eIa-/9(0&nH4Y0_#o%d-Lg5Of5YtT\#hRZ\[%[rVA9"Zm7jM*De?3?\1X^#t6CJjtFG55q?Od!eqs%UP2,_rP3[fN1DIp@_.jPNsAH$:u!FM?F3(>UcEj<s]=f_N+\(mbu\$dP"0L%!n&4"k6InN>"b<H7<5>=OAi([e/EBZ;)?#QjG0O^=T01db5ElM,#lrfM)Z9/@TJf<&FGM-m9.)^biNjn'XC[JB45C`\Wfr:Q&&Qo%Q&K53-tF7o."kQSGN\hNB+oT`TU<q!;+P^fN*ss=WC1S@%Y^"e#X0re+M-HcK$1!r;`]9a\&L;=j`3]_Pfie;VtK2g="^2*7C4P2%_"*&87A:'MZ(uE3P@\PiNR&oYHpYjL;+NH#<&8&&)mU>i1)<C_OYK'8#tF""9^2NmV*XE2H4eBs/>"aC-fr::ONO@UpdaDU"L]tP%#$EFD6j/Ii&\TnH7c\7#jYL,hLcdW_Ll=^(qO`(bL1^@X72??YP?a\.3E*-PoYaXN:0K1Zm&[<A]Y1H+i0%^J5p?rSb7g!Fpa7'8%1/#C\WC(:X%c!P(C]$?e%2&'S4T2fI$XVf;,5ldp:_^YtQ?k*_Bij7B3=g/EfUA?E%l!r94%^Qrc:a4obd"S8U3Ien]WLQ:_ukF&%q/)<Yn7<Q$H->U*3<>Cj[p<7#*_8/,n)cp+kE'u!`u/`ekC7r"aq5U!1U$5JT0i>BMkkou8/s!@]tDV-XM_4F'#2+Tfh8[W(CjXp%^Zfl\'nWVr"[&!C^96okL](-8)o"!Z>.B'(AJ1nP_F:])gEGQ\1nYB)V(>Y!\%],k-O!8S)YpkQc'-c:#GqCTbaHP-,:`+Q!#&uH%D/$POb)/$R1d%@:#HOA`/[KXV<Sr88Fl#%&I\o<O\$Zmj?9;5NN:EuBmG[5JK-d*Ql:d#[%B5JdFdqR`?4dLn9#$5pWEg6@54TH*%rUQ&&D^mu,`4WrY?7krLo5=h!;-s7-d*GpRn`dF_m(Y-V[(]auJ!6%GiO0Aj5C0BR\Sp2Cl#V_3_ri,*-Y?QQE_PLE>@)8iNuQ9b%jj^rM*U.j8*d(*o,X+b'`%c"Bk!NHSW__f<JZTIHj5p]clj&f*e)YP)D[+"9!,?s_ShG#>WGH;*a]0hP_b3Ml.^H,J/U;)in7;!G%-9YD$El9Y3-habh1XCq$qh#S3&'Y)hm^qtq+SG^s!n\N`-Vi)3i=]0eT(n^>c-4W&2`!6/Mg/82N6j.SY"P4>?9b]o)+?IJc?fdT%5Lf,qj2Sd)_=.GFb<_`t8`a=^pZFQQ%lADL=XT^KM6mok!2!JTM.X_r;6JiI7EAT4M8Wk66^Dc>h1tc]$H*rT-+r!HR!"MQ]H,>Y%/96pQph#%B3Qb9i%,'YERTd7MXC0L&)aKQO%`\siGQ7->PjLG2g+aU0>r_dse2t^AO110^H6K\d.W"OQl:&&1Wc[P!oD3r`V:OtY%=2!9[0;T&GB>r\4a"5bJ>IAbq?O17-gX7&G)5-2HSU<\XB0QC$!N"]Ap?0`^l"[Wu>Ido.mhX"/40(?%&iie[CS*+&?YJEsiuPQ3%j>6Bl94s=u<6?aALDl,/J`e[XZa.'kfBp`?F/<GTkt4\$0=otXD=qI]Tma;WZ0ukfS=PqGI&1t$>a@JG[n>nnEcYPih->BIdr1(!%9#WM,o'u4@<2aM%*&XCkQdF/YAuao+8=gKHmD47-,I0*,4]n'A8E[]74##"Dr;Z3#^X!q9.L=/:9&X<5?qt;'d2=dGqkShmVWWUE%"l&-hqE)ca*2BZ"3A-Bq*4E#bVpN`tQ(6GkNXRnXdgLqDT.i$kcO7bn#D-nA_9IO=bVQ:g::$!UqWGn^od0RKW@XdK=WAYUcg"AF%chZZ`gW4s"R&Q^EG&+,rG,W<dauoc"G'=j#P>o24WePU\K-XbVa5fVm3eREP;.'W.'OIpWp#TR?LVDTDFSL0-eCND\%JA7E<G13(%#"Cnjp@EBg*8:H`LS:?l"o@ZMS\i*(W`&<#BJ\rZC[?k3RP(/en<hUqa>js\LYl7s/::TWNlJ$q2!D4R)tMVd3CZZ3MUB&]o1EAh%W:V,GF^*[h7Gk*pqc4@89>&^.rn\`L*p"]sA+hN*F1J\iqf6]9Yk!1/Fla:=6;L^XX$'\R":-tQMCn)^"2j=TLmb+(Q=cAb[_=CR%$GF!u]PAE9ltDm^3^0tQVt6PdX6X6T!o>]K,V.MA8IaXW%.:".eZ"0^.YG>^GXNV";&S.`+\R<;3@]Zm.H3V8TMq"aO14T=9Y]'C%3J)%a\,>Ak?H1?KioUANJ@kHUi;kJWUKI:>q[gsfVq0&>;WFj*UW^hl(cjCV[_C"P)I%9sV8hpkV'7gmlmVN5Zf"2iI=8EC&U_gn%D4'D^PO/SB>/Kq&rUQ[H]mQ`PN\<!"8K-[66O\U"6h1BRd!a?ILbnr)eFW1#c3+S<Bfa-N7+W4=WEH9j=Q+iHV$FZML&A3iA\S!&%.*I!W`HBY=_F58iK@[Pa<k.4%R/nY/Ue.5)M$\AHrIls,YIlV;'Q7cJCo%eB,I7Ad9aD,_*<RY49hA#\07LCkA\QhqBCP"hH)Z2@%'q%C?Q-N>eC:Q8^.rc0)cj#;(,_Fgaf^^gDMRfN>?r&3_`V_t>&V*+t)C(7Of8R\"=;dp"\brDN./7Jk)iFo9L6=g#HjG+6QT92-%'HRAb\KK_J*)!<f$Ze\(#I,.Z@8mW@YRlCo<D0nD@pq)+70j>X!dlEP69[\R7.#b3n-bMB#-.Q_btnVmN;s*][&#U2'+qg\TJ6T#%Uen5^`:eZ-a0ELO-ooi-QVV;:b*V8,=@aVY6*1bT<`g3$0nh:^=]/fKM\=K*&ci<8JT*/07,j]07'i%nPDO%oW)fghL!!LqNA'Mc%2!gml?Tfsc',6up;tls37^Y;2Ji"[,;\;Sg\5<!7&0nKQMYr8CTh3O(.Q`mRdK[$=nq`7BC_VtJFNNnIgueR4*;48Wc'#:rKSS[0%V%jnr*S6c;3kbMte=Lhu$ht\h[`%gbIE1k%M<+=%M[=djjU@X)R@M*;bhrR28aOV2/Asd;$j)<6aj5`[SXf5M:T^]\j*;/kOWQO=%GQ]K0l8sVpH;MiV6WWsC6WP!U<.;pR^9f?kf."A7rg)PKn]p.DmQ3Y#2+L$dK*d!Um#c[E/..j@g=)13IdD6)8Ke>Kncbd5KrjV-%=9m347qB&/I<j%WgqVuCOdEK`P5K*XHd#D6^B;=CFEPq[!g[1i$TReDlcq3h:pdF8G:G\n[5-&U#t[gnjfBcRR.G]W"Xn1=]h;1M%',*JJ5;*GOUdZ*]Jh\bGcL/P[G@gb_\RVaI(e:(h6Z&,A0]&C4f_jWtR(7MYihbacC7jM\hQ$g**H>^,FT3gdQOn(ZaeT-2G\#6@%N=1_pqmh&!-O>rXeL12fHSY\R8Il<YSo-Iej)#iU0%HO3#NU,:mHNeuidT0YF(r7Ok;&ZrCOc*]6TVhZ[,q*5;j<G-,1^>Y%=Pqm%5-qs<>!;bhb9qc\$:N(8[0qVi-GXGK8\^OjI$sRlV^4"22Z;,F(XF0QV8gI>k3;^?9_i7>j,3No@FKFL.UTM!`sJc>kGLY*4LPo&%6dJOC8#q[/"P(lj;cD@(StI!JIOZoGo+P)-s7]]3):c@"W___g9jSl7A[;Y_<q$!oTn)sG<IamZ*`W0BG>`1Er264fi6ukuWog*7%dmQDoJ0)A!AoZM2RS+_Fa6BS-g$+bc?@*crB!q5SH3ljgLBeX-V=[ZSP^Pl0Qd`9s)W_9j7ZVSo-M`<CHqGjP:%\JYIo8MpcZ)QK%PQ*gF$7,g<r#>Ue6XTg8d!sKDP!2Rs4XfP5]QflCD(BO.MON,D(JRocoN02^m(?mYRXcCaQt\'r92uu8j6q"j,66Uel?DM4<Hag/%nr@4UQ+UtER'cgVL+#uOZFm3*l2REcmC_F><naqQ]OIS_?PmD>[[f<V1U$,C*7X?9;,'g>YdM,XCH@1&Wi;m*e&WK>6curbbqtBd%@2O8gdp*6d?/80n\s6>:*LCg]5`J$4hU#MsJfIup&PPKo)Yd<&bo7"9ChS.OePlT;Y;eG?<n6f-UK\S4,:9'b%)p;gN_@M4H-=R9%[-fu#>t#_7R#)lb!(0IZ<1UmB%@HVLGsaG[3Q+S>eIbJBFc`IDR-c(@__@:Y^p-`m&9i7%eR=P7686GL<?U!QQ#H^d7@4YqZ,5!*%S\eW1#FL/?daTtpbo<eiEa\'9gV?O)Q+Wh98c`Nb0!57QJB5Q4mPkQV!YLIt7N96aZN5eA=1=!!(qN=I%Num$L`GugRn)#=Umtlo%H((Jg22d!,9dLq#A1"+Tj'WG`A_SMqBXVV_(h/2u;1Z)j$cCc4CY92KknZad)L4i\8JR\&"5bu\baYcO'S4bbUrHCL0?c`aCt^e$%BgcAd7"T0rYVTDss&W1g4a!$)VLGAsoP?..I3i#&'j6A9$7$IO&e!)-VUS_E.B`U`W%mQ^LFI6pAsI@(VPoP7VM2V-6LFZ-DDNr4%Qnj]`.hKlAZDhn0U#[@o<_O&?,j.^9WLYe=/FjLP@^T&j%)Ft.2G1:q'gkqS(9cA.R3mZ&H.tRkO"Hc/@t:ShL'0b&llZ`]D\8(o%2b].B7*o%Rh>n?'Pp(tO\>1lLOp1]"VZkTV?lQ,3(2[QC=3Mch/!266N$m1INX4;ioYXn&R5YPM?4ot?kR8!X*$R8#_`.l<-G^s.%T?KnsP[HHq>j`;Ef+h4!,U4URV]lLc;TZ-oYg<f50e0%ql35?8&2^b]Qo52jVNdJ#EhMC-6=^/2Y-"b7SZ\g!?AR*O$H(;kV^5"D%ie;)=oc^Kl@*rWm@B'kIO'mQ["@377Q91C!LcjmuU3]I8MIjkrm(D`$0Heu&jN+.f8#^NjFiU6WVjp+:@`r2E$QKiC'WY$l-_j:Q%SP_"c`nu9mZZ?pRCJ2`b,C)X_JS^Dn(cP!N8E5gH9:/lBAL6@]@)D[aU`p"9-l$Dt6\C7J<#**M+VTZ[!X:`J@#X>\8CVdVLTWs5%:(BSmZDu[G9uSI%Bq#rK,EL(XKZH$&ajTMeR"L?Rb6DS4!X`]GZjMNhAAU3075Ce)ZEXTN)R(O"!"da>/R^^tj:#e+B$(kn@&B]e%_@?U"-nI5U!l1X=J>gj/BUE3BPmR%28>8"C:sI4gBU^^,=;5SpP"QsrbuAh:8-;Re2,A&pB&FhddtAi)0NZUQ+JNiW`]1agE@15P%A6(I["N),9Ei4/oNYuWY'5FW-IERah2+@iuN!h=)1fJU0gO]a:nU&ae!P,@K9301;OW$u'eDa&eW)XQ)$/6o-@MY7CcA]!WXkZkX%9XbJ[>KYA/=%9![<`t`t3n+Ag<+Vf2]Rn1%:,`9"7$`B0#6Ysb-!m"`91G*&3$VZ"MSJJUS]:(5F=jdGW.(qaROF%j4SjpdYiC!#%'cA%41qZ/065&&FkURPt1b&N*@6$_j5)4-CAXJ.nZMJ*sAQ3Z7AV:G&ABg<<eps^OPY2lBJho4iO[8pG\Mdtk;/@f4KUAHI*`Ks"%;X6<$o716^Ht)cjggieZShn5P^\E.OW3#WEX/qH(6*(V-KM^,S=b'=FB37?_7>0<nXKi,+\V_gDX9@Jkk:eOb*#$p6<hHH\N%1N8%P]3=T]NZ\I23AD]S).&GVE6OWjPRMN:Lu*n-?,\UghV40%0K.\'-PEuNeVV3<@7=#OX)p3a;2JKmlK.0EY&U9`tRc1Yb\F%67eg*%%4`qj73%WG[7Z6$PR?0i>6^?#k#sdl+0O4p&MW1nTLLts&I,$!2K0[o9.b^+=K$QX"OD;n":[pPL,cVY&3F95#';[qE[c)ia7D+f%5o,D]51K_:7hAm5Tr+m>f3FS+9E5+\MM:H!MVK,')^$UAJjiI488SW`AeX-%/Atg&6+-qaclc_@+hC<_N"!$dKjo6?)@oqXFat_m%o'4:igPefrjjr<H8aC2ZN#B\ke1j@4W,]Wbnt'=V&e+Al72BPZ+:q1EW$?,h0"csI\uUul$F\:eU)MN0\IO'!oq(Q4[Q(5_OP35Z%l7S8A<=K;AORT.SG%qk279:oI[QtpIUs+Jra/&7.K,%C(%C*t#B''h:#\c(-%Tb:%Gms?XJDo^fLgfQum2F`QCfao3L]W`-C7@rL%n3RPSG:A=;Ncu4tKFs*%]+d7=7+K[$Mi3[6dXg)WO_YI=UjtiMYsH0IWmhNqC`I^p[l!*VW2@]_a<G6R[88;'/WNI5Wb#&)R',RZ%&5mQn/uh:PA0d^6dCeb(mGJM`&PU]AbMkchA:'\[6I3apY62VSDL2Rj"Ofq)abF7-U%>L)\/#WarWS5ir>ZJp%sWMc'>^YWSd$R4%4!UhLP/i/>82hO!&BLMV8pGHFF8(DG%]GWWas;Q7.(W)1LIdEb0[9`S8[+'%-Spqu-!8Fu(Z"*:479=D&"(+`5__R;S]K06+KDJ5%1D9ac<9bp=5o/\2>sfNf*Dg69p98+ae8>V'"2DXiHim]Ij?[ab\=^SdkIq5j<T10tJqS$qEZl\:Y,9?tbe.ZCL:93+)5kYG+hq*R%doM]P%[!2-_'fsV-I+#?T?L&"Q!cYJ>j`G)n+i[d#E>J-jDp6&7IWW3"'.Jl=4UIVd1+:"Ym=t+QL$^YM!^S8`X7N8]mqibkErc*%nG4CVi`'nl@tY5$Uofh<eq(d]O2a5VZNM>=NhNbug1:"PdT@GOe3+_n+]?p4(tVlE8SG1WO4dKB),W_1)<!nlI=3J"<]o:YMd!0n%*l2f'B_,mgEpOL\Vm2$f?1S>r_^6qEYY#J`D@Y]YcS9G$@.hVk`2F<+`[DYGaEgk7==EQMhEmN<H8O2!6`OB3aH5Q,6m7Adg9S^*%Ldu&;N%dP*if%@>am<P;$)TN$7E>1L:C8k!h'#XH'HTfLKL&(*/7Is00.V_]!gY[a8;\^`$5@hJ/eL/Ifh_N0/=BVY&]2`2!&71T%d;0X%Fg.ttESM9BHT_@M(#%u6!Eo[^U-\j95huOh9\7+!;%O!IG1L)j6RVJ*\ndG>9NhK(^I,&"/RiQ:$S4)KLZN96PlcbN4!%0b%f6(8%PX:\PeENbVa?2]rS`,<GBC_Xk.5[RC+j/2p?gc@]08EB';$:8-D&Yl<K"9fUC</]]D]/goT;a<97M>8G/H^fHdIC2F/P:Ud%__PL"$NP$@fc6Rk[Lc6@fTq'#ir5bf\5Fd1V:16N)gJ>1/fDo.h,,VNOo%LP6U?Ta9Bir^_1=Ic6\<CM.D\\k,TtO7D*S[FGtl\'%&j!TbZ5/*c@RZD5\M3I^'.5-H"7A(7E8=oN2h_r#:FqcVk5[U5_Q\\7@.\]sSAQ6^AeHjI$o>n3&0Mj4_kO?FYT,n3:UeI@N(fe5%(9E+D`1Yi$+bjcW)9N.7Jk7+Q)!VX[7+\eZ(haj,jU>Q:"HZ$s9pO">it,-u$kGb2,UbM/U8;62"V'9E'7<gl.$m5!bFq8"P>F`H%$S!9g((KD*(dbM*WYD2kLe8lS*+gAKM]"(ZBt5RaJLE?X[io$Gh(%1,\VBBk%T'Q)Y:,,X3E!@G%=,X@ZH9=M\J/MV60F,B9d:[4%(f+7j>TSlJMlf(Z.F[d^-!27E3aaQCWud''ZOc+[%b%A&n-Nnn70*tCU__CPh1@%o/L"Vh@h@H@p(V+,%*(s6)e9j&JlTkgFX/V=%f9&tsVBInQV=okY490@qms5:<;8be$PGAdVFN9N0aX%37YpC60f*!G_dY[gRj!Ue"hOu&s(h2&Yfj'0=@lSKX4&=J0#T=Wk:p0,d%bKd.2JeCKfR6qQc$]&JcJ2%OQ9L<ApI1e1^8V5iYB[J4,Smss]k6Z8d!CgRB$3Q+Df[<(le;4AOO->Fbn3f><YtTH%`<5)djtQ)$%8XQG@-gD@OT:ef8>)nspd)]>34-b/\d.N8K:MsZNE*QD_KYCQCj/ign'A\eM64Ys(Q7:u.WI5D<Ee.`[S7;05r+&b5Xu"5^T(2NH%2_[YN&]p:&M$suO;!?n0l];*d%='Qr2[ha3a>s\2QJp4ojRY@"-0m+;834q&>\=p$Xs(GA8WPi29\DDa>T7t[,b6f#gS88*9-FPd%Pn9YZ'bA?*D91FFR]Nn$1dRD7<^<J3E>[j>_^,#qlBAd#L_;g_KSt<LpE%pjq$GMS"J_)@P7@`C*I.Z!+I_;\cG>`i@NM0YH"p5^%jFKiRV_BIr!Ya#o?D"#`S1:[YS8tcpU18o6U@-Vj9@d;Y#Y1'j_74B0eJ?(oZXgI$@#i@5AAU@F,ISR]RD:Os7^;f#G#G%;cPbPZ%^Nb*$%Lud_7+YoF01f7n?qH!gKNLRY10.EclSpG8E0q3[=nqDQ*UiI)REL?AG?hTBJSr2a+N3Fj+R7)BKCHI8U3YT(K^k<X+Mr5#%-Nkd0$QFRq2&HN[!.VW>D\VR*_-5)\ZDEsBr48r/hNmY?!?h7$JTi)Q@:Qe+p"`lahB_Fsm*[dcGoT'\'F/l22qMH4&@6;X6+;;a%)^lgqT`g>-;iZ^h>[F%5R5n9kHum08L$-^E`W9/;g+#^o1lQ'l@$sIR%Ke>@#rP-m#%1ohG3*-t5buD>(hWle,hU'#PF5!V&fbOp%MdGrJ*?PIG-YsKIrTg&cA&.<\Xum%6LohNN;#gkF?3)j"#\"XZm(LLPhJ`s7``->T#+*phR:T,.2r:'FDVmmlMGXAia=OqOKuCf)%Aadlt&C^1["!C%$.1ZM5XBB;DpEh"\q]m$?!lr5>`TiZ_af#hWB9\=Gnb8[%HZLbNHZQ<sd:f8![+6!9,aBO./4=dec!d@Y(Ir"h%Cr<$U*$Ve__moJ'@N;6p_Wm="M,D7"N=df8OYoqc>"_P2d8DAZ`q)Y>&^88Z5.*gfXD0^M9dX(,k&b[#e2e*"4CFNZT3-Ls2]5JE%kDXB-0E0fAH7M/;H><iUO%P1m=)H3W[jKc?iK5ouFj`BuMeFm\fmAo+;TgMJ90^J822'L-lOfmaBH*^OBI*%K8T/H,f.K\KYaJ6U%A>A,-or0MG\$eeDD:EaXUUD-d2,Ag$-?)YK;62sLSWkP=F%3Xo0AbRW/]NA#-X5ho4AlWUdFODVlR#r/U9FiRU":%'>mf%g4B1fR%(p%tN3eeIup7HKAqLDsu?OFRWf[m'qI_mn$Q:BH`"9;\K(%4AK5RM`CJB!.W._:<J"LddWapdW4_o<'aVj3r0"]]0/Qk_&lRZIt7%UF,>dF^VJ.23't[&ec,K+Fl0OCoIdO#'>.q2:GOp:*Tdl2&RFt5CpYh,6S/^/ugsU_^Gp9(=)23&1jg]E=I]9B/kW3)b/9&&.Ab\%gj1aHK+oau#\PB;TpS9"SNm5g=F<iG%Ak(%Z9lNEK"4G)D'J2@9br_`J78LcKNk@b3,-CNeD[d@0+,TL%\ag&mJp_4AfhECL.rBb%$m!ZSBr&4FnS9%$Su>A<DW*p>JpWA.![I)0n3dV;^h]Sn'KIhC.MP3(=\-[T_CmI^n=G>Y?kI\7/<c;RD1g:(@PSOKCeg\+.gEAJ%`#g*dBI"]n&]bor9d2e7%-]q3aq%TGU(;r8#`NREJS\*#`cYKr1HuKg*A8ca-X8A3"C$0"H55mW!l9NZ!?bq9)NoBY,QeUuJGs$i%_JD!gLf1I/WY#Nn]a,0JKr$#EfORVcZsLf5+O+'mLeG-AKkY@:1:>@\.B7'KBab1QCuIO$lobKfq5+3N.'$#,=.&]M2Nn`BJRE1-%&,IoP&J)dh[0fUaS'plANJ:B\O\6khBt/ghVWeYJU!PQb93,B8_&@'FNj[RDF%%3r5tHTX_V-KIEZBhsa"\de,kA*B[Y>qdhR!Jr%Wu2\Tc;lc2B9A!a7$NN.de*sA!a'LlKQ9LYD7PluG@"Eg.ij4$N^hOA[N/gX;6O)fcjE?J@1EIq'u*G#@7F=?\p)i'S%68G0O9D)%+p?:-(rK&"GR5CcBFnG4(h,hpTb1):WiBMFc6!4GVV7i1ikX\B"XtFmN%tCGVU>kf\IdU/#7t>J&4A6\E<.1m+]D7"+k%m]!fee8%C!@c"@`td%O`h%Cc*h!\_?4j1Uf!,9k=)[p>@G^h!5VqE'W<?-@mR1i-qDuXkX>8bi)7-t&aUi[MhuYS0F2sM21Rqh8gA[40d[,V%P6+3R+h/OoYo&+9Wc)FcZ2uI3[SCrOm'R8<'+DjEJ:W.o/iEtb]W2&/?#_`*Tga(D"q(SkR4;&ebMX'G*<;AB_iOp]'J3#fca^q@%V%Q-dM\Xk;PZ#RT=b>HR&E9CNFNT5X1:F>N3@HN\a;Ps;CaFU([$&)@@<c'Y_F(f^MV:=^F@W7t&Xqn`/BDEq.2jR5=0OrS@Vc)O%N`S4sR5,Ffd_09IMrtY"+h_?!'W("SGiTe"mc7;'6>(pY9XgFV,[m?>qsqU#3)*RBoGQ1R(*J0;Mc-=&;'`9j*.tKHdNB$Tes"d0%K[M,,5biK(+?ZDt\"\h]));s2>UA!+([<.&+`WC$lIpK/QW#J%,_;UBQq@DH(RPmth^.Q?]k(`2S.ik.##7(\'X.-"[P8'<'$L>Q%MDL*!iiJBEisb*=8X`9YpNN/jj/\ih#HJ/s(7eQK$]iloOTGNRDF>$DZeD/.2ZVheU^\)4a3nW''oSTRJ0?oO;<XDJ*!5TFc5Fl*%b!]:R[00>,6,!=:U@@[Wj?9dl)nOT'SQ"G`#Y^LUNNimHi1Pp99#.ZB+k*sr^]RjML<0e>nHH`c`$WsQ`mUZ#'r[r9q?\aXBdp'n%-:B`&=2@UOa98pQ3an_^=gFa*fNODJ:+UG&J>X+K++OnbVIc,75i*\>/:\/_?_l`HIXOdK?k8?:@J9LCk('P\'/P3X=*5e?q2<*H%<<NL++\Z=,!C4`"*[3?>R,O/oQYb410#+P3B9K?Ho=t?6-F4u!OA<5_F$s^:<u")_$W&O9K[A+7>Q>>iYuD;O@#,-D'LZ3Qhd@39%T]dBnI7'#&4>7Zi@'"U:OGF8u$kpJ:!e<7jD2YoS[)1DT\,a!<G?b^r!!F[!E;p\%<nLeQ4^Q?9a4.bu8BN]G$NOZ%MCHRL\FjC#%PauE<>)<$r'nHBNFGIgg,VTc`*Z0\L=_&Y:e&VMfTMg9WT_a8S3NNYa_U&ooGl5(ZROUT/Q`0f&9A+E]L;a;rYuFs!EXB\uA86r*%"opr@A;\/fK(-Rk"!\at!#%/nfH^R;F;7:U$nt\+#9jNaE;r7JLns7-!kRYS#J^]bL(t2j"2RY?YZl*i:LJ^"`O;Uf=cui))>$S0%L^^Kg:grCXU3d:K^b"<+%"P@AoFYL3&;4rF'*\FH![7i+Bs%eI"0%S!m8e?b>pPm>'aD>NVm3Gi[3\>Oq??O6m\D-G]N3a#47+2U%hNO%]"9T4Z:oPm$8EY.\FZ1HB4h4U@3$S+"\n?-2>s$LFL[B'5NYU5NHjWNEQEDN64UDNTTYLf]"\!5mJN'O>I^&o=MOnjU%<uUY%[K0+t2TZ.+b\Y(#.R!K="'AJ])PD?1oXY?:,N_ND!)8a29JZ\Q-]B?fEM9b^*Gu_LjjZWW;e,H-!H):?/]]ICg:l&hW<HsYf'X:R%+W%S\2@EnpYQ4Bk>6$>3/-$r's)/8F.F39V$\3tn''6I3SGO/?Cd=uBC"lG>?:<34'!VI]%pW(P<"o08ZY$QF2c>!0_$4^dgOP*:%%7!MM)i4kdF\R8g1BH]\;?YeY5k)Im?_Wcp0C<3Mar-OmI7g]9h#nkgAX%!4RW&pm$1Qp=-K$n_eHEP2<A["?$eUO.mCuiIDab2L%Aq!')W31L'Y=e?8;LU!>TV,d&mqM25eh?/nK0)&;=0>Xk#>O'S/I@sMU+%ss:_s*''<oSE_H]LlF[+FKF9*7b&?$D,+nlLlcS=Lu%\c2p]Bs_oZYK=djl;OZ=KK;YQ%ia/rcosnf?EsDBrm\XG@*n[$#q%NdG^\4L0p^:b_@6n5e6I#a6MhaD/U0ji.BbDge"q)e]B%g)%ci3M=8,F)j`8BVG4%ihAX$\V-=AF-Vi4'(aQ_ZdS`ba0N)2q_3=*qG4KiURI`USgD+JIlt@jlIJl/#Ol*inU=LOr>s,,g+O#Q[H0%U"HV<rkp.E^1r+3(%R9q,Zp@Qk5%gZO5E9pZ?Zn"#K0j0R-VNqE]n\j6(9KkleD[<IX1WnfFO=rjdm4X191=8Z$A&<[TfPU^lZ]i%>kINg@\7S]dptKCGKcWMlsLj"A1n@$&2#V-=#NgWH_$E=pcY'3ZouoJaI)/0F0Z8pfim7"c*:Q;c,3goR&r!+cY8a$kIn>X=9kF"%-gP_iFKTF#d,D\"qC]=A%+aAm^9:`G8&?ZpbcQMajOV05$eE.jEpMYHHd=hODd*JH-!5q:98ASFHi)AOgQdduUm.?o3+&!Md0KV]%!PLZO*(^T`9IH6pAFn/_$Zjieneph(qlC=alF(+mZI/0kdTbC1dPC6!W6aZb0%2QgMMiJdDk(=?!\_XFjOFEF\koPL(Hh=^m^mk]%?9nC$=.Zh@59S'"D/<HZF_dGR%4NMCZhF*fN[)eP&31S)mBbB+0P_^#=mIC0XS)G`/D="T>hbFrI,+,DZdsppi@0#JF2jB#\<*[R%E&_I"[5W-7;5<34K_@Fg>4@\[;dNhXVb?,TGKIO2T)H-^(A]\2efkNXVf4g`/j"UX0m#-5Bc:XrKH@Q47j&GjCI<7iU#?$9iP/%6%)</'k=gUW'\[KJcq&$`oAh>2t<Z1]^8]n81\t-g?B%H:[2\M8p_.7;,$+Ik`8/Sal\I,tl=-H]%Pj(NF`a*QPQ"T!n(#ATt\0<Q%%Vu;9W?f..HIORM<Q0e8>Ic@D+I'o1\lq2Rken3]DoLg/D>[H7#Q"/S_*)dDTcZ@uoXouV:D;AJg=PT(/;'9nDHm:VI%`"=IRdunV%f=ge>\s\\4L.&XuF[.@33/.8DfRY'$$dSOPTjB1;kD8oGM\io#WM8/-?'8dBM=i$(kZgt7>k6H%9(#5`T4=`$0?Eg^eKo(4:dO7o%Gj(K,n&7GHs2#ltfkhM+MiP&1A2.iC"'mP8pKZ-V$RZlC$1E4YXA=.(78FrTP0hX-KSDR3a]WU3l+0mB7]^OL6&9[qUn[F"d,U8k%iUp@;=@L0_QUC<A'LLt\6&:_/1KSecEjCD9(3n=W\0I\mNk#e8,Zg5^(Xsm#"eD^LTjOD)pXkZd?329JAF^H)p;m89(dDE\8&RH_%^oHfooNfF"hinrN,\ttrD8X5I:pLO'9%r;>*,(l%`mG3D!4/X"Qq,B]N4*-s>K7\h)7BpY=_Q?^\Z.uM)6JLG=g-(C[UE>>BR&f%%F:;kTQgU8OIJ5526d]`i0&;V-gYbU>6]RROn:KFRBQ_ETW)1;gW8O@VT"Pqa,lW_VL+2;_@1;"Nm_/P<EJe$4Ne$.tSpJ\oLHH4\%VeP*\C:I_:`OmIgL0e5SX=@5;dOKO0p"lsi2BZ"Mg)5;G![la,oL;&GLR-4(K]33GO!+3ed^W<$Q/Et!U:e45:(\u>>ie`ZP'\j-%2^%P]F-"T7\j<jCr:l(MQO(tL3nfb1nh$a-IM/,Dm0J%n\iRN`XCHqS&>+%9VLd"04L\fEi/nVBlLDt&'ggO?-'F&epHY#*1^A*'%-;TUjs8U#h3f2'e`8b&[CQ<a3D]\&gA<eIoLIg%=G05.4kn4bt0RQcNKeq?]rIhKX+;Y(jd06@P?,aH<o@.Kce1jB-3?h+?;uPR,%)'If4m)KCX+F<.tQgXO=#U>Qo-7f1FQ.o/F=A7'j]Qg;E`t2eRY"R+>n'=3YKSKc;LIc?dWgKZVYEJ>S#c$lLW\CZ6>be>*"1p%O%QeO-@95Tg@p$fjhF$R-d[.s//.T\*(dO,bWY<_s''IU]g_]OX:'QO1T[5&+W-6^'p[`<O7H[K'k4I=K=00UYM*tuh44-`K[XW]bC%aju!(b#tOK_@':1bY$ju@Z45oJ?&!N(p/TK5BZ<b%T&N'gp-1rldCb[Rmm1$0uF=3mEp&CjbZ]IDVL7RE8+AcgkIf^jiu![9)7FX%-G8g%O=s8seP^k#RCRMSpB[k0s+K_liq-RCmP2b,FBnV@o5(kG_+/FDAks*_NBIf2=2dE?W.1r'5`H$_jNDn%'uW.W3L5toausiM%$.Td/VG;II,*c@9q#&DQqF918Ioi(NM"o'o+*7fb'tL:R,oq$5P%m'(B@I^]:j6tRD+JJI^f1D:d+4@[(NjFYD2k%C]2,"](H4,K%bCMH3]j(U*`%dR6MgX$tHRU(Sb``=]UT#M3+Cr+Fs)E%6(6,:4,"K<%L>CQDcU0TB/>l18dI#'`ZAf=J22OlNHs=13UY#_t*(S>g%8jmhW*Mt#D2-[8h,g]:ZY"mHP#,*m29p"+k4CT=0*EYn9-ESk7dR;gc2R.Iu4F?LAZ%D:aLjREo-.%PbjQ1CJ,@ZubL&$Pn.e`\8%]Wd7O%O0R/A6^R'p`\L1[5^Q3g*dGACc"mE'JeH`5;JF"Lkr%_0qVcYP0ZCo/l#=YC/8H,Hd?nO>dOi:NnqQN?jgMGJD;_>f6/mS%HV61@nheu%6fR;9R+_ZpB:B%+.p<&hBWKm@hHf^=\%$kV?eci5'um\(O1m&M+U]M/0n%\da)QJu_"Ji8QXhQQdifjjCr>trZ@_fB%Zg-Nq250_;2So-(%t3_$@7`S#GY1?q6:luo4Ben+acUk18qZ8XjG(VH"\c=3-+TbO\u8=:C?sXXO8Y5gn+B;,Rm-c,`i?V&3Fq5K%lm#mA,gNamY(d&W*JX%8jYpP/D.MRh+hHo$k&2H[G:@GB\=<eBI:(]=BbklKcks&[I:ijsN20L!c#5:_pZ'LQGAEkBe=(bG_nPOV%rdH:\p'g]mgSaqK'ONHR8"S\NjF`-p%bKVXUhFe-CEYludu[nt[$*amfp[:':Le=36JQ7jkJI^?dMr^D&>7+i6N'5;L[6!J.G-uP%iLs5),Ya&tc'/J/QadiSR?;u58G%Kj9EC.;B]g,%.JK]R[TH5NBc63Q8^]Jk5i<34)MN>[[*17C^6`@;ZJ'mC9r+n*PBuuCZd4e1%.)2:8a$b>BUo8?.]Z_PL1<0faT;t(PC?m2P63eYtYE?e0L"h345uX=I77+=$j7ZP!S"uiI@KLarLR`aZb<AnqTH8!]:E9=t8!ak9%GT5^R:JX\qZ4A6)-LeZgI>I!g2%"KCm[#?3,AFe?k">-+>Z"g7:o?mmF`*B2IX1YDdk;]h:7ekl>DT%Va$)7ZE%(@@?7#7>>$?ln%U&PkP!>_k$!1,Ao_]T,fCrLsQl(O%HFp-3_d2G!K[HioKXBg]Z5-68-:m5M;@[#Fl\htuTK.-gkqjC)4T8-n6-XJUZKl;cQ=-Q3>%1)c+&,@T4ak/P2011O_""_1paD*=B<].]a=QJu]@QXC6!d+uU4K7c`OjTC]4r[eXf4d68*r"AQuQjA_JFt;^=b"M;^kOjPnBi==i%Cm+7D*]hirJY"?HVj8;iKp$DNH.H4BZ:1fc;Q5rn<eKInK_@Fg>4@\[;dNhXVb+;(DN`&3ao1sU#k?U,VR(6+V@K;08=fSPP8kNb%JJnb*]XhZ[^A?2d@NCC92j_FkX33m)/jiAZ4+22n99IuLC)`;qcZP3[T>H0CeEV#I,fcc\%:j,"#!#po1;[peUnJlihbpTiW@i`D%Q`N.;Qkn7M>*iQ(+r$UV+.''-718D$.0Yi6Vl-mpX#o(#f6FU.CK'13YpbMU'%1:_Z-29lBYbht">XK>,S:38:9S]JH?GW+<=Y?)%\BTi%m2Al<Og$5(jtN$4dGn;WMO;;ppsC_B9@/V<9?p__5BBK</A4QZL)9;Y=*Oq[G'YisQ`<.b6_pL=AXaW+KI$4&mC*,4`Z%mr%94p!#-r!?Z<2kel;*I'0_Kqb.A!jT\iB,X/g`VGu6"GKhG-K9.*hKqm'oQR9*QN4""QW[.Apk)2,?QH`H:X'5JCH$=QtKfcOqJL>%Urq?tD?2_c"JNsk*R)a',L`C0aQ[(gBX@#dVf%,8_-2O/P&Too<?e`h:4S`3,8?qSDc__Q1tua)J3ofA`a!<ue77Re6U[0o\>>6^%EMDf?OK3ZO>h^]DTcb#CT?\kY#55D8`1-4l\;IAjW(<DgY&0BU464e%mt.;Q]JfYCZgIJqqtdJcpIk>PY&V4kpNp84iiApRLpD$;%SrGAE20IN,88lQ4):Rc^&a#8<<c5='8:f*agI?-%gUN7(38rq3b!@.*d5HRYK0Cib9!HGPoqA%Q(O!F%K(!%TF8SJ*6bZY<"@obT%6Oqq[H&ChJnUdar:Vi-`4dK'#^mF>=.E&@\QKjPo6X+L76L,V4*I'lQ-a,.9dtMh5]AVO!ce_<J%JuunnjR9t=(/r``Y+D%"N\8Y%B_W4"ltAl1U*POB!6-PlE]\ecae#eR)+2'uN`F"E9+[JV"DX2+Hte#MOZmUAWDXI>'a2X:Hrhi*:D)DKip8Te[8-'NG=e\P#H.Fb%IUGg&C\qG5jGnoe"`.?rQBpU#o(mr%>q4I;9C=t7m(^RNP'M#n#_%J'[ue,7FmL>^\G.sQ?PVer9keSTH.?^LOR4A*_'QW-p+SpC%#l]X4)>=5uo@J^Z2M`07i+oPA>K%Q1)7BpY8[tf/;q6Tm$13?AUpnnYb:r$NE8dJu,i)uK0'qh'Y3qG`:'AaZ#t]>F"p`$?EQg"e%(Z^muWsb60KlYApJpXshqC_.]o`qr6apnrWn(tEWfe-P#60U4dY<Pe/=2S]QAq-0[!=A-ob\*9/j>50K$hMlEo%EAmqi&#H"gbEY%@OF9k:SF;`S:q(71Y7?hJnu0d;]b"C,d]13e&&>r,hJ73(URmC\]S4Gcn26c!YZSl,+'o0OX]n9B8ka3'\?3@o\s2BOZ/'>3BC@/%3VFXmND"J@r9,AfEen(GN/2/+8&IK%I&bqof9/m#V31&Ts2;p($[(aSF3>R8[SC+'_oAP-!@au;$QPkG/i3[d7#4D.I-MW%Y@<ui%GN0ALV5Ob!.9D_"jN7o(RDqsucmL=9Zfcd<0"mK.6o4T*k-@24-1E%(?$9sndPhBr@T;?1V+u=))S.MRs#aK7EflDH;TnAe1X`/6%k0VUjpasl?1r#bn=bl4e"555Bd)87*bDC%*l=gIebZZ?&>J+J.VjO#)P_?7;XIAHjnthToeZI^"\q8i@Yf6i;2:1F%=$]JR2kj09%p^Uh?;<(A!K:uA`5\K!=I]"9&$Xpi)[%mtK26eGu(]bS^Wmd=>P2&!n$`Zg^lM;40d@1\r1<tn#Wn9rk[Zo5K!Vid:3T<k"pQ-)3%TeZ>`@(l3f+ZRlCn+Pat*_$pan5PY]Cn[LG3=Ac.#bbU&-@GOc8n'jp)Ab)-!NtJ[):aE8'Fr$R9I(f\)lP7$`Olo4DL#!i`0iBm%GKeWt1Y&Y50k"LIhg;h>1i\g6IdaBE%raX,&XRlN3@<4Q)!RP%Dn'9\hbIqD6:jV[nJ(9#F`I[aRlJG$GIurhP0PM`:(ao!=7>sa%Tq8_/"QkRWe4u&>'d<lDdC9--8o6g3YQeh=]bK(\IKhB<P3H;:^/#4)hHf^=\@6)Ppql>A!J=lh583hj;LX!?Yi"?Mq6*E\ePa,E%`hD?YS<#K:Nd8JE+Q[FF7q,YUHSrc*NpVsrHi[>Ej3T.*FK7j+]qfYX]qe.:#9Z$d_eh)7dPq5B_I[].lQ_CA,J*&K8FCq!'./Bq%1p'*E:QmF7WAHn.OPGulP/\YY_+SfCH$quN/sU5.-,1L8*#s5qj+%ai6=W>##KJr:!g&ql!Q['V"'Vqkcq@n'4b2TM%]SOjb@qrh%Yu+_dopma]*2rh#`rX7=2'1(jQAD+>^iZBMQnfhLUkogaI@>U.8>RaRK&crX-?9Aqn<.$T?Jg!!j:J]dP'bM;qsRf7#716$jP\Z\%`2\'r+7WXU52VUFO<.YE[Pi7@83"p\IbSm[lm#unS.E?WGTgJmW'eES3<doVWt+'F9=YSd`@X&KDm<S$m[:79IhVDhLN[p#T5Cou%&>RuLMeH)\4n">I^?;AUdc1`olM@+87W71m?mG&m"Ma?H0'RbFi1l"[;OJQ[P1KpF5$C@LP)#s"DB;DJ;L5?=WTui"V7-]O*GI/P%pn.dDBfnrU8Y7W#CY^;O*[LM^Mn"8i(=CdqHeoY#I*YN`V8imYeFbuLNS_BD_+*,d$%AA/?':TsYAW*m/Q7)%i4#P@rG)&QaQ2S7%'$`j98kVtQ.="&^V$-N8GX.iWpn.aCaVEq1N>EL\d()g;rUT<gG@"QFMU@Rgq[E>,:\VJ4r6V4nDn@On<=-B?``MBmrK'G>Jc0JJ%o?74hOeB&.JNV'C*N;'>.CV=u[0'"]pO6eAH$N,h%[q)0((+f>j?$>m?HDTN1AUn*7,p)^)Nlb5;rg_=3JT^ZV*+?GP-WJ6IEG\'%;CS_28FB#^T4:qL^BZoIFn:=b*d$h%>IQ`+mY1Lt+1T&ne9As'A.Bk`h]^[Qbpi!%X97ce6RPH?#BEN2#SdZjG-!p,mm&Z$*@cJ8%hl1p4I1MLM#PHmbnW-3a%o3MT4;=SjoMh@oeq6dkC(GnX&t8!N/&=l!7<s;ISL2j6:u=XT4F?N;oc7mWGZCEN48'8ko7d&/f]Sap%b_osXAfq'4`EhL0fLNm,S6FHa@NnBO8(F*+J.8#;ke$d-<SZjXlEN&mom:N,$OZedcelN5-h$JH./*J6D/?J^$Y,*S,+NCfm!PK4%^W5%9D4%mU?"5`W)obu1`F>c2b+qbRZsaBX6aOCD6NeO<L,hRnoj\N:L4Npe0G&]K``^2!`B1#sM/b!Xc_5/_+EYR9o&L4'Anon1%,k>,!q@dQ[^&'&aMs4Gl37EYAJOCD75b&c+D>,hY)CCP:_]5+dq7/:P_o,0:hjcMsOU_hM,"%`,GCDb*?oiZ;CRFfUZ%b8`'5NuV%K/H>tSQNdIf8VY(J=V)>.m9Z]SIa:*O=+h2C;Gb!o7>T-`#<6+5$5_%ccI*f\EM`YMn=qYFZJKP]O>4"dS17u8qBO'VX]ClSEF_b%*dPXCdCKQ+D4"g^:)Q0i%FZlS[LXJ1fCI;&533sMoR<@_M)B[]oS)c"f[mgOh_4*3rni0S4)\JkiiAo'Kf.Z3"&-$6=i67K72Q!M%XPmL;$YpS]]>s_+k6(H>+08ln:Y%3&cE,u27qN24aK4?,qh$a7,dW4G&Jp)\g[LF?F@/Vlj%Zp1flr@MI,H-T,P-UH*&QRW\X'n>%othUW)E5KVT0.JgKf+frSucA@S>(pf1M[guYP^MPZ$cX!ehC8ak4(^.XC5ciZ%esebSg]VA.;K/D5lPgZ"ninL)gj2OS%<"'IgVe%,iS9jlBLTRK[M9>+L`TeKf'ili$GMD)GZ`COk,.B*;\aLF735K&=8X8^`%C_,@Xqf#sR@\MLE2fchtQLC42.l%0Jo[X(*4`e)lJ4%`?TP6UQ,JJRNl'EmFk0]nPBb_lM22&Q/]=A=T(1_^.Hc0LqZI/c\@,u4;&@9mR4X./.a*^31^8rpDApbj?.Itq[VpF,g5paGZT`f%n$224Hl:Z.+CDGS*otMo)Lq/q[XO]nH#L@pGa*6FV9uNN0<i2ub)[@krVg+A^FI3(9DJqjo(M$KaHqoIfs1;B+C>37q!t=hR5Mr-%qm,r@ZS*Jk7BRL`+66';R=*]Bod!lGb2c2<M0s#f?GqB6\=ZWq@jjh2OKgF79Ep'4<Z-R6A2h`*h0:HkeROk5*L]N'djFbUNG"ls%O>$.tPC2V^'-2WLng/f6q%E72ng0Ak^5U<[BKiqm5SEf(^ls+:]dN4oONbC[7.844?qa@YjVUTf/nCtX)3[?7AQ8rN*JpOkTWJ8G%BWK7TMomlM[`2&2h(-gcHUGJ7U[B/gN7:M@4u2i)?97`S>+4?0eZ8PnfB]]i2Y7S(CPaZVV[TJ,qfkBT%or$<g;uWR<f8T(gm>am%G+D`%8$0N0h5tF80kLk;pA*Dj?W<:K_eJfeXoWk\f@X75O&FsUO[NI7/C)0k6A`3A,SAWJOW?D+"2e&0>[qo5\AmM#+Kf,aB&X`2%:ElrM1d?h4^bTm=n*qc<Y&VNIQtsJMF"L@hbV_oW@O0'kbV_'.R;8&N_-H"_N6F-ZM7H*.S="(W133mL+Z%_`4#1l:$US=*q3k_+%SZo76F)=,dbdG-c(iq8[/&kiKbDNURp8[,fH8=*Npr$FtU6:mZ5!q2p'?i<DpV^=kX,8X`*3mC%NqW<WXq=7L2'NRn)CK];Xq=7L%24oIRbV]m\`*>+:8R_ZTEt-3S\HXT@fB=5$k#r`d!QrVD?U@)%f*cX/=CSGTl4fY%Neik?!_Z=/U?lnWkW%+iS?j?%d*dNu)p$72%d!RKX4d^"VOXAG$0\:K'4SnF3I3p_h4ud28IGO#arDJ+2Eprb3Zi!fP^08Z\Qtr7n`-"Q3RU])*"4GMmGFbCi!@]^Yl>hMremX^T%Et-2ff,9_A_H_`7N0;sB+m;-ff/gY`Z95RO;@T-8lQm,H8+*%D%[]*!&G<\%!"2RO8Sf3=9X7Weo$)b[b"2t]4&TCPCI&2+dajW4%(U[sDD4R0S]3h/CpVL1Q01Z6^Lhd2T6``)F;pLfL_Hunh[Kc*,6^mk3gE\<qM7/_=mFWSSe-I?@TRsOI+-QhP"<h?.jqDM>LkO(A%:0eoKCYZ,c'_u12,\<+WlKib1bG96e+L`TWKsVV;i$Gq*XLb?)'?X<mEdO]H3pn"uXY]imAun#d&[D.BX;U[+VDS%[7r<V:X6YbG%@E1P5VCbY0)dh8cK4jRQ`XpUKmT6fQA#uQ!FtLa\O+h?-CNF"V(7Prlob![ef]Sa$R00TK&J@VqY<k#;Vt3A/:k-jZRJOgPn=]a\%bL@UXM>H7ghU<U%/j2Xp9diRN&ZIs&lia#He.^mQaHQHf1DHfQm(Z*i@37_45;ZAsqBI4C;L]YuV5OaH#PBI/jN9TWe=S<kk`\^=%n[?,-J"W2Wo`nTrrW('i+!=AE:XHDQHDorEc3XdJo4fD?@>Xm!B$YOGF7'S%aFjB-q2i*Ng\ODt5Ij#C.<9o)8]q!'odTV_8>Wtj%/U.9.FTGD]./>7S8]a1gRnEYd3`j$hka+!QTB%*Ji^EbH;Bki?#5lUA!LC8\5[&LY:[S`pN6(t^9W8`:5<tgq*uZ4hBcHeZ],][O%_(d\4:O#LB5G94]rhSh4q\*L<<_j:]OP%'nW="me'@`i5T;50BrbRQEod=k(F5jl0J+*hJ.Y7D*OE#)=B-R<TGnPVjk9f1!gQRFX%WRZ`S@@E!:>R-U5_k]I!eR[YMQ(3XpgZ-q7\mC1Wl)CB%9.'X/D411:*XouZ+LM8rZl50c5=%e3r(3>Vi_Rq1&q>(c4F/S?-2ip5%K%@LQr-XPBD?;I4#N?T"J;s%6]0-p_qZFaH',*:<_a)qACV"s%IJ>r@hF4)$ZK(og7[ZKu["Ien?1ZU_QbWnDih='o<Y-qq%%VGA%j?!H'&?\e3j?FD0,68>cN.<WrMoZ3:!fq-a2+,BJTb+IBECiHn6\9nY5>5[A0+R;p-fP.[@b6/B(20W0;kq4DFKQ'a,<n]S./&e.%UR]m_AR<+Tq3tBu6LEDQ0hlVojNGM-cERLTV+?Li\NeC=5k,F\'Nd/+K$!sQm:.<f#6K)n1.SbH**WZl+]!k[pM?Kn>aO#BfO$QA%5=LYk;SSPs+5u/Qq9=HKIGb':In4m_hW0"AHdJg%*uX+:!!JK*>)%G<j/lr]-T3O&2fc`ADQF2;=R-UR%,eQ6U5U]HIKt$+S='Bq%i66C.2@50Z)<ko@+ma_J%hK2KKHb>oIM[g+PP66([DpfT,leLfUlEFB=KOWYgf]daGg?Z5nL:a^]+UL(:O^c^eL`ch^9N$U^F0fB%(cga#L#sBB,pI:rQZS[+60AMQ`VbQR7j-%oqM$d:Q*V9-P<gqnJSlSmW6mV!MG:QjG!L"VcYg6r#'e\#Y6fpmeSkUFUcIdM0,`'=%>haCrUd>IahC<*:7C7"fk5s]s16a/VG8[qb6tVP)e4RG=mmNVo<tCCD]-[5>rsqseoqbTb%XEkCo/[%DUt`e*&]$BYg[!MZ<m#bO%<2[SV*K::1d[_cJV_r]r9Eao$0m2>MS62uDcWq.t?+"bA$,s6`NKFWR_YC1k8cgEALi+%^TYpI?,AO-ubm^M,Nai:$)B`t#W?oYB%>n4AI%"`t[<$j1`-S7?-a4r^ToDQU]"V@QTKL1c24<]ZRde<l3i3h3sZcgGM]b'MMiAh@(IX@kH"$i3(Nq4)16M')u!@d,Bh8mo>%P@82h2'-6Od)$-^TMPF.ZJ[M&W?O)O-b^N.8:2F9R<Ed(d;#l-30Wb^0;]QZ>W'g=998`i@V<su]DX:K5Zbk?eq_Ze3)nh3F@Hm%%2+Y,(ekX-r6cgT*G*$f2a5YIC*Yf9(;_dO9ao(V>Uon'3N:h=(M/Q6@%GhJU#K5@50\$4U2mOE>:#0BaF(B]BV42>(A#.].0lX$)%),.NVKo1_Z6\f-Iiqs/PkrLdY$.cSiFPR#N6@hp/J\Q>caYU-);W2rf\2)M+.OYil_q%4OoHL9l[D%?kCIlsL]N3rs6FPI`#i,-d%&\/^Q&URFg)$TrRa+!4n.cY?M+:Kt#.%rQ.^A*pgp21(!eJ*O,\A$)@_:P3\*Z^S$l3mFTH#D,a,<F&AMQ[r);pHO4V9):R$;Unn%L<*1gnY*8WgD)OnG_\9O2?0<(gu#ucX%;=$`l:3]C@Y:QL2GND#VK%9)#8a!EB"&T;aci&8Q[JS9li2Wb.t]_Xu^)FfoZYW"8"1B%YC:)bPu`".'bQ!qR(a6?'_TGWCNH%+[#g#8>BAPl:1RbQ^\)'WcU!&8I:TG=<]G3AHcY*O^3te(*`<eUZCs"*6n,c!oc9W4*uV[<%&'p9RX+WZD9=+Sa%&-RP0sP4'!V7f7X'Wc?1`coq.O^oX8=?53HlKs>Ml6D!,,BW,crZ)*p5&T'[h"#g"tSUC\!1l75Yb/L[bWW*%<WV@Hg^bk6,o"i@+'N]-B$.PY0R(a"kCPdibql,nfQ!l8U*V\-BajYl\Y<*)-rT$$^$E1ERO5#\!dX)G;6)*+n>BMe?BAqY<9H;d%TgE+ci6U97hO^($qUMjn)e<=3;5-$Ak3+$);Nh2!XR;YDM41$BEHTlD8A3?Z*Z/@eHWg0DHXW!E;>5b3]"1PPH/K>PG6l12.UTV5%pb=Q;qUI;A"c&9/nZ^M?4ESZ7qP!@0e'Ko)/b]gg'3_;iDScl1QgptY:L93"1XtSKGG.@<W8Q"Y9.*T7R&Ga<a'!'/@2fuAoVH8i%A[aTN^8mXfp<F"HbqL9q"q`lF=hL<Z8q\Q'IgY@+9]'4LU^+HaEDokMhnW?7kbKi.6KDfsO-VfnoMB)+.L90iHHaj;Oa4#"XP_gf%^h*5.@VdmMTd'#ka0:V`e\s1nD[Z@Vni,s#a"T[<Bha7Dg7cg0,qZ3A`5>PUph!kfhaRGUSpOf6Lkd@M,<A-#ZX%3-i^#L;4]8<<%!s=shg6/m@57TE[d"bnG**koKlBD%mD8<doX.O7>o1FcLk.YJEXF>mMijt@9kCXVDZnKHj9>h";FbUXj]&XuLcS\),$F([.>O:I=%_2aeK=l1Ekl/,qTKT1lt`-'D?;\p]2kr(g%&6,Usp<UlbBn=(e8NlhEJ@h7#fb$U2qQQT4-!<72a\\DkgI:ZsENu-!pUWKJ5#mQu%qA#<O)sQG>\O!j393No!&!S=j%N"c"(4AR0iXh^p6]?&Ge$a_'<`V^o*%4_L@4?`ZkHuLsqUDdYl4k(i)hB2WD>0pf<+G#6i@Af9%V_7\>6&ort&rCDAI`dr:-+PKmIBIOQ.J/g]rTq)8,mE>4gI0io4Ol<kOt')/O,WTWj"k'Z^:d%G)bFh-%-C#sG@LoqoT;Bq7Kalq%TT0'mKh`G9WKF@K7MqX#KHKZ+jQCAe%14G+*YQ=/?2AbII+9%FGM'T@."c3Jq]7i^8trtRr66F*l]-fCHgRM-C)2F%ZK^m'/l5NR%*#=$5hoVdtDG5'bH>c.)NMgikIg^XaTAT;:#</\qc&k-qd3-h.0J)L&hLA)=-he2eMCsKIgI%?6o>8"mJ;cUmpZ*LQ(t1_El@/p!%0hVS.;^/"XCA/QDIp"me)ejJV+WeL:Ek</OK\>FXeia.J'%36mnIQ+c*eIfB)5Bh;a6$UIhmA*gYim5Qo1db^/:%S`*b=p1,G9ak%eDqk0(rEek24mtSoU%rW*'Vo<>Qj8<l$\T%#frZ;e@cP4@1KitLb8b7lJVY\]*L<"?3f#=M_K(1mEkfH^tdD&-#;<X:%WcKY5I(m%OgXYt7QX*/&8pQ4]'U,gCImq+p-Z8*mt,AtNn)h"DBdc^^P*.'Rhd#t3H&h\[br9%qu!8A2K,4af:Et8$$*_^Gng,[DS'7CgC/o[%_LBY7ZjSWp`p-7T>:AqR(];s-Y:`00;oK;$J&V"fPc4#Q/8Go+nuTr!TH%Td&T6ZC1O=J(6l."1-0t*N%n6;gNS:BRiS245PrH#c%Iu7MUO?1oHk*l_^g"/p12?[8X1lI9F&N#L\>_IgM[@MTY&rA6XI`g0I96+<mqHVu3<9P_Fr7Q39p\0uMP*#<!kZK&hKKo9^5E_<g%pa+OdnOS%->P@I$AKd5:7f[c*qkhlI?A@ZC$T^-Ub,u1f/\8!N+sAmu:)"E]0ik,>/Lr#KQ>;<Te1%bk:m,*t`9M0\fg8[^KET*n%iluPgFPm>5R_6569:*a8mW.bK8_rOFJ),!.XbGYb946CB`od*L$3(4lmrhC-CLcm@*dTs@3peCVab:d?&Za!"GpornXdiX65`PZf%%VO&p:<%9cKOJii-=]ojhtH"aFOlIsQ*Z>o9%bGg8=CV=gk'=1V--0<B$7nm\1MSgMX^S/pR7G%4171KFgqp8UUOg?X'QUsJ^CiU%W<OmVA8B9g7A;CP:,8Q\X(5HASamaA_%c*AdWMdj;m+ojMmnJRDaN_['q@Sk@7UdVEPQ/"O`4\W3EI$2<gYK[f6-u4=3h.Rj`p%"%0%k/rOtQ9gV*6A5F8&6R*NKICCGfQa'^:BYLJ.5VNs063IX]c,&"cMQ@o.SH-DVL!El#pTlm#t`WI="gc+TiOJ``&V7bSZtP;Ad_%oIXdqn8"IFD-*3Fb7M%#4V=:3`PlRdM<#hsO-8<)h*&<l=n56b?6<f8N@eTmo`2FloRNeunA00LUst6b4;Oi\5ViB$K9#K8fkEH5%flNPaVp3:/PB9EM7@;cL5u_SgY#_\fs"DJ0'jS5!DfUo;W$.d9<0rN08ZUUV+V(d9Hec]D9m?(dY'!,a^f]hM[fD_MEa+(+^2ij^%!et6/$FBW`@;LsCURZ/9PVC?9j/4.2iU"Rh5?2#PHqPj,]shN5G>&&r=NBanW)aSI)A_p1<FHn^$j(SkNl_Lf_K>m`<gH:N)54(+%CSWRRp,T.#Oi3t*R-P<_c>$HLJII9?8*'ALB3[iUQ"d(=jsi_D>I0e,AmRPEX@h>Z8.mV"0suXa5p.*;JR'JK#:^pGI3-GQ:C5tr%-(VUbC6EK)f_1Y=FHH6A.HMKo85:oeN=CNeO!8!9C4HMb.`/KV*B)AB;LbK.1"$E&l:7,`=<;\'^8ZmY:n7l[!i?Pp#S&m%ODP9L%WNYE69T"/'&t\>IH5(n?brFa=^3*1X:"bNAoZ0cd6>-Zm*>1[WGM"O)<]"3Fi=+5kY`0Is!c#A*YAQ3aXf@.:iT((a7>XL,dHW;'%[b)V/gFm#FX_?hc-Gu8,Vd\hdNGU>Fe,:&Q4p;+,)Fd7&2DrJd7P=p((KgF0.SD7#3.h?&CngV3H!qNo&o9rP7Z]BkCk!7EJW@f*%\.A\&St_uIjNt--c@eh=q_54b[3@r^FinAX])\U?3E7DL@Dn)B3\ffJX$G6#INX9cRs*@gX/PW]9QFX<@iX"iiLu3'kG)Ql`D#<i%HI.'QPBJ]fb^hIu_a?,<3r)Fraj5;B+K))`KjuFnjpp@;qZ]$J(.ART,:V8uH9!iNOhiAD?.1AbSMocBH,s;hC[-)+X#"U,*GXc$%(&n"fpok`.JWtN<J,#od&lH-0Ur0ond`JkViQ50nqic4#/2NE.T*/F^q-SSShu:m8rV#.JC\[5UhuE>(J+k&]J,e]Hr/ZnGrnjo/%qknr?kmr:=:VZi'fDkcX?iJ[?YCHH6c[YuVs8;`\QbWI[YQ+CZ+2@g@rQDZ7s6\FQs5U;4qt8_$s6!bh09H&GHi+D(puh\P00fDbBFn>i~>%AI9_PrivateDataEnd