%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 008x001.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 273 213
%%HiResBoundingBox: 0 0 272.6147 212.1309
%%CropBox: 0 0 272.6147 212.1309
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 17534 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF59FF847DA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FF%FFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFA8FFA8FFA9FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FD04FFA87DFF7E7DA87DFD0AA87D2E532E532F532E%532E532E532F53287DFD0AA87DFD0BA87D532F532E532F532E532F532E53%2F5352FD0BA87DFD13A87DFD12A87DFD04FFA87DFFA8A8A8FD0BFF7E2F07%2F072F072F0730072F072F072F53FD17FF292F072F072F072F072F072F07%2F2953FD32FFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F%077DA8FD15FFA82F072F072F072F072F072F072F070D2FFD32FFA8FD09FF%A8FD0BFF7E2F0D300D302F300D302F300D302F2F59FD17FF2F302F300D30%2F300D302F300D300D53A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F072F%072F072F072F072F077DFD16FFA82F072F072F072F072F072F072F070D2F%FD32FFA8FD09FFA8FD0BFF7E2F07302F2F07302F2F07302F2F072F7DFD17%FF2F2F07302F2F07302F2F07302F2F0753FD32FFA8FD09FFA8A8FD0AFF84%072F072F072F072F072F072F072F077EFD16FFA82F072F072F072F072F07%2F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F07302F300D302F300D302F%300D307DFD17FF2F2F0D302F300D302F300D302F300759FD32FFA8FD0AFF%A8FD0AFFA8072F072F072F072F072F072F072F077EFD16FFA82F072F072F%072F072F072F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F0D2F07302F2F%07302F2F07300D2F59FD17FF2F302F2F07302F2F07302F2F07300753A8FD%31FFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F077DA8FD%15FFA82F072F072F072F072F072F072F070D2FFD32FFA8FD09FFA8FD0BFF%7E2F0D300D302F300D302F300D302F2F59FD17FF2F302F300D302F300D30%2F300D300D53A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F%072F072F077DFD16FFA82F072F072F072F072F072F072F070D2FFD32FFA8%FD09FFA8FD0BFF7E2F07302F2F07302F2F07302F2F072F7DFD17FF2F2F07%302F2F07302F2F07302F2F0753FD32FFA8FD09FFA8A8FD0AFF84072F072F%072F072F072F072F072F077EFD16FFA82F072F072F072F072F072F072F07%0D2FFD32FFA8FD09FFA8FD0BFF7E2F07302F300D302F300D302F300D307D%FD17FF2F2F0D302F300D302F300D302F300759FD32FFA8FD0AFFA8FD0AFF%A8072F072F072F072F072F072F072F077EFD16FFA82F072F072F072F072F%072F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F0D2F07302F2F07302F2F%07300D2F59FD17FF2F302F2F07302F2F07302F2F07300753A8FD31FFA8FD%09FFA8A8FD0AFF7E072F072F072F072F072F072F072F077DA8FD15FFA82F%072F072F072F072F072F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F0D30%0D302F300D302F300D302F2F59FD17FF2F302F300D302F300D302F300D30%0D53A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F%077DFD16FFA82F072F072F072F072F072F072F070D2FFD32FFA8FD05FFA8%FFA8AFA8FD0BFF7E2F07302F2F07302F2F07302F2F072F7DFD17FF2F2F07%302F2F07302F2F07302F2F0753FD32FFA8FD04FFA87DFFA852A8A8FD0AFF%84072F072F072F072F072F072F072F077EFD16FFA82F072F072F072F072F%072F072F070D2FFD32FFA8FD05FF7DFFA8847DA8FD0AFF7E2F07302F300D%302F300D302F300D307DFD17FF2F2F0D302F300D302F300D302F300759FD%32FF7DFD04FFFD05A8AFA8FD0AFFA8072F072F072F072F072F072F072F07%7EFD16FFA82F072F072F072F072F072F072F070D2FFD32FFA8FD09FFA8FD%0BFF7E2F0D2F07302F2F07302F2F07300D2F59FD17FF2F302F2F07302F2F%07302F2F07300753A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F072F072F%072F072F072F077DA8FD15FFA82F072F072F072F072F072F072F070D2FFD%32FFA8FD09FFA8FD0BFF7E2F0D300D302F300D302F300D302F2F59FD17FF%2F302F300D302F300D302F300D300D53A8FD31FFA8FD09FFA8A8FD0AFF7E%072F072F072F072F072F072F072F077DFD16FFA82F072F072F072F072F07%2F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F07302F2F07302F2F07302F%2F072F7DFD17FF2F2F07302F2F07302F2F07302F2F0753FD32FFA8FD09FF%A8A8FD0AFF84072F072F072F072F072F072F072F077EFD16FFA82F072F07%2F072F072F072F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F07302F300D%302F300D302F300D307DFD17FF2F2F0D302F300D302F300D302F300759FD%32FFA8FD0AFFA8FD0AFFA8072F072F072F072F072F072F072F077EFD16FF%A82F072F072F072F072F072F072F070D2FFD32FFA8FD09FFA8FD0BFF7E2F%0D2F07302F2F07302F2F07300D2F59FD17FF2F302F2F07302F2F07302F2F%07300753A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F%072F077DA8FD15FFA82F072F072F072F072F072F072F070D2FFD32FFA8FD%09FFA8FD0BFF7E2F0D300D302F300D302F300D302F2F59FD17FF2F302F30%0D302F300D302F300D300D53A8FD31FFA8FD09FFA8A8FD0AFF7E072F072F%072F072F072F072F072F077DFD16FFA82F072F072F072F072F072F072F07%0D2FFD32FFA8FF7DA8FD06FFA8FD0BFF7E2F07302F2F07302F2F07302F2F%072F7DFD17FF2F2F07302F2F07302F2F07302F2F0753FD32FFA8A87D7DFD%06FFA8A8FD0AFF84072F072F072F072F072F072F072F077EFD16FFA82F07%2F072F072F072F072F072F070D2FFD32FFFD04A8FD06FFA8FD0BFF7E2F07%302F300D302F300D302F300D307DFD17FF2F2F0D302F300D302F300D302F%300759FD32FFA8A87DA8FD07FFA8FD0AFFA8072F072F072F072F072F072F%072F077EFD16FFA82F072F072F072F072F072F072F070D2FFD32FFA8A87D%FD07FFA8FD0BFF7E2F0D2F07302F2F07302F2F07300D2F59FD17FF2F302F%2F07302F2F07302F2F07300753A8FD31FFA87D7DA8FD06FFA8A8FD0AFF7E%072F072F072F072F072F072F072F077DA8FD15FFA82F072F072F072F072F%072F072F070D2FFD32FFA8A852A8FD06FFA8FD0BFF7E2F0D300D302F300D%302F300D302F2F59FD17FF2F302F300D302F300D302F300D300D53A8FD31%FFA8A87DA8FFA8A8FFFF7DA8A8FD0AFF7E072F072F072F072F072F072F07%2F077DFD16FFA82F072F072F072F072F072F072F070D2FFD32FFA8FF7DA8%FFFF7DFF847D7DA8FD0AFF7E2F07302F2F07302F2F07302F2F072F7DFFFF%FFA8A87EA87EA87EA87EA87EA87EA87EA8A8FFFFFF2F2F07302F2F07302F%2F07302F2F0753FD04FF7EA87EA87EA87EA87EA87EA87EA87DAFFFFFFFA8%7EA87EA87EA87EA87EA87EA87EA87DFD0BFF7DA87DA8FFA87DA8A852A8A8%FD0AFF84072F072F072F072F072F072F072F077EFFFFA853072F072F072F%072F072F072F072F0684FFFFA82F072F072F072F072F072F072F070D2FFF%FFFF7D2F072F072F072F072F072F072F072959FFFFFF2E0D072F072F072F%072F072F072F072F7DFD0AFFA8A8537DFD06FFA8FD0BFF7E2F07302F300D%302F300D302F300D307DFFFFFF532F07300D3007300D3007300D30072F7E%FFFFFF2F2F0D302F300D302F300D302F300759FFFFFFA80D3007300D3007%300D3007300D300784FFFFA85A073007300D3007300D3007300D2F29A8FD%0AFFA8A87DA8FD07FFA8FD0AFFA8072F072F072F072F072F072F072F077E%FFFFA859072F072F072F072F072F072F072F07A8FFFFA82F072F072F072F%072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F7DFF%FFFF532F072F072F072F072F072F072F072F7DFD0AFFA8A852A8FD06FFA8%FD0BFF7E2F0D2F07302F2F07302F2F07300D2F59FFFFFF532F2F2F07302F%2F07302F2F07300D2F7EFFFFFF2F302F2F07302F2F07302F2F07300753A8%FFFF8407302F2F07302F2F07302F2F0730077EFFFFFF5307302F2F07302F%2F07302F2F07302FA8FD0AFFA87D7DA8FD06FFA8A8FD0AFF7E072F072F07%2F072F072F072F072F077DA8FFA853072F072F072F072F072F072F072F07%7EFFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F07%2F072F072F072F072F7DFFFFFF530D072F072F072F072F072F072F072F7E%FD0AFFA8A87DFD07FFA8FD0BFF7E2F0D300D302F300D302F300D302F2F59%FFFFFF53302F300D302F300D302F300D300D2F7EFFFFFF2F302F300D302F%300D302F300D300D53A8FFFFA807302F300D302F300D302F300D30077EFF%FFFF5907302F300D302F300D302F300D302FA8FD0AFFA853A8A8FD06FFA8%A8FD0AFF7E072F072F072F072F072F072F072F077DFFFFA853072F072F07%2F072F072F072F072F077EFFFFA82F072F072F072F072F072F072F070D2F%FFFFFF7D2F072F072F072F072F072F072F072F7DFFFFFF530D072F072F07%2F072F072F072F072F7EFD0AFFA87D7DFD07FFA8FD0BFF7E2F07302F2F07%302F2F07302F2F072F7DFFFFFF532F07302F2F07302F2F07302F2F072F7E%FFFFFF2F2F07302F2F07302F2F07302F2F0753FFFFFFA8072F07302F2F07%302F2F07302F2F077EFFFFA859072F07302F2F07302F2F07302F2F29A8FD%0AFFA8FD09FFA8A8FD0AFF84072F072F072F072F072F072F072F077EFFFF%A853072F072F072F072F072F072F072F0784FFFFA82F072F072F072F072F%072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F59FFFFFF%2F0D072F072F072F072F072F072F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F%07302F300D302F300D302F300D307DFFFFFF532F0D302F300D302F300D30%2F30072F7EFFFFFF2F2F0D302F300D302F300D302F300759FFFFFFA82F30%0D302F300D302F300D302F300784FFFFA85A07300D302F300D302F300D30%2F3029A8FD0AFFA8FD0AFFA8FD0AFFA8072F072F072F072F072F072F072F%077EFFFFA859072F072F072F072F072F072F072F07A8FFFFA82F072F072F%072F072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F%7DFFFFFF532F072F072F072F072F072F072F072F7DFD0AFFA8FD09FFA8FD%0BFF7E2F0D2F07302F2F07302F2F07300D2F59FFFFFF532F2F2F07302F2F%07302F2F07300D2F7EFFFFFF2F302F2F07302F2F07302F2F07300753A8FF%FF8407302F2F07302F2F07302F2F0730077EFFFFFF5307302F2F07302F2F%07302F2F07302FA8FD0AFFA8FD09FFA8A8FD0AFF7E072F072F072F072F07%2F072F072F077DA8FFA853072F072F072F072F072F072F072F077EFFFFA8%2F072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F072F072F07%2F072F072F7DFFFFFF530D072F072F072F072F072F072F072F7EFD0AFFA8%FD09FFA8FD0BFF7E2F0D300D302F300D302F300D302F2F59FFFFFF53302F%300D302F300D302F300D300D2F7EFFFFFF2F302F300D302F300D302F300D%300D53A8FFFFA807302F300D302F300D302F300D30077EFFFFFF5907302F%300D302F300D302F300D302FA8FD0AFFA8FD09FFA8A8FD0AFF7E072F072F%072F072F072F072F072F077DFFFFA853072F072F072F072F072F072F072F%077EFFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F%072F072F072F072F072F7DFFFFFF530D072F072F072F072F072F072F072F%7EFD0AFFA8FD09FFA8FD0BFF7E2F07302F2F07302F2F07302F2F072F7DFF%FFFF532F07302F2F07302F2F07302F2F072F7EFFFFFF2F2F07302F2F0730%2F2F07302F2F0753FFFFFFA8072F07302F2F07302F2F07302F2F077EFFFF%A859072F07302F2F07302F2F07302F2F29A8FD0AFFA8FD09FFA8A8FD0AFF%84072F072F072F072F072F072F072F077EFFFFA853072F072F072F072F07%2F072F072F0784FFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D%2F072F072F072F072F072F072F072F59FFFFFF2F0D072F072F072F072F07%2F072F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F07302F300D302F300D302F%300D307DFFFFFF532F0D302F300D302F300D302F30072F7EFFFFFF2F2F0D%302F300D302F300D302F300759FFFFFFA82F300D302F300D302F300D302F%300784FFFFA85A07300D302F300D302F300D302F3029A8FD0AFFA8FD0AFF%A8FD0AFFA8072F072F072F072F072F072F072F077EFFFFA859072F072F07%2F072F072F072F072F07A8FFFFA82F072F072F072F072F072F072F070D2F%FFFFFF7D2F072F072F072F072F072F072F072F7DFFFFFF532F072F072F07%2F072F072F072F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F0D2F07302F2F07%302F2F07300D2F59FFFFFF532F2F2F07302F2F07302F2F07300D2F7EFFFF%FF2F302F2F07302F2F07302F2F07300753A8FFFF8407302F2F07302F2F07%302F2F0730077EFFFFFF5307302F2F07302F2F07302F2F07302FA8FD0AFF%A8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F077DA8FFA853%072F072F072F072F072F072F072F077EFFFFA82F072F072F072F072F072F%072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F7DFFFFFF530D%072F072F072F072F072F072F072F7EFD0AFFA8FD05FF7DFFA87DA8FD0BFF%7E2F0D300D302F300D302F300D302F2F59FFFFFF53302F300D302F300D30%2F300D300D2F7EFFFFFF2F302F300D302F300D302F300D300D53A8FFFFA8%07302F300D302F300D302F300D30077EFFFFFF5907302F300D302F300D30%2F300D302FA8FD0AFFA8FD04FF7D7DA8A852A87DFD0AFF7E072F072F072F%072F072F072F072F077DFFFFA853072F072F072F072F072F072F072F077E%FFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F072F%072F072F072F072F7DFFFFFF530D072F072F072F072F072F072F072F7EFD%0AFFA8FD04FFA87DA8A87DA8A8FD0AFF7E2F07302F2F07302F2F07302F2F%072F7DFFFFFF532F07302F2F07302F2F07302F2F072F7EFFFFFF2F2F0730%2F2F07302F2F07302F2F0753FFFFFFA8072F07302F2F07302F2F07302F2F%077EFFFFA859072F07302F2F07302F2F07302F2F29A8FD0AFF7EFD08FFA8%FFA8FD0AFF84072F072F072F072F072F072F072F077EFFFFA853072F072F%072F072F072F072F072F0784FFFFA82F072F072F072F072F072F072F070D%2FFFFFFF7D2F072F072F072F072F072F072F072F59FFFFFF2F0D072F072F%072F072F072F072F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F07302F300D30%2F300D302F300D307DFFFFFF532F0D302F300D302F300D302F30072F7EFF%FFFF2F2F0D302F300D302F300D302F300759FFFFFFA82F300D302F300D30%2F300D302F300784FFFFA85A07300D302F300D302F300D302F3029A8FD0A%FFA8FD0AFFA8FD0AFFA8072F072F072F072F072F072F072F077EFFFFA859%072F072F072F072F072F072F072F07A8FFFFA82F072F072F072F072F072F%072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F7DFFFFFF532F%072F072F072F072F072F072F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F0D2F%07302F2F07302F2F07300D2F59FFFFFF532F2F2F07302F2F07302F2F0730%0D2F7EFFFFFF2F302F2F07302F2F07302F2F07300753A8FFFF8407302F2F%07302F2F07302F2F0730077EFFFFFF5307302F2F07302F2F07302F2F0730%2FA8FD0AFFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F07%7DA8FFA853072F072F072F072F072F072F072F077EFFFFA82F072F072F07%2F072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F7D%FFFFFF530D072F072F072F072F072F072F072F7EFD0AFFA8FD09FFA8FD0B%FF7E2F0D300D302F300D302F300D302F2F59FFFFFF53302F300D302F300D%302F300D300D2F7EFFFFFF2F302F300D302F300D302F300D300D53A8FFFF%A807302F300D302F300D302F300D30077EFFFFFF5907302F300D302F300D%302F300D302FA8FD0AFFA8FD09FFA8A8FD0AFF7E072F072F072F072F072F%072F072F077DFFFFA853072F072F072F072F072F072F072F077EFFFFA82F%072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F%072F072F7DFFFFFF530D072F072F072F072F072F072F072F7EFD0AFFA8FD%09FFA8FD0BFF7E2F07302F2F07302F2F07302F2F072F7DFFFFFF532F0730%2F2F07302F2F07302F2F072F7EFFFFFF2F2F07302F2F07302F2F07302F2F%0753FFFFFFA8072F07302F2F07302F2F07302F2F077EFFFFA859072F0730%2F2F07302F2F07302F2F29A8FD0AFFA8FD09FFA8A8FD0AFF84072F072F07%2F072F072F072F072F077EFFFFA853072F072F072F072F072F072F072F07%84FFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D2F072F072F07%2F072F072F072F072F59FFFFFF2F0D072F072F072F072F072F072F072F7D%FD0AFFA8FD09FFA8FD0BFF7E2F07302F300D302F300D302F300D307DFFFF%FF532F0D302F300D302F300D302F30072F7EFFFFFF2F2F0D302F300D302F%300D302F300759FFFFFFA82F300D302F300D302F300D302F300784FFFFA8%5A07300D302F300D302F300D302F3029A8FD0AFFA8FD0AFFA8FD0AFFA807%2F072F072F072F072F072F072F077EFFFFA859072F072F072F072F072F07%2F072F07A8FFFFA82F072F072F072F072F072F072F070D2FFFFFFF7D2F07%2F072F072F072F072F072F072F7DFFFFFF532F072F072F072F072F072F07%2F072F7DFD0AFFA8FD09FFA8FD0BFF7E2F0D2F07302F2F07302F2F07300D%2F59FFFFFF532F2F2F07302F2F07302F2F07300D2F7EFFFFFF2F302F2F07%302F2F07302F2F07300753A8FFFF8407302F2F07302F2F07302F2F073007%7EFFFFFF5307302F2F07302F2F07302F2F07302FA8FD0AFFA8FD09FFA8A8%FD0AFF7E072F072F072F072F072F072F072F077DA8FFA853072F072F072F%072F072F072F072F077EFFFFA82F072F072F072F072F072F072F070D2FFF%FFFF7D2F072F072F072F072F072F072F072F7DFFFFFF530D072F072F072F%072F072F072F072F7EFD0AFFA8FD09FFA8FD0BFF7E2F0D300D302F300D30%2F300D302F2F59FFFFFF53302F300D302F300D302F300D300D2F7EFFFFFF%2F302F300D302F300D302F300D300D53A8FFFFA807302F300D302F300D30%2F300D30077EFFFFFF5907302F300D302F300D302F300D302FA8FD0AFFA8%FD09FFA8A8FD0AFF7E072F072F072F072F072F072F072F077DFFFFA85307%2F072F072F072F072F072F072F077EFFFFA82F072F072F072F072F072F07%2F070D2FFFFFFF7D2F072F072F072F072F072F072F072F7DFFFFFF530D07%2F072F072F072F072F072F072F7EFD0AFFA8FD09FFA8FD0BFF7E2F07302F%2F07302F2F07302F2F072F7DFFFFFF532F07302F2F07302F2F07302F2F07%2F7EFFFFFF2F2F07302F2F07302F2F07302F2F0753FFFFFFA8072F07302F%2F07302F2F07302F2F077EFFFFA859072F07302F2F07302F2F07302F2F29%A8FD0AFFA8FD09FFA8A8FD0AFF84072F072F072F072F072F072F072F077E%FFFFA853072F072F072F072F072F072F072F0784FFFFA82F072F072F072F%072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F072F59FF%FFFF2F0D072F072F072F072F072F072F072F7DFD0AFFA8FD09FFA8FD0BFF%7E2F07302F300D302F300D302F300D307DFFFFFF532F0D302F300D302F30%0D302F30072F7EFFFFFF2F2F0D302F300D302F300D302F300759FFFFFFA8%2F300D302F300D302F300D302F300784FFFFA85A07300D302F300D302F30%0D302F3029A8FD0AFFA8FD0AFFA8FD0AFFA8072F072F072F072F072F072F%072F077EFFFFA859072F072F072F072F072F072F072F07A8FFFFA82F072F%072F072F072F072F072F070D2FFFFFFF7D2F072F072F072F072F072F072F%072F7DFFFFFF532F072F072F072F072F072F072F072F7DFD0AFFA8FD09FF%A8FD0BFF7E2F0D2F07300D2F07300D2F07300D2F59FFFFFF532F0D2F0730%0D2F07300D2F07300D2F7EFFFFFF2F300D2F07300D2F07300D2F07300753%A8FFFF8407300D2F07300D2F07300D2F0730077EFFFFFF5307300D2F0730%0D2F07300D2F07302FA8FD0AFFA8FD04FFA87DFFA87DA8A8FFFFFFA8FFFF%FFA8FFFF7E060D070D072F072F072F070D072F0759A8FFA853072F070D07%2F072F072F070D070D077EFFFFA82F072F070D070D292F072F070D072F2E%FFFFFF7D07072F070D070D292F072F070D070D59FFFFFF2F07072F070D07%2F290D072F070D072F7DFFA8FFFFFFA8FD04FFA8FD04FFA852FF7D7D7DFD%04A8A9A8A8A8A9A8A87D7E7D7E597E7D7E7D7E7D7E7D7E7D7E7DA9A8A87D%7E7D7E597E7D7E7D7E7D7E597E7D7E7DFFA8A87D7E7D7E597E7D7E7D7E7D%7E597E7D7EA8AFA8A8537E7D7E7D7E7D7E597E7D7E597E59A8A8AFA87E59%7E7D7E7D7E7D7E597E7D7E597E7DA8A8A9A8A8A8A9FD04A87DFD04FFA87D%A8A87DFD11FFA8A8A87EA8FF7DFD05FFA9FD07FF7DAFA8A8FFA87DFD05FF%A8FD07FF7DFF7DFFFFA8A8FD0CFFA87DFF7DFFA8A8FD0DFFFD04A8FF7DA8%FD2BFF7EA827FFA852A8FD0CFFA8A87E52FF7D7DFD0DFF7DA87D7DFF7D7D%FD0CFFA8A8A852A8FF7DFD0DFFA8A87D7DFFA97DFD2AFFA8FD047DA852A9%FD0CFFFD047DA87D7DFD0DFF52A8527EA87D7DFD0CFFA852A852A8A87DA8%FD0CFF847DA852FF527DFD2BFFA8FD13FFA8FD27FFA8FFFFFFA8FD13FFA8%FD51FFA859A8A8A87DFFA8FD78FF7DA87D7D527D7D7DFD78FFA87DA8FD05%7DFD36FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T09:41:24+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T09:41:24+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T09:41:24+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwr/B2ss3mpUSysR5&#xA;hSSCG4tGZGjjMUwSV4hClZzLNzkcyGtafsiqq/y/oWrafLHpn146ZCFnu/qGnLA1tF61wSsUbTwF&#xA;uCA9lXfsOmFWQ/oq+/6vN5/wFn/2T4Fd+ir7/q83n/AWf/ZPiryH85PPnnXyjr1lY6TrEnoT2onk&#xA;9aC0c8/UddiIV2oubPs/SQzA8V7OFq9RLHVdWA/8ry/ND/q8D/pGtf8Aqlmw/knF3y/HwcP+UMnc&#xA;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&#xA;dirsVdirsVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:FF7F1174072068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FF7F1174072068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F1174072068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T09:41:24+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -212.131 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 212.131 li
272.615 212.131 li
272.615 0 li
cp
clp
[1 0 0 1 0 0 ]ct
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
46.3433 196.952 mo
79.8232 196.952 li
79.8232 2.55225 li
46.3433 2.55225 li
46.3433 196.952 li
cp
.934 .746 0 0 cmyk
f
gsave
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
46.3433 196.952 mo
79.8232 196.952 li
79.8232 2.55225 li
46.3433 2.55225 li
46.3433 196.952 li
cp
0 0 0 1 cmyk
@
grestore
88.1934 196.952 mo
121.673 196.952 li
121.673 99.752 li
88.1934 99.752 li
88.1934 196.952 li
cp
f
gsave
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
88.1934 196.952 mo
121.673 196.952 li
121.673 99.752 li
88.1934 99.752 li
88.1934 196.952 li
cp
0 0 0 1 cmyk
@
grestore
130.043 196.952 mo
163.523 196.952 li
163.523 2.55225 li
130.043 2.55225 li
130.043 196.952 li
cp
f
gsave
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
130.043 196.952 mo
163.523 196.952 li
163.523 2.55225 li
130.043 2.55225 li
130.043 196.952 li
cp
0 0 0 1 cmyk
@
grestore
171.893 196.952 mo
205.374 196.952 li
205.374 99.752 li
171.893 99.752 li
171.893 196.952 li
cp
f
gsave
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
171.893 196.952 mo
205.374 196.952 li
205.374 99.752 li
171.893 99.752 li
171.893 196.952 li
cp
0 0 0 1 cmyk
@
grestore
213.744 196.952 mo
247.223 196.952 li
247.223 99.752 li
213.744 99.752 li
213.744 196.952 li
cp
f
gsave
21.2334 196.952 mo
272.333 196.952 li
272.333 2.55225 li
21.2334 2.55225 li
21.2334 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
213.744 196.952 mo
247.223 196.952 li
247.223 99.752 li
213.744 99.752 li
213.744 196.952 li
cp
0 0 0 1 cmyk
@
grestore
63.0835 196.952 mo
63.0835 194.701 li
63.0835 196.952 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
63.0835 196.952 mo
63.0835 194.702 li
@
63.0835 4.80225 mo
63.0835 2.55225 li
63.0835 4.80225 li
cp
f
63.0835 2.55225 mo
63.0835 4.80225 li
@
57.0078 203.651 mo
58.0947 203.651 li
58.0947 199.898 li
56.9136 200.135 li
56.9136 199.527 li
58.0879 199.291 li
58.7559 199.291 li
58.7559 203.651 li
59.8428 203.651 li
59.8428 204.212 li
57.0078 204.212 li
57.0078 203.651 li
cp
f
62.6104 201.877 mo
62.293 201.877 62.0435 201.964 61.8608 202.133 cv
61.6787 202.302 61.5913 202.531 61.5913 202.828 cv
61.5913 203.125 61.6787 203.361 61.8608 203.529 cv
62.0435 203.699 62.293 203.78 62.6104 203.78 cv
62.9209 203.78 63.1704 203.699 63.353 203.523 cv
63.5352 203.355 63.6294 203.125 63.6294 202.828 cv
63.6294 202.531 63.5352 202.302 63.3594 202.133 cv
63.1772 201.964 62.9277 201.877 62.6104 201.877 cv
61.9419 201.593 mo
61.6587 201.525 61.436 201.391 61.2739 201.194 cv
61.1118 200.998 61.0376 200.763 61.0376 200.479 cv
61.0376 200.088 61.1724 199.777 61.4561 199.547 cv
61.7329 199.318 62.1177 199.203 62.6104 199.203 cv
63.0962 199.203 63.481 199.318 63.7646 199.547 cv
64.0415 199.777 64.1831 200.088 64.1831 200.479 cv
64.1831 200.763 64.1021 200.998 63.9399 201.194 cv
63.7778 201.391 63.562 201.525 63.2788 201.593 cv
63.5957 201.668 63.8457 201.816 64.0278 202.031 cv
64.2031 202.247 64.2979 202.518 64.2979 202.828 cv
64.2979 203.308 64.1494 203.672 63.8589 203.922 cv
63.562 204.178 63.1504 204.3 62.6104 204.3 cv
62.0635 204.3 61.645 204.178 61.355 203.922 cv
61.0645 203.672 60.9229 203.308 60.9229 202.828 cv
60.9229 202.518 61.0107 202.247 61.1929 202.031 cv
61.3682 201.816 61.6182 201.668 61.9419 201.593 cv
61.6992 200.54 mo
61.6992 200.796 61.7734 200.998 61.9355 201.141 cv
62.0972 201.282 62.3198 201.35 62.6104 201.35 cv
62.894 201.35 63.1167 201.282 63.2788 201.141 cv
63.4404 200.998 63.5215 200.796 63.5215 200.54 cv
63.5215 200.283 63.4404 200.088 63.2788 199.945 cv
63.1167 199.804 62.894 199.73 62.6104 199.73 cv
62.3198 199.73 62.0972 199.804 61.9355 199.945 cv
61.7734 200.088 61.6992 200.283 61.6992 200.54 cv
f
65.479 203.375 mo
66.1743 203.375 li
66.1743 204.212 li
65.479 204.212 li
65.479 203.375 li
cp
f
67.6455 204.111 mo
67.6455 203.503 li
67.8076 203.584 67.9766 203.645 68.1519 203.686 cv
68.3208 203.726 68.4893 203.746 68.6582 203.746 cv
69.0903 203.746 69.4277 203.604 69.6572 203.308 cv
69.8867 203.01 70.0215 202.564 70.062 201.957 cv
69.9272 202.146 69.7651 202.295 69.5762 202.396 cv
69.3804 202.498 69.1646 202.545 68.9282 202.545 cv
68.4287 202.545 68.0371 202.396 67.7534 202.1 cv
67.4702 201.803 67.3281 201.396 67.3281 200.877 cv
67.3281 200.378 67.4771 199.973 67.7739 199.662 cv
68.0708 199.359 68.4692 199.203 68.9688 199.203 cv
69.5356 199.203 69.9741 199.426 70.2715 199.857 cv
70.5684 200.297 70.7236 200.932 70.7236 201.755 cv
70.7236 202.538 70.5347 203.152 70.1699 203.611 cv
69.7988 204.07 69.3062 204.3 68.6851 204.3 cv
68.5161 204.3 68.3477 204.279 68.1787 204.252 cv
68.0034 204.226 67.8276 204.178 67.6455 204.111 cv
68.9688 202.025 mo
69.2656 202.025 69.502 201.924 69.6772 201.721 cv
69.853 201.519 69.9404 201.235 69.9404 200.877 cv
69.9404 200.526 69.853 200.243 69.6772 200.041 cv
69.502 199.838 69.2656 199.73 68.9688 199.73 cv
68.6714 199.73 68.4355 199.838 68.2598 200.041 cv
68.0845 200.243 67.9966 200.526 67.9966 200.877 cv
67.9966 201.235 68.0845 201.519 68.2598 201.721 cv
68.4355 201.924 68.6714 202.025 68.9688 202.025 cv
f
104.933 196.952 mo
104.933 194.702 li
f
104.933 196.952 mo
104.933 194.702 li
@
104.933 2.55225 mo
104.933 4.80225 li
f
104.933 2.55225 mo
104.933 4.80225 li
@
98.8447 203.651 mo
99.9312 203.651 li
99.9312 199.898 li
98.75 200.135 li
98.75 199.527 li
99.9248 199.291 li
100.593 199.291 li
100.593 203.651 li
101.68 203.651 li
101.68 204.212 li
98.8447 204.212 li
98.8447 203.651 li
cp
f
103.043 204.111 mo
103.043 203.503 li
103.205 203.584 103.374 203.645 103.549 203.686 cv
103.718 203.726 103.887 203.746 104.056 203.746 cv
104.488 203.746 104.825 203.604 105.055 203.308 cv
105.284 203.01 105.419 202.564 105.459 201.957 cv
105.325 202.146 105.163 202.295 104.974 202.396 cv
104.778 202.498 104.562 202.545 104.326 202.545 cv
103.826 202.545 103.435 202.396 103.151 202.1 cv
102.868 201.803 102.726 201.396 102.726 200.877 cv
102.726 200.378 102.875 199.973 103.171 199.662 cv
103.468 199.359 103.867 199.203 104.366 199.203 cv
104.933 199.203 105.372 199.426 105.669 199.857 cv
105.966 200.297 106.121 200.932 106.121 201.755 cv
106.121 202.538 105.932 203.152 105.567 203.611 cv
105.196 204.07 104.704 204.3 104.083 204.3 cv
103.914 204.3 103.745 204.279 103.576 204.252 cv
103.401 204.226 103.225 204.178 103.043 204.111 cv
104.366 202.025 mo
104.663 202.025 104.899 201.924 105.075 201.721 cv
105.25 201.519 105.338 201.235 105.338 200.877 cv
105.338 200.526 105.25 200.243 105.075 200.041 cv
104.899 199.838 104.663 199.73 104.366 199.73 cv
104.069 199.73 103.833 199.838 103.657 200.041 cv
103.482 200.243 103.394 200.526 103.394 200.877 cv
103.394 201.235 103.482 201.519 103.657 201.721 cv
103.833 201.924 104.069 202.025 104.366 202.025 cv
f
107.316 203.375 mo
108.011 203.375 li
108.011 204.212 li
107.316 204.212 li
107.316 203.375 li
cp
f
110.886 199.73 mo
110.542 199.73 110.286 199.898 110.11 200.236 cv
109.935 200.574 109.854 201.08 109.854 201.755 cv
109.854 202.43 109.935 202.936 110.11 203.273 cv
110.286 203.611 110.542 203.779 110.886 203.779 cv
111.231 203.779 111.487 203.611 111.663 203.273 cv
111.832 202.936 111.919 202.43 111.919 201.755 cv
111.919 201.08 111.832 200.574 111.663 200.236 cv
111.487 199.898 111.231 199.73 110.886 199.73 cv
110.886 199.203 mo
111.433 199.203 111.852 199.426 112.149 199.857 cv
112.439 200.297 112.587 200.932 112.587 201.755 cv
112.587 202.585 112.439 203.22 112.149 203.651 cv
111.852 204.084 111.433 204.3 110.886 204.3 cv
110.333 204.3 109.908 204.084 109.618 203.651 cv
109.327 203.22 109.186 202.585 109.186 201.755 cv
109.186 200.932 109.327 200.297 109.618 199.857 cv
109.908 199.426 110.333 199.203 110.886 199.203 cv
f
146.784 196.952 mo
146.784 194.702 li
f
146.784 196.952 mo
146.784 194.702 li
@
146.784 2.55225 mo
146.784 4.80225 li
f
146.784 2.55225 mo
146.784 4.80225 li
@
140.743 203.651 mo
141.83 203.651 li
141.83 199.898 li
140.648 200.135 li
140.648 199.527 li
141.823 199.291 li
142.491 199.291 li
142.491 203.651 li
143.579 203.651 li
143.579 204.212 li
140.743 204.212 li
140.743 203.651 li
cp
f
144.941 204.111 mo
144.941 203.503 li
145.104 203.584 145.272 203.645 145.447 203.686 cv
145.616 203.726 145.785 203.746 145.954 203.746 cv
146.386 203.746 146.724 203.604 146.953 203.308 cv
147.182 203.01 147.318 202.564 147.358 201.957 cv
147.223 202.146 147.061 202.295 146.872 202.396 cv
146.676 202.498 146.46 202.545 146.224 202.545 cv
145.725 202.545 145.333 202.396 145.049 202.1 cv
144.766 201.803 144.625 201.396 144.625 200.877 cv
144.625 200.378 144.772 199.973 145.07 199.662 cv
145.367 199.359 145.765 199.203 146.265 199.203 cv
146.831 199.203 147.271 199.426 147.567 199.857 cv
147.864 200.297 148.02 200.932 148.02 201.755 cv
148.02 202.538 147.831 203.152 147.465 203.611 cv
147.095 204.07 146.602 204.3 145.981 204.3 cv
145.813 204.3 145.644 204.279 145.474 204.252 cv
145.299 204.226 145.124 204.178 144.941 204.111 cv
146.265 202.025 mo
146.562 202.025 146.798 201.924 146.973 201.721 cv
147.149 201.519 147.237 201.235 147.237 200.877 cv
147.237 200.526 147.149 200.243 146.973 200.041 cv
146.798 199.838 146.562 199.73 146.265 199.73 cv
145.967 199.73 145.731 199.838 145.556 200.041 cv
145.38 200.243 145.292 200.526 145.292 200.877 cv
145.292 201.235 145.38 201.519 145.556 201.721 cv
145.731 201.924 145.967 202.025 146.265 202.025 cv
f
149.214 203.375 mo
149.909 203.375 li
149.909 204.212 li
149.214 204.212 li
149.214 203.375 li
cp
f
153.379 201.559 mo
153.696 201.627 153.946 201.769 154.121 201.984 cv
154.297 202.2 154.392 202.471 154.392 202.781 cv
154.392 203.267 154.223 203.645 153.892 203.908 cv
153.554 204.172 153.083 204.3 152.468 204.3 cv
152.258 204.3 152.042 204.279 151.826 204.238 cv
151.61 204.205 151.38 204.145 151.152 204.063 cv
151.152 203.423 li
151.333 203.53 151.537 203.611 151.758 203.665 cv
151.975 203.719 152.205 203.746 152.448 203.746 cv
152.866 203.746 153.183 203.665 153.399 203.503 cv
153.616 203.341 153.73 203.098 153.73 202.781 cv
153.73 202.497 153.628 202.268 153.426 202.105 cv
153.224 201.943 152.94 201.855 152.576 201.855 cv
152.002 201.855 li
152.002 201.31 li
152.602 201.31 li
152.926 201.31 153.176 201.248 153.351 201.113 cv
153.528 200.985 153.616 200.797 153.616 200.547 cv
153.616 200.297 153.521 200.102 153.345 199.966 cv
153.163 199.831 152.906 199.764 152.576 199.764 cv
152.394 199.764 152.197 199.783 151.988 199.824 cv
151.779 199.865 151.55 199.926 151.3 200.006 cv
151.3 199.412 li
151.55 199.346 151.786 199.291 152.008 199.258 cv
152.224 199.224 152.433 199.203 152.636 199.203 cv
153.135 199.203 153.534 199.318 153.832 199.547 cv
154.128 199.777 154.277 200.088 154.277 200.479 cv
154.277 200.749 154.195 200.979 154.041 201.168 cv
153.884 201.356 153.663 201.492 153.379 201.559 cv
f
188.633 196.952 mo
188.633 194.702 li
f
188.633 196.952 mo
188.633 194.702 li
@
188.633 2.55225 mo
188.633 4.80225 li
f
188.633 2.55225 mo
188.633 4.80225 li
@
182.632 203.651 mo
183.719 203.651 li
183.719 199.898 li
182.538 200.135 li
182.538 199.527 li
183.712 199.291 li
184.38 199.291 li
184.38 203.651 li
185.467 203.651 li
185.467 204.212 li
182.632 204.212 li
182.632 203.651 li
cp
f
186.831 204.111 mo
186.831 203.503 li
186.993 203.584 187.162 203.645 187.337 203.686 cv
187.505 203.726 187.674 203.746 187.843 203.746 cv
188.275 203.746 188.613 203.604 188.842 203.308 cv
189.072 203.01 189.208 202.564 189.248 201.957 cv
189.113 202.146 188.951 202.295 188.762 202.396 cv
188.566 202.498 188.349 202.545 188.114 202.545 cv
187.615 202.545 187.222 202.396 186.939 202.1 cv
186.656 201.803 186.514 201.396 186.514 200.877 cv
186.514 200.378 186.662 199.973 186.959 199.662 cv
187.256 199.359 187.654 199.203 188.155 199.203 cv
188.721 199.203 189.16 199.426 189.457 199.857 cv
189.753 200.297 189.91 200.932 189.91 201.755 cv
189.91 202.538 189.72 203.152 189.355 203.611 cv
188.984 204.07 188.492 204.3 187.871 204.3 cv
187.702 204.3 187.533 204.279 187.364 204.252 cv
187.189 204.226 187.013 204.178 186.831 204.111 cv
188.155 202.025 mo
188.451 202.025 188.687 201.924 188.863 201.721 cv
189.038 201.519 189.125 201.235 189.125 200.877 cv
189.125 200.526 189.038 200.243 188.863 200.041 cv
188.687 199.838 188.451 199.73 188.155 199.73 cv
187.857 199.73 187.621 199.838 187.445 200.041 cv
187.27 200.243 187.182 200.526 187.182 200.877 cv
187.182 201.235 187.27 201.519 187.445 201.721 cv
187.621 201.924 187.857 202.025 188.155 202.025 cv
f
191.104 203.375 mo
191.798 203.375 li
191.798 204.212 li
191.104 204.212 li
191.104 203.375 li
cp
f
193.365 203.651 mo
194.452 203.651 li
194.452 199.898 li
193.27 200.135 li
193.27 199.527 li
194.445 199.291 li
195.113 199.291 li
195.113 203.651 li
196.2 203.651 li
196.2 204.212 li
193.365 204.212 li
193.365 203.651 li
cp
f
230.483 196.952 mo
230.483 194.702 li
f
230.483 196.952 mo
230.483 194.702 li
@
230.483 2.55225 mo
230.483 4.80225 li
f
230.483 2.55225 mo
230.483 4.80225 li
@
224.509 203.651 mo
225.595 203.651 li
225.595 199.898 li
224.415 200.135 li
224.415 199.527 li
225.589 199.291 li
226.256 199.291 li
226.256 203.651 li
227.344 203.651 li
227.344 204.212 li
224.509 204.212 li
224.509 203.651 li
cp
f
228.708 204.111 mo
228.708 203.503 li
228.87 203.584 229.039 203.645 229.213 203.686 cv
229.382 203.726 229.551 203.746 229.72 203.746 cv
230.151 203.746 230.49 203.604 230.719 203.308 cv
230.948 203.01 231.083 202.564 231.124 201.957 cv
230.989 202.146 230.827 202.295 230.638 202.396 cv
230.442 202.498 230.226 202.545 229.99 202.545 cv
229.491 202.545 229.099 202.396 228.815 202.1 cv
228.532 201.803 228.39 201.396 228.39 200.877 cv
228.39 200.378 228.539 199.973 228.835 199.662 cv
229.132 199.359 229.531 199.203 230.031 199.203 cv
230.597 199.203 231.037 199.426 231.333 199.857 cv
231.63 200.297 231.786 200.932 231.786 201.755 cv
231.786 202.538 231.596 203.152 231.232 203.611 cv
230.861 204.07 230.368 204.3 229.747 204.3 cv
229.579 204.3 229.41 204.279 229.241 204.252 cv
229.065 204.226 228.89 204.178 228.708 204.111 cv
230.031 202.025 mo
230.328 202.025 230.564 201.924 230.739 201.721 cv
230.915 201.519 231.002 201.235 231.002 200.877 cv
231.002 200.526 230.915 200.243 230.739 200.041 cv
230.564 199.838 230.328 199.73 230.031 199.73 cv
229.734 199.73 229.498 199.838 229.322 200.041 cv
229.146 200.243 229.058 200.526 229.058 200.877 cv
229.058 201.235 229.146 201.519 229.322 201.721 cv
229.498 201.924 229.734 202.025 230.031 202.025 cv
f
232.98 203.375 mo
233.675 203.375 li
233.675 204.212 li
232.98 204.212 li
232.98 203.375 li
cp
f
235.701 203.651 mo
238.022 203.651 li
238.022 204.212 li
234.897 204.212 li
234.897 203.651 li
235.147 203.395 235.491 203.044 235.929 202.599 cv
236.362 202.16 236.638 201.877 236.753 201.748 cv
236.969 201.512 237.119 201.309 237.199 201.141 cv
237.28 200.979 237.328 200.81 237.328 200.647 cv
237.328 200.391 237.233 200.176 237.05 200.014 cv
236.868 199.852 236.631 199.764 236.334 199.764 cv
236.125 199.764 235.903 199.804 235.673 199.871 cv
235.444 199.945 235.195 200.054 234.931 200.202 cv
234.931 199.527 li
235.201 199.42 235.451 199.338 235.68 199.284 cv
235.91 199.23 236.125 199.203 236.321 199.203 cv
236.828 199.203 237.233 199.332 237.537 199.588 cv
237.84 199.844 237.996 200.182 237.996 200.607 cv
237.996 200.81 237.955 201.006 237.88 201.182 cv
237.806 201.363 237.671 201.579 237.469 201.822 cv
237.415 201.89 237.239 202.072 236.942 202.375 cv
236.646 202.68 236.234 203.104 235.701 203.651 cv
f
140.691 207.669 mo
140.691 211.496 li
141.494 211.496 li
142.169 211.496 142.668 211.348 142.986 211.037 cv
143.296 210.727 143.458 210.24 143.458 209.579 cv
143.458 208.918 143.296 208.438 142.986 208.127 cv
142.668 207.824 142.169 207.669 141.494 207.669 cv
140.691 207.669 li
140.022 207.121 mo
141.393 207.121 li
142.344 207.121 143.046 207.324 143.492 207.717 cv
143.938 208.115 144.16 208.735 144.16 209.579 cv
144.16 210.43 143.931 211.051 143.485 211.449 cv
143.04 211.848 142.338 212.043 141.393 212.043 cv
140.022 212.043 li
140.022 207.121 li
f
146.874 210.187 mo
146.381 210.187 146.043 210.248 145.854 210.355 cv
145.666 210.471 145.571 210.659 145.571 210.93 cv
145.571 211.145 145.639 211.32 145.781 211.442 cv
145.922 211.57 146.118 211.631 146.361 211.631 cv
146.698 211.631 146.968 211.517 147.17 211.273 cv
147.374 211.037 147.474 210.72 147.474 210.322 cv
147.474 210.187 li
146.874 210.187 li
148.082 209.938 mo
148.082 212.043 li
147.474 212.043 li
147.474 211.482 li
147.333 211.712 147.158 211.874 146.955 211.976 cv
146.752 212.076 146.496 212.131 146.199 212.131 cv
145.821 212.131 145.518 212.029 145.294 211.82 cv
145.071 211.611 144.963 211.327 144.963 210.97 cv
144.963 210.559 145.099 210.248 145.382 210.031 cv
145.659 209.822 146.07 209.715 146.625 209.715 cv
147.474 209.715 li
147.474 209.653 li
147.474 209.377 147.38 209.16 147.198 209.006 cv
147.015 208.857 146.759 208.775 146.428 208.775 cv
146.212 208.775 146.01 208.803 145.807 208.857 cv
145.604 208.911 145.416 208.985 145.233 209.08 cv
145.233 208.52 li
145.45 208.438 145.666 208.371 145.875 208.33 cv
146.084 208.29 146.286 208.263 146.489 208.263 cv
147.022 208.263 147.421 208.404 147.684 208.682 cv
147.947 208.958 148.082 209.377 148.082 209.938 cv
f
149.932 207.305 mo
149.932 208.351 li
151.18 208.351 li
151.18 208.823 li
149.932 208.823 li
149.932 210.828 li
149.932 211.132 149.972 211.327 150.053 211.408 cv
150.134 211.496 150.303 211.537 150.559 211.537 cv
151.18 211.537 li
151.18 212.043 li
150.559 212.043 li
150.087 212.043 149.763 211.955 149.587 211.779 cv
149.412 211.604 149.324 211.287 149.324 210.828 cv
149.324 208.823 li
148.878 208.823 li
148.878 208.351 li
149.324 208.351 li
149.324 207.305 li
149.932 207.305 li
f
153.658 210.187 mo
153.165 210.187 152.828 210.248 152.638 210.355 cv
152.45 210.471 152.355 210.659 152.355 210.93 cv
152.355 211.145 152.422 211.32 152.564 211.442 cv
152.706 211.57 152.902 211.631 153.145 211.631 cv
153.482 211.631 153.752 211.517 153.955 211.273 cv
154.157 211.037 154.258 210.72 154.258 210.322 cv
154.258 210.187 li
153.658 210.187 li
154.866 209.938 mo
154.866 212.043 li
154.258 212.043 li
154.258 211.482 li
154.116 211.712 153.941 211.874 153.739 211.976 cv
153.536 212.076 153.28 212.131 152.983 212.131 cv
152.605 212.131 152.301 212.029 152.078 211.82 cv
151.855 211.611 151.748 211.327 151.748 210.97 cv
151.748 210.559 151.882 210.248 152.166 210.031 cv
152.443 209.822 152.854 209.715 153.408 209.715 cv
154.258 209.715 li
154.258 209.653 li
154.258 209.377 154.164 209.16 153.982 209.006 cv
153.799 208.857 153.542 208.775 153.212 208.775 cv
152.996 208.775 152.793 208.803 152.591 208.857 cv
152.388 208.911 152.2 208.985 152.017 209.08 cv
152.017 208.52 li
152.233 208.438 152.45 208.371 152.659 208.33 cv
152.868 208.29 153.071 208.263 153.272 208.263 cv
153.806 208.263 154.205 208.404 154.467 208.682 cv
154.731 208.958 154.866 209.377 154.866 209.938 cv
f
21.2334 196.952 mo
23.4834 196.952 li
f
21.2334 196.952 mo
23.4834 196.952 li
@
272.333 196.952 mo
270.083 196.952 li
f
272.333 196.952 mo
270.083 196.952 li
@
11.2861 194.927 mo
10.9419 194.927 10.6851 195.096 10.5098 195.433 cv
10.3345 195.771 10.2534 196.276 10.2534 196.951 cv
10.2534 197.627 10.3345 198.133 10.5098 198.471 cv
10.6851 198.808 10.9419 198.977 11.2861 198.977 cv
11.6304 198.977 11.8867 198.808 12.0625 198.471 cv
12.231 198.133 12.3188 197.627 12.3188 196.951 cv
12.3188 196.276 12.231 195.771 12.0625 195.433 cv
11.8867 195.096 11.6304 194.927 11.2861 194.927 cv
11.2861 194.4 mo
11.833 194.4 12.2515 194.623 12.5483 195.055 cv
12.8384 195.494 12.9868 196.128 12.9868 196.951 cv
12.9868 197.781 12.8384 198.416 12.5483 198.849 cv
12.2515 199.28 11.833 199.496 11.2861 199.496 cv
10.7324 199.496 10.3071 199.28 10.0171 198.849 cv
9.72656 198.416 9.58496 197.781 9.58496 196.951 cv
9.58496 196.128 9.72656 195.494 10.0171 195.055 cv
10.3071 194.623 10.7324 194.4 11.2861 194.4 cv
f
14.1548 198.571 mo
14.8501 198.571 li
14.8501 199.408 li
14.1548 199.408 li
14.1548 198.571 li
cp
f
17.7256 194.927 mo
17.3813 194.927 17.125 195.096 16.9492 195.433 cv
16.7739 195.771 16.6929 196.276 16.6929 196.951 cv
16.6929 197.627 16.7739 198.133 16.9492 198.471 cv
17.125 198.808 17.3813 198.977 17.7256 198.977 cv
18.0698 198.977 18.3267 198.808 18.502 198.471 cv
18.6709 198.133 18.7583 197.627 18.7583 196.951 cv
18.7583 196.276 18.6709 195.771 18.502 195.433 cv
18.3267 195.096 18.0698 194.927 17.7256 194.927 cv
17.7256 194.4 mo
18.2725 194.4 18.6909 194.623 18.9878 195.055 cv
19.2783 195.494 19.4268 196.128 19.4268 196.951 cv
19.4268 197.781 19.2783 198.416 18.9878 198.849 cv
18.6909 199.28 18.2725 199.496 17.7256 199.496 cv
17.1724 199.496 16.7471 199.28 16.4565 198.849 cv
16.1665 198.416 16.0249 197.781 16.0249 196.951 cv
16.0249 196.128 16.1665 195.494 16.4565 195.055 cv
16.7471 194.623 17.1724 194.4 17.7256 194.4 cv
f
21.2334 148.353 mo
23.4834 148.353 li
f
21.2334 148.353 mo
23.4834 148.353 li
@
272.333 148.353 mo
270.083 148.353 li
f
272.333 148.353 mo
270.083 148.353 li
@
11.4268 146.326 mo
11.0825 146.326 10.8257 146.496 10.6504 146.832 cv
10.4751 147.17 10.394 147.676 10.394 148.352 cv
10.394 149.027 10.4751 149.533 10.6504 149.871 cv
10.8257 150.207 11.0825 150.377 11.4268 150.377 cv
11.771 150.377 12.0273 150.207 12.2031 149.871 cv
12.3716 149.533 12.4595 149.027 12.4595 148.352 cv
12.4595 147.676 12.3716 147.17 12.2031 146.832 cv
12.0273 146.496 11.771 146.326 11.4268 146.326 cv
11.4268 145.8 mo
11.9736 145.8 12.3921 146.022 12.689 146.455 cv
12.979 146.895 13.1274 147.528 13.1274 148.352 cv
13.1274 149.182 12.979 149.816 12.689 150.248 cv
12.3921 150.68 11.9736 150.896 11.4268 150.896 cv
10.873 150.896 10.4478 150.68 10.1577 150.248 cv
9.86719 149.816 9.72559 149.182 9.72559 148.352 cv
9.72559 147.528 9.86719 146.895 10.1577 146.455 cv
10.4478 146.022 10.873 145.8 11.4268 145.8 cv
f
14.2954 149.972 mo
14.9907 149.972 li
14.9907 150.809 li
14.2954 150.809 li
14.2954 149.972 li
cp
f
16.4487 145.889 mo
19.061 145.889 li
19.061 146.448 li
17.0562 146.448 li
17.0562 147.656 li
17.1509 147.623 17.252 147.596 17.3467 147.582 cv
17.4409 147.568 17.5425 147.555 17.6367 147.555 cv
18.1836 147.555 18.6157 147.71 18.9395 148.008 cv
19.2637 148.312 19.4253 148.716 19.4253 149.229 cv
19.4253 149.763 19.2568 150.174 18.9258 150.465 cv
18.5952 150.754 18.1294 150.896 17.5356 150.896 cv
17.3262 150.896 17.1172 150.876 16.9009 150.849 cv
16.6851 150.815 16.4692 150.769 16.2397 150.693 cv
16.2397 150.025 li
16.4351 150.134 16.6377 150.215 16.854 150.269 cv
17.063 150.322 17.2856 150.343 17.522 150.343 cv
17.8999 150.343 18.2036 150.248 18.4263 150.046 cv
18.6426 149.843 18.7573 149.574 18.7573 149.229 cv
18.7573 148.892 18.6426 148.621 18.4263 148.42 cv
18.2036 148.217 17.8999 148.115 17.522 148.115 cv
17.3467 148.115 17.1641 148.136 16.9888 148.176 cv
16.8135 148.217 16.6309 148.277 16.4487 148.358 cv
16.4487 145.889 li
f
21.2334 99.752 mo
23.4834 99.752 li
f
21.2334 99.752 mo
23.4834 99.752 li
@
272.333 99.752 mo
270.083 99.752 li
f
272.333 99.752 mo
270.083 99.752 li
@
10.2666 101.648 mo
11.353 101.648 li
11.353 97.8955 li
10.1719 98.1318 li
10.1719 97.5239 li
11.3467 97.2881 li
12.0146 97.2881 li
12.0146 101.648 li
13.1016 101.648 li
13.1016 102.209 li
10.2666 102.209 li
10.2666 101.648 li
cp
f
14.4453 101.372 mo
15.1401 101.372 li
15.1401 102.209 li
14.4453 102.209 li
14.4453 101.372 li
cp
f
18.0156 97.7266 mo
17.6714 97.7266 17.415 97.8955 17.2393 98.2329 cv
17.064 98.5703 16.9829 99.0767 16.9829 99.752 cv
16.9829 100.427 17.064 100.933 17.2393 101.271 cv
17.415 101.607 17.6714 101.777 18.0156 101.777 cv
18.3599 101.777 18.6167 101.607 18.792 101.271 cv
18.9609 100.933 19.0483 100.427 19.0483 99.752 cv
19.0483 99.0767 18.9609 98.5703 18.792 98.2329 cv
18.6167 97.8955 18.3599 97.7266 18.0156 97.7266 cv
18.0156 97.2002 mo
18.5625 97.2002 18.981 97.4229 19.2778 97.855 cv
19.5684 98.2939 19.7168 98.9282 19.7168 99.752 cv
19.7168 100.582 19.5684 101.216 19.2778 101.648 cv
18.981 102.081 18.5625 102.297 18.0156 102.297 cv
17.4624 102.297 17.0371 102.081 16.7466 101.648 cv
16.4565 101.216 16.3149 100.582 16.3149 99.752 cv
16.3149 98.9282 16.4565 98.2939 16.7466 97.855 cv
17.0371 97.4229 17.4624 97.2002 18.0156 97.2002 cv
f
21.2334 51.1523 mo
23.4834 51.1523 li
f
21.2334 51.1523 mo
23.4834 51.1523 li
@
272.333 51.1523 mo
270.083 51.1523 li
f
272.333 51.1523 mo
270.083 51.1523 li
@
10.4072 53.0044 mo
11.4937 53.0044 li
11.4937 49.2515 li
10.3125 49.4878 li
10.3125 48.8804 li
11.4873 48.644 li
12.1553 48.644 li
12.1553 53.0044 li
13.2422 53.0044 li
13.2422 53.5645 li
10.4072 53.5645 li
10.4072 53.0044 li
cp
f
14.5859 52.7275 mo
15.2808 52.7275 li
15.2808 53.5645 li
14.5859 53.5645 li
14.5859 52.7275 li
cp
f
16.7388 48.644 mo
19.3511 48.644 li
19.3511 49.2041 li
17.3462 49.2041 li
17.3462 50.4126 li
17.4409 50.3789 17.542 50.3516 17.6367 50.3384 cv
17.731 50.3247 17.8325 50.311 17.9268 50.311 cv
18.4736 50.311 18.9058 50.4663 19.2295 50.7637 cv
19.5537 51.0674 19.7158 51.4722 19.7158 51.9854 cv
19.7158 52.5186 19.5469 52.9302 19.2163 53.2207 cv
18.8853 53.5107 18.4194 53.6523 17.8257 53.6523 cv
17.6162 53.6523 17.4072 53.6323 17.1909 53.6055 cv
16.9751 53.5713 16.7593 53.5244 16.5298 53.4502 cv
16.5298 52.7817 li
16.7251 52.8896 16.9277 52.9707 17.144 53.0249 cv
17.353 53.0786 17.5757 53.0991 17.812 53.0991 cv
18.1899 53.0991 18.4937 53.0044 18.7168 52.8018 cv
18.9326 52.5996 19.0474 52.3296 19.0474 51.9854 cv
19.0474 51.6475 18.9326 51.3779 18.7168 51.1753 cv
18.4937 50.9727 18.1899 50.8716 17.812 50.8716 cv
17.6367 50.8716 17.4546 50.8916 17.2788 50.9321 cv
17.1035 50.9727 16.9209 51.0332 16.7388 51.1143 cv
16.7388 48.644 li
f
21.2334 2.55225 mo
23.4834 2.55225 li
f
21.2334 2.55225 mo
23.4834 2.55225 li
@
272.333 2.55225 mo
270.083 2.55225 li
f
272.333 2.55225 mo
270.083 2.55225 li
@
10.4795 4.44824 mo
12.8018 4.44824 li
12.8018 5.00879 li
9.67627 5.00879 li
9.67627 4.44824 li
9.92627 4.19189 10.2705 3.84082 10.709 3.39551 cv
11.1411 2.95654 11.418 2.67334 11.5327 2.54492 cv
11.7485 2.30859 11.897 2.10645 11.978 1.9375 cv
12.0591 1.77539 12.1064 1.60645 12.1064 1.44482 cv
12.1064 1.18799 12.0117 .972168 11.8296 .810059 cv
11.6475 .648438 11.4111 .560547 11.1143 .560547 cv
10.9048 .560547 10.6821 .601074 10.4526 .668457 cv
10.2231 .742676 9.97314 .850586 9.70996 .999023 cv
9.70996 .324219 li
9.97998 .216309 10.23 .135254 10.4595 .0810547 cv
10.689 .0273438 10.9048 0 11.1006 0 cv
11.6069 0 12.0117 .128418 12.3154 .384766 cv
12.6196 .641602 12.7744 .979004 12.7744 1.4043 cv
12.7744 1.60645 12.7339 1.80225 12.6597 1.97803 cv
12.5854 2.16016 12.4507 2.37598 12.248 2.61914 cv
12.1943 2.68652 12.0186 2.86914 11.7217 3.17285 cv
11.4248 3.47656 11.0127 3.90186 10.4795 4.44824 cv
f
14.1987 4.17139 mo
14.894 4.17139 li
14.894 5.00879 li
14.1987 5.00879 li
14.1987 4.17139 li
cp
f
17.7695 .526367 mo
17.4253 .526367 17.1689 .695313 16.9932 1.03271 cv
16.8179 1.37012 16.7368 1.87646 16.7368 2.55176 cv
16.7368 3.22656 16.8179 3.73291 16.9932 4.07031 cv
17.1689 4.40771 17.4253 4.57666 17.7695 4.57666 cv
18.1138 4.57666 18.3706 4.40771 18.5459 4.07031 cv
18.7148 3.73291 18.8022 3.22656 18.8022 2.55176 cv
18.8022 1.87646 18.7148 1.37012 18.5459 1.03271 cv
18.3706 .695313 18.1138 .526367 17.7695 .526367 cv
17.7695 0 mo
18.3164 0 18.7349 .222656 19.0317 .654785 cv
19.3223 1.09375 19.4707 1.72803 19.4707 2.55176 cv
19.4707 3.38184 19.3223 4.0166 19.0317 4.44824 cv
18.7349 4.88037 18.3164 5.09619 17.7695 5.09619 cv
17.2163 5.09619 16.791 4.88037 16.5005 4.44824 cv
16.2104 4.0166 16.0688 3.38184 16.0688 2.55176 cv
16.0688 1.72803 16.2104 1.09375 16.5005 .654785 cv
16.791 .222656 17.2163 0 17.7695 0 cv
f
0 116.111 mo
0 113.282 li
.560547 113.282 li
.560547 115.442 li
2.01172 115.442 li
2.01172 113.492 li
2.57178 113.492 li
2.57178 115.442 li
4.9209 115.442 li
4.9209 116.111 li
0 116.111 li
cp
f
1.79541 110.117 mo
1.75488 110.184 1.72803 110.258 1.70752 110.34 cv
1.69434 110.42 1.68066 110.508 1.68066 110.603 cv
1.68066 110.947 1.79541 111.21 2.01807 111.393 cv
2.24121 111.582 2.55811 111.669 2.97656 111.669 cv
4.9209 111.669 li
4.9209 112.276 li
1.22852 112.276 li
1.22852 111.669 li
1.80225 111.669 li
1.57959 111.548 1.41064 111.379 1.30273 111.176 cv
1.19482 110.974 1.14063 110.725 1.14063 110.428 cv
1.14063 110.387 1.14746 110.34 1.14746 110.285 cv
1.1543 110.238 1.16113 110.184 1.17432 110.117 cv
1.79541 110.117 li
f
2.92285 106.323 mo
3.21973 106.323 li
3.21973 109.111 li
3.63867 109.084 3.9624 108.963 4.17822 108.732 cv
4.39453 108.511 4.50244 108.199 4.50244 107.795 cv
4.50244 107.564 4.47559 107.336 4.42139 107.119 cv
4.36768 106.903 4.27979 106.682 4.1582 106.465 cv
4.73193 106.465 li
4.82666 106.682 4.90088 106.903 4.94141 107.133 cv
4.98193 107.363 5.00879 107.6 5.00879 107.828 cv
5.00879 108.422 4.83984 108.889 4.50244 109.232 cv
4.16504 109.576 3.69922 109.745 3.11182 109.745 cv
2.51123 109.745 2.03174 109.583 1.67432 109.26 cv
1.32324 108.936 1.14111 108.49 1.14111 107.936 cv
1.14111 107.437 1.30273 107.045 1.62012 106.756 cv
1.94434 106.473 2.37598 106.323 2.92285 106.323 cv
2.74756 106.931 mo
2.4165 106.938 2.15332 107.032 1.95117 107.207 cv
1.75537 107.39 1.65381 107.633 1.65381 107.93 cv
1.65381 108.268 1.75537 108.537 1.94434 108.739 cv
2.1333 108.941 2.40332 109.063 2.74756 109.09 cv
2.74756 106.931 li
f
3.07813 104.967 mo
3.52344 104.967 3.87451 104.879 4.13135 104.697 cv
4.3877 104.514 4.50928 104.258 4.50928 103.934 cv
4.50928 103.617 4.3877 103.366 4.13135 103.178 cv
3.87451 102.995 3.52344 102.9 3.07813 102.9 cv
2.63281 102.9 2.28857 102.995 2.03174 103.178 cv
1.77539 103.366 1.64697 103.617 1.64697 103.934 cv
1.64697 104.258 1.77539 104.514 2.03174 104.697 cv
2.28857 104.879 2.63281 104.967 3.07813 104.967 cv
4.36719 102.9 mo
4.59033 103.029 4.75195 103.191 4.85352 103.387 cv
4.95459 103.582 5.00879 103.813 5.00879 104.082 cv
5.00879 104.527 4.83301 104.893 4.48193 105.176 cv
4.13135 105.459 3.65869 105.594 3.07813 105.594 cv
2.49756 105.594 2.03174 105.459 1.67432 105.176 cv
1.32324 104.893 1.14111 104.527 1.14111 104.082 cv
1.14111 103.813 1.19482 103.582 1.30273 103.387 cv
1.41064 103.191 1.57275 103.029 1.78906 102.9 cv
1.22852 102.9 li
1.22852 102.293 li
6.31836 102.293 li
6.31836 102.9 li
4.36719 102.9 li
f
3.46289 101.105 mo
1.22852 101.105 li
1.22852 100.498 li
3.44287 100.498 li
3.79346 100.498 4.05029 100.431 4.22559 100.295 cv
4.40137 100.161 4.48877 99.9575 4.48877 99.6812 cv
4.48877 99.3574 4.3877 99.0942 4.17822 98.9053 cv
3.96924 98.7153 3.68555 98.6211 3.32129 98.6211 cv
1.22852 98.6211 li
1.22852 98.0137 li
4.9209 98.0137 li
4.9209 98.6211 li
4.354 98.6211 li
4.5835 98.77 4.74561 98.9453 4.85352 99.1348 cv
4.95459 99.3301 5.00879 99.5532 5.00879 99.8096 cv
5.00879 100.235 4.88037 100.558 4.61719 100.775 cv
4.36084 100.998 3.97607 101.105 3.46289 101.105 cv
f
2.92285 93.606 mo
3.21973 93.606 li
3.21973 96.3936 li
3.63867 96.3667 3.9624 96.2451 4.17822 96.0156 cv
4.39453 95.793 4.50244 95.4824 4.50244 95.0776 cv
4.50244 94.8481 4.47559 94.6187 4.42139 94.4023 cv
4.36768 94.1865 4.27979 93.9639 4.1582 93.748 cv
4.73193 93.748 li
4.82666 93.9639 4.90088 94.1865 4.94141 94.416 cv
4.98193 94.6455 5.00879 94.8818 5.00879 95.1113 cv
5.00879 95.7051 4.83984 96.1709 4.50244 96.5151 cv
4.16504 96.8594 3.69922 97.0283 3.11182 97.0283 cv
2.51123 97.0283 2.03174 96.8662 1.67432 96.5425 cv
1.32324 96.2183 1.14111 95.7729 1.14111 95.2192 cv
1.14111 94.7197 1.30273 94.3281 1.62012 94.0381 cv
1.94434 93.7544 2.37598 93.606 2.92285 93.606 cv
2.74756 94.2134 mo
2.4165 94.2202 2.15332 94.3149 1.95117 94.4902 cv
1.75537 94.6724 1.65381 94.9155 1.65381 95.2124 cv
1.65381 95.5498 1.75537 95.8203 1.94434 96.0225 cv
2.1333 96.2251 2.40332 96.3467 2.74756 96.3735 cv
2.74756 94.2134 li
f
2.69336 89.5425 mo
4.9209 89.5425 li
4.9209 90.1499 li
2.71338 90.1499 li
2.36279 90.1499 2.10596 90.2241 1.93066 90.3594 cv
1.75488 90.4941 1.66748 90.6968 1.66748 90.9668 cv
1.66748 91.2974 1.77539 91.5537 1.98438 91.7432 cv
2.19385 91.9321 2.47754 92.0264 2.83496 92.0264 cv
4.9209 92.0264 li
4.9209 92.6338 li
1.22852 92.6338 li
1.22852 92.0264 li
1.80225 92.0264 li
1.58643 91.8848 1.41748 91.7158 1.30957 91.5137 cv
1.20166 91.3179 1.14063 91.0884 1.14063 90.8315 cv
1.14063 90.4131 1.27588 90.0894 1.53906 89.873 cv
1.80225 89.6572 2.18701 89.5425 2.69336 89.5425 cv
f
1.37012 85.6748 mo
1.9375 85.6748 li
1.84277 85.8501 1.77539 86.019 1.72803 86.1943 cv
1.68066 86.3701 1.65381 86.5386 1.65381 86.7144 cv
1.65381 87.1055 1.78223 87.416 2.03174 87.6323 cv
2.28174 87.8481 2.63281 87.9561 3.07813 87.9561 cv
3.53027 87.9561 3.88135 87.8481 4.13086 87.6323 cv
4.38086 87.416 4.50244 87.1055 4.50244 86.7144 cv
4.50244 86.5386 4.48193 86.3701 4.43506 86.1943 cv
4.3877 86.019 4.31348 85.8501 4.21875 85.6748 cv
4.7793 85.6748 li
4.85986 85.8501 4.9209 86.0259 4.95459 86.2012 cv
4.98828 86.3833 5.00879 86.5791 5.00879 86.7817 cv
5.00879 87.335 4.83984 87.7808 4.48877 88.1045 cv
4.14453 88.4355 3.67188 88.5977 3.07813 88.5977 cv
2.47754 88.5977 2.00488 88.4355 1.66064 88.1045 cv
1.31641 87.7739 1.14063 87.3218 1.14063 86.7412 cv
1.14063 86.5522 1.16113 86.3701 1.20166 86.1943 cv
1.24219 86.019 1.2959 85.8438 1.37012 85.6748 cv
f
5.2583 83.083 mo
5.69043 83.2583 5.98047 83.4272 6.11572 83.5889 cv
6.25049 83.751 6.31836 83.9668 6.31836 84.2373 cv
6.31836 84.7231 li
5.81201 84.7231 li
5.81201 84.3652 li
5.81201 84.2031 5.77148 84.0752 5.69043 83.9805 cv
5.60938 83.8862 5.42725 83.7847 5.13037 83.6699 cv
4.86035 83.562 li
1.22852 85.0537 li
1.22852 84.4126 li
4.11768 83.2583 li
1.22852 82.104 li
1.22852 81.4629 li
5.2583 83.083 li
f
.5625 lw
2 lc
21.2334 2.55225 mo
272.333 2.55225 li
@
272.333 196.952 mo
272.333 2.55176 li
@
21.2334 196.952 mo
272.333 196.952 li
@
21.2334 196.952 mo
21.2334 2.55176 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (008x001.eps)%%CreationDate: 27/05/15 9:41 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\VgdP,ubJ9q:NfZ!qQ#A9OaS9$SH/=U2Z)"?lpmuQqk5F"RE]'5jlB"rE4F4NI+6*6GFV92\-g$Dc:Vc@N>hRD3g0;W5c%:TLdaeeBX:.s`\7h.`D0Hi?'O<A@1GR$UbeC7BKQP;VuiQBr%T7dlVrDa.V%<r\uMI]N3h`HJTDm4G/mJ#]XC@J(X(WM[.ne[Nk(%G&p`7Xu)U?9"Xt#mAFMU00u;54E(0TR^Jo_YLe)E.BV;^'W]QiXihc#"LSKl8b$]aXnbnrT:e[>[G<M.\-EPgBDh_@hX@3O+:nOa%io08g%iHjns39Dme__=ZI^e$LZs/SOg1@bLq5SU&dH_GAcTim6D1t*aW./rYeUAM`8!W^/6D9B'h=%]t)C2J^)!HNeUid&[Qu$._%cK]m:lMk!Zn'nDGHC&#QZeI]_r!s^OXD*hc509"pT4Yc`fkU-kF=J!X"@\+5>.obRF5F)WX7(-5VucXV<4JlMhs5\Ig[4,6N.!-l%Yo_7+*)usf]**K-_/ZC0\nGGZ-l3?;9O!<n&H6Lf9#L[d5nK<I<R'c)G!AR1cjI.r)E6'nS=mtbmP`o@XX,L2W9@b%\%@Wg4,'Pp%[`A].5AtQAg['Ck-lR0A?Z/fW&PWuNh0(%mIs=^L\G/="euCV>_IQ(41.&7"T\2ZMcmi&m<E*f"BIl7<^XHD:qES6tqPU@_Bc->R%g[J>sZ;O\V^T%W:<>D+*.X>3s^t[p%_gkpF!P]$FC)I6*15nhZ[;"Ala0q\%D$.>a?`7Pj:^b"R-e'U]TiSE(D\e9#Uf`:2PmTXU%<"&lcY#O>)V*a#^&/09p4JYL<']*BH<CC6a$+4/7n-QL19PgNc)2nhbTam"e5%34T'BEF9'7@YM(_M-^9*A%dAJc#,_RSPXPerf\%:P)<h5Lb:)_'da3<1o2p%mWm/9X%'l"J=aL13*FZJXsSGH3_OE*3gFC+4Po4_'cTXArqt?4<lWdJ"[X:O3KAp$@*H-#G:Jn7RuS_%4pg:H!hW9s`Wr,H(($6;]TW8f7n*R\3MRZSB*:DMFf7au`pc;a:7qj5$!a95dP@:F;M4q#3\WTaR4p[HRuEduL%2u,e0=Moj!-N,%n%pI%J^L="N3X>i&Bp7X#^%pAB!fFR%3R$_6>1r?"e/GBG6/f$3pE!h%3T:>_T#&QLK^d'dQ2ZG4=C.7jFf;q23U$J\03G'n397S%0"7$g;H_#A/nZn$\[5/2S'eoBJ+0m>6]BLM=_:cZk5c]7R"VqSCbSs/]W>Jg/pUB]-2\;Q&ud;.Iu6Ra\:;Ubcs?.erCd-dZFWe'%gqVpBBp.BA?h2OKaD]72I9Z@$jsGB5r[%TQ[`EC]0DUsWQ:dskrCd-TbN-/0Qi*&;ImfmGgqbA+=7VjZ,(J#8'Wn=uQ'.qE.QYG=%V4"/SX&=NKiEsr=p-6c[[j:="TYF%B"gkgSMm_dB*Vm/gdPq,/Ou2rLQ7<WU$s5dP8na[??_sj)q#:^!79EJO-!X1:G74DU\q>K2%=nnjEXCe:SX7WS^>B&NQ[,=0I#r!eCab7,LPPpPEdWC!).Vcl&<"th*_uC6c.lPmEi/f\JU_eP'q?VP2r/YO6`7.YIFa,FLVIW:F%e:FM6N,s1g,m6=+?`Ei#.R8c"*#5q&+SXHO&<<GQ<K8.-5jjC=A)%V5#GO't^A&Qh0G"._._#]s-oJL=q\q^@Q50V6B,'I+;7P+2%3$3dJnBV6CDX]S?%Q]K_3<M<q=``<SFQRo`8s55YB\Y=P.(M<k[p:Q&'/*&`cN_Sr["u^R5Z9r_7G])?44m)%fjVC#O@taU7hEtb%\V#kD\0O(Y0\ue59?nPTe.U(J/sd!a*K2pbgr[*ZkE=daS0,4"GBgYD.<dJ'6>mCN*K2qOjBC>0JBir/%[ThCi=<%,9ZeBo_STOZ%4oM]l_V#I2if5OSFZF'8["_%>HDB%9`?NVg"EH`qLiNuO>JYaGYsFE\%L)J4aODBqbBE)3Jqr>FaJXm=A9@"tP%<,[_-.Zd`GlI:%-"/nMa$HtR9-a`gZWm?Wg"Tii&_/NWOU!b&.)1#oo-C(J(ROnSN2V2VE@9oZ2?omCPB)FS'.)]L5F2fARkQu`S8T%AM+%#0W8/Yn%?[R#iL!!^hbQ];?-fkre/+=$pgBb7,6oZK[9>#<JZ9ELq6!PVZ/_I,_lnK=hDVl/e)2HcUCD>t;gW67ag-kak?nKYZKDBNWQ:)oe%EDMtq-Pf1e/9uK]4(D`#R`e(JB!PNLMSs>hQ\`UMYVq0RL3k%_-EqC'[L'6WK)T5nWfSVDL:eN*5Dqd\kqSb7_>9"'$c2!o]YNfh%W_)BRjPlG4PZWm3;T8DLpSP!"e3a0o/<//<`IEU#4K>8flSc^d=Xll79ql]n>#kJN:e!of@/LOEG_@l(kPTfEb[]F57d4YK8)>"`%]YuI237BemT*P#u&O!/72Nu<?2N',XWnYoY$+9VBd>r?(NrlYDq1SB7YT$`oSOH<9?qM/tV9UWHnJJ5sBNi=n-BJ=j7+Gi8!KVp*%2uIg].nkitj]\;k+5k0^WQ7%XSf\4#0rT#W9>(0^:p8)R$_c)nN>Q5V0cnfo.,EjS7=S"[Ve$,m7`9Sn/5f*JUMBA+#]90t.NU)X%Pc>nu/NAXsCEi[93/`@Z?05iY?ksd**fO:lr<.2$;pQsmUF]@k;pFO?*K=WWCO6#,ASQJN0he1E<Mh`>%+g@=(73DG0e%lj/=I(i%GoGnk7E.I#\I4A"&O"2+?uSiT4q.1a855^?%.0P.T%=>cd=aKfkG+*Brs(DikaI4PbTVi0iJD)$-QJrid"+LK-/ptI8B#"[TYGEa%4(GN-!3]oGeUD=p_u3Do\`;Q_f7%OXJa4W0OU"YMq=Rk&k4AI[aYY*CpVQbBS%FKDa+2Hnk0W11(YlL`glXR:R*:N\#'h^X9&Bef%41oU[Q%\D6?u:ZVOat.RSi`WgK@%1#nsHp'8EMOn6X?ik!k"S[6Y#720N'0hmt.rQBU$Z;n"QOUnbOk?gEg$M+4,2I3"P`\#%oR!%V&<#[!]0#eG.b4!V=0#D*SID(YO@(NSYto^I2B!Pk_pfp;8lcfYY-6Nmb$:9]QPVVU\jaU9P9oXqR3-q*B:_KBP@h>4g3Fp[W2WG%?<H)K]a$:'OrI&(e17mN8O*CKd2Gk2)Econo,0KVS55rk;+#7Y2N6A#<<nQY`O2CH$RX>W6.UIS2T56';1$QUkN)InN(_+]+cKWa%1P>=.W7<,g%gR=8-..L$;Npm*@6Bi\+7_4R>T^u-e7a7iMG0#d*>>Uer>l^L/#j-%WaZV@O4T.1I1,=-R."Sb+9+QMd)l2Mn(WJB%-U)`l<)V6Gj6$p/*aTBJQ=b/#89UX8Ws?==DUQ)em5Pg0IVeF]pQ.hhSbmSNh`Yr15`G``lani6(@M4uoiO!LO4STlI7O*_]XE`Y%6H?8j,k_233Af%]o5SG1s,YcT^nJmJ^E?<Mh#HEB>q2>ns5ULmZj.Tfm<%5$p&FfTMs<Afg<&gD'(c-JD27^6')@$i[L:f')=@Io%p"8Pu\GsTj*MZSRs"@'CqI_g;mY'0J6R?>pB+Yk5o4^;Cg5G\%K!_)qI`4o][$1),A,O%`D<JoZLKWRLj3VHl):!GeiR$4jBCLp,%;?%-_(=@?Bg+KmR;?)Z;O<n8iF*:1b[CS<pD@,-B4f[IApLq2c<o4'r4)So\9YS(skXd,kmbGO3=l&-3m7$;%p:j\`KisjR1D^bs%&>(t4hAhrsTYJ.JA**-m>lHC[mm:58+g/oP]C;7qD&;('@&/bC.F@i%V3FT+m@D/)/P?:E]:\*9Dr(-P_*PWOhY,,j;XW[?Oqs=g%)oG-VTf%s-ENN$cgUCWJkf@*d8nWNnm-LpYOI.3I=fW]NfHg3Tr'aE(n@rk)^OuQmHGJE(2;R.XdKR)cDmL(>@=`XH"h"P`FTNl5%?Pt%7iAJaT\tc:`h7\3E/(o--pM%bQ7^>sTk'b%Z<1E50JR+:h>%e;T_^-Xd0Ji*RbDM8$f[s%=4=C#afe1U6Z:4If.OLPqpK]mB%3^_t6Z>5W18NhtUK,MF,@5XSrdg17J;]OMH2Gd\K^!4^T?D&TM+hKUO=cl!>p1Q5&U"lC0_-=FA/^f]]P.tO,0)^oQG[$Mk4JWfA%FBUFOGEgGuJ\ZC$M#u8uNeNX2&8oaY>;\C-KR>;Y^Yn1?*]p[gUt]dqhoR\;4+;3Vn,ILNnLOD/o2-IWDRA=mPgg:o@Qg>?J'atX%DYp?<g\TGqc#2+dYP%NV\,(iZV2nu5fAHG8oIMS5^RbB]qXo6DdE+g8<,#CFoe^rM?H,4_htXZRoj@+SQhrfm/[t_Z2qo@U=f8(L%Whlo"h+i@H-d?D,g.gUJVr`QN?g(&riQ,lj/JDg)hX,Fs_XK(cMQ_Yg$JZkWNiN&=oN&<TWqDmja\OSJUb'6no/AWkVjlQ.rq&D&%([ZCpC"E1&Bq6%";Q0Waki2f\coQ%V":b&m/,4JFm.UI%]qF*<4eRT1k15I@B!_$aX`clHDa>BH4El)qc]SjjT<HjiZdJYjl%poN%WHS/u[q>U::Tn.*MJ<U)nZ1';+[X,qc%WV)eU`A#dcV_&:*$gss/=kEk>$[+1QoPdN*T\I(;;\P!lo`^s"s&T<+3Plr_Eq%82$fO%mud7Cr\XM5\THf/qGg<EU^H:EY7;HXXWjU&;\D68lP"\.9<eT/p/C>50.D>@#Q<:B?[ecEs.j3TI@.`uPgVEgHukU*F1Q7(W<*ZY%bGfRaoo&fY#gn`=pgOJR;JjtsiF=92?;k8[XT;,/eA1lq-Z>uJ/Z095<Y?)fT]UL3%?(<h(hTp]M*)u8"jQs0Zkt[].h$-^_TImf%,9$Nk^j`'CKO9]t^dba/#QL+<KjF=a(A/rNSXNZcV[of0pRg_4&iT+e.$+U3?VVEG&BiE:::g+)]o+_l7K)\(\m0%CX07LpU]6*K%ArX]jGFRE7FVF'^ndKdZl,$T:MOUp#a$9OJ:Hs8.74cr*r"#C([!R<CH"ZjMY[2,CHuT[IF>$jX[rr5.C_mM;^nK,MgCW7NOS``7%GLEGL@),M^;JGebaDbh+rCObJ)msdknNV//0\j`bXSpIGqsC_L5^t.belUBsG7[,c;*/,Lc)NjiOOb=`>h+9dr<c^C>=25tE-$8C%KLUc1Cj(ul7RLfurqibL65:9pUZDn9q"\:Ijq"S%e$8M*qgU[!Bjn@&XV*DZ6L\"D=)3W'7L)1"%Y2<oh*r.<#Yf4*hZ1Up3Xl$_%/1eDUhEDk&)WDN9a!Y*$MMV/@NRsdd!4m\&%FXoV9>)h=*fsV+jbX]nOr%SP-Q^LbkuR9KmAJQSIk?FTk$V6h]@4R80K:*J_9u\"%_aAOuqmR%F`ipRPN^H\F)ET-EU/9igp"I2j?2jSlMBBe[0f5#UX4Q@Of4qe3YjfCe2?s+E8HfE2_7uC@"HhacHgfR9rmru7YM"0t%s+L6d"$(<"FPlBYN9l&UR!^_4$_h^X2`::./YjF5j8QuW`]9mnh_gie6)46OUXoI$*Kae\Gsg0^D=^,G*urg$^%)(6Df.(=U1@90%s(0)Wcju0&[G=@8iBdEDT:At(cWJD@r0Ih/DufnNAW(ZZs3#QPp_;#@JEHtF]U"+V8%%*$D-+?WoGcR(5b@9K>QGF;-`s1OSS<n^%g1=ldU$J^"?;jVIk^0ea&/!Zu"+Y3dQKlt1iML(loiJPFmKAMoZc.]0\G1W0^eWUC<r]8X]P*oLmK)E5Hd_=>i!'$XEH"Vtg<&KF%:Cumd2CYje3pGAhZg:7e*XnCGeQB>aeED%DeN\i>mO*9f>*b:/9j?er`?=1+,'\j/i%>Dr6-2=MA7/lB"]M:50FW''2*)I!j5*t;%O`uOHYjtf]d6Y!N75NWiTs!!]pO2L1Rgk_B2g<`?5Q/#(STKf0:C-QrhYW*8@)e?G7uD\i<D*:3!gjuDF)CqWmrffR9EC]Lot6NU%3+;Ql\QelD2ApL@e[msI$@5<uStX4DKn`eNK_mKq6'?/u^doWa["%qs7]W-Kot0Te-6e\92D6&$)E,%5Atsut!E#N)&Z`SiBN^fW%Y5QW5Zk:%,XW:0Ib'I1O@_LGG,4jNZn)/MWB"Qk^rq3<npJXNe#5\#-=m$D6<9L<*0l8K@Kt9R6rE=&=>Am2)=gfVH9Z<;Bc.#RO%@;)h)!E+hhn;PJoE4fXkhPn4LiV`2F"C$7Z<AD>T&*tCiFo[?#l&K&u/Mi>nEE/$.FXqK?jhL\Q!fO"'"uO<NPsW';4*)6UbC221%YC-=MD:0Sq-;jr3Cra6l5[RMqNSXnLD-W&WJDN^(BUVa"YU'<qQXHihRkX449jG%eh"tM>EN3A'H4@/4FPa4pld9Y0M+mmeVi#Y%%[JJdG7^j09TDt2JqHLSNFGd1F[&UDTN"]S`Sl.,W'Ur6!@j=]"DILJoFkcC\XtUD@7ng0dFq*Ub\>]cD(0MQ(<sWQ7;B(^&WP6nA%>OThhb'52Gg7]eMN&m'Q/56kS!k017)+a!\?'8[SYJ]AX?Zf'?6*q1UHZ@XYfumS;J[HNO)i5>*k<t,>>a:Mbb5g^0]3D>f"qA(a%iMbT,4Qb1om]P982#aX:;-1O%hCt\u3+GUIe)ceboDp@HfLZ.6ZLAL6hr&O''DfkVcY2n%E(CZf;fB9PXYg(aBU'EW^/hqOi0T*^%ECPgm3Mr+[3H%!uTSnf-i4<KRcMQ4+rj>n4f@mugjaVT!KZ,P<g%.ros3BA#T%T7nr^XYk$Z2H8q=aLEdqdq<.O)7N*K$C>[LjV3%dZrk[ZVAtF5KrPe+/`\hd*+pi8Wb:c+ZJVE%!:>)eS*MY_>?R&qZER?Q#<_YbEMTX$<_J[\:1j9C:jHsRHoDrbd?\)@%('mBt_Jb%WOH7UQh%!*7L-Ye^H;8BJ0X6Xd-fD4@Oh$0>'Oh<cNU<K#(1NHFpi:tTD/eVIF4LR?*/n36r$Y\Ig4HiqJ2OGE(,h-*_68O1B#Ua%O"):X_HW'7*r`/]E(+8"]"OsLr_^'F=UF&iO&t<bl[/_Cp\6<h61nFSpStiB-`#1+"!eX&?jP]`^Zs)57XhcAq;0Guhe)I]WAQcn%?YrklLK8JmJe<fV&=WA4:(Wj>H7<+4l[#!$[JT?OE8;irFF9Zo\>\Sa(9#ME/Pt2Q>+i#'l<sRD"!"MpDA7(X]e6d(078XseP>cX%Bq&HA!f?R)D+BC-G9@U(]V:/k\5rV5)Ojs%#TCbPp+,-Xr`?MfQSpRU#PWf+mPju9jb^W9<1Bp86ZLk5%>lm=n>N%rWIO6bndp+^%<]g,l"RAKa$``l^h9GZ)"Y+dsVt]o9M@pDp:8dp]LPs"P6e);5S&$.Mmiu_/h=l.VTK41O0VlHULB^5C7u6B4o?m"*%h!c>eSBBF%K!!$Lf^.ak+Q=nVTH%7(l0_<Y+(\WMR]c.>+^j5nBY+F_?i[5j_GgS:3L_bE;K_9<dWP8^#&Em<j1Q1_a\Jb'a.#So#QZE'[(S35%OD=e-X2Ze@7Ps8MX4^DL(Qr16o]r,kWJe-02b(TUfA68-UgR+,<GK=gfH-$JRq?bR:*7SYFB(gK`Dq";OejL8<I(\1G-JLNU+K2H%U+/%+dLm^I;5FDu8$CgGeN9=*Gh5cOG4!cmBGo>(`b]ZGU]N1MUXZoIQ01\g8:BX@E#AjWSmK%^XCK#s?&`$2p6_TZe!mFZ)B<:[%na:YrAG)d<73_)&]Fc7F;L(0[6PC%n`P$W,EAW6Xn/&6k&mE?9k4>8+?pFkU"+c(KXHF:^.`iRC8g8u.(gI&r#V^cGm!UcQ84BmL%_hl0oeBMTi5E>%QAjt_M?!L%,V)%J@3$?j(0bPO`D]l^ZYLH"t9=It-7!4.GF0GNL.6\_ob.\`7Lcc,C9)-&FUK"%4I$cCTj=t$S%'JK'7%'?tMjHshln2_R,/Um+)#Rl3is0L1Qq3rA&euB4W:RkMdWZNG\d6K\EoM4T?+S!#l7G]"$^_t7R!Bso;;?\K397S0Dc\oEI%Q<pQn0g_r4C\irL^OGiZO:(T7$hN[+I20IFg</ZCl9%%K^>T=?lM<r!X7XTlrnNo(>HO3?8[iK\;e:FNbkT9?e=G.6@U\CMQ-IOV%IBI+$7sB,giM1rF^&6#ck'r]B1CJssV9GZUW(;WmgKE=FSgies[@Yf.7)5'O[IrRH20I)?/`Y.O\m&<bWO0oc<N<T*V4Hdq0pV-L%f2c6;(HP'5)uFesc.Z=2c<&_Dg/Y]\E$pq=.^p4Ze]lW'H#D)Id9b>%A4&^$,D5<*[EQM<dr&dF>-p'VDu"GkPm(a\beeEqcf?":%btP:TeUX@Tpn;C0B2V#W5BD,t"/fXSaYm(#W7dlNZ$NG_Zu39u8)tV;nXtZQ.%q,g5#$MA!42Q!^";i?Jb:h6[[ih0Od[rqXR/tf%q71p!70VF?WA]0/igX6Ah/j`[V*b74"!0cdH?]?`Ro#F5ctbC+jY>BOj/#Un4&':7h<Lp'B/cp@QgWmXs"^D!ii@'">uZD:7C1mX%Y2ummmV$ceo/!o*Q&4b^bZ)1fe7n[?,sO9a3d(.H4!jL8FXpIfop(V6NQEVbq3N,WWHS.]<A(^TK/u_<HP;[i;YIV?GSW,:Bm[.6%&DHBmhLTheL>L,A_jdq:S`UJ0%j6,V>0Z@2)>'ZS*gkKSWAWDoaio]^::1IN]88U<bk5._3sDclmQG_8Y?is.k6="RHIa`bmtJPP%T,')?69@%4^WpJ2Vl?c$>;WC:7=.]!^#2X]bU;f?j'X%/e)&=&XW5i).Z:mg5B8Pap$JEW_Q;Td'jE^+lu\umDGHaN.E=`F8sRH;%$LSU=Z@AsqAG3?P=:FN&.W$iO>Qo>_/T&e_B?aXfVc8\!qi_ERFKDs0ZTb6h5LNRS8>kR)c\eXL]+sSG>a1r2\UdM"l>=bEW@[>c%m.eVIE.:pul-u(W5AQO^YYIj>iS:3qlP0"Y]&!<kgA'Je3Xb<HI!J0jm<$*lY"Bk.hChLacaaA39AiqHGNq]mGIcDB:9S85n"H;D%J"0F$lZNWKcu-=hX8U=9E2NqUp9M!/Z5VM4B5]!$e#V[!M*BMfJR^j/Y1ND@_4;XMQ(O[D+!1SHI6@MaolZ.=U##^^eSCG3:*2%O%Z.E4hme#^ekNgd/eA+hOG8HB8%NT=DHTn&.l1F[I.Q>*8!^!fM(+1jVO,IT!l-_NY'PT:'.fDK!ca;/&2<SJ<gtb8=%X4qsXNg0X%7sZ;kbUmZuV[ETqk5"aq.Q]6N4^Xk"=1`oYfP=9ddSB]*o=g?!OJ:'`::G-&?*>AUkk6X\1=0_VGDaDW9;UH52V)?pfBN5(c@eJE%?'k:%4e:j[$Q\Wu"a?tA/J\#nSPFasYJ.H<>KK+\mUj/Wk]\]?QbWCcV(LEcdV7QnhMHFSjasG?HM,t\=Vpq[jn)JuaaNT(H@%,k%?%kH?!8HfekUDep8G&4F6f(:R0Kided\jkGVXLKmaj1C`hP]IbgA72H8S(8]RjYg@&"ucNAa\n2r96`EBuYSd_jE0hWD)3_Kt_sh%hca*uT=uBH=q5k90kO*#:V=C/KY20h9^f&fp;k]i1Z,XEmE>=Fno+A(SlkPJIGHu'0oQ8u^FIJa.l6,JFnW5)$%MeJ>$?'@%UeWL%qd`HU^AYZndb+qTqK\oRSH_6R)#O02X?D9NNJ;ekXG9!q;m`s%d&1fafCOW6N(mr^G9>s6T9_DH?gFC]pQY=W3?2Ou).b;,'_8]H%,F)?nfU/";Q[MZm02?l[oP$%pioeITMjNhAc(O6eBBQ/CR5l8ZFT$+;R"'uu1X7d-0$Y3JL7,S*]$;2^RT5sP#hMc7:P%\5bUi28%\&e1>I/tF8.'$ko8nUTf\434<ScW\t3eKi;d/L%X>>/pX-^:%LP=;J\j=IJXeg=C)n\$U8llao=j/0\eeXAdAjNS4VAE<0O*e1:O%rCn%GX04N/gEt)$mOW[;2;dZrMXl37d]"r]H.cogo6T<](=__WBW"B)rK]f4Pq'P/c@\0SquR5s/SM64BoVR\4.kLn[>q]@\P?qh%e!"[I]uc?3)5m4/++i+YVnVS%VqXpAVn(R/:(_eRQ(UmO23*(iB<8*D_;IC;KlhY<(d?B)8l,'BIIC:Cmh"2%p^SC^SZZMo6(MIl%%!R%P'8g16Ob@lbp;hr#:?sh(*e0rkO,U4#?0s/R-E6b3o@8`#B2!b=Q#D\.#np38s.FI(ji%uRo>B]Q(Qi_UpLX'A)sorN^[fjm%_?HXpI"TRPpVfI/EbWAg=R42^/uYh3j&HAaCRs6QLPm6?")IVUe8Gc5R_=,V6=R!!L7VE-nSnQ1Q*^*miNQ$<^]lX]^kDt%D7)a2%GTp^$k\V%ulD:TRETZpFBZTMlWEt0_[e\mrm&`(*02Ks@BlN3`jqr8tc0l%iSRN[dRR<bZo?s5%c/K6Vam1pJ54./KOA]3geFUup%,2L-?AS,6%FX&fY5UAn2o(]Q!mijn3jmYQ%f@hLIj<#P`!&=W9_]Q/TGE0>fp_fTD`]"\p4tq@;6g"tBENpC7q.ojU1_s6$.BkE/%)jBHnITPMI'-[)277Zg-9Ng*\hpH[EM.7Tp7X%4?NgKJPZBVIQHZ)GcGstNS'g5Ob,C#g&hPjM1SW33XDO3j9C6*Z"*n$V!_C#J1%:LsdE+j_d)(WZj#*K0P";XNkGQRd?d*R'd.Q5;Nf>9?p-Z]Sd3lMB&M@5O]e?FKU+!Ud9*:eL='UT0sIVs3OY&:5;hEn)4V5i<"+%E%j7Fk`mhT\S23'9dsVA(-6JYC1\iR!^k<9]hlX<Tnk.F[-(L.m5U>h"%'g`Q@2IfE>Yt#]R2XsW:I!S+KiTo`M@l_S[eKPSB4?J%iDO!4O*`o']%Si'(e?F-QM3`oPYENQT]pQNfRpP.K`fMH;NPh`ps]>%K+*a9^E!U3g@f;8BTS%5dIRgHhS1TM=CDe?1-[`E[I$d2%Qcb$iT4",e[!JDM6)_cdkXs2!,&?>T+/tY*o,BU"gOPD,Y6F5j9Z#@ZD;-S=rG!cM8CpkS&O?$@pHh,+5,6JXJAfJ\#Z0J,SMPCT%o4LkpD#OIQ,222Rb[2mSTHj&`Hnga$gckNPKbue/%#pge`^O#OF[G0A#`[Y04#+i2(1YrB_q9$SC`)1Yg(5+eGW$b5h#YR(^ZH>!%]G=.L*Ub7n"j]Nrf[e;;7b"[Lk0!]"`7VS?lfNOd^elF:s4KNDRN$dJFa=!P'K\V-UpA.omDSXQfNIN#C,o6?]/E*^Bt+g0'Oh&n%?4\OE/m^L[&Q0a:'uc$][S-l2YqC4Zg"tm0cA-)XpDjNFhtos`ou2N16aEZT#.`(8(6uqsCRtoHUMmb0n`@gtM8'.ueR/B$a:]0n%C2h#lfRrTkn]p5K2EVWI_r2_4`qfMK!oU>UNJXu\1_qYCG*<13s7e_U4rWBREhir8gg_c9l5(PmL=u.4G@<f,>$u`WD!VRrqJuD:%[k/ZI)"bqLa+pVn6QI,O"rKHVFs2O?!#?(k##*,[A9h<_S[(Hf?5DGiZZr.,k(t^E6q@m>:5g)afQ0Ecm[AhG*atu+CX6e2LIOfs%6.rK9c&=D7,5Lt@=2SIJ59(Ep=I8c2]P:UBlH7`Z#6l'n_7)2\J2g0X)pkTP`-oAn?t&i]LR%ol(5nQi=J&A'+FcT-[KPq6!ncI"%JLAn(25N6\aSmpNQpu0?&kn6CV>"7o3fIDKE49qXNJ>GQK.LmXV?k`F962GO,%B%EiKnu-+rk?2\^7%HZ@YtgJ&"oV5j'aGGP;!(%Dl<\J]IGQkee]b8eh=@UEWP+O"\fU#ljqPUA]l:Q3/T>OP/V6?=KItMGAk9q:g)*,nI<Zc70H=k,i['2^>MlGSGSWqLXUG!)FodH%/)CV-%C0;<R1)b6YXm`J<:B6s2K,9]:R'jY/$9i5G'=AJ:&kM'[6cFsLiu6iWGl'-rdJ>$(YY7#I5'0^&6c&`FFo3LYJ")W>?jNU%LTZLA`k@7SlY:H_'BiLa@nJrD)IFmBJ(Nj+%MOH<OCdiNM:VRJ%7mk_kBnaKGDf'MKU@bfR!FOtk&)eAO_DH74DJ\K'(+,4BZ"%H%&=4/tBT]rgk%tM>%F;aI1cB/3d1S#WhTk>#YIL-Zoq7#@=_AbQ&BHlg$1iGhGTE2V']PDgK<5j!d>RBY6lsZ>C`LU1$a<"e\Um7h%+X$uS)-Gq8->O4`q/NcP'Ge!1`l\fnR?=Ut#1r61ptDdAds,pkUbD,+(RR/=[\dJd!jprAm.lHHZ?@G$5knLhgSoeZ)0Dj5JS&Wi%/olY)dNnQG()=mtg-6@L%FOt5rRqgJ/OjeV8mE<9-dDe&#UK!9DQ_#ihijqM\hKAg7'tp\W,%sH7Zkd0GB3S05i/2;94^WFL<r]&%/elcD\/dm45"^alG"/q/Tp6a+kkP%s[,JoH'H7PG65$hde:u;%/&b>NA.p*09;jaRRMFV5j_hsA*^/AVp=tXp&g!;][K+W@2aP+D%oo[5(q^.H%9BIOb]5NA44'$/rN!Zb6]Q8pA1*=Hr@Ct#Ull(Q'X+D0W`(,,.:kBAnbZnJ^"M<0@q8EBR<6U,MSB+9#[VfhEiHn'`%G-6,L$=<r:O"UN\i>j?,gMI=X`NS-SXPH-?WN8.g]RMU>+ti"PTm1V1g44B"T1(;ZdT!0+HlKWlejC$9+=Y#^nUqig$0/VnCe[-1%"aUpon)Jf+hKrk>Fo"cA;-D[RT-/3X/=Jrh9P7`;*BkcW$orFW)0DkEG]N!P3q[%1&SX7O%UF/\*FoP<,DV<K>$(tLodiSXTo73h%UY15DkKjBUl=A6FAIB!36Pl:Za3O)i22<eFK?h_i)_Hgt3eIq'fJmp8r$':q+$+Y[13jAcTIT!2,NB&$==2D:9I7u:k'a]-4<Wi6%HF&M7W!JKZp.qN`Bdf3#<TuqiH3t0;q,\2%Ieu&>:LViCIEC%4Cp1^;Gk-QU#.M&T/>_@Tn<W6""<4SkD"Vp/3Y`(,nNe)Mn+tRZ%kUC0eQJ[0(Uk@dJ7-!=Y?Nu_M]TK6KUrS*en?%WXK6.Gu>i[@AW6h>#ejOo.*2]ucJh?lo<@<h'@8D9E0=i#HH7MO"d+BH)'aPbF%PA^U2a;)BoS/aQB/RTseE62uh[Xs1p,VF1.#us"]BnZh^56561[t8R:84pZV.YhVL$2QJ!mk02.H#V$j<V_ZMF"s(fXX&+;K;\<@%%GX4j,)V5?9WJh^riF$$^_raB0]*op.q1)7+E5?;L.ihqI9IXuQit*N3Mpm8EfsarfbKhYk0!f627eO`j84\^8."k^?DI+!-9XYq%nC4h%Lct5/a&.(HqNqZnBnOU6&kZhpf`RjS(I;om)o2q:#DM?ElUEQqD9E'A`VC?^HqpkI@rWqQ;/ge^7A6tG7mhZcDKp:4(lM-&%9o-'aUC^lgk0'@L]"),=DKXY>c(5NTAQ`mP7"#6,4]'0hB?N:_;8b<]3=uA2Mt/.2a%Ht^F8Nt$`ocX$ms"rH6"f"5c<b/tET1E"%!M>$jhhaN:KqIT4M/rTcOn]f?Q:*m-0]%R!2pia8(d<RW\1kZQ*$'$uYsE.\!B*.\:b85cU&bj1q3UT=_IpS&X&;0=Ri.g^j263X%--)f'7An1OUlKNYE)9;6Y90dj'A6m-0U=G5r9mo5`s::-@X&Lon+[=YJc3]P3E?t-$+Na(P?TUC;ufIH!(bnjiM[0l6kPj.$p/<"%G`'amN<76AOi\,'AA7b(,;LE!((ub_)_rVtPq_e.e9E/mlI8^\=sS87&<YWb`ss<C`9\==#.ICB7QsTSc$=\)-7+h02KD1i<ibV+%D&e@g8Br*oH&p\G!_I]EQ4r%O_DJPO%s@iF06rQ=rO=u>-tAZ0M*bL_S=^d`(cqO[+W^#H'g]#,.2ei/;(&.QTomaLQ=`W.)E)e"%hB.>9+akn(]&X>L'q\Pdo!r2"IFr\+@,#MM1hED*lNur""N67^3m)e@qiO1kf]5*n7_KIQ*S$io.#hS](c!0cq0@D+jMQ\S-&jc(%%XK!M))XT":,("'`-aNlcbbkX2g"aa83U:qN79$BiI\B>a.3_W0.k5,&*I&C_l%5TjMM:r6S_P'>en#MY0W(h+3o4"43JW_H!,pb%Z&P>X&*cl2EQDFf%LZE+A#&IKF=$re>A-fC>fN*KK^HSjX!fcs34M7`W,-S2cGHMlF4%If+X0]E^7DN>Eku(::qo$<=eoGd6#p7U%5V2/[B<]&2Hq[)tZ'^@ZAAbHE&))@3<GX;:ODD3(&OgAL>[*D14.$=EZc3%#,2Qdf2-q9GBttuuYS<:W-,MjEQ#QF/5.dTRmVbW+%%;3KmUQ5OQ[.E$r,]N8+K*dR*aXmq@YTWV_j%p!AMi$htK(trl!i+gYihM4&1/b.dc[ff+6Y)un-XHlW#0AVuYK)ihqX?Y.N)XJ%%*#Y`;0/eiL<+oq:N)XK0T91%8%!6mrf(FQCmFe]DdP?!8Od?Ln"5*)i3j'dCgNJf\\0*@]r`$DSGo:BIS9kaYLuU[8.U4[I`gmGa%kZ<e3$C;A0C6V]-JK5=iVSYb@L0SWhD:IQ;Z4l2T^'t_SQ'(-QFb+FmDoF&g'j.en`e7+P$JQ6X3MdTN2H"d_a-c%GiUF7Npr*E,%_Bs<;g*Bt-$rIP=]r34sETKG\e%-PZlT=>P<'CBU610\9#i7p8k5\kN\T[nUh7TaOQR6K4jbc4/nPm&$4"5(^qD6+5`O^>QY;7if%Q+J!)43#6GE@_&i/8c3ri=^b6%T>jMVEY8X@ntlsXGFNqQ-=[Oc#)%rdYToWkY65)IQKaS_p;ScqSuia-.<>sG.WUPYj5"_C'C1p%I*$7B>N$HCE2e"<XOENW%(kmqS*SRRT@qY?cfrrOlipNc41?.!$"2gX^=fGq2`Vu6l28]p='13J0ff&Hr&fXEf\PCSjdgfgA_=CD%/qQ,qp[K9R5AFUEG4he=_UG"D:<Q0%gRKqZ8+9JN?%*:LoQ5VJ&A-BYnMa)'9*)@@>]X&H7IB%V\fUK1o,UUt9r^5bMuZe@0lH*N%kuXc[B;o`e]57_4rL\!;Cm.)ODFa0K8."J,#T_pM789NEZ20Ib8f/iBEUL)YXqKV;(M*IW>rg3"jFS'i=\"K4FBoSVTj&e+m>!+s%gc4:J0I-%7)tFWPTVaDWH>JsWkof]*&[5[J7i2M2bZt<J+E;_BP]S]m"A$8JnHf&u?&uONaPH4*B0_D'Rk=t5s(]F7flTNjF9?`a%N1<TY'_#RUEK2]A/h!&]kiBiRflZ3=Q/g)c$^6n:c))F/C+YrM(Z]rH;"BFqF<2ZXk0eO#IiR-`6+M)'&n\Le\feaJ2>1jtTNjNj%m<*6uFOW#:jO1<h[c>Q.$d,;ej"TN9V@/hu*46i'2I5gPkd[t`Jj;qJn;J`a/nk4c:Gs7CRk?+U0%s2A-CZWdWDpaSij7kP=*R6Z%VXl_M'L+4/7GEJ%0d_uV-]YH/ZKZs]l,`/E34%k$Ep80oar;Xr/uX?;S<6[Tkr?%0X!M17,K"0C"kh0Ms++]*B@@%Gd`'ul3^bl3%cjW@5d62"u*C!ep9./k'L8%$hr?cpRIFrAITE4l7Zqlo\k63<O!K>)jof@U(/$?X27?;>DnWJ(UY,N,Y`BkDgm!Zo/4-0BNqs&d8%MfIWU-[]i!m!X#N3G\Th)=KcA@I[=^7iN4r-gF*)jlT968.$!9q*hHd'2@p8]Ri%(;`FtWYnhlYPd:Xg_REDg!t"`K3rU!B1;+aV%]"HYdL!%pp]AqB;KDU]t_I,s<\I4bGHXf,Sr+jW>Z(^n:7UC-`*4m'PRQH:3U+X"j:/_M3jt>?djC,7&o:6L*I*l6*YZnn#GO[Ud%KPXRXFNkiTQ&um=q%o+OYIP<0(Tt)/Eb%pN^Qc'2rA+!L`-m3\U6M=uh:Wl]+$QN31q;)kaGG#43tE"k[Dn&F_^-&nZ8f08B>Ep?%D;e$WPm2H]/^<.k0s5.&=kFao#Wk@E0OjiGR)UIcr#%qBBPR0/>G:_]m?93<s"\,:=Nk[P"M:@(@mYO)Km#hW`^Ful8+/+OP&Dn>%O%Jf-FD/nUcH&#R\.u%7_PO):45l[-'&Aa2Nf,7;4c*ZCX?H;rR_\YES@?L\.NgP_@,D.K=,LOY+D=2sRJ3S8d%,M"JuI`NaT*!k%NEkT-#!I:R`>eem!.X^k(c#%fk8jkuX!!qTJ/UM*cAG/3K->P_,-XTXGCuMt^Q4]V.%83gIE)o+1[;*Qd)n=C#p@jA72bX`me$9t%]PNtr;S'\k&gL<m&goHYe(OK$iRN2*d!*C`nG/>@DRcITKX9W>DR^p,(?'Jm-"4^\)t">N4q<uV'Q@"-k\N4t_qbSWjX'Dm,B(^4%B>]B]gl^?@_G:N"C!<24&TYcpgo_U4`7jP@m7j<qm,<:*1M7j)D/>':&)[@j!/A.7:&(%Hkfh)b1$#1+<q<$S\\daPpeWEeG"-ME%R'[jc>VgJN41QssC6)ipr:Zu?K`O):Re:;?#OLai@`+['8PF\43,_:=;lDE"SAaLD@(8$4IQ^f-jX+Z`+3b\=R-;r[d$P)?L;tmZ%(i'Et*@KoLhMA$`73sZOG=2$SmNl"rlV6pq-Ce9\DAi^!Q\\S:&fQL5p[K!iU[PO!W.]NT`g>_3)nKM=fONo$Y.)N6V@#QNl?5;A%4gLRJ`g#LebSNS^E)PA?`klb$#I\&o;T&Q+K4b_r:h.$'O[ak/)@fFX9+V`'km&)E40'0o:V!u8fXib1f([H_lgs9UX6l7!"+Aof%+h<"[&!`S=ZSkZ)M?aB0H&T#sSi"*ToeX<\:Hi$%o'5q%%omoD@9Y5<htlp&\@eX,1q`8&bE<k!WDo#B_D;.MaXQg4pW.]bhLr"d%n:\]98k0?ZFF3THdaoq6r9PK5h:MROfKF&]Lt&dF4Zjgh2e,U,\\6Ro0?Z(/]7/WG8PRAshDeU0BE$j1WXaXT=&)(C2(#Z`;<]AX%+7;.`e*SU%__;"ImS5.u69;Mt4K4VF:="<YP'n,VrU+$HG?QV+<kPb""]#r)D_qXhB5Y-8X%+j%=ApeD!\I"tF%_u(oao-/gAS=X%-IJc12?0f_B=T?SFVZ4W-gkM!_2XWaWHuk%)H7@*2CWU'fkPVDdm/R3+T$rHr2#'NX27.P#4?9e:2UY<D<`G)9-.oe$j:[k[T3QD%8V(1ag^+jNVt68bB]<0/!aD]nZdN=VBSt.MCPlKiMV6GtQZX[c98e'2&O6fldn1)_cJk@3-ebI5"]B<(GR/b48*nZucii,\i=f;S%LUB.G\13OZA#A*5C3s#i_([4>/6"YX^AI/<0kMq0OS]t@@E&jbIO_sQrm:2?6jL_ca2c?_=L*B*j2c9%)+6e/RiR&IBN"tg):iR0%U?%K1;_54g`4s)[n$!bS1!l1?qT.2ZnmHE=S0&C3,4)C!JUhKH0[?<_j<8G87Je,cFlCg7`nt)PS4If:Fimkb)%iH>^c8qXE-?kW%WmnIeo@l\iRI#m%/LYYb6$RQWeB+Wjf!ks`nBLe2M1Btq'OgWTC.tUshDIa7atn,h@/Qj&Uab_tRAe-"mkp,ZbKWS3`Wg?>*d3VI%l]i\P(734."Cj/:QcUosZZ;IIO9aK,.)lJ>KgVEa6oXCNqIPI65g^Q:%p(+'!ZZk:3![f?N@3!QN*(?@M^JmD!K-">`nnKPejQ5O%o`B>)$"j9rjo>UXdjpjj.#Q=n>q)?K.%15di$1a&!K-">`iQmCB)ul]BEgug^QafG;=l+Tqu`;V`DU_Mes=sbHuUN2N9=)&,%5Zp%iCiuopEfc*Qh#jcO$)Ptq3"/)L;/u!J!SeQF"*_OMu@.Pnc`2hU3JF;ChF/Nr7Oogme'4r2Unu*qXGbEn5d;tc\D#HlPI6[0dc3h%pg1_VU!8V3:MF`0B1!!]lPFn+e6)/3Mn[^p6%7o$\I\d%M*p+b(M'b^\,,o<0cS$-iLjERL<8LK^0<<SP:P>"IaPY$NI64%^"720%\>AE&IaM;B\<er*lPI6A?YkL4r4RQRq3@`2lf[5^JW-!^8fltu5<!R88C9lZ@nH+]Mk8%pXL'^Y]@1!_"QK>Gp\I<o44.?\EVK<d%ho@Zrc?ncWIRDr3QWW>Qho@Y_#J.%IZ9**G.`&fIn^;Ftp\I=VViV2^kkFpBD^s[`16P,:f5CYSSm2.;kCm->M7_@mqGtAhN1o>,%qF-m+EER#98aiIdEbp"3_707ek5CBgrM%Pe_#*n]\CWC,Q%ca$:O]KSF=T*?nHn+=(O`>k`#<!g]SCg_XaXB4NT"3YkZe!`fd(AN%I]m+qXL,6D=nB-!M9<*5Hi6F?`^T@h'=j0BoR$P2DtQbH+5a<hj1gXnfR*S0Xn[tQ$dMF;I]m*T0J1\/3^WT;76B#o>jF-"lPFuM%?]=_/SdZ]dWulP,nOWEN,s&GJk^38Ul%m(HXPrX.9+oL,]T7"'A9`F$hl(n)fY)_WiG?*!L@/"Yq-H:JZdVFZf.T1fjh6jnpj;sk%d`5U".mT"%Fg#/ZgJ2o%O++9>[+k$3b$jc3$c8:h:<3S4q?d"`,Mq`6[!QcQHi4-W6dMl`:+mjKlfUrXi2qI`C%ES*lPH*'Ru291%"n2,B?ErHC2U]9f?F]pLae<Pghn=KdM[M8;!t!lN(O`>+3O`YnHi4dP_$RAW9g&5S.>7c`E#5Mo8.P*ba<@ErgE-MF.cRc'2,(IK%IdirIJAaku4V=3o0s%e5%OZ=sa[Wn2okLauI+q)K<&h$"c6OKWI*mRQ\#]-b1.\P6A`iHBVPM)RVb*mR5#l4[E,@Nec*fB]\,22_%G!G[M#\2+Lqt+oHG4@(AZh;!XmCXNX:4E4Z)4?7p9h!rG2Q!S;TCVX5nb8INrHWa.l?VdA3iq,tp[d4"I^#rfCn5u\Y1Lr0NU)X`%qN:c*2-^)<FhO3l9"u`+cLt2ic_]dH9tS,'g\Q@W^U)aUQ>r/"5$FSH;J3Ium'$<Bh;$>sjLs,nW%[,/`L394QP\gdRJd!37Rh\'%^7&D+B/ZR.f)Ct7q=V0DD&^r:h<p1ag[/.qLgPIl:W@0GJ%\'d;?8H5<ssr<H1etE?tjPo$f0Z,)_RVd-\GKK4kZ[TG6cIfk1aST%`8l3aR2<A/o&iHec>@G=lieO?UB:t75Mb_,;jk^hI`ti*l6hcsG8G$nX_n0abI""Ws%G=dR2Y.Lm]kj"bg/UG4+dEGLFo$[R+\QG%>\'\1H4?.1[(QZja2^AWBI?5-Z:a0!6s"F'>9^<fKS_Q2>Por+<U)O<qTRsZp=YFF<3/f1'`'>,)hhU8\RJ?`Ss6E;e0fpXf%P<=%lK07Th:s_?YGe"mDq6JM5]]tts"kmenb-[,q&n/*UY>W\+7qJcYHOS]b?$Van-oj$Um["6h$)ffYN`N%lo@Xkr[dD)Gj[@0\Y/+u%fJe'ka,Ua,bSL%hcJcEC,]Iogki_44re\#7I2Di5k1OO86D^b'>,^*pBtgs9rMe$/m-`"(1EXrB/-BuYa$6m,<Th1\s57;ac$?P7%5BnsLc@Z2uTMp7$HBGa.gKWQs?Z7jBQX.nNZH>ZFr.B3qjug`Fq[MYXW=9/5_N_^>=Ac?[5E^k]:tWK]!$)>6e\5=*<"$!25dUSa%NscYQ-bG:qp4)5'3''(@j!o9u4Sj=M.?D/D)1C#mkD_f'd@=.e0+bf`hb%c9T;.To]8PhPohq$@BrAG\H/+=hAZ=7$r@.KApgI-^%\!kmD`H`D<-duGT;PFalT2PFZeYq0-6Ln^nDDE,Hp/5q#2(hssMOTs]b:ggFF2,&,Z.Z\mD."kupN',qkM6$MP'afTY^*cU>nTYN%Eb>cT!;-9V_1KQ0<CFe$03!*a=9&CG3V':5EOCV;+nVDQO`+HJl40b^>NPBfAJ]hpVsLTNC>`BQ.Z9\oTU3ttA@tZRb@h*^)>jcJ%]fAa"<Mt_TF@n`tM?D*RlJQ]R4a>QqX5)sb=C0PNb6mUVHa/+@N4[&,Tt3"mo\Q%IXK7YohZHH^gGc%[O!PmsT&g"7@"kN$rd=ei%"M3@+A'X*_gtk.Bjl#RAX1/S+?1VV9NsgqepU/I$rQ=gd2HJCI[*AOgC!pWHGjU,tT<r]n=TW<JoQ]/_/RNE:mVV'S>r\:gf\%`I%q26A0l+_+\L9N;"WuUeXOO0nWlfN8[E7iad'4S]%M0u!OEAC7#?^f76b&<p02O9GDe&9Mu,*&t'!\K1kRh6Dpi9/NN&f&155QEDr%Zhf4/\<<L9O)6o0E0J<U->u-1+hk0Zn1C$(S4M'<hRZU,6:0/f_>Z"PH2X$FUt1GKoT5;AD1B\9`GC<]]XE@p"aEsY86E"](*rj$%+0`EhV`&h=Vc;ASBhPDQZ0Y<S':BiWZeMO%Cj\bEG^a)H[pU$aN&Xudh/@M'_#-;]+6M*K.U.;rgoOGj[XH0'NQ=9Sj#%("HupIT%+(rE`M-(7qi8Ea,V/Kmb7sB,gr[kkc+'Y-:V/etQk#RM.1(./Z]:$XTbZSQWFCH/[SnAfteM[-#AJPboFu$UGG9O;SH'n]=\8mFn%qCbC"Xj2RYV<8#H+"H0.\[W&pNAer0Qh'</lauYlEA_f\]6U[ZHa^;.DsV>4s3+4\VQ&Vs@fLUG[_bPC^#36l+PdBH>&708];WK6%mu@$9pU9Y*YVWh8r4[3UGu<"e9#",JB@ue?AKGJV;D$WQ!QJ1/-F)g.PhqGP]hXT$c_mUHe"+T,[9.`D"+P[k%2Wa>L]OurW5Wi&%n*pDn_/f#R3R`L"lYtJX?<\Zd9"?BDP'WtUf($l%@k(\3l2"$S<9'PllpO"CH,4nZDpNJDb7>]@V>T">\+jaHodYK6(Zjpo2cC&M%q*.G\CR<@gjakJf3Re5cLN(&khA8='U[lW7h+k?LjO1lt`_sA(f_V,/4Y?,m1usYbc,+(,pT)]BPa_.Yoqo)o!t!hj52jYP]XG0B%2:>/g@N.o<E."iBSJ!;^m:SK?F1i4r*)Ua>TmHtr:2'D\'ChcS%"*JKD49)$eaLJnbS8nKNY8+.1Qs>WL%!:fLsZ<DRJ5*]`@_GB%o?9O="%h4WXbFun[J6!/Ao`kX'!A@c#C'I)lK\H"PfKOpaQu)k8$akem%]B)X#c^JX8UT)b&dS,;gpH]5D5GQBF,>1i/qRi41?SX%^nS^M6A+%PXWJ0+R="C6#PVM_3lqD47`+M,MOXf51q/>4)PXK6`O^Rr8![%^/Y64&A".uG7a!JhCm<mf7/QG#'Lm5.i?AXFPF@9R%[Ut9\3HWII=tGcA7\hc7pS7,`,]\SuF)Kp[Flqo1#_'%gQ'W3G]%nEE/p*nKc*u/s8ni][hqMCL0?kV(YQ'Cu\!NkL?Pf9pEqf+s%=Dto;9pL1--c[0[DLZEej[_D8fTZ/8`L],k'd*/sGF!a8f+q9;Xh<5u;J+MC[XI[#G*l>3+,cE)d0XuR*Hl$BHfb(Ch8eZseTH)H%DKe=mkVF=CpWhGX\QYQGQg\Z&+7qBAD@Wu>a!+Uk$M'/;?-fH<H_-ZmG/X+WbQ'tYn`^&n'1fmVR1m7YH=khASR*hCI"(/qfu_S=%7sSTin+05sL;BF,NJL^&.?tq,E"nDsGcu^\mN+i='C4o7MKe6&;LFC3Hb<N5OeoE@.,.5W*fX_^p-WrJWGHT>+h<"!-TuJ!]m2qe%-(0SXWNUpd-U%V#62H9:i,jH5EXX(UNRoZTOO$)0BWGcpV$:?NHk_0.i4/)Ci)d(rRnJeiLGi$O`Wl9Afg:R*nd,8#=]t*p+:YW)%J/$?*_+(-5^;%4R?fmK^\N35FV975.]<kP+X;TGNU0khB!/r3hi/[**qS]M7IMo9N<7[H''T61f1TcF1hONh!X&bj%rU9$<36aqd%_8`31_/PNiktLo)0`u\mit'-PTq9CZ[MGuW6t@ESpWNG4V2*Lmp?F#g.dAr637]`L1HgU%Ki^_VlIY)BT$!'J$l7PQ[?JSmHmn,L%AJ;?#OM_Ni@jB?&cu:4C/;Uu/OCJULCImTFTWoX5)NqYPrio[Vs-S$-.=Q91FJ_;omjKuA2nP3?DebQ]_K0Q)Ia2I>5(5^_"RcWI%9pQs4GFZdgr3B]rV%!#n0:BdBqpl5UNAL4i=EV]3*HSSNaLFfQ`uV&p2F8%_\.ThFa)h=IQ,@pJ6i+l6M,ONd*6iqC/9!^H%/;JC%Kd%1Q*ufhQ3pb2IdmM0r&lCc9iaK:npm)R\][pguiZF,q#.RG661H\J;R8I&`Q)/QDWP>5]>6*k`LciZ6[b4B:PJ.fNT]o$fjZ1I%T+b3[m[h5iQ%j9Q/6FlsXP+c5B9d,prSiV.=HAbb1n0->3P:,Cs15qZQp-:R/k^<@BOVWbrG:n1oA]?8PG"7q^K$j]khGY0M8sU%%:bc]0qtVt[D-!5mRrak>B(`V5GN3V?SbYl2Zhhad;H:L'6/p_6dGQ+8GWbA<5Kl>PnQ^b.+.RR<m@[hcd>>om%X6V(UD(sSH2cKR%a4!6%)IJYaGBs4\S9R0`Y_V9]STm9a&:kqX`)FRf^HV,@5NV<a-Te8s^&,$HS%Fu=)aVb:8of]:mF.ZumaB\l:M]Uk9Op5_Z&Y;\%4YPES@Ji%.GD.p=b5SfL8X8;SX2a%+L.`o/NLrSh`(S\=`6[bk2eRb<h^Np-#]NpYp%HT!:+nbSqG?YRQ4F3rlg9SE$$H"!D;q'B%5nf@l:@RC)ZK&Fb4JUuO[S04RR$G.QhBefs`0I^:qE7>A5:>T%j0-'$Zo6hb_3jc[7a<;DEuW_P<D41l!T&0IdWTR'8U3*;(1o#]%/q9F;DYdd(^"g7_!^J-k_6*I;UKMeIDDLTGR;AeiDVa/j>kp,O3d(-==!t@lf\,_Y9)1B_fM;]4bn*ih^&)N`=85rHHd[Vf`B1fS%8ng(,CoA<dZ7D=ZL'4X:+p"A4jA,'\=6'o,P^;L&$6EFdTO*q6mZ/A6po^#g#Xs?'!d3OFG*\kq\pj!3_,AV4%7RnRn5BsX"?>VI%7qmH'\*ottk:o3kqpIt>KO;Cd4L%i3#SEQHT+hUSO3H(hg[S\h*R#)j8t]5A:UrQt*eg*ABG!*FciEbiq'O0_6:mX82h3RUnF?[L%(K$3C1l1Ppj=kOg8M`J#%Q+Z8$?Z>Q@uL^'"/J\@8/R0DT2DNQcb_(u'hsr!A$JbPnoPbdh3#?5Mq=(3\f@^VSgoMZ0XElInkFp<%`%7cXL9^4pGSp?Q\5X>0Sa/q@/XUt7`*CmN"@nfr&GE1uQ"V_d2;qGE"<JCm&DeLB_P'V:Vf_q'g`"f8f#tVB-WMe-**@,$IJ!_W%/7MR=!QbR'(>2(]NJZ)/Ni0/@3'J]>q-4gWCkAFeTn^D4fT<uVUTm'$#`\YR&CALdRF8u%KgFrdGoN.B8NoloMdg/@V+OT%r#0iU%5k[Xa^f)PSL]EDS0cP2:7ZJ6h5-`(@jLJ\V13U4n^Zu'gRQ20912hE/jRQ"7R<k.]B9oiEdUmc4k8ej,rI#,:QSckr&s;*X-P<>.%J&7m2Zh3#@3b1/:^qC&aa'UX[i:66Ze"9:>?kr)\d[pa_D;s1/;P.MXm7L,Gc6Jr7[V"[W#8hoGNflo5o@tQCF)7tgkW[o\hUZiX%mK7THq0eGin7<Q$\E3GLS6O.rDS*Eo4lCYChTZ-_cQViJJ2>o0c[YuQPTr.!AmX=s56LZ=Pb`jS:E1`G]tVf[eDYM#pht(Ljq=6$%Ku5gjDgGVm"m>3YJ0QN6g\NNrfVqR%35*8T_Yp5[P;k--/qPCu%NaN%#'4b"A[*_qoo3N1-ucWFbeMJ@T"P"_..-J8cJ<k-_W%-i%0_\86/L@l)=lEg^_ma]5Yj+K[V>!c_lJ%ADf)+V*cW$Ze=$)!"[0ml"R$2Zl4T7H[Yf,!<PnEP?`XT5\DE9ejf7X3jdV0:U[Hdn;%8%qH0^HUf<S*ZY4U0lq+Y;Uc,SSoE\U:gD8TV$G8`TO];T`;11de`AWk8T`j%(DK]q4i-`TDPLuPWkun1OT2QS]"3S?]JilB?L[+%mV-06\sf)N[NiK0d\C^%JD:Yj(AAZR2>o8uG,e=#NWH8Cki;@Th!@Paq53ZS%c9,ldfQ1&Xh7op(/ro7]ToNsb(j&a40(oTf!kG$%(r=>N(JT4W4QhN.W_Vnh6Y;oi61P78;BCPncogsYBn;cP#?5)SELo-]ItUHs4aH&M)AP&$ZenI#Cb4SE(^Qfs`*?A#&\WX&;DF&>%d_5AbDWaj.?V_UOIK[Oja=RXCngB]T%,@J!!.L`ClUX(qCe2L0a9MFpC/2,chMcI]k:As>@a.Uu7P\L'#Le*WO/P=rZ"/HumE8W?%ER+IO4O,,ul&Y9O#aD)HQ-#+N?D+9_gW'pB9tUHO$06'<^dmknXJJV61=DJ+RH_TA:UAn@mP`o@Xn4qp3E=_eQ0$1iX^12BlPK6/%qka#@cW@g1:G8OPS*.cH>tZj$hqGJa)IEcI^R/77K.&,dYi?8XnE^B&18+9_hYu;u4BnqRIS%"arnRW9F_;HP;'H*WIdM31j9mPe%1d5;O5X%"(ZZHZp6)Df"FJs^j$p9#rMoslo?["#Y09rtkX\(IB^Z]jU[FNmRL!J*&`kL85ZZ]BPo9K$?G#droge"?Sb3_W/F`[3b%LYmb@9&3u@puC<rWDM'*33'esY@+0&bZ)\6O?=mi[Kl[QNl]KOoO+65,G"_'lp@5gqZ"fkJ"J`O=V-aWV8C=YBfVHt7q^2emZRuQ%S"=\T.*+"Kf\]$$j;:VYa`2kOi37@q4b\>kb2g2>Eb)u-]imBXrrgSg1%-"bfF`cm$#U8Y`4W<\pb_m#UjqQ0Z@Sg$4-`5g[YeR2%dBe.`gTsXlCE"-f)`./FdV`nZ_[^h!OW@([iQ[qUo->WcgT&76d(kdqlS1D^JO\!n0+7,sMSe\=,ekDek0USaRB!IB-Y:QZ<R>!a%<`SjqVVrlce:*u@P%,HhkV2Z#VEj&;]U.9[-^gJ&=(Q"B@#Z2S:fFp2)kJhM1HC6MjmY@TN.ioPk\,pt:QmES0U9[Ba>$ldW>PT'%][Q*a-'eIn,]CjFZfkUnB&@@k_%LZC\%hrIUITV"nEBhOb$8h$ft:LY339b4Ao7N8X3_NGk\AEZ3roCXOCCjDc@KDG(W=PGFBd/8%f3@-6)hn8rC#7FK'm?rYB,r)KJCAejK@P*gir\'m_'ghd9M#\%W$F<#i9JgfL.ZJB"`*1PL.ZJBKe30K1K9O+.IMbO6)Q!u(@T&\%R=:paEs1*LDu%Ya]SoK2MOP:)!o0&Z%1gU%HkQmIZEJiTim`:B>AB\9DcM7s%$s^_XK?EIV8i5!DlL!#;5q'p;0Jc3KO4.*E-$*+%kqpbSFgb_Ao1ufaG\RQ5b7DdSlLaY\N$c9G!%2KB1CnIC*#t+hAWON;'pCV@YKqV-hJ"6KfV%Jf1Ea9;85IK6<SS<A=AaC_.pU.:%)d)6lDiM'H#?P0>Hn/HDiAYG0.qjWp?^=7pLuO"Oo,JD2]BUn6!a^.`81<?FT%HX_JqcbraI3YS&30qcR%*)sY[76Fo?2NfV/Gkc%?@Jl$e.nC'^e/5h)n"IjS)pl1=(h\,.C+N[]Y!9<a<p%;@DJ1,?k`-g3$P!rGL779Cq*n)-:28T=6B(K%\qs7!H0M]2@N0-W-f'L%dOoT]ng6I./EDD-)e2R+],0Ua'G'VDS:sfdbec\;"07=CG)V-ocmD(ei#BIedOjM`Ag;%T`.FV[Hn\CRNuWn=Lc5AROLZs>&X\C4%N<P"n?qe/UeXP4J0D[A'Qud%<[FF:O>-mdrGZlYS&4k0H>T,+DN/3if(kF6[4H2dlBgID;6=CuRM]n5X@7\eEAD:XhL,#^X.4ClH%-Hbi^2'.Jm2#F>/`Hfm"G>2.%9dlc/*G'fNaPfr`_@TIA4r@Oam"ZcL,"3oMEKeNT-+K1M;MWlFfZckqfg_#jkN=`F2L2cUqg+R<%"g32SITfpKcI['L7D70>cUHr@Vm_-%EFMR7O1c(j0+q&U?,)oF-XP*&Gg>@Y^1.?h=@dgHkJ0F^P=?+Fk=^7fp?L^t=*87hjTW[f%^dik-G]u8H*`1`3K\V2hei@8`T0Hk/iDOh/=l&7A7Gp4\pXNW@TBj4t348YB*6akH0'pE-F+3HfIsrqhR[gd`,Q@VnmEUk_%WHP+%N/f0hY.%m\^bd*pBW_4/P]b\DSL7ED4#0Y'l(VZB:QbPb<0jG_K16GV3JCeTTU4PZNc>):p?h9SAuE.>k+*V<n]@&dZ/d%i+tp/#%Kr(Vi$#1S:iOInaKjg:Skb;=$M\<e2].hoBRD3"p)Jb\ndAH_AS#$LOGNThZs1<J"="c1O.Cl))VgEg[o`Dmg\?cOTJ"<K1Lj-HV%Vu\7el1A3O;PDusm[qQ,!p*\[R=8)kF_F%<#DX_RG8nog>omo:<M#ZbjEP%nq<*^FrK=d4W9oV+A\K_IIQJ&smd*tu/2,VC,+%@&%YqF4;kjohaRJ!]/WnF"M-i!:8+C%+4>\\@<!MT`YrDopZbFFVCXa0TIl%eE2Gk"lb2(.6=cRp8Nb--^Bf5+1m>JB]-SMc=FS=gdH%IOb-6@llt6o__\_B[ni-TGi-*C+;<b'3%?F:PEA0k60?/s&huHUOIDuq75:\n]QQaC_i;+fD@cQW1Z@ne__=JKBf(T2^PBDIhMSg%5#"*j.ooj$FnA%VdY$0$/?YJ.F6Nd;3'A'9]DYXfXl!g$Wnfo(,q->b4Lj/uV3fW+mPClTS=W0r8C+4mHBa%>a_(b8F%T&CUAo02%PPRRpN`/iEr:cVB-m7a4+7s%RIJJk[rf`YEoO7Uq;+fHu`NteF)L:/#jKtqSGt"%doN+XP?O]A#gp.$k9NU;f+j1WNF5D&^RK;dr%Ujf/9]WGp_.;rr*"]1?..u%p4r@4h=QSlMD^b+UCFl)6V*Gc8_rC2E%UM,e=q^D\W6:R?(&<)L<rm-&tN#k1artU3:UomXue7m'#%cfWY7f7Z$dVa+2P]&FU<BmKuCIVOb+f47=)T;92"dMupd%-@LS\,TVG>C'U5]o]1uQ+&U)i*19FGk,>4o&M[TSf#WM$Xim:VguEf%S"?l(W.sAe`$s_;cZtj%^;9MrVVo2i`kQ[($p-,1P3RTd;Y%D2>96=;)*`<</jK&\p;Eid^Au9gA-s^tO8qTeXiZ`-gq%'??8E97%3-q5=<ne[K&nEJX9OpbCbIEgY+%-Mr:0h/6o;[A]a1]gBRXoe%O?'Fj"h#$RR?CWO9h1sDZm.(JIUC?8MQF@"#CMr*<t*p#AP-:V%0F"nsUtD]^bYSc3?!/t&R:VOrkRC24K8[6GOX4Jh>&Y>tSZNR5l&:4Z2$6;P\GSqCr?)f?csma*XFp&;jpabsj5u4u_c"oZ,"n:-%<Re"!$PYs*E.Of-hLEGHBo376V;s39Tc6T4c-T%=N*q/K>;b5g2`s`j,+3g)1iJh_nI8WH6dg*qG?3QW9HGNWA<tGlc'?)saBME%%AP%'6CBl$>1_dY_1rln5dJ#%_)JWO*dN%%53iK'p%?;28S59W5PphrgL)aH=h)PabJDqo0!q)Pg@]G%DR7sSh=9cd;DTXH#;^63b%3l.eh>%S[F:r<G)VQ"=?`/l88So#T5o7l/O<(lDYC`or>'c1PHXEdGI9/GdI[*4(C22#gW1i1@.rEBUpQQ_h**O_cuPX@:`,j<Zi%6af:9c*3-7ki=.Lbu[6\N;DWT6A!sX<H!(>+VYD740M;c`P_)-E22I9-k;@*;_4,"PE"_?nDVebPH*k0`Y"T(Ab*1eclS`>1-Ac<%aP7q39ua<1+cm=:1C<!>:>;(7`F<4)(ecr.bG5ap'HIutZLjB[Wc$;;BUP*oFG#V!1h9jc+]&FEQ;6]n#ks:cn6eNV=GBEbf`]km%,o2Sp1O6'PbdhI]Sk=f>:"du,U.e3<]\O_DZXjYD#'ss0!-_&FiGiEC$)f0#e2TQ6Pq1TQA0MS$c/MT\^sm$(SJFHM!D>0sbN']g%':DHqUb*%b$tFlkfVer>5qE3kP5lf+1;fG(klb25:aj%g1<g"gb85,mAjm>!>FK=3+\P^,^,$)'UG4bs5se+#1b-r\fFm0]e`%F/%(/UF%R@[$,'Pu7I&>F9q-LVh@A2"WO0UMj)7>/7SA(#Duk=V8lEFfgf:.l(_:k*S)*)p*tO&_Z>3!*@:2".5bAe(\[mZIiZ%&H^R%?s5I[<n*a:&Vc2Rg`fKj4)].sHD!,le4`ShDQp,<Q9eDriA04i<4<9./;4QHRidN^UM6Sm`!Qn^)jSMJo18.[Ll7rp+Z^0+.g<EC%Pc/-Jj?9Eb:eaiG[\TYl5k)A`BmEjt=E]6^;H<gdl2o8<U,tJ=G=%cu'[oZ(BInjU8BpHkApAV(,>4>JOH;JqW!X%n=5jY6.<A>D%[,dn%l&J-."-eFY"ueIkhRR\a2=tJ>QR/I&Lt0V6)9A&]Uk,n1MR=S4i@IAi(gKX4W)[IDi&&n,m#/Uii!bUN1fiX5@`d895UBfA%!OTrJG7)EEBsPi\dIJVm$IfljB.1#:eTN5jV%-WSE_4hJNh[5PfNO(3D#>>(@JUIM-i09,#uj7:%O!"M@9m8dkY>#H$*r(i$D`N\%0*o9(O>L0B8:aIl6G.-H-$6S;.QhDs0G[ZkD((Mt.Y]7%(oa15OW#UqhiM8cLa[?prTSZ(#tJ!#R;%54!1R#`p'Upe_u7]qlp>M3%.?#*\PI^p\7YoI!Fl('q=b[e\:u+rmCC)[I8VE!q,`6SuDHk&d<$fGTP@3(^a?sPNd'/)b;'In=iX1Yu6*r;u"AG^%@8e=JB,NHR%OCXbM#c&CK8imBLE`o*UK4M$9_Q_[9D#gfTAD(`I!-F[=(8>^\p]=&=NKCK,eJ\]onC]6K<@356(LRku/W9^*UiKcrON!pb_1F>S%b].nYdI*uA/"uA[X38,a:7:G)$:5?R8gkB7,$C+RLsc)\n?6Q:AI!UNlQkfKTI+d,S7K?m3Q_&%g#E[>,$VL`i$,=*Y\4G&\;\nM%c6t[.4"rErpZfgB[M@PlHZ^GNW^DW-#=L%rbUETmK"V7m?(`t/1jPp,J=+ps:@Yh?Xru]HL_=c5@Z&Iucd@J":eYH3J2=Uu%aW\=%W(aUAh-19O%?k_P@S4H#::H&4k/)dD9]@?S\G6aq3k((,^hnqeamIBmV@+*U\I1BdQ\!h2ZnH/k25htIZnGe+ZnEoX<N6Uep'#[e%alKf^^e5,CVL27]P/]=/(-AIJW^s-m!Er,nH0'sAE"p6iK;MI7I;mol!2E^u4k^_96^B8uqa++^dg](L6A`Z0P\=EK9rB7/ZnDuQ%AZM?pL$g39jdGfGTHrYk)MC5O-d*2Si*BD`O8?ie727hb"jn-d[YYpQZ.#Xue1W:=gob\_(R:XB;`OI9Q?_W9.3n*oPphfsE9\89%ULkk'^&XA!fpqa>\8@M[[2u2Rg=I)'X;7J\V?$mqI8Pi<l\7q,)D]b%$EnnUM5H[VVgdG7=8f^A<;f-N\n,mH(Nj@F0hJc+a:/b5%@G2N_8?/J+H52DLGJ\-&+C6&8jD.>aCiS/FGZ:CURV?-QgSW81?f3<&^.5R!!%0h](V!fq&"&,`J3#W+\*SVqj5dlE/gofeg7r[p%0au!hr-WtP1=J1Sa@/##o4]C`p!9Om85_DAq*[uRXNCBf3[NR/3b=+W:!@oY9+o/]4T/,G7Gae98]5Xl+a<(k)':f4L5n7C2YgNI%q5VrmV_)VY@o%SF>O/<.6`%UdKnnG4iPt&F3EU6(E\QVIa5PKub/$,kgmo>_r&LGerWuV:?arPJY]qH"/]uR``[2(XBI\(?9p5TE%KG?Iu[Y66RQ:0ckQGs_[j*&S,N.Z\#%3^a3J1$lDJ70`^C^Led?4Leu!5NRAi+U4O*jDe/_&$:uOu9rsL^)V6[lZuH]&eJLfr>sM%W_g3r&eEO@155k.+U:Y8G8r4Q9FecWYamfEcQ!aJ;'i$_OU=_PCTD?@TNs2(8si'6eE&5r[nP:((MtJJ0"6rbB%S)e+qh@n(4=];%>NXZ$2R9,QSZXeG]::NaFud49H&ZcBABC\h>f?:B8jQO2b;ae7N.R8F"!cjmEobXl_a`eJ?XL;Ofcc5WL(UE3a>d%)W'mn-Q+&$4%N65.8DaFcIQ1!A%>_us!Gfm7=bI'`T@'2_+.!%XNCRP?q&j&$7a"E-&1e5!`QGhF1[Y/nZ;S:i%"p76U@?QEI`kfob32:Q;*#ppi%3I#SUj07bJjl"npgmJuYlnQ*l>#Yo'G--<KD],t+ThJB2)?[kh)cVD_>rh<)jVV<f7]NCq%V<)GE/$Bg,0Mh2$q</[f94nj1+#q#%1p2kUU*%l=`tN=D1ji"+F%d^>`>Rf7@VF87`eHK+Z)A%$%!0tTUHf90-p^rZ(,e(p0bN*gk,*kn#"hd,d*!R(JLk0f#*?@u`&gg8%@[N>cP?#=4GQp'=QpZ^Fl5mh_as7aS-AK&?bU`:>\Qe&3k'S':8T7<\OZD&Ja8O\5m?C`8(as!OA'5ho:4e1!msE]A>36Z#\nU`C%&:SJ[ZfIdtU@O9^*loZtTO:JZbnDL&21m\n\.V:XEb30C`sq8[.3N%N#m-!AX-0Ff@bV?r@1GXJ>fR70-rKNGVJF1[i`186*>>s)%9QdQ>0U(KMTPKp)A2<bDDuh/!S\BjGnj-$H)H`9OP\:^";Q3s)8mnO\Q<SOJQ+:qlIFjbUKC+5[=!_glWO[R]7A1OYF=7K%+B9Ta%JP$W?Q4VpqPp",'MAFYffYsn[GQqsd"9L&,A]gBnW;%"dQ<Wu==pC:U8K+Lsl,X^2XP;dc8R3\XB9?2?4@iSFKG(IaKdMuZRJ^Ta%8<iAq8h/tHG:l1>.o]:gf*T3H/1f=Z3/,`t1d$dFNW<e'b6'`Z>YKFc9F\7:':7+K9!AYYW=W3IkaP5G!.i'h)JkmpNTcJH92-dQ%l`0<+2XkBSc'=n(8[@^qW>8]?-S8g8:in<06f(/hS$$#U,o`K`S]Wq1\sg*]RnBU&J>a\LV!Gt5[BQHXmW9?tP'"m?h'$c0,Ve!A%JP)H?I2*!dd+FH;X1BTGJeEe&:0_u#/[JiqSs0g6B4XfmVo%B-AHXfr`.jOr$'n@]ih&aA+!itR#s\ZTO:IE2$C3\G`EP\'6$UO'%<m/pi^m&4W*U-@sd6<A#OS<Fi#g#c5&:b]m75.L_OIRq8BF,gte(Hb!C?Z)[?%^f70I8LW8[U/HT'YgeYq8S:'M=&bEC@K^:C6_\%#a)G;1q/^ffisbYOmZfCr.-#LHWNd/2M@,?A*S.Z`RZHahXCLdXPjTq@2p/jc.@QDBo+;ofUDr,8NeEFSJ*9dFD?Hg]d['88JEYe%2h`c5]d^P<j;]]!A1FbsR1b3B`?V&[TI&7#5[IB"M,G>E0L-<f[?AYU%u=`B#-*DO8o@/hQWk[!KF,!sl@>"c]]2CQKUjcI(.*@L%9d4F[^C/G(?IEqV#K2lfIM]Y33BO$mhrQ;^IM[H7V03GjZCo:7m,Ka=qp^]u[oGN"N75d_#b3[DO,E\B&8j<tp?Y.s1*h]994$.V%ooAF._"KuBOY+/@L3X)o`\rZ.?NQL+!/0ZV\0\:Z_Ntkl`GLJ-2f=,*'BB564=(e_k"WD(F+#YMpdR.9=pR0K^.2CZ*F5t[40UCJ%PD@8""WY%_&nc;]R=bU>,mR4@G8rL]TH'I`J33A^T0:6XdM-;e\ipp;`dBC<L.I$QM#\ijAMG"W-I<n^9_\B[T*poeFLqTo\I^/%%gK4TY++PY/1lcj3M@>@0qI4RYq9lCHf].Qt2D!0D"AB64`GJ"n&fj9"G!.H+0f?OXK6UWd<@XhAic1Y)KocQ2\:B5`Mg/=Ij$H"6%[_g5q6:6L,F,M"Tm9!q=*Z(D#=lX:Kb@bfV&YMNHBMa;+>T0nT/[k<_YI1,<99ZlV#[@[+<a6O4\8Y(VN>#]\$i73nC*E8[!%;$+%3*ZHm-0^p`j*?An4[>6DnlcRNCXLcJEO\i%8SH!6\29cD]jR.^"s/H6m6ol)>`[&[UE14.U`!^?LrY4\F7p/#QO?>QQFNIkGW)g$%i#(B;R'ru?XE5Rk`DZM8@&VK/fYgGg0#5aWkAgS]AY&S+J=ff1>72>07-8Q)YSC71lo%d"'=LfK70d]B-f^aV3?^W6)YUZtAEDM$%'n0.Mb/JH>S8&\7bggCj>q2^VNQ.;>NJ??`XRN:%`-<r.aR)ttm&Lt,E#ClH2@=oGrfQ10=umjCTCLm+M&J("Xb<,TX=eFE3+]s]%N*n00:md&Z<M)-Y8Os*.?7WlEF6=UXM]G?;meJUrp[G?0B0`D]lj=S:$.gJjTTU=#`_F*%"E*3(L;fW<OOU.s??=,<`?gL&B)mju%`.p-#LeI'*XW:68BJf9Ke2/Xpgc_CSh%EdEo4>ikE*HeKKA3#.?ar?U,K'bU)(P(D>]U+78VX&4[:"WaVXQ12):L-TGGqsLnE,\+%Ol[l!DQ^nqSQ"\/^hLp,PLCP-9a<'Ok76G*]Qe)80k\kf'%-KW3Q%1<F2e:3BCP$l^h`/h`_%YQqkTW7A&7"h5(3pUR\jl5?s&9^%ENC$W7/&RKFc\fH[T2<iB"eARAq1XffS!B`W.ZL&0l$tcFNJ%;!)^j!\$6$-A6n<!)$GJ,BV'(+:hGl-daX^O"XN<lfI;>n!k2si%!!6\p[q9$6'qMgG!8!\+[:UtcDKUlHAl+>@9KLIfED&9kil['7""fX\A(D(\B.+g:#(Y.4N?&jR`ZW2piE:n<1Opm>ZU8LoIZ)?Q%1R8\5F0-<ZB'UdVbZIW5JJg7]M/1>FA^m)uFqfWhAh7%8[CjKf9JG59:Q-/&#e%aB.6s5slIjej3,mI.BIt'c_/66k4CFO_@g4mr%$Zj@UYonV>i/O-*5%MZlAJ$K``f+Kl,oV&>`XFBWAA%L\-fYG8_oge)fMYDhZD_M*BV$B-C(dG'lc"U<F)"5`HaejTOOHXF2F(N?%&r.34"[n5"PHZ`Q=HMN\(cK:;W4.=:bhFo57[e%ag5<KS)&NTbK;Cu,KPANq.U/SI<u`[mBo5N)746JFROe\TL1HB$&d5KTVCY]8%3Q.9JZGHBYb&GK9DOmS:WRQ>]-*#'rDA)8qmahLB)lumRSPD-8j,b?*^lW-:KHPt0p091;pbWCmO:l#IfU-i!=Pf7O<';Y'i@^*B%j287gF>K0kQ<5l\Pu6:h9VnmgY9$8?3DE\T,o0O?5Z3bR;0.H0^&^]gH8[Z^W;JW2]R\CE-Kd6`,VaF9CH8oTLpr<M/1+tN#l2/B%C6]5D`IMM^+CBg0(#g/&-+ZiaOt3=!%H:>6,p`Bo-#=BpV.cqh]JCMI"i5\q'dpZqY>j-]gR/P.;+0#%))Hu&p4AtmK8D/3!@]g!%K6`cUdPe)15mG1*D=$P6/BO%>0BiG_0-^MG9'L9k&P@ra\e7Pai!k[#eq-l7K4]9mr-Nh:$/:SB\#8P'VY](A3uh[!K^FRd9n4F_%+"T;=h5[>Eq(nc]k2$.u-#K)JAj)/8blmK?"MHQW_;%LG#Xq;>hUT_h7&s"SF"/>E&LT'>YFM)@8F42?*QZ_JGcE1bcQS^Hd;&q4%MkE@'L##JCL6Sc$ZoiUL'Ysm7C)'3:9<&m/)\=t_Q]2rQ+YTDhL-=C7jg!g>&6_B?J=2fO(r$Ks&Pfg6N#m7c-qGo5N+"OK^d&8-%]'/OimP.C(ND55.$-7]nF"%*&*C`"6R9,.`%W83nbilDi4dCiMe'lpE52#o*VPn6Zm>/40\rdm$nq8G&frMmaZ\9_Ki=ejq;AdgY%=-%4$o.p+sY!'[I'(JRf\*Oclb.oS_B0J)l/U4'I&Rr2u/V%94U"1N?X#F=1GHPg+.4O2L0KXM&G#M'dFInr@.VGM>fhHIGQeG1p%Fh9(tUT#iW!PCrCjIPQqs%_#>HH-TYZf6"nrZJ!WW^W'ZEmetZH#MMs<_ut>(hmYMj?,7M"V**E`A?)L`uQ\hC<#V"2-O,;_D@W,%XL'k'"[oZ281BGPU*^Rq1EZ[0;hpXbKJ3c\)_FJE/r=%X:F5Q>#i/cmhC$p`Yp"+G`NB6X/#9kAWb-61WX8dLHR9[O_uLI)aL#!S%Xd10>NtJdmg(4G:9+fNppl7,e!5XpdKqf2Jj^<rH-<r57&6XB!_*8)bd)5t@Q-I9gKhKTJRuNh<Ui1hSnq+t:1R$>CKt$&'\No4#%cA@5aQD21Ke]P_LGp]ibkr0J5]pk7#@#Pn?dL$<=XhX#goPMSg@8s8`gXrpNN^bU(O$-\ua..lff.D_76"796[/rOVm1*YYj4aA2%D"[8KoFOuU+`]B37@7tNrY=@ja_m%E;)'K-*g1[3OcCl?>@#7l`tP%/Ht4R9D)[B11XWBI_koAlOh$7Xb^r$r&rs"7pNPM)8P-_$%GO.p1\L;VsI.S,1(_(JbX\b!;'Bst63<N+<OJmDH4FsJWgBLtHTn4>0B^:'?-8Eo96ZTUTaORC[7H\6?"G[Uj=>)Aq1a.%R6l2Sq%NGr3;+2GDWo#Y=#HZKX%-%$B\dW"Zha%X(*-PCpM,tm4&!"W]p&*DM$/F)=G[#HBKHL+?^Q>k$k?\s[)d4q%JQJHR*O0S&[)*2@@%qo;S&`Y+-cU&(Z*6p82fS5.%7lZF.>Us[qD-X<O:OgSo5&SEd<AgXiu2JeZ/<9W7P17N,BO3-aE2S[qh0'Dh<1DbD/aZRqYQj5B(%4@Ls,kRH[Y(`70F`tW%Vp9NG8e$4SIWUbijV(IRS8mCLh0:V5DG]VR!3'237et'T7QVI&@k0cQM>W1>e*HTo(!?FYF1B#C$Y3_s$%0"[tK*^ba1&ED1sQc$74kG_lE;o`.'F^opFA[j;$G+2.>bTs*1$h'HUKQV5h3-3b)GP[]M^(Ou&gsbM@2j^!mgKZYK@lri$+kp6_%bfo0bam>?sb@ZOahHG)$lc37RAL]Z4Lu^;^QFFP4WJ'F`,VIb6amA,n]s+u4fY"'Im,_C[gKYe->K[+cA,2GNc<*92(,fgle@,+/%?b_$^o?gUQFnP@?4rJ+$Q$:cpI[c4U[dm5J9g'^He7t"US.iXa*8(MXP;(\10Hd2H//>FWJUgKZ;.4*FP(br00S>.mMK8hi+UP]V%1@[n6U5<24X=A2Y1c3fpm]Naf'DA%^3I:6QpIPn_Cg$NIDI<Npi`NBna'!_c=N'<8VO3D7SP9PoG\t/#K!W76ohG!HgqYhVLVFe^%/DAo?5&R)1Y;b-=*,gP>Pg/T^Lf9VC`9c:"0Xf&$m0N;H[50k7L,+t"QGOt:#DUU.dshFn4.A7S%L;3Pm"')V.U^o:<)j:FoiIs2%9K]$V2ZbjdG*Ef6[(GiGUA&cn^E72@lZY9E9hul$hHa@M:Re:pf40U*NO[q-ba>V=g5Oba3Hf;?2U`K$:+gbT\brL)a,9^Y4c.gj%Ei.B$[3+boYq1t5iSQNZogsMrR^T&X_g>A"`%95Ec,#_5i+>^4Q<+(NREH8m=lPn>%K33k(<&QLM\!63fP\cri9BU0dmMMdc%g%<%n7QE=.C?V.V!/I2oiTS0[1ZNmN9b9I)i*#O'1h5^'+X"+[]r!nh9]c]m`t?B'=F4@W8?NY/$uDkr%C\h2!dol4C`a"V@a^VP'P2t%VXVO*E6=X5+A@L$eme-i*qmV)_E'9N`HV/?9Cu&g(@if"Xn=K]UC^U4GqAB_WiOe.:g,`>>^*+kFOLM_;Z0)Z!cF3E6,nK3bi[@A%bjf_;ZoPkBhGSVL\sI&i9Z(0kPa`&dY`Ck$^YR',*LZNuEBuc\`CF/.N[#d>dCMYCjiFB^_SUgO]4<+u)i(nB0g_s!*fla__Ra+a%jlJtj6Q,2B9m5&dRR]VK/G>ZD=k>[:V5tSYXulIT1(6WNdRgg@4))=o7V@PD?5RX,c;V\;5#+bi%_#_f"f2sFVlA<*4*5DZNG`6q%#J6hWVqp0;k,)j6I+,d*nlBqjT<Vbcl9`/bq(p1Z=VtB(h/$l]Yo>7EdZ@NANK2;;R7[Ap=^Hrj+st0W>)1mf]s3*G9@jfZ19]ZK%>PFqRUdQHrW(u&%hIP=SAc^"\UG`'N_sO.5Vcf!Nf2o;Q(PeYq5oPMlL[:^OCboJ.[$e;54.KOi/S8piSNQ=<HfN/r(r\%DRH;I7%?K!R(iA',[Q=><%]kc9dPP3qTd#,9+.2DBn=))IrF=uq=0s&59%k>_T5K@a,fMj7[>(@2=Zc\!R7+A5K7;IOA#K!ecRP5eV!MW+h%[)3f`/6I9BUQU1_aC#]'jI`?5AJ%4Wb6NsU,g+&Hfr$V#hNWDE`EY#Im[PY%#Jbb6.GG">`"GRVVIQ5fo60B#=J>pT4dWZP-pn`C%JHDI4J$;i3el!K*FP9G_WN9%YT?>q-!U3nFNN?msi@dDHg7G!@8-oIGgMr\2;MZ%LW.>XnD7k7:=B6R!X/8Q";V!DF!bBfW4`P.*%^P-<K0^6JWKrHf&dWm=Yd0(CsO658?7_C9?]])MFHYSEtRGN_-#,(TJO;[n,E?,ZdMVCeO=BPR="&>G>MK1X]1Xl<KanJdLNF?l\%g"^#=K-T+<jk\8l0la@1^RrZdPV",jaYmI=Tl"HbF"jqG*nDF9+";:OlpHu-Q!IA'oB")/kGA(HD0@pbkM*MPo,mUd^=15K4XBe$%p2)ue`CF/.()>VhO+bsX((i2eb(?i:H[*d.h@I>ia)l;WrSe[O@ML(kn$8"sg0>0AMB'>2\R&-/]#S_s6!9rn575;7T8\a*^EVfG%%5sGsP**j?=;uU3b]U3tFa^o:c#&_ENZ&t&S@)Abf_]TG2?k%J5T$>mm;*R4VSNbN6BOJ9WHMO:L5(f@,_S26%P`Op[>cJ9R*uPo%PIg5,(o5H9,i$cmklW.l.!F#Jc4Dd<#T[q]7@!Id/Ob@UhYOQQXeQ4(>+n!g2rFnLZ-@mVct:bpcLGog[5kr-hbn_M425:^^G'[t%46A9oJ_2*&[dJi9lX-RO!GMri0LB`iSU&;>U^28;"m!P^KgXY22hj:=gS%hE37e\T4.MtAAO_ZXW&V.O2iChoUhY_Q7=-W\VZu.t%>sktamG;,<i2!8"ULJqTH3%ns$ejXuX_]'G^)SLZ7@W2(l7J4/JpXq5cIc.7BCL4p@3;r_^YR',Xhf;_kja^3n^1Bdb8O&C4m,QJ%3]<<^kQl+^fY_2Yb`9jb<)gU42EeHia6#FR*rgP13f\__1rZ)6(f(aqAV]U,^O]Yt^jl,&)#!f:=N_D?G+]^1)e9=+JjVHin<iNQ%^[$2kgR^;C;)dGl3c-fX0]7oa+:(6?D8k#!j!b%Z//6iPE6CL_qXEW7@td0bLKMifJOh?:edO2aM'^n3KJGAUH80oPXOkVc9D_/O%Y@k.Mk;+-,1FZ6QW#:L>VVUL'T"5+h24174>K3%"(jCZ-`63ZC$T_C&9.^I,aXeif<(LHY[(>;j(,-f*d=Fa%,%ZH3T[Cc$&?/4O%,'$IJ2j9CJ,rCgsW_uA4LG]=3SJ:g-'VqG9#I?sOZp9i7Yb9F>P35hsjuB,Y\[OlDDpDT-7r!*j2'H\Pm8aa+%#<kVY,Fd9eL\&H%%F%Anf!3g';tn8V%72tMV]+1<0i!^%X<<'^b$/EMF9A$u&&_d[1JnAeXtp2EgR_i;Pa"u'aA/bekltdV$$8mhHOAR3[:GaIX.MX&%Klnfg@TKYHW/i><iAo%`e8nB[#0k?'Kmqcj\4j\T(#7uL5%n07e&llOMgKqXKb%,Pd8k_>[e-Wc,>^Kcq5V'cf^lp#G:\ualj/M`%I1,)I;Y1A[!QHVKg''<0Gj2O9]M;.s&n-N[:??M5WlH,5]25"*:cY'$T[I^$UoKr$.ir]h3!:(>5'WQPe<Ihe29kReOQ'5A[\g4&%h1TIK6H?+l*%n-'Lm7Sh7MoO9pGOp5[:?uTDFMk%@5m&lr"eB1XIIT$rt2!gc/BrY32oLV=cfh,&A8m"/TH.&6;7Tk<:+?5iA^fS%enl5:H0?Ced\:!$+hZ@'oMVfc]>>f)5th9?5T*i19`"oK?AK`?[0r]%+O\jj.o4UpffA4:$Big'qL$TQGS"@a9%?/6q3s6YFO(oF%9Fb?K);07@:_\hoG^<R4?SB5?;)(KT)mM)\H<4uq;')<h;459),kNsBR/9lac4Z1SOW[Si_pRk%[W1"q*M)f5U+T;(K*RXpF5-V(%i$rA]mYRuS%(Y"Q[LIpm?.\HmE@kGlACgY.c!=6gb((rk^=CHH@eHUX4mps/hsOcZY><mDGLN<J@;<\cEsb[00JA[n8ZMSORoF5"%P\Vi9<cckbi$S_SkW'Fjq41IW5gY@ZSW!nCl<CXO]Ge?qmXMfP>d>#&&qqu=Fh=spiV6AQD)09QhEkbNi;:$>:oL`Yh[kq_>.Abm%FCj]m$9A`@KQ"d<De"\1]:mKHeX^@8,3lDfkWVmi/%aON[=5C!B"Oci%akYmOc%61c4m0.QaR2LS.iglneoLrH_#h/TBQnGm#</)%^c(u=&sA:B%)MeHI*WNk:mCG+W$rPAp_]Cl[n`kijQs*9amH'bWY_h3W?,9Fp[6s!Kc<l[(q7V"KQ#p0BarfjfI^r0mJ\(e(KH7T%Mt/*[\'jl[mS]/*5!??TYIs@WKhJ$WHk>U'H$G4O-lmN=TpVF#MTp?J3(m?qhnn0\-m;BYmi**XIXNs]DYa]4InWS+nI8'cT78/1%ouYjFkX-&%+]<=oK'Hr9OJN><8bYI64Z8RIr(c1=]E_?XH>Of/]#7oZ(it6K;:Be=el'X9^rdMY]`N<XN9>-;%O0d20G>t083B(]%[#l0FRtZ-:KqJt_n/D,NpnICZm(>u#q`*4YT-KhUePJP9eThc4^^Y7^8f?P0mIgPI8)l_TL]X"DSs[FT-9$T,f6ZmnYc^CP88\1X%Ok.R!Y7"fB8-,i>d8tdRCsS0/-Zd::pSeJhrIi1IdBN;g2PF;LL;C+t6:!K1;b9)0p8a!)RhdtGa%%5^_ZWn(&eN&Fh[k\[G$%Uq%`m[amg4fA1r-+/pPTVuO8<!6J\QKX,is&NUa30Zt5-0nMIc9GknI#^QI3hoL2UMnZGc[E8g6Dh0$o*P=+&Ut,04VJb0[!:g1e3WA%'/?c&phc6X9YfgKU:nT,Ckkt)#h=8@j7*\C.uNj[G#?U[>*o%tr0@N31\go8Cc[)O2F*"f"3I*E2VkNNnZbXI`a4M,b/ARhT:fo;%[9fu8/86f_cB!pgXf?If,1oG*0\l&B`4l04YbDgl;GaFV$npKX>I%-f2!0a84_CR[_N2Ob/<DOl,_nQC;-;[b,FVjG+`L473EKrE%/59j7?$WR:M?l5eb.^r+Q],/6*iXHtlN1MmMMBS:W"Lh:(/D"F.<FQ<VNsYLeKZ\u/(QLfhbWU*Sa*3mO`V*K/`mZf%cUW?;">"5%O77`0;ie"sZG,o7ck>Lf+@app<`k2RMV&g`7c68EkW`Msb0S\X_I4,59Ge5`D,-LJF=sS*G!bROUVV$]+GK5-UjD-O&<gkio&!5[%WU?(<<4gcO-Iki>QIhjX,A1s:&dPkE=A7FHG+@>gBCgHoIIO3^'57"5T-Li^BBL'(\7<2UfhEN4ILFkJ^7?/mU"hAGW+)2PAXC@j%N#M2[DM'DidX[M6d,h/S^lV:gjg$b6MHF^jb<iEN9NP@(E+&pim'Hmb%U8,_%UA@Cbo4t45#tnaU3hmjN,Bf-2PZ5jT>K2WbH7Tu%OaMX,A.+lRLr*"\Wh+0bm,9P_0O_A2(pt`oA*9TOn9e)^jRQ>t2n'Z-pic[-Q2fB1+i>@F%+Tu@(R^r)TNAFg=^;C:!(U>hF@jn5%#k#m;S>1.1)TC"6]BcbXR">_l?FARNBmc4dgK;4l2k(F.-oJTB_>G-]?W3&O<d<8a]8Y_aU@*=FU,%L);<2Zs\$[RH`fmG!.,IC@%MOdhH:_DQjTNBUZQTF%>$FMQ@)2fu;3%\B7Ms[Bq1UGZ&cHZ3)fF;8?&?ggkoP7!Ea%N/,Q^BcgeNm)nJb]u8mTjOa.:@O5GgDZL%1[=(igDNk9k@urb1Koj_m@=4EGm*;R:4sD5q45pWrUD9J_jns_)hN+g\s;ef%65HD'1(-KG?WX4EMUYFN(=p/g[C(qomkhr;"so<%2nsEnoY'.MGj,lZIcnS\hhbB2$HN%7m&=RZG=L^j%R9,2J=^\.-UucUE39ikd6mTJ>RnHMpGS?,FkPf!1./jIY\)m(=I]%H0mF`J%DSIu58h`JYB=_1Iah+)JH*;;(\%U)Cp@^PB..L%[W5KjWS+'ffN-F>\V(IIFee:,/-eO@T$-/4+dl?f;7Q[)(5%hgjWANdZ0#[XW%kG`;tjt)_t1%,8$7@T=\3rr3hGRp";!$U,0Ia%`PSda^@3cDt'lgZt__f>M=>Y[iO)U5g_CUUsLdq3+"%-D(l=i>f4g2LJ]4*H;t%D>N:UG9O.FG)SCa(tW=C+flb:DQsNZ&/Kk%WWG@d8s]<O/F"&XGN:]97acC40O04]k)=>tJ\a+a5sUI^g.7G6'f.T$!E.,XF?r6>%H.-;k/m(8m5Ohk.NA3^"P2>Of`Ql*m`+*5!i\@q5U();UoKBMi;F.m]'</"6Wj5uP@s\h=ZCR6D/0j,\[^8,Z;KTMj@BF3Hegm0t%>;fQl_Qcgk1CqZe''38M(W]NSpth4smDRur0,bq&]Cu%%=VoY5g6a3bW0m5a3MG-L'e7\)UnM7D*IA^p!%]uhaP=c\@;V<N8*1lj%DK8WZ-5,-SHrWaDHe#$oa8g;K0#LBU0%Xtbd5H=AljW[2h"!M]1P>^OXh[SIjkeTc<L#qu;K@P)L[:-`bf7D@DML_o'lKOHIbJE.%:i,;,L`)O226Dpi\25R(3^h??lb0W23\KpH>gP]-p'CuQnq!YCM$Z*W.Hr?72h99ihDh=2E?FKHme1dn'C6T;2)FRF@!iVc4Qr2T%"NqN($kIQV1rQJJeAcqE#LK1>Q8#j/.:%F'f0,pE>er)<M@XPOO%aQ53:;^4l14eC1\rP=MSP(T>1D%;-`fq)'NiKFrQ<W,hF2$P%o`G@l8#W-l-B([5:qI@7iJ3PKbUnth<XSq+E!>eGhr?YZJRrN)]u/*]m=Q19n8Y#A&.8a5Y$)cS7=KUdCFD:9HH0.JO/1h-lfaJ=%jDTZZ]m`["">p7T:CEg16j7.LL!(HcHp!'L)0qd-1JTYLF=`0Yar`*gp]fafX0rqRop_`U\W#:A/%ih>p<8Tl!dYs;&O6<oB>o"X%qT[r]pRrW6lZc`9i:^\TI.CDTK_KD7lcD("=e#H^Bmfo<^\n"Js6BT0r6;,]rqc*+^]4:os7,mSs1\F%]AJ&5iJ2p\nIK"+q3N3'%lh/FSTDn?GO8nh5o8eD!j3N5OnP<NkHiEU3&&3MfohRgPo&]JHs7u9d!h$6na+*mCp]'`lTDfpEYnOY~>%AI9_PrivateDataEnd