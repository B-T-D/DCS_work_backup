%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 008x007.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 305 239
%%HiResBoundingBox: 0 0 304.8472 238.0884
%%CropBox: 0 0 304.8472 238.0884
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 5314 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF7DFF7DFFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFAFFD08FFA87DA87D%7DFD0FA87DFD0DA87DFD0DA87DFD1DA87DFD0DA87DFD1CA87DA8FD06FF7D%AFA8A8FD74FFA8A8FD09FFA8FD74FFA8A8FD09FFA8A8FD73FFA8FD0AFFA8%FD74FFA8A8FD09FFA8FD74FFA8FD0AFFA8FD74FFA8A8FD09FFA9FD74FFA8%FD0AFFA8FD75FFA8FD09FFA8A8FD73FFA8FD0AFFA8FD68FF7E28FD0AFFA8%A8FD06FFA8FFFFA8FD3BFF7D7DFD2BFFA8A9FD0AFFA8FD06FFA87E7D7D7D%FD3BFF7DA8FD37FFA8A8FD06FF7DA87D7DA8FD73FFA8A9FD05FFFD05A8FD%75FFA8FD09FFAFFD74FFA8FD0AFFA8FD75FFA8FD09FFA8A8FD73FFA8FD0A%FFA8FD74FFA8A8FD09FFA8A8FD73FFA8FD0AFFA8FD74FFA8A8FD09FFA8FD%74FFA8FD0AFFA8FD23FFA9FD07FFA87E7EFD46FFA8A8FD09FFA9FD24FFA8%A8FD06FF53A8FD46FFA8FD08FFA8FFA8FD1DFFA8FFA8537EFFFF7E52FD4F%FFA8FD07FFA852A8A8FD1AFFA8A8537EFF7DA9FD52FFA8FD08FF7D527DA8%FD18FF537D52A87DFD56FFA8A8FD08FFAFA8FD19FF7E7EFD59FFA8FD0AFF%A8FD74FFA8A8FD09FFA8FD18FF52A8FD5AFFA8FD0AFFA8FD17FF537DFD5B%FFA8A8FFFFA8FD06FFA9FD17FF7EA8FD5BFFA8FFFF7DA87DFD05FFA8FD16%FFA8A8FD5DFFA8FF7D7DA8FD05FFA8A8FD15FF537EFD5CFFA8FFFF527DA8%FD05FFA8FD15FF7D7DA8FD5CFFA8A8FF7D7DA8FD05FFA8A8FD13FFA8537D%FD5DFFA8FFFFA8A8A8FD05FFA8FD15FF7DFD5EFFA8A8FD08FFA8A8FD14FF%7DA8FD5EFFA8FFFF7D7D7DFFFFFF7D527DFD14FF7E7DFD5EFFA8A8FFA87D%FD04FF8452A8A8FD73FFA8FFFF7D7DA8FFFFFFA8A8A8FD13FF7D53A8FD5F%FFA8FFA8527DFD05FFA8A8FD11FFA85252FD5FFFA8FFFF7D7D59FD05FFA8%FD12FF7E28FD60FFA8A8FFA87DFD06FFA8A8FD73FFA8FFFFA87D7DFD05FF%A8FD13FFA9FD60FFA8A8FFA87DA8FD05FFA8FD12FF537DFD60FFA8FFFF7D%7DA8FD05FFA8FD11FFAF5253FD60FFA8A8FFA87DFD06FFA9FD12FF7EFD61%FFA8FFFFA8FD07FFA8FD75FFA8FFA87DA8FD05FFA8A8FD73FFA8FFFFA852%7EFFFFFFA8A87DFD74FFA8A8FFA87D7DFD04FF7DA8A8FD73FFA8FFFF847D%59FFFFFFFD04A8FD73FFA8A8FFFF7DA8FD18FF7DFD61FFA8FFFFA87D7DFD%05FFA8FD11FFA8537DFD60FFA8A8FFA852A8FD05FFA9FD74FFA8FFFFA87D%7DFD05FFA8FD75FFA8FFA87DA8FD05FFA8A8FD73FFA8FFFF527D7DFD05FF%A8FD74FFA8A8FFFFA8FD06FFA8A8FD10FFA953FD61FFA8FD0AFFA8FD11FF%7D52A8FD60FFA8A8FD09FFA8FD11FFA97DFD61FFA8FD0AFFA8FD74FFA8A8%FD08FFA8A9FD11FF7E53FD61FFA8FD08FF7D7D7DFD11FF2853FD61FFA8A8%FD07FFA852A8A8FD10FF7EA8FD61FF7DFD08FFA8FFA8FD11FF7DFD62FFA9%A8FD09FFA8A8FD10FF537EFD61FFA8FD0AFFA8FD11FFA8FD62FFA8A8FD09%FFA8FD74FFA8FD0AFFA8FD74FFA8A8FD09FFA9FD74FFA8FD0AFFA8FD75FF%A8FD09FFA8A8FD73FFA8FD0AFFA8FD74FFA8A8FD09FFA8A8FD0FFFA97EA8%FD61FFA8FD08FFA8A8A8FD11FF52A8FD61FFA8A8FD07FFA87DA8A8FD73FF%A8FD08FFA87D7DA8FD72FFA8A8A8FD08FFA8FD75FFA8FD0AFFA8FD75FFA8%FD09FFA8A8FD73FFA8FD0AFFA8FD74FFA8A8FD09FFA8A8FD73FFA8FD0AFF%A8FD74FFA8A8FD09FFA8FD74FFA8FD0AFFA8FD74FFA8A8FD09FFA9FD74FF%A8FD0AFFA8FD75FFA8FD08FFA8A8A9FD73FFA8FD08FF7D527DA8A8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD07FFA87DFF7E%FD04A8A9A8A8A8A9A8A8A8FFA8A8A8A9A8A8A8A9A8A8A8A9FD07A8A9A8A8%A8A9A8A8A8A9A8A8A8AFA8A8A8A9A8A8A8A9FD07A8AFA8A8A8A9A8A8A8A9%A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9FD07A8A9A8A8A8A9FD07A8A9A8A8%A8A9A8A8A8A9A8A87DFD0BFFA87DFD0CFF7DA8FD0CFFA87DFD0CFFA8A8A8%7DFD0BFF7DFF7DFD0BFFA87DA87DFD0BFFA87D7DA8FD0BFF7DA87DA8FD0A%FFA87D7D7DFD07FFA8A8A87DA8FD0AFFA852A8FD0CFFA87DA8FD0BFF847D%7D7DA8FD0AFF7EA87D7DFD0BFF7D7D52FD0BFF7D7E7D7DFD0BFF7D527D7D%FD0BFF528452FD08FFA8FF7DAFFD0BFF7DA8FD0DFF7DFD0CFFA87DA87DFD%0BFF7DA87DA8FD0AFF7D7DA87DA8FD0AFF7D7DA87DFD0BFF7DA87DFD0BFF%A87EA87DFDB4FFA8A8FD06FFA8FD0AFFAFA8FFA8FFFFFFA8FFA8FFA8FD61%FF7D52A87DA87DA8A87D53FD047DA8A8A859FFA8FD087DA87D7DA8FD60FF%7D7D527D53FD067D5253A852A87D52A8A87D847D7D527DA8597D5252FD2C%FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T09:57:06+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T09:57:06+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T09:57:06+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwLW/I2qXr+YRb2en&#xA;BNWmtbi1Z5HUrLbU5SuBbtSRvEEn3wqnukW2s3sE11datcQyNc3MYt4FtTFGkNxJGioz2/NvgUVL&#xA;HrgVH/oq+/6vN5/wFn/2T4q79FX3/V5vP+As/wDsnxVSudK1b6vL9W1m5+scG9H1EtOHOnw8qW9a&#xA;V60xVV/RV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm8/4Cz/7J8VUm0rVvrCcd&#xA;Zufq/B/Uqlpz51XhT/R6Upyr9GKqv6Kvv+rzef8AAWf/AGT4q79FX3/V5vP+As/+yfFXfoq+/wCr&#xA;zef8BZ/9k+KqUGlatwPr6zc8+b04JaU4cz6fW368KcvfFVX9FX3/AFebz/gLP/snxV36Kvv+rzef&#xA;8BZ/9k+KqU+latwHoazc8+aV5paU4cx6nS368K8ffFVX9FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ&#xA;/wDZPirv0Vff9Xm8/wCAs/8AsnxVSbStW+sJx1m5+r8H9SqWnPnVeFP9HpSnKv0Yqq/oq+/6vN5/&#xA;wFn/ANk+Ku/RV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8AZPiqlBpWrcD6+s3PPm9OCWlOHM+n&#xA;1t+vCnL3xVV/RV9/1ebz/gLP/snxV36Kvv8Aq83n/AWf/ZPiqlPpWrcB6Gs3PPmleaWlOHMep0t+&#xA;vCvH3xVV/RV9/wBXm8/4Cz/7J8Vd+ir7/q83n/AWf/ZPirv0Vff9Xm8/4Cz/AOyfFULZpqlv5iNv&#xA;LqEt5ZPamUxzrAGST1FVeBhii248q8ie2Kp3irsVS7QP94Zf+Yy9/wCoyXFUxxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpb/wBNJ/0Z/wDM3FUyxV2K&#xA;pdoH+8Mv/MZe/wDUZLiqY4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYqlVz5n0W28w2nl6acrqt9E01vBwcgogYklwOI2jbqe3yrLhNX0W01yKuxVLf8AppP+jP8A&#xA;5m4qmWKvPde1DziJ9Xt9MOpFY7xTHOttHyWFrOTglsXi9ORBeLEG6niSSab4VZR5SfUG02T67FHG&#xA;4ubreNy9XN1LzqCq8aN03NcCp1irsVdirsVdirsVdirsVdirsVdirsVdirsVSbyx5WsfLltdW9nP&#xA;cTpd3L3cjXUnqMHkABCkBdvh71PiclKVoATnIpdirsVdirsVdirsVdirsVdiqxreBpknaNDPGCqS&#xA;lQXVWpUBuoBpviq/FXYqlMbXJ80yCREWIWf7plcszD1f2lKqF+84qm2KuxVLtA/3hl/5jL3/AKjJ&#xA;cVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv/&#xA;AE0n/Rn/AMzcVTLFXYql2gf7wy/8xl7/ANRkuKpjirsVdirsVdirsVdirsVdirsVQseqaZJqEumx&#xA;3cL6hCgkms1kUzIhpRmjB5AfEO3cYaVFYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3&#xA;/ppP+jP/AJm4qmWKsY/MLzhc+U9EXVorE30SO31hV9SqokMkgoI0lbk7RiMEgKparEAYqmPlu4jk&#xA;tbmNQ4aK8vORaN0U8ruUjizAK3vxJpiqbYq7FXYq7FXYqgNV1/RtJMC6jeR2rXTFLZHPxSMOoRRu&#xA;x3HTxA74REnkqQ2vn/8ASY0O50PSrnUdN1aaWG5vBWP6oImC85VKsCDU/tDptU7ZM46uzyRaaWkX&#xA;mseaL+S6mtm8ttDGNPhQH6wswC8y54gUJ5dz+z75E1XmrrnQtSm81Wesx6tNDYW8DQy6OoPoyu3K&#xA;krHlSo5D9nt1xEhVUtJzkUoCHQNHh1mfW4rVE1W6jWGe7FebxrSinen7I+4YeI1XRFI/Al2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKY7iOTzTJGocNHZ0YsjqprL+yzAK3+xOKptiqnPbW0&#xA;/D14kl9JxJHzUNxdejLXoRXriqC0D/eGX/mMvf8AqMlxVMcVdirsVdiriQASTQDqcVYdper6d5t8&#xA;wzA6TDeaTo7JLpevc1lVriilljFKqVPgT9kHuuWEGI57nojmzCOOONAkahEHRVFAPoGVpbxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLf+mk/6M/+ZuKsR8gebNQ8waiHS9nu&#xA;LMJcNOJ/0f6TenMIojbrbMZ1DbsfULAfZqSQcKvQMCpdoH+8Mv8AzGXv/UZLiqY4q7FXYq7FUh87&#xA;eYm0DQJryBYJb5ysVlbXEixJLI7AcasVrRatSu9MnCNmkEovy1plrp2jW0MGnRaU0iLNcWMPErHN&#xA;IoMi8l2bi3w19vDIyNlKZ4FdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq&#xA;W/8ATSf9Gf8AzNxVjnlBdEk1YnTrzUpxD9aHpXEKRQIY5hE/ORYYnlZ2JZPUdyd2O+FU+8z+atH8&#xA;tWMd9qrtHBLJ6KFFLnkI3lOw8I4mb6KCpoMCq2gf7wy/8xl7/wBRkuKpjirsVdirsVYVr2k6Dr3n&#xA;7TbTU9NvJpNLt2uoLggGwfmwHCQEGpBUHalehqMsiSI7FB5s1ytLsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdiqW/wDTSf8ARn/zNxVgPlK6vNP8+XNrLYyXbXc95FPqjRR+&#xA;shEnNWmdbeJhHJw/dr6rDjTwGFDOfM3lXSPMlnHZ6mjtDE7OvBipq8TwuP8AZRysvtWood8CW/Ld&#xA;rbQ2lzJFEiSS3l56siqAz8buULyI3NPfFU2xV2KuxVQv723sLG4vrklbe1ieeZgCSEjUsxoOuwxC&#xA;sI/K7zH5y8zC+17VBDb6DcuyaVZhf3iem1CefFeS9VJbqwNAoyzJEDbqgM+ytLsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqUx21tH5pkljiRJZbOssiqAzES0+Ijc4qw/y&#xA;LAT531ieCGGKziE0aFNPms5aStBJFFIZLO2CelFT4fVcvy5bU2KvRsCpdoH+8Mv/ADGXv/UZLiqY&#xA;4q7FXYqlPmzXYdB8t6hq8yLKlpCWETGiux+FEJoftMwHTJQjxEBBNO8p37ah5a02+azSwF1bpMlp&#xA;GQyIjjknHiAKFSDSm3TGQopCbZFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FUt/wCmk/6M/wDmbirF/J7+XoPNup6fpunXVtdQCYXVxNc3EysI3ijVnSV3UNLSsZ6lE8Ns&#xA;Ks0u76ys4xLeXEdtETxDzOqKWIJpViN9sCoPy8QdPkINQbu9II/5i5cVTLFXYq7FVO5tba6ge3uo&#xA;knt5RxkhlUOjDwZWqDiq6KKKGJIokWOKNQkcaAKqqooAANgAMVXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv8A00n/AEZ/8zcVYJoej8vzRuJPXnpbm9uhJBITGTJK&#xA;imC6H2T/AHn7pabBW6kAgoZx5n0Ndc0aXS3ZUhuWjW4LrzrBzHrovg0kXJAe1a79MCWvLcLR2ly3&#xA;qu6NeXnCEhAsYF3KKJxVW3/yicVTbFXYq7FUs8y+YLPy9olzrF5HLLbWvAyRwKHkPN1QcQxUdW33&#xA;yUY2aQTSNsrqO8s4LuNWSO4jSVEkXi4DqGAZT0O+4yKVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUpjikXzTI7TO6vZ/DGwTin739niob/gicVYN5BuLa+88S6rFJIz&#xA;ajYT3Jia7W4MZlktpWjliUD0vTMnoxj/AIrk+kq9PwKl2gf7wy/8xl7/ANRkuKpjirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3/AKaT/oz/AOZuKo6K&#xA;3t4nkeKJI3mPKVlUAu1KVYjqaeOKqmKpdoH+8Mv/ADGXv/UZLiqY4q7FXYqxP8zfKmreaPLY0rTL&#xA;iK2ma4jlleZnVTGnKo+ANU8qHcUyzHIRNlBFsrRAiKgJIUAAsSTt4k7nK0t4q7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv8A00n/AEZ/8zcVTLFWK/mLF5ul0m2HlrmZ&#xA;1uC13HGQrvEIJSiBvVgZQ0/phmV6gb7qCCqmflpro2lwJo40QXl56bI5cn/S5eXIFE40PTc19sVT&#xA;fFXYq7FWBfml5evvMN15c0yK/trSzN7613DNL6VxJ6YFDbihLsqM4oO5XtuLMcqsoIZ7laXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlMbXJ80yCREWIWf7plcszD1f&#xA;2lKqF+84qm2KuxVLtA/3hl/5jL3/AKjJcVTHFXYq7FUt1Py3omqX2n39/aie70uQy2EhZx6bsVJa&#xA;ikBt0H2gckJECh1RSZZFLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVS3/ppP+jP/AJm4qmWKuxVLtA/3hl/5jL3/AKjJcVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv/AE0n/Rn/AMzcVTLFWOee/Md15e0VdRhaFI0l&#xA;IuZJ+DcYlikkYxxyT2YkeqD4RJWlSAaUxVGeWrmOW0uEQSAx3l5yLxugPK7lI4s6qG96dO+Kpvir&#xA;sVdiqT6toFzf61pWox6nc2kOnM7TWULERXHMCgkFabU7g+1MkJUDshOMil2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpTHcRyeaZI1Dho7OjFkdVNZf2WYBW/wBicVTb&#xA;FVrxxvx5qG4kMvIA0YdCK98VQGgf7wy/8xl7/wBRkuKpjirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3/ppP+jP/AJm4qmWKuxVLtA/3hl/5jL3/AKjJ&#xA;cVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlv/&#xA;AE0n/Rn/AMzcVTLFUq8yeZtL8vWKXmoM/GWVIIYol5yO7n9lfBVqzHsoJxVd5ddX0+UqagXt+v0r&#xA;ezA/iMVTPFXYqp3FxFb28txM3GGFGkkahNFUVJoKnoMVVMVdirsVU2uIluEty376RHkRaHdYyoY1&#xA;6bF1xVUxV2KuxVTguIp0LxNyUO8ZNCPijco438GUjFVTFXYqpz3EUCB5W4qXSMGhPxSOEQbeLMBi&#xA;qpirsVdiqm1xEtwluW/fSI8iLQ7rGVDGvTYuuKqmKuxV2KqcFxFOheJuSh3jJoR8UblHG/gykYqq&#xA;Yq7FVOe4igQPK3FS6Rg0J+KRwiDbxZgMVVMVdirsVSoyxjzSsJP7x7FnVd91WYAn/hhiqa4qk/mj&#xA;QNI1nTWi1HSYtX9I8obeQIGDEivCRyvA7b0IqNsVYxe27HzZp3qaBbRRX7H9IW4t4pZyx9Q+vLMs&#xA;MkZT4d6zK3zqAShl3+GvLn/Vqs/+keL/AJpwJd/hry5/1arP/pHi/wCacVSbzdo+nWeiPNp+lWqy&#xA;+tbpLMlnHO0UEkyJNKsSoxcpGWbpt1OwpiqJ8v6Hpt1oOm3WpaLZwahPawyXkP1WNOEzxhnUowJW&#xA;jE/CemKph/hry5/1arP/AKR4v+acVd/hry5/1arP/pHi/wCacVY1q2n2tt5x0mzg0m0l025Vluoo&#xA;7RS6ErIwld/QaMRgoB/eqa02NQMKsl/w15c/6tVn/wBI8X/NOBXf4a8uf9Wqz/6R4v8AmnFUFrWg&#xA;aFBpN5NDp9pDLHC7RyraRSlWAqCE4Hl8qYqxDy48l/rGkRT6Hbra3NnDJeKdNEaBmt3eaUysgCMt&#xA;ygi9PwNcKGef4a8uf9Wqz/6R4v8AmnAl3+GvLn/Vqs/+keL/AJpxVIvMGnaLYatoQTT7YWl1cyw3&#xA;sK2KShkMDtG5dUYx8ZlQe/LCqH8habb6ho8razpVo95BP6RuRaJHFMPSjcyQB4Ld+HJ2X4k+0pFT&#xA;SuKsl/w15c/6tVn/ANI8X/NOBXf4a8uf9Wqz/wCkeL/mnFXmmsT3cMutHTdLjmtrW8+rwO+kK8iM&#xA;sF05VI0jBkgeeKCBX3YksdlKNhV6RF5c0BokMmkWaSFQXUQRGhpuK8cCr/8ADXlz/q1Wf/SPF/zT&#xA;iqV+Z9H8v2OgX14mnxRPBGXV7WxiuZ9iPhjiKMGZvsiop3OKsa8rwzXGuWdrqWl2U9vPZCSY29lw&#xA;SKZUQsZWkt0Hxsx48ZOv7PgUM5/w15c/6tVn/wBI8X/NOBLv8NeXP+rVZ/8ASPF/zTirEvOtmthq&#xA;GlR6JpFrcvLLS6s/qSOrRno/IQkDiRufUXj1o3TChFeRdNt9Q0iSbVtJtjKswWGWSwW1d0MMbvWJ&#xA;0Uj05nkiG24WuKWR/wCGvLn/AFarP/pHi/5pwK7/AA15c/6tVn/0jxf804q84v73XtG1XWptCs4h&#xA;b29zBRoLAx3FxGUu/Vs4HjtSHkEkUPDkCtOso5rQq9YwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8&#xA;tH5w6jYx30uqaahRJ/T0/ifQDost5G7s7NOvEfU1XkePxuFKqKMxpU5k/NTT4hNJNDDHEk01vEjX&#xA;Sev6sMhjVJYuP7ppuJaIcjyXfGlQtz+a93bRXE82iqkEFva3PP61X4L65nt4OdIaIP8ARHZjU0qo&#xA;3JNFV4/Nlfg9TTUt0uf94p57pEh4q6I73EoRlhUNIACOVT9GNKi7L8yF1Cx80S2tn6c3l2KZxzfm&#xA;sjRCYDmoCsgZoOS/zIQQa1ACoK//ADSvbSTk+lxJbxiaVw1yTLLFGLkRrCBHQzSNZPxj71XepNDS&#xA;tW/5uJJZTak+lH9FWcUMt9dwzibj9YuJrdPRRY6yLyt6sTxpy6bHGlRWkfmS+p+Z49BFmlvcR3Cw&#xA;3g9T1Stba6kZKcYyjrLa06MrLuMVZzgV2KuxV2KuxV2KuxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:D67DBEF0082068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D67DBEF0082068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D67DBEF0082068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T09:57:06+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -238.088 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 238.088 li
304.847 238.088 li
304.847 0 li
cp
clp
[1 0 0 1 0 0 ]ct
21.1201 219.397 mo
300.12 219.397 li
300.12 3.39697 li
21.1201 3.39697 li
21.1201 219.397 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
61.1792 185.626 mo
65.2251 185.626 li
65.2251 181.58 li
61.1792 181.58 li
61.1792 185.626 li
cp
clp
63.2026 185 mo
63.5732 185 63.9287 184.853 64.1909 184.591 cv
64.4526 184.33 64.6001 183.973 64.6001 183.603 cv
64.6001 183.232 64.4526 182.877 64.1909 182.615 cv
63.9287 182.353 63.5732 182.205 63.2026 182.205 cv
62.832 182.205 62.4761 182.353 62.2144 182.615 cv
61.9526 182.877 61.8052 183.232 61.8052 183.603 cv
61.8052 183.973 61.9526 184.33 62.2144 184.591 cv
62.4761 184.853 62.832 185 63.2026 185 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
63.2026 185 mo
63.5732 185 63.9287 184.853 64.1909 184.591 cv
64.4526 184.33 64.6001 183.973 64.6001 183.603 cv
64.6001 183.232 64.4526 182.877 64.1909 182.615 cv
63.9287 182.353 63.5732 182.205 63.2026 182.205 cv
62.832 182.205 62.4761 182.353 62.2144 182.615 cv
61.9526 182.877 61.8052 183.232 61.8052 183.603 cv
61.8052 183.973 61.9526 184.33 62.2144 184.591 cv
62.4761 184.853 62.832 185 63.2026 185 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
61.4287 164.642 mo
65.4736 164.642 li
65.4736 160.597 li
61.4287 160.597 li
61.4287 164.642 li
cp
clp
63.4512 164.017 mo
63.8218 164.017 64.1772 163.871 64.4399 163.608 cv
64.7012 163.346 64.8486 162.991 64.8486 162.621 cv
64.8486 162.249 64.7012 161.894 64.4399 161.632 cv
64.1772 161.37 63.8218 161.222 63.4512 161.222 cv
63.0806 161.222 62.7246 161.37 62.4629 161.632 cv
62.2012 161.894 62.0537 162.249 62.0537 162.621 cv
62.0537 162.991 62.2012 163.346 62.4629 163.608 cv
62.7246 163.871 63.0806 164.017 63.4512 164.017 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
63.4512 164.017 mo
63.8218 164.017 64.1772 163.871 64.4399 163.608 cv
64.7012 163.346 64.8486 162.991 64.8486 162.621 cv
64.8486 162.249 64.7012 161.894 64.4399 161.632 cv
64.1772 161.37 63.8218 161.222 63.4512 161.222 cv
63.0806 161.222 62.7246 161.37 62.4629 161.632 cv
62.2012 161.894 62.0537 162.249 62.0537 162.621 cv
62.0537 162.991 62.2012 163.346 62.4629 163.608 cv
62.7246 163.871 63.0806 164.017 63.4512 164.017 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
61.6948 159.088 mo
65.7402 159.088 li
65.7402 155.043 li
61.6948 155.043 li
61.6948 159.088 li
cp
clp
63.7173 158.463 mo
64.0879 158.463 64.4438 158.316 64.7056 158.054 cv
64.9673 157.792 65.1147 157.436 65.1147 157.066 cv
65.1147 156.695 64.9673 156.34 64.7056 156.078 cv
64.4438 155.816 64.0879 155.668 63.7173 155.668 cv
63.3467 155.668 62.9912 155.816 62.7295 156.078 cv
62.4673 156.34 62.3198 156.695 62.3198 157.066 cv
62.3198 157.436 62.4673 157.792 62.7295 158.054 cv
62.9912 158.316 63.3467 158.463 63.7173 158.463 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
63.7173 158.463 mo
64.0879 158.463 64.4438 158.316 64.7056 158.054 cv
64.9673 157.792 65.1147 157.436 65.1147 157.066 cv
65.1147 156.695 64.9673 156.34 64.7056 156.078 cv
64.4438 155.816 64.0879 155.668 63.7173 155.668 cv
63.3467 155.668 62.9912 155.816 62.7295 156.078 cv
62.4673 156.34 62.3198 156.695 62.3198 157.066 cv
62.3198 157.436 62.4673 157.792 62.7295 158.054 cv
62.9912 158.316 63.3467 158.463 63.7173 158.463 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
61.9814 159.088 mo
66.0264 159.088 li
66.0264 155.043 li
61.9814 155.043 li
61.9814 159.088 li
cp
clp
64.0034 158.463 mo
64.374 158.463 64.7295 158.316 64.9917 158.054 cv
65.2534 157.792 65.4009 157.436 65.4009 157.066 cv
65.4009 156.695 65.2534 156.34 64.9917 156.078 cv
64.7295 155.816 64.374 155.668 64.0034 155.668 cv
63.6328 155.668 63.2773 155.816 63.0151 156.078 cv
62.7534 156.34 62.606 156.695 62.606 157.066 cv
62.606 157.436 62.7534 157.792 63.0151 158.054 cv
63.2773 158.316 63.6328 158.463 64.0034 158.463 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.0034 158.463 mo
64.374 158.463 64.7295 158.316 64.9917 158.054 cv
65.2534 157.792 65.4009 157.436 65.4009 157.066 cv
65.4009 156.695 65.2534 156.34 64.9917 156.078 cv
64.7295 155.816 64.374 155.668 64.0034 155.668 cv
63.6328 155.668 63.2773 155.816 63.0151 156.078 cv
62.7534 156.34 62.606 156.695 62.606 157.066 cv
62.606 157.436 62.7534 157.792 63.0151 158.054 cv
63.2773 158.316 63.6328 158.463 64.0034 158.463 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
62.2886 157.545 mo
66.334 157.545 li
66.334 153.5 li
62.2886 153.5 li
62.2886 157.545 li
cp
clp
64.3115 156.92 mo
64.6821 156.92 65.0376 156.773 65.3003 156.511 cv
65.5615 156.249 65.709 155.893 65.709 155.523 cv
65.709 155.152 65.5615 154.797 65.3003 154.535 cv
65.0376 154.272 64.6821 154.125 64.3115 154.125 cv
63.9409 154.125 63.585 154.272 63.3232 154.535 cv
63.0615 154.797 62.9136 155.152 62.9136 155.523 cv
62.9136 155.893 63.0615 156.249 63.3232 156.511 cv
63.585 156.773 63.9409 156.92 64.3115 156.92 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.3115 156.92 mo
64.6821 156.92 65.0376 156.773 65.3003 156.511 cv
65.5615 156.249 65.709 155.893 65.709 155.523 cv
65.709 155.152 65.5615 154.797 65.3003 154.535 cv
65.0376 154.272 64.6821 154.125 64.3115 154.125 cv
63.9409 154.125 63.585 154.272 63.3232 154.535 cv
63.0615 154.797 62.9136 155.152 62.9136 155.523 cv
62.9136 155.893 63.0615 156.249 63.3232 156.511 cv
63.585 156.773 63.9409 156.92 64.3115 156.92 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
62.6211 156.003 mo
66.667 156.003 li
66.667 151.957 li
62.6211 151.957 li
62.6211 156.003 li
cp
clp
64.644 155.378 mo
65.0146 155.378 65.3701 155.23 65.6328 154.968 cv
65.894 154.706 66.0415 154.35 66.0415 153.98 cv
66.0415 153.61 65.894 153.254 65.6328 152.992 cv
65.3701 152.729 65.0146 152.582 64.644 152.582 cv
64.2734 152.582 63.9175 152.729 63.6558 152.992 cv
63.394 153.254 63.2466 153.61 63.2466 153.98 cv
63.2466 154.35 63.394 154.706 63.6558 154.968 cv
63.9175 155.23 64.2734 155.378 64.644 155.378 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.644 155.378 mo
65.0146 155.378 65.3701 155.23 65.6328 154.968 cv
65.894 154.706 66.0415 154.35 66.0415 153.98 cv
66.0415 153.61 65.894 153.254 65.6328 152.992 cv
65.3701 152.729 65.0146 152.582 64.644 152.582 cv
64.2734 152.582 63.9175 152.729 63.6558 152.992 cv
63.394 153.254 63.2466 153.61 63.2466 153.98 cv
63.2466 154.35 63.394 154.706 63.6558 154.968 cv
63.9175 155.23 64.2734 155.378 64.644 155.378 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
62.9819 149.214 mo
67.0269 149.214 li
67.0269 145.169 li
62.9819 145.169 li
62.9819 149.214 li
cp
clp
65.0044 148.589 mo
65.375 148.589 65.7305 148.442 65.9927 148.179 cv
66.2544 147.917 66.4019 147.562 66.4019 147.191 cv
66.4019 146.821 66.2544 146.466 65.9927 146.203 cv
65.7305 145.941 65.375 145.794 65.0044 145.794 cv
64.6338 145.794 64.2778 145.941 64.0161 146.203 cv
63.7544 146.466 63.6069 146.821 63.6069 147.191 cv
63.6069 147.562 63.7544 147.917 64.0161 148.179 cv
64.2778 148.442 64.6338 148.589 65.0044 148.589 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
65.0044 148.589 mo
65.375 148.589 65.7305 148.442 65.9927 148.179 cv
66.2544 147.917 66.4019 147.562 66.4019 147.191 cv
66.4019 146.821 66.2544 146.466 65.9927 146.203 cv
65.7305 145.941 65.375 145.794 65.0044 145.794 cv
64.6338 145.794 64.2778 145.941 64.0161 146.203 cv
63.7544 146.466 63.6069 146.821 63.6069 147.191 cv
63.6069 147.562 63.7544 147.917 64.0161 148.179 cv
64.2778 148.442 64.6338 148.589 65.0044 148.589 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
63.373 146.746 mo
67.418 146.746 li
67.418 142.7 li
63.373 142.7 li
63.373 146.746 li
cp
clp
65.396 146.121 mo
65.7666 146.121 66.1226 145.973 66.3843 145.711 cv
66.646 145.449 66.7935 145.093 66.7935 144.723 cv
66.7935 144.353 66.646 143.997 66.3843 143.735 cv
66.1226 143.473 65.7666 143.325 65.396 143.325 cv
65.0254 143.325 64.6699 143.473 64.4082 143.735 cv
64.146 143.997 63.9985 144.353 63.9985 144.723 cv
63.9985 145.093 64.146 145.449 64.4082 145.711 cv
64.6699 145.973 65.0254 146.121 65.396 146.121 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
65.396 146.121 mo
65.7666 146.121 66.1226 145.973 66.3843 145.711 cv
66.646 145.449 66.7935 145.093 66.7935 144.723 cv
66.7935 144.353 66.646 143.997 66.3843 143.735 cv
66.1226 143.473 65.7666 143.325 65.396 143.325 cv
65.0254 143.325 64.6699 143.473 64.4082 143.735 cv
64.146 143.997 63.9985 144.353 63.9985 144.723 cv
63.9985 145.093 64.146 145.449 64.4082 145.711 cv
64.6699 145.973 65.0254 146.121 65.396 146.121 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
63.8008 133.477 mo
67.8462 133.477 li
67.8462 129.432 li
63.8008 129.432 li
63.8008 133.477 li
cp
clp
65.8232 132.852 mo
66.1938 132.852 66.5498 132.705 66.8115 132.443 cv
67.0732 132.18 67.2207 131.825 67.2207 131.455 cv
67.2207 131.083 67.0732 130.729 66.8115 130.466 cv
66.5498 130.204 66.1938 130.057 65.8232 130.057 cv
65.4526 130.057 65.0972 130.204 64.8354 130.466 cv
64.5732 130.729 64.4258 131.083 64.4258 131.455 cv
64.4258 131.825 64.5732 132.18 64.8354 132.443 cv
65.0972 132.705 65.4526 132.852 65.8232 132.852 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
65.8232 132.852 mo
66.1938 132.852 66.5498 132.705 66.8115 132.443 cv
67.0732 132.18 67.2207 131.825 67.2207 131.455 cv
67.2207 131.083 67.0732 130.729 66.8115 130.466 cv
66.5498 130.204 66.1938 130.057 65.8232 130.057 cv
65.4526 130.057 65.0972 130.204 64.8354 130.466 cv
64.5732 130.729 64.4258 131.083 64.4258 131.455 cv
64.4258 131.825 64.5732 132.18 64.8354 132.443 cv
65.0972 132.705 65.4526 132.852 65.8232 132.852 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
64.269 115.58 mo
68.314 115.58 li
68.314 111.534 li
64.269 111.534 li
64.269 115.58 li
cp
clp
66.2915 114.955 mo
66.6621 114.955 67.0176 114.807 67.2798 114.545 cv
67.5415 114.284 67.689 113.927 67.689 113.557 cv
67.689 113.187 67.5415 112.831 67.2798 112.569 cv
67.0176 112.307 66.6621 112.159 66.2915 112.159 cv
65.9209 112.159 65.5654 112.307 65.3032 112.569 cv
65.0415 112.831 64.894 113.187 64.894 113.557 cv
64.894 113.927 65.0415 114.284 65.3032 114.545 cv
65.5654 114.807 65.9209 114.955 66.2915 114.955 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.2915 114.955 mo
66.6621 114.955 67.0176 114.807 67.2798 114.545 cv
67.5415 114.284 67.689 113.927 67.689 113.557 cv
67.689 113.187 67.5415 112.831 67.2798 112.569 cv
67.0176 112.307 66.6621 112.159 66.2915 112.159 cv
65.9209 112.159 65.5654 112.307 65.3032 112.569 cv
65.0415 112.831 64.894 113.187 64.894 113.557 cv
64.894 113.927 65.0415 114.284 65.3032 114.545 cv
65.5654 114.807 65.9209 114.955 66.2915 114.955 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
64.7837 112.803 mo
68.8296 112.803 li
68.8296 108.757 li
64.7837 108.757 li
64.7837 112.803 li
cp
clp
66.8062 112.178 mo
67.1768 112.178 67.5327 112.03 67.7944 111.768 cv
68.0562 111.506 68.2036 111.15 68.2036 110.78 cv
68.2036 110.409 68.0562 110.054 67.7944 109.792 cv
67.5327 109.53 67.1768 109.382 66.8062 109.382 cv
66.4355 109.382 66.0801 109.53 65.8179 109.792 cv
65.5562 110.054 65.4087 110.409 65.4087 110.78 cv
65.4087 111.15 65.5562 111.506 65.8179 111.768 cv
66.0801 112.03 66.4355 112.178 66.8062 112.178 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.8062 112.178 mo
67.1768 112.178 67.5327 112.03 67.7944 111.768 cv
68.0562 111.506 68.2036 111.15 68.2036 110.78 cv
68.2036 110.409 68.0562 110.054 67.7944 109.792 cv
67.5327 109.53 67.1768 109.382 66.8062 109.382 cv
66.4355 109.382 66.0801 109.53 65.8179 109.792 cv
65.5562 110.054 65.4087 110.409 65.4087 110.78 cv
65.4087 111.15 65.5562 111.506 65.8179 111.768 cv
66.0801 112.03 66.4355 112.178 66.8062 112.178 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
65.3525 105.705 mo
69.3975 105.705 li
69.3975 101.66 li
65.3525 101.66 li
65.3525 105.705 li
cp
clp
67.3755 105.08 mo
67.7461 105.08 68.1016 104.934 68.3633 104.671 cv
68.6255 104.409 68.7729 104.053 68.7729 103.683 cv
68.7729 103.312 68.6255 102.957 68.3633 102.695 cv
68.1016 102.433 67.7461 102.285 67.3755 102.285 cv
67.0044 102.285 66.6489 102.433 66.3872 102.695 cv
66.1255 102.957 65.9775 103.312 65.9775 103.683 cv
65.9775 104.053 66.1255 104.409 66.3872 104.671 cv
66.6489 104.934 67.0044 105.08 67.3755 105.08 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
67.3755 105.08 mo
67.7461 105.08 68.1016 104.934 68.3633 104.671 cv
68.6255 104.409 68.7729 104.053 68.7729 103.683 cv
68.7729 103.312 68.6255 102.957 68.3633 102.695 cv
68.1016 102.433 67.7461 102.285 67.3755 102.285 cv
67.0044 102.285 66.6489 102.433 66.3872 102.695 cv
66.1255 102.957 65.9775 103.312 65.9775 103.683 cv
65.9775 104.053 66.1255 104.409 66.3872 104.671 cv
66.6489 104.934 67.0044 105.08 67.3755 105.08 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
65.9849 104.163 mo
70.0303 104.163 li
70.0303 100.117 li
65.9849 100.117 li
65.9849 104.163 li
cp
clp
68.0073 103.538 mo
68.3784 103.538 68.7339 103.39 68.9956 103.128 cv
69.2573 102.866 69.4053 102.511 69.4053 102.14 cv
69.4053 101.77 69.2573 101.414 68.9956 101.152 cv
68.7339 100.89 68.3784 100.743 68.0073 100.743 cv
67.6367 100.743 67.2813 100.89 67.0195 101.152 cv
66.7573 101.414 66.6099 101.77 66.6099 102.14 cv
66.6099 102.511 66.7573 102.866 67.0195 103.128 cv
67.2813 103.39 67.6367 103.538 68.0073 103.538 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
68.0073 103.538 mo
68.3784 103.538 68.7339 103.39 68.9956 103.128 cv
69.2573 102.866 69.4053 102.511 69.4053 102.14 cv
69.4053 101.77 69.2573 101.414 68.9956 101.152 cv
68.7339 100.89 68.3784 100.743 68.0073 100.743 cv
67.6367 100.743 67.2813 100.89 67.0195 101.152 cv
66.7573 101.414 66.6099 101.77 66.6099 102.14 cv
66.6099 102.511 66.7573 102.866 67.0195 103.128 cv
67.2813 103.39 67.6367 103.538 68.0073 103.538 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
66.6914 103.237 mo
70.7363 103.237 li
70.7363 99.1914 li
66.6914 99.1914 li
66.6914 103.237 li
cp
clp
68.7139 102.612 mo
69.0845 102.612 69.4404 102.465 69.7026 102.202 cv
69.9639 101.94 70.1113 101.585 70.1113 101.214 cv
70.1113 100.844 69.9639 100.488 69.7026 100.226 cv
69.4404 99.9644 69.0845 99.8169 68.7139 99.8169 cv
68.3433 99.8169 67.9878 99.9644 67.7261 100.226 cv
67.4639 100.488 67.3164 100.844 67.3164 101.214 cv
67.3164 101.585 67.4639 101.94 67.7261 102.202 cv
67.9878 102.465 68.3433 102.612 68.7139 102.612 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
68.7139 102.612 mo
69.0845 102.612 69.4404 102.465 69.7026 102.202 cv
69.9639 101.94 70.1113 101.585 70.1113 101.214 cv
70.1113 100.844 69.9639 100.488 69.7026 100.226 cv
69.4404 99.9644 69.0845 99.8169 68.7139 99.8169 cv
68.3433 99.8169 67.9878 99.9644 67.7261 100.226 cv
67.4639 100.488 67.3164 100.844 67.3164 101.214 cv
67.3164 101.585 67.4639 101.94 67.7261 102.202 cv
67.9878 102.465 68.3433 102.612 68.7139 102.612 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
67.4863 102.002 mo
71.5317 102.002 li
71.5317 97.957 li
67.4863 97.957 li
67.4863 102.002 li
cp
clp
69.5093 101.377 mo
69.8799 101.377 70.2354 101.23 70.4971 100.968 cv
70.7593 100.707 70.9067 100.351 70.9067 99.98 cv
70.9067 99.6094 70.7593 99.2539 70.4971 98.9917 cv
70.2354 98.7295 69.8799 98.5825 69.5093 98.5825 cv
69.1382 98.5825 68.7827 98.7295 68.521 98.9917 cv
68.2593 99.2539 68.1113 99.6094 68.1113 99.98 cv
68.1113 100.351 68.2593 100.707 68.521 100.968 cv
68.7827 101.23 69.1382 101.377 69.5093 101.377 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.5093 101.377 mo
69.8799 101.377 70.2354 101.23 70.4971 100.968 cv
70.7593 100.707 70.9067 100.351 70.9067 99.98 cv
70.9067 99.6094 70.7593 99.2539 70.4971 98.9917 cv
70.2354 98.7295 69.8799 98.5825 69.5093 98.5825 cv
69.1382 98.5825 68.7827 98.7295 68.521 98.9917 cv
68.2593 99.2539 68.1113 99.6094 68.1113 99.98 cv
68.1113 100.351 68.2593 100.707 68.521 100.968 cv
68.7827 101.23 69.1382 101.377 69.5093 101.377 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
68.3877 101.694 mo
72.4326 101.694 li
72.4326 97.6489 li
68.3877 97.6489 li
68.3877 101.694 li
cp
clp
70.4102 101.069 mo
70.7808 101.069 71.1362 100.921 71.3989 100.66 cv
71.6602 100.398 71.8076 100.042 71.8076 99.6714 cv
71.8076 99.3008 71.6602 98.9453 71.3989 98.6836 cv
71.1362 98.4209 70.7808 98.2739 70.4102 98.2739 cv
70.0396 98.2739 69.6836 98.4209 69.4219 98.6836 cv
69.1602 98.9453 69.0122 99.3008 69.0122 99.6714 cv
69.0122 100.042 69.1602 100.398 69.4219 100.66 cv
69.6836 100.921 70.0396 101.069 70.4102 101.069 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
70.4102 101.069 mo
70.7808 101.069 71.1362 100.921 71.3989 100.66 cv
71.6602 100.398 71.8076 100.042 71.8076 99.6714 cv
71.8076 99.3008 71.6602 98.9453 71.3989 98.6836 cv
71.1362 98.4209 70.7808 98.2739 70.4102 98.2739 cv
70.0396 98.2739 69.6836 98.4209 69.4219 98.6836 cv
69.1602 98.9453 69.0122 99.3008 69.0122 99.6714 cv
69.0122 100.042 69.1602 100.398 69.4219 100.66 cv
69.6836 100.921 70.0396 101.069 70.4102 101.069 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
69.4175 94.9053 mo
73.4624 94.9053 li
73.4624 90.8604 li
69.4175 90.8604 li
69.4175 94.9053 li
cp
clp
71.4395 94.2803 mo
71.8101 94.2803 72.166 94.1328 72.4282 93.8711 cv
72.6895 93.6089 72.8369 93.2534 72.8369 92.8828 cv
72.8369 92.5122 72.6895 92.1567 72.4282 91.895 cv
72.166 91.6328 71.8101 91.4854 71.4395 91.4854 cv
71.0688 91.4854 70.7134 91.6328 70.4517 91.895 cv
70.1895 92.1567 70.042 92.5122 70.042 92.8828 cv
70.042 93.2534 70.1895 93.6089 70.4517 93.8711 cv
70.7134 94.1328 71.0688 94.2803 71.4395 94.2803 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
71.4395 94.2803 mo
71.8101 94.2803 72.166 94.1328 72.4282 93.8711 cv
72.6895 93.6089 72.8369 93.2534 72.8369 92.8828 cv
72.8369 92.5122 72.6895 92.1567 72.4282 91.895 cv
72.166 91.6328 71.8101 91.4854 71.4395 91.4854 cv
71.0688 91.4854 70.7134 91.6328 70.4517 91.895 cv
70.1895 92.1567 70.042 92.5122 70.042 92.8828 cv
70.042 93.2534 70.1895 93.6089 70.4517 93.8711 cv
70.7134 94.1328 71.0688 94.2803 71.4395 94.2803 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
70.6055 89.3511 mo
74.6509 89.3511 li
74.6509 85.3057 li
70.6055 85.3057 li
70.6055 89.3511 li
cp
clp
72.6274 88.7261 mo
72.998 88.7261 73.354 88.5786 73.6162 88.3169 cv
73.8774 88.0552 74.0249 87.6992 74.0249 87.3286 cv
74.0249 86.958 73.8774 86.6025 73.6162 86.3403 cv
73.354 86.0781 72.998 85.9312 72.6274 85.9312 cv
72.2568 85.9312 71.9014 86.0781 71.6396 86.3403 cv
71.3774 86.6025 71.23 86.958 71.23 87.3286 cv
71.23 87.6992 71.3774 88.0552 71.6396 88.3169 cv
71.9014 88.5786 72.2568 88.7261 72.6274 88.7261 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72.6274 88.7261 mo
72.998 88.7261 73.354 88.5786 73.6162 88.3169 cv
73.8774 88.0552 74.0249 87.6992 74.0249 87.3286 cv
74.0249 86.958 73.8774 86.6025 73.6162 86.3403 cv
73.354 86.0781 72.998 85.9312 72.6274 85.9312 cv
72.2568 85.9312 71.9014 86.0781 71.6396 86.3403 cv
71.3774 86.6025 71.23 86.958 71.23 87.3286 cv
71.23 87.6992 71.3774 88.0552 71.6396 88.3169 cv
71.9014 88.5786 72.2568 88.7261 72.6274 88.7261 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
71.9912 87.8081 mo
76.0361 87.8081 li
76.0361 83.7632 li
71.9912 83.7632 li
71.9912 87.8081 li
cp
clp
74.0137 87.1831 mo
74.3843 87.1831 74.7397 87.0366 75.002 86.7739 cv
75.2637 86.5122 75.4111 86.1563 75.4111 85.7856 cv
75.4111 85.415 75.2637 85.0596 75.002 84.7974 cv
74.7397 84.5356 74.3843 84.3882 74.0137 84.3882 cv
73.6431 84.3882 73.2876 84.5356 73.0254 84.7974 cv
72.7637 85.0596 72.6162 85.415 72.6162 85.7856 cv
72.6162 86.1563 72.7637 86.5122 73.0254 86.7739 cv
73.2876 87.0366 73.6431 87.1831 74.0137 87.1831 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
74.0137 87.1831 mo
74.3843 87.1831 74.7397 87.0366 75.002 86.7739 cv
75.2637 86.5122 75.4111 86.1563 75.4111 85.7856 cv
75.4111 85.415 75.2637 85.0596 75.002 84.7974 cv
74.7397 84.5356 74.3843 84.3882 74.0137 84.3882 cv
73.6431 84.3882 73.2876 84.5356 73.0254 84.7974 cv
72.7637 85.0596 72.6162 85.415 72.6162 85.7856 cv
72.6162 86.1563 72.7637 86.5122 73.0254 86.7739 cv
73.2876 87.0366 73.6431 87.1831 74.0137 87.1831 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
73.6294 84.106 mo
77.6743 84.106 li
77.6743 80.0601 li
73.6294 80.0601 li
73.6294 84.106 li
cp
clp
75.6519 83.48 mo
76.0225 83.48 76.3784 83.3335 76.6401 83.0708 cv
76.9019 82.8091 77.0493 82.4536 77.0493 82.0825 cv
77.0493 81.7119 76.9019 81.3569 76.6401 81.0947 cv
76.3784 80.8325 76.0225 80.6851 75.6519 80.6851 cv
75.2813 80.6851 74.9258 80.8325 74.6636 81.0947 cv
74.4019 81.3569 74.2544 81.7119 74.2544 82.0825 cv
74.2544 82.4536 74.4019 82.8091 74.6636 83.0708 cv
74.9258 83.3335 75.2813 83.48 75.6519 83.48 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
75.6519 83.48 mo
76.0225 83.48 76.3784 83.3335 76.6401 83.0708 cv
76.9019 82.8091 77.0493 82.4536 77.0493 82.0825 cv
77.0493 81.7119 76.9019 81.3569 76.6401 81.0947 cv
76.3784 80.8325 76.0225 80.6851 75.6519 80.6851 cv
75.2813 80.6851 74.9258 80.8325 74.6636 81.0947 cv
74.4019 81.3569 74.2544 81.7119 74.2544 82.0825 cv
74.2544 82.4536 74.4019 82.8091 74.6636 83.0708 cv
74.9258 83.3335 75.2813 83.48 75.6519 83.48 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
75.5952 78.2422 mo
79.6396 78.2422 li
79.6396 74.1973 li
75.5952 74.1973 li
75.5952 78.2422 li
cp
clp
77.6177 77.6177 mo
77.9883 77.6177 78.3438 77.4707 78.6055 77.208 cv
78.8677 76.9463 79.0151 76.5903 79.0151 76.2202 cv
79.0151 75.8491 78.8677 75.4937 78.6055 75.2319 cv
78.3438 74.9702 77.9883 74.8228 77.6177 74.8228 cv
77.2471 74.8228 76.8911 74.9702 76.6294 75.2319 cv
76.3677 75.4937 76.2202 75.8491 76.2202 76.2202 cv
76.2202 76.5903 76.3677 76.9463 76.6294 77.208 cv
76.8911 77.4707 77.2471 77.6177 77.6177 77.6177 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
77.6177 77.6177 mo
77.9883 77.6177 78.3438 77.4707 78.6055 77.208 cv
78.8677 76.9463 79.0151 76.5903 79.0151 76.2202 cv
79.0151 75.8491 78.8677 75.4937 78.6055 75.2319 cv
78.3438 74.9702 77.9883 74.8228 77.6177 74.8228 cv
77.2471 74.8228 76.8911 74.9702 76.6294 75.2319 cv
76.3677 75.4937 76.2202 75.8491 76.2202 76.2202 cv
76.2202 76.5903 76.3677 76.9463 76.6294 77.208 cv
76.8911 77.4707 77.2471 77.6177 77.6177 77.6177 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
77.9971 74.8481 mo
82.0425 74.8481 li
82.0425 70.8032 li
77.9971 70.8032 li
77.9971 74.8481 li
cp
clp
80.02 74.2231 mo
80.3906 74.2231 80.7466 74.0757 81.0083 73.814 cv
81.27 73.5522 81.4175 73.1963 81.4175 72.8257 cv
81.4175 72.4551 81.27 72.0996 81.0083 71.8379 cv
80.7466 71.5752 80.3906 71.4282 80.02 71.4282 cv
79.6494 71.4282 79.2939 71.5752 79.0313 71.8379 cv
78.77 72.0996 78.6226 72.4551 78.6226 72.8257 cv
78.6226 73.1963 78.77 73.5522 79.0313 73.814 cv
79.2939 74.0757 79.6494 74.2231 80.02 74.2231 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
80.02 74.2231 mo
80.3906 74.2231 80.7466 74.0757 81.0083 73.814 cv
81.27 73.5522 81.4175 73.1963 81.4175 72.8257 cv
81.4175 72.4551 81.27 72.0996 81.0083 71.8379 cv
80.7466 71.5752 80.3906 71.4282 80.02 71.4282 cv
79.6494 71.4282 79.2939 71.5752 79.0313 71.8379 cv
78.77 72.0996 78.6226 72.4551 78.6226 72.8257 cv
78.6226 73.1963 78.77 73.5522 79.0313 73.814 cv
79.2939 74.0757 79.6494 74.2231 80.02 74.2231 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
81.0005 68.6772 mo
85.0459 68.6772 li
85.0459 64.6313 li
81.0005 64.6313 li
81.0005 68.6772 li
cp
clp
83.0229 68.0518 mo
83.3936 68.0518 83.7495 67.9048 84.0112 67.6426 cv
84.2729 67.3804 84.4204 67.0249 84.4204 66.6543 cv
84.4204 66.2837 84.2729 65.9282 84.0112 65.666 cv
83.7495 65.4043 83.3936 65.2568 83.0229 65.2568 cv
82.6523 65.2568 82.2969 65.4043 82.0352 65.666 cv
81.7729 65.9282 81.6255 66.2837 81.6255 66.6543 cv
81.6255 67.0249 81.7729 67.3804 82.0352 67.6426 cv
82.2969 67.9048 82.6523 68.0518 83.0229 68.0518 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
83.0229 68.0518 mo
83.3936 68.0518 83.7495 67.9048 84.0112 67.6426 cv
84.2729 67.3804 84.4204 67.0249 84.4204 66.6543 cv
84.4204 66.2837 84.2729 65.9282 84.0112 65.666 cv
83.7495 65.4043 83.3936 65.2568 83.0229 65.2568 cv
82.6523 65.2568 82.2969 65.4043 82.0352 65.666 cv
81.7729 65.9282 81.6255 66.2837 81.6255 66.6543 cv
81.6255 67.0249 81.7729 67.3804 82.0352 67.6426 cv
82.2969 67.9048 82.6523 68.0518 83.0229 68.0518 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
84.8618 67.4429 mo
88.9067 67.4429 li
88.9067 63.397 li
84.8618 63.397 li
84.8618 67.4429 li
cp
clp
86.8843 66.8179 mo
87.2549 66.8179 87.6104 66.6704 87.873 66.4082 cv
88.1343 66.1465 88.2817 65.7905 88.2817 65.4204 cv
88.2817 65.0493 88.1343 64.6938 87.873 64.4321 cv
87.6104 64.1694 87.2549 64.0229 86.8843 64.0229 cv
86.5137 64.0229 86.1582 64.1694 85.896 64.4321 cv
85.6343 64.6938 85.4868 65.0493 85.4868 65.4204 cv
85.4868 65.7905 85.6343 66.1465 85.896 66.4082 cv
86.1582 66.6704 86.5137 66.8179 86.8843 66.8179 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
86.8843 66.8179 mo
87.2549 66.8179 87.6104 66.6704 87.873 66.4082 cv
88.1343 66.1465 88.2817 65.7905 88.2817 65.4204 cv
88.2817 65.0493 88.1343 64.6938 87.873 64.4321 cv
87.6104 64.1694 87.2549 64.0229 86.8843 64.0229 cv
86.5137 64.0229 86.1582 64.1694 85.896 64.4321 cv
85.6343 64.6938 85.4868 65.0493 85.4868 65.4204 cv
85.4868 65.7905 85.6343 66.1465 85.896 66.4082 cv
86.1582 66.6704 86.5137 66.8179 86.8843 66.8179 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
90.0103 65.5908 mo
94.0552 65.5908 li
94.0552 61.5459 li
90.0103 61.5459 li
90.0103 65.5908 li
cp
clp
92.0327 64.9663 mo
92.4033 64.9663 92.7588 64.8188 93.0205 64.5566 cv
93.2827 64.2949 93.4302 63.939 93.4302 63.5688 cv
93.4302 63.1978 93.2827 62.8423 93.0205 62.5806 cv
92.7588 62.3179 92.4033 62.1709 92.0327 62.1709 cv
91.6621 62.1709 91.3062 62.3179 91.0444 62.5806 cv
90.7827 62.8423 90.6353 63.1978 90.6353 63.5688 cv
90.6353 63.939 90.7827 64.2949 91.0444 64.5566 cv
91.3062 64.8188 91.6621 64.9663 92.0327 64.9663 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
92.0327 64.9663 mo
92.4033 64.9663 92.7588 64.8188 93.0205 64.5566 cv
93.2827 64.2949 93.4302 63.939 93.4302 63.5688 cv
93.4302 63.1978 93.2827 62.8423 93.0205 62.5806 cv
92.7588 62.3179 92.4033 62.1709 92.0327 62.1709 cv
91.6621 62.1709 91.3062 62.3179 91.0444 62.5806 cv
90.7827 62.8423 90.6353 63.1978 90.6353 63.5688 cv
90.6353 63.939 90.7827 64.2949 91.0444 64.5566 cv
91.3062 64.8188 91.6621 64.9663 92.0327 64.9663 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
97.2178 63.7397 mo
101.263 63.7397 li
101.263 59.6938 li
97.2178 59.6938 li
97.2178 63.7397 li
cp
clp
99.2402 63.1147 mo
99.6108 63.1147 99.9663 62.9678 100.229 62.7051 cv
100.49 62.4434 100.638 62.0879 100.638 61.7173 cv
100.638 61.3462 100.49 60.9907 100.229 60.729 cv
99.9663 60.4673 99.6108 60.3198 99.2402 60.3198 cv
98.8696 60.3198 98.5142 60.4673 98.2515 60.729 cv
97.9902 60.9907 97.8428 61.3462 97.8428 61.7173 cv
97.8428 62.0879 97.9902 62.4434 98.2515 62.7051 cv
98.5142 62.9678 98.8696 63.1147 99.2402 63.1147 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.2402 63.1147 mo
99.6108 63.1147 99.9663 62.9678 100.229 62.7051 cv
100.49 62.4434 100.638 62.0879 100.638 61.7173 cv
100.638 61.3462 100.49 60.9907 100.229 60.729 cv
99.9663 60.4673 99.6108 60.3198 99.2402 60.3198 cv
98.8696 60.3198 98.5142 60.4673 98.2515 60.729 cv
97.9902 60.9907 97.8428 61.3462 97.8428 61.7173 cv
97.8428 62.0879 97.9902 62.4434 98.2515 62.7051 cv
98.5142 62.9678 98.8696 63.1147 99.2402 63.1147 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
108.029 62.1973 mo
112.074 62.1973 li
112.074 58.1519 li
108.029 58.1519 li
108.029 62.1973 li
cp
clp
110.051 61.5718 mo
110.422 61.5718 110.777 61.4248 111.04 61.1621 cv
111.301 60.9004 111.449 60.5449 111.449 60.1743 cv
111.449 59.8037 111.301 59.4487 111.04 59.186 cv
110.777 58.9243 110.422 58.7769 110.051 58.7769 cv
109.681 58.7769 109.325 58.9243 109.063 59.186 cv
108.801 59.4487 108.654 59.8037 108.654 60.1743 cv
108.654 60.5449 108.801 60.9004 109.063 61.1621 cv
109.325 61.4248 109.681 61.5718 110.051 61.5718 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
110.051 61.5718 mo
110.422 61.5718 110.777 61.4248 111.04 61.1621 cv
111.301 60.9004 111.449 60.5449 111.449 60.1743 cv
111.449 59.8037 111.301 59.4487 111.04 59.186 cv
110.777 58.9243 110.422 58.7769 110.051 58.7769 cv
109.681 58.7769 109.325 58.9243 109.063 59.186 cv
108.801 59.4487 108.654 59.8037 108.654 60.1743 cv
108.654 60.5449 108.801 60.9004 109.063 61.1621 cv
109.325 61.4248 109.681 61.5718 110.051 61.5718 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
126.047 59.4194 mo
130.093 59.4194 li
130.093 55.3755 li
126.047 55.3755 li
126.047 59.4194 li
cp
clp
128.07 58.7944 mo
128.441 58.7944 128.796 58.6479 129.058 58.3853 cv
129.32 58.1235 129.468 57.7676 129.468 57.397 cv
129.468 57.0264 129.32 56.6714 129.058 56.4087 cv
128.796 56.147 128.441 55.9995 128.07 55.9995 cv
127.7 55.9995 127.344 56.147 127.082 56.4087 cv
126.82 56.6714 126.672 57.0264 126.672 57.397 cv
126.672 57.7676 126.82 58.1235 127.082 58.3853 cv
127.344 58.6479 127.7 58.7944 128.07 58.7944 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
128.07 58.7944 mo
128.441 58.7944 128.796 58.6479 129.058 58.3853 cv
129.32 58.1235 129.468 57.7676 129.468 57.397 cv
129.468 57.0264 129.32 56.6714 129.058 56.4087 cv
128.796 56.147 128.441 55.9995 128.07 55.9995 cv
127.7 55.9995 127.344 56.147 127.082 56.4087 cv
126.82 56.6714 126.672 57.0264 126.672 57.397 cv
126.672 57.7676 126.82 58.1235 127.082 58.3853 cv
127.344 58.6479 127.7 58.7944 128.07 58.7944 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
162.085 32.5737 mo
166.13 32.5737 li
166.13 28.5288 li
162.085 28.5288 li
162.085 32.5737 li
cp
clp
164.108 31.9487 mo
164.478 31.9487 164.833 31.8022 165.096 31.5396 cv
165.358 31.2778 165.504 30.9219 165.504 30.5513 cv
165.504 30.1807 165.358 29.8257 165.096 29.563 cv
164.833 29.3013 164.478 29.1538 164.108 29.1538 cv
163.736 29.1538 163.381 29.3013 163.12 29.563 cv
162.857 29.8257 162.71 30.1807 162.71 30.5513 cv
162.71 30.9219 162.857 31.2778 163.12 31.5396 cv
163.381 31.8022 163.736 31.9487 164.108 31.9487 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
164.108 31.9487 mo
164.478 31.9487 164.833 31.8022 165.096 31.5396 cv
165.358 31.2778 165.504 30.9219 165.504 30.5513 cv
165.504 30.1807 165.358 29.8257 165.096 29.563 cv
164.833 29.3013 164.478 29.1538 164.108 29.1538 cv
163.736 29.1538 163.381 29.3013 163.12 29.563 cv
162.857 29.8257 162.71 30.1807 162.71 30.5513 cv
162.71 30.9219 162.857 31.2778 163.12 31.5396 cv
163.381 31.8022 163.736 31.9487 164.108 31.9487 cv
cp
0 0 0 1 cmyk
@
grestore
gsave
270.198 29.4883 mo
274.244 29.4883 li
274.244 25.4434 li
270.198 25.4434 li
270.198 29.4883 li
cp
clp
272.22 28.8633 mo
272.59 28.8633 272.946 28.7163 273.208 28.4536 cv
273.47 28.1919 273.618 27.8364 273.618 27.4658 cv
273.618 27.0952 273.47 26.7397 273.208 26.4775 cv
272.946 26.2158 272.59 26.0684 272.22 26.0684 cv
271.849 26.0684 271.494 26.2158 271.232 26.4775 cv
270.97 26.7397 270.823 27.0952 270.823 27.4658 cv
270.823 27.8364 270.97 28.1919 271.232 28.4536 cv
271.494 28.7163 271.849 28.8633 272.22 28.8633 cv
.884 .769 0 0 cmyk
f
.625 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
272.22 28.8633 mo
272.59 28.8633 272.946 28.7163 273.208 28.4536 cv
273.47 28.1919 273.618 27.8364 273.618 27.4658 cv
273.618 27.0952 273.47 26.7397 273.208 26.4775 cv
272.946 26.2158 272.59 26.0684 272.22 26.0684 cv
271.849 26.0684 271.494 26.2158 271.232 26.4775 cv
270.97 26.7397 270.823 27.0952 270.823 27.4658 cv
270.823 27.8364 270.97 28.1919 271.232 28.4536 cv
271.494 28.7163 271.849 28.8633 272.22 28.8633 cv
cp
0 0 0 1 cmyk
@
grestore
21.1201 219.397 mo
21.1201 216.897 li
21.1201 219.397 li
cp
0 0 0 1 cmyk
f
.3125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
21.1201 219.397 mo
21.1201 216.897 li
@
21.1201 5.89746 mo
21.1201 3.39746 li
21.1201 5.89746 li
cp
f
21.1201 3.39697 mo
21.1201 5.89697 li
@
23.4048 222.133 mo
26.3071 222.133 li
26.3071 222.754 li
24.0796 222.754 li
24.0796 224.098 li
24.1846 224.06 24.2974 224.03 24.4023 224.016 cv
24.5073 224 24.6196 223.985 24.7246 223.985 cv
25.332 223.985 25.812 224.158 26.1724 224.489 cv
26.5322 224.826 26.7119 225.275 26.7119 225.845 cv
26.7119 226.438 26.5244 226.895 26.1572 227.218 cv
25.7896 227.54 25.272 227.698 24.6123 227.698 cv
24.3794 227.698 24.147 227.675 23.9072 227.645 cv
23.667 227.608 23.4272 227.555 23.1724 227.473 cv
23.1724 226.73 li
23.3896 226.85 23.6147 226.94 23.8545 227 cv
24.0869 227.06 24.3345 227.083 24.5972 227.083 cv
25.0171 227.083 25.3545 226.977 25.6021 226.753 cv
25.8423 226.528 25.9697 226.227 25.9697 225.845 cv
25.9697 225.47 25.8423 225.17 25.6021 224.946 cv
25.3545 224.721 25.0171 224.608 24.5972 224.608 cv
24.4023 224.608 24.1997 224.629 24.0044 224.675 cv
23.8096 224.721 23.6069 224.788 23.4048 224.878 cv
23.4048 222.133 li
f
gsave
14.9302 229.37 mo
25.9702 229.37 li
25.9702 220.633 li
14.9302 220.633 li
14.9302 229.37 li
cp
clp
17.1055 224.938 mo
21.8008 224.938 li
21.8008 225.56 li
17.1055 225.56 li
17.1055 224.938 li
cp
f
grestore
55.9951 219.397 mo
55.9951 216.897 li
f
55.9951 219.397 mo
55.9951 216.897 li
@
55.9951 3.39697 mo
55.9951 5.89697 li
f
55.9951 3.39697 mo
55.9951 5.89697 li
@
56.4907 222.62 mo
56.1079 222.62 55.8232 222.807 55.6279 223.182 cv
55.4331 223.557 55.3433 224.12 55.3433 224.87 cv
55.3433 225.62 55.4331 226.182 55.6279 226.557 cv
55.8232 226.932 56.1079 227.12 56.4907 227.12 cv
56.873 227.12 57.1582 226.932 57.353 226.557 cv
57.5405 226.182 57.6382 225.62 57.6382 224.87 cv
57.6382 224.12 57.5405 223.557 57.353 223.182 cv
57.1582 222.807 56.873 222.62 56.4907 222.62 cv
56.4907 222.036 mo
57.0981 222.036 57.563 222.283 57.8931 222.762 cv
58.2153 223.25 58.3804 223.956 58.3804 224.87 cv
58.3804 225.792 58.2153 226.498 57.8931 226.977 cv
57.563 227.458 57.0981 227.698 56.4907 227.698 cv
55.8755 227.698 55.4028 227.458 55.0806 226.977 cv
54.7583 226.498 54.6006 225.792 54.6006 224.87 cv
54.6006 223.956 54.7583 223.25 55.0806 222.762 cv
55.4028 222.283 55.8755 222.036 56.4907 222.036 cv
f
90.8701 219.397 mo
90.8701 216.897 li
f
90.8701 219.397 mo
90.8701 216.897 li
@
90.8701 3.39697 mo
90.8701 5.89697 li
f
90.8701 3.39697 mo
90.8701 5.89697 li
@
89.9077 222.133 mo
92.8101 222.133 li
92.8101 222.754 li
90.5825 222.754 li
90.5825 224.098 li
90.6875 224.06 90.8003 224.03 90.9053 224.016 cv
91.0103 224 91.1226 223.985 91.2275 223.985 cv
91.835 223.985 92.3149 224.158 92.6753 224.489 cv
93.0352 224.826 93.2153 225.275 93.2153 225.845 cv
93.2153 226.438 93.0278 226.895 92.6602 227.218 cv
92.2925 227.54 91.7749 227.698 91.1152 227.698 cv
90.8828 227.698 90.6499 227.675 90.4102 227.645 cv
90.1699 227.608 89.9302 227.555 89.6753 227.473 cv
89.6753 226.73 li
89.8926 226.85 90.1177 226.94 90.3574 227 cv
90.5903 227.06 90.8374 227.083 91.1001 227.083 cv
91.52 227.083 91.8574 226.977 92.105 226.753 cv
92.3452 226.528 92.4727 226.227 92.4727 225.845 cv
92.4727 225.47 92.3452 225.17 92.105 224.946 cv
91.8574 224.721 91.52 224.608 91.1001 224.608 cv
90.9053 224.608 90.7026 224.629 90.5078 224.675 cv
90.3125 224.721 90.1099 224.788 89.9077 224.878 cv
89.9077 222.133 li
f
125.745 219.397 mo
125.745 216.897 li
f
125.745 219.397 mo
125.745 216.897 li
@
125.745 3.39697 mo
125.745 5.89697 li
f
125.745 3.39697 mo
125.745 5.89697 li
@
122.559 226.977 mo
123.767 226.977 li
123.767 222.807 li
122.454 223.07 li
122.454 222.395 li
123.759 222.132 li
124.501 222.132 li
124.501 226.977 li
125.709 226.977 li
125.709 227.6 li
122.559 227.6 li
122.559 226.977 li
cp
f
128.784 222.62 mo
128.401 222.62 128.116 222.807 127.921 223.182 cv
127.727 223.557 127.636 224.12 127.636 224.87 cv
127.636 225.62 127.727 226.182 127.921 226.557 cv
128.116 226.932 128.401 227.12 128.784 227.12 cv
129.167 227.12 129.452 226.932 129.646 226.557 cv
129.834 226.182 129.932 225.62 129.932 224.87 cv
129.932 224.12 129.834 223.557 129.646 223.182 cv
129.452 222.807 129.167 222.62 128.784 222.62 cv
128.784 222.036 mo
129.392 222.036 129.856 222.283 130.187 222.762 cv
130.509 223.25 130.674 223.956 130.674 224.87 cv
130.674 225.792 130.509 226.498 130.187 226.977 cv
129.856 227.458 129.392 227.698 128.784 227.698 cv
128.169 227.698 127.696 227.458 127.374 226.977 cv
127.051 226.498 126.894 225.792 126.894 224.87 cv
126.894 223.956 127.051 223.25 127.374 222.762 cv
127.696 222.283 128.169 222.036 128.784 222.036 cv
f
160.62 219.397 mo
160.62 216.897 li
f
160.62 219.397 mo
160.62 216.897 li
@
160.62 3.39697 mo
160.62 5.89697 li
f
160.62 3.39697 mo
160.62 5.89697 li
@
157.512 226.977 mo
158.72 226.977 li
158.72 222.807 li
157.407 223.07 li
157.407 222.395 li
158.712 222.132 li
159.454 222.132 li
159.454 226.977 li
160.662 226.977 li
160.662 227.6 li
157.512 227.6 li
157.512 226.977 li
cp
f
162.162 222.133 mo
165.065 222.133 li
165.065 222.754 li
162.837 222.754 li
162.837 224.098 li
162.942 224.06 163.054 224.03 163.16 224.016 cv
163.264 224 163.377 223.985 163.482 223.985 cv
164.089 223.985 164.57 224.158 164.929 224.489 cv
165.29 224.826 165.469 225.275 165.469 225.845 cv
165.469 226.438 165.282 226.895 164.915 227.218 cv
164.547 227.54 164.029 227.698 163.37 227.698 cv
163.138 227.698 162.904 227.675 162.665 227.645 cv
162.424 227.608 162.185 227.555 161.929 227.473 cv
161.929 226.73 li
162.147 226.85 162.372 226.94 162.612 227 cv
162.844 227.06 163.092 227.083 163.354 227.083 cv
163.774 227.083 164.112 226.977 164.36 226.753 cv
164.599 226.528 164.727 226.227 164.727 225.845 cv
164.727 225.47 164.599 225.17 164.36 224.946 cv
164.112 224.721 163.774 224.608 163.354 224.608 cv
163.16 224.608 162.957 224.629 162.762 224.675 cv
162.567 224.721 162.364 224.788 162.162 224.878 cv
162.162 222.133 li
f
195.495 219.397 mo
195.495 216.897 li
f
195.495 219.397 mo
195.495 216.897 li
@
195.495 3.39697 mo
195.495 5.89697 li
f
195.495 3.39697 mo
195.495 5.89697 li
@
192.682 226.977 mo
195.262 226.977 li
195.262 227.6 li
191.79 227.6 li
191.79 226.977 li
192.068 226.692 192.45 226.303 192.937 225.807 cv
193.417 225.321 193.724 225.006 193.852 224.863 cv
194.092 224.6 194.257 224.375 194.347 224.188 cv
194.438 224.007 194.49 223.82 194.49 223.64 cv
194.49 223.355 194.385 223.116 194.182 222.935 cv
193.979 222.754 193.717 222.658 193.387 222.658 cv
193.155 222.658 192.907 222.703 192.652 222.778 cv
192.397 222.86 192.12 222.98 191.827 223.145 cv
191.827 222.395 li
192.126 222.276 192.405 222.185 192.66 222.125 cv
192.915 222.066 193.155 222.036 193.372 222.036 cv
193.934 222.036 194.385 222.178 194.722 222.462 cv
195.06 222.748 195.232 223.123 195.232 223.595 cv
195.232 223.82 195.188 224.038 195.104 224.233 cv
195.022 224.436 194.872 224.675 194.648 224.945 cv
194.587 225.02 194.392 225.223 194.062 225.56 cv
193.733 225.897 193.275 226.37 192.682 226.977 cv
f
198.397 222.62 mo
198.015 222.62 197.73 222.807 197.535 223.182 cv
197.339 223.557 197.25 224.12 197.25 224.87 cv
197.25 225.62 197.339 226.182 197.535 226.557 cv
197.73 226.932 198.015 227.12 198.397 227.12 cv
198.779 227.12 199.064 226.932 199.259 226.557 cv
199.448 226.182 199.544 225.62 199.544 224.87 cv
199.544 224.12 199.448 223.557 199.259 223.182 cv
199.064 222.807 198.779 222.62 198.397 222.62 cv
198.397 222.036 mo
199.004 222.036 199.47 222.283 199.8 222.762 cv
200.123 223.25 200.287 223.956 200.287 224.87 cv
200.287 225.792 200.123 226.498 199.8 226.977 cv
199.47 227.458 199.004 227.698 198.397 227.698 cv
197.783 227.698 197.31 227.458 196.988 226.977 cv
196.665 226.498 196.507 225.792 196.507 224.87 cv
196.507 223.956 196.665 223.25 196.988 222.762 cv
197.31 222.283 197.783 222.036 198.397 222.036 cv
f
230.37 219.397 mo
230.37 216.897 li
f
230.37 219.397 mo
230.37 216.897 li
@
230.37 3.39697 mo
230.37 5.89697 li
f
230.37 3.39697 mo
230.37 5.89697 li
@
227.635 226.977 mo
230.215 226.977 li
230.215 227.6 li
226.743 227.6 li
226.743 226.977 li
227.021 226.692 227.403 226.303 227.89 225.807 cv
228.371 225.321 228.677 225.006 228.805 224.863 cv
229.045 224.6 229.21 224.375 229.3 224.188 cv
229.39 224.007 229.443 223.82 229.443 223.64 cv
229.443 223.355 229.338 223.116 229.135 222.935 cv
228.932 222.754 228.669 222.658 228.34 222.658 cv
228.108 222.658 227.86 222.703 227.605 222.778 cv
227.35 222.86 227.073 222.98 226.781 223.145 cv
226.781 222.395 li
227.08 222.276 227.358 222.185 227.613 222.125 cv
227.868 222.066 228.108 222.036 228.325 222.036 cv
228.888 222.036 229.338 222.178 229.675 222.462 cv
230.013 222.748 230.185 223.123 230.185 223.595 cv
230.185 223.82 230.14 224.038 230.058 224.233 cv
229.975 224.436 229.826 224.675 229.6 224.945 cv
229.541 225.02 229.345 225.223 229.015 225.56 cv
228.685 225.897 228.227 226.37 227.635 226.977 cv
f
231.775 222.133 mo
234.678 222.133 li
234.678 222.754 li
232.45 222.754 li
232.45 224.098 li
232.555 224.06 232.668 224.03 232.773 224.016 cv
232.878 224 232.99 223.985 233.095 223.985 cv
233.703 223.985 234.183 224.158 234.543 224.489 cv
234.903 224.826 235.083 225.275 235.083 225.845 cv
235.083 226.438 234.895 226.895 234.528 227.218 cv
234.16 227.54 233.642 227.698 232.983 227.698 cv
232.75 227.698 232.517 227.675 232.278 227.645 cv
232.039 227.608 231.797 227.555 231.543 227.473 cv
231.543 226.73 li
231.76 226.85 231.986 226.94 232.226 227 cv
232.458 227.06 232.705 227.083 232.967 227.083 cv
233.387 227.083 233.725 226.977 233.973 226.753 cv
234.212 226.528 234.34 226.227 234.34 225.845 cv
234.34 225.47 234.212 225.17 233.973 224.946 cv
233.725 224.721 233.387 224.608 232.967 224.608 cv
232.773 224.608 232.57 224.629 232.375 224.675 cv
232.18 224.721 231.977 224.788 231.775 224.878 cv
231.775 222.133 li
f
265.245 219.397 mo
265.245 216.897 li
f
265.245 219.397 mo
265.245 216.897 li
@
265.245 3.39697 mo
265.245 5.89697 li
f
265.245 3.39697 mo
265.245 5.89697 li
@
264.051 224.653 mo
264.404 224.727 264.682 224.885 264.876 225.125 cv
265.072 225.366 265.177 225.665 265.177 226.01 cv
265.177 226.55 264.989 226.97 264.622 227.262 cv
264.248 227.555 263.722 227.698 263.039 227.698 cv
262.807 227.698 262.567 227.675 262.327 227.63 cv
262.086 227.592 261.832 227.526 261.577 227.435 cv
261.577 226.723 li
261.779 226.842 262.004 226.932 262.251 226.993 cv
262.492 227.053 262.747 227.083 263.017 227.083 cv
263.482 227.083 263.834 226.993 264.074 226.813 cv
264.314 226.633 264.442 226.363 264.442 226.01 cv
264.442 225.696 264.329 225.44 264.104 225.26 cv
263.879 225.081 263.565 224.983 263.159 224.983 cv
262.522 224.983 li
262.522 224.375 li
263.189 224.375 li
263.549 224.375 263.828 224.307 264.022 224.158 cv
264.217 224.015 264.314 223.805 264.314 223.528 cv
264.314 223.25 264.209 223.033 264.014 222.883 cv
263.812 222.733 263.527 222.658 263.159 222.658 cv
262.957 222.658 262.739 222.68 262.506 222.725 cv
262.274 222.77 262.019 222.838 261.742 222.928 cv
261.742 222.268 li
262.019 222.193 262.282 222.133 262.529 222.095 cv
262.769 222.057 263.001 222.036 263.227 222.036 cv
263.782 222.036 264.224 222.163 264.554 222.417 cv
264.884 222.672 265.049 223.018 265.049 223.453 cv
265.049 223.752 264.959 224.008 264.788 224.217 cv
264.614 224.428 264.367 224.578 264.051 224.653 cv
f
268.162 222.62 mo
267.779 222.62 267.495 222.807 267.299 223.182 cv
267.105 223.557 267.014 224.12 267.014 224.87 cv
267.014 225.62 267.105 226.182 267.299 226.557 cv
267.495 226.932 267.779 227.12 268.162 227.12 cv
268.544 227.12 268.83 226.932 269.024 226.557 cv
269.212 226.182 269.309 225.62 269.309 224.87 cv
269.309 224.12 269.212 223.557 269.024 223.182 cv
268.83 222.807 268.544 222.62 268.162 222.62 cv
268.162 222.036 mo
268.769 222.036 269.234 222.283 269.564 222.762 cv
269.886 223.25 270.051 223.956 270.051 224.87 cv
270.051 225.792 269.886 226.498 269.564 226.977 cv
269.234 227.458 268.769 227.698 268.162 227.698 cv
267.547 227.698 267.074 227.458 266.751 226.977 cv
266.43 226.498 266.272 225.792 266.272 224.87 cv
266.272 223.956 266.43 223.25 266.751 222.762 cv
267.074 222.283 267.547 222.036 268.162 222.036 cv
f
300.121 219.397 mo
300.121 216.897 li
f
300.121 219.397 mo
300.121 216.897 li
@
300.121 3.39697 mo
300.121 5.89697 li
f
300.121 3.39697 mo
300.121 5.89697 li
@
299.004 224.653 mo
299.357 224.727 299.635 224.885 299.83 225.125 cv
300.025 225.366 300.13 225.665 300.13 226.01 cv
300.13 226.55 299.942 226.97 299.575 227.262 cv
299.2 227.555 298.675 227.698 297.993 227.698 cv
297.76 227.698 297.52 227.675 297.28 227.63 cv
297.04 227.592 296.785 227.526 296.53 227.435 cv
296.53 226.723 li
296.732 226.842 296.958 226.932 297.205 226.993 cv
297.445 227.053 297.7 227.083 297.97 227.083 cv
298.435 227.083 298.787 226.993 299.027 226.813 cv
299.268 226.633 299.395 226.363 299.395 226.01 cv
299.395 225.696 299.282 225.44 299.058 225.26 cv
298.833 225.081 298.518 224.983 298.112 224.983 cv
297.475 224.983 li
297.475 224.375 li
298.142 224.375 li
298.502 224.375 298.78 224.307 298.974 224.158 cv
299.17 224.015 299.268 223.805 299.268 223.528 cv
299.268 223.25 299.163 223.033 298.967 222.883 cv
298.764 222.733 298.48 222.658 298.112 222.658 cv
297.91 222.658 297.692 222.68 297.459 222.725 cv
297.227 222.77 296.972 222.838 296.695 222.928 cv
296.695 222.268 li
296.972 222.193 297.235 222.133 297.482 222.095 cv
297.722 222.057 297.955 222.036 298.18 222.036 cv
298.735 222.036 299.177 222.163 299.507 222.417 cv
299.837 222.672 300.002 223.018 300.002 223.453 cv
300.002 223.752 299.912 224.008 299.74 224.217 cv
299.567 224.428 299.32 224.578 299.004 224.653 cv
f
301.54 222.133 mo
304.443 222.133 li
304.443 222.754 li
302.215 222.754 li
302.215 224.098 li
302.32 224.06 302.432 224.03 302.538 224.016 cv
302.642 224 302.754 223.985 302.86 223.985 cv
303.467 223.985 303.948 224.158 304.307 224.489 cv
304.667 224.826 304.847 225.275 304.847 225.845 cv
304.847 226.438 304.66 226.895 304.292 227.218 cv
303.924 227.54 303.408 227.698 302.748 227.698 cv
302.515 227.698 302.283 227.675 302.042 227.645 cv
301.802 227.608 301.562 227.555 301.307 227.473 cv
301.307 226.73 li
301.525 226.85 301.75 226.94 301.99 227 cv
302.222 227.06 302.47 227.083 302.733 227.083 cv
303.153 227.083 303.49 226.977 303.738 226.753 cv
303.977 226.528 304.105 226.227 304.105 225.845 cv
304.105 225.47 303.977 225.17 303.738 224.946 cv
303.49 224.721 303.153 224.608 302.733 224.608 cv
302.538 224.608 302.334 224.629 302.14 224.675 cv
301.945 224.721 301.743 224.788 301.54 224.878 cv
301.54 222.133 li
f
127.554 235.426 mo
127.711 235.486 127.869 235.598 128.019 235.771 cv
128.168 235.952 128.318 236.191 128.468 236.499 cv
129.218 237.991 li
128.423 237.991 li
127.726 236.588 li
127.546 236.229 127.366 235.981 127.201 235.86 cv
127.028 235.741 126.796 235.68 126.503 235.68 cv
125.701 235.68 li
125.701 237.991 li
124.958 237.991 li
124.958 232.523 li
126.631 232.523 li
127.253 232.523 127.718 232.658 128.026 232.913 cv
128.333 233.175 128.491 233.574 128.491 234.098 cv
128.491 234.444 128.409 234.736 128.251 234.961 cv
128.086 235.186 127.854 235.344 127.554 235.426 cv
125.701 233.131 mo
125.701 235.074 li
126.631 235.074 li
126.983 235.074 127.253 234.991 127.434 234.827 cv
127.613 234.661 127.711 234.42 127.711 234.098 cv
127.711 233.784 127.613 233.543 127.434 233.378 cv
127.253 233.213 126.983 233.131 126.631 233.131 cv
125.701 233.131 li
f
133.651 235.771 mo
133.651 236.101 li
130.554 236.101 li
130.583 236.565 130.719 236.926 130.974 237.167 cv
131.221 237.406 131.566 237.526 132.016 237.526 cv
132.271 237.526 132.526 237.496 132.766 237.436 cv
133.006 237.375 133.253 237.278 133.494 237.143 cv
133.494 237.781 li
133.253 237.885 133.006 237.968 132.751 238.013 cv
132.496 238.058 132.234 238.088 131.979 238.088 cv
131.319 238.088 130.801 237.901 130.418 237.526 cv
130.036 237.151 129.849 236.633 129.849 235.981 cv
129.849 235.313 130.029 234.781 130.389 234.383 cv
130.749 233.993 131.244 233.792 131.859 233.792 cv
132.414 233.792 132.849 233.971 133.171 234.323 cv
133.486 234.683 133.651 235.164 133.651 235.771 cv
132.976 235.575 mo
132.969 235.208 132.864 234.917 132.668 234.69 cv
132.466 234.473 132.196 234.361 131.866 234.361 cv
131.491 234.361 131.191 234.473 130.966 234.683 cv
130.741 234.893 130.606 235.194 130.576 235.575 cv
132.976 235.575 li
f
137.709 234.045 mo
137.709 234.676 li
137.514 234.571 137.326 234.497 137.131 234.444 cv
136.936 234.391 136.749 234.361 136.554 234.361 cv
136.119 234.361 135.774 234.502 135.534 234.782 cv
135.294 235.059 135.174 235.449 135.174 235.944 cv
135.174 236.446 135.294 236.836 135.534 237.114 cv
135.774 237.391 136.119 237.526 136.554 237.526 cv
136.749 237.526 136.936 237.502 137.131 237.45 cv
137.326 237.398 137.514 237.315 137.709 237.21 cv
137.709 237.833 li
137.514 237.923 137.319 237.991 137.124 238.028 cv
136.921 238.066 136.704 238.088 136.479 238.088 cv
135.864 238.088 135.369 237.901 135.009 237.511 cv
134.641 237.128 134.461 236.604 134.461 235.944 cv
134.461 235.276 134.641 234.75 135.009 234.369 cv
135.376 233.985 135.879 233.792 136.524 233.792 cv
136.734 233.792 136.936 233.813 137.131 233.858 cv
137.326 233.903 137.521 233.963 137.709 234.045 cv
f
138.811 236.371 mo
138.811 233.888 li
139.486 233.888 li
139.486 236.348 li
139.486 236.739 139.561 237.024 139.711 237.218 cv
139.861 237.414 140.086 237.51 140.394 237.51 cv
140.753 237.51 141.046 237.399 141.256 237.167 cv
141.466 236.933 141.571 236.618 141.571 236.213 cv
141.571 233.888 li
142.246 233.888 li
142.246 237.991 li
141.571 237.991 li
141.571 237.361 li
141.406 237.616 141.211 237.795 141.001 237.917 cv
140.784 238.028 140.536 238.088 140.251 238.088 cv
139.779 238.088 139.418 237.946 139.179 237.653 cv
138.931 237.368 138.811 236.941 138.811 236.371 cv
f
146.011 234.518 mo
145.936 234.473 145.854 234.444 145.764 234.42 cv
145.674 234.406 145.576 234.391 145.471 234.391 cv
145.088 234.391 144.796 234.518 144.594 234.766 cv
144.384 235.013 144.286 235.366 144.286 235.831 cv
144.286 237.991 li
143.611 237.991 li
143.611 233.888 li
144.286 233.888 li
144.286 234.526 li
144.421 234.278 144.608 234.09 144.833 233.971 cv
145.059 233.851 145.336 233.792 145.666 233.792 cv
145.711 233.792 145.764 233.798 145.824 233.798 cv
145.876 233.805 145.936 233.813 146.011 233.829 cv
146.011 234.518 li
f
149.094 234.518 mo
149.019 234.473 148.936 234.444 148.846 234.42 cv
148.756 234.406 148.659 234.391 148.554 234.391 cv
148.171 234.391 147.879 234.518 147.676 234.766 cv
147.466 235.013 147.369 235.366 147.369 235.831 cv
147.369 237.991 li
146.694 237.991 li
146.694 233.888 li
147.369 233.888 li
147.369 234.526 li
147.504 234.278 147.691 234.09 147.916 233.971 cv
148.141 233.851 148.418 233.792 148.749 233.792 cv
148.793 233.792 148.846 233.798 148.906 233.798 cv
148.958 233.805 149.019 233.813 149.094 233.829 cv
149.094 234.518 li
f
153.309 235.771 mo
153.309 236.101 li
150.211 236.101 li
150.241 236.565 150.376 236.926 150.631 237.167 cv
150.879 237.406 151.224 237.526 151.674 237.526 cv
151.929 237.526 152.184 237.496 152.424 237.436 cv
152.664 237.375 152.911 237.278 153.151 237.143 cv
153.151 237.781 li
152.911 237.885 152.664 237.968 152.409 238.013 cv
152.154 238.058 151.891 238.088 151.636 238.088 cv
150.976 238.088 150.459 237.901 150.076 237.526 cv
149.694 237.151 149.506 236.633 149.506 235.981 cv
149.506 235.313 149.687 234.781 150.046 234.383 cv
150.406 233.993 150.901 233.792 151.516 233.792 cv
152.071 233.792 152.506 233.971 152.829 234.323 cv
153.144 234.683 153.309 235.164 153.309 235.771 cv
152.634 235.575 mo
152.626 235.208 152.521 234.917 152.326 234.69 cv
152.124 234.473 151.854 234.361 151.524 234.361 cv
151.149 234.361 150.849 234.473 150.624 234.683 cv
150.399 234.893 150.264 235.194 150.234 235.575 cv
152.634 235.575 li
f
157.824 235.516 mo
157.824 237.991 li
157.148 237.991 li
157.148 235.538 li
157.148 235.149 157.066 234.864 156.916 234.668 cv
156.767 234.473 156.541 234.375 156.241 234.375 cv
155.874 234.375 155.588 234.496 155.378 234.728 cv
155.168 234.961 155.063 235.276 155.063 235.673 cv
155.063 237.991 li
154.389 237.991 li
154.389 233.888 li
155.063 233.888 li
155.063 234.526 li
155.221 234.286 155.409 234.098 155.633 233.978 cv
155.851 233.859 156.106 233.791 156.391 233.791 cv
156.856 233.791 157.216 233.941 157.456 234.233 cv
157.696 234.526 157.824 234.954 157.824 235.516 cv
f
162.121 234.045 mo
162.121 234.676 li
161.926 234.571 161.739 234.497 161.543 234.444 cv
161.349 234.391 161.161 234.361 160.966 234.361 cv
160.531 234.361 160.186 234.502 159.947 234.782 cv
159.707 235.059 159.586 235.449 159.586 235.944 cv
159.586 236.446 159.707 236.836 159.947 237.114 cv
160.186 237.391 160.531 237.526 160.966 237.526 cv
161.161 237.526 161.349 237.502 161.543 237.45 cv
161.739 237.398 161.926 237.315 162.121 237.21 cv
162.121 237.833 li
161.926 237.923 161.731 237.991 161.536 238.028 cv
161.333 238.066 161.117 238.088 160.891 238.088 cv
160.276 238.088 159.781 237.901 159.422 237.511 cv
159.054 237.128 158.874 236.604 158.874 235.944 cv
158.874 235.276 159.054 234.75 159.422 234.369 cv
159.789 233.985 160.291 233.792 160.936 233.792 cv
161.146 233.792 161.349 233.813 161.543 233.858 cv
161.739 233.903 161.934 233.963 162.121 234.045 cv
f
166.801 235.771 mo
166.801 236.101 li
163.704 236.101 li
163.734 236.565 163.869 236.926 164.124 237.167 cv
164.372 237.406 164.716 237.526 165.167 237.526 cv
165.421 237.526 165.676 237.496 165.917 237.436 cv
166.156 237.375 166.404 237.278 166.644 237.143 cv
166.644 237.781 li
166.404 237.885 166.156 237.968 165.901 238.013 cv
165.646 238.058 165.383 238.088 165.128 238.088 cv
164.468 238.088 163.951 237.901 163.569 237.526 cv
163.186 237.151 162.999 236.633 162.999 235.981 cv
162.999 235.313 163.179 234.781 163.539 234.383 cv
163.899 233.993 164.394 233.792 165.008 233.792 cv
165.564 233.792 165.999 233.971 166.321 234.323 cv
166.636 234.683 166.801 235.164 166.801 235.771 cv
166.126 235.575 mo
166.119 235.208 166.013 234.917 165.819 234.69 cv
165.616 234.473 165.346 234.361 165.017 234.361 cv
164.641 234.361 164.341 234.473 164.116 234.683 cv
163.891 234.893 163.756 235.194 163.726 235.575 cv
166.126 235.575 li
f
170.319 232.524 mo
171.061 232.524 li
171.061 237.991 li
170.319 237.991 li
170.319 232.524 li
cp
f
175.914 235.516 mo
175.914 237.991 li
175.239 237.991 li
175.239 235.538 li
175.239 235.149 175.156 234.864 175.006 234.668 cv
174.856 234.473 174.631 234.375 174.332 234.375 cv
173.963 234.375 173.679 234.496 173.468 234.728 cv
173.258 234.961 173.154 235.276 173.154 235.673 cv
173.154 237.991 li
172.479 237.991 li
172.479 233.888 li
173.154 233.888 li
173.154 234.526 li
173.311 234.286 173.499 234.098 173.724 233.978 cv
173.941 233.859 174.196 233.791 174.481 233.791 cv
174.946 233.791 175.306 233.941 175.546 234.233 cv
175.787 234.526 175.914 234.954 175.914 235.516 cv
f
177.923 232.726 mo
177.923 233.888 li
179.311 233.888 li
179.311 234.414 li
177.923 234.414 li
177.923 236.641 li
177.923 236.979 177.968 237.196 178.058 237.286 cv
178.149 237.383 178.336 237.428 178.622 237.428 cv
179.311 237.428 li
179.311 237.991 li
178.622 237.991 li
178.096 237.991 177.736 237.893 177.542 237.698 cv
177.346 237.503 177.249 237.151 177.249 236.641 cv
177.249 234.414 li
176.753 234.414 li
176.753 233.888 li
177.249 233.888 li
177.249 232.726 li
177.923 232.726 li
f
183.707 235.771 mo
183.707 236.101 li
180.609 236.101 li
180.638 236.565 180.774 236.926 181.029 237.167 cv
181.276 237.406 181.621 237.526 182.071 237.526 cv
182.326 237.526 182.582 237.496 182.821 237.436 cv
183.061 237.375 183.308 237.278 183.548 237.143 cv
183.548 237.781 li
183.308 237.885 183.061 237.968 182.807 238.013 cv
182.551 238.058 182.289 238.088 182.034 238.088 cv
181.375 238.088 180.856 237.901 180.473 237.526 cv
180.091 237.151 179.904 236.633 179.904 235.981 cv
179.904 235.313 180.083 234.781 180.444 234.383 cv
180.803 233.993 181.298 233.792 181.914 233.792 cv
182.469 233.792 182.904 233.971 183.226 234.323 cv
183.542 234.683 183.707 235.164 183.707 235.771 cv
183.031 235.575 mo
183.024 235.208 182.918 234.917 182.723 234.69 cv
182.521 234.473 182.251 234.361 181.921 234.361 cv
181.546 234.361 181.246 234.473 181.021 234.683 cv
180.796 234.893 180.661 235.194 180.631 235.575 cv
183.031 235.575 li
f
187.186 234.518 mo
187.111 234.473 187.029 234.444 186.939 234.42 cv
186.849 234.406 186.751 234.391 186.646 234.391 cv
186.263 234.391 185.971 234.518 185.768 234.766 cv
185.559 235.013 185.461 235.366 185.461 235.831 cv
185.461 237.991 li
184.787 237.991 li
184.787 233.888 li
185.461 233.888 li
185.461 234.526 li
185.596 234.278 185.784 234.09 186.009 233.971 cv
186.234 233.851 186.511 233.792 186.841 233.792 cv
186.886 233.792 186.939 233.798 186.999 233.798 cv
187.051 233.805 187.111 233.813 187.186 233.829 cv
187.186 234.518 li
f
187.411 233.889 mo
188.125 233.889 li
189.406 237.331 li
190.688 233.889 li
191.402 233.889 li
189.864 237.991 li
188.949 237.991 li
187.411 233.889 li
cp
f
194.199 235.928 mo
193.651 235.928 193.276 235.996 193.066 236.116 cv
192.856 236.243 192.751 236.454 192.751 236.753 cv
192.751 236.993 192.826 237.188 192.984 237.323 cv
193.141 237.465 193.359 237.534 193.628 237.534 cv
194.003 237.534 194.303 237.406 194.529 237.135 cv
194.753 236.874 194.866 236.521 194.866 236.079 cv
194.866 235.928 li
194.199 235.928 li
195.542 235.651 mo
195.542 237.991 li
194.866 237.991 li
194.866 237.368 li
194.708 237.624 194.513 237.803 194.29 237.917 cv
194.064 238.028 193.779 238.088 193.449 238.088 cv
193.029 238.088 192.691 237.976 192.444 237.743 cv
192.196 237.51 192.076 237.196 192.076 236.798 cv
192.076 236.34 192.226 235.996 192.542 235.756 cv
192.849 235.524 193.306 235.403 193.921 235.403 cv
194.866 235.403 li
194.866 235.336 li
194.866 235.028 194.761 234.789 194.559 234.616 cv
194.356 234.451 194.071 234.361 193.704 234.361 cv
193.463 234.361 193.239 234.391 193.013 234.451 cv
192.789 234.51 192.579 234.593 192.376 234.698 cv
192.376 234.076 li
192.616 233.986 192.856 233.911 193.088 233.866 cv
193.321 233.821 193.546 233.792 193.771 233.792 cv
194.364 233.792 194.806 233.948 195.099 234.256 cv
195.391 234.563 195.542 235.028 195.542 235.651 cv
f
196.929 232.292 mo
197.604 232.292 li
197.604 237.991 li
196.929 237.991 li
196.929 232.292 li
cp
f
21.1201 219.397 mo
23.6201 219.397 li
f
21.1201 219.397 mo
23.6201 219.397 li
@
300.121 219.397 mo
297.621 219.397 li
f
300.121 219.397 mo
297.621 219.397 li
@
17.4707 216.645 mo
15.603 219.563 li
17.4707 219.563 li
17.4707 216.645 li
17.2759 216 mo
18.2056 216 li
18.2056 219.563 li
18.9858 219.563 li
18.9858 220.177 li
18.2056 220.177 li
18.2056 221.467 li
17.4707 221.467 li
17.4707 220.177 li
15.0034 220.177 li
15.0034 219.465 li
17.2759 216 li
cp
f
21.1201 188.54 mo
23.6201 188.54 li
f
21.1201 188.54 mo
23.6201 188.54 li
@
300.121 188.54 mo
297.621 188.54 li
f
300.121 188.54 mo
297.621 188.54 li
@
15.8853 185.143 mo
18.7876 185.143 li
18.7876 185.765 li
16.5601 185.765 li
16.5601 187.108 li
16.665 187.07 16.7773 187.041 16.8823 187.025 cv
16.9878 187.01 17.1001 186.996 17.2051 186.996 cv
17.8125 186.996 18.2925 187.168 18.6523 187.498 cv
19.0127 187.835 19.1924 188.286 19.1924 188.855 cv
19.1924 189.448 19.0049 189.905 18.6377 190.228 cv
18.27 190.55 17.7524 190.708 17.0928 190.708 cv
16.8599 190.708 16.6274 190.686 16.3877 190.655 cv
16.1475 190.618 15.9077 190.565 15.6523 190.483 cv
15.6523 189.74 li
15.8701 189.86 16.0952 189.95 16.335 190.01 cv
16.5674 190.071 16.8149 190.092 17.0776 190.092 cv
17.4976 190.092 17.835 189.988 18.0825 189.762 cv
18.3228 189.538 18.4502 189.238 18.4502 188.855 cv
18.4502 188.481 18.3228 188.18 18.0825 187.956 cv
17.835 187.73 17.4976 187.618 17.0776 187.618 cv
16.8823 187.618 16.6802 187.64 16.4849 187.686 cv
16.29 187.73 16.0874 187.798 15.8853 187.888 cv
15.8853 185.143 li
f
21.1201 157.683 mo
23.6201 157.683 li
f
21.1201 157.683 mo
23.6201 157.683 li
@
300.121 157.683 mo
297.621 157.683 li
f
300.121 157.683 mo
297.621 157.683 li
@
17.3257 156.723 mo
16.9956 156.723 16.7329 156.843 16.5381 157.068 cv
16.3428 157.293 16.2456 157.608 16.2456 157.998 cv
16.2456 158.396 16.3428 158.71 16.5381 158.936 cv
16.7329 159.161 16.9956 159.273 17.3257 159.273 cv
17.6553 159.273 17.918 159.161 18.1128 158.936 cv
18.3081 158.71 18.4053 158.396 18.4053 157.998 cv
18.4053 157.608 18.3081 157.293 18.1128 157.068 cv
17.918 156.843 17.6553 156.723 17.3257 156.723 cv
18.7954 154.406 mo
18.7954 155.081 li
18.6079 154.991 18.4204 154.923 18.2329 154.878 cv
18.0381 154.833 17.8506 154.811 17.6704 154.811 cv
17.1753 154.811 16.8003 154.976 16.5454 155.306 cv
16.2905 155.636 16.1406 156.138 16.1104 156.798 cv
16.2529 156.588 16.4331 156.424 16.6504 156.311 cv
16.8682 156.198 17.1079 156.138 17.3706 156.138 cv
17.918 156.138 18.353 156.311 18.668 156.641 cv
18.9829 156.971 19.1479 157.428 19.1479 157.998 cv
19.1479 158.561 18.9756 159.011 18.6455 159.348 cv
18.3154 159.686 17.873 159.851 17.3257 159.851 cv
16.6953 159.851 16.208 159.61 15.8779 159.131 cv
15.5405 158.65 15.3755 157.946 15.3755 157.023 cv
15.3755 156.161 15.5781 155.471 15.9907 154.96 cv
16.3955 154.451 16.9507 154.188 17.6406 154.188 cv
17.8203 154.188 18.0078 154.21 18.2031 154.241 cv
18.3906 154.278 18.5854 154.331 18.7954 154.406 cv
f
21.1201 126.826 mo
23.6201 126.826 li
f
21.1201 126.826 mo
23.6201 126.826 li
@
300.121 126.826 mo
297.621 126.826 li
f
300.121 126.826 mo
297.621 126.826 li
@
15.7192 123.428 mo
19.2368 123.428 li
19.2368 123.743 li
17.2495 128.896 li
16.4771 128.896 li
18.3442 124.051 li
15.7192 124.051 li
15.7192 123.428 li
cp
f
21.1201 95.9688 mo
23.6201 95.9688 li
f
21.1201 95.9688 mo
23.6201 95.9688 li
@
300.121 95.9688 mo
297.621 95.9688 li
f
300.121 95.9688 mo
297.621 95.9688 li
@
17.2549 95.4438 mo
16.9023 95.4438 16.625 95.541 16.4224 95.729 cv
16.2202 95.9165 16.1226 96.1714 16.1226 96.5015 cv
16.1226 96.8311 16.2202 97.0938 16.4224 97.2813 cv
16.625 97.4688 16.9023 97.5586 17.2549 97.5586 cv
17.6001 97.5586 17.8774 97.4688 18.0801 97.2739 cv
18.2827 97.0864 18.3877 96.8311 18.3877 96.5015 cv
18.3877 96.1714 18.2827 95.9165 18.0874 95.729 cv
17.8848 95.541 17.6074 95.4438 17.2549 95.4438 cv
16.5127 95.1289 mo
16.1973 95.0537 15.9502 94.9038 15.77 94.686 cv
15.5898 94.4688 15.5073 94.2061 15.5073 93.8911 cv
15.5073 93.4561 15.6577 93.1113 15.9727 92.856 cv
16.2798 92.6011 16.7075 92.4736 17.2549 92.4736 cv
17.7949 92.4736 18.2227 92.6011 18.5376 92.856 cv
18.8452 93.1113 19.0024 93.4561 19.0024 93.8911 cv
19.0024 94.2061 18.9126 94.4688 18.7324 94.686 cv
18.5522 94.9038 18.3125 95.0537 17.9976 95.1289 cv
18.3501 95.2114 18.6274 95.3765 18.8301 95.6162 cv
19.0249 95.856 19.1299 96.1563 19.1299 96.5015 cv
19.1299 97.0337 18.9648 97.439 18.6426 97.7163 cv
18.3125 98.0015 17.855 98.1362 17.2549 98.1362 cv
16.6475 98.1362 16.1826 98.0015 15.8599 97.7163 cv
15.5376 97.439 15.3799 97.0337 15.3799 96.5015 cv
15.3799 96.1563 15.4775 95.856 15.6802 95.6162 cv
15.875 95.3765 16.1523 95.2114 16.5127 95.1289 cv
16.2427 93.9585 mo
16.2427 94.2437 16.3252 94.4688 16.5049 94.6265 cv
16.6851 94.7837 16.9326 94.8589 17.2549 94.8589 cv
17.5698 94.8589 17.8174 94.7837 17.9976 94.6265 cv
18.1772 94.4688 18.2676 94.2437 18.2676 93.9585 cv
18.2676 93.6738 18.1772 93.4561 17.9976 93.2988 cv
17.8174 93.1411 17.5698 93.0586 17.2549 93.0586 cv
16.9326 93.0586 16.6851 93.1411 16.5049 93.2988 cv
16.3252 93.4561 16.2427 93.6738 16.2427 93.9585 cv
f
21.1201 65.1113 mo
23.6201 65.1113 li
f
21.1201 65.1113 mo
23.6201 65.1113 li
@
300.121 65.1113 mo
297.621 65.1113 li
f
300.121 65.1113 mo
297.621 65.1113 li
@
15.6655 67.0688 mo
15.6655 66.394 li
15.8457 66.4839 16.0332 66.5518 16.228 66.5967 cv
16.4155 66.6416 16.603 66.6641 16.7905 66.6641 cv
17.2705 66.6641 17.6455 66.5063 17.9004 66.1768 cv
18.1558 65.8467 18.3057 65.3516 18.3506 64.6768 cv
18.2007 64.8867 18.0205 65.0518 17.8105 65.1641 cv
17.5933 65.2769 17.353 65.3291 17.0908 65.3291 cv
16.5356 65.3291 16.1006 65.1641 15.7856 64.834 cv
15.4707 64.5039 15.313 64.0542 15.313 63.4766 cv
15.313 62.9214 15.478 62.4717 15.8081 62.1265 cv
16.1382 61.7891 16.5806 61.6167 17.1357 61.6167 cv
17.7656 61.6167 18.2529 61.8643 18.583 62.3442 cv
18.9131 62.8315 19.0854 63.5366 19.0854 64.4517 cv
19.0854 65.3218 18.8755 66.0039 18.4707 66.5142 cv
18.0581 67.0239 17.5107 67.2793 16.8208 67.2793 cv
16.6333 67.2793 16.4458 67.2563 16.2583 67.2266 cv
16.063 67.1968 15.8682 67.144 15.6655 67.0688 cv
17.1357 64.7515 mo
17.4658 64.7515 17.728 64.6392 17.9233 64.4141 cv
18.1182 64.189 18.2158 63.874 18.2158 63.4766 cv
18.2158 63.0864 18.1182 62.7715 17.9233 62.5464 cv
17.728 62.3218 17.4658 62.2017 17.1357 62.2017 cv
16.8057 62.2017 16.543 62.3218 16.3481 62.5464 cv
16.1533 62.7715 16.0557 63.0864 16.0557 63.4766 cv
16.0557 63.874 16.1533 64.189 16.3481 64.4141 cv
16.543 64.6392 16.8057 64.7515 17.1357 64.7515 cv
f
21.1201 34.2544 mo
23.6201 34.2544 li
f
21.1201 34.2544 mo
23.6201 34.2544 li
@
300.121 34.2544 mo
297.621 34.2544 li
f
300.121 34.2544 mo
297.621 34.2544 li
@
11.3174 35.7017 mo
12.5249 35.7017 li
12.5249 31.5317 li
11.2124 31.7944 li
11.2124 31.1196 li
12.5176 30.8569 li
13.2598 30.8569 li
13.2598 35.7017 li
14.4673 35.7017 li
14.4673 36.3242 li
11.3174 36.3242 li
11.3174 35.7017 li
cp
f
17.543 31.3447 mo
17.1602 31.3447 16.8755 31.5322 16.6802 31.9072 cv
16.4854 32.2822 16.3955 32.8447 16.3955 33.5947 cv
16.3955 34.3447 16.4854 34.9072 16.6802 35.2822 cv
16.8755 35.6572 17.1602 35.8447 17.543 35.8447 cv
17.9253 35.8447 18.2104 35.6572 18.4053 35.2822 cv
18.5928 34.9072 18.6904 34.3447 18.6904 33.5947 cv
18.6904 32.8447 18.5928 32.2822 18.4053 31.9072 cv
18.2104 31.5322 17.9253 31.3447 17.543 31.3447 cv
17.543 30.7598 mo
18.1504 30.7598 18.6152 31.0073 18.9453 31.4873 cv
19.2676 31.9746 19.4326 32.6797 19.4326 33.5947 cv
19.4326 34.5171 19.2676 35.2222 18.9453 35.7021 cv
18.6152 36.1821 18.1504 36.4224 17.543 36.4224 cv
16.9277 36.4224 16.4551 36.1821 16.1328 35.7021 cv
15.8101 35.2222 15.6528 34.5171 15.6528 33.5947 cv
15.6528 32.6797 15.8101 31.9746 16.1328 31.4873 cv
16.4551 31.0073 16.9277 30.7598 17.543 30.7598 cv
f
21.1201 3.39697 mo
23.6201 3.39697 li
f
21.1201 3.39697 mo
23.6201 3.39697 li
@
300.121 3.39697 mo
297.621 3.39697 li
f
300.121 3.39697 mo
297.621 3.39697 li
@
11.5127 4.84521 mo
12.7202 4.84521 li
12.7202 .674805 li
11.4077 .9375 li
11.4077 .262207 li
12.7129 0 li
13.4551 0 li
13.4551 4.84521 li
14.6626 4.84521 li
14.6626 5.46729 li
11.5127 5.46729 li
11.5127 4.84521 li
cp
f
16.2832 4.84521 mo
17.4907 4.84521 li
17.4907 .674805 li
16.1782 .9375 li
16.1782 .262207 li
17.4829 0 li
18.2256 0 li
18.2256 4.84521 li
19.4331 4.84521 li
19.4331 5.46729 li
16.2832 5.46729 li
16.2832 4.84521 li
cp
f
4.91992 139.313 mo
3.4502 139.313 li
3.4502 140.52 li
2.84277 140.52 li
2.84277 138.577 li
5.18994 138.577 li
5.3999 138.862 5.55029 139.177 5.64746 139.523 cv
5.74512 139.868 5.79785 140.235 5.79785 140.625 cv
5.79785 141.48 5.55029 142.155 5.05518 142.635 cv
4.56006 143.115 3.86279 143.355 2.97021 143.355 cv
2.08496 143.355 1.3877 143.115 .885254 142.635 cv
.390137 142.155 .135254 141.48 .135254 140.625 cv
.135254 140.273 .180176 139.935 .27002 139.612 cv
.360352 139.29 .487793 138.99 .652832 138.72 cv
1.43994 138.72 li
1.21533 138.998 1.04248 139.29 .922852 139.598 cv
.802734 139.905 .742676 140.228 .742676 140.565 cv
.742676 141.24 .930176 141.743 1.30518 142.073 cv
1.68018 142.41 2.23535 142.575 2.97021 142.575 cv
3.7124 142.575 4.26758 142.41 4.64258 142.073 cv
5.01758 141.743 5.19775 141.24 5.19775 140.565 cv
5.19775 140.31 5.17529 140.078 5.13037 139.868 cv
5.08496 139.658 5.01758 139.478 4.91992 139.313 cv
f
3.6377 135.39 mo
3.6377 135.938 3.70508 136.313 3.8252 136.523 cv
3.95264 136.732 4.1626 136.837 4.46289 136.837 cv
4.70264 136.837 4.89795 136.763 5.03271 136.605 cv
5.17529 136.448 5.24268 136.23 5.24268 135.96 cv
5.24268 135.585 5.11523 135.285 4.84521 135.06 cv
4.58252 134.835 4.23047 134.723 3.7876 134.723 cv
3.6377 134.723 li
3.6377 135.39 li
3.36035 134.048 mo
5.7002 134.048 li
5.7002 134.723 li
5.07764 134.723 li
5.33252 134.88 5.5127 135.075 5.62549 135.3 cv
5.73779 135.525 5.79785 135.81 5.79785 136.14 cv
5.79785 136.56 5.68506 136.897 5.45264 137.145 cv
5.22021 137.393 4.90527 137.513 4.50781 137.513 cv
4.05029 137.513 3.70508 137.363 3.46533 137.047 cv
3.23291 136.74 3.11279 136.283 3.11279 135.667 cv
3.11279 134.723 li
3.04541 134.723 li
2.73779 134.723 2.49756 134.828 2.3252 135.03 cv
2.16016 135.232 2.07031 135.518 2.07031 135.885 cv
2.07031 136.125 2.1001 136.35 2.16016 136.575 cv
2.22021 136.8 2.30273 137.01 2.40771 137.212 cv
1.78516 137.212 li
1.69531 136.973 1.62012 136.732 1.5752 136.5 cv
1.53027 136.268 1.50049 136.042 1.50049 135.817 cv
1.50049 135.225 1.65771 134.783 1.96533 134.491 cv
2.27295 134.198 2.73779 134.048 3.36035 134.048 cv
f
4.08008 132.728 mo
1.59766 132.728 li
1.59766 132.053 li
4.05762 132.053 li
4.44775 132.053 4.73291 131.978 4.92773 131.828 cv
5.12256 131.677 5.22021 131.453 5.22021 131.145 cv
5.22021 130.785 5.10791 130.493 4.87549 130.283 cv
4.64258 130.073 4.32764 129.968 3.92285 129.968 cv
1.59766 129.968 li
1.59766 129.292 li
5.7002 129.292 li
5.7002 129.968 li
5.07031 129.968 li
5.3252 130.133 5.50537 130.328 5.62549 130.538 cv
5.73779 130.755 5.79785 131.002 5.79785 131.287 cv
5.79785 131.76 5.65527 132.12 5.36279 132.36 cv
5.07764 132.608 4.65039 132.728 4.08008 132.728 cv
f
3.6001 125.205 mo
3.12012 125.205 2.73779 125.31 2.46777 125.504 cv
2.19775 125.708 2.06299 125.993 2.06299 126.353 cv
2.06299 126.712 2.19775 126.998 2.46777 127.2 cv
2.73779 127.403 3.12012 127.5 3.6001 127.5 cv
4.08789 127.5 4.46289 127.403 4.73291 127.2 cv
5.00293 126.998 5.1377 126.712 5.1377 126.353 cv
5.1377 125.993 5.00293 125.708 4.73291 125.504 cv
4.46289 125.31 4.08789 125.205 3.6001 125.205 cv
5.19043 124.53 mo
5.88037 124.53 6.39795 124.688 6.74268 124.995 cv
7.08008 125.31 7.25293 125.783 7.25293 126.42 cv
7.25293 126.66 7.23047 126.877 7.2002 127.087 cv
7.1626 127.297 7.11035 127.507 7.03516 127.703 cv
6.38281 127.703 li
6.48779 127.507 6.56299 127.313 6.61523 127.118 cv
6.66797 126.922 6.69775 126.728 6.69775 126.525 cv
6.69775 126.09 6.57764 125.76 6.35254 125.535 cv
6.12012 125.318 5.77539 125.205 5.31006 125.205 cv
4.98047 125.205 li
5.22021 125.348 5.40039 125.528 5.52002 125.745 cv
5.64014 125.962 5.7002 126.218 5.7002 126.518 cv
5.7002 127.028 5.5127 127.432 5.13037 127.74 cv
4.74756 128.047 4.23779 128.198 3.6001 128.198 cv
2.97021 128.198 2.46045 128.047 2.07764 127.74 cv
1.69531 127.432 1.50049 127.028 1.50049 126.518 cv
1.50049 126.218 1.56006 125.962 1.68018 125.745 cv
1.80029 125.528 1.98047 125.348 2.22021 125.205 cv
1.59766 125.205 li
1.59766 124.53 li
5.19043 124.53 li
f
3.48047 119.632 mo
3.81006 119.632 li
3.81006 122.73 li
4.27539 122.7 4.63525 122.565 4.87549 122.31 cv
5.11523 122.063 5.23535 121.718 5.23535 121.268 cv
5.23535 121.013 5.20508 120.757 5.14551 120.518 cv
5.08545 120.278 4.98779 120.03 4.85303 119.79 cv
5.49023 119.79 li
5.59521 120.03 5.67773 120.278 5.72266 120.533 cv
5.76758 120.788 5.79785 121.05 5.79785 121.305 cv
5.79785 121.965 5.61035 122.482 5.23535 122.865 cv
4.86035 123.248 4.34277 123.435 3.69043 123.435 cv
3.02295 123.435 2.49023 123.255 2.09277 122.895 cv
1.70264 122.535 1.50049 122.04 1.50049 121.425 cv
1.50049 120.87 1.68018 120.435 2.03271 120.113 cv
2.39258 119.797 2.87256 119.632 3.48047 119.632 cv
3.28516 120.308 mo
2.91797 120.315 2.62549 120.42 2.40039 120.615 cv
2.18262 120.818 2.07031 121.087 2.07031 121.417 cv
2.07031 121.792 2.18262 122.093 2.39258 122.318 cv
2.60303 122.542 2.90283 122.678 3.28516 122.708 cv
3.28516 120.308 li
f
.232422 116.115 mo
.232422 115.373 li
2.4751 115.373 li
2.4751 112.688 li
.232422 112.688 li
.232422 111.945 li
5.7002 111.945 li
5.7002 112.688 li
3.09766 112.688 li
3.09766 115.373 li
5.7002 115.373 li
5.7002 116.115 li
.232422 116.115 li
cp
f
3.48047 106.995 mo
3.81006 106.995 li
3.81006 110.092 li
4.27539 110.063 4.63525 109.927 4.87549 109.672 cv
5.11523 109.425 5.23535 109.08 5.23535 108.63 cv
5.23535 108.375 5.20508 108.12 5.14551 107.88 cv
5.08545 107.64 4.98779 107.393 4.85303 107.152 cv
5.49023 107.152 li
5.59521 107.393 5.67773 107.64 5.72266 107.895 cv
5.76758 108.15 5.79785 108.413 5.79785 108.667 cv
5.79785 109.328 5.61035 109.845 5.23535 110.228 cv
4.86035 110.61 4.34277 110.797 3.69043 110.797 cv
3.02295 110.797 2.49023 110.618 2.09277 110.257 cv
1.70264 109.897 1.50049 109.402 1.50049 108.788 cv
1.50049 108.232 1.68018 107.797 2.03271 107.475 cv
2.39258 107.16 2.87256 106.995 3.48047 106.995 cv
3.28516 107.67 mo
2.91797 107.677 2.62549 107.782 2.40039 107.978 cv
2.18262 108.18 2.07031 108.45 2.07031 108.78 cv
2.07031 109.155 2.18262 109.455 2.39258 109.68 cv
2.60303 109.905 2.90283 110.04 3.28516 110.07 cv
3.28516 107.67 li
f
1.59766 105.218 mo
5.7002 105.218 li
5.7002 105.893 li
1.59766 105.893 li
1.59766 105.218 li
cp
0 105.218 mo
.85498 105.218 li
.85498 105.893 li
0 105.893 li
0 105.218 li
cp
f
3.6001 101.107 mo
3.12012 101.107 2.73779 101.212 2.46777 101.408 cv
2.19775 101.61 2.06299 101.895 2.06299 102.255 cv
2.06299 102.615 2.19775 102.9 2.46777 103.103 cv
2.73779 103.305 3.12012 103.402 3.6001 103.402 cv
4.08789 103.402 4.46289 103.305 4.73291 103.103 cv
5.00293 102.9 5.1377 102.615 5.1377 102.255 cv
5.1377 101.895 5.00293 101.61 4.73291 101.408 cv
4.46289 101.212 4.08789 101.107 3.6001 101.107 cv
5.19043 100.433 mo
5.88037 100.433 6.39795 100.59 6.74268 100.897 cv
7.08008 101.212 7.25293 101.685 7.25293 102.323 cv
7.25293 102.563 7.23047 102.78 7.2002 102.99 cv
7.1626 103.2 7.11035 103.41 7.03516 103.605 cv
6.38281 103.605 li
6.48779 103.41 6.56299 103.215 6.61523 103.02 cv
6.66797 102.825 6.69775 102.63 6.69775 102.427 cv
6.69775 101.993 6.57764 101.663 6.35254 101.438 cv
6.12012 101.22 5.77539 101.107 5.31006 101.107 cv
4.98047 101.107 li
5.22021 101.25 5.40039 101.43 5.52002 101.647 cv
5.64014 101.865 5.7002 102.12 5.7002 102.42 cv
5.7002 102.93 5.5127 103.335 5.13037 103.643 cv
4.74756 103.95 4.23779 104.1 3.6001 104.1 cv
2.97021 104.1 2.46045 103.95 2.07764 103.643 cv
1.69531 103.335 1.50049 102.93 1.50049 102.42 cv
1.50049 102.12 1.56006 101.865 1.68018 101.647 cv
1.80029 101.43 1.98047 101.25 2.22021 101.107 cv
1.59766 101.107 li
1.59766 100.433 li
5.19043 100.433 li
f
3.2251 95.6328 mo
5.7002 95.6328 li
5.7002 96.3076 li
3.24756 96.3076 li
2.85791 96.3076 2.57275 96.3901 2.37744 96.54 cv
2.18262 96.6899 2.08496 96.915 2.08496 97.2153 cv
2.08496 97.5825 2.20508 97.8677 2.4375 98.0776 cv
2.67041 98.2876 2.98535 98.3926 3.38281 98.3926 cv
5.7002 98.3926 li
5.7002 99.0679 li
0 99.0679 li
0 98.3926 li
2.23535 98.3926 li
1.99512 98.2354 1.80762 98.0479 1.6875 97.8228 cv
1.56787 97.605 1.5 97.3501 1.5 97.0649 cv
1.5 96.6001 1.65039 96.2402 1.94287 96 cv
2.23535 95.7603 2.6626 95.6328 3.2251 95.6328 cv
f
.435059 93.6226 mo
1.59766 93.6226 li
1.59766 92.2349 li
2.12256 92.2349 li
2.12256 93.6226 li
4.3501 93.6226 li
4.68799 93.6226 4.90527 93.5776 4.99512 93.4873 cv
5.09277 93.3975 5.1377 93.21 5.1377 92.9248 cv
5.1377 92.2349 li
5.7002 92.2349 li
5.7002 92.9248 li
5.7002 93.4497 5.60254 93.8101 5.40771 94.0049 cv
5.21289 94.1997 4.86035 94.2974 4.3501 94.2974 cv
2.12256 94.2974 li
2.12256 94.7925 li
1.59766 94.7925 li
1.59766 94.2974 li
.435059 94.2974 li
.435059 93.6226 li
f
.0078125 87.3452 mo
.577637 87.6748 1.13281 87.915 1.68018 88.0728 cv
2.22754 88.2373 2.78271 88.3125 3.34521 88.3125 cv
3.91504 88.3125 4.47021 88.2373 5.01758 88.0728 cv
5.57275 87.915 6.12012 87.6748 6.68262 87.3452 cv
6.68262 87.9302 li
6.10498 88.2974 5.55029 88.5747 4.99512 88.7549 cv
4.43994 88.9351 3.89258 89.0249 3.34521 89.0249 cv
2.80518 89.0249 2.25781 88.9351 1.70264 88.7549 cv
1.14746 88.5747 .584961 88.3052 .0078125 87.9302 cv
.0078125 87.3452 li
f
0 83.9629 mo
.5625 83.9629 li
.5625 84.6079 li
.5625 84.8477 .615234 85.02 .712402 85.1104 cv
.810059 85.2075 .982422 85.2529 1.23779 85.2529 cv
1.59766 85.2529 li
1.59766 84.1426 li
2.12256 84.1426 li
2.12256 85.2529 li
5.7002 85.2529 li
5.7002 85.9277 li
2.12256 85.9277 li
2.12256 86.5728 li
1.59766 86.5728 li
1.59766 85.9277 li
1.3125 85.9277 li
.862793 85.9277 .524902 85.8228 .314941 85.6128 cv
.10498 85.4028 0 85.0654 0 84.6001 cv
0 83.9629 li
f
.435059 82.7324 mo
1.59766 82.7324 li
1.59766 81.3452 li
2.12256 81.3452 li
2.12256 82.7324 li
4.3501 82.7324 li
4.68799 82.7324 4.90527 82.6875 4.99512 82.5977 cv
5.09277 82.5073 5.1377 82.3198 5.1377 82.0352 cv
5.1377 81.3452 li
5.7002 81.3452 li
5.7002 82.0352 li
5.7002 82.5601 5.60254 82.9199 5.40771 83.1152 cv
5.21289 83.3101 4.86035 83.4077 4.3501 83.4077 cv
2.12256 83.4077 li
2.12256 83.9023 li
1.59766 83.9023 li
1.59766 83.4077 li
.435059 83.4077 li
.435059 82.7324 li
f
.0078125 80.5649 mo
.0078125 79.98 li
.584961 79.6201 1.14746 79.3428 1.70264 79.1626 cv
2.25781 78.9829 2.80518 78.8853 3.34521 78.8853 cv
3.89258 78.8853 4.43994 78.9829 4.99512 79.1626 cv
5.55029 79.3428 6.10498 79.6201 6.68262 79.98 cv
6.68262 80.5649 li
6.12012 80.2427 5.57275 80.0024 5.01758 79.8374 cv
4.47021 79.6802 3.91504 79.5977 3.34521 79.5977 cv
2.78271 79.5977 2.22754 79.6802 1.68018 79.8374 cv
1.13281 80.0024 .577637 80.2427 .0078125 80.5649 cv
f
.625 lw
21.1201 219.397 mo
21.1201 3.39697 li
@
21.1201 219.397 mo
300.12 219.397 li
@
300.121 219.397 mo
300.121 3.39697 li
@
21.1201 3.39697 mo
300.12 3.39697 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (008x007.eps)%%CreationDate: 27/05/15 9:57 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$=hic7&VH!;?Ib84!NZH,uL@a@,09%LHZJ+[CSMhYmF5fD\pEb#QpsoR$G9B<?WOJBB1[Ot>@nAS8=gXe04mU\V@GqX6aS%f&X3<Bk^9te%2BQZJ"W+PBthb-?#rn%0c@3Uo:6!OZ+jj7^"4cgQkP*?E*Vgo2T`&N]O;/HFI*p2-QR=6Fur9[@,mT^7cq)oL>VP%nsRY'n*#hoO%-h<l?lTYBj&_S!0ibhNLu8$mGR0n\_^I[,E`%-+#0qi/jb0Z_05t;BtcEQC@rg)ZsMM_6BAbJ^jO)X:[>\8WW?Qp%7beaQYP1H1&=!/QI="kAqrm`7e_WfsH(UiW40A3X[I]5]QdC5:XJAQp+j\I!?gU=j=3&0T,sAFV<q3*ZSX)[/`2+.M4cg*u0.:87%ME*Gms7K7hcU)ri?EMa>6pg41hW`)\e3X)&,`tmnjQ*49n!l=$HAFWt5W05%I]HLf+Cb9IEhiJ#COcsUT;98*[I[Gf+`4\,5>_*.%[)FF9'i_2_f/lBH5iAkPDk=?h0UMA8Z5-*b6%67QV;ZpC+G*5/Wl>@fc6pF9=9&Rn%Yf%XP]bXSGl)/,=Qt*"-T^&JI+0,NRS)9X%+.3)@-2_\frs>I!cFmPt8Jt#V<SVff85ap:PRog$7qU>RINX3`$Gq]hCa![SO>/RbeR!AAXfJa^2"KPr`nrp5/IDAS<VSBZpdBjt%rY:>"WiGPi<T0pW_GaG\:Wm<oS%N;L:s(KMQXN-._gkX>;(aYp[LHea)p6ek=:>%\;RR%2i#@&1WF?H3'oVQnYm=-_74;(e_p`YZ%0];>=)4m2<j;l)liKs%$.$CLt-@;m>qgqTl"a,Dm-j=a&2'pSA7dp^qTLSDWok'@0mm<T''7N6,i"IdV3>'J3,PZq<_d@p\SU`&L%-D:sHTO.*oA]eS71&V+87)hWP6qZr?hBXs+g_8NNDhL/jc?-usOFL(6l3Er3M.i"#RQMf5K>14ilGk_TUdEplqS=QWK%^h8_^FC_%+Rf]6TRQB%Zq.9OaHb*WMTc9TF(RX1B7rJnFXT]>`oKI$::LPS$"&?<_9DO?9!EeA#&;10'5@bjP?O0J:d=`.;T-;CIRGOD?20(.%:qK\m=Z1%W6umq^Z#40kbZ:+=!U%C!Lb5iS_/r<1::MNH-Zk4#J9.S"<]@lWP[`,KG4IhB:AtjN8]rC19QX$?6SObp5@VB&CFASH%ZE1Gp/W7`mZ$g*;bjHMKK=;j?@P-E`16]#=#N1D0'&If-_0BPh1:dTAGuL"Tr"&c>Y:.kLMF*moJ&sq=]&94PQi'KfFe(df^Z;#$%P2FPlo$=V_Dp)Us/c'C6SNLokP(+DijL=`Ir(CTo,m&)cP(/sjjL=`Ir0-n?im0o7n4E7EI^<DB0<1Y='fE[0P4WeJ/<Ttkhn%A4%[j7AZ3,$=@A?<PEQh/$2pMV0kIuIqA\)=_uK)\bP<6p_\J"sb)pKuVN]1CdG&-F223(Io(Dc818Dj!hnHQa6';U3kP0B,+`4]\G`%KZtY/2D:iSG601X9*VE&\Z#kA=Y5G?i0V"UFb4oh)]4Y']MD.gS+%E_bt@$j9[9=t?r4l%!olQd_C%U2bXI!(5'7@7&*Q*HI/Tk!%BR=DA.Zl3c(0&2rE_/("106<Ae8uG>O`J[?aEP25^?[8c<<g#"$7]7lS.eN+67Bq@KGH"rjG'V,nf4iiIXs=Ak->/T!CH-MGPD;u%KY@m0Tbb6,e<Fq/0+X"=JT(Cr>;!3QBV?dmKQG13YVk(/N4Ff&hI)X[Z8P'm-l`*OP"oT+m":P=V0#B?\1TO1:;&Y?h0G?O$c&W;%q.!'/<68(:,f>C0CqA[uE+g@O8o)nT*H!$3nf9\8-)"lUGfmt6+FNC@V(l7Sq^cf[b9C$'28Y2%94uh-/]Ei"/gh;\=I!2.1$UYI%LTO!RD;L@B^0#/oF$s1`H(S2s9O!8KD3t/7Ag=)[iIa^]QNDVu2K^m-':\NLT$+4l/g&A$JqjGH%<OG#,]/Q("Ua&ISJl7]9&4Di%)K;k6jD?:kGVF$gUrD71b?i;aSlVqt,t`o+P4Qut35\".,!CC'_(OL]F6Y6$D9NT2@:KbfSou_"4"%[\DB05gj_^^2IGP^n\]$Zo%PXccjUh'"=K:aWZo9?uVp4s@Q.Sp?$;"Uq*Aq5rLWCOD9H4iI%=&4cREGF_*9;;;gG7Wf3*S(&FDe1KE9i>n,6JMsibTenMn\.T!%=\>/f223W5LU16/jQTgPbS0LuQ3lhLi^o8Qmd98,"DiXTd/-]-PIJa's.-':cchRD48IXjDsuFugr\H6i0nF%=p+"^5X+7'p6T4Y%_T@Ugr<Cu(-2QJoDtLm9gV,NBBLUCiFk`R3.nN1l=f%hu,B$D^\A@>Rr(T*kMID-s5LtOn,4ds\afr)6Jkn!+^35/%"s!(mnOO?)%*@F5S9>>D&:P`At)V]eN%/ms$_[shn_^We]BYB:4]hi(qW='Y$o`#]m9tl8($,>TML=6L_BGKgWXc:ScR"$DF0H4LWY63etYX%ae%8WA]]/TJFA8>Im^1;IfFn/]M*"<[1(AdRPAg9tnZ1.Xl,Oj)rcg$E=W#-gnnXk<K%i,b5R4c_Y+7dH$rj59BjdsCJ\9d7+BpZ"OI%Q2YG`<&JfKT3..EN?@e+X4-oZmkeBUWTj(Zla`TNlVq4fZ1R#HYPLmFQ_(&SkM,7I8$AMfI^F0iLrt]lVk,4GdED;4q]#KWWW(W:%Ho\ADk[sFiHDB"+cuM[b=\E+&47-_27u_8ig.>d6a'AH8$U(I5)*,2I=:D"u::H2cL0qbc49RtX#`iF+WqP;u)i]0Mf&aE`:H.;:%(6.eT"lf!AoLA#Aqjoue[2L$eq[pkD_&*O@ruEqVn-dLY-4s'=-!J)WBt`!mf24i1K.3IKs(:W:C8:=heu?+85@46npcR`(aKm.H%p%R'ZX7=U9EpQAJ**#)6O-`?7o^?\$rY:.sV"+</X<BsLhTb#fp!nf)eb&*Q[9^g4HgbNNnrtBK+-?dDII-lZ\F[,M'3I!UrS=Dr%;h_nslT\,A,JB2-^.$n^qU=ZakL,':l;p,3QR\MSI'lgOBFu\AR$-[Eh'`&BP%&3OHRZCF.&F-H7R)(DQX:$jT<p/GpX?VG;S%Uu%=!oG!lFX'm$H2<`VU>W9(]D;mU+/2$798uXg8H76a'9TIVh,\"JZ!CcD[H1%-$?T2M(i1+6s)b=7(N!@!>cS@=0b48&]4Z,ruVCh%6lo_9Elon:4XN>g@tFSJl@`Ld0-H6hkAU9&8f)ZtUM3+f:@jXY@o$1+c*s>1)fdj=2KU'_W4\WQCnN+B?T@?#]Cc[!C!Q#DmA2aW%+2-t28)pB=2^ut4_lENYVd<ZLI1LV#9'GM2]o#\?l,0-"qkocEWM1`hq=l&5Z*^hA:#;;Ph65EoI_LI?@(POGO-`lVfk^lt'Y[S@%X1tUh@?u7S0R&+Ji=`BDaAeVa2B"P3?iEg8FZsR)m`5@WH"DYtf,4M5B'\QbKiigL]r\-1SSk2,h*H;"IMu4a.KS0c:q`mBHMSM*%<BM1O_M,&haoSLcf%BUS.ugRSlMTPC7M?N(LQ<dcRfDuoWf8*(^nu5j+8>bPe#.om:8^_.`6H,"]iV<ZlPc>qGq]I%WcgS+84H.\%h1#M?s4;Pkhiu!P;s*3?UJXC\KpM9((82jcI@ZG^T,o[ILEH3Doj8*_.eGm^\,M^/)nS^[No?OB2Q%plh8bkSDQi`@(f4>m=o$rT%"04f(3q.cU^Z&6(fjXX4=uiP!>T@f)cjEV*Oh$Vb,t_4a+5!^=s#s;:[HKQ(#3t:7[HRHE>Kn9>r*QNEj8P[XJcrgGhqV=C$HZTJ%md#B%YP!G%`lH8@dJ`$]S@3l-06OqPp0UrMO3L2#aS,thU&MgGeGXdMhiY>*)kI"7[JAR\2ZNTOp"lHZ,\_Ns1R3GmN@=Ds[<f$+%]Y-fG[h[H999uFQbGrOkn#t>aX+uFbQ259WCjD%Y=D\!30<&-)"o]g=/aAi)+7Eu8fAV[EGp*/2p+d3GW-3L5X_Oc"IY#E>nm#6Q%`<n/[<mo<!%?X(@C`$gK\uH"%P`m5<ldV=F,11E8A4*b(?BU#3MUgirea=js)Mu?IO,P6+KSI:&=s)#G8\K,p3[(U13qqm6<qc]&%^eY[tCZ<a%ek\Dg@&LV3RAJ;&B.Q9lSttKIE1'X`L$M>Qh0,RipO9OA8KO7bAY`&Lecg4OM`B`bD"&(5_o/^BlnM8T-5N&bAZ>ru%5eC3pW\@TAXgLCa]IH<!?e$d2"B-i!AB,q+DS+Hj]N8rt3!R.3P@":R[<QeVq-`"n_VD>=h]i2iOldsWU)7U0d]Yc`fk)tjemJ)F%)Zmg>d:lb096j*JG+\(^je#"p)<XH%dm^@2VpsrKMQBZmKXF*:Z$?IJ^?%$n"YeF%kqtYnolR[pBmh`QT`j:9ismrFDD.!12Ne53%Jc:Rrg)K%;iH/Vt7D%ABnnp=oL!E]LK*iF\NCFKhY8r&gQRb!uXj5nkCU``>MuX1VlMkG6,pB3>(@>MaR/[PV6-=YZ2QG"<k+aK^%P!`3R_7c6Ta>-`>nN:2o+UCl2*t+Abm`aG9(EUj4/kVocQ;n[K0E^P!d[Ym0P"sgjh(jTk()I]:<jtCG[e\f%n%_8ISq'OlAYfCt%OESZ\>P>X"DrK03C4fR/1f62>a`c`,_":('q9aU\9cFln#gg0hJYpCQ!*^)_lk5%f?509-!6&*A/\E/N'41UrU\d@.Khd!F?9S3<%XN9J+$!kqRZW@*Eq4lDui6V;CC&OmYA:9?;,I+8S&R-U/r'X2_$o=JeZ&K3h>)Zl\h)[ONb)OXKk_OBJ[(-CM.nKA%PslpWT&Ts]%5d(V`/luEFlcln.A78^V:[(+Xi3i892G7!/=b24GCBd[_?C.J/pZo%CpfAIT^Rm(\qd)tMja4sDL2UeoHUGaroJn'I)Aa.dmNV/r%dd#?I[Jg23\o?$]\K6[bWpZtB*e!sqhE[lCn_PtJmg4Uu=\`lVSYdpan\S$6fT_)VTY1F[B5U%C3V3`K>[obSMU>7=X&H-K!#'mJ%%-frWh7V[4@^3dcMI/B>,DT3;lkCTq<hFt"/M"3c^-;/7NI&:hH@='<FR)JT)t:3"<jMMGb?(9p,?qkUH7'Mb>q#O>p%PA2K]ae?%`*2=>4'cZrG#V,$&%><b<BGUf]lSLeQ5)bCkEQ3>P-hi+s(nKlFR/Up;%I7,$bbs;Ll+V^[8&YVf&%lgiFHs(C9uT6k-mb1I>->#%XrAR!;XgU[&lGI]KQUPR0&pej&97WWST"3rj?*TLmFk?(JSl0VQWC=C:]VEKLDOV];%)`Qq*HJ]>#H2=lN&<ZUrfN_qN^Dl9:EGA%6.b&Mf)XMmrSbmhL!Tt>>u#>[hP0IXb!S<3?UKSD;7.3D#g'6)=5lQiHpP[<MHa!Vau/L'<G1&]5b[?On6!&L!K>Y1W],Nl]Jb-4%ma&4`biUKTCU?1,/]W8E(3@-?i@AebReS-=E1/%u)7t.6R;'Yhh.sE.QYiCHNb;rBm-7$B@h]`hN_u6d*M]]oC]FA?#<8<USM9)Y%EZJT/?Ef<,d<>0loerus%Z+$MZpJ#\;\@/S?I8j*>cYV+O"IG.psnD+lP[*chH.,PoemC&&#Op7mX=_0QP\fod^;*kA>!bNYX(!1%'Wu>p=7n5;=rp"+NG:QT=3P\.dXkpk2""t&h0_;0<2TQ`dL:1,UeJDjo!]0an`Qn[dr36QA@_H53d0ASjabLd]>K`e,&J58%Bgq\%^\3#To04eq)-!chJIu]U!b%jfk<[%!3.iZm/F0q&X^9Z,&s[R/DhJ-Y>6uC\5RGYB[7_E<N2"1Vd;Pi'b<=<sp+V0-HM?I%)(!CJ%]9C:)8&G`9$GEq(0u\ZPs+sfN>Ykhpk4l"A;Z.>UYZgo!mrYO]HM($dK0c\&qQV=GTb&^G!G?2YH6h<'_[?kNO_f^fjdf7J6)Q*9%1aT*!-oKiSGP?![q793uUdeBg6MrGcP[Ne(m58SIG.SM`)N%D?]NblhW%9dLL9Nu_j!A@eoo<hL3Kt[bT$:bu%"kdP?E;JPj*@i7%)R[Z\Qm7:KF]LI2'4fGIS^6`Gl:^)f7+aH:6%$J4b-bq':k\0LGOO5)d0)La5BA/#JRr*8I$&Ok$jbh)05sa@<K\P3,rlQ=8Yi!r%K>ZUI!=!Lqh9V-?l6;[h_+*@-l:*"75*!g[`erR5>PqfZ/X6W\75;VbM=C"BI!ssbDkRZ0]l^i.&6-]r5'L5WOQ%KeVsMfM?f\34%;M+T,N`)"fd:'%gPK/W9=M-131,N4\P%4?`M:_!"d,Jm_I=^AOepk+mC0m-Q`L>?VoSM&^?hJj.5<b0&f%oUrlo/5uV9#20"#;+3%1!gE_ZW$t`+p8h&qIsq^a3mV'0Lii=]:qNXZ`=ng"fX2f5<$4NhG`C&U+IB=W;OIds+VUHWiKdGNRFl@osm57Z<Sup9%PTkWA;)5%@_?>olLo71^+a\mb%>6e5*n%8K,Zm.p\o^b4h]u6ZTehqRCW9s;J'7h=/<_(oe\#!B8X60XfHR<&TadED>!C47GY1IbIB:@DO0FW%at<3_Q"nTCC&>/A9P$;VQ0%3%\b<l-g7I,+Z*ouOoB"P_G-T`2]9,]Ejm08Do(qp84L8o`.2?tL=k/VP8EDlQ/MhV@Y`kKak,lko%9E#W?AH?U'1\Y##1V&Rm7OHaApjfC+`2[Nm-W35l4lMVs`G&VLZAhg!9"(]WQEN.ier<`)J:++F<k=*H&gD;fBmP[;S"71VXd3$=%f$E^*<bBblC;/'&[Sg8ikPFE\!O`nED=Y7`U0[+lFma=II:1RD*YL>VGP4KF;\iulCGH[eTg88LgaG0N;csW6rE0$b";-(Igjf(D%",I_bNK`Y?i^X\s^M@,t6$;#7m-OSH5LH=4amRYHX6iEaoCJ3=R!tVd\\ggl?3IQ3=^#)<+DQj2=GsAk5>ghE:+DlQ*;^=BA\2I6%p-SKBA,jKNY0tmGWtIsFC:Br)#Dr2fF8)Eq!mr!nj?<U*?)h&@2hbSf>('R[Qrp%MO/Ad:3n;O"XTg,0)V=SX6PN_c@e[TXJ+8J7%51`SPiDDhC]bPpO50TW>";3R"YGY<dBI`<kMmSA1BQmmnlVI/oI*f%Q.s$/-]2L63Z6.In(6R/)F&O%N/\elK<j/@*/KOU!*@nmm%'.7/0Tc[.2I",MC7):6tlY;Ak5F_Ph+JMkMC[UH(TBMTJ5#n45Y<>:Q+7&R=k>l;&YNMfHNFqiK>J;=M2t&rR/tt9t;T5/mJ`ocL%dHu5f\("@mOYtnM\lN]eWW>MIEV$M;IL%-$P4iPVD%BK3Kok-d?<I*T3B6OTHFc)4"qoamT;kchdG&s2oJ&:ZW;+qdDnCI;H]srm%-$h;rHj_3GqL2,OY<s#&:pO<R`Emo5T4g[<SsS&pQMlZKGK0cA?9E+bol.\7>Lu7,EcnSH:NV(toC:f7rna"*rScq"LFB#dao8m&%CZPPjGF!@.D9Vkj4o!S,3j^KhQg!JT4S$UFFmW^8B/9QVYKs&iO0;hrU=R0Y=D$rLIM3<!pr5^!0BRMUT1AL8&q*f%SjnpUWDmLa%;.XKRHJ;`SMY&a3YRX(aqKeUN?f.jLUqHSLL<(uk]WSKnRTu^XH`OKERV#AdT-H`_Y2p\5,Fn(AcW;ke1lmKf\qj[,B:dY]f^fZF%?/-JW#glXtDr*o^J"LLl#>^_c3jDN:Etb)EcX2*<!a3WLf?S]U`U%e-j7U1`YD!EXFQ#4J&ari&rcCW@[sI_pn;K!lmISGTeq3MK%oCVl]rjiA]q@7#=+2=`'o-;jkRLFE[l!SP?R&*T.eP4@g_ic)Zhq_)Oqm?/_G*U2S4u\OG(@D6r>0>(2;t/91lGJkXe0?\XHsN/Q%GmSl11>?&6JtG4K^+T7F`=auH&'&"J[fbKq[O8PNcF`0%ldWE2_0nNEZ1s5@Q,aZQ:S2i,RnR9TcS%nsCm=2UoJ6;Ka94`@.kN;6%:\uF2P^P55!oO"-4)/[=55i,j2NIa-;MfgMQ<,,ZhF?$Y?IT(LmOHr5<T)>mk4<:5=CRJ^adp&3^o*[fqp4rNVn:+:QlIZ^oo(Yg%>6oIXhj-0eB3:]@VADBkB?uUMX7U*\^Z96sgLj;d1[BM9ELWMe=CoBY^Se+kCPUnJ1c5qYL;itV,)fs-DMug$9UqQ:+8(_pRF7RT%R;Xf9^M@2ORI@=8prEQ=S=(mu']J'b\N5'=7cSSG83@<W=$>5EI^:i-9J%@2e)!@8MESo#\-brXpPV^gd*ta&9ne"r3JF>m=$PW,%d<#UjHsPb(`X<m3cT1(@`\q8:1[fA8,15'ijm>$XW%gJbhJV,+rOtW7]%`]>U8SIr,mP'Jb-)&JIRImsJI_:jYHC-t-5+j(-Np0p%_8`H>Zo0p)mL\cG^Xl87IUDaRGia;3l]r.=C:K)^XojM)nLc>@7-SA)cQ.79<KDZ=mdLcQo_Lb]VIS_jk3D]sFiAEW5b]rVGkWSs%Pf`e7`H*b-[PARG?p#V>,RWRo1RCl&2C"9t;=1-p<q3'\'jd&fHhdDO7[>jM^E5A;%RgmA:f;e@G";MM#-.:NqQ(6jEZ4ApoTqYn%KA:tPVh:NJ'$KMXouYL;KobbX3TjnK4^C.E;gfXh6:+slkEaggr!3k8f\7(S0Fo]-enk`(Xm.60<nWF-?smP%90_S4>Ef+/5ViHO%2lLK7D,S:e.Dno!U[VSCAbjB'HY,Q2?AH1<$)hZseU?.WALsGqTq@N&RJWC\dNN+L:S@+mc]KRY&UG]UmHW@UrW&.pN+2&#hXP))%Q)./;r_+Kah4IWC<i$fa@cIbo@\G=H59"s0d/?BC+-^oM7:JmG)F=iT';L$O,>s#hB_E@H_/WerRDA[8_"TrfIkVOsVa8[:b@@6.%_P3u:FO?.CT%Wm=N^=N%fGE^r^H]):D;BVqb<6SInn;]Y1LSCG[s]MQA`Lee*DfjUf9:8\&+0*'57a6$eZ+7:A+OT9,75"@@l&+k%ktY^N'-OoB9eP9&DWWk?a9RtNMtH^ImIe-(<Jk\K^K'8qSo</^4fsl_,>$G8eVgd4E']+_[e;&!mum`P9!`MP<BnW%;XO2rq^/1\%d2KS_0GV55Gi4S.m9uT,PDHoQ;Lk4ug2_=FC-0Q>"2k7?W*lDd_%ba1ZcgR9\0^0cOM?`c%k8WUM20=2mUl=-r+aoge_u<ndWS\4%]D;iajL@<r0$hAS/ZfCdD<Nbaj;FjSpAu)Pe-R3fSPBa.h_qKR!KG,-MT?9g3E#ulW%Pb8?bTRLT"BH:7$`e'Y=\EDH(f-j(8?uF%I[/Ek!rKK,2UM9pg[qDo%3,o^NYm%Kl-_4'c.r"Z4!q.[K=&5o'%qGh?p,N/m*SaKbO)4@h,9,tY1)oq0\'C`%:JGiKQ7aAOr1eR%9Ebsk\E[Pfc^sWbq>1@3iF@>'rgMdJ3hehq(Q5')XeW(.N'ZZi!SM1.<0lY2:5Bu2!nh_k,USqt,0"cI,kfk.RD_LS2Lra"Y)N^!%Vf1SK>Oa`tYnp%g3o3Ue'g)fl@iJM<RCEnLs&RfW*?/.^gpm3PLbVaRA,_Zp@5ZY,3ihgX-*D@f\4L7sNU*jk+f2NnjkXsM:Nj_l%r^4TjBVuEX#Z*gg`1Q#m1D8[N;VAQ8EK;]80g\>GgX4:&1GbO1kV_8++`r.u0bn=Rju54EMjdD&qo$=LgioC^69#p4gB!5i%#p?n%$';7nIBl3b_)O^i_0J<;TK?0/]%k+(Ns,(5@$\g-k52D(^jRjT&SD\l/DL9m,]Nh@qRPbcW.n6mL$gU7f1<`eJ+6WXcrg;!%P.ll%`i*5o)l^YO:YrbQDT.ZLoZtYDN"9(k]/h]Uoeg^GfL7?"q)%V,A&+Ds&sg.dWtY2>_;3%R]hR:+P3.WS"[knCeW((X9A"ARZHenm%S"J>sMQ^=[pcU;tiX3g4<GcK<WY*Rl$bI>N,NlsQiJgi_pW))AX7!\W1;JHD7X":'$s4[hP'?eLeH+Yn?b<NrI-hN(:G3J4R&F,Z%`tb9C]`6UsUgq?)No17LOTtPVHL6LS*tnn.a:@24';L?2Hd5GKW4g-2h84.iS/\@FA9#ecN_j"E2lEB%,,-#%m:FVu&IqdJ>[Z)[%fpH)[YA^/*^s3rnDXVjt^4@buEHc\ZZ+a$>Y^2nkP</cr/nc`%7rOcDTWp&2%I`LI/NMZi()EsJ`8)A/.g4%@Apf6>]-?5]+"-'m%ApjTc^,kp>5n;K#iR'VO2QD!PT^$HA8UW?NRM^qs*_UYE:1nk\m.B:@4N?AS,MDLF!V,rl5X-f1"<2r*Lm8;P$_$N3meHpH\^q&g%7i/F2.Nk9iDV@81/E/7aJLuY[MT1U%(%Kl*jP>ga]Fp;Tq1NO2JYN'BT7JsqJ1q(k\O/M`pG:FadCPsVWJJ8MY"(j2=o46+9Cuoc%l?jG0k)$kuA0^\ZkDi%OI&$mbl*qcd[-]*ONPM;tmCP_qKAm43BW:cOL0o;HGXBu6ju0+43_mN#jgZ&fR6fkUA78>+=??'rV9k3.%C_n:anasf?!Tm^=*I,mF/:to_6810IdCB4<[><Q4@CTs/m:;?=D;JQ/L*"l$^95M.f3Vr^)QtatS4gKe!daHSCDt,?!#F2%?Ap9Z%_\9Tb_Lj.JV[CGm5G]ESRt^*rckYEa+h8Cl=<Pe*s&`BAM!?qbm0sYD5.p!QiqJ2XYnQ"H!f:N:=-o["h\/uW^+dpRiq.tlEMqBe%Cm^(7I4$,op\?nH[8_>Eh@T10pP&-`0oRLBpcbbq_g$nWhZFY/^6$\8PP'ZShdOd6Y:h/`X3f_mZ%&Se?qE6WJmJM*_hI?BqllT-%)#gq`]@7l`+Y"'m)))g;gX)3mgNLo*j1"HW6mH!3Qb_1#'ruII\nrq%=A:o(EeuW@pM8kV]@6o%2+X;TKm4@F*U1O:`O#pN`oZWS%@$b%O5Mt'I(%]6m-^ph[)csG>i4Yn*G-8CO$=3md)./!XKm02KDRV2?MdF)RZZZGL;H\-OEN_,!,;/-'=RkIF[/m`h+6/=P$*(d$%noa0Y>F.ds@S-*kM'q*R8fFk]T<7>S:#D?BDu2M$Y5=NQD]V-+6WE4"eHa0cgPhUha49FD6&/5B(dSX;GQqG'4.7/#5,,1g3oV`H%c_1`mTS%'s;<6)d[MG)n7qWT)kKnoqd*Z[GTl]FFM=M'9^ML_PEp1@rkh+Q/_rf="B@&ZLDo:\`KkJb`*udWYS_$<@pI"h]=!l7e%lgN!7mDq7R&sN]E1f]R)6&Tfmi&i-T'#*&<`Dd+9@Jcs#FD)LAA#e;nh=MC$@e-ZIQFu8883$j5IW%kS?dJEq$n*K!LoGlN4-<Dj%3Xp"I`auA<qok@uVo)HLn/<CEiVfc`N5hIep0i700/;j%EB[7uK_:]2A2e_n.S/dN//:8t,D-8mZ4n%a$=bP>Bo\mC:79!X(2^:F%hL3q2UOIG751b_))'jS[879fs)sN=o2Vq-A'uVJ$oQkt6k[ZWESWJIM]-Z,;&t"kBf,c8<`UhOc+_1KSJdL9@,"t@%1$1rpJJhWG%k;7&M/qPI]J'I+Yq2VcPGWrZA:-S(<=6HpT]7H,6'GDd\<lapI=bkse1T^PJ\NLR+aBEbG^_mM!Z6";QdqX6H,j=Xe&Z*C,POsH]%>u>lTSh.+]6.Z*^Hp:Ik;M%$FkOAD9EECL:3&PP(A.O'Hj!\.`]oNE'ZmOj9`Cag$fE7aR(I;o]*Pq@c%`[(,a,+1.N\(neMje-l%icBG++cAsT$004B.LO7k-5uD)l%E,.+L1Dmd=`-j3XR#s@\2qSNN;AjpK"3Z_!IK!@p,+e!)_X@NSV()&'pR%-W*:)p`,4MiCS<V%iT&%`D%$6\[mr@0HeW]KG5]^tiKLr?'N+:l%tVd=]PWEGNZr4!6)'l.B-^YJO&FaN:Jff$'XtS<L*1d<:#U]dQ,2I98r`LJPOTO^%UC'GuF&t1@A1RZ]5#_6pP@IVX-(/?LBDQl6*bNM+kss^sEA"H4cQ)Z%C$YHoqt!59YoTddLg'_[*D_Uf)iqt%;p=`kB;"(i58c5s%$DT<VB2ZflX5bqr_ibXb-"5tU=9_s'LeMK:SMhZP7HV:<1$+G:jSL/W?b:k$R/e06Lreom(m/fb(jU%/1_CUJ@NdrR-[$(H,-s@g%*CL1PoE\>![uS1W5#2LL4?=[MMN`cQF@6=6X6jhB'S6W_cKWMt&)6FP8UBeO(NW4Ul]F>UW2jPoaZWb_MonBr)_?mp;5gPYZf=Ck%6[R-4UuU=2&p)WU3gj*LUHG=cdNbNe/PH[\2*BY/gAV'f$L)':d3Y\WWT_"+U!F0`n%l/r"P[O@e<C9sXVYdI+:)SHe5:4OZkjV`%ND-MHDU^`\ekrt("#P>o@DI9#jQH1FOq/A=Q8I$;31r$C12:np>g,<g+nOZ;SqS[>DW'lDJ:+k[)6!`#_tdpQN]J77g09R]+-)EY%##Ed*OUi9**0R#diI(:gX$/?)HoUj,m4<Hpk[bd'a#8<W4`kU^(PeO2lCa4b+<,K"UuV8(>-[ch7V-tHIa[XkYmMES'`0g[%$Za3%n]VG(CbC%B1PFhG8)kIY-5Z#[#b3h$3f=]l@usq3*"YcSiu(<m1S.',`a]U<LtN1i!b]mJ'<!*rR0Hokonb'uZ;GI5^2Dt#38A0e%U`F*V(blp^NoW$)OtBdn8ApD7Hk;V%jqIXYNhWkp+ZVKu#dtS!,]KKKhju'DrQcNYE5YFfY!7XEWFr@?[84M=]Y.8Us,/JE0L(lu%B]61SeEY\]D]7j?)6)/kBA\5*ZAd;Vd:B'0I?,Qs'sNW@,8Kdg7Zif?G_XO8"YAMhe=^<EU[trIqrZM5%1D)G,I\Q$S)M"U1V='U%CW51J4%q,o?S=>6<4G3,N&29p3<qan`-p!33.HdE3Ya:0]Q2(m\5[:AL.R*bgCZ/J.U;ba:rocQ%U310Fs;=]ZU)I?16Oc'c?EIQ%=g:P0A$">`Z</Js"mlV<S^NIY%2GHK-0@6t3-[#(H>rt`Yf/V0D4Ib1#':C%h682qpmhLI:$]CZXRDs3:rN^e41R.bc@6?2eH*B,%F62n>X)V!b/</812Ttg4g-b[Pj_/_;d$lMNcW8;+I%>QIB!\hP^29D-(,te;`Ss?q%k]"bD6qM9g[N3jC!=\iN>7V#[Zn<3^:DKL%?8usq']$lKM_Bk_@ea(KWkZkjQSP\9A@JV$%(kq0\Q07\LaUmCCa1pW%PH;7"qc7jc*5rk[frM_qofgf]:>fYfaY*Qk-l7d$"2gX%^?Mk42`VsNFEVBg.k&<\(a&c9IdR7nm&k9Eo$4td1@/1WB7<8%I=.=VHS$Y`Xr`m%G^L6"FS"F69:1W_"[(13(E\9c*qu'8C9Ed`%r^Q:&_+4D%,o:'"eF"gFja[]_G<@&qC"HKBI"nAsiKes3hX35e/@@?D[r'?!s(@gLgZ4DB>N'oe;R,h,@NFG\6qtPdZ2+rC.Q0rf%j4kmR>U@*Uc>W>JqT;[l,j3c&P',iA6eCA@.<(2UZMcJR(cRJb#+2+Y^(#=DS0'4sR]\BhTQUllfa*OFqJ5<<<5`&E@4V``IOXMn%aq0k$OlIV=b>pdc)Brh#X-`oBRVY#L%_\nL_e7HojjNhXR5/kBSR90jh8MCcCc]=9\l^=U-H`1n?EY>[2I2ER*,RUi:f6Q2flV\,%%j+Fc17QQH8>*M8m^>?;Cc]=93^4-2>W//1]K%k?Cc]=93kk;KZ>;Q_0QcF)Z/)j`bGOmSV/tWMUWTJ*dk6YaO#3?OIoUU?flVZo%V$)6:P>15<5MqZaLWZLcbG>Rg.1MG7kD(OP&6X*5?-F&?+g^FGW5.C_-*cqo@7#giaJOkKZ!js&r,V&ClJ!_nl25Sdr,9^s-C`9k%6%@2$Yh=,M=SQW&:sR/?flV[QkEP^+ZD"Vhr,V$GmM-`bS'Fes+_Pm-Qq\r/QfZZ7Ro]fO,A-dHnB1X$flVZXnt'Qf.%AN,;TJtp%,U:i&!VBN7rO!=5kba/=dSA:LQ18n"OMpS!hbfA='S"V\FoJ.o;;YFkqqd"Iqs*2'XS$2'h"tIaPuFXu5-X68;((ES2g9j?;O5t&%5L*8OERR#HYFl?M'TS8Rj9WPBb#o!K_-8@OYlsG?4T=U.1>Oa\<I)(>$'hP)G2(L7p[:>('*_*Mc!@PLhAt:ci*X*&M%.*>1%^pH%fWg@.Y.<T[-1%A<fP*rDfA%\,T02<pGFh_7r%GWS(3];[jt?M-M1BFMM6=C!I:_V2GM^<6k\KVGSdX0,)`faPY+Eg>GQ0Gf#/n1l%R74*BKC8Hi0`1@=-)8U7kCua-$f$#p@';F_U`1kaaHOT2*BF:GcYj1]nuO[XRr2[2-E?%92N\1!Oc#qJ.g[P/4qY6.nL8BG&KI5X%^<njiHI(0iQZrEa@"MM!DX[e@Tb+M3H]_h*L-iu@m-"r:?]I;,82;9NhD*,hb_p,tS6Cl*G'Up\1+&UN9iQu;8K>]<PO+mZOXAYN%H8eRVHP9/DUH0,$;#-(=I.AfJA=Oc[j#Ajh9bW(>pWd6*;Og;S$mD.^<Gn[`7M!%SK:`V2c$gQsAr??<A"RfW@](t(A<lYcL]fXR%U.7^.(5\f(nDiR'iA)M8-8L830a)`U]epV1N8g'%Eh-If+PteB*f\4r%$Opgf7-S*BIZC/7#"jEI<RK[(elgYgi,2sIV"Z]mO4@Y%AiPqmm`:hcn/Z^ERUP[pG6p&I#L"Rd\LDIlB%V=Fh%2O,-(%>\hNSi3$kqK:7rJ>54t/SqR5]I:i.ekB>rOJOCG3T72oYH"GMg:H%F8Bq77[@/'p[,Wt@)1OK@c*=iT)#l\K"Q2Y,sV=!.uYib%[Dp0B;k&.o9OfoCBi(&-eII6m86QKhnCd-f@LEIVS/D>55Y1c28cI_%8PHiq3-RjE6f;?-FqPJ'_/NgDpj0/4b>!N0)pRW2=PT[r!Ekpn)'$,-9<9#kkdXadb,`$d9OULdO.F(8(/mejj*HtQM$`?G#7h8l%N_@<i;@*S_620mao>C%'A"nX'haWsmH6'M)_oH9WF'Po4+&*JtcIMT$Y'X\<jc(\/[?rTM0&WP2IE7"\>l1s<"Bn289DrK7!E15Q%mZBth5ReGAlJa/o2Y;W\\*`:`d\g@*.-t9+`p:77V:F8JZfTceXF\*&*Kf-kX1NCHR9CIYOcBYOG"%7mn#eL[K@LWtW%/sm4+;0t%,_i>SpTQ4`Dm)>"E'dl/E#N'Gk@m3l,V#(UR@qbg@sl-Uak_l]=*MO4?#[[>=LkO<'AXSA3VO*(StFiV[e$#=$bD*F(Qt51U^-)#%Ff3I*Nj.,=ojg)FVH7[T!NBeDcl;/JhTS3s6^8%(Ds8[#W%jmo%SBM_q/DB<7(4KO=*sIDFE]ir'0t($G,85cM4SsJP'n/%IePIH%M/I4&Qebi9J>[Jd)bn0HR9;.eaq9L'QW/l@%#iW`bee[bE_'XIXkor(9qkfuCYi>)I(@7plR[caT7iEE@W%](6Ig/FeY#gqD3H\l%0j>,`D<d%@pgjDd0n1Y2euE,DMSAuAKTfX"VD`R\mj7]M_t4+Sj)(phc'![-4m#M\#W\GFCd<oNPnmkF<SX[_Lcq2Hm"qDKQb4O9%oL<EJ`S@</AelO`p$L4#c4\F^S89M*V\R47J!>2.p<j<$V+%rb\S8q@Xu>`LB&)fhF6FGsS\66&4#%KZ,P&tY]lW2FT<@?%[_hf6%IfhgW#f=aqS'F!Ci:pEK"65!nA"05qZ@:HEOlaqGLgjq3[UU:DRu/AV6"_cuQ<];-.?:`K`4NfWn$!bQ1!o"ocB50hjMBcI3'S\D%KoE>N"Tk^cr]#DUPD@pJ(%&X%e:g]!'7G4AlpS.[YZ&iAc\QP:!_/1(I'r:L;l-o;RGT&EPKD*0fn+4h3=*oJ$Tf4``b=/H<:FMu%(l<cPF;.==F(.P:SF/7']ZN$L.U_nF<s4e-b=ibYn9^->q/S5g!EoHI`e.<tDnU0>A5Tm"8L,(VEg]U1&M'3).Tt0e![ZEa/fZj=%9m!/%d(^!N"W00'd+'TZB*%_ti1C,8)N?,i!Xr4WNYbKOPm&!`#;G]Qp)k'+DUe:6%2Cr40Q%Ans#Ic4ZN0%.e$#s6T*6&j#;F.;%3@"tdD@U'ml<AKKi#:RO^K02aq8aUG=5q%\E%,.i,tDK_`Oh?fl6M87>foQ!bg&G#.A,e;UjqT+^4?*C7slamOso,DQh#FJ;Yt)Z%j`C*(s4F/q^*BJaE\]u$cBt*bZ_<Q<l^-sSW'TnF'4"T;XaUAE%HY.P07<A#7+QGGHi6:32Egt%V;9Oh%2J28^W<aT7WP\>poSuO%ngfL:L%*2U*9^]n^B(rfX.SPjZOq!lp:JjnOA)h<]+orS\WYe7(OiFBd.^ViHi8\W>K4A.00JP1;]3EbIc:1sj6][&^=P#UIcYPC%qRP<I?cJ&.,nFsuT9HeJf?o;3a-,6D(TtlQXL&S9]@1!_@`8(Ph<Pm6gVqtP*HePmr;68Dc?Tr5eSh,Xp_%drrqGpldfLO@NpdH`%YtAu=?aR9^`P$`Zkp[kZ5Q&3DiL:1mRuF-dme,lZV<_0s:q[,b2,X,EL#;1YT.uT.?GH!g?rU1\B[StV?TGF)#QJ$,'"@giHi:g:%!P\<u%</MC&!jaSm3f[#0-!X'I=/<goaAOb04^%q=l)M/lrH@;a$t$O?hgaPWGI`0(jrMo_Q:,,AQar#qSi,;;>9nr2]@a(Y@!gs%pkHQ80DnkcAG>U'g3gR-nI9fJT,W^_Qp:VpPiVT8q$#4[SZ!4f?GGt92*TW<"S_bHhs)"4H]=X++*su[E-(PGp\H0s[;"QGrB0>#%T(T2$n)I%RbmM.FDtmjfHE5r-H`l#7IKADD\tOlH<#PO=^Gol(%tCciG[/F?-eI;NqY?tK3HHdE?>Q9]rPGK"AEWIOp\KS>gV'_0%d!P`h,SkGKA:f1,@a6KZ][ngfm_PUcp$3P6\o.3$<//';O"8fU<^5QMq4[6L$VuRQ787r8hWkul@O"E[W-eKuI!L@."-6kQp\KRs%/ju3>'`24On6>k4\NRjflc3,u:P^<4ilTM=.JRup2h@M%al,CDF,9)'epH;2MAR,AL<2@1pYV1uPITh]-R'3OL:+>B(47_TZ;FNK%mU#6/hf8iE'b9O6=7UoX/m@L_3_K-0K=[?(bj=`5KN,JX1eA;#Voh^"YO(>Hl"6g^Enf0pcMMJs8ZZoM+.pkQc[Y&R2SM,GmC.`@%naE(Z,BHqgWT`*cg4Zm/ZT5RGpjJldIpV$$H<ts'p<-P5]mM3&=15K6NK_][e_99%EVY&a5L@.uVX(E!Qg6Z6oP<g[A1s5H>\GZo%[HagAc0n0o453nR)@)\RK@Qq-FaD6P^>A;EjF5t+Dme/%I0$AaB6LGJT:K;!o!8jB)<L8_@Wk>6>*I)JHQ,lYojq4Y1+#dXSL8cq%e$Uf*Hg-PT(scLdq=]WB!hRXh(ZmCBC;h6(BlC`nSaKbk/t92frE"DQfqjTcPt-3"jgYb;o!H[7!r#:c4NZ9EosMrFT<POZ:j%,K%SW5an$*EIhFEOU41k'Fc[PH7s'TcWJ(%(C$]MZl%+I@2:-&6)]k1\MilrVq[igds2HMQnY.o"N/#^4^<&(oX.k(B[W<-0=b1nID;%9&Y4ljOX5SZ!q7%5Gaiir<co(=hNWQ\M=YP[B[,+DeXEtd&emcmIAMtc-&!;!K!qhZIQIp\k?Vd[uJTf_K57ld#nbnVrcT-'9X6:%+4_2XR1?CMqH'`G?/N9,I%9$*\Cu[UW4GKY4='=>O\,M/Ibhgr-`PI^L:mkR4Z5e_kkQ\$9qKA0@jD_oM11mL3:@YDS=MS7\NGXs%U0d2pK74U-m'Ul-]W(7%#jo&W>FNb7Pc)!7G3$35pW$7!0tN\b+5+=WIkWB:W6E!F#P6r-#ID\t'Z:7DigW2%(*7=0Hp`A!_2JX]%T71C+&*Ce8Dd&,baQ*.,jm@m^$+bcrH$d9,idUnm-<#T7f!tkA5U*6%m,COC+A2lK/!0B_7g4.E1XBn;B84!mUIlRD_&M@\cP&m\%mlnqYUBWrd'QT)nN4O=ilkO1a\VY]o.dqZglMsd2b);MJojJn?;)^&V>-'sL?An8Aq/E*;NEa89A*%Cp$]gNc7+'J_Hfiiam7AH]%g:j&8qU(m-%U.n?H(h`s5.UGfHoLfRlY#P.9BZh$A`IsrU&::ih,A>I=!(*hB<#J$BUml7^`n;Xs1'o*gHcPlEW-?^:.Q%K5Y-o_%X,^K0j)7KdV_dDg`f7P=h9E?Js0K(b^Sqn?<t?I!e"OiFDLXq5o,J3Ga0oNS6#-fl6FbXFag^P'ELEifZ`7t^Se6PF<VG?F@nl&S%kB2&N=3o'o+7I;Q)`)Bo982ZZjMG,BlFad:WVu*Tg>0>$VXmp\1$Mj_:b#,4<VC;<^`h@d3j*NF8)\W(#uoippSMC:)KsAC@X];7%N17$<7d2eb4^2,o^!bL+Y,$'`E5=\$R.PVrm`Z;gbD#i2f(A+d`r>BqY0hfq$&n829dtSSk:OC!%8W+`bB0#EEusE7WT1SdS0]b'%j6?Y&^<a'3iFD4fP%\3kc?D3S5/1t$+lT;TX6Y$NAOQSNLQe3i'\D:+_CT^B^K/,Nc>fuCTf4SLJE?<'%Q<,'Z,5S(LHNKk[L8Z1%ZP8HGD<%`K733)1A.SC2@F+8K4=<"Y\C3fODRoEhcP<d'b4<[nFqcX"3^M&+AZ$[8c[-f%4ZKjkjZ]NhmSZ\EKaq[3[1>YcUs3d/%c`m6db[UO&c8VC7&<&T9-fhbj$S_K@5Tf.-Ft-^DqHU4&a0p+7i'uk#q/HoMMdgcMkt`/4+[mpdNo8jX@\m^JEX+OHB(dOc"s4eP%3Mh*gIccq+(,BqI%m-3T_UM.hp3:BdSt9QVf@:W2W+G,bYI66t:1l18Q[,#$Zaat5R*K'#+'Y=jNgH=RY^'=Lk/5/,fP@k&=af$%%>\ed)T%5Nk:9N3p(4T&FG&E;qp!]Pt1"9mZH#E!+cB,0tSo)_t<tbkm(ds9(jiJ",GP/Z#g?r44+6U)Qf+6c).dL^nD5-ZKgc`Iu%YAWKOW[--#bn<Q`q.:TW*L,!qiMq6f':890l#j9p^7Z67c`#hVO.PX2*]^%5bmqU8Wd/6)?q%:>4@ROPTZ9+[2kd@u'+UkoKI'4G%;KLmfB^J!K/XLSX.=nEPjZ>O9AYp8;>BtLa=^/OcIk9\WSiXjBjlUUmTfXH"f/oC`T?.%()d>=PSD!7e>`hBZd.e.^f\HG"#A',A%Kr`s"00R$G3E]S=XFG&6:/;sMDBF;JCZ"H3p!V.;8%2`<a;]4ZV3O6+j#uXh<]QGs[b&9KdWDFpOlm7@pZfUMRDc3)9P-CcmmIm\%QCOc9Y):7Y1jkcar2Rf:q!-k]Ut@V-^ZYJM;oGYSQlDTa)ILY2ICC`b7Op0(hEqh945`4s1NU)ajCr6bjtcPZr'Ms'aaH"-F);uU%_:oS:?Nm;R>Vl50NSW(5OnN9Bp0lb#73-+B@W-Oir7F*SCd&_ln$*i/^`Fi$_F+2YG&C)hL#Z2M$k7*4[sglLAEL"`mGE+BXHJ"s%N1AS?"??d9i78[QXW\W&eucu3l=cuX\/.rtLZ:,hkQ`\loO>^;(CSrDk@8=*-`J^:_.$>a);<*[J<U0%gt.J[[]CWh%/'MVj0^.]%KhUX!^mR!HUFRSa`Ss?n;UEq\qI"`S/Zl.i*$:D<X0_ZjqHRfE$I/0gpLrR[FKkIbem@.ugclnGNTZ(RdSKQ"E37LO9l)p4.&UX'%>[Jr7'.:3IrU0ISim6B%>Um@Jf/a_jeEY8D-U,N[o.&[.Z19k8_+q8QPM,Kok3U.5qtf!bAS88cG<Smk1[jK#p.8i%>+NfShUKR%%l"O=Q%^N56,)d'I1c(GA>d]SbH"$i7,JNV3"%`4+LH@Vc5lF@*E2%\EcR^#ckbV2"kEdgK3;Kh'0<ZtqI\+Is_dK5,5t'et.?tp"%i#'A(j1Pf)qX-XqDDHNa?#oBR:+G_BdN36YQ>!)$h='*Q,EM+FP4:n!j]"/64<_7br?l7;LqJ"$qb!T=mtn6jOGXR2]3kS));sRo%LQ2D2ZI->m53-dO272HYDl3eJ+FFlTa5K#D7kh,OI5;]-O7mG?Go1>\@qc$f']TGnkL.e+D[H(Z>8>ZXS6"2J^"'ghD>cSX\snUV%oM[4m9X[P$V=Butr?M86Hj9XonSu(V:00UH2K&OM*9C/N(iL4K)kU'R]2ILUl@sMbSrWJn[ss8"fuQA085Ub50(L^`#u<7P0/%&3%_&27_;q_!/][[:E$m[.6\2R9r.rB,TIj2(jIcH=Gr[!l-LD`G;Q'$auCN:(aAOdRA$`$J:amjL;:ub/Z'/croWuL!;L9NDIlA!rY%?h52QO!SIG"#d:n)tRiO"#_d;J*^@o5N^gOMI2l(SL>&t435Y&9Wr#>)d56XpK61(T2V/gpL!Y+_)m0iP=5cF*G0=fY8/[fCdL-M%,r<;O?TZ*=;25)FW".'Y7iZC?)r.6pUQ/7])Bjr>>R?J_@lo56b!B[?"4!$!&uY6"37<7h/9!G0(mr&H'T,RP4u*=(E7eM;:CeEe%94[QH'+Z#)O)?s4@.kL&Q1tSoYWgO6MI1`>26#j-_;\tLG,K_rWa4R48_G0^0a$SgIPV_E%lV"i:JDWi1:Og(SW'm&E-CK`\0N;$%30gT!)dpr@:Xsg2GOrNimb;D5#P3"]&"iiDH$_Gp$N"'DkdJmW6]BQZRCi-uo3W"_B1_l&q([N9/^BK'S.Gg_B5M0D5IS&oo&F@m%VS(caref+7nMc,6[bT+Yhm8kQeaL/CHZs?apkKQEeW0CAr0*!S+sd2]ij%42J,)SLO4=_ag&.V&B<+/pXQ$M=#?p.\U3NU's-&>\%C54qts/=q^g*$M^1<%^nI;a8ZZ[^-N"&F):n\+h(B3Vm36`<;rAP-uII-oCSEUV?-qbM#"mS%.QVf<e;]6q1m@ftbX8Wa_T8XK-'%SXre0SiplK/S5h\rb_T"1DEVf08cCbUMjQL3dILe$8oW'bjtECT:MRcme!3Zf5!)\4K5g4?52\MXb5VtTV.-481&TQ)qjacI[j;V%?Q1>f*DFX\%rW*5!G[l6>5b%dd*Jt"f_FcK!j2,iOJ'noFsDHmcck,)9GO$#H@YbH*OVElI8]JAM7I?SF;M\e>W;Vc2SIa&56+0n%i5)huZD2,(03=QB@?YN*mqc7d$E`lIqK_)]:9KUk>HkHkm?R5o-F'0O&Btb`C>IW9eunMM:A238N?`XpO-S.&6<I.i+_6op:J;$t%_%?`fo-p3^Mm(2F+t.S0\HqUC&KiQ]5IZDQ#bGh/joU7pLd56-St;f'W3.2Q7'P&"]:gY+N2Vn1+i$B^?#'6U\NMQsmJHh6YB,aF%OS7\JkD>a]7Z>t^r1lYUIUph9?4Q^^lsP_G=2MB9FtDFjFWVQV@#G:Z$j:f].A@qd#phmr7=[&cE46(HQaeUKdNGu1POfou,u'4C%3D_TS.F^Q+)G;V^28JP=#NUG\r[E!,r[\If<8gl7,Sl5G>-uJ'efEJQVsuf'\''>!LfQO'LRAqF;FD,K,,VVF15Q10&:*c>E3(fs%SZ<-j:!c'i0pD:)&F=EK_k)%Q'%LPI'TQ1JaFU`-de<Q7E4_@C9;g,6f!qTh>g>&fWI2.jH+grdP`'6c+goJ3n9eVRTdTtY/?YQ,%6lR)H`TQ6,50(\>;$]'<:c1W[)mC5H2Wi0bYq[mJ0m_p)<9`h<nt:(Hg^%LSSknR4j%<e#Z-'R=G^JM>(qqYn#LP#h7JQMr+ki<'%HK9%cj`+KkO$#43O,TuAoj@@nSXT),(>3MKQK7U1Lm`SNa%)H$F4=ZE@&Ijemd4ip:G-@I+!`&H]0$\)J:GG0/^s@HY<$2PDSs-o%R,[G]2p?NUBBd`rBc%S&cdSL$NM:Y\?g+brVB(MkjP5[h@Ol'9H%>^GkU:_`4=`N,1<3FQo?IFmj)&A*i&jg`(>m]r"&H?;M-FjL%cT"`uG$DpGiIO7>CF9YT4G2G,*R8>NG5ge4V]<O(0XL?Dl3U-+N_(-;RYg(CVrtNlLcQO%OnmbTKXj?*34Ichq+WO6b:r`Q0&T9X%r3Em9$9OR<)oq+Y/_iS%1lg$?i?DBuG*qgECS6;9+cB@BXfa8HTYSZ=,QB[.Ie<27.IHM5:7Zbld_oDt@*Y0*)bP"[]HkF[#01di%=m"LUke3aJqUYV)osT>G1\%_q;`fTt[5/]R(sfcmmXH;/=Q8Rtb)H*h'.R-g20f]#-*]_3FBjKeg1>is,@;YMchBHp-M):LoLk_8%eUh]hs/$ABRu:VXqKYF_5/*7Ir&4eFeorA/DaG'jgfD;`7rM?]pJ#o_I88//nG,`?M4'+.*7HmlDU-qGLUBS8@U`BjNq>/&O1HVP%E^!$"S7C&Lo_Z9g<1V5RJlqKha7U`PZgVK)9bGS9^M*\sI(20h5@%M1;q]U#Pq/1[pFe'fX2qKq2oO&[Oid#-9mS?Tk(mNINpYhW%bUb8rr"!O5H)LpdF4Z,D"[W$0#[hgpSiB;kKM,EQH/b_?FYaEShos?Hc/Y`>32%;@\1VG=HMtp\DA;oB>PB/nr(t#WLUB4IJDgOi%Q@h>GPKL]Hm`fd,mqM&JnkM.`'"(=g#5HteN&AfHN,f6f/4.?cbt0HU5%GfAlJBQO<$:F-16LDDq6YiZcJ.;/c6=Y#O)GprP_2*k%acJYlTW+2\LD"c)U&uYIjD_cIHh[QAUeJred["d=l,(P<UY\#tI(XkadrVM-<+12FQHu&.<k2/4T@Ntr/%&]4^?WsLH6HQr5:u<i%=F-tGd]1jHpd-\5aV82$Uk>BB47Rh2f7!_Z"%ocjf&uc%a`=f].UB6&G73K]m:DeXM$?e_/"]H[?YJm+iuPQ3j>4,,$`B'u<6EEX%q[2tQ^?7-U;:uoKlXjl1WSB6^<N.=R0=otXAbgV"Y'mOd[V'ecXR2k-I(=Bp?#4]PDPY]Tq>.2*]Y=;q_f)e98tBHU`8ff^WDJe?%33#8M0;,2=bXBQ&O?=lngP,S;#@qHMHE\m[Oj8?8G9G1Dr>?+Cqh>3_#t"3f<&e&+Qr@.8F9YJ+4t>U"ko%NuK($"<q-1q,*$WoS%*>Z]s%NAL,'BnVi9[7Dr7g9shWeLE#:["4lAt=JRSd<3$"P4AY0MdXbQt@G.oZrRElV%)`;d%%KZT(:1Y19<&Y'"Pb>A+#E2H;sl%mF7FXlqiHfR?%IbEOaJB*2hqA?.FT1)?fYX4sVL2cj9L>H%?u4;0]g<jQFZ\%XksSC%q;uTWHd-$I[IG<Ft'&)Fd"mqfsqmNbs<A%_pH`1!e'h7<asr-A3p+=b1(0;KcSQ;;h_Os*]!"*3JZU.s#\C.$XZB)UG9nU%D"+.\if[PNmVlB`TUUh3RJXX._Q'YhNHKfdC6."%^=Aa+-!k8&J+&^nO7EqZd<c\kRG>rZGqhOl?[g_Tg>[riJL<"reXd4n!X,#9`KkW@JRNX:`72Y79@5XN2ngrr$GDkUXK?82ltDm^%.R(9AVt6PdbH&q."h\Du=dK(A,rNJ'-2B4uY"h\P:e<iE_*)hUJP,KA$<d3u2Gct+9Q:Q<oK+?j*:``nSEV%N]8kfQo.7YeQBs=J%XLLI6(Z6o.CNoj&M(%LM2E_=XM\E.\_G]F$IBACMAJdHd[^*K`Q5Ws`Su'Hp=Lmd77bO*m@sYtDi9KT@SKmosk1_T3q'TAUXBHh?%c+Cr?F`R"Q7Z&kD_+>R+bX2ekK1#24G2I^IZ&(::qUfl2SOS28%@U&^$IQ7MH>;$:iiI+8MUFXoiBlS0^1G%3jtOu+E5ctKZbf-I%If7j-r)U>GAXN[P-m8jQ.gY+BUHUIWi0@@jK]5_nJZX#<DF>(eY6ba@nRE\pR0c.bX2XOn\BHm;l6Ka)'pm'u?'-SS=QrLj_j5Xj%dt/;($E]@<Kd+U_3a7%;6no@A#<YoT75::17JJ!E(6+Hp#-5ak,#S3Eb$9DJC(rcmi/L1IWZf>8.LuSVg1=#SNl$KX0'CipZ,GY1%m^\_dh1N$OB5Uf^1H-,#?s/>u*FitN&4HR0+p*-?h-<-u2T#/Tb^#2j_ZOcQU",5;[1+2\ZEU/^6kUY[@npG<N,bb8FiUraMB7Th%At5"t9m,u^Q7RM7/rYKD#3&]7a2SI-6OK\%A0;8cBObI_>)6Z2JNOL#7@6Vf25G1gZ>D@*eJQm''U1j%Mqd5!C,?IU8GgU-`E@ee%Z_FKQ'[!Xd8!t$:jBsT,GmH;X%hDErm,]EUUdZ]Ki$O^0aDiZN]T1Vhj(UE?OKEXsFFIj#DI&e+DI$#$Bn8''gjE4+U6DduHBZWL%Y<M-7a6hS#50&L31#7'2nU-JCjOD`O0mr!B'T;.5:Z4BIn:?:(m`Q+l`'7r=!R6#6chhUNSFNUS/1j$D\-L6?+4f<D$rgceEsA?-%TU=hrXR:q#XNmB[r/fGl@9!H5;g;Mq($<'P47a+In,-SE*1arI`q]A7#NGQaB[XiNSdr^1A%1/"&imam0,P^#A6j-.W.5cs8@2EH%I`QQba0VS_F'AiA5+^p^jp@4.JREc73bT3.b:uhE!PSE:I>@n<mE<bVbYE.0cgi2%R?K-]@t>$M/0A@&$@>G?&l`4GJksG5$A0mD%d7$'FN0:]W].i)IRQY$E(b=e'_7Fo!S#-RP2l@N/s1<Ct=&4j%.Cl))VfR7Sjd`i@\@i;fs"[B:&8u__:]jHTdcn6\\O+(0gcgf5%"?(>O8,>r*dfG"p%h;GXDq4pK9ce4*<?<(oEkJUHpiAcA5NT&X[G?YDbbrG60E+3Mc>IdinoU9K$:u9^la#l350j8%=jIGWRf1pu%_4UT+C#tQ$\OKX6+BkGeDl"pjk.Fc0ac!?F0/n[*ZhndB1%qo%EcsCLq)lE8a`P,OoUMPrf.9C2Jnj6>WA$g`fa4[0kGL@2X,c*@%e\LcT;qVbSTGi'(.P1Jg'3&39B-jsAkjHO_j(>VE/e=hb=TgaepO:gm5_%Rf^O7phe\CF@Paj*#8a&D62!qZO=D:4Ud177jQ06XR%/t8/JkmA=g4VlU1^!aqon"\F7G5b5i!9e14EkYIE0;M1m7oXXd4cQt6*`6YD-jOONO,1]oPa#KEs'P^Pon35`VPH'EmkZ7e7aT&f%d>qT*jVJ!s-S8!UrUfKjPchi\-Rm_Fo9(9=Bbc'DD:M7.V)1og9=et"Y_iP39q/uo],]Dk_,j4AVS5u,hQjMqPW'&@ZD^<??IffY%`A[=r/LcK2^iW^Z*#Lpl__MhBb0-f!,)Cfa82c4$[]QB5;?0X4N6B?_L+M@_\qY[gGtBn'n[E6V/E@fY0m-,`Eu^Voj^f<Lc7&c^%77^`_S/hSIW^RcC/-EhtF<f$\`ZaiCQ8_N>+YBn>L58@CbIXR^LoG[C_i^BH2-h!.(*L8%!fY^%@M7`hagn3<GS3D=\9;T(Xg;K:%N""s(R\$&+6g`eJd^,Y2l2U\/nSb/^DMn9$9NRNs)*_+1c,:MXo<P&OTF(p<P)RIR"pWI63NV1lXce!+?)F'ij-6++cD@]s_0:EF%oCX3*NN/u"<o,`7KA)W*aJK'WqNX>sZCR<sM-,aPg,=[.Xf0`E$k;7&d2,NtV=4[%9p&[Fd(9PiH%j.09dW>&O=5-UZ40_TKcmC5%g%7GE&:tc,<YJs]5to0?ejZUY+N,`UoHBOKOIe<s`.X@*Th`Ws%iKqR.i%;K2+>do#d9j&905Zaq(P^@'H'8uX;TKI5.k'Wp)njl%r&\TFm6ak>@*qnQZOH+d1g)[U=@I`h$::XG01+N,Y_E\&A7!4$Z(eV<Y*^^$`Ba)N/I.#1CoIPHR$pXl5h@^n"A!WP9,JE7TXG":%2pn9i1GM:Q0.r'_BGQ&X_i26;lZQIIKW+*t/WrJ^A<kgpAI:G%;^7hNAK86Z"\,+ZodGLGQspqf=:4=9.j?<:1?pT!oY;=!>\SIP%[k3_`%M@tR^o.r,-8$`BcOhO;MT_MGcLp2I?F2ZeU[?r1gMX3(T[o0q,+g22.eP9G,q0>*,/V_%7Pe'0<Tq%/f'pMBbcBBbWd3u*%Pr6%=E@Gi_6UEJ3E^;al0da`\<)'[RB#Z!GR8Ff&(<7\f)("H$1WkqiAqY*=b%TmA<e`HkYsh)NeT=r^Xm<:Eap\eZ83E>Y]<.#Y%>ZSjQgr^%dTK#))R[bhCasc;%Q+;#Rm8O#JqY/CFgS<C.(5L).fS6)G4UQnR4:6Mgj\ah.P'@Zd+^HF#Jn.Ktap^_$*>mA5Bp)B(%o"^`h8]6U(VQEdDd3X[.%LnOre1;P[/(pd)U)Bh#hr?E?'bNO&Qn0pN9;H4^2;MY`7_,hqVG-13P]I5W[<46\VY-\q3YAi/DXN`U%)H8Ot`.YL6W#g7u4R1ltb?MQXMjt.d?9\H[V8+g*8TB'.4?6JJlC;o]1N*.[H'LVjrn[2uH58>.;CihM0Jq0$g9pLm"5+0c,/W]Z%#-jPQpb%7XI./HR/@n7iPlVJ4@VE3Q)%I(!0sW'7LhTDud&8b.cnJF-L1Xk4MV,@NDe3-.JJahdL_,AH8^,I>9XQ-TB*=?f8$b]Y%Uh6A.X2V"LSl?$\864.Kh["fp6t0c<EXY47;it'S/;1C.S!o-=C"V!22`W^mFn:8I+3W#"[KQr?*/AMG0LT/<S=1Qm`fhWd`j_]W%O630Bara(P-Am!D'(CNuUh,r0FX;cQfFFu,^f3<IWN&Nq$%A.j)ZA<O3>,PKkdCg351ugN,rD:%*>n3D9M*,5?*f@0D&#Cq#\(n2%OU?>RN!joA;[#l]Ce(of"Neu36VQ68l$F+VjCQ6;dfLkKG\r!Q"SZRHSo]Us!mOcp!p;8'2M`,^r@!=O0UND9'2,#__%JJr5pd2M%5S$S#4^9/bd'.sYk8Y\q:Ol:kE(jM7S=Uj!c4u[,kF?>-X1r=tnjhTPQbM9n"\i$JZC3_GPnUoa-9@FpX,&Ijaq`U(IYGL/@1=<+%8N[C/NN*Xp=V/+jQ=`bIDA`jBOh`fY-HM>eZ49<%0LRY+`TWU_GgeNQa/)JrVh&(,F?u#O2Q-f`(gYDHR#hSi9c!!HB_84WoKC?^%S_%FG:(*THB`:`;8m4@ZTL3B[=+rDC">/<8LrOsQ\*PGr#+H["OE%3Q13D.a+M;_7`^RZtEA;HZJhT2dVR$J")<Yc).PJrHr)*0+%V/4PWTE10KMCYoU%@T^Q.c%HP=@IaSBUEC)3el$`)5trD/X\s\nZ5KPo!3!\e@E[N"P=S#+DCUe@YeJ27->ngeKKa/VLqu%0Ee2]%/6N&5fuTq`!?bhYI50LW?)<`c!J\Ml![7g48l7us$M55T2)37<JpJ5c(d;M96&O3kd2<W3L<r4ChIn$tP#P?q0qf*#e290JKC4/,%\3dV)ZZC\=!Q+.M^gr=-pW/2T';Wa<i\K\UF1lh+([Y*!B`!#%[bIXGRY1r^i$pU<q@jU)EEGY[l"XPVl2!/^QbaS(pl]k:jC<3)%gd'Zq#_l'm+S*KZGeg+BF::HG9-jdp7Re_Zi91V)(sSeb9Zb5,$jD6&"u7/ce_LcnW\WdR*+hb\Yqq!Q7,l[4;]pi<)T8D-SIq_1%bckdT7MnW,9;PoAW?-]=5_&l.%o+PZ&aGg@#ss<<5`qX(,689U#)NIBN&q#G3sS/B^sI$L0j:;")+T_&):tT\go?9Q.=Y=q)l[$5%-YP17JQr<NT#b$;1@e/N._mM8b`q^f:4aqe9aYV,j%AH+9[04[O]C\sAD&Xs#cl]Z#f&@FA/76e<RWW4MP?Kf9PbYX6@;oio0g77%)JlH?&5.Y3P64*W?^@qM7$qj(l_93.9/1ONS4]++W%es_e@]DO=;g:+7:p.GBq]P]67;=NCj?Rb_7G5N#PA0[9PHq18?s;.9X4iC%@9W`9\iDGk!='4#P!`!+-"VqVRkr;gi_`pe(\sifha,G'#@]/bU.DYW73)YKg,]I=7$*/9&TVt.nP'@+oOCPR6I78U`noCmgT]S$%=I4Rb6:&DB";<uD7$Z?N8.6W@KO$R;2UVT5'&C@%?ks0R+8D0;)aeGlF?pIDacbn8*+kQL^#GD16s'WMcfnRFf`OLr,?uB/)OSW\%c8YlmP"n&9;EG)V4W=lE3Mh75kT_*90PcFUVa(a<g0IB<aABm),\()4Yj+5&-3T?c$]<CH`6#RL6Kak[`Umjtb*DnPp@"hpdA<Lu%NX\i3oMgCc!q7XZ?<'_EJQ2i?"^`O`LR,Tr?k"3*ah.u;c2s.pK.]&I;Irt&@PE<L-;7<'U(T=H>LeQu/VEC87f9!s.FFfi^j]dl%!Le=D#](^uIp9Kpd'kD3>W+.m3I&o(e>-\NW$)FQs!MDJGd<RH/BQE:1#E82i*B!WEYLcb3o,I<9dkXn3b\#5g3+-^+gmdc0EVdX%7<5gWLf6;GL8f/T9LPD>+@sck(H5urX/&O2d159!U43hF]6t"B<sRU';Cn74'&/Wb#?DFEW:lOVl>3(3I[@kh555cc&l=gq&fIXF%AQ)n\Ldc;#2?QSr&7*Zi`5'Jri;"s_)2g)G7-]qqLV&YQ-kjj=P&@fRVJ2+m0S^f'_]$4@#Rr@3`C3NfghY\'#u`>5(SMHY7fugH%5G<B;6>TT*E<!sNJ[uQE'JN*h'gO#Lj)$_R?jXCfnEg4Gb)%er!XB;N';t!6dU@u*S?pJJimh=f48GZ;hb)Lp7tJ&pRJ7^7@No/]%dY;HAY_iEJQ,h)&(#`F&C\Zg\i_`P.24J\*L9.E)at/tW@giH7cp3VKc[]+1JnQY(rG5gNY\W"3!@ej+]-=GVd2p0O@("1/W3?`P%V!i;jMPl@B-C&HsioD6Zb,0)SQ8H0/a^H,hk:Hb/Q(nn"S!"*DFA=81&=CNGQm=Gr(<N7F`l!tXg'21oJFL]Q:(*d?i0_$A3&s9l%S1-(1c8aF5=*IL_jc?Qo-XDWO"Z\3S+CcSLZA<,C]Oo<`"0753h:^5rhpn8\D-hT]4Go;'Fc#UJpTG.sAh&u.^jm*?1l,Zf"#^0'%LoOWH19)gf#r2Xs0J;G>D:mJg6Pd.&r4fAm.5QaX0S<?hHQ6X"2PEVqBkZq9CEbnNbud\0O)bDnqJ9W"P]I;YeZ!iBqG@Oc?VNZ.%jeX*o<7OE2W)GN`b=rKVcTPMVJa9PGi,C;6Gl9U\97^U4P2c*:H#g'te2c\s1LC#KH'LVjrn[2uGSZYP.TiuiDJ#),D)/,QW<f_c%#h-op_M\+@Kf+8I-1NN9UlE87&onr<pl]k^LbLOhn,^oZ!*HHM"uBjnTON_dgLP]3+gGECYWZ-tE%/H=%NqVU#mqY],9JP#`HMoK%VJge7_.62`p!"Xm6WuLldU52j1>/MAQq"j\g7)"q#,.nC=dE/^JO-+^idm&+fl.TlIANDX)3t;/9FDD<2$S+)^^rLm@cTpS18Z%B%1WCH+GkDj6;?#eTGL<b\8T8Of;p!IE<cpAR6$6QM!G3j$d#?!([.mo2C\Zg\i^ppW@sfs=e-tWm+;9WbJ.]bT'l+a`J5Khcd<4Y*%ClJSA?80!W9Msca)F/*@!^&@`O?F/m:h9DDKc+RVV3krt'-sa@d42&Lo05,/*p!b"6kps60Q*$UVhEc$#dmCZI4^[]d81fPWt$=2%O#1X^a[%<8AkFA]Y6Dp+7&Z[WUI*n+\=bfE6(FGq/p,B!=,^4-;?#X;[XTrIMdAi'<+gF_LC`$*[g!``_%%4bX,&Ghb^f&KFl&t!%L(D!D?3Saa@-JP#_*[0SapZnob[:E*9\<ca6ZL`\,XYad9Ot6/&Z1st,aE%uH?0bq4#eD'`Z'>2&1FX'oK<]59umT_0U_";#_AR9%P29PD!`tI0WY;N`kBO<H2/H/T$6]T\-Z6I%Tt.6W,1>\HB9=2!@6I:ubka?[!eaWNF4pm7!lnh2I5RiKLm)o!L!COuHLY`'b,bHf%p@"hpdAs5<C_[me'G[?H`4H>&=;\+`_JDQD,/-]Y%3Ksh]F'g`%J)V"p=Dn`j2FhO#H#:&:3aSb61C!i!7<BTn7Kj#Z=SU%[F.++%SS-%K/nJ7#@L*NN`=%>#`+FQW%R[Q\'9]+19PB<_Wg6!_+;X@!-r[^1L2D1e&Rue'W^I:3=-#^^F+?\@Tp.k6gBC94>CiZ[+ut9L%1Bj?YP1h8PbooF@";mC)a2I(-agn3=R1a%*)&Mr)eR"JAq4m?79A?1Bd31>7>U+"GA>^A5->N[aikV5`[OR\e<eTAlY_E\&,[LX/%W$AdL6V\1QJk(QL/PG%F7D\:n-3iZ@rf+rfnCt=keis;TmSen"-r&00.=A?.5Vu('5YP,)l$F+V_@_)`>/18f%RD`X4kOgh=nFl"%P=:MY'A,bp%M$JJWY*#SY*s0p64jS`ABQ/4MojSE"U=AV8;?jb7GumN3->mC6imiF-7+G=,>3eB,&baaeV@4=;6Ju@MLP^CMuEg(%(KC^7BG@89_%4tm,*Q.ELK-a0PrEQc'?,6`_AYW5')2u*K2F>DfGBR7K^Ee""qUm^G5qo?'Il(g%0TP99qjR87Dh"ld3-C@IcIXB%5YN,$)hYq@R\A2s3!`O#82E*d[fsfc3i!lpY*3A*3'XX7-L6=._D?f-ctlgtf^BV#:!;,CAJ>kRaosoKe4nU`%5rEf*(f46JS,##%.`O_Km0O\$5)b^S6cKZR1um9:Kj.mrY2bRdru]jqkV[1(^)M6S)O\a`Bkis.3O"A@K6XUhV_[mE#&<d?9B%^7VP\lO+XD_BOq]nE%"bq.6"9??F!MGVZCOk%u(;<NVX?e$ae\dbNE?':*+Ic9W0Eb)T/J3TKW+<r0#f@NW%O.+4TaTr>W'62_J=J(L0J1q1jR@"Qg,lO\%.n:a9\AGhZW:!OjCa]iK+gIN`8W*.>Z7T>>8gW6/*QA6_Y8rC<)/quK:7Rgs:!OH>3G4k]`M:!mp[Lc&^Q55q=+]6\QDt,o$'5/n%A/XZu"07531apdh]S,=X9488OHqCsWm%2`A//Qu=Llp@E[Bghi5]kZ"LS^oaN]mSs%6OVU1J@)#<@KSh'U>N2/fcq=$4W'#?5-!%%5]i3[?R<R*:"I_o-B"sC46.rU0`@.IG_.EdKI=o$*"?D05'cNDj9=.;K92A!P[n"(L^?f]dqq$,i7Q;=$/9eXJT2:=W[GZ>&0+A;%:_#WYS.8V*k+$Lq(U*P,4N\a_s'FCp]a@(Zai#^g@h-5WYjjnC%]bC>I\Dek0#(5\+(#)QU4Uur9Ir?>@2X;Uc:Lr7#6k_A1+`MN%S$7`=eO\sM5W!e]KW:4=8Uq[:G\L/*f*DAcOtM)()Jm,2mr90a,i^"F+SXC6"EFdBaV'VLEMaGkk"l=^KQ3B'_er&DH49@rX,M,Q%?)87VeeBe]7u^3X9huqE('UiTLug,girXb_:4Q1Z0LUqk(cbH^N%%9ZN,_?@?L:1+Ps="%c*T'I'bsH"FGULr?t8XAQF1S9+W/!E%!_e.c[Nkjrhds$H&&&0Q776Z99-R9<aF"nW:q'hP&--Og+R5.):kPW1,YQ/hL#/2m_;8kL)*S[&_khGg,"=8/KUYI7#_^%9$ChAH%(R6tI'Tj(L@O'p<WP]8eFosgb36s;/2Bhgb=,]H'4UCVpCt'nfbQq8."AH$Q>1QsN<1$fDL/aXqbT)(##cj3m@s*!WE;=HNJeU44%>h4jJ5ohSC7<jt[)ZC1&/:%g`7RQ1R%i'-QR\msE]$*GT!<hpA\e17Ca^C*WC^F>OS0;Iee.p(N$VXXC:1"J5L^D+:!sHjW#mB_g%"c0":TqMrk<@5;AC`'2:ONrB'&Htp_Z.om`-IYZoVW)9sJ-\k;@:8:q;rN6FXDN_?%F&`u#41i]_0N`0-*J>C]\j\I$:O:";Mp$2%1rgm),tRZKdDNFOM+gKO8Ed;&!CGTF(mP*A_kk;N$*rVSEJ\bN\Q6ASMf9kiFT#G.>&Yi-Ea"3/@<[B+?U1q9*+rnFY_i_88A917%I$_\g555b8'N61\E!&;W2Xn:#K&L4N3=I%-C62>n#*'KpGHhGnL8<k?*uk;k:fN_]9B'naN.ekdN+*s@>(g;JPP7&\2IJ*!?nt:$%K0p,E2=Xn@-('anKI+dL6)6/5N^D*>L.uj^3Md:?X>"ZgE+kQ3Lt(A0/2p')@`T*2j'7KR<]:U[,iE'>;W?1G;*$6_GrogM3cSpf%_OpbRoP^O>_4)9\.00(MYbdYUJn6EBHS1(R6l;GGYN&P%STcNaiI`et2c9*[[tte$NY<K]#p?mML-ekPClX6k!0Ach#$(1:Q8#r"%iT)r!3u&jB64r0Q2F')YoL7@TGmSaX(IV3leKQW5"a;!nQrJ+LW^BNM'2s8tXMC&m6N.JLW1-Wn4"XEk6Js_lUgsk0d/4o9E<7>T%?Ml@;du^1[7%Q6@kuqJ!JFL\f0Id-aLl7+R'84JqiZdQE4'HVQ0&2fkdIZh%B?-29'a`1:8!CYL>i#Qd[E._s$rdg)>$a!q)oMH?%'\;Kg(>k*bYjEP$Va9NW`Ipc%^iYj)`@uh88t$TK!!(D<1^Y@M1Z(h4?oVm)0[kab-(J*=F(8LRf1Cl3I(KB(O2I'2osB5UhbEbC%\+a`$[d?Ud?a0Rh]T`ONp!K;Dq[p-F-)?bjC.duM8t/2!aBae*]0Z?XF,UrEa3:s^SCK_GT(ZJ84ahO!6oZ0H`@4pXpMZa'QtgjV%@9<B\L/P=7X*I&$?+s:mH,`h:JpE*@Z<=q[jWt&BMNpLR%#F^bmsqLj"\a?K10XX`M@7,..^f,#<BQ5`IIqtoR/I!3rdSdl[n&eF%HmTjHY[6=>A(rQCm)%U(f$06H*krH`nKbk>WC!#IRJ,OQSLn2('U&1d&%UDTLgB#ecA<Uk]moo4:M4N.3Gi-Hq#/t)IB&BQbt;2%%?;G)/NI^O!/'!OLFK\_=R>cL4I95d-^8r6C">8Lk\&07g64W&(r;4%0pH+[+d=GRT5Hu@q_s4aDBkhHbZT)7+ke[`R_97rHU1+,5%33eRjn34W[nPjbI%7nH=R-R2EY>(,bT@dHU^;E;H.40Z(B<jR(]o'h"V[BIejoAA,Z8C4K!F2Z)[JaE1ZCc9pOgC.u#7NI_SZ)rQ%#9^[b$fm\V:VG>+WiBN(m&"NE3\,V6-f4c">>n^UFU7Z)R-#715%7JZN9;T=//S09"64`/`'tY=Q((Yd>g`_K0"GN78ZQO?)H=2k%YlsUT#[E">Vn7KKWDPPj2ImqPE^O.Q2lle;</3UA\u1.<5$JG8Zk3*ESJVujr-A=ZA-)n2+P&=Bm+jad@0Ksh5isp26nXqX,8,_e%?kpDn+XaqKF6$0QJ@k9=E)n>K*AZqV]@t/LI'l\)L=>>`8p+b>mXQ$(ZS*0rPK:k8j6YZt25]C*p(7lRVY@[)Rd4lff)#9O>Q5jc%ZkFqo?J0-7VR+AXLA>3/Hc.t*)Mmd!Kmc)*%g)."HLN24;("gCB?t(S>1e2;=u*k>p[G:p+&DHSgaPG1^QTJ^l<U3(Cl.fICrXH_%Mj\t'06l2!^,OXCH'S/a9`FJ7?[]Hki!phu$kn8bqoIb8\ie8t!F_'I+<BeG![(5erf\B+7,[p1.=4,t3s@t>&5$FlSHn5ER`XQS%C^cAY%83OfXsH1`::,oML&_,+XqIO2<[+TQMoaGW/Olr#).tNE9fI\uaJR_JJQlOl-grM8kZZJiWDr26XL8:+4V2X30CA=R?g_+"%rq:[,+o+6>i8<]n^V:<D-$O/rLM;DL6]QOJ":.R:OP5enil(qe_-)n<,=mh#J8t%fTmB09=m]Ntho/_fc12@@21NnZf89A2;gH'm%HnD*IW'nA+F`>/(M5E9]Ko@A!qc4UVK$Zc`:'_NUcW7Fi&fMRj<Le)5h;lP/Y4OdB%Tg(4R!]r8N9O^JiEE@uVd"im'=PgcfP=s^%eP*[i>:XQP3!"A#CqZ:Zf9JUsqL0Zln:^$`DJoOf6)A&u_QQ,A2JE?GT]7TO8dCZ&UeP#qh]cMYdRpF'lDZ+Y$F@;</j9X'g=ua=%N\=?96`NcmX(<p;9%T\6`RX&Z6t]l)Xmg(ffG&29+lYK_'5]U.UHUSQASK2)7bZ!7j]"-TA[O0sH-&sm[amuRfhEp71jFmcN_N`/%0G[Z]Xh[[oU:+_ca1No;Be'a;aeGm<>I9Z&k#=9V7ICE)!/n8e8[I;f.r1T7]P/m/619(T;RSR3=;so5,U#UcS@+iZ,=rpYBk?If%)FuB?Jrh"2Zj%caB#$r@6V\i-TtJ?J6`ia$=1sC`[p$3glYXWl9sQIWMm<Dp=QYF(Q$llcXfR175f]b'HUVkqqRFZk<cDrmYT6Sk%D<s\?pgPRW$6W+`"k^h$P_(Q#noZ7]Z(H)5/::dk)9%<C#L'ZJGCGunTtHe<HRD)GYfE*t9=c(r!"937lK)Z(Nl=o"L6OF-^og*h%&$JQm!W%%W(\EH?^[cmdO*h)-MM&m,8!XnpUsE'WF2EL\[6ed'$<TS^]hMK[jI3k/:t:PAWk'p_W]MR?_d2,rO1S:b13^]C0!<cB%fnmaCNj6h1G%TB)aJRobKQ8TD%6FdM2/7c[_KMalYZnOYDuS&%]?&/&rO=>a3np^Ja5cci3DI3c75U9"^*QZ$Sr2)7BIX?0mC[Eh%<i!,g^jsqk!`-KQX4[joi<qZ&'Sc/oFkjBFI^s7^*:u.`,,uLRo?]m%Wmft1Kq(oM4EN(a&ZkR4[DH]BrG81i)[R09@&lEOj?9oo%g\nZt[<d8O4H@X6quU$Ga0g2A17JL72)5&E-=9?cPr;1cJA!;,?d7Y)0b)q=@6B14c3H[ib9A5M\$7'RYAZ475=@fNYUujAgQ\I4%cH!HuqI_4BR`r\G3O\&ADT*C@%kWF0`e!'iY;\K)+mi-=graQ&a>a\qEBs:5gB8PL5h*Y>d"1\+haPn;F?3u/'0ukh%Sm7sa2?E5%"mQPMNpM=io/tRR3Mj=.o-"H.b62/2C\%r;SS-JE[Q6XR0#pYTT\g<#\q#X1>=N8_"J)C>;BnKj)>=\(,sb%"At,9NZaIi4Rgcp.%pD20k]D/]<3Y/5$'deMB/@Ud$60Ga*V'84?\?gD$,3T&3"J&'(6PPpkS[k@F>n>,keoO6.cA=8T;,%)pZTa#\QifOqNM-Hde<U_G%27ocj-8LZ>kD1+K6_7;#Ec`G+"hX=0_J!hC"?g9?JfY8'"?f^UUcDD$G`UHnH59)ec2':MA+n0pfl+pa,=cDH*pluJ!Z9,39ocq(%p?(S"M]L5&B39_Y9a&#?Ynr,oMj\rAr&nn]gDbK:pqN3<f9JT,fh]I,DhWZV\Jn`s2a^+,F.u/uhgVegj,j,/E6&D4%is.Vgu/Jn%\gHP^V9$0!<4gPpL,b2Y=t;KeGrZ+#T?`f@9D2g'n1Tt@Lfsi<F$i2dq8Q@n6O+[m?k=#[\T\_IP>q-?8t*3!S[_O96aFB*FMh::%lpFOI)Dee@iJ^Wtn>I\+E5UiY@4,LL&Aa3F,oaX$a;hFfNi>qi92k3R+gW%?hW84oSqt0Pk;u0VB5LjcAkS$WmBB3=$,r%EX!4W&%K]q1"NVQVXd;5u#d(7(U?@I!;YQmu0jZ]i,?ZiRn!B`I6]?hBMDmoG"g6+=]Z?I\emR?8?#!a$sPLW@EH:iU;Ve%T0ku>I,+[GT-%ajVMD`&-?,VA87shI$D*P\^V4S?s.fgM*%G2I=I44'[@<WM@(bU\[ZtG#'oCc$j?ga=,;p)4\p+!OTIBJ+,cE0Wo:9ain#7NgLkh%24<ntIEUa)'1")t0K[6X4^:bR3H;/-J6<\tC6_HGQ:(Q0KqtL^6ldj%Mt%$Gg0Vil$K3UUX,X_hY$:=O4#:!@g["rBF`=U(V9-76%&i.SH*mTU2jl(U(/!Pg]p3WVpZCA9WmspsmGL@roFJ\9`]tN^D#NYK\\W2"5Mf_pGDkB#o`$D9[G9Ea*2*j8<X3kQ>9*'&CGF7li%(:'CBYeJ:Z:=9>6GtVf*[;sN4fA*d[gQ5#t"kN4"C.O'U&NT!,HW3o`e]TIf!(oUq[46Pg[Y1)f,g=nkXn%^?pXCg6pZJR,lLe0K%2)5^&(Nn6!`.eB3f[u*=ji'p-A-ebb15q4+85ij=jNC0B$rV^CYj^1(J^]jCD+XjgR$$)=fVU+B'sg>-?r4/(=/RK$[H-A\nIug@%:*$^qI)\85B2=)V^_BZD-q$H,2[kH=%udI&KMc=12PPeM$%Au97"pr;is\<Z#c[IM\0Bp#-"9>C3[7Pb9iO/[psI[X6j8VrpCs-u%fXsS?4%VsJpGd1=.^2.>j'81nj$*/VJZ)sMMsJt=._(3EBaS`-S.^NF;fJ3L*W8H+()CQj^Qebbd1k`F.N(rH%B=GmR_m,3HODYV%2T;I*g.T2`5Z?$(.CpekhH`7?qr(?/.K'se=Cd-Zfc%@m!1^%l8-=>.Tu/5]o0^OGfpnu@&h>].!aAm0/asJ,g<,DOn;V9ZDdt50%R%N:R:$LNs^f.g)eo$oXe#S^1@jqqH)RAh[AUV5"H)=r@S0Qk61D+\,9R"20)&CFP*>X#S8(5\/Z%pQ4H);Cg\-MWLKoOP[d6)In%e(MJR?@(/Y+3ZMWVK8]$$7^V3#?kb$Ca1]\b<"*l3@N"`&*jYbA5\b_FXA<8cYq%01WUt;-)5GaL"Ub:2U:sWHFXu-HKAG.`LPT1%FCSD9[<\!@RNdePbpQbi<)IP%km3D*Uc20q@Ec&^L1m$l6h8eMgGH7AD48;-LR=g(ArqA>ZB`cpe);4H,>X_>0Ic.GM.KD3,3t=.%?-qFqIY_m1l)p3:<7"3h^'e>?=U$-SAh_q=cAH5%ktN@CR:\>i`\Lq6SCop5EFtQHNAIV5DCjK6G,rf(h6tSH.DJb4/#!nocuZ,R%=u+BrK9LtLb0,$?qkn;#=fXU9Afau6=@>H.dr@=I"RJ"oo4fUZnVreln<JO;7XACcjQfE;5N*N*&:F%q\7K9]KAf*_f^Fu-]l9GO%#VR!8NnCdpEf]fK!t3%&/)hNp-\Sh`#QghWU?i=>#`=A\B@;&L]u#<LVN\l7)@\C?Am>]^NA2GZU8#FGmS^j=8R]QhISV2hTB$<?%e?kS\9@#f^/$)50&:j\/^P]$jpqk.,<#5VDOu<FOnt]c.i0U<F1qR?#6s?I0$^A]Y%OP#,W_i78)1tH@JM?TVOq__OoG7GO&XFkq%-%\N;4)abeaV@dRo0*tp<2K$8CI=I)j)bsM2-"P8)U3u`-eM=n2WUG1@EJ)a^k&/0q@9^G9Go=QK*/*.]559k=(p2+D'NuM.rH1I%p3t&(r=e([Ba!e?\n9/oZt%^LD#aV2joY(c7a=3fC3QkZg3sC""Z9<G@j.)V[k<r?cCBdh+B3,"T5>]44aKuO3+#E\h,%8oMtcXg%=kpO6i2m*297s]djMsMcK"Y-PgfGGiLN)ON;C<,b"2r]jU<D1'!48Fu;4:I#Q7n2/"e4WQ@@s&A70be)MJ\lZWX`O0>b?e-E6bm)%VE8"D!-0JlO3Eu>jEW9'e[8+78^\$C9Hggu,pS4#`+QD_)3R-M"ptQ;\fiql;r9/XA\>3tSE:N&6TA3k4a#L&]1$k9*37aNX_KW^%=tbZT<s<s;UI^\ZXWX/%ESc(-J?A6K]+M"YD[a1Q#=(H'OIGCO,I49P^BPh(dt-"(+Nm@h0U\k+:,6>Ho!Yf==3=6HX55I_=5/>&%T)0q^,kZ76jgj=JkBV:M!1(l"c>.MF\ln%#hT0Th`k2P":2@OhH(clmXh;PQ^%[nA*]Q*\h>SVI)SWs*E0t,f_%?]=b'2H@<htu<%e:?hQ1i];=%1*I[eouD_3KL_+ns67jf4o5-o97Sg2QS[9!L'K5V!?28FI3`5rG;;l(L8QrFYNRk8S*X60Ana"*?(M=fm#IC_KKRp%.]k=1eR$/a0R1F:<bQHL6i1JN)gd]V^6m$/m*='LG.=dn.HZPVHsMRRgu&d`/:%D@;bR>PniLSU0k$_n1ANuM7,Y4K`ho-%8=0$Z%'QYLgPXN_Dk*=>5l=(G@'fb<_l4amIfB`hp.:tTK^Fb-PUN33#i.>hE3::LFYn9ZsY0Yd>";<]j^(*3/'4k:9oUQRff`%ASF+Us-%9e^Q2cuge`#\JfsU;muQKDO"bNF6?\K.0l6,FDX(3Au(LF8^d1)(+^n4gInOT[V>D#D#Id&dTh]^bGo*KY^k>"J_:a=9IfLP=su"%UiRB`/;J%>Rp2UN>p^!?QAgtb!jsT"Fu=5RM.)SsbF)plS64doO`%fE\X+"HXK95e#6a(PW93?Mff0p_gF:UQn]KBP:+HG)X>3&L%8KjQjL-(Pj'QrWdf1@8<FGL>CX$if1\ZMjC9/`ipY_ULu1i7hh)R;t/U++!^ZV&G!5<gKo`+2)Dmkn.&.@[0340+=-Zc`'>d7Rs+%UP@)\U;dj[--q/7Saf=ZAboOa[qUNEUPU-*9<<?`?)^SuX,C*>m&"I6G@Cm;eV+mGK]o^5iP[Jq:+RW%`"J65b'VNljb<15]1=Ir%^"dhNLaD1PQ!)(^jb"\qIWYZUQTi<h&W#TsgW[*pgb@DE9.;n/H%p0?.'Q\fR_jU9Sq=!]OO?RaAIAZB8%;.mTZn*sd"%M.J"&bX%Z%gn(.Aj\T`fP!7i8edecFn%fJD-^_!3h.YkiT])>NcNYr@D?^K`X!T"?2(@1qtpm@jnD=c=8\c!m0U)YC-MTFUNuu(A*c^?@&($%LX3E@'YS,kbb;gud9ULI,*7,($d\m:)b+?I%G7t@Ek\p?edK.e>WaWt>=2PIUlA"/:sKG-cE'$&DL2[/gf(FW=?dg)QY2P_\i5RM%5EOH=l7.-/YUOc^MFn;o@^Y#Oa$O[]\Zfhe^b_-21mGGMTqP4::PO0+n+,#?AIcDuqNX\)_IX2\ZHc`d%Rgnh;+<)iqf/CtTmL?h%Hg'L)IlHJPcKMp1^_>a$2WCQb*tdi*L3L5N=**%Kkem>c'@%Et_-`^N?p]=kBte*30#Noo3Ls5t=:@9+UsjUC:0<7iB"oK'-$"#b%lk5D8Q)'A9M;_:dZoDXjRHcS&0S_-YZ(YGihO\hGZ/sk!a+=P)d,`mf,9-'nFgGB$Dr07L&3Mt@-iLG'=!D1+l]OUYG/,aD8A`!0%)<(hj%7hYi.*u`CiYg,cSH?)NLa#TN)k4d<k/D6\i*Gj`X#/\2@(&c3Pn,;4-lQ]BG*S+J:IoW#U(&&K4P#)4cs1DpE8Ln@9s1da%\,4r(p)^K=CGUTu,bKN0OA[=dg;Dq&7i5"AXR!Du(c>_d[q_NUh4=X5YBJ.lhBZ^:d`WE4#Q:oY4m+$/0EZLGJ\sP8NZs6tC9AWT%m`Iu:CcX8#BAs5?[_ZkcpD"dIOd&CDP;koiD>rHf[NC5D_nKMl"sDr6*lHiG8F*2dX6V_r,2jh_&G2?lJ:IlFo&e)K>Tsf_5bue`%i4HX+^J`b4q9CEl5\2IL>Hd!g.XcNbhO1AZo`nuS&NSUVReQO&i3hE\<&i4:f?KA4?1V[\He5cdA0!/dK,B4sF"-&*Ng6Z_;B=tE%2W:G69f8E52>sNq-gT)\ZN)K$<f;&T+LALt,M(?.4Dq-+l"'fn3u%tJ%t2KNEr0_iV4ugs#"i]34#R0bDkLi("5giKYf+Spj*0"M%DgCs@2VGnrC5GlP?@@hfULICYV[+ku5TiJIi03_)M"O]`]7M2+ZM:^VDG9Bd>]$>+N]QPB@5]Gge]"#u0VLqC0H_!)\d@F7[pnJf%;_f-LBr*+-ct5>"9upbtOGVKR5#]omX+2lle3^64En,?-<5jc^!snf$4Dk'VHb9c>P2_Y7c/=/:d`4AM`IFl%\g<04Q>1t'"-tUO%_Ju1@iWq5QDa5p(H5Zj+2isf8DNnJ+ggK2]6D1=Y<o7SQ%pqgm'F]26>H'lIZW4#aObm>TYXG8R*Z)b=grKtEKE^Gt*Pu:%A8]3A%Q!@EI0:n8&Zf#/`ZqBM!qb1"i]5akE>*#_(@5=u<#cXnlWjchf-0!2%QEp?+V(mem)ADVYC5>=hmpR9MfGcQ:-J_/_=u;5&J,7$^%<dMqmH)CPHMEE["Q;m+Wf!)9q@=ahb/%5>@Yu4kSoV#%.MT,JW6_2`)#mg;C9-TD9n%^PNPHB,;*g&.B!TS`YaD%%A=X\4@EO41O%o:3@9;ukGGN(]E&U]!)'>+!+rVc5RAdnESH0J=^+p$Ou3'A%5?4dC2j!q<"7>anj&BcK>n%KWq-(_M3"BUV6Lg761I6K&g5b_,*=%Nkl5H!5en()1d;=+KDuI'3s1d-YRgL#agaEJQ26F!lAU+(4u!-_<AMM8i;SU<qGrZ,?m:e\34/c(e(c5!^Q$r)G0%sXq;fFIesnb%cjA;f,Dl6sfrt(rkFX)X5)<L`(^>U<lg0%AM<SjD.RM4@XS$aje!Cf2@b[&!NXIl!?E#5-:7ZRp<9N,tW#,Rr:G!`Y>eY8_aMSfo%a(Kba0I"<M>d=[emF=Bmg<S&E^m5fb%ia@#V))*oLW$I4GW!'ME!$3E\H(#2h[]qDf,5.slprAA<6`9[Y;u]`=h@-q((k*815.,/%M$B'+7/QcS?N_3Tna0PrCrF/RcM[GnbaA(B1MiFXs0)hfm>/c^;!k!S9tk@)'L$a.n^`e[2i%cNFjmaT#LUH'4T_HVGIu#/&nt0m%UgaU8ZlH@>/gWsD_>LpcgL]$/'[s-6Dbh\e6Uo;kdO[705(2SPWi479H0bjVl#QlRprq+W\ZdttOhgUWE/>Tt:0bja%mGCoCiL^p%TBW(t9cn'8dQc=TR4`(%oU3Enq=G!/RQ_+cGlV>p*fiP'<*<Qj_nu%sTg?jldg'K(.7BUg0Gh+Nm$Tg]O=A"Xc\4nrpr#GLN_s`D%#=FUEVc4QKT0AGl`225\!B*)b:7j]+5(E:-f^n97VF2*F/22(u>*_>ZLmPN85!"VjRBDUrZ<=0mUU)qN=gJY*>@c1GjikHHD\@A)%`u)9banb_S$$Xj(rAA_>@cPpMVN+tRZ;p,Rk_2R^=mG56"ttCH?Fj0oG+9Wdg\N>hXPuaQNrg9S'hoc=m>U5<5)L[HfCTMr-=8IT%7jf##*1?2J8@EGK4)s/&oU$!BPg0?/O&"JAep"9X:08*mb4O)<$[179D!Ff`3PCm07jDXBB`-0Jd?qE-USras<44uJ3AOn=UdBsI%j>65K1FmiAfUHN:&RctX3*"MK:Nh(.a8&;H^S\^Q$0e5VP`sVF7lRaHd>0Ye=H*>XUlSis0*s'2;>M^+<$^h-W\fV%BsuHnq-V`G%QTW&^.5(3DQ$[O'IIojPF%+@G;%1SQ9B%j\9c\YLd]SVUl+9m'.onkY<YZS4(u(.]Is1$4Va;[\C`j?R&Mp?Sb/skrM9W)a8OGKP%\n<[6W1#&+1b4>7-R&6nS#<'?;K]S_@@Aq6I(-FB%T5r*hjrV"[,V0INZ;&cLuab>TEAfnDf1("oQ+q&qho+>hJQ/b-7[RWYI@^X%Bqo4n\r>R[b[N0ge$g:i[OtgPl27cGb?8$^&bYn2VnsZbeb2T[W!L-mXaJt%!+Zmp]]NXS>ifSCYKt[RQSIE%X0"[bNX3bT@5/G&%=R;Or:5?KLm?S5)k.JG\*Pg*jJ]ImQ&+q=E&&e=37icT9!EONRH3.N>0t26IP/r0j].G%RB\$IT%Ns;=^^Q\OJ\s"K0NgG'7^@,h%dbN9UCK.u]X4!/FTkR0BKaq4a<[UmcgZhD?FG0XZV'CqU/00)qQD#NiZ?+g8URf<n2SI>W?L!m13ESYDj0E_+3GJpW*c8T/%G!t)%f3!3r'<\(G1<G>+Gd/dO3=nkr\q,Z\%Nm!b3AqGgEC4p8?tU]/7jr0k3NPi]iY5MVWc\eLT2"W1Xb,p^;=t3i.!c\!ELAf'0Zq>M%iUHFoRQ)@SjP+9sHkXE^ShWJs<V5$t73>eo`1-i0kuCtq$kO93R$MDuO;CtW[-A>r3\JZb3Eh9fE7Mf\C3I-A0L19pdJOOXjI7;k%q_f<7Og\%-hB(G;";$'EM0fiMJ1UiD/Bo<H#bX=],1@kF+=hZWn4`u*-8[G&&O9_>]KcU]O]AD'/D+.oMGY*iI!:9'UlqGu!XN=9%I4#*;[Ti3Y!!9F;+\i#g\BRD=01)Ia\$&@&DE6HO16c,UX]2'FS00`17K;#'PQTTK#c0H%IFU8@.p].DAqX]d<^!T%N),VA/qHXk%a,!>jK\ccaCh1r.)ePZBaQSj;'0ZqGg$`fb2u719dHu`@%$;EZT#\BK7UUQ-OsAkMIJ;1g3\"C&iN9B<+,?Y-qrE(59jc>``sF?o%Qd6p-1f%<pDcWKspn:K8T_AnXo'DERs*i%AEO&>53h;%`=9d"?6,\`0++GnPH,E0(JK-:#GdmE`If-U@,qq%oQPt,)h2b0E^7P\Z%Ig-gJn)0"bDlKs'VB<BW2;q+ARt6K$!`Lc[;+i$0Dg]HYLo=n#X9XWPo0<1Y1bsIK$sV3o=K6pTZJ&IQPg#:bj#r:E/:if>"tdFd%iCstqIj0k;8id$5Zju741*KZ,f<,pt"B&K%niOg'QTqHN4j4LXbK$#=DM]0Ikn-d8Sbbjl6Kd:ch7KY86c3a)n+"S6(iITdFH;gF%Lq=51b$"Kr`&)!sNZNAW)_^mpl)<a$L3J'Xb@KIO`nS8Q2ZWH5gbff\.rW2r8#RKOaYKrl*_+uLYLK\W`E:?qK8\?.L[3*qgMfnN%]<t&g7ar#ghZ=QSD"qGV1G$c%p$EF:L\(Jd&-m8V:.=p!2d$12F;S_&"`G/W=8>Bfn7Z7R2ff_<d\>2X:4>]OnIRh4l@rk_.k0on%]i*6!(NN-Z&0BKHKe;&j%1F;K5)s$S![;otkfW'(0=m>3<_]*eCi%Q8jB9L4d1qs'c9PH-]2L)^7T\4HmAE]\n.PBXa%.%+]X,]&%$]Bi![9Ei@#hq&i`+@#?R&[#>fW0PpVXL%X>g:Y#,e9FYcj4/.\UG4E9#Q[kK[5UZKT(nl,elbda9j7"01RV"Jp*sR.Y7<>*Y2nc%PGmPs<67'G-S'GNQPZl90B&$d\%H\eioT#@<bZA],Fbf'bh*8C8m7Bc/(a5PZrK(i6(LX)`[[!c*l1stfme(-:o>9h`Djg7GIis;%h4<G>KgTkbA(>Gi)I%KScd#S>gj6OPF9&U^qKp2@m4Vp%a!@/cO5PJCH45-%bYL8"1gfgNEi7k1Fe*USZQ&-j(#1"0HE^:4\n\$n%%R?!Km,o>kr6X5pIfOT9&MTFAc1f@V5JtdT^3GBLG&UkI9,Z4Ll$cU3Et1+0\2J%+*GGG_cJGlgWRUMt$dc6-e7mgn?,Dt$A"mHB%Na#fp,cTuh]9VRb*FZTd'4-l3ST?p;'1Qh4MIg:G@lm.D,iTe2%)UJ@X!qg<'#9Z9>e-]KRIiL'Ik0CaG(%B2O<V1V:MQQLh[I'Z%eqK(UrZbm<<E%D8LS$\CrZK^JF>J7E$aBl97*Fhg">+0M4s[T[EES_IUIu^\ipHN1OnGe!>Ia3+KmTiZB4Y04]Pth\NRA<#agPHE%:Wao5+TYC+$-&VrdahBR(uH'>:3(rWgc4e,J9U$"o_^MIo<,.ELj)pB+DjF;&0nDnY9i`T4':/4*G_n7IG?RM?:4Wfkm%WCM/eoW%!4JS/*0u%_nbogp3g7Y.['9?qL?=Wi4dFMA(Io;W2p^"("%c1'Fa-&\ABn-D1Nc/E8.=Cih&qCLZ.P$kl:f/T7c&#[2FhpYAPBg^%=DSgr\F&H]TrPPWPD]N<\Tj3RSWo1XE'A,*pT7A)Ml2pg`Oh1UGK]`b-Z!_E94RU>_6&N<#e$.tE:UHc%lU(UH,X!d6,lT_ZaJq%%p%+3`?s)^h.B"cFV7%4j0eFRjm:BdN`K'aRB4;Q.%W^"'d_:V0h0Z1LcDdg'A6<LRWsL)hh)'<md?7-ndhG9oBcZ@(idS<3lkQF:%\hLNn6.;CDM""U"V_rTfSU'GfpCP.NG8i-&1Ahbs;L$&n&LN1E#>E"^5;TSAO:,E1Hi!5Cr=k@l[iQrE0pCM-`>`^rUG4^os5kg$%P>$GmPr)`;j*\l,I^mp\FrY[HAmt-?e+:q@=i@,6=L,9EgUGM5e(hJ#Z+Y0eQ[F\XDfKucF8%,LD&%F\BcDgL%uK[YRr.t&X8,A'%^,9LMH\Ue60Q$Qc_!*Gl;4JA]]f`]O4d4cp>5S1[.pf<qX-nA2$6V!&6!_Br/X/#[<u*p9Z1g>'Bjm!,Hu39;!*H04+1oLOgV]\P%/k,i6T<M`(_&YKX"#`FhXn%Ial7l7h@7.E2*:5\<3IXnDF5T+b]^qD\Q&$5$L%#PMPOS`TfYsBJJPnJiJ;[1996E/J4D1['p7WEl%DM7HoQ8p+V;8Fk?FZRJ#(tsH(@:UkuN+43H%$,-^Z>4^'i5Iac2.I;>`-T@>>4,A"CYJ0fN;G1lY0X2VCYtNUc6D!F]DA)Yc$PJL%!!E;RPP%ND\_?H:J7[H?5&?t_NOGeo.*S03nBg$4&kIC=$m$PRhTBRSh/],I3bD<j;UJ!l%6dd3+uYmD(Y`FLH_V"g*QbnE/-;cH%hC[g5B6IT>C(2Fa<W&:.1Ep6a"3-.1+X[BrjE%E'4G<dbXKu)m6fjq,c)\F'29u9gPr7eXbqO'7!mj2_'H0;g*7\\Q5#P6FB82eb%'2@6))<R-aZ+R8ZLm03uXuTlnILofnHW:.H7OGl!!Q4Y)GeI:;=#9Z[bn\)Ij8,nr'O1h\Up("E`$thB&t@?^"Ck!\_ZOgKEkfP<%16D+7Vfm@MHl.N8GYX^LlG7c.0Vk8^LkpJ&14[292&'X&`LYPF>T'OghsKu;_V?g0N9?HT"E7L'iR*Z2UuFFPC,U(u1]A3C<QHkF%dOe=5c'IcdZOLVT9*DE:9mg&)Ao_&1B.RpM5_102\l!CFYi'-7*5JD9=;!gE-Y],N9;X`:+<;\$"+3B',"lrZ]s*ZbpSB[>9";-C%U=qX`gI2+aOt)D`OHmhf?s&Q7@J^V<V$jOLBt<(u?!V5/Eb.'Uoc[%`n7q95/lZS8W+7N9$#@.RT&e@L6hk2dI4#F([:V4WIWA-?%G/`?^lPoFB+"i09Re*sDO3'tf8Ao1G*>+FDCRbDKeL[0FF?;5"Lc`sK>U\d:S7p,UG:/YN'@+K6>`["p/ln(!+%?fdES`EnHIog>%qV()AeZ7D_dE3;^&cheTQ6\tT_**sr:;2iRI3M^)[?[\\MFI$i`>*`O;A6n3PV&nWW&MR)Z3"G9&[>)C.CW8[/=mLW33**e*[;)S%:abm^@7FSlLs/SDKWQ'E4X9Em?!?I9Y^k9aX57Vk5*+OS',"U_bb3M@jrrsM%HuELq!IH]ID%S"f.-8n(;E>QgVpM%Usk"K&#5E'%NK(X/YuH%5I`%iVV&"Dh_tZ1Y;+HGi\-n20e=2ZD<jBM*SlFgKJeq`X\S4#5]f\]tQGmbQdJA1`mqWY_/W7C8;p2@6$52:N(!;p;%qTP"V%6KZG<+q(dF!3E/Qmbc;!:[BG8Hm%g)1sXX.!WA0iIO1JG3US%OpReX[oC%MHX7Ra7?._/5o.B;ZYG0hE%$iKH6[0n,`-#Y%SLe<)GWFkd*&O&3AV03C?q$dGN7E'jed2qFkiuKNnm5K;Xf`)OXo;Xl$KGY3Ii,^T*Qg.Xb.f(=ff=FR1Rj4QZeIr4%i`r,1u!Vo%rMJ:[)t9\*N%jVSU1(9i8*LVR(5?&j]jn'*e?4_'ZdjIB:RF*i.Cd0WbOAQmbRGC6T<kjHJUu=Wa%geGK9HnVCSen@2W\g:>mNfl%`:C,g,96Wa'fB8b6Wu@.Lpq;4h@#9hU:Ka!n_,/0XZ')\K\4p?:*.DS4t(43C#h*^-]sFU8]WTY*uA7nPCCfk7DQe"]S$maJ?cL-%MN'u[R-LO)&I,<OSM[Fr6'<*+`;i(8B7,k:XVOgSq'=]l/:siM!Z7)oa-4C*&0`-@oFb*=Z\h\*jj_O?&Bhroj']#nOXeA.Dd^%,%@b(e*kZ!%95;<;67(Dt<3Gk1Xa.[+\N3Gh6@Eh60VhTCW'XlP:m9P!IB(\t<(Eo*pUFAo(<#+p\O@mZ>*29\b-;U(a3kcc<jT.HD%E`Z#$O4]0Gi&`dIpfOBX')S[f>e9>i:P_Db\Yg<X00:-,)m#jAX\"P';]NP>PF=t5?0-mD#obR6rm&WtLo'c?*BE(RdURKrdTTZi%P0X7)N8mpJLil0E>20(o?DS4JOi_N3inWEE$LhdV?HqOiM$,HF?RtSKNY^1<LY97X:LITf#;cN<im2Tei+N:ip?$ttqW]=a%LF.^%(9-fR6I`ah;U=?lqngo0ZCKkEG0UfE9*hFDihB%Nd.OT%][](aG(dJ3kD2fu(Di+2@'mFsFi\:LRk_D3+?WU,<=3=SjKpBX&T;!o%X:nW0X.r^@TfZ>XG,K]3j1*l7Dj(K44g(.Zd#cPPP6t_(9%UY!Fs"r7=jTFb\*&q\NlXoV%0"PX%%p)4kh<kT$Xn*'OOQ`hgg%pE%SZ<_VVOD,Y?s*c6bCPDM!=6tT26S>GM9'L%l6,EJ&X$*EEj@N.'(T1ZLie/B)7F0fl.EDA#ck.p>t%5H#"G4C<dJ@.X(gi@q%t'u%=EUfEdo[V:B$QuC)SNI8B50OC!d;[Plhsd?l8,mfOkZB]%.9TZq^l&G!*fi4Zspej-Mi[L<T+LHpJ*_`#\s\+g,7o:0gI;Wi,V[5%FR3PkVnMD6`Y2]DE5T!L+4V.M=f2[<M*m9<-KU3-YQnRTA.7d-MTG#2'Ue;3&2NRYL:]ar9q$.UCi@S*O]%68Un=QFH<N_D;g&Xp%8<l\FWa#t+V`'Z<glb!f5;AX$h9:mEpd"!%$Ih8H[h$%m[!^Ul*.)rAqXmO2HOnifn*T/S9"^V7fCfE=k$2,<L&2<I0n`L\T<j6b%#HXL]j3lpK5@q'$5`A/&$"HpDI9J;(=DPLH,*0.8bm*#JrAbXOD&,2)3JKIX>?/4KL9Q^d9p=`U-RQfY[<l1D,iBg:"E?`DL5(HP%`AOe"Y,BEuqF,1R8hi$V?3ZRd[T:>[4!RSgP,<XRBNVX;SI\t^ED^tI`l\hDSub[U&_D67iLJ><,\Cn77&k@p4f3fA;%4C?0Vrb>%%e;,Na\Dh+W:i\]gD8l;="^P+<_8u(]fN3t=,hVf4qCfG&bH=bckL[bi?%=sF//Zmg`:O0Xg)&S-qbLMiqW*'!)#b-307&V)%bN6%TWnj1Cu?\$XES*L>K.Qo<f+Oa=^'[U<*%Wi8HZoE>>70gH.rq;EQ`2M%.a\$a1Fr?ZL\ZC]n&=>*V.dbCfUeC_Ep2a.dbOT>-IJk%1hKOkK,rcs$WY5RQH[+8aZh:Nrt;=b<oVY'ISDRr0<T_j^Ptfs*fV`;4^\OAFY;(cd)Ed16t?1KdC2s0<\-]C@[]fR)!5:T!l\%L%SN2+Pp$Dmh=s<7m8]tdL"p)cm^9r1=gOcn4*/j4'am)Fkp',?@(SSo)o0VJNnZ)7B(<WK'cHi32hURM1hTmc`HQdb%S/*Q`S"!-O%k&R]1pP@cd\^_3f[X$Hr'Z1BebS(#uM)=D85)@U5OqFAW";?l+iOlKWAY%sJCVd'0c4l1sPCXm707]W3WrD9k*/`U7CemG%$kGD7%.(tO#n44_:P=$[h/msWa5Sh%^FIZFE(SsR1LRAJZb^;LfOmhXg"0[W9<*<7^SPq<$LKIT_ON4%]aW<k[Q!R!p>/9K$Xs=BXO$;QO%B-><FB6__&["EA!q2V/FTo0g69B.;d!k=(jn7`*qAP9UhP1U!o\gK5J2r<-%QO6>,1*94&`\7#W<#'`<<,oCCOt9coS'mPM6F``B%GJ[,(gR*=P/Ef:C#>^(&f2,3u_dY5GFY?OO0huAb=cXPA<(_BAihXUE`k:grJt8q+$tADLA5`rVnV2?!<J#q1pK6a8KXM&c%F%gm%[OB7h>6Mfe97.&uB/\ku]fH*,MFU3"p>kCjmaq3<Z>Cos1Q2:;<E@aT_VX``C?$!t&#+d2b"eLu!RZ*ne'5<.-Yhs6KJd@DqJPbH%C1VTI*U`WD`.a/Z$e6+]d$g`cQZb0IHkq29VO;^`_Ig(TeXl2/:Xaj:^_Pn:*o_/q,<cM;Kh(;-Cc:M%!D`f1HOK2cCE<I.Fl*8;%e"P:*1>a#TDELUU*<%KS5=PctQi6;U^d=(uHb9+)j2H@?(_F9)E=?#/`(m,laF6eh.Zur&*HB%I\k^NS7Sl8:#d:p5^_t_=WD!`k%r>aT;nYKeW\%Rl\G;riS@#.+>9E;R],p%Rbh2mXEN(rC*`0q&iO^jt6]M$E`B-#g6MqJlir2Mg%UItkt)jSsIPL9O^W]RE7#6Yja%F8#&BUI.1cTAJadM4A;?%UW.M0-?Mb^a"Rn9O(PX95c6n(9>oM%'OmS\7;<NHh'&;)*i,sk-h/RYfXY+VV)D3N^T/BTP)eA9S1[L%ka#uEY%aDBJ`tLEB#YIc/!F&Z]MH(_Pn377!U42^dq=\\rD9q%B%5)pFRi9<+Z!n%)ba"ql*X]kc@1E]_Hof;%7K&^B83he\^R<d%G+i,AiI0_0@s1OsN9$#4h_AWl-8GYp_7VOtof0n(VLY=klJfB0a_<8-;P&L-_QksC>>n@.o/Q3[K;aFVC-C83$!.]Th'tZa&3rI-%#I@.,->mSRpDP!6iLF;]c?=>#hI7!$HbX&"-FC:RI"AD<]7c/Rg1!%dYH$"#LKb0rdK!uU];09uBOY6fBIf2@qi*+(ko]_]0H=`\%@P3T\N6Ih679+>3\]9dN<b\Ym_tF?l`6aAr7n'%+TBFbYQ2/WjTdrff[G#e8HY^R)ZfoXT+SfDg6fc<a)c2N.7<GFA;\#(s*`I56%T\6@Qp<gb@,=dCp$iWL@"i<)\_GV-H6JkYMe7r'5=?M!mnZ!!,.tpc%floRH^q=(]Nj5i"@R`rLQh=ag&1_BqK5$>qHoTKQ0]\g^%VdO1P!^^)0-YpAe*$O(`GE22;lfg?\fi'fu\E1`mJ^gWJLHBj*>K30e-`<_7<B+RUrr$F;0sNfoIDhD.Q(VhbQV3XrP]oua9(hFO%LW\ch]!.8-YZ>*_KKK)*\D4)iDVIjEDomtSa<lY<Rd3)3'eZN&SVn3&A8X=20AGeBO-'%`G!i%U.g>?k+!kMsI'nX%I&#R6nu[.<%H6Jtr!E06aT53d:<sN2!ApH-"^<V(a1`g4hcl1"PhLs]QT%<3(P;W:[\,.imCpRJi8i+QQ_d:CI66WuU.@-6QfmO:/F'?YKZ9A7?%O5uPNZ.)2GPu2\+DA?4j6h#G1Sf"%BqQ"pD@pQ-PFgEcX]KTdCk8udX[3P+V^sE4`7[T_4jAkMrXL8:KC9pi.X,g:qTdNp4<e%<!%Y;*SK>BltJ\!G->)\b:gn!>6=<+*Dn:tR,FOpPH)^fYLapL6%%VGg2^VFPG,hG+`s2al!:h(YF*Kq&\Y\6D]g6Sb(MPNrB[DLb@,%B;;+MphlWSDmf#;*di=_@Lk4\Q&)K>AIE?ko,A=\OnXhTrhpY?#GnAkl>lctXTMQr2%g_TIiQaXN&f<6J(R.D<?F^N/e8ab9gCh_%0mXYb^g5WfPdAbk@q`N,']hn40_6HcAB1]`a\J;H>]GDSC2SVdjGfeZiI>8_r[T'.hB0UE8QdK`S;1i7Pj7&7did&$Kp^MG"YD/n%\Kbs)?3Q9^?j4&?_odFA6)dZL%UsSV5H)$[F\/\Wo/aps\QPH&Z(Qea&)a3u4-a\H0IJ)U`U9*.5O?uK:c)sukAKh84*!iPaD"9s%D?<p!kraUJa*OdAc'\okX.[0'r7@CYp0\@H^mW&eI@Sc8W*?c$nV:_b^)ms)E/Nrs4rX8+_E1YNoEkQg.<\nYf#XAR@c:Nr&;)N]%L;g1f[ne`dm,LZQrH)!(hBYG&oNVsP-j,$g%c]>664sfNQ43-1[%SlM]3fkgd]F;i,J=,*Bdnp)]O@)k$mH7d2J$a,2V^IMD4i!Q%q_CmW#fMWt<Vr4gQTu2G9a5p%+(\j#k1.a""!-&MYj6%4P^tAsU`]b:\!CfkJS`+M2]7E`[MgG5heG2U6kJL-lf!l3Zh>sRdIFC(%Qk8?U7dDiDK&*U:/g8l"I>pRt1W3_4#slV+&DSA=&DW\c&B#!F9?T1ALl.KCg(,o*qDdpLX_^iA?N%00a/V_K1WS<#Z:d\2Le"9Q%pMLATSm6*A&9K0)_4A`&@+SE2,m."LcK-AT1$WB#FQnMl*gB5(.CKaT)2RITlAbW9F'r2VU;p&LiO('J+*GalT<F;s3qAolDK$:P%]S%<W`1T+*48+-DN[[%`pm0RQPPje>b#rm=AVn)s9#+IViS.ATkPQaRrc$K1#PO0thDB8n[RQ;?@Lc-@f>qq]31#e%#MRWXRTnIb%@kgK53r1fMVrIsr'*YP$O2E7"f#TN*YZlTM+n(UgHL'U>qY>j2j*d@:0C%SX7=@:IC&0eEmr\h_]MFGG(DZL\0^d6;[)ZU<kD%Ju%L\MH;ipQ(k\gaVj9c_8Q86%1heT#c9X>Ql8j"7(#'*3O#hbbD</?7aOWQ90q>8,.pb.FTA-2V,0WT/V[EC'?],<s3rA/SVRG-%dE%NT5#XWY5un`\AlQ\6<Fs31d9&B2HU[DGId3ikM6L^=0SU^9Va$4I5*opo]b&QX/p-XL8:+4[=.;ooR@mfT!%nn#jr_Lbp)_&'u4c%?c.oC[I3AQrQ0BbXH!,O;&eC+a>MkgL0Zr3IE,V28$d#mE'=(b\8_]5Yh)gK2NHnH>>W<E?*-REm2Cg9Q4e+Y_WVCK=BiJL@)Z>c%ftX:?^=0US]CU%@30r]1oWFB.g8ip.=D_9pl@G5J\T^q%/p*rAC%o*gH]Q9sgnI.H:>hSs'?Qo>EM%2$mLuA+%XWL)["[1iS%UWH%(^]6ECCAD4%_./FXbgX2W0,'YZ)L+NBIC8*6BBlOi4Q*OBil2s#W&Af2e^DE!`,`[.LqMr2'7'eIir!PC,lq2@<$0b-0?4nMnL8"%ehbu3g;\R;.2KYjK6G:OVk(A%)04KIHLJF+<+LDm8bYu%c\)gnGIt#p?&>;p$ES^O(_DE7OoR6G^?[D%BSjd!?<-!=iF*(#o\'CZ%<F5sg@dZ[#g-!S2*o[p'Dgp\g^ME_]SJO:%"VY3\Wm]XZNd74)n_7XlbCl7g^dI=>m5&TA:M&Abbr^A,cUXSE-+i#8rPVsAFQ2k=%>hjS/$4=c,[i;bjl4`7eN8K*&#rSQnnL4l^i]?J9e)2tIiBc]U2;+6a@l)EJa7/[)oo":6`SM:%I`Kb0Bf*Q>f!diQ:S9R/Iqssn%%Kqt#[;H@+%YO7"B=2GK?W8-\!PTT"ZM[:ue+*D^er/%4cAPSF1s(bEE,pQHG!r7C[DkToOZuafaF-KDBjK/'=34%aXu;oPBY/7R%)Abk$@&/o.,$9OJ/"4"T+UllR_OSQ&@(oDnGoFre:/'#&\1Y'MiZ/pg`&apIok10h6tVIrb/opJ=C/Fd7(Z?A*nops]3lIN[dNP)%&?gY_\=(f(.1Q1U;i,#Q&K>mYpi4>L4**ree?^*jV@+*/Oq9ZekccehG(9gHL-&fijs(%rN`tKKN^U>:fM*dQ]&8b1&k^KSnEjEE%c`tAMo])h[:u`"N>=G,KqnoMiX+ID`bu%7JS_JC_QL?/gNuXd*#E[d0Q[GZR5D<5"fPTXWaKUZbmE'%VLE3$/LUg]D*FN=E&NbCB%Xfco/Kl8F)((te@Krl?qLlR;!g5*si`26W/L$>C5Z5j3XiOL,<lKE"lTr&arkEs!^\7<^%Md$1CUMJJd/RZ_B12[,;?-3[iC_)p)%B5_m\lY"uR"MN\9^-Hk2?-b8*<5SV8$%io0Im"Lolpo""`GO._LSOs:>s"c7!n']5>@[aPBfNl&@&nO?kNF8X./\VB>AK):KkO9'%m,jR*_D^J^-:oU]E]_cCZ9?]B42>T<fG.FOHu()L=I4L_[i>D=`6c5OXFa@`G:s_Vb**=PRD@$ZCiODOeQs+kBg3%EC"'a1Vl_sY%9&'*CpZFhkqnaSmrCYkkcSl$cOT-jXh>-AQpY_Q;_g"@)rnm:*f)\"[>KT0XRm6k0J,.QCr"%b9n,N7=n,CkPWW24$rqrDGs7j?Y%q9*.Fos`iWmbe!5:VZi)^\mW:IJiZ&Dh%V=5Q8u9Ier)ss8;Wkpr@m^jaUNbq<:\)q;i^tnaHMKb>80-?iU+T!P(DajM1TJhu)6D%rUt^@c'Or:~>%AI9_PrivateDataEnd