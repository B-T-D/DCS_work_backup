%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 008x010.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 181 166
%%HiResBoundingBox: 0 0 180.0059 165.1885
%%CropBox: 0 0 180.0059 165.1885
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 120 8%%BeginData: 7642 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD33FFA8A87DA17DA87DA17DA87DA17DA87DA17DA87DA17DA87DA1%7DA8FD65FF7D527DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A8527DFD63FFA87DFD1AFF52A8FD62FFA852FFA87E7DFFA8FD05FFA8A8A8%FD05FFA8FD06FFA852FD62FFA87DFFFF52A852A8A8A87DA87DA87D7DA8A8%A87D7DFFA8A87DA8FFFFA87DFD62FFA852FFA87DA87D7D7D527D52FD047D%52527D537D527D527D52FFFFA852FD62FFA87DFFFF597DA8A8FD047DA8A8%7DA8A87D7DA87D847DA87D7DA8FFA87DFD62FFA852FFA8FFAFFFA8FFFFFF%A8FFA8FFA8FD09FFA8FFFFA852FD62FFA87DFD1AFFA87DFD62FFA876FD0D%FFA8A8FFFFAFFD08FFA876FD62FFA87DFD07FFA87DA87D7D537D7DA87D7D%7DFD07FFA87DFD62FFA852FD07FF52A8527D527D537D527D52A8FD07FFA8%52FD62FFA87DFD08FFA8FF84FFA8A8A8AFA8A8A8FD07FFA87DFD63FF52FD%1AFF52A8FD63FFA852A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFF%A8FF7D7D7DFD65FFA87D52277D527D527D527D527D527D527D527D524B52%7D777D7DFD67FFA852FD11FF27277DFD69FF7652FD12FF7DF8F87DFD66FF%A8527DFD14FF27277DFD65FF7D52A8FD15FFA8FF527DFD63FF7D7DFD1AFF%52A1FD61FF527DFD1CFF52A8FD5EFFA852A8FD1EFF52A8FD59FFA8FFFF7D%52FD21FF52A8FD5AFF7D52FD22FFA852FD58FFA8527DFD24FFA852FD56FF%7D52A8FD26FFA852FD54FF5276A8FFAFFD26FF7D52FD52FF527DFD2BFF7D%7DFD4FFFA852A8FD29FF7D527D7D52527D527D767D527D767D527D527CA8%FD3FFF7D52FD2AFF7D52FD05FFA8FFA8FFA8FFA8FFA8FFA8FF7D52FD3DFF%A87652FD2AFFA852FD13FF7D7DFD3BFFA87D7DFD2BFFA87DFD13FFCA52FD%3AFF7D52A8FD2CFFA876FFFD047DFD0AFF7D7DFFFFA87DFD39FF527DFD2E%FFA87DFFA859A87DA8FD047D59A852A8FF7D52FFFFCA7DFD38FF527DFD2F%FFA852FFFD067D527D527D527DA8A87D7D7DFFA87DFD36FFA852A8FD30FF%A87DFFFFA8FFA8A8A8FF7DA8A8FFA8FFA8FFA8A8FFFF7DFD35FF7D52FD32%FFA852FD13FF7D7DFD34FF7D52FD34FF76A8FD12FF7D7DFD32FFA8527DFD%35FF7D527DFD0EA8FFA8527DFD31FF52527DA8FD37FFA8FD0F7D2752A8FD%31FF52F8F87DFD48FF52F8277DFD2FFFA8F82752FD49FFA8F8F87DFD1FFF%FD107D5252A8FD4BFF525252FD1EFF527DFD0FA8FFA87D7DFD4CFFA852CA%FD1BFF7D76FD13FF52A8FD4DFF52A8FD1AFFA17DFD13FF7DA8FD4EFF527D%FD19FF7DA8FFFD04A8FD09FF7D7D7DFFFFA87DFD4FFF527DFD18FFA8A8FF%7D847DA87DA8A8A87DA8A87DFFA87D7DA8FFA8A1FD50FF7D7DFD17FF7DA8%FF7D7D7D527D527D597D527D7DFF7D7D52A8FFA87DFD51FF7D52A8FD15FF%7D7DFF7DA87DA87DA87D7D7DA87DA8FFA87DA8A8FF7DA8FD52FF7D52A8FD%14FF7DA8FD13FF7D7DFD53FFA8527DFD13FFA876FD13FF52FD56FF767DFD%13FF7652FD11FF527DFD57FF767DFD13FF7D527D7D7D527D7D7D527D7D7D%527D7D7D52A8FD21FFA8527D7D7D527D7D7D527D7D7D527D7D7D527D7DFD%21FF7D7D7D52527D7D7D527D7D7D527D7D7D527D76FD06FFA8FFA8CAA8FF%A8CAA8FFA8527DFFA8FD22FFA852A8A8FFA8CAA8FFA8CAA8FFA8CAA8FFA8%FFA8527DFD1FFF7D7DA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8A852FD10%FFA87DFD24FF7DA8FD12FFA87DFD1FFF7DFD13FFA87DFD10FF52A8FD23FF%7DA8FFA8FFA8FD0BFFA8FFFFFF52A8FD1DFFA87DFFA8FFA8FD0BFFA8FFA8%FFA87DFD11FF52FD23FF7DFFFF7DA87DFD0AFF7DA87DFFFF7DA8FD19FFA8%527DFFA87DFFA87DA87DFD09FFA87DA87DFFFF7DFD11FF7D52FD22FF7DA8%FF7DA87DA87D7D7DA8537D7DA8FF52FFFFAFFF5252527D527D527D527D52%7D527D527D527D527D527D527D527D7D52F8F8207D76FFA8FD057D597EFD%047DA8FF527D7DFFA87DFD12FF7DA8FD21FF7DFFFF7DA87E7D7D527D7D7D%527DA8FF53A8A8FFFF7D7DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8FF7D27277DA17DFFA87DA8527EFD047D527D7DFFA87D7E7DFF%FF7DFD12FFA852FD21FF7DA8FF7DA87DA87DFF7DA884A87DA8FFFF7DA8FF%FF52A8FD1AFFA8FFFFA852FFFD08A87DA8A8A8FFFF7DA87EFFA87DFD13FF%7D7DFD20FF7DFD14FF7DA8FD1DFFA87DFD14FF52FD14FF52A8FD1FFF7D7D%FD12FF7D52FD1FFF52A8FD12FF527DFD14FFA852FD20FF7D76FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA87D52FD20FFA852A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FF527DFD16FF7D7DFD20FF7D527D527D527D527D527D7D52277D%767D7DFD23FF7D7D527D527D527D527D527D527D527D52A8FD17FFA876FD%2CFFA82776FD50FF7D7DFD2CFFF8F827FD50FF52A8FD2BFF52F852FD50FF%A852FD2BFFA8A852A8FD50FF7D7DFD2CFFA852FD51FF52A8FD2CFF7D7DFD%50FFA87DFD2DFF7DFD51FF527DFD2CFF7D7DFD51FF52FD2DFF52FD51FF7D%52FD28FFA1FD047D27A8FD0B7DFD45FF7DA8FD26FF7D7DA87DA87DA87DA8%7DA87DA87DA87DA87DA152FD44FFA852FD25FF7D7DFD12FFA852FD44FF7D%7DA8FD23FF52FD14FF7DA8FD43FF7DF827FD23FF7DA8FF7DA87DFD0AFFA8%7DA8FFFF52A8FD43FF52F8F8FD23FF7DFFFF7D847DFD09A8FF52FFA8FFFF%7DA8FD44FF7D277DFD22FF7DA8FF52A8527D7D52527D527D52A8FF53FF7D%A8FF52A8FD41FFA8A87DFF7D7DFD04A87DA8A8A87DA87DA8FD16FF7DA8FF%7DA87D7D7DA87D527D7D7DA8FF7D7D7DFFFF7DA8FD40FF527D7D7D77FD0D%7D527DFD15FF7DA8FD05FFA8FFFFFFA8FD05FFA8FFFFFF52A8FD3FFF7D7D%FD12FF527DFD14FF7DA8FD13FF7DFD40FF7DA8FD13FF52FD14FFCA52A8FD%10FFA8527DFD40FF7DFFFD04A8FD0AFFA8A8A8FFFF7DA8FD14FFA8527D52%7D7D7D527D7D7D527D7D7D52FD047DFD41FF7DA8FF52A87DFF7DA8A8A87D%FF7DA8A87D7D52A8FF52A8FD16FFA8A8A8CAA8A8A87D52FFA8CAFD04A8FF%FFAFFD40FF7DFFFFFD047D8452A8FD047DA8FF7DFF52FFFF7DA8FD1DFF27%27FD4AFF7DA8A852A8527E7DA8527D527D52A8A87D7D7DFFFF77A8FD1CFF%A8F8F8A8FD49FF7DFFFFFFA8FD0BFFA8FD04FF7DA8FD1CFF7DF8057DFD49%FF7DA8FD12FFA852FD1EFFA852FD4AFF7D7DFD12FF52A8FD1EFFA87DFD4B%FF7D52527D527D7D7D527D527D527D7D7D527D52A8FD1FFFA852FD4CFFFD%08A87D7DFD06A8A1FD21FFA87DFD54FFA87DFD28FFA852FD54FF7DA8FD28%FFA87DFD54FFA87DFD28FFA876FD54FFA17DFD28FFA87DFD54FFA87DFD28%FFA852FD54FFA8A1FD28FFA87DFD54FFA87DFD28FFA852FD54FFA8A8FD28%FFA87DFD53FF7D5227A8FD27FFA852FD53FF7DF827A8FD27FFA87DFD54FF%F827FD28FFA876FD54FF527DFD28FFA87DFD4CFFA87D7D7DA8FD077DA87D%7D7DA17DFD18FFA87DA17D7D7DA87D7D52A87D7D7DA87D7D7DFD43FF7D7D%A87DA87DA87DA87DA87DA87DA87DA87D7D52FD16FF7D52A87DA87DA87DA8%7DA87DA87DA87DA87D7D52FD41FF7D76FD12FF7D7DFD14FFA152FD12FF7D%52FD40FF7DFD14FF7DFD14FF52FD14FF7DA8FD3EFFA87DA8FF7DA87DFD0A%FFA87DA8FFFF52A8FD13FF7DA8FF7EA87DA8FD09FFA87DA8FFFF52A8FD3F%FF7DFFFF7DA87DA8A8A8FFA8A8A8FFA8FF7D7DA8FFFF7D7DFFA8FD0DFF27%527DFF7DFFFF7D7D7DA8A8A8FFA8A9A8FFA8FF7D7DA8FFFF7DA8FD3FFF7D%A8FF7DA87D7D7D527D7D527D527DFF7D7DA8FFFF52527D7D527D527D767D%527D527D527D52F8F8F8527DA8FFFD087D527D527DFFA852A8FFFF52A8FD%3FFF7DFFFF7DA8FD057D537D7D7DA8FF7DA8A8FFFF7DA8FD09FFA8FFA8FF%A8FF2752A8FF7DA8FF84A8A8FD047D52FD047DFF7D7EFFFFFF7DA8FD3FFF%7DA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFF52A8FD13FF7DA8FFA8%FFFFFFA8FFA8FFA8FD09FF52A8FD3FFF52FD13FFA87DFD14FF7DA8FD13FF%7DA8FD3FFF7D52FD12FF527DFD14FFA852FD12FF767DFD41FF7D52FD047D%A17D7D7DA17D7D7DA1FD057DFD16FFA8527D7DA17D7D7DA17D7D7DA17D7D%7DA87D7D7DFD44FF7DA87DA87DA87DA87DA87DA87DA87DA8A8FD19FFA2A8%7DA87DA87DA87DA87DA87DA87DA8A8FD28FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T10:00:09+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T10:00:10+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T10:00:10+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>236</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA7AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FWOeZrvWZ9W0zy9pVz+j31CO5u7zU1VJJYrazaFHSBJA8fqySXSAM6sqryNCaYqlDa&#xA;L5WTUP0bL5y1D9J81iNo2sFZzIw5BfSVlIZhuFC/IYqjIvJemzQvNH5h1loUaRHkGpT8Q0LlJATX&#xA;9lkIPyxVS1HytommQifUPMur2sJ5Ukl1OZF+BGkbcnsiM30YqiU8h2jorprutMjAFWGoz0IO4PXF&#xA;VNfJmmNcfVl8w6y0/Ev6Y1KcniG4E9ezbYqqnyBb0213Wwex/SMxp95IxVd5fvNY0/XZvLOrXL6g&#xA;Pq/13SdVkVUlmgWQRzRT+mqRmWBnj+JVHJXWoqCSqyfFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYqx6+/8AJhaL/wBsnVv+onTsVYx5g8n+ZNW1DzJZpZxR2GuXOnyR&#xA;6jLMoMKWQi5yJGodjLWP930FaEnthVK9U8k/mFqVpf2PqTLbXNrq8Ea3N87J/pkt9JZ/Ydn5RrPb&#xA;o3PkpUU24LyVRFz5J85XMV3/AL1JNe3t76kc2pTT262M2lzW0MZR5GU8bqZX/u60WvUAYq0/k78w&#xA;7aMPp9zcelMsypYSanPW2LGxeNjIS3P47a52HQS8fs7YqvtPJ3nizPoW5kW1R3eWMahLwnjOpNcO&#xA;isTzieW3alQN+jHc0UIjQfLHn2x1/Tbq/uLm7jguIvrUhvXeJrU2VxE6GJ3o7JPLCxYpVuBbqd1L&#xA;Kb7/AMmFov8A2ydW/wConTsCshxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2Ksevv/JhaL/2ydW/6idOxVkOKpB5w80jy/bWb8YPUvrg20Ml3N9WtkcQSzj1ZirhOfo8&#xA;F2+0RirFx+a99cX72dlplqXF7+j0+sXojZZBI0ZMsaxySxhuIZOS/EprhpUut/zpuzbLdy2VpxvV&#xA;tJbGCS8S3EaXGnJfFJZZVC8yWZV8aHb4d1WdeT/MGoa7Y3N7c2sNrFHd3dpCsUzTM31O6ltnZ+Uc&#xA;QWphqKV2PbAqfYqx6+/8mFov/bJ1b/qJ07FWQ4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FWO+aNN1sX+n69oaR3N/pqTwS6dM3prc2t0YmlRJCCI5Q9tGyM3w7FTQN&#xA;yCqWf8rV0tdUGkTaNrEerhPWl09bT15Y4ugkc27zJwJ+EMGIJ2GKouTz1ZSpwk0HWXSoPFtNmIqp&#xA;qDQjsRXFVN/OWlSF2fy5q7mQhpC2lyksVHEE1Xeg2xVr/GGk04/4b1alVNP0XLSqGqH7P7J3Hhiq&#xA;hqH5n+XND0+W+1DTNT0zToivrXM1hJBChkYIpd2CqOTMBviqKi/MW0ngSa00PWrlZVDwGOxcLIGF&#xA;VKyOUjoQepYD3xVX8vaZrVzrE/mTXoltLuSH6npulo4l+q2pcSSepIvwPNM6qX4fCoRVBNCxVZLi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYhceZdV8xXMmneTnRL&#xA;SImO/wDM0iiS3iYGjRWaH4bmYd2/uk/a5H4MVTvy95a0rQbRoLFGMszepeXszGS5uZiKGWeVvidz&#xA;77AbAAADFU0xV2KuxVK/NHl6w8yeXNS0G/FbTUreS2lNASvqKQHWu3JDRl9xirxb8lPI/mz8pUB8&#xA;33sj6Pqp+rokNy0ljp1y0lEaeJhxX6x8KiZDRW+FvtA4q99xV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVCatq+maPp02o6ncpaWVuOUs0hoBU0AHdmY7Ko3J2G+KsWNhr&#xA;nnI8tWim0bysR+70gsY72+B/avGU8oISP90Kebf7sI3TFWYW1tb2tvHbW0SQW8KhIYY1CIiKKBVV&#xA;aAADsMVVMVdirsVdirsVUru0tby1mtLuFLi1uEaKeCVQ6OjijKynYgjqMVYjpd3deUNQg0HVJfU8&#xA;vXbiHy/qcrMzQu32NPuXYtU9oJGPxD4D8dOarM8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVSPzF5ss9HkhsooZNR1y7BNhpFtQzSUNObk/DFCp+1K9FHuaAqoPSfKd3c6hFrv&#xA;mqWO+1iI8rCziqbKw2P+86NTnLv8U7jkeihF+HFWUYq7FXYq7FXYq7FXYq7FUNqemafqmn3Gnajb&#xA;pdWV0hjuLeQVVlPY4qxrRtV1Dy/qcHlnzBcvdQ3JK+X9cl+1cAAn6pdONvrSKNm29Vd/tBhirLsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYpqPmjUdUvZ9F8oqk11A/o6jrkql7Gy&#xA;YfbQUK/WLhQf7pDRT/eMvQqpn5d8r6doaTvE0l3qN4wfUNUumEl1cOoopkcBQFUbIigIo2VRiqcY&#xA;q7FXYq7FXYq7FXYq7FXYqx3zPqGsvqWmaBo0os7vUlnuLnUWRZDb2loY1laNH+FpXkuI0TkCoqWI&#xA;NKFVAaj+WsWpWrWt/wCYtZuYHKuyPNbgc0YOrDjAvFlZQylaUPTFUT/ga5/6mjW/+kiD/qhirv8A&#xA;A1z/ANTRrf8A0kQf9UMVd/ga5/6mjW/+kiD/AKoYqhZf075V1Kwkm1O41jy9f3EVjci9ERuLS4uG&#xA;9O3ljliSLnFJMyxMjgkFgValVxVmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KofUNQsdOspr6/uI7&#xA;Wzt1Lz3EzBI0UdSzNQDFWJ113zp9kz6L5RY/a+ODUdQQdx9l7S3b6JXH8g6qss07TrDTbGGw0+3j&#xA;tbK3UJBbxKERFHYAYqiMVdirsVdirsVdirsVdirsVdirHr7/AMmFov8A2ydW/wConTsVYHd32sjW&#xA;dTT65ci0XzdaRqwv7lXW1MEBkiSIHh9X9Qy8vjC1qKfDhVWP5oeb1tYLmWyt4IXVPrbta3LfVriW&#xA;yvZfqkiiUMZIbm0hRj0cSigU0qq5vzQ84EShLO0jUyW8aXLw3LwwiaKVy84id5R+9jSPiUWnMMC6&#xA;7hpU289eY/MK2Nm2jK4vtOgj1rVIISAHihKk2jeqYn4zAuNhyBC1HxYqnPm68t73yxYXls3OCfU9&#xA;EkjalPhbVbU7g7g+IwKyjFXYq7FXYq7FXYq7FXYq7FXYq7FXYqxu8/MLyvFYxXNjdrq8t1NLbWNn&#xA;pxW4nuJ4WKyRxqpp8BHxuxCKN2IGKofTvLGp6rewaz5vZJZ4H9bTtCiPOysnH2HckD6zcKP92MOK&#xA;H+7UfaKrLMVdirsVdirsVdirsVdirsVdirsVdirGfNSapY6vpXmOxtH1CKwjubPULKEcp/q140Lt&#xA;NAtRzeJ7VKp1ZS1PiABVWL+aHkMj4tWSJujRzRzRSKRsQ0ciK6n2IxVv/lZ/kH/q9Qf8P/zTirv+&#xA;Vn+Qf+r1B/w//NOKtN+aP5fqKtrduBsKnmOuw/ZxVBXWqt5yvbGx0VJf0FZ3dvf6lrEkbxQymzmE&#xA;8Nta+oqmVmniQyOvwKoIqWNMVZtirsVdirsVdirsVdiqS6z5v0TSbxLCZ5rnUpIzMmn2UE13cenX&#xA;iHaOBZDGhbYPJxUnvtiqB/x/bf8AVj1v/uHT/wBMVd/j+2/6set/9w6f+mKu/wAf23/Vj1v/ALh0&#xA;/wDTFWNfmH5w8y6j5TvdO8qabqdhq16voDULmwvFW2heollT0IppDIF2TitamvbFUl/5x1/KTTPJ&#xA;tpeavY+Yl1z9JIsE6JbLAsEsTVdD6nK4R1OzI3D/AClqBRV7PirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdiqV+aPLmmeZfL2oaDqkfqWGowtBMNqjl9l1qDRkajKexGKvDPyW0P8AMT8uNSuY&#xA;/P2q3kflYyPp+liSRZ7FZElCxzSM5d7WObl+6+yrH7dPhDKvofFXYq7FXYq7FXYq7FWFeWL23sLL&#xA;zf5gukaWRNTvZLt0CmQwWCiKNF5Fdkii2WvWvjiqa23nfRZbx7afnZCOwttTkuLoxRwrBeO0cIL8&#xA;zRi8bCn47iqqY/4h0Dlx/SVryoWp68daLH6pP2u0fx/6u/TFV1vrei3MsMNvqFtNLcoZbeOOaNmk&#xA;jFQXQAksop1GKpPbeftIm1pNJaC5hmlvZ9NhmdYzG91bQ+u6DhI7gekCwYqB2rXbFVG1jFl+Zl5F&#xA;b/DDq+lpeXUQ+ybi0mEAl/1nilVGPgi4qyvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqsuLeC5gkt7iNZreZWjmhkUMjowoyspqCCDQg4qwzhqnkY8oxNqfktesI5TXelrXqgFXntFr9n&#xA;d4h05JsqrMbS7tby1hu7SZLi1uEWWCeJg6OjiqsrDYgjocVVcVdirsVdirsVYP5e05tU0Dzfo6yi&#xA;3muNU1O2ldkLmMXJ5BuFUrWKVWG/cYqh7f8AKaC1v0vbK8gspYbewjiS2sxFGZ9OkeRZpVEn7z1f&#xA;WdXGxpxowIqSqjL+T0fpwQW+rFLWEAmCW2SUNJ9TuLJifiX4DHeNRANvHwbVMtA/LWLSdWtNRbUD&#xA;ePbIKieCOST1FEqK0dxL6k8a+nPxI5lmp8TGr8gqyy/LOOHzL+nJryMzDUptURoLYQzlpoTB6Elw&#xA;XkZ4QtDxAFWFfbFUarrP+aLCL4/qOi8bojcI11dBolb3ZYHNPDFWVYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FWH3eg6n5ZvJdW8rQm50+dzJqnloMFV2YlnuLEsQkU9TVozRJP8&#xA;lviKrIdC13S9c05NQ02b1YGJR1IKyRyLs8UsbUaORDsyMKg4qj8VdirsVdirHtV8pSS6nJrOi6jL&#xA;o+rzosd1IiLPb3Kx/wB39Yt5NmZBsroyPTblx2xV31H8wv8Aq9aT/wBwm5/7yOKu+o/mF/1etJ/7&#xA;hNz/AN5HFUv17/laVhpFze6ffaTqN1br6i2K6Zco8qqQXWM/pBvj4V4Cm7UG1a4qvsP8Z61pMF7Y&#xA;eZdM+pX0SywXdrpUok4OKhk9a+mQN/rxmncYqnPl7y5YaHbzR27y3FzdSevfX90/qXFxLxC85Xoo&#xA;2VQqqoCqBRQBiqa4q7FXYq7FXYq7FXYqxzW9b12TXYvL/l+KAXogW81DULxXkgtoJHaOICKNomlk&#xA;laKTivqKAFJJ6AqrvqP5hf8AV60n/uE3P/eRxV31H8wv+r1pP/cJuf8AvI4q76j+YX/V60n/ALhN&#xA;z/3kcVd9R/ML/q9aT/3Cbn/vI4qp6VruuW2vjQPMS2zXF1E9xpWpWavFDcLEQJYWhleVopow6tT1&#xA;GDLUinEjFWS4q7FXYq7FXYq7FXYqkXmfXr2wex03SoI7rW9Vd47OOZmWCNIk5zXEzKC3pxigoN2Z&#xA;lXatQqkqeS/OEXmBtettb0y2vp4/Svlh0u5WK6CikbTx/pEhnj/YfZqbVK7Yqm31H8wv+r1pP/cJ&#xA;uf8AvI4q76j+YX/V60n/ALhNz/3kcVd9R/ML/q9aT/3Cbn/vI4qhX1vzNomq2MHmFrS90rUpVtIt&#xA;SsYJLU291IaQxzwyTXXJJm+BZFfZyFK78sVZXirsVdirsVYfYf8AOq+aTpbfDoHmGWSfSjvxttRI&#xA;MtxajsqXADTR/wCWJB3UYqzDFXYq7FXYq7FXYq7FXYqx2yFfzB1sA0J0jStx2/0nUvHFWHL581vT&#xA;rGy1PUbi6nsYBrM94QlnxuY9OaT01j4LzX4Y9yQvzwqm8n5pCK+uLKbTVSW1kEM7C4qhY3FrDWJj&#xA;EPUXjfRtXbfku1MVUrP8247qWGBNLIuZJpFeB7mKFkgi+rFpaziJXJW7DqqFgyjkrEEY0qPvtX1e&#xA;+8xeYNLh1VNFXSLO3ntWKQt6hnWRmuJvWV/3KMgT4OPRqnpQKr+ebma11LyncwWM2oTpq0irbW5h&#xA;WVg2l31eLTyQR0FKmrjp44qiv8Ua3/1KGrf8jdJ/7L8Vd/ijW/8AqUNW/wCRuk/9l+Ku/wAUa3/1&#xA;KGrf8jdJ/wCy/FXf4o1v/qUNW/5G6T/2X4q7/FGt/wDUoat/yN0n/svxV3+KNb/6lDVv+Ruk/wDZ&#xA;firy381/z08+eUfNGgWGl+VJpo9SSUzaZdiKS5nKOgH1drGe64mhp8Sn5HFWa+WfMOra/wCZfL2o&#xA;6poV15eu5dI1XlYXjRO4/wBJ03ccG5U/4yIjf5OKoC583eZk1XULZbif6vB5otdKjnWO1Ma2k1vB&#xA;K8NCvql6zmjcTtTetcKomP8AN+KSO1kTS6JeQR3ULPcBQIrixu72EOQh4yf7jpI5E/Yam7YFbH5v&#xA;ROzQw6WWvJJIorK3e5SITGSKeVm9aRUhVV+rMmzH4/hPE1GGlRnmPzNrEPmDQ4bBpTaanpWpXctv&#xA;D9VdhJbi29FxJIeNF+ssTxYg0HUVqFQWo6lfan+TWk6tey+rf3tvo97PNRU/fS3FtMSoQKF4s3w0&#xA;6Yq9ExV2KuxV2Kpb5j0G113RrjTLlmjEwDQ3EZpJBNGQ8M8Z7PFIodfcYqgvJ2vXWp2M1rqapFr+&#xA;kyfU9YgTZfVVQyzRg7+lPGRKnsePVTiqf4q7FXYq7FXYq7FXYqxDU9Vs9B87z3usMtrpGsafaWcG&#xA;pSkC3S5tJ7lzDM5+GMypdj0yxoxUjrQFVPbfy/5bVYZLfTbMLHye3eOCIBfUHxMhC7c+9OuKtt5b&#xA;8uvDBC+l2jQ2xY20RgiKxlyC3BeNF5U3piq+PQdDiESxadaxiCX14QsMYCSkAeotF+F6D7Q3xVUu&#xA;tL0q5uIru6tIJri33huJY0Z46Hl8LsCV3FdsVYz+lYPM3mzTF0d1utJ8vTTXV/qcZDwNdvbyWsdp&#xA;FIDxdlS5keXjXhRVO5oFWYYq7FXYq7FXYq7FWuCc+fEcwOIam9DvSuKsV83XjaLr2jeZJ42bSLWG&#xA;7sNUmQMxt47xoJEuGVQT6aPaBXP7IbkdgTiqa2um+VNQhF7aWthdw3Ev1oXMUcMqyTCv77moIZ9/&#xA;tVriqvJoGgyRPFJptq8UkvryRtDGVabceoQVoX3+11xVaPLfl0QyQDS7QQzFTLEIIuLlN1LLxoeP&#xA;auKq9xpOlXMyz3NlBPOsbQrLJEjuInBDoGYE8WBII6HFWI+ZrjS9Ra18j6EkbzfWLaTUo7UKIbCz&#xA;tp0uH9XgOEby+l6cSdSW5U4qcVZxirsVdirsVdirEvOEU2i38PnSyRnWzj+r+YLdKkzaaGLeoFFe&#xA;UlozNKvihkXqwxVlUM0M8KTQussMqh45EIZWVhUMpGxBHQ4qvxV2KuxV2KuxV2KrZYoponhmRZIp&#xA;FKSRuAysrChVgdiCMVSA/l1+XxJJ8saSSdyTY23/ADRirv8AlXP5e/8AUr6T/wBINt/zRiqncfln&#xA;+Xk8EkLeWtLQSqyF47K3RwGFKqwSqnwIxV4D/wA4/aompeY7ryD5s8l6Zfz6WbmEa61laJIjWLCO&#xA;WO45IPWYMyLyT4xUFgalgq+n7a2t7aBLe2iSCCIBYoY1CIqjoFVaADFVTFXYq7FXYq7FXYq7FXYq&#xA;kM/kDyJcTPPP5c0uWaQlpJXsrdmZj1JYpUnFVn/Kufy9/wCpX0n/AKQbb/mjFXf8q5/L3/qV9J/6&#xA;Qbb/AJoxV3/Kufy9/wCpX0n/AKQbb/mjFU407S9M0y1FpptnBY2qklbe2jSKME9SEQKuKonFXYq7&#xA;FXYq7FXEAggioOxBxVh/lpv8N64/lCY0024WS88sSE7CEGtxY18bZm5Rj/fTAD+7OKswxV2KuxV2&#xA;KuxV2KuxV2KuxV2Kse82eXJL7TUm0dY7bXNNmN/pM1OKfWd/USTjT4LlWaOX2Yt1AxVMPLuu2uu6&#xA;NbanbK0azBllgkFJIZo2Mc0Mg7PFIrI3uMVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUm82eX31vSfRt5vqup2ki3ek3tK+hdxV9NyO6GpR1/aRmHfFV3lXzAuu6Ql20X1a9id7b&#xA;UrIkM1vdwnhNESOvFt1b9pSGGxxVN8VdirsVdirsVdirsVdiriQASTQDck4qxe089nUUNxoug6nq&#xA;2nE0h1KAWcME1P2ofrdzbSOng4Ti3VSRiqU6fc+ZdN80X99Z+U9SXSNVjE17aGXSw66hGVQTRAX3&#xA;Gk0O0v8AlIpH2mxVPf8AFGt/9Shq3/I3Sf8AsvxV3+KNb/6lDVv+Ruk/9l+KqN353uLCFrrVfLeq&#xA;2Gnxb3N8wsrhIUHV5EtLq5m4L1ZljNBudsVZJDNDPCk0LrLDKoeORCGVlYVDKRsQR0OKr8VdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdir58/O/8ANbzD+Wvn22utG0eRLHV47cavfXKhrS6aBxT6&#xA;vwPwTrDyidmNSvH4fhVsVfQYIIBBqDuCMVdirsVdirsVdirsVdirHvzFLD8vvM5UlWGk3xDKSCD9&#xA;WfcEdMVX6z5js9Bv9H0xooYbbUPVhgleRYIofq8XqBSOJHEgcRTFUHo35j+Xb7SrO+up0sZLuL11&#xA;gYmTipMnAM6rx5SCFyi9WoeNaYqj4vOnliaWGKG/WSS4cRxIiuxqyQyAmi/CvC7hPJvh+Nd9xiqh&#xA;defvLUfl+/1y2uRe2mnssUqQfbM0nARRgNx3l9VOB6EMDWm+KonRtbu76+vNO1C1gtLu2jhlaGK6&#xA;S5PGfl8LqFjZGXiK7UNdicVQn5eRLB5ZFolfQsr7U7O1Q78Le11G4ggjHskUaqPYYqyTFXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FWOaxrmty66ugeX4YDdxwpdalqF5zeC1hldkiAijKPNLIYnon&#xA;NAAtS3QFVAa95R80eYNJn0jW77RL/TrleM1vLpFyVPgR/uSqrDqGBqDuMVRVhonnuxsbeyt9a0oQ&#xA;WsSQxBtLumbhGoVasdSqTQdTiqv9R/ML/q9aT/3Cbn/vI4q19R/ML/q96R/3Cbn/ALyWKtaLr2sJ&#xA;rb+XvMMMK6g0T3Wn39oGW2vII2VJKRyNI8MsRkTnGXbZgVY7hVWR4q7FXYq7FUg/MGKWbyF5liiR&#xA;pJZNKvVjjUVZma3cBQO5JxVXm0vTdautI12G7dltEefT5YGjMTrdRcOfxK3IFGqtDiqS235U+W7d&#xA;IYRNdPbRpEk1s7x8JzbtI0Dy0jDcozO1OBWu3KtMNqhrX8ntAhmt5JNQ1C6W3mjuEima34l4YILZ&#xA;d44Edf3FokbcGHJSwaoOBU2svIOj23le48tyT3V3p9woj5zyD1kRABGEeNY6GPgCrU5V3JJxVFaX&#xA;5es9GvNQ1ie/nurm7ggiu7u8aFQsNkJGT+6jhQU9ZyzEYqhvy7lE/ldLxVZYL+91G+tSwKlre81C&#xA;e4geh3+OKVWHzxVkmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsV0ZS3nzzWoYoTb6aA4pUVS&#xA;fcVBH3jFWK6d+Y2vW8WjXurJcfVZ9Iu764DJahbqeO5tIIfRMTO8aD678XMLsFP82FU8h/M+FryW&#xA;zn054Zre5itJ19VTR5Lt7QlDQBlDx8h0+E78TUY0qzSPzVg1K6s7WLTXWe4dVuIzKqtAjypCC6yr&#xA;E3NZHoyU915cl5NKh/NfmjzJpMnmO+s7yN4tFaya306aFGE4uQOcCuvBxI5NIzXY9QcVT/zPGn+I&#xA;vKE9P3o1OeEP39N9LvHZfkWiQ/RgVkmKuxV2KuxV2KsZj8iQWUkn6C1a/wBCtpWLvYWbW0lsHYlm&#xA;McV5BdLDUn7MXFfbFVX/AAvrf/U36t/yK0n/ALIMVYJJ5tuE/OCL8uv8XaoZ5NOa7M/p6VyF1X1B&#xA;b8fqFP8AeZTLX5Yqzv8Awvrf/U36t/yK0n/sgxVRuPIq3/GLXNa1HWrBWDtp10bSK3kZTUeqtnb2&#xA;rSrUfYdih7qcVZOAAAAKAbADFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwu4vdP0Tz1qH6&#xA;aKwad5jtbWKyvJ6C2ae39ZJLWR2+FXdJFZA32/iA3XFU+h8peVIPR9HRbCL6vE9vBwtoV9OGSvOJ&#xA;KL8KNU8lGxxVuXyl5VlS2SXRrGRLMEWitbQsIQWDkRgr8HxgN8PffFV1v5X8s231X6vpFlD9RYvZ&#xA;enbxL6LMKM0VFHAkbErirZ8s+W21L9KHSrM6mWD/AF428Xr81FA3q8edQO9cVSE6lF5k846cmlSC&#xA;40ry5JPcX9/HRoGvpIGtoraOQH43SK4leXjsvwg7nZVmGKuxV2KuxV2KuxV2KvHb78lPLX/K79N8&#xA;1fpHU/0rdJeavIfXj4CWzms4o4QPS5eiYrhkZeVeNBXFXsWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxVSu7O0vLaS1vII7m2lHGWCZVeNh4MrAgj54qkQ/Lj8vAAB5X0gAbACwtv+qeKo&#xA;PW/y98gx6LfyR+WtKSRLaZkdbG2BBEZIIITFUL5Q/L/yHP5S0Saby3pUs0thavJI9lbszM0KksxK&#xA;VJJxVNv+Vc/l6f8Apl9I/wCkC2/5oxVPbSztLO2jtbOCO2tohxighVUjUeCqoAA+WKquKuxV2Kux&#xA;V2KuxV2Ksevv/JhaL/2ydW/6idOxVkOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVAa//AMcLUv8AmFm/5NtiqF8lf8oboP8A2zrT/kwmKpzirsVdirsVdirsVdirsVdirHr7/wAm&#xA;Fov/AGydW/6idOxVkOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVgP54+c9X8&#xA;n/l7e61p2nJqSq6299HJIY/TguA0XqggNUiRkFPfFV/5H+YtU8w/ljoup6hZJY84RDaxI7OWgt/3&#xA;KSNyC0LmMtTwpirO8VdirsVdirsVdirsVdirsVY9ff8AkwtF/wC2Tq3/AFE6dirIcVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqQ675okstQi0fS7B9V1uaL6x9UR1hjig5cPWnmeoRSwK&#xA;qAGZiDRdjRVZ9e/ML/qy6T/3Frn/ALx2Kpb5k07zl5h8v6joWo6FpLWWpW8ltPTVbgsFkUryXlpr&#xA;AMv2lNNiK4qr6TD520nSrLS7LQtJjs7CCK1tkOrXRKxQoI0FTp29FUYqi/r35hf9WXSf+4tc/wDe&#xA;OxVU0LzPJfX8+kalYtpet20Yne0aRZo5YGYqJreZaeogYcWqqsp+0oqKqp7irsVdirsVWTTQwQvN&#xA;M6xQxKXkkchVVVFSzE7AAdTirGLDzR5o1mEX2iaDF+ipQGtLnVLx7KSeM/ZlSCK2u3VGG6+pxalP&#xA;hxVE/XvzC/6suk/9xa5/7x2KpdPbfmFL5hstY/RWkj6naXdp6H6UuTy+ty20nPl+j9uP1SlKb8vb&#xA;dVMfr35hf9WXSf8AuLXP/eOxVQvPMPnLTYWvNR8vQTWEQLXJ0u+e7uUQCpdYJrWz9QL3COW/lVjt&#xA;irIrK9tb6zgvbSVZ7S6jSa3mTdXjkUMjL7FTXFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;WLaLU+fvNJr8YttMRWO9FC3DAfLkxNPc4qk1r+ZN7GtlPqn1e2si+ptqU/oXKpFBppcc4nY8JGcR&#xA;1IFaV703Kp6n5h+WmmlgaSaO4t3EVzA8Th4pDLDDwcU68rqI7fssD0wKoQ/mf5SlSFkmkPrzvbwq&#xA;IyzN6TRJI4VeR4o9wit+0DWo+FqNKh9a85axZ+c30GCKBrdbewuFkaK4dib66kteDPHVI+JhqGfb&#xA;enbFVTz1fafpGueVNbu3eJY725sZHRHkPo3NhPKy8I1dzWW1iPTtiqv/AMrO8jg0k1EwV6Ge3uYQ&#xA;fkZI1BxVv/laHkDvrduo7liwA+ZIoMVV/wDlY35e/wDU0aT/ANJ1t/zXiqSec/zn8j+XvLN/rNpq&#xA;2n6xcWSKyabbX1uZpSzqpCcS5qA3L7OKsUH58/l/+YHkTzNYaTNPb6s2jagx027iZJOKWrlmDp6k&#xA;RH+zr7Yq9H82+YLrQ10hreNHjvtQisZlMckjKkiO3KNYviJHp0pTFUm0P8zrCa2mbV/3MyX13agQ&#xA;wzBUht7w2Mc04arR+pKO/wBmu+ylsVRzfmb5VVoU9SYyzmAQx+kwLfWTOsdOVBUmzlFK1qtACSKq&#xA;olPOmmX+n6xNo8nrzaVC8hZ0b0nKq/HiwpyHKJgaGvfoRVVb5F8x6jr+l/XrtIowywsqxpNEVaWF&#xA;ZmRlm3IVZFo42btirvy+ijh8uyQRDjDBqWrQwoOiRxapcpGg9lVQB7YqyTFXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FWJ6bNFa/mRrlrcN6c2pWNlcWKtt6yW5mjn4HuYmZOQHQMp74qi2/L/AMpv&#xA;axWklm8ttD9b4QyXFy6EX/L6yGDSHmJPUbZqgV2piqhcflp5RuFjEsE5eNi7zrd3KyyktCx9aVZA&#xA;8m9pFTkTTiKUxVuD8t/KME8VylrKLmKRpPrH1i4Ej80jjZJWDgyxssEfJHqp4ioxVH3vlLQrzU5t&#xA;TnilN7cwx2s8iXNxGrwQuzpGyRyKhUNIxpTepriqW6veJqHnjQ9JtCJZNGebVdUK7+islrNaW8bn&#xA;oGmNyzKOtEJxVlWKuxV2Kpfr+gaR5h0e50bWLcXem3ihLm3ZmUOoYMByQqw+JR0OKpHr/lLStO/L&#xA;zzBo3lrSYLMXGm3kcFlZQpF6kr27oo4oF5OxoKnfFU0SLy95p0/StVjb65ZxyR6hps0ckkYEgBCu&#xA;QjLUjkQVf5EYqhF/LvygsnMWTcjNLcSVnuG9R55xdSCTlIeaNOPU4N8Ne25xVCt+VnkxjLytp2Wc&#xA;Ik0TXVy0bRxySyJGUMhXgrXD0UDv44qmtl5R0Kytr+1t4ZFt9S5i5iM87KFkLF0i5OfRUtIx4x8R&#xA;U4qiR+h/L2hgPItlpOmQAepNIxWKCFaDlJIWaiqO5xVLfIKXA8sxXE8L27X9zfajHDIOMiRX97Nd&#xA;wiRf2X9OZeS9jtirIcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY951/wd+j4f8Tenw9UfUKe&#xA;p9b+sdvqfof6T61P98/FT2xViL/ofm3of419Kp4cf0nSle3r/vaf6++KVv8AuN/7/b/p+xV3+43/&#xA;AL/b/p+xVsfoqo9T/G3p/t1/SNOPf+7+P/gd/DFWY+S/8I/ouT/DPH6v6z/XK+p9Z+s7ep9b+sf6&#xA;R63Tl63x0p2pihP8VdirsVdirsVec6r/AMq//St7+iv0r+k/VP6S/wAN/pD0vW/b9f6p/ofrfzc/&#xA;3mKoT/cb/wB/t/0/Ypd/uN/7/b/p+xV3+43/AL/b/p+xVWs/8B/XbX9Pfprn68f1D/En1/6n9Y39&#xA;Lj6/+h+ry+xz+Ov2cVel4odirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:D97DBEF0082068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D97DBEF0082068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D97DBEF0082068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T10:00:10+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -165.188 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 165.188 li
180.006 165.188 li
180.006 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
74.6367 1.09766 mo
105.369 1.09766 li
107.794 1.09766 109.76 3.06348 109.76 5.48828 cv
109.76 16.4639 li
109.76 18.8887 107.794 20.8545 105.369 20.8545 cv
74.6367 20.8545 li
72.2119 20.8545 70.2461 18.8887 70.2461 16.4639 cv
70.2461 5.48828 li
70.2461 3.06348 72.2119 1.09766 74.6367 1.09766 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
74.9111 1.37207 mo
105.644 1.37207 li
107.794 1.09766 109.76 3.06348 110.034 5.7627 cv
110.034 16.7383 li
109.76 18.8887 107.794 20.8545 105.644 21.1289 cv
74.9111 21.1289 li
72.2119 20.8545 70.2461 18.8887 70.5205 16.7383 cv
70.5205 5.7627 li
70.2461 3.06348 72.2119 1.09766 74.9111 1.37207 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
74.1992 9.33008 mo
74.1992 9.21094 li
74.3623 9.21094 li
74.5469 9.21094 74.6768 9.15234 74.7539 9.03418 cv
74.8008 8.96387 74.8252 8.80566 74.8252 8.55957 cv
74.8252 5.73438 li
74.8252 5.46191 74.7949 5.29199 74.7354 5.22363 cv
74.6514 5.12891 74.5273 5.08203 74.3623 5.08203 cv
74.1992 5.08203 li
74.1992 4.96387 li
75.9746 4.96387 li
76.626 4.96387 77.1211 5.03711 77.4609 5.18555 cv
77.8008 5.33398 78.0742 5.58105 78.2813 5.92578 cv
78.4883 6.27148 78.5918 6.6709 78.5918 7.12402 cv
78.5918 7.73145 78.4072 8.23926 78.0391 8.64746 cv
77.625 9.10254 76.9951 9.33008 76.1475 9.33008 cv
74.1992 9.33008 li
cp
75.4434 9.00879 mo
75.7158 9.06934 75.9434 9.09961 76.1279 9.09961 cv
76.624 9.09961 77.0361 8.9248 77.3633 8.5752 cv
77.6904 8.22559 77.8545 7.75195 77.8545 7.15332 cv
77.8545 6.55078 77.6904 6.0752 77.3633 5.72852 cv
77.0361 5.38086 76.6152 5.20703 76.1016 5.20703 cv
75.9092 5.20703 75.6895 5.23828 75.4434 5.30078 cv
75.4434 9.00879 li
cp
false sop
0 0 0 1 cmyk
f
79.8018 4.75293 mo
79.8916 4.75293 79.9688 4.78418 80.0313 4.84766 cv
80.0947 4.91016 80.126 4.9873 80.126 5.07715 cv
80.126 5.16699 80.0947 5.24414 80.0313 5.30859 cv
79.9688 5.37305 79.8916 5.4043 79.8018 5.4043 cv
79.7119 5.4043 79.6348 5.37305 79.5703 5.30859 cv
79.5059 5.24414 79.4746 5.16699 79.4746 5.07715 cv
79.4746 4.9873 79.5059 4.91016 79.5684 4.84766 cv
79.6318 4.78418 79.71 4.75293 79.8018 4.75293 cv
cp
80.0664 6.29395 mo
80.0664 8.66504 li
80.0664 8.84766 80.0801 8.96973 80.1074 9.03027 cv
80.1338 9.0918 80.1738 9.13672 80.2266 9.16602 cv
80.2793 9.19629 80.375 9.21094 80.5146 9.21094 cv
80.5146 9.33008 li
79.0859 9.33008 li
79.0859 9.21094 li
79.2285 9.21094 79.3242 9.19727 79.374 9.16992 cv
79.4229 9.1416 79.4619 9.0957 79.4902 9.03223 cv
79.5195 8.96777 79.5332 8.8457 79.5332 8.66504 cv
79.5332 7.52539 li
79.5332 7.20801 79.5234 7.00195 79.5049 6.9082 cv
79.4893 6.84082 79.4658 6.79297 79.4336 6.7666 cv
79.4023 6.73926 79.3584 6.72656 79.3027 6.72656 cv
79.2422 6.72656 79.1699 6.74219 79.084 6.77441 cv
79.0391 6.65625 li
79.9258 6.29395 li
80.0664 6.29395 li
cp
f
82.7803 6.29395 mo
82.7803 7.29492 li
82.6748 7.29492 li
82.5938 6.98145 82.4893 6.76758 82.3623 6.6543 cv
82.2354 6.54102 82.0732 6.48438 81.877 6.48438 cv
81.7275 6.48438 81.6074 6.52441 81.5146 6.60352 cv
81.4238 6.68262 81.377 6.77051 81.377 6.86719 cv
81.377 6.98633 81.4111 7.08984 81.4785 7.1748 cv
81.5439 7.2627 81.6787 7.35645 81.8828 7.45508 cv
82.3516 7.68262 li
82.7871 7.89453 83.0039 8.1748 83.0039 8.52148 cv
83.0039 8.78906 82.9023 9.00586 82.7002 9.16895 cv
82.498 9.33301 82.2715 9.41504 82.0205 9.41504 cv
81.8408 9.41504 81.6348 9.38379 81.4033 9.32129 cv
81.333 9.30078 81.2744 9.29004 81.2295 9.29004 cv
81.1807 9.29004 81.1416 9.31641 81.1143 9.36914 cv
81.0088 9.36914 li
81.0088 8.31543 li
81.1143 8.31543 li
81.1738 8.61621 81.2891 8.84277 81.458 8.99609 cv
81.6279 9.14844 81.8174 9.22461 82.0283 9.22461 cv
82.1758 9.22461 82.2969 9.18066 82.3896 9.09473 cv
82.4834 9.00781 82.5303 8.90332 82.5303 8.78125 cv
82.5303 8.63379 82.4775 8.50977 82.373 8.40918 cv
82.2686 8.30859 82.0605 8.18164 81.75 8.02832 cv
81.4385 7.875 81.2354 7.73633 81.1396 7.61133 cv
81.043 7.48926 80.9951 7.33398 80.9951 7.14746 cv
80.9951 6.9043 81.0781 6.70215 81.2441 6.53906 cv
81.4102 6.375 81.625 6.29395 81.8877 6.29395 cv
82.0039 6.29395 82.1436 6.31934 82.3086 6.36914 cv
82.418 6.40234 82.4902 6.41895 82.5273 6.41895 cv
82.5615 6.41895 82.5879 6.41113 82.6074 6.39551 cv
82.627 6.38086 82.6494 6.34668 82.6748 6.29395 cv
82.7803 6.29395 li
cp
f
84.3018 5.41113 mo
84.3018 6.37891 li
84.9893 6.37891 li
84.9893 6.59668 li
84.3018 6.60352 li
84.3018 8.51465 li
84.3018 8.70508 84.3291 8.83398 84.3838 8.90039 cv
84.4375 8.9668 84.5078 9 84.5938 9 cv
84.6641 9 84.7324 8.97852 84.7988 8.93359 cv
84.8652 8.88965 84.917 8.82422 84.9531 8.7373 cv
85.0781 8.7373 li
85.0039 8.94922 84.8975 9.1084 84.7598 9.21484 cv
84.6221 9.32227 84.4805 9.37598 84.335 9.37598 cv
84.2363 9.37598 84.1396 9.34863 84.0449 9.29395 cv
83.9502 9.23828 83.8809 9.16016 83.8359 9.05762 cv
83.791 8.95605 83.7676 8.79785 83.7676 8.58496 cv
83.7676 6.59668 li
83.3008 6.59668 li
83.3008 6.49414 li
83.4189 6.44727 83.54 6.36816 83.6631 6.25684 cv
83.7871 6.14551 83.8975 6.0127 83.9951 5.8584 cv
84.0449 5.77734 84.1143 5.62793 84.2031 5.41113 cv
84.3018 5.41113 li
cp
f
86.1387 6.29395 mo
86.1387 6.95898 li
86.3838 6.51563 86.6348 6.29395 86.8926 6.29395 cv
87.0098 6.29395 87.1064 6.33008 87.1826 6.40234 cv
87.2598 6.47363 87.2979 6.55762 87.2979 6.65234 cv
87.2979 6.73633 87.2705 6.80664 87.2148 6.86523 cv
87.1602 6.92285 87.0938 6.95215 87.0176 6.95215 cv
86.9434 6.95215 86.8604 6.91504 86.7676 6.84082 cv
86.6748 6.76563 86.6055 6.72852 86.5605 6.72852 cv
86.5225 6.72852 86.4814 6.75 86.4365 6.79297 cv
86.3398 6.88086 86.2412 7.02637 86.1387 7.22949 cv
86.1387 8.63867 li
86.1387 8.80273 86.1592 8.92676 86.2002 9.01074 cv
86.2275 9.06934 86.2773 9.11719 86.3477 9.1543 cv
86.418 9.19238 86.5195 9.21094 86.6523 9.21094 cv
86.6523 9.33008 li
85.1445 9.33008 li
85.1445 9.21094 li
85.2939 9.21094 85.4053 9.1875 85.4775 9.14063 cv
85.5303 9.10645 85.5684 9.05176 85.5889 8.97656 cv
85.5996 8.94043 85.6055 8.83594 85.6055 8.66504 cv
85.6055 7.52539 li
85.6055 7.18262 85.5986 6.97949 85.585 6.91406 cv
85.5703 6.84863 85.5449 6.80078 85.5078 6.77148 cv
85.4697 6.74121 85.4238 6.72656 85.3682 6.72656 cv
85.3018 6.72656 85.2266 6.74219 85.1436 6.77441 cv
85.1113 6.65625 li
86.0039 6.29395 li
86.1387 6.29395 li
cp
f
88.2178 4.75293 mo
88.3086 4.75293 88.3848 4.78418 88.4482 4.84766 cv
88.5107 4.91016 88.543 4.9873 88.543 5.07715 cv
88.543 5.16699 88.5107 5.24414 88.4482 5.30859 cv
88.3848 5.37305 88.3086 5.4043 88.2178 5.4043 cv
88.1279 5.4043 88.0508 5.37305 87.9873 5.30859 cv
87.9229 5.24414 87.8906 5.16699 87.8906 5.07715 cv
87.8906 4.9873 87.9219 4.91016 87.9854 4.84766 cv
88.0488 4.78418 88.126 4.75293 88.2178 4.75293 cv
cp
88.4834 6.29395 mo
88.4834 8.66504 li
88.4834 8.84766 88.4971 8.96973 88.5234 9.03027 cv
88.5508 9.0918 88.5898 9.13672 88.6426 9.16602 cv
88.6953 9.19629 88.791 9.21094 88.9307 9.21094 cv
88.9307 9.33008 li
87.502 9.33008 li
87.502 9.21094 li
87.6445 9.21094 87.7412 9.19727 87.79 9.16992 cv
87.8389 9.1416 87.8779 9.0957 87.9063 9.03223 cv
87.9355 8.96777 87.9502 8.8457 87.9502 8.66504 cv
87.9502 7.52539 li
87.9502 7.20801 87.9404 7.00195 87.9209 6.9082 cv
87.9063 6.84082 87.8828 6.79297 87.8506 6.7666 cv
87.8184 6.73926 87.7744 6.72656 87.7188 6.72656 cv
87.6592 6.72656 87.5859 6.74219 87.501 6.77441 cv
87.4561 6.65625 li
88.3418 6.29395 li
88.4834 6.29395 li
cp
f
90.1035 6.89258 mo
90.3877 6.49316 90.6953 6.29395 91.0244 6.29395 cv
91.3262 6.29395 91.5898 6.42285 91.8145 6.68164 cv
92.0391 6.93945 92.1514 7.29297 92.1514 7.74023 cv
92.1514 8.26367 91.9775 8.68457 91.6309 9.00391 cv
91.333 9.27832 91.001 9.41504 90.6338 9.41504 cv
90.4629 9.41504 90.2881 9.38379 90.1113 9.32129 cv
89.9346 9.25879 89.7539 9.16504 89.5703 9.04004 cv
89.5703 5.99707 li
89.5703 5.66406 89.5615 5.45801 89.5459 5.38086 cv
89.5293 5.30371 89.5039 5.25195 89.4697 5.22363 cv
89.4355 5.19629 89.3926 5.18164 89.3408 5.18164 cv
89.2803 5.18164 89.2051 5.19922 89.1143 5.2334 cv
89.0693 5.11523 li
89.958 4.75293 li
90.1035 4.75293 li
90.1035 6.89258 li
cp
90.1035 7.09766 mo
90.1035 8.85449 li
90.2129 8.96094 90.3262 9.04199 90.4424 9.09668 cv
90.5596 9.15137 90.6787 9.17871 90.8008 9.17871 cv
90.9961 9.17871 91.1777 9.07129 91.3457 8.85742 cv
91.5137 8.64355 91.5986 8.33301 91.5986 7.9248 cv
91.5986 7.54883 91.5137 7.25977 91.3457 7.05762 cv
91.1777 6.85547 90.9863 6.75488 90.7725 6.75488 cv
90.6582 6.75488 90.5449 6.7832 90.4316 6.8418 cv
90.3457 6.88379 90.2363 6.96973 90.1035 7.09766 cv
cp
f
95.1738 6.37891 mo
95.1738 8.1709 li
95.1738 8.50684 95.1826 8.71191 95.1982 8.78711 cv
95.2148 8.8623 95.2402 8.91504 95.2754 8.94434 cv
95.3105 8.97461 95.3516 8.98926 95.3984 8.98926 cv
95.4648 8.98926 95.54 8.9707 95.623 8.93457 cv
95.668 9.05273 li
94.7861 9.41504 li
94.6406 9.41504 li
94.6406 8.79785 li
94.3877 9.06934 94.1953 9.24023 94.0625 9.31055 cv
93.9297 9.37988 93.7891 9.41504 93.6416 9.41504 cv
93.4766 9.41504 93.333 9.36719 93.2119 9.27246 cv
93.0908 9.17676 93.0068 9.05469 92.96 8.9043 cv
92.9131 8.75391 92.8887 8.54199 92.8887 8.26758 cv
92.8887 6.95215 li
92.8887 6.8125 92.874 6.71582 92.8438 6.66211 cv
92.8135 6.6084 92.7686 6.56738 92.71 6.53809 cv
92.6504 6.50879 92.5439 6.49609 92.3887 6.49805 cv
92.3887 6.37891 li
93.4229 6.37891 li
93.4229 8.35645 li
93.4229 8.63086 93.4697 8.81152 93.5654 8.89746 cv
93.6611 8.9834 93.7764 9.02637 93.9111 9.02637 cv
94.0029 9.02637 94.1074 8.99805 94.2246 8.93945 cv
94.3418 8.88184 94.4805 8.77148 94.6406 8.60742 cv
94.6406 6.93945 li
94.6406 6.76953 94.6104 6.6543 94.5488 6.59473 cv
94.4873 6.53418 94.3604 6.50195 94.167 6.49805 cv
94.167 6.37891 li
95.1738 6.37891 li
cp
f
96.7412 5.41113 mo
96.7412 6.37891 li
97.4297 6.37891 li
97.4297 6.59668 li
96.7412 6.60352 li
96.7412 8.51465 li
96.7412 8.70508 96.7686 8.83398 96.8232 8.90039 cv
96.8779 8.9668 96.9482 9 97.0342 9 cv
97.1045 9 97.1729 8.97852 97.2393 8.93359 cv
97.3057 8.88965 97.3574 8.82422 97.3936 8.7373 cv
97.5186 8.7373 li
97.4434 8.94922 97.3369 9.1084 97.2002 9.21484 cv
97.0625 9.32227 96.9209 9.37598 96.7744 9.37598 cv
96.6758 9.37598 96.5801 9.34863 96.4854 9.29395 cv
96.3906 9.23828 96.3213 9.16016 96.2754 9.05762 cv
96.2305 8.95605 96.208 8.79785 96.208 8.58496 cv
96.208 6.59668 li
95.7402 6.59668 li
95.7402 6.49414 li
95.8594 6.44727 95.9805 6.36816 96.1035 6.25684 cv
96.2275 6.14551 96.3379 6.0127 96.4355 5.8584 cv
96.4854 5.77734 96.5547 5.62793 96.6426 5.41113 cv
96.7412 5.41113 li
cp
f
98.4658 4.75293 mo
98.5557 4.75293 98.6318 4.78418 98.6953 4.84766 cv
98.7578 4.91016 98.79 4.9873 98.79 5.07715 cv
98.79 5.16699 98.7578 5.24414 98.6953 5.30859 cv
98.6318 5.37305 98.5557 5.4043 98.4658 5.4043 cv
98.375 5.4043 98.2988 5.37305 98.2344 5.30859 cv
98.1699 5.24414 98.1377 5.16699 98.1377 5.07715 cv
98.1377 4.9873 98.1689 4.91016 98.2324 4.84766 cv
98.2959 4.78418 98.373 4.75293 98.4658 4.75293 cv
cp
98.7305 6.29395 mo
98.7305 8.66504 li
98.7305 8.84766 98.7441 8.96973 98.7705 9.03027 cv
98.7979 9.0918 98.8369 9.13672 98.8896 9.16602 cv
98.9424 9.19629 99.0391 9.21094 99.1787 9.21094 cv
99.1787 9.33008 li
97.749 9.33008 li
97.749 9.21094 li
97.8926 9.21094 97.9883 9.19727 98.0371 9.16992 cv
98.0859 9.1416 98.125 9.0957 98.1543 9.03223 cv
98.1826 8.96777 98.1973 8.8457 98.1973 8.66504 cv
98.1973 7.52539 li
98.1973 7.20801 98.1875 7.00195 98.168 6.9082 cv
98.1533 6.84082 98.1299 6.79297 98.0977 6.7666 cv
98.0654 6.73926 98.0215 6.72656 97.9658 6.72656 cv
97.9063 6.72656 97.834 6.74219 97.748 6.77441 cv
97.7031 6.65625 li
98.5889 6.29395 li
98.7305 6.29395 li
cp
f
100.992 6.29395 mo
101.438 6.29395 101.797 6.46289 102.067 6.80176 cv
102.297 7.09082 102.412 7.42285 102.412 7.79785 cv
102.412 8.06152 102.349 8.3291 102.222 8.59863 cv
102.096 8.86914 101.921 9.07227 101.699 9.20996 cv
101.477 9.34668 101.229 9.41504 100.957 9.41504 cv
100.513 9.41504 100.16 9.23828 99.8984 8.88477 cv
99.6777 8.58691 99.5664 8.25293 99.5664 7.88184 cv
99.5664 7.6123 99.6338 7.34375 99.7676 7.07617 cv
99.9023 6.80957 100.078 6.6123 100.298 6.48535 cv
100.517 6.35742 100.748 6.29395 100.992 6.29395 cv
cp
100.893 6.50488 mo
100.779 6.50488 100.665 6.53809 100.551 6.60547 cv
100.436 6.67285 100.343 6.79102 100.272 6.95996 cv
100.201 7.12891 100.166 7.34668 100.166 7.6123 cv
100.166 8.04004 100.251 8.40918 100.422 8.71973 cv
100.592 9.0293 100.816 9.18457 101.096 9.18457 cv
101.304 9.18457 101.475 9.09961 101.61 8.92773 cv
101.745 8.75684 101.813 8.46289 101.813 8.04492 cv
101.813 7.52344 101.7 7.1123 101.475 6.8125 cv
101.322 6.60742 101.129 6.50488 100.893 6.50488 cv
cp
f
103.696 6.91113 mo
104.04 6.5 104.368 6.29395 104.681 6.29395 cv
104.841 6.29395 104.979 6.33398 105.095 6.41406 cv
105.21 6.49512 105.302 6.62793 105.371 6.8125 cv
105.418 6.94141 105.441 7.13867 105.441 7.40527 cv
105.441 8.66504 li
105.441 8.84961 105.456 8.97559 105.486 9.04199 cv
105.51 9.09473 105.547 9.13672 105.6 9.16602 cv
105.651 9.19629 105.748 9.21094 105.889 9.21094 cv
105.889 9.33008 li
104.434 9.33008 li
104.434 9.21094 li
104.494 9.21094 li
104.631 9.21094 104.727 9.19043 104.781 9.14844 cv
104.836 9.10742 104.874 9.0459 104.895 8.96484 cv
104.903 8.93359 104.908 8.83301 104.908 8.66504 cv
104.908 7.45215 li
104.908 7.18262 104.873 6.98633 104.804 6.86523 cv
104.734 6.74316 104.618 6.68262 104.454 6.68262 cv
104.2 6.68262 103.947 6.82227 103.696 7.10156 cv
103.696 8.66504 li
103.696 8.86328 103.708 8.98535 103.731 9.03223 cv
103.762 9.09375 103.803 9.13965 103.855 9.16797 cv
103.908 9.19727 104.016 9.21094 104.177 9.21094 cv
104.177 9.33008 li
102.715 9.33008 li
102.715 9.21094 li
102.779 9.21094 li
102.93 9.21094 103.031 9.17383 103.084 9.09766 cv
103.137 9.02246 103.162 8.87793 103.162 8.66504 cv
103.162 7.57129 li
103.162 7.21777 103.154 7.00293 103.139 6.92578 cv
103.122 6.84863 103.098 6.7959 103.064 6.76758 cv
103.031 6.74023 102.987 6.72656 102.932 6.72656 cv
102.872 6.72656 102.8 6.74219 102.717 6.77441 cv
102.669 6.65625 li
103.558 6.29395 li
103.696 6.29395 li
103.696 6.91113 li
cp
f
84.6768 15.8945 mo
84.5977 16.2842 84.4424 16.582 84.2109 16.7891 cv
83.9785 16.9971 83.7227 17.1006 83.4424 17.1006 cv
83.1074 17.1006 82.8154 16.96 82.5674 16.6797 cv
82.3184 16.3984 82.1943 16.0195 82.1943 15.542 cv
82.1943 15.0781 82.332 14.7021 82.6074 14.4131 cv
82.8818 14.124 83.2129 13.9795 83.5986 13.9795 cv
83.8877 13.9795 84.125 14.0557 84.3115 14.209 cv
84.498 14.3623 84.5908 14.5215 84.5908 14.6865 cv
84.5908 14.7686 84.5654 14.834 84.5127 14.8848 cv
84.46 14.9355 84.3867 14.9609 84.292 14.9609 cv
84.166 14.9609 84.0713 14.9189 84.0098 14.8369 cv
83.9707 14.792 83.9453 14.7061 83.9336 14.5781 cv
83.9219 14.4512 83.8789 14.3535 83.8037 14.2871 cv
83.7285 14.2227 83.625 14.1895 83.4922 14.1895 cv
83.2773 14.1895 83.1055 14.2695 82.9746 14.4287 cv
82.8008 14.6387 82.7139 14.917 82.7139 15.2627 cv
82.7139 15.6152 82.8008 15.9258 82.9736 16.1963 cv
83.1465 16.4658 83.3799 16.6006 83.6738 16.6006 cv
83.8838 16.6006 84.0723 16.5293 84.2402 16.3887 cv
84.3584 16.29 84.4727 16.1104 84.585 15.8496 cv
84.6768 15.8945 li
cp
f
85.5859 15.1777 mo
85.583 15.6133 85.6895 15.9551 85.9043 16.2021 cv
86.1182 16.4502 86.3701 16.5742 86.6602 16.5742 cv
86.8525 16.5742 87.0205 16.5215 87.1631 16.416 cv
87.3057 16.3115 87.4258 16.1289 87.5215 15.8691 cv
87.6201 15.9336 li
87.5752 16.2305 87.4453 16.499 87.2285 16.7393 cv
87.0127 16.9805 86.7412 17.1006 86.416 17.1006 cv
86.0625 17.1006 85.7607 16.9629 85.5088 16.6885 cv
85.2568 16.4131 85.1309 16.043 85.1309 15.5781 cv
85.1309 15.0752 85.2598 14.6826 85.5186 14.4014 cv
85.7764 14.1201 86.1006 13.9795 86.4902 13.9795 cv
86.8193 13.9795 87.0908 14.0879 87.3027 14.3057 cv
87.5146 14.5225 87.6201 14.8135 87.6201 15.1777 cv
85.5859 15.1777 li
cp
85.5859 14.9932 mo
86.9492 14.9932 li
86.9385 14.8047 86.916 14.6719 86.8809 14.5947 cv
86.8281 14.4756 86.748 14.3809 86.6416 14.3125 cv
86.5361 14.2441 86.4248 14.21 86.3086 14.21 cv
86.1309 14.21 85.9717 14.2783 85.832 14.417 cv
85.6914 14.5547 85.6094 14.7471 85.5859 14.9932 cv
cp
f
88.8789 14.5967 mo
89.2227 14.1855 89.5508 13.9795 89.8633 13.9795 cv
90.0234 13.9795 90.1611 14.0195 90.2773 14.0996 cv
90.3926 14.1807 90.4844 14.3135 90.5527 14.498 cv
90.5996 14.627 90.624 14.8242 90.624 15.0908 cv
90.624 16.3496 li
90.624 16.5352 90.6387 16.6611 90.668 16.7275 cv
90.6914 16.7803 90.7295 16.8223 90.7822 16.8516 cv
90.834 16.8818 90.9307 16.8965 91.0713 16.8965 cv
91.0713 17.0156 li
89.6162 17.0156 li
89.6162 16.8965 li
89.6768 16.8965 li
89.8135 16.8965 89.9092 16.876 89.9639 16.834 cv
90.0186 16.793 90.0557 16.7314 90.0771 16.6504 cv
90.0859 16.6182 90.0898 16.5186 90.0898 16.3496 cv
90.0898 15.1377 li
90.0898 14.8682 90.0557 14.6719 89.9863 14.5508 cv
89.917 14.4287 89.8008 14.3682 89.6357 14.3682 cv
89.3828 14.3682 89.1299 14.5078 88.8789 14.7871 cv
88.8789 16.3496 li
88.8789 16.5479 88.8906 16.6709 88.9141 16.7178 cv
88.9443 16.7793 88.9854 16.8242 89.0381 16.8535 cv
89.0908 16.8818 89.1982 16.8965 89.3594 16.8965 cv
89.3594 17.0156 li
87.8975 17.0156 li
87.8975 16.8965 li
87.9619 16.8965 li
88.1123 16.8965 88.2139 16.8584 88.2656 16.7832 cv
88.3184 16.707 88.3447 16.5635 88.3447 16.3496 cv
88.3447 15.2568 li
88.3447 14.9033 88.3369 14.6885 88.3213 14.6113 cv
88.3047 14.5342 88.2803 14.4814 88.2471 14.4531 cv
88.2139 14.4258 88.1699 14.4121 88.1143 14.4121 cv
88.0547 14.4121 87.9824 14.4277 87.8994 14.46 cv
87.8516 14.3418 li
88.7402 13.9795 li
88.8789 13.9795 li
88.8789 14.5967 li
cp
f
92.1709 13.0967 mo
92.1709 14.0645 li
92.8594 14.0645 li
92.8594 14.2822 li
92.1709 14.2891 li
92.1709 16.2002 li
92.1709 16.3906 92.1982 16.5195 92.2529 16.5859 cv
92.3076 16.6523 92.3779 16.6855 92.4639 16.6855 cv
92.5342 16.6855 92.6025 16.6641 92.6689 16.6191 cv
92.7354 16.5742 92.7871 16.5088 92.8232 16.4229 cv
92.9482 16.4229 li
92.873 16.6348 92.7666 16.7939 92.6299 16.9004 cv
92.4922 17.0078 92.3506 17.0615 92.2041 17.0615 cv
92.1055 17.0615 92.0088 17.0342 91.915 16.9785 cv
91.8203 16.9238 91.75 16.8457 91.7051 16.7432 cv
91.6602 16.6406 91.6377 16.4834 91.6377 16.2705 cv
91.6377 14.2822 li
91.1699 14.2822 li
91.1699 14.1797 li
91.2891 14.1328 91.4092 14.0537 91.5332 13.9424 cv
91.6572 13.8311 91.7676 13.6982 91.8652 13.5439 cv
91.915 13.4619 91.9834 13.3135 92.0723 13.0967 cv
92.1709 13.0967 li
cp
f
93.6328 15.1777 mo
93.6309 15.6133 93.7373 15.9551 93.9512 16.2021 cv
94.166 16.4502 94.418 16.5742 94.707 16.5742 cv
94.9004 16.5742 95.0684 16.5215 95.2109 16.416 cv
95.3535 16.3115 95.4727 16.1289 95.5693 15.8691 cv
95.668 15.9336 li
95.623 16.2305 95.4922 16.499 95.2764 16.7393 cv
95.0596 16.9805 94.7891 17.1006 94.4639 17.1006 cv
94.1104 17.1006 93.8076 16.9629 93.5566 16.6885 cv
93.3047 16.4131 93.1787 16.043 93.1787 15.5781 cv
93.1787 15.0752 93.3076 14.6826 93.5654 14.4014 cv
93.8242 14.1201 94.1475 13.9795 94.5371 13.9795 cv
94.8672 13.9795 95.1377 14.0879 95.3506 14.3057 cv
95.5625 14.5225 95.668 14.8135 95.668 15.1777 cv
93.6328 15.1777 li
cp
93.6328 14.9932 mo
94.9961 14.9932 li
94.9854 14.8047 94.9629 14.6719 94.9287 14.5947 cv
94.875 14.4756 94.7959 14.3809 94.6895 14.3125 cv
94.583 14.2441 94.4727 14.21 94.3564 14.21 cv
94.1787 14.21 94.0195 14.2783 93.8789 14.417 cv
93.7393 14.5547 93.6572 14.7471 93.6328 14.9932 cv
cp
f
96.9326 13.9795 mo
96.9326 14.6445 li
97.1777 14.2012 97.4287 13.9795 97.6865 13.9795 cv
97.8037 13.9795 97.9004 14.0156 97.9766 14.0869 cv
98.0537 14.1592 98.0918 14.2432 98.0918 14.3379 cv
98.0918 14.4219 98.0645 14.4922 98.0088 14.5508 cv
97.9541 14.6084 97.8877 14.6377 97.8115 14.6377 cv
97.7373 14.6377 97.6543 14.6006 97.5615 14.5254 cv
97.4688 14.4512 97.3994 14.4141 97.3545 14.4141 cv
97.3164 14.4141 97.2754 14.4355 97.2305 14.4785 cv
97.1338 14.5664 97.0352 14.7119 96.9326 14.9141 cv
96.9326 16.3232 li
96.9326 16.4873 96.9531 16.6123 96.9941 16.6963 cv
97.0215 16.7539 97.0703 16.8027 97.1416 16.8398 cv
97.2119 16.8779 97.3135 16.8965 97.4463 16.8965 cv
97.4463 17.0156 li
95.9385 17.0156 li
95.9385 16.8965 li
96.0879 16.8965 96.1982 16.873 96.2715 16.8262 cv
96.3242 16.792 96.3613 16.7373 96.3828 16.6621 cv
96.3936 16.625 96.3994 16.5215 96.3994 16.3496 cv
96.3994 15.2109 li
96.3994 14.8682 96.3926 14.665 96.3779 14.5996 cv
96.3643 14.5342 96.3389 14.4863 96.3018 14.457 cv
96.2637 14.4268 96.2178 14.4121 96.1621 14.4121 cv
96.0957 14.4121 96.0205 14.4277 95.9375 14.46 cv
95.9053 14.3418 li
96.7969 13.9795 li
96.9326 13.9795 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
114.15 40.6113 mo
135.005 40.6113 li
137.429 40.6113 139.395 42.5771 139.395 45.002 cv
139.395 51.0381 li
139.395 53.4629 137.429 55.4287 135.005 55.4287 cv
114.15 55.4287 li
111.726 55.4287 109.76 53.4629 109.76 51.0381 cv
109.76 45.002 li
109.76 42.5771 111.726 40.6113 114.15 40.6113 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
114.425 40.8857 mo
135.279 40.8857 li
137.429 40.6113 139.395 42.5771 139.669 45.2764 cv
139.669 51.3125 li
139.395 53.4629 137.429 55.4287 135.279 55.7031 cv
114.425 55.7031 li
111.726 55.4287 109.76 53.4629 110.034 51.3125 cv
110.034 45.2764 li
109.76 42.5771 111.726 40.6113 114.425 40.8857 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
114.499 47.877 mo
116.521 47.877 li
116.521 46.6191 li
116.521 46.3984 116.507 46.252 116.479 46.1816 cv
116.458 46.1289 116.412 46.083 116.344 46.0439 cv
116.251 45.9932 116.153 45.9678 116.05 45.9678 cv
115.896 45.9678 li
115.896 45.8486 li
117.766 45.8486 li
117.766 45.9678 li
117.611 45.9678 li
117.508 45.9678 117.41 45.9922 117.317 46.041 cv
117.249 46.0752 117.202 46.127 117.177 46.1963 cv
117.152 46.2656 117.14 46.4063 117.14 46.6191 cv
117.14 49.4453 li
117.14 49.665 117.154 49.8105 117.182 49.8818 cv
117.203 49.9355 117.248 49.9814 117.314 50.0195 cv
117.409 50.0713 117.508 50.0967 117.611 50.0967 cv
117.766 50.0967 li
117.766 50.2148 li
115.896 50.2148 li
115.896 50.0967 li
116.05 50.0967 li
116.229 50.0967 116.358 50.0439 116.44 49.9395 cv
116.494 49.8711 116.521 49.7061 116.521 49.4453 cv
116.521 48.1143 li
114.499 48.1143 li
114.499 49.4453 li
114.499 49.665 114.513 49.8105 114.541 49.8818 cv
114.563 49.9355 114.607 49.9814 114.676 50.0195 cv
114.768 50.0713 114.865 50.0967 114.968 50.0967 cv
115.125 50.0967 li
115.125 50.2148 li
113.255 50.2148 li
113.255 50.0967 li
113.409 50.0967 li
113.59 50.0967 113.721 50.0439 113.803 49.9395 cv
113.854 49.8711 113.88 49.7061 113.88 49.4453 cv
113.88 46.6191 li
113.88 46.3984 113.866 46.252 113.838 46.1816 cv
113.816 46.1289 113.772 46.083 113.706 46.0439 cv
113.611 45.9932 113.513 45.9678 113.409 45.9678 cv
113.255 45.9678 li
113.255 45.8486 li
115.125 45.8486 li
115.125 45.9678 li
114.968 45.9678 li
114.865 45.9678 114.768 45.9922 114.676 46.041 cv
114.609 46.0752 114.563 46.127 114.538 46.1963 cv
114.512 46.2656 114.499 46.4063 114.499 46.6191 cv
114.499 47.877 li
cp
f
119.554 47.1797 mo
120 47.1797 120.358 47.3486 120.629 47.6875 cv
120.858 47.9766 120.973 48.3086 120.973 48.6836 cv
120.973 48.9473 120.909 49.2148 120.783 49.4844 cv
120.656 49.7549 120.482 49.958 120.26 50.0957 cv
120.038 50.2324 119.791 50.3008 119.519 50.3008 cv
119.074 50.3008 118.721 50.124 118.459 49.7705 cv
118.238 49.4727 118.128 49.1387 118.128 48.7676 cv
118.128 48.4971 118.195 48.2285 118.329 47.9619 cv
118.463 47.6953 118.64 47.498 118.858 47.3711 cv
119.077 47.2432 119.309 47.1797 119.554 47.1797 cv
cp
119.454 47.3896 mo
119.34 47.3896 119.227 47.4238 119.111 47.4912 cv
118.997 47.5586 118.904 47.6768 118.833 47.8457 cv
118.763 48.0146 118.728 48.2324 118.728 48.4971 cv
118.728 48.9258 118.813 49.2949 118.982 49.6055 cv
119.153 49.915 119.378 50.0703 119.656 50.0703 cv
119.864 50.0703 120.036 49.9844 120.171 49.8135 cv
120.306 49.6426 120.374 49.3486 120.374 48.9307 cv
120.374 48.4092 120.261 47.998 120.036 47.6982 cv
119.884 47.4932 119.689 47.3896 119.454 47.3896 cv
cp
f
123.982 47.2646 mo
123.982 49.0566 li
123.982 49.3926 123.99 49.5977 124.007 49.6729 cv
124.022 49.748 124.048 49.7998 124.084 49.8301 cv
124.119 49.8604 124.16 49.875 124.207 49.875 cv
124.273 49.875 124.348 49.8564 124.432 49.8203 cv
124.477 49.9385 li
123.594 50.3008 li
123.449 50.3008 li
123.449 49.6836 li
123.196 49.9551 123.003 50.126 122.87 50.1963 cv
122.737 50.2656 122.598 50.3008 122.449 50.3008 cv
122.284 50.3008 122.142 50.2529 122.021 50.1582 cv
121.899 50.0625 121.815 49.9395 121.768 49.79 cv
121.721 49.6396 121.697 49.4277 121.697 49.1533 cv
121.697 47.8379 li
121.697 47.6982 121.683 47.6016 121.652 47.5479 cv
121.622 47.4941 121.577 47.4531 121.518 47.4238 cv
121.459 47.3945 121.352 47.3818 121.197 47.3838 cv
121.197 47.2646 li
122.23 47.2646 li
122.23 49.2422 li
122.23 49.5166 122.278 49.6973 122.374 49.7832 cv
122.469 49.8691 122.584 49.9121 122.72 49.9121 cv
122.812 49.9121 122.916 49.8838 123.033 49.8252 cv
123.149 49.7676 123.288 49.6563 123.449 49.4932 cv
123.449 47.8252 li
123.449 47.6543 123.418 47.54 123.357 47.4795 cv
123.296 47.4199 123.168 47.3877 122.975 47.3838 cv
122.975 47.2646 li
123.982 47.2646 li
cp
f
126.591 47.1797 mo
126.591 48.1807 li
126.485 48.1807 li
126.404 47.8662 126.3 47.6533 126.173 47.54 cv
126.046 47.4268 125.884 47.3701 125.688 47.3701 cv
125.538 47.3701 125.417 47.4102 125.325 47.4893 cv
125.233 47.5684 125.188 47.6563 125.188 47.7529 cv
125.188 47.8721 125.222 47.9756 125.289 48.0605 cv
125.354 48.1484 125.489 48.2422 125.692 48.3398 cv
126.162 48.5684 li
126.597 48.7803 126.814 49.0605 126.814 49.4072 cv
126.814 49.6748 126.713 49.8906 126.511 50.0547 cv
126.308 50.2188 126.081 50.3008 125.831 50.3008 cv
125.65 50.3008 125.445 50.2695 125.214 50.207 cv
125.143 50.1865 125.085 50.1758 125.04 50.1758 cv
124.99 50.1758 124.952 50.2021 124.924 50.2549 cv
124.818 50.2549 li
124.818 49.2012 li
124.924 49.2012 li
124.984 49.502 125.099 49.7285 125.269 49.8809 cv
125.438 50.0342 125.628 50.1104 125.838 50.1104 cv
125.986 50.1104 126.106 50.0664 126.2 49.9805 cv
126.293 49.8936 126.34 49.7891 126.34 49.667 cv
126.34 49.5195 126.288 49.3955 126.184 49.2949 cv
126.079 49.1943 125.871 49.0674 125.561 48.9141 cv
125.249 48.7607 125.046 48.6211 124.949 48.4971 cv
124.854 48.375 124.806 48.2197 124.806 48.0332 cv
124.806 47.79 124.889 47.5879 125.055 47.4238 cv
125.221 47.2607 125.436 47.1797 125.698 47.1797 cv
125.813 47.1797 125.954 47.2051 126.119 47.2549 cv
126.229 47.2881 126.301 47.3047 126.337 47.3047 cv
126.371 47.3047 126.398 47.2969 126.418 47.2813 cv
126.437 47.2656 126.459 47.2324 126.485 47.1797 cv
126.591 47.1797 li
cp
f
127.743 48.3779 mo
127.74 48.8135 127.847 49.1553 128.062 49.4023 cv
128.275 49.6504 128.527 49.7744 128.817 49.7744 cv
129.01 49.7744 129.178 49.7217 129.32 49.6162 cv
129.463 49.5117 129.582 49.3291 129.679 49.0693 cv
129.777 49.1338 li
129.732 49.4307 129.603 49.6992 129.386 49.9395 cv
129.17 50.1807 128.898 50.3008 128.573 50.3008 cv
128.22 50.3008 127.918 50.1631 127.666 49.8887 cv
127.414 49.6133 127.288 49.2432 127.288 48.7783 cv
127.288 48.2754 127.417 47.8828 127.676 47.6016 cv
127.934 47.3203 128.258 47.1797 128.647 47.1797 cv
128.977 47.1797 129.248 47.2881 129.46 47.5059 cv
129.672 47.7227 129.777 48.0137 129.777 48.3779 cv
127.743 48.3779 li
cp
127.743 48.1934 mo
129.106 48.1934 li
129.096 48.0049 129.073 47.8721 129.039 47.7949 cv
128.985 47.6758 128.905 47.5811 128.799 47.5127 cv
128.693 47.4443 128.582 47.4102 128.466 47.4102 cv
128.288 47.4102 128.129 47.4785 127.988 47.6172 cv
127.849 47.7549 127.767 47.9473 127.743 48.1934 cv
cp
f
134.276 48.7598 mo
132.586 48.7598 li
132.294 49.4434 li
132.221 49.6133 132.185 49.7393 132.185 49.8232 cv
132.185 49.8896 132.216 49.9482 132.279 49.999 cv
132.342 50.0488 132.479 50.082 132.689 50.0967 cv
132.689 50.2148 li
131.312 50.2148 li
131.312 50.0967 li
131.494 50.0645 131.612 50.0225 131.666 49.9717 cv
131.775 49.8682 131.896 49.6592 132.029 49.3438 cv
133.565 45.75 li
133.681 45.75 li
135.191 49.3828 li
135.313 49.6738 135.424 49.8633 135.524 49.9502 cv
135.624 50.0371 135.763 50.0859 135.94 50.0967 cv
135.94 50.2148 li
134.22 50.2148 li
134.22 50.0967 li
134.394 50.0879 134.511 50.0596 134.572 50.0098 cv
134.633 49.96 134.664 49.9004 134.664 49.8291 cv
134.664 49.7344 134.621 49.5859 134.535 49.3818 cv
134.276 48.7598 li
cp
134.178 48.5225 mo
133.442 46.7607 li
132.688 48.5225 li
134.178 48.5225 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
79.5762 75.1855 mo
100.43 75.1855 li
102.854 75.1855 104.82 77.1514 104.82 79.5762 cv
104.82 85.6133 li
104.82 88.0371 102.854 90.0029 100.43 90.0029 cv
79.5762 90.0029 li
77.1514 90.0029 75.1855 88.0371 75.1855 85.6133 cv
75.1855 79.5762 li
75.1855 77.1514 77.1514 75.1855 79.5762 75.1855 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
79.8506 75.46 mo
100.704 75.46 li
102.854 75.1855 104.82 77.1514 105.095 79.8506 cv
105.095 85.8877 li
104.82 88.0371 102.854 90.0029 100.704 90.2773 cv
79.8506 90.2773 li
77.1514 90.0029 75.1855 88.0371 75.46 85.8877 cv
75.46 79.8506 li
75.1855 77.1514 77.1514 75.1855 79.8506 75.46 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
79.9268 82.4521 mo
81.9482 82.4521 li
81.9482 81.1943 li
81.9482 80.9727 81.9346 80.8262 81.9063 80.7559 cv
81.8848 80.7031 81.8398 80.6572 81.7705 80.6191 cv
81.6787 80.5674 81.5801 80.542 81.4775 80.542 cv
81.3223 80.542 li
81.3223 80.4238 li
83.1934 80.4238 li
83.1934 80.542 li
83.0381 80.542 li
82.9346 80.542 82.8369 80.5664 82.7441 80.6152 cv
82.6758 80.6494 82.6289 80.7012 82.6045 80.7705 cv
82.5801 80.8398 82.5674 80.9805 82.5674 81.1943 cv
82.5674 84.0195 li
82.5674 84.2402 82.5811 84.3857 82.6094 84.4561 cv
82.6309 84.5098 82.6748 84.5557 82.7412 84.5938 cv
82.8359 84.6455 82.9346 84.6709 83.0381 84.6709 cv
83.1934 84.6709 li
83.1934 84.79 li
81.3223 84.79 li
81.3223 84.6709 li
81.4775 84.6709 li
81.6563 84.6709 81.7861 84.6191 81.8672 84.5137 cv
81.9209 84.4453 81.9482 84.2803 81.9482 84.0195 cv
81.9482 82.6885 li
79.9268 82.6885 li
79.9268 84.0195 li
79.9268 84.2402 79.9404 84.3857 79.9678 84.4561 cv
79.9893 84.5098 80.0342 84.5557 80.1025 84.5938 cv
80.1953 84.6455 80.292 84.6709 80.3945 84.6709 cv
80.5518 84.6709 li
80.5518 84.79 li
78.6816 84.79 li
78.6816 84.6709 li
78.8369 84.6709 li
79.0176 84.6709 79.1484 84.6191 79.2305 84.5137 cv
79.2813 84.4453 79.3076 84.2803 79.3076 84.0195 cv
79.3076 81.1943 li
79.3076 80.9727 79.293 80.8262 79.2656 80.7559 cv
79.2441 80.7031 79.2002 80.6572 79.1328 80.6191 cv
79.0391 80.5674 78.9395 80.542 78.8369 80.542 cv
78.6816 80.542 li
78.6816 80.4238 li
80.5518 80.4238 li
80.5518 80.542 li
80.3945 80.542 li
80.292 80.542 80.1953 80.5664 80.1025 80.6152 cv
80.0361 80.6494 79.9902 80.7012 79.9648 80.7705 cv
79.9395 80.8398 79.9268 80.9805 79.9268 81.1943 cv
79.9268 82.4521 li
cp
f
84.9805 81.7539 mo
85.4268 81.7539 85.7852 81.9229 86.0557 82.2617 cv
86.2852 82.5508 86.4004 82.8828 86.4004 83.2578 cv
86.4004 83.5215 86.3369 83.7891 86.21 84.0586 cv
86.084 84.3291 85.9092 84.5322 85.6875 84.6699 cv
85.4648 84.8066 85.2178 84.875 84.9453 84.875 cv
84.501 84.875 84.1484 84.6982 83.8867 84.3447 cv
83.666 84.0469 83.5547 83.7129 83.5547 83.3418 cv
83.5547 83.0723 83.6221 82.8037 83.7559 82.5371 cv
83.8906 82.2695 84.0664 82.0723 84.2852 81.9453 cv
84.5049 81.8174 84.7363 81.7539 84.9805 81.7539 cv
cp
84.8809 81.9648 mo
84.7676 81.9648 84.6533 81.998 84.5391 82.0654 cv
84.4238 82.1328 84.3311 82.251 84.2607 82.4199 cv
84.1895 82.5898 84.1543 82.8066 84.1543 83.0723 cv
84.1543 83.5 84.2393 83.8691 84.4102 84.1797 cv
84.5801 84.4893 84.8047 84.6445 85.084 84.6445 cv
85.292 84.6445 85.4629 84.5596 85.5977 84.3877 cv
85.7334 84.2168 85.8008 83.9229 85.8008 83.5049 cv
85.8008 82.9834 85.6885 82.5723 85.4629 82.2725 cv
85.3105 82.0674 85.1172 81.9648 84.8809 81.9648 cv
cp
f
89.4102 81.8398 mo
89.4102 83.6309 li
89.4102 83.9668 89.418 84.1719 89.4336 84.2471 cv
89.4502 84.3223 89.4756 84.375 89.5107 84.4043 cv
89.5459 84.4346 89.5869 84.4492 89.6338 84.4492 cv
89.7002 84.4492 89.7754 84.4307 89.8584 84.3945 cv
89.9033 84.5127 li
89.0215 84.875 li
88.876 84.875 li
88.876 84.2578 li
88.623 84.5293 88.4307 84.7002 88.2979 84.7705 cv
88.165 84.8398 88.0244 84.875 87.877 84.875 cv
87.7119 84.875 87.5684 84.8281 87.4473 84.7324 cv
87.3262 84.6367 87.2422 84.5137 87.1953 84.3643 cv
87.1484 84.2139 87.124 84.002 87.124 83.7275 cv
87.124 82.4121 li
87.124 82.2725 87.1094 82.1758 87.0791 82.1221 cv
87.0488 82.0684 87.0049 82.0273 86.9453 81.998 cv
86.8857 81.9688 86.7793 81.9561 86.624 81.958 cv
86.624 81.8398 li
87.6582 81.8398 li
87.6582 83.8164 li
87.6582 84.0908 87.7051 84.2715 87.8008 84.3574 cv
87.8965 84.4434 88.0117 84.4863 88.1465 84.4863 cv
88.2383 84.4863 88.3428 84.458 88.46 84.3994 cv
88.5771 84.3418 88.7158 84.2314 88.876 84.0674 cv
88.876 82.3994 li
88.876 82.2295 88.8457 82.1143 88.7842 82.0547 cv
88.7227 81.9941 88.5957 81.9619 88.4023 81.958 cv
88.4023 81.8398 li
89.4102 81.8398 li
cp
f
92.0176 81.7539 mo
92.0176 82.7549 li
91.9121 82.7549 li
91.8311 82.4414 91.7266 82.2275 91.5996 82.1143 cv
91.4727 82.001 91.3105 81.9443 91.1143 81.9443 cv
90.9648 81.9443 90.8447 81.9844 90.7529 82.0635 cv
90.6611 82.1426 90.6152 82.2305 90.6152 82.3271 cv
90.6152 82.4473 90.6484 82.5498 90.7168 82.6348 cv
90.7822 82.7227 90.916 82.8164 91.1201 82.915 cv
91.5889 83.1426 li
92.0244 83.3545 92.2412 83.6348 92.2412 83.9814 cv
92.2412 84.25 92.1406 84.4658 91.9375 84.6299 cv
91.7354 84.793 91.5088 84.875 91.2578 84.875 cv
91.0781 84.875 90.8721 84.8438 90.6406 84.7813 cv
90.5703 84.7607 90.5117 84.75 90.4668 84.75 cv
90.418 84.75 90.3789 84.7764 90.3516 84.8291 cv
90.2461 84.8291 li
90.2461 83.7754 li
90.3516 83.7754 li
90.4111 84.0762 90.5264 84.3027 90.6953 84.4561 cv
90.8652 84.6084 91.0547 84.6846 91.2656 84.6846 cv
91.4131 84.6846 91.5342 84.6406 91.627 84.5547 cv
91.7207 84.4678 91.7676 84.3633 91.7676 84.2412 cv
91.7676 84.0938 91.7148 83.9697 91.6104 83.8691 cv
91.5059 83.7686 91.2979 83.6416 90.9873 83.4883 cv
90.6758 83.335 90.4727 83.1963 90.377 83.0713 cv
90.2813 82.9492 90.2324 82.7939 90.2324 82.6074 cv
90.2324 82.3652 90.3154 82.1621 90.4814 81.999 cv
90.6475 81.835 90.8623 81.7539 91.126 81.7539 cv
91.2412 81.7539 91.3809 81.7793 91.5459 81.8291 cv
91.6553 81.8623 91.7285 81.8789 91.7646 81.8789 cv
91.7988 81.8789 91.8252 81.8711 91.8447 81.8555 cv
91.8643 81.8408 91.8867 81.8066 91.9121 81.7539 cv
92.0176 81.7539 li
cp
f
93.1699 82.9521 mo
93.168 83.3877 93.2744 83.7295 93.4883 83.9766 cv
93.7031 84.2246 93.9551 84.3486 94.2441 84.3486 cv
94.4375 84.3486 94.6045 84.2959 94.7471 84.1904 cv
94.8906 84.0859 95.0098 83.9033 95.1064 83.6436 cv
95.2051 83.708 li
95.1602 84.0049 95.0293 84.2734 94.8135 84.5146 cv
94.5967 84.7549 94.3262 84.875 94 84.875 cv
93.6475 84.875 93.3447 84.7383 93.0928 84.4629 cv
92.8418 84.1875 92.7158 83.8174 92.7158 83.3535 cv
92.7158 82.8496 92.8447 82.458 93.1025 82.1758 cv
93.3604 81.8945 93.6846 81.7539 94.0742 81.7539 cv
94.4043 81.7539 94.6748 81.8623 94.8867 82.0801 cv
95.0986 82.2969 95.2051 82.5879 95.2051 82.9521 cv
93.1699 82.9521 li
cp
93.1699 82.7676 mo
94.5332 82.7676 li
94.5225 82.5791 94.5 82.4473 94.4658 82.3701 cv
94.4121 82.25 94.332 82.1553 94.2266 82.0869 cv
94.1201 82.0186 94.0088 81.9844 93.8936 81.9844 cv
93.7158 81.9844 93.5566 82.0537 93.416 82.1914 cv
93.2754 82.3291 93.1934 82.5215 93.1699 82.7676 cv
cp
f
101.007 80.3242 mo
101.105 81.8066 li
101.007 81.8066 li
100.874 81.3623 100.686 81.043 100.439 80.8477 cv
100.194 80.6523 99.8994 80.5547 99.5557 80.5547 cv
99.2666 80.5547 99.0059 80.6289 98.7734 80.7754 cv
98.541 80.9229 98.3574 81.1572 98.2236 81.4795 cv
98.0908 81.8008 98.0234 82.2012 98.0234 82.6797 cv
98.0234 83.0752 98.0869 83.417 98.2129 83.707 cv
98.3389 83.9971 98.5283 84.2188 98.7813 84.374 cv
99.0342 84.5283 99.3232 84.6055 99.6475 84.6055 cv
99.9297 84.6055 100.178 84.5449 100.394 84.4238 cv
100.609 84.3027 100.847 84.0625 101.104 83.7031 cv
101.204 83.7686 li
100.986 84.1563 100.731 84.4395 100.44 84.6191 cv
100.149 84.7988 99.8047 84.8887 99.4043 84.8887 cv
98.6836 84.8887 98.125 84.6201 97.7285 84.084 cv
97.4336 83.6846 97.2861 83.2148 97.2861 82.6738 cv
97.2861 82.2383 97.3828 81.8389 97.5781 81.4736 cv
97.7725 81.1094 98.04 80.8262 98.3809 80.626 cv
98.7217 80.4248 99.0938 80.3242 99.4971 80.3242 cv
99.8115 80.3242 100.121 80.4023 100.427 80.5566 cv
100.517 80.6035 100.581 80.6279 100.619 80.6279 cv
100.677 80.6279 100.728 80.6074 100.77 80.5664 cv
100.825 80.5088 100.865 80.4277 100.889 80.3242 cv
101.007 80.3242 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
99.332 104.821 mo
120.187 104.821 li
122.611 104.821 124.577 106.787 124.577 109.211 cv
124.577 115.248 li
124.577 117.673 122.611 119.639 120.187 119.639 cv
99.332 119.639 li
96.9082 119.639 94.9424 117.673 94.9424 115.248 cv
94.9424 109.211 li
94.9424 106.787 96.9082 104.821 99.332 104.821 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.6074 105.096 mo
120.461 105.096 li
122.611 104.821 124.577 106.787 124.852 109.485 cv
124.852 115.522 li
124.577 117.673 122.611 119.639 120.461 119.913 cv
99.6074 119.913 li
96.9082 119.639 94.9424 117.673 95.2168 115.522 cv
95.2168 109.485 li
94.9424 106.787 96.9082 104.821 99.6074 105.096 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
99.502 112.087 mo
101.523 112.087 li
101.523 110.829 li
101.523 110.607 101.51 110.462 101.481 110.392 cv
101.46 110.338 101.415 110.292 101.346 110.254 cv
101.254 110.203 101.155 110.177 101.053 110.177 cv
100.897 110.177 li
100.897 110.059 li
102.768 110.059 li
102.768 110.177 li
102.613 110.177 li
102.51 110.177 102.412 110.202 102.319 110.251 cv
102.251 110.285 102.204 110.337 102.18 110.406 cv
102.154 110.475 102.143 110.616 102.143 110.829 cv
102.143 113.654 li
102.143 113.875 102.156 114.021 102.185 114.091 cv
102.206 114.145 102.25 114.19 102.316 114.229 cv
102.411 114.28 102.51 114.307 102.613 114.307 cv
102.768 114.307 li
102.768 114.425 li
100.897 114.425 li
100.897 114.307 li
101.053 114.307 li
101.23 114.307 101.361 114.254 101.442 114.149 cv
101.496 114.08 101.523 113.916 101.523 113.654 cv
101.523 112.324 li
99.502 112.324 li
99.502 113.654 li
99.502 113.875 99.5156 114.021 99.543 114.091 cv
99.5645 114.145 99.6094 114.19 99.6777 114.229 cv
99.7695 114.28 99.8672 114.307 99.9697 114.307 cv
100.127 114.307 li
100.127 114.425 li
98.2568 114.425 li
98.2568 114.307 li
98.4111 114.307 li
98.5918 114.307 98.7236 114.254 98.8047 114.149 cv
98.8564 114.08 98.8828 113.916 98.8828 113.654 cv
98.8828 110.829 li
98.8828 110.607 98.8682 110.462 98.8408 110.392 cv
98.8193 110.338 98.7754 110.292 98.708 110.254 cv
98.6133 110.203 98.5146 110.177 98.4111 110.177 cv
98.2568 110.177 li
98.2568 110.059 li
100.127 110.059 li
100.127 110.177 li
99.9697 110.177 li
99.8672 110.177 99.7695 110.202 99.6777 110.251 cv
99.6113 110.285 99.5654 110.337 99.54 110.406 cv
99.5146 110.475 99.502 110.616 99.502 110.829 cv
99.502 112.087 li
cp
f
104.556 111.389 mo
105.002 111.389 105.36 111.559 105.631 111.896 cv
105.86 112.187 105.976 112.519 105.976 112.894 cv
105.976 113.157 105.912 113.424 105.785 113.694 cv
105.658 113.964 105.484 114.168 105.263 114.305 cv
105.04 114.442 104.793 114.511 104.521 114.511 cv
104.076 114.511 103.724 114.334 103.462 113.98 cv
103.24 113.683 103.13 113.348 103.13 112.978 cv
103.13 112.707 103.197 112.438 103.331 112.172 cv
103.466 111.905 103.642 111.708 103.86 111.58 cv
104.08 111.453 104.312 111.389 104.556 111.389 cv
cp
104.456 111.6 mo
104.343 111.6 104.229 111.634 104.113 111.701 cv
103.999 111.769 103.906 111.887 103.836 112.056 cv
103.765 112.225 103.729 112.441 103.729 112.707 cv
103.729 113.135 103.814 113.504 103.985 113.814 cv
104.155 114.125 104.38 114.28 104.659 114.28 cv
104.867 114.28 105.038 114.194 105.173 114.023 cv
105.309 113.853 105.376 113.558 105.376 113.141 cv
105.376 112.618 105.264 112.207 105.038 111.908 cv
104.886 111.702 104.692 111.6 104.456 111.6 cv
cp
f
108.984 111.475 mo
108.984 113.266 li
108.984 113.602 108.993 113.808 109.009 113.883 cv
109.025 113.957 109.051 114.01 109.086 114.04 cv
109.121 114.069 109.162 114.084 109.209 114.084 cv
109.275 114.084 109.351 114.066 109.434 114.03 cv
109.479 114.148 li
108.597 114.511 li
108.451 114.511 li
108.451 113.893 li
108.198 114.165 108.006 114.336 107.873 114.405 cv
107.74 114.476 107.6 114.511 107.451 114.511 cv
107.287 114.511 107.144 114.463 107.022 114.367 cv
106.901 114.272 106.817 114.149 106.771 113.999 cv
106.723 113.85 106.699 113.637 106.699 113.362 cv
106.699 112.048 li
106.699 111.908 106.685 111.812 106.654 111.758 cv
106.624 111.704 106.579 111.662 106.521 111.634 cv
106.461 111.604 106.354 111.591 106.199 111.593 cv
106.199 111.475 li
107.233 111.475 li
107.233 113.451 li
107.233 113.727 107.28 113.907 107.376 113.993 cv
107.472 114.079 107.587 114.122 107.722 114.122 cv
107.813 114.122 107.918 114.093 108.035 114.035 cv
108.151 113.977 108.291 113.866 108.451 113.703 cv
108.451 112.034 li
108.451 111.864 108.421 111.749 108.359 111.689 cv
108.298 111.63 108.171 111.598 107.978 111.593 cv
107.978 111.475 li
108.984 111.475 li
cp
f
111.593 111.389 mo
111.593 112.39 li
111.487 112.39 li
111.406 112.076 111.302 111.862 111.175 111.75 cv
111.048 111.637 110.886 111.58 110.689 111.58 cv
110.54 111.58 110.42 111.619 110.327 111.699 cv
110.235 111.778 110.189 111.866 110.189 111.962 cv
110.189 112.082 110.224 112.185 110.291 112.271 cv
110.356 112.358 110.491 112.451 110.695 112.55 cv
111.164 112.778 li
111.6 112.99 111.816 113.27 111.816 113.617 cv
111.816 113.885 111.715 114.101 111.513 114.265 cv
111.311 114.429 111.084 114.511 110.833 114.511 cv
110.653 114.511 110.447 114.479 110.216 114.417 cv
110.146 114.396 110.087 114.386 110.042 114.386 cv
109.993 114.386 109.954 114.412 109.927 114.465 cv
109.821 114.465 li
109.821 113.411 li
109.927 113.411 li
109.986 113.712 110.102 113.938 110.271 114.091 cv
110.44 114.243 110.63 114.319 110.841 114.319 cv
110.988 114.319 111.109 114.276 111.202 114.189 cv
111.296 114.103 111.343 113.999 111.343 113.877 cv
111.343 113.729 111.29 113.604 111.186 113.504 cv
111.081 113.403 110.873 113.276 110.563 113.123 cv
110.251 112.97 110.048 112.831 109.952 112.706 cv
109.855 112.584 109.808 112.43 109.808 112.242 cv
109.808 112 109.891 111.797 110.057 111.634 cv
110.223 111.471 110.438 111.389 110.7 111.389 cv
110.816 111.389 110.956 111.414 111.121 111.465 cv
111.23 111.498 111.303 111.514 111.34 111.514 cv
111.374 111.514 111.4 111.507 111.42 111.491 cv
111.439 111.476 111.462 111.441 111.487 111.389 cv
111.593 111.389 li
cp
f
112.745 112.588 mo
112.743 113.023 112.849 113.364 113.063 113.612 cv
113.278 113.859 113.53 113.983 113.819 113.983 cv
114.013 113.983 114.18 113.932 114.322 113.826 cv
114.465 113.721 114.585 113.539 114.682 113.279 cv
114.78 113.344 li
114.735 113.64 114.604 113.909 114.388 114.149 cv
114.172 114.391 113.901 114.511 113.575 114.511 cv
113.223 114.511 112.92 114.373 112.668 114.098 cv
112.417 113.822 112.291 113.453 112.291 112.988 cv
112.291 112.485 112.42 112.093 112.678 111.812 cv
112.936 111.529 113.26 111.389 113.649 111.389 cv
113.979 111.389 114.25 111.498 114.462 111.715 cv
114.674 111.933 114.78 112.224 114.78 112.588 cv
112.745 112.588 li
cp
112.745 112.403 mo
114.108 112.403 li
114.098 112.215 114.075 112.082 114.041 112.005 cv
113.987 111.885 113.907 111.791 113.802 111.723 cv
113.695 111.653 113.584 111.619 113.469 111.619 cv
113.291 111.619 113.132 111.688 112.991 111.826 cv
112.851 111.965 112.769 112.157 112.745 112.403 cv
cp
f
120.654 109.96 mo
120.767 111.336 li
120.647 111.336 li
120.534 110.995 120.388 110.737 120.209 110.564 cv
119.95 110.315 119.617 110.19 119.211 110.19 cv
118.657 110.19 118.236 110.41 117.948 110.85 cv
117.706 111.221 117.586 111.662 117.586 112.175 cv
117.586 112.59 117.666 112.97 117.826 113.313 cv
117.987 113.656 118.198 113.907 118.458 114.066 cv
118.719 114.227 118.986 114.307 119.261 114.307 cv
119.421 114.307 119.576 114.286 119.727 114.245 cv
119.877 114.204 120.021 114.144 120.16 114.064 cv
120.16 112.798 li
120.16 112.579 120.144 112.436 120.11 112.367 cv
120.077 112.3 120.025 112.248 119.956 112.213 cv
119.887 112.178 119.764 112.159 119.588 112.159 cv
119.588 112.041 li
121.273 112.041 li
121.273 112.159 li
121.193 112.159 li
121.026 112.159 120.912 112.216 120.851 112.327 cv
120.808 112.407 120.786 112.563 120.786 112.798 cv
120.786 114.137 li
120.54 114.27 120.297 114.368 120.057 114.43 cv
119.817 114.492 119.551 114.523 119.257 114.523 cv
118.416 114.523 117.776 114.253 117.34 113.713 cv
117.012 113.307 116.848 112.84 116.848 112.31 cv
116.848 111.926 116.94 111.558 117.124 111.205 cv
117.343 110.787 117.643 110.465 118.023 110.24 cv
118.343 110.053 118.72 109.96 119.154 109.96 cv
119.313 109.96 119.457 109.973 119.587 109.998 cv
119.716 110.024 119.899 110.081 120.138 110.169 cv
120.258 110.214 120.338 110.236 120.379 110.236 cv
120.419 110.236 120.454 110.218 120.482 110.181 cv
120.512 110.143 120.529 110.069 120.536 109.96 cv
120.654 109.96 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
40.0625 149.273 mo
60.917 149.273 li
63.3408 149.273 65.3066 151.239 65.3066 153.664 cv
65.3066 159.701 li
65.3066 162.126 63.3408 164.092 60.917 164.092 cv
40.0625 164.092 li
37.6377 164.092 35.6719 162.126 35.6719 159.701 cv
35.6719 153.664 li
35.6719 151.239 37.6377 149.273 40.0625 149.273 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
40.3369 149.548 mo
61.1914 149.548 li
63.3408 149.273 65.3066 151.239 65.5811 153.938 cv
65.5811 159.976 li
65.3066 162.126 63.3408 164.092 61.1914 164.366 cv
40.3369 164.366 li
37.6377 164.092 35.6719 162.126 35.9463 159.976 cv
35.9463 153.938 li
35.6719 151.239 37.6377 149.273 40.3369 149.548 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
40.5977 156.54 mo
42.6191 156.54 li
42.6191 155.282 li
42.6191 155.061 42.6055 154.914 42.5771 154.844 cv
42.5557 154.791 42.5107 154.745 42.4424 154.707 cv
42.3496 154.655 42.252 154.63 42.1484 154.63 cv
41.9941 154.63 li
41.9941 154.512 li
43.8643 154.512 li
43.8643 154.63 li
43.709 154.63 li
43.6064 154.63 43.5088 154.654 43.416 154.703 cv
43.3467 154.737 43.3008 154.789 43.2754 154.858 cv
43.251 154.928 43.2383 155.069 43.2383 155.282 cv
43.2383 158.107 li
43.2383 158.328 43.2529 158.474 43.2803 158.544 cv
43.3018 158.598 43.3457 158.644 43.4131 158.682 cv
43.5068 158.733 43.6064 158.759 43.709 158.759 cv
43.8643 158.759 li
43.8643 158.878 li
41.9941 158.878 li
41.9941 158.759 li
42.1484 158.759 li
42.3271 158.759 42.457 158.707 42.5391 158.602 cv
42.5928 158.533 42.6191 158.368 42.6191 158.107 cv
42.6191 156.777 li
40.5977 156.777 li
40.5977 158.107 li
40.5977 158.328 40.6113 158.474 40.6396 158.544 cv
40.6611 158.598 40.7061 158.644 40.7744 158.682 cv
40.8662 158.733 40.9639 158.759 41.0664 158.759 cv
41.2236 158.759 li
41.2236 158.878 li
39.3535 158.878 li
39.3535 158.759 li
39.5078 158.759 li
39.6885 158.759 39.8193 158.707 39.9014 158.602 cv
39.9531 158.533 39.9785 158.368 39.9785 158.107 cv
39.9785 155.282 li
39.9785 155.061 39.9648 154.914 39.9365 154.844 cv
39.915 154.791 39.8711 154.745 39.8047 154.707 cv
39.71 154.655 39.6113 154.63 39.5078 154.63 cv
39.3535 154.63 li
39.3535 154.512 li
41.2236 154.512 li
41.2236 154.63 li
41.0664 154.63 li
40.9639 154.63 40.8662 154.654 40.7744 154.703 cv
40.708 154.737 40.6621 154.789 40.6357 154.858 cv
40.6104 154.928 40.5977 155.069 40.5977 155.282 cv
40.5977 156.54 li
cp
f
45.6523 155.842 mo
46.0986 155.842 46.457 156.011 46.7266 156.35 cv
46.957 156.639 47.0713 156.972 47.0713 157.347 cv
47.0713 157.61 47.0078 157.877 46.8818 158.146 cv
46.7549 158.417 46.5801 158.62 46.3584 158.758 cv
46.1367 158.895 45.8887 158.963 45.6162 158.963 cv
45.1729 158.963 44.8193 158.786 44.5576 158.433 cv
44.3369 158.135 44.2266 157.801 44.2266 157.43 cv
44.2266 157.16 44.293 156.892 44.4277 156.625 cv
44.5615 156.357 44.7383 156.16 44.957 156.033 cv
45.1758 155.905 45.4072 155.842 45.6523 155.842 cv
cp
45.5527 156.053 mo
45.4385 156.053 45.3242 156.086 45.21 156.153 cv
45.0957 156.221 45.0029 156.339 44.9316 156.509 cv
44.8613 156.678 44.8252 156.895 44.8252 157.16 cv
44.8252 157.588 44.9111 157.957 45.0811 158.268 cv
45.252 158.578 45.4766 158.732 45.7549 158.732 cv
45.9629 158.732 46.1348 158.647 46.2695 158.477 cv
46.4043 158.305 46.4717 158.011 46.4717 157.594 cv
46.4717 157.071 46.3594 156.66 46.1348 156.36 cv
45.9824 156.155 45.7881 156.053 45.5527 156.053 cv
cp
f
50.0811 155.928 mo
50.0811 157.719 li
50.0811 158.055 50.0889 158.26 50.1055 158.335 cv
50.1211 158.41 50.1465 158.463 50.1816 158.492 cv
50.2168 158.522 50.2588 158.537 50.3057 158.537 cv
50.3721 158.537 50.4463 158.519 50.5303 158.482 cv
50.5752 158.602 li
49.6924 158.963 li
49.5479 158.963 li
49.5479 158.346 li
49.2949 158.617 49.1016 158.788 48.9688 158.858 cv
48.8359 158.929 48.6953 158.963 48.5479 158.963 cv
48.3828 158.963 48.2402 158.916 48.1191 158.82 cv
47.998 158.725 47.9141 158.603 47.8662 158.452 cv
47.8193 158.302 47.7959 158.09 47.7959 157.815 cv
47.7959 156.5 li
47.7959 156.36 47.7803 156.264 47.75 156.21 cv
47.7207 156.156 47.6758 156.115 47.6162 156.086 cv
47.5576 156.058 47.4502 156.044 47.2949 156.046 cv
47.2949 155.928 li
48.3291 155.928 li
48.3291 157.904 li
48.3291 158.18 48.377 158.359 48.4727 158.446 cv
48.5674 158.532 48.6826 158.575 48.8174 158.575 cv
48.9102 158.575 49.0146 158.546 49.1309 158.487 cv
49.248 158.43 49.3867 158.319 49.5479 158.155 cv
49.5479 156.487 li
49.5479 156.317 49.5166 156.202 49.4551 156.143 cv
49.3945 156.082 49.2666 156.051 49.0732 156.046 cv
49.0732 155.928 li
50.0811 155.928 li
cp
f
52.6885 155.842 mo
52.6885 156.843 li
52.584 156.843 li
52.502 156.529 52.3984 156.315 52.2715 156.202 cv
52.1445 156.089 51.9824 156.033 51.7861 156.033 cv
51.6367 156.033 51.5156 156.072 51.4238 156.151 cv
51.332 156.23 51.2861 156.318 51.2861 156.415 cv
51.2861 156.535 51.3203 156.638 51.3877 156.724 cv
51.4531 156.811 51.5879 156.904 51.791 157.003 cv
52.2607 157.23 li
52.6953 157.443 52.9131 157.723 52.9131 158.069 cv
52.9131 158.338 52.8115 158.554 52.6094 158.718 cv
52.4063 158.882 52.1797 158.963 51.9287 158.963 cv
51.749 158.963 51.543 158.932 51.3115 158.869 cv
51.2412 158.849 51.1836 158.838 51.1387 158.838 cv
51.0889 158.838 51.0508 158.864 51.0225 158.917 cv
50.917 158.917 li
50.917 157.863 li
51.0225 157.863 li
51.083 158.164 51.1973 158.391 51.3672 158.544 cv
51.5361 158.696 51.7266 158.772 51.9365 158.772 cv
52.085 158.772 52.2051 158.729 52.2988 158.643 cv
52.3916 158.556 52.4385 158.451 52.4385 158.329 cv
52.4385 158.182 52.3867 158.058 52.2822 157.957 cv
52.1777 157.856 51.9697 157.729 51.6582 157.576 cv
51.3477 157.423 51.1436 157.284 51.0479 157.159 cv
50.9521 157.037 50.9043 156.882 50.9043 156.695 cv
50.9043 156.453 50.9873 156.25 51.1533 156.087 cv
51.3193 155.924 51.5332 155.842 51.7969 155.842 cv
51.9121 155.842 52.0527 155.867 52.2178 155.918 cv
52.3262 155.95 52.3994 155.967 52.4355 155.967 cv
52.4697 155.967 52.4971 155.959 52.5156 155.943 cv
52.5352 155.929 52.5576 155.895 52.584 155.842 cv
52.6885 155.842 li
cp
f
53.8418 157.04 mo
53.8389 157.476 53.9453 157.817 54.1602 158.065 cv
54.374 158.313 54.626 158.437 54.916 158.437 cv
55.1084 158.437 55.2764 158.384 55.4189 158.279 cv
55.5615 158.174 55.6807 157.991 55.7773 157.731 cv
55.876 157.796 li
55.8311 158.093 55.7002 158.361 55.4844 158.603 cv
55.2686 158.843 54.9971 158.963 54.6719 158.963 cv
54.3184 158.963 54.0156 158.826 53.7646 158.551 cv
53.5127 158.275 53.3867 157.905 53.3867 157.441 cv
53.3867 156.938 53.5156 156.546 53.7744 156.264 cv
54.0322 155.982 54.3555 155.842 54.7461 155.842 cv
55.0752 155.842 55.3467 155.95 55.5586 156.168 cv
55.7705 156.386 55.876 156.676 55.876 157.04 cv
53.8418 157.04 li
cp
53.8418 156.855 mo
55.2041 156.855 li
55.1934 156.668 55.1709 156.535 55.1367 156.458 cv
55.084 156.338 55.0039 156.243 54.8975 156.175 cv
54.791 156.106 54.6807 156.072 54.5645 156.072 cv
54.3867 156.072 54.2275 156.142 54.0869 156.279 cv
53.9473 156.418 53.8652 156.609 53.8418 156.855 cv
cp
f
59.0898 154.749 mo
59.0898 156.474 li
60.0518 156.474 li
60.2998 156.474 60.4668 156.437 60.5498 156.361 cv
60.6611 156.264 60.7236 156.09 60.7363 155.842 cv
60.8555 155.842 li
60.8555 157.363 li
60.7363 157.363 li
60.7061 157.15 60.6768 157.014 60.6465 156.953 cv
60.6074 156.878 60.5449 156.818 60.457 156.775 cv
60.3691 156.732 60.2334 156.711 60.0518 156.711 cv
59.0898 156.711 li
59.0898 158.151 li
59.0898 158.345 59.0986 158.462 59.1152 158.504 cv
59.1328 158.546 59.1631 158.579 59.2061 158.604 cv
59.248 158.628 59.3301 158.641 59.4502 158.641 cv
60.1885 158.641 li
60.4346 158.641 60.6133 158.623 60.7246 158.589 cv
60.8369 158.555 60.9434 158.487 61.0459 158.387 cv
61.1787 158.253 61.3154 158.053 61.4541 157.784 cv
61.5859 157.784 li
61.21 158.878 li
57.8457 158.878 li
57.8457 158.759 li
58 158.759 li
58.1035 158.759 58.2012 158.734 58.2939 158.685 cv
58.3623 158.65 58.4092 158.599 58.4336 158.53 cv
58.459 158.461 58.4707 158.32 58.4707 158.107 cv
58.4707 155.269 li
58.4707 154.993 58.4434 154.822 58.3867 154.759 cv
58.3096 154.673 58.1807 154.63 58 154.63 cv
57.8457 154.63 li
57.8457 154.512 li
61.2109 154.512 li
61.2568 155.473 li
61.1318 155.473 li
61.0869 155.241 61.0371 155.082 60.9824 154.995 cv
60.9277 154.909 60.8467 154.843 60.7393 154.797 cv
60.6533 154.765 60.5029 154.749 60.2861 154.749 cv
59.0898 154.749 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
5.4873 60.3682 mo
26.3418 60.3682 li
28.7666 60.3682 30.7324 62.334 30.7324 64.7588 cv
30.7324 70.7949 li
30.7324 73.2197 28.7666 75.1855 26.3418 75.1855 cv
5.4873 75.1855 li
3.06348 75.1855 1.09766 73.2197 1.09766 70.7949 cv
1.09766 64.7588 li
1.09766 62.334 3.06348 60.3682 5.4873 60.3682 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
5.76172 60.6426 mo
26.6162 60.6426 li
28.7666 60.3682 30.7324 62.334 31.0068 65.0332 cv
31.0068 71.0693 li
30.7324 73.2197 28.7666 75.1855 26.6162 75.46 cv
5.76172 75.46 li
3.06348 75.1855 1.09766 73.2197 1.37207 71.0693 cv
1.37207 65.0332 li
1.09766 62.334 3.06348 60.3682 5.76172 60.6426 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
5.83887 67.6338 mo
7.86035 67.6338 li
7.86035 66.376 li
7.86035 66.1553 7.84668 66.0088 7.81836 65.9385 cv
7.79688 65.8848 7.75195 65.8398 7.68262 65.8008 cv
7.59082 65.75 7.49219 65.7246 7.38965 65.7246 cv
7.23438 65.7246 li
7.23438 65.6055 li
9.10449 65.6055 li
9.10449 65.7246 li
8.9502 65.7246 li
8.84668 65.7246 8.74902 65.749 8.65625 65.7979 cv
8.58789 65.832 8.54102 65.8838 8.5166 65.9531 cv
8.49121 66.0225 8.47949 66.1631 8.47949 66.376 cv
8.47949 69.2012 li
8.47949 69.4219 8.49316 69.5674 8.52148 69.6387 cv
8.54297 69.6924 8.58691 69.7383 8.65332 69.7764 cv
8.74805 69.8281 8.84668 69.8535 8.9502 69.8535 cv
9.10449 69.8535 li
9.10449 69.9717 li
7.23438 69.9717 li
7.23438 69.8535 li
7.38965 69.8535 li
7.56738 69.8535 7.69824 69.8008 7.7793 69.6963 cv
7.83301 69.6279 7.86035 69.4629 7.86035 69.2012 cv
7.86035 67.8711 li
5.83887 67.8711 li
5.83887 69.2012 li
5.83887 69.4219 5.85254 69.5674 5.87988 69.6387 cv
5.90137 69.6924 5.94629 69.7383 6.01465 69.7764 cv
6.10645 69.8281 6.2041 69.8535 6.30664 69.8535 cv
6.46387 69.8535 li
6.46387 69.9717 li
4.59375 69.9717 li
4.59375 69.8535 li
4.74805 69.8535 li
4.92871 69.8535 5.06055 69.8008 5.1416 69.6963 cv
5.19336 69.6279 5.21973 69.4629 5.21973 69.2012 cv
5.21973 66.376 li
5.21973 66.1553 5.20508 66.0088 5.17773 65.9385 cv
5.15625 65.8848 5.1123 65.8398 5.04492 65.8008 cv
4.9502 65.75 4.85156 65.7246 4.74805 65.7246 cv
4.59375 65.7246 li
4.59375 65.6055 li
6.46387 65.6055 li
6.46387 65.7246 li
6.30664 65.7246 li
6.2041 65.7246 6.10645 65.749 6.01465 65.7979 cv
5.94824 65.832 5.90234 65.8838 5.87695 65.9531 cv
5.85156 66.0225 5.83887 66.1631 5.83887 66.376 cv
5.83887 67.6338 li
cp
f
10.8926 66.9365 mo
11.3389 66.9365 11.6973 67.1055 11.9678 67.4443 cv
12.1973 67.7334 12.3125 68.0654 12.3125 68.4404 cv
12.3125 68.7041 12.249 68.9707 12.1221 69.2412 cv
11.9951 69.5117 11.8213 69.7148 11.5996 69.8516 cv
11.377 69.9893 11.1299 70.0576 10.8574 70.0576 cv
10.4131 70.0576 10.0605 69.8809 9.79883 69.5273 cv
9.57715 69.2295 9.4668 68.8955 9.4668 68.5244 cv
9.4668 68.2539 9.53418 67.9854 9.66797 67.7188 cv
9.80273 67.4521 9.97852 67.2549 10.1973 67.1279 cv
10.416 67 10.6484 66.9365 10.8926 66.9365 cv
cp
10.793 67.1465 mo
10.6797 67.1465 10.5654 67.1807 10.4502 67.248 cv
10.3359 67.3154 10.2432 67.4336 10.1729 67.6025 cv
10.1016 67.7715 10.0664 67.9893 10.0664 68.2539 cv
10.0664 68.6826 10.1514 69.0518 10.3223 69.3623 cv
10.4922 69.6719 10.7168 69.8271 10.9961 69.8271 cv
11.2041 69.8271 11.375 69.7412 11.5098 69.5703 cv
11.6455 69.3994 11.7129 69.1055 11.7129 68.6875 cv
11.7129 68.166 11.6006 67.7549 11.375 67.4551 cv
11.2227 67.25 11.0293 67.1465 10.793 67.1465 cv
cp
f
15.3213 67.0215 mo
15.3213 68.8135 li
15.3213 69.1494 15.3301 69.3545 15.3457 69.4297 cv
15.3613 69.5049 15.3877 69.5566 15.4229 69.5869 cv
15.458 69.6172 15.499 69.6318 15.5459 69.6318 cv
15.6123 69.6318 15.6875 69.6133 15.7705 69.5771 cv
15.8154 69.6953 li
14.9336 70.0576 li
14.7881 70.0576 li
14.7881 69.4404 li
14.5352 69.7119 14.3428 69.8828 14.21 69.9531 cv
14.0771 70.0225 13.9365 70.0576 13.7891 70.0576 cv
13.624 70.0576 13.4805 70.0098 13.3594 69.915 cv
13.2383 69.8193 13.1543 69.6963 13.1074 69.5469 cv
13.0596 69.3965 13.0361 69.1846 13.0361 68.9102 cv
13.0361 67.5947 li
13.0361 67.4551 13.0215 67.3584 12.9912 67.3047 cv
12.9609 67.251 12.916 67.21 12.8574 67.1807 cv
12.7979 67.1514 12.6914 67.1387 12.5361 67.1406 cv
12.5361 67.0215 li
13.5703 67.0215 li
13.5703 68.998 li
13.5703 69.2734 13.6172 69.4541 13.7129 69.54 cv
13.8086 69.626 13.9238 69.6689 14.0586 69.6689 cv
14.1504 69.6689 14.2549 69.6406 14.3721 69.582 cv
14.4883 69.5244 14.6279 69.4131 14.7881 69.25 cv
14.7881 67.582 li
14.7881 67.4111 14.7578 67.2969 14.6963 67.2363 cv
14.6348 67.1768 14.5078 67.1445 14.3145 67.1406 cv
14.3145 67.0215 li
15.3213 67.0215 li
cp
f
17.9297 66.9365 mo
17.9297 67.9375 li
17.8242 67.9375 li
17.7432 67.623 17.6387 67.4102 17.5117 67.2969 cv
17.3848 67.1836 17.2227 67.127 17.0264 67.127 cv
16.877 67.127 16.7568 67.167 16.6641 67.2461 cv
16.5723 67.3252 16.5264 67.4131 16.5264 67.5098 cv
16.5264 67.6289 16.5605 67.7324 16.6279 67.8174 cv
16.6934 67.9053 16.8281 67.999 17.0322 68.0967 cv
17.501 68.3252 li
17.9355 68.5371 18.1533 68.8174 18.1533 69.1641 cv
18.1533 69.4316 18.0518 69.6475 17.8496 69.8115 cv
17.6475 69.9756 17.4209 70.0576 17.1699 70.0576 cv
16.9902 70.0576 16.7842 70.0264 16.5527 69.9639 cv
16.4824 69.9434 16.4238 69.9326 16.3789 69.9326 cv
16.3301 69.9326 16.291 69.959 16.2637 70.0117 cv
16.1582 70.0117 li
16.1582 68.958 li
16.2637 68.958 li
16.3232 69.2588 16.4385 69.4854 16.6074 69.6377 cv
16.7773 69.791 16.9668 69.8672 17.1777 69.8672 cv
17.3252 69.8672 17.4463 69.8232 17.5391 69.7363 cv
17.6328 69.6504 17.6797 69.5459 17.6797 69.4238 cv
17.6797 69.2764 17.627 69.1523 17.5225 69.0518 cv
17.418 68.9512 17.21 68.8242 16.8994 68.6709 cv
16.5879 68.5176 16.3848 68.3779 16.2891 68.2539 cv
16.1924 68.1309 16.1445 67.9766 16.1445 67.79 cv
16.1445 67.5469 16.2275 67.3447 16.3936 67.1807 cv
16.5596 67.0176 16.7744 66.9365 17.0371 66.9365 cv
17.1533 66.9365 17.293 66.9609 17.458 67.0117 cv
17.5674 67.0449 17.6396 67.0615 17.6768 67.0615 cv
17.7109 67.0615 17.7373 67.0537 17.7568 67.0381 cv
17.7764 67.0225 17.7988 66.9893 17.8242 66.9365 cv
17.9297 66.9365 li
cp
f
19.082 68.1348 mo
19.0801 68.5703 19.1855 68.9121 19.4004 69.1592 cv
19.6152 69.4072 19.8672 69.5313 20.1563 69.5313 cv
20.3496 69.5313 20.5166 69.4785 20.6592 69.373 cv
20.8018 69.2686 20.9219 69.0859 21.0186 68.8262 cv
21.1172 68.8906 li
21.0723 69.1875 20.9414 69.4561 20.7246 69.6963 cv
20.5088 69.9375 20.2383 70.0576 19.9121 70.0576 cv
19.5596 70.0576 19.2568 69.9199 19.0049 69.6455 cv
18.7539 69.3701 18.6279 69 18.6279 68.5352 cv
18.6279 68.0322 18.7568 67.6396 19.0146 67.3584 cv
19.2725 67.0771 19.5967 66.9365 19.9863 66.9365 cv
20.3164 66.9365 20.5869 67.0449 20.7988 67.2627 cv
21.0107 67.4795 21.1172 67.7705 21.1172 68.1348 cv
19.082 68.1348 li
cp
19.082 67.9502 mo
20.4453 67.9502 li
20.4346 67.7617 20.4121 67.6289 20.3779 67.5518 cv
20.3242 67.4326 20.2441 67.3379 20.1387 67.2695 cv
20.0322 67.2012 19.9209 67.167 19.8057 67.167 cv
19.6279 67.167 19.4688 67.2354 19.3281 67.374 cv
19.1875 67.5117 19.1055 67.7041 19.082 67.9502 cv
cp
f
25.9951 67.7412 mo
26.2969 67.8057 26.5234 67.9092 26.6729 68.0508 cv
26.8809 68.249 26.9844 68.4902 26.9844 68.7764 cv
26.9844 68.9932 26.916 69.2012 26.7793 69.4004 cv
26.6426 69.5986 26.4541 69.7441 26.2158 69.835 cv
25.9766 69.9268 25.6123 69.9717 25.1221 69.9717 cv
23.0664 69.9717 li
23.0664 69.8535 li
23.2295 69.8535 li
23.4102 69.8535 23.54 69.7959 23.6182 69.6807 cv
23.668 69.6055 23.6924 69.4453 23.6924 69.2012 cv
23.6924 66.376 li
23.6924 66.1064 23.6611 65.9365 23.5996 65.8652 cv
23.5166 65.7715 23.3926 65.7246 23.2295 65.7246 cv
23.0664 65.7246 li
23.0664 65.6055 li
24.9473 65.6055 li
25.2988 65.6055 25.5801 65.6318 25.792 65.6826 cv
26.1133 65.7598 26.3584 65.8965 26.5273 66.0928 cv
26.6963 66.2891 26.7803 66.5146 26.7803 66.7705 cv
26.7803 66.9893 26.7148 67.1846 26.582 67.3574 cv
26.4492 67.5303 26.2539 67.6582 25.9951 67.7412 cv
cp
24.3105 67.5635 mo
24.3906 67.5781 24.4805 67.5889 24.583 67.5967 cv
24.6846 67.6045 24.7959 67.6074 24.918 67.6074 cv
25.2314 67.6074 25.4658 67.5742 25.624 67.5068 cv
25.7813 67.4395 25.9014 67.3369 25.9844 67.1973 cv
26.0674 67.0586 26.1094 66.9072 26.1094 66.7432 cv
26.1094 66.4883 26.0049 66.2715 25.7979 66.0928 cv
25.5898 65.9131 25.2871 65.8232 24.8887 65.8232 cv
24.6748 65.8232 24.4824 65.8467 24.3105 65.8936 cv
24.3105 67.5635 li
cp
24.3105 69.6543 mo
24.5605 69.7129 24.8066 69.7412 25.0498 69.7412 cv
25.4395 69.7412 25.7363 69.6543 25.9404 69.4795 cv
26.1445 69.3047 26.2471 69.0889 26.2471 68.832 cv
26.2471 68.6621 26.2002 68.5 26.1055 68.3428 cv
26.0098 68.1865 25.8594 68.0635 25.6514 67.9736 cv
25.4434 67.8838 25.1865 67.8389 24.8799 67.8389 cv
24.7471 67.8389 24.6338 67.8408 24.5391 67.8447 cv
24.4453 67.8496 24.3691 67.8564 24.3105 67.8672 cv
24.3105 69.6543 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
40.0625 114.699 mo
60.917 114.699 li
63.3408 114.699 65.3066 116.665 65.3066 119.09 cv
65.3066 125.127 li
65.3066 127.551 63.3408 129.517 60.917 129.517 cv
40.0625 129.517 li
37.6377 129.517 35.6719 127.551 35.6719 125.127 cv
35.6719 119.09 li
35.6719 116.665 37.6377 114.699 40.0625 114.699 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
40.3369 114.974 mo
61.1914 114.974 li
63.3408 114.699 65.3066 116.665 65.5811 119.364 cv
65.5811 125.401 li
65.3066 127.551 63.3408 129.517 61.1914 129.791 cv
40.3369 129.791 li
37.6377 129.517 35.6719 127.551 35.9463 125.401 cv
35.9463 119.364 li
35.6719 116.665 37.6377 114.699 40.3369 114.974 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
40.2314 121.966 mo
42.2529 121.966 li
42.2529 120.708 li
42.2529 120.486 42.2393 120.34 42.2109 120.27 cv
42.1895 120.217 42.1445 120.171 42.0752 120.132 cv
41.9834 120.081 41.8848 120.056 41.7822 120.056 cv
41.627 120.056 li
41.627 119.938 li
43.498 119.938 li
43.498 120.056 li
43.3428 120.056 li
43.2393 120.056 43.1416 120.08 43.0488 120.129 cv
42.9805 120.163 42.9336 120.215 42.9092 120.284 cv
42.8848 120.354 42.8721 120.494 42.8721 120.708 cv
42.8721 123.533 li
42.8721 123.753 42.8857 123.899 42.9141 123.97 cv
42.9355 124.023 42.9795 124.069 43.0459 124.107 cv
43.1406 124.159 43.2393 124.185 43.3428 124.185 cv
43.498 124.185 li
43.498 124.304 li
41.627 124.304 li
41.627 124.185 li
41.7822 124.185 li
41.9609 124.185 42.0908 124.133 42.1719 124.027 cv
42.2256 123.959 42.2529 123.794 42.2529 123.533 cv
42.2529 122.202 li
40.2314 122.202 li
40.2314 123.533 li
40.2314 123.753 40.2451 123.899 40.2725 123.97 cv
40.2939 124.023 40.3389 124.069 40.4072 124.107 cv
40.5 124.159 40.5967 124.185 40.6992 124.185 cv
40.8564 124.185 li
40.8564 124.304 li
38.9863 124.304 li
38.9863 124.185 li
39.1416 124.185 li
39.3223 124.185 39.4531 124.133 39.5352 124.027 cv
39.5859 123.959 39.6123 123.794 39.6123 123.533 cv
39.6123 120.708 li
39.6123 120.486 39.5977 120.34 39.5703 120.27 cv
39.5488 120.217 39.5049 120.171 39.4375 120.132 cv
39.3438 120.081 39.2441 120.056 39.1416 120.056 cv
38.9863 120.056 li
38.9863 119.938 li
40.8564 119.938 li
40.8564 120.056 li
40.6992 120.056 li
40.5967 120.056 40.5 120.08 40.4072 120.129 cv
40.3408 120.163 40.2949 120.215 40.2695 120.284 cv
40.2441 120.354 40.2314 120.494 40.2314 120.708 cv
40.2314 121.966 li
cp
f
45.2852 121.268 mo
45.7314 121.268 46.0898 121.437 46.3604 121.775 cv
46.5898 122.064 46.7051 122.396 46.7051 122.771 cv
46.7051 123.035 46.6416 123.303 46.5146 123.572 cv
46.3887 123.843 46.2139 124.046 45.9922 124.184 cv
45.7695 124.32 45.5225 124.389 45.25 124.389 cv
44.8057 124.389 44.4531 124.212 44.1914 123.858 cv
43.9707 123.561 43.8594 123.227 43.8594 122.855 cv
43.8594 122.586 43.9268 122.317 44.0605 122.05 cv
44.1953 121.783 44.3711 121.586 44.5908 121.459 cv
44.8096 121.331 45.041 121.268 45.2852 121.268 cv
cp
45.1855 121.479 mo
45.0723 121.479 44.958 121.512 44.8438 121.579 cv
44.7285 121.646 44.6357 121.765 44.5654 121.934 cv
44.4941 122.103 44.459 122.32 44.459 122.586 cv
44.459 123.014 44.5439 123.383 44.7148 123.693 cv
44.8848 124.003 45.1094 124.158 45.3887 124.158 cv
45.5967 124.158 45.7676 124.073 45.9023 123.901 cv
46.0381 123.73 46.1055 123.437 46.1055 123.019 cv
46.1055 122.497 45.9932 122.086 45.7676 121.786 cv
45.6152 121.581 45.4219 121.479 45.1855 121.479 cv
cp
f
49.7148 121.353 mo
49.7148 123.145 li
49.7148 123.48 49.7227 123.686 49.7383 123.761 cv
49.7549 123.836 49.7803 123.889 49.8154 123.918 cv
49.8506 123.948 49.8916 123.963 49.9385 123.963 cv
50.0049 123.963 50.0801 123.944 50.1631 123.908 cv
50.208 124.026 li
49.3262 124.389 li
49.1807 124.389 li
49.1807 123.771 li
48.9277 124.043 48.7354 124.214 48.6025 124.284 cv
48.4697 124.354 48.3291 124.389 48.1816 124.389 cv
48.0166 124.389 47.873 124.341 47.752 124.246 cv
47.6309 124.15 47.5469 124.027 47.5 123.878 cv
47.4531 123.728 47.4287 123.516 47.4287 123.241 cv
47.4287 121.926 li
47.4287 121.786 47.4141 121.689 47.3838 121.636 cv
47.3535 121.582 47.3096 121.541 47.25 121.512 cv
47.1904 121.482 47.084 121.47 46.9287 121.472 cv
46.9287 121.353 li
47.9629 121.353 li
47.9629 123.33 li
47.9629 123.604 48.0107 123.785 48.1055 123.871 cv
48.2012 123.957 48.3164 124 48.4512 124 cv
48.543 124 48.6475 123.972 48.7646 123.913 cv
48.8818 123.855 49.0205 123.744 49.1807 123.581 cv
49.1807 121.913 li
49.1807 121.743 49.1504 121.628 49.0889 121.568 cv
49.0273 121.508 48.9004 121.476 48.707 121.472 cv
48.707 121.353 li
49.7148 121.353 li
cp
f
52.3223 121.268 mo
52.3223 122.269 li
52.2168 122.269 li
52.1357 121.955 52.0313 121.741 51.9043 121.628 cv
51.7773 121.515 51.6152 121.458 51.4189 121.458 cv
51.2695 121.458 51.1494 121.498 51.0576 121.577 cv
50.9658 121.656 50.9199 121.744 50.9199 121.841 cv
50.9199 121.96 50.9531 122.063 51.0215 122.148 cv
51.0869 122.236 51.2207 122.33 51.4248 122.429 cv
51.8936 122.656 li
52.3291 122.868 52.5459 123.148 52.5459 123.495 cv
52.5459 123.763 52.4453 123.979 52.2422 124.143 cv
52.04 124.307 51.8135 124.389 51.5625 124.389 cv
51.3828 124.389 51.1768 124.357 50.9453 124.295 cv
50.875 124.274 50.8164 124.264 50.7715 124.264 cv
50.7227 124.264 50.6836 124.29 50.6563 124.343 cv
50.5508 124.343 li
50.5508 123.289 li
50.6563 123.289 li
50.7158 123.59 50.8311 123.816 51 123.969 cv
51.1699 124.122 51.3594 124.198 51.5703 124.198 cv
51.7178 124.198 51.8389 124.154 51.9316 124.068 cv
52.0254 123.981 52.0723 123.877 52.0723 123.755 cv
52.0723 123.607 52.0195 123.483 51.915 123.383 cv
51.8105 123.282 51.6025 123.155 51.292 123.002 cv
50.9805 122.849 50.7773 122.709 50.6816 122.585 cv
50.5859 122.463 50.5371 122.308 50.5371 122.121 cv
50.5371 121.878 50.6201 121.676 50.7861 121.513 cv
50.9521 121.349 51.167 121.268 51.4307 121.268 cv
51.5459 121.268 51.6855 121.293 51.8506 121.343 cv
51.96 121.376 52.0332 121.393 52.0693 121.393 cv
52.1035 121.393 52.1299 121.385 52.1494 121.369 cv
52.1689 121.354 52.1914 121.32 52.2168 121.268 cv
52.3223 121.268 li
cp
f
53.4746 122.466 mo
53.4727 122.901 53.5791 123.243 53.793 123.49 cv
54.0078 123.738 54.2598 123.862 54.5488 123.862 cv
54.7422 123.862 54.9092 123.81 55.0518 123.704 cv
55.1953 123.6 55.3145 123.417 55.4111 123.157 cv
55.5098 123.222 li
55.4648 123.519 55.334 123.787 55.1182 124.028 cv
54.9014 124.269 54.6309 124.389 54.3047 124.389 cv
53.9521 124.389 53.6494 124.251 53.3975 123.977 cv
53.1465 123.701 53.0205 123.331 53.0205 122.867 cv
53.0205 122.363 53.1494 121.972 53.4072 121.689 cv
53.665 121.408 53.9893 121.268 54.3789 121.268 cv
54.709 121.268 54.9795 121.376 55.1914 121.594 cv
55.4033 121.811 55.5098 122.102 55.5098 122.466 cv
53.4746 122.466 li
cp
53.4746 122.281 mo
54.8379 122.281 li
54.8271 122.093 54.8047 121.96 54.7705 121.884 cv
54.7168 121.764 54.6367 121.669 54.5313 121.601 cv
54.4248 121.532 54.3135 121.498 54.1982 121.498 cv
54.0205 121.498 53.8613 121.567 53.7207 121.705 cv
53.5801 121.843 53.498 122.035 53.4746 122.281 cv
cp
f
57.459 124.304 mo
57.459 124.185 li
57.623 124.185 li
57.8066 124.185 57.9375 124.126 58.0137 124.008 cv
58.0615 123.938 58.085 123.779 58.085 123.533 cv
58.085 120.708 li
58.085 120.436 58.0547 120.266 57.9951 120.197 cv
57.9111 120.103 57.7871 120.056 57.623 120.056 cv
57.459 120.056 li
57.459 119.938 li
59.2344 119.938 li
59.8857 119.938 60.3818 120.011 60.7217 120.159 cv
61.0615 120.308 61.334 120.555 61.541 120.899 cv
61.748 121.245 61.8516 121.645 61.8516 122.098 cv
61.8516 122.705 61.667 123.213 61.2988 123.621 cv
60.8848 124.076 60.2549 124.304 59.4082 124.304 cv
57.459 124.304 li
cp
58.7041 123.982 mo
58.9756 124.043 59.2031 124.073 59.3877 124.073 cv
59.8838 124.073 60.2959 123.898 60.623 123.549 cv
60.9502 123.199 61.1143 122.725 61.1143 122.127 cv
61.1143 121.524 60.9502 121.049 60.623 120.702 cv
60.2959 120.354 59.875 120.181 59.3613 120.181 cv
59.1689 120.181 58.9502 120.212 58.7041 120.274 cv
58.7041 123.982 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
99.332 149.273 mo
120.187 149.273 li
122.611 149.273 124.577 151.239 124.577 153.664 cv
124.577 159.701 li
124.577 162.126 122.611 164.092 120.187 164.092 cv
99.332 164.092 li
96.9082 164.092 94.9424 162.126 94.9424 159.701 cv
94.9424 153.664 li
94.9424 151.239 96.9082 149.273 99.332 149.273 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.6074 149.548 mo
120.461 149.548 li
122.611 149.273 124.577 151.239 124.852 153.938 cv
124.852 159.976 li
124.577 162.126 122.611 164.092 120.461 164.366 cv
99.6074 164.366 li
96.9082 164.092 94.9424 162.126 95.2168 159.976 cv
95.2168 153.938 li
94.9424 151.239 96.9082 149.273 99.6074 149.548 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
100.048 156.54 mo
102.07 156.54 li
102.07 155.282 li
102.07 155.061 102.056 154.914 102.028 154.844 cv
102.007 154.791 101.961 154.745 101.893 154.707 cv
101.8 154.655 101.702 154.63 101.599 154.63 cv
101.444 154.63 li
101.444 154.512 li
103.314 154.512 li
103.314 154.63 li
103.16 154.63 li
103.057 154.63 102.959 154.654 102.866 154.703 cv
102.798 154.737 102.751 154.789 102.726 154.858 cv
102.701 154.928 102.689 155.069 102.689 155.282 cv
102.689 158.107 li
102.689 158.328 102.703 158.474 102.73 158.544 cv
102.752 158.598 102.797 158.644 102.863 158.682 cv
102.958 158.733 103.057 158.759 103.16 158.759 cv
103.314 158.759 li
103.314 158.878 li
101.444 158.878 li
101.444 158.759 li
101.599 158.759 li
101.777 158.759 101.907 158.707 101.989 158.602 cv
102.043 158.533 102.07 158.368 102.07 158.107 cv
102.07 156.777 li
100.048 156.777 li
100.048 158.107 li
100.048 158.328 100.063 158.474 100.09 158.544 cv
100.111 158.598 100.156 158.644 100.225 158.682 cv
100.316 158.733 100.414 158.759 100.517 158.759 cv
100.674 158.759 li
100.674 158.878 li
98.8037 158.878 li
98.8037 158.759 li
98.958 158.759 li
99.1387 158.759 99.2695 158.707 99.3516 158.602 cv
99.4033 158.533 99.4287 158.368 99.4287 158.107 cv
99.4287 155.282 li
99.4287 155.061 99.415 154.914 99.3877 154.844 cv
99.3652 154.791 99.3213 154.745 99.2549 154.707 cv
99.1602 154.655 99.0615 154.63 98.958 154.63 cv
98.8037 154.63 li
98.8037 154.512 li
100.674 154.512 li
100.674 154.63 li
100.517 154.63 li
100.414 154.63 100.316 154.654 100.225 154.703 cv
100.158 154.737 100.112 154.789 100.087 154.858 cv
100.061 154.928 100.048 155.069 100.048 155.282 cv
100.048 156.54 li
cp
f
105.103 155.842 mo
105.549 155.842 105.907 156.011 106.178 156.35 cv
106.407 156.639 106.521 156.972 106.521 157.347 cv
106.521 157.61 106.459 157.877 106.332 158.146 cv
106.205 158.417 106.031 158.62 105.809 158.758 cv
105.587 158.895 105.34 158.963 105.067 158.963 cv
104.623 158.963 104.271 158.786 104.008 158.433 cv
103.787 158.135 103.677 157.801 103.677 157.43 cv
103.677 157.16 103.744 156.892 103.878 156.625 cv
104.012 156.357 104.188 156.16 104.407 156.033 cv
104.626 155.905 104.858 155.842 105.103 155.842 cv
cp
105.003 156.053 mo
104.89 156.053 104.775 156.086 104.66 156.153 cv
104.546 156.221 104.453 156.339 104.382 156.509 cv
104.312 156.678 104.276 156.895 104.276 157.16 cv
104.276 157.588 104.361 157.957 104.531 158.268 cv
104.702 158.578 104.927 158.732 105.205 158.732 cv
105.413 158.732 105.585 158.647 105.72 158.477 cv
105.855 158.305 105.923 158.011 105.923 157.594 cv
105.923 157.071 105.81 156.66 105.585 156.36 cv
105.433 156.155 105.238 156.053 105.003 156.053 cv
cp
f
109.531 155.928 mo
109.531 157.719 li
109.531 158.055 109.539 158.26 109.556 158.335 cv
109.571 158.41 109.598 158.463 109.633 158.492 cv
109.668 158.522 109.709 158.537 109.756 158.537 cv
109.822 158.537 109.897 158.519 109.98 158.482 cv
110.025 158.602 li
109.143 158.963 li
108.998 158.963 li
108.998 158.346 li
108.745 158.617 108.553 158.788 108.419 158.858 cv
108.286 158.929 108.146 158.963 107.998 158.963 cv
107.833 158.963 107.69 158.916 107.569 158.82 cv
107.448 158.725 107.364 158.603 107.316 158.452 cv
107.27 158.302 107.246 158.09 107.246 157.815 cv
107.246 156.5 li
107.246 156.36 107.231 156.264 107.201 156.21 cv
107.171 156.156 107.126 156.115 107.067 156.086 cv
107.008 156.058 106.9 156.044 106.746 156.046 cv
106.746 155.928 li
107.779 155.928 li
107.779 157.904 li
107.779 158.18 107.827 158.359 107.923 158.446 cv
108.018 158.532 108.133 158.575 108.269 158.575 cv
108.36 158.575 108.465 158.546 108.582 158.487 cv
108.698 158.43 108.837 158.319 108.998 158.155 cv
108.998 156.487 li
108.998 156.317 108.968 156.202 108.906 156.143 cv
108.845 156.082 108.718 156.051 108.523 156.046 cv
108.523 155.928 li
109.531 155.928 li
cp
f
112.14 155.842 mo
112.14 156.843 li
112.034 156.843 li
111.953 156.529 111.849 156.315 111.722 156.202 cv
111.595 156.089 111.433 156.033 111.236 156.033 cv
111.087 156.033 110.966 156.072 110.874 156.151 cv
110.782 156.23 110.736 156.318 110.736 156.415 cv
110.736 156.535 110.771 156.638 110.838 156.724 cv
110.903 156.811 111.038 156.904 111.241 157.003 cv
111.711 157.23 li
112.146 157.443 112.363 157.723 112.363 158.069 cv
112.363 158.338 112.262 158.554 112.06 158.718 cv
111.857 158.882 111.63 158.963 111.38 158.963 cv
111.199 158.963 110.994 158.932 110.763 158.869 cv
110.691 158.849 110.634 158.838 110.589 158.838 cv
110.54 158.838 110.501 158.864 110.474 158.917 cv
110.368 158.917 li
110.368 157.863 li
110.474 157.863 li
110.533 158.164 110.648 158.391 110.817 158.544 cv
110.987 158.696 111.177 158.772 111.387 158.772 cv
111.535 158.772 111.655 158.729 111.749 158.643 cv
111.843 158.556 111.889 158.451 111.889 158.329 cv
111.889 158.182 111.837 158.058 111.732 157.957 cv
111.628 157.856 111.42 157.729 111.109 157.576 cv
110.798 157.423 110.595 157.284 110.498 157.159 cv
110.402 157.037 110.354 156.882 110.354 156.695 cv
110.354 156.453 110.438 156.25 110.604 156.087 cv
110.77 155.924 110.984 155.842 111.247 155.842 cv
111.363 155.842 111.503 155.867 111.668 155.918 cv
111.777 155.95 111.85 155.967 111.887 155.967 cv
111.921 155.967 111.947 155.959 111.967 155.943 cv
111.986 155.929 112.008 155.895 112.034 155.842 cv
112.14 155.842 li
cp
f
113.292 157.04 mo
113.29 157.476 113.396 157.817 113.61 158.065 cv
113.824 158.313 114.076 158.437 114.366 158.437 cv
114.559 158.437 114.727 158.384 114.869 158.279 cv
115.012 158.174 115.132 157.991 115.228 157.731 cv
115.327 157.796 li
115.281 158.093 115.151 158.361 114.935 158.603 cv
114.719 158.843 114.447 158.963 114.122 158.963 cv
113.769 158.963 113.467 158.826 113.215 158.551 cv
112.963 158.275 112.838 157.905 112.838 157.441 cv
112.838 156.938 112.967 156.546 113.225 156.264 cv
113.482 155.982 113.807 155.842 114.196 155.842 cv
114.525 155.842 114.797 155.95 115.009 156.168 cv
115.221 156.386 115.327 156.676 115.327 157.04 cv
113.292 157.04 li
cp
113.292 156.855 mo
114.655 156.855 li
114.645 156.668 114.622 156.535 114.588 156.458 cv
114.534 156.338 114.454 156.243 114.348 156.175 cv
114.242 156.106 114.131 156.072 114.016 156.072 cv
113.837 156.072 113.678 156.142 113.538 156.279 cv
113.397 156.418 113.315 156.609 113.292 156.855 cv
cp
f
118.514 154.749 mo
118.514 156.461 li
119.305 156.461 li
119.488 156.461 119.622 156.421 119.707 156.342 cv
119.793 156.263 119.85 156.103 119.877 155.861 cv
119.996 155.861 li
119.996 157.344 li
119.877 157.344 li
119.875 157.174 119.854 157.05 119.811 156.97 cv
119.769 156.891 119.711 156.831 119.636 156.791 cv
119.562 156.751 119.451 156.73 119.305 156.73 cv
118.514 156.73 li
118.514 158.107 li
118.514 158.328 118.528 158.474 118.556 158.544 cv
118.577 158.598 118.622 158.644 118.689 158.682 cv
118.783 158.733 118.881 158.759 118.983 158.759 cv
119.14 158.759 li
119.14 158.878 li
117.27 158.878 li
117.27 158.759 li
117.424 158.759 li
117.604 158.759 117.736 158.707 117.817 158.602 cv
117.869 158.533 117.896 158.368 117.896 158.107 cv
117.896 155.282 li
117.896 155.062 117.881 154.916 117.854 154.845 cv
117.832 154.792 117.788 154.746 117.721 154.707 cv
117.629 154.655 117.529 154.63 117.424 154.63 cv
117.27 154.63 li
117.27 154.512 li
120.51 154.512 li
120.556 155.473 li
120.443 155.473 li
120.388 155.269 120.323 155.118 120.249 155.021 cv
120.175 154.926 120.084 154.856 119.977 154.813 cv
119.868 154.771 119.7 154.749 119.474 154.749 cv
118.514 154.749 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
153.664 75.1855 mo
174.519 75.1855 li
176.942 75.1855 178.908 77.1514 178.908 79.5762 cv
178.908 85.6133 li
178.908 88.0371 176.942 90.0029 174.519 90.0029 cv
153.664 90.0029 li
151.239 90.0029 149.273 88.0371 149.273 85.6133 cv
149.273 79.5762 li
149.273 77.1514 151.239 75.1855 153.664 75.1855 cv
0 0 0 0 cmyk
f
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
153.938 75.46 mo
174.793 75.46 li
176.942 75.1855 178.908 77.1514 179.183 79.8506 cv
179.183 85.8877 li
178.908 88.0371 176.942 90.0029 174.793 90.2773 cv
153.938 90.2773 li
151.239 90.0029 149.273 88.0371 149.548 85.8877 cv
149.548 79.8506 li
149.273 77.1514 151.239 75.1855 153.938 75.46 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
153.833 82.4521 mo
155.854 82.4521 li
155.854 81.1943 li
155.854 80.9727 155.841 80.8262 155.813 80.7559 cv
155.791 80.7031 155.746 80.6572 155.677 80.6191 cv
155.585 80.5674 155.487 80.542 155.384 80.542 cv
155.229 80.542 li
155.229 80.4238 li
157.1 80.4238 li
157.1 80.542 li
156.944 80.542 li
156.841 80.542 156.743 80.5664 156.651 80.6152 cv
156.582 80.6494 156.535 80.7012 156.511 80.7705 cv
156.486 80.8398 156.474 80.9805 156.474 81.1943 cv
156.474 84.0195 li
156.474 84.2402 156.487 84.3857 156.516 84.4561 cv
156.537 84.5098 156.581 84.5557 156.647 84.5938 cv
156.742 84.6455 156.841 84.6709 156.944 84.6709 cv
157.1 84.6709 li
157.1 84.79 li
155.229 84.79 li
155.229 84.6709 li
155.384 84.6709 li
155.563 84.6709 155.692 84.6191 155.773 84.5137 cv
155.827 84.4453 155.854 84.2803 155.854 84.0195 cv
155.854 82.6885 li
153.833 82.6885 li
153.833 84.0195 li
153.833 84.2402 153.847 84.3857 153.874 84.4561 cv
153.896 84.5098 153.94 84.5557 154.009 84.5938 cv
154.102 84.6455 154.198 84.6709 154.301 84.6709 cv
154.458 84.6709 li
154.458 84.79 li
152.588 84.79 li
152.588 84.6709 li
152.743 84.6709 li
152.924 84.6709 153.055 84.6191 153.137 84.5137 cv
153.188 84.4453 153.214 84.2803 153.214 84.0195 cv
153.214 81.1943 li
153.214 80.9727 153.199 80.8262 153.172 80.7559 cv
153.15 80.7031 153.106 80.6572 153.039 80.6191 cv
152.945 80.5674 152.846 80.542 152.743 80.542 cv
152.588 80.542 li
152.588 80.4238 li
154.458 80.4238 li
154.458 80.542 li
154.301 80.542 li
154.198 80.542 154.102 80.5664 154.009 80.6152 cv
153.942 80.6494 153.896 80.7012 153.871 80.7705 cv
153.846 80.8398 153.833 80.9805 153.833 81.1943 cv
153.833 82.4521 li
cp
f
158.887 81.7539 mo
159.333 81.7539 159.691 81.9229 159.962 82.2617 cv
160.191 82.5508 160.307 82.8828 160.307 83.2578 cv
160.307 83.5215 160.243 83.7891 160.116 84.0586 cv
159.99 84.3291 159.815 84.5322 159.594 84.6699 cv
159.371 84.8066 159.124 84.875 158.852 84.875 cv
158.407 84.875 158.055 84.6982 157.793 84.3447 cv
157.572 84.0469 157.461 83.7129 157.461 83.3418 cv
157.461 83.0723 157.528 82.8037 157.662 82.5371 cv
157.797 82.2695 157.973 82.0723 158.192 81.9453 cv
158.411 81.8174 158.643 81.7539 158.887 81.7539 cv
cp
158.787 81.9648 mo
158.674 81.9648 158.56 81.998 158.445 82.0654 cv
158.33 82.1328 158.237 82.251 158.167 82.4199 cv
158.096 82.5898 158.061 82.8066 158.061 83.0723 cv
158.061 83.5 158.146 83.8691 158.316 84.1797 cv
158.486 84.4893 158.711 84.6445 158.99 84.6445 cv
159.198 84.6445 159.369 84.5596 159.505 84.3877 cv
159.64 84.2168 159.707 83.9229 159.707 83.5049 cv
159.707 82.9834 159.595 82.5723 159.369 82.2725 cv
159.217 82.0674 159.023 81.9648 158.787 81.9648 cv
cp
f
163.316 81.8398 mo
163.316 83.6309 li
163.316 83.9668 163.324 84.1719 163.34 84.2471 cv
163.356 84.3223 163.382 84.375 163.417 84.4043 cv
163.452 84.4346 163.493 84.4492 163.54 84.4492 cv
163.606 84.4492 163.682 84.4307 163.765 84.3945 cv
163.81 84.5127 li
162.928 84.875 li
162.782 84.875 li
162.782 84.2578 li
162.529 84.5293 162.337 84.7002 162.204 84.7705 cv
162.071 84.8398 161.931 84.875 161.783 84.875 cv
161.618 84.875 161.475 84.8281 161.354 84.7324 cv
161.232 84.6367 161.148 84.5137 161.102 84.3643 cv
161.055 84.2139 161.031 84.002 161.031 83.7275 cv
161.031 82.4121 li
161.031 82.2725 161.016 82.1758 160.985 82.1221 cv
160.955 82.0684 160.911 82.0273 160.852 81.998 cv
160.792 81.9688 160.686 81.9561 160.53 81.958 cv
160.53 81.8398 li
161.564 81.8398 li
161.564 83.8164 li
161.564 84.0908 161.612 84.2715 161.707 84.3574 cv
161.803 84.4434 161.918 84.4863 162.053 84.4863 cv
162.145 84.4863 162.249 84.458 162.366 84.3994 cv
162.483 84.3418 162.622 84.2314 162.782 84.0674 cv
162.782 82.3994 li
162.782 82.2295 162.752 82.1143 162.69 82.0547 cv
162.629 81.9941 162.502 81.9619 162.309 81.958 cv
162.309 81.8398 li
163.316 81.8398 li
cp
f
165.924 81.7539 mo
165.924 82.7549 li
165.818 82.7549 li
165.737 82.4414 165.633 82.2275 165.506 82.1143 cv
165.379 82.001 165.217 81.9443 165.021 81.9443 cv
164.871 81.9443 164.751 81.9844 164.659 82.0635 cv
164.567 82.1426 164.521 82.2305 164.521 82.3271 cv
164.521 82.4473 164.555 82.5498 164.623 82.6348 cv
164.688 82.7227 164.822 82.8164 165.026 82.915 cv
165.495 83.1426 li
165.931 83.3545 166.147 83.6348 166.147 83.9814 cv
166.147 84.25 166.047 84.4658 165.844 84.6299 cv
165.642 84.793 165.415 84.875 165.164 84.875 cv
164.984 84.875 164.778 84.8438 164.547 84.7813 cv
164.477 84.7607 164.418 84.75 164.373 84.75 cv
164.324 84.75 164.285 84.7764 164.258 84.8291 cv
164.152 84.8291 li
164.152 83.7754 li
164.258 83.7754 li
164.317 84.0762 164.433 84.3027 164.602 84.4561 cv
164.771 84.6084 164.961 84.6846 165.172 84.6846 cv
165.319 84.6846 165.44 84.6406 165.533 84.5547 cv
165.627 84.4678 165.674 84.3633 165.674 84.2412 cv
165.674 84.0938 165.621 83.9697 165.517 83.8691 cv
165.412 83.7686 165.204 83.6416 164.894 83.4883 cv
164.582 83.335 164.379 83.1963 164.283 83.0713 cv
164.188 82.9492 164.139 82.7939 164.139 82.6074 cv
164.139 82.3652 164.222 82.1621 164.388 81.999 cv
164.554 81.835 164.769 81.7539 165.032 81.7539 cv
165.147 81.7539 165.288 81.7793 165.452 81.8291 cv
165.562 81.8623 165.635 81.8789 165.671 81.8789 cv
165.705 81.8789 165.731 81.8711 165.751 81.8555 cv
165.771 81.8408 165.793 81.8066 165.818 81.7539 cv
165.924 81.7539 li
cp
f
167.076 82.9521 mo
167.074 83.3877 167.181 83.7295 167.395 83.9766 cv
167.609 84.2246 167.861 84.3486 168.15 84.3486 cv
168.344 84.3486 168.512 84.2959 168.654 84.1904 cv
168.797 84.0859 168.916 83.9033 169.013 83.6436 cv
169.111 83.708 li
169.066 84.0049 168.936 84.2734 168.72 84.5146 cv
168.503 84.7549 168.232 84.875 167.906 84.875 cv
167.554 84.875 167.251 84.7383 166.999 84.4629 cv
166.748 84.1875 166.622 83.8174 166.622 83.3535 cv
166.622 82.8496 166.751 82.458 167.009 82.1758 cv
167.267 81.8945 167.591 81.7539 167.98 81.7539 cv
168.311 81.7539 168.581 81.8623 168.793 82.0801 cv
169.005 82.2969 169.111 82.5879 169.111 82.9521 cv
167.076 82.9521 li
cp
167.076 82.7676 mo
168.439 82.7676 li
168.429 82.5791 168.406 82.4473 168.372 82.3701 cv
168.318 82.25 168.238 82.1553 168.133 82.0869 cv
168.026 82.0186 167.915 81.9844 167.8 81.9844 cv
167.622 81.9844 167.463 82.0537 167.322 82.1914 cv
167.182 82.3291 167.1 82.5215 167.076 82.7676 cv
cp
f
172.306 82.4521 mo
174.327 82.4521 li
174.327 81.1943 li
174.327 80.9727 174.313 80.8262 174.285 80.7559 cv
174.264 80.7031 174.219 80.6572 174.149 80.6191 cv
174.058 80.5674 173.959 80.542 173.856 80.542 cv
173.701 80.542 li
173.701 80.4238 li
175.572 80.4238 li
175.572 80.542 li
175.417 80.542 li
175.313 80.542 175.216 80.5664 175.123 80.6152 cv
175.055 80.6494 175.008 80.7012 174.983 80.7705 cv
174.959 80.8398 174.946 80.9805 174.946 81.1943 cv
174.946 84.0195 li
174.946 84.2402 174.96 84.3857 174.988 84.4561 cv
175.01 84.5098 175.054 84.5557 175.12 84.5938 cv
175.215 84.6455 175.313 84.6709 175.417 84.6709 cv
175.572 84.6709 li
175.572 84.79 li
173.701 84.79 li
173.701 84.6709 li
173.856 84.6709 li
174.035 84.6709 174.165 84.6191 174.246 84.5137 cv
174.3 84.4453 174.327 84.2803 174.327 84.0195 cv
174.327 82.6885 li
172.306 82.6885 li
172.306 84.0195 li
172.306 84.2402 172.319 84.3857 172.347 84.4561 cv
172.368 84.5098 172.413 84.5557 172.481 84.5938 cv
172.574 84.6455 172.671 84.6709 172.773 84.6709 cv
172.931 84.6709 li
172.931 84.79 li
171.061 84.79 li
171.061 84.6709 li
171.216 84.6709 li
171.396 84.6709 171.527 84.6191 171.609 84.5137 cv
171.66 84.4453 171.687 84.2803 171.687 84.0195 cv
171.687 81.1943 li
171.687 80.9727 171.672 80.8262 171.645 80.7559 cv
171.623 80.7031 171.579 80.6572 171.512 80.6191 cv
171.418 80.5674 171.318 80.542 171.216 80.542 cv
171.061 80.542 li
171.061 80.4238 li
172.931 80.4238 li
172.931 80.542 li
172.773 80.542 li
172.671 80.542 172.574 80.5664 172.481 80.6152 cv
172.415 80.6494 172.369 80.7012 172.344 80.7705 cv
172.318 80.8398 172.306 80.9805 172.306 81.1943 cv
172.306 82.4521 li
cp
f
gsave
0 165.188 mo
180.006 165.188 li
180.006 0 li
0 0 li
0 165.188 li
cp
clp
.5488 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
77.1064 21.1289 mo
30.458 56.8008 li
.746 .676 .668 .898 cmyk
@
26.6035 59.5664 mo
31.0898 58.2031 li
29.0869 55.5889 li
26.6035 59.5664 li
cp
f
0 lc
0 lj
26.6035 59.5664 mo
31.0889 58.2031 li
29.0869 55.5889 li
26.6035 59.5664 li
cp
@
1 lc
1 lj
21.1289 75.46 mo
43.0801 110.034 li
@
45.085 113.588 mo
44.1162 109 li
41.3389 110.769 li
45.085 113.588 li
cp
f
0 lc
0 lj
45.085 113.588 mo
44.1162 109 li
41.3389 110.769 li
45.085 113.588 li
cp
@
1 lc
1 lj
50.7637 129.791 mo
50.7637 143.512 li
@
50.4893 147.956 mo
52.1357 143.566 li
48.8428 143.566 li
50.4893 147.956 li
cp
f
0 lc
0 lj
50.4893 147.956 mo
52.1357 143.566 li
48.8428 143.566 li
50.4893 147.956 li
cp
@
1 lc
1 lj
65.5811 156.683 mo
89.1797 157.231 li
@
93.625 156.849 mo
89.2412 155.186 li
89.2285 158.479 li
93.625 156.849 li
cp
f
0 lc
0 lj
93.625 156.849 mo
89.2412 155.186 li
89.2285 158.479 li
93.625 156.849 li
cp
@
1 lc
1 lj
110.034 148.999 mo
110.034 125.401 li
@
109.76 120.956 mo
108.113 125.347 li
111.406 125.347 li
109.76 120.956 li
cp
f
0 lc
0 lj
109.76 120.956 mo
108.113 125.347 li
111.406 125.347 li
109.76 120.956 li
cp
@
1 lc
1 lj
155.585 74.9111 mo
137.475 59.5449 li
@
134.035 56.2959 mo
136.256 60.4268 li
138.424 57.9482 li
134.035 56.2959 li
cp
f
0 lc
0 lj
134.035 56.2959 mo
136.256 60.4268 li
138.424 57.9482 li
134.035 56.2959 li
cp
@
1 lc
1 lj
104.546 104.547 mo
98.5098 94.668 li
@
95.6729 91.0996 mo
96.7383 95.665 li
99.4775 93.8389 li
95.6729 91.0996 li
cp
f
0 lc
0 lj
95.6729 91.0996 mo
96.7383 95.665 li
99.4775 93.8389 li
95.6729 91.0996 li
cp
@
1 lc
1 lj
105.095 82.5947 mo
143.511 82.5947 li
@
147.956 82.5947 mo
143.565 80.9482 li
143.565 84.2412 li
147.956 82.5947 li
cp
f
0 lc
0 lj
147.956 82.5947 mo
143.565 80.9482 li
143.565 84.2412 li
147.956 82.5947 li
cp
@
1 lc
1 lj
117.718 40.3369 mo
103.448 24.9707 li
@
100.121 21.8174 mo
101.914 26.1504 li
104.32 23.9043 li
100.121 21.8174 li
cp
f
0 lc
0 lj
100.121 21.8174 mo
101.914 26.1504 li
104.32 23.9043 li
100.121 21.8174 li
cp
@
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (008x010.eps)%%CreationDate: 27/05/15 10:00 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^CuYMdK/4i6kF@M@%_"0#_"0\[rn(^fPtL=B2r.1Ak5Aodg6q9H:p$$UV,AV=Ui^phq:his2VpB^s'85H%ZCY#A/ZIH9;DY.;3kbK;>3kt,A8U(cTjUpQCl=N9ZBD$98^4KGVJ<*k]jgU+pUf#?*k.WB[8*XHX>en)V.AQR8gAUXGpcB;adZJI%hY^/iZX.qU8u2&?qG[3r?7Rthhj&(WQEq2(A`[XtpTn0hr;D)D[?jEo2Ls=*>3/2.e4$Bkmg.ca][hS5[:<*KXh+*u*d?Onq*_ui%e[f&7&V>j5O=VC,m"ku\./SMfm^2]eg$,pqh9T]n+iBab2d>1)p(r![,6&UfOu."ZT:OTJ>P1Ut7VSYjHBqCUVP!:#<g%P;.;=kK%ZB<Wg-t2\,\YQ;)oi_1<;KBBMWRfcoTmXJ!pA$qKbHe!:&q8i(e),JRIF7iV''rQtfgqiiB!kYeNB-Hol]l\F"&a^IM$;0TmIseN%%!o8Z$[lAS>.b"o"T+J!CMfjg1iUsE29q\X'[&p4[ur*&%\]LH=\8Cd(eCU$XD1L_ZMTLO67l"=YM:BjF%cf(W;ZPkfiYPCMi*O)%\CLS[\jL-\8IIa2r`MnhBCgV/.-Yf^>AGq2#u;9Ggj14pHZ4]KS:;).CK*J(_.88LX%5g?@'`FlTi%n5/#6$0;ojdm2nAa.(Ka<S%s/@Jq)?tTC2LH8I*3-%.=&n4YWkq\7`M_fQ]T$hI#*^kOpgk:=atTKQ@?esJ:>:LY[LHea)n6(N67LZD;Xb,ZTi@]cV$[BNZVZ0"%K`[JfQf2YhC`)Yb\I?g-AUF_;7XPdiC_<;VS,Bfhp^99Z'_D\qTbR-UpCs5cO5L\o5`ah:qTUI?mm<Z)'7N6.i"Kil3ap:[,PZq@%_d@p\T:eoS-FOG]TO70pA]eS7naQY(OiBp\U_8(7S(Mf#*cX^*Y][aONtF$rs$8*t++-CL3.fduI"ijMJ"[SKO,ktm"lG%5_'f/4%hVn7I-XmPspk2Pl5PW/o6nUd:@f+Lrk5iAgo+)p!`"/gWV3#Sb0%b6`*\^*sY[+>uNu+,?s$7Od*Tp,[*P@BF`i%0Jpk2Pdhp=T`%$,-e>:^26489<)=EsF.L/Kf7Y*p1,P\IC5_:-i4Eo7E#PdN,S[WaiY32o(rE#k&_l%]+F9=?F6Xcga6<*+pU=1QFKD#&>X9s,_`d%foGMHdX8L71Q0`(jaH3-cM&sk_:pRQnX8g*18hE>%Y,.h,eWMBKB(,Ejm?NjpnfT8oKW,/;Gh'+.1/7Ys5JO$]&5gI0E.;/lT.Af%^\FF8ic"QErb#C/gTl(Y(AfbWa!^:^r,6WiJ%L4#^I5Y87#:^Vs!sB(\,.!APFVYLT#93s-]T_Vk.gC=l(=[b1qd,s3p*QWAJXkm%q%r@8+q<GP77/_pc(_?pGg(Y*b?=<EH(VMShrK0qX=LYQ"^jCi1eZn4)5*.Q=QYGejM/cCK9^"d6#!D*rioe7J+*b_j*.EI(;,2X%GZn_J@.0`l8H[1ZL&P+5S3AG.@UWc)pa3G/Ih<L'BPB)25rasUAc.H2L8A"uD>qK*18UdKQYDQ07@6^^Rkh+R-s?J9qkdn]4bl5l%msqtG>elN>OPYp7%V7&SoF7I^V]F>!9B0NNB7E']W).Q'Zn:d%MXBu+8,mY0L*MQQ$FT2W@YuBIoM=5k($ITEgA%hmq^fqPZ=6-0%"A6\M1al=SG03i'YrAn(jE"H;hI(C/qBI4,Qeg>FD*a56C3c44Ac>peE'!2/LCQb`j?O`W5Y`mI("mkua&WMj)*?ZkDc!p;3DbSn%a&$bfR'':K%*"Y+$.]C;b%fVJ[c+i!G&^Jt/goS@e(?LiJ'#G,c>U,W@-caqk'Z)O/>3iAju=DShAIu%Y3I?o5KB&6(spBMj>Ag`%NfI"FF/4b9R!e%!9odFoD5ZhKS7<sOFIPi<qBl,,Y3#5KOJd"YA$;-eD>KL<2(pn/WI]3@2[u+bWl4a>FCtd&FXDYB>&jNaDs7bf%'W5f1<grV"^)<0e'^)ITnd_@^UB_(mV7aTF.ciq^"8QL`ks\2p-=Td-VIfPHd4G3LZUM\O=\tPL6Om`TANITJ?O=7MC=>)G4kc58%Vlj"]&sft&5l:t7qDRG<OG'p^B8]gOhl&As3L=,,1fc8XgLa:),@!"qZ/VOTQ(9r%Muq39XoVd5`VIR)$6TFmacQuY[Ke$(l6kLE%5/Zjrnf,$@b?gT(j]W73&iCs7cLh2#+e7T*"sT0e%X7_;=5?`?<N]V<-H/9N^c\N5X,bDGA=IK-k?&u&V"ZO`2%H=$<9C:eQ1k32%[M@Jl>@_H#>8Qe4ON.snhcN)l06;E]B,WG^s3'RBk?N4a_qopYCfX/gCn[#\dGEFLCei0V4XG(X<`C&WO7faAC.Q>Z>dF!diL&(t%EMh/FOh[#g\7FYULuDufm;E?>4)`cg093duC+5Lq]c>0H'8d1O1MkA6FZAZkn:.esO=h.dEFrq5\PrWJ6-B^_e<R_Q_L%*ojNsUM%bGk,NeWma!KfQmNrrl_MAN*.QOG?dJ0rgAi92)r'fV-9C<9"t8/HNf0V'^Z#1tN5W^[SZSrELk:g5W8JEr.G';C5V*MSsIQq:2=7%L4"Z(kqbdL.T7)-"gZ=DNf>2DQ3t'.3j[=K,7FMg:J'E2lMlWe/m;ek_5/*Z'uiTp2Pf47/$![s*;,Bdb2dT+81(@%854gemf?$@%e3k^Se!m9\WFV:(V9*QmDARP5@9/n.&H[na79sr09+aZgG9jM!:?SsuaCMk5=IMK6)>R,a;1;?dV`St=i%e++LQ]dR:St_[*G=3U%IL\SX)RhQ6N8siSF>QT<8iK33nifYrhR4p:23lo>?3t8<m:UKsKCA<<&JJcYE67&57&%AQ)Hg,RF'aaR+QKD?c&J$BBGIcIA%4>E%X0K4Zah,9I,DA"3b:i?rckkcORd>tC\#u,&l1rT*9]$8$B;9,H@!aMZNsaOkb]](Q4c!YQgF;S`5c5BWQY6;"TZ6+0\gE=[^h"M6%Om<YBh^\%"a9HQ!FY8jp<!P57cos)j3&@bRd[75=EVaaij@VSS,kIMP?H[Bu(k7d;,^9%$[IZs]3fi>'PAB6/3hEe/^8Rr$qbE%Q%jF,Bc:nIDcS3M&9R7Z23@AB:#pf%%_-GD'VD+25;o11\c+ot_&eY*bf]-RQ]=gZk\7+!!b@lY1El%^Hb*r_=%8o!->=0/'8Y#g6P%g3-jq?TEVjbT]KdVDrPqh2sEESC^Hk7bQh<Q:Y$\#P:ES\Qb:l*[.9ig%?3OQQ)&QmWO*/g/L7'qaKG1Fu?d(hbPG+H(8*gWd"A+%3]gn3rdicgoB:Y,^1X$FM;'bZ<9?"RV6]G[mul^0gV)]JDY5tiBs2C8>2=c^7O02':pa/H%;+!dK,mpD.i3K$M2qk-rCkWHDfNNZ%N.PHl6:?s]G&BNreKrf.7_fuS\h*QFfs%KT'>-)c7h8mpM0\-?dU3`/RHDRkkX,[<Nn\VVLB^m\/j*f0dGj`18TAf/%Za2kG,)*B%\-@,O76sruj\*MA%;m`KR8M7:U`@tk3)7/`E/o3UT'#dDHiN3<8#1f?4e@fDZSBn)7MXL%nQV^_%?'ct^)DCSDUt<GprrP/T:FHC%^F`^DVSA`5S##[h"'1m)L\-GrFBnhlO1*cehptQ_XdPR$=.:kNjE\B.8r=pU?N/G\]:%_2"1[76IQtHPCur!gM6*X\YI&(:Hq7S@%5Pa49D\m2-c1\XD3^QK!^M<FR9;pEm<#X<J<MeO:?hJEPd\sO:'^jJ`s7mIV;B[l;lZQ\k.]p*?/OD/f$8(7Q+JODU-q6RhmRM<(%?>EM%:>P]oM`ATMf6?oqq\%W)c1Z)=,C/-^et$QhO.=oAQpRME^S?cuqEj5@JHY7TM&#NhP](dGFfgbRi@U.Hs5r#CQ$WE#]j5?#%I(feB&FeIh$(h[D=FYh82!^d)DjR(!aDn'4rHta!cMm6RCYr!s!B&^t)cab2<4]Wm2SWJ#odkC^;/+QoS_]>^/U?JXW':k#/BZVa%`G"4GitL':ec!*dlQgLtNTP^/oLEpN0mcEd?fecRIE3[TLR%=3EZpQ,qtt>oY-9*JngGZdrCgSZgM)9.D;%YP/QG^>qJYq7Q[JTr%5lXEu;XtrUpE1c_"FPWdJ1XULeO0ndhJsg.,OLZ/'LU:p(Vd\T4Kd1LK^gK,a"N:R9l,>Y-df9.mJ&PY]]h8ilPbG0qkQ98DEWE@%"bmmF=i*\M=A[9B`PA8n+#'L2L+D.]LDp+?a+'<3KO:@T5`JD5Du*[1k'"h@=jiJ'F@oHMT%pM+hL@'E7+a>#TKj8`Gr_;I,ZBH2%E87U=C2K\Zc>3II-;2n8DWTudrn75h$hMML2dsF+X5p8J_.Tc9St=L_Zmn._o\46]G*Ag=154GSs$K:-l0cg6G@p:RC=UYfDrC`$%mR?1-[94e<gBN9SYUaNk*1;!bj_b^`*@k,0$J7qe.ZI2](_2PW^Q\-RcYBcWq*-a71IBEg]`,*(oC].U:k(telRQ]t>@^(08NktG%onqLhOP2li^FJ&CnccBM[>(>nmeU>kOS"Wpf^'k:9tJXIr86shK+qF@O+u,ki9,SilG'ENc2'%Vmf)$O:NQ>T]7OkY`SeAZX],UN%NK/NO*!1Uig7K*H,;Qd"Ifg>`a)Un3Ur'EAk4Rc@?6uq3Q1;s3TcfbOmE_-V/g._j+8,3t?V?pskT5gis2tK`]1ZIhiLTs]c;$;Z%:TqO(DY&38Up,BUo"R6p]FV]n5p%ZV'sDt;%m0gBc9WNfiiqI)>X8-\fG,,n5?baJ;R%kSqa`%,U6cb_7*3uZrVP2[2SuE^J$<i2%qgXb:#*9#gk/e7"8D_()hZ!+r9ETJ'T<J9e:k,hsB?f?-CQ2pLr@@d+j8$D;3[n%PeGm"^HB=*_]5MVX4Ks<:DuL73c$qpXh2f95%OtA+58\4jRlOcLu[oXZZchEM"k-f*i=kU+QIp'6?p:^ENBm,>Y\6jUK@ObL[*ch;N?dc@=%fAta/^[;m0A!Vl;`J8R?3ifP=pBR!%Q$2nu=_Us$YE4j&cZMZTXO&^o-2HO/6f4VTDT3R*Y3OsljZtAEDq?rlqGuo)+<.>W3[K']WDI=,<U$#65pOcnn^/1oC0:i/\G=hA%T%<2ibu:,qT\O1@S"3?"JNd'R>,+JIcCaq9_+lB(OCcg2f9W&j:Qfa:\BHPE_f`rE:9.^sqk2C:_?ZrL)+i;aFTGd*,0e%@-bKRr%_Qc0Kqj<SB8Vn5,RB"(Pd&L'u:mcY(<a22!V^k<'mn/@XJe'@LagR7PSQ<)_H`p?IF;[9WPKa&MRne'gb@'->_E=c>55GC9qm)R(%MINA]9"m:dbSH8M2ZKeb>7^dHLs?W;MeI/tfR;k*b.mU1B?n\(]0fC<:RTQc'Nnqu#]#'SHMdo/I*4rJ$:1QbgT>r`C<95[h>H7V%64'X_g_$JnI=&)G[KnH-$M7[\e_UV@]M=gErbAp3K\jtn[\-l:4fiUr<j*<qH0pW9E4L#&fk_bD]le(=c3U+/\+X1c\0M4-`M.4l%)iK3.B#nAp<9fag/!j,!D93AWZ0=e82&'WcRO`Z6eKQJ*j`2oBY#Lgu.^)T,5J/CB9.[+nVI>4d:J3bToI]>$?.1A]N+$EtJR`gQ%Z=Ba2Fr^`%;=kQI8h;KH1_7V=E8HoZ@a\WYm'T`(>r#-K"t\Hqq[O`s=_W8,5026N`NTF7/u_+b@T<D4&r:`<VOG7,diP0>o4CX?%5E$pan]T8(-a!iJFXu9OoNQD[#CfHE76?KDmD%c/G,Gk"r`@B[YK[:'.CN!mWldeIR_\P/3Q3btGU#k,Co!c$22jN'DB7TMNK"("%&Qe=8\q\N]3!=kUQ<5&2<sWQ7;B(EsY.W?VNV@bV_R(])d\/5MoK&)e/5;,E"`?JP2NX)[\g6rs^BTUKJ(5t=#Ot-jm%mF'A?TZX%"I=4AD^8HgSJ*0@Bi.1a/d%]Kc$$Kqm5<gb\\i%2o2ntm]";^(r;#5RSM^"/pP,Bu'9"MG:6ppdP5Cns@4)@tb+_PUIY5i::"Usd%5,650_\#a>9YIQOV>:Kh5cn_Lq.fT^6=5V(MUPN#aq:s"c:$Ed&%Qq7EirW4CV>4IARF`1>.+2"QMp4##Sf;WB?**Ti]F@$=`-_f%]-"G(-F@rijQlQt?X=,d=-/NOk&B['Th4BD2-E,s3mF^KnpYcFlmO;5L1W%f98Y!/pR,?+Uo3J>gLn28M;C1:h&d1CMmTPP:);I=%(hV1?ddiYmUZqWa37^6H\7sQOTJRG^D7oQk;JX'//t83t2EHY:r3qr.oJgm*!mOd=[nhQM^D^FJiF>.\J,p`tT\1GDY`&KIA6Z.2%?ruY;-&L(b0L(1^[f%LH4h.0*3"KPM((Pidi0-LGJaes=KSR>+#Fp6CMls69K7?kb7M[2TldD'.a>2X,Yrgs2Pb<&Vg3^fp[M)R&%jV&mTlX1"X[D-JLn4MOUh/)9K`G`*YMcB#Ep05u\hkA"oWF,jl)h]P$i=(Ad7PA6fDnDTQN7-No.sBT,0m%f7Bt1)XZ&V[d^cFr!%#O<4<4]hsT-Q:ofWO/Ff)p5RB*IHa49T->/mmPpC70k/T\_W2U8T%$8@Tc,1m;TK,"r^]JSI"N$TB6NL&)H\Hb:d`/-m%(HH+Wt,%jXMq/)lVIq2&T$@%W"u.6OJkm$68ooFu9Z$Vg>2)r@;Kj#\lZ10!W%a?FN0G:Wdcc?Q2kZ!R%k8YC?pWQsd!Vi-ob&qj.-Cf>mT3%Il`ZH+5S]I^IX7d7\b<$pojA<D#Y"VI"mo%[_[QtoVo(Oc8n80(H@m>\h)IhX_'N7Zm6r'iS0-=@BN#Q/Pq$C=R"b>MG[?W)1sJ?%Vq_YaB90's>3gRM2u6CWeS8a]k0YSHJ3k>PDbMm]fRMlq',M?-.Wa_%CpE\',Zlr"noqCl-<e+=8&15<h=7bG?rMjqqLgXp4W6mN%c03#r5*E&3U5h"o=4#JcQDT<M're(b_;a<E[Qnh(MH"Sl,sq$_63F_=SSju5DmcV(9g^YdZr8SHc(lmabdt#F)WN-2.(-KrjZ*qs%/C483+i>GFdqdP#2<sqIX&7'c*ck4f1=$=U_*Rc4muDUQX"V"VN3I5X7XU"bjk2I#<CH0fp[6_3d0/UKT=[ijBGll#0;;3o!>1^n%":bdC8lB&t,cBWOM%g_8E"O'6^]7iJoC^c\.\cGJc31;GY1KHHEE\Ar<['0Rj(et8<$o9.%gi5-*siJ%f+VKa(MXWPV;8*OU"Vg1%\_DL_'H_lfA`!df7%S]a-%&t2;(=-Q5>9V"jXFXN*&!5,%#q-rjI#j]cuhB'>5Y_%-SYJGr6P(LeR)l`YstQKIH%@!=7(OZO&&*+%]QZ?%H^WJ[.IuW:!6m2V#3Gr9QH0)3KYW8^T+uNm/A5-fAqX@NfCW]sIf8g`-fsJ$(?X45\gi)+[$?h$eTl,nI%q4<eb/P%B(=.&%qV%N'?*+guUmj7)WA;57C4)g4lLnt-0fO0B8>kV%^/e."_co41nF9'k4hkQ,o=mq2WJ,uj@VSb$:o)n3bq*^<:DGW4>"@fs&EJ^U%gA94gR_!44Q>p\fhl\LoQ^d-&.TP<&de6VAO@Zk8CTB,aL">5N`h)!hZaNr<ZK:5NG$/S;hb(lBo$)H*28Au;cfNCUCIOd4XD<Ju%fXZ009.aC4m\CW#74U7qRQZ:0=TBtK(7qOP.eEI9:M%,,T?t!)fJRO)<6AofVbYFfERpK>F?Pb@OtAR1X#Cr[FgKa]`,G"]r=2,g%8/f#;1AsWAc1ZSI:<T[7f'iOj<bg>7C,X\K[M!<9pZD:*!4M/jFo%s`<kI.tDEhZh#Cr`X4[NoSmej1FTe+HNf47Lr,GEM?$_uoD%RRm=EePF\uG$(Ncm>%>%77a2-(ZVm.W!"tM7_`G=a^KVRf'IMX/%EulM<W=0<3m=hB`%Na4#QmjFa?h&`GlKYQ-.PO8k>_sjHR(M%Ad:8ph:tZbo?EJl7MG%37(K^i55IB$%I1"$2;-aqD00B6?TSN<mm[-Q<S<'q1PCs=#X!+'VY0?cGu8ANN9\j@)JetiB#Zd,g:=ao%Vi?k]ohofLKittAH"]EI^/1EIoJX;QUgI*YF+K<7/tO/>2JVC2c=UabM6sHh19+lBG*_8P_2TM*O4s9Ir^'GVSXHl)3N1=nRP_'p%A7d`8>=![k;8&+7[WEA=kX>7&S3$ULNe/17aq#"og*k$QIp\2WoN1(G&CtM`g0/a8$uU/[b0SRLbo:#b9THNmP7-]XY;_BG^.GY[%W3+odUS[jkZDZ+)'kuQ1PbHL8Sjp2)9fc2dC!s*9o(R;,m^<bVW%i"8<QgG3N>A@C\Hgm@-trjSh>(4-psVDh%;bZQGt&6[FK]kb%8g02N/P9YOR0h;6?siZ:CPR,CRG#AF04u3lToGXlS1s3n2@?RjB"+SZ^",epU\eg&U:db:)Vf"AG9XEAbGVJ!0%KiMI6Earf(Y'<%N?50dSfUZK*Wd:/3;VA!2+h(]c2P9$X6#F4mk*dt;dTrNo^GZBqoH4q^dar>(5Y]pm;"e32P1=jo]AIiI=CVh2JO6b:8Bch(/(IN%V'"D>d:07XqL(,k=JINa`]%Te\,2FNg8Hd52S8ADl+ZdP\!2Y;(O@p_e"<7#H<T0R3[`1T[f)r)e!s`UNHWq:I6C::7A%Cc2fIat%Y97(`G:qHEctJ_'9)9`(V4C'3f0\*@kkt#FKRo,cbBo/=7eMgrQ?N$s)c`f%$@CW!Va0fS?5h1ljR6kG?Ya]]h+d_,YPr0KP;Tpn%P4ar]U02h,8+fo`4;g?K6JoMEIV^XIc[AT-:?:leYbrRNHi4.3AWi[AhVrXugLL_ik6l"toM<a(4Z+edM<!FfZM[K;*u!7_FQdf;%G\?8)oVn\2SN_fnrMVj(\5.Me1FD_9o^-GXg\^T%FX?tMbL,'bcr3OkA+F<mojp5GD/4KEHf^uS:Z#c5CgZ!7o:O3UfMd')aoD!E%pT21[(@_7-37"_NJ>ZK5QWu$<l$[PceU?.=Z01bS3>MDaTC-]747qdhV6Y@ZoTW5>ql@C')"olPm`DaUqK,fdeuhB4^,B<Cp;8=;%SXSEGT*p'Nare:G6D*ZqlP":u`UYHh.^Ki[[_=>Y<p+_"QY)S4:Zp&"3pZ-H+hQa+Q.tKJ>BBV5kB,"p9s&JX39]W'mDb:`Pdk=W%B389+.tA'bF'!=O1XS'15Nrc_RF7W-caT!>gpM'VkPOE^5-b/=V\Y/f"o,SOU<]>3CRdD;-t-5)Q.&G[2qo"gbj+^Bdfshre.?DZ%.STBgDfg/YCF79&gk""C+`?B60?@\`mZ84A<h/k1F.]Kd)'[f^9&T+gHA&]Ykkp>/IM1)-0faO,Wo&YZhea.Ym;6O36j<OO6Q;<5%DhhskNO&?]$M--RYL$r_CfEKc&fS.f2p[.HX4,O]DPNcEO4pS+pJi;df7'U2ms(U3F\ed#S'XV2Gup9(7[Z,/I0Z[RWfOsR4$86S%HLh^)dtr*8oB:U@?`EK*g*l_++2Nr>Up<:G;I>A@]0?s$?ttgW2@B0!\S"TO2K,19A"uhYXhnrJ41Z]'Hi3h[oIX]Lr]HLLO$j9f%;H!O&I)k<e-L(,MIU7h$\J+^_p=gPR+l^97gSViAOQC;2a^k.bgumbHK);h(R]W/;=.dL5#Z92WR?a'L5Cs6nm-Uc:'SePml`Nds%<i#pNX5)_K&6LHZfuLrqP;PT7B\n8t%I)S]$]B6RAQ7l1k!!P![.A;&odj4dlc:M]KN>P"mQU*BF-J><aj4[?k'lJQFjT:F"mSj]%O$#"Ucpr@q=&5aY#I*8h5ErnKSKO.0Bnk-dmgNX\K*>gu?.s9C2SMF&-+`[:]=I);4db="_,/aP(fU#"&7PX=)#^3OIE1f8Gd%'9%E74".>\O/Qn@])J5OcVON?F0ee&S/1M8cIrl_:jDH#E4L\R/ofR!j8-dJG/0f%0dq1u/i8.8NX4gEC3iGO?,R.@[g?mZ>BXMOobW%HC3P:pcOkT6`U\Y)Q!>%[R`Y]+8<]:X?0.1:C->/9+H57YZWA+i!6"tO7`-dmEMAL<f1?JGZN6p?=;B&I'_6=NBt.QY$[bB6k^KY%ASZ3&n3.:IV)TQp=1.)T1`QB7AhVP4/t4)0#[G2]!=*6MH6pdVAt#B:>mqUJKpGu3Rb@,LJK\QT<Z#8@:r;9WRe*SMG8sAT!MNm>%bJ(!H3)%!-]^p$D=63N+6*lS@'F11QQ&4haaH<!W(G=bPppag^@B0i#N'S`LChYPE5l#B9#8p8qLu$5n'tBXW-O%K3N_URi"O'DD%\m'`1X_kanJiZI_R69AgC>FeQNtiEb,kJ]:;V_]1EJ\e9n-S7A0<5b$&;45GNir#50<o-W\rhll5JCR$]*/o%p0+[a`>%'QWc!+D%ZsPC2OEFjJ)hCt4I5_;*UJlnA#YJRm!g*gKl("H*21G7`cfX[N/>@!1chKAl%6>Inietbn_6)bd;4'YraACPm@pGPc;(!d47]>Z#%g5-]+@X[US_'o$,*ZN'dM)GLU>+U]ZB"Q*'mB68=OJp,&Z&Z9uE<T-*jOiVf7k1ZO'0IeWlP!ctQ(-Ai;_]8'[/!M\L"4rYlE&0U%qf/SKKM<YmCu.iZO%>hLNh_n-A[6)M"Ik/#rImQ[7%b9H8phF.*0CLUO@[EgM:]0U$k]j![eijIT4^,*U,Ci;+`r.q@hmT3$h=aH%;:>tpT=Qm0&"T&g&C)W[G(AUGOV&4U"1ZmSLN^TKN"a\PKEk0][St.,Q93Uc(r.4'7qo9$^E6Y[4ET&#i[b.l714X:5m2_QIia*3%oPeD]U'Hn;@jqQG(E_7`g%'W9?pX937fO+c^*?bHb,'m=<r@23Y><G+5/R7?lI^pC1Vj0'(U8c20Z?DIJTA&O=PbL0:>&u7mhF[P%:[p[tbnF@iM3&:OSJX5MYj7$Sh),Qn5-^Z9mp3-q*Z?3l"D,K^2D[tW;"F(lY(hSCrbth]@pRsior;TRX"4&O3%2q&%t9`d4!\e9%DN@g=,4>'9$Oaj25-b<)Z+bnU([L[L!ohN2gQk)F,6i8n;;d9fGYRF^?edjm)Uj?MiWKqlS'lYd.31<R@aK#W,TVl(Ws3k)1/&:[%lPJ\WIu``f#'%BDq%_jb?-@nE/Wl&BQ1fMDjT5/3jlG!a?h4`WTp/X?KuWs5"i0t'=s$uLG]lA/_E@Y3oL%<;KJnjbMr`rD[O`t1%c%rtjTN;8^nTfN"cFX.o-6">lbrrf!?=0?#QQV(4G17EXQ&R<N$<?ao]g63b9UZfV'L#:bmS;s*(97#dE]gJCFX-_MNZm]pR"7Q2%TEQ93cNl$9DCrfa+'A,g<p![0%(.]sX].PH_8<;*hCR#*Y+[Y,Xbt,WHPPbqe\Td1TO/"j.G4aRpd.RJV`"d"Qk3_]/9=<R[*DaM%8"t.?jqE/bG?fto#da'MB3b:;F4V5'82OZVSl@U+M0@iM[,ES_LeGdRBT[A.N8#0p)BF6EBPc=IU*WteIQaI0^!_3Neq4_rB:X18%>i<ir%[bRpVX)=?U6)U$(i6%QNF$uK,4To(@cII[0#.t1k6`!@@gO<_beP,-2H^DuSf^Bo`n3VDn6"rS1,Z@;cgeT7#[_q<kql^R%%d?W5`s'K-\#j?]T`DKF%!s_'3*8>+>9J=$K^Da4p%5iF_dKf-HQ0N4)ekK4.uOaF"mmCidY=QIo6tOI@#NDg-P9])<[LQD[g3E'%nQfL]a1fTo]Xfe]a5UdMX15<T+s"WHpHO;bpHA)-N*7Dg\i,4fU30m,/Oo&_C#;Ep0j;oEp-$n<U^J2mIkY_art@7!HZUE#Xs1:4%;t!=5^]rHp#icPt%@:[:m_a(S@0H=rmS\CH7gt5Faq.cBS3tmoF5-"*a.M2>"'N2p/toWK3nEZc/%->7@SQClc6X@MCsX^DgSGZp%f+<77k2LAKs%"e3.OIXg:G/hSJmE,Flsc#b.V-Fo*lpoO2Qs0riHn)Tls0/A'tt"T*o?tHMs`hJhelYsXT.Q[S@'<7.Zmc0QM:*n%^r1r.)(V9u[Pm%abGR=c5#rE`,Mtn,^@cG5/<gk+ReVCP?ZG):qJ8kjBEWVscJ5>nEh2sS@cQMU%oHKRX,i?&=,NJ7k6u!2"s#iQ%?jo&;d2@%_oQYE?H5cHed%Rfd4bkXNK+>0ja,r`EF"JqqNd2BbkKlY1d'7E'O`T^f)g*q"K!GQ8ae=X<T]9[/N1**MSO)H$^5\FG%(S*hsEbl^UFFFh`h%(O=?9*6??*>^k[j0?-8Q[=dnP$Kc#;,dgiH[]89(Z^3%oNuf7I?^>0[h^V``0J^\`kP*`8k8s/Gebk^2s^g%Id`/sY31-HL8:"d`72E4*N>:eT8'g;k@*"nI:fN5ZdGa[FH$gZnG^oia2:\=qlp"t92%NO?6#nn_YQoDZC<dn'h7ip.-5h,,Jt(`%U!t`9'noV#dN#HbJ'&bmZ2P/9o'`V#39j!snV(l9bokD<5sg4Dr^^sdY]4CHXWRYTU,S!o,:C),m"??2fklhQ+JCfP$a!8m<DJ!H%0#H`mJ2#qd5m0+l&]6OWKk>#;oP%Lc>m/Jon!_LZo$`ZGj2p@SH#U5OGW9'[^^ZMjU,Yu4Bk?;>T61tk32<5jk1^PY7BC(@#b:Fh%+kOeN?WP>d-6[;7N%#bO:XTV,]DCW?q6Ie&NNOGqpjW*SU]L&]?D@$u-9XYqnC4h%Lct5^Nhc*:oJ%5<dY<in'e>uWcQ;i^FqI]_%]Fi?fF"m=_[G;+#W,4O[Ac7"8&j<-O?=j(5A>8SaY)5PWr>^glSTMcMA"ZqGRco89lZX%0+,]m"B/Zr3(;3qC[R7B6inC\#2Z]Ye%0dh=@NfVJOF&&In;oR?V*upl;7i=L^KBBVHDgZnJcJJH,2m=6CerA_VKiZSs4S2V2P;)I[d>+KQ,<\;dS3LY^rs1bZEBTnt\IU-,%EJ"[.oF,d!_YhPqEqE"a%9er%Yk^kGqTa.X1a$6Xrt7InpsbX?<U:4TAqjsppuid<aaMTuU=8-b;TCe=3%1],dgajj"5.0Gd$HK3%pcgjS)'<CM`M6AUn;biAmb+3@R:EetY^l$R3k<f2O:"6EM1LhoF#YWOD4l\YA;6X5-9ChEH]:A7)j/897V'5W6R+?04;JQlfc;gl%j-;=hhUHco1@!@eFuiCb,"=t4G8r]#8/8I@8/^2DrZ:kt,r4W],;P*8BkS_]A72h!rmA_OR#'gnSt,PRbq>*RkFHWJ\!1ikm)qb%%5OV3N@sP7b*bpqE/=o8'Y$]CKNlVX2]qCIIGGe&,YD"Bm=K/&j81-_KPHHL^NncL,mL"#b#S)R\Z1-t?gS%%8]Xj6O%;Y@IY+#I#%c%Z[+.XJR1XPJLoQr-aO75&@.1'lSm\^%remoW[^FZ:83r>-Q1b_I/8]Y7hFiBl.Z`gRDCXc/^-g-6Z3AtHttq/B*#KdS*_kj4Fn%I(025;MWJO$dKM-G<T8]BfV3$361;'5#igs5$[Gq84LaW$Q,3p[CL;?_g,$kkIEr)0C,i)[a?ns6+t6C*-,,]_a9Ycfr06A?-.TL%N3t%=?cJEN7.&hGX!fcsd(;SQW,-QZcbcVmF2>>V+X0^pIm%;`jFY&RTmlSuB9@d/#0D#H!O4q74G2`QkF7-<O7aBHR+(O[e:[Id%5h.f[Bui0cJ;>CK2Qj1(2_@&s8$g3dg2XdE51Xse/>iMY[U?@9,$(5u6YZq"5-`H%.(K-n#003;?jk@P!Y;[0gNOo^nC`Er*&3X[%k`'":lC#\d%`fHE\!IH]J$B:s--$3R=u[uV[5.7dQps,)7VZMo,qr^\=@VT+GVW1cJ&[V5$FPg;,8Kdg`fZAjoo,K)$FTXb;T"NG%m[q7:e`1"`2CsBcm(:N`3t2u.VVuZ>>V#ekgJLl-K!a2*;rL'`AZVkMmQ'cV*;<l?iIWL:mSp]`IcZBbE/E4<NKOY#ZQir#<4HVZ%:rocQM-=.%lpUW#DhE^mARt;C\j3aG[pkOla&o[!b$ppk't,L:F%S6fCo$Qr828F&_r5B&r>-8`$<s%leL&sqAVbYWksR,^`)dFn%Rat3Z=l4l"5ntV0+*_GR6LZ$/2?rf*bdF4,XnlVjWAn&Z/X>_&NQ:Vcg2UgOf:=@Tce$D\HC]?O[aa0TD]@lOL!At"Ts0s>K1cKq%>$MrAli%_PM`H'hYp/ba<`4/#2n)p;9?5nFU,UbBq=Wr:$pP,Zl5t*3PuKOjg$LgE_lbdmY3*Y/i_+GVh[Ii8K1iU&@?!H@B%UrP%g-VS6qokAg4&2RMA2h#5g:>a19E<!-ph$:ah;iBcU[p"ZhdICG`oQ3AnTu@H@<Zc/Q$;pBQ!r9,57_LnhoE35ql#6\f[Z^:#u@_A%)_E)eD$dqDT>4A7FnmJfd?>VP,1Df7:VSVJ?O@YKi0)9gC=M\GUWYqR/Dot79/>&.DZlH%I,^HAl[EspFdCa9YhM(uZ2aETSo+&=%e'7)>)i<3m1pIO1(SW6RpK7A^,8D.Dmr@cDpKS/TP?a4BMn3r!2ou4P6sN7MF6IpT3e_I6*,Ii50uf1t*Wn4hhR=X]OUJ1HZDPZs%)3tg0?8_jC9Q(FDOm7#>5SQhBhCfAMR5+gi?fZHbq6F#dEt+8Dfi?7H(f*%q&;L27K[I-jJo^+%mS"KYRk?,I`UDe+?T)1d/mYQB%-O7ek$X^(WB/X%_ZlF!Bh+1E/f\(@4c:7j^O-iZ)0bRS@STjL_,F^;6QS(hGN0[0Sj>SI+SkU#c9BWCiN\-`\)2=_f3kj?lI+`U-%\TD^/AmF#26).)Jemlt%$XOPgG;`_<8dPNjnRU)PNF1Vc`Zo'D"m+0$>=ueDdfia:(pL=FflSrMGXouTo2c)85;%g^gOoZ,/4MO'%I#<oH9c'$eLT>@RbbbcjV$k!dDj5(LTF-!d7RkY"'?K17QA"@Y%%g61A321:#Ek(:9c'$efB6Jf+gU?a7O[8TmNJq$`:!2$\p/[8%-okb6hh82G&"?90e04j[p&emTGu9H<!$a6s]aeGcMX-n*\48LNnWJ(l>uMUo(Q2,VU%?`OZA[f4G@+X[FYW=]l=/Y?d.b8c\2e?\%q&/WbfO=#Dlp_p0]dN)5>ik*B:`'lmDY(oZW\/18BC?SBiL.Q2kg\2cn==S8JQ2DFMSW,@q%=_J$ket7O(_hUmJ'$0lBL,ql2BK;%7rcCRK3WI6/sCM"Fti^cY+K/jmmi>Ljt:iD@\df-SG<e?d9Z)qV6Fb'#2>b4lns"$;Z_P(\f33e(3%N(s-k?%[ODW,boPE$OVcjL%(Q\E"Eu4RU\CTNXOZ@R_6;Dn#bKq1>pL7YK-"7eKXh@U*iA44USQj?tS4FI-o5K5nehiM,\>1<U(2%sS%+r7d/KBCUV8:u09=),+%-E^tp=kFaoKK?B$@,g8];')3snRiQPTrHEYD.B^BC`S$&rKeZ@`;8g)+(.#AW@ZV,jB0$f87cdaF@YdQViksLR?*!W1$S1p^RgR/%C2#7njb6@NR.Z,NU)N6e`,T$=amVe@CLZ\!J("P62rUhmY#>@pWW;oK+MT[,`X0I>N\L(]1_I<?mlVpG77T,KKQ&/;RCQXb*cge*%59%D1rA98Q'`Y_a!TtrN:1YQ5m71eX$ughBH#t$9Ogs9XIZF@j>39>M7#'neL7k,8Dp<u>`c4TN?7-P#`4NY1qq'l!L4``'f6^;&%A1GL4M%&uloY&`CE]hgtGJi8+q3?TfE5u,gT8$jdi==Hj_XFuRA/^3[E&V1ej,j()!B9,"4q2jV\/XD(]E*EEaIDb;Vr<.bgu7Wb%i?s?RWQ^tt&TYcp^KicQ'5OeG[l;9kA+r3_QoR=?DduGA^&RW[!\i^&CU%eLO3W,8(dhUjW?jY&Sh!u?+!2sE\"8`;-S?ut2V/A.%hi?=M7I<ql4MQ;YG+iOe0$X5KP6:OO`L;P5"!oZ*7cCut@?7,%AF(Qgk6Ai#g$n=D#$PnrWr187*f@p"g)MT#1FpB'Q<oG+@N6C)%bHJR=S&Q/-`:VOhe[)WJ_/`ea#>\g'\^fZ9@DHl>1f\9U__CF@^-[#8I<M-FE:;QVEa3NL=)8k'/:NWFc/;)jKqEF/1S3nRq+Z-E%b&K"DF.it$M0)O)@6(JRgFtrSU'IOO1Pc%10jOIo,![gjq^1q]L^;f.K8d;,eaqde>hI9f?54i']4]+Uq6T\Ck4?5O^24m#DVt,8%\Z3lT9b^Ipd(leT1&g!mL3L.V.Q6S6L[.W?hAhHI.doN:980ts?Tt!AQP?$GfD^2)P!^1Rb0jNsk+=@gAY*KT7.8ZqY]V%ZE&^^4%WSrhS:#94O)PrUhhnunoP'mkQLFj1%RWbcfkJMFSbiuR?f37iY3G)mTn*2'qBpm$]k:6JT5Is54+n4@2ECckEA6M&G5)87;4[h3=%2._$pMuTN`PKDR@7]gN'C8J\m;dZ<0n&"&@^!#n79;RQPG>tKul%8MdV-s;JXlb#mOCGmLeUeL17d529.3G<)U"E8L>B87>l1L%u%hmMAnf*&%t6A54]S.$0Sj!5eJT(/rf(#s2$N,ad/C342h:P9u9qZh!;idb76_GMccmV<J2DMak:e/<WeH*@b,'@;`J[43k'$M8Yg%SWJ9`FOk(,>5YJ/(gF'#Au51RUD\iZGZEad=._XhrNbj#maC*d70HLOqm6PtM.Ua&2[A'7'noP)P^&#[dYuhT`NTZYBu27#9)!+B%??&s`3QB:U=&ScfN!7*_H"E\tH/Q<,DAN+cKaDdL6R9km_TRudf?PI!4uUc=ET-GmdQ!Po+%nGr*-h`cXGkD)N'h7l0aKS:f+Q$D%`L'D?S4t7-"]ff%h,o\g/s"CMY*9/%#)C1n+lP&jc5J)B:au.Yq$0'.a;\(*IX4appp/WPD_I*@89Q"rb$"a#,!;iTrTpu.d1+g/%;VgW-h]=_?a\KD"JoT'r#g[CH3Z0f02=<a[I'\9\6pNIf8gsNn25X>Jn!YG+jV^)oYlCP$=I!jK9N5TNpDWeFbKWS3b'Ita*k%7q%l]i\peh<A&&;p-`\K$Q;I9%s*lK#[&+%if0FQ$&/G+]fI"T:)D(1>o;5gQMO3")r,LYs.;O#9+?(1>)'F1ca<X=V/s3IlNr?k9;I%TH!P*G=0?p!fWTN(jo(sgap7NoF005nZr5UjoEEjOX%.3j5p@8=ac4R!o-%WH@+bgPRmL:H4gbfJP5h8EcReRXa$3'ofJ">4I>W4%K\?0V0BMf]Qh1eoaqo(_nsD)l)^GbLr2"f?ZdeuB9DL\RllWj(0@3US9.(t$G,Epa59"@AHi4.1)f"#PrBq7JH`Q&NB1)L_oo%\>%fI,uFp:Yp;?(2j_T@3.PcA%4!Y@$1nTuM,V?hCIL"6<ODO:)Y^P;q(*IR+1MH`Ne-(:,`3)@j@/DjX5$_07DaB6"H)Y@$q(IO!`W%amSg@/T)I#?GG^*45.gome)LpY9.\<CB&YZioX=&G-@NN54iC0"EO&Ep\MFWHU3NAarVM_?GG]d%*M6^;n>'&eLsC^5M!MsdFp5@%0'IcYqSg41DrdG_cs-I'\rUc;Po"fih^C;-Xi6R]OXjH7h!<R!>)qWL^Zb;(N51L'Y@$q!!q@T^BnUj3H:[;2eLtrJKU&!Tp\I>9%l5,sF2#+b5dH4iOXL.MnG;<Ga[_.CR>Q"btq]Y_17@O=/p[J]4Y?sOH$iNPEn9b,.C[#m^?gN.<U2T^_=Q:>On"CM>WumU:A%:,D%qGt@!HB;hXI]qXZ=_VBhZ5.BOM^ujEh<R"g2'2Ku^GtuXNIJ'<oW<Rph8_J@o^UhZ2se5,hHKitqup`1%">Be:bZaZ'6Rd?lPJqb%drVY3E3EX@XaY]2fD*JWOgk/n2]%NsYMVUC2@Y)<T._54\"5JTI=-Z8ZQeku)a,(1h<HraSh#8n?V!/GD5^l)<CX^S0@&88UYkAR%*S9l=aYj"0IR34.Y-/S5`J1tU0A:9`S\q5[lPJrsqe,#pp\G%j/ET^K!UfW=kuWmiY@"BeK-T:>f4,YDDY8'S)=_#tB4(g[ob1)i%+6d+Hk_.SV5A)q;]me?Z2?Lie]%>8dQTmGiZjl'-f.VGiU!MsgZ1%@D^=<b?m2>k/5E8W\67f9r%t7PO/jMGPL+3GPiOt%gM!<XE%8'd$L'GeE;aZ&)NhNJe<\EMs#Ukp&.>$GhM17+DFXJo@+(44=b?,B.CURL-MntF)?h=%`*9'7EfeB2ZDrpF_tb$BLb=9S2o;H!g9%4'?:+OikAo[5>;iZ!/OhX$>5a(NZp@hjKnWT1s%sr@gJ3o=J_4mOM;&I!a_;ZBfu5dg&B-Vu"`kc(1hH[9)[eI%B*:[T!&%QM.t:%qK9&L4Zb@#50dr!qTn8>m;;,<T@&OG-I,E]''ZTrqT<re[Q`I@Gqsltm>Zj?R(>=`T:&Si[uBt6h9JdXpLEbhCYm[/kg7c%cF&T%%Zcc<krc'0Z]`26^YGa5r;L*>%;_#PqmRg^'oP(r9CsTOOeeOT+S]OC^V5(f\*BU6NkOYab`N-)ODbol0[m.EHkIq7hc.S;sX1k1l%dcK6^-Th?SdK2.KeoJb6mZ[QsQIBpNNW%ZU@Sq0-mWPM_D07<Cg!c#8b"V2Io()L%D5u"/O`?di[.iJ"H8S]V>gcoL*1H_0BPE7+%?gXLPEtVFIo(dQ7R]9?om'u:;fNZ)S6b7GGE$MD7SrC6Y\DNI*[3/)C)<o"Vn[;]7VUoGr*k"hINPe)*@O'K1g"j_lWlnt#o'<f-%[@obsZ8L4AlBg,sM0+4$8A1+2/q8,RG_,"Y4TAtZ1?6X>`q"SY9m`0*DXM`>HWO9Eo;0XrD>6T3HX+l`dd@/tokXCuRsIh-Xud#<%&Y?Sh8'^AP)?*@%V6OMs'=0uRRWC=SQO'+P(AYMP5^sCuG1S'*$X*I43EIg^#8X:^>FI2tUjpRogH.Lf_T^&!,0^_UbD;5GDT-lT%00\$\Irue`M@UcQRe%XL5%k\fKiVaCdFRFjj;/f]M6Mok(LHlU6%&1)<Lj@tHG?/d4gcGa8skdN(X";YqhHr<#e@&F"iru#<9`+j%cUpruEeIL:l#D7dn9AT.oD\1u'1^+?=^$JrKI8u[-0:il,*S';r4H)"'[8X\rLE@-[&ml9Z5GQF2`l*i81OjhR5K;3PbkL\S!Ie@%f,c_dKb'r+Zrsjb/]$1D4.cGKQ4f*(qNSS;Y9qekjp&#tk9ct\C+gjA>2s(7WK=l^?@FMSR!Yt5H+n8%g;$`In)b\7:RSgX-1cH]%aiELJF]k6eafS90!mpftq[:\3W":<$IM:?_:&tWRAFNf7ic:01,NM(Y_f)$Rl8GT1)s-%&AVY_5VsNk)WSh';,)^RB5q?:Y`-@j*%P0!u51\;9Y4$SY\.T;%$2C)WE`PL\j1iT_F+1uB:Wncl7?XD7TM_aY>Ha\IFN8)<\Y-Kgro\PtG.'JlB5<VTM>Lt7HO2[/ocglUl%^ER]0pFZ[f!oN*RT<g?][l]XI!UoHg8n#[)RP.Nc>\oARn*PGk/_rGE=BWDinpB!:UsE<8g'?(jC$>o0!Mni*_bkK`FL?Cu]:#Y-%iFi:&Ha=u/c\&$is17/,S@X*L1<eo)6D"Rel`YT(@@Pl0AFb.CA94@Va4!$EdVQ?jHN!]FWJ#qo-E_8&Bp=k_Zj]ZH-</cNT1ecD%<;]l$!P%'Hl90FQ;?Bsdg2aFV-;+S;hKmC4Hso,">;/]0Oecj*Ff"#LKVnQt]ij"ZqBIXaNFtcF&Lk3Cr/qj'knZX3D1`0&n>8s;%YZff'8c$UO:jW^JD=WKYWOTRgPXqJmg#:XT*#tKT>H;hXIu!W;Hst5XTc4Q%3*aDa[ouF4INFX_o5ZpT/j+XFCJ:sLSI0KQG#/'_%c,"uKh'_51=E%dnQ:!5`\@G`+)QCs>Xdto1c#1>;AnjU\+6(Vjb2H65iUUt9[@!FD:!K;(9Z,>ce7)`iK9'b^iS]#DQ"d]D;@BJe%).8@qQ\h.16KHea4=FNZ?9mbhr8X0&bHTT3UJuLkI;LfiEmG\k1T*2-oAr3C`LT)#2h1N_4$b2f3U8BrO))&_517[Zs(VTn)l(ft%B6h'_g:R@;BPt:tb"iE"PPM!JQ2UW+;4B&LSTIW+jjcpcbS6mg\krTfXklfNdm5Fs*j'd[S@C/C']5clP=oYapd.%@qW-rpdDun?%DR;upB:@`<""o2ei#+Z+J0!rpd"&[8L_raP.8,gb`Q%&fn]!p?>qYF=o)PS`/`5:b[EQ[F[]R2+c###hIlnIPVpFbIgM5ap#16_>%X8-q=(e!qEP/l-+T&rX.OXiQDL"M0"^uk&D4"-m%,[B/c>'b4's)_bM<;YJKR[lSjD'+8M)aF.'^:<e5fdRa'ng<t*[,NGF]Vf&*%PquQ[49%Il84QRI8H*RSY:lH>'=7BoSas>J"*L,QnfV64F?Da^dG%@SG<J^Af9b*d7GV5E=mXC,&RF?D0fh6L\WU.kC$gNih$99l%O$$N\KCCur/S$bqUn-7F81e#'O,7s.o3!HX[;g3tDbEoS*KZ`\Gk;)5G2H7HUE=9WO!80gCLm&jpJuL\:YkVAl.J&mLcsFHQ7u_f%*a,rAF*f)m*4NPqBQ.1goo$)<\bAk1GMgB<K,i6N,0V[;n0ILsB3X0%7X/`KYoZ92'2*%I/O$ZSV`+SMNL""[fI5RPK_F=!(n9$-%FI-+6PgqmT[Q--SbFs@Pd:.Y_CIB3gH9^+i)apj%1Zntf>\B)!N6i@KRor<+Y1q30I\A')jBk[mbJj."I5epf>acgb?MB"1DU4(W%Ds+7a;Z#G78?]cj:)/7/a%%)ZG'@]mq+s(%gQVJ;fq(7,(*7WH\!MU%f+o"`c)fL1<+a_E[X@U"I[F2s*fH;[d0Y8Z*HbsA4/Mc!%gQ2:.j]-Z<B",NGmo(=jch?UPWD]/+Q>W`:+7(g9@1:T/LB:Q`$Ls):*D`m![QHE9m"h9\(]cu$_W*d:-A[-8B23OYfpQD=1jYu4%Ze:To@OFB_+68FCh65:P2@OHPCIIg&SeC:M%EB=VSF0C5V7VN1gh8jaXa#%"%nc<#e/ke/)otq2mZhXa2,F'((Af8dj[=E65@JO,%qG2FsUj;R!kt2qOT;h;X&I1LOmQp]'+lG2,2f]<LOm]DQkTQS1I%ma7qNVtPJ`or:5(Vas++[e0rba>O*$<g$Go.L]@qCiPMTJ6^%F(Jpf]0\?qeilqnBDWXYmeU7=>JJ5lF`VgtIS/^ul"4q73*A,7Imh&i(BDgK!.d53]BU'=EV7Lg/LSudA?/PZr0h?T(UN6t-X*qS%'^Pe%Id*c`E$&n';@h,[,%4YR^0jW1?IJV$0gqrfdYj)RWu_ij(ps,#]rC">EGK@_Mb"TULN]3QQWPIqM?u^Q7L%AGK<oeH4iT0X%BZnUpN^)Yn9s-m1T]n=EG=1HD#WrmPh$>&0RU.5[YlU`ROHV2Ha+C2?OHU(HO55Wha1U/&l&,qg;[#L6LT1+(fo=L/>q;fgSuTEl%F!e<an`KosG_`M@Z4+R_UK$COc%6+a&sOWCU_\1A)`RONcHr1neIh7mbgH,,j!Km0GFW-p#YCZ-Q0:1ljTAVg*7e%/dRP?OS0Fol%AFq*VJ`C`Z^jd4O'KK"]I:KKKL]'YgHKb.V5TC<+GaL'I^?*9Emkrgap]k<5!UeEc:je3qWS-[tia[sK]6q>q>uR)cCesttTtX-\%Vh4eRqp4l%ftqCe/e_=.\9e;?=$DToZs_ilZ:]<HT2hJ^FUK;R6S2KMZ"sn&kNEsNrVPmJI/49F\Lb"&UB?u&l_eguq=BM/O"n<n%qQ9[[,2\\&0HMSE6/ur(mcUMGQ7kINe`Y*NHK@q]fhK5DHKNDAeER.n8QGT.#)RQu7Y?2(i9@Jpr@n94^^Ca;IrO?1Y_.E#7gGUq%45=E=Nt+9ZjnWNoSdtWoCOCaC]K>lfaapA-%XUbGd=J45%MAK@%6QH5]Bf(&rDW,*GhbUHm+mF[gVU?<64Ygm<g$\HCL?e*GF-&#%HWm1oB-Q4n9m,7hl<1+/%HH&SYpl\E=8&e%9r\oQ?Sq9g1CB]N0n'XX(!gTD'u)EB5Cs>*IB2]A4eT%/lHQfuSR-R/oO6VBN>N.s%esg6#($a)8>K%I\_%Mk9:$C^uh!nTtRSbitRjOpObfX.Nmh5*jR?\1aq3ba>YDIPWq!2f!XnF_Fct@[:O`QB*gr@lLKsCl-5kj+U%2r35:'&F%RKip<VQbQ<Z2uW5+]j/<3"@OWq_2\2pUKMeGY#ESM$+JBm2fJ,;=nsfL13Imr=!k:+f\,_Y9%bPhfP_*89d(sncJ:=L%=7fZDHd]mQV)uB28ni;iCo@CIdOV;0:'<03&co64&l.ei=6(J1MOcPY"SXMT81VluG=N,TI+M%DKG)*IJ\#hV43L/k=[2J=@&`2Q%L18E)`$+A<"?>VI_g$YeZfdEXq]S&kkJG7E3+'>m4Rl@sOGV5W01H*+<u1Vip#mNW%q\YP,1ap6M/Xio6gQ9*?6iOhW.=`0@MO-Q%clc?`/"i5UGio0h9ACBcBb4M?KB")U--_5s3E.s,'^C3_9dpjY)^':/6fNWZIn$!7^N-)'<A[biMY4)\<ohGcfc<)^BB_I__j<_j%+`c[`&nY2*9<jAa*&1*sP#EpE$5!Mm'eWRB&*Nf;<s(o6X-cQWWt>&H(ri.i\WZSr\11adN1^9F)*%A;Wc7`2g+Ju134Hmb]]Cn$%o1A'89aB:>#@G$/4;Q>F9FT#J4;M'g#`lsdo8Lb#_p.sM>fl1"=DnoUNt'VKOiN4C7Mq0iida/Ra!-7-:<aLA:DaR6kL!MMS58\^%)EBDrk$5'JMh>@]cc(uod5ZqeaZ1P1,=d^4S?%dI"d`#$#o\),=H-![Y1fLONk&cI7>oq?T#Y*-.5=c)r:Ip+G)i%S&+$AD0>,''%;<O*Rq*?2;]^$gejlfK"Zt5POqbr-k`bi4EJ[Y>3o)g'&p,r5_1^d@Cp*0CEYH]S6/sa(2X(b(E;K<hsI'GObj$'.26Za"aXj.<8%KZp^/_P6omb]m@Haghr3WTEk:J)JL._RS^YlC84sBt%)E&0;*/Ds_(dS`bfR\>L3]0[KdsdZbt9&8#8*?9\Vfi<7UpM'l%3T3gC;%+mO$PJH"<hPe"_%E8dIHq+\&NX5JArjCff-IU1i^!BZFs)^cH/>.B'(AWip%_F:[gm,7CcC+okT65HVb=l3>)Jc_j>p$DQ\rqQ/'%^UUb:3cjoOE/JuT^t^_s2O2L0Gt!N<%:@H'ri1UqVVXJ-WbjoS>4;9nhl4rMD=naOf?RsE@ntUOo'lOd_%TTd<R/PGRaB19]'8;F%?6KP'`KL@JC0*EeO*jC]IX0#M2q^3H7),Hf?;:3l3o;cqU9si8OIs"``i%EDOT.5Ze,!r.kF7P9%(DK]q4kF!R/<aC(Vcj"AGH"r%4,KA[\/\F39:$F\bi?^KF?)33Ce&fCAOkQcLYNF,MgLE:Rf8Ck)c`dl7mPW1no8^SDYA_LHrIt(#O`SHZiFo;b0QD5Kg`L3De7)Q%d_VdAN[g0l[7rA4L,@T^AkA'FV[Np0b/>niAEJ.L,(I[%b!J#eS,3[XbmC.p:B5!rk)!UE,@&+NaV-nfR$_$FrS_3tA!'7"5R?2/%a`Y]<d;-cL';IrBh0JJIFq1p,Hec.*',VcUDE73M5H,W5i82,!n,l<h-dmi`6]tSDCk/_6qF%+Fbp\olc6?dM<o(]',"%YO0\cp*%L^HHh91IWP?-HJ_k.De\dk#N5Isfj5TH%R39SVp(*)!Eh3g-FT&d9C)OMgSi+.`FY/R_hKOgK5R9]f*"la?F`qt'cmO^(F.-Z]#'%=h\QKS)ngqG$b&a\(H*,rN8#hae`N#Iob4TZ1MMm[99UXl%NOAZRNgH:dM@:STmDTB0QC=JE!'3osHr.\lpPs8N1Gah#\I:H^3_j%&d)ltm:umsKbcj95@@\\2DtNHF9WUK`RLW(TR^&O4F]qYb2+&o[k!B_jed="8l]k[Z0d!UX"X:&f&?&:T&!PU[TBW;jlW[g=_cjO%9#]QUc$=Rl^\UR?Dm;)jh.&Xej5E/#:t(LcW^0uFTr5lZ<7/isSeH\B_L@;.g_iC!X:'<LF$Gk*M"=dL^H(fP1C*+XK]HVlGJ&Ja%-dqYN%$oOo>c)5aF06&Xfk&"l[tlRq,"$^)Pf!SC2QqV-aNk53cYL<@"-2j"gqhY[BVtBHf.`kX+Il#BZgSOhRC=B;g%S5;GE+!8%8c#n0BnBii0ZG"oX%/R`lbp6?L]On<;`cZ#<**#r:kri>Ylkcggo3M41A8;YBYjcZ!dhU#iJ@soK)TeQis/QE?EPUMAUc'p^>6n)%ID%`mC\EcT`p0Cpno%Nf<l'OalZ<`"D1JD!aNs/lHhZi$inkeg@J!okRJ$M9IRHP'(!^]A9W:g4%`S%U:RW41haX]B1!77R[Of<r%*rj#c[+nS7]%:)_d9"=;h+(&nOuI!p[u/DE<S`9R?<M/qpQ*=Sne1K?]9hWibhB@J\N"S*IQg<Wie^^0-S2OQSkXY8"IpURQZS`"%_q6StRAK/FU6Vl>IkE[#h7;OXX_THbBUdR64gop=o8j3XlgDar\n-J7<j8!T(rB)ege<:";[50Z"ufJZ7NToQ);Ip%V8'hTPsNY/%pHZlo;j'P,\*)gG^X;C.Jnr95r8q-gVU1/dI_o6<]C`5a!A#HrZ1(oe<A7dI=t^1TNO/><.P@&bketEnqA*FQCsMjB)ESVoZF^uc%>H1E]3F;sAf>i07K$RS4)^_/+Z;meiMaT5S0/'?SbBG]Zpu2@FUk*/";A^AnP"""jk=ML$cK4@jf0a`t#oY^83ob=<XY$hWZW7fb%KaUqG*p<qIZ,_0Vq;rWk/G$[mf+$UE(L-YD>2orni=_Jg"pdU'6(iLS#^:.YKbK$?]Q,21DQAhGV3>:3OoT#e#RO=f!>4Ik"<so`%I[]7Ohe]P\pi<RJ<'KT)9J4=WB-JA(gma]HW(:!'"'@"XK$:m>j_)Xak2PAc/Z$64jp.=e!>W,&`e7g=F^oD6;?kCg9Qnp'jErr6%NCAJB6]/]Z^']7%QPk)<.QeFsA:ir%V-)O+]eDC@G]5V%/;u&e()B4d=B4?ua&lFPXWdlQYl]5"h*O$>BLM6C=R\,3%gP#e,J,*.%1cGIcOG,9_&X8*=)[d"V^mK3k=(buXYMc0XDU'goePMTn=ip6Dii+XKLI$N<jmlMk@77un_AHfT(3qHg9lk:k,SUKZ=<A=Ch[M$'%P^Jro<&[:33]SLNa5YD>SD#'?D)1sg#DIH)U:mG)Sgot%V2hi(B]O+`,&mm$.N]/'7eU>S*K_Q\_73(4LD!k7?rBMEaOJH]%bX;V%U[rR&qn2.dDI(M]>N!)JV8oDIk'S3")U(:Vr`W9m[]9f.*%/J=o[*E,rZZZ/lMAI&4n3QIa)`S?kT)JO^d@[ASHB8a:DQ5=ShL(j%kg]*\=*87hjdF+O^dik/G]u8H&Q.F'KYi@.g,W\d:HW01iBh\t=ks`l7Gp4\pXM4=cZS,JSD*dX%VEs>(Nt;F3C!464?o,k:!VJA%Tm2%Q<bk:D"'hB#UI,@>osTj.(req%f#fY,BrCB_GqAO7P(Afm(*/<Y$M-=b/B_'!N<7UM!j-u=0>DBH;#mZjp%D/CVmr&USKK*P%j@[EoEX6`XNNiIPV58ABW[BLZ\Dub_@@":QU0MYsP.7h[2q_?%^K>@mCDY]5hL)9IZ3A8&ZP8K#h78ZKB:$;rb]!0t4hgZ*6!Qq8%?A5q>Q"<UE[lYGVJ.mucp8re;Y]%:#O*H7A.8tM$hir=*.aZkb+j/:$#1RmeV41,CVtrRun#JSLT!Gr"1Y3,Gh28J]kN1tNkCFtM%h<O^qq'oAUOusr>Abcd`^&pRJ^(jg/rO_(mIi`VibGUU5NNFNmZp89]MA9clo0Hq60>I+-ClSkc&*78Ki\c43IQpbW=kpOH@sZMk%SY,2K=cDADe^3nd_+,R$$*']^Vn,C!No:,kd.:0LkqSd&)L?i^/GhLVW&F\E[DXh7G=Rsk8r]j\4IA[;$082=rG=h$rFrV3rn5r-%r*=(cj<X^XOoOCh[$.e),o']55BMGD^EdE*fqb-0mM!M&.@4ssMk@3/cXrs#r]@XnT^.7/Mk+<t.>_W.8D3+c/AXf%,,NDV%'3#a%&Ib9E;DM&I?2l;B6iNF87gUW$s*l=?L'i5(2u0^O^AK.Is!2/)H'#[cOHNUgoe`Ap;V"ZE/#aCef$GZeq41=s3NF'Qikjs`VIiP,%G!W.&B2.34(QGM)C6f.QZAP5),[?/.Aee7nBLND)b$(5C26j/=.r/9;<5dPSOFi!1LXd&qARuUuG!V!sA/.g=gq!Xp_gk_J^_"i'%#[r.$Woi.)V,JO7-6t]J86JkIP2rT65=s0lgU<C&,<W5(B`<ebehtWCreG[6Q7O:4m3*+3f&shX'&1K"WiQhhR^L6n8o>-febGBK%`X0SFClM:1OlWb!Ph'D4")&[2N'B=OZ,u@/:a+3u)*">2HIfN!3N5UhTdq9CTqP1A/h+4:gNR(p@:r<b;@1Qmf7DHSlJ#*^,d%c>%`(@g@c=W6k=,FIp16t@;MTKCd.CPbs1eApW&Je2ZSKItf;l5OP<j7bfZ$@cc[7gX!Z8,iM#On/^OJ0b$=@a`*8P)A7/#t^bW!9@p%cH:kke+_@n@@901l*>p0=h8EGLi"$0#Z7n=V6ebj8Bo<H^/,F;!gO/<BnVM"/GL8R9$=6GWR8EsZD(6Q%]fmH;VH(5YEUNFA9^]Y%^9\4g+\@6L>#nQrS[+r]]_dOE6N/0?:t__r8QcLijkC0l'pFY9JZ65_\Ze,Kl'cA!0KQI53jC!(O%gdpNe:b4)A8Kd[7u%n">Krh%92VoZS'3u,63bLVK8=T*_17E=h7=E"Qj2,Qg.57=1Ctp4<KJ959Z.=5?t^=mkd7.6;)AL)fmBg@$rRWc_dN@J)"#U4%[&910!*@n%;CD_h+NkOpC.bcu+e"EH?RGtfCr1usqBK^)([8U^@n!\@.MSVE(5aaQV?=J$MHdY]@2]DLJEW;1;i"s\L3"KQH()n4F't0LhP1Ot%:h[:s#cNJO!>5tuI.AZmT6*->9\WS^Qa,aZeMQ*9'EZnt(j#*HUkAe9LX_#`cj0j5,)im'L6WD&JUt,"Jr`/jPAqV2)\aJhXDO/p%9L,Vr`/A6k=NKP78]K?fG8\KJVP:Bj.&Tq0VU.Z0anj;[!Q]%;r!ZIoG[RVNA0PV39+:t`dnD,[k_<3SSgE*FQ-s1GQqZWS/Yu<,%orKLpCj+Ne8P<bYmkC;D"CRWIUP^5$f8)CBf^+iE>"VjBQ-kr3`uo14$4-a1A/,[1FYA]&Tb'Z@.E#0p#*BT,YZ-ISTNMK5B%\N*%5^jhWg7T-/7$UH!^f85G<1D08i&r%$U?fld&eL\`d^C_DK!-W'Xa3X^#-6K:OM6lHkt<-'&O"cT2@[`CcJT;#[p>$M&)^pTE%#GS%(/Aukk34gY=dEX10Nt*b"G2U89kmTXSG\W'OWc#T`_r+3@4A?M5kp5O%7?FApN'VMb/gna/Xl'F92fY%.gI<Ld$:C3CK3g!SZVtn%hnj[#(*S"O=,RPDak)i=7YcU.)0@K3):el-l'_UimL'aa!^Un=js;6<9!N2pfRUDK4M7Fi5\[(I(7?\Ml4m;/9Hc))o`?km9\FSt%FUHS`MUErI;i,;#r,2ZA!+EGEGR\@ZX?BNu7#fhu.Tg4:8r/.pX2+aIehT*!!3_g/!72-m+Tk.XJ]J8:6ku\)eL^EcL=RZe5c4\?%,Vk-L2T)ma!6\n?iIX`abU*ZXWc:9);i%D/M[JSQ^'4/,7"T%c78l\hWKqA*T%QY*_P8N1#a$qOX.h!dED9))W2-^U0XbhfkVZ=G%Zoo"oa9HgRK8;O^fa9%-AM`Y-)A@3<D'h;d_cGHPBJqYi1eG_2;%*hd.<-3/-4*Cl#/U:B.Pll_.?dO=0L@Ue;3"du)O"BY\10k0%)L;B\9UTTsc,,>PKh6=m_=qKWRGLiIC,(Mg,7DRJdkIdfgmeFo:Qh+ETWihV7Z7E\I0a?O10C*T.:G4S$jDNVA]RQGkcB\'[h[#C%$s/)7pGt9cPZBP<jLVGPglN4UF!3LUZH6>VV\Cj`(dp:lS5Y_^13KN6Hiu$XR0b?CIMV3RMPfY@fK*r1JRl,CBK`5ISqEb>#Z4=9%Ah(%rq%P`/K+Z7<IF1cBkdl>HDe^W5BC\'ZWB-J56qXCK8e_G:ZgmQr$;=J[ZUe1bd;1;eR<>BGZVl>;[UULA0MBC<.`"NM;F!+l%0P[o1`/r4K9p88(W>n9;*]!O^a3i<d(P;:pC$-0S_hd_CJ]Q=C,\//7@T>L#e7=eNWiFfIIPPW=b-oFs:"*>Q)`?G,I&/Ap&Xc-K%agl(a28s%.),0BP\'782O[<k%3K$ISer`:LL&a"pPpF53>ZX7Uh]b`_TtaB32JRnQR&lEnpV$#namFZ$B[#&@0^=>nKK*:OY1p`'%'Oie4R#7eCqB"$fgc-QI#Db!HbaF)3!/7(0@h=$KC1g<klA/>o:1cD<fM&q[P%M#o/;#s;(<C[QCKY/Q)88oQ>*(LNT)s:4k%opJ%3eEa#1bBYRZYUsZLhUQJ!Z2^T4.BD+'QMf<102Eg2:L'C&6'L;=E&fmn1=eP*D[h:,CujQ<[;D'4lZBX'6V38$<9ccajbo[;R;'B%<.&RcP0)Q8/W4gH;.q-4Set.J8X]o.njuoF+!$`d4TJF-f*mCr)'i-hDGs_8OH!r<WehCU$9<VRL4g1),P'R)<(!$j/#\?Y&.g3j%To.^h!_5]XNl717CGt_5Od7bHJ;Lq8&4M`rG8_1tVA;od+qRa$5FA,k^ke7bg,.S4.@g3**u,td!Q%ekHP7M;%&G)`Ll[0pZVZP+%;W@C7fKL!9I!Sk%iHpI-hG[fe.)a]h@)-/s+Hkj#kJ/@E>VSo/Jo"G!(!4\^"K@2qdDu=lagsqL8WFAiC7.D!c#=i0PU\6`k*.&)%khPB#W$"qs@km-UhfI"JgZ6kK']tfTFS[MdQQ6@GVouNPP\++_5EaF5;:&:-FVn@NI#ie[QN97".&qtJ[0b@PN4LWE(?HD=#*BAL%@%>#?&=_*jHrFZ4$fVjU#WDrZpNW;FKhXoQ]qc3<A'mr*:f9D5NPu2TNP22D$Vgq>*GJmehERj--ALLkEsK]O#pAeLS>X1W(1.'/%@`r3_`#Oo,eC=kB&7VrjkdH>R=`t5t3\r2&@$VXh85b8_A@cKrc?hG_Kf$.?&B5-OHPBJ52us3ajocM`0HEi9XIW.!h-sJ@Qbu]X%Kqi$pY!m%Udo[+*)O"TiH4AXK_d]gs:`@=WBUE!>]HV<_!(&hP+i&U2[Oc>G(0=rW"rnJ:5qp/@@?SUC4rcf+CEi-NLbp#:qb9<a%Sf+kdXE.cEr(MXGp_ee<RLh]YnU*b<j(B4g2hh#EKij'@56D2UM^NsC@CG18cN)n%0ZJX]]iIg&r6,7a\65X?aUjQOh^ZH<p<4Wo%XUlO<UB&L0`6SEqWO`X*UCa=!C&AA>[\S6/B+tOnCaX[$+^D.upmD*of\:r`ln-"dr![@"L%lO>aN0PrIO:`,6ni(f$h6"[d7d@6%N5B,]NLs(RR'I8fUC^T&`6Ti[F[Phfd[@=Ng^U#fH'oU\h5V;UK-=8qb7d)*AR\X!)PN;U$(oVSd5>;c$F++bHq%n(mL+"Vb-dB]%K[5adP<=4<r+$Bd!CEPXSgrsBnMJ2D=WV[`N:<JKp7eHl.^MAt[_h,AOYjKh^hP%1D/#HJ/`6uj(,7"cCRM&U[/b2m-GZkWPeCmq%3maCkq.V6cBN^ubO"WPHi>o4U'Bt;F5ZNCA4VN?nmG*CeI%;0`/CmSp.JQVI-?N;B#!t/sk4;PA":b"$;:?FA/]D0kT]E$]0\ge"%$GlIQS(5eV5pSh(QsM^#JGP"VUkE=t7*m2s88)+_kp73W6QQM=Q"9?'m7!tV-\\"VjWh.1E%aIA$5Aq<dE^C1b3#uu)2E=[Y]Ub6%h(s.Yop0V4ThZJU:fFVm-;4i=^#ktq6$S9IMTVAt)T+e2"h*LUH"(K`[lDec%gOL$CR;",a-&?eOs1:.!'AIq?RWmX&@hCto1V!i%0Q_$e\6;">Y@'m;+>PPU.QDPSLn(l@5q7D`5m3J-4OQTO'h?tSq!oadml6b2W"+Z:Wt6i?7siDqUKCW[;Vpo/;(S8`R[iZe5i=po%,#6MOV]_1DORB3cl6`XRM7(6[Yu(<W0I#EuSl6G6Yi;Ud2g)PMX]SOEl*(;\F;D+n"'mYVqD7Lj`8>,/=9cLY$n5g\QGQI:C<S6U%d8S'8:]p#\<@7Qa5*.f[W_M#J8s'g(:04EqYIb8h2<qE`P/4@*%t,NkL[dk]U%Uo]%>$>6AS[U3/Fsu3Mpd!20P5CW]eDl$hD%?5%-80mo'OpAjbU?DEOCdk%&P5>p,mmJZAO1SE+=8n@9q-n8!Cdof=X43U-pTU)Q8T%4.)=DV#Cp_)Chulbk2erfXEd0A>YV^/(?m9l%@'\D4@AAB'6Y(d=8,u;9&PUDF(j.Y#'ZT28pS)2#0kTPmfG"=IFCo#t$M-u.@OrE[IVs]JYgHqqVN["o6Te;m-BgnV]VV-d9:&`]%U9L&c_,;,a-<XSp(t9e;EJjnH5rGStZ'cQQKeJ"u&du7$!XFNm0pNlV/e]?G/-Qb$!fVE`FYCs>FHgDR/dW2jV^OSm1l9n'VP,[`%/=Do-1.K)21:fLS%%.`\8EaF--k!b$BP`TbU=`R.Y1\@'<YPm;/`r?I`1:G+4"r%@C%Gp$+IJ*7;r%g+$5&&X8J)8!)^%1K/tcLh%YqaW*KCBp919cAPU2qk$@.T@U$j->[#mGkDSF$F*)1X,mbe7-%_H48G8t+Ar//Ft6e;G$.>fQ.9"d/>C19,\0[UHF"-.?-%"FuM%%(PM,<!X<Mg@Y&D#p=iE>FM8#O4U1,/iJ\M3N!SI=cm-i7kq+F@GB-(%/kgMZ-tL<$6=Due/\]Cqeh5/U=c4sB=TcTMq][_)/VAu-%G:KhY28IiM@)Q5\/s%$1Q;tZtc])&M&@Q(pe0u[_bdGBF[EL$K7]ZoTGiW\4dtfkHFN-BZYm-"90q/1gec_el\dPM_Z(*s]1h7'a%WB>V4F&c8s\.ap*6Y@BY#X16?QS0Z5=>\BaY7gD^[1!X.`V,VGq&UH5=;-L&EQQDj0,`cFgf(+><1+UL1h7%,7j2kf'jq@j'8Tdi%LnsVW<s\'%&1;'A^]a@namb[4.#c-H!Cit4%pB(N2OOiG6#3Ejl#e@eNMs-:3=T0@/uh7^RZ[g`(H5snP)9LHJXecBr\/!p,ZgC^%_h6N'PDdJ%A.8X!@P#QR\Zm+j`a_"/_$)k@b5mF8m/[oa!4"I:Q9uc1k;=1#!<?IZje3XqZalu&D)U)#'>m0h"<opF((95[0HR]c%_<s/@:`'`*a=7_34"[CER5r)')>9u5V%k&q!>l@Bcrc=0iB"=bbQ.u(7[%:8#@M53nR)hlCeY?#\.CTdj20SZNX3O1%R;Qd@Rng>%+9oDj4IAL`@PN'8k"sQqAtY.kFO&IMYoJ93/2Bh-3<5/oE[O=jJ8g5e"><VuYgAM/b#8&d-Q:4&_kMK96W'5h(4>o@Bfu+T7WWn.%(fcI5GB^UF*1:YpF9;fSk1cLq+gs$:!A3N((p<oF`qEM*6NlngLBtf]Lfb6Y:rML@S4,gQUG3tP1ghR%Nl?)GM!Z%$b:'geX+n1i%^;b+rRXbuMR3&FMLsS'c`X./G$3H%u>`A=e;R'4T[Fl#o@77cgjpUFpL:]]?UBBBfAsus7A)E./CTtJQe@l%kM_'KPTV-rn>U_0@%3khMl4K,2U8O+8+*oSeIVT4P"B(I$5Yg\q*$l.H^Y1J"CZ=<=T&1"$39In_6`EYh8@c3g\3q$KhiG39(X@.9F;%grdDlQRM"0tKF%X(&UNGg.L'K4K7#Yruo>'0AIHq'VlXNpkAT1?_##8(&ZKLs7iLR(<f;fSohMR"@Ua>.`$'bm'GJ%KakJ?td\@2q;U99M."b@![U`%M>G:)OKq#RjCfd</r0V`,M]/kEr7LEhAR&<.`S)kB/>U#IL&1qai7c/W/h<p8H\aZ"!\`2U8:i6$-V!/Kd\_2)Bl-u"U#h?QrsV6%I+'gM%)ZKFF10:Keh[JB&fFErNJ6dH:drt=\!/V0jG=?I2r]-8>$3oSQpO">,DQD6R#F8/)?Yf@[n:Eq?Ng]mL@@>16f+^U@3c2W%LPF&6/%Ti"ibOjdeQ/CABt.B"YTgtjRT=OLk$<W,=OcQ?fE>X*`*i[2UD.rt`C:'OPs"\$']T&^XTrs!(Eh!)**0"';M$>KOM0*:%fTnUmP\h>_qP2o#,4ch[YTF-P%f`0`hI]iP*m#%AJp`@-oPt;aJ+ocR(]a[>O8ruJ'Wu1SJg.h'mXYMS^#Jr,8\b#^+MU^1WEnYs%:(KCF1`D?ca50pYZS8\'#gA)Dg3$*!ZGq`do>YmQMZY$5cN&jkZ.m6>U(&QWG8IUp]S.A`]-X20'Gu)Ja>Da-/(K8qpoqtU2^4Bt%+VQMI2mZrP0rZTQqPk(7^qp(u,PF8O'5tq.SBFEUCk%L+eV)RdM`&^Ba=s-ar`*427qb)0$R-gS]Mf;EauSmg%m>#(Uc`jB,$1<,%L(km[6UY/LA1&Z#EV/-AAD)A=bDL1bh(d__ZO_h^ce.Rb*0.aPL^$%4q`i:Wm+N;.'K=5*T%_VIW1B!&nPhhSOmPnXTktfm"=65)%[C)PO-?eka%:I+'D.#dGa_+idgLe0AnZJ9\h(IL=m5idOZUJ+H@[>P^N\CnPXR27m?05ju(WB)&Y^(1IjgY%#(,HEP9]_'4`jo?0%5%%V-#ESJ05KN'hL[I(MrD_P_?BGk7Qda5@O*hVoNX?HC[-h7ELpue=4<$b(IT;')39Q'aK%2'H!?I^YK::?YkZ1-2/QY#`@-4j"%`ur#c4p@HSo=)'CWQjr+'\1r]<ktZ##c$lliT-T@*u1sQb,Dc\L2HX4LNs,\+A*rN[A"LV"]71,Gf)DF_ZY*4fS[Oi'K(VW=]+%9%^gf4t)rmoc;/6Ic^m=)DA+Z6sA45hG+'_U4&e!S"Xi0F$)DVaPo8Ip(=t@C%bVJ8P8jWaKO:A10$9Ps^0F$8$9oS(G/L#6\GdS]!%W+EG"#OKnu`f)RjpSelD/S"V?V[c+%Vc_cj(kS+1m_.4$S?X%n?8c'g>S.1>G^/jgkb1I1q&<_Cr=(dF+&Oh(mpj>k.b.H[bQ<XZ%<7sf\,YT?Y*..[>NiZjS/:,C(`G^m2*$lhE-<#DDl@@cBDh>euKY&Tn0]O%=pHYg'N?oC/ADgS6Mq_H'7aWsR=L&A+3?6U11j$Cs%+MdrK2/.;j:GN:d".U>^fg?$=MWWEaknJs-.I(`!.PYTDDss9,8lnCkN[q!(DSu!!YY^.O6ZP2..X-Q6)K$?.+oo%f3BL)&GA)!)%)IGuN[Sk;TU0m0b`c@&]fBJ;*,\H2!8Tl)*_J:(/iXQ!cqH!W8?5U%:4Vds$qk]p[TqPVf>^+n)O)G_l]lT'<8;_]//:r<Be)?I<%_\>ke-pl4J_M]RRbJbtJ=-<ul*$4rqliY-Lk,deWTp-])Tgb'<DR:Ng>Fl*BA9]j`"bL:HG\Ep7KMl5,JZ)ksj7ZI#7>.NIs*odC%@5d,#ipk;m;_.+d$P@\jC[$FNpLU!u>ep2'lUTt@!]lJlPJZmTlO<H2(;5_YP*;lh37UDq$'X:0*GO2^&70HtYhG+^O>024Vi&rG%n0VkNU6WsuP]Odlb3@f2_85=^AccF*dHuIO./MgTH'D1DaJn5ad*,J5(N")>%t]]6/ub,16q)k&AoCW"'nO/U'I%A9ThnnfP%.9c%Caj#Ngpn7uaQnHN<72/]F"r1HB8<@F3U.?aOA$bF0Jj*Q1ZnX9="?@16i5[n-HGFHrU^j:0q?@cNcD^HVb9,>>c.X_O)&Pn'u,fT%+)C>>85l_h;oP*2GZ-[L)C:(q`uo%XPlo(/Wi;PCKh0/Y$/phkI%A1f)fX<+j*=Ah;kXRS/Xfq!MPb@Egt=%'nb,Pqb<4MX'`8'2%(-.?Y`eoH#2_fnnCbG0!D(#gH(EHBjolTtiLOs`&Nh,17YW7_qd41qo^ecEc@mfIBH2Q;K*;7_;kcK^'UUVTZ=\PtQN-L1$l%lKH%Y95Afr>bI*1`pH4N(^LJpCq?gf/58=a!0r+6)6aqA!TXOogTueDV.5D^Oeh!.cm!6gD\N^@8)5/\n#0_g.^K+6jY&3(Ie7p_nf&c%6)RiI$;#Ogc&.5[#nb,<&36;Xdrj=E/Va$/!WB;>UIDR6-+::>JJ:CD2*8f6ldgd#>r@D+;<^1=]fAe7/..+TKfu.,2@L>5]+\&R%_EcZMWT9\pj\V2H<`2q*b[Xj^gI,7B\dl\$.^H=IrdYU"a`ERPl9eFg2-!F/Oe=,VOV=js6V$+tP%>E0gX[fpVDZE_lnU6,J_Xnl%L<Wk$S/(W'CsKE)*o86t>L-cbfmXW4Q_%6jS0ZPSn/&NhB:['ShLlQY$TNUraOu\9@jY6Q87$KK$'U83[8G.u*WFdWq3#B(m#eAm%%`aV[Xp[edrfl[s`AkAg+5>tl#>tbXmmq,VFN)l^paZn5j'cGE$H+ul%nk#AgC/;ecf"l%rL.s,HjY@&J?ges6Q87.b5N@$f@9gl%iIp"^\cPl]DNOP4;_^>X>M+/P]6Q.I9e4Mq3s==%N(BXm9'(MO`_7uTHiqK1:ptq-ZqDL=R<h83`*kRi27;0Q5FTQ;MPB8,']#>.%p/Q*!oEO7*dZrT]N%N3]M_sk1`>^8UUH-OsiC/Xj#g@isoX-R>@4B!kGQB4''IfU0'I(rpN0@4A+tu6kHL&r6!JUof/JCuCT<5Q"%PTc#FBkl\r+DY1j+N_Y7`Ma9Mgf,$NX2J?far5LLLYL3&W-6XIV):Yo[s])C`B.p-`JIT!S?Zr1N4F&EJJe1X,,Dkgbf6EWVcB3(%S,j+W(%2AC^t#U@djj]NFtg[dpBpBRIlL2iae#X#VHg5c<b>V\_M!Hj_e(phaQI.,pq!bK-acV+1]($$*KKaJNbZA*qW"LYUi/=:%rf;-OIS`[VQMOR`K3D_4k$Q\"/KJhe=m%UEF6TJ6kHm(,Ui?HG-s(*j;*2`plq\Y7hMlU1k$<dQg80%Hm?i'NFQP=Fo-g_^g@gkY%:qQ(dT*Mbs_9^k%%Gh\hW8jP:VXGf@CA@)D[\]Ti*4;Ef0ZM_S4dC+>]Zt5IKKZF"HqZnlCHJ>-FA-2+CE34o4,blLXr#&3/Rhnm%;q_Y.SYn<Wl3t]8:MGd,/N+WP#c_G=qDtH-34<a<1<J?VG+?ttIq\N5;qe(^Co=X5GK70kg(jMM4Jc=<?fieS,24P`_gG(g@L&9u%Zj=+q:MH.X6gKtkT%COq<\Vu?T!KGO+OFH<r`!pb_E=YLB\DR^32JoEbtCs4Zmi%8Ui!n0UOA`L1OpE'G1Uo5r-?>C90"EB7M-FW%XreD3fQJ'F.LQ*eI:cW2^%mn*Eg*cK#b9js]qlU[eD.3db:ubiSVZpChN?i#;,:hl7pR8WErY`YfA04!e$@iX#@8t/6?As]F9+0g%:>]MbLksc1d;MhN,D^#Z(Zu?+AA/g3$Dj=H;2%R7E*b?-$t5C"01>2".\E;1\090=*_uqYdZD+.%\iqhY=?t7d:5fu.fb(A]ddsm%Z-S+j/bQ\B\LED4F9F2`_6Ytuen+JXYuo?]N;QF7PRq8h1&H4L._3i\mEB"_lU%Sl>$V=sUINH*Pd+_<U-SLKr/ffGEMRjRr]"g\%OLKk%6C"iJDKnQiHpBSW=gJX'83;7>E4Da*H7KsUfQDj)=PW8Ko!MraO>r%IXKIJo%6GfMF#lR2rMDd2?"kquTPbM,#jSKJIE`ma%n9)`m9b@Z#]06*=3R1_5DtB'AU#WiCFqhdf?MW&KFudQ>KQ=%u1-UQq@ug8+'LD@>_d^&q`tt!F?2&hcm'``U6Xp\u`T,TTkI!]5%JO&(Efg<Fk.f<F#`s`UnGnCF`Z7b"IS/CYpn]KIDFbfb9QQsG-c@Y7F!0=7OJ`1?lB^W$XPGWK:Hm.pp@j?&SY3lFro7Q2[j-r8o%e=U-N`B3./c_mq]2;DXT%.(G.S0t4>Q)UPK-A4W3[/U$_<X0I&gTnk(*=_@Za#eNeUCWEF9/jHYgZ*](X+(9Og,j:+qhUa0MMN)4%NHYn*[];WskDoA.qmp:Mr?]=fTj4*;=-3./oh=GZ!Fqj-%]^<M"5A>KTbBt*Z4@KgVFjkp@s.i*!6#]U@<hA_3GQ;EJsh^B!1hd6%N\T#`=Af"DYHZ[q]fro4I1[.K_Wj]IM,\X4306Jl07K':DbH316]?b70b5!2HE2VD-(Er+OV$b40[:ph!CDAZas,^D$LI:m_[Zmk%^@%*V'Hf5X&C:JkZT<W=S7+(.].4A7-$Hd'b^?N$TYXCD%u.=n,ft`#Yi+`"=GX+l)E@dkpmC(\aCCE$@*^pSm#bSV^VFI9Qm[H!%3pTg]od'F+Q%9n)e!W9M@tOVMg$rAc$=)"r$fd=OG!dtSO8CC/,M2P$(r&=/A/f'A75Vgnfcc.(9k7!"haDWI`+"SiE$!7VZGV-O%.C*?h=p"rK69Xc]1K3.IfJbA"o@B5?)#bS6Q>^H])[l"l.91]f,GWlNg]WofG&%an^.`f8"dV_[[E31d/?Xg\rO5'jIfR8#\'uL]%dVdbL:bjBbLH[K]HYPbf\6[grh]#d7L[#E-:U*]l1Il.XIkd=[#2>fMkX%&>^o$Z18ajeTk/1)G0kH[AMi"hl^Vb9]9DKShcu-u:%'A7dCj`cOMBN'A$7>16dJ>rH1mrZ0;XZ0.Rk,d(lT>\[b'GqD/h>j79ZSZ=!BC&><3%P4c.!U-r(pe.:n;dO.nG!?D#r:kk-"fKB%Ei/tKBIFI)De7g6h[o>o\t-&m!@iIYj5U_[M3AU"_#".c)`f8GIHU$TA\^9BI'JqUP<B;6n>/fDNAu1KR;O'jlB$#uU$n/e8G>bq%8-&os?jP(&_Dp*dl$5@2,2_/BKLOJ/)p,bKB,iS1/S55A\2F-(W#?"sL-i5eEYmhCi6shkRRj4C(S:7V'kD(``h%0caEdHnB?^lH%44O4-%jfUn!F\M9&>mG%OJ=62F(#;h1_A$FG+p7D!<rX@-un:Q#9b_)@D!28-r;lK4Q-#-d*t'F=Z:q/_4"u\PXaocI`G;WhAhAc%SAjR'SuS:Z:#%G'SFPqZSG/JV)*sq^4#12p0\?r/a(Y#QLa^RUH0,cJ4qh!&c-L,;8<!<4Y#i_3_9&DMFP/`Y!<QLW;j,cBile?6%LYPg1)N6CS1Z7jeM)bNU`ELGWT_Q'-n=A=jfJ"Xl&7GPE<[hg4eAHS,=?(72^H2ZO=fBr+:B4:06X>MN-c-/HjOA.V9<$Z@6$sF[%hS(7R>X7L0R#'I-B_C+YidCo\r,s2l=\4P^KY@UX7pq!G5P`F\er1IkN.hbU`UMPT0'bH^(d-!P9QfI!+(9JlSD).HM7lcVG3@i/%g*f^OeZKd:Ien2pUKcgQPaklAR#=jo#8oaMlLM[u?b)n0E'G#pU^cVla>BbH&K2>CWhFUsg`"o?3Ap"ffb'=Y5(7<E;RHI>a/BFB%IjT\T0.Jg8L7.ac>ZR60/>6;_n/8p%((5YZeO3<kp-,n5ihd>?qE-KR!+@"d)bJF%k)l_-'B:'XC=)5.r"en\rOQKL0H`-P:?_0s%VfrT/YsSX:B=_b:M(_$B@YpWI>[b@bc?7jUKkWt7nc"d4*GJ^+#e8afo<@(G7DFV.:sT;[0Hd+)5rVS7h_iN^DQ#HEkuFo-b9B[]%OI@KZ2^q0;d^$%t5BhD*P?Xm9!ca.:%q3uS/t!0<;Y[?>GkYROUR\f1Ea_NO>#/U",nK>g9_M<2AL!:ag"&3_^p;W#iZg\?m"h&t%(M-<VUM%jb&74<j"O0i3OP<\kfg745+K\5ECg$k+Rk\<+4[<)!Uj2^opD?Fn+B>b)SL@[[(GR.q<WLV\O>G1-6W[g^!=pIn-[=P$%bL:N`ZX7'`Bb)caWBW?jEm!O?DJFRR<MWG.DH=(mU`u/lL6SE#gDseK#9^o?]t0Jbih57*>o;2[Rl+kGlq<Sl\60=R<8J48YW,bY%V\CNdKUa2*\jL5h"b\kN`Q)(Y&ca*P8b.i^J`;\'d4V<0FZj;ZI(c'1Mu.Jn*&GsKNJUUgYiga,)&MFTXL<\nr0tf_%MRpN1SuO-%L_!-],jJ>V,Nb*Y8suq`/U?e0$LbujQ46Y@`NcP#ZFP=m+XJA"7tDJd&ti%u-T6)S[.mbJ!Eoal%Mls:.I<qoV;OnJ`a8g\`]T$$%&Wa)mR(p[;@DX08k935u\i:&lXpj>imI_Ul"io'G?U>U1"R6.(LEhV4GNMS7[./2%/<](E\KOWXF1]5t:D5a*!V5$a%PS<,gCcMV%a(]*&Zb#p>+NkA6j:tW:C8VolrM_;B-k([iE709S]?`L-E`rKZ8%'nT@OAFc6rb%2l"SB9LG#(4'd87[db\T9P4NF-(%^Ikk/t%2%FECX]I[\5_pPSq5?&K25PR"9lCa@7=2m=)Qh)%Di9\'EbJg!e;#(HlSjq3IV805LUn>l#L-qV^SC@:f^iDdF<*Br1aS>]GsfA!_G%$j)!YSX71d<:U1M%5'hIPTT*S[dl!oA(+c$cRTLt_?[tfq(bk>be!h.Q.gZo.m?WTPb:))6T/I`a-auF9gE\nkl1)!M_Uq'lteJH%3H.5_`$19RM<B\)^Rf2#1<>L>!E'a\QCWN%G4o2q[2f5@+<SmBYK]b-fc4`;[UKh(@W5ajJr#R3?NUN7hfW5`LZK'k74I-MJ^r;6%\=^!.Faj2@RB"[tDu3VdL$nXK\45#M0e]uhY9i#)gms>'GIom!XJod19q=.cA2Z3+1u\(qC'PB3YPbZa\O]Y+m?GA>"j=$R.]@5`%1K@S\2e>r/_m,eJG4%"@e!-th8W@+J%4(&QPm1m;-Di%1eICJ2I=*htT6D?:G/Qd@MNYgBN\&2?[2iW_5/[0eF3edY7cco57H$tr%:eokXel164!U6HV$NI^qd2=u/7//qeSouNGXQB^49pZ;%Yng[[^32C)/LE+BP_/\M7*.oNldB^Ni"-I^Jb$/-fP0OGNeLQJ%];;c%!XlL6)k6R>N7S5":UP'DRZWujUW]q@`l>6FU4@rT"**l-P6sAdT#*@2l-*!L&1\Q:i]i9Vo3fHS/F1dN)cQ`)9E?Cq=`G9o6#"VN%#\Z59Thak9QCPr\!t3DMQL'"\Yem*\P,YIj@GS1*6Hl4O"5dNAXR0tC#_)mK6T[2A)Ad3X(^c_%R/XpFMY7++kQrFr:9Flt]cl"D%>i:<IqiHUZ)d5hj#[91@AA`Ecn]eZ7C>=Fo=Fc?3:RC<t7#dt?`5%UscE!7fOXgEY5e41gN#.(Zb++t:0C4qTn$PO)17Kp==(IRd%(BSku>n-/>Ef]:tSJWh_-7/f7gG_N+:`3.sdF6^-q0U]9j.!fDet8rYgjBBcEg^Mai_TdO]0gINOLJt%<lsCBL)$-#^H^lWe$p+e%q:PN^f^Fk]*MLjaQ[U7AT)S_NhacuS0D7`o(85)2a/&`Gm4"l("np`V;b*_:*@$If&Je&#:PH%c!>uf<1Fqd<fOK87Er)h_)^`O<%<X@:C,!kXB78C`O@7L`]1fh.s^)N07(Y?O)I3C)O7a@ie4ms669rc[;4JuOoZ`Ui&0bqh%Qd;7nAH,S@P=fSP%tR7]%Kb?WqJI,4%,'O`VB%G:c+k>ZXBb9piVrAUB0`jek`d('&0GVqijrDFn*NNdJ&FJP8=F95"o8XMU5'*qNk^3mlWjCr;Il8kfIPCSNJCN<.mOWr"%'el'Yf:o)/**skN>n"_jU8^0pho,@3[^D[T`0dDXYHG=*%"%g?!U8%>A<=2_gP(a.@n#V0'_J\E/4Fpg3:)_')EY<(Denkn[Y\h<%,dQQi.naDI=6)<&2&/4-7-9lB9k7Nt"ZMQdh/R9el_8p^7]MrLCR82U^2Y+dM/Dg_[QM:C[^O]oC(j`KJYfInk]^gSaI8Xl2j$*+%FNLW+J[f7!!E3SDgN;A.=U3rO]*=36Q<aSNh]FH[f]3b$1gn7]mi'QeKhVYM0tM4JV_5Xr$?2$fVSkB/._@.#n$1Ph8paKeF&'r>%b]u!%i1+(G"8_/-dst.fdS0mS18jH@!aC'H<.T*j9GP&\;[%X,mqu9&LG't"ThKa:i:+$g@\g6$m0n["\)=fY=GHJDLR;%3ScMMF%?AEq`DhL.EjOIWBb;jZ1U3;B9TAGt%#p<cR4+!2:gCPHSFsok'5l#cQk1_5)M-4>$S&]>e?!Bn\V$"crYW?9s#0[!S7S`#3e-/bQ%`)BuuN71];.5)h#or+,g!RZIg`'pBr<TmsK;1]CH_f36'bWh[eNR(JeIJs(GK^u#,QV\/L8dl!X7<o^E9$dnUml?V=+=<'dF2qh_%alLY.M!engBqcuM#Ob3DVjJMl.LksqSrV+++Y;3>FqZZOL:jH%/U>>*l9g3J4'&bXif`njoH'_$%p-nOQ6Gq`)1u2%b%aVVA7j"D%U.]]h$7W1\nO1,U4Z$0C9..%7$tmH=,-dK0XjD'l0Te2K2^rB@/_V.A<&Nclokji'`/3+]i(oLX'!#Gp+-ZJTL:cT'fp?foK\=b\%VP]HpjBeRM$/uF9*-lta"Sb)R+oh_A34.7ko[D,,lUjTmm9#9]TT(RBY*%WH+MXPWHX/'#,@;t*,\d=)__K4F6ZZ9KO>>":fQ\i8%0j2L6L><Sl!lq\[[Ha*.CHb0?MdA74o:!]bi88s=^Yl?@7YeFN*LO5jB1o%CQg^WF`Lr`GAd`>dlZg?G'qAmT25fXZis^+$%s-ED%]8O.*Vi*c:pT+[*=Q939WJe9!pLdTpO7,iH&h2C)r;JED8W%@!C@I&%Olb:*7ZuY^3E8P58Xh5bDJgZOMg3f$1X\_VnbB@t6U=5G%4%<5KlBtqa<k"*EZ\:C7POnU.b"l_;\8p9]kta2eEA?Qlj--oKYp<`UOsX\o'+qAqcice((]j@*EPj1@Yq[[!oNM_CGD_Q$',,L?%`KdRs]#fTe`_rP*<08\-<aXAs3Y%XXg""$.KH,MS&0o0fB,#+(ol,`O62lE^:T7MPGXY6NQ2O1pl;9Xe`XoJH)q8Aepd8tGh&qHB%&uZjl6tiXr?d^0=,L0Z.L1OpS#dNi>YNr@Y"p3MJ>W-E@i3P$DiW\)ngC?4uQd/M.45GH$;Zck7V@[5iR)mQte'l:I<6)&#q3`=@%``-Gk\-uB;R[ZG2[[:s)4;^r/#F%+"g?)>iWH^[s&aOFW!36j8T!1ir(^7cA0?RaoGD'$IDAO/M701ml<mFW4Vb$&Cj=!k:N9iVg%rUK"Oh+kq9>>F^.hE_u2qtQjo>tr<N].(`(laSSD4q]I2/D_1u6]TVU"7JI'gp!g,YbuP;1"iPt+jUduhJn9Xa>T_:>Z>=q?0p"4%_d!P\RWU4SmAXu5Q292<\s0@WGIJ\@@N?j`gjXeoENW9];>I7t$W4NNbs*9oW?O9[UfjAC>TfEA&%3*HEF@*5CFT<,b\`>rqaUgJ%Z,X<bTr6R%>ZE@\=)$F7l5GEDPIYE8%:/UI]87_G5$/`n$K:E[5LnbP^Xt.9F"+JMU]2V$UFfp]m8BR,HAu=XR$_Q%q'%nO>f4jW%lgksfG3uL`1csfTXW'dKY-fSi$c[*9&3J&hW$PtJIF)9gXE.%"FVn&r-iG)TbId"7Yc>WI16J9#B"&/L7#aT@Zsi?Co>Ii=RNT#c%'f/McEJE?aP&/apAfQ:0oftbEicV^n<8qF4&uB$kD9U`LdXh0fXCXjIg8#2NUQeRn$aJ26n+?4N1WPEbGt"TZjSl<*%(k+Li&P5h%55`,ffhZtilULE$80i=LO<KM@&Q*D+^r.Il\1WT9>p;_q1n7a8S.E(*,O@&%rB64s_>h?l+[uPo2P/#*E.jZ#hF0^9Ed5g@?X,2n%'?Gqg5uR^SP_p&lCGqGKPu<B&-fou&/%V])g[o?C3;S%AW1?O+r\3EK(M)pZ0MDCqpB)9q7g'EFTr+d`2@_5J;Tt>CUtMnk!M^l%%=%5<pYp7Jjm'LX;V^"\:c&gEPHtqhC=n>#c[g,VP.#Xh,D=(BR$T6)eAJoi#0sBRL;%sK,jW^]4OV#kbX<PnsG`thkaY^m`7;W@-%H@hC9Q?;q#A`(##=QeF;74ZBSlcq0r7uL8f-VQRH?OlJFdj"DbF!@dKWHJpg><RnkV=7n6qJeUJ`XFanLId\_jiYAPFS\\c6KGKp%l)orSAl?<,A^A*`9KLb9Vht$h=r&#JR)@GX)(hcF@'s9\S?%^Sds(A=%,VnoQ_I/Ql[m>W;r9_3kD[)R1kg&VcVs^&lD*R/mkeM^%CS=H%i@t_+>Y,Du0m'Zg6[2[(nrnZ<16<"^Elb<g\NcoP4<WY%WD6*]&(?a`<=+iT6ZP%$<@'dK(p:/"LV1Y><_Z2LfGf^k)3K?.%ne[_:L6sE:_n*N7I$=7s;GHZD@V)C7:W9OhXt6`'F?<]L81F/jCc7UIWb-,(/`;m#g^JriR_gO^@5J+]<[pJHT'@ZK"*1q98s/7Q%1ZT,LN[lS^<L<m=?74PIEqZ<sY>^1)ZB&[&+tm##Z%^b6[YB>E3]EY.B@#4J)*E7Jp?Qfh0?tWL;QE-fJ9Yq])2s:?8*;W#Vd*:r%Da-\4if1X.A*QF?,]X98RsL_cd</IAQjXc=9i8NZM'I]g,21R#2,`WTVHg<gQ%l2`/>.C%(09rG,VM2Xgh=W[`N3r(10*0Z'Fi39%oUECo3@JG($:OK9.1b03h.)!pEC)G-UA/?[9XAt?MPXFT7-3aY.uM>h3B\_Kq(q#9nW]cepnfIG6<@UNB;h@QVp"dCR[3gce0A6b%]CT5Jhe9JPPTj?c0N:jc.a]q:;Bs_M+_@B%+ZCN3#g;\PimT@Fa=?s=0p#.:iY5NtG'0bZnof8)R6:i:Z#qlW1]">ka(u'N2_L!`%p4^!eNunbaMb-Sn^1b5D55OkQr>AKFBHmY"iZ1]be:?R7E'h<&i!QXQLPke=^kK1r&A[0FE;#r2U+Uq3*=_@Z`uEl_L1%P"2Pl3u%=+>S0mpl$O(YBq6K!2Rb0CqK+5QZ<#fVt(XCWESXUJ!5OG*t[ZKrIg1o<s(B"<$$Gm1Oa_!NO0%oI6++U@/R_(gKG0=7&nG&2u(m%`a(3NS/`(oObZmH*@-2!mhkMGSgr+(6i&I?g%IT)W;-Kn*7t++pVc1.e6A7e&MG%e8Qk^7!*9&`XlpqqZQ'ofLZ_luqUNPR]2%6l%@['l'qc'-r-,D0Q+m3so/?I<jH0nG7IEn2>+6</CD4mY4anSfTXGTJ>D6UtK@),PU7T^ml+,m<1aC1;![%F6FIUF*T(aLXM1rn4h%A!_hQk8iUOguS;p2VZN&@SF+2nIMZJ_Zd`)aMK$VAEG81nmDP%SL91_G0jJ1c+Dh!2"H_),4j*gYJi0A&m6>U@PBH0gLQ.,"F#,K%cc[W<AkR*bb@TLInnR%)VnAH#He'T&Q^cjnp"o^h]aspjVIZ^TiI?R+VKJ@b+g!3pD#F@A_D-4J<SNeNZs:L[P?'PFoodloQF&!G%WP=9aoiFjd\("cEW8C>J<L!mCoO%8SiR33UfhFF(=#\)sUAcNu+YC)XLMBb<F%A59[UE+fKnR0oB$2Xk:&W=.1&E]gbuB16G&?NJ%`BHKY?h;h&dXOQ0\`pl;525oef#1O;!GpKYdmgfnf3$jflHIB1.efk,X2#)6?CGsc9/*UnQpbu;b"(nQf;!ZlOIW`foVP5$%`i38%\,`,0eP%%*2Jeg<Y+/u=QTmPec^b`ed>fT09<"UMEoB?p'N'Q5cD[<FeM>V9l,j)*i%`e\8%K1o((@.h>5`gq3<kULUaTJN)7\0c%2+eLEOF^&`-9_ucMa>,%6eqsR93J\:)D3Ul[#f`]Lj3N<5<i`lA+YmBXcs+p5otf^h'I?5p[f(Bh26Z>G,g4VB#<ZO7#4"$b6ZA7%)FG.9U"Ml,PPTdoWSq4nUl-u&!"r"DB;@&Q;sbnYk6=K[BM<Mhg#NF;+eQ0TWosPgH^jVM<1G[Ga!2sh6eLP@-aucm"thT1#%g.d%8PhJm"pG,:'@ALlctYb`R2?9u"<PXmC7Yc-@!tC&"?gN)-@`/Q'cSk'X;[EfDK;$C+D2D?#4'?9NZ,fKG8D74m-<a*:bu+]jkMhK%S5YYqdIG\?AqpX,Z7CrP;rI70M1Cms>ojfATq$T"=BG.:l]-hh!=1,@YY+/baGuYG\j=ui#It8(S@*q42B,2p]]=PCEdDF]+$YO=%UcIt'#]C!;I3h,mp=,E&,fb&irfkM%J^E5@,ObmX3)6ed1@n(AYKei4g@U1=,>:P2IXs5u;PQZ-=Nt@l6`iNuEOJ/qJIRO:9J@jT%Ia66>jQfgL[.q(W:%%SO$Yl$SRdX%/je]@-T.H^[iQhs=BkR&#Z;V/]ahb5(2@'j_lsmDM*<qK!J-qGX.]]'hVhZb!D?uc?Nuo;t%PlLTk@oS:QAA8X:%>!^C@=iiK6%L@f)Q^ZAI=VWVrr=6+i!iNM\._]&(;67!#XfMP6<XY<ku@S@\iqi$PG^m`pl,"`l_80Dh(]Xs%">VN@QJhiWJgUSgKW:Ct:1_Xs9En-_T!%EHL_EWA?&.cB?+-REYCO/S.QT0^Oc!Pd<khlYH`lM%7jlESZ"Ek'Zn?0N:Z-B9(kDj@%L@%h9@K<-AJZPlNo-2D:dQ5p;G@Zp?-8WAhiVgB!2Jc"EZVk:D9-.][f_<OFR9erH9EocM04A9&l,#Xq4,o_J:I*K'rPGa;A3q>H%:XV1A=nK,X;h5$Z535M8pTPjNVeVCoVIpftGeLWfjK$R3$+$r!pl'fbfuKWN8C1K+Qn0Yu-\peM+#K).gJrA)*dXKcafqrdS`FoE%[Q0M9k6QZQNfeU+:s@@Gp`5Eu[2_eFT,c$QBCYCYYTo:^^9H`u;N<^?b]R*EGkDXa`39CWd7#W:0L8I3M1_oq]@G<3Ap\&iDGM]`%OSm_sB344IhsHjF(gsl&Ls\q]F]'H7`"(/p?YL\;bN9#pVj^n8P7]lHgcP2ABLO[cY5NNQcQ0p1&Zs,hC[<@+QR#\m]Os[Z8/qfP%5gon/(ct&(fQ5i<Zln2F@/6$ods64,^$cV31U7a3:CTfOE_B"oXt+=3l\`OV%Z._fbWbuMQb"?!Dm8/RF]5*sR&DiWM@a>!`c8r?%R$S7!WT)U)]t6cf],4@iY":3GZ.rpH5r0?NWIsV*00(5jBe&8LI7WVH2%qm,8o6NM<8S6"ppaU;9$dXVRs=-!?JahS<8+h"DX3nJ%Ei>VAq-Wi*GHc$/C?O]f4a"_(7EPq3.6HtI>dX"]\N8!!Qbt9W_V5r#Wa?.=oS0jQp!a^p.f@"8eRWW2!\-@Al)_uN49+q=F_Ubf%*IllsD?k.Ar+1]o'B5o\fU37Z8E?TUDP.m_[3A<;>W,RiUfal3a)gFe2tT4_F1tp4mRojOhKQ3<62d\soWM<(VjOX.@d=WtY&W.A%$Ui7@gUF'nDZdO5F.Jg2X_VD^1'$ulp$>T57<YsN5?LFl:BS!7Y1k$87I\dY+o?k(EW&;sBoA8[C31Q&%E)>;]Y1:r1I!sV29"39%''!/r&G_E0@V=%d&E0j/n3#X).#2jPEQ7N]KC"jrT'"hT;pAp:1_gmB:N[U4m3/@eiI`E/#rFj\?J.ZcQ3a^gF,s:@LE]32V]bih%m7c$_#2^5O]Q^5G[8Lr?f+e[A5'?/Q#;;f!0V9m&,LrsdM)V62>)ko31S-6_cC5d4T/r=P^`+]87[(elkSYF"g\GT-Q#'suOPj*t%DWr!kkk%U8Geo?Ql`5&ZHTuT\`9'L<j:\QEarnP^UVg_9acqH;K_+j+c.n<:(:'b4VIMTH*c.k4)OC]DVk.CS6sqZWEY:7BSK*kW%7";0e#RFIRi4VP5rZV,?.Kju=;-'$:ZmiYW4D9@Opc')Z60_>gO4Qa!H!,5odPFaXK7;]@i[O=``9;t6]ZsP#=[2S@:0eN`@m_ut%)l,hj$!-3!280Y7"g`AT$UT('_/<Gom9$K3'00HiI/q!o-W=jQP2U\e6kn;G^10^$U)/W?ZDR6m:^`mmA\9#(CDg,C1T(AL.h=Z8%2',0%H(/V).9@#RlO79=/lVQ?Z!iGi29"^r+rh5OcLJe@H]"#GA9H',0!9:gCOhO^5dG54hSO?.BQ"rLo5WA"n3pKB$ae$477@'h%NMN3\Gl62;)?ipbDCWHs(DrW*:!\+7Ko&or.rtO3*Y(U12=#VO?5!A8^nt,-g!H;BNU`c]=boRN,B'YTgW&Nb;c*c0/@I'HH\RlZ%D5S^2bTdu(&f$BUEBaV[Ri(<lfauD*Ko<+3MDnDh#;n(GgH\N)dumP#-^I>D+TZTK_'R8f?m.n]\K=%RR#/J^K?URce#-Iq`<^86%G8I*W>6Q$1Y]SpnQ51LTjbS8+(KW,L97tD*-?O9*qAr*lA`O-SQ)046_);*g[8lHRfbVQKD#g*.KNY?CfB!-o&eTTV!1+DN9rW+E%,X3%^X/iFmR%RGqhubY83$Sn2J$i]shY'?S^&lmqBeX$1Bp3C=M%%1OV7^AHX3&9$3EYkKpr><Tb3+;L9ZOMG]F9Vpq'1sgK"QZJ%hAG[U`jN%[Nd&&WDRnZFpC4>jH2Q=!6Z2YML*9G8&Rk"e81MRG]XeZqA*[l;mrtJV*lTm=Jj>1Q1#G0WkQB[!1&(@KA,`.so(gO;%7dJCIjmWsdq$nl1N-M,u"np[qXsga>_mMs=(uhtc^$i]pi\LrK$7dKb3-uRjmghB,%VHS7i524h^HLMaZ22KK.E]<@WsZ3Z+7NL+%mBlIAYih%7GlDj+a=9Z4_9C$?nUN#1/33IhKC*b&PH*t.,-$r3<GrUCNIXr7T4T"O?!#+W1Wd"B'b*I,Bb&bY6m0,#b,'YPmhk:$%JR)"Sq#r\2,,;r_j@O>4^jMb9HP2SCm&L,'HHC<H5M/[%hMeR3I#&c;)OW)`))7k<eO#*m%2QY5"H$]k3@A_N`V'#2@7^dQY<0`L%.j@]MFbn[I#DVdd>^]]0N,"led.AVe#`nr\?L/8$gJmQB`_&6'<W2R**?rDXL=aLV(PB!U*BQ]-\;Bm*Cpon``0_mX91@-tSDJ\A%>>.=X;[#^fTRnFY<s]N@>5HFN/<Ysi)o@_em#1%DMh&t9\M(tkYYAjOAuToCB.UT9'kFhr/[@U-gq&P'95`QGqn(X0KJ-'1F`hXB%X^UdO?#IQ_oR6'bCs'h@)Sa.$gSUE?2n:db=fWpprf/;6B'XE&>>m]19l=m&pRk/s)`$M5YtYgJQka&V].?D'U0.&b#ho\B[j#YJ%Cu,k7"PiI'&6DrF*fSaAV1.PtD2N:mkbcQ^Cb!+IU$o6\M-Ao.,+S76p8"n=[fAP,2FZ7=68]KdpU/mVKUC*]]IUke4NsW.kK90\%E'pKLr4M92m`jON[SBifD=DHFEs@@R+O2Sgb4>\/&LomcI]sQtV$OnEOJt=!ZI*^uJ+2\B#K5;j$#$_B,qREp7mrJW=ihaEKZ920%"\,[(hgTgP1\Q@TOhLGe)ARa1VlLLeCHV2]8*O@FmgT[21FE6#X6]HbQuQ&<s5PAf),j"QPk80?_ShVs=bq1g,6L-?%EXg7CWDM;%$U>N,(aOLVeq'QC%<ms_OX(/?5D1)i?&3]%LPHXp@5SQ1@d]Zfg"BbaZ"Mc6b3H`h,frJgec..k@N^$c71;&TbY$$E*?bk,g20qY%^_2dIio9*UGK]B3MUrYSRFh`PN)LF@plHV0>Y&N26YS$K5\!od;lGP=*!(d^7sLF^/1SDM7,t?kZLu]Z$M[Gt-'6]j@55>e;`9dW%B`\92enQrZm"XS?3o$qdi?'<mj8.^+!)$=W<*:bSX[KZm\U\4l+2P9depF9a9NTQ$@t$=H?8RKY0/Y,nkGdJ)UA+SHp#`3+T0&>R%On.52,cV4rb10.Ba9SFj5p1rt.C+^WBRW6+dg&Oi;\\';<QR)tC8V2kAEmbNc+h;\Fs&E$SL3;,0[^g):T4a@hfK;O\pXS,kkuke%S-dBppUteCjtOQ;1r@>Jr]Q"Y*)'E7Q7j13E7k6<%0G]3[2?CaRcgt8Md@E*G,U39!8SKoM-E4;5g=Dc^H\R!\7DED,fu?6rYg^!%]_Cl,_[7Q]6rFBPYmHh1'm\Q`DAk1@\H>/*%Eo=WO*BO)=[O0*;9o.+##QTXO<IuL'1o"2Wd;j$naAOl^$o>55`ZZ,q6;5fJ9O2b%o(jt2qu\,uVrUI.5U<e4@99o?iW=C?\9%ZbQMrA>PoIYq/NIP#$8`q,&Lh+0YA@@!(R-_c-d@5$LD$-JS0lA(&5bOF=KeWkUR>e$%k=UD"=u0O19^XO8a%eNkQdB\a0=M8Ekk<^QQ&^@M+YrO!8PYB.R08?DoKY%p=;Q7KX?^1G,HmGsU69Z,LRV[0CeEZm3ePhEq\ePj%[S]dNMt$a<bfRW>?Gm]BmIKrF5>,SO/$feQOIonU_,dPT2cUboA*rnfgd'r^hGsAr)j'0o5G_m!]SX8i0Y\bYJ%sc4H$I-_UB$J;%jYamGZQi/N=1a;DrJ#57kqi%0j3[8ZOpdRA&re:8TQ<\*buo5]oOsQUO7OD*ADA"M?Ki_:'%68Q^L[S8!>3XZEZouCYr>;X4>Gt\%!)_lnEY0Y4qhR%/[K1A/9FQ4Zp)-<<46<;#ES];+6sm$!VYa<;VW:H.a6>SDI!C?)75)NrrC]r.QOb[LILg/HM5[!>f'Op*jDqR\%OM!TEYb8@[ae]s/F2nnBnXi%SVLi.R_*_#G'uk,G+<#R">/\W>h[f#i"FA!@`,92Ao$HgEd4@@'.ELkJ&"P$qTXfLi\\-`?Td`ai%WtKE<LjeDW$59uoorq'E0NR2`S#kY_(EiXp3u3l$?H'RQ_E`Z3RifOY'hhBqF#Z]3#&qm3G*Y[p8XMVCFA&!;ND#pE-6_j-A@s>A%#`C$gQV5A]*7K$SKb]^)/0J9n'2cbI;7mu4+=`0[Cb&]T5,*!XOZ8Dki>BL=JZ,+ls41*\K`Yd1M*\U_5X7PAn`<SlkF&DF]9OSc%gCdNS$aKI`kke:[=M^(;<HkC`ERiDJ/9&BgaI5/V$/jj]<;FusrjlCj:>V>j7$7lOE494ZF(-e3\jtlXn%aWB;R#N;[/`PHP>:1k%c&V"KoGWh/!0"<J%d+p#g$AVYR+3edqj=?-MS7!C0oef$.d!l;jAiFU;;>2m<'-2Z8,_^ook!hDmN_K\$je`YZ"ISc%%dc=SQWG:%FM%+#2.;IDdViZ1DA'=L+1c^;Jec`f]0C,51*V8kD'Qb7*X+:/"em/@*8#Qeq4\Q/BL%)]qbH\7,K8UmaZ]gd&Pb)YJLF<Kg7e,D%BI'hgi_/c4RMmC/UUAnTWln0].$hVtVJl`3q[F@"UNXE)lqjtO[4.)F?,X_5KjdTUhOcj9=:TC`pIH'pAf]-J<a]fch'!n>C[.QQ%!LIb)Z\b4Xr@HQ(S$k\fE3Is==#Z3,_na'eN#cPujjZ)Rk-]#oa"(c_?"]-22\r*"-p2iFR(&l78t3UY-?o>$<Dfm&"aI16^6u`r%/:*q!h[?:X<WjT<5Bj3MiVhi^0B;:Ep*/XH4C^WEU5.$.Ncq[.q5hLfR%Ek./<0(V.@QeeLB/jcG45`[hT#6!A,3=._n.c@UlO.B%n"O^d_m$L>gHhXhpH_lHHcl7Ub_^dJIuXt/R]#pi3AtpIoDgDtk:AX`0N--E!.m$)D*/?6Cu!%$fQ5)rbi[Lt,=+'s\^-EODLmmJ%KnuI_M3/`r*ism6S"koM!g;TlJmf+'2pYZ$o)uqGDHSu)q*?\SL]j#=CFip-L!u9!bO0IY^)^ecVaIQNH<$$jBiRYm&]Ok$+Go+W%1/ohe\L?]t0$cuJP8*ip7'(dXK]#*0AcYWXaL2.D>]5@gKKe:pN+-,D?XRl[15[`F\!rX[F\Gps.mU6nI)4ngP3il;>pH"/#!QF`%a@LF@i;eJ7!/+Kg4G]VI7eaQm#H(p/[Y578G9F%u(?XZVl]*]nLe)[^2U95,Ublf9\%1N-I)RC"V^1-VX)08&1Y+OfH^-I[lY^7R%iXU\%q$Ji;$9?tV"dXb"LtIWQ9SFsJ5Q\pVl8mR-Y)OR,W[2c)2/e?q-Vi(Sn+K6&9ubDHQ;jdUMr>SGa_g9Ll3\PLNSH@CYqOKc%9Q<L\3mbCqK'f\\=[NjVfE-DL/ZM:G5\"2?jl[80hu^k)g5nA!)ZqUh^Ja/A>$+j+deWT:djY'sQ'%M`h26+3'_0e]-+GCKOYkt0%&GP/^Y/"XV?TT$1'Q7>crFNY@9Y:k@O-,r2af!aF#G!K[M>ck8S)FYq65Kt54]n=Q/#STfq0*'LDT#OGCA)d#]Cidg0$eY36%_pK%p@\.brB=QfJ3c7Waf;O7<[,^kVFZ,'EqI;A48(RK3^^#f(pCo!<%eEg32B#sAXH%KcCdX74KJTo=pC+(JAk-$OY7HjV.-$a=dqcS%0o#g$Km%uOj;:D`kLmmB*c/leQAIcn(jYb(R?RVOfPKj]p5-J=q86i@W]X/D/JMKnWh2\Tb(GB&BTu-mKPc\KdTA=a355Gb77.ZA%)Y--J!lT?N!X+Y_'EtZ+D?pF>pp"86!;6ksT7I87SUm_s%f:51).#D9lW"59?MY?;r_t<ElVd)$T'$;MN.E<1BSGOqWkLecpjkPn%#U]8XA%_Hh7/AEM[e1?&QmT,/q5Ym^7%!0i0+]j.=o+=hS38*bgW4r?Tt".AiENW/Bo]`/=;%7qF'j^[@@Obbbi27S7GPh8"4=VO%.qrR3no>_E"I=H@Ym\d@aZ"c^4&FK^A]Ia;!m@SkGT68aS&,38luE";Rr+3DEMgM]qgMUB?o<tY$S7.p@i(NG4e'6MX+2gRD9*FD%`&?_d@8_PdDr$XbEad^.q'GQID9=Mg"*N(Ao$ZBZh[rIn.R-koD(<R.F]3`1d$k*kYc6h;TO2-6XTa/PI\%<Z:SOfd;LY3F2s$Bj%(UIhj,`^,Dq^)*dDos`PLJR"jf>LX;)`!]9kFHMb(Zt_KTg(:(i?saO-spIL<!4!Ck#uBN18U/11-aEo'LTNX@eM;%BiZfB+:N=!%:[BusoO+bMqQ>Zs%V"GcGQUVLFi2;$_O"?-FQUKI7u?!]_'"+_o?N1R5L^lSEe183^0r:\P2Il&Zl;X?po0sCBHfQ7A<R%7OnI2J%aFhPT^c]n90NT>NgZJP+'h>Vc_Ae!=p7bT/nb)_,Pm*t*9Z^o!iUCWR%$rd,jg`K[3^$%`5Xh+V-hihn.ktaonQTt7!bD"q`<=j)%Q.3nNeE%&lKfQjZk/a=tFH,,gL?bep`-<a6P%@0(nq?Phkn;uR"73pj[:f)!R$lGG)F&S]`"#&/WR+(oTf:4G\^1S;\l$+Z_4WW'%NC5mUGcS;<275*H2JgcOd:\6_ToX!#[A%Et[1)h>HI5YRjDKda2q;eTSG7IF!Z8I+)@*T'iKE5lF9p2&Yh/fg]lnR<V.N6F[%DC(%l)=4FMWPW_C[(tGJ@A\NH*0Q2:.Zp8a2XMG5BlJ@+o6?%R#aibHVr.`5Ql^+`%ap#ChG3CON:S<hE^i;KU9e<Wns]q'E!Y@e-3qT%M++EE+K^q5W0tecmglCLqk;0t!&uX>h@hil2ob24mCbWbPf)iW0kl:iN:%XD+,Eqe,,Q:2SBL7fYdADe_>/UT<PL_@$>,,r^"tii%j]g"fF"d'`hraZE:7V9^b!ISEMgbb*i#k)=Hhn]onC3ItF-d"@2@'?M4WLOrU-UDT$O`K].3Q.(jlC)dg_&C84FV*K<ijm<N_q/:%OmS_TI?Yr]SZ>"d@)Ud`K`R5P1Rbu_(siA<RUC#_C;t$O@P%,0Ch-RsVg?%PY$,qHfi>Un>U<0hSQ0I>`ssDp^$_8.@j%u9M+dgp%9%>_%6s)^AROlpK)p5!M/+%mA;D;IHT/i.i#)m@f\#6OpV`_PXMr"4h_1AIqoY=)t_7b[NBs3>Ep:#n(Xm3/eriB27mMHZAOlfMR%/HNT`.c06HR/FU+,_R+*Y+d.oF]$!5%$B7<1clI^pnH7TYCj4AC^V]cbCq6J.m8_Db[Fs6@O$gUH,5mZfnM^)f0RK$50e4tjp0Y+%1VO3?`'EIFhbi&6#WKDQTO"uH3?QBn6,FEI,9?&B`ggcFQ`M/s@TX+.ioQKdL9PR"gBC(,Sk'gV"p#3Apq86%NUouk]$;\;\O3h`%fokQ$oPp3%ZWGSX!iq[-S=S1)OoU$e-t<sQoA,GZKQ'W?&amj+_1p?i%>6Z!Rd[a7KKQ=&#SR\EHIZU/1Yp]_FDa,RBsE*A'J4?<%:S7C[:c>p+<HceE.Bj`3OOa6JPSjgeiCH4S*'1@MJX!B0*%"q'J8PmS?@acE1u]^K]M,R*@(XqT$lF/s#=cskVuU7B40b-%o?_RF%1V6hZ1]]$G./(2#*(P3[F\.QYAj-G(X4osBoEIdLJM2S!JM;D"InGj2gm+>Z<Un(Y=BQahdh[Qg>(DR9id#gX,H`P:_arp`2hbD`%"L&6Q4HHFD:!M]TeApp,@i,n-rmcG"kp)uVB3A+6$--)hi2rVr?Wh40m7/EmlFbW,.3:lldc025q@-kmD7:1E[8lhc\U#df73m0Z%o#cAVj@\mX7eDo=kf\@l.P<S37"aKq[lp"QTbqXi@?V.e2%S5pXt+7qX&r,n>9Q<mP#=:VU3>QVmgkCUXWeXM#:*:0=;-DAp"B_@%gKcudnHcDLrA9MKDAE'%]-'H4P0b$OJ:45o0[dmG_Fb)J:cEM#O)8X?o+IQY9K!]*dJ994^8jd<[5t(,R+1QKLC#/>B2+lW#XV%b%fR'u:+JC9GKm`B*VNW,D,#sa!k)2dPZ(n?@%'Xi"DWq-+jRAX\'`9^_oB<dcKc(FdNVNjN-t-2^QOVX@6Lm<S#>fL]Bhu%J"XWE>%ao4qeF_L^>_\1lnY'o)sZ.o*dok\4IIeSc4/bC[h-0^I`m:\OZ>qd.r\DF!FKCZ95Ih<G<q(,jjNc(Hn$V9enjg:lgD(^;kVjgJD%MukSS%QBkh]Q^47:qD)DC0Kc/VfW$!2o/an#`^SRoB?^-p__"#C]M=)e7!D"8YHH*'G(p]obK2T\rHJ`Ej46@<u5qmX;e`>8]u&$%0d`p4Bqd4dp?ehskPeF9IB@fN^4&TQL_o1f`kBtNVPK*e2hVk;n]g-;YYOD;HAH00RhKK;:`H26`+mr'+;18Zq4T:NW;To@]8P4-%&@\PS4qfRSE0V$iZW'5]>J]9?ZT"%EYDq"qOlJMiDl25+9-X&fS$&IRB?W)m_np!+]%S0[X_:U'UK7jTQ1q3al14El'h%QSeZ^.[%5HTqf+i73pHMDNr^^!AN6oX9rN/A/JD`UA#oQWi\`]#f@1l72?.YIj0@E5;8P3e=O=+Tp!Z+qok7Ue"8Cj&PsIWC*nYO6-eO(9M)%a%1V/#A[0qL35L:qZ0sYP$QNL@n$9CHcR@QqYdGY6Iu5#GgVo^;eYqgc!5Ealgf@1Sg%gtR=%9#.>0g-DHq@".bI`m>,E7U*$A$H%@E@^.M^F@"$Q+B:r`m04V;"UjjS>=;FWOcV[:e8M,Y=@PH3&715mF_]6R,WU(%=(4Yn]"R4MDEh1\N7+KA;\_lVA)qq6G4*B,2V#%JDm#,X9ie>jY9P'2:4CR@t[qQdSfWY-aFY,^bN%#G"`K25ih5"N=V+rf10uq[3K#h%:VdJea-*^.[-lU+t^K%rND>rgl$?0Ubt`9%g:[4?.OAM2+OH"4;kgbeYoSbgZ#[rmfWW?<jbhRZHE:B6A\&kf$\\GH>_HOs??W%a\ca3rg3Cq+*c40tN\,)'NpW2XSUhmlOqZq2%6@UhS;;?_Jfr\J?EiE[5\m1+'hQOJ!@.pY$*K)F"XSQ,D_HpF>g<,@oZ,gscG'[UhSW3]DMob3<*En471FoM)@C6m!l'YfBI4==J%e_jhYAPY6lmP,l-6aAUF[@8!BD#c$<Kg@A#FclfcJFeSBbM"/i:5A\1I>D8dak&sq?hX6d8?I_WGGdq<m'VuK"L^:6>#FO7%6:eN%4Z6oD>32H'm9!E!o6Pc&2+JQ(5>iVbXfm;h2S,L5Eg#k7[kG[JG\kkldF[!1`>?e.c`d='?N5K\P$6BO^CqjrpA8>P2PbNc`ojT=%,h4Ar[,2npkX)Oiij!eJd-m%*aH3,(O,Y:(4oP<[^Q$c.@&t)f5$=hX%MesT5uQR$k<c>MhRard\Ok5-0ZuCO/oqa^*40&DoL_$Q%Y#Z">m_r.XTUBO"H7%0Qer.*mI%iFt0r/giTd`Kbl!3;K]uiY_Cr`R?!Bk?t\:Vh=LKKRD@'f+Zl^bgtjqm;on&OP$0%G:V&4X.m%Me(XqEK><&q!R)Ae5[4'VJ%5gZZ?7dT968)houNe,)cta,[`=`&5)9YA&Gn1?sYqG7+A?J,HA42V(/\[9^8d`%I_"ec`4RVNkV@u%RJ]_e":&=-Q32bIj4^j`CkL?P=0*Q'o%6B>m!6WBB"^k2>A1I8e&9m3e#T$d2bk1T7JDr5_g*^`JT(5eJZ1]rKB/qi2:8e)ci8@9%+8a4?_<#rLIp]HT=qdCRK#\-WC.h`9BBu%o\g#dnYe"VT/n&mD54$__0%I\3eQjqA%9%IrO'PrFXOd99DqGauYdXN4Rr)@\VbLLB%`6G>1bt5lI@*K"*]>0k5$C8>nNSYtdM/4r:fV\U*9_pF+@$gk.dV(QCLcfm^!\;&5VTG\74<?H[#:aEQ;X;*[P3u!3Zq^"BrgO#$%BsA,:g278]HYg-]!oGimS//FYF6ZF.3%*@U!IJYA;Zh3J,qK5P9sV)U^qN"f$?.VVW;nkf._sBbga>]>Pm++ar.:Y2U??E'i_Q8r%3UI7Z&WGdk.Wsp,9Iq[jr5K5$p2n=giMVrX!4J224[><;[B&A.X$_)k7$o],L[mfU+9aR?`*E2,0<YFjpp3JlRo*Ib5g?s&2!*A2%%%-RF77@k0'MtUG$04J7;,[e>;_!2u($n7fS]crV/5GQTY)S/gLh+:B-?bS#Y8q$P,.03b,^-I7On'@,'YIE5^^qHG\k.CV">e:!%`#9=_S=bMLP9\I2Mnb?E9%-*!X9.E@0d!3_lO-[L%6\\P>'CAVq`B\,)U)9d_iYZAkrN4Ph8G'3'sd.ZeZQMF^7,//'sW,Ac)/^L%rrT&IkWd3[)3i6sHDj#Cn78Lf@Vq]Pa`ZTY'C36.[(IWNS"8$ln.t5cNhqS(JI=l33P)R7*dN?JcUB7+ad39d+*BqaQ)L6.Y5l:n%F\_3-jq,-739'*=Zt$a%e/W0H6_^Vc1PGA`:aeQk_mmke^90I_k69B;900/"n9MH9I\[bFmZ^Osm[2Pel].+g6HCIh*m=rT?DcMW%L6HGCGd%/g=kkB6^qiQ7)U3r^5U)K-R;Em9?VDt"o>PROM<a1Hk<U44@Rm\*7kcTq0HFMQ?kRE5ocrf8VXompl"FLSUs#8ub2n[U%,>=M=^VI?1?=KpC`YW9/'/u'=/9&I+ZQ-6AG&;<T+B_H@4)Gq#@:r<jC+cK6K%kFS4Va7<WpcoT1Sb0i+WB8Mau1B-lj<q?et`_$%KFC1U@52n%mC[a11ES_H$nB<YaS?KIjVc`*1P!7.Qs%Rhkgd4$<AIC</W?agaN],EAKk2F(UHtq<PXLo&fXCYGUl`TStDiTS*A^'%ruPll8/8$dS_Dd>5Ah=)a]%P(rEH(uVX/(gj@tE.aK\rDL/3@A1&I*I+Fu#]ZaQM9X=at,Xmd%!&nccoSX85]7^48I"iXbi*^&%X%MdI-G*AH\2&M";b:AJPS1j=M$a$0/de;M(MFLr3c*cYa$i9_e>!Rf4#L*DT_g;''l;D)#+T1B<Z;cWMHDK=F7.>?(t/NAo0O)OpW%`.fmAT-Ef63-Sa`nYChX6qS[:K&j954,<T+6rFZTq&rY,&RS!$A05U5-RAtrL/MB/Rb=Ll*_ItD;I)tLoI=DJi#nmgYJTRq<V/*,%`X-)'F9=M4DIeQI0a(Ys0>&t`T?aF\MDVpe-IgFLe_HcjataBpIN3]?dQfQCqnZ;\99pc1d4=8d($CHTUb&2[hXtYGOI]?4+ibmm%0r8'k13J\1/7CgqJfRj/XfenE*g,o@l-A6K>.]NKqJuI3/:\pMI;!9(U'D)Gdbq.j?$.8JO]][OJ;XISJZ,.6f'OpCQ0[fQ0!jQ5%j')nW^M9$?K(Nhf?!_S\DJSV#hopC!M;tb.`ri(F;=YZ93uIo'[N%c7<EFP.@'q]:9dHPk-NEOWOh=!VM).p(m0n_!mrCQj`9Djt%P]2tBIJRZo`47$R5e<Mjm`S0EWH[)P<SV$B!06Z,3dJ##+3(7%;jCWhkKTeiq6\%sq:f4OEglZo`9O$"L>lZ%r7])Ei^)(s=eSO?%86'`IMCQZV,B"kLI#o!To)rB[5>hlNk+bGW&ZVN?1JCbA<0Au2HbC;V=M\Ju7&-K1[lr7$KMlU7W7Z8TkIit^\/>p1@FPqp;VSGB%H<l>;-h`2k.Ag5J?kO<Ekc>[qd#srL9g,psZQRr65CIR>>(52C?[%<%Zq,+>66`HcPJL0sg-f76EX8V4_+)Aj;nWYgUJP@#:3NDb%F"S&q*9PADT"UpYdZ/Ck7B(H2Z)=Q8ab=g&)[2%OR#`,@g3J1?gW=$LA%\A3ORUjpTq;[Nrt&\#bio]E\*;omE<?%p:cgJ]r'Rn'%+'A7TK#_j/KXV'26(oMeGF2t&0EJ?^9'*U.E&.r&[4XI00^jtQ$/ugaXdeqk8Tr1\!h6VH^1jB&O*,`M8A)i,n^WbAj=qk->BT3#%LR=<dY'2bI_\Y%mCo]12aEJ@\X]a81^R&,K"5RroVK;XEL'aNm^(EZjLRf]3]=MHkcg<2sQJkP3;ZMg)2/P^E6XQ^njX:NH^1U'!%ZfQp0kj61+?c<n1`M+>\G[B?7S+UsX.9<an3\?,9mQ16J?A:6(Fqk."Z8f]"OBqaW?8.\Mi.JmmQq<F@/=V@9OrB5U]HNf@O)HB5%V^STC7:rHWkrn]g&lVBuGm#C":3_91ioEI5!$>b?36uPr\;!_<M2NkhP(Ma^3t>bA5BN=;gi(CqhWWpi&\#""EHq/k,8&VD0It'.%9rERS[bl_(;V[nN;^T@j[q4[2g^q4pl=:YQ&qs0>+,ZS2qGOr(?9FC;bb`?=UH:hP7L?8m^!T(5=Es"!M/QMQGu2BuAb4Q<<2P>,%:^(a:Njh&F*C3JB1`L4fGm*,:f[[.ls3!>cU#ha#+At>f`P+-<`I"lFA@n;l+93,#jF/,jm]F*ZI=:L'Z*.#-DXneUG<4k7Zi1&R%Gu!LC@:ZLgH1<ZK3p:?]"e9INmD0pcd7@P$?Ub`$HR#D")WGSKI,j=Mg*p_VX..'E`_bBpSCO-K',aXmnqM/!!n+]ObcE`nVB9hr%@eJB(!Z=cnRAl0*^TE6kp6bS=N`Hqdph'([^P72fA4X)8X"kHkJDoOtb#n+lhPDFu_p,qHp6_Fq!OFQ4L<[kC$]@nTlfCu]Bm!ia%``cYRQ*JD0`p]KN5siPB5kF@V=d?6MCf\R0Yi$I\Qd9UL10T/On,k<U'AG!rV#kAo?5`&f7pH^B<Q84pWf6V_,L.@3_H<k6X"r8p%%Ci`k\&qe\>EuIBF276SooBpb_'p(ogFeJ>04JP:<]O^.Ajr(+AgY]"Y3K.%L.HKI-<GjDG*FBT7BS[Y^.1I+!'K%R"^uojYoKbf%%"QW<]YR/D7()b)Eu?[ok\\OT2p=*in"Y`!cX1(dm1i<hZQ]f3'olN^6/&=HBEbV4`2Fjg0ZM""72Q*'1,G'])osb,\i0Z@0:1"I%DZpD6C8)ip%<4\$%@]ePDO;qWSP#kY;%mu\T%\oWhI^o["GYn^5(i%M24!mNjoojd-&kM2$rE(I3H@Vd]?Tl:23p-\9K'X)B%F^k%Y2<`qm@5Pf$'<V/jK#U7__nugCFg&X-cmHe$94O"I]2NqF&f`edL@q-hhKB*=PI$W%blZF@2<%boIZd0785dremi_qWB"<tP?M$Y%geDP/]%Eh0I>P2JWWuQ(-FN:,bPTA!fT]3tjmt!=[]M922Q=*DrHu,@hQ4k0WSs'WbjHX^k/5?)>Otk:P1t^b\P6nhK,`Bo9!Lk1%/*k#2NU1tqkqog4_5;>:9bB9$9=l6]9*%Tp2Of:kqok2Vo\^_:9p]_Le9OtZhda"[Pk_*\kId0FR<'bJi1+2E*pcX3SU.LjCMm((%I?Hrm4W)Zi9+T=%1%jIZ9Ki/rbM2qk`O.!s'+6l\#tZHJA.4[Z1A1^($II(m=FchhY#RhNa,P<X`W@>7IhfsIG.80<p]0mtbgJ,&%F[KCNl\:7m*H,\!l:P:+iSR860G]"a7?nbIg601m%*_HM00pX:&[Y28fu&%aC@3ek)h=phVcarHQoTb()[cr)HeD-DX.RJ7NHN-8%)iH?^M5b9#Xl#bIZ.R0G7BNki08X./QK9I[n>"qsEg(@Z559Fb]`M]9U-t/kSqHBZ<lG+u$Rt>:3K(+Z<lMWnY)7A><,`"Z$KbHU%KEU76d*fKT<[$FeKr)q/TXP95X,mr!0/TQK@VPVMD/,@_=/HJQD[q]Jb"QDdc6&X3f2M.+-rOk_`<%g<H+>C?[VhY9;i8_b=3s2o%a_aCW=f`S)Wk)RC$Kc`$9taYmU9(q.lG=F%JJs/,*Xr!n&JjSpVi%J;o1TR!["Q`5oD3s-.h;G)TE3KFca$Xl2ToQHR*/qNM=R,e%MaaGP9U3e1&aNc\jJ3n2jYF/Qd?H[f6tNW\abY&5iL-f:-.8_XOIM&a-DG*bEcI$5P`#gW.TXY$8eDRjX(%>67I"CGII^[f;VEU.%(!nI;/c>a?<Nun1)Y6uFX5k2Lm9CD7LoC&\<@gCIno\(d+>+irB5[Op"gg(FipE_JknUT3aj:lIi4KDTDJH*Z\OD,(;0?,<a%mss%.[S*U2D#^kK*&#)O2;lt)re_:)`B3Vh(WS3+q.cc[W`j+\t5b'M"OacMuWMikl+hfJQWhJf\m9>Q`)o+\0),g!L_1/0#2SH>\pAB%RH=0FPfC:#.]WPPAa:%IXH7+3/ujm7Z*ORqk&K#N=]FadHH""S>n>JnZ%+:%Dgt@q%RK(!R5gp]>`34Rl:e@?"XMaL'oBHHEg=Yu%TI>eBK>])<UjKS5^&W2`A=;oHq/b(4,FRQ:'bkdj1m?>UI'gLr2Jc"EZV#l'<'^7[qGo9?kDmg8=MSa3cdGo!e8Sh1l(d0HFI<;1%'Gb`VS_Ie+YSm2I'"+upbcP1t<l)3\AIG@r+0uZ<+,Y:QQS/AY%Mqo\Be3X:C<WZ)GMYq9ONm-H\2;bG'9PM@-lAX^=8ZCP.(_5M%qkS:i.q>j=%%DBR/:F#^&XUMs3$#KN=Hl.sZ6<<f$V9N22i.o#A6-^]@6,T`kc[E$m'E]4%u8YRff"NP>A%Lu+?aY.2%)GC2F+AW%UWM+TIB.:7==g4QEB_$ua,+f,ZSE;Y&uSIs]8PobX,KKK6k+Zk.Q.hL1%G8g.L`70(,-@gCk],P/.,m(9qsD.Id`@*O;fu(qkt3R%O,n!/X7?"eSnA3R;6Fr4L+AUjlm#!kg_$_!Pq:X\dP3&Y1)B%Fop1)\U):HAPDCr/J=KKY!`V-<`0ITFQq/V"-I4+-"iEIeBbn_:%bRgSn!Nb3)NA3Mo8G#mtMt>l4Imb#c0Y1-c;5?,I>'hcX77m$n'kOY+[%t+g\N5j$MfjYS(5jh!/oO-e1^[1C,A((0X`L+0,Zb?%%"h&5,%](UjKkMm\IXHIa3ga(WUZQ#eNoT6Z%N"D.!@R//.qI2OTo>_9NCmYWoqq?[d&bA8I7Nj)Q]Q2U/7N6kK97="Y.`^_LT0O9%:&K.#\/i+58,96D=JZulCM-'e@Sme9Kc>RgQS"G^/VhLTcAG_WU-I(=TYOL&&XUE;idtsP,Si)Q[m`k>+Kg1XrM%Ls85U!-*tnaP%/`fll?\sYB5[&/]k3DP[`!Sn(/0`2B"r5;U1.plJ])BSoZ%NQpN:,26A?"og]Bp>e`FhanG!F_XPu!<;Pr:T:#XMM-;AS7XDUnp]%W=aiE=VD1afj2nQ+'q8],o=N%ikcfjM?UpU`F_uK6:OilH`i7Fk=-GfW*o.u)M]Rd=u(N'E!/f)Tq<d6kculiVMCI(Ce52Nk1R1_%iHhHY:(ULV>V[<2V3&Pb'KH;^JfV6EnA,'"T*'2VN;q4]=?@dH*T'`2K9c,ap8ZAh=R=A8(s:"AUm`jh1?=d-H[.!^1@O=q3(?c`%:KjWKj(B+FU&^pfY3KmV0tALZL<Pf_?g"VrHJd<&?Q0(M<_9A%/#o96hKD1#F]b+FHP%LIjhqMjUT?"GU9l`^2q'5=O(UY0L(Vi;%`Did7L'/(Xjk*.68g&<.$@;,:f$Y=Wg>bumALMo7denS>c%R3Mi/l)sKZ?WD&G/ka009r2hkH*,<IF>IN2["Z7r^?:TF6(`ib2Cc%Lt:rWQp`"i5puB]Z#qe+@r`+^dIgjO9U*-$).Dk3)d^h$QiO<hMOI1[CB03\WjnDrg!k;#D1c,m<)Kj#l[Vm(2SNHjJ8\-9dCNT8%Z+,H8o0E:<2VZ6NCqH&7[G?uAhNJR"K".0rAMa730``i4Ub4!EK]^k)`/_dT`5:*E`/]sQO,1fRg4',k'<VOf&i$p4iI:6A8pn^m%R"0`jAe"-M1I6me?eV)d`PA6k*O&"J>th=3?'bp\(7,Tn6gNnO/2!Gu>Dg5s;$Y:PV1?hV(I^`TI.,GDMk$.[hs:.(+b"ZjEfB)L%ie@m44VcVN[U$/haeP&iQ_]mip)("$Fla6q<b>T`@omTXQ1g.4;M@DbUk&/*6HHrHA+Mgll8ZKOHH.B9L4:U:iJM`qKcDkRh`[@Z%=oYKIU('`'TBFD<jcm.*Kg6\`<s*faM\V4+ULm.5lQ00$oBco_(\"GTU8P18Msm&eTATQX[/NbC$_eu9$5XGH2!!]NCH2:LJ0TII%ZgS%qO`le>GpWIhLnb48;D!jJf$D-\J%Sd+4aNb%2s-_2rd`nHl5q_BKf(ipim/e*lamBMe]G^8@*]iTQ+-M!A(lNc0SfThD>""h%i<[MmBeBl/@q%R^c2g9#-P1#,(50X=lAa0I<'0qb!V$A;7*RV4oUI&PRC=)c4P5U\#SVRA1",+a_nB"k^Vja=XL`ZjHP,k)c^nZe%B</L<Rr:]DCEW0`%j0$gh5;<Wdt2'3;%C4C3.bV-!li@g^_F0cKF/F!?t&gNTu8!:2QY#eppssWrp]"heRmPN?/XE(NA.cl?"Ynu%0`'3f>XY-[0\$tL:C#ke9T0@?P%PHaju.D-E?K%MNBDAU(qWA;M@fP0g$c/Im@5WF1ng1p[<duMSBNXZ&]VE#8+UrjFMT0>0c$+Q%TiX]^0]!:Yi#h])G'K_LbOI*kKXPA))?@>gVU2oRV0AU6UCf>:em4)G'ADF*bV$7i"K%[8,1U04Pq,/UKQ`.Zq)7^U>689qnFf#P%>4sb<e.UFRdg:Ks!so$fDOr%>L-Y:]KZJ\kI2aBrQY?IeA31>H>M.AU4!lQ36O-::#_XoLRhfPk!_5G]+;!B0:G(3>$,:7AHnf^B%VAah,W]`D.cPidZ#3ULh9t!>diD&QaO%go[V7e=o3@C[:SF^>B_)]-)'''b>ij1@3S>N-$8s!W3WV`"pjHS!RV?GMN#UQu*T`i,H%H+O.g.0.#@5DM5*IhG\u:LHHKi<@)LB#.VBAP<=AlH>@4*Z1rRUO$gWHA\[V5a2S!%Y[!DSJKm=m'L3>50giS\(>4^lu(Q$?&IS%%e]V7B<[2Xs:EP):cC5,"F=obqo.q1Eed\o4f\8[<Wbi).:Gl4@`kl6.i@pT/Fje[nN7flN!!n()aRapWdZ_A+Y+$rLRi'=`nE';s%@[&!np%q*]hJ/p$AW#SG1Z$R8KR"C0oHoT5Dt,i0"7_Rn/2;Kn.tLKjGN'V.!uUlqNXQ;n4%T^kj]s*/)sDf5]0e#jUcKE*a&pFn%8.I5MGVHe"PuZ]I3GS6G;e3P6!2<C2`6A*bNaN.(T/"Wc!J)`O9PY+kGU&+"`NV%N0G%#(`f07[9g+FK.+1V]9oG(`USr&8q[Mum%_G#`K+0.rs%1'/e#4YZO\+!P'N@L`VI#&0c;&dF79JnigAjq:Z:VW88>tZY]Y9/6/h2/l2e=3hi5Sl+`@u:6W,`0#IE&)11%I'd_%4,0[t>92=!PIc8E6I.G'#m2Zun(><8?2gWmBrT%6NgmWI`u%GRn&%rlg5:T+.1;UVB,6TP'2$Qj&NmFOW1Cehp8=-XbVp!'GKKU[%"P1YHm<!Ekbu\5.ELO6[-AsS6[=!li/Vk2tq,',2+d#]fP*fiTn/8.aEmD6)k#4(+DjS<,`4Ts(%XZRrBg'DLH[A@&H?_OMHH7t<%f*FNY<$8JrEnH@nI3A]QT(k!+J4u`<N9Y"rc&fPk#U9d43HTM:Lac1B5;m>6iS\k!W"+[*N$"qO65&,m]+u%EV/[3O`cZh_I3>d%%8C^U?<W(YG5IDa5/hrOW+earD,nMg5TrN>Y`Q4b5fnN?\:\L@0OM8cZ&Fd8@S]2?H`b8LK)%t^iXKfO-DO22\=(M8L2]:]%-GU;Z%.Jl1,boor*DU6Bq`[-2(K=TX:M2RP@J8t!Lo>,5>7c_pMPj-0A-T\`9a$0<ShY"HiXL^fqH@LPinSW4t!)Dk5;m&XuX(m>B9nsZo%="D98hW1tN;[/jo)WP/L\4,/\ab=kCP<Oh;Igk[4CkP6q4!#LOe\a>ors&m9H:7[n+)Jqr?1bT73JZ`dDag:g-l`M]*FVF_V[d:+%!,)QN*H[a57*TfuECR)6OQ6T'e+n_t(#ll7oH=<M@C+#pLp0`!LMg=I0d?42;%<5g0o$T+B&Ve9Em\!pZJC.c6G=aR9i^$rLEZO\%&JD!oM7!LaQkM4/"o>H3]&%o]#76kRgDTYnGuiZ1FB2$g,%]e3c>G__s%aAU-IKp$MY9.P(9jBf]>W0$!ZXArT`3KH)CMKOMbj5/%\-.tBPZ5C.h\63fB&6q)VaO_.9d=?rOKa?C/>rg.Z(AeMSibL;67'imNP4tRaWmfbFEEeA=r:a1$LrhT-,c2lj3Wc74:brPCfiE!%L]cq%T86Q>nif(+Wc?O$9ft$Z#3>:C04hu]kNt-3UH\X`^T.)6\?b?.Zc`T4K;YdXpHLZ0,#0@t-gR!!FfA0n]mD__%MSZR"HEXp%[olcHY_9)J)GU%F)OXW89GO2pk=0SR!#;Pl\(h?/;/kNL8_'J9i2K-rrWrGu)-Wh@0u[8PL.X2s.0%(>*P%!.c7]pLU+E?fc$W,,%2aEh_^.l,2=f>rDc@fdN)JqoX!,._U_[S=#[1]IurfCe6JUer'Lqh39K7pg9X(#:aGQZlt@B'*;'S"pcp2ftBc>^omPZ_+!$N1G#%-&f)GOH>G!)KR$cC_\r<"kHHY:N_m9&)O3b^+pfR`A?q,]^J8`dMoNY*@=?=Md8AZ_^J:!%-3%JiuNSqWbT>\-=JV0%">qaBVfc+%3iQ+6*Lt$F^G"V(&$,S7L->@NP*UZ9e7-i_/2(0<kfFRB8S=ros+ckpf5*0U$a$@#)V=s=,9H""&a!"I<1kf'+K68c^:PjZjc+OI%DN8k6F^=>Kn?M"5/tWS+Q8"a(%Pb4/kU[[N.3/hsl+(L@qUhKp*89Bu\fSJ<)qfb6qb`2m]^8lK(A[Zg:,^g-Y:Js,LWZ.?PQQ$C%*86IO2<a]f&`;*<h8I6,aZ!oW=Oi[UXkC?g#BMOVioD16B(]F*V8UrqBqaf:h0Q)UG<Zd8N?q@qisuUt@K0!1mk(0j>c_4?S>;3a%->pc7S>QWCp:I<iE6ugP2momOQ/+0/h(.]HVH<J[HiETY!b5f`l'2FhTW%+?`P!cXju9L1FdOClH=c"6:tG71L>r'6Q-BJjO2%4#%]_PTP/:=['$=CpL=L>b>SG8FXp.Fl:d??)k"O?Y_?ALI#geN=O/&bpRr3BCWQ;#'[jh.SK0+1Gq*e%67e^mglbO.prAJ_fC3He*h%71YN-c"dg_T\3_Xai&YRoo5em\RbZMk.h4c\no"@i34K];=qZ,To85j28JOH@gQUM<\/(CBe7)LLTS"#U9'7_9JB`\cCXh-IpI/(%Wp1LF?$$(YloCfBYuZT43d)Vu3qd,#pJCa-r/*(om?ip\k;#IP1a$dB2=92J1#u8HkNU'e.5W1-]O*'r#*#us.)(i#cY]I3mD^ct%#FkNs[#OsnHpUaq,J<=!@9_Iu95;QW#)M\%Al"0[3`BY')[LqZAO`4O[en!&bYOYo5fdbM9+C=A1d:fLM@*!GZ,E+Mj@T7$YNV=X%)es?g+>u*u_f+;;i!@59C;I1>T$W(15W::)@A34WJA0'9gF;Wg"m;u>DWa-%64'gZ23f<I@,>hc3DX--j<Zt,l<-`@F2%$#oP7T_%'&8UGJm\5a#^Z>W22SK1Z[E"h(AqShiRV;%((lU]=W7=(_EiY@irA$[XFcU;M!ohs8W=PC3CKuG&[[LBK(<3iDLZFn*K4@_1_m:H%J*EHR\,>f@gOK$CTATY9^W1#e5&'G3-kje2OEL'k%se]bi#%"S*Ql$;)*C,P[EdNpIa$H82I(8*KjoZ/pJ]O*1.6WcB:n)[lo%2k%MhO#&'r-4q=RHcIprA*pQWm.u9C`GigdmKI%loc:R;"X3]tS4XLBd"hrp]O6+5V`df'#FoE$Jj?BU'4J9UUXdcTaB_TNpbB7ukL;%rD%";3Q185/3?:a<?#9%[/C*Eo]L`!q<\]r@:BF_1&h=2,X44=C5`&,@ENarK!<KdAKGV2q-qn%p;q+kGmOP!IFInN%+CjJiTI[7%]F@em\QoJ6B(\kt<9'egp"2]OqB$WPB&g-?Q63#D]JHUmI6C7Fo^5h^$;#tU*AenQ[/;.YoI#.^q<cMr'?QI_i-WMXnP?I"paW*h%+mKSu&<f:2>pn'OrU\(R.HOPf:8gtYgG!%UfBLm5VO,VGs2Z&UkoYA'qnr:Z-.Uc/ko0s.)#Ytf.uaGC@7#s)<mm=YG$FX*hF-]R%IXT]9NssI/r7U8B5J%@:"8D-WQ\t^6__^Ni@mR4s?HtbrPIeh(C3@b9:\&5)C0[n7^-"i'K@HA__UY:f\i9RT'Br<lmdo2j`?>-2%#uLW)nXIl)p;]Dr2ue='?iK*#r3+G]rP*j^\,Yq>If.YZrJuI*kJ.&Cs7Wr%rUoo7qsi#4rjVq)msk/f^\l9iro_&pkJ.%hn%\e^%TE"<Is8JYjp##cJQ[f%mrq69lnno)$s3j42a8b,5qsj[eiJ5,i~>%AI9_PrivateDataEnd