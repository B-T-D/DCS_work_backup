%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 007x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 258 106
%%HiResBoundingBox: 0 0 257.3999 105.3003
%%CropBox: 0 0 257.3999 105.3003
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 5580 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2BFF7D7D527D527D527D527D527D527D527D527D527D527D527D%527D527D7DFD63FF527DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87D52FD63FF52FD1BFF52FD63FF52A8FD19FFA852FD63FF52FD%1BFF52FD63FF52A8FD0DFF84FD0BFFA852FD63FF52FD08FF7E27A87D52FF%7DA88452FD08FFCA52FD63FF52A8FD07FF5252537D27A853A853527DFD07%FFA852FD63FF52FD09FFA8FFA8FFA8A8A8FFA8FD09FF52FD63FF52A8FD19%FFA852FD63FF52FD1BFF52FD63FF5252FD057D77FD137D5252FD63FFA8FD%067D5276FD057D27FD067D52FD067DA8FD6AFF52FD06FF52FD06FF52FD15%FFA8FD48FF52FD12FF76A8FD05FF52FD05FFA87DFD15FF7DA8FD47FF7DA8%FD11FF52A8FD04FFA852A8FD05FF52FD15FF7D7DFD47FF52A8FD11FF7DA8%FFFFA87DFF52FD06FF7DFD14FFA8A87DFD38FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF52A8FFFFA87D7D%7DA8FD05FF52FD4DFF7D5276527D5252527D5252527D5252527D5252527D%5252527D5252527D5252527D5252527DFFFFFFAF7DA952FD06FFFD2B52A8%FD22FF52A8FD26FF7D7DA852A8FD2FFF52A8FD22FF7DA8FD29FF52FD30FF%7DA8FD22FF52A8FD29FF76FD1AFF7DA8FD14FF52A8FD21FF762727A8FD12%FF7DA8FFA8FD10FFA8522752A8FD16FF7DFD05A8FD11FF522727A8FD20FF%27F8F87DFD11FF7DFFFFA87DFFA8FD0FFFF8F8F8FD17FFA8FFFFFF7DA87D%FFFFFFA8FD0CFF27F8F87DFD20FF7DF827FD12FFA8A8FFFFFF7D2727FD0E%FF7DF852FD16FFA87DFD05FFA8FF527DFD0DFF7DF827FD22FFF87DFD12FF%A8FD04FF7DF8F876FD0DFFA827A8FD17FFA8FD06FF7DF8F8A8FD0DFFF87D%FD15FF7DA87DA17DA87DA17DA87DA17D527DA87DA87DA17DA87DA17DA87D%A8FD04FFA8A8FFFF7DA87D7D27277DA87DA87DA17DA87DA17DA87D7D4BA8%7DA17DA87DA17DA87DA17DA87DA17DA87D7D7DFFFFFFA8A8FFFFFFA87DA8%5227F8277DA87DA17DA87DA17DA87DA17D527DA87DA87DA17DA87DA17DA8%7DA17DA87DA17DA8A85252527D527D527D527D527D527D767D527D527D52%7D527D527D527D27CAFD04FFA8FF7D52527D7D7D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D7D527DFFFFFF%7DFFFFCA277D527D7D7D527D527D527D527D527D527D527D767D527D527D%527D527D527D527D527D527D527D277D7DA1FD1AFF7DA8FFFFFFA8A8FFA8%7DFD27FF7DA8FFFFFFA8FFFFA87DFD27FFA876527DFD1AFF52A8FD04FFA8%FF7D7DFD27FF7D7DFFFFFF7DFFFFA852FD27FFFD047DFD1AFF7DA8FFFFFF%7DA8FFA876FD27FF76A8FD06FFA876FD27FFA85252A1FD06FFA8FD05FFA8%FD09FFA8FFFFFF52A8FD06FF7D7DFD0EFFA8FD0DFFA8FD07FFA8FFFF7D7D%FFFFFF7DFFFFA852FFFFFF7DFFA8FD06FFA87DFD07FFA8FD11FFFD047DFF%A8FD047DA852FD04FF7DFFA87DA8527E7DA8A87D7DFFFF7DA8FFFFFF7DA8%FFA876FFA884A8A853A8527E7D7D7DA8A8A852FF7D7DA8FFFFA852A8A8A8%7D7DA87D7DA87DA87D7DFFFF76A8FD06FFA87DFFFF7D7DA87EFF7D7DA852%A8A8A8FF7D7DA87DA8FFFFA87D7DA8A8A852FF7D7D7DA8A8A852FFFFA852%52A8FF7D52FF2752A87DA8FFFFFF7DFF7D7D7D53527D52A87D7EFFFF52A8%FD06FF7D7DFFA852FF5252527D7D7D527D7D7DA87DA85227A8FFFF525253%7E52A87DAF5252527D59A87DFFFF7D7DFFFFFF7DFFFFA852FF7D5252FF52%A87D527D7D52A87DFF5252A852A8FFFF7D287D7D537D7DA87D527D7D7DA8%7DA8FFFD047DFF7D527DFF7EFFA8FFFFFFA9A8A8A87DA852A8FFA8A8FF84%FFFF76A8FFFFFF7DFFFFA852FFFFA8A8FF7DAF7DA87D7DA8FF7DFFA8FFA8%A8FD04FF7DFFA87EA8A8A87D7DFF7EA8FFA8FFFF52A8FD06FFA87DFFFF7D%FD07A852FFFD06A87DFD04FFA8A8FF7DFFA8FF7D7DFFA87DFFA8FFFFA876%527DFFA87DA8FD0CFFA8A8FD08FF52A8FFFFFFA8A8FF7D7DFD09FFA8A8FD%13FF7DFD08FF7D7DFFFFFF76FFFFA852FD09FF7DA8FD06FF84FD0CFF7DA8%FD07FFFD047DFD1AFF7DA8FFFFFF7DFFFFA852FD27FF52A8FD06FFA87DFD%27FFA876527DFD04A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1FD05A84B%A8FFFFFFA8A8FF7D52FD04A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8%A8A8A1A8A8A8A1A8A8A8A1FD06A8527DFFFFFF7DA8FFA827A8A8A8A1A8A8%A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1A8A8A8A1%A8A8A8527DA85276527D5276527D5276527D5276527D5276527D527D5252%527D527DFD04FFA8FFFFFF5252527D5276527D5276527D5276527D527652%7D5276527D5276527D5276527D527DFD05527D52FD08FF7D527D5276527D%5276527D5276527D5276527D5276527D5276527D5276527D5276527D5276%527D52527DFD19FFA8A8FD05FFA8A8FD28FF7DFD07FF7DFD48FF7DFD2FFF%7DA8FD05FFA8FD48FFA8A8A8FFFF7DA8FD2BFFA17DFFFFA87DFD4AFF7DFF%7DFD2DFFA8FF7DA8A8FD48FFA8FD35FFA8FD05FFA8FD43FFA8A8FFA8FFA8%FFA8FF7DFD27FFA8A8A8FF7DA87EFD04A87DA8FD42FF7D7D527E7D7D527D%7D7DA8FD25FF7D7D527D53FD057D537D7DA8FD42FFA87D847D7D7DA87D7E%7DA8FD26FF7DFFA87D7EA87D7DA8A87DA8A8FD46FF7DA8FD31FFA8FD06FF%A8FDFCFFFDFCFFFD2EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T09:37:42+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T09:37:42+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T09:37:42+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>108</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FWK/mnfXtj+Xev3dlPJa3cNm7Q3ELFJEbYclYbg+4xVR/5VlYf9X7zB/wBxe8/5rxV3/Ksr&#xA;D/q/eYP+4vef814q7/lWVh/1fvMH/cXvP+a8Vd/yrKw/6v3mD/uL3n/NeKu/5VlYf9X7zB/3F7z/&#xA;AJrxV3/KsrD/AKv3mD/uL3n/ADXiqQ+dvKZ8u6AdX07XtcN3b3lgqCfU7qaMrLfQxOrxu5VgUcih&#xA;xV6dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYf+cH/ksfMf8A&#xA;zBv+sYqzDFXYqwCD837F7zVLefSLu2j0z6youpHt/Smktbk2pSP95y5NLG4FR2HdgMVTHT/PU2o2&#xA;fl69j0+ayh1e9nsrqK5QerDLbidGjZecbKTJbkhuLfCN1BOyqJ8r+eINe1G9sP0fcWMto86I85iZ&#xA;Jvqty9pM0ZjdzRZoivxAVxVkuKsP/Nr/AJQe4/5jNM/7qVvirMMVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirD/AM4P/JY+Y/8AmDf9YxVmGKuxVIm8ieS3aZn0OyY3&#xA;HqevWCM8/VZmk5bb8mdifnirZ8i+TONuo0SyRLSVp7ZEgjRUlanJ1CgDkeIqcVVtM8peWNKvGvdN&#xA;0u2tLtldGnhjVHKyP6jgkD9p/iPviqbYqw/82v8AlB7j/mM0z/upW+KswxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLfMuuR6DoGoa1Nby3UGnQSXU8MHD1DHCpdyPUaNdlUn&#xA;r8sVTLFXYqhdW0rT9W0240zUYFubG7QxXEDVAdG6g0IOKsW/5U7+XH/Vo/6eLr/qrirGPMv5X+Rr&#xA;bzb5Qs4NNKW1/dXiXcYuLmkix2E0iA1krs6g7Yqyf/lTv5cf9Wj/AKeLr/qrirFvL35YeR7jzz5t&#xA;sZtNL2lj+j/qkXr3ACetbs0lCJKnkw74qyn/AJU7+XH/AFaP+ni6/wCquKsW/LD8sfI+qeRtMv7/&#xA;AE4z3c3r+pKbi5BPC4kRdlkA2VQMVZXF+UH5dRzRTLo6l4XSWPlPcMA8bB1PFpCDRgDvirMcVdir&#xA;sVSvVfMNrpt/p9lNDNI+oSCKKSNQVViaCtSCetTxBotWNFBOKppirsVdirsVdirsVdirsVdirsVd&#xA;irsVdiqUeZfNGneXre1lvI7md764+qWltZwSXU0kvpSTlVjiDNtFA7E+AxVJv+Vm2H/Vh8wf9wi8&#xA;/wCaMVd/ys2w/wCrD5g/7hF5/wA0Yq7/AJWbYf8AVh8wf9wi8/5oxVLfMfnHSte0K/0WfSfM1tba&#xA;jBJbXEtvpFwJPSlUpIqmWGVRyUkV4/LFUfB+ZNlHDHG+jeY5nRQrTPo90HcgULMEiRanqeKge2Kr&#xA;/wDlZth/1YfMH/cIvP8AmjFXf8rNsP8Aqw+YP+4Ref8ANGKu/wCVm2H/AFYfMH/cIvP+aMVSqfXZ&#xA;PMXnfyk9no+rW0GnXF5Nd3F9YXFrEiSWM0S/HKqrUuwFMVTv8xtW1PTNBFxpuox2F4ztHbCRY2M8&#xA;7RP6MQ9X4FX1KNIx6IGNRiqX+R5pJvPHm+aRkaSSLSHdo68CzWZJK13p4VxVnWKvMvy5822OheTr&#xA;DSdU07WoL+1M6zxLoeryqC1xI4pJFaujAqwNVY4qyT/lZPl3/lk1z/uAa3/2R4q7/lZPl3/lk1z/&#xA;ALgGt/8AZHirv+Vk+Xf+WTXP+4Brf/ZHirv+Vk+Xf+WTXP8AuAa3/wBkeKpNr3mLyprM1rJOnmOJ&#xA;bWaGcRxaHraqWt5BKhFbI8G5DizJQlCVOxxVOf8AlZPl3/lk1z/uAa3/ANkeKu/5WT5d/wCWTXP+&#xA;4Brf/ZHirv8AlZPl3/lk1z/uAa3/ANkeKu/5WT5d/wCWTXP+4Brf/ZHiqrY/mF5cvNTs9NVdRt7u&#xA;/dorMXulanZRySJE87IJrq2hi5elC7ULb0OKskxV2KuxV2KuxV2KuxV2KvNfzF/MLyTpXm7ypZal&#xA;rVra3emas9zfwyyBWhhl0e/jR3HZWeZAP9YYq9Esry1vbOC9tJFmtbmNJreZd1eORQyMPYqa4qrY&#xA;q7FXYqp3NxFbW8txLX0oUaSTirO3FRU0VAzMaDoBXFVG01XT7sW/ozASXUC3UNvIDFOYWp8bQyBZ&#xA;VpyAPJRQ7HfFUVirsVdiqHv7PTrmH/T4Ip4YqvSZFdVoNzRge2KvMfIv5ieRb/8AMrzNDYa3aTvq&#xA;p09NMjjkBM5htW9QRgdeNN8VerYq7FXYq7FXYqhb7VLCwe0ju5fTe+nFraLxZi8zI0gQcQf2I2ap&#xA;2AGKoa38wWZEYv1bSZri6ezs7e+eGOS4kSpHoBZHEnNVLKAa03piqZ4q7FXYq7FXmv5i/mF5I0rz&#xA;d5UstR1q1tbvTNWe41CGSQK0MUuj36I7jsGadAP9YYq9FtLu2vLSG7tZFmtrmNZYJkNVeNwGVgfA&#xA;g1xVVxV2KuxV2KoOXWtGikaOW/t45EJV0aVAwI6ggnFVn6f0L/q5Wv8AyOj/AOasVd+n9C/6uVr/&#xA;AMjo/wDmrFXz/wD85CflrpXnHz/5O1Oxu4Ggvp10zXpYpY/3dvGTOsxoevpCVeTdwi+GKvfota8u&#xA;wxJDDfWccUahI40liVVVRQKoBoABiq79P6F/1crX/kdH/wA1Yq79P6F/1crX/kdH/wA1YqjIZ4J4&#xA;llgkWWJvsyIQyntsRtiqXag0cmt6TbGS8jkQ3F4n1cMLZxFH6BjumAoR/pXONCd2Xl+xiqE8zX2n&#xA;wWWoz2c1svmOGyuIbF+dslyrunNI1a4+BeUioaP8FaFtsVeRfkj+bHnaTzJqvlz8yY3trq7ke70m&#xA;/lVRbgqP3lok0dYeKqvNKH+bfcYq9t/T+hf9XK1/5HR/81Yq79P6F/1crX/kdH/zVirv0/oX/Vyt&#xA;f+R0f/NWKvnv8pPyw0Xy3+enmvWZbi2j0fTKny+xkUIf0kC/7piaH6vFyhb54q+hP0/oX/Vytf8A&#xA;kdH/AM1Yq79P6F/1crX/AJHR/wDNWKu/T+hf9XK1/wCR0f8AzVirv0/oX/Vytf8AkdH/AM1Yqr2u&#xA;o6fdlha3MVwUoXETq9K9K8ScVULiWca3ZQpewRRNBcyS6e4Bnm4NCqyR/ECEiMlHND9tem2Kq17d&#xA;abbiM300MQ5cojOyr8S915HqK4q8L/NH84fNPkbX9D0/y5a3ev6Fau93r2oSKLr1op3Yi1SdFono&#xA;qaq3X7ANQG5KvY9H86+VdX0u11Oy1S2a0vI1mhLSojcWFaMjEMrDoVO4O2Kov9P6F/1crX/kdH/z&#xA;Virv0/oX/Vytf+R0f/NWKvn/AP5yB/LTSvOP5h+TdTs7uBra9mGm6/LHNEPTt4S1wJSQepi9VeR7&#xA;hF7jFXv0WteXYo0iiv7SOKMBURZYgqqBQAAGgAGKrv0/oX/Vytf+R0f/ADVirv0/oX/Vytf+R0f/&#xA;ADVirv0/oX/Vytf+R0f/ADViq+LWtGlkWOK/t5JHIVEWVCxJ6AAHFWB+RPJ3lHVItfu9T0PT767b&#xA;X9WVri5tYZpCFvHABd1ZtsVZP/yrn8vf+pX0n/pBtv8AmjFXf8q5/L3/AKlfSf8ApBtv+aMVd/yr&#xA;n8vf+pX0n/pBtv8AmjFXf8q5/L3/AKlfSf8ApBtv+aMVd/yrn8vf+pX0n/pBtv8AmjFXf8q5/L3/&#xA;AKlfSf8ApBtv+aMVS38n4oofINpDCixxR3epJHGgCqqrqNwAqgbAAYqnrXUZ82R2g1IiRLCSV9H9&#xA;MUZXmRVufUpX4eDJxr+1XFWH+UfKXlTVtY85XWq6LYahcjXpYxPdW0M0gQWdqQvKRWNASdsVZL/y&#xA;rn8vf+pX0n/pBtv+aMVd/wAq5/L3/qV9J/6Qbb/mjFXf8q5/L3/qV9J/6Qbb/mjFXf8AKufy9/6l&#xA;fSf+kG2/5oxV3/Kufy9/6lfSf+kG2/5oxV3/ACrn8vf+pX0n/pBtv+aMVd/yrn8vf+pX0n/pBtv+&#xA;aMVd/wAq5/L3/qV9J/6Qbb/mjFXf8q5/L3/qV9J/6Qbb/mjFUi0LQ9F0f82NRg0nT7bToJNBs5Hi&#xA;tIY4EZ/rlyORWMKCaACuKswuIro61ZSx29u9usFwk9zISLmPk0RRIdjVHKVk3H2VxViXnPSNJ1X8&#xA;xPKFpqllBf2v1TV39C6iSaPkotKNwcMKjFU6/wCVc/l7/wBSvpP/AEg23/NGKu/5Vz+Xv/Ur6T/0&#xA;g23/ADRirv8AlXP5e/8AUr6T/wBINt/zRirv+Vc/l7/1K+k/9INt/wA0Yq7/AJVz+Xv/AFK+k/8A&#xA;SDbf80Yq7/lXP5e/9SvpP/SDbf8ANGKu/wCVc/l7/wBSvpP/AEg23/NGKu/5Vz+Xv/Ur6T/0g23/&#xA;ADRirv8AlXP5e/8AUr6T/wBINt/zRirGPPfk7yjpcWgXemaHp9jdrr+kqtxbWsMMgDXiAgOiq2+K&#xA;qnlrWG0TyZ5y1hIhO+natrt0kBbh6jRXMrhOVDQsRQbYqx28/Nnz9b6Lpl9b2lhqL3s14ly1pbzS&#xA;rbG3VTBbTrFcymOecNzPxNx+yFc74VZ55d1LzE3mrXdP1aUPbJMsulxrZyxqLZra2IP1nm8Z/fNK&#xA;vEjkWVjstFAVEeZNYNjregRNdJFbXF1It1Dxk5sv1abg3NHChPV4qVZDUkdCMVYJe/mx5qtdN1Oc&#xA;pYNLb3KpZyLbXbKbc6qNN5SRLIXZpEdZ04N0NKGtcKozT/zI84GPTZNTs4LeG/mhjjnFndqkkf12&#xA;W3mmUtJ+6VoVinQSbgNQ8qg4qynyNqXmC5XU7XXZhNe2d5coONpLbKsJupvQpIzyRyBrcRuoXdVI&#xA;5Fia4FQ/5S/8oPb/APMZqf8A3UrjFWQxy3p1+4i9e2NklrCwtlr9bWV5JRzfenpOq0Tb7StirGPJ&#xA;MssMnnmaGIzTR67cvHCDQuy2NqQoPudsVY/qH5neaYvLNpqVmlvNczOReO+maksds4tmmFs0IZpH&#xA;keUekHDBQeorQYVUT+Z/nhLrUBcW2n20UEM0kNu8NwZ45I4LiYJKfVCNxa19N6cd3UjwxpC+2/M7&#xA;zoNLnv7m0ga1T6zHbXcWn36pNPHFBLCnpSOJUBaSWFmYU5LyqKFcUppqHm3zlpi+cJ4oxqslkovN&#xA;Aso7KdVe2a3tir+usjK6iRpqx/bYqxBAooCsi8geYNV17y6mo6nAsFw0sqLwjeFXRGoriN2lI22N&#xA;HYV79sVYrYfmH5ym1jVIbjToo7DTpg9wVtLsvb26X4t3V3LBZnkteVyjRLRQtCrbHCqM0Xzf5k1G&#xA;40G8kmSKw1AXkE8CabdEtPFdRpCWJl5QcoOT/HsoDE1/ZVSXQ/zR853i3E1xbW0ljaPAby7t7G9V&#xA;YUe6e2lUhpG9RgirOGjJAWoI6NiqfeWfNfmXUb3RLm+dYrPVrBJGs49PuNrlGZZ1Mpkb0eJoT6g6&#xA;bdd8VRtv/wCTfv8A/wAB+z/6jbrAqdalaxvr2jXJ003UkJuEXUQ4X6oskVWLISC4l4BNgaHFUl1/&#xA;/wAmd5Q/5g9Y/VaYqkF35x8xN+ZcenTsNO0yzmuoVQwXZV4RYiWO5nm5LbSI8x+BFAccSOW7YVQ2&#xA;rfmP5k03ydp15pno3d+0t7HdLLa3dyZPq0hEYjVZo+BkDIw9ST7JotTQY0qPt/POs3XnC/0HUlj/&#xA;AELCbhbme3gvbSe2ijiilile6EjR/EZfSohDchXxAVSxvzK8yab5U8nPawnULu4sLV9dkuYJnYug&#xA;gS5QSI6lZ19RnIMbdKmgxpWY+W9e8yX3mjVdLvlthZ6UBymihlQym5PqW3B2ldfhgH7wcftHamBU&#xA;B5086eZ9H81aXpem2CT2d2sLO7wXErTtJcrDLFFLERHC0ETesxlBDDbbc4qld35484XMep2Vp6dv&#xA;qGlx281zINPuT9i9eK6VEeT94PQVJfgLHi21aggq3qf5hea4POGm6JYra3MN7Bp0zK1hepOVvZp4&#xA;Jpf71khWAW/rcZaErVa13wK2vnvzRf2N56LR2Nzpn6KkvydOunKmaRV1GMRtIpdYSGJZK/DUVqOe&#xA;FU1/MCZptD8tTPUPLrmiu3KNoWq13GTWNyWQ/wCS246YFSDy15r/AC4g0/zNoXmbXNJtmm13Vhc6&#xA;df3lvC5je7cryjkdWAI3BxVO9D86fkrocEsGl+aNDt0nk9adjqlvI8khULyeSSZ3Y8VA3PQYqmX/&#xA;ACtb8rv+px0P/uJWn/VTFXf8rW/K7/qcdD/7iVp/1UxVA6v59/J3WLVbTUPNmiywJLHOqLqtvH+8&#xA;hcSRtWOZD8DqGG/UA9sVR3/K1vyu/wCpx0P/ALiVp/1UxV3/ACtb8rv+px0P/uJWn/VTFUL+T00M&#xA;/kCzngkWWCW61GSKVCGR0bUbgqysNiCDUEYqyK2hmGvX9w9hFCjQW0UWoqwM04jaZjG60BVYTKSu&#xA;5+22KsF8r+d/Jeh615xs9b1/TdLvG12WVba9u4LeQxtZ2oVwkrq3E0NDirIv+Vrfld/1OOh/9xK0&#xA;/wCqmKobUvzF/KLUrCewvfN2iSWl0hjnjGqWyckbYrySVWoe++KqsH5oflVBBHBH5x0X04lVE5ap&#xA;bO1FFBVmlZmPuTXFVT/la35Xf9Tjof8A3ErT/qpirv8Ala35Xf8AU46H/wBxK0/6qYq7/la35Xf9&#xA;Tjof/cStP+qmKtH81fytIIPnHRKHbbUrQfqkxVB6P5+/J3R9Pi0/TvNmiw2cPIxxnVbeSnNizfFJ&#xA;M7faY98VRv8Aytb8rv8AqcdD/wC4laf9VMVSjy75i8v67+a2pXWh6naarbRaFZxSz2U8dxGsn1y5&#xA;bgzRMwDUNaYqy3VVh/SWiu4uy4upFi+rcvRDG0nJa7A29LipCk/7sKeOKsU8765oui/mF5QvdZ1C&#xA;20yy+q6tH9ZvJo4IubC14rzkKrU02FcVTX/la35Xf9Tjof8A3ErT/qpirv8Ala35Xf8AU46H/wBx&#xA;K0/6qYqg9O8//k/pxujaebtGQ3kzXNwX1aCTlK4AZv3kzcdgNhtiqM/5Wt+V3/U46H/3ErT/AKqY&#xA;qhdP/ML8ntOSVLLzVoMCzyvPNx1G0q8khqzMTLUn9Q2G2Kor/la35Xf9Tjof/cStP+qmKu/5Wt+V&#xA;3/U46H/3ErT/AKqYqgYvPn5OQ6vcaxH5s0UajdRR28836VtyGiiJMa8DNwHEuxFB3PicVR3/ACtb&#xA;8rv+px0P/uJWn/VTFWN+dvPnkbWV8v2Oj+YtM1K+fX9JZLW0vLeeUqt2hYhI3ZqAbnbFXpuKuxV2&#xA;KuxV2KtMqspVgGVhRlO4IPY4qlN7Z3enCbUNLjmuzDaJb2ugRyQwWxMTEq0fJR6cnFuP2wtABTvi&#xA;qPg1CwuLq5tILmKW7sii3lujq0kJkXmglQHknJTyXl1G+KoLRIYTdapfDT5bG4urpknaZuRnFsqw&#xA;RzIvJgiMiDiKCvUjfFU1xV2KuxV2KuxV2KuxV2KuIBBBFQdiDiqW3GkvFKLvTZGhuILWS2tbEuy2&#xA;JJo0ZkhUEAqy05KOXEkYq3bauqzRWGoUh1RbNbu7EaTG1UA8JOFy6JG3F/2SQ/GhKgHFVGe+gudf&#xA;sbK21Jo5oImv7iyjj5pcW0itDGWl4lVAkPJaNU8fDFU3xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVKfMWtSaUunskLz/W7yO1KRqjN+8RyPtywhasoXlv16U3CrF/8AGnlfzNpUcbaBd31r&#xA;rPoq1tJHaq0iNam+gaQNOtVaKNiu/UU8Kqoi5/NCzk0e4v8AStOubopazXdszmGOORIreC6Vq+oX&#xA;o8F0rr8NdiDQ0BVZlbzLPAkqjiHAPElWIPdSULLUdDQnFVTFXYq7FXYq7FXYq7FXYqluu60NLita&#xA;Q+tPe3KWluhYRp6jqzVdyG4qFQ9jvt3xVhGo/mrb3miXAg0pJHu7O4kgtr6RDHIq6ebyksahmaNg&#xA;Gjamxp4EHDSo6L8wUsIxZppUQgtIbOOIWkyelyu0kWGKJOC0VZICjfyjfehxpXaZ+ZbapqOmxWtt&#xA;bw2lzNFDcST3Hx/6TZx3cIiCKQXIl4kN3FB1qFWd4FdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdiqE1LSNM1NIk1C2S5SCQTQrIK8ZFqA49xXFUjn/Lnys72QgtVs7ezlWVrSBIhFN6cD20aSh0du&#xA;KRTMqhCvXFUdN5L8pTXMlzLo9o08sTW8khhSrQvCLdozt9kwgIR/KAOwxVNoIIbeCOCBFihiUJHG&#xA;ooqqooAAOwxVfirsVdirsVdirsVdirsVUbuzs723a2vII7m3enOGZFkQ0NRVWBB3xVQl0PRJZ0uJ&#xA;dPtpJ4wqxzNDGXVUBChWIqAoY0+eKoW08qaFaavJq0Nsou2jihiqFKwxwKURYFp+7FHavHrXFURb&#xA;+X9BtirW2m2sBV1lUxwRoQ6ghXHFR8QDEA+5xVH4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:FC7F1174072068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FC7F1174072068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F1174072068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T09:37:42+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -105.3 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 105.3 li
257.4 105.3 li
257.4 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 105.3 mo
257.4 105.3 li
257.4 0 li
0 0 li
0 105.3 li
cp
clp
0 105.3 mo
257.4 105.3 li
257.4 0 li
0 0 li
0 105.3 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.9 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
87.75 1.80029 mo
143.55 1.80029 li
143.55 25.2002 li
87.75 25.2002 li
87.75 1.80029 li
cp
.746 .676 .668 .898 cmyk
@
110.364 16.8032 mo
110.364 16.4961 110.156 16.4961 109.799 16.4961 cv
109.799 14.1006 li
109.799 13.9023 109.799 12.7739 108.918 12.7739 cv
108.622 12.7739 108.215 12.9023 107.938 13.2886 cv
107.79 12.9521 107.513 12.7739 107.186 12.7739 cv
106.869 12.7739 106.572 12.9126 106.334 13.1304 cv
106.314 12.833 106.117 12.833 105.938 12.833 cv
105.622 12.833 li
105.473 12.833 105.216 12.833 105.216 13.1304 cv
105.216 13.437 105.424 13.437 105.78 13.437 cv
105.78 16.4961 li
105.424 16.4961 105.216 16.4961 105.216 16.8032 cv
105.216 17.1001 105.483 17.1001 105.622 17.1001 cv
106.493 17.1001 li
106.641 17.1001 106.899 17.1001 106.899 16.8032 cv
106.899 16.4961 106.691 16.4961 106.334 16.4961 cv
106.334 14.7241 li
106.334 13.8428 106.74 13.3779 107.146 13.3779 cv
107.374 13.3779 107.513 13.5459 107.513 14.1895 cv
107.513 16.4961 li
107.324 16.4961 107.077 16.4961 107.077 16.8032 cv
107.077 17.1001 107.344 17.1001 107.483 17.1001 cv
108.225 17.1001 li
108.374 17.1001 108.631 17.1001 108.631 16.8032 cv
108.631 16.4961 108.423 16.4961 108.067 16.4961 cv
108.067 14.7241 li
108.067 13.8428 108.473 13.3779 108.879 13.3779 cv
109.106 13.3779 109.245 13.5459 109.245 14.1895 cv
109.245 16.4961 li
109.057 16.4961 108.81 16.4961 108.81 16.8032 cv
108.81 17.1001 109.077 17.1001 109.215 17.1001 cv
109.958 17.1001 li
110.106 17.1001 110.364 17.1001 110.364 16.8032 cv
cp
0 0 0 1 cmyk
f
115.591 16.793 mo
115.591 16.4961 115.343 16.4961 115.195 16.4961 cv
114.779 16.4961 114.68 16.4468 114.601 16.417 cv
114.601 14.2788 li
114.601 13.5757 114.066 12.7441 112.641 12.7441 cv
112.215 12.7441 111.205 12.7441 111.205 13.4668 cv
111.205 13.7637 111.413 13.9224 111.651 13.9224 cv
111.799 13.9224 112.077 13.833 112.086 13.4668 cv
112.086 13.3877 112.096 13.3779 112.294 13.3579 cv
112.433 13.3481 112.562 13.3481 112.651 13.3481 cv
113.403 13.3481 113.918 13.6548 113.918 14.3579 cv
112.166 14.3877 110.948 14.8823 110.948 15.833 cv
110.948 16.5161 111.572 17.1597 112.582 17.1597 cv
112.948 17.1597 113.562 17.0903 114.027 16.7832 cv
114.245 17.0903 114.72 17.1001 115.096 17.1001 cv
115.373 17.1001 115.591 17.1001 115.591 16.793 cv
cp
113.918 15.7734 mo
113.918 16.001 113.918 16.209 113.532 16.3872 cv
113.175 16.5557 112.73 16.5557 112.651 16.5557 cv
112.037 16.5557 111.631 16.2188 111.631 15.833 cv
111.631 15.3477 112.482 14.9814 113.918 14.9419 cv
113.918 15.7734 li
cp
f
120.165 16.8032 mo
120.165 16.4961 119.907 16.4961 119.759 16.4961 cv
118.709 16.4961 li
118.709 13.2393 li
118.709 12.9321 118.65 12.833 118.313 12.833 cv
116.917 12.833 li
116.769 12.833 116.512 12.833 116.512 13.1304 cv
116.512 13.437 116.769 13.437 116.917 13.437 cv
118.026 13.437 li
118.026 16.4961 li
116.838 16.4961 li
116.68 16.4961 116.433 16.4961 116.433 16.8032 cv
116.433 17.1001 116.69 17.1001 116.838 17.1001 cv
119.759 17.1001 li
119.907 17.1001 120.165 17.1001 120.165 16.8032 cv
cp
118.759 11.6055 mo
118.759 11.3286 118.537 11.1104 118.254 11.1104 cv
117.982 11.1104 117.769 11.3286 117.769 11.6055 cv
117.769 11.8828 117.982 12.1006 118.254 12.1006 cv
118.537 12.1006 118.759 11.8828 118.759 11.6055 cv
cp
f
125.917 16.8032 mo
125.917 16.4961 125.669 16.4961 125.511 16.4961 cv
125.075 16.4961 li
125.075 14.1992 li
125.075 13.1997 124.57 12.7739 123.788 12.7739 cv
123.125 12.7739 122.679 13.1104 122.491 13.2983 cv
122.491 12.9814 122.491 12.833 122.095 12.833 cv
121.373 12.833 li
121.214 12.833 120.967 12.833 120.967 13.1401 cv
120.967 13.437 121.224 13.437 121.363 13.437 cv
121.808 13.437 li
121.808 16.4961 li
121.373 16.4961 li
121.214 16.4961 120.967 16.4961 120.967 16.8032 cv
120.967 17.1001 121.224 17.1001 121.363 17.1001 cv
122.937 17.1001 li
123.075 17.1001 123.333 17.1001 123.333 16.8032 cv
123.333 16.4961 123.085 16.4961 122.927 16.4961 cv
122.491 16.4961 li
122.491 14.7441 li
122.491 13.7539 123.224 13.3779 123.729 13.3779 cv
124.253 13.3779 124.392 13.6548 124.392 14.249 cv
124.392 16.4961 li
124.006 16.4961 li
123.848 16.4961 123.6 16.4961 123.6 16.8032 cv
123.6 17.1001 123.867 17.1001 124.006 17.1001 cv
125.521 17.1001 li
125.659 17.1001 125.917 17.1001 125.917 16.8032 cv
cp
f
1.80029 56.4751 mo
57.6001 56.4751 li
57.6001 79.875 li
1.80029 79.875 li
1.80029 56.4751 li
cp
.746 .676 .668 .898 cmyk
@
11.3506 67.9341 mo
11.3506 67.7061 11.1626 67.3994 10.6279 67.3994 cv
10.519 67.3994 10.0342 67.4092 9.57861 67.7456 cv
9.42041 67.6367 9.07373 67.4487 8.61816 67.4487 cv
7.6875 67.4487 6.98486 68.1914 6.98486 69.0327 cv
6.98486 69.4585 7.15283 69.7852 7.30176 69.9731 cv
7.19287 70.1318 7.10352 70.3496 7.10352 70.6465 cv
7.10352 70.9932 7.24219 71.2402 7.33105 71.3594 cv
6.6084 71.8047 6.6084 72.478 6.6084 72.5869 cv
6.6084 73.4385 7.64355 74.042 8.90527 74.042 cv
10.1724 74.042 11.2119 73.4282 11.2119 72.5869 cv
11.2119 72.2207 11.0337 71.7256 10.5288 71.4585 cv
10.4004 71.3892 9.98438 71.1714 9.09326 71.1714 cv
8.40039 71.1714 li
8.32129 71.1714 8.19238 71.1714 8.11328 71.1514 cv
7.96484 71.1514 7.90527 71.1514 7.78662 71.0127 cv
7.67773 70.874 7.66797 70.6563 7.66797 70.6563 cv
7.66797 70.6167 7.6875 70.478 7.72705 70.3794 cv
7.75684 70.3989 8.1333 70.627 8.61816 70.627 cv
9.5293 70.627 10.252 69.9141 10.252 69.0327 cv
10.252 68.7358 10.166 68.4487 10.0044 68.1714 cv
10.2085 68.0527 10.4419 68.0132 10.5684 68.0034 cv
10.6279 68.2705 10.8555 68.3398 10.9546 68.3398 cv
11.123 68.3398 11.3506 68.2212 11.3506 67.9341 cv
cp
9.56885 69.0327 mo
9.56885 69.5972 9.1333 70.0327 8.61816 70.0327 cv
8.0835 70.0327 7.66797 69.5674 7.66797 69.043 cv
7.66797 68.4785 8.10352 68.043 8.61816 68.043 cv
9.15283 68.043 9.56885 68.5083 9.56885 69.0327 cv
cp
10.6377 72.5869 mo
10.6377 73.0225 9.89551 73.4482 8.90527 73.4482 cv
7.9209 73.4482 7.18262 73.0225 7.18262 72.5869 cv
7.18262 72.4087 7.27051 72.0918 7.5835 71.894 cv
7.82764 71.7354 7.91553 71.7354 8.63818 71.7354 cv
9.51904 71.7354 10.6377 71.7354 10.6377 72.5869 cv
cp
0 0 0 1 cmyk
f
16.1025 70.6958 mo
16.1025 70.4189 15.8154 70.4189 15.7563 70.4189 cv
15.5781 70.4189 15.4985 70.4482 15.4297 70.6367 cv
15.2119 71.1416 14.6772 71.2305 14.3999 71.2305 cv
13.6572 71.2305 12.915 70.7354 12.7563 69.8843 cv
15.7065 69.8843 li
15.9146 69.8843 16.1025 69.8843 16.1025 69.5181 cv
16.1025 68.3892 15.4692 67.4189 14.1821 67.4189 cv
13.0039 67.4189 12.0537 68.4092 12.0537 69.627 cv
12.0537 70.8345 13.0537 71.8345 14.3306 71.8345 cv
15.6372 71.8345 16.1025 70.9434 16.1025 70.6958 cv
cp
15.3999 69.29 mo
12.7666 69.29 li
12.9048 68.5674 13.4893 68.0229 14.1821 68.0229 cv
14.6968 68.0229 15.3105 68.2705 15.3999 69.29 cv
cp
f
21.1519 70.5278 mo
21.1519 70.3496 21.1519 70.1416 20.8052 70.1416 cv
20.4785 70.1416 20.4688 70.3496 20.4688 70.5176 cv
20.4585 71.1318 19.8945 71.2305 19.6665 71.2305 cv
18.9043 71.2305 18.9043 70.7158 18.9043 70.4683 cv
18.9043 68.1123 li
20.5278 68.1123 li
20.6763 68.1123 20.9238 68.1123 20.9238 67.8149 cv
20.9238 67.5083 20.6865 67.5083 20.5278 67.5083 cv
18.9043 67.5083 li
18.9043 66.6963 li
18.9043 66.5083 18.9043 66.2905 18.5679 66.2905 cv
18.2212 66.2905 18.2212 66.4985 18.2212 66.6963 cv
18.2212 67.5083 li
17.3599 67.5083 li
17.2017 67.5083 16.9541 67.5083 16.9541 67.8149 cv
16.9541 68.1123 17.2017 68.1123 17.3501 68.1123 cv
18.2212 68.1123 li
18.2212 70.5278 li
18.2212 71.478 18.8945 71.8345 19.6172 71.8345 cv
20.3496 71.8345 21.1519 71.4087 21.1519 70.5278 cv
cp
f
31.6162 71.478 mo
31.6162 71.1714 31.3584 71.1714 31.21 71.1714 cv
30.1606 71.1714 li
30.1606 67.9141 li
30.1606 67.6074 30.1011 67.5083 29.7646 67.5083 cv
28.3687 67.5083 li
28.2202 67.5083 27.9629 67.5083 27.9629 67.8052 cv
27.9629 68.1123 28.2202 68.1123 28.3687 68.1123 cv
29.4775 68.1123 li
29.4775 71.1714 li
28.2896 71.1714 li
28.1313 71.1714 27.8838 71.1714 27.8838 71.478 cv
27.8838 71.7749 28.1411 71.7749 28.2896 71.7749 cv
31.21 71.7749 li
31.3584 71.7749 31.6162 71.7749 31.6162 71.478 cv
cp
30.21 66.2808 mo
30.21 66.0034 29.9883 65.7856 29.7051 65.7856 cv
29.4336 65.7856 29.2202 66.0034 29.2202 66.2808 cv
29.2202 66.5576 29.4336 66.7754 29.7051 66.7754 cv
29.9883 66.7754 30.21 66.5576 30.21 66.2808 cv
cp
f
37.3677 71.478 mo
37.3677 71.1714 37.1206 71.1714 36.9619 71.1714 cv
36.5264 71.1714 li
36.5264 68.8745 li
36.5264 67.8745 36.0215 67.4487 35.2393 67.4487 cv
34.5762 67.4487 34.1304 67.7852 33.9424 67.9736 cv
33.9424 67.6567 33.9424 67.5083 33.5464 67.5083 cv
32.8237 67.5083 li
32.6655 67.5083 32.418 67.5083 32.418 67.8149 cv
32.418 68.1123 32.6753 68.1123 32.814 68.1123 cv
33.2593 68.1123 li
33.2593 71.1714 li
32.8237 71.1714 li
32.6655 71.1714 32.418 71.1714 32.418 71.478 cv
32.418 71.7749 32.6753 71.7749 32.814 71.7749 cv
34.3882 71.7749 li
34.5264 71.7749 34.7842 71.7749 34.7842 71.478 cv
34.7842 71.1714 34.5366 71.1714 34.3779 71.1714 cv
33.9424 71.1714 li
33.9424 69.4189 li
33.9424 68.4287 34.6753 68.0527 35.1802 68.0527 cv
35.7046 68.0527 35.8433 68.3301 35.8433 68.9238 cv
35.8433 71.1714 li
35.457 71.1714 li
35.2988 71.1714 35.0513 71.1714 35.0513 71.478 cv
35.0513 71.7749 35.3184 71.7749 35.457 71.7749 cv
36.9717 71.7749 li
37.1104 71.7749 37.3677 71.7749 37.3677 71.478 cv
cp
f
42.3276 69.6367 mo
42.3276 68.4189 41.4468 67.4487 40.3975 67.4487 cv
39.9219 67.4487 39.4766 67.627 39.1401 67.9341 cv
39.1401 67.647 39.1201 67.5083 38.7441 67.5083 cv
38.0215 67.5083 li
37.8628 67.5083 37.6152 67.5083 37.6152 67.8149 cv
37.6152 68.1123 37.8726 68.1123 38.0112 68.1123 cv
38.457 68.1123 li
38.457 73.3691 li
38.0215 73.3691 li
37.8628 73.3691 37.6152 73.3691 37.6152 73.6758 cv
37.6152 73.9727 37.8726 73.9727 38.0112 73.9727 cv
39.5854 73.9727 li
39.7241 73.9727 39.9814 73.9727 39.9814 73.6758 cv
39.9814 73.3691 39.7339 73.3691 39.5757 73.3691 cv
39.1401 73.3691 li
39.1401 71.3296 li
39.5459 71.7456 39.9717 71.8345 40.2886 71.8345 cv
41.3677 71.8345 42.3276 70.894 42.3276 69.6367 cv
cp
41.6445 69.6367 mo
41.6445 70.5869 40.9517 71.2305 40.2588 71.2305 cv
39.4863 71.2305 39.1401 70.3594 39.1401 69.8843 cv
39.1401 69.1616 li
39.1401 68.5771 39.7144 68.0527 40.3379 68.0527 cv
41.0703 68.0527 41.6445 68.7754 41.6445 69.6367 cv
cp
f
47.7627 71.4683 mo
47.7627 71.1714 47.5054 71.1714 47.3667 71.1714 cv
46.9214 71.1714 li
46.9214 67.9141 li
46.9214 67.6074 46.8618 67.5083 46.5254 67.5083 cv
45.8027 67.5083 li
45.644 67.5083 45.397 67.5083 45.397 67.8149 cv
45.397 68.1123 45.6543 68.1123 45.793 68.1123 cv
46.2383 68.1123 li
46.2383 70.2207 li
46.2383 71.1118 45.4365 71.2305 45.1196 71.2305 cv
44.3374 71.2305 44.3374 70.9038 44.3374 70.5869 cv
44.3374 67.9141 li
44.3374 67.6074 44.2778 67.5083 43.9414 67.5083 cv
43.2188 67.5083 li
43.0605 67.5083 42.813 67.5083 42.813 67.8149 cv
42.813 68.1123 43.0703 68.1123 43.209 68.1123 cv
43.6543 68.1123 li
43.6543 70.6465 li
43.6543 71.5967 44.3374 71.8345 45.0601 71.8345 cv
45.4663 71.8345 45.8721 71.7354 46.2383 71.4585 cv
46.248 71.7749 46.4561 71.7749 46.6343 71.7749 cv
47.3569 71.7749 li
47.5151 71.7749 47.7627 71.7749 47.7627 71.4683 cv
cp
f
52.3369 70.5278 mo
52.3369 70.3496 52.3369 70.1416 51.9902 70.1416 cv
51.6636 70.1416 51.6538 70.3496 51.6538 70.5176 cv
51.6436 71.1318 51.0796 71.2305 50.8516 71.2305 cv
50.0894 71.2305 50.0894 70.7158 50.0894 70.4683 cv
50.0894 68.1123 li
51.7129 68.1123 li
51.8613 68.1123 52.1089 68.1123 52.1089 67.8149 cv
52.1089 67.5083 51.8716 67.5083 51.7129 67.5083 cv
50.0894 67.5083 li
50.0894 66.6963 li
50.0894 66.5083 50.0894 66.2905 49.7529 66.2905 cv
49.4063 66.2905 49.4063 66.4985 49.4063 66.6963 cv
49.4063 67.5083 li
48.5449 67.5083 li
48.3867 67.5083 48.1392 67.5083 48.1392 67.8149 cv
48.1392 68.1123 48.3867 68.1123 48.5352 68.1123 cv
49.4063 68.1123 li
49.4063 70.5278 li
49.4063 71.478 50.0796 71.8345 50.8022 71.8345 cv
51.5347 71.8345 52.3369 71.4087 52.3369 70.5278 cv
cp
f
74.7002 56.4751 mo
156.6 56.4751 li
156.6 79.875 li
74.7002 79.875 li
74.7002 56.4751 li
cp
.746 .676 .668 .898 cmyk
@
83.8813 70.6958 mo
83.8813 70.4189 83.5942 70.4189 83.5347 70.4189 cv
83.3765 70.4189 83.2773 70.4385 83.208 70.6367 cv
83.1484 70.7651 82.9604 71.2305 82.228 71.2305 cv
81.3862 71.2305 80.6738 70.5376 80.6738 69.6367 cv
80.6738 69.1616 80.9507 68.0229 82.2871 68.0229 cv
82.4951 68.0229 82.8813 68.0229 82.8813 68.1123 cv
82.8911 68.4585 83.0791 68.5972 83.3169 68.5972 cv
83.5547 68.5972 83.7622 68.4287 83.7622 68.1416 cv
83.7622 67.4189 82.7329 67.4189 82.2871 67.4189 cv
80.5845 67.4189 79.9907 68.7656 79.9907 69.6367 cv
79.9907 70.8247 80.9214 71.8345 82.1685 71.8345 cv
83.5444 71.8345 83.8813 70.8643 83.8813 70.6958 cv
cp
0 0 0 1 cmyk
f
89.0884 69.6367 mo
89.0884 68.3994 88.168 67.4189 87.0591 67.4189 cv
85.9502 67.4189 85.0298 68.3994 85.0298 69.6367 cv
85.0298 70.894 85.9702 71.8345 87.0591 71.8345 cv
88.1479 71.8345 89.0884 70.8843 89.0884 69.6367 cv
cp
88.4058 69.5674 mo
88.4058 70.4883 87.7915 71.2305 87.0591 71.2305 cv
86.3267 71.2305 85.7129 70.4883 85.7129 69.5674 cv
85.7129 68.6665 86.3564 68.0229 87.0591 68.0229 cv
87.772 68.0229 88.4058 68.6665 88.4058 69.5674 cv
cp
f
94.771 71.478 mo
94.771 71.1714 94.5635 71.1714 94.207 71.1714 cv
94.207 68.7754 li
94.207 68.5771 94.207 67.4487 93.3257 67.4487 cv
93.0288 67.4487 92.623 67.5776 92.3457 67.9639 cv
92.1973 67.627 91.9199 67.4487 91.5933 67.4487 cv
91.2764 67.4487 90.9795 67.5874 90.7417 67.8052 cv
90.7222 67.5083 90.5239 67.5083 90.3462 67.5083 cv
90.0293 67.5083 li
89.8804 67.5083 89.623 67.5083 89.623 67.8052 cv
89.623 68.1123 89.8311 68.1123 90.1875 68.1123 cv
90.1875 71.1714 li
89.8311 71.1714 89.623 71.1714 89.623 71.478 cv
89.623 71.7749 89.8906 71.7749 90.0293 71.7749 cv
90.9004 71.7749 li
91.0488 71.7749 91.3062 71.7749 91.3062 71.478 cv
91.3062 71.1714 91.0981 71.1714 90.7417 71.1714 cv
90.7417 69.3989 li
90.7417 68.5181 91.1479 68.0527 91.5537 68.0527 cv
91.7813 68.0527 91.9199 68.2212 91.9199 68.8643 cv
91.9199 71.1714 li
91.7319 71.1714 91.4844 71.1714 91.4844 71.478 cv
91.4844 71.7749 91.7515 71.7749 91.8901 71.7749 cv
92.6328 71.7749 li
92.7813 71.7749 93.0386 71.7749 93.0386 71.478 cv
93.0386 71.1714 92.8311 71.1714 92.4746 71.1714 cv
92.4746 69.3989 li
92.4746 68.5181 92.8804 68.0527 93.2861 68.0527 cv
93.5142 68.0527 93.6523 68.2212 93.6523 68.8643 cv
93.6523 71.1714 li
93.4644 71.1714 93.2168 71.1714 93.2168 71.478 cv
93.2168 71.7749 93.4844 71.7749 93.623 71.7749 cv
94.3652 71.7749 li
94.5137 71.7749 94.771 71.7749 94.771 71.478 cv
cp
f
99.6914 69.6367 mo
99.6914 68.4189 98.8105 67.4487 97.7612 67.4487 cv
97.2856 67.4487 96.8403 67.627 96.5039 67.9341 cv
96.5039 67.647 96.4839 67.5083 96.1079 67.5083 cv
95.3853 67.5083 li
95.2266 67.5083 94.979 67.5083 94.979 67.8149 cv
94.979 68.1123 95.2363 68.1123 95.375 68.1123 cv
95.8208 68.1123 li
95.8208 73.3691 li
95.3853 73.3691 li
95.2266 73.3691 94.979 73.3691 94.979 73.6758 cv
94.979 73.9727 95.2363 73.9727 95.375 73.9727 cv
96.9492 73.9727 li
97.0879 73.9727 97.3452 73.9727 97.3452 73.6758 cv
97.3452 73.3691 97.0977 73.3691 96.9395 73.3691 cv
96.5039 73.3691 li
96.5039 71.3296 li
96.9097 71.7456 97.3354 71.8345 97.6523 71.8345 cv
98.7314 71.8345 99.6914 70.894 99.6914 69.6367 cv
cp
99.0083 69.6367 mo
99.0083 70.5869 98.3154 71.2305 97.6226 71.2305 cv
96.8501 71.2305 96.5039 70.3594 96.5039 69.8843 cv
96.5039 69.1616 li
96.5039 68.5771 97.0781 68.0527 97.7017 68.0527 cv
98.4341 68.0527 99.0083 68.7754 99.0083 69.6367 cv
cp
f
105.126 71.4683 mo
105.126 71.1714 104.869 71.1714 104.73 71.1714 cv
104.285 71.1714 li
104.285 67.9141 li
104.285 67.6074 104.226 67.5083 103.889 67.5083 cv
103.167 67.5083 li
103.008 67.5083 102.761 67.5083 102.761 67.8149 cv
102.761 68.1123 103.018 68.1123 103.157 68.1123 cv
103.602 68.1123 li
103.602 70.2207 li
103.602 71.1118 102.8 71.2305 102.483 71.2305 cv
101.701 71.2305 101.701 70.9038 101.701 70.5869 cv
101.701 67.9141 li
101.701 67.6074 101.642 67.5083 101.305 67.5083 cv
100.583 67.5083 li
100.424 67.5083 100.177 67.5083 100.177 67.8149 cv
100.177 68.1123 100.434 68.1123 100.573 68.1123 cv
101.018 68.1123 li
101.018 70.6465 li
101.018 71.5967 101.701 71.8345 102.424 71.8345 cv
102.83 71.8345 103.236 71.7354 103.602 71.4585 cv
103.612 71.7749 103.82 71.7749 103.998 71.7749 cv
104.721 71.7749 li
104.879 71.7749 105.126 71.7749 105.126 71.4683 cv
cp
f
109.701 70.5278 mo
109.701 70.3496 109.701 70.1416 109.354 70.1416 cv
109.027 70.1416 109.017 70.3496 109.017 70.5176 cv
109.007 71.1318 108.443 71.2305 108.215 71.2305 cv
107.453 71.2305 107.453 70.7158 107.453 70.4683 cv
107.453 68.1123 li
109.077 68.1123 li
109.225 68.1123 109.473 68.1123 109.473 67.8149 cv
109.473 67.5083 109.235 67.5083 109.077 67.5083 cv
107.453 67.5083 li
107.453 66.6963 li
107.453 66.5083 107.453 66.2905 107.117 66.2905 cv
106.77 66.2905 106.77 66.4985 106.77 66.6963 cv
106.77 67.5083 li
105.909 67.5083 li
105.75 67.5083 105.503 67.5083 105.503 67.8149 cv
105.503 68.1123 105.75 68.1123 105.899 68.1123 cv
106.77 68.1123 li
106.77 70.5278 li
106.77 71.478 107.443 71.8345 108.166 71.8345 cv
108.898 71.8345 109.701 71.4087 109.701 70.5278 cv
cp
f
115.046 70.6958 mo
115.046 70.4189 114.759 70.4189 114.7 70.4189 cv
114.522 70.4189 114.442 70.4482 114.373 70.6367 cv
114.155 71.1416 113.621 71.2305 113.344 71.2305 cv
112.601 71.2305 111.859 70.7354 111.7 69.8843 cv
114.65 69.8843 li
114.858 69.8843 115.046 69.8843 115.046 69.5181 cv
115.046 68.3892 114.413 67.4189 113.126 67.4189 cv
111.948 67.4189 110.998 68.4092 110.998 69.627 cv
110.998 70.8345 111.997 71.8345 113.274 71.8345 cv
114.581 71.8345 115.046 70.9434 115.046 70.6958 cv
cp
114.344 69.29 mo
111.71 69.29 li
111.849 68.5674 112.433 68.0229 113.126 68.0229 cv
113.641 68.0229 114.254 68.2705 114.344 69.29 cv
cp
f
125.471 69.6367 mo
125.471 68.3994 124.55 67.4189 123.441 67.4189 cv
122.333 67.4189 121.412 68.3994 121.412 69.6367 cv
121.412 70.894 122.353 71.8345 123.441 71.8345 cv
124.531 71.8345 125.471 70.8843 125.471 69.6367 cv
cp
124.788 69.5674 mo
124.788 70.4883 124.174 71.2305 123.441 71.2305 cv
122.709 71.2305 122.095 70.4883 122.095 69.5674 cv
122.095 68.6665 122.739 68.0229 123.441 68.0229 cv
124.154 68.0229 124.788 68.6665 124.788 69.5674 cv
cp
f
131.114 71.4683 mo
131.114 71.1714 130.857 71.1714 130.718 71.1714 cv
130.272 71.1714 li
130.272 67.9141 li
130.272 67.6074 130.213 67.5083 129.876 67.5083 cv
129.154 67.5083 li
128.996 67.5083 128.748 67.5083 128.748 67.8149 cv
128.748 68.1123 129.005 68.1123 129.144 68.1123 cv
129.589 68.1123 li
129.589 70.2207 li
129.589 71.1118 128.788 71.2305 128.471 71.2305 cv
127.689 71.2305 127.689 70.9038 127.689 70.5869 cv
127.689 67.9141 li
127.689 67.6074 127.629 67.5083 127.292 67.5083 cv
126.57 67.5083 li
126.412 67.5083 126.164 67.5083 126.164 67.8149 cv
126.164 68.1123 126.421 68.1123 126.56 68.1123 cv
127.005 68.1123 li
127.005 70.6465 li
127.005 71.5967 127.689 71.8345 128.412 71.8345 cv
128.817 71.8345 129.223 71.7354 129.589 71.4585 cv
129.6 71.7749 129.807 71.7749 129.985 71.7749 cv
130.708 71.7749 li
130.867 71.7749 131.114 71.7749 131.114 71.4683 cv
cp
f
135.688 70.5278 mo
135.688 70.3496 135.688 70.1416 135.341 70.1416 cv
135.015 70.1416 135.005 70.3496 135.005 70.5176 cv
134.995 71.1318 134.431 71.2305 134.203 71.2305 cv
133.44 71.2305 133.44 70.7158 133.44 70.4683 cv
133.44 68.1123 li
135.064 68.1123 li
135.213 68.1123 135.46 68.1123 135.46 67.8149 cv
135.46 67.5083 135.223 67.5083 135.064 67.5083 cv
133.44 67.5083 li
133.44 66.6963 li
133.44 66.5083 133.44 66.2905 133.104 66.2905 cv
132.757 66.2905 132.757 66.4985 132.757 66.6963 cv
132.757 67.5083 li
131.896 67.5083 li
131.738 67.5083 131.49 67.5083 131.49 67.8149 cv
131.49 68.1123 131.738 68.1123 131.886 68.1123 cv
132.757 68.1123 li
132.757 70.5278 li
132.757 71.478 133.431 71.8345 134.153 71.8345 cv
134.886 71.8345 135.688 71.4087 135.688 70.5278 cv
cp
f
141.272 69.6367 mo
141.272 68.4189 140.39 67.4487 139.341 67.4487 cv
138.866 67.4487 138.42 67.627 138.083 67.9341 cv
138.083 67.647 138.064 67.5083 137.688 67.5083 cv
136.965 67.5083 li
136.807 67.5083 136.559 67.5083 136.559 67.8149 cv
136.559 68.1123 136.817 68.1123 136.956 68.1123 cv
137.401 68.1123 li
137.401 73.3691 li
136.965 73.3691 li
136.807 73.3691 136.559 73.3691 136.559 73.6758 cv
136.559 73.9727 136.817 73.9727 136.956 73.9727 cv
138.529 73.9727 li
138.667 73.9727 138.925 73.9727 138.925 73.6758 cv
138.925 73.3691 138.678 73.3691 138.519 73.3691 cv
138.083 73.3691 li
138.083 71.3296 li
138.49 71.7456 138.916 71.8345 139.232 71.8345 cv
140.311 71.8345 141.272 70.894 141.272 69.6367 cv
cp
140.588 69.6367 mo
140.588 70.5869 139.895 71.2305 139.203 71.2305 cv
138.43 71.2305 138.083 70.3594 138.083 69.8843 cv
138.083 69.1616 li
138.083 68.5771 138.658 68.0527 139.282 68.0527 cv
140.014 68.0527 140.588 68.7754 140.588 69.6367 cv
cp
f
146.707 71.4683 mo
146.707 71.1714 146.45 71.1714 146.311 71.1714 cv
145.865 71.1714 li
145.865 67.9141 li
145.865 67.6074 145.806 67.5083 145.469 67.5083 cv
144.747 67.5083 li
144.588 67.5083 144.34 67.5083 144.34 67.8149 cv
144.34 68.1123 144.598 68.1123 144.737 68.1123 cv
145.182 68.1123 li
145.182 70.2207 li
145.182 71.1118 144.38 71.2305 144.063 71.2305 cv
143.282 71.2305 143.282 70.9038 143.282 70.5869 cv
143.282 67.9141 li
143.282 67.6074 143.222 67.5083 142.885 67.5083 cv
142.163 67.5083 li
142.004 67.5083 141.756 67.5083 141.756 67.8149 cv
141.756 68.1123 142.014 68.1123 142.153 68.1123 cv
142.598 68.1123 li
142.598 70.6465 li
142.598 71.5967 143.282 71.8345 144.004 71.8345 cv
144.41 71.8345 144.816 71.7354 145.182 71.4585 cv
145.192 71.7749 145.4 71.7749 145.578 71.7749 cv
146.3 71.7749 li
146.459 71.7749 146.707 71.7749 146.707 71.4683 cv
cp
f
151.281 70.5278 mo
151.281 70.3496 151.281 70.1416 150.934 70.1416 cv
150.607 70.1416 150.597 70.3496 150.597 70.5176 cv
150.587 71.1318 150.023 71.2305 149.795 71.2305 cv
149.033 71.2305 149.033 70.7158 149.033 70.4683 cv
149.033 68.1123 li
150.657 68.1123 li
150.805 68.1123 151.053 68.1123 151.053 67.8149 cv
151.053 67.5083 150.815 67.5083 150.657 67.5083 cv
149.033 67.5083 li
149.033 66.6963 li
149.033 66.5083 149.033 66.2905 148.697 66.2905 cv
148.35 66.2905 148.35 66.4985 148.35 66.6963 cv
148.35 67.5083 li
147.489 67.5083 li
147.331 67.5083 147.083 67.5083 147.083 67.8149 cv
147.083 68.1123 147.331 68.1123 147.479 68.1123 cv
148.35 68.1123 li
148.35 70.5278 li
148.35 71.478 149.023 71.8345 149.746 71.8345 cv
150.479 71.8345 151.281 71.4087 151.281 70.5278 cv
cp
f
173.7 56.4751 mo
255.6 56.4751 li
255.6 79.875 li
173.7 79.875 li
173.7 56.4751 li
cp
.746 .676 .668 .898 cmyk
@
183.336 71.4683 mo
183.336 71.1714 183.08 71.1714 182.941 71.1714 cv
182.495 71.1714 li
182.495 66.1318 li
182.495 65.8252 182.436 65.7261 182.099 65.7261 cv
181.376 65.7261 li
181.218 65.7261 180.97 65.7261 180.97 66.0332 cv
180.97 66.3301 181.228 66.3301 181.367 66.3301 cv
181.812 66.3301 li
181.812 67.8945 li
181.485 67.6074 181.08 67.4487 180.654 67.4487 cv
179.575 67.4487 178.625 68.3892 178.625 69.6465 cv
178.625 70.874 179.515 71.8345 180.565 71.8345 cv
181.119 71.8345 181.535 71.5674 181.812 71.2803 cv
181.812 71.6367 181.812 71.7749 182.208 71.7749 cv
182.931 71.7749 li
183.089 71.7749 183.336 71.7749 183.336 71.4683 cv
cp
181.812 69.8545 mo
181.812 70.4092 181.367 71.2305 180.604 71.2305 cv
179.901 71.2305 179.307 70.5278 179.307 69.6465 cv
179.307 68.6963 180 68.0527 180.693 68.0527 cv
181.327 68.0527 181.812 68.6069 181.812 69.1514 cv
181.812 69.8545 li
cp
0 0 0 1 cmyk
f
187.98 71.478 mo
187.98 71.1714 187.722 71.1714 187.574 71.1714 cv
186.524 71.1714 li
186.524 67.9141 li
186.524 67.6074 186.465 67.5083 186.128 67.5083 cv
184.733 67.5083 li
184.584 67.5083 184.327 67.5083 184.327 67.8052 cv
184.327 68.1123 184.584 68.1123 184.733 68.1123 cv
185.841 68.1123 li
185.841 71.1714 li
184.653 71.1714 li
184.495 71.1714 184.248 71.1714 184.248 71.478 cv
184.248 71.7749 184.504 71.7749 184.653 71.7749 cv
187.574 71.7749 li
187.722 71.7749 187.98 71.7749 187.98 71.478 cv
cp
186.574 66.2808 mo
186.574 66.0034 186.352 65.7856 186.069 65.7856 cv
185.797 65.7856 185.583 66.0034 185.583 66.2808 cv
185.583 66.5576 185.797 66.7754 186.069 66.7754 cv
186.352 66.7754 186.574 66.5576 186.574 66.2808 cv
cp
f
193.207 70.5376 mo
193.207 69.5078 191.93 69.3003 191.613 69.2505 cv
190.94 69.1318 li
190.653 69.0923 189.98 68.9736 189.98 68.5874 cv
189.98 68.3301 190.296 68.0229 191.237 68.0229 cv
192.058 68.0229 192.197 68.3198 192.227 68.5771 cv
192.237 68.7456 192.256 68.9141 192.563 68.9141 cv
192.91 68.9141 192.91 68.7061 192.91 68.5083 cv
192.91 67.8252 li
192.91 67.6665 192.91 67.4189 192.613 67.4189 cv
192.375 67.4189 192.335 67.5576 192.316 67.627 cv
191.88 67.4189 191.445 67.4189 191.256 67.4189 cv
189.603 67.4189 189.375 68.231 189.375 68.5874 cv
189.375 69.498 190.416 69.6665 191.326 69.8052 cv
191.811 69.8843 192.603 70.0127 192.603 70.5376 cv
192.603 70.9038 192.237 71.2305 191.335 71.2305 cv
190.871 71.2305 190.316 71.1216 190.069 70.3496 cv
190.019 70.1714 189.98 70.0625 189.722 70.0625 cv
189.375 70.0625 189.375 70.2705 189.375 70.4683 cv
189.375 71.4287 li
189.375 71.5869 189.375 71.8345 189.672 71.8345 cv
189.762 71.8345 189.92 71.8247 190.039 71.4585 cv
190.524 71.8145 191.048 71.8345 191.326 71.8345 cv
192.89 71.8345 193.207 71.0127 193.207 70.5376 cv
cp
f
198.692 69.6367 mo
198.692 68.4189 197.81 67.4487 196.761 67.4487 cv
196.286 67.4487 195.84 67.627 195.503 67.9341 cv
195.503 67.647 195.484 67.5083 195.108 67.5083 cv
194.385 67.5083 li
194.227 67.5083 193.979 67.5083 193.979 67.8149 cv
193.979 68.1123 194.237 68.1123 194.375 68.1123 cv
194.821 68.1123 li
194.821 73.3691 li
194.385 73.3691 li
194.227 73.3691 193.979 73.3691 193.979 73.6758 cv
193.979 73.9727 194.237 73.9727 194.375 73.9727 cv
195.95 73.9727 li
196.087 73.9727 196.345 73.9727 196.345 73.6758 cv
196.345 73.3691 196.098 73.3691 195.939 73.3691 cv
195.503 73.3691 li
195.503 71.3296 li
195.91 71.7456 196.335 71.8345 196.652 71.8345 cv
197.731 71.8345 198.692 70.894 198.692 69.6367 cv
cp
198.008 69.6367 mo
198.008 70.5869 197.315 71.2305 196.623 71.2305 cv
195.85 71.2305 195.503 70.3594 195.503 69.8843 cv
195.503 69.1616 li
195.503 68.5771 196.078 68.0527 196.702 68.0527 cv
197.434 68.0527 198.008 68.7754 198.008 69.6367 cv
cp
f
203.681 71.478 mo
203.681 71.1714 203.444 71.1714 203.285 71.1714 cv
201.999 71.1714 li
201.999 66.1318 li
201.999 65.8252 201.939 65.7261 201.602 65.7261 cv
200.038 65.7261 li
199.879 65.7261 199.632 65.7261 199.632 66.0332 cv
199.632 66.3301 199.889 66.3301 200.028 66.3301 cv
201.315 66.3301 li
201.315 71.1714 li
200.038 71.1714 li
199.879 71.1714 199.632 71.1714 199.632 71.478 cv
199.632 71.7749 199.889 71.7749 200.028 71.7749 cv
203.285 71.7749 li
203.434 71.7749 203.681 71.7749 203.681 71.478 cv
cp
f
209.393 71.4683 mo
209.393 71.1714 209.146 71.1714 208.998 71.1714 cv
208.582 71.1714 208.483 71.1216 208.404 71.0918 cv
208.404 68.9536 li
208.404 68.251 207.869 67.4189 206.443 67.4189 cv
206.017 67.4189 205.007 67.4189 205.007 68.1416 cv
205.007 68.439 205.215 68.5972 205.454 68.5972 cv
205.602 68.5972 205.879 68.5083 205.889 68.1416 cv
205.889 68.0625 205.899 68.0527 206.097 68.0327 cv
206.235 68.0229 206.364 68.0229 206.454 68.0229 cv
207.206 68.0229 207.72 68.3301 207.72 69.0327 cv
205.968 69.0625 204.75 69.5576 204.75 70.5078 cv
204.75 71.1909 205.374 71.8345 206.384 71.8345 cv
206.75 71.8345 207.364 71.7651 207.83 71.4585 cv
208.047 71.7651 208.522 71.7749 208.899 71.7749 cv
209.175 71.7749 209.393 71.7749 209.393 71.4683 cv
cp
207.72 70.4482 mo
207.72 70.6763 207.72 70.8843 207.334 71.0625 cv
206.978 71.2305 206.533 71.2305 206.454 71.2305 cv
205.839 71.2305 205.433 70.894 205.433 70.5078 cv
205.433 70.0229 206.285 69.6563 207.72 69.6172 cv
207.72 70.4482 li
cp
f
214.403 67.8149 mo
214.403 67.5083 214.166 67.5083 214.006 67.5083 cv
212.848 67.5083 li
212.7 67.5083 212.453 67.5083 212.453 67.8052 cv
212.453 68.1123 212.69 68.1123 212.848 68.1123 cv
213.125 68.1123 li
212.413 70.2163 li
212.285 70.582 212.225 70.7598 212.156 71.0659 cv
212.146 71.0659 li
212.096 70.8784 212.007 70.6709 211.938 70.4829 cv
211.017 68.1123 li
211.264 68.1123 li
211.413 68.1123 211.661 68.1123 211.661 67.8149 cv
211.661 67.5083 211.423 67.5083 211.264 67.5083 cv
210.106 67.5083 li
209.948 67.5083 209.71 67.5083 209.71 67.8149 cv
209.71 68.1123 209.966 68.1123 210.114 68.1123 cv
210.417 68.1123 li
211.819 71.6392 li
211.859 71.7378 211.859 71.7676 211.859 71.7676 cv
211.859 71.7676 211.611 72.603 211.482 72.8516 cv
211.195 73.3984 210.838 73.4185 210.69 73.4282 cv
210.69 73.4282 210.74 73.3379 210.74 73.207 cv
210.74 72.9561 210.564 72.7749 210.319 72.7749 cv
210.055 72.7749 209.888 72.9561 209.888 73.2173 cv
209.888 73.6299 210.221 74.0225 210.701 74.0225 cv
211.69 74.0225 212.135 72.7178 212.175 72.6089 cv
213.709 68.1123 li
214.006 68.1123 li
214.156 68.1123 214.403 68.1123 214.403 67.8149 cv
cp
f
224.471 69.6367 mo
224.471 68.3994 223.55 67.4189 222.442 67.4189 cv
221.333 67.4189 220.413 68.3994 220.413 69.6367 cv
220.413 70.894 221.353 71.8345 222.442 71.8345 cv
223.531 71.8345 224.471 70.8843 224.471 69.6367 cv
cp
223.788 69.5674 mo
223.788 70.4883 223.174 71.2305 222.442 71.2305 cv
221.709 71.2305 221.095 70.4883 221.095 69.5674 cv
221.095 68.6665 221.739 68.0229 222.442 68.0229 cv
223.155 68.0229 223.788 68.6665 223.788 69.5674 cv
cp
f
230.114 71.4683 mo
230.114 71.1714 229.857 71.1714 229.718 71.1714 cv
229.273 71.1714 li
229.273 67.9141 li
229.273 67.6074 229.213 67.5083 228.876 67.5083 cv
228.154 67.5083 li
227.996 67.5083 227.749 67.5083 227.749 67.8149 cv
227.749 68.1123 228.005 68.1123 228.144 68.1123 cv
228.589 68.1123 li
228.589 70.2207 li
228.589 71.1118 227.788 71.2305 227.471 71.2305 cv
226.689 71.2305 226.689 70.9038 226.689 70.5869 cv
226.689 67.9141 li
226.689 67.6074 226.629 67.5083 226.292 67.5083 cv
225.57 67.5083 li
225.412 67.5083 225.165 67.5083 225.165 67.8149 cv
225.165 68.1123 225.421 68.1123 225.56 68.1123 cv
226.005 68.1123 li
226.005 70.6465 li
226.005 71.5967 226.689 71.8345 227.412 71.8345 cv
227.817 71.8345 228.223 71.7354 228.589 71.4585 cv
228.599 71.7749 228.807 71.7749 228.986 71.7749 cv
229.708 71.7749 li
229.867 71.7749 230.114 71.7749 230.114 71.4683 cv
cp
f
234.688 70.5278 mo
234.688 70.3496 234.688 70.1416 234.341 70.1416 cv
234.015 70.1416 234.004 70.3496 234.004 70.5176 cv
233.995 71.1318 233.43 71.2305 233.203 71.2305 cv
232.441 71.2305 232.441 70.7158 232.441 70.4683 cv
232.441 68.1123 li
234.064 68.1123 li
234.212 68.1123 234.46 68.1123 234.46 67.8149 cv
234.46 67.5083 234.222 67.5083 234.064 67.5083 cv
232.441 67.5083 li
232.441 66.6963 li
232.441 66.5083 232.441 66.2905 232.104 66.2905 cv
231.757 66.2905 231.757 66.4985 231.757 66.6963 cv
231.757 67.5083 li
230.896 67.5083 li
230.738 67.5083 230.491 67.5083 230.491 67.8149 cv
230.491 68.1123 230.738 68.1123 230.886 68.1123 cv
231.757 68.1123 li
231.757 70.5278 li
231.757 71.478 232.431 71.8345 233.154 71.8345 cv
233.886 71.8345 234.688 71.4087 234.688 70.5278 cv
cp
f
240.272 69.6367 mo
240.272 68.4189 239.39 67.4487 238.341 67.4487 cv
237.866 67.4487 237.42 67.627 237.083 67.9341 cv
237.083 67.647 237.064 67.5083 236.688 67.5083 cv
235.965 67.5083 li
235.807 67.5083 235.559 67.5083 235.559 67.8149 cv
235.559 68.1123 235.817 68.1123 235.956 68.1123 cv
236.401 68.1123 li
236.401 73.3691 li
235.965 73.3691 li
235.807 73.3691 235.559 73.3691 235.559 73.6758 cv
235.559 73.9727 235.817 73.9727 235.956 73.9727 cv
237.529 73.9727 li
237.667 73.9727 237.925 73.9727 237.925 73.6758 cv
237.925 73.3691 237.678 73.3691 237.519 73.3691 cv
237.083 73.3691 li
237.083 71.3296 li
237.49 71.7456 237.916 71.8345 238.232 71.8345 cv
239.311 71.8345 240.272 70.894 240.272 69.6367 cv
cp
239.588 69.6367 mo
239.588 70.5869 238.895 71.2305 238.203 71.2305 cv
237.43 71.2305 237.083 70.3594 237.083 69.8843 cv
237.083 69.1616 li
237.083 68.5771 237.658 68.0527 238.282 68.0527 cv
239.014 68.0527 239.588 68.7754 239.588 69.6367 cv
cp
f
245.707 71.4683 mo
245.707 71.1714 245.45 71.1714 245.311 71.1714 cv
244.865 71.1714 li
244.865 67.9141 li
244.865 67.6074 244.806 67.5083 244.469 67.5083 cv
243.747 67.5083 li
243.588 67.5083 243.34 67.5083 243.34 67.8149 cv
243.34 68.1123 243.598 68.1123 243.737 68.1123 cv
244.182 68.1123 li
244.182 70.2207 li
244.182 71.1118 243.38 71.2305 243.063 71.2305 cv
242.282 71.2305 242.282 70.9038 242.282 70.5869 cv
242.282 67.9141 li
242.282 67.6074 242.222 67.5083 241.885 67.5083 cv
241.163 67.5083 li
241.004 67.5083 240.756 67.5083 240.756 67.8149 cv
240.756 68.1123 241.014 68.1123 241.153 68.1123 cv
241.598 68.1123 li
241.598 70.6465 li
241.598 71.5967 242.282 71.8345 243.004 71.8345 cv
243.41 71.8345 243.816 71.7354 244.182 71.4585 cv
244.192 71.7749 244.4 71.7749 244.578 71.7749 cv
245.3 71.7749 li
245.459 71.7749 245.707 71.7749 245.707 71.4683 cv
cp
f
250.281 70.5278 mo
250.281 70.3496 250.281 70.1416 249.934 70.1416 cv
249.607 70.1416 249.597 70.3496 249.597 70.5176 cv
249.587 71.1318 249.023 71.2305 248.795 71.2305 cv
248.033 71.2305 248.033 70.7158 248.033 70.4683 cv
248.033 68.1123 li
249.657 68.1123 li
249.805 68.1123 250.053 68.1123 250.053 67.8149 cv
250.053 67.5083 249.815 67.5083 249.657 67.5083 cv
248.033 67.5083 li
248.033 66.6963 li
248.033 66.5083 248.033 66.2905 247.697 66.2905 cv
247.35 66.2905 247.35 66.4985 247.35 66.6963 cv
247.35 67.5083 li
246.489 67.5083 li
246.331 67.5083 246.083 67.5083 246.083 67.8149 cv
246.083 68.1123 246.331 68.1123 246.479 68.1123 cv
247.35 68.1123 li
247.35 70.5278 li
247.35 71.478 248.023 71.8345 248.746 71.8345 cv
249.479 71.8345 250.281 71.4087 250.281 70.5278 cv
cp
f
101.7 25.2002 mo
101.7 35.9102 li
101.7 38.5762 li
31.1553 38.5762 li
29.7002 38.5762 li
29.7002 45.7651 li
29.7002 47.5649 li
.746 .676 .668 .898 cmyk
@
29.7002 54.7646 mo
32.3999 47.5649 li
27 47.5649 li
29.7002 54.7646 li
cp
f
0 lc
0 lj
29.7002 54.7646 mo
32.3999 47.5649 li
27 47.5649 li
29.7002 54.7646 li
cp
@
1 lc
1 lj
115.65 25.2002 mo
115.65 47.5649 li
@
115.65 54.7646 mo
118.35 47.5649 li
112.95 47.5649 li
115.65 54.7646 li
cp
f
0 lc
0 lj
115.65 54.7646 mo
118.35 47.5649 li
112.95 47.5649 li
115.65 54.7646 li
cp
@
1 lc
1 lj
129.6 25.2002 mo
129.6 35.9102 li
129.6 38.7002 li
173.7 38.7002 li
214.65 38.7002 li
214.65 45.7651 li
214.65 47.5649 li
@
214.65 54.7646 mo
217.35 47.5649 li
211.95 47.5649 li
214.65 54.7646 li
cp
f
0 lc
0 lj
214.65 54.7646 mo
217.35 47.5649 li
211.95 47.5649 li
214.65 54.7646 li
cp
@
gsave
0 105.3 mo
257.4 105.3 li
257.4 0 li
0 0 li
0 105.3 li
cp
clp
1 lc
1 lj
[.9 3.6 ] 0 dsh
47.9009 80.0586 mo
53.7329 82.6724 61.6089 93.1934 65.3994 87.9004 cv
69.1914 82.6074 67.0576 53.5698 70.6504 48.2998 cv
73.0786 44.7383 77.1904 48.4194 81.2803 52.0015 cv
@
85.5952 55.249 mo
82.499 50.3838 li
80.0635 53.6191 li
85.5952 55.249 li
cp
f
0 lc
0 lj
[] 0 dsh
85.5952 55.249 mo
82.499 50.3838 li
80.0635 53.6191 li
85.5952 55.249 li
cp
@
1 lc
1 lj
[.9 3.6 ] 0 dsh
144.706 80.0273 mo
151.47 82.4507 161.318 92.7871 165 87.2998 cv
168.683 81.8125 163.088 52.2368 166.8 47.1006 cv
169.514 43.3438 175.558 48.4238 181.278 52.6465 cv
@
185.832 55.5547 mo
182.371 50.9414 li
180.191 54.355 li
185.832 55.5547 li
cp
f
0 lc
0 lj
[] 0 dsh
185.832 55.5547 mo
182.371 50.9414 li
180.191 54.355 li
185.832 55.5547 li
cp
@
grestore
55.2031 97.6499 mo
55.2031 97.3711 li
54.6094 97.3711 54.5732 97.3262 54.5732 96.9751 cv
54.5732 93.6719 li
53.313 93.771 li
53.313 94.0503 li
53.8979 94.0503 53.979 94.104 53.979 94.5449 cv
53.979 96.9663 li
53.979 97.3711 53.8804 97.3711 53.2773 97.3711 cv
53.2773 97.6499 li
54.2671 97.623 li
54.582 97.623 54.897 97.6411 55.2031 97.6499 cv
cp
54.708 92.2139 mo
54.708 91.9712 54.501 91.7373 54.231 91.7373 cv
53.9253 91.7373 53.7451 91.9893 53.7451 92.2139 cv
53.7451 92.457 53.9521 92.6909 54.2222 92.6909 cv
54.5283 92.6909 54.708 92.439 54.708 92.2139 cv
cp
0 0 0 1 cmyk
f
60.2974 97.6499 mo
60.2974 97.3711 li
59.8291 97.3711 59.604 97.3711 59.5952 97.1011 cv
59.5952 95.3818 li
59.5952 94.6079 59.5952 94.3291 59.3164 94.0049 cv
59.1899 93.8521 58.8931 93.6719 58.3711 93.6719 cv
57.7144 93.6719 57.291 94.0591 57.0391 94.6172 cv
57.0391 93.6719 li
55.77 93.771 li
55.77 94.0503 li
56.4004 94.0503 56.4722 94.1133 56.4722 94.5542 cv
56.4722 96.9663 li
56.4722 97.3711 56.373 97.3711 55.77 97.3711 cv
55.77 97.6499 li
56.7871 97.623 li
57.7954 97.6499 li
57.7954 97.3711 li
57.1924 97.3711 57.0933 97.3711 57.0933 96.9663 cv
57.0933 95.3101 li
57.0933 94.374 57.7319 93.8701 58.3081 93.8701 cv
58.875 93.8701 58.9741 94.356 58.9741 94.8691 cv
58.9741 96.9663 li
58.9741 97.3711 58.875 97.3711 58.272 97.3711 cv
58.272 97.6499 li
59.2891 97.623 li
60.2974 97.6499 li
cp
f
65.1753 95.7061 mo
65.1753 94.563 64.3022 93.6719 63.2939 93.6719 cv
62.5923 93.6719 62.2144 94.0684 62.0342 94.2661 cv
62.0342 93.6719 li
60.7383 93.771 li
60.7383 94.0503 li
61.377 94.0503 61.4399 94.104 61.4399 94.5 cv
61.4399 98.7119 li
61.4399 99.1172 61.3413 99.1172 60.7383 99.1172 cv
60.7383 99.396 li
61.7461 99.3691 li
62.7632 99.396 li
62.7632 99.1172 li
62.1602 99.1172 62.061 99.1172 62.061 98.7119 cv
62.061 97.2002 li
62.061 97.1191 li
62.106 97.2632 62.4844 97.749 63.168 97.749 cv
64.2393 97.749 65.1753 96.8672 65.1753 95.7061 cv
cp
64.4282 95.7061 mo
64.4282 96.7949 63.7983 97.5513 63.1323 97.5513 cv
62.772 97.5513 62.4302 97.3711 62.187 97.002 cv
62.061 96.813 62.061 96.8042 62.061 96.624 cv
62.061 94.6172 li
62.3223 94.1582 62.7632 93.897 63.2222 93.897 cv
63.8794 93.897 64.4282 94.689 64.4282 95.7061 cv
cp
f
70.3052 97.6499 mo
70.3052 97.3711 li
69.6753 97.3711 69.603 97.3081 69.603 96.8672 cv
69.603 93.6719 li
68.2803 93.771 li
68.2803 94.0503 li
68.9102 94.0503 68.9819 94.1133 68.9819 94.5542 cv
68.9819 96.1563 li
68.9819 96.9341 68.5503 97.542 67.8931 97.542 cv
67.1372 97.542 67.1011 97.1201 67.1011 96.6533 cv
67.1011 93.6719 li
65.7783 93.771 li
65.7783 94.0503 li
66.48 94.0503 66.48 94.0771 66.48 94.8779 cv
66.48 96.228 li
66.48 96.9302 66.48 97.7402 67.8481 97.7402 cv
68.3521 97.7402 68.748 97.4907 69.0093 96.939 cv
69.0093 97.7402 li
70.3052 97.6499 li
cp
f
73.4819 96.5342 mo
73.4819 96.021 li
73.2573 96.021 li
73.2573 96.5161 li
73.2573 97.1821 72.9873 97.5239 72.6543 97.5239 cv
72.0513 97.5239 72.0513 96.7051 72.0513 96.5522 cv
72.0513 94.0503 li
73.3384 94.0503 li
73.3384 93.771 li
72.0513 93.771 li
72.0513 92.1152 li
71.8262 92.1152 li
71.8174 92.853 71.5474 93.8159 70.665 93.8521 cv
70.665 94.0503 li
71.4302 94.0503 li
71.4302 96.5342 li
71.4302 97.6411 72.2671 97.749 72.5913 97.749 cv
73.23 97.749 73.4819 97.1104 73.4819 96.5342 cv
cp
f
154.104 95.1211 mo
154.104 93.9692 153.205 93.0151 152.115 93.0151 cv
150.99 93.0151 150.118 93.9961 150.118 95.1211 cv
150.118 96.2822 151.053 97.146 152.106 97.146 cv
153.195 97.146 154.104 96.2642 154.104 95.1211 cv
cp
153.357 95.0493 mo
153.357 95.373 153.357 95.8594 153.159 96.2549 cv
152.961 96.6602 152.565 96.9209 152.115 96.9209 cv
151.728 96.9209 151.333 96.7319 151.089 96.3184 cv
150.864 95.9219 150.864 95.373 150.864 95.0493 cv
150.864 94.6982 150.864 94.2119 151.081 93.8159 cv
151.323 93.4023 151.747 93.2129 152.106 93.2129 cv
152.502 93.2129 152.889 93.4111 153.124 93.7979 cv
153.357 94.1851 153.357 94.707 153.357 95.0493 cv
cp
f
159.18 97.0469 mo
159.18 96.7681 li
158.55 96.7681 158.478 96.7051 158.478 96.2642 cv
158.478 93.0693 li
157.155 93.168 li
157.155 93.4473 li
157.786 93.4473 157.857 93.5103 157.857 93.9512 cv
157.857 95.5532 li
157.857 96.3311 157.425 96.939 156.768 96.939 cv
156.012 96.939 155.976 96.5171 155.976 96.0503 cv
155.976 93.0693 li
154.653 93.168 li
154.653 93.4473 li
155.355 93.4473 155.355 93.4741 155.355 94.2749 cv
155.355 95.625 li
155.355 96.3271 155.355 97.1372 156.723 97.1372 cv
157.227 97.1372 157.624 96.8877 157.884 96.3359 cv
157.884 97.1372 li
159.18 97.0469 li
cp
f
162.357 95.9312 mo
162.357 95.418 li
162.132 95.418 li
162.132 95.9131 li
162.132 96.5791 161.862 96.9209 161.529 96.9209 cv
160.926 96.9209 160.926 96.1021 160.926 95.9492 cv
160.926 93.4473 li
162.213 93.4473 li
162.213 93.168 li
160.926 93.168 li
160.926 91.5122 li
160.702 91.5122 li
160.692 92.25 160.422 93.2129 159.541 93.249 cv
159.541 93.4473 li
160.305 93.4473 li
160.305 95.9312 li
160.305 97.0381 161.142 97.146 161.466 97.146 cv
162.105 97.146 162.357 96.5068 162.357 95.9312 cv
cp
f
167.559 95.103 mo
167.559 93.96 166.686 93.0693 165.678 93.0693 cv
164.976 93.0693 164.598 93.4648 164.418 93.6631 cv
164.418 93.0693 li
163.123 93.168 li
163.123 93.4473 li
163.761 93.4473 163.824 93.501 163.824 93.897 cv
163.824 98.1094 li
163.824 98.5142 163.725 98.5142 163.123 98.5142 cv
163.123 98.793 li
164.13 98.7661 li
165.147 98.793 li
165.147 98.5142 li
164.544 98.5142 164.445 98.5142 164.445 98.1094 cv
164.445 96.5972 li
164.445 96.5161 li
164.49 96.6602 164.868 97.146 165.552 97.146 cv
166.624 97.146 167.559 96.2642 167.559 95.103 cv
cp
166.812 95.103 mo
166.812 96.1924 166.182 96.9482 165.516 96.9482 cv
165.156 96.9482 164.814 96.7681 164.571 96.3989 cv
164.445 96.21 164.445 96.2012 164.445 96.021 cv
164.445 94.0142 li
164.707 93.5552 165.147 93.2939 165.606 93.2939 cv
166.263 93.2939 166.812 94.0859 166.812 95.103 cv
cp
f
172.689 97.0469 mo
172.689 96.7681 li
172.059 96.7681 171.987 96.7051 171.987 96.2642 cv
171.987 93.0693 li
170.665 93.168 li
170.665 93.4473 li
171.294 93.4473 171.366 93.5103 171.366 93.9512 cv
171.366 95.5532 li
171.366 96.3311 170.934 96.939 170.277 96.939 cv
169.521 96.939 169.485 96.5171 169.485 96.0503 cv
169.485 93.0693 li
168.163 93.168 li
168.163 93.4473 li
168.864 93.4473 168.864 93.4741 168.864 94.2749 cv
168.864 95.625 li
168.864 96.3271 168.864 97.1372 170.232 97.1372 cv
170.736 97.1372 171.132 96.8877 171.393 96.3359 cv
171.393 97.1372 li
172.689 97.0469 li
cp
f
175.866 95.9312 mo
175.866 95.418 li
175.641 95.418 li
175.641 95.9131 li
175.641 96.5791 175.372 96.9209 175.039 96.9209 cv
174.435 96.9209 174.435 96.1021 174.435 95.9492 cv
174.435 93.4473 li
175.722 93.4473 li
175.722 93.168 li
174.435 93.168 li
174.435 91.5122 li
174.21 91.5122 li
174.202 92.25 173.931 93.2129 173.049 93.249 cv
173.049 93.4473 li
173.814 93.4473 li
173.814 95.9312 li
173.814 97.0381 174.651 97.146 174.975 97.146 cv
175.614 97.146 175.866 96.5068 175.866 95.9312 cv
cp
f
65.2471 34.9922 mo
65.2471 34.7129 li
64.959 34.7129 li
64.1494 34.7129 64.1221 34.6143 64.1221 34.2813 cv
64.1221 29.2319 li
64.1221 29.0161 64.1221 28.998 63.915 28.998 cv
63.3569 29.5742 62.5649 29.5742 62.2773 29.5742 cv
62.2773 29.853 li
62.457 29.853 62.9883 29.853 63.4561 29.6191 cv
63.4561 34.2813 li
63.4561 34.605 63.4292 34.7129 62.6191 34.7129 cv
62.3311 34.7129 li
62.3311 34.9922 li
62.646 34.9648 63.4292 34.9648 63.7891 34.9648 cv
64.1494 34.9648 64.9321 34.9648 65.2471 34.9922 cv
cp
f
112.983 38.9072 mo
112.758 38.9072 li
112.713 39.1772 112.65 39.5732 112.56 39.708 cv
112.497 39.7803 111.903 39.7803 111.705 39.7803 cv
110.085 39.7803 li
111.039 38.853 li
112.443 37.6113 112.983 37.125 112.983 36.2251 cv
112.983 35.1992 112.173 34.479 111.075 34.479 cv
110.058 34.479 109.392 35.3071 109.392 36.1079 cv
109.392 36.6123 109.842 36.6123 109.869 36.6123 cv
110.022 36.6123 110.337 36.5039 110.337 36.1353 cv
110.337 35.9014 110.175 35.667 109.86 35.667 cv
109.788 35.667 109.77 35.667 109.743 35.6763 cv
109.95 35.0913 110.436 34.7583 110.958 34.7583 cv
111.777 34.7583 112.164 35.4873 112.164 36.2251 cv
112.164 36.9453 111.714 37.6563 111.219 38.2139 cv
109.491 40.1401 li
109.392 40.2393 109.392 40.2573 109.392 40.4731 cv
112.731 40.4731 li
112.983 38.9072 li
cp
f
176.118 33.5791 mo
176.118 32.8413 175.551 32.1392 174.615 31.9502 cv
175.353 31.707 175.875 31.0771 175.875 30.3662 cv
175.875 29.6279 175.083 29.124 174.219 29.124 cv
173.31 29.124 172.626 29.6641 172.626 30.3481 cv
172.626 30.645 172.824 30.8159 173.085 30.8159 cv
173.364 30.8159 173.544 30.6182 173.544 30.3569 cv
173.544 29.9072 173.122 29.9072 172.986 29.9072 cv
173.265 29.4663 173.859 29.3491 174.183 29.3491 cv
174.552 29.3491 175.047 29.5469 175.047 30.3569 cv
175.047 30.4648 175.029 30.9873 174.795 31.3833 cv
174.525 31.8149 174.219 31.8423 173.995 31.8511 cv
173.922 31.8604 173.707 31.8779 173.643 31.8779 cv
173.571 31.8872 173.508 31.896 173.508 31.9863 cv
173.508 32.085 173.571 32.085 173.724 32.085 cv
174.121 32.085 li
174.858 32.085 175.191 32.6973 175.191 33.5791 cv
175.191 34.8032 174.57 35.064 174.174 35.064 cv
173.788 35.064 173.112 34.9111 172.797 34.3799 cv
173.112 34.4253 173.391 34.2271 173.391 33.8853 cv
173.391 33.561 173.148 33.3809 172.887 33.3809 cv
172.671 33.3809 172.383 33.5073 172.383 33.9033 cv
172.383 34.7222 173.22 35.3159 174.202 35.3159 cv
175.299 35.3159 176.118 34.4971 176.118 33.5791 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (007x002.eps)%%CreationDate: 27/05/15 9:37 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^CuYMdK/4i6kF@M@%_"0#_"0\[rn(`<.YVb_e(lihhJ[S@^#p:BeS;'_.TMX(8uFV;^Q%Mkj*e90hkd,b%fL\e=P+#i,FkoZce(^Lm[>r!q<])-1$YFN[1SM1<2%9k!0sd1F_e[6RlgK&"d62A+?Yc3-Til<B4%m]4hj$\%T^iRg.`n/`^#&Z_%EjK(trCWmW48MnOZX,.@gY\96;O4X%!bLJ-oCoRt4oG8-WO8(UWbit_I3MZtFJ(7b(;Ef;:?/b]>HJo5V7#U62a$Nd"7q@s5HAq=%ck!o["saQ]2gZa#!+l2ThOW6S5<I\EV>Jq^4ChQXm:P[rdf+jM-2>fJQ)&+Eo\"NW]2c%VCP5*UUh=g8Q$g1#=\7g&.0W]"JXT0d%_@e3aQqP$E?_=b+/1%c@Q"mEq.?napcT_@6\h%Wc,gfEajRfofCL8n^]7?H0+IePXTNSDITeYa/EkV%hH2n\iT<uCZV>X`d_O*:J%^Y&:WUr?Pg+kX!r?#*C(@09$%>3!8@8[)1DXK<uW:drMnDj+qe<-9]?gV>955<L,X9?O9s1bQD4Zjj)Klf/GB0MKM@E(B<ApWpjB%Q!@:13hBRCc`0'sVNS=M#O+n4')oB9rtK22J%&WtYYG1J'b9#F,Un(Z7N4>e!1%D"5(Rsa@O5G`i-a/[^1\32h9$@*&.&R(^WFa8%]?"Orr)6Vn1^s;hD>Yq!3)ioJYH$S\<Q1l98tVEmpbmQD0X-dMi%N!`;MKb!%&7(iFkSa>Z#)%%gW2AL(JEF>QGRS8M5:O_/6++V%RtUo-.29![\Vs>-A])<mb@Q'-0%5"m`Y;d;%rIFm`AdU6'j(o0YnZm<5HtprM>*5u_]IbaQGFX$-ha$.K"d.k_GC)`4i1!rM:.73%N'5$Rlo4o4./!u%Usu4-@k$a\IU\^c).@o?&9CHR8ju>ur1n8ZSl=u)mM%V63b$CTLmOe7YS?dA5HuOrK!a/%)'(I0Ml!Y-I"WqK%ke#J3r5;sp4$*B98MN^@IUXbm++DX8Ug-7N9&%B%3=d7pS:C=$;>_imYnX#RV[MlP`?$b3GgU\Kc$[0;$2tIY@.-'f@dif'g2$O!%qhLeGMXi_"O4&]qMk=)UH^@9EcK92';NA1N\XW1Ek7u9ZLcOQ2apWT'n1gb]Vq=kHdrm1r&9C#Z]PeL./B(hk[F=m7F8Cr,:1kp8%Aif(=2RJ2oq+(84SaH'?7%2G&G@khU\\(_KS+F>:J,$Iq6[YcCUWf_(NWWb/.>_uTeDRiWI!N?2?M^NM9B72oV,C0&rtL/NEW=I:%W5\7uqj7:TUii4pgqWKRC!to,?i&*Sk\nZ(D-Q@65#7f\J*F_m:&<WC9E-<d`?L#GJ*F^GM>h\udXRGOO32M`48bo78q6G>oIoi4%d0c=K/h3@PZ<9#B\e>$mI%,R@MrgZ6,D"bD<kSGuaU,_(L"B-Rb+&#VrLLCt![F2D`%m0kD^hYf/mB7lh=R&"/EgA20j./rDf!tP%pp3<D=-JKui'5aCi`j!Os'tNe)02OVIY&[A+9*SC$/FF%hRC0]+nb(b;\Pb$LbF74n&)XRK]WIjV*HI:Tms>+O_7c6hS6?kgFa:"%Ma;k/VElod=]lb<?pA3C3J*JRkr3k!.*E*[1tiK1D>FaVXdMqFA`rG9X4tIJ[%gKeiHNfbkpZPW0TZ/sBq)Mc]LI7bn^NHK2H#ZX%0`Dmf(\p2)"J&84m&/,*L3!^,5cQ7?VhSYW$?=5)"9(^IoMug\W"S8m:CT4B):0t]b9I2D1ShFPR)lTn\k"\VL5`\pd1K;N2DT(O%,b9u05,7QrUi#$BX%^'TN1rCcKUV\b,6&BhPL:KOnbLG.JgE]d]6.Q<nCL"`71Q-bKt`E26hqA6]M.Goi^rruE[R,.FM@?mO?O(O%1;>i)icBVhZuk/6PVF%^"u!gS8"!iSE'O7Rp\sj,3T"neD;HoQVgSr&cR`h#a=Y4[H:p:=k>72iMO]QGG1mf>pYN?@><&PTrbi_7%DgYc:WgJK&VZWK,<)`G<-#rs_T3RH)DhU=I4K=qpgnWWD)Nc)XN"]l#WE)JKm!7a;'_2C@)3edq]N9P[5'Lf#4lUMlq&c5:H2bP4%%[.BuITD*;q:^PM;8aMP31i^^k?N(n*B>A_*$_H$9(VlHb],+2HSBSk$TJikpP95drGZ?sQ%[FfAUFon.T-3*'QO#oFU@;>)7;H_%;jG*dV(:Y5/o*J%'TQ/Q1PsE\er&G&]Zf7l9<Qc6bj!cln%5%.gTpUD@Xu,2k6&jpr$D&r^IPC8q@m/3UI.M0Nt8!GT:qe8?*$j<%d$gpc"8sjWp7/U6>O6(mLbek&9`+5&4Kc`p)qVJO="K4ja2,`MF"/8]5'tP;bC=f,;TmIJClVX:jY\eS!BeCm,@>Uae_rm4kCPV-%E@UL%-jJI=&8-Md'gcu*[0=kn:MXj[>f(L[($<7sAII[:WX88rgB^i;>8O9nk%2?N<LJlU4<nCHdK*"I\d`9O(0l2\$C)W\$01>u%O_B51E_/7:A4jE%^XS_!2@7Vk4eo>G:*"Gp6>AI#4EicMNZI]$>EZW>UQscPI"#!Wl.UrAs,rf0l4R1m3A[mX4\UWc[Xcl(h`42_%,tQd1Z0hA10kYgTiBaIoLeVP;?8UnRNVum_9uJV?nr1a`a0%kG9GX_NU6_^)aE4@:PA#:]ZWgF8e62iR?0s0=#-PCW,Q^SU_KF(d%;&h6u`8r;s#4ScJpqSBPYIH-Ymp\GGk/pf4jOiXMX1qK*E7s^P`Sa]lAQM)oa]-8^#5_@l<3N2mN@IDCl*j"N)^Fno*reB@2s\_4%qTSb1St+?B^F^AH-GQ/_Ro&sfJ`5_/+aIN[*S5f"d8mmTgY-AS2&!=lC@e9f4E";-TigmLj\P9ORn:m\JG\a#pTn)I<^'`UaGS.5%9"UCb&)h*jPQ1%MG-UblCk'(#;eW0#=0:=q$.V(u8u%ifWjH"/X$3[f)O5K/^n$qg5Q?<_'qg[n[gS*kBs$3*!Pui-Ukl4*L]YGg%(_'KV+3DcRX\nIFFjlsh`$qd;I:oan&CF6j[XU@\an',NmSrM#jODJj"H)=@*Gld[(E,dQ8tb%,=93nEq0)L>f*[`PDZLpYRqjZV%lLiKtG,=m%q&7aJ^iQD"qJ6__qYU/d=o[i9]DNp>N[sMbkA.bSp33E=qi7ZcWU]]8Vue1Vl/lI0r,1K!F7S[md]/Ej],tT^o$"(0%If]p-b1O\PB]3aU-b,,hrOZD%,]\6kk'n<17rg%5HO&!&nltQHA<OL@b',GJON<u@I^bt#XGE*'8k<b!o*`:'-MV'4?@oAY9$-D6%iQ!Quq#d;i,\8EMOM#q%P#VKhT-eO%o=CC3;6dU#8EQRNpe*;o0"LcMmGr8`?3A1p=<,($_H*lQVbWt!?2OCSEP1Nm_Wr+nK_nT:%8@P0SO93=YPq:<QPd.H]s,2H%+s/M7EeZ)O;PtH3.E?qUE8n(I=/8<^rAXO(-$)0;BGOd7P>4]DfTZ2t`qs]9*J@.nKaM>kb0.o^%-;5<N_K!3=WO5%@SCdbp9pVfOh9*oRrNlA[/^,`cXT\HCXcb'CLH\W_G^<PoOK.[.d;QMegJ+8??ja;+s+cP8dTr6<n''W/e>f.U%hnfJ+h2B;9CU4@1gI?f>YUaN-*9J8-\XQ!1Vj/_A"mdM=8u'i:_kHVsGOiHG=\X''s/5"$7d,,_fDjB7^4%p?olmEII7<O6$RTs7%lM:F]=59s3eFj4IWcW$u(Y#J')T'A%l\#.'kTLhKfh#Kg]$C3NhsYjn$7t1,_s(@oo=ldJ?WOsSI2<uLs),*>\U;"pTkr`-i4IRB%<.VYN7mJ+*J\N]%cO/#)#.O2B5iVf'%f`"t=E_m#IXK_I0O%WsT55)H_X)&f^AN-dd09*>Q`pEml;UUST\TBN*n]+Nnm[RHoLEtG%]$YeLrU"]rhod0s"e:kXh-o5ikT(0(@-Ok>h#fk-r*)7<I9;<CN^IgfoGuSL.[5ChHMJgq?2jS\9'eu"1Xn_4eZ/TFf4[(ZW:5;@%D]JY(Op_JU"om`,&sGlC^3AH5o7'F9G3Y^'s.<,;Ua'NshtCiFlp1POp;tAHI8P*p:GYrLhnnYE1@FVF]lEars1<UKG>N5Wo3(I0%o^.d8Rp"Ohpb1qF6b^$2+19GhO8e:M/Ep<mZhlEA(<=.u?SBYVR"tRH[k?M6h7na#J,GXTXg\E4&nMH^l2TkVG'jX09ZRSB#Z8cQ%YbTY7^,.A-C@W+G1$E[ad1e+<9N"Hr35a+PBUbK2L9@S'GY*1B9&JA\:5HX73XEf]C8js"*c<H,)LkaJB26fE1g>>a`e56G!]t:K%2S,foqK_[sc5osQZcC>9-b_j;.LrS[6p&\dq?4W0-dRlcd7MrUTB/k3Ec8J3/]P\N`Qq;[?MXJkdf,sO9Zo2SVJ5>t\cbHbL*KH<%$$1c/G=qQ`-V'@3/XS=oK2\FCWNr3Oq<Y5l5-n!c-rmu3*S(N\X>#fS+6bhgB%Qc`V>f^7I"!H2s6V_8kTlM2\gN/V;!WN$$"3I<%07akW8?7u&Erq^\*cl2t<GT&t!6c"FQ1_5CPltOiQ/=%jf'Ahd05KqbTE7oWcncA=A(V'&K:$HHKT^`+77IVMVYSuKIl;&`::K'W%iZ^\qWUnmWW*t+$Xadd0()R5O02/ct^m<U:db8'qFqa)qChsL%<S#%p(M`Vh!R,>']S"Cmlcj&=kj>KNo5dA,"hM,Ao#;t!W%Jj&%'Acjh$^uX_I]:gINE7a-/DH=4L18VoAnia:fJQb$+KIq1Gfo,M3*h@rDcL,7E.3%/8hI<LWgJMYdQT,I+OITngNQB$bV4bt70S^j%FL?pbQ2]N\'NdcN;rfC4X;')Fjs"j&QMk:@?hiuq;J08j9i(qXD"i>_OhRnR5!'i?[7N)V!PAdTBNhJEE(^7WQY<DpX"`oAW]4q*%K_NAtiY90*m!R6(TsJX5>Dmrg%-6?M$*%[:;6Bf+r7UN1_9`/(=m`WMi&\is'M)4^@abIXT?&II@E'6h_IFf"/ZE0sZ$#C%%W6).%E/_;9B@A_c?=DD8F;?EeXt'X_:oTFB/lu@pq8RcpDdh'-?g1B&E-`PGCmLs<irZ\259!/879u)Q^0eds_7s`<q1Eo8>kX>X4gJ.r%1'1*1Z8[ptK$K2adA3]`GF&off4MWuX7dHNakU=2lZk%]<S^rg4oY@tXU\(=OhG1&mg7""/14*2B?>R$]XX..2eA*tBYVCFqBkQo%,G3BEZ/Iq^K;l?1Y#IUt$*9C1FhV%m\<*%dU#P^/]Q1qALGR>$l9d2\T:G55j]_-1?eLclX]B;Q]k)[T25&qUrp4k7=a]E*43R$4%B(r(Oc@jb$P^NH/qo`d6q$I1+CC\D1(7Hq<WlahZenJHuPP;CFB1GNr0f3rK=]-M:]?g+q,<\a[h`gA68G'XTFalYU/CL]04'B/o%`\<<gQB\R0)GShuV.8=[LmrRY#YNQt^Q$i/7;<9:a(=ithF7aTNrQPnN?1U8=.n6Hrq7efkuYc<1OLaH!#k@S"e#mfJR.Oo7(1',%$?ifu;A,LsJGC'^ZL';ZlG3We`d&[/[-7!L%mC[/#Js\?&0ChF+*dEH/\8[-N;c\N)d*G[f-MqeO_)7H@X#aB.7*&6[J,QjD'u.+%b9on5f"hp9COan"iK_&5]%PBtMr/.<(TGtimC/rC^-dgh;S`Va2[W9"]Enp>)SM)8]^:$60hQYZXk74N@-IAJdr8/;@ND5RJ9?h!%%b<AWHE[n1:F*aG;JAWU2jS4e48-OHQkXC;hEfo/70k0mEk<24P2)'O`3P7Ag>Qf6%5kSu3YBl&5Kt"3&)H\Hb:d`/-m$e@]\WPQ%Eg7I(%BA,e2&T$@%W5,06OJkm$68ooFu>2OVg>2)r@;Kj#\meQ0%f!-Y?RZ_LGGFPf1)!DTOh="f>!"f9JBKfFMBj(IER'2lXTh*%596E@LGoY+0@F<\dHDVQs0Y%ZmJl-rc`hH72Hm>M4r)Z'=XT%#Jd54CQfYfjea,bnQ;H!E^3ph8k=W,;JgC\SPn'?a0o?;rA!!PP%P^?j)lqnKuCRrfG7R'MR>4!lo4;u0E=QlOEN@BSrqbOk6idtW-AZi\7/_8cDJlS!fIj^.kd-C!^!X;tTa2a?p9d(qWM$K&d1m2aF%d=haP,[8Yb*G*a(TW<o#9aN=";GFWQ`P%USJ`7<"<9["JK\V8J"1TDCDOhM\[Ar1[@klQA;_CPa:_kEj?!&80nIeT]>2-CS*/P4Y%ci"\(_][+NCY%f/iqL$b;9R6+F/Ud\kCo,`+T%+Aa1J7M0=a^o@G_cYp^ie7ZY:D[LtF0Eh6ThM$-\)fGFauF1*/A]7%FG_+u&Hl%*#*@WUqg#&:;p3G.4iKs+uhu@!QAI0la$aEU@AuD"KnQ'f;&7`;@Y$(Ls,Pf>(SDm$#fK(K"o`(_B\[FKU;Xkg>KZO4#J9_4,?+F%RkL/g,B0RI)r[C0;\,dZO/k3378*@c;tXdKJli/rb@2Y_UZjBk-9iG[SIUVps6SqU%"C,6Zi+&"=4pNR;<^fI332sW3ro*H#rKbN%LNC"mH/4]/D[m3(N98.<4Q+Nu3J<;%S.PM&_Tn1<(Mh*N=R5mRrbTl`?bYTsh#,"*r;&ob`G^XBEjDK%%o/X5jMA.5Ibrm3^=c^t%gQSP9Q/\9TZfXAMk#Y?<O&SU)?;3$6Akj$(eGS%P8h+n,CSqq352jo\>;eA=]6'?B34LT<(8V+%b,sOEP32F:+`jB#Pg0:P=8^Lt%O.OtQ9hVmQ>N>U(Ab!=d1p9lXl9:KAT5''J]%p[sIE=.L%X0l*m*;'-]lKAi2fH+I;Z$Go.c-J0cHE9aeQ7#KD`1]JlI93I",bLO%[G+l"iUUt9[:h-qWVP04)>;3>==LZI<7Op8c`_XEe(sr?Y%>PSBa^h::-1O[>,E<QI<eT>'59#N@\^2SUJ\=72EQ]d)gcS>")&CB%Ja4u<?NebmhcK6QXL`?KcED)]VHop.Euf$HO]HpLSmMK%<L9`72at"*jj&#G+]CKg6p9`7WSu\/>AZ]0RY04&6HUOHd>&+)kVel#%qjQ&2e?=$tUX/=_TC,-=UP0NE['HV52%$,9Z**/l^2@_03r]rMkfUhcB4e0s$>QsHqja4GI@3.0-]QPo&Xo!-deZR,UW2AZ[JXVA%2lb]h9BGciPFtAYl-;]-[?NlO4?*f8X0ab;g^e7DAp7TD#UAe,qu0UK`C;Z!aZTcu\5Le%G6VC'RQ[FW1pt=A4eA)3NN%)=DUh=R%0Y(L^DPK0AQTG`FLW^LNo9nH)Q_*i-l?b.fdDs5t_pCltgtUKjBf(tG2%-/d;m`kfh[+2mfR22O5P>nF)XYbMh8hmA-IU8BrfNW%%XDJ.6'h@pd.biB[@&"CsGB<'A><*%*<%:*pPY%VuPPone-IZ=]K0i\8'kqIBq(fJ-/L`n_Rl,,3NA<NFmS5C9ZbG9IcMAm4qOt?D%:E(nAJ!E0VhQBEHk+[focLj$*?#,UkRRffPB$9)`rO^fV8>F2#q,K"2L,E/!%d"gK?_bsTD0G)TC#`"dn2.AsZfN&^[*cS@R4<nI%HFG;n4_5t5Q,(-%D:]9dDDSVMNF'mehEr5Fq`&$4f524+@Ei[]Q[>j"i(!IkoL4%8AMq!Ff'Yq>UR+b\'4%@,"8dBi?*3Q1K,ZsU%.m6%e4?Na)qJc)7j(jmd_OCFEUK>V^NS[mf6`7X8h!!^hf(Y;DWI^$mm4<i_%de$nI5[])C%UOS.Xcd7"u^3:/l&3#*YqDqkgBuU%'XX5XQ%#@L-e@L>Rdj+@bjBjjN\mc[XNbX0Hb(jncRn7`d=iW9oCV2nOe.k_T?a.`e[Ag!G+-m\XO6J4]W\4^;"PXZkiRl;it[4T%mEW[S$6.6Q7\MK0<8(L9I4]PhNQs1q:DgIdFa7oQe#<8Nd*`Dr8YbS#;IRo+kS-Ygb"Di+Q2H&IkA*f;^Ukr0r71fuD6cWt:9m(S%:,Hb4k>].F.SkfF]$Ro>VB;:#mW7:7RhPVp1@461g0VN[:RU8Kd9E+NGoOb2HG5JQ:]Jp<hc%FUT/b\u0?aC&nM,$S8;BAfO*?oX%6_@Q)h!&nTduVZ3N;M*p0k2uB9]*R=^:cbg=BEA3^)Xg<#<a@I1FA/0?=1-.hR9kj[oY1Co]b,SO6s"F@fCHE%sod%/GYpPm%-'o%`<)W<(?`5n)=[8JrK9g-5J8^&Xh%;T./'0[1oE[trmO#JD21=R\l:R`Jt=`TI=IO6*lHihm[buqThfkID='CVl"f>@Cd4G!e#DT&%qmk(OV>S/&/bJ;1Z9BFe;_4P=VD:dfDsQ.UBm#I1H"hHTpN6E4UpJ@<(:#Ii=h/t[]JZ#dH;<VhgseADLP)2$hejEj:Ven%4N#%q%>QJ]/RCe(:S;FCOq+6Wdc'7W1HG5*_ii[\3T'r:mr5^(`S6@>4(@^>k7%HJpei7^TWJ"^I<DGK`gh]b71TSQS9H2&e;+%EZW]7tA%^T"OAY*gu5EX,WT#2I;c?^/[jmQc\K.o(GT\^/fm%*5l6'"U/_*apWY3kqE%T7f%99MSp$l?AuZGFM$DHQ1ZeW1Z@qBVSK$mI2[*%;)VcX@D2s='cX94NG<*)6DN,jk*aS0FaAA^D6u+p;*,Nb^?Qs4g<\:C*H-&#mV+M!'A=jrG?"raPZd%bGB!DYq?W%o_dc642\4k1%SLA\=O5BX)Q1ti_NM>n2&_uSB.N?kcn\n&*q_OoK-5K0dUM,^YHcEF)oB+.R2Ypft'lL)0d3WM;a5?>Thf?`tcXZ598<beO-1qeg%G>)=Z6D*`<o0PjfS[d"Phqi#WM#[$aRg9fQbLm)`amP(tccN!epLC<_><QW%5)E>A;:f!>Q'MtG_@"l\mAW;QLGaGEXpAL;;Sn`"%mdUShXHh6#A)X*&)B]5@Dns<r]!g=e76H\f,4md7+15S3q)J%n(+eNhj:j7V.pHJ,T6JmIaqr+fEuLU[h`4FPC@h<(FXP*tSeal\%UV*t7Vpj]/=n8R78mh9e&5%d96gEo[#$CV-6((lBG2.n502P5rXuuW"m^Y^r-96N/e?pW_.J\=H0n<5^rfN8Uj*(^aC]>!:FS[p4%g-7EA01*\i4n3bALu[+ZEG/]gZ)Z0^kcIOMg\b"<='6MT?X@jHrlCV;FoN+LpI'DOK5#EhjNR/>I3=i]H#)jY8M%(/age(#l$^A1%Z/cp/FkG(ih=%^>!^_=j'DJa!1_Dnp[!O>aj:/q;TsR'L)!uRD\!LlK(;7%P'\gI1P/Qnm]6<5(Q-O%OdPZ1Go)'W!co<X^HddfF%Ba?3-q)H'f*G;;'kk?cXM6q<V*4\H#$=4*"30V]>@@f:(JDPE'A=+-9Eb/ut],q94O9JisKTSS-PP]%=YB&K>310o&JnZe5WcI)Q%nLF.U]=D75?RZ6)3YG:0FP^"EY(%ZdE`-5RO;IEHNqJ+.2Y8[-8B0?2?Kcq1iPZ6D:,e!bb8V2/MT7(J`QF39*2E_]TJ,-'5eP[V%?91BC"AX^7)cEebOmB9h,)0XBG=\`<TfOfg%M_1D4T/i664JNCMp]q;T()u"k,oZ&R/Gt`2S**`O_q9*lVgK^Xf(HM=&/YC;M)3W%X*>kNlE9T1TQG:uYR*TeN*T8U_G*((k[KOD4ls$GHOPgGS)6#NNG*s)NZ\%*ECOp5pj3]e&2Z.CG1IKHB6hu5Q")%<Fqa8]$q@Kc%G26O?HYSV$@\Q70Jmp=X7Kg'Rj1'9ar'Es(@Y7e'gOm"fV]g(soD0[Hf<GXRQ/2+iZ-CG9l^t-nN\\$<:ZmG^g]6W@bBs,+W=sqZ%,->\<9MCL<S[FKQQ:#5hCJtA*L>2Z\66AV"'gO(ZM\hCEKG6tQj3kk]>7QAn[4\ob:OA^H3$4kPhmY=^IHP)Tf,"hc%I'Ua)rs2*%CK)?903KHg%Gu>jj%GLH&q:"*X$I9`^_2S>e.@9<:(Od3`B0AI`:+VZ*tCeTZCelR>6$d-ds^4,!fobXJ=St/JA6RTIiitr1H<d7%8a`ht!qhJ4CVsua5<H@tGSR!'M0.Ve/9^.'6Y@ou4JULUB-&.6s+`Wn@eEFa^t;(,@KfHq:hCi?llh[=MQ9\L=3`nHGPtH&cq3gs%QU2lA^pOiN`Y*INOK?'+iPd1Q;t7Qe[GO=r,bCZF=P%.Sko,ib]==p#TW^R"(#E&ZGCR;@=nV(&^&\^q1@W,@11Z.C:>YBcW^F^Q%^3=R*pr5gi!%lcg0`>I/5#D=ZI'@IEe1kE/7h>iq8;#NYhY<rEa$aDUp`N<cZ+ha$kF0h-o-FV.Q;5lUfXP[Xa">1CTt5\]cLg:U%5&-2)QT`)-*3*eBd&n\C0r<<)O/"f;T=^WKg@K*oTfSG/Wk?\\?_d[(^I[[C$NSL*BL\@:J!b[5>8Co4.(VrENb?Pp@b$FIHNSTu%Y`-og)g:'Q!1RepLc>)'JpVook$N][:>6@r*%Dn/]G7L4SU,q2A=PJ2(+FX$lJ8#Va":9T`T;>BMsEk'h&Sl6'/0N@C7uDZ6p2cr%<4K>d^H\sb$a%Xb4rA$?`*0.UFFo3LYJ"']>?jO.%U0[-)>>VBXfI)TRm=_$.oW_UY474/nkX*4j"MXp$sD_QP\?Vk9TMU-I*F&8%kjGqn%1'<1dq;q^>BAC4UI[4K"<K$3Rmal--/.jS'#pd.9!l[M&*#PPM+0tl)]B[(SnNtHLgSKlCTjP*M"REpbun["-Pna`]E@<f%TZK7#YUCbJ*<o^sCnhg(Ka8_q:M_"Zh?DQ*pKZZ$GUt"kQ5Nld_'Wpuk4ql]A;i*NJ]CCWQ`6+LHB-V%7/5JO9W.FWE_'Qk4"`L1%^26T^#R.<KA(Z\O`PLhrg]HH8-#BIdWMe@E*X8+1g"XR_hFNjc?Wg>N.qnrbPW"3oc24ml^_W\X:*RD1XA#,gD@m`,j1E#DO*sg)%o'4(g*fHd&YN!.EM0'Gih#@e#htP2R(pubXFDZj,7-h^7>)^rEe%Umk@\fTXm<bo\8/F>dra=ILr[2G!p?4g]\Vemk:VA9t#TI:f%+HB*n2I)]1\IZm>L(W3fZ:jSa*AJf`.77nPE=Q7Zc#'YF*.N-=%qOqQE=&2lf<Jq3?a7j((2Jg%G:m;LZU(o[CmS=]>m'`3bf/Uu%rfLN=<(r;XSm5U0KY,_@fu5#O<60fh4HPc(CgL1m_tT22ft$7a.sr'34h^ro(YO?p^>65"=o[$A3,:HT<?eP?/ar(fJVab;1KHUu%Ci-sLQ;;KOI9KXLO*hVOq:<FqYu">GCZ5G6I&.M.eRr[o5pOa_E99@+Qg;;^()nVsoFR;,]_[GPF/?B,FO"h0B$cZ=!lg<h(S*jY%8<5-RY,>,m"s&tpUZ]umB@((qi&Gc@kZeM=TOXS4a>n@i)0@E6E9&"M^dak'\tElU@<1S+1[+Ve*M_cD7;'uX\Sn8)cp_ToTc>"A%%\6rpH1sZ2Y?)4*6eAB]`9kVk65#RjF?ELik<Y"i>Bh2#[M$:,`Ih+m8l>J`'$N1kPqc;,6uI;X%l*l]&rV59[kF;hXP^XaX6]Rf%Kd#^A$Sh<lDl6Q,oM<A/T(=XP^co*TQeCS%0XA]RBm>,BQfI&&TRBpks!9!6/2%L_5@OMe2qcFp\I'R-J!=ufQ'#L2c;<dB\V`^'%1hhtOd6D3&n5t0p/c#-@%ik6eT(kW2mUhREXWX<'@t1:57bG4-pf<K,>g]%[acVeC!d6m?Qg?WO<fk[u`.cbjTdhES/Jhje%mZNO%XWW37P)/'9PsR:6@eqo5mk03)\Tc<\7JZ2gkOE)'V*)9B)a'WDC>]:g*`3n*ag<gCi6OHC%\/[/&+f1>=:o?%0`kuMCreL)g6^@\%Kh:4iM_V'Gd$++=bcZD?@(n1r:nqf^4MK^%)JO^a^6e']QUt!".QfS*,%;(1N8l<K."+dDTsQ!(=N*mGlE^_EJ6`<./T1bJ^`8:r%IVh#q)/<@c:g$")UI<DlNE98t'U^A^]W7c/=[,D$IOEt@l51obSL-B?`VLU/d"c)Em$Z,aRmldHVsVjtRCK[VcV;3RDp6<EW8jYZ%jd_M_qGcuBd0GG>j\a$YkFf@;ll4h'S$Vk'm1&CdSTWsPH_FI3'+[5@pa")\G4a`Ai^aTA.-Jnoks%L1;I#81D!kej>ML>g(d3LV%\1kZQS/hK*@tW?C!c3>L:u?QdM$?@aj^03E$D708XGYh"gs#7]+!9=634Vi];07,S8*W'H%L;+&Fh4:CHm!cP#Q$9R)?4?i2rfPW%Z$:AJ);am$g-,=s0lnm)*Yr^c6796'*`<"e.5=X3Fq.#RTFDTtM9N3Q`^H`=H*:(9Gp>)thMBDMDJ2EbKZ?D'1:onCA@rOEhO>EZ%6q3_Nb"g!6?,VQ?m#GQ\&QCJHL6TNVj6r,V;h?am+-B.58OFFW,(lrHp5_*A_F,[4o]3YTD0E`@4n"Vn\YXspA7$DCqKZ05)U!L+%nkc*?Aaq#QFo>cuE^XMQm0/2c]K9,&H7be#@\o)G+e8mu$sd)+*P#t(g_JuN&0-SlA)Yf][mQ#OH$(@()qN`\>rMk%Rgg=6<:k(A%=M"g#0VbG(MI+_;A.Z+dEh.]ThQa;Fl>SLFq_(,AR1D7OH%!Tk_hG6>NAVdf>8]:9[=:AFbWLdqoAQ3%$Vs7Id+KWeq/?FJU^ie'%(S!':mX2PDdW-?'E/rI-I&]YpI(7hlOGoD7(GIIkC3/F\L\%+ac?"b1?IiP1CnkXoUO%j13975CLP7:aZ;L?a\s!*!)/E#Y^Pjg'%Lt]Nm<`*HoTm).-:tb'.SqU%dk(7M56U[Mjs*D\Jab>'Z6N-%tc6>](%$U"o"(HoNGXfklc8Q'/4k=6g@SXha:_29,!`e,_VBOQ)%"!WV)fsnI;hmCHM*6fBlC<,i[qcMm4Z()"lZNZ88'!^Fi+/gK5qSYS0UYtQY(`XL2Jh9A4#s?S[Dr6\m_.O8gE5YF^Tf7^[WFm9-%3Zqc\hHh[js2?<mPT1Y;B]5nKeB5^.?lJ8@)6&mXQb\-f?l>qFj2jj*ru"<r.b6A8N)\";)b3@Ieh_VA.b<V*8.@Wb\ps_1<KDXs%fs$"TZL9[rmke8XR"j5?ENT#JD+@0O$drME:PB/sQa*F)\`^cKESQ=DKaXd1\5V?qqNW;&_BiY92+f?'c]3f);rOG[6Qrr8->IO3%YS5t'^'t_SQ'&oSl2occhhk,P*Fm=u.uSOJ=4j*0cRI+8fgt'nO^an,L;VW+qCaI_'Xg!aX%fnmaq478dYV/EM6@o_Bj*GYB71<%%#??]_IF((9(4u:BYV@7:A?Hr$Ct10h:W:H@DlIPKD*4-1f8`KC\aE.bI(jLTOR(,K\#&dfIbQj>/So$+$\cj\*aV0Pf&Fh#?2)BI%=j5!WN>7S"[Z\30^U_TM=ZZ7G'YVV+bHFD@@ea)><<&=YYG@Uqa_o]B)0VR-E]#4>&7;`tq.=l+*F>aO$#B/n1;e!Fd2!Ynhe0AS%hf0S--bJ>;e'>(M@KIC[O)Hp+fhKbH2EJUYr#M)3B1u)"(r,g=)0Rr_;0cg3;&OQ%oCJVEq0dYf[?#')L0ZA\Qgj&s][>0dh3QuW%q$B16:m[fk)Em=n-((j:H1Hsbq,5#l#FA\U<MO`P+'f@\@JPr(Zm8S@qaQ)basV*&\*d=q;.lkF#eOq`*rA1Zkh.;44PbtQZ]U'7%7hb2"G9L]6FcY'K1fCSUnfHuNGL+gT2ou5+^Jn9po-V!jKh0gXq]*0gQVO5Y,R<'7;iG_VLr[;i]_?9a9B:]),-:%6@><lr^6ahP%%Fa(L5c"832%YJ)T_F@sDPi@XaVQrY@D6R.qHQDKDKZaN+NBU>(PJK32.?,n\tE<>Si]k?cDCsVGk&C*a-TL:PY2hYjN2tYl,)%&%a-fX<-8!9-9fGu"3d*DeORj("aWkEHH&Mll9BVlCj2e)*b,#K/0V`4."o6E"Z"MMhjjH/)Y@GbQ@tp[)Q]COC*FC^1:bJ:XLDa/O%?-qeuW:a9!l%2u*a.5p@KMk.PB0=jh6/rc+ZLLK=F@!HZd?`37flTM[,mLHPIl:TV(#BP/l24O)a,c-fd5Ks6'T8)J(S>03ACC_D%da?USEG!Z'jjF=iPW)2m>u1^<3?t;2dg9Q)<_L;M7Y]6d$aQ<:rWC83cDCulV<`3+kRcEh5pI(`7e`"tFCKH>/mUTS16`b5dr3*)%hM9@Q$gNiR9`'CHl+AE53.MSYWEof`@)_fb:>DV6qKPRnrN<,YQ\u"]Hg(D"S*V?pqqY<iCgE"s^:Mtk-M5!T/oJs<GCIQD%sD&9%'t_kJ7IQ'o&QcMg',1X>M;.rJY,[DLhV!5ZD0Vps+$0)&!.:]773E>ZQ!uG3E5"`\5D)A$f-=IcG<<N8\N4<2I!WPOs&#:?fHAf$%L!/Q5YoO8P^$DTKd/+D"YITQ3],9e$4(l8q?$$lE9e#Ft]>=1g%suQln!&@\Ms^cW]*2G\fDh_)ODP=,?$"&/A`Q:(rl(Z3fA+>.%(Tt/)Eb%pN^Q?oNrA+!L`4["U7>[C$GAD,]IJAbbTl[9&OV?tGG9.6uf:!u5%@:&TbMl3VS,p5<["W#ZX>ISZDJAgQho,2(+q)"-%'rVcr#prtB&`L":)1P*f*h""\d5KR%cdqWqhgZM!6*/CMn,[]"6"R=p,0/CH"dR'[d2fp8S4LB!A3LKLa/$U_rd%&ZW?nr+Pnu&)%A(D=-M/&]1'$#">,ek^HXGO>tr_4'ehLr5T\5!4GWWMP!JGdPL)(0rO*+A!CBd.Z^hK_dmMN24t$/n@V13:,M4m(`5Il;gAqe6J,%.K4CL"3so&S]Uqtm71eX$ughB4?AM-8DNY<5KA3p/b:]7,"(uC6Wh[5\)q-Oj#A?8?7-P#`4NY1qq'l!L4``'f6^;&A1GL4M%&ul%oY&`CE]hgtGJi8+q3?TfE5u,gT8$jdiJt'DK\pc.a>==?iGQHTa!(&2!cH."I2_h7E&YX.Gm!iiOZ2BU:W!3O\>-P5KV&t8V_Wbq%7*#g]rH@#89WYpbhVJrJNns_o@cm=D^5X_LpAW*^$c%k5YJn4%4Z`3)?jq>F:eQ!(4]eGN5!DpiDET5T:L%)sCp"X:^R\\t(UZbQ%nGN!VfnH#3\2<Nt9Ff_,(Mapq&!Y!H(kqQnKKY&.PHg==S/Vm'B#CeW)ecbgX7Ac%H70R'BQL7+cE%G8>C%aLLiINA/ALa:DAlGQ%'%9c@<6p_.#0V#"*^#:9jAq&*L&o=@P#SC]%E#FIp^5^%pXsOaik99jbAk3%?*SD9Z1p>^2hN2H'n4HYc$6C<j>Z1[.EAiXc%Re.%,gni@L#oi<Cr6P?L`Ve,cQGQM`c0`YMZD]im$lXo+<kdR%l<(N=3le3Ea^c5HW?T;m@G'EkKhFTS'U[1I+p]Z\UE*(jf1)B2Gp9-%LBMchMXg/,1q^a!;mB1q5$Vako&a$_<I+%A>:SFaq"!Bs]VP$R]_:gcOrW2S<0l[`1B3<T.J#Cf+F:6JKWY.@KYrXe9+>f]C\%29%f-ldZr#W;;QgB(O4`$OBe?i^K4<L^^@nsLe^"02:b:tfbITI%O:!5r]3*5W_rfJ5$%Y=@TN^F^B-I^[WnMr-BmO=mXXXV.D?i1_r%SP7mp1hplS;Ch^*T)'A%q^rlfh7F)6ZrFUbHUi2cT.W+\=:43ZghP,9N`)sfUfrjhe0mK+/`gK,",\Zf]-UNQ6Eb;as/lN<\L'Ra%(*_N]iFK0[)^g38HH*Q8</eG+1<(nXX3mn@4V<j-llU!6(C/`!'ol08E*o)RE_G3;VU"+Hab+GtSq(^kX]9pT;Q/2WmY'poVmAQ+%d,J]7`Rn?/2_2#V*mH\B`2aN;]__!Zm?_r3F-d[:/0^2@fr$\e8gK=9\iJ,$XXKEcUVoODQY+/g/V[!89bT^1<OuP,o89Tsa>%;h%]gCO:0bt2pjHYEkkCN)N\lnC+'dh$#%?W>S#VSE.>W[H!pt.h:`eDIR9&j$ZIOpW&Eo\*+Yqe4A0b0mO`$!:.?:thW(LoMFEAigO%(Kf?2G%3N:\i`G(\PaJ2(`X=Sa+V&14):KS5c*6Tk9'?W+`C%Cqrp+`iQH!1^V)II,2%+g.;/V*M"%2Ap9WKT7lP+Z8p.1QIXBjD%-9L=$$cY3i+?[7fl=AB]f!ksanBLea&cou8-rBPOC.tUshDIa-atn,h@/im'BN;o$1JsE+heV!`0/k*j/*jn%Gh>dbXB1E]=he45%5q(;sj`3&4oi\gFW0@,4I43'\dY1&Zfn"%j'D0HZ=b(L5!'RZ/i%2ZM*.i534kBDD=b%)7cgg#:Z*FAijoG+gJN^)lJSrsFg^Ou[%$SZH.@.61iEO,Z*dPFEq`m4^FRfaMF7ukXlN10q%BD!i;$ZL`-e(ZDQV0mBGU*oKh+1RQ=0.6M9g5:)'?b_dQ`cERNPqY<"n>1NH%qi^rP9DLpB7iq8uI"OiGL;/u!J!SeQF"*_OMu@.Pnc`2hETq"%fZjVhrb"S-G-Be2B1!,TYFd5;H>iHqqJ7S;]me@u(].`+a1g.Y%Z>6eAmo.p\ce2."me,mm2Ukjsoo$Q7Dh.c.&TT#rEY=/=f.Y3QGAm0Gh-r9s9uB9+q@/Y12>D(.n4^"$me)LPeSjOG/(qUbUW"hF%hWkuKF[oUQ_nCNHqt9":;!ib9?ekS%dI-]!b_MdKR6XLgia+i.EA'l17G21'h!5b>P$qL-@nLrX\,+("o>eGo03[,Lh$)X'?GH:0%nVs(1*dXmE;"sJhXR^u3iu;P6]!]&R4*&;TJ:%7k9?V>1lPH+`66kuphs2)lWBe,<8/gGn^E-:!DY8o-(La/;hn=Kd\,$8@$k7Zh%?aMiG0.Um%l((LLN\0]Cpf>.\kC1LcIaMami-fu?h!5bQb<itk+8fH[kZ[i<`u"VZ^Z\o#,1cMnbBp0Vh<IMkfGO&LMn[^pOWJ$O%L>V;U?rl"6ZE2#LrSku)IeW\uArXjEf.YEtI&#Tb(O`@A@/'1#4+7&$nI9iKT=5U90n7$-.>-OD(DKO^kX:tDp\I<?eDsm#1#2(2%IB-]smkoPLI,qDY_Tg%Eh<R#HWD,b;lfUo2oW;a8IimPjdB(FdpdS&6B=I_s]'"t.lPC2ZAfGL;:6gt1oo!m7qWR\M7E;gKGB+.B%Y?t-&R-SMkBX+9!oo""Jl-A88n+DT^g\nI!fR*RK-l-kOj8erN`UkZN][ngfm_P%Sp$4=@4h(8JXc.M.T/3^&\,$E/c&ZtM?Z\VN%U7\b2o3T2q'cV^5,Mh\K`QK?n*86/;h<Plj\BsD\T\0#87GmB#cg;VK?9aHJE'c*]'-I.RP[&`Z\.)FJ1l(fLc69'#>9?!U.M>kY%)CF?dhg8..5iSN!T.!Fh(tRDU99?^.A7J?YHF;CH[cnDoarT"@B93We^?C$Dh,ZQY.8VP,WVO0D.4KK>A^Vci:R.A0=PLqiZ].rP%orb-jm>p'Y:osY(T3TUb/q.GF2LdW]mJ"NrjNm:lOh._q<VZ:#0kDs:QDP1QISTR.YF@UPcYBZ762<RRQYiYmr@RD^oCV?X]m=j0%>^`-o%eZI;g"P31<Bd/ms%JrTmNp:g9D+S9Ao2t)nag;jUtZgtj"PUu\3;^Fc>FNa\%A3%bjWU5S^tHW/Wl_QR@S+0k@^-\m/5m5%8pUHIS6o-+2Pfp+hPO8$HejsqN9Sf7qq7QXGH<<^0:g3Tj/&Ncg`8JUJEQO)\](VN\o1C6['r91G3?SrQd+3I_5k;Am*b"Mr?j],%HI>,7H.I#U"n.ZQI?r?'q2P@/+CYq'5^0ihmC#'@MX9TJCh9Je4F)4!^,FMTk?qPl(%(sDZ<g7*0pd!K-\nRJ(L#N9mT2J`OIX6g%^3kC$QDSCsJ/pS^#(+NPI@tAr"ZNa0ilP/$$MRbV=::kARZT6#(2qC(CN=i8iF2'Eg,LW_-T6#$Q/.F)Vn--A-bk[7<u^ELOKGdr%<PQ2\:SdU:7d:0B\btF:dL.mEjnUPCP8S9[2jX2:D:5K_GB:N_hn-IGRP.rQDrWe?mVtCJ8\5A[WF++mg;J&qEnsmRMt#6X5&sEE%cL>cC/;YAL:!<h>2!7Ed0*n)=(AqEC+?r/Mh6l3S+j44CkK5+4^k-=1V>9+;qR8T!]sAq:b^;N!dN$ZJN;1K^<h'Edie.4*=6IDo%pu'Q$3=g/iK3$r:BLN[XD/K8[I_k!5#eQIPiIqdY`!>a7eTm6&pD_90;]?@LKIM1nZ)eSOIje53+h)Tf+?=s?Q*+EfXQ3n@#J>X[%Nsgnsa#f3LpOD@n3',pBOs4E]4T%=,P_[PB$m/LIH*,Fl2!<B]F5U,9>KKQM1MlPuG/tLc.g:3d20s>.-*=,8Q>/#'*]%_g&#4NZ%=go_0_:r'RT)L(&&rS17Pe,2EL2'M*K3-fKP>Q8+(Qr")EO!)SaBqUo58QN-]iP+phmc!i?n7^jF-#F\bh\kRH+j4<j)V<6/.QiD%CQjh[p&</6Jhmoe^r4oEJ=Y+;J:WdjrDo>r>U83Wr+C*CgZGWLNU#XqH2([u+lCcuqn!4N]^&[1Oj$%+jm)u,f82's7aRSIO.bq=%/H&V;.]fp!q5PhQ2D<Fm`B&M<Y48K3X#k`T;:dJD\0(1m667q#(Q5iHb4O,/A*0Mu;UYR:,jfJTT.iKqIS>*S#F,0%OXn%f3Q)L)%/l2>6,uM2.GmY;Um_5_)#%lJ7M;[E'A))NOf8FS3cM>K&qR)XH]9Xdlk(;2KR.a*E8!j`./XIN=R^8ikc%Fis9YHEU',]Jn,q40^%,VAuH%F<D#bJu*MHl`jq9Q49ec-mQ=H2S#4mqX,:qj]X;VP>fhAilj@Y906)8A&ZrqIYjX=TP1,89-L_E<C\Cc%DtiZ\AO#_&:dM%GiM[g=I.T[\D\c-##*m"b[Ps.46Kg%9/r'0D6e;\i.Qc\q1H@`h"1@e01_(88*GMg>A\i2$\`\\TtIg""9j*MV]`(lG&icFZA6rd%_c*$ei_q>pXu%FQF<iqQqa^sIcIo>M3SqNgGr!)nk*t!4$q;3hdcS#B95&bq_M<EISOaQg^[a6/fX=P/\q/[9^Ktuc+@c*6qudB;%#%BUBK#=(9Q*-7l*8]DKq:Fs;IVbksPk$!rR9;OT8hF:3m\CV>1T.5JPDO"$HBqaYX)%K-9e@>iDl5AXp-NL;ofRkCETo55o3XbC%Xj3^$A`j5]m`RhT\[[TFNAaCokL.sOj!XT6EB/)dP<WFR1L&YF1NrA&^U"S-C!'S6fmd7j/bbBF0)/K]BX9E3/UWk^gX+gMcUMuf%I8bSufUg;/]s$ecc\pLVna3,n8h@/@l=$P<<RZpO;Jc#LP*c_Onb$SOlf?!$q5!dDh3qSH$cNqGq!4-I]:b923o"C9NG"^;j$PH9%jkq#&V?&d0iLkaCD389UAYq"Ml4b2,8&lPZM0-;,ld#ZpR^@H\&(E?V(Xfb_qD>[dI/i_9baq#-$ZE)*QP`,78Zq41WF?F\s%+89%]6KbpogGtHTe9^piW5O\hs@"pnrn$844VcC9DbV+9;UA*k1Atd8SS(s;r7;kkOQT_n'=b>=I1t72l.6R61CIhl)^DsC>8RQO[_Bp%g*$4/l+OfQ6CjLOhs$BOocC'l^r_4Nh:(ohN(.\@M;Rtc*FE/[Rhg-fj_(hW1IZD>UVuBObiDB2iMX)E@WW\tjumsnfLFhFQ<M@G%J>Aaj>Y$GMMiW^:.e?dJiS$9%a1!?G^5b`YGs(p(-bF;s_s#.0m%]B)b8Q?=jkf8tq5J_4.Qn_@+0d3jck7\,_^!>_IVqqlLZ<Oo%)%CMB[si%mAF@-pmbN(Al6$?()2-])'KlbMkh-_qXoXTC.b8)8Fg.)7f&D>JE+8F"he3lsMiH.j6>6CiO0M8>89_n%-*66;[*>!^%>7U%ANtr+n=X3JSkl#1AD%O6ESN/WJjuRR"AV@]ufZZqp\8F6\q1Y-AOafMS//Qq$p"fO4F(kjV]^>k]DU4(WDs+7a;Z#G78?]cj%:)/7/a%%)ZG'@]mq+s(%gQVJ;fq(7,(*7WH\!MU%f+o"`c)fL1<+a_E[X@U"I[F2s*/g(.d0Y8Z*H>[=4/Mc!gQ2:.j]-Z<B",OJ%pSe\pBDZec<2n)P9=NH.%sFD-0F$e(6NJbA"[$:?a4'@a/Pf)l*V"33,65Y84Pg`]!q],MF/!`sc7Bp/d4;&\c)t<&Sc$ucO>iJL%^J<hB0VhRL&^f3V8u+s8*+R'2Z<&38mN+i=;sW[b`Og29:jU0Yp3=!t5aKiAYA>/[H0EFRm"aej'C!@3KYcd95O""loB%dVQ#n-t%VS;dp*;BfN#O*%ZJCFGPa>&35]"_8hLOAO\M7.`q=)&QV,"EgO"HL*CKRW%Z]=IQQHshTt0K.j!AJ5csj<=?0ZEi+g!=c?B%uTOd%Ij<QNhofs((KjQnQY5ed.PFLTMbD%2WZh<cqB`iU^qKpWgelm-T=Bl]?UefkOZ"OjKu3!(9]NjS2.nttWn""Ls*+-/5Ku[l_=f2J%!8Rebe!fh2@s[^/`ZL-?Tq4e.2AWE@6tB]Pk*Ph>MYG)lXjo(d.d@Q/370Ca7X>a^MQDaFW*]dBnO.\^@Be+ER@P=Ib_MWlM=a'^%CWPpuaKZ>%/?$/m4;Kce7Z_*^9WoTe<s4Qf9s5]f(Yq<!,OQZFDEfF#/eh(r%-\e0k&4lk;Y,%5S6C0;mc)Q\eAB7u#E7R]ik!5e%#5=-URHHL:(K="/%U)FUmb0U;n8Fhj5KBc+mrck%p)rBBOWJ_:@b:rXT>d)Z3'Z@(>d#-u;]X:V*_W"IW8fT.Og2^l3&0X3$l+X>%W;4.^fV-4^U-1Y]Hu'pc7o)7kQ65")@Yjasm7R;/1"ZL#Bg4"0##f8[HariQUX^uhYA;b.,q7R^^LjFJ''-%=IB`\5q93[61Nf%@%X(:!KJb(Ca`YGmhnPledG6jg@SuHi?+6GpB>.1\P%PHqc*^9Q"lL'&r%/7:`Z#-6<Ri(IhF8,M%Ma*7W]d30Nr02eOb6p-J-Nl`q%E?!`[:\ZMKIep(jQ1O[kT,=o(I"Qb-bFR/J"5c[Mq8ihtGP=RZIq[c^Y`o#>s5^s'&X%W_i5r3uIecJ=Sd[^;Ab1rm4C@4GB*Y":%qbV'UK+,CSp]&?d-c:sk8H."f-c:rVpot8j1[Ma>o=k0%mN-VaK?DlZO*e<hCH7%hA3?q=\&?n4loFMeID,B^7fUb%^2ob,\G=[]%;O&3@YL?rZ7$Fe??+HD'.@e.di[naF3r*:`*q1YNe,ChG?]KU=)g(pWfbJfu@&_\GDoXrQnD*9G][n)W*'C>^bPj!@SNF<<1KjrT%6irg=c#7^EDu"*:aaA#qR!(/6D`tg-a9OCL)78rja.QcQo=4>Bh#ppKEKIENjE;d2&tc^oX18RG$[=r1hAnQ2gO0^k%#K[@2KbA$%:H^Z8n2\0e^GnVL-h+s3pTgPsG?h:Lc!6*CVf-M1g^1=XA+jL!oNn[oBNr!Qh^att9hqtN'K2DSUsqGLdsPJaCRsf`(E8_/j;ohJ%abd6q$:IFgUn0RY[%'bl`9']PZ'S^X6V1,@S2hk)G=_e:/H=QI3CN@B1URcd"IB8V`l[Qu,=,o>a?tQUNjB[^24G56Ub<>LTXPEk%rQWQX6\=]\m)5M(+!8l*ik=N3T7TP#fKB">6r8>DOUkcZ%`8!KL<<ST[ISbjgr]4#]*a**To'[%&AM,EJmK`[8/;+2aQ4K"q*;tH%mYnq<LopKhE=g]aAjhq)WZ1REl@<SC-l/j&.!;g_i]ngiN&kO"j[N[YBW_JqorV\(jNEY<*BCTAaZ?`FQU=arEoh6QAldtcZ&6%2%0h]$>;_5Qg&I3e#/m!c<kPEV."%Sta0phT8+n4SIN'6KI-1kcY.U9-8TECf(FRJm&iUE\N>s*IRDN/FVb@Or@PKN'X%^%`$^2brR%/>?46(m5DT/@(-E*fJ5))3MsoS+2oVP0`6phC8XL)lai$Nt'd%0HLV?Jb#0MM\m?m2,h.P@5o[+7rJQP5050cjLCGAF1F%Y%XsC"%(IRmbiui@gkD0+t*&/@QY""Ee>X#D=B]Q^42)90^C4BtYk*e:H/TPcST'#T;M4&\OV^J(AF55i%?tV':iVe1a30u2>%hk)p>pg45%7t0Hk/[OfuT,M<"DWAD:UrBg2+7sfekLn1X=gSOF(YR,_NE,LlZ..l<9fnN%P4KgYMliBbpAr)PUSIJ/lFcUWa;eD7/@lA1N463c%SGPRB>(4fh#JP"!)RnL*STCJKmC!?0_?6LnXdq#Ko,NRAH]ld2oDHof8NFWi@HQ\=oi#rS:1tOoGiC"=l/d=7UCJXZe:2h917-W!%/fZ]^IadWB.QUoa3>+oG?e9L@^eSG6`lSC`(@N>NR3ZL7GS)JIG4bPF2&q6i+cB@BXD]XO6%RM0HM2b>J,K/O?ejC-S[nQ8FGbDX%^t^_s2O2L0Gt!N<%:@H'ri1UqVVXJ-WbjoS>4;9nhl4rMD=naPf?Rsc0dl9bH2)gCi/+@m.VIa^:$?,-h/m[^Y:'W*`KL@LC0*Ee%O*h+R^H?&rS*ZY4U0j$.Y9n]sSSoFKU9si8^s?4cj3qc]aa]f?BmmIRo1_aW`nO+Ur6\_Kb^EE]MdKD!149&JS]"2h>`PeUV+V2>%k&Fm6\t#3*[Ndr]ZD2;OLYNEo(\\cS2>n]a2QBMbNf^=Qn8WN'DYA_LHrIt(#O`SJZiFo;b0QD5Kg`L3De7)Qd_VdAN[i-#g85]*%UGU[&AkA'FV[O;6Q&/dUaNX6"+FdcCA[*21c$]hhk(M-s#CtJSH/^[Z&MIScjGBLC9[#'4rbsTuYt1Tu."lJHEa>t=o\-Rl`$i^&%47=3FcCoE"NuRhB!ojC,/Ot9\-^CG8gm`L!IUK/@+Iu%],g8lb!PUJX'90:VUKf!'MjUbOFVB[!L+HnT\.?Xm'gNd4VR5*hR'g>a%]H>C^/973Ypo^;U3Qs7HN7m5OQ<LhA,SAEL$:(%FNlMNTFT1a:KP=RYdaB^'R61ALf@ia^chGaTEZq]XaQ7VVq4^`'QJ8h$H0rB&%@e99e]@Q0mQ]eoW=^bs`dYkNbB!mpM(P:ntV@^Y<$Ao#R_ui%_qZ3W(.)+A=?e^dBX-M\6FL1,e/W`i==%OGZ(f9g>?Rms?B]8"C%"1JGE;tIasB:'919J&jA$>RPqo9Y-/m&ff+]<_3:DOOY,<#+R4g[;PZqN>3!*U[h3fpt!9HfZ_]DVf,pV=ski<4jg?S<m=KX03fH%(-A;@4m#*o*o<(f23!Hf)YWh:HWj*;'s/J#ErsuHmY<ct4!W\"\r]ECpG:LB31omDRfi[SF+?qM9Knb_`uDDJ7%,*d_%OA@b9UqN%c5!'%].BKO(<DX`(u"#F*'M)GoD3),IU:+f]EW[m_"!ta4#m+(c#c/<)@"+l`%q^;p0GNto2`ddqn>Z%cEUnC8cNrX%6-6QA$"(a%HBd*j:2F\R%&f/Rg3I\9\shW63aBjg-(p(V:AnmiZ.D]='+S[ef^%XTT#e\kkV!`4IR$?ij][gSp3/:]m7q9YlfCuHZZd*#X-\^d%^K!-h"WQ1!dm\S!"!/He5Hf.ph6/nsIs[E6d=5#*f([ek&Ih`?34n-(V*<:J.%UrudbIt"2I[\d;?!](AJqZAp]irOb<6T8H_#9t%I:]M.I?`eEH".W(<Fl*2l5hMHb&[BkIl)>5Q\^^Z]e%K@es=S(`JK6<o0M(G:UCHl@>V,[D"85^n,t2SUuNF3`caYl/58&<X`UuH%F1IG!c5#MZ?!H8XgU,PRYmhtL#9KtL],MR-Q3ki>_.H;K#X`0B1BjsW*Rmn'ge8k0GsF`.E&32#r=*A;$u2ZL#>tbsOsF5D4XXn=%NFpKK>T:E=2p_%MJPHpM'@$[7V/HeR@2Z>-L!PpcK)*:5H:_4RS@*97EOh#n-RREq\+ij2F3_8EfU4.Sh9@A&;JebHq'rng50c5)%I*Oe-0^8B\>BM^.Pj"t@j[F<<q+cZq0.u0S)YD6@!lKXXZ5!#ZGu=s,F8>[^p!B6uJqa`'c8ZhRCQ%Q/XB!5FiPH>+#I;2Mp/oWr%hgApuANmcd]&?lP@LKq:CKs.U>iN'5!.cOA#W+1GiNB;sE$CC/=&+FcD=s$pF94?E#uK3+OFYJ.,f8?$5_SgI:K(N\Rk;&R?g\Yq%b"#a"ai.BH9VeGLHS_u0(!-f"!%UK=OI:=%r!Z`I>[/8)V%d%Nr'3%^TE9>b(aq:I2\lWBA^IO&A4Q#VcA)MT=>X,=U_leeX2('F%R?7`X_Ge9;->791MT).B$Ze[m#BquL_Pe)Z@3MFu<@.'VN.o6t.RJ(c.j0Vq/S&@M7aumC"[>r]E+!`OZ5_4WF!I=Z=kHUj6&CE.%Z(URnN(J56FXFQj$9j@/k1l+u%<_K6Pq7D8Sf2Zi(aQ%]/s#*07O1Y[N'Wb?OiO3K1`(p56?/Y4lbaqF]-0V,P&HP@lGfc#-`;Xg%=POdd;u>UZ%AU[a:me.\[+BEM;h[!,e56taN?!sI,S&d,jhnpbaF5\G,BAG](cR<D:kD=X9^7EPRCLr.ODT)QFFGilT,6>?XfGUi%(:`d@l#CEk3F>:a#4kTn^D<*4mHOa5a,)H(4`ilD^IULJFo>d$S9R'3j#N;ZjGk*u?m52kSHB8A:DQ4rc^4WYkg\f6YNjW[atnm$%TTB#\na:Xp,,2e-#_`M;Zua=RSp8?A_M.=rZFVEbMVrUan#LAYTBj4t348A:*6aj[0'rRjF+3JLG^_2':!VJATm2%Q<bk:$#Ilf&%7Y_U^f@r4WE>T4#ZrVX$9KRBhbgRah/K$SEAC7ZLVeCMa^p7d!cmW9R-eJbEo^_>A&HT+N?Z5CDIYqodh?afmT3TJT9+GCUZS<5g%LpZe,61k@-*-_<C2p@F#>EfMu;%e(rk9`8@o,#SeA*lTEbaT-n=gl+jH^<[]^H4App$AuNP525/\]=GN/Vr_KgT*=.YHhsNnTKZl%2=SO/SUIPG..#^Wh'5'KTTlE<Z#@dsNYUdEi"5#7FouNmc'$>Jb#<_\*q--lrLU=+T/5(/\(uqHbie*Q+6S2%SDEK(jnUB+&<]."%en+XdID,eIe%QQ#2>t/I"FhJ5FI#]Q(E-LP^hA;E^(i0D1?X;48mZu0rR`))c6(3JqS[1Ko_a08oWkuH`Q.VDiB'9S=gJsc$*']^%VkT57[M)V-cVJ\E<ZT'aWhJUR-IQBd5rJ<4<*]-@:/Gg,heS'[BQlt4T1Y*C\3--LVZCg=li+>sJGuoYHiIpK=8oA1'6998-c(<-%C"c-]Z'(!I_[dc]q_*e/;Dot:P5AWH4lu8%DXm>+qq5dbg4(K:&9N?)J$DpG/gY5b-RcTsS-<`)-R]Fb1:S\,";j<KUgtPG^]%$g%#Q>\hUa5p-.j6W8i8NS_@i)lW!RQ=ZZBRIBhE=EO._^.rO:=:P)NpB8F=!uWR[O(KBSqp0%EW^#q^tRoc)bLA!-2E-TR&k?qh[7F%kVOGo:!H4$=i2MWL'=38D'eq,DS(GP+8B\#s-$9P/m0Nd)HhpVUWQ3[Q=\a'm0bUJJP%d-@.(WH<Y)-I5LC(!,nj`JoLUI.SM_-I%<S(b003cf;#H!rUSOA8d)a9'o8;[d(,QsL'2,-e4Hpj?=.]3!<Ss:VcP%%TtJ>t6_(#CaQ[\[YH.2,6gi-QBGail6CAJ'`9)&dit%eg6<A;A@(!JC.8;YpL]rCPM4ncc@T9=@UWjWaa>$$pXq=L97KZ!hD-g>6$I%qOXK3Ul]2W\d+n\[T`gTUq'bu:n<+f<>46;YchXM%5\ODQBrXT/R?f0$TJr<M3.O=^!3pO=Xg@bld<2H!Je1-9+<]Wfdo$r>jFOP\1'kk8d`I;!=ImfG,#$t.#QpgU<Zjdq6%C[XTd!e9%5b*B==Ohu%a=e52@=TY(;+OuG)[QCYPHg-Y=>#9d@&f[_/]CgebGpHeJZ)_h!Z>-3#V][8%"'UQqa2eN!"c*eUH5%nO_P#TG@V%k%Y3;0hHcNt`ST3M>R0YSt&0dbi^_iXiEg700_2!4W*1/Dk%a5drOLQbb-mLIf%+R8L"(>au_c4=G%*&<`*&p2#"qD88!@mZGOHl)*%,#s4;%LjDF6Res)20CR*8MOWn5`<^LjW+SqpVhF,Oik?KL-l!KceNG*YuD:5Ud>5&fKc.u_IR%9OCocQ!84MW$E,A,<i9(Ikn:dR%eR8;'K,d77A4r4!,0Qhk_=ulgD<bRZ:j=lKAa"jRU(AK'Y6c=W0sQh!I&dm9AZJ;KdlCW4AY`^0LJ\T*aW`hJq4k9.,tfDG&3t=k%!<V:.HQbH6Go-$Dh?20i/&blEJ.)Q>gQ67Zd4L(k"0#ED1^OYp$e)%t5R=SV;i7Sc;lWHqmQr=%F]16<;GpOSF?:$8P5or'am-[W%LnM+69pK1!l\[t6bsmg]BR?oQk+rn^CK*#35iZpG2^cHn2N!qU9ND953g6s*(,C4GX8lE_1hMqL+B(*/ip[k=:`_J'eJ(Y:li?ZX%,XmBb@XCpV,;=kLPZ9$QTWD_"M'52j*b?I%"5T[sB=7k<<Rtl6D2i<oKMXMYHVQ#DG>Fq?(su;7-6X\)8eljoP-0_>JG,9S8cjN>%qD&'4<`<"8D^!-p]b!4bM#=cU+p;GECh"EW@6lK.M'KgoJ!;*!Qg$=sF'1:)`/og-_'"PkR8rJk(.u]apthGZ#\f@6a'^r./j`8n%[4m=.(kfWDY]<>rQod2$qhKT$/?j11?'+@/?5T1*2S<M@?3mUVeSNTaA4hI,YqNu$XJ*Lee\*YE)OoY3ac^'1@4+do@mjK)1:.Fh%'9GR6qAS!hVIBZ/>Ur^*&YmaU`W`TD*%MZB_(l`1ZnI#amQso=DNAZ=Qqu5sI+efk\8HFt%eHEg-Wsa]CX1J4m`;oLeK$m;9kTE3%+eikf!9XZQM@E%gBrW44&Ri$c!0ItVD/+]KCs$'BZ&sWmLMRGk7IPi<FUgs;%YnMG6jBPCl$=l\OYt>Je^t4"2Vf!=TcBg95\?`"%qGgUqM+`eQHqSueSa/TZ-eTop%2XO8O\jt\g_p0D^/BX95^%`.)?eEch>*N/^^($O24!\+D(;R+Xg(`%=YA1kM]dSV%ZW//\k"m"%j<,!:i>h+!36sR/$35gZbE+CXMJW^%<i<j2H>3M:hH%$LLk($V@sC=/R\>$N0K"80kDZ9')$d$:6_a#1"'K'fUKa1#LBH."QE@\/%`(NOeXEmM?M/>O%]+?A!ihqkL5QY,^&.R#!XV7'G=h;)+[NX<I&:n'pjq&8B;CjJO2(&eL9EIjf]`X!f>C=bbr4NY-ILHi,![@mD%(S+>.D.sR&+Cl1=Fb.I(?'o4JgH2Utc[%i.(_6ZO+!)&X_6'qYTJ&hGi#RoCh]b`]T$WZ,;:(7lL^)iQ+Q/D#+;5a9/%fL]'jtGU%V,63QSsgW)CCf;9@%%,@+N.)fPs@SR.0O*q)MQi126[oKJgRDt'uW:%!$n*OJokr3pmMA,=bI+[m=d5FEBs%g)l>DVTaFLk$*==I%n,T;DAnspTPEmC`R'mBq\8/H566QZ(+r.)?Bm:dl"8Wo<JJW#>3[k1YPsum\:qSO;GmV,[=Z(mW%aHu'!PLWH0UGC$ha*QBrO+$r%A%F?*GsppA6s!=pd7g*.cpCDdjH]3LV7]o&"`oV&%%S$Wjq'4?1krc%EtVo=C8mH9.SMDaSmhsNjo@k$bu2MI"rNRcmC-N'L'Y'>%Tb1\$CbVHW"LM#);8+qbOQ#]^P&,1lek%;(Aj,0W2Duni00BdW7QPmW_$lPkXEI/]!(59R^m6Fml7sS2bQ@t6++t5i;LmupO*^oQ%>]X;kaIjLu8YgbLj"B?@V>rYt\uI5t)'!ToZ"Q!5:3@B42C?9LR,Xp+C27Xc_)*;d?s0p(+GAOW3Ra((hhXik(e)n&"?L<p*mi"c%@upa0Ep#ReWtUk/.C/`GM$'T!+e$O=66/hS7o]g60Gop)PV*"?g_&6ZbA_(%Ufs!?^o&!H0t`R0T>)%GQu91n:Uh-6CGL,7YaEqe%Cn9Shr\.n<%=1W$kJB\3XQ%A@r6=:Cn>K.d\6i9Mj$]:@&7HJ:0H5_?6:qiN)^0#aU&6%.@T,lS<WPRA8fL3mV(>2Ho#Hh@"s@gI%Hc/CNmnnXeP>_Mu6!dE!K@Zj!cj\kS=k?majY<Etm4IFU/43L@A?QPcI:%g:3K:-I63#?26Q)ePr%U&6<$rg-cj_H_M1ikkRSHCh%;r^H(q4VT($[<t_942RoL![!c#h#mP&9,TAC.+<o$m:[!:_R6T/k62g#h90B9uVf_6u:Bh$_^J,=[b_c,9F:h;dMae94)1mfV%pp%l&f`.M#`]3-f&D01C1]"`hMfO"U$Z)M?28687dgYD*nI1dQP]+2&B:@0R-NHH&1C6J-+7mZq,`#9TWYS<?*dD$Btm6a>i+CN3m>5%VH=+/+BbIl82ZY?Z1q"65rb8Yg1(=A3(-24Y.5*%0X`8CEmQ_knM??AHm![41:e[86H+PVR=n."(tCbnKT79ShhDM(<7"$@/AVN0%Vm1(E'o<K%2kB\RS*DQ)r6Xo`F\Nj))haf^HC4nYNUC3f#D.k\.!J(8#-:+X`.=V^:iPN[i*]]b$`apr8?+,'6\p>F[/^IJ2C--?%,)hs]peWb(!TLK,+X154[P,M54?"k7ciT0V-:!CA,pR%QUj`M6HJp?6i[r(LWbH\YUp5O@P(44G0M0'n:11Z,k[G(='ETj,!o^M,%?k,VrRRDr\90sKs/TD%VLbWpU!#\`h,+U]#Z.T1:UM5!dP`<qEKj=%)R#fWNCY44GOh3M"',0!oOjLO+Vj%0+=plK'quV[@*Fjan%(jpNMa@fpUg1Xm)V,5=XZ<3:j+mm\O*1/4FoK?4g7Z;1OCl^kg'*;3$.0jopPJ;Sm+tA.&C7;Fqlu+P5W-Eu_ZE8?pZnfH3_ZgfX%G@C@mbbg+b?%Cmm6T5l+)QoD4;\(DjghJ$.1`PM>@d>'>[S9LNk=mem<&4Y$))dW3%a5Xo]I"4WgCkFV7_d0q4<3_)KRSO[W_3DP%ii6F'g,2361s_Plk_7r6:fJHs9[$-t<DpI0V_nN),Wm;>@.f1c*!shFf"DX55`CUn-pj<QbaCm"1"JSl?Ilb#<Dbm&U.@=9;H"0a%-GY/N,tTI4Eu5B._@WGFMW!PE&f=[_=7F]S<$[EpRURETW%YK7d%`sa.]Kd8Ya.0?)MK>QK'#gS+G?@$8V,lu,4[(t5c5PFD^%ll%odA]m3GY)-6gfX^iTe9>O-,l16hWiWg^th$-Gg0[ngI$0-BOYUlLLg1X#ju)(-rMSRiW,N*sYdH_GCu7'9#H+p@>*G1'Dq9f44J]%!,pbK0H=*(1us4TWo[_SBB05r3&$7/JG"SN6V,uI)g"Q$\2jnh4t-TH&tT75XbhbIR$Cc&?,QH2$aFZ1:183q_$%-\Ga2"X4'9;e%\o!=q"IE@oj:I,?/-k5Ie1b_]c(4!e_1ES)7JDfX9QF)*]I=,<?AKgtIM7SI3_Ii"eP85eD\6U0:kBmdj2Y=LAtgKCHcj20ba;?T%oNiEeYYq,\RHmN*-6e!9)_MD\X/qJ4C_"P+n@_P"P>(-&Z9a0;D.[VTTa!&*<>J6<4gCt9md2ZOp$df(_jMQ<0UPT1&DOG9pCq-U%9Q49rF!2h0ED,gm4Od$JHpr6Jlm$M,?eoU0&VV"J/6NZ`(6#-YQ$&rSJ/qdJ_(F1K?N`Rtit]BA8(M[I/(r8Y<AcEt2&2en`I[QY%+R:!a9M%gb)3!Rt@3Vio-=@Dg+`!)Z>X>hiKHhIA"UN#25q'4q)KF:FXA25X,(o6pL_cMT#!rG,";jK?\P+eJ#f]dPh1^Xn02RCU%0G:S\3FJVgV9pSuNT.aO4u'(Z,g^@g1Q)\,9QXI\AR^:FmX$s"1b3+l#GBMn`7t1__Pfkd1#QXl?APS:_B+"10UN&NdI+jk,LhEe%,EtG-75,^t7Ko&fGSNBWA4-#>H@SSMkVFZn"r#Ln66Mfo*LOb0=Hb<4\>27rBSjqD0\s1NMVa&T2""N`@CRrmoGD;i2?aU3+ds\`%@M\LNJ;#9V<=r]8g_V([?S2pu!hD?qV)(A9b<ooAZ\jgh\Dc08d9-Ll-Ar(nN4+FTKg6V=F-oU#`>.,;6oSp(SQ4Q\m#*P5cEE-[%[ZeQq0/b%oI8$r[o*1G]_G"fI$7l0W&JhB/A&r-@#W'8L'iZc*WbhGQ[]Kq[T$@dD2SC^Dc779S?PFhn08'L=^i<=]7T1DaM*Q>o%,]MgqOPga<<*bfR63mp,P+l[I;A,%k3Aif.(4m_aM63P7&<ro>o$\kH_%eff(!Xq[W*1JXK0'V[K(;0/Y6C<:&;Yt<H9tF6"&U8J%(I0gp2M3+RUP^bJc<-:1BO1s]:RisU0/qZ2^mkt##KEX!!$T`9KZLH6M'49dKE,^b(/"rF&qog@=;4AX$$bG"R;R9t2D1ViU@eKt%4m8e"V$Xr.]t=CY6C4'ml--CEVm?JH_G:5lg9$$!RM]3pV?/=lbZl,M>j'^-/a+rS$UFA[RR)-,.(CqZn8'!CrS4_n^k'm-"8ja^%B:u/_4t.bg$Ke,#jp#+QnA(ufWe4BSo8kPZ0S27l&dSU%<P>4o*O)!ZDF'(rn<Gc?,!fV":#D/NX<scC72A55MN5p&`$1i<3YL#.%`DRNoelW=lc!pc`\a9\WiZ]L5Q!#AjXQa,>L;qj$l,jOR/DUjF.@a4#&Aj1/HOB@%Llb,WVV8CpZH%LBaYZ^.6=7'1>o-/5.'&Q7%_^YYr[,iFEdXfpKD(Q@:]B68X-lRC@](d=35a9aS_OtQd`$M5f1N>dS8kA4!BQU-0cm`c_J^5_1S><2p.=pa)#0L9'j?BH$bJFHP%KIko,M_K5[:on%[Q*,@V#dpc$iuq7.Q77-S!+@Y?WQB^qp?6j`Afr%]&-<2@'q)mP:Z*C$.V$Z+XH\@J;j4tGN_cX,#H-6I;Y2DD%Qq_d5i;:)pH%qi!+q-KiX3._M8-=\l).H#E7$p(HN*60_&#mVj8qG:5J7D^1ZG]WNh?NZ/H[@.:&I(3eWpBqg^:bZS1`5.X.@TOU%k_9p`!F=[$Qks-(_J"nDJN,j&!OL92FH:&E0\*Hts4rcf/h2:1C_fEp.2a[30%8(9!7Q)QN"c43!/`(*@RZq)8G#Ji%ePP!_NR_D%<Kl'Q)RT2L,"i8EW?`aL0Zas?H:>ln0$WrR9Z_'rkd[0RP!/(M@#?:h+]B49Vo-1ZNe%:RZoHP\dp4X/7&QM$>fH-Jg_cIV-6Hj/%p)jX!Obk2qrF0D]=nb6rQNbjl5jq1$LXc])P?=34^553eKE)hj!ebP@c99niTOT@TWro]l/s3^NZg$I/6J)G$_(+Lf^;eDb>/4^T%VMHBjL[Y$+$4he\i^,t^\YEQjEg1$YZ*uj-H9;b*#S)Y&$BUF=Uiml<cbI;17=tNu+=Ol]cAN$54^&,E@j$:=RYm`2TK,Zq2=Edi%0OZ(DQno9\Rij>?Q)p[)6]1r=>/r(EDC192ZXFCfc7h43@2PXe`Ck;pY>$5EiY''.3L'(FN8g<\'EqDIf)Vc=ZqO7P?PLbu&2@R/%J;uF%fqZu#(_7H&QpbA=b1o8TUO$31J17d7Ml"452OHd$,K:p\LQ#N+)`)YGN^CNL9j8SnYZ1D'\21?90'R[S3M#+`j.7kbqV?ZG%]&M9//r[i0%89c4Tb=4*d#1tQWWHlWC+DUlM2?,MF+caJTWnUZ;.B`BimnEhBSO%F<?SjiS/e`40JKh;ggYgG<OJq?#l"?=R%kM&%-JMM4&6%,m+W\?k[Ud3-g_XC:FO\-,L`8Fc3h]RjM]`99g:AsZg3%BM+:M=1DJ\5X$V?.#f*P."a;Ta'-;IrE<8*$33!_3mWIYqG%\eh)5Oq:mlYe<:@#Ngc$O`*o/7\l_fj=T*tc$,Zc>V^;g&,6hQKVt'PbKP4t@<g2\1KapV(ciF@<42fqnbnbi=b&b59bliC$ecC^%DE*i4S7j5LaO(,C])kCU;1hlTA64o`:#'[LM1V2+rD5C=+IqsBR)A&gPA/]VLb>1Ri.m02&W1eK`.b`V@i*-p`n7"/M_;An3P1^k%5!utn'Qi1u*'bag%_rMj4!9*i%-/$<@sj/I3gp]'BD.,s'Mb[j'eRd09,F^,"1O27_Fu/l&M5!b$52).fFGi#<?Ho@h`0t\0K32%%_K`Fi+;LFL!&,u__tZpA@B_m\-lcigS!,+"/.N^3(*h%&7&(D4<44%oKOhZO8f[#M-/-')+:1IMGFj'A=tdgR(7VgJ8Z&a8*\A.9%1r_%4BH.j&!G"o\+2<sqI+;[<,H$c@Z7XG)-3:uY`<\8%:nC.7n^mk62+=ZZLQHa_gW8sa/?BBfn5upqi1XTb,VT<^/3o..Rhe/]%6(#;#4UN>4,)QC%`b'one'C/gg7B^M(g96kecE=$@KFEIEWJ#rM\upMWS<CFj(TF!=lq1+s7CJPX0s8))1I21%f<+H\T"<)80qOg%$O6_HP)t1r-A6!AYlf'VPA]F=[u^N.WddQ\j6h>XbOr!+V,Ej@C=HUcJuG$'M0k(,UI))/C,\kTWuc/V2sf^o-uJu<M7R^cCXdE7%,&p*#JG+#')[;f2ilTDON7qH])UQBEoJE57C1NqQFas-%hhDS/J/F29O]B+J#Q.TkjmmPe\sS(D]L6`DJ,5J(=5Gn,2LS-a&t=DL%iQ.X:-q1n"/&=;9AE_4XmUBdCTY`Ud9?H72Z0X*_fot7;/Qf$-+_s)(^b,e)-?=;@'Em:3cY^`;J[>,s'I0]pd^,GHkPD[)Wrl=0%3HQjGP:Z!EbBad8]bJo%5D<+fg)3PKE$_2b-YE3tH,8GeXgA_Rc,`tAL`?[b5cGOClDB6l,c;b;?mfIdG0+D<e5u1MXf^8<$Z!)8%PU[#X$MJgBaCd2Gnkr4>Z]fPfGHDo\%scAW3@[djj@L7VgW^H*QHG4A;bfWUPBJ^*XWj\'?m#AqhAd^fQ1#/dW[N/RFFCn@,<0bu%nes-BHWG+f]Hlr]P_5G'^lD=`h&eVNC6kIQ'P.&R-SmRUbXg<mZU)-j^"Eq[lcR5H]\MqL]tPGRlf[g?74N,V-RP-<8G.Dr+Nl_m%brP!JF!bX]N;*XaBi,'BP>[XlSNiAeWJrKOjGu*](J3d5j-6\E"8\tpp]Bt]:pB`Q+K'(WRB-d#R9G@*]&>d)[+ZmKWuY"&43r*U%@P!eGoJePgo;Eh,G5EQ6E1`*Sg"EH>kn9te2gDJXoo)FXq-4!RffRm"3QYHg`eI(7Za3f83),pOipj[m>j?UH[)RaO[,!*NgR[ZR%#/maOo<<d--L!faktf?c;\Qb0%^rXF)]c>&HNpTjA<O^NLg%6>N:NmNl<5WFC#%N9R-kDuf"NN*7q,qH-R)pQ[NOd39gTApdir(=%Wj]$^F!>(j]<HFIQ@"7apYa=*Z>Re9f+q%f]L>N49_UsASV]dR5RDaJ_=^aZR\V#JHf\U014*_Ed[)8XS^%!+]K&l%\Yc&o/Bmk,%/2nb^RY177-^b3A.=BVn&M`2W0a"!aPmd$U/]g,jQ=JhI/XQ(hai?=QM>D6NCXmK8;EKdu\6RgL_8:^MV?T.JoI_#ad^r+Iha0.s%m4@.h6!sopIINU)J$'S_q^HI4'!muAUos%"4ntO+[^P=I%Yo)`6kjB$>hY%%eOhAtg;M43N<_(IV_'*SXk0poKRu,=XIsblQhLB;%h&:#34-k%*g$<*&F(mQF4d5majj4<GHF1M'h)8"c.$VO#iR9<G7sd#_BF@AK%n'Wb#:'efn='5'XDI-VkP)tTf'am\\?jk`c\u,u%&`g="Hg]qhi0TT'Gd)/@cD"'hFqiI=(#fr_?SXA-3)`\2=Acu.N>f06s5D:ihGs<i^H>_>B7DfO.K_CUl'YI3&fDb`,Q-6Epf',e%_OiEp>tr0YrbQkS#9'kp%Za7WV\%6I\&$63lH!^Rhg7F(aCXt,d*k6lVWP,(4dS$iGchq*@(!/ZV+iKL\&mEECEddGMl[XS6LC?D%A7ZY#kLrP70g:'n2aR6Pn_P?=qDrY+^DJ$$*'>4J#_)F&qgP1lN[HU:=J"(OXWKiTD.Em$847'ZjrtNPZ&OTnD+ongf\*?86s=%5%TO:Q?]2Wd<0ik$+MZmLU^FXQ&r[!CNFuF-CI%/oRo!m+#<EsQ+4:$XH4HZ&NWN'bS1_1Q\7gg6PGE".R7p(Clg;VinAekbXfqf,j%_$GX_b@7c$F[0cWPMp[>L/M:qs,r,kSP6Z*T&[>MY0H?CAnoRG;2Z6BADKtIG&]fL@@=KaPmqO2DA<7rG%cMu1Wn!kp09;Q]IT$"%SSQQHV4J^Gm:%D[(JcqN_tc2`g1u!A.iTF?:h>u"?4lIrbd8H:UVU-mq)BEA?7[ir-_"^&1E.]0eDNKH7d_D*(ujPlIdKPQ/8!mR%nRPTOKPA`P)Se0n`#QPEj_\?K0qt5`!UMg$fj"/ccZ8QC%Q;Skail;*Fa<G]i<nNkIh]:lg*8c2*!:'oho<qpeNp\$e6>U5kgNqO%$)*!N&3>9;9'CUSIl2OU>LC7K9O$c`f/p72T%4,%EFmC.K7%k.q%M3hW3Qh,[ED35]hGYWoVdTVm:s_>D2%!<i:5"EP+Dqq97e?;%[KXlK0.6:MhI!q"a'NYF,Th='4Y\fg+D'tg'HZ<l-IS%3-Go")"V6t/^.HOe:M*TI0-K<-2#`*:>=$2GB7I\>];t;Rfi-Na/<YYa%DD@RE$\BsK#r@s9SE6$+7!R!FS)4P(UU/!FC4Tl]'CY_`0#>WG<`o;s9.Xi)^4i>UBt$(U8n+Bu".bj_'FKU$Ff/Uc]a>YQOWY[Z%kdko]L+^V*%fURRFT+S=h=Pk0,#/RB*AOgJ'@H8#eDT(V?f6.m=-ZQ256^]o#9e6(4,HbBDF'e8F]MVR\R#Ae,UQq\RV9,[L%bT3%&ijk7quA5cE$\D)MdAAa,%:R;&sG!iP`pglT]\bZ%k8<jMNUJ)q>J6J=Y[66/<WcL7d*Z#n-#6B`C"f+I4u2b@+4l[2ENaS/m^K[%475UZ%&7_"=Fu#Qf/=-_fIr^gCG1N9M^OE9A)oJ'5EEOD.ur]^g#E;nH>i-M2U^u-=n@k)V-*Hj"er$?KWGiZ)/X0Skk)A%+k/n7%6tSO7&#lPsj:^pV5lg1i\`Bj9B4ff4^aBI]>a$Y[*B=S/imDj`GcMj3_dI>dh.`M)TfDchMdr)#34prWL?'ItW-01=7*Odt-t3GK%clql.Q]&:bLOu+=pq`pPYrD"ACask$F_?iOr\!b>B>@*I@N2f)bs;hF5oTQ\W\RFVU^D-U(sPI]is.pV`]*=RRHuOQU)l(S@5Q[>%f!:pHj]!_R_gml+!b@\E9"0MN9jPVS5=6-:F_%fR.aoIErVY71'FBR2!6TlL1PceU-Ft43d%T<^h-YB2P8,c=CfEb:Y$MY1C.]4W%-3fS$N/:(If&%A:L&>ar\&@dKj0EWUb.k3;5WYL?=3'%%_s2(*.lZdulA6ECm\:.7BL11=((1<q+Os(0+sJe$7!tO`fqt[_SscQr%R>H@.cQ]_IcibllP,RfWW?TBnjBZ"@mn<:44+^G9Ya_5=TZjB(kMspg=*CRhl"9Mk]hV2f;W#Jg-;McjlHlAfQ']SHHBX2<AXRet%THZulFXHNTT5=AR-Zbn@eBr,G;gd>;3cVC*';r<ZVu#eO_l4,WXZB%P2M/J<*NJV6cj;$]or8ZqH*^7NlA'NAkp>/d*mD=_!(eOJ%En-"**$;]S`5-P!T"f(XSTl?m7Lg2@H/t4fM"3[#OSl_OUBh[,33h^0Nj=gP4j"\7kZNdE`-p@'\`\=*Q&(]JqUINpdT\,eaAZ2B%f22Bc^$*Ck:`5'l8QS!'7%bV!19'#,eHD@ZFo4/>`2.5qRCEY/&).oL_U.UH-rkA#F0"3p3u]rMIHuJIZ[%DkN'+=5g.*JoBD_(D%d/e5$T*orVULi_$^.]QdW\#!Q@kkAD/Q?`Ki3E$`:u)U[h8V+oG<Lu[R`pI81GtAXe!g;S]8)l_ALc3[l>rH<e6qq";,X]EUSLbB%;21FU/7(e\PZgBKD_3Bj]A,MdmuH[3VZ2h5q$-&A;3TYU(7%:/KqC.OM#9ZZe4r`tFIP26^Y9#AhY84>_i8ooisOe>bP\+;&aI5A%.2m*l45<Xu0:uXNoo5RU;mR5uh.bF+)Ln1_%b9grV#mj(*0)&<Y#ftO4*I"Ept58B]L:JrIH!Vc,$-'fWhEME9q+_+Gl-b=i\<$U%0a+L014;i>?st3CX<&!P5A7"IV2]#MSkR,]1K?@_pmpbk:d2-:-1@uH\+B;9er4Su+"WFU=K9olKc0\Qf)2`pC?i&J=hjsGHd[p1%=i>3NoiPpn"!Vs/,n`Z=Pn4#KDmkjGWM23DRYn]c4g4Zbc\gC]9"ito@Zo50NT'lSDB691hG-M]4553fcM3s,gALn-%0V6&`k_p>%57o,gfkX>o9&c3DG->9u+4A9_'YQ2Cq`A5QP'gpg.X&`K?#[8B@bU[?-`>%I+Au9W#9e7KD]_(FWV_#@n=8r?q\&FQ;Qqj$OOLf-%R9X9B9m+I$K,"aa@:?.E<HhJ_gKQU>(W&-3fWbX6YK+3m6oTfBN^%%Y#P/6iQtFl#"TN2oDXp.6KL;LZK#k@(d_X5.6*a\l]Ea_o%r+^4>ihmnLI(V='&!cf&+Z#:LeafHD?RE)?K3q>*H+\s+&3t_:+t/9F8!8KZnKJ*oJg.,8OsbP3kil1^fGNZ"L1T#Zo\/@1W]#S!%fQeLkA<UE!s"@9$kCOQ[Q<]]a5-&*.Y[F[2c]UgO=-T0uL,@na(8d0.)eT!,rQfAFplOC(6d,sTK^__>(&@$_kU9n1_*-V^#W>)U%.R1ou>(=-D7#=km9)1I!ehQM]N[j0<JCVkY\_K[26VhA4Z/25D(9,ScIE9&&n#fZnbquJ-1%?k0Kj<r+R`Zu^m`!Gk;Y4+a@d_1H%O;g6,NL9P1<-1p[V"+s25pap,K42=?'^m-f$66%2Ms-a'M!g+f<5,m^H[_(=oB'ZnV(-7Q'd\p2Y4!/W@VFB"k^F_>b2We2F?dr7%#0!k2`EY26lJ3g'c"W=Ph%MSc%P%D)=>%PBlsE$anWW0cQJ9[2lau[Gl%iJN>'%p;.Y@jfMs_0jr$&^:/UiN?o1EDrl15E$56#--%M!dR3UAK\leec^s=;K_F8A(YJ`+R;%0dr,^P'P7B/u!]sX6?/-e.k^?_BM)sM=0-'775%efe/`j7+<5;aj_&"7b-jA<qCXbgk/ih%p[.0'bro1[gk1Cfo/2A>FuCkY?SqNJ]W6$lQKtQ]-T8A$PI\2Zlc[;cG155>@uN-%e]=3Ve:MR!K$bnPH>-:4"15f([A_%)^F8M)%TX*RK#Mkr(/_L_HqP(Jq9WOY>/0[,CnJB/-Ql]k:7&IkZN/3k.86G4a_5G[\'0U[o^f?6H(X-2sk>X`@=d4`U1U6-O.)Ju(&%7Kf%I0LrImO+EN1bn7:P1+j\=2Fhdel;,M$Y<1EQ5^F`%"VXepL%-CT84nR&i!r00e1dq'AS4G"SW-bSE3BhL:"9iWQR_L0@.69mUs)?%)9Y`n:J@<5!/("MUiWA:FL2XdhO]IP$&e4=a3:,-6(#"8Ss[d.+B`X?Qgpf:DqC\e?1diIf\QV5fGbrFHNSM#f%Yg^p%BeIdbE6_%f[dk:NSP02&1LuYp;Cc_!5D<UH^*Qj\*jr&S+ZJQ3NT\cY@p!"PM+63J2I*fY'Tu*Wuis?Ha'<T7i06mqa=m_kSLqGA<c`[o!jV7%*pfo9-PkS-=k'u:&4L_0Km6&1-VqrKpJb*9=1pb3n>`sahNda,dXk&/:P?kE/p_ld.I$6]Go+.W2*P$bG153hDj0$aSs]0D1))Bf%HZ[];\#57f2YOhnPAT*uHILUr-8oasr&s<36*>N\YcHWP=;Yn=\^:VEo_,u*S),4QWjhGn?M*q6=`9pgp\nRJf9$a4]^`M4hB)$X%\">)8iebl1QDZ%BI@!L]=`<10,!P8Y'+qjD8D(o"W/@.j.P@(VI47+gI4rc<D\&0,p)mLVT1DrOEm`W7:+S\oa'J?2?l-NT6t$a)%A0u;r.NJbjhXpNi&4pdnSLWmk\b4/l(6nIb+B`UnEn/pf+M$_'ALJk<I2[!I19KPVh":;sWA2Ra%Gl-\o_,ub(VRKnf%W!"UDPED%m5lhmXj?Do]mVQoU:2N0<\Y8sMC51EE8:*Z@*'DlOS/=2E">)aH@*a^l0[ZoGa+/VhO`B,MO@Ubj.a!f\a&R/fe.UJ7+<\ui`>S[%<3Gnk[g1*&H]Y><:F,4@^$+ir:/%g:qcPOh`pKY4-Y?C6W[m?$V0?5;p0_$A:Lh2binN,]`GrqR7Qjln_GKu4i\qaT7@!8$M.Fit%JoD6'a\8nBqZ<e/@Dcd+3-^LnIoTqV(Wq-9k1kH8/fP-M#5kRS<FOUU/;kM4?hVU5pRaYKC2MXpmU,k8a/`kPjDFBeiESm#:Tj\)%?WTJ`pJff$NdOZpM#IId44V[UVa%YB^A=OaQOfo23_X#)2&)!qBJ>k?H9)bW9LASHmCm&W8Vqjq/'Qns$>KB\Wt<qg.oOB#LAPn=%DDQ\=;]dZbqU=4!`-h)Z4JI89IJT#de*l@l#!Lst%9T].E(rkZTsY.I:913L87=46D5YJUNR_`s@G%)K(IINJD*HfOK+W8te_`rO%OTm%Aa8);*D-KbNVtNPH0s(h8]Z>NK[7`3%]Z"%5L=dXi(Up#p<2Af[`%dSl8Jls?$pGRdbJ0\j5Q+X?(39CS7PX>ee#;jtY]AYu%da/@-*tf4$,6g/c/cLLfrMMl,8:Bk]+0V:3dhg_8No,_'5h$`_fP/B3:;T8aJ@o)R3MFpT<kZZR[&r\2dTF.Fg=_LEKZP73H>K]u%=Ei9/g]l0[VGS_go>^"MIKp>^MY!IBi.-`&h.\[^EK4YLj[.$ZN9.6W7QH*@e1UFB@'/]3Y6"%ZMJL"rmX0,T`lfu%@BF_(+oh+G%&';#&k2YPZd>[8O#dPn,B0*3AJ2A@'j>JgMSNS<(f-*$LQp5`cI$*1Dm14-MH2HRf?f$f=J+L.Arr"d)QYnuN="F+W>WJ8o_#9eV%YooEVD0f30hdch8#[%Zb+#8&=,D&i/GRb:NG$d%eVs1B)5obZpd=Jl^r]Nt`H.5SSJ$\Stc"A4M1\<s,(Xnk9\jiEF=r_#6cO$00%-KG'KrYX:7E$hBs*X@8^/!1jm'Aq]'S`=s/nnG3#k$^T16rdi06?%AI@?7MU:/'q=Ce*\]8'.D]N<D;qfi=BpZO.JEf+S7MprtEd%hVSs0b'?NaVcA*mP@5^ig$;&)5`r/TBTi7hQ8pF6`GlH<b3.!C%F/nhIN2VTh+hZ2,6#q`Zm5D__9R>lBNjJ)%3MM=.?P>`>**U:%-Qpg`mER),e.uo5jXcOiWZj.f(9SCQe3X;Q)g4I-9SMD.P3U9)aR_;QeLG-.eK6O25H@5WV#D$`qN(D3/,(,:GFE[sI,u69;is8j%&bV`PXHHYCiQ/s/:S!8CFImOlkgXl!;DYlek@DN*ojJ!1e70((gIL1]8EmMdNF<'nHX=^\>cT9t,L/n<.s@:G2B;N!U5^i&)bRMf%.rejW:W\)>(6^fk<TliuCG"Qh_q^niTu<\&&DcNj'm^lq%uWd.c=YrEXU.#5oU4CC(>Mb%-W(rjc@Fm%mFlC/"G(PomFIbpWou?6%]L%5pg"I>fL@M<r.fg0/g/^FLJ8hHDkX7_X`l1m/[Pr'>!B7]V#f9Ts(c1f&rC6#.+7cS7l\m+ZnqaQ`ICe$,KRdmp"@-49_=2lQ%o(,TD)2ge@jiuNR1_hi8hoMdS)I"sp:V0=,9OIk24&B]Yd@:I\[eYs#'>[(X,%u"eRQi&,Vo';HO>)4:oDNMMS12<Z4dk\`(T-7F%]1bo*"A[h2&jr"1aQoARpd:-uWqRj9<0N9onnW]IGE3QYMOllVU+=MZB#>%(0G+?.H+BZ[kq*g`U.(A4eS\kPTNt4Z1ljK@2\6O+%$?b`%r!@1p#"b^G+<d?YgL8]:cS=Pepcu8>&UX$E)_pV>6W[+>G61Y!5oc`<>mG\5]$j0&M17r@6_)SQ\#bN?]!I1tWdG2<aSCMj%Y]$KBeEf1qS)pA9i$=4=_]1cFmVsd5ktaceN:5.kdi/Od2hhi`8Y_!\OGcIQWS\c;cjggbDI^jmiJhhA#F!Sh%+Xl/plK[Ge)E0G%#:)_im(I,0&*n1i7Ta4I5C;2_'g;e'@.2r3EieePAdC'Z&@BQfs(`l'kb$'AZ\(\gOs\dYUU5g[#bkD'3l*Sdf_sqg<KM9>fPkUK%PD5XkGQ+/@O-T%hG"aHUHiEX@3c,f!bEWfH'ao=;P),c5.9CXs*$SO@.<$nde<Nn_@p4U8CG76i@c,9DaP,ZGa:7@>"CZJs%+F_a%WH63ZccLJa4/Id7?1]Pb^$T*=HCF\VgT96qU`KVI&7-ZeaJm;hjbJ5L:d0dGKS;"dVD035*C,6IYF9ka2kY_Xn1k8u#8>%%\YX?.%VVH4BP\:a;3=EQ<(5]!4+bS%RX@0_Z"Q\sucYQZ7&c%O3j#XUW]UAG:Vs1GmlU/N6(#/&.5A[CoHMS@2U9D%E@Riqg.YgRU<9;fQ%pq-"NSqc_)#Ia_C+rnY$7#D]Ug2s$^4Vq_1@QON6V]\/ZCO3Ch[,JIYA&T$KX^ab+]?-XoUr&/Af[WUIECU3FH_(EY10.?c0I')]%=4W">97agcMUE_D'H;i'Qi5D3j]Fs0Fdau&lRiE(!h&/$cr]`<1'Y&-@5+=+&s3F6^CfdXbT<Ic2A6b_EhMNKH6'mE=laP)1D#iB%ioVD33J]L$;kT2QhT0>`m?X(nR+fu@+QqG?B*"Z)+&dL(X5\M,UEmA;EB@u7LDQ&/bYdhI`9<ILXp)KoTm5\j^VuL5p<$&EKNab]%/?*jmSW&bsPH?EmR$!:cQ?XAZ5-u>RRl_kBTd/s+">!<D0',2/Z>P!JAMX/=j5.'17;Z0(GXEH1/GGQ8Pqt0+6+2l$Ja>"AB4_mq%!>)s25%[8dih@3_q6S1kOX6n\;D`iM+u1IZoC&c/Zs9X2rW9Fgk+CKA[a")T9[CmDHR]\s!k`OB.b@$`'@Qel@7>iK;7&.ME`G&=%?6F$E-R$"92m%s[0f.#=7PB"Ydu^X8et(5c9?TW!He\E6'g?VoP_Aj(!tJ(Zjm2_3m5,);^O[`LTh]jjpG"![+hA[:iC'up2<V*m%oG.ZC\]GDtCDI!T:W"WQ"Q4/k"?,*ursBh(7GFi3_uiq;3OAqT@[#B#F,(lnJ+A8c"KNO?UdS&\[aMn?;LH+%J#JA[<M(F>[]mo8%Qd1d-Su=\/-X)"FlB9jV;lpkg#?^b^6bgmRPf"spR*U"rKh1\>lL0CR`e+eu<Z4h%p9'r#;(r9S1I<1^#iSakFn;,nM)ueiOi)L/%GR9nQ^Ej(Goc[J[mZOZ/Z'opMc"<b^KUTB"ZceoM'\Z2d&h3d+mX]Dep5tcF+bZh3i>,qh\fim8*]B'_*h;Pd`&19]&%<.RSVU!n%DJ/q$7[S!1$*lt'>]m8nfZmugOhenpKZRj+d02i$5E*8TS8;E]7f<SXJSLC=)@;U$,@Rll,Y[>i6MHS=D?4.1fR2+E,6=9XHeBjm%DK5*]8mpXZ_IPK8L<9($bRfXdZb,`J@tohB$'S%5@5>;)-?1PE&iTg9=&sGnR0dO5\Y1TQSKp=iC*oT3=*(RTR5!;N'5j@6m"E*A%rgN2,ahfGcOTZGE6)Ko48<&:_1YT7ckJ)3Kog;28LC[nV7Fi`%,VX3_@C#]o71o7e-05#oIX"6/7-HT\,+Eu/6i^/l_+]Lqe:T=U%BEcOVfg9'\V/$"CI)VtB0UWjd?1*TEFU79>Xj_#MQ$1\?bV[hnC*_RQ?FCp$3Ght)'JEII]74FIeQl2$Q$me-4iQHkQDI:[deBcV%XOnUiA3HB-k(7%)TQsk[G"g#G%*bf4FTUA#&An`DK#NRZ)r2ePfg#t?T%IH?V5Vjc0B3=k]\E7e8mjl]=ok@QG^grMYP68BlJ;\G%VA,.BdY`[HU/QaNZ\Hkt(E@o044(efn+[i7=Uu\uge<j1bG"e9E\ENg!D+#Dm9ErpqH;HbS!;$d_NnWp2VHU\&PW_qXuOrWpS:g:%$LOQmfDEU3bi1kqJpkelBq&ZJAD(!Uo.IL;G(d7/p<ZISYX]#iPr0tq8)0CF/eo@BT'oT4>OpZ?GHa9pSRjm1eWR+18GcGkF'E0.%huE]&&rEX,P=WWIWqEo?E7[hdFl2[=)1tr&<:E^cE@,Q%XUf2\U6K7OG(#E0i5T:_lu$]Q'(c]&[KB>u36gPn[F>3Q.u>(\Bk0jo%JYgQI'(X&"=>\oV3Me$dLqD*OdJVF#E68F5%T.=I7]N2l1EiYCPJAHnB#1]23NUtC2bVjGO2:Egln+raR.*GF`.\#.7GR1*gTo3R%"Zr:@pln>f(Xa,)e>:2QGnTK6@f6!+=I`5='FOU<I:e5A6Q7@O6J5nE>9`US87+;!LBUu%pD0[Cf;]X.a<Zg[?N@B-5Qh=YGPt[K%>n>"",<907Jhp[&h37[jn0)/HD(Gpg.;Fu92@op&Z0No)h@`1PRPPmc:>g'\B?KDC>7o]/Gqt61P#BC'5k8(>AVlq"m(WoTFY:5n%&3DV/o=.*Qjm"1rdME4Ph)(E$aBDY&8]5i_U8El##q/g*5Vho@J^m2BMFgL.J,#t[Rt?s\pRtkX'F5iELM5?37'ZqB.W]@'PI.>9%Q]npGC@cIH3&ZHKR&!>V8([0N%*`KhjSb$>F^e&uCq%RA[mN6SFta!p^(:*D0M<)4%'@[k])+J2[-P5<e&YI&W9OLo5O#%SX*0_e%L^bW3=(@&F;/FnCi4=<iMH*b_CB1IW3JB]H<->7b(K11jkd@J9:&TkK@At0`LdP))["D#dmDU(cqr)[m#SpF,,VgtQqU,!#(uGAd%7q^j_:5$u6]kBU!e45Ut+]idT"Y4B=p(KZHI%#.bR>DkNlZ([Fb,Jj-C)T(p5*:]ZjSrLOq"X`qDuT/HfDkdA&&3I=pQt>ur7/"-%^A6o`^\e!(s7YJss7Q<ha1't+o\H.Ss7G+X5Q(%Ihu2g:s$$JSl1[Dks3mV>puD+@Iepr(rtjboM'r>cRpZ3E5J6q:N4(oV~>%AI9_PrivateDataEnd