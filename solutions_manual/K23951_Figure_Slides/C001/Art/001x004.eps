%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 001x004.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 395 163
%%HiResBoundingBox: 0 0 394.8345 162.0898
%%CropBox: 0 0 394.8345 162.0898
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 6050 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD8AFFA8FD3FFFA8FD3EFF7D7D7DFFA8FFFFFFA8FFA8FFA8%FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8%FFA8FFFFFFA8FFA8FD0EFFA87D7DA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%A8FFA8FD0BFF7D7D7DA8FFA8FFA8FFA8FFA8FFA8FFA8A87EA9A8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0D%FF7D7D53FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FD07FFA87DFF%FFFFA8FD0EFFA9A8FD2BFF7DA8FD12FFA8A9FD20FFA9FD08FF7D7DA8FFFF%FFA8FD0CFFA9A8FFA8FD1FFFA8FD0AFFA852FFFFFFA8FD0FFFA8FD21FFA8%FD07FFA97DFFFFFFA8FD0DFF7EFFA9A9FD2AFFA87DFD14FFA9FD1FFFA8FD%08FF7D7DFD04FFA8FD0BFF7EA9FFA97EFD1FFFA8FD0AFFA87DFFFFFFA8FD%0DFFA8FFFFA9A9FD27FF7D52FFFFFFAFFD0BFFA9A9FD2EFF7D7DFD10FFA8%FD23FFA8FD08FF7D7DFD04A8FD0AFFA9A9A9FFFFFFA8FD1FFFA8FD0AFFA8%7DFFA8FFA8FD0BFFA9A9FD04FFA8FD1FFFA8FD07FFA87DFF7D7D53FD0AFF%A97EFD07FFA9FD1CFFA9FD0AFF7E7DFF84527DFD30FFA8FD08FF7D7DA87D%7D7DFD0AFFA8A9FD04FFA8FFA8AFA87EFD1AFFA8FD0AFFA853FF7DA87DFD%0BFFA8FD05FFA8FFA8FFA8FD1AFFA8A8FD07FFA87DFFFFFFA8FD11FFA8AF%A8FFA8FD25FFA8A8FD0EFFA9FD07FFA9A9A8FFA8FD19FFA8FD08FFA8A8FD%04FFA8FD08FFA87EFD05FFA87E7EA8A8FFA8FD19FFA8FD0AFFA87DFFFFFF%A8FD0AFFA9A8FD05FFA8A9A8FFFFA9A8FD19FFA8FD07FFA87DFFFFFFA8FD%09FF7EFD07FFA8A9FD28FFA87DFD0EFFA9FD07FFA9FD1DFFA8FD08FF7D7D%A8FFFFFFA8FD07FFA8A9FD0CFFA9A8FD18FF7EFD0AFFA852FFFFFFA8FD09%FFA8FD0DFFA8FD21FFA87DFD0CFFA9A9FD0DFFA9FD17FFA9A8FD0AFFA87D%FD0CFFA9FD0FFFA8FD17FFA8FD08FF7D7DFFA8A8A8FD08FFA8FD0FFFA8FD%13FFA8FFA87E7EFD0AFFA87DFFA8FFA8FD08FFA9A8FD0EFFA9FD14FFA8FF%A8A8A8FD07FFA87DFF7D7D7DFD2CFFA97EFF7EA8FD0AFFA8A8FF7D7D7DFD%08FFA9FD0FFFA9FD13FFA9A9A9AFA8FD08FF7D7D7DA8A8A8FD06FFAFA9FD%10FF7EFD13FFA9FF84FFA8FD0AFFA852A87DA87DFD07FFA8FD10FFA9A8FD%12FFFD04A9FFA8FD07FFA852FFFFFFA8FD07FFA8FD10FFA9A8FFFFFFA9FD%07FFA9FD05FF7EFD0FFF7E7DFD1DFFA9A9FD0BFFA9FD04FFA9A9FFFFFFA8%FD08FF7D59FD04FFA8FFFFFFA8FFA8A9FD12FFA8A97EA9FD07FFA9A8A8A8%FFA8A9A8FFFFFFA8FD0AFF7D52FFFFFFA8FD07FFA8FD12FFA9A8FFA8FD07%FFA8A9A8A9FFAFA8FD05FFA8FD07FF7D52FFFFFFA8FD05FFA9A9FD14FF7E%FFA9A9FD08FFA8A97EFD11FF7D7DFD0AFFA9FD15FFA9FFA8FD09FFA9FFA9%FD05FFA8FD08FF7D7DA8FFFFFFA8FFFFFFA8A9A8FD13FFA9A9A8A97EA8A8%FFA8A87EFFFFFF84A9FD06FFA8FD0AFFA87DFFFFFFA8FD05FFA8A9FD17FF%A9A8FD04FFA9A8FFFFFFA8FD10FFA8FD09FF7EFD17FFA9FF7E7EFFA9A8A9%FD16FFA8FD09FFA9FD1BFFA8FFFFA9A9FD0BFFA8FD08FF7D7DA8A87DA8A8%FFFFFFA8A9A8FD18FFA97E7E7EA9A8FD0BFFA8FD0AFFA852FF7DA87DFD04%FFA9A8FD1AFFA97EA9A8FD0CFFA8A8FD07FFA87DFF7D7D7DFD20FFA9A8FF%A9FD0CFFA9FD0AFF7D84FF7D7D7DFD04FFA9FD2BFFA8FD08FF7D7DA8A87D%A8FD04FFA9FD2BFFA8FD0AFFA852FF7DA87DFFFFFFAFFD2DFFA8FD07FFA8%7DFFFFFFA8FFFFFFA8FD37FF847DFD08FFA9FD2BFFA8FD08FF7D7DFD04FF%A8FFFFA9A8FD2BFFA8FD0AFF7D52FFFFFFA8FFFFFFA8FD2DFFA8FD07FFA8%52FFFFFFA8FFFFFFA9FD37FFA87DFD34FFA8FD08FF7DA8FD04FFA8FFFFA9%FD2CFFA8FD0AFFA87DFFFFFFA8FFFFFFA8FD35FFA853FD07FFA9FD37FFA8%7DFD34FFA8FD08FF7D7DFFA87D7DA8FFA8FD2DFFA8FD0AFFA853FF7DA87D%FFFFFFA8FD2CFFA8A8FD07FFA852FF7D7D7DFFFFFFA9FD37FFA87DA8A87D%7DFD30FFA8FD08FF7D7DFD04A8FFA97EFD2DFFA8FD0AFFA87DFFA8FFA8FF%FFA9A9FD2DFFA8FD07FF7D7DFFFFFFA8FF7EFD39FF7DA8FD05FFA9A8FD2D%FFA8FD08FF7D53A8FFFFAFA8FD2FFFA8FD0AFFA852FFFFFFA8A9A8FD2FFF%A8FD07FFA87DFFFFFFA8FD3BFF7D84FD04FFA8FD2FFFA8FD08FF7DA8FD04%FFA8FD2FFFA8FD09FFA87D7EFFFFFFA8FD3EFFA8FD3BFFA8FD35FFA8FD0B%FFA87D7DA8FFA8FFA8FFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FFFFFF%A8FD05FFA8FFFFFFA8FFA8FFFFFFA8FFA8FD0DFF7D7D52FFA8FFA8FD05FF%A8FFFFFFA8FFFFFFA8FFA8FFFFFFA8FD05FFA8FFFFFFA8FFFFFFA8FD05FF%A8FD05FFA8FD0AFF7D7D59FFA8FFA8FFA8A87DFFA8FFA8A87DA8A8FFA8A8%7DA87DFFFFFF7DA87DA8A8FFA8A87DA8A8FFA8A87DA87DFFFFFF7DA87E7E%FD0DFFA8537DA8FFA8FFA8A87DA8A8FFFFA87DA87DA8A8FFA8A87DA8A8FF%A8A87DA87DFFAFA87DA884A8A8FF7DA87DA8A8FFA8A87DA87DFD0BFFA8A8%FD06FF7E527DA8FFFFA87D7D52A8FFFF7D845252A8FFA87D537D7DFFFFA8%7D7D527EFFFF7D525352A8FFFF7D597D52FD0DFFA8FFA9FD05FF7D7D52FF%FFFF7E7D527D7DFFFF7D7D7D52FFFFFF527D527DA8FF7D7D527D7DFFFF7D%527D52AFFFFF527D527DA8FD12FFA8A8A8FFFFFFFD05A8FFA8A8A8FFA8FF%FFFFA8FFA8FFFFFFFD05A8FFFFA8A8AFA8FFFFFFA8A8A8AFFD15FFAFA8A8%FD04FFA8A8A8FFFFFF7DA9A8A8FFFFFFFD04A8FFFFFD04A8FFFFFFFD05A8%FFFFFD04A8FD1FFF7E7D7D7DA8A87D7DA8FD057DA9FD04FFA8FD2DFF7D7D%7DA8A8A87DA87E7D537D7D7DA8FD30FF847E7D7DA8FF7D7D7DA87D7D7D7E%FD33FFA87D7D7DA8A8A87DA87D847D7D7DFD34FFA8FDC2FFCAFFCAFD3BFF%CAA7FFCACAFD3CFFA7C9C9CFA7FD3AFFC9CFBCCAC9FD3CFFCACAC9CACAFD%3AFFCAC9C9C3CAFD3CFFC9CAC9CAC3FD3EFFCFFD3DFFCAFFCAFD9DFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T15:12:52+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T15:12:52+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T15:12:52+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>108</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qpm5tw5QyoHBVSpYV&#xA;DP8AZFPE9sVVMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWPNDGQHdULAkBiBUKKk7+HfFVys&#xA;rqGUhlYVVhuCD0IOKt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHnDzNceX7SC6jtY7mKWQxPzkl&#xA;jIbiWXiIoLgt8KsTWgFMVSrzT+X1lq1xPq9zdzRTxyW97GkPBOLWUUionNQGYEysSTv2rQAAqypd&#xA;Nt1UKHnoooK3E5O3iS9TgVp9MgZkPqXA4HlQXEwB2Io3x7jeuKrv0fB/PN/yPm/5rxVJr4hNQaC0&#xA;nmb6vS5vla4lIVAY1Mf2iRWJmkFP2gN6EjLYw2s9eSCU2fTbaWJlEs4EikB0uJgRUdVPPKkr/wBH&#xA;wfzzf8j5v+a8VWvpkDMh9S4HA8qC4mAOxFG+Pcb1xVd+j4P55v8AkfN/zXiq1NMgVnPqXB5nlQ3E&#xA;xA2Aovx7DauKrv0fB/PN/wAj5v8AmvFVsWmQRxonqXD8AF5NcTFjQUqTz64q59MgZkPqXA4HlQXE&#xA;wB2Io3x7jeuKt6WnC04cncJLMoaR2kaiysBVnLMaDxOKorFUHrN9LYaXdX0UaStbRmVkkcxpwTdy&#xA;XVJSKLU7KcVY1PpMPnzRLK8vS1jHwu4zbwkseUqNalucsUMqsg5bFQK9QSFIKpp5a8vWmnaNBYxz&#xA;XEiWxeFXeeWpWJyi7Bgo2XoBgVMpdMgkjdPUuE5gryW4mDCopUHn1xVd+j4P55v+R83/ADXiqHvL&#xA;KKJDMkk5lAMcUZnm4M8hAXkOfY/hXJRFlW7K0SWCsryeqjvG/GacAlGK1oXJFQK0rjIUVVY9MgRS&#xA;PUuGqWarXExPxEmn2+grQZFXS6ZBJG6epcJzBXktxMGFRSoPPriq79Hwfzzf8j5v+a8VWnTIDIr+&#xA;pcfCCvH6xNxPIg1I59RTbFV36Pg/nm/5Hzf814qtTTIFZz6lweZ5UNxMQNgKL8ew2rirpdMgkjdP&#xA;UuE5gryW4mDCopUHn1xVbawLDqFyqPIymKFuMkkkgBLSA8Q7NxrQdMVRuKsH/Nj68+j2UNpHFOHu&#xA;az28qV5RqjAkSc4+FOVPh+LcUpQ4QrIdY13RooL2zkvYUu1URG3ZwJPUnRjEvHrVwCR7A+GBU3xV&#xA;2Koe+vrayt2nnkVB0QMwXm9CQi16sabDJRiSaCkoGz0RobC+jZwtzqJkkmZSXEbyr8SozAMyK5Yr&#xA;Ud+mTlksjuCKVtBs4LLTVtYARFFLOF5Esd53JJJ3JJODJIk2VCYZWl2KuxV2KuxV2KuxVDaf/cP/&#xA;AMZp/wDk8+KonFUp82PcJ5Z1M25UTm3kWMOnqBmZeIXjyQfFXiKmg6nbFUo8manY6V5S0uLVprfT&#xA;riVbl/TeRUQ+lI8krKWZlAC/GaGgHSgGFWQ6RPFPYieFg8MskzxuOhVpWII+YwKjMVdiqERBPftM&#xA;xJS1/dxJX4fUIq707/CwUeHxZO6HvQ5UWLVCULf6VEXkBLFeUJVQVFaAkSUPjQeGPOPuVF5BLsVd&#xA;irsVdirsVdiqGj/46U//ABhh/wCJS4qicVYh+Ztnp11otol/cQ20S3ilJLh5Y19RoZUWhiBYkc+X&#xA;E7MAVqK1BCqnmXyJoOpSXWqXwlnuVaO6hDPVY3tYnSMR7VVSJGJWtKknrirKkRI0VEUIiAKqqKAA&#xA;bAADAreKpJqb6ZqerW+jzIZpbR4r6ReJ4KAJAlW6V5AVU9jl0OKMTLv2Qd9k7ylLEr3UZP0jNpsl&#xA;vJy0+b9IRcQSZYwJpy6gbleRSLYH4z0zKjHa757fd/axtNdKiu7O5Inkd4dRZ7iONzX6vK1HaFTS&#xA;pBqzbnsdsqmQRt0+1ITjKkuxV2KuxV2KuxVCaXHHHalI1CIJp6KooB++fsMVReKpd5khin8u6rBM&#xA;6RxS2c6SSScuCq0TAluPxUA603xVjWj+T/L2t+VdMhll+s6dEl4scUEryW7rds6OGaVQ0jIrMoko&#xA;p+105UwqyLy1pdjpekR2NlGIreB5Y0A6kJIygk9zRRgVNMVUby4FvbvLQs4FI0AJLOfsqKVO5wxF&#xA;lW7S2W2to4FNeC0ZqULN1Zj7sdz74yNm1UNRl+rmK74M4iLiXgOTemyEkU93Vd/4VyUBeyChI11t&#xA;IzLcMzSWqA+nHw43BNWcUArsKKn2fi8Rkjw9Ov2LumysrqHQhlYVVhuCD0IOVJbxV2KuxV2KuxVC&#xA;RRxrqly6qAzwwc2A3NGlAqcVReKsJ/NhJpNF02GEuJJdRjQcJ4rY0ME1avN8FKdq17ipFCQqca75&#xA;o0O1W8065uDFeBEjETRSjk10riLg3Hi4JjapUkLQ8qUwKnqOkiK6MHRwGVlNQQdwQRirZIAqdgMV&#xA;QGjxt6Ety5ZmvJXnHMAMEY0jXbwRVyeQ713ICPyCWuCcy/EcyApam9BuBX6cVQ+oWX1y2MQkaGUE&#xA;NDOn2kcdGH6iO42yUZUVKpazGe1hmI4mVFfj1pyANMEhRpVXArsVdirsVSi/8zafbWN5cwt9YeyI&#xA;E0K1DjkxWtCPs7Fq9wKjLY4SSB3oJW+TmJ8t2da1USIeX2vgkZd/fbfI5fqKjknOQSlXm008q6yd&#xA;9rG5PwuI2/uW6OahT/lHpiqSeVtasNE8paOmsXDQSXIuGWWRhcLVDJcPzuIA0Kn01J+12oK0wqn3&#xA;l7UbHUdLS8splntp3kkjdaj4XkZ1qDQqeLA0IrgVMsVQjKJtRSu6Wi8gO3qSVUH5qlf+CyXIe9CL&#xA;yKXYq7FULYr6TTWtfgiYGFT2icVAHsGDKPYZKW+6EVkUuxV2KuxVSe6to544HkVZpa+nGTQtTrQY&#xA;RE1aoOwvobvU7wwkMkccKBga8qNLU08K9PHqNsMo0qY5FXn/AOc15DDoenQyeqGmvDQxxzMvFbeU&#xA;SF3ijkCcVYtvQ0BK/EuEKyC98p6DHp9zJJai5nWJGM9wWlcyWsQSKSrkjmAo+IbnvgVkGKpbe3lp&#xA;dRpaRyB5J5eHpAkFlhmCTg07AKwPjlkYkb/jyQmWVpdirsVdiqRtPdaDaFZj9btFaT6vIz0lFVLx&#xA;xFeHGmxXly222p0uoTPcWPJGafq31qdoZI/ReRBcWsbEF2g2Xm1CQDy7V6Ed6gRlCgkFMMrSlU+r&#xA;yxXDSRxm5tG4RQiGhZpmAdSGJC8WV+pNNvfLRCx5otZNqVzfwRJpEkX1miTTcmJVOLKfRdkDcS+6&#xA;9K0rtiICJ9XJbRKaTA8NqtwObQRek6g/A4KFCGH7QozUr4nI8Z3paVtP/uH/AOM0/wDyefIJROKp&#xA;L53uYrXydrc0pcRrZXALRpJIw5RlQeMKySUFdyF2G/bFUh/L/wAv6PfeV9PvbuBrictdHhcGSkZl&#xA;kMc0RicIoB9Mc04ceVeIpTCrKdDs7Wy0yOztIlhtbd5YoIUFFRElZVUfIDAqPJAFTsBiqF00VtvW&#xA;73LNNXvxc1SvuI+K/Rkp86QEVkUuxV2KoW5iuEm+t2qiSThwlhY8fUVSStGNaMpY07Gu/YiQI5FC&#xA;lHrVnLIgi5NEaerORxSNmrxV+VKMSKU7HY9RhOMhbR+QShr26mhEawRCeaRiFjLcNlUsTWjeFPmR&#xA;koi+aqY1WAxyuY5EaMApHIvB5Ax4pwVt/ib4QGoa9umHgKLdFYyypKb8pJJKEU+jyjAVKsvE1LBg&#xA;zE8gfDEyrktLreNI76WNBxRIIFUeADSgZElKLwKxH8yLmxttOsJLm0kvnlu1t7eBLx7Ic3jeQMWU&#xA;gEj0tj1XcgjfEKq+YvOFlp/13TZLS5keNYYfWQwup+tgpGd5fU2YbqV5/tAFanCrKEcOiuKgMAQG&#xA;BU0PiDQj6cCpJoumFbw3sg5pLBDNA5oOMsokM6gDszNz37scuyT2r8eTEBPMpZOxV2KuxVZNbwzq&#xA;qyoHCMHUEVoymoIwgkKlWo+XreWJntkC3McMUNpU0EawliAp6jkHIP0ZbDKRzQQx3Tp9cvdG06yv&#xA;oZPSglt4J5kaWs8IBtZi70XcuwfrWm/bL5CIkSPP4dWIumV6FpiabpkNuFCykc7jj0MrbuR7cumY&#xA;uSfFK2QCrZaXp1i0rWdtHA85UzMigFyooOR70/z64JTMuZWkVkUoTS3D2pdQQDNPQMCp/vn7MAcV&#xA;ReKpZ5ne3j8u6lNcBmggtpZ5EWZrcsIlMnEyqQUB40J6U61GKpFo/mWw0vy7pLfUJ4ob1bhoYRcx&#xA;XHpiEPJ8ck0sdAyJXb4I+jcRhVPPLWpRalpEd7FHLCk7ySCOdDHIvORmoQdtuXYke+BVSe0S9vnW&#xA;V3MEKx8olYiN2+Mski9D+wxHy7Eg2CVBCYZWl2KuxV2KuxVbLFFNGY5UWSNvtIwDA99wcINKgKap&#xA;ZkxQQpd2wFYRyETov++yTyD0r8J2+HrU/an6Tz2KFazsTHI11O3O8lH7whnMa9BxjRiQBRRUgb0q&#xA;cEpdByVEPDC7pI6Kzx1MbEAla7Gh7ZG0r8CoSJwdUuVANVhgrUEDdpTsSKH6MVReKsF/N6d4tCsg&#xA;w/0d7xVlkSV4pVJik4+nwilqep3p098IVkWs+X9BngvLyfTbWW8KGQ3LwRtIXiQiNuZXlyQbKe2B&#xA;Uw1JmXT7kqeL+k/AjryKmlPpyUOYUq6qqqFUAKBQAbAAZFW8VdirsVdirsVdirgABQCg67e++Kux&#xA;V2KuxVDaf/cP/wAZp/8Ak8+KonFUq82PNH5X1Z4VV5FtJjR2ZFp6Z5HkiStstSKKcVSTyNpWjap5&#xA;N0qS9s4r0ILn0jdotwyCWZxIqtKinifs/ZFQB2wqyPR7e3trEW9vEkMEUkyRRRqFRVEzgKqigAGB&#xA;VSyPKS7kH2HmPE+PBEjb7mQjJS6KicirsVdirsVdirsVdirsVdirsVQ0f/HSn/4ww/8AEpcVROKs&#xA;J/Ni4uLbQ7C5t3nhmhvlZZ7aIzSRj6vMGZQCpB4kgeJIX9rCFa8x/mBHazXWnxWguY2+rwiZJSrD&#xA;65E70aNowRIqqCEruGFSp2xVlV/Kpt4FccJJZoOELFeVRIrsNiQSqqSaeGSggo3IJdirsVdirsVd&#xA;irsVdirsVdirsVQmlsWtSzIUJmnqjUqP3z/ykj8cVReKpX5rFfK2sCjtWxufhjT1XP7ltlj25nwX&#xA;virEdI89Sab5V0p51fULuYXon9dnhmBtQ8hYB1fnEPhXny6FSAdwCrLPK2pHUtDhv2hNuLhpJQjM&#xA;GFHdmqrDqu+xIHywKjdN3s0k7TFpgPASsZAPo5ZKfNQicirsVdirsVdirsVdirsVdirsVQkTE6pc&#xA;goQFhgoxpRqtL0oa/fiqLxVhH5qJLJZ6OltAt3dQ34uVtGJAdFglhYnjJC1FadP2utK7VwhWXan/&#xA;AMc27/4wyf8AETgVD2On1ujqdyWe8lThGr1AhiYhvTVegOw5NSpoPDLJS24RyRSY5Wl2KuxV2Kux&#xA;V2KuxV2KuxV2KuxVDaf/AHD/APGaf/k8+KonFUm86qsnlHWYC3E3NnPbx0IBMk8ZijUVI3Z3AG+K&#xA;rPI/r/4V0/17dbSTi9bdOXFR6jU+28rbjfdziqvawyXfqxScktIppea0FJmMznia78BtWn2unSoM&#xA;waHmhNcgl2KuxV2KuxV2KuxV2KuxV2KuxVDR/wDHSn/4ww/8SlxVE4qhbzStMvZYpby1iuZIAwhM&#xA;qBwocqWoGqN+A3xVinm7zH5otru603S9Kkvo2NqglFtccRHcLOJ/3u0bFPTj3B+Hn8Q2wqytby4K&#xA;gmxnUkVKloKj2NJSMCpLrXnzSdGujbXsUyTRxLdTxhQ7rbuzRrIqxl+f7wcSo3A3xVNrjVTb2st1&#xA;JZz+hDG0rlBHIeCjkeKo7MxoNgoJOKpFD+ZOgS3v1PhP6rS28UAEZIb60q+kSdlFXbid6A05EE0w&#xA;0qZ6v5kj0uHncWc4Z0meLZShMETTMGdDIE+BCd9z2BwKpaT5y0rV7iSDTkmnkiRJWoqqvCRFdSrM&#xA;yq3wyKTQ7VFeuKoLVfzG0PS7t7W8jnhkgI+tepGQI42BCyVFVKl+Kcq8anrWgJpU1t/MUNxpp1GG&#xA;0upLYB6gIvqgxsUdTFy9TmrKVK8a1wKlFt+ZXl64uBAgmZ5JLZIQqEki8jSSBnG3ANzpU7DapB2w&#xA;0qYa55v0zQ0hfVIprdJyyxNxVwSil2HwM1PhBOBVLQ/Oun6xI9vawTG8hRWuYCoXgxA5JWQx1ZCw&#xA;5ClRUVAriqhqH5iaFYajJp9yJIri3dEulkAXgJY5JIyGqVbkIj36b/M0qa+XNRg1HSUvYFdI5pZy&#xA;ElUpIpE7hldT9llIIIwKmeKqN5ZWl7bm2u4lngYqzROKqSjB1qO9GUHFUh8zapqGg2lqmiab9ZDL&#xA;cgWkFtM6q0dtJNFvAOEYeZFT4uvLbpiqr5W1LWLjQ7efUdLmt72XnJNEAiCruX2SST1FHxdHFRiq&#xA;trfmi20e2imvYJIjcSi3teZjCvOysyIWVn414H4iMVVdK8wQ6rYx31ja3EltIWVWZUjaqMUYFJHV&#xA;gQykbjFUpu/zG0S0vPq00VwrB54XBjbmJoKHgFFa8xXga/F+xyrhpUym8z2cOi/pt4JzpnoLdfWE&#xA;VX/csoYPwRmenE1O2w64FQdv580iW/GnenL9ea5ntBEqhgJIGAYM5Kquzp1NCTQE40qtrnnC00f0&#xA;0urS5FxcAi0jCchLJQ8Yw0Zk+JjsFFT4DFV2ieb9M1xJJNLjmuEjCsX4ogKsWUMpdl5LyjZartVS&#xA;OoxVAT/mToMOoPYyx3CTxesksTxMsnqQrG/BEP26pMGFDvtSvY0qZTeabGHRBrkkMw0swrci4AQ/&#xA;uXAZX4h+dKGvTbvgVLrD8yNBvb5LOFJjNPI0dsOBHMJxDMS3FVHqNwBrQnatdgaVEeYvPGmaAsQ1&#xA;GKaGa5WQ2iMAVdokLsOUZk40AqTTAqr5e8yadreoXzWXPjBHApZ14hgWm+JDUhl5Ky1H7QI7Yqnu&#xA;KuxV2KuxVLNS8s6FqkzS6jZpdO0fpfveTAJyVyApPEVZBWg3pviqPubeG5t5beZeUMyNHItSKq4o&#xA;RUUI2PbFUpg8meV4JY5YtOiWWJoXR/iJDWwpCakmvDt779cVY/5zh84zaox07SxqNpbxq1qsjrCi&#xA;ySRyJIwdJoZefxKKUpx5U+KgJV2iW2vWVrLeWPly20/UJLj6vLHyLc7aCF3WTkWX4ndUiB8fiPJQ&#xA;MUJTcaX5qvri5nl8pWkbzqk85ncTNJdECJ6fvilEVQRVaGi9CBRVNNIj843MUWh6j5ftbPQJi0F2&#xA;fULs0DpI8jFVlYgytRSC5Kk1PKuylkieT/LSSxTfUUeWFoXhkkLSMptq+jxLliOBYkDx364FReqa&#xA;JpWqrGmo2y3UUZJWKSpjNf5krxbptyBpiqzTfL2i6ZNJNYWkdvLKqpI6VqwXYVqTvtuep74qp3fl&#xA;fQby4kuLq0WeWZo2l9RnZW9ElowyE8SqMxZVpQHfriqNsLCz0+0jtLOJYLaOvCNegLEsx9yWJJPc&#xA;4qr4q7FXYq7FULqGl2GoLEl7CJ44ZFmSNiePNDyUstaNQior3xVvTtNsNNs47KwgW3tYuXpwoKKO&#xA;bF2+9mJOKpdN5L8rzTyXE2nxyTyySytI5Zm5zrxkZST8JK7bdO2KoDzlp2qto9ppWi2S3FkwNvcW&#xA;fwCIwrERHG5aSFlj5ABih5U6A9Cqkmh2PmBr+a7vfK1vb6hbQ3N1Z3bytI7XDEpFFyLy05oq1o9F&#xA;p2+HChdqdr5s1WdZLvy5bteW7i2jvJJCYzbSANI6Ik6sp9WMGhNR8JBJGKoXRm/MLSY51sPKlnB6&#xA;vru5WRIwShc28KIsjfDQj4vhFSaipLFVmCeS/LpiKz2aSu7yTzbyiMzzqVmlVGd+LNybvUVO+BKZ&#xA;Ppdg2mjTPS4WKxrCsEZaMCNAAqgoVIAApscVQVt5Q8s2tzFdW2nQwzwu0kTotOLP9qgGwBpWnSu/&#xA;XFUVf6Lpt/LHLdxGSSIERMHkTjyBUleLLRuLEcutCRirWmaHpGl+p+jrSO1EoRXEYoCIxRFp2Aqd&#xA;h3JPUnFUdirsVdirsVdirsVdirsVSLXdeutMkupYrdrtbaCF0tU2MjzyOp+IK5HERbbb1puaZjZc&#xA;xgTtdAfb/Y7DS6WOURBPDxSO/dQHu539iO0m+e7+tEkmOOYCEsArcJIY5gCB/KZSv0fTlmKfFf46&#xA;AuPqMXBw95G/wJH6EflrjuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLdcuLqOOCO2kMTzvIplUKz&#xA;DhBJIKBgwqWQdulcpzSIAr8bFytLCJJMhdV/ugP0ofSdVu7u4tPVXgJ7eVnQEMpaFohzRuKNv6xD&#xA;AjqNvExxZDIi+77q/W2ajBGAlXSQ+3i2Py2/AB1mQ4LsVdirsVdirsVdirsVdirsVdirsVdirsVU&#xA;2+r/AFlK8frPBuH83Cq8qe1eOR2vzZji4f6N/j9LVt9W4N9X48Ob8uFKepzPqVp351rjGuiz4r9X&#xA;cPl0+xVyTB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kqdx9X4p6/GnNeHL+evw0965GVdWcOLp3fY&#xA;4fV/rLU4/WeA5fzcKmn0Vrjtfmvq4f6N/aqZJg7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:C89C53CE2A2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:C89C53CE2A2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C89C53CE2A2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T15:12:52+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -162.09 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 162.09 li
394.834 162.09 li
394.834 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 145.8 mo
194.4 145.8 li
194.4 0 li
0 0 li
0 145.8 li
cp
clp
0 145.8 mo
194.4 145.8 li
194.4 0 li
0 0 li
0 145.8 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
24.2998 131.22 mo
174.96 131.22 li
174.96 14.5801 li
24.2998 14.5801 li
24.2998 131.22 li
cp
f
gsave
24.2998 131.22 mo
174.96 131.22 li
174.96 14.5801 li
24.2998 14.5801 li
24.2998 131.22 li
cp
clp
.3375 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.7129 120.723 mo
25.1255 120.723 li
26.7764 116.058 li
27.1895 116.058 li
28.0146 113.724 li
28.4277 116.058 li
29.2529 116.058 li
29.666 112.558 li
30.0786 113.724 li
30.4912 113.724 li
31.3169 111.392 li
31.7295 113.724 li
32.1426 111.392 li
32.5552 110.226 li
33.3809 110.226 li
33.7935 111.392 li
34.2061 107.892 li
34.6191 106.726 li
35.0317 99.7275 li
35.4443 98.561 li
36.27 91.5625 li
36.6826 91.5625 li
37.0957 86.8965 li
37.5083 83.3975 li
37.9209 78.7324 li
38.7471 76.3994 li
39.1592 74.0664 li
39.5723 70.5674 li
39.9849 75.2329 li
40.3979 78.7324 li
40.8105 77.5659 li
41.2231 77.5659 li
41.6362 78.7324 li
42.0488 83.3975 li
42.4614 76.3994 li
42.8745 75.2329 li
43.2876 72.9004 li
43.6997 71.7339 li
44.5259 76.3994 li
44.9385 76.3994 li
45.3506 75.2329 li
45.7642 72.9004 li
46.5894 70.5674 li
47.002 68.2344 li
47.415 64.7354 li
47.8276 63.5688 li
48.2402 63.5688 li
48.6533 62.4023 li
49.0659 62.4023 li
49.8916 60.0698 li
50.3042 60.0698 li
50.7173 57.7368 li
51.1299 58.9033 li
51.5425 53.0713 li
51.9556 51.9048 li
52.3682 54.2378 li
52.7808 54.2378 li
53.1938 51.9048 li
53.6064 50.7383 li
54.019 47.2393 li
54.4321 48.4058 li
54.8447 44.9067 li
55.2573 49.5723 li
55.6704 46.0728 li
56.4956 48.4058 li
56.9087 48.4058 li
57.3213 44.9067 li
58.147 35.5752 li
58.5596 39.0747 li
58.9722 35.5752 li
59.3853 39.0747 li
59.7979 40.2412 li
60.2104 37.9082 li
60.6235 37.9082 li
61.0361 34.4092 li
61.4487 33.2427 li
61.8618 30.9097 li
62.2744 32.0762 li
62.687 30.9097 li
63.1001 32.0762 li
63.5127 25.0776 li
63.9253 26.2437 li
64.3384 26.2437 li
64.751 27.4106 li
65.1636 29.7432 li
65.5767 27.4106 li
65.9893 22.7451 li
66.4019 25.0776 li
67.2275 25.0776 li
67.6401 22.7451 li
68.0532 19.2456 li
68.4658 23.9111 li
68.8784 18.0791 li
69.2915 18.0791 li
69.7046 15.7466 li
70.5298 15.7466 li
70.9429 16.9131 li
71.355 19.2456 li
71.7681 18.0791 li
72.1807 19.2456 li
72.5938 21.5786 li
73.4189 30.9097 li
73.832 27.4106 li
74.2446 28.5771 li
74.6572 26.2437 li
75.0703 27.4106 li
75.4829 23.9111 li
75.896 27.4106 li
76.3081 25.0776 li
76.7217 27.4106 li
77.1343 46.0728 li
77.5464 47.2393 li
77.96 47.2393 li
78.3726 43.7402 li
78.7852 48.4058 li
79.1982 41.4072 li
79.6108 48.4058 li
80.0234 50.7383 li
80.4365 47.2393 li
81.2617 49.5723 li
81.6748 48.4058 li
82.0874 44.9067 li
82.5 46.0728 li
82.9131 37.9082 li
83.3257 39.0747 li
83.7383 37.9082 li
84.1514 37.9082 li
84.564 40.2412 li
84.9766 44.9067 li
85.3896 48.4058 li
85.8022 46.0728 li
86.2148 47.2393 li
86.6279 47.2393 li
87.0405 46.0728 li
87.4531 43.7402 li
87.8662 43.7402 li
88.2788 39.0747 li
88.6914 39.0747 li
89.1045 37.9082 li
89.9297 42.5737 li
90.3428 39.0747 li
90.7554 41.4072 li
91.168 40.2412 li
91.5811 40.2412 li
91.9937 41.4072 li
92.4063 43.7402 li
92.8193 44.9067 li
93.2319 43.7402 li
93.6445 46.0728 li
94.0576 47.2393 li
94.4702 47.2393 li
94.8828 49.5723 li
95.7085 51.9048 li
96.1211 50.7383 li
96.5342 53.0713 li
96.9468 53.0713 li
97.3594 54.2378 li
97.7725 51.9048 li
98.1855 54.2378 li
98.5977 54.2378 li
99.4238 61.2363 li
99.8359 65.9019 li
100.249 65.9019 li
100.662 67.0684 li
101.074 67.0684 li
101.487 63.5688 li
101.9 65.9019 li
102.313 65.9019 li
102.726 68.2344 li
103.139 69.4009 li
105.615 69.4009 li
106.028 68.2344 li
106.441 69.4009 li
107.266 69.4009 li
107.679 74.0664 li
108.091 76.3994 li
108.504 74.0664 li
108.917 74.0664 li
109.33 72.9004 li
109.743 68.2344 li
110.568 72.9004 li
110.981 74.0664 li
111.394 76.3994 li
111.807 72.9004 li
112.219 71.7339 li
112.632 69.4009 li
113.045 70.5674 li
113.87 70.5674 li
114.283 69.4009 li
114.696 69.4009 li
115.109 67.0684 li
115.521 68.2344 li
115.934 70.5674 li
116.347 78.7324 li
116.76 77.5659 li
117.585 72.9004 li
117.998 71.7339 li
118.411 72.9004 li
118.824 76.3994 li
119.649 74.0664 li
120.062 74.0664 li
120.887 76.3994 li
121.713 81.0649 li
122.125 81.0649 li
122.539 82.2314 li
122.951 75.2329 li
123.364 75.2329 li
123.777 81.0649 li
124.19 75.2329 li
124.602 85.7305 li
125.015 84.564 li
125.428 79.8984 li
125.84 79.8984 li
126.253 86.8965 li
126.666 81.0649 li
127.079 81.0649 li
127.492 78.7324 li
127.904 81.0649 li
128.317 79.8984 li
128.73 81.0649 li
129.143 81.0649 li
129.555 84.564 li
129.968 83.3975 li
130.793 83.3975 li
131.207 82.2314 li
131.619 75.2329 li
132.032 76.3994 li
132.445 79.8984 li
132.857 82.2314 li
133.271 85.7305 li
133.683 81.0649 li
134.096 75.2329 li
134.509 76.3994 li
135.334 76.3994 li
135.747 74.0664 li
136.16 72.9004 li
136.573 76.3994 li
136.985 82.2314 li
137.398 76.3994 li
137.811 74.0664 li
138.224 74.0664 li
138.636 76.3994 li
139.049 76.3994 li
139.462 71.7339 li
139.875 69.4009 li
140.288 69.4009 li
141.526 65.9019 li
143.177 70.5674 li
144.002 70.5674 li
144.415 72.9004 li
144.828 71.7339 li
145.241 72.9004 li
145.653 71.7339 li
146.066 71.7339 li
146.479 69.4009 li
146.892 70.5674 li
147.305 70.5674 li
147.717 69.4009 li
148.956 69.4009 li
149.368 76.3994 li
149.781 72.9004 li
150.194 72.9004 li
150.606 75.2329 li
151.02 75.2329 li
151.432 72.9004 li
151.845 74.0664 li
152.258 76.3994 li
152.67 74.0664 li
153.083 75.2329 li
153.496 75.2329 li
153.909 72.9004 li
154.321 71.7339 li
155.147 71.7339 li
155.973 67.0684 li
156.385 68.2344 li
157.211 68.2344 li
157.624 64.7354 li
158.037 64.7354 li
158.449 68.2344 li
158.862 69.4009 li
159.688 69.4009 li
160.1 67.0684 li
160.513 69.4009 li
160.926 64.7354 li
161.339 63.5688 li
161.751 61.2363 li
162.164 61.2363 li
162.577 58.9033 li
162.99 58.9033 li
163.402 60.0698 li
163.815 60.0698 li
164.228 61.2363 li
164.641 60.0698 li
165.054 60.0698 li
165.466 61.2363 li
165.879 60.0698 li
166.292 62.4023 li
167.118 64.7354 li
167.53 64.7354 li
167.943 65.9019 li
168.356 64.7354 li
168.769 64.7354 li
169.181 63.5688 li
169.594 61.2363 li
170.006 60.0698 li
170.419 60.0698 li
170.833 56.5703 li
171.245 58.9033 li
171.658 63.5688 li
172.071 55.4043 li
172.483 57.7368 li
172.896 57.7368 li
173.309 60.0698 li
173.721 49.5723 li
174.134 51.9048 li
174.547 60.0698 li
174.96 60.0698 li
175.373 55.4043 li
.884 .769 0 0 cmyk
@
grestore
44.938 131.22 mo
44.938 129.87 li
44.938 131.22 li
cp
0 0 0 1 cmyk
f
.16875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
44.9385 131.22 mo
44.9385 129.87 li
@
44.938 15.9302 mo
44.938 14.5801 li
44.938 15.9302 li
cp
f
44.9385 14.5801 mo
44.9385 15.9302 li
@
gsave
0 0 mo
194.4 0 li
194.4 145.8 li
0 145.8 li
0 0 li
cp
clp
41.7417 132.731 mo
44.4502 132.731 li
44.4502 133.312 li
42.3716 133.312 li
42.3716 134.565 li
42.4697 134.53 42.5747 134.501 42.6724 134.487 cv
42.7705 134.474 42.8755 134.46 42.9731 134.46 cv
43.54 134.46 43.9878 134.62 44.3242 134.929 cv
44.6602 135.243 44.8281 135.663 44.8281 136.195 cv
44.8281 136.748 44.6528 137.175 44.3101 137.476 cv
43.9673 137.776 43.4844 137.924 42.8682 137.924 cv
42.6514 137.924 42.4346 137.903 42.2104 137.875 cv
41.9868 137.84 41.7627 137.791 41.5244 137.714 cv
41.5244 137.021 li
41.7275 137.134 41.9375 137.218 42.1616 137.273 cv
42.3784 137.329 42.6094 137.351 42.8545 137.351 cv
43.2461 137.351 43.5615 137.253 43.7925 137.042 cv
44.0161 136.832 44.1353 136.552 44.1353 136.195 cv
44.1353 135.846 44.0161 135.565 43.7925 135.355 cv
43.5615 135.146 43.2461 135.04 42.8545 135.04 cv
42.6724 135.04 42.4834 135.062 42.3018 135.104 cv
42.1196 135.146 41.9307 135.209 41.7417 135.292 cv
41.7417 132.731 li
f
47.6626 133.187 mo
47.3052 133.187 47.0396 133.361 46.8574 133.711 cv
46.6753 134.061 46.5913 134.585 46.5913 135.286 cv
46.5913 135.985 46.6753 136.511 46.8574 136.86 cv
47.0396 137.21 47.3052 137.385 47.6626 137.385 cv
48.019 137.385 48.2852 137.21 48.4668 136.86 cv
48.6421 136.511 48.7329 135.985 48.7329 135.286 cv
48.7329 134.585 48.6421 134.061 48.4668 133.711 cv
48.2852 133.361 48.019 133.187 47.6626 133.187 cv
47.6626 132.64 mo
48.229 132.64 48.6631 132.871 48.9707 133.319 cv
49.272 133.774 49.4258 134.432 49.4258 135.286 cv
49.4258 136.146 49.272 136.804 48.9707 137.252 cv
48.6631 137.7 48.229 137.924 47.6626 137.924 cv
47.0884 137.924 46.6475 137.7 46.3467 137.252 cv
46.0459 136.804 45.8984 136.146 45.8984 135.286 cv
45.8984 134.432 46.0459 133.774 46.3467 133.319 cv
46.6475 132.871 47.0884 132.64 47.6626 132.64 cv
f
65.5767 131.22 mo
65.5767 129.87 li
f
65.5767 131.22 mo
65.5767 129.87 li
@
65.5767 14.5801 mo
65.5767 15.9302 li
f
65.5767 14.5801 mo
65.5767 15.9302 li
@
60.3774 137.252 mo
61.5039 137.252 li
61.5039 133.361 li
60.2793 133.606 li
60.2793 132.976 li
61.4971 132.731 li
62.1899 132.731 li
62.1899 137.252 li
63.3164 137.252 li
63.3164 137.833 li
60.3774 137.833 li
60.3774 137.252 li
cp
f
66.186 133.187 mo
65.8291 133.187 65.5635 133.361 65.3809 133.711 cv
65.1992 134.061 65.1152 134.585 65.1152 135.286 cv
65.1152 135.985 65.1992 136.511 65.3809 136.86 cv
65.5635 137.21 65.8291 137.385 66.186 137.385 cv
66.543 137.385 66.8091 137.21 66.9907 136.86 cv
67.1655 136.511 67.2568 135.985 67.2568 135.286 cv
67.2568 134.585 67.1655 134.061 66.9907 133.711 cv
66.8091 133.361 66.543 133.187 66.186 133.187 cv
66.186 132.64 mo
66.7529 132.64 67.1865 132.871 67.4946 133.319 cv
67.7959 133.774 67.9497 134.432 67.9497 135.286 cv
67.9497 136.146 67.7959 136.804 67.4946 137.252 cv
67.1865 137.7 66.7529 137.924 66.186 137.924 cv
65.6123 137.924 65.1709 137.7 64.8706 137.252 cv
64.5693 136.804 64.4224 136.146 64.4224 135.286 cv
64.4224 134.432 64.5693 133.774 64.8706 133.319 cv
65.1709 132.871 65.6123 132.64 66.186 132.64 cv
f
70.6367 133.187 mo
70.2803 133.187 70.0142 133.361 69.8325 133.711 cv
69.6499 134.061 69.5664 134.585 69.5664 135.286 cv
69.5664 135.985 69.6499 136.511 69.8325 136.86 cv
70.0142 137.21 70.2803 137.385 70.6367 137.385 cv
70.9941 137.385 71.2598 137.21 71.4419 136.86 cv
71.6167 136.511 71.708 135.985 71.708 135.286 cv
71.708 134.585 71.6167 134.061 71.4419 133.711 cv
71.2598 133.361 70.9941 133.187 70.6367 133.187 cv
70.6367 132.64 mo
71.2041 132.64 71.6377 132.871 71.9458 133.319 cv
72.2466 133.774 72.4009 134.432 72.4009 135.286 cv
72.4009 136.146 72.2466 136.804 71.9458 137.252 cv
71.6377 137.7 71.2041 137.924 70.6367 137.924 cv
70.063 137.924 69.6226 137.7 69.3213 137.252 cv
69.0205 136.804 68.8735 136.146 68.8735 135.286 cv
68.8735 134.432 69.0205 133.774 69.3213 133.319 cv
69.6226 132.871 70.063 132.64 70.6367 132.64 cv
f
86.2148 131.22 mo
86.2148 129.87 li
f
86.2148 131.22 mo
86.2148 129.87 li
@
86.2148 14.5801 mo
86.2148 15.9302 li
f
86.2148 14.5801 mo
86.2148 15.9302 li
@
81.0156 137.252 mo
82.1421 137.252 li
82.1421 133.361 li
80.9175 133.606 li
80.9175 132.976 li
82.1357 132.731 li
82.8286 132.731 li
82.8286 137.252 li
83.9551 137.252 li
83.9551 137.833 li
81.0156 137.833 li
81.0156 137.252 li
cp
f
85.355 132.731 mo
88.063 132.731 li
88.063 133.312 li
85.9844 133.312 li
85.9844 134.565 li
86.0825 134.53 86.1875 134.501 86.2856 134.487 cv
86.3833 134.474 86.4883 134.46 86.5864 134.46 cv
87.1533 134.46 87.6011 134.62 87.937 134.929 cv
88.2729 135.243 88.4414 135.663 88.4414 136.195 cv
88.4414 136.748 88.2661 137.175 87.9233 137.476 cv
87.5801 137.776 87.0972 137.924 86.4814 137.924 cv
86.2642 137.924 86.0479 137.903 85.8237 137.875 cv
85.5996 137.84 85.3755 137.791 85.1377 137.714 cv
85.1377 137.021 li
85.3408 137.134 85.5508 137.218 85.7744 137.273 cv
85.9917 137.329 86.2227 137.351 86.4673 137.351 cv
86.8594 137.351 87.1743 137.253 87.4053 137.042 cv
87.6294 136.832 87.748 136.552 87.748 136.195 cv
87.748 135.846 87.6294 135.565 87.4053 135.355 cv
87.1743 135.146 86.8594 135.04 86.4673 135.04 cv
86.2856 135.04 86.0967 135.062 85.9146 135.104 cv
85.7329 135.146 85.5439 135.209 85.355 135.292 cv
85.355 132.731 li
f
91.2754 133.187 mo
90.9185 133.187 90.6523 133.361 90.4702 133.711 cv
90.2886 134.061 90.2046 134.585 90.2046 135.286 cv
90.2046 135.985 90.2886 136.511 90.4702 136.86 cv
90.6523 137.21 90.9185 137.385 91.2754 137.385 cv
91.6323 137.385 91.8984 137.21 92.0801 136.86 cv
92.2554 136.511 92.3457 135.985 92.3457 135.286 cv
92.3457 134.585 92.2554 134.061 92.0801 133.711 cv
91.8984 133.361 91.6323 133.187 91.2754 133.187 cv
91.2754 132.64 mo
91.8423 132.64 92.2759 132.871 92.584 133.319 cv
92.8848 133.774 93.0391 134.432 93.0391 135.286 cv
93.0391 136.146 92.8848 136.804 92.584 137.252 cv
92.2759 137.7 91.8423 137.924 91.2754 137.924 cv
90.7017 137.924 90.2603 137.7 89.96 137.252 cv
89.6587 136.804 89.5117 136.146 89.5117 135.286 cv
89.5117 134.432 89.6587 133.774 89.96 133.319 cv
90.2603 132.871 90.7017 132.64 91.2754 132.64 cv
f
106.853 131.22 mo
106.853 129.87 li
f
106.853 131.22 mo
106.853 129.87 li
@
106.853 14.5801 mo
106.853 15.9302 li
f
106.853 14.5801 mo
106.853 15.9302 li
@
102 137.252 mo
104.408 137.252 li
104.408 137.833 li
101.168 137.833 li
101.168 137.252 li
101.427 136.986 101.784 136.622 102.239 136.16 cv
102.687 135.706 102.974 135.411 103.092 135.278 cv
103.316 135.034 103.47 134.823 103.555 134.648 cv
103.639 134.48 103.687 134.306 103.687 134.138 cv
103.687 133.872 103.589 133.647 103.4 133.479 cv
103.211 133.312 102.966 133.222 102.659 133.222 cv
102.442 133.222 102.21 133.263 101.973 133.333 cv
101.735 133.41 101.476 133.522 101.203 133.676 cv
101.203 132.976 li
101.483 132.864 101.742 132.78 101.979 132.724 cv
102.218 132.668 102.442 132.64 102.645 132.64 cv
103.169 132.64 103.589 132.773 103.905 133.039 cv
104.219 133.306 104.38 133.655 104.38 134.096 cv
104.38 134.306 104.338 134.509 104.261 134.69 cv
104.184 134.88 104.044 135.104 103.834 135.355 cv
103.778 135.426 103.596 135.614 103.288 135.93 cv
102.98 136.244 102.554 136.685 102 137.252 cv
f
107.333 133.187 mo
106.977 133.187 106.71 133.361 106.528 133.711 cv
106.347 134.061 106.263 134.585 106.263 135.286 cv
106.263 135.985 106.347 136.511 106.528 136.86 cv
106.71 137.21 106.977 137.385 107.333 137.385 cv
107.69 137.385 107.957 137.21 108.138 136.86 cv
108.313 136.511 108.404 135.985 108.404 135.286 cv
108.404 134.585 108.313 134.061 108.138 133.711 cv
107.957 133.361 107.69 133.187 107.333 133.187 cv
107.333 132.64 mo
107.9 132.64 108.334 132.871 108.642 133.319 cv
108.943 133.774 109.097 134.432 109.097 135.286 cv
109.097 136.146 108.943 136.804 108.642 137.252 cv
108.334 137.7 107.9 137.924 107.333 137.924 cv
106.76 137.924 106.319 137.7 106.018 137.252 cv
105.717 136.804 105.57 136.146 105.57 135.286 cv
105.57 134.432 105.717 133.774 106.018 133.319 cv
106.319 132.871 106.76 132.64 107.333 132.64 cv
f
111.785 133.187 mo
111.428 133.187 111.162 133.361 110.979 133.711 cv
110.798 134.061 110.714 134.585 110.714 135.286 cv
110.714 135.985 110.798 136.511 110.979 136.86 cv
111.162 137.21 111.428 137.385 111.785 137.385 cv
112.142 137.385 112.408 137.21 112.589 136.86 cv
112.764 136.511 112.855 135.985 112.855 135.286 cv
112.855 134.585 112.764 134.061 112.589 133.711 cv
112.408 133.361 112.142 133.187 111.785 133.187 cv
111.785 132.64 mo
112.352 132.64 112.785 132.871 113.093 133.319 cv
113.395 133.774 113.548 134.432 113.548 135.286 cv
113.548 136.146 113.395 136.804 113.093 137.252 cv
112.785 137.7 112.352 137.924 111.785 137.924 cv
111.211 137.924 110.77 137.7 110.469 137.252 cv
110.168 136.804 110.021 136.146 110.021 135.286 cv
110.021 134.432 110.168 133.774 110.469 133.319 cv
110.77 132.871 111.211 132.64 111.785 132.64 cv
f
127.492 131.22 mo
127.492 129.87 li
f
127.492 131.22 mo
127.492 129.87 li
@
127.492 14.5801 mo
127.492 15.9302 li
f
127.492 14.5801 mo
127.492 15.9302 li
@
122.639 137.252 mo
125.047 137.252 li
125.047 137.833 li
121.806 137.833 li
121.806 137.252 li
122.065 136.986 122.422 136.622 122.877 136.16 cv
123.325 135.706 123.612 135.411 123.731 135.278 cv
123.955 135.034 124.108 134.823 124.193 134.648 cv
124.277 134.48 124.326 134.306 124.326 134.138 cv
124.326 133.872 124.228 133.647 124.039 133.479 cv
123.85 133.312 123.605 133.222 123.297 133.222 cv
123.08 133.222 122.849 133.263 122.611 133.333 cv
122.374 133.41 122.114 133.522 121.841 133.676 cv
121.841 132.976 li
122.121 132.864 122.38 132.78 122.618 132.724 cv
122.856 132.668 123.08 132.64 123.283 132.64 cv
123.808 132.64 124.228 132.773 124.543 133.039 cv
124.857 133.306 125.019 133.655 125.019 134.096 cv
125.019 134.306 124.977 134.509 124.899 134.69 cv
124.823 134.88 124.683 135.104 124.473 135.355 cv
124.417 135.426 124.235 135.614 123.926 135.93 cv
123.619 136.244 123.192 136.685 122.639 137.252 cv
f
126.502 132.731 mo
129.21 132.731 li
129.21 133.312 li
127.132 133.312 li
127.132 134.565 li
127.23 134.53 127.335 134.501 127.433 134.487 cv
127.531 134.474 127.636 134.46 127.734 134.46 cv
128.301 134.46 128.749 134.62 129.084 134.929 cv
129.42 135.243 129.588 135.663 129.588 136.195 cv
129.588 136.748 129.414 137.175 129.07 137.476 cv
128.728 137.776 128.245 137.924 127.629 137.924 cv
127.412 137.924 127.195 137.903 126.971 137.875 cv
126.748 137.84 126.523 137.791 126.285 137.714 cv
126.285 137.021 li
126.488 137.134 126.698 137.218 126.922 137.273 cv
127.139 137.329 127.37 137.351 127.615 137.351 cv
128.007 137.351 128.322 137.253 128.553 137.042 cv
128.776 136.832 128.896 136.552 128.896 136.195 cv
128.896 135.846 128.776 135.565 128.553 135.355 cv
128.322 135.146 128.007 135.04 127.615 135.04 cv
127.433 135.04 127.244 135.062 127.062 135.104 cv
126.88 135.146 126.691 135.209 126.502 135.292 cv
126.502 132.731 li
f
132.423 133.187 mo
132.066 133.187 131.8 133.361 131.618 133.711 cv
131.436 134.061 131.352 134.585 131.352 135.286 cv
131.352 135.985 131.436 136.511 131.618 136.86 cv
131.8 137.21 132.066 137.385 132.423 137.385 cv
132.78 137.385 133.046 137.21 133.228 136.86 cv
133.403 136.511 133.494 135.985 133.494 135.286 cv
133.494 134.585 133.403 134.061 133.228 133.711 cv
133.046 133.361 132.78 133.187 132.423 133.187 cv
132.423 132.64 mo
132.99 132.64 133.424 132.871 133.731 133.319 cv
134.033 133.774 134.187 134.432 134.187 135.286 cv
134.187 136.146 134.033 136.804 133.731 137.252 cv
133.424 137.7 132.99 137.924 132.423 137.924 cv
131.849 137.924 131.408 137.7 131.107 137.252 cv
130.806 136.804 130.659 136.146 130.659 135.286 cv
130.659 134.432 130.806 133.774 131.107 133.319 cv
131.408 132.871 131.849 132.64 132.423 132.64 cv
f
148.13 131.22 mo
148.13 129.87 li
f
148.13 131.22 mo
148.13 129.87 li
@
148.13 14.5801 mo
148.13 15.9302 li
f
148.13 14.5801 mo
148.13 15.9302 li
@
144.786 135.083 mo
145.115 135.153 145.374 135.3 145.555 135.523 cv
145.737 135.747 145.835 136.027 145.835 136.35 cv
145.835 136.853 145.661 137.245 145.317 137.519 cv
144.968 137.791 144.478 137.924 143.841 137.924 cv
143.624 137.924 143.4 137.903 143.176 137.86 cv
142.952 137.826 142.714 137.763 142.476 137.679 cv
142.476 137.015 li
142.665 137.126 142.875 137.21 143.106 137.267 cv
143.33 137.322 143.568 137.351 143.82 137.351 cv
144.254 137.351 144.583 137.267 144.807 137.099 cv
145.031 136.931 145.149 136.679 145.149 136.35 cv
145.149 136.056 145.044 135.817 144.834 135.649 cv
144.625 135.481 144.331 135.391 143.953 135.391 cv
143.358 135.391 li
143.358 134.823 li
143.981 134.823 li
144.316 134.823 144.576 134.761 144.758 134.62 cv
144.939 134.487 145.031 134.292 145.031 134.032 cv
145.031 133.774 144.933 133.571 144.75 133.431 cv
144.562 133.291 144.296 133.221 143.953 133.221 cv
143.764 133.221 143.561 133.242 143.344 133.284 cv
143.127 133.326 142.889 133.389 142.63 133.473 cv
142.63 132.856 li
142.889 132.787 143.134 132.731 143.365 132.696 cv
143.589 132.661 143.806 132.64 144.016 132.64 cv
144.534 132.64 144.947 132.759 145.254 132.997 cv
145.563 133.235 145.717 133.557 145.717 133.963 cv
145.717 134.243 145.632 134.48 145.472 134.677 cv
145.311 134.872 145.08 135.013 144.786 135.083 cv
f
148.621 133.187 mo
148.264 133.187 147.998 133.361 147.816 133.711 cv
147.634 134.061 147.55 134.585 147.55 135.286 cv
147.55 135.985 147.634 136.511 147.816 136.86 cv
147.998 137.21 148.264 137.385 148.621 137.385 cv
148.978 137.385 149.244 137.21 149.426 136.86 cv
149.601 136.511 149.692 135.985 149.692 135.286 cv
149.692 134.585 149.601 134.061 149.426 133.711 cv
149.244 133.361 148.978 133.187 148.621 133.187 cv
148.621 132.64 mo
149.188 132.64 149.622 132.871 149.929 133.319 cv
150.231 133.774 150.385 134.432 150.385 135.286 cv
150.385 136.146 150.231 136.804 149.929 137.252 cv
149.622 137.7 149.188 137.924 148.621 137.924 cv
148.047 137.924 147.606 137.7 147.305 137.252 cv
147.004 136.804 146.857 136.146 146.857 135.286 cv
146.857 134.432 147.004 133.774 147.305 133.319 cv
147.606 132.871 148.047 132.64 148.621 132.64 cv
f
153.072 133.187 mo
152.714 133.187 152.449 133.361 152.267 133.711 cv
152.085 134.061 152.001 134.585 152.001 135.286 cv
152.001 135.985 152.085 136.511 152.267 136.86 cv
152.449 137.21 152.714 137.385 153.072 137.385 cv
153.429 137.385 153.695 137.21 153.876 136.86 cv
154.051 136.511 154.143 135.985 154.143 135.286 cv
154.143 134.585 154.051 134.061 153.876 133.711 cv
153.695 133.361 153.429 133.187 153.072 133.187 cv
153.072 132.64 mo
153.639 132.64 154.073 132.871 154.38 133.319 cv
154.682 133.774 154.835 134.432 154.835 135.286 cv
154.835 136.146 154.682 136.804 154.38 137.252 cv
154.073 137.7 153.639 137.924 153.072 137.924 cv
152.498 137.924 152.057 137.7 151.756 137.252 cv
151.455 136.804 151.308 136.146 151.308 135.286 cv
151.308 134.432 151.455 133.774 151.756 133.319 cv
152.057 132.871 152.498 132.64 153.072 132.64 cv
f
168.769 131.22 mo
168.769 129.87 li
f
168.769 131.22 mo
168.769 129.87 li
@
168.769 14.5801 mo
168.769 15.9302 li
f
168.769 14.5801 mo
168.769 15.9302 li
@
165.424 135.083 mo
165.753 135.153 166.012 135.3 166.194 135.523 cv
166.376 135.747 166.474 136.027 166.474 136.35 cv
166.474 136.853 166.299 137.245 165.956 137.519 cv
165.606 137.791 165.116 137.924 164.479 137.924 cv
164.262 137.924 164.039 137.903 163.814 137.86 cv
163.59 137.826 163.353 137.763 163.115 137.679 cv
163.115 137.015 li
163.304 137.126 163.513 137.21 163.744 137.267 cv
163.968 137.322 164.207 137.351 164.458 137.351 cv
164.892 137.351 165.221 137.267 165.445 137.099 cv
165.669 136.931 165.788 136.679 165.788 136.35 cv
165.788 136.056 165.683 135.817 165.473 135.649 cv
165.263 135.481 164.969 135.391 164.591 135.391 cv
163.997 135.391 li
163.997 134.823 li
164.619 134.823 li
164.955 134.823 165.214 134.761 165.396 134.62 cv
165.578 134.487 165.669 134.292 165.669 134.032 cv
165.669 133.774 165.571 133.571 165.389 133.431 cv
165.2 133.291 164.934 133.221 164.591 133.221 cv
164.402 133.221 164.199 133.242 163.982 133.284 cv
163.766 133.326 163.528 133.389 163.269 133.473 cv
163.269 132.856 li
163.528 132.787 163.772 132.731 164.003 132.696 cv
164.227 132.661 164.444 132.64 164.654 132.64 cv
165.172 132.64 165.585 132.759 165.893 132.997 cv
166.201 133.235 166.355 133.557 166.355 133.963 cv
166.355 134.243 166.271 134.48 166.11 134.677 cv
165.949 134.872 165.718 135.013 165.424 135.083 cv
f
167.79 132.731 mo
170.498 132.731 li
170.498 133.312 li
168.419 133.312 li
168.419 134.565 li
168.517 134.53 168.623 134.501 168.72 134.487 cv
168.818 134.474 168.923 134.46 169.021 134.46 cv
169.588 134.46 170.036 134.62 170.372 134.929 cv
170.708 135.243 170.876 135.663 170.876 136.195 cv
170.876 136.748 170.701 137.175 170.358 137.476 cv
170.015 137.776 169.532 137.924 168.917 137.924 cv
168.699 137.924 168.482 137.903 168.259 137.875 cv
168.035 137.84 167.811 137.791 167.572 137.714 cv
167.572 137.021 li
167.776 137.134 167.985 137.218 168.209 137.273 cv
168.426 137.329 168.657 137.351 168.902 137.351 cv
169.294 137.351 169.609 137.253 169.84 137.042 cv
170.064 136.832 170.183 136.552 170.183 136.195 cv
170.183 135.846 170.064 135.565 169.84 135.355 cv
169.609 135.146 169.294 135.04 168.902 135.04 cv
168.72 135.04 168.531 135.062 168.35 135.104 cv
168.167 135.146 167.979 135.209 167.79 135.292 cv
167.79 132.731 li
f
173.71 133.187 mo
173.353 133.187 173.087 133.361 172.905 133.711 cv
172.723 134.061 172.639 134.585 172.639 135.286 cv
172.639 135.985 172.723 136.511 172.905 136.86 cv
173.087 137.21 173.353 137.385 173.71 137.385 cv
174.067 137.385 174.333 137.21 174.515 136.86 cv
174.689 136.511 174.781 135.985 174.781 135.286 cv
174.781 134.585 174.689 134.061 174.515 133.711 cv
174.333 133.361 174.067 133.187 173.71 133.187 cv
173.71 132.64 mo
174.277 132.64 174.711 132.871 175.019 133.319 cv
175.32 133.774 175.474 134.432 175.474 135.286 cv
175.474 136.146 175.32 136.804 175.019 137.252 cv
174.711 137.7 174.277 137.924 173.71 137.924 cv
173.137 137.924 172.695 137.7 172.395 137.252 cv
172.094 136.804 171.946 136.146 171.946 135.286 cv
171.946 134.432 172.094 133.774 172.395 133.319 cv
172.695 132.871 173.137 132.64 173.71 132.64 cv
f
79.311 140.47 mo
79.311 144.438 li
80.1436 144.438 li
80.8438 144.438 81.3618 144.284 81.6904 143.962 cv
82.0122 143.641 82.1802 143.136 82.1802 142.45 cv
82.1802 141.765 82.0122 141.268 81.6904 140.946 cv
81.3618 140.631 80.8438 140.47 80.1436 140.47 cv
79.311 140.47 li
78.6182 139.903 mo
80.0386 139.903 li
81.0254 139.903 81.7534 140.112 82.2153 140.519 cv
82.6772 140.932 82.9082 141.575 82.9082 142.45 cv
82.9082 143.332 82.6704 143.976 82.208 144.39 cv
81.7466 144.802 81.019 145.005 80.0386 145.005 cv
78.6182 145.005 li
78.6182 139.903 li
f
85.7217 143.08 mo
85.2104 143.08 84.8608 143.144 84.665 143.255 cv
84.4688 143.374 84.3711 143.569 84.3711 143.851 cv
84.3711 144.073 84.4409 144.256 84.5879 144.382 cv
84.7349 144.515 84.938 144.578 85.1899 144.578 cv
85.5396 144.578 85.8193 144.459 86.0293 144.207 cv
86.2393 143.962 86.3447 143.634 86.3447 143.22 cv
86.3447 143.08 li
85.7217 143.08 li
86.9746 142.821 mo
86.9746 145.005 li
86.3447 145.005 li
86.3447 144.424 li
86.1973 144.662 86.0156 144.83 85.8057 144.935 cv
85.5957 145.04 85.3296 145.096 85.0215 145.096 cv
84.6299 145.096 84.3149 144.991 84.084 144.774 cv
83.853 144.557 83.7412 144.263 83.7412 143.892 cv
83.7412 143.466 83.8809 143.144 84.1748 142.919 cv
84.4619 142.702 84.8887 142.591 85.4629 142.591 cv
86.3447 142.591 li
86.3447 142.527 li
86.3447 142.241 86.2466 142.017 86.0576 141.855 cv
85.8687 141.702 85.6025 141.618 85.2598 141.618 cv
85.0356 141.618 84.8257 141.646 84.6157 141.702 cv
84.4063 141.758 84.21 141.835 84.021 141.933 cv
84.021 141.352 li
84.2451 141.268 84.4688 141.198 84.686 141.155 cv
84.9028 141.114 85.1128 141.085 85.3228 141.085 cv
85.8755 141.085 86.2886 141.232 86.561 141.52 cv
86.8345 141.807 86.9746 142.241 86.9746 142.821 cv
f
89.8647 145.354 mo
89.6826 145.803 89.5078 146.104 89.3398 146.243 cv
89.1719 146.384 88.9482 146.454 88.668 146.454 cv
88.1641 146.454 li
88.1641 145.929 li
88.5352 145.929 li
88.7031 145.929 88.8359 145.887 88.9341 145.803 cv
89.0317 145.719 89.1367 145.53 89.2559 145.222 cv
89.3677 144.942 li
87.8213 141.177 li
88.4858 141.177 li
89.6826 144.172 li
90.8794 141.177 li
91.5444 141.177 li
89.8647 145.354 li
f
97.8218 142.695 mo
97.8218 145.005 li
97.1919 145.005 li
97.1919 142.717 li
97.1919 142.353 97.1147 142.087 96.9751 141.904 cv
96.835 141.723 96.625 141.632 96.3452 141.632 cv
96.002 141.632 95.7358 141.743 95.5405 141.96 cv
95.3442 142.178 95.2466 142.472 95.2466 142.843 cv
95.2466 145.005 li
94.6167 145.005 li
94.6167 141.177 li
95.2466 141.177 li
95.2466 141.771 li
95.3936 141.548 95.5684 141.372 95.7783 141.261 cv
95.981 141.148 96.2192 141.085 96.4849 141.085 cv
96.9189 141.085 97.2549 141.226 97.4785 141.499 cv
97.7026 141.771 97.8218 142.171 97.8218 142.695 cv
f
99.0117 143.493 mo
99.0117 141.177 li
99.6416 141.177 li
99.6416 143.472 li
99.6416 143.836 99.7114 144.103 99.8516 144.284 cv
99.9912 144.466 100.201 144.557 100.488 144.557 cv
100.824 144.557 101.097 144.452 101.293 144.235 cv
101.489 144.019 101.587 143.724 101.587 143.347 cv
101.587 141.177 li
102.217 141.177 li
102.217 145.005 li
101.587 145.005 li
101.587 144.417 li
101.433 144.655 101.251 144.823 101.055 144.935 cv
100.852 145.04 100.621 145.096 100.355 145.096 cv
99.9146 145.096 99.5786 144.963 99.3545 144.69 cv
99.1235 144.424 99.0117 144.024 99.0117 143.493 cv
f
106.493 141.911 mo
106.647 141.632 106.836 141.429 107.053 141.288 cv
107.27 141.155 107.528 141.086 107.83 141.086 cv
108.221 141.086 108.529 141.226 108.747 141.505 cv
108.963 141.786 109.075 142.185 109.075 142.695 cv
109.075 145.005 li
108.445 145.005 li
108.445 142.716 li
108.445 142.353 108.375 142.079 108.25 141.897 cv
108.117 141.723 107.92 141.632 107.654 141.632 cv
107.326 141.632 107.067 141.743 106.878 141.961 cv
106.689 142.178 106.598 142.472 106.598 142.843 cv
106.598 145.005 li
105.968 145.005 li
105.968 142.716 li
105.968 142.353 105.898 142.079 105.772 141.897 cv
105.639 141.723 105.436 141.632 105.17 141.632 cv
104.848 141.632 104.589 141.743 104.4 141.961 cv
104.211 142.178 104.121 142.472 104.121 142.843 cv
104.121 145.005 li
103.49 145.005 li
103.49 141.177 li
104.121 141.177 li
104.121 141.771 li
104.26 141.54 104.435 141.366 104.639 141.254 cv
104.834 141.142 105.072 141.086 105.352 141.086 cv
105.632 141.086 105.863 141.155 106.059 141.296 cv
106.255 141.436 106.395 141.646 106.493 141.911 cv
f
113.078 143.095 mo
113.078 142.632 112.98 142.275 112.792 142.009 cv
112.595 141.743 112.337 141.61 112.008 141.61 cv
111.671 141.61 111.413 141.743 111.224 142.009 cv
111.028 142.275 110.937 142.632 110.937 143.095 cv
110.937 143.556 111.028 143.92 111.224 144.187 cv
111.413 144.452 111.671 144.577 112.008 144.577 cv
112.337 144.577 112.595 144.452 112.792 144.187 cv
112.98 143.92 113.078 143.556 113.078 143.095 cv
110.937 141.758 mo
111.063 141.534 111.231 141.366 111.434 141.254 cv
111.637 141.142 111.881 141.085 112.162 141.085 cv
112.623 141.085 113.001 141.274 113.295 141.639 cv
113.582 142.009 113.729 142.492 113.729 143.095 cv
113.729 143.696 113.582 144.187 113.295 144.55 cv
113.001 144.914 112.623 145.096 112.162 145.096 cv
111.881 145.096 111.637 145.04 111.434 144.935 cv
111.231 144.83 111.063 144.662 110.937 144.431 cv
110.937 145.005 li
110.307 145.005 li
110.307 139.687 li
110.937 139.687 li
110.937 141.758 li
f
118.047 142.933 mo
118.047 143.241 li
115.157 143.241 li
115.185 143.675 115.311 144.011 115.549 144.235 cv
115.779 144.459 116.102 144.571 116.521 144.571 cv
116.76 144.571 116.998 144.543 117.222 144.487 cv
117.445 144.431 117.676 144.34 117.9 144.214 cv
117.9 144.81 li
117.676 144.907 117.445 144.983 117.208 145.026 cv
116.969 145.067 116.725 145.096 116.486 145.096 cv
115.871 145.096 115.388 144.921 115.031 144.571 cv
114.674 144.221 114.499 143.738 114.499 143.13 cv
114.499 142.507 114.667 142.01 115.003 141.639 cv
115.339 141.274 115.801 141.085 116.375 141.085 cv
116.893 141.085 117.298 141.253 117.599 141.583 cv
117.893 141.919 118.047 142.366 118.047 142.933 cv
117.417 142.751 mo
117.41 142.408 117.313 142.136 117.13 141.926 cv
116.941 141.723 116.689 141.618 116.381 141.618 cv
116.032 141.618 115.752 141.723 115.542 141.919 cv
115.332 142.114 115.206 142.395 115.178 142.751 cv
117.417 142.751 li
f
121.294 141.765 mo
121.224 141.723 121.147 141.694 121.063 141.673 cv
120.979 141.659 120.889 141.646 120.791 141.646 cv
120.434 141.646 120.161 141.765 119.972 141.995 cv
119.776 142.226 119.685 142.556 119.685 142.989 cv
119.685 145.005 li
119.055 145.005 li
119.055 141.177 li
119.685 141.177 li
119.685 141.771 li
119.811 141.541 119.986 141.366 120.196 141.253 cv
120.406 141.142 120.665 141.085 120.973 141.085 cv
121.015 141.085 121.063 141.093 121.12 141.093 cv
121.168 141.1 121.224 141.106 121.294 141.121 cv
121.294 141.765 li
f
24.2998 131.22 mo
25.6499 131.22 li
f
24.2998 131.22 mo
25.6499 131.22 li
@
174.96 131.22 mo
173.61 131.22 li
f
174.96 131.22 mo
173.61 131.22 li
@
16.1553 133.221 mo
17.2822 133.221 li
17.2822 129.329 li
16.0571 129.574 li
16.0571 128.944 li
17.2754 128.699 li
17.9683 128.699 li
17.9683 133.221 li
19.0947 133.221 li
19.0947 133.802 li
16.1553 133.802 li
16.1553 133.221 li
cp
f
21.9639 131.38 mo
21.6353 131.38 21.376 131.471 21.187 131.646 cv
20.998 131.821 20.9072 132.06 20.9072 132.366 cv
20.9072 132.675 20.998 132.92 21.187 133.095 cv
21.376 133.27 21.6353 133.354 21.9639 133.354 cv
22.2861 133.354 22.5449 133.27 22.7339 133.087 cv
22.9229 132.913 23.021 132.675 23.021 132.366 cv
23.021 132.06 22.9229 131.821 22.7412 131.646 cv
22.5522 131.471 22.293 131.38 21.9639 131.38 cv
21.271 131.086 mo
20.9771 131.017 20.7466 130.876 20.5781 130.673 cv
20.4102 130.47 20.3335 130.226 20.3335 129.931 cv
20.3335 129.525 20.4731 129.204 20.7671 128.966 cv
21.0542 128.728 21.4531 128.608 21.9639 128.608 cv
22.4678 128.608 22.8667 128.728 23.1606 128.966 cv
23.4478 129.204 23.5947 129.525 23.5947 129.931 cv
23.5947 130.226 23.5107 130.47 23.3428 130.673 cv
23.1748 130.876 22.9512 131.017 22.6567 131.086 cv
22.9858 131.163 23.2446 131.317 23.4336 131.541 cv
23.6157 131.765 23.7139 132.045 23.7139 132.366 cv
23.7139 132.863 23.5596 133.241 23.2588 133.501 cv
22.9512 133.767 22.5239 133.892 21.9639 133.892 cv
21.397 133.892 20.9634 133.767 20.6626 133.501 cv
20.3613 133.241 20.2144 132.863 20.2144 132.366 cv
20.2144 132.045 20.3052 131.765 20.4946 131.541 cv
20.6768 131.317 20.9355 131.163 21.271 131.086 cv
21.0195 129.994 mo
21.0195 130.261 21.0962 130.47 21.2642 130.617 cv
21.4321 130.765 21.6631 130.834 21.9639 130.834 cv
22.2583 130.834 22.4888 130.765 22.6567 130.617 cv
22.8247 130.47 22.9087 130.261 22.9087 129.994 cv
22.9087 129.728 22.8247 129.525 22.6567 129.378 cv
22.4888 129.231 22.2583 129.154 21.9639 129.154 cv
21.6631 129.154 21.4321 129.231 21.2642 129.378 cv
21.0962 129.525 21.0195 129.728 21.0195 129.994 cv
f
24.2998 107.892 mo
25.6499 107.892 li
f
24.2998 107.892 mo
25.6499 107.892 li
@
174.96 107.892 mo
173.61 107.892 li
f
174.96 107.892 mo
173.61 107.892 li
@
16.3569 109.893 mo
18.7646 109.893 li
18.7646 110.474 li
15.5239 110.474 li
15.5239 109.893 li
15.7832 109.626 16.1401 109.263 16.5952 108.801 cv
17.043 108.346 17.3296 108.052 17.4487 107.919 cv
17.6729 107.675 17.8267 107.464 17.9106 107.289 cv
17.9946 107.121 18.0435 106.946 18.0435 106.778 cv
18.0435 106.513 17.9458 106.288 17.7568 106.12 cv
17.5679 105.952 17.3228 105.861 17.0151 105.861 cv
16.7979 105.861 16.5669 105.903 16.3291 105.974 cv
16.0913 106.05 15.8325 106.162 15.5591 106.316 cv
15.5591 105.616 li
15.8389 105.504 16.0981 105.421 16.3359 105.365 cv
16.5742 105.309 16.7979 105.281 17.001 105.281 cv
17.5259 105.281 17.9458 105.414 18.2607 105.68 cv
18.5757 105.945 18.7363 106.296 18.7363 106.736 cv
18.7363 106.946 18.6948 107.149 18.6177 107.331 cv
18.5405 107.521 18.4009 107.744 18.1909 107.996 cv
18.1348 108.065 17.9526 108.255 17.6445 108.569 cv
17.3369 108.885 16.9102 109.325 16.3569 109.893 cv
f
21.6899 105.826 mo
21.333 105.826 21.0669 106.001 20.8848 106.352 cv
20.7031 106.701 20.6191 107.226 20.6191 107.926 cv
20.6191 108.626 20.7031 109.151 20.8848 109.501 cv
21.0669 109.851 21.333 110.025 21.6899 110.025 cv
22.0469 110.025 22.313 109.851 22.4946 109.501 cv
22.6694 109.151 22.7603 108.626 22.7603 107.926 cv
22.7603 107.226 22.6694 106.701 22.4946 106.352 cv
22.313 106.001 22.0469 105.826 21.6899 105.826 cv
21.6899 105.281 mo
22.2568 105.281 22.6904 105.512 22.9985 105.96 cv
23.2993 106.415 23.4536 107.072 23.4536 107.926 cv
23.4536 108.786 23.2993 109.444 22.9985 109.893 cv
22.6904 110.341 22.2568 110.564 21.6899 110.564 cv
21.1162 110.564 20.6748 110.341 20.3745 109.893 cv
20.0732 109.444 19.9263 108.786 19.9263 107.926 cv
19.9263 107.072 20.0732 106.415 20.3745 105.96 cv
20.6748 105.512 21.1162 105.281 21.6899 105.281 cv
f
24.2998 84.564 mo
25.6499 84.564 li
f
24.2998 84.564 mo
25.6499 84.564 li
@
174.96 84.564 mo
173.61 84.564 li
f
174.96 84.564 mo
173.61 84.564 li
@
16.5942 86.6147 mo
19.002 86.6147 li
19.002 87.1953 li
15.7612 87.1953 li
15.7612 86.6147 li
16.0205 86.3486 16.3774 85.9849 16.8325 85.5229 cv
17.2803 85.0679 17.5669 84.7744 17.686 84.6406 cv
17.9102 84.3965 18.064 84.1865 18.1479 84.0112 cv
18.2319 83.8433 18.2808 83.6685 18.2808 83.5 cv
18.2808 83.2344 18.1831 83.0103 17.9941 82.8423 cv
17.8052 82.6743 17.5601 82.5835 17.252 82.5835 cv
17.0352 82.5835 16.8042 82.6255 16.5664 82.6953 cv
16.3286 82.7725 16.0698 82.8848 15.7964 83.0386 cv
15.7964 82.3384 li
16.0762 82.2266 16.3354 82.1426 16.5732 82.0869 cv
16.8115 82.0308 17.0352 82.0029 17.2383 82.0029 cv
17.7632 82.0029 18.1831 82.1357 18.498 82.4014 cv
18.813 82.6675 18.9736 83.0176 18.9736 83.4585 cv
18.9736 83.6685 18.9321 83.8711 18.855 84.0532 cv
18.7778 84.2422 18.6382 84.4658 18.4282 84.7183 cv
18.3721 84.7881 18.1899 84.9766 17.8818 85.292 cv
17.5742 85.6069 17.1475 86.0479 16.5942 86.6147 cv
f
21.0454 86.6147 mo
23.4526 86.6147 li
23.4526 87.1953 li
20.2124 87.1953 li
20.2124 86.6147 li
20.4717 86.3486 20.8281 85.9849 21.2832 85.5229 cv
21.731 85.0679 22.0181 84.7744 22.1372 84.6406 cv
22.3608 84.3965 22.5146 84.1865 22.5991 84.0112 cv
22.6831 83.8433 22.7319 83.6685 22.7319 83.5 cv
22.7319 83.2344 22.6338 83.0103 22.4448 82.8423 cv
22.2559 82.6743 22.0112 82.5835 21.7031 82.5835 cv
21.4863 82.5835 21.2554 82.6255 21.0176 82.6953 cv
20.7793 82.7725 20.5205 82.8848 20.2476 83.0386 cv
20.2476 82.3384 li
20.5273 82.2266 20.7866 82.1426 21.0244 82.0869 cv
21.2622 82.0308 21.4863 82.0029 21.6895 82.0029 cv
22.2144 82.0029 22.6338 82.1357 22.9487 82.4014 cv
23.2637 82.6675 23.4248 83.0176 23.4248 83.4585 cv
23.4248 83.6685 23.3828 83.8711 23.3062 84.0532 cv
23.229 84.2422 23.0889 84.4658 22.8789 84.7183 cv
22.8228 84.7881 22.6411 84.9766 22.333 85.292 cv
22.0249 85.6069 21.5981 86.0479 21.0454 86.6147 cv
f
24.2998 61.2358 mo
25.6499 61.2358 li
f
24.2998 61.2358 mo
25.6499 61.2358 li
@
174.96 61.2358 mo
173.61 61.2358 li
f
174.96 61.2358 mo
173.61 61.2358 li
@
16.2886 63.2866 mo
18.6958 63.2866 li
18.6958 63.8672 li
15.4556 63.8672 li
15.4556 63.2866 li
15.7144 63.0205 16.0718 62.6567 16.5264 62.1948 cv
16.9741 61.7397 17.2612 61.4458 17.3804 61.313 cv
17.604 61.0684 17.7578 60.8584 17.8423 60.6831 cv
17.9263 60.5156 17.9751 60.3403 17.9751 60.1719 cv
17.9751 59.9063 17.877 59.6826 17.688 59.5142 cv
17.499 59.3467 17.2544 59.2554 16.9463 59.2554 cv
16.7295 59.2554 16.4985 59.2979 16.2607 59.3677 cv
16.0225 59.4443 15.7637 59.5566 15.4907 59.7104 cv
15.4907 59.0107 li
15.7705 58.8989 16.0293 58.8145 16.2671 58.7588 cv
16.5054 58.7026 16.7295 58.6748 16.9326 58.6748 cv
17.4575 58.6748 17.877 58.8076 18.1919 59.0737 cv
18.5068 59.3394 18.668 59.6895 18.668 60.1304 cv
18.668 60.3403 18.626 60.5435 18.5493 60.7251 cv
18.4722 60.9141 18.332 61.1382 18.1221 61.3901 cv
18.0664 61.46 17.8843 61.6489 17.5762 61.9639 cv
17.2686 62.2788 16.8413 62.7197 16.2886 63.2866 cv
f
22.041 59.3677 mo
20.2988 62.0898 li
22.041 62.0898 li
22.041 59.3677 li
21.8594 58.7656 mo
22.7271 58.7656 li
22.7271 62.0898 li
23.4546 62.0898 li
23.4546 62.6641 li
22.7271 62.6641 li
22.7271 63.8677 li
22.041 63.8677 li
22.041 62.6641 li
19.7388 62.6641 li
19.7388 61.9985 li
21.8594 58.7656 li
cp
f
24.2998 37.9082 mo
25.6499 37.9082 li
f
24.2998 37.9082 mo
25.6499 37.9082 li
@
174.96 37.9082 mo
173.61 37.9082 li
f
174.96 37.9082 mo
173.61 37.9082 li
@
16.3359 39.9087 mo
18.7432 39.9087 li
18.7432 40.4893 li
15.5029 40.4893 li
15.5029 39.9087 li
15.7617 39.6426 16.1191 39.2783 16.5737 38.8169 cv
17.022 38.3618 17.3086 38.0679 17.4277 37.9351 cv
17.6514 37.6899 17.8057 37.48 17.8896 37.3052 cv
17.9736 37.1372 18.0225 36.9624 18.0225 36.7939 cv
18.0225 36.5283 17.9248 36.3047 17.7358 36.1362 cv
17.5464 35.9688 17.3018 35.8774 16.9937 35.8774 cv
16.7769 35.8774 16.5459 35.9194 16.3081 35.9897 cv
16.0698 36.0664 15.811 36.1787 15.5381 36.3325 cv
15.5381 35.6323 li
15.8179 35.5205 16.0767 35.4365 16.3149 35.3804 cv
16.5532 35.3242 16.7769 35.2969 16.98 35.2969 cv
17.5049 35.2969 17.9248 35.4297 18.2397 35.6958 cv
18.5542 35.9614 18.7153 36.311 18.7153 36.7524 cv
18.7153 36.9624 18.6733 37.165 18.5967 37.3472 cv
18.5195 37.5361 18.3794 37.7603 18.1694 38.0117 cv
18.1138 38.082 17.9316 38.2705 17.6235 38.5859 cv
17.3159 38.9009 16.8887 39.3418 16.3359 39.9087 cv
f
21.7529 37.6621 mo
21.4448 37.6621 21.2002 37.7744 21.0176 37.9839 cv
20.8359 38.1938 20.7451 38.4878 20.7451 38.8516 cv
20.7451 39.2227 20.8359 39.5166 21.0176 39.7266 cv
21.2002 39.9365 21.4448 40.0415 21.7529 40.0415 cv
22.0605 40.0415 22.3057 39.9365 22.4878 39.7266 cv
22.6694 39.5166 22.7607 39.2227 22.7607 38.8516 cv
22.7607 38.4878 22.6694 38.1938 22.4878 37.9839 cv
22.3057 37.7744 22.0605 37.6621 21.7529 37.6621 cv
23.1245 35.4995 mo
23.1245 36.1294 li
22.9492 36.0454 22.7744 35.9824 22.5996 35.9404 cv
22.4175 35.8984 22.2427 35.8774 22.0747 35.8774 cv
21.6128 35.8774 21.2627 36.0313 21.0249 36.3394 cv
20.7871 36.6475 20.647 37.1162 20.6191 37.7319 cv
20.752 37.5361 20.9199 37.3818 21.1226 37.2769 cv
21.3257 37.1719 21.5498 37.1162 21.7944 37.1162 cv
22.3057 37.1162 22.7114 37.2769 23.0054 37.585 cv
23.2998 37.8931 23.4536 38.3198 23.4536 38.8516 cv
23.4536 39.3765 23.2925 39.7964 22.9844 40.1113 cv
22.6768 40.4263 22.2637 40.5801 21.7529 40.5801 cv
21.165 40.5801 20.71 40.3564 20.4023 39.9087 cv
20.0869 39.4604 19.9331 38.8027 19.9331 37.9419 cv
19.9331 37.1372 20.1221 36.4932 20.5073 36.0176 cv
20.8853 35.5415 21.4028 35.2964 22.0469 35.2964 cv
22.2144 35.2964 22.3896 35.3174 22.5718 35.3457 cv
22.7466 35.3809 22.9282 35.4297 23.1245 35.4995 cv
f
24.2998 14.5801 mo
25.6499 14.5801 li
f
24.2998 14.5801 mo
25.6499 14.5801 li
@
174.96 14.5801 mo
173.61 14.5801 li
f
174.96 14.5801 mo
173.61 14.5801 li
@
16.373 16.5806 mo
18.7803 16.5806 li
18.7803 17.1611 li
15.54 17.1611 li
15.54 16.5806 li
15.7988 16.3145 16.1558 15.9507 16.6108 15.4888 cv
17.0586 15.0337 17.3457 14.7397 17.4648 14.6069 cv
17.6885 14.3623 17.8423 14.1523 17.9263 13.9771 cv
18.0103 13.8096 18.0596 13.6343 18.0596 13.4658 cv
18.0596 13.2002 17.9614 12.9766 17.7725 12.8086 cv
17.5835 12.6406 17.3384 12.5493 17.0308 12.5493 cv
16.8135 12.5493 16.583 12.5913 16.3447 12.6616 cv
16.1069 12.7383 15.8481 12.8506 15.5752 13.0044 cv
15.5752 12.3047 li
15.855 12.1929 16.1138 12.1084 16.3516 12.0522 cv
16.5898 11.9966 16.8135 11.9688 17.0171 11.9688 cv
17.5415 11.9688 17.9614 12.1016 18.2764 12.3677 cv
18.5913 12.6333 18.7524 12.9834 18.7524 13.4243 cv
18.7524 13.6343 18.7104 13.8374 18.6333 14.0195 cv
18.5566 14.208 18.4165 14.4321 18.2065 14.6836 cv
18.1504 14.7539 17.9688 14.9429 17.6606 15.2578 cv
17.3525 15.5728 16.9258 16.0137 16.373 16.5806 cv
f
21.7056 14.7402 mo
21.3765 14.7402 21.1177 14.8311 20.9287 15.0059 cv
20.7397 15.1807 20.6489 15.4189 20.6489 15.7266 cv
20.6489 16.0347 20.7397 16.2798 20.9287 16.4546 cv
21.1177 16.6299 21.3765 16.7139 21.7056 16.7139 cv
22.0278 16.7139 22.2866 16.6299 22.4756 16.4478 cv
22.6646 16.2725 22.7622 16.0347 22.7622 15.7266 cv
22.7622 15.4189 22.6646 15.1807 22.4824 15.0059 cv
22.2935 14.8311 22.0347 14.7402 21.7056 14.7402 cv
21.0127 14.4458 mo
20.7188 14.376 20.4878 14.2363 20.3198 14.0332 cv
20.1519 13.8301 20.0747 13.5854 20.0747 13.2915 cv
20.0747 12.8853 20.2148 12.5635 20.5088 12.3257 cv
20.7959 12.0874 21.1948 11.9688 21.7056 11.9688 cv
22.2095 11.9688 22.6084 12.0874 22.9023 12.3257 cv
23.1895 12.5635 23.3364 12.8853 23.3364 13.2915 cv
23.3364 13.5854 23.2524 13.8301 23.0845 14.0332 cv
22.9165 14.2363 22.6924 14.376 22.3984 14.4458 cv
22.7275 14.5229 22.9863 14.6768 23.1753 14.9009 cv
23.3574 15.125 23.4551 15.4048 23.4551 15.7266 cv
23.4551 16.2236 23.3013 16.6016 23.0005 16.8604 cv
22.6924 17.1265 22.2656 17.2524 21.7056 17.2524 cv
21.1387 17.2524 20.7051 17.1265 20.4038 16.8604 cv
20.103 16.6016 19.9561 16.2236 19.9561 15.7266 cv
19.9561 15.4048 20.0469 15.125 20.2363 14.9009 cv
20.418 14.6768 20.6772 14.5229 21.0127 14.4458 cv
20.7612 13.354 mo
20.7612 13.6201 20.8379 13.8301 21.0059 13.9771 cv
21.1738 14.124 21.4048 14.1943 21.7056 14.1943 cv
21.9995 14.1943 22.2305 14.124 22.3984 13.9771 cv
22.5664 13.8301 22.6504 13.6201 22.6504 13.354 cv
22.6504 13.0884 22.5664 12.8853 22.3984 12.7383 cv
22.2305 12.5913 21.9995 12.5146 21.7056 12.5146 cv
21.4048 12.5146 21.1738 12.5913 21.0059 12.7383 cv
20.8379 12.8853 20.7612 13.0884 20.7612 13.354 cv
f
6.67871 125.743 mo
6.67871 121.433 li
7.25977 121.433 li
7.25977 123.245 li
11.7808 123.245 li
11.7808 123.938 li
7.25977 123.938 li
7.25977 125.743 li
6.67871 125.743 li
cp
f
9.70947 117.521 mo
10.0171 117.521 li
10.0171 120.411 li
10.4512 120.383 10.7871 120.257 11.0112 120.019 cv
11.2354 119.788 11.3467 119.466 11.3467 119.046 cv
11.3467 118.808 11.3188 118.569 11.2627 118.347 cv
11.207 118.122 11.1162 117.892 10.9897 117.667 cv
11.585 117.667 li
11.6826 117.892 11.7598 118.122 11.8018 118.36 cv
11.8438 118.598 11.8716 118.843 11.8716 119.081 cv
11.8716 119.696 11.6968 120.18 11.3467 120.536 cv
10.9971 120.894 10.5137 121.069 9.90527 121.069 cv
9.28223 121.069 8.78564 120.9 8.41455 120.565 cv
8.05029 120.229 7.86133 119.767 7.86133 119.192 cv
7.86133 118.675 8.02979 118.269 8.3584 117.968 cv
8.69434 117.675 9.14209 117.521 9.70947 117.521 cv
9.52734 118.149 mo
9.18457 118.157 8.91162 118.255 8.70166 118.438 cv
8.49854 118.626 8.39355 118.878 8.39355 119.187 cv
8.39355 119.536 8.49854 119.815 8.69434 120.026 cv
8.89063 120.235 9.17041 120.362 9.52734 120.39 cv
9.52734 118.149 li
f
8.6875 113.511 mo
8.40771 113.356 8.20459 113.167 8.06494 112.95 cv
7.93164 112.733 7.86133 112.475 7.86133 112.173 cv
7.86133 111.781 8.00146 111.474 8.28125 111.257 cv
8.56152 111.04 8.96045 110.928 9.47119 110.928 cv
11.7808 110.928 li
11.7808 111.558 li
9.49219 111.558 li
9.12842 111.558 8.85547 111.628 8.67334 111.753 cv
8.49854 111.886 8.40771 112.083 8.40771 112.349 cv
8.40771 112.677 8.51953 112.937 8.73682 113.125 cv
8.95313 113.314 9.24707 113.405 9.61816 113.405 cv
11.7808 113.405 li
11.7808 114.035 li
9.49219 114.035 li
9.12842 114.035 8.85547 114.104 8.67334 114.231 cv
8.49854 114.364 8.40771 114.567 8.40771 114.833 cv
8.40771 115.155 8.51953 115.414 8.73682 115.603 cv
8.95313 115.792 9.24707 115.882 9.61816 115.882 cv
11.7808 115.882 li
11.7808 116.513 li
7.95264 116.513 li
7.95264 115.882 li
8.54736 115.882 li
8.31641 115.743 8.1416 115.567 8.02979 115.364 cv
7.91748 115.169 7.86133 114.931 7.86133 114.651 cv
7.86133 114.371 7.93164 114.14 8.07129 113.944 cv
8.21143 113.748 8.42139 113.608 8.6875 113.511 cv
f
11.207 109.066 mo
13.2295 109.066 li
13.2295 109.696 li
7.95264 109.696 li
7.95264 109.066 li
8.53369 109.066 li
8.30957 108.94 8.1416 108.772 8.02979 108.569 cv
7.91748 108.366 7.86182 108.121 7.86182 107.841 cv
7.86182 107.38 8.05078 107.002 8.41455 106.708 cv
8.78564 106.421 9.26855 106.274 9.87012 106.274 cv
10.4722 106.274 10.9619 106.421 11.3262 106.708 cv
11.6899 107.002 11.8721 107.38 11.8721 107.841 cv
11.8721 108.121 11.8159 108.366 11.7109 108.569 cv
11.606 108.772 11.438 108.94 11.207 109.066 cv
9.87012 106.925 mo
9.4082 106.925 9.05127 107.022 8.78564 107.212 cv
8.51953 107.407 8.38623 107.667 8.38623 107.995 cv
8.38623 108.331 8.51953 108.591 8.78564 108.779 cv
9.05127 108.976 9.4082 109.066 9.87012 109.066 cv
10.332 109.066 10.6958 108.976 10.9619 108.779 cv
11.228 108.591 11.354 108.331 11.354 107.995 cv
11.354 107.667 11.228 107.407 10.9619 107.212 cv
10.6958 107.022 10.332 106.925 9.87012 106.925 cv
f
9.70947 101.956 mo
10.0171 101.956 li
10.0171 104.846 li
10.4512 104.818 10.7871 104.692 11.0112 104.454 cv
11.2354 104.224 11.3467 103.901 11.3467 103.481 cv
11.3467 103.243 11.3188 103.005 11.2627 102.782 cv
11.207 102.558 11.1162 102.327 10.9897 102.103 cv
11.585 102.103 li
11.6826 102.327 11.7598 102.558 11.8018 102.795 cv
11.8438 103.033 11.8716 103.279 11.8716 103.517 cv
11.8716 104.132 11.6968 104.615 11.3467 104.972 cv
10.9971 105.329 10.5137 105.504 9.90527 105.504 cv
9.28223 105.504 8.78564 105.336 8.41455 105 cv
8.05029 104.664 7.86133 104.202 7.86133 103.628 cv
7.86133 103.11 8.02979 102.705 8.3584 102.403 cv
8.69434 102.11 9.14209 101.956 9.70947 101.956 cv
9.52734 102.585 mo
9.18457 102.593 8.91162 102.691 8.70166 102.873 cv
8.49854 103.062 8.39355 103.313 8.39355 103.622 cv
8.39355 103.972 8.49854 104.251 8.69434 104.461 cv
8.89063 104.671 9.17041 104.797 9.52734 104.825 cv
9.52734 102.585 li
f
8.54053 98.7085 mo
8.49854 98.7783 8.47021 98.8555 8.44922 98.9399 cv
8.43555 99.0234 8.42139 99.1143 8.42139 99.2124 cv
8.42139 99.5693 8.54053 99.8423 8.77148 100.031 cv
9.00244 100.228 9.33154 100.318 9.76514 100.318 cv
11.7808 100.318 li
11.7808 100.948 li
7.95264 100.948 li
7.95264 100.318 li
8.54785 100.318 li
8.31641 100.192 8.1416 100.018 8.02979 99.8076 cv
7.91748 99.5977 7.86133 99.3384 7.86133 99.0303 cv
7.86133 98.9883 7.86865 98.9399 7.86865 98.8838 cv
7.87549 98.8345 7.88281 98.7783 7.89648 98.7085 cv
8.54053 98.7085 li
f
9.85596 96.3081 mo
9.85596 96.8193 9.91943 97.1689 10.0313 97.3647 cv
10.1499 97.561 10.3462 97.6587 10.626 97.6587 cv
10.8501 97.6587 11.0317 97.5889 11.1577 97.4419 cv
11.291 97.2949 11.354 97.0918 11.354 96.8398 cv
11.354 96.4902 11.2349 96.2104 10.9829 96.0005 cv
10.7378 95.7905 10.4092 95.6851 9.99609 95.6851 cv
9.85596 95.6851 li
9.85596 96.3081 li
9.59717 95.0552 mo
11.7808 95.0552 li
11.7808 95.6851 li
11.1997 95.6851 li
11.438 95.832 11.606 96.0142 11.7104 96.2241 cv
11.8154 96.4341 11.8716 96.7002 11.8716 97.0078 cv
11.8716 97.3994 11.7666 97.7148 11.5498 97.9463 cv
11.3325 98.1768 11.0386 98.2886 10.668 98.2886 cv
10.2412 98.2886 9.91943 98.1484 9.69531 97.8545 cv
9.47803 97.5679 9.36621 97.1411 9.36621 96.5669 cv
9.36621 95.6851 li
9.30322 95.6851 li
9.0166 95.6851 8.79248 95.7832 8.63184 95.9722 cv
8.47754 96.1611 8.39355 96.4272 8.39355 96.77 cv
8.39355 96.9941 8.42188 97.2041 8.47754 97.4141 cv
8.53369 97.624 8.61035 97.8198 8.7085 98.0088 cv
8.12744 98.0088 li
8.04346 97.7847 7.97363 97.561 7.93164 97.3438 cv
7.88965 97.127 7.86133 96.917 7.86133 96.707 cv
7.86133 96.1543 8.00879 95.7412 8.29541 95.4688 cv
8.58252 95.1953 9.0166 95.0552 9.59717 95.0552 cv
f
6.86768 93.1377 mo
7.95264 93.1377 li
7.95264 91.8433 li
8.44287 91.8433 li
8.44287 93.1377 li
10.521 93.1377 li
10.8359 93.1377 11.0386 93.0957 11.1226 93.0117 cv
11.2139 92.9277 11.2559 92.7529 11.2559 92.4868 cv
11.2559 91.8433 li
11.7808 91.8433 li
11.7808 92.4868 li
11.7808 92.9766 11.6899 93.313 11.5078 93.4951 cv
11.3257 93.6768 10.9971 93.7676 10.521 93.7676 cv
8.44287 93.7676 li
8.44287 94.2295 li
7.95264 94.2295 li
7.95264 93.7676 li
6.86768 93.7676 li
6.86768 93.1377 li
f
10.269 91.0801 mo
7.95264 91.0801 li
7.95264 90.4502 li
10.248 90.4502 li
10.6118 90.4502 10.8779 90.3809 11.0601 90.2407 cv
11.2417 90.1006 11.333 89.8906 11.333 89.6035 cv
11.333 89.2681 11.228 88.9946 11.0107 88.7988 cv
10.7939 88.6025 10.5 88.5049 10.1221 88.5049 cv
7.95264 88.5049 li
7.95264 87.875 li
11.7808 87.875 li
11.7808 88.5049 li
11.1929 88.5049 li
11.4307 88.6587 11.5986 88.8408 11.7104 89.0366 cv
11.8159 89.2397 11.8721 89.4702 11.8721 89.7368 cv
11.8721 90.1772 11.7388 90.5132 11.4658 90.7373 cv
11.1997 90.9683 10.8008 91.0801 10.269 91.0801 cv
f
8.54053 84.3618 mo
8.49854 84.4316 8.47021 84.5088 8.44922 84.5928 cv
8.43555 84.6768 8.42139 84.7676 8.42139 84.8657 cv
8.42139 85.2227 8.54053 85.4956 8.77148 85.6846 cv
9.00244 85.8809 9.33154 85.9717 9.76514 85.9717 cv
11.7808 85.9717 li
11.7808 86.6016 li
7.95264 86.6016 li
7.95264 85.9717 li
8.54785 85.9717 li
8.31641 85.8457 8.1416 85.6704 8.02979 85.4609 cv
7.91748 85.2505 7.86133 84.9917 7.86133 84.6836 cv
7.86133 84.6416 7.86865 84.5928 7.86865 84.5371 cv
7.87549 84.4878 7.88281 84.4316 7.89648 84.3618 cv
8.54053 84.3618 li
f
9.70947 80.4287 mo
10.0171 80.4287 li
10.0171 83.3188 li
10.4512 83.291 10.7871 83.165 11.0112 82.9272 cv
11.2354 82.6963 11.3467 82.3745 11.3467 81.9546 cv
11.3467 81.7163 11.3188 81.4785 11.2627 81.2544 cv
11.207 81.0308 11.1162 80.7998 10.9897 80.5757 cv
11.585 80.5757 li
11.6826 80.7998 11.7598 81.0308 11.8018 81.2686 cv
11.8438 81.5063 11.8716 81.7515 11.8716 81.9893 cv
11.8716 82.605 11.6968 83.0879 11.3467 83.4453 cv
10.9971 83.8018 10.5137 83.9771 9.90527 83.9771 cv
9.28223 83.9771 8.78564 83.8091 8.41455 83.4731 cv
8.05029 83.1367 7.86133 82.6753 7.86133 82.1011 cv
7.86133 81.5835 8.02979 81.1777 8.3584 80.877 cv
8.69434 80.583 9.14209 80.4287 9.70947 80.4287 cv
9.52734 81.0586 mo
9.18457 81.0659 8.91162 81.1636 8.70166 81.3457 cv
8.49854 81.5347 8.39355 81.7861 8.39355 82.0942 cv
8.39355 82.4443 8.49854 82.7241 8.69434 82.9341 cv
8.89063 83.144 9.17041 83.27 9.52734 83.2979 cv
9.52734 81.0586 li
f
6.46875 75.6626 mo
7.00098 75.9707 7.51855 76.1943 8.02979 76.3418 cv
8.54053 76.4956 9.05811 76.5659 9.5835 76.5659 cv
10.1152 76.5659 10.6328 76.4956 11.144 76.3418 cv
11.6616 76.1943 12.1729 75.9707 12.6973 75.6626 cv
12.6973 76.209 li
12.1587 76.5518 11.6406 76.8105 11.123 76.978 cv
10.605 77.1465 10.0942 77.2305 9.5835 77.2305 cv
9.07959 77.2305 8.56836 77.1465 8.05078 76.978 cv
7.53271 76.8105 7.00781 76.5586 6.46875 76.209 cv
6.46875 75.6626 li
f
8.53369 71.9258 mo
6.46191 71.9258 li
6.46191 71.2959 li
11.7808 71.2959 li
11.7808 71.9258 li
11.207 71.9258 li
11.4375 72.0586 11.606 72.2266 11.7109 72.4297 cv
11.8159 72.6328 11.8716 72.8706 11.8716 73.1504 cv
11.8716 73.6123 11.6899 73.9902 11.3262 74.2842 cv
10.9619 74.5781 10.4722 74.7183 9.87012 74.7183 cv
9.26807 74.7183 8.78564 74.5781 8.41455 74.2842 cv
8.05029 73.9902 7.86133 73.6123 7.86133 73.1504 cv
7.86133 72.8706 7.91748 72.6328 8.02979 72.4297 cv
8.1416 72.2266 8.30957 72.0586 8.53369 71.9258 cv
9.87012 74.0669 mo
10.332 74.0669 10.6963 73.9761 10.9619 73.7871 cv
11.2275 73.5986 11.3535 73.3325 11.3535 72.9966 cv
11.3535 72.6675 11.2275 72.4087 10.9619 72.2129 cv
10.6963 72.0239 10.332 71.9258 9.87012 71.9258 cv
9.4082 71.9258 9.05176 72.0239 8.78564 72.2129 cv
8.51953 72.4087 8.38623 72.6675 8.38623 72.9966 cv
8.38623 73.3325 8.51953 73.5986 8.78564 73.7871 cv
9.05176 73.9761 9.4082 74.0669 9.87012 74.0669 cv
f
9.70947 66.7256 mo
10.0171 66.7256 li
10.0171 69.6162 li
10.4512 69.5884 10.7871 69.4624 11.0112 69.2246 cv
11.2354 68.9937 11.3467 68.6714 11.3467 68.252 cv
11.3467 68.0137 11.3188 67.7759 11.2627 67.5518 cv
11.207 67.3281 11.1162 67.0967 10.9897 66.873 cv
11.585 66.873 li
11.6826 67.0967 11.7598 67.3281 11.8018 67.5659 cv
11.8438 67.8037 11.8716 68.0483 11.8716 68.2866 cv
11.8716 68.9023 11.6968 69.3853 11.3467 69.7422 cv
10.9971 70.0991 10.5137 70.2739 9.90527 70.2739 cv
9.28223 70.2739 8.78564 70.1064 8.41455 69.7705 cv
8.05029 69.4346 7.86133 68.9722 7.86133 68.3984 cv
7.86133 67.8809 8.02979 67.4746 8.3584 67.1738 cv
8.69434 66.8799 9.14209 66.7256 9.70947 66.7256 cv
9.52734 67.3555 mo
9.18457 67.3628 8.91162 67.4609 8.70166 67.6426 cv
8.49854 67.8315 8.39355 68.0835 8.39355 68.3916 cv
8.39355 68.7412 8.49854 69.0215 8.69434 69.2314 cv
8.89063 69.4414 9.17041 69.5674 9.52734 69.5952 cv
9.52734 67.3555 li
f
9.82129 63.1777 mo
9.37354 63.1777 9.01611 63.2759 8.76465 63.458 cv
8.5127 63.647 8.38623 63.9126 8.38623 64.2485 cv
8.38623 64.5845 8.5127 64.8501 8.76465 65.0391 cv
9.01611 65.2285 9.37354 65.3193 9.82129 65.3193 cv
10.2764 65.3193 10.626 65.2285 10.8779 65.0391 cv
11.1299 64.8501 11.2559 64.5845 11.2559 64.2485 cv
11.2559 63.9126 11.1299 63.647 10.8779 63.458 cv
10.626 63.2759 10.2764 63.1777 9.82129 63.1777 cv
11.3047 62.5479 mo
11.9487 62.5479 12.4316 62.6948 12.7534 62.9814 cv
13.0688 63.2759 13.2295 63.7168 13.2295 64.3115 cv
13.2295 64.5352 13.2085 64.7388 13.1802 64.9346 cv
13.1455 65.1304 13.0967 65.3262 13.0264 65.5083 cv
12.4175 65.5083 li
12.5156 65.3262 12.5854 65.1445 12.6348 64.9624 cv
12.6836 64.7803 12.7114 64.5981 12.7114 64.4097 cv
12.7114 64.0034 12.5996 63.6958 12.3896 63.4858 cv
12.1724 63.2827 11.8511 63.1777 11.417 63.1777 cv
11.1089 63.1777 li
11.333 63.3105 11.501 63.4785 11.6128 63.6816 cv
11.7246 63.8843 11.7808 64.1221 11.7808 64.4023 cv
11.7808 64.8784 11.606 65.2563 11.249 65.543 cv
10.8921 65.8301 10.416 65.9702 9.82129 65.9702 cv
9.2334 65.9702 8.75732 65.8301 8.40088 65.543 cv
8.04346 65.2563 7.86182 64.8784 7.86182 64.4023 cv
7.86182 64.1221 7.91748 63.8843 8.02979 63.6816 cv
8.1416 63.4785 8.30957 63.3105 8.53369 63.1777 cv
7.95264 63.1777 li
7.95264 62.5479 li
11.3047 62.5479 li
f
8.54053 59.0347 mo
8.49854 59.105 8.47021 59.1816 8.44922 59.2656 cv
8.43555 59.3496 8.42139 59.4409 8.42139 59.5386 cv
8.42139 59.8955 8.54053 60.1685 8.77148 60.3574 cv
9.00244 60.5537 9.33154 60.644 9.76514 60.644 cv
11.7808 60.644 li
11.7808 61.2739 li
7.95264 61.2739 li
7.95264 60.644 li
8.54785 60.644 li
8.31641 60.5186 8.1416 60.3433 8.02979 60.1333 cv
7.91748 59.9233 7.86133 59.6646 7.86133 59.3564 cv
7.86133 59.3149 7.86865 59.2656 7.86865 59.21 cv
7.87549 59.1606 7.88281 59.105 7.89648 59.0347 cv
8.54053 59.0347 li
f
9.70947 55.1016 mo
10.0171 55.1016 li
10.0171 57.9917 li
10.4512 57.9639 10.7871 57.8379 11.0112 57.6001 cv
11.2354 57.3691 11.3467 57.0474 11.3467 56.6274 cv
11.3467 56.3892 11.3188 56.1514 11.2627 55.9272 cv
11.207 55.7036 11.1162 55.4727 10.9897 55.2485 cv
11.585 55.2485 li
11.6826 55.4727 11.7598 55.7036 11.8018 55.9414 cv
11.8438 56.1792 11.8716 56.4243 11.8716 56.6626 cv
11.8716 57.2783 11.6968 57.7612 11.3467 58.1182 cv
10.9971 58.4746 10.5137 58.6494 9.90527 58.6494 cv
9.28223 58.6494 8.78564 58.4819 8.41455 58.146 cv
8.05029 57.8101 7.86133 57.3481 7.86133 56.7744 cv
7.86133 56.2563 8.02979 55.8506 8.3584 55.5493 cv
8.69434 55.2559 9.14209 55.1016 9.70947 55.1016 cv
9.52734 55.7314 mo
9.18457 55.7383 8.91162 55.8364 8.70166 56.0186 cv
8.49854 56.207 8.39355 56.4595 8.39355 56.7676 cv
8.39355 57.1172 8.49854 57.3975 8.69434 57.6074 cv
8.89063 57.8169 9.17041 57.9429 9.52734 57.9707 cv
9.52734 55.7314 li
f
9.70947 50.7979 mo
10.0171 50.7979 li
10.0171 53.688 li
10.4512 53.6602 10.7871 53.5342 11.0112 53.2959 cv
11.2354 53.0649 11.3467 52.7432 11.3467 52.3232 cv
11.3467 52.085 11.3188 51.8472 11.2627 51.6235 cv
11.207 51.3994 11.1162 51.1685 10.9897 50.9448 cv
11.585 50.9448 li
11.6826 51.1685 11.7598 51.3994 11.8018 51.6372 cv
11.8438 51.875 11.8716 52.1201 11.8716 52.3584 cv
11.8716 52.9741 11.6968 53.4565 11.3467 53.814 cv
10.9971 54.1709 10.5137 54.3457 9.90527 54.3457 cv
9.28223 54.3457 8.78564 54.1777 8.41455 53.8418 cv
8.05029 53.5059 7.86133 53.0439 7.86133 52.4702 cv
7.86133 51.9521 8.02979 51.5464 8.3584 51.2456 cv
8.69434 50.9517 9.14209 50.7979 9.70947 50.7979 cv
9.52734 51.4272 mo
9.18457 51.4346 8.91162 51.5322 8.70166 51.7144 cv
8.49854 51.9033 8.39355 52.1553 8.39355 52.4629 cv
8.39355 52.813 8.49854 53.0928 8.69434 53.3027 cv
8.89063 53.5127 9.17041 53.6392 9.52734 53.6665 cv
9.52734 51.4272 li
f
8.06445 47.3262 mo
8.65967 47.3262 li
8.57568 47.5083 8.50537 47.6904 8.45654 47.8789 cv
8.41455 48.0752 8.38672 48.271 8.38672 48.4736 cv
8.38672 48.7886 8.43555 49.0269 8.5332 49.1807 cv
8.63184 49.335 8.77148 49.4116 8.96045 49.4116 cv
9.10693 49.4116 9.21924 49.3555 9.30322 49.2441 cv
9.38721 49.1318 9.47119 48.9077 9.54102 48.5723 cv
9.59033 48.355 li
9.68848 47.9072 9.82861 47.5923 9.99609 47.4033 cv
10.1714 47.2217 10.416 47.123 10.7236 47.123 cv
11.0811 47.123 11.3608 47.2632 11.564 47.5435 cv
11.7739 47.8232 11.8716 48.2148 11.8716 48.7051 cv
11.8716 48.915 11.8506 49.125 11.8154 49.3491 cv
11.7808 49.5728 11.7246 49.8037 11.6406 50.0488 cv
10.9897 50.0488 li
11.1157 49.8179 11.207 49.5869 11.2627 49.3628 cv
11.3257 49.1392 11.354 48.915 11.354 48.6909 cv
11.354 48.397 11.3052 48.166 11.207 48.0049 cv
11.1089 47.8511 10.9619 47.7671 10.7729 47.7671 cv
10.605 47.7671 10.4722 47.8301 10.3813 47.9424 cv
10.29 48.0542 10.1992 48.3062 10.1152 48.6982 cv
10.0664 48.915 li
9.98242 49.3066 9.85596 49.5938 9.68848 49.7617 cv
9.52051 49.9365 9.28955 50.0205 8.98828 50.0205 cv
8.63184 50.0205 8.35156 49.8945 8.15576 49.6426 cv
7.95947 49.3906 7.86133 49.0269 7.86133 48.5508 cv
7.86133 48.3198 7.88281 48.1035 7.91748 47.8936 cv
7.95264 47.6904 8.00146 47.501 8.06445 47.3262 cv
f
8.09961 41.1396 mo
8.6875 41.1396 li
8.58984 41.3218 8.51953 41.4971 8.4707 41.6787 cv
8.42139 41.8608 8.39355 42.0356 8.39355 42.2173 cv
8.39355 42.6235 8.52637 42.9453 8.78516 43.1694 cv
9.04443 43.3931 9.4082 43.5054 9.87012 43.5054 cv
10.3394 43.5054 10.7031 43.3931 10.9619 43.1694 cv
11.2212 42.9453 11.3472 42.6235 11.3472 42.2173 cv
11.3472 42.0356 11.3262 41.8608 11.2769 41.6787 cv
11.228 41.4971 11.1509 41.3218 11.0527 41.1396 cv
11.6338 41.1396 li
11.7178 41.3218 11.7808 41.5034 11.8159 41.6855 cv
11.8511 41.8745 11.8716 42.0776 11.8716 42.2876 cv
11.8716 42.8613 11.6968 43.3232 11.333 43.6592 cv
10.9756 44.002 10.4858 44.1699 9.87012 44.1699 cv
9.24756 44.1699 8.75732 44.002 8.40039 43.6592 cv
8.04346 43.3164 7.86182 42.8477 7.86182 42.2456 cv
7.86182 42.0498 7.88232 41.8608 7.92432 41.6787 cv
7.9668 41.4971 8.02246 41.3149 8.09961 41.1396 cv
f
9.70947 36.7725 mo
10.0171 36.7725 li
10.0171 39.6631 li
10.4512 39.6353 10.7871 39.5093 11.0112 39.2715 cv
11.2354 39.0405 11.3467 38.7183 11.3467 38.2988 cv
11.3467 38.0605 11.3188 37.8223 11.2627 37.5986 cv
11.207 37.375 11.1162 37.1436 10.9897 36.9199 cv
11.585 36.9199 li
11.6826 37.1436 11.7598 37.375 11.8018 37.6123 cv
11.8438 37.8506 11.8716 38.0952 11.8716 38.3335 cv
11.8716 38.9492 11.6968 39.4321 11.3467 39.7891 cv
10.9971 40.146 10.5137 40.3208 9.90527 40.3208 cv
9.28223 40.3208 8.78564 40.1533 8.41455 39.8174 cv
8.05029 39.4814 7.86133 39.019 7.86133 38.4453 cv
7.86133 37.9277 8.02979 37.5215 8.3584 37.2207 cv
8.69434 36.9268 9.14209 36.7725 9.70947 36.7725 cv
9.52734 37.4023 mo
9.18457 37.4097 8.91162 37.5073 8.70166 37.6895 cv
8.49854 37.8784 8.39355 38.1304 8.39355 38.4385 cv
8.39355 38.7881 8.49854 39.0684 8.69434 39.2783 cv
8.89063 39.4883 9.17041 39.6143 9.52734 39.6421 cv
9.52734 37.4023 li
f
6.46191 35.1143 mo
11.7808 35.1143 li
11.7808 35.7441 li
6.46191 35.7441 li
6.46191 35.1143 li
cp
f
8.06445 31.356 mo
8.65967 31.356 li
8.57568 31.5381 8.50537 31.7202 8.45654 31.9087 cv
8.41455 32.105 8.38672 32.3008 8.38672 32.5039 cv
8.38672 32.8184 8.43555 33.0566 8.5332 33.2104 cv
8.63184 33.3647 8.77148 33.4414 8.96045 33.4414 cv
9.10693 33.4414 9.21924 33.3857 9.30322 33.2734 cv
9.38721 33.1616 9.47119 32.9375 9.54102 32.6016 cv
9.59033 32.3848 li
9.68848 31.9365 9.82861 31.6221 9.99609 31.4331 cv
10.1714 31.251 10.416 31.1533 10.7236 31.1533 cv
11.0811 31.1533 11.3608 31.293 11.564 31.5728 cv
11.7739 31.853 11.8716 32.2451 11.8716 32.7344 cv
11.8716 32.9443 11.8506 33.1543 11.8154 33.3784 cv
11.7808 33.6025 11.7246 33.8335 11.6406 34.0781 cv
10.9897 34.0781 li
11.1157 33.8472 11.207 33.6162 11.2627 33.3926 cv
11.3257 33.1685 11.354 32.9443 11.354 32.7207 cv
11.354 32.4268 11.3052 32.1953 11.207 32.0352 cv
11.1089 31.8809 10.9619 31.7969 10.7729 31.7969 cv
10.605 31.7969 10.4722 31.8599 10.3813 31.9717 cv
10.29 32.084 10.1992 32.3354 10.1152 32.7275 cv
10.0664 32.9443 li
9.98242 33.3369 9.85596 33.6235 9.68848 33.791 cv
9.52051 33.9663 9.28955 34.0503 8.98828 34.0503 cv
8.63184 34.0503 8.35156 33.9243 8.15576 33.6724 cv
7.95947 33.4204 7.86133 33.0566 7.86133 32.5806 cv
7.86133 32.3496 7.88281 32.1328 7.91748 31.9229 cv
7.95264 31.7202 8.00146 31.5313 8.06445 31.356 cv
f
7.95264 29.5225 mo
11.7808 29.5225 li
11.7808 30.1523 li
7.95264 30.1523 li
7.95264 29.5225 li
cp
6.46191 29.5225 mo
7.25977 29.5225 li
7.25977 30.1523 li
6.46191 30.1523 li
6.46191 29.5225 li
cp
f
10.269 28.2695 mo
7.95264 28.2695 li
7.95264 27.6396 li
10.248 27.6396 li
10.6118 27.6396 10.8779 27.5698 11.0601 27.4297 cv
11.2417 27.29 11.333 27.0801 11.333 26.793 cv
11.333 26.457 11.228 26.1841 11.0107 25.9883 cv
10.7939 25.7925 10.5 25.6943 10.1221 25.6943 cv
7.95264 25.6943 li
7.95264 25.0645 li
11.7808 25.0645 li
11.7808 25.6943 li
11.1929 25.6943 li
11.4307 25.8486 11.5986 26.0303 11.7104 26.2261 cv
11.8159 26.4292 11.8721 26.6602 11.8721 26.9258 cv
11.8721 27.3667 11.7388 27.7031 11.4658 27.9268 cv
11.1997 28.1577 10.8008 28.2695 10.269 28.2695 cv
f
8.06445 21.3271 mo
8.65967 21.3271 li
8.57568 21.5093 8.50537 21.6914 8.45654 21.8799 cv
8.41455 22.0762 8.38672 22.272 8.38672 22.4746 cv
8.38672 22.7896 8.43555 23.0278 8.5332 23.1816 cv
8.63184 23.3359 8.77148 23.4126 8.96045 23.4126 cv
9.10693 23.4126 9.21924 23.3564 9.30322 23.2451 cv
9.38721 23.1328 9.47119 22.9087 9.54102 22.5732 cv
9.59033 22.356 li
9.68848 21.9082 9.82861 21.5933 9.99609 21.4043 cv
10.1714 21.2222 10.416 21.124 10.7236 21.124 cv
11.0811 21.124 11.3608 21.2642 11.564 21.5444 cv
11.7739 21.8242 11.8716 22.2158 11.8716 22.7061 cv
11.8716 22.916 11.8506 23.126 11.8154 23.3501 cv
11.7808 23.5737 11.7246 23.8047 11.6406 24.0498 cv
10.9897 24.0498 li
11.1157 23.8188 11.207 23.5879 11.2627 23.3638 cv
11.3257 23.1401 11.354 22.916 11.354 22.6919 cv
11.354 22.3979 11.3052 22.167 11.207 22.0059 cv
11.1089 21.8521 10.9619 21.7681 10.7729 21.7681 cv
10.605 21.7681 10.4722 21.8311 10.3813 21.9434 cv
10.29 22.0547 10.1992 22.3071 10.1152 22.6987 cv
10.0664 22.916 li
9.98242 23.3076 9.85596 23.5947 9.68848 23.7627 cv
9.52051 23.9375 9.28955 24.0215 8.98828 24.0215 cv
8.63184 24.0215 8.35156 23.8955 8.15576 23.644 cv
7.95947 23.3916 7.86133 23.0278 7.86133 22.5522 cv
7.86133 22.3208 7.88281 22.1045 7.91748 21.8945 cv
7.95264 21.6914 8.00146 21.502 8.06445 21.3271 cv
f
6.46875 20.2217 mo
6.46875 19.6758 li
7.00781 19.3398 7.53271 19.0811 8.05078 18.9131 cv
8.56836 18.7451 9.07959 18.6538 9.5835 18.6538 cv
10.0942 18.6538 10.605 18.7451 11.123 18.9131 cv
11.6406 19.0811 12.1587 19.3398 12.6973 19.6758 cv
12.6973 20.2217 li
12.1729 19.9204 11.6616 19.6968 11.144 19.543 cv
10.6328 19.3955 10.1152 19.3188 9.5835 19.3188 cv
9.05811 19.3188 8.54053 19.3955 8.02979 19.543 cv
7.51855 19.6968 7.00098 19.9204 6.46875 20.2217 cv
f
.3375 lw
2 lc
24.2998 14.5801 mo
174.96 14.5801 li
@
174.96 131.22 mo
174.96 14.5801 li
@
24.2998 131.22 mo
174.96 131.22 li
@
24.2998 131.22 mo
24.2998 14.5801 li
@
grestore
grestore
93.8252 161.979 mo
93.8252 161.947 93.8252 161.925 93.6392 161.739 cv
92.269 160.358 91.9185 158.287 91.9185 156.61 cv
91.9185 154.704 92.335 152.797 93.6826 151.427 cv
93.8252 151.296 93.8252 151.273 93.8252 151.24 cv
93.8252 151.163 93.7813 151.131 93.7158 151.131 cv
93.606 151.131 92.6196 151.876 91.9731 153.268 cv
91.4146 154.474 91.2827 155.69 91.2827 156.61 cv
91.2827 157.465 91.4033 158.791 92.0063 160.029 cv
92.6636 161.378 93.606 162.09 93.7158 162.09 cv
93.7813 162.09 93.8252 162.057 93.8252 161.979 cv
cp
false sop
0 1 1 0 cmyk
f
98.1089 158.517 mo
98.1528 158.956 98.4487 159.416 98.9639 159.416 cv
99.1938 159.416 99.8628 159.263 99.8628 158.374 cv
99.8628 157.761 li
99.5884 157.761 li
99.5884 158.374 li
99.5884 159.011 99.3145 159.076 99.1938 159.076 cv
98.8325 159.076 98.7886 158.583 98.7886 158.528 cv
98.7886 156.337 li
98.7886 155.876 98.7886 155.448 98.394 155.043 cv
97.9668 154.616 97.4189 154.44 96.8926 154.44 cv
95.9941 154.44 95.2378 154.956 95.2378 155.679 cv
95.2378 156.008 95.457 156.194 95.7422 156.194 cv
96.0488 156.194 96.2461 155.975 96.2461 155.69 cv
96.2461 155.558 96.1914 155.196 95.687 155.186 cv
95.9829 154.802 96.52 154.682 96.8706 154.682 cv
97.4077 154.682 98.0322 155.108 98.0322 156.085 cv
98.0322 156.489 li
97.4736 156.522 96.7065 156.556 96.0161 156.884 cv
95.1938 157.257 94.9199 157.827 94.9199 158.31 cv
94.9199 159.188 95.9829 159.46 96.6733 159.46 cv
97.397 159.46 97.9009 159.026 98.1089 158.517 cv
cp
98.0322 156.72 mo
98.0322 157.815 li
98.0322 158.856 97.2432 159.229 96.75 159.229 cv
96.2134 159.229 95.7642 158.846 95.7642 158.298 cv
95.7642 157.695 96.2241 156.786 98.0322 156.72 cv
cp
f
103.106 156.61 mo
103.106 155.755 102.986 154.43 102.383 153.191 cv
101.726 151.843 100.783 151.131 100.673 151.131 cv
100.608 151.131 100.564 151.175 100.564 151.24 cv
100.564 151.273 100.564 151.296 100.772 151.493 cv
101.846 152.577 102.471 154.319 102.471 156.61 cv
102.471 158.484 102.065 160.413 100.707 161.794 cv
100.564 161.925 100.564 161.947 100.564 161.979 cv
100.564 162.046 100.608 162.09 100.673 162.09 cv
100.783 162.09 101.77 161.345 102.416 159.952 cv
102.975 158.747 103.106 157.53 103.106 156.61 cv
cp
f
gsave
200.435 145.8 mo
394.834 145.8 li
394.834 0 li
200.435 0 li
200.435 145.8 li
cp
clp
200.435 145.8 mo
394.834 145.8 li
394.834 0 li
200.435 0 li
200.435 145.8 li
cp
0 0 0 0 cmyk
f
224.735 131.22 mo
375.395 131.22 li
375.395 14.5801 li
224.735 14.5801 li
224.735 131.22 li
cp
f
gsave
224.735 131.22 mo
375.395 131.22 li
375.395 14.5801 li
224.735 14.5801 li
224.735 131.22 li
cp
clp
.3375 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
225.148 120.723 mo
225.56 120.723 li
225.973 120.334 li
226.798 119.323 li
227.211 118.778 li
227.625 118.39 li
228.037 117.557 li
228.45 116.557 li
228.863 116.058 li
229.275 115.724 li
229.688 115.557 li
230.101 115.058 li
230.513 114.724 li
231.339 114.391 li
231.751 113.724 li
232.165 113.391 li
232.578 112.725 li
232.99 112.392 li
233.816 111.392 li
234.228 111.225 li
234.641 110.725 li
235.054 109.726 li
235.879 106.392 li
236.292 104.226 li
237.118 98.7275 li
237.531 95.728 li
237.943 92.3955 li
238.769 86.397 li
240.007 78.2324 li
240.419 76.5659 li
240.833 75.8994 li
241.246 75.7329 li
241.658 75.7329 li
242.072 76.0664 li
242.484 77.3989 li
242.896 78.2324 li
243.31 78.2324 li
244.134 76.5659 li
244.547 76.0664 li
244.96 75.7329 li
245.374 74.7329 li
245.786 74.5664 li
246.199 74.2329 li
247.025 73.8999 li
247.437 73.0664 li
247.85 71.4004 li
248.675 67.9014 li
249.088 66.4014 li
249.914 63.7354 li
250.327 62.5688 li
250.74 61.9028 li
251.152 61.0693 li
251.565 60.4028 li
251.978 59.0698 li
252.39 57.5703 li
252.803 56.5703 li
253.216 55.7373 li
253.628 54.5708 li
254.042 53.5713 li
254.455 51.9048 li
254.867 51.2383 li
255.28 50.2388 li
255.693 49.5723 li
256.105 48.4058 li
256.518 47.7393 li
256.931 47.4063 li
257.343 47.5723 li
257.756 47.0728 li
258.169 46.4063 li
258.582 44.4063 li
258.995 43.4072 li
259.408 41.7402 li
259.82 40.4072 li
260.233 39.2412 li
260.646 38.2412 li
261.058 37.9082 li
261.471 37.7412 li
261.884 36.9082 li
262.296 36.2422 li
262.709 35.2417 li
263.123 33.9087 li
263.535 33.0757 li
263.948 31.2427 li
264.361 30.0767 li
264.773 29.0767 li
265.186 28.5771 li
265.599 28.2437 li
266.011 27.7437 li
266.424 26.4111 li
266.837 26.4111 li
267.663 26.0776 li
268.076 25.4111 li
268.489 23.9111 li
268.901 23.4111 li
269.314 22.7451 li
269.726 21.7451 li
270.552 19.0791 li
270.964 18.0791 li
271.377 17.7461 li
271.791 17.0791 li
272.203 17.0791 li
272.616 17.2461 li
273.029 18.0791 li
273.441 19.5791 li
273.854 21.7451 li
274.267 23.2446 li
274.68 24.5776 li
275.505 26.9106 li
275.918 27.2437 li
276.331 27.4106 li
276.744 26.5771 li
277.157 26.5771 li
277.569 29.0767 li
278.395 34.9087 li
279.22 40.7407 li
279.633 43.0737 li
280.045 46.0728 li
280.458 46.7393 li
280.872 46.7393 li
281.284 46.9058 li
281.697 47.7393 li
282.11 47.7393 li
282.522 48.2393 li
282.935 47.9058 li
283.348 46.0728 li
283.76 44.9067 li
284.173 43.4072 li
284.586 41.7402 li
284.999 40.5742 li
285.412 40.5742 li
285.825 40.9077 li
286.65 43.2402 li
287.063 44.5732 li
287.475 45.7393 li
287.888 46.2397 li
288.301 46.0728 li
288.713 44.7397 li
289.126 43.7402 li
289.54 42.4072 li
289.952 41.4072 li
290.365 40.9077 li
290.778 40.2412 li
291.19 39.9077 li
292.016 40.2412 li
292.841 41.2407 li
293.254 41.5737 li
294.08 42.9067 li
294.905 44.9067 li
295.318 46.0728 li
296.969 50.0718 li
297.381 50.9048 li
297.794 51.9048 li
298.208 52.2383 li
298.621 52.7378 li
299.033 53.0713 li
299.446 54.0713 li
299.859 55.2373 li
301.509 62.7358 li
301.922 64.0688 li
302.335 65.2354 li
302.748 65.9019 li
303.161 66.2349 li
303.574 66.7349 li
304.399 67.4014 li
304.812 68.2344 li
305.637 69.2344 li
306.05 69.4009 li
306.462 69.2344 li
307.702 69.2344 li
308.114 69.9009 li
308.527 70.9004 li
308.94 71.5669 li
309.352 72.4004 li
309.765 72.9004 li
310.178 72.7334 li
310.59 72.9004 li
311.003 72.7334 li
311.417 72.4004 li
311.829 72.7334 li
312.655 72.4004 li
313.067 72.5669 li
313.48 72.5669 li
313.893 72.2334 li
314.305 71.7339 li
314.718 70.7339 li
315.131 70.2339 li
315.543 69.5674 li
315.957 69.4009 li
316.37 69.4009 li
316.782 70.5674 li
317.195 71.5669 li
317.608 72.4004 li
318.02 72.9004 li
318.846 74.2329 li
319.258 75.0664 li
320.084 74.0664 li
320.497 73.8999 li
320.91 74.2329 li
321.323 74.8999 li
321.735 75.7329 li
322.148 76.3994 li
322.561 77.2324 li
322.973 78.3989 li
323.386 78.5654 li
323.799 78.5654 li
324.211 79.2314 li
324.625 78.7324 li
325.038 79.3984 li
325.45 79.8984 li
325.863 79.5654 li
326.276 80.2314 li
326.688 81.8979 li
327.101 81.8979 li
327.514 82.7314 li
327.927 81.7314 li
328.339 81.2314 li
328.752 81.2314 li
329.166 81.3979 li
329.578 80.5649 li
329.991 81.0649 li
330.404 81.3979 li
330.816 82.0645 li
331.642 82.7314 li
332.054 81.8979 li
332.88 80.5649 li
333.292 80.3984 li
333.706 80.7314 li
334.118 80.3984 li
334.531 79.3984 li
334.944 79.5654 li
335.356 79.5654 li
335.769 79.0654 li
336.182 77.8989 li
336.594 76.0664 li
337.007 75.3994 li
337.42 76.3994 li
337.833 76.3994 li
338.659 75.7329 li
339.071 76.0664 li
339.484 76.5659 li
339.897 75.8994 li
340.309 74.0664 li
340.722 73.0664 li
341.135 72.2334 li
341.548 71.2339 li
341.96 69.7339 li
342.374 68.4014 li
342.787 67.9014 li
343.199 67.9014 li
343.612 68.0679 li
344.025 68.4014 li
344.437 68.9014 li
344.85 69.9009 li
345.675 71.2339 li
346.088 71.5669 li
346.501 71.7339 li
346.914 71.5669 li
347.327 71.5669 li
348.152 70.9004 li
348.565 70.4004 li
349.39 69.7339 li
349.803 70.7339 li
350.628 71.4004 li
351.455 73.0664 li
351.867 73.5664 li
352.28 74.2329 li
352.693 74.2329 li
353.105 74.3994 li
353.518 74.7329 li
353.931 74.7329 li
354.343 74.3994 li
354.756 74.2329 li
355.169 73.8999 li
355.995 72.5669 li
356.408 71.4004 li
356.82 70.4004 li
357.234 69.7339 li
357.646 69.2344 li
358.472 67.2349 li
358.884 67.0684 li
359.296 67.4014 li
360.123 67.7349 li
360.535 67.5679 li
360.949 68.2344 li
361.361 68.2344 li
361.774 67.5679 li
362.599 65.2354 li
363.012 63.7354 li
363.424 62.5688 li
363.837 61.2363 li
364.25 60.5693 li
364.663 60.2363 li
365.489 59.9028 li
365.901 60.2363 li
366.314 60.4028 li
366.727 60.7363 li
367.552 61.7358 li
367.965 62.4023 li
368.377 63.2354 li
368.791 63.7354 li
369.204 64.4023 li
369.616 64.5684 li
370.029 64.2354 li
370.855 62.9023 li
371.267 61.5693 li
371.68 60.7363 li
372.093 60.5693 li
372.505 59.4033 li
372.918 58.9033 li
373.332 58.5698 li
373.744 58.5698 li
374.57 56.5703 li
374.982 56.0703 li
375.395 56.7373 li
375.808 56.4038 li
.884 .769 0 0 cmyk
@
grestore
245.374 131.22 mo
245.374 129.87 li
245.374 131.22 li
cp
0 0 0 1 cmyk
f
.16875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
245.374 131.22 mo
245.374 129.87 li
@
245.374 15.9302 mo
245.374 14.5801 li
245.374 15.9302 li
cp
f
245.374 14.5801 mo
245.374 15.9302 li
@
gsave
200.435 0 mo
394.834 0 li
394.834 145.8 li
200.435 145.8 li
200.435 0 li
cp
clp
242.176 132.731 mo
244.885 132.731 li
244.885 133.312 li
242.806 133.312 li
242.806 134.565 li
242.905 134.53 243.009 134.501 243.108 134.487 cv
243.206 134.474 243.31 134.46 243.408 134.46 cv
243.975 134.46 244.423 134.62 244.759 134.929 cv
245.095 135.243 245.263 135.663 245.263 136.195 cv
245.263 136.748 245.088 137.175 244.745 137.476 cv
244.402 137.776 243.919 137.924 243.303 137.924 cv
243.086 137.924 242.87 137.903 242.645 137.875 cv
242.421 137.84 242.198 137.791 241.959 137.714 cv
241.959 137.021 li
242.163 137.134 242.373 137.218 242.596 137.273 cv
242.814 137.329 243.044 137.351 243.29 137.351 cv
243.681 137.351 243.997 137.253 244.227 137.042 cv
244.451 136.832 244.57 136.552 244.57 136.195 cv
244.57 135.846 244.451 135.565 244.227 135.355 cv
243.997 135.146 243.681 135.04 243.29 135.04 cv
243.108 135.04 242.918 135.062 242.737 135.104 cv
242.554 135.146 242.366 135.209 242.176 135.292 cv
242.176 132.731 li
f
248.097 133.187 mo
247.741 133.187 247.474 133.361 247.292 133.711 cv
247.111 134.061 247.027 134.585 247.027 135.286 cv
247.027 135.985 247.111 136.511 247.292 136.86 cv
247.474 137.21 247.741 137.385 248.097 137.385 cv
248.455 137.385 248.72 137.21 248.902 136.86 cv
249.078 136.511 249.167 135.985 249.167 135.286 cv
249.167 134.585 249.078 134.061 248.902 133.711 cv
248.72 133.361 248.455 133.187 248.097 133.187 cv
248.097 132.64 mo
248.664 132.64 249.098 132.871 249.406 133.319 cv
249.707 133.774 249.861 134.432 249.861 135.286 cv
249.861 136.146 249.707 136.804 249.406 137.252 cv
249.098 137.7 248.664 137.924 248.097 137.924 cv
247.523 137.924 247.083 137.7 246.782 137.252 cv
246.481 136.804 246.333 136.146 246.333 135.286 cv
246.333 134.432 246.481 133.774 246.782 133.319 cv
247.083 132.871 247.523 132.64 248.097 132.64 cv
f
266.011 131.22 mo
266.011 129.87 li
f
266.011 131.22 mo
266.011 129.87 li
@
266.011 14.5801 mo
266.011 15.9302 li
f
266.011 14.5801 mo
266.011 15.9302 li
@
260.812 137.252 mo
261.939 137.252 li
261.939 133.361 li
260.714 133.606 li
260.714 132.976 li
261.932 132.731 li
262.625 132.731 li
262.625 137.252 li
263.751 137.252 li
263.751 137.833 li
260.812 137.833 li
260.812 137.252 li
cp
f
266.621 133.187 mo
266.264 133.187 265.999 133.361 265.816 133.711 cv
265.634 134.061 265.55 134.585 265.55 135.286 cv
265.55 135.985 265.634 136.511 265.816 136.86 cv
265.999 137.21 266.264 137.385 266.621 137.385 cv
266.978 137.385 267.244 137.21 267.426 136.86 cv
267.601 136.511 267.692 135.985 267.692 135.286 cv
267.692 134.585 267.601 134.061 267.426 133.711 cv
267.244 133.361 266.978 133.187 266.621 133.187 cv
266.621 132.64 mo
267.188 132.64 267.622 132.871 267.929 133.319 cv
268.231 133.774 268.384 134.432 268.384 135.286 cv
268.384 136.146 268.231 136.804 267.929 137.252 cv
267.622 137.7 267.188 137.924 266.621 137.924 cv
266.047 137.924 265.606 137.7 265.305 137.252 cv
265.004 136.804 264.857 136.146 264.857 135.286 cv
264.857 134.432 265.004 133.774 265.305 133.319 cv
265.606 132.871 266.047 132.64 266.621 132.64 cv
f
271.072 133.187 mo
270.715 133.187 270.45 133.361 270.267 133.711 cv
270.085 134.061 270.001 134.585 270.001 135.286 cv
270.001 135.985 270.085 136.511 270.267 136.86 cv
270.45 137.21 270.715 137.385 271.072 137.385 cv
271.429 137.385 271.695 137.21 271.876 136.86 cv
272.051 136.511 272.143 135.985 272.143 135.286 cv
272.143 134.585 272.051 134.061 271.876 133.711 cv
271.695 133.361 271.429 133.187 271.072 133.187 cv
271.072 132.64 mo
271.639 132.64 272.073 132.871 272.38 133.319 cv
272.682 133.774 272.835 134.432 272.835 135.286 cv
272.835 136.146 272.682 136.804 272.38 137.252 cv
272.073 137.7 271.639 137.924 271.072 137.924 cv
270.499 137.924 270.057 137.7 269.756 137.252 cv
269.456 136.804 269.308 136.146 269.308 135.286 cv
269.308 134.432 269.456 133.774 269.756 133.319 cv
270.057 132.871 270.499 132.64 271.072 132.64 cv
f
286.65 131.22 mo
286.65 129.87 li
f
286.65 131.22 mo
286.65 129.87 li
@
286.65 14.5801 mo
286.65 15.9302 li
f
286.65 14.5801 mo
286.65 15.9302 li
@
281.451 137.252 mo
282.578 137.252 li
282.578 133.361 li
281.353 133.606 li
281.353 132.976 li
282.571 132.731 li
283.263 132.731 li
283.263 137.252 li
284.39 137.252 li
284.39 137.833 li
281.451 137.833 li
281.451 137.252 li
cp
f
285.79 132.731 mo
288.498 132.731 li
288.498 133.312 li
286.419 133.312 li
286.419 134.565 li
286.517 134.53 286.623 134.501 286.72 134.487 cv
286.819 134.474 286.923 134.46 287.021 134.46 cv
287.588 134.46 288.037 134.62 288.372 134.929 cv
288.708 135.243 288.876 135.663 288.876 136.195 cv
288.876 136.748 288.701 137.175 288.358 137.476 cv
288.015 137.776 287.533 137.924 286.917 137.924 cv
286.7 137.924 286.483 137.903 286.258 137.875 cv
286.035 137.84 285.811 137.791 285.573 137.714 cv
285.573 137.021 li
285.776 137.134 285.986 137.218 286.209 137.273 cv
286.426 137.329 286.658 137.351 286.903 137.351 cv
287.294 137.351 287.609 137.253 287.84 137.042 cv
288.064 136.832 288.183 136.552 288.183 136.195 cv
288.183 135.846 288.064 135.565 287.84 135.355 cv
287.609 135.146 287.294 135.04 286.903 135.04 cv
286.72 135.04 286.532 135.062 286.35 135.104 cv
286.167 135.146 285.979 135.209 285.79 135.292 cv
285.79 132.731 li
f
291.71 133.187 mo
291.353 133.187 291.087 133.361 290.906 133.711 cv
290.723 134.061 290.64 134.585 290.64 135.286 cv
290.64 135.985 290.723 136.511 290.906 136.86 cv
291.087 137.21 291.353 137.385 291.71 137.385 cv
292.068 137.385 292.333 137.21 292.515 136.86 cv
292.69 136.511 292.781 135.985 292.781 135.286 cv
292.781 134.585 292.69 134.061 292.515 133.711 cv
292.333 133.361 292.068 133.187 291.71 133.187 cv
291.71 132.64 mo
292.278 132.64 292.711 132.871 293.019 133.319 cv
293.32 133.774 293.474 134.432 293.474 135.286 cv
293.474 136.146 293.32 136.804 293.019 137.252 cv
292.711 137.7 292.278 137.924 291.71 137.924 cv
291.136 137.924 290.696 137.7 290.395 137.252 cv
290.093 136.804 289.947 136.146 289.947 135.286 cv
289.947 134.432 290.093 133.774 290.395 133.319 cv
290.696 132.871 291.136 132.64 291.71 132.64 cv
f
307.289 131.22 mo
307.289 129.87 li
f
307.289 131.22 mo
307.289 129.87 li
@
307.289 14.5801 mo
307.289 15.9302 li
f
307.289 14.5801 mo
307.289 15.9302 li
@
302.436 137.252 mo
304.843 137.252 li
304.843 137.833 li
301.603 137.833 li
301.603 137.252 li
301.862 136.986 302.218 136.622 302.673 136.16 cv
303.122 135.706 303.409 135.411 303.528 135.278 cv
303.751 135.034 303.905 134.823 303.99 134.648 cv
304.074 134.48 304.123 134.306 304.123 134.138 cv
304.123 133.872 304.024 133.647 303.835 133.479 cv
303.647 133.312 303.401 133.222 303.093 133.222 cv
302.876 133.222 302.646 133.263 302.408 133.333 cv
302.169 133.41 301.911 133.522 301.638 133.676 cv
301.638 132.976 li
301.917 132.864 302.176 132.78 302.415 132.724 cv
302.653 132.668 302.876 132.64 303.08 132.64 cv
303.604 132.64 304.024 132.773 304.339 133.039 cv
304.654 133.306 304.816 133.655 304.816 134.096 cv
304.816 134.306 304.773 134.509 304.697 134.69 cv
304.62 134.88 304.479 135.104 304.269 135.355 cv
304.213 135.426 304.032 135.614 303.723 135.93 cv
303.416 136.244 302.989 136.685 302.436 137.252 cv
f
307.768 133.187 mo
307.412 133.187 307.145 133.361 306.963 133.711 cv
306.782 134.061 306.698 134.585 306.698 135.286 cv
306.698 135.985 306.782 136.511 306.963 136.86 cv
307.145 137.21 307.412 137.385 307.768 137.385 cv
308.125 137.385 308.391 137.21 308.574 136.86 cv
308.749 136.511 308.839 135.985 308.839 135.286 cv
308.839 134.585 308.749 134.061 308.574 133.711 cv
308.391 133.361 308.125 133.187 307.768 133.187 cv
307.768 132.64 mo
308.335 132.64 308.769 132.871 309.078 133.319 cv
309.378 133.774 309.533 134.432 309.533 135.286 cv
309.533 136.146 309.378 136.804 309.078 137.252 cv
308.769 137.7 308.335 137.924 307.768 137.924 cv
307.195 137.924 306.753 137.7 306.453 137.252 cv
306.152 136.804 306.004 136.146 306.004 135.286 cv
306.004 134.432 306.152 133.774 306.453 133.319 cv
306.753 132.871 307.195 132.64 307.768 132.64 cv
f
312.219 133.187 mo
311.863 133.187 311.596 133.361 311.415 133.711 cv
311.233 134.061 311.149 134.585 311.149 135.286 cv
311.149 135.985 311.233 136.511 311.415 136.86 cv
311.596 137.21 311.863 137.385 312.219 137.385 cv
312.577 137.385 312.842 137.21 313.025 136.86 cv
313.2 136.511 313.291 135.985 313.291 135.286 cv
313.291 134.585 313.2 134.061 313.025 133.711 cv
312.842 133.361 312.577 133.187 312.219 133.187 cv
312.219 132.64 mo
312.787 132.64 313.22 132.871 313.529 133.319 cv
313.83 133.774 313.983 134.432 313.983 135.286 cv
313.983 136.146 313.83 136.804 313.529 137.252 cv
313.22 137.7 312.787 137.924 312.219 137.924 cv
311.646 137.924 311.205 137.7 310.904 137.252 cv
310.603 136.804 310.456 136.146 310.456 135.286 cv
310.456 134.432 310.603 133.774 310.904 133.319 cv
311.205 132.871 311.646 132.64 312.219 132.64 cv
f
327.927 131.22 mo
327.927 129.87 li
f
327.927 131.22 mo
327.927 129.87 li
@
327.927 14.5801 mo
327.927 15.9302 li
f
327.927 14.5801 mo
327.927 15.9302 li
@
323.074 137.252 mo
325.482 137.252 li
325.482 137.833 li
322.242 137.833 li
322.242 137.252 li
322.5 136.986 322.857 136.622 323.312 136.16 cv
323.759 135.706 324.047 135.411 324.166 135.278 cv
324.389 135.034 324.543 134.823 324.627 134.648 cv
324.711 134.48 324.761 134.306 324.761 134.138 cv
324.761 133.872 324.663 133.647 324.473 133.479 cv
324.285 133.312 324.04 133.222 323.732 133.222 cv
323.515 133.222 323.284 133.263 323.046 133.333 cv
322.808 133.41 322.549 133.522 322.277 133.676 cv
322.277 132.976 li
322.556 132.864 322.815 132.78 323.053 132.724 cv
323.292 132.668 323.515 132.64 323.718 132.64 cv
324.243 132.64 324.663 132.773 324.978 133.039 cv
325.292 133.306 325.454 133.655 325.454 134.096 cv
325.454 134.306 325.412 134.509 325.334 134.69 cv
325.257 134.88 325.118 135.104 324.908 135.355 cv
324.852 135.426 324.67 135.614 324.362 135.93 cv
324.054 136.244 323.627 136.685 323.074 137.252 cv
f
326.937 132.731 mo
329.646 132.731 li
329.646 133.312 li
327.567 133.312 li
327.567 134.565 li
327.666 134.53 327.77 134.501 327.868 134.487 cv
327.966 134.474 328.071 134.46 328.169 134.46 cv
328.736 134.46 329.183 134.62 329.52 134.929 cv
329.855 135.243 330.024 135.663 330.024 136.195 cv
330.024 136.748 329.849 137.175 329.505 137.476 cv
329.163 137.776 328.68 137.924 328.064 137.924 cv
327.847 137.924 327.63 137.903 327.406 137.875 cv
327.182 137.84 326.958 137.791 326.72 137.714 cv
326.72 137.021 li
326.923 137.134 327.133 137.218 327.357 137.273 cv
327.575 137.329 327.805 137.351 328.05 137.351 cv
328.442 137.351 328.757 137.253 328.988 137.042 cv
329.211 136.832 329.331 136.552 329.331 136.195 cv
329.331 135.846 329.211 135.565 328.988 135.355 cv
328.757 135.146 328.442 135.04 328.05 135.04 cv
327.868 135.04 327.679 135.062 327.497 135.104 cv
327.315 135.146 327.126 135.209 326.937 135.292 cv
326.937 132.731 li
f
332.858 133.187 mo
332.5 133.187 332.235 133.361 332.053 133.711 cv
331.871 134.061 331.787 134.585 331.787 135.286 cv
331.787 135.985 331.871 136.511 332.053 136.86 cv
332.235 137.21 332.5 137.385 332.858 137.385 cv
333.215 137.385 333.481 137.21 333.663 136.86 cv
333.837 136.511 333.929 135.985 333.929 135.286 cv
333.929 134.585 333.837 134.061 333.663 133.711 cv
333.481 133.361 333.215 133.187 332.858 133.187 cv
332.858 132.64 mo
333.425 132.64 333.859 132.871 334.167 133.319 cv
334.467 133.774 334.622 134.432 334.622 135.286 cv
334.622 136.146 334.467 136.804 334.167 137.252 cv
333.859 137.7 333.425 137.924 332.858 137.924 cv
332.284 137.924 331.843 137.7 331.542 137.252 cv
331.242 136.804 331.094 136.146 331.094 135.286 cv
331.094 134.432 331.242 133.774 331.542 133.319 cv
331.843 132.871 332.284 132.64 332.858 132.64 cv
f
348.565 131.22 mo
348.565 129.87 li
f
348.565 131.22 mo
348.565 129.87 li
@
348.565 14.5801 mo
348.565 15.9302 li
f
348.565 14.5801 mo
348.565 15.9302 li
@
345.221 135.083 mo
345.55 135.153 345.808 135.3 345.99 135.523 cv
346.172 135.747 346.27 136.027 346.27 136.35 cv
346.27 136.853 346.095 137.245 345.752 137.519 cv
345.403 137.791 344.913 137.924 344.276 137.924 cv
344.059 137.924 343.835 137.903 343.611 137.86 cv
343.387 137.826 343.149 137.763 342.912 137.679 cv
342.912 137.015 li
343.1 137.126 343.31 137.21 343.541 137.267 cv
343.765 137.322 344.003 137.351 344.254 137.351 cv
344.689 137.351 345.017 137.267 345.242 137.099 cv
345.465 136.931 345.584 136.679 345.584 136.35 cv
345.584 136.056 345.48 135.817 345.27 135.649 cv
345.059 135.481 344.765 135.391 344.388 135.391 cv
343.793 135.391 li
343.793 134.823 li
344.416 134.823 li
344.751 134.823 345.011 134.761 345.193 134.62 cv
345.375 134.487 345.465 134.292 345.465 134.032 cv
345.465 133.774 345.368 133.571 345.186 133.431 cv
344.997 133.291 344.731 133.221 344.388 133.221 cv
344.199 133.221 343.996 133.242 343.779 133.284 cv
343.562 133.326 343.324 133.389 343.065 133.473 cv
343.065 132.856 li
343.324 132.787 343.569 132.731 343.8 132.696 cv
344.024 132.661 344.241 132.64 344.451 132.64 cv
344.968 132.64 345.381 132.759 345.69 132.997 cv
345.998 133.235 346.152 133.557 346.152 133.963 cv
346.152 134.243 346.068 134.48 345.907 134.677 cv
345.746 134.872 345.514 135.013 345.221 135.083 cv
f
349.056 133.187 mo
348.699 133.187 348.433 133.361 348.25 133.711 cv
348.069 134.061 347.985 134.585 347.985 135.286 cv
347.985 135.985 348.069 136.511 348.25 136.86 cv
348.433 137.21 348.699 137.385 349.056 137.385 cv
349.413 137.385 349.679 137.21 349.861 136.86 cv
350.036 136.511 350.126 135.985 350.126 135.286 cv
350.126 134.585 350.036 134.061 349.861 133.711 cv
349.679 133.361 349.413 133.187 349.056 133.187 cv
349.056 132.64 mo
349.623 132.64 350.056 132.871 350.365 133.319 cv
350.666 133.774 350.82 134.432 350.82 135.286 cv
350.82 136.146 350.666 136.804 350.365 137.252 cv
350.056 137.7 349.623 137.924 349.056 137.924 cv
348.482 137.924 348.041 137.7 347.741 137.252 cv
347.439 136.804 347.292 136.146 347.292 135.286 cv
347.292 134.432 347.439 133.774 347.741 133.319 cv
348.041 132.871 348.482 132.64 349.056 132.64 cv
f
353.506 133.187 mo
353.15 133.187 352.884 133.361 352.702 133.711 cv
352.52 134.061 352.436 134.585 352.436 135.286 cv
352.436 135.985 352.52 136.511 352.702 136.86 cv
352.884 137.21 353.15 137.385 353.506 137.385 cv
353.864 137.385 354.129 137.21 354.312 136.86 cv
354.487 136.511 354.578 135.985 354.578 135.286 cv
354.578 134.585 354.487 134.061 354.312 133.711 cv
354.129 133.361 353.864 133.187 353.506 133.187 cv
353.506 132.64 mo
354.074 132.64 354.507 132.871 354.816 133.319 cv
355.117 133.774 355.27 134.432 355.27 135.286 cv
355.27 136.146 355.117 136.804 354.816 137.252 cv
354.507 137.7 354.074 137.924 353.506 137.924 cv
352.933 137.924 352.492 137.7 352.191 137.252 cv
351.89 136.804 351.743 136.146 351.743 135.286 cv
351.743 134.432 351.89 133.774 352.191 133.319 cv
352.492 132.871 352.933 132.64 353.506 132.64 cv
f
369.204 131.22 mo
369.204 129.87 li
f
369.204 131.22 mo
369.204 129.87 li
@
369.204 14.5801 mo
369.204 15.9302 li
f
369.204 14.5801 mo
369.204 15.9302 li
@
365.859 135.083 mo
366.188 135.153 366.447 135.3 366.628 135.523 cv
366.811 135.747 366.909 136.027 366.909 136.35 cv
366.909 136.853 366.734 137.245 366.391 137.519 cv
366.041 137.791 365.551 137.924 364.914 137.924 cv
364.698 137.924 364.473 137.903 364.25 137.86 cv
364.025 137.826 363.788 137.763 363.549 137.679 cv
363.549 137.015 li
363.739 137.126 363.949 137.21 364.179 137.267 cv
364.404 137.322 364.641 137.351 364.893 137.351 cv
365.327 137.351 365.656 137.267 365.88 137.099 cv
366.104 136.931 366.223 136.679 366.223 136.35 cv
366.223 136.056 366.119 135.817 365.909 135.649 cv
365.698 135.481 365.404 135.391 365.026 135.391 cv
364.431 135.391 li
364.431 134.823 li
365.054 134.823 li
365.39 134.823 365.649 134.761 365.831 134.62 cv
366.013 134.487 366.104 134.292 366.104 134.032 cv
366.104 133.774 366.006 133.571 365.824 133.431 cv
365.635 133.291 365.37 133.221 365.026 133.221 cv
364.837 133.221 364.634 133.242 364.417 133.284 cv
364.201 133.326 363.962 133.389 363.704 133.473 cv
363.704 132.856 li
363.962 132.787 364.208 132.731 364.439 132.696 cv
364.663 132.661 364.879 132.64 365.089 132.64 cv
365.607 132.64 366.02 132.759 366.328 132.997 cv
366.636 133.235 366.79 133.557 366.79 133.963 cv
366.79 134.243 366.706 134.48 366.544 134.677 cv
366.384 134.872 366.153 135.013 365.859 135.083 cv
f
368.224 132.731 mo
370.932 132.731 li
370.932 133.312 li
368.854 133.312 li
368.854 134.565 li
368.953 134.53 369.057 134.501 369.156 134.487 cv
369.253 134.474 369.358 134.46 369.456 134.46 cv
370.023 134.46 370.471 134.62 370.807 134.929 cv
371.142 135.243 371.311 135.663 371.311 136.195 cv
371.311 136.748 371.136 137.175 370.792 137.476 cv
370.45 137.776 369.967 137.924 369.351 137.924 cv
369.134 137.924 368.917 137.903 368.694 137.875 cv
368.469 137.84 368.246 137.791 368.007 137.714 cv
368.007 137.021 li
368.21 137.134 368.42 137.218 368.644 137.273 cv
368.861 137.329 369.092 137.351 369.337 137.351 cv
369.729 137.351 370.044 137.253 370.275 137.042 cv
370.499 136.832 370.618 136.552 370.618 136.195 cv
370.618 135.846 370.499 135.565 370.275 135.355 cv
370.044 135.146 369.729 135.04 369.337 135.04 cv
369.156 135.04 368.966 135.062 368.785 135.104 cv
368.602 135.146 368.414 135.209 368.224 135.292 cv
368.224 132.731 li
f
374.145 133.187 mo
373.789 133.187 373.522 133.361 373.34 133.711 cv
373.159 134.061 373.075 134.585 373.075 135.286 cv
373.075 135.985 373.159 136.511 373.34 136.86 cv
373.522 137.21 373.789 137.385 374.145 137.385 cv
374.502 137.385 374.768 137.21 374.951 136.86 cv
375.125 136.511 375.216 135.985 375.216 135.286 cv
375.216 134.585 375.125 134.061 374.951 133.711 cv
374.768 133.361 374.502 133.187 374.145 133.187 cv
374.145 132.64 mo
374.712 132.64 375.146 132.871 375.454 133.319 cv
375.754 133.774 375.909 134.432 375.909 135.286 cv
375.909 136.146 375.754 136.804 375.454 137.252 cv
375.146 137.7 374.712 137.924 374.145 137.924 cv
373.572 137.924 373.13 137.7 372.83 137.252 cv
372.529 136.804 372.381 136.146 372.381 135.286 cv
372.381 134.432 372.529 133.774 372.83 133.319 cv
373.13 132.871 373.572 132.64 374.145 132.64 cv
f
279.746 140.47 mo
279.746 144.438 li
280.579 144.438 li
281.279 144.438 281.796 144.284 282.125 143.962 cv
282.448 143.641 282.615 143.136 282.615 142.45 cv
282.615 141.765 282.448 141.268 282.125 140.946 cv
281.796 140.631 281.279 140.47 280.579 140.47 cv
279.746 140.47 li
279.053 139.903 mo
280.474 139.903 li
281.46 139.903 282.189 140.112 282.65 140.519 cv
283.113 140.932 283.343 141.575 283.343 142.45 cv
283.343 143.332 283.105 143.976 282.643 144.39 cv
282.181 144.802 281.454 145.005 280.474 145.005 cv
279.053 145.005 li
279.053 139.903 li
f
286.157 143.08 mo
285.646 143.08 285.295 143.144 285.1 143.255 cv
284.904 143.374 284.806 143.569 284.806 143.851 cv
284.806 144.073 284.875 144.256 285.023 144.382 cv
285.169 144.515 285.373 144.578 285.625 144.578 cv
285.975 144.578 286.254 144.459 286.464 144.207 cv
286.674 143.962 286.78 143.634 286.78 143.22 cv
286.78 143.08 li
286.157 143.08 li
287.41 142.821 mo
287.41 145.005 li
286.78 145.005 li
286.78 144.424 li
286.632 144.662 286.451 144.83 286.241 144.935 cv
286.031 145.04 285.765 145.096 285.457 145.096 cv
285.065 145.096 284.75 144.991 284.519 144.774 cv
284.288 144.557 284.176 144.263 284.176 143.892 cv
284.176 143.466 284.316 143.144 284.61 142.919 cv
284.897 142.702 285.324 142.591 285.898 142.591 cv
286.78 142.591 li
286.78 142.527 li
286.78 142.241 286.681 142.017 286.493 141.855 cv
286.304 141.702 286.038 141.618 285.695 141.618 cv
285.471 141.618 285.261 141.646 285.051 141.702 cv
284.841 141.758 284.645 141.835 284.456 141.933 cv
284.456 141.352 li
284.68 141.268 284.904 141.198 285.121 141.155 cv
285.337 141.114 285.547 141.085 285.757 141.085 cv
286.31 141.085 286.723 141.232 286.997 141.52 cv
287.269 141.807 287.41 142.241 287.41 142.821 cv
f
290.299 145.354 mo
290.118 145.803 289.943 146.104 289.775 146.243 cv
289.607 146.384 289.383 146.454 289.103 146.454 cv
288.599 146.454 li
288.599 145.929 li
288.97 145.929 li
289.138 145.929 289.271 145.887 289.369 145.803 cv
289.466 145.719 289.572 145.53 289.691 145.222 cv
289.803 144.942 li
288.256 141.177 li
288.921 141.177 li
290.118 144.172 li
291.315 141.177 li
291.979 141.177 li
290.299 145.354 li
f
298.257 142.695 mo
298.257 145.005 li
297.627 145.005 li
297.627 142.717 li
297.627 142.353 297.55 142.087 297.41 141.904 cv
297.27 141.723 297.06 141.632 296.781 141.632 cv
296.437 141.632 296.171 141.743 295.975 141.96 cv
295.779 142.178 295.681 142.472 295.681 142.843 cv
295.681 145.005 li
295.051 145.005 li
295.051 141.177 li
295.681 141.177 li
295.681 141.771 li
295.829 141.548 296.003 141.372 296.213 141.261 cv
296.417 141.148 296.654 141.085 296.92 141.085 cv
297.354 141.085 297.69 141.226 297.914 141.499 cv
298.138 141.771 298.257 142.171 298.257 142.695 cv
f
299.447 143.493 mo
299.447 141.177 li
300.077 141.177 li
300.077 143.472 li
300.077 143.836 300.146 144.103 300.287 144.284 cv
300.426 144.466 300.636 144.557 300.923 144.557 cv
301.259 144.557 301.532 144.452 301.728 144.235 cv
301.924 144.019 302.022 143.724 302.022 143.347 cv
302.022 141.177 li
302.652 141.177 li
302.652 145.005 li
302.022 145.005 li
302.022 144.417 li
301.869 144.655 301.686 144.823 301.49 144.935 cv
301.287 145.04 301.056 145.096 300.791 145.096 cv
300.349 145.096 300.013 144.963 299.79 144.69 cv
299.558 144.424 299.447 144.024 299.447 143.493 cv
f
306.927 141.911 mo
307.082 141.632 307.271 141.429 307.488 141.288 cv
307.705 141.155 307.963 141.086 308.264 141.086 cv
308.657 141.086 308.964 141.226 309.181 141.505 cv
309.398 141.786 309.51 142.185 309.51 142.695 cv
309.51 145.005 li
308.88 145.005 li
308.88 142.716 li
308.88 142.353 308.81 142.079 308.684 141.897 cv
308.552 141.723 308.355 141.632 308.089 141.632 cv
307.76 141.632 307.501 141.743 307.313 141.961 cv
307.124 142.178 307.033 142.472 307.033 142.843 cv
307.033 145.005 li
306.403 145.005 li
306.403 142.716 li
306.403 142.353 306.333 142.079 306.207 141.897 cv
306.074 141.723 305.871 141.632 305.605 141.632 cv
305.284 141.632 305.024 141.743 304.835 141.961 cv
304.646 142.178 304.555 142.472 304.555 142.843 cv
304.555 145.005 li
303.925 145.005 li
303.925 141.177 li
304.555 141.177 li
304.555 141.771 li
304.696 141.54 304.871 141.366 305.074 141.254 cv
305.269 141.142 305.507 141.086 305.787 141.086 cv
306.067 141.086 306.298 141.155 306.494 141.296 cv
306.69 141.436 306.83 141.646 306.927 141.911 cv
f
313.513 143.095 mo
313.513 142.632 313.416 142.275 313.226 142.009 cv
313.031 141.743 312.772 141.61 312.443 141.61 cv
312.107 141.61 311.847 141.743 311.659 142.009 cv
311.463 142.275 311.372 142.632 311.372 143.095 cv
311.372 143.556 311.463 143.92 311.659 144.187 cv
311.847 144.452 312.107 144.577 312.443 144.577 cv
312.772 144.577 313.031 144.452 313.226 144.187 cv
313.416 143.92 313.513 143.556 313.513 143.095 cv
311.372 141.758 mo
311.498 141.534 311.666 141.366 311.869 141.254 cv
312.072 141.142 312.317 141.085 312.596 141.085 cv
313.058 141.085 313.436 141.274 313.731 141.639 cv
314.017 142.009 314.165 142.492 314.165 143.095 cv
314.165 143.696 314.017 144.187 313.731 144.55 cv
313.436 144.914 313.058 145.096 312.596 145.096 cv
312.317 145.096 312.072 145.04 311.869 144.935 cv
311.666 144.83 311.498 144.662 311.372 144.431 cv
311.372 145.005 li
310.742 145.005 li
310.742 139.687 li
311.372 139.687 li
311.372 141.758 li
f
318.482 142.933 mo
318.482 143.241 li
315.592 143.241 li
315.621 143.675 315.746 144.011 315.984 144.235 cv
316.214 144.459 316.537 144.571 316.957 144.571 cv
317.195 144.571 317.432 144.543 317.657 144.487 cv
317.88 144.431 318.111 144.34 318.335 144.214 cv
318.335 144.81 li
318.111 144.907 317.88 144.983 317.642 145.026 cv
317.405 145.067 317.16 145.096 316.921 145.096 cv
316.305 145.096 315.823 144.921 315.465 144.571 cv
315.109 144.221 314.934 143.738 314.934 143.13 cv
314.934 142.507 315.102 142.01 315.438 141.639 cv
315.774 141.274 316.236 141.085 316.809 141.085 cv
317.328 141.085 317.733 141.253 318.035 141.583 cv
318.329 141.919 318.482 142.366 318.482 142.933 cv
317.852 142.751 mo
317.845 142.408 317.748 142.136 317.566 141.926 cv
317.376 141.723 317.125 141.618 316.817 141.618 cv
316.466 141.618 316.187 141.723 315.976 141.919 cv
315.767 142.114 315.641 142.395 315.613 142.751 cv
317.852 142.751 li
f
321.73 141.765 mo
321.66 141.723 321.583 141.694 321.499 141.673 cv
321.415 141.659 321.324 141.646 321.226 141.646 cv
320.869 141.646 320.596 141.765 320.407 141.995 cv
320.21 142.226 320.12 142.556 320.12 142.989 cv
320.12 145.005 li
319.49 145.005 li
319.49 141.177 li
320.12 141.177 li
320.12 141.771 li
320.246 141.541 320.42 141.366 320.63 141.253 cv
320.84 141.142 321.1 141.085 321.408 141.085 cv
321.45 141.085 321.499 141.093 321.554 141.093 cv
321.603 141.1 321.66 141.106 321.73 141.121 cv
321.73 141.765 li
f
224.735 131.22 mo
226.084 131.22 li
f
224.735 131.22 mo
226.084 131.22 li
@
375.395 131.22 mo
374.045 131.22 li
f
375.395 131.22 mo
374.045 131.22 li
@
216.59 133.221 mo
217.717 133.221 li
217.717 129.329 li
216.493 129.574 li
216.493 128.944 li
217.71 128.699 li
218.403 128.699 li
218.403 133.221 li
219.53 133.221 li
219.53 133.802 li
216.59 133.802 li
216.59 133.221 li
cp
f
222.399 131.38 mo
222.07 131.38 221.811 131.471 221.623 131.646 cv
221.433 131.821 221.342 132.06 221.342 132.366 cv
221.342 132.675 221.433 132.92 221.623 133.095 cv
221.811 133.27 222.07 133.354 222.399 133.354 cv
222.721 133.354 222.98 133.27 223.169 133.087 cv
223.358 132.913 223.456 132.675 223.456 132.366 cv
223.456 132.06 223.358 131.821 223.176 131.646 cv
222.987 131.471 222.728 131.38 222.399 131.38 cv
221.707 131.086 mo
221.413 131.017 221.181 130.876 221.013 130.673 cv
220.845 130.47 220.768 130.226 220.768 129.931 cv
220.768 129.525 220.909 129.204 221.203 128.966 cv
221.489 128.728 221.888 128.608 222.399 128.608 cv
222.903 128.608 223.302 128.728 223.596 128.966 cv
223.882 129.204 224.03 129.525 224.03 129.931 cv
224.03 130.226 223.946 130.47 223.778 130.673 cv
223.61 130.876 223.386 131.017 223.092 131.086 cv
223.42 131.163 223.679 131.317 223.869 131.541 cv
224.051 131.765 224.149 132.045 224.149 132.366 cv
224.149 132.863 223.995 133.241 223.694 133.501 cv
223.386 133.767 222.959 133.892 222.399 133.892 cv
221.833 133.892 221.398 133.767 221.097 133.501 cv
220.796 133.241 220.65 132.863 220.65 132.366 cv
220.65 132.045 220.741 131.765 220.929 131.541 cv
221.112 131.317 221.371 131.163 221.707 131.086 cv
221.455 129.994 mo
221.455 130.261 221.532 130.47 221.699 130.617 cv
221.867 130.765 222.098 130.834 222.399 130.834 cv
222.693 130.834 222.924 130.765 223.092 130.617 cv
223.259 130.47 223.343 130.261 223.343 129.994 cv
223.343 129.728 223.259 129.525 223.092 129.378 cv
222.924 129.231 222.693 129.154 222.399 129.154 cv
222.098 129.154 221.867 129.231 221.699 129.378 cv
221.532 129.525 221.455 129.728 221.455 129.994 cv
f
224.735 107.892 mo
226.084 107.892 li
f
224.735 107.892 mo
226.084 107.892 li
@
375.395 107.892 mo
374.045 107.892 li
f
375.395 107.892 mo
374.045 107.892 li
@
216.792 109.893 mo
219.2 109.893 li
219.2 110.474 li
215.959 110.474 li
215.959 109.893 li
216.218 109.626 216.575 109.263 217.03 108.801 cv
217.478 108.346 217.765 108.052 217.884 107.919 cv
218.108 107.675 218.261 107.464 218.345 107.289 cv
218.429 107.121 218.479 106.946 218.479 106.778 cv
218.479 106.513 218.38 106.288 218.192 106.12 cv
218.002 105.952 217.757 105.861 217.45 105.861 cv
217.233 105.861 217.002 105.903 216.764 105.974 cv
216.526 106.05 216.267 106.162 215.995 106.316 cv
215.995 105.616 li
216.274 105.504 216.533 105.421 216.771 105.365 cv
217.009 105.309 217.233 105.281 217.436 105.281 cv
217.96 105.281 218.38 105.414 218.696 105.68 cv
219.01 105.945 219.171 106.296 219.171 106.736 cv
219.171 106.946 219.129 107.149 219.052 107.331 cv
218.976 107.521 218.835 107.744 218.625 107.996 cv
218.57 108.065 218.388 108.255 218.08 108.569 cv
217.772 108.885 217.345 109.325 216.792 109.893 cv
f
222.125 105.826 mo
221.768 105.826 221.501 106.001 221.32 106.352 cv
221.138 106.701 221.054 107.226 221.054 107.926 cv
221.054 108.626 221.138 109.151 221.32 109.501 cv
221.501 109.851 221.768 110.025 222.125 110.025 cv
222.482 110.025 222.748 109.851 222.93 109.501 cv
223.105 109.151 223.196 108.626 223.196 107.926 cv
223.196 107.226 223.105 106.701 222.93 106.352 cv
222.748 106.001 222.482 105.826 222.125 105.826 cv
222.125 105.281 mo
222.692 105.281 223.125 105.512 223.433 105.96 cv
223.735 106.415 223.888 107.072 223.888 107.926 cv
223.888 108.786 223.735 109.444 223.433 109.893 cv
223.125 110.341 222.692 110.564 222.125 110.564 cv
221.551 110.564 221.11 110.341 220.809 109.893 cv
220.508 109.444 220.361 108.786 220.361 107.926 cv
220.361 107.072 220.508 106.415 220.809 105.96 cv
221.11 105.512 221.551 105.281 222.125 105.281 cv
f
224.735 84.564 mo
226.084 84.564 li
f
224.735 84.564 mo
226.084 84.564 li
@
375.395 84.564 mo
374.045 84.564 li
f
375.395 84.564 mo
374.045 84.564 li
@
217.03 86.6147 mo
219.437 86.6147 li
219.437 87.1953 li
216.197 87.1953 li
216.197 86.6147 li
216.456 86.3486 216.812 85.9849 217.267 85.5229 cv
217.715 85.0679 218.002 84.7744 218.122 84.6406 cv
218.345 84.3965 218.499 84.1865 218.583 84.0112 cv
218.667 83.8433 218.716 83.6685 218.716 83.5 cv
218.716 83.2344 218.618 83.0103 218.429 82.8423 cv
218.24 82.6743 217.995 82.5835 217.687 82.5835 cv
217.47 82.5835 217.24 82.6255 217.001 82.6953 cv
216.763 82.7725 216.504 82.8848 216.232 83.0386 cv
216.232 82.3384 li
216.511 82.2266 216.77 82.1426 217.008 82.0869 cv
217.247 82.0308 217.47 82.0029 217.673 82.0029 cv
218.198 82.0029 218.618 82.1357 218.933 82.4014 cv
219.248 82.6675 219.409 83.0176 219.409 83.4585 cv
219.409 83.6685 219.367 83.8711 219.29 84.0532 cv
219.213 84.2422 219.073 84.4658 218.863 84.7183 cv
218.807 84.7881 218.625 84.9766 218.317 85.292 cv
218.009 85.6069 217.583 86.0479 217.03 86.6147 cv
f
221.48 86.6147 mo
223.888 86.6147 li
223.888 87.1953 li
220.647 87.1953 li
220.647 86.6147 li
220.907 86.3486 221.263 85.9849 221.718 85.5229 cv
222.167 85.0679 222.453 84.7744 222.572 84.6406 cv
222.796 84.3965 222.95 84.1865 223.035 84.0112 cv
223.118 83.8433 223.167 83.6685 223.167 83.5 cv
223.167 83.2344 223.069 83.0103 222.88 82.8423 cv
222.691 82.6743 222.447 82.5835 222.138 82.5835 cv
221.921 82.5835 221.69 82.6255 221.453 82.6953 cv
221.214 82.7725 220.956 82.8848 220.682 83.0386 cv
220.682 82.3384 li
220.962 82.2266 221.221 82.1426 221.459 82.0869 cv
221.698 82.0308 221.921 82.0029 222.125 82.0029 cv
222.649 82.0029 223.069 82.1357 223.384 82.4014 cv
223.699 82.6675 223.86 83.0176 223.86 83.4585 cv
223.86 83.6685 223.818 83.8711 223.741 84.0532 cv
223.664 84.2422 223.524 84.4658 223.314 84.7183 cv
223.258 84.7881 223.076 84.9766 222.768 85.292 cv
222.46 85.6069 222.033 86.0479 221.48 86.6147 cv
f
224.735 61.2358 mo
226.084 61.2358 li
f
224.735 61.2358 mo
226.084 61.2358 li
@
375.395 61.2358 mo
374.045 61.2358 li
f
375.395 61.2358 mo
374.045 61.2358 li
@
216.723 63.2866 mo
219.131 63.2866 li
219.131 63.8672 li
215.89 63.8672 li
215.89 63.2866 li
216.15 63.0205 216.506 62.6567 216.961 62.1948 cv
217.41 61.7397 217.696 61.4458 217.815 61.313 cv
218.04 61.0684 218.193 60.8584 218.277 60.6831 cv
218.361 60.5156 218.41 60.3403 218.41 60.1719 cv
218.41 59.9063 218.312 59.6826 218.124 59.5142 cv
217.934 59.3467 217.689 59.2554 217.381 59.2554 cv
217.165 59.2554 216.933 59.2979 216.696 59.3677 cv
216.458 59.4443 216.199 59.5566 215.925 59.7104 cv
215.925 59.0107 li
216.206 58.8989 216.464 58.8145 216.703 58.7588 cv
216.941 58.7026 217.165 58.6748 217.368 58.6748 cv
217.892 58.6748 218.312 58.8076 218.627 59.0737 cv
218.942 59.3394 219.103 59.6895 219.103 60.1304 cv
219.103 60.3403 219.061 60.5435 218.984 60.7251 cv
218.907 60.9141 218.767 61.1382 218.557 61.3901 cv
218.501 61.46 218.319 61.6489 218.011 61.9639 cv
217.704 62.2788 217.277 62.7197 216.723 63.2866 cv
f
222.476 59.3677 mo
220.734 62.0898 li
222.476 62.0898 li
222.476 59.3677 li
222.294 58.7656 mo
223.162 58.7656 li
223.162 62.0898 li
223.89 62.0898 li
223.89 62.6641 li
223.162 62.6641 li
223.162 63.8677 li
222.476 63.8677 li
222.476 62.6641 li
220.173 62.6641 li
220.173 61.9985 li
222.294 58.7656 li
cp
f
224.735 37.9082 mo
226.084 37.9082 li
f
224.735 37.9082 mo
226.084 37.9082 li
@
375.395 37.9082 mo
374.045 37.9082 li
f
375.395 37.9082 mo
374.045 37.9082 li
@
216.771 39.9087 mo
219.178 39.9087 li
219.178 40.4893 li
215.938 40.4893 li
215.938 39.9087 li
216.197 39.6426 216.554 39.2783 217.009 38.8169 cv
217.457 38.3618 217.744 38.0679 217.863 37.9351 cv
218.086 37.6899 218.241 37.48 218.325 37.3052 cv
218.409 37.1372 218.458 36.9624 218.458 36.7939 cv
218.458 36.5283 218.36 36.3047 218.17 36.1362 cv
217.982 35.9688 217.737 35.8774 217.429 35.8774 cv
217.211 35.8774 216.981 35.9194 216.743 35.9897 cv
216.505 36.0664 216.247 36.1787 215.973 36.3325 cv
215.973 35.6323 li
216.253 35.5205 216.512 35.4365 216.75 35.3804 cv
216.988 35.3242 217.211 35.2969 217.415 35.2969 cv
217.94 35.2969 218.36 35.4297 218.674 35.6958 cv
218.99 35.9614 219.15 36.311 219.15 36.7524 cv
219.15 36.9624 219.109 37.165 219.032 37.3472 cv
218.955 37.5361 218.815 37.7603 218.605 38.0117 cv
218.548 38.082 218.367 38.2705 218.058 38.5859 cv
217.75 38.9009 217.324 39.3418 216.771 39.9087 cv
f
222.188 37.6621 mo
221.879 37.6621 221.635 37.7744 221.453 37.9839 cv
221.271 38.1938 221.18 38.4878 221.18 38.8516 cv
221.18 39.2227 221.271 39.5166 221.453 39.7266 cv
221.635 39.9365 221.879 40.0415 222.188 40.0415 cv
222.496 40.0415 222.741 39.9365 222.922 39.7266 cv
223.105 39.5166 223.196 39.2227 223.196 38.8516 cv
223.196 38.4878 223.105 38.1938 222.922 37.9839 cv
222.741 37.7744 222.496 37.6621 222.188 37.6621 cv
223.559 35.4995 mo
223.559 36.1294 li
223.384 36.0454 223.209 35.9824 223.035 35.9404 cv
222.853 35.8984 222.677 35.8774 222.51 35.8774 cv
222.047 35.8774 221.698 36.0313 221.459 36.3394 cv
221.222 36.6475 221.083 37.1162 221.054 37.7319 cv
221.187 37.5361 221.355 37.3818 221.558 37.2769 cv
221.761 37.1719 221.985 37.1162 222.23 37.1162 cv
222.741 37.1162 223.147 37.2769 223.44 37.585 cv
223.735 37.8931 223.888 38.3198 223.888 38.8516 cv
223.888 39.3765 223.727 39.7964 223.419 40.1113 cv
223.112 40.4263 222.699 40.5801 222.188 40.5801 cv
221.6 40.5801 221.145 40.3564 220.837 39.9087 cv
220.522 39.4604 220.368 38.8027 220.368 37.9419 cv
220.368 37.1372 220.557 36.4932 220.942 36.0176 cv
221.32 35.5415 221.837 35.2964 222.482 35.2964 cv
222.65 35.2964 222.825 35.3174 223.006 35.3457 cv
223.181 35.3809 223.364 35.4297 223.559 35.4995 cv
f
224.735 14.5801 mo
226.084 14.5801 li
f
224.735 14.5801 mo
226.084 14.5801 li
@
375.395 14.5801 mo
374.045 14.5801 li
f
375.395 14.5801 mo
374.045 14.5801 li
@
216.808 16.5806 mo
219.215 16.5806 li
219.215 17.1611 li
215.975 17.1611 li
215.975 16.5806 li
216.234 16.3145 216.591 15.9507 217.045 15.4888 cv
217.494 15.0337 217.781 14.7397 217.9 14.6069 cv
218.124 14.3623 218.278 14.1523 218.362 13.9771 cv
218.446 13.8096 218.495 13.6343 218.495 13.4658 cv
218.495 13.2002 218.397 12.9766 218.208 12.8086 cv
218.019 12.6406 217.774 12.5493 217.465 12.5493 cv
217.249 12.5493 217.018 12.5913 216.78 12.6616 cv
216.542 12.7383 216.283 12.8506 216.01 13.0044 cv
216.01 12.3047 li
216.29 12.1929 216.548 12.1084 216.787 12.0522 cv
217.025 11.9966 217.249 11.9688 217.452 11.9688 cv
217.977 11.9688 218.397 12.1016 218.711 12.3677 cv
219.026 12.6333 219.187 12.9834 219.187 13.4243 cv
219.187 13.6343 219.145 13.8374 219.069 14.0195 cv
218.992 14.208 218.851 14.4321 218.641 14.6836 cv
218.585 14.7539 218.404 14.9429 218.095 15.2578 cv
217.788 15.5728 217.361 16.0137 216.808 16.5806 cv
f
222.141 14.7402 mo
221.812 14.7402 221.553 14.8311 221.364 15.0059 cv
221.174 15.1807 221.083 15.4189 221.083 15.7266 cv
221.083 16.0347 221.174 16.2798 221.364 16.4546 cv
221.553 16.6299 221.812 16.7139 222.141 16.7139 cv
222.462 16.7139 222.721 16.6299 222.911 16.4478 cv
223.099 16.2725 223.198 16.0347 223.198 15.7266 cv
223.198 15.4189 223.099 15.1807 222.917 15.0059 cv
222.729 14.8311 222.47 14.7402 222.141 14.7402 cv
221.448 14.4458 mo
221.154 14.376 220.923 14.2363 220.755 14.0332 cv
220.586 13.8301 220.51 13.5854 220.51 13.2915 cv
220.51 12.8853 220.65 12.5635 220.944 12.3257 cv
221.231 12.0874 221.629 11.9688 222.141 11.9688 cv
222.645 11.9688 223.043 12.0874 223.337 12.3257 cv
223.625 12.5635 223.772 12.8853 223.772 13.2915 cv
223.772 13.5854 223.687 13.8301 223.519 14.0332 cv
223.351 14.2363 223.127 14.376 222.833 14.4458 cv
223.163 14.5229 223.421 14.6768 223.61 14.9009 cv
223.792 15.125 223.89 15.4048 223.89 15.7266 cv
223.89 16.2236 223.737 16.6016 223.435 16.8604 cv
223.127 17.1265 222.701 17.2524 222.141 17.2524 cv
221.574 17.2524 221.14 17.1265 220.839 16.8604 cv
220.538 16.6016 220.391 16.2236 220.391 15.7266 cv
220.391 15.4048 220.482 15.125 220.671 14.9009 cv
220.853 14.6768 221.112 14.5229 221.448 14.4458 cv
221.196 13.354 mo
221.196 13.6201 221.273 13.8301 221.441 13.9771 cv
221.609 14.124 221.839 14.1943 222.141 14.1943 cv
222.435 14.1943 222.666 14.124 222.833 13.9771 cv
223.001 13.8301 223.085 13.6201 223.085 13.354 cv
223.085 13.0884 223.001 12.8853 222.833 12.7383 cv
222.666 12.5913 222.435 12.5146 222.141 12.5146 cv
221.839 12.5146 221.609 12.5913 221.441 12.7383 cv
221.273 12.8853 221.196 13.0884 221.196 13.354 cv
f
207.114 125.743 mo
207.114 121.433 li
207.695 121.433 li
207.695 123.245 li
212.216 123.245 li
212.216 123.938 li
207.695 123.938 li
207.695 125.743 li
207.114 125.743 li
cp
f
210.144 117.521 mo
210.452 117.521 li
210.452 120.411 li
210.886 120.383 211.222 120.257 211.446 120.019 cv
211.67 119.788 211.782 119.466 211.782 119.046 cv
211.782 118.808 211.753 118.569 211.698 118.347 cv
211.642 118.122 211.551 117.892 211.424 117.667 cv
212.02 117.667 li
212.118 117.892 212.195 118.122 212.237 118.36 cv
212.279 118.598 212.307 118.843 212.307 119.081 cv
212.307 119.696 212.132 120.18 211.782 120.536 cv
211.432 120.894 210.949 121.069 210.34 121.069 cv
209.717 121.069 209.22 120.9 208.85 120.565 cv
208.486 120.229 208.296 119.767 208.296 119.192 cv
208.296 118.675 208.464 118.269 208.793 117.968 cv
209.129 117.675 209.578 117.521 210.144 117.521 cv
209.962 118.149 mo
209.62 118.157 209.346 118.255 209.136 118.438 cv
208.934 118.626 208.829 118.878 208.829 119.187 cv
208.829 119.536 208.934 119.815 209.129 120.026 cv
209.326 120.235 209.605 120.362 209.962 120.39 cv
209.962 118.149 li
f
209.123 113.511 mo
208.842 113.356 208.639 113.167 208.5 112.95 cv
208.367 112.733 208.296 112.475 208.296 112.173 cv
208.296 111.781 208.437 111.474 208.716 111.257 cv
208.997 111.04 209.395 110.928 209.907 110.928 cv
212.216 110.928 li
212.216 111.558 li
209.927 111.558 li
209.564 111.558 209.291 111.628 209.109 111.753 cv
208.933 111.886 208.842 112.083 208.842 112.349 cv
208.842 112.677 208.955 112.937 209.171 113.125 cv
209.388 113.314 209.682 113.405 210.053 113.405 cv
212.216 113.405 li
212.216 114.035 li
209.927 114.035 li
209.564 114.035 209.291 114.104 209.109 114.231 cv
208.933 114.364 208.842 114.567 208.842 114.833 cv
208.842 115.155 208.955 115.414 209.171 115.603 cv
209.388 115.792 209.682 115.882 210.053 115.882 cv
212.216 115.882 li
212.216 116.513 li
208.387 116.513 li
208.387 115.882 li
208.982 115.882 li
208.751 115.743 208.577 115.567 208.464 115.364 cv
208.353 115.169 208.296 114.931 208.296 114.651 cv
208.296 114.371 208.367 114.14 208.506 113.944 cv
208.647 113.748 208.857 113.608 209.123 113.511 cv
f
211.642 109.066 mo
213.665 109.066 li
213.665 109.696 li
208.387 109.696 li
208.387 109.066 li
208.968 109.066 li
208.745 108.94 208.577 108.772 208.464 108.569 cv
208.353 108.366 208.296 108.121 208.296 107.841 cv
208.296 107.38 208.486 107.002 208.849 106.708 cv
209.22 106.421 209.704 106.274 210.305 106.274 cv
210.908 106.274 211.397 106.421 211.761 106.708 cv
212.125 107.002 212.307 107.38 212.307 107.841 cv
212.307 108.121 212.25 108.366 212.146 108.569 cv
212.041 108.772 211.873 108.94 211.642 109.066 cv
210.305 106.925 mo
209.843 106.925 209.487 107.022 209.22 107.212 cv
208.955 107.407 208.822 107.667 208.822 107.995 cv
208.822 108.331 208.955 108.591 209.22 108.779 cv
209.487 108.976 209.843 109.066 210.305 109.066 cv
210.767 109.066 211.131 108.976 211.397 108.779 cv
211.663 108.591 211.789 108.331 211.789 107.995 cv
211.789 107.667 211.663 107.407 211.397 107.212 cv
211.131 107.022 210.767 106.925 210.305 106.925 cv
f
210.144 101.956 mo
210.452 101.956 li
210.452 104.846 li
210.886 104.818 211.222 104.692 211.446 104.454 cv
211.67 104.224 211.782 103.901 211.782 103.481 cv
211.782 103.243 211.753 103.005 211.698 102.782 cv
211.642 102.558 211.551 102.327 211.424 102.103 cv
212.02 102.103 li
212.118 102.327 212.195 102.558 212.237 102.795 cv
212.279 103.033 212.307 103.279 212.307 103.517 cv
212.307 104.132 212.132 104.615 211.782 104.972 cv
211.432 105.329 210.949 105.504 210.34 105.504 cv
209.717 105.504 209.22 105.336 208.85 105 cv
208.486 104.664 208.296 104.202 208.296 103.628 cv
208.296 103.11 208.464 102.705 208.793 102.403 cv
209.129 102.11 209.578 101.956 210.144 101.956 cv
209.962 102.585 mo
209.62 102.593 209.346 102.691 209.136 102.873 cv
208.934 103.062 208.829 103.313 208.829 103.622 cv
208.829 103.972 208.934 104.251 209.129 104.461 cv
209.326 104.671 209.605 104.797 209.962 104.825 cv
209.962 102.585 li
f
208.976 98.7085 mo
208.933 98.7783 208.906 98.8555 208.884 98.9399 cv
208.871 99.0234 208.857 99.1143 208.857 99.2124 cv
208.857 99.5693 208.976 99.8423 209.207 100.031 cv
209.437 100.228 209.766 100.318 210.2 100.318 cv
212.216 100.318 li
212.216 100.948 li
208.387 100.948 li
208.387 100.318 li
208.983 100.318 li
208.751 100.192 208.577 100.018 208.464 99.8076 cv
208.353 99.5977 208.296 99.3384 208.296 99.0303 cv
208.296 98.9883 208.303 98.9399 208.303 98.8838 cv
208.311 98.8345 208.318 98.7783 208.332 98.7085 cv
208.976 98.7085 li
f
210.292 96.3081 mo
210.292 96.8193 210.354 97.1689 210.466 97.3647 cv
210.585 97.561 210.781 97.6587 211.061 97.6587 cv
211.285 97.6587 211.467 97.5889 211.593 97.4419 cv
211.726 97.2949 211.789 97.0918 211.789 96.8398 cv
211.789 96.4902 211.669 96.2104 211.418 96.0005 cv
211.173 95.7905 210.844 95.6851 210.431 95.6851 cv
210.292 95.6851 li
210.292 96.3081 li
210.033 95.0552 mo
212.216 95.0552 li
212.216 95.6851 li
211.634 95.6851 li
211.873 95.832 212.041 96.0142 212.146 96.2241 cv
212.25 96.4341 212.307 96.7002 212.307 97.0078 cv
212.307 97.3994 212.202 97.7148 211.985 97.9463 cv
211.768 98.1768 211.474 98.2886 211.103 98.2886 cv
210.676 98.2886 210.354 98.1484 210.13 97.8545 cv
209.914 97.5679 209.801 97.1411 209.801 96.5669 cv
209.801 95.6851 li
209.738 95.6851 li
209.452 95.6851 209.227 95.7832 209.067 95.9722 cv
208.913 96.1611 208.829 96.4272 208.829 96.77 cv
208.829 96.9941 208.857 97.2041 208.913 97.4141 cv
208.968 97.624 209.045 97.8198 209.144 98.0088 cv
208.562 98.0088 li
208.478 97.7847 208.409 97.561 208.367 97.3438 cv
208.325 97.127 208.296 96.917 208.296 96.707 cv
208.296 96.1543 208.444 95.7412 208.731 95.4688 cv
209.017 95.1953 209.452 95.0552 210.033 95.0552 cv
f
207.303 93.1377 mo
208.387 93.1377 li
208.387 91.8433 li
208.877 91.8433 li
208.877 93.1377 li
210.956 93.1377 li
211.271 93.1377 211.474 93.0957 211.558 93.0117 cv
211.649 92.9277 211.691 92.7529 211.691 92.4868 cv
211.691 91.8433 li
212.216 91.8433 li
212.216 92.4868 li
212.216 92.9766 212.125 93.313 211.943 93.4951 cv
211.761 93.6768 211.432 93.7676 210.956 93.7676 cv
208.877 93.7676 li
208.877 94.2295 li
208.387 94.2295 li
208.387 93.7676 li
207.303 93.7676 li
207.303 93.1377 li
f
210.705 91.0801 mo
208.387 91.0801 li
208.387 90.4502 li
210.683 90.4502 li
211.047 90.4502 211.313 90.3809 211.495 90.2407 cv
211.677 90.1006 211.768 89.8906 211.768 89.6035 cv
211.768 89.2681 211.663 88.9946 211.446 88.7988 cv
211.229 88.6025 210.935 88.5049 210.557 88.5049 cv
208.387 88.5049 li
208.387 87.875 li
212.215 87.875 li
212.215 88.5049 li
211.627 88.5049 li
211.866 88.6587 212.034 88.8408 212.146 89.0366 cv
212.25 89.2397 212.307 89.4702 212.307 89.7368 cv
212.307 90.1772 212.173 90.5132 211.901 90.7373 cv
211.635 90.9683 211.236 91.0801 210.705 91.0801 cv
f
208.976 84.3618 mo
208.933 84.4316 208.906 84.5088 208.884 84.5928 cv
208.871 84.6768 208.857 84.7676 208.857 84.8657 cv
208.857 85.2227 208.976 85.4956 209.207 85.6846 cv
209.437 85.8809 209.766 85.9717 210.2 85.9717 cv
212.216 85.9717 li
212.216 86.6016 li
208.387 86.6016 li
208.387 85.9717 li
208.983 85.9717 li
208.751 85.8457 208.577 85.6704 208.464 85.4609 cv
208.353 85.2505 208.296 84.9917 208.296 84.6836 cv
208.296 84.6416 208.303 84.5928 208.303 84.5371 cv
208.311 84.4878 208.318 84.4316 208.332 84.3618 cv
208.976 84.3618 li
f
210.144 80.4287 mo
210.452 80.4287 li
210.452 83.3188 li
210.886 83.291 211.222 83.165 211.446 82.9272 cv
211.67 82.6963 211.782 82.3745 211.782 81.9546 cv
211.782 81.7163 211.753 81.4785 211.698 81.2544 cv
211.642 81.0308 211.551 80.7998 211.424 80.5757 cv
212.02 80.5757 li
212.118 80.7998 212.195 81.0308 212.237 81.2686 cv
212.279 81.5063 212.307 81.7515 212.307 81.9893 cv
212.307 82.605 212.132 83.0879 211.782 83.4453 cv
211.432 83.8018 210.949 83.9771 210.34 83.9771 cv
209.717 83.9771 209.22 83.8091 208.85 83.4731 cv
208.486 83.1367 208.296 82.6753 208.296 82.1011 cv
208.296 81.5835 208.464 81.1777 208.793 80.877 cv
209.129 80.583 209.578 80.4287 210.144 80.4287 cv
209.962 81.0586 mo
209.62 81.0659 209.346 81.1636 209.136 81.3457 cv
208.934 81.5347 208.829 81.7861 208.829 82.0942 cv
208.829 82.4443 208.934 82.7241 209.129 82.9341 cv
209.326 83.144 209.605 83.27 209.962 83.2979 cv
209.962 81.0586 li
f
206.904 75.6626 mo
207.436 75.9707 207.954 76.1943 208.465 76.3418 cv
208.975 76.4956 209.494 76.5659 210.018 76.5659 cv
210.55 76.5659 211.068 76.4956 211.579 76.3418 cv
212.097 76.1943 212.608 75.9707 213.132 75.6626 cv
213.132 76.209 li
212.593 76.5518 212.076 76.8105 211.558 76.978 cv
211.04 77.1465 210.529 77.2305 210.018 77.2305 cv
209.514 77.2305 209.003 77.1465 208.486 76.978 cv
207.967 76.8105 207.443 76.5586 206.904 76.209 cv
206.904 75.6626 li
f
208.968 71.9258 mo
206.897 71.9258 li
206.897 71.2959 li
212.216 71.2959 li
212.216 71.9258 li
211.642 71.9258 li
211.873 72.0586 212.041 72.2266 212.146 72.4297 cv
212.25 72.6328 212.307 72.8706 212.307 73.1504 cv
212.307 73.6123 212.125 73.9902 211.761 74.2842 cv
211.397 74.5781 210.907 74.7183 210.305 74.7183 cv
209.704 74.7183 209.22 74.5781 208.849 74.2842 cv
208.486 73.9902 208.296 73.6123 208.296 73.1504 cv
208.296 72.8706 208.353 72.6328 208.464 72.4297 cv
208.577 72.2266 208.745 72.0586 208.968 71.9258 cv
210.305 74.0669 mo
210.767 74.0669 211.131 73.9761 211.397 73.7871 cv
211.663 73.5986 211.789 73.3325 211.789 72.9966 cv
211.789 72.6675 211.663 72.4087 211.397 72.2129 cv
211.131 72.0239 210.767 71.9258 210.305 71.9258 cv
209.843 71.9258 209.487 72.0239 209.22 72.2129 cv
208.955 72.4087 208.822 72.6675 208.822 72.9966 cv
208.822 73.3325 208.955 73.5986 209.22 73.7871 cv
209.487 73.9761 209.843 74.0669 210.305 74.0669 cv
f
210.144 66.7256 mo
210.452 66.7256 li
210.452 69.6162 li
210.886 69.5884 211.222 69.4624 211.446 69.2246 cv
211.67 68.9937 211.782 68.6714 211.782 68.252 cv
211.782 68.0137 211.753 67.7759 211.698 67.5518 cv
211.642 67.3281 211.551 67.0967 211.424 66.873 cv
212.02 66.873 li
212.118 67.0967 212.195 67.3281 212.237 67.5659 cv
212.279 67.8037 212.307 68.0483 212.307 68.2866 cv
212.307 68.9023 212.132 69.3853 211.782 69.7422 cv
211.432 70.0991 210.949 70.2739 210.34 70.2739 cv
209.717 70.2739 209.22 70.1064 208.85 69.7705 cv
208.486 69.4346 208.296 68.9722 208.296 68.3984 cv
208.296 67.8809 208.464 67.4746 208.793 67.1738 cv
209.129 66.8799 209.578 66.7256 210.144 66.7256 cv
209.962 67.3555 mo
209.62 67.3628 209.346 67.4609 209.136 67.6426 cv
208.934 67.8315 208.829 68.0835 208.829 68.3916 cv
208.829 68.7412 208.934 69.0215 209.129 69.2314 cv
209.326 69.4414 209.605 69.5674 209.962 69.5952 cv
209.962 67.3555 li
f
210.256 63.1777 mo
209.808 63.1777 209.452 63.2759 209.2 63.458 cv
208.948 63.647 208.822 63.9126 208.822 64.2485 cv
208.822 64.5845 208.948 64.8501 209.2 65.0391 cv
209.452 65.2285 209.808 65.3193 210.256 65.3193 cv
210.711 65.3193 211.061 65.2285 211.313 65.0391 cv
211.565 64.8501 211.691 64.5845 211.691 64.2485 cv
211.691 63.9126 211.565 63.647 211.313 63.458 cv
211.061 63.2759 210.711 63.1777 210.256 63.1777 cv
211.74 62.5479 mo
212.384 62.5479 212.867 62.6948 213.188 62.9814 cv
213.503 63.2759 213.665 63.7168 213.665 64.3115 cv
213.665 64.5352 213.643 64.7388 213.616 64.9346 cv
213.581 65.1304 213.532 65.3262 213.461 65.5083 cv
212.853 65.5083 li
212.951 65.3262 213.021 65.1445 213.07 64.9624 cv
213.119 64.7803 213.147 64.5981 213.147 64.4097 cv
213.147 64.0034 213.035 63.6958 212.825 63.4858 cv
212.608 63.2827 212.286 63.1777 211.852 63.1777 cv
211.543 63.1777 li
211.768 63.3105 211.936 63.4785 212.048 63.6816 cv
212.16 63.8843 212.215 64.1221 212.215 64.4023 cv
212.215 64.8784 212.041 65.2563 211.684 65.543 cv
211.327 65.8301 210.851 65.9702 210.256 65.9702 cv
209.668 65.9702 209.193 65.8301 208.835 65.543 cv
208.479 65.2563 208.296 64.8784 208.296 64.4023 cv
208.296 64.1221 208.353 63.8843 208.464 63.6816 cv
208.577 63.4785 208.745 63.3105 208.968 63.1777 cv
208.387 63.1777 li
208.387 62.5479 li
211.74 62.5479 li
f
208.976 59.0347 mo
208.933 59.105 208.906 59.1816 208.884 59.2656 cv
208.871 59.3496 208.857 59.4409 208.857 59.5386 cv
208.857 59.8955 208.976 60.1685 209.207 60.3574 cv
209.437 60.5537 209.766 60.644 210.2 60.644 cv
212.216 60.644 li
212.216 61.2739 li
208.387 61.2739 li
208.387 60.644 li
208.983 60.644 li
208.751 60.5186 208.577 60.3433 208.464 60.1333 cv
208.353 59.9233 208.296 59.6646 208.296 59.3564 cv
208.296 59.3149 208.303 59.2656 208.303 59.21 cv
208.311 59.1606 208.318 59.105 208.332 59.0347 cv
208.976 59.0347 li
f
210.144 55.1016 mo
210.452 55.1016 li
210.452 57.9917 li
210.886 57.9639 211.222 57.8379 211.446 57.6001 cv
211.67 57.3691 211.782 57.0474 211.782 56.6274 cv
211.782 56.3892 211.753 56.1514 211.698 55.9272 cv
211.642 55.7036 211.551 55.4727 211.424 55.2485 cv
212.02 55.2485 li
212.118 55.4727 212.195 55.7036 212.237 55.9414 cv
212.279 56.1792 212.307 56.4243 212.307 56.6626 cv
212.307 57.2783 212.132 57.7612 211.782 58.1182 cv
211.432 58.4746 210.949 58.6494 210.34 58.6494 cv
209.717 58.6494 209.22 58.4819 208.85 58.146 cv
208.486 57.8101 208.296 57.3481 208.296 56.7744 cv
208.296 56.2563 208.464 55.8506 208.793 55.5493 cv
209.129 55.2559 209.578 55.1016 210.144 55.1016 cv
209.962 55.7314 mo
209.62 55.7383 209.346 55.8364 209.136 56.0186 cv
208.934 56.207 208.829 56.4595 208.829 56.7676 cv
208.829 57.1172 208.934 57.3975 209.129 57.6074 cv
209.326 57.8169 209.605 57.9429 209.962 57.9707 cv
209.962 55.7314 li
f
210.144 50.7979 mo
210.452 50.7979 li
210.452 53.688 li
210.886 53.6602 211.222 53.5342 211.446 53.2959 cv
211.67 53.0649 211.782 52.7432 211.782 52.3232 cv
211.782 52.085 211.753 51.8472 211.698 51.6235 cv
211.642 51.3994 211.551 51.1685 211.424 50.9448 cv
212.02 50.9448 li
212.118 51.1685 212.195 51.3994 212.237 51.6372 cv
212.279 51.875 212.307 52.1201 212.307 52.3584 cv
212.307 52.9741 212.132 53.4565 211.782 53.814 cv
211.432 54.1709 210.949 54.3457 210.34 54.3457 cv
209.717 54.3457 209.22 54.1777 208.85 53.8418 cv
208.486 53.5059 208.296 53.0439 208.296 52.4702 cv
208.296 51.9521 208.464 51.5464 208.793 51.2456 cv
209.129 50.9517 209.578 50.7979 210.144 50.7979 cv
209.962 51.4272 mo
209.62 51.4346 209.346 51.5322 209.136 51.7144 cv
208.934 51.9033 208.829 52.1553 208.829 52.4629 cv
208.829 52.813 208.934 53.0928 209.129 53.3027 cv
209.326 53.5127 209.605 53.6392 209.962 53.6665 cv
209.962 51.4272 li
f
208.5 47.3262 mo
209.094 47.3262 li
209.01 47.5083 208.94 47.6904 208.891 47.8789 cv
208.849 48.0752 208.822 48.271 208.822 48.4736 cv
208.822 48.7886 208.871 49.0269 208.968 49.1807 cv
209.067 49.335 209.207 49.4116 209.395 49.4116 cv
209.542 49.4116 209.654 49.3555 209.738 49.2441 cv
209.823 49.1318 209.907 48.9077 209.976 48.5723 cv
210.026 48.355 li
210.124 47.9072 210.263 47.5923 210.431 47.4033 cv
210.606 47.2217 210.851 47.123 211.159 47.123 cv
211.516 47.123 211.796 47.2632 211.999 47.5435 cv
212.208 47.8232 212.306 48.2148 212.306 48.7051 cv
212.306 48.915 212.286 49.125 212.25 49.3491 cv
212.216 49.5728 212.16 49.8037 212.076 50.0488 cv
211.424 50.0488 li
211.551 49.8179 211.642 49.5869 211.698 49.3628 cv
211.761 49.1392 211.789 48.915 211.789 48.6909 cv
211.789 48.397 211.74 48.166 211.642 48.0049 cv
211.543 47.8511 211.397 47.7671 211.208 47.7671 cv
211.04 47.7671 210.907 47.8301 210.816 47.9424 cv
210.725 48.0542 210.634 48.3062 210.55 48.6982 cv
210.501 48.915 li
210.417 49.3066 210.292 49.5938 210.124 49.7617 cv
209.956 49.9365 209.724 50.0205 209.423 50.0205 cv
209.067 50.0205 208.787 49.8945 208.59 49.6426 cv
208.395 49.3906 208.296 49.0269 208.296 48.5508 cv
208.296 48.3198 208.318 48.1035 208.352 47.8936 cv
208.387 47.6904 208.437 47.501 208.5 47.3262 cv
f
208.535 41.1396 mo
209.123 41.1396 li
209.025 41.3218 208.955 41.4971 208.906 41.6787 cv
208.857 41.8608 208.829 42.0356 208.829 42.2173 cv
208.829 42.6235 208.961 42.9453 209.22 43.1694 cv
209.479 43.3931 209.843 43.5054 210.305 43.5054 cv
210.774 43.5054 211.138 43.3931 211.397 43.1694 cv
211.656 42.9453 211.782 42.6235 211.782 42.2173 cv
211.782 42.0356 211.761 41.8608 211.711 41.6787 cv
211.663 41.4971 211.585 41.3218 211.488 41.1396 cv
212.069 41.1396 li
212.153 41.3218 212.215 41.5034 212.25 41.6855 cv
212.286 41.8745 212.307 42.0776 212.307 42.2876 cv
212.307 42.8613 212.131 43.3232 211.768 43.6592 cv
211.411 44.002 210.921 44.1699 210.305 44.1699 cv
209.682 44.1699 209.192 44.002 208.835 43.6592 cv
208.479 43.3164 208.296 42.8477 208.296 42.2456 cv
208.296 42.0498 208.318 41.8608 208.36 41.6787 cv
208.402 41.4971 208.458 41.3149 208.535 41.1396 cv
f
210.144 36.7725 mo
210.452 36.7725 li
210.452 39.6631 li
210.886 39.6353 211.222 39.5093 211.446 39.2715 cv
211.67 39.0405 211.782 38.7183 211.782 38.2988 cv
211.782 38.0605 211.753 37.8223 211.698 37.5986 cv
211.642 37.375 211.551 37.1436 211.424 36.9199 cv
212.02 36.9199 li
212.118 37.1436 212.195 37.375 212.237 37.6123 cv
212.279 37.8506 212.307 38.0952 212.307 38.3335 cv
212.307 38.9492 212.132 39.4321 211.782 39.7891 cv
211.432 40.146 210.949 40.3208 210.34 40.3208 cv
209.717 40.3208 209.22 40.1533 208.85 39.8174 cv
208.486 39.4814 208.296 39.019 208.296 38.4453 cv
208.296 37.9277 208.464 37.5215 208.793 37.2207 cv
209.129 36.9268 209.578 36.7725 210.144 36.7725 cv
209.962 37.4023 mo
209.62 37.4097 209.346 37.5073 209.136 37.6895 cv
208.934 37.8784 208.829 38.1304 208.829 38.4385 cv
208.829 38.7881 208.934 39.0684 209.129 39.2783 cv
209.326 39.4883 209.605 39.6143 209.962 39.6421 cv
209.962 37.4023 li
f
206.897 35.1143 mo
212.215 35.1143 li
212.215 35.7441 li
206.897 35.7441 li
206.897 35.1143 li
cp
f
208.5 31.356 mo
209.094 31.356 li
209.01 31.5381 208.94 31.7202 208.891 31.9087 cv
208.849 32.105 208.822 32.3008 208.822 32.5039 cv
208.822 32.8184 208.871 33.0566 208.968 33.2104 cv
209.067 33.3647 209.207 33.4414 209.395 33.4414 cv
209.542 33.4414 209.654 33.3857 209.738 33.2734 cv
209.823 33.1616 209.907 32.9375 209.976 32.6016 cv
210.026 32.3848 li
210.124 31.9365 210.263 31.6221 210.431 31.4331 cv
210.606 31.251 210.851 31.1533 211.159 31.1533 cv
211.516 31.1533 211.796 31.293 211.999 31.5728 cv
212.208 31.853 212.306 32.2451 212.306 32.7344 cv
212.306 32.9443 212.286 33.1543 212.25 33.3784 cv
212.216 33.6025 212.16 33.8335 212.076 34.0781 cv
211.424 34.0781 li
211.551 33.8472 211.642 33.6162 211.698 33.3926 cv
211.761 33.1685 211.789 32.9443 211.789 32.7207 cv
211.789 32.4268 211.74 32.1953 211.642 32.0352 cv
211.543 31.8809 211.397 31.7969 211.208 31.7969 cv
211.04 31.7969 210.907 31.8599 210.816 31.9717 cv
210.725 32.084 210.634 32.3354 210.55 32.7275 cv
210.501 32.9443 li
210.417 33.3369 210.292 33.6235 210.124 33.791 cv
209.956 33.9663 209.724 34.0503 209.423 34.0503 cv
209.067 34.0503 208.787 33.9243 208.59 33.6724 cv
208.395 33.4204 208.296 33.0566 208.296 32.5806 cv
208.296 32.3496 208.318 32.1328 208.352 31.9229 cv
208.387 31.7202 208.437 31.5313 208.5 31.356 cv
f
208.387 29.5225 mo
212.215 29.5225 li
212.215 30.1523 li
208.387 30.1523 li
208.387 29.5225 li
cp
206.897 29.5225 mo
207.695 29.5225 li
207.695 30.1523 li
206.897 30.1523 li
206.897 29.5225 li
cp
f
210.705 28.2695 mo
208.387 28.2695 li
208.387 27.6396 li
210.683 27.6396 li
211.047 27.6396 211.313 27.5698 211.495 27.4297 cv
211.677 27.29 211.768 27.0801 211.768 26.793 cv
211.768 26.457 211.663 26.1841 211.446 25.9883 cv
211.229 25.7925 210.935 25.6943 210.557 25.6943 cv
208.387 25.6943 li
208.387 25.0645 li
212.215 25.0645 li
212.215 25.6943 li
211.627 25.6943 li
211.866 25.8486 212.034 26.0303 212.146 26.2261 cv
212.25 26.4292 212.307 26.6602 212.307 26.9258 cv
212.307 27.3667 212.173 27.7031 211.901 27.9268 cv
211.635 28.1577 211.236 28.2695 210.705 28.2695 cv
f
208.5 21.3271 mo
209.094 21.3271 li
209.01 21.5093 208.94 21.6914 208.891 21.8799 cv
208.849 22.0762 208.822 22.272 208.822 22.4746 cv
208.822 22.7896 208.871 23.0278 208.968 23.1816 cv
209.067 23.3359 209.207 23.4126 209.395 23.4126 cv
209.542 23.4126 209.654 23.3564 209.738 23.2451 cv
209.823 23.1328 209.907 22.9087 209.976 22.5732 cv
210.026 22.356 li
210.124 21.9082 210.263 21.5933 210.431 21.4043 cv
210.606 21.2222 210.851 21.124 211.159 21.124 cv
211.516 21.124 211.796 21.2642 211.999 21.5444 cv
212.208 21.8242 212.306 22.2158 212.306 22.7061 cv
212.306 22.916 212.286 23.126 212.25 23.3501 cv
212.216 23.5737 212.16 23.8047 212.076 24.0498 cv
211.424 24.0498 li
211.551 23.8188 211.642 23.5879 211.698 23.3638 cv
211.761 23.1401 211.789 22.916 211.789 22.6919 cv
211.789 22.3979 211.74 22.167 211.642 22.0059 cv
211.543 21.8521 211.397 21.7681 211.208 21.7681 cv
211.04 21.7681 210.907 21.8311 210.816 21.9434 cv
210.725 22.0547 210.634 22.3071 210.55 22.6987 cv
210.501 22.916 li
210.417 23.3076 210.292 23.5947 210.124 23.7627 cv
209.956 23.9375 209.724 24.0215 209.423 24.0215 cv
209.067 24.0215 208.787 23.8955 208.59 23.644 cv
208.395 23.3916 208.296 23.0278 208.296 22.5522 cv
208.296 22.3208 208.318 22.1045 208.352 21.8945 cv
208.387 21.6914 208.437 21.502 208.5 21.3271 cv
f
206.904 20.2217 mo
206.904 19.6758 li
207.443 19.3398 207.967 19.0811 208.486 18.9131 cv
209.003 18.7451 209.514 18.6538 210.018 18.6538 cv
210.529 18.6538 211.04 18.7451 211.558 18.9131 cv
212.076 19.0811 212.593 19.3398 213.132 19.6758 cv
213.132 20.2217 li
212.608 19.9204 212.097 19.6968 211.579 19.543 cv
211.068 19.3955 210.55 19.3188 210.018 19.3188 cv
209.494 19.3188 208.975 19.3955 208.465 19.543 cv
207.954 19.6968 207.436 19.9204 206.904 20.2217 cv
f
.3375 lw
2 lc
224.735 14.5801 mo
375.395 14.5801 li
@
375.395 131.22 mo
375.395 14.5801 li
@
224.735 131.22 mo
375.395 131.22 li
@
224.735 131.22 mo
224.735 14.5801 li
@
grestore
grestore
293.957 161.979 mo
293.957 161.947 293.957 161.925 293.77 161.739 cv
292.4 160.358 292.049 158.287 292.049 156.61 cv
292.049 154.704 292.466 152.797 293.814 151.427 cv
293.957 151.296 293.957 151.273 293.957 151.24 cv
293.957 151.163 293.913 151.131 293.847 151.131 cv
293.737 151.131 292.75 151.876 292.104 153.268 cv
291.545 154.474 291.414 155.69 291.414 156.61 cv
291.414 157.465 291.535 158.791 292.137 160.029 cv
292.794 161.378 293.737 162.09 293.847 162.09 cv
293.913 162.09 293.957 162.057 293.957 161.979 cv
cp
f
296.476 155.219 mo
296.476 151.745 li
294.898 151.865 li
294.898 152.205 li
295.665 152.205 295.752 152.282 295.752 152.818 cv
295.752 159.351 li
296.027 159.351 li
296.038 159.339 296.125 159.186 296.421 158.671 cv
296.585 158.919 297.045 159.46 297.857 159.46 cv
299.161 159.46 300.3 158.391 300.3 156.983 cv
300.3 155.591 299.226 154.507 297.977 154.507 cv
297.123 154.507 296.651 155.021 296.476 155.219 cv
cp
296.508 158.101 mo
296.508 155.843 li
296.508 155.635 296.508 155.624 296.629 155.448 cv
297.056 154.835 297.66 154.747 297.922 154.747 cv
298.416 154.747 298.81 155.032 299.073 155.448 cv
299.358 155.897 299.391 156.522 299.391 156.972 cv
299.391 157.378 299.369 158.035 299.051 158.528 cv
298.821 158.868 298.405 159.229 297.813 159.229 cv
297.32 159.229 296.925 158.966 296.662 158.562 cv
296.508 158.331 296.508 158.298 296.508 158.101 cv
cp
f
303.847 156.61 mo
303.847 155.755 303.726 154.43 303.124 153.191 cv
302.466 151.843 301.523 151.131 301.414 151.131 cv
301.348 151.131 301.304 151.175 301.304 151.24 cv
301.304 151.273 301.304 151.296 301.512 151.493 cv
302.586 152.577 303.211 154.319 303.211 156.61 cv
303.211 158.484 302.805 160.413 301.447 161.794 cv
301.304 161.925 301.304 161.947 301.304 161.979 cv
301.304 162.046 301.348 162.09 301.414 162.09 cv
301.523 162.09 302.509 161.345 303.157 159.952 cv
303.715 158.747 303.847 157.53 303.847 156.61 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (001x004.eps)%%CreationDate: 26/05/15 3:12 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q0FMNcT!mC^capqP)oi^?a:?2m*!Mb-R<XD:'_CRrP&7/n[nLWCff:i<#*C#ht5,KVk5</E`o\!bE?\pl1B/bVcg,\hmZhi%>tN2%P#PF3WS(<MQfLOq]j!_%Fo>mWL*XlC0Peg-f$%m/B#"dPf!K9%hC>tjI_KRAhJ&n\<pOo:X[]A?>tGh2Xu)>4Q$7IN8`&#:%NRiTBgPsA1B-No(e"=hV7]kJ2HrYJa=jBVFPa1G!T6d8Yr:BSbl`;@3gIAFD9WGbl6=!D>I]),;k$-lD>!%F1CXp*OGhg7Cjtlg^%?L.9W)*eKdX`/B/+;+rVp>>fH=m`oZm<'nlHE6k/@444>p/e*^$*R"kT-5^VdoP\=MqV7E;<cU:LK$jkl9HipjPO*3BI#%')"9cp%[TQ_LF;i/%=8T%)qp.lT[oTKZ3g<#-:@Gjp5L<qDdj0d!dO/ZlNEYMN=mlB6.Y;KZU8(bsec97KqrL</S[AGIi1IBl7A]T^lTplH%)F)mJQ)*MLJ1`g_r*AVbmNI1GG--&;\ft*+)k*2%F<10i93)]*<t*6MUo\;`6CE>OHEe6e_l;FEXuV3]3pG/Olcg.p\ZG#%%sL)-%.do]&8Qtb=d%@_!s)$qK8gq'Wf;gbHi?2'Q,@1mOmEmp_E:Es<eu[AP@BoqZ^dt1RDhBStMj7U[-##o]"<I'jjS%IoPUm.?W@E?8%#(G8aIMN8#<)rIlWo?rW`M]_.T9d[q2LWb&Y`rSS0>kS'L4Q00UKi!-Zu%@(gK;J(;-<<@QEk?YL#;A59,.e9W_gJi$O(oU-t&H`%)5!5<L4O90bP8_TVXI?=.D:reMNL*A2kB+]L_kML.;TZH@OZ,Wdo-#N>D/VN#$ZbQfPZHXoNc8HIc<"s&Un1`PY\YuC_;,*]C@O@%Yt^%<Eg,M';V3W"`%pF0_OUTkasiB#(Fb^?PJ0Um:8t.u;q`XCUtk2ZVZcsRV6GCCM)E[%UogN?BTM+Z/;<J4HC/`,^5MBr:],pK%U]$7GP]DH8-^MXCi@""].OC=_'L-&KA,n'&jN$L@8g!.UQD/bJpd/1[WCP)[>nerog$(.n_YJsuY]Yt:@dEN#g1pHugP;D'MTRld%O7It<Mk=)U>F.lBP3n2KauP?19"-%_NiY4gL6PV.TsEU8$`?cLh^N]4lP)#6)cH+rLsn7S4-joke(X'`oJuk?.AnDS8i,jUar=MO%RJ`iNb==XB-]rRA.j%n(T=F5dl#u-Zb9+ICA]PbR]U'Wko6rr^*)>MJS/Vs?%_W?Y=tb;&Q6l)4s&,sIZ[[j!TCBVf+3n-dO8l'V%&ntXL&H8$q1JR_8s/#`HMuL.9#Ih\Ojn&*Ns%EB/Dq!VA0E%5.(Q0!Es3cCn')g)TdXRGWO6UfQ48boQ8q/q;k[/"qU(oMu>V%*a%McRPsc<KBS16qbhQ-3bOs!,;#5Q"1Sa.@8nhC%9s3?6rMPq5NRr/:=SeH&TZ@'.8tr.!tc"QQr>6LfKms$0F1DgU4Z<\h<'L9HDO%,<fCm//e#.3:7pejEFHV.9Ee1N!#<nfVYB03.TmsKtLmt9Z!](b+c7@hD*eSWPI@:^LX63,!3BqEk*U'^P^5`Vj,h)M-C1uS!4],%RqIs$AW9UGe.2&nBRt@aU$nXe8=_%k,pF+LgQc0$ai)n<C<NtBp8m=_OsPm(7:gTL<4KGSnt(ca91L2nN#madMT':`>MAHj-6;/q%OAsXdauLkU?p0^o[UX#EdhSZKQ+Rf??&4usRWj(D@DuT0%Cqf!oUeaP!T*s]D6mld=,Q6(?E2i4bHuFV`Y@5\?"2<QN,)1:2Q*+3%"PfFO,<X?;2s>=`mnHTM'AQ@?\F`^I%a9@-Y6BI2-;qsW&XfjCan3"Bl7%&Tma4]p%IU/Daqh%kJ&L"-(b:JRLYsboP#GnY9t,PP%ojj"A'&rP=l'#AT(EAibgF^#u$+VU-eWjLb`Q@lt1PrtlqdkB(*CZg?`[HjKQeoBo9@34rdZ*q"cH+.TkXXlJGRPS&=;E<O-r9)3%3%DRE$0blGAGdQ[gLfim5/7ctOU4h0ptqfA#]<-F:s''qb%tllfq<c%c,s]._J1D\7TuYsUQa#:KG.$4'4'd[*Pqn./HS):`I_\8%Bic;..?qSAg+A>,nrBmhh.[8j\61"ogWh?9l(b"\coG33V`dB.Rshb;],b.J=[qHP)_[3s:`f+LUK/N;/</"b"R,u-r6s&D3gDrf%:L?/rbNL4RTflU,UOdHV:bE]Yp(ZV*LMENl4Y<H"-e_7!(LX;"<jUU"_D@gqP,g=/3uZaph^S3`@s@:M&rZ,moE13h*%+KQM9WS'%+SAF+qTJZ5FQZTAd>MViSHXFb=A^r\mg*e](cTFtkYuH)"A670Y9.sq)4TW_HrW$9VqXguOj*fY&BWo`+VI7VD,[O.[+g@el;PO]%jRi<2@)9]l1jHElA"3AMjRcQ9?,/!-Ai"]e$_"fRa1',a!?[fM<86N'me0K)S]@[H;].N.9?NjW\p_KQ/\CUuhor0>1RWBf-at_%%mi:-N1RmpH,h,fQ2=gaad7<((nd)n^KNgm>/254p:OM'!eQ\iTlb`9BYJu@0:]B.Y3H]V%_\QH"p9>hkoK,YQk;N:aTDH<Lb*C%a%^hacl'fj=lF<iZ@<ba]Up#]CKd-AhE#fP%G-(@72PX`$53A0AGrIm#%/+aWA5oOGFBY1MpPn*_hX8G-:-GAKm@sjk\]gkR@cM!'`%ek&B.,M*3Fk[Kq7Ei>B3Q2ZrlS8UE9N*)YEM^-_%+\jIe:7OntD`/PUY%_2nJD9eUeC]!ENT"96M0VBBirPc(*0#J+$DY#mfZ9'f%a5i$K#^m(<(<d+3B+-gsk[,fTWp95]VktZ`-<//K3k#*Z/EFqQA@*`4Km_aqhZSO7eL]AB+8giM=;&>d(Z;huT4:HCOn+>c.?Pur%W(mf_.K6MKblXQ4>3'qq,1R.e;R;7cHhskkqSKY*XqT>MmBde6GP]P^:7e!-H9Z8X5XBi`+1Inb]nqXOM.?+pH9Q3D^n[Gql_hGJ%r7suhkGt`:>4SCdH%TSJPLi%,[pCCAcN*mtq+n\*b?!oq9OpTR7\s$VdYI<Iq<@etr-#@=]@H`:Y>],6q,a]GC(&S'O@ljJ]WQA1%K<%1Q<19(IP/,nB&*n_]P7$f8f?I_Y.]mj)D."3+KbX&#LaXB.MLh_SqabT`C<^MFXdf=^&l)kflT9U6jeY^m]CXMM87&Z,%C]O0%,I_h#-;Z8nn%`p8?>,oe.>.IOYl]AJq+gBcLBU;*@t9@7k1U3.7\ft>WO+nTDa=X1T"CBRZXF"&n#t>DUYbt/ng$Iq/"L#FX\h1[%]A'B77Fd.Jpg%f=5nJlrj4(NOg:2VTH2^ZTf1;IGO"r/0mT-8NK*E*6m.,2(o!R]q>S-B&h5GH0\V"M[5>C\n\WW>p#OPUgC%NH&%akUmtX-R!_jNd'uD.j8,+sg"t&mL\$KPtK0B8QI-iN.u2ad^'(a$+nH"/,Z>ALVnh]RQ0/<<1pH-#b1-VOGS'[C;Sqjo@(4,nr\0%3.1lJH!4q35k#'pVltr]]a./-2po*%iUe^A]'U\]l5GD2LJXP_\%Xb^!i,CQ/C?seYcsSrMh.QG+#'L27]WjUK$NT+3Ti>C-iU-\%+ZCmA^WCCs:Zfr;Q%ipp^c_hHKj(6K!1AMNGmOgM@HGXk<i^<4qffNh9'1#O%ZaiE)QA48]#rBPN1K](39AKdpT)\p!mCAd"M(;r%"[E$fdeI5SlssuERc/PIqn(+Ek45'<Kf7(H_,ma?W<+`m-U8`4JA3S)HKDPc4);G-"sX$gVr<,h$`gqagIJqSmF7T+N,KsI"^u<9%e6d]O8E^\3e1]F'X`Q(l.<1UN06_7!-@%&[GIf;S%4$%E[b6(`Y3N0E'GY:^rcbu*\"UQ(aJ4!>Hi*($>$q<\k';E0MrTUkctL+@%euFAue8.!Xs#pWIe-CrQ8dC+00knFr[_:86:/1QAf06GSs.g>;0j+G"RNNr@]P[-:rm1US1LR[hJ,B8aoLBg?hYQKLe]>bnIq>+^%,_+>/miR1A+5'JrP%@jX^&'IFGDH%oY4tf+gA;`>/Ci=WQE'3LZ=YiNqciafi"j_Bp&D2gr#KI>$l1lO?f9hlRf<T"k-`_AlfkYI%]17(;%rPW-\(tftHWntWJ:G[?$T$93b@fPN9fE_0?3ibljfVc:j'R8]M2W,uc+b`69H%n\*NXoF-f+7u=m\a$<grJAQ1nJQ[+30p%\jsQX$`BP!\(:AUQFs0p\!JXGlb1GV]i"7smB%?aAb)Bq,u6iVrH<gsREfTeHFM_/r-_Q/I/8rnFn;0\CTGm_ZLAPe,:-%#Tt9?m%<H%TVC5n/&)3oZ@RcdINh)]!i:M'BcBj!pR1i6NCOVB-V1uclu/0?<aoa6n-LY=$-iKqgc)g%buqT#?$?u`+BR86#:$4,,WHU:@(%VC=+):9s9Z8aEQ`Vi=P0-6d2<>RTS!>U1"H[,>i&;u`IjF'"a%'gn*@em\R;W-<DG2+O1Sl_T0?G3-s`*E=g'1Se2PqTSJh#+"%f%eVU/-Af.YGW(=!)8hDs%o\Z6%dNXR?+euu];@%SBeT1Ldp.M*onG-:b_4"o'+HVn*%t"V=^8a$Uh%,T.;N+WVmm72H(97LAk5uqG%k7iC\VEI<^(Tk.8IMbl9i`GejSa)L3?DU_]IZ&=/n?3-CIBQeUrO6&#F9g1UJ*"?:enQt>"C2(F<FmC5:N-l&P%#;@]UgE)2HJFm%)TM,J?AH"2@hXEAjQK;r>f4Ss-3uqJ@><uGRW%W`NZ,1ab$-ITHuBEE9NpF+*@_,.Wrn(#daWM>_!CNKJWsEj-#)<72:2BmK*Zsg%/;3=qK%cuH%:*'.W!9lF2j,atmma9i;H2#TLce!G\>XQ>>NLZm*.)qZM-V[@HsYC1;H=D=e'Iquq5;VZ/>F_o!JD/Y7Sgm>NI!\^%f#"B]J!6GW41s&8R^@NI/mP_`A:K'S:0&@pi=-HF@<QnYgl`u"J.i7Q<4]bHBDF3r!:RR$)LRoCS7Xk9Y-amE\,Q'L+N'91iVocV%XoEbpH04R*^Z?)=1R;;RLi(d;Eq;bcgl=YD-U5<<:G6u_#d++;_(OYUIA^b9(![1UjFn;r(Tj<9UY`'u]=gu*e$55E<rC*m27eS2%UK[D%!7cONf',o-S&pZSLdAFSchb_d2!SA=FEQ??T!-XFV9>rLeSrTF=/o9P*Q[[qo09pS958tF#BHdKQ@)@AFTaQE3!G<]P5K.)%hEIW>kbOO)57A6D[o,XCea$2'h0&rAUUS"3[X&Z6p4'U&*)]udEHUJ#d*p@f2%h'n8KJ\+<TO!\X&H-#q`?s/4)X_GH0hm^`uVeI%T@ReD)"<e[_]a\)`dIf"oY9Y'!N^YBc!p[HSJo!Fh&92?M(T*NBXkBQ(sUm_HM\Ekc=_5RVeNLP=1Nb@^]bGkZ0M1W\A_plonrW@%P/uI0_:R#sq*GH-:ed6OG0]ZYSU?g^4$Q<ZMP6H]b).B7g-[3U\Skh?HL#e228PP#DS:1m=n%aHBFCs[!XgnI=k?Z#`R?K7bCY][%V0f-R]$Vh=TE/p:WZh3eKW5rUG4m/T-7IFI_o<Q<6/@B/\o2L]^W"u8VVQK<r)Y>3W\4-,=gms:"I3`:IskqNi>\oV^U#c>'t\^G%H`o.rpKHt:AK,#R6u\Y1#)-!VqPas8lBfkM_8?@EG;i0]Gf(EVmUhrrpBhGEKG8a7j-X7r8oTms.#LK=-,5q_D"m*M8d_dn[F+F?%DRjbDTXN<Y]_Oj)rnG_mR2'"X%2L_lLJu/bo')3/q`uOEjR>q=+lunplHat^h.W6\mC--7J3lCe@m-sN8$*HM#U4Jk7dH]s#8DON%Zm&Vp-(*)F<V0*ZYL\/t8Kk0^KM<u#p"icHmH:N_dpA8*L.S@6FM9,g(-t%m^RoBQCtEP%)50RTm>bh0%@DCP]`p"DDHF_)_.$Eu%2RcqMR\;8BM1uR7O7<k./%&,.Ou4FLZofjS"njQ&V2bd/ETK0Y+P2R<VM#[!(]JM<=KnHc+AdXF$q49&,*f2bGi$16rq)YL^4OFe%^0m45KWDLurOk4)Y".3%0cMu''3;JnD2.#grY)K&aOh=c;eN&WXpi5sl^8k_'G+I%YE_l4TYtjk@Df/(?j>lCNaK,[H>l02T.C4*%Vjg,IWEJOVdFZW0Vt?5^lU*;Mo:YS<@oeesIj^-pR'8["iu;@g"5Auj8Tk?4BQ<75)-p>UJq9fQ7oUFa+oLbqF-1$94[Hc67G;Qp%-/-Fn8Z2O7lMOF/%7rqo`c&';CW+]$<(Mk+k<;/0P]h&EoRJBif#4,ReNs+AVYXZ;KP5c(*IHd2NRefpe=o(8/tK[c'G[.8+B@`n%HY(rJ@Lu-_i(C?/l9u+b;TK/eFM!.5#TVdY%m4:((-TGP15>NQ;;/+07V.Ws/rV@QKelRb;Qa^AI[Y0WMKhP2lRD"fU4TR"`^Y%k%auca*\(3O@Fahs!3*U+5^8QHYkkU;a+0GS0euSc>Vt8&<[3M'8lg7.nmu;71@W'PGdcl$tVc0Rh5>C^sBG<'mXh4&Ki)f?(L-`:;%p$N,Vb"=G(QTW1d(oHUA#-t&la5EeP]JLU2jHU"N`#^(5:KUliJib;f7F&jPB4%V>L852.,^h"oUdJ+<&EY8R7"f^gf0HqmU'fSo%UD)PM[4FeLRk;@cSZFbAU`JWQ^ojN4A+Zm1Gl/h3,Di3aAES3\K_>m-(>_3TrBW!+:uolO_:iR7$rZ.K9B6X:681*Z5;2Bj=aI?-%WYK;TgsBEP`QbI8S<R5?>$B_Zkc+>OdFNcKW:#:FmPj]E<Sb=OD&7]V4.j.6BBtiBDs;G_IB"j$T,A`MN4QWm>0bB`-.8d3NR,"3%k4m4s/Uc.-dECupC@Pru4LK9Q;bSc97uEO8^RZb9oi*++9C"(`,9X/aWGS6>CoH*SC)M68fA50O9=\V?X&>3IQ$/d8Kg`N$fiWaK%0=?l8[gqcmL:+X:SLq>=[&[*fiD(lZQ#A=ulhU34Gp.)a)&@@,\>B;IB]D,o/[]]n[$Ot)QEAZr>P9%@AKe.>>'d@:WD*8sOim=)%le&S'fJII09Zh)4B.dfME7U>AF<cpfP&8bhlaIdDlZT=U9Y[hK&%b(r&J3`FRf4L%B'5k.Y@Z6OlXt3I-T0)8Ra#uWSO?ZW\UA`,%^eR7scJB>UC0/#+S]=Fo#RU0c#HWZ(([n^[ARtmKP6ia8"Jh*F7ZeoiUjZqL?g;8O%-^FJn[iu_K!b#^S5kl?+JdB]?0bZ(C[8-8%Vt6Os8Cs_N]5od1FqE*IcV&FnrcRAiJKUff,+t4DdcO^=;Ib$m>5`:C,LpZRV"2LuY99WtFEab??:gd=O3W@2.d]p=%RZB(m2p(5%@I1\o4M3-?Lbo3sgrJ?PCGi6gk28\1e^piP1E-bel.hf4:ULROVa6E]i-HtpUc9i*]8rN'X&gM:R=:q^ch_5G4VrqHC&-aJ'WIMt%I6L/_-IP)bd&Sig].8fq@&0^_PBQP;\.jV'41B2[#9cg;!Nl?`RG4n3"LStkoi<QsdW$DXWUdY]F7uH#"<j&QO,mk('Qp^rXi>JZ%Z[#LU6X#UqQ<p_GOmYd9\_=]AlU/he=Jn*k[)q$J]0,O$1n2P>q?'/iHMB%<OP[*2LZYn$8/M,amabQPUaFN?enk6<H?ap@#si<"%S"J7%;]*rWFL:ONqiCjpMK\H8Aa<.Tpad!@q<FIgMY*QbY"Bj.n!BmBkKFWJ$#JqDDXI5u/i+T*oP1Q)*fBUfitp1Y*%>?*BQp8Q%KD&J&dR,m?=l*=d%n>:0T*e#5ot3*2,P-@l>>M'\c%BIZd\DfMo@'n`a$?G]-_G`LU]_&mqr_"`Q:$`t=OL]gYoJ_ppeUeQ`4"/\%UsFD2TT_atg.@niVF$C$?:q'jf7"i?lZd\)[Iq%7!i.@("=_Q(>V#b8S'MN-X.&PfR`sSrAUtt(ju2@G]e)C3?5?T4LifV7VKr14%SOh)Lqp-(/G.lp;L#(>H3^_WU>kGE\"VZ<=,2KtupUlB&WRJQ980QD45mhH@[F3p;e(-k3LNINYGKQRL2s#['%oW@9WN@2U&>\U8%9&[RDF9XUPjgBqY-%B,\q-(t(hu/dHs6>)7[MdMY?WeItVcpKp$TbuO.aNjq]$PXSB:i?Xr42:\m4\;$.dZC)g0R!0:RU>MeQ\OQ%GoQTfG-R-@:]Jp<hc%FUT,kMTT9fLko4.&4OUceWT'i^CKKcf.KsR-8V]V2%3W@OK0k38Jbhg$e^4!NDgf2._^7P7/%=1W+Ak\gj%]tNig]P[&]m]Ki=l-nO2hmT`VbJj>C+8/[*>4Fh*h*5g=*"."?<EsXIb^cVCl.9/ir96RgAXu'Qj4I$$ad`ZcqbQ[f]c6h?o1I^8%(%d`1m-D!jnJ([T2##V%*r9tcd5Gl/T>!0icO[oR2Og/kHWUQ%>07r#ej?"s/"9IX361S=AL=_ro!Z7_Q.?bA2Qt?.qOT<Gr9A1*%VhOK+IoPiB]^.31K:\8]].gSUR);3c2t+1M`2DO^$(bR6H(faHbhRVt4(k:'<drUE>Vi38K:[!)[CgG8K'3$o!^Esr/#S\jB*J4C%#$#<^TJb#b6)n?1^<5-;UGk85b1ujX17Ja6ZoCEh9WL.kpV3Z5"0S%GRW:o!Et7!HRig/%i9gTbheOjYl!/Z82$:F,WeBfcZ:A&U%8/KmBpKo(7NTo]NG2lo!pGlEIDXToS_A)W4%Rhk4Iik9f+_B[;-d9&m[Na/"Lf?I.&Wg2:gZJXdlKmjo8(sO5W1=7d^?T4t`qR^/%]n:F)iB`pC%7LWj>uuW>12EET%W5KN++qsbGR?`_q\\2<WH))3bkp8*'&OiH.JaMr_+<0Ufc[*/(F*T(k<^%[/<Wi*BTHDCqQsir%kfGd7qd=4Tm]'XA-#'ofT<ICmElRbG;sEF4e1`$loa`Bn9ODU'Rih3Z6:?\Agm@giDmTc!J,-!0PRF_WI#I6"raN#o]s>R@2VRcQ%$g-`<GSMoTURbP'$h5IC@)Lilq*SiJY]oMnTXH<r`2l!@T0U1].Et&BN`lhl0q]NiS/Q(pHCG]?7*:>6gWk5sMJ;hFbj/E9OOo=n%]SK[5`9+f#D`T.NT#/fVFQS#f*:?Xmh\W6g7==0!JV?;59Da#r9g2B!Y6U3^C$u4fPXmU)Sq#lfFH;`P\P6e!7r3R(9#>]3nRq`L%1Hh,epq]MQ=u<,;D^!+#;DHlq4pL`<3I%`[HZ7\Uha2#Rd."^Wm6C6]j7OPg?csgj".@-.6L1A\13m=*:O,cJEJ/a_fq%lXQE6X4%mqBE_ic?/7UUq+.Nd'glZ]si=H[eFqGu[XpWua1f"$KF+DqD"ap.":TY9Pe6l>o(-O6Fk%jV,MCVio6[&8IM'9D!l,cAD2e9C;,P%G>sH74*X_f=C,CaDLJ;.m>YPCVJ]^G*(;Y%qdnqu(?n!j+f2[cVcC.Rln%K$5%-)V/6AsY)hbBPNBi+X#e_/=,r5qih%W5fBrN[c%B'+7A8RMg.&.<!,'Zufu7r*,#OW@Md8O+\ka0Mlu2\$M)1@M_Wkb%Drje,I@,)X9u]?8XJ:Lm6rb=e2m&q8WB[]n;:5/@6D3+"]P%m80]BnH6@d#I4/;UOq)Jq6ZesfuYn6."O-e95c2>Y)T"(DGVQDP2Z5&<9miPqQ-oW/m7Q0P3Pg+*1'3O.\C+:rj981#!o3,kg#Hb%rWR*"^)&daq>3+PGB],n]3Ylr2_i:[SuOkY4mel-&l`uK`#D!ADf\-rUm!T(9aF="m",ibDUQ($(T[T&)5#12B37RVr1<n'7N6HV%s1fG/dt9`[?fMEE0I((=kKQRiQ=i7PH>JP_DPNbiiA`a2XrEC2c^fo49[m`#E3/H[LgYE&*7s&%?O;RqfJ(nHmP(g%=bn-R^A1==%F_lY"AT)X)@\[u@k'JG0UJ,P(ZUJ:[2h3uZo"ea>mK?CN81WH(;mTtSB;=cfbFptbgD%K$iU1*M0Rs_Q!i3bYn\PThciT&G>b61W%bM``#f#@(8@INdr(IMfZpK\25htofqqdMk*+^NUY61-O8U[m&cbmNEGppPqj?]'f(p^tlT#(=,d9/'+;6Vng`4P3CDDdVoE_d`t%%31Qf/62l=L"n:/;%u@Ot1)?tlp4cEErq:X8I;%Tpn4X@)\]7SRS6pYA)eR:nfu"!0lPT"^U^-U$YpYkZ]0#QC)>u`ZoCtTI5LbNE%X)ELn`\(^T.q"0g$3QE$&$ro9>b/,aF5A(SmiUP?:7<QA'G;PiWLXqdQE\\&Z@'p692BB%ibRFe^P>9L4@.Z)VTk+L1ogBGEEC'*%5^taC]WipSs*1GQeN6hB$ucc@5n:Vo&K;udnp]Jt3^VWbCEF@IDgcF.R)K7bAl,STV[C53&%4'P4%9YH#cbZRC%.S>><d60QtT0G%*5i.1%Q:-o\1&FV?=NDAj]=L3)EnTkEQbSC:u/c@k6=StJ8(+*QNR7U3)\3\ThS1U@qqim5"Bl(3TlR\54HmG,;gn2Sao*WI?=kE%o.mEYY5g\sTG_72rF,PbCg#\U44-JhE]dPA(TZ]:h&FurJ7X*Lhl,S<!7YQ>7(aP$0=]OkkPcdKd:PILNC.9@MRR%prBkL*SW&1J%`Zg+4;SB]kSULs;o\rJ*WJ.sHcL-])lNnDZ6+'Ms2PQct<[r>Gi9q1>o7^6->osK_/n1q^?ol-P][u!kO=dW/,DWCY`f,6ZaO\o#%Vjfrd&h?nd6a#s5ZLUe.!TPjWbR@Y:NmqaucV0s#l[CH5#0bnC2&\/\l[(n3%(>;90#u@Q^'Hi#2DL27aYhf9Q4h36j(bsBYn-dk%!KBQph]!IQ[@V&kQAAnophR(/Sr!'4V<rPP*@DX_EkEFTo:X2dZEP`&/0+q!.;YcGZO7@-T"`i:_Rp8\,O`1[7IXDO#V@j>`e.":%!fZ`7B[%Auab#J:*j/CN>P/J3[o;7$Y;)TfS#[-LBlCao^\P;qNM7,k(6;lW7MLWY-ZTTJYElD`.\rYbQ[0?\<p&ip=*PraEdqXt%JZPOC@o9QUZu=>V)Zjh9HK6@2c\@^aZbS-o6[=&<f9<K.BiX$#0N?'Ob_F_h?0am>8jj`7LUZaLoH!R-,!GpAM"O0^L%/b0;GU!`%5&(iXoo*bF@kBufU$M.X2]Fr.7h*AM\WB:`,%ngVrfprG%C6?Pq^$>B>a^Y`%uYAD#];fYV=r]$kRs#C+gun\L2MU_[b"$05Itcf%Z?0fqKT>Ji=JL59g1D=_28f_]QdCrLTMZc=9.e)b!IeA:i^q)H81u,9VF1Ot0(60#]@72@jh?SNO:<R_-mqaB^8_*bmi@CoF3R?Z%paQ8iHp\;qZ3+ZY]5=gY_5fM7eo%^l6s?-a4ZJs^&/VWaXE\d<g46XcTAs&M[&QqEq)39bX[aREOehd'`/!.C8d?u@cSkEjAtWeq%Nd['Df6pFH2h+!>6WBBCl4[dTQ/^rQ\_S-j5t=ZVQp;-eF9Z"p4dd;$5,=bY3iXdPc_69BTYkT^8`\7GYniWka#o9bF6K>SkZG:O%fK"&)8DO]cTPVGAEp05Rka\t@`m(38cCj4.Dr]s+7;'u@*h,P-SR4g2pHo1h<t:iif0>OWgQ>'\,V0VmFKRaIK,/mDn2qi3'"uu;%6W=1[;>[7(bVY9D0idX2DL)X#1&4l`MgkPI+J6NPhtnUil^b]r,P&qm@d;k-::ZT+S;+Mai"=UlI:hfKo?jOFA;q,KnG^q?-6l;P%qlp"t92%?J>op"o_YQoTZC<dn'uom^,isD(,GQr`OYeJ,'h))8d[X7Ti065G@tOrnjPO$%FOZ@ri_-tpRmEdXJqO>frK5qR@H5f*%><r=27;nNja%gdcfEjQAZJ.';5sfW*QeLJQWndNZ>_L?d"Co<XJd?6b,)1#8$I-qTl-m#Q]*Ma(r\^0Hja3)Za4&.qo'gO8E-K$r%JK$#.LuM6&VNn,*J(A%Mi/I;WQu<MZMHJ&^&NFjKL<bajnS,CZ@1mh^E^K"EoH_+(ZYNAYQnJgueE@eoO7-`.N&3pDheR?5bHrX1%'qUjP'sS!-`c2\6P!5b\8D4\sXC<J4%G1bI`%HZ,N]2P-?k13E^CH<4L>%q\<&Vh<.$8Rsj&Iuc74*mEn#@d:2TX:%haeepSH-^)%dmSuPfV"uN#&qeQ4gTQX]BnA=Zl>Gs'A&OmEYC.l)fr4gcLK<8EpcL5"02-d)F22ung*899@2<,p5SN9bh7@#o`fSlcFS"d^!J55%WJA1pHlD-q2u7J-Z)<@JPk4's%.9g%.B^])2YJlE/T-XnN1WBg>aSk9cAk2iYsE.\!B*/!B](lE6j"XAnun-2L!P-,<lNoLDJ"-j%O,ra,Ouslc-osN:UNP?JLP'X$]"QJdHmj>X&)/k5&cZLi2r]JVZ$:YR);am$g3rj^0lnm))%ke%Tpo7,O/N&APSbYP4,9Rdd"[G!%6tY(c'B7KV][nR+]FgQJImiF75;XPt,%Dc.RJd^B10tD7+3[D*,,<GbA7sr@/n.4Zp*[+t#ca8a5g&$1l.=SN.7'R:NlWL*UnNbg%OhoR_qcfNm@j7(WqJtGf2S3@[Sp/8pgf!.UaM'ddc&81S23naWje5-]bMl)-lK73foU*MB4pVM[G^$1+oNGXcM3U-eL3+VOA8']>%r7F^gk,pE38!$P@*t+,^nHL9DkLGQ?DHQc9GMN\4D)SJb;UN,L@dP4)`f-*B.XFYkO[7?Fa`[TBHDeV@W[l0s*PD/$@QrT:kOjgt%%i;gC1sp\1`%l3clJR'"R!BHWk/4`T(7pJpOg@PEo&5>I80'E,/i['SdeRj7[H/\)iEWF%oMgeeq/EUb+W2dP/tcSNe.sC%&*H*L%h8pZUHWc-cZ&PAYO4.=g`?Ds!*>Ys!b/W6NaYj)u/(U<55oF$E&@_O<XJ3ph6N77HOg<A+4\Oh(bm!!JL57t^_=^JIP7.+?K_iq\%SOJG0(adjg#K2AQnVidcJo;2uHYbr;`#OM5TcUT8"KI$`9I$^f#"001Z:Sn-^29'"31`!fglCDH%^<q\'0-MhAd]@Z,\"_15#=oI%n;2R:7tL,I(nMY^Jh9A4#s?__Dr6\m_.O8gEPtO_WBZ,kWFm9-3Zqc\hHh[js2ASXPTCe?B]5nKeB69^?lJ88)6&n#f>)pQE#GY,%PK?@DpmslC.b6A3N)\";Rm]^qeh_bE.b<V*8.@WbH>rl7Fe=0Nfs$"\Eo8i#mk@uV(ksusENT#JD9#5%$_#$]T*cCg0,%'6j6+4u%ESO&YKa[%qUf65]qNYQf_BiY)2,5W+hi<L);rOG[6Qrr82JR5C\.dg/^'t_SQ'(%sl2occhhk,P*Fm=u.uSOJ=4j*0cRI+8fi[3)%O^jt-L;VW+"tqTj'Xg!aX%fqnb)klH[2ZN,'7Y%qVeOu\Sb5/4*`OiqoKhr)>704S_YSdfOL]B%Z.$4_4;Xor5GbYKZh7;3fJkI"%ja)!%o#7JO9<L'(hN^-+q-E#i^Ta8W.hoF5#C$QkH/"aGdLC[7QGoB,fiSi3B5=LDn=/16?Rr&2LnZi]D>!;W8.7]j8G/$toNJ70%QL&c.O^Zk4.T^]N!:_AI?#5:/f\r[\Pq]!eOVr=(bI2rNJ"PE:@b4'6:NjXVVVPGc`<7l@+5_HFZC@?n7Cp";qA#<)B1u*N)a=k,%)0WL`;0ce];&OPZMi/^Rc@((q[?#')L0ZA\QgiU$37?7FrJofoq&)<D<*,^0OT+MY,oEcn4o*+YHmPH[K1iAeW_n+&N%Tlf=MEfE%/]jm86R0A\FTuaZVr=7CUWucl&pE$L4SF90fsa]TFLDptB-S!MO!`F$mR#DKl5m"pBVJt"j?:e:i1@!CDitL6Id()tad_@C-:GG*%4Q+TZ\9nY>,!"G-Qsu!n7m$ufjLoIV?6U1b'bO0$%5Y"(%(pBZD4(;<"qifOY(8!aKR(<llt4BGP'iDP0uhC3D88"sI']l@!AU!Y%\f_@YWsRg!dfnj]p"c#kFuEW&^rs9HF)orU6+M*B:7`FTRkB*%Eg#*t@G5b-flU^mX^c"m"Z[Y*P!!>7S]=9/\TH]55Da3fTNo&N%%5V<K?'*s6R!:Mp:bJ<Np,]Hp3bB4TEp9+M[Zen3$d,=+EL9=/dfoCsM-<\3RkAqcFOJia5pR`ZH7"hM(Y!qc-QA,39c'$e(MtU\%P"c`l<FX%l#%uE(>i?\ZS'G@U9)PJE(2X]pafu]9FR_@L:,ZBS/fe5GRq+E_:bH&C9mPc0dfiauT//6?2P%W!GI8\IB4UXN\ff`f%iBNE?ltj8+>e0t1MN3cm(XteaB693%9d_jNaeapY=,+"*B)56sb58-jF?pB,T4pMh2P$21#R<%-,Lu)[#->?6fo(3!df;%8DpUA,%nT(mb@uoI76%`HRs.K8SJusr&hcCWkhLpISe]#d9lRgD-pVDm4Vd_=5Yin;K-fQU7Dh>j1,WRc4S?(r7VK_`@5oZCE4Fg30/HFZW%B+[OcDl";2,TJJbn]r>Cl1Kijjo)>8<3FO!D;W"`^],]W(i5RTm_X,;rko9Ns4[3gCukPNOk8C-Na7Tdc(-q&U+X$8SYd*Ec/!@9%P=N=Kc?DlGn3qQ=L"ug5\JoqF7*%9?TrtqIk/tc'mehu5K<MhDHS/S#@-kt)\p5a&^%9Fg)\<NhA/6J#)Vse5EVA?I8VY6eB?!]B%$f-(f`*R5B82j^MOY;VK4a%%r6-pC-iNpu%DRu,/]0QPNZ\^7"N`=q3X<a0Xq*[WjVW[jp7<iK\oL@S;lTI>-?[i#d`!!=G]>99T%%0`$9g5?qd2\]4,B1I1<rc4b/-Be0allD:mN;;cW4/\Co_PXtbD&K[On4ckLh30gTM^G!A&gs,MHg]cJ61.H,DbfRs5ccHN^'i#c%N0A5_eAb?thO>iYGOAbTA>SK\#+,raEg9ekpZO=JDtL@:r7OjZa@u,rHQ7"-6L7YUW9c3!.q4;R%,oTJN()_l2u'rWqfnNiE>'4a%mhiof`k=5GCRN*i!VAF`-mP>P:*3`%G8Lg2.:)s:M34bG6ROW?ZJP<c_lLlf6f/>sUZY\gF2K$9&j?^OEl/o'ZO">+DO=iLI`(!'%R?&TT'*[0U2uYMt]A[XdS+;='V'Bp$$Qk*jhJbu'rs:n=HpD9Bm"pfCmKW'iM4%Im*PK-8Xr_rb*llLhbC,j^@dV(Brt^+sDdSEN%96t^Bj3\##d\2unpj9/74Tg)17,3+.Eh==gfseM(jSX1I?!c#%`SpFC=6>kGL>g:f5;P<-?XKmCGV`;3;d^<bRh>?.C.uWB@WHB@%>aZ,;*c.e:-EP?3c0=7jgnW-!Z8eU74DsEF=>RtEEO#GaS%*0+;+XI-S^;YJ?l:T;ok*tE-B_RRDAi^!QUk#NL,9=Vmc,g.a5:Om%YS-DQRp;!>D<Qk:CQHH\EP3ClBWCQCY&5V.h4o$ihLooS$e\eK!_srq='8XcCYq%/:l4B\WW*AN,\dD44gG>)G/L#1D$a['A,9WR%g[=o,nP_&VkOu*;e$]/Gio]7r`Hpi]d=?-sV_kmOk+Q$[ju0)oFQ+Hp?'/XBG>B.6n`H6qe<:EpS\DZu'gl!XHe;@+pU@ka3$Bq(%4:SLco<KQq,*g=!6<NBB0g0$<AKF;/eXNf9&>!i#<Gnkr89^s"/q$9Ik'-6%gO%2ZLY]k6M+C?&e\h";\o["M8(_UZqQ_(so:,K6%OOUX2jGe3qJ*%j+U$=E.@-ocRWA0spNf,Q!q/FXl89\YScZnteFSBSI/d//]lUe5N,<bWAV>DlMq)u4p7p7BJQG'smK27ihD_)(`%B43sd.n;VN?W&IH0kuqZ(09u\aoTO`>.kQ@-DAu!RX`q@]3H"'FVZ1V-fJU?Ql@E(WHuRr)H;[-D)0*_B'[jD9mmV:JF"@mo,!2;%=qse1+`LeXE,nV,e>D['Hc^nWR(e)g]WG1b=].5_a4pt]J5>>12PA%88rKs^.W/;@J3B?@jN4An>k/f;Vfttg?-HSXNb8qi<8TmA%iCP4rS?o>kp1ZsX'HAD?@D&rkG%i[G!cFIrWN4Ib`e%8tQ,\h=1[c(DhM\XH3$>CU<'(V=pXAO#J?:LkmVdo9R6Z#mWPn3%OlKq=%*>fS6+"L&panhu),0Q*]&B2fECr\Mg2A(QrUO"LXP$Et1'Z\l`ia6))GM#XN)!LMnIH4"GpgA&CS0&F4,4)D)!WeR,J"2#@PD?e*%(%&X%e:g]!1\g[lfSO,t;5]on4sRq.$96+E$gc]BSLW0\Jbe\Q1R[SDcPDI\c9Z\u>L^cn0s#@*;;n#;@jD,5d8AickKJTW3PB3c%A<gfg<5?>:?I>d+>@sTZMn[ef+C.)S'eAUbfm)"9p8qDV<S=$MSmaT:@-)DgNX]+$*3,-Vg-[:/qU1'bS_9]Se.^u2&[DDsjoB]s%jj7.\rA4Z?!.(a:TsF_D<hA?jP@J/)`m"N(GQW:p'gpfU(UtD6Fr"K@*5LKRHK/T<`oUj[>T#a60Q%A.$m.JR$SZH.i.0@ekUaM$%8kjf9r0R!%4c5iLK7DfW^4DG0+DWLaV0mnjU6s0$HrS#MrPOumq<goPLG%Zr\K?+6QgtS!KcBtg56"c#s3.<eSltD%]9Ftq;MrXF%,JnUNe-nM[C:JWhL-$>he9h-^("If7hoKFtq<mp6hRkfjlT+[PIZ[?o++Kp2raa</MKQ,[^pB^]Ej&jBXaWXu=,rCN&Wi29d_1)q%#!9TMcZb<#"?$\oh<Hpk-J.b!'uMi<L:c%jqGtA9n#p9rqMc<#N-ha8FOhJK14afNUA*uogS$\'?GF#GQ/g]dk8=eY))Hi,4Mnd\%4E3#fU5Q=tL:Pnh\gPD$dO(4Hc>N<5&a,3tY@$p<(O$\fTR6Xsho@[!c?ncWIO![h2tW=NHlq6*,EUNoFa)o(eI_KO%G$i/\CWAp%4bZA`a1p4ZH;fB>PE@]A]mbC2o\A^Jfe:37c(KF^U2T]4c57K!?GC/pE)9ThAC<Qm>WK(%LYuD8L*$48p\I=J!J1"8NGu(.5V5W]%H@P^:rM"'FE$&HRHi9[Wonur4)_UTQ(3QZ"d:3j"f.Zu$^I3C8@2OHshiLuT'?dZsDtT$h`s1Ac2kDlJpKkTop[O5mY@$q(I`(!^%2sTo&ho@\@]megAr5\^=B;Q)eY?t*[D5\+j@bp>dm80!fXXA(k?hCIL"2*7\ambG%q?](sO*.Y`:o?42I'9.q*RV?f2>V`K_aLgT%n)G?O)4o[L2t!7fk?bobE&QHI_fi&=IBR"JZdZt0f.T1fjh6jnoR$Ogd`8l$'ekQ*FK]&YgJ2r&O+4??[+k!jQ)!4%(W<SG4!BBh%f.X".3Te#(Z$$Y<IBR"M@Hb8Pcc%[%]mak>#2\VmS2NU_]me?8Z&(clDTmJ+U/u.6NfA1bT9h0[E,oJ.`cnUno]!`<dt(uclPFuM%+$I)Gr-SA^P(F?Vl'hD:B;OYj-AT4[aarUD?H,"DFCXL/mmKSG$X^en2W"2cP8KCkk`[C:'->'F=DnR.Q^MXue\$)AHc`]UA#.mO%c#>c?f].l2Fup_@qiQJEAO!SIIlnt;DE^cu"S8Tj1IiC2=_YU<b.ZW?27<%\?NuNJ*pm=$$hMPKRCV_RD/&bC3'[B?ZYcKZ.TI4t%]kkqqX$<H6UQb.&rVQ3[hUJmcRrq]EaW=tS.K+3UHeCU[]\KT[*uWZP(U[cOqeEk=HfdA]d>EFN0$Xq>l-GX7g.eWV3T'a`2S[_3%Xep*.\j"u@Ro/?mN:cT9]tMY9a7R'rHDms-XsKL,)j_B(=/kQGdoK(ds1VZA;s1Tbo(Ko.<;uj)0C9U_B:[>+4l>L-f.^OBdndu!%=+@nJF]/;o(>!WNf3.dnSoW99ro?,rLDF2SB28c9qKfG?=76WkmJP_B2QFmj[bEH[TB+=VS6j9T*UX.eMm*;PgRISPe<s9H90_Ph%F1'K]X1O:LR:[fOrA(Eemm#9\C9!0%V#*o-B^060XW?GN[A,(j8PJ6h(Dge"VH*lQC!1:r[sc.!RW_lmO]</mVK8SQ^Eohd+AQ_i%l,$6dY$AR^f4Pj?GKt)bj$Im'/(\"[ho^)BX(?YSo<`VQV*4q7RN">JX.+l43koI+?D3skDl6cbJ`aVXph=1mj6b=Hl=$\[>*],&%*Hq#Zf@S?,V5p(kr!(D/D.GA8GDSBR)u=E,GYV/>2ii:tSpQKYSC=fcc8U$?`/]BrAeTW^$RG0W'[C#(I]b>dT.l2ZGMm*Wlb$9D%PtT8^"kE$5MoDOb:O.D5Dbj].qfkl3*C:8liZl':E??`h%h9E5g]u$^K.""f50/Qkg4a_OM_%!Eg&B"hK&["HFufTf'L#h9+1uAh%pHb,#D^b)"Ce6T4bfIE>AX1L:a"hcLE]]TpZ3+3.l.Lc:,pu>GO;1H8>[e+(h-5&5s(?n^UXR+3.7,r0_p:,1H0i8fn57/s2[V]:%F$\Wp!-q#g8nKE>@@_VS8,<4i']`8Ko_'P'Yc-<BC9?'Y1;=2=7epT,@80sX\$9p6qaE%^(/a]ul9;s$W]eN7?Z"[p7fCkD9"\?f%EdadG^RSSX.=@KfmJKDeH&].]X_clJ4I)NppBO=QmAB=DbD")-*:2b[2IQX3qlbcJmPq.q&8/`XG".5e#!t*;>@m)7R=#,1T.eQ0%gNVp8:,fZ)j3QF#q52Hi?Tk@G?,n/4AGdU:cV#ruVflV76#2KCK"CRFoNPn(Yg0i@Z_FtZ]E3].:$9@)jp[M:h/1?9\p7GurHKt2%b*[1X>g-4!AlmiYF-l!rP4ke,Bm8b&(\;/$a/ip!5WN'_V6Y<;6OH]YntaN5&r#(IUelX1hRcBf@!4,f#X+[rj6g]l;>d!Q?>Q`\%hIu_;)en#=/pQc9=eE-EQ.Z`&Eolhe2.*rO52+o>1cfk<J[)gmP-Plig<tK,n/NI[:1%S"cN?e3.B]/d768;oDk:A+I84?por6DC%gAB<G[Te(Tr3hH:`1&)kDO3qZ'`_El,W>fA\+&S',,gA`)lNb'gg5DZ2m+EZAVi!o)fDsW_rRAd/B/KLF1qgaKH!M:-!OFXDFeHl%H#PHuHX=JK-)p_".Qu.!l`Es.WK;!ROuKh*U-NY^%$];^?;ApU&!5NNG\WF4I7hKW[?^rL:1RF@T4mE70tXd+i3_rtOn:=#q)1,5%K+Z/I'`CdR"jPA'pb8mp'C!BWB>2A"gWl3`2i)hGa(l/#`99DWT4#K$8$%GKE-QH/dPFdhj#]?1pm0aQO6tG[;EgsB1Mb#]WMQYn%^!q(?mOYd@CMFWWSu7nGl3;]:;bKV>];\K%Z]nWc^!*0P>]Cp!rX7qpogPBqfm*UpL[qoi0!=2?UTIGUV=_=Kr6Dul?-SqrjtBd8%bSU$ANW&eNchnIcRW?sop2=iSjZ_+p-3%]]72l>CTjF>X!5=rkXk%CQ[f!eF4.ST]?TZJ='Xa@gmpFm,@X3)pO)mahRVin'A*\?f%`,nh5D^V#\-RUP/?cCp/mHG@n:jdtO^HMI_$SufkK:<m[nQb[4HmhFn*'?a;1gn?b*&V`;/Q3"Qb`!i>h-tI&jE0]BOY.GmrFH78%'?h!\:mdf&+h3fHkCp%gLQCV-p?\VSpq>O3NPT_^E])`G'n]Wf:Wh>0jmtg<060JlFTM@N&(o\;@L$J/T7s?#kq#!2Ed5%#;QA9V%5Nh3ZQ$,sho%&"KQS7cTe[spP6f)G3PZFl<i]ZVT;)sunG4T'NolMIg61]m'HZS9bF^d7XAlCnFH`2[O,S/@G:W)3#)S+*<Iad=6%HujF?<h,X0hoktd.AA=4V+)9`VUn^=hsEd1UPJ%g+2ENj%P#fre5Bld2!r0R;JOlgIS-D7R<et"C\--[^+Ed`9dFJnj3\AtfR6+-%H9]tg+%OR\eY)Z?%bCBscb569l,>XXLcsB\ehCMA*a?*6kOq;%3,We7d."Jgl\EJP(>c[frd>UCG&fj;6()$'d$)78*c5o;)T^R@%C-@;L#>8dp=a^!)SCmb'2d/\=`PuUE@C6'[a4RI7VR^*N&lJ6+g@j<XQp]W`2i@j"X>+8pk5At?D&BrQSN.`Nj3AWK)'LXK[^2+u%Y1r>`I]4o9jkkM-Q]%>kqL3mm[5%u9?LJIG\!Q-Wh\Y\1;WmTC6uT_%bnPXWV^G]Z:2abAj]FMrgXH!gfq(4)(*<4JG?9:N2jP*@%mB"mL;W]kRG'rg7k:j(Z3>O,<U(bg$G/Tf>mZnXSG9?X=X6\&Gc0fsGlVenfp[6^CWD]/-QL:bO+7(g9Tb#SR`r]EM$@'S]Su:+Y%1!e'o*V')Y4TN\Z4?X6c!p5h8k!\s2SQRiPdVG\Hc)t?)Sc%8iPda]f5L8?B0EeB,L_seg-.69BN\U/dfrG["mN,s%VUj5b2=JiL%@JLq1gQS2IL9d%eqfUY<kb0RAYof\p-dop0$,c)\J'nu8o]@Tl.qqM$c[6ang$oZ%&"6iB!A=6GZ"!cjo\`l+*:gZ/%(,[`s.kBX%+EA0J:Z:g9,P3KFhp%G,dj#eY%q>u2f!]"]Qp)i]f@H77CG:D-*5]X8I^k[/D'%b^ouem[2co23;_"up[YcTSl)Gp*,P+QU"b:Fr%:q5PsX$1YFGCCD?F!>Hp[gRoWcai1*0l,'WUSh/M`;751^C6RakW[XMX<++HTOHP1^0jWA?IIne0qd#0l/h'5eVK"i%#]T-@&E]q%gt>j1"KeDIPD5:s-!!g&@mZ<COWio>iC,kkSmWBd'Jm(Zj7i@?K.E'*C3Y`jg^lV,L5Z9n2aYN9L=[8gCl%%-io#]UZ(U&5io$R.%a)8lpA)?UNjMdtTR=ZTqj4*)Er)RR;Tp8PLcddIA3L<qGq"':R]OP2*=iK=U8Lj?&gVO,Z&s`VNWTAR*Q3[F:)>\EV3q-H'*,Q3A%DA)2*a!jK;O:55rM2q0@3Pb=1;*EGAIH67'.=rHJ]cS+"S;\,6rl[j+aJ$rkN5:Mop)!,\OlKq=8N_=Y@CH*pQ4lWuf4\7F+,n#?%\5.lGnM(kYo=Ld:a-uBjq-m:7+YH@>T)(0/I?bpNL$jR64O3-P$h`"t-LN.spB3+OeW"?Z_;_G)Q/2d1X#sJL'gBj^>-r0Wfc6$D%,CB4XYNu(DflPs3ZGO&0%W,ZkSh3(c0/!8e`Uo>7\+4SI^9'$8Gao<JN@/Rb5<k:>I/3TEYu&_).XtodDXn8%=Y+bql]9=dWlfND%8A4U6%K<&]-f%Pk_u,]=018A1_2]o!Nq:FYg@:unnLg;\[,[]WSq"3/8[jbf`]$T3o<J<kG!,#4gdCXnG!,#4N5/5jj-a?5gKaC<%TAk4Ukmf1emlp0m(9Za1>*/91P2$g[qm70P]Cbdqdi/0H':k]CA<'l!5;-"W_t\(L6q(_9[=`6YP:D9E=&$?HN'O;UNLqGnMO1]b%MP&MLDnuXK]i4WY((aS_rV"G-:+nbSqCqC2<X]5ZlE.A,$?bg/=)h!9@#7Fi'=.FnmeA@ucRG9cD%kA.k2i/3G7!@27O<[f^)%XY%F(u:GrpidVeNO3EgIuKDE\HrcfXbCf&@$`jAFJ>gMr3rdn7G3Bc*O+UqK:r2l,O[jX,Y;4,]jA8gj1V8RcjWiPA92OF?=n`qt=>5%PooV$1M75=AP1^nSc)lsP\iE#qahsZ'P4,l]q9Ge'tMo;T'"OA^6<oFPa94?/QH1FH7egL0L<m%-6P1<_MPteMB'cj@e\Yh_#n<N%?s3H=5B3+L]4Pe,PR3i`lIN07H,bHYk)"is.p[?X'LS?&]4<#tn=[6CPPsmmJ]iZ$a6_<J9:m3Nn`%7FaZ0Na$F+mIadAb!aJ'Ze%SK*@*_&V"/P\T=YQZ+>(A*bZJ=bJ86<'^@RYmPfBcnJJp.j11*GfKpRQae7Adi`fLLSmF?9:?M_Ehm<o;lBeQ2;qZ=At[_sN^s9&%r,_.^rL"TpW1p+$3&\!uGu61]7X*qGSgWjFY$?udKd`4]Bpa0C0#]="9#NiS8r$p8<JWL,X5HknhOU,dT2"[#>/`h^?\KVhUBpQU%QV(r7BN9#NN8T=E1?dBZX2:,pBt&?dlJ<H2oTm[>iKMD#gFfV;O1oWhALsQUR2DA'ALt-E&/gBVk8@.:7N:lc\=/K%=FV';N/c<q%;8u(A7[T,<dQhBf:IU3[3Ajlcpr-oC\kh/i(4;QHR$$EL@Y%0`>T3Mrnj3c@(JTN1Q&\68bfCC0Z+t#5BZ9(3>Jc?30^=Tj>cueQ%>)p.*mR<%o2nV\&H"Oug^%1d$PHo8`Eq7#kg[`eiqZ_$m=dC-V,2p.O,#XI!`'[bkfsa1'b\Z(RHP6\)hfI]=na8$8T.BMH(%*]\%T8+>ciqMP,ccKqUPMDCm7kn@e_p%TTKRSl?dRWV]_BU4FCnn5Y+,CeQ)gaUE5b2&+cT;Ybfg[f9\[0#cTd&rK$;85<!V=TC(<(P"%eADC1BZ"ihkD,iQiIN\@o'YWX\duPh)CTji,k:-lI1`4a^Qthup,6E`YT@%1C=2sV\)haS^4,07,Xm1:gqsX!-*oOZ?'8smrmA,f%P*Uq@_:!3kO)J1=5.D00=I%+meuBZ'388=]h\Yj]Dncg@#CEFkSe">H\0h<9T*_m,A9Q.36;2+cH@?m;]@:Z_^!iD'cJtJgSj37C%WL*%QVjP/@+bP`a=dR:kcdS2DGl"3s6@>I5N@\t9D@Z+mPsD2@X+6eqFjA*!^4s4++#E[dG0_>ZY=XmY$br\/2iUj8>5^57k8gVn%q5oVB^WSWOI<UkO9h5?*gIg9!d5t@PI8aI0T/1:;I/_OL`(WO'NbP#]91sHjBkp_[RTU?5,JD=-UMadup]kXD5=TKWJ';r/l>5Sc%g%ksr\(BhU5K`CQ74`ZTXs$IHT]T>Ojm':98/E)E9Y"Ch]!?RaJmPQrMkMlJPPm/#oN6Rf:rQD%g*_X!U/M3e%h,6b2?Tq(ki1']%d/+=R0KUOUS>JO1-*3\#nT0\hR?dSd8'Pj%PGf<JTfX)r="FrsG%rci$9IG.HO%$,W86p?XTq(CnH%d<UHJ@9b#&Bb/@ksKZIF$D%:*^bk7O?[eTA,@)B%`YN/s2YmbZLt;`+%(:.iI^A,B?0UE6"+jmrg>H/JpM:-]97.S>JNbCT('iZV2`Vp3;Uo<plJK6oBf.O=$(L%nH'fgs0IhA/^$[g\n*40B0VAZkG2%+Y;_Y<M:G!H^F.3kc"a<7WRWV9s6UP*Da.U:AhU]XbiR.YH[D&bXM)$A[3W9o9RedN(^?P(%=MRZoTYn)XJEh[EDgUYgGPZ-h;Z&-&DYSD`ACTFXP",f_eDeL2)U0(%qP\o%[X`1/nRpr'1P1L`Aa)b%=Y]FD,p=abB7/O;/\dNS%k-Z[=`UUpUqe`FLk*OfBqca;KGJi-?]?Z^HGM6&ro5H&ln&i*Ujn8QJ)[X9uc7%epI#,h\HW$PL0l^11[U*B8MlE,=Q(rV"!8GQm%&BAm*"?b<NnjjS2V`PaYZi5Gqi88/WO<KG%a&;>IMq4ChPG9p9@eXT)UeNL]-&T:W_VoEa/ieKc4[$p7"!"af^1ZBeV+f3NTLT3V%hQ+2^o1tmE/f)!+5TE'PPMl.r1ZlZm,,X$(9_rso-0n5#[hEJKZ!!H%NLn[qbeEbn[W]H:g7#'J'_eWn.HaN_)qhV%'[b]M4ARd'%\ufY_!=aX*]q3Ra)-@%?oeP\M:m$+<OlY-3]aT;#QeD$(qP7r[HOBDqCINB[<AdYXle9[kAU8.p*ZYGLDfY4#c[3e0p*:$Zs/O:[%*c<r-1fRK6m"VF&qFo5/GWGUq43#.(&aO+hnkXlib;`Flo0JGbihp8XDR(nC2^U#f-V<0W\)uXR7<ZCFq8!\^/@WCg7q5&7M=g#F%X7AShA(A4qSiS@9*2RNB7'"ZJQIoru[W;KQSfm,Gl*ptQZ!@o^/$gfr.p[(C?Z"nN$cPP=f@HIeD;(K?fERMa!tWsAq8NTDA\sS2%?o')`JtXs4R=\M<%Vr!ODl/U6Gt:;6GVb%+r=*D<$u;a0""Ajt8J3W3^6:AO7^M7`XtAQ%RqI#75c4tb.<bg\b.!+\Y`)]';SD.l%@'MDl=V@#=kNuJR>V78JWMtm%*G;@V[GY8(lqWhhHo&pJ<1D<W^'\aq:@i?,om(a#-9_B>Va7n[1;3=a\ua2[hTO:9`?dW<K:[?Z%@!HW]QGO]TcRKNH8&%7^4FCe(TM^?=F)HW_g*/U9CL,mL>e$O#86379*p[%m>AT>+b_K8)2gm2]CuI<dN@S[r93dc#+qQ%'JJJD9%giq7LLC%MQeR:f'Y574\F94<D$W,H.Y^l!nAAZ3B^kBtLG=u3'RkJr>?g\Yqb/[eMai.BH9VeGLHSb6p(Wd#$J1*ieOBLXKIR^DJ%+YF5B;@9L7EMsH]:]Xo[#*+\oN9-a8))Ng!fl<LDo?ff]((Jk(.>C[p.e'9?B&qpOn5QWV#o_QO@rY$5d_^h*JT&P2)HXg-/VR0.%Y/K.VZ*YKS70j?3"lrLkV/2+ILtWBEj;09f%;bB$2FABtC]m][$X64J3"[l'Q5$4uA"!q2maTNJ_8ih9!\ZR_<*)juamteXWA,2Z%5_<1YALt;I-=_()!jX#.1);15\MsX'8d"2-!"g+($n7X1c8M)hArNd5E_<9h`?"J/FYF9:d/3-!Kgf06B1#``<@HmB*G%g0Oi+/S%U`j!AHo1=1fhY%[9SlRKj!Km08T?2sBcV1_->k_$A6W=XSR9H&j@-P%kB``2"l)6l4fte?kNeqpADZRqkHaZk>?rH93&sW*O51?+%02bS@h7T7%-XP(YnXSi(ElSSKY`S^qmX^)Q-]9*tk=^:gG&-`/=*8+lm=iJAcprQ=H?VMKO\jpQKYi@.g-'!>5WiS"ku)[8=Zm<s%7IW?lp\!EqT?H+pT%X![%qa'?(\Vgj4[8XB4?jUO-?nkA=?JfkVnF;%"'jXcULT.`lg5UGfT!p.=t@?OV;8_4/^biHD&FYqf<T0H%cd;S"J7[F!TM`L.IN]I`kiK;0'*;Rl^>7Vgc7,pX75mb.I<$WDXLO5"aMq>4,21JW"P"<UE8C&BgaGg!Cf)gp7S2CgSX]&M/RGT'%N/^Kt3,^u]kLfpsh0I/"s5!:feI*0H-1b(6jN%"$08]"N]B_HMYHr$OnSXBl2=SO/SUG9Y.dYp9r=_=[TTlE<ZZ"!uNYUdEi"5#G%D@:6mbEC,Hb&cU)*q--ls.$@*?SXRC[,$SDba6lF+8:=5SDD?BnoC9N#Y?'Lla"eFID,eIe%QQ#2>slE#(I\8FHk*$QPs(&^hA;E%^(i0d1?YFT8mZr-rR@>O/fr3T`me5lm,DHVoX_\XmI]X?ds$8@]4NdS'3%?F:IQ@N@OJ+/StF/d<h7#4WhJUR-INPi5rJ<4<*]-@%:Jbp,T8gc=i8'UYk>JW9/e9;WBn2`*H9Z6tTKdAHhWrG(b29U%6;Gu/,kqm79fjdS<`7=fpn8r)n22prasQ4Dndl5-k?PaM/(WU(%oiAEIq)c-=TUV^obIqA*,tZ9D6eU#N4A[7c6YUe0_)9>IT^Xrb-1gX+c$pA`nE2&?-0]oO$&K5q&-%A+qs`\XJGtasV;tMEr_Z9g%n\qhf/1F^hP2rDGFFGMMgEbYdaZ!LgZDMJCnC&uP_A_9T%hl\kZ=7>rgU<<G@:s^Z@p#L?Ap"1`3Ntj\dju`EaFNN:^[&`T!VITO%D!P4jb$(*s"Bl5'[.>E65VltbVNb(\;c!At?8o3jX<pq?b"AOfe0)h3FG%IBZ^k)j6O0!E2)Rg20[m<:%nr7oL9(E.//-kt-qqoY%MJ7@Za]V8<]c\W%(^;\1ZEagm)5cMr:<cBh+kZt(ALqG+29DR8/ZU@S3h[D,jt!?BAK=@IV5t/&)9fO"0?D57[VC%o"kH=CZYD!n%gOYdF1C2G0XldD-<OS'Z"Iq.\Q,'K&UhLa_T\7\&#.%"iEleNQ8^"qO$V:!-$sSM`A8&EI&st"WAI3ZeP>.]GEF??ZeL=*k1/*[X%jK,AL$G\JH-93bY[oIqr=]8<L9ZbGS!nBSl.]VLDFA%Bu3_1TR'Et2#HSDC$9pQ3<WUQd"1RJ?RG[VM<2,s%V>1V%OgY2uS*m;-]%@Qgc[Rc,P]#AH,J;'<S,+D<bP-Bp\5.a_rj1CI^4>9+,0e`qe?\n$+a=BX2$<%eS?.pKIMAJFctKT$0+eIA(bF;RZVN\CQ+d<#SF%WW382N@H`GV+IZl,\Iit`NB45[])'M@2N=4P1=L[B[H'E9QZLk,aUkt)!o%Q%6?m4*0?"G?p*-IX[pW%^I%$#l2f(Zl+2n?K8A4k%a>PSseUU+%3S3pTkR?2N12YS8]Ek&0SWVE`-.oO<B#llL#KQqJ7q")h<DWc9ZpU\6"qZ_2kYJ/.Z5J"^06D"Dnk!9&!"EC0L]Rdn%68b,?,%+moK^(g48s\Q@fnukV0GqSh%4]a6*AE#r+\W*B!=Dq]0;'k-#1IR6qo[S-8:[TX@Y:XUK8Og-1)S5uO^e5tb7k/5"bqgT%AuNLKbs6\&;&Esb%@^dV*:'u>!!AIA_hN@]#A0ABiimqKQ+dX%>,6"%3Tr7j;S;+MXGg)cB#6oh.VF:r$F\2IkqF*EXeLsi@5,[a%1>jiPr%-TRR>)(H1I3>(p`_C"FH0dTb?:KZCr?AN;V/u@#c&+(6rJP]`AB\2'*b7%b4/O6B'>mA2%07QVqN";5i&*$T[#iW0GqG,%c*.n\:NBj=(HaD88dVNK/C7;+9']DA_2q7B"4M68>+c-Q_djlo7ti(K!csY.o8!VTLp/1.hJt;_!LnXNQkU7&_Eb="3ZLDXK"R&_%7VYIKO:I5D-pZDJW!.iL".3LhReL)q,`[,3;&3gc6hV<@Z_=9Q^j]*jDr1W?<,i6Z7Oa]ETXAp'+oiIfKY0"n`+]gkKPhJ!!=#N:%<!^AZ5c0Md_mkG(RMLO1bG_7j@UNdrW`LK4=%On,=:m'*T7O*UF:D>+MQ(m%K5&ObFcR.9@?;e`#beLW[E(<Z$3M8U[XrS4TJ418%;cT@B`H!Y6l`sT#J>E@#>kTQ]JE`q>H>.r@c*BL4&8WsSiHiQIPqA2c#ol3]Zhtq5_[0[p'auH6qI91!%()>cLKPs!pd/b5i2o^W%k(/(;H;u+*?+PWO4)0,]O;Z8saklnI8/t<0*Z4qpBGrP%^gI7i;>`,=$oIK[(tOkb*FOuM[WgF*R,qr]9RWAl@hh[c3Z8##95QLg%d0fB[5V:V0fs>,`QdB^1Z`B'H)d=JAZ4/^L8dk_aUB=0p?/^Rl3nc@Wr2kJsURI'r!C<@s%8SF?%;i?=71`RD$;UM,XQkP?1RNpg%)49@u:4O$hBfPX@0UVSCSG6*k9k97"^d_;:0UVScSG?Gp#smKsl/(^@:a$UH#Qm^g6">FLBF$EA&D+]V;.4h`(l4KZot_%?Vf2*2%R$)FHM8_^j)`Ub(0H$`5dq`YBbcoLSi5VZ="$\*%WPrnNrahVZ]J(:q:r+9.^'>#fLT!HZp^&]NXC<oG/.3h:Yr\88Ci"hs$@Xj[%."IF8BngD(/$b1`@!eBDB@5-B9OgMG.ETM"faG,;S<UuoThB7Yp;9SRgO]^P?ns,i-]<rfP6!Z$70->MApTsVnBsQTi&o8T&k.B9%a$O&TZkd%1H@o[B'sJQdaibEL5uj5+H[njW%4X%L5TghK`WHC57E?-KeVI]FC'A6ARt6B*mX`3e!\Q+@T\5'r0c4".Wp%&;bVjE&%MD1E!;"KLn!E$QtckF?cOjOcI<<`QU!\B)/K6boi0JEtNS8*U^@"2hu#0r"dLVY7<MpA@)S0b>QLD$)frZVbs'O6-K^POXM67]oW%NjqCW>*L73ntH+$#mY]_$4R5r9d@O:orUMfBKX'8ZQq@FKY@G_6fJ+j9*&Y'MRU2t*TI1/QY)UbFL3:2qK.Z.(nU-qQVnu*NS"_n%`<\lE-H6=-04(jd<8X'5YEB(r\;141e8;B!!S%YqYcg6L6D7=#dVQ6<!A=X0W@%Ml&&9_"I0(!-4&H(<?#Y6MgT*%d'F;Z67KGo0%"G-s](_%+60J2U_*]05k0PDf5&=D1eWV:-`Qoh9G0/*Q;TRM<bR-<(IR0OBTFmI"e(:s1M(C"5@gH2kEN;EAp/N.qPQ3RUP!;6)?%GBK=anm31+jTU[=D.q%_?jFQI2_W$Ik0=?d"u(![%51Cbm_&=t`r(+U`rQDD]N;&IWhTL*=:QYo99m1M^^%.S`=J_=^51BK?G=3f%0[lte0>]:4kUk,F"#0#f$W@O;LL`"P5[ZuXkFKY?&-gFll%QrIU>]?,^+2#&?0EIdI)/Z=r%RE7$fi0Ze]Y\K'O]jtgKqOcI>N73%g.mBWDS"f3fDoM%A1eU)0]SP!*I,d6@Gn"e?C6:]]#MW`#Q_?0HQgmW([F$-D`>X5-@5'F#_C+;0Jr6F0\Mi%mO\UFVC[JD'QB+-%),4+^(FIB&.S`oK)"H5^XT0JJ2e6h])*N/l%l;>KiOf>,)r(PG6a)=s",=l=n;Y8<f=__,%(*EN)H!I3%5@(`$bQ\a*<b$cT[_>>%7fsiL?(7uuJ4!'OGW5PU&F.#W5dl>%(8o#7k?Sg.%tmgCSN@$&9J;k!+l?G?&0]PAk>\"1M_G)\lQ[L.lU3Q!.q'gg1Wc,%@9lE!%IQHFq=epSc:^@b=F'gq4Gp2K+XKI0Y?#,Qo1uLS\d+i!7_/#nf&LhaGj'^@fO@fThm$A"<D=/njRkhI=0+m?tEpd(!o?mj.""&G0%)idX[ph:2#%XtJe3tu,ecrr9G%ka<-lSjAK1rMZ-)Jh"@[O;R.Rj:=.Jn#?2e3$'*B^#Yob4+MP]VhLO6suZGPB6soB+WFR"JVAn%7(JC<Z@3p37./i.0Ul1A9d$_JHpWXkB\4B5b[;32,AdQp:LQ:R2eC#Z5_tA?J,k.OMU!8kc\4s%ClqULlQSN[;AGasP9kn_@$Xk2%R6"Nh#Qn"),GcYY6RI?"@iD_f35[fXaqP"(87EH.`O.c?A2+X`7\eB;JOWP/J;Xlb5[ajG"(*X;>Tu=]"r0E6&.@Wk6G`g\d04Da%M*^6!g1J^3FHllK9-F;a+>SI')!K+$-5RH"$!^&cp:+WhLh=!MeMVtHBQGcM:rH8YKndgu@4VO),g&KQ7"%[q$\dek2L$LCPc<pd%kp9kt#N0d%!4-f%Y_@sV.aS5X*UP!"&NNGtfJbbl$&%Wo";dNI+KRN$fF+N@fe\G!WJ$g#`e[4Bi!hGbRQ0.-I+Sgi7>9?ZBSWme%%1ihJ:^@p+LP^%\iJ4LB_$Dj=!uWY%e-!4\V:[PYO[UjSN&I%7^p"snh'?Z2#=sN)!4,?f-85am)K8DD6;rVt8.:ak&/%\paa5X6%@u]J*@>k:8496Pt4q)._O&:UHbUD;;E]-I5oCtQP:XubhJHYDB`oNLfULF):n0150T?/LX8AeOjWQ1^$6[7?Fbi+(VOi&H)NO+es%j=m*fm<4B%lO)":Ej@*:.XM)%?@J"TD+RehN7=f['ShFD5R8MS/>:=oCkiXeN!p[M2LSB@&/\:(1)WqA6tj(<6`m03g0%-(&1q*%%nIbBDBfVq\V+.IM3NcBJ@`'YQNO5(S8;^t0MnMNZd;e-dYW^'(JoL/[-V;@oK.9^b!X*dk5Yh3%2%G[,1<rHdP/D35[F6LO4bnHs%E!c,ZOfu9Op4s+:p..3tG)09oW)_l\q['\9LUji`9I^7r&l&U(B-n941.8muMQ&.@*-<TZ(sCUdX_C_$Ct&=r,0WsKWZ=k"@/P>P%+`ssT5_sq'%!(%J6XVk])]$?5>/4O*J6&?iLh[j[FtH'Xa^8Qn<Rk)8+eZ/P)5>P50`n75Q5WaT!-:UmeN^ur@V-NY;&mH,T#2Oj%k>pYW7#m8-9hpnI>[=Y'qW1Fm<O@<sHpn^kJ@BI>@O3A/-9S5G4jDO\Jk-Oi;+5O3D]+<jmH6>e4Q?,q,@.#`DKE,>*q=HDX.oD'%Y+j;i<bt3$#NRaB<7-NGP!+*pl*,#)coq_tF\tMGLo9&;k3+j4PG8UnFBiI!RN0Spl"8))2pPFMd-J!7$4>M&NEPTo<fKf_(_8A5%++kF0/k's7dLBEVg4]fLF($[+gmVJ#\bH;6\l?3KG6o'H`S5N/8&I;4C>-T0$H)Fn<K$uMRNdOl`W/ue&dKphEgglm#HNU1Ua_=)%>gJYR_<M#RZ0HkpU$>\=N`?l5+$c>AB:*\Efg+V8EsF3"7LW;$\X]c/68^M-i-CF+i#tZ5oms_7<'qqcKa;O:@4hZ;RTpoEp]O@'%<4VpM$$Z9bhfJ4)j\PYj2)./:-5S-L=JMsS1VB^6Lla#p8;St?+\%q06Pj9u6\KWp0LtQ%HCU,6EUiS:.<7lqVj\&_hDBG\ir0`u%;`nVBh6t:;E#4_t`J&(TL*]`niI\Nidd0;RQFS]YrGG=^NuW6C)dSn;B"MTc*THNGd@>589SeFb$]Ajs`N1B8OE%aH#_inG`AOQ&%ee1^]/ck1QI/6;*`L,/Tjb=2!EJ"VT,tm'g5paAfK*pMT,s'G$Z?-MKQm"-aYCXk>8dL@p<P0@-W9S.;g";:rC2cP,(]^lgXq;Xg%3/e*S/DTBbkoh`%!!='O.&s=]!6i<j_dj;k!5i-KF;d,[!alcr>,]rgU&csk7_*.C'&'X1-S*Xa:&k]1VQPfQJ9jYIWFnO"@(8d3%2<bBg!aoPGNu7o&ELB1k$Ac^:3.qN26l:o5@7:BY^6&++@T-7+D4LBfNN;b(-:[$&\0oBV"e1T1<sWtHSlg^oQ9dahUld5Is2&&=%\>1dt^AoV8[Nc>Tdd8lSket49@_/leMgpR;-iSg<Jo-Tkj'Por/icO$+TU&';)9U!KjnK69Y6J_(H+Zi&NC]^_U^aK5puYcqpomc%PRKY*e=9)Ej'T<59@>9-M18rh/*oD;rrS"V0dTNQ?R!;Q8c_EA?b@R1rl*:Tp_P=#M+;R&S]DRb*fkejWHV!<)!%DT#E=3VlXUbi%F5gQJ@ciY+FO1=&5E1-^EQt7cI:M)iIb?E1R(<i.q')<L1sKOLgKN2!`+!O"'pe"G"DV<%Sh`sF"Y0]uL2&5jV8=C'p>[jIlJXT\%Q4_0Xm3e5Ka2m7^ZN7o^k7/]k>URXZ:^6n;bSjm>.*gh3J.!q<b7Z6*CIFIWDid>>[^e)Y")^gcQX"n>03tS_Nk9tVS`9*!f2gp-%\?0B'Ht4+HB`J]5=+np#6HD&KdE"RF/B\_Y&VN]D.9J)?ib:E*3L12Zag$jc5&N`-WZ4Ba;pK26hE9CrZSf=LJ="ZRW2!Q+DK;#T%"riG]Y)=VP5\s0(7'^*Sco;j(ZG<TaAWr$J@&?S^bArqgTj,1#-Wk2p8Pdf8cVbj?`O4@Xee2RF\RbqK97Y!gf](Hp:'E+ca]T)s%(7QM932`aMV'Ec\.g`[tP5Vc(0_TC:DV7ukaOHAQ4c'`sbu?r=dkh@6!%`AUnXqhH2cHD9+)jVf6S:]IQr+/X`F49._cE/e<eq_?%N.oAqlE#VBkDU!tA/Z.+lYHl)LA?D5B@*G*C.!RI&Vt!rT0gFiOran^dDt*b@(&C*A'k,r@`sAb67J!A$;l@IN)!$3"oF@f%sKuU%"D2,25[7#R+S7h;Md_=p'g%U_ARnH8WNa>Am$]l]%B@Q!^^NET0;_#c!jWD&3pOr$`=Puli;jN(S9:c!24TXTNhgE6>mNAF:]a0i%c_<rY!LCq2T/*:`nWklj9:Dnq#)CRfRYIr&V-N`Rp-[aS6?J&YS#.?sXBWc#<Pej9o5'?T$)W&TKG_5Nh!%QM`ns_Jl3ja&OfAkY%7`Ju\G,30c1cd/A?n@I=L8O4jnj&#.C7_gtKRo+R,oGu4g,^cZXCdBp(UMoL$8KX;Ug*r&6c0mSCDT<Jh&02%;6tak(T>0%)T#NT%J^%P49<q;=e6t-uCfM-"(>O5;\:,BfA]Y^!NQDp'M\3hmE&M&2&6Jf<0K/Y52)4tn^unl5!`dIq&1FI=LsS9)A3l;Lh0c+/3(L8c%$e=/NDqX\*".1PWJe<\J!!oWa!e`Lm_]0H]RN+5*I%6Up.Ym,UE*)o7S`c@k_@tO35o</sEFGY47pD)N'-XYjC#U[:.+,uk#sp2S%k0N1*!TIfRK<_soW/914!^>4n&?''HL-RaV7tg"b-4AL2DbJlC+gRa[6<G*K`"<QCTa]&C/<C!t-:sZ1c6tq?1<X&8$[>AURlEUW%9MUkjE_a-k/`+eE`e/:2]kV8QGVI!N>o)"/EVI03X:DNjMonQ_6no9cgZ%KQDT@P+B]>D%+[Z'3Qoep9RbTX`iY0>599hSN?-:iF%jNVbdXK7QoQFmK*mtU3Iq't21mD5W<$\VB1M-dJ=;XHf([^e)Y")^gcQX"n>03tS_N]V?pS`9*!GJs&"I)O/GbFEcF6WT`u0s:;M%cL`RlR7]8/"]<4^?]VQT!28'UaH_+])L$#-aFk/$$Cc/$3-32bL8*E\5$Ti1-OW9[pTmNZ-!$#nbj>HeSYfd&,iN>P[\1OZFs03,%>aW\7[jIG33]GSo::aE8r,rBjqo%B5U5.^'/;V#k$]FC\`2k97[W`B4"Q+aIid)FrCC-h(_8)*k7_`UdM<5,@EY.skaBigQ%=rO!%!apc!>Zp?!!)AC<a.VjSJij!+V?3-3J]TX(7V=C>?7=Gm[T/3r(RQbK3f8O"(CCA*RA3O5$f%C-YoPpU]c\1MbW]Ro"`?mhSH(66%Smp'B:Msg&&BD<m@FVhaf_0%I>QEjbVX<2^/4kF>YqMJo(m.cM1?0Bq0.8AD+UDPV[mFK7$1Rs0VO=uAGZIi%gBrW8VQJiG7X2TD%m@u<$:)>N(XS'cIMksGbO/VA<E^N.Ji]MaI&d!86U?:qN(Kf)^16[P$(Bk:pp3K<A5hqNEC+`e"m@)_W9Y/<,9,A"]]$3m,iWVBh%_?C1Kbeqq`$Oj?P@p^ZiS>l9HN;9W>mU;m>2=hK-kj-YcRE'R<d`$imPEW*i/co5\8J_UldRD18GK/g5FFgUhQFPo%"gCn32'lNN%6u,fE)j2f\!_<c?klTLSH?r1"R%=$X9";Z[0#Luq'/"M@Q<6$O(Bl6.lpO^Zpi<HUruljW^<4V=Jq,A8:.&leYV:L`\$Org%p52d%J?<RpCRRV@4<)6NQpZ*a<VPgE3<[u?9k^:^UbHK%c5$j05\d`Tk\'e(G&DtT.SJ(pXW]s$M<XObCC&q?Y&]s'(!IbpbgoDKOG&8s%rIrW=_Og1qlOr=kIVrIFEsN"NN:!<!"9W#5+0.K$>E/ub\QsDN9gJ1':&><6#`q5g]7a`)!ERq`CC""TR,CGL#ikl8iKH.[Kpae$%^GLS-X<@uZgobu*'8Gtf"=Rc92MH!2)FM"8`\tO4QPJ\0]=4Dk+i)*/_HaJ%j`^BPk>*5\Zb=Uo,@_!N4%D&\!,:3d8_PO7(,B;T%L89jR(m7(,NpIXJ=XVY5c-2<I(WMQDkIhU*8i)_8AJ3!aNcLab6fbUU:g`5qR+75:OE@M?)"R?qRk]RNNS7u7:8o!XF=p]ac6-$_%E6XYDX^;CoXV&l]9@ED60h3q\dLU@8^OnPeIsQ.7i-b"7%VJ`n@@WJW+c>NT;q1`!oJZ(b:p$4"2dQ%(a6I)ECe.CWn#R-^8=Edk%6%\;La;!N)`/IOsa^a86/>!_3,aItf,H2f]FX2eY5i(+]6BSMDjW2<ke<+<SAFf"3q/.J=20$O(ks%>A?uWi(`.p,u(G]IX-AJ&4%Kr@o>?LIc,j.>#Va`H(#[oXM-crIC@"D$,c%lq^H_\s9nLn92hn\%?5*a[bomhg5LaleB$JkB[3<Yd@tq.h/807*DgBV:YoY]/ZA%Kp0:8iK%>ai)JNW$pUHC`9-Hr+]?_gg#5'e07n>33"B$be9ciW@FZpX="fc>=uDMr7"E8b+^_D0)-3$$JDn>^rD=_JnFO+p*!Pkd%5<6eKb[">s/]+RN4:4m&/N7qm`%?\MBVjOq9mYq>r7im>a#8!K7KIR`!"FJ.gOjl%$R";:R]FF;ouW8E?J&MR9KaS"7b;&d'>g&e%Z0l_,0S[dK4Zct*NF>mE3&^Og(WOTC^B`'WhW\1pA63][dDM/$o4hdm%,&?g]f>!+,0Gp\^)52i\_1`+X``\%?:_/._IdRuA\*B4%/s!6Sn%%ldmT6aPQ"&AjZSYG>RBJLp>tBP=?4nFhDmQ;RqKP:?5o%&hQO0k6ILutBQpaqNAf;>1<L\'s3S_mQSD:K2Th_s5@L?G_%,LDB.7K$q0:DO(4OFp$[1XF5OWp=jE&N(<Fbp>6,=.^IE&B59`]BON;X/@2+HMc2=hTag1IFpGfC*$]W^=CtY<Sr4?X$8_4S+*:n%ot^:-]XHAXQ]P9o*J"*galB"'(p4I`C:CH@otQaHK,\%@\j+LgRd:<aTN&%][fV9<Yg;!7Hqo;`8Rn>ET;O'3-XrHgNOab;1`hcE%+>f,GQ^qV!CN+"0qX0f3#-lr'2BK]M7_.t\4'cS0m#5X5BQHo&GHVD-buK]f^0]2u^ueg'bM(pDHRIEM+ME/#f07ieG?3uQA"jrS%S=_j`H(bc2]\2Pkq7#t/_r[Fd3A5VHDAVi2?<l%el"MrAZk1XFGGDaknP&p:k+HPDJu72!2!P(de,o4:T5NZ8VQd7sA.0pN*M\WP%q7Laa:S,<@IM/>KULqbp[kp4&_*RqAqlTY55]jZ/<U*+'\!,]u6IM#$k,d8#ak=/ugu7eKR/Go(j#1669J6*37NS`0eRl4X<So0S%0n&EA51_[`L`XJk0fE\M?CS?ibEu!g\d9"g`tBP*83uV[Ff`[IFo,^H6ACMG^W!r/NYSfPSr7EN/H5<QRu\Qo("]"n(4[7F'PB:b%2#V]e/N^#\;k2D5?95,AW]7%6E^,=6]lR5J5(9&8I!(b1%C0f/pU?gO0iqm);,mh>2!R?Sg]@ij6r-)ps'-aZN%##R_i@1]]QE>@%`a@/&%:1`s7TW41[!f`Dcgoq'E9ZXjq?(co=o(3NRWr5FnY<!A)tCU`Jmq]!c4UqoUDVHA`tb%nQ&db$M_,=!*EgY,Vn2tTrU,u,%1bAOr)0R-:Ee+B#U8K,4HnQ'f7MR20JZ!()04#Co4dF,>nV1P'/Hl&a07O\T,,%UAj::mm_Veepo#FU(hd?,m=Wi*rC>tiG_#^_K%G>RBcR2d[!K+I[[f%Rg##EcZ"IVUPHB#LO%K=O+c>W1`?,'aa!EP'=n/e9.60R*]jb-4h"j*8*:?p:Q3D1ST(-+=12Opct;h.%Y(%mr5LQqiZ\966S>"DPEDL6IO12^Fg44b_8C]o!0W>66S,pf+_m$Uc&SmEhO&Gk:j$CKYfI.K^B%mQuQI>q8njfci98SX&V8(!6%:q%bjGpY@Nc$Drem!JYq'A/F/^i<Z(;8c</?QFZZ2t+(+`D<\l=JO%<G=3<(J(de:<\h@:Sk1H'\k(Q9CD,q!l@//f^Ib508MCNdAQ%%$G1d5(?4H.VRCQNOKm@efi\fe>UiEt$\\WWK>h`P$n.N_0O(Xr:6u89]pNGTpO1>gO%7teF?)Z25'*!T>7HWiFeKAa?,^%s9do'1%gWf+P>93:Y[-O#E+UgOZ9WupSH=/?>SmT'*Lu)c!1F%T?*5JTnqeSUXTJ=l$BhF)H9ku2^JEtlEU,c"\#)Q@g#!Z&=gLb9V"EBb8%ET(.<bUTS'QWZ8JZ)#6h*2tW%Op]UcFE\WqKt&ULpCtBOHF$m/R1L`8*hk8#I^tYVAjjl<g51!fPt,W9<t&3JN_'hN^[L"YJ/pH+%KAH8Y-CSPdH$enURi1b-PcLDCs-(35\#8MaRINQoHH@apN&>b;R%86Fm["lXk<:f79P2:I4?LtG1Es7#2,-;,as2>%5<gnZ*opG$%1+"e%Ha:8FAk%0NlecSkA0>P]6!#%L9sGh2m6+e$QQVfYgM(`n[/!YlXQ\rmoT*Tr7,IWP/n*\4kG9@9kFFsM[qQE^DJ%+[Ri/J<%;U-HJH#rp,Xc3&Qjlo+Ub_SR-0^`OBbbNKp<9.SnOq`oPh:c$+L^73\<?s(>@r+kNkuL9n&R0@;XGdZFrO&;`0a"\@$'UYEFQ?KB%o=8@B4G.[d?]<aaLM(YJaEVlUC1V""2_p!DCS"hQN/[AVm@QRt1+UO+0$T@<<$*pVQ]piL7\lroZb,dH@aBCjYJuDc2d&R(PEUaE%7S$=!n,+4MkP]4"a?%CNg(3<IgZch6](<T[qSf+44?VZto+@0JB*d!-q4)RQ95_;0G'l%)>7KGVg$ZtDrK2Lf&!H&j=AU,d$7`ID%72iOl;$FpKi3=]&QS.@Co9U\7+u<ZRR1k+4jZc)X`.mMp#NgkZh_euoiRmEjq(*/AAfd<ICo8WslH]-ak]]MXXQpb7acL.]+_OPp%HHlG('2Hj(c'6DrlXS:Sm#d&[<JDe/4-2;0^k)^:;iiHBQ\[Y^F0^oj"s1tYH1='EZrjeaD-aaFJ#`d+A.HL.d(3&#F*U/+oGLX7%BaeP.>_(#:+9[)@c`A<F/&MKeC4R/h^1CqK#dPK>@D=T,mVI]%?']cEp*$UrIZMSS+GAX=@VZSJ10><NR>r"*%O$c'D]YnU9[AhC%M%#DmHpa>5O$\6nZ>X%bQVpud:0>Qi]G3C)49H%uULPKYUH6^U+<*=QJWS&d+cG_dXbtRq,n$qj+NWBJVE`ZYKPsLM&g7@("PMN%%46pTFN-ZrKHWqB(J,XLY2(6];J'Z2aen9Glr:l")+.kG2>aOBIfr)+\rm"W?4ouG6B7,UHZ475ZJ%2^PkXGo%"rf?E!-SA?O&SuO%X/e+hp'G3K%C72=.?+UqMr^C9#ff5[1>KChg]jXfY-(Y%!Pi)*06KHaJ`=Qk&>9sC]?WG]%IZ+(*9-c%Te93W1MkJANZE,W,7X+?%"=?a4!*Qg!1dmWrHStp#C]FuA]nef;"URL/QMp\NVQ?GO:Cs=f?Z1mW3>h+bo<uU.OT)2Q!G$O*q*NBMV+nI:Q-'7rX!?64Xlt2p%r,>&&&\"<821"*\;3X$CkFVN.&nm#hZ#$)^\lnoKai;AD,.HHre<<,r8_AL#qC8$+0Sd>_>!QGabd_IcKis%Y1e$5qg'_1TJAJ.I%M$IocW--LRbD;:<8IS@pA^SI6!J9^,+(Ek^bITf>?^>NPE*">#YYu9pp%drC>W$!Z;%s:cR@[o!RQIHX,lY;shLF!:#Wg2!mHhTa%^:73+,SSJ@d.kL6RudZZe9?7INsmYP??VR)V;;>'Nq'tnp+aQ_iaf0oePRf(+L(Bumecq:%R9@CVp/,i(u?h2ZCD*;OQX37bQcTO%hTP.K^be73!0s^j_e"N!pkI]K.=9<g7"\olhm8jfj^(o7YbKk+See5REFqob4d'u)MA.TS2j>*9L<b>]ChEHdDg^g=;Keo:.#b*E%j9K`q0\^h[+)d*iY,VNY<5golMcdZ-C'OmlAiOnNAT8:3]&I6W:mP_3Up">o'9e<Lo1ZEp;6*S21+clupbN7h]RftP]Io1(U2]g*%]+Fd3+H'h[-ot<s7b*<^\NDfdEZBT/o"@4h4B1?TF:mn52.M)Jm(?eSbA6u:87fJ`]oWH#1P+;`?="kX)`51\/0s`aae(FO?/sq6%ga1ma%"YD_AVkTr21V=#<5^8C\]o2q7'0*b@uuW/de0ms--`%DZdEbn$9gAoCI#r'KHO'Gp/XG8!7S5?I>],_a%sI(=S:aA#.CS:%JkH->+%pCj3ffdS"+5Brn(Yo+f,XDm1Ck$c/&u56i>^T[2`B7GhX<A4nC]Ze;=&mm;Di2j6(@IEjd[1)mGiZ_TCK/cs*id$e?`Gi%)*>VK5em:[@nmljF"3-/q@8rtSmN?S.SBl>1'/N[@P\)ag$dbN\/t@[qDNd+]F!mo>m<hIGuaG\GN:+rf,JdQk>hpMk1.X?rMn"G%r7mB'L!f9\f/Q_*"/-.\Xf-%?aDLnNk<Oe*OAX$s*f@XTIeXBE$kr.\(333S.57A$>t<n[>LJ8f1jGlfho*E[OpL]JFlnmA[MW?2%N$ZQUH[dcBUcGdDjAu#^JPtlnSZnNE\u-tO>LashDbf$jr$16n5Ar#g26^%KQO\9P`@_s+kO?ZHR4YFUDHuo9#6!_)!:F&'aBOtE%@$)":X*A-G)f3/+gO7D#r+(oW.X0.>DA750l$2$nbC!NKf:ND#+'")XE>f7&TA=B87a#>\N`X*Cas4]heu*F@>hRV$B8Caij,h7'%/JXE/FP8W*m?5I0Z,qI@n]k`WE\Viu,Xu/sN<sT;1GUs-@9\KFpE3J]=I3`;="SlK9/.#;2P\"\.d+fHLu6hk9#kA.^[&@2&1'[f%b/LI8M'`MFB0u)U'3'=ZG4CG:%jJ4JQnOCI08`FXmC@qF8.S:h-2bh@)4'dPct$g#M'dcnRKSl;%u9\UrW,(s:Aj`gaBgU_ZacI;%@TsM?#g[,lRNEYmKu%1_c;13f,QXE&VE'0.?cbh*Rc_#MNZ)UQ%iJS;Ci^Jk=k\DR[n/qgr6Cor\p6'?^il#2fbcp1,ORsU.->92%#m@ZnKZ5^fYV;4RU"e,:1/@`/`B.GU^745:N+o%phR\-h:#XG+O?UuLbN5"8k>kl/*ICkDGo)74XX+ns_X<b->M:b!@:d`hD(`iJ%#D.8Ih1$1Wm>7g;iF0t#\a^c\K<8u]?-1XFYl-.5P<1G;+[KjCS>k)oF,5*JW'bT(U82?T78$gr+`$S.]UnAf7.KSG^;j'`q,Zaj%q!E9mm>m<ad>.a\h,5Ncmu/j12E`&g,iI+XOEKG*(/:U<\+.AI-'/>)]$b";d!SC41;pWU]_f;UNQA)oW\S>bCK7Z0)H'8V7iakK%2$kf*=u[P=:4_'Ho/58m)PrG8RB&.3+iA#_SK[jc[]Z]/:anF4;PqbD_.-;USS[5V=70at;;gtRC/I)9n.5D5Qn(&a6'R:<),]8C%K7+s=d-pX!T'+,<@-_=+l8GKM/!F(ndOtl)3<:oj1ps?4='AB2L27ZoedWo[+.h!e`>IGN(At>cDt)4eg!"/+18jm,RjlOUlG)jB%Enl@d%iVJ*Dp0]kZ<%r0*W%.!FV1#_+;g]NVl-gX?kUIV4-tr+cE%3N19]GV!jaLq(&A@"k:,?bC=R%Zk7u!RNPaVnF1PKqP8DDQ%<sT@`Cf//-pi#QMmK'?iT\[?sR3',YX]b:ci7FP8D#-'Wn[O0_N=A5K*FNiOk:B4u(FYA\NHBT+7S4JH>/;f1<=l+&$q(+3R7<"B%Dl-@ZK/$dZe=gK*i"n/1W^sl\m!554G#;\@*,cR?luIC.hPSDXEp3VB(;,flb.U#DdPHb+D3pYpTnKt7ag@5+0'bD*TGZkb?ufH@%o8r\1Z7#OmDRO&9MQ:N^IYHS%DdfK-FQ=KRZ=jSWGqh].&!G$T[r/>-3DfcB>G6)?/#eGXe:!=/k]aj<==[pM\]Yj)OO!>%bRs(]%J$OT@[A,6D"@ZphWEaT#*Q5=a5Q47,GnA..]C5Ru(4>-;l*lb\NXs]Y<tKSqIM\QJ_a@jigCQ!>&`Rg_R3K=A!BP-4&_WsAh`+_r%]?PQ#=<0h_=0$4LJ:9ArnhuiK(@07n7BbO`,.'SKfeMOp^8Y0-aHoMo*`_1uMcAG\e]4:&Aj=nePP7GTs*b*#f>et3IH.d(4ZV%U%j2Va<,t20h,`EW80<06bA^9N3W9WD!`[%5N>A!DYP7\G\U"\C8^7X:kl+>Tqg[ar``<Ip&+*ecVIXO".YFYfDH*JQkPo`;`er,Ja%_+0/-r2/4%Z&olj#59AG,5ut=B>m`!a^4fd<f.4j%:IM,OA7_C"8&qM=3HT7Brk'">u0GFF%D,D<ZY5,+(Z@869%.,cER2V+ePT)%4l(Etde@YD&bS4)eZIpn,DZ;'K;$GckCBEW)WX@WVs#P-R6DEDO$Uar`5"U@h@JXsfV@4:9d8-!FsRUOAoP\JXo]G:M:=s^%^7't%R5PUrOb_6$]I2q7"=%>EQJ>[XQ6ma;?q_Q_!"NE3.3WcK3H`cEpakCOa.F),_]CQP@&lY3a_B7ibpRY`Q0ouKD*/6Qgj)G0#_-cI%5gn^+AgDo-p[r5^mT0%>QJIMFLYu4q4=uHZ]b(SU[c/5_[]8ct@0'@N%Be<Q$D6<d0:.DB$h&$N#%W7qj\duuHo_nUf1j#[k&\0c%**+c&m[9>R&&m_D-$H*QW!uX'R8WGS\Liu-LA>ogO/9Qifs+GMC'r&2:HeBcibNM-FO+W[WQ8!dNB<4Y\V(h(M?a4fOfFaa8u/Or%Q?OZ8,YQ-'`M.`DF^ZRkpE"t!J*UQ?ECIc9$MgoXS[OH#/j$AYEq-IWkX8?+O_ZGNG.+HaOdLC1+@N#cVF8`%\WEH4TO8hTF<5;W%:`GF`QIPuIeX%TB[78JSBKc+=/NJqrpMC:`Eeii@g?7U%m%[<@9J'[BJESD;eBK3`PHl_!=<_uG"3Oc2:FhcIV$,8RMtZRIH5ua-%`p#_Rj1f2rcEEf'q:cMZ>p'(aj+MdNOUS%PqG"]"1ARJN+)d*UjC2/74a[e1Qf;B;6MLg;k(p#\7tXgE1krnI$d"hu(>,uCquI^0%EX%^`CH"NS5pOL+o+g]Mb<kH\KjHAsP_lYbG.%8QdgE6f,hn)cQgECbB7rk?YA$5e]J4REZ[Gbe_t/Z=mI1NW#Z=;F7t&CEFIPFu%"P&.O"9bO+C)=1r.o6Bd%3J+q&"Sk1=4E&JSOihX4ZXd]-lHW7Fb9c]7s%MEH8=+g87=871:)p+H*F8+Wi:X`d<,l`f'QNJDsNI6%&r,1XFkC0?*<d#QC=VuTUC%G1#=+/g)<<[AH\*UF[NFH`9r-6kbh4bAdK$%>)5kTM/CG]9IS@S1N].n%/=5e:g[[igHU!\lA*_^>%fi)tl6EVK8^OsLOh\OFl4b6]`,0]0OB8L'cb&-PI-uo=fINY^jL.V`bCBH9CNTChRYQ([u[g#KmF*:5!J^P.4Btd2'%X3nYq$*L8%''J?,nolj5E&<,Dj3)^+HNS3b6grpP[u[m!?sMn'M8_nQ!8bS>BqMp$"-YQZd>f)7agguCZSPIH4X%e/OtVVlaje^*q;-JtS;ggH%ZU%lq_")C^p8)CQAnM(oS#:MKdft`ZG3Yrl&h&71+RH;o&J[r.GXe58T3=K7s6(kE'VA$_N%kLLA)+dDY=6XiLgLmQ"-[Qj0^JJL%aG8Nh0NjQq$DF>hd9<IlaC,A[@5%RQ_0EI0`>Ai#At0uLl),as8L>,(kO-7Zq3WeF^857FWjn6.PQ)CGiX\gA;3'tk9fIMSJ'0sP%dYO!$pM,!'$1Xtu'_@BGJk#:@7*-9Fd+cS]/+R#Smhh11&#Fdb-6ePdAjlXI55n2E,lQGaLqb"Iht?MP7Kbiho167#.5F_i#i2fg%qoDl>e</AnHB`o?fl-P2Z)AkNf(fk/eYWMe\oJVm+3/PK8IRgXC\6s#?q^R##CLQ$Wq_5$)P4/uphUjMJ_M&E]2/b;quZ4C5ZAX+%0>V]s!14;?Cd3Ot$#'&Vc@c$h];L7M?:`amT-We!RDq)6'9"-6K-WWNa@<mGrJj@97cpgsS(q#"'O40S5UXqg0b1>>n"NgoRe;==%?gPnu6EDXQ3>BEIh[$*4LEDgnClM]G)@TsMfp"Bum"f)Sc/6dtEt3W&6T$%TUT5+EG[`k:g:3Z)J_p,42N7V(\]ep3HLC3RLf/BF%h!._g%!$ao+dFpFG;\Cm)D27mTbd/(X;n"#JT#[#.-Tl=J_@WlElI1t?k"RWNDN\oTI.udn1o(M.UY@n3>Vh9!MM_@L04pm;*%Ei%:[@q!es5&6eR''/e^c=*+`YN!9eJI8V+%2T`<'ZZDOOpn2IA5P#-IXoJKIK]n2g&iS\n/R!3`j"Y]Ja%Z9i0m3:M0ZasuYk6gA$d%^(,O)9!k-!HrG<LFQ-0nERsl@IkLJ8m<mn8Wk^l]:4/BKl#l(!,4X-MLNHhmdN9T,r.44MG9mYi#9N,!g3t,gZ;CA0@r?KSadE*.%dg]^]@@.0rX")s#3UbI2cM9Nii!j't4m*hh8mT>XhQ_0>cI[>+fK&EuiG@bkU[p?T3q!nPC&N22WLtj9SG,,^43:2To%//rfX93Y%#TW$@_lJ0uc[/^pVKC\"Bpp\K.;pKWHbs7>+6dP'o8Y(2UV>&9cKDq5Gt7Ma:<+C.%JTb,GGXe(V]F<JmZPnC'7]^:mu?;YkI<_V%IH9CtIlZ.GZBa^;+/tA_m"kamcf+f4L]<gXM;L@0ns<_`Ri_Pb,n$9Y>"(K-l<9JT.qE$0)+/paED%"baR:k\Xm&uu=mK%[\R%e]%eo`EM4>5]G2mgHjh'G\a\X:?iq=3Pkj&G!ld%m-r4=u)lL>Vh2/c`\!]pku]VH.=g6Wgt*[>0_!QAd,AYQV&/VDj4Sr'4@oo7bQ?%a+!4(g/Y3_CFHQ%R1[Ah/Kn\JkG@B0!0"Y>@V%g&L3SfWq(]B=&C\#%=maaslp$V*X9Q'Cm(/M;2(bZ'O[MaGTiJ3/!JeYKp:C\U%mUC&8UQ^Qeke,C];nf=,Xb#nOl5.#G4EUQ5Mpo;_9n:SK%`md1U_C?XcntnZ3oT4W2OV4)QX\0(d1FJ,AIC8EP6Ad',\-YM]FjYI%gDQa$Cs?C7*C:)8XJf7Sg*tWidsaec&G?s3!QhZI4+m\R3]YD^[%Z4hlF&u:'O."PKZV=ub6ipqDT0ZS@]f-]mD8NQ>uQI'RPkZa%6ia_4:WqprSJ3]H)V:Z@Sb]Fi/:i3pX>1rU1H]OR!P,7_P4J(U@RF]%0_tPD':+)O*n%.g7uST$^V6*P$W!6q6G<5HpoRVF>7^>K%[m)&8]8uDKA*2p`8%S@6q>5s-5O7@EIQGcXrT=.7&c>oVs/D%X\agZVZ#>tfCBN&NfZ+q@kdr;)Y<PAOjY)scTBc^lW03UR3&p<c%<i$[tUXY#\M2?c%-IJdG7q,5`L/Eu(bW8Ffk@f;a9><dkMF\2a@\>K<k@]6/pE\1Kf"iGZ.Z?!j4P7;bOUDOgY7o@Fd::5S0tMo#%)$6^ir)iI@k4=:*%tspD-JBTc)DF2UCOW`r4dVm+*h-[p`#]G.Y.5.==4e&U#[C4DAr,5D]H*5gOe7P:)`V1a1N?+MenoJ0qct/I%\t351LJFSUSt>9$9dqYc=U8S@%Y8EB'`_uE8*:*A$H5.al&+`eF;HmA+\&?0VacHQ0FD'Z0%HO5j5k1Zm<BiCdS!H"7=gY,e=e2L%C=@ZF==cH`rDa+ZoW[dI[%1AR/em2^[K'>t[C65]O,]Re9Kg8HT%q%qh6*c5/XRB^s.!E/[E4hEQQ*O*KU1dp=$IW`ei5:p!VpnH%<^9Jpprfq&QNPp5\Qq7Jk,Q*7L,B]Mq'Bf,&ls"iFRsifX`eQ^fj*1Z?<ho6Y6>na\N_`gaEVs7[#'&U;_OEE2+/\q<2iktF[_<u%R/WK$!Vbd=g>]]@p+4Ire/oosM@6k-;EJqK`cRo6hT'?HO:=d>H;!KbiM,.q,q1*&"p_DKn;\2Y)NRmG$j@JO5DTX6IK<TPY$f'/%SO+&O.h'Kc+D&O=mb$-Ya8!J4ETM[7pSM_a'@r$i"mEf2jB6N*>[JHsZA^?$fr1V&FZuioGDVd04Mjqf_X&NQ0RF(7ePd\tZ^6d)%W]Ber]2Iub1PdTAZ6K.7V@I>\0GfIQ+/C"bH+Q@1=Bs=oGd>^2@n0,iRQB+9Lc*DbGd:I`fNa37ZL)D+/[XdDA19Z#g3Pilqg*?p%oM\8e-Ca]3hG^udQPR)0.<b-]cUT_E?ps.WTFb8UUhat/kMs/'b*5Au+9B1DmX)CqjY8C8VRA+Gf"5H8D4uX1/aRS#9:(mWFj"dJ%1a/4#rd4srW1T!nWU;j(J-l/kgT-GWR-4ecFq=ZFkKJ16#"8X;b2Z5fbUtRs6$20UMQ\<mVF)=a3ZE8oaes:YedQUT[Q:&EaPZTX%s&gHD26WEh`emRigCa?h+9*dn3NZIHY@M-$C&W)<,@a_FKoE?Sr:5'!rRTUq$3dKp`1)skOO^d!/QVOkrm(.H`bflGc\3V%0Qmk#%.4-D'"k_)I7"2/6N89/Y("ab.oq\!@hNKjg+WNh?lc=2gj1^1$k(3jYko.ui$o=.O;XHY?:u?/56'MJ5:o#o%-BPoZ[hdB9U+LH!%OL9R\,,JZ/'N.L;6en&;^Pc,g:UcF$R9'Y,ENnoCga`L;d#C&*bj%N9-3luW.eUA4/^,Kg__":/''jB#-B/SX*HI-VnjCqml$FVp%KNm?/H,(9B[FK"t<E"q""Nrs$h?h+<o/jEB,W:DlZCIk2`c7GnL3t/_GE?5AEt7HRQ3IpW0;Ql7c685$]&/[K\2Ql3/egAIaL'GR%jDfrQ5kf\b1VJl&"\9Y4>UXXsF3!.T\&.L_qpjJ9#p(JHqt,BrXr`p)6Z9qHcH]^L&4prElG_'!>iYhXlhP_,e(fsp1I]$IAiA_'%1%2"]RUoDVJ<t(9432SJFUlGKfCA14P=[Z)7YX);U+;aHk1+3HlTKRJHhI.-\euF4TXmlc)L"M-4+!V?S%&26>>HqJ[#r+9-cMG_%NQR=7)>URk4D0+tQk;bdLfQg@kfLr753F2P0r7mTEIV<,lqBV2U'609f,"$cJsq%HlTN3f*E>QHArl#-*lG[0WJ*K7/g_r")-(Hj%KSf'NZ_kFU?Y"TFXK*5&mV<,S6p5a#X[^`aS%uiWTlfc;OlLb$8tVPUFjW,?e<Nc#osl]U=W18+.rlPQ6=P6I1EtbAQ;?7t2*#$n%m)i%lBF]56qjji^g?e7a6nP$[<i2:]qQe`=G#rs"\);D6QTOBY!XNVd&5B[)LhQ0o+BZ.h)@FB>(SfUgjORTEabX.ZE^HY&<-^i&%<oHq2+_]&WB8G@`Q!6%J_7>@HLn5`jnB@]s4^7N`Mp4^kPajps4HMD7KS]t',/tc>.dN$h`'dSD\eE&`dQOHrq/kt0U4_?M=5VuP%2/OiTP;Ck@NPC6oE:m[Y!42UX$)(f3UV4q8S@TM1B3kB<,UkuTP@0chC&_V.P's?%bclfKJ0"cQj7#6g0ZR.]RNZQ&SGV-"hVkF]%N6QfAU#0F:2Jc(99].bfSoG"`Zcj#K;':/l,'@IEIZ^qXZBPXOUeaU@np0K*pja>/PEAFB@IV#f[M::`5tq+R^;ZsA.tDb[Q6#X&%bj$LeIet-tA,5fBpi7Y5?"@-B8.l8J<s6md(^2!>?k%]MP0:XA$q+F%83q;?3qP^/p7M7'9kD,ajnl?r<(N0TkjY&Q$_i,ZdeK?(%0%@LJ7*7tQn[^iU)-GY_k['SW\iFf.9RRJWr+CJF;PsHgB$MHKNk\O?i*PQrqjSE?dD.q$G,[kkQsodg,#Wu!_B_eU`o5;qWlj4N%F0KbkbWCBSN-1UMr^PQM3/OhC7f3ZW*;Ht7"XZ#G&/K.fju1GdTqqiX)lS2Q6Dt0e5,URlkL4!."$fh%G!T.]M^1*BIUKpH.@o8i%A[A?1e,(BS6#k1)fSp?!BiQn9MrqDP@7GOdVU%1TDg?M<N-RfN!4ZZlStjX^(M((`P;MC8)6C:.6360C:PX"K<5gUA4/1PB+f!HM%[`WQ1bD2M_Pkh<J]kSnT9:Lg^NgeK`kfL\!An4k1`\m^=L:Oi1ZSH:hC)u]%A8J<n<D]HtF('V13!-4XmJ:s(gZ?E3,)LMT3_p-T%KcUl@mUR]Ur@WeR=6:h]3n</Q!A$mTH^eocP'J'":D#U@H?g`&JTV2adOHZ.d5U[2XKC\!IXgn;m/O9i+CrD/ek!>fRJi!J+2PPD%;[=JPT+Um]DGeG<hH0g;FM+e_lG7r6;CnjjN7SRRQ6A?S]QG[O,/NM#o-'*o%#,Q&Zil5PnmK-B\uYf-kCo&I\BU+$ZHJKMfS-Gm%R8Q_2&<+22%c"3MqHW/LW;jm0Pip_^(MO;)OTrI6)fO.Ap*,K)M)<;Pf4u^m<R#fOAuJU2Re0E6a+WAn*pZOhXt3;(2I/g0d0>nu%=l6UNl6+IYIbZH;7_jp;Jj/$&_gajl!Z9#K#L%Z)pBG/^0^+jp58HUlp-&SH9Ml(H?=\l(TSlcmk*S[CA>n,*-`eiZ2'GNC[m"(S%&2rHOG"s^=WF%].@p0iJqWW4H)hooOrO.,Y$rQZbQRaA_)'7eGGq$f78kV=MWWm>P3`*XI6rhH6e#a#0r&+FLBtY,7[>RTLCaF4G%q^lAMnba+TN0-6%VkR/<kAr%G(f,\llF'CQBABs8D.@U@r8d5.HBDB2H$Z<Y&2mbLT;u"%42t6"<$Mi6+YgOCJcsIuONG8'BGj/E%MT;rL;*HR:W#1,Wn-NPql'44<p@6/tG3?d5#:t=N>@gsXm)WF9m:b?=7tu,U2'&))8**5FKL?NS*<roL"CO^-q#^e"/\G&D]FbSb%D2/j6]ZBIVQ0kF1;0',\AO9339biGlL1j0Bn!%#O\j]+CG`MY"S4/mbOMET9P(t(!R9P9%!(rcOB[g!1,SRIdZ+!)<UdnO2?BWX(%j5dn"M]R4:I?I#0@+S)8#;Y">.n^pSH<Y!,]d+-.l7YZ)fQ[YA-\TSSZK/9G:.jec-uJV8YVr"df3@gu6TI;jjRF@Z>UEp+>sVj_%^7"OnaTEE*S(u"Mb&An)*h-_(`_5k&[dK\S%u_%sjcM\[Mq7jDOR.P/;Ge))1[))F(-_Fk't>fBm&@)@8,*)_GABeFfLm-H/::k!%c%HjjI"O>[bTqQY7IqR=iPVoOI%4QTn8Wbui<*T"N&u7B"!\gr,Zt5UGtB7%a6[Vc?rh7-#Tk2ZC*SoL\"-Y_>kgPim(?pC4qpZ%%PORO%(-YKo\4_o+UV:W9Xu^T+pqWhCO6b"*R?\$f10*cqo)oR^OPDKpTC>]8ra!sm[ZI"1IUHm@hF[_9:&B'K-i&BL[-[onGup=s%k\^c%%VROH_fUl+^TH`g??C_.DJ;3!#!c2o?uq?OQkLUB8!&jNJU\Of0'1cb/h'OeqKWIB]8Nos(Gn]"Ucd\`R1Bf6;c%Mo81tiO%i[+cNlm219hrFYJI`5X.,sRgo9+3,NU!mq`,A4eO"CGK\EgMqr8('_U\SV]sr1=clT;f2C\/tD#XVLJa^-XJ`h_$_5gPjMC-7C\:%i@I/*Xc9\VIXJJ=X;Dal=0VPglDSer7GOTG@39EH5rp)MW"\,IJa&3RPLcn6Pl(";!L^"cgB^0p"_G$rX*?nA0U?U8lN7EnA0n&"%]fOt(J=^=dl5YqmNJYVsl,]h1\]:gi%B^]U/j@o9VIkDp^+k!.X_Usdf8bYG?&1^:XmeRE[6R7<2DE&IJM;elIWnN[<L#_6)h5YU%R[LqBbQr6LP\mI5=<]dgghV<O*I:#sfe=I3qFFmt7TA5*pb_i.RhjTY2fI1;j)O6;9G\<]H/@bM=TFDPad@/r'EZE/FLnWdK7=rF%'GqJoE):Wq!3qj[.<^p"/cES`89'E,<gcO2971rS3I/6"^hXt\N#SP8"oia1=V-"ISPLR6gIqZ(Ua[8Ql`<"fCIO6+dV3*k=pfSF%qmS'qcK;`T&K#ff=t#uDYNIQ4+(0-$SX[(VC#"\V<H0@""'-4O;7YuCer$OAYXN0h?uOcm]A"nhTRmLjd4&KigfH#g4_7EuM-2B^%aE?no*RQI!]A[Kr(ur`Oef39@l5S1DoGO^+>@JIk%"Ba5,lVu)(c-"PY-!o3s%-i(70m;/Eo]_;A3*kc$3'HQ=KoYE6^m?bL]-hQ%)"r8oQD,%8A/X\0*L)"e'pf"9Q`?$_:qER%eX!f&ZP1D@9I';tFN%Qd(aJUH\$9:*[27gF1!$lr^W3@K*"M$^3teR_DoP'4$GNC!%RNuftT-=<J?,:(K)AAJWV]-<no&E.u6CF.taKPGHL$u8;e%D^<@CA)oS$%3RLYB/2p<i,E8'.@<T)W5A[1@UB)!>_&<q_s84rDli%T>bYgS%(Kn>)kdjX=V'8E<GTFieQM'.GqlO\ou\Mn-n?j(jZZ7lfuI-*B4[0;<+:L$qI^0MG%tEDa@7?(LA]c=*<Ro-A#YJDiA7:%o4Ih$(;Ih8?Ou4FL(2`%-JGaQ-RA-;faP+:j2`JSB#!I&(SX#'7Xi%4bGZ5=77XS#7f1ubAK^%P?-"m\ZPgb*+[Z0oI>KCrA'98U%=F:+#?UJdS>q[i1[^r&cb=B^2I4$?`^boI]r]NRo0'41ZXOVF`L;5aCh(KNcdB%FQ4X5Q*D_$[`7sO@UbDX?SS#"fViZj7al2kVg%*Q]kH@ioWJ?4*lAoK<u)FV`l>bi7M\DtgL2QpKCsB?XMYp;:>/D[RaK%)Lb">V[JC1[Tnhjjos0@X[)uZL:Ik1&CJGLOU)r3IKR%%5JD$&O1,VP6G\e$i%A/H7')hj9W_0ej5_UYCBVR=_9Xah.dD2E_:sjG,Qr"KICrZO-;&L(;EZTl1k]7qQu75b,cqZ_d>_e7eqg$t%AZpU4r)c]I.ue#\?^+$>I\ho5Es5EK8SNiQgUa`:8Dc.eZJma/bIamO1ZBBdERok*,=VI\IafDIfIsqPO_%iE#=F5cs4tq8#F<*9%*h?/<A8\>4WAEPpmBrk7kaC>U(,\S@Zo`&]!__5krQ#[AVb>JPn[nISCQbiEfGiSHbnA>V").rA=\<h-KfIFl[riBRbQ2[PG0XbU%i?@:6X#Pi<)1Y(M"G#?hTdL0ml%r:gdhA]*;k[)b`6X_-#EsHX0(u6I;pS]trJ_5u7^%/HHh*N5ALo5`oL-rfgEeup(WC6_e.]eb%rOSJ(:P<1,]NO0f=d?)XZG^_lmQ8B]>rV%K!Kdb(%#qNm:+om)o]WQLT8C<%o4(g"gsRA#&JI3CGX%g$<MF?q#oVLPrV@M>#iDg?%2,ksYH/-d9iHY7dY_N<rW_0EW4?KO83pc4GiAuNSehVMZU-qU`>&c>*4QF)cYgKMq4+h6MR'G1("Dl)4f]re:g!o:f9tAc;=[?BO%]4?:MUZ,1rD$.g/E#-s#pZ%`3rqOKRfF#bgQYdP06GOV*,mt30#f\:C[)nDqb#D@P2m2*CI'@XZG(c<++:PE#+nSQSR?!X^pGb=@%:</nhLUqfl=P#O0"kQFb0,qAmGGN?+/WVS=Si3r@mbEeooDC>(FZ^m(K4c*F+DG^"1C?NG6)F?_U1K95#Ta)/7JXT<a*?et'V"0%%gB<9E*so4C9:;.C(5lP>b@-Jgg9tI<8WQ3A6ma?#]1BeQP(PLCT]*uG]J>aoo7`.3gZp.6W6,i%!ti_A!jpneYptB=$[JFH[flhA%%[Ru#4faM-MC#`hono@=*QXlEGMinPDtl-TKZ)paAgD?@18knrDka$`WJB8@a\>G!Bj:MOC=k#9F1;!T!.i[22$?1qp[EYC_GL!N%s&C>@c;m:To,aNcG.k#4^eA5R4b9<M<^S"OhaRHM79iEm)?MW`O-gu1n8G@99_g1@=<!E7]W?j=AHoBq-`="dJG9aE$%`8tphI5U%EY^Gj3H9Qa_KN@+Jf\M59h93ojg%G2.ON+p^l#WbHW7rbf#fp(1Otkj]T^A[&A!<42R)a?]o7\sAN'&UdWr[X]/,'VK"q<1$t?!u%O_f]@9Y^HD@7$''"b9Q6>7H.j4'N/F0GR5m#4$t(+j"I)KTSEQ)g!?HK;Y!l!qfH>O`LogHf]*%jMHuEX2g@_O\5ri_V8fr\k#0]%6]Zk$ZIKN-.'BSZZV_HPEgT/MZX7p"\ctF*$i\h%Z.c>(4A*Y*&3-VH3ch)STlR[g!*"6,Q5d.,_u).1`M<rVN[d:HT&TfIM-b0D%)(Y9%U[0Pm)IhtK%+]0XQm:0)%+hY@3;bu3'i\:jX#_0Ae-$9Nm`#YbDVq^+`1I"kqj07CSF!q5%D<n;0ZR"fca^'VXA[Z`N@p06%a(-foJ:uEh(O*aY*ZDXG%+NDK%Tid$?e<C\"PWkdZeI''cEqWp#=fm`/YHJjcaP(Ghp-!ZkZ:[Y<J[k`daq2"!8j"<k_TX#UjMnL%A;Mh6_7>O-(TUBQEDd:Bmceb^@3(s*/[5WtWY:S()77P?l,0^*[V[BB!XSPec/1Bq)a<26a2SZP\s;#+>2bU2/bc%Le$%*.q</70%I$N-q"%gs7Qk@0lmmF$5bDDbgJ01N_"+D$*+7Qq;Y1I\FlalH,IXF<3+5)/iP1f<sl8,2Qg.O7oQ$f/TIm(j,_COqaJ.C_lZ`>52%^=FiRK[he4QX![b_n"j&o=LJDOaYQ5Q5Gsi;0@'gO-(YaJXO5gIYO5DG1p50Xk^.'H87p9rYu!=nrV'4E^kJ-R+d+-rmjY;aM3q[%(kW-(a+.Yc4tg-#RgE4;RDhY1?]*fS7?W[?(s)*E@VUX[Ofc'"jes)0^:,V.JsheH=MR2E3*t1QY`6o<`("mkp3:\sc,.N-DA[ZB%g<e]?DAZOFUtg%IYTm:0lr]QZW^Z<hcGheFriPL@*Qu$&k1[-tW`.*RCEoJ=Agu06DR`gTom,GWeZJQA7Mm2.\H$$<AS2N\Tf99o%nh0#X<jqFt*BpOmg0rk`5JGf0hs,t9.LWAF;kYlYN[,]'go\R38NphT`9,!MKUTb2$?H+TnSqWY,;_\sq4Jn19ZcikK?^3&q;=R,%?/G-<.n[3ljF^Jar;4^A8:U9lRlPt`%pE%ZI$P9_bOP[[]fp.dJ['era9R\nI!1Y`3/db+.cak#Pp2ZI4@2H%%j%b,Zb3pXJ[PAI%?A1Y/b<=p=#K[lu$4*$t*m(Go86%db$OG"7*G#8fYq.#f?b1c,H?TC`=WOau+CM#,b5OQV.C8b-63UF+&6eaKCG$_d,c=gK5\N^3%F2%m3#;\9m"U$)kACZPK&0/dn_J/*5!d_Ga,;[*dCTnZj&@aOjbSL:"/++5%P_J4A2718mfYu<%fn9_=Xe4AaEB;1lA-p(rmFT&M%-Ug>UErUF@"PX*N\-ZOFRNp\mYZ18g^'U+W>DY/M49d)T$pAml"K7^QTg%aUrl;[WU$)LqE\"gUJna=Xc:*7W'\CDB!KmZ=qS!5O%b$QfRI_e2CFUo>]\d#t?=`d8@"8InUXm?snW`PdpJa#VOdkrgZo-A26j`)mZBlf7-26^%_1L1)UGqRN&Ya)lmFU`0]Sr7Alqb&!^%^h*cEf.A-/FU?"TiY'na1X@ZSA@f7.-n^&s%tJc7Q^$_fKGd3cQN2D.b[&RJJZ7.ZM(/TV@+Y8gG^0!m?5@\j$nn1dQb^[S:V-b(%<EoUcE7/n9+>N\i3rk\iC\Ba*')2AlQ95^bGJNdD7r\d,:7K3>g)[C0nm($q^m<0c\H?ZgIbE91=Nkdn^oO8@*W:Rd_8,,I8DcR<%AK,-P/@qB$.SX9%c.Y5V3j*E[-?XW3ShQ?;((j$_^Q;Vgd^'=nDGt_9Dsb%#67+iq+q.X6;UF=+_[Y5-@e$6794qKa,9R*9n!NAf%2d5rVkKSFSjau.t*#Ee`]qu6ILm)C$-%NC_Z)=K,Al?e<If!qtO9]RB3qS>tE\R0\7!B7M@&=%N08hHG:Kt$CYP]Op13N`bF59EH%mSt\fGn7aT&;\WMo1#$i/#DAu:Y!*^DAM9J#^Ua75XWCWSiJ9N$bH0R?l>>ZE^?&R-b^PAPslmeJbuQ6A`Z7n4^jDP.Je0DN3_ko%,R&4rLorC`F?@g\$]<:Ah1Oqg/m502&_+;-)HYR:/\3L)W<?*5H/h@J_]D"m>-WrULT>#mGlU9)>CIWI%`mC*1<al[3>VA*U'_B@%b@PQ:>6t'Ck&J=kp=s"<N+WN5.h84pm5[41EnK.5<3k\-Ejr+&PqC]]T`*W50ESW9<HjHc.m[P,qI5NCne_=?0Cbm..=u]oZFe9M%ZpPNoW=_X,-TtX=Q9Pa-I$kD?UhTckV@:&dBajC_=bD'=Q9Yf+JE4>Q.qrQ#?s(Zjp(%I`]dS3`5?;C1,V<b8([:K-nU(M`'o\`5%puRf+TO#d"?SK\VAgRdNna;g^1]c+,\5P;Uk#`)kIX?D6ocO0"M>op(pgJbf+C*UDV=c-XJtJeV(.HGo$ZfJt12:dWAGq$9-34SI%B:jL_Nj6kAD%:0]8Zf(S<pId;8GX<clno:\>QIVp$p5[f]n@78h!c/&6<r]$e'`Xo&&g&;S[0Y^""<IdSCf8*b/fLo,[$WZ`q?fP%*"NE-^43V2^nIVBA!C1pgpTjnRP3`9q\H1-oNI*s9nBh'q+`E'+,$Wsj//3$V@O30XNF`LK`"GG9LFc.@_IrRaq_C`-R`l9rr/L)%DDA.kZ^qpWmjJ$FCOXPE--WKtaE<sGr$,^\pL5=4b1Lto4Z>87`K`@MZh`WC[0dOhDi<Fp@>`][-Xd@MEjoVTO>)C$S+lRkVN<mk%2:O[;aRV@b-\Ua/nhD0(;l)lX[oK1/VU>"%B5%_KD!sH^M.,7^KndSEGc/iR2!&fX.SV'N254Ha39=8.VpHqd%;0qnfP"EZ6F,*X%H="]lSAfe#MW%h;c8#FaZ0qT\H?_RX1opY8iY9HuB1`lUA\7B7nm7W_\J=-0,YfMrD]`,P6;$[VpIh)u/.5G?QS)+*hHcek7To>J%.#&s`00]igk%`q9[#nU`D_:bLVN&t<J1WHeek%$#m<uZ'`A$t*YLs3mq3#C!\f-[LWG(>?'Y8"R-Y[=G9.R2&1"qmCLXomff9HG_%E!kAt0OY_.iSkQ;Dn6ki`@9lPSk"O^ahYdC,Ye)hrOT+<%X?,QcUc1u=6J5V)e5G-O4R/6rVG4e$V:K9J:c%d93`[1@p*>0NUL;B%J4)<F!M<saPK5X_jKq*DY`<I$_AFb#>DQ_gj[B(e2T9>NM%0-]<S58:2O)9hg[@,lEN#X<qjf"@0otp],W8/U`0M?6@REYW5"6/(%5)7q$=^i=X(JHn;OUWVI'c-!W)bP-D?Zngqd(h3UcHUrc_u'ZaZ(V<0CkXLHT`Fg@O&D=s`g/(Q88K]]Y&iM6Rj2'FbH3%pTr6(D%DCDbudE?X0/4s`W']);[[Z%&iBeSNcrN0l:?+T?5]@#CXi`p!rbtBI!Ci<)[+*!E[$q3&qOmPF]>ctBVk#`DQnB4XAl*d/RcUi=9%35QOcLe;\PO$ZM1fU5GVn3i=&S%u'$2c=>,@CV8[ZiM_Sn4>qc.-s5^h,`?0*15+85Si'o,7/4>%*D=3)n&iTJOr0I#&p(-9L9]l%jtL+F66#)gl:Yf3$=oh>ZlAFd8>-Lb'r)c'I"Gp:0;7c9(E2=pd"^(d]-j;sOk4$&<\CbQVeO.m$#LMFM2YdSg2Pd/IQ[^O\HK4&%\+fOu/2qa`gkGtQfpWEacP^(?1Z+BK[IGmBls$YtfQf`sZfeH4QbQ=r_8&5iFt(7NH3##^osH`.!AqO_NAu(F)[AI^357Tuq9gA6%*r_f3S1(4j]P=IQE>feilEmQDC(>`7/;Lu#(=r$_(G`7:%"=]=GX?`GgI,;G3W)MuRFT3S!^ZP<:iHS=>>F_kADDSOqZtSo2T=_B%GDq!?9RW2$he(L;H(s19aaP1hICufkQLqR5hdc1\Mgf^q8&%cO17;(DU>KQ]Ne%lC2Of;nm3]m9"X.KFgc5;qQARqBGZH2j<HeIS%ptLE`glL;$Ktkl!<lsbr7__Zp`0<G`d;Qa/^@&$uH14ALX[FJ'Z#M<N2KQJEi/GoKBt'@Md<!EL/i,C!;K9smk_\S9F1i0S$SuEO%OeCg9M6iVK,a]I=#8hZ`P]bU&H.%e1Z$DGBAl_>^Or0\D8;tfP7"`e;Gi$onfO+uf@3K"L!,LIp(&^heO_DdnYF4]qNdg$7V93"t%YlVtMO]Be"dCT3Z'g5DLEK7ui4GZn!#@ldbAo)K<0fJ6pp8j.k#^UG<A8JKiZY'jTlab^g\9<:3a!=qkc)PH=DUtnH-HZ!d(&_N^%k;dq76i^*1Wos[B<PNT468D>h?^\W7*!JCsYU?\4pj=)8NWs"[Iclhp3V*Me.IoN@1g&YYA#dVu4NN?>B,\RC>eeS4J@;VulF,Q9%LD#fIE?MSE\WKu4oJ8T9!Eg=WY!1]gBFLR,40^UZp+BJYc,nf9MktD+A<mG,;nc=GBgCRVB0GlT!;Ls-Tfkp8@;2rfm]%n*`f\k-%O&jQS@"IDgjXeZHnib,H%E<[qbeV0!&chJZc*rZDKUFnV1g&&ZZQ^;E^\V.HI;VSgBm>P>:[e1I[rOkU0hL]B,PZp/[(jj&'nn7l%(uEo5Jt"kUXblR__;s/kScY`h;>it!MA]*Agod4u6Ua3BBW2]3'lA?USSgR(.t>bRk8BEfMYWo.R*=]H/JaFBhr;frRC;&Q[E[`s%d;-n7X7%j]%>gO7_lMeTn29S@hpXhA8D5C@^f9KU\r/K7e9/?B[7:._a8#Id+q-.0rFKPiHmtRarr)<cWd%:@J#qMu[@Rl.k6+tD%<Q+c5bNSQ0Q@]"6jjt*DG0b[<2_+MD9+MlLNgrl&9qM?VG4Elhrj.LNo#=Zlf9bBDr:>F<o0<6MJ,]9$s4RGO0E:@Qs4@9qs5\Ch%ldJA<p@[bMgTOn`"OXR>cXd%<5PH4V)m6+t>/ZK:0N;"r,?$jY6F3\D1#M9P`.D"#C-l3Y%#RS,r:%i_&^62!<Or'PL(,Ci;l^A@%9nfn\j]Hnk)<^3g_tth$e1;7"NBfMq7_2hK1,bdA##^lM(^NG@LnMI^+SqY7/tQ*L];*g;"OH1IMQEiI`A*-9jG7?D\7^+[Wk9oR%:i5#^GR$fN#n16ASXm)Z*N2Q/)9B<W,K6W\a3V>[De!>sZbFJq<W)M`:B/np7"E`1Q<TOAQYl:\C$Z55S0>6O,JWT<*NUZ?r3)&&%OW6>UjApn[%1oC;!E,UO%g56eFS@Tge-^=sS+T/[RY)</mH\Bh6.1@J"W\cL.gLsu!ag`^_i!a=0AogV+*/!.:9u1]B7n=j=mL+E%',m;;iT%QZl!+Z"If9G*lq_@qU__pB^aLH2/2:Fq'?2eq\>t/9W(HbIB#";00ro(qR.cMDn<TI4)Aa!F[3:miWtc<7P7S!>Ij:.#%1'q_7oWL3nUQH,+!o8M$h]""c+(XYr!Cg92%L\m\+A=#:e&0D,cRpC<(5S:Rq7i(s9n_>=G0]c,+`<`1=CWO7FEDY9a_W"SNh+[9%Q[$=ljBHG9^K[fu[(@*%64[O\gbuKKb*'<O*[?Ltr$[u\!=:U7'NKmU@kg.-4+8<L-eL+*nt6BpLQEnqnH':SQ)WNC[,\b*KY>Y2%*WCN#O#.#i*T%7!5;;ADGZ[g0Mb(0aaA<92:WkN7N20J.QrOujk#3&uo7iid[r!MEOBYbq1\]Y(M!o3&bT4N\[Rt$6`f4M1#qK&(%3R^3gOLf\nT+)&<1p5`n)=+<Q#c+YA>7m="K%,I36^^L*ejspSE8;RhNb\h7`gU3M+?"js?&2ePh2'K.Olm1&!VVhm0t_aL"Ks#a%%oX48c>*h-A4,'/%'h#?(FDY5%SVoQ/d[@n.:GXKJ^Mq3EAfpF'jNK.a,L,N5fKDBW/Q4N"20(O$8;Dq`o7q'-9Y=`P5^[dC3p>!%ESMHAbN0Hb1)-3Ek5ihc&[m'j]@"N^^T%S%f1gi;o`#hB$XThWMdSt,AD.rb+'77/jMTuLM1(:h,kgWU$ace=9YUO`6%q9gm6G,l%"%u=gs"pBU?[M[S=Zef-*3]?Q2.k.t)dXQ"L1;7HCL"sCo_X3*'X*(9&/-.=E\)jj167fS!gG1H5u/&#QIXi4N]pQVjqni=@F5p#%ACXdN!t5Ji7NsGGr'-R?9b]*U4UGM3>(V7b=U%9&rDnf*s!`o\\*=XF:MGA\]nQ6`<PMuEs(`!XHIA1NhqL$AE``^dgND3==K#_Q%a/n4BP0a\T-jf\&),`A<']SVS:8RT]q`<P!Qd_0<hZD/E'H1_(,@,Te\)\1%o[B);V/@eAL"rhp22uQGmV:uiYK8O,^q-?cUpLC5%VL>CMkt4e%X=+*e6aa,6]F\UZQt=]E\Hl]Fo>X\6Qa^1Y#o!qN1Xtjg#r=u`Z,%?rV0U@4?J*W''N5VPC7CV<dSQOUoO]G*KHX&Z%C[^4V'odHd@[`H;%qSpL+gO?m[Se.Ps"0gik#rY^Fb&_:D_?8u&A5"n1MG#-CqhN^-I:*U"p7M"(c\jV$Y/jE7'BY3(`BMbb\OH&%8>TD\Y_^WJPM<c!))oVnM"M"RQ/VfIeZ"/UW\nN(p_alK%:K9="K@Wkot+iWW+EtP*fNNQ'gPcP+`.Ehdd]QVTL"bD4Q,`g?rOWS%7><eO`__m#Mj"LC2[m>YTsXt*08&OR^tkY4O4Q^6%A5;mM,(:mVJ^+Jj=jkp@?bKiJSEr6=u`;Y@'f'#*+%pE\+hPgT]gh`1=gZ5%)]c9R!\<9mi$$)iBYmkTJ>L@`]2d+&$0a/E<J=#m1[/;q!MTJ+Kf+'YW(O08X=a0O3UIZ="':bJX9l\R]<<?MCYa_JXnX&\!AL<=%D_e(`,R>('4;IKKkgM7bf3_Ff!Lor-^,*]L(,5WIOT>Y&$e2SV<b5*pS@W*@EpOqpIJ%!d>&,%rdUa;cQW!+r,$+=k^sjfc;*XH>%)g<m5D:cW#FdqJ=+I44G!C7I_*r\j5!G].c6`uXt:#8:$5@LY$#-DFQkXgN?N%AoY%/\4_6Uj-Okeo;5"q:cP3EK2CEJsoMYA^'Z%Y,NHQe@JdY@`Zo;_hX.>,X"]FO>@aVb$dC)Q5eGKj4KAh$UgJcXUqkaoo]osHFo08**Fh@`DIn^O#OLLSU8+p$OYUM72e<I,db,$%MR-Z<$S,7Y\7:^4a691JZg6e"ff9)qpVX$!!rKiJ9>Fi;FLA4>M`k,LR$RW/5ZB>HPPW*Vpd7Jm1kSoKrA?LoG[s&Fk#re#0U2#@%<"E1)[QaEmMeFcSba$V1/bsgD_WX7@h_I"lfOit44sd!1@@"OF>@!2[F"A0!:Ng);npsq?;(G=O:XdNGI.kA+Ft5g1CmH6"?D#1h%Z:)Sjf4V^8-/9DY_Y3a]$e4O2;`CaaR4R_l,[*&u/s':[.6l3a\,CuK'YT@C`V's[=jSXLf?)SKZ7cS#V_pi8'b328?n3ZGitTFI%5ldbg%.RMK#uOoW[D^AN#\[LBOd,Q!ZJ7^UoS-[7G-'@^6OQ6(o[K$M6r@d5a9`O0@E0&2V!J*Y!6q=4?A`;IiLH:`^KS45/ma4q%cKWK2*#pXR$"IEJ@!sk?6ffnfS*",5oA5;Z@ERdQ-O1N?7Mc7]B3IWuK:V?jW&"ftM\4(um`SO2]eIu@YEs"R!eZnRP!`I5d$Q#e%&YZ<r#^sp^.aD4C_?-Nf3uI@7BZIu=^oCPhF1Wp`dApQZU?D=kc"ugY*<L`FI^eXMpB-9r&*ZVL@1:=f68@qHQmoO]q/HD@l8>55%_WWi%Ce9XMc[t_e=@+WKXE'NV#NaIUSo8F4Krl=hn_7o7WtX`[!qTU!fbQ)GR42<W.7b)8%ZDRo@/>j-L[:Z@dnHuYR(9LJDOu+n%YJ&fk<FtA^J'kDj?pAZ8`K$g;ND7h5ZS[^>[e,[10oFa'P)2?;/@Ak_KhPlA'E<__%*''oEYpM)@,]>$POICZlQa\'aE-1SQGda(%E?C-K382>1T_VH6dJ1YG(sW;=P#iL>n;PmjJLO:^CVOGD/Y(pLB2#!^81!R=i^(^'ClY[J_p,qn,are,eE.S]A1G!l@9s+!s0c)`%nE'(>\=BMUI1<_Y1k/6EZHKmEgEi9jF"/D]&8NDTlh!,0>gMf7M<el0O<Om;r-:.LU0K)X-Z#1Z?Z&HO_H=)J]3sBrHK;kG.83)O%#%k/iO'VSfLFfHlG:lRAXI#))R$cJuY%J4W3fBeP5W?/YZ?`5%GhuSG^aof=\)\b?'3ZhB$e*=T_3g7)HU5'kQ7csfQ!,tH*t"ou%=Uq,<0+R=e/?jO*EF=t&1H*He&K7RID8=NerpJ)08<gh@0Zj@Z_1;f7p.n%^-NC!%&$b\Ic:Aa-A7Xs.hX.*P8/O^#bNi"mp`m*S%?#br!gB@LD.#+bQqRZMP,hqPB\'62oZp;<m.$(Fm?kVSM4kdMYq)9R%^5U]Vh5h_j56FTrr#:hRT78psR*XZW-HrB'^+U/Tdjka=%RY#mXmP_mEP7OYkgP^Bqnf)/;"!KIBJ#YANU2cZaNmrsZp3%(s'2p`F$08V8r3t2ZnnKJ)KNUXV_`SD&T?EUIbN5@>'>>,qLKKbP%e?!tJ8jL7;W1Eu\p.!c4;8!j"LmUq/asUj4,`b;'l0XeYhGEK9,K31V]^"rd'"pYN`?:$n"^T\q?7'sH\Y0nZ8b8*E3#XIWhRHs1%>4XYg4&'iA<Mu\lMr,9`]TF&T<Xdie'YKPIb^Wi.[:%u^s(sVB]C)<u"CFdSGoBC[-St/Fop:NGp2E]gGI&kGbS"ZA9->u`mQLo^%Tia2j;s$sH`u0LinN[_u@:hGQ@@F?g$$n#%^&;aGJ%']NmhI&hV>kg_\`rtr_n$Y,r1tF8.;s\`fh_%@A3fskSjeZ%U**-CR2<PR%7fIh-ns=NL4gO.'oj'6N#H^GPO0,DX?QI>=J"[*J_@GoW@oF#TC$6/fr]N0XV#2E+&XaK=?WkZu'=*t[C1sC_XEsuc-+s;o57oDX%JuAI;#W1C[5GGjHOe4H9a=qjB9r,t_kO(q1T.-B7kW@Cl@f[%Un=6RZLXJk6Ku8Hq*&Sm6JO'';?nConT'4E"NG[qV>XOcW7)g"^%-$)nQ9=;TEgp"+]*K6H!R-qqR"c+K-R\/B46*;E9c1YE]c^`P9dEbd9)V?aq$2@?Tj4BI1R(=@`YaGIckCkY"_Ct9m>i_ED\J!7@%!!'/6qG(kpJEl*:*$m4W@-7&gQ,ne)<0bY?lt]"rPYB/b>+mA-Yg52u3a$\:3(hhlN4,;3WN$LQ/OG(BK.7)p!n'[FVTR8`UTX!S%51c&3`cdjVe]j8$"qEkc^%1e(&QtuR*f]5]#GdgcLs!#aXooF7g!-^jcQOfG=&0N[d^dBVS'0CSIF]t\+Db!Z+aR,*/'A'4<:ib'%N#!mr6/oCmW$Gc/U:5Y*!;`u%P:H[n`/rLX8-9[Fo8&q&$0bo2ofL&bj@VR8V0GShX.CV!NN0!VA/`"LOYa[17h5ajjrC.u`.OtS%B$,u./LEHhmkc4JN)VtM53dcj\K/mCE-cOSSaRS&Sl#[1IGD(UT9mhr#c>?Z(o:7c.dE"!lX2PP_W8qe<dLEUZSH$(C\bp3D+hsC%GZd7R2j_.Y"Jf`nKW(oJY-"1j@e]+sAtmo2fT<bQnJQL]e8:YD!:9k\,GtucH<iCPF48\/orVHOI*[V1r<6p&cDV8:G&(JLs3m0q%-pDk=GfJgo5/U,Gnm8ei!]Fk(R2$%pYTf\[\3I5-J(`!e)4IeR-+;iA_05b<./o-2r]H&fF`Equh_]Ct\60%0OYJ)l9W=;8bNNJ>%l8(o=;u\G,1FH3/:B@"l^;\NELO#87Mr>g#bJ%c`0^RCMF8M'fDIl*-Q*06+`)us-g^5`b,'Nff*"[iIETcZL_,bti6<JR?V<=R6%aP$Iro1SQEj;6kPhRPhrW;MfA,I`$p9J<P`C^KlWS2SQ<UJEgI$LI[FS=[n@$k3M!mk]qaJ2=T`I/^#_VpY=mU#[)Se,,*XfAt,t%`D(d[Ec,V='56VG!($eF\N?12i-eI4+Oq6([h-9n!p=Q%*@/lk0Yd9U:OY+>kK`aG`oM@1)7NnhB6%ulj49XaI^Plan*+FN%nTg`%HjnbbhHho\+M4F8#OpHKJpdEm)^j&/=<_8a.B"8^NYVB&DC;,-0C)d&k`jCCK`5'iS^jT``9F?]eb=K_<R`0?-(i_J6lA.[eNhRT%",jK(4iLQ`n"m?/U[gcq7W.DY9J=[@,D+N<D3,BSB'p(F'AZ\I5$!p6,Rk'RXfLMk#EgDM=HFYO$8TTp&i!lq61Pk;/Bd4qMrT-_%EfMZ?*H&J0ZoQJX>odDW+ZOel2a`+X/6bNsN(!bmBu:.<Afb&jrTG\*7slt\Tbpe"Zl$=o`\Y:fYd:>"a_B4'M`#Y+j<4<q=ArAp%1o.#$PVh_ldc:H;&k#M]VYFIAArJ31*Wo3]nm8uQ?-*U$F%(i]2.uRu4oCG70e\L(%6=!g*7\EgnE7!a,;M>>[G:L6EA.VZgsff4%2dMEg9kDPZ.K9%hR<$SeFk<44LSaGL=Xq/+%QAOmEO_u$F/+fiJtqL(I,&Z:Ug/8lf4YY;e6He4-h_oRW4j%[&Z9JWWkP\]`?cn3%^=IJ$i97o57>qp98,!0/@b5$[Ws'T96Dj)4^@l,X7+#b])g:GZi1DfDnNF&PJq))-1(JG6qt:-S]!$`+NCh-cqdN>jC[/VlF)1`D%<F6Tlh6ZNb>F]Xp*16.Wc:]@MPeGskO?<$3^=JIT5HDNL;K5`=IDPsJ2HEhXYD$5Crm[A$.q>aY_L@oaiMcQUb@4+Lo7bLtVSR;t%(WPZtN&4m(P1,(elEi7sb<G'WY6Dc;V'"IM>?pn'N=^K@g81rXn[07ID2^Fh?OnoY?+Ep^AK[9n@8_KDNa2*s5'I]J0d]siSRK-&%lV-a1^!;X6XmUM).ZB7gKi":4%tcCHeiJu(I;^QAgJN?h;gf?e?V\0_^:$I'AI].mZ#cdt+0K!FK6Z%&h3D_91DRMP`Q2INp2EHT%ZR5u<YMI$beN#cQ4*82\R&2YhB<BJ#m=:_k`?Bh#>TJZZgJtf=;E)RS2X+^?G,[<o@b^A\4-2;0^k)^:;iiHBQ\ZNS$BiHF@p(uK%?>sT@08DpLkrfY0Y`Wj7p;AS"Gl62qSZ18c<0G3(N3-BR4ZQ'%H!nq_S=Z5k3o<"mdi"FW<bLL5I@]U+LBas%Z!L-uiu#I3SbC[E%@"lqel,mk+`Z.O<=^Wt6lR+(phb&!L&I#Rjbcr:_QS%`>E:BWTFuCuXp:'tQhtHUg/h,L$*\1ZKaf#)S07P#HCA!RQk)7NKXX:UD%,@eP3_2kp-p&5&*^\pT[Bleh[RMuOu!+L/nn*1dG6MYR*</*?[s0EPd_-B(ko[H5ibjV/&TOli[;US]UVA\^^l1H022XJR@:IJB@%Vh<8WK><kU8)+c*9!0=u#p9\natI9f4Ho^rY[++q22X"5\Ir/bA`p&e8j=hCqIR(79i$;6Bs)o&3$P(hLb$l1INh2D1j!lLAQh4?%:Taa><]C4oTn."ID+Y%&olBa#A27()dZqHf1>c83k(DWX8l+:ogOg@%`AgLlD,/Yii'8/KO)#MLFIJ.o]UUa&91Oq==1`N(-h%aE%6m(?%Za4C_fWt`iUSNKBDha_HB(k]o#'/GSp+(pX7s17<HL'J\h<3?dBK%[.Jf+4>!kFhl+Oblb.RD)5HAF;j!B0T"4GIo1W[We\%m!&D+#!6]:<"Z!*)+oe+kiAT;Q5A]8PAU*ul,tW3A8j$6[e?UtppQ9uGW+:sAr1b;l,l+idV6R4g":4iV@sRYJ&9&Q13t^a+FPo1%LGUJj1"+.^Kr!rnVh,:r8t*4If2b2cdg_h]H[1,->5p>URH'++jVhAGog-mY%d"I]NgrZ'CPS-e9MY(5lr]Lu9BU[pqFg<,^_jBi%(jg)E+5u;a6MIGN^2bL)+5/4RUr^VqmrUnE_um>)5P8Q762FpW%V\n6g?ac'9LtVDo-ndr07CLem!Y5Uc)kB)r%[Q2[RM/JEg5nT%n6mCamF]4E"K*Upe+qiDjr'GJr!_AIjicYs[D-\9B>2+3M)Be3ZoP]aRF6r2j1&DbFaEF2U!Pg)6R`erJTW*[hOup3d7kV4pfKS[%0r-e30l0(W0t0-F9WL&=e->0ug<AAPV)NXIX<,s1L/_H4)oE.2bq6.B5kGaIMXMi``i+LG1%8;/cRX2LD#>S"=NdA#G"-N`R+OQn%:FP\:b+R(f&WnUq+4gL!dhWY0hKt*3&YD\9V^7ZL*O6NhT>R&L3NLNX-(tA?bB]t&\o^(1>?tADdYQg#IuQSS5gmjXMs3`-5p?85%U10'1BH=uclg\;h/6@'m6C%lYqeNb%073L>7j"E:8Kp.HhoZ[`fukI-;7cAI8$5+YaEjgk%s0(QdZg<sHgF9<Lk</im7p4f#X5KA%DS[<#`b>346:Dd4>u*dU)/`f(T`UniUYDY$TqW[=ju,XAKo.W#YB5F)#0fiT&M@%uq,Fp?(Fjro>K9_`Ak$%(aI%X<@ZJc)W[Qd[%X54;P.c??$RQLO#3Oa)#7pl<+lt7qNP]>c#CXa*,HDCnLBcEr20WBX)+80eJWkc3QX^`WUU/79MD\=N4i\C[df'T>u9S'?bZ)![B%!ie<5n!ckai2PH6#`9=/-@Q82\rnt48-(KRZ>uugYKIVk*]'qA'FYU1QR5qLV7>h9<#jsi'cB*J'9?XD7DZp3Xt>tjn2]")3H>9I%,jm+!>&je$Go>U^7=k%rOfUjZ!jeA_2S%lUChQE%8$9X.O["KA(!'XR/a[StQ]mCZOPqR0lKL)4#XS^S3K0o5Eb&1VFtg^IbjV70%Ik\0(LXPN2N1QEgrGU=QJ@+9!]X!#8_JkmMK2M>5-SsS::t[HRQ]8o^_9fI@?`e3ID4CKV@:RO"FmL3ckd)B)%j2Kcc2;R3:n)*R%`Xd5[A\AsGpoUU_Kf&+N6J5%IU%O&CPNt9r'IPEuHgk+0;Od,5N"?9d#NKs&:(6_!A+O6uVtks<hT]P_=rE()"M6&Q`sX]p#CflM%_)-nX@b?ar56,N+ig]ar>CstPh#,!6\??BV`Q<;0A!m(E!B'!@BT9)_<1#le?aIt3futOs]5jH%bo]3<Nkim]0-Jh#@7l`23\p:s%qV4*8B2E3$39)p77[dSL5LP9^Xig9[$Aoe*A[iGtr'C25R.N8;5VX4KU)qX;%dV0e;f:.s"u>moS,R#IU3Scp%?%kg=V8sk`aPku%kGfC[1Qt]YM"u?WIt!KsoGu/$rR6tR"6Y#$C5>0dBQ;&ZVo.\@%T)bpd@7M<0st=!8m"9*WZEe4##pk33"7p11pt,N!7=^V.DD->%)5@Oja1u1Z4tU$\-h2s:T%)].S/k(K246TAjBD564(!tUcs.I42t@S5^Y[)*+!aQB0PC)T:G*3KmiAYV#3DRJ9q3E(O-j,W-j[E/%Xt/92m[n@0%-J/LV^uF3%;<8X@LP;Z1pt,N!7=^VBcM:L83)^6[h1_,*c(=\iNe,G@@LE,E9OLePJ?DCO)fdVN[D"TTYHadri2#D%Ne!Cd4e;^X9n+s.2Z+E6ij)$qpkUA/L<Kh*;s6M6-EgQoM,Kh`<#]:;Rf;qGRZc,Hb_nisjl&O+eJD?*\XPS&kR[X[Ene=b>N?s>%92_W0U1@k3#DO#g?!^6/kY(a&1EuY#\)'#$ie<]'#RUT"J;LgN.57.j-DmPJ6Id1X]Weq-)1+iMR(!MBa*(pqU*fY3#'(n!9f-m&%`6`iq2,NGG3);QsgTt\5c[Sp'h,M>DC8qtUoZfVX2t9kt4XE@u.mUL1YU`b<[Xg5^+_`q=;hfJfZu",mEfT%H`[>f%Bq2Ueh=>%u%ZqE4Car..8j/.\Ynj@NP-?`R)_&'PF>`fWZG>HjE@UU.<a@b0RR)uGHbkbdM':E)7F\e2paAsZt%5A)@KUro3P56tgSq\,[/B+*T%n=fnC=>Ys5HCI=LIA^0@0;k.+,0fa@HV@1%5H*A;DfaoKXtl/TRSL5B55O(uMI!9sgR5O<aF.j9O5U;Ul+>apL5]oSg[?9@'pWoS%,-#%=GQP(l(aJB[4/QW9]'IejQJtmAV*=EZ7uCk%_CXB'_!<o%Qu,=A-o1af<i*DARaR&#A"R-mbQFLTf@YQ,)'l0cQe'6t;Y5;R%K#f/7W4H?KPScA3\+)Cu:$oFaII),,KYd<IVXaO*Prp^&l]#Z$Tf5efF%b_]=Wo%2(d3S9Yr8mMA"9MZaEa]pjp]u.adK[1]u0-+%;)q!g7W'%4R9j.LLu:jj.jSF<IP"_V.=<SYFm7tY&Y2`H+8%qFg^Y)6Ln92j.EX/S)5@Orqm^-54tg3GQ00fUY=+VG+'\7hXQEfp%d0-kiqt4!:@j#8-D\6T+>hMR[5[%'@S3]6m3"pL"G$)F6Uo4D<_`"+VbUrT^KGiVm)7$IUV?aH+Rtt*=+%&?gSf(h`;_KA2^(6Ch%(0D+jH3tS0pC\c^<'fsiGZp=*b'c$C+i2/UdTuL7R-BK;B1s!PatcOQ2Yl!6;`@"rL[fo7?;4419Re+$b>)jF'W9JGQOZiN.?7Pi%gJ;9PmMse1B&^1K6J7_5lNXWAp\S/hWQrtCXI*62F<G:4JHZ(KV]_.P/l=CD']b9_a-(gV\8td40Bo]-d?(h+=7VK\Fh2Ui]f&u:%79OHEE)2:l)G$<?@'T*oV`5Ub]l\d6<,p,ugjT`CC?MZ.<E74ZR)L7l1>JOa5)!."fC^lSY<<(1aD8-=*p%)=Ln92hn\%?5(f_,0%"s/]nH/Z%?kQsgefejcHCGG<3HhjER(26X/'R-dr'a=WCQTpL^<BU#j=VaC;<!<oG/;R!)iJhT+E:$MB=V-F"jU1F]+:IBc*G`cK%)0+Wo?nMg2,E6J*.1.87NOq'X.*.Lc/#utoFa#48("q=U])GWrF*;ThAc:0D=-un^K'h>/<,*A"$o=0[.#9BeR:D7f6#_4Wq&ENk%@kJ-eQ#8beOp.9OGGQ]3(35BNdUYWPeBRrT"c"Hi%k3PDR@4]cNnLL3X+b#4qt//ci#ukg$XsWOk5-c6OQCN-$VRd57Ue@k-<ZEV%F`#MP$SjH!q(TB2Lf(]ANFY>Zn!^N)JiLn!M1%TVQ?jqKnDfM=-oa=>HkHTKRVe))&d9uqEuL,c#g1XI`I$7_]5*9X8[NM80I&1W%*m@tAo]14\6pZ4HKe=/F)*;RWUdRKWI$b"oKY3u%OT]qgg,g%//-scP6&`aq(gRcmrkFu\p!)@L;a?KgAq$/acUG[/\L_uSl*;FY%T.,"MX(;mJ/dm\MLm0U7_<gNZLFKEc(o_OP0Ia*$dUYXK-,o8S-4SrmX2`^^)T3)lb[)i?n/t4Bba8N"+H^2)FjmfNU.HQI&3L5'%'&cqn=t(`6c^-BrN/.jS!N0I97'>`L+nZ.'f#6`?@'](dZ"%62]'ete<AZGUgVZ,/`/&fhh9CO`@`40Lf0)&I,+Q"Z[oTVSm;Xm:%$R7HVe_I)Q"8af,+p$=RF\:K*L`477QtfMFBi/lj?6<;e%rt?B)3^&"7NdB;(_OUK3AfO2R,^;?A"6RS+l3gVp3sPW:.le!gR-<k%^GVr!c0@R9`eYo*_n<ffb48FRM"At:om/=XAn0&PgDKHRO)1JK&R?1`9jUj$]@eM!7Rl_O(WKur`"(EGR1q[93o<P"AoN5K*EfJR%GpN%OMT5A8R$$pW$G2E4AZKD!2^;f:dRj^U[901K2_rD)NfEQ;afU#)fPWl8P<27RZfP+9Z`1R!&Xi+KG&iP#+Rir;#kkr9`Rg-8%nJpk)Ac-Suh9(P*W,`S8+sp4Rh^.0>.!F<b"pLjWYA\VhP[j,A)Zrb2l="iJCSn#`g%L'/\9<1=Om[Vc#_$Dc/fgOGq[n\LSR[>2%+9fcc`qP`]QP#PPSs]&QIXEke8BpgZ1$h0Rj8o]%o]&8QAEq3d1l*$E$BiHF@p(uK?AP$401X5S^-P3>\4hMrM^rKjpE3,&_?c3E%KTYnl4oJ4(5^iefB,r8B4><,T:/<LoSaRT`mu/`]A[[_j(jVtpU*an.?6tH'fF.-)Cu'V9\_^6OAC6A&]8SMapLnj)JY^Bk(*n^-%JkY^J7*KrSP)\NWn?ab8`VYn1@bkpq]l``C<oF2#.2lfLeUq)indsTRqLq1hf5N3S@=f&k2;MX]O?SpsAMF;n:e\=D$;?"9)nh%*%cEM!m'[(O:U=,!<+0Q.XKU&KbW^[)SZ$"UV;`m%"3qNf%erRp5nfna_Z&`f/oAMEZX16_#Q+&=<h_EW;JR>)0ih'9p@D>cWK'!N_%0LDZ5"@>#5PFr"=VHO_"M=OcY4@#!tAgpD\l):J)&09h#8Ahmd/NZ+4j2B7;[eM*[;PP.2W8iilB78q*aH(7QoC:[TW%;q*NLKA_%^GD1SO$^-Km!jp&L1`%#T'>;:h/t40>%SW<!6QI@eS^*mf^Cq%r3Gb&eb>5HO3*5M::q39eiNAcV)N'c3fU"-c-@uTn>P!U!8_UR%.R0?7?r8+<N=G;Yf(p4%\6O24_GhmIs%1k-ecBIrTH2"?;q\bofYi7m"DV\-9Y-3hTO\7BRaDLSPqZnT`p`Nf+.9Kf5!D8/OSjE7%nh%`\keJck^;C$=U>E?_O!DO=@\UX)@p7#TcQZ-M<fF^iH8qYVM;^Y#OFbjm`J%)\(ufr_%@Ue>/#Hn#`1UcP67k/Pr-^#<b)_#b%[\)H\_C8]?S9/#5`>\AcR9A*?.39[-EV:M9))YgGeq-9lbn(Z^jIW,FR3P0N)W+>kD#n5c!Vq$Eg=-%Y4*4aPn[@X=b`I.:F0'bo%^)XimUIMaV9(Z(4j=R(H107;m8GnIHjR">X!>Lba),AH3kVH62<]0Tt]METZ4:'A\>98HNa[uVFg-s(&q-<8amE/f0/%LDoBW\H1%;4:Au[(3Tto[GiE3\,>hDC&p!>VE`DelJ)MINNpj;H(fjcK1Q+"`fK\2pdoIM[>l=$Mb(W5>m*%?'NR(7G1jG@!aWc@MWmO*h$FB%OK/VZ?.U?K.PP5!ZcTMYD_$`<RmgDiO3)Vb7t*/J#;_&=p@6-Nm0[@^kJ2PGg^dmm*<W&9_8u'pA>9ogbXEafh%S"8IT.^.6oGc_%jLNL%%C^WW')$jC`L_9m=/itE'B.<c)QK'YOYS_1JqBZBTdnM"@dlUiC6j/)ou$Oh@-Le/8*>/sXS)%@`Bsi':>=Z8MlBI#]cfE>%"-FZ>DHlU1m7N/(BCdLO%EZhKgM_,%TZ31$.Q"W.4>6m7%FD;W/3[q/5@p)+6b)1#4<O/O1s>eS3j`%7Mc_1VSqP7\Qj9%$)ufA'%K$O8-j!Od941('@ILBG8e-"9d8/590$:c96,i%feZUOP-hX12`1@Q!QGCCDENP"$@\rfkKM5lGTDkk5aoi7#lq2EQ"^PRG5j,`2#%:h'Fb'&-!_J\Uo?o$)[;<ReL_imZ8._VD]:1Zjo&1`.G0*Ak/f^G:PB"&pLj&BVgL)Om5bg%4k1F@I#*YEnbaG:%E-./@*7&smY0%Wod"CLjlcLjE"K^b6l/1QSJ?]G#,Spq`h2bQ!M,bo7:T,FfXp+65l#$r:hXJLC.>!iYs-`b4se:(^.sd,(mb\kUg`o'&_+i/Y`?h%f^BUq8ihd(Y.;*C]r]Lf!b'?*`.h_MphH[,`H01FWITOj!SgTjr,\DaJ!"`tBubbQAE`XJIAPc./\hfC+4@LD=:Fb2G%!).Ke@X5%G#6.&:3a=NESlZQ6`I5SQmEl43Te^toq'?)902X-!PYDb::=342T@adp[-tt(,MrI;%geR@l5">[bl7b1,m_kYnNG-Zh0&.VCCe7%CpEuaY;`8()i0lm,u0T/=\ZuOUjGUVE\I+@gC-hhXGW5:^<E_kpU5[;YP)_K;DN61@q##no%oBLnlan6kk@!eZPqlLPEuiq[hG!$%`&>ZfDm:EXL?pqlAD'87$[K/"G``1"qK2E:ZCnMn1k&Xj%oQ&pdnaS'O=PadR<%7J<12l_S#J06k7+FVhX37"-'1KZJ.`%D6f-Q>%Y]K-K:VVVM2,dD2^?mf4RSOJ\"e%/5-WG$?-Y-]&[YhBB12iU@8(TLdrcHjZoF,_N=<BYc/_5"?kH=*^b20clRM$9))<p/7f:+&6%?<#*JB/5t9XX,Q.dOGRSbe#MTIE0lb-@K+OkqhQCCo:(L,*!BcI@bDt*:%d,<l<]sd('DAbL)U08d:mmPQ*DHnQ)U%MMkujYbL/D%VUS`E=^\TgVN-DO1WS[uIh^3>?pd9Y-UIgZYl-:9P<2Q0:`pY[Oo4T,Uc^<[+h4LMd\<,O-*>sa?2-orc#crL0,_I7^V`l]),pN*%^\nYKh=2(sqSS3+4(WnSCtY*;q,eaHZ`Xlr+,mO<[f"[#@bhSdL+nU(\CXd"\a(sULdH(tWD0_g^!fbU$+9]9VF!O^6nq%NF9$%$%,`KaJeBtMS>N]e1MtB"KPI"=Fllj-q1Go8&&Y"8bA2K0mJro5461,Rg=sY-^kB/k4Bi`GfF=\IDGb=mLf)-TG\*EF%#e[2C6Zt*h%i4)r;)4l25qasZL2U/h6PZTF):7<U0bQQ=,Zt0)0*C1OJ*Fu`?@!1*r5c"u&q8)":A*$E-\%dlhglHA#/B=dj`i>>Hh1^Fk4o]ss%<n3M43GAV=lk_CQXN'p21mCg6:Shhle;WW7NPiJsQU3AP#\]p-TMbA&[2PkY2<<pLk':.('I*3]]Xih)+W:T09_4X^GbsB\%54b%%6+8ihY1,6jP_<!-19AYlk1;i^GI]u6ZYQRLNtK_qNuJAhbVXp0\]94dQd!!^f15/0go`\/([A<en>@!H:?-u*.T^o;hVOL6Ib45Q%q/R^/^M-!;_<`*I)5pH.T,G(::QPJ,Ssf;S\j!f$Mp^YNq#[VGP:Wb$R6*QXG&#1DcR$k?2'jZ1jf$=*c)sm%jhe#gijKM?[d(0M%qX\m=6a+A,Y-NSGi]"-jGNScDjCXMg9TaJG8i+(?&7&JYZ_@GO':p\a3\..Bg?P#j+[9,u2&M0`'g)O&`S.R*Tth'[`;F/*=ZJ7q%-DqPUMWmd=<4qQ-1=c0?57.5e)Z-rY9p-d6?Vpcr?5fVp*Q#]IiUJ<B]:^H9&kK+\6rRi4KrS`QcQJp2Y;k^4R@@i$<>YV^H0U:n%^Umd4XkOE+>j(M]8QZ7Sld64dQPn2Vf%gDE"Rp.\(*Pl4eL\!iZSiH@1^](8B6?"K/;RmHG%oV0C\N5J/"[kPCL@@Y.s?]oQcOO[%Om+#`]Lq8HjY8@pNUN2BcHHeKdlg%0M?'P(E.:-UrGsXfId$.Q;L%c!ZTe=`2r\K-nm.Q"SD3esgk<._nSI6+-1!KtLonL`]^f5$%E"F4&e`8O[>\uWq`Tk!/V=4O:VWN;[jmRejiVjlVW3j>%D@$+86-lWA$9]9)Pq$@=&qmlFgG.663SiJ4\MFnWNnGU)08W'Y$_JZ)%$HkocH$VA%6$6BL/sNeUM[dI3Wd't]e'2^:hU=&k.=\Ih;/EY^^#5sI$"<;pS7,HF1qflUZXS@ORH1^0p7/P5b">1A&Q?Y[k+-QY%A"jRV5I+.DpV^12YJl;fRpoEmh/DKE`P`nsM\QLRIFMk/.586A*cXkJ.s@^%s$<_'^gZt)jlt?3*p1$`i:$m,OJte&KLH-GKc6ZF%b[SN(K"+PC&W.B@-&E]U@HbC8O<Z^*?!8.Y")N!e([4Fq(6S6`@J<^sg*8CJRqHLL4<$26f'GY"k7VAo0VhIA@=lbn]!npaoKKJ;%[Yj3]8poTWYV"c^MtFW@YTE8DCs/dUkQl+e@<\%q;DIebb5`_7,@J/Fr[.`Zht5E0Pp5W'h`Z:/2pXM'm=`gCQCu'JCV+=bgoV44%0I>O!C/p0;pAXX8@rgnGrM[m<\DC.ceZ\aOol,h&;uMp!nQ;jZn'nU-XRF\\!FpASdhnlHI.g)[G91M_PfK&ej6^^l5B/aOR!5NH%3(CnI"q"nS/US-8_J*6)j=P6X:NR5U-lUMbbP!-RG",B="(QT4HI4$U1OUl4kL:mcdYIOi2&t!FUSdiD5g,fMq_`iPFnMUJou5]Z%YFI0d@sO/i+,aG+`np%bUpV,.NI\bk#,s\JD]25)C#"!L]/`[XUhhiRMkRYn"+#-lfduSOp<u@WO'hIu6IU70M*!rVLnB+=O+\h`%=JM,"EN'bna9`l6h(_B`6W0=q5(!UqZX8QG>l/\*;@#)fDM3q:51jo1GmlY-XVHOnM,R\YA3?Y@L+L0#NQ8$fZ@Kh1iBU4tE@BVm%QJGsM1uP=1.L<GA(Etj(bFsR%=>_+<e2,)PaCS'=$Dq0$;or0hcEWT,'"jc-35"J9Sj839je@T'>)aL1>=;a!g2t\#3^$%]5Lj^e%(QNn%FA8Nof8hV'nKK$Q`D"ZI:6O%F]K+)n3JYQtJCl%M,o%pE&#A0!IJK*]0XTBh;oqKqE.XZW@gRg!0^$n:?Ha2iUfEsSCuqe^%)KWrn,7"Y,SB/igJB"ND!&OSn7[BRH-YGhBK%lGB2'[a&/G,Rn/QfWO<=Viu:.Anje8pA@q,UrLec_`Zn8::gDUY0LSBPH@MSM=P%/EUTUS]LI\Xb,m2W4q7jO;EhCR0i6;X;9mFe73KZ,7(*FHit2lD3W[%72'R^)>Xb:T6HdY>Ri_,AIGjgrFWA4R0L3+Ca>mFBnn[C%H/2jn/I6r]N>b#Mfi&BM)OZL<*"+dO34V<^]8u]:D63L00l+?qHY_''4Ig*V@C]L@?\XsGX`0$i'dSA&Q>2/Ir2Jl+3:*TL"sNHq%\9",QiZ/CTH64et&W4o2@C-fh:e."'2Vq,0Q:pQdRZ\d>Qrk@A_tZEA7^;K_TKnn&on\UaVKZ2u)7Ng'+L.p68R2Zi<'p+M-V2;S%H4a,Qg%+=K')eP%LH5$/_k3.@<Mc'Z,$G2krhFB)nF`Mn&k`.na&0$0_:I-)h!fuAmfJ@iL_n#a`TPZW7\aG6^"mC'p::&c1kE9s%=g^%Y'nQ=bB^uB]q*WOT4Wd#0:H.9Ghsr#>KH^FGSnFBQkHkA!a'LQ&Q&m7Gj?cFkO"ku^Q5-"<oG;Y^Qron[bfWWr)K/8nIa2a(%h8IHf,]^&23Un;j08M6!>l0>`V!"X+jO6O.dZlVA%fukLPC0'YcpC'Kkp&jUAT9J>m(r*RF?*?ipr`h&6er=i'@V#RFW0E4-:@j^%SBc'k(O^fr)RNj,4JV+R3P2(!8cs+s:bOdRnH@i,gJQG'GgZDXY#\8-0c*cn,$bmdWh)<9/Vd_R2#.>tc,#QmWnjG?-D:^6W9;Ua%<5p-*oN'MkjH2gS<9b_J0]a9no``TV6f#X"Da!'b@=R6&$,hMAgRJlLWu,2bdSW9.f$'#-!mSoQ2\@LHZu)>!:WRg4b9eIA.D7!:%1$^*]k/oYXE1J7<`qjDef8h>Z_4-Kr@u<%?![j&@('\L%\U\<`\'4Q1K<lgp7W)%;pBUZ`!15G&dd>l707Ra'CeZjn2SIl#0/R9"%&X@3;hLpW#b6PJa2lm,KbqZH,[H2,@)Dc5U(pQPlWAe+pb'MB<^58mHD0`$[=BiKiH?\-7?'^MXje%ZMpWQjUbIOusq6!QM[,np*%f@/e.,dr*;Cs.%m$)K62jXAomHl),?g@8I"EG<HP9<QK#^<'<`rT_&EI]&>"]XId!+W"FumrqH`:1DuHQojYe]\s[8G!$fck3gc[%VmFRl!:>"hi?$a6B/=u%%S_9A`:gKBeD$#P,UGuGMU@Cmhj%*RD0Sk.?5m5-hR22"n(?uXfPE&C+RSf?=f7gN9_!GjSNb,8^,A%)%%P8kJ2L8GIagBHXJ(SDjkhW::Un-A-,aW\#;nQB%oQPZY-+U-]7>aUi";HK;>0-Ne/,iYhM5Q\VnrjOX\Tdtunq(ib/T?3*KNhbt%Ba]:4(b/.K_aGA?/U`T2ZVoDk:%BE90]Ai8EM+L5VonGUl%6)E(AGG5&bbG+1V#8T:sB2B9sbK]/PN/hcMW!(m+G_$NKq<8%%*jG%Hc?V-l6[$-E<<$,:jUDX_+?Mdmg*tMbj=?A,gdm@+inN&=BShM?fXsMk\2,V;a=.[0ZH^XMRiE8UNF\T_49ON,T\X]D>TSqGEtIu%Q=maFORVO]]%uBXaePo#4>o_Q=Y)9;a-NYP&LqaTl,>AHY*eGW/g=]tEC_cH7$i]4(UM-2K-ZN@T.GO(m3M)YM't9ie%0SB5_f7n%e_^?9e"]^0lSj*2n,"rjbB`@4f/_XYdX?(ifh7]FUIj,NOPJYE$j@DF5"6-)1--DY-<DM3ZK;?*?0(ZZ?m):O9'R/U+%9(&l%V=S%G8OX7Ipt:AN\Gf=[D#9u9U_jr=Y5*@A:Drd<QpKs%bGcEHI[4D3n[e@3gR*KgM)D/k?>J5p6r4CHcdWTmHTao;O+/ET6lXhN$sE0%BAc-.4aSY^k^1t2>Gdq'lPCPiZ;:7"I5cP;cc9@2^&.F@`#j@)5W'ls7iC'<n(:Fn)F&\m+5\%'q/tp$Ca4E&/O-m0QuBc>m8ElM%\0.;%p:=am>;-FJ_PY&&n_(*;>opG0G^D,>BR"!SgNA)&o*ht=k]]e_kf^9f8?I"e?!403\iO"s`$ZG;?objl/#G$'Goj;?8e)K<%'\mQD9e_81Z7Z.iT+^EZ>qI9q<@$oka%k?:Go-#>7ZRoE%oaqX1.I9#"!S</%2btd3&-FkHeNZ.QBOAsLhW2(\ZgO:@sN)!_17$f%faU8:,3A=3>@Cm3n"T<+>C_#L)T<'J0(uU0j/RQX#jWmCdf'1/>l!4BeC9a\[Ke'bX@^_rE"Gk2k4Z6i3!:r_VlnmdcQ7KeD(NV[%WpRR+2lfEjC$p8TnaMIP.+^/ce#j($s3^RQrqgA1>TS<cCIB+^3A=bMG7!U)@+"Vq(QEFf<CtB`FGo!s<3qH9_h+q4:;>[Y,>4?#%;6j+fCKmBCXCEiEo?i>.g`2u*`AW#<VlQ9f"@,M<s)(?IeR=ml#OXROWPjP-UNB$9Ehrk2V42ap-/5i#Y*RR2+T6IF-NtYGc,8Nn%<$l<2l)rc&058N'mE/'_'IpItb`UC-0$V;9`fI^+[k%7ZG%B;20P.R;o.t#hR)E'sN%:d,.T_E>>GbQL3V3RZ#VD+='7;h+nj:Tj%4b!p!m3i?^/$>F+p++M7g\:Ma\gj0&@k!Q&c+qidL\\_sVncFpoA@l>km$1$[BiKO,E3Y(B>tZ+U5Dl[*gs1:0s6)jpf4/p9?./W%$"G3R^eQuCM4!/CW5J;/.`N/FWm:]Q7D8P$NTM-fK$Zb'+uo2XoshAbQ(>UM'.KGqpdVFRJ?C5`%1g($%c7Cc)7HIKesF6n`DVbU%1qEP:0hqA/k5n=?J+Jl$/#.I`7i0DlOY.dpA'+(0SpOC>^!]7!H1c>*DS?sIE`I^IHnf0Q$]O+P],$?.Mqg"<d43t=q:%EDU7%Gi%0HL4mjiftn6OE'PJ6q\qnl*m4[3Cc.>752p+VRsmpAq^r]!!8$VY27e.fChT9Y:\ZG+=K_4`d<m<gfF'[6,W,EiKu=K+K^,@>_7b%YtUWHluUbG1b8IYIH6;h>cp_#FR5n/c6'g^Ns3g&.-mVecSjcqhsr"CPLW/g@JfuRN>8Pe'%h!>E;e)*KhGO"5/uql'2Y]8f3FeV%,TqARgMKe3C,0HoMi4(+RL$X'0h`j&0`KP)Y[=>u1f9[oSu.)'<Gl?:cpK:saK)u[H-R[ZV]>1H!u"fdh)CE@^k+@ghiV)J7L?$N%[ok5#@KHil3iP)iOC$OL@PI+)0WC-9M9c,ji9Z4&M2\#;pLV.:'YhMp'i#kA7P/M2oGi7$SIm0"P"i`ZQbb+:`]"i*%kEU/'Ep`h%Jd;oZRtaXoc8M)46;4\b9&u-("G?fIBELT?J38&An44.-@rRVOk.Z\tKZGaR84QA+AB%%:Q&Y:?pg*a5MVd_))@2,Lj"ei\-8B!k%79N*OV%U$WNlA*c%`QRug+@.Y;etJMc5Ocp2k*#'5En7gKE+ojAKI.L81BGRThEb@lCm-i,!'$]qq94W`L8qTHLpes?=Z=aBjk&J%[uiUc#haF1$(e`]Wh$c_(G\L$_T3%`];Ac`:$c8::u43l1eZV1Q\CR.Ho7&(_Q#9X3"`c9R#&%seL`S#]r>4N8,caP+6.*7[fj+h%m"DTap7,X=p$(I&Z$j_NS+Sr!-73o7<PH:MbGWb[XSs*3@Bi[#^X>BdMgR5-f6kB/8SLr$fl(LU8!]>KN@V.jT@.$L2%LoZLBSJD%ZRoUul*^`Z#;_K]>2^tNj_C4cBt>j-4HP#ZplM`DJF.ZFBi#qR)MUc0ErhM0S&[s;NT7CnZX'3C36m72.]i7m&?4Cmg7,[pX1%I+%OXR&,%>A,bFseP]QS9A2@@m$I:.(OcgLtbmett1jMC(seP1I4b3H^VBj>AP[ekgT8:CqS)YruCHVmVX9K@=N]_lSZpp$OmQnloMH%K&3Hs$lp`ba6`;L+$>[b,G\I$GnH8p5^L%GSiT4i</@XBlW7)+_WaeF[nupm$$3(GVf(&7nj$+Q&uIsndP06+<EY6g_5sM#a*:h0%H('mTRr6[qr6V4ACq9_.m>acEXZG3*+pIXQf_L$Q2,n*i<7"f(nsuYkZ9P-Lb"2.c0IZ?pce4fG'?sl/2jPOkeu!&1N2tc/9ZX2W%L:GFrm.j]uEh;.;'q!25p!^D?!#M!UFIDlm#)Cas5l.@!3+cY3Di/Q"ie$#VZR`CFNHr!pO?>2nlt,SCYZueC>`hJI>K1Qk.Nf*@%`WPuZG0*VcXI2KI+nj]>`XT>Ir<Ta<I/T^d3NK6O`YC^6`P-dG-A)=Qf(K6s%!)QK8$%<(VA`>;q+Q;fPBV>c*U$qq_4Js\O>"!b%Q;t\.1AS"1*QHf>4@XN9T&@gnM2(IQ^)XMMTmI:oH%5MU&6$is#CZ<AFSlNI-\)5^[Sr,SPo(FlCW6j(mX?J5Qrh0YTbD#=A+LNK%eP)o/+,i]*S-CO*4c;>]$N`oqmNOlE#'bR^Z,#Fu"2\a6Bd(EB2/>:t;s0HpNd9XJ3fCcf%n3%T7)3CiI1A*4E:L^43AL@lp6D#(%U\RKVU.oPRBbT6/LGghUOJAXGoEL!Sal_!?IdI-9=Qm$*a=>'QOX"uif"*^iLK9S0;nDt7m;C?+Q>36\Y1qU(b@q+&NdTehYk6?<%eYDcBU@`RI8KLnbS\k/.D8%KBggSpYnQCHGfLpL$KEUjQ4seGO[DbZTZ0<)BnfXs@p`NM5hV&d3"p'#t%_XOIpP[`800OZ>rfY"c%Dq^+C6D?SFe]/=kc(q:K$31u6m2!9sdI@u.OH\@^$ko[+i"t\ANXY%&/I3V&;b)i"qT'/($bTSX,M>@eS2B:5S^(n619@Y!-H"uN%bF-fHa@eQ`*IHTsmYt;=&A3</qb!rGNS#qf#83EKgW1@mS.b1JEmAflOZmq<*%)3cZl3?jTpGK8dtU`P.-A\a;f!2C9Er_b-.=]j%JYDh*5?V&_`DViGpU4!u"ON0F,@f@a1.LK6NJq<#a>i_9)OY";An,A+;JEV&n]J):cbnCr(Xf_*[ZTfT<aZ@GY5Wn3Tg??><VN3O%QK#Z6"rorcO,SU+?j+12&ES=G]W,35*R#TWoIDunQ&$ob::m'J'N,]5S+fdaPFu]eCr8!3ANFnWg.U8#Ynf**PM(-7YZl<gh-ji_%BYe*jc]!+.*^_Kt-!Y9:G-+7\o"I1]ZAATPls\"<0NLfkck0b!!7`5[HGt$WFQ=W,IpTCT38:nY%4RU&c!2qeU's&QcXOeVK"Kl]%MEcE8mSkO:mK%*&0n/iHmc**WkaWf'-kD+hBDni6`70*3?$*RG]k18hU/B0[rE$TE'"nZ(`ZSS%itS+YUD]&K0oq'mC"]@99FN(=%GS`*6LeDPo@BVc4X#k6[mpP[ekMA:4H_r[jqhbn,p'_2S<fZlI8u[\2K97ED?gNOEZuj*BgsT^Kj@*53NlRei`o<\&=[+HbW!-h7%WHleEC"8Z6Tm$-HjVX^@@GGGj<D6Z1ao%^apEJK?>3.NgC3^r&HO6u4BNBk0NDhX]e3'2EC;I#,LK!Hmk2kt;=_(XHq>m<pfMJmM%EEc_Jcou=M(=0(1ggGZIcF?WRW?+ad8YK5@Q\jiBGsp8oBSF:(3(q[`DUsWE8c-##7rHpBDHI!Q9A7F=L_XHCYH*cXb6M=%YC1r8%[jcVS1_%L2p49\r9A"@R"5'D#ip$d&7pa-\5L>>>rRd52J\KQ=&i);`K>`QR\J-Zg'p/;JcE'i-0`H938HHA!LMZAc#^YB%ENrcY%Br`Tq&.ff<@oko8b6gdh;@5sD]+bg`iFq(k.3N<gYdW:%\1H\o!N1k0J`335Z3#V$Aj5u.(.;)jX2>Y`,fPq-+;>B`fA9("E?m%W%lW8)!F=Y!A$HN[/`pIf,*DSsfIH^_N<e5T@fEc&T$uW9=[a%]K>j,hK5erD>+(l;k;`!l(kod]Rh_4AmK64@;,Asngdm4[g$V^)'%#Q]XEq^<r-^lC2Zk29+sJq6O,*Q=r[9LJoS;?[BjQ2m;Fe($Qrd\3HCNr)+SeO'p%-5J9S%ID\W/\ufDH`jW@&UJl_F!4,H$nMdN%+?8h$m!%E8CjQp\8Pg$KJZ1c"?]XQh1u1ST`TZBb:^k)[3>>B8D+O_9*l`qr)^6jRc:-]>+k%2b6_BnY\P&l[XD8)TF=GB)R]Ui?%*F9V!FhE++@]W*:Km.,S*!kM;[)9#n2XGS,8dYB`Wg>`Cj+XB<#d,&u&iUknC\Dj'P/-sP,F,_cM7uJ<B94U4Re&iq3<R_"!pH$e%SY,L%im*iGf0Yok=Dm5:MP\gc-i5_FP??L6ck8mj<7nT'&i!KS2Z;pJMJdZ9pXP02+]@`7D:Oj8?$,:!HbCSm9Ea7;*Wj0NT!r!O%L8?VSp'^.ZCh%p_cdsnBH/*&gq!1QrK.gOQ7kAEQfi0]u+Du<s_A,[p+j]74oA*3Vo"u/3SHdVXL=WE+FNZ=1-3[H6Rk2Ps`NdkK%.`2V%q7G:j/`U)t2Cb+J35MFaoMCc&a-X*G7il,BFN*,RO,q8I?g!uhAX+W-+\hT@gI?&"*.mY,s+\qgAq(sY09Bq?2>"%jBm-?.%D=b\oomZXhl_@RP1We^?6MN-Be[Q[OqQ$dF<`tU<F!m?Rjre$k;_8=ZF3tgQ>:lhi&Nr(NNL9YON"D<fq\R_fb&(,XeUlMZ]i\>L%l[`T8Y%Mb;*chSS&[IP&]u.:jb'N'7QmN[!hSl8.0CES;pR$p"Q7BlmMJ5.O<S7iB,nK.H\b8==h)uNs(k[QA62Ttc0l4I?VG\(7%m?30]mmAWhlZmr>8OujcRUbTh\ub=!n_d.b1C9%"+g^PnjY.b)3;jLem@%-J1c#X@O0P]qLBVtIN[n/+-D*Yh0%02]SH"$N(Lb9Y%@`Wrt,QQs]+nDq"*O0HDLMG1PF7BjNT$;?R&SCY+:GPb>m:=GMLpcoq40&)Z#"&<4&"DBR.G9GiFqlIm(tD[6o)hk",rrE%?%.;g%-t`4ZpX<KY/i?614&SHUQ`iTqMrm'o`M6:<lfV/k;"`a+i[@V)lm^C+VkmS-"F8=N8$4oDP)$lXf,`n.lmmsX!?YhACpV&0a%YP2%9ZB3H0f:FCj%q]3SKn\M0dALg8K>C1NhjDiH*6)1,=`0861CM:-I+%4*SGJ1)>1lS?ApZK<"(*B=c>s-XX\TG<mCNL`FR=,h2igd%k9fL2/,ZqgI9;KsP!j]ua0eM8AV>&nf/?4]9tkJa+oe(s,n'Q?CLmY6C(>h0g6i(lUq%9:^It;q\;OR2.-P0rAMJ-ihiTJR48-6q%N*"Z_d)T6NCP'8f=jSg&Nctg+keMHkgG(dh@Lu2Z0?d6g/h1H6+#AiSAVI%!)"#s!f%]!H^iK!:cn@a`]e8KO3HmL@(<4Pp[IUo`%Ot@FHQ<ugYNJLT`NG19P19,V_BJq%nFH9Fq9[U^T$mc4;`<rXk"NBI!fL/4TIs7*QlqJnrk?\G6/JYd36?]0X#h\?h0!c-'q9OD:%:AqelF8GGnQetr*87d2u8'EPQJL.?/?J9#57O*?%Ua]klTQNr/=XPUNh[q70d4Ni)>d:Y_Lap'h*LR[8ZEP:E_"of)25X?=\r9+S%-?$T:rI8RB0"^Oc1OAo,bXEdC5?l7lU;2r&a<..Q.)/[AKp_?Kc?Z0H8'\<Gf8`OLph%dl'Ee&PY_'UG7aWX:04Utd@r\K*F0ZK7%oDbE*:]u:lO'sFD,T2KfYKTh=(EK[1*+E&q,[+Q41_ar88)6'dS;s`?aEZ"+r><&8r$;i@gM09iTh(F6VqYjk*AAp_I%$`Wf'3(^%m"V7PC9]T@.9-rs(*f"FAbJ72j4.!A(Pq'AfsEB3D%$@(dF-"SD<Ln4_<"@TW&irR8aV<_*s`ZS^OiI?o8B%ea6'Q_.l4W&e.M8>%>O;RlhD_Oo^mZa=IjJ-c2Z0pn-1V6CDU#d?nQFoie(UpgIHFa68N\Q,h+4PS5m#VE6aX!;Fe\#*'ig\qDt5cM^NZWHB55u5&fbXF%DLaU6f"77ZB))$$pL+0i/W:#tjcfu;=?*X;4JKFj&VZ"4QUmC*LCMmW8@Zok$=Ri6L+kkUlZK+HH`T02G"9[3S"_N0/iI*u=KcmO%bDg.SFjDRcKU4FnL5s@I)W0]QA"N8$RUglneEfFuk7VAo&9!G7MXRCXN)moZ8&Jh?hG2qu+M&l<3iUK:js)ico5[.*7'\66+Vp-Y%eR;:_lX:d&9u$%@B95]qP`8PQ%bFW)ARc]M2X?q'6CF8TaCoeP/qXBZe(k4--S].L+->o87KpZ9P.ZfjECQ_P#[OliFc%"00rA<s%[)JNY>If/8G&jt4chZ,^KLGhQAu";DAIOf1%s^!;;I*dM?JRFkDcXo&S;458R3[]AQ)Ta7$ER7umudaQBmEhgXN4kpc9i^U)/kU[%m*7t+@6_(W=\et-p1h^S09QAe7/6+2"Cb4Md63lWGNWCVq7RVIc(pNA5f^/I=Nb0#FZC"?@Tl(=JS8E8c9q<b$@,Be@&;_ES;.pl%F,D<?[qgn.jObqD`T=mm'Y`iJ*QWf>nug/F+?G";'YF]>KmlB+XJh,aq[N_O_I.gj&n-7$6p``(7c:+267e@JA5sS>l)!hSks=kh%J>'Q\o+4GCfm*jVS-<%@XIqZ#c9i`Qbg+*kZ:qcWjek@,<.&5uK[lFjo-o3H+$"(s/Vh#&+_K9NVZ=`5fJ_3Ua2U3Io+8u&rQqg_%i<5ku')J&F^TuHG^`arg@%FB=.[Q2/j:-^j`%hfJ3B8@7.2T?t,-47$L6\b@V2H+^"g%bb\;p`r9Q!!/QpP&8(OiL-8h:#N[sAa\%j4>XE(U]/ALBuQ@.\+FW02g2n9#A#S6D6.G*0X4Oqlr<;72`qNZef0U@YAA5WlZ&_Ts\]M\SYT=qMri@g]7_\[iO61]5DptSSk*,%A9_K<:BPA%Y>OF.A'UofUFLcdEg<>t<`gKu\qM"aNdXWF^C!E\K\fHe!8hiLOrU]B;OP6&<=TS932LBuat-UaMH=tshH.WG$gS(-%Db496Yb.:h86RN=9HPm1o<c?F<AkE6=_@Y49)eCMYaTbYg:AZ%bir3J(q/Em`]Uq_c5=]&ULI"g_ZNKd9:-0?hqr4B@P=Y<oF$$U%\mOB2@f-;R;sLeCa0ND%p?_,BSc,#58K'@2hBE7:>8"B3gd/@AZSC4@]e(G8GUKb'4U2IkmuOQ"mRZeXALn\lCi8R<hLqU\2FmI(%,]4VG/9fk1()n;H2lamI5=;fBC9b+\IcX>-od2W+kO0SAVWUF:=(J^c!R\F]fa.@W@Z]SJBdf`B1#UIC1b&=OjYWD[pjm*poWhVT%+)K#[imqN\`U(Q!%l]]bZ@06.I#K"o8^KBa%62B8\aJIZ]+59)YpP%ocBbsK`1Sf"V^lL;&;.o[6#pBV"p:IOpp:kXaTc4pZ3F6G%?/+,rp]/L`RXs+bC`k(lSom<1Q5j]cmqjhfN@dti[!UEGB*fF3C9K]cI4q3=NK]Oc5(%NsADV2YOG+OX>45uG?5)cS@UC00+"Wfj%NPl9_BQFP5'P=q=e:WL^eYFCg#Hb*Z*>du[bS>+m5k&^5PWS/j:h7c75r7quoHltOS68!g<OFHcHI,FWD(YFRSX'MpqKL)@o^Y;?%hl@!a.nr4.#EEBg!,k$WR#-CESmi)\^1$.tW<_e/]u:bmYOtGs9gBa?,-(qXQEtXj/HjYIO^\]LLtb)BK@Vre2"^tCrZ3Ms&4esf%X<4gP"#&sFNb//35:QOR^Kp[:g<f!u>KE,%7s;ORV-L_&#Rt'B5A8S-f3CORE;@h]+$?;^B%cj0#;[g`o`K.oZC45G#EE?n@/\7@%K>rC5_1henY9@IR5N'\sYC$gV]%N/l5*kSHBJ,jo\^R'i_Y&Q4(WSu2Nil(GV',Q5ID<5*B.%B%@Y(tOi-%72:'*D,Y)uK]\1;m[%:P.hR=CR?;Q&ZI_PGYgQi'R7AR88E-"cHG`0:BG\KAa&@1[?.`-,hV05l^uF>5*Zb]);OMkb*F]cN/[,@fQS&AZE['JFAkThi<92%MJ98(i:>=\knlZnG0@U\B7Q!J*d4>bA*h7O<7T68$m:)<*7f9A+9a:Ng3*n[/!/&:J_TY`3!Kq"g%SE1cuo\jkNiaNn$YR`eS4%d%Z9r"L"<_RMBpE![dTY<uKaj.l(--&`!$n\8rG$2"%!M&o!34l"4!+OAC+?>Q?nC2J*!5Z23!@6AjObV0=KlR&""l)W[s%L%`P$32%;ujdY##$P%[*A[$EO4EOc2c@'DWcHQO<^Wu1Vd&X]2bE=M]$L0B['G8,ud&P79u8`,uNDZfQhhbZ2QA2Vg=L]THgPuLeUT"l@UPW%+r#Zi4LmIrUjAH+KH8#_SJ#$dXG5o/<2X&e]WUE7q:H:=CXTH*d0HZ"UgXj#3F[FWo)5XsSJ^d!Dc/^*#@mJ%(a\c=^id[ER(H)t%kRJi'-Ws=KH[<PB(7dVLg?J)/ZtWs>iaM,M8m#",+;[6Hr4&QM.'fu,'j?WIKOWh9S7S"^6?e)H%OiV=CB-G*H;>F5YF;`fj%\&K%>?Hsh/a.1r4@5+_WUf?0OuW(fTsO1f6^`>Z&h=;F>h0>mh;npU#Fue`,)%K5pYrhKDPQF91,$ehf0R787M-YI#3hr3$&@]@$"Q(#%nSXY(O0]HNW-c`,B@nL^qRCQI$osT$P<E?Aj27&)UosGj!DBBmVp<L>ade"RD);(P3i;qa[/%W%Kh1oFk$Qe>4Hjc]fFmLOUu4Nc%@M;qsNMSUQ2#K6:Tq&^\?BLMd)KW7rJo8>Ue.EP2]4r!.`"F;BR,2K!]VoAO2N_JJ\eF47X!.A$e)qV&#?c9kaa61"</a6R;gatW%J`VLR\Su(!C]CFD<LgYdBF3a1>\-*f]*KrnrPEBV&h>h+)!Cap[JhI$U%se7.a2CEVHiXNCcr?2cshg:f>FBqb8q,:Nb(a9W9Sf-%KM;Fl5[X3bek%N!TN@b8\iiW>Z53kjO*9q^T4a3PfeA9r3eCeU5]QDPZ6p+SlYB&>ZF`8%,9(;U5WeDSQJK05f]'QP+'DUGoV0tX%l#WdHc43@>>U!8Z:IoR\@5\Crq0ed%)/SkG\qbWlGd@tJQk]&%>ka[H';e<XQ7%lM,4=ha)-0VS?'aP2,]AAXfHE8'3^'i@@M67m%T')+r\&5@Gouh,!2Y4grJGjSV.JZ7:/@m0%OcuXQc_<7]%#BdBY5'ombdOTUZ@5f@gQ>h'B&!6oP*XFqfgq$UpFQgZh/f8<@HO#l%D0fJ5]>rZC5sEr6G=7FM$(8fuZL>u'NsmMrl+SBr>A=kWUEh](I(?`V=@eDi7L,70-rB-!Q9;>;#H#ge^HoA+o-PKUe"t!PXFA/%%(S/9&lVYR@!LFibN,pZFO2pLmku$=#pNdN5Wfd7K'e.2/-AAq'#]\FkJB;R@Crn)=BC%4uUtCU9Oi=Q.rQ[JFj"X3aOWK&]!F=4t%lcrmc?&:+edrpspn+$YfnZo2M&i7>ngIG;?5g4Z4pSLMBQ;sp^Uf=>kG,\AA..c06@bB,;`E8cl7iOP<`gbUm:iU]CCns[_@LS32%>`,t;<i*UIghVqd")IImh5pll74NcH(Bn-oge?(SNqo8Tk*%".<B9[-`sg9=kODprGar0Y/0VkF.86@(*Cu:oO7a7aKC''Z$SFTb%([V$1S`9)PK/8HIdBi.tr12L+Nj7[%li&H?Y91CfXAhht5W.^>+te;gZ)k.&!;Q&)5^u#=kt([)QpGR0qV%=[SKLW8[Ar\B#9ja=%YY,^@QF_gffWF:4'bnuc[neYG3)nP5(0N22D-S.TiTcjV=^>7HEchh0.]1H`?,PjN&HQB@f*8#S;tD7[UKI8p**)6=.+TtK=m0W<%!cog&*/h(CR8rMjMK?s4kis'YF-#9h]%"-->CpppCFI$%IGjCZ,?\;V^N+H+D`U#@L?][hr4F3tMlHi9Lpu>d(7qVVW')oQ5gZU9%@9gBjJgk5<m$]0Yo"QmU@GI]n2D.cGEID\Sn^3@Sl"^gHZB/3tF"D*CGVX)<3c6T>k+kB?;LQ9\Z>l1'%TU`d0k<nda=>q0$s$(@%)`GTBJtt83MT7)[C`)/@VBlPFfP611?.q+POu9]G.pIss;!t0b@?mD4PB3P)Ta@RAUp4?R%[3*QZ*ALch)%#3K<2=doS,A'Up4?]%,q6l,^Q`u227@.0-E@o;`eO;)G>B-H,C-oAO'H24M_=Ur94L<kcJ\Y)8&07cQU%&nJP;4#DO8.\+/asGR*af@HntLn(,3l\><XF2%ZLK2_#-R>%p(A*[A7%bC>7/2Ynkrl!)*=&pQEL;/^4,Q8>lig#r"ZtGnlGls?Wk^XYIo3(kn!g[Vj4$!SLX)toA:PB?<UcWGPeo@%h]0i8DiQD6q1V6g@>WZU=3XU=b'pt,5OOr(P,ime<?S5U'.0lt=ANP.C(Km6X]LZ/YGT6cm4bBO?"Cdol#0X)'q1Eek"$!:E9q_f%/u4/;e+,4/c[,GW@laMTC8/f2C!-(WX,1_E-S?Wb04`ki4l[SnEG\I[X1>DXO;\_^$#8"#!1El\+NJ=R^<D)=:.e2<@8)0_aGq^=%Use.JdC`giDY;Ar\o'qZBApk8/DOL>.g$E%Y1nhnLN%</L!=2fk*e?[QJ?MSOP)L8K]d0;DD&0#\0mcoc%UIq=h&a-Z,2!8g0N=)%,*?j9+Oq]LFL!oiKq%`c(N-B`*-C/Z#uIsIK-ltJ7G#W`be%Cio[Aro*$`Wbf3G&F+8OO<D6S[4N;#'4/K.TjGMd8b&,'[l,7-:>%,)Yq&DB-d8c2*\52gA9gfbTP_oFOoBX(%*mSo)lB:NM*m_#0HKgL+8uc*h9oh,Ud5RR;Pm[cdrXc]N(lf._*]ODQ'"lC2</,g/&i%C6g,Fi5M;a,d@QGY@Ec2d)PKd*p&[B%mpoKH0p?"9^q"d<>93iA-<F3)DHg92oHUCY)H41eiZlMe<19gNb#CAs2rpO2#:SrCTtPL%fF?5A6L,qS2/)c5Aj\De=3;l@p`O+P#,<R2<u5X+_BbdXC])WJT#DVG$XR9O-;R7/M`$OUNBUB*]>PW3YfB=,XLTs;*bDS\brfSR%@cCJr!,PB]mN]Z[>k\kG0V*F6Q=p^%d<A6*4s;6'n-h1>Hp<%)-:cJrfii$n$l$Sd/*]`_?inf1kO%l`E,pE]V92TD$mNG]fhrJl%Inb]a19/.[lDtjQfHELq7CcRk)dd[P24ilo5N[<629E2D][<<JB&1?#$HROsG[a/-:5"'6<J;(<7(fSH1W^)Rbq%G31"Q,ceq>\h%+Qg#<XpQl3\SA_ND`fgo]uJOqo!^a'0,insJC3M'e,&X<EmFLVT0KB&:9EESi:F[S%Vk/0>+qL],3\cMl*($KLOjm:L[U\,Z9A6c%3K!K[2$SY:#HJN4$_On\lE3=W*SB\pW['6IX@h]&pQjE,s8(te55jTlJ,XP>r\slNo7-Y(rK2#:?hi#-hnSjMrg*:#;+75Mr-*Pf%?_9kh`m>9]+[%-BDcf5`cn(:%#l7ZC91=hcF$jbS]I$eDRPL3NR9@Hl$%Z_V]%k/W.S52!9t\K%=eS0/%l;3Z`eNYQ1oK%'gQ?Qa%2b7"\7)fFi`'i6=+Cj-g)WZ$2oGdsld]^5S&6=OW<09_/=Tos/(70:+qLbU$L64$>7Zt=MXd^t^+ks4<<jc3&,,U3l0J#$$nN#;>%R[)Fa";p_aWq2+"eJkZKYcDjAgP1@`Y^R0?/Z&6u$@*5e4W)Xi#p=-Q<Y;Bd2,]B_btr&#o+"Sp]5JE*!Q%+U076Ftlip)A-;q78%,h,pI/A26_3)h=7jNApTS/k/.9>;sNUrSrW7%BC;N\9&Y4gLiV/SI*F7L;?T#9q]<+k8.n)^bBP1i$$2V970[*3$XnK[h^I>U/Ve%.R8o=%=Y'!KZl75RY+ocLk\>)4H9FSHg-10Z$![\(8%YV+,dZB\SXf(D>898?bH1'IB/5ZL5T&4^Lcc_D>>/@31r5qYWRaF/j]FO%pD>k7l&9V@,_nKoJ3`6hLm`j%4seE0YZG;0hK;Am+"TjYWnF,B]M>U8.""`V-K7,<j0h+"Rstd_aLW.r<C[-8=Vhb"Y6AS\R0A\$%"K1?i6]KHCKN&9XGV65'!_&dOit9\Sa.h6'Iu48AUR7Y_i`+ru_oek'phm*<A;,Rf%?s>*[+S=J/S!,CgW9BTB2u8oSlB4LFJ%5'%a&Mrb3R&1e7h\=M+-@g:difJ3.Cm&eK/!8(RW.#_;HX4jgto<b\B5RR#mB/[#-\H3)TdS'B]R:.LBeE6,!tfH=n_uSo/C)s3-A)P%2$S]?_k_<pO.9=^!EB8J[E>Yo*U)ZjjQ)oh0GTV*ERLi!`mW3#(iKA)?RIi0=iD,>#!i_NAea/>:,]`%CIDfF9Rh3M['tqr/*QZ`%J,89arJ1C0s7%cBj7V%(pY50:n.2.?q;jj>qWHc8bO<4Fc`b+^roqaYqt:!epA*=Tr8k,3s7PiqrU8oV56(HQhu<?D^]+5ekJ-u]%?iMd@k7Rai0>IGFJ,H3?ru]?qiI(~>%AI9_PrivateDataEnd