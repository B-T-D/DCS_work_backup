%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 001x006.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 397 152
%%HiResBoundingBox: 0 0 396.0117 151.4844
%%CropBox: 0 0 396.0117 151.4844
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 6614 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD07FF7D5252FD047D5227527D7D52527DFD0FFFA852527D%5252277D5352527DFD56FFA8527D7E7D7DA87D7D53A87D7D7DA8FD0FFFA8%527D7D7D52527D7D52A87DFD56FFA8FD27FFA8FD54FF52FD147DA8FD07FF%FD167DFD4DFFA87DA17DA87DA17DA87DA17DA87DA17DA87DA17DFF7DFD07%FF7DA17DA8A8A17DA8A8A17D7DFFA17D7DFF7D7D7DFFA1FD4DFF7D7DFD11%FF7DFF7DFD07FF7D527D7D7D527D7D7D527D52FF527D52FF527D52FF7DFD%4DFFA87DFD11FF7DFF7DFD07FF7DFD14FFA8FD4DFF7D7DFD06FFA8FFA8AF%FF7DFD05FF7DFF7DFD07FF7D527D7D7D527D7D7D527D52FF527D52FF527D%52FF7DFD4DFFA17DFD04FF7D7D53527D52FF7DFD05FF7DFF7DFD07FF7D7D%7DA17D7D7DA1FD047DFF7D7D7DFF7D7D7DFFA8FD4DFF7D7DFD04FFA8A87D%7DA87DFF7DA8FD04FF7DFF7DFD07FFFD047DFF7D7D7DFF7D7D7DFF7D7D7D%FF7D7D7DFF7DFD0AFFA87DA8A8FFFFFFA8FF7DA87DA87DFD0DFF7DFFA8FD%07FFA8FD11FFA8FD0BFFA87DFD11FF7DFF7DFD07FF7DA8FFFF7DA8FFFF7D%A8FFA8FFA8FFA8FFA8FFA8FFA8FD0AFFA87D7D7D59FFFFA8FF527D5259FF%7DFD0CFF7D59FD047DA87DA87D7DFD0DFFA87DA87D7E7D7DA8A87DFD06FF%7D7DFD11FF7DFF7DFD07FFFD047DFF7D7D7DFF7D7D7DFF7D7D7DFF7D7D7D%FF7DFD0AFF7D527D527DFFA8A8A852FD047DA8FD0CFF527D527D27527D52%527D59FD0DFFA85252847D52527D527DFD06FFA87DFF7DA87DA87DA87DA8%7DA876FF7DA876FF7DFF7DFD07FF7D7D7DA8A17D7DA8A17D7D7DFF7D7D7D%FF7D7D7DFFA1FD10FF7DFFFFFFA8FD28FFA87DFD04A8FFFFFFA8FD06FF7D%7DFFFD0A7D52FF7D7D52FF7DFF7DFD07FF7D527D7D7D527D7D7D527D52FF%527D52FF527D52FF7DFD07FFFD157DFD1BFFA8FD157DA87DFD11FF7DFF7D%FD07FF7DFD14FFA8FD07FFA8FD14FF7DFD09FFA8FD0552A8FD0AFFA8FD14%FF7D7D7DFFFD0A7D76FF7D7D76FF7DFF7DFD07FF7D527D7D7D527D7D7D52%7D52FF527D52FF527D52FF7DFD07FF7DFD14FF7DFD09FF4BA8FFFFFFA852%A8522752A8FD05FF7DFD14FF7DA17DFF7DA17DA87DA17DA87DA17DFF7DA1%7DFF7DFF7DFD07FF7DA87DA1A8A87DA1A8A87D7DFFA87D7DFF7D7D7DFFA8%FD07FFA8FD14FF7DFD05FFA8FD0452FD05FF7652A8FFA152A8FD04FFA8FD%14FFFD157DFF7DFD07FFFD047DA87D7D7DA87D7D7DFF7D7D7DFF527D7DFF%7DFD07FF7DFD14FF7DFD04FFA827A8FD0DFFA851FD04FF7DFD14FF7DA8FD%14FF7DFD07FF7DA8FFFF7DA8FFFF7DA8FFA8FFA8FFA8FFA8FFA8FFA8FD07%FFA8FD14FF7DFD04FF52A8FD0FFF52A8FFFFFFA8FD14FF7D7DFD14FF7DFD%07FFFD047DFF7D7D7DFF7D7D7DFF7D7D7DFF7D7D7DFF7DFD07FF7DFD14FF%7DFD04FF27FD11FF52FFFFFF7DFD14FF7DA87DA17DA87DA17DA87DA17DA8%7DA17DA87DA152FF7DFD07FF7D7D7DA8A17D7DA8A17D7D7DFF7D7D7DFF7D%7D7DFFA1FD07FFA1FD14FF7DFFFFFF7D7DFD11FF52FFFFFFA1FD14FF7D7D%7DFD11FF7DFF7DFD07FFFD047DA87D7D7DA87D7D52FF7D7D52FF527D52FF%7DFD07FF7DFD14FF7DFFFFFF7D7DFD11FF52FFFFFF7DFD14FF7DA87DFD11%FF7DFF7DFD07FF7DFD14FFA8FD07FFA8FD14FF7DFFFFFF52FD11FF7D7DFF%FFFFA8FD14FF7D7D7DFD04FFA8AF84A8A8AFFF527DFD04FF7DFF7DFD07FF%7D527D7D7D527D7D7D527D52FF527D52FF527D52FF7DFD07FF7DFD14FF7D%FFFFFF7D7DFD10FF27A8FFFFFF7DFD14FF7DA17DFD04FF7D7D53527E52FF%52A8FD04FF7DFF7DFD07FF7DA87DA1A8A87DA1A8A87D7DFFA87D7DFF7D7D%7DFFA8FD07FFA8FD14FF7DFFFFFFA852FD10FF7D52FFFFFFA8FD14FF7D7D%7DFD04FFA8FFFD04A8FFA8A8FD04FF7DFF7DFD07FFFD047DA87D7D7DA87D%7D7DFF7D7D7DFF527D7DFF7DFD07FF7DFD14FF7DFD04FF277DFD10FF27FF%FFFF7DFD14FF7DA87DFD11FF7DFF7DFD07FF7D7D7DA87D7D7DA8FD047DFF%7D7D7DFF7D7D7DFFA8FD07FFA8FD14FF7DFD04FFA827FD10FFA87DFFFFA8%FD14FF7D7D7DFD11FF7DFF7DFD07FF7DFD14FF7DFD07FF7DFD14FF7DFD04%FF27FD11FF767DFFFF7DFD14FF7DA87DFF7DA87DA87DA87DA87DA876FF7D%A876FF7DFF7DFD07FF7D7D7DA8A17D7DA8A17D7D7DFF7D7D7DFF7D7D7DFF%A1FD07FFA1FD14FF7DFD04FF52FD11FF52FFFFFFA1FD14FF7D7D7DFFFD0B%7DFF7D7D7DFF7DFF7DFD07FFFD047DA87D7D7DA87D7D52FF7D7D52FF527D%52FF7DFD07FF7DFD14FF7DFFFFFF7D52FD11FF27FFFFFF7DFD14FF7DA87D%FF7DA87DFF7DA87DFF7DA87DFF7DA87DFF7DFF7DFD07FF7DFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8FD07FFA8FD14FF7DFFFFFF7D7DFD10%FF7D7DFFFFFFA8FD14FF7D7D7DFF7DFFFF7D7DFFFF7D7DFF7DFF7DFF7DFF%7DFF7DFD07FF7DFF7DFFFFFF7DFFFFFF7EFFFFFF7EFFFFFF7EFFFF7DFD07%FF7DFD14FF7DFD04FF27FD0FFFA827FD04FF7DFD14FF7DA17DFFA1A17DFF%A1A17DFFA1A17DFFA1A17DFF7DFF7DFD07FF7DFF7DFFFFFF7DFFFFFF7DFF%FFFF7DFFFFFF7DFFFFA8FD07FFA8FD14FF7DFD04FF7D52FD0DFFA8277DFD%04FFA8FD14FFFD157DFF7DFD07FF7DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFF7DFD07FF7DFD14FF7DFD05FF5252FFFFA82752FD05FF7D2752%A8FD05FF7DFD14FF7D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DFD07FF52A87DA87DA87DA8FD057DA87DA87DA87DA87DA8FD07FF7D7DA8%7DA87DA87DA8527D52A87DA87DA87DA87DA87DFD06FFA8525252FF52A8FF%FFFFA827FD08FFA87DA87DA87DA87DA87D7D527D7DA87DA87DA87DA852FD%09FF7DFF7DFD1AFF7DFF7DFD1AFF7DFF7DFD16FFFD04524BFD13FF7DFF7D%FD12FF7DFF7DFD1AFFA1FFA8FD1AFF7DFF7DFD17FF7DFFFFA8FD13FFA8FF%A1FD12FF7DFF7DFD1AFF7DFF7DFD1AFF7DFF7DFD17FF7DFFFF7DFD13FF7D%FF7DFD12FF7DFF7DFD1AFFA8FFA8FD1AFF7DFF7DFD17FF7DFFFFA8FD13FF%A8FFA8FD12FF7DFF7DFD1AFF7DFF7DFD1AFF7DFF7DFD17FF7DFFFF7DFD13%FF7DFF7DFD12FF7DFFA8A17DA87DA17DA87DA17DA87DA17DA87DA17DA87D%A17DA87DA17DA8FFFF7DA87DA17DA87DA17DA87DA17DA87DA17DA87DA17D%A87DA17DA8A8FFA8A87DA17DA87DA17DA87DA17DA87DA17DA87DA17DA87D%A17DFFFFA87DA87DA17DA87DA17DA87DA17DA87DA17DA87DFFFFA8FD12FF%7DFD6CFF7DFD12FF52A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DFD4B%FFA8FD7FFF7D7DA87D7DFD7BFF7D7D525227FD7CFFA8FFA8FDFCFFFDBDFF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T15:19:25+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T15:19:25+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T15:19:25+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>100</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9P6retY6XeXyoJWtYJJh&#xA;GW4BjGhbiWo3GtOtDirF7Pz3rFy0hGgS+lHBFMrrJIxkaV5gqxqYVqCsAIYkbulQFJYGlW6v5+1q&#xA;wimki8sXl16ZdUVCwJKyrGoP7s/zVYryUbUZtyqq0/mBrX1Ca5Hlu4V0cJEkryIrgycA/IQsQtKF&#xA;vhqKgfzFWlT/AMsa3e6xYzXV3p0mmlLiSGGKUsWkjSlJfiSMgMa0FMCpvirsVdirG/Nnmq/0Sa3j&#xA;tdN+vidHdm5zJxZZI41X93BcdfVLGpFAp64qlF7+ZGsQN8HlucoXKxtI8ql19SKNHAjgloD6xc16&#xA;Itevw4aVXufP+poI2h0JxG8M9wXu5XtgBCnJE5GF15ybUBYCjLvWqq0rKtLu5rzTre7mh+rvcIJP&#xA;QJLFVbdQ1VQ8uNKimx2wKisVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirznSd&#xA;R1zVNNgia61rUZpLG1nvzBHoiwcruASFAtxHGxG52piqZRx+Zo0WONfMKIgCoijy6AANgABirf8A&#xA;ztX/AH8X/hvYq7/nav8Av4v/AA3sVUL+98w2Fjc31yfMa29pE88zAeXiQkalmIA67DFWQ+XJb719&#xA;YtLu8kvvqN6sME8yxLJ6bWlvNQ+ikSGjyt+ziqc4q8/13zRLY67fwXWrXttH9ZMVnBbnSYYljitL&#xA;SV+UmoKhLM93UDmT7UGKoT/Glr9Wt7ga7q3G4kuI05P5fRK2rRq/751WFq+sOPByevhirv8AGlr9&#xA;Wt7ga7q3G4kuI05P5fRK2rRq/wC+dVhavrDjwcnr4Yqsk85WMlrAz63qrRXjXUQWR/Lyxn6o0ayf&#xA;vJAsL19dePB27+GKqr+cbdbHT7z9O6r6eom8EIZ/L8YH1GcW8tZZFSFqu1V4O1RviqceVNcuNQvr&#xA;CaLUbq80+/ttQYx3gsSyy2F3DbckexQIQS7/ALbAinTFWY4q7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqwj8sv8AeZv+2dpH/UEMVZRrGoXlklubWye8aaURuEJHBSCeRorncgKNgtT8&#xA;TKN8VY6vnPzMbmRP8NTmCJYC0q+qGYzSSq3BXhTkESIFt6gsu3H4sKsgt7y5bX72zcSG2SCCWBjC&#xA;6xh2aQSKJuPBzQIacqiuBUP51/5Q3Xv+2dd/8mHxV2g/8dXzH/20Y/8AunWmKpzirzzWtU1DT9Y1&#xA;WSDUUsLR9QZZ63FnbSPJ+j7Ax8WvY5kKhefIKK7jFVJ/MHmCPSbK8m12AW00t2vrpeaYkjgNH6C+&#xA;s8DW78FEnIIoO4xS5/MHmCPSbK8m12AW00t2vrpeaYkjgNH6C+s8DW78FEnIIoO4xVbJ5h8wR6bY&#xA;XU2vQC2mkvB6qXulpI4V4vQHqyQNA/BfU5emoO4riqpceYNeh0bSLubXIUjnN+Jp0vNMjaXjcgWt&#xA;JZYWgf04aq/pqPi64oTPyzd3t3qWh3F7dJezyWWsEXMckMoaMX1qIgZLdUiZljCq3FRuDirM8Vdi&#xA;qHn1LTreX0ri6hhlop9OSRVajGi7E13IoMVXWt7ZXaGS0uI7hFNGeJ1cA0BoSpPY4q02oWCpC7XM&#xA;QS4YJbsXWkjE0AQ1+In2xVTh1jSJ5EjhvreWSTaNElRi3XoAd/sn7sVReKuxVxIAJJoBuScVUre8&#xA;tLmCO4t545reX+6mjZWRq7fCwJBxVVxVrkvLjUcqVp3pireKuxV2KuxVwIIqNwcVdirsVeceUdXj&#xA;0by9e6nJGZUtdL0hygYLX/Q1H2m2Ub7k4pTEfmfZ8Zi1vBIYohLyt762njHKeG3/AHsiGkQrcBuT&#xA;bcQ3hihuP8zbNo7xjbwubSOGQtb3tvPF+/nWAepKh4xcS/Ilv2anFVq/mfZ+leObeFzaJA5aC9t5&#xA;ov8ASLhbcepKh4x8S/I8u1cVWXvm+DXvLHmu2jjhVrLSpJGkt7mG7jIninUDlCSFYeiag+IxVkOg&#xA;/wDHV8x/9tGP/unWmKpzirzXXNSh0/zLqEq3L2V415MkV0Li0to/S+o6aZI2a8jljLMwQqAK/Ce1&#xA;cVQcWuWENtZ3tteT29/NNqKvqL3mmpHJ+8tzMPWkha2fmwjKhEB+E++KXRa5YQ21ne215Pb3802o&#xA;q+oveaakcn7y3Mw9aSFrZ+bCMqEQH4T74qtj12whisby2vZ7e+ml1IPfve6akcn7y29YerJC1u/I&#xA;iMr6aA/CcVVRrllBpuiXltezW1zOdY43r3mnIr/6chuayywtbv6k1GT00HwjFU68nXFvc3mizwO8&#xA;iSW2us8skkUxeT9J2/quJIFSJlaTkV4qBSmKGc4qgtS1zRdLMY1LULaxM3Iwi5mjh58KcuPMrXjy&#xA;FaeOKsM8wzeWNW1iDUY/Nul2627WjJC0sclTaXBuPiIuIwef2fs7dcVUtGudB0XT7n0vNel3Wovp&#xA;9npltJHNDbxotkkiRzMjTzVflOzMa7qFWm26rfmKPyXqkdnDbeZ9MtILG2NtAhuInBHwFVdfVVHS&#xA;sS1V1PSqlW3xVCW+neU4ZAv+MNNa0aSzllRpYnnBsbyW8jEdw9wzbmUIWcO/EfaqahVnVv5t8qXM&#xA;8cFvrVhNPKwSKKO5hZ2Y7BVUMSScVTXFXGtDTY9id8VYTZ/lzdQG05asZBZLbrEvpS8QbaOGJGEb&#xA;TvEG4QvuE6ua1GxNquf8vb90NdduDMFVUmJuQRxE/wAZCXKDmTOpqKfYA6bBtU00ryrNY6w+py37&#xA;XUsglV/UQ8ikjKyIGLkKEbkaKo67U3qqyDAqG1DVNM02FZ9Ru4bKBmCLLcSJEhcgkKGcgVoDtiqX&#xA;/wCNfJv/AFftO/6S4P8AmvFWET3kF7qd7O3nO0tLE3jyQWf6RBEkPosq/FHPVF9Vg3AUG3xA1FCq&#xA;FsbK1S4jluvP9iTCKW5S75ekWjmjZo0e44A0lSgpxHHpvja0yTyvrOg6ULz9IecLPUWneIwNLfI/&#xA;pxxwpGVo8hWrOrOWAFeW/QYFTw+dvJgBJ1/TgBuSbuD/AJrxVgugavFZaFcW8Or2ek6rPpWkmxkv&#xA;JooRUWigsPVWUU6ivBvlilEDzDrHGXj5x0paxgRh9SsZT6nrxMSrLp8IT9wsq1ZX3YfDtihtPMWr&#xA;iO7B84aSC8cItQ+o2UjK6zq0x5rYwqnKHko5RvvvTFWl8w6z6V2B5x0lWdIBbB9RspGVluFaY81s&#xA;IVXlAGUco337DFVl35kp5c8zx6t5m068juNMkj0+3S/tLiUTelOJf7q2sft8owoo24PTuqzbQf8A&#xA;jq+Y/wDtox/9060xVOcVee6vfalZ61qr22s2ulW7X7CZbm5gtGlf9H2HplHntr0EIOfIBR1G+Kqb&#xA;av5hTTbO4k81aaIpJbsGcX9mgkAaP0VWdrB43MQ5hwsS/aG+KubV/MKabZ3EnmrTRFJLdgzi/s0E&#xA;gDR+iqztYPG5iHMOFiX7Q3xVa+seYksLKeTzXpgikkvA0wv7OMSANF6KrO1hJG5iHMOFiX7QqTiq&#xA;rPq+vx6RpFxJ5p05RKb/ANa5+v2cSz0uR9X9OZrCWOT0IqpJwiT4utcVTHy3Pe3Gp6JNe38GpzvZ&#xA;awfrttLHPEyfXrURqJIordGKR8UYiNfiBxVmWKpNd/8AKZaX/wBs7UP+T9liqc4q7FXYq7FUm82/&#xA;8cqD/to6Z/3UbfFU5xVjV75uu5dXn0fy9ph1a7syq6jcyTC2srZ2UOIpJ+EztLxYNwjjagI5UqMV&#xA;QFl5UufMWoXWp+d9PidInWLSdDeUXdlFEsS852QqkckskrP8TpVVC8ab1Vb1z8vtOtLKXUPJtjb6&#xA;N5itFMti1kiWsVw6fELe6WMKkkUtOBLqeFeS0IxVXXTfzNKfW21vTEu+JI0wWMjWnKmyGczrOf8A&#xA;jJQePD9nFUy8seYzrENzDdW/1DWNOl+r6npzOHMbkckdHovOKVDyjegqNqBgwCrevf8AHV8uf9tG&#xA;T/unXeKpzirsVdirsVSbzr/yhuvf9s67/wCTD4qkflDWtal0PTbDTLC2nWx03T/VlubqSAlprZWA&#xA;VUt7jYAdScVTz635y/6tenf9xCf/ALIsVd9b85f9WvTv+4hP/wBkWKu+t+cv+rXp3/cQn/7IsVQu&#xA;qa35s03TLvUZ9JsGgsoZLiVU1CYuUiQuwUGyArQbb4qitB/46vmP/tox/wDdOtMVTnFXm2tXws/M&#xA;+oPFex6beNdzrHez3UNpF6X1HTDJEWntrxWd24MoCA0U74qg4NWgjitLm31KO1v5JtSEmrS6hapb&#xA;S/vLf1Qk7WMkT8z6ZULCv2W38VLoNWgjitLm31KO1v5JtSEmrS6hapbS/vLf1Qk7WMkT8z6ZULCv&#xA;2W38VVkGrQxizuLfU4rS/kl1MSarNqNolvNSW29UJM1jJE/M8CoWFKcWxVWTVYorDRbi21KKyu5T&#xA;rP8AuSm1C1jgk/09PX4zPYyxyerLR04wpRQcUJx5NninvdGljk9bnb68XmEqTrJJ+k7f1JFljjt0&#xA;ZXerLSNdsVZ1iqTXf/KZaX/2ztQ/5P2WKpzirsVdirsVSbzb/wAcqD/to6Z/3UbfFUbrWpxaVo9/&#xA;qkq84rC3luZFqFqsKFyKnYbLiqW+RdJfS/KmnQT/ABX80QutTlIo0l5c/vbmRq71aV269BtiqfYq&#xA;7FXYqxe7jW3/ADK0yaEHlqOk3sd4qnZls7i2aB2H/FZupFHf4/niqP17/jq+XP8Atoyf9067xVOc&#xA;VdirsVdiqTedf+UN17/tnXf/ACYfFUh/LL/eZv8AtnaR/wBQQxVk+sXuo2q2xsbQ3bSzCOYVpwQq&#xA;x5H5sAte1anauKsfi8w+d3uGB0aIQKsJq/rIxeSSQOKhX2VY0FabFwT8KnCqbWt3qrea7y2f1v0Z&#xA;Hbo0ZeELD6p47RzdWNCeVfYADiSwVvzr/wAobr3/AGzrv/kw+Ku0H/jq+Y/+2jH/AN060xVOcVed&#xA;a1c3EGuaoy6tbadbm/cSRXF+NOaV/wBH6fwZH9GfmEHIMtB9oYqoG+1FdOspZfM2ntbtLeAMNZEX&#xA;P4ovSUXX1ZjKYRzDrwFOQxS432orp1lLL5m09rdpbwBhrIi5/FF6Si6+rMZTCOYdeApyGKrWvtRW&#xA;xsZJfM+ntbtJegEayIuY5w+kq3P1ZvVMI5hxwFOQxVVmvdQTSNHlm8yWHpOdR5y/pgQrN/pS+h6d&#xA;z9Wf1vq8dY5PgWjHFCaeVpLiTUNEee+h1J2s9ZIu7e4+txlPr9t6aCfhFzMaURjxG4OKs1xVJrv/&#xA;AJTLS/8Atnah/wAn7LFU5xV2KuxV2KpN5t/45UH/AG0dM/7qNviqK1/S11bQtS0pm4rqFrNalj0A&#xA;mjaOv/DYqgPJPmCPWtAt3kemqWqLb6xattLBeRqFmjkU7j4gSp/aWjDY4qn2KuxV2KsOnS70v8yY&#xA;dQvyLmx1y3GmaVKPhaymhR7mSFlrR1uhGz+p1qipTocVTjXv+Or5c/7aMn/dOu8VTnFXYq7FXYqk&#xA;3nX/AJQ3Xv8AtnXf/Jh8VYh5T1Y6R5dvdSEQmNtpekP6bP6an/RFHxPxfiorUnidsUpm35iuvqcY&#xA;9MugkYkM1lqX1iGKtxDBW5k+rp6K0uOfKh+FG22xQ4fmI9LukWnXIto4JPXs9R9e3X17hYP38v1d&#xA;PSCBuZNG+EHFWj+YzhbsiLTbgWyW7+vaal61uv1i5W3/AH831dfSCc+ZPE/CDiqnqHmo6z5a82Wt&#xA;LJxZ6TJKJ9PvPrsTevFcLwZvSh4svo1pvswxVkOg/wDHV8x/9tGP/unWmKpzirzXXLiCDzLqDGZL&#xA;Kc3kwS+mvzp0ap9R03nF6npThmkPFgtBshxVBxX1ittZyxTR2k7TaiDq0msGKCQiS39QLd/VmEvq&#xA;niVXgPsHFLor6xW2s5Ypo7SdptRB1aTWDFBIRJb+oFu/qzCX1TxKrwH2Diq2O+sFisZIp47Sd5dS&#xA;B1STWTFBLSS29TjdG2YS+qeJUcFpwOKqovrJdN0SWKeOzkc6xx1CXVzBE1L5PW43X1d/W9eSkifA&#xA;tAMVTrydLBLeaLJDQo1trtXFx9bDv+k7cPIs5SLmsj1cHiNjihnOKpNd/wDKZaX/ANs7UP8Ak/ZY&#xA;qnOKuxV2KuxVJvNv/HKg/wC2jpn/AHUbfFU2uJ4reCSeZuMUKtJI1CaKoqTQb9MVYz+Xen00JNeu&#xA;VB1jzIE1PUpepBmQNDbgmp9O3iKxIPavVjirKcVdirsVYv5u43OveU9OQ/vm1F75wBUrBZ2s3N/l&#xA;6ssSf7PFUfr3/HV8uf8AbRk/7p13iqc4q7FXYq7FUm86/wDKG69/2zrv/kw+KsC0jUFtfL09qLo2&#xA;N7e6VpJs5m9dFYLaqGpLCjsvdaruMUr21Vj6n1fUBZxtGFeE6nq116pFxDIR6s1uHt/3Mcqco6n4&#xA;/bFXDVWAu/S1IWscscCpbnUdVuubR3CyS/v5oBJBzhDR8owTvXFWjqj8bsQ6iLWOVLdUtzqWrXPM&#xA;x3KyTfv5YBJBzhDR1jB64q3NrVtHofmaOW6JS90xoLGyW61DUmM4juA7BrqGMp6nqRrRfDFWdaD/&#xA;AMdXzH/20Y/+6daYoTnFWNQNcKfNxti4n+uD0jH9sN+jbSnGiyb/AOxOKp1qxuBptybYsJwh9Mp9&#xA;rl2pRZP+In5Yq7VTcDT5jblhNQcCn2uorSiydv8AJxV2rNOthI1uXEoK8TGCW+2K0osh6f5JxVvU&#xA;zOLNvQLCXlHQpWtOa8uiv29vu64qgLv/AJTLS/8Atnah/wAn7LFU5xVJrv8A5TLS/wDtnah/yfss&#xA;VTnFXYq7FXYqk3m3/jlQf9tHTP8Auo2+KpvLFHLE8Uqh45FKuh3BVhQg4qxHyPqqabHF5K1VxDrG&#xA;kRi3sfU+E31jCOMF1DX7Z9NQJlXdHrXYqSqyLVdd0bSfqv6TvYbQ3s8draCVwplnlYKkaA7sxJ7Y&#xA;qjsVSPXPOvlzRLtLG/uH+vyxiWGzghmuJpFZiqhEhRySzKQo6mh8MVQXlXTdTvNWu/NetW5tL28i&#xA;W10zTnIZ7OwU8+MhX4fWnk+OWhIFEWp41KqYa9/x1fLn/bRk/wC6dd4qnOKuxV2KuxVJvOv/AChu&#xA;vf8AbOu/+TD4qp23knQ7a3itreTUIoIEWOGJdT1AKqIOKqB9Y6ADFVT/AAlpX+/9R/7ieo/9lGKp&#xA;AdEg9HzS31zUuWnystmf0lf/AAAafbzU/v8Af95Izb4qmej+WdPn0mynludRaWW3ieRv0nqAqzIC&#xA;TtP44qjP8JaV/v8A1H/uJ6j/ANlGKozS9HsdLSdLQS/6TL687zTTXDtJwWOped5H+xGopWm2Ko3F&#xA;Uon8q6RNeXN4Wu4p7t1kuPQvryBGdY1iDenDMiA8I1Gw7Yqt/wAJaV/v/Uf+4nqP/ZRiqV3Hl2zT&#xA;zPYWa3Woi2msr2aSP9J6hu8UtqqNX167CVvvxVZ5d8v2l1+k/rF3qL+hfzwRf7k9QHGNOPFdpx0r&#xA;iqb/AOEtK/3/AKj/ANxPUf8AsoxVWsPLmmWN6L2E3MlysbwrJc3d1c8Y5GVnCieSQLyMa1oO2Kpn&#xA;iqXanoGnalcQXNz66z2ySRwy29zcWzBJijSKTbyRcgTEv2q9MVQ/+EtK/wB/6j/3E9R/7KMVSrzL&#xA;5bsrfTY3gutSjd72whZl1TUQfTnvYYpBX19uSORiq2y8r2C+ZtQsvreqNbRWVlNHG+q6k9JJZbpX&#xA;ILXBO4iXv2xVN/8ACWlf7/1H/uJ6j/2UYq4eUdH9SJ3a9m9GSOZEm1C+lj9SJxJGTHJMyNxdQdxi&#xA;qc4qgdY0LRtZtRaatYwX9uG5rHcRrIFehAdeQPFhXZhuMVShPy18jpbXVuNJib65E1vPPIXkuPTY&#xA;fZWeRmlSlARxYUIBG4xVLINM87pqt3odr5oP1O1trWeK6u7KK4vQs7zx8PVDxRtx9D7TxMT371VT&#xA;H8vtJgt9AttXkkku9X1u3t7zVdRuCGmmkeIMq/CFRI4+ZCRoqqo6CpJKrJ8VQWqaPY6okCXYl/0a&#xA;X14Hhmmt3WTg0dQ8Dxv9iRhStN8VQf8AhLSv9/6j/wBxPUf+yjFUHrHlnT4NJvZ4rnUVlit5Xjb9&#xA;J6gaMqEg7z+OKpPF5ctI4/K8i3uql9RlVLzlq2pMHU6fPOdmuCB+8jU/DT7sVZJ/hLSv9/6j/wBx&#xA;PUf+yjFVO58k6Hc28ttcSahLBOjRzRNqeoFWRxxZSPrHQg4qnuKuxVjtnatdyebbVWCtcXfpKx6A&#xA;vplqtT9+Kt6f/jK0sLa0/RunP9XiSLn+kJxy4KFrT6kaVpiqI+t+cv8Aq16d/wBxCf8A7IsVd9b8&#xA;5f8AVr07/uIT/wDZFirvrfnL/q16d/3EJ/8AsixV31vzl/1a9O/7iE//AGRYq7635y/6tenf9xCf&#xA;/sixVZaWmvz6/b6jqNvaWsFraXNuq29zJcOz3EkDgkPBbhQotz3PXFVC0s/NGm3GoLaWlldW91dy&#xA;XUckt3LA4EoHwsi2sw2p/NiqK+t+cv8Aq16d/wBxCf8A7IsVd9b85f8AVr07/uIT/wDZFirvrfnL&#xA;/q16d/3EJ/8AsixV31vzl/1a9O/7iE//AGRYq7635y/6tenf9xCf/sixVDX9v5r1KOC2uLKwtoFu&#xA;rS4lmjvJpnC21zHOQqG1iBLenT7QxVXu7TXYNdn1HToLW6jurW3t3S4uJLcobeSd6jhBccg31j2p&#xA;TvXFV31vzl/1a9O/7iE//ZFirvrfnL/q16d/3EJ/+yLFXfW/OX/Vr07/ALiE/wD2RYq7635y/wCr&#xA;Xp3/AHEJ/wDsixV31vzl/wBWvTv+4hP/ANkWKt6TZat+lr3U9Sit7d7i3traOC3mecUt3ncuzvFB&#xA;9r6xSnHt1xVBaNB5x0vR7HTRp+nTCxt4rYTG/nTn6KBOXH6m3GvGtKnFUZ9b85f9WvTv+4hP/wBk&#xA;WKu+t+cv+rXp3/cQn/7IsVd9b85f9WvTv+4hP/2RYqh9Q/xld2Fzafo3Tk+sRPFz/SE5481K1p9S&#xA;FaVxVq8tWtJPKVqzBmt7v0mYdCU0y6Wo+7FWRYq7FXYq7FUqufLGlXF3NdsbqKa5YPP9Xvbu3V2V&#xA;FjDFIZY0rwRRWnbFVP8AwlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8A&#xA;Uf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8A&#xA;uJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j&#xA;/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBlGKu/wlpX+/8AUf8AuJ6j/wBl&#xA;GKu/wlpX+/8AUf8AuJ6j/wBlGKpL5lstL0QafM76jJbXFw8V0Rqeoc1jS1mn5IDcqCQYenUjpU0x&#xA;VLtN1vyVqGtQ6NDJrCX00ssHB9SvaI8EXqv6hW7bj/KB1J9t8aVlf+EtK/3/AKj/ANxPUf8AsoxV&#xA;3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+Et&#xA;K/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/&#xA;AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/ANxPUf8AsoxV3+EtK/3/AKj/&#xA;ANxPUf8AsoxVUtvLGlW93DdqbqWa2YvB9Yvbu4VGZGjLBJpZErwdhWnfFU1xV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KrJfQovrcacl4c6fbr8NK969MVUIv0X9ab0fQ+tVbnw4epX9qt&#xA;Pi+eKorFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:CA9C53CE2A2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:CA9C53CE2A2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CA9C53CE2A2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T15:19:25+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -151.484 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 151.484 li
396.012 151.484 li
396.012 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 151.484 mo
396.012 151.484 li
396.012 0 li
0 0 li
0 151.484 li
cp
clp
15.9204 8.71191 mo
15.9204 7.44727 14.9844 6.47168 13.8989 6.47168 cv
13.0229 6.47168 12.5547 7.09912 12.5249 7.13867 cv
12.5249 6.47168 li
11.1411 6.58105 li
11.1411 6.87012 li
11.8379 6.87012 11.8979 6.93945 11.8979 7.37793 cv
11.8979 12.0576 li
11.8979 12.5059 11.7881 12.5059 11.1411 12.5059 cv
11.1411 12.7944 li
11.3999 12.7744 11.9375 12.7744 12.2163 12.7744 cv
12.5049 12.7744 13.043 12.7744 13.3018 12.7944 cv
13.3018 12.5059 li
12.6646 12.5059 12.5449 12.5059 12.5449 12.0576 cv
12.5449 10.3252 li
12.7241 10.5742 13.1323 10.9624 13.7695 10.9624 cv
14.9146 10.9624 15.9204 9.99658 15.9204 8.71191 cv
cp
15.1636 8.71191 mo
15.1636 9.89697 14.4863 10.7632 13.7197 10.7632 cv
13.4111 10.7632 13.1226 10.6338 12.9233 10.4443 cv
12.6943 10.2158 12.5449 10.0166 12.5449 9.73779 cv
12.5449 7.68652 li
12.5449 7.49707 12.5449 7.4873 12.6543 7.32813 cv
12.9531 6.87988 13.4409 6.69092 13.8193 6.69092 cv
14.5664 6.69092 15.1636 7.59668 15.1636 8.71191 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
19.7935 7.04932 mo
19.7935 6.75049 19.5249 6.47168 19.0967 6.47168 cv
18.25 6.47168 17.9614 7.3877 17.9019 7.57715 cv
17.8916 7.57715 li
17.8916 6.47168 li
16.5576 6.58105 li
16.5576 6.87012 li
17.2349 6.87012 17.3145 6.93945 17.3145 7.42773 cv
17.3145 10.126 li
17.3145 10.5742 17.2046 10.5742 16.5576 10.5742 cv
16.5576 10.8628 li
16.8364 10.8428 17.3838 10.8428 17.6826 10.8428 cv
17.9517 10.8428 18.6587 10.8428 18.8877 10.8628 cv
18.8877 10.5742 li
18.6885 10.5742 li
17.9614 10.5742 17.9414 10.4644 17.9414 10.106 cv
17.9414 8.54297 li
17.9414 7.57715 18.3398 6.6709 19.1064 6.6709 cv
19.186 6.6709 19.2061 6.6709 19.2461 6.68066 cv
19.1665 6.7207 19.0068 6.78027 19.0068 7.04932 cv
19.0068 7.33789 19.2358 7.44727 19.3955 7.44727 cv
19.5942 7.44727 19.7935 7.31836 19.7935 7.04932 cv
cp
f
24.6426 8.73193 mo
24.6426 7.44727 23.667 6.42188 22.5117 6.42188 cv
21.3169 6.42188 20.3711 7.47754 20.3711 8.73193 cv
20.3711 10.0063 21.3667 10.9624 22.502 10.9624 cv
23.6768 10.9624 24.6426 9.98633 24.6426 8.73193 cv
cp
23.8857 8.64258 mo
23.8857 8.99072 23.8857 9.6084 23.627 10.0762 cv
23.3481 10.5542 22.8901 10.7432 22.5117 10.7432 cv
22.1436 10.7432 21.6953 10.584 21.4067 10.0962 cv
21.1377 9.64795 21.1279 9.06055 21.1279 8.64258 cv
21.1279 8.26416 21.1279 7.65674 21.4365 7.2085 cv
21.7153 6.78027 22.1533 6.62109 22.502 6.62109 cv
22.8901 6.62109 23.3081 6.80029 23.5771 7.18848 cv
23.8857 7.64648 23.8857 8.27393 23.8857 8.64258 cv
cp
f
29.2627 9.67773 mo
29.2627 9.58838 29.1929 9.58838 29.1631 9.58838 cv
29.0732 9.58838 29.0635 9.61816 29.0337 9.73779 cv
28.8145 10.4443 28.2769 10.7432 27.7393 10.7432 cv
27.1318 10.7432 26.3252 10.2158 26.3252 8.70215 cv
26.3252 7.04932 27.1714 6.64111 27.6694 6.64111 cv
28.0479 6.64111 28.5952 6.79053 28.8242 7.17871 cv
28.7051 7.17871 28.3364 7.17871 28.3364 7.58691 cv
28.3364 7.82617 28.5059 7.99512 28.7446 7.99512 cv
28.9736 7.99512 29.1631 7.85596 29.1631 7.56689 cv
29.1631 6.8999 28.4658 6.42188 27.6597 6.42188 cv
26.4946 6.42188 25.5684 7.45752 25.5684 8.71191 cv
25.5684 9.98633 26.5244 10.9624 27.6494 10.9624 cv
28.9639 10.9624 29.2627 9.76758 29.2627 9.67773 cv
cp
f
33.6035 9.67773 mo
33.6035 9.61816 33.5537 9.57813 33.4941 9.57813 cv
33.4146 9.57813 33.3945 9.62793 33.3745 9.67773 cv
33.1157 10.5142 32.4487 10.7432 32.0308 10.7432 cv
31.6123 10.7432 30.6069 10.4644 30.6069 8.74219 cv
30.6069 8.55273 li
33.3647 8.55273 li
33.584 8.55273 33.6035 8.55273 33.6035 8.36328 cv
33.6035 7.35791 33.0659 6.42188 31.8613 6.42188 cv
30.7261 6.42188 29.8501 7.44727 29.8501 8.68213 cv
29.8501 9.99658 30.8657 10.9624 31.9707 10.9624 cv
33.1558 10.9624 33.6035 9.88672 33.6035 9.67773 cv
cp
32.9863 8.36328 mo
30.6167 8.36328 li
30.6963 6.80029 31.5728 6.62109 31.8516 6.62109 cv
32.9165 6.62109 32.9766 8.0249 32.9863 8.36328 cv
cp
f
37.3872 9.59814 mo
37.3872 9.06055 37.0586 8.74219 36.9692 8.65234 cv
36.6108 8.34375 36.3418 8.28418 35.6846 8.16455 cv
35.3862 8.10449 34.6592 7.96533 34.6592 7.36816 cv
34.6592 7.05908 34.8682 6.60107 35.7642 6.60107 cv
36.8496 6.60107 36.9092 7.52734 36.9292 7.83594 cv
36.9395 7.91553 37.0088 7.91553 37.0391 7.91553 cv
37.1484 7.91553 37.1484 7.86572 37.1484 7.68652 cv
37.1484 6.65088 li
37.1484 6.47168 37.1484 6.42188 37.0488 6.42188 cv
36.9692 6.42188 36.7798 6.64111 36.7104 6.73047 cv
36.4014 6.48145 36.0928 6.42188 35.7744 6.42188 cv
34.5693 6.42188 34.2109 7.0791 34.2109 7.62695 cv
34.2109 7.73633 34.2109 8.08496 34.5894 8.43311 cv
34.9082 8.71191 35.2466 8.78174 35.7046 8.87109 cv
36.2524 8.98096 36.3818 9.01074 36.6309 9.20996 cv
36.8101 9.35938 36.9395 9.57813 36.9395 9.85693 cv
36.9395 10.2852 36.6904 10.7632 35.814 10.7632 cv
35.1572 10.7632 34.6792 10.3848 34.46 9.38916 cv
34.4204 9.20996 34.4102 9.18994 34.4102 9.18994 cv
34.3901 9.15039 34.3506 9.15039 34.3208 9.15039 cv
34.2109 9.15039 34.2109 9.2002 34.2109 9.37891 cv
34.2109 10.7334 li
34.2109 10.9126 34.2109 10.9624 34.3105 10.9624 cv
34.3604 10.9624 34.3706 10.9521 34.5396 10.7432 cv
34.5894 10.6738 34.5894 10.6538 34.7388 10.4941 cv
35.1172 10.9624 35.6548 10.9624 35.8242 10.9624 cv
36.8696 10.9624 37.3872 10.3848 37.3872 9.59814 cv
cp
f
41.2305 9.59814 mo
41.2305 9.06055 40.9023 8.74219 40.8125 8.65234 cv
40.4541 8.34375 40.1851 8.28418 39.5283 8.16455 cv
39.2295 8.10449 38.5024 7.96533 38.5024 7.36816 cv
38.5024 7.05908 38.7114 6.60107 39.6079 6.60107 cv
40.6929 6.60107 40.7529 7.52734 40.7725 7.83594 cv
40.7827 7.91553 40.8525 7.91553 40.8823 7.91553 cv
40.9917 7.91553 40.9917 7.86572 40.9917 7.68652 cv
40.9917 6.65088 li
40.9917 6.47168 40.9917 6.42188 40.8921 6.42188 cv
40.8125 6.42188 40.6235 6.64111 40.5537 6.73047 cv
40.2451 6.48145 39.9365 6.42188 39.6177 6.42188 cv
38.4131 6.42188 38.0547 7.0791 38.0547 7.62695 cv
38.0547 7.73633 38.0547 8.08496 38.4326 8.43311 cv
38.7515 8.71191 39.0898 8.78174 39.5479 8.87109 cv
40.0957 8.98096 40.2251 9.01074 40.4741 9.20996 cv
40.6533 9.35938 40.7827 9.57813 40.7827 9.85693 cv
40.7827 10.2852 40.5337 10.7632 39.6577 10.7632 cv
39.0005 10.7632 38.5225 10.3848 38.3032 9.38916 cv
38.2637 9.20996 38.2534 9.18994 38.2534 9.18994 cv
38.2339 9.15039 38.1938 9.15039 38.1641 9.15039 cv
38.0547 9.15039 38.0547 9.2002 38.0547 9.37891 cv
38.0547 10.7334 li
38.0547 10.9126 38.0547 10.9624 38.1538 10.9624 cv
38.2036 10.9624 38.2139 10.9521 38.3828 10.7432 cv
38.4326 10.6738 38.4326 10.6538 38.582 10.4941 cv
38.9604 10.9624 39.498 10.9624 39.6675 10.9624 cv
40.7129 10.9624 41.2305 10.3848 41.2305 9.59814 cv
cp
f
46.1396 8.73193 mo
46.1396 7.44727 45.1636 6.42188 44.0088 6.42188 cv
42.814 6.42188 41.8682 7.47754 41.8682 8.73193 cv
41.8682 10.0063 42.8638 10.9624 43.9985 10.9624 cv
45.1738 10.9624 46.1396 9.98633 46.1396 8.73193 cv
cp
45.3828 8.64258 mo
45.3828 8.99072 45.3828 9.6084 45.124 10.0762 cv
44.8452 10.5542 44.3872 10.7432 44.0088 10.7432 cv
43.6401 10.7432 43.1924 10.584 42.9033 10.0962 cv
42.6348 9.64795 42.6245 9.06055 42.6245 8.64258 cv
42.6245 8.26416 42.6245 7.65674 42.9331 7.2085 cv
43.2119 6.78027 43.6504 6.62109 43.9985 6.62109 cv
44.3872 6.62109 44.8052 6.80029 45.0742 7.18848 cv
45.3828 7.64648 45.3828 8.27393 45.3828 8.64258 cv
cp
f
49.9629 7.04932 mo
49.9629 6.75049 49.6938 6.47168 49.2661 6.47168 cv
48.4194 6.47168 48.1309 7.3877 48.0713 7.57715 cv
48.061 7.57715 li
48.061 6.47168 li
46.7271 6.58105 li
46.7271 6.87012 li
47.4038 6.87012 47.4834 6.93945 47.4834 7.42773 cv
47.4834 10.126 li
47.4834 10.5742 47.374 10.5742 46.7271 10.5742 cv
46.7271 10.8628 li
47.0059 10.8428 47.5532 10.8428 47.8521 10.8428 cv
48.1211 10.8428 48.8276 10.8428 49.0566 10.8628 cv
49.0566 10.5742 li
48.8574 10.5742 li
48.1309 10.5742 48.1108 10.4644 48.1108 10.106 cv
48.1108 8.54297 li
48.1108 7.57715 48.5093 6.6709 49.2759 6.6709 cv
49.3555 6.6709 49.3755 6.6709 49.415 6.68066 cv
49.3354 6.7207 49.1763 6.78027 49.1763 7.04932 cv
49.1763 7.33789 49.4053 7.44727 49.5645 7.44727 cv
49.7637 7.44727 49.9629 7.31836 49.9629 7.04932 cv
cp
f
53.7466 9.59814 mo
53.7466 9.06055 53.418 8.74219 53.3281 8.65234 cv
52.9697 8.34375 52.7012 8.28418 52.0439 8.16455 cv
51.7451 8.10449 51.0181 7.96533 51.0181 7.36816 cv
51.0181 7.05908 51.2275 6.60107 52.1235 6.60107 cv
53.209 6.60107 53.2686 7.52734 53.2886 7.83594 cv
53.2983 7.91553 53.3682 7.91553 53.3979 7.91553 cv
53.5073 7.91553 53.5073 7.86572 53.5073 7.68652 cv
53.5073 6.65088 li
53.5073 6.47168 53.5073 6.42188 53.4077 6.42188 cv
53.3281 6.42188 53.1392 6.64111 53.0693 6.73047 cv
52.7607 6.48145 52.4521 6.42188 52.1333 6.42188 cv
50.9287 6.42188 50.5703 7.0791 50.5703 7.62695 cv
50.5703 7.73633 50.5703 8.08496 50.9487 8.43311 cv
51.2671 8.71191 51.606 8.78174 52.064 8.87109 cv
52.6113 8.98096 52.7407 9.01074 52.9897 9.20996 cv
53.1689 9.35938 53.2983 9.57813 53.2983 9.85693 cv
53.2983 10.2852 53.0493 10.7632 52.1733 10.7632 cv
51.5161 10.7632 51.0381 10.3848 50.8193 9.38916 cv
50.7793 9.20996 50.7695 9.18994 50.7695 9.18994 cv
50.7495 9.15039 50.7095 9.15039 50.6797 9.15039 cv
50.5703 9.15039 50.5703 9.2002 50.5703 9.37891 cv
50.5703 10.7334 li
50.5703 10.9126 50.5703 10.9624 50.6699 10.9624 cv
50.7197 10.9624 50.7295 10.9521 50.8989 10.7432 cv
50.9487 10.6738 50.9487 10.6538 51.0981 10.4941 cv
51.4766 10.9624 52.0142 10.9624 52.1831 10.9624 cv
53.2285 10.9624 53.7466 10.3848 53.7466 9.59814 cv
cp
f
gsave
0 0 mo
396.012 0 li
396.012 151.484 li
0 151.484 li
0 0 li
cp
clp
.90517 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
.452637 16.2935 mo
65.625 16.2935 li
65.625 114.052 li
.452637 114.052 li
.452637 16.2935 li
cp
.746 .676 .668 .898 cmyk
@
grestore
.90517 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
90.0645 16.2935 mo
155.237 16.2935 li
155.237 114.052 li
90.0645 114.052 li
90.0645 16.2935 li
cp
.746 .676 .668 .898 cmyk
@
112.443 10.8628 mo
112.443 10.5742 li
111.945 10.5742 111.696 10.5742 111.687 10.2754 cv
111.687 8.44336 li
111.687 7.51709 111.687 7.23828 111.458 6.91992 cv
111.168 6.53125 110.701 6.47168 110.362 6.47168 cv
109.536 6.47168 109.118 7.06934 108.958 7.45752 cv
108.819 6.69092 108.281 6.47168 107.654 6.47168 cv
106.688 6.47168 106.31 7.29834 106.23 7.49707 cv
106.22 7.49707 li
106.22 6.47168 li
104.866 6.58105 li
104.866 6.87012 li
105.543 6.87012 105.623 6.93945 105.623 7.42773 cv
105.623 10.126 li
105.623 10.5742 105.513 10.5742 104.866 10.5742 cv
104.866 10.8628 li
105.125 10.8428 105.663 10.8428 105.941 10.8428 cv
106.23 10.8428 106.768 10.8428 107.026 10.8628 cv
107.026 10.5742 li
106.389 10.5742 106.27 10.5742 106.27 10.126 cv
106.27 8.27393 li
106.27 7.22852 106.957 6.6709 107.574 6.6709 cv
108.191 6.6709 108.331 7.17871 108.331 7.78613 cv
108.331 10.126 li
108.331 10.5742 108.221 10.5742 107.574 10.5742 cv
107.574 10.8628 li
107.833 10.8428 108.371 10.8428 108.649 10.8428 cv
108.938 10.8428 109.476 10.8428 109.735 10.8628 cv
109.735 10.5742 li
109.098 10.5742 108.978 10.5742 108.978 10.126 cv
108.978 8.27393 li
108.978 7.22852 109.665 6.6709 110.283 6.6709 cv
110.9 6.6709 111.039 7.17871 111.039 7.78613 cv
111.039 10.126 li
111.039 10.5742 110.93 10.5742 110.283 10.5742 cv
110.283 10.8628 li
110.542 10.8428 111.079 10.8428 111.358 10.8428 cv
111.646 10.8428 112.184 10.8428 112.443 10.8628 cv
cp
0 0 0 1 cmyk
f
116.725 9.67773 mo
116.725 9.61816 116.675 9.57813 116.615 9.57813 cv
116.535 9.57813 116.516 9.62793 116.496 9.67773 cv
116.237 10.5142 115.57 10.7432 115.151 10.7432 cv
114.733 10.7432 113.728 10.4644 113.728 8.74219 cv
113.728 8.55273 li
116.486 8.55273 li
116.705 8.55273 116.725 8.55273 116.725 8.36328 cv
116.725 7.35791 116.187 6.42188 114.982 6.42188 cv
113.847 6.42188 112.971 7.44727 112.971 8.68213 cv
112.971 9.99658 113.986 10.9624 115.092 10.9624 cv
116.276 10.9624 116.725 9.88672 116.725 9.67773 cv
cp
116.107 8.36328 mo
113.737 8.36328 li
113.817 6.80029 114.693 6.62109 114.972 6.62109 cv
116.038 6.62109 116.097 8.0249 116.107 8.36328 cv
cp
f
124.899 10.8628 mo
124.899 10.5742 li
124.401 10.5742 124.152 10.5742 124.143 10.2754 cv
124.143 8.44336 li
124.143 7.51709 124.143 7.23828 123.914 6.91992 cv
123.625 6.53125 123.157 6.47168 122.818 6.47168 cv
121.992 6.47168 121.574 7.06934 121.414 7.45752 cv
121.275 6.69092 120.737 6.47168 120.11 6.47168 cv
119.144 6.47168 118.766 7.29834 118.686 7.49707 cv
118.676 7.49707 li
118.676 6.47168 li
117.322 6.58105 li
117.322 6.87012 li
117.999 6.87012 118.079 6.93945 118.079 7.42773 cv
118.079 10.126 li
118.079 10.5742 117.969 10.5742 117.322 10.5742 cv
117.322 10.8628 li
117.581 10.8428 118.119 10.8428 118.397 10.8428 cv
118.686 10.8428 119.224 10.8428 119.482 10.8628 cv
119.482 10.5742 li
118.845 10.5742 118.726 10.5742 118.726 10.126 cv
118.726 8.27393 li
118.726 7.22852 119.413 6.6709 120.03 6.6709 cv
120.647 6.6709 120.787 7.17871 120.787 7.78613 cv
120.787 10.126 li
120.787 10.5742 120.677 10.5742 120.03 10.5742 cv
120.03 10.8628 li
120.289 10.8428 120.827 10.8428 121.105 10.8428 cv
121.395 10.8428 121.932 10.8428 122.191 10.8628 cv
122.191 10.5742 li
121.554 10.5742 121.434 10.5742 121.434 10.126 cv
121.434 8.27393 li
121.434 7.22852 122.121 6.6709 122.739 6.6709 cv
123.356 6.6709 123.495 7.17871 123.495 7.78613 cv
123.495 10.126 li
123.495 10.5742 123.386 10.5742 122.739 10.5742 cv
122.739 10.8628 li
122.998 10.8428 123.535 10.8428 123.814 10.8428 cv
124.103 10.8428 124.64 10.8428 124.899 10.8628 cv
cp
f
129.698 8.73193 mo
129.698 7.44727 128.723 6.42188 127.567 6.42188 cv
126.373 6.42188 125.427 7.47754 125.427 8.73193 cv
125.427 10.0063 126.422 10.9624 127.558 10.9624 cv
128.732 10.9624 129.698 9.98633 129.698 8.73193 cv
cp
128.942 8.64258 mo
128.942 8.99072 128.942 9.6084 128.683 10.0762 cv
128.404 10.5542 127.946 10.7432 127.567 10.7432 cv
127.199 10.7432 126.751 10.584 126.462 10.0962 cv
126.193 9.64795 126.184 9.06055 126.184 8.64258 cv
126.184 8.26416 126.184 7.65674 126.492 7.2085 cv
126.771 6.78027 127.209 6.62109 127.558 6.62109 cv
127.946 6.62109 128.364 6.80029 128.633 7.18848 cv
128.942 7.64648 128.942 8.27393 128.942 8.64258 cv
cp
f
133.522 7.04932 mo
133.522 6.75049 133.253 6.47168 132.825 6.47168 cv
131.979 6.47168 131.69 7.3877 131.63 7.57715 cv
131.62 7.57715 li
131.62 6.47168 li
130.286 6.58105 li
130.286 6.87012 li
130.963 6.87012 131.042 6.93945 131.042 7.42773 cv
131.042 10.126 li
131.042 10.5742 130.933 10.5742 130.286 10.5742 cv
130.286 10.8628 li
130.564 10.8428 131.112 10.8428 131.411 10.8428 cv
131.68 10.8428 132.387 10.8428 132.616 10.8628 cv
132.616 10.5742 li
132.417 10.5742 li
131.69 10.5742 131.67 10.4644 131.67 10.106 cv
131.67 8.54297 li
131.67 7.57715 132.068 6.6709 132.835 6.6709 cv
132.915 6.6709 132.935 6.6709 132.974 6.68066 cv
132.895 6.7207 132.735 6.78027 132.735 7.04932 cv
132.735 7.33789 132.964 7.44727 133.124 7.44727 cv
133.323 7.44727 133.522 7.31836 133.522 7.04932 cv
cp
f
138.759 6.86035 mo
138.759 6.57129 li
138.47 6.59131 138.331 6.59131 138.012 6.59131 cv
137.206 6.57129 li
137.206 6.86035 li
137.574 6.87988 137.664 7.10889 137.664 7.28809 cv
137.664 7.37793 137.644 7.42773 137.604 7.52734 cv
136.588 10.0361 li
135.483 7.32813 li
135.424 7.18848 135.424 7.11914 135.424 7.11914 cv
135.424 6.86035 135.772 6.86035 135.971 6.86035 cv
135.971 6.57129 li
135.712 6.59131 135.225 6.59131 134.946 6.59131 cv
133.98 6.57129 li
133.98 6.86035 li
134.557 6.86035 134.637 6.90967 134.767 7.21875 cv
136.25 10.8628 li
135.812 11.918 135.812 11.938 135.772 12.0176 cv
135.603 12.3164 135.334 12.6948 134.886 12.6948 cv
134.577 12.6948 134.388 12.5156 134.388 12.5156 cv
134.388 12.5156 134.736 12.4756 134.736 12.1274 cv
134.736 11.8882 134.547 11.7588 134.368 11.7588 cv
134.199 11.7588 133.99 11.8584 133.99 12.1475 cv
133.99 12.5254 134.358 12.894 134.886 12.894 cv
135.443 12.894 135.852 12.4063 136.111 11.7788 cv
137.833 7.53711 li
138.102 6.87012 138.57 6.86035 138.759 6.86035 cv
cp
f
179.676 48.8794 mo
244.849 48.8794 li
244.849 114.052 li
179.676 114.052 li
179.676 48.8794 li
cp
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
396.012 0 li
396.012 151.484 li
0 151.484 li
0 0 li
cp
clp
330.388 48.8794 mo
395.56 48.8794 li
395.56 114.052 li
330.388 114.052 li
330.388 48.8794 li
cp
@
grestore
28.9658 114.052 mo
28.9658 138.492 li
367.047 138.492 li
367.047 114.052 li
358.9 114.052 li
358.9 130.345 li
297.801 130.345 li
297.801 114.052 li
289.654 114.052 li
289.654 130.345 li
216.336 130.345 li
216.336 114.052 li
208.189 114.052 li
208.189 130.345 li
126.724 130.345 li
126.724 114.052 li
@
94.1377 20.3667 mo
102.284 20.3667 li
102.284 24.4399 li
94.1377 24.4399 li
94.1377 20.3667 li
cp
@
94.1377 28.5132 mo
102.284 28.5132 li
102.284 32.5864 li
94.1377 32.5864 li
94.1377 28.5132 li
cp
@
94.1377 36.6597 mo
102.284 36.6597 li
102.284 40.7329 li
94.1377 40.7329 li
94.1377 36.6597 li
cp
@
94.1377 44.8062 mo
102.284 44.8062 li
102.284 48.8794 li
94.1377 48.8794 li
94.1377 44.8062 li
cp
@
94.1377 52.9526 mo
102.284 52.9526 li
102.284 57.0259 li
94.1377 57.0259 li
94.1377 52.9526 li
cp
@
94.1377 61.0991 mo
102.284 61.0991 li
102.284 65.1724 li
94.1377 65.1724 li
94.1377 61.0991 li
cp
@
94.1377 69.2456 mo
102.284 69.2456 li
102.284 73.3188 li
94.1377 73.3188 li
94.1377 69.2456 li
cp
@
94.1377 77.3921 mo
102.284 77.3921 li
102.284 81.4658 li
94.1377 81.4658 li
94.1377 77.3921 li
cp
@
94.1377 85.5391 mo
102.284 85.5391 li
102.284 89.6123 li
94.1377 89.6123 li
94.1377 85.5391 li
cp
@
94.1377 93.6855 mo
102.284 93.6855 li
102.284 97.7588 li
94.1377 97.7588 li
94.1377 93.6855 li
cp
@
106.357 20.3667 mo
114.504 20.3667 li
114.504 24.4399 li
106.357 24.4399 li
106.357 20.3667 li
cp
@
106.357 28.5132 mo
114.504 28.5132 li
114.504 32.5864 li
106.357 32.5864 li
106.357 28.5132 li
cp
@
106.357 36.6597 mo
114.504 36.6597 li
114.504 40.7329 li
106.357 40.7329 li
106.357 36.6597 li
cp
@
106.357 44.8062 mo
114.504 44.8062 li
114.504 48.8794 li
106.357 48.8794 li
106.357 44.8062 li
cp
@
106.357 52.9526 mo
114.504 52.9526 li
114.504 57.0259 li
106.357 57.0259 li
106.357 52.9526 li
cp
@
106.357 61.0991 mo
114.504 61.0991 li
114.504 65.1724 li
106.357 65.1724 li
106.357 61.0991 li
cp
@
106.357 69.2456 mo
114.504 69.2456 li
114.504 73.3188 li
106.357 73.3188 li
106.357 69.2456 li
cp
@
106.357 77.3921 mo
114.504 77.3921 li
114.504 81.4658 li
106.357 81.4658 li
106.357 77.3921 li
cp
@
106.357 85.5391 mo
114.504 85.5391 li
114.504 89.6123 li
106.357 89.6123 li
106.357 85.5391 li
cp
@
106.357 93.6855 mo
114.504 93.6855 li
114.504 97.7588 li
106.357 97.7588 li
106.357 93.6855 li
cp
@
118.578 20.3667 mo
126.724 20.3667 li
126.724 24.4399 li
118.578 24.4399 li
118.578 20.3667 li
cp
@
118.578 28.5132 mo
126.724 28.5132 li
126.724 32.5864 li
118.578 32.5864 li
118.578 28.5132 li
cp
@
118.578 36.6597 mo
126.724 36.6597 li
126.724 40.7329 li
118.578 40.7329 li
118.578 36.6597 li
cp
@
118.578 44.8062 mo
126.724 44.8062 li
126.724 48.8794 li
118.578 48.8794 li
118.578 44.8062 li
cp
@
118.578 52.9526 mo
126.724 52.9526 li
126.724 57.0259 li
118.578 57.0259 li
118.578 52.9526 li
cp
@
118.578 61.0991 mo
126.724 61.0991 li
126.724 65.1724 li
118.578 65.1724 li
118.578 61.0991 li
cp
@
118.578 69.2456 mo
126.724 69.2456 li
126.724 73.3188 li
118.578 73.3188 li
118.578 69.2456 li
cp
@
118.578 77.3921 mo
126.724 77.3921 li
126.724 81.4658 li
118.578 81.4658 li
118.578 77.3921 li
cp
@
118.578 85.5391 mo
126.724 85.5391 li
126.724 89.6123 li
118.578 89.6123 li
118.578 85.5391 li
cp
@
118.578 93.6855 mo
126.724 93.6855 li
126.724 97.7588 li
118.578 97.7588 li
118.578 93.6855 li
cp
@
130.797 20.3667 mo
138.944 20.3667 li
138.944 24.4399 li
130.797 24.4399 li
130.797 20.3667 li
cp
@
130.797 28.5132 mo
138.944 28.5132 li
138.944 32.5864 li
130.797 32.5864 li
130.797 28.5132 li
cp
@
130.797 36.6597 mo
138.944 36.6597 li
138.944 40.7329 li
130.797 40.7329 li
130.797 36.6597 li
cp
@
130.797 44.8062 mo
138.944 44.8062 li
138.944 48.8794 li
130.797 48.8794 li
130.797 44.8062 li
cp
@
130.797 52.9526 mo
138.944 52.9526 li
138.944 57.0259 li
130.797 57.0259 li
130.797 52.9526 li
cp
@
130.797 61.0991 mo
138.944 61.0991 li
138.944 65.1724 li
130.797 65.1724 li
130.797 61.0991 li
cp
@
130.797 69.2456 mo
138.944 69.2456 li
138.944 73.3188 li
130.797 73.3188 li
130.797 69.2456 li
cp
@
130.797 77.3921 mo
138.944 77.3921 li
138.944 81.4658 li
130.797 81.4658 li
130.797 77.3921 li
cp
@
130.797 85.5391 mo
138.944 85.5391 li
138.944 89.6123 li
130.797 89.6123 li
130.797 85.5391 li
cp
@
130.797 93.6855 mo
138.944 93.6855 li
138.944 97.7588 li
130.797 97.7588 li
130.797 93.6855 li
cp
@
143.017 20.3667 mo
151.164 20.3667 li
151.164 24.4399 li
143.017 24.4399 li
143.017 20.3667 li
cp
@
143.017 28.5132 mo
151.164 28.5132 li
151.164 32.5864 li
143.017 32.5864 li
143.017 28.5132 li
cp
@
143.017 36.6597 mo
151.164 36.6597 li
151.164 40.7329 li
143.017 40.7329 li
143.017 36.6597 li
cp
@
143.017 44.8062 mo
151.164 44.8062 li
151.164 48.8794 li
143.017 48.8794 li
143.017 44.8062 li
cp
@
143.017 52.9526 mo
151.164 52.9526 li
151.164 57.0259 li
143.017 57.0259 li
143.017 52.9526 li
cp
@
143.017 61.0991 mo
151.164 61.0991 li
151.164 65.1724 li
143.017 65.1724 li
143.017 61.0991 li
cp
@
143.017 69.2456 mo
151.164 69.2456 li
151.164 73.3188 li
143.017 73.3188 li
143.017 69.2456 li
cp
@
143.017 77.3921 mo
151.164 77.3921 li
151.164 81.4658 li
143.017 81.4658 li
143.017 77.3921 li
cp
@
143.017 85.5391 mo
151.164 85.5391 li
151.164 89.6123 li
143.017 89.6123 li
143.017 85.5391 li
cp
@
143.017 93.6855 mo
151.164 93.6855 li
151.164 97.7588 li
143.017 97.7588 li
143.017 93.6855 li
cp
@
10.6357 93.6855 mo
18.7827 93.6855 li
18.7827 97.7588 li
10.6357 97.7588 li
10.6357 93.6855 li
cp
@
10.6357 101.832 mo
18.7827 101.832 li
18.7827 105.905 li
10.6357 105.905 li
10.6357 101.832 li
cp
@
22.856 93.6855 mo
31.0024 93.6855 li
31.0024 97.7588 li
22.856 97.7588 li
22.856 93.6855 li
cp
@
22.856 101.832 mo
31.0024 101.832 li
31.0024 105.905 li
22.856 105.905 li
22.856 101.832 li
cp
@
35.0757 93.6855 mo
43.2222 93.6855 li
43.2222 97.7588 li
35.0757 97.7588 li
35.0757 93.6855 li
cp
@
35.0757 101.832 mo
43.2222 101.832 li
43.2222 105.905 li
35.0757 105.905 li
35.0757 101.832 li
cp
@
47.2954 93.6855 mo
55.4419 93.6855 li
55.4419 97.7588 li
47.2954 97.7588 li
47.2954 93.6855 li
cp
@
47.2954 101.832 mo
55.4419 101.832 li
55.4419 105.905 li
47.2954 105.905 li
47.2954 101.832 li
cp
@
196.656 43.1533 mo
196.656 42.8647 li
196.457 42.8647 li
195.74 42.8647 195.71 42.7651 195.71 42.397 cv
195.71 37.1099 li
195.71 36.7412 195.74 36.6416 196.457 36.6416 cv
196.656 36.6416 li
196.656 36.353 li
196.417 36.373 195.601 36.373 195.312 36.373 cv
195.013 36.373 194.197 36.373 193.958 36.353 cv
193.958 36.6416 li
194.157 36.6416 li
194.874 36.6416 194.904 36.7412 194.904 37.1099 cv
194.904 39.4697 li
191.927 39.4697 li
191.927 37.1099 li
191.927 36.7412 191.957 36.6416 192.673 36.6416 cv
192.873 36.6416 li
192.873 36.353 li
192.633 36.373 191.817 36.373 191.528 36.373 cv
191.229 36.373 190.413 36.373 190.174 36.353 cv
190.174 36.6416 li
190.373 36.6416 li
191.09 36.6416 191.12 36.7412 191.12 37.1099 cv
191.12 42.397 li
191.12 42.7651 191.09 42.8647 190.373 42.8647 cv
190.174 42.8647 li
190.174 43.1533 li
190.413 43.1338 191.229 43.1338 191.519 43.1338 cv
191.817 43.1338 192.633 43.1338 192.873 43.1533 cv
192.873 42.8647 li
192.673 42.8647 li
191.957 42.8647 191.927 42.7651 191.927 42.397 cv
191.927 39.7583 li
194.904 39.7583 li
194.904 42.397 li
194.904 42.7651 194.874 42.8647 194.157 42.8647 cv
193.958 42.8647 li
193.958 43.1533 li
194.197 43.1338 195.013 43.1338 195.302 43.1338 cv
195.601 43.1338 196.417 43.1338 196.656 43.1533 cv
cp
0 0 0 1 cmyk
f
203.975 39.8179 mo
203.975 37.8965 202.63 36.353 200.978 36.353 cv
197.492 36.353 li
197.492 36.6416 li
197.691 36.6416 li
198.409 36.6416 198.438 36.7412 198.438 37.1099 cv
198.438 42.397 li
198.438 42.7651 198.409 42.8647 197.691 42.8647 cv
197.492 42.8647 li
197.492 43.1533 li
200.978 43.1533 li
202.64 43.1533 203.975 41.6602 203.975 39.8179 cv
cp
203.068 39.8081 mo
203.068 40.3657 203.059 41.3018 202.491 42.0386 cv
202.162 42.4565 201.565 42.8647 200.729 42.8647 cv
199.683 42.8647 li
199.245 42.8647 199.225 42.7949 199.225 42.4668 cv
199.225 37.04 li
199.225 36.7114 199.245 36.6416 199.683 36.6416 cv
200.729 36.6416 li
201.555 36.6416 202.212 37.04 202.62 37.6973 cv
203.068 38.4043 203.068 39.4097 203.068 39.8081 cv
cp
f
212.1 35.875 mo
212.1 35.7456 212 35.686 211.92 35.686 cv
211.79 35.686 211.761 35.7754 211.711 35.9048 cv
208.355 45.2842 li
208.306 45.4141 208.306 45.4536 208.306 45.4536 cv
208.306 45.563 208.386 45.6426 208.495 45.6426 cv
208.624 45.6426 208.654 45.543 208.694 45.4336 cv
212.05 36.0444 li
212.1 35.915 212.1 35.875 212.1 35.875 cv
cp
f
220.762 41.3213 mo
220.762 40.7144 220.532 40.2661 220.264 39.9375 cv
219.896 39.4893 219.447 39.3799 219.059 39.2803 cv
217.964 39.0015 li
217.456 38.8721 217.008 38.374 217.008 37.7373 cv
217.008 37.04 217.565 36.4126 218.342 36.4126 cv
219.975 36.4126 220.194 38.0259 220.254 38.4541 cv
220.273 38.5732 220.273 38.6133 220.373 38.6133 cv
220.482 38.6133 220.482 38.5635 220.482 38.3843 cv
220.482 36.373 li
220.482 36.1938 220.482 36.144 220.384 36.144 cv
220.354 36.144 220.313 36.144 220.244 36.2734 cv
219.915 36.8809 li
219.438 36.2637 218.78 36.144 218.342 36.144 cv
217.237 36.144 216.431 37.0303 216.431 38.0459 cv
216.431 38.5234 216.6 38.9619 216.968 39.3599 cv
217.316 39.7485 217.665 39.8379 218.372 40.0171 cv
218.721 40.0967 219.269 40.2363 219.407 40.2959 cv
219.876 40.5249 220.185 41.0625 220.185 41.6201 cv
220.185 42.3672 219.656 43.0737 218.83 43.0737 cv
218.382 43.0737 217.765 42.9644 217.276 42.5361 cv
216.699 42.0186 216.659 41.3018 216.649 40.9731 cv
216.64 40.8936 216.54 40.8936 216.54 40.8936 cv
216.431 40.8936 216.431 40.9434 216.431 41.1226 cv
216.431 43.1338 li
216.431 43.313 216.431 43.3628 216.53 43.3628 cv
216.59 43.3628 216.6 43.3428 216.669 43.2231 cv
216.998 42.626 li
217.356 43.0244 217.983 43.3628 218.84 43.3628 cv
219.955 43.3628 220.762 42.417 220.762 41.3213 cv
cp
f
226.179 41.3213 mo
226.179 40.7144 225.949 40.2661 225.681 39.9375 cv
225.312 39.4893 224.864 39.3799 224.476 39.2803 cv
223.38 39.0015 li
222.872 38.8721 222.425 38.374 222.425 37.7373 cv
222.425 37.04 222.982 36.4126 223.759 36.4126 cv
225.392 36.4126 225.61 38.0259 225.671 38.4541 cv
225.69 38.5732 225.69 38.6133 225.79 38.6133 cv
225.899 38.6133 225.899 38.5635 225.899 38.3843 cv
225.899 36.373 li
225.899 36.1938 225.899 36.144 225.8 36.144 cv
225.77 36.144 225.73 36.144 225.66 36.2734 cv
225.332 36.8809 li
224.854 36.2637 224.196 36.144 223.759 36.144 cv
222.653 36.144 221.847 37.0303 221.847 38.0459 cv
221.847 38.5234 222.017 38.9619 222.385 39.3599 cv
222.733 39.7485 223.082 39.8379 223.788 40.0171 cv
224.137 40.0967 224.685 40.2363 224.824 40.2959 cv
225.292 40.5249 225.601 41.0625 225.601 41.6201 cv
225.601 42.3672 225.073 43.0737 224.247 43.0737 cv
223.799 43.0737 223.182 42.9644 222.693 42.5361 cv
222.116 42.0186 222.076 41.3018 222.066 40.9731 cv
222.056 40.8936 221.956 40.8936 221.956 40.8936 cv
221.847 40.8936 221.847 40.9434 221.847 41.1226 cv
221.847 43.1338 li
221.847 43.313 221.847 43.3628 221.946 43.3628 cv
222.006 43.3628 222.017 43.3428 222.086 43.2231 cv
222.414 42.626 li
222.772 43.0244 223.4 43.3628 224.257 43.3628 cv
225.372 43.3628 226.179 42.417 226.179 41.3213 cv
cp
f
233.626 39.8179 mo
233.626 37.8965 232.282 36.353 230.629 36.353 cv
227.144 36.353 li
227.144 36.6416 li
227.343 36.6416 li
228.06 36.6416 228.09 36.7412 228.09 37.1099 cv
228.09 42.397 li
228.09 42.7651 228.06 42.8647 227.343 42.8647 cv
227.144 42.8647 li
227.144 43.1533 li
230.629 43.1533 li
232.292 43.1533 233.626 41.6602 233.626 39.8179 cv
cp
232.72 39.8081 mo
232.72 40.3657 232.71 41.3018 232.143 42.0386 cv
231.813 42.4565 231.217 42.8647 230.38 42.8647 cv
229.335 42.8647 li
228.896 42.8647 228.877 42.7949 228.877 42.4668 cv
228.877 37.04 li
228.877 36.7114 228.896 36.6416 229.335 36.6416 cv
230.38 36.6416 li
231.206 36.6416 231.863 37.04 232.271 37.6973 cv
232.72 38.4043 232.72 39.4097 232.72 39.8081 cv
cp
f
353.547 41.3018 mo
353.547 40.0371 352.61 39.0615 351.525 39.0615 cv
350.649 39.0615 350.181 39.6885 350.151 39.7285 cv
350.151 39.0615 li
348.768 39.1709 li
348.768 39.4595 li
349.464 39.4595 349.524 39.5293 349.524 39.9673 cv
349.524 44.647 li
349.524 45.0952 349.414 45.0952 348.768 45.0952 cv
348.768 45.3838 li
349.026 45.3643 349.563 45.3643 349.843 45.3643 cv
350.131 45.3643 350.669 45.3643 350.928 45.3838 cv
350.928 45.0952 li
350.291 45.0952 350.171 45.0952 350.171 44.647 cv
350.171 42.9146 li
350.351 43.1636 350.759 43.5518 351.396 43.5518 cv
352.541 43.5518 353.547 42.5859 353.547 41.3018 cv
cp
352.79 41.3018 mo
352.79 42.4863 352.112 43.3525 351.346 43.3525 cv
351.037 43.3525 350.749 43.2231 350.55 43.0342 cv
350.32 42.8052 350.171 42.606 350.171 42.3271 cv
350.171 40.2759 li
350.171 40.0869 350.171 40.0771 350.28 39.9175 cv
350.579 39.4697 351.067 39.2803 351.445 39.2803 cv
352.192 39.2803 352.79 40.1865 352.79 41.3018 cv
cp
f
357.42 39.6387 mo
357.42 39.3398 357.151 39.0615 356.723 39.0615 cv
355.876 39.0615 355.588 39.9775 355.528 40.1665 cv
355.518 40.1665 li
355.518 39.0615 li
354.184 39.1709 li
354.184 39.4595 li
354.86 39.4595 354.94 39.5293 354.94 40.0171 cv
354.94 42.7153 li
354.94 43.1636 354.831 43.1636 354.184 43.1636 cv
354.184 43.4521 li
354.463 43.4326 355.01 43.4326 355.309 43.4326 cv
355.578 43.4326 356.284 43.4326 356.514 43.4521 cv
356.514 43.1636 li
356.314 43.1636 li
355.588 43.1636 355.567 43.0542 355.567 42.6953 cv
355.567 41.1323 li
355.567 40.1665 355.966 39.2603 356.732 39.2603 cv
356.813 39.2603 356.832 39.2603 356.872 39.2705 cv
356.792 39.3101 356.633 39.3701 356.633 39.6387 cv
356.633 39.9277 356.862 40.0371 357.021 40.0371 cv
357.221 40.0371 357.42 39.9077 357.42 39.6387 cv
cp
f
360.098 43.4521 mo
360.098 43.1636 li
359.451 43.1636 359.411 43.1138 359.411 42.7256 cv
359.411 39.0615 li
358.057 39.1709 li
358.057 39.4595 li
358.694 39.4595 358.784 39.5195 358.784 40.0073 cv
358.784 42.7153 li
358.784 43.1636 358.674 43.1636 358.027 43.1636 cv
358.027 43.4521 li
358.306 43.4326 358.784 43.4326 359.072 43.4326 cv
359.182 43.4326 359.76 43.4326 360.098 43.4521 cv
cp
359.54 37.4385 mo
359.54 37.1396 359.302 36.9502 359.063 36.9502 cv
358.784 36.9502 358.575 37.1694 358.575 37.4385 cv
358.575 37.6973 358.794 37.916 359.053 37.916 cv
359.352 37.916 359.54 37.6772 359.54 37.4385 cv
cp
f
365.595 43.4521 mo
365.595 43.1636 li
365.097 43.1636 364.848 43.1636 364.838 42.8647 cv
364.838 41.0327 li
364.838 40.1069 364.838 39.8281 364.608 39.5093 cv
364.319 39.1211 363.852 39.0615 363.514 39.0615 cv
362.548 39.0615 362.169 39.8877 362.09 40.0869 cv
362.079 40.0869 li
362.079 39.0615 li
360.726 39.1709 li
360.726 39.4595 li
361.402 39.4595 361.482 39.5293 361.482 40.0171 cv
361.482 42.7153 li
361.482 43.1636 361.373 43.1636 360.726 43.1636 cv
360.726 43.4521 li
360.984 43.4326 361.522 43.4326 361.801 43.4326 cv
362.09 43.4326 362.627 43.4326 362.886 43.4521 cv
362.886 43.1636 li
362.249 43.1636 362.129 43.1636 362.129 42.7153 cv
362.129 40.8633 li
362.129 39.8179 362.816 39.2603 363.434 39.2603 cv
364.051 39.2603 364.19 39.7681 364.19 40.3755 cv
364.19 42.7153 li
364.19 43.1636 364.081 43.1636 363.434 43.1636 cv
363.434 43.4521 li
363.692 43.4326 364.23 43.4326 364.509 43.4326 cv
364.798 43.4326 365.335 43.4326 365.595 43.4521 cv
cp
f
368.811 42.2178 mo
368.811 41.6499 li
368.591 41.6499 li
368.591 42.1978 li
368.591 42.9146 368.303 43.333 367.914 43.333 cv
367.237 43.333 367.237 42.4067 367.237 42.2373 cv
367.237 39.4497 li
368.642 39.4497 li
368.642 39.1611 li
367.237 39.1611 li
367.237 37.3291 li
367.028 37.3291 li
367.019 38.2646 366.657 39.2207 365.743 39.2505 cv
365.743 39.4497 li
366.59 39.4497 li
366.59 42.2178 li
366.59 43.3228 367.327 43.5518 367.854 43.5518 cv
368.481 43.5518 368.811 42.9346 368.811 42.2178 cv
cp
f
373.41 42.2676 mo
373.41 42.2075 373.36 42.168 373.301 42.168 cv
373.222 42.168 373.201 42.2178 373.182 42.2676 cv
372.923 43.104 372.256 43.333 371.837 43.333 cv
371.419 43.333 370.413 43.0542 370.413 41.3315 cv
370.413 41.1426 li
373.172 41.1426 li
373.391 41.1426 373.41 41.1426 373.41 40.9531 cv
373.41 39.9473 372.873 39.0117 371.668 39.0117 cv
370.533 39.0117 369.657 40.0371 369.657 41.2715 cv
369.657 42.5859 370.672 43.5518 371.777 43.5518 cv
372.962 43.5518 373.41 42.4766 373.41 42.2676 cv
cp
372.793 40.9531 mo
370.424 40.9531 li
370.503 39.3896 371.379 39.2109 371.658 39.2109 cv
372.724 39.2109 372.783 40.6147 372.793 40.9531 cv
cp
f
377.204 39.6387 mo
377.204 39.3398 376.936 39.0615 376.507 39.0615 cv
375.661 39.0615 375.372 39.9775 375.313 40.1665 cv
375.302 40.1665 li
375.302 39.0615 li
373.968 39.1709 li
373.968 39.4595 li
374.646 39.4595 374.725 39.5293 374.725 40.0171 cv
374.725 42.7153 li
374.725 43.1636 374.615 43.1636 373.968 43.1636 cv
373.968 43.4521 li
374.247 43.4326 374.794 43.4326 375.093 43.4326 cv
375.362 43.4326 376.069 43.4326 376.298 43.4521 cv
376.298 43.1636 li
376.099 43.1636 li
375.372 43.1636 375.353 43.0542 375.353 42.6953 cv
375.353 41.1323 li
375.353 40.1665 375.75 39.2603 376.517 39.2603 cv
376.597 39.2603 376.616 39.2603 376.656 39.2705 cv
376.577 39.3101 376.417 39.3701 376.417 39.6387 cv
376.417 39.9277 376.646 40.0371 376.806 40.0371 cv
377.005 40.0371 377.204 39.9077 377.204 39.6387 cv
cp
f
4.52588 20.3667 mo
61.5518 20.3667 li
61.5518 61.0991 li
4.52588 61.0991 li
4.52588 20.3667 li
cp
.746 .676 .668 .898 cmyk
@
4.52588 69.2456 mo
61.5518 69.2456 li
61.5518 109.979 li
4.52588 109.979 li
4.52588 69.2456 li
cp
@
10.6357 44.8062 mo
18.7827 44.8062 li
18.7827 48.8794 li
10.6357 48.8794 li
10.6357 44.8062 li
cp
@
10.6357 52.9526 mo
18.7827 52.9526 li
18.7827 57.0259 li
10.6357 57.0259 li
10.6357 52.9526 li
cp
@
22.856 44.8062 mo
31.0024 44.8062 li
31.0024 48.8794 li
22.856 48.8794 li
22.856 44.8062 li
cp
@
22.856 52.9526 mo
31.0024 52.9526 li
31.0024 57.0259 li
22.856 57.0259 li
22.856 52.9526 li
cp
@
35.0757 44.8062 mo
43.2222 44.8062 li
43.2222 48.8794 li
35.0757 48.8794 li
35.0757 44.8062 li
cp
@
35.0757 52.9526 mo
43.2222 52.9526 li
43.2222 57.0259 li
35.0757 57.0259 li
35.0757 52.9526 li
cp
@
47.2954 44.8062 mo
55.4419 44.8062 li
55.4419 48.8794 li
47.2954 48.8794 li
47.2954 44.8062 li
cp
@
47.2954 52.9526 mo
55.4419 52.9526 li
55.4419 57.0259 li
47.2954 57.0259 li
47.2954 52.9526 li
cp
@
23.5039 34.1172 mo
23.5039 34.0278 23.4341 34.0278 23.4043 34.0278 cv
23.3145 34.0278 23.3047 34.0576 23.2749 34.1772 cv
23.0557 34.8843 22.5181 35.1826 21.9805 35.1826 cv
21.373 35.1826 20.5664 34.6553 20.5664 33.1416 cv
20.5664 31.4888 21.4131 31.0806 21.9106 31.0806 cv
22.2891 31.0806 22.8369 31.23 23.0659 31.6182 cv
22.9463 31.6182 22.5776 31.6182 22.5776 32.0264 cv
22.5776 32.2656 22.7471 32.4346 22.9863 32.4346 cv
23.2153 32.4346 23.4043 32.2954 23.4043 32.0068 cv
23.4043 31.3394 22.7075 30.8613 21.9009 30.8613 cv
20.7358 30.8613 19.8101 31.897 19.8101 33.1514 cv
19.8101 34.4263 20.7656 35.4019 21.8906 35.4019 cv
23.2051 35.4019 23.5039 34.207 23.5039 34.1172 cv
cp
0 0 0 1 cmyk
f
28.3628 33.1714 mo
28.3628 31.8872 27.3872 30.8613 26.2319 30.8613 cv
25.0371 30.8613 24.0913 31.917 24.0913 33.1714 cv
24.0913 34.4463 25.0869 35.4019 26.2222 35.4019 cv
27.397 35.4019 28.3628 34.4263 28.3628 33.1714 cv
cp
27.606 33.082 mo
27.606 33.4307 27.606 34.0479 27.3472 34.5156 cv
27.0684 34.9937 26.6104 35.1826 26.2319 35.1826 cv
25.8638 35.1826 25.4155 35.0234 25.127 34.5356 cv
24.8579 34.0874 24.8481 33.5 24.8481 33.082 cv
24.8481 32.7036 24.8481 32.0962 25.1567 31.6479 cv
25.4355 31.2202 25.8735 31.0605 26.2222 31.0605 cv
26.6104 31.0605 27.0288 31.2397 27.2974 31.6284 cv
27.606 32.0864 27.606 32.7134 27.606 33.082 cv
cp
f
32.186 31.4888 mo
32.186 31.1899 31.9175 30.9111 31.4893 30.9111 cv
30.6431 30.9111 30.354 31.8271 30.2944 32.0166 cv
30.2847 32.0166 li
30.2847 30.9111 li
28.9502 31.021 li
28.9502 31.3096 li
29.6274 31.3096 29.707 31.3794 29.707 31.8672 cv
29.707 34.5654 li
29.707 35.0137 29.5977 35.0137 28.9502 35.0137 cv
28.9502 35.3022 li
29.229 35.2822 29.7769 35.2822 30.0752 35.2822 cv
30.3442 35.2822 31.0513 35.2822 31.2803 35.3022 cv
31.2803 35.0137 li
31.0811 35.0137 li
30.354 35.0137 30.3345 34.9043 30.3345 34.5454 cv
30.3345 32.9824 li
30.3345 32.0166 30.7324 31.1104 31.499 31.1104 cv
31.5791 31.1104 31.5986 31.1104 31.6387 31.1206 cv
31.5591 31.1602 31.3994 31.2202 31.3994 31.4888 cv
31.3994 31.7773 31.6284 31.8872 31.7881 31.8872 cv
31.9873 31.8872 32.186 31.7578 32.186 31.4888 cv
cp
f
36.5176 34.1172 mo
36.5176 34.0576 36.4678 34.0181 36.4077 34.0181 cv
36.3281 34.0181 36.3086 34.0679 36.2886 34.1172 cv
36.0298 34.9541 35.3623 35.1826 34.9443 35.1826 cv
34.5259 35.1826 33.5205 34.9043 33.5205 33.1816 cv
33.5205 32.9922 li
36.2783 32.9922 li
36.4976 32.9922 36.5176 32.9922 36.5176 32.8032 cv
36.5176 31.7974 35.98 30.8613 34.7749 30.8613 cv
33.6401 30.8613 32.7637 31.8872 32.7637 33.1216 cv
32.7637 34.436 33.7793 35.4019 34.8848 35.4019 cv
36.0693 35.4019 36.5176 34.3267 36.5176 34.1172 cv
cp
35.9004 32.8032 mo
33.5303 32.8032 li
33.6099 31.2397 34.4863 31.0605 34.7651 31.0605 cv
35.8306 31.0605 35.8901 32.4648 35.9004 32.8032 cv
cp
f
44.1245 35.3022 mo
44.1245 35.0137 li
43.8159 35.0137 li
42.9395 35.0137 42.9097 34.894 42.9097 34.5356 cv
42.9097 28.9199 li
42.9097 28.6909 42.9097 28.6812 42.7104 28.6812 cv
42.4717 28.9497 41.9736 29.3184 40.9482 29.3184 cv
40.9482 29.6069 li
41.1772 29.6069 41.6753 29.6069 42.2227 29.3481 cv
42.2227 34.5356 li
42.2227 34.894 42.1929 35.0137 41.3169 35.0137 cv
41.0078 35.0137 li
41.0078 35.3022 li
41.2769 35.2822 42.2427 35.2822 42.5713 35.2822 cv
42.8999 35.2822 43.8555 35.2822 44.1245 35.3022 cv
cp
f
23.5039 82.9956 mo
23.5039 82.9063 23.4341 82.9063 23.4043 82.9063 cv
23.3145 82.9063 23.3047 82.936 23.2749 83.0557 cv
23.0557 83.7627 22.5181 84.061 21.9805 84.061 cv
21.373 84.061 20.5664 83.5332 20.5664 82.02 cv
20.5664 80.3672 21.4131 79.959 21.9106 79.959 cv
22.2891 79.959 22.8369 80.1084 23.0659 80.4966 cv
22.9463 80.4966 22.5776 80.4966 22.5776 80.9048 cv
22.5776 81.1436 22.7471 81.313 22.9863 81.313 cv
23.2153 81.313 23.4043 81.1738 23.4043 80.8848 cv
23.4043 80.2178 22.7075 79.7397 21.9009 79.7397 cv
20.7358 79.7397 19.8101 80.7754 19.8101 82.0298 cv
19.8101 83.3042 20.7656 84.2803 21.8906 84.2803 cv
23.2051 84.2803 23.5039 83.0854 23.5039 82.9956 cv
cp
f
28.3628 82.0498 mo
28.3628 80.7656 27.3872 79.7397 26.2319 79.7397 cv
25.0371 79.7397 24.0913 80.7954 24.0913 82.0498 cv
24.0913 83.3242 25.0869 84.2803 26.2222 84.2803 cv
27.397 84.2803 28.3628 83.3042 28.3628 82.0498 cv
cp
27.606 81.96 mo
27.606 82.3086 27.606 82.9258 27.3472 83.394 cv
27.0684 83.8721 26.6104 84.061 26.2319 84.061 cv
25.8638 84.061 25.4155 83.9019 25.127 83.4141 cv
24.8579 82.9658 24.8481 82.3784 24.8481 81.96 cv
24.8481 81.582 24.8481 80.9746 25.1567 80.5264 cv
25.4355 80.0981 25.8735 79.939 26.2222 79.939 cv
26.6104 79.939 27.0288 80.1182 27.2974 80.5063 cv
27.606 80.9644 27.606 81.5918 27.606 81.96 cv
cp
f
32.186 80.3672 mo
32.186 80.0684 31.9175 79.7896 31.4893 79.7896 cv
30.6431 79.7896 30.354 80.7056 30.2944 80.895 cv
30.2847 80.895 li
30.2847 79.7896 li
28.9502 79.8994 li
28.9502 80.188 li
29.6274 80.188 29.707 80.2578 29.707 80.7456 cv
29.707 83.4438 li
29.707 83.8916 29.5977 83.8916 28.9502 83.8916 cv
28.9502 84.1807 li
29.229 84.1606 29.7769 84.1606 30.0752 84.1606 cv
30.3442 84.1606 31.0513 84.1606 31.2803 84.1807 cv
31.2803 83.8916 li
31.0811 83.8916 li
30.354 83.8916 30.3345 83.7822 30.3345 83.4238 cv
30.3345 81.8608 li
30.3345 80.895 30.7324 79.9888 31.499 79.9888 cv
31.5791 79.9888 31.5986 79.9888 31.6387 79.9985 cv
31.5591 80.0386 31.3994 80.0981 31.3994 80.3672 cv
31.3994 80.6558 31.6284 80.7656 31.7881 80.7656 cv
31.9873 80.7656 32.186 80.6357 32.186 80.3672 cv
cp
f
36.5176 82.9956 mo
36.5176 82.936 36.4678 82.896 36.4077 82.896 cv
36.3281 82.896 36.3086 82.9458 36.2886 82.9956 cv
36.0298 83.832 35.3623 84.061 34.9443 84.061 cv
34.5259 84.061 33.5205 83.7822 33.5205 82.0596 cv
33.5205 81.8706 li
36.2783 81.8706 li
36.4976 81.8706 36.5176 81.8706 36.5176 81.6816 cv
36.5176 80.6758 35.98 79.7397 34.7749 79.7397 cv
33.6401 79.7397 32.7637 80.7656 32.7637 82 cv
32.7637 83.3145 33.7793 84.2803 34.8848 84.2803 cv
36.0693 84.2803 36.5176 83.2051 36.5176 82.9956 cv
cp
35.9004 81.6816 mo
33.5303 81.6816 li
33.6099 80.1182 34.4863 79.939 34.7651 79.939 cv
35.8306 79.939 35.8901 81.3428 35.9004 81.6816 cv
cp
f
44.4233 82.5078 mo
44.2041 82.5078 li
44.1743 82.6772 44.0947 83.2246 43.9951 83.3838 cv
43.9253 83.4736 43.3579 83.4736 43.0591 83.4736 cv
41.2173 83.4736 li
41.4858 83.2446 42.0933 82.6074 42.3521 82.3687 cv
43.8657 80.9746 44.4233 80.4565 44.4233 79.4712 cv
44.4233 78.3262 43.5171 77.5591 42.3623 77.5591 cv
41.207 77.5591 40.5303 78.5449 40.5303 79.4014 cv
40.5303 79.9092 40.9683 79.9092 40.998 79.9092 cv
41.207 79.9092 41.4658 79.7598 41.4658 79.4414 cv
41.4658 79.1621 41.2769 78.9731 40.998 78.9731 cv
40.9082 78.9731 40.8887 78.9731 40.8589 78.9834 cv
41.0479 78.3062 41.5854 77.8481 42.2329 77.8481 cv
43.0791 77.8481 43.5967 78.5552 43.5967 79.4712 cv
43.5967 80.3174 43.1089 81.0542 42.5415 81.6914 cv
40.5303 83.9414 li
40.5303 84.1807 li
44.1646 84.1807 li
44.4233 82.5078 li
cp
f
gsave
0 0 mo
396.012 0 li
396.012 151.484 li
0 151.484 li
0 0 li
cp
clp
97.8931 101.935 mo
98.0449 101.935 98.1733 101.988 98.2773 102.094 cv
98.3818 102.2 98.4341 102.328 98.4341 102.476 cv
98.4341 102.625 98.3818 102.75 98.2773 102.855 cv
98.1733 102.959 98.0469 103.011 97.8984 103.011 cv
97.75 103.011 97.6221 102.958 97.5161 102.853 cv
97.4106 102.746 97.3569 102.621 97.3569 102.476 cv
97.3569 102.328 97.4106 102.2 97.5161 102.094 cv
97.6221 101.988 97.748 101.935 97.8931 101.935 cv
97.8877 104.979 mo
98.0361 104.972 98.1636 105.021 98.2695 105.125 cv
98.3755 105.229 98.4287 105.357 98.4287 105.509 cv
98.4287 105.654 98.377 105.782 98.2749 105.892 cv
98.1724 106.001 98.0522 106.056 97.9136 106.056 cv
97.7588 106.056 97.626 106.003 97.5161 105.897 cv
97.4067 105.791 97.3516 105.663 97.3516 105.515 cv
97.3516 105.374 97.4043 105.25 97.5083 105.146 cv
97.6123 105.042 97.7393 104.986 97.8877 104.979 cv
97.8818 108.008 mo
98.0303 108.008 98.1563 108.06 98.2588 108.164 cv
98.3618 108.269 98.4126 108.395 98.4126 108.543 cv
98.4126 108.688 98.3618 108.814 98.2588 108.92 cv
98.1563 109.026 98.0361 109.08 97.8984 109.08 cv
97.7461 109.08 97.6152 109.024 97.5054 108.915 cv
97.396 108.805 97.3418 108.676 97.3418 108.527 cv
97.3418 108.393 97.396 108.273 97.5054 108.167 cv
97.6152 108.061 97.7407 108.008 97.8818 108.008 cv
f
110.113 101.935 mo
110.265 101.935 110.393 101.988 110.498 102.094 cv
110.602 102.2 110.654 102.328 110.654 102.476 cv
110.654 102.625 110.602 102.75 110.498 102.855 cv
110.393 102.959 110.267 103.011 110.118 103.011 cv
109.97 103.011 109.842 102.958 109.736 102.853 cv
109.63 102.746 109.577 102.621 109.577 102.476 cv
109.577 102.328 109.63 102.2 109.736 102.094 cv
109.842 101.988 109.968 101.935 110.113 101.935 cv
110.107 104.979 mo
110.256 104.972 110.383 105.021 110.489 105.125 cv
110.595 105.229 110.648 105.357 110.648 105.509 cv
110.648 105.654 110.597 105.782 110.495 105.892 cv
110.393 106.001 110.272 106.056 110.133 106.056 cv
109.979 106.056 109.846 106.003 109.736 105.897 cv
109.626 105.791 109.571 105.663 109.571 105.515 cv
109.571 105.374 109.624 105.25 109.728 105.146 cv
109.832 105.042 109.959 104.986 110.107 104.979 cv
110.102 108.008 mo
110.25 108.008 110.376 108.06 110.479 108.164 cv
110.582 108.269 110.632 108.395 110.632 108.543 cv
110.632 108.688 110.582 108.814 110.479 108.92 cv
110.376 109.026 110.256 109.08 110.118 109.08 cv
109.966 109.08 109.835 109.024 109.725 108.915 cv
109.616 108.805 109.562 108.676 109.562 108.527 cv
109.562 108.393 109.616 108.273 109.725 108.167 cv
109.835 108.061 109.96 108.008 110.102 108.008 cv
f
122.333 101.935 mo
122.484 101.935 122.613 101.988 122.717 102.094 cv
122.821 102.2 122.874 102.328 122.874 102.476 cv
122.874 102.625 122.821 102.75 122.717 102.855 cv
122.613 102.959 122.486 103.011 122.338 103.011 cv
122.189 103.011 122.062 102.958 121.956 102.853 cv
121.85 102.746 121.796 102.621 121.796 102.476 cv
121.796 102.328 121.85 102.2 121.956 102.094 cv
122.062 101.988 122.188 101.935 122.333 101.935 cv
122.327 104.979 mo
122.476 104.972 122.603 105.021 122.709 105.125 cv
122.815 105.229 122.868 105.357 122.868 105.509 cv
122.868 105.654 122.817 105.782 122.714 105.892 cv
122.612 106.001 122.492 106.056 122.354 106.056 cv
122.199 106.056 122.065 106.003 121.956 105.897 cv
121.846 105.791 121.791 105.663 121.791 105.515 cv
121.791 105.374 121.844 105.25 121.948 105.146 cv
122.052 105.042 122.179 104.986 122.327 104.979 cv
122.322 108.008 mo
122.47 108.008 122.596 108.06 122.698 108.164 cv
122.801 108.269 122.852 108.395 122.852 108.543 cv
122.852 108.688 122.801 108.814 122.698 108.92 cv
122.596 109.026 122.476 109.08 122.338 109.08 cv
122.186 109.08 122.055 109.024 121.945 108.915 cv
121.835 108.805 121.781 108.676 121.781 108.527 cv
121.781 108.393 121.835 108.273 121.945 108.167 cv
122.055 108.061 122.18 108.008 122.322 108.008 cv
f
134.552 101.935 mo
134.704 101.935 134.833 101.988 134.937 102.094 cv
135.041 102.2 135.094 102.328 135.094 102.476 cv
135.094 102.625 135.041 102.75 134.937 102.855 cv
134.833 102.959 134.706 103.011 134.558 103.011 cv
134.409 103.011 134.282 102.958 134.176 102.853 cv
134.07 102.746 134.017 102.621 134.017 102.476 cv
134.017 102.328 134.07 102.2 134.176 102.094 cv
134.282 101.988 134.407 101.935 134.552 101.935 cv
134.547 104.979 mo
134.695 104.972 134.823 105.021 134.929 105.125 cv
135.035 105.229 135.088 105.357 135.088 105.509 cv
135.088 105.654 135.037 105.782 134.934 105.892 cv
134.832 106.001 134.711 106.056 134.573 106.056 cv
134.418 106.056 134.285 106.003 134.176 105.897 cv
134.066 105.791 134.011 105.663 134.011 105.515 cv
134.011 105.374 134.063 105.25 134.167 105.146 cv
134.271 105.042 134.398 104.986 134.547 104.979 cv
134.542 108.008 mo
134.69 108.008 134.815 108.06 134.918 108.164 cv
135.021 108.269 135.072 108.395 135.072 108.543 cv
135.072 108.688 135.021 108.814 134.918 108.92 cv
134.815 109.026 134.695 109.08 134.558 109.08 cv
134.406 109.08 134.274 109.024 134.165 108.915 cv
134.055 108.805 134.001 108.676 134.001 108.527 cv
134.001 108.393 134.055 108.273 134.165 108.167 cv
134.274 108.061 134.4 108.008 134.542 108.008 cv
f
146.772 101.935 mo
146.924 101.935 147.053 101.988 147.157 102.094 cv
147.261 102.2 147.313 102.328 147.313 102.476 cv
147.313 102.625 147.261 102.75 147.157 102.855 cv
147.053 102.959 146.926 103.011 146.777 103.011 cv
146.629 103.011 146.501 102.958 146.396 102.853 cv
146.29 102.746 146.236 102.621 146.236 102.476 cv
146.236 102.328 146.29 102.2 146.396 102.094 cv
146.501 101.988 146.627 101.935 146.772 101.935 cv
146.767 104.979 mo
146.915 104.972 147.043 105.021 147.148 105.125 cv
147.254 105.229 147.308 105.357 147.308 105.509 cv
147.308 105.654 147.256 105.782 147.154 105.892 cv
147.052 106.001 146.931 106.056 146.793 106.056 cv
146.638 106.056 146.505 106.003 146.396 105.897 cv
146.286 105.791 146.231 105.663 146.231 105.515 cv
146.231 105.374 146.283 105.25 146.387 105.146 cv
146.491 105.042 146.618 104.986 146.767 104.979 cv
146.761 108.008 mo
146.91 108.008 147.036 108.06 147.138 108.164 cv
147.241 108.269 147.292 108.395 147.292 108.543 cv
147.292 108.688 147.241 108.814 147.138 108.92 cv
147.036 109.026 146.915 109.08 146.777 109.08 cv
146.625 109.08 146.494 109.024 146.385 108.915 cv
146.275 108.805 146.221 108.676 146.221 108.527 cv
146.221 108.393 146.275 108.273 146.385 108.167 cv
146.494 108.061 146.62 108.008 146.761 108.008 cv
f
210.397 146.617 mo
210.397 145.354 209.462 144.377 208.356 144.377 cv
207.809 144.377 207.341 144.627 207.002 145.045 cv
207.002 141.858 li
205.628 141.968 li
205.628 142.257 li
206.297 142.257 206.375 142.326 206.375 142.814 cv
206.375 148.769 li
206.594 148.769 li
206.952 148.121 li
207.182 148.49 207.609 148.868 208.247 148.868 cv
209.392 148.868 210.397 147.902 210.397 146.617 cv
cp
209.641 146.607 mo
209.641 147.275 209.541 147.693 209.303 148.052 cv
209.104 148.36 208.705 148.669 208.207 148.669 cv
207.669 148.669 207.321 148.32 207.151 148.052 cv
207.022 147.843 207.022 147.803 207.022 147.633 cv
207.022 145.582 li
207.022 145.403 207.022 145.383 207.132 145.225 cv
207.371 144.865 207.809 144.576 208.297 144.576 cv
208.596 144.576 209.641 144.696 209.641 146.607 cv
cp
f
215.943 148.769 mo
215.943 148.48 li
215.267 148.48 215.187 148.41 215.187 147.922 cv
215.187 144.377 li
213.783 144.487 li
213.783 144.775 li
214.46 144.775 214.54 144.846 214.54 145.334 cv
214.54 147.115 li
214.54 147.962 214.092 148.669 213.345 148.669 cv
212.528 148.669 212.479 148.201 212.479 147.674 cv
212.479 144.377 li
211.074 144.487 li
211.074 144.775 li
211.831 144.775 211.831 144.806 211.831 145.691 cv
211.831 147.186 li
211.831 147.803 211.831 148.161 212.13 148.49 cv
212.369 148.748 212.777 148.868 213.285 148.868 cv
213.454 148.868 213.772 148.868 214.111 148.58 cv
214.4 148.351 214.56 147.973 214.56 147.973 cv
214.56 148.868 li
215.943 148.769 li
cp
f
219.678 147.504 mo
219.678 146.967 219.349 146.648 219.259 146.559 cv
218.9 146.25 218.632 146.189 217.975 146.07 cv
217.676 146.011 216.949 145.871 216.949 145.273 cv
216.949 144.965 217.158 144.507 218.055 144.507 cv
219.14 144.507 219.199 145.434 219.22 145.742 cv
219.229 145.821 219.299 145.821 219.329 145.821 cv
219.438 145.821 219.438 145.771 219.438 145.592 cv
219.438 144.557 li
219.438 144.377 219.438 144.328 219.339 144.328 cv
219.259 144.328 219.07 144.547 219 144.637 cv
218.691 144.388 218.383 144.328 218.064 144.328 cv
216.859 144.328 216.501 144.984 216.501 145.533 cv
216.501 145.643 216.501 145.99 216.88 146.339 cv
217.198 146.617 217.536 146.688 217.995 146.777 cv
218.542 146.887 218.672 146.916 218.921 147.115 cv
219.1 147.266 219.229 147.484 219.229 147.763 cv
219.229 148.191 218.98 148.669 218.104 148.669 cv
217.447 148.669 216.969 148.291 216.75 147.295 cv
216.71 147.115 216.7 147.096 216.7 147.096 cv
216.681 147.057 216.641 147.057 216.61 147.057 cv
216.501 147.057 216.501 147.105 216.501 147.285 cv
216.501 148.639 li
216.501 148.818 216.501 148.868 216.601 148.868 cv
216.65 148.868 216.66 148.858 216.83 148.648 cv
216.88 148.58 216.88 148.56 217.028 148.4 cv
217.407 148.868 217.945 148.868 218.114 148.868 cv
219.159 148.868 219.678 148.291 219.678 147.504 cv
cp
f
grestore
gsave
255.091 119.583 mo
322.707 119.583 li
322.707 46.6064 li
255.091 46.6064 li
255.091 119.583 li
cp
clp
265.097 86.8281 mo
254.688 83.0952 258.839 51.6694 275.441 57.0317 cv
276.982 46.5786 296.289 48.2759 296.162 57.0317 cv
308.268 45.832 323.739 68.1626 313.362 79.3623 cv
325.813 84.7915 313.204 114.045 302.985 109.158 cv
302.168 117.303 283.898 120.153 282.296 109.158 cv
271.951 120.9 250.381 102.846 265.097 86.8281 cv
0 0 0 0 cmyk
f
1.25457 lw
1 lc
1 lj
265.019 86.8599 mo
254.688 83.0952 258.839 51.6694 275.751 57.3213 cv
276.982 46.5791 296.289 48.2754 296.144 57.3213 cv
308.268 45.832 323.739 68.1626 313.315 79.3306 cv
325.813 84.7915 313.204 114.045 303.12 109.447 cv
302.168 117.304 283.898 120.153 282.191 109.447 cv
271.951 120.9 250.381 102.846 265.019 86.8599 cv
cp
.746 .676 .668 .898 cmyk
@
grestore
gsave
0 0 mo
396.012 0 li
396.012 151.484 li
0 151.484 li
0 0 li
cp
clp
118.578 114.052 mo
118.578 130.345 li
37.1123 130.345 li
37.1123 114.052 li
.746 .676 .668 .898 cmyk
@
grestore
274.724 42.8447 mo
274.724 42.5557 li
274.505 42.5557 li
273.758 42.5557 273.728 42.4565 273.728 42.0879 cv
273.728 36.8008 li
273.728 36.4326 273.758 36.333 274.505 36.333 cv
274.724 36.333 li
274.724 36.0439 li
274.484 36.064 273.628 36.064 273.329 36.064 cv
273.031 36.064 272.165 36.064 271.926 36.0439 cv
271.926 36.333 li
272.145 36.333 li
272.892 36.333 272.921 36.4326 272.921 36.8008 cv
272.921 42.0879 li
272.921 42.4565 272.892 42.5557 272.145 42.5557 cv
271.926 42.5557 li
271.926 42.8447 li
272.165 42.8247 273.021 42.8247 273.319 42.8247 cv
273.618 42.8247 274.484 42.8247 274.724 42.8447 cv
cp
f
280.27 42.8447 mo
280.27 42.5557 li
279.771 42.5557 279.522 42.5557 279.513 42.2573 cv
279.513 40.4253 li
279.513 39.499 279.513 39.2202 279.284 38.9019 cv
278.995 38.5137 278.527 38.4536 278.188 38.4536 cv
277.223 38.4536 276.845 39.2803 276.765 39.4795 cv
276.755 39.4795 li
276.755 38.4536 li
275.4 38.5635 li
275.4 38.8521 li
276.077 38.8521 276.157 38.9219 276.157 39.4097 cv
276.157 42.1079 li
276.157 42.5557 276.048 42.5557 275.4 42.5557 cv
275.4 42.8447 li
275.659 42.8247 276.197 42.8247 276.476 42.8247 cv
276.765 42.8247 277.303 42.8247 277.562 42.8447 cv
277.562 42.5557 li
276.924 42.5557 276.805 42.5557 276.805 42.1079 cv
276.805 40.2559 li
276.805 39.2104 277.491 38.6528 278.108 38.6528 cv
278.727 38.6528 278.865 39.1606 278.865 39.7681 cv
278.865 42.1079 li
278.865 42.5557 278.756 42.5557 278.108 42.5557 cv
278.108 42.8447 li
278.368 42.8247 278.905 42.8247 279.185 42.8247 cv
279.473 42.8247 280.011 42.8247 280.27 42.8447 cv
cp
f
283.485 41.6099 mo
283.485 41.0425 li
283.267 41.0425 li
283.267 41.5898 li
283.267 42.3071 282.978 42.7251 282.59 42.7251 cv
281.912 42.7251 281.912 41.7993 281.912 41.6299 cv
281.912 38.8418 li
283.316 38.8418 li
283.316 38.5532 li
281.912 38.5532 li
281.912 36.7212 li
281.703 36.7212 li
281.693 37.6572 281.332 38.6128 280.419 38.6431 cv
280.419 38.8418 li
281.265 38.8418 li
281.265 41.6099 li
281.265 42.7153 282.002 42.9443 282.529 42.9443 cv
283.157 42.9443 283.485 42.3271 283.485 41.6099 cv
cp
f
288.086 41.6597 mo
288.086 41.6001 288.036 41.5601 287.976 41.5601 cv
287.896 41.5601 287.877 41.6099 287.856 41.6597 cv
287.598 42.4961 286.931 42.7251 286.513 42.7251 cv
286.094 42.7251 285.089 42.4463 285.089 40.7236 cv
285.089 40.5347 li
287.847 40.5347 li
288.065 40.5347 288.086 40.5347 288.086 40.3457 cv
288.086 39.3398 287.548 38.4038 286.343 38.4038 cv
285.208 38.4038 284.332 39.4297 284.332 40.6641 cv
284.332 41.9785 285.348 42.9443 286.452 42.9443 cv
287.638 42.9443 288.086 41.8691 288.086 41.6597 cv
cp
287.468 40.3457 mo
285.099 40.3457 li
285.178 38.7822 286.055 38.603 286.333 38.603 cv
287.398 38.603 287.458 40.0068 287.468 40.3457 cv
cp
f
291.879 39.0313 mo
291.879 38.7324 291.61 38.4536 291.183 38.4536 cv
290.336 38.4536 290.047 39.3696 289.987 39.5591 cv
289.978 39.5591 li
289.978 38.4536 li
288.644 38.5635 li
288.644 38.8521 li
289.32 38.8521 289.399 38.9219 289.399 39.4097 cv
289.399 42.1079 li
289.399 42.5557 289.29 42.5557 288.644 42.5557 cv
288.644 42.8447 li
288.922 42.8247 289.47 42.8247 289.769 42.8247 cv
290.037 42.8247 290.744 42.8247 290.973 42.8447 cv
290.973 42.5557 li
290.774 42.5557 li
290.047 42.5557 290.027 42.4463 290.027 42.0879 cv
290.027 40.5249 li
290.027 39.5591 290.426 38.6528 291.192 38.6528 cv
291.271 38.6528 291.292 38.6528 291.331 38.6626 cv
291.252 38.7026 291.093 38.7622 291.093 39.0313 cv
291.093 39.3198 291.321 39.4297 291.48 39.4297 cv
291.68 39.4297 291.879 39.2998 291.879 39.0313 cv
cp
f
297.346 42.8447 mo
297.346 42.5557 li
296.848 42.5557 296.599 42.5557 296.589 42.2573 cv
296.589 40.4253 li
296.589 39.499 296.589 39.2202 296.359 38.9019 cv
296.071 38.5137 295.603 38.4536 295.265 38.4536 cv
294.299 38.4536 293.92 39.2803 293.841 39.4795 cv
293.831 39.4795 li
293.831 38.4536 li
292.477 38.5635 li
292.477 38.8521 li
293.153 38.8521 293.233 38.9219 293.233 39.4097 cv
293.233 42.1079 li
293.233 42.5557 293.124 42.5557 292.477 42.5557 cv
292.477 42.8447 li
292.735 42.8247 293.273 42.8247 293.552 42.8247 cv
293.841 42.8247 294.378 42.8247 294.638 42.8447 cv
294.638 42.5557 li
294 42.5557 293.881 42.5557 293.881 42.1079 cv
293.881 40.2559 li
293.881 39.2104 294.567 38.6528 295.185 38.6528 cv
295.802 38.6528 295.941 39.1606 295.941 39.7681 cv
295.941 42.1079 li
295.941 42.5557 295.832 42.5557 295.185 42.5557 cv
295.185 42.8447 li
295.443 42.8247 295.981 42.8247 296.26 42.8247 cv
296.549 42.8247 297.087 42.8247 297.346 42.8447 cv
cp
f
301.627 41.6597 mo
301.627 41.6001 301.577 41.5601 301.518 41.5601 cv
301.438 41.5601 301.418 41.6099 301.397 41.6597 cv
301.139 42.4961 300.472 42.7251 300.054 42.7251 cv
299.636 42.7251 298.63 42.4463 298.63 40.7236 cv
298.63 40.5347 li
301.388 40.5347 li
301.607 40.5347 301.627 40.5347 301.627 40.3457 cv
301.627 39.3398 301.089 38.4038 299.885 38.4038 cv
298.749 38.4038 297.873 39.4297 297.873 40.6641 cv
297.873 41.9785 298.889 42.9443 299.994 42.9443 cv
301.179 42.9443 301.627 41.8691 301.627 41.6597 cv
cp
301.01 40.3457 mo
298.64 40.3457 li
298.72 38.7822 299.596 38.603 299.874 38.603 cv
300.939 38.603 301 40.0068 301.01 40.3457 cv
cp
f
305.151 41.6099 mo
305.151 41.0425 li
304.933 41.0425 li
304.933 41.5898 li
304.933 42.3071 304.644 42.7251 304.256 42.7251 cv
303.578 42.7251 303.578 41.7993 303.578 41.6299 cv
303.578 38.8418 li
304.982 38.8418 li
304.982 38.5532 li
303.578 38.5532 li
303.578 36.7212 li
303.369 36.7212 li
303.359 37.6572 302.998 38.6128 302.085 38.6431 cv
302.085 38.8418 li
302.932 38.8418 li
302.932 41.6099 li
302.932 42.7153 303.668 42.9443 304.196 42.9443 cv
304.823 42.9443 305.151 42.3271 305.151 41.6099 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (001x006.eps)%%CreationDate: 26/05/15 3:19 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$DVScnIF<^capqP)p7E^1:j_g%Tn*$(QY^!X)&<TD-BMmA&*=ai64sd-pVN1T-il:mRqU<N/qI<CuFsZ2N.O2-TIfp-6_l%=d"rJ,ptS)9^8XH8>gYMBD%k*9[:"^$OZ$<=Z9/k,A5-(:1#HZhgW<)Xo:o$rDrC[9'p6&gKRF=r`!+D_s0=0;GH$!S'CZaa^VUQ%p6eGfG4k#jUKOe-]3j*;;O2A:!+k9&psWp-Nde]KleUZuC>/_hT5g-_4]E5t(;:IODX4G#;lcO`9'`n@0D)aZ&'S\arOh"UUHTeo%A;"LXn9//,&4,Q1oClnjpI;@DXnE_$emjFmfkkrIWngJC\qL&=A0ksD$@-els6;GArAl9d.d8r6To))1G?PW%&slK)oKY<t\cjBR%ehKq2qHo6Yhoj-4HF6fB&dfAbrU\&/TJ"EVLA6Edacj''B"`QEC@i*].Y)>%U;M/VhF*>`moPt.GM3-u!WODK/umb%H6;[hh>Di<%0./@&!b/u3ohW7oW!<bOGNu;gp(bSF<hu68)]IuOlBeB@53Hb$e<7*h=\8Bq0aQHqZDoq0bP[R2!d-hhX=4f;l3+B[\D)7H[$IiT%P+iVMDKd$Wc;7G2>3#e[->*Ybg['EA2PNIO?Z4>0+:0P=np6C.+.eZ#/j>BD[Ao35oZg(oW,dPb&P5Hm>jYUZPD15rLctb`MgtRG%B+k'=Wpj^>n7gYH=Xl/)Wkr+CKr:pX:K<ZBX]44qns3]L.Dp[CL&n+Z"%jG#V8DN)D(&oK:r]q0FPng:Z>Cunhr#/?PtFlQ<.[&%%-$W<;6((=KSlR=q!H2$hn@VXBmgtEa^'#P+,'aN6ZKEpsi=egLTAUAT6(_7TaYW,mHpS_7&UZp[)(!A9cmSUA?dL%mKUN1;8BoL+%pk4+6?[tJ8TM7aIdQWnII_dCrWDil;p]Hls)A=S5.`!KXPOtAQ:N.\kOk'PS`ZnN9r.@no5PTo##R<r)aYUdgp^<pkIuM9u.can!%++1pYkT/VHHkOX(!hW9rq?NXGMaU/C>tOq?,*N&CSB2<%)8VA1*D-pT0tNI<'C5a@Jer-feBI\V9!EeA#("<8'7'n%P?sHNcp.;Y%;FJ6mItT00?20(.d(;]78N%MLKQ<jl,2GqIRB/)V"3cUt&6WE$K(5)PSR=sd:>."9"3_WQ=PjDP:l;YUC+&J6kN!`$S;^,cc%P85%2Pc'7r^Z%9O*:(h,0`S-+'FOt>kX"r1V)]>#B+Z$@O%FbR8KCD!AIuIKXWs!(p49Seh3qg]ID#:rWdq0<g;i573PJ%?h+`i1&/fh%P(/=qXqM*@9E(>+q9Ar&J!NNP>8D#/UAkQ(nq@#hs,'89S,Xf7''XG)5kn^WDek:/k'tK;an\I!3UdMB$"(emp5Ai;rDU(dVH:nT%TP%C_.i#Cl/%U>HC[b%QFi>mFQrumT<30Ji?got<5YkDR>W9`FoZe5b=0V2K.esIe=WQuiJWY0809fpg<6C(irp![`!Z9#tIGY1O%d;K+ZCLnoJT#d_8YeSOHGTUIR4[K)SJ"[;J9<a'+U_Wg./Bd*k<YqGHlO!TL0Wo[#_Ae=g_\h\0ec`Z3^#gn=KHB@W6A;jRQLn$n%!1K*q1tka`1MI)=aKZ_d+5S>$_gI]*KQ&D$e8jT0HNUt#Dd0"_k+_!U+fITqQh6b5:tYp3\cn=t<!\1+V_N$7;A/#B7K\o%TK$i&%(sE([,QE\G0oL$Zi-ttF9LG:X6>-\?U#2eJ$1l4b]jt5#4ItAObg7CJjD@+4_l;ap)SqP-"JH/"a$r)W7>]u>QH>NG'f&*1c=Jp!%/WG`kWXfM17tLBpJ')\^4u!9'$27C7s8)=+A5/B2qing+`FAb/1dM0s5"*sUN=&@R*Qa<q@VEM>j-EMIehK+@<17nUD4Eh`RCm%_%OZncUAQ-)K3fhAo4;[lhn0aH1J&Cf3IL#*X&LW<c<ogW?\)A"1:N-uj1[Q'U<=:RU\T]=8'-bchY?>Jt7FW36C+_"#PY)j[<5?Pi%\06^%3,38W_`O)ESh\)p*q'phFE9pMQThos`Ph-Tq3N,(`Mhe'*NVCjFU+Lp>^aV5*Le?HDjbFbRPP1_CbCRI$O3GXp)AEI1G+o#%O;3@)mpXS%b%:_WED'I0fOc@mNGZm`g$'6jJ;l%5'/)YlGCWG1o3345I!kh\4.oS4-2_EU^i>D7@EV*:FlW;PbtVW4XB6ClbS>`q%i#G>.GB@',h+,o%dn:#BcK*/)dbRs?(=S.io6.K<::*A"NQ>?mFM,M0bKFfbg+,k[j1.CiNY&%;adRG/#E=&6BGl48`s1Y@Im.@l%fpF%%]60[*VPC_WZqBIZVA2N[$*kBGHNKS@O_l#4:/=(YAo0_5_e]m.f&hJ0gOg`?C:E,@9kV-`RnF_b`>[dlb4Qk:$j5GU+AM(R%5bO.p?W[1@Y,0eg'<P132b<r$Lh*jli!<_mo&hXZ<1J6XKbpqbrn[/BCC4i$mmpie2>k]^pW5gQPJ=nO2h_,MMGmXpA&=G&EC0Fj%An3Ypd4D6dEaC93c(DheN^g1]hJl[AGXY<ji7K7+:<%&OO0->GF85c_-6d54r]eospBD^pNeL4--[O[R*G2-80?=tBqi*UOnMQ-t%5FZ6>E1d3*\]oCM(BV;iAAmbj<^a]%p&s\=`ViP_Y0:/>S"_aTqZLuA1R&1447D3:.[pV305p_gPkLZUi(36n[KClKq&b?<0VI;I%K[^skpOW"Jj7?ZZnp#!b8jn$DTpfJ2)("-\In:(j-.,Bc2r9:<C.2ajRh[hnaV2#%Ah7&&U#..KJ&E"%UfoL8:2dOTYhqg^Q.fTL%44dt(5ptK3Zi*Xj3T'@jo6UG76T2@An)pH(.c"dS7T8:P5I$eURQp#`G.7G!fkp\&-ftfEp1lg:dB1-V@`dZ^ht=I--94j&r7h$C%UL2>I)kBZ97?qJm>>LE;k[j[Ur>kl\\c/YcrSk!okZ7#QHF)E>Wc]H7<\8T&m<44cIF>4*WneqT4#J*:r^'D\Ldo$p%Z=.t^"_iq%K&KdM&PiKP"b]AX)QNKqP/V%H<U2YfPFla2$#Fj7kARRNfhE6o5J<-=7D%AtWc^OHC8YGJL%>8'2GW`LXlC0?csTMRJ@D@A\,W(9%"dKR8!Bp?6f3YI8RuR/[[I_djo4u/)\^M1:(.YV.I(ctXNSYJ<-NS6cmIhK;c2.7.?GHIS<Z=lq=//b_Jr$fRa0trsJaelaq+%hk%a*%)?._+QM;ka2L1pEogQ^5LRY>(TR84EPSZee@9pKR%">PL^/3AH#EZsWL(fmh3ko1.?7H8:u2T/XJFW%562PWV]31mHr4I61*+%Y_N)ZMli)(2h0284nRhp!r\[SV;u(Ur_Z;=&GYB=!RVE:[7$Ub]p1u@O4m$P0nuW"*5A2<4K17)8FS>L-a/B"BGSC_QPbNu3I+8f%'V.]q?#`D[J>s:I2UD\6?kcqh&pZkJ$`a$;-l>tF!<uLuEFn)dA4D'oZepS0n>l'`e>RQji8:i3bb*Fd:"S_3E@9)/HF$a@15Y/U%/1N%OQ)carmI'MJ?bJKPRD1aE3,7(1\Gl<g)JpP;fQk4>;uZ\Z?d0?9YQQ%",^8<4s6"l3Rm491S]pPsDR^b^s)dJRI%f;sP"rPB%po=(h2+3Am&WfLMi3-n);13:JCf^#>JAhKJ3;d\m@>1%nqe.g%h0P!FnVdUE+IZNHNRsdd+I^91#3G]bj^&ZY-&f/0A]@4-OrInU%VmlTU:djJZ>J4[fWnp?5;#t=kJ!UVW%tb;,O.pdbmAJQSJ,NH\kP>oEN[%.^Zi0T#Y77C.X50fUpB\^ApDK%B/fKI7\-'YFp=d<5%^@HcWIpt)19dtlQ=T6L4+<ls'III.2qu<o=Yh*^(rI8;Q_]:aUs)d/`3,\^[fdA`$+8*YNa)L'/f&`E6WA_),s!.*[YTIDphi1h>%@q`>NgW2slD#VJd7?J\YeXte`_O29rr#b7P+(+&=\Ce'>PQ+[%rpf=!CV,YoVh=iL506qEhRR12fP^_5H8X?+s2\`/k,/0FcaAt+%E$g7Ni./V;BW.4hkuZMK^6)=$oiJO+M+<T8K9hV\UuO_Vq]3e2C?thrqHcshZod2IG6p6XiM9]He[p=]P8EnAqT5jCUL/Fd1`QBX%m`H^-WmIkL$eUk&BK:=Ka^-JVHC\[@cXF6Yl"POS=6T?bgXU2$3iKP3.7#-od4Ha57]V#>DdKfsM"JUG4FbfI24ui)<$j8dQ=V=9%e(03hEFGAp,n:s:'U'_BY>C'gfI"EI^MGda&.=oi+,S-mHCbIV*r01Y@%n*N6;%5$M,<k_ZGUq8ri=oCJDZ<CL`5L1!Y6+a#t5@U%\C9k(rhnT+&Z06\:h5P@bZc(Zc??\B`&Y>6i`bYIh]1$@("4i=Wl:g\f]m-`aeGP*1u0p>E5b77A?A+5Tj(b$oUV*[;Y1A'-'jet%RYPuL``LhDL#0]0Dq-3%P%c+kZt+OI4+Qs'[FOJh+K<8t8-S3_<.Uo8WW75=O;SIJMRNrAN`!ba]-Fs16kcKn<MS.gHKDeHmFT85%_MjHRRP<06>IF;lPt&5A"@)?*kOl<-Mb5;D-&AY&Cdb-,$pmfh/AmFd=Y+&mYnkqF-?"/MDWXDX!dMZU-698*isO4,;.n8bdBC"8%SDbJH@Op!<HD1#g**O3R`)A]n"Irfq$CdlkdA2<EitVYF\YMmHd.ciss.^Z<q#+_H=SLgP?+SY7F]At<YbQP4ahm^gR#8mP"hb;'%LZei<C#-'H3M[d94h0h1/f&dt0C(VI-OGOlB48:?dqge_kR,jjKG6QYT7l*jNDB&H%=[nuP25srHDfpaBt_#]3+f9`rkbh/X>8hp%%?eNSm-r<""W@<"!@K)<XnMVama>I@"n^)U[E42\`,W5LSSACpmPV_-RX"U)3nth.CQ4si,gRN]*4/uKCrV?b!O`I78T*C`P/@Q=%q=plFq<99Q0VXR,_6"+4;;Naj@Kk4I&SWBln=om1D`1elA?Xm-Ikl@rBZ711?),%$5-4KBL1'C+BGia+h,J8c-3gkQ,NhA-g2-CD%dadZjqjp\meK2,U<J.!sWRbh0EhKY+/H#.p%]Y0:pSCb0=n3.re.pJ`YUEo&OQ:&TrUu*578.I&otsVbFt-LF;Z1L@ea$2^_W^@t%Wi],c')OoKC(@0o'Y+EW):HuicZSS!O,+hnM\Vo]>J"+?f*7Y7bTF7iE?;GmjS?YFs1A5u_ZkLrfjon8ad=.iNSZVI)i/V)Sls9A%Zs-$nKjGe(l%YNmA8"$1>7f)ncUR(4.@e`R@]X@@'N_gIjj4W>ker@bp4OQH^%NsES0WZs5(dd8d.=(ll9Hq(3SlqMW-7`?IeWb"%.4^-b/h+u$,\[dWE8nT[+k58])NG-,peg@Z>K`_j&fctL'n^G@AiJm(eR%2;Q12*#`^H[#TFuS0-,37]S.\4W$t+mkC0!F,O-#f,%Ys'pZfF[R_-^<l/]sYKgo3dt]o8TkZV*M,.YeJ6,btl6\<9O5G1PZK[C&e$p,@7Oo`OgNj)PM8fh2,CFM%#7QMW;QEiRDXLXF5s%%-#h4\GbEI?bE5NU@)@,6\Q8[Bb$?Y$KjG]PB'>cE?_iMm75MH:?`ed[p[]:M"]2#Glu[`b*P[87haoQZID7Q;FE1c$KbpD7"],*5%=RhQ%qSUdr?V+dK\>T4SEpZWhB1RS[3)8kd><?@\JK?#LSp(./h@1e7Q9.p<%AYJ/'RT/S6V,?GR,XB0oKZ!OeUN-A+maRZ9e3E,%r`?MfV5l+_02*Oa8Z@_m^<;iYJijIVT3`PkY!r+'U.7;9Y%rOsR<X)W-8"*=e:KE+@PuRmVd+nD;-=_K9u3/;i?ajmlJ5JhBgdVF%H!8eijXq`L!tO;Lb&LNLXr/fc#q@EBrTUc*@%h%]5l%]''qp$^<N^0-]RBbSFISelJj>@tB9cPOC\;#o]esW/#McO<)`B?Z;RD-C%_r,!R7k5o!2T!\fNE+\pJI#gm'4cUp!_`Eug'o!c:p)=%]F#$?5<[`nC)0bB0BcRebJ)fsj^??_WqXC"lfA[V#0I,>OGi]m;Kt`B%erm4dP3"<bYe/lS)d_\0gQMJ3Fp=XRETj8;?<@bjTr-O6=<Fdkr6ENscn_sL5OLe!%c(=q2_rdVe+m[$s!Nta`1hq)Dnj\<7an>)%8?n3<COeZ!m6RiGO=@0cJlpFS0`"UErNA15)NT89SiB!1[=g]NYSCE(bh`qh$B$5q<U5lrV1CN:&B,E([FK$d6O#+p`*==rStIZ_%#C,\>:2-eb&+HG)m_*A&2X>okfuN'*Tk1rG-L-<-2<hqQlYT0)QRKCGaotgF==]<D&Y6Q):)a/^Rj[msYPK1c.k*I9[;QAA%k."r%rd1P?)tZ@c=9#9BU05(TC"<Z0s+\_[L:XU3Eh;(S<bnq2`gLPZ$Q#ViSTfn].t:"CTLD_k]A/OSOt>rH&&82M#s6K8hU;,+i5Q/>%'Fuen8dJHA7r[-klBf-@$^75-kG!TMTMu5&dO"1A4qh5M!NJP,oAU*D>e@mh+RBB56MAdifX#oVMdG^MS*t5B)_LDjLUk6f[A<$m%]_)Vm(Bq8q&XNc7Nk7t-G=\uHp8eZ`Z$8m'3sPt),IoOZ&UThb"'gM0A#sWUg>01/EZJ+0e@N/m^R0ou=0Hlu^Nc,Oh"^*6n4h;2%:R>)E_5[#85?LcA0)EQX073S;BDQGH>5fi(XufFE`O.M^,F),Mel#0:\[+[b[CH4HR`ZW+fr==."$Lu+PtN_./>&iGLH">EP'!Wn%q6et&gq94.APTY)dQ9k<Ps;[9j-OnrBW7;;B7/O;0"k6<k-Z\hpetni\R%n(]A<.ff0Zoe[(!SapXZI;ea$J:IA^@fFW^%Inm1AN%U9[g%H]o6QArF*lcG]#eU)<-"\#Z@2=&6H--#:Up/\^>lTiW#F[SkfAR\%YY5+ANF^Y"(>A]1`cfeY(\SY%noPE+,+]VM$R1mI?'%DQMZ/KWN.9mtc@d0-9`s)J.F6c)9eX!bca!WqT[l4g9ANf=+\bS>`uGce;-iQ(Qft<s7/n9"!@,Z<6Kdn##uL.3AVc0(]^SdCY<\%g6AnUJ6nEo.?B0P+"rU/D`!UM1om7KTA?/0?b2<UrQB^\9<Z?<F\2+='QLm#?->N^h9kS2iR>QheZ%6Yge>??f4apA,r[X[3ck"F%)^TkDR[#AN`bIc6`q54to#p`F<4dR?.Mp'&^IAn$hGg>XS3Cg1T)&%Zg7E1("?&<MGG#r\OnZ0Yn>>P<UDY?!!sG4,<muAE%_\gK%#Iq?-ZVDH&R@Eg;<4ainS%)<P\6cXhUG+0!HB6n&X&gkDRDD@ZTCpC]Heu6ZVko<H^dcTHYOad0BHlhX(3(&udGFG'cbIj@o1?Ri%36:qRg7)<]Q2MUqUf"Jp7qSo+htH@dE:m83f[>n#UJmG%F6;g^3VI5fW]WIGE20(i]mVc8e"<b[;Ga,gBfl34jko:1<1'`4S%"tY%W?1C!Vm@>LYI@0rSjB]&UoceA7^jF&/$;A1<i#n>8VT\N"rc<s\+*!`Uf"I1a4o3uqn$T.UW0\:=fXXg2-Q:U(EREhUSnpUm-aW=%k3q`cR;\k`.s#H5U\j_*<=3F3IRuSMc:jp4I/CLi;a7k.bKTiAH8X<#%rCn9j-4:chC,`tS)'C5p,f>SN?5%_bKAu4RX_*']rAe:%YF`5$qKUlkmH_$!]s1r<DtJ!slhTf;n^4hna5bKO:SYE7g?e94]iGGQoYH\3Hd*l:7ZW"B^5d&'okj>HG7!Np^qP!@kDQ<i7W0rV%XiAtaDkkn2dSsuQEG5e<])7O,7C*i_8jCYa1Mubac$0Fek3enRJ/_MNf&q844["m5(7#?TBQdd\H2dc58C,G*cPNP5[B<RGp=cig%[*elmU8On<1sor,UW$G_f<#=bh;77>$6%1J7T!M\XgG^YqHE02)I6V$R5.=.)tNukX&8g?gX2$fE22^BEbXFekR;/(l>$crQ+VP4%(@#``^O%E5rmcKO(MTYfV`>95VqUg1$SoEGX3ZO@]$PXRB:mo$r42"TmA^#+(%h,#Cp+qqVc<74eQ\USGT60\G-R:/:OgtjcVq`E%T,HM!:WrXBoeCTQ8-_=;:Ni'H!hWZ=_V%TOduWeC*.R7IQn_lCB(+RXh`b.YD(*4r?]T]=pcZS11T$52hHkC-hR7T>G?-ADjQWkY%Dqe4bj^M`]2gm/O/UO,(m[^g(`I+7aPo#jRl1=O.rL-Lc5CFq5YOSLm'RND9R59D4s6cM$Fon:b?7Eil^Sd<*?_<VVVkCLrG>D<4%^o)O:[XJnboW@e4ILo2Xg!oBV_a<;1Xhs%44n.^-Z8!X1;ll'YAhqO1DsKL5f%L2koCDg:kNV!FBlAVf/`g$HUN5PWAUC-/pDf7I%Kp`B^%f8EF\D'+]T;&0MYVIa]/X4&*RCb-B`L44mX$#\k9/ED/""W8,C2)#.74[9Q(\!Oh=='4aT9\?p)Q>cE#-;gU(aL#S[T>UB%1;2A3;WcP*QKW--Vo9N_I9M=J^@t&34(r=TN2HNHeXAkKaI=9ua_85;>5YenZo=OoXM&5-DO]@3jj'#^=c87lXt&n<!KA#He!HWf%]f>KPAmr9a$Z$MO6,2Ns7]"82UN=1>l$.aco?FJBctH-i<'-]a)RYT_k<brOg"C)rBQ*aBIO<;9We\CUh_SX6XO6F4X3o..@&&Oj%CPlJoe/HAC#H+c*LVU-;GRA-Vp+a(T;jEs:RePWd`G:7E7Ub]RiSWj6.d,D3?AmcS&*<p"N%L4.7_p.VE:L;QZf^d:b'df:Q0rBo%i?_(+Vk:0DcuR.upX@^<Z)D(49'RKtm\miJU-:dU('Ta5+1Nuq?Z'cm;ZE#S/ljT\/E`L%-hA/GNToOUs&ea6f.Q8b+8`)M;:dmt%eW/QPJdU)rSXJ@PLNRt@^5UQBFUMARfnrQj@!sP"5I-&]g&O%(=T]W_e?u[o.H9o_@AR&LJ(2YUkMse"ZCihRA#FPh>1j\'qm*]I%:qf%X5A+CZpTqZ66Yq44U[Ai"O_4h1H71H6l01&(!0Oo8L=3!5l\A@^9p'c$R7!]qQrW9,Ug<DnnMi!Qd?VbEi]\a$5KVl:U9:n\%:W_?Yn,]=/oFHE[jki(%]aj5`[*udD_#AoDHPsmh=G]Q.+RlT%OjKf?U/cbe0j'jV;#FT:<`p,F?WhF3rNRYaqr'W,mYU.l8#F\i%La0r'p(=QoigmbA,-fq'-c8ppSbE^[:Kq_fWhXTElX@7Q&eNU6<oPaZS]/`!J9F^m%XA/\a_k\3#GiI4oF=L\m?2fqMJCmq<+94+%DqAkiUXJ*jS?Ah1<u6YNKEf/,n';'lB*"rq(SgW&IZg1sg`I+$/_nKKHgD6Y;Xd/k_&7oD%J,aN7HiQl"5&k*aOQ]hSRE-J5Se$e%&k33R9`Cg#\Ai("O_!einu&bZWQObK7'"NpmM6#)r+a2he7"DIgi6Dd](lZojKtGjPdBk!:]!J&)[6EIBu]tNrBQ)mG/=Jn-[0#1%b!m*ujmm(NZ*NCg#:T[0e<g0C04*u!Y<BWq,"Y8M2l1j#1-]0#Ks5*-O<q=%^c=$0%TGXk1Atq[!Y'`HMp[qC?2R.Bb^D]t@e0(K%LqDD,OWCn7l^=+a>>MYD\"<:g9*lfRI,YT$WkYeTJC<s*`?kR2d<@m<$9%,gej\Sj4l`gC#7QN0S);3"<k(FcpkRF0;)l(6nhlF]%#W"58G2A[PA@\QNU;t9Plo'5''9?Tim(.EUHgXXf@\Q=2JRTX$+G/8e=Le(V]h1hc`St"?4)pR<B*!=[Gk7&T]!1]HQ2Q]AM2f[;%c1anbKefq/cPD5j>T`6IaSQ3>WT/b.,-;PtVe3uFc?dg)Q327b[jh5L_k#aY@0e(($:6'8&hb)a&1ru78#;'s[Z#tIYqC3S%suXF%E%tbOI,=tVot<jppfbm[D+HQB\WcoLf;Lh*??:][)h$HEM;J[5OE_]eT`tV+6^D*oVhUj,@!L$h'fRdiZ/H:)4WKF/oW\";A-MJT%:Cm!%#Vm0u!-[BN!,qmBl[@:#\bJSe-b7Dun=<oK;B'/is5&G=_<VC*9;I>`YhYSS*dcYhr>C6'Ek:6tdf6"9N*$/agt-`^M-)r/%4AZm!,eJlo*ocIDrL%j?nNH=PpKaT*]Lr8H&gXk`j8'D^\4`.V=h+!Y]VtVZF5-/7*YOf<2Q1D4j)g8or]Q'P3#oLN%WcQ)aEp/>%Bj#T)PsZQ3(hFrtho^`q&gVa@?re;an+3pl)oK-+ZM;XQ6O>QmfB6!7BKbg&>68r+#h0GcJ]lO#2Pi?^8Gnig9HuQRi_1>09(-h"%3bZ/oT\]0Q3ZK)&%5P\0cpXgM>af`O-"=qP8B/ieG9S$+CRMu@-.3C5df.$K3JO&F8abqlB>0KhP]BQFJ\Jip"gE!7f&J7\<tmJ;%bd5nq5E[UVB]Dd.TopD?QA*S`3AGg^HA,`Ec\cYjEE>KZjJ$n3fo"+jf/MmL/]c=O4)BnOasQ4gKrP?4?<j$0K-nG^Kh#%sdHQU.%JWjD>M9!$nAL*3%(pP-S&a3:(Z!]ra).TRrf7MTNZ"Ledb1ulHJ_!8cSI.n8aNhEbbn:M+%3.BM=#?Z/X+WiAj%hVJlUn*Lai3&q%$RFj&q?$G#!f._uboNh3HCpT+NRmu39FR?$UM;VRR*G(CHl6hHh->u8d6&Ip<8#2Hg*P?aUK^@KQ]A)n6H;:LgB9>Ok.]S-2JPD6%)D)Q7T(2P]EBPKB6.t81Z]C=E*BA"lGui::+'I51'"/;KXV;];`M*pkMJ'^`%P[V]m)Un_YR)@B$%ZXlf!rK:>!h9I3*\7/<jG99%[N;SL@pAU7YM6&7^"8'u`ga"@f@"QN!8fnI9qs*?W5W?#M]Ti^on8&bG\RPB<5J59/u_@WApOA.FGDg),kk=Tk/d+O*t+PI;?%EF%ZQXoPKo_`lo\$H0FljVe&8T7/F$1E<SlFgC$Njrkb%u;CF_RC;LPa*iGC9::5i3`f-.:i"L/:\@>Sq;n_t?F)n&&`l>gM'r4k/IM%(HUm\GdHAHGM"ShQj\c6.WdRr*o&1K=I^L!i(N!E\3(if%Z?*Nq"Gh"WBGGm=<`n`^_RL%d#Hr8G-@%'O7&K>Q7h,hi97n31qJIB%D+_'(6[\[g&of\i2p-cIe,ntT7*ho]1l3(;l,?1^PR.<*jdqb\9!+=^)OQma\R:Y3/^fmC:$j;fFu2hPRN&Hg>l\!s`>Do@!bHE"%[SYZHh4#g>2c*KuXj4$7+&"qU90"ek5<3Cq^s1'c.$d&r.WCAp)]F+iP))XW.@r]mR";GOi:?\[>sE0$Xt6*JO7VIZn#</7kqb=f%AZ;=d60?s'e/UN)S\>t`plp:8jNrTncm@,(ae9Yee<N<i[,q'CFQ"*ZO=`GK*',k+JhlQRb$s]W]'p+hROpLB%\7O5:'R7r[brPo%FQ"*Zm-KaPF6LIsk]lOMGWBm))0DOl-BU[Y<Di1/B`J%Rpc3GK;jeJ_N'/FPR6W-@Q!l1VEQo8h#6_/^#J7L-$:-*lIO[WX_akYD%Q!S.N;m;2%]9?@jg:p#>'P.1!Qhan4@MMA.PK1X!(uA#dPSg!H\$Fp)=J%RZ[Fb6D<%tu*#AJFtlW9:4-bhVln+n?)*3:^1lCY<\%177Fjp07b5I5jiEcd'T[7&MFBo3?tm'pphuWYh<_LLk;3^i"GXWagDSn4GgtNuAE>*XWPD2"l6A,Ii`BieN-\jGMeH9okk3jqA%]%>-_A&:lrJ_`,''+=-\uAQ4L7r@h9tH'LZ&X,U0=L[K87l,-GW@mO3Z'H#V*l<V[[_kL"Bl[1[uBld*jXeMi#AGnaa7R9$3q]ig-L%N\eoXTX?p,<leTj"NMC$)mU?,rR:%Vga)+Nb6b#_OH]<gbcYB"@%JpR5bi+J4MIFr1K'/o^=VlPQYDf8.QB;&.O53^_Jp8BPWkss%:tcV(X<JrI%>fXs&OfONG'bokbe_BulZ*MJTPYRAZ=.O-/UU<3[*"-"aFrO6hA(aeL+P6VGETR>-U=s+1sq[))g2q4&;kb=B8SXW%9C>WSS\XT[W4"8#9`VA8`51k'a+n<N3@@Z4WT%u6#S&N1P7/NdIUcT<)rI(9@de`cmF_(nlc*)o"]d?O4Ub<Jd4k#NiJ41aS;r^[%kKOk^cCnl"lA?s&lpHY7<$t$E4oL[c60l[$EXYU#p"P]#Z2%7PL5p>A2]sB1Ii4k-I-/PU.ehsS1P7K34EM*tj<<bXiTY>7XlGp3%m$H2PlNb_uZ0\`$kf\WKr9mq;M"e6rU<tEaHcKW0&&]h_k#d'f,/>"K:2Y22UjQ!:,+p2L%YnVg`U_*'B%Uf2U=7K%f.a#U*gtfV%8*4S?cm'2H@f[X=]b*C_D@IiZcV2>'UWtFRAu#,R,'[Yl-4rOsWgKDDb2E!8f@]78+eB5=a<[LUToJH%J_b)<>FPb(6BZBoEo+]c%>p)_b4ldfAPcu%YPD?_hd?iY.o)>jUe1bB84GcD\\6POF;]%RmIP)XbUe8R*$^tTMV2dShSWF^,F_uDQm&jc<<uCfZ81:9p"acS\%LD%MrlGc"HXKrF72_i0]K@lCqO4K4'4U?]Y-ZrBn-1-IK6&-f=Gm!_7KRHfiOo[Uko3oRb\G57[NKOeg\<f&"HoPeNggnpnq/?r;%/B5nhF7Lke)0$m6Ns+O]`QUjn0d"\*>B&$dE5T*F,kBn6X)IW0N<o?!Oj>0g.j*&l0>Hf\PKnr)T?tl(LW83%Tm:J7B@aum(3O\S%moB\(/>9@h@j8JG^M68rM&_iOV>=&9E5sHP$n)Ph8;rdmNpFfICGqMAi=$lTikt)M81#.k1'FbLA"?$qp)#(,"ZsZ^7Qc=b[GVpU%`#]l7Lkrt<.W>RY5(RH^0%5W'Zp#O"W,,A*agW9Q#fj9kJ_Et%MaOT9dR6h4-J="4+c0;uL(C:1GkaZj];*=))rb?P=KnXk,Cs>n%IX@(Xp-3mX`Xt"pm%=js;U8SUC7fmYBX(Ops,0Rd0Kg3KB]61SeEYPiD]7jG)6)/c='p_K]StA+a^h22Hqtq2'l'.)7OmJW9d1es%l5;f2'l*8NU]qhA4Zn5[H=20g$<R:F3Aet$4Ud[)L>bk:?RpH0m5V(aI^@\f;rIfR1=9&\IL^aiL&7gJE;gQ@F=LP6Flf!iE/DY,%NKX].&.pX+.U9Jl.-+FdL2F*33t]3f$'=ZEN5X&Co3E,WG&.fU#^\I+=eq7mJmndeV_k0k`c=k4'QY9L*5%UpHuf=dYXLQZD49lo%###Q2]s')Yk`Z*/:$Zu\XREYRW1jO\KA7?2ooC8i4MVbDXri.02m97-jltLF<lLZ`I&^GQT58B,qfAUV`J/YrY;7ihD07cF43#6G%WL/#_Q&>Bc\:ieQ_^;.#e*DX_4stP4<_2*#C?e"Xju2OIq8DYtF=4]&]H&)OmUr4jrF7"aRVE'R]A8-Nf_)*k[CeIa4NVIW`S_.d%\5^'YeEBP=L>DQd/Mub+cYRm3k;;HuG(ZimSQcQB">Fj<hgAP3S"'k&FE)Hb.k&<\R%F:8INAPHlu):0o$4td1@3^2(Oh@LqtLZd%+17aM]6[R3iTX'UUK^7_gVR.<9Al5(](-ijkimUGU#AV5a5<hc0Df_G^Z8"_)RY?Qn8ck_c$)8n-0`p)@/-+`CuA?CRbm9cln#P=%+kej6Z2]`aJM?n`flhVa7Nujo9r(/3"g:MM4]^J!84?"iI@U2]R&ejuan])SA?MH`9lb[r,2#I-Ep.gK3X(7/`f#U$8%<QWARL8L%q_mF[Edh"sd<+%qUWUF"b=9:%)=4%M;FBjj#X_1NpWIQ/.76r&G`Kf]0AH.Cf+@I[="sed1>-bu(j^B>`m:ORbG?/f1M,oh3^8B9%]8L`NflV\RFHK=iN0R*R]O*\@Cq:a+3SA5[Z+SYMZg%B'+$PiMAi?4'8>*M8m]f!5Cc]=93^4'0?8eA3\iDM8Cc]=93bRo(@bGkQ%0QcF)Z"Vn6A^gJ:dW%LqUpB7_\;S&O'@!EGh\D](2Otp^#m$[?ACLAEchCu1Z*NWlEp:FmV,=P_r2NB-XDE,>?,Rc?0sg,W<Ir(a%MIPO&@8)PIaJOkjZ#R)6r,V&Cmb9"nl25Sdr,9^s-_&DbK#*t>EO4m4Z8fHB5rg0bB@H\0c3`rjA7K9$q;p$6\Q<m+CcXcjKq-OR%@Q'e0?'\,"D-\#MNelpY_)q+\B%-QuaEse4XDBpV8g+SXOGm05!mkT#p%N@RURR">P'2Ud;]./'$W68qpH<>sMrYt'?_+rS1$ST#%,2\kDoY.o83G\T43HlJ0W,sN`_[VO?'6QXEEcWTV`'oO9r)'VsMjiK_GQhr'VXP-X%CH0uVjrG`'c]gX%j`&GiVlV;Q0DTeD9.&e%O/lNVYreP&Ik^jMMAn+l20ZktH#I-sK7E96.5l3/@d#[nOaS$U?$#1fQ`uD9,,Zjn?#pf85'bXnmQ@BMpg8+ZcgBk9c/%lY-3D$u%@U4&qk/u&/m_##Z_lpV/H7iH8Ir*H$\oB0sh=Jh2!JpUb15cbWNUG*k3-"^mP#:Dn11M]["\'QQLpb6ZFJC,sH*TEY@qWUFqh9"-%cUri%l'CN$L(.Bh&6[@#WJETtP$k$G'4DcJT(?P._4djeJ[U^7HaZ_a]^(mr'?#VnK?&e&6Bsus7?/&kKdqund2a98N]#]^1*>Q5%1$QcH\"9jGC2khIapZdd&aK`5U5F(hiZp.FAG7?E1pQc0)`3-79fR&cl;U$Ib/_6fafgYdEItESU<MCO9a!rR>sos7\<->;+h6\b%ZS8n`LKqL>cN`lN5><7V`I%$XcaaCF;]/DC#N8et0lA[5O%pm8&eDUjc`uBJbC#8;a:Ng@&C`N(Xgq9O,YeXgf?&^anN8j\GWkJ'%)!=f._0Ze^;]0$l1+Z>k]8,@qA;6f@L:bk)/*#E(7p?9@L(h,VNpKmOhf0HF(^Al:(GkZ&`-`c$S+=Q@L''BiNH%m'N4!ck9mORm%0]iggjS#5(PJW)Sk09J'\D_=-e4mm"g?\7tVPnh-iHlP#B-?qc@YqK'hqhQ;7_F.$nh'+bR?*+:a@f%2jMm7k_Y"=?6RAJX1Y2,R%C!2(cRZ[3ra`Vl;0oGMmgR%*0"2f)'hOBr"'A"%7(uE2'@e03/\MM*o!fb=C8PID=L<K2)f7V&rDM"n$hOFV(76T?E.Z6&3KDh*R%MR=WJ*>`EqGnW&p.4g>?\JmNSi`>(#\DG/"@`#\+_5<pPEJZYT.]-VkF<=j=2h%8;,:2.B2RsgZgV=gK`u^/1j*D[EBWC!3Y&5V.%h'9N\DaHIeV-H3'""03PW%9@;FW_);:a-*?)E`WXOIEt-O4477CcF,B07H;sVB9?]mAsTX5NPct^NWtTY4%pJ2\s^mf%Md8#5YcV%6?;s@*\'$YDLJNY-6DO+'e./:]@-2/2U961?28HQl)WPPd8f;BLMaSDJ*Y43'Cq<<e*sq50?\BDUJaNa#g3'$VJ",ZbbM[oFXLug%"=G0a<B=l6UYF7AQ_$[Ok%FFmmCq`>KC30kKVYK9ke[(6]fC/B/&YVlSh.q+r5O.@+>k_aHK/8\S,%ga<#l&/YFYkRC.tP5U[h&S%52:3MUY@SZCV4mF\iZIs$Y\&DEMZ]^)a3dL9&_HCq;&dmDKK[[ZJt$3$p;cqhe3AZcb`lB;iX[jYbYHc,1J$S/1_S]PX?-hDYLX8%1l6O,X*LHUSF%5eWO!;EHkK0YM\nF1LoP+C]0YPW@?V:@0j>#]D&Vo*pgjC9S%fq!ZmlohP&FTpE,nV$e>?RM=E8m1B#()Z/[WYZ%9+'hSLlmcdk]B!6!%iLt>(k8&W**h%@Pjk$'<=a\ner.i4"T\M@[%X4=bInT&>p6b-(Mq7gQ!#H'o%mdQ["2RdLM,^U=f7r1uV;5%>7^$-DKW?E[Z?iZ?;]Oj&N1&QjHTm`kLauCh(B-CL%/CH#&'A1\<ihr\=GjiIk90%EP_XZX\!>35AaiTEp+B/OYSgV&ItL/6m0^P%Wtmok/k9.\7gU+(DQqPNlm?`]FCg&>jD$!T1H<J%%gdG'G#g.a5d`B2kDsu\OP?\-I1MjZn7d$#hd.3]OmFF]PdB=]7(?+qLY6OY%h"?S)WGN0jDi^@/A>a[\@$G^BK!X4K:.C4NNOt8Z%b?]&#Uk!h&Oeos-Bu[;hG_A)4<pa*%_qXn<$g<T'3892]uEG0iYe^lg#1,p%UNUZc^N-EuL?8!EU"GHtbBO^?Z?$naP6]f/+N4Q5K``-tZ#8&)k*H[c!2JZV\jg8t/AOOkr,VjDep-O4^lY,MB`@'`=b'@j!/KFH%*`PS0)teTRTd"+M7a1u+5GpGT(1:*fqTY;QZN-c_!(L'8LL^ETblJfiq\Gb,\4NnBm$7<C4qaXS8j)kb0'+$%a[<ABU0Yo#lm.J1%>foPnbjN5n.A,e;UjqW,^4?*C-[[@M*&$+2Qh#FJ;YtYjj`A[Us4X;s^6VYr3Z0*L1WF&%fhh5,oo"#Pe>W-<M(390<kjdCL@X-c%(EU4K,jRJ]]mcY\RiajiBl>b>6UeT<Ds5kN'=l^Jr)UQLq3>IN6MTUeNc_IsT>Afkp%-sJ2M%N0^K^Y+alJ=$XVdSM(%5JDn6>k2%^;#iflSkEm1?uQ%iE:B7PmQ73(ETb%/OFUT]m`iM/'#9RcSZaJ11kn[H%^PCGiG=P6l0Hr`OXSRS<H6ABbO*_VmlLknFK/]f.VN[%M])a^ls@Hjp[O66o,`.WhamM3`LcYun)G@""S,a+mLJ'XMK,iWE,@UlHi:h1;ht[-r-SCZK*oPdN2/2roc#$MlW1bs^'HeX_s[1*%^X^Xp@jq>iIc9GIYcP4RUj(7tEaj;)rjVaC*r?!4qLtC>^A%/WE3Gm0/_ORfO+4??GV);Nj,8;g?hgaP+a\V,nfI()\,'Mr2M$5R%_Jf*?UuMm$i-YE3Au/3Qb?DR/0<-'4G-BeJep,\krM&)f2u^L>iOA[&]8pm[iT%V4Dq'.4gpMBfq=Dp+M1;_$T//(MM)pdeoa>,'%j)_=ME3EXDXaWW<YL/Qm6Z;W2DD!!r?GBU?2N<*fT-kZ,Z_',OI=-%I=eYT[NLpVTDtP&.k)/!\(Z<T9!Au]3AaFdBU7@c<rk3d>%IP(;b>bg3BkEeBPf31AEfLYc5KeM1PjRDs=qLpTW]q]VtHi<jj(,6FW`k?g5f9Kk&lPD!rE9qrM"q3lNXaX"qA)?P70\5u!5N0!F%Z0q8m:P_^R>O4hlf.VNl7\JC9p\MGjniA-g[UD;mqLri?$oo=Vo"BM2\,)5.HcEhPO.kX,&52`8j.DU"pR*#h![e59_g<9_&C^=>%O+@rZ0e@P[P6KeRhNR/e\EK&&65/e)>$pS$3gZ:O[&J?F/G>6BF2CKDj1=2'q8frZ4m7%#9(+!YVNnjEir.8`Pe[#N8J0%A9$J?Y%n)gGA<\",mhpKsAa'JpHXSHP%?7sGTI:_PuhaM8BrMVFKrDPON&(R,+^:e@.==ZU?Z\QTYBDVAcmCfL^Zo@<TEg,8(F]8.Q[e<T]%qn1^_SKAd%*uFSprVL?DrbLZ-OO;4cV_69g'C!j)k3>[Q^+nOAIQ"sih9D7*Pe''4R%$t9[uL$`qq^)Pcc>[kepaPNA(KY`cLoA=%o;bi.nS'eU]RO9?Y,ZQ4;Pgm1PUaH)p7uP8p8m"sZ0/_^lPbbLhXm$%g='Et:RkD"MoE+%dWJ;JYbtUWg[BO!pX"Z<k3Qg^?!gZV%l,qhuZX%f;m=:Wfml5]Gq]pYtjRbcIo3fn*=I:),]D^E#=.Mp:p@Mk/3`eP6^:LpYT4rH>LbH)lpAQl(XJKZn9=i0,6W65&NckQq%C54C2PF*h!/hYT#9YH0g-Z-?/hXM!re?tJQpT.8B179YHq^mq6o:s78OY6TsmjduLI!oVkEVo+B3%EIU2Y6mt^!1r.[SjB.5>S_j%2q99D[at:uoBPH]OY5u;WE3'FeMjOp>bF)107K@Ob]s#l\T3esia*A6g'>=.rq5sUimuZ)%X^Y"4_a%$BfA[#p$;Hk(U'@)I"*2H%&YAl9NL\UAF6oAYO+#')->!Ya1`(,f02adA*V=D)MgqI(m(SC,Q?)?"9"qU-**T;p*GMdK:&e2TGBS2lm+fX&,0^\Tc\RYKIar_J%-pBUmHug>[M%?3%](7$t53S6fKiVaCd<>%!ndCHn7+gW!.k?"3'd()(2<R78hesq3b\Tm*--XFl9,/2fqaWDE,363d'd*`*;71>/%)V)JOjcQW0dUSRUn76a"ao9Tf<C\DA3Eu[l_P<`9P4I7PQ-i)2IblL6'[6f(ir[=Q[&mkNEZ*$4gKi#*e4N;=ToInMkAVqdd8I*3%qGZNXl,0G>(Rs!_-*0#U:M.AGV*mJ(Sk7bEY"$s5jl9E(E0J[W[?hN0f!nsh/ep!O='eK@k'j4I;.s7QCg\d4qh:rjF67pYah6Fd%(gemp0&jrImM%A^@,?Ara?&@SMM*t`Kj\P(#_4-F6bZQuY*SQ97/lc]nu[/7m_EpcX$$B_mc&0MN;_9s'tij/A-n;]B]\gu)6Zun%1?+raLEE5$$hNF`Ff)N8=n5]q*,JqY".'tn_7R^Ab+7tmj]1-HX?\o)MZkkJgb"f_e^`@7pX\,2AT^ZC4cm%_I</$4Z/fEG[6:0&%XGTp/^X!":+En"Ek8a34m4AsLJ9V$!`@thG/T,!E3&\e4f1r[M/)@hi>hup;$Mud1[)ZEjgBY&+D<WIT(ts$+n[L`sF^7,b.qY5U%31@Y8.;h_f$U8Lm]l&(T$sglR$siHIV,%iXc0$8g@E"]`2#'84Er!`)aXlDb1nX)N]mY@a=@9r"'0!BnfZT-P=p??5,:[TJcfITk%.XnRR!mE]1I6_^U8H?qB>7L^PEgU;+p/;J!$TiX[L0;C`,jjO:Q'1/?RUm$'k99!\>L#jC(J!^5/[s=1Pd@3.LSDGqM%p2qVTt:/%>2RRtqWg=AHQQ""EiDj6]XQU\:n_CPOkM2"*&;-8f+qKgNYX@!J`fJc"umifQ:UW%SRjK>O3iZ-[?F.J?9Sa>Wn=c+KY!;UVgdF`%?qL"Y,Q7ub*+HiYTEPQZ(FsnYPrZF^;i>S):&$-6Z:a57r625`/Z5mU:V3U&r7kFinT8L]St;jG$L0["e5Fu;S"3NUgWcV$WL#UV%M^pEuFT$g`f\.NC]_&jeXbY'.@kOoLXO602ok!H1Zh9l=ft<b8].I9hr15S1hA^fqo:Ph-1h\@!8(bSead2rt\$OrI"O_+>7SA``%C_sL'o=`i6l/#I4ZTHWij7h)V_F7Us.K;HrSRK^BQ[5/P9=8lB$kupXS&V=X;LU^aE%c7+[X;9X2;=O*<_MOUeFC"\:Nt3F*7EeH%(Y*c5GuoA97Bddp8'Wraa#Y3K@&tpl%&M1,,tYdjX*B#tq3X]Sb.@QbK@IEm#<Pu0N%_\Xjm@>%F62B@\XYa.l'?e#[9b'hSWd;1%FAla8P5h",[XS%bYVk@L,)<`Pq[a7ih#!fNAQ57TX4t`I4hZ5^[^j%ND\PG!k>/R1:)`]cG9L<Ams[-?Q#]eUdaaR_DBQoFegI55%/uS(N^;f/S.(,3"&#T*@ngR_[XT-MA4A5-F*Cl84VsCLG7i+"0Rn<7T8*Tfgb5/2!2cmb\"uB2rV/Ve??'q*f9kD($#G=Ns@*-'B%*\;G"H(Lq>R8'Jk(Q-nqP-sqH8>e5&-;q"Kdg(,%K&R`"e;S03+*4Z5L-"=CUqo6TR^oFCmU,@bm8fhU(TFMQj7jki?lrOh"Ees*%h8[b-$12]]mXh+JD=Q0fnWbZ<pX4\6(ZR:(Vp@o%?-SIp^dfG_;9'T<Z#S<?"Jq,0V:`,!r&GbOr0''C7[_68kq4<ipWgh#UlNo0%AAM_PEsZ#iDT%hCq`HQjq2VO2AIQi\iV$Fp]g<KUgi:=MF*)$t^K;uJ,R#dUDN>.XNjMr64$BU.2\u)"6FOQiLXpbL8$m5^3SOCR%d95/f5/&*(c.Ak]nk\r>GVe7EcP0`HPk0bqXfkgmRBp)]EGp/9jl_%TRn+?:>5(XWgK<,%prD#q??poL<XsI(fI:ug0g"4G>&;uB%'J?Pk].8$9qh]WkqCo[.c47:_e[aJd?#AkZSu*h'+PhJtJVBbiQ*J!fl?1UBB4d5GnbiG-5f><=4^_b$bqHuYM;Ah-ZYY:aYEa,\%[sF&#jQHN;]Xb?BGo"YZ_2Z$cLnWBu,!EBn(dXeS=G9:epF%gVZ(?EH\g*!jdQ8qd-Td7*ZBTM:Fk_/cUV9F?IL'jPOcI1OLp(1c%c':8'hE7KQ-"4adbh'[uN";Vohu#eQE14N`gBWg2&"ckk+eO*tTWOc1-T,iFiM-rH$A\'l_7F[Ih->Ck3OI2p@;M[!eKUG1VN:5m%e^^Mq.[iZ3&(&79I^#7/DsS9`oZJ5CDQ_:4:T:W^gFb.GVe_%ZYKSZI'`dmF8)]K?>kP&MW:S2W/LSudFJi(fIa5>BauOOG(I#6Q%-J&4Qq.84&7cIg2Ouc'VObW,EGapJjGtF3D`ZV+L82%B:XCd9$+E$d$q_R>ho(Me2-djL02srYs?QsK9*"r\JN5V5nj,8.+4[D#/%@*@%pNm@6Y#$2uhCNtikh#KSrL5bqN2ak[`L=[8g/B7/tEH$WQR,@BOEH%'8Z!/r3bT2.i?d+h^'QE:WV&&O^2cGW/XcggjfCn.c%>UoX@q[kr88$Hp;!m\L><9E;/"WJpq:_'mr>2$<$\asa&Y!9t,6`\fFHe\LXRm_SNIYpuc,XXIk_YsC7%Ud%le<T<TCZL?I.Ju5e%\0'uDSBN/]eh88Y,%EJpe-A(@gL%=c8+r"_P'C)c#MJ[3gJ//Z]nS0dr^@p1cgp>9cTd/=eGRU*rioM%>IiD5DX`gb@ScriJSQ"8%PmWA#*Bqd3k"C]`I4"5)_d``a<u].:Z!cNiZ>+lB26/i@n!?5^a*P75UY-V\cf#^)rTj=Z@eLf$>aB*VBP\>lj)!\JE,k^N.H2f`%J#b]0d'o8kn](r2ctLisiq]jl'e7P%c%Sc`=oB@LFQ7;<T#F;T[J%ZcWN+i95P<<?2#*CSO4fQR@K'!@$QbI\On"h+0YdOdN5oai%]57IH`j8sBJ!]\mm3D#g`F1kNqu8#'1#!k+jBlI\Aik7q-cUCGf_7<?4n2H5#+e4Z3O/GmZRoG*+nQo;&gb(5^@l7o\>/]h_:'=9%ObkW0)UED]CZenZAf/;-MG<&tFERVPc_O1ti`-Y10uMB&Dr^#B<Ul7G<q5d-nh&LeZZjQ`ciX\LXkeFdX4'_nSN_/gH7QRZBD$Ge%>D9Y8c`9#Q<R=,Z6k^R<7O!:3cZ;_@X(XiR_7[GZoIb\7TM\:SeaEYKrL@&E^gA,c=rUQd6(d]77a<;D$_,`U<@epL!KOiTC%L)-%'(-0bloZ<".plqlRss"W?>3^e!MWN^i7<>0d6-U89racA,2r1MipFE5.R3'&B?hRZlBJ^dOo91"P\W(4rM6+6'Hs=(]:WZp$=E+0%:NL>3h=3X/8t-E$;\b+M?;8*e,%u6s"Mj.u33a9,O[DZ9m[ZEbGi0i4XfVHU+$2m[>VhWS,Q]?E\p6>$:J"C=3-LEl\`Z@Jd:Q<$%984&[%XRG<fe6t2*>7^$k,*T7HK9U8(\^'glkD9#`9-S;-%b\4MfS<1Hl++6F%!bUXHiNYiD-PraAiMOLoQ8-!FAib<KO87i`+m=%!+50Q*Y3oW;+Cbb6#83oa$J?NRM/,1Ui)8mW-sCXVHBX3JC_i%L]c'&F6\__R3+qt_PIlBChORTU0In]ma/4%O8"bW\K%RU;(>)b%0_;#DMH*'0Lj:P:N+0V'LcBX[i)1H:cAgr3(3#mFZ&nZ[+iranJj%GV'(ohC._&H4d"./b1A1sQE9'pN.A+@9\&Pi2jYC*9Url-R%_=dNL;_Ff'L%Hi.61]YdKiSd.@o;>M,KeYP,<cc@o5PWeX?r#ROh)^YfSJ>hOtg;`Ll?VaLbL'Ok/n44'F1K/jK;n,U\TQ\3@Z<j%\5Yr:_)ikp7*pA@3/CJS,f41`%cPD/T97#+QUbm!1\/D]1GW9WeUQ3BFD9lB[)c:cM^4X%7a0A_4?p0:SWbtT"$>tmg%Y5`]XXb?%IZT?gmlH:rH2J<cD4.<ZIb,aLE<ko+^b,PSqh>jSc6E4t4:bKOc4^)$T[>6<>qYkS<n"54UuXXqq-rZ%L-NKKK6NPB>$D[^$(5;h%V'Z++b]m@Lc1;2*bfY9`4n)u$&\mH$g&d%e[+d3EKa0rfgUfHWk67Y&*cORfN:Ypk39:DUKNXO`2U5_+E(\PDd7PB+5/"Z`K%Js<%9@e$"1ZgIS@.pg!nseL%emS#jR`D!6q/'UX(j7CX2bl#G[;c00l828ZKSs4EgL8(1U]CuYKIg.MZa%(#3!ITbc.r1_iT0CX6$[r=%FjBU;a:NPAJFPFHMFqKYZ7>X67^)"I@*QNbW:s)"lJ%ADepHBRB;VqV=$)!"[0mkoR$2Zl4T7H[ZGb3>PmQu7-?QQ+@6-E]f0f\*%nnAD2C=d`sO*lrPIXTGU2q^3H7)-`5?>]J73o;bl`R`1uJUZJ')P>n:5lSAX9C'3RS8U_,0\f^gjH&/s@d]`V;Z<2[KAlF2mNcB_%ic\#e4M@#f1JaJjdacR9&<?B<:QN(5*TA0:0DlZpFo=&8)c^N,a$A3GoPo3ebNqaPq5/u0%c9-oBg11><aMqH98Rb9dE5E<>DH8q%k:4o\oqLXg,;e*NU.LE2k6t3]eYt]Ja=OV@8H5?6P_3iR2@hrqRMWL6J,j0tkD>Dp8%=6&Pp_$`;)P[Bs39';jq@BFJJ,O]KBnCA%U=W17W^`+G\p*&Jm2Tm8lY5t,942uE\`Fr0hP>2=Jbt?8_N-Nr*GHmk%>dP#Z2m.Ic)Fa_SP_#uS41M$XRX5<UdLG(_!XR;6j9<F%,no!L?d;khjLcQfi[f,5rqNXI6931cSIF33H(%pII4SgW,Uu'B5RtgBI.[EaHG[$?,AHD.REV<%2!`uXDWAFX8nJ_eM0r`5Q7lIM%G,8EH?e#,?QeQFC?hIGa\X^k[c:bd]Q<p`/[;5F\^(<tf0a/X'R@pLr:->2e'b<QO5l$b[rOF_4[T5![P&Ambd/k2.B+=$$+p2S"%rH"7b$Y;O@*tT3L9.g,oT0l(E3OL+Q.PNCLT"cOqAabS]]@EaE9&%!ZV4'BXBXlsrg1qkd3SN6C[sRGlcK]PTd_=25[^lun;YdJ9%HVmorXM&':>NC`@Ia!Rl4M30ZC).FP2<a?@oX(-W.9h(\kCd5i&.`bK+sYHe%3^dSiHr-DIQm)t2[B>/jo?HSOF/V@:GtehM)7CW%K-kc6<,gR`!`u+h].=fu(=FMLLp\VNH#eF&n`G0&rOeB:Gn&iUJ<P=;IsCr!1Xj;e2[o1B&C)Q24lD!=@BG?"p-Y&CSR]bGP5ai:%)WB<u9s@+=mSRTB3jl),A3b"WeM#(W[C$]1eDWl?/-/0rGFHk,<4m+LRW(NE+C;7lj?s4;6%?SlZND]JY;_XBHE`l)hsP&:ID%fn%lh7K5GkG6?fsdE)X.ZQm4Bj#M2Sd^KkiY[3^AE1/Z#<FD_#7>GDW>,q*RR\^KsM_i;X-%uLZ7Fb43`_<0-eom(mU^?h3MJJ*r@)#%B^o"UqDUF4d5NO)r?k1nQ8e!S\#RZdebHrnD`"r<s')6gH&;=[rN"(-ApqY2>+.LR]H!ecnO0Fn':.j":Q_1J!@LFC/KO#i0H(*L%[liDG[&rZRpXNli^JJ7DF`!BaD:@1Ra#;jt*qWiWK*O$eO9m7:ranc3"@FKLR0$Hf`\g`TRjiSONbPH12cIfK?T^\%Y*m-;V"?_p%8[N^I:<rJMc)r;$2Eff5Y3fd/SLPAOS.2tYcQ4.C11D!O`g3NS`R;uMQE\n!Dr7SSFr?$09s&>MZ`V7@JnM-h2cZjH@$D\25,IF*%(#7T7'V#LKo1g,L3WEX%M-3K-^@e_9Us?-ubD>]M/=`M%c90$!3&i0R@#r!6'oP'#YKqV5h5Mc8<2\uNdil<385IK6;tph=lmP$V%*A1l`%;bVf[`7"_K.F*/SfKGpna![)jgW,RDTft;6jZV]7=ba=?1jHp!UmZV,*_M1:McpB@3^p8FA2`AL`QXB/BeAffI20W`GN?b%E]<u@YIIRrmZ't)_G4_f*OadnR2;fXGA)Cm.C=]N+qOJeZ&4763+,D$[u/.,,Jp>[^1iNS2Hi&*@Zf)W<+^12FsHIl!='CZl\6*>%W&tf>dOm=rr$kqdA2A[E)cJ<Qkftf>W#g1;:3KkOPKa;2Ybjeta2fk:<Y9k7=91UM/t7d7NNdY`XB2>_37+oPg'oL^f^Pk*(.(V\%-kS3mZ3mYJR-'%%2mp>+nk^mP^e;t[e<L\NZLXj%C<T0[&AMOk)9Z[5,YUBm5aGtY`koYN+%8ErE?Gr7+sOq:+bc,CKuo!j@pH."%<ruqalA3ce_f=<pgg<,o/WqTplalA]65`kj-s9tJ%`T\,LL?hHi4ru90,D)Q,si3&Rm_QJ`MLN%3oZ*WQe?%<[b2n^q1Z[Q6!X,$%?dFpI!FHmc4Y<kc`Rf+C79?BGT1d>u:+_CMEFN-GO1c(:?6h$]FlRKLT6NB:r&N5Ipl65>?m/\M3X6G[T@ALD<kdYXA$8YQGZABW%='r2h"4kOhS+"W0<(,5W#,1OZP]dO>h%pT)c!JQ<+fkLWXpA:1n@nTh=Qf7!Q=b;)S:as#F:!:Jjd[E>,b?*9(/<*2duem(lum#E%+pYV=)b*=1g"4t5%Y0O/`*4b,5,Fg]:DZTbf8^9&I(JB@bVLNZ"2T#"GL.a(/Z6r&)"dCRc7oOMC>\IIATirHA^PK1Ou9e50pWis%>i[)F5[eNohLZYb9K:5cMu4u->'*]g^ICeRm*8E$<YmDj]#OTCG#U.;C\)Y#na8NYr."IrF7mDh9?I+]55F`^f3*)8EG#a#rcO6=%+l;T!VZrZ9Usj8,98.il\UPeN#]+(Pch*^tY!W@R4ZGiT^>";ZmrCCt<-`@&OQ1bSkFXP6pIjYgOg[@!Qhdpbqs?MmKX4m.?XBm6%,pCATA7(YYd-!FI1[Wkh<RX1ENq;Eg:Ib/]EiIIB"Rm2joNSlkCi_e?[,fb=_2HQXl/JsGDGIk[c7U1#[U,:YY8L+H>FtFbSNVm&%S=gdFIO_F]-[()Vi;'AMB[mEZTGi'(C*GgW'3#([:PEY8k60?/s&i.!TQYNjq0B#@'=S2[kqn!^fD@cQ.%id@lgKha61n$eRuiip%57.8nT;J0D'e?9I3r5NPo\_S]O38m39_&0$:=&`&[pO$coc*:![JM>^%%s*-K?N(kE]H_65,5D6aa&Q!oScD;7iBsCHq"r:-_t8R%rI=E_i]FF7K>&?R,hi616DCu_kC:j>4nRhp!r\[SV;u(Ur_Z;=i8(_m/F,=N:pm+%BK=&;jQ)X5;ff7?-39cAL5Z+):/MH.6+!.7%gH(,&,ljg`OtDttF1.fV(nqq'Jg%"cP+$Ju2t;60:9ueZ1G+TN;Dl_;&DKO=#S8kk(lFJ-,m9U,;e8s)2Vg&m;XC1u+tG!pBKC$,%cP`Tr;]JJ:!Si[)X@P,7TqY+*L8^80+GO^U*:ehUKf^WGEepXV1eC]2K-W&qINaOsUUL\#%7tOQhglquFc<M!a9$5BMPUqZCs1lN%dK<-.1+/;Q4kDP3f47MeV1h6MJbZ3".M<SHmf:2bS?5A9)ObKq?C7hH2Q!pG1K;ia0FY3\Jq[`+\d1UO<YQF\l+eQD.2%`>)hu<4%+M).<,/h<K6:qP#9TaFLeg9(Z8RMmW!Q7r3<J7;28]EM[+bYTMUm^XKM"Hu=dEn8B%GkD?iIYLNLa6_iVMWqeP3<.eFDsf/,)E4$%Zn<X!A7TD3:.LVMO>.uZ-G`>6Cm@ADFIKM4M5;3V6J\!taR[Ir8E[i9;@c;`&RN&NW^MM^1`F(rR"7^4dK'>fMi]LE3Qj=&[t*0m%8[D\(C?8,V-DHP";MZS3!S%l@*e>FL&e%q'YQGIa#d&s%h:14H/&3-u[1FoHQdAnr6p=Tb=pKW`+];DV%gl6UQDr93*"_3>Wa)84%V[s(:$7R9+0Ng7J>aL;e'%S<6L>!nD=K:>7BGT-r)"NE$0QgM79A)kN=WWB-R6#8iP]4Gm?3_=E=dIDVdRVG*ToZ'?+hEQOKE/8n%NDb[d1k^k1C=4NB0dEAT=g\^54Vb%]D5=0?Ps^AcfTpC]V3&JaP&>Uh)M?*h'0+a>FXa1^`DSH^H\uX/,(p:_H-_$bh+ha@NcL\L%+DCUM3TLV[%+WqaKq-P#=@bXbN[HsAIaG\tUKb<iab<1Db7-i()r]*d84hID6:>+uYfKM;W-B@Q0Ng32[a9P7W469hFCs)5!`<MY%2&HD`Tdhm!'2,#+Cn55W%6''68-X@aQ=t>1!NRP99#p!Z&B,oY[B3mIiBV)Nk^*_MWYeG8JnA!lVG:Sl&:0a&_O$pPjBWOg#fu3Z%SX<-p-JakrMaQDcLBpX(:tm=fdVN/%6B<<uag='`jp3C]mR\4%9Z<*WKA:N[GS#!lTl[t7Ap=f,"9iem0W8_C/Qq-FKoh<>D/G0,%jIC&G\I[5DVC)sBgEVBK0LR;,.SMPLTPPnF![ehW4TI"]0Z6j!jtM)?R_8S4B+G^d)ag<^Tcbr`jb@J)Q74Xa&_fG[!uk_a!m%$#%M<AfNOCb?nU0=ik+KA&6`\o#dc!VG.gRA2*9Z%R@gd5c"QJH&e7$9&>@OVu8(5-5:89Fp2kI,*R[g7eMDHr/M;tEi+15Ai=@1*Wk%bsFl(25=h64/^ecqhg%3&F'K8),$)lg,0mFW#Q!QR7ncQ&5?2:qOReQ9pH8bQ#n5D&la_Rehi@RaEse`C@4ua:T,U>g''b%QSh9A%BTPen=X/`3k_:M+La]k%O`hD#<R\laLcU8Z/Ro5_]*"b8$bYZ<*#UWM4AeL,7dXou!2849`iN!/'NG=eO;nsJVS6';HlreB%;'Tr%-`Jlb9V'(i"D/UYTQ*r<1."T$cq4RQkg[%L\dReifsF:B+c'ioJS-20+?>71UP)U+X@-=R:k[fdUM<33i?<pi.u#I\C3.H8ISV+6%V,0dm2-Q1MqB$iW-F?9hJFkcX2deNKLn\%h'EgS.<(RpKn/fe9MCb&[1mI2(-KYPg+QSWcJGgY.O?&:P7)7!m$k@&^QtiT9LC'48%K4)j9M=a/V];?/9>D=c1BAfR/b:^%hGbJ2TZ'9nkY\df0i"1R39N2CT0uG$^KQO`&`)1lY.1$PXG?l#M\B&s&N_kplo&3L+@"hMG%/0TIl\Nj\O=3V^oWQ#eU&C[:8!7_:@R#$q=TfsCo.P;u^14bfJQ3h*5>8jK^6AnqC*Z?LD.:f-TTL*sbR!LeJj@+Tmb!^&*#d4^=%^h-^!`WHLohp=?5@#/KtM1nbbkkqHKQo,/b1nLD_oIX"LM'PWX7`cfVL'OGV2M[CgClPGNVj%9L9MsUWm,BFMmia5>)_X*<(g1(R%+@OKd%[n]B?&H7&]*mjMZcI8]!ZddrGV1afL:SSVBh\ip!&Z?4&Tp.]f@1LYF5SXTA[)s7].B)Da&XU`*!iXua_MAW!?EaW1f,\>%JETX<!o5PHqO/j9Hu]4O,`V(_7E/:^?k+Io1b17/OO.[W0M*T*O=`#\8DYqf&6DdV1'1->F<in0%A\63Jlk!i;LfmZ`$7AO/Chk`%d;4Z`9uMsEO>LLuiXjNs>;sMf+JH`n1Lse-!2O6YJrqUh[hQ:I2[QUkC.4Ra7PjWX>XGl45:eWkiA*0_OU%UO#)B]j,a<<lVJTOT%#[18;mgY&GNYhuohM<il<n_Es;.9e9=V<h9":*VA'Mg0AQ-s?,<O,./VAMgHcs3Xh9%"0r-q%,gU.09-H;Yg*/u/np//iD^Tm3e0%P%*(<:W?80%dQ5,(Jj*1'UMdc+r4TT'5K@dGsrK*0nNfjMPuCE9[QjE:rSlV6sHu$<NLaMa-'`.(r7K:<^g:&VPBlAb#j0Rg/rl&%Fc6`&R2O"HeY9W4M&F-/+_tI<.Ag3>-?CHaa8dq0eYSE0Al1pcW)fRCY,ECtV8t9S%+MUpc[-.TW+6LW<&05KPq9e.8p3M)p&c:N%=jXnd#Ke]nPbq94)pub56;9>?P7\4;10`,ILn^b]\8">eQ;+iZNB!WQMJE\eb7Vd59Q[Q?@6.Nk;4[&=Qqk)Hg$I//M!qpVMFnbg%g+:tiPVPe$7NDS).3fZF3(GDbG88@<PVNNP8Zc"A&Kg!K?qQgp##iYgKILIB@nIUE:6q2>hZ>6Le%Gb`?'-C4eB0[(W._Emk@?V_%*Nb9$U]r]h9enUP>uf[+)8T;&V-bg[R!1n+<RBPS2@63"#h@*"`6la<9[LraN9Xsd_K;3JX+C\SrKC3I`j<e89[Lt=/=,9Mr>k]R%oWebM-j6_[>^@8gEg#>e#A2p@\dP5MVV>;bCmPl6Tl^1TfJfIWfa:P3=9l><:P9;b*euESSu*19S`ml<?qEYN9%\Wkl-9]'ej,\D%/5/ek"Og>:P>>,nZU.s,\1tpBM=/)4pDnj"W^]k&mQ5qIRVPrD+P_Am_MJ)L6^[`\g/Fu]bhRC\$t,LeFQ1":`-$p^"aG$F+Jru^%b?[FKR;R;t6AS5Hd:Hi;N<#89I3d<fa6Cj=G9Th=o59)"cFOlVZ&'ES47>.fXk#=AHd>Qq%X/&`Xth6I.AbB+$1lt5!:IF>5g49S%eJR<@&niR^1.'*)QZCGb?BKfaM2OP<9cXG/B%am/LTu7L*VQa;ESj7k#74VjdX<2H-5]rlRqP>aW77Cdq`Y9pR511hftJ!4%*@M5%!tiQII5J;r;%322V$LT.53Q9@;@O,R&5+=:OaS;]iVPeYk3Vu$+L3AH+P<#-5TCL5^5iP0q`YoL(9&`YG&'o[Wiio6L+_4#nqL#W%F0e[M>_K!:L0.uGbI;mf(u+b82rOp[gP>Akkb9Y-mgS`uL_./b_a2SV%gT@V+3c-Zja?q0jMn"0'=R:\@'Zr9mS_,PnN[eUTZ(ai%.&H4g[L[-!2@XZHJ4'+?NsHub5!%QZQ%cK'+KE9O"mNH+K'?hB(.pT^L[=mHN$k]:FCZ2ModDc`72Sn93nQkJeI1$*f>0'ph;/lP%Kp=dn2I_jk6$.t9n&1sP&XP?>l=(MlK'=2]qh[bFb=HuKU3f=^0T07j&W7^\,Uk'O%^so14JN4E2r$PfZ:$nc5R`Qgmp_1r+;TYb%M]Q97-!9K##ZQ4m!"1Vk#!IP]+niS25_q]Z6C:'b@GILl@8u!<&?O?3=-CV>k1juL@Fcd94g0M(O:DP.cNF'sr'p$u"As9gUB:X"%<O[Gi0ud0DEKPepW[UeJa6(#?U#run,3D"C:id[m-N71dc3)N)lK9DS4G%70:8J\po,r2\'g$$QlZa5$<0#4KkcH1oq2(L1+OFY)%^s%'HRpf0T"ubYT<%rB"KJ7J=_jEHf@q/W"B*(u"WW435;e96nB*,&6?!\:PAhcU,T%@C>8ms%i2iZ&>p,p,I#/bUE5U7ucfuAX2%mc'F,b(1+N?A("ZT#8'$0>`N.mt+rZ!H9`/_'Z&XA$KB9.:$Ae-Q;A.NDSU=.Mj4>cat;<KilPsBD+IIK45bYq>iuVp&Jo%Z/'(;%[O\(\,j89aI9m?kHMJN55\CD!Z&r$;jU;fPU+X4oe4T-V'SrYSp9Td\fY8)UTeJ#p*=tdES)[%t)[;\H(5EoL(p["pC\E:nlbJrQ%oc5<(3/15KX\"2h\dI1O8-4UL$U50s:UDI#9l^?F6/QWh9m8/oM3#StU6R]4fZEq_o&_u>pMC&R;^1Zo@Q:)All>UL3&%W7ls6mn%"8.fE];$;O0bbM6OJj1S%@f(1N#FJZ7"8o%NWEMfTc7tq`%n8=<m`%m97S0GdIF.I?oeGNfLZk^)%\-LTUD5Q'Nl&^+U-lT%(`=`%5`Ge4Q^EL48Hjod.)HZ#midks->Qp[ZGH!#rA.iV!Q<LPe;&6;d<cMmI'Wti=Bbcf/6Na(Jpg^8'!q9W'D9AP`):2BQ=sY6Nm7]^%UtE%;$(L5``ZYR,igB#PQss9#NiDGu;,^b_@+M0ZN#2a1NC8q-;dFo5VRcb;VRd.'(_)bRWX-uI7N/\a>qg#m"3ec;RMjbfE^Pf+%!f.Kr787oU>#$NR%PUT$%C$U7OCU[T#KA#,G[]8Lnu-TH[K7Qe?Hrm#]'+!g0Z6t%+Q=23SaDOg=CTWLKLX9bWuOC5boF2"'e<FP%KK')N"9F='3&&Vr!CTdT&upb?dQp.V$jSeO60faqE=pjcNdh;nD#$/O6,Q1"KU!;]2T=0_2ag_]3$r-o#]ggb&W^B\*Nn3TXT/Xe%Mus\Pj1lLEAFNW6,%m"7OGJgXZUT[0f/DH]S8Cd5)A0hg_dO$j6kE@Z?ru'n)^7!i.:\ADA)'@(<Kg]f7^\_OMotgQl/E2O<R"@r%V//eI^#tpdW&ma?PD:`XA.t".A1/!4X-uA*6kdJ"`[9](]h"$^K2Y/,7KLFa"i)([hJu'i.0LT_F@-\X0a9@?DC)ZW6OJs1:sa.i%2[g[p!7=L*Qc$6`L<+u8q@13:MBNoU+R?BU#fZiMig\:5H&^%o$4XuTCfS@g*/`*Y>GmpK>&XI/(5!fs68V]@*u-j@"Gd_MiI]Hb%%#gOL]7Mak("d[\L'_tlK@"!7!Ch\r0_I"PU(27lP(iCa2o:!f'FUlkJqC/e"c*hM+i%bB##o-=":8m[6?AGE],]dsm&$J4V$+6e%=H#Q)&DV:5FO.DOp5TDgap83\,f]1#+I9T3[/rakEu20,3/lTR*6.=c&OPh)lscV?:hK1SaAbm@G@5-_Ma?;/?8RLI$h0bIff'!=%>,@,M%Z$aYg+I^WBPM:V]q`Yb]K8!%h.jRm-5;7Kel:&R5nJ^HB^alhB\dOo!0"IHR)QsOgua/9DFHHg2NJ,R2@i2GgQlOEaP[c?%7%8s!\BVp">^Hi$WiI]ik90gR#(lC]@#jeIZ`POa<%b]P`9;7*[;;=aU*`j9'P!s^L0@G32ajnb\'6/7*:)GCgE?]FS&J5"60QP8%6%!;+0K-7(HYiG?baA`GWKQ20"PJrpne"L1(82nsX<N>BX;pBl7Kh+i#g7VE2)H<f3-.J)@u^VsX_StH&480o2Zt__grt>Q[O0;$%0^)KhG!g(MEn``$bY^5)gPU0Y#B,H6#='\]3/DX2_]8(mbfT8!?"J!m!d?J?'T:NS%a!7+g^tY=G8qI_NW=+LUho:uri&!o`8Q^V%F1;>O(mg?q;i%Hc!D[0d_]5IX-,mhCST!jT&GJ<&bT7%!eRTiKrlYbg]9!)ImQpun8M$RIO8u'Q-$1)(;':EW(QAP#5uY#B8:[(?%E>oMj\h6iI(q4+?ph\`S6sDHTLPotpj)%<qYuJOQ/jPqD8/D\Q6OFC9%>iiGakE!I6=QHY\rhZT"J@:#1Q>*ikaX7DH17Cm!iM8W%SCH>G"CeBQdueN9$7)MgOY4*#&MV9ga'r"VUJ9AYr";9=:k=^F71gNS!ctlj!tjgq)!q@b6N>Ni(8sKK3#dt]N:')CU+2%6b]%lJ%P6\<i?)8OZksj`!k<sq-U2q';FHc,[$8B%%#nT[0KP;I+&W"&>je!t]3gMg7BIU07D.+M!6PS:?IthAeNR+HuO91A:oI=Nah3EKP%K!C.R_45pQ1=7>&V("b1R/l1Z4bl&_8d#af"I6$Fm=nFO\@N;]9O/eYh:c=A#!m&@H;,OicgYNB$:nUZU/jY"QS$)Wd:CXo!]UH>%\e,6&75eEHB*+9e*\#kl:"C:.KPX$`+LVk2J1)WC@MtKqbQ,IV`Kg-9`enA*$DgF=!+N5s*O696l`rBV,8)+)@7AO(*9(d&\mTb-%'%_#76;B4"kh_c7&IH??<YRnP,n(m.&NMhD@'h@B.Z<^ZiInis2b[.$6:!FS&AcmB$gMpu3"?(ZT%#iT!Pf#"-gT`K%brbn?k^H1%Or@t@"$eZ@4b2*]*f)8/-*RZmq8F1;/:'@%0LVWH]Z1:kTp;opd7FTn!430KrJrbPRfoUeJi7g?^c;<<QD,BtE;VLl;\$`&"X99G%,06H4D"fB985fUWh)#_<o3'-X1R^d,RU5<A=b&MCL'br*7D-FM+Dd=iFGp66nOFB\QE3u)dHk.)AO'WYmNQiO,i&Gf&W$MXV$`g!%+\Ge0.FeX`[fQ]7I0i;1RN,g&'C%",N?E,-mR"3J'?220i"%H8X#-dp0;Dea$PI=U&kg>[eIBe>W*@/<V2XONR9"3-*'hN1D<$nB%;b1DFPVU?k&0Ro3SZGLR(j>0%b&o7^;@Z#<>l=g++VT!8YqcO,$c5K2(5C2W$A8so`mE+&IA&^sVJSB"Ce5D:@:8"kGE3sO?53Ht%+jNQ=@S(,#Mg.PI_nQg6NatL-;$V7e_"^A1J!Y'V%Ftb'6/MtX9hR5e/dq'^^6bkSY')d`\&7+bm0qS?hqi:hH"oCp7l)`e;+b8s%XlYXBLUgA?+PjphI::F5#c=A@,t[W^8W\k-!DKn`?qH/8^+fPhC.mW0%:>LlY&$FlNp.&fhLuCD#RKpRnTV6,%qd0__YCb+$+0?$%$-W,=$HuSYd"1tRs1>`ng9Dd@Xo!_I&,e86oADo78L7A"g2.d"cp2'mJF07BclT:Ugtn$'(CBg(;s05dO)FV-l^,9W4Y9MD,uUIp%+qsfDk\=pPf7*?82$`jQL)QA=PcXX>G\A#udPg$N?/"(gA'](l9l4jG?i->"&^Z:uq"!=?E<Q"5L>(G&EEq'hd;]:7D57G/9uij_%:jZmYO8-t5%>#'])]d4`FWST=T&3A6gZY]W6BO/1,],eC[Q]a^@*`bic##9?PH!"j"se'P#f*Z^;]>gcIR@si@u'eoT>iT.D$*k4%oq`,<T&3A6gSk))6=sO58D:$;@aY)&`k\2':n-4T::/SXgDH$ZJVQkjKi\A'IR=Q]n67?t)F_p`Y@jih,j9fUUhAMJoK0as'p8-a%R%g0SaL]k1=hiFT>#AEE'NNd!$Ybs=+mjK"F"8I%5uGQ`Z&j1/)tJHUpX2[VHW!Og%kK"jl__VXl-6>d`$`M<q7onjZYmq`S_i.Z%aF$lZTar]N53o)qhs&CfLt!fk'`5g8m\OgBrLMg#MTC3B'Z!Qr,[]hkjPT4HXbc$C71oL:6M@6naSq_O>?O`=$[%X2E>h[,%npLu%lAFrckfp5clmKc:rPVV-ZYmqbNS`0Bb'ojs7.q9eg!@5Yq_rhB.jFjV;.MnrPl7\QZ@AYDdRqZ2;G>aS9OpBQMX96ac)lfg-cM>K%^dRmkY/pU%hV="0ISrkm%npLulAFrckfp5clmKc:rPVV-ZYmqbNS`HJaF6r"fhX/15O535hrr=eM!P@8Oo<3rp9SYZrf%t'6&:6d%A`(Ot0OAdUlj"lC+*C$GDtN0m7.ugRb'meKqcPjhs$gpA7:gsF<7t%uAO#LXm,.$OXbc<K7?RPe;YIG7b5RCW9.MIg8MOd@0Tl=4%/$aZ"2n(!:T+k5t!u'@K\g%#1H?1S\qaiMR5;85uW%50'UGoY+ZC_h0p(L*PcakS&2gTNq,5XZ'A3[>`rN)KoJ"ns3,-i:)7J7Bf%g!@5Yq_rh;V8C3cSWiF/X$=rEfagbe5O+-mhrr=eM!QM.Pl8Nup9SYZrf,daMTYpkW3W$tb'qo9ftYq(>7oO!MB_qSV<hjNPl2Q7%QW@#XP@D[`?m>JF=(M>#Df/!S5:NJr#:?_uF[c"Bo]B1Bp6/t.IUFAs;-.<.7W305A3VN?lmJ+)T64*+DtN0m7.u8-aF7SIqcPjh%s$gpE7:\V2MX2^VZCc8<p2BSJVm*<g?A57<"iPHB;gp/E=PbN<h7Qatd<fS=jVNNJ&VIHMlR9*0[81WJm!5MK-K#XELDCm954p+Q%L(5K6*(\Z*J_]J&Zk<I4Jh`@;A0=`J#4bBG9bb7]I[Le\s*bhU5WOe)RDZO3HYF^Z&bKNH"-Gl;4W20g/N-Fdli6jhENM;dcE,L7%-!1X%lfKm=oNk^X@3iZ+7mJhkW$qgoV=l"DTfFblh>*K#[#Y;rJt;n,p4F4<GlkV=nCgG,RL"BrVj5q-4_FmP);ZG:iNo\(Z\_ri%gu0eF8Fq[KI?We6H.Qppp+^':b[AuOX2=B.[-P$I$/g$C!IS4=n?o_r&UaMoo-FG4k%6H'rWj5:WTNgkfTWZ]*fJ5*i+ZA`N^"*<%decBcGR2saJ&6QAr>I"&%P1f9nD'dP0?T=jO!#ek?ZOu33fck:_;eu*+-Sj4@b:GZ0V4BsGdD?U=_9O0bQJ^9nWh2t7>Fq8C7:O&%g=Tt]n7OaWAO.HUjM5TN5%hs'FV'V1+'ihrlDfZf^kT?:I2b'u7$CEl-rO)p&TPbaB0=I;@i?&d\Jjj0F"7-G\JOdr'b[:#<>:r7%A-f[r8SY;eH0O1jjKq0I5@c):&/$:Z%`snH%88cFUcA21Eh5P&=RHitLVh,16`2=flV[Du]O]H\N%jnsj=>_r?rkeJ7V([p3kh-?%Lg7""`d,!-^(Y(/YKCU\Cqhln2]r9e&L/sPC+a5;T)r6Wd+.q;`dgoaF0V*)j?<Ve9F,!S(bNc>pgd2V"TC2IHP>*cI+!Yo/^i)Z%>E/q3Kqr=cJ2,n%Ib,aM=7K&""@)3`(%2$;iqa.gQMWcQpWBeW9r:tg%q:-=.CLI/dr+Q=AIDdsme>S]Umqp@RL\Cg6:+ls5?9n?%S$Wp#D%@LBOlFT)D&%k?X2%Vf"EG@eiZU\:"d,M+;\:1.`fg=GjIfGON&0XbQuEReZeu73j0?+>Q5+:aE7Hp"JF_;#D(pitd"_\D%F`&r7:36U5A?GfT.DmP@,_K/N6kE!&#gZ%DLo5qFWCOF"),J-cS-:Q^5PF\c7dt0jO)lc*=qEY5TJnD5qNM6Ua_DQ.el+#=OT;*2%#VemR>D"lc].jJMrimdeeb(pY$BojIk!*.1/pMQdf%nhK5B+aYCpU$A5To+f3]up?rOC"q=_$OQX7(#^6Kibg(,uV2]1c`Z%Bb$]%+nSKu'q6FiricCG_!";],e!+;8\&Do%(Lg-95d5PeeCA[$57X&TG$`dV<oU,4+(Pc!BO`p@NG1h3(h";NBG4pJ6eQFhUtIg#%7?0%@_J.L@Bf\:.0gXd(>HSK<f_0%VG_upX2d#:blnuMR%8i#1N^F=DFT$AQn;bIeq"PW7oPiK"^%dS7cL$<DJVY(N65'RA"R^pMlSnY%'J)([rHLb/b&M?lR5VXB\V.1`)DQ0^Z4I/N3b,is(^&+e.CQ$*40BPROl![?-X'eVDf/jM.JO?$0nAcL/<p]-C"^\Dg:\=J7\Ceb%k80>7'60*g>fNS5+CNHW!K16epVj]M3U!\l:O#-7\"o4_CH_M=9Lu_$Qe-:p0ipL\EHF0!kAK$ZUCshL1(::L_EDHf^!?NijEPU?%`9A"Pm&YY\4V-hrcIg3`dK!*>PP\p,;%&F;J?;JNC/j;Gr)'@a8d2NeD45Q/qsC9%"u_K;cP^MRXpkAM3OLIjCEh?W!q4:B'N`K:%ENM2;4@'+unIX!Wck0spHms08k5sXg(EDkgcOP_<+c\do3EIbY4f),Xf'D+5Pde:(IA^,[e9F2aZuTQJPn?sQ<3;*-fuo:SV?o=u%AU'8;e]N.6eG!)rj*aijB<@-)*#"L/Pn=$=]4Yg="B$a#G$::t<0Z]Q4=`R$Zne5tXHQ])qh\l_XaD:?H-sdZiZsF_(<#l_)oi!,%b0Ad<9r.o2XXm"VjhObE$fkJo&YH]64D1eO/0*#9#*uk&[EU`M::]\K:;5k7BQqqI)m((,\'"0eHEij9=m!"TC/^[n8Esa)9IJl"%`S+9=iskTWB:[8%ECG"*!Z)lXl=BPXkd+%(:eI4!nnqdjU6Bd*=.XLh>hIY"-c]Lgk[ZtG-O1DJH"XjR<47T*<nj^=dIZs+Q-A_t%CDE*CL7`$Xa`qj12GqSDdaLT1"))OPah[UUPqASEg@6UlEmBo6$H,na,,p_-':#X9<Up9[VF,$f2QLA1'Hmp`;RT[o,m-0?bYZDX%+D[BE1=cu-E26+G1GS_Q-h6#I20GVg5+eZ<Y7?iqWdKT<NqYKuC$KgXm"l1(*Je!(N]AVZ]o,sE*@W,t`&.ts$X$NF0JTmQGI46!%dpOj(ZVJ!3"Z]sc]oF8arD(oPG"%/%T%GaL',_"$dN3"Ep)jh<ltIC)(sfLgWR%pf<&(fl>b#!oC3JnsfTVrF?rsM#_1%l/0\DMl%@bY1D\A=ch0\Fe@+ndrpK&C'2g?So\<GT^Gb`<W^Mu?NZf@b=_e$tOILX-?;gd$luY#ki6Md<PqYtko_Fs.o**F6`TP$JN\4Ya4p%A)Lh&K/qGG@C%<`LWt9XZeOh?2u6U:MP,BQMSPQff)f4APH`^r6Af6K\+-;_lFnY:q5=_(kN^Sj+[hnCg45FQB<SZ/LY(R%1%O8@%HJNSY\sPH#eGfZYc:=FW1&;&3e-S4!/87TC@M$d9B(cpsFCSV7;rG0;k?qKNnt:[[DhpXo#jQ7BSlnYho:RaFGMcLbA=t.A,i<Vj%o)m_uku))c`PpOjb@/UJgFe;A^^YfBKq6>HQqTn;A7'a4a6S-9ikS[bj)NJOfN,ct]T%<T)!95U]oD=X@R-<YWU_Y[Cfb-rI(,Hp%@:=2K$=/R>nMO]98KcE7J\42oXKC:KJ2-7'0tp(bbh#a)Ueqm4nnG0jC_A2)%\lCQ^@aYDH[e^+qt25CSBEXJ`tmYnLp:Aldu-BX%2,_ZT5qt%;h#qmcZW'&<U,_^1B-<f\j&2429?#V:h[8_-gBs/q]t,<Z_NbK7WFinWX<CM4h>>@s!lA%&e+.=mdZ.5M4:\kT=<*-F%?J6q<gcOh-AmS3u6a9n%f0C0-5aSQ]Z"/(IFtQo[`*B/c)i,SJh]IFn\d:Tg-'f3skdns:aQUN,hB*E>,LiU<U('Sn\SpZ9\>F?N%T/HQD&J=&=l2B+0rPtlK!62s:k0O:JfW>Znb_-neo9#6$")8U6J-m8>,nbd7?>:S2Af0'3+1.L613+jqfK2'+cU.$P/_300TBmA$%p.qMgEVgsm1O"br34!r.l(sb)&dY6nQoY,&E/@f4^_Rtr5ojQtki?VI8HS^`BIn-.AYhdsQBRP>7;Cm)J@r:$gs580e*o5)7tVRj%MgsMCRm#qg+4AQFP/o#Cs6]fA/.1(ZYh]r!.DWs)dXZS`,F,T;lf5epT>V5tP<E1F[:U<DE^;bPqnOn#TFA:Glgei2`YuLoD-pi\%!a(5B*DlBZ5WWmLr;I7$[)?C8djH^j=D3P2EM$EDn?_o'9`UZZ^3g`gMi)I%`<Y@u8lOf$YM)$Q#f/hp`+Or=lm*XfdJ]FJ$K?/C%2G.86\I?bA,P+Um0$k0k]=pt&?nkBfjboFMgAMjJ+f.tHP$mc!@h:Z:n0%qT\3u3YKakTGrEEYm)0Q#tY?!Wt4O:EM0<TBRC"64U%lqXZb&9]M1=eKN<8+"d6EPhIF-2P?$1B[MN/D"0;`kZlU.5oa_6Z1aTf,]r_e(lI8gmo)$V&*6SJ+F0jM2XX>g/Dgh]aJ>e<*:uG%KsmH^HUo]G06ieZMV[o!83?NjHVuEGf;1ii/J7#'_^:h7_$B"[@u,HX#&bK&X,&?f%hH+F>jGoNIX2i8d=iV<dcOHjl)0<=XJ[83%"gE9%#U].!Yj?eG=;2EXIF.d%/EWiSajr:5]-Y"UOKoiZo<Z=8>>H9Aq3?LTZi$<`7VH8GD;u)qQX\$Q[Fcs!(>Pbb$FZ=3icE+a%n-*i84`4]fLtW>,-p.Sss2W_?.H@&$4A5F%0P8YC<.gS*FLXYY[CW+-%V%'?O1F[!K;Zn%(et?l?r+](!-C!CPrUMX9/5$3_TRJa%HhF]T![GBC'T.p1%jp1C4sNk>^n8o]#m_*p`?o7h9N#NHi>VGK4DMNn9_Zt_HKGCh-^eao]/[Qn!R0<LCM!.g6E:7_,\DgjZT+ck%rT$k%C!`,9FeaN'Vifkk=B_E8b<XFge89KCpE0n4Ne@VfA`TN\RZJ2@X]J.\aL-jT?NA8OXG-$*n3lq&6_hlbpD<P2UrsK.>I':`%bur@Q\U\65=0,N:IC!UcZG8Pr27_/A1?)qYa6u9$_Hg=Y91H0rVe\HmeCU;EP9X4+QWR_5O4W:7aj9$MZ%-,Qg[)7,#*"JTXL3L&%nnGF9MABBCjc@<"!1s,jPm0(heW)VIX"N;1XhD=N(s<_cDKDeEAQq5LlTgLm*FXrMR4%X1))LT`G8K0s0O2\AXDZLlU,R.dQVuj=%4,dJgB&091gP>ft(qkdfZ/QZkHpJjp$H:#iU*ISQE;/:qU@/k%-]]"!jKTo6gpR9B9a]BO4lo*KACj^qlrm[Ya4O]#ij:WY@8^:b%[D7Zsa'9`\^*3hFK>u4!V[CCtd>OHkT$X*jS>7.PL$[h5L.U2d`99oHNS_U.dG(A?:GlI`FOi@B1k>*QXek=:?3#&1:7E'Mr#BK!%D\'nQ@Ibm'9O>]^j9>)-MTR<pj6gC5>.nFFP8&qRR)s[gW;g[5U<Di<F_B;2@4TWq3s+7#UTVDnWDD"Qm.h)RHLFAGHkMYXo3"ju%Ljk.s5[,,Yo,E#Ie!#0ZPn-U[\WpP?N[="'30kMsQWE+FQ;EP'<f'C5QDc;7=`3lof-`>>G\\L58M%oFF`T)mH7uD]=H[-R,qp30%e<R;okfln"A1Zc[M$t]'*(e`*OkcnK[#lR>JiSnnaZ-#lN8mBEIY/j)L_hEoOMl/b=Z8ikU\E2/N[-(9:]cic6sU\RNS^j'G$,D[%Fl>gqHudsmGa;b#Fio"4_Ec$qZLCW0O\aQ7.o.a>SOI`in0JnWK9EQ(>\AJ*%JaXapo@[e%YUP;iN[[dEdG]+on+k?NhG75^p=_A%G1,e@IOl55g(JB19[n-"LV#Ea0!>\UNZb#'+#\@j9W(#bl_d1<c;MX,Qogjhq>4j;rFXIZX$qMg^c4@_C2l`Zb>W-J!b6%@+FEd:%ZAch!g5N=%&=\Abh,c2iF%&^Q).>uOAD$0-L6F9RM4qTd6,"/fqF<KI/;SL5&E>*IN_6:i;nl\(OP2Vn:-q*[G_$meRBtOFZ+l[O%*U1\m>dFO?,<ic:Sm"aP/$g2Of(?Hfh@<2tL48&5qeLrMKI"WI)$3ifBf:!R\3VeEE1P$uN9#Rp+5[fC0d<O6g?0d:/6f*<6K$>K%(A8&!U6SmGRWY8]D\'!Fh*pn7_c!U[j68c-4FQ0KKLt%G<o56W@A_]n1D!qC@^+G(NVSjLW0':R^$^]YMM9@jN#:<X-"&8I"/\C$%pR;b0Mt(tqO:M%P]\5\kI^;str]ME+rUtE(\4B06=O[2ZE*?IQM/i>s<G_euXt/#"Am36eI;bHMeY9-scuP?RU,?/9Na:sqk;l'D%eCJbr)RlSTN")F#=t#+<!qA<29h5ZL)Wh\M9'g?5Qrag>A`9$_;g/8q@-@jdaj%QNmF5$UPVu.`Ys=W(UNQ*RgH4^ULLad7ME.dL%MoKFGm-HA*jW"*cAX%)H15GtaQY'N:fKU`o/X5S:-nNHnr)BaBk=K+,_CPFIX9\:mr?4^!dS-FBCkpF&82s5ah5</m_lFA'DQ^B^%)4:G/,(XRJBu4)$InU^VjJO]g@1MZ"LoHNaXd6J\ap>.;'2j%O1'nAQ[B(.P:GGTe&.;9o-$1h(qR'^uL1;?ulmj)=VGcM<lAS\E%ejR+:TI@4/HK?tYX:3l+b!lsqCo\B)L2.l/hi:Ea]PQ^e)2Qi/7pkFW+X1.0)<E29A%+]OiaoA0:K`C)<V*[0lq+96LJ"L*]PTi[%b;WGB!5eE!'IL]KQ>sjI;U+Q%DVYSCIIBO:5"'1pch;X';p:8+"c3Do.@!QLS;&SC:ZR`4kg_e\ZB+$2$8t2'4$F-gcUMkiVbpgZ%KabmP'4QH$AEGA_-P+sDb[i4kiEiB-*6;jG]^Los\:cGc/,P%)rII+gD5SJHL]qG*8''B0LL;XH*&Zb@j$h"cJ=0qK*SEKr82Qs8%MPi_bL$&`^e*S9H(uHoacqK[m])q"8f/E":A_bUB.@GGKeG&'uHcK\2SQd\FI_KE1W1WA#hPu$l_>][>7$c;_n'KMjn,W(Z#Rg`>%W90[-`WS^dJt#pdqoU@3`%oB^hhnd[?]V;X]ec``nbgh#M,Y-R(D84m$Ml#i1>MZ?5`'C,K)".G8aYj.UTs^90uE+4)&rKX[W$!!%HQ5>Q=8m55pb(4ON%2+n9j8,HXP5o`V<^T\b[M&E.><hmIc:cH?4YO@EK!@>o#7bN-LBe"EgVRp6ITlrC)Uh91C\ml[1&1@][ei@%L@qq:<bWF,*W%:?T`]$G7[[Zf?=YOg`Y+tLT,NE&rh@;W(klr-_K`pE*.XE0=iN$[OC>`,YR,mIaGhN)@:3O2I?2aF(RpNcPggPf%-3VbWSgNCr`$3D\0gi#;p'H<s\k`MR0RefaK+Og6lp1"D@3B"j8uZ7b_<H$9!?)5LoX;jcXDkl0&$ZE+@K)p6&Iq2\_CRQF.@/EI%#4K3jD^HW4%-qF9_Pn.9E$jXLU0CfSkipMBKCFK&Q_m%cX)Q^DZ;QH<(hJFZG`c.Q//Zq\Hnu;VruBT43`Ob*@K)tLgT't@%8?+S%qI-O^(;Z2l]r!dqUlKd-2[AT<bLGUj*9<i4@c-s!0a>#k9c2$,h0HL^aL70qk>QZ@fjg.YId!Hq3b*A4O?U1tVPYIPT&$*-.4AtQ%b_iQ22[-&-Yjt%m>bO.:c)E:NFj]qNCr'AGc7<29_\UH_UYdL-YG;!?((B$l2.P6%f$Y>pW)f?hD@6Xm[\/j'"p`.sesa#i[DfGP%.6*t2Kq)$XIR*ZG=HMo?&+_q8_#^Am#<cTfG!Ym;?4B3AakjJJ&;3m>31GY1+Q!+mSVCN@ig-oEL*/0pd&/%ca>'][F0Lg^@$V[b%?m<MP)m-(_3;TG*i5!hRbg?m+&)62"4TjA!*NTp,.s*d12$CtlKcN\bjrN]j!s9,sE%4:<E'gS8-mL\7\uQjm`JK@9@H"&K;1sj2%lp1F6f=Ie!QkDUL^d,gJS4\K[0[%pNLgKI65&5Zp,'I@%@L&cf)g5V&_-mP*VArWEQ>+7OG.!ZFpC>u<5WPQ5=Ap/XLTbJ.'@6cf%!2YVlJ=s33e&)/*D5dPl-&?VBfRIBu$hH#1]s.L1bV8^1fa\/=XtGq.B+J7mWlACR@f-BV*;L'f7mE8WRm!>Kj"Ilm@JoA%0oS=G%29`X:D1SdPh$<T_cb)+4@LEIZ:H"(ar3Fi9oL5`(VT+$U9SVF7cQV&Mki2;)be>J9ltOIIpEMekNe&2B>=1c&1(AmgEY'b=!YM2O%1"=J!X;(8.$c9D;B-QeVgoOfHRDHemhJ@1EMo0rX]n.1*BWWu1GjHmWqG-VdM<a\3PG@"$ae9jHIr_SFY\F3)5cK\BOnB?(CQHYc%+J75/gPhlV3g9_%XmN/5`SSXa4sl5L>A0\<it^O:r..Q/74CV]*=$IETpQD*D6\D<*<dh?0Ica2:MQ`>3Zcre_n-^:e.*sM7J=V*%i@1[)46QeUG1,BN_kV&*D:WC:QE;NDp8U.NAuY(@)dqj:oG*MQ$g^dKLG+[/3UE"Ch+VK(,Omh6IQ>EMJ5$,@ggJZf@_OAI?-(^=%DEb:+EVd1UmGGHgi$*o\.JO&%,Rmg0,Wi5qT9u&l:a4NZB"\1b'Kb`T:p*Qo,DZklb;?=h&Bnbg.SfJ6/MOn@Rg?,t,?&BLVHWgq%9F4h9nXpW<L>;m*_u$;rX<&Su9Vpsq6p`lWj/_O`^l6h!;Q\Z!13@-9kDD[-pX0b\,0X*No`fTm@-?94WPdVCC@<RiX')'pm60h/%ZHmSIceSEXDgXaRB>SKDqc[D9+FG74lPQ`=DbcDrOpkr9"5#j-0C\5m]4&pPcC'9J*Y?&\Rh0eaT<JAm5,6UYm-(m`#H(q'CqbDr%KQbB3Cs58iNoO=c!TXCe_K=mjpjCfLOAbfKQ%T?o=0eLj9<V@MQ=dfuVIE:.h[H14V7e!OQGLA(Yh9:j%g&6c\bgIiL)``%46CT?%m+f4<g']f19FK_3hW?F;oRrb;1BhDHT2BhB"D5<!KEFNa2<-C!W^<>XA'??f9_#2rS1EHRQ,OpT:'a5_qhu#d@!,/-[Q7I9B^\hc%Hd$.XCoN=%g@CVJGbB's.\_q3&]K;j9@[lBS^P*mPd7tdg7n\h?L;;t+kgGPNu'(]-^\s@-on3$^#3Pq._'qphr-CJoDE#tm4%bZ%K%U^0I(+7+]AgVVXPNOQPqS4.$#rE0!\<p"*m/]%qpr31nsob^^(Wut3t[)8SQ^*r.t)I"C]/Eh33#u=DEUtn!j\_R>)6ls6hpf:%)3Zb>0/08n%HRtNDM=d3-cD;=KMhP?Pc/u-p.Y9SVbHtk^ZS16SN9HFTstaAm43R(m7Z:VAPMPb%eG,o[4eH:gf+#hVWcSnPja:8%nsqHa?R+'!pTcY]O,348T?aQnmU`m)HDFU'fGL;=FYEQ"91)</7L0jBQi&FP(#@&)5gYdiHT=n"+>@p+K[a61JPl.[TlQss[Fso%%l<]t*ogmo^IO!-*khb(<`H8tR7<C1#_pDZkF5D`h0FmiW\q1U%XJ/RJm%pQ0R1RtE'1Ue>;6i%4g7IV:l':R@lT#rFLK7+U%Fo5E%Sa0#X[Hac`W]+QI<A/!:0fFgP[FrD$4&k[%`:*nN-3to1PdD7nN*Z\:(\]f5M0YXU;8!6\[*@c??o[5&N8lG.\]5l[,\$XKl<Sd.%=k6UFmcNEa6LQBXoWDZ#GEia4Xu&&dDY@bB?1o/FhP!e$14"S2hVH2B;3jO>U+1rTNU_PmFjdnsN)B9mH5E!]&+?@Z>t'M)<Qt*<%;DPqdmCD)u::]4m^ZQK&B8p@m[(hIG9s+o$$YCT,E@P7C,W^rWl!b-'5F.bh"l^n2;n<#=SL]f$>`rg$F4&WD[n5bW9C"RoqWce[%FVenPOYKb$kZmW<4Jl!^3OOp#oAK""STd"#!0o#M;oDKITlLmI\Gu[ePtO07M9=pJp,8mTcK*\IjeCK<g(Z%2A_LTC$f2DM`W]TA%$oJ0WSC>rinTR1aEYc*+'h-"/Gh=W8fdJUTP%(;.Q',idD/X+Cm+'ImloDPhThJBE;rr%^e+SYsR*bL;PoCAd.[Mr2St^6c>AY%=%X%81F0^"$aE_]2Q_9_=FE#h+1AY,<8r^>j'<VItuW%VWQ3*#5&5&k^LfT\"kB%K4^?+@^hb9:&UNq$OjmkZZ)Y%"8NPn:@+[PlWQ%p1^I2o_[EF;5h^ahF/#\]ks0t],/=;Z`/*UmqYC>-?TJ&NqKae@.@Qlel?6o?,]M'$6`?Zg6sPJm#il)p3PES3LON?Z:_JuH8jM4%oIa7TD,'XT(d+r+L>Km#PcCWe+:LOKMH>q6Gni-c91l=Dl:$%V?:FO]=(Rn>I>uXP/sRoMf$Bd$N*3(-/pMU(@2Jk/HW.nA3M=:0%d(BA0AJ`Ul8<l%d0[mZ[</P?qc=S_nk2g]f75QZ<esh@V2"0bS`H:[Z78tqm_E7K'E,ohp,s_I<@o=&/"U6+WK`^>*%_IT,eYJS3%?DV24=5+[o2g[D]071tbE%'6Ncr@\`l7[jWA)0TF`f,f;j\21=1bWLB<RJI:`:*nN-3to1PdDh)oNhjQ):_jPAY)%^]G5G-jZ<-o%OL`)ZN*jXlpPI8/(LjqC7IT6XcFATc]uro.@:J[]0_DMWVK\::orb_]oPXA:k[!h-Xa6)Ji-=]9H5A$32BFcQe97-Vo^7E8bYup$%[?"P6Tm2-)hG$q]M@@J)Qml@<A=?TSF3U2FEm9Mk1I6W<au"7*eEV&87I_^3L>iC*l?(qfLW@r\:qW0Mh9VppGUpE.q^ID(OeI"7%1W<!Z6d;ai!sYH!`J\'U\^2'E3j+eV*#tU@MrFnIatX^lo@m6W@.3?HeZO-I_s3knGQF&naK%js78Tj+0+"W7j]qLNm;ai@HIq:W%D\uen/Z,h71R0IrYQTLd;n0rW:$&"[FgH@,$-WB*-A4"f/2;lnkSlsF<`7/+Y#<unLnhYWFL,%9l*BL-rJ!L1ktIpHkrefIW[qot%XW,_<>*m]Wb3c?+Q!Xreel=!8-^\s@-on3$^#3Pq9"8ak5<:Ulr2&+!\B'1r5WP9]#6%L/V]]TZ==dc#&;Cet_@S-WW$\a7G/Ah[%?PoQ*"52X-#c(]dPmBUa#(h/VKeelj#R,fE5RATBbMo5nVY8pP[h\Uo8\/Qqlt&X'ipC%;g%'X<ct.Fn[g?cL';t:8&:V$rY-3YS%;Xal*\$81:oEZ"7qf0\&3=o[8mms``1Aroqb59[VJ6H9K@<D:*4]`2r>7bAqh[jQ)'G5uBnrOuQZienZkcL,dQb]G#2[0ANocW'(%hqsuU`/p8l(L5&:d]i(!Z)-s]X^HBM?T.)SEFWBA<qqgo##HVd"C\kTCX]Ki511q`k:VQY:tdGNG?ZHmoPI<+*:+&C:h?f>jg7pE%I*P<8lYdo<PQSpccVhmGh;U<IVd`7\dsQtHIpY"Opqom:]^uW6XLn;3'1([[6$@=u6'?f7D"b$jYLUKc?c\7cM]&8(n<4Tr*E37J%`1lg3+X?32+:'^S]KM$XdP.-RKR*-IC<kN^c5/fqX?sZ;Ml8)$MLE>Bdbu/n#eZ\kE$nbJ)/l874Q_<+baSdOPVEPdSYV,eIJ>W)%L0S&-T4n`tP=W+690gc3Wb\[s)t_ho.toC^!4_^C'!%=28(V1WX^ip"\E+BEY-'L)4SuKgL5ekY>0gr)MSRQ.XR5<I5<T-j=s)WQ%g^iP2\.hh2N;E\mFCSSB`3(tVLu:P$6_:>1*2Ani"<YC00PH`J)sPq_"p\$'Y,5HnR?UC*JU!#:a@OLj;Al>P(p9X$B;=16XkRhj%!7Mlh%M+1'$Z!5)*Ump=o#65ud,gg9+P&nD,a2+RO+V#>9]Ei9Xp;7'nVIN+jORh%qI.KOQLecG@\"O\VrtiU?Kq\\?\Jf[s7X(U%]=NjGgs6k5<hBB1O'rjo\1/'Y]$8\PKg\QS\NN1tGo\k_Vs=Z//N-?Yh&#B#@#u[ufd9<-LZ',Nm9S2fp2e\\&A,o[0<=:.EMV?)%'@4cU0M?>\a?g=Hg,q>7GSRHCbWj[$=4L"2"IkMZP$)ePS^e:cNO7Z0\lq7g5rml;)KG2:i!N06:lJG7M6_A`K&`RV%:%u\D+=:G%B3IR1.6B*T&RXXUW]Uij=V-c+VTG!!aC97Y,3C%[mH1^i/hQs.MX?7qlU:N39ir;T"r8M>-"\TSr.LHY8pPSjRO9O!#X':XKZ;u_%euSLUr&J8/lBi14J_eaj9Y(n"LmIG)PjsDs(Ts"ioJ>dH%ZTGJa0k/jE9O>mdA).Tc]OC5Q9d?Nf_;-I3>!r]lK"dDG1H&\<IO"I%Wg@A7`@Z_5JVTV6"nrcois*KKCK%\'p5q36Hd5SS*rkg+LW=<TJ,;4_rp7D4rSp+)r`t,H/8tRS;'MBBoiP2F/c]faL/,W*+Tr?0%83gJu!0ci#(S?&\*5r>hdMR;4+BFm6!l[_C7kLU+K?#0*%Kj$[)'+o=B"a)Ng'Fh+i)!X#5:$H46un?G1P^7B((8H7<Pr#[)Nj^^%P_Ib,H$>'Y_<JB\Gk0tJkXXI13B5UM])C>5gZd:I3<V'L*it!hfNVRZ=#rNAX=U_dKbX;U+,fsafI?.+:"X(XE<rS0iF`)VD8gRU%*FYm;L!^i*"hAXPoJtV!`I\XYhh^DT_;]g0P@emQ1_<gY:Rr/JU;39U^?bPmkJT.:ieuC%ol&ugHoi_N$Ft%X:Zl7WAAjfpJba<G%juYs0r3pJ?ru2(=J@>bNK!+m=L;[83JtBmjI0`4CY0]k"RKIonWI6FQIsP)"%6G>42M-RH:QcC'(t\IBSpO]0N:3uJpZ(df)<'fZ%LW5a7.htPH)ehk4eFm[t.\=+u&@:]2JR+f5aACDk@RRZ-)06MNaPS(k21$S>S1t6='C(Ph0Vo-]]PC:PqNrEe#="'uk@7o(BR;Vc%=TP*3#CrWZhfHM.*b@80E$g+kFcE9T*tpPY[+Q\_!Bj#dNP&s`[UM`H)875(decBcBBF9TSE3%!VBpQHaOF(TAAPbmSdu_3@_TWg%N.j>!UlOZnNdPk6H23k^@M/g3f,jPK*NT&\bDK88XM+f*g/c%?=D6t+=Z6`@g+-Y5$b"^rRAXLj.dPgln6lcf`?Y.1(>PR)J&oL>%C:l"*OM^MSb]O.8VB6lQF<IN+N9Bq4$F`XXS&9"Z+J'X[=G"_?mN)12HX\(S3A"X`^YY!@GV@]a@5rg@*Y*r*E0J6XE=%eYVfd<8%,R!Mu9/%MrDp9A'.,rLp$5>$l>P%KQYt"Y7?][Ga+j+7%DFLPBK1IM%NhEr:-7lMB9\V=:2$C^:l?@ndYh=#4ZZfqU`>GqkYo!=/%J-:V^7Bo)nc[JU,()EMX8L[%.2EH5FW;r]S^HW?oR7YI]NYeVb>XeNF1P3TifX!Tsk@muBKLBk10f'(*1/.:Y+nentO]RAu4]([I%ateg<dnX2+nJfXV1%T,W'o[mr;mF<sZ#Q`7*8jL3@7Z("-@uif/b44&WB_#AKbfLfV-C+,`:0qrfXtR_jn=&f3YV%<8F,-;L-)tt%?07J]:L]p%&>/`+L`bAB5`)S14M%X9>oLe%$2bKq^2<<&qCUk$nl3in"U!^02WKO%`K@X!D\>IRgCfsm$cN6q]!(ud(n(ABd:i'%%2@F&Uos&j?hgmqIS\<bppgfST@(VK"d-Bs5Uh]t&&%f1g@X6[%%POM,mmjX0Q+7"e"lVF'59frOSZg^(`U'=74NbJa/WOpOD2q^g%4Lq)KncXKg&L+iR@=)&$j+o;L^qi+Eie"Y!>J/T0A%=Pm^W9<_]("J^$l^S8G*T?)k).]$q<ZJ3Oh?k0e+d>8^)[m4I#!fiT?9A/%`Q\uqhnSC"`d+pRH]Ha'(e%"gm6_k44hMIt2S69kHjI/aA7&Y><Tg<af)F^lM`"Nl@_9m=AE)3\+[.OirMkDlO')0N7.R0V[3Z&'%dd5["!o!+ql?(B\MgO&RMa+oV(\*f\+,UP(CVVm&f3AA5`TYs0@X6=.R.X@TK8*jqTE2`DH2bfTK*hQ?8Zs-l'$7IL@_&<aAighC%7sNTO5P@MfE_fVMltK!c\?0&F+tS':^+6LuA)>]PrkI\Pj[?i#nq-Mdq#%XqfJmrIB!3s2)rhOpg;Xs]02T`_,/^WWbX4`\(%\t(%Mjp:.a6<Y@kM52U#Qk%\nN'9Z,<r@S>gYrsV1`HP=tdi2$(u0ugjt]=.,o$tenSU[=I_EXDF70e<I60O=F7H:e>&d<8<A6'\]GNr%(jqX[b7&gD=Nj8/CdpE(h'5E`aO$'ecq#\sNPsW!:r!L!$X*3I)K'9)oXAL:_pUN,oQV$h";6'(."L,;N_$/7kpjU!5aq')WGRBd%!N^PFJmi@=Q3r0,,hoC#'FP(pID/A^T\9W&;#l0'!XMI6J7-ZM\9O9K7_B82!#-@Z!)8_aD,PPT]HA!`>noWo/4s4&7IPXo@ODEb%+BU1uC=b>kq[*Yn^Ocl@,I+U7&f^Pa\W>Nm+gh,+V2MQ:4?T$2!kqNXE_!Gq'H&5f@PU0"H10M/g)%i%Q9rfV?njmUeXgF6U401i%q1/@krHt"T\>1-^0'/45"*kX]OiIY,5F6FT=J#;<3`8NG_%P.S7iGnZ/F0V:gDiF7!jHkOENfRg%n\h(XCM8.@!V3+Up4&\:SO*Z%b8J46'$/.pB&PoR=G4XQ<s%D@Z)NrsA"5'#nGBhf.k;ip*ceCd_AJ&J@`5M8'IW'9@$XA,cB[>PG3ZUnOZZ\pk3#A1b<jn%\WUc2%\st:)1#F.'XqY]JG[X_,6dCse7Z2)Nk=WsI4nN"$J<lc;a*47Cnm%U83*2]L#H8P1`l]6*5>CphP'l_>.@GG8L2Y7&o@khn8CndR%oRsdB%#h`:ILU@F=tmF`J]&/D(W,TgeV-g_EG:^G`9ldqEI1lnYXR6#A(uGIF5(u?HcO!p#"B+9Z)<H3IdHbb5@U0YNV51Gc`ari%:JY*bXdI<(pK6(sK"4%(??g4]R""f4[rl"&qiAuT5eTufYhRY$AMAPuN:.$ZhgTKgq'7\CC3Y1pjo5)7j"DK=r5F0As6!bhp7FQu%qW#o:r:usLIe_lOr:HJNs8J@Wrq6*Y09>#grhoefo@m'UrU'(QnC&J.rnl=WhL>(>cbKLtmsb*.mJ$YO]Di9"W\TJ3nAAW5pV2"O%5=&nfTE~>%AI9_PrivateDataEnd