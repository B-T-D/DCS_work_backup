%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 001x005.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 395 163
%%HiResBoundingBox: 0 0 394.8345 162.0898
%%CropBox: 0 0 394.8345 162.0898
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 5114 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD89FFA8A8FD3FFFA8A8A8FD3CFF7DA87DFFA8FFFFFFA8FF%FFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFF%A8FFFFFFA8FFA8FFA8FD10FF7E7D7DA8FFFFFFA8FFFFFFA8FFA8FFA8FFFF%FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8%FFFFFFA8FD08FF7D7DA8A8A87DA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8%FFA8FD0AFFA87DFF7DA87DA9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8%A8FD07FFA853FFFFFFA8FD3BFF7D7DFD3DFFA87DA8FFFFFFA8FD2FFFA8FD%0AFFA852FFFFFFA8FD31FFA8FD07FFA87DFFFFFFA8FD3BFFA8A8FD34FFA8%FD08FF7D7DFD04FFA8FD2FFFA8FD0AFFA852FFFFFFA8FD39FF7D7DFFFFFF%A8FD3BFF7D7DFD34FFA8FD08FF7D7DFF7D7D7DA8FD24FFA9A8FD09FFA8FD%0AFFA852FF7DA87DFD30FFA8A8FD07FFA87DFF7DA87DFD25FFA8FD15FFA8%7DFFA87D7DFD30FFA8FD08FFA8A8FFFFA8FD26FFA9A8FD09FFA8FD0BFFA8%FFA8FFA8FD31FFA8FD08FF7DFFFFFFA8FD3BFFA8A8FD34FFA8FD08FF7D52%A8FFFFFFA8FD23FFA8FFA8FD09FFA8FD0AFFA852FFFFFFA8FD31FFA8FD07%FFA852FFFFFFA8FD27FFA9FD13FF7D7DFD34FFA8FD08FF7D52FD04FFA8FD%23FFA8FD0BFFA8FD0AFFA852FFFFFFA8FD39FFA87DFFA8A8A8FD27FFA9FD%13FF7D7EFFA8A8A8FD30FFA8FD08FF7D7DA87D7D7DA8FD23FFA9FFFFFFA8%FD07FFA8FD0AFF8452FF537D53FD30FFA8A8FD07FFA852A8A8FFA8FD23FF%A9FD17FFA8597EFFA8A8FD30FFA8FD08FF7D7DFD26FFA9FD05FFA8FD07FF%A8FD0AFFA852FFFFFFA8FD31FFA8FD07FF7D52FFFFFFA8FD23FFA9FD17FF%7D7DFD34FFA8FD08FF7D7DA8FFFFFFA8FD21FFA8FD05FFA8FD07FFA8FD0A%FF7D52FFFFFFA8FD31FFA8FD07FFA87DFFFFFFA8FD29FFA9FD11FF84A8FD%34FFA8FD08FFA8A8FFFFA8A8FD22FFA8FD0DFFA8FD0BFFA8FFA8FFA8FD39%FFA852FF7D7D52FD21FFA9FD07FFA9FD06FFA8FD0AFF7D7DFF7D7D7DA8FD%2FFFA8FD08FF7D7DAF7D7D7EAFFD20FFA9A8FD07FFA8FD05FFA8FD0AFF7D%7DFF7DA87DFD1DFFA8FFA9FFA8FFA9FFA8FFA8A9A8FFA8A9A8FFA8A8A8FD%07FFA97DFD25FFA9FD19FFA87DFD20FFA9FFA9FFA9FFA9FFA9FD0BFFA8FD%08FF7D7DFD25FFA9FD08FFA8FD05FFA8FD0AFFA87DFFFFFFA8FD19FFA8FF%A9FD15FFA8FD07FF7E53FFFFFFA8FD2BFFA8FD0FFF7D7DFD1CFFA9FD17FF%A8FD08FF7D7DA8FFFFFFA8FD13FFA8FFA8FFA8FFA8FFA9FFFFFFA8FD0AFF%A9A8FFA8A9A8FD0AFFA852FFFFFFA8FD15FFA8A9A8FD19FFA8FD07FFA87D%FFFFFFA8FD0FFFA9FFA9FFA9FD07FFA9FFA9FFA9FD0FFFA9FD0BFF84A8FD%10FFAFFFA9FFFFFFA9FFA9FD1BFFA8FD08FF7D52FFA87D7DFD0CFFA8FFA8%FFA8FD0FFFA8FD0FFFA8FD0AFFA852FF7D7D52FFA9FFA8FFA8A9A8FFA8A9%A8FFA9FFA8FFA9FFA8FD25FFA87DFF7DA853FFA9FFA9FFA9FFA9FFA8FFA9%FD24FFA8FD0AFFA87DFFA87D7DA8FD2FFFA8FD08FF7D52A8FFA8A8A8FFA8%FFA8FFA8FD29FFA8FD0AFFA852A8A8FFA8FD31FFA8FD07FFA87DFD3FFF7D%A8FD34FFA8FD08FF7D7DFD34FFA8FD0AFFA87DFFFFFFA8FD31FFA8FD07FF%A852FFFFFFA8FD3BFF7E7DFD34FFA8FD08FF7D7DFD04FFA8FD2FFFA8FD0A%FF7D7DFFFFFFA8FD31FFA8FD06FFA8A8FFFFA8A87DFD3BFF7DFFFFA8A8A8%FD30FFA9FD0BFF845252A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8FF%A8A8A8FFA8FFA8A8A8FFA8A87DFFA8FFA8A8A8FFA8FFA8A8A8FFA8A87DFD%0DFF7D7D27A8A8FFA8FFA8FFA8FF7EA8A8FFA8FFA8FFA8A87DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FD0AFFA8A8%7DA8FD04FF7DFD04FFA87DFFFFFFA87DFD04FF7DA8FFFFFFA87DFD04FF7D%A8FFFFFF7D7DFD04FF52FFFFFFA8A87DFD0CFFFD04A8FD08FFA8A8FD08FF%7DA8FD07FFA87DFD08FF7E7EFD08FF7DA8FD0DFF7DFFFFFFA87DA8FFFFFF%7DA8FFFFFFA87DFD04FF7D84FFFFFF7D7DFD04FF7DFD04FF7D7DFFFFFFA8%7DA8FFFFFF7D7DA8FD0DFFA8A8FD08FF7DA8FD08FF7DA8FD07FFA853FD08%FFA87DFD08FF7D7DFD1EFFA8FD7FFF7D7D7E7DFD04A8847DA87DA87DFD33%FF7D7D7DA8A8A87DA87D847D7D7DA8A8FD30FF7D7D527D7EA87D7D59FD05%7DA8FD32FFA87D7D52A8A87E7DA8FD057DFD34FFA8FFFFFFA8FFFFFFA8FF%AFFD33FFA8FFFFFFA8FFA8FFFFFFA8FDFCFFFD7EFFCAFFCAFD3BFFCAA7FF%CACAFD3CFFA7C9C9CFA7FD3AFFC9CFBCCAC9FD3CFFCACAC9CACAFD3AFFCA%C9C9C3CAFD3CFFC9CAC9CAC3FD3EFFCFFD3DFFCAFFCAFD9DFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T15:13:52+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T15:13:53+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T15:13:53+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>108</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qg5db0aG4NtLf20dy&#xA;skcLQPKiuJJgWiQqTXk4BKjqe2KozFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUNd6nptkyLe&#xA;XcNs0iu8azSJGWWJeUjLyIqEXdvAYqrwzRTRJNC6yQyKHjkQhlZWFQykbEEYquxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxViH5manqWmaPbXljdm1IuBHMa0Xi0bNy+FHZmUpsv2TU1rthCq/mLybaX0O&#xA;oXU19diWVYZDwaJeP1IF41Q+nyRTJ8bcSDy6EDbAqfLptuqhQ89FFBW4nJ28SXqcVaTTIFZz6lwe&#xA;Z5UNxMQNgKL8ew2rirn0yBmQ+pcDgeVBcTAHYijfHuN64qu/R8H883/I+b/mvFVsWmQRxonqXD8A&#xA;F5NcTFjQUqTz64q4aZAJGf1Lj4gF4/WJuI4kmoHPqa74q6TTIHUD1LhaFWqtxMD8JBp9voaUOKrv&#xA;0fB/PN/yPm/5rxVbFpkEcaJ6lw/ABeTXExY0FKk8+uKuGmQCRn9S4+IBeP1ibiOJJqBz6mu+Kuk0&#xA;yB1A9S4WhVqrcTA/CQafb6GlDiq79Hwfzzf8j5v+a8VWaTF6VmY+ckgWacBpXaR6es9AXcljQbCp&#xA;6YqjMVS3zI91H5f1GW1mNvcw28ksUq02aNS4Bqr7NxoaCtOlDQ4qx/y5YyeZPLmk6jeajObi3N1w&#xA;eEoU5l3gDETRMWMSghCw9zXbCqbeW/L1lp2kRWMU1zJFbNJFG0lxKW4xyMiiisqiiqNlAHtgVM/0&#xA;fB/PN/yPm/5rxVa+mQMyH1LgcDyoLiYA7EUb49xvXFV36Pg/nm/5Hzf814q79Hwfzzf8j5v+a8VW&#xA;xaZBHGiepcPwAXk1xMWNBSpPPriq79Hwfzzf8j5v+a8VWnTIDIr+pcfCCvH6xNxPIg1I59RTbFV3&#xA;6Pg/nm/5Hzf814qtl0yCSN09S4TmCvJbiYMKilQefXFV36Pg/nm/5Hzf814q79Hwfzzf8j5v+a8V&#xA;UrS2WDU7rhJKyvDAeEkskighpQSodm412rTrTFUdirA/zcu72z0vTbi2kEAN4kLzhm51lUhY1QRT&#xA;KQ7CpJpSgA+1hCpx5h836ZZfX9PnSUSxRxK7qEKAXnJIm+1WhdSvSpPQEA4qyNHSRFdGDo4DKymo&#xA;IO4IIwK3irsVdirsVdirsVdirsVUxcQm4Nvy/fKgkKb/AGWJAI8d1+j6cNbWqpgV2KoTS5I5LUvG&#xA;wdDNPRlNQf3z9xiqLxVJ/OLXKeVdVktgpnjtZHQuXULxUtz+BJGJUDkFC/ERTatcVSPyp5lSy8p6&#xA;G16Zbya/E6wzRBHDtGZJAKn0a8kXZgtNqmg3wqyDy1qlnqmkR31m/OCd5ZFr9oB5GcBh2NGGBU0x&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVCRSRtqlyisCyQwc1B3FWlIqMVReKsS/MvULOw0W0murZ7pWu1i&#xA;VI7n6oQZIZVb4+rBkLJxArvUdK4Qqa6x5f0GWG8vpdNtXvWUztdNBGZTLHEY0kLleXJU+FWrUDbA&#xA;qcYq7FXYq7FXYq7FXYq7FXYqlq7XX13s07QMTuRHQRAfTNGKfP55Z0r8fikJllaXYqhtP/uH/wCM&#xA;0/8AyefFUTiqX+Yngj8v6m9xGZYEtJ2miEnpFkEbFlElRwqP2q7dcVSjy1p+h635cs7m90uGWouo&#xA;+F2UvXAmmZbges6/EJitXA2PToMVTvSYYYLL0YUWKKOWZY40AVVUTOAABsBiqMxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxVDR/8dKf/jDD/wASlxVE4qwD855LRPLunC8Z1tjqUTytFC1w4WGGaYkIqv09OvLa&#xA;nX2JConVfO07yXsNrbi400xWhgulScF0vUNeJ4cG4KyvWvEDYmtQFWaoxZFYqUJAJRqVBPY0JG3s&#xA;cCt4q7FXYq7FXYq7FXYqp3M3oW0sxHIRIz8eleIrTCBZpVBrNxpn1VCDKkYCP0/eKKq//BiuS4vV&#xA;aERBMs0McyV4SKHWvWjCoyJFFK/AqE0ti1qWZChM09UalR++f+UkfjiqLxVJ/OUoh8oa5KdhHp90&#xA;5NC32YWPQK5P/An5HFWHeV/NMen+VdGs9FhN2EN7b3MUkE0BgktlaXiyKjCJQzKqp1II413OFWae&#xA;V7+TUNFhvHge3adpJDG+xBdyx2+0KE0+IA+2BU1xV2KuxV2KuxV2KuxV2KuxV2KuxVCRMTqlyChA&#xA;WGCjGlGq0vShr9+KovFWAfnA87aXpltHMsKNdiZz9ajs3PoqSqhpQUcFmAK/a6MNlOEKzS+MbaRc&#xA;NGKRm3coKcfh4Gm21MCovFXYq7FXYq7FXYq7FXYqhr34jbw/78lUk9wIv3tfvQD6clHqVRORVDWP&#xA;wCaD/fMrAf6r0kUAdgofj9GSl3qiciqG0/8AuH/4zT/8nnxVE4qkvnWeaHynqrwlVla2eNC8otxW&#xA;QcNpiCsZ+LZ2+FTudq4qhfy5Cr5PsFDiTj6gMgkSYNSVqESRgIRxpQD7P2e2JVO9P/uH/wCM0/8A&#xA;yefFUTirsVdirsVdirsVdirsVdirsVdiqGj/AOOlP/xhh/4lLiqJxViP5mahrVjo9jLpdxNaFr6N&#xA;b25giimKWwikZyyyyQjjVVFQ1R8q4qhvNFp58lvdQfTrj6vpYe3ZVdoWVoEic3NKozqGYqCnU0qH&#xA;FaYVZsgcIochnAHJlHEE9yASaffgVvFXYq7FXYq7FXYq7FUMPj1Fj2gi41HjK1SD8hGv35LoqJyK&#xA;oZv3eoq37M8fAk/zRHkoHzDsfoyXRUTkVQmliQWpEhDP609So4j++fsS368VReKpd5kmvYPLuqT2&#xA;PP67FZzva+mFZ/VWJinEOQpblSnI0xVidvL521Ly/o0+l3cjXLJffpC5lEEX70B0ijeEmcArL0ZX&#xA;PHj8SmtAVZP5Vj1SPRIU1SVZb4NIJ3QAfGJG5VIoCeVdwqj2GBU2xV2KuxV2KuxV2Kod9QtVcoC0&#xA;jKeLekjyhSOoYoGofY5LhK21+kIP5Jv+RE3/ADRjwlbd+kITssczMei+jKtT4VZVUfSaY8K2763P&#xA;/wAsU33w/wDVTHhHervrc/8AyxTffD/1Ux4R3qpWkk76ldNJGYl9KEIjBeVOUlalXcHf5YCFR2BW&#xA;D/m0ly2jad6BHI3yoUkVmiIeCUEvxSQig2U1ADEb8uOEKy/U/wDjm3f/ABhk/wCInAqJxV2KuxVb&#xA;LLFEheV1jQdWYhRv7nCBaqA1KzbeNmmX+eFHlX/gkDDDwFbd9ddt47WaRf5qKn4SMjfhjw+au+uS&#xA;jd7SZV7t+7ag+SOzH6Bjw+au/SNqN29RF7u8UiKPmzKAPpx4Ctu08iSKS4BqLiRnUj7JUfAjL7Mi&#xA;KcZdyhE5FVC7ilkRGhp60Tq8fIkD+VgSA3VGI6ZKJVb9Zu12e0Zm8YnRl+9zGfwxod6taYxa1LFS&#xA;hMsxKNSo/fPsaEj7jgKorAqVebQ58r6v6bMriznIKLzbaNjQKFcmvSgFfDfFUJ5BWZfKVh6/piYi&#xA;VpPRUpHVpnJ4qQvEb9KUHbbEqm+n/wBw/wDxmn/5PPiqJxV2KqEl/YxuUkuYkdeqs6gj6CckInuW&#xA;1v6U0z/lrh3/AOLE/rjwHuW3fXfV2tE9f/iyvGL/AIOh5f7EH3pjw96uFm8u93KZfGJfgi/4GpLf&#xA;7IkY8VclRCqqKEQBVUUVRsAB0AGRVvFXYq7FXYqho/8AjpT/APGGH/iUuKonFWA/nNCbjQNMgVLa&#xA;SSTU4vSF5cPaRc0gndf3yCg3XcMQGWoB5EYhUV5r8iprC3WoXMyW0rJazvHCnIiWxWYgiUleZP1h&#xA;l5FNgFoARhVlSQ6mqKpuYnIABdoTUkdzSQDf2GGwrfpaidjcRAHqVhYH6KyMPwxsdyuNlI20l3O6&#xA;d0qiV/2UaIw+g48XkhfFZWkTiRIl9Uf7tb4pN/F2qx+/EyJSrZFXYq7FXYq7FXYq7FXYqhNLUral&#xA;WcuRNPV2pU/vn/lAH4Yqi8VSbzowXydrrERsBp12eM3P0zSB9n4Avx8eIrTpirF/LvlSTWPJekW9&#xA;59VgW2+uLG1tKb4SQ3Uc1uR9ZBiNSsxL8TuwHTphVkPlTy3b6XocGnm5uLlLZpIg8kjKCEkZacIy&#xA;iAbdKYeIoTf9Gab/AMskP/Itf6Y8Z70079F6ZWv1SGv/ABjT+mPGe9aV44440CRqEReiqAAPoGRJ&#xA;VdirsVdirsVdirsVdirsVQkSkapckuSGhgoppRaNL0oK/fiqLxViP5gWGraodM03TRJFMJWvWvY4&#xA;ophGsHGJk/evCFZ1uWoyty+EilCaKo/zJ5r0DTba8tr66+rzBUho6SAF7lJDFRuPEhvRf4gaDiQT&#xA;iqf4q0roxYKwJQ8XANSDQGh8NiDirmdFKhmALnigJoSaE0HjsCcVbxVpHSRFdGDo4DKymoIO4IIx&#xA;VwdC5QMC6gMy13AaoBI96HFXO6IKuwUEhQSaCrGgH0k0xVvFWkdJEV0YOjgMrKagg7ggjFXB0LlA&#xA;wLqAzLXcBqgEj3ocVc7ogq7BQSFBJoKsaAfSTTFW8VQumsrW7lSGHr3AqN9xO4I+g4qisVSrzSks&#xA;vl6+toommku4/qiqqJIR9ZIh58JCqME9TkVYgEDcjFUFpN7H5e8v2FvrtwyXPCdnleIgfule4df3&#xA;RmQcYlJUc6kLt3GKpj5f1Cz1HSo76ylE1rcPNJDKtQGUzPQ0ND9+KpjirTOilQzAFzxQE0JNCaDx&#xA;2BOKt4q7FWkdJEV0YOjgMrKagg7ggjFW8VaLoHCFgHYFlWu5C0BIHtUYq3irTukaM7sERAWZmNAA&#xA;NySTireKuxVCxsv6UuFqOQggJXuAXlofwxVFYq7FUi1ryZ5f1eSa4vrVrm4lCVV7i4jQmFXEYoj0&#xA;UfvXB4r+03WpxVX0PQobTRbC0vYLeW8t7eKK4lVAweRECswJVT8RFemKobTPLfoa3q13cQwGzuzB&#xA;9TgUtJx9NCJHZHXjGzkgUT4aKO9SVXa/5ca8fTjp8MEJtryGe4kJMf7lHHqoERGWT1I+S0YgDriq&#xA;ZXOk2j28qW8EEU7IwilaFXCOR8LFfh5AHelRXFUj0C30XSLG30PVr2zudXtYi8zyCNJHjLsUcq2/&#xA;2Bv8sKr7fRLeHzNd6lKbX9G3EUcEMLScv3gIC8Yiqxx78+7Fq9qUxVQ84aZa3dnax6fdWVk8Nwl1&#xA;dCRhH6lvGrEryj+MDmUbalaUqK4qnqx+X248VtDz48KCM151CU8eVDTxwKg/Lvle00zTRazxpPJ6&#xA;srhpC03CN5GaOMPNyciOPiu/hXFUL/ha6/xr+luUH6E+oC2+oU/3eJS/qcOHH7Jpy5V7UxVd5x8r&#xA;3GqaFLZ6MYLDUGZGiuSvELxYGp4LyNOtBSvQmmKpxNpOnPA6fVISWUrsoj3IpsyjkvzG4xVIvJ/l&#xA;3zBpExF/dRPZi1giSCF3ZfWSNBK/BkjVOUiu5Ybtz+L7IqqynFXYql+seX9K1lI49RiaaOL1OEYl&#xA;ljX97G0T8ljZQ1Y3Zfi7E+OKoHy/5U0/So7u2SygS0e4MtolWnYIyIDzaVeXIurN1PXriqa/ozTf&#xA;+WSH/kWv9MVSrWfLourrTJLOGCKO2uRLdMSyMYgCCqoqlH5dDz2pWlGoyqpr+jNN/wCWSH/kWv8A&#xA;TFUJfv5a0/0fr4tLX6w/pQGYRoGeleIJA3xVLvKWi2tjoq2981rcypLMysr/AFgJEZGZI/WlCu/p&#xA;p8NWHbFU0ZPLyxCVltFiNKSERBTyFRv03GKpNPp1jeeYLDUrS+shpdmLm3u7FUSsktCGLODuY2jH&#xA;wkbUJ+RVkCafpTorpbQMjAFWCIQQdwQQMCofVNEs7nTLu3htYVmmhkjjYBYiGZCAfUCScNz9riae&#xA;BxVS0PQorTR7O2voIJbyGJUnkAMnJgNzzkHNv9ZuuKo79Gab/wAskP8AyLX+mKpTY6Be2nm671SN&#xA;4k0u5tUhW2jqjCVGBBKKAhp8fxklt6CgHxKp/irsVdirsVdirsVdirHdf8h6Brs802oiZzMqKUSV&#xA;kRWjDKrhRsW4SMvxVFCRTFVKz/Lvy7bWD2XpvJC91Le/ERUSSwvB4fspISP8r4uuNqhYvyo8oRsz&#xA;elK7NHHCGeTkVjiblGFJG3HoPbDaojSfy18q6VqUGo2kDi5gkMyF35D1WjeNnoRtVZDstBXoMFqy&#xA;nFXYq7FXYq7FXYq7FXYq7FXYq7FXYqlmt+XtO1pYUvvUMcJclI3KB1kQxujldyrKxBFcVSbSvyz8&#xA;taZNcvAsrLdWstnIsj8/3c7l5TyO5Jr1Pv4nDarv+VaeVvUd2ikdXnW59Jn5IJUUpyVSNqqeJ9sb&#xA;VBn8nfJJUgwSmqSxVMnSOavNAKcaVaoNK+9NsbVmqqqqFUAKBQAbAAYFbxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KpFruvXWmSXUsVu12ttBC6WqbGR55HU/EFcjiIttt603NMxsuYwJ2ugPt/sdhpdLHKI&#xA;gnh4pHfuoD3c7+xHaTfPd/WiSTHHMBCWAVuEkMcwBA/lMpX6PpyzFPiv8dAXH1GLg4e8jf4Ej9CP&#xA;y1x3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqluuXF1HHBHbSGJ53kUyqFZhwgkkFAwYVLIO3SuU5&#xA;pEAV+Ni5WlhEkmQuq/3QH6UPpOq3d3cWnqrwE9vKzoCGUtC0Q5o3FG39YhgR1G3iY4shkRfd91fr&#xA;bNRgjASrpIfbxbH5bfgA6zIcF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqbfV/rKV4/WeDcP5uFV&#xA;5U9q8cjtfmzHFw/0b/H6Wrb6twb6vx4c35cKU9TmfUrTvzrXGNdFnxX6u4fLp9irkmDsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVU7j6vxT1+NOa8OX89fhp71yMq6s4cXTu+xw+r/WWpx+s8By/m4VNP&#xA;orXHa/NfVw/0b+1UyTB2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:C99C53CE2A2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:C99C53CE2A2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C99C53CE2A2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T15:13:53+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -162.09 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 162.09 li
394.834 162.09 li
394.834 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 145.8 mo
194.4 145.8 li
194.4 0 li
0 0 li
0 145.8 li
cp
clp
0 145.8 mo
194.4 145.8 li
194.4 0 li
0 0 li
0 145.8 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
24.2998 123.93 mo
174.96 123.93 li
174.96 14.5801 li
24.2998 14.5801 li
24.2998 123.93 li
cp
f
gsave
24.2998 123.93 mo
174.96 123.93 li
174.96 14.5801 li
24.2998 14.5801 li
24.2998 123.93 li
cp
clp
.3375 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.2998 104.247 mo
41.04 104.247 li
57.7798 102.061 li
74.52 97.6865 li
91.2598 95.499 li
108 95.499 li
124.74 97.6865 li
141.48 34.2632 li
158.22 93.3125 li
174.96 95.499 li
.884 .769 0 0 cmyk
@
grestore
24.2998 123.93 mo
24.2998 122.58 li
24.2998 123.93 li
cp
0 0 0 1 cmyk
f
.16875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.2998 123.93 mo
24.2998 122.58 li
@
24.2998 15.9302 mo
24.2998 14.5801 li
24.2998 15.9302 li
cp
f
24.2998 14.5801 mo
24.2998 15.9302 li
@
23.6489 130.083 mo
24.7754 130.083 li
24.7754 126.192 li
23.5508 126.437 li
23.5508 125.808 li
24.7686 125.562 li
25.4614 125.562 li
25.4614 130.083 li
26.5884 130.083 li
26.5884 130.665 li
23.6489 130.665 li
23.6489 130.083 li
cp
f
41.04 123.93 mo
41.04 122.58 li
41.04 123.93 li
cp
f
41.04 123.93 mo
41.04 122.58 li
@
41.04 15.9302 mo
41.04 14.5801 li
41.04 15.9302 li
cp
f
41.04 14.5801 mo
41.04 15.9302 li
@
gsave
0 145.8 mo
194.4 145.8 li
194.4 0 li
0 0 li
0 145.8 li
cp
clp
40.7622 130.083 mo
43.1694 130.083 li
43.1694 130.665 li
39.9292 130.665 li
39.9292 130.083 li
40.188 129.817 40.5449 129.454 41 128.991 cv
41.4478 128.536 41.7349 128.243 41.8535 128.11 cv
42.0776 127.864 42.2314 127.655 42.3154 127.479 cv
42.3999 127.312 42.4487 127.138 42.4487 126.969 cv
42.4487 126.703 42.3506 126.479 42.1616 126.311 cv
41.9727 126.143 41.7275 126.052 41.4199 126.052 cv
41.2026 126.052 40.9722 126.094 40.7339 126.165 cv
40.4961 126.241 40.2368 126.353 39.9644 126.507 cv
39.9644 125.808 li
40.2441 125.695 40.5029 125.611 40.7407 125.555 cv
40.979 125.499 41.2026 125.471 41.4063 125.471 cv
41.9307 125.471 42.3506 125.604 42.6655 125.871 cv
42.9805 126.137 43.1416 126.486 43.1416 126.927 cv
43.1416 127.138 43.0996 127.34 43.0225 127.522 cv
42.9453 127.711 42.8057 127.935 42.5957 128.187 cv
42.5396 128.257 42.3579 128.446 42.0498 128.761 cv
41.7417 129.075 41.3149 129.517 40.7622 130.083 cv
f
57.7798 123.93 mo
57.7798 122.58 li
f
57.7798 123.93 mo
57.7798 122.58 li
@
57.7798 14.5801 mo
57.7798 15.9302 li
f
57.7798 14.5801 mo
57.7798 15.9302 li
@
58.939 127.914 mo
59.2681 127.983 59.5269 128.131 59.709 128.354 cv
59.8906 128.579 59.9888 128.858 59.9888 129.181 cv
59.9888 129.685 59.814 130.076 59.4707 130.349 cv
59.1211 130.622 58.6313 130.755 57.9941 130.755 cv
57.7773 130.755 57.5537 130.733 57.3296 130.692 cv
57.1055 130.657 56.8672 130.594 56.6294 130.511 cv
56.6294 129.845 li
56.8184 129.958 57.0283 130.042 57.2593 130.098 cv
57.4834 130.153 57.7212 130.182 57.9731 130.182 cv
58.4072 130.182 58.7363 130.098 58.9604 129.93 cv
59.1841 129.762 59.3032 129.51 59.3032 129.181 cv
59.3032 128.887 59.1982 128.649 58.9883 128.481 cv
58.7778 128.313 58.4839 128.222 58.1064 128.222 cv
57.5112 128.222 li
57.5112 127.655 li
58.1343 127.655 li
58.4702 127.655 58.729 127.592 58.9111 127.452 cv
59.0933 127.319 59.1841 127.123 59.1841 126.864 cv
59.1841 126.604 59.0859 126.402 58.9038 126.262 cv
58.7148 126.122 58.4492 126.052 58.1064 126.052 cv
57.9175 126.052 57.7144 126.073 57.4976 126.115 cv
57.2803 126.157 57.0425 126.22 56.7832 126.304 cv
56.7832 125.688 li
57.0425 125.618 57.2871 125.562 57.5186 125.527 cv
57.7422 125.492 57.959 125.471 58.1689 125.471 cv
58.687 125.471 59.1001 125.59 59.4082 125.828 cv
59.7158 126.066 59.8696 126.388 59.8696 126.794 cv
59.8696 127.074 59.7856 127.312 59.625 127.508 cv
59.4639 127.704 59.2329 127.844 58.939 127.914 cv
f
74.52 123.93 mo
74.52 122.58 li
f
74.52 123.93 mo
74.52 122.58 li
@
74.52 14.5801 mo
74.52 15.9302 li
f
74.52 14.5801 mo
74.52 15.9302 li
@
75.3066 126.165 mo
73.564 128.886 li
75.3066 128.886 li
75.3066 126.165 li
75.1245 125.563 mo
75.9922 125.563 li
75.9922 128.886 li
76.7197 128.886 li
76.7197 129.461 li
75.9922 129.461 li
75.9922 130.664 li
75.3066 130.664 li
75.3066 129.461 li
73.0039 129.461 li
73.0039 128.796 li
75.1245 125.563 li
cp
f
91.2598 123.93 mo
91.2598 122.58 li
f
91.2598 123.93 mo
91.2598 122.58 li
@
91.2598 14.5801 mo
91.2598 15.9302 li
f
91.2598 14.5801 mo
91.2598 15.9302 li
@
90.3652 125.563 mo
93.0732 125.563 li
93.0732 126.144 li
90.9951 126.144 li
90.9951 127.396 li
91.0928 127.361 91.1978 127.333 91.2959 127.319 cv
91.394 127.306 91.499 127.291 91.5967 127.291 cv
92.1636 127.291 92.6118 127.452 92.9473 127.76 cv
93.2837 128.075 93.4517 128.495 93.4517 129.026 cv
93.4517 129.579 93.2764 130.007 92.9336 130.308 cv
92.5908 130.608 92.1079 130.755 91.4917 130.755 cv
91.2749 130.755 91.0581 130.733 90.834 130.706 cv
90.6104 130.671 90.3862 130.622 90.1479 130.546 cv
90.1479 129.853 li
90.3511 129.964 90.561 130.048 90.7852 130.104 cv
91.002 130.16 91.2329 130.182 91.478 130.182 cv
91.8696 130.182 92.1846 130.083 92.416 129.873 cv
92.6396 129.663 92.7588 129.384 92.7588 129.026 cv
92.7588 128.677 92.6396 128.396 92.416 128.187 cv
92.1846 127.977 91.8696 127.872 91.478 127.872 cv
91.2959 127.872 91.1069 127.893 90.9253 127.935 cv
90.7432 127.977 90.5542 128.04 90.3652 128.124 cv
90.3652 125.563 li
f
108 123.93 mo
108 122.58 li
f
108 123.93 mo
108 122.58 li
@
108 14.5801 mo
108 15.9302 li
f
108 14.5801 mo
108 15.9302 li
@
108.548 127.837 mo
108.24 127.837 107.995 127.948 107.813 128.159 cv
107.631 128.368 107.54 128.663 107.54 129.026 cv
107.54 129.397 107.631 129.691 107.813 129.901 cv
107.995 130.111 108.24 130.216 108.548 130.216 cv
108.856 130.216 109.101 130.111 109.283 129.901 cv
109.465 129.691 109.556 129.397 109.556 129.026 cv
109.556 128.663 109.465 128.368 109.283 128.159 cv
109.101 127.948 108.856 127.837 108.548 127.837 cv
109.919 125.674 mo
109.919 126.304 li
109.745 126.22 109.57 126.157 109.395 126.115 cv
109.213 126.073 109.038 126.052 108.87 126.052 cv
108.408 126.052 108.058 126.206 107.82 126.514 cv
107.583 126.822 107.442 127.291 107.415 127.907 cv
107.547 127.711 107.715 127.558 107.918 127.452 cv
108.121 127.347 108.345 127.291 108.59 127.291 cv
109.101 127.291 109.507 127.452 109.801 127.76 cv
110.095 128.067 110.249 128.495 110.249 129.026 cv
110.249 129.552 110.088 129.972 109.78 130.286 cv
109.472 130.601 109.059 130.755 108.548 130.755 cv
107.96 130.755 107.505 130.531 107.197 130.083 cv
106.882 129.636 106.728 128.978 106.728 128.116 cv
106.728 127.312 106.917 126.668 107.303 126.192 cv
107.68 125.717 108.198 125.471 108.842 125.471 cv
109.01 125.471 109.185 125.493 109.367 125.521 cv
109.542 125.555 109.724 125.604 109.919 125.674 cv
f
124.74 123.93 mo
124.74 122.58 li
f
124.74 123.93 mo
124.74 122.58 li
@
124.74 14.5801 mo
124.74 15.9302 li
f
124.74 14.5801 mo
124.74 15.9302 li
@
123.671 125.563 mo
126.954 125.563 li
126.954 125.856 li
125.099 130.664 li
124.378 130.664 li
126.121 126.144 li
123.671 126.144 li
123.671 125.563 li
cp
f
141.48 123.93 mo
141.48 122.58 li
f
141.48 123.93 mo
141.48 122.58 li
@
141.48 14.5801 mo
141.48 15.9302 li
f
141.48 14.5801 mo
141.48 15.9302 li
@
141.955 128.243 mo
141.625 128.243 141.367 128.334 141.178 128.509 cv
140.989 128.685 140.898 128.922 140.898 129.229 cv
140.898 129.538 140.989 129.782 141.178 129.957 cv
141.367 130.132 141.625 130.216 141.955 130.216 cv
142.276 130.216 142.536 130.132 142.725 129.95 cv
142.914 129.775 143.011 129.538 143.011 129.229 cv
143.011 128.922 142.914 128.685 142.731 128.509 cv
142.542 128.334 142.284 128.243 141.955 128.243 cv
141.262 127.948 mo
140.968 127.879 140.737 127.739 140.569 127.536 cv
140.401 127.333 140.324 127.088 140.324 126.794 cv
140.324 126.388 140.464 126.066 140.758 125.828 cv
141.045 125.59 141.444 125.471 141.955 125.471 cv
142.458 125.471 142.857 125.59 143.151 125.828 cv
143.438 126.066 143.585 126.388 143.585 126.794 cv
143.585 127.088 143.501 127.333 143.333 127.536 cv
143.166 127.739 142.941 127.879 142.647 127.948 cv
142.976 128.026 143.235 128.18 143.424 128.403 cv
143.606 128.628 143.705 128.907 143.705 129.229 cv
143.705 129.727 143.55 130.104 143.249 130.363 cv
142.941 130.63 142.515 130.755 141.955 130.755 cv
141.388 130.755 140.954 130.63 140.653 130.363 cv
140.352 130.104 140.205 129.727 140.205 129.229 cv
140.205 128.907 140.296 128.628 140.485 128.403 cv
140.667 128.18 140.926 128.026 141.262 127.948 cv
141.01 126.857 mo
141.01 127.123 141.087 127.333 141.255 127.479 cv
141.423 127.627 141.653 127.697 141.955 127.697 cv
142.249 127.697 142.479 127.627 142.647 127.479 cv
142.815 127.333 142.899 127.123 142.899 126.857 cv
142.899 126.591 142.815 126.388 142.647 126.241 cv
142.479 126.094 142.249 126.018 141.955 126.018 cv
141.653 126.018 141.423 126.094 141.255 126.241 cv
141.087 126.388 141.01 126.591 141.01 126.857 cv
f
158.22 123.93 mo
158.22 122.58 li
f
158.22 123.93 mo
158.22 122.58 li
@
158.22 14.5801 mo
158.22 15.9302 li
f
158.22 14.5801 mo
158.22 15.9302 li
@
157.229 130.56 mo
157.229 129.929 li
157.396 130.014 157.571 130.076 157.753 130.118 cv
157.928 130.16 158.103 130.182 158.278 130.182 cv
158.726 130.182 159.076 130.034 159.314 129.726 cv
159.552 129.419 159.692 128.956 159.734 128.327 cv
159.594 128.522 159.426 128.677 159.23 128.782 cv
159.027 128.887 158.803 128.936 158.558 128.936 cv
158.04 128.936 157.634 128.782 157.34 128.474 cv
157.046 128.165 156.899 127.745 156.899 127.207 cv
156.899 126.688 157.053 126.269 157.361 125.947 cv
157.669 125.632 158.082 125.471 158.6 125.471 cv
159.188 125.471 159.643 125.702 159.951 126.15 cv
160.259 126.604 160.419 127.263 160.419 128.117 cv
160.419 128.929 160.224 129.565 159.846 130.042 cv
159.46 130.518 158.95 130.755 158.306 130.755 cv
158.131 130.755 157.956 130.734 157.781 130.706 cv
157.599 130.679 157.417 130.63 157.229 130.56 cv
158.6 128.397 mo
158.908 128.397 159.153 128.292 159.335 128.082 cv
159.517 127.872 159.608 127.578 159.608 127.207 cv
159.608 126.843 159.517 126.549 159.335 126.339 cv
159.153 126.129 158.908 126.018 158.6 126.018 cv
158.292 126.018 158.047 126.129 157.865 126.339 cv
157.684 126.549 157.592 126.843 157.592 127.207 cv
157.592 127.578 157.684 127.872 157.865 128.082 cv
158.047 128.292 158.292 128.397 158.6 128.397 cv
f
174.96 123.93 mo
174.96 122.58 li
f
174.96 123.93 mo
174.96 122.58 li
@
174.96 14.5801 mo
174.96 15.9302 li
f
174.96 14.5801 mo
174.96 15.9302 li
@
171.989 130.083 mo
173.115 130.083 li
173.115 126.192 li
171.891 126.437 li
171.891 125.808 li
173.108 125.562 li
173.801 125.562 li
173.801 130.083 li
174.928 130.083 li
174.928 130.665 li
171.989 130.665 li
171.989 130.083 li
cp
f
177.797 126.018 mo
177.44 126.018 177.174 126.192 176.993 126.542 cv
176.811 126.892 176.727 127.417 176.727 128.117 cv
176.727 128.816 176.811 129.342 176.993 129.691 cv
177.174 130.042 177.44 130.216 177.797 130.216 cv
178.155 130.216 178.42 130.042 178.602 129.691 cv
178.777 129.342 178.868 128.816 178.868 128.117 cv
178.868 127.417 178.777 126.892 178.602 126.542 cv
178.42 126.192 178.155 126.018 177.797 126.018 cv
177.797 125.471 mo
178.364 125.471 178.798 125.702 179.106 126.15 cv
179.407 126.604 179.561 127.263 179.561 128.117 cv
179.561 128.978 179.407 129.636 179.106 130.083 cv
178.798 130.531 178.364 130.755 177.797 130.755 cv
177.223 130.755 176.783 130.531 176.482 130.083 cv
176.181 129.636 176.034 128.978 176.034 128.117 cv
176.034 127.263 176.181 126.604 176.482 126.15 cv
176.783 125.702 177.223 125.471 177.797 125.471 cv
f
79.311 134.677 mo
79.311 138.646 li
80.1436 138.646 li
80.8438 138.646 81.3618 138.491 81.6904 138.17 cv
82.0122 137.848 82.1802 137.344 82.1802 136.658 cv
82.1802 135.972 82.0122 135.476 81.6904 135.153 cv
81.3618 134.839 80.8438 134.677 80.1436 134.677 cv
79.311 134.677 li
78.6182 134.11 mo
80.0386 134.11 li
81.0254 134.11 81.7534 134.32 82.2153 134.727 cv
82.6772 135.14 82.9082 135.783 82.9082 136.658 cv
82.9082 137.54 82.6704 138.184 82.208 138.597 cv
81.7466 139.01 81.019 139.213 80.0386 139.213 cv
78.6182 139.213 li
78.6182 134.11 li
f
85.7217 137.288 mo
85.2104 137.288 84.8608 137.351 84.665 137.463 cv
84.4688 137.581 84.3711 137.778 84.3711 138.058 cv
84.3711 138.282 84.4409 138.464 84.5879 138.589 cv
84.7349 138.723 84.938 138.786 85.1899 138.786 cv
85.5396 138.786 85.8193 138.667 86.0293 138.415 cv
86.2393 138.169 86.3447 137.841 86.3447 137.428 cv
86.3447 137.288 li
85.7217 137.288 li
86.9746 137.028 mo
86.9746 139.212 li
86.3447 139.212 li
86.3447 138.632 li
86.1973 138.87 86.0156 139.038 85.8057 139.142 cv
85.5957 139.247 85.3296 139.304 85.0215 139.304 cv
84.6299 139.304 84.3149 139.198 84.084 138.981 cv
83.853 138.765 83.7412 138.471 83.7412 138.1 cv
83.7412 137.673 83.8809 137.351 84.1748 137.127 cv
84.4619 136.91 84.8887 136.798 85.4629 136.798 cv
86.3447 136.798 li
86.3447 136.735 li
86.3447 136.448 86.2466 136.224 86.0576 136.063 cv
85.8687 135.909 85.6025 135.825 85.2598 135.825 cv
85.0356 135.825 84.8257 135.854 84.6157 135.909 cv
84.4063 135.965 84.21 136.042 84.021 136.14 cv
84.021 135.56 li
84.2451 135.476 84.4688 135.405 84.686 135.363 cv
84.9028 135.321 85.1128 135.294 85.3228 135.294 cv
85.8755 135.294 86.2886 135.44 86.561 135.728 cv
86.8345 136.015 86.9746 136.448 86.9746 137.028 cv
f
89.8647 139.563 mo
89.6826 140.011 89.5078 140.312 89.3398 140.451 cv
89.1719 140.591 88.9482 140.661 88.668 140.661 cv
88.1641 140.661 li
88.1641 140.136 li
88.5352 140.136 li
88.7031 140.136 88.8359 140.095 88.9341 140.011 cv
89.0317 139.927 89.1367 139.737 89.2559 139.429 cv
89.3677 139.149 li
87.8213 135.384 li
88.4858 135.384 li
89.6826 138.38 li
90.8794 135.384 li
91.5444 135.384 li
89.8647 139.563 li
f
97.8218 136.903 mo
97.8218 139.213 li
97.1919 139.213 li
97.1919 136.924 li
97.1919 136.56 97.1147 136.294 96.9751 136.112 cv
96.835 135.931 96.625 135.839 96.3452 135.839 cv
96.002 135.839 95.7358 135.951 95.5405 136.168 cv
95.3442 136.386 95.2466 136.679 95.2466 137.05 cv
95.2466 139.213 li
94.6167 139.213 li
94.6167 135.384 li
95.2466 135.384 li
95.2466 135.979 li
95.3936 135.755 95.5684 135.581 95.7783 135.468 cv
95.981 135.356 96.2192 135.293 96.4849 135.293 cv
96.9189 135.293 97.2549 135.434 97.4785 135.706 cv
97.7026 135.979 97.8218 136.378 97.8218 136.903 cv
f
99.0117 137.7 mo
99.0117 135.384 li
99.6416 135.384 li
99.6416 137.68 li
99.6416 138.044 99.7114 138.31 99.8516 138.491 cv
99.9912 138.674 100.201 138.765 100.488 138.765 cv
100.824 138.765 101.097 138.659 101.293 138.442 cv
101.489 138.226 101.587 137.932 101.587 137.554 cv
101.587 135.384 li
102.217 135.384 li
102.217 139.212 li
101.587 139.212 li
101.587 138.624 li
101.433 138.862 101.251 139.03 101.055 139.142 cv
100.852 139.247 100.621 139.304 100.355 139.304 cv
99.9146 139.304 99.5786 139.171 99.3545 138.897 cv
99.1235 138.632 99.0117 138.232 99.0117 137.7 cv
f
106.493 136.119 mo
106.647 135.839 106.836 135.636 107.053 135.496 cv
107.27 135.363 107.528 135.294 107.83 135.294 cv
108.221 135.294 108.529 135.434 108.747 135.714 cv
108.963 135.993 109.075 136.393 109.075 136.903 cv
109.075 139.212 li
108.445 139.212 li
108.445 136.924 li
108.445 136.56 108.375 136.287 108.25 136.104 cv
108.117 135.931 107.92 135.839 107.654 135.839 cv
107.326 135.839 107.067 135.951 106.878 136.169 cv
106.689 136.385 106.598 136.679 106.598 137.05 cv
106.598 139.212 li
105.968 139.212 li
105.968 136.924 li
105.968 136.56 105.898 136.287 105.772 136.104 cv
105.639 135.931 105.436 135.839 105.17 135.839 cv
104.848 135.839 104.589 135.951 104.4 136.169 cv
104.211 136.385 104.121 136.679 104.121 137.05 cv
104.121 139.212 li
103.49 139.212 li
103.49 135.384 li
104.121 135.384 li
104.121 135.979 li
104.26 135.748 104.435 135.573 104.639 135.462 cv
104.834 135.35 105.072 135.294 105.352 135.294 cv
105.632 135.294 105.863 135.363 106.059 135.503 cv
106.255 135.644 106.395 135.854 106.493 136.119 cv
f
113.078 137.302 mo
113.078 136.841 112.98 136.483 112.792 136.218 cv
112.595 135.951 112.337 135.818 112.008 135.818 cv
111.671 135.818 111.413 135.951 111.224 136.218 cv
111.028 136.483 110.937 136.841 110.937 137.302 cv
110.937 137.764 111.028 138.128 111.224 138.394 cv
111.413 138.659 111.671 138.786 112.008 138.786 cv
112.337 138.786 112.595 138.659 112.792 138.394 cv
112.98 138.128 113.078 137.764 113.078 137.302 cv
110.937 135.965 mo
111.063 135.741 111.231 135.573 111.434 135.462 cv
111.637 135.35 111.881 135.294 112.162 135.294 cv
112.623 135.294 113.001 135.481 113.295 135.847 cv
113.582 136.218 113.729 136.7 113.729 137.302 cv
113.729 137.903 113.582 138.394 113.295 138.758 cv
113.001 139.122 112.623 139.304 112.162 139.304 cv
111.881 139.304 111.637 139.247 111.434 139.142 cv
111.231 139.038 111.063 138.87 110.937 138.639 cv
110.937 139.212 li
110.307 139.212 li
110.307 133.894 li
110.937 133.894 li
110.937 135.965 li
f
118.047 137.142 mo
118.047 137.448 li
115.157 137.448 li
115.185 137.882 115.311 138.219 115.549 138.442 cv
115.779 138.667 116.102 138.778 116.521 138.778 cv
116.76 138.778 116.998 138.751 117.222 138.694 cv
117.445 138.639 117.676 138.548 117.9 138.421 cv
117.9 139.017 li
117.676 139.114 117.445 139.191 117.208 139.233 cv
116.969 139.275 116.725 139.304 116.486 139.304 cv
115.871 139.304 115.388 139.128 115.031 138.778 cv
114.674 138.429 114.499 137.946 114.499 137.337 cv
114.499 136.714 114.667 136.218 115.003 135.847 cv
115.339 135.482 115.801 135.293 116.375 135.293 cv
116.893 135.293 117.298 135.462 117.599 135.79 cv
117.893 136.126 118.047 136.574 118.047 137.142 cv
117.417 136.959 mo
117.41 136.616 117.313 136.343 117.13 136.134 cv
116.941 135.931 116.689 135.825 116.381 135.825 cv
116.032 135.825 115.752 135.931 115.542 136.126 cv
115.332 136.321 115.206 136.603 115.178 136.959 cv
117.417 136.959 li
f
121.294 135.972 mo
121.224 135.931 121.147 135.902 121.063 135.882 cv
120.979 135.867 120.889 135.853 120.791 135.853 cv
120.434 135.853 120.161 135.972 119.972 136.203 cv
119.776 136.435 119.685 136.763 119.685 137.197 cv
119.685 139.213 li
119.055 139.213 li
119.055 135.384 li
119.685 135.384 li
119.685 135.979 li
119.811 135.748 119.986 135.573 120.196 135.462 cv
120.406 135.349 120.665 135.294 120.973 135.294 cv
121.015 135.294 121.063 135.3 121.12 135.3 cv
121.168 135.308 121.224 135.314 121.294 135.329 cv
121.294 135.972 li
f
24.2998 123.93 mo
25.6499 123.93 li
f
24.2998 123.93 mo
25.6499 123.93 li
@
174.96 123.93 mo
173.61 123.93 li
f
174.96 123.93 mo
173.61 123.93 li
@
16.1553 125.303 mo
17.2822 125.303 li
17.2822 121.412 li
16.0571 121.657 li
16.0571 121.027 li
17.2754 120.782 li
17.9683 120.782 li
17.9683 125.303 li
19.0947 125.303 li
19.0947 125.884 li
16.1553 125.884 li
16.1553 125.303 li
cp
f
21.9639 123.462 mo
21.6353 123.462 21.376 123.554 21.187 123.729 cv
20.998 123.903 20.9072 124.142 20.9072 124.449 cv
20.9072 124.757 20.998 125.002 21.187 125.177 cv
21.376 125.352 21.6353 125.436 21.9639 125.436 cv
22.2861 125.436 22.5449 125.352 22.7339 125.17 cv
22.9229 124.995 23.021 124.757 23.021 124.449 cv
23.021 124.142 22.9229 123.903 22.7412 123.729 cv
22.5522 123.554 22.293 123.462 21.9639 123.462 cv
21.271 123.168 mo
20.9771 123.099 20.7466 122.958 20.5781 122.755 cv
20.4102 122.553 20.3335 122.308 20.3335 122.014 cv
20.3335 121.608 20.4731 121.286 20.7671 121.048 cv
21.0542 120.81 21.4531 120.691 21.9639 120.691 cv
22.4678 120.691 22.8667 120.81 23.1606 121.048 cv
23.4478 121.286 23.5947 121.608 23.5947 122.014 cv
23.5947 122.308 23.5107 122.553 23.3428 122.755 cv
23.1748 122.958 22.9512 123.099 22.6567 123.168 cv
22.9858 123.246 23.2446 123.399 23.4336 123.624 cv
23.6157 123.848 23.7139 124.127 23.7139 124.449 cv
23.7139 124.946 23.5596 125.324 23.2588 125.583 cv
22.9512 125.849 22.5239 125.975 21.9639 125.975 cv
21.397 125.975 20.9634 125.849 20.6626 125.583 cv
20.3613 125.324 20.2144 124.946 20.2144 124.449 cv
20.2144 124.127 20.3052 123.848 20.4946 123.624 cv
20.6768 123.399 20.9355 123.246 21.271 123.168 cv
21.0195 122.077 mo
21.0195 122.343 21.0962 122.553 21.2642 122.699 cv
21.4321 122.847 21.6631 122.917 21.9639 122.917 cv
22.2583 122.917 22.4888 122.847 22.6567 122.699 cv
22.8247 122.553 22.9087 122.343 22.9087 122.077 cv
22.9087 121.811 22.8247 121.608 22.6567 121.461 cv
22.4888 121.314 22.2583 121.237 21.9639 121.237 cv
21.6631 121.237 21.4321 121.314 21.2642 121.461 cv
21.0962 121.608 21.0195 121.811 21.0195 122.077 cv
f
24.2998 102.06 mo
25.6499 102.06 li
f
24.2998 102.06 mo
25.6499 102.06 li
@
174.96 102.06 mo
173.61 102.06 li
f
174.96 102.06 mo
173.61 102.06 li
@
16.166 103.433 mo
17.2925 103.433 li
17.2925 99.542 li
16.0679 99.7866 li
16.0679 99.1567 li
17.2856 98.9116 li
17.9785 98.9116 li
17.9785 103.433 li
19.1055 103.433 li
19.1055 104.014 li
16.166 104.014 li
16.166 103.433 li
cp
f
20.519 103.909 mo
20.519 103.279 li
20.687 103.363 20.8618 103.426 21.0439 103.468 cv
21.2188 103.51 21.394 103.531 21.5688 103.531 cv
22.0171 103.531 22.3667 103.384 22.6045 103.076 cv
22.8423 102.768 22.9824 102.307 23.0244 101.677 cv
22.8848 101.873 22.7163 102.026 22.5205 102.131 cv
22.3174 102.236 22.0938 102.285 21.8486 102.285 cv
21.3306 102.285 20.9248 102.131 20.6309 101.823 cv
20.3369 101.515 20.1899 101.096 20.1899 100.557 cv
20.1899 100.039 20.3438 99.6191 20.6519 99.2969 cv
20.96 98.9819 21.373 98.8213 21.8906 98.8213 cv
22.4785 98.8213 22.9336 99.0518 23.2412 99.5 cv
23.5493 99.9546 23.7104 100.612 23.7104 101.467 cv
23.7104 102.278 23.5142 102.915 23.1362 103.391 cv
22.7515 103.867 22.2407 104.105 21.5967 104.105 cv
21.4219 104.105 21.2466 104.084 21.0718 104.056 cv
20.8901 104.028 20.708 103.979 20.519 103.909 cv
21.8906 101.747 mo
22.1987 101.747 22.4434 101.641 22.6255 101.431 cv
22.8076 101.221 22.8984 100.928 22.8984 100.557 cv
22.8984 100.192 22.8076 99.8984 22.6255 99.6885 cv
22.4434 99.479 22.1987 99.3667 21.8906 99.3667 cv
21.583 99.3667 21.3379 99.479 21.1558 99.6885 cv
20.9741 99.8984 20.8828 100.192 20.8828 100.557 cv
20.8828 100.928 20.9741 101.221 21.1558 101.431 cv
21.3379 101.641 21.583 101.747 21.8906 101.747 cv
f
24.2998 80.1899 mo
25.6499 80.1899 li
f
24.2998 80.1899 mo
25.6499 80.1899 li
@
174.96 80.1899 mo
173.61 80.1899 li
f
174.96 80.1899 mo
173.61 80.1899 li
@
16.3569 81.563 mo
18.7646 81.563 li
18.7646 82.144 li
15.5239 82.144 li
15.5239 81.563 li
15.7832 81.2969 16.1401 80.9331 16.5952 80.4717 cv
17.043 80.0161 17.3296 79.7227 17.4487 79.5894 cv
17.6729 79.3447 17.8267 79.1348 17.9106 78.9595 cv
17.9946 78.7915 18.0435 78.6172 18.0435 78.4487 cv
18.0435 78.1826 17.9458 77.959 17.7568 77.791 cv
17.5679 77.6226 17.3228 77.5317 17.0151 77.5317 cv
16.7979 77.5317 16.5669 77.5742 16.3291 77.644 cv
16.0913 77.7207 15.8325 77.8325 15.5591 77.9868 cv
15.5591 77.2871 li
15.8389 77.1748 16.0981 77.0913 16.3359 77.0352 cv
16.5742 76.979 16.7979 76.9512 17.001 76.9512 cv
17.5259 76.9512 17.9458 77.084 18.2607 77.3501 cv
18.5757 77.6162 18.7363 77.9658 18.7363 78.4067 cv
18.7363 78.6172 18.6948 78.8193 18.6177 79.0015 cv
18.5405 79.1909 18.4009 79.4146 18.1909 79.6665 cv
18.1348 79.7363 17.9526 79.9253 17.6445 80.2402 cv
17.3369 80.5552 16.9102 80.9961 16.3569 81.563 cv
f
21.6899 77.4971 mo
21.333 77.4971 21.0669 77.6719 20.8848 78.022 cv
20.7031 78.3716 20.6191 78.8965 20.6191 79.5967 cv
20.6191 80.2964 20.7031 80.8213 20.8848 81.1714 cv
21.0669 81.521 21.333 81.6958 21.6899 81.6958 cv
22.0469 81.6958 22.313 81.521 22.4946 81.1714 cv
22.6694 80.8213 22.7603 80.2964 22.7603 79.5967 cv
22.7603 78.8965 22.6694 78.3716 22.4946 78.022 cv
22.313 77.6719 22.0469 77.4971 21.6899 77.4971 cv
21.6899 76.9512 mo
22.2568 76.9512 22.6904 77.1821 22.9985 77.6299 cv
23.2993 78.085 23.4536 78.7427 23.4536 79.5967 cv
23.4536 80.457 23.2993 81.1152 22.9985 81.563 cv
22.6904 82.0107 22.2568 82.2349 21.6899 82.2349 cv
21.1162 82.2349 20.6748 82.0107 20.3745 81.563 cv
20.0732 81.1152 19.9263 80.457 19.9263 79.5967 cv
19.9263 78.7427 20.0732 78.085 20.3745 77.6299 cv
20.6748 77.1821 21.1162 76.9512 21.6899 76.9512 cv
f
24.2998 58.3198 mo
25.6499 58.3198 li
f
24.2998 58.3198 mo
25.6499 58.3198 li
@
174.96 58.3198 mo
173.61 58.3198 li
f
174.96 58.3198 mo
173.61 58.3198 li
@
16.5415 59.6929 mo
18.9492 59.6929 li
18.9492 60.2739 li
15.7085 60.2739 li
15.7085 59.6929 li
15.9678 59.4272 16.3247 59.0635 16.7798 58.6011 cv
17.2275 58.1465 17.5142 57.8525 17.6333 57.7192 cv
17.8574 57.4746 18.0112 57.2646 18.0952 57.0898 cv
18.1792 56.9219 18.228 56.7466 18.228 56.5786 cv
18.228 56.3125 18.1304 56.0889 17.9414 55.9209 cv
17.7524 55.7529 17.5073 55.6621 17.1997 55.6621 cv
16.9824 55.6621 16.7515 55.7036 16.5137 55.7739 cv
16.2759 55.8511 16.0171 55.9629 15.7437 56.1172 cv
15.7437 55.417 li
16.0234 55.3052 16.2827 55.2212 16.5205 55.165 cv
16.7588 55.1094 16.9824 55.0811 17.1855 55.0811 cv
17.7104 55.0811 18.1304 55.2139 18.4453 55.48 cv
18.7603 55.7461 18.9209 56.0957 18.9209 56.5366 cv
18.9209 56.7466 18.8794 56.9497 18.8022 57.1318 cv
18.7251 57.3203 18.5854 57.5444 18.3755 57.7964 cv
18.3193 57.8667 18.1372 58.0552 17.8291 58.3706 cv
17.5215 58.6855 17.0947 59.126 16.5415 59.6929 cv
f
20.5166 59.6929 mo
21.6431 59.6929 li
21.6431 55.8018 li
20.4189 56.0469 li
20.4189 55.417 li
21.6367 55.1719 li
22.3296 55.1719 li
22.3296 59.6929 li
23.4561 59.6929 li
23.4561 60.2739 li
20.5166 60.2739 li
20.5166 59.6929 li
cp
f
24.2998 36.4502 mo
25.6499 36.4502 li
f
24.2998 36.4502 mo
25.6499 36.4502 li
@
174.96 36.4502 mo
173.61 36.4502 li
f
174.96 36.4502 mo
173.61 36.4502 li
@
16.5942 37.8232 mo
19.002 37.8232 li
19.002 38.4038 li
15.7612 38.4038 li
15.7612 37.8232 li
16.0205 37.5571 16.3774 37.1934 16.8325 36.731 cv
17.2803 36.2764 17.5669 35.9824 17.686 35.8491 cv
17.9102 35.6045 18.064 35.3945 18.1479 35.2197 cv
18.2319 35.0518 18.2808 34.8765 18.2808 34.7085 cv
18.2808 34.4429 18.1831 34.2188 17.9941 34.0508 cv
17.8052 33.8828 17.5601 33.792 17.252 33.792 cv
17.0352 33.792 16.8042 33.834 16.5664 33.9038 cv
16.3286 33.981 16.0698 34.0928 15.7964 34.2471 cv
15.7964 33.5474 li
16.0762 33.4351 16.3354 33.3511 16.5732 33.2949 cv
16.8115 33.2393 17.0352 33.2109 17.2383 33.2109 cv
17.7632 33.2109 18.1831 33.3438 18.498 33.6099 cv
18.813 33.876 18.9736 34.2261 18.9736 34.6665 cv
18.9736 34.8765 18.9321 35.0796 18.855 35.2617 cv
18.7778 35.4507 18.6382 35.6743 18.4282 35.9268 cv
18.3721 35.9966 18.1899 36.1855 17.8818 36.5005 cv
17.5742 36.8154 17.1475 37.2559 16.5942 37.8232 cv
f
21.0454 37.8232 mo
23.4526 37.8232 li
23.4526 38.4038 li
20.2124 38.4038 li
20.2124 37.8232 li
20.4717 37.5571 20.8281 37.1934 21.2832 36.731 cv
21.731 36.2764 22.0181 35.9824 22.1372 35.8491 cv
22.3608 35.6045 22.5146 35.3945 22.5991 35.2197 cv
22.6831 35.0518 22.7319 34.8765 22.7319 34.7085 cv
22.7319 34.4429 22.6338 34.2188 22.4448 34.0508 cv
22.2559 33.8828 22.0112 33.792 21.7031 33.792 cv
21.4863 33.792 21.2554 33.834 21.0176 33.9038 cv
20.7793 33.981 20.5205 34.0928 20.2476 34.2471 cv
20.2476 33.5474 li
20.5273 33.4351 20.7866 33.3511 21.0244 33.2949 cv
21.2622 33.2393 21.4863 33.2109 21.6895 33.2109 cv
22.2144 33.2109 22.6338 33.3438 22.9487 33.6099 cv
23.2637 33.876 23.4248 34.2261 23.4248 34.6665 cv
23.4248 34.8765 23.3828 35.0796 23.3062 35.2617 cv
23.229 35.4507 23.0889 35.6743 22.8789 35.9268 cv
22.8228 35.9966 22.6411 36.1855 22.333 36.5005 cv
22.0249 36.8154 21.5981 37.2559 21.0454 37.8232 cv
f
24.2998 14.5801 mo
25.6499 14.5801 li
f
24.2998 14.5801 mo
25.6499 14.5801 li
@
174.96 14.5801 mo
173.61 14.5801 li
f
174.96 14.5801 mo
173.61 14.5801 li
@
16.4521 15.9531 mo
18.8594 15.9531 li
18.8594 16.5337 li
15.6191 16.5337 li
15.6191 15.9531 li
15.8779 15.687 16.2349 15.3232 16.6899 14.8613 cv
17.1377 14.4063 17.4248 14.1123 17.5439 13.9795 cv
17.7676 13.7344 17.9214 13.5249 18.0054 13.3496 cv
18.0894 13.1816 18.1387 13.0068 18.1387 12.8384 cv
18.1387 12.5728 18.0405 12.3486 17.8516 12.1807 cv
17.6626 12.0132 17.4175 11.9219 17.1099 11.9219 cv
16.8931 11.9219 16.6621 11.9639 16.4238 12.0342 cv
16.186 12.1108 15.9272 12.2231 15.6543 12.377 cv
15.6543 11.6768 li
15.9341 11.5654 16.1929 11.481 16.4307 11.4248 cv
16.6689 11.3691 16.8931 11.3408 17.0962 11.3408 cv
17.6206 11.3408 18.0405 11.4741 18.3555 11.7402 cv
18.6704 12.0059 18.8315 12.356 18.8315 12.7969 cv
18.8315 13.0068 18.7896 13.21 18.7124 13.3916 cv
18.6357 13.5806 18.4956 13.8047 18.2856 14.0562 cv
18.2295 14.1265 18.0479 14.3154 17.7397 14.6304 cv
17.4316 14.9453 17.0049 15.3862 16.4521 15.9531 cv
f
22.4009 13.7832 mo
22.7295 13.8535 22.9888 14.0005 23.1704 14.2241 cv
23.3525 14.4482 23.4502 14.728 23.4502 15.0503 cv
23.4502 15.5542 23.2754 15.9458 22.9326 16.2188 cv
22.5825 16.4922 22.0923 16.625 21.4561 16.625 cv
21.2388 16.625 21.0146 16.6035 20.791 16.5615 cv
20.5669 16.5269 20.3291 16.4639 20.0913 16.3799 cv
20.0913 15.7148 li
20.2803 15.8271 20.4902 15.9111 20.7207 15.9673 cv
20.9448 16.0229 21.1831 16.0508 21.4351 16.0508 cv
21.8687 16.0508 22.1973 15.9673 22.4214 15.7988 cv
22.6455 15.6309 22.7646 15.3794 22.7646 15.0503 cv
22.7646 14.7563 22.6597 14.5181 22.4497 14.3506 cv
22.2397 14.1826 21.9458 14.0913 21.5679 14.0913 cv
20.9731 14.0913 li
20.9731 13.5244 li
21.5957 13.5244 li
21.9316 13.5244 22.1909 13.4614 22.3726 13.3213 cv
22.5547 13.1885 22.6455 12.9927 22.6455 12.7339 cv
22.6455 12.4751 22.5479 12.272 22.3657 12.1318 cv
22.1768 11.9917 21.9106 11.9219 21.5679 11.9219 cv
21.3789 11.9219 21.1758 11.9429 20.959 11.9849 cv
20.7417 12.0269 20.5039 12.0898 20.2451 12.1738 cv
20.2451 11.5581 li
20.5039 11.4883 20.749 11.4321 20.98 11.397 cv
21.2041 11.3618 21.4209 11.3408 21.6309 11.3408 cv
22.1484 11.3408 22.5615 11.46 22.8696 11.6982 cv
23.1777 11.936 23.3315 12.2578 23.3315 12.6636 cv
23.3315 12.9438 23.2476 13.1816 23.0864 13.3774 cv
22.9253 13.5737 22.6948 13.7134 22.4009 13.7832 cv
f
6.74756 122.098 mo
6.74756 117.787 li
7.32813 117.787 li
7.32813 119.6 li
11.8496 119.6 li
11.8496 120.292 li
7.32813 120.292 li
7.32813 122.098 li
6.74756 122.098 li
cp
f
9.77783 113.875 mo
10.0854 113.875 li
10.0854 116.765 li
10.5195 116.737 10.8555 116.611 11.0796 116.374 cv
11.3037 116.143 11.4155 115.821 11.4155 115.401 cv
11.4155 115.163 11.3872 114.925 11.3315 114.701 cv
11.2759 114.477 11.1846 114.246 11.0581 114.022 cv
11.6533 114.022 li
11.751 114.246 11.8286 114.477 11.8701 114.715 cv
11.9121 114.953 11.9404 115.198 11.9404 115.436 cv
11.9404 116.052 11.7656 116.535 11.4155 116.892 cv
11.0654 117.248 10.5825 117.423 9.97412 117.423 cv
9.35107 117.423 8.854 117.256 8.4834 116.92 cv
8.11914 116.583 7.93018 116.122 7.93018 115.548 cv
7.93018 115.03 8.09814 114.624 8.42725 114.323 cv
8.76318 114.029 9.21094 113.875 9.77783 113.875 cv
9.5957 114.505 mo
9.25293 114.512 8.97998 114.61 8.77002 114.792 cv
8.56738 114.981 8.4624 115.233 8.4624 115.541 cv
8.4624 115.891 8.56738 116.171 8.76318 116.381 cv
8.95898 116.591 9.23877 116.717 9.5957 116.745 cv
9.5957 114.505 li
f
8.75586 109.865 mo
8.47607 109.711 8.27295 109.522 8.1333 109.305 cv
8.00049 109.088 7.93018 108.83 7.93018 108.528 cv
7.93018 108.137 8.07031 107.829 8.3501 107.612 cv
8.62988 107.395 9.02881 107.283 9.54004 107.283 cv
11.8496 107.283 li
11.8496 107.913 li
9.56104 107.913 li
9.19727 107.913 8.92383 107.982 8.74219 108.108 cv
8.56689 108.242 8.47607 108.438 8.47607 108.704 cv
8.47607 109.032 8.58789 109.292 8.80518 109.48 cv
9.02197 109.669 9.31592 109.76 9.68652 109.76 cv
11.8496 109.76 li
11.8496 110.39 li
9.56104 110.39 li
9.19727 110.39 8.92383 110.46 8.74219 110.586 cv
8.56689 110.719 8.47607 110.922 8.47607 111.188 cv
8.47607 111.51 8.58789 111.769 8.80518 111.958 cv
9.02197 112.146 9.31592 112.237 9.68652 112.237 cv
11.8496 112.237 li
11.8496 112.868 li
8.021 112.868 li
8.021 112.237 li
8.61572 112.237 li
8.38525 112.098 8.20996 111.923 8.09814 111.72 cv
7.98633 111.523 7.93018 111.286 7.93018 111.006 cv
7.93018 110.726 8.00049 110.495 8.14014 110.299 cv
8.28027 110.103 8.48975 109.963 8.75586 109.865 cv
f
11.2754 105.421 mo
13.2983 105.421 li
13.2983 106.051 li
8.021 106.051 li
8.021 105.421 li
8.60205 105.421 li
8.37793 105.295 8.20996 105.127 8.09814 104.924 cv
7.98633 104.721 7.93018 104.477 7.93018 104.196 cv
7.93018 103.734 8.11914 103.357 8.48291 103.063 cv
8.854 102.776 9.33691 102.629 9.93848 102.629 cv
10.5405 102.629 11.0303 102.776 11.3945 103.063 cv
11.7583 103.357 11.9404 103.734 11.9404 104.196 cv
11.9404 104.477 11.8843 104.721 11.7793 104.924 cv
11.6743 105.127 11.5063 105.295 11.2754 105.421 cv
9.93848 103.279 mo
9.47705 103.279 9.12012 103.377 8.854 103.567 cv
8.58789 103.763 8.45508 104.021 8.45508 104.351 cv
8.45508 104.687 8.58789 104.945 8.854 105.134 cv
9.12012 105.33 9.47705 105.421 9.93848 105.421 cv
10.4009 105.421 10.7646 105.33 11.0303 105.134 cv
11.2964 104.945 11.4224 104.687 11.4224 104.351 cv
11.4224 104.021 11.2964 103.763 11.0303 103.567 cv
10.7646 103.377 10.4009 103.279 9.93848 103.279 cv
f
9.77783 98.3105 mo
10.0854 98.3105 li
10.0854 101.201 li
10.5195 101.173 10.8555 101.047 11.0796 100.809 cv
11.3037 100.579 11.4155 100.256 11.4155 99.8364 cv
11.4155 99.5981 11.3872 99.3604 11.3315 99.1367 cv
11.2759 98.9126 11.1846 98.6821 11.0581 98.458 cv
11.6533 98.458 li
11.751 98.6821 11.8286 98.9126 11.8701 99.1504 cv
11.9121 99.3887 11.9404 99.6333 11.9404 99.8711 cv
11.9404 100.487 11.7656 100.97 11.4155 101.327 cv
11.0654 101.684 10.5825 101.859 9.97412 101.859 cv
9.35107 101.859 8.854 101.691 8.4834 101.355 cv
8.11914 101.019 7.93018 100.557 7.93018 99.9834 cv
7.93018 99.4658 8.09814 99.0596 8.42725 98.7588 cv
8.76318 98.4648 9.21094 98.3105 9.77783 98.3105 cv
9.5957 98.9404 mo
9.25293 98.9478 8.97998 99.0459 8.77002 99.2275 cv
8.56738 99.4165 8.4624 99.6685 8.4624 99.9766 cv
8.4624 100.327 8.56738 100.606 8.76318 100.816 cv
8.95898 101.026 9.23877 101.152 9.5957 101.18 cv
9.5957 98.9404 li
f
8.60889 95.0635 mo
8.56689 95.1333 8.53906 95.2109 8.51807 95.2944 cv
8.50439 95.3784 8.48975 95.4692 8.48975 95.5674 cv
8.48975 95.9243 8.60889 96.1973 8.83984 96.3862 cv
9.0708 96.582 9.3999 96.6733 9.8335 96.6733 cv
11.8496 96.6733 li
11.8496 97.3027 li
8.021 97.3027 li
8.021 96.6733 li
8.61621 96.6733 li
8.38525 96.5474 8.20996 96.3721 8.09814 96.1621 cv
7.98633 95.9521 7.93018 95.6934 7.93018 95.3853 cv
7.93018 95.3433 7.93701 95.2944 7.93701 95.2388 cv
7.94434 95.1895 7.95117 95.1333 7.96533 95.0635 cv
8.60889 95.0635 li
f
9.9248 92.6631 mo
9.9248 93.1743 9.98779 93.5239 10.0996 93.7197 cv
10.2188 93.9155 10.4146 94.0137 10.6943 94.0137 cv
10.9185 94.0137 11.1006 93.9438 11.2266 93.7964 cv
11.3594 93.6499 11.4224 93.4468 11.4224 93.1948 cv
11.4224 92.8452 11.3032 92.5649 11.0518 92.355 cv
10.8066 92.145 10.4775 92.04 10.0649 92.04 cv
9.9248 92.04 li
9.9248 92.6631 li
9.66602 91.4106 mo
11.8496 91.4106 li
11.8496 92.04 li
11.2681 92.04 li
11.5063 92.1875 11.6743 92.3691 11.7793 92.5791 cv
11.8843 92.7891 11.9404 93.0552 11.9404 93.3628 cv
11.9404 93.7549 11.8354 94.0698 11.6187 94.3008 cv
11.4014 94.5317 11.1074 94.6436 10.7368 94.6436 cv
10.3096 94.6436 9.98779 94.5034 9.76367 94.2095 cv
9.54688 93.9229 9.43506 93.4961 9.43506 92.9219 cv
9.43506 92.04 li
9.37207 92.04 li
9.08496 92.04 8.86084 92.1382 8.7002 92.3271 cv
8.5459 92.5161 8.4624 92.7822 8.4624 93.125 cv
8.4624 93.3491 8.49023 93.5591 8.5459 93.769 cv
8.60205 93.979 8.67871 94.1748 8.77734 94.3638 cv
8.1958 94.3638 li
8.11182 94.1396 8.04199 93.9155 8 93.6987 cv
7.95801 93.4819 7.93018 93.272 7.93018 93.062 cv
7.93018 92.5093 8.07715 92.0962 8.36426 91.8237 cv
8.65088 91.5503 9.08496 91.4106 9.66602 91.4106 cv
f
6.93652 89.4932 mo
8.021 89.4932 li
8.021 88.1978 li
8.51123 88.1978 li
8.51123 89.4932 li
10.5894 89.4932 li
10.9043 89.4932 11.1074 89.4507 11.1914 89.3667 cv
11.2822 89.2832 11.3242 89.1079 11.3242 88.8418 cv
11.3242 88.1978 li
11.8496 88.1978 li
11.8496 88.8418 li
11.8496 89.3315 11.7583 89.668 11.5762 89.8501 cv
11.3945 90.0317 11.0654 90.1226 10.5894 90.1226 cv
8.51123 90.1226 li
8.51123 90.5845 li
8.021 90.5845 li
8.021 90.1226 li
6.93652 90.1226 li
6.93652 89.4932 li
f
10.3379 87.4355 mo
8.021 87.4355 li
8.021 86.8057 li
10.3169 86.8057 li
10.6807 86.8057 10.9463 86.7358 11.1284 86.5957 cv
11.3105 86.4556 11.4014 86.2456 11.4014 85.959 cv
11.4014 85.6226 11.2964 85.3496 11.0796 85.1538 cv
10.8623 84.9575 10.5684 84.8599 10.1904 84.8599 cv
8.021 84.8599 li
8.021 84.23 li
11.8491 84.23 li
11.8491 84.8599 li
11.2612 84.8599 li
11.4995 85.0137 11.6675 85.1958 11.7793 85.3916 cv
11.8843 85.5947 11.9404 85.8252 11.9404 86.0918 cv
11.9404 86.5322 11.8071 86.8682 11.5347 87.0923 cv
11.2686 87.3232 10.8696 87.4355 10.3379 87.4355 cv
f
8.60889 80.7168 mo
8.56689 80.7866 8.53906 80.8643 8.51807 80.9478 cv
8.50439 81.0317 8.48975 81.1226 8.48975 81.2207 cv
8.48975 81.5776 8.60889 81.8501 8.83984 82.0396 cv
9.0708 82.2354 9.3999 82.3267 9.8335 82.3267 cv
11.8496 82.3267 li
11.8496 82.9561 li
8.021 82.9561 li
8.021 82.3267 li
8.61621 82.3267 li
8.38525 82.2007 8.20996 82.0254 8.09814 81.8154 cv
7.98633 81.6055 7.93018 81.3467 7.93018 81.0386 cv
7.93018 80.9966 7.93701 80.9478 7.93701 80.8916 cv
7.94434 80.8428 7.95117 80.7866 7.96533 80.7168 cv
8.60889 80.7168 li
f
9.77783 76.7837 mo
10.0854 76.7837 li
10.0854 79.6738 li
10.5195 79.646 10.8555 79.52 11.0796 79.2822 cv
11.3037 79.0513 11.4155 78.7295 11.4155 78.3096 cv
11.4155 78.0713 11.3872 77.833 11.3315 77.6094 cv
11.2759 77.3853 11.1846 77.1548 11.0581 76.9307 cv
11.6533 76.9307 li
11.751 77.1548 11.8286 77.3853 11.8701 77.623 cv
11.9121 77.8613 11.9404 78.1064 11.9404 78.3442 cv
11.9404 78.96 11.7656 79.4434 11.4155 79.8003 cv
11.0654 80.1567 10.5825 80.332 9.97412 80.332 cv
9.35107 80.332 8.854 80.1641 8.4834 79.8281 cv
8.11914 79.4922 7.93018 79.0303 7.93018 78.4561 cv
7.93018 77.9385 8.09814 77.5327 8.42725 77.2314 cv
8.76318 76.938 9.21094 76.7837 9.77783 76.7837 cv
9.5957 77.4136 mo
9.25293 77.4209 8.97998 77.5186 8.77002 77.7007 cv
8.56738 77.8892 8.4624 78.1416 8.4624 78.4492 cv
8.4624 78.7993 8.56738 79.0791 8.76318 79.2891 cv
8.95898 79.499 9.23877 79.625 9.5957 79.6528 cv
9.5957 77.4136 li
f
6.5376 72.0181 mo
7.06934 72.3257 7.58691 72.5498 8.09863 72.6968 cv
8.60889 72.8506 9.12695 72.9209 9.65186 72.9209 cv
10.1836 72.9209 10.7017 72.8506 11.2124 72.6968 cv
11.7305 72.5498 12.2412 72.3257 12.7661 72.0181 cv
12.7661 72.5635 li
12.2271 72.9067 11.7095 73.1655 11.1914 73.3335 cv
10.6733 73.5015 10.1626 73.5854 9.65186 73.5854 cv
9.14795 73.5854 8.63721 73.5015 8.11914 73.3335 cv
7.60107 73.1655 7.07666 72.9136 6.5376 72.5635 cv
6.5376 72.0181 li
f
8.60205 68.2808 mo
6.53027 68.2808 li
6.53027 67.6509 li
11.8496 67.6509 li
11.8496 68.2808 li
11.2754 68.2808 li
11.5063 68.4136 11.6743 68.5815 11.7793 68.7847 cv
11.8843 68.9873 11.9404 69.2256 11.9404 69.5054 cv
11.9404 69.9678 11.7583 70.3452 11.3945 70.6392 cv
11.0303 70.9331 10.5405 71.0732 9.93848 71.0732 cv
9.33691 71.0732 8.854 70.9331 8.48291 70.6392 cv
8.11914 70.3452 7.93018 69.9678 7.93018 69.5054 cv
7.93018 69.2256 7.98633 68.9873 8.09814 68.7847 cv
8.20996 68.5815 8.37793 68.4136 8.60205 68.2808 cv
9.93848 70.4219 mo
10.4004 70.4219 10.7646 70.3315 11.0303 70.1426 cv
11.2964 69.9531 11.4224 69.6875 11.4224 69.3516 cv
11.4224 69.0225 11.2964 68.7637 11.0303 68.5674 cv
10.7646 68.3789 10.4004 68.2808 9.93848 68.2808 cv
9.47705 68.2808 9.12012 68.3789 8.854 68.5674 cv
8.58789 68.7637 8.45508 69.0225 8.45508 69.3516 cv
8.45508 69.6875 8.58789 69.9531 8.854 70.1426 cv
9.12012 70.3315 9.47705 70.4219 9.93848 70.4219 cv
f
9.77783 63.0811 mo
10.0854 63.0811 li
10.0854 65.9712 li
10.5195 65.9434 10.8555 65.8174 11.0796 65.5796 cv
11.3037 65.3481 11.4155 65.0264 11.4155 64.6069 cv
11.4155 64.3687 11.3872 64.1304 11.3315 63.9067 cv
11.2759 63.6826 11.1846 63.4517 11.0581 63.228 cv
11.6533 63.228 li
11.751 63.4517 11.8286 63.6826 11.8701 63.9204 cv
11.9121 64.1587 11.9404 64.4033 11.9404 64.6416 cv
11.9404 65.2573 11.7656 65.7402 11.4155 66.0972 cv
11.0654 66.4541 10.5825 66.6289 9.97412 66.6289 cv
9.35107 66.6289 8.854 66.4614 8.4834 66.125 cv
8.11914 65.7891 7.93018 65.3271 7.93018 64.7534 cv
7.93018 64.2354 8.09814 63.8301 8.42725 63.5288 cv
8.76318 63.2349 9.21094 63.0811 9.77783 63.0811 cv
9.5957 63.7109 mo
9.25293 63.7178 8.97998 63.8154 8.77002 63.9976 cv
8.56738 64.1865 8.4624 64.4385 8.4624 64.7466 cv
8.4624 65.0967 8.56738 65.376 8.76318 65.5859 cv
8.95898 65.7959 9.23877 65.9224 9.5957 65.9502 cv
9.5957 63.7109 li
f
9.88965 59.5327 mo
9.44189 59.5327 9.08496 59.6309 8.83301 59.813 cv
8.58105 60.0015 8.45508 60.2676 8.45508 60.6035 cv
8.45508 60.9395 8.58105 61.2056 8.83301 61.3945 cv
9.08496 61.5835 9.44189 61.6743 9.88965 61.6743 cv
10.3447 61.6743 10.6948 61.5835 10.9463 61.3945 cv
11.1987 61.2056 11.3242 60.9395 11.3242 60.6035 cv
11.3242 60.2676 11.1987 60.0015 10.9463 59.813 cv
10.6948 59.6309 10.3447 59.5327 9.88965 59.5327 cv
11.3735 58.9028 mo
12.0171 58.9028 12.5 59.0498 12.8218 59.3364 cv
13.1372 59.6309 13.2983 60.0718 13.2983 60.6665 cv
13.2983 60.8906 13.2769 61.0933 13.249 61.2896 cv
13.2139 61.4854 13.165 61.6812 13.0952 61.8633 cv
12.4863 61.8633 li
12.584 61.6812 12.6543 61.4995 12.7031 61.3174 cv
12.752 61.1357 12.7803 60.9531 12.7803 60.7642 cv
12.7803 60.3584 12.668 60.0503 12.458 59.8403 cv
12.2412 59.6377 11.9194 59.5327 11.4854 59.5327 cv
11.1772 59.5327 li
11.4014 59.6655 11.5693 59.834 11.6816 60.0366 cv
11.7935 60.2393 11.8491 60.4775 11.8491 60.7573 cv
11.8491 61.2334 11.6743 61.6113 11.3174 61.8984 cv
10.9604 62.1851 10.4849 62.3247 9.88965 62.3247 cv
9.30176 62.3247 8.82568 62.1851 8.46924 61.8984 cv
8.1123 61.6113 7.93018 61.2334 7.93018 60.7573 cv
7.93018 60.4775 7.98633 60.2393 8.09814 60.0366 cv
8.20996 59.834 8.37793 59.6655 8.60205 59.5327 cv
8.021 59.5327 li
8.021 58.9028 li
11.3735 58.9028 li
f
8.60889 55.3896 mo
8.56689 55.46 8.53906 55.5366 8.51807 55.6206 cv
8.50439 55.7046 8.48975 55.7954 8.48975 55.8936 cv
8.48975 56.2505 8.60889 56.5234 8.83984 56.7124 cv
9.0708 56.9082 9.3999 56.9995 9.8335 56.9995 cv
11.8496 56.9995 li
11.8496 57.6294 li
8.021 57.6294 li
8.021 56.9995 li
8.61621 56.9995 li
8.38525 56.873 8.20996 56.6982 8.09814 56.4883 cv
7.98633 56.2783 7.93018 56.0195 7.93018 55.7114 cv
7.93018 55.6699 7.93701 55.6206 7.93701 55.5649 cv
7.94434 55.5156 7.95117 55.46 7.96533 55.3896 cv
8.60889 55.3896 li
f
9.77783 51.4565 mo
10.0854 51.4565 li
10.0854 54.3472 li
10.5195 54.3188 10.8555 54.1929 11.0796 53.9551 cv
11.3037 53.7241 11.4155 53.4023 11.4155 52.9824 cv
11.4155 52.7441 11.3872 52.5063 11.3315 52.2822 cv
11.2759 52.0586 11.1846 51.8276 11.0581 51.6035 cv
11.6533 51.6035 li
11.751 51.8276 11.8286 52.0586 11.8701 52.2964 cv
11.9121 52.5342 11.9404 52.7793 11.9404 53.0171 cv
11.9404 53.6333 11.7656 54.1162 11.4155 54.4727 cv
11.0654 54.8301 10.5825 55.0049 9.97412 55.0049 cv
9.35107 55.0049 8.854 54.8369 8.4834 54.501 cv
8.11914 54.165 7.93018 53.7031 7.93018 53.1294 cv
7.93018 52.6113 8.09814 52.2056 8.42725 51.9043 cv
8.76318 51.6104 9.21094 51.4565 9.77783 51.4565 cv
9.5957 52.0864 mo
9.25293 52.0938 8.97998 52.1914 8.77002 52.373 cv
8.56738 52.5625 8.4624 52.8145 8.4624 53.1221 cv
8.4624 53.4722 8.56738 53.752 8.76318 53.9619 cv
8.95898 54.1719 9.23877 54.2979 9.5957 54.3262 cv
9.5957 52.0864 li
f
9.77783 47.1523 mo
10.0854 47.1523 li
10.0854 50.043 li
10.5195 50.0146 10.8555 49.8887 11.0796 49.6509 cv
11.3037 49.4199 11.4155 49.0981 11.4155 48.6782 cv
11.4155 48.4399 11.3872 48.2021 11.3315 47.9785 cv
11.2759 47.7544 11.1846 47.5234 11.0581 47.2998 cv
11.6533 47.2998 li
11.751 47.5234 11.8286 47.7544 11.8701 47.9922 cv
11.9121 48.23 11.9404 48.4751 11.9404 48.7134 cv
11.9404 49.3291 11.7656 49.812 11.4155 50.1689 cv
11.0654 50.5259 10.5825 50.7007 9.97412 50.7007 cv
9.35107 50.7007 8.854 50.5327 8.4834 50.1973 cv
8.11914 49.8608 7.93018 49.3989 7.93018 48.8252 cv
7.93018 48.3076 8.09814 47.9014 8.42725 47.6006 cv
8.76318 47.3066 9.21094 47.1523 9.77783 47.1523 cv
9.5957 47.7822 mo
9.25293 47.7896 8.97998 47.8872 8.77002 48.0693 cv
8.56738 48.2583 8.4624 48.5103 8.4624 48.8184 cv
8.4624 49.168 8.56738 49.4482 8.76318 49.6582 cv
8.95898 49.8682 9.23877 49.9941 9.5957 50.022 cv
9.5957 47.7822 li
f
8.1333 43.6812 mo
8.72803 43.6812 li
8.64404 43.8633 8.57373 44.0454 8.5249 44.2339 cv
8.4834 44.4302 8.45508 44.626 8.45508 44.8291 cv
8.45508 45.144 8.50391 45.3818 8.60205 45.5356 cv
8.7002 45.6895 8.83984 45.7671 9.02881 45.7671 cv
9.17578 45.7671 9.2876 45.7109 9.37158 45.5991 cv
9.45605 45.4868 9.54004 45.2632 9.60986 44.9268 cv
9.65918 44.71 li
9.75684 44.2622 9.89697 43.9473 10.0645 43.7588 cv
10.2397 43.5762 10.4844 43.4785 10.7925 43.4785 cv
11.1494 43.4785 11.4297 43.6182 11.6323 43.8984 cv
11.8423 44.1782 11.9399 44.5703 11.9399 45.0601 cv
11.9399 45.27 11.9194 45.48 11.8843 45.7041 cv
11.8496 45.9277 11.7935 46.1587 11.7095 46.4033 cv
11.0581 46.4033 li
11.1846 46.1729 11.2759 45.9419 11.3315 45.7178 cv
11.3945 45.4941 11.4224 45.27 11.4224 45.0459 cv
11.4224 44.752 11.3735 44.521 11.2759 44.3604 cv
11.1772 44.2061 11.0303 44.1226 10.8418 44.1226 cv
10.6733 44.1226 10.5405 44.1851 10.4497 44.2974 cv
10.3589 44.4092 10.2676 44.6611 10.1836 45.0527 cv
10.1348 45.27 li
10.0508 45.6621 9.9248 45.9487 9.75684 46.1167 cv
9.58887 46.292 9.35791 46.3755 9.05713 46.3755 cv
8.7002 46.3755 8.41992 46.2495 8.22412 45.998 cv
8.02832 45.7456 7.93018 45.3818 7.93018 44.9063 cv
7.93018 44.6753 7.95117 44.458 7.98584 44.248 cv
8.021 44.0454 8.06982 43.8564 8.1333 43.6812 cv
f
8.16797 37.4951 mo
8.75586 37.4951 li
8.6582 37.6768 8.58789 37.8521 8.53906 38.0337 cv
8.49023 38.2158 8.46191 38.3906 8.46191 38.5723 cv
8.46191 38.9785 8.59521 39.3003 8.854 39.5244 cv
9.11279 39.7485 9.47705 39.8604 9.93848 39.8604 cv
10.4077 39.8604 10.7715 39.7485 11.0303 39.5244 cv
11.2896 39.3003 11.4155 38.9785 11.4155 38.5723 cv
11.4155 38.3906 11.3945 38.2158 11.3452 38.0337 cv
11.2964 37.8521 11.2192 37.6768 11.1211 37.4951 cv
11.7026 37.4951 li
11.7866 37.6768 11.8491 37.8584 11.8843 38.0405 cv
11.9194 38.2295 11.9404 38.4326 11.9404 38.6426 cv
11.9404 39.2163 11.7651 39.6787 11.4014 40.0142 cv
11.0444 40.3574 10.5547 40.5254 9.93848 40.5254 cv
9.31592 40.5254 8.82568 40.3574 8.46924 40.0142 cv
8.1123 39.6714 7.93018 39.2026 7.93018 38.6006 cv
7.93018 38.4043 7.95117 38.2158 7.99316 38.0337 cv
8.03516 37.8521 8.09131 37.6699 8.16797 37.4951 cv
f
9.77783 33.1279 mo
10.0854 33.1279 li
10.0854 36.0181 li
10.5195 35.9902 10.8555 35.8643 11.0796 35.6265 cv
11.3037 35.395 11.4155 35.0732 11.4155 34.6538 cv
11.4155 34.4155 11.3872 34.1772 11.3315 33.9536 cv
11.2759 33.7295 11.1846 33.4985 11.0581 33.2749 cv
11.6533 33.2749 li
11.751 33.4985 11.8286 33.7295 11.8701 33.9673 cv
11.9121 34.2056 11.9404 34.4502 11.9404 34.6885 cv
11.9404 35.3042 11.7656 35.7871 11.4155 36.144 cv
11.0654 36.501 10.5825 36.6758 9.97412 36.6758 cv
9.35107 36.6758 8.854 36.5083 8.4834 36.1719 cv
8.11914 35.8359 7.93018 35.374 7.93018 34.8003 cv
7.93018 34.2822 8.09814 33.877 8.42725 33.5757 cv
8.76318 33.2817 9.21094 33.1279 9.77783 33.1279 cv
9.5957 33.7578 mo
9.25293 33.7646 8.97998 33.8623 8.77002 34.0444 cv
8.56738 34.2334 8.4624 34.4854 8.4624 34.7935 cv
8.4624 35.1436 8.56738 35.4229 8.76318 35.6328 cv
8.95898 35.8428 9.23877 35.9692 9.5957 35.9971 cv
9.5957 33.7578 li
f
6.53076 31.4692 mo
11.8491 31.4692 li
11.8491 32.0991 li
6.53076 32.0991 li
6.53076 31.4692 li
cp
f
8.1333 27.7109 mo
8.72803 27.7109 li
8.64404 27.8931 8.57373 28.0747 8.5249 28.2637 cv
8.4834 28.46 8.45508 28.6558 8.45508 28.8589 cv
8.45508 29.1738 8.50391 29.4116 8.60205 29.5654 cv
8.7002 29.7192 8.83984 29.7964 9.02881 29.7964 cv
9.17578 29.7964 9.2876 29.7407 9.37158 29.6289 cv
9.45605 29.5166 9.54004 29.293 9.60986 28.9565 cv
9.65918 28.7397 li
9.75684 28.292 9.89697 27.9771 10.0645 27.7881 cv
10.2397 27.606 10.4844 27.5078 10.7925 27.5078 cv
11.1494 27.5078 11.4297 27.6479 11.6323 27.9277 cv
11.8423 28.208 11.9399 28.5996 11.9399 29.0898 cv
11.9399 29.2998 11.9194 29.5098 11.8843 29.7334 cv
11.8496 29.9575 11.7935 30.1885 11.7095 30.4331 cv
11.0581 30.4331 li
11.1846 30.2021 11.2759 29.9717 11.3315 29.7476 cv
11.3945 29.5234 11.4224 29.2998 11.4224 29.0757 cv
11.4224 28.7817 11.3735 28.5508 11.2759 28.3896 cv
11.1772 28.2358 11.0303 28.1519 10.8418 28.1519 cv
10.6733 28.1519 10.5405 28.2148 10.4497 28.3271 cv
10.3589 28.439 10.2676 28.6909 10.1836 29.0825 cv
10.1348 29.2998 li
10.0508 29.6914 9.9248 29.9785 9.75684 30.1465 cv
9.58887 30.3213 9.35791 30.4053 9.05713 30.4053 cv
8.7002 30.4053 8.41992 30.2793 8.22412 30.0273 cv
8.02832 29.7754 7.93018 29.4116 7.93018 28.9355 cv
7.93018 28.7046 7.95117 28.4878 7.98584 28.2778 cv
8.021 28.0747 8.06982 27.8862 8.1333 27.7109 cv
f
8.02148 25.8774 mo
11.8496 25.8774 li
11.8496 26.5073 li
8.02148 26.5073 li
8.02148 25.8774 li
cp
6.53076 25.8774 mo
7.32861 25.8774 li
7.32861 26.5073 li
6.53076 26.5073 li
6.53076 25.8774 li
cp
f
10.3379 24.6245 mo
8.021 24.6245 li
8.021 23.9951 li
10.3169 23.9951 li
10.6807 23.9951 10.9463 23.9248 11.1284 23.7852 cv
11.3105 23.645 11.4014 23.4351 11.4014 23.1479 cv
11.4014 22.812 11.2964 22.5391 11.0796 22.3433 cv
10.8623 22.1475 10.5684 22.0493 10.1904 22.0493 cv
8.021 22.0493 li
8.021 21.4194 li
11.8491 21.4194 li
11.8491 22.0493 li
11.2612 22.0493 li
11.4995 22.2031 11.6675 22.3853 11.7793 22.5811 cv
11.8843 22.7842 11.9404 23.0151 11.9404 23.2813 cv
11.9404 23.7217 11.8071 24.0576 11.5347 24.2817 cv
11.2686 24.5127 10.8696 24.6245 10.3379 24.6245 cv
f
8.1333 17.6821 mo
8.72803 17.6821 li
8.64404 17.8643 8.57373 18.0464 8.5249 18.2349 cv
8.4834 18.4312 8.45508 18.627 8.45508 18.8301 cv
8.45508 19.145 8.50391 19.3828 8.60205 19.5366 cv
8.7002 19.6904 8.83984 19.7681 9.02881 19.7681 cv
9.17578 19.7681 9.2876 19.7119 9.37158 19.6001 cv
9.45605 19.4878 9.54004 19.2642 9.60986 18.9277 cv
9.65918 18.7109 li
9.75684 18.2632 9.89697 17.9482 10.0645 17.7598 cv
10.2397 17.5771 10.4844 17.4795 10.7925 17.4795 cv
11.1494 17.4795 11.4297 17.6191 11.6323 17.8994 cv
11.8423 18.1792 11.9399 18.5713 11.9399 19.061 cv
11.9399 19.271 11.9194 19.481 11.8843 19.7051 cv
11.8496 19.9287 11.7935 20.1597 11.7095 20.4043 cv
11.0581 20.4043 li
11.1846 20.1738 11.2759 19.9429 11.3315 19.7188 cv
11.3945 19.4951 11.4224 19.271 11.4224 19.0469 cv
11.4224 18.7529 11.3735 18.522 11.2759 18.3613 cv
11.1772 18.207 11.0303 18.1235 10.8418 18.1235 cv
10.6733 18.1235 10.5405 18.186 10.4497 18.2983 cv
10.3589 18.4102 10.2676 18.6621 10.1836 19.0537 cv
10.1348 19.271 li
10.0508 19.6631 9.9248 19.9497 9.75684 20.1177 cv
9.58887 20.293 9.35791 20.3765 9.05713 20.3765 cv
8.7002 20.3765 8.41992 20.2505 8.22412 19.999 cv
8.02832 19.7466 7.93018 19.3828 7.93018 18.9072 cv
7.93018 18.6763 7.95117 18.459 7.98584 18.249 cv
8.021 18.0464 8.06982 17.8574 8.1333 17.6821 cv
f
6.5376 16.5767 mo
6.5376 16.0303 li
7.07666 15.6948 7.60107 15.436 8.11914 15.2676 cv
8.63721 15.1001 9.14795 15.0088 9.65186 15.0088 cv
10.1626 15.0088 10.6733 15.1001 11.1914 15.2676 cv
11.7095 15.436 12.2271 15.6948 12.7661 16.0303 cv
12.7661 16.5767 li
12.2412 16.2754 11.7305 16.0518 11.2124 15.8975 cv
10.7017 15.751 10.1836 15.6738 9.65186 15.6738 cv
9.12695 15.6738 8.60889 15.751 8.09863 15.8975 cv
7.58691 16.0518 7.06934 16.2754 6.5376 16.5767 cv
f
.3375 lw
24.2998 123.93 mo
174.96 123.93 li
@
24.2998 14.5801 mo
174.96 14.5801 li
@
174.96 123.93 mo
174.96 14.5801 li
@
24.2998 123.93 mo
24.2998 14.5801 li
@
grestore
grestore
93.8252 161.979 mo
93.8252 161.947 93.8252 161.925 93.6392 161.739 cv
92.269 160.358 91.9185 158.287 91.9185 156.61 cv
91.9185 154.704 92.335 152.797 93.6826 151.427 cv
93.8252 151.296 93.8252 151.273 93.8252 151.24 cv
93.8252 151.163 93.7813 151.131 93.7158 151.131 cv
93.606 151.131 92.6196 151.876 91.9731 153.268 cv
91.4146 154.474 91.2827 155.69 91.2827 156.61 cv
91.2827 157.465 91.4033 158.791 92.0063 160.029 cv
92.6636 161.378 93.606 162.09 93.7158 162.09 cv
93.7813 162.09 93.8252 162.057 93.8252 161.979 cv
cp
false sop
0 1 1 0 cmyk
f
98.1089 158.517 mo
98.1528 158.956 98.4487 159.416 98.9639 159.416 cv
99.1938 159.416 99.8628 159.263 99.8628 158.374 cv
99.8628 157.761 li
99.5884 157.761 li
99.5884 158.374 li
99.5884 159.011 99.3145 159.076 99.1938 159.076 cv
98.8325 159.076 98.7886 158.583 98.7886 158.528 cv
98.7886 156.337 li
98.7886 155.876 98.7886 155.448 98.394 155.043 cv
97.9668 154.616 97.4189 154.44 96.8926 154.44 cv
95.9941 154.44 95.2378 154.956 95.2378 155.679 cv
95.2378 156.008 95.457 156.194 95.7422 156.194 cv
96.0488 156.194 96.2461 155.975 96.2461 155.69 cv
96.2461 155.558 96.1914 155.196 95.687 155.186 cv
95.9829 154.802 96.52 154.682 96.8706 154.682 cv
97.4077 154.682 98.0322 155.108 98.0322 156.085 cv
98.0322 156.489 li
97.4736 156.522 96.7065 156.556 96.0161 156.884 cv
95.1938 157.257 94.9199 157.827 94.9199 158.31 cv
94.9199 159.188 95.9829 159.46 96.6733 159.46 cv
97.397 159.46 97.9009 159.026 98.1089 158.517 cv
cp
98.0322 156.72 mo
98.0322 157.815 li
98.0322 158.856 97.2432 159.229 96.75 159.229 cv
96.2134 159.229 95.7642 158.846 95.7642 158.298 cv
95.7642 157.695 96.2241 156.786 98.0322 156.72 cv
cp
f
103.106 156.61 mo
103.106 155.755 102.986 154.43 102.383 153.191 cv
101.726 151.843 100.783 151.131 100.673 151.131 cv
100.608 151.131 100.564 151.175 100.564 151.24 cv
100.564 151.273 100.564 151.296 100.772 151.493 cv
101.846 152.577 102.471 154.319 102.471 156.61 cv
102.471 158.484 102.065 160.413 100.707 161.794 cv
100.564 161.925 100.564 161.947 100.564 161.979 cv
100.564 162.046 100.608 162.09 100.673 162.09 cv
100.783 162.09 101.77 161.345 102.416 159.952 cv
102.975 158.747 103.106 157.53 103.106 156.61 cv
cp
f
gsave
200.435 145.8 mo
394.834 145.8 li
394.834 0 li
200.435 0 li
200.435 145.8 li
cp
clp
200.435 145.8 mo
394.834 145.8 li
394.834 0 li
200.435 0 li
200.435 145.8 li
cp
0 0 0 0 cmyk
f
224.735 123.93 mo
375.395 123.93 li
375.395 14.5801 li
224.735 14.5801 li
224.735 123.93 li
cp
f
gsave
224.735 123.93 mo
375.395 123.93 li
375.395 14.5801 li
224.735 14.5801 li
224.735 123.93 li
cp
clp
.3375 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
224.735 100.748 mo
254.867 98.998 li
284.999 97.6865 li
315.131 84.1265 li
345.263 83.252 li
375.395 83.252 li
.884 .769 0 0 cmyk
@
grestore
224.735 123.93 mo
224.735 122.58 li
224.735 123.93 li
cp
0 0 0 1 cmyk
f
.16875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
224.735 123.93 mo
224.735 122.58 li
@
224.735 15.9302 mo
224.735 14.5801 li
224.735 15.9302 li
cp
f
224.735 14.5801 mo
224.735 15.9302 li
@
224.083 130.083 mo
225.21 130.083 li
225.21 126.192 li
223.986 126.437 li
223.986 125.808 li
225.204 125.562 li
225.897 125.562 li
225.897 130.083 li
227.023 130.083 li
227.023 130.665 li
224.083 130.665 li
224.083 130.083 li
cp
f
254.867 123.93 mo
254.867 122.58 li
254.867 123.93 li
cp
f
254.867 123.93 mo
254.867 122.58 li
@
254.867 15.9302 mo
254.867 14.5801 li
254.867 15.9302 li
cp
f
254.867 14.5801 mo
254.867 15.9302 li
@
gsave
200.435 145.8 mo
394.834 145.8 li
394.834 0 li
200.435 0 li
200.435 145.8 li
cp
clp
254.589 130.083 mo
256.997 130.083 li
256.997 130.665 li
253.756 130.665 li
253.756 130.083 li
254.015 129.817 254.372 129.454 254.827 128.991 cv
255.275 128.536 255.562 128.243 255.681 128.11 cv
255.905 127.864 256.058 127.655 256.143 127.479 cv
256.227 127.312 256.276 127.138 256.276 126.969 cv
256.276 126.703 256.177 126.479 255.989 126.311 cv
255.799 126.143 255.555 126.052 255.247 126.052 cv
255.03 126.052 254.799 126.094 254.561 126.165 cv
254.323 126.241 254.064 126.353 253.792 126.507 cv
253.792 125.808 li
254.071 125.695 254.331 125.611 254.568 125.555 cv
254.806 125.499 255.03 125.471 255.233 125.471 cv
255.757 125.471 256.177 125.604 256.493 125.871 cv
256.807 126.137 256.968 126.486 256.968 126.927 cv
256.968 127.138 256.926 127.34 256.849 127.522 cv
256.773 127.711 256.632 127.935 256.422 128.187 cv
256.367 128.257 256.185 128.446 255.876 128.761 cv
255.569 129.075 255.142 129.517 254.589 130.083 cv
f
284.999 123.93 mo
284.999 122.58 li
f
284.999 123.93 mo
284.999 122.58 li
@
284.999 14.5801 mo
284.999 15.9302 li
f
284.999 14.5801 mo
284.999 15.9302 li
@
286.158 127.914 mo
286.487 127.983 286.746 128.131 286.928 128.354 cv
287.11 128.579 287.208 128.858 287.208 129.181 cv
287.208 129.685 287.033 130.076 286.69 130.349 cv
286.34 130.622 285.85 130.755 285.213 130.755 cv
284.997 130.755 284.772 130.733 284.548 130.692 cv
284.325 130.657 284.086 130.594 283.848 130.511 cv
283.848 129.845 li
284.038 129.958 284.248 130.042 284.478 130.098 cv
284.703 130.153 284.94 130.182 285.192 130.182 cv
285.626 130.182 285.955 130.098 286.179 129.93 cv
286.403 129.762 286.522 129.51 286.522 129.181 cv
286.522 128.887 286.417 128.649 286.207 128.481 cv
285.998 128.313 285.703 128.222 285.325 128.222 cv
284.73 128.222 li
284.73 127.655 li
285.353 127.655 li
285.689 127.655 285.948 127.592 286.13 127.452 cv
286.312 127.319 286.403 127.123 286.403 126.864 cv
286.403 126.604 286.305 126.402 286.123 126.262 cv
285.934 126.122 285.668 126.052 285.325 126.052 cv
285.136 126.052 284.933 126.073 284.716 126.115 cv
284.5 126.157 284.261 126.22 284.002 126.304 cv
284.002 125.688 li
284.261 125.618 284.506 125.562 284.738 125.527 cv
284.961 125.492 285.178 125.471 285.388 125.471 cv
285.906 125.471 286.319 125.59 286.626 125.828 cv
286.935 126.066 287.089 126.388 287.089 126.794 cv
287.089 127.074 287.004 127.312 286.844 127.508 cv
286.683 127.704 286.452 127.844 286.158 127.914 cv
f
315.13 123.93 mo
315.13 122.58 li
f
315.13 123.93 mo
315.13 122.58 li
@
315.13 14.5801 mo
315.13 15.9302 li
f
315.13 14.5801 mo
315.13 15.9302 li
@
315.917 126.165 mo
314.174 128.886 li
315.917 128.886 li
315.917 126.165 li
315.736 125.563 mo
316.603 125.563 li
316.603 128.886 li
317.331 128.886 li
317.331 129.461 li
316.603 129.461 li
316.603 130.664 li
315.917 130.664 li
315.917 129.461 li
313.615 129.461 li
313.615 128.796 li
315.736 125.563 li
cp
f
345.263 123.93 mo
345.263 122.58 li
f
345.263 123.93 mo
345.263 122.58 li
@
345.263 14.5801 mo
345.263 15.9302 li
f
345.263 14.5801 mo
345.263 15.9302 li
@
344.368 125.563 mo
347.077 125.563 li
347.077 126.144 li
344.998 126.144 li
344.998 127.396 li
345.096 127.361 345.201 127.333 345.299 127.319 cv
345.397 127.306 345.501 127.291 345.6 127.291 cv
346.167 127.291 346.615 127.452 346.951 127.76 cv
347.287 128.075 347.455 128.495 347.455 129.026 cv
347.455 129.579 347.28 130.007 346.937 130.308 cv
346.593 130.608 346.111 130.755 345.495 130.755 cv
345.278 130.755 345.061 130.733 344.837 130.706 cv
344.613 130.671 344.389 130.622 344.151 130.546 cv
344.151 129.853 li
344.354 129.964 344.564 130.048 344.788 130.104 cv
345.005 130.16 345.236 130.182 345.481 130.182 cv
345.873 130.182 346.188 130.083 346.418 129.873 cv
346.642 129.663 346.761 129.384 346.761 129.026 cv
346.761 128.677 346.642 128.396 346.418 128.187 cv
346.188 127.977 345.873 127.872 345.481 127.872 cv
345.299 127.872 345.11 127.893 344.928 127.935 cv
344.747 127.977 344.557 128.04 344.368 128.124 cv
344.368 125.563 li
f
375.395 123.93 mo
375.395 122.58 li
f
375.395 123.93 mo
375.395 122.58 li
@
375.395 14.5801 mo
375.395 15.9302 li
f
375.395 14.5801 mo
375.395 15.9302 li
@
375.943 127.837 mo
375.635 127.837 375.39 127.948 375.208 128.159 cv
375.026 128.368 374.935 128.663 374.935 129.026 cv
374.935 129.397 375.026 129.691 375.208 129.901 cv
375.39 130.111 375.635 130.216 375.943 130.216 cv
376.25 130.216 376.496 130.111 376.678 129.901 cv
376.86 129.691 376.951 129.397 376.951 129.026 cv
376.951 128.663 376.86 128.368 376.678 128.159 cv
376.496 127.948 376.25 127.837 375.943 127.837 cv
377.315 125.674 mo
377.315 126.304 li
377.14 126.22 376.964 126.157 376.79 126.115 cv
376.608 126.073 376.433 126.052 376.265 126.052 cv
375.803 126.052 375.453 126.206 375.215 126.514 cv
374.977 126.822 374.837 127.291 374.809 127.907 cv
374.942 127.711 375.11 127.558 375.313 127.452 cv
375.516 127.347 375.74 127.291 375.985 127.291 cv
376.496 127.291 376.902 127.452 377.196 127.76 cv
377.49 128.067 377.643 128.495 377.643 129.026 cv
377.643 129.552 377.483 129.972 377.174 130.286 cv
376.867 130.601 376.455 130.755 375.943 130.755 cv
375.355 130.755 374.9 130.531 374.592 130.083 cv
374.277 129.636 374.124 128.978 374.124 128.116 cv
374.124 127.312 374.312 126.668 374.698 126.192 cv
375.076 125.717 375.593 125.471 376.237 125.471 cv
376.405 125.471 376.58 125.493 376.762 125.521 cv
376.937 125.555 377.119 125.604 377.315 125.674 cv
f
279.746 134.677 mo
279.746 138.646 li
280.579 138.646 li
281.279 138.646 281.796 138.491 282.125 138.17 cv
282.448 137.848 282.615 137.344 282.615 136.658 cv
282.615 135.972 282.448 135.476 282.125 135.153 cv
281.796 134.839 281.279 134.677 280.579 134.677 cv
279.746 134.677 li
279.053 134.11 mo
280.474 134.11 li
281.46 134.11 282.189 134.32 282.65 134.727 cv
283.113 135.14 283.343 135.783 283.343 136.658 cv
283.343 137.54 283.105 138.184 282.643 138.597 cv
282.181 139.01 281.454 139.213 280.474 139.213 cv
279.053 139.213 li
279.053 134.11 li
f
286.157 137.288 mo
285.646 137.288 285.295 137.351 285.1 137.463 cv
284.904 137.581 284.806 137.778 284.806 138.058 cv
284.806 138.282 284.875 138.464 285.023 138.589 cv
285.169 138.723 285.373 138.786 285.625 138.786 cv
285.975 138.786 286.254 138.667 286.464 138.415 cv
286.674 138.169 286.78 137.841 286.78 137.428 cv
286.78 137.288 li
286.157 137.288 li
287.41 137.028 mo
287.41 139.212 li
286.78 139.212 li
286.78 138.632 li
286.632 138.87 286.451 139.038 286.241 139.142 cv
286.031 139.247 285.765 139.304 285.457 139.304 cv
285.065 139.304 284.75 139.198 284.519 138.981 cv
284.288 138.765 284.176 138.471 284.176 138.1 cv
284.176 137.673 284.316 137.351 284.61 137.127 cv
284.897 136.91 285.324 136.798 285.898 136.798 cv
286.78 136.798 li
286.78 136.735 li
286.78 136.448 286.681 136.224 286.493 136.063 cv
286.304 135.909 286.038 135.825 285.695 135.825 cv
285.471 135.825 285.261 135.854 285.051 135.909 cv
284.841 135.965 284.645 136.042 284.456 136.14 cv
284.456 135.56 li
284.68 135.476 284.904 135.405 285.121 135.363 cv
285.337 135.321 285.547 135.294 285.757 135.294 cv
286.31 135.294 286.723 135.44 286.997 135.728 cv
287.269 136.015 287.41 136.448 287.41 137.028 cv
f
290.299 139.563 mo
290.118 140.011 289.943 140.312 289.775 140.451 cv
289.607 140.591 289.383 140.661 289.103 140.661 cv
288.599 140.661 li
288.599 140.136 li
288.97 140.136 li
289.138 140.136 289.271 140.095 289.369 140.011 cv
289.466 139.927 289.572 139.737 289.691 139.429 cv
289.803 139.149 li
288.256 135.384 li
288.921 135.384 li
290.118 138.38 li
291.315 135.384 li
291.979 135.384 li
290.299 139.563 li
f
298.257 136.903 mo
298.257 139.213 li
297.627 139.213 li
297.627 136.924 li
297.627 136.56 297.55 136.294 297.41 136.112 cv
297.27 135.931 297.06 135.839 296.781 135.839 cv
296.437 135.839 296.171 135.951 295.975 136.168 cv
295.779 136.386 295.681 136.679 295.681 137.05 cv
295.681 139.213 li
295.051 139.213 li
295.051 135.384 li
295.681 135.384 li
295.681 135.979 li
295.829 135.755 296.003 135.581 296.213 135.468 cv
296.417 135.356 296.654 135.293 296.92 135.293 cv
297.354 135.293 297.69 135.434 297.914 135.706 cv
298.138 135.979 298.257 136.378 298.257 136.903 cv
f
299.447 137.7 mo
299.447 135.384 li
300.077 135.384 li
300.077 137.68 li
300.077 138.044 300.146 138.31 300.287 138.491 cv
300.426 138.674 300.636 138.765 300.923 138.765 cv
301.259 138.765 301.532 138.659 301.728 138.442 cv
301.924 138.226 302.022 137.932 302.022 137.554 cv
302.022 135.384 li
302.652 135.384 li
302.652 139.212 li
302.022 139.212 li
302.022 138.624 li
301.869 138.862 301.686 139.03 301.49 139.142 cv
301.287 139.247 301.056 139.304 300.791 139.304 cv
300.349 139.304 300.013 139.171 299.79 138.897 cv
299.558 138.632 299.447 138.232 299.447 137.7 cv
f
306.927 136.119 mo
307.082 135.839 307.271 135.636 307.488 135.496 cv
307.705 135.363 307.963 135.294 308.264 135.294 cv
308.657 135.294 308.964 135.434 309.181 135.714 cv
309.398 135.993 309.51 136.393 309.51 136.903 cv
309.51 139.212 li
308.88 139.212 li
308.88 136.924 li
308.88 136.56 308.81 136.287 308.684 136.104 cv
308.552 135.931 308.355 135.839 308.089 135.839 cv
307.76 135.839 307.501 135.951 307.313 136.169 cv
307.124 136.385 307.033 136.679 307.033 137.05 cv
307.033 139.212 li
306.403 139.212 li
306.403 136.924 li
306.403 136.56 306.333 136.287 306.207 136.104 cv
306.074 135.931 305.871 135.839 305.605 135.839 cv
305.284 135.839 305.024 135.951 304.835 136.169 cv
304.646 136.385 304.555 136.679 304.555 137.05 cv
304.555 139.212 li
303.925 139.212 li
303.925 135.384 li
304.555 135.384 li
304.555 135.979 li
304.696 135.748 304.871 135.573 305.074 135.462 cv
305.269 135.35 305.507 135.294 305.787 135.294 cv
306.067 135.294 306.298 135.363 306.494 135.503 cv
306.69 135.644 306.83 135.854 306.927 136.119 cv
f
313.513 137.302 mo
313.513 136.841 313.416 136.483 313.226 136.218 cv
313.031 135.951 312.772 135.818 312.443 135.818 cv
312.107 135.818 311.847 135.951 311.659 136.218 cv
311.463 136.483 311.372 136.841 311.372 137.302 cv
311.372 137.764 311.463 138.128 311.659 138.394 cv
311.847 138.659 312.107 138.786 312.443 138.786 cv
312.772 138.786 313.031 138.659 313.226 138.394 cv
313.416 138.128 313.513 137.764 313.513 137.302 cv
311.372 135.965 mo
311.498 135.741 311.666 135.573 311.869 135.462 cv
312.072 135.35 312.317 135.294 312.596 135.294 cv
313.058 135.294 313.436 135.481 313.731 135.847 cv
314.017 136.218 314.165 136.7 314.165 137.302 cv
314.165 137.903 314.017 138.394 313.731 138.758 cv
313.436 139.122 313.058 139.304 312.596 139.304 cv
312.317 139.304 312.072 139.247 311.869 139.142 cv
311.666 139.038 311.498 138.87 311.372 138.639 cv
311.372 139.212 li
310.742 139.212 li
310.742 133.894 li
311.372 133.894 li
311.372 135.965 li
f
318.482 137.142 mo
318.482 137.448 li
315.592 137.448 li
315.621 137.882 315.746 138.219 315.984 138.442 cv
316.214 138.667 316.537 138.778 316.957 138.778 cv
317.195 138.778 317.432 138.751 317.657 138.694 cv
317.88 138.639 318.111 138.548 318.335 138.421 cv
318.335 139.017 li
318.111 139.114 317.88 139.191 317.642 139.233 cv
317.405 139.275 317.16 139.304 316.921 139.304 cv
316.305 139.304 315.823 139.128 315.465 138.778 cv
315.109 138.429 314.934 137.946 314.934 137.337 cv
314.934 136.714 315.102 136.218 315.438 135.847 cv
315.774 135.482 316.236 135.293 316.809 135.293 cv
317.328 135.293 317.733 135.462 318.035 135.79 cv
318.329 136.126 318.482 136.574 318.482 137.142 cv
317.852 136.959 mo
317.845 136.616 317.748 136.343 317.566 136.134 cv
317.376 135.931 317.125 135.825 316.817 135.825 cv
316.466 135.825 316.187 135.931 315.976 136.126 cv
315.767 136.321 315.641 136.603 315.613 136.959 cv
317.852 136.959 li
f
321.73 135.972 mo
321.66 135.931 321.583 135.902 321.499 135.882 cv
321.415 135.867 321.324 135.853 321.226 135.853 cv
320.869 135.853 320.596 135.972 320.407 136.203 cv
320.21 136.435 320.12 136.763 320.12 137.197 cv
320.12 139.213 li
319.49 139.213 li
319.49 135.384 li
320.12 135.384 li
320.12 135.979 li
320.246 135.748 320.42 135.573 320.63 135.462 cv
320.84 135.349 321.1 135.294 321.408 135.294 cv
321.45 135.294 321.499 135.3 321.554 135.3 cv
321.603 135.308 321.66 135.314 321.73 135.329 cv
321.73 135.972 li
f
224.735 123.93 mo
226.084 123.93 li
f
224.735 123.93 mo
226.084 123.93 li
@
375.395 123.93 mo
374.045 123.93 li
f
375.395 123.93 mo
374.045 123.93 li
@
216.59 125.303 mo
217.717 125.303 li
217.717 121.412 li
216.493 121.657 li
216.493 121.027 li
217.71 120.782 li
218.403 120.782 li
218.403 125.303 li
219.53 125.303 li
219.53 125.884 li
216.59 125.884 li
216.59 125.303 li
cp
f
222.399 123.462 mo
222.07 123.462 221.811 123.554 221.623 123.729 cv
221.433 123.903 221.342 124.142 221.342 124.449 cv
221.342 124.757 221.433 125.002 221.623 125.177 cv
221.811 125.352 222.07 125.436 222.399 125.436 cv
222.721 125.436 222.98 125.352 223.169 125.17 cv
223.358 124.995 223.456 124.757 223.456 124.449 cv
223.456 124.142 223.358 123.903 223.176 123.729 cv
222.987 123.554 222.728 123.462 222.399 123.462 cv
221.707 123.168 mo
221.413 123.099 221.181 122.958 221.013 122.755 cv
220.845 122.553 220.768 122.308 220.768 122.014 cv
220.768 121.608 220.909 121.286 221.203 121.048 cv
221.489 120.81 221.888 120.691 222.399 120.691 cv
222.903 120.691 223.302 120.81 223.596 121.048 cv
223.882 121.286 224.03 121.608 224.03 122.014 cv
224.03 122.308 223.946 122.553 223.778 122.755 cv
223.61 122.958 223.386 123.099 223.092 123.168 cv
223.42 123.246 223.679 123.399 223.869 123.624 cv
224.051 123.848 224.149 124.127 224.149 124.449 cv
224.149 124.946 223.995 125.324 223.694 125.583 cv
223.386 125.849 222.959 125.975 222.399 125.975 cv
221.833 125.975 221.398 125.849 221.097 125.583 cv
220.796 125.324 220.65 124.946 220.65 124.449 cv
220.65 124.127 220.741 123.848 220.929 123.624 cv
221.112 123.399 221.371 123.246 221.707 123.168 cv
221.455 122.077 mo
221.455 122.343 221.532 122.553 221.699 122.699 cv
221.867 122.847 222.098 122.917 222.399 122.917 cv
222.693 122.917 222.924 122.847 223.092 122.699 cv
223.259 122.553 223.343 122.343 223.343 122.077 cv
223.343 121.811 223.259 121.608 223.092 121.461 cv
222.924 121.314 222.693 121.237 222.399 121.237 cv
222.098 121.237 221.867 121.314 221.699 121.461 cv
221.532 121.608 221.455 121.811 221.455 122.077 cv
f
224.735 102.06 mo
226.084 102.06 li
f
224.735 102.06 mo
226.084 102.06 li
@
375.395 102.06 mo
374.045 102.06 li
f
375.395 102.06 mo
374.045 102.06 li
@
216.601 103.433 mo
217.728 103.433 li
217.728 99.542 li
216.502 99.7866 li
216.502 99.1567 li
217.721 98.9116 li
218.414 98.9116 li
218.414 103.433 li
219.541 103.433 li
219.541 104.014 li
216.601 104.014 li
216.601 103.433 li
cp
f
220.954 103.909 mo
220.954 103.279 li
221.123 103.363 221.297 103.426 221.479 103.468 cv
221.654 103.51 221.829 103.531 222.003 103.531 cv
222.452 103.531 222.801 103.384 223.04 103.076 cv
223.278 102.768 223.417 102.307 223.459 101.677 cv
223.32 101.873 223.152 102.026 222.956 102.131 cv
222.752 102.236 222.529 102.285 222.284 102.285 cv
221.766 102.285 221.36 102.131 221.066 101.823 cv
220.772 101.515 220.625 101.096 220.625 100.557 cv
220.625 100.039 220.779 99.6191 221.087 99.2969 cv
221.395 98.9819 221.808 98.8213 222.326 98.8213 cv
222.914 98.8213 223.369 99.0518 223.676 99.5 cv
223.985 99.9546 224.145 100.612 224.145 101.467 cv
224.145 102.278 223.95 102.915 223.572 103.391 cv
223.187 103.867 222.675 104.105 222.032 104.105 cv
221.857 104.105 221.682 104.084 221.507 104.056 cv
221.325 104.028 221.143 103.979 220.954 103.909 cv
222.326 101.747 mo
222.633 101.747 222.878 101.641 223.06 101.431 cv
223.243 101.221 223.333 100.928 223.333 100.557 cv
223.333 100.192 223.243 99.8984 223.06 99.6885 cv
222.878 99.479 222.633 99.3667 222.326 99.3667 cv
222.018 99.3667 221.773 99.479 221.591 99.6885 cv
221.409 99.8984 221.318 100.192 221.318 100.557 cv
221.318 100.928 221.409 101.221 221.591 101.431 cv
221.773 101.641 222.018 101.747 222.326 101.747 cv
f
224.735 80.1899 mo
226.084 80.1899 li
f
224.735 80.1899 mo
226.084 80.1899 li
@
375.395 80.1899 mo
374.045 80.1899 li
f
375.395 80.1899 mo
374.045 80.1899 li
@
216.792 81.563 mo
219.2 81.563 li
219.2 82.144 li
215.959 82.144 li
215.959 81.563 li
216.218 81.2969 216.575 80.9331 217.03 80.4717 cv
217.478 80.0161 217.765 79.7227 217.884 79.5894 cv
218.108 79.3447 218.261 79.1348 218.345 78.9595 cv
218.429 78.7915 218.479 78.6172 218.479 78.4487 cv
218.479 78.1826 218.38 77.959 218.192 77.791 cv
218.002 77.6226 217.757 77.5317 217.45 77.5317 cv
217.233 77.5317 217.002 77.5742 216.764 77.644 cv
216.526 77.7207 216.267 77.8325 215.995 77.9868 cv
215.995 77.2871 li
216.274 77.1748 216.533 77.0913 216.771 77.0352 cv
217.009 76.979 217.233 76.9512 217.436 76.9512 cv
217.96 76.9512 218.38 77.084 218.696 77.3501 cv
219.01 77.6162 219.171 77.9658 219.171 78.4067 cv
219.171 78.6172 219.129 78.8193 219.052 79.0015 cv
218.976 79.1909 218.835 79.4146 218.625 79.6665 cv
218.57 79.7363 218.388 79.9253 218.08 80.2402 cv
217.772 80.5552 217.345 80.9961 216.792 81.563 cv
f
222.125 77.4971 mo
221.768 77.4971 221.501 77.6719 221.32 78.022 cv
221.138 78.3716 221.054 78.8965 221.054 79.5967 cv
221.054 80.2964 221.138 80.8213 221.32 81.1714 cv
221.501 81.521 221.768 81.6958 222.125 81.6958 cv
222.482 81.6958 222.748 81.521 222.93 81.1714 cv
223.105 80.8213 223.196 80.2964 223.196 79.5967 cv
223.196 78.8965 223.105 78.3716 222.93 78.022 cv
222.748 77.6719 222.482 77.4971 222.125 77.4971 cv
222.125 76.9512 mo
222.692 76.9512 223.125 77.1821 223.433 77.6299 cv
223.735 78.085 223.888 78.7427 223.888 79.5967 cv
223.888 80.457 223.735 81.1152 223.433 81.563 cv
223.125 82.0107 222.692 82.2349 222.125 82.2349 cv
221.551 82.2349 221.11 82.0107 220.809 81.563 cv
220.508 81.1152 220.361 80.457 220.361 79.5967 cv
220.361 78.7427 220.508 78.085 220.809 77.6299 cv
221.11 77.1821 221.551 76.9512 222.125 76.9512 cv
f
224.735 58.3198 mo
226.084 58.3198 li
f
224.735 58.3198 mo
226.084 58.3198 li
@
375.395 58.3198 mo
374.045 58.3198 li
f
375.395 58.3198 mo
374.045 58.3198 li
@
216.977 59.6929 mo
219.384 59.6929 li
219.384 60.2739 li
216.144 60.2739 li
216.144 59.6929 li
216.403 59.4272 216.759 59.0635 217.214 58.6011 cv
217.663 58.1465 217.95 57.8525 218.069 57.7192 cv
218.292 57.4746 218.446 57.2646 218.53 57.0898 cv
218.614 56.9219 218.664 56.7466 218.664 56.5786 cv
218.664 56.3125 218.565 56.0889 218.376 55.9209 cv
218.187 55.7529 217.942 55.6621 217.634 55.6621 cv
217.417 55.6621 217.187 55.7036 216.949 55.7739 cv
216.71 55.8511 216.452 55.9629 216.179 56.1172 cv
216.179 55.417 li
216.458 55.3052 216.717 55.2212 216.956 55.165 cv
217.194 55.1094 217.417 55.0811 217.621 55.0811 cv
218.145 55.0811 218.565 55.2139 218.88 55.48 cv
219.195 55.7461 219.356 56.0957 219.356 56.5366 cv
219.356 56.7466 219.314 56.9497 219.237 57.1318 cv
219.161 57.3203 219.02 57.5444 218.81 57.7964 cv
218.754 57.8667 218.573 58.0552 218.264 58.3706 cv
217.957 58.6855 217.53 59.126 216.977 59.6929 cv
f
220.952 59.6929 mo
222.079 59.6929 li
222.079 55.8018 li
220.854 56.0469 li
220.854 55.417 li
222.072 55.1719 li
222.764 55.1719 li
222.764 59.6929 li
223.891 59.6929 li
223.891 60.2739 li
220.952 60.2739 li
220.952 59.6929 li
cp
f
224.735 36.4502 mo
226.084 36.4502 li
f
224.735 36.4502 mo
226.084 36.4502 li
@
375.395 36.4502 mo
374.045 36.4502 li
f
375.395 36.4502 mo
374.045 36.4502 li
@
217.03 37.8232 mo
219.437 37.8232 li
219.437 38.4038 li
216.197 38.4038 li
216.197 37.8232 li
216.456 37.5571 216.812 37.1934 217.267 36.731 cv
217.715 36.2764 218.002 35.9824 218.122 35.8491 cv
218.345 35.6045 218.499 35.3945 218.583 35.2197 cv
218.667 35.0518 218.716 34.8765 218.716 34.7085 cv
218.716 34.4429 218.618 34.2188 218.429 34.0508 cv
218.24 33.8828 217.995 33.792 217.687 33.792 cv
217.47 33.792 217.24 33.834 217.001 33.9038 cv
216.763 33.981 216.504 34.0928 216.232 34.2471 cv
216.232 33.5474 li
216.511 33.4351 216.77 33.3511 217.008 33.2949 cv
217.247 33.2393 217.47 33.2109 217.673 33.2109 cv
218.198 33.2109 218.618 33.3438 218.933 33.6099 cv
219.248 33.876 219.409 34.2261 219.409 34.6665 cv
219.409 34.8765 219.367 35.0796 219.29 35.2617 cv
219.213 35.4507 219.073 35.6743 218.863 35.9268 cv
218.807 35.9966 218.625 36.1855 218.317 36.5005 cv
218.009 36.8154 217.583 37.2559 217.03 37.8232 cv
f
221.48 37.8232 mo
223.888 37.8232 li
223.888 38.4038 li
220.647 38.4038 li
220.647 37.8232 li
220.907 37.5571 221.263 37.1934 221.718 36.731 cv
222.167 36.2764 222.453 35.9824 222.572 35.8491 cv
222.796 35.6045 222.95 35.3945 223.035 35.2197 cv
223.118 35.0518 223.167 34.8765 223.167 34.7085 cv
223.167 34.4429 223.069 34.2188 222.88 34.0508 cv
222.691 33.8828 222.447 33.792 222.138 33.792 cv
221.921 33.792 221.69 33.834 221.453 33.9038 cv
221.214 33.981 220.956 34.0928 220.682 34.2471 cv
220.682 33.5474 li
220.962 33.4351 221.221 33.3511 221.459 33.2949 cv
221.698 33.2393 221.921 33.2109 222.125 33.2109 cv
222.649 33.2109 223.069 33.3438 223.384 33.6099 cv
223.699 33.876 223.86 34.2261 223.86 34.6665 cv
223.86 34.8765 223.818 35.0796 223.741 35.2617 cv
223.664 35.4507 223.524 35.6743 223.314 35.9268 cv
223.258 35.9966 223.076 36.1855 222.768 36.5005 cv
222.46 36.8154 222.033 37.2559 221.48 37.8232 cv
f
224.735 14.5801 mo
226.084 14.5801 li
f
224.735 14.5801 mo
226.084 14.5801 li
@
375.395 14.5801 mo
374.045 14.5801 li
f
375.395 14.5801 mo
374.045 14.5801 li
@
216.887 15.9531 mo
219.294 15.9531 li
219.294 16.5337 li
216.054 16.5337 li
216.054 15.9531 li
216.313 15.687 216.67 15.3232 217.125 14.8613 cv
217.573 14.4063 217.86 14.1123 217.979 13.9795 cv
218.203 13.7344 218.357 13.5249 218.441 13.3496 cv
218.525 13.1816 218.574 13.0068 218.574 12.8384 cv
218.574 12.5728 218.476 12.3486 218.287 12.1807 cv
218.097 12.0132 217.853 11.9219 217.544 11.9219 cv
217.328 11.9219 217.097 11.9639 216.859 12.0342 cv
216.621 12.1108 216.362 12.2231 216.089 12.377 cv
216.089 11.6768 li
216.369 11.5654 216.627 11.481 216.866 11.4248 cv
217.104 11.3691 217.328 11.3408 217.531 11.3408 cv
218.056 11.3408 218.476 11.4741 218.791 11.7402 cv
219.105 12.0059 219.266 12.356 219.266 12.7969 cv
219.266 13.0068 219.224 13.21 219.148 13.3916 cv
219.071 13.5806 218.93 13.8047 218.72 14.0562 cv
218.665 14.1265 218.483 14.3154 218.174 14.6304 cv
217.867 14.9453 217.44 15.3862 216.887 15.9531 cv
f
222.835 13.7832 mo
223.165 13.8535 223.423 14.0005 223.606 14.2241 cv
223.788 14.4482 223.885 14.728 223.885 15.0503 cv
223.885 15.5542 223.71 15.9458 223.368 16.2188 cv
223.017 16.4922 222.528 16.625 221.891 16.625 cv
221.674 16.625 221.45 16.6035 221.226 16.5615 cv
221.002 16.5269 220.764 16.4639 220.526 16.3799 cv
220.526 15.7148 li
220.715 15.8271 220.925 15.9111 221.156 15.9673 cv
221.38 16.0229 221.618 16.0508 221.87 16.0508 cv
222.304 16.0508 222.632 15.9673 222.857 15.7988 cv
223.081 15.6309 223.2 15.3794 223.2 15.0503 cv
223.2 14.7563 223.094 14.5181 222.884 14.3506 cv
222.674 14.1826 222.38 14.0913 222.002 14.0913 cv
221.408 14.0913 li
221.408 13.5244 li
222.031 13.5244 li
222.367 13.5244 222.625 13.4614 222.808 13.3213 cv
222.99 13.1885 223.081 12.9927 223.081 12.7339 cv
223.081 12.4751 222.983 12.272 222.8 12.1318 cv
222.612 11.9917 222.345 11.9219 222.002 11.9219 cv
221.814 11.9219 221.611 11.9429 221.394 11.9849 cv
221.177 12.0269 220.939 12.0898 220.68 12.1738 cv
220.68 11.5581 li
220.939 11.4883 221.184 11.4321 221.416 11.397 cv
221.639 11.3618 221.856 11.3408 222.066 11.3408 cv
222.583 11.3408 222.997 11.46 223.304 11.6982 cv
223.613 11.936 223.766 12.2578 223.766 12.6636 cv
223.766 12.9438 223.682 13.1816 223.521 13.3774 cv
223.361 13.5737 223.129 13.7134 222.835 13.7832 cv
f
207.182 122.098 mo
207.182 117.787 li
207.763 117.787 li
207.763 119.6 li
212.285 119.6 li
212.285 120.292 li
207.763 120.292 li
207.763 122.098 li
207.182 122.098 li
cp
f
210.212 113.875 mo
210.521 113.875 li
210.521 116.765 li
210.955 116.737 211.291 116.611 211.514 116.374 cv
211.739 116.143 211.85 115.821 211.85 115.401 cv
211.85 115.163 211.823 114.925 211.766 114.701 cv
211.71 114.477 211.62 114.246 211.494 114.022 cv
212.088 114.022 li
212.186 114.246 212.263 114.477 212.305 114.715 cv
212.347 114.953 212.375 115.198 212.375 115.436 cv
212.375 116.052 212.201 116.535 211.85 116.892 cv
211.5 117.248 211.017 117.423 210.409 117.423 cv
209.786 117.423 209.29 117.256 208.918 116.92 cv
208.554 116.583 208.365 116.122 208.365 115.548 cv
208.365 115.03 208.533 114.624 208.862 114.323 cv
209.198 114.029 209.646 113.875 210.212 113.875 cv
210.031 114.505 mo
209.688 114.512 209.415 114.61 209.205 114.792 cv
209.002 114.981 208.897 115.233 208.897 115.541 cv
208.897 115.891 209.002 116.171 209.198 116.381 cv
209.394 116.591 209.674 116.717 210.031 116.745 cv
210.031 114.505 li
f
209.191 109.865 mo
208.912 109.711 208.708 109.522 208.568 109.305 cv
208.435 109.088 208.365 108.83 208.365 108.528 cv
208.365 108.137 208.505 107.829 208.785 107.612 cv
209.065 107.395 209.464 107.283 209.975 107.283 cv
212.285 107.283 li
212.285 107.913 li
209.996 107.913 li
209.632 107.913 209.359 107.982 209.177 108.108 cv
209.001 108.242 208.912 108.438 208.912 108.704 cv
208.912 109.032 209.023 109.292 209.24 109.48 cv
209.457 109.669 209.75 109.76 210.122 109.76 cv
212.285 109.76 li
212.285 110.39 li
209.996 110.39 li
209.632 110.39 209.359 110.46 209.177 110.586 cv
209.001 110.719 208.912 110.922 208.912 111.188 cv
208.912 111.51 209.023 111.769 209.24 111.958 cv
209.457 112.146 209.75 112.237 210.122 112.237 cv
212.285 112.237 li
212.285 112.868 li
208.457 112.868 li
208.457 112.237 li
209.051 112.237 li
208.82 112.098 208.645 111.923 208.533 111.72 cv
208.421 111.523 208.365 111.286 208.365 111.006 cv
208.365 110.726 208.435 110.495 208.575 110.299 cv
208.715 110.103 208.925 109.963 209.191 109.865 cv
f
211.71 105.421 mo
213.733 105.421 li
213.733 106.051 li
208.456 106.051 li
208.456 105.421 li
209.038 105.421 li
208.813 105.295 208.645 105.127 208.534 104.924 cv
208.421 104.721 208.365 104.477 208.365 104.196 cv
208.365 103.734 208.554 103.357 208.918 103.063 cv
209.289 102.776 209.772 102.629 210.374 102.629 cv
210.976 102.629 211.465 102.776 211.83 103.063 cv
212.194 103.357 212.375 103.734 212.375 104.196 cv
212.375 104.477 212.32 104.721 212.214 104.924 cv
212.11 105.127 211.941 105.295 211.71 105.421 cv
210.374 103.279 mo
209.912 103.279 209.555 103.377 209.289 103.567 cv
209.023 103.763 208.89 104.021 208.89 104.351 cv
208.89 104.687 209.023 104.945 209.289 105.134 cv
209.555 105.33 209.912 105.421 210.374 105.421 cv
210.835 105.421 211.2 105.33 211.465 105.134 cv
211.732 104.945 211.857 104.687 211.857 104.351 cv
211.857 104.021 211.732 103.763 211.465 103.567 cv
211.2 103.377 210.835 103.279 210.374 103.279 cv
f
210.212 98.3105 mo
210.521 98.3105 li
210.521 101.201 li
210.955 101.173 211.291 101.047 211.514 100.809 cv
211.739 100.579 211.85 100.256 211.85 99.8364 cv
211.85 99.5981 211.823 99.3604 211.766 99.1367 cv
211.71 98.9126 211.62 98.6821 211.494 98.458 cv
212.088 98.458 li
212.186 98.6821 212.263 98.9126 212.305 99.1504 cv
212.347 99.3887 212.375 99.6333 212.375 99.8711 cv
212.375 100.487 212.201 100.97 211.85 101.327 cv
211.5 101.684 211.017 101.859 210.409 101.859 cv
209.786 101.859 209.29 101.691 208.918 101.355 cv
208.554 101.019 208.365 100.557 208.365 99.9834 cv
208.365 99.4658 208.533 99.0596 208.862 98.7588 cv
209.198 98.4648 209.646 98.3105 210.212 98.3105 cv
210.031 98.9404 mo
209.688 98.9478 209.415 99.0459 209.205 99.2275 cv
209.002 99.4165 208.897 99.6685 208.897 99.9766 cv
208.897 100.327 209.002 100.606 209.198 100.816 cv
209.394 101.026 209.674 101.152 210.031 101.18 cv
210.031 98.9404 li
f
209.044 95.0635 mo
209.001 95.1333 208.974 95.2109 208.953 95.2944 cv
208.939 95.3784 208.925 95.4692 208.925 95.5674 cv
208.925 95.9243 209.044 96.1973 209.275 96.3862 cv
209.505 96.582 209.834 96.6733 210.269 96.6733 cv
212.285 96.6733 li
212.285 97.3027 li
208.457 97.3027 li
208.457 96.6733 li
209.051 96.6733 li
208.82 96.5474 208.645 96.3721 208.533 96.1621 cv
208.421 95.9521 208.365 95.6934 208.365 95.3853 cv
208.365 95.3433 208.373 95.2944 208.373 95.2388 cv
208.379 95.1895 208.386 95.1333 208.4 95.0635 cv
209.044 95.0635 li
f
210.36 92.6631 mo
210.36 93.1743 210.422 93.5239 210.535 93.7197 cv
210.654 93.9155 210.85 94.0137 211.129 94.0137 cv
211.354 94.0137 211.536 93.9438 211.662 93.7964 cv
211.794 93.6499 211.858 93.4468 211.858 93.1948 cv
211.858 92.8452 211.739 92.5649 211.487 92.355 cv
211.242 92.145 210.913 92.04 210.5 92.04 cv
210.36 92.04 li
210.36 92.6631 li
210.101 91.4106 mo
212.285 91.4106 li
212.285 92.04 li
211.704 92.04 li
211.942 92.1875 212.109 92.3691 212.214 92.5791 cv
212.319 92.7891 212.375 93.0552 212.375 93.3628 cv
212.375 93.7549 212.27 94.0698 212.053 94.3008 cv
211.836 94.5317 211.542 94.6436 211.171 94.6436 cv
210.745 94.6436 210.422 94.5034 210.199 94.2095 cv
209.982 93.9229 209.87 93.4961 209.87 92.9219 cv
209.87 92.04 li
209.807 92.04 li
209.52 92.04 209.295 92.1382 209.135 92.3271 cv
208.981 92.5161 208.897 92.7822 208.897 93.125 cv
208.897 93.3491 208.925 93.5591 208.981 93.769 cv
209.037 93.979 209.114 94.1748 209.212 94.3638 cv
208.631 94.3638 li
208.547 94.1396 208.477 93.9155 208.435 93.6987 cv
208.393 93.4819 208.365 93.272 208.365 93.062 cv
208.365 92.5093 208.512 92.0962 208.799 91.8237 cv
209.085 91.5503 209.52 91.4106 210.101 91.4106 cv
f
207.372 89.4932 mo
208.457 89.4932 li
208.457 88.1978 li
208.946 88.1978 li
208.946 89.4932 li
211.025 89.4932 li
211.339 89.4932 211.542 89.4507 211.626 89.3667 cv
211.717 89.2832 211.759 89.1079 211.759 88.8418 cv
211.759 88.1978 li
212.285 88.1978 li
212.285 88.8418 li
212.285 89.3315 212.193 89.668 212.011 89.8501 cv
211.83 90.0317 211.5 90.1226 211.025 90.1226 cv
208.946 90.1226 li
208.946 90.5845 li
208.457 90.5845 li
208.457 90.1226 li
207.372 90.1226 li
207.372 89.4932 li
f
210.773 87.4355 mo
208.457 87.4355 li
208.457 86.8057 li
210.751 86.8057 li
211.116 86.8057 211.381 86.7358 211.563 86.5957 cv
211.746 86.4556 211.836 86.2456 211.836 85.959 cv
211.836 85.6226 211.732 85.3496 211.514 85.1538 cv
211.297 84.9575 211.003 84.8599 210.625 84.8599 cv
208.457 84.8599 li
208.457 84.23 li
212.285 84.23 li
212.285 84.8599 li
211.697 84.8599 li
211.934 85.0137 212.102 85.1958 212.214 85.3916 cv
212.32 85.5947 212.375 85.8252 212.375 86.0918 cv
212.375 86.5322 212.242 86.8682 211.969 87.0923 cv
211.704 87.3232 211.304 87.4355 210.773 87.4355 cv
f
209.044 80.7168 mo
209.001 80.7866 208.974 80.8643 208.953 80.9478 cv
208.939 81.0317 208.925 81.1226 208.925 81.2207 cv
208.925 81.5776 209.044 81.8501 209.275 82.0396 cv
209.505 82.2354 209.834 82.3267 210.269 82.3267 cv
212.285 82.3267 li
212.285 82.9561 li
208.457 82.9561 li
208.457 82.3267 li
209.051 82.3267 li
208.82 82.2007 208.645 82.0254 208.533 81.8154 cv
208.421 81.6055 208.365 81.3467 208.365 81.0386 cv
208.365 80.9966 208.373 80.9478 208.373 80.8916 cv
208.379 80.8428 208.386 80.7866 208.4 80.7168 cv
209.044 80.7168 li
f
210.212 76.7837 mo
210.521 76.7837 li
210.521 79.6738 li
210.955 79.646 211.291 79.52 211.514 79.2822 cv
211.739 79.0513 211.85 78.7295 211.85 78.3096 cv
211.85 78.0713 211.823 77.833 211.766 77.6094 cv
211.71 77.3853 211.62 77.1548 211.494 76.9307 cv
212.088 76.9307 li
212.186 77.1548 212.263 77.3853 212.305 77.623 cv
212.347 77.8613 212.375 78.1064 212.375 78.3442 cv
212.375 78.96 212.201 79.4434 211.85 79.8003 cv
211.5 80.1567 211.017 80.332 210.409 80.332 cv
209.786 80.332 209.29 80.1641 208.918 79.8281 cv
208.554 79.4922 208.365 79.0303 208.365 78.4561 cv
208.365 77.9385 208.533 77.5327 208.862 77.2314 cv
209.198 76.938 209.646 76.7837 210.212 76.7837 cv
210.031 77.4136 mo
209.688 77.4209 209.415 77.5186 209.205 77.7007 cv
209.002 77.8892 208.897 78.1416 208.897 78.4492 cv
208.897 78.7993 209.002 79.0791 209.198 79.2891 cv
209.394 79.499 209.674 79.625 210.031 79.6528 cv
210.031 77.4136 li
f
206.972 72.0181 mo
207.504 72.3257 208.022 72.5498 208.534 72.6968 cv
209.044 72.8506 209.562 72.9209 210.087 72.9209 cv
210.619 72.9209 211.136 72.8506 211.648 72.6968 cv
212.166 72.5498 212.676 72.3257 213.201 72.0181 cv
213.201 72.5635 li
212.662 72.9067 212.144 73.1655 211.626 73.3335 cv
211.109 73.5015 210.597 73.5854 210.087 73.5854 cv
209.583 73.5854 209.072 73.5015 208.554 73.3335 cv
208.037 73.1655 207.511 72.9136 206.972 72.5635 cv
206.972 72.0181 li
f
209.037 68.2808 mo
206.965 68.2808 li
206.965 67.6509 li
212.285 67.6509 li
212.285 68.2808 li
211.71 68.2808 li
211.941 68.4136 212.109 68.5815 212.214 68.7847 cv
212.319 68.9873 212.375 69.2256 212.375 69.5054 cv
212.375 69.9678 212.193 70.3452 211.83 70.6392 cv
211.465 70.9331 210.976 71.0732 210.374 71.0732 cv
209.772 71.0732 209.29 70.9331 208.917 70.6392 cv
208.554 70.3452 208.365 69.9678 208.365 69.5054 cv
208.365 69.2256 208.421 68.9873 208.533 68.7847 cv
208.645 68.5815 208.813 68.4136 209.037 68.2808 cv
210.374 70.4219 mo
210.835 70.4219 211.2 70.3315 211.465 70.1426 cv
211.731 69.9531 211.857 69.6875 211.857 69.3516 cv
211.857 69.0225 211.731 68.7637 211.465 68.5674 cv
211.2 68.3789 210.835 68.2808 210.374 68.2808 cv
209.912 68.2808 209.555 68.3789 209.29 68.5674 cv
209.023 68.7637 208.89 69.0225 208.89 69.3516 cv
208.89 69.6875 209.023 69.9531 209.29 70.1426 cv
209.555 70.3315 209.912 70.4219 210.374 70.4219 cv
f
210.212 63.0811 mo
210.521 63.0811 li
210.521 65.9712 li
210.955 65.9434 211.291 65.8174 211.514 65.5796 cv
211.739 65.3481 211.85 65.0264 211.85 64.6069 cv
211.85 64.3687 211.823 64.1304 211.766 63.9067 cv
211.71 63.6826 211.62 63.4517 211.494 63.228 cv
212.088 63.228 li
212.186 63.4517 212.263 63.6826 212.305 63.9204 cv
212.347 64.1587 212.375 64.4033 212.375 64.6416 cv
212.375 65.2573 212.201 65.7402 211.85 66.0972 cv
211.5 66.4541 211.017 66.6289 210.409 66.6289 cv
209.786 66.6289 209.29 66.4614 208.918 66.125 cv
208.554 65.7891 208.365 65.3271 208.365 64.7534 cv
208.365 64.2354 208.533 63.8301 208.862 63.5288 cv
209.198 63.2349 209.646 63.0811 210.212 63.0811 cv
210.031 63.7109 mo
209.688 63.7178 209.415 63.8154 209.205 63.9976 cv
209.002 64.1865 208.897 64.4385 208.897 64.7466 cv
208.897 65.0967 209.002 65.376 209.198 65.5859 cv
209.394 65.7959 209.674 65.9224 210.031 65.9502 cv
210.031 63.7109 li
f
210.325 59.5327 mo
209.876 59.5327 209.52 59.6309 209.268 59.813 cv
209.016 60.0015 208.89 60.2676 208.89 60.6035 cv
208.89 60.9395 209.016 61.2056 209.268 61.3945 cv
209.52 61.5835 209.876 61.6743 210.325 61.6743 cv
210.78 61.6743 211.129 61.5835 211.381 61.3945 cv
211.633 61.2056 211.759 60.9395 211.759 60.6035 cv
211.759 60.2676 211.633 60.0015 211.381 59.813 cv
211.129 59.6309 210.78 59.5327 210.325 59.5327 cv
211.808 58.9028 mo
212.453 58.9028 212.935 59.0498 213.257 59.3364 cv
213.572 59.6309 213.733 60.0718 213.733 60.6665 cv
213.733 60.8906 213.711 61.0933 213.684 61.2896 cv
213.649 61.4854 213.6 61.6812 213.53 61.8633 cv
212.921 61.8633 li
213.019 61.6812 213.089 61.4995 213.138 61.3174 cv
213.187 61.1357 213.215 60.9531 213.215 60.7642 cv
213.215 60.3584 213.103 60.0503 212.893 59.8403 cv
212.676 59.6377 212.354 59.5327 211.92 59.5327 cv
211.613 59.5327 li
211.836 59.6655 212.004 59.834 212.117 60.0366 cv
212.228 60.2393 212.285 60.4775 212.285 60.7573 cv
212.285 61.2334 212.11 61.6113 211.752 61.8984 cv
211.396 62.1851 210.919 62.3247 210.325 62.3247 cv
209.737 62.3247 209.261 62.1851 208.904 61.8984 cv
208.547 61.6113 208.365 61.2334 208.365 60.7573 cv
208.365 60.4775 208.421 60.2393 208.534 60.0366 cv
208.645 59.834 208.813 59.6655 209.038 59.5327 cv
208.456 59.5327 li
208.456 58.9028 li
211.808 58.9028 li
f
209.044 55.3896 mo
209.001 55.46 208.974 55.5366 208.953 55.6206 cv
208.939 55.7046 208.925 55.7954 208.925 55.8936 cv
208.925 56.2505 209.044 56.5234 209.275 56.7124 cv
209.505 56.9082 209.834 56.9995 210.269 56.9995 cv
212.285 56.9995 li
212.285 57.6294 li
208.457 57.6294 li
208.457 56.9995 li
209.051 56.9995 li
208.82 56.873 208.645 56.6982 208.533 56.4883 cv
208.421 56.2783 208.365 56.0195 208.365 55.7114 cv
208.365 55.6699 208.373 55.6206 208.373 55.5649 cv
208.379 55.5156 208.386 55.46 208.4 55.3896 cv
209.044 55.3896 li
f
210.212 51.4565 mo
210.521 51.4565 li
210.521 54.3472 li
210.955 54.3188 211.291 54.1929 211.514 53.9551 cv
211.739 53.7241 211.85 53.4023 211.85 52.9824 cv
211.85 52.7441 211.823 52.5063 211.766 52.2822 cv
211.71 52.0586 211.62 51.8276 211.494 51.6035 cv
212.088 51.6035 li
212.186 51.8276 212.263 52.0586 212.305 52.2964 cv
212.347 52.5342 212.375 52.7793 212.375 53.0171 cv
212.375 53.6333 212.201 54.1162 211.85 54.4727 cv
211.5 54.8301 211.017 55.0049 210.409 55.0049 cv
209.786 55.0049 209.29 54.8369 208.918 54.501 cv
208.554 54.165 208.365 53.7031 208.365 53.1294 cv
208.365 52.6113 208.533 52.2056 208.862 51.9043 cv
209.198 51.6104 209.646 51.4565 210.212 51.4565 cv
210.031 52.0864 mo
209.688 52.0938 209.415 52.1914 209.205 52.373 cv
209.002 52.5625 208.897 52.8145 208.897 53.1221 cv
208.897 53.4722 209.002 53.752 209.198 53.9619 cv
209.394 54.1719 209.674 54.2979 210.031 54.3262 cv
210.031 52.0864 li
f
210.212 47.1523 mo
210.521 47.1523 li
210.521 50.043 li
210.955 50.0146 211.291 49.8887 211.514 49.6509 cv
211.739 49.4199 211.85 49.0981 211.85 48.6782 cv
211.85 48.4399 211.823 48.2021 211.766 47.9785 cv
211.71 47.7544 211.62 47.5234 211.494 47.2998 cv
212.088 47.2998 li
212.186 47.5234 212.263 47.7544 212.305 47.9922 cv
212.347 48.23 212.375 48.4751 212.375 48.7134 cv
212.375 49.3291 212.201 49.812 211.85 50.1689 cv
211.5 50.5259 211.017 50.7007 210.409 50.7007 cv
209.786 50.7007 209.29 50.5327 208.918 50.1973 cv
208.554 49.8608 208.365 49.3989 208.365 48.8252 cv
208.365 48.3076 208.533 47.9014 208.862 47.6006 cv
209.198 47.3066 209.646 47.1523 210.212 47.1523 cv
210.031 47.7822 mo
209.688 47.7896 209.415 47.8872 209.205 48.0693 cv
209.002 48.2583 208.897 48.5103 208.897 48.8184 cv
208.897 49.168 209.002 49.4482 209.198 49.6582 cv
209.394 49.8682 209.674 49.9941 210.031 50.022 cv
210.031 47.7822 li
f
208.568 43.6812 mo
209.164 43.6812 li
209.08 43.8633 209.009 44.0454 208.96 44.2339 cv
208.918 44.4302 208.89 44.626 208.89 44.8291 cv
208.89 45.144 208.939 45.3818 209.037 45.5356 cv
209.135 45.6895 209.275 45.7671 209.464 45.7671 cv
209.611 45.7671 209.723 45.7109 209.807 45.5991 cv
209.891 45.4868 209.975 45.2632 210.044 44.9268 cv
210.094 44.71 li
210.192 44.2622 210.332 43.9473 210.5 43.7588 cv
210.675 43.5762 210.919 43.4785 211.227 43.4785 cv
211.584 43.4785 211.865 43.6182 212.068 43.8984 cv
212.277 44.1782 212.375 44.5703 212.375 45.0601 cv
212.375 45.27 212.354 45.48 212.319 45.7041 cv
212.285 45.9277 212.228 46.1587 212.144 46.4033 cv
211.494 46.4033 li
211.62 46.1729 211.71 45.9419 211.766 45.7178 cv
211.83 45.4941 211.858 45.27 211.858 45.0459 cv
211.858 44.752 211.808 44.521 211.71 44.3604 cv
211.613 44.2061 211.465 44.1226 211.277 44.1226 cv
211.109 44.1226 210.976 44.1851 210.885 44.2974 cv
210.793 44.4092 210.703 44.6611 210.619 45.0527 cv
210.57 45.27 li
210.486 45.6621 210.36 45.9487 210.192 46.1167 cv
210.024 46.292 209.792 46.3755 209.492 46.3755 cv
209.135 46.3755 208.855 46.2495 208.66 45.998 cv
208.463 45.7456 208.365 45.3818 208.365 44.9063 cv
208.365 44.6753 208.386 44.458 208.421 44.248 cv
208.457 44.0454 208.505 43.8564 208.568 43.6812 cv
f
208.603 37.4951 mo
209.191 37.4951 li
209.093 37.6768 209.023 37.8521 208.974 38.0337 cv
208.925 38.2158 208.897 38.3906 208.897 38.5723 cv
208.897 38.9785 209.03 39.3003 209.289 39.5244 cv
209.547 39.7485 209.912 39.8604 210.374 39.8604 cv
210.843 39.8604 211.207 39.7485 211.465 39.5244 cv
211.725 39.3003 211.85 38.9785 211.85 38.5723 cv
211.85 38.3906 211.83 38.2158 211.781 38.0337 cv
211.731 37.8521 211.655 37.6768 211.556 37.4951 cv
212.137 37.4951 li
212.221 37.6768 212.285 37.8584 212.32 38.0405 cv
212.354 38.2295 212.375 38.4326 212.375 38.6426 cv
212.375 39.2163 212.201 39.6787 211.836 40.0142 cv
211.479 40.3574 210.99 40.5254 210.374 40.5254 cv
209.75 40.5254 209.261 40.3574 208.904 40.0142 cv
208.547 39.6714 208.365 39.2026 208.365 38.6006 cv
208.365 38.4043 208.386 38.2158 208.428 38.0337 cv
208.47 37.8521 208.526 37.6699 208.603 37.4951 cv
f
210.212 33.1279 mo
210.521 33.1279 li
210.521 36.0181 li
210.955 35.9902 211.291 35.8643 211.514 35.6265 cv
211.739 35.395 211.85 35.0732 211.85 34.6538 cv
211.85 34.4155 211.823 34.1772 211.766 33.9536 cv
211.71 33.7295 211.62 33.4985 211.494 33.2749 cv
212.088 33.2749 li
212.186 33.4985 212.263 33.7295 212.305 33.9673 cv
212.347 34.2056 212.375 34.4502 212.375 34.6885 cv
212.375 35.3042 212.201 35.7871 211.85 36.144 cv
211.5 36.501 211.017 36.6758 210.409 36.6758 cv
209.786 36.6758 209.29 36.5083 208.918 36.1719 cv
208.554 35.8359 208.365 35.374 208.365 34.8003 cv
208.365 34.2822 208.533 33.877 208.862 33.5757 cv
209.198 33.2817 209.646 33.1279 210.212 33.1279 cv
210.031 33.7578 mo
209.688 33.7646 209.415 33.8623 209.205 34.0444 cv
209.002 34.2334 208.897 34.4854 208.897 34.7935 cv
208.897 35.1436 209.002 35.4229 209.198 35.6328 cv
209.394 35.8428 209.674 35.9692 210.031 35.9971 cv
210.031 33.7578 li
f
206.965 31.4692 mo
212.285 31.4692 li
212.285 32.0991 li
206.965 32.0991 li
206.965 31.4692 li
cp
f
208.568 27.7109 mo
209.164 27.7109 li
209.08 27.8931 209.009 28.0747 208.96 28.2637 cv
208.918 28.46 208.89 28.6558 208.89 28.8589 cv
208.89 29.1738 208.939 29.4116 209.037 29.5654 cv
209.135 29.7192 209.275 29.7964 209.464 29.7964 cv
209.611 29.7964 209.723 29.7407 209.807 29.6289 cv
209.891 29.5166 209.975 29.293 210.044 28.9565 cv
210.094 28.7397 li
210.192 28.292 210.332 27.9771 210.5 27.7881 cv
210.675 27.606 210.919 27.5078 211.227 27.5078 cv
211.584 27.5078 211.865 27.6479 212.068 27.9277 cv
212.277 28.208 212.375 28.5996 212.375 29.0898 cv
212.375 29.2998 212.354 29.5098 212.319 29.7334 cv
212.285 29.9575 212.228 30.1885 212.144 30.4331 cv
211.494 30.4331 li
211.62 30.2021 211.71 29.9717 211.766 29.7476 cv
211.83 29.5234 211.858 29.2998 211.858 29.0757 cv
211.858 28.7817 211.808 28.5508 211.71 28.3896 cv
211.613 28.2358 211.465 28.1519 211.277 28.1519 cv
211.109 28.1519 210.976 28.2148 210.885 28.3271 cv
210.793 28.439 210.703 28.6909 210.619 29.0825 cv
210.57 29.2998 li
210.486 29.6914 210.36 29.9785 210.192 30.1465 cv
210.024 30.3213 209.792 30.4053 209.492 30.4053 cv
209.135 30.4053 208.855 30.2793 208.66 30.0273 cv
208.463 29.7754 208.365 29.4116 208.365 28.9355 cv
208.365 28.7046 208.386 28.4878 208.421 28.2778 cv
208.457 28.0747 208.505 27.8862 208.568 27.7109 cv
f
208.457 25.8774 mo
212.285 25.8774 li
212.285 26.5073 li
208.457 26.5073 li
208.457 25.8774 li
cp
206.965 25.8774 mo
207.763 25.8774 li
207.763 26.5073 li
206.965 26.5073 li
206.965 25.8774 li
cp
f
210.773 24.6245 mo
208.457 24.6245 li
208.457 23.9951 li
210.751 23.9951 li
211.116 23.9951 211.381 23.9248 211.563 23.7852 cv
211.746 23.645 211.836 23.4351 211.836 23.1479 cv
211.836 22.812 211.732 22.5391 211.514 22.3433 cv
211.297 22.1475 211.003 22.0493 210.625 22.0493 cv
208.457 22.0493 li
208.457 21.4194 li
212.285 21.4194 li
212.285 22.0493 li
211.697 22.0493 li
211.934 22.2031 212.102 22.3853 212.214 22.5811 cv
212.32 22.7842 212.375 23.0151 212.375 23.2813 cv
212.375 23.7217 212.242 24.0576 211.969 24.2817 cv
211.704 24.5127 211.304 24.6245 210.773 24.6245 cv
f
208.568 17.6821 mo
209.164 17.6821 li
209.08 17.8643 209.009 18.0464 208.96 18.2349 cv
208.918 18.4312 208.89 18.627 208.89 18.8301 cv
208.89 19.145 208.939 19.3828 209.037 19.5366 cv
209.135 19.6904 209.275 19.7681 209.464 19.7681 cv
209.611 19.7681 209.723 19.7119 209.807 19.6001 cv
209.891 19.4878 209.975 19.2642 210.044 18.9277 cv
210.094 18.7109 li
210.192 18.2632 210.332 17.9482 210.5 17.7598 cv
210.675 17.5771 210.919 17.4795 211.227 17.4795 cv
211.584 17.4795 211.865 17.6191 212.068 17.8994 cv
212.277 18.1792 212.375 18.5713 212.375 19.061 cv
212.375 19.271 212.354 19.481 212.319 19.7051 cv
212.285 19.9287 212.228 20.1597 212.144 20.4043 cv
211.494 20.4043 li
211.62 20.1738 211.71 19.9429 211.766 19.7188 cv
211.83 19.4951 211.858 19.271 211.858 19.0469 cv
211.858 18.7529 211.808 18.522 211.71 18.3613 cv
211.613 18.207 211.465 18.1235 211.277 18.1235 cv
211.109 18.1235 210.976 18.186 210.885 18.2983 cv
210.793 18.4102 210.703 18.6621 210.619 19.0537 cv
210.57 19.271 li
210.486 19.6631 210.36 19.9497 210.192 20.1177 cv
210.024 20.293 209.792 20.3765 209.492 20.3765 cv
209.135 20.3765 208.855 20.2505 208.66 19.999 cv
208.463 19.7466 208.365 19.3828 208.365 18.9072 cv
208.365 18.6763 208.386 18.459 208.421 18.249 cv
208.457 18.0464 208.505 17.8574 208.568 17.6821 cv
f
206.972 16.5767 mo
206.972 16.0303 li
207.511 15.6948 208.037 15.436 208.554 15.2676 cv
209.072 15.1001 209.583 15.0088 210.087 15.0088 cv
210.597 15.0088 211.109 15.1001 211.626 15.2676 cv
212.144 15.436 212.662 15.6948 213.201 16.0303 cv
213.201 16.5767 li
212.676 16.2754 212.166 16.0518 211.648 15.8975 cv
211.136 15.751 210.619 15.6738 210.087 15.6738 cv
209.562 15.6738 209.044 15.751 208.534 15.8975 cv
208.022 16.0518 207.504 16.2754 206.972 16.5767 cv
f
.3375 lw
224.735 123.93 mo
375.395 123.93 li
@
224.735 14.5801 mo
375.395 14.5801 li
@
375.395 123.93 mo
375.395 14.5801 li
@
224.735 123.93 mo
224.735 14.5801 li
@
grestore
grestore
293.957 161.979 mo
293.957 161.947 293.957 161.925 293.77 161.739 cv
292.4 160.358 292.049 158.287 292.049 156.61 cv
292.049 154.704 292.466 152.797 293.814 151.427 cv
293.957 151.296 293.957 151.273 293.957 151.24 cv
293.957 151.163 293.913 151.131 293.847 151.131 cv
293.737 151.131 292.75 151.876 292.104 153.268 cv
291.545 154.474 291.414 155.69 291.414 156.61 cv
291.414 157.465 291.535 158.791 292.137 160.029 cv
292.794 161.378 293.737 162.09 293.847 162.09 cv
293.913 162.09 293.957 162.057 293.957 161.979 cv
cp
f
296.476 155.219 mo
296.476 151.745 li
294.898 151.865 li
294.898 152.205 li
295.665 152.205 295.752 152.282 295.752 152.818 cv
295.752 159.351 li
296.027 159.351 li
296.038 159.339 296.125 159.186 296.421 158.671 cv
296.585 158.919 297.045 159.46 297.857 159.46 cv
299.161 159.46 300.3 158.391 300.3 156.983 cv
300.3 155.591 299.226 154.507 297.977 154.507 cv
297.123 154.507 296.651 155.021 296.476 155.219 cv
cp
296.508 158.101 mo
296.508 155.843 li
296.508 155.635 296.508 155.624 296.629 155.448 cv
297.056 154.835 297.66 154.747 297.922 154.747 cv
298.416 154.747 298.81 155.032 299.073 155.448 cv
299.358 155.897 299.391 156.522 299.391 156.972 cv
299.391 157.378 299.369 158.035 299.051 158.528 cv
298.821 158.868 298.405 159.229 297.813 159.229 cv
297.32 159.229 296.925 158.966 296.662 158.562 cv
296.508 158.331 296.508 158.298 296.508 158.101 cv
cp
f
303.847 156.61 mo
303.847 155.755 303.726 154.43 303.124 153.191 cv
302.466 151.843 301.523 151.131 301.414 151.131 cv
301.348 151.131 301.304 151.175 301.304 151.24 cv
301.304 151.273 301.304 151.296 301.512 151.493 cv
302.586 152.577 303.211 154.319 303.211 156.61 cv
303.211 158.484 302.805 160.413 301.447 161.794 cv
301.304 161.925 301.304 161.947 301.304 161.979 cv
301.304 162.046 301.348 162.09 301.414 162.09 cv
301.523 162.09 302.509 161.345 303.157 159.952 cv
303.715 158.747 303.847 157.53 303.847 156.61 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (001x005.eps)%%CreationDate: 26/05/15 3:13 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6H$f*AcT$6b!8dh2d[$1cp8'i^l+ZV5Bq[,&.8Z]/4S/RBqs6hYS\th+8:Z!3S9(6JY+_LJZ7O2)/5(.I^"*+!eJbQNXnI72%PG00GA^sI(VNFh(.?RBo1sYALDjd+B#U1&.WIe_IBg&B8M?^8?3RuW$Gd#VGqu*\,qBt+m>J8W=[[ZZ%D`Ltu]@oju<^5M620iDE%2V\7'DDeJ5?\rl5=+.5.Re9:bqd&S:756/4:m@Q\IN-PcdI6gF]t9f!9bYA61I6<>"'g?l^JjW>l`KteX.KC?H>WBq*r#/Tr_1%u%fDBu0#Z)]HOi>5mI@`]SZN'(UcfuU3?GB_32qkCS%'-\gmX/*J?gtW,s(S3le4kc`];U4'RalkXn44>ES-l'T:Zjei$&p4,,RkfN%^bu9fkZ5S@f%'e8eGlkFgo4@joe,?&U"_eMr!tVe<"qWkTCg7YDmS<6Cc2&SSW"\TZKSMuX#H_-qu'-nqS?>8#b4[oi1es(W;!"7%gWa)Aqf:,hC4IorW;^)k;XRrsa.7PBU4#J/<:l]VJi'F3OqVtD:F\BDONaM6$:Y[.QScjmUaRa:m@s2D.m]DUd&ID+klc>#\D-dl%[$H^4P,-M9h<m19:4MP,d\%\X0fam`hmEB\<!*7!rHaC0!X,TLkhm&+gu18qi8PD\Y#T<=pI#<+VBlZoAd\a:<N>bnb=P\J($M4g%-Fa!BUR2AW:R:NLe*tgCnZu?)TX'N+AJq,_1-Ut7qQs/:\*7+cL8?^9Iq]gedPNMOBpFR0dkn=gBjqt/7*39[=NWJ*'Rmqq/6+61%WF?Is//IbIZ%us@'ms2aBH"TjWSmA?Kt]o'VY!c4BT;X5^1f`s6.YN=94==Z'2)c'XHq:IfHU731>!fK`-,@TT^Q?Zn.U:[MsqB7%;*Ik$fHU73G2lq_@[jSsb"Z&(QGRh(-^L`2&8(SG;GML2\Oa8aTCbk3E_8KkS^KuC8'7qtZ:`Jn=:3f<T88?t+Diua7XGRD@OZ,c%e\dV%oNc8TIc<"s*US@SUm*),5Htp2%mOb];CS;eV=e>XQ4+ntQMaj57d6[Qa&8.?(11au.J64lV2Nnt0jFTF93D4u%(=HE9Pb``%9j:>a@f,X.92YN)p/.F.GOZ?i@-\G>9<t\)6TIYPT[I]!YU(fcZm"O1;Q)-Kj21([b'-GujZ9N1ndR%WHGjP;V&`33[8ZGaIJTK5%UQj5i8YqjK3TU^h:a,k;r&UUD^6;)lUX^5b(7uT"Vp]G(]d&%%[Ne/j89]C5ij.#D8<Lk_I,!V77B8k\<A2<ah\8M1r569K.uN\c%,ge!b?ht;21&U54V>h0B<M^8i0E%g7oXFFYr\FuZgG#_?%JHu%TMM)mo\\48rU'NZrt=QoM*d`IoO#.&Ili/E5Jd=hof;^dIaW\A%^TCl80=4MQMMbRd<KNh!"#sC:$:^kFCrL>R4$:tb"[apdN4t-uZ"N8Zn,F.clo@a[K-a,6:o9TP'%RkXLXmJHA+5u_QVpRo'F\du%eqa:QHKkI*ofi"0FU+0;Hd:J##mL6b4Jf\BR,PP+Sjt6kcZ?1We?%\S<H`U0Dc%Rk[h>Npj'>5cImKq;c)S^q.C.Og<blrM9R[],%DO]8I9l]4e_/-E_NjS:t.dl/gT7lWqK[3?_e/Y9S8TIB</G^@?X_3g>Uf!tQl\m@>HaID=^T8`M[oQq\/M.sO#h?c(Z:_'YCQt&/%fth7O'%//7DZ6&WD)J"uZ9K_1XPGgl1ol\F,cI%\bs5K@eW<>.3m,`(Sp.QN\6bB@Hd2n.rBb9W'Wb<"JO4Xdmo7CMB`nrc%GOFG%R2,sYoio*6&ClnQ2G-;IST)a-0<@X-(-`+JoqR4tX-M7m4m'a)4MiA-eLDbmBTM\k3mpSl9C,6leYeFDRZ=`t]dO2?:6X4fIl4,o%]V>t4`N)l#dkVUi8V0)dFALWt/iq"RnL(W1VI4`L)O?\rru,^$'+4-3Md3M4PLVhc^Fe"*[Nc=LD8@'bd`m3&dDTRTlUee6lW2+G%3u+e+Z,fR2OGo"@=Eja'S``NUf$3a&7qO2UoVlLb1h'ZoZXCbi)r:+tipb0T24U]T'ojb:*j$2^)TC9u6IBP+4UY:QIlT[:hY$,[%2@I*mK5#0qN`=]0f1B]+/X"!&kNI-ASAaXS,gE+1-'&OZ[*ZUe,o.6dHr/"u[)IQcnX/f_QYtHMerh,p_&8R((15jc>?_Yt>Ljc_%gQ#O&"^VO8al3cU+9&kS6d#@#=B9"SEu^lIf1>b29a)HT"66Y@gJ!&3)Ojk:oK-e7nlm:8@!m+,BYjJklbK%dgZ]HN#?aW-HOG^(%Dj,*_h6n#[r[l$H`d6@ekWD"/NU6$5RLI/.On72@_nU&J%&(U<a'd1ObH:sb*@3V_<:?*O[-7uDQ!A.7TeIFQ8tKij.W:Rsh%#Cd%,1R99NZk0!,r<*N2;-PCFC\j/<2Xd^`Yo6Y?g+a%dbolNR[L=Dd&JK0aT#eP'FP("6Al!K5u"6n:&#7u_J^t3hm\L4gn`9$,f")=%JdL;R2e39uH&DWsc%G[hW.f->CR/WuVou1\q?6&l@f%)b\38#>Gg^FfgE6'UrLH&2YP3N.eF?+Z59I;,FJFQ8aM\[9@Q^8>J)Sdu%\,G(7D8!Clo7^BF[@Y%p<o9QPo(_lRrN2\`c81"BmJOH@YNMpF:*pZPV-33:POp$29R^/pLVI,p^ULi4cKc0JDZ*RR[Q>I4)cCP'%P1S6%B/o1?B!kY+-4/JII*hWrSlC82%W2Le!GT7%lN"iD/#8!!Jrg&hUBhT7qk)!4B"_41fsp9B2rPH/*8gQ2\uiTdXmU,r1O7Ac%2f5qi7lGMp-;Z8nn#59"][/]W;$IK\`!Ua).WkRf\ltbKE"2=+hi,6ND)N=Th.l,Zn`Eo(cZ?]FqCIY7rVc]KDDlguN]_<CPA7Sa%G\bmVs6fRGhdP0!)t/be%0Vf,2i$,\G6bT+PNSRg:7^>0Io]+^EuUhL$lYMbYtIaKb1EFbE7_5lGI-.!jS)mGs0Tk.jDn`/*jf;I%\(Q8T,kFOVms6aYaIbE*44"[B6qA@H"Ld.Z"lIT<f%/H%_V0GPOuIm.O$3:/#=/;\MF-kfH2f9<CB2(/9Ag<59eDL*C2YD\bX9)5%QV[r^Ep+IraHLAF%Y@KT3-e4$D0R7!]u7]EkfI&gABV-o_A.i[#CqitgHZ]KJPl89'^-bk=GZ,>@UMI^!<sZZZs#PqF@Lc*>JHjn%nQ4`[\P_bn9n&"814N?.2I3WkmS,k]lcj#RA.n%e///eMb#OntG5(e1]iShmo/DF08*sKNi1HXEZ0FWpcMLn;o&p&Mh/#B.-2_G-%gsPloTDqo.riuT;1;=4AE'<Xhh-j+NKl4@l)s*sT]ABaBJ/@5Z+HAq,?e'%hqV&mTqqf)=M#YM0ptt/LMGr[)ZdGjslRc/W1D73L%0Xl3EYJ5K21eSl!b4T,b]ddbh*+f/n*?2O\DMmtThXY#@$([]*oq%kXH7K"b3LZfEh/72c0\@Q0;7+?VrV$*Tmsf-E>ebm0EC;6h%[bnga[GcLJ[9N<R++l-0IE#d)$cDIi1gjG??5k.49`4XmO)N!%.0VF1bJ.0n6tDImmCi8or'*(Ap6puMs%c=<U`npghsO^>`)lpg%gZ0^WZekKP*,b\1RZnHoe$/2pIu1gBe.6`AIi>`okKmh_VNN`G7K&Q1M\/2+WkX=uaGSpSGI?XQ?fP\,fNEdIs/srNf<7'8m69/u%#PIgTNGBQk\7C&hh>[/UC9Ra=P0"L%VZ3"/[?I)!-:BuZJ=u152IshB_QMu>.99Z&<I5RPDL4HI#uOCM%MZ5+OZ]SN5(9OSp#J]V%K77s0J<LdE](KCCqc>q+;?(Q!=fsXYe^m9sdJqs\*!>a>h0QIoS10)VK;Y-gCSaM(e#`Os=RCQ_.c9V.])C6([9I,N.`[Vb0\2l]%QBQKeeN^)n0A:&<qJgPI5ABj1=;uN8d[,'nd#ttXWn`N.0T"BDLCPXE#a*M-9]@X=PA#e[[Mj)2KpLpEn]HK0SdK*Oq61DAV@E6P%OF3tBo(?n+A+`FjYBm[1IPW;pEhI%Q4^a:@88;PKST_L45OI#32apB.,V#n5]Z!b:Cj5323!\K?Y-h$tbn_=&dPX/f/Lc*[XcA.%%gp5IeU)J=hXe[@@X:[uT2QQc5^-0n2MOkudpp*4Oop?>#orI;A6>tiS[q_*a8_66N%FH0l%MF1iD)HX3+EaIs70)cX!_%s!!-e:T%%)t<HMaB@4TX\ZZ\G(W#@McdooGU]4SG0)_HMC^?,NHPYNV)%-Xo@3MUY?_STD+WBqHLSNU_7bUYZ2IHa?7:)a@hDal-XgCaOjU#%9/)=X[gimlk=-d"qoI3TCq'\1.ni*X`ki/3YI<<Si>jgc/(M+TU%QeQ>*u\8;`[_XlrNujS"[pNUqjh,'a#ViU^FucpZnLPi<KsD%5?S9C]qfD0maY9:<l5hlleYIH3-mMW7?aI9hSmW)oRU;U$7f14UnCY5E79YLbdVt+<-(B$i!e)<_J\JEfsE<*/&2-O$;\PeiO<Eo%PC./@hu(72DZ'[ol+'Ml0.e!K=j+.dY\PSdQLXI!H%I_3HoTmo"jVYY$0YE:rH`\P0;np.H*&uq@3RZfS&nF5"/U@(n)#H0IZ+g3%L\4j2pH.Ub(d8F5/q,]g`MS1<LAdoXhT1<)&QnYpDnknu:S&.b)ui9?kNZQ*-Rk2jbR99jKb2TImGEB!dAeR@rGMMUZBp=jIWaF'%Wf-;_HLGn\eR!mZl:o(=j@6VsT[mi<4QKS5NLiYOHC]6:;sM!K@ofk9=la_*[@4cK.-r8g^\tT8l<s)XEiBS8Hpe`m3AnT($ERf0%nuL;iqZ=FW8Sr8A0N>Q!U_6b/hlX>5SLQ1LhYm^qN>b@Ss#=&#!4G_`)UN&gVkKaK`((l24@^r'OR$iPDQR4am.=ifW83O+fP3k3%=kMj9ZsRmmJ?Ll#(*Q@,jp+DOpJ'r_@,6TN(@r=/emYQ)X!9LXn<1SAVEMNpdG4V6FC%8lI"`BCRRTq1.X.O*/4$g9XOq;a%'nN$%^LG,Q'"R<ap]_U!?Yi(3C<=Wgp/s[>P7R8skJp.kdM.+$>*]:WH,tXpp[&njDne5I'3t+gem#VLK@LTHco[-$[pZP3Z^5F1Qt.:F%(2QYmh+*aW$SV;b%BrK%%5C*kTP@Lh\^(g\:ok1^NAX-%\eE9ZhVMFBMg;O#Vtjr,?\LbFHFU]2Z-?(hY>j]Fq^Y0Wr7g]/3U5^`%>eKC(?6b^&[l]_q2Sl$liA`7p$E%5%;XMZWDls?DLBie+?B/po"uF!BbI-UW<QFbF;!><<@tr5Wr^E9K.%7tChHTq`n+S\5$F!('%g$-5[D81a2gM&C?q0loSgW?.W'jcD"(,GOf;rs6cVEZj'qiq;J_`cf\P\YJX^I&A#_J*b/hV'+T$M=u'osFUgoklH.Ltn[BD1JW+%;XCO?%Ul=]_2POeU]sG;Xo=>-"h4(81p+DKqVTh`Q`mQr]eG-KP>[t8I$ZK<KQnJc^V)\\Y$:ZW7#uLP?.T&q1@b)79iepUW<H4P%`G2bsG.@mGTe$\1-Ke$_n.O"sokl:E2*=134=b4Bp+A%qJ`jC"b&LNL7l)'@'NC=SqGU+<_1H-d5l#RZ'Obhb<Nap2H2IU<bAD9G%$6h\=S5il-Y17lYO4LPG*bck=CtQBo=OH74%>0T;-X&6rYn:TFDQM9p$q)N0RNM\H&6dekeSa$4`,]-9jHWqWqWZD1=0q+jImM[I%=nHQ+08F>?<kT;=?S;YT1/KU%%ioY]#DEC$Z^-";4'CjcK\[(ZhtXc=YRSF@A:"mY(5JpUiIs98(i$(!L:*-\_B5(((KuRPn`q2H%dU@JQiC5.f3h=T?pO=B$80UY[If#+R1R_(86:u@4ZN^]"dN6D#&"/UG/W:FH%H@sTec1NeU@H<KjG<sr>)V-6$X:I?kj0=`.(<m\%;mgeZ<u,H_JP]eV='MeM5@i-(6C+[IfAj5lmf;g)i^$oDn,_A[dCiTjdq1a".f1L(0XT%_c:#?B\Y^tRD7pB-iY!R39"A=EjjqSe%Da\_QGpeUOese&[mX+oW@4Nohi3dKC4WdM]Zi-Me7W$NPFC+pHIL*9%UXQ:\h#7bLcOH=>4ulDVGH3T+:Qs!Zl@fUDlh3Eiq3A^h%DU9tA]t<'^U6I4q-4eH(L']qD"52,rf&3E`]G-DXnk'0fI#jApa362\i@IZSMOa8Jc@Jk^F@d::9DXTk8I)1,cHSunKXc2\A"_Wi%JjT,!kh*4g/b366<nl<`:,Z:oduJL%DqEF;,P8*>Ge><34c,t&B]lnK"SN<W(>M&'K2*sFV9#20K@jjT$rUV!9B6]16dRPg3%s^f%)JZ73WYMckY,a5Pil9Ma?H=c@Af!Biq_EVaPh"5ofm[mTIj5J)jGf)s<pAGqrn<c(>H=(HL"gbIWO00YVL><so$1ER.6i$B8>d6T%^K+:$UH:8srG99EQhOa"nTXdkPs)c/V3Zd%8]\*kcBIPD<&&HooVC=e&6J^+2ND.qjXihXZod[PDKY3?dakU5U#nHPG+S$=7(V,Y%?[FA84%FXeqdsd&fNGo5<SDZ><Or!G-^=$K[hk=;_V1Kh:s`FJ(3q65dstr8ES[d\b$I6uVO!/e,IR<443(A>#V2gYcS[SFBm_d:%RJp4hS!N$&VI\#+]Q/I5f1[./g@CDE-IQ#%_g5h[<hX?cCA3bP2tl5s&'-.b"ZKf"[g8/MIAl!Q3VgJc?!Q8^brSPCja5!j+t`cM%^:XMT].)6ADbE4HQ/5700iL,$6=&XQX5VmR4(V#f?@^Wq_THAkd`5"_jA_R=H`C(Ajf`PuV(^ZFTDiCeV8ZO'XL]\Q<=6Fs1Tn]i%[dGPU]("fgl0?c7Df2H.nZ0%oqi[G:J"8TH+I1B(iMmVB_T$=UV:tR#Z1;f/=/t%>#aL=M;nkp<l/#C9Z^a3s*1lu6<S3m\*s>V*%[s+Jb#-mp.qsYs"@AOj'j8fH\?-?ri56ihkm=ASLSlo]kT$5H)qGb#P\!s0k(gO7UVc"M"/%s!kj4,ZBq936CbKoHbm3D((l-n)"%;.-5Hrr%5)<16@)WeFc5+kg.,m.j_/U-C(cT*JN68pbXF\"[6+M)824IV.`NlJ$c)`Ep4m.].1G>No,K6_?C9QB(nn'e59*'iHLG%A8b\[l1A'CYS^>R<S5U2>kqI4/JR@4oD5Se;PqLGrTWYQC[:B9]P#T-*%>Y6[*nN_=2e2(h5YFe08Wfq_EaqZoem\eM)824GJ%cU%\A,'K<2r[Y?a\$T:o,JsE8f4:<!p%[C3P/n2udu\c?q-*?^[)[/)@D$b<eIjpIiC!F(PbonSRUk:AsDU/i2s#l.'&),I#VfcVp]h%SP$.&<pd>7[GP-[YOk(T?WK'dfDI/dlqIXaHM+p6eL0t&Dd/9Vl](k+J#.qdjl`Pja%,#Z+-40[4dD16=LEWreQO8ldK`-alnt.-%.m<aXq*$\GfsfDmh'LFiJSjeOcPKL\Q/5gSji7%dDl(J$dSsuQEN'A30)q#*@2<pkddOOAbUS%+1S-mr\N?`BO@l@[p%]VP9+Q]B%L#iA:RN7c0T)\^6d^.rio*&+*f(H&[?@-jT<SH>4oX$FY'7GU9\ofOk\eSY^gUg]d@APt^.C=f\9"R_s>Dmo*V2Hic;];c[6el$h%<N:L[43GqYWDoHl0(->%SO(M-I;NE#K"%l<6G76Xmp=/;J(6d,>HH97e!u3,;sjG)"eFN8eS!-:?)TiOZVTt"kIKd?mA]l/(%h,3%D6I<]VbH]7l7L6b]FB9C]3%b5Vgn!CkG`'LcPG?M0>m[oof7/Y8-_?1:Ni'H!hUCZ_V%TOe'I=.SFb7J0l=KEc/-,;^4!6<g5poY%^)k%mpcToCe#&2(hHkC-hDTOhG?-ADo]c8.O6OK/\_($[_k)`abMK/#Hflu=@m85B8rK"#l1=O.rL-Lc5CFq3Y;oA`3;/MadUrX=%rmO*rli]NN\rsKsrLPd)I=G8JT7YpSk+8`SJPZ"cAc3tFl!*KHr#hA:Z`2X6LP<OAjhftl4n.^-ZnWj2F0(IdAhqO1DlYrdH#:B4%oCDg:kNV!FBlAVe/`p*IUN5PWAUC-/pRI2qKp`Cn*;4`jEOU5;5D>pO[k]Ke/JQTeRCb+5M_ffr<d@_5Q=a$E#$8OXeC'q6$S1+!%(\j+[=='4aSJC\T)H<7fK@W"d$rRPPlDpLn=aID9--`Q_/@!kn9_1'YqQu2KI.*OWG$o%(NMcWId@,]!jNT@CA6A7bNUNokIFJ#3%g1pn7gJf&W4%h2;bu_Kd.Xdfk<2rYg?Zqn4r4MJtMpq'!@&5O\r=K,^'e8ZBkC/]%nU_G:RpTC)dMcJlE^%B@C)h)]F-Y<gB;_:m%HdeV[1N)'94UbZsRJFS+.c#!R.a?`Q<XS2!PPcnAei6eofPQm:%*#]m;a@1gO23E=Wq7"W]^K_g=ZZaeMJIuCs%6?k3PS2.>)ZF-%0Ghf<@Z^doMY>,FX&&&Y<B^/tH68*Jia(q5]Hf*'o_[G_>#(RdGq.\ko,8sKV#&3oNp2HRB_+T"On2+("8?C+g[4A/oj@O^''012%3T"@.fm,=0QsS'!+7#Kng'(^G'7U`NFhNuAm;W%L7'LRsbkrV@XIIu=,u@gr1=e!\.mAuDol?LLA.RFr!b+E!'fa].e(-ReLs&^d%PhoI?ZX-8Y+(t#,"`nr0gVlffb;S85Qb<idjNA533K&g+hZ\p"eE6Kbl;#G>H'Vs6L\&BSRSK%W'ZoZL,^l)mIO$5fN2Yps3=t#a%X>IC0loH1,O/%jl?$cG)g38qPcZ8qkUap<I;t@@.I/p5Pm3<]?qsPM*YJY^+g2>e7@/J=?]aX6l>_tu:60u@p7m_tdMkNK'@M"s;%Yk=nL$s=9Q?Wj\trNRYaqr&ommtp7u#LhmS`0'($qnOasld"9)O]cSPPAsP4S+hK*Vm<pMj\^B"r34r;)$p#=Q+0J/B8Q0ci8%>b%Ao@Z,flEC-0]#s(hEe-S?#kuu?>]S#9&e%cD;)+)<8,"tVeP_Ae\trVUTn17pLfWVZN*lqMc!YX5KV0UhB*=&19'B84a)Hs.<rbX%?k5T5L3^nb!dQ`$J8WMQ`9PS%c7fP5?jkQ&(aB/=-NDb*>dIt]Q=Stdo&m:A6"Tq%U*4T=]7n'M^KU.HFi:$lGMH2rDLOs"Ea$[n%MHTkeB5M(h%0M1_RW6'S+5!8fGN&jLVrP]:P`7/!gu?_54L4!GRja:PBM3j0Q`g#Kf:H=o6'C4&VGQ_gjp.ulO=jZUm#p(Gi#J(S%#:^gFRJnsfJHeE5`G!S_Y5ST?k.Vou0mWXTW->_5,<KcNeh]$L[[q6gDE[BXQ4d/=SV]:YW;aeC!(k4DN1'a0Gi&ZN.bLQ'].R"]%R55nRJ&&8o\+s>.f*XJ#B`GnP/4pFjT6u\E%,?f#aNe"ROt>4,6M8tJaDSm31%@4]`3,$=Z01Pn36#a@&NJ?]"X<0dJV@lhh5c5(%=Y,SU]G"p,GSZsm[Ve9-;&;.iUU%Wh26g#hFn7C&@A-A3rj,%22qNgH)rgi_<:9NYP=S>N[o9VCEbE'u:Wn;Mfs*"(9uEO\8mquK%=::3'I>Jb68;J$PUndM!D-P")KN]0R_hYp<A[iR2COYWClh]H_.aD5ADf&$(2'"(=R=e@_m(MO@G;aj'7>W[QH:Y[`cqo>qhLQsi%`Mp[&%icWA;T7IY]>X2pYoXB%BmSEX5I(?8m&,X6=Z@9,<rfjP'S*Z@Y4XucE%X?'rE8Qo'R]'[O44Benpbh&6h!-'q\&.e4]q!-%ji?5$FFV<gR[gMT5l*_,M(rdRJG]0q+u.8RL^+7hO^o97gd>><0u*;I+hm+[ikC=-QZjmo6NU.I26JT@cZ.&fHPULF+tkF[pY>Ih%TSLJIPRVB]gc/$'RXYjC)@hP*LVqmd)rf_XHWl`kF6-4'#9auGi("]j6(B4h%EtgspjKmNE+A[o_\SkICa`eJq>*4R!7pc@[O#ra%Mng?.'t?@8DGtlQQc>*V`\bb&'PHEE;gR=UV1Zc\"Pt`&VSfBQVErCD))MrJ)jgEVE/>De%FXdPn!s_SC0DsgBo-q"XgC<s:lZ^^%N[/iB]eeP:%8+1/]Kfh2VukV]9WR[uJ1Ctq1$70TVB<pG"l@lF?)T#=ZXn-_C6"A3^fCIej&to33pqkj9eM=DgKO.C\,,7B]*14K%Ce(RH5W1'@/#!q%H?"'_%[mZm'HThg8#KSi(-(PIQ$@o"=[lTB*@'S6)1d6=W!+,lB8iAg#7IX-A']ORaP?ZFJ_!8cSI/%<aNhEb%bp!I6%3.BE=#?Z/X%5QYj%hVJlUjPlj^RZJ"g[\pI0':#!R(u)jpopT]s#Y17dGIS-AKb#;)K7GB(KY+^C7U6DD&uWBH@[H+Ie`f%]6#m`k`ukXV5%e4d'4,[2?Ae,HJe*.)\l/Y7S?.i1]H5]_%X*rPhhe;pMoc<,KJVKSeX*88*2^`\?/,J.tn.Q=](!ZiYh6F,L!h%%4*&O[DLtAV6>2d\2=>Cg(1E^TLMOoN8ets=r,@o>gT%aH\t'2bH]>OK]X\r#/a_sBlo.^BdjRfhZ+(3hhP1nu:M:#e#>7mh$GeO.%U`P5YjnZO8*SsVVgl!`-Ol[BD(,d*uq\HlO+i'D\7nt9)Cfm5ho*l:f[Gng/SrA(n;7Yl,5T,J8)dZ$?=sqa,,4b4:hnC2ZGL1,^%o_>a9iX)4bUWm6N:IP(DC_e7?`jY=JMr.cQYP7)%L(?LW_f0!9Un4X6g$j9+V\ii^JcN&_!b]F4q1s#m:)J_8lUd>pF#TmfGZG%$%!rNnHnJg6N20/?:I1sfPV>V#d\o/dPm\+BbE@fNL+257<T$7"int7D=!4rI1H'OF;&]6cFKW'\>iBOj-dh5-L'm!"M'2pV%9QI4'%R^@39q[JQ+N=reaVCQm-!*=P&L)5\3R9[*N+re7C'4pV:;'jZ]bf]q$"GF:Pdj+[PKD#N)IJFl%d\j#Ff>tFp_7)%RLd[Eefb9Da%pdtdo1S:eMLFqDKKg#-$^0L+O[F@6cVMD*$($$adS1@+STsMA[2hR-\&hnkV]'p->7!^UKF9@f>1?b[F*']324G+-M"XfF"8&ne0%"s$oNN1E<PSjCE&"ino^o<$NfT_$>B*$p@m4G1p?]49V9]'p+h-hhJj*4kVJ3n.Z'aJ&4*.!Ie\s*ePW*4itcN"8E**g30iTTcq/%YSB"0Adcld_HOg/?!KdOO;&HpQ!gItUl;9F0/VlAfYuq-8M#/Shk>E)Z@;78c<P;,.ZDFrO,I^+]Ua'l0g#n`A\f[s5&k1MYOg_P%?t></e+!@dY9kJiIW8KHoh.\5=BUO35&UC30\O_<\I)gBE0Bd`SWQd:c:Al9\I'Q20PSg!0g'$-aOkH_/UQNX@se0q8j(jh)@R6"%$52PZp3M$0\;e]%6U?*?7;nNia%ggLM1cj#fe#rI8752%[PNrEb0Ef+LY2MZ(_[kr_C\+f&_9G5^^R?$CRU8FMVpoCgp;9kIYPsi%1n@mR`*`67GNZ$n)aJ+_'OrGW<i6G@=bksr1Xc.dCO9GiaBj#ma-l$IZtACl0;IQIPJGq>'2"%R-g:f&?,Q6K4BZ'C7b7okI)!R2%U_nB)YMo:1dk7OuE,+*+8.9m!j!\.XI81$0[)qE377q53&d'4#MP.EFp0d`aK9?&7lZb)cD9Ed;L932QjIG(?aG-P4K[Jo<'h)ZN%()kR>l*seB^p3Acd?kmmFqhe)Nd7pC[VfuLgn@J)J_;hVD-8AJ!PQ2Z#J9FE+.b&sT0tC:`RiTN)IB3e&O0V"`\nVl^,*%5hT(Z2%Z0QVbNP3sP6nq@u$m>%QR#dg-_bp3#NfbaQbo%DU6dJ*K'i33/`tZ"]:50m?qCUZXes4)<(mZ*+[jU3Go0\.bNcUOG+=*2$R@G^R%k/jkXp#@SZK/7p<Hk2G%+mDMUl#A>XA"PdJQdaOO#L;M;m'0i4bCi@_T3]d!pTqo7nL:2Za(&cn`$]'W=FN"Li%,6&h!/Q@q2cjj%+Gl!r%a.+qjcKkoYYumeVkJC>@77Xh1:]]3bkGG:7j^L@!^&5b,C3nU)FiMSR>aX*Sls@`7e'bPnAsrj,(^(sbYK?mE;S^Cm.6I7%c\HjX&lI*(`qIL3DRK;89S+uBaZ0G`mpX$bR&&mdEY1Z2X;T]TLUqKQ(Ym%$rieN70OpM8M*g(/>auj6(cqPC/ff/39#O^;9JV`.%7r=SfaG^O%>FlqKBuJfg`r65VMWnWehBf'cM;``&A"O^kfuL%\(h'a:h388-er(5*Ll<3!Fd-5Zm>!_gLF1Vu"8,F!I8jF6&NY=2%@DmQ'puh=0Oq/A=QSd*;336]HACTT6E"V[m`ls4Eo.4,aE?f+W"Q[J>bX`a/+3m)TE74Q$_mSSOo&4DcDtI"g#l/G%cQO/V+3pck%rmV`2SIamIU#!j3)LG\Djfsf;=c_$9eBK.L[lVTAM9*\rM0(TS<BF)PjKORrfoOm?4'#d%5]JJC@\dg^JgWX_fj+0&1PFhG&'$Jg%9J298#[B=/3f=^>0he_XG)4+sGXfkl_(u@r4Z9)\+qDMk^_O6R"KJ0+9I&uQqKN\dfq^ruD`_J@Nb==r\"g#?LKNTUM4=cDZNWuh%'!\/>+2ALOHm53=;0:e:i`!`tYf6)VJR_,tH]A7&5C5*(&MojATFVE/cWgimT7!nWYuKreMp/sj4Vmp.iNS9jlI<.Y)X.MFWR[tL%?\^q[N7@18A>DEe9Hk\rYtQ>d(%]BkOcbNG`m71E/Dc?8TOXXMkAOW:XKPn1$`GY4L)IOWiKDM@]F"=J7?=kt-PapF(7T\$>[Y<?%1_n:r#<p;IIFM4UIu[5a'e\LWEm.Lm6tE%38VJ+>L_qi]0&//AEiX,r2HSn/#[d3,89f>Jioekf/rMhR2MlO/4W?d)l(kJTQpB7P%c%'U]pE\'>f+Gp:HV)+6(J"m;Pk3G&fm[MJo^LQBgVSe23RH6^D?nJ`NZ3VnH[n<EST.g4(_YC)jFYVKj3R,T<V<mZ?2H3TbaH_R%b/O3KGr+?M.on8\oNQ@,H0MKeh(7o+(OO-'gfq%nQ/BVT#gPN_A<^tXIB^rYjNbaPaZE^$h$;imAt1KG\35`;A@Ii5j$V]%bZ1Zl%/u2QIm@\"!Rue&jhGg>;k6Hejg$N6!35Z4ZeZK*Vq@]6*\%Q<mQ$VmT>@-[LQ$SYMn>^4"<^T%ON8DT6+-u7?joR&=>[@.8b-9?l%Vgl)2LVO>1g\\4fZgY+,]Cs3t?_u>%HjB>j>#9rZ4Y2rhoHq)ro$RCo[heQjGbudj49nl43Zq$K>Zpa\)jBl)TAK;q\Io4Dno,.H%%VoMKN[M1ZRlV':+&gZ-\<YsKG<-0p95TlN[Z,Ous'fad9`AS2*?MPLLn$sKkn&'aCD(fOePA/%O\'R8k<:`b.eZSWIb$0C.joV+%SDSujpQ:4N\fR,4JK^3HiaGFkDB*X6R%a8gNHg;M+"AJ'/fSD%3>d(q#hgtb/bC?(aB\mV,]WF).;ghN#Y?)`nJL:t]0>9o+t)$.%c[_BV2OtqDhVEkTZg%C.km$QL)*=>5cf&Hk`AtJF3knq281.3Qb,,R'YFK,]?')LbCc:*O?L,\cFFK,Y+%[M0S'GRjYZs6`fUkPi%SR4"?T8"4:S'Gs.S="OZSR4"?^%XRmCcZ/F\oR&:B\UX?e+r+R3I[>eA^gJJ0(E+@1n2d?=*2mDFFGJ]3-lp8:$:,X^*ak\PtgG.%9,DIpNKR$!LFNlLg$ighLc`7ZB%)$&Tu9`aA)T=S9TDQ_VMia)EO+j,Ep;fUgEa,ir,V'"Dos"HS'DP\@*Zj'flS3<m+mhtS<;4*%l25A\K_Ia;Z*W]mEp8>6.lp!TSR2n]SC'K/2BC[[/!hmB\h]?f&^tZMGMYj7VXnSbpItHdflV+p65G(p)6*$-T[/YaTA?G92[rn9%m1-b*10Q:GE9sk(1Mj;ellUCXS\K;%l20`ihjZ=l^:L7'C]244G9#tJHn+g,%?&%9F[E6OF!iBS--<IgUKge828+)#$JOE3i?<Re%C&rQS3=?u[30YU.8N:%nrL\Nge%HsZ&GLJl=1LG'G!,Bq@/Nk92cuScmXfTPhS]m.s5*?fCufiZcti%nq_#n"k0>#$@2I`g:/_M2%jt9tfnu10qGtn\8^Z[;AgWeoM]AY\C"GA5B]&q;,.mku$o55TY^ZI06\T",<Ys!1!`hf&GcS$LJ+RVb@/4r;e\i]fL`8NLDL;p?,%`_N<;N'*%2CJ>H+7S>6%A9"Kec@FaF$fQo6Q%jM3/^N;`)n<$nZCj9WJNK!W@%u`r&K.(0o4A]qTrI"%[ZU91[SOWNl^&1s`.g[4%a,#HOA<C>`,=Os#Z7$=@iUQ"to1^M%1%$'G[Z#M%N1Em?YcoQ0=Be85'-'CTl^l$d>Vp0NP;pt.g2h2Z"M$JM]JZZe!>1TXIHQf$%)(";GW/[Oqgc%q17daPMA0o!PoJ%L/cW+RcE(,huGb^l?i6?_>5\>oJggcst'dBP2!4%7HXG@]P(rE&3#b/cMDXb""p[L!\UF%aL%h_Be/`k=5GYtX/A!.(2@QkAdTV[pi.*enYeV&R&p0f5.=Fs=gJl[AL]]UI%uo\=CEH@BFq)t$f[_8C492r)eDMr6\biXE`_)t%0I%5)u"+jE"8Vpqq(/L:]0Xb)<Nj%_X;EGSnH5iJudo'7<^Q&7jYaM1?Q5L.0od9WYo;%r[?*`u]]L0lmP>h^4Xkqs`XZ"^o:'f-9+8%*hN1P3.\_a^lfX$k)/(7ZA(t>`A?*9ajQIW_)3J#\'s[6_I=5>kI3+jB*X1Mo"6n;fdEpUdP/=jQ,MbLKl^m[4TuafOcu1!)[r(r%K<GN<[G?M7]\].ZN^Z+b*0EZ-Q,.oB2of)6NfK%)Y.TU[`Y=`Wo\9nGB1X]FEa3PB-S^b=l<r)fkI<pC.M^Dd%(_M'QlA98c=/*V%q_ku)fA"(])quElT&Y,9s(JFjF09C.F5<U6;r31J>`6.?i!)q#4b,(3a)rL5,>]Qg8/aUC#`5"cFcX`KK\^U?@pAku@$uJ2n[>cI%;>Lo`>PYtudWBp+]X4qgI^.IQ=k)Bap'K"2]6U@)Uq-/t&tO9'A!cAGp"bmfGI2A0=6dq`lV1aBT(&m4pH<?9`VWk84rfoU'V'p0%rI%fa""P*9_Eq)]T/Jj-T4K)>eZ1c?lQJ7HE2q?KK.GcL^:X#:8i4;*&)6MfmN^p:[S05,g5-`<&(d<"B=hEM[Hu"Ubfk"\2Zlt,%18-YP<P=fM,XU$nnG_]E5c*1V=ue(G"QdNaLK(iJUUeC&pS,:Kl+;I<N?))8V74l/:Sfo9_Ns*XX5HUnji`On=(h#:f)EZe0Rjni%nt'ld@tQ)hU(@@#n?T9'LenR@[bU;;SS8^?IB.Uf(@:E,T;f.6Z@(Y,#)a<X#u">TmbOO6e?I%#\!X:OV`#!/8:7^mW6J\,)-RbK%;UIG+NB=ZsC2-[#IOr%E%5ZqhN>>^ZRjEd[HGi@q+ac<m&qC`\.kO)$<Re+W+YfE_jN0a-Dg;eKkoH(4(GSP*>$6Li2%ZZ#T-TT=%3STQ/V\M[a^R'1un^7o(dUL`$gbdte=6551"h2&mO6pFhX&m*M)e$X'87#GlG)h"Fe*YSF:`-t/Dh*S1J:%*km+D+Yqo<.d(`2N\%.o0WtqPd.NbFrP[7EX9L6o]iX&V2[3Y$1`K\J0$\*$o::]>;YXYa`]gd$4p?OfOcBcJTg05:50>fNGI!!S,>cT0Mbc6Z/NRnhY7M%_O&XjIX>ei7'`;d;pL,i&`H=c*+l\Up9%bu8o8ogIXBR<-8Xao$V!/>+?6tblt"TOf!pX:i*cKhM1E6_'KGqH1SIcCpRWS^jV^&n%E;682'GYi89Gk))H]<g/j^b/2ZGE#i7r@>&IcX\QL?8!EiRj6_bBP!GZ?$naOU'#r+NF]7K``-tZ#8(Ok*H[c!2JZV\jg8t/AOOi%r,VjDep-O4^lY,MB`@'`=b'@j!/KFH*eY`gNI&=d:m&'aUZMRQT@4`:$SX%prT;8d=b'@j!$eS-6a?]ejo>nEI1+@&gn`F.[`WqG%+,s->,p)sdQgtTNj<7Z1d4XN"FqVc)0'/iHB(mC]Pg=DXdQ_h&?blW]'>B\aNYcU*9DQ55WVnW>o!rA;J*^&s?V;gtT<o0aR8>^;%CoDUQqSbN8C=IV/GSN)\X5D!26[A+m$P-P`P4]gj?GFjac&WsEZo=DZTd&=Y2tUpbM;7D5I]Hh7r5pa7+ae;C8%R<ucX:s7p%-sJ%2M%N0^K^Y+alJ=$XVdSM(%5JDn6>k2^;#ielSkEm1?uQ%iE:B#Q3l@4(ETb%/OFUT]m`iM/'#9RcSZaJ11kn[H%^PCSA[S*M([!n%MfZ(/GY\NTV+iAoS_`QI_9X4f?GH!_/nu*mY^?>Cho@[!c?nKOIO![h(OO<r^Q3<'&a3VBFEcr/<K);'L24t(h!5cJSjGU0j59/=%*`Tr4A0d+RYMT=1?+9Zap'\?.1[JG_n6>kh1PXoHlPFFK%a.J69R8(U.jpYWi.%e7m'.XOY@"dWi-QR'#l"2k@*&oErV6-`Kju!@%+(+)UrPELG$eaQuQhO;e]@Du+YmK4O(OiDl+rt;5#2e__1Fm<O=k<MQISodjY^?>gZc8cslPJYH^@C[b$bt4FhL0dH%Nk.fI&#Qa%kJlLEk0H7J-2tT,Ia5<&-gF+2f.VM;:!U/<^qG3U\,$P:]gbeP&&$MS]=E0fHi7EEg,/B6I\(XLc[OI/p[Q5mAqf*^2h!ME]@CiT%Qn.K/^ArI9$`IKr.V%B%(Zk#UnaH,YpM7>.j;Ru'5JQhFB<C8OMiDh^?hgpt7LkK/Y@%(1h)d)V^":Sk@hBq/A)-AdEEtTe]mc*<%#KOR1Dnn&Kh<JY)1?Q9!G/sI9lGoGR5M!Msi<ccG@>irtp\KU4fPhfLlWue7?!c^Ta>T"??GH!SKd!>r7D@A,r)Q%.DU8+PqH5*>%-cFFrnb?anjF&A1]>2O>k3u\H3Q-#fqfC[`703kR_mBL6#Ob7V8R1o/'BP)2_cgF5E&s>RCojX^pFQ$$CHIIeo#Gmtmc5VE>4eK>%m7P(<'ML$(WQ"b0)'OM$V:-WU:R.A/>i3d4o;u!kmCo@:h9WbAE3/kKSmF%n07@Kq[XPZ<SWBP_oZuulQ?oL\AGGl(3Ff/gQ=g_h%J'QQ9YM4D0bpdSN@HAiFTBiB(K5K^]lg3qXUNV*b?%621O49f&q>1!4FWmNEr_-Ufm3g=hbK\S,G(!l7p%,9bUq<*Jm3m+*ZnXKa%cYmU`p\We&bjX`e^!_A.09`ObR@WZ1(["l!gu?dp9)A=n>$R?U2MK<)rg$B+J(kXF[Fqm(pViZkp5Ec(0>6TtmBrk+hOiH"J/=,Z%q5*DIHsf]PBlALlh;1L<0:ObqrHEZqfqg3C#L@#@mBhL\o"8K,$f39,q]_mR$C_9II`s#&JEHQ<]3T\/(#%*^q<D5`AGYTZ@XY-(%bsT7i9$53CFL.:5@4pf9PoQ7hc$#<rN)r)WOds?hTlP.8(1uhhJ=X('#(+BHI%Y1$7E;aWr5j&`jR0J[[H>MdFY-ns/_sFl2rshZ%ioBacNHS:&9l9%iX*^?3?>ZNJ:4Jh!Y;bPj?s@Dp]6SPjO@U12[+$Va\b`SXdL.np`PjJNP8S;22HLAd?.,aiGPe%7fY>.L?7]I>%m,0g9mR]3i8\8-:W*`VE]4C"KjSSNcMt#N2f#W+o2eROPkDAXEGbV\*VnPFeIR2rZG2VOeQMcD=m(NilM`L+29"n2h%Lk\8,:o.d%l/0Y]cL.j&Sbme0Ub+q-1]/K(?aUt,ndc3Ghs:S@r.?B1DEl56%m%Z?Xqm.H[(Z-bq#s7r4R@+feLGs2jWAju2>]\"gi"V/b\RVG%--V0,9,3l=qaVi9,363d-"I7bW7j1gNG;c6nfTHMoU'1u4P=#GAH-k)WM>Z0*%=2UiSisf+?fF)7JNh?cPq_4U:DCb>_'Irh,7i3%QXQG/]1_u#C+5#jXO>k`*2uB`11Xmkrfh[]IVP/.XemgiE3"ukPM'k`.5?mXB2\K*Wr_Tj5!I\ORu@R!?4%0Gm;d'S=Lal,Gq"4-%qjkSmTll@$JLPHl00E7+1\^cEk3]$Soui'ULcF&/SLq\[SG-A$ZM$8VJe7+Z!Hpqf!'3G%oNQJ'C5I<?p7F"bDd.GV%Sesldc9f]%0)6j?R,<<Wn=a<R,r5J(QENq8?Dk5#kWr^=49F;lH2=X(;d<g<nl:rkC0mTcb73dRLLL^X44S5lX1WFT_0EU/"(b0<>:Sa8X0]tk%XguWtC0C?gOL2WJF3<(=oOHI[4WkcHnl"/UcQe,lG6QFW*:^o5/Q*ueGQ1#W0JL*SbCgpl)XZs>Vce=ApF\@*2f=ksrf&W!0c/X=%_5p.2g<(t$[Tn8DDU4ZQ[gr/@1<hEm9q^liQ%e"IT=4Au2`sTcY16Sk[cRUecP5!Uf-25D>;o>3pqEVGq8Uq+/F@jo51_="IJoO$%6fLfR2n)Gub6e4q6^!piMjsK_GnF#pT64+`=h@`Wi/K5f@6%f?@DGTtFI9T:PXGJf:>W<cQEWMD4!\pEBY/q0XU"ap)"[SKAqefo%Xn4m%XgPp^CbaaS,d2,!7=hM=1Jh-<]6Q\jh+)AOj/Ga*odQ.!<ndZi3YlS3IA39"a6`NRK%7T17FJs'k?HRIF@I6%dH\2&b@l>G%_2!KIP=QKs^']"[fXB*cg`Z$a?ai$tjLtH;J"-ZI*O-5j_;WYX;I<(.Npb-@i`g:65IOHmWH(CVAlatY;q\4Lh:,>OmOYbj3]2gk%cVmI?Go]+aWU/Tg:+F`[AlIC4b8cDYPp=4`r;q:]D%S.%G$[H0U%2]_M^oW[ZrsQGPeT+\5P^YjX1>Rk_SsZiq9n]E[T>HgSY(L"%;p!_0ro9A^q9O.EleP:.eOHLEfVm#;Tt["gc1Xp,[dosER4]J/X<&'.9$0ilrNpc</?`CFENUS:d]F.&D!c,/Qk!$Ym<HO^aGF*l%C$C&S1VG=U9<Z_3[qAKX@7C`@E2s?`cP>o+&#BQ@KBMHd#4,HI_\S9?,takmR5"i<=))RmT56\<dZouq^;OD:WVOAh<O:4/Ui,Ga%H!tdUiUaUE4+$3-hq)&8&X`!j>V:+s,sR^qP;9Rqq7KNFn6F@.?,/YB"#fnffg-L@BC>&.3_N7%+.R1#Qg9X5YPJ"Co$0foh#&V^%$`2\J7^#^)MHamSV3DmkGgH5.<6jTiS\k,'4WV[^d/:`XhH2t<MjX1pfp$.6*NS-Aa`3d;C3Xhd,Ia(/DgIY&Dlg%dnoJmFB5'%U%KjP1BWR6F1l.&c,VfRB'oDk6%qs\!mMotWRQ-F,sVHqisVO!1;VaNS2Bf&,d[S@q6D#oQ5+Ajqt'n+<BmMY<:qiM*[3,7TU%_[A"%^U@?lmU)d40A>r/jM=$cL'_VafXf<g[jSQ!;4EJqL:>,@^XQ>jnBjl>`a+PXaZaPGATfpu:BDV`Zpc!N+CjH3oa"/1/>_"*Gl0Rl%f_gpl>"4q!`b@&6[.hkdaK1EN>d.UmW4<%JCMq(Z"5>plMtrC70kCdUrG[*8NaAE;3QH.%/EYU1#^N\bPnPEF]%nDBZ5mA[n90+W%.;^W9H\H9_Gn/DNrC9u"]c:n'?Z]>kh8e,W[JBYU;u3Vf*,juOrL'dS,O)jM:93[qF69Q)I,(4J=o&"ucR.(E3Mh'Kc##"JHi.C)%@:"5"/67dU-`g85aC9>(='f^uI24H<Y.H3,Zhjp.:OVLm4(ef[C3;.1^8jtVZI?1j5"N.)MeF8)YVHu<?*0,jo?7Wq&O-fY"2Oio%dfV<O@"&u*:@sS!R:RUBH7bD&\^bK"PFq`5io\D?f3'pLL/dFr,)08sM=fGT@g%3T@ML*3h4r3Le9ZFJF[lq^j`a[A:NdM3AL[!T%lF-5_LUKmpIL*,;OcI1OLp(1cad"hbYFi&0P'4dibkJr@*?W.B^\NQq?rqhB[LXLC*^6Wd6U(7GJ[TaaS^c!q7#jV'-lcn"#hP=\%+8YQgae9$)LUIL2X'78T9HTChX/enl<L?(\%q+BW5M43S2tdV@l=CI&S#^W*.9)UGgSO#[FA3GJOng<7!l28>.,8g/WucC&Fab43%k!WCBmM(R`?ZW?);GNkMKhnhBM=l@BIMk&Md5]dPXH(\5cnM".O#(Aj05:"&(f9LSoMTJHBSLa9i`<h"5>ukVD/ZV+JQ@n_8AiRI%&uheL0ql\68Bgle^5+/b'6Jj1f$*LAk^>YCi(BeT%BgA5)kb6kO>4N4L<,b>n/=ZT`>Do+%^$?\o,D!\%PAYaG0@pe\\h4bMqQOH%KJ's5eDf<^AnnTM<)VE4g)g6`94^?f4JE)L#kq%od(+@jb.PA+\=lg?E_oDDC!XG7S:?`ErRk3lXBm:@D>,i(''W!b.7Wul%,"kl%p[]%Y_#;DQ=/mLJOXK.dn7t#UI]+o=15cuS^Pq62N)fgQ+7.'dJ)6b<ffp6Fic-7cABRbd4#(.9)SVI2#CWg?bGPG,rtl0Dq45q2%A$&M8Ej;=nO<mK;SGLb<f.)5"'cI<=I%8O-(E9@N9[lYRM$[ElD.qPNK#L[1Wr3O\XQ!Ku?i8Cqlf#F7ATLt"Nl:Fdhq.T=Zf`1g%ZHU0TA"+;SB+#6(Mp"=\&Q_Qb>NIjKhc@&4+3-B-UIcDak9oh$W'#Pe(Fk,NohU7g9tgY"`C_ekp1Qlm<I]%<lJ9"ui#h6/dd8;$%k+D!bc9q.5G!,#4S6u9CN[NYCGM2nh*H1?9r3ID>\p^A;^,R/%N;\73j%6^i%*:`fnYFpe"$a&NB81haA'krSji"s`#V%oZ+(Mai%CH8m?A6biSG50\'bQW3T^,gLBUGjsUMOZ#7gu@%5\Rl`!DmOgkA0tU<^NO3eWHds5n@+bskk'r0HYB*t8UF>4^7P7A2X'Lu[)]S)%^f"sWhtH@-dWMGu>J8nambh6U?1FYNGOHOdk7e(m6irsAi&;SE>Bug(1>c:sVB*m=gJ8mmaoRGn#-IkU0^.-<+pS$-6(kW:"VS83%ghpY0ij5k7]hg"a!=q`fh+?A3h'_1,ON>_RTtBlDk.9ft)Ug4]b9J9S$6S'700>VHqW0'ScBi6)I<Y#NSf<reo<0r_%q9ZRfuD*^%[oUYZ/WTe,YgO4sV:)uJ[Dirlf#aG*W,_T-m]hr/()&T;NX=t#e;M9K-1<MgWVPOKlm5`o:_o:Ak;E\h*#:dk/&1i!2A84)9P"<o%i35K'4Ir*W/?!G+]3);mZ_O3r[4/g_L,&c?HL!<=hob<?/D,6l:&VWpa8m;7mX(P,;p_HSlc3@k$.?#ubJDs'@?;JQ;>j+dQ9J'S%41QCWUYoYp:ddQ6es/?)HBh;H'OCq'EY%nhT`#LG6spqOp0rCf\@n[u?6i$U#!I[oB35h-7;<$AS_T#X:sD3Pc^8)8EJ,fH.Y2(s%;9\WP))/Wha7_XK8%.N",S[mjNi$7IH+E!57$WRR,*`qaJl2"oGYpFu);Lc%b?ljfI>VJWm7"k5jX>^Dmmnb3AMb*]</0nY)B!Y`%&"p/g;V3Fh^Y60:[G9k!Npm@?M_1FLgIG&MLb]aoW_<Q?LGBX&,!a/Bb'A`.Z-c$g-E?3LA8De\-Y"AYK9rhTRh6oU^,/Y(o260/%7S_3n*_mR^;X__e@)8W6\/@:V-Pd]$N(S_H7UCnDqnd(*V:(M4T,BYb2\qo$3F$QLe.stf08qq:P9j</:Hd$iB(eZOenTGlk46ac%R<k.]B.IQVUi#4ESTi$=a2^5D>d>nF9LQaAm6ma4q2'm8bd25;lBp87KD-^S)W0_,E5fGqaF5bfUK+h1`-raU%)r,*Eo5#Sg(it=%S4>bMCgG@H%g`-t*MnhJ(:cq?k1G!"aa([7]WLYbSHn`0b"'9oi5mmOI`q,d"UE3ADS):t*cNuTn)dH:(I1,GOGl(;kC7qPaq5[#%ZRG6XSDj%tPbs#K8t7.j]m_N,fASPZf5GR`qD.BQlsZCG2n^fFiSs/[:HU)cgVtjhfVusK35$SNnc$qdBp+d=(W"O;`tdKpJphUS%A[+jqNQi3m.<)`Gb^D#V:>Xh<9)H6"F!i&i%WPPOQuaV$QB^(%XE$M$dIE_JXP)*>WVr$KqY&s?nPM:GSS=>WC+#C^Fs2HrfiaZi%j6tHoQ$E-N>=*_2E/cDck]RI)23gG+FBZVJg3)8p8%o2_YE'S!-JIXEW7N<:X,Z"IqjToLPZPRVpj'n65/1*ZrHEN;Xm]#h^Mui\%G[$#q5C+^K\Sonhl"c"_L9EhASX?DHgG-tEF?+,KSi0Z'X-lC/*9h%+*Hb!ojF#=_36.u"X,f9=;L(0AN,3oqO5"GTAj;1H2i023%pn8g(nY,*PnoAkW9Vb=>7]''4+'og[YC^)_Dt0tbb*0MWQLn:)c;;JZS_><CbbA)?oFDA+*&[nuH0F594P0H@!78>':Rn:Hi[(\/%4RmKHWL;lD+%sjp/eP9(.\Sp@>ZWHg]mc\32$uD/hL,X<IAl!!e)l:L_>""Ob>FkD8`clQpD7[u+'IkiBIArP$)8,LJ?Q*;<3,$(%-l5G",%`CWSA\m`+j1bimR)"_"`VKn.IX\uk7&7g+309bMk$Y/IOM-kNcIf@A+k/=V,hIU$UclB$BQTrj7*2C^&PF1cj`?8)QKJY%o4Ph_HM=r(ph7$tfu-K,?e?+4b>t`Nl.5/:p&F_YmC2!AHE3ZC:?DrI`SFfe/_/b4[<e!@#c>?"S.C6I:s<@g+4/u(#G=,NoPSPr%m7a.S<D2etmCG5[+=$?VOZZ5iTGH.o<b]9Ep9X:G@0*pgipZFuAd"As9>[BUZ_Hpa9:T)W:A_b0?$`KWokR^/n`,O]qlR'8(:'L+%^!1u3[r1Q6?KWg*46<KtICKq_GEpp@b$&6@NO[jiB9YHtI.51o]2G>70l^1/[U*B89<">BOf*J"!8GD9La*fU!=q)u4OSqUkq;i.%N;qcTq"L0YA-cZ8Z&h3'UmMg0Ec_LYloqD1[-7`aM5'DnE;1BF99,]]:QG&=!/I\GT,IEL.FRf+k`GlnpN$9&r!R/7MabZ?+:CIt%PMl/M@EaX0$_M#q2!Nm]Q>@].hb9hs``@)2(gXaDR6BT[1q(5Ng753NP]ghX.I0fc)pu(s,i7<j5#4!)\udI;!=bQD]cPW9)41[-%oeLG+:m$7@&]E:Rh$e\C(YSHRqBW24]+XbdCK7gWeJ*UeFm[f6&j<Z(Nt-f72gP,bf=bR?HP3mGJ!K.S%b@a,)JV$OG/I6NI\u:)%]H$pH/S!aDMf^dFjgW@?AZR?,qOklB3N$?YDfU#tDbO.,:P-).DU-//Wb?g]3<r3iZ/#?X+,(`s`RCUUY:9pJobIF?C$MqnEgSc\%'<M=3=CSm*>Lj)lG_20fV.1Sa`hFU<Q=ns8;SM#a\_>:%(J9U_WiTAogN5?pYmhtL#9Ks`3.VG_AAXK\IkrB*JtWh79Ymc.iu0E;%bnMoXa#$cTRjiIF0:njMf1^/oV"?_pM77^7:<rJMc)r;$2Eff5Y3fd%SLPDPlj^HTcQ4.E1-CG1U[1:N=Ie%mF'FXqk,ljGQP&H2%eG@1n[FNo9n8'uUVCE<.(hH49:T8UMJt&6nJrQEXDhhcLo1ufaUh_F.b7?*ro'FN4#T[9pi^k'\bX2HLK0sYnp=O_XM25C4ossPN%47`T7l85'<)oVFcfr8+iP-`&[4%bQELC<IRJSi-?ei;E3Gf=gKZbsa?If8uMr-#UFD4)6$.*`.+a>)Yf/&,7]+?QbB'8h"A-YoUn%W8Um0\gDq2<0&19(1oNQC_VBQr&3G[W>g?!Qes87G=Nu%@AboD%bpErb]@#741%2G'T+$>k_/kmLghMW%E)087Bm\F7/.mD2N<8t%UGZO1(+]>QAL9?R1\)S*875<-AdB!%b(IKnG*rs&UMqBtB)KY,iE4UWSR!(04ZL8;fl8lC2B.0S9o9jLO^/;^&O6GZJ/h1JbsgiU%Y]tu*=/\5<Yd#;($mF3Sn3J1;+f-?P#T4Raa[2Xp4+jRm[Cor>E%Jc^PalI0.jqE/j]cb6bXW6V^K*?MQHtT5R!b!G/;q0"Ko'M-%MLYiX5WL_j7#!Wf#\TtK-54shEOAPJ$C%fo,<dakVdTgVJ*jJM85XK\<S<'m)HZ5q=`-\=VBV7Z@%m/<i698K.WT#kKZ"`eM=a>r%98]Wip_fJNZXH/.fq[F"Ku-3.?hSAEcdQHVZTKd'/[)J!f5\LC<i7l`9@EE,/PFB/ZF6,AH_4i^869j&`oRmpnT)qGk=j3a4(cQb%Kll]t+';'_1(OGfI-Jtt?Cd\X.aP3!^(A$aY*#>75O9+5:T3Fb6LI,oD'-'pcQBH]]bKj$<qj.1&\LltA*ogkk;r&_c0To5#IA$p%')#_U5!Sas5<fo!:%mGm&V#8rG%XsN#IrJ,7RmO9fA"[_YT&Y%[oRm)9&$jO(MT#`NeijG\n#$h1GliK?obYWW"fof.Fs(T^%f$W%9E5LggYKPVS`3gU[%2kl9eL"aAXbCj\Hj-N6sI73TEZALp2^'T5K]9-gQ_<M..EATq<?c$ioNd6>JF-t$Mn7LSo$1<SYn%=hnA'\%H?$krb5Bi)SE"t"Zi!#Hc5M`AlQ"YG]\B8X%6X/OA`&rC')VBLs$TWo-tfR+m$mX@+p+#M*$RQ'D'I!3*!n6_SsouWG[K_2pPe'[%akYOsG/sJ8?WLoklj!lAG,s)XQg7V59C`AAQaL_po,R7fp?^/Kl/,e$q=BuOUO6+R<7l'iH4*^GX]2^;3?Mg5o'3jFV<5:4nQ74t%Vqqbn(CtTKf;6`-X%s71T(>nJ4c;n%TGi'(.^"m]G(OJeq5MZeWY7?X2=UOn7!aG4W!8icMVJ.($**CmZ^t9MH?VgJ\_O4TgOk?)%)Be59rbi#LW6\]@O%/H.qKKWB&<l`N!WKu4h+W]hOd&f[I]*N8GYQDGZ:Qd7493:`3FD"D99$E0UYVqns%Y0kkiVBmEjq9<:=?Go%:j+-F&(Cm2:`:BdE)6$B.""bqaTDBio:Nr3r&ILX8c%=G6=>J^_nY0N*dmbcT`69++aKHfIh\&'I.8a2$;sV4">M@kC/-]F1\mT'%9\oMi5^o_rQr?^RLS+8Z2QZ.qjWO)b&1&o@R&6:99g,CgRYnUt4f<$sdXiK!0NHJ@JuEBcMtO4^C\lu,>-R7(#pEpu8lEap:cC:Z%59W=n7;0)jPC]apJ"5+*;:!@AW<##R,3LcdWjZ>4[0EhuUn!iOAPGQ0O=3_':6KZF1`'StS24+q#D`O^8*3@:5T.DU,X<rN#61j%%-oo,ZEX"^l#ofOD6R:cPS7F#\cPd;N3T$P1.noq9>UN^3dtF-ZcQmG33E["]f)-rS?tOZXOj7IHp(OgN7*T]F==@e(&Y>]thPc#e%n@i8!m;e=<Za"oT@L8f';Qp`eL.#/lYCe+aTIk!4!=r+MMP/%ldmR1i#u";mh$_[@;mbBbEWHB=,:g-kOV9QK%=iHkRQ8bLJm^pj%PXS5qBJUL(3S6*]$*7RTGGG=^6tDtGd#Np83M[n$ZFkuQ0R\JWkTVd4jkCTp\P%3pBp1DGG"IObU5j<hN!"-I7Zh_kABFp,p26)0%FMeXr9\85Hed<5p+MhDV,64b!:"8_VNGn;)kV#BFDO*S7">u#Ie7/cG<LEn&:nIlb(n/ZTdr\kC0O9tY;Tb(iqOX[B'Olqfk*;Gb%l4SB'rfdgk8n)iF`@qQc;,&u7PCP.RL''5*=eg580BfnHKh`c%-;k,Beej+@/fAcLWU)cNdPV)''noNk>29,U7X>Em!BORW7Q`G[%#SMj4Z9f/HP/prC9T>d0<>CoK!BW,!O<m?H#t3;XWWE;*VMAWt"XCpUG,1f['UL8)ZpIW_'UXWt-r:&!NdaDr)%!<\MA0Y8Y1RRl%V';nG-Nuf"*=1\hb])73D#Tm#6p"#h<6@4,dR;Y>WZb3+U6.4B,$MZ(-p.WY;_tQ4Zsd"%_]oMM<6_'I8^[l4ckX[&9MlNK>bJZM%;G%O#K0V7&H3#1`aWLr9cLa73)FfDuVf(3J=pPfoPlXT&dh)5?C,2C%MJ*P<=@Xk"V('it7&Kjt+^Ic@*/fGN@LgU_@[1nd'+mm1%.^[@h$Hn"R$7d;86a-\l!K<.t5XGu!&q+-2)=X366lD5R#0KN3H:6/R@h9ajlnq@s82gTD0a1`Q&7Ghh6o>D,CV"?'DMTKOlnnt[%U%_AQ&<Wnf-)jM8m/S?o7/TKPc60<A!gQ01C0Vcj)^(:p.Kj4R?m$[n;ir'@)e4or.4)""5p7.)=#G%G1!:.fg&^[a^iY-d0%BB`%rXkl<3Ya85OA#_<,W8j4@'$*ni*e\1dj>)]`>#,i?o&on!umK5=B-aP&5\0L7jZM2(c$M6;*_UQ[R_U=!#5oV0IV5d5kuZ23aY@0%6)HZ0M$W%06HF]]#%Og0:cqi+!_bnGg!J/@2oOuQ%]##YLi+.'\#JRHXi`>rL(HdR@W+Pfd()k+J9XC9.th[ECm?VdWXU?h?AKe>%3<^G56"F`*0O7]n#M,[Zd06ZmTg0g=N1*gV/.m_X_5+"X(*b]#bUB+dFk.JN,uBf:XLTKb_KGBH@>YsX),quAVS^t0aE/>P8^"+D%KUK[k9>5s:R@Ejh`]/#aMLaoZ5>b$@2LVP;P8c:Q&DW#=0_mU8_4!'GHu"U-1!)JA8JoC1!6LI)-JgZ)'F[XKm2&LQTVr8dQ]ed#%9RFr<Q[u?kcr;8KnHfPdB9c2XFP>4-U6D2gESMMEWt;L?&6O'7PnF6E(mI]7R84P.QpR%TA9&uR7l-Qe+rDd?;<Tj]oUH(`-&IqN%EP?LQ-@ilF-;peuk^.p$Ak,do*D0H^ULmnCk>K<1]!<*hr']S\U/"c%Ylmf9<`smGEF;YAX,'m''+;PuK]nSn=gB:b'F#t3-923P%^r&tf#pt4S[,RN=#U[]omX99jL(f*50gC@@BR0Z;HP]jT`g/:!!7A`)1XIn_QqN`iSBRG@2M8APMWepc=8*hr]o/GgE!Zq)3DL;q%.NDPifntS3:q!I2]MpkpW3R-M9/%)7951Em&hMrY9_!#:EaWG&+u8>GC8t/3%((U/'%Md?)b^VHPAuk<KAY/r7)L;Vd1;[%cb,Cl%9N.YM"D91reV_JG/6P5:)eUX!1E6\7L+=lZk=^A8'1LB<fL.JhkY*Se>3LsQcnK!FIoFN/S$.^n+p[9$&?t&25/m7U(ps>UPHM1`%1G5RrI57K&e[?p4qF"7iNXZ*X7&4'A3$XD>=QCTh/(jN"+lKM<8=Uu]#-1E7#7q^Vlnq?KW!*I5(qp5<DeLn=9B,_DW4aXY!a,\I%+C.jc+qWX17>Vn&&u>T83&=i[6&ZAB)jpS8;G.nl'I6jSOYrEt\]bq*A6$VH"O)rp,D/`Q:)P`:."EjdOH7aIbe#">)WRqFZe%lR%VL9YhbQ\:[g2o^K^>r\!B[Tce'/0uq=0=`"1$;@:NC:2"&M@#\`jLgm=D+os+=dS%fP3a.jYHq9&mJ\*`?]k)<nJD7C;V?m66WA/%dCs/O)Q;.3STUfVXJ9sDh9!<Nf7?B?L/G2YkomYiVoLc!6u<bU9?9d7Z2nuW;Ss(l=!8tO(pO+2"9q?(c4!-,M\&`A9uiV(V#qWp%(dtgSM(h;]*P3!dR]LRZ*J>iPg\ZUW=O@t5.DZqs5QHgbKI@J>B#,rsaa:fDK=NO@"\@Ma'M3H>,CtZ.`[igmIS\AUnq4G0&Ai7)%&7dWM&-@_b96(CEKWu7A3_`-_;c*t;2A%>m9jVHW9Gc>cX;!?eco@SU&4I.(?=tKV1DNPqK0bJ.6SUDfB6+W2S@`0\!f\Ck%'&MJ%M:T\:)Rq%)<;)WN1NdN&RRm;clm#">PL`U/V6.$0TBK=4>me(l0L%\$AY<*-'5'_Pd;/4m^_B/10N3V$,6ThUF-DL6#7^l"TTi1V%`[l1aYk8SZa'd^g+JrQB+R*V_WKI\PbqlToUc7O#buP]M2AOWI(*QqUEsl&A2cR@(_'`b=BGtq"lC,ZD.H2Q*FqkXe9/>\e)]XiJ%E<&HJa(S^K^a)R.\tKD8"!anFjp6:P%4_@7BXs(A(!RXlSLC/lJRc'>']tH''8R$*M\-2Hfg8;OR*[FXb'\WIPZFp\(fe@GFIR<8%K=DfOeP>uYKJH_.fi2UN@KXZj,bc/$]B^]"0U&CA#ZarXVjrBY_o.9a0%cP-:>,;[r3WH/\Sb>`pPcT]MN3C.DeJXIM$&Ys-Ukrd%3%%j?q:W];7@fVd@L8nu",kgb:Qrls0V29I:NA6O#=D!>h#`=W1t-CqeI\@P)fC`<8t3BAR3BmVb@"$d;K/aMmkaQOG$n0/.jC9E%2HaU:2ES.ASJ;_E0d':%"VHBq/t:mCODof+K+Z-AJJcU^Jh%T>)"(ZY;Rn(#@:GrsM%E7D/XM?o&.%fug(=+P4V+hr?khhKfOU@g%s+ei+G'tjofd]d^MB5]]Vji=#f!4sCVPjYa23T",k#^R-@p;h&4[p1@_r<(Gl*_2U4pI_J@pIqa0i$Dh/9Z'a=Y.$rZ?sQfgY6p@%+uCV:ZD"Pr+Alp]=&mLC@j6j^M<r&mbYD#X8d?2fe;6dU1+=Br1q)'G.TR`?4LA-C$o`jMiA_\+!:!r:r]HV"YNfqrSpL?+RhRbu%d5=I^V9&SQmP*=^fWfKs6fUh51=0<oTGEgW$+i5t%u/.="UGOG0\?r>FW?A15bhAM9,u&QjC0H:X_KuAd7S"T^8tOTiFAEKhc"ZW%c;S9!6\lnljVD_<P,:c*m7e0UiKR#mHD#7D`Q48IKt<q5"mpo_)B2m=%-C6N+DLFH_:k2?K*M]Z9KL-cZ>>^r)^A00$6c.BkaY*+%FJ!&eim+3j)gj*fRNlWBZ8IZPqJ_.,Xjee"kc\J#$_uL3E:)[nN!g8&hqF$PEKA2c9qXc#7?6J?a_UI\iZ39P(!*F>&e[J&[3RJ@%+>CY<\nQk@8[Jt5f-s2*+PZ^f?Gg+I9-Pg]0INiSD@djs2qe:pZ,33NQ(F`@Q/PWeZppj*m@u,!6@4fVD&IOmiuA^D[A2hf@\m&h%?KEkl^6@2rR\EqPKIeVZ<OdI3&<1QJfp$Oh]6PBTn\E.TZO&R0fO2%RWRAitNoc/Y?XqpOm6'5.Zm+%FHbb2$[43A0$+)1`ZFi?Y%^nP!I&[;bN.WE^hmdS<IB`BD5Q1"/r(dc<`$K3J7)haTa8k56u'$lbpS(j[Wq54cJ$$;jni2W@RaG+EBAV"q<Zm(8pV852tAY=!B%SL>\;,RhaZD=!@$:#A_+S4OcIA4e%Q8cX_!<?@?S]CW>?5$Z1O/ukR'9M+1lk9+s>3#L\,NQGdr>p%*\Rjsoh2W\2Q\3&"p.r_+W%1?cLiA0(D)>VO[V9`cM6#O5<TBa]$keg(h0#U/5aVukb,UpR+a_%[?i>pZe-.Q_NK6EJIuRagdUOkjG?ilV6A]#K=oLkc*pg'Uq9%FA]E@8en<4'eouP8;tZf"@\t],r=jed\s>Uh_LU3+CR,5&a0qEr3-ge2IoHtU/`Y)RUkg_O<P$SBg>tfO%+r(lFI)&qT=[PUSVqS%Xsacp_J2MI48';lDoq]*gQ#>hedWeHi^KW[%<4dnLQS]JJk9N8.4",8<2YT&L4dIQ@Yq=$3Bf:lgEGO1`9m>?,3>2.AE2KbQ'*h'%Kan=)<%(.7"m5\Z8CSWr%-mY#)tmZV_&0C[K8rP/J1bEaFZ)o;E_>glCj#e%P6jWS<''mgF\ccdXQU&.)ZE!cbh4HaL7r9#KQ9M*%7Cs-$<]+[e6__IbVB/cbpO`rlk,1#gCBAX7=bb;=-tJOh@%ahVpc7V-'G4!r6o5HYrQW6S:.,]!"B2!R[LJ-1PqX1b<4QtS"!2'p%']ZeV;Tb"KG/79S0mT,>Lj&\MN"SB#.KM6+?JSJ%K.oAZQ"u-q<'8ekFDemI//]R,-<p)'+n\Q;A5kV-bQ*W:)@AFI%.o-cU2-,6%Oqj?p%5UAW2UC#0EraK>F't<kf0NsCL7RTL&$eQej_&`B[mlJ.4D12K3#H2_YDiPbL1G7j!$W8CX#f'e?=XX`PUM&qZ>=K53tS<8%%ZKqn6"I7BY0Gq%6^#E.LMXS(]R=Fr*1SD#[\1;`-isW@N+CPY(1`)s-EC-Sl:f7N2M#_N#V(65k"k9s&Tr3(3"W7K2@Lh+"cAjZ%!j/Ta`e784oA.jh(fa8+Eg0eO!iLIliW3GuWgJ/_kY6oIa"ZJJ_A7W%I0PO/j+oI0WPO2A.,bYhP?Jo;0u6=in]@cTiMJu+`H-fP%X'Z'WO(iC8Y?+>PLf_Np%@m]XIfiB=JVQ.b#r(.#7?<')'+KZK:]LM:UC`5)U//SOki2=GhG\-U!l>Y10ecR=d)$TdI8h6h1+X)K%bQS[$4tT'RNAY\J$W\.E:;@b&+C!8bO+K,r@)s`#+X5/jPRo&!MMc0eK+rS@0\Cpe<t<kr^aH"8$3o3O%'FLi`ch7j#S2%d)7O%=%LPg\Yf7G.K$lY<dMX5Cm.jWSYVPG*2AK"`R#h(L.d86bq+a51E)ob6]*ni<5Ct3NME/]]!?^jN;7c+gu9c=;$DBq6R=dutQ0hB]I%1C"smKCPr$+r2Y.2<#>2@*!\Ko%manT`Hh\QgRQLUDnbTN'p&:[%jQT$,D6U6>2$45SR4p&o"QeF2X,BAg2=P%Ho[r#+#W]PL,`;%!;I<8\]g>cBIl1'^j-"_cmC4E)N.lI+tlk3$!d^bXGF5.7?$cs!K*k7ln'/g8jmDOg_?["X_8mZkU6]B+i+hV5QT+klsp3N7Yp9f%:+aV>M8:MC-5Xc6TZApT_%,6S6PF%NC^*7N"_k1A'-8$/\?.D_mZTM]6"5'a`bU:p(8D/0Bn[,F@iBp^\4)!kdSMV*65u[3<t/M/%O]72E6r,!<8Q7_*N!ZkJ!0]jo4$uEb&ZHtZe(@T^80OpoM?scg;3SF[@"s7s3bPZ>LCH9Q5clH!"@JsQ0qTT*<"/LJ0O:NOFHJk"%FPp&Jius@]3dS3(;SZ_YTS#p;M97]DFb@8(UX;p=K7QZ5MGXl=R'O?H47\9;2D[$TS9D:k(aLL>qa2ViJ\_W\d7E4!:rd)Z.Ztto%,aJEcGnY^73_4AJh#p;-6oIYR#`3,hnnu?9,Vm2(L(]FX&iTsoO^OJhC^7)%A2rPpdOCA[i^lW?P#'_J3ks@h-^c5T).:$h;B8)'%!0L`I5bN.M7]p5ka:&7\6s>HW#MbN^*#O.O^ad4n%PGW?"!<Q8i[lJAQpbu](dlY0#-LQ-oO_K2kV<]?dmOsI9S0`I$3:XbJ1sY?%P6ct\f8)9G%*&R@ni56o-X.fX@h9&s_?an88%2k24A;Q&E'Vdfj=NHt-@s9jb`rj@.tuD(:dS0M@3U])KT`$d0Tom58=)1@+__Dl%0iZkH^g'2R)U:Cmm$Kq$ku8pjg)hS^NRCC=/R1!!V&8Nr)(Zbk=C\LS/>C/UY.KT_BUD&"VB^bi!IXJma0%*NGX_0.@5a]Fq.P=Y%Wf79LAD3C8"qud!9$>!e-^r(D9qYDOTTRSZPD,F"c6P3VM%Zf1%Kp,p=L]M]8sWJWOYqh`MLk::<66O*(5))?.,>T(,a.$8XXQOZ%c3"kJKo(\/S.4M'T[SAZLN1PIht;Vq"(%mFZp:'/;](Gk1f/.)=&S.5NRSDkl$"%u%kuOAo73VJJMkgM/2OCZ;pGaZ&HP_JX.ni2%6[%W(299qRAHDE=je(XL!>t&oRrD,3OJB;n1a#jg,&J/d,Z=#>R++Ra^hhT;4:A8&o`,h@_dV,q$`'f4"!M(?K1LtuP!":,7:g$u%RWaQBeJ)Sl4=-2U1'@eIK1?PnT>OKA!5=.J<,n6*'8E3s\/9l9VT^@eQ%iNM/5q/E''M_P#Y>Uo.j)I4p2@6H$_25[>k;rlU6u$9%gYd0[o`^a#-eb@aaYFm_,a4%GY-Ol(/6aMj;cVO6AqCX:OF9L>"@\,7U&g[5M6&O6PrCu8^Ie&@=%:[W8]3ST.54b&6pj2q)j(OA%m;(J%0):Ve>W3-`'U:HcFg@a];6T:bc:m"6k-P9u^6>O0gTbsk.PX"V@)?fU_4irU&d\l.f_?]OJ4=+=3c>aqE%dBlk*1ISLJH4I%hu\^NB`J86*&Ol,/1-Vl/jZAn=.7E6T7l>1#I+LM#BMpI,>(PeW\;RsgDl1:D%b;hD*$2$VT-L)9Vt?p]JkZfUmd>/D%cM2f(Cq^%0j7=P'OG^A^dQp$[X(9H1a/l9dPX)O5I=YY>9pACl55Y,(T9@9f%M_Ve(Pe#)\<43kjX9dHuWO0?N<F$Jo.q%W/TCLA?c;GP&/8N%>6#eeRS3:g`7*O9!E2uQ,^1-R0NF\p\4C#o[Fp/T"B":6U9RNJRk5VqAr@,Y=Fds:K)C,ip?ju1j@kfj'D+AF.60VUpS;*1)QRn3%Ks:.&&YNk>1A(RgF%uiUXSSrperZu$3h;Z\)'jiSO)M8<G1O:/Y]Z@RBZpY>AHlK\-;[An\JQ655s'5>Usqg?.0a'J(<Eg/n]3kL%!Z8e:,Mgh-:I0n[Q%k(g\h0Eg,FIT$pN5X_I%V4VZ@]YnAc'VHBT2e;Sg+5X^pj`*_*>ka2big[%$j=EZ`@dI#q#fra1N(+B3]E6%]H;emjai85Z%9u2Ss@VJ`M^L5OsnD!<$9Lnnrq2)&;amYpQ6g7C"e\&g::##9+U)l?.7XdXGH\*0-PmuN,AM3Y0)+F-uDX\M4\53%FtN(&XfGr1?pA-hnf)8+Eo0fbi+>dlMdf/BY]Q:9q/="XBJI`o?a#U,_1ir3n+#48R-fq.(#+[X.q;STm%4rdD?`L?%\OCY@i`Xc%IJ1?hU269A6&8A`f[AO\EJnT1)KR.3h1fp0p!f7IjMRX#0&ul?U@K.0:huM8huQt"B44C>$6L`Q[Y19ZSYT]JTNoXn"#k'V9Q01>%Rg/2P7AfaO7Ek7BMr\YMCKZ&?T@[sbVK6pa,H_Uq_Z(J8-I/)JR>@ok.V?[M4NJqrg;1'KP\EEll[%Y-(edbeXSmN$eW&LpgXXaA%<,"@H&)A"f:Ngo<M[]F'32XMOo7::&]1=7PO'uHl5.e9?1Of(sL[6`/0_XI5r])^eGi&8>c])!ap*#CZ"gCojKB2f<V(G<@f.9V$%G%hmo*RQJ@A6d58![H5ClsbAfU32SM00IdP9FdjR@0OBCA@C8d5m*LfMca@2!9d@SaTn5S5bsL;+YI7)N;])pY1Ga<koe#ZX2=\)%+2<O7?'#/%)l-9AYSltbC#lic."LXORt$;`>k@p<YTQ:1R'o,YR+FGL"D::`qbl$5b14F!d&n9!=SLuqY:Y\g/jG"p(bVB\;)d?+%fSe4]08TE@1GaYg;ru:H[Jpoi=\SOO_+&h;U"XTo):pDfX#L,bc<'JCLio#rO$hQs%3`dZT<Fa;K*QFZCXSagIg"l%pNar$Igf&^%UGN%6hG*h(rr10og@4-^g)<6#'&JkC$&"^S$dj<E!Nr=U0%.DP"J?4a$"Xms)Ym0P[ik&L5ebLsHK/Iq5XC)!gTQ,ZMoVUm4WC'N%hdBYZh!_to[c!NMHGcl('HAiV2hjnS_A&mk/jOt!Q^c4/fSDdrRfnldBl#8jb>25u<6+g!Xj6M]'I)TF-<'GjkWOYf'8($4(*3aO%g3\$c`5$PZnC*Dk;"1b]h>JF-nVs0[If/OOru-B-`33RBIQi@UIH0'UFg1/^'QT>P!1r`@"Q*5]J_9k>*gV=iEb;-q3cQo"D.lfW%(nMtI[!,@T&(lkP8(=0CjB["a`S\Y+<\EA^XN=W9*p6taa,@K2lj:?CgjtEYSk=b7F(1@GLeNOr9ni9C\N=j9*Yi;0PE[4#k=c;5%X3@eorS;CZ"uDbuFTZsSDKh'N2)AJ4B::;\*Bs]b[,,df9i:jtciN+To\RFhgec%X-90lY4g&d%hS5*X)"$6sgd$+6qrANcacQYF%6_mTSOAYTD\Nk'P<*0eQpudq6Qqr0N0VIT`jZ2(a[P82[qOfB)TR25'/431B[9PZ'W>^QqaA(ja.2$5-3KU,JJdALK?c+<Y58"1I%rJ3^DZ$A:'`A>[iH8U%f_CZeM9Ya[6eroM6A6E,(q[h18SdY8e\ZQ4p0IXF[ceT-DT3Zu+"HXD%:YTm?4ATEEF$X`-_nhd6=I$,B%\TG8mGltn\%RV\,>Nt,9bJTI$RA^>.,JOZP'.dZcBCCI-"QBFrh[&-#bQkq2CqWe!(64QC.W\@]mc9LQ*\EfoIY$MA_^<f6dfD_V%(3Q'CJnuHU"16d'NYEQbAqF9[YlOga\$AN2Xq=fQD&Dq4_UJX!o?W:\g(Zk:_to4K"X<Mr`.g=pA;[c;T2485('floa9i=jb#YHO%@3ieTHMoU,VuY:CiAchW&T$hqKCskQ_XrQc_ZO&j?<DtU<^a>KF]<E$nb5)7]@0hOK7ZWmFV\iP0I'pf/?/`jcgRIc6g[+P3;/nT%;;-GPlX9`@^TPa\"%;Y_He8]4P7*b?@!uaOWEF12,UUArEsWPak!.OWnnI2Pr^a!+bR2OAM`V=BZ,lRhDu?ZW'](`fkJnhBff/m[%1A-Z?i?p2474&`.>1e2;E`NmGM+?LL3@WB%65fGJ[]oF0LqpS.>7chQ'mtjl?d20]"^baA@3<_t-I'E3Nu'T6"=B$V#)Vbk,s0K_%"BlX\Uft-ioLY1O,6Ou5%I@q'1"R8\==0HW]GlunOGJG&<T7pW;RLf%G9@OP`F?TJPSml<,fc.UeW4"rL+8uNYIWn9S`Y$\[%A`P%Q&D9=@#j9&+DX*N8/MiDaZSUF"(K__aI;u%c6CU2[6R,!d\aC4H*>6N22e2,6F\8++81IS&ULs6)Q[nFc)1r.epNJn&V&R\j"_L_%<WV>%c]$hnM5eL)[^&h"HBUV8fU%;Jl;U<8VjL&k!O0F;VFsZ']\.^jnE$_p0\o!gK5hTPWTS$NdeQ##+iK.*Y1gN76,Wg@5`VXX%o;`O5Js$<ue'PQrkG:hDTU(2DE"]nA@jA]of8*3G-dtQ#YERhOJn$2uN$>*Yb&o(;qEm>1CM\L'mBlk1m5?E$(@dnTL42%iXK=X`%bF_h;5"dW^/SGAs0Jk@&&gDM+S1E8k<g3t_X*'lXp09uGK2Yc9+^?0<LF8q\A0T\Q"u$XbEZi]NcR#Dn7XIU]A[>HHmJC`:kU9_-%^/Q'j.uS3fCj4TYGjh?%16@CO#&_N8"(I]>Pa;8E;$73YAhl6@O/1n@X^8`k&#o2-l_Xk#`#nT`-.b3;$++Jk?]PpQUQ9@W3qDkm%p2Aj`pFCF%mFUAo8+<j'r9]B4\Gth?l2D4^YgR=&h?-e*@O/P@CQQ;<62ma!3n>2Q`\YEB%oGGSBSaMW9]lQ`S65Lld%dj\%WkhR%U!4M^@gd!?#4&=U9CeSHFG>8a(eu+P$@i,t9mN!O*3P0tF4F%3Q_`-r.H$$ud:[8\k28.(85\Ib]sf[r5N\;/I2`G4#!a5$?H?t@%rckp-K]^'cS/fRT<M5'LJ9,cT,"b-]UZ3f!Y>uC!BI*"6_BM4(<V\5W#D'-"!=Jb@i/H)5!#S&DKkpB#X%0i$$<U:jJ6!>p-QklD%l.`ZgC)>M87R3,%\4s])cRi4SFl)A&-AlBPI'8bm@V!VE4LD(lSL5Os%a:b)#Z`K)aW!Magsim:I'Qe,=(sp%c:dUD[amR_#6n_C%HnZ,]@fX@a8G7B9_rDf%D'6)E"op]F0hc,'@.-9<POH'Fh@\q\Fh(cboE*I')9_CUI0N5nWZYdAQE!MVVZ8Oj:jAS79C$pEC@gUe%]*^CpA#?LPf)_4%EY#[ua`OLPQd]iGKHMnnW[tq,olS8;d#&j;<Y)tT+jJ$OE8U/E95a7g9/^bfP/^Ft"kp+6(J"^$p6m!#f!R1E%DPm@@FR2'KGI!_ia00'>#n:B2SU,122=?0/Hc?#lM6ChKg8nWg'_Lp33r><=>+Fmn21F^';a#FTnW^C8?C'X\867K,LP.@i1T50o%A8!YN`h[WWM2+9q*-4Mqh"h[m`E2j_I,o=iAGm4PDf[_,`e0Z%Amu:+>YrT1RW05@[n3QBl`<Tgi]Ph*Rd;KDD`&g_LClBMOC?WH%EQuK&oQdX$/D@1t$5?_I>'.2-n!,k6l_Td%blY8K#=j4qJc+mSs"8lh[p==Tkm2b3NUJ0T.<g2?-2Q@aOG9e"$[Y+CP4NP]#,Ck+%_t^C;/]PBPSlNp(pZ/Yc5aW>).u>j[*b8"PZZM(cc?WBDb2Z*g&DW3!OlXp:f7;Xi;BXiA1./H6P&@]9J9=D5nE0dJk39B8N@.ur%0*A<!3/Kmn#d_4UU:CibEP7RL[kN!EdcCP5g#7o-[p>Or80?*+YI#kIL??A;?)&%##ZCg3#/ms(Lb.!Mi_u$:nKf$_\?)[n]fS%J%'1BTj*ZDHNU66:L5p9ZjX&n[G7fH$l0rul9;_-QX/.EU@V^0B>/pJL:jV\DVHhfs0o>!aB=I+g"\C(%]qSTJ*9c83c$SbOV*El6U%&pNI-o%$<9"36g'rCY(25__a4AYLr^PtB$R=''S-K%?YD&VD$T3[8E/BW!QS_1%9qB!7Nr$,Hb\Im>'S<r7KBYM?52jYHEq[LK]f%Z&&p,EGcX#dGXg[cISeGZ5H_+.s-IXgpA<F5_H71Rl;270jFnP^dEFc*>/n\_U(!_*1*bY+QC5,&L#mKp*RZ?\B)5Wf;(UC`58]E%:?hRYbh5[["gO+)1HSe<<G$\Ka7VcJcK,$!NIPU3qe]um597Sd^@>8OO3iuGLo8'_*'0E>^2M[$M5@a&c3=$(hdLoa=TXW\blYX,%#K%#RUnYs;`Z`T^8X*,mOu:Y&4A*>0!k=2Jg8G(?;-4]h17TR[m(U0"'<R.r]HJ9SEj6]6!jNQZ2*[m<!&9rPg+luuaN/PD/EFN`%<u)2`l?gEElUsSWA#@0OTpB4*&_p0IfoBXtgb(a4UXft=:NkcSWSb\O>>NYJatLS<-Jc!e,-6hY%aY!a`/sUAU\iQ^fe8%p2sia4%\JgABG,nu-XX?a7!)#K.H6W.o8?Tt4'4l#+n6M4U1"$3-!t<`P_JF,_r8=(Q>jICeMshrU[:t"m68r"/r)ss7UT$61A`c''K.q<9%mnnhANAGu+I4KgKZ^"$%?FJ[PL,"/PS@F2DF#K*P"sgk_Q1&VFLo<&P;.`2.4W$1D^YMjb>WO>6Aip_#b+43ijdL17C@9;L:HCd(%!L8N?BYa3#Ccdu]dW1k&n51UDn\b[V:H.+.\UBD3M5SBYh;Q:>o71n(T6Q_8Bn$I;5!oNI.A$;a>@BM^eS`3JjK!<8_ND;oL>g34%L#Bp+hp`l"*;W,J0Wb0Verb/iSTpCi0/K3pVX!'ZM5PM:%t$7VEuegcs!iR'R/%JjPi8U9q#5^")%JFAET!Pg+XD1PG[,i0_g^OK%FOf7>"2D*hi;)N6iP=L>G9>eZ@gmH4KEKQiQ<_:Xhm6HU\LP2c3:Kr)qXDuYnN-/6TcD+(8"+Y4j+0_Y?M1/RJR:r-n,Zb:53\0_%#JR0P<'9X]TP"T:*gu[WSp/?"kAa#9;4d<fUO[%#n\A5T^uL!LN8!%LS[Ni+;*+/Q:A.m#nN4=q;F1]GFFP_#r:M$/@jS!#U&9-<%5PrIXU`>9F/4ES#Y9jLHD.E#^G4f;G%F$B[5^_&IY<t_pk;@CqU=\.p=ZeHhd9W(druS#I_=6DoWns,?)&g$tJQ-oF:^OiKk\8_g%97K\b0HMkS(hbJLORb8lKFi;g"i@&VZ\dR<Qtm37=\o+J:*q1&,G#Z/<O#TEp#dk`-9(3IB"J,KmWB)b^mb<]2SJ^<I3?t31&nW\%2@0C-dDn&hG77o"K4MmXQb,7(D?\%"!-aX<qHR?\aE(QV%:r9W7ua0F8N.$P:Xi&N85sNk?;YsRU2ijLOHKo!(L!=@J`BBjc[?GK%Gt?'->aUK&b]A<U^4dDp^o@$+Mn7.-bYi-=h8Uj]1H%V/5^=GL@9uiPWCq#,9\M5^QDqZ1,0+NEPA1F++\sJKZ>H26\`Wd&p"C;M%;Bq%!BcE)siirO-$O?h?5<dSC7+3+/i`V6,ns]4l7TePi&+'V,hNE_QQ^oM4>5`K=`U2B/]MAp9-2l5>m:/sA'Y;;&NM1p<.Qm/4%4"DPf_j$0"*m]/EjnpSJ`/Sfp#L]V(9u,BmKbq^A`bO4=[o_PYBG)160'VNe2/Ci7Vg?AVXJkrggQDp46L:!iSBZB&6Hb50,$T&T%8[\>\$`Wln9Sp#o-Y0cd2uoO-=No`s!g9[K7)\LT8\`R!e:=fnZ_H\T"PehL^JRhfPt7JfpHc=t(e&=2UD8c>P*;VP><m9J11fNk%MUd^;f=;R5'UsE.R(udm83FKfMpd*TI5T0(X<e;mgM&'<djsksMmp3r+ftNLJrI0P0K3OmJ@Y>*M^\X;([rcW$kgC\pP=C@k@/$9%Q=a=Q#I1.iA!ffN#d=F<`J]lO8D[2P$&K>.*%haH'!:U%a9rc6kMEaFJm*>],6!>L1R!D9S2X^rb9Vh>6![9k"#krDkO7R2M_=mQ%?pM_jcToikL.E(5l>]B@/MWKlNHJ`5'P+enp1`NOeD#)i:crej\G8R4GF+!Q,5^`^nu*7e<@?5>>Jpq#,'0n3HJ+jP9=8&r;e5cj%@5#[W:gp/5nY%<*S)5i(Jh\cZnSX`'Y9if%8-9C?S:3D]@\IA^mfCS"`pasX70:H1N"JI4VJ98h3bb`6ATSRFNlrK91eiq&Nq\5Z%P?26JPu[^YU>#T_XJ.HQI,",.-?[@q(g:?j"Z[^b#Zei]Y]?`)@!q])[`7n.@XKmG&1q^;p*popA.!KHb8OJ=!8V&@.;:G7>]!;8%J<XK`ZKWVgi^V..1T6"qKp5p3'6s^BJ'Y?r$D$-K9bf;UHaK?*K?LlW;;mH6;lq8Q]J.<uW^0RN?Bl,fmDY;Qk;'<A'nbb+\odlo%7`N3IpP=AT-:M/p#cQK2d00ZF:(sAan&X0&>X_<Brlt1Nb2lm]lonPq/^e-J?46!)AGQ2i^a`R`-+5TXUAnWj7+"Ta.a;iq7i)Jb%JMd$8>OqkEF<DiEQjAA]Mf8MN[R"$J#;LsnLGu9V"GO$\a\*ViD>#d*<X>J=6NiPfpBg0N7E!*L2qH3sJJ#]Y_ArXPB+kFP1ons4%G?_/#HoN_n,SVB.mU8BrVWioF(TTEJVk@),rd$0F<)WI-+FQe-B3c#bBJ?AQcekQO+'de+:[^ca@Z9s9_HKI*,s'[U29)m?fa^t&%3h"`r$MVquDFnmp6B]gSZ![758#R_gIJd$kO:!u]3rEeZ<nXtipFM2gi&B?GNM]mX;V2C,b;Z<G1H#@Q96fn#,ihma39u6h/7S/^%USI;Rc@E/^0gAKQc,L#Olu*82Jf+M1eVmt9hi\k.qQ(++Mm@UH"2bRn$V]'TaB5]A:ruSTS+ZIjp;(+3@(%bp+"2(rB[UBZRV[&U%n$8?*+VnG>j=Q7<$:pIuoCoEjCY`*s_Jh:L!9uFEhG[b+5a$]'n'Bj%`B*omdK6a&+QeuP9XKn6/r%'3(n8&UF><-TMd_/haY*<^%Q\8>>ER;[>l\?orXtp=D3Gme%b[obS:7,h>8%f3r<Ej\E+q3NVqUqDn(K8q$+H.P-0TI/40q*]N<gPR$?:*VqUoS9>++0)M!s^`,%k*\u[d19QOM[L['Eql?%q%6RC#E*",b&d\aXH0[lU0i)tFD@"^nAX'mn0CJ=l:/A/JHaIG2GAK/:4"n^[#=n@,T[S1f4lh%gq[lN%?)uQo+[hk_.::cf_sLujh]de;:VZOE%L08@3KhrE5'PYq=GSI])aaX->CV'6.H]s:3bh2FCUG=.A_i,M_].CtlHnT#d?VW=]_t[3%nCIO]"q&rQkH#"l(mK_[L2ejlbV!9mKCpN<e,$U?au-+dE$+gXPKtbgZ489Q['o.R2/SN4(\Sn)Wjq^]*&"SdXqe]XQlVQfFea52%*uGW2k&=]n`f]S4@_0Q"%YJnm5EL1sT<9P#;Qf>VGne^<K7_UBL&&]YHY8NV(f^kY,77NoUa;`M;5!*$.]f+fM!5`Sr&I;WGE$*Q%=_WpY+DZ-$1E'41C]g6.3FF$gX/];*RTHkkX`7W1Die8fj]"?MLhWkSmYV5le0`k+8%+^'>OarZ#-3Hie-2Z?gig9*;BSm>qTset%-Zi<MBS?k0#:u.h^*D<gT%_A+FK$;)ft'dP4((=V[03l>8F#S=4++nPeILa*oQ7#PN^^>XVFFO@MJ<B+BZ_@F%Rt!R'%@E:@^oAg%[0--KFJg6C_er*,:dddf::11gKeg3h%d$jc'%@C:_Aueb1YsNB\^gdk*M#qul[WgR`S.*<iE4Sjp7&4-m'"%PJH;\g_U^cRH8P$6%O.#W<:LrO0.NO=f\n2CD#>DqD[n*F?HhM9X_lFMhX[E)NW-('4[>t48i[%O&^0Bo2piaf8f"kWPH=1Af@>1`bUaOW3(A;Q?7]nE<%M)315ZqK_8.B*`B_!PZ?C!s]&%c=Kt[rp%Y1;)DQ.l?hC('cW4MV[TtE'E)F.NX6qoZTWH0%\Lh>a[!h4)H+.+IadK>d9C6b.;Mm%M5fks2&0mMfoa2ZKU-ot,DSF)C%#ImM"3;QP+)/4U'U#9qh_GT*.Ip9K<9>@7)FH>=;2rj].Mu>A.ka)<EdqMqLJ*6";P[2QQk8(%-#.FqE&oX@@#_40Bre>C3K^c28@E-n.\d%bOd8UEG>o&dF`3;LYP[G;A4qaF9QD_`A>8Er-`oZ>[F#!,b\9L[e-cq"d1qrZM.DsA%Y.6[N)<R8oT(2r?6g2\:[u*i_SoItb@mh.6E,_+OeV`lCL*(!6jQSF=YTbc_4Ia+[#\eV-P&qaWH4?DHemP:e#=WMR^I^#gFMh%U%$cE,S6^[7Kg?F,Mr&3;VN'K\4A18d,Sd\:>.3BfXeD56&)&C;b/4M%N4Xg\`@6AgoK#'d\>:LqOlF@JO?k\/-\.ZsA>.==0Y_rU_%k%0Deqje@fr&>%C)PU"<7;)W1U1bU>@0E"7QGugf(cYO'=@L5R2Mc9m@ir^jP;)]"_:bphnN1=6bCnYT$Y()'ae$]dA*<>>+%8S$%WT-+CT[_=+lR3BAP+s9P3CpWM5"8j:QDVQB_1/gnb0JS)o=+9\Yd#%$P&D(4q/^#1;'gSddD_lOe`YFgF&b/'rpcj[&b"g1\Ku.S%=mH-2qmLU=c]%1q>tgjjX!Mrd/W3S_i.AHF@#p7p#B^DBQ\$9?HDPa0*FlE_'<dAYn7,&(8_V^r]<0t#rhO_K4`ub3j(ZT9F1m+5%8BPnY5*J)e(q?X]67qCE+F!Cf>TAY<:4]&1Sp"]Z_n05aiSC5[]*jgAg+KIcA"-I!0sPZ4KEr^t,,d\*a_o9PC?c4\(#9@QSWDWV%"Y:((>mIPeHhZR=f\p;?<$a!QPkP9t73?&B-K%eA$49QJ0:(Bp&5mG@XqA[8[n&d%hG<KiUj=T5CWt\l$iC?9MtC@u$\6'[.U1c7%'+B4PYq]P]5i/jm>2G2jA.EUm_(#F=CQcl1;<X^pF(R6r$SOcE-IY)%UQoH1BHkkVat[AS.4Zo=Z')k+dj\sHA:1K"^]KJg5d!Ym%oc?1i?uA>'J;1^*&f>eRjgcI[++$66Dm8_K;-TTFC#:XX$^g]g<M;KLJ/N&ojM3#mMIhVa"^T,hO=uJMcABV`##C'XM]o-APp"']%bdS-!"9cTJqqIqn/\M=='tJ,3QMIhiGSdmJ<\M#DJtQIF6J[5WEp8I<iY(mGDd)UT#l=5bKB=@?o(%MQj;1_F[Cr6VmV%WZ9V(,o%js+`LNHC!P9("5Co:J6\,]Fo6In()XaMD>'"[O/5k7tG^FR`[.'^d[me)DY-A&KUW+PUC,G:JAaO4;1;U59_Do'Q@EJjkn=WX0eP%Nq^LPOPq/,-$s%$>dl!U^!JCbqegZU\j>1KX0M";eV^%'!th27IUO+MOSq/_r%A.L/^*>AG+EBWc^"WJZ'n;tn]FNEbAqWV0;0hI%abnN!.i^?\f?$@4_?&,=79PG.T?Z#c4hIMa*cE]Dr7+,e-K1pD"sS\oI0e`S->^8A#["].YRb/aUQ<2J0aI@]hY&,:['gmS*6:M8%,C3RpeWu'c+a'cf_*5eH!+c<1:pkc[(*]R-Vc8;&#l2Zo]\0S%+^`nJ+ZBrM'^\9b4gtshDnCFRob#>%o[#dT@?q\R6.K_#*(XuC%[%Xe\6Qa-0K^AV;U*6YU>Lo@E8l2J+J[U-.-5BkC"sQR3JS7:0"sSLFpL#,\n"Ig;1_=(pf:hP4CK_>^1IN<9_8sCENN,ALqbZCu%h(iL'U>iScm6e<h^[,[D%Ntr_=8p*'<>/$a1qb]1+)Ffu,i*e/WnUSbjAq66n%`4*&B*R#7OIH4Q(pqdL.*faQ*^m$i%?6<<+OGf%+"ER-&q:?^+0<np``0'Fc5JS"n)1nOWF6/>N*U#%L[R+GgU%HVa8kc:GrZ/U&&JC=g/GYVJR,V(o?Z2!,0=9pI)Z<5buO6-%,C/R%d.Ns;HbusLpW/V?(__=`rO-^``"3aV13:a-"b(s_.r6W>;&,-ke@B'tgND&0bNnREBm(Dh5HUb&BHfmI+b=Z'Ip,3$UiuU`R[q4_%V9CF_iTJ?A.]u&PeaNhH7ut8/pUa/G&8aE&'_bPoGMHQr1EM%l>aT;#mc<0@%`k*o_A3IU4,Z_s`r[jEO;>geYh,n&?G#SVFRt>b%nW.Mh,9a>d':WZm*egS30Rn:,S/dGF]iK6MDOV[QR9\49JDHRnG0&8GeD9=A0&Nu2:`[V7;`X8tB(79RNGPu!Qnh="Yp$8]/8'O2%]daf.-a4aAU-r(a,BalR;sf@kb,l2BF#*``TB/3_kOEoS$OO-IR*i^'bY9J")Zha"?JQ;S+7<I"ceIJA?XXn2bn$NkTQ0`6g[J0/%(Bkc;j$3>H)a]r'?XZ;Ggu0c"?2="f(4<>%"Ms7s-9gc(YOran,!iH,>e[a%,mZCg*Y)6pOS[(!kk"a&#e!rK!hpt(=;1pC;Zl22%$3G"_`?Yf!VSWmK']^gb)55\b(d:!n5`B]m$6(0Wk>KrdNW3NF\OdD:mJGikCdT"EO9?M+<ZJijG5k'U>o*V_ZEuj,$6>&!i-Ncs%_>S5;">PGsa]""(QKTd9%[i*M&CYL^elZ$'LSk^,hg1N\)[]u%ne="76Oln#X!(SqJtO>c&DU'`e))]EIL1W$4h#sFj58X!YmtrD%H2U"rqT2[gL24coYTneLZtW*`m8c75-jap*U8QB4ldoD_c@7S]*E=1`RSdB4/*gU\Uo6\63QeHpphDS-"3KuDDI.T4=l.((:[(IE%dst[RYqfc(U"j=S#1,!j#_\T*W-@lX["F!3kB`&P4oRY5cJ%1jAopJJ.P5KeVG\&#P"Qhm+I;HlktU;fiTlPfR3c,omC&c\h=MR$%Q28"l2_,FDF7m_[qgdJ@1=6kLal!$0c5JB.7Quj=))Bo,3tcg)@1-@QATo]Cj[Xjp$j1%NAaqR35(^$MhiYQU<EY*lVYU9`\P9)Y%dB'V[NZ>+;Tk]=&oA(,4PH$GDjALWfhnKY[]/9j$F%:/L>%jDZpZ?/QQS90YTZhTfa@#NA]ua+TfZ@\rOnDCGR!\T8Y+&S>hnm4S%a,'XamSO4"c#$mI!e,'+.eur%[.K9';qs"n]dS>LLW+A)Q9jse`8g^ni`Nr#kE-$^+0].hR_p1e:XhSK:jn7]oj0pd#r2eL1lp!K%el8%d,*u3OU4eI=dY:E9a`b]u.K80M$CKLCUUiSWgW&'H,uVe.5fET+BGV\\.TR:'J&i)bn`Pd052Lp4&',f:5h>QC[YV0%Zj='g%09C77C(]8l^=MDpd`#*pY)K-IdP[aJ(km)p:0=CO#@XU+D$i`UW3KelAI<#uW#Q8]5d"']A6_3ng9FPfmp6b+Yp`d7#,<m#?!YX:%0c6aLDG!,CJ^gP=Djl;!M$@D/U;kVYU/-cLpUPO&Km2?$lrZ(PpSpE\iODqE<oHk6V0PMA0W:*$K8DGXf/O>=!$"Z87038`caErQ%g'"4pknu(j^i!3lBGo[mmZq;9)fK),b=fHd\%7ei)$"d?W!r<tB^i,4F9HZLdkKRT\pA9L^EXITImVe50e*9rok:*ad"hI$CpBn5%*EYH\QMOF;W3$SP"F/^Gcj,(DQhTmdPeZJcj&3TYe-?tOq>e65kG]!]QUVB(`:tqm-Bp]E=]eGsdK_JXO^lBDkV6j5&LL"9IA!?H%BTAd=T`;[!6I9@%7B<F-*1D(N#TdOKBGp5:Cb@1?N^\Y0^$#g>rjF<[(k@AF\3b^Sp)Lb]QqA:i7+d8GC'5'@<eR/'!YC`a@lI6h%9,gBTi7\%GK>jYuTK!oqX=o:COf/iXVd(C\QeIB)9785U4XpRO<(Tq1^^AD.+D;*D5-]cfb9P#Gk.W4>&G2qAn>Hn+AaWm56JrgV%laHf<+>A[^I0'oZFBR7jGeejaB=>SX7T!<Ba9)WUVX>?tr$W2r"-U=uk^h93a7/&M/^]$lF?j6FgVEt]EgNiuJAL5U/b":Q<!`-`%`KXa!J?&,!K*N5/GlYS4XEq>H!+:!\/-*T"+pYn'C:audJ=-n.PMnD(2<J<l(l0-8\M"B5:Zcs9#6=Fp.JMg%USq^$huK-jbp@=Z%;>od'(,2albXE<*=C_I0:$2QSlcoSdKWDP6#@O4<`t3SkL,n95aiYE[4CD]Fp,<K^L$q&HWKMJ&hFq<"j2i''9].oEpPdrP"!S+T%cSu0FB7)4n!B^>a>pBHeLe>:sEQ8.,nHlI,W<"O#6u"FV:i<iJ,231F\Kj-r(9CcQO+6!EoB2-?Oi*c93/5pjSbp:`UlHn&0\7e5%0CWojDV63'K*]dVbSg4_,%;/(dW8V/(eDJ"45W@ohdH_LYuJCCW<@7IMdDk#J8Dj=^o59#e.?oKT;/CB#c1<D2EG<EGbbKb:Ydit%N$`lp2Zi>/r:[KpAud]_$mAoJ*R,kO!L&eF:"g^mkXg.L2e\of)8'6[,?r98d&p?]=4%6\8?\=TfAW;(Z@^*&l:BEU/>T>7[L?Sn%glh<o7:EA?7nhHack;qM8n6kT&*#Sdi?K=nCWt>?M$t5JDnigXpQ^*]Is8k(q108LZ6+-+0SU<Jh;3_1e.u`N%n(>YIT_tmd?YME%0"fSB7?loO\<^Q4ai<)hcKGi:C[)6FG\!$.gNYLP$=$jM;WPiTF'/dtBqhpAlRU*-<HCun26b[4L,(l?#Fc12_">!R3\`m9O3aO*%INd*-)5!(mK8\e;P\Q,GV\ucqm7BF.pX"r4484,(dDkR``U(r?5eC)dn=9d;]rYPXZVfN(cJV8j\.5&<gYlft@fo8F&BeVd^@#Ka%fUFT`%5T%#FN2p2Q_#YV6K$Pi'F9WGs#)1m[N3qZFO&--!n-80Cc0QbV](dOd&l*#Cu%QPVSi<"V%f?XAQ:V(5jMu&i.L\P_Wt*c%2QF5@J^bNWlPhU.ghrBrA:^cBFM(c=g,LFEs-jJiS?4P%)bmC%CUtWX+FBpj#Hh<;]G-U44U\tt)_5,NpZNs9Z\lpC=%t5ZQd@WL%3]QT(2Dj.nkD2%gK`]oc.?lAW4atM67f5E&\[#W$)O63]HfPP@dgMPj^eaqV'0W2RTV[">2o-Y-c=9S+WWT>fP75F5^;jthYF;uX%FRprq?7_189G0^+h:]&8l"ti)[rfQsfJU6?fb1rhSeZE>^6Th*8`FH`'=&G38_(7DKW8$S0':u!FW_gY8=rqIL^?qXa+rG4]0GB=%g%]W+T#I(;MoJkXHe&j4_U-/%M_q$Y]q3=(0'@Oe??14kk@Iq$YUXOa3=k<-.l.M>E^K^1.MSQr1aj'4/@>Zk$H4sY:;Wa^KAr-O%,8!o:EOb1A+fH3`mAu>u<asl$<2(A(<j%n%W,u%pTd1))*R@B[qnerOQFLb;"';&ld%Gd+?T"eZ<^Eme5rf]<."$09Pg\!Q=9u7R%\h=n-ag(7AAhgH"L8>C!b-!1n!@ZNe90JF%iQMZK1.lI*lGa!BQ"M?aTP/(GF_5lRA+JGl_icfP+a#i8U,7IJV)d@e%cpgBU%XtY%6g_(h%YZ(ej^aJ`KoIjK+::f>p1RUFPclCQ/M'[2D59P(&,hG6-r_;]^-o+kZ2U[.1=Dk6AC"O;-rH!m/S[MX/dsX8NdB2lc'P1H%F^(WtE4?K,O?Xm='Q@JJ7^&paZ-'3sR8].Jc1@o(@;/UKMNi&4Y8d?EZ@`QB0;V7Cgpt)&(s%0$5/l_I87ui,j2LapR=<6dZc'?_%WG@M_F`"un@pplcf-W%+H#%1/<goSs=Tg>VJ^gn1a+VVDNj(ue<7YY^NO5O`c)cZ`>?RFu[54R'2j;s7Ci'X&AVo?nef9P#>'rrr%)N`O&Z8U2*m^ocZ+l$ZCPHm(YBjAYUeg@]aYB21.1TQ:.<7X;q8Zo4t:$]R-Pr1,8Fh>45ASjcJYfL6%CU:%+pf>rcM9=P$b*=i3%WELp6PVnDmhp0lMXC7Xnm1pJ>jr>iLm0ucJ6Mo&o0M"(1n59_sZ2:iK86MG(1I>>LS&reW/o>GP2,K:dRU]3!RqWhGaCt,6*"?'g%6(KO%L*@SVkuK43@<!n-Z0mtk\s&s08QVD.RG&'6?g'M,WYu0/=ZMX8-T![/.&Eq(&ll@7PZ0LmO]?[gWeR/;bY1scE%]l^5ujE-%HCHQf%<G0C@a%h0Va+53E&'%![mF((jHYh>p30DOT:i:1Urncl=i8BV/,(6!c&kdlHp)W:)68PPb1_N<HnJ!Lar8hiV^V:VL(]T.%oU*_mZ'b)l]&3h9>on`E)_F]dFi'rU/_9-s)Ru\[b'rKb0)09Ah/lZqnWJH5A+(f=%&=q\hm&4YhfH6`ft&L-b!'nD=!HeA'&W@h%q=6Za0`9gWXe_`FPuerhfc5o6<V4ap*#u9;*/`usNbp^7&?i%1Ho<h@[Vi=k'ACfQ]t#CYD.Kfp&clE&=ZalgR3C4J[#(NmUBep2%5q%NQpQX$ZHB.YhBR>hA:&\-ZRj0XC_m)IqG+f%\FB.Ljf^Z*lZoJm8g?')>-*(ZJ)eP0_qa(=mQt:#F')fHX=hf[)M$hSn'2h^i%ZS/O(,A+;G^nVk4ekeij*"nH/(hQ7lA;NtL5:3c5[e[5<QFR)&X'J057tO"4YTV9mgIZ5nBRmI5D>Q*hmjdNF%5@L1?Gak&f,i=I%NYA+10ShR$/<;bnAQX`o`=q-2Aj3CV:sSMJ$B8BSLndKC7.$=HUfg5"Bo])>dL`t6hG'E8GnJLJdpNU(hb9mJ;G(7"B`(T8+NQCT%QG@/rT>Yfg2.[[K?-YBmBn3Ff?'&bs;>Nm@(ncGU1kGaS+[Mt3:ROno<?EG&TK.Ta8sF%?eMNQm)Ll+>,oL]?Xb;QfU.B1<!)9Ji%((AQcp.U5B)H\qZ*"O0B>/lkA!79((,asDjM2!ZU5*eaU:U^u'cQ%J#rH=;mMsEJYkB9U3+`+=sA/[(=orjFNKsQAp4ok6)DD_bY%g]@-Xp1Mg"P[JuI8.]NrVioa6@#_<sJ*-4E45-<P1@H:NcTIV57A`nVfp*u7/.r)RL*o?B>>:t<JPAD=mEN@]6)&(poinm#)*lJK%0L%5Odg9AW?$aM"TM2'\dcN#48;W)EgL=m(^eY$KFpp[2+\D5>9N`V[]+qqG_f`$=pJQm]d6noC:TJ/MEaCE4bg3TiHX9i$L+oT$%;@:m9eC>aWoLrP*?=%g>mQ_U(-gEDq$<Wi7h`Ro2r3LL!B2^BI.lGg3@Qh*lh"m$WD]QU$cK?+0V1F>?>I)nM*VNUNY*D1OPD[p-%8YhZAeop:_b@"hRq)P"h1!bh*nPtufD<[pVdQM"@loJ7dFG2b_1OdBMo8[0V$Junf-i*.<Ip1^<Dn<!6Ejg0@&D+M$OL'Zl$U]9+%=,gV%[V!@>?f1nOa]H7Volnp@`S.l\kTFR;)*Vk&ltcI%nFbs+s(poQ2-!_nhcSOOMm'enqEKH-pL!sPYQ+:Ir9&S+TE"`Es82hW%^SJk,&'&o1kl:RGAlm=6JhUflRt!V1F;5l'`U!i'TcM51eFRdVVSmOTapL_4<E3?t002,pW<t6*H\Q[RCOs^Xn0Miu_V]^#g+tOL%^K2K!)V%)@s)n?_+rOS]JQPR/LoE*&6j^21#U<u5+O=aFHB8&qn5N>AQ\'06-5g5E0Ge-Xc8T-C!CJDs+9Pc()O6V+]q,9<a:^0A%E5RHmb><Lc,C(CgBbs6mgG0l^TO:T_C/aMN2fD'fVWWc4-R-L,f!;d2gE858Q?DKa"^f;+1CP!rk+;no-$t&./=XuV;)"BN!^mMG%W$St$(4q\).cqhE6DdA_00t*F5Z*oG?<c("SL^>l?-7/]RHp3%@n,t%i#`M0N-B!le!(&?K&K4&+QBr*<#clK\tAX#dX'`bmpCSL%lG\I4:j(/LKI\hY798W]?O-;'*+T)3g^rHB*QE:f,*mA>@h;Rc&>BSG*em*O6Y1`CnJ"]GUr1+859Zs;rq7jMeue#n`-=0AdM739%MEW4u,/Sl>hkW#cWrnj#XV'u%*hUI$!jaePJKn?7p:^r2=]c%q`8q=sqi?GA7Yn0mn=^5$7Y%_\0)&6)*\g&Ia'p".;`=h;+=q)P%+?\epQ%^@_Hg3%P)F.Eu'aT^T&4s/r;9(;BfEi?N?pRnX$-G2_K(p\u6qVd>*=BElX8[B0RTe7VrAlY+K%A>_7aYsW9O5Y(]m:Jm%23FKA%Mp/Y,-PjhWnpB6=r(1I,2<+O$WK*Kc-X)"T$</n42im38-CS?R@kA9I:R_Y)3A3#oUBYr(Jd+3>I;Y)s$Wrfr#ZKA-LNVf%#+jsJD?[:tkZ*KCmfYU71DQPqDAOFa_7j324a5QK&3]GLO=5;qG+"m<Y.PFa[E&B-/;/_S1e\Zk`A"9)@s3f@/;c>=&QuS@^u/8<%Kg_RI%sLiroQ^<U[g%Kf`$WEB\d3:"&2R'LMZ&)\,&._4YGk7@I@4r@n#,*+S6a`UbF0FiN+(KM6dY1%T:7bj)H@h?j+9PrFg#0t%rSJsn6DuA1Mc!V3#]m4[Z)VFJbn_)5](KqPlb7fYk1,%jOLQ"61s<t4fa_/2@6qd'<u:N!okX"SWCN>2_<@MLnbAL0s7.]?o3_MX%"FGV;[;G.oq=CX8Killi))h0c/n,G?X8Wi697OsJL?d0]3Yrgb%p"Hj5q']O&FpV!&MQc@s7IJ#f)Ir^aD4Z,HU,=?q$kT`deRej%.=^pAmi,0mM7(ZJ^R4>5lDK7Ag=_C&Hp=QiiZlcPJ<L1(KjLZF[]oL^279$)kI]`i'90rmpl(3%`UNXTbV3VfU9/b0Q3m+>(4Q!d%5Ig`"6'i!qmr9+tICtpb:T>Lj\:tsWHfN:js1/\)qXRuo_Olhb@q4QBaF:ij^3o%gbHLh&17@UN`j1PCQ[kQX.E84;fNoM-peqZP%M:oK_`-MJtSOrJhJC#iRi#5"h5=_89c`CHN^H"3rZbWPum,ETu"s$brr.(mT@G=?r<L5'eQML\QY6,?iG7-S&8I1eUQFX*O^h@?^%Q>_]uaQNaVosjsEcST]3Lab[g1@B9+*L+Y,GTcV[aZ$?V^mK;\6eC\<e=,6(WZ\3H8TI0dP"/fGk>U\>mE.atH][,;FIA?NYXnjG%BK+1)iK]I$_(s<4K,MADkD1OS"66)ajeRhoRl!<X]j)I);kPt%><JQ*?d/rRSCf)qemqUQS:_`]iNiNZ'MKV-Tg3%p#KPu>-Brb6%13^ufaob*_84mVnUpMaUNC`_kc3IBUFjF>YDI!keI=OR2V!GEDZjZ,f!C/;/@:VloA46SbGA=^:a%\:N,/Kgkj47_i^nmT*#K/b"%a%Q"uQTB=i<i]U>mMSVD6Fm!Z_1pW^aTdlmD/?J_^UJ.\kuYT1M#M4$>8pd_l\D81Q`kd$$</GqU4,Tl*8[:pQm%4@!'gmM[p1kj%$p\"1[G&/Hp_29k?Xc0?r6:r[Kb7C13>#ha"pfASCm*Q,,'2.>)?@WaS,T2H3fJC9bEsmpEIfh%!shmT:dLru7t)CgN.J11Up'j`%S?'';jgQn?Wtkg\ihscVZ(^TgY)sRNKf!9^[GGB^f?M0$#6nW:K+P*9('Ybp7Y*8GC.N,_E!S"&$)Hi[@[te`#Z[fGR#A*an.tp^%AmTtF83-Dc*kC\8p/s"3Y9JpZg+CqU11J0"$m9*oaMOkcA1uqoL6dpjYqZ"a9]8H,Hm2DL>.+I[c,;bu+CcNP9B_M,Pn@?<Rj_.:%[%R.,imfB7Q0fC]+c:f"mjer:J6._XN;"W3;CDiPZmg2kC28G$Om?m?+h"fN'B+Xl&@3:=`g8<ii0YP0hof0S#4naO0M"JWg\1$*%qq]/T[jeX:7YYOLE^%H##t2(9Rn$)U9D;3\*[<Oa=k`R]49nA6Zq6[Hb*s#`\(]XG@skGfpNhtD=?KA9*4mW#jVk`$/k&NTTH0L9%2]VB>3LOlBH]V1?n+1,oWNI#?:G148?ft]&p7[,c]EBSW(DU3e#*$sNG'$eBB`0M,eVsqAep*G\iII95KNM>e.[D(]aY@amj*$+=%JX`D\D/C/;^[P^f<mk0T;q]sY%r\M@Ic\1g@Qb[uR=P8*[ef5irYnQ0h[SY$ni(tYAU`V^mT%]ThBN5jFA9YH7!jnVf>[O_mT0fu%5jlR.<W7E+Km,+GlT:'ui'(JkmG3-miN"<Nro"XtWY->Y$,?HSZZebuJ7\b:qdO&"h-E8Cb.#"+T8i_W@mAdT5Q&[uUZ`&qNa&Pf%]Kk7U)f&&HOWDR3Z<(..Lqs>$5.c%Aj&\3,X?Vim@^E#?0^HGjIe,^*SUjM#K4S^*J9!N4Fj8O'2hKY!"bq`/VXHUYhcP34?",l2%*!M9-^4h-7#Y]'d_lg!Nrbt-Hmesd70a`L0d[1XqRd.(PQ%ktpGLLO<N&e((8`9+YH(on%U7)G9ef_V^/.=QH:CTbC/qFL'V(_p\%ZB?rHS?h"@bibuW<`le$$"Pk%o)a?sIRRpL2M:+<XX97pZ:5ru11gre*KY:P(VD.IF.?(sM%p/>@P0_?P1M\P4/F(KZ+TLD1!lL0%pDo2bXKG2<2[68@2I(?<7M]V>V!+DqU;VWXE^l#@IGmgf].Ns;dcnWIME:*XJKnp<p,G-$CcSopf2KS0MK,o(p"4QqF\9>IWbkf6%20e8<7`he]iG9;>jR'p3#D`+ia?>Ko5NR\cr5uL]k_n^#:W._)&V'S@^YQAO70Y'aTd&0^"/74=6&9E%ac"frA#`c'Ostr93\O$q%_!#3HnJ&dH"BH:r)NX%-><qZrS7&1`:L25ak\2L,GA7b40BHb#Vg0*qjk\$HF"mo4O?ft:9a[BU]kYF=D%G<4kZUt1F@lK8X[**t%](g8G_#i:Kp.rLQ(4KHj@<u+%Liod#^BUfQRg6^B03P?oYF1B-IXibaMI1:4+7P(lLqM0&9I7pVCQ^H7pi&)0UtL/LjfWXV/b3N!%Xd4TBK1N,@ps;B01"^B?(`7P0Ql05qs)HUMfa/(p2KFq9e'gu&.B92>f*jI7S9aV,`$qC2,mB$>GZC1r.n62Y4##Mq>Xi!nVI=F6%Q6(,X>;t5>f2L"\L2_RiBXIeNg$`Z\Xk2nl1`IV&NDQ'Tf_][j]sZE<ED]0&5D1Fb/54+_ZL(n8;42]8,Zbkt_0Zr^RF?\OOa`P^%`e]FhT89>cZ8)>%9@=-]Q;e(.2M/s@gg[?i\&Y&(kI`0TJ.C)bXr\ZgVe(8^*dceZrc=:CcTS'Mn>oIlABc]67KND3U=&h>5fbgW%7IE%u[3VBqD&9R287(_[P0D9sX!.\h?"@PQ(f]m;*Wa<3coqma&*Ve-U1C(F%gMk4@E8Rg;]$qROC_7'Ah_t1ohncpG2YpPLX>Sq%A#n[=G;EiO9;Sg!a!s#7K4m9^]<JRsH,&/7KR"I+(?]Vgq[8j;M,6C3H$"lkIj12D^&(P3VJuk-K,@7Y/.<aSaL^?j'[JH@oRGsZ%F2*\O(Tg/#\=]3ML$BVY5(>m#%1QejmXN)t^bd/Am9f07o8/JcVJc*Y4`6a1R%5C=0.?F@m^%b;SZ*d\hZ"s4TR@RB@Fq.C>AQM#%SCDY%s+:d7>A3$+oX37ffs0s[86)p2?lb)6)Xu6T/Eou5%mrfAgN3L-0^9p@5;N.J'NhkVl!fM(_AX>)EpQCn!@E^LP\?X&<:9$!%5^0?e>1h'S\".Xb\DHEN_@rj?A+#E_.!P,cbu@B#>nOnUA<g3])1]1e=i9)lN7PCtLc)M?e&92rf&VXth'7Rc"f8`RPt#WY5rocQ%rZObHC0i_T:>=?#hhs!=m,Rfh0M<K!*W)O2p$:@%L$DbpM`^f3E)b$9h2E(KAgdihUA:J*%54IEFuV&U't<T.bbR+/"<`e2MH`$;%N6,?CTU6/b3WYAVq0!"4,B!1fEdVUOn;4p3bd8dR!golhOOKu@i+,ONQ:o()<SO[1oB<k>Fp8mnf>!R9Q9XO*9kG5V5E.b,rAU\Q%UV95IbM+32=@!(mL.n<Iq6r_s&E_'eRQ8A+"@Ru!_*m/h90)2J#6(%`\PF6fH^KYY3Ze>k=3r6jqaSe]47'2TVk1M*+.A-_a%iKe%J`"5/c[eNq`L)E4cS05r>+>O3#:CsUm(c0:pD6d>-8HM'W0F#cO3BpGYE9PI%gZ%,%ffa`OdaTZL(:LE<^YL$k(M(%1jqgch3SIM%;/)qrd?/([9L4D&in/UrX@'-E$82ea+D.c8_s#_j4?^e#$V8imR#=GV&2[_+I;43;_/qr6LLbSP`a0>5,gmiXg!*eQM\oCDB.O0\%*s<)n-p>!N>80Mu)n&>6S*'<PLjJ6f*j;.C6p:O\PV,6#$N^6&`0P';N")=b@hh/C6-4X7Yp:H4:P7W30[^\23n*Xbasl#%*3dUF%gcLR3F*mqO4M)0<`a9$Jh9L:CR>dVH*M''r.sUOAA<IDSX*jIe],)r,OUlsO'&J'@C^XNinafgaT`9?4("O(,q*Bt7,dXR1P(".J%YW1,>^aG>4n&3Hsr4]6@b^c;)RMgH0h,eEKhNM[!0s73U(VOJcWFp6>Af=),Y"jq84RAMK/\&R^/UD/n:0Y@*%s,5[6u:6TR-_jH%0m4>jL'pgngg4,Ha*:'kDS^.4>*i;FJYIaN@\5@A0itYrE?XuT0Q3Ta]qo5PT!;N3IKl=D1>_fWc_i+<q19R0\1ej&!F\ec&9]S\%^iKr>(G\7,!fb%%0;0\:L,WIL]Pp&j<ACn_E`GBqh=VKRjabEcZ@u/=5m0&R'M*.34Bbbsn;FucKi'D=A2qeZ-@=fA[X)B'qRfNd%[Bql#lnYrDk[OuTUZCa<dT2he>0N1kPiG!HqORKF(dO&12`%$N=Ee$1\?t5DV-5QGAu[E!?@mP-jCX"eQB*L'q:R[7Vioa2ecA-%%TX+Zr)!S_J4HbK7,+g_1+3h1`DIf<AJF/UlNr"13Dm7Ku2s.al82;Nni\$VD?&b8@OWLLn/XOGg5mNg^(6+I%8;H]sh5"_n$*C,d%X`<3W[@+0T>G5D310TgfTENI"YqX20&&<F6^quN/d"@Ze\CDA'DDc2J^+",KlpdYlKnbEFhNYQg9+'@amoGY38=9i[XR%fk$A)fJ%KRlS#[?E;^`S<nL@?H/"0EG:/=]ce5="i"R=Pu@.h,i7?e2T9g@sP$siqs]iM<@d3;&aQrVD]dOs!K,($Sp6<cQ&=#SfX\`)=:?-%_FKE_,CS1)0@k7!cgcLl[;;*G'na9%6u19.^9SG''N:EPTCaO33;B)GKeHod#c4W(m9u:gbrREl]P!e8;DRsI;rrEDQj=mGqBo=m%/9Z/#"hh-uI#KES;G-NI`j`N[8I@1e!5W7'X7UR8=,@3J?G0uR&bcT=.Z+95^Qqkb;"*))ZGLe%\F!VTP?W7O,(Mn`8E;^+$?qoq%;k)QS=p[i2k*N;kRIpU;IN?dER)m!;pG^`d54TcPI>-A2E4[*GO`U[D@K2i7'f;(IRVC58JO4SK@F8oeMoj"K&kI+WfH/9L\))2<%L6^j*72ADA1KA0]p^ZY5pO3#Zm&FY&[5"ddY&O\WD4?4o#4R?X'eNhg3SR(#3?+4+=_lfi&F[.]XZ6q84LE=Gp74Xpn8!s?CJ8M@%I+Y&mDVM(OF]4dOEjQb`&QYG;j-BkcH4D\p5B8fHj>TWU,1f5`Qlb\H.A-&a0`e7&=Jk_V.AlDSpmO\[hgng=4,Ajj[j#V!Yl`X0%JE1Gl?Y5$*8U`f<B'=]7YLa)_),ZuOSS.N>!R],dfGf+C*)i(tQ5KZ[\fgZSFL'C3X3l_`gh)g.8NYbnortMATEPu?[0PW*85nsE%Kns2*ei\HIRFG6B=^:I.5YRD0<As!1Ep>8]Z!LVJ/0Y0S+3$0K[p%/V/.T"kXFd]!^VZIR$C*K%ol6ibEX:2"<E,KL"2/O7X9-5[%1_\Q]/Z5'N2FI-SbOs)]i\gWgmJ0s-a+I,S8Xh7qN+[kK@H&&QRNIWkgge%*0FG>dNj0qCFe2qjpMhuT8[!;_<=Mg1+%oVQhPV<=%/$qDoH&V5,:0K+DM?Ud*6bJd>elq'r\DGI4Z$0rh,(cG2ZQ8k1X$tU.bMj&+gh)ZGE`F8_!f1OoE\Ruoc6hBFfh2tYbD6DEbF%-#%9`nqrINj$?puN<`Z9)#q!cVH$R.sY!94#WVVK<[u/>((M_PJ:SArjV'$J76@jh0-^YLo-NpUdW5/MUj!F^&=n"Pe5FfdT9u2oK8T%:kD"%Pau\UA2[e]MEk^L@0bHl=Io2aVmJQleJ5WJc."g!H;=R&^u/3$/'ehGq4FlS\gk>*IGH[:QnMAGd20HMr/#pJFnjW[r\^M6%#g)=K9)IQiIeo=J'/%)-kG<-LN.c>ti_iLmKtVD`<^md`I-8,-ie*n(HLqtB>8DgirEW[HYZ%7>*AGZ8G_I0Qql&2>O7X/CkOEnh%LLD8Xk4YsX*V=/Uf-s*uWef?#'9b^8]@@3W^M4%tCsY!uj]0IR"&NC8k;03%9S;>a,EZuHcOJg/-;WTLVO?ho^XCVulM.4<f'YC:%pOqui#D=n^HOCcL42ij9o==VaEJY(`J(C!#Waltc)`E60L6uak$P5I#,<A#aSETnlUZ:l[J_E#ZYTc!ncg0_ah!m$i^6`7eqhc`?%@@:me>>Z0!]jQi*B,.[<"Y2&=o!VRCR:-*-c.:(2L5<4k?X&VO^\k!82G9VB+L`<Q)31\A1GGH@hA]An]bksN66W:#)p(dh(<=a_%4k(`1Kb&=^:<1\''79GG\nCuDJHs,+(Eaq'\s]oCaj_Uk*lRF;7;mc:<=d_t&iMce:+tiAJcc#gh>*II#:?.#+m6\R(tD>\7#utr%6N@9LW^ar,U?"Rp!##?Y?1lXM?n$t6S=!c4nY95$+q%giP[_JG6lKjEEC$%I'ZpQkcFj7u/6HY!5?)0E>bA8NNQ5rPMn7Oc.ZC4W%A%'.iZkd+,LDG<oJMn:7G7Y<h5amhZ7K'(";LCZBb?l7ag`n0\4+cV#1Q3#=8R(10+=l[^<[c]&eKZ`&X<&?Oc!":CKa/5;D-0k*%c1!#debsin1UD=l%1;)geJY`F>Lg>K3s2hpW!\35RM:bNTk9m0QBCH]G%XaT0+7Vs__]5=O*`%j:0j77^d#3Ie1<X+'!k`^e"V(C%haq(;A*$%0gf<D:g.eiH#:A[dm&/jk^O5*L`MN)'&p/RbLnB.XDrMC.-`BV3cFSj*C`D<bHb^bl2\fSJ3-(F1_fiNpQ;uemhh?6A%Zar&aBZ+ld='5CVCh:t#@RD/EhW$^,qfjj):Z@NM'@Kk=bs.A!jIe4984Agb<C8S]+`E-[=XKKDKUA4)*L>(ul6rMAqBE8E2hFY3%IUX:r^5;5=alKT&CWTe&lnO&$9`ADZIZSAMT6&K=-GZjro6p`a9]6Xb&O+5G6//r2i=n9Sp4tY8PB('UH[TGPB)P]%TT*TJfa#0V%iq%b=3N8t<(tN"6AHHsHbl?$YOL$X(Mk\B7Z>h0/-SS_W57fRD37Y<DFp9^mln)=Mk7D+:2FFiH9L'"^+V$Q`?jagJQ>&fG]2"hn%DJ6@A`Fna4k5$>`)9=V3rgqF&RjF0;b,;@'RL#jj'jg%I9HUq_kOrR"$qr:]#N<UXT^"T#7\A*qCqWXN2*?T,gABX;oA/[kMXM#.%<,$Qfm3Tb&!RW)E+De!1[!%q/9"PVBl59@+q&stVS@<E)1.EsbA="RbOO7aW344!+LtKu3N6.Z+MVhk<UM:ti_gfc:V\6UA\OL5.%k%%q(dqgC@<=X]YSkEh<^Y'i:1?d5rOhVbX00C$*2HTKcRT<R[_dMmU'9M;jJWWM;VU&Wn-5En-4sX>7(hYTmL41m%oiaZfD'Hd,%.0B'UiQrl\%`^<2$[:Ej'hkB`j.:AZa-Z2N5P"90m='OlP<U)+:VZJ0b>p3".P/M=/LdYOlGDB[<i-cdiI\ZfMSI+-h%*u#6J"kC%JQFVFE$-1Q+:p"d(j!i'i(G@.!'SaOG26_XheH'!+`5@uSSNrpXOq;:+U<gc,cDX$4p;[u?qB,+rToU>+MF]Z%LtF?m`OgmGV9rl%XU$Z?G$YGhL8teZ`+gK[]?DR!Mac<.6qB>:7>4`!8ES;%S&8QB3,5R7+]StMbuGbZc/k\;Aj$:.ksJKBSL_i:&q!lbYXi[bZ7;hp%7Go*cn8O@\KQ9.EI4:V4@of)Qf$[%0Z@Vq\EZcm\nuDu1YTP&obaHA=HEZp`%l9=kN@p*[2BjoaI^SbrUMb52OQ;B+no3].X4!Dd%!ufPNJGi-u&Qa\\C-^31I5MHACG+(YbuT5thaW,%O>`Ts*r;M=a(-Je$>BM2YbIq5,0h:"GF$G0A%c;gB\de]))f;Y/4;WdC@\rp%gap+HC/PNRaD#u>46t=O3`!1EpVBNTdF*hc@OASJU2s76!Z.:pHsH2<nOV-ch9$lV=B+0VArk],;6'r+bT\sY"=[i1i_kM=p`1<_%>qI$jR21/8""mO>1\Rmi0j@^hotU/62"14-,+$LC@r/nYj,gRc;XI=77+9k>g9fHj(1l&M"nH@aS&@MI]aUOb.Tul(^T`mA*ts4n%]J3]^8LIlQ6ZV_(hP00'2NDg9ANY<=!_mT5lR7NU5jT6_ds;FUO'F<6XIm('g=_c["1lufGRsXRP^/\8]9\V98Zq5D9b-@UTk5=1%im1cI;A`A3.V0Il6<olI5CMh_,E"\MVZII^J/5,$b],Mc21&m75dB%jk93S[p1'NOmiV@LR:O(IV2:fSihp/ZRnU\`h<24IP>'(D%PZSaqIU^V8]M8BebO?I0mn+1YDZhA7d<:'<'#o5?.\MDE$LW*\c\/lLhMh.<R"q\;iJunTh2?`Z\=s:_]`RjJCVWp!>L.I7Y[q$M%ojS4I'YsfPV-.+CBXe)EbA`lNA-?Y)90l\dC<k\XhfDI7NkB*FJOY,4DAiXf!+Gl-a\EQ/=d?MP2S2Y5D,*V%#1knFOrCaEob:B,%oq;\Y+r6FU"@+`[6:l2YX\d!K2SCIA'n\hJ$Ps=#BcqQF(D3mSKNhYW#"<Z:OmPc*40<^*o,0%Z<<Eu996/F97APdr]\qCX*jpcS%1RKu82\okuU6`0YEXJSkI5VsnZ:_U_nKqZe1kT=HN[T'jlcE0SSUgBJ$<UF'RAu?T,mQ.n)*mT>[gtQ_!`O7jU_hTT5fI1(O5hW#%(<bO6Y*HdpX#d@0o;%MVUDr<SCsg']cW5?'H\I_$E*d5@Ffc:4![POND3j@[T#P=P-QY>j(6*Ru(Y2!oGPRBRS/(\65s-jU+T?8a%L!IhT"OGXM?=Df:dCBEm]5KCd1iXST5$lGbelT#u%m(fd$i;Zfs8,=cS_NW-2kU*6+Fa0P^N"U7IY`t%9\P%[V9!2fhG5[so17ag%=oBA\GF^`N[5#EE^bO+cX#[U$R)&*g'/ANfWG-0+LNu"3LcJ#`@WY*Tnqc:?7f8&Dc5`nf]9hdc[qB\qp3S^sDp=+&cWaYd>75,4%FcoA+Z!VIanql/rm:q;_LfQ-O9;J7nf5_WZ"d_X\boCt2O&u#m0%)bVnfchN)$8`EjQ)?2Ao8WIob=eort=`iBmecjH=kc8X^s3q%1egcNoNPUXM[YNL-IJ)&dY?[^RDm&R;H!*r[TJdFH)^[\p:I,!#%re/j>RQabLVsW\`\RclXhpohXgSM)duG+UhigY$K%0L%4/72%d%@.X#0]DpF_.O])q4T+Q+;3/qGn",[aq!a"8>8'g-GBqD$-'c5F77M:p7H8)"u:8Le8:jpY?Car^tr@aO\<-MTRF.a./DjgZ@&R%Go8=Z0s.g4n9])X/N;m[dk-#U<NYpRo<'"O1ES;8hlsiG:OF9oIc_L`5_Ag"LM^>Ocd+^q%pGjiRBNW_(!_2*Tp]l^S!cM$R;_X;%LGNib;E48BTmH7Q2^LbE1CmRLk],tlZHiBbesUG'G4%0D9E9o^^8[LP54VG$7cDEie)]MNY>u>g5*]b?n-g5Wj#HP$Gd?A3"4,`+%NH!g\G'?,Gr5SGma.&%d>=Y9iK>n%9j>dDcM1+GF:-Z<NnnTlD0Y:d0O$$$=*%-3_GFeM@$:m;Lh-t9qM+7h?4R_uf3:.*YonLZf%39jei.3A/"')jrWaI]L'Uc4JKj%5$UH.R;h:&5AJ]pV2.O*Xa`O`8gNeNR2-rQCm`$XnQU0n5Ba6B?el#s/+WOoM]/=sg!AGS!+<%b23=B.N#8(<R%_,(7qpNm/=jTeighY88HC-&Dr^lQ3h0g(cZZQk&IBLT\>cXa?>V^ROb9MmkG2=o>.X`g/e$+0'-ICZ0!L"*\MUs%6kDa%qaVg"G-Q)+D)uPY5lPRH:Gs9,<M;CUcFC?@"WkbS\>Y+TS9Qc6B!Ca_r/[p2QdRho=H-cp:m2T+J<eV"Q>15P$>H]K`n!I%%,r"P/5D<ms^SJe0X<nlh:9c+Y7Q$;Q\=8`7for!W!s>2$D<g<:h+dIb_ItX0V1cmh+ap[Baeqg%#Ei>:@V'F$\;j7R--;A6Y-5qI%@>P+\)(+j,(o`Vf)P1sNj6J]uQs^[\`d,0B3ls9L3m:7?GPAL!f8,5?gbVO@Z*irLMUYS_ZFASqX?n`0&,)=%XhP@BY"KKp=Uc=F%bQ]V*+TuT<d)3dNe3!hp?$'N&1Rs@ncuN3N[?U0:2u7',R[BK=j\1Tq2&ZF>1*DYVZ2<70T\:jJ,/6-7n6,=([*f%SL0QZFrT^NO%7ER%n23!3)X:Kt)bMCTafMsN9Nn+u+[@%JheI^DSEt#f,Geem0.PooL"#R3Im0&L;AH,Urm$\[f_Gf#U(L^)cgP,%.8kWBCj=<=$%Zg^gAi#DdD>#q=<!86X4"R*R`/)!tRJ127mZ$1rp]*Vn((Qgg]I)p/HBl$.k\Kmr.JhOGFq,rMcbdojoWTH@:mH`O69s7ED0EU-u%2-'#Z;9ECBD)KImX9B'c>tlq_nc^\=EH`)kWjWVJB2+C(L7*h&qLjX7lkh79"7dcVr>PFMhBN47T8VH(MB>Dt+!Q[SNaWn2'FGu/%M%IPV#9N=Fl#9G3a+"NI6J[HD!mduiT-T,_1O4MDf_%%f@DBgW41B@V15j9(06pd#[YNUG&SBo1N+/mQI#<&*Le&:7atP''ddm)?%^Q!W=ZN(LJVR'+g^%;^HQs:KBMHpC0G@?kW1<]T]ZXpr!9;J%9M0XS=k$4euSQ3eo9=:<"b@4lWQ!lGgmEj@1/NhN^"c4=67N1<]%X+npdA.qj>2SsPLIZ*(nV;*jNbX2%0j+[/l'rX]`@*9![&W5<j9p\cBL?#_c-DAn:gQ[D0g[="EjOd#@^U'ZW+.bo]m2-4!_#4_A%lS8jf9?__<"%.SOX#mu6b/Kf,a1ItK23s:>j,7o0BISrTL]m<b10Y]"7QFdak\q&cfiUdnVm92uOt$^TofTSnVg[mrDPB]PC'N`:%f6ni"X6DdbfYB-<'>Dsq%g.WH.-0FZ33Y/+eU&d-KTQeGhOu^QH[[Ytk<ta&o:.s:'E>r#f(bU%lon=BBX98V4^pql9+&urW_]L!%U0":l8k`eT7YWj$9Am]=ZM#dfCu:\Lg);-R([`Hp@rP`^6+VU%P7_<2?m7)YdOch/H!D:hBm0M:-2Xq'SR/'J$)GqM^teFR.L?RW%(>nmn8*AHWI1To:a76%N,k:1MUPU/LAkB%<o>,uY)u;tA0Q%Sj-]!Q`F)T8@J+ND2%@p]'@aLtZZD+D7`o8;G8:q=3XGk]pWR)(]%&K/h5q9@_\m6*SnB!Z:+W01=PZ`;75^+Ylqa$D"t""u=[!_3s;^`2O\NrAqB^sm'6?_X9RF3!!J3%Nf7>%A"/gh1,qf.tZ<m:"=i%h:Wjp`g<h"$G%8Wq5$(t'khlY>k9Qa6T-_-E,$@bHd2,KBc%Q.J2J)G?5$dXq[o`sX@I3!Ft,&1MGIT<pI9\\/U"p%"3d1J/Xe,f%>S)'3m:-tOWl\6.n05$c'JjLF>@=7e7HTJEEE<<m1I,ShlpH.4,20oTJLnQC`][.<%+P?Np!MH%;Lo"K3cFj=>oS+17^?9j^OI8k%b2hJJ#TgjsA=+7cLR)us]9/9gA=t.V@q53c*cIAV'dCY<A7+8hMI)bXL:s3]^3VjIA(X'a__tqdh=-mfLl/se8XR]Do'\SGXulsM%3H4#Sb[hC1:)Siufli<&6_.F?r1XV\,J)bKAM3T3Dot$P.HB'#+/9p=Lm@o00;.fHOug+W%pa\oG/;7sk/3p[*<*0hdl>0SJSR>c%1drb"5`TXb@R*O55RmTMDP6j&"(qit=kOtrcgZWIh#iFor[_C-7;GL1$&CUs5;<fZ)fnS\U@lok@@*cu.qoh3f$$ub\Xe`Wp?;-2%S\s_<%-D.pK"*AsGM(;FLhedclW1$,IE-L&rF7O^W\)[@;O<:n$l^g.1<;=56[hrV:`/)=W`UD1r_g.-k4/0[dh)fG6-a8u46h+9%D*pbms,*"RrDFcu)UBW$)KT#BF4jTc_NH0lITXtB!WrgV%hLVS]$<_`hdGEnUaXlLq-!6N3\]%O_a59qQ=3WhP&TK.Se`$L-6$7r%@9CS@Lf!+nNf.*kfCdG-M`HA#J>cP-"H;+/B%$g#)[9Ws4u_nn[R@JL$4#B_KpAtt<E3NiI]lp+arZg@97,_#=n<#g;5&=(`M-<h%=%oE&Ac1Ma3U18ubOTq*m(+mKk(/JGVRkk^o)Qc_p.P!B[R.U#k)iO:A#=C4=IN:%00fIR+FKePJNOKuYsch=7_TK,%ToL(I7LRX%_j`9nd%ts5Z@/"2GHeSO/OAh*P'T4^%\N8m]n?0-:P[fc=O]DD>_%^G;=D:RYs?=W3tu"%K&31DXec:;b<'.rf9Vt9#,RS5,,8MC%hN:s.Y6DUlfiYoj]`VtiVqSri\XJ-(JH/euTpFC5"!)\.7^^.=W-6*<V09e\9C9M#CA3i`mD(^K*,4lj6!ii50PWS=&3(<*=bG9+%bBNA+&dg@Bb3<8J#P4C)<'+K%B?fh?FuU,bNr>3C*Ve&o!kC9#lenRdW#aZZ%+TRYKdBd`8jJbD+#t;N&&[.gY^o0^Wj5:b5W+_1%"9LY'`QA65[DTK?f8Ug#%^rgLa:H-Vod@h5oP*$m:0k3SP&1s<'fXAg:Z<%c6*&FEFI+,<d*a`8M-O'pIUc)g/W?]4LL?3m#b]`)%j8nNnE,9:d+ZZp0[a!#ba.MJi()#_"a50V9b@`B*nJc;Xl]S&R;3I_fI[4q7dYd>dPubA.f^X+f.;FjO,AhKJC3(YA3c@MrND"Fd%;dBcQ,0fi,V&Tdo2-UOm6*brEr4P2K?L4&'b=R6.cFhe]#SO^<(Kh2.-uDDVKNVS+_o,ds[$n\$'$I=M!p13ggFuD,HQ%r9A>Zj/%VqkV<[]mf.4NfTXhD21P0ttq8Ul<l)>rE0NZN.jY'k>,I!qp#fbZ!%,*99sE;b2++89%&G7B(F":K^C>(rL1YZBG9MLZ>u6e<k%8%V(&\241Y);/pAGfh/qZp(5SP6?mlXN9D2I)ceWC]Eb3iIl4c@_F0etZG9sqHh58BJNUHJc,#Z\E'X:n5O8K%/[iEf)#C;p;1$MMI%8I)(9-&'29Z)"8X/8md(T!iiaiDDI+8!R'Vpnk=)MrCf5pmlG%bV4^\:C\@R,Wl`+pDLWg@1eW&bW*3gONL[79$i#Po]m-haRt(B%OdDUBmOoQV$gsh(=E_3g*5IhP!r5moSXJGd,#T:kZ?IC]4VD)&1tbugDXk#_M_N,RgHf0UpU[AX%53J<>7i10oh8@/)h*O%!ER05%69KW54CM9=C"@1MFqZTo[.=aV/$8DVctIUT9tEZ"p*=XJ`X;.kRXA`4CrK]*Vi"C$_FZ/upK5Mk-KB*G,,o'>!^m6#hq*I<9-32;%T/[VTR"AKg\)08h:VOic]1'-X*0ORLhU`.i/..2iD="V;+><"9mf#MrLfZ19U7`@]I@nSoeZDo-KlO7gi"]kmI[o%8bXm%iMEja6%#nJSS+eo3L"l3=qPd&"[f#E:jn3'<R@cekm!H4*HL:s53F-,t')QtlFGH^EbCou'6&atMI>L;.LV/mRmp3pI)k%Jm19,l=E%_,pe%ic<r#Q\-i,d^?*$(V"+DYCgGEK%TL%3X7=Dd]@[f7(NO_7SG87DVcdB(jN)@"g*lFGBlK-dU`UCK!;IF5m1+&^JVA<,B&\IL)jeB%cu$e5RpKO^h.hZ8*&BSWPotW<HX\-h:4R%n9@1I"/Vmsek6:7QF-%l/GM7mE]BUhX?nGn_Y/YdlJD&F3<eLSG]XM]SP`SN1(pG2c%mFj=&p(a-m93SB_4E464#F;M,jEm]T'pHEZh]irFhXcitlfBM=Del07%C<u+Uo_ac6'pEO)H3%b`Cmd4:1mLafokc]2`"afI@2i'%\88@`ULZ%=fEI<iK]4W)%XNi22dNF"&nQBJB_ERsA(^.RZp]5alqZXRl&k[!;`#"0QbK#?ZPGtD'9ilpK)"aaEZi9oV$lq2=QXK-%oO50%G'JA=7G^gUZ"t^$j[)U$X@'eUF`CQ>O;'_1n:+Rn\pHQgcBfX)La!uTmocJ9,$rH,@h=Gj@^7Xul]Jl&i0raNMrl/s(7=68%Oa.5sgPg()dn;+eG9>rjTCQ(T:^'?;LNU\2BH4lJZO*%;*!4]o&WB'oh<6)&:<Xk][p;OP_+\Wc,P7fhFlp7<`7g,;j&!/QWGNVa%\UZGeEJOqpA)I0LRSVa[Rtm*a>g8Zgo2&GK8[JsF'TGKM4mVGS^+J@V.k$XY_9k5qEL%AW6.dLTi3eqlbGY<'"X/hrZ48%+T3V^]%<Noc?^F*FjKf0:W9",:1M`BMC+\/8LBKtV0+atm7?ld,Qp"O\%nuQZHk3\p]*DQZ6<0HNS#fV\M04ptG'#?P\=qA<W9u[YI[+BX-%j,iZ\0>#q46O7?D/<YP`0noV4>TYee2FfN\o<Fp0?+t>s&!Z+E96h,-\ZHSVfK8Erf%W6pin3c6E5XRCG4+$Z@9<(6^Jn362uXfF%5I_N\TUM.s=lXD63G``g`;sKEJe)<g9e$6m[>gH.N8E25jWHa^Q$ZTM5)b[f"PqCn,T`6X,a'\m?qm#Eh0O;0nYp%JO8DRc#DJe^%9Hi8F\h(IN",DRRY30B9S1e[UrlS0lbRH"M-c_H]gNh>t(>Iq!Gn?il3[4`*Ch\Zn:]tW+WLUeof!;I/i([uink&UMB'GHI>@lP&%f8,;n5f9N<?RgP[c-6eUY0`^VT9@B;J&r4Hr&sXXXtdJ:Et:>TCMjMa"Rtk2'!35`KNplJjBf`19CdAe[]e$e-U'u<a>G=gZ1ep$%d&<]joaU'PXujQV\)nu']Mb(R%qJABBd@4JZD5=)pH[ODraPFMX$4dZ>VhZ*.KCX`4guUAR^lQd8n2ABKAX)FPu^0qpAmI6)K0K8%)IbW+rJCEN[;P;'8V5+TH[_"LW1:osJM/9B0476P(GRkBr,)eiFD5l]gg.F:<Bb>^msKh+W2"['#(_cO=83n11g8=86^[d!?XXo)%dqK,7D-2FmNHD#@7re%7>*&o[5LlB7?$WQm&/WH?c$9/P"WNsALT:tWrT#I#$%J3DgTB01;&FC+8qW+GePB6iY\%<^Op5,h=bJ@9%EYd[D;/@d0+8oIf`].4W%3_HeWU7P,H=-td&@Cn]Vm$WdF&<d%0P7"q@BdQPf7GR+d&H&hX3e+"%>GZF%*!3Y(rQ^"-Vko*=e_f*%>@\eH6HloUjkR+=%Sn8!T7&:M:!apHPGbWB=ie$&fW%FB\1Hi7PQge[MZYdDQ!^g>IW(^jN<;$3<iiX`AR%H]]70;b[c+gf3q#G(%Y?Mi[-klEu;ok4a4GCLZ^[CF4!_>+J_s(ihV\0N^'5JTj_X?tG_W&u[q^qrlm_8D[K.*_7'FG@Il*(uN]&:B3Z7H)g&^"C5,([+Z%)ksB:$BRam9_KCr5e@=k">6i@I):iEkZ6i?_:r1o$%to+F\DjF7sjOjAlIt2^Ad>aR>@#Eqk[KO^\OI$;n9!)/#^<MY($1p+-=*:%6JB<7]:a_TWK.]!,u4NLE)@L2dCT@L,i5[85TU9_e&\C=<;#*i5Y%0GrXO>ZP97O!ibkY(J6u6G!5tOPQ,dQdR2?eCa>+Z-fj1mM%:Y+KO,:m<^qUiY!6D"tN!d]4_[Yg!OWVWm^A=-XueWfFg7bN,2Gt?^kX[rW]gp5_XH6udc_>Tdt'^+Msggd^Hj9K]93Zr3Q$X3c'%MgH,Z[AQPf^UZ;>rT;spiZVK60g1]CT_B,Z@=<WFW8FB)L_R0+kd%D0b/7J>'5AWLUiP0/mCe+UHKrB$4Q6EFAS%`pQtJ"na>bBg%<li".a;YeAm.W,$+IeIo;-b7=m/tCtalO92!tfUt%V#Rh*Fj,'m4Z#$4oScq9$)EZmKhJj&'13s_A3m;QPQFKmfe$?;(\gFaMYk7%M\jR$/Ti%UQEG5[KMcU,,DB\BILqf!g,<B(L`.e0;`8&"M9=3I%-1%B7)lX0WZ<UtgWF8-c,45>.br,Y4=3R!iGM!%[L/ehf!L&^%]<EO-1@/,m>ro"]NH3[&?Xhu"[gkJ8mDHV@5L=gtX#56/pN1>rq2,AcOFjld2kt&dZudEa"ZY-@WWgb)iW`guTR_-p5GO&Pf^7Y>%1_GM^?^p*Cl[F+n+R\GLEh20A^t>VuW<@XLES+:u3oW0BBd)nC*Po4hheu/ZM?pgO7[9XA]QT9<5t=%-NEX/NoMX#RV*7j>C24!$%=SnOM^S*L^[hj,bWYGr<UgIa7TjpqM^fTha[0$?UL]N/GhduA^Zi\Ig1?=d&J@U[[':1tF=j)XU6R$7K%sGE%!sh3mGt#-6cbh*3%MJq\\E(@=o5t6n^i]b?IU0?JW<"$R$;@DKnV&!GA4#T?=!QNf6oX/*[C"*f1A"F9c&#E<sU%AC_QpkUG<<d5Y7(&\3(Tq$q5iF[\%B4#D),>g&F:UsYZ0<lnV;@>P&IbLb:?r/.<[/`i^bCMdrTT;kWiHDbBZ(&:B9;r)CWgQO[$a;C&e?[R*hm-TJp32gR@HCrB)ZY&@%'\L3oH*d`50T,_Z7Q0aDcd&]Pcp,TopB/Oo3:t#9Z$q0O>N5UMl[\&<[t>-Kj=XPI"2d;6k*K%!o^0Vf?a,*]395]$(`(d)^=o[:%[^-!BG7IjX_n.*+^`7+$%jlgpNYO1!N=9RG_cST(YC!a2#n5l[RG1,'!7[X<X,@:CU71G2$"32OK%e0H7eQZ5\\Ko6HfP6g74o//%'H;j8(E:.,Y/Q48"u+K^A#T>SQ:/HLXQ8?]#"DYj]?LOFik(4AX5rZL2]ilm&A.AG#KB1ck@Of#6nY^8E@-4^fNo=((`)i\H,*gt%h&T6Q<d9X#Lc&?F=L%!eM[+cQe#m$IJ72V[j8iMPa8tRdUd+Tq#U-)9LY=egGut`.N!khoU`.kr7V,c$'@Q?%[-!Mq9,%gP2R6]<%7\,*B[-fj7g2uYj'G4BqMRp]XZ*O=o<<iS</ZVV>c2ef,&VAu$"7`fELnOo>:T$l3b&DGjX3C,8a&=9O.3D9]_]<`R:XA"gW<20;%Jok.m['Ct_D&pWC."7jf;)bD$[\fUjX(76b2d)ms`%.-+5&l&Pl.&\*'uW#MNZTq*iF1Nm95Nk<"0mj2K/-T1+a+i-VK+n4<D0mh%_cT[C]s4s-b'66<2;RfjIZQ)SG^#4O:.*'qIE7TMYg]7"X>K6d(lY=a^!WE*XRt,Q9T6E=MXotj-DR=1PjpBD5(3YFf0$r\EBtF^%lQ(7^P;V-?/=d5T@i)K`Zk_c`!4-I21CGrEeeN>SM:Jp+cOV=Lr!k%nm"4J)jRd5<iZ8T=Q=*Z&8>\Tu4sSqif?#QnX@C*7S'0@%%eu_')pX%bo]2BVDV:iEn(R%5\]/O#C/=Q#Ad)C4&TKA3)Z$:`c<S6>eji^EH[^q-GA3Bo]2(Z'KbTDYH2_Q[s$S:Af)7QN,!`8Zg%C8[Y/;h;<dI.ut9cGaWj@cq>P!U92SmM]c%;[jW]kZ1AVOVWaqX8DXiGt%uer>//7Ra^?U^)lsDIeU=:C,__H"(Ws.Z:^uoH!`2F%RrtrpB@7-+UNGC]Y(=%5\)jS[n7'H/Ske@h[4[2-/6cm+rYc/;,(%#D][&[?k`"d(1q29h`-Fk6kFE:rYl/U&BQ)JEfr_00ROa.H%q:US=pRE^T*=8K]@:5.D+^og#1Fi19hit/;T1D_$BlBH81K9ob=jU-@Qb@Y':s;Nm(:8BF`UKbWhef4g`?_RSB5;p@>00Ak:_,#g%]4G@:)Ek3=/7)+B$[XF3;5(SMJ#;=)aF8LaF\jkiX7g"#.3!;sHg8"SUe`L5`'c':M=7@t@(X27#2Ap"C%%^_>;XZ8i3T#jP)0rT%X<%4"[W1V?frCP0o3p0__]`LT(9C-:W\*E0I!]F%6((KhoMLktQ@gN<&s]EW^,7?=j_QFlb:4MC[nEnl38>7S&6+_tG#uRrF3h))%e5aJ+98k9"fo%qZUe.h&HARnpfN-]=R;I7XXKs";PY_+U-?\3\@N%*Qa.ao7Y7;:L>+--5AbK44#3/XPX6WZN`OM4O6X>R,?W5GY%:sCe_H6UhUS/6q'cs.mFV/BP4k(o7LJ82*,=.VuaicTtI8^]lkeEMpLnd%jU51f%m90!c1WVGWC"e4,qV+Y5*H+@4V94=aB,I.BW%WBCT'R.I_]\V9-ZZAijSVXd?1/kqLRe>69?[#L_Oh+4<QAl,?EM;$I.C6_UbX,]:,;u"%2cWW#)q0p<D*/pCn:*[']!uEk+!8I>a%X7+>9$O/H6V`KO.8Mqts^1k?"m21)g95._TRZ*YVN^X'DNH,c/++ZM6ID#=rX4OuA0ZssfE4*rqW4#DkLh>2'g,<BFa['^3L#1L]%[*>o4#u\h+_dMen)@Un/Z?n;I_g$41dPeEMWc+_NAsLo*'&?5rf<M\@!12f%95ASoC2NJiBl-,Z+"jC,VWdK8dY8@hAfd/a2ZM[o%Y-,g*)M\6Cq%*42-$X)\R7oBr7p$K4BdH"GPrH'RY$/beMma@VJ'XWp4)s]E5,5hkB6,GgI!BJJ5$g'B^Dh$As3,12g&r^VbkY[.%/`t>Y=>ee8#K!#=1to/bZ`/[sZjCRDfe\q%[#%f)mREZjd:hjJgh=Th<mS(VSO&/_(i:,O^.1s,Q;b4K,$t*k@eBA99nQC-#`Uad%G\nK?g[3)r7bh[@A?:C-C6PH)=JOF/=L?d-"b.<L/Y9[E#8`-!8ddeXmY6;(;i1c^Hl!%1dc2&Wfor6VWQfT[*%T!]c84oeU<//C%oopIs9*IAX79THg&-sUeCni<r=38,'C9jNhcdd-$%7da@>;4a7QF#BoWl]us91D&+-C_c"1tch-Ag^uc3jYh7qt<e]%1#Fm,i->n%BZ$iA>(b5baMeb#<c59QAWn-\2;0<i%S\e6Ydc5Mh.1gJ.06EhSV`LOMlAY)Y5JYWK=U]B9_,%97@5!15s20l"pq;gZPT@fX1EF>%%75>C/E0jd"Wb2oZ""d>+SZt(I,T?'phbPTQZh:R0*1ZNibuMsX65Vsn<^+#,RI&kQ6FZ#Z/M+?hEf1U2ofC-Rq)D3*/G9qBs&D4%H<X8"jN2;<hHjHXUJ2r7njGaoFWZh'AFE9%-G'RVOdP$.[DrAXg:a(29m-W`j#SHt$0imTWeY>pRj5C^)@R!P;eE7$O4Vr9@Dd"H%g!-dhlmAGnJ5VWbDKl7Zb0WCY]OgBX)mgJo=.LX.G&T[D$\SX_KDaV5n"-l3CpsN)B:VD![[V*5.G9S5gJ(4dH0WLh^2:%HQFf9m%)/HSLOT^rH@6p^jf!=,1dJt_-%\@>V?Ad*p)ITX#h:.]WZ5peK[LqJ(@8L]h=a"e*db%!(K/KJ0aP>g)..IWM8EZG2;?K1"34i);%OJ()3Xf0_\g$PB#>"s!Se"G6!#U\D%Wr\CT&mWgLW#GlA#$B=m<U=f#gkSV+#"W%oi/._*U:[)KJ8T[.&mWgL;VH^Q\fjA?$*?n%%iOWr3G=?QQd^#F.Q5asR\$1X=bap_(#UieE+rX5";M$Ef;jU*q7<?Tt%BaAPeZS,7e,WT&-&Xen!.#W::=HG?e*r-m-Eg/QSrCD9%Po>[uLr!Ard3WtP#Q"8k.Lr]P8_7^e^@![6g?7fZPcagm"`ld'7N;hZ7"QeT'>ESrM/GR[CPF`9Wruguk2;).DmBnFBHGI4##@&d%B=9oTW\sWn3GLEg!eOIj_kE$le7ptPVP<DE7]Np#SYhJM3!Vr1OCai4,J#$7-eqmn:;\H)>SM<!+@S?Q@*Nl]9;G5h&g\ZZ:CT>o%Vdu3J7uPi^\)<))ZE:f)r=0#,8>SdeW&`]=iTm#XbV(.rr8QBVN\K5TEGE$V>4Ws&i(Y10lYJB8JM:'Kgfk`>^JW%r(]fo_)Utn$%h&01WR>0p38QlFp[IR&D*b79:6[.p>[R"&>=;\R0(UVf3*XgWUZH<`K9@A:>8M+MU6qZ9HeK5eNZmD"!Wq3U$jts=`>r:.i]WWL@%5tA4dBU)h_[jP>:l-Q%KpOtn9ra-cB`<tLOT`Rm46PYssNNHBX3NL9M0[sHTTj5fanJ3sorqVma^<lUS03\4kMS29d+cuX>\sB*Q%Sh-@c)`I&c@g.!+7-OsS[gd\3iH]Xrqs!M?2#T8Ql)V!`^V9YRqUAD%l1d30rg^8n,<S911VT\-/hgTW%gZ0RWEQqD#c%?Z%>6BZ%Md)OuITs.E+qMbp;@#L$=OfLg$r_dmZ.2I-TI[-rJ7'Y'MUVj;+ma^8:Eor6B1/ir8]6k-)[NL-"(?.#qL`jr+o4:?Ne^ZSaL;c*%`_7X\[?(bcmQs<,^&m,QnRXa5F2B:,6(?Bp3\jB%_j'3k%mh7GY)AUAB6WF9A*g_/J2ob(XUIeK#@>&N6$kabCg&e)YuP#uEk)8b%_e_nW%siRSB7TQaU*PU:Z\sCT&S$Nc&L#CWXHJ:LW+l=a"+Nhl`lrBaOp',-M<(72aU=,.]VT`2@0/SVm?u>Db,,4`[5/BFg'dkA%rZCH19e^<F!4_b@WOr_^qH=75%?UEaJC*hE!j"7^De,09NJ3j3U0kMb)N;[UK0BDD0B_hJ%0(7%cALKR3<hlMs/XtYE&KFZm*BFU%`78&\"W@um^g=,kQC<"tYS!RuA_-&#`7EWr#QhEs+g/=?U4gH0PXR0Ofe&KG0d+^5a<#gLOBhtgDPr#QPPpLY;^EF3a"p5;=@!')%/Gk-*@^3da(d,/I+L9Ws(V#;9X4sN+;JWn>nhbdB=H]t45Z^j%)L<Y'f4LN*RCr"u=e,dQ?rbB!X>JutUTfMFV`e6l\0F&YNV=9M%EP:mR`:bMqn^V[9WiH>*D6.)01#QO(6c=j"maR#./;Z#[/D;,,W,p?fBHg[Q\<FLR#nh?N?(c>.MLlhR_J@e.RGgqP+l@`69SSTF%^%VW'KaCdk=lVGNcGbO;V?5b5krXY]P`eZ%KfnT?Bu2i;fr3Y%:OrF?V"QKn+7H\-Qt;,^3)9KeNX.gq,GO>fJ2'0bc]j@N5+c,:%[n6%JMD;$gCJ_+<7=fQaV@Yq1c0<"%LIL<8fGRrGlb.n0FSG0Eo?I$k[l7*thqe<ZIX^s)]".Y,rn[D5kPIIbcd1(P:\T@2:\RX\%+$\Y456#d'jn/!:r9<gnkO[reqiCaW3I]u4Df4G0nD3^Y(,V(7~>%AI9_PrivateDataEnd