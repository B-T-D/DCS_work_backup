%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 001x002.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 114 252
%%HiResBoundingBox: 0 0 113.3999 251.1001
%%CropBox: 0 0 113.3999 251.1001
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 60 128 8%%BeginData: 5980 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA8FFA82727522752275227522752275227522752275227522752275227%522752275227522752275227522752275227522752275227522752275227%52277DA827FD38FF527DA827A8FD37FF277DA827FD38FF527DA827A8FD37%FF277DCA27FD1AFFA8A8FF7EA8FD19FF5252A827A8FD11FF7DA8A8A87DFF%7DA87D7DA8A87DFF84A87DA8A8A8FD12FF277DFF27FD12FF7D7E7D53A87D%A87D7DA87D7DA8FD057DA87DFD12FF527DA852A8FD11FF7DA87D7D7DA87D%7D7DA87D7D527DA884FD047DA8FD11FF277DA827FD12FF7D7DFFA8A8FFA8%A8FFA8FFFD09A8FD12FF527DA827A8FD11FF7EFD25FF277DA827FD38FF52%7DA8275276FD3652F87DFF7652527D5276527D5276527D5276527D527652%7D5276527D5276527D2727527D5276527D5276527D5276527D5276527D52%76527D5276527D527DA8FD1DFF7D52FD3AFF5252FD3AFF7D52FD3AFF5252%FD3AFF7D52FDB3FFA8FD39FFA8FF52FFA8FFA8FD31FFA852A87DA8A8A87D%A87D7D7DFD30FF7D7D52A87D7D7DA852A8597EA8FD2FFFA87DA87DA87DA8%FFA8FFA8A8FD71FF7D7DFD3AFF5227FD3AFF5252FD3AFF7D52FD3AFF5252%A8FD38FF27F8F827A8FD37FF76F8F827FD38FFA8F8F8A1FD39FF2727FD3A%FF7D52FD1EFFFD3A52A8A827527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D277DFF27FD38FF5276A852A8FD37FF277DA827FD38FF%527DA827A8FD12FFA8A8FD07FFA8FFFFFFA8FD17FF277DA827FD13FF7DFD%09FFA8FFFFA884FD16FF527DA827A8FD0FFFA87DA8A87D7D7DA87DA87D7D%7DA853A8A87DA8A87DA87DA8FD10FF277DCA27FD10FFA852A8A8A852A87D%A87D7DA8FF7DA8A8A87DA8A87E7DA87DFD10FF5252A827A8FD0FFFFD077D%A87D7D7DA8A8FD057D59FD057DA8FD0FFF277DFF27FD14FFA87D7DA8FD20%FF527DA852FD16FFAFFD21FF277DA827FD38FF527DA827274BFD1B274BFD%1A27F87DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8FF5252FFA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FD1FFF7D52FD3AFF5252FD3AFF7D52FD3AFF5252FD3AFFA87DFDB0FF%7DA8FD31FF7DA87DA8A8FFFD08A884A8A8FFFD05A87D7DFD22FFA87D7D7E%7D7E7D7DA8847D7D7D8459A87DA8FD057DA87DA8FD22FFA8FD077DA87D7D%52FD087DA853FD047DFD22FFFD06A87D7DA8FFA8FFA8FFFD05A8FFA8A8A8%FFA8FD29FFA8A8FD05FFA8FD3AFF5252FD3AFF5227FD3AFF5252FD3AFF7D%52FD39FF7D272752FD38FF27F8F8F8A8FD37FF7DF8F852FD38FFAF27F8A8%FD39FF274BFD1FFFFD1BA87D52FFFD1BA8FFFF2752275227522752275227%522752275227522752275227522752275227522752275227522752275227%52275227522752275227522752275227277DA827A8FD37FF277DCA27FD38%FF5252A827A8FD37FF277DFF27FD38FF527DA852A8FFFFFFA8A8FFFFA8FF%FFFF84A8FFFFFFA87DFD08FFA8A9FD1BFF277DA827FD05FF7DA8FFA8A8FF%A8A87DFFFFFFA87DFD06FFA8FF7DFFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFFFFFA8FD08FF527DA827A8FD04FF7D52A87DA852527D7D7DA8A8A87D7D%527D527E527D7DA8A8FFFD047D52A87D7E7D7D527E52A87D7DA8FD047DFD%05FF277DA827FD05FF7DA87DA87D7D7EFF7DA87DA8A87D52A8A87E7DA87D%A97DFFFFFF7DA87D7DA87DA87D59A8A87DFF84527E7DA87D7DA8FD04FF52%7DA827A8FFFFFFA8A87DA87D84537D7DA87DA8FFFF7DA87DFFA8A8FFFD04%A8FFA8527DA87DFFA8A8A87D527DA8FFFD04A87DA87DFD05FF277DCA27FD%09FFA8A8A8FD12FFA97DFD07FFA8A8A8FD0EFF5252A84BFD38FF277DFF27%7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A82776A852%275227522752275227522752275227522752275227522752275227272752%275227522752275227522752275227522752275227522752275227A8FD1D%FF5252FD3AFF7627FD3AFF5252FD3AFF5227FD3AFF5252FD3BFFA8FD7FFF%A8FD09FFA8FD23FFA8A9FD0BFFA87DA8FD08FFA87DA8FD13FF84FD047DA8%7D7D7DA87D7D7DA852A87D7DA8FFA87DA87D7DFFFFA87DA87D847DA87D7D%53FD04A8FD13FF7DA8A87D7D7DA87D7DFFA87DA87DA87D7DA8FFFF7DA87D%7DFD05FFA87DA87E7DA87DA87DFD16FF7DA87D7D7DA87DA87DA8A87D52A8%7DA87DA8FFFFFD047DA8FD04FFA87DFF7D537D7D7DA8FD17FFA8FD07FFA8%FD0BFFA8FD39FFA87DFD3AFF5252FD3AFF7D52FD3AFF5252FD3AFF5227FD%39FF52F82727FD38FF27F8F827FD38FFA8F8F87DFD39FF27F8FD3AFF7D52%FD1EFF7DFD1C524BFD1C52FFFF27525276527D5276527D5276527D527652%7D5276527D5276527D5252527D5276527D5276527D5276527D5276527D52%76527D5276527D527652277DA827FD38FF277DA827FD38FF527DA827A8FD%37FF277DCA27FD38FF5252A827A8FD1DFFA8FFFFFFA8FFA8A8FD12FF277D%FF27FD0DFF7DFFFD07A8FF7DFD05A852A8FFA8A87D7EA8A8A87EA87DA8FD%0DFF527DA852A8FD0BFF7DA8A87DA87D7D84FD047DA87D7DA87D7DA8A852%A87DA8A87D7DA8527D7DA8FD0CFF277DA827FD0CFFA87DA87D7EFD057DA8%7DA8A884527D7D84FD057DA8FD077DFD0CFF527DA827A8FD0DFFA8FFA8FF%A8FFA8FFA852A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FD0DFF277D%A827FD17FFA8FD20FF527DA827FD38FF277DFF27FD3852277DA87D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D7DFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T15:09:58+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T15:09:58+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T15:09:58+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>116</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAB0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6b+jfOHmn8yfOtjb+cNR&#xA;0TT9Em0+KztLNLZkpcWEUzk+rG7fbJPXviqa/wDKrvOf/lydc/5FWX/VHFXf8qu85/8Alydc/wCR&#xA;Vl/1RxV3/KrvOf8A5cnXP+RVl/1RxV3/ACq7zn/5cnXP+RVl/wBUcVd/yq7zn/5cnXP+RVl/1RxV&#xA;3/KrvOf/AJcnXP8AkVZf9UcVd/yq7zn/AOXJ1z/kVZf9UcVd/wAqu85/+XJ1z/kVZf8AVHFXf8qu&#xA;85/+XJ1z/kVZf9UcVd/yq7zn/wCXJ1z/AJFWX/VHFXf8qu85/wDlydc/5FWX/VHFXf8AKrvOf/ly&#xA;dc/5FWX/AFRxV3/KrvOf/lydc/5FWX/VHFWF/wCJPO/+B/0d/iO6/SP+Ov8ADP6a4QfWfqf1z6vW&#xA;nD0+VN/s/hirOPIn/k1PzO/5i9I/7pcWKvQ8VdirsVWTzwQQvNPIsUMYLSSuQqqo6lmOwGKoP/EG&#xA;g+kZv0la+kJBCZPXj4iQjkErypyK7064qo6l5j020tbt4J4bu8trV7xbCOaMSvGicwQCdgw6N0xV&#xA;CSec7E6dp19aqt2l7dWtpOkUqFrZrugX1KE7qzqCvXfFUxbX9CVmVtStQySei6maOolNfgPxbN8J&#xA;267YqiIL6xnk9OC4ilkCLKUR1Y+nJuj0B+y3Y98VV8VdirsVdir55/6Uv/nWf+7rir0PyJ/5NT8z&#xA;v+YvSP8AulxYq9DxV2KuxVB6yAdIvVMTThoJF9FF5s9UI4he9elMVeb6b+XWt3ulaPeTpaW9zb2+&#xA;kQtp08TqoXTJGnZpRQ/vS7cBtRRU1PLCqa3X5a3ktxJFFdQRaet9dalbMsZE4e6s5LQW7EfCIU9a&#xA;u37KqtNq4qpj8udaSe0uorqzSa1XSrb0kjeOJ4NKlef1CByPqSM/EDoq9ziqhaflZqFnZaZaxS2t&#xA;w+mS2QF3ctcSSTQWNwZ0LIzNGjmtPgHVmNd6YqmPlDyVrui6ta3Nw1h9WhgvIJVtlkV2N3d/WlIq&#xA;AKIfhxVnOBXYq7FXYq+ef+lL/wCdZ/7uuKs5ufKn5q6X548za55Xl0J7DzDJZymPUzeeshtLSO2p&#xA;+4AXcoT1OKor/rIT/v0v+5lirv8ArIT/AL9L/uZYq7/rIT/v0v8AuZYq7/rIT/v0v+5lirv+shP+&#xA;/S/7mWKu/wCshP8Av0v+5liqS+WvNf57eYJdZjtIvK8R0TUZdKuTKNQHOaGOORmTizfBSYUrQ+2K&#xA;p1/1kJ/36X/cyxV3/WQn/fpf9zLFXf8AWQn/AH6X/cyxV3/WQn/fpf8AcyxV3/WQn/fpf9zLFXf9&#xA;ZCf9+l/3MsVSL/lVPnr/AAd9W+t6X/ib/FX+K61uPqPP6x9Z9H7PrU5bfLvir2DFXYq7FXYq7FXY&#xA;q7FXn35Ro63vn/kpXl5svWWopUfVbXcYq9BxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoCz1m2u&#xA;9T1DTo0kWbTTEJ3YAIxnTmvAgmtF67Yqj8VdirsVdirsVdirsVdirsVdirsVdiqG1RLx9Mu0slRr&#xA;xoZBbLIzRoZShCBnQFlHKlSNxiry+0/K/X7aCW2MNpeWLRXVvZW13ICYXlSCOC6uPThSOaWMRybq&#xA;oah6lmZsKpmPIfmKWGaaVoBq0Wr291Z3szeszWsVnDYu7AoKOUjabhuC9N/BVE+Xfy+n0nzIlyiq&#xA;tha3EktnIsi8hAbb6vFb8fS9QqObOwMvEsA9CxJCrPcCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsA&#xA;/KaeeW88+iWRpBH5qvEj5EnigtbUhVr0G/TFWf4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXnqz1&#xA;678n6vB5eunstcNtI2m3EYUsJ0HNF+Kq/GV4H2OKvmL/AJxX8w/mJ5h/MTUBc6vOdGiM2q65CVQL&#xA;cXcyLbpzIWoZuIban2MVfXWKuxV2KuxV2KuxV2KsC1b83bay8y6r5fs/LGva1daM0CX0+m21vLAr&#xA;XECXEYDPcRN9iQdVG9cVUf8Alb17/wCW/wDNv/SFa/8AZXirv+VvXv8A5b/zb/0hWv8A2V4q7/lb&#xA;17/5b/zb/wBIVr/2V4q7/lb17/5b/wA2/wDSFa/9leKu/wCVvXv/AJb/AM2/9IVr/wBleKu/5W9e&#xA;/wDlv/Nv/SFa/wDZXirD/IGqWvky98yXVh+X/mst5h1J79qWFqvpxsoKwAfW6cY5GkK/62Ksw/5W&#xA;9e/+W/8ANv8A0hWv/ZXirv8Alb17/wCW/wDNv/SFa/8AZXirv+VvXv8A5b/zb/0hWv8A2V4q7/lb&#xA;17/5b/zb/wBIVr/2V4q7/lb17/5b/wA2/wDSFa/9leKu/wCVvXv/AJb/AM2/9IVr/wBleKt/8rr0&#xA;H/Cn+If0Rq3/AB1v0D+iPRg+v/X/AFPS9P0/X9P7fw/3la4q15E/8mp+Z3/MXpH/AHS4sVeh4q7F&#xA;XYq7FVqSRyAmNg4BKkqQaEdRtiq7FXYqtEkZdowwMigFkBFQD0qMVXYq7FXYq7FXYq+ef+lL/wCd&#xA;Z/7uuKvQ/In/AJNT8zv+YvSP+6XFir0PFXYq7FWG+evNOtaNeWa6cgaJBHcXivC7h4PrMUUyo6mp&#xA;ZIXd6Ip405MQuzFWFXvnW70KO7TRJ7SzgudX1OS4muPSjjjZWgKmQyvEqIxmYu27VpQHcYoTTUvP&#xA;fme2eeOO8ha5jnu7drf0VJjs4LKSaHUyQfsyyolP2DzCruK4pQXmHX/MEmntJHqsU2qXvlLVb21e&#xA;0t/TniuFMEkcafHJUycZVApX93Ubg4qitW80Q6d5pm1iyvIA8mn6b9ZeaDg1zD+kXjkbqpULbzc1&#xA;O9AVb7OxVdN+YmspLdQRaxZsVk1SOGVoASq2cYmtnoJFBD1KH+enw0OKHpWjagNR0iyvxx/0uCOY&#xA;hTUAuoYgfInAlGYq7FXYq+ef+lL/AOdZ/wC7riqf2H5keR/KP5tfmLD5k1eHTZbu50p7dJQ5Lqmm&#xA;QhiOKt0JxVkn/Qwf5M/9TVaf8DL/AM0Yq7/oYP8AJn/qarT/AIGX/mjFXf8AQwf5M/8AU1Wn/Ay/&#xA;80Yq7/oYP8mf+pqtP+Bl/wCaMVS/U/zk/IXU5Umu/MtuZo43hEkUl3AxiloXjYwhCytxHwttiqMt&#xA;vz7/ACStreK2t/M1nFBAixwxKsoVUQcVUDh0AGKqn/Qwf5M/9TVaf8DL/wA0Yq7/AKGD/Jn/AKmq&#xA;0/4GX/mjFXf9DB/kz/1NVp/wMv8AzRirv+hg/wAmf+pqtP8AgZf+aMVd/wBDB/kz/wBTVaf8DL/z&#xA;Rirv+hg/yZ/6mq0/4GX/AJoxV3/Qwf5M/wDU1Wn/AAMv/NGKvLP8QaP/AIE/xH9aX9Cf8rO/SP16&#xA;jcPqn6R9X1ulePp79MVfS2KuxV2KuxV2KuxV2KvPPyh/3t/MD/wLb3/qFtMVeh4q7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FUm8ueVdP0CXWJLOSaRtb1GXVbsTFWCzzRxxssfFUolIRQGp674qnOKux&#xA;V2KuxV2KuxV2KuxV2KuxV2KsD8y+cb/T/Md5bWTWryWw0m2hWeWRVMmqXjwyB41cJyijiEnLjXia&#xA;Yql0/wCaeqx6de3Sx2EzQafqt1bhZGo8umXi2sRarfCl3yZlFfgpuxrsqs80ec5o544NREc8ui6h&#xA;9bdrBnQSrZ6ZNfSxBWZubIyrGRvXkp4jsVV5fzG8xxzQQSpptu0hmeaSSVZAkcVkbpvhgnkqUfgt&#xA;WZeSsG4jGlXRfmfqkskFstpbm5vWs/RMcivHbi5tJryVZmkkgV2jjt9qMnLl7HFW9P8AzG1y61O2&#xA;t3TT0jmmsLVo0kMsnrXls08pVkdkIjAVhStQaV74qyH8utbutb8p2eqXV3HdzXg+sF4UMaoJwJli&#xA;3Z6+msgXrt9k/EDgVkuKuxV2KuxV2KuxV2KuxVBy6NpE0rTTWNvJK7B3keJGYsoopJIrUdsVS/Vv&#xA;Jfl/UrE2Ztls0YoWktEjikIRxIE5cT8JcAkd++KpkmlaWhiKWcCm35egRGg9Pl9rhQfDXvTFWL+T&#xA;r/SfMcvmGCbRrSBPL+sXOkQARo4dI4opTJQqOJczmoGKslXRNFWN41sLYRycfUQQxhW4fY5Cm/Ht&#xA;4Yq3+hdG9f6x9Qt/rHMSet6Sc+YNQ3KleQPfFUTDDDBGsUMaxRL9mNAFUV32A2xVfirsVdirsVdi&#xA;rsVdirsVdirsVSnzb5ktfLPlvUNfu7e4urXTYTcXENoqvMY1+2VV2jX4V+I1YbDFXiH5D/nb5Z1n&#xA;zhr+gWVhqJu/MutXmsWkrRwCKG2NrEP9IYTFlatuR8KsNxvvir6FxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxVSvLS2vLSezuoxLbXMbQzxN0aN1Ksp9iDTFXgv/ONX5QXPk7zL5x1HUIz6ttdvo+lyuKF&#xA;7ZCJmmAI6Sq0VKeBxV7/AIq7FXYq7FXYq7FXYq8YsPy48keb/wA2fzFm8y6TDqclncaUls0pcFFf&#xA;TImYDiy9SMVZJ/0L5+TP/Uq2n/BS/wDNeKu/6F8/Jn/qVbT/AIKX/mvFXf8AQvn5M/8AUq2n/BS/&#xA;814q7/oXz8mf+pVtP+Cl/wCa8Vd/0L5+TP8A1Ktp/wAFL/zXirv+hfPyZ/6lW0/4KX/mvFXf9C+f&#xA;kz/1Ktp/wUv/ADXirv8AoXz8mf8AqVbT/gpf+a8Vd/0L5+TP/Uq2n/BS/wDNeKu/6F8/Jn/qVbT/&#xA;AIKX/mvFXf8AQvn5M/8AUq2n/BS/814q7/oXz8mf+pVtP+Cl/wCa8Vd/0L5+TP8A1Ktp/wAFL/zX&#xA;iry79BaT/gP/AA39XH6D/wCVm/o36hVvT+p/pH0/R6148NuuKvUfIn/k1PzO/wCYvSP+6XFirJ/O&#xA;es3ui6E2pWnpcobi1WZZY3lBhmuI4pAqxsjc+MhK9d+xxVBT/mFoccsEplMWn+lqEt5PNBcIY/0b&#xA;UTrQpsycGJVtyN1riqBu/wAxoZL7SH0wPJp0uoT6bq0Mtlc/WRKljcXSCDdPiVrajjg1QwNQNyqm&#xA;3mLzJJD5JuPMehywzr9VS9s5Zkd4pIWCyV4q0TfHGfh32O9D0xVRvfzJ8n2Ml2tzeOq2Pr+vIkE0&#xA;qj6qyrcU9JHJ9Ev8e22/8rUVX3f5ieVLS4lt5rmRZIC4nrbzgIsbKjuWZACgaQDktR1/laiqJ0XW&#xA;bx/L9xqGq8JJ7Oa/Sc2kTgMlnczRKUiLTPyKRDbkanpiqDX8yPLBtoLjlchLj6sYVa0uFdkvX9O3&#xA;kCFA3B5PgBp9ogftLVVVP5geV1ektxJDECUe4lgmjiSVYPrLQuzoOMqw/EUO4+z9rbFULH+Z/laW&#xA;MSJ9cZTOLXayuiROYDcrHQR1q0NHHiCPHFUVfef/ACzYjUDPNLXS7aS9ugsExPoQv6czp8Px+k20&#xA;nHde+Kq1t518vXN/FYRTSC5lmNsqvBOgE3om4VGZkCqXhUulT8Q6dRiqeYq+ef8ApS/+dZ/7uuKv&#xA;Q/In/k1PzO/5i9I/7pcWKsy1/RIda01rCaeW3jaSKX1IOAcNDIsqU9RJF+2gPTFWOar+XPq2F0tl&#xA;qVw9441B4EuTCIDLqSFZuZihDhasSKdPfphVD+XPy+1K1WCO+v2t7bS7xr3RYbRbRXjeW3e3k9cx&#xA;2sET/DM4X93Xf4iTTiFTNPy38tx+XP0JHGU/0SPTzqapAL420SqiRtMIt6Rxqm46Dx3xVXsPIukW&#xA;c16RLNNbag9zLc2Uvpekz3m9w1UjSQ+oxZuJcqCxoBtRVDw/lzosCaeLa4uYZrC2Nk1yGieW4hd/&#xA;Ub1mljk+NpKvzTi1SaHfFUyttDl0/Rb+ytJ3vJrhrqeI3bIg9a6ZpGUtDEOKGVyfsMRX5DFWPaT+&#xA;WzHQ9Nh1i/uP0pZw2ETSW8sUkafo2UTwpEXt4+SesiSEunI8QCSK1VRusfl/aXhvJ4LmblNJNeW+&#xA;nysps1v5LdoBO3FPX6NUqJONdwK4qlvlb8u9RsAkF7eejp9hdw32lW9qtqriZInhl9Z4rW3R42Rg&#xA;E+DkB1PQKqjdQ/Kzy/ezXsslzextfQ31tPwlSph1Pj9ZjLMjM4PpjjzLcNgtAqgKoqDyDZRXsd4d&#xA;SvZZY7qC9o5t+LS29ubVQQsK/C0R4sB8xQ4qyfFXzz/0pf8AzrP/AHdcVeiav+VGo3HmnV/MOkeb&#xA;tT0KXW2ge9tbRLZoy1tAluhBljdvsx+OKqX/ACq7zn/5cnXP+RVl/wBUcVd/yq7zn/5cnXP+RVl/&#xA;1RxV3/KrvOf/AJcnXP8AkVZf9UcVd/yq7zn/AOXJ1z/kVZf9UcVd/wAqu85/+XJ1z/kVZf8AVHFX&#xA;f8qu85/+XJ1z/kVZf9UcVYx5J8s+ffMFx5ljuPzD1iEaHrU+kwGOOzPOOGGGQO9YftEzHpirJ/8A&#xA;lV3nP/y5Ouf8irL/AKo4q7/lV3nP/wAuTrn/ACKsv+qOKu/5Vd5z/wDLk65/yKsv+qOKu/5Vd5z/&#xA;APLk65/yKsv+qOKu/wCVXec//Lk65/yKsv8Aqjirv+VXec//AC5Ouf8AIqy/6o4q1/ypW0/wh+gf&#xA;09f/AFz9M/4h/TVIPrP171fV58eHp/b36dfuxV6RirsVdirsVdirsVdirDfy58v6vo915wfUbf0F&#xA;1XzDdahYHmj+pbS29uiSfAzcatEw4tQ7dMVZlirsVdirsVdirsVdirsVdiqB1TW9J0qNZNRuktlc&#xA;MV5ncrGvKRqCp4ovxM3RRucVQjec/KiySRtqtsrxGZZQZAOJtlV5+VenprIpavQEeOKr082eXHMY&#xA;F/GGldo1Rqq4ZSqnmrAMlGkUVYDdl8RiqDuvzA8pW+nzXw1BJ4obae84w1d2htpvq8rIoG9Jvg+e&#xA;Ko9PMuiNcwWpu0W7uAvCAn4gZAxRW7KX4NxB+1Q0rTFVS81/RrK9jsrq7jiupeHGJjuPUbhGW7Lz&#xA;ccV5U5HYb4q1o/mDRdZSR9LvI7tYjSQxmvEksu/0ow+jFUotvPNsjTSazC2kWiOkUE10JE9SWWae&#xA;NUHJFFeNvXYn7XhxZlUbF518qSlRHqkD8pJYVo1QZIIBcyr/ALCE8z7Yqpp5x0u/0qW90CWPVnT6&#xA;vxhiZqstyyiNtlJCsrEhiOOxqQASFUx0a9ub7TILu5tzazTAsYCWNF5EKfiVG+JaNRlBFdwDiqNx&#xA;V2KuxV2Ksf8AMXlKPWL+C9E0cUsdtPZOJreO5UwXLxPJwWT4Vf8AcgVYMtDup2xVJZPy1uZp7+4n&#xA;1SNptVhiTUeNoFR5LSb1LVkT1SESNAkTJvzUbmtCCqPsvI01prEmqw30UdxeJFHqQjs4kWRYJnmT&#xA;0lBpGT6nBmfmxULuCAcCpYn5X3YW8jk1tpbee0ltLWJrZf3PrXYu2csHBk5ts4NOQp07m1Tiy8lL&#xA;ba1JqL3a3KzzRXdyJ7eKSd7iG2S2UrM1fTSkQfiiAhq0ahIwKgrzyxZ65qeq3Gna1E0Mt1arqttE&#xA;FnaO702kkUDOkimNeRjaSKnIjuvLFU+8raLNomh2+mTXIvJIOZa5EfpczI7OWZOUnxEsa74qt1/Q&#xA;7nVLjSZI7tbeHTrxL2WJovV9b01KqleacPtk1od6HtQqpBf/AJealPrE9/a64beGWS7nS1e2WThN&#xA;eWwtjJ6gkRi0ar8HsaYVTTyp5Vn0OW4ea8S6EtvZ2sKpB6AjjsojEB/eSVDVLU7VOBWRYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXnn5Q/72/mB/4Ft7/wBQtpir0PFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUj8&#xA;9eWI/NPk/V/L7v6Z1G2khilqRwlpWJ6ip+GQK2Kvlb/nEjyRqF3+Yup6xqKSJH5ZR4pInJ2vp+UI&#xA;VlJ3KIklfA09sVfYuKuxV2KuxV2KuxV2KvM7nzX+amqeePM2heVodCSw8vSWcRl1P6560jXdolzX&#xA;9wStAXI6DFUT/wBZCf8Afpf9zLFXf9ZCf9+l/wBzLFXf9ZCf9+l/3MsVd/1kJ/36X/cyxV3/AFkJ&#xA;/wB+l/3MsVd/1kJ/36X/AHMsVSjQPKv51aDNqs2mw+Uon1m9k1K+P+5I8riVVVyNuh4Vp4k+OKpv&#xA;/wBZCf8Afpf9zLFXf9ZCf9+l/wBzLFXf9ZCf9+l/3MsVd/1kJ/36X/cyxV3/AFkJ/wB+l/3MsVd/&#xA;1kJ/36X/AHMsVSP/AJWt53/wb9Y+p6Z/if8AxT/hT/j4+oep9Z+r+tSvrca+/vTtiqeeRP8Ayan5&#xA;nf8AMXpH/dLixV6HirsVdirsVdirsVWvLGjIruFaQ8YwSAWYAtRfE8VJxV0sscUbyyuI4owWd2IC&#xA;qoFSST0AxVTS8tZLqW0SVWuYFSSaEEFkWUsELDty4NT5YqrYq7FXYq7FXzz/ANKX/wA6z/3dcVeh&#xA;+RP/ACan5nf8xekf90uLFXoeKuxVjfm221iW601rVbuTTU+sfXotPmWG49Ro6W7gs0fJVbl8PKnI&#xA;qSCAaKsRu9J/MGV7iNotTe4aXUWuLiK+WKKSzlhkFhDbhZ4ljnSUw1dUT7DktRviKq1nY+e4723m&#xA;mtNVEMVzYPJ6l9blPSa2ZL8soujyUSUND0O6DFUl0u081a15UWfQrvU5kSwvA90dTZ2ubyG5RrNY&#xA;HMzsDxjdXLMgINH5V2VTZNK803er2+oT6XqQS2124uLWGe+I4W1zZcY3PC4akSTn4oxXiCVVStRi&#xA;qlqWhef7201y3uba8uIL6L1YYBeKvCa3upH4RMJl/voTGqhVjQ0+IKRuoTDUbDzgdRDW1nqUelE6&#xA;bLfQrf8AOSRIUnWeK2Y3Pqo4LW5l+z6nB92JqylKU0X8yIw8xttWkmWDlZoNSj4qV1EyW8Uytdqr&#xA;ypZEJK3Hi9DUudyq9aUllBKlSRUqaVHsaEjAreKuxV88/wDSl/8AOs/93XFWVxa5rXlP8y/PF3L5&#xA;T1zV7LWptOlsbvS7eGaIrb6fFDJVpZodw4I2HbFU4/5W9e/+W/8ANv8A0hWv/ZXirv8Alb17/wCW&#xA;/wDNv/SFa/8AZXirv+VvXv8A5b/zb/0hWv8A2V4q7/lb17/5b/zb/wBIVr/2V4q4/m7eEUP5febC&#xA;D/y5Wv8A2V4qsi/NieFOEX5d+a4068UsbRR9wusVX/8AK3r3/wAt/wCbf+kK1/7K8Vd/yt69/wDL&#xA;f+bf+kK1/wCyvFXf8revf/Lf+bf+kK1/7K8Vd/yt69/8t/5t/wCkK1/7K8Vd/wArevf/AC3/AJt/&#xA;6QrX/srxV3/K3r3/AMt/5t/6QrX/ALK8Vd/yt69/8t/5t/6QrX/srxVgv6F81/4H/Sv+HdR9f/Hv&#xA;+JP0P6afX/qH176xX0ufHnx2pzpXvTfFX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:C69C53CE2A2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:C69C53CE2A2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C69C53CE2A2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T15:09:58+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -251.1 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 251.1 li
113.4 251.1 li
113.4 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
clp
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
2.63184 149.928 mo
111.532 149.928 li
111.532 175.128 li
2.63184 175.128 li
2.63184 149.928 li
cp
f
gsave
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.63184 149.928 mo
111.532 149.928 li
111.532 175.128 li
2.63184 175.128 li
2.63184 149.928 li
cp
.746 .676 .668 .898 cmyk
@
grestore
18.7256 167.479 mo
18.7256 167.144 li
18.1641 167.144 17.894 167.144 17.8833 166.819 cv
17.8833 164.757 li
17.8833 163.828 17.8833 163.493 17.5483 163.104 cv
17.3975 162.921 17.041 162.705 16.4146 162.705 cv
15.5073 162.705 15.0322 163.353 14.8594 163.741 cv
14.8486 163.741 li
14.8486 159.983 li
13.2935 160.102 li
13.2935 160.437 li
14.0493 160.437 14.1357 160.512 14.1357 161.042 cv
14.1357 166.657 li
14.1357 167.144 14.0171 167.144 13.2935 167.144 cv
13.2935 167.479 li
14.5137 167.446 li
15.7231 167.479 li
15.7231 167.144 li
14.9995 167.144 14.8809 167.144 14.8809 166.657 cv
14.8809 164.67 li
14.8809 163.547 15.6479 162.942 16.3389 162.942 cv
17.0195 162.942 17.1382 163.525 17.1382 164.141 cv
17.1382 166.657 li
17.1382 167.144 17.0195 167.144 16.2959 167.144 cv
16.2959 167.479 li
17.5161 167.446 li
18.7256 167.479 li
cp
0 0 0 1 cmyk
f
21.6201 167.479 mo
21.6201 167.144 li
20.9072 167.144 20.8643 167.089 20.8643 166.668 cv
20.8643 162.705 li
19.3521 162.823 li
19.3521 163.158 li
20.0542 163.158 20.1514 163.223 20.1514 163.752 cv
20.1514 166.657 li
20.1514 167.144 20.0327 167.144 19.3091 167.144 cv
19.3091 167.479 li
20.4971 167.446 li
20.875 167.446 21.2529 167.467 21.6201 167.479 cv
cp
21.0259 160.955 mo
21.0259 160.664 20.7778 160.383 20.4536 160.383 cv
20.0864 160.383 19.8706 160.685 19.8706 160.955 cv
19.8706 161.247 20.1191 161.527 20.4429 161.527 cv
20.8101 161.527 21.0259 161.225 21.0259 160.955 cv
cp
f
27.1929 163.115 mo
27.1929 162.932 27.0635 162.586 26.6421 162.586 cv
26.4263 162.586 25.9507 162.651 25.4976 163.094 cv
25.0435 162.737 24.5903 162.705 24.3525 162.705 cv
23.3481 162.705 22.603 163.45 22.603 164.281 cv
22.603 164.757 22.8403 165.167 23.1104 165.394 cv
22.9702 165.556 22.7759 165.912 22.7759 166.29 cv
22.7759 166.625 22.916 167.036 23.251 167.251 cv
22.603 167.435 22.2573 167.899 22.2573 168.332 cv
22.2573 169.109 23.3267 169.703 24.644 169.703 cv
25.9185 169.703 27.0415 169.152 27.0415 168.31 cv
27.0415 167.932 26.8906 167.381 26.3398 167.079 cv
25.7671 166.776 25.1411 166.776 24.4819 166.776 cv
24.2119 166.776 23.7476 166.776 23.6724 166.766 cv
23.3267 166.722 23.0996 166.388 23.0996 166.042 cv
23.0996 165.999 23.0996 165.75 23.2832 165.534 cv
23.7046 165.837 24.1475 165.869 24.3525 165.869 cv
25.3569 165.869 26.1021 165.124 26.1021 164.292 cv
26.1021 163.893 25.9292 163.493 25.6592 163.245 cv
26.0483 162.877 26.437 162.823 26.6313 162.823 cv
26.6313 162.823 26.707 162.823 26.7393 162.834 cv
26.6206 162.877 26.5664 162.996 26.5664 163.126 cv
26.5664 163.31 26.707 163.439 26.8799 163.439 cv
26.9878 163.439 27.1929 163.363 27.1929 163.115 cv
cp
25.292 164.281 mo
25.292 164.573 25.2813 164.919 25.1191 165.188 cv
25.0327 165.318 24.7847 165.621 24.3525 165.621 cv
23.4131 165.621 23.4131 164.541 23.4131 164.292 cv
23.4131 164 23.4238 163.655 23.5859 163.385 cv
23.6724 163.255 23.9204 162.953 24.3525 162.953 cv
25.292 162.953 25.292 164.033 25.292 164.281 cv
cp
26.48 168.332 mo
26.48 168.915 25.7134 169.455 24.6548 169.455 cv
23.564 169.455 22.8188 168.904 22.8188 168.332 cv
22.8188 167.834 23.2295 167.435 23.7046 167.403 cv
24.3418 167.403 li
25.2705 167.403 26.48 167.403 26.48 168.332 cv
cp
f
33.1328 167.479 mo
33.1328 167.144 li
32.5713 167.144 32.3013 167.144 32.2905 166.819 cv
32.2905 164.757 li
32.2905 163.828 32.2905 163.493 31.9556 163.104 cv
31.8047 162.921 31.4482 162.705 30.8218 162.705 cv
29.9146 162.705 29.4395 163.353 29.2666 163.741 cv
29.2559 163.741 li
29.2559 159.983 li
27.7007 160.102 li
27.7007 160.437 li
28.4565 160.437 28.543 160.512 28.543 161.042 cv
28.543 166.657 li
28.543 167.144 28.4243 167.144 27.7007 167.144 cv
27.7007 167.479 li
28.9209 167.446 li
30.1304 167.479 li
30.1304 167.144 li
29.4067 167.144 29.2881 167.144 29.2881 166.657 cv
29.2881 164.67 li
29.2881 163.547 30.0552 162.942 30.7461 162.942 cv
31.4263 162.942 31.5454 163.525 31.5454 164.141 cv
31.5454 166.657 li
31.5454 167.144 31.4263 167.144 30.7031 167.144 cv
30.7031 167.479 li
31.9233 167.446 li
33.1328 167.479 li
cp
f
36.3403 165.458 mo
36.3403 164.832 li
33.4785 164.832 li
33.4785 165.458 li
36.3403 165.458 li
cp
f
39.71 167.479 mo
39.71 167.144 li
38.9863 167.144 38.8677 167.144 38.8677 166.657 cv
38.8677 159.983 li
37.3125 160.102 li
37.3125 160.437 li
38.0684 160.437 38.1548 160.512 38.1548 161.042 cv
38.1548 166.657 li
38.1548 167.144 38.0361 167.144 37.3125 167.144 cv
37.3125 167.479 li
38.5112 167.446 li
39.71 167.479 li
cp
f
44.4404 166.193 mo
44.4404 166.085 44.354 166.063 44.3003 166.063 cv
44.2031 166.063 44.1812 166.128 44.1597 166.215 cv
43.7817 167.327 42.8096 167.327 42.7017 167.327 cv
42.1616 167.327 41.7295 167.003 41.4814 166.604 cv
41.1572 166.085 41.1572 165.372 41.1572 164.983 cv
44.1704 164.983 li
44.4082 164.983 44.4404 164.983 44.4404 164.757 cv
44.4404 163.688 43.8574 162.64 42.5073 162.64 cv
41.2544 162.64 40.2607 163.752 40.2607 165.103 cv
40.2607 166.549 41.395 167.597 42.6367 167.597 cv
43.9546 167.597 44.4404 166.398 44.4404 166.193 cv
cp
43.7275 164.757 mo
41.168 164.757 li
41.2329 163.147 42.1401 162.877 42.5073 162.877 cv
43.6196 162.877 43.7275 164.335 43.7275 164.757 cv
cp
f
50.2402 163.158 mo
50.2402 162.823 li
49.9917 162.845 49.6787 162.856 49.4302 162.856 cv
48.4907 162.823 li
48.4907 163.158 li
48.8901 163.169 49.0088 163.417 49.0088 163.623 cv
49.0088 163.72 48.9873 163.763 48.9443 163.882 cv
47.8423 166.636 li
46.6328 163.623 li
46.5679 163.482 46.5679 163.439 46.5679 163.439 cv
46.5679 163.158 46.9893 163.158 47.1836 163.158 cv
47.1836 162.823 li
46.0063 162.856 li
45.7148 162.856 45.2827 162.845 44.959 162.823 cv
44.959 163.158 li
45.6392 163.158 45.6826 163.223 45.8228 163.558 cv
47.3779 167.392 li
47.4429 167.543 47.4644 167.597 47.605 167.597 cv
47.7451 167.597 47.7886 167.5 47.8315 167.392 cv
49.2466 163.882 li
49.3438 163.633 49.5273 163.169 50.2402 163.158 cv
cp
f
54.6465 166.193 mo
54.6465 166.085 54.5601 166.063 54.5063 166.063 cv
54.4087 166.063 54.3872 166.128 54.3657 166.215 cv
53.9878 167.327 53.0156 167.327 52.9077 167.327 cv
52.3677 167.327 51.9355 167.003 51.6875 166.604 cv
51.3633 166.085 51.3633 165.372 51.3633 164.983 cv
54.3765 164.983 li
54.6143 164.983 54.6465 164.983 54.6465 164.757 cv
54.6465 163.688 54.0635 162.64 52.7134 162.64 cv
51.4604 162.64 50.4668 163.752 50.4668 165.103 cv
50.4668 166.549 51.6011 167.597 52.8428 167.597 cv
54.1606 167.597 54.6465 166.398 54.6465 166.193 cv
cp
53.9336 164.757 mo
51.374 164.757 li
51.439 163.147 52.3462 162.877 52.7134 162.877 cv
53.8257 162.877 53.9336 164.335 53.9336 164.757 cv
cp
f
57.7139 167.479 mo
57.7139 167.144 li
56.9902 167.144 56.8711 167.144 56.8711 166.657 cv
56.8711 159.983 li
55.3159 160.102 li
55.3159 160.437 li
56.0723 160.437 56.1587 160.512 56.1587 161.042 cv
56.1587 166.657 li
56.1587 167.144 56.0396 167.144 55.3159 167.144 cv
55.3159 167.479 li
56.5151 167.446 li
57.7139 167.479 li
cp
f
67.1851 165.146 mo
67.1851 163.774 66.1382 162.705 64.9282 162.705 cv
64.0859 162.705 63.6323 163.18 63.416 163.417 cv
63.416 162.705 li
61.8608 162.823 li
61.8608 163.158 li
62.6279 163.158 62.7031 163.223 62.7031 163.698 cv
62.7031 168.753 li
62.7031 169.239 62.5845 169.239 61.8608 169.239 cv
61.8608 169.573 li
63.0703 169.541 li
64.291 169.573 li
64.291 169.239 li
63.5674 169.239 63.4487 169.239 63.4487 168.753 cv
63.4487 166.938 li
63.4487 166.841 li
63.5024 167.014 63.9561 167.597 64.7769 167.597 cv
66.062 167.597 67.1851 166.539 67.1851 165.146 cv
cp
66.2886 165.146 mo
66.2886 166.452 65.5327 167.359 64.7339 167.359 cv
64.3018 167.359 63.8911 167.144 63.5996 166.701 cv
63.4487 166.474 63.4487 166.463 63.4487 166.247 cv
63.4487 163.839 li
63.7617 163.288 64.291 162.975 64.8413 162.975 cv
65.6304 162.975 66.2886 163.925 66.2886 165.146 cv
cp
f
71.4946 163.363 mo
71.4946 163.018 71.1597 162.705 70.6948 162.705 cv
69.9067 162.705 69.5181 163.428 69.3667 163.893 cv
69.3667 162.705 li
67.8657 162.823 li
67.8657 163.158 li
68.6216 163.158 68.7085 163.234 68.7085 163.763 cv
68.7085 166.657 li
68.7085 167.144 68.5894 167.144 67.8657 167.144 cv
67.8657 167.479 li
69.0972 167.446 li
69.5288 167.446 70.0366 167.446 70.4683 167.479 cv
70.4683 167.144 li
70.2417 167.144 li
69.4429 167.144 69.4214 167.024 69.4214 166.636 cv
69.4214 164.973 li
69.4214 163.903 69.8745 162.942 70.6948 162.942 cv
70.771 162.942 70.7925 162.942 70.814 162.953 cv
70.7817 162.964 70.5659 163.094 70.5659 163.374 cv
70.5659 163.677 70.7925 163.839 71.0298 163.839 cv
71.2241 163.839 71.4946 163.709 71.4946 163.363 cv
cp
f
76.8833 165.167 mo
76.8833 163.785 75.8042 162.64 74.4966 162.64 cv
73.147 162.64 72.0991 163.817 72.0991 165.167 cv
72.0991 166.561 73.2222 167.597 74.4858 167.597 cv
75.7925 167.597 76.8833 166.539 76.8833 165.167 cv
cp
75.9878 165.081 mo
75.9878 165.47 75.9878 166.053 75.7495 166.528 cv
75.5122 167.014 75.0366 167.327 74.4966 167.327 cv
74.0327 167.327 73.5571 167.1 73.2661 166.604 cv
72.9956 166.128 72.9956 165.47 72.9956 165.081 cv
72.9956 164.66 72.9956 164.076 73.2554 163.601 cv
73.5464 163.104 74.0542 162.877 74.4858 162.877 cv
74.9614 162.877 75.4253 163.115 75.7065 163.58 cv
75.9878 164.044 75.9878 164.67 75.9878 165.081 cv
cp
f
82.4351 163.115 mo
82.4351 162.932 82.3052 162.586 81.8843 162.586 cv
81.6685 162.586 81.1929 162.651 80.7397 163.094 cv
80.2856 162.737 79.8325 162.705 79.5942 162.705 cv
78.5903 162.705 77.8452 163.45 77.8452 164.281 cv
77.8452 164.757 78.0825 165.167 78.3521 165.394 cv
78.2124 165.556 78.0181 165.912 78.0181 166.29 cv
78.0181 166.625 78.1577 167.036 78.4927 167.251 cv
77.8452 167.435 77.4995 167.899 77.4995 168.332 cv
77.4995 169.109 78.5688 169.703 79.8862 169.703 cv
81.1606 169.703 82.2837 169.152 82.2837 168.31 cv
82.2837 167.932 82.1323 167.381 81.5815 167.079 cv
81.0093 166.776 80.3833 166.776 79.7241 166.776 cv
79.4546 166.776 78.9897 166.776 78.9146 166.766 cv
78.5688 166.722 78.3413 166.388 78.3413 166.042 cv
78.3413 165.999 78.3413 165.75 78.5249 165.534 cv
78.9468 165.837 79.3892 165.869 79.5942 165.869 cv
80.5991 165.869 81.3442 165.124 81.3442 164.292 cv
81.3442 163.893 81.1714 163.493 80.9009 163.245 cv
81.2905 162.877 81.6792 162.823 81.8735 162.823 cv
81.8735 162.823 81.9487 162.823 81.981 162.834 cv
81.8628 162.877 81.8081 162.996 81.8081 163.126 cv
81.8081 163.31 81.9487 163.439 82.1216 163.439 cv
82.23 163.439 82.4351 163.363 82.4351 163.115 cv
cp
80.5337 164.281 mo
80.5337 164.573 80.5229 164.919 80.3608 165.188 cv
80.2749 165.318 80.0269 165.621 79.5942 165.621 cv
78.6548 165.621 78.6548 164.541 78.6548 164.292 cv
78.6548 164 78.6655 163.655 78.8276 163.385 cv
78.9146 163.255 79.1626 162.953 79.5942 162.953 cv
80.5337 162.953 80.5337 164.033 80.5337 164.281 cv
cp
81.7222 168.332 mo
81.7222 168.915 80.9556 169.455 79.897 169.455 cv
78.8062 169.455 78.061 168.904 78.061 168.332 cv
78.061 167.834 78.4712 167.435 78.9468 167.403 cv
79.5835 167.403 li
80.5122 167.403 81.7222 167.403 81.7222 168.332 cv
cp
f
86.5278 163.363 mo
86.5278 163.018 86.1929 162.705 85.729 162.705 cv
84.9409 162.705 84.5513 163.428 84.4009 163.893 cv
84.4009 162.705 li
82.8989 162.823 li
82.8989 163.158 li
83.6558 163.158 83.7417 163.234 83.7417 163.763 cv
83.7417 166.657 li
83.7417 167.144 83.6226 167.144 82.8989 167.144 cv
82.8989 167.479 li
84.1304 167.446 li
84.562 167.446 85.0698 167.446 85.5024 167.479 cv
85.5024 167.144 li
85.2749 167.144 li
84.4761 167.144 84.4546 167.024 84.4546 166.636 cv
84.4546 164.973 li
84.4546 163.903 84.9077 162.942 85.729 162.942 cv
85.8042 162.942 85.8257 162.942 85.8481 162.953 cv
85.8149 162.964 85.5991 163.094 85.5991 163.374 cv
85.5991 163.677 85.8257 163.839 86.064 163.839 cv
86.2583 163.839 86.5278 163.709 86.5278 163.363 cv
cp
f
92.0474 166.517 mo
92.0474 165.912 li
91.7769 165.912 li
91.7769 166.517 li
91.7769 167.144 91.5073 167.208 91.3882 167.208 cv
91.0317 167.208 90.9888 166.722 90.9888 166.668 cv
90.9888 164.508 li
90.9888 164.055 90.9888 163.633 90.6001 163.234 cv
90.1782 162.813 89.6382 162.64 89.1206 162.64 cv
88.2349 162.64 87.4897 163.147 87.4897 163.86 cv
87.4897 164.184 87.7056 164.368 87.9858 164.368 cv
88.2886 164.368 88.4829 164.152 88.4829 163.871 cv
88.4829 163.741 88.4292 163.385 87.9321 163.374 cv
88.2241 162.996 88.7534 162.877 89.0981 162.877 cv
89.6274 162.877 90.2437 163.299 90.2437 164.26 cv
90.2437 164.66 li
89.6929 164.692 88.937 164.724 88.2563 165.048 cv
87.4458 165.416 87.1763 165.977 87.1763 166.452 cv
87.1763 167.319 88.2241 167.586 88.9038 167.586 cv
89.6167 167.586 90.1138 167.159 90.3188 166.657 cv
90.3618 167.089 90.6538 167.543 91.1616 167.543 cv
91.3882 167.543 92.0474 167.392 92.0474 166.517 cv
cp
90.2437 165.966 mo
90.2437 166.984 89.4653 167.349 88.98 167.349 cv
88.4507 167.349 88.0073 166.975 88.0073 166.441 cv
88.0073 165.848 88.4614 164.951 90.2437 164.886 cv
90.2437 165.966 li
cp
f
101.011 167.479 mo
101.011 167.144 li
100.45 167.144 100.179 167.144 100.168 166.819 cv
100.168 164.757 li
100.168 163.828 100.168 163.493 99.8335 163.104 cv
99.6821 162.921 99.3257 162.705 98.6997 162.705 cv
97.7925 162.705 97.3169 163.353 97.1333 163.763 cv
96.9829 162.823 96.1831 162.705 95.6978 162.705 cv
94.9087 162.705 94.4009 163.169 94.0991 163.839 cv
94.0991 162.705 li
92.5757 162.823 li
92.5757 163.158 li
93.3325 163.158 93.4185 163.234 93.4185 163.763 cv
93.4185 166.657 li
93.4185 167.144 93.2993 167.144 92.5757 167.144 cv
92.5757 167.479 li
93.7964 167.446 li
95.0063 167.479 li
95.0063 167.144 li
94.2827 167.144 94.1636 167.144 94.1636 166.657 cv
94.1636 164.67 li
94.1636 163.547 94.9302 162.942 95.6216 162.942 cv
96.3022 162.942 96.4214 163.525 96.4214 164.141 cv
96.4214 166.657 li
96.4214 167.144 96.3022 167.144 95.5786 167.144 cv
95.5786 167.479 li
96.7993 167.446 li
98.0083 167.479 li
98.0083 167.144 li
97.2847 167.144 97.1665 167.144 97.1665 166.657 cv
97.1665 164.67 li
97.1665 163.547 97.9331 162.942 98.6245 162.942 cv
99.3042 162.942 99.4233 163.525 99.4233 164.141 cv
99.4233 166.657 li
99.4233 167.144 99.3042 167.144 98.5806 167.144 cv
98.5806 167.479 li
99.8013 167.446 li
101.011 167.479 li
cp
f
2.63184 76.1445 mo
111.532 76.1445 li
111.532 101.345 li
2.63184 101.345 li
2.63184 76.1445 li
cp
0 0 0 0 cmyk
f
gsave
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.63184 76.1445 mo
111.532 76.1445 li
111.532 101.345 li
2.63184 101.345 li
2.63184 76.1445 li
cp
.746 .676 .668 .898 cmyk
@
grestore
39.478 92.7329 mo
39.478 92.1279 li
39.208 92.1279 li
39.208 92.7329 li
39.208 93.3594 38.938 93.4243 38.8193 93.4243 cv
38.4629 93.4243 38.4199 92.938 38.4199 92.8843 cv
38.4199 90.7241 li
38.4199 90.2705 38.4199 89.8491 38.0308 89.4497 cv
37.6099 89.0283 37.0698 88.8555 36.5513 88.8555 cv
35.6655 88.8555 34.9204 89.3633 34.9204 90.0762 cv
34.9204 90.4004 35.1367 90.584 35.4175 90.584 cv
35.7197 90.584 35.9141 90.3677 35.9141 90.0869 cv
35.9141 89.9575 35.8599 89.6011 35.3633 89.5898 cv
35.6548 89.2119 36.1841 89.0933 36.5298 89.0933 cv
37.0591 89.0933 37.6743 89.5146 37.6743 90.4756 cv
37.6743 90.8755 li
37.1235 90.9077 36.3677 90.9399 35.6875 91.2642 cv
34.8774 91.6313 34.6074 92.1929 34.6074 92.668 cv
34.6074 93.5347 35.6548 93.8022 36.3354 93.8022 cv
37.0483 93.8022 37.5449 93.375 37.75 92.873 cv
37.7935 93.3052 38.085 93.7588 38.5923 93.7588 cv
38.8193 93.7588 39.478 93.6079 39.478 92.7329 cv
cp
37.6743 92.1821 mo
37.6743 93.2002 36.897 93.5645 36.4106 93.5645 cv
35.8818 93.5645 35.439 93.1909 35.439 92.6572 cv
35.439 92.0635 35.8926 91.167 37.6743 91.1021 cv
37.6743 92.1821 li
cp
0 0 0 1 cmyk
f
42.4155 93.6943 mo
42.4155 93.3594 li
41.6919 93.3594 41.5732 93.3594 41.5732 92.873 cv
41.5732 86.1987 li
40.0181 86.3179 li
40.0181 86.6523 li
40.7739 86.6523 40.8604 86.728 40.8604 87.2573 cv
40.8604 92.873 li
40.8604 93.3594 40.7417 93.3594 40.0181 93.3594 cv
40.0181 93.6943 li
41.2168 93.6616 li
42.4155 93.6943 li
cp
f
47.9019 89.3311 mo
47.9019 89.1475 47.7725 88.8018 47.3511 88.8018 cv
47.1353 88.8018 46.6602 88.8667 46.2065 89.3096 cv
45.7529 88.9531 45.2993 88.9204 45.0615 88.9204 cv
44.0571 88.9204 43.312 89.6655 43.312 90.4971 cv
43.312 90.9727 43.5498 91.3828 43.8198 91.6099 cv
43.6792 91.7715 43.4849 92.1279 43.4849 92.5059 cv
43.4849 92.8408 43.6255 93.2515 43.96 93.4673 cv
43.312 93.6509 42.9663 94.1152 42.9663 94.5474 cv
42.9663 95.3252 44.0356 95.9189 45.3535 95.9189 cv
46.6274 95.9189 47.751 95.3682 47.751 94.5259 cv
47.751 94.1475 47.5996 93.5967 47.0488 93.2944 cv
46.4766 92.9922 45.8501 92.9922 45.1914 92.9922 cv
44.9214 92.9922 44.457 92.9922 44.3813 92.9814 cv
44.0356 92.938 43.8091 92.6035 43.8091 92.2578 cv
43.8091 92.2144 43.8091 91.9663 43.9927 91.75 cv
44.4136 92.0527 44.8564 92.085 45.0615 92.085 cv
46.0659 92.085 46.8115 91.3398 46.8115 90.5083 cv
46.8115 90.1084 46.6387 89.709 46.3687 89.4604 cv
46.7573 89.0933 47.146 89.0391 47.3403 89.0391 cv
47.3403 89.0391 47.416 89.0391 47.4487 89.0503 cv
47.3296 89.0933 47.2759 89.2119 47.2759 89.3418 cv
47.2759 89.5254 47.416 89.6548 47.5889 89.6548 cv
47.6968 89.6548 47.9019 89.5791 47.9019 89.3311 cv
cp
46.0015 90.4971 mo
46.0015 90.7891 45.9907 91.1348 45.8286 91.4043 cv
45.7422 91.5342 45.4937 91.8364 45.0615 91.8364 cv
44.1221 91.8364 44.1221 90.7563 44.1221 90.5083 cv
44.1221 90.2168 44.1328 89.8711 44.2949 89.6011 cv
44.3813 89.4712 44.6299 89.1689 45.0615 89.1689 cv
46.0015 89.1689 46.0015 90.249 46.0015 90.4971 cv
cp
47.1895 94.5474 mo
47.1895 95.1304 46.4224 95.6704 45.3643 95.6704 cv
44.2734 95.6704 43.5283 95.1196 43.5283 94.5474 cv
43.5283 94.0508 43.9385 93.6509 44.4136 93.6187 cv
45.0508 93.6187 li
45.9795 93.6187 47.1895 93.6187 47.1895 94.5474 cv
cp
f
53.1509 91.3828 mo
53.1509 90.0005 52.0708 88.8555 50.7642 88.8555 cv
49.4141 88.8555 48.3667 90.0327 48.3667 91.3828 cv
48.3667 92.7764 49.4897 93.813 50.7534 93.813 cv
52.0601 93.813 53.1509 92.7544 53.1509 91.3828 cv
cp
52.2544 91.2964 mo
52.2544 91.6855 52.2544 92.2686 52.0171 92.7437 cv
51.7793 93.2295 51.3042 93.543 50.7642 93.543 cv
50.2998 93.543 49.8247 93.3159 49.5327 92.8193 cv
49.2627 92.3442 49.2627 91.6855 49.2627 91.2964 cv
49.2627 90.8755 49.2627 90.292 49.522 89.8169 cv
49.8135 89.3203 50.3213 89.0933 50.7534 89.0933 cv
51.2285 89.0933 51.6929 89.3311 51.9736 89.7954 cv
52.2544 90.2598 52.2544 90.8862 52.2544 91.2964 cv
cp
f
57.3955 89.5791 mo
57.3955 89.2339 57.0605 88.9204 56.5962 88.9204 cv
55.8076 88.9204 55.4189 89.644 55.2676 90.1084 cv
55.2676 88.9204 li
53.7666 89.0391 li
53.7666 89.374 li
54.5225 89.374 54.6089 89.4497 54.6089 89.979 cv
54.6089 92.873 li
54.6089 93.3594 54.4902 93.3594 53.7666 93.3594 cv
53.7666 93.6943 li
54.9976 93.6616 li
55.4297 93.6616 55.9375 93.6616 56.3691 93.6943 cv
56.3691 93.3594 li
56.1426 93.3594 li
55.3433 93.3594 55.3218 93.2402 55.3218 92.8516 cv
55.3218 91.1885 li
55.3218 90.1191 55.7754 89.1582 56.5962 89.1582 cv
56.6719 89.1582 56.6934 89.1582 56.7148 89.1689 cv
56.6826 89.1797 56.4663 89.3096 56.4663 89.5898 cv
56.4663 89.8926 56.6934 90.0547 56.9312 90.0547 cv
57.1255 90.0547 57.3955 89.9248 57.3955 89.5791 cv
cp
f
60.3652 93.6943 mo
60.3652 93.3594 li
59.6523 93.3594 59.6094 93.3052 59.6094 92.8843 cv
59.6094 88.9204 li
58.0972 89.0391 li
58.0972 89.374 li
58.7993 89.374 58.8965 89.439 58.8965 89.9683 cv
58.8965 92.873 li
58.8965 93.3594 58.7778 93.3594 58.0542 93.3594 cv
58.0542 93.6943 li
59.2422 93.6616 li
59.6201 93.6616 59.998 93.6836 60.3652 93.6943 cv
cp
59.7715 87.1709 mo
59.7715 86.8794 59.5229 86.5986 59.1987 86.5986 cv
58.8315 86.5986 58.6157 86.9009 58.6157 87.1709 cv
58.6157 87.4624 58.8643 87.7432 59.188 87.7432 cv
59.5552 87.7432 59.7715 87.4409 59.7715 87.1709 cv
cp
f
64.2856 92.355 mo
64.2856 91.7393 li
64.0156 91.7393 li
64.0156 92.3335 li
64.0156 93.1323 63.6919 93.543 63.292 93.543 cv
62.5684 93.543 62.5684 92.5601 62.5684 92.3765 cv
62.5684 89.374 li
64.1128 89.374 li
64.1128 89.0391 li
62.5684 89.0391 li
62.5684 87.0522 li
62.2983 87.0522 li
62.2876 87.9375 61.9639 89.0933 60.9053 89.1367 cv
60.9053 89.374 li
61.8232 89.374 li
61.8232 92.355 li
61.8232 93.6836 62.8276 93.813 63.2163 93.813 cv
63.9834 93.813 64.2856 93.0459 64.2856 92.355 cv
cp
f
70.6792 93.6943 mo
70.6792 93.3594 li
70.1177 93.3594 69.8481 93.3594 69.8364 93.0352 cv
69.8364 90.9727 li
69.8364 90.0439 69.8364 89.709 69.5024 89.3203 cv
69.3511 89.1367 68.9946 88.9204 68.3677 88.9204 cv
67.4604 88.9204 66.9858 89.5684 66.813 89.9575 cv
66.8022 89.9575 li
66.8022 86.1987 li
65.2466 86.3179 li
65.2466 86.6523 li
66.0024 86.6523 66.0894 86.728 66.0894 87.2573 cv
66.0894 92.873 li
66.0894 93.3594 65.9702 93.3594 65.2466 93.3594 cv
65.2466 93.6943 li
66.4673 93.6616 li
67.6772 93.6943 li
67.6772 93.3594 li
66.9536 93.3594 66.8345 93.3594 66.8345 92.873 cv
66.8345 90.8862 li
66.8345 89.7627 67.6011 89.1582 68.2925 89.1582 cv
68.9731 89.1582 69.0913 89.7412 69.0913 90.3569 cv
69.0913 92.873 li
69.0913 93.3594 68.9731 93.3594 68.2495 93.3594 cv
68.2495 93.6943 li
69.4692 93.6616 li
70.6792 93.6943 li
cp
f
79.686 93.6943 mo
79.686 93.3594 li
79.1245 93.3594 78.855 93.3594 78.8442 93.0352 cv
78.8442 90.9727 li
78.8442 90.0439 78.8442 89.709 78.5093 89.3203 cv
78.3579 89.1367 78.0015 88.9204 77.3755 88.9204 cv
76.4683 88.9204 75.9927 89.5684 75.8091 89.979 cv
75.6577 89.0391 74.8589 88.9204 74.3726 88.9204 cv
73.5845 88.9204 73.0767 89.3848 72.7749 90.0547 cv
72.7749 88.9204 li
71.2515 89.0391 li
71.2515 89.374 li
72.0073 89.374 72.0942 89.4497 72.0942 89.979 cv
72.0942 92.873 li
72.0942 93.3594 71.9751 93.3594 71.2515 93.3594 cv
71.2515 93.6943 li
72.4722 93.6616 li
73.6821 93.6943 li
73.6821 93.3594 li
72.9585 93.3594 72.8394 93.3594 72.8394 92.873 cv
72.8394 90.8862 li
72.8394 89.7627 73.606 89.1582 74.2974 89.1582 cv
74.978 89.1582 75.0962 89.7412 75.0962 90.3569 cv
75.0962 92.873 li
75.0962 93.3594 74.978 93.3594 74.2544 93.3594 cv
74.2544 93.6943 li
75.4741 93.6616 li
76.6841 93.6943 li
76.6841 93.3594 li
75.9604 93.3594 75.8413 93.3594 75.8413 92.873 cv
75.8413 90.8862 li
75.8413 89.7627 76.6089 89.1582 77.2993 89.1582 cv
77.98 89.1582 78.0991 89.7412 78.0991 90.3569 cv
78.0991 92.873 li
78.0991 93.3594 77.98 93.3594 77.2563 93.3594 cv
77.2563 93.6943 li
78.4771 93.6616 li
79.686 93.6943 li
cp
f
2.63184 2.36084 mo
111.532 2.36084 li
111.532 27.5605 li
2.63184 27.5605 li
2.63184 2.36084 li
cp
0 0 0 0 cmyk
f
gsave
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.63184 2.36084 mo
111.532 2.36084 li
111.532 27.5605 li
2.63184 27.5605 li
2.63184 2.36084 li
cp
.746 .676 .668 .898 cmyk
@
grestore
43.4902 17.5771 mo
43.4902 16.2056 42.4424 15.1362 41.2329 15.1362 cv
40.3906 15.1362 39.937 15.6113 39.7212 15.8491 cv
39.7212 15.1362 li
38.166 15.2554 li
38.166 15.5898 li
38.9326 15.5898 39.0083 15.6548 39.0083 16.1299 cv
39.0083 21.1846 li
39.0083 21.6704 38.8892 21.6704 38.166 21.6704 cv
38.166 22.0054 li
39.3755 21.9727 li
40.5957 22.0054 li
40.5957 21.6704 li
39.8721 21.6704 39.7534 21.6704 39.7534 21.1846 cv
39.7534 19.3701 li
39.7534 19.2729 li
39.8076 19.4453 40.2612 20.0288 41.082 20.0288 cv
42.3672 20.0288 43.4902 18.9702 43.4902 17.5771 cv
cp
42.5938 17.5771 mo
42.5938 18.8838 41.8379 19.791 41.0386 19.791 cv
40.6064 19.791 40.1963 19.5752 39.9048 19.1323 cv
39.7534 18.9058 39.7534 18.8945 39.7534 18.6787 cv
39.7534 16.2705 li
40.0664 15.7197 40.5957 15.4063 41.1465 15.4063 cv
41.9351 15.4063 42.5938 16.3569 42.5938 17.5771 cv
cp
0 0 0 1 cmyk
f
47.7993 15.7949 mo
47.7993 15.4497 47.4644 15.1362 47 15.1362 cv
46.2119 15.1362 45.8228 15.8599 45.6719 16.3242 cv
45.6719 15.1362 li
44.1704 15.2554 li
44.1704 15.5898 li
44.9268 15.5898 45.0132 15.6655 45.0132 16.1948 cv
45.0132 19.0894 li
45.0132 19.5752 44.894 19.5752 44.1704 19.5752 cv
44.1704 19.9102 li
45.4019 19.8774 li
45.834 19.8774 46.3413 19.8774 46.7734 19.9102 cv
46.7734 19.5752 li
46.5464 19.5752 li
45.7476 19.5752 45.7256 19.4565 45.7256 19.0674 cv
45.7256 17.4043 li
45.7256 16.335 46.1792 15.374 47 15.374 cv
47.0757 15.374 47.0972 15.374 47.1191 15.3848 cv
47.0864 15.3955 46.8706 15.5254 46.8706 15.8062 cv
46.8706 16.1084 47.0972 16.2705 47.335 16.2705 cv
47.5293 16.2705 47.7993 16.1406 47.7993 15.7949 cv
cp
f
53.1885 17.5986 mo
53.1885 16.2163 52.1084 15.0713 50.8018 15.0713 cv
49.4517 15.0713 48.4043 16.249 48.4043 17.5986 cv
48.4043 18.9922 49.5273 20.0288 50.791 20.0288 cv
52.0977 20.0288 53.1885 18.9702 53.1885 17.5986 cv
cp
52.292 17.5122 mo
52.292 17.9014 52.292 18.4844 52.0547 18.9595 cv
51.8169 19.4453 51.3418 19.7588 50.8018 19.7588 cv
50.3374 19.7588 49.8623 19.5322 49.5708 19.0352 cv
49.3008 18.5601 49.3008 17.9014 49.3008 17.5122 cv
49.3008 17.0913 49.3008 16.5078 49.5601 16.0327 cv
49.8516 15.5361 50.3589 15.3091 50.791 15.3091 cv
51.2661 15.3091 51.7305 15.5469 52.0112 16.0112 cv
52.292 16.4756 52.292 17.1021 52.292 17.5122 cv
cp
f
59.1284 17.5771 mo
59.1284 16.2056 58.0703 15.1362 56.8389 15.1362 cv
55.9966 15.1362 55.5322 15.644 55.3594 15.8384 cv
55.3594 12.415 li
53.8042 12.5337 li
53.8042 12.8682 li
54.5601 12.8682 54.6465 12.9438 54.6465 13.4731 cv
54.6465 19.9102 li
54.9165 19.9102 li
55.3052 19.2402 li
55.4673 19.4888 55.9209 20.0288 56.7202 20.0288 cv
58.0054 20.0288 59.1284 18.9702 59.1284 17.5771 cv
cp
58.2324 17.5664 mo
58.2324 17.9658 58.2104 18.6138 57.8975 19.1001 cv
57.6704 19.4346 57.2603 19.791 56.6772 19.791 cv
56.1909 19.791 55.8022 19.5322 55.543 19.1323 cv
55.3916 18.9058 55.3916 18.873 55.3916 18.6787 cv
55.3916 16.4541 li
55.3916 16.249 55.3916 16.2378 55.5107 16.0654 cv
55.9316 15.4604 56.5259 15.374 56.7852 15.374 cv
57.271 15.374 57.6597 15.6548 57.9189 16.0654 cv
58.1997 16.5078 58.2324 17.1235 58.2324 17.5664 cv
cp
f
62.2607 19.9102 mo
62.2607 19.5752 li
61.5371 19.5752 61.4185 19.5752 61.4185 19.0894 cv
61.4185 12.415 li
59.8628 12.5337 li
59.8628 12.8682 li
60.6191 12.8682 60.7056 12.9438 60.7056 13.4731 cv
60.7056 19.0894 li
60.7056 19.5752 60.5864 19.5752 59.8628 19.5752 cv
59.8628 19.9102 li
61.062 19.8774 li
62.2607 19.9102 li
cp
f
66.9907 18.625 mo
66.9907 18.5166 66.9048 18.4951 66.8511 18.4951 cv
66.7534 18.4951 66.7319 18.5601 66.7104 18.6465 cv
66.3325 19.7588 65.3599 19.7588 65.2524 19.7588 cv
64.7124 19.7588 64.2803 19.4346 64.0317 19.0352 cv
63.708 18.5166 63.708 17.8037 63.708 17.415 cv
66.7212 17.415 li
66.9585 17.415 66.9907 17.415 66.9907 17.1885 cv
66.9907 16.1191 66.4077 15.0713 65.0581 15.0713 cv
63.8052 15.0713 62.8115 16.1841 62.8115 17.5342 cv
62.8115 18.981 63.9453 20.0288 65.187 20.0288 cv
66.5054 20.0288 66.9907 18.8301 66.9907 18.625 cv
cp
66.2778 17.1885 mo
63.7188 17.1885 li
63.7832 15.5791 64.6909 15.3091 65.0581 15.3091 cv
66.1704 15.3091 66.2778 16.7671 66.2778 17.1885 cv
cp
f
76.0845 19.9102 mo
76.0845 19.5752 li
75.5229 19.5752 75.2534 19.5752 75.2427 19.251 cv
75.2427 17.1885 li
75.2427 16.2598 75.2427 15.9248 74.9077 15.5361 cv
74.7563 15.3525 74.3999 15.1362 73.7729 15.1362 cv
72.8667 15.1362 72.3911 15.7842 72.2075 16.1948 cv
72.0562 15.2554 71.2573 15.1362 70.771 15.1362 cv
69.9829 15.1362 69.4751 15.6006 69.1724 16.2705 cv
69.1724 15.1362 li
67.6499 15.2554 li
67.6499 15.5898 li
68.4058 15.5898 68.4927 15.6655 68.4927 16.1948 cv
68.4927 19.0894 li
68.4927 19.5752 68.3735 19.5752 67.6499 19.5752 cv
67.6499 19.9102 li
68.8706 19.8774 li
70.0796 19.9102 li
70.0796 19.5752 li
69.356 19.5752 69.2378 19.5752 69.2378 19.0894 cv
69.2378 17.1021 li
69.2378 15.9785 70.0044 15.374 70.6958 15.374 cv
71.3755 15.374 71.4946 15.957 71.4946 16.5728 cv
71.4946 19.0894 li
71.4946 19.5752 71.3755 19.5752 70.6519 19.5752 cv
70.6519 19.9102 li
71.8726 19.8774 li
73.0825 19.9102 li
73.0825 19.5752 li
72.3589 19.5752 72.2397 19.5752 72.2397 19.0894 cv
72.2397 17.1021 li
72.2397 15.9785 73.0063 15.374 73.6978 15.374 cv
74.3784 15.374 74.4966 15.957 74.4966 16.5728 cv
74.4966 19.0894 li
74.4966 19.5752 74.3784 19.5752 73.6548 19.5752 cv
73.6548 19.9102 li
74.8745 19.8774 li
76.0845 19.9102 li
cp
f
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
57.0815 28.2354 mo
57.0815 65.209 li
.746 .676 .668 .898 cmyk
@
57.0815 73.1294 mo
60.0522 65.2095 li
54.1113 65.2095 li
57.0815 73.1294 li
cp
f
0 lc
0 lj
57.0815 73.1294 mo
60.0522 65.2095 li
54.1113 65.2095 li
57.0815 73.1294 li
cp
@
1 lc
1 lj
57.0815 102.02 mo
57.0815 138.994 li
@
57.0815 146.914 mo
60.0522 138.994 li
54.1113 138.994 li
57.0815 146.914 li
cp
f
0 lc
0 lj
57.0815 146.914 mo
60.0522 138.994 li
54.1113 138.994 li
57.0815 146.914 li
cp
@
2.63184 223.712 mo
111.532 223.712 li
111.532 248.912 li
2.63184 248.912 li
2.63184 223.712 li
cp
0 0 0 0 cmyk
f
gsave
0 251.1 mo
113.4 251.1 li
113.4 0 li
0 0 li
0 251.1 li
cp
clp
1 lc
1 lj
2.63184 223.712 mo
111.532 223.712 li
111.532 248.912 li
2.63184 248.912 li
2.63184 223.712 li
cp
.746 .676 .668 .898 cmyk
@
grestore
31.8589 239.977 mo
31.8589 239.869 31.751 239.869 31.7183 239.869 cv
31.6211 239.869 31.5996 239.913 31.5781 239.977 cv
31.2646 240.982 30.563 241.111 30.1631 241.111 cv
29.5908 241.111 28.6401 240.647 28.6401 238.908 cv
28.6401 237.148 29.5259 236.694 30.0981 236.694 cv
30.1958 236.694 30.876 236.705 31.2539 237.093 cv
30.811 237.126 30.7466 237.451 30.7466 237.59 cv
30.7466 237.871 30.9409 238.087 31.2432 238.087 cv
31.5239 238.087 31.7397 237.904 31.7397 237.58 cv
31.7397 236.845 30.9194 236.423 30.0874 236.423 cv
28.7378 236.423 27.7441 237.59 27.7441 238.929 cv
27.7441 240.312 28.813 241.381 30.0659 241.381 cv
31.5132 241.381 31.8589 240.085 31.8589 239.977 cv
cp
0 0 0 1 cmyk
f
37.2588 238.951 mo
37.2588 237.569 36.1787 236.423 34.8721 236.423 cv
33.522 236.423 32.4746 237.601 32.4746 238.951 cv
32.4746 240.344 33.5977 241.381 34.8613 241.381 cv
36.168 241.381 37.2588 240.323 37.2588 238.951 cv
cp
36.3623 238.865 mo
36.3623 239.253 36.3623 239.837 36.125 240.312 cv
35.8872 240.798 35.4121 241.111 34.8721 241.111 cv
34.4077 241.111 33.9321 240.884 33.6406 240.388 cv
33.3706 239.913 33.3706 239.253 33.3706 238.865 cv
33.3706 238.444 33.3706 237.861 33.6299 237.385 cv
33.9214 236.888 34.4292 236.662 34.8613 236.662 cv
35.3364 236.662 35.8008 236.9 36.0815 237.364 cv
36.3623 237.828 36.3623 238.455 36.3623 238.865 cv
cp
f
46.3525 241.263 mo
46.3525 240.927 li
45.7905 240.927 45.521 240.927 45.5098 240.603 cv
45.5098 238.541 li
45.5098 237.613 45.5098 237.277 45.1753 236.888 cv
45.0239 236.705 44.6675 236.489 44.041 236.489 cv
43.1338 236.489 42.6587 237.136 42.4751 237.547 cv
42.3237 236.607 41.5249 236.489 41.0386 236.489 cv
40.2505 236.489 39.7427 236.953 39.4404 237.623 cv
39.4404 236.489 li
37.9175 236.607 li
37.9175 236.943 li
38.6733 236.943 38.7598 237.018 38.7598 237.547 cv
38.7598 240.441 li
38.7598 240.927 38.6411 240.927 37.9175 240.927 cv
37.9175 241.263 li
39.1382 241.23 li
40.3477 241.263 li
40.3477 240.927 li
39.624 240.927 39.5054 240.927 39.5054 240.441 cv
39.5054 238.455 li
39.5054 237.332 40.272 236.726 40.9634 236.726 cv
41.6436 236.726 41.7622 237.31 41.7622 237.925 cv
41.7622 240.441 li
41.7622 240.927 41.6436 240.927 40.9199 240.927 cv
40.9199 241.263 li
42.1401 241.23 li
43.3501 241.263 li
43.3501 240.927 li
42.6265 240.927 42.5078 240.927 42.5078 240.441 cv
42.5078 238.455 li
42.5078 237.332 43.2744 236.726 43.9653 236.726 cv
44.646 236.726 44.7646 237.31 44.7646 237.925 cv
44.7646 240.441 li
44.7646 240.927 44.646 240.927 43.9224 240.927 cv
43.9224 241.263 li
45.1426 241.23 li
46.3525 241.263 li
cp
f
52.1953 238.929 mo
52.1953 237.558 51.1475 236.489 49.938 236.489 cv
49.0957 236.489 48.6421 236.964 48.4258 237.202 cv
48.4258 236.489 li
46.8706 236.607 li
46.8706 236.943 li
47.6377 236.943 47.7134 237.007 47.7134 237.482 cv
47.7134 242.537 li
47.7134 243.023 47.5942 243.023 46.8706 243.023 cv
46.8706 243.357 li
48.0806 243.326 li
49.3008 243.357 li
49.3008 243.023 li
48.5771 243.023 48.4585 243.023 48.4585 242.537 cv
48.4585 240.722 li
48.4585 240.625 li
48.5122 240.798 48.9658 241.381 49.7866 241.381 cv
51.0718 241.381 52.1953 240.323 52.1953 238.929 cv
cp
51.2988 238.929 mo
51.2988 240.236 50.543 241.144 49.7437 241.144 cv
49.3115 241.144 48.9014 240.927 48.6094 240.485 cv
48.4585 240.257 48.4585 240.248 48.4585 240.031 cv
48.4585 237.623 li
48.7715 237.072 49.3008 236.759 49.8516 236.759 cv
50.6401 236.759 51.2988 237.709 51.2988 238.929 cv
cp
f
58.3511 241.263 mo
58.3511 240.927 li
57.5952 240.927 57.5088 240.852 57.5088 240.323 cv
57.5088 236.489 li
55.9214 236.607 li
55.9214 236.943 li
56.6772 236.943 56.7637 237.018 56.7637 237.547 cv
56.7637 239.47 li
56.7637 240.404 56.2451 241.132 55.4565 241.132 cv
54.5498 241.132 54.5063 240.626 54.5063 240.066 cv
54.5063 236.489 li
52.9189 236.607 li
52.9189 236.943 li
53.7612 236.943 53.7612 236.974 53.7612 237.936 cv
53.7612 239.556 li
53.7612 240.398 53.7612 241.371 55.4028 241.371 cv
56.0073 241.371 56.4829 241.072 56.7959 240.41 cv
56.7959 241.371 li
58.3511 241.263 li
cp
f
62.1636 239.923 mo
62.1636 239.308 li
61.8936 239.308 li
61.8936 239.902 li
61.8936 240.701 61.5698 241.111 61.1699 241.111 cv
60.4463 241.111 60.4463 240.128 60.4463 239.945 cv
60.4463 236.943 li
61.9907 236.943 li
61.9907 236.607 li
60.4463 236.607 li
60.4463 234.621 li
60.1763 234.621 li
60.1655 235.505 59.8418 236.662 58.7832 236.705 cv
58.7832 236.943 li
59.7012 236.943 li
59.7012 239.923 li
59.7012 241.251 60.7056 241.381 61.0942 241.381 cv
61.8613 241.381 62.1636 240.615 62.1636 239.923 cv
cp
f
67.9956 240.301 mo
67.9956 239.697 li
67.7261 239.697 li
67.7261 240.301 li
67.7261 240.927 67.4556 240.993 67.3364 240.993 cv
66.98 240.993 66.937 240.506 66.937 240.453 cv
66.937 238.292 li
66.937 237.839 66.937 237.417 66.5483 237.018 cv
66.1274 236.597 65.5874 236.423 65.0688 236.423 cv
64.1831 236.423 63.438 236.931 63.438 237.644 cv
63.438 237.968 63.6538 238.152 63.9346 238.152 cv
64.2373 238.152 64.4316 237.936 64.4316 237.656 cv
64.4316 237.526 64.3774 237.169 63.8809 237.158 cv
64.1724 236.781 64.7017 236.662 65.0474 236.662 cv
65.5767 236.662 66.1919 237.083 66.1919 238.044 cv
66.1919 238.444 li
65.6411 238.476 64.8853 238.508 64.2046 238.833 cv
63.395 239.2 63.125 239.761 63.125 240.236 cv
63.125 241.103 64.1724 241.371 64.853 241.371 cv
65.5659 241.371 66.062 240.943 66.2671 240.441 cv
66.311 240.874 66.6021 241.328 67.1099 241.328 cv
67.3364 241.328 67.9956 241.176 67.9956 240.301 cv
cp
66.1919 239.75 mo
66.1919 240.769 65.4146 241.132 64.9282 241.132 cv
64.3989 241.132 63.9565 240.759 63.9565 240.226 cv
63.9565 239.632 64.4102 238.736 66.1919 238.67 cv
66.1919 239.75 li
cp
f
71.7651 239.923 mo
71.7651 239.308 li
71.4946 239.308 li
71.4946 239.902 li
71.4946 240.701 71.1704 241.111 70.771 241.111 cv
70.0474 241.111 70.0474 240.128 70.0474 239.945 cv
70.0474 236.943 li
71.5923 236.943 li
71.5923 236.607 li
70.0474 236.607 li
70.0474 234.621 li
69.7778 234.621 li
69.7671 235.505 69.4429 236.662 68.3843 236.705 cv
68.3843 236.943 li
69.3022 236.943 li
69.3022 239.923 li
69.3022 241.251 70.3071 241.381 70.6958 241.381 cv
71.4624 241.381 71.7651 240.615 71.7651 239.923 cv
cp
f
75.0483 241.263 mo
75.0483 240.927 li
74.3354 240.927 74.2925 240.874 74.2925 240.453 cv
74.2925 236.489 li
72.7798 236.607 li
72.7798 236.943 li
73.4819 236.943 73.5796 237.007 73.5796 237.537 cv
73.5796 240.441 li
73.5796 240.927 73.4604 240.927 72.7368 240.927 cv
72.7368 241.263 li
73.9243 241.23 li
74.3032 241.23 74.6812 241.251 75.0483 241.263 cv
cp
74.4536 234.74 mo
74.4536 234.448 74.2056 234.167 73.8813 234.167 cv
73.5142 234.167 73.2983 234.469 73.2983 234.74 cv
73.2983 235.031 73.5464 235.312 73.8706 235.312 cv
74.2378 235.312 74.4536 235.009 74.4536 234.74 cv
cp
f
80.4692 238.951 mo
80.4692 237.569 79.3892 236.423 78.0825 236.423 cv
76.7329 236.423 75.6851 237.601 75.6851 238.951 cv
75.6851 240.344 76.8081 241.381 78.0718 241.381 cv
79.3784 241.381 80.4692 240.323 80.4692 238.951 cv
cp
79.5728 238.865 mo
79.5728 239.253 79.5728 239.837 79.3354 240.312 cv
79.0981 240.798 78.6226 241.111 78.0825 241.111 cv
77.6187 241.111 77.1431 240.884 76.8521 240.388 cv
76.5815 239.913 76.5815 239.253 76.5815 238.865 cv
76.5815 238.444 76.5815 237.861 76.8403 237.385 cv
77.1323 236.888 77.6401 236.662 78.0718 236.662 cv
78.5474 236.662 79.0112 236.9 79.2925 237.364 cv
79.5728 237.828 79.5728 238.455 79.5728 238.865 cv
cp
f
86.561 241.263 mo
86.561 240.927 li
85.9995 240.927 85.729 240.927 85.7183 240.603 cv
85.7183 238.541 li
85.7183 237.613 85.7183 237.277 85.3833 236.888 cv
85.2319 236.705 84.8765 236.489 84.2495 236.489 cv
83.4614 236.489 82.9536 236.953 82.6509 237.623 cv
82.6509 236.489 li
81.1284 236.607 li
81.1284 236.943 li
81.8843 236.943 81.9712 237.018 81.9712 237.547 cv
81.9712 240.441 li
81.9712 240.927 81.8521 240.927 81.1284 240.927 cv
81.1284 241.263 li
82.3491 241.23 li
83.5581 241.263 li
83.5581 240.927 li
82.8345 240.927 82.7163 240.927 82.7163 240.441 cv
82.7163 238.455 li
82.7163 237.332 83.4829 236.726 84.1743 236.726 cv
84.854 236.726 84.9731 237.31 84.9731 237.925 cv
84.9731 240.441 li
84.9731 240.927 84.854 240.927 84.1304 240.927 cv
84.1304 241.263 li
85.3511 241.23 li
86.561 241.263 li
cp
f
1 lc
1 lj
57.0815 175.803 mo
57.0815 212.778 li
.746 .676 .668 .898 cmyk
@
57.0815 220.698 mo
60.0522 212.778 li
54.1113 212.778 li
57.0815 220.698 li
cp
f
0 lc
0 lj
57.0815 220.698 mo
60.0522 212.778 li
54.1113 212.778 li
57.0815 220.698 li
cp
@
45.8315 39.0283 mo
68.3315 39.0283 li
68.3315 55.2285 li
45.8315 55.2285 li
45.8315 39.0283 li
cp
0 0 0 0 cmyk
f
49.916 50.707 mo
50.0132 50.124 49.7217 49.7783 49.6353 49.6812 cv
49.3008 49.3462 49.02 49.2817 48.3286 49.1519 cv
48.0156 49.0869 47.2593 48.936 47.3672 48.2881 cv
47.4214 47.9531 47.7236 47.4565 48.6958 47.4565 cv
49.873 47.4565 49.7759 48.4609 49.7437 48.7954 cv
49.7324 48.8818 49.8081 48.8818 49.8408 48.8818 cv
49.9595 48.8818 49.9702 48.8281 50.0024 48.6338 cv
50.1968 47.5103 li
50.2295 47.3159 50.2295 47.2617 50.1216 47.2617 cv
50.0352 47.2617 49.7974 47.4995 49.7002 47.5967 cv
49.4087 47.3267 49.0845 47.2617 48.7388 47.2617 cv
47.4321 47.2617 46.9248 47.9746 46.8276 48.5688 cv
46.8057 48.6875 46.752 49.0654 47.0972 49.4434 cv
47.3892 49.7461 47.7456 49.8213 48.2207 49.9189 cv
48.8037 50.0376 48.9336 50.0698 49.1709 50.2861 cv
49.333 50.4482 49.4409 50.6855 49.3872 50.9878 cv
49.3115 51.4521 48.9551 51.9707 48.0044 51.9707 cv
47.292 51.9707 46.8384 51.5605 46.7842 50.4805 cv
46.7734 50.2861 46.7627 50.2642 46.7627 50.2642 cv
46.752 50.2212 46.7085 50.2212 46.6763 50.2212 cv
46.5576 50.2212 46.5464 50.2754 46.5142 50.4697 cv
46.2656 51.9385 li
46.2334 52.1328 46.2227 52.1865 46.3306 52.1865 cv
46.3848 52.1865 46.3955 52.1758 46.6221 51.9492 cv
46.687 51.8735 46.6978 51.8521 46.8813 51.6792 cv
47.2056 52.1865 47.7886 52.1865 47.9722 52.1865 cv
49.106 52.1865 49.7759 51.5605 49.916 50.707 cv
cp
0 0 0 1 cmyk
f
55.4028 49.7676 mo
55.6294 48.3745 54.7544 47.2617 53.502 47.2617 cv
52.2056 47.2617 50.9961 48.4067 50.7695 49.7676 cv
50.5317 51.1499 51.439 52.1865 52.6704 52.1865 cv
53.9448 52.1865 55.1758 51.1284 55.4028 49.7676 cv
cp
54.5928 49.6704 mo
54.5278 50.0483 54.4199 50.7178 54.0527 51.2256 cv
53.6636 51.7441 53.1348 51.9492 52.7241 51.9492 cv
52.3247 51.9492 51.8711 51.7764 51.644 51.2471 cv
51.4282 50.7612 51.5254 50.124 51.6011 49.6704 cv
51.6768 49.2598 51.7847 48.6011 52.1948 48.1152 cv
52.5728 47.6509 53.0806 47.478 53.4585 47.478 cv
53.8799 47.478 54.3008 47.6724 54.5278 48.0938 cv
54.7764 48.5903 54.6572 49.2705 54.5928 49.6704 cv
cp
f
58.0269 52.0786 mo
58.0811 51.7656 li
57.3896 51.7656 57.2603 51.7656 57.3359 51.2793 cv
58.459 44.5835 li
56.936 44.7021 li
56.8823 45.0156 li
57.6167 45.0156 57.6924 45.0913 57.606 45.6201 cv
56.6553 51.2793 li
56.5796 51.7656 56.4609 51.7656 55.7588 51.7656 cv
55.7051 52.0786 li
56.0073 52.0571 56.5366 52.0571 56.8608 52.0571 cv
57.1846 52.0571 57.7246 52.0571 58.0269 52.0786 cv
cp
f
64.3882 47.7373 mo
64.4424 47.4238 li
64.1289 47.4453 63.978 47.4453 63.6431 47.4453 cv
62.7573 47.4238 li
62.7036 47.7373 li
63.1572 47.7588 63.1572 48.083 63.1353 48.2017 cv
63.1138 48.2988 63.0923 48.3525 63.0166 48.4824 cv
61.4507 51.2686 li
60.7485 48.2231 li
60.7163 48.0718 60.7056 48.0718 60.7163 48.0181 cv
60.7593 47.7373 61.1699 47.7373 61.3643 47.7373 cv
61.4185 47.4238 li
61.1479 47.4453 60.5864 47.4453 60.2949 47.4453 cv
59.2583 47.4238 li
59.2041 47.7373 li
59.8091 47.7373 59.9063 47.7803 59.9819 48.1152 cv
60.8892 51.9814 li
60.9106 52.1328 60.9214 52.1865 61.0508 52.1865 cv
61.1265 52.1865 61.2021 52.165 61.3101 51.9814 cv
63.2974 48.4502 li
63.438 48.2124 63.6968 47.748 64.3882 47.7373 cv
cp
f
68.2007 50.7935 mo
68.2114 50.7285 68.1685 50.6855 68.103 50.6855 cv
68.0171 50.6855 67.9849 50.7397 67.9526 50.7935 cv
67.52 51.7007 66.7534 51.9492 66.3003 51.9492 cv
65.8462 51.9492 64.8091 51.6465 65.1226 49.7783 cv
65.1548 49.5732 li
68.147 49.5732 li
68.3843 49.5732 68.4058 49.5732 68.438 49.3682 cv
68.6216 48.2773 68.2007 47.2617 66.894 47.2617 cv
65.6626 47.2617 64.5288 48.3745 64.3125 49.7134 cv
64.0752 51.1392 64.9927 52.1865 66.1919 52.1865 cv
67.4771 52.1865 68.1577 51.0205 68.2007 50.7935 cv
cp
67.769 49.3682 mo
65.1978 49.3682 li
65.5649 47.6724 66.5483 47.478 66.8511 47.478 cv
68.0063 47.478 67.8228 49.001 67.769 49.3682 cv
cp
f
32.7817 112.813 mo
81.3813 112.813 li
81.3813 129.013 li
32.7817 129.013 li
32.7817 112.813 li
cp
0 0 0 0 cmyk
f
35.4492 125.863 mo
35.5034 125.55 li
34.8013 125.55 34.769 125.496 34.834 125.075 cv
35.5034 121.1 li
34.0132 121.219 li
33.959 121.532 li
34.6504 121.532 34.7368 121.597 34.6504 122.126 cv
34.1533 125.064 li
34.0776 125.55 33.959 125.55 33.2568 125.55 cv
33.2031 125.863 li
33.5054 125.841 34.0239 125.841 34.3369 125.841 cv
34.4556 125.841 35.082 125.841 35.4492 125.863 cv
cp
35.9355 119.34 mo
35.9893 119.016 35.7627 118.811 35.5034 118.811 cv
35.2012 118.811 34.9312 119.048 34.8877 119.34 cv
34.834 119.621 35.0391 119.858 35.3198 119.858 cv
35.644 119.858 35.8921 119.599 35.9355 119.34 cv
cp
0 0 0 1 cmyk
f
44.3486 125.863 mo
44.4028 125.55 li
43.8628 125.55 43.5928 125.55 43.6357 125.226 cv
43.9707 123.239 li
44.1328 122.234 44.1865 121.932 43.9922 121.586 cv
43.7544 121.165 43.2578 121.1 42.8906 121.1 cv
41.9941 121.1 41.4326 121.748 41.1841 122.169 cv
41.1733 121.338 40.6333 121.1 39.9531 121.1 cv
38.9053 121.1 38.3438 121.997 38.2144 122.213 cv
38.2036 122.213 li
38.3979 121.1 li
36.9072 121.219 li
36.8535 121.532 li
37.5879 121.532 37.6636 121.608 37.5771 122.137 cv
37.0801 125.064 li
37.0044 125.55 36.8857 125.55 36.1841 125.55 cv
36.1299 125.863 li
36.4106 125.841 36.9937 125.841 37.2964 125.841 cv
37.6094 125.841 38.1929 125.841 38.4736 125.863 cv
38.5273 125.55 li
37.8364 125.55 37.7065 125.55 37.7822 125.064 cv
38.1172 123.055 li
38.3115 121.921 39.1538 121.316 39.8232 121.316 cv
40.4932 121.316 40.5576 121.867 40.4497 122.526 cv
40.0181 125.064 li
39.9424 125.55 39.8232 125.55 39.1216 125.55 cv
39.0674 125.863 li
39.3481 125.841 39.9316 125.841 40.2339 125.841 cv
40.5469 125.841 41.1304 125.841 41.4111 125.863 cv
41.4648 125.55 li
40.7739 125.55 40.644 125.55 40.7197 125.064 cv
41.0547 123.055 li
41.249 121.921 42.0913 121.316 42.7612 121.316 cv
43.4307 121.316 43.4956 121.867 43.3872 122.526 cv
42.9556 125.064 li
42.8799 125.55 42.7612 125.55 42.0591 125.55 cv
42.0049 125.863 li
42.2856 125.841 42.8691 125.841 43.1714 125.841 cv
43.4849 125.841 44.0679 125.841 44.3486 125.863 cv
cp
f
50.4722 123.53 mo
50.6992 122.159 49.8677 121.1 48.6904 121.1 cv
47.7397 121.1 47.1133 121.781 47.0703 121.824 cv
47.1997 121.1 li
45.6772 121.219 li
45.623 121.532 li
46.3789 121.532 46.4331 121.608 46.3467 122.083 cv
45.5044 127.159 li
45.418 127.645 45.2988 127.645 44.5972 127.645 cv
44.5537 127.958 li
44.8345 127.937 45.418 127.937 45.7202 127.937 cv
46.0332 127.937 46.6167 127.937 46.8975 127.958 cv
46.9404 127.645 li
46.2495 127.645 46.1196 127.645 46.2061 127.159 cv
46.5195 125.28 li
46.6704 125.55 47.0376 125.971 47.729 125.971 cv
48.9712 125.971 50.2456 124.923 50.4722 123.53 cv
cp
49.6514 123.53 mo
49.4355 124.815 48.5498 125.755 47.7183 125.755 cv
47.3833 125.755 47.0918 125.615 46.9082 125.409 cv
46.7031 125.161 46.5732 124.945 46.6274 124.643 cv
46.9946 122.418 li
47.0269 122.213 47.0376 122.202 47.1782 122.029 cv
47.5884 121.543 48.1504 121.338 48.5605 121.338 cv
49.3706 121.338 49.8564 122.321 49.6514 123.53 cv
cp
f
53.1509 125.863 mo
53.2046 125.55 li
52.5132 125.55 52.3838 125.55 52.4595 125.064 cv
53.5825 118.368 li
52.0601 118.487 li
52.0059 118.8 li
52.7402 118.8 52.8159 118.875 52.7295 119.405 cv
51.7788 125.064 li
51.7036 125.55 51.5845 125.55 50.8828 125.55 cv
50.8286 125.863 li
51.1309 125.841 51.6602 125.841 51.9844 125.841 cv
52.3081 125.841 52.8481 125.841 53.1509 125.863 cv
cp
f
58.0215 124.578 mo
58.0322 124.513 57.9888 124.47 57.9243 124.47 cv
57.8379 124.47 57.8052 124.524 57.7729 124.578 cv
57.3408 125.485 56.5742 125.733 56.1206 125.733 cv
55.667 125.733 54.6304 125.431 54.9434 123.563 cv
54.9761 123.357 li
57.9673 123.357 li
58.2051 123.357 58.2266 123.357 58.2593 123.152 cv
58.4429 122.062 58.0215 121.046 56.7148 121.046 cv
55.4834 121.046 54.3496 122.159 54.1333 123.498 cv
53.896 124.923 54.814 125.971 56.0127 125.971 cv
57.2979 125.971 57.978 124.805 58.0215 124.578 cv
cp
57.5894 123.152 mo
55.019 123.152 li
55.3862 121.457 56.3691 121.262 56.6714 121.262 cv
57.8271 121.262 57.6436 122.785 57.5894 123.152 cv
cp
f
66.6724 125.863 mo
66.7261 125.55 li
66.186 125.55 65.9165 125.55 65.9595 125.226 cv
66.2944 123.239 li
66.4565 122.234 66.5103 121.932 66.3159 121.586 cv
66.0786 121.165 65.5815 121.1 65.2144 121.1 cv
64.3179 121.1 63.7563 121.748 63.5078 122.169 cv
63.4971 121.338 62.957 121.1 62.2769 121.1 cv
61.229 121.1 60.6675 121.997 60.5376 122.213 cv
60.5269 122.213 li
60.7212 121.1 li
59.231 121.219 li
59.1772 121.532 li
59.9116 121.532 59.9868 121.608 59.9009 122.137 cv
59.4038 125.064 li
59.3281 125.55 59.2095 125.55 58.5073 125.55 cv
58.4536 125.863 li
58.7344 125.841 59.3174 125.841 59.6196 125.841 cv
59.9331 125.841 60.5161 125.841 60.7969 125.863 cv
60.8511 125.55 li
60.1597 125.55 60.0303 125.55 60.106 125.064 cv
60.4404 123.055 li
60.6353 121.921 61.4775 121.316 62.147 121.316 cv
62.8164 121.316 62.8813 121.867 62.7734 122.526 cv
62.3413 125.064 li
62.2656 125.55 62.147 125.55 61.4448 125.55 cv
61.3911 125.863 li
61.6719 125.841 62.2549 125.841 62.5576 125.841 cv
62.8706 125.841 63.4536 125.841 63.7349 125.863 cv
63.7886 125.55 li
63.0972 125.55 62.9678 125.55 63.0435 125.064 cv
63.3784 123.055 li
63.5728 121.921 64.415 121.316 65.0845 121.316 cv
65.7544 121.316 65.8188 121.867 65.7114 122.526 cv
65.2788 125.064 li
65.2036 125.55 65.0845 125.55 64.3828 125.55 cv
64.3286 125.863 li
64.6094 125.841 65.1929 125.841 65.4946 125.841 cv
65.8081 125.841 66.3911 125.841 66.6724 125.863 cv
cp
f
71.5327 124.578 mo
71.5435 124.513 71.4995 124.47 71.4351 124.47 cv
71.3491 124.47 71.3159 124.524 71.2837 124.578 cv
70.8521 125.485 70.0854 125.733 69.6313 125.733 cv
69.1782 125.733 68.1411 125.431 68.4546 123.563 cv
68.4868 123.357 li
71.478 123.357 li
71.7163 123.357 71.7378 123.357 71.77 123.152 cv
71.9536 122.062 71.5327 121.046 70.2251 121.046 cv
68.9946 121.046 67.8599 122.159 67.644 123.498 cv
67.4067 124.923 68.3247 125.971 69.5229 125.971 cv
70.8091 125.971 71.4888 124.805 71.5327 124.578 cv
cp
71.1001 123.152 mo
68.5298 123.152 li
68.897 121.457 69.8794 121.262 70.1821 121.262 cv
71.3374 121.262 71.1538 122.785 71.1001 123.152 cv
cp
f
77.2456 125.863 mo
77.2993 125.55 li
76.7593 125.55 76.4897 125.55 76.5327 125.226 cv
76.8677 123.239 li
77.0298 122.234 77.0835 121.932 76.8892 121.586 cv
76.6519 121.165 76.1548 121.1 75.7876 121.1 cv
74.7397 121.1 74.1782 121.997 74.0483 122.213 cv
74.0376 122.213 li
74.2319 121.1 li
72.7417 121.219 li
72.688 121.532 li
73.4224 121.532 73.4976 121.608 73.4116 122.137 cv
72.9146 125.064 li
72.8394 125.55 72.7202 125.55 72.0181 125.55 cv
71.9644 125.863 li
72.2446 125.841 72.8286 125.841 73.1304 125.841 cv
73.4438 125.841 74.0269 125.841 74.3081 125.863 cv
74.3618 125.55 li
73.6704 125.55 73.5405 125.55 73.6167 125.064 cv
73.9517 123.055 li
74.146 121.921 74.9878 121.316 75.6577 121.316 cv
76.3276 121.316 76.3921 121.867 76.2847 122.526 cv
75.8521 125.064 li
75.7769 125.55 75.6577 125.55 74.9556 125.55 cv
74.9019 125.863 li
75.1831 125.841 75.7661 125.841 76.0679 125.841 cv
76.3813 125.841 76.9644 125.841 77.2456 125.863 cv
cp
f
80.9604 124.524 mo
81.0581 123.908 li
80.8198 123.908 li
80.7231 124.502 li
80.5933 125.28 80.2046 125.733 79.7837 125.733 cv
79.0493 125.733 79.2222 124.729 79.2437 124.545 cv
79.7515 121.521 li
81.2739 121.521 li
81.3276 121.208 li
79.8052 121.208 li
80.1401 119.221 li
79.9019 119.221 li
79.7183 120.236 79.1567 121.273 78.1636 121.306 cv
78.1313 121.521 li
79.0493 121.521 li
78.5522 124.524 li
78.3472 125.723 79.103 125.971 79.6753 125.971 cv
80.356 125.971 80.8306 125.301 80.9604 124.524 cv
cp
f
18.3818 186.597 mo
95.7817 186.597 li
95.7817 202.796 li
18.3818 202.796 li
18.3818 186.597 li
cp
0 0 0 0 cmyk
f
23.3647 198.362 mo
23.3755 198.297 23.332 198.254 23.2671 198.254 cv
23.1812 198.254 23.1484 198.308 23.1162 198.362 cv
22.6841 199.269 21.9175 199.518 21.4639 199.518 cv
21.0103 199.518 19.9731 199.215 20.2866 197.347 cv
20.3188 197.142 li
23.3105 197.142 li
23.5483 197.142 23.5698 197.142 23.6021 196.937 cv
23.7856 195.846 23.3647 194.831 22.0576 194.831 cv
20.8267 194.831 19.6924 195.943 19.4766 197.282 cv
19.2388 198.708 20.1567 199.755 21.3555 199.755 cv
22.6411 199.755 23.3213 198.589 23.3647 198.362 cv
cp
22.9326 196.937 mo
20.3623 196.937 li
20.7295 195.241 21.7119 195.046 22.0146 195.046 cv
23.1699 195.046 22.9863 196.569 22.9326 196.937 cv
cp
0 0 0 1 cmyk
f
28.9155 199.647 mo
28.9697 199.334 li
28.3975 199.334 28.2026 199.313 28.0083 198.967 cv
26.896 197.099 li
27.2847 196.688 27.8354 196.105 28.0732 195.878 cv
28.6025 195.381 29.1211 195.306 29.4663 195.306 cv
29.5205 194.992 li
29.0562 195.014 29.0347 195.014 28.6133 195.014 cv
27.6411 194.992 li
27.5874 195.306 li
27.7275 195.327 27.8896 195.392 27.8467 195.641 cv
27.814 195.824 27.6953 195.943 27.6196 196.029 cv
26.7773 196.904 li
26.1294 195.792 li
26.0967 195.749 26.0537 195.651 26.0645 195.576 cv
26.0752 195.511 26.1616 195.316 26.4858 195.306 cv
26.5396 194.992 li
26.2695 195.014 25.7188 195.014 25.4272 195.014 cv
24.3906 194.992 li
24.3364 195.306 li
24.8872 195.306 25.0923 195.327 25.2651 195.619 cv
26.2588 197.271 li
26.2695 197.293 26.3022 197.357 26.3022 197.39 cv
26.2915 197.422 25.2759 198.481 25.1465 198.621 cv
24.5742 199.205 24.0771 199.323 23.6128 199.334 cv
23.5591 199.647 li
23.9692 199.625 23.9907 199.625 24.4551 199.625 cv
25.4272 199.647 li
25.4814 199.334 li
25.2222 199.302 25.2114 199.14 25.2329 198.988 cv
25.2651 198.815 25.3516 198.729 25.4814 198.589 cv
26.4316 197.584 li
27.123 198.74 li
27.2632 198.978 27.2632 198.999 27.2524 199.064 cv
27.2417 199.15 27.123 199.323 26.8315 199.334 cv
26.7773 199.647 li
27.0581 199.625 27.5874 199.625 27.8896 199.625 cv
28.9155 199.647 li
cp
f
33.646 198.362 mo
33.6567 198.297 33.6138 198.254 33.5488 198.254 cv
33.4624 198.254 33.4302 198.308 33.3979 198.362 cv
32.9658 199.269 32.1987 199.518 31.7451 199.518 cv
31.2915 199.518 30.2549 199.215 30.5679 197.347 cv
30.6006 197.142 li
33.5923 197.142 li
33.8296 197.142 33.8511 197.142 33.8838 196.937 cv
34.0674 195.846 33.646 194.831 32.3394 194.831 cv
31.1079 194.831 29.9741 195.943 29.7583 197.282 cv
29.5205 198.708 30.4385 199.755 31.6372 199.755 cv
32.9224 199.755 33.603 198.589 33.646 198.362 cv
cp
33.2144 196.937 mo
30.6436 196.937 li
31.0107 195.241 31.9937 195.046 32.2959 195.046 cv
33.4517 195.046 33.2681 196.569 33.2144 196.937 cv
cp
f
38.3335 198.362 mo
38.3442 198.265 38.2686 198.265 38.2358 198.265 cv
38.1387 198.265 38.1279 198.297 38.0742 198.427 cv
37.707 199.193 37.0698 199.518 36.4863 199.518 cv
35.8276 199.518 35.0503 198.945 35.3203 197.304 cv
35.6226 195.511 36.6162 195.068 37.1563 195.068 cv
37.5664 195.068 38.1279 195.23 38.3115 195.651 cv
38.1821 195.651 37.7827 195.651 37.707 196.094 cv
37.6636 196.353 37.8149 196.537 38.0742 196.537 cv
38.3228 196.537 38.5493 196.386 38.6035 196.072 cv
38.7222 195.349 38.0522 194.831 37.1777 194.831 cv
35.9141 194.831 34.7261 195.954 34.4995 197.314 cv
34.2725 198.697 35.1255 199.755 36.3462 199.755 cv
37.7715 199.755 38.3115 198.459 38.3335 198.362 cv
cp
f
44.0571 199.647 mo
44.1113 199.334 li
43.377 199.334 43.3013 199.258 43.3877 198.729 cv
44.0356 194.884 li
42.4912 195.003 li
42.4375 195.316 li
43.1719 195.316 43.2471 195.392 43.1606 195.921 cv
42.8369 197.854 li
42.6855 198.772 42.0703 199.539 41.2603 199.539 cv
40.3745 199.539 40.4067 199.032 40.4932 198.459 cv
41.0981 194.884 li
39.5537 195.003 li
39.4995 195.316 li
40.3203 195.316 40.3096 195.349 40.1587 196.31 cv
39.8887 197.93 li
39.7695 198.6 39.7051 198.988 39.9751 199.345 cv
40.1802 199.625 40.6011 199.755 41.1519 199.755 cv
41.3354 199.755 41.6812 199.755 42.1025 199.442 cv
42.459 199.193 42.6963 198.783 42.6963 198.783 cv
42.5347 199.755 li
44.0571 199.647 li
cp
f
48.0532 198.308 mo
48.1504 197.692 li
47.9131 197.692 li
47.8159 198.286 li
47.686 199.064 47.2974 199.518 46.876 199.518 cv
46.1416 199.518 46.3145 198.513 46.3359 198.33 cv
46.8438 195.306 li
48.3667 195.306 li
48.4204 194.992 li
46.8979 194.992 li
47.2324 193.005 li
46.9951 193.005 li
46.8115 194.021 46.2495 195.057 45.2563 195.089 cv
45.2236 195.306 li
46.1416 195.306 li
45.645 198.308 li
45.4399 199.507 46.1958 199.755 46.7681 199.755 cv
47.4487 199.755 47.9238 199.085 48.0532 198.308 cv
cp
f
53.0322 198.362 mo
53.043 198.297 52.9995 198.254 52.9351 198.254 cv
52.8486 198.254 52.8159 198.308 52.7837 198.362 cv
52.3516 199.269 51.585 199.518 51.1313 199.518 cv
50.6777 199.518 49.6411 199.215 49.9541 197.347 cv
49.9863 197.142 li
52.978 197.142 li
53.2158 197.142 53.2373 197.142 53.2695 196.937 cv
53.4531 195.846 53.0322 194.831 51.7251 194.831 cv
50.4941 194.831 49.3599 195.943 49.144 197.282 cv
48.9067 198.708 49.8247 199.755 51.0234 199.755 cv
52.3086 199.755 52.9888 198.589 53.0322 198.362 cv
cp
52.6001 196.937 mo
50.0298 196.937 li
50.397 195.241 51.3799 195.046 51.6821 195.046 cv
52.8379 195.046 52.6543 196.569 52.6001 196.937 cv
cp
f
61.9854 197.336 mo
62.2119 195.943 61.3374 194.831 60.0845 194.831 cv
58.7886 194.831 57.5791 195.975 57.3521 197.336 cv
57.1147 198.718 58.0215 199.755 59.2529 199.755 cv
60.5273 199.755 61.7583 198.697 61.9854 197.336 cv
cp
61.1753 197.239 mo
61.1104 197.617 61.0024 198.286 60.6353 198.794 cv
60.2466 199.313 59.7173 199.518 59.3071 199.518 cv
58.9072 199.518 58.4536 199.345 58.2271 198.815 cv
58.0107 198.33 58.1079 197.692 58.1836 197.239 cv
58.2593 196.828 58.3672 196.169 58.7778 195.684 cv
59.1558 195.219 59.6631 195.046 60.0415 195.046 cv
60.4624 195.046 60.8838 195.241 61.1104 195.662 cv
61.3589 196.159 61.2402 196.839 61.1753 197.239 cv
cp
f
66.4351 195.511 mo
66.4888 195.187 66.2515 194.884 65.7866 194.884 cv
64.8687 194.884 64.3828 195.878 64.2856 196.083 cv
64.2749 196.083 li
64.48 194.884 li
63.0112 195.003 li
62.9575 195.316 li
63.6919 195.316 63.7671 195.392 63.6812 195.921 cv
63.1841 198.848 li
63.1084 199.334 62.9897 199.334 62.2876 199.334 cv
62.2339 199.647 li
62.5361 199.625 63.1299 199.625 63.4541 199.625 cv
63.7456 199.625 64.5127 199.625 64.7612 199.647 cv
64.8149 199.334 li
64.5991 199.334 li
63.8105 199.334 63.8105 199.215 63.8755 198.826 cv
64.1563 197.131 li
64.3291 196.083 64.9233 195.101 65.7544 195.101 cv
65.8413 195.101 65.8628 195.101 65.9058 195.111 cv
65.8081 195.154 65.6245 195.219 65.5815 195.511 cv
65.5278 195.824 65.7544 195.943 65.9272 195.943 cv
66.1431 195.943 66.3813 195.802 66.4351 195.511 cv
cp
f
72.3638 194.776 mo
72.4185 194.485 72.2456 194.247 71.9214 194.247 cv
71.6294 194.247 71.4565 194.463 71.4565 194.463 cv
71.4565 194.388 71.4565 194.333 71.478 194.193 cv
71.5112 194.042 71.6509 193.167 72.5259 192.422 cv
72.6343 192.325 72.6343 192.303 72.645 192.271 cv
72.6558 192.217 72.6128 192.163 72.5581 192.163 cv
72.4614 192.163 71.4673 192.962 71.2622 194.193 cv
71.1548 194.863 71.3276 195.295 71.7593 195.295 cv
72.0728 195.295 72.3208 195.057 72.3638 194.776 cv
cp
74.4165 194.776 mo
74.4702 194.485 74.2974 194.247 73.9731 194.247 cv
73.6821 194.247 73.5093 194.463 73.5093 194.463 cv
73.5093 194.388 73.5093 194.333 73.5308 194.193 cv
73.563 194.042 73.7036 193.167 74.5776 192.422 cv
74.686 192.325 74.686 192.303 74.6968 192.271 cv
74.7075 192.217 74.6646 192.163 74.6108 192.163 cv
74.5132 192.163 73.52 192.962 73.3149 194.193 cv
73.2065 194.863 73.3794 195.295 73.811 195.295 cv
74.1245 195.295 74.3726 195.057 74.4165 194.776 cv
cp
f
79.0601 195.511 mo
79.1138 195.187 78.8765 194.884 78.4116 194.884 cv
77.4937 194.884 77.0083 195.878 76.9106 196.083 cv
76.8999 196.083 li
77.105 194.884 li
75.6362 195.003 li
75.5825 195.316 li
76.3169 195.316 76.3921 195.392 76.3062 195.921 cv
75.8091 198.848 li
75.7339 199.334 75.6147 199.334 74.9126 199.334 cv
74.8589 199.647 li
75.1616 199.625 75.7554 199.625 76.0796 199.625 cv
76.3706 199.625 77.1382 199.625 77.3862 199.647 cv
77.4399 199.334 li
77.2241 199.334 li
76.436 199.334 76.436 199.215 76.5005 198.826 cv
76.7817 197.131 li
76.9546 196.083 77.5483 195.101 78.3794 195.101 cv
78.4663 195.101 78.4878 195.101 78.5308 195.111 cv
78.4341 195.154 78.2505 195.219 78.2065 195.511 cv
78.1528 195.824 78.3794 195.943 78.5522 195.943 cv
78.7681 195.943 79.0063 195.802 79.0601 195.511 cv
cp
f
84.2983 199.647 mo
84.3521 199.334 li
83.6177 199.334 83.5425 199.258 83.6284 198.729 cv
84.2769 194.884 li
82.7319 195.003 li
82.6782 195.316 li
83.4126 195.316 83.4878 195.392 83.4019 195.921 cv
83.0776 197.854 li
82.9263 198.772 82.311 199.539 81.5005 199.539 cv
80.6157 199.539 80.6479 199.032 80.7339 198.459 cv
81.3394 194.884 li
79.7944 195.003 li
79.7407 195.316 li
80.561 195.316 80.5503 195.349 80.3989 196.31 cv
80.1294 197.93 li
80.0103 198.6 79.9458 198.988 80.2153 199.345 cv
80.4214 199.625 80.8423 199.755 81.3931 199.755 cv
81.5767 199.755 81.9224 199.755 82.3433 199.442 cv
82.6997 199.193 82.937 198.783 82.937 198.783 cv
82.7749 199.755 li
84.2983 199.647 li
cp
f
90.1733 199.647 mo
90.2271 199.334 li
89.687 199.334 89.4175 199.334 89.4604 199.01 cv
89.7954 197.023 li
89.9575 196.019 90.0112 195.716 89.8169 195.37 cv
89.5796 194.949 89.0825 194.884 88.7153 194.884 cv
87.6675 194.884 87.106 195.781 86.9761 195.997 cv
86.9653 195.997 li
87.1597 194.884 li
85.6694 195.003 li
85.6157 195.316 li
86.3501 195.316 86.4253 195.392 86.3394 195.921 cv
85.8423 198.848 li
85.7671 199.334 85.6479 199.334 84.9458 199.334 cv
84.8921 199.647 li
85.1733 199.625 85.7563 199.625 86.0581 199.625 cv
86.3716 199.625 86.9546 199.625 87.2358 199.647 cv
87.2896 199.334 li
86.5981 199.334 86.4692 199.334 86.5444 198.848 cv
86.8794 196.839 li
87.0737 195.705 87.9165 195.101 88.5854 195.101 cv
89.2554 195.101 89.3198 195.651 89.2124 196.31 cv
88.7798 198.848 li
88.7046 199.334 88.5854 199.334 87.8833 199.334 cv
87.8296 199.647 li
88.1108 199.625 88.6938 199.625 88.9956 199.625 cv
89.3091 199.625 89.8921 199.625 90.1733 199.647 cv
cp
f
93.6401 193.253 mo
93.7485 192.584 93.5757 192.152 93.1431 192.152 cv
92.8296 192.152 92.5815 192.39 92.5386 192.67 cv
92.4849 192.962 92.6577 193.2 92.981 193.2 cv
93.2729 193.2 93.4458 192.983 93.4458 192.983 cv
93.4458 193.059 93.4458 193.113 93.4243 193.253 cv
93.3921 193.405 93.2515 194.28 92.3765 195.025 cv
92.2681 195.122 92.2681 195.144 92.2573 195.176 cv
92.2466 195.23 92.2905 195.284 92.3442 195.284 cv
92.4409 195.284 93.4351 194.485 93.6401 193.253 cv
cp
95.6919 193.253 mo
95.8003 192.584 95.6274 192.152 95.1948 192.152 cv
94.8823 192.152 94.6333 192.39 94.5903 192.67 cv
94.5366 192.962 94.7095 193.2 95.0337 193.2 cv
95.3247 193.2 95.4976 192.983 95.4976 192.983 cv
95.4976 193.059 95.4976 193.113 95.4761 193.253 cv
95.4438 193.405 95.3032 194.28 94.4282 195.025 cv
94.3208 195.122 94.3208 195.144 94.3101 195.176 cv
94.2993 195.23 94.3423 195.284 94.396 195.284 cv
94.4937 195.284 95.4868 194.485 95.6919 193.253 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (001x002.eps)%%CreationDate: 26/05/15 3:09 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q0FMNcT!mC^capqP)oi^?a:?2m*!Mb-R<XD:'_CRrP&7/1"SUPQRZ'6<>8)U^Rf`5o[<qB/mFWQ=ct'mS_e8_1op<3qf_;?%.nN0nPH(K-<F&Dc[ZsC]GO&nLY.mY2eSQ65Ao5LBTsU+CTfB\oAgPF5pPQ)^T<DG)GM6cEe[jR'X3p3S=-A9P/'[-PjW0plP..hg%U\18?G,+X%R7QN8o]L8.;(K+:?^4qqQEq2*A`\47Vr"?ns*VN23\*eP[LoT)P:A5t:`!)hh^NfRq:>>?ekVpe>'99A*d@.*q+SMp%f6TUD#[ehYP(f[c!tdhLZN'(UcYDqADQd"'eQ^;=$u</tC4B5ETCBDpru&,*1i7q1];U.c)jO`hcq'Go/5X_@TC-o(&irT5Btsi(%8EptV0R:]Ddae>sfD`+>goXSV[19$0^=,0Irss3SehfsmTCg7Y:SZLOCt<r`SVePZP3AiEXYlb+kP]Fro$2O]'tBmC^dY*k?L,G#%[i.K`pQ_Pn>C[kVXScAi;!MHk-gb+/U3/o/>W+DpB`[5orG9SJir=m%$'g`Tc"U!t5A@f5$eE-E2dpAp@B`Kfp%NcR`C_a53ZZ,/%:;,p&TrB:hqEaVs>/L:ts.:JBII?cC9nkXs<8kp#8!:/JkHoeu%q)_UV%*Va!'eFp+u=->0/STP?=a:QK`hMKhrOLg4le.#ri%Ar%)?tZE2LZDK*3-%6=&ndiWo?rWV,,9GI%.i](g+p7n<[Qk.Drr!L/BSp3c,hZfJ]&#D.FF[Mkt5/9Aqi-`);9jQ7<U<bsDH''FIs>%>fN]'Z=2\GjYB"QQg$RG@u;qYLUKaGig]kV$LEJ==:4qYT3)Ht`-Y+K@?9mkb@$D#'Dp$'6/TXFi@"WA*oSKt7-R*T`ZF(dp)F#U%'`3Q#;JOYRYnZm>5I!nmN%dFZLcM:dV';`KIaU/hcRJQ%GD[>V*AQ_e`(SI,=:4q\T3)aI6/$,NN/ebS`DY>Q5/NO6oNgf*Ic<$I%*?BY-UmNA05Htpr%mT;,;D+YbV<qcNS-KUHc9H^#."7EG=GkOddtRLc@ZQmT]P+paAj0P."TO6gY]lTnZ$5t$m59<LrPMD^7JRo"%7qk<I`D8%;]h>.]BCiZ$.7[U8gs(,3o*XY=`11iTjTRh$pm=sj;sYp_BtKUILcHOhhD^<RQK#$qg?JM,3W2H&V_aNW1ECO/)d5Us%r1j2Uc?B%Z,0ac$40po;>i)C6c2$5X5CD5I+[4B2;<Ci$`rRpSPf1%:C2dE<^:[`T07?cb-1VTH;Q2(NIu6Rb\:<a->e0?rqj7:T%Uii4pgqWKRC!to,?i&*Sk\nZ(D-Q@65#7f\J*F`8D>N#c9E-<d`?L#GJ*F^GM>h\udXRGOO32M`48bo78q6G>oIoi4d0c=K0'B@L%AJU'u5ER#\NW-DlA]7VB>oE'[`-h?h]Ph<WMHMR3J;(/Q?[u!N29Y*[VoY"q]TC1sEh614>W,7M>dgoMY42"f$r;a_!rIs6V\GdX%KNK.h#cXXK/$sKtUq`R=aXl^,Q3,Te]h:T577jDlBN^3A[dLS_-0\cQRmUj\97n->=qd3Gqor:so%r>]dD*IV7EO]%MR4NYQHDWb%n#%;q2q$S?!+tFeRIo>mOBMc/,Q'4/m=.IuB$d%B(Z+jMTfpEhi>:F9VkZ_rH!rD`!d%Wm1ao@^V$4ZWN%RP!`kP&mGJs<5i<ZCq%V(!u^`ra#.YsN[?W[dmY$*PAARkborL)Zh(,j#4[Msum0(AJigJGc9?!=JkgA_JZ1/(T8ge,&,<Nk(TK>hKr0#Q9^)CiHBKDnC(B%bt*KYH2i8gD`_4'E;E-Qj52U40A5roXC?\&d'dKVEcd&WL6p44B:Qon7DDbba4]aDT`7ABP"0O`S6PJIaqO4@(8V62/33<,nk'`C%bb8r!YHe(YCs[#O,A9Y7[V3#aoU-o^G]W[Hq[@:?<9,`IW0l9sPhW'b'58>2APn:M.3ALBkB"M^j^I$,P)7Pp*+qIaDj6RB&sp[]%p@>It;U3/LGCJe@>!NaT;pHp+R9H=aZntC'9@I`Ak$1(`)H0d)`engFiZhTjB;dAYjl!c0nq&!0offAj(#.\dSOk#$?\9X.D&[+M%Q_gFX-sM_5.,loZ1f'^,[[FKF>X3O1hF<HHKmt`hIf$%on#67Ha,9G=c8sLMI.#9%rnJ`(paXEs"d]G7/bfdcJj7-bPN\CdfPbcD%i-=`'Ui5j)?[11q27l]ZYP3P#2WGsQ?6X*JcRH'F23gf9Qe.$E/^\2@?YdrE<+;:^M6Ba_AgS8cTUn.^7S0+5Zpn,36,.9n5?E3*%s5RACRLlppd;Cd<G7_fIQ@_%p[k>.5B?["QY.%5BnRiP+p(inP2:A),r5)M;=$%Wi@;?1=FX>=13#CcuUAX(e>bh3mjnWlq,G"&P%Qq38r];R7tokg^1nN"U"NR9D/qIJ#4j_M1rB*mjj9Y.3NDFrT1h;pGQXfErB%bG5?bsflYi+>KoU>4u'OW]cdaq%`%n?2>HImhQu%q$u0A;OB^ADFqF:H8Ta3HuUa<Egb6I4pre%U)h&,VYZ4Of:YNt[RKT5eJ+cZ695a9Zq;m9ZGlH#6#.1B6rKr-SiLq&gN&/9:N?K;%b&.!AY5lIUp\<%Tg:cISn&"HPkdPJYnC__K^I/j>1hmC"h2=sU_cSTq:0),@L+j)e0tC6BHjd6VkdB)_r'[Y!3Ks&cB_TpM/aB!.%^+k'cGU.Dti;+)<81:[8c9gD5m;P59,kr1'.nn>rMd0I_lsp'QjaiU6'W.c@%@$Cd,.T:NjX:&eA'&Qg`[rG75O@.SAl"b^<V3lO%DhZaYmYZ+s5Q8%=C:)j^1ZpiFEaJ)1[-?-Cq>G]rK$s<=])*/]jGEPWgA$4h4.XquHa!7WQ'fm!>HbHq7Ao\\`KDUPIqio89QH^*%gi)@?oj04SWOF[G'pT`':+]$Z_TV!fs#^#C@dSB?oB!\]Tr$mY[772K<9le!c"cg\dV05pqQs+6<]WeRGA9=Crrl1J5U3aU(D`do%>,U*ZJrs,*&RPVP"b]B#)QNEnP1tt"ZeBQeVE_bM;qU%)cJNSNW0?$)r,b/d(Tg`UWRgsfWL\SH'[-M<g,LB31f'R)5lE:>!reMV%S_h,a'dt*Z!^-B>f3YC4)YNi"V>X8@$YggB\^M1>2@O*orUnlZe@T'?57*G#8uGa?CXgZ0me1C&;7.Q)Ib1&h?pl3p>\mVOD;>"a%Sps_n2,\)UUJ+:O3u.&,+Fus!]=]+8Hu8]_\$C@12eq/:m\&80:Qt]IXsE/u62FT1)SO0b13["!W[3uE\b#Z!)nNnD8BI'K`&<iE%iS.LeD_<+Wpn"pY]_NLqm),/S!;]JhQBFb[qaW)<"n9c>!r&@+Weh]1H`N!6%bcWO"@MC9Mr2<FSlQae@!mRFl"_IoM?%Y]-Mh0Z%:>Z\^gJ0!+Y$jkG#h=cRlg"X%0ZmM>&q*.c$`j*<(`4an!CJ>L\FQj.\tVFPphq!Er)J56C/d6DPM`[;bam96%F=<i]Dp32>,+pp%SqOLs#ms:5jiWQ`X)mk/GIPRak&-1hO'C-QWIKB.b*iPV47@<2ae/V%=/-'*QLU^VHq3'%If<EFn\Y^dakRqZ_t1D4GFLb?jZB"?%m?AE>Y?J,-"^6kGJ34_OIoSQ&b%h)h@_2RD,lWkbn@qPK<O^3,8%hdee=*ItD^G_n@;YD]?[mBXkRr0jce!ZKF=SagEL-PV%rCSb%Gqm<_\gr7>7!*mdfmSUKlE5jU'l[4QGDF$%6iV[u8+AY7p=&E:^Ab7joDAr.`t>kTd<b\k<<q!PfkT+;I0AQ^#L(4\#H$H7l+it+%^",c>V>TfJT@f'OOpd#3/H9<R&<fZA^3>),kPs0AfPT-qr]d[cOcGs@IQDC)'"%S?m#r7IO';M\A$GO!k]0^i,amu1rt9eDf_5oq%J*PS@a1uT7ZC8`T_LG^t)"RX=qKlV2S?Vd<=-*=j<)*Y(*KTpoGP1+56+qP\og"!fXSqS7aRR*jQcs<U>5t1#olo>$ZIm%Jo`+Ki%G&du9KTHui&;1c-eP[:`npB.N;Q)GPWcTuS_sqoS'!e$L*%5@4,C*C*^Ah0hCWY%+)u]%C"t)'oG&#i:kHA([UA!JNZ;dt#.^/M7%^%]"FEm/RGGA<C*EMiAD%_ciOf8B6=]2AD$W7(M6287\eGC$Hp8uKfO<3@Do@0-n'/Z5^sZZfGc>dVd)pZ(6qJ(j2=Yr2)OVD"@'%AL("!eqFo3@?L[::*%R*O^_Cq0TP>K-;bGkCt@KO#W_2mMo(*lT(6MXrnnM&U@jS#Pl+8);/2Y4Ru^/,Y?Ii`IP\tfC8bbQ4^]m8%.!fRCh,^HQ5HX(NYXC!r,&;#1r5DP$lu[!4S\sciY-iH7c!_Vm0b#q7>#P3U>=ScgDEHiGdk*?a=&N!cedBA3]2e]Gc^AJZ7F.&l%@Tb.UGtbR(j!sr:csQSGXjUT_1/2.I9=>)>K1K?LRe?(RE#gAs.tDi;!_nSQ!UfT2)N8Hh^C&F2U5Fk0>BiAk-;O*3HFHZ2b'C2=%X$scl#'0LjKUKR+XOdATY'7GZnFOD8?@-HF)-;D@!OA`2&Xt+,#t7Uo$o?b]&fr!-BLrYCNicN@GAq%:JRcX[-C_0so*U]YTX1jh%oIA*EB6m(mfQ-)UQ>aJr"r8OKnWaSq!N4P#b[tR(4>(U=n[!e2>h138i;5Bns6tXpIh48db?iW(8+mk4Y3Jk)G%>M:=^8KV-)*t.%61/4B&b<_O>.8<@N[X,"*o;%6(Q1GKQh@GEPm#(u1V[#jBf*>3F9ON%PJYf47JNu^D^XFGkVrN[Z;Z+*GIh+GerS".UXk=`cgTQ/%$<J;*0_lJbLNf(gZ6Ui;+p+<-[o_lHrrk!i40Op(4&$t:B04eL[%VTNrq4__duVo8rhrl"s*Q-KXPLpGbp>nn/3=[[h6<5feJhM/%"p/!mq<>;:HH@spB`3EOlU#r7lkE1!_J,^"[#dVoU@luNe=3jV\(>>BEd`4@`NQGV7ebhh<9nuA^tQ!=o$N-%);ggO%BAfAeq\^N%;=F@kX4qObI&4P,?)A@;#"Pk&WE($\+MX8es7BJ)Wr8\78>RA@nhE_c&]B3-'Q>iRq:TStI6tV$81e^D$tO7R;FN"alVs>/Fp/;L%\%eWFH5/F5IpB*9Up`hTl7c`kVdZ*2`((j^4dRa$Om6ke::4-i+7s+3\CDP\1%.QV2=,@5>-D)'^fME`NX4[(q>T(2J!7VJUjMj<%@fE*m)OLlf)Ih0P/dZ'%33-7#cJ?fmq\97ZB65lb2-S-;\UEST";Nu&lI_[FA?k$<`JB^';E&"Sob2Ycd"2a,PNA"!Zb1$#+6N=C%:Qi"mB]cV+U.CI@OGP=PgD?O>qH\;EE$^<DDk1VYX<fup_A*K1"WO#6A#d6%aVE376-"Z,4VS4Yk`T<"!N-'c&:GB^<K0U4q[l[=%'^L<Z_l$&PE+57'gKW.11&%#K2r;(C.YV?^7JeFT2F!1o;XO4^cR_(9U\4M.Q?p)N([nlbCQ-]T<]bKX"t1/t'IST#i7+cUX94=U%-&c7$oRPWNc-f>CE5K)rfk0WbijrG_$GG#1cEK/P\4?])73fI.hp#K9qst`F"^%SSBQnp7*5=m<he=gSqa"fmgWlO^'jZ>a(:*Rf%A*'"uQTqeB#F,FW_n4]ZP\[\-56D77UN(%Vhc^U*$KVilosB#e[8&\)#iD<mXb3Pl;!b=5MBJnA_$mNKU5*c8[ItP>$=W*BCfu%c%pV&+o5@$E\HVjh^(8Vq3q&WmH"S+PNI_%D`?+9?:KH+j<4.Za:@,^MH)Q\1q>n+gWMcFKKS8p?!L9`cb)M0V*`_3hEe2kiFdYJ1V%nuSo-34_A>3Z`b2$HGF9?--bo8m"r1lVG!B)%2<.$l(bG:k\Kf;Rl;>oChkOVcW!P'h!B?3NN'/>ci/7n'+.64lSqqfr0%]OJ4$(%)MT(*:V:-\@:QB4SY8Y;4:n9hB7UI'5cAD3<]X*A'$GENOB996%$IA+^LT(li.<"3=Usdn2iBRmZdt,QYFC53kpmQ.L+YR6K>7SG%=\ZX0SLeql_<s_;Dg^B3fTm51Z82eUNC,YLke[B7$rkb@UA@CpiHMHM7@%BT"H<m,BsYL<BI+<-Sb>RSo09K*,[i!d^V+rs&Po9%%-7(G([/iV)[#;3;".#`d'4XJ3KBU3PotQ6$dJ3Jup;2@nXXWV979OS8\pDCF.MtlGU=LdfaoZEh+A+KK9!d4978-l_Lq>^Z>sVWs%:@RZVSrQm1T&:%qh0YD8C">_LZ:Db>,KkJn9%8j]CYFE5k1bD1*`hi8b'@;mYa%Z7M!hkF:@%q^2,7qXhmGD0XL)B-f=i\mHq9B\%ephl/eUIPIH0)6`&ZjFRG,(AtqDUN#2s<TmoK9\5WDq9:-CJSt$Pt/@STh%(.sFG<T\H2cpUDGZ-(3X`*hi`F'6^S`ZDHr,_2B+T%BfNK@.hPm?,=9PE0YcCsCRBbi3>W^+IAI;7OtJGToU4p+%M:"=S!R(ciS#;W"!*DX.V'W\:40\*ZKS]6[bT^+AA(PsmC5%W%P;NY%`n:-Ua,bi(P=S;6%Z\"lkigB&iPW"Un&06FMS(r'=<#ME6&bTF6k80""<D"Jo>9@UV&*nq>-ZYt%K47Ngq7sX8\)g8V8^]?Sr2D>%D=,r4l9+k'Hm9/&e]j$/G4E&To=6r2[U(E^Q>SXOVon#qRIQE^W4VApjkSWo,+VompfpI'Npl>adRP<!^&60Q(4TB1;bKV>`RM28%Ue&&hgNh5[Sgn9"BjIQ^"NV<B[EXo%%<^E'/`Y.O\m&Bf.C[N:<N<W+V;:<<+d)272V)7,9C:d<XTQ2I@I:4'B?RD=mAeZ]\<Deo%jkG^aH@Gfe?HAU1equLE>h=L8Zu_duQ<LkGg.O#%b>rBJ/UNMkZ4L&//Nm2.<2TZJ87d,%FmN:$m$bA)-KVW+1T+g<ERpJCF<cpf%P&3)qlaIcYlZT=U9Y[hK&%d?]&K81T2#TiSc-A]<?H]@(f$E?q:28?+C,X\OFqSNNkP"!P!':Xh3dY'FX'P,LF<36W,=L%6*fq;s%?+eX`Pa)Ds9dZYu&K6)11l?1GM6sHhrKmB6$#B10oD%.R$u**<C7J:iQ(UTToXi\^*7i_IbtdFdK,\*cRdJDF[+[g*G(*c'1\7e+%B+Le83\Eb*;H_^Y$Ye+XT!;=GgVJka[guC4@f'5'UPX):Wn^oPT@AqIK)-ta9XbL!)kG_Je;hDeHeE[h;tdKD$ug5/JZ#[$[,.:)%(U[<$W34?\YXVFOk'U[=?'m\_dO7elf94l:cH=]*A*<CIQ100u^X8<ZrNc9k$Z,HLq;OB@;)@tDI#^%P8Gej0;2$IQ?!6Lu2gT4&%Bf@,h90nP\k;I5>TLKT/BNG/Sb\bsTK)1A"H7P7tkr>opWUdY]F7uH#">qZo+!8\%;3]3%^)GJbcfS(JXO2p4Zh/8Qgusc_T<$5+%\%Y>"*:*6oQSquRDjTX8P@jDg>CW<*Q6&65Sjr2"UdK3+`^Ud@)VqO'a@o=(Tin_hn*As2>pZ:DA(pj^QCl#4/P8M@O1)5hBSA@V%pV!m*VfR5$f]`.rS/U,F61%pB65mOEQHl*Y;p\-E?Oq<qa7jeGq7oJ'k*kb4NLkXt@a`kF'O,"jmRUCamBtkA&(U;`H#%7[\C($L%<+r%.cT>&gZL.tkogHCJ4=CCmHF-OqIera4(te'4alf8!;:5eep<TjI/Vc1Z?qHF8`c?$na+)fM-aoiU2Yt(q$o0iMYFY=]@Oe2$%gInMFs4S!"e2gp-8o6^DQ_;`kDpg&8@]i],GrD9tUT\FP2eb$kLQr%kW%th:^[(:OU%GXpP/g%YqGs'J5Mq=iXM"R\!R7ckr1^FM%RU'Qcp,3_84\`aZT:q6^ho^:P6+GG/?>cRCd4AuGqBAP.]k-'P6I49Iip,rr5o\XE&!fA<l5rZ9mJ)AlWm7[[%_ReHT]E;h2R-E,%hq(W;f&HV>TCU04rQiVECNSZ>ejnSr<pf"#/oS/?Zf0@co\I^DVq-b&h"UI7Qi(t@p@JH0YFhJc9_*i"/^B*`%:_*(=@fcrIqkkL%WF<op*:N<njaZ"^R(>kb6_BjGHRfW#:G$/:lm;So8*+I1IHmSp0qDBXn(pCg5$VoA.cF01:O]JO4XCduVGF)G??\cn[WZ;-f.O]-%l0l0$gK4.2@X[n[HR_gnpn,:gT/SdL!hNa6(V,hLnFSd?RS/?!I428"]2/;Pp6'k[B0tMTdlVF8L-GRK;RV&Y4_5?)qCHPIKtRrO%rO&Y\52B;INLS:mDp?o*_f1LXVIoQD(.+XZnjfmkd&6c`k*-i\Z$]03afL0.Xm\lYo`a48Q2+G;e&@5Ph+dUMOBqJ(b2%uBSV;I<%F#%AEAi@1\*;"@EDX0]<$Ds5!)&AMS$E1kdh%s>V9Jk#:c[(7YVY"KInh$Z'p[)1hI/dI07i#Ope5Gh<J03AclKfD<`gJPP,n+Rm%Ejj6SAnO`(><cD*X+?cV=,;iM'rUj+(H$BO1_XJ"m`9.gJJib)K/+=g*GG!;Ra^,8Y.jn(!SKA26??em,HSjR(Y=oG?QkCIe'jZN%`kAnM]?T>UHPbBa/4"dHcpjl&n)O#47bN1*"nO=EYLmMgCfEKg&K8';\'KatX0].]DPQ%PO4p#+m]/MQDg]lYh=F*[)P0DS\"Sc_%H.S=S7[Z/0C^6lAWfOr/4$83RHM\Q9e#@@ho;qiG^(T0DZr+1N5(X_Z94`_o-+4Y)p2DXK^dKCRD%uZ*$dY3kCu.;M`^V&7XhnB:%/%QuXp[n(-**CLRrdH?QS;7e)Unn"+pl<ISD<URYISoT*\J+^KrlaWp!V'Orkn)eTA3&OV1>.(1=.`f%E^)J9o@44\l4\X^&9Xb=%=_eEE,HP:jhOXI0E7hC=mY`3r.OAn6jVFJ=^d]ct5*h44X9#%\o*/H9TPNk1>/]GM,=6<1pJEH<SW>S1A\hVX-Vj1U[^%-$pLSi<%UO7=o5A/B2qcVk,TfTs7;>6"$aKkpSI?^)lolQXM+A6#O6KutU$UQ;)Ak5)bbQ7#N/Lbb1d[od0nMr'*d?VbEm/r^=_'I&3L:Ys1%4sb[hd0Gbjd6I1VE;\"tH6#,"dn]oY6MlOqmq(_XTd:au"EF?C4q8T(/63L#(]BW@$ep0RK.;esm&S=T\j&)cm6#bddle;8nt6oW%NAu!lF!$47Cu<qC,8/0MH8;Ye@I$,8o2P8jXZG`\PTKNZ+p"B$DM`^BGErN,&DB:4*:ehlZW(,&+,kBue(`3V\'*W2.>mNN=\4!d%JR,n\bt;V*L?Y/<H$+*@9kYN5SV((`q^_l8iaSEaeP<HWD"RUl]gQ&7C5q$m1^.e#*1TUaPqXkZ=[;GQ(c"cXD7MDX[l]BJ6cak]%0Z$ASKZSYL(=tS831NY^6GYLEI8r:VR!=mAkM8K)P$]XCbrXi]*-U1=VJ^i,7rhd>\s/QNj.>ptm5FSk#"Zc0dR!)Io&7Lt(f&\>%h9R#T]Gem>"i\VZIQ9q*QpG)*4+VWnm(@Lo3XM;bcaT]RmkWLmKgcEl@fMNhG='ok6on<B"S;8`eI>La68_5FXn7Q*BJ]CraG%`#%^1!eKK,!#3C9YF+.CSqLh=8X%s0@l^XQqLO&P2RQpHqb<3Fg]pTHs@d-rT"RSMPAm`m:7Hl25se7C:A/)8Bdj6:]',Cp>rE\9%L(%%PnA@10/STS.oU]Q4kag`i/5^g5$W,@KZ86i@+ETR2En2M)GFSg7CP4ZdWQsp,;h886j,gd>iF+0a5lijOj1N7k1ZM'0IdlRo9ui%Q.n7T1GK;LWq2i7$G3hLeCg&s%c^G7#b+4cftO#G*KrN'?"[:MQ-$1(&Zco=%MfBR&A_BIQ1u\43$Jr4+H_[W'<c:6*$S@ofH!*A%I?ri$aK#'MMluAm+02o[=HIAj2`4kgpR,6\o%8B8$LVa*[YGi0MY*#*)k`l/IC')N0TK(!&0<eo=JUgu/GFt[0n_\0NmdPBHU"q=%GjM73pfR_@M\Z;>_[$6ls#g!=oPe\mU'Hn;UF?>K00ZNJe)gVriJ-95N;b-O"%TTJP=ptmSbW2CI[cj1I),\&lGSM/2o,TE(U8c2%0Z?DIJT.oM=PbL0cIeaLmhF[R:[p[pc/W(:nW3b&:6"R4fQUW,m[f+KT@cWPf=k=9&+u$/S?cR/RiA8@<:]Kf<5[*KHT90]Ypo/A%GaE!l]2fD`E"J7b&&+;@4!\e9Ic%.dK&>a,+#epmI:NXd`<HreOKZtX$G`5Deh*"F7L\PfU;5f'n>ao@5;[g_<2P3Wi]%SVX3q6U%.NLES@aK#S=#q6=G8]IjbHQ[sh7PT-#'7_5AWY3("91\I;V*[t>t^u'8u7/(6[8r$G<*3^i*Z:Ll;5X8jG!I,+pGdEAQg0^!-k62%).B-8DYfK;=eLb\cp_tq4C&^]X6.@a%I=hF1-UV7e9P*qCpJ%ChV@)ume+i8Ig^;(eW+>':t_ZBX]SU'e/MF8j.qO:8`A]/Dfe#^%\'RPs0#s/Z>VhO5GDoX"^^LXOKkdh(oo-.SiRS)(rm30&BP$'!_,0MCekQCG'.hCTp!!OEE=JI!Cf`HjhlB"/=,1.#!prU]9Z[dT%`tq@j5IC[e_h8RWA=GYYU3/[VI1i[Z\X45<G/ok]5a\\B!TPq;S%H3N8##fAn5.fV,hf(Fd72`Pcn?D@U.*@U(q0fB1c"o6f@[%p%6qamTr-HB?HR8>Qlj#+ZcTD"`\\OWn*AF)h:%j^'9d*s20N^tVJR1GG&M0M;h`/Kc)mCR->i@#S/0T\8)/A3J.Vf(Iq+7r(N%JRk%a%?kDWNijWNn<Ytptfd[U[dJ]6sJA,/i[a_Ybk9N!nQ@.lpZupE:lVR5ko(#Mc:kmoUF@*@'_V<(V.F&WKR-/MfN>3`K*HiL=!\(%s(VhDjli+rLqaj/VTo61"GX5WDQY@^hp\U<CLJWP`E<YRj-nPUF;0WqHk3F<pW5K6[7#?=eI_&'?45eq@\fT_qL-jC7d:jq^W0N0%ej@F6+)Wr`pl:etI;:#!>XbfMci#rE#TG)r&B?)=2-cQ1)2I=.@0H=r7&`=n,)/K2AV_r]cCp`#\a?eej3R._Tep%9/toWK-J%N)%.(1#4@SQC/`[-RS2JAD37B)")2*fKg>We#`m-,fe`T2j5alQfo0M8I/?1(pa$JBB_LGI;Bm@3B:GjK+6a>GVWiO])'nI74d8-I)r%U2@0@_7MXGp27+76s?-a4ZJr3',Rrd/:V]mhLKf$TAsV][&QqAq)1#'f#&*):f;[fi^3padY[:mB,g\E1XNFHk!$nRlb99_S%kQZ%+Y(Z\oa*G;8o\q9SDan#THg?;9H]*C3eK&ISkKW"?_a2$3[u`%c_69BTYkT^8`\7G\JCJsa"3.RF6K>SkZG:OfK"&)NB.r!6.pjb%jNp>.d.+G(`m(38cCf6"ho<j5Mp@t_3Au^63kpLA`^:""<t:iif>!Q,iQ/r)&s`iG3`dA56&RX*GTIF)&fp>u5q2r4W;*=p;[m5J%9U35P5u6Gl-N?hMdBEQ[Uf3ZSHXCmHH60+@,+X*6VZ-(.8u9Ja1q_?B&&SUiRB=6L8#Ls$4[)QWqbt+q$pOp7@JT;WR!c-L4B2?6%rKmLo2m;BoN9Gmkb5$3M7Njf[BoqL-$E;CJ3F9\_PW?TjK,M,YO/j>UlUNMrV-_qbOQ]N&:oCSUdi62A>T,d?,Tp1\G'SE#A@I([%aO-1,L'\"ibt2/TO5m6\o$_Uk3r]bE#nI1Ob`G4$gSbgTTbZ%RBmZT\?KD)KRoe]u&>.",ad)GdAoI0X^8c_bPh`#n<0Cs,lH#T?%)!s:-UE=+&"0j'DZ=>l>\D*+Ka;^aPgZKo7[kB+n%RX%?$WFYAjam65^d=<h&b>^G#-CE`jRKoQkJ'];S6"UJBi>Tun1frun=]D.%*JW".OCK"UTkQb#r")^.eK(gu1I)t>4anF'K,L[n%T1n%)l#gHl&ActTG3eB]Y(kN=P4fa,CV"GpZ_l0(7cd5,fKs.KeS$d^?h9T%S(hLmW7,Wtp.S^sQKKTff/Mi&%p\.iZfR^@-jEZ@3Agel(Ze6.O-cNM/]<Y;:<_@;ht9$RK?h&JN4mRf#)S,L$@EKKI5h"A'QKq(%8<i`/N!pc$B.:"&'/oS>`@\6V+cN!Y-<upD),?2XWNea91''F#FD0SppNQca6MX^(RDNUN*33Oe(c*s1e&OuQ-r(hFIMA=okE.gN%RDV<ND;AO^H9RQW[YK:!d#A"2kF;!-qH,j@`H:SD'^`X0ABZ%:9nigVUX7,bNe^R68kKMVKZN,N%()]j16EGtg4\ZH0^gk+.Bc5g%g[C:#g(3ktK^`*"7qR6=O,R/Wa9OMbn]7Xb/(rT8^5EgLRJf]F&4%'&'1a"r3W0ln4=(j9_&f"4S2@UX4YjNOD1?>b+A>1D:1):n%<3Q`Wl$913b`EIO,5^q-2_TK?='7^(P_U0R/;klQW10-3dpk.#q]NtVj,I#pBsk`#'.\4TETolmaO%>[q6@P$e6QMNO2.HV4r3Ql%E]]L&S6%ZC\RFk-N4KlNCc6*s;UNm<Z(_Jc0]SshMH8.kU_@iXEh,Ekmo7q0FZ:84K/XlAb_I/:]Y786iBm:%-CPI#Xc/a.3]J36%AtHu/q/B*#KdS*_jQr"jI(1=U;Ferd$dKNXF?\JfBfV#t3(N9R4]N^r5$[Gq8B/f-$Q,3p[=q38_g,$kkIEriDsOVi[dc0>EI!JS%3TTU/LUet@Z>j@u?-.THMA6db.-!r0U3?Qs<KnCukRWal.3"i-ZS\i=>k!G'7-'18Y%JrH>StWqC,ZZG(+JNYQs:Hq&0!Oe))\T$%h^##ofRSO/3=W/Y/SOSZ<!.307bjaJn0haWP6t$uD3IONSi2VYNajXNd)HG,3=V?f$Pism@`=a!:eUTUM1'P;_2W@M*ZICt/OUZe%4B1CNmmuBpZNl7F@OAG2n&*#l1QOgBO=qA&Q4!S?YmD6na+cc]3%?/\1A)WS7QNk*C1ZZfcs\V57dBYW1/]4.-]sOK[7hbh(%]Bk%OcbOoN1Z5i[J2OU_iB9hSA04&B4#ue(/S0E$o@HL_rZD_GSBJrMB?[s:+BMq.Q7*%\Bo5`BI]O!%X]86IFM6+@#@Z>'eZ@h3G'aG%+uW?ZUr)dn7#[K?(TeM]\^e/dRk)CI#[d')8GIBuL<ln.1lH`C2MlO74WCIRek'.U0nGopR\@$lglir$4@]g8mj/G">TbJ3ER%XT%B)@i:bJS*SC'uEgi]p;g]'VTFHe907d0'#,mu1HXNZhh@5VC.53;M3@>ZIARe(('gfq-lC.UR"^QF:hI\O-+$e%@!YR2><aSZVgm%ENrm'cFt##gURF!K]'Mf(Sc)imt518-Z:nD7,HU#l9>..2XAu;WRmp/9m0`h4#mr0cU+E'a$P)(eI"rm]8=V5lV<_G3H9ZGP2.b!%__^ZK;XI(YUG%`IG!!mUd&?t.Z^&M4e#5La%Bl4DDD`+A_!$2oo23VIE]1;P`O47"YREU'HMZCkGmM[!]=j9J48XoXY\RNL"?"?j%j#a>j<5UKXC/MNp^M^n-/KNa;#e$+m^b\]-of9,$?[]!Ye!2dd^+hfY#oNX!P,kj&e/f*pb@)nPhslqsA4u*Z&YP$PM-Ksnpm9I.%ZdcF:B\Sopr\$2,_W4L*>L>/EM:d)1Ymtai]I$MM=FE[a'cSIfEUEp=Y(jY^/kGl9CZQg[OpbG)ks"Zg6eCAH.5XG5\9OBMN#P8L%$>/A4D^/R4(K;,X9ofc?.N])3C]nmJrZ27f2;kWg.$TC-^Gp$`AHYUhcg_kDAZ%HE)Bq,m<Qou\9K$/fLAp"^n[%J3Ep<Gg9Gop]%0$*"jn)BjB2I0-3?*'5;LWZJ%hliP\2I2]WS8:+>=C1=GflTO"7fXotR8)jA&m-cWGOA6NRk?+U/kEj<QVA9,2^]rD9c'$ekNolW%/=VYKL7VX2*c4!LCq?9E3nFluWGK/=d3W,bM.Y3?mtsk$Rk=uCKRhBZZKZt\0CWN4Z*NVGEp9;UV,=P_JuVEO=kV_L\sPRl@qO3c%X$Vi='ZHeh_BC?D,F^;L`Q$#s$d,<@]5NnWV@1PC$be'.S8>d0$Mng5`m(@oaPuQPK]S/OSkU#s4"'q2P)Z#,(R.QOi*OeCZKZs1%.,p3R&[U`?mdaVoG]mXH3F\lCK^ZR7RS=UJ+odu(6Y4_l;2R%-,;N01#%56,l^tl#7lLm]P4f)c;].5)$Rk`$r>mfK7Igu#Y:`qh%R.PfLZ0tC(G[Fb3S@.55S2Uq$<&tb@d>CBmM)l5M\Tni&L.-sbr,Jm>MjrSVIg'\6VXORH%FbB*Vjp0u'cot%*(i1tUA^]M,1C<>%D9D`]T;u4fZ.m!8^H_]GNZ2f%C[T&No)?Q;#63EO;f(N>`5l`^@f%dt]&q;+02WPA`D0>=]B4"@puG;U\au@)&:Dm]E,N.8C[MDa%1_C@t0[qt(I'&@?kg$qg2#*NO\EC`:&'"=eWLK5pg:P(X*.W8F,I8d1;sA0AN"^um3#OcdSf'VP/i<-<LfeGU82j^MOY;VK4a%%r%5u7j-n6'IM2r2XSh4TVj#pKbh,8I-j.g[P/4qZbYkrF5_&K[AZ*G?C-^Lua%bAY.SQln:0)LR?S.&\[t/97h*.&\[l7!Ea#3K\\&%aa>*%N_,#Hr:Q#>;bLk694#-8N*/r$&CjVO,Ym?n8UaIp6ka@^rBV+XhLtL_UeV*3WWMh)JGdPL)(0rO*+A!CBd,BSmij)-77/gq%KlB1VR>$*J*cpj@59%D1rA9)L'`Y_a!TtrN:1\su%\p?SL:G&2*hC=',T_&[T;0/^Qh_IWOWjR]+fo>3>B@'88XpDYYEOlBin`hj%_=`&Ni@pVHp"trMRE@4*,/YTDIIB#*R`mV\h/G<!IcW7Bgp'nsVr:$]\>+BdiHO&d1C_6?\/R3pEQ!7!J=H,LT8%bQgl6;Ph@R,;%j@spYdr<AImca%&i?s<iW6Cks&TYeFTW"?IM7(s_iD"=RfYdGCC//.(gVa_?+27]_!/u1">3oJAUGF!Q-BOQ([:I==\K^\TYb;\L%lP[lnimP+c\7Xh"G'[G#</fi+q<]^(97>9.A_s&I*"^^<CDu%<Q,FC#L%Ao04bYALZ'1QF)[og1_lj:aC:aeQnp>HS-l2PjF0$q<%X:4i-H7@F(EHGG:]CI:d)H0TJdrQmYSL(BHQfEBJHkI+7XU\DA"--#"WDZ)5L10iH'scl?fl9pL]l0+XEP2h;Z#TE@pc5Ld_]MSf%Ia6L2A?L:?2s!a^a0h#RKl5fodX@C7jgb#<@>&Yh+%lKE&0Xpb\F,K)J8c>8:$bLa&\.+])/m.Q(WB1\YasO`/l($lc\n9Nk83Hd%QUM"jm@;V[^70mu<LMU/.aj$+3-I`JnaE&+]]76mYu+:\>^-&0p/H-6H1,0G.GWhWo&587V!p4RcHj[k*87>jQ57=ms,?1[o.9J]%>-He9XbZD!_l7Z\%<$?$qX2e`.$=H**k&c6m!IAJCmg+/Zr9+M+0I\<c?=kCCXnd5R$ljEDhOp`AKl&_X8"LN8;+!1i.JGdO@G5o%[!#]%$-S*NNbENI`ph1gs$_.HVXHhi[<=^4Q2X8!I#ZRa$\s3BY/2,0PqL8:;4YP$9?oJ^K))aWT(A5B'^IEO(8Md)8hUQ&q&&4D%@OnQea^$6ef=.25C;JT+$!94r&a#9r10Dc98Kb%)na6Srj+^:J\A`8I3jks56P>LZ6ZrCfOJ,\5-kugDg4YYoiheVVLQ<_lem\Cp%](&+f!je\A?&oj03Ijlf!s6j/B;NQQXbrU52BYIF%R9K``%A.n0ti4FmUAY"EQ]O-WP1?oiDCe%S?o>kij>FV$MG*n0OIuq;-FBt%J=@m5ii;XTZ/??uV6PHmb^+uSpL7qU%`g..Q-MbSrH,Y6+;?0Dr!ecB'6#ThQ!?J%AH1:Y#KDJpa%DQJZ@488cZ8(a7'SL*gG'23%9uJ0uW)cP&-Pp82`GpK!r#;a(%_IQ;"'qLkNEdnCmgK]to4,XCKUt&c,G7s&p[\oBnrVJ$U4)d,]'sEV#2``*4-AkVlBJWkB1-uB%!=.k+JYO.uWD_OiR,8rDPK?S1fn+4h3=*rKM`M_5L,SHc.Qgft7O"Mh*<h=Lc:fXOe%;MKG'QPP"WVpS's1*<AL=F_k^/9oioOdJ%@V,Ks)ir^p^AZ3Z.N=Vq1CV5,ls(#jYlQqQ6ZqrrHO-HM?b13T0g!mEHG]M665Eta*'hiO*'+J3+,Abo5`[feF;A9&c>u*tEi^h-%\2f'ADdX*V@]17=!i)GuB*$#s!=V/i2f9C=>^?UVQ1;0\j5p?]Y`U09!9<2A%bQ2fc2udqf_"p\IjlJ!;=l+Tqu`;V%HQRN=^1DK%jVr:S`FLU_UCq2-+23ucG@/c_F=CS<rQ#YdP]%Blgut*qq9Mt9B.i<;XCD4^V0mi_;Hu7#&\9d7B(4JM_qjW;gt>N!hWlPHW;^$"%7Qqd6GHY@qnD\u"kLfP*7<WNsr&CPOad`eTlX%>WB1#DS?GG].rJ&Cs*$Z7D+=D0)Hi8O1G5#$%h^rFR#T=2aeSg[GY2Q,j__\iX%]@S_4<kkp.Y@RD(NT[d0H`pduefAI9!r)O[a6Ud(:`Xqe?ekS%na?)Ab_NokR6XLgiEe`-EA)"!MpfY#\^rK\,f?q9-C!rDDY8qH%kDsbh?hA(L2[XlX]mfM?iu:)C4nMdiOm_6KHH?Q/O)LO+kgnb9m`6EL+n#"B/1i5hY?uBt$MD2qJ$34$:k<kTOYk(kIXS$ah!,\9%0#CB.TR6X3DtOL`(`NB[^M%b/:fc:\dQ?,c3O-5Pi*6/7T)0]*qF.FcJbS\oE3EV6/PC^cJ,"BhU2(Wc+(+A]rM"6'MqI&/0(5JL%FfQUH@hZB(0D\_a7!b57(k/[GOBH92bH_n%ont?@#2ST(Si.Ya?GAJonVr%%?hCIL_qi?llLaW(a#E:sIbn9+a8?*RV@7sX?]['\%W"X;_h<Pko:m5t&-ZH7roW<QEXOm6hn<(3V#r`Z]Fg'\!V`'N^YFdHgdC5`*qL*b/GdAU_iu:3#T&&ZjDTij1f.Y(5blVW^Urq?a%qSbHVIJeHjUA\9P41Rhqf.SP#bdFh[<j@eTont`_C#ndYp\I=JmJ^6KlFhX4'T3h83Q/U[1%!+<n+DSR4ZN/KIXR*Ik>jgFPqhb#%Es=Pl<^5QMq6BA\Mb](&$o3!9hWkuk@j=fdXF'oYGkmno,O7%tHi9Zt(C$B>'`24OkZe#L\NT!1lc2j0:5G`nikqCROpbA3mQq]p%R_sIik7H+%SWCJu'aZF=&!I7TpYV/OOLXN7-V>'(LUFDD(1]$rfiV2EhGrnggN!TFj\BQF1W[TX>P,/SkpYAK'J(d3WQ"bp)(Be$%C!n2m:R.A/g=XS@o?C8&mCo^%SWE_):os2#s12I&?iJ3lD1?Is]C3f9l0k6],P=m4WpoCeCW9QV.Erp)I%TZ\T==QlT%2]!U[h.Q%+PTKPLHF55p=\WjB(c)C\Gj":*UDTao<mI3fD1A+r%iJ8G*#7EXu+^I>.)WNk4c4XSaL;ONT8O]n`JVc3ko1#J)B_^AUZh?n$U_6%D1rBMam@fm]K!YuAJ^uI;Ten2e`*#Y[j@<K&%8>*n$d^Za-]$UFC+>0:=m(3q9kg_11%Thli!fH$@&hcSm/qSWe^9^:ODu&lZ=4P%GhJTM*PC_(aY$l44++L.Dnk!S-I:Gl\DVdu5;.&'+hr00+%.YH%d7eK[aS)d;NX-@R'4`a:8b;`/iI=1SK*U3XJ3E.9K/uN.cuo^%oAn9JcVdt/`d"nd-HShQji\GVBkaGF"k[P4X0B']dg*I->&ZX*bb%S\9&Y4l&8ORrfJ(a-TAj.eG!iFY/3N?jh&+1dlI8k;\$j&:%lW.*1p@RN^l$?!N!jX[BFrFF@%uGCWf1<SA4]gOR>'bb^]Y+#R@P[!2e(3emW^D)ts(WQto*<n!c\nX#RpGprh*#Uc0kkig)YG'G%D224g;Q_s>YmAZ=DBn?:ll?$PcP,1jd)9b;:NM*JrIVi<CW"Kk-1V^MZ25%//7eQlj]o?l**H,*Y-_;99)k.=GPCglV7DZM7%,?H%O:`Sf]o)Dh;1*>mpuX\@(*>Z,2<R8#I*aLY$a%LeURgdjbV(q^&7LpsYIsApP5*s@X#^csjF0IAG@jLb-"0:">qW0gh*74)M3-K&%<0/(bU.W`ae13O^aoS\Rdc1rbi9B)RkP_"V-B:h3Z_Rj5KSQ14P4I7RQ/SKq5Aq6^MWTN%Gldi#D(D$BCk`DUm2d,IBVciTZ:8b.%ZD84XgJY0(g/I-XiPR(9CcAG09<^<4:1q=tVSkTS^.$jj=$sB.\`'UV]?."dg.TPif!nsl.HE-p='l:Vk!;(YO`+RdC1&RHpBsdY%kKNmUP'O[=o5V<;>o!Z.\\1^.JF!4#iK>u-._s!U07]V@.=dG?%/j4p\lpH<JGeR<o\9)1\r4bVXn)7n[R\'21\Ol\.X9RMa>005%fZNA'.'HQ215qk`7ijtPq0Dh=1/h:f6h4AW*,JrTJ]gdei*GAAj\C$rnu?S6Q8'HL`BkV%mZrdAb1c4)HZSV\]N3J[oHinmh#(W)%/H(t/C_%qLCEcjRmW41-nm.jZ3D7#(qhl.<i8&`]#n5=d`=g#-`Q#Fbg2.ORVn3aLCR[7drnp87p8JF+rF"2(/KJ7XKX>!04DE',%Y.'Jc[kj!R*_g&/DO70c7?FnK?T1);V_0'l%'t4EkVL%to=7D)f_3Q'9YSiPCp#sE3_MtMRa6.MDkGoFOcXh:`6I[)nZi3]bE1ds%T]-ad>Zh2,nRhq-i0#mr&+IT(KWm#TjY5U>9*S)HH-2k2@5mB(0M=BsUg4VE;K,l-Zi%YU4N>$_b=bb)`=[D=jjmY.nkpXeAghS6%&OD!!e/8OmNP1jX^E+N*&+J'qO8+rsqeIbi$D#6Jf07TuTlYBiI=_.]G`dq<NqkSV".^%EbI%)9p'Rgla7*MDm3^88Qd:&=$+?B\%Tl+94e;mZO/;W/2(dC<=K7R,6e_orZ@\m_51<4T^C@NmfKcf'K-)Gu_IqI8l=&M[m:OB)&gtZ%In^l8A5!;[nkLC%>W2>l@DK\sH%:1l#`P^8`b[^^@GR+X,8a4;&HiFV0UPTJ!)Nk2`XYsqrob"Lu?X8/<5ft*V6]?O]arg>G-h&H7eo:Ph-Qo*p+_sH9`b*Moq\!Hs(%$+/A&N>Cg@fabB5o=`].mG+#"QZf:u-gti+q2:t*;uHTpHU]iqDX)5E-rna@,#W7UDORL69(D:Zdqe$_D>@9'pM>2&74f3\U#U(;%^@&jq*7<_W#AQBQr"^Ap&T.j"d5)6aYms8uS86:^6Rag$8Q*%MgcdaSH;(-X79tB\K%-UX#CED8q7)NpQ+,q1Xjr2fk@4/OV,R0&%hL(;KFI2''^6:#NOo1j4Z&QriKi4Q+MB;$aqB6oa\c9VYas]I^=1?XYH@"]BChokHX)EL5ci5K^T%<#*msH`ph#"*qbJf4Kc)`@r%=9lZhet]Ql0!"C%^W%2V88<e<&#]0aatIMJD#DMSI&?X7*=#=\VX'h6a(I5LRn<O\a6EB]lGfp82HRVZq_M/=;`IC.0$I%nV3\jM%LF>V&d:>Fk#Kn,%T'*)LbSEb'L$b_dZF0Up8>e69"piiCY6TGZ_W%&@e;VGB+*+[aVE0ZbXN<YdR(965k[,@3n!0Ml(TGi@EUj]g%ZB$PF_E'ffCua^P7!:P-GEL;B[Wq+nqFVO[]BT=)MfAt^T[+b)Y%Hlhi$6RV\8r+(Cg=4d6`>X72"W7]r#/=PrlHZBUT@qbFI*Qm%J*1<X;@h5^csR0\Go1CFDT%i.qqSZ<"jX2(Gmr:&BRO_7\O)99f5]pkF)5KB]NEh38d^r'\&\<@[^;<LqfQ-rDD(5Oq5)Zb*8#PM%7ki_)NjjIEZr]nka4D!<nbP(@r2H3XCum^kRI->Njh,D*lPjD^k,_a2gn3G/rH[:&8u/r&>3AMGgK`D$q8`8=?9*$W<gItXpaLC)%R%<Z2(@-/dq2;<>c>(VlHp[:#+6N=cfjUjXRELoaW`(#+1bE,Ed]LOkC'Y/K`q#_!f5Y#dR/oJ1qZ01eLgPCQ+Nahg08%c2mP-f0%CkP9]Q!uY`Fq&cgF72u_>2B3@Ml4IS7_MF45j^"_*a<WC+jW`]6EISAPa._Q:VYMoOi,)b4"dog]8@&o.IHiP[dffA^.^qELi,58%*o9X/?G?E&Q8g^>T!Gbe%`J+cfAW)!+$oXoon=RI1k.`u%j6uU]W.&\554k@><h^4C?PjG7j7X1Nk9doG3.ku\ajukAAdD8Cr+0G%2CoQka5lF;g2_*@<fik>=Er+%[rT1,KD_m$R>'bbl5Y7Fjd"M"EMYX#25G_4I>KTWYV-"YG?f4>-Z7tI0B9I18/p%F6=Kb4Y5(o<%RWI<KV:E&ZrpR!CK2slK#<S$s6Za+i9RFeBN9SMYR_1E\KR+iUgg%9+&Y=P^RpS=G.6\GiG1JlDWi4gNj(*Rp2:CN`:h43LaRs\#%(/L_RkQVE3RH_i`a*a])Pt2EC]gh@+L`@@da+ClA_.,d[CCE3]`:OsfE^fJ"d.A5rEmaZe>;:TN)h(Cc>Ul<okgDOf/`+`jV%t"R%3OSKah8c./WMPY?O6FDA`dO%NFRG]q1,$Boge]G.3G9_H]Pl]=cG)r^rZ&$MXOdc*gOk`[7!d:1MGZM^"#a5TrVV<ZE5-Em96EWA%Gp7]pTT6qR8,<97A&P&=16O/.W9+?]?q5D;Mu*(erir.V*\Hn9?%-hKM':GcZmkMUqHsELVo'YW(egq)h9l.1c$$"4Z)QOjPGE"j%rKs:e8s#l9j'W,<o==Z`4a!BR]?%K:JW";dj-j_eGUcjm2hK:(cdd>q&+d%A/_aAc#FBKWL/7i\^;$$ua#KD#(,e4\MQqH8n;tDp%r::WO8g<08cRJXt\jZL:JeKs^\']GL_Jf8@o4MR,S8VC+`0fBA)q;2rm\\PWGpHDO3u]I%h&?h&Tn+T/:?#^]aak6j,lcf<P@;N)%jW>Lf1@07Pbs+8YI$a#g*I'@+,OP"11[shfs!J&C$p2Ijr1a?iL)iGH',u1nf_79?IIU6R$p9NBEanbtAm;d26g-hU_b+rRI-oBh%n4)[.rMMOL,85@`1g/iSf?[)iXr+puMG94uFRA#?>tL<u`N(?B@Rd$>ho<tSYMpkqYN"a<oNT[.BCD(5Ta(^d>/1#VXOBhgSNb8D%]bTA>Z[/\=Y<q'WGH3^$<Nnk:TEtpRUCk9&k;aj[[;BC,_7[GPoI_:/^oV(nb4bsiISMJ(i3+(&>4",-Yg;BR,Nf]3KrsZp$=O<e%5[s1W>OLlB$#bR:dQF#1X']M2Rst.&?>Wpg,GJ-3i7<8.dC_On2lTi\7)S7NgUHpoXSeH8SN2%Y.oY.37eV2*;RXOnp63?_;j<MM%pO8FS.rqbU4mc_=d[f0'V6i2o[T%e`l*]"K-\@Y*M1F6+$7GP1.rm$EMVW?/":m*kTU"'"q\+_j^2'U36AaW`5i)8o5L2ksff\ed%@&<0W6a:6%ifFQo!Zq!bA\>dK3H.Nnqj<rNF6V]e3a]Po4Rl@s-ki'tT8X&uO"Bk<gW<;0+3[UX9!MFRIgL=>4iXWki'jRg7Kp`5%'W[m.#n9ge^B/GdLNbr/EJZb%0F_K(EHiIV]qdZN,tI5)4bYq)=qce4l39kOm"dVtaZl]KfUo]oQn"OTJRS_^Ql#QRA9LJgm<Q!u%m-s+-<JXm?RY7(Fq,4:</k=,!Y2g9)Y<p1D?\Q[giPW4:o%Ct/Vc>:DrDa,N3=99B]3GYj)6F74.jO8nB*Oq(I8r7S.I@ns?_(E]%Rbi'&QhdHJ`O:EbmA$ji9HK,U<@3I]6QV/e,)""rnp*^cZ-d02-EcENH*"afJ]C7FL<*jLFsDsd!cakqk/S[cMO^+c55\kL.,?7h%"UdN9-`kC/.C%fOAR$5Q/+Q"8fb]X#aH`8?!`nB<d9(?hjClBk'3i>2]J/W.9MDVCT3@8CB$Ni'g_sLp\NDZWVI')oRA]DA[WikG%H!=U$J);Bg--Pks6mR038OU^`T6P%m4T"iML7+%5G]*Xtnb:ft>.hJ*m,uMRC5':Cm,t(^Wq_"Qdc4J)H]jSUo-iaZD3u48!Pokk%U\)t1U@:^p*8;km]+;i=[uJ(kq`p]TIF%Ki^2,%Z\(k+nE1nKCFp^mZ"/4hI]e$J\!f2U:P0o$Ur6GmF3Pkl,(?OAs1Gg2&d54\(%`(At;lh_lP*I]S;qsA7?>[\keFO[&\9lJ5@BRKd$&Pn;^[^h.qp.K"9r440(ir,Wfdj-LY07p%<NY^NXL1>0GA?dVPc)k!d.<)`O%aM'=g:Z$UC((^+:kAEI'S`64D0_\86D'cMm?5%]YUY#,'E8A?B>OS-.e92o%XS;YgcV2#o=$=Oh[0mjsbfRFq*e0ciGiItOb*i#k%'09:O1n>WCCW_3#nQ,`C[HegY8%s_h?QV*!9m4f*dB?-)<sudBc8U_`;-NoRi9),]nbK;GjM/n.[(\WDq'I?fj)$);rofn&k.W8t%`QoD[)*\)a:1C(DDT=TZe"n?Po<bnT?-Oo-iCGWnm&4.B+npW_`B?\-6\!=kNN0=Q'-ulgI,&&'RJeNqh\<?NdCY,e/HD8Ijd3%&%66]]?Zng``l0-917ht*"D-M+A;4?j$Z)#G2F+t%!b1&UPA/9G&O?YF]ZIfW)k+R]/F2I-*!5Rr_4E6hhLmP>lo#/j3->$<@^U]`b%=sdQ1'LI!t\ZT$YHL93m@MEA$^%W"Sk>8eJ:Kn?Y!ojC,/Ot9\-^CG84BQ\:IUoGD+Iu%],g8m-!C!t3;pDU,UKf!'MjUbOFVB[!%L9+p)\<"]C'gNd4VR5*gS@;ng]Upa</973Ypo^;U3R0CJN7m5OQ<Lh?+q`3J$:(%FNlMNTFT:fhKP=RYdaB^'R61:[e2etJqKooD%>Y;(EEqqk$^2-hSj\Dq$;>Y:8fR!GjW\o.FQ"2Ls?J+#=oO@3i<NRRhKjab8.JPU\!lZ.&iW1'kGQ92qMSJPLce[iloh+b`FM$Lm%(<EGdlQhN('WB!1cS_.E[.I5q^p&?*C@Pru*&E2(WFb<b_,W5Zr$B00HY7`^XY%;P>NW=C<Q4dQ_YlCD?h6qXj8H(^]=VM=Y$G\`%XZPpMe9SQfMKe1:Mt21CrJe>E@V:q:a*`]`_g>:TAhe:)_nKGc:Q)3?U6VL!:&s%hG_fiJ)$(7+Kfme;n*(>Yq5jU'*VfB."(VaJ%o!+E@h4cbSdcBU#QIpUh->Cp:Xq4%TA`<9j5aIqUd%6iikQ)1J2r?F\o2;IK2:*QM:@H`gdJ5/m9G`Vi@R(>f4Hn^scm?mDDad@+%+.2]h*)"kLoPZ,*J7Go>_&>JK8""ekQYl,?!jsme].!)If2MTDLE"po";F_hBfo0Ip:@A>_>t)IHbH#t',d/BrUhqd&#dR_hFR5'%iEc`&h90X1H@8[LlobNllF!AWDcMcr_1q[TCmc@!J4GC2c^Po$p[__Nhk"@eoO!loc,1!>6pjrhc>Il!WR(2VMO1+,1fkI,N*&S[%P^aTf>D=eVr.?&cjdq@W]?**n^+i[Q4\>4)]JU5W.Ph$)FUsd_A%DQO58lW+9>j?h?'Q3])lr,Oo$gP4jX=u(-X)4qYf(^3[eU4@%G_-XedW#a*@o3eY/$gfr.p[(C?Z"nN$cPP=f@K`E2XO4ZC]d8lJHtM1DVtR&RGaSMXJR74:fN0N;t0)%@25'deJ,;5&#lK9YGT[K%^Yoll@FZ(d5g#`uP!k;=n)R0Wdd/uGCWj3ck1O&fd&B?\b1V<Wo'PBZ/0e3#<%n%s==h[4Q@uB[H2CVW\'#&!C2.7"LMo&Y(49>G%h5PGJ%7]$9C/]H(=2E/+C#5h^54=/5ddp7X)J!M1d7Y"NbNeHZ]aP!M>f)[]ka@2/L'NKE.I=>:X:c<3o(BQVTf_iKNTr?kF#q85%(>5Zil\`<lKf_nfA;:QbZ+b(h`TB/7I!EVQe$m662L^;P\:Sn6`,1nc*)V;$BMfnhI7J_I6m+RpS-Xh\l4`(>"DgI=TWAGC!L7.c%KS::p#b-P:QFP0u?gJ39h(*B.O1QX#Mm:a!84ROkB''7HOr`6V<f3t$Zfm/AN*+%c>TAQs'Ni?6:bs;g!dE*1-oP6fQA6Yqd&bH%%a6c@ALB@i6)Qk#W%&WSqi(L]+aMV*<WF..g1q*e1im-tgKb;:V)iV*[Y(Tq]$E7E=M&VJ[ZlE7<#S(;IjA<FaClHbtMMG=)1R/IU%2YSH.+Up:f!\0:cOO=D,7*LW:Ki_YU]9B9W[<#16;(T37QCMZhX/E%0q+L8-R#Aj)6+q;a/@RG_@<,cbZ6G2h(<*/]3"-FW"/XWM%()bm:.@QJ`9I?bYj%>l4'$=^(B7*GpN5I9,rq]K#O]Kl_crEjVb.(>>=V=crE%E2Q#\PV/%do5@a!*Sl7jrt0P=U`[\<PsJNjp8H%1E-b.XY0:l0B=5GU=m/"4\s<(f/tTIXfO8;l_N*Bf'1HBZLYY4>pAGknL^WYmK^!5W?nH[?;?Ur0B]i0B6oTn0gcF%UpdIJ?m5?f%4:#?jd[uTV)Em+\SQT0D+ass/Oe9)=*=Gh7e9;+jn=Ykd%Ttq+%p<2LPat0B%tn4#]M@F6rO61t]'h2rm!UhuZY#R2HT:,W++#Q1%*t(Q%ZhJPmSfbSn?BOFPY0MdLYse?ZG)\j/`ae;9Q!^03:>NZ#Bp%#UN1Bf]g!Q1"BRU3%Z>=a3-t"XAYSC.$jgX%Z!asQmh;-9P%'\DoMj!:EY\WS[J*5Yrk@r+CBC$FH*l>oWYk4hA_PV"Jq.2Q6a,Xut?VRpW%Q`D-:j&.taRuc*F[_[34T&TaaHe3?3ij+o6q5JhS%a7imnM>N+@lT"XBZYU$>DN?h9nAHQBI;<(;m+]kb'0SXSPc6dODp#\P($P#B&EW_*$Z!DuP2K7"\T(0$pJmf7c</mUR2^q9mR1FE%bA-^2o0<u7DKYjIEh+Zc8KJK@ZM]G@hZ9?`h[ZcWrn2@_5E@fcb@d)5NU8'c[m4T`MA9cno20'FYJ0RVCeb<RO6'h\l7IL/nM"$j%?/E0T@sZYsSY,36=\RfXe^3ndd70_[$*']^Vn,C!:>c9*d.:0Lkm<rS)L?i^DYlLCW4)]oNPm<R]-keJV.N`_*_`BY!'.7UIbImh%J)7?Af:.P\^MBBnS>?0Vn/m+JG#DABUn[2E6V$A!CLWm":!/mb+Xg+3\U:;VXM=GnX_+F$GB*jQ2b/XiHc>&<P*UNNZE))m^d`X)%ddSZ;H]l^*iH%=Xk2H?0s!5>;cUgGqdf2KE&jldCrXD*ciQE;Cr?j$eaeRqqUQhk>Me<>bPI%9,gIYDoZaO>2afgAtCKXTF/JiTo%_K=PV8r@0\b^%fk2$3&)9`,*nR^I"c9PU#aPpONpXXI>qQ44XR.)6NWCJ0g[>2epj=<jJ&C^#Z7QB8DLAgF4S@?OF(Jklac5Ca@"%#9!R_!5mlIr`>3HMT#O%+neFc3mgY!9%_8]9_.=Li!UFt68>:;AEb#jD.dus;?6k1bd)=*CY%ILU=q4.+c>+]d8VEkWDZcZCctol%#V[R*QjTmOJQ+$ER7RoW=*4Tf(/WDQ&0%2eh\$2NF]/I2#3:I%KFgk@C][HK9`^'<2,-ed+o%Xk[1#tG9,Um_<b,)iY_>[lMJP)=%/Du`oGu"H%\?J=4#"7'bS%uD4TrX!9!Os&6+/[d"-(th$Ou=/95]#X:J]NQh6=9dFk\MCc^ne&H!oGj<QqMfI*h":'UVJ%,KEjt9%qiFb\%I"R=;%Ripns+5]%SIY[Cms!%:e-_n+:-#Yd?VQ_W5-h`>n!TB2+tC"8-3^3ACMmJcj7PiR^`pO'<5b^@O^4AgS1bpW?M=S%XT]Cg,[?Er:^1qpk;Bj_BOB@C00oc/6RjUEg`k+ODj$f9>5/+!<.p#l"\Uc\'1f!8Or5[`<'pnV"c,jl(E`q'1W>H^QAi`$!'gqm%Bpt`Aasa8XbG^kEGp/t<qAP"N=jp7_;G&`^!mi5rVi=9*ksF54Nj<)?8i]uU91_s*J):S]quLP:?A[]-3-,*g0hb^m5=.WN&W!RC%\cBQd1dL1=&d""dG"R3^QDp6J,i.t,<#@3Dn,RW9emoSO&7(U$=Kj(,oKj8@TPZ_DQ_,7bMnb3;8"?jh=cR;/6]!MB:e6#jYT8a5%jA@cNKE),)$N`$7BS]VWatI!Df1CY]bcIY(k8)8kPE(4pP@Y2=20%9Q(M6],;03^1OKrK.&EEs'jIU+CV*IA:3*!417J?jSF7_<o%Za6r3Ra[ocCsM9'iE&/m)&a5bL-if`J4rNm*=u*Npg'.A#:/r;&&?nsN!Sn:KF&>h&kmoh6%EZ1Y!iWDA=5\n#ritLFFM$@BG0]k%_+#5KV@9sW7+MolJ7uHY&^4fTF!6bRVQ&3W.0fn[=I/6+R&Zj+hc"OfB;I/EMGP#k3Z/`.Vm=[".7i:tJuT1>?dhF=#S7/O.i"a)%iGf)u#'gm(ifk&]A_W_O*c`HeWJn06#o/>e/ZY,_%Ld*Z:$am]?q$oZBJ=N2,"[Y"GU#ms>)"RD1:*uSjHkTo+<;Pc3Z;j1eRd;4%(b/_"@Zq*"9<9b&H@a^gY!!n1,tfclFW-50\nT>3K_69k'4?\hLK1$r!N%S^Ma0+_5n$c"=DOodacmf><MhQB,pH<C8SOP9"D!m7%nb4"?FHb:YJBg^)V6*W($sB<g_DKpcjCl+\%X:E#WSipS>8&0sgi[!O$n.MW:qL<&"JRB)5pV:8L^ZU?:GI\IiKQYL:=][RQ;(Y<%JAN\?r])[eAJR_$Qt4Q;ap5-l;8GL%QF8.kPUq]pcrm>@Z3Yug8s:hC677V-MD0^6b,KY0Ca&nu:cY^U)W3q)Tg"6AXP4FUKSTkB%>6Z04#*Y`Y8POLRKOCTnpdI3\essiu0G,PaW&5a\'%)gB!g\C=kR\#j$a<<-@OX+6));po[\R%M6kDBh9EfSq'N.O(>=d,rEQMTW%9M=DuTM]8A\5\eP;TQ3S@7<WkfLh#/Tn<hCoTTE5D:?U&QAiRLmC(!2^Jd4M@OBK%`=sK2miX5#<Y!>Ah-Xhk`HB7r9W$O@$_^\%%RV@(@3RZ.PFYMK%n(?nuQ<k6EelGJ*![PXm$=on#nu**Heh>31Lb<B_PKSY?-C5,"-C5"3!s]B;ehrN1"Y^fO8_<#Y6&V$[6,,aB%CrqE%BU[#MU)Bhq+KIa9#ppHR?tgD#.mtCcZ>Ot^/f3Z=>R!_"K;l-2j:YnVj8p0kV?nRc5R7J%-C5*[9eI5/BQP6Vl>JRlE=[`^%+DQ!"N,*O^-WkFAd7,g0>"aa^QiM3;!XNKWU)Jjk,3h]`7'O7-QtpiT0Q)#AMm=t&;`M@OiN]onjK--l+^<Ap_<>n_Y1;XN>bX85%(O'2t#a#P!*@lX[=s:qbMMJ#,M+1`G-HI7B&F1[4ILZdtCK#\6[k6.Y6=B09_gqSS.i(Zr_e8(e0Ku!BcpBNV*Wh-!.sDOm(etn0%c3b69B2d2?ZU0?8=^g$WB3CrR!['POlCD):6JP`&_LqsN0R($Cd"FO^Ne06@!mDNJG\f/"`^[1nMTg$?/6M^!e!4oD>pTk&f+Q%D%Jo$,j^_U%q5Y>E\@ASLHNbaG9JA!P]RSDO88ncGQ<?D@uEYMde/ROA*\>@'HI!K-YZ,/(tP>sY.D1`8%%[(*q>f[k0:H)6k+e>%5%`5P7I1=IO#L-6q7RS:h!bTuNcf]eh@,,'kW5k$oZN$?+M+q\;n.[Lk5$Bc'%-&Rh^0I24fZ71^&F!..,lDUqu&-[?EfZ]/_.]G&%%6"$Qu$0;<<"[S7@D^'U<"k.!S-q.a>6IirL>o[MZTr8oDjU.ga@tdH8B&!b*R;*+J#luBH)5r`/RQ@dpTqk!.ZY_%c$&%<;b06/_%V$,'d#&HO(Ll-fo%82lBTD0%-9Lih/(`5DPe[@a?5R821%"`)d@cMe$rl,P$l)-=7cb1SVbk7.OVu]g&\si/uC041,OcfPc7$B%H%7$oHteV"LYA=aJ;2%YF3)MQ8$acKCGKt2Fn)^7hHWi-3R2^hAY8sr.<:5#:/p:%LFFmrM3bh99<U2-ds64aM0-BJE?(rK0T&lL9r%82(3&>Ne.F`1[0eMFNS((Y8&j>VZE*[VZU2'_Ipd`"rRgfi%%tBV=EB<)(nRSe%*C6&U$WORXmX,+Z(TVR\B]Zp;]GQBu$r!gGhF%$38=[;B*(b#fL=u)/66=L>%^tbo'!n1U&W49N<#hA:T2:TSS!VkO&D8oet$+Ro&")oetMLWbYm!.*/hb=`8q!0/5VD$?B?\mOUZZ%6g_1UMrJ&ZO,A9K#*-4&dDRoTia.:8M$U9u)qgM;!3msD\Dl?lda.EK!cAVS5!fsl'js&s;ffkhgbu`0FPR=%%+F\OI&%6R1KZ)n%LUJfBI"4a+Z[00t7li0#..CLJ(\fW$(&3TrC3TnG'#rEhJaX4)#f6_Y$fV40.WRXA<0W;.blp;(ALWe?PRJ,@'El,XE<X&airU<;%Z40A>pdejcnHsZZ8ln+g8E:40nG>2d,OfR82&DNK&]U),)l+>@C,e8@NJ;3[5YrUEOK1YK2MS28*Xu##E=L>#Md@]=R;7lad:Gu#%+C0f(6+SaOK61KRXrpnbcdn#,K:kPg0WmarkX4oWAbD1IBoo?*Jn/Jn]Oe'5>6-(%.M!c,8k.Ck:4!)N."k."C:TEbGRq2@fi&5'%L+^gp`]@mV[uUkG"F3^/>FJGWf6&D(KbuKj*f+OP\0q\<&?qI[9+Np/.l)gH\<BCDdb3c]Uh^<'?'1M8Kg61S>\56M/EIEDC6u;<%5Gbmb;^GZb2;:bk#6n*6Pp1UJm^=iW!5ZPcI0c'j)YI)lV)2H>fa<:G1dXmqdc?i$V$2K3q`UTQJo)d$ic6WdS0\qZ^mN!EMm[Q@%6C(^cTW2NsE^5LN*NT\NKPmn;WE7P2^M2HpG9PprOA1Hs;@*aeFfB,3emZE96a<-]1O8T#_ORm.a>87Z)9N+9mn#F*(ESr;!X]4S%:oJW%@!O#6V96@lqJ\E*eM'G>8&eer4f'.4OJl*QT6g^gVog-_FcC,t`2E;T_LUJuo!kc?",M"-5_+hg%r]QF/:WBtQ3(K11<50$%OVnEZ'naa[FDV)=>aW<2TTIS:=Ptb9-Ld<1]Hq=pDaA6'_<."sj2;KP6j'<'170:0?'m-:TQ\R\]F]sQ.j7&0-Mt#"9fId.6p_:)%E^<5K0]7'a^d=/0lm6scUqK+s1F-,=J^lB0N_Mi?Mcl18e7`.o;=YUl.1?I2:fq!3VW+bQ:,#UG:"]I>N'DAc+\YqI,ike4>u?"]%;e=nlFO,l\1hK7/6>MeYCk_8TOc:Xt`6cUQNX)G5<@tZ",W7tS"VG9)D,9>HQPXZhJLY/':uAWf9!Tq9ga`hnCR.<LMZD4KPb9W3%PW.'a&6WIC5,o0M#-<(sZao:iQOT9+Loq!r!4Sa-VZOT1],TP,'F6%o;bNjI&7?o@W)"U.eTK\JEWq8O[K%JAo=P<m1q]YM44=ps%2@"?%"qhi'oKA\%FQ2FP]\0_XZN*Pba=M>u"@<2Z<lIr@YTp3>3;J](P//[k9sZ:?%`r]TShQ9,+eI?c_/iXZg#A,kCtJ/LKRqe&%1cC-o%sgL[ef>i6rPb@\/T6KB<8;&Z'k&eL$Xg*q>9!c5Ae8[,S+M<skYb'8s+h7qGdiq!#)?(Ohq'f*Lk;Y""%q3hr:5A/J:adL%Ct!uk*l&VDg0k9'#_7m9l^8p7/APKlINWDSNDK$DfH-pjA+9j2YuL.b6mWC[-6%ANHienmYT&N$JdZOl1Q$b=Ie\C#d0\kcRi'CF%FFj`e'ES?@'^GB;d0U(5WN,!3-Qn@a0g">##Z30ck`FU\JiNEV3oLANUZ!8'.0a5>#p'B,.26/@4Foa3[_5)G'?I*`D;>Xs5T&68%@c7V!d1o)o"g``W/#lmd32HaMOmn$QH9/B+@4SVpSfkgNGQL2?K-EV`%hM"gT+ISZ7M>SKPZ$9r#83VY&/Zh5>t*BGC!7#P_@mJ)%gL;jgVrNeTA,Cip&-@^qgQFFN@!!MdI"DTX\g-0WNU7CCfn^1T,3?`j+A=^/]"^qu'+gn,//X,[-O:825/@=GnHl!<RJA+!Hif^A%\tY,Q#qh[lN!$%fnYeefT--CP\a.%5HibIU@[V,p!Ke'7fkGKd'?FQYPMI\,R+$mf&0O_qJcN,_DUF:9_W)<6DHgVb1)?KIjHj9_%nH`\!3^L+m,$@7r!M(PQE@&5Nd$nbh?3m#m:4Rph"<O4$#$GE?CEu0]"(;3;!fR:2GT\7sJIJ0i6jsH"E5a%4:dBiYFFFjJi/p&O%4op"Hl^gGY\.U;[_@m'.+ESS?e)ADfW_?nJ]A*Zh$t]aMp]Q8T]l:]mj"+5J_5g>n\uKKtKFYRC=baDMWj-4\(8!kK<#!ec]?Ji7%&t\"_SEL(f7"Q)*`gAu[E#:Mg=E">YaB).d8%'"hZ!Z4AFr,20AI>[N?QtH`?+>tW16'F'N"<?"3uj@`Pt;TuVdMt[M_Y[Q-?b`-%?;EI#h!T2kY2,oSM073_mX_ol(VC,:X'gi/7$b>qK\0QSK\KcbbdG&&Qt*`nMmapLA\'i,G*`KpG*ep2g\]Li6=OmQRFkY-0DKF2%!7^i\$ni44%55\.X1Mba61)U_.%mTP6A$1_,(pnA0$H2c>SoE4TLJ-CFpod]!P%*b#^WIKb42o%&4Q0D?!,1t(l[*Qd%&>p<GH[`%!,coc+DQ#/D/jn0]dP.&<A:ua#-4<S/`fY,C3B2D$>t"Fasa5?E6D)!CiNlKAduk@Y$FJ/97_es0@JU3:UShQJ?^RdTT,1f0.Peb%KUR#5oKmZTJ>VciR#HSUoK>k+[^-:8,iF>&/_*esE'NFK&D:.FXiN9>8o\9UR6MrNlM([=Z$.,gb[Er!$8GYETnUCf'%Op@!RNPX%O).#YGTgI96Wh&b&/kU&^t<,QnA<84K)f=a;Fh@'&//u87(UM\Q&9CVADh9.1nda<iR);ncm$%.pHap>TIEt]X.4!$Gp"6nFn2++%_i8i!NjiQ_/Ficc^W:(ee!*.3Hd"c+P_-<&,s@Wm#_;&ZC'feP&o<75P=P3VFTrur98dfPRE`AYI.]gETra-;0bT39Ek2!>PR5f;%aPf?+\E`0Qe$-M:b1*3kJOstJ!>kf.CC1Lt<,hl)p=><7b,cjHO:bQ'EO5qEM\'/OW)<XWVBnQrs.@"q@7VA1>+PKKLq]rgou_A"%XLBP6rhlTK^<DttYh>O'\LqJlZPfl$KmQKI`rXjmP'QH)GH2@ZAs!u76Dk0_4ff3eY'aTbIo;3*^8<"[Jqrg<$fd/&L3XnNE">9W%U+(@1e,jYW&d9-0Y8';R,gc^fb*n&gUZr.W6l:mq?kJ6gDh5FJ73AagimRNg,_ECG4asc&MBPMa`?GnN#gmJV=>?b7Vdb1,,3U&I%C18lI=:qW^]'3u?f1/JU3NIb+6T2Rh_S%U5iB`4]+BS*,9:dO)5_-D&%m2bK\]>L-'t6XL4fREc6Fc%8_Hb(#J[kh$'?<3FB*SZ-%nI]27nUW=73fhgt.*,ei'4NZs`jlObV83g_UU[)!C-`DT@oIn<ToK25KfYA?&q.X,j[n!:=+Ppr"f+Ni7Q"Hn1^S:=+ASl1!#(12%@4pu\Fr(3>W0WLC!mI@(Knb`L+Y'JmQB.sGbTSI?]r(%'UEJM06OSL%7!2l=;&u#k<*V(E^Uf="+I\Xs3+KX:Tn].eScDB]l9\aU%\hKJN%a:2&]QUbG\6C.k?E+>d:+d5>L*lu+?SJ4;jJGp=.D@iHjHc[#.DlWh9Gt9iV_(X:U^V<H,G;bjnsKGCV#J^'0bZ4F-^E?f%AI/PlWT0kPAroDQ(T-2@PsM-AM16?c)U*j[$/d[,8T5ej,cDN@0Z?ooN@uJ5W?`27JS9E3pV:GR&(ZF5(gYQmhN*SY:4k))!Os44%&Z$+W%\G.-M^T<J2C:[2&t!Q)^rX+s&Z3uY"VOFDF,6XV"<s>Di^2L8FKV??67ET(F>iNeA4r4)6?:sscPXm!g0)<$1J.G;$UNMX%1K$a\0e?f?+`>L_&iC)T*f^TiKh4<C9k#k&6oJ%;DrP5F+ETGsmo_&Md%iV%SYg55&;0BldF!&DL14"4cnMU9+^j&-PRGi@ks/?t%VX5gdGu(G7CI/p!J_6E-F0;8lX?^CQ,Er+pF9d`2LLE7IU@QolZQ2>tCtRf+?"4V3'cA0\AK*7TP#DJ-6S.?'+U7%i]F>*TJ,iO`%0=)S$%&l(\*9sh/NPZC\5n[R[&E4QMG[`WM1;:kNQBB*8+Wp+nRYV'i$A1T#lG;sT^rW8rG$sNHeS';g$KuFR1$k8=VQ2>&obmKY%KMiS..2'YO<Q`<l-\\e0Y$6k`8QW/2d%<eKs$+bV993sPP1;3Fs5?^FJjEc>r>7l$OcWHB"B*,CPn$mGLce\9Wn"'I4aX:G[_lJ7%79$Zu0K=\ia5>b1iG^ar:Tc:A,_hko44rHJ^KoS",L3aBngo4GgckRM^]d'-7IWmJh"_H?men9Jl\jNFcQtO5pa'CAo_.Z[nBiKF%:]^<tdf\p`UkloD/DuDeJ*p.n?pITs8I2DH#79&<Z._8KZ[$qCbfuH.2i"Ip/EH3QKonRf$:i.UN>O2TmpFF]-P7I$AR\At/?(ir%#&hmc+>L4^JPbl&BPp>#q*l(Rh/^ei<'acCIQ%AHb;Wo!;msN^Alik8RR<%2CfZ5.pT41W(m7;rQPeGm'RfnX2/\r]R*UR_JU,V$%AWDp^2:LK)@Ea9I;YeW$,b)d4O%1MCP)]iVJ\.St$\53?3gW=`TuG-O=:QPO;1itc2UZPWX>`J`cLng42)/eVU;M8>^s^&qWF[%e%Wh8qs:!hki#%S4-ZjK>fdkp-tVog(Bken_41GqsOaJ0cbW-:)"p5^0!*0j%DjHOpnV:6_kNLOo4hoVgXNY_(\gdTO,LKarE;%\e<%-e!iYb7f/Y%nkqPKR03_].gDL0uV-Q]-$ZM#^b(SOW0>1K@jgp]/N2h1:(`ta]qi@!XUC5!1lZ+)r304@?b%.VaYE;2]#AUEl1$U%)4h=b]kr1hdRqBD&sfV_E6WEA3S_B=mE3MSI>>>GCKOP\4.d!e+qU"HJ?4R^]S:)3BFAmVSg?mA2NZKVo>i0(Jpj6.N)bV,9"DcZ%&edCjRfm-F;J$/k+-7(BZ>7T/8C@Hs_`d.7I&Dcl_dcA8JU2;Z[Z-0)G"Zlg%@11R-#Q)bA(]+]FQ7!=dFmH>.K_OM%1b2hU+8%t%8B7Hd-;GQ#=s?R1g)OscLf+e[j[MNr1pM`.3l&iVLWpMad:?,^G-MfYN+>Ir[Xf!pdZ`.f+GrNDm;#P6%V68j7)*5ZlSXPsRRI#D%RXaCsB?'UnH:'uKUD%qVR5fNfL6T13?^JBT=[q;!f^RS;c&H]eX;&tM<RAEY+.692=4@@oilUMk>d=u%$n8EO#sf.CW_3W2;BA3L%VIVF!(r?#)!,tjjh;pq3.L/dDJ#fpQ6#`H`rn+"-829n/YCe-"Gt]e-ehGl&Heo7kf3Q-ISbYTuDSpL(U(/Zm@qhOIYu$7One>_#%U?<eL?F2F[\"AI&*6!u]17[ej+Z4<Vf?h),h60/?(&e9u3r6L6-QV=]`UFBkiVp_^h<L4uLoTC:CjUHQN=?1]\d>K)%neVoQQ'j`%T5UO.$:kCO<i,mS/^nS@EA9g;9qI0T]#6W-W'0UD0T&XJG9q!s1g)DC#Q2(dRU:U[Ll?D4c=_-g;s68W-_.'H2sjJh/;EpD,K,2E%&#hW>AGHeRm!%njDF0B^Q6%[rocb^A4A'9N(fPLE]i.p+4;&4PYG<5WN]MZoV7bjQLb6:OS&8+d4grl9M%X=S<;1!]?3n0M'dX'A%4o`Za+T61B8uX0GiZ".7nf4M#AI;3Df@:1L*Hi</$TWtbc-MR02HCQ7pYiA(V2&iUX/V0(l8otnaEMZ"a@di/Vu[-BH9ljslDjfc%,crUR-C>;g%E2;^$Sh7(LK)ga]WT@\b$6)>A-V777Cna'ZoO^(O?RN>[o<#P6i"jR0+dm.-^.%9p08eO@3SEBGU!cs7f[foXW7Q/%#!lsZ)aiK.lrBfiJkie;otKnP/r[@sSs4?+RlFlGhH+sH1dpe"N1M!L5,Jf:?+bV-@lg;4VA]tXrjX[m6XV&aG:2N'gH+M*J8iT<%[Q2P<J]X#R9*QBW6i]fWH[oNM7;ZL7`=dHL2(eGi_mThiR%&NRah>16<7LRe!ZYer!5E?dbUOq@pm'k^R<S(1#q/fp9kWq^U]<=_%[3=c6LW<4$CT^>M-;o;P'cE?%4I.(C!?m'A=I2TK%Ts4DG/m]k>N?):ZUNQGN>+cb^E<sqbW#P`>:Rmuo[J@*Z^&:Sq\blD>755s%A'1-QV2O`Y6kfa%RrU_s`j>Et=YtDY)Om+t_tMmDoZY()ft)QUCbKX&f^M)*JNR$/jA5E\PVG+3Y;"D=&=NEP&%G&j6))QcfqKNl%>;X3lhq]0iCm6Vk+AUYrO)!B#EQ55+&mH>f3<C/a/+Xu6mV=>)hj"`t]7:J484J'LhZ$+J1,J8t0p$\"6s)B_.'/)b\cj6S#H$1K%htT:%(,kmSY[^*i7MmqsSJC\3b_hd%4%T0T=U0Ye+s,fI&KU"EcGm<:l)LTBO>Ve<F"V:P*1Vi@aW)UPL"p$GPJaiiIOH)?B+%OL%QM`&7Xg&?l4o<-,*>r[U^LZ?o<Wk)]ap"\.O:/@HPkAU3#)2mnUriE%p<@$$X9[KR]cOo&k*\N&03!)HU)"Rkc't`*2VYiT4tn57%DaBF9=sjG[(&);E4i]<aOC2_Dg4KVlHdH9VK*U(VOKgn;hLc(AlGN),\a4f]G=<3WW0]p^))=mYF//T;DQH"B]H2.@;!$9s!oi@O%!(S).MIZE/fu<<(?Vs_$)hisoFV-#'@P6\SFDp%V[M9-#)UiX')<.ot;FFaPUJ`e6a@L'V#nF4EKu4lPDJ\nfGiKFOHO>N=4gt.t%%bu04@:`9_2<mG2iYRjDnE^AEbY..>jD=49SZR=E[C%5B`l%7K(p:L"qCN.N*htlu4d<2jK^J/d\@oR18(3Ibg$bhWUoqnT,HAX>%\_>@SQ^aq`NoYHrF4_fi;D!Ke.'Y:"r@>gKF^pH5)r"ojkLsYR)p@7.a>t&tlUK-kM]'BjWXEc6?'(iGK(dF_P;b62STp:H@@L<=%2J_oYkpOUJC[igZ0LWiLIMh,I5AHZ[l>qLu)uKF.[!tt-b!4@6rdTkp61q/P>gY$K`7=d")g_]:c.e:k$Su%AO$@hK9J]q6)c<l>%fq8VB;94UuX)uhoT[s5?mBBj4acH=SIO?W^?AAS&(QcfJ_X\jgmUmam1?4!h5p_a&LFZ"V@8]W[X=T&/RiqX3_8[$`8[/E1QQ*>G%0S9#FB1a1O=YZ\6Vr>MN2c&,lH3N)f8!L-!f6l>/Ls]'Mer>QE)$Wt__@BCWDBNg",j;QR2)`J3WCgGbE?&A.4M5'`D@3^A1Xur>%clZ`e8B"mt^o]DpWh6L*.oJs>6K#`)Zhup)FPX`]s$GSV?!'Xd-Phtn#Vbb0]_bl*5L*]<<[9)ZUOVUgT<Af$hfBL+0e,-/Kfp78%C!W.!'<s&4=0'"=l?Cd?.tt06jm"laoWEL``[\2sNV:h6k.0J$VHGtT8U6a@G%3:OXqFltB826JcWOP=K&%h*b!eLW)l];e&*+6i%'u)YM3,=eto:4pI`ED]R[H9HLrQGNc0U=i+$OAkYXh\$T]bslMEBtp?Reh:hAA*@6Y&5>c(i;:l._s()6YsMh&L-d'2b'tfO62'[%&nUegeM#Yohe<8O6?AMW*sJ(gCqH,eOF]G]SjR+JAJ&8$<6W47_]Y7I"<5P,CC,6Ip2IeAQ3fia.uYP$.,L[OT\HZmEWi[>"/27H%`+ArPo%rrSD1oHPqOM&'3?Heq9N9K32kd9*6pDW#-9l7OH;NhIk7+[HY@TLnZ-$]pb>#IM#_.Io=O9K-@42mLj?q>VVaIumg#&_@%(6!*nWeNrA;6ms]8N2W#3J-=rUMi%Nh^4mc=Q6</(3$@kLQ8jmLusd^B8?!"Y2:DuU/s8\6'Fkt$^j`57=Z%DPC00*d=.TD:$)V#%,KFMjL717EOb^*-S?P:^Q$E'H<o^$ge'9%AqS#&f@nn`+?Rs!<da.6&H0>U0M]`jF.0&6[0Ef!F@/\g+9P3\BXj'1#YNKl+DA:lE%XVeAn(1n`UIHI==2Csep'a(6ghmD[L:0jh[(OgDR?]tE;#JGGPV[A[Ys-n;&*<s&@TEdUqjc9ErmY#DAj=EeIYpK2eoi#akQ?^P'%h2IqpmLZp1C(4LqUPCKkcc/\9^KuPF-`Vd297sj,>/uUR%;o\6O)F%q*N!ti&:05&mQKXtQBrt^V$JK:Re\JS\-1TO2XA=+aHFI5%K-k?Mf;&4n^@Z+8[irV;qT\/gM++.'0BT6%(0$70Bo<5Ng>Xq13N"a3O.J];9Lnn=e4t"YRS5f5s)Pp'T>jfYD?m7O-p*X5Ejd_=%@2+E2]jS*J;:W5\Mda4O+;"AI2iplgY1kJE3Z6O`4I\q\^0i?p6%'+n9_$%T%I3,VV.E5=mB_S/LH+%SL0]W)V^&V:_9^'7S1Rmo%Eqa[)gmB,GE"Xl&DF"8iK_.,g2+G:`@>F&crp\EZ7)(E#3\\Re0*i(u]&fZs"#eC7G*Js6Zalfn:Wk\k)'!MY_JH@D/='&cHID[,%7.aIfkuU5sISo)GS54R?K3<IbFH>A5!`(B5(fDoeo*7gC%f">i+-ffXedHI(J^X:<$GJWq!_+&LD14Bu<HpKSf^0EAQH4(N6FXs$%jKdF)eNN3.N/hu''3Sd,,Fh&,^pH("+n1Wl&GLC,Br`*.kn".!+S$/5Pc*<7DeYZ7@S-l^cErK#>oR2i[Wj%X<LNf.`E_&9+cLFq%8%#O^<TIe&OK-,tX2@?3O(c;LG)hbF>4lB_`OJ3Q1(SXTf\olcj']+UFnsLXInNHl'OkCh3*e"(KK(<Oq#/Dd="Q\IG)DK(5Ak:o%&D/+\SYFhZYpn<!7RAk-f_[AWW*s>VC^^OoZA];*<>IAo$&#GTaZ:AT`l$3ES5Pa6BkLV)$':Nm!sNMU9L`ur1(IusjNi7*5]+4$%>Fh&A17_+HP%a7NaZmd;hd%mn8niFC=F4(U!_4qpRZk?@a?*qb^9Z/f(@:ARb'IL-ZI0!2lFF4_@&8>GS^enLdX!#hBH:\oFeTRl%\IhQO$X/<;62Q%kDH'BX7S^2EiuGL1%?A\ZZ._R:g&%rqlaT!Cl09?#K9fks<FBVh*t:hR%DCcoS\>P9F8RFe#NV(p]T=7?s4\ut%l07IfS,IZE7m`1/!TpX]09jU6Oh9j]PQu\tF4d@*[]@l&lbiHFQM!,@l+/T>f7b6V(*sh[MH/bU?Z_"rCufrm=;mm\FX)pL$hJI_%R*C(Ch'5NsnoT$,VH6^$bDWO,U/Co?^ViBu3%gGlH8PQ_.Zg^M/das#0Xs=(^\pY?\UW_Gs5UQ)n)#K\`6;\!:*i5`ehaY3_CSs,%Z&^Peqg\--YFkBP^@qNKfD]L3lMN<`@NRn!4cr@UXfqB3Q:RjHJ4<7^[X)O[I^U3mpu8c43Ka=#f=lb1g-<8mRZ?7hPM&p8(%:hK%Qui/c@c?k&mBa'Y0:qo6nO3=3:?qkm1[6hF3\**2URc:6rQkq1BKF$h?Uu`YOQR)c&+X#>RQNt<fdB1\p(5@6D>G"7XO!1.;%oFF%9MHf!jGHV!+Ab5jSXl`l78].0-L_=elp$6q9KDnD'<1rO$gL#)MVJ9n"5)$/nR)"aGIH&]AaTsm2q9ct2)USh?0=eG7>]qVKnYam%F0%^(Jm9*io%:]]=@>h'&-Y"dbr,2.hhMk[!W(JjWP/RJeW&XB@&NUHeXJ^($eB;#?hXhL+tZb=8a-]s`<3K/1TF.u]'E9)0_C7k%h[X0;"n<FaNFCc_/BF/$d:OWsD0Z'u[!AsVHKo.g>t/Pj(#slL%Y,S]LW?uH4YMJ^_*A@fHIc>&RQmhKT`9*De^D!lj1?YIQflVn%9@XnY=X4:a@2pm"VPaNAmZ'n%IeJ!rf4K#Y9mS&XC"MgFM^;E_!:sic]N?:QS\*,sVSkMohu_,QZUSdZni29_nS&=&_A8kfm"W#;%2l`?e"A_XU`m$l$musmE:jX\ki`[Z$"TGcGgF/%n@*i3#=P-)-49e`V1>:-la>*3g):-5i))Q4FJpiNTAI7uJZ+"Gr(tL7=#=RZb%pors+QfmD3SmuZfSp+--REo5aq'*G^F5d55,5q"5;]<$R]4u:%dqVC?0*j($eYX?7a.Hd-2S'E[:#6sFTVL1"dK+@IDsgI`@&>p;%1@d^t1+?\7\I)4jm;F:A(>).N#h4nTHBEJG1N/kTb0$a.cOscj1_!m[3sMbOIZ26;\/1j9="%\amc^V8N6^a[H)Erf[J2)99]^+-%VI.H-T=TF`hu/.\Z&<:KSC><AlQ8jfZ:<tBf!jn'L,Ge6I,()@,jI0T#OEljjNUD7EK9to#b`J"V+0BP*fQ0SY`1XI6V)WspFL!_%q&85YNJ>;dT7;*%b(%J)agNjD8Fks,A/$;`Pn,GFF%2k[,[r7>REF`9847=)[r2at<-=SQIQdWP4;c+-eq5u/TkWFReA>+&IY]/-%TSP@Aq4>B8^&JGF$+_i]d#Dmo(0(4USl?F.MdH_spHY9u'WQ5A3&H4JA.s&pNh?m:njZD>#YpqTDLucM;6)/9lD!OD,[==fi$YX"%IR<GsiA&j:a`P)AJVIMBH"`p9B-ZQtmBQF`ZsmB95*\FODmp-([)%A\QENXaqMhSXrJaK^`uSj]7WgL8/Vm"Eo'_p+)/JlC;bHPT%6[9nu(Ae.0lR)ato1tumF<&$J=poW@D/>pK\U:Pr)nk;[V?#5hOg$WD^%jN0YVSA[>q>(7AL\C)3ugm;J?UV5<tp9'YTDO#p<e.u%DdL4S2=r)UC^l%_q^u_C0f5u1r:\0jO^XM5O!:5<d2Wqmk2o[MU=Ia)YnWeI=a>Vf-Z6_\4.&0,oAF&%?Fosm.tlB$]:"^K:Z$*W%R8132ZcU#1A^O;929`OQJk]+2dqTSPTFMEDeE2gg_gLI<QS)iCo'e]a_2^pRTR-8Tq*@KVD9Uq"$fS/D^)_$2&Ufr75,LKO\7iG5%%i7t:d]5I,2r]k^K6?8oIWu9H[Zq?O(/2HXAP\A%Culesjk$=Vk)?UsIp0FJDe(a`j4r;_js$/fp!"!$hct:WG2MWuoYrm^73Yf:%WP!t.AW?LuiLAdqE(EuX(qncXon/V:^"G![7Wm7Mjdi@hfk]-kgR\f,,(!TS7JuNN$g(oM#`<gOT&g4[;jDBaZ2]OUVQ'P:YfQ9T%:fDEn3+6Hga8Q(3-IW?E%tr>HKU1D\%5_j3F-+Zcrbq4+COJ#cHG=n<Zh;%]q\`&,CaG#tCH!SQG=;tJ#<+][q91`[l`S8Z9mDN(%Nj&B+NU=9M@eA:!>*'7"<RkF/?Lf[^kj+NWhXX4NdJQ/NX_^pbki_Vg49"`l;SKQ>/\qsY+i9@eX>n4XgSqe2S_LbqBD+B@+&un9%j-+Er?cWLe\Uk:VC7E-hl#9+39K/ZM_KA(=Hro><;f.LB&s:<1_dgc-g\GQ9g=R4'rUT!g."mus(oohDA4n\A&RZdE>L')rmnjLe%VP8_R/N;*XbPts;I2Y:32Gs;DqW1\j%d5Y#De9;jq2id%\$OV2DI/&KqR=pmAh5N)/_?Xc>@6ZTN*[HS8gS?E_O0^a#Cam#8X@mr%@dkp["84K.!-)L0)nIS/HQcPj8j(%45=BOYU<$@^Hl5"-<bmq;DhCuSb$bltZa[Eue4kXhSXG7T6gC!W[J:>e;<nUVZ@qP_V(tLh%mo#M&Tp?8F8u3GhN,5ni`J%Hs7U1+lXBet[m!gu'Tjun%ddm&eK;s7!*=Al8K+j'a"K<&k+.W8VZ9&b`Tt)BZ.[&Rubb@W(;Ic_(%AN$k"17T5p>FHQI7'p07#OPB8a&[Ji5O[ngj<:QWPrmkC[#VHR[J_u,Njf+mishRAfZ%JC>q8[c*H,nD#A4Bd^cL<^ZB)I(\[*G+%<CZmDC`R*d\"BpH]HK9rdo:aU2dfb#ICcQ#K9!nm<J'Vdr9<@J4ggrgb[4iIHootAi6VJ/3IQ7dmJZj8eOV.d;/9apnb0Qj^2+!9%b)mTY6;`>*eo4_3CuU(!a3u*#(8:k-;MjW\$9LNe#reg8m_FGdN-QRoSUP0QjAgEue,qtb3o?er?!PBmc:K&]2ep[.!MZ4$:+?"`%RZF!YL;W]oK8GG`a`%_KVGO/V2R#^&+gnSOD(G!rhV+=:9\Ult96;(3Bu.sjl^iD6gb<iLF4dq*>aWdM-r9k0_JIMPUh:RR<FjN"%h2Sjs`Mh7+4;_`Kb/M0"KRRd[LN*,9F0bUJ*+j)I$_d"maBk7Q%S9A=p2uYFWJ4Q+VDTJpo)pG*L2*<N0uM;[ja:K@_.\GVS1dP;%Q-7%70,L?c+(RH?/e$p6"6=jggLpjQc50knkA<CiD@4LZ\6:)f!u^!F*R\bpea:pW^C,lHc<Yl87qqS,>Us=o&RX/V[(VB@oH(c*%_ru;IrOS$WZkp\1=NKd(AogEbS%D48U>*X1g[3uSF1^@%,jUSPo>NbaY@\'b)0KP.AqSFep<r#:VV>S=YTlrj"HKM6hLDTLd>c4G%^:c-/gKk\Oam3sJn@G9D&Nd`fY7%QqQf21$['3iiQ<!.n`(CEl</:0GD#^h3'NLs]c4D,`j)pk8#MV!fXTjh]#'t+-^srYZa?]AI%bKJn<L1(HM<YgH2)<`fMDa)q/O>R7j!tTQc+SqV17@'((rO_(!7kMe6]/=MJY:N/R0+g"r4)CDS*G20q/l,'a(P3s7W2K#VpKZjJ%V]XGkG@OkF4^a$A"$)5[aC`/XHk>U<FqJh+N`=9V@MVC>\'eV*J6($Y0q&!eYidY4F(,:P?PQb0HP8WS(oQuH*TFH!O"YtXQNpRi%KeIlSntf]J<=M#cCUO$51'P#mHZp>(orr5Nq<c$_^3JM6-G\gg\,f\@['9?\UPEG\hIpUQRgpPLA-ium3\\2;A81%4I>rYq>s\/2%Unk3L&`E:(]lY!2Cof!i]%s4aWO,^jWfk[R8(\2bYsX:(9:<om+MEG62O26sb?T1M@JE*LF0QLXFC?l#Fs30qQVmG>N5B.YUP9[7%CsN`U>rFKJ17;5qaoTFHk5T%[UBTj?o\T?t.TfZ)"qt_E=@Ke&WiWpl)+Lr,7hfVe`2n'[7iI1FUBL$TC^.6&K-Dh+i8MctCS>`C%;\b%h3%(.6nTVh?+r,iYScm6Z)UilOC6lcpKA^/U74Spa;13I"pF<[QgQ,gE6?9?*a"\cn!Bec8bChH</ZgPJ(4$@VE[7bOmnuQ*%ALl>?/@eA/_`cUJNr\N0&]b"aiT+aS^EA'imQ:b;6@O"M9\LnB-;th8NS7B@alYiT=bNS8o!t9kCcs^GjLc(l4L?OO$bd1#SFSbf%-mhh;,#$f<Jm`$2W9dbsj]8RQ'4D>R+@sBFo/B0GQo)DfhZM=,D?NGEN@5Nj`a8VBQ+)aNf;os2>W=aC.\m#oeV3<eQ2W8D<$s%s%@!Pa9p-@8[iSgckmY8BdNG&M:\J!LB'qb\-"jF5"fB;-I"ssE3*K^W&_L^&e"\rX&lVc8G=23c9gV*%6YqfVs(h<LqYub&jB+I$I%AhDje_7MM/X.#5K[)-q__htoIIfLHLJp^8WVLkF1eS]eIY7DNp-Z`"eh?,J"6F`5Hgp;h>,`Hb@$b=7:*e\e<W9:,A/gDr9cpnGH%D!)914/PF3*Y:5>E[OGaib%N:oK)+?o9?J*`4Y81685'jcH.9Xb$sc7))".7/1TnEO"3NeO86:NkX=6_Lr*a/DH'mHf2PqPU\@mX%]AWp'ku>qXYB8%AFU0JermTRA-b]?&.%:d.n:T@5FuhIIYPF3'$e_8?6C1BlM_"NM2!et':eCfA3IAM97tD$:J3uB7r30XHAT[^S%=9c.qk,PRJDH'R/5!4[6_U"kKi]UlqH9?^`Z/n,tek-@hf%![B*e@W.G1*QIA9)Hc%=[?D"uAk$.YuRhld'H!^`G,m$S+bdWpI7*%hT=K<)e149jf#\(":Qg8<MM&4bE3ZONFs:SoSLk@cbHN_l%LgJ@j>pi*IH^^qKs:_.^:$p=I:]jLS-4ekQass2@D@O;:(1m]odY)%<4B<A_'GD*.H*lT<U$&0km1@Vl#R6]0\1KA08p(R4;'u$aI?'6@m?$#-hJB!ot9gI=Oi_+b08Xj,=:*6JZ:.g)%&\bQU/sWIsN91%^Y,N_%*R%.s/m]2njoNb=ha7Bb9^ui%i:C$i:6'q-#/j_h)7G:gF!`g!u`nT-OVfQB09P1rQ?"O/i*n*g!5W?%,JI-^/C"TU(/TC%k!=EV4jD@mXP>)1+uX=B;2*PVPT_;.Vf^$f/,?d+)"`O/6ke=VfqD/+3kC.X\qA\djp2f5UV2Uqr@7k"b;\>4FDhgcWHK?6[#\hs%6\c`7NuhKUkr!%@g$bOMI63amXDkhei&pd#Vc&eK@+^5pRd:&;0"*-K+"8SPq&DNh#.8W6RT;rb(EE\tJ""9Eo+BRiUjFCumHJ(^%Hdqk[)<M8O%7?"a?'])K.hS8-BbPhiAlf^0S0?rY@WJZYR^1`b_."fnb4a6tkY=M-Lsm`%V9kqYeJ?J2V/at<$-VhP@]F<]AVOIS%MG2L4[tZdNp2N2W)`u`O(F$jQ_MSb#pSFQ])32d]Z>q*k1?k=DoS9;cNInkuqDlZc;VpefE]!Vm'GD*"`\9HP*pDR1F2)&Y@p##3%1C=r9/uAQXK&iOfZ\LVm?1G^j3o]?.$-P`<%%^!]*F:Ytm]a]P:1_i(D\r-;`UhrI+3WgqU!*e2>baX<R$Q'\;8Bmg\"![VdL^@r%!V.YWC>h+53kQ'$0-D/()O1#eDQ5FAJnD^i1B!$*WW:HD!@4Ea)j&^)qYi>dL"hE8s/G.l;=*tS#:28_I/,UBgVUl2-P^d3rUJ-\%9Otu<%o%u<8.?c)3%K[VABiS8*Ym&sk+B#%`/sisRgl%R:l>^5=p0dAB_9=-JBA*A!nS'I*"C;_U57P_5-&.T3/seq')]S@+._*R%(G5[k48<UmDe']n$=8At%l'B?fWb@*9LQCP2Od'u!5k`N2l`j/gkFMkEFi`]Q2($Q":U0h>:"q]-O6p<<$e;#?rd<@HRU@(5Pt>o%d'Ufa_]f/TCI^o%/$2)T!UTt59!%tge7t5T>%R5%^pS#^4g/&Ur@gL2Tb0HQ(SY%/>`0[,F['ROO$ZlF/EH8o#aFcdO!j6.d[Y`q%hubmUSclZ+^>B]*!WEKo_b[Y`in#?&K*;Wk2!=2!6?%KA$f%-?1&>sch[GM`,!Fd&%N1AOc/DJ5]An52Z:o$JHST&(ejAjqoVSLJ%H-VnqL[6dOT5fF\DW+Y1:=%jS@%.&VE,.](p_%"Dq#tJZB.ON7$<25EVF#5SAE<*E=>XTo/MCk9ic<>o&b4An"iQS`Tn"1`3f3i@%[_']QTfrc6=s,3IZa8O?)qZA9/LF-95tV*9."MW3J85^u8UO?m.bUfXo8jSN@Bup;UgFs>.8B"&h"qiuA.!Ge""5$af#"XrUR*bf%)B.q$e<t6sK:.MW<ro]ZiCg]m;=5tCP+8,-l&mXLAFiJWXV8_UIC<oon2;[aITZm'96kXGA]^t<mO2BUg3YCZKTSid4_c*SafS3u%?1V6d,/*,BQQjn9(QA()"_;`Uo]q+Wa5u/38.[<E=pC3eR5[qgKA=%?F$M[ab(=^Y\'X#U2\b0p\^55;W(6t^Vsu!q,Rl!rK7+p_%q'u,H`.KViZlPJkC8c"c59(8#Zo9o??&Q`uBq(@?5W!(b13WLS=K>=X('O,3ifdq.YTlQpGoMKL=7D6b`@@#':!g%\Ou3b%l^W#R%^RJejC"+sK2Y<h$fQf/NSoQ(<0Z_7')T<\_-8hM&o-.HC5/skKEpX\)&QUbH\']gJ(FaKN`6#V)?B1_YlihT6Tg#BrU9k8Nk+GLD%Tgg7MK;&4"_ZHto-dHC?/E0GF=J3"PZ\Zil%NH6RD5'2<(b9M<Vb<N%bu=l_.i&/\#,L+Hc[6_,nG3SbfANbN=Qma)9ce1]1T>!Q%I^gP,2;gA:$[\I*hP4a.F3%2F`;Ml06<lhN]L3VA0"B"JoAJT7$`WOPcV4U(%%`BSA.)X)ib'/VO!NEF*+d6Yqp/d\&[<XqX_/=T%NWtB,,]D'Xm^l/Zee-3.Lqm1SHLD(jZJ(O$\``Eos7Zn/'bW1=-[6fn.u,$t^OP!Dl3[p$-A-?VJj]E+HJKfH&Ws[J!kf'Fep7m>%rFslHUm)\&;&oOtfW`&ulu[Ihk_n&<-HnU:dc"V>*aXMK.)fj(050n>FT7n)EJSlY]N3@#Qgb(3$a@T-"P)#-%@Hj":sY[P@$h\K%/5<b/gq@G9`riM&CUCP"=X)a;;i[XM5uY=jfYRr1qfrB9Sq4GIKJ\`t)8,Q7P2m@eB-LnD+a'e)-:@Vf@M>0ZBAKN=`5"5E[68$1%Z2H`:JU9)^;+6am]%B##XWD!jVNqil?;F+/qGE;m=fMp`4%\S=G"bi/2)',m#=eA_M*3kep.4P&=G<l(@mgM9;2<Nu^BlDG0\2R'%'OBZ<OfO'@GJh(QaD3S(^.(BhR+7f[OPBIlo_Y)DW:G;DQp:_BWG3bPclCU(JQq%tNAlR/7SVRVWC*HoJ,7A1=#%snbEA&KWZYE)%ete]2=r]pT>Bfpk<_FB1-?L]]lI(iFg6^6hhQ^O*?:qQX@q`dL;Q:<(C'U7]V2VP&6`72WBUe!.pCU$pSZ[>:I$S'^?X6g(&Fl4d%<XL'([3'TC-!&b_q?9Uid1CZQ_a(d*qgE:DHAtOsBs=e;bcf`hOfkP!0)\Ae!>]]t8cfIe1CUH4&6k$E.1*A\pK.qQS,+nQ0YWEf%pMeq]nZ:U<-+%C<G@hU.or"/03(i$*Du%KF-+!-R0YKm:PC%dF-4fGf[5lR$rLespl2_TDDO8kM0*!>=cbtl4M6jcH6*s7?(I1d-%4#`E7(W=78qk6AfRe;6@+*r--Lj7fmQr+XQ368+=fs2]"'F(d[59,ln'Nr'Hi)rbM\<\Ekbi)6E^Mj5"S3laY.G[-EhTM)435CZ?%m<DtL]0!W9.>kESUP`8t+kY9*ARVT*)Z7Gd7baGiUCDNf(JmHDpUV'XlsB!UjJ7"cK#!'q4iNm7Mlq3ea6$s.@"G^!g"+,'e6VBl%/Cs?s?.uS<Xi^#J/ta[r`ii$8T\?e-ou.mqpJC-612;);)#!aqKDJ_m!O"h>q4qKrg$\[5j01Z.Qk!&`8ufnae8a-=0MeUp!3%<'%9ugZodFk]hBj#IMaa'GmG"3^pAZ"Ti*%(T>.87]X>1+rlH""t>=f,8?LkU*bZ3/-H*$Q]@fBHoV)r<%S1Pn`K7sP,H(us^W**#!>%:(`Xf.38qR7#kNkXl0hT]\XP:^JAM>eo6`(6YGo.Ls4^o,c9f?<L%mTd0u_uE#aj3GMsb"Tkb"\D?kFkTjqr0r?sWTNLHbHE56L!%o<$q)Ui[<Kc7m(L,cC3hl?(jm;9q(c*_Q\"1NQfHDe!(gNe4V6FZC%e1k@XB;%U@nHsaZ_QdqY;)DVpV"Xh.u@Q$Y(369o(fid/,%.hbKI^HoS$N8<_Wcg.TiDG-0Yn%Rd5&h4E>gE2dr-$EMh7]^VsH$po<B:Uc*K@s5o14qAM$1ZbVh`u?]l'G6K=<AtPI05m,[6$0(%a%.R<qF7huk[&eB7WsRX`U!dJaN$he!YeH\:8DT>[,?W_+2,Y[6>fGr-*`0j`@T(fg'b3iP'4('%Vpt#ii7<o&X:l_apl_OiD);D%/]N+-Cfm3(S\:;Zoh'F?nD215T55*W_Hu\.]m>AWZ<:\N%Q8FB>Jb9]$_)FRA,<iV!UU_<f=EdRFhcL]F`9GtiJMJ2E8+7_-1VY?%;8]O36LN+D:ns9)%WKU8H(bUk*MP8FF$`BBA1oJBq^([0+3\AdeVsN%A4lA/BI)LLMPB0T*<Si-$T%TU!?nD)@n_2:3`a>5C)8C'%NCQFLG-[d$-IlYG^Tk2lMue:WDqcWF5Z^(M!*^P_oS$mdDXu_*Wj*FS<@0"eA]59JYi_E9'i*4hpUp34*t5,_ES2[*d8#8e:(*Xr%HicNKaU<Pk/">RB*=jU!C:5(He38N.PF0Mc])6JjLI7lP'TaG@&V,X"Ejn;dKtSQZ_eOjFeF2S0)uKEiGo!46!Yeg80=Se[;.B'&%jKPAIiPqHZ+cDUt209p1Y\RuVoqI#Y^sF24_0udfcK@"WbDe!]rorYN-!!7V@G@!;s60j#F0I8Rp;mC>mk19)UE8&7ZD`:]*tU^L%h#_C632-;<aoE%s#UT]Fn6+O"e$%EP1W+<hnf%9mQ)6q7)]866R=RQ\)u36DAL\g8<)fk1Jf19K!,*ob"Ja:N1N?l#omtMOq9CEG%"CQ'4K:!!:/;sjM\m,N(q);/*/R3P#(5QkG:#LV].t[-XJSZ77&UdCoXnkmlZ(cK+.e,@F[VqUI0<ulJh%#8STP-gK*e)/s$T]OI%e]5!Xib(/YA2if,TSEdTGt$2peXnh=gTGlgKR)PF=]G,#Z(.[tbXQ%`/F_AoXX,\E'a9]/hXKJ(@>@1^-ckW'L+Hm1d[:iXqHu@p%*bsjNoVdSQ?m$!UKbV,*5lE2$;+!d\Uhs[32X/$-5(b\%dGNI%6/K>T&26K[/2PuWs+._IKHeTe5#[lG3WsAr7qa&aS,k5,lUgRC%(fh^2D\T;TdMn"9Z4;tLpg6c:V_JcEHXP)8`]DS-LTJR,P6e+rj]H/_W<K)d$>j\%kNJ'A#fjii(gs"N-,f_/#cm[AoVbAH&YViG%d!oATUnZ`]S<r.+4%,kZ>%/o*;!p1*8TG%pkhRos35Pceo-Sj;UL@T*F'"\HLS0l<J"_6ikK]"X<Q-gJdPhp34Y5!L_L10KW,NP;%0ns4;<Gg<$5p^EK`)%2;#R`dhMf-%e/E\32<95K^HI$s^niAPdY$lZm9l3e=7tX^pT$O+pSRRY6<?#GG[(ug6!K^5Cos4t^,i@N2%h])?CO31.BL@H=OD'H&*jcP*&UQ)p7gQ^UAH7(V4DKQ8<7NI9uUQZN[[m=gd8;*u#O9HrW4E#lX,X4<G`sRS1`938fhe'_uMkc_#%9F!!![U"HBQ+s\$<feh'57NkZe,bD%+):A!Bi71pY$Wp\'iXSjStBY6\dtiKi9>-Km\9TOHKp<&d_R(R#s?m*al$1i&un*3j%eRs%a]qM7iTNBjRo;:CMOpM/>Es_A!CbPO_SL"u]LGa;QqlW81l##4\Q[h8UMp4]OgPl5fI:bW3m%R-#03ic0\X=.C6.Z/.3/+%)q-5U%]i\FTX`2'r_+nNFQ,'4=e4\[aM=kVABnN-2Vao^]rJB&3SAN*(PufRPmAfG/:>rttNQ&!-H3'WAo;+*nY$\)GnAa:J;`GPDO",]L%j<`P0*4U/Kq#8PekYK/<)Rrj;dt*h!Z&ZeuDa<ue_eBo<j$1.S/jsj4EBU(SaqYtOj-;DQK`a?W\QiBl>JsE!>>Yf:9;C95SL-^\%Hro5DI.>ge15nkbs.Dp8ZWg8_WhS4S_+/+Roq=WV`tLGZ>.Q_lgP,<ZC-"[0@bAm=!Q$&uWKWL^HIM:C#A@bWKFT<*\g=cmo8#j/%,s1%$P^OW43g-dDT\VZGomO4,mSdCgHgO9n!iciu]=('Ll/8OeGXN;MV89Os9TjHAqAhB&Y>LM87m*c4Q)@N%q7^UGa\aBOdj3'1%E8E8Z-R8Db\!u9eU8?WnX5$-uBAmmdSa/>KUDiR;-^[WJXJkA=9^EZFGH2YAq0cG?hD<;FcJuQ3>6N:$%.?Yb=mVJa4]]_?4%g/D%QeQJ:2$.t6ks;k7LenJ]CZh4pd,A-pScNt;"fb(PVE#rVaeD/r>fpa0>utHSh<Aj&B5#aCW#1_Mh1%aE(=!^Dk=Wb8p8h*WNgUHJ%b4*(aoTbAUA_:Fs9*u8b7s8u/Ehf?h(iVO^Y5\!ek!Ng?C96Ipl<o0;ri:\I'`;#OT=M-pSLtj-(*$2no\`YKf2-Fc&tBNh0r8Y.%Q;l!M-&6rkr4K0$0E<t'>-stkD`k`nD.)#950S_rl=b"?=:jP_rn>C2jsAja)kg.dNA`AqRi.8Wb[IVgPIP(\npf%8gjJh%hES@7%48Bc+1WOP`X'Id(r\ELM>-XO7M4HkKN1ic>D,F/56t2EBO#!SSp?lIo8h\e98R]PhL$5?e,07QZj:b#-0Itr8`rf8FB.;JELK=T&%X/"S/.u)f@^M50_D7j=o6<fPGR.;_BS[g*W;G:8YJBl<S3<='b3uV+Y]g]QA=sl,W7N\MDmA\d:^L/3!V^bi&+Dm;b;%eT4l/jZ.%1B.0`q$cMH_]'T"QG]jJC<,n%$XAb^fe,u6<@*C?<2$&8$+VonU_bg,GjD#Y$+&Z-#Nuk[D`WMIVPna_fZODFX)#^S3J@Pqi$!A'%!J@E>B.9K-%F3raAXZ'q9As!J%V&F7"]FnG[O?[NXuT-P<</TMCPBdI>Mh\jC[PN"7<GWQ;(8NH*E"LQF[k$m]q1,-bM?m*M@Zf%%H8?BL]"1"5fCbo:10m(*20BN+*6;6uELXoY5?Wmd'@_R*BW3DY&b<TA<7^/LhC=7(#qQ[sR1sr6,MuNV`=,d3W[NtsBW81onP\BW%5s]=9K'CYZJ/$LN\t,ks4@id[9Zja`@mUcsbHt(_)?R@DN$XU5G;`5$e[3LR$AceTDYYkJB-/Q<(MEL#\/T,Q2RnG_oB9C#7jR\M%-.hg0qN^()n6-QtRC_2VZ-'C="ZNDNQF^["R9P:)Aan^sL;,Vs"*B,DWQQTIi@/>&.]l@+abEN/^/(5TYqXBD_lVq/7T)V#4KXS3%]lYVb2J_%%/u[6.jhd?uhWhkYLkisMS3LLL%R[9<p:*(##t(SD<f?qC/6TDfVpN3,bncdYW$fr1Z`6p/e*mdJ:pZbkW4Xa*dUtdo%h%_Zs/Ylk35u\D"5']8<-'kk'nlDq2Q;X/M1K?h%V,@2i'cXL'[Ha&_btb6GG%0.-'?&a-4Wr'DTi3$3Xi;iPmoEq`[;AQLnNW;h%?agfo+XMF\QIQ&tVa-68crVVo)pZODpD%TKB7*^agRf@7a?49\GDnf&`cRM)eLJ#Nj[M^]HD!SG'ju"cT`@To*n7:Trd(&CR<V0T%ZP$!1.9:W8i8`o:fq7:9#o1sT?J_Cj;R7\0[?O1u[(*<^*7hf\.[lsr`(j?4=clhp=UEsTAX%3^0;P!i@Ha-fN+2]m;=kRg:cjN?%U.Q5CMb.'BAK0+%8aT-rBpc;qLgESqqDCktCcj.(4mCfs084[5@r*=7:^>#Jo4IS6=;4YuXp]ojE>Up%o)Vf>=.7JWK:ph1cTu]1%5C^;L<`o"G,J5u9R6aoM@>Xi:@??jG5=[6AX#PU5E3o8HXDS)nQM3`S?=?Yb6MYj6\WBe@?(:L$Ld5sgh_jh0E.?</<"*/u$bVN!%jFrBobaLMDM@'bgaefp\FbjV+\A#+(>D6aQ/NoRnUh<m5p2SlDhGtD1m86"oVlbGT@+?UL:s%J*lrdm\gp1Q#FZ<$_<W1o\pS=6B%DH*nICqoHLZ\A.0(4O5oH.!t'NHYc&<KY3OHrg!cCZ3\(PeqMq]LT?u7CSCpiJT/dS;#:0A%4D@/A?D3HWKf;2^g+$bq4<@-)6g1%;ZtZXp_@:YQ8DgqQsY(T/^-Vk8$rr??hi5!^1tao9?M5Z/?k`E!Ln\@[[s6-+V]m=EX-D#Y^?-I(-sb$N+G%X&WXkQ@<]KgX7JM_%&]iPGIDA;d[;5L;$`p0$J45DoDuP8m@7^9G`=TXHY6-\+"onB#(-tIVT[`dip[usP,kZ7$YeZP6@i_cZ6qYiKQ$?f?ksj=+h&inh%HOeZrLAKtVJ9aEZKE\e:e*DZU[HUPk',FBY:>H<*$&`30(@DhO+cM:S3@?@Y3u5<6XEV@:V)g*B2bTaE,<!j-rnaD>l2:dRiBC`@%XJNMnN/^bq'[IYTcli_FF2e8cqNfE/5:`de^;>W[)4Q5:%qcTV>drkAfMDB96"-g2_m-3C1H#'2#-.KBYH/<Bk51oRQ,p2.(:1%3%q2CV\]*5$X-(W>!!L?gNJaJbV8BKr*i[XKQ]fq<.bq-&6^H<?+A2pV>YV[oFL/q;R0ie[>AM6K*P]>0\W\Vf#f632^ToW\`-)/)_%c)M1?gQ&-'h%2Gele10TBeN9BqX1<1^[A_M>/?X#)=^_oen0)*@#Rs%G#_oc$tON],/G6`[&Yr#Y1mhQ_^_:n/lC?FcPNF>S;icp%C21=R?GP%jjc%>8r[lZ]cI(BI\c1-dI%EH*Z+4c3ZE:E_F=uu*p\k=$Z]S7r;D+QEJW4jEon0M=jl,MFXCf4;e1H44k8;O5UFKHq%Nh\LS_"NbFV-JgI0i6sArbT]+-5\sSSqB_$j9jIPb!D<NcY8Ysr%S+D9@GYrp8Bf!D'qaEX@^=X"#6RP"pr)nMLYa$:.uNkSlq2=%3+&&\Bes#<$58A2eW/46r^9D-D$@C;qdQFDUa>\6E>#.@SRtDs]R*C1PhiKDfDpiAYJiH_?0qq\EeP9Vf;E//N?kc<WAe:(drV0.%`*^ddoKrBA3pr%H.thFX1ROGu1si"^6*a0;+2gcX5t)4U9@L0VpE>d&\WB%g19;PI+'q4DR0`&c"N&Y'01KudFrYC:Z?;paZX<*Y%4H`<3pYr8D<.8tk3T_J7SmM!rU)lL9GquFQ:Hp>sV;K)%lhrt%pLW1%l:bUeY)S#J<D9sVS!A;MRZ*&Vgf+H"!LQGW8]roe>-/iZ%pDHjE8@8\,a]2`M-$f.MN%5m73u`BS<64'.)ktq57Dt6b<^AEPiLdkF%!MO$J%CaJC''M_0G<U6$M.mW?/Zp71Z;mO#5_Y:5,9S4%;X\[Laul]0>R9ZA&o"4_!3i(qP6G]dJqo*r:50t17&ig1,"B-YIUf.A,mNb;i2?7EJn*F$^#2ne-Ja7u=jDCg>0O8\(2(IAf_CEI%b<W?L**+P9n6YU#Pu5hY(X!OQ93Dt8GqCusR`7LJKe]b7hq27SO(c@lO@"k\>OZ*'Nj[a*fI4/a=WQV,p!,(JBs5!5CqYrbB`U/.%]sB9_DS6W?AW!^oACg/B>48OBhelCr-DJ31oj6nu&6$q7i*j6&/:ltep0-N*g=Z;=lGQPtB$'AJ)uKEiH10YirnH=Yqu+#(n880s%0E1'/s7u,t^&RD:^\Lt2[f4mnrV_4ms6ZG.q;^B1c*uU.k2644GJF'R5Q:AkJ,JlXDnl1uDu]?oT76\7huDXWIesYjr6OPUIeqkB%J,.PXr8E^Or:Ho%s24j<o)*#-s35K]p>>h<DuUb_8_[t~>%AI9_PrivateDataEnd