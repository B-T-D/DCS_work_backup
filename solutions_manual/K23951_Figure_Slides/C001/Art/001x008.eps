%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 001x008.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 114 346
%%HiResBoundingBox: 0 0 113.3999 345.5996
%%CropBox: 0 0 113.3999 345.5996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 44 128 8%%BeginData: 6530 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A8527D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D%527D7D7D527D7D7D527D7D7D527D767DA852FD047DA87D7D7DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8527D%52A8FD28FFA87D52A8FD28FF7D7D767DFD13FF7DFFA8A8FD11FFA17D52A8%FD0CFF7D7D7EFD047D527DA87DFF527D52A8FD0CFF7D7D7DA8FD0CFFA852%A87DFF52FD047DA8A8527D7D7DFD0CFF7D5252A8FD0CFF7D7EFD04FFA8FF%A8FFA8FFA8FFA8FD0DFF7D7D7DA8FD28FFA176527DA8A87DA8A2A87DA8A2%A87DA8A8A87DA8A2A87DA8A8A87DA8A2A87DA8A2A87DA8A2A87DA8A2A87D%A8527DA8527D5276527D5276527D5276527D5276527D527D27525276527D%5276527D5276527D5276527D52765276A8FD15FF7D7DFD2AFF52A8FD2AFF%7D7DFD2AFFA8FD2AFFA8A87DFFA8FD24FFA87D7DA87DA87DA87DA9FD22FF%A8FD047D7E7D7D84A8FD2AFFA8FD27FFA8A8FD2AFF52A8FD2AFF7D7DFD29%FFA827527DFD28FF52F8F8A8FD29FFF827FD2AFF7D7DFD15FFA8527D5276%527D5276527D5276527D5276527D527D527D5276527D5276527D5276527D%5276527D52765276A8527DA8A87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8527D76A8FD28FFA87D%52A8FD28FF7D7D7DA8FD0DFFA8A8FFFFA8FFFFFFA8FFA8FFA8A8A8FFA8FD%0AFF7D5252A8FD0BFF7D52FF7DA8527D527D527D7DA87D7D7D527D527DFD%09FF7D7D7DA8FD0BFF7D7D7EA87D527E7D7D7DA8FF7DFF7EA87D7D53A8FD%09FF7D7652A8FD0EFFA8A852A8FFFFA8FFA8FFFFFFA8FFA8FFA8FD09FF7D%7D52A8FD28FFA87D52527DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA87DA8%7DA17D7D7DA17D7D7DA17D7D7DA17D7D7DA17DA8527DA8527D7D7D527D7D%7D527D7D7D527D7D7D527D7D7D52527D7D527D7D7D527D7D7D527D7D7D52%7D7D7D527DA8FD15FF7D7DFD2AFF7D7DFD2AFF7D7DFD4DFFA8A8A8FFA8FF%FFA87DFFFFFFA8FFFFFFA8FF7DFD1AFFFD077DA87D7D597D7DA8FD047DA8%FD18FFA87D537D7D7D537D7DA8FD057DA8527D7DAFFD1DFF7DFD2FFFA87D%FD2AFF7D7DFD2AFF7D7DFFA8FD27FF7D27277DFD28FF7DF8F8A8FD29FFF8%52FD2AFF7D7DFD15FFA8527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527DA8527DA8A8A2A87D%A8A2A87DA8A2A87DA8A2A87DA8A1A87DA8A2A87DA8A2A87DA8A2A87DA8A2%A87DA8A2A8527D7DA8FD28FF7D5252A8FD16FFA8FD11FF7D7D7DA8FFA8A8%FFA8A8FFA8A8A8FFFFFF7DFFFFFFA8FFFFFFA8A8FD06FFA8FFA8FFA8FFA8%FFA8FFA87D7652A8FFFF52A87DA87D7D7D527DFD04A87D527D537D27A87D%FFFFFF527D527D7D527D527D7D7D52527D277D527DFFA87D7DA87D7D52A8%7DA8FFFF7DA87DA8A8A87D7DA87DA8FFFF7D7D7EA8A87D7D52A87DFF7D7D%7D527D52A8FD04FFA8FF7D7DA8FFFFFFA8FD09FFA8FFFFFF7DFFA8FFFFFF%A87D7DFD05FF7D7D76A8FD28FFA87D5252FD287D4B7DA8FD137DA85276FD%147DA8FD15FF7D7DFD2AFF52A8FD2AFF7D7DFD2AFFA8FD1AFFA8FFA8FFA8%FFA8FFA8FF7DA8FD04FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFFFFF7DFD%08FFAFA87DA87D7D7DA87D7D7DA87D7DA8FF7D7E52FFFF7E7DA87DA87D7D%7DA8FD067DFD09FFFD0D7DFFA87D7D7DFFFF7D7D7DA87D7E7DA87D7D52A8%7DA87DFD0FFFA97DFD13FFA8A8FD20FFA8A8FD2AFF52A8FD2AFF7DA2FD29%FFA82752A8FD28FF52F8F8A8FD29FFF852FD2AFF5252FD15FF7D527D527D%5276527D5276527D5276527D5276527D5252527D5276527D5276527D5276%527D5276527D52527D4B7DFD13A8FFFD13A8FF527D7DA8FD28FFA17652A8%FD0AFFA8FD0BFFA8FD11FF7D7D527DFFFFFFFD05A8FFA87D84FF7DFF7DFF%A8A8FFFFA8A8FFA8A8A8FFFF7DA8A8FFA8FF7DFFA8FFFF7D7D52A8FFFFFF%A8277D5252527D52527D7D7D52535252FFFFFF7DA8277D527D527E7D7D52%5253527D277DFF7D7D767DFFFFFFFD04A87DA87DA87DA87DA87DA87DA8FF%FFFD04A87DA87D537DA87DA87D7D52A87DA9FFA27D52A8FD1CFF7DA8FD04%FFA87EA8FFFFFF7D7D7DA8FD28FF7D5252A8FD0CFF7D7D7EFD047DA87D7D%7DA87D7E52A9FD0CFF7D7D7DA8FD0CFF84527D7DA8527D52A87DA87D5253%52A8FD0CFF7D7652A8FD0CFF7D7DA8FFFFA8A85252A8A8FFA8A8A8FD0DFF%7D7D52A2FD13FFA8FD14FFA87D527DA8A87DA87DA87DA87DA87DA87DA87D%A87DA87DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA8527DA8527D%527D527D527D527D527D527D527D527D527D2752527D527D527D527D527D%527D527D527D527D527DA8FD15FF7D7DFD2AFF52A8FD2AFF7D7DFD2AFFA8%FD27FFA8A8FD08FFA87DFD06FFA87DFD0EFFA8A87D7DA8A87DA87DA859A8%A8FFFFA8A87DA8FFA8A87DA87DA87DA8A8A8FD0EFF7D537D527D527DA87D%527E7D7DA8A9527D52FFFFFFA87D7D7D527D7DFD12FFA8FFA8FFA8FFA8FD%07FFA8FD05FFA8FFA8FFA8FD1FFFA8A8FD2AFF52A8FD2AFF7D7DFFA8FD28%FF527DA8FD28FF52F8F87DFD29FFF827FD2AFF5252FD15FFA8527D7D7D52%7D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D%7D527D7D7D527DA852767DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA8%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA8527D7DA8FD28FFA15252%A8FD16FFA8FFA8FD05FFA8FD09FF7D7D7DA8FD05FFFD04A87D7D7DA87DAF%A8A87DFF7DA87DFD04A87E847DA8FFFFA87DA87DFD04FF7D7652A8FD05FF%A852A85252287D5252FD057D527D7D7DA87D7D277D527DFFFF5252527DA8%FFFFFF7D7D527DFD06FFA8A8FFA8A8A87D7DFFA8FFA8FFA8FFFFFFFD07A8%FFFFFFA8A8A8FD04FF7D7D52A8FD0CFFA8FD1BFF7D7D767DFD28FFA87D52%A8FF7D7EA87DA87DA87DA8A87D7D7EA87DA87D7E7D7DFFFFA87DFFFFA852%A87D7D7DA8A8FD047DA8527D7DA8FFFD057D527D7D7D59527D52A8527D52%7D52A8FFFFA87DFFFFA8527D52527D527D527D52FF59527D52A8FF7D7DA8%A8FF7DFFFD0DA8FD07FFFD0BA87E7D7D7DA8FFA8FD26FFA17652A8FD10FF%A8FD05FFA8FD0AFFA8A8FD05FF7D7D527DFFFFA8A8A87DFF7DFF7DA8A87D%FFFF7D52847EA8A87DA87DFF7DA87DA87DA8FFFFA8A8A87DA87D847D7652%A8FFFF7D537D527EFD047D5252FFFF7E527D287D52527D847D277D525253%7DFFFFA87D7D277D27A8527D767DFFFFFFA8AFA8FFA8FFA8A8527DA8FFA8%A9FFA8A8FFA8FFA8FFA8FFA8A9A8A8FFFFA8A8A8FFA8527D7D7D52A8FD0C%FFA8FD19FFA8FF7D7D527DFD28A87D527DFD2A52A8%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T15:23:58+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T15:23:58+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T15:23:58+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>84</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABUAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7F5Y8pfp+zv9Uvtc1tLh&#xA;9Y1mER2+p3UMSR22q3NvEiRo4VVWOJRQYqm//KsrD/q/eYP+4vef814q7/lWVh/1fvMH/cXvP+a8&#xA;Vd/yrKw/6v3mD/uL3n/NeKu/5VlYf9X7zB/3F7z/AJrxV3/KsrD/AKv3mD/uL3n/ADXirv8AlWVh&#xA;/wBX7zB/3F7z/mvFXf8AKsrD/q/eYP8AuL3n/NeKu/5VlYf9X7zB/wBxe8/5rxV3/KsrD/q/eYP+&#xA;4vef814qwqmp+n+gf0zqf1X/ABp+jPrP12f639U/Rnr+l9Y5epx9T4uuKs8/Lb/lHbv/ALbmv/8A&#xA;dbvMVZTirsVYb5z1bzRbeYtEsfL8iyS3STyXFnIYFRlikhHJzJSTiEkf+7PLaoBocVSu8i/N6Oyi&#xA;ezmee4e/nDRypp6NHaKT9U5lSUZWWnrlKPX7AA6lUPZ6T+YqWE1hd208qWWsWl3plwt1CJTbJqRm&#xA;uEqJE5Q/UgEVZfi5My/ZoQqv1N/zpn1e++pqtnpwvEWzEa2UtbQLKOatLJy5t+6Lq6ijVCkrir0P&#xA;TmvG0+2a9QR3jRIblBSiylRzHwkjZq9DgVEYq7FXj3/S+/8AOg/92fFWU6NZfmPoUF5Y2ek6PfWk&#xA;mo6le29zNqt1byNHf3894oeJdOnVWUT8TSRumKo/9I/mj/1L2h/9xu7/AO8Tirv0j+aP/UvaH/3G&#xA;7v8A7xOKu/SP5o/9S9of/cbu/wDvE4q79I/mj/1L2h/9xu7/AO8TiqW6F5w/MXWobuW18uaOi2V5&#xA;c2Eol1m6BMtpKYnK8dLb4Sy/D3p2GKpl+kfzR/6l7Q/+43d/94nFXfpH80f+pe0P/uN3f/eJxV36&#xA;R/NH/qXtD/7jd3/3icVd+kfzR/6l7Q/+43d/94nFWN/4J88eh+kPQ0z9L/4m/T/1D67cfVvR+pfV&#xA;PS+tfU+fOvxf3FMVem4q7FXYq7FXYqx3yVp8Gnx61ax3P1mQ6ve3E/7t4/Te7cXQj+P7XFJl+Jdj&#xA;irIsVdirsVdirsVdirsVdirsVYTrX5byanrN3qr6ivq3DDjBNbmaERCExem6GVefFisi04qHUMVL&#xA;b4VQ1h+XVrOiyfpoXc1s15byXUKKZDIXjMAlcySky2kluD1FW6gdMbVl+g6Qmk6clmrBqMztw9QJ&#xA;yc1PBZZJmUV3pzO+BUwxV2KuxV2KuxV2KuxV2KobVL4afpl3fmCW5FpDJOba3UNNJ6SF+EakqC7U&#xA;ooJG+KvJv+cffzR0XzgfMVlpdlfRelqN3qclzcRxLEseoXLyQREpLI3qla1HGmx3xV7FirsVdirs&#xA;VdirEYPP1/eNctpvlLWNQtLe6urIXkMmkpHJJZXElrMUWe/hl4+rCwHJBXFVX/GPmL/qRtc/5HaJ&#xA;/wB5LFXf4x8xf9SNrn/I7RP+8lirv8Y+Yv8AqRtc/wCR2if95LFXf4x8xf8AUja5/wAjtE/7yWKs&#xA;L/LLQrvyFbazBp/kXWiNW1Ke+FJNEHpwuaQW4P6S3WJenzOKs0/xj5i/6kbXP+R2if8AeSxV3+Mf&#xA;MX/Uja5/yO0T/vJYq7/GPmL/AKkbXP8Akdon/eSxV3+MfMX/AFI2uf8AI7RP+8liqD/5Wha/UPW/&#xA;QWp/X/0r+g/0R/oP1n636H1n7f1r6tw9Pfl62Koz8tv+Udu/+25r/wD3W7zFWU4q7FWN6j580a3f&#xA;V7azb65qOhw/WtRsqPEywAMS6u6cH2Q7KfuxVdqX5heUdNv7vT7q9f63YrG11HFb3E/AzMiRpyij&#xA;dTI7SoFjB5Hku24xVqH8wvK1xI0VrPPczLaDUOEVpdt/ozAlXqIqblGWla8gV+0CMVUr3z/plraX&#xA;k31e5d7HTI9XmHoyCL6u6SSUE/Ex8wsLbGlTsN60VVLX8xfKF1qdnpkN6/12+T1LaN7a5jBAd4yG&#xA;d41RGEkTIVchgw40rQYqyTFXYq8e/wCl9/50H/uz4qy38vdX0m30O9hnvYIZV1zX+UckqKwrrV4R&#xA;UE16YqyX9P6F/wBXK1/5HR/81Yq79P6F/wBXK1/5HR/81YqkV1o/5eXM15NJPAj36ul56N68IkWQ&#xA;gyBlilRfjK/FtvvXqcVSlfJ3k1tc1HULnXvrVnqaot1p0t2CjtCsSwO78+TPD6CmN9nB6scVTm10&#xA;zyBZxyRWl1DbRS20di0UN9JGgt4vsIirKFTjU7rQ7sa/Eaqum0v8vprWO2lntnjjt2s0ZrxjJ6DA&#xA;gxmT1PUIozKKtsCwGxOKqUGh/l1BexXyXMRuoGLxyyahLJRml9dtnmYGsp5mvU74qn/6f0L/AKuV&#xA;r/yOj/5qxV36f0L/AKuVr/yOj/5qxV5P9ctP0r9a9eP6t/ysDl6/JfTp+h+vKtMVelXPkLyNdXEt&#xA;zdeXdMnuZ3aSaeWyt3d3Y1ZmZkJYkmpJxVT/AOVc/l7/ANSvpP8A0g23/NGKu/5Vz+Xv/Ur6T/0g&#xA;23/NGKu/5Vz+Xv8A1K+k/wDSDbf80Yq7/lXP5e/9SvpP/SDbf80YqxH8vPIvki5/xN9Z8vaZP6Gv&#xA;X0MPqWdu/CJOHFF5IeKiuwG2Ksu/5Vz+Xv8A1K+k/wDSDbf80Yq7/lXP5e/9SvpP/SDbf80Yq7/l&#xA;XP5e/wDUr6T/ANINt/zRirv+Vc/l7/1K+k/9INt/zRiqK/wf5S/Rv6L/AEJYfoz1PX+o/VYfQ9Wl&#xA;PU9Ljw5U25Uriqb4q7FXYq8xk/N+W29ULaWt2q+rIJDfqpoDeSKgVLc7CKyShO59RR16mlVdQ/NC&#xA;5luXsYYBalbmNVvLaZLlisV/FDLCUeERiSaH1jGFZj8DUpscaVe/5rNbzwxjSba2FyomZ5r+JB+8&#xA;dlVx6UcwccULO1aijDeg5NKuufzamjs47pNIRIpRBSS5vI4UDSxGWQNxSVwFUVQlP3gBI7cmlZF5&#xA;S8wahrE+qNdRJFDDJAbJF58hDNaxy/GWUKzc2bcHpTYbFgrIsVdirsVdirsVdirsVQ9jp9lYW/1e&#xA;yhWCDm8npoKDnK5kdvmzsWPviqT+UPMF7rP6b+tJGn6N1W60+D0gwrFBx4s/Jmqx5b0oPbFWQYq7&#xA;FXYq7FXYq7FXYq7FXYqhdV0+PUtLvNOkkkijvIJLd5YWKSKsqFCyMN1YV2OKvDP+cWvJfmjSJfNe&#xA;oeYru4muIr+TSoopZZHQyWzVuZwGJVvUfgFfr8JxV77irsVdirsVdirzzyn5TsNdsL/UtSv9Ye7f&#xA;WNaiJi1rVreNY7fVrqCFEhguo4kVIo1UBVHTFU6/5Vt5d/5a9c/7j+t/9lmKu/5Vt5d/5a9c/wC4&#xA;/rf/AGWYq7/lW3l3/lr1z/uP63/2WYq7/lW3l3/lr1z/ALj+t/8AZZirQ/LXy4Ol3rY7/wDHf1vv&#xA;/wBHmKt/8q28u/8ALXrn/cf1v/ssxV3/ACrby7/y165/3H9b/wCyzFXf8q28u/8ALXrn/cf1v/ss&#xA;xV3/ACrby7/y165/3H9b/wCyzFWBeldV/Qf6T1P6h/jb9H8v0lffWfqn6L9b0PrfrfWeHqfFT1Ou&#xA;Ksz8lwvP5K1eFI/WeXVfMiLFUDmW1i9AWpoBXpviqD0ay89WVpof6TS4vJNMll+tyGS2YyW7WpQM&#xA;yRBObrM/whafCO5OFWMeU5fzN1YWWru962qWkjJqAuIba2t5I5ntZTBGrqrtEEWXf4XV/h2FSVWe&#xA;61pGt/6DIhfV7iC9inWQ+hbmGJGBkUEcOXNdsVSUaV+bc8mqvcanFD6l2o02G3Eaxx20glhdgzJI&#xA;59NHimo1KurDviqwaR+ZUlzqD6sY9St01GyuNGt4TFF6MVrdM7uJCVYmS2VVcN+2TT4a4qn35gXO&#xA;vRaHanRXnh1Ka8tokSAxhmWRqSIzyRXEajjX4itB4jAqRvpn5qyWupSvfyJdv9TFtawPaJDT90b8&#xA;wSyQzSKxKyCL1AQFO+5qpVJE1T80p9Vv9GuJ7xdUi01IrCSzt4VsTerbQtJPNPPGKj15Hpx+FwON&#xA;FIoVU41bSPzWF5Cun6pO+nm0jikLfUhciYsrySsTGsfqLxKgKvGh79lWAfVvOP6D+r/WW/xR/jjh&#xA;9apBz9X9EU504+hy47/Z417YFekabon5o6Mt5Z6XJocuny6hqF7bNc/W/WCX97NecX4fDVfX47eG&#xA;Kov/AJDJ/wB+7/0/Yq7/AJDJ/wB+7/0/Yq7/AJDJ/wB+7/0/Yq7/AJDJ/wB+7/0/Yqlega/+betQ&#xA;3ksEegRiyvbnT5BJ9dqZLSUxOwoT8JK1GKpp/wAhk/793/p+xV3/ACGT/v3f+n7FXf8AIZP+/d/6&#xA;fsVd/wAhk/793/p+xVJv8Aed/qP1v6zpn6e/xF+n+NLj6nx+p/VPS6epX9rFXpmKuxV2KoKTWNPj&#xA;1KHTXdhdz8vST05OLcF5t+848NlP82Ko3FUh8u6N/h2y1L15vWW71K81AFEYlReXBkVOI5EledKj&#xA;FU5mvLWGeCCWZEnumZbeJiA0jIpdgo70VSTiqrirsVUrS8tbuH17WVZoeTp6iGo5RuY3FfZlIxVV&#xA;xVTuIjNbywh2iMiMgkQ0deQpyU9iO2KvPrn8oEns5rcahDH61uLcutmCVpbyWxK1lNA6TFnHVnAJ&#xA;NPhw2qjeflTdpJHHaSWL29xcCS6V7McI0jkmmjIjeVw/BpVQL8Pwitak1bQirH8pRZ24tYtVJtFU&#xA;J6bQsGkAis4P37rMpflFp4VuPGvNug2xSnOseRkv4dMgivDHFptv9VRZkNwaBoWEqszqVmAg4+oa&#xA;mjGm++BUNpnk7Sx5StND0m5sSNPvYJbq5hgDo91YXCSvzjSUcJfUhVX+P4elBtRVLtM/KSPT7CK2&#xA;h1JYZYK/V7i3tViaNjarbGROTyUl5Rh+fuQKfCVNqp335UwpV7SKzuJpXsIla4hdxbwWt697KR6s&#xA;srSK7Px9PkPh2rirem/k1p9n6db31GQxD1FiaFzFFHx4c4pVK8X+OPjRV2+FuK0bVmXl3QYdD042&#xA;ML+pH6skoPBI/wC8bluEAqfEn8BQAKmeKuxV2KuxV2KoXVtRj0zSrzUpY5Jo7KCW4eGEBpXWJC5W&#xA;NSVBY8aAV64q8q/5x/8AzO0Pzf8A4is9LtbxDFqN3qUk88caxCPULmSSCMlZHPqFQailNjvir1/F&#xA;XYq7FXYq7FWFQeffMl690+leT7y+sre8u7JLtbuxiWR7K5ktZGVJZkcD1IWpUYqq/wCLvPH/AFIt&#xA;5/0n6b/1XxV3+LvPH/Ui3n/Sfpv/AFXxV3+LvPH/AFIt5/0n6b/1XxV3+LvPH/Ui3n/Sfpv/AFXx&#xA;VhP5XeXPMP5f2Wr2uneRrt11TUZ70H67poMcLGkFvU3BLCJO/iTirNv8XeeP+pFvP+k/Tf8Aqvir&#xA;v8XeeP8AqRbz/pP03/qvirv8XeeP+pFvP+k/Tf8Aqvirv8XeeP8AqRbz/pP03/qviqE/5WjN+jfV&#xA;/wAP3f6W/S/6C/RPrWvP6z9X+s8vW9T0eHp9+XXFUy/Lb/lHbv8A7bmv/wDdbvMVVtY8+aNpGvpo&#xA;t7HcLK0CXLXSxg2yRyM6KXk5fDVoyOm21euKoO0/MzR7+2iksLW5muJhcEQSKsRjFu6RlpSWPwM0&#xA;qUaMPsa0phpVXQ/P0OsWWi3Nvp88Z1RzFPFKVRreT6kb1EIahcyR8ShoBQ1YqfhIVCD83PKItLWe&#xA;X6zBJdzrBFaSQn16PGkvq8FLVjEcyNyBOx2xpWSa3qlzp0VtNHbpPDLdW9tOWkMbILmdIFdAEcPR&#xA;pASCV274qx25/Nfy1BPfw+jdzNps/oXLQxpIKcZ39VeL/FGBZzVI3HA1AxVXf8ytCN3fQW0F1eJp&#xA;0iQXVzCsYhWWQHjHykkj+IladNtiaKQxaVD3X5ueULX68Z3mRLCCG5kk4KUdbh441RXDFQ4kmRWD&#xA;lachXbfFUfpP5g6FqeupoUKXEWpG3FzLDLFx9HkiyCKUgsFkMcivx8D1rtirA/8Apff+dB/7s+Ks&#xA;4/Lb/lHbv/tua/8A91u8xVOrry/oN3erfXem2txeoEVLqWCN5QI25oA7KW+FjUb7HFUKPJXk0JGg&#xA;0HTuELmWJfqkFEkYBWdRw2YhFBI8BiqAuNO/LTTtQs9MnsdJtb9q3NjatBbpJVFEZkiXjWoVAtR4&#xA;AeGKoCC4/Jl1tFgTQik90sVkEituJuolWNQlFp6iCRUHcVC9dsVRereafyxv/wDRtXvtLu0t7j0V&#xA;S79KVFuQOQRfUBX1KbgDfFUJqd7+Tcc082qDQ1mknaG4luYrbk0/A8ldnX4mKyHr1qRiqNsPy08r&#xA;Wl5qEzQG6ttSDrcabcrFJacXl9Yj0eADcW2Tny4r8K0G2Kq2sfl35R1O19A6bb2jj0gtxbQW6yBI&#xA;CpjjPKN1ZB6a/AyldhtsMVRui+U9B0hbdra1R722gW1XUplV7xokFArzkc2HtWmKvNf+l9/50H/u&#xA;z4qzj8tv+Udu/wDtua//AN1u8xVlOKuxVjWu+S4Nb8x2OpXszfUrKHitpG0ic5lnjnjeTi4R1R4V&#xA;YKyncYqtl/Lny1ImnKUmH6LLG2KzSJVXlS4McvAr6ietCknFu49zVVK/Jf5ZSaFbwQajqQv47C7F&#xA;5pqQw/V1jl9Nonkk+KRpGkR2G5+EGgxVEyflL5NeW4kEMyfWpPWmRJnCl+YkrSv8yjDasxReKhak&#xA;0AFTuTTxwK3irsVePf8AS+/86D/3Z8VZ7d/lp+XF5dTXd35U0e4u7h2luLiXT7V5JJHJZ3d2jLMz&#xA;Maknriql/wAqp/K7/qTtD/7htp/1TxV3/Kqfyu/6k7Q/+4baf9U8Vd/yqn8rv+pO0P8A7htp/wBU&#xA;8Vd/yqn8rv8AqTtD/wC4baf9U8VYp+Xn5a/l1d2WtNdeVdHuGi1zVIYjLYWrlYo7t1SNeUZoqqKK&#xA;OgGKsr/5VT+V3/UnaH/3DbT/AKp4q7/lVP5Xf9Sdof8A3DbT/qnirv8AlVP5Xf8AUnaH/wBw20/6&#xA;p4q7/lVP5Xf9Sdof/cNtP+qeKo3/AAH5H/RP6G/w7pn6I9X6x+jvqdv9W9anH1fR4cOdNuVK4qnm&#xA;KoLWtWttJ02bULkO0UPEcI1LMzSMERQB/M7AYqxD/lbFkLkxNZERCGKb1hMr/FOVjSPgis3MSyKH&#xA;H7KkMftKGNKtuPzc0+LSv0r9SIsi0ygyXECSK0EN1JxkjDMyl3sWROvKop3oqjLD8weeoGxvbZBc&#xA;S6hNZ20dszSFYopVg9SYsiKrc3VqA/ZO1duTSqeq+fdK0K9u7G000PIl0InjieKBpbqcwuzcTQUY&#xA;3a/vHI5Pt/lY0qfazea1b2cN9CIIIIIzPqMc8nEqEKMyK4R1+x6grtvx7VwKxe5/Nu2tIInvdONr&#xA;PNafXUtZLmH1PTNpcXfReVdrZUPGvxOuGlT/AEnWNW1xLW+sljs7OOe5t7+CUiVy0E3p/A0dU6xs&#xA;Ptd6703CshxV2KuxVp0R0KOoZGFGUioI9wcVUvqVnUn0I6mtTwWpr17e2Ktta2rhg8KMHPJgVBq1&#xA;KVO3XFV4hiDBgi8lJINBUEih/DFUg8raqmvwalPdWkKvaale6eKLy5JZztEjNyruQtcVZA6I6FHU&#xA;MjCjKRUEe4OKqT2Vm/HnBG3FQq1RTRR0AqOm+KqkUUUS8YkWNa14qABU/LFV2KuxV2KuxV2KuxVD&#xA;apa3N3pl3a2ty1nc3EMkUF2gBaF3Qqsig7VQmoxV4b/zi2n5gzt5rufNN/NJDa6jNZCzkCBfr/qG&#xA;W+lPFVPLkyjw3OKve8VdirsVdirsVeceWfKX+ILO/wBUvtc1tLh9X1mER2+p3UMSR22q3NvCiRo4&#xA;VQsUSigxVN/+VZWH/V+8wf8AcXvP+a8Vd/yrKw/6v3mD/uL3n/NeKu/5VlYf9X7zB/3F7z/mvFXf&#xA;8qz0+tP095gr/wBte8/5rxVRt/yo0S15rb6xrkHryNLII9Vu05yv8Tu1HHJm6k9cVVE/LbTH5cPM&#xA;GvtwPFqaxeGjDqDSTriq7/lWVh/1fvMH/cXvP+a8Vd/yrKw/6v3mD/uL3n/NeKu/5VlYf9X7zB/3&#xA;F7z/AJrxVhVNT9P9A/pnU/qv+NP0Z9Z+uz/W/qn6M9f0vrHL1OPqfF1xVnn5bf8AKO3f/bc1/wD7&#xA;rd5iqea5ZXd9o19ZWd01jd3MEkVveJXlE7oVWQUKn4Sa7EHwIxVgOsflz501A27Qa8NPEVnLbGC2&#xA;nvgqO4uByRmmflyM8RLOpZfTASnYqgdP8gee7fX7K1bV5xp9vbsZrxrm7nUo0wLQgPKvKVlMg5SK&#xA;3FWqpBAxVPtN8ieYIr6zvr/UYbi6srkyK5N06mBoYUYBDMOLs8HPditXO21CqhtK/LfzBbvZS6hr&#xA;H1+40/UjfW8073Mn7uW3EEsdPUQr8S+qnxNuSDXclVdrPkLzbfWMttZasmmcr+a8iaGW6Yqs0ZRW&#xA;5K0TF4ZP3iq1UJ6jFU48neWte0bUdUlvr43NjfN6tvbtPPcejIbieQ8fXrwX0ZYouK7fu69WOBUg&#xA;1P8ALfzdc6rqN1H5glNtd3aXEUH1m8gIjDyPwJik4oER1iAjVQyirVOFXoOnR3cWn20V44lu0iRb&#xA;iVa8WkCgOwqB1O+BXk3/AEvv/Og/92fFU60/WL7Rvy11jUbB447uDW9b9EzJ6iEv5guk4lOcPKvK&#xA;lOY+eKqv+IPzOljuZoNORHh0w3ENlPauGmvKuoRZROI1qoSUxk134cti2FVew8w/mIUsPrmks0j2&#xA;87sqW6oJpY5pViWVjcN9UMkKRPvz3Zh+zTFUBpPmb81pZNJ/SekrEs0sn18W9q7BYiR6fxSTJxZa&#xA;sG23pVSagYqss/M/5tyQ6WZNHHKa6ZL5mteFIuVuB8BuaxKI5Zm9Q8viTiFYUZ1WW+SrzzNeabNc&#xA;eYBHHcGeRLeFLeS2ZYUaiNJ6jvyZ1o3wgAVpvTAqL0IeZBJf/ppoGj9f/QPQUr+54j7W7d/Hfr7Y&#xA;qwK581fm/FZ6otvpEN1diZE02VrWeGOOEliXlX1JGmP2VpHxp9qlMKun80fm+v18JpcbDn/ozJZS&#xA;s0KLMiE0e4jW4LI5I4lacSd+mKot/M/5iW1nquoanFbWMenw2s0Vk1u5M8zJG1zbxXDTKjnnziio&#xA;tWYj2xVh9fMf1StYf8R/40rXgfQ+ufoKv2OVeHqduXTAr0z8uoo5fLV5HKiuh1zX6qwBBprd4ehx&#xA;VL7383dFs7R7iW0lrFOtvPH6tqpjYrKXLlpQAE9BuXh1NFqQaVGal+YUWm/XzcWE05tNRNgsNs8B&#xA;k4LZC8Mzc5UXjwDnrXalK4FR2gec7TXdY1GwsbS4+r6bxWXUXCLA8jb+mg5epyA3NVApTxGKscu/&#xA;zWfTdc1my1CyElrp8ohtJIWVGkkaS2iRWMjiNfivV5O7Iq071+EqiLX82tJ1O4js9OheK4ubEXtt&#xA;PcmIxBmtxciN0jlMlPTP94BwrsGJxVUufza0Czu7GxuIp5bu5046lcNboGhhQW8k4VndlFXFvIq9&#xA;qihIwKu0L81dJ1e+sLNLC7t2vlIMkwhUQyrNPB6Uq+p6gYvaPSifOmKp7rGuPpuq6fC5j+qXaz+o&#xA;KEzBoYzICgB+KvGlKVxVi2l/nLoerHTYbLS76e71O4eGC2T6s9FjignMrSLM0VBHdxMQGLLvUDic&#xA;VYd+lpfrX1z0P3v/ACsTh9X5pWn6N9L7XLh9NaYqzHyp5rsNBsL/AEzU7DWEu01jWZiIdG1W5jaO&#xA;51W6nhdJoLWWJ1eKVWBVj1xVGSeb/IssjSyaLqbyOwd3by1rBYsK0Yk2PXc74q1J5s8hSNI0mh6k&#xA;7StzlLeWtXJZ9/iatjufiO/viqXaNqH5c6NrNzq+n6XrsN7dq8cjfoTXmQJJL6zKqG0KqOe4H7PR&#xA;aDbFU1PnXyWfXrpGqn61/vT/AM65rH72n+/P9C+L6cVdJ518lyEmTSNVcmMQnl5c1g1iG4j3svs+&#xA;3TFXR+dPJURjMekaqhiVki4+W9YHFGqWVaWWwNTUYqpx+bPIUciSx6HqSSRkGN18tauGUr0KkWO1&#xA;O2Kq0/nnyfPPHcT6Xq8s8JrDK/lzWWdCDX4WNlUb+GKpLrN1+WesXFnPeaPrfKwYvbpDoWvQoGMi&#xA;SklI7RVrziU164qx76pH6f6X/Ql9+i/8afXfR/RV56/1L9Gel6v1P0PrHp+rt/d9cVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:CC9C53CE2A2068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:CC9C53CE2A2068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CC9C53CE2A2068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T15:23:58+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
113.4 345.6 li
113.4 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
2.08203 142.3 mo
110.982 142.3 li
110.982 167.5 li
2.08203 167.5 li
2.08203 142.3 li
cp
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.08203 142.3 mo
110.982 142.3 li
110.982 167.5 li
2.08203 167.5 li
2.08203 142.3 li
cp
.746 .676 .668 .898 cmyk
@
grestore
14.9756 158.176 mo
14.9756 157.841 14.7056 157.841 14.5327 157.841 cv
14.0576 157.841 li
14.0576 155.336 li
14.0576 154.245 13.5068 153.781 12.6533 153.781 cv
11.9297 153.781 11.4438 154.148 11.2388 154.353 cv
11.2388 152.344 li
11.2388 152.009 11.1738 151.901 10.8066 151.901 cv
10.0181 151.901 li
9.8457 151.901 9.57568 151.901 9.57568 152.236 cv
9.57568 152.56 9.85645 152.56 10.0073 152.56 cv
10.4937 152.56 li
10.4937 157.841 li
10.0181 157.841 li
9.8457 157.841 9.57568 157.841 9.57568 158.176 cv
9.57568 158.5 9.85645 158.5 10.0073 158.5 cv
11.7246 158.5 li
11.876 158.5 12.1567 158.5 12.1567 158.176 cv
12.1567 157.841 11.8867 157.841 11.7139 157.841 cv
11.2388 157.841 li
11.2388 155.93 li
11.2388 154.85 12.0381 154.439 12.5889 154.439 cv
13.1611 154.439 13.3125 154.742 13.3125 155.39 cv
13.3125 157.841 li
12.8911 157.841 li
12.7183 157.841 12.4482 157.841 12.4482 158.176 cv
12.4482 158.5 12.7397 158.5 12.8911 158.5 cv
14.5435 158.5 li
14.6948 158.5 14.9756 158.5 14.9756 158.176 cv
cp
0 0 0 1 cmyk
f
20.0405 158.176 mo
20.0405 157.841 19.7598 157.841 19.5977 157.841 cv
18.4531 157.841 li
18.4531 154.288 li
18.4531 153.954 18.3882 153.845 18.021 153.845 cv
16.4985 153.845 li
16.3364 153.845 16.0557 153.845 16.0557 154.169 cv
16.0557 154.504 16.3364 154.504 16.4985 154.504 cv
17.708 154.504 li
17.708 157.841 li
16.4116 157.841 li
16.2393 157.841 15.9692 157.841 15.9692 158.176 cv
15.9692 158.5 16.25 158.5 16.4116 158.5 cv
19.5977 158.5 li
19.7598 158.5 20.0405 158.5 20.0405 158.176 cv
cp
18.5073 152.506 mo
18.5073 152.204 18.2646 151.966 17.9561 151.966 cv
17.6602 151.966 17.4272 152.204 17.4272 152.506 cv
17.4272 152.809 17.6602 153.046 17.9561 153.046 cv
18.2646 153.046 18.5073 152.809 18.5073 152.506 cv
cp
f
26.2832 154.31 mo
26.2832 154.062 26.0776 153.727 25.4946 153.727 cv
25.376 153.727 24.8467 153.737 24.3501 154.104 cv
24.1772 153.986 23.7993 153.781 23.3022 153.781 cv
22.2871 153.781 21.52 154.591 21.52 155.509 cv
21.52 155.973 21.7041 156.33 21.8657 156.535 cv
21.7471 156.708 21.6499 156.945 21.6499 157.269 cv
21.6499 157.647 21.8013 157.917 21.8984 158.047 cv
21.1099 158.533 21.1099 159.267 21.1099 159.386 cv
21.1099 160.314 22.2388 160.974 23.6157 160.974 cv
24.998 160.974 26.1318 160.304 26.1318 159.386 cv
26.1318 158.986 25.9375 158.446 25.3867 158.155 cv
25.2461 158.079 24.7925 157.841 23.8208 157.841 cv
23.0645 157.841 li
22.978 157.841 22.8379 157.841 22.7515 157.82 cv
22.5894 157.82 22.5249 157.82 22.395 157.668 cv
22.2764 157.518 22.2656 157.28 22.2656 157.28 cv
22.2656 157.237 22.2871 157.085 22.3301 156.978 cv
22.3628 156.999 22.7729 157.248 23.3022 157.248 cv
24.2959 157.248 25.0845 156.47 25.0845 155.509 cv
25.0845 155.185 24.9907 154.872 24.8145 154.569 cv
25.0371 154.439 25.292 154.396 25.4297 154.385 cv
25.4946 154.677 25.7432 154.752 25.8511 154.752 cv
26.0347 154.752 26.2832 154.623 26.2832 154.31 cv
cp
24.3389 155.509 mo
24.3389 156.124 23.8638 156.6 23.3022 156.6 cv
22.7192 156.6 22.2656 156.092 22.2656 155.52 cv
22.2656 154.904 22.7407 154.429 23.3022 154.429 cv
23.8853 154.429 24.3389 154.936 24.3389 155.509 cv
cp
25.5054 159.386 mo
25.5054 159.861 24.6953 160.325 23.6157 160.325 cv
22.5415 160.325 21.7363 159.861 21.7363 159.386 cv
21.7363 159.191 21.832 158.846 22.1733 158.63 cv
22.4395 158.457 22.5356 158.457 23.3237 158.457 cv
24.2852 158.457 25.5054 158.457 25.5054 159.386 cv
cp
f
31.9854 158.176 mo
31.9854 157.841 31.7153 157.841 31.5425 157.841 cv
31.0674 157.841 li
31.0674 155.336 li
31.0674 154.245 30.5166 153.781 29.6636 153.781 cv
28.9399 153.781 28.4541 154.148 28.2485 154.353 cv
28.2485 152.344 li
28.2485 152.009 28.1841 151.901 27.8169 151.901 cv
27.0283 151.901 li
26.8555 151.901 26.5854 151.901 26.5854 152.236 cv
26.5854 152.56 26.8662 152.56 27.0176 152.56 cv
27.5034 152.56 li
27.5034 157.841 li
27.0283 157.841 li
26.8555 157.841 26.5854 157.841 26.5854 158.176 cv
26.5854 158.5 26.8662 158.5 27.0176 158.5 cv
28.7349 158.5 li
28.8857 158.5 29.1665 158.5 29.1665 158.176 cv
29.1665 157.841 28.8965 157.841 28.7241 157.841 cv
28.2485 157.841 li
28.2485 155.93 li
28.2485 154.85 29.0479 154.439 29.5986 154.439 cv
30.1709 154.439 30.3223 154.742 30.3223 155.39 cv
30.3223 157.841 li
29.9009 157.841 li
29.728 157.841 29.4585 157.841 29.4585 158.176 cv
29.4585 158.5 29.75 158.5 29.9009 158.5 cv
31.5532 158.5 li
31.7046 158.5 31.9854 158.5 31.9854 158.176 cv
cp
f
37.1802 155.195 mo
37.1802 154.817 36.8022 154.817 36.6729 154.817 cv
33.2383 154.817 li
33.1089 154.817 32.7305 154.817 32.7305 155.195 cv
32.7305 155.573 33.1089 155.573 33.2383 155.573 cv
36.6729 155.573 li
36.8022 155.573 37.1802 155.573 37.1802 155.195 cv
cp
f
42.8394 158.176 mo
42.8394 157.841 42.5801 157.841 42.4077 157.841 cv
41.0034 157.841 li
41.0034 152.344 li
41.0034 152.009 40.9385 151.901 40.5713 151.901 cv
38.8652 151.901 li
38.6924 151.901 38.4224 151.901 38.4224 152.236 cv
38.4224 152.56 38.7031 152.56 38.8545 152.56 cv
40.2583 152.56 li
40.2583 157.841 li
38.8652 157.841 li
38.6924 157.841 38.4224 157.841 38.4224 158.176 cv
38.4224 158.5 38.7031 158.5 38.8545 158.5 cv
42.4077 158.5 li
42.5693 158.5 42.8394 158.5 42.8394 158.176 cv
cp
f
48.4771 157.323 mo
48.4771 157.021 48.1641 157.021 48.0991 157.021 cv
47.9048 157.021 47.8184 157.053 47.7427 157.258 cv
47.5049 157.809 46.9219 157.906 46.6196 157.906 cv
45.8096 157.906 44.9995 157.366 44.8267 156.438 cv
48.0449 156.438 li
48.272 156.438 48.4771 156.438 48.4771 156.038 cv
48.4771 154.807 47.7856 153.748 46.3818 153.748 cv
45.0967 153.748 44.0601 154.828 44.0601 156.157 cv
44.0601 157.474 45.1509 158.565 46.5439 158.565 cv
47.9692 158.565 48.4771 157.593 48.4771 157.323 cv
cp
47.7104 155.79 mo
44.8374 155.79 li
44.9888 155.001 45.626 154.407 46.3818 154.407 cv
46.9434 154.407 47.6133 154.677 47.7104 155.79 cv
cp
f
54.5356 154.18 mo
54.5356 153.845 54.2769 153.845 54.104 153.845 cv
52.8403 153.845 li
52.6782 153.845 52.4082 153.845 52.4082 154.169 cv
52.4082 154.504 52.6675 154.504 52.8403 154.504 cv
53.1426 154.504 li
51.9653 157.982 li
50.7881 154.504 li
51.0908 154.504 li
51.2524 154.504 51.5225 154.504 51.5225 154.18 cv
51.5225 153.845 51.2637 153.845 51.0908 153.845 cv
49.8271 153.845 li
49.6543 153.845 49.395 153.845 49.395 154.18 cv
49.395 154.504 49.665 154.504 49.8271 154.504 cv
50.1509 154.504 li
51.3931 158.176 li
51.5225 158.543 51.7388 158.543 51.9653 158.543 cv
52.1709 158.543 52.4189 158.543 52.5381 158.187 cv
53.7798 154.504 li
54.104 154.504 li
54.2661 154.504 54.5356 154.504 54.5356 154.18 cv
cp
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
59.5249 157.323 mo
59.5249 157.021 59.2114 157.021 59.147 157.021 cv
58.9521 157.021 58.8657 157.053 58.7905 157.258 cv
58.5527 157.809 57.9697 157.906 57.667 157.906 cv
56.8569 157.906 56.0474 157.366 55.8745 156.438 cv
59.0928 156.438 li
59.3193 156.438 59.5249 156.438 59.5249 156.038 cv
59.5249 154.807 58.8335 153.748 57.4297 153.748 cv
56.1445 153.748 55.1074 154.828 55.1074 156.157 cv
55.1074 157.474 56.1982 158.565 57.5913 158.565 cv
59.0171 158.565 59.5249 157.593 59.5249 157.323 cv
cp
58.7578 155.79 mo
55.8853 155.79 li
56.0361 155.001 56.6733 154.407 57.4297 154.407 cv
57.9912 154.407 58.6606 154.677 58.7578 155.79 cv
cp
f
65.2271 158.176 mo
65.2271 157.841 64.9683 157.841 64.7954 157.841 cv
63.3911 157.841 li
63.3911 152.344 li
63.3911 152.009 63.3267 151.901 62.9595 151.901 cv
61.2529 151.901 li
61.0801 151.901 60.8101 151.901 60.8101 152.236 cv
60.8101 152.56 61.0908 152.56 61.2417 152.56 cv
62.646 152.56 li
62.646 157.841 li
61.2529 157.841 li
61.0801 157.841 60.8101 157.841 60.8101 158.176 cv
60.8101 158.5 61.0908 158.5 61.2417 158.5 cv
64.7954 158.5 li
64.9575 158.5 65.2271 158.5 65.2271 158.176 cv
cp
f
76.7944 156.167 mo
76.7944 154.839 75.8325 153.781 74.688 153.781 cv
74.1694 153.781 73.6831 153.975 73.3159 154.31 cv
73.3159 153.997 73.2944 153.845 72.8843 153.845 cv
72.0962 153.845 li
71.9233 153.845 71.6528 153.845 71.6528 154.18 cv
71.6528 154.504 71.9341 154.504 72.0854 154.504 cv
72.5708 154.504 li
72.5708 160.239 li
72.0962 160.239 li
71.9233 160.239 71.6528 160.239 71.6528 160.574 cv
71.6528 160.898 71.9341 160.898 72.0854 160.898 cv
73.8022 160.898 li
73.9536 160.898 74.2339 160.898 74.2339 160.574 cv
74.2339 160.239 73.9644 160.239 73.7915 160.239 cv
73.3159 160.239 li
73.3159 158.014 li
73.7593 158.468 74.2231 158.565 74.5688 158.565 cv
75.7466 158.565 76.7944 157.539 76.7944 156.167 cv
cp
76.0483 156.167 mo
76.0483 157.204 75.2925 157.906 74.5366 157.906 cv
73.6948 157.906 73.3159 156.956 73.3159 156.438 cv
73.3159 155.649 li
73.3159 155.012 73.9429 154.439 74.6235 154.439 cv
75.4224 154.439 76.0483 155.228 76.0483 156.167 cv
cp
f
82.4536 154.45 mo
82.4536 154.234 82.3237 153.781 81.4272 153.781 cv
80.8765 153.781 80.1851 153.975 79.5913 154.655 cv
79.5913 154.288 li
79.5913 153.954 79.5269 153.845 79.1587 153.845 cv
77.9712 153.845 li
77.8091 153.845 77.5396 153.845 77.5396 154.169 cv
77.5396 154.504 77.7983 154.504 77.9712 154.504 cv
78.8462 154.504 li
78.8462 157.841 li
77.9712 157.841 li
77.8091 157.841 77.5396 157.841 77.5396 158.166 cv
77.5396 158.5 77.7983 158.5 77.9712 158.5 cv
80.7896 158.5 li
80.9517 158.5 81.2329 158.5 81.2329 158.176 cv
81.2329 157.841 80.9517 157.841 80.7896 157.841 cv
79.5913 157.841 li
79.5913 156.491 li
79.5913 155.476 80.228 154.439 81.5347 154.439 cv
81.5464 154.699 81.73 154.915 81.9995 154.915 cv
82.2368 154.915 82.4536 154.742 82.4536 154.45 cv
cp
f
87.9067 156.167 mo
87.9067 154.817 86.9028 153.748 85.6929 153.748 cv
84.4839 153.748 83.479 154.817 83.479 156.167 cv
83.479 157.539 84.5054 158.565 85.6929 158.565 cv
86.8813 158.565 87.9067 157.528 87.9067 156.167 cv
cp
87.1616 156.092 mo
87.1616 157.096 86.4927 157.906 85.6929 157.906 cv
84.894 157.906 84.2241 157.096 84.2241 156.092 cv
84.2241 155.109 84.9263 154.407 85.6929 154.407 cv
86.4712 154.407 87.1616 155.109 87.1616 156.092 cv
cp
f
94.0308 154.31 mo
94.0308 154.062 93.8257 153.727 93.2427 153.727 cv
93.1235 153.727 92.5942 153.737 92.0981 154.104 cv
91.9253 153.986 91.5464 153.781 91.0503 153.781 cv
90.0347 153.781 89.2681 154.591 89.2681 155.509 cv
89.2681 155.973 89.4517 156.33 89.6138 156.535 cv
89.4946 156.708 89.3979 156.945 89.3979 157.269 cv
89.3979 157.647 89.5483 157.917 89.646 158.047 cv
88.8579 158.533 88.8579 159.267 88.8579 159.386 cv
88.8579 160.314 89.9868 160.974 91.3628 160.974 cv
92.7456 160.974 93.8794 160.304 93.8794 159.386 cv
93.8794 158.986 93.6851 158.446 93.1343 158.155 cv
92.9937 158.079 92.5405 157.841 91.5679 157.841 cv
90.812 157.841 li
90.7261 157.841 90.5854 157.841 90.4995 157.82 cv
90.3374 157.82 90.272 157.82 90.1431 157.668 cv
90.0239 157.518 90.0132 157.28 90.0132 157.28 cv
90.0132 157.237 90.0347 157.085 90.0776 156.978 cv
90.1108 156.999 90.521 157.248 91.0503 157.248 cv
92.0435 157.248 92.8315 156.47 92.8315 155.509 cv
92.8315 155.185 92.7388 154.872 92.562 154.569 cv
92.7847 154.439 93.0396 154.396 93.1772 154.385 cv
93.2427 154.677 93.4907 154.752 93.5991 154.752 cv
93.7827 154.752 94.0308 154.623 94.0308 154.31 cv
cp
92.0864 155.509 mo
92.0864 156.124 91.6118 156.6 91.0503 156.6 cv
90.4663 156.6 90.0132 156.092 90.0132 155.52 cv
90.0132 154.904 90.4888 154.429 91.0503 154.429 cv
91.6333 154.429 92.0864 154.936 92.0864 155.509 cv
cp
93.2534 159.386 mo
93.2534 159.861 92.4429 160.325 91.3628 160.325 cv
90.2896 160.325 89.4839 159.861 89.4839 159.386 cv
89.4839 159.191 89.5796 158.846 89.9204 158.63 cv
90.187 158.457 90.2827 158.457 91.0718 158.457 cv
92.0327 158.457 93.2534 158.457 93.2534 159.386 cv
cp
f
99.4634 154.45 mo
99.4634 154.234 99.3335 153.781 98.437 153.781 cv
97.8862 153.781 97.1948 153.975 96.6011 154.655 cv
96.6011 154.288 li
96.6011 153.954 96.5366 153.845 96.1694 153.845 cv
94.981 153.845 li
94.8188 153.845 94.5493 153.845 94.5493 154.169 cv
94.5493 154.504 94.8081 154.504 94.981 154.504 cv
95.856 154.504 li
95.856 157.841 li
94.981 157.841 li
94.8188 157.841 94.5493 157.841 94.5493 158.166 cv
94.5493 158.5 94.8081 158.5 94.981 158.5 cv
97.8003 158.5 li
97.9624 158.5 98.2427 158.5 98.2427 158.176 cv
98.2427 157.841 97.9624 157.841 97.8003 157.841 cv
96.6011 157.841 li
96.6011 156.491 li
96.6011 155.476 97.2388 154.439 98.5454 154.439 cv
98.5562 154.699 98.7397 154.915 99.0093 154.915 cv
99.2476 154.915 99.4634 154.742 99.4634 154.45 cv
cp
f
105.479 158.166 mo
105.479 157.841 105.208 157.841 105.046 157.841 cv
104.593 157.841 104.485 157.788 104.399 157.755 cv
104.399 155.422 li
104.399 154.655 103.816 153.748 102.26 153.748 cv
101.796 153.748 100.695 153.748 100.695 154.537 cv
100.695 154.86 100.921 155.033 101.18 155.033 cv
101.342 155.033 101.645 154.936 101.656 154.537 cv
101.656 154.45 101.667 154.439 101.882 154.418 cv
102.034 154.407 102.174 154.407 102.271 154.407 cv
103.092 154.407 103.654 154.742 103.654 155.509 cv
101.742 155.541 100.414 156.081 100.414 157.118 cv
100.414 157.863 101.094 158.565 102.196 158.565 cv
102.595 158.565 103.265 158.489 103.772 158.155 cv
104.01 158.489 104.529 158.5 104.939 158.5 cv
105.241 158.5 105.479 158.5 105.479 158.166 cv
cp
103.654 157.053 mo
103.654 157.301 103.654 157.528 103.232 157.723 cv
102.843 157.906 102.358 157.906 102.271 157.906 cv
101.601 157.906 101.159 157.539 101.159 157.118 cv
101.159 156.589 102.087 156.189 103.654 156.146 cv
103.654 157.053 li
cp
f
111.117 158.176 mo
111.117 157.841 110.889 157.841 110.5 157.841 cv
110.5 155.228 li
110.5 155.012 110.5 153.781 109.54 153.781 cv
109.215 153.781 108.773 153.921 108.47 154.342 cv
108.308 153.975 108.006 153.781 107.65 153.781 cv
107.304 153.781 106.98 153.932 106.721 154.169 cv
106.699 153.845 106.483 153.845 106.289 153.845 cv
105.943 153.845 li
105.781 153.845 105.5 153.845 105.5 154.169 cv
105.5 154.504 105.727 154.504 106.116 154.504 cv
106.116 157.841 li
105.727 157.841 105.5 157.841 105.5 158.176 cv
105.5 158.5 105.792 158.5 105.943 158.5 cv
106.894 158.5 li
107.055 158.5 107.336 158.5 107.336 158.176 cv
107.336 157.841 107.11 157.841 106.721 157.841 cv
106.721 155.908 li
106.721 154.947 107.164 154.439 107.606 154.439 cv
107.855 154.439 108.006 154.623 108.006 155.325 cv
108.006 157.841 li
107.8 157.841 107.531 157.841 107.531 158.176 cv
107.531 158.5 107.823 158.5 107.973 158.5 cv
108.784 158.5 li
108.946 158.5 109.226 158.5 109.226 158.176 cv
109.226 157.841 109 157.841 108.611 157.841 cv
108.611 155.908 li
108.611 154.947 109.053 154.439 109.497 154.439 cv
109.745 154.439 109.896 154.623 109.896 155.325 cv
109.896 157.841 li
109.691 157.841 109.42 157.841 109.42 158.176 cv
109.42 158.5 109.712 158.5 109.864 158.5 cv
110.673 158.5 li
110.835 158.5 111.117 158.5 111.117 158.176 cv
cp
f
grestore
2.08203 72.3286 mo
110.982 72.3286 li
110.982 97.5283 li
2.08203 97.5283 li
2.08203 72.3286 li
cp
0 0 0 0 cmyk
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.08105 72.3286 mo
110.981 72.3286 li
110.981 97.5283 li
2.08105 97.5283 li
2.08105 72.3286 li
cp
.746 .676 .668 .898 cmyk
@
grestore
39.3433 88.1938 mo
39.3433 87.8701 39.0728 87.8701 38.9111 87.8701 cv
38.4575 87.8701 38.3496 87.8159 38.2632 87.7837 cv
38.2632 85.4507 li
38.2632 84.6841 37.6797 83.7769 36.1245 83.7769 cv
35.6602 83.7769 34.5586 83.7769 34.5586 84.5649 cv
34.5586 84.8892 34.7856 85.062 35.0444 85.062 cv
35.2065 85.062 35.5088 84.9648 35.52 84.5649 cv
35.52 84.4785 35.5308 84.4678 35.7466 84.4463 cv
35.8979 84.4355 36.0381 84.4355 36.1353 84.4355 cv
36.9561 84.4355 37.5176 84.7705 37.5176 85.5371 cv
35.606 85.5693 34.2778 86.1094 34.2778 87.1465 cv
34.2778 87.8916 34.958 88.5938 36.0601 88.5938 cv
36.4595 88.5938 37.1289 88.5181 37.6367 88.1831 cv
37.874 88.5181 38.3926 88.5288 38.8032 88.5288 cv
39.1055 88.5288 39.3433 88.5288 39.3433 88.1938 cv
cp
37.5176 87.0815 mo
37.5176 87.3301 37.5176 87.5566 37.0967 87.751 cv
36.708 87.9346 36.2217 87.9346 36.1353 87.9346 cv
35.4658 87.9346 35.0229 87.5674 35.0229 87.1465 cv
35.0229 86.6172 35.9517 86.2178 37.5176 86.1743 cv
37.5176 87.0815 li
cp
0 0 0 1 cmyk
f
44.4517 88.2046 mo
44.4517 87.8701 44.1924 87.8701 44.0195 87.8701 cv
42.6152 87.8701 li
42.6152 82.3726 li
42.6152 82.0381 42.5508 81.9297 42.1836 81.9297 cv
40.4771 81.9297 li
40.3042 81.9297 40.0342 81.9297 40.0342 82.2646 cv
40.0342 82.5889 40.3149 82.5889 40.4663 82.5889 cv
41.8701 82.5889 li
41.8701 87.8701 li
40.4771 87.8701 li
40.3042 87.8701 40.0342 87.8701 40.0342 88.2046 cv
40.0342 88.5288 40.3149 88.5288 40.4663 88.5288 cv
44.0195 88.5288 li
44.1812 88.5288 44.4517 88.5288 44.4517 88.2046 cv
cp
f
50.5752 84.3384 mo
50.5752 84.0898 50.3696 83.7549 49.7866 83.7549 cv
49.668 83.7549 49.1387 83.7661 48.6421 84.1333 cv
48.4692 84.0142 48.0908 83.8091 47.5942 83.8091 cv
46.5791 83.8091 45.812 84.6191 45.812 85.5371 cv
45.812 86.0015 45.9956 86.3579 46.1577 86.563 cv
46.0391 86.7358 45.9419 86.9736 45.9419 87.2974 cv
45.9419 87.6758 46.0933 87.9453 46.1904 88.0752 cv
45.4019 88.561 45.4019 89.2954 45.4019 89.4141 cv
45.4019 90.3433 46.5308 91.002 47.9072 91.002 cv
49.2896 91.002 50.4238 90.3325 50.4238 89.4141 cv
50.4238 89.0146 50.2295 88.4746 49.6787 88.1831 cv
49.5381 88.1074 49.0845 87.8701 48.1128 87.8701 cv
47.3564 87.8701 li
47.27 87.8701 47.1299 87.8701 47.0435 87.8481 cv
46.8813 87.8481 46.8164 87.8481 46.687 87.6973 cv
46.5684 87.5459 46.5576 87.3086 46.5576 87.3086 cv
46.5576 87.2651 46.5791 87.1138 46.6221 87.0059 cv
46.6548 87.0273 47.0649 87.2759 47.5942 87.2759 cv
48.5879 87.2759 49.3765 86.498 49.3765 85.5371 cv
49.3765 85.2129 49.2827 84.8999 49.106 84.5977 cv
49.3291 84.4678 49.584 84.4248 49.7217 84.4141 cv
49.7866 84.7056 50.0352 84.7813 50.1431 84.7813 cv
50.3267 84.7813 50.5752 84.6514 50.5752 84.3384 cv
cp
48.6309 85.5371 mo
48.6309 86.1528 48.1558 86.6279 47.5942 86.6279 cv
47.0112 86.6279 46.5576 86.1201 46.5576 85.5479 cv
46.5576 84.9321 47.0327 84.457 47.5942 84.457 cv
48.1772 84.457 48.6309 84.9648 48.6309 85.5371 cv
cp
49.7974 89.4141 mo
49.7974 89.8896 48.9873 90.354 47.9072 90.354 cv
46.8335 90.354 46.0283 89.8896 46.0283 89.4141 cv
46.0283 89.2197 46.124 88.8745 46.4653 88.6582 cv
46.7314 88.4854 46.8276 88.4854 47.6157 88.4854 cv
48.5771 88.4854 49.7974 88.4854 49.7974 89.4141 cv
cp
f
55.7915 86.1958 mo
55.7915 84.8457 54.7871 83.7769 53.5776 83.7769 cv
52.3677 83.7769 51.3633 84.8457 51.3633 86.1958 cv
51.3633 87.5674 52.3892 88.5938 53.5776 88.5938 cv
54.7656 88.5938 55.7915 87.5566 55.7915 86.1958 cv
cp
55.0464 86.1201 mo
55.0464 87.125 54.3765 87.9346 53.5776 87.9346 cv
52.7783 87.9346 52.1084 87.125 52.1084 86.1201 cv
52.1084 85.1377 52.8105 84.4355 53.5776 84.4355 cv
54.355 84.4355 55.0464 85.1377 55.0464 86.1201 cv
cp
f
61.6772 84.4785 mo
61.6772 84.2627 61.5479 83.8091 60.6514 83.8091 cv
60.1006 83.8091 59.4092 84.0034 58.8154 84.6841 cv
58.8154 84.3169 li
58.8154 83.9819 58.7505 83.874 58.3833 83.874 cv
57.1953 83.874 li
57.0332 83.874 56.7632 83.874 56.7632 84.1978 cv
56.7632 84.5327 57.0225 84.5327 57.1953 84.5327 cv
58.0703 84.5327 li
58.0703 87.8701 li
57.1953 87.8701 li
57.0332 87.8701 56.7632 87.8701 56.7632 88.1938 cv
56.7632 88.5288 57.0225 88.5288 57.1953 88.5288 cv
60.0142 88.5288 li
60.1763 88.5288 60.457 88.5288 60.457 88.2046 cv
60.457 87.8701 60.1763 87.8701 60.0142 87.8701 cv
58.8154 87.8701 li
58.8154 86.52 li
58.8154 85.5049 59.4526 84.4678 60.7593 84.4678 cv
60.77 84.7271 60.9536 84.9434 61.2236 84.9434 cv
61.4614 84.9434 61.6772 84.7705 61.6772 84.4785 cv
cp
f
67.0122 88.2046 mo
67.0122 87.8701 66.7319 87.8701 66.5698 87.8701 cv
65.4253 87.8701 li
65.4253 84.3169 li
65.4253 83.9819 65.3599 83.874 64.9927 83.874 cv
63.4702 83.874 li
63.3081 83.874 63.0273 83.874 63.0273 84.1978 cv
63.0273 84.5327 63.3081 84.5327 63.4702 84.5327 cv
64.6802 84.5327 li
64.6802 87.8701 li
63.3838 87.8701 li
63.2109 87.8701 62.9409 87.8701 62.9409 88.2046 cv
62.9409 88.5288 63.2217 88.5288 63.3838 88.5288 cv
66.5698 88.5288 li
66.7319 88.5288 67.0122 88.5288 67.0122 88.2046 cv
cp
65.479 82.5347 mo
65.479 82.2324 65.2368 81.9946 64.9282 81.9946 cv
64.6318 81.9946 64.3989 82.2324 64.3989 82.5347 cv
64.3989 82.8369 64.6318 83.0747 64.9282 83.0747 cv
65.2368 83.0747 65.479 82.8369 65.479 82.5347 cv
cp
f
72.6069 87.168 mo
72.6069 86.9736 72.6069 86.7466 72.229 86.7466 cv
71.8726 86.7466 71.8618 86.9736 71.8618 87.1572 cv
71.8511 87.8267 71.2358 87.9346 70.9868 87.9346 cv
70.1558 87.9346 70.1558 87.373 70.1558 87.103 cv
70.1558 84.5327 li
71.9263 84.5327 li
72.0884 84.5327 72.3589 84.5327 72.3589 84.209 cv
72.3589 83.874 72.0991 83.874 71.9263 83.874 cv
70.1558 83.874 li
70.1558 82.9883 li
70.1558 82.7832 70.1558 82.5454 69.7886 82.5454 cv
69.4106 82.5454 69.4106 82.7725 69.4106 82.9883 cv
69.4106 83.874 li
68.4702 83.874 li
68.2974 83.874 68.0278 83.874 68.0278 84.209 cv
68.0278 84.5327 68.2974 84.5327 68.4595 84.5327 cv
69.4106 84.5327 li
69.4106 87.168 li
69.4106 88.2046 70.145 88.5938 70.9331 88.5938 cv
71.7319 88.5938 72.6069 88.1289 72.6069 87.168 cv
cp
f
78.9575 88.2046 mo
78.9575 87.8701 78.687 87.8701 78.5142 87.8701 cv
78.0396 87.8701 li
78.0396 85.3643 li
78.0396 84.2734 77.4888 83.8091 76.6353 83.8091 cv
75.9116 83.8091 75.4263 84.1763 75.2202 84.3813 cv
75.2202 82.3726 li
75.2202 82.0381 75.1558 81.9297 74.7886 81.9297 cv
74.0005 81.9297 li
73.8276 81.9297 73.5571 81.9297 73.5571 82.2646 cv
73.5571 82.5889 73.8384 82.5889 73.9897 82.5889 cv
74.4751 82.5889 li
74.4751 87.8701 li
74.0005 87.8701 li
73.8276 87.8701 73.5571 87.8701 73.5571 88.2046 cv
73.5571 88.5288 73.8384 88.5288 73.9897 88.5288 cv
75.7065 88.5288 li
75.8579 88.5288 76.1382 88.5288 76.1382 88.2046 cv
76.1382 87.8701 75.8687 87.8701 75.6958 87.8701 cv
75.2202 87.8701 li
75.2202 85.9585 li
75.2202 84.8784 76.02 84.4678 76.5708 84.4678 cv
77.1431 84.4678 77.2944 84.7705 77.2944 85.4185 cv
77.2944 87.8701 li
76.8726 87.8701 li
76.7007 87.8701 76.4302 87.8701 76.4302 88.2046 cv
76.4302 88.5288 76.7222 88.5288 76.8726 88.5288 cv
78.5249 88.5288 li
78.6763 88.5288 78.9575 88.5288 78.9575 88.2046 cv
cp
f
84.6704 88.2046 mo
84.6704 87.8701 84.4438 87.8701 84.0552 87.8701 cv
84.0552 85.2563 li
84.0552 85.04 84.0552 83.8091 83.0942 83.8091 cv
82.77 83.8091 82.3267 83.9497 82.0249 84.3706 cv
81.8628 84.0034 81.5601 83.8091 81.2036 83.8091 cv
80.8579 83.8091 80.5347 83.9604 80.2749 84.1978 cv
80.2534 83.874 80.0376 83.874 79.8433 83.874 cv
79.4976 83.874 li
79.3354 83.874 79.0542 83.874 79.0542 84.1978 cv
79.0542 84.5327 79.2817 84.5327 79.6704 84.5327 cv
79.6704 87.8701 li
79.2817 87.8701 79.0542 87.8701 79.0542 88.2046 cv
79.0542 88.5288 79.3462 88.5288 79.4976 88.5288 cv
80.4478 88.5288 li
80.6099 88.5288 80.8901 88.5288 80.8901 88.2046 cv
80.8901 87.8701 80.6636 87.8701 80.2749 87.8701 cv
80.2749 85.9365 li
80.2749 84.9756 80.7183 84.4678 81.1606 84.4678 cv
81.4087 84.4678 81.5601 84.6514 81.5601 85.3535 cv
81.5601 87.8701 li
81.355 87.8701 81.0854 87.8701 81.0854 88.2046 cv
81.0854 88.5288 81.3765 88.5288 81.5278 88.5288 cv
82.3374 88.5288 li
82.4995 88.5288 82.7808 88.5288 82.7808 88.2046 cv
82.7808 87.8701 82.5542 87.8701 82.1646 87.8701 cv
82.1646 85.9365 li
82.1646 84.9756 82.6079 84.4678 83.0503 84.4678 cv
83.2993 84.4678 83.4507 84.6514 83.4507 85.3535 cv
83.4507 87.8701 li
83.2446 87.8701 82.9751 87.8701 82.9751 88.2046 cv
82.9751 88.5288 83.2671 88.5288 83.4175 88.5288 cv
84.228 88.5288 li
84.3901 88.5288 84.6704 88.5288 84.6704 88.2046 cv
cp
f
2.0249 2.35742 mo
110.925 2.35742 li
110.925 27.5571 li
2.0249 27.5571 li
2.0249 2.35742 li
cp
0 0 0 0 cmyk
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
2.0249 2.35791 mo
110.925 2.35791 li
110.925 27.5581 li
2.0249 27.5581 li
2.0249 2.35791 li
cp
.746 .676 .668 .898 cmyk
@
grestore
42.5483 16.2246 mo
42.5483 14.896 41.5874 13.8379 40.4424 13.8379 cv
39.9238 13.8379 39.438 14.0322 39.0708 14.3667 cv
39.0708 14.0537 39.0493 13.9023 38.6387 13.9023 cv
37.8506 13.9023 li
37.6777 13.9023 37.4077 13.9023 37.4077 14.2373 cv
37.4077 14.5615 37.6885 14.5615 37.8398 14.5615 cv
38.3257 14.5615 li
38.3257 20.2959 li
37.8506 20.2959 li
37.6777 20.2959 37.4077 20.2959 37.4077 20.6309 cv
37.4077 20.9551 37.6885 20.9551 37.8398 20.9551 cv
39.5566 20.9551 li
39.708 20.9551 39.9888 20.9551 39.9888 20.6309 cv
39.9888 20.2959 39.7188 20.2959 39.5459 20.2959 cv
39.0708 20.2959 li
39.0708 18.0713 li
39.5137 18.5249 39.978 18.6221 40.3237 18.6221 cv
41.501 18.6221 42.5483 17.5962 42.5483 16.2246 cv
cp
41.8032 16.2246 mo
41.8032 17.2612 41.0474 17.9634 40.2915 17.9634 cv
39.4487 17.9634 39.0708 17.0127 39.0708 16.4941 cv
39.0708 15.7061 li
39.0708 15.0688 39.6973 14.4966 40.3774 14.4966 cv
41.1768 14.4966 41.8032 15.2847 41.8032 16.2246 cv
cp
0 0 0 1 cmyk
f
48.2075 14.5073 mo
48.2075 14.291 48.0781 13.8379 47.1816 13.8379 cv
46.6309 13.8379 45.9395 14.0322 45.3457 14.7124 cv
45.3457 14.3452 li
45.3457 14.0103 45.2808 13.9023 44.9136 13.9023 cv
43.7256 13.9023 li
43.5635 13.9023 43.2935 13.9023 43.2935 14.2266 cv
43.2935 14.5615 43.5527 14.5615 43.7256 14.5615 cv
44.6006 14.5615 li
44.6006 17.8984 li
43.7256 17.8984 li
43.5635 17.8984 43.2935 17.8984 43.2935 18.2227 cv
43.2935 18.5571 43.5527 18.5571 43.7256 18.5571 cv
46.5444 18.5571 li
46.7065 18.5571 46.9873 18.5571 46.9873 18.2334 cv
46.9873 17.8984 46.7065 17.8984 46.5444 17.8984 cv
45.3457 17.8984 li
45.3457 16.5483 li
45.3457 15.5332 45.9829 14.4966 47.2896 14.4966 cv
47.3003 14.7559 47.4839 14.9717 47.7539 14.9717 cv
47.9917 14.9717 48.2075 14.7988 48.2075 14.5073 cv
cp
f
53.6616 16.2246 mo
53.6616 14.8745 52.6572 13.8052 51.4478 13.8052 cv
50.2378 13.8052 49.2339 14.8745 49.2339 16.2246 cv
49.2339 17.5962 50.2598 18.6221 51.4478 18.6221 cv
52.6357 18.6221 53.6616 17.585 53.6616 16.2246 cv
cp
52.9165 16.1489 mo
52.9165 17.1533 52.2471 17.9634 51.4478 17.9634 cv
50.6484 17.9634 49.979 17.1533 49.979 16.1489 cv
49.979 15.166 50.6807 14.4639 51.4478 14.4639 cv
52.2251 14.4639 52.9165 15.166 52.9165 16.1489 cv
cp
f
59.5586 16.2246 mo
59.5586 14.896 58.5972 13.8379 57.4526 13.8379 cv
56.9341 13.8379 56.4482 14.0322 56.0811 14.3667 cv
56.0811 12.4014 li
56.0811 12.0664 56.0161 11.9585 55.6489 11.9585 cv
54.8604 11.9585 li
54.6875 11.9585 54.4175 11.9585 54.4175 12.293 cv
54.4175 12.6172 54.6982 12.6172 54.8496 12.6172 cv
55.3354 12.6172 li
55.3354 18.1143 li
55.3354 18.3306 55.3354 18.5571 55.7139 18.5571 cv
56.0811 18.5571 56.0811 18.3413 56.0811 18.0713 cv
56.5234 18.5249 56.9878 18.6221 57.3335 18.6221 cv
58.5107 18.6221 59.5586 17.5962 59.5586 16.2246 cv
cp
58.813 16.2246 mo
58.813 17.2612 58.0571 17.9634 57.3013 17.9634 cv
56.459 17.9634 56.0811 17.0127 56.0811 16.4941 cv
56.0811 15.7061 li
56.0811 15.0688 56.707 14.4966 57.3877 14.4966 cv
58.187 14.4966 58.813 15.2847 58.813 16.2246 cv
cp
f
65.0015 18.2334 mo
65.0015 17.8984 64.7427 17.8984 64.5698 17.8984 cv
63.1655 17.8984 li
63.1655 12.4014 li
63.1655 12.0664 63.1011 11.9585 62.7339 11.9585 cv
61.0273 11.9585 li
60.8545 11.9585 60.5845 11.9585 60.5845 12.293 cv
60.5845 12.6172 60.8652 12.6172 61.0166 12.6172 cv
62.4204 12.6172 li
62.4204 17.8984 li
61.0273 17.8984 li
60.8545 17.8984 60.5845 17.8984 60.5845 18.2334 cv
60.5845 18.5571 60.8652 18.5571 61.0166 18.5571 cv
64.5698 18.5571 li
64.7319 18.5571 65.0015 18.5571 65.0015 18.2334 cv
cp
f
70.6392 17.3799 mo
70.6392 17.0776 70.3257 17.0776 70.2612 17.0776 cv
70.0669 17.0776 69.98 17.1099 69.9048 17.3154 cv
69.6675 17.8662 69.0845 17.9634 68.7817 17.9634 cv
67.9712 17.9634 67.1616 17.4233 66.9888 16.4941 cv
70.2075 16.4941 li
70.4341 16.4941 70.6392 16.4941 70.6392 16.0947 cv
70.6392 14.8638 69.9478 13.8052 68.5444 13.8052 cv
67.2593 13.8052 66.2222 14.8853 66.2222 16.2139 cv
66.2222 17.5313 67.313 18.6221 68.7065 18.6221 cv
70.1313 18.6221 70.6392 17.6499 70.6392 17.3799 cv
cp
69.8726 15.8467 mo
66.9995 15.8467 li
67.1509 15.0581 67.7876 14.4639 68.5444 14.4639 cv
69.106 14.4639 69.7749 14.7339 69.8726 15.8467 cv
cp
f
76.8706 18.2334 mo
76.8706 17.8984 76.644 17.8984 76.2554 17.8984 cv
76.2554 15.2847 li
76.2554 15.0688 76.2554 13.8379 75.2944 13.8379 cv
74.9702 13.8379 74.5269 13.978 74.2251 14.3994 cv
74.063 14.0322 73.7603 13.8379 73.4038 13.8379 cv
73.0581 13.8379 72.7349 13.9888 72.4751 14.2266 cv
72.4536 13.9023 72.2378 13.9023 72.0435 13.9023 cv
71.6978 13.9023 li
71.5356 13.9023 71.2544 13.9023 71.2544 14.2266 cv
71.2544 14.5615 71.4819 14.5615 71.8706 14.5615 cv
71.8706 17.8984 li
71.4819 17.8984 71.2544 17.8984 71.2544 18.2334 cv
71.2544 18.5571 71.5464 18.5571 71.6978 18.5571 cv
72.6479 18.5571 li
72.8101 18.5571 73.0913 18.5571 73.0913 18.2334 cv
73.0913 17.8984 72.8638 17.8984 72.4751 17.8984 cv
72.4751 15.9653 li
72.4751 15.0039 72.9185 14.4966 73.3608 14.4966 cv
73.6089 14.4966 73.7603 14.6802 73.7603 15.3818 cv
73.7603 17.8984 li
73.5552 17.8984 73.2856 17.8984 73.2856 18.2334 cv
73.2856 18.5571 73.5767 18.5571 73.728 18.5571 cv
74.5376 18.5571 li
74.6997 18.5571 74.981 18.5571 74.981 18.2334 cv
74.981 17.8984 74.7544 17.8984 74.3647 17.8984 cv
74.3647 15.9653 li
74.3647 15.0039 74.8081 14.4966 75.2505 14.4966 cv
75.4995 14.4966 75.6509 14.6802 75.6509 15.3818 cv
75.6509 17.8984 li
75.4448 17.8984 75.1753 17.8984 75.1753 18.2334 cv
75.1753 18.5571 75.4673 18.5571 75.6177 18.5571 cv
76.4282 18.5571 li
76.5903 18.5571 76.8706 18.5571 76.8706 18.2334 cv
cp
f
1.35 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
56.4858 28.2324 mo
56.5127 61.3936 li
.746 .676 .668 .898 cmyk
@
56.519 69.3135 mo
59.4829 61.3916 li
53.543 61.3965 li
56.519 69.3135 li
cp
f
0 lc
0 lj
56.519 69.3135 mo
59.4829 61.3916 li
53.543 61.3965 li
56.519 69.3135 li
cp
@
1 lc
1 lj
56.5317 98.2036 mo
56.5317 131.365 li
@
56.5313 139.285 mo
59.5015 131.365 li
53.5615 131.365 li
56.5313 139.285 li
cp
f
0 lc
0 lj
56.5317 139.285 mo
59.502 131.365 li
53.562 131.365 li
56.5317 139.285 li
cp
@
1 lc
1 lj
56.5059 168.175 mo
56.4395 202.012 li
@
56.4233 209.931 mo
59.4087 202.018 li
53.4688 202.005 li
56.4233 209.931 li
cp
f
0 lc
0 lj
56.4238 209.931 mo
59.4092 202.018 li
53.4692 202.005 li
56.4238 209.931 li
cp
@
40.2993 38.4014 mo
72.6997 38.4014 li
72.6997 52.8013 li
40.2993 52.8013 li
40.2993 38.4014 li
cp
0 0 0 0 cmyk
f
49.2207 46.9297 mo
49.3179 46.3467 49.0264 46.001 48.9399 45.9038 cv
48.605 45.5688 48.3242 45.5039 47.6328 45.3745 cv
47.3198 45.3096 46.564 45.1582 46.6719 44.5103 cv
46.7256 44.1758 47.0283 43.6787 48 43.6787 cv
49.1772 43.6787 49.0801 44.6831 49.0479 45.0181 cv
49.0371 45.1045 49.1128 45.1045 49.145 45.1045 cv
49.2637 45.1045 49.2744 45.0503 49.3071 44.856 cv
49.5015 43.7329 li
49.5337 43.5386 49.5337 43.4844 49.4258 43.4844 cv
49.3394 43.4844 49.1021 43.7222 49.0044 43.8193 cv
48.7129 43.5493 48.3892 43.4844 48.0435 43.4844 cv
46.7368 43.4844 46.229 44.1973 46.1318 44.791 cv
46.1104 44.9102 46.0562 45.2881 46.4019 45.666 cv
46.6934 45.9683 47.0498 46.0439 47.5249 46.1411 cv
48.1084 46.2598 48.2378 46.2925 48.4756 46.5083 cv
48.6372 46.6704 48.7456 46.9082 48.6914 47.2104 cv
48.6157 47.6748 48.2593 48.1934 47.3091 48.1934 cv
46.5962 48.1934 46.1426 47.7827 46.0884 46.7031 cv
46.0776 46.5083 46.0669 46.4868 46.0669 46.4868 cv
46.0562 46.4434 46.0132 46.4434 45.9805 46.4434 cv
45.8618 46.4434 45.8511 46.4976 45.8188 46.6919 cv
45.5703 48.1606 li
45.5376 48.3555 45.5269 48.4092 45.6348 48.4092 cv
45.689 48.4092 45.6997 48.3984 45.9268 48.1719 cv
45.9912 48.0962 46.0024 48.0742 46.186 47.9014 cv
46.5098 48.4092 47.0928 48.4092 47.2764 48.4092 cv
48.4106 48.4092 49.0801 47.7827 49.2207 46.9297 cv
cp
0 0 0 1 cmyk
f
54.707 45.9902 mo
54.9336 44.5967 54.0591 43.4844 52.8062 43.4844 cv
51.5103 43.4844 50.3008 44.6294 50.0737 45.9902 cv
49.8364 47.3726 50.7437 48.4092 51.9746 48.4092 cv
53.249 48.4092 54.48 47.3506 54.707 45.9902 cv
cp
53.897 45.8926 mo
53.832 46.271 53.7241 46.9404 53.3569 47.4482 cv
52.9683 47.9663 52.439 48.1719 52.0288 48.1719 cv
51.6289 48.1719 51.1753 47.999 50.9487 47.4697 cv
50.7324 46.9834 50.8296 46.3467 50.9053 45.8926 cv
50.981 45.4824 51.0889 44.8237 51.4995 44.3379 cv
51.8774 43.873 52.3848 43.7002 52.7632 43.7002 cv
53.1841 43.7002 53.6055 43.895 53.832 44.3159 cv
54.0806 44.813 53.9619 45.4932 53.897 45.8926 cv
cp
f
57.3315 48.3013 mo
57.3853 47.9883 li
56.6943 47.9883 56.5645 47.9883 56.6401 47.502 cv
57.7632 40.8062 li
56.2407 40.9248 li
56.1865 41.2383 li
56.9209 41.2383 56.9966 41.3135 56.9102 41.8428 cv
55.96 47.502 li
55.8843 47.9883 55.7651 47.9883 55.0635 47.9883 cv
55.0093 48.3013 li
55.312 48.2798 55.8408 48.2798 56.165 48.2798 cv
56.4888 48.2798 57.0288 48.2798 57.3315 48.3013 cv
cp
f
63.6924 43.9595 mo
63.7466 43.6465 li
63.4336 43.668 63.2822 43.668 62.9473 43.668 cv
62.062 43.6465 li
62.0078 43.9595 li
62.4614 43.9814 62.4614 44.3052 62.4399 44.4238 cv
62.418 44.5215 62.3965 44.5752 62.3208 44.7051 cv
60.7549 47.4912 li
60.0532 44.4458 li
60.0205 44.2944 60.0098 44.2944 60.0205 44.2402 cv
60.064 43.9595 60.4741 43.9595 60.6685 43.9595 cv
60.7227 43.6465 li
60.4526 43.668 59.8911 43.668 59.5996 43.668 cv
58.5625 43.6465 li
58.5088 43.9595 li
59.1133 43.9595 59.2104 44.0029 59.2861 44.3379 cv
60.1934 48.2041 li
60.2148 48.3555 60.2256 48.4092 60.3555 48.4092 cv
60.4312 48.4092 60.5063 48.3877 60.6147 48.2041 cv
62.6021 44.6724 li
62.7422 44.4346 63.0015 43.9707 63.6924 43.9595 cv
cp
f
67.7856 47.0161 mo
67.7964 46.9512 67.7534 46.9082 67.689 46.9082 cv
67.6021 46.9082 67.5698 46.9619 67.5376 47.0161 cv
67.105 47.9233 66.3384 48.1719 65.8853 48.1719 cv
65.4312 48.1719 64.3945 47.8691 64.7075 46.001 cv
64.7397 45.7959 li
67.7319 45.7959 li
67.9692 45.7959 67.9907 45.7959 68.0229 45.5903 cv
68.2065 44.4995 67.7856 43.4844 66.479 43.4844 cv
65.2476 43.4844 64.1138 44.5967 63.8979 45.936 cv
63.6602 47.3618 64.5781 48.4092 65.7769 48.4092 cv
67.062 48.4092 67.7427 47.2427 67.7856 47.0161 cv
cp
67.354 45.5903 mo
64.7837 45.5903 li
65.1509 43.895 66.1333 43.7002 66.436 43.7002 cv
67.5913 43.7002 67.4077 45.2231 67.354 45.5903 cv
cp
f
27.2817 108.373 mo
85.7817 108.373 li
85.7817 122.772 li
27.2817 122.772 li
27.2817 108.373 li
cp
0 0 0 0 cmyk
f
34.7261 118.272 mo
34.7803 117.959 li
34.0781 117.959 34.0459 117.905 34.1104 117.484 cv
34.7803 113.51 li
33.2896 113.629 li
33.2358 113.942 li
33.9268 113.942 34.0132 114.007 33.9268 114.536 cv
33.4302 117.474 li
33.3545 117.959 33.2358 117.959 32.5337 117.959 cv
32.4795 118.272 li
32.7822 118.251 33.3003 118.251 33.6138 118.251 cv
33.7324 118.251 34.3589 118.251 34.7261 118.272 cv
cp
35.2119 111.75 mo
35.2661 111.426 35.0396 111.22 34.7803 111.22 cv
34.4775 111.22 34.2075 111.458 34.1646 111.75 cv
34.1104 112.03 34.3159 112.268 34.5967 112.268 cv
34.9204 112.268 35.1689 112.009 35.2119 111.75 cv
cp
0 0 0 1 cmyk
f
43.6255 118.272 mo
43.6792 117.959 li
43.1392 117.959 42.8691 117.959 42.9126 117.636 cv
43.2471 115.648 li
43.4092 114.644 43.4634 114.342 43.269 113.996 cv
43.0313 113.575 42.5347 113.51 42.1675 113.51 cv
41.271 113.51 40.7095 114.158 40.4609 114.579 cv
40.4502 113.748 39.9102 113.51 39.2295 113.51 cv
38.1821 113.51 37.6206 114.406 37.4907 114.622 cv
37.48 114.622 li
37.6743 113.51 li
36.1841 113.629 li
36.1299 113.942 li
36.8647 113.942 36.9399 114.018 36.8535 114.547 cv
36.3569 117.474 li
36.2813 117.959 36.1626 117.959 35.4604 117.959 cv
35.4067 118.272 li
35.6875 118.251 36.2705 118.251 36.5728 118.251 cv
36.8862 118.251 37.4692 118.251 37.75 118.272 cv
37.8042 117.959 li
37.1128 117.959 36.9834 117.959 37.0591 117.474 cv
37.3936 115.465 li
37.5879 114.331 38.4307 113.726 39.1001 113.726 cv
39.7695 113.726 39.8345 114.277 39.7266 114.936 cv
39.2944 117.474 li
39.2188 117.959 39.1001 117.959 38.3979 117.959 cv
38.3442 118.272 li
38.625 118.251 39.208 118.251 39.5103 118.251 cv
39.8237 118.251 40.4067 118.251 40.6875 118.272 cv
40.7417 117.959 li
40.0503 117.959 39.9209 117.959 39.9966 117.474 cv
40.3315 115.465 li
40.5259 114.331 41.3682 113.726 42.0376 113.726 cv
42.7075 113.726 42.772 114.277 42.6641 114.936 cv
42.2319 117.474 li
42.1567 117.959 42.0376 117.959 41.3354 117.959 cv
41.2817 118.272 li
41.5625 118.251 42.1455 118.251 42.4482 118.251 cv
42.7612 118.251 43.3442 118.251 43.6255 118.272 cv
cp
f
49.749 115.94 mo
49.9756 114.568 49.144 113.51 47.9668 113.51 cv
47.0166 113.51 46.3901 114.19 46.3467 114.233 cv
46.4766 113.51 li
44.9536 113.629 li
44.8999 113.942 li
45.6558 113.942 45.7095 114.018 45.6235 114.493 cv
44.7808 119.569 li
44.6943 120.055 44.5757 120.055 43.8735 120.055 cv
43.8306 120.368 li
44.1113 120.346 44.6943 120.346 44.9971 120.346 cv
45.3101 120.346 45.8931 120.346 46.1743 120.368 cv
46.2173 120.055 li
45.5259 120.055 45.3965 120.055 45.4829 119.569 cv
45.7959 117.689 li
45.9473 117.959 46.3145 118.381 47.0059 118.381 cv
48.2476 118.381 49.522 117.333 49.749 115.94 cv
cp
48.9282 115.94 mo
48.7119 117.225 47.8267 118.165 46.9951 118.165 cv
46.6602 118.165 46.3687 118.024 46.1851 117.819 cv
45.9795 117.571 45.8501 117.354 45.9043 117.052 cv
46.2715 114.828 li
46.3037 114.622 46.3145 114.611 46.4551 114.438 cv
46.8652 113.953 47.4268 113.748 47.8374 113.748 cv
48.6475 113.748 49.1333 114.73 48.9282 115.94 cv
cp
f
52.4272 118.272 mo
52.4814 117.959 li
51.79 117.959 51.6606 117.959 51.7358 117.474 cv
52.8594 110.777 li
51.3364 110.896 li
51.2827 111.209 li
52.0171 111.209 52.0923 111.285 52.0063 111.814 cv
51.0557 117.474 li
50.98 117.959 50.8613 117.959 50.1592 117.959 cv
50.1055 118.272 li
50.4077 118.251 50.937 118.251 51.2607 118.251 cv
51.585 118.251 52.125 118.251 52.4272 118.272 cv
cp
f
57.2983 116.987 mo
57.3091 116.923 57.2656 116.879 57.2007 116.879 cv
57.1147 116.879 57.082 116.934 57.0498 116.987 cv
56.6177 117.895 55.8511 118.143 55.3975 118.143 cv
54.9438 118.143 53.9067 117.841 54.2202 115.972 cv
54.2524 115.767 li
57.2441 115.767 li
57.4819 115.767 57.5034 115.767 57.5356 115.562 cv
57.7192 114.471 57.2983 113.456 55.9912 113.456 cv
54.7603 113.456 53.626 114.568 53.4102 115.908 cv
53.1724 117.333 54.0903 118.381 55.2896 118.381 cv
56.5747 118.381 57.2549 117.214 57.2983 116.987 cv
cp
56.8662 115.562 mo
54.2959 115.562 li
54.6631 113.866 55.6455 113.672 55.9482 113.672 cv
57.1035 113.672 56.9199 115.195 56.8662 115.562 cv
cp
f
65.9487 118.272 mo
66.0024 117.959 li
65.4624 117.959 65.1929 117.959 65.2358 117.636 cv
65.5708 115.648 li
65.7329 114.644 65.7866 114.342 65.5923 113.996 cv
65.355 113.575 64.8579 113.51 64.4907 113.51 cv
63.5942 113.51 63.0327 114.158 62.7847 114.579 cv
62.7739 113.748 62.2339 113.51 61.5532 113.51 cv
60.5059 113.51 59.9438 114.406 59.8145 114.622 cv
59.8037 114.622 li
59.998 113.51 li
58.5078 113.629 li
58.4536 113.942 li
59.188 113.942 59.2637 114.018 59.1772 114.547 cv
58.6807 117.474 li
58.605 117.959 58.4858 117.959 57.7842 117.959 cv
57.73 118.272 li
58.0107 118.251 58.5942 118.251 58.8965 118.251 cv
59.2095 118.251 59.793 118.251 60.0737 118.272 cv
60.1274 117.959 li
59.4365 117.959 59.3071 117.959 59.3823 117.474 cv
59.7173 115.465 li
59.9116 114.331 60.7539 113.726 61.4238 113.726 cv
62.0933 113.726 62.1582 114.277 62.0503 114.936 cv
61.6182 117.474 li
61.5425 117.959 61.4238 117.959 60.7217 117.959 cv
60.6675 118.272 li
60.9487 118.251 61.5317 118.251 61.834 118.251 cv
62.1475 118.251 62.7305 118.251 63.0112 118.272 cv
63.0654 117.959 li
62.374 117.959 62.2446 117.959 62.3203 117.474 cv
62.6548 115.465 li
62.8491 114.331 63.6919 113.726 64.3613 113.726 cv
65.0308 113.726 65.0952 114.277 64.9878 114.936 cv
64.5557 117.474 li
64.48 117.959 64.3613 117.959 63.6592 117.959 cv
63.6055 118.272 li
63.8862 118.251 64.4692 118.251 64.772 118.251 cv
65.0845 118.251 65.6685 118.251 65.9487 118.272 cv
cp
f
70.8091 116.987 mo
70.8198 116.923 70.7769 116.879 70.7114 116.879 cv
70.6255 116.879 70.5933 116.934 70.5601 116.987 cv
70.1284 117.895 69.3618 118.143 68.9077 118.143 cv
68.4546 118.143 67.4175 117.841 67.731 115.972 cv
67.7632 115.767 li
70.7554 115.767 li
70.9927 115.767 71.0142 115.767 71.0464 115.562 cv
71.23 114.471 70.8091 113.456 69.5024 113.456 cv
68.271 113.456 67.1372 114.568 66.9214 115.908 cv
66.6831 117.333 67.6011 118.381 68.8003 118.381 cv
70.0854 118.381 70.7661 117.214 70.8091 116.987 cv
cp
70.3765 115.562 mo
67.8062 115.562 li
68.1733 113.866 69.1567 113.672 69.4585 113.672 cv
70.6147 113.672 70.4312 115.195 70.3765 115.562 cv
cp
f
76.522 118.272 mo
76.5757 117.959 li
76.0356 117.959 75.7661 117.959 75.8091 117.636 cv
76.144 115.648 li
76.3062 114.644 76.3599 114.342 76.1655 113.996 cv
75.9282 113.575 75.4312 113.51 75.064 113.51 cv
74.0161 113.51 73.4546 114.406 73.3257 114.622 cv
73.3149 114.622 li
73.5093 113.51 li
72.0181 113.629 li
71.9644 113.942 li
72.6987 113.942 72.7749 114.018 72.688 114.547 cv
72.1909 117.474 li
72.1157 117.959 71.9966 117.959 71.2944 117.959 cv
71.2407 118.272 li
71.522 118.251 72.105 118.251 72.4077 118.251 cv
72.7202 118.251 73.3032 118.251 73.5845 118.272 cv
73.6382 117.959 li
72.9478 117.959 72.8179 117.959 72.8931 117.474 cv
73.228 115.465 li
73.4224 114.331 74.2651 113.726 74.9341 113.726 cv
75.604 113.726 75.6685 114.277 75.561 114.936 cv
75.1284 117.474 li
75.0532 117.959 74.9341 117.959 74.2329 117.959 cv
74.1782 118.272 li
74.4595 118.251 75.0425 118.251 75.3452 118.251 cv
75.6577 118.251 76.2417 118.251 76.522 118.272 cv
cp
f
80.5181 116.934 mo
80.6157 116.318 li
80.3774 116.318 li
80.2808 116.912 li
80.1509 117.689 79.7622 118.143 79.3413 118.143 cv
78.6069 118.143 78.7788 117.139 78.8013 116.955 cv
79.3081 113.931 li
80.8315 113.931 li
80.8853 113.618 li
79.3628 113.618 li
79.6978 111.631 li
79.4595 111.631 li
79.2759 112.646 78.7144 113.683 77.7212 113.715 cv
77.689 113.931 li
78.6069 113.931 li
78.1099 116.934 li
77.9048 118.132 78.6606 118.381 79.2329 118.381 cv
79.9136 118.381 80.3882 117.711 80.5181 116.934 cv
cp
f
4.7207 178.614 mo
108.22 178.614 li
108.22 193.014 li
4.7207 193.014 li
4.7207 178.614 li
cp
0 0 0 0 cmyk
f
14.248 187.229 mo
14.2588 187.132 14.1836 187.132 14.1509 187.132 cv
14.0537 187.132 14.043 187.164 13.9888 187.293 cv
13.6216 188.061 12.9849 188.384 12.4014 188.384 cv
11.7427 188.384 10.9648 187.812 11.2349 186.17 cv
11.5376 184.377 12.5308 183.935 13.0708 183.935 cv
13.4814 183.935 14.043 184.097 14.2266 184.518 cv
14.0972 184.518 13.6973 184.518 13.6216 184.961 cv
13.5786 185.22 13.73 185.404 13.9888 185.404 cv
14.2373 185.404 14.4644 185.252 14.5181 184.939 cv
14.6372 184.216 13.9673 183.697 13.0928 183.697 cv
11.8291 183.697 10.6411 184.82 10.4141 186.181 cv
10.1875 187.563 11.0405 188.622 12.2612 188.622 cv
13.6865 188.622 14.2266 187.326 14.248 187.229 cv
cp
0 0 0 1 cmyk
f
19.1514 186.203 mo
19.3784 184.81 18.5034 183.697 17.2505 183.697 cv
15.9546 183.697 14.7451 184.842 14.5181 186.203 cv
14.2808 187.585 15.188 188.622 16.4189 188.622 cv
17.6934 188.622 18.9248 187.563 19.1514 186.203 cv
cp
18.3413 186.105 mo
18.2769 186.483 18.1685 187.153 17.8013 187.661 cv
17.4126 188.179 16.8833 188.384 16.4731 188.384 cv
16.0732 188.384 15.6196 188.212 15.3931 187.683 cv
15.1772 187.196 15.2744 186.559 15.3496 186.105 cv
15.4253 185.695 15.5332 185.037 15.9438 184.55 cv
16.3218 184.086 16.8296 183.913 17.2075 183.913 cv
17.6284 183.913 18.0498 184.107 18.2769 184.529 cv
18.5249 185.025 18.4063 185.706 18.3413 186.105 cv
cp
f
27.6616 188.514 mo
27.7158 188.201 li
27.1758 188.201 26.9058 188.201 26.9492 187.877 cv
27.2837 185.89 li
27.4458 184.885 27.5 184.583 27.3052 184.237 cv
27.0679 183.816 26.5708 183.751 26.2036 183.751 cv
25.3076 183.751 24.7456 184.399 24.4976 184.82 cv
24.4868 183.989 23.9468 183.751 23.2661 183.751 cv
22.2188 183.751 21.6572 184.647 21.5273 184.864 cv
21.5166 184.864 li
21.7109 183.751 li
20.2207 183.87 li
20.1665 184.183 li
20.9009 184.183 20.9766 184.259 20.8901 184.788 cv
20.3936 187.715 li
20.3179 188.201 20.1992 188.201 19.4971 188.201 cv
19.4429 188.514 li
19.7236 188.492 20.3071 188.492 20.6094 188.492 cv
20.9224 188.492 21.5059 188.492 21.7866 188.514 cv
21.8408 188.201 li
21.1494 188.201 21.02 188.201 21.0952 187.715 cv
21.4302 185.706 li
21.6245 184.572 22.4668 183.967 23.1367 183.967 cv
23.8062 183.967 23.8711 184.518 23.7632 185.177 cv
23.3311 187.715 li
23.2554 188.201 23.1367 188.201 22.4346 188.201 cv
22.3804 188.514 li
22.6616 188.492 23.2446 188.492 23.5469 188.492 cv
23.8604 188.492 24.4434 188.492 24.7241 188.514 cv
24.7783 188.201 li
24.0869 188.201 23.9575 188.201 24.0332 187.715 cv
24.3677 185.706 li
24.562 184.572 25.4048 183.967 26.0742 183.967 cv
26.7437 183.967 26.8086 184.518 26.7007 185.177 cv
26.2686 187.715 li
26.1929 188.201 26.0742 188.201 25.3721 188.201 cv
25.3184 188.514 li
25.5991 188.492 26.1821 188.492 26.4849 188.492 cv
26.7979 188.492 27.3809 188.492 27.6616 188.514 cv
cp
f
33.7856 186.181 mo
34.0122 184.81 33.1807 183.751 32.0034 183.751 cv
31.0532 183.751 30.4268 184.432 30.3833 184.475 cv
30.5132 183.751 li
28.9902 183.87 li
28.936 184.183 li
29.6924 184.183 29.7461 184.259 29.6597 184.734 cv
28.8174 189.81 li
28.731 190.296 28.6123 190.296 27.9102 190.296 cv
27.8672 190.609 li
28.1479 190.588 28.731 190.588 29.0332 190.588 cv
29.3467 190.588 29.9297 190.588 30.2104 190.609 cv
30.2539 190.296 li
29.5625 190.296 29.4331 190.296 29.5195 189.81 cv
29.8325 187.931 li
29.9839 188.201 30.3511 188.622 31.042 188.622 cv
32.2842 188.622 33.5586 187.574 33.7856 186.181 cv
cp
32.9644 186.181 mo
32.7485 187.466 31.8628 188.406 31.0313 188.406 cv
30.6968 188.406 30.4048 188.266 30.2212 188.061 cv
30.0161 187.812 29.8867 187.596 29.9404 187.293 cv
30.3076 185.069 li
30.3403 184.864 30.3511 184.853 30.4912 184.68 cv
30.9019 184.194 31.4634 183.989 31.874 183.989 cv
32.6836 183.989 33.1699 184.972 32.9644 186.181 cv
cp
f
36.3882 188.514 mo
36.4424 188.201 li
35.7402 188.201 35.708 188.147 35.7725 187.726 cv
36.4424 183.751 li
34.9517 183.87 li
34.8979 184.183 li
35.5889 184.183 35.6753 184.248 35.5889 184.777 cv
35.0923 187.715 li
35.0166 188.201 34.8979 188.201 34.1958 188.201 cv
34.1416 188.514 li
34.4443 188.492 34.9624 188.492 35.2759 188.492 cv
35.3945 188.492 36.021 188.492 36.3882 188.514 cv
cp
36.874 181.991 mo
36.9282 181.667 36.7017 181.462 36.4424 181.462 cv
36.1396 181.462 35.8696 181.699 35.8267 181.991 cv
35.7725 182.271 35.978 182.509 36.2588 182.509 cv
36.5825 182.509 36.8311 182.25 36.874 181.991 cv
cp
f
39.4014 188.514 mo
39.4556 188.201 li
38.7642 188.201 38.6348 188.201 38.7104 187.715 cv
39.8335 181.019 li
38.3105 181.138 li
38.2568 181.451 li
38.9912 181.451 39.0664 181.526 38.98 182.056 cv
38.0298 187.715 li
37.9541 188.201 37.8354 188.201 37.1333 188.201 cv
37.0796 188.514 li
37.3818 188.492 37.9111 188.492 38.2349 188.492 cv
38.5591 188.492 39.0991 188.492 39.4014 188.514 cv
cp
f
44.272 187.229 mo
44.2832 187.164 44.2397 187.121 44.1748 187.121 cv
44.0884 187.121 44.0562 187.175 44.0239 187.229 cv
43.5918 188.136 42.8252 188.384 42.3716 188.384 cv
41.918 188.384 40.8809 188.082 41.1943 186.214 cv
41.2266 186.008 li
44.2183 186.008 li
44.4556 186.008 44.4775 186.008 44.5098 185.803 cv
44.6934 184.712 44.272 183.697 42.9653 183.697 cv
41.7344 183.697 40.6001 184.81 40.3843 186.149 cv
40.1465 187.574 41.0645 188.622 42.2632 188.622 cv
43.5488 188.622 44.229 187.456 44.272 187.229 cv
cp
43.8403 185.803 mo
41.27 185.803 li
41.6372 184.107 42.6196 183.913 42.9224 183.913 cv
44.0776 183.913 43.894 185.436 43.8403 185.803 cv
cp
f
53.2256 186.203 mo
53.4521 184.81 52.5776 183.697 51.3247 183.697 cv
50.0288 183.697 48.8188 184.842 48.5923 186.203 cv
48.3545 187.585 49.2617 188.622 50.4932 188.622 cv
51.7676 188.622 52.9985 187.563 53.2256 186.203 cv
cp
52.4155 186.105 mo
52.3506 186.483 52.2427 187.153 51.8755 187.661 cv
51.4868 188.179 50.9575 188.384 50.5469 188.384 cv
50.1475 188.384 49.6938 188.212 49.4668 187.683 cv
49.251 187.196 49.3481 186.559 49.4238 186.105 cv
49.4995 185.695 49.6074 185.037 50.0181 184.55 cv
50.396 184.086 50.9033 183.913 51.2813 183.913 cv
51.7026 183.913 52.124 184.107 52.3506 184.529 cv
52.5991 185.025 52.48 185.706 52.4155 186.105 cv
cp
f
57.6748 184.377 mo
57.729 184.054 57.4912 183.751 57.0269 183.751 cv
56.1089 183.751 55.623 184.745 55.5259 184.95 cv
55.5151 184.95 li
55.7202 183.751 li
54.2515 183.87 li
54.1973 184.183 li
54.9316 184.183 55.0073 184.259 54.9209 184.788 cv
54.4243 187.715 li
54.3486 188.201 54.23 188.201 53.5278 188.201 cv
53.4736 188.514 li
53.7764 188.492 54.3701 188.492 54.6943 188.492 cv
54.9858 188.492 55.7524 188.492 56.001 188.514 cv
56.0552 188.201 li
55.8389 188.201 li
55.0508 188.201 55.0508 188.082 55.1152 187.693 cv
55.396 185.998 li
55.5688 184.95 56.1631 183.967 56.9946 183.967 cv
57.0811 183.967 57.1025 183.967 57.146 183.978 cv
57.0488 184.021 56.8652 184.086 56.8218 184.377 cv
56.7681 184.691 56.9946 184.81 57.1675 184.81 cv
57.3833 184.81 57.6211 184.669 57.6748 184.377 cv
cp
f
63.4097 188.514 mo
63.4639 188.201 li
62.7617 188.201 62.7295 188.147 62.7944 187.726 cv
63.4639 183.751 li
61.9736 183.87 li
61.9194 184.183 li
62.6108 184.183 62.6968 184.248 62.6108 184.777 cv
62.1138 187.715 li
62.0381 188.201 61.9194 188.201 61.2173 188.201 cv
61.1636 188.514 li
61.4658 188.492 61.9844 188.492 62.2974 188.492 cv
62.416 188.492 63.0425 188.492 63.4097 188.514 cv
cp
63.896 181.991 mo
63.9497 181.667 63.7231 181.462 63.4639 181.462 cv
63.1616 181.462 62.8916 181.699 62.8481 181.991 cv
62.7944 182.271 62.9995 182.509 63.2803 182.509 cv
63.604 182.509 63.8525 182.25 63.896 181.991 cv
cp
f
69.3716 188.514 mo
69.4253 188.201 li
68.8853 188.201 68.6157 188.201 68.6587 187.877 cv
68.9937 185.89 li
69.1558 184.885 69.2095 184.583 69.0151 184.237 cv
68.7778 183.816 68.2808 183.751 67.9136 183.751 cv
66.8657 183.751 66.3042 184.647 66.1743 184.864 cv
66.1636 184.864 li
66.3579 183.751 li
64.8677 183.87 li
64.814 184.183 li
65.5483 184.183 65.6235 184.259 65.5376 184.788 cv
65.0405 187.715 li
64.9653 188.201 64.8462 188.201 64.144 188.201 cv
64.0903 188.514 li
64.3711 188.492 64.9546 188.492 65.2563 188.492 cv
65.5698 188.492 66.1528 188.492 66.4341 188.514 cv
66.4878 188.201 li
65.7964 188.201 65.6675 188.201 65.7427 187.715 cv
66.0776 185.706 li
66.272 184.572 67.1138 183.967 67.7837 183.967 cv
68.4536 183.967 68.5181 184.518 68.4106 185.177 cv
67.978 187.715 li
67.9028 188.201 67.7837 188.201 67.0815 188.201 cv
67.0278 188.514 li
67.3081 188.492 67.8921 188.492 68.1938 188.492 cv
68.5073 188.492 69.0903 188.492 69.3716 188.514 cv
cp
f
73.3677 187.175 mo
73.4644 186.559 li
73.2271 186.559 li
73.1294 187.153 li
73.0005 187.931 72.6118 188.384 72.1899 188.384 cv
71.4556 188.384 71.6284 187.38 71.6499 187.196 cv
72.1577 184.172 li
73.6802 184.172 li
73.7349 183.859 li
72.2114 183.859 li
72.5464 181.872 li
72.3091 181.872 li
72.1255 182.887 71.564 183.924 70.5698 183.957 cv
70.5376 184.172 li
71.4556 184.172 li
70.9595 187.175 li
70.7534 188.374 71.5103 188.622 72.0825 188.622 cv
72.7622 188.622 73.2378 187.953 73.3677 187.175 cv
cp
f
78.3462 187.229 mo
78.3569 187.164 78.314 187.121 78.2495 187.121 cv
78.1626 187.121 78.1304 187.175 78.0981 187.229 cv
77.6655 188.136 76.8989 188.384 76.4458 188.384 cv
75.9917 188.384 74.9546 188.082 75.2681 186.214 cv
75.3003 186.008 li
78.2925 186.008 li
78.5298 186.008 78.5513 186.008 78.5835 185.803 cv
78.7671 184.712 78.3462 183.697 77.0396 183.697 cv
75.8081 183.697 74.6743 184.81 74.4585 186.149 cv
74.2202 187.574 75.1382 188.622 76.3374 188.622 cv
77.6226 188.622 78.3032 187.456 78.3462 187.229 cv
cp
77.9146 185.803 mo
75.3442 185.803 li
75.7114 184.107 76.6938 183.913 76.9966 183.913 cv
78.1519 183.913 77.9683 185.436 77.9146 185.803 cv
cp
f
82.936 184.377 mo
82.9897 184.054 82.7524 183.751 82.2886 183.751 cv
81.3706 183.751 80.8843 184.745 80.7866 184.95 cv
80.7759 184.95 li
80.981 183.751 li
79.5122 183.87 li
79.4585 184.183 li
80.1929 184.183 80.269 184.259 80.1821 184.788 cv
79.6851 187.715 li
79.6099 188.201 79.4907 188.201 78.7886 188.201 cv
78.7349 188.514 li
79.0376 188.492 79.6313 188.492 79.9556 188.492 cv
80.2466 188.492 81.0142 188.492 81.2622 188.514 cv
81.3159 188.201 li
81.1001 188.201 li
80.312 188.201 80.312 188.082 80.3765 187.693 cv
80.6577 185.998 li
80.8306 184.95 81.4243 183.967 82.2554 183.967 cv
82.3423 183.967 82.3638 183.967 82.4067 183.978 cv
82.3101 184.021 82.1265 184.086 82.0835 184.377 cv
82.0288 184.691 82.2554 184.81 82.4282 184.81 cv
82.645 184.81 82.8823 184.669 82.936 184.377 cv
cp
f
88.4224 186.181 mo
88.6499 184.81 87.8179 183.751 86.6401 183.751 cv
85.6899 183.751 85.064 184.432 85.021 184.475 cv
85.1499 183.751 li
83.6274 183.87 li
83.5737 184.183 li
84.3296 184.183 84.3833 184.259 84.2974 184.734 cv
83.4546 189.81 li
83.3687 190.296 83.2495 190.296 82.5474 190.296 cv
82.5044 190.609 li
82.7847 190.588 83.3687 190.588 83.6704 190.588 cv
83.9839 190.588 84.5669 190.588 84.8481 190.609 cv
84.8911 190.296 li
84.1997 190.296 84.0698 190.296 84.1567 189.81 cv
84.4702 187.931 li
84.6206 188.201 84.9878 188.622 85.6792 188.622 cv
86.9214 188.622 88.1958 187.574 88.4224 186.181 cv
cp
87.6021 186.181 mo
87.3862 187.466 86.5005 188.406 85.6685 188.406 cv
85.3335 188.406 85.0425 188.266 84.8589 188.061 cv
84.6538 187.812 84.5239 187.596 84.5776 187.293 cv
84.9448 185.069 li
84.9771 184.864 84.9878 184.853 85.1284 184.68 cv
85.5386 184.194 86.1011 183.989 86.5112 183.989 cv
87.3208 183.989 87.8071 184.972 87.6021 186.181 cv
cp
f
92.9263 184.377 mo
92.98 184.054 92.7427 183.751 92.2778 183.751 cv
91.3599 183.751 90.8745 184.745 90.7769 184.95 cv
90.7661 184.95 li
90.9712 183.751 li
89.5024 183.87 li
89.4487 184.183 li
90.1831 184.183 90.2583 184.259 90.1724 184.788 cv
89.6753 187.715 li
89.6001 188.201 89.481 188.201 88.7788 188.201 cv
88.7251 188.514 li
89.0278 188.492 89.6216 188.492 89.9458 188.492 cv
90.2368 188.492 91.0034 188.492 91.2524 188.514 cv
91.3062 188.201 li
91.0903 188.201 li
90.3022 188.201 90.3022 188.082 90.3667 187.693 cv
90.647 185.998 li
90.8198 184.95 91.4146 183.967 92.2456 183.967 cv
92.3325 183.967 92.354 183.967 92.397 183.978 cv
92.3003 184.021 92.1167 184.086 92.0728 184.377 cv
92.019 184.691 92.2456 184.81 92.4185 184.81 cv
92.6343 184.81 92.8726 184.669 92.9263 184.377 cv
cp
f
96.6089 187.229 mo
96.6196 187.164 96.5767 187.121 96.5122 187.121 cv
96.4253 187.121 96.3931 187.175 96.3608 187.229 cv
95.9282 188.136 95.1616 188.384 94.7085 188.384 cv
94.2544 188.384 93.2183 188.082 93.5308 186.214 cv
93.563 186.008 li
96.5552 186.008 li
96.7925 186.008 96.814 186.008 96.8462 185.803 cv
97.0298 184.712 96.6089 183.697 95.3022 183.697 cv
94.0708 183.697 92.937 184.81 92.7212 186.149 cv
92.4839 187.574 93.4019 188.622 94.6001 188.622 cv
95.8853 188.622 96.5659 187.456 96.6089 187.229 cv
cp
96.1772 185.803 mo
93.6069 185.803 li
93.9741 184.107 94.9565 183.913 95.2593 183.913 cv
96.4146 183.913 96.231 185.436 96.1772 185.803 cv
cp
f
100.443 187.175 mo
100.541 186.559 li
100.302 186.559 li
100.206 187.153 li
100.076 187.931 99.687 188.384 99.2661 188.384 cv
98.5317 188.384 98.7046 187.38 98.7261 187.196 cv
99.2339 184.172 li
100.756 184.172 li
100.81 183.859 li
99.2876 183.859 li
99.6226 181.872 li
99.3843 181.872 li
99.2007 182.887 98.6392 183.924 97.646 183.957 cv
97.6138 184.172 li
98.5317 184.172 li
98.0347 187.175 li
97.8296 188.374 98.5854 188.622 99.1577 188.622 cv
99.8384 188.622 100.313 187.953 100.443 187.175 cv
cp
f
1.96924 212.271 mo
110.87 212.271 li
110.87 249.171 li
1.96924 249.171 li
1.96924 212.271 li
cp
0 0 0 0 cmyk
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
1 lc
1 lj
1.96924 212.271 mo
110.87 212.271 li
110.87 249.171 li
1.96924 249.171 li
1.96924 212.271 li
cp
.746 .676 .668 .898 cmyk
@
grestore
20.1743 227.698 mo
20.1743 227.363 19.9473 227.363 19.5586 227.363 cv
19.5586 224.75 li
19.5586 224.533 19.5586 223.302 18.5972 223.302 cv
18.2734 223.302 17.8306 223.442 17.5283 223.864 cv
17.3662 223.497 17.064 223.302 16.7075 223.302 cv
16.3618 223.302 16.0376 223.453 15.7788 223.691 cv
15.7568 223.367 15.541 223.367 15.3467 223.367 cv
15.001 223.367 li
14.8389 223.367 14.5581 223.367 14.5581 223.691 cv
14.5581 224.026 14.7852 224.026 15.1738 224.026 cv
15.1738 227.363 li
14.7852 227.363 14.5581 227.363 14.5581 227.698 cv
14.5581 228.021 14.8496 228.021 15.001 228.021 cv
15.9512 228.021 li
16.1133 228.021 16.394 228.021 16.394 227.698 cv
16.394 227.363 16.1675 227.363 15.7788 227.363 cv
15.7788 225.43 li
15.7788 224.469 16.2212 223.961 16.6641 223.961 cv
16.9126 223.961 17.064 224.145 17.064 224.847 cv
17.064 227.363 li
16.8584 227.363 16.5884 227.363 16.5884 227.698 cv
16.5884 228.021 16.8804 228.021 17.0313 228.021 cv
17.8413 228.021 li
18.0034 228.021 18.2842 228.021 18.2842 227.698 cv
18.2842 227.363 18.0571 227.363 17.6685 227.363 cv
17.6685 225.43 li
17.6685 224.469 18.1113 223.961 18.5542 223.961 cv
18.8027 223.961 18.9536 224.145 18.9536 224.847 cv
18.9536 227.363 li
18.7485 227.363 18.4785 227.363 18.4785 227.698 cv
18.4785 228.021 18.77 228.021 18.9214 228.021 cv
19.7314 228.021 li
19.8936 228.021 20.1743 228.021 20.1743 227.698 cv
cp
0 0 0 1 cmyk
f
25.8765 227.687 mo
25.8765 227.363 25.6064 227.363 25.4448 227.363 cv
24.9907 227.363 24.8828 227.309 24.7964 227.276 cv
24.7964 224.944 li
24.7964 224.177 24.2134 223.27 22.6582 223.27 cv
22.1938 223.27 21.0923 223.27 21.0923 224.058 cv
21.0923 224.382 21.3188 224.555 21.5781 224.555 cv
21.7402 224.555 22.0425 224.458 22.0532 224.058 cv
22.0532 223.972 22.064 223.961 22.2803 223.939 cv
22.4312 223.929 22.5718 223.929 22.6689 223.929 cv
23.4897 223.929 24.0513 224.263 24.0513 225.03 cv
22.1396 225.063 20.8115 225.603 20.8115 226.639 cv
20.8115 227.384 21.4917 228.086 22.5933 228.086 cv
22.9932 228.086 23.6626 228.011 24.1704 227.676 cv
24.4077 228.011 24.9263 228.021 25.3364 228.021 cv
25.6392 228.021 25.8765 228.021 25.8765 227.687 cv
cp
24.0513 226.575 mo
24.0513 226.823 24.0513 227.05 23.6304 227.244 cv
23.2412 227.428 22.7554 227.428 22.6689 227.428 cv
21.9995 227.428 21.5566 227.061 21.5566 226.639 cv
21.5566 226.11 22.4854 225.71 24.0513 225.667 cv
24.0513 226.575 li
cp
f
30.9741 226.845 mo
30.9741 226.542 30.6611 226.542 30.5962 226.542 cv
30.4233 226.542 30.3154 226.563 30.2397 226.78 cv
30.1748 226.92 29.9697 227.428 29.1704 227.428 cv
28.2524 227.428 27.4751 226.672 27.4751 225.689 cv
27.4751 225.17 27.7773 223.929 29.2354 223.929 cv
29.4624 223.929 29.8833 223.929 29.8833 224.026 cv
29.894 224.404 30.0991 224.555 30.3584 224.555 cv
30.6177 224.555 30.8447 224.371 30.8447 224.058 cv
30.8447 223.27 29.7212 223.27 29.2354 223.27 cv
27.3779 223.27 26.73 224.738 26.73 225.689 cv
26.73 226.985 27.7451 228.086 29.106 228.086 cv
30.6069 228.086 30.9741 227.028 30.9741 226.845 cv
cp
f
36.8491 227.698 mo
36.8491 227.363 36.5796 227.363 36.4067 227.363 cv
35.9312 227.363 li
35.9312 224.857 li
35.9312 223.767 35.3804 223.302 34.5273 223.302 cv
33.8037 223.302 33.3179 223.669 33.1128 223.875 cv
33.1128 221.866 li
33.1128 221.531 33.0479 221.423 32.6807 221.423 cv
31.8921 221.423 li
31.7192 221.423 31.4492 221.423 31.4492 221.758 cv
31.4492 222.082 31.73 222.082 31.8813 222.082 cv
32.3672 222.082 li
32.3672 227.363 li
31.8921 227.363 li
31.7192 227.363 31.4492 227.363 31.4492 227.698 cv
31.4492 228.021 31.73 228.021 31.8813 228.021 cv
33.5986 228.021 li
33.7495 228.021 34.0308 228.021 34.0308 227.698 cv
34.0308 227.363 33.7607 227.363 33.5879 227.363 cv
33.1128 227.363 li
33.1128 225.451 li
33.1128 224.371 33.9116 223.961 34.4624 223.961 cv
35.0352 223.961 35.186 224.263 35.186 224.911 cv
35.186 227.363 li
34.7651 227.363 li
34.5923 227.363 34.3223 227.363 34.3223 227.698 cv
34.3223 228.021 34.6138 228.021 34.7651 228.021 cv
36.4175 228.021 li
36.5684 228.021 36.8491 228.021 36.8491 227.698 cv
cp
f
41.9146 227.698 mo
41.9146 227.363 41.6338 227.363 41.4717 227.363 cv
40.3271 227.363 li
40.3271 223.81 li
40.3271 223.475 40.2622 223.367 39.895 223.367 cv
38.3721 223.367 li
38.21 223.367 37.9292 223.367 37.9292 223.691 cv
37.9292 224.026 38.21 224.026 38.3721 224.026 cv
39.5815 224.026 li
39.5815 227.363 li
38.2856 227.363 li
38.1128 227.363 37.8428 227.363 37.8428 227.698 cv
37.8428 228.021 38.1235 228.021 38.2856 228.021 cv
41.4717 228.021 li
41.6338 228.021 41.9146 228.021 41.9146 227.698 cv
cp
40.3809 222.028 mo
40.3809 221.725 40.1387 221.488 39.8301 221.488 cv
39.5337 221.488 39.3008 221.725 39.3008 222.028 cv
39.3008 222.33 39.5337 222.568 39.8301 222.568 cv
40.1387 222.568 40.3809 222.33 40.3809 222.028 cv
cp
f
48.1895 227.698 mo
48.1895 227.363 47.9194 227.363 47.7466 227.363 cv
47.2715 227.363 li
47.2715 224.857 li
47.2715 223.767 46.7207 223.302 45.8672 223.302 cv
45.1436 223.302 44.6577 223.669 44.4526 223.875 cv
44.4526 223.529 44.4526 223.367 44.0205 223.367 cv
43.2319 223.367 li
43.0596 223.367 42.7896 223.367 42.7896 223.702 cv
42.7896 224.026 43.0703 224.026 43.2212 224.026 cv
43.7075 224.026 li
43.7075 227.363 li
43.2319 227.363 li
43.0596 227.363 42.7896 227.363 42.7896 227.698 cv
42.7896 228.021 43.0703 228.021 43.2212 228.021 cv
44.9385 228.021 li
45.0898 228.021 45.3706 228.021 45.3706 227.698 cv
45.3706 227.363 45.1006 227.363 44.9277 227.363 cv
44.4526 227.363 li
44.4526 225.451 li
44.4526 224.371 45.252 223.961 45.8027 223.961 cv
46.375 223.961 46.5264 224.263 46.5264 224.911 cv
46.5264 227.363 li
46.105 227.363 li
45.9321 227.363 45.6621 227.363 45.6621 227.698 cv
45.6621 228.021 45.9536 228.021 46.105 228.021 cv
47.7573 228.021 li
47.9087 228.021 48.1895 228.021 48.1895 227.698 cv
cp
f
53.3408 226.845 mo
53.3408 226.542 53.0278 226.542 52.9629 226.542 cv
52.7686 226.542 52.6821 226.575 52.6064 226.78 cv
52.3691 227.331 51.7856 227.428 51.4834 227.428 cv
50.6733 227.428 49.8633 226.888 49.6904 225.959 cv
52.9092 225.959 li
53.1357 225.959 53.3408 225.959 53.3408 225.559 cv
53.3408 224.328 52.6499 223.27 51.2456 223.27 cv
49.9604 223.27 48.9238 224.35 48.9238 225.678 cv
48.9238 226.996 50.0146 228.086 51.4077 228.086 cv
52.8335 228.086 53.3408 227.114 53.3408 226.845 cv
cp
52.5742 225.311 mo
49.7012 225.311 li
49.8525 224.522 50.4897 223.929 51.2456 223.929 cv
51.8071 223.929 52.4771 224.198 52.5742 225.311 cv
cp
f
64.7134 227.698 mo
64.7134 227.363 64.4541 227.363 64.2813 227.363 cv
62.8774 227.363 li
62.8774 221.866 li
62.8774 221.531 62.8125 221.423 62.4453 221.423 cv
60.7388 221.423 li
60.5659 221.423 60.2964 221.423 60.2964 221.758 cv
60.2964 222.082 60.5771 222.082 60.728 222.082 cv
62.1323 222.082 li
62.1323 227.363 li
60.7388 227.363 li
60.5659 227.363 60.2964 227.363 60.2964 227.698 cv
60.2964 228.021 60.5771 228.021 60.728 228.021 cv
64.2813 228.021 li
64.4434 228.021 64.7134 228.021 64.7134 227.698 cv
cp
f
70.9448 227.687 mo
70.9448 227.363 70.6753 227.363 70.5132 227.363 cv
70.0591 227.363 69.9517 227.309 69.8647 227.276 cv
69.8647 224.944 li
69.8647 224.177 69.2817 223.27 67.7261 223.27 cv
67.2622 223.27 66.1606 223.27 66.1606 224.058 cv
66.1606 224.382 66.3872 224.555 66.647 224.555 cv
66.8081 224.555 67.1108 224.458 67.1216 224.058 cv
67.1216 223.972 67.1323 223.961 67.3481 223.939 cv
67.4995 223.929 67.6401 223.929 67.7378 223.929 cv
68.5581 223.929 69.1196 224.263 69.1196 225.03 cv
67.2085 225.063 65.8794 225.603 65.8794 226.639 cv
65.8794 227.384 66.5601 228.086 67.6616 228.086 cv
68.061 228.086 68.731 228.011 69.2388 227.676 cv
69.4761 228.011 69.9946 228.021 70.4048 228.021 cv
70.7075 228.021 70.9448 228.021 70.9448 227.687 cv
cp
69.1196 226.575 mo
69.1196 226.823 69.1196 227.05 68.6987 227.244 cv
68.3101 227.428 67.8237 227.428 67.7378 227.428 cv
67.0679 227.428 66.6245 227.061 66.6245 226.639 cv
66.6245 226.11 67.5542 225.71 69.1196 225.667 cv
69.1196 226.575 li
cp
f
76.5396 227.698 mo
76.5396 227.363 76.269 227.363 76.0962 227.363 cv
75.6216 227.363 li
75.6216 224.857 li
75.6216 223.767 75.0708 223.302 74.2173 223.302 cv
73.4937 223.302 73.0073 223.669 72.8022 223.875 cv
72.8022 223.529 72.8022 223.367 72.3706 223.367 cv
71.5825 223.367 li
71.4097 223.367 71.1392 223.367 71.1392 223.702 cv
71.1392 224.026 71.4204 224.026 71.5718 224.026 cv
72.0571 224.026 li
72.0571 227.363 li
71.5825 227.363 li
71.4097 227.363 71.1392 227.363 71.1392 227.698 cv
71.1392 228.021 71.4204 228.021 71.5718 228.021 cv
73.2886 228.021 li
73.4399 228.021 73.7202 228.021 73.7202 227.698 cv
73.7202 227.363 73.4507 227.363 73.2778 227.363 cv
72.8022 227.363 li
72.8022 225.451 li
72.8022 224.371 73.6021 223.961 74.1528 223.961 cv
74.7251 223.961 74.8765 224.263 74.8765 224.911 cv
74.8765 227.363 li
74.4546 227.363 li
74.2817 227.363 74.0122 227.363 74.0122 227.698 cv
74.0122 228.021 74.3042 228.021 74.4546 228.021 cv
76.1069 228.021 li
76.2583 228.021 76.5396 228.021 76.5396 227.698 cv
cp
f
82.1772 223.831 mo
82.1772 223.583 81.9722 223.248 81.3882 223.248 cv
81.27 223.248 80.7407 223.259 80.2437 223.626 cv
80.0708 223.507 79.6929 223.302 79.1958 223.302 cv
78.1812 223.302 77.4146 224.112 77.4146 225.03 cv
77.4146 225.495 77.5981 225.851 77.7593 226.056 cv
77.6411 226.229 77.5435 226.466 77.5435 226.791 cv
77.5435 227.168 77.6948 227.438 77.7925 227.568 cv
77.0034 228.054 77.0034 228.789 77.0034 228.907 cv
77.0034 229.836 78.1333 230.495 79.5093 230.495 cv
80.8921 230.495 82.0259 229.825 82.0259 228.907 cv
82.0259 228.508 81.8315 227.968 81.2808 227.676 cv
81.1401 227.601 80.687 227.363 79.7144 227.363 cv
78.9585 227.363 li
78.8726 227.363 78.7319 227.363 78.645 227.341 cv
78.4829 227.341 78.4185 227.341 78.2886 227.19 cv
78.1704 227.039 78.1597 226.801 78.1597 226.801 cv
78.1597 226.758 78.1812 226.607 78.2241 226.499 cv
78.2563 226.521 78.6665 226.769 79.1958 226.769 cv
80.1899 226.769 80.978 225.991 80.978 225.03 cv
80.978 224.706 80.8843 224.393 80.7085 224.09 cv
80.9312 223.961 81.186 223.917 81.3237 223.907 cv
81.3882 224.198 81.6372 224.274 81.7446 224.274 cv
81.9282 224.274 82.1772 224.145 82.1772 223.831 cv
cp
80.2329 225.03 mo
80.2329 225.646 79.7573 226.121 79.1958 226.121 cv
78.6128 226.121 78.1597 225.613 78.1597 225.041 cv
78.1597 224.425 78.6343 223.95 79.1958 223.95 cv
79.7798 223.95 80.2329 224.458 80.2329 225.03 cv
cp
81.3989 228.907 mo
81.3989 229.382 80.5894 229.847 79.5093 229.847 cv
78.436 229.847 77.6304 229.382 77.6304 228.907 cv
77.6304 228.713 77.7261 228.367 78.0669 228.151 cv
78.3335 227.979 78.4292 227.979 79.2183 227.979 cv
80.1792 227.979 81.3989 227.979 81.3989 228.907 cv
cp
f
87.8794 227.687 mo
87.8794 227.363 87.5981 227.363 87.4478 227.363 cv
86.9614 227.363 li
86.9614 223.81 li
86.9614 223.475 86.897 223.367 86.5298 223.367 cv
85.7407 223.367 li
85.5679 223.367 85.2983 223.367 85.2983 223.702 cv
85.2983 224.026 85.5786 224.026 85.73 224.026 cv
86.2163 224.026 li
86.2163 226.326 li
86.2163 227.298 85.3413 227.428 84.9956 227.428 cv
84.1421 227.428 84.1421 227.071 84.1421 226.726 cv
84.1421 223.81 li
84.1421 223.475 84.0776 223.367 83.7104 223.367 cv
82.9224 223.367 li
82.7495 223.367 82.479 223.367 82.479 223.702 cv
82.479 224.026 82.7603 224.026 82.9116 224.026 cv
83.397 224.026 li
83.397 226.791 li
83.397 227.827 84.1421 228.086 84.9312 228.086 cv
85.3735 228.086 85.8169 227.979 86.2163 227.676 cv
86.2271 228.021 86.4536 228.021 86.6479 228.021 cv
87.437 228.021 li
87.6089 228.021 87.8794 228.021 87.8794 227.687 cv
cp
f
93.6245 227.687 mo
93.6245 227.363 93.355 227.363 93.1929 227.363 cv
92.7397 227.363 92.6313 227.309 92.5454 227.276 cv
92.5454 224.944 li
92.5454 224.177 91.9614 223.27 90.4067 223.27 cv
89.9419 223.27 88.8403 223.27 88.8403 224.058 cv
88.8403 224.382 89.0679 224.555 89.3267 224.555 cv
89.4888 224.555 89.7905 224.458 89.8022 224.058 cv
89.8022 223.972 89.813 223.961 90.0288 223.939 cv
90.1802 223.929 90.3198 223.929 90.4175 223.929 cv
91.2378 223.929 91.7993 224.263 91.7993 225.03 cv
89.8882 225.063 88.5601 225.603 88.5601 226.639 cv
88.5601 227.384 89.2397 228.086 90.3413 228.086 cv
90.7417 228.086 91.4106 228.011 91.9185 227.676 cv
92.1558 228.011 92.6743 228.021 93.0854 228.021 cv
93.3872 228.021 93.6245 228.021 93.6245 227.687 cv
cp
91.7993 226.575 mo
91.7993 226.823 91.7993 227.05 91.3784 227.244 cv
90.9897 227.428 90.5034 227.428 90.4175 227.428 cv
89.7476 227.428 89.3052 227.061 89.3052 226.639 cv
89.3052 226.11 90.2339 225.71 91.7993 225.667 cv
91.7993 226.575 li
cp
f
99.187 223.831 mo
99.187 223.583 98.9819 223.248 98.3989 223.248 cv
98.2798 223.248 97.7505 223.259 97.2544 223.626 cv
97.0815 223.507 96.7026 223.302 96.2065 223.302 cv
95.1909 223.302 94.4243 224.112 94.4243 225.03 cv
94.4243 225.495 94.6079 225.851 94.77 226.056 cv
94.6509 226.229 94.5542 226.466 94.5542 226.791 cv
94.5542 227.168 94.7046 227.438 94.8022 227.568 cv
94.0142 228.054 94.0142 228.789 94.0142 228.907 cv
94.0142 229.836 95.1431 230.495 96.519 230.495 cv
97.9019 230.495 99.0356 229.825 99.0356 228.907 cv
99.0356 228.508 98.8413 227.968 98.2905 227.676 cv
98.1499 227.601 97.6968 227.363 96.7241 227.363 cv
95.9683 227.363 li
95.8823 227.363 95.7417 227.363 95.6558 227.341 cv
95.4937 227.341 95.4282 227.341 95.2993 227.19 cv
95.1802 227.039 95.1694 226.801 95.1694 226.801 cv
95.1694 226.758 95.1909 226.607 95.2339 226.499 cv
95.2661 226.521 95.6772 226.769 96.2065 226.769 cv
97.1997 226.769 97.9878 225.991 97.9878 225.03 cv
97.9878 224.706 97.895 224.393 97.7183 224.09 cv
97.9409 223.961 98.1958 223.917 98.3335 223.907 cv
98.3989 224.198 98.647 224.274 98.7554 224.274 cv
98.939 224.274 99.187 224.145 99.187 223.831 cv
cp
97.2427 225.03 mo
97.2427 225.646 96.7681 226.121 96.2065 226.121 cv
95.6226 226.121 95.1694 225.613 95.1694 225.041 cv
95.1694 224.425 95.645 223.95 96.2065 223.95 cv
96.7896 223.95 97.2427 224.458 97.2427 225.03 cv
cp
98.4097 228.907 mo
98.4097 229.382 97.5991 229.847 96.519 229.847 cv
95.4458 229.847 94.6401 229.382 94.6401 228.907 cv
94.6401 228.713 94.7358 228.367 95.0767 228.151 cv
95.3433 227.979 95.439 227.979 96.228 227.979 cv
97.189 227.979 98.4097 227.979 98.4097 228.907 cv
cp
f
104.371 226.845 mo
104.371 226.542 104.058 226.542 103.993 226.542 cv
103.798 226.542 103.712 226.575 103.636 226.78 cv
103.399 227.331 102.816 227.428 102.513 227.428 cv
101.704 227.428 100.893 226.888 100.72 225.959 cv
103.939 225.959 li
104.166 225.959 104.371 225.959 104.371 225.559 cv
104.371 224.328 103.68 223.27 102.276 223.27 cv
100.991 223.27 99.9536 224.35 99.9536 225.678 cv
99.9536 226.996 101.044 228.086 102.438 228.086 cv
103.864 228.086 104.371 227.114 104.371 226.845 cv
cp
103.604 225.311 mo
100.731 225.311 li
100.882 224.522 101.52 223.929 102.276 223.929 cv
102.837 223.929 103.507 224.198 103.604 225.311 cv
cp
f
41.8716 238.292 mo
41.8716 236.964 40.9102 235.906 39.7651 235.906 cv
39.2471 235.906 38.7612 236.1 38.3936 236.435 cv
38.3936 236.122 38.3721 235.971 37.9619 235.971 cv
37.1733 235.971 li
37.0005 235.971 36.7305 235.971 36.7305 236.305 cv
36.7305 236.629 37.0112 236.629 37.1626 236.629 cv
37.6484 236.629 li
37.6484 242.364 li
37.1733 242.364 li
37.0005 242.364 36.7305 242.364 36.7305 242.699 cv
36.7305 243.023 37.0112 243.023 37.1626 243.023 cv
38.8799 243.023 li
39.0308 243.023 39.312 243.023 39.312 242.699 cv
39.312 242.364 39.042 242.364 38.8691 242.364 cv
38.3936 242.364 li
38.3936 240.139 li
38.8364 240.593 39.3008 240.69 39.6465 240.69 cv
40.8237 240.69 41.8716 239.664 41.8716 238.292 cv
cp
41.126 238.292 mo
41.126 239.329 40.3701 240.031 39.6143 240.031 cv
38.772 240.031 38.3936 239.081 38.3936 238.563 cv
38.3936 237.774 li
38.3936 237.137 39.02 236.564 39.7007 236.564 cv
40.4995 236.564 41.126 237.353 41.126 238.292 cv
cp
f
47.5308 236.575 mo
47.5308 236.359 47.4009 235.906 46.5044 235.906 cv
45.9536 235.906 45.2627 236.1 44.6685 236.78 cv
44.6685 236.413 li
44.6685 236.079 44.604 235.971 44.2368 235.971 cv
43.0483 235.971 li
42.8867 235.971 42.6167 235.971 42.6167 236.294 cv
42.6167 236.629 42.876 236.629 43.0483 236.629 cv
43.9233 236.629 li
43.9233 239.966 li
43.0483 239.966 li
42.8867 239.966 42.6167 239.966 42.6167 240.291 cv
42.6167 240.625 42.876 240.625 43.0483 240.625 cv
45.8672 240.625 li
46.0293 240.625 46.3101 240.625 46.3101 240.301 cv
46.3101 239.966 46.0293 239.966 45.8672 239.966 cv
44.6685 239.966 li
44.6685 238.617 li
44.6685 237.602 45.3057 236.564 46.6128 236.564 cv
46.6235 236.824 46.8071 237.04 47.0771 237.04 cv
47.3145 237.04 47.5308 236.867 47.5308 236.575 cv
cp
f
52.9844 238.292 mo
52.9844 236.942 51.98 235.873 50.7705 235.873 cv
49.561 235.873 48.5566 236.942 48.5566 238.292 cv
48.5566 239.664 49.5825 240.69 50.7705 240.69 cv
51.9585 240.69 52.9844 239.653 52.9844 238.292 cv
cp
52.2393 238.217 mo
52.2393 239.221 51.5698 240.031 50.7705 240.031 cv
49.9712 240.031 49.3018 239.221 49.3018 238.217 cv
49.3018 237.234 50.0039 236.532 50.7705 236.532 cv
51.5483 236.532 52.2393 237.234 52.2393 238.217 cv
cp
f
59.1079 236.435 mo
59.1079 236.187 58.9028 235.852 58.3198 235.852 cv
58.2012 235.852 57.6719 235.862 57.1753 236.229 cv
57.0024 236.111 56.624 235.906 56.1274 235.906 cv
55.1123 235.906 54.3452 236.716 54.3452 237.634 cv
54.3452 238.098 54.5288 238.455 54.6909 238.66 cv
54.5723 238.833 54.4751 239.07 54.4751 239.394 cv
54.4751 239.772 54.626 240.042 54.7231 240.172 cv
53.9351 240.658 53.9351 241.392 53.9351 241.511 cv
53.9351 242.439 55.064 243.099 56.4404 243.099 cv
57.8228 243.099 58.957 242.429 58.957 241.511 cv
58.957 241.111 58.7627 240.571 58.2119 240.28 cv
58.0713 240.204 57.6177 239.966 56.646 239.966 cv
55.8896 239.966 li
55.8032 239.966 55.6631 239.966 55.5767 239.945 cv
55.4146 239.945 55.3496 239.945 55.2202 239.794 cv
55.1016 239.643 55.0903 239.405 55.0903 239.405 cv
55.0903 239.362 55.1123 239.21 55.1553 239.103 cv
55.188 239.124 55.5981 239.373 56.1274 239.373 cv
57.1211 239.373 57.9092 238.595 57.9092 237.634 cv
57.9092 237.31 57.8159 236.997 57.6392 236.694 cv
57.8623 236.564 58.1167 236.521 58.2549 236.511 cv
58.3198 236.802 58.5684 236.878 58.6763 236.878 cv
58.8599 236.878 59.1079 236.748 59.1079 236.435 cv
cp
57.1641 237.634 mo
57.1641 238.25 56.689 238.725 56.1274 238.725 cv
55.5439 238.725 55.0903 238.217 55.0903 237.645 cv
55.0903 237.029 55.5659 236.554 56.1274 236.554 cv
56.7104 236.554 57.1641 237.062 57.1641 237.634 cv
cp
58.3306 241.511 mo
58.3306 241.986 57.5205 242.451 56.4404 242.451 cv
55.3667 242.451 54.5615 241.986 54.5615 241.511 cv
54.5615 241.316 54.6572 240.971 54.998 240.755 cv
55.2646 240.582 55.3604 240.582 56.1489 240.582 cv
57.1104 240.582 58.3306 240.582 58.3306 241.511 cv
cp
f
64.5405 236.575 mo
64.5405 236.359 64.4111 235.906 63.5146 235.906 cv
62.9639 235.906 62.2725 236.1 61.6787 236.78 cv
61.6787 236.413 li
61.6787 236.079 61.6138 235.971 61.2466 235.971 cv
60.0586 235.971 li
59.8965 235.971 59.6265 235.971 59.6265 236.294 cv
59.6265 236.629 59.8857 236.629 60.0586 236.629 cv
60.9336 236.629 li
60.9336 239.966 li
60.0586 239.966 li
59.8965 239.966 59.6265 239.966 59.6265 240.291 cv
59.6265 240.625 59.8857 240.625 60.0586 240.625 cv
62.8774 240.625 li
63.0396 240.625 63.3203 240.625 63.3203 240.301 cv
63.3203 239.966 63.0396 239.966 62.8774 239.966 cv
61.6787 239.966 li
61.6787 238.617 li
61.6787 237.602 62.3159 236.564 63.6226 236.564 cv
63.6333 236.824 63.8169 237.04 64.0869 237.04 cv
64.3247 237.04 64.5405 236.867 64.5405 236.575 cv
cp
f
70.5562 240.291 mo
70.5562 239.966 70.2866 239.966 70.1245 239.966 cv
69.6704 239.966 69.563 239.913 69.4761 239.88 cv
69.4761 237.547 li
69.4761 236.78 68.8931 235.873 67.3374 235.873 cv
66.8735 235.873 65.772 235.873 65.772 236.662 cv
65.772 236.986 65.9985 237.159 66.2573 237.159 cv
66.4194 237.159 66.7222 237.062 66.7329 236.662 cv
66.7329 236.575 66.7437 236.564 66.9595 236.543 cv
67.1108 236.532 67.2515 236.532 67.3481 236.532 cv
68.1694 236.532 68.731 236.867 68.731 237.634 cv
66.8198 237.666 65.4907 238.206 65.4907 239.243 cv
65.4907 239.988 66.1714 240.69 67.2729 240.69 cv
67.6724 240.69 68.3423 240.614 68.8501 240.28 cv
69.0874 240.614 69.606 240.625 70.0161 240.625 cv
70.3188 240.625 70.5562 240.625 70.5562 240.291 cv
cp
68.731 239.178 mo
68.731 239.427 68.731 239.653 68.3101 239.848 cv
67.9214 240.031 67.4351 240.031 67.3481 240.031 cv
66.6792 240.031 66.2358 239.664 66.2358 239.243 cv
66.2358 238.714 67.1646 238.314 68.731 238.271 cv
68.731 239.178 li
cp
f
76.1938 240.301 mo
76.1938 239.966 75.9673 239.966 75.5786 239.966 cv
75.5786 237.353 li
75.5786 237.137 75.5786 235.906 74.6167 235.906 cv
74.2925 235.906 73.8501 236.046 73.5474 236.467 cv
73.3862 236.1 73.0835 235.906 72.7271 235.906 cv
72.3813 235.906 72.0571 236.057 71.7983 236.294 cv
71.7769 235.971 71.5601 235.971 71.3657 235.971 cv
71.021 235.971 li
70.8589 235.971 70.5776 235.971 70.5776 236.294 cv
70.5776 236.629 70.8042 236.629 71.1929 236.629 cv
71.1929 239.966 li
70.8042 239.966 70.5776 239.966 70.5776 240.301 cv
70.5776 240.625 70.8696 240.625 71.021 240.625 cv
71.9712 240.625 li
72.1333 240.625 72.4136 240.625 72.4136 240.301 cv
72.4136 239.966 72.187 239.966 71.7983 239.966 cv
71.7983 238.033 li
71.7983 237.072 72.2407 236.564 72.6841 236.564 cv
72.9321 236.564 73.0835 236.748 73.0835 237.45 cv
73.0835 239.966 li
72.8784 239.966 72.6079 239.966 72.6079 240.301 cv
72.6079 240.625 72.8999 240.625 73.0513 240.625 cv
73.8608 240.625 li
74.0229 240.625 74.3042 240.625 74.3042 240.301 cv
74.3042 239.966 74.0767 239.966 73.688 239.966 cv
73.688 238.033 li
73.688 237.072 74.1313 236.564 74.5737 236.564 cv
74.8218 236.564 74.9731 236.748 74.9731 237.45 cv
74.9731 239.966 li
74.7681 239.966 74.4985 239.966 74.4985 240.301 cv
74.4985 240.625 74.7896 240.625 74.9409 240.625 cv
75.7515 240.625 li
75.9126 240.625 76.1938 240.625 76.1938 240.301 cv
cp
f
2.1377 293.943 mo
110.982 293.943 li
110.982 343.442 li
2.1377 343.442 li
2.1377 293.943 li
cp
0 0 0 0 cmyk
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
1 lc
1 lj
2.1377 293.943 mo
110.982 293.943 li
110.982 343.442 li
2.1377 343.442 li
2.1377 293.943 li
cp
.746 .676 .668 .898 cmyk
@
grestore
24.4243 307.165 mo
24.4243 306.862 24.1108 306.862 24.0464 306.862 cv
23.8735 306.862 23.7656 306.884 23.6899 307.101 cv
23.625 307.24 23.4199 307.748 22.6206 307.748 cv
21.7026 307.748 20.9253 306.992 20.9253 306.01 cv
20.9253 305.491 21.2275 304.249 22.6855 304.249 cv
22.9121 304.249 23.3335 304.249 23.3335 304.346 cv
23.3442 304.724 23.5493 304.875 23.8086 304.875 cv
24.0679 304.875 24.2944 304.692 24.2944 304.379 cv
24.2944 303.59 23.1714 303.59 22.6855 303.59 cv
20.8276 303.59 20.1797 305.059 20.1797 306.01 cv
20.1797 307.306 21.1948 308.407 22.5557 308.407 cv
24.0571 308.407 24.4243 307.349 24.4243 307.165 cv
cp
0 0 0 1 cmyk
f
30.105 306.01 mo
30.105 304.66 29.1006 303.59 27.8911 303.59 cv
26.6816 303.59 25.6772 304.66 25.6772 306.01 cv
25.6772 307.381 26.7031 308.407 27.8911 308.407 cv
29.0791 308.407 30.105 307.37 30.105 306.01 cv
cp
29.3599 305.934 mo
29.3599 306.938 28.6904 307.748 27.8911 307.748 cv
27.0918 307.748 26.4224 306.938 26.4224 305.934 cv
26.4224 304.951 27.124 304.249 27.8911 304.249 cv
28.6685 304.249 29.3599 304.951 29.3599 305.934 cv
cp
f
36.3042 308.019 mo
36.3042 307.684 36.0776 307.684 35.6885 307.684 cv
35.6885 305.07 li
35.6885 304.854 35.6885 303.623 34.7275 303.623 cv
34.4033 303.623 33.9604 303.763 33.6582 304.184 cv
33.4961 303.817 33.1938 303.623 32.8374 303.623 cv
32.4917 303.623 32.168 303.774 31.9087 304.012 cv
31.8872 303.688 31.6709 303.688 31.4766 303.688 cv
31.1309 303.688 li
30.9692 303.688 30.688 303.688 30.688 304.012 cv
30.688 304.346 30.915 304.346 31.3037 304.346 cv
31.3037 307.684 li
30.915 307.684 30.688 307.684 30.688 308.019 cv
30.688 308.343 30.98 308.343 31.1309 308.343 cv
32.0815 308.343 li
32.2437 308.343 32.5244 308.343 32.5244 308.019 cv
32.5244 307.684 32.2974 307.684 31.9087 307.684 cv
31.9087 305.75 li
31.9087 304.789 32.3516 304.281 32.7944 304.281 cv
33.0425 304.281 33.1938 304.465 33.1938 305.167 cv
33.1938 307.684 li
32.9888 307.684 32.7188 307.684 32.7188 308.019 cv
32.7188 308.343 33.0103 308.343 33.1616 308.343 cv
33.9712 308.343 li
34.1333 308.343 34.4141 308.343 34.4141 308.019 cv
34.4141 307.684 34.1875 307.684 33.7988 307.684 cv
33.7988 305.75 li
33.7988 304.789 34.2417 304.281 34.6841 304.281 cv
34.9326 304.281 35.084 304.465 35.084 305.167 cv
35.084 307.684 li
34.8784 307.684 34.6089 307.684 34.6089 308.019 cv
34.6089 308.343 34.9004 308.343 35.0513 308.343 cv
35.8613 308.343 li
36.0234 308.343 36.3042 308.343 36.3042 308.019 cv
cp
f
41.6719 306.01 mo
41.6719 304.681 40.7104 303.623 39.5659 303.623 cv
39.0474 303.623 38.5615 303.817 38.1943 304.152 cv
38.1943 303.839 38.1729 303.688 37.7622 303.688 cv
36.9736 303.688 li
36.8013 303.688 36.5313 303.688 36.5313 304.022 cv
36.5313 304.346 36.812 304.346 36.9629 304.346 cv
37.4492 304.346 li
37.4492 310.081 li
36.9736 310.081 li
36.8013 310.081 36.5313 310.081 36.5313 310.416 cv
36.5313 310.74 36.812 310.74 36.9629 310.74 cv
38.6802 310.74 li
38.8315 310.74 39.1123 310.74 39.1123 310.416 cv
39.1123 310.081 38.8423 310.081 38.6694 310.081 cv
38.1943 310.081 li
38.1943 307.856 li
38.6372 308.31 39.1016 308.407 39.4473 308.407 cv
40.624 308.407 41.6719 307.381 41.6719 306.01 cv
cp
40.9268 306.01 mo
40.9268 307.046 40.1704 307.748 39.4146 307.748 cv
38.5723 307.748 38.1943 306.798 38.1943 306.279 cv
38.1943 305.491 li
38.1943 304.854 38.8208 304.281 39.501 304.281 cv
40.3003 304.281 40.9268 305.07 40.9268 306.01 cv
cp
f
47.6011 308.008 mo
47.6011 307.684 47.3203 307.684 47.1689 307.684 cv
46.6831 307.684 li
46.6831 304.13 li
46.6831 303.795 46.6182 303.688 46.251 303.688 cv
45.4624 303.688 li
45.29 303.688 45.02 303.688 45.02 304.022 cv
45.02 304.346 45.3008 304.346 45.4517 304.346 cv
45.938 304.346 li
45.938 306.646 li
45.938 307.619 45.063 307.748 44.7173 307.748 cv
43.8643 307.748 43.8643 307.392 43.8643 307.046 cv
43.8643 304.13 li
43.8643 303.795 43.7993 303.688 43.4321 303.688 cv
42.644 303.688 li
42.4712 303.688 42.2012 303.688 42.2012 304.022 cv
42.2012 304.346 42.4819 304.346 42.6333 304.346 cv
43.1191 304.346 li
43.1191 307.111 li
43.1191 308.147 43.8643 308.407 44.6528 308.407 cv
45.0952 308.407 45.5381 308.299 45.938 307.997 cv
45.9487 308.343 46.1753 308.343 46.3696 308.343 cv
47.1582 308.343 li
47.3311 308.343 47.6011 308.343 47.6011 308.008 cv
cp
f
52.5908 306.981 mo
52.5908 306.787 52.5908 306.561 52.2124 306.561 cv
51.8564 306.561 51.8452 306.787 51.8452 306.971 cv
51.8345 307.641 51.2192 307.748 50.9707 307.748 cv
50.1392 307.748 50.1392 307.187 50.1392 306.917 cv
50.1392 304.346 li
51.9102 304.346 li
52.0723 304.346 52.3423 304.346 52.3423 304.022 cv
52.3423 303.688 52.083 303.688 51.9102 303.688 cv
50.1392 303.688 li
50.1392 302.802 li
50.1392 302.597 50.1392 302.359 49.772 302.359 cv
49.394 302.359 49.394 302.586 49.394 302.802 cv
49.394 303.688 li
48.4541 303.688 li
48.2813 303.688 48.0112 303.688 48.0112 304.022 cv
48.0112 304.346 48.2813 304.346 48.4434 304.346 cv
49.394 304.346 li
49.394 306.981 li
49.394 308.019 50.1284 308.407 50.9165 308.407 cv
51.7158 308.407 52.5908 307.942 52.5908 306.981 cv
cp
f
59.0166 308.008 mo
59.0166 307.684 58.7466 307.684 58.5845 307.684 cv
58.1309 307.684 58.0229 307.63 57.9365 307.597 cv
57.9365 305.264 li
57.9365 304.498 57.3535 303.59 55.7983 303.59 cv
55.334 303.59 54.2324 303.59 54.2324 304.379 cv
54.2324 304.703 54.459 304.875 54.7183 304.875 cv
54.8804 304.875 55.1826 304.778 55.1934 304.379 cv
55.1934 304.292 55.2041 304.281 55.4204 304.26 cv
55.5713 304.249 55.7119 304.249 55.8091 304.249 cv
56.6299 304.249 57.1914 304.584 57.1914 305.351 cv
55.2798 305.383 53.9517 305.923 53.9517 306.96 cv
53.9517 307.705 54.6318 308.407 55.7334 308.407 cv
56.1333 308.407 56.8027 308.331 57.3101 307.997 cv
57.5479 308.331 58.0664 308.343 58.4766 308.343 cv
58.7788 308.343 59.0166 308.343 59.0166 308.008 cv
cp
57.1914 306.896 mo
57.1914 307.144 57.1914 307.37 56.77 307.564 cv
56.3813 307.748 55.8955 307.748 55.8091 307.748 cv
55.1396 307.748 54.6968 307.381 54.6968 306.96 cv
54.6968 306.431 55.6255 306.031 57.1914 305.988 cv
57.1914 306.896 li
cp
f
63.9307 306.981 mo
63.9307 306.787 63.9307 306.561 63.5527 306.561 cv
63.1963 306.561 63.1855 306.787 63.1855 306.971 cv
63.1748 307.641 62.5591 307.748 62.3105 307.748 cv
61.479 307.748 61.479 307.187 61.479 306.917 cv
61.479 304.346 li
63.2505 304.346 li
63.4121 304.346 63.6821 304.346 63.6821 304.022 cv
63.6821 303.688 63.4229 303.688 63.2505 303.688 cv
61.479 303.688 li
61.479 302.802 li
61.479 302.597 61.479 302.359 61.1118 302.359 cv
60.7339 302.359 60.7339 302.586 60.7339 302.802 cv
60.7339 303.688 li
59.7944 303.688 li
59.6216 303.688 59.3516 303.688 59.3516 304.022 cv
59.3516 304.346 59.6216 304.346 59.7837 304.346 cv
60.7339 304.346 li
60.7339 306.981 li
60.7339 308.019 61.4683 308.407 62.2568 308.407 cv
63.0557 308.407 63.9307 307.942 63.9307 306.981 cv
cp
f
69.6763 308.019 mo
69.6763 307.684 69.395 307.684 69.2339 307.684 cv
68.0884 307.684 li
68.0884 304.13 li
68.0884 303.795 68.0239 303.688 67.6567 303.688 cv
66.1343 303.688 li
65.9722 303.688 65.6909 303.688 65.6909 304.012 cv
65.6909 304.346 65.9722 304.346 66.1343 304.346 cv
67.3433 304.346 li
67.3433 307.684 li
66.0474 307.684 li
65.8745 307.684 65.605 307.684 65.605 308.019 cv
65.605 308.343 65.8853 308.343 66.0474 308.343 cv
69.2339 308.343 li
69.395 308.343 69.6763 308.343 69.6763 308.019 cv
cp
68.1431 302.348 mo
68.1431 302.046 67.8999 301.808 67.5923 301.808 cv
67.2954 301.808 67.063 302.046 67.063 302.348 cv
67.063 302.651 67.2954 302.888 67.5923 302.888 cv
67.8999 302.888 68.1431 302.651 68.1431 302.348 cv
cp
f
75.4653 306.01 mo
75.4653 304.66 74.4604 303.59 73.2515 303.59 cv
72.0415 303.59 71.0366 304.66 71.0366 306.01 cv
71.0366 307.381 72.063 308.407 73.2515 308.407 cv
74.439 308.407 75.4653 307.37 75.4653 306.01 cv
cp
74.7202 305.934 mo
74.7202 306.938 74.0503 307.748 73.2515 307.748 cv
72.4517 307.748 71.7827 306.938 71.7827 305.934 cv
71.7827 304.951 72.4839 304.249 73.2515 304.249 cv
74.0288 304.249 74.7202 304.951 74.7202 305.934 cv
cp
f
81.6206 308.019 mo
81.6206 307.684 81.3511 307.684 81.1782 307.684 cv
80.7026 307.684 li
80.7026 305.178 li
80.7026 304.087 80.1519 303.623 79.2993 303.623 cv
78.5757 303.623 78.0894 303.99 77.8843 304.195 cv
77.8843 303.85 77.8843 303.688 77.4526 303.688 cv
76.6636 303.688 li
76.4907 303.688 76.2212 303.688 76.2212 304.022 cv
76.2212 304.346 76.5015 304.346 76.6528 304.346 cv
77.1392 304.346 li
77.1392 307.684 li
76.6636 307.684 li
76.4907 307.684 76.2212 307.684 76.2212 308.019 cv
76.2212 308.343 76.5015 308.343 76.6528 308.343 cv
78.3706 308.343 li
78.521 308.343 78.8022 308.343 78.8022 308.019 cv
78.8022 307.684 78.5327 307.684 78.3599 307.684 cv
77.8843 307.684 li
77.8843 305.772 li
77.8843 304.692 78.6831 304.281 79.2339 304.281 cv
79.8062 304.281 79.9575 304.584 79.9575 305.232 cv
79.9575 307.684 li
79.5366 307.684 li
79.3638 307.684 79.0942 307.684 79.0942 308.019 cv
79.0942 308.343 79.3853 308.343 79.5366 308.343 cv
81.189 308.343 li
81.3403 308.343 81.6206 308.343 81.6206 308.019 cv
cp
f
92.4751 306.01 mo
92.4751 304.66 91.4702 303.59 90.2612 303.59 cv
89.0513 303.59 88.0474 304.66 88.0474 306.01 cv
88.0474 307.381 89.0728 308.407 90.2612 308.407 cv
91.4487 308.407 92.4751 307.37 92.4751 306.01 cv
cp
91.73 305.934 mo
91.73 306.938 91.0601 307.748 90.2612 307.748 cv
89.4614 307.748 88.7925 306.938 88.7925 305.934 cv
88.7925 304.951 89.4946 304.249 90.2612 304.249 cv
91.0386 304.249 91.73 304.951 91.73 305.934 cv
cp
f
98.6313 308.019 mo
98.6313 307.684 98.3608 307.684 98.188 307.684 cv
97.7134 307.684 li
97.7134 305.178 li
97.7134 304.087 97.1626 303.623 96.3091 303.623 cv
95.5854 303.623 95.0991 303.99 94.894 304.195 cv
94.894 303.85 94.894 303.688 94.4624 303.688 cv
93.6733 303.688 li
93.5015 303.688 93.231 303.688 93.231 304.022 cv
93.231 304.346 93.5122 304.346 93.6626 304.346 cv
94.1489 304.346 li
94.1489 307.684 li
93.6733 307.684 li
93.5015 307.684 93.231 307.684 93.231 308.019 cv
93.231 308.343 93.5122 308.343 93.6626 308.343 cv
95.3804 308.343 li
95.5317 308.343 95.812 308.343 95.812 308.019 cv
95.812 307.684 95.5425 307.684 95.3696 307.684 cv
94.894 307.684 li
94.894 305.772 li
94.894 304.692 95.6938 304.281 96.2446 304.281 cv
96.8169 304.281 96.9683 304.584 96.9683 305.232 cv
96.9683 307.684 li
96.5464 307.684 li
96.3735 307.684 96.104 307.684 96.104 308.019 cv
96.104 308.343 96.395 308.343 96.5464 308.343 cv
98.1987 308.343 li
98.3501 308.343 98.6313 308.343 98.6313 308.019 cv
cp
f
13.1597 319.51 mo
13.1597 318.181 12.1987 317.123 11.0537 317.123 cv
10.5356 317.123 10.0493 317.317 9.68213 317.652 cv
9.68213 317.339 9.66064 317.188 9.25049 317.188 cv
8.46191 317.188 li
8.28906 317.188 8.01904 317.188 8.01904 317.522 cv
8.01904 317.847 8.2998 317.847 8.45117 317.847 cv
8.93701 317.847 li
8.93701 323.581 li
8.46191 323.581 li
8.28906 323.581 8.01904 323.581 8.01904 323.916 cv
8.01904 324.24 8.2998 324.24 8.45117 324.24 cv
10.1685 324.24 li
10.3193 324.24 10.6001 324.24 10.6001 323.916 cv
10.6001 323.581 10.3301 323.581 10.1572 323.581 cv
9.68213 323.581 li
9.68213 321.356 li
10.125 321.81 10.5894 321.907 10.9351 321.907 cv
12.1123 321.907 13.1597 320.881 13.1597 319.51 cv
cp
12.4146 319.51 mo
12.4146 320.546 11.6587 321.248 10.9028 321.248 cv
10.0601 321.248 9.68213 320.298 9.68213 319.779 cv
9.68213 318.991 li
9.68213 318.354 10.3086 317.781 10.9893 317.781 cv
11.7881 317.781 12.4146 318.57 12.4146 319.51 cv
cp
f
18.8188 317.792 mo
18.8188 317.576 18.6895 317.123 17.793 317.123 cv
17.2422 317.123 16.5513 317.317 15.957 317.997 cv
15.957 317.63 li
15.957 317.296 15.8921 317.188 15.5249 317.188 cv
14.3369 317.188 li
14.1753 317.188 13.9053 317.188 13.9053 317.512 cv
13.9053 317.847 14.1641 317.847 14.3369 317.847 cv
15.2119 317.847 li
15.2119 321.184 li
14.3369 321.184 li
14.1753 321.184 13.9053 321.184 13.9053 321.508 cv
13.9053 321.843 14.1641 321.843 14.3369 321.843 cv
17.1558 321.843 li
17.3179 321.843 17.5986 321.843 17.5986 321.519 cv
17.5986 321.184 17.3179 321.184 17.1558 321.184 cv
15.957 321.184 li
15.957 319.833 li
15.957 318.818 16.5942 317.781 17.9009 317.781 cv
17.9116 318.041 18.0952 318.257 18.3652 318.257 cv
18.603 318.257 18.8188 318.084 18.8188 317.792 cv
cp
f
24.2729 319.51 mo
24.2729 318.159 23.2686 317.09 22.0591 317.09 cv
20.8496 317.09 19.8452 318.159 19.8452 319.51 cv
19.8452 320.881 20.8711 321.907 22.0591 321.907 cv
23.2471 321.907 24.2729 320.87 24.2729 319.51 cv
cp
23.5278 319.434 mo
23.5278 320.438 22.8584 321.248 22.0591 321.248 cv
21.2598 321.248 20.5903 320.438 20.5903 319.434 cv
20.5903 318.451 21.2925 317.749 22.0591 317.749 cv
22.8364 317.749 23.5278 318.451 23.5278 319.434 cv
cp
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
30.2344 320.665 mo
30.2344 320.362 29.9209 320.362 29.8564 320.362 cv
29.6836 320.362 29.5757 320.384 29.5 320.601 cv
29.4351 320.74 29.23 321.248 28.4307 321.248 cv
27.5127 321.248 26.7349 320.492 26.7349 319.51 cv
26.7349 318.991 27.0376 317.749 28.4956 317.749 cv
28.7222 317.749 29.1436 317.749 29.1436 317.847 cv
29.1543 318.225 29.3594 318.376 29.6187 318.376 cv
29.8779 318.376 30.1045 318.192 30.1045 317.879 cv
30.1045 317.09 28.9814 317.09 28.4956 317.09 cv
26.6377 317.09 25.9897 318.56 25.9897 319.51 cv
25.9897 320.806 27.0049 321.907 28.3657 321.907 cv
29.8672 321.907 30.2344 320.849 30.2344 320.665 cv
cp
f
35.8828 320.665 mo
35.8828 320.362 35.5693 320.362 35.5049 320.362 cv
35.3101 320.362 35.2241 320.396 35.1484 320.601 cv
34.9106 321.151 34.3276 321.248 34.0249 321.248 cv
33.2153 321.248 32.4053 320.708 32.2324 319.779 cv
35.4507 319.779 li
35.6772 319.779 35.8828 319.779 35.8828 319.38 cv
35.8828 318.148 35.1914 317.09 33.7876 317.09 cv
32.5024 317.09 31.4653 318.17 31.4653 319.499 cv
31.4653 320.816 32.5562 321.907 33.9497 321.907 cv
35.375 321.907 35.8828 320.936 35.8828 320.665 cv
cp
35.1157 319.132 mo
32.2432 319.132 li
32.394 318.343 33.0317 317.749 33.7876 317.749 cv
34.3491 317.749 35.0186 318.02 35.1157 319.132 cv
cp
f
41.4985 320.492 mo
41.4985 319.369 40.1055 319.143 39.7598 319.088 cv
39.0254 318.959 li
38.7124 318.915 37.978 318.786 37.978 318.364 cv
37.978 318.084 38.3237 317.749 39.3496 317.749 cv
40.2461 317.749 40.397 318.073 40.4297 318.354 cv
40.4404 318.537 40.4619 318.721 40.7969 318.721 cv
41.1748 318.721 41.1748 318.494 41.1748 318.278 cv
41.1748 317.533 li
41.1748 317.36 41.1748 317.09 40.8506 317.09 cv
40.5913 317.09 40.5483 317.241 40.5269 317.317 cv
40.0513 317.09 39.5762 317.09 39.3711 317.09 cv
37.5674 317.09 37.3188 317.976 37.3188 318.364 cv
37.3188 319.358 38.4531 319.542 39.4468 319.693 cv
39.9761 319.779 40.8398 319.92 40.8398 320.492 cv
40.8398 320.892 40.4404 321.248 39.4575 321.248 cv
38.9497 321.248 38.3452 321.13 38.0752 320.287 cv
38.021 320.093 37.978 319.974 37.6973 319.974 cv
37.3188 319.974 37.3188 320.2 37.3188 320.417 cv
37.3188 321.464 li
37.3188 321.637 37.3188 321.907 37.6431 321.907 cv
37.7402 321.907 37.9131 321.896 38.0425 321.497 cv
38.5718 321.886 39.144 321.907 39.4468 321.907 cv
41.1528 321.907 41.4985 321.011 41.4985 320.492 cv
cp
f
47.1685 320.492 mo
47.1685 319.369 45.7754 319.143 45.4297 319.088 cv
44.6953 318.959 li
44.3823 318.915 43.6479 318.786 43.6479 318.364 cv
43.6479 318.084 43.9937 317.749 45.0195 317.749 cv
45.916 317.749 46.0669 318.073 46.0996 318.354 cv
46.1104 318.537 46.1318 318.721 46.4668 318.721 cv
46.8447 318.721 46.8447 318.494 46.8447 318.278 cv
46.8447 317.533 li
46.8447 317.36 46.8447 317.09 46.5205 317.09 cv
46.2612 317.09 46.2183 317.241 46.1968 317.317 cv
45.7217 317.09 45.2461 317.09 45.041 317.09 cv
43.2373 317.09 42.9893 317.976 42.9893 318.364 cv
42.9893 319.358 44.123 319.542 45.1167 319.693 cv
45.646 319.779 46.5098 319.92 46.5098 320.492 cv
46.5098 320.892 46.1104 321.248 45.1274 321.248 cv
44.6196 321.248 44.0151 321.13 43.7451 320.287 cv
43.6909 320.093 43.6479 319.974 43.3672 319.974 cv
42.9893 319.974 42.9893 320.2 42.9893 320.417 cv
42.9893 321.464 li
42.9893 321.637 42.9893 321.907 43.313 321.907 cv
43.4102 321.907 43.583 321.896 43.7129 321.497 cv
44.2417 321.886 44.8145 321.907 45.1167 321.907 cv
46.8232 321.907 47.1685 321.011 47.1685 320.492 cv
cp
f
52.9253 319.51 mo
52.9253 318.159 51.9209 317.09 50.7109 317.09 cv
49.5015 317.09 48.4971 318.159 48.4971 319.51 cv
48.4971 320.881 49.5229 321.907 50.7109 321.907 cv
51.8989 321.907 52.9253 320.87 52.9253 319.51 cv
cp
52.1797 319.434 mo
52.1797 320.438 51.5103 321.248 50.7109 321.248 cv
49.9121 321.248 49.2422 320.438 49.2422 319.434 cv
49.2422 318.451 49.9443 317.749 50.7109 317.749 cv
51.4888 317.749 52.1797 318.451 52.1797 319.434 cv
cp
f
58.811 317.792 mo
58.811 317.576 58.6816 317.123 57.7852 317.123 cv
57.2344 317.123 56.543 317.317 55.9492 317.997 cv
55.9492 317.63 li
55.9492 317.296 55.8843 317.188 55.5171 317.188 cv
54.3291 317.188 li
54.167 317.188 53.897 317.188 53.897 317.512 cv
53.897 317.847 54.1563 317.847 54.3291 317.847 cv
55.2041 317.847 li
55.2041 321.184 li
54.3291 321.184 li
54.167 321.184 53.897 321.184 53.897 321.508 cv
53.897 321.843 54.1563 321.843 54.3291 321.843 cv
57.1479 321.843 li
57.3101 321.843 57.5908 321.843 57.5908 321.519 cv
57.5908 321.184 57.3101 321.184 57.1479 321.184 cv
55.9492 321.184 li
55.9492 319.833 li
55.9492 318.818 56.5864 317.781 57.8931 317.781 cv
57.9038 318.041 58.0874 318.257 58.3574 318.257 cv
58.5952 318.257 58.811 318.084 58.811 317.792 cv
cp
f
70.1401 318.537 mo
70.1401 318.159 69.7622 318.159 69.6323 318.159 cv
68.0991 318.159 li
68.0991 316.615 li
68.0991 316.485 68.0991 316.107 67.7212 316.107 cv
67.3433 316.107 67.3433 316.485 67.3433 316.615 cv
67.3433 318.159 li
65.8091 318.159 li
65.6802 318.159 65.3022 318.159 65.3022 318.537 cv
65.3022 318.915 65.6802 318.915 65.8091 318.915 cv
67.3433 318.915 li
67.3433 320.46 li
67.3433 320.59 67.3433 320.968 67.7212 320.968 cv
68.0991 320.968 68.0991 320.59 68.0991 320.46 cv
68.0991 318.915 li
69.6323 318.915 li
69.7622 318.915 70.1401 318.915 70.1401 318.537 cv
cp
f
81.8042 321.519 mo
81.8042 321.184 81.5776 321.184 81.189 321.184 cv
81.189 318.57 li
81.189 318.354 81.189 317.123 80.2271 317.123 cv
79.9038 317.123 79.4604 317.263 79.1587 317.685 cv
78.9966 317.317 78.6938 317.123 78.3374 317.123 cv
77.9917 317.123 77.6675 317.273 77.4087 317.512 cv
77.3872 317.188 77.1714 317.188 76.9771 317.188 cv
76.6313 317.188 li
76.4692 317.188 76.188 317.188 76.188 317.512 cv
76.188 317.847 76.4155 317.847 76.8042 317.847 cv
76.8042 321.184 li
76.4155 321.184 76.188 321.184 76.188 321.519 cv
76.188 321.843 76.48 321.843 76.6313 321.843 cv
77.5815 321.843 li
77.7437 321.843 78.0239 321.843 78.0239 321.519 cv
78.0239 321.184 77.7974 321.184 77.4087 321.184 cv
77.4087 319.25 li
77.4087 318.289 77.8511 317.781 78.2944 317.781 cv
78.5425 317.781 78.6938 317.965 78.6938 318.667 cv
78.6938 321.184 li
78.4888 321.184 78.2183 321.184 78.2183 321.519 cv
78.2183 321.843 78.5103 321.843 78.6616 321.843 cv
79.4712 321.843 li
79.6333 321.843 79.9146 321.843 79.9146 321.519 cv
79.9146 321.184 79.687 321.184 79.2983 321.184 cv
79.2983 319.25 li
79.2983 318.289 79.7417 317.781 80.1841 317.781 cv
80.4331 317.781 80.5835 317.965 80.5835 318.667 cv
80.5835 321.184 li
80.3784 321.184 80.1089 321.184 80.1089 321.519 cv
80.1089 321.843 80.3999 321.843 80.5513 321.843 cv
81.3618 321.843 li
81.5239 321.843 81.8042 321.843 81.8042 321.519 cv
cp
f
86.9126 320.665 mo
86.9126 320.362 86.5991 320.362 86.5347 320.362 cv
86.3403 320.362 86.2534 320.396 86.1782 320.601 cv
85.9409 321.151 85.3579 321.248 85.0552 321.248 cv
84.2446 321.248 83.4351 320.708 83.2622 319.779 cv
86.481 319.779 li
86.7075 319.779 86.9126 319.779 86.9126 319.38 cv
86.9126 318.148 86.2212 317.09 84.8179 317.09 cv
83.5327 317.09 82.4956 318.17 82.4956 319.499 cv
82.4956 320.816 83.5864 321.907 84.98 321.907 cv
86.4048 321.907 86.9126 320.936 86.9126 320.665 cv
cp
86.146 319.132 mo
83.2729 319.132 li
83.4243 318.343 84.061 317.749 84.8179 317.749 cv
85.3794 317.749 86.0483 318.02 86.146 319.132 cv
cp
f
93.144 321.519 mo
93.144 321.184 92.9175 321.184 92.5288 321.184 cv
92.5288 318.57 li
92.5288 318.354 92.5288 317.123 91.5679 317.123 cv
91.2437 317.123 90.8003 317.263 90.4985 317.685 cv
90.3364 317.317 90.0337 317.123 89.6772 317.123 cv
89.3315 317.123 89.0083 317.273 88.7485 317.512 cv
88.7271 317.188 88.5112 317.188 88.3169 317.188 cv
87.9712 317.188 li
87.8091 317.188 87.5278 317.188 87.5278 317.512 cv
87.5278 317.847 87.7554 317.847 88.144 317.847 cv
88.144 321.184 li
87.7554 321.184 87.5278 321.184 87.5278 321.519 cv
87.5278 321.843 87.8198 321.843 87.9712 321.843 cv
88.9214 321.843 li
89.0835 321.843 89.3647 321.843 89.3647 321.519 cv
89.3647 321.184 89.1372 321.184 88.7485 321.184 cv
88.7485 319.25 li
88.7485 318.289 89.1919 317.781 89.6343 317.781 cv
89.8823 317.781 90.0337 317.965 90.0337 318.667 cv
90.0337 321.184 li
89.8286 321.184 89.5591 321.184 89.5591 321.519 cv
89.5591 321.843 89.8501 321.843 90.0015 321.843 cv
90.811 321.843 li
90.9731 321.843 91.2544 321.843 91.2544 321.519 cv
91.2544 321.184 91.0278 321.184 90.6382 321.184 cv
90.6382 319.25 li
90.6382 318.289 91.0815 317.781 91.5239 317.781 cv
91.7729 317.781 91.9243 317.965 91.9243 318.667 cv
91.9243 321.184 li
91.7183 321.184 91.4487 321.184 91.4487 321.519 cv
91.4487 321.843 91.7407 321.843 91.8911 321.843 cv
92.7017 321.843 li
92.8638 321.843 93.144 321.843 93.144 321.519 cv
cp
f
98.2847 319.51 mo
98.2847 318.159 97.2808 317.09 96.0708 317.09 cv
94.8618 317.09 93.8569 318.159 93.8569 319.51 cv
93.8569 320.881 94.8833 321.907 96.0708 321.907 cv
97.2593 321.907 98.2847 320.87 98.2847 319.51 cv
cp
97.5396 319.434 mo
97.5396 320.438 96.8706 321.248 96.0708 321.248 cv
95.272 321.248 94.6021 320.438 94.6021 319.434 cv
94.6021 318.451 95.3042 317.749 96.0708 317.749 cv
96.8491 317.749 97.5396 318.451 97.5396 319.434 cv
cp
f
104.171 317.792 mo
104.171 317.576 104.042 317.123 103.145 317.123 cv
102.594 317.123 101.903 317.317 101.309 317.997 cv
101.309 317.63 li
101.309 317.296 101.245 317.188 100.877 317.188 cv
99.689 317.188 li
99.5269 317.188 99.2573 317.188 99.2573 317.512 cv
99.2573 317.847 99.5161 317.847 99.689 317.847 cv
100.564 317.847 li
100.564 321.184 li
99.689 321.184 li
99.5269 321.184 99.2573 321.184 99.2573 321.508 cv
99.2573 321.843 99.5161 321.843 99.689 321.843 cv
102.508 321.843 li
102.669 321.843 102.951 321.843 102.951 321.519 cv
102.951 321.184 102.669 321.184 102.508 321.184 cv
101.309 321.184 li
101.309 319.833 li
101.309 318.818 101.947 317.781 103.253 317.781 cv
103.264 318.041 103.448 318.257 103.717 318.257 cv
103.955 318.257 104.171 318.084 104.171 317.792 cv
cp
f
109.982 317.522 mo
109.982 317.188 109.722 317.188 109.549 317.188 cv
108.286 317.188 li
108.124 317.188 107.854 317.188 107.854 317.512 cv
107.854 317.847 108.113 317.847 108.286 317.847 cv
108.588 317.847 li
107.811 320.142 li
107.67 320.541 107.605 320.734 107.53 321.068 cv
107.519 321.068 li
107.465 320.864 107.368 320.638 107.292 320.433 cv
106.288 317.847 li
106.558 317.847 li
106.72 317.847 106.99 317.847 106.99 317.522 cv
106.99 317.188 106.731 317.188 106.558 317.188 cv
105.294 317.188 li
105.122 317.188 104.862 317.188 104.862 317.522 cv
104.862 317.847 105.142 317.847 105.302 317.847 cv
105.632 317.847 li
107.163 321.693 li
107.206 321.802 107.206 321.834 107.206 321.834 cv
107.206 321.834 106.936 322.745 106.795 323.017 cv
106.482 323.613 106.093 323.635 105.931 323.646 cv
105.931 323.646 105.986 323.547 105.986 323.404 cv
105.986 323.131 105.793 322.933 105.526 322.933 cv
105.238 322.933 105.057 323.131 105.057 323.415 cv
105.057 323.865 105.419 324.294 105.942 324.294 cv
107.022 324.294 107.508 322.871 107.551 322.752 cv
109.225 317.847 li
109.549 317.847 li
109.711 317.847 109.982 317.847 109.982 317.522 cv
cp
f
grestore
16.4214 335.008 mo
16.4214 334.684 16.1401 334.684 15.9893 334.684 cv
15.5034 334.684 li
15.5034 331.13 li
15.5034 330.796 15.4385 330.688 15.0713 330.688 cv
14.2827 330.688 li
14.1099 330.688 13.8398 330.688 13.8398 331.022 cv
13.8398 331.347 14.1206 331.347 14.272 331.347 cv
14.7578 331.347 li
14.7578 333.646 li
14.7578 334.619 13.8833 334.748 13.5376 334.748 cv
12.6846 334.748 12.6846 334.392 12.6846 334.046 cv
12.6846 331.13 li
12.6846 330.796 12.6196 330.688 12.2524 330.688 cv
11.4639 330.688 li
11.291 330.688 11.021 330.688 11.021 331.022 cv
11.021 331.347 11.3018 331.347 11.4531 331.347 cv
11.939 331.347 li
11.939 334.111 li
11.939 335.147 12.6846 335.407 13.4727 335.407 cv
13.9155 335.407 14.3584 335.299 14.7578 334.997 cv
14.7686 335.343 14.9956 335.343 15.1899 335.343 cv
15.9785 335.343 li
16.1514 335.343 16.4214 335.343 16.4214 335.008 cv
cp
f
21.5186 333.992 mo
21.5186 332.869 20.1255 332.643 19.7798 332.588 cv
19.0454 332.459 li
18.7324 332.415 17.998 332.286 17.998 331.864 cv
17.998 331.584 18.3438 331.249 19.3696 331.249 cv
20.2661 331.249 20.417 331.573 20.4497 331.854 cv
20.4604 332.037 20.4819 332.221 20.8169 332.221 cv
21.1948 332.221 21.1948 331.994 21.1948 331.778 cv
21.1948 331.033 li
21.1948 330.86 21.1948 330.59 20.8706 330.59 cv
20.6118 330.59 20.5684 330.741 20.5469 330.817 cv
20.0718 330.59 19.5962 330.59 19.3911 330.59 cv
17.5874 330.59 17.3394 331.476 17.3394 331.864 cv
17.3394 332.858 18.4731 333.042 19.4668 333.193 cv
19.9961 333.279 20.8599 333.42 20.8599 333.992 cv
20.8599 334.392 20.4604 334.748 19.4775 334.748 cv
18.9702 334.748 18.3652 334.63 18.0952 333.787 cv
18.041 333.593 17.998 333.474 17.7173 333.474 cv
17.3394 333.474 17.3394 333.7 17.3394 333.917 cv
17.3394 334.964 li
17.3394 335.137 17.3394 335.407 17.6631 335.407 cv
17.7603 335.407 17.9331 335.396 18.063 334.997 cv
18.5918 335.386 19.1646 335.407 19.4668 335.407 cv
21.1733 335.407 21.5186 334.511 21.5186 333.992 cv
cp
f
27.1563 335.019 mo
27.1563 334.684 26.8755 334.684 26.7134 334.684 cv
25.5688 334.684 li
25.5688 331.13 li
25.5688 330.796 25.5039 330.688 25.1367 330.688 cv
23.6138 330.688 li
23.4521 330.688 23.1714 330.688 23.1714 331.012 cv
23.1714 331.347 23.4521 331.347 23.6138 331.347 cv
24.8237 331.347 li
24.8237 334.684 li
23.5278 334.684 li
23.355 334.684 23.085 334.684 23.085 335.019 cv
23.085 335.343 23.3657 335.343 23.5278 335.343 cv
26.7134 335.343 li
26.8755 335.343 27.1563 335.343 27.1563 335.019 cv
cp
25.6226 329.349 mo
25.6226 329.046 25.3804 328.809 25.0718 328.809 cv
24.7759 328.809 24.543 329.046 24.543 329.349 cv
24.543 329.65 24.7759 329.889 25.0718 329.889 cv
25.3804 329.889 25.6226 329.65 25.6226 329.349 cv
cp
f
33.4312 335.019 mo
33.4312 334.684 33.1611 334.684 32.9883 334.684 cv
32.5132 334.684 li
32.5132 332.178 li
32.5132 331.087 31.9624 330.623 31.1094 330.623 cv
30.3857 330.623 29.8994 330.99 29.6943 331.195 cv
29.6943 330.85 29.6943 330.688 29.2622 330.688 cv
28.4741 330.688 li
28.3013 330.688 28.0313 330.688 28.0313 331.022 cv
28.0313 331.347 28.312 331.347 28.4634 331.347 cv
28.9492 331.347 li
28.9492 334.684 li
28.4741 334.684 li
28.3013 334.684 28.0313 334.684 28.0313 335.019 cv
28.0313 335.343 28.312 335.343 28.4634 335.343 cv
30.1802 335.343 li
30.3315 335.343 30.6123 335.343 30.6123 335.019 cv
30.6123 334.684 30.3423 334.684 30.1694 334.684 cv
29.6943 334.684 li
29.6943 332.771 li
29.6943 331.692 30.4937 331.281 31.0444 331.281 cv
31.6167 331.281 31.7681 331.584 31.7681 332.231 cv
31.7681 334.684 li
31.3467 334.684 li
31.1738 334.684 30.9038 334.684 30.9038 335.019 cv
30.9038 335.343 31.1958 335.343 31.3467 335.343 cv
32.999 335.343 li
33.1504 335.343 33.4312 335.343 33.4312 335.019 cv
cp
f
39.0688 331.152 mo
39.0688 330.903 38.8638 330.568 38.2803 330.568 cv
38.1616 330.568 37.6323 330.579 37.1357 330.946 cv
36.9629 330.828 36.585 330.623 36.0879 330.623 cv
35.0728 330.623 34.3062 331.433 34.3062 332.351 cv
34.3062 332.815 34.4897 333.172 34.6514 333.377 cv
34.5327 333.55 34.4355 333.787 34.4355 334.111 cv
34.4355 334.489 34.5869 334.759 34.6841 334.889 cv
33.8955 335.375 33.8955 336.109 33.8955 336.228 cv
33.8955 337.156 35.0249 337.815 36.4014 337.815 cv
37.7837 337.815 38.9175 337.146 38.9175 336.228 cv
38.9175 335.828 38.7231 335.288 38.1724 334.997 cv
38.0317 334.921 37.5786 334.684 36.6064 334.684 cv
35.8506 334.684 li
35.7642 334.684 35.6235 334.684 35.5371 334.662 cv
35.375 334.662 35.3105 334.662 35.1807 334.511 cv
35.062 334.359 35.0513 334.122 35.0513 334.122 cv
35.0513 334.079 35.0728 333.928 35.1157 333.819 cv
35.1484 333.841 35.5586 334.09 36.0879 334.09 cv
37.0815 334.09 37.8701 333.312 37.8701 332.351 cv
37.8701 332.026 37.7764 331.714 37.6001 331.411 cv
37.8228 331.281 38.0776 331.238 38.2153 331.228 cv
38.2803 331.52 38.5288 331.595 38.6367 331.595 cv
38.8203 331.595 39.0688 331.465 39.0688 331.152 cv
cp
37.1245 332.351 mo
37.1245 332.966 36.6494 333.441 36.0879 333.441 cv
35.5049 333.441 35.0513 332.934 35.0513 332.361 cv
35.0513 331.746 35.5264 331.271 36.0879 331.271 cv
36.6714 331.271 37.1245 331.778 37.1245 332.351 cv
cp
38.291 336.228 mo
38.291 336.703 37.481 337.167 36.4014 337.167 cv
35.3276 337.167 34.522 336.703 34.522 336.228 cv
34.522 336.033 34.6177 335.688 34.959 335.472 cv
35.2251 335.299 35.3213 335.299 36.1094 335.299 cv
37.0708 335.299 38.291 335.299 38.291 336.228 cv
cp
f
50.1172 333.539 mo
50.1172 332.794 49.5986 332.092 48.7241 331.887 cv
49.415 331.648 49.8901 331.087 49.8901 330.417 cv
49.8901 329.629 49.2314 328.743 48.0327 328.743 cv
45.5918 328.743 li
45.4409 328.743 45.1602 328.743 45.1602 329.067 cv
45.1602 329.402 45.4302 329.402 45.603 329.402 cv
45.8945 329.402 li
45.8945 334.684 li
45.603 334.684 li
45.4302 334.684 45.1602 334.684 45.1602 335.019 cv
45.1602 335.343 45.4409 335.343 45.5918 335.343 cv
48.2485 335.343 li
49.4692 335.343 50.1172 334.381 50.1172 333.539 cv
cp
49.145 330.429 mo
49.145 330.871 48.7993 331.584 47.752 331.584 cv
46.6396 331.584 li
46.6396 329.402 li
47.9897 329.402 li
48.9077 329.402 49.145 330.072 49.145 330.429 cv
cp
49.3721 333.517 mo
49.3721 334.046 48.9507 334.684 48.0112 334.684 cv
46.6396 334.684 li
46.6396 332.243 li
48.1299 332.243 li
49.0479 332.243 49.3721 333.031 49.3721 333.517 cv
cp
f
55.625 333.01 mo
55.625 331.659 54.6206 330.59 53.4111 330.59 cv
52.2017 330.59 51.1973 331.659 51.1973 333.01 cv
51.1973 334.381 52.2231 335.407 53.4111 335.407 cv
54.5991 335.407 55.625 334.37 55.625 333.01 cv
cp
54.8799 332.934 mo
54.8799 333.938 54.2104 334.748 53.4111 334.748 cv
52.6118 334.748 51.9424 333.938 51.9424 332.934 cv
51.9424 331.951 52.6445 331.249 53.4111 331.249 cv
54.189 331.249 54.8799 331.951 54.8799 332.934 cv
cp
f
gsave
0 345.6 mo
113.4 345.6 li
113.4 0 li
0 0 li
0 345.6 li
cp
clp
61.5864 333.01 mo
61.5864 331.659 60.582 330.59 59.3726 330.59 cv
58.1626 330.59 57.1582 331.659 57.1582 333.01 cv
57.1582 334.381 58.1846 335.407 59.3726 335.407 cv
60.5605 335.407 61.5864 334.37 61.5864 333.01 cv
cp
60.8413 332.934 mo
60.8413 333.938 60.1714 334.748 59.3726 334.748 cv
58.5732 334.748 57.9038 333.938 57.9038 332.934 cv
57.9038 331.951 58.6055 331.249 59.3726 331.249 cv
60.1499 331.249 60.8413 331.951 60.8413 332.934 cv
cp
f
67.2563 335.019 mo
67.2563 334.684 66.9976 334.684 66.8247 334.684 cv
65.4204 334.684 li
65.4204 329.187 li
65.4204 328.852 65.356 328.743 64.9888 328.743 cv
63.2822 328.743 li
63.1094 328.743 62.8394 328.743 62.8394 329.078 cv
62.8394 329.402 63.1201 329.402 63.271 329.402 cv
64.6753 329.402 li
64.6753 334.684 li
63.2822 334.684 li
63.1094 334.684 62.8394 334.684 62.8394 335.019 cv
62.8394 335.343 63.1201 335.343 63.271 335.343 cv
66.8247 335.343 li
66.9868 335.343 67.2563 335.343 67.2563 335.019 cv
cp
f
72.894 334.165 mo
72.894 333.862 72.5806 333.862 72.5161 333.862 cv
72.3218 333.862 72.2349 333.896 72.1597 334.101 cv
71.9224 334.651 71.3384 334.748 71.0366 334.748 cv
70.2261 334.748 69.4165 334.208 69.2437 333.279 cv
72.4624 333.279 li
72.689 333.279 72.894 333.279 72.894 332.88 cv
72.894 331.648 72.2026 330.59 70.7983 330.59 cv
69.5132 330.59 68.4771 331.67 68.4771 332.999 cv
68.4771 334.316 69.5679 335.407 70.9604 335.407 cv
72.3862 335.407 72.894 334.436 72.894 334.165 cv
cp
72.1274 332.632 mo
69.2544 332.632 li
69.4058 331.843 70.0425 331.249 70.7983 331.249 cv
71.3608 331.249 72.0298 331.52 72.1274 332.632 cv
cp
f
79.1577 335.008 mo
79.1577 334.684 78.8882 334.684 78.7261 334.684 cv
78.272 334.684 78.1646 334.63 78.0776 334.597 cv
78.0776 332.265 li
78.0776 331.497 77.4946 330.59 75.9399 330.59 cv
75.4751 330.59 74.3735 330.59 74.3735 331.379 cv
74.3735 331.703 74.6001 331.876 74.8599 331.876 cv
75.022 331.876 75.3237 331.778 75.3345 331.379 cv
75.3345 331.292 75.3452 331.281 75.562 331.26 cv
75.7124 331.249 75.853 331.249 75.9507 331.249 cv
76.771 331.249 77.3325 331.584 77.3325 332.351 cv
75.4214 332.383 74.0933 332.923 74.0933 333.96 cv
74.0933 334.705 74.7729 335.407 75.8745 335.407 cv
76.2749 335.407 76.9438 335.331 77.4517 334.997 cv
77.689 335.331 78.2075 335.343 78.6177 335.343 cv
78.9204 335.343 79.1577 335.343 79.1577 335.008 cv
cp
77.3325 333.896 mo
77.3325 334.144 77.3325 334.37 76.9116 334.564 cv
76.5229 334.748 76.0366 334.748 75.9507 334.748 cv
75.2808 334.748 74.8384 334.381 74.8384 333.96 cv
74.8384 333.431 75.7671 333.031 77.3325 332.988 cv
77.3325 333.896 li
cp
f
84.7524 335.019 mo
84.7524 334.684 84.4819 334.684 84.3101 334.684 cv
83.8345 334.684 li
83.8345 332.178 li
83.8345 331.087 83.2837 330.623 82.4302 330.623 cv
81.7065 330.623 81.2212 330.99 81.0151 331.195 cv
81.0151 330.85 81.0151 330.688 80.5835 330.688 cv
79.7954 330.688 li
79.6226 330.688 79.3521 330.688 79.3521 331.022 cv
79.3521 331.347 79.6333 331.347 79.7847 331.347 cv
80.27 331.347 li
80.27 334.684 li
79.7954 334.684 li
79.6226 334.684 79.3521 334.684 79.3521 335.019 cv
79.3521 335.343 79.6333 335.343 79.7847 335.343 cv
81.5015 335.343 li
81.6528 335.343 81.9341 335.343 81.9341 335.019 cv
81.9341 334.684 81.6636 334.684 81.4907 334.684 cv
81.0151 334.684 li
81.0151 332.771 li
81.0151 331.692 81.8149 331.281 82.3657 331.281 cv
82.938 331.281 83.0894 331.584 83.0894 332.231 cv
83.0894 334.684 li
82.6685 334.684 li
82.4956 334.684 82.2251 334.684 82.2251 335.019 cv
82.2251 335.343 82.5171 335.343 82.6685 335.343 cv
84.3208 335.343 li
84.4712 335.343 84.7524 335.343 84.7524 335.019 cv
cp
f
95.606 335.019 mo
95.606 334.684 95.3472 334.684 95.1743 334.684 cv
93.77 334.684 li
93.77 329.187 li
93.77 328.852 93.7056 328.743 93.3384 328.743 cv
91.6323 328.743 li
91.4595 328.743 91.189 328.743 91.189 329.078 cv
91.189 329.402 91.4702 329.402 91.6216 329.402 cv
93.0249 329.402 li
93.0249 334.684 li
91.6323 334.684 li
91.4595 334.684 91.189 334.684 91.189 335.019 cv
91.189 335.343 91.4702 335.343 91.6216 335.343 cv
95.1743 335.343 li
95.3364 335.343 95.606 335.343 95.606 335.019 cv
cp
f
101.277 333.01 mo
101.277 331.659 100.272 330.59 99.062 330.59 cv
97.853 330.59 96.8481 331.659 96.8481 333.01 cv
96.8481 334.381 97.8745 335.407 99.062 335.407 cv
100.25 335.407 101.277 334.37 101.277 333.01 cv
cp
100.531 332.934 mo
100.531 333.938 99.8618 334.748 99.062 334.748 cv
98.2632 334.748 97.5933 333.938 97.5933 332.934 cv
97.5933 331.951 98.2954 331.249 99.062 331.249 cv
99.8403 331.249 100.531 331.951 100.531 332.934 cv
cp
f
107.4 331.152 mo
107.4 330.903 107.195 330.568 106.612 330.568 cv
106.493 330.568 105.963 330.579 105.467 330.946 cv
105.294 330.828 104.916 330.623 104.419 330.623 cv
103.404 330.623 102.637 331.433 102.637 332.351 cv
102.637 332.815 102.821 333.172 102.983 333.377 cv
102.864 333.55 102.767 333.787 102.767 334.111 cv
102.767 334.489 102.918 334.759 103.015 334.889 cv
102.227 335.375 102.227 336.109 102.227 336.228 cv
102.227 337.156 103.356 337.815 104.732 337.815 cv
106.115 337.815 107.249 337.146 107.249 336.228 cv
107.249 335.828 107.054 335.288 106.503 334.997 cv
106.363 334.921 105.91 334.684 104.938 334.684 cv
104.181 334.684 li
104.095 334.684 103.955 334.684 103.869 334.662 cv
103.707 334.662 103.642 334.662 103.512 334.511 cv
103.393 334.359 103.382 334.122 103.382 334.122 cv
103.382 334.079 103.404 333.928 103.447 333.819 cv
103.48 333.841 103.89 334.09 104.419 334.09 cv
105.413 334.09 106.202 333.312 106.202 332.351 cv
106.202 332.026 106.108 331.714 105.931 331.411 cv
106.154 331.281 106.409 331.238 106.546 331.228 cv
106.612 331.52 106.86 331.595 106.968 331.595 cv
107.152 331.595 107.4 331.465 107.4 331.152 cv
cp
105.456 332.351 mo
105.456 332.966 104.981 333.441 104.419 333.441 cv
103.836 333.441 103.382 332.934 103.382 332.361 cv
103.382 331.746 103.858 331.271 104.419 331.271 cv
105.002 331.271 105.456 331.778 105.456 332.351 cv
cp
106.623 336.228 mo
106.623 336.703 105.812 337.167 104.732 337.167 cv
103.659 337.167 102.853 336.703 102.853 336.228 cv
102.853 336.033 102.949 335.688 103.291 335.472 cv
103.556 335.299 103.653 335.299 104.441 335.299 cv
105.402 335.299 106.623 335.299 106.623 336.228 cv
cp
f
112.498 335.019 mo
112.498 334.684 112.217 334.684 112.055 334.684 cv
110.91 334.684 li
110.91 331.13 li
110.91 330.796 110.845 330.688 110.478 330.688 cv
108.956 330.688 li
108.793 330.688 108.512 330.688 108.512 331.012 cv
108.512 331.347 108.793 331.347 108.956 331.347 cv
110.165 331.347 li
110.165 334.684 li
108.869 334.684 li
108.696 334.684 108.426 334.684 108.426 335.019 cv
108.426 335.343 108.707 335.343 108.869 335.343 cv
112.055 335.343 li
112.217 335.343 112.498 335.343 112.498 335.019 cv
cp
110.964 329.349 mo
110.964 329.046 110.722 328.809 110.414 328.809 cv
110.117 328.809 109.884 329.046 109.884 329.349 cv
109.884 329.65 110.117 329.889 110.414 329.889 cv
110.722 329.889 110.964 329.65 110.964 329.349 cv
cp
f
grestore
1 lc
1 lj
56.4209 249.847 mo
56.5273 283.683 li
.746 .676 .668 .898 cmyk
@
56.5522 291.603 mo
59.4976 283.673 li
53.5566 283.691 li
56.5522 291.603 li
cp
f
0 lc
0 lj
56.5522 291.603 mo
59.4971 283.673 li
53.5571 283.691 li
56.5522 291.603 li
cp
@
13.7261 260.285 mo
99.2261 260.285 li
99.2261 274.685 li
13.7261 274.685 li
13.7261 260.285 li
cp
0 0 0 0 cmyk
f
23.2393 268.899 mo
23.25 268.834 23.207 268.792 23.1421 268.792 cv
23.0557 268.792 23.0234 268.845 22.9907 268.899 cv
22.5591 269.807 21.792 270.055 21.3384 270.055 cv
20.8848 270.055 19.8481 269.752 20.1611 267.884 cv
20.1938 267.679 li
23.1851 267.679 li
23.4229 267.679 23.4443 267.679 23.4771 267.474 cv
23.6606 266.383 23.2393 265.368 21.9326 265.368 cv
20.7012 265.368 19.5674 266.48 19.3511 267.819 cv
19.1138 269.245 20.0317 270.292 21.2305 270.292 cv
22.5156 270.292 23.1963 269.126 23.2393 268.899 cv
cp
22.8071 267.474 mo
20.2368 267.474 li
20.604 265.778 21.5869 265.584 21.8892 265.584 cv
23.0449 265.584 22.8613 267.106 22.8071 267.474 cv
cp
0 0 0 1 cmyk
f
28.7905 270.185 mo
28.8447 269.872 li
28.272 269.872 28.0776 269.85 27.8833 269.504 cv
26.771 267.636 li
27.1597 267.226 27.7104 266.642 27.9482 266.416 cv
28.4771 265.918 28.9956 265.843 29.3413 265.843 cv
29.3955 265.53 li
28.9312 265.551 28.9092 265.551 28.4883 265.551 cv
27.5161 265.53 li
27.4619 265.843 li
27.6025 265.865 27.7646 265.93 27.7212 266.178 cv
27.689 266.361 27.5703 266.48 27.4946 266.566 cv
26.6519 267.441 li
26.0039 266.329 li
25.9717 266.286 25.9287 266.188 25.9395 266.113 cv
25.9502 266.048 26.0366 265.854 26.3604 265.843 cv
26.4146 265.53 li
26.1445 265.551 25.5938 265.551 25.3022 265.551 cv
24.2651 265.53 li
24.2114 265.843 li
24.7622 265.843 24.9673 265.865 25.1401 266.156 cv
26.1338 267.809 li
26.1445 267.83 26.1768 267.895 26.1768 267.927 cv
26.166 267.96 25.1509 269.018 25.0215 269.159 cv
24.4487 269.742 23.9521 269.861 23.4878 269.872 cv
23.4336 270.185 li
23.8442 270.163 23.8657 270.163 24.3301 270.163 cv
25.3022 270.185 li
25.356 269.872 li
25.0967 269.839 25.0859 269.677 25.1079 269.526 cv
25.1401 269.353 25.2266 269.267 25.356 269.126 cv
26.3066 268.122 li
26.9976 269.277 li
27.1382 269.515 27.1382 269.537 27.1274 269.602 cv
27.1167 269.688 26.9976 269.861 26.7061 269.872 cv
26.6519 270.185 li
26.9331 270.163 27.4619 270.163 27.7646 270.163 cv
28.7905 270.185 li
cp
f
33.521 268.899 mo
33.5317 268.834 33.4883 268.792 33.4238 268.792 cv
33.3374 268.792 33.3047 268.845 33.2725 268.899 cv
32.8403 269.807 32.0737 270.055 31.6201 270.055 cv
31.1665 270.055 30.1299 269.752 30.4429 267.884 cv
30.4751 267.679 li
33.4668 267.679 li
33.7046 267.679 33.7261 267.679 33.7583 267.474 cv
33.9419 266.383 33.521 265.368 32.2144 265.368 cv
30.9829 265.368 29.8491 266.48 29.6328 267.819 cv
29.3955 269.245 30.3135 270.292 31.5122 270.292 cv
32.7974 270.292 33.4775 269.126 33.521 268.899 cv
cp
33.0889 267.474 mo
30.5186 267.474 li
30.8857 265.778 31.8687 265.584 32.1709 265.584 cv
33.3267 265.584 33.1431 267.106 33.0889 267.474 cv
cp
f
37.668 268.899 mo
37.6787 268.802 37.6035 268.802 37.5708 268.802 cv
37.4736 268.802 37.4629 268.834 37.4087 268.964 cv
37.0415 269.731 36.4043 270.055 35.8213 270.055 cv
35.1626 270.055 34.3848 269.482 34.6548 267.841 cv
34.9575 266.048 35.9507 265.605 36.4907 265.605 cv
36.9014 265.605 37.4629 265.768 37.6465 266.188 cv
37.5171 266.188 37.1172 266.188 37.0415 266.631 cv
36.9985 266.891 37.1499 267.074 37.4087 267.074 cv
37.6572 267.074 37.8843 266.923 37.938 266.61 cv
38.0571 265.886 37.3872 265.368 36.5127 265.368 cv
35.249 265.368 34.061 266.491 33.834 267.852 cv
33.6074 269.234 34.4604 270.292 35.6812 270.292 cv
37.1064 270.292 37.6465 268.997 37.668 268.899 cv
cp
f
43.3921 270.185 mo
43.4463 269.872 li
42.7119 269.872 42.6362 269.796 42.7227 269.267 cv
43.3706 265.422 li
41.8262 265.541 li
41.772 265.854 li
42.5063 265.854 42.582 265.93 42.4956 266.458 cv
42.1719 268.392 li
42.0205 269.31 41.4048 270.077 40.5947 270.077 cv
39.7095 270.077 39.7417 269.569 39.8281 268.997 cv
40.4331 265.422 li
38.8887 265.541 li
38.8345 265.854 li
39.6553 265.854 39.6445 265.886 39.4932 266.848 cv
39.2231 268.467 li
39.1045 269.137 39.0396 269.526 39.3096 269.882 cv
39.5151 270.163 39.936 270.292 40.4868 270.292 cv
40.6704 270.292 41.0161 270.292 41.4375 269.979 cv
41.7935 269.731 42.0313 269.321 42.0313 269.321 cv
41.8691 270.292 li
43.3921 270.185 li
cp
f
47.3882 268.845 mo
47.4854 268.23 li
47.2476 268.23 li
47.1504 268.824 li
47.021 269.602 46.6323 270.055 46.2109 270.055 cv
45.4766 270.055 45.6494 269.051 45.6709 268.867 cv
46.1787 265.843 li
47.7012 265.843 li
47.7554 265.53 li
46.2324 265.53 li
46.5674 263.542 li
46.3296 263.542 li
46.146 264.558 45.5845 265.595 44.5908 265.627 cv
44.5586 265.843 li
45.4766 265.843 li
44.9795 268.845 li
44.7744 270.044 45.5308 270.292 46.103 270.292 cv
46.7832 270.292 47.2583 269.623 47.3882 268.845 cv
cp
f
52.3667 268.899 mo
52.3774 268.834 52.3345 268.792 52.2695 268.792 cv
52.1831 268.792 52.1509 268.845 52.1187 268.899 cv
51.6865 269.807 50.9199 270.055 50.4663 270.055 cv
50.0127 270.055 48.9756 269.752 49.2891 267.884 cv
49.3213 267.679 li
52.313 267.679 li
52.5503 267.679 52.5723 267.679 52.6045 267.474 cv
52.7881 266.383 52.3667 265.368 51.0601 265.368 cv
49.8291 265.368 48.6948 266.48 48.479 267.819 cv
48.2412 269.245 49.1592 270.292 50.3579 270.292 cv
51.6431 270.292 52.3237 269.126 52.3667 268.899 cv
cp
51.9351 267.474 mo
49.3647 267.474 li
49.7319 265.778 50.7144 265.584 51.0171 265.584 cv
52.1724 265.584 51.9888 267.106 51.9351 267.474 cv
cp
f
61.3203 267.874 mo
61.5469 266.48 60.6719 265.368 59.4194 265.368 cv
58.1235 265.368 56.9136 266.513 56.687 267.874 cv
56.4492 269.256 57.3564 270.292 58.5879 270.292 cv
59.8623 270.292 61.0933 269.234 61.3203 267.874 cv
cp
60.5103 267.776 mo
60.4453 268.154 60.3374 268.824 59.9702 269.332 cv
59.5815 269.85 59.0522 270.055 58.6416 270.055 cv
58.2422 270.055 57.7886 269.882 57.5615 269.353 cv
57.3457 268.867 57.4429 268.23 57.5186 267.776 cv
57.5942 267.366 57.7021 266.707 58.1123 266.221 cv
58.4907 265.757 58.998 265.584 59.376 265.584 cv
59.7974 265.584 60.2183 265.778 60.4453 266.199 cv
60.6938 266.696 60.5747 267.376 60.5103 267.776 cv
cp
f
65.77 266.048 mo
65.8237 265.724 65.5864 265.422 65.1216 265.422 cv
64.2036 265.422 63.7178 266.416 63.6206 266.621 cv
63.6099 266.621 li
63.8149 265.422 li
62.3462 265.541 li
62.292 265.854 li
63.0264 265.854 63.1021 265.93 63.0156 266.458 cv
62.519 269.385 li
62.4434 269.872 62.3247 269.872 61.6226 269.872 cv
61.5684 270.185 li
61.8711 270.163 62.4648 270.163 62.7891 270.163 cv
63.0806 270.163 63.8472 270.163 64.0957 270.185 cv
64.1499 269.872 li
63.9336 269.872 li
63.1455 269.872 63.1455 269.752 63.21 269.364 cv
63.4907 267.668 li
63.6636 266.621 64.2578 265.638 65.0894 265.638 cv
65.1753 265.638 65.1978 265.638 65.2407 265.648 cv
65.1431 265.692 64.9595 265.757 64.9165 266.048 cv
64.8628 266.361 65.0894 266.48 65.2622 266.48 cv
65.478 266.48 65.7153 266.34 65.77 266.048 cv
cp
f
71.6987 265.314 mo
71.7524 265.022 71.5806 264.785 71.2563 264.785 cv
70.9644 264.785 70.7915 265 70.7915 265 cv
70.7915 264.925 70.7915 264.871 70.813 264.73 cv
70.8452 264.58 70.9858 263.705 71.8608 262.959 cv
71.9692 262.862 71.9692 262.841 71.98 262.808 cv
71.9907 262.754 71.9478 262.7 71.8931 262.7 cv
71.7964 262.7 70.8022 263.5 70.5972 264.73 cv
70.4897 265.4 70.6616 265.832 71.0942 265.832 cv
71.4077 265.832 71.6558 265.595 71.6987 265.314 cv
cp
73.7505 265.314 mo
73.8052 265.022 73.6323 264.785 73.3081 264.785 cv
73.0161 264.785 72.8433 265 72.8433 265 cv
72.8433 264.925 72.8433 264.871 72.8657 264.73 cv
72.8979 264.58 73.0386 263.705 73.9126 262.959 cv
74.021 262.862 74.021 262.841 74.0317 262.808 cv
74.0425 262.754 73.9995 262.7 73.9448 262.7 cv
73.8481 262.7 72.855 263.5 72.6489 264.73 cv
72.5415 265.4 72.7144 265.832 73.146 265.832 cv
73.4595 265.832 73.7075 265.595 73.7505 265.314 cv
cp
f
78.395 266.048 mo
78.4487 265.724 78.2114 265.422 77.7466 265.422 cv
76.8286 265.422 76.3433 266.416 76.2456 266.621 cv
76.2349 266.621 li
76.4399 265.422 li
74.9712 265.541 li
74.9175 265.854 li
75.6519 265.854 75.7271 265.93 75.6411 266.458 cv
75.144 269.385 li
75.0688 269.872 74.9497 269.872 74.2476 269.872 cv
74.1938 270.185 li
74.4956 270.163 75.0903 270.163 75.4146 270.163 cv
75.7056 270.163 76.4722 270.163 76.7212 270.185 cv
76.7749 269.872 li
76.5591 269.872 li
75.771 269.872 75.771 269.752 75.8354 269.364 cv
76.1157 267.668 li
76.2886 266.621 76.8833 265.638 77.7144 265.638 cv
77.8013 265.638 77.8228 265.638 77.8657 265.648 cv
77.7681 265.692 77.5845 265.757 77.5415 266.048 cv
77.4878 266.361 77.7144 266.48 77.8872 266.48 cv
78.103 266.48 78.3413 266.34 78.395 266.048 cv
cp
f
83.6333 270.185 mo
83.687 269.872 li
82.9526 269.872 82.8765 269.796 82.9634 269.267 cv
83.6108 265.422 li
82.0669 265.541 li
82.0132 265.854 li
82.7476 265.854 82.8228 265.93 82.7368 266.458 cv
82.4126 268.392 li
82.2612 269.31 81.646 270.077 80.8354 270.077 cv
79.9497 270.077 79.9829 269.569 80.0688 268.997 cv
80.6733 265.422 li
79.1294 265.541 li
79.0757 265.854 li
79.896 265.854 79.8853 265.886 79.7339 266.848 cv
79.4644 268.467 li
79.3452 269.137 79.2808 269.526 79.5503 269.882 cv
79.7554 270.163 80.1772 270.292 80.728 270.292 cv
80.9116 270.292 81.2573 270.292 81.6782 269.979 cv
82.0347 269.731 82.272 269.321 82.272 269.321 cv
82.1099 270.292 li
83.6333 270.185 li
cp
f
89.5083 270.185 mo
89.562 269.872 li
89.022 269.872 88.7524 269.872 88.7954 269.547 cv
89.1304 267.56 li
89.2925 266.556 89.3462 266.253 89.1519 265.908 cv
88.9146 265.487 88.4175 265.422 88.0503 265.422 cv
87.0024 265.422 86.4409 266.318 86.311 266.534 cv
86.3003 266.534 li
86.4946 265.422 li
85.0044 265.541 li
84.9507 265.854 li
85.6851 265.854 85.7603 265.93 85.6743 266.458 cv
85.1772 269.385 li
85.1021 269.872 84.9829 269.872 84.2808 269.872 cv
84.2271 270.185 li
84.5073 270.163 85.0913 270.163 85.3931 270.163 cv
85.7065 270.163 86.2896 270.163 86.5708 270.185 cv
86.6245 269.872 li
85.9331 269.872 85.8042 269.872 85.8794 269.385 cv
86.2144 267.376 li
86.4087 266.243 87.2505 265.638 87.9204 265.638 cv
88.5903 265.638 88.6548 266.188 88.5474 266.848 cv
88.1147 269.385 li
88.0396 269.872 87.9204 269.872 87.2183 269.872 cv
87.1646 270.185 li
87.4448 270.163 88.0288 270.163 88.3306 270.163 cv
88.644 270.163 89.2271 270.163 89.5083 270.185 cv
cp
f
92.9751 263.791 mo
93.0825 263.122 92.9097 262.689 92.478 262.689 cv
92.1646 262.689 91.9165 262.927 91.8735 263.208 cv
91.8188 263.5 91.9917 263.737 92.3159 263.737 cv
92.6079 263.737 92.7808 263.521 92.7808 263.521 cv
92.7808 263.597 92.7808 263.65 92.7593 263.791 cv
92.7261 263.942 92.5864 264.817 91.7114 265.562 cv
91.603 265.659 91.603 265.681 91.5923 265.713 cv
91.5815 265.768 91.6245 265.821 91.6792 265.821 cv
91.7759 265.821 92.77 265.022 92.9751 263.791 cv
cp
95.0269 263.791 mo
95.1353 263.122 94.9624 262.689 94.5298 262.689 cv
94.2173 262.689 93.9683 262.927 93.9253 263.208 cv
93.8716 263.5 94.0444 263.737 94.3677 263.737 cv
94.6597 263.737 94.8325 263.521 94.8325 263.521 cv
94.8325 263.597 94.8325 263.65 94.811 263.791 cv
94.7788 263.942 94.6382 264.817 93.7632 265.562 cv
93.6558 265.659 93.6558 265.681 93.644 265.713 cv
93.6333 265.768 93.6772 265.821 93.731 265.821 cv
93.8276 265.821 94.8218 265.022 95.0269 263.791 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (001x008.eps)%%CreationDate: 26/05/15 3:24 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpNlBkoAJI*pAdcU6415hF@&Rf]nZT+_A`OZa=6!gHgRk2Z".>`)`ZaDlot<<k7AKRdV(HUc&?81FF(Rte#G9/n([6E<g&=e%-WOHms-o1A8>gYNkOkFU9NK\\)[^.V=kD":/SjX[KjKnI[]H7UMXB]T=2!-KmC'(g?E_^n[_'5<ADuuL.sY*>7o(VV]6^g:r\M+@%XAhCtl27.P;Jn>Wj`^C!dSJ#+<W\qq]PRU)R^M1JYIAh%-)oTVJCPH@j])iAKrTjq"ME?d2LfK7;cIJE[eGIspY^VuK"k[BqgHs)%KF.:QE--:H,)Doa^\NZVqKo!hmoK:EG3^SES*[RF?^:%,H<il;)7#D^D1t*aXFGA]Q$sa;8<rfu,,1&]q0-!TFcm<a5S%BMWEW39%A0'^+X8gSGs1+<JX]K91/tl+UgV7G"#Ba2#1eAm`jN73nZeiB12>RS?'gOZ#d8@MVDkb7ApWLh(47*'KJ:E^`Q^-uc]oU1Gh>Di<%Y9Y^N!ZH[.b2;kETcQ%0d]'].gXd:cA_B?IOVL7t`"%N:)bD>+WMZ)JD95Des,',+QBYCoBj^"pU`$*FWaot7BV\DNfU[+'mu>nU%Q!@@318I"f7ZEJ-W?a(dJ\.,RK`>o_5J\;$T\lr^BKm&d'omN%Lkh$D8->2#M!J60#,7`e-"Y%f=pUO5`#>aeV-d@s)S.DlnbF]G%rHB>#9g\kZ'g<'/5&D6&$O$`7<VWVpn5NEHWN),ZjYFJChD,KfAJjp[0VFY=5UjT!QW]lf%:s>pb1JWA%fD#Y[LK(k)gjuO630[n%$LhZ$!)Eq*-rVb9drO+qi9bP&SsRX]*J-#^Qf(57,Z!Anp0:&A#+n^!q?3Ee$Mq\e8tJ>0i"O6uO5L]JbpYm7Kg*=#r.6!+-e(QJ%6u%Gt_'ejorW3f1"DncdP4kR`oF!jV9XtQc2ElXOTeW5bTb;a92bD=%p&oSk)eg<HB4JkPOFL(6q?NWh',a*aC\!FC)#T(ccp'G*%KIZ%gkT>2h0BaDoJ+t:V!sCf]'_Do"aX@cS+`o$t6]6m.!-?.ECs306K^)Bkd#HG,oUK;"QkR,'];0$s?DI`$#A'QPN&./On2BMg%GmaM&:FJ[,)u<'<6JdDl-j..UU`!gO\O.c8=s2VFGaS".j#4]CE!kP-2D<^M'"SbC#h;MYKPl<#)\LX[Jif3+XcqJ\qrBd57kc;H%PAi;qF$^gD6Q,nKr6&_7Gpe_dZ^&if7OQLYKY&,ZF8gg$3=iB_c:=:"R?%GX`$bq1F)!C6)8<1X;D3;oQ6lG>rXu1Ydsm6AT('MU%+"UslO8gO+&ntW!&H8$o1JRG0s!@[rMu:"7f!\$Ijn%O>s%E?.Dj0)V0DUr*(Q/F5s,ql.')BfPP(/YdO2uAZ48:)]8q+*Rj=fej%U(oLJDs<-^K`C#GW.3dnO:m:NKR1g18V:sB$3-JcHQc8d6LE-ChC9<VX'CB,r"gu>g+F1Q'n3u?GUCVtRnQEuSgm>9>.-gQKNb(H%Egb8UhJp[Pfe7"Z/^LdDlPmYHraYE\MQ6s:#.tC%cWfHLrP'`q`E$r=ACD[r5YL<>@=Ll'!;ASn.-^IBhBqpDnMZ."/Li+>K`&jM%*VP5=l)^**TUt4q7^u6>kVn8P(r;[?f#UCF;/lNDd1_43%9)"45oE>UFeHJr)eF5_ZpcNsneUj$s0hFL=_7..8.G2bHis5\Bgh_Y%N(RO)#H27=0lZeAi.!ZA;>qrL:7N'Y/.qZEc&"4762$ZC:S'g3,X_,T?J[$Di0-eB_YJ"k1'i?`G."p+jr9_lA/t+q4A,u#4],qJ%jDBOX>p?f;?NRrZgeg*0(@[bo5%'i&[*>8Y(6_EZ9?N1tI.!35V!T;88A56lB2XlAm%$l-Dd(OG@V*F>5Y^_"@]i2h+UXWRZuk%?%)iaJ/Q!s;_.3>Kf7d#1g'c#gSWDtB'?Lu.`R@bTp'U-d+o[bu#J5ZP_i6_Lp)&hah56&,l%$[7P0Y-I>AAt7&1ZR-3OUXV^=G&Tb%!sW;S`0gl1#"K5cJDoM\14,M59nU\"?"#L>E>"3aSTT0F'pFY[R?V>(kgffkr22CXZC.hgU_cE;n26%#,#?:-kAQc1X^e\jc>JV]%.=79)As"G,4/"\&Qd/WZmqdbdAl7<[o15_<DLcPc28@g%Y\qh<7F(eZSFi=]mit2*Ef*IXJ<\"bErVtX."RllWQ6AJTc2kmgij^`%k9:ug_DaeuV83b]DZY?(VBaKR;[Q\qo87l(AX)nkTkjoHl4_m_B'9eCK5d@<F70GET.mR$5Gg(3l^iSoMk\oH*D9Lg`0j/@)ui:<%`9*5Zd5@moG`AgcmWhELhN>!QcLYj!P./OQ@_EH;Q\m4lAp(Ah`n!U]%7hp'%gCdT@B9WJ"(X8#bNPtI92nO!%!1R)>i7_=f9-d0%?@UYjeY>Q.-%$+^gn6!2Bl(/D*2$E.*](K`^1FfYihJeY&4Qih2Im7c:DCh+kc_uO__B>.e@;7;BVHOZD'bo[Fi8DRWhdK^YbMLt%PaC(7J\RJ;cL%K\DSt5!Y'bX1HV*NTiR(^qr$^\R>-CYl0KCcN32e3^='B(4B[Z^U]:[1++K=Gc(0Db:3cV\u1k/B3kAj/DfgLfM%ra2k;8(O%Mg$\j_-1^Pg?HED"+Z>J,[/rh2U.=h+\K#R'UiMGc(!7OnU1@tcL@HXoH)MCeVCQ0].aEnZ3[1='BoVEhK`6Wo9_/hf%'>lD/Sagj)TV0!h[iLLY"K>%rF@;I46!ane!TA*`g*%Ya1MqiLSHNl.;01Kabo\;&SC&dtBqX3S[ZS=b?/hiKXUG&V6nRS--M85<%AC\`&S+uk=N16bIUAc'YrBmrR*"/3T8D]IB\pG`6oOfZsq*es,V%A-@\7FOOT.$$D"F(5l@'[b6)ii6uBfT9F3d)FSkH(+%:lS*\%J:miYC$_pTW(iWX7HFQ9MKk+"d)\IIM(:Z=n[V><M/%B+g#a2&iE4'.lNp)uU1^8pXW$QNODfjH(Mor@fWNJ5\(tl8P@r0br8aU/%s65US./`u(\;a*>>-KH?36"aqQdb(-HF2.<s)ds<^Y4P?I'*?J:L82p<E(Mpo(K\%m:VUR'YqIhr&"9CCo,P$KN;&i<k@rLH&,eH%5M=rQD\q`Sg>+F]3e<T#J(0tTN_lh[WO-E^RnC.G]^!sXV,cb,1#/c(YjhsE;F*/!F`UZ<9'b;>#8%BZJr=jl#UplYMU51rs,l)S%em#PR;`FO:7\%8Kf6:)GmDEg^]DL(S87&aZ9rD1h,H#\l`_\)`mqC_q^X,#U&HWEM6jn6Db'3a_\lMYli"j\WIrk"29!d2qmoDIk%NN-=f50odcaKmjbp%R'B]@lCrEIJNCVj2/7;/Ol;rpKIF?X^>C21@Dd28k;Q\oDQ@?QFq=8R?dD3d"\?s.bNG?8r\b01Z/&13Rq'%>km%6$,f(#s)-D7M;1CtrFZN<8?O6#+-?,qr&":HR:P`qnl8I<-#sf]Y7Bh)/KuK:&eYX8pdF#b'.a:F+Me+&Uu^q#kf5m`nf*/Z%9Zg9(./E?X-#3d6H_,aYL"fcT8&X8!,+1gcU;%O4e0U.4cq^05RWZRD(lQkP6r<(Ri7(C."JhPg';sS[,HS%-,WnKFM0'^#""l:M%=NM2$6l6<3q-Ohp.e3QA.]9e^=;\?<^Z=$c1n='9;$C]6\prbtZC]:2f.0SIl2WO_084_Y=[5*+f&e8X:^S[RDRS<UP@)(NF]pPE%HZXMfY17Ojo@#SN4Q<W(IM\=Jq7jY4/Q?*q5$Ed2aF!p4s/7c(BE:2_gI'e94mr@+Thfb*DRVqnji65ZhQPE?/]L:G*Y!Zb.c!SU%XU0PX]mg+ss5Q*:2lX%(b>^\Ec!%U5U1HGC5q%Q?eo'O8V[nS9iCANJrPqO6!g41.fme9T,Bq7h0tbt>q-thIo<YRU$Q?&%C-YVs%BB?li%(m+'"+hU`lWj+\f5H0;>J'(p(!M[_E^@$;rN+V*e#Cl8ec1%#@bCS%a%@.B_dhJQ@=<K<i5f1!hq()t(]P`s`0`+UAk<Pr%8FF4dIf9(,[K?/kNU$NWb9-/n7JiueXlD\@Iq>8-."B_cmiTH4+'$dr\nrB[hu/o242ZMd./n&4qB&):--K=i0m3A#eh)dW@'BPN%5#<eqinr:]^O;B2TtPG$7/gK*q9,s#Ds]a:T+:2%qBWg`3:eG;g[4^LVcSKkpm3P?BPmU\I'&spJhnS2"U>0B774I^9#(9Fo8OG6%XZn9ua:`O+*OLJN-QNF!hX<uV<a+rVQ1oUq[+tbt\r4Dp$`Dg,YMT5QT"M0)ePDKGNIKukd;8ITG#o0Q;>G+CP/kk46-[6p:%hbq%dH`V>Iih\%T:X'sHMMIYX^12BW.TsXOqM;2&_V3YDRB9'p#]i_S8^\DcL[t$?3=BK:M'*[Bj!pR1i6NC&JrH4;rZ;XZn<eJoa9f*%L2@P[nZ,]cMM@4trimk6W95UZmbn[W!@HOY84^j0,\a779m50V[/[(K45`&m/><>p[_N!b=[LL<$gtI8NW6@i]>>2_(lGEB!V7'3%\[0be1Nj82QakU-Q)___.dYRg</XDA1[A^fa_aP<BY%aZiJNPNaBF/I6FTR:opqKd;Y1q7-'jetRYTZ\2Qj?P$b_6IWg+puP%c+p%Zt+OI4+QsGV:FdX+KiW$8-S3_<.Uo8WW75=O;\OCMRNrAN`!c,]-Fs16kcKnFedP2Eoj$&l.<i1_?1\U2.<BN[;,BLb)L:W#_(W3%0'^u1MfL,,-&AY&Cdb-,9L=k?/AmE)ZC&\P)HpC`Qt+>*E"?hs,[cRugn`CVG[<ZC.-`?e+o7I)eX>9&1U^Pff(6$<k0UuT-_Ab;%/E$0SQe<oaNQ).7*\SI'a^nb@L;%"bnfRhGbjWR[_6Ok9m?5/;Y,ckNLE5%e8es%'_aH=6.`bn/4@C5M:$\*^aWUh5lbQlIHEl,o%H!/Hc=\2F`5P'6`T4X:$7b=RC`2)U2p``s[2EJrp)uSiJ-+ihooM3`7dX#oDFOXKVr:rK;=^fH?'f*5FlL<)u,tigk-R-p>o_S7K%nfOe6oZg[;aet!6EOM(%8dCXL284O.Gkt8u4<2meNM!C":\B/Te6Mon`j13ted_LJY26+?1D%q(a\T\CdncQF6lZ0BXUFODYu<Ku%$DrM$dR"9XMtTr]fkAp"]mdHhan4\g'u+a4NUF[\W8@CgK!e[RAYY+IVL2l/2Q1a:=V(@oAu"PJY$S$^pQYNSoVbfl3ZaedV,hZ]%Jc&h0s3kmJW"+j%09uB)PE/8/XrmoOUO\aUaj4#"qMFK+K@FN,_bfK=.TM."rGJI^lVrsS<;dcdeu0aPr=@MK")834Y(;<9a_<TW%FmL?6L`U2e<M4ZGh6#4CK7fc>*Okoc*j]26\7(a$h1!OV"hrE$1.3O'bR_ugn!iYQ7(RTg.cr>:XWpc<<sNQQi?]'RRa116KQHUg%d<S(\k;0aflP_4k7IEE$A:b/Z=ESFU#dW*$^Hoe0&ub+Pq$%-g?YH2Ee<8pWSb'L/-QhOG/l%S8@VFo0ZD'mQp6Z.6DY4C2hYu&E%<,fg;>1ILBMl\3abCg6-hh'*jehP_3i4,!?Z:N#(V>DAJHJp0b:^<L'6p_;iLoP2j3n]RURS^7Q;Jau"nJb4Oe#QMR?B'679W)$)%p8\m`<=eGc/D^4\r(;+g^HT"![$C?g?WlCMMHmg;Xk*iTqs@/>Z;%,kKMWX)7KTJoo4%)[e1Y55rMKmhh7YAmj:*G`VjD8Nh^dLT%&l@eo!HX!u.K2c)85M-q/,@`\B6uj]@9`e$C<]NJ=537<q":0lj5'G[o2d:IC0#Q[3a(t#+,gpfad56)m/*&9.YiA]%k-&te:*,d%k_8'HmSqpa'+3e3nb'9d+8'M*+Y_f)(i:Bm3M]cbgC>AUk?s0K<m_"0]iP.:.YY+u&[\XP2>U[FNgHoOYe;`AN#&6NQME.?=pX[Q%rI0'8Uq:N^cO`+jl#^2ECrjKJlSiPJ:8\kd#o'G&^,b:!e;VPeP\:E<oE[+d\l/"*6:iCG7*<uaQLF#]U,:fH/1qot($(P*dZgE!%ims`>q_K!;-8:\Q0V]i!0;67J9qLY%hk+eOdo-hA1#T/(Z>cr&CV7-2Xn@2`<bB8#AP@ui&82ncm*B@a7)DDqRC]Xq4$4(JXD<@q%&3un&^K%jRP7l#\KofBP_"<hc?*@cnFoR%G4'D:E:+lu5;lea__loCqK/-7UBFHm_cQe!r,\AY(p33gp7148tI"'!!Ht$<C5K_7s%'K$BV1rB\/9JBFGqZuL4<eT@u3YttSf&J\M:o$JQ<l1+q[-2Tqg>2csP)u&rd/<8iqTW\/PqXYQn_=<SjO,*f8e5'fl7If,XUV$9%<Rq,*j.c)5GN=G[,[*jn;[]qiH=Z]/:fK-;r'[YcmYqG)6pMH%^m.s$h%,p\\.E_(oQl+rn=ALN%ldIl*^7E01:['.@FD4^8nB*"%(P\7OJsE8Nb1EEo5HX44+tco:>KV4l<3VWVhh]Q`H)HY:lHRe(pK,&Na[umMGjS_Pa9NFTB`GWtW"&Tq/h2A#O3fB4kVVUN[su<W%F$j4]SR*Rc\s42ddl9.CGi=7m](6DOIc[_h)g#9umk/g[X<dCaa[:#t6,F,=J@Do!/\(>f0?$9d^Cl-`3$Pm!$2)JIEl00$aG&j9%*%4eeQZReiUsDJrFFYbOgq:.K&D-@>)TZlN<$?U%FQ1ueQ:8!"X3GjtPDp@O[):VU41(gJ#\313*\Rk<:EhD'3]QO_JYPSi"V8rE%TG*6]'Y/9mTJhrP!uS:UM&a<"#WTip(PTOc9/"j^ZpLmQ)u?VG\9\%=PB)RO98f8]I20IFg=k5;l9%%I^>T<tlK2Z-]D0S+q:qN)%?`t/n8Tu-!;e9tIh"XEOeD9fIEc1;-O\RKGI'0;$a7jall(`eN^&H0O(4T@;;G0Nh`RM28Ue&&h]6W2ESgn9r[%>]-6HBm+[EXoe%%<^E'/`Y^_\mJZj/[rtD<N>SeddBcAO@XT-)s_G<V9\W1eq)Z3Y]eW9ZK:enG$XAshFkibo%dl&4hk<g(\20r[\D'clPcK7l!1]u%V3\9VpJT2cZB\UpAhTfY(;NPAV3dXBatu;OWD%fR!F<m)?.5+bV4;^Km^,YK:AaUNDC3e.Z9q,lrD"SJh/;tIaZ'(U@1T&/6k.q#%Rbf6=B(rS$TOlY@lXt3I-T0)(Ra(N,SO?ZW\U/`lJ=WQ:S%U>0eZSU`]2+jS&Kp@*&!7dD]6LMR.4Yei2&VVK6tl5WascgM'5:7K%qO.35%;POCqt/^Z$>?g9At2qg'u*5ckkD.t3N0-nR[q`RqDYuD2;=UiBm9InmJab1BBJ)`c6%&$A6ae"V6[J=(=9!74_(VnZMb`m%mN/4qjn>*LUPX)2Wn^`KT/;SRrVA#29XbN7)kG_Je;f.%He!PG.f7S+#''26JZ!D8[,.EB05Bm*;-fUCTT,Pgc$@<.]/4`#\5>)n%hFbFXR$F_cVs`%,)s6t?@&#5*qGloGkM,4lo&Xk!ULrrG`>ibPOnLVi7MSYFhTB<R^X6!O=hFVl>k2[;2n*cSq_ag5ULs1[bhRAi%a02[#Wcq@oQB$A4SLVCD1Zr,fM-m#Uq<=l;)[2YrmAht4rbNSiJf:a^4%ld/rf->:q76@7H08n+b->i6H>/T:oko'31MJb.[Im&<%B^,&nltZ0A9fb+tAS?0oT[DSA)pd#%)Du;R]R;qj\??#lC.t+h[ISB8UIFE\iQ:dMMHV1JmX;9TrU(`!q_ic*3i<0?H;M@QV1;#W%QDKM+bS4g2\$$%Kp#Ci)be.khf5n(g^d]t@cD^BsNC#/&fcB>RTX3e<kb4HZ.W;Gkq`!6^T*fE,qIO<>O4Sg;^7IkSRg2C^7ZTH"%0@+9,:VMfPSUBjN)TAi*Aq/_&[;nO-O-]FfCG,KCHMkDHF^eRTDket4b=Erbp9gC(=A/lTH?U[#)INBUNEXBG;lQmsjUu<MjVp.9%<\Z4lIU:57g?>#pnP#CqrF'7<2lb)=bjW,iH76HZXQ6)&V1FoojnEsC4Y-!9>bYi^]3\@eCX9047f/[5St;h+6D#E\DVrQ_DF(e^%m9OS)T[><.'_OnZ8pea_YD']gdDaYl.>'Ig.3C+Q)V%'<3nj*SDH*00.3,i:SH6i>H##^PP..XNI(df"G<b2S^\[DaD;+3r=k5ss%WHS75Ot:PEb)>6+0(du#g#r&9J*qT.G:%fF#<i"ch<W,M.@'g%oG2'AhF;!/]3%VQVn_PpkG_n30+@=+Vr`?\qO"igU][6YVgBqT%JPRk/iVYS.kssi\N^*25ba?[+ZhN"c[gs9ZRnE2!\!(1"ISV];N9QP*lJ$3lgXbfZmb1[%4T./3D0tQ^>&:;>VGH<Q(%9V\rJMGd%R*YBiiZci,I@f;khf>^SViSf^FoHK5@^#$/F!gDDhu2$LDW'!iCM!CemjY*cf4TBh3Tt>0h6U*EnEIZ]D;5=ZXg[(=%YH2gS!r/[%>R5^\are=I"/#!3Ro=>]`UYHh-F4?S[_=8Wee_G\=6<RI:DY\1HCOP@+hQm-Q+NBd3t$>KkBP9)b\T%Wf^J(erRQi#'U`QbAQW&@%."Dd`pJBefR:r%S?h=oY9^0lRj]b8-n(W'-o)3tC+'F,Z;bP+$!drcG;.n4*2GT5t,%5/3Q1Ji>2nN#2h"p7j>n,l%\3b"*X"_Ne%^PK.I9J^*8jc6Fn*&8aWIm>>*EsK,JCX$R33nIJ`b95Ir<<@5Sfd3`=7Mj[@pToB>NTo].:@gbVpNa*Lgti8oMO'pmEaYY?q:G.j%?___W^k,_^lROeq'-#ISAqWXUj6[5JdG!sR1iK`[rD>cqepZ(9i/R2nY6WYB:=Ia,jt<l87,E(*Y>M<ZA)"iaX6Li^fFH4.NSZf%%pN3Fjdp24Q]<Bk1#](2kLCaDSf2>bd7^4P"Rm!8L,V[e?!ZM;kjO,o_Fdk7L^X:G!b#[K8p(^nsP^EE*C(2b-9Rf9nDGNY,'2VU,%TR98k`A[#Q@t%;E8F_Q63re=8p)rm4romnNK#hu;7:e6(1"Ve!=lLMBSb^tc2>+5h$5%EUP?I2WrZe@L_qps[NH*UTG92W4CfO*S%ZH=^^!J-5.RXQe.[:o_FJS#@1Cf&a74/@\U;hg"_G4),39KO?ZDTdXC]M>!V7;-7&m-a3=-:@Uo'`FO*A+!u\;2=B5*_5$([ZP2+%&pbrZmHa!nrW&7s)2?S;^#t/K,#+2Gq3aUOHaKTmD+]01A)hQ.@\PAK5MHF5kl)i_%uRsL-9`_o&&AL4MU4Tc0m*=GOS(Y^"K.gi%/HkbX']5t,nH2EHg'GRj[65KjPZY:Bcn5MQP8CZWQ\SQVL"TOoSTTEucJ!RA%]=Xt3ouK=F?ed/ER0&$/7n_8hB.k^DUF[,U5,oK%#bU:CHYCr,8#,^df+eUJl=6-iMfi[;n-PcDF3,SD!&dKH-1X?9a#q%f>^NsHSs?&&p7IW&Qfm,243t!M7O([[eBR=&UMrQ;\Ek3Z%!oE)@W"^&CoW!A/SY`)G_!EB&b&r't%Y6'R/)]>Z6FVVnc-.C(DMnP5[+(3g1NU1G3&#k6cjD(X'M+VH7sf6HnW(N/fHK<OA(aeG%j+iIlR=!dB$nh@@ZJVb$*lYY\Xtk.s'0;<*o$Wf9"<S/]06F[3J2*-rS1blc%O`8kpcua=S_/S-;1T+^4Ao"Wm,ZAV9#(l.V8)&K%f>c*?c``OgPL8tRWSYD4%;9/n6aA[2,dj2Y2(k"$'L)LYrFtp+'nS]1d9.u*j,::4LOSI(j;m-NdG4h\m(,&Vcb^B!H`HJCjg957%8eBS8$Z?;KrQY9@PYTLQ2?>4_^'fNlYY+'e?)7"sB086TJ79+no=N#G's>oGnO'`ePS)\2r>LG/KG>@S]4aorZWtZ[O^hm#Fr,&7%`1trr]e1AF?FgfFQmg?OTNK5LLgYB2%+kK5<sXY`=<-^Q2i]>3*[&M3Da.,s%3,=Mg#&<gfW<lBrLSjR-ki0OHr8P@oqB[.HuKpf%3e#^,d`V:>eEiRPg#tH>EhH+g3eb=`\3!qD$pb#"6)[11nU_>ZOTLA]<1:=>bBSgSm:(;7[.d[WMZKm@q_#C]+$?XAD)"90ODJZP%-hfX);0hH?AHd99qR-VK?OHIfGT.d!"p;5"RU?i-L*/TdHI,1tpK6il`?U+#*/r><0RH$i!-me,L\P!T*X`baHZ91=[sp#W+8'S*%510=#ma;esf,"tL#3k]npL$AX-:7_Fl(K>(m)u6'hG/0B`h6%$/O%,O+6pe#2))jpI2A$%jYOjXR/qB7McfBrY0P[l3VO6FpJ,^8%,L,=U$Lj-"Y+6K_Qa"eAZ@(!8NDF)[ibRGR^B]'U>Y`tFY0DsT2'Vkj+faL7W')-_hUn(eJ)&5Ql<Yur3]Jh9L_%4b&N_7Wo)?G)%3eH8PCEGHhmlY.N=iH+.AsfdJ,79Mqn#opsFc6UU&O_2ne)49'[sgmGR&E\'5)A2l*3MmUE)er4^-nXMb#pbF)nl_9^LbbYW,>q0%F2L"Ia>-<KbCOj\*3!_A^of!3&Z*plJ>!s8cT*@s%_O=L80(=5Qb5Rj?`3tW]LqM["b8*1RM+c%l_YaqQUS9$(:m=;Ni(":B%<Cg%]`Gf5Y`-W^)g1!P&2r2i*cGZ\q=jaZ_Rft3g1lDNEE(Ver2ifGi7*Z8P@;m-fVJ"UW]N84NEb>8(R=$#/_l:qd2aI_j"gf9C*=L3%83LJL<:F(Q]cVU_$`qRc58^>)7,"VjFFp?7\%Z"\+g-APL[L$hoQq<lk\C%W`n.AHb*6_d4ha0ZriRo)+!uN*!ScD''!:nr)3AOF%cc*ha[6(BV6\O.h*\o@c[CP%mE?q!n"-4q$QpeRG&oD_b$2i4K-!KNf8)lK.M2"OXm2?qOSoBOPLgJF&H`srNOStiKm<N=d-g*R4%g]Q]DT^b4OYULi6*VsP#1sh.L+X2hW^c)`WpBL!*0itRc*_?WgAd6u!^WK_FoDBk=1.E%bLrW,Kf;Z$_HA:&-<:Ja[7&0;GH:1uk%4YAF+T!5(hKEBZ_;X?i5@_@"R6QeM!"@]?KH3R+/;6X2k^CT/Z%9:N`Q%_6(r8Pc6<^YBO7IOuI@*@Lb-P:baXA#2^L'Y`'phk!s%UYh98ghU=@O%!1\Dk`]OM0'Sm4FY?&mg%no)RVtZr7)AD$""(8X^\f3M#)PP.Yd7,>JGqsr743ThN,,a5(88]_h#4WGcjA7_jA31%@XuE(!ebP">Racs,K=0^0F\!<j!_=%DTIoqU^YTR`&Vr*2n.U$EqJ%5)b\X+it=>`D^3NpTjjKh/CG4SDHroubkfTTTI@2J]`umU%3Z!c#L3n5$;@tq+Ir`)d-&>GLA=!N:VF!0Xj]G!@Z@,sS$'$$c'"R/E.sMj1/A;tM$V-j`0%q'j)npY4Aa]i'8u1"*eUtaG0QA7O%7e.o3m1$SGng00j:T=c/OmbVhDd==p#pmQs-QY)5PtYGsSo*[]/RQ]<RJSsNY4nMkDOnJ&6WBBCl8)trQ(mEf3Q(*N6&/5BQp;-e%GQqFt4dd;$JOWo_F@9;mT0jEd5mQ(pPK9FBF"JemN`m3.kKnoqd*Z[GZ#f,V)g*q"r3?Jrae9*gTOVVYN130NSjCD<ho<j5$dYIJ%3Au^63j4?[a$]am=2rR[)dLP(E+J;Y$-EB3SLY5WTLG>%3"H9u#nM3!+VfT,=Su-MWeQWkVTQU!TVl06PBSCZkgb0<dO@`aI44Zo%T#E1<810IVBe[2j:an+]%<$C*`NVOGB'XC,iMg40Nt9\.Ib1bN_bY`$=C1kN+s3m=a6K;$s"]u.k4W$`&UcW23R?!l-q's]%J*hY%+VgA$a/TuJ15C-k35_&pERh>-Ib59?l:29f#nI1GF;fKh]b0&>V>-`,5.RD3bL9rK]D4i]NgB#I-PRg[-ZQ+ANiU=E:WnIUr%SHj%*"!mW+c-K5;(41d/##beECUVRb(G%!Dp%f.5*%%S/*6P<YQ&RUWP/CtbbH"*ag<gGjNT^oGF[X>&$kR7YsS/i,<3u9gQ8PY)kU0O%j!I'1?VMphL7G%UUim3j"7p&S"Y*e&jRN0W>ENCUn\'Y>^J)80<l(bL;^!mb&WWW*U%C&[K[Q0J@hgGdBh/Y[N$s;3Nn]3NUCKa7%^Fo7g#3qL/.N;u0Pjg]Hd4-*$+qo]tHWLn2)eNbOmj*+\:4Qg4Bqd=22XDiF+VaNYcYVLq/\=B@Fp#'`U?]$82Z^S*&LY3Z)BYP&%kF=ppUl*Kt+ZR+acSBm\qTWk#DL?Y;`npTqgTg'ger=2+"]d?O4:G3IOYH79iJ41a,98"+cC6UFI"Yh%W"r1UgkQTQW(r'iHMX%K%6$?fn3JOBMqX)E"kkqAH6g)#')\<Y)^OjcG554,?(&N!pbhu/:&)G,_Gt@d/G^>lQl8WDdqrP3XqLRsX/:D=FqD+`^s*N'Jj8JVT%BQT-qhXN#J"7aKp3L6-C$ZMlfafUSXPRgAY"I+S\iNN`t=<<mW$p/;mF;gVB)MXL2,Ej/?aF*@[H=R)%/ANL:5GCZf/Rd^mRE9\a%e<uTgC_Ybq"HUe+,U/%@(%W)0);I7N)Z)WC2!2\=15RDnBOcC"@(4kheg<\MOQ;p_SG06q(J)tq:Uu9)-#?$DjIpHtp*I2RHn[)^%2,%-g:SLZEY84%VA;8B\T1d3FW=mTn6&SF4e5=8_'=&gWY-#p/h)2;%$?L\"%YaP[@.+`s:h"ZUh:UnFFUfPZ-:ZX(cnM<5U\,g"%%g$1Z8KAPJUk;Jkkg8BODkPsdY`J'g1-gV55)bj>(]V.^;=`ZIpQ?kl%gT4qRuBBj+"h#o`L-I?:7d.i,AuT/OaqhhQl2kJk/7"-%$Vi`)DRd'D6p@-9oo5QC&Kr5Kni7t*jhpnQbO>;EV"<R#-a^58Ts;(LBHGq'RJ!es7GSsC]@B2"9;l[^Qq/k*YM51K,)9`WWIE><%gp%2b!t'Y]&gLt_j*I$2<LXAfE/'H:n_s.7,a/UF)$93f=D*bJ4pK,O_%*`[&^R+q/U/TcdDptM7)Wea*G@aN:S8Vpb;A3"XcGsa%.[sCNnm)Jr_XY!QTQV#bEJQMZR)j!W,[7K4,S;QLoKfkf:S5^@G8,:L6[W\Q%CQgs,]Kj+DpOQ]raub]3+=5@2!Di/e2*FWm?91=%/X?bAIut$S-HBR;/KC(=>+'^,9d:Z%,IK<"k3F^WQ]ZSMR>fY9mn%&c67nDB8;2Gr8S"V`4l^1N67q&Qe=^<ELZ`U3%+s17J-D%#%6c4l<dr<uQ)W$5G[A$1GNfsh5[u*mD'eXH1-CP:^c[h-d\<!'ck>/?SVntm0/&t>;9126aS5d"LLklXAiPH<s+h.;#Ci^oZM=:[E%J:r,Z,^s'jY?Br>Yt:`9m+FX8O\Y0KM@"BqdYoXpb<7:Pb]UjCn6XQ4blsWS(?KqOBt@XhYWTSk_R=EX0+R&"Xh0.j^>m5+MB8E$%EbF0jIgcW("+3Ds`lZ7ro=FKjS?DgTb4a'1F89k:['Z+acP=ThS)ta*cFeC/l>G^-NQ_:;G.(R&D!);d&qZ#O>E%!)Y7HrqSD;e"%+aI^9WJBE$gT7`H;n#9ESa<dg4ZO/2cU+E'a$P)(eIG2p]+)ldlV3X[3H9XqP2.b"K/;lP;XI(QUT^@/G!!mUd&?\&Z^&M$e#54Y%%Bc.CDD`+A^rUqOo3oaYE]1/L`O47"TF<nlHMZCkGmqp$]6ah,48TB.Y\RTPqDHF`j#a>le:KIBl=%5VB=G^:QB!&1"C')Ci0fnB%q@_<Af`3Orkt7Gch^G,#pl)q:ajip>C6+//je*?Wms%Gsd\ZQ^n52X-`%D!G]ut-B=__/-Zu*`krtelA@Ig>&mI6L&7-$J!8;F\_%?B_U?XM2T7MN!_q3;9+$=0Z\,o@&01=uj]ojSTc]ZB%-/d.O>Z$4N&U(CsH'E8uaI_$n$OD8]*.r2RW8l-a!0jb'7nNIVKpfL'#A%L>4WtL6Ae/(ZP]uL7mVt*02g]G3VGt+l^>@@Ksb]ZK_9@o^4&bT2"L89/gg&b1PBhIL\#S(['kbl25Sd,+Uh6/"8/9^N,LjF@">q%ZIs>0H*&<(e+jk'5+F`I2P!K4TXf14\Nbpe3kno\57',P2P$JrS="OZSR4"?ZhHMcCc\R5\oR%;[-cq[l25Sd\0#<\flV\<MnR[T%c)1*i'qKG)SKCH1!M@JEe+nuqn&`RZA^gJ:dY2I/UL_jL<L&ACg$ighLc`7ZB%)%+!file`PQc7QkYI?9c'@0j(-X7jjK:I[n12\%q;p'#hip&p2P"1YK/k1:B%%&sEHY!,E^iOEVXr9-'A`i5`m1IQbG?.uYNQ8FFFGGKE^oeZflU\I=Y<u:]/#Hf&^tZMGMYj7VXs,8%pItHdflV+r64CYkN)[7ekd0=GHS=[39gc"X]j]Ml7a&b;'RT+n&"Do0q1md-kHA/bqS'P^pEg<^Y:aS8>(:P;*="YUSVmAb`FA=)%SWKo-g^+=-;.;S9PcO)DVKWMV5oZ=C4G6Hs2#trOB-BeLLJl&X$0Fmjs3jbS\h0XNH,&N^Q)c]aa0Y1E`ZIWhK>kC`/m'Ih:[DKY%YC/(C7ZKtI^#grQmp`A6m[X(cG0sUV1o6j\mc)25O*]'AkEGuHMsfT8h0cB9)h-7(5aXm>C[ThY)1']$GOoMC20VpDL$K_;m?pm3%YN3';I2P$FnK:/1;'Ma_h)Q<"%\IbslJ-\tlpSG#aMSk"ei8e0[%nmA(2%s[%+kZs&<?NgBlH#eb5D4BM<bKm$b@Pt;(#6S9XK0k%b[]+ChM`X<1c7DB2U['#cKU\IIMjk+Ce-C-N+aV==eo0\8C:84Z7$=@iUQ#3nkCD$1%$'G%Zbo$)*=`3f0Yh:?tgL`T&:`k=SF(9%ihB"f:Z=bUCG3=d'DUF;Mq4\!"b`n'oK/]Cas\,T#hpcEb^Ir.@-$0U6rJnsUlPl!4]e&*6&Qe)nO>_^^mk9ZJ]nhs\]6ns.R[$C%5a<@EB19bK_%8ajNNbu:lio[EIig?80kqn"p`2^uca^IH67nB\-%K5J(T,.Bkk*j,\>Nc*9BcZL8IS=)Ln2Vk84VQ#%Bh-8%6ZZ*%NLjJpkCu(P9(4[-a:3?(cQ`.E]/\7npkHDJR?&TT'D^FJ2uYWR\D_=aS+:%@d\/V]"]*%'2r'PMItCH'+&\LcHQqC&]4"Pq&JJqu%_S_k;b-B"UER^M0gp`+deinP0DZL^Fp9huNUk`SH*_db1*S$;n5NW=)1W5#?7'1)Qo8-&^J`)uZo@qB0H!rFbnakL:k*H:LiQAel%1YF.Y0@D\iNKqHCl\0CmKKTPiPED&rS/Vl<k(BiBMm_@D<I)8<!u-Z>ZoM)$AQB$4/_q+V76!=\P$N>P22s%9M<UiU\Ba)7ioR],%`_U'\\^eNrU!I_83)qH*@Mj2/?QhL[S/ih#h"s"?*7qg<*?.KjMk8sT(]S0Ki,c'h-?Iuf].%Yb3Ne'P/oUn?OWLGP.*$HQ$mUiY%##H4#K*[R-^ib^f!sHM\BL6)(LqltSaEZHF^FXiVL$d[p9l[bYIo5!+]XV3b^FgGggWh7imCRctf9Eh*W?PJiY[^b1)#N_n_`Q^;%(E7MY_tBn1mnQ;QQ2;W2Q,:G0-Qc+)9+"G3li+Q"aFT=CASE;9o?Weq1!_XOU@meHfQms$31MIBeDNf?VXL]NNFL#UmU=jsbJ"5;%_j1U#9fpmXoAP":k%n+T[8oFnNg]^fLLred=sim]\V`?;%nEQZ"?opL%;=7Y:2@nhf:[N$Q]O[\Adm:=nQp<]2LQ[oW3tq`Xn4Mt%mV.p(>r_b/E#m_IWH;-`O6R-9?#m[,'[32'ophp"U"EaE[3.o:;0lMMa[[b7.(7RlQhW=mH@;]:UDBBe)P<k4&7Rg0-\FhrS4#cq%1[a(l@aqX(#e-2'LSm$>GY!4fIu)BWN#>e6N)IJNY"^md-#.0n07GI_^CE'Xd#AfEjdRP"l[$K?a<>Z:(_V?74Y&*NBN<Q`Zlq/m%;>>uJ-#Ru;M<Q%HFVcc)Mcgf=8.ELO`CC5IER)"&`G(%"jR4B9@D9*9U9l=,4uZ2\`)Z&AA&0b"8n7acWV)/6hM\UH3$b[Y:ccY2%qrr!D819Fhq&:Gb-K&3Z/oa%(AH,c5"65"3A#2b5=[/7WB0#SmU.?/kSHt"t-6a"5<3+!!PD^$4i[@);h@3M3LYY@YJM'aF7]r!9%4+i1`r/bk6U1_Gc"B<NrIf?i)&%R*<g@rC^$_LIDq!Fo?'?P.0:,s8B7YE9,E1#ME41]m'.^bh@q<_$8RHtX6(6!:Z6#_!OfZC'(%ZuHm[_85s[&ckGi.&,qgb_/kSh0Y$(QY5AY^u:VdOfF(=B#6#*^Xm]Y?9BGI.N?%RGgoIulrT3Ifs"_Q3#!=;EuC$J6Zt(lFn/@U%%&DN@\o=;s)s]sV@=9":$SZ<*TPITJc2o!(_*81OV2`O@!Y!b-Noj,tPQ_m]#B8l9lp4Xi\l$d4)CfbC@+6/]s)WL]AcYAtVr(Yq%4UWrY%U]DY3@"tdC(B0`h7)l)^b(/_@'@50nrXbX=5q%\E%0[@:*,S+(%"o5@4+oGk#+Ae@J9]Z9DL^E-2g2tncdg04Q/s/icsEO%^Qd&kQJ+QE.A(Ajqo:>No@9)"d`DdBSM<%?c\@=$Y@"rKTgl`I:D?ZY\,))32O*B2^[U1#+^*-Rn+@(UgAL_c9)Ff4)_0:LIRDG9%R`N0kiOA[&aKHR.(W%OIEMRs[r"O='X.SPjZO$aDqq^Nr8g[X;BZ8n'Y'B^;L#;/SpAL9K?GH%.Q;R,D$dZE%X\@YZ^[QLHBG%8^%n+DU-?THuVI]iK#O>5e=aWoU,`tS4F(:l2J/C(qXi?K5)Pr>=XGC$;s"@%C3Hi:f_];STR_s[2UINRJ"3U_O.qMfS=?gK)bs$"/:%Ag":2bO3^tWu1U-%@<BE\CWAr4b\.=a1p4Z4K(NXa[d?1?G?M=\o.0K*>`.^B%XeGiOA[ZB+2bof.UAL*0ujJRIj7c<_b47_>dQN%fQ0:8?GCG:_"U%,&ao>`WF]erkf:Hi0>*Sop[L\df.[&&^Q:UmG^0hmYZq(1*1OaWIc7d4-.6e1@IUsZ0sf:TQ=VZ)l5*H\%D151%4Dd4G]m`iHiuA#)^[PJ+in_X6lLaW'a#E:sIdUCPa8GaGVSp7$cd/!plU7:7p\KR_eG*;7$/Fh_I]M?;lSWuDI-@\]_Tg&0h<PmC%e>AAsp%+t(HM4[7^Q1%.2_4Ma^@@EGl)fEp`a#cqr;td-1n]RmWf2A0?^.nGa1p4ZgoohRPABf;rVY*a\?4l!MN)_]?b"ca,)=4R%f.YoqpWgoYn+H:I=N!bO)#*kqZn'20f.U%oi7Rf#%4Ht6>Q('m`k9pL)-Gd#rIiY^a1BkU4<ZU;bh.o"Y@%'bNBjbRme(Y]j`O=Y%XM];NoaBY^(ihZ6jEpjBDtP@<p5FL)+%+.7+dVJOa$2(#kHd/'#;-K3L\E:@+f62?*s3l?@T`+@-4@I.]I2)SERD["KI5K0[B\R#%A1gm8BN+Nj<U;Ttk(Jk;-[!<EjC=N.HJ%P,Q/5"</M$^t`J<Ik.<kZ'Os5u`Q's_efZQnYX]2J"d*^A2a*nn'XSHD!>qO8RIq@cN%^UL&qpZ)2DpWp:1HE>Uqo^-d:``i<iboWF'TBkC,G7URBeZ.1tq)3S]mABNn*US"Hr:=[0G&_'JHsG6`p$_5BqQH<VHq#XcT"7$K%8>JIORVTD"qW<1kqo/J.GILbqEU)\2F)FI<h_EQo*qo:_59J>b>5PS=Jqk+SG&CPj?<jD6MpGTVjo,(&ED<"YP02MagJ[iKF^NiW%B$\*F=*q[9ZYn-;ktOA]Da"'diRCF&]Ne^f/`1*h6[O]e^&?6!H]N$RCsJXGht;,'Q`f0e^=`8H=U2n+7E68^\52\Y<DG4.[gr02%LkWs%]%`kEG1E![BMUkT.s(C4l0J5iNL<g+LW3n+dGBAMS$c3)E_6".EbO`NWM:J$]\63jk9QqqjibiS1fLS$fP0*BY]i4Y#BfF@%^ceaJT1mg.iI4EFf)-r$@AF8q`VX]S(13\:GhP0m23&'PWNBETD1=(fX0%]Tl-Ii,c'J3baO](tBjT[\-IV]q,P?fV\c-3kOpa,0%ji("/Or<_[[oO#<?/2LY=8T4g5Ie7L=Y*k9m_Up4h:#sOP'31J;88g^Fg:$RjneQ[Mt#/-2KDR=cEV<Y4SBd?R[>]!dp0\6^I[;L%FjSJ--2\FY@Llc:Z]Jb%Q#l&MEb(kYGGW:<;Ym:R^Ups&0?npX,gm+KK8fTHmT5n`MrKB,`N&N;=a]^Tet!%+nNj)B0!lf1O*7tH%+hur[6%iOg^TkYr9B(SJXl_aeiqj2Hh3fi$Q@p-$GIag7FoPPj-:2V58c`rT&lndOTi&qR;@`4(,X!bW!hSg31Z&.7T]52-0T1kI%5^;qm>Z./>D_h0f_9Z>>S>*QeDI+N9Ksm8j9K#6CmqrYs!G\GRYL5o/:9qAEFk]frebX@L=5h%FT56HgBhPZg2GRo"YbjfOMOm8m%@ooF?cZAWW*Os4)YhCUa=)2'CY8$P/Z`C9`&+cHX^Wa0)?o>0Rm>$DYnk8-(5fluD)f/b3<R0Sp:[W%/'#;*YG.?VWK*l)Ilkb8E%P:6KlO::qcRCZ_Eh[oT:(<EuPHZ^-jRlf`rB5J0/;ePI#5-!OHLEaodr]r',=%IV-g6'bg>''HNW]NF@^/\bPlZ>Z].uJu()f";G%P<F0BfMoE5S\Db9Roa0Wa*Y4Ea,KoW@]m!p]COgI].1"L[,1sW]0!K7e;bgsZ``Zrj`!rTb5Oa<0Ef,5j$%+\(N+_b5R"gtmja&8%[;3%#n_r+;pKtPWiidImEbfO`<m)T?9%+i(_6"g'HDIA^b[O,dQ)Bi>I-G8?BR`+mm)%-Q`pS"Ab$Op99CI#@F(FRAZ-#n4#75f.%\8FMIaUHq<I7BFhF"3Yp9V'Ild?j"%]i+OpgVsj=DOS)K>K0uM"OJn`\J\7a$\#60,#RlW!sIPF1THN"NGAi.=ffe4^eGRTR(W$\%"olGWcEgrFE'-_(3-;"T\:eJIK7eH*H2X%qUt2RkoT5;ADh#o&Kli*E]Wm.o"^"^d86B`qjWsfl!2t;GV`)*(Vc;GYCJ1VQM<o3K%1Dq/fB6VoC=T=BtnbBtgDaQJ!)0*;_Rc!A2JGOPM50W?K7(VmaRBKQ*[W=(NNS$Dej&QBmU3@]=T:j#oJQNB2i8Ea,V/N.ba7jal%Z'sL#O6tG[;EcEl1Mb#]WMSqD^!q(?mQ@n%2Dkk<02fu=FTXgBWMQBEh,L9+>tQ]F?KZhjXuR.oqZY*HogMu-l$3<+a7?^70!7OB%d8m7;>5I#hIHOqGY34+!ns?DlkDOZt`d[pHB7:1^RW?tfp2@+>jZ_,[-1>^QBf8;QKgp?rMqYfAhJ2M&n&d:V]@6S>pU.p:APnpG%r]9A9A'M'@HC??V[</GT'O/>E`i=YhXIa7>NLZq!T+uk#G,A?j6LbM-]_^XP/m=B)3o'"p)D<qN`<TWNgVIsl9ETUB_bgg(g+pK@%b03tNe17u9:JSBj''XF6f3`$L)RoWXa(h$%$Z91J^+=*&5(:-YZfeOJ_QWX`>6L[AP,nCrWoutDJ!.i1Y$Ml9".h#`W!h#aiIK2O%07$Gaq*hg)SZL8g.u3:l/#@Q%qf@5cXL*?.OLMsq\U8DcX3iF6S+8JFVR0e7$/Y8;R?_hrD)_JPejtQo)bL$:H>fsV&L1oJB/\j+%]jl1)EH7SP]/h"(dI;!"dCUHrj.!(gZf9\Dq-G,d9G("X0JU-m2nbM\qX,>T(d/"cq#EQ[mXjr@81eD]OJH17?:leRbKl#e.ar&T%iS$>>KXW6U^'R?T\1IKDPMJ%FdHF)hm,NnilT,s_l\"lDnk9!<<I-Mt4sEerOX3[tLW>]tm+e2Z%S,n=0H/^^DuC5SahiBX4W&At%mNDE!)%!Y8)0-AbaKmJ`>XLV3Y#p`-e<-UBHPMUVL1?d(nk.(RX4TDf`J!sAq&#OLEOq&b=NkM47baLRZ/rbb&$06S1M]Z*6gK32%^(s5A&7^_^cF>T!G=M([L$bt;+Of`G35<t*[dqtTj)T-\;;]\Q[9)LPS_&?XL>2%af!!9BC8q+&G+pqQSnEpFQ.(r!>dlr(rHbPM%PjN15UMS8Hf*Y=Ne%;YFmi+oVoQF:$?7U)d$TfF0(d#qlLQBEs@daF]`=<ine%O1=j8L9QH%".IXkVZ-eGIaNq7V-(=K5?_ZDIHP%e-A-29,N;'ql'Q6Jq>O`H-b%,W%H?>+?e`]&Ola4^[V/WPmOh3$r\O"a7RT]&K8>[MV7@M%FUGIqG6\5lMfsl1`ZcZl;f*`C/9]Y%fSX/AH&cAL,-B[rXP?3jqR,IG*0*\\W77F*.MbZUg)ZDpj#)no1(jI.]]DOB^7>gB^Aa=^3,7;4V/%@pM!pb8__DB[K^O<T$UqjF%raBUb5U&@=<PaH<m^%bYIdULk^^YsX6LY7#^4-9/jlX1cnoT1gUW(.'66C!tBVCeW`]r)+QMYH2"kbn($dZfN<j'2_OPeTlZ=peZ%^-FoZo#bd\\5Jj"):CaT^-ib;ckddT40H-Z&[tWhQgn6SUlFV6Ts4JUf6Su[c+.0Udcst;s1@U?Ya(3d_%%c6N:%kre!]_c@g;Le%-LZmZ69UH;DCo);&C3Vsk#W(*MN>`ISb5c(<RbsBEP0"R)X26@.(h>KF+'%oied:1h-bdc;a!/;R#a)7''WNICW,WFaK[IEbceW%%4Q\T9`fO[bVUpWf.tkt@VUpWfMo:\4M=G*Dn5K8E;XmumQel^snU>p;[Fj!OWMPs855^pD/UdPG!Y=-Bm$k).F71B>H2V<jL.Vcp%TiP(7qt;%Sr_:i6k@f"ZHC_:Lh+tRQUaPQ-(tCu/A90'Pc]@l%p+&Y@<(F<X-fV&nlSog]:g`-kN#8d+7WLr;C4<)lG%A(sW)&K@%+,e,.@#5-Qnrqg'%'X'U9o4AH#O>k`*W#TPd$1!V*R-h"l?(49S(]GP8]pbVNu;W3pfT'l%X.V0T:7Jj;@f1oM[YXQ>[2%]2ai:P%;opNf&StKnY21gZQr!Bofg`;.R%2&KI/;I>_r^4g`4;trYgM)Q`od*6A,c&apN&_Q$%FJ?UsQU$-/st!S=n9>NPtEuI`n'b5+;rA%I'`B*_X,;":d'`u?>BFq78d."Z[Uo)he;Ki%6P\T*"VX:%_U^Cq$.-G%m-jGs6.8Y@>DI2rm?:0]0-,[^uJiFBoapm_"5,::C]K.%G).=;7gC(G4*][22Xj\Nmr'h)ihq#04Gf_O@eV$X>I]tdkX!5-8odFLmF,B\8*T>lV_rcF'3XBQ?K2gQ01n+!(ft@hVXR3hG&Y?#%;Pe@.VMVdL@Hd?mnT2XKGYNOcpj"t"(3IpVHY$RJ!J[H%n%Ke-oZD<S&%,a47!J.%hCa/U;"l#U'c3YQRYZW1JqMrO`,GH_:<@m#%RuheI0CM$<9>CdG<`3VmH\"LJV\UHFQNr)m"q2d@1VV\d\\r,hlXliBf`F=PZ$3*_I_/CmSKY6p:T*XGf=C4E+#^#uRodX\kS-.h%F'j)Icc>-*e]sFN3.6#JmQm5*+7jD,kDsXp9&"p<I^`;![Md&5;UB*7OAbC-bd)MJYB@.K3B!Dqp`:r^c%rU#$:IFgV-Y#OZlCFp%@.Ph;fScrS+XAK0/fYKdEY>$G<du/c*$TX1R9BqC![iQ1FZ)H[8Pn)&EKOY*k<q\bAlI]N$mbrpo[]eM^R[B(8?huUSbdcri<(iB%h"Nq9;pYd`RjXhm#g/2Znj2s0.#8DrLjULN/+7,fSQnsQWt9Lf<=to+CfcKoOK4&o<8jqZ?gcmE%qJq>c3QsnfNF/oK<U\!-aMf(%h&rUlqb1d!Yt3[NWKS>7#9s!,e/A->2\&c?F![R5cmn0H^'pCbTlYQ%misoA3DpS9=,nV9k!cuuX,+n1o9_$G`Ib-%EU[#F\MACh%2ci1I0`%T&Ks\;rJM0N%m!6mAW%XoG_7;=S%W#a=\N`oE_jAehn`%g(26Q$nQf6.9PqTTe>jn7HjWa7t8?Xc\,TlMXBGCP1(7!3%%,*.^Aj"jOY+6ToF.Kge3W>d%BNS'45*qR@%n<b#M#V0q1Y5!62EDUu-mKs^lP##2BUJbQPF(J;j]IWP>"PFTOK?0=:,CEPQOO71g%.rr/Xnq\l+7:$gR7E-ZUrHCCp9f(t,7:lu^P$FRr0iP:Ro"n:J:>7<1m%P^X]t\Jnj-"$M5p?rSlQd\9n4u$NAY+AJ?&-YD?+;fo%\+jb,)_Bk%7J_(:*jif?Abu!pUK.6'>3WApVEN$maa"Nj`AYpKIt7%omjNIg^*l)V1<29[bPZpYn[>]hit'Y-eb;1Qi5ml$I`n;T%"V)8][o6BA*XF@dlt(a=(Q`ld`#3DGc[YuQPTr.!Al7F@49tK:N22"K9,o<C]tH(NfAUP&fPf:XF+oY4dSZLp2cZ3r_>$(7@8Dbc%h;!V`4-SnJB32TH\:8U;)Q./`7Bg=T_;\\M?jnZA/64('\[C]^"jXTHg%U3uC%^(dnR+"m_=QX,'R(jRnM>a)Q-=,k:%0Tk?I.<`%\qA89hERR1ml]E1n+hm6R7?GTFpco<QSRPT-gOZUqK^q,M5SZLA)^-Uk[\\^FE2VE#R;iuZN=6D2`[1bI"U^5Hcj,_ff=gU^VNKJ%D>9thh_\5"C%]Y75OW<G0@_h>s$"KOqX,ZmRuda]\!8rKU\CdUqkh"A5A01jq#%6UM4'+.*RhYlQ^7!^o@Bp`4gQPi,JDCOUM`YY%p]p$k5=TKWJ'.=Oe_/.QOS&p.gtdLKr?OJ^'X?H@]*9t6#Fi'jlh+O,OY/7iR<#i[FD^PF7<5fM/\8q-:%l>8dUW)!6Ng>!C*+r]%Ml[2I5A26PTc8O,@h50nK[G9;!4.UT`(BeM>f,dK'>MnmQs#jWAn#@f)10=f#i28tF\NOsl_c'EUIZ^p\F8@!%^l3,]_1J70Kam@%Eo8<`;E;h6K1-%(-^qW,U_D%.7'dNj!2&#jWE.]C;(ggt7EAT4n\el^6WPrrgdh-q$:Gn--FDO<R^^YfGs>HM=l^k,nQc6JEh&s]%)7%;(1pqAe7)GZi'S%H[*0(j1kl't0KP=RYdaB^'R61F_f"3<c`d=JG>Y;(EEqqk$^1u3Pj_hb\=oYO0Cfc,#lE,MU-(2q`'__5O%]i_JHC\8se&57R2"WmqOTW#b'4J9S,%mXYjnX$r\\N>5R?7Gl:mP_`*!Z?-)*Tp9D"_r&;F,f5g/U]H>+=nY)>5VO6J;g.1C0<Sq%?rch^InB.PhA]hrCWipC[X"W?20")mE5.D*\,9.eG^o%pmVQ(<CH'peqd-leFW^(KidLXjZFlc9Y@@61jGZucb_LF*]IO_3((s+p%kj(+u[$[:2=uhc/KOFZg%rk8e,LD';+cga(Hb'T653r6L"91Q-!)GmO5*g5e>GUCL)BYM9'>%&`3,Ntm$W3!k(/02cac[;o[&593%Ee)($mIq%cGpS[G)T\$AV[mP1ki*7VVTVE2(go]Bc6Tn]jFheiXb^]b6^.M?A'"q<rp<)liRfVRYX[74;.e]HZ`P7D5]+cr08k1b%ob9L;iDt+Y!C]t3RP3-S^$[A=E'T&k?>h4P6jDpBJ%Nk.""J>0\!$Z4\<fM=*b;j0]fdkbp7?lUlE-edD`%u*6&51*I$ku/!(Vg<%T=6iWmcT5@^-0ZVkeAQfRthsLLk_?JSDE\);I@L*'X($aBr3G/)3Ks!./u-g[L?C2fEXE+Mk>mS^Weg!<[k*AT-\bQhO6sl.Pgm%%is/4VBl8G#[mlGL'(OBHfB%_1`i=<t4EXVP4\FJgM,o0T/CE:FD0>s`S05eZFIWHNBGAD?b%t;08iPM^f3>fb6?1E([5E-79kP+]%gORaud"D!c*k6_f-5^CkX!rl;'UAH.$=',?=&FgXVVi1LVP4]19d*_jnJ%7uC'm1eddNDG;<&ZV3Rb#c]8kh'nnc(O[[/^jWfWin%2W1`$H[#P6LfGu`8tHA*$T"7u@B4D)^/N#<1(9_Bg=Y1h>E/"RcW4OoWa+]&.(`B*9$_c4\@k&M3u'U7SM3`XrlInK%kSrNl#CiK%SR$Z*dD-Qbi$8bPjroJq_')q_Hg8;CR)PJ@IHeB-:-Cn<3_ee-%ahsYH>;$B_KWLt8*L?KE$9XG@%2)>29n*%>]JTjlu:@3?b\`V%^E"qH>:,(L8oOh`$:K.&Wc*h%Git>(Tl=@cAilOh)j(7GCB@$lj;8G:@7DBVB&U?RDY)*h]CE@W`NA]NG@Y_+Fug<$YjL;k]Keou%6gMW^TbV)RH-"<f<@gPW!Gb<A<@l.Y&O$s!9k-SrdCQS&Mj/[s16W`f)`\E=33Xf;2l$^Qjf-%ZG+"KQ=5g/e.H<@r0u]m4m\PUL%`<-Xj=W1AY/1h$)Yc^A'a&lLTX<IWLYl];$h,6/JBS=>l/:!Z+K*.\AU"tf>bmg9PA0Ia*KG#GL@nC)D(t3kQoqlmB$6G)d(3mrh%QF_B79:!=,=,ja=%-#khc==D]0aX$O@ZV=-jKUBsbsc'&5TC'KL9SbgDFi`^A776%h&'5YjHMnNM`Tm>l>R_ddHIbU'c'@Uh$mY4%<M>@%Fd+1\71R<]'Sg(no&.;bA1n_O0f_Q4Pab'e,f-=qP<.]\N6Q0LODXZHGCC_8Ql"$(SXXn6(3&lLoXqJ!NN\OlMd!$fT?GC#%DJ]]Pj2ABnSpDL2?6ki,\p6/e:V<3-rg`45I)cXZY`RMOc@L]E-hST)bEr-SlIEuoYNj?cg+2lDJ;sK>p$PqT,,1Yb#_`M;Zua=R%JU#9$dZs/=Z?dY[MSO?An*@^k4.!^g4L=e@*6akF-LB]UF+3J\G^_2!R[h'hA+BKLS^**\%WHPKN/f3iYIA9e_D!#EDlrs2S9F0]%>9lYo3\k[Ffs7A-c]J&7"O#6L6)+FfS3\Zud*'tq'+CPa<pq,@G)C'\d;]d3Rp=&P.h5u?ZOo*gYdALj5n,e#*-;$52p.F%h3@N7%;%b+cF47h1`N.OlZ#QT\kKTpY4PaDX^IU*ZhZNUX]lNgE1-`0BIXLV/P.6R_]+/o^-;1fZn+VW:"&:u,l*of?6GNI]4HgE]8t!g0%rMI6n:k;@P%T-R#\"Lb</.O:4?CHZ1G[KRokFC-%R^mRNm9]Er^96%93tF1,lrMu0f:,`*8Fd&>QXr,JGn0UCHZj)QoZs,hr-?GI%=[&lkBll97]EL@p<ie:8S51UdH2X$&@WPGWHn#r%;q:gAjl9V1D0bH%NTj<`F+1-qB/,5V<!1HB"WM_r-`@6@T?<3qS\PQ3J`ipX%dM"`/2=UNCf_0Ma:i67$NPm;]G>FN39!+Pl4d\d<&`f\Cs62cLrFNV?hImp1riUGYEg$>JU&X'"[$.e),o']U5BMDs^*Vo]fqb-0%*[8Sf-(")oMiDJdd;DsqIj\:tFF/+S[9$&),Y?Z*<-C,ZO0FaQ:hfPM"+-1a#fE!^Pg#p&DuWLYUH^+4.7sO99Loj0o^Hek@ip-p%NBht?ALVnhI!Cg;20eXRTkJIIeSRCIl?ZKrFY3ES:j"@*lF+Z?LE'nu;V%.V"EIg[TVbM%LP]@DWb++_[Ze:?AIVdDE#VDMeRXTU%%L&5W?D)/>="1*4;]E(E"?91J=]7,>;V!PlVdZ8p$R'qK7V<h9+41)IQi-HiJ5T/gqgX1@+,QIT.rglZPOk4'm>\ml1?&O-2mOp5%4K3*gel44/[4f>FXCS>C&g3@rL?OGDMSUHi"MckIe2cklK]uXqZt7%9_[J@;#[IW,c8#eA6-QF3C+=s/ZDqk7'tpMW(!AMR;G,N'%<"mko)Q&H:LeJ#-k_=]:E^1C,6*`0O!mHsPMnH"JWbcA%`":TUF:Nl5&:mP4K,n&-_\>[$`&H(oTHWfY+@\%:'6crs_-^H0CoAt:%C7'k\+:))\b$R1D5m#^[4=SL.V_a,=#(mK0%PBjYbguof*'j$>J-$cBajTrW9eq)G+uOjEc0C,%rW&j=#Njs#lI!6Ur5HX6c3OeW%EF;u$[Lb[83.^W[e>CreG",Lg&]"HVCR3'cJ<uSP'j3)`Toi>3%$=7a'd8D-d4^HE!u'&0ZA=2%YsReq>-bc$Q4s==;9OM&P+mhM%gMd0a@sk4s1^-k/2,oAIBU/sC$"@?DJ/^-a@Cu#]jCo4>DPQGiq,W[jiP+)$;jN![G1KJH_TJ7Y!'sN+k)_'A:K#+dk]P(5`HhXm%D@PG8@'X=)eg)G7/Ap9ZKoi_k7RAO/CSr4thk9"e+ep-B>E!S>)_hJXAR"5#"3iE''U]+k.9Ue7#Ql6$W=T9m&DNl-1c5Z9/fD)d%3bV)CLHsCg?b3(R=;/R\)p`-Z9bYNKpOs_MX3h4r^beHKUem6TU$Y\_l(2Fikln:Y&LR/'baPC[OG;\NQ8dD@0XIbl!"l)^!$gig%:dsum"e_tXo7E$_1GAM'dauEW*rteUE<T9.JuN/qLjaAQ*uW0'>K)OF^sKGeOoUVd%$@hV-n:+*,aO:@2hdo2)+Z;MZ6kl(7'I,%%9`bI,8)A;pVP5!=P\eNr*,*8j$pi&[&a>1,:a,:q[S6pZ:7AM*[PI%L9>aX:#66FA=[Nj\31V&i:^kI!6Ef'Ej<A/$1'jEj(fH+8%BECFr<$KYn\q:SKYZRb6^]7oE/W6H)1lX3G8FKAS7>)f&$+`O994;KjA6HaVbE>9E$I(>*YrrF;4[qb+(/"t)JX'fNGL0tR3Xs#p%RS$mE&.d]J$S]6A"%6'^1.,WrdKpY29n61t?^YH@'hTp<5tdWCM(p`!c*F-DoQ?G9CrKFo)'gX7>tjH?f?SnOR]+(@83&JC1=9)*%1SY&Gh1jN$(ufM]PqdV()@#C@*A0e.kqH>)7U&6cK=n'PVG:H]C^Wl;gQWC2`6\q4q@'/:Q:tE<OGRYTko<%5#N9^1#UgBYc*5<9%W$76n$4n)dD7^t:9QOU_l2],Go*VN;WX[e7KUL(-AE6]1j<6117bj;D9sUjX&>;5fAh1*9+c'Ts<'V<:R;\tBPUo1"BmYS&5Sc*t%E$8bp#`B7+!_[S"=9s$Yff1SrNF5;:[`(2QXKbLC"-M7LB03uLehE:b(mZe?B"9'3d](@P5p%N0W<RVYWGT4+Qf4(0-N?iN@AZJ+%]LKJB.5i%]_m2kq2G>_QnJ$\AZ=SYrXt#[4%,@:-'e"aX4C*/r6D?`_PX6YEFB*u"F$Y>EW^P]BFXhAV9dLA(eAri7C50UX`>6s%%4J',XVOfDE"C`"uaT-4`k\F.0+L.SCKVr@;e1DVs6.e\nC^qU^VV:Z"Vj&F!LrAdT0tI_O-.#$^V9p$.kt2r8Gf57gD?u](P/riC%!te4*9VKt0#id6ZLG>"A6roMn6m7jt#_K).>XH]":krj[P\Qk9&WMNIS-WLn<6([J-O4XL;hPa@'1!2`Jh79?fefe+BQ4s3cEf&J%.9`5IVT?=u^1j=p'*-u,V[10E-<,Xt()Hu(NET5a3"ZEJ@f3&i&]CZonJ#MbK;UNs*=N,q>[8"O7&t@tj8b(8UTU;aP&.sHBp-lm%F?s2"!*q<9IfO8T_]6rhp#q.qL604cKV:3;!`9pS2`O6T+U0<o9Tr.irgKL+=uqE=>"Hl<OsQD\992N,%q9O!#e)cR9UI$FJi?)+%hS_*YcIhP[>-b"#6<rSl@"bCJ8Ts@L]JVlTBJ.K.ll%FfljI\8;,.N"*8OdQd2XAh[Y^:f/5.GpdFSRC#Q9sVP3,"T<A?K::sr`_%(.pG=$nn'dRp]#j&a>!G%&sUM%(ch"RKNn5O$X0[!A=dq-3W\+2k;":J)g5W<@h6oD7>Vg0K,L</9SDgL7$mF'fk#88rn2-Eu5^5%,)h=;"@6g_.$cE[R&I;5cCfUmoK1_PiXef3'qq.,+p6F(J8c)J_QZF\MF='T1aZuj$&<ITA;e3D."[+)4)"1V_pNS'LkEJc7$oe4%%.go[-N?ffFQNuR)J@@2paNXRNA0]$!7=T;=GVh]APlSRL5'8iVC'*I(oD'#5DEtj=[NQ<Jfn2c-A=(?0[.U_emst3:_,-G91`.%%;MZhsVBoVm@fQbS$pmaO*D%)H[q3Fj!mC]L"<^6,oft?>!*&K($>BIB6F'/ff.n%lLb'uS4k'q)G/.Q*,'IQ@!9+A91aS(P)jtb.%LVR[r;(uf\/-S'SKch-U&>YO&qbo:F1:da4$#@-ef#070Pm*O?"$_TQR^C*LK\D!R#5:og*Z`of`=X>F.NW91<f1J(9i(.8a[5Y,%&D2uHY_L))Yh(&O\9GMX`B@+*AO7b9[5`g^l*t8;.:IU(Kas$1$Ucl#esZ+1bZnZnI#0Q>\O$j<*ggi$AuKU^QjlM1FUp7B(kNp$%AarK^J,p5L(DC5q$O/I;VWro_p:+H<_/r6\HtA)C/leSqSun`t"#'n<V8n'tK.fYK3NS'GL9.mg7Fn"E#f/@!-3T^b92q+Ll>?lE%:S8k7p+=`f6DRN#RNfHo0ahk1,+p'o.&*B(HQf\+\g]$``cFu]=V3QYInd2'M"OFqlYNdZ/]/$;.$#N^A>ob[PVPtV"0or0!GYCR%KL*ILV5BT3QG\BmJ0@rn%'b]lLCZ^*YmP`6'?P;qP)rCTRP&l'S'2PbjgbiORjcR!coG?_g9q,gOc"3!9ikVd3=Hgj'M5MM#>nmg%*1f-e4;I$3(m`>Fd7rmAi"4!Ab#InX7"GmV;>1V:k84f%HJY&L7iegF\m\0DM$8ta#\k<e#cP7AinO_OL13D@R@pZ4JiEujX-tAm%F$Kc*WeMqI!G7^D/Z(4Q#(@+-c34aokI?""ZW'4io+?&^3C4(85V.PTaIlFeLiX'bigdoR3/<B59,,mS2-ZC^;4QZD0a4!6)I=u>%#FRi=k,O*eateWqqBa"W.KpA`&N@N+,3tsh$+,KU\-sDgEjSgYKU#O;(m_\h$P6=H"n`T[a'r&Qd@1uM&N/9f'D@Fg+HEbmJq;p<%.jB#!!t7aZP$D2pUa/Op0-,omTuRY7Nj^Fql&a6-?kD=2X"G6&PldNs5k/CMW\?2%?,a]/$WalTe->uJ\r'gHh)7$49FY^P?Qoo8%@IR0o1AJPMM[3pq.YGYr>UgZ-kjG<H$?g![_p6hM&\t;$LZq@)1r-<UK&KF'W#SZ%0]iCfC`n^)!!S#>s%Y#@1M@Z15SOWKfb(,;%1'r*g9lu3M^sM^3%0aL"gPXq8JlX1l3]J05^^b^PKi0tA)KA3u3#"DF]m8.]$\mfL:.c*$kgBqP7FMBf$&GO3Q79V<(ksRZ7=5aX%N3&D\&4]H6_=7;WCU1oj't6\<8WKAB0O&\c#m*dE*BOsTV(`^g'II5H#=0-:lGaPjS$FK$\-`e).tn],n5/GC_O;<rb3IuUBFo$^%@/E50*!@+t<$sa`/r6UX4[fd!0toml#6nL;2"q8^ZHRJp23Y6WgI`Wi!mChe'%VmhT#S'(I;lQX_ol`\0TG-9_i%0CU;Bqj<Kdh#%0-)7\J8G[Ed&fmZkDI,c"Scdu0L[k;fq9Ia;PT[.R1>+mQ9V2?k_-',(tkU,JaaF<5V,R870%qqo<&s_oFb0tbRe=")4$pR"%=cq%epJX$/`MB0q1*5./]A0mmI;'Gn5:N!J/sM$^<#efq'*^rAP3BN@M".25dPSlY&l8RW,_lTbunQk0SY7IRM^\bEBbWIFBc$J!GmVQ%0SUgU7tAt+\?<Y<R8\gW@"1kXgt\R?)GKqK&u1DYHAh0kY]W9`fgS7XE6K'dZ"2P;-&GZN%&*Y($E7M6f58EIQZ?[@FqtV6)n+<I%(5+RPgZ)Wb%,QRn;h<R279E[n,3auhXo]e$7oW\D"Yr@W.q/M4)SF$SB_@[!/V@dh6Sq#P@uc\';,U[h$:ijMakJgg<E6h3A/MIL%Q,BQ4(Z&4%KmQPt7%!BOkZaKj$"Zq;Wb%+=3"Xd\]]R#.fRnKPX9=ZE]J2$'!@(<^Q#a)u'j2@SDr9>Y.B89D\Vsh':0<A]L4`&s%'r&n8,)-1pOPRu98=ct!1e"_TR3kZXM:'5?8V#14CDRD7V#UXT>V_Ra=:3Q[=;"b6BNPVW&7)7J$#:AI5VWBAke/_V^e:n9lmh&f%FoWZ'V8.GHAdI/"?QtHIV*KC9.?d"3*-$QbO<oTJ#i:kV-t4W]g/L(JEe"gg_Eg","]qI%6;WQdQkP^9;6j1j/1'ok4;NQTF(U.6%c-os3)O065iLgm8+@T*46,=flDH/&4"^me<CfaLAFDe**ih.!E$.UVA<!n0FGWSbO\4;]tWTO0A$TaBmeo\0]"=phjQ6JSaX`sk9%_br18b#E?<\.m/Y-4<$^E@JC3fi+eg.0))F;i"(d5tG7<$\[P<E9.^<rG7sB2)Xrp\.g?ea<pREJP/Xdd'sc+7$q^'7cRB#SMXG&%=MtN<g,ptk##C!D(J5iT8@=<"MW7S;LsV^n_tkH?,be>e\.m.([RT<N86cM;<"dnY"&gn[\:Q1b+"4!:0EkiT$[.4g"&-!g,8p@E%hMfHqM7Mnc?j`2H[OD?[?jLbq$P6TA>_+>kU6\Cl+?&?b2KbS#'Gh%`,QrRmE@Cm]Z!L11$AOr]O%[<FP@.0)E?\'\-S>SK.uA0)%d8I23,ZE;0cpE6gP<j`X\.jHa:=QYJdTNZuO:rP!K&>$FN<TnA;b41U$P4]@N!?-bEeCn<&]A-u0KA1t+L^\F9Ygd$;d>"Z+[q'=%=-ADp"CbdjG""bbKFpQQ(u5tF6rYu\9\XNUeHgmH5o**:`IiCUQm&/la=s:'29_-n@FUAM6,\jM&F.bQb!1J;<]i/`<#>m4#RPBX%Qu%XdHD$'GfnqG9)\O?RQjllU@CZEG3Gq?c&3cltYX9#B2.lij0OGi"S_<6M0aQ`]KF#K\^4Rm79cJ/t#Sh.kM8.NX+RHPtYM"j`%I/qKMi%PC)V]Gk*)\W@?1WBJn*#LUZ3/j:<^f>1pdOAd\5?$YTJsJ";Bn3;kn.XI(`D>h&n.QYIbTU!1r.\`smS_>P+BHFrUg[:,%_@V&X*Oks5)hsS-`,$WNW2d)7g/PXmrtQXXMlB>99Pd.*QQHSbA.V+n"A8jR;ZsCh;@9b?WK&P39SeoYY>H,L=.l:efGi+@jUd7o%+H@QKm)0>+plHq$TZ@\hT(;-4#\/gE"3AE*)h;Ub(jK$!Xk:37qS9qUdF_4%K":pn;n".aJ_(0N'S]`1-DH43W!!0XD!HW:!b>:V%3@U=S:oV_s03gtT%b1R[RVSe>M!DeF(DZ9*1/U"_A.+R:d.hPM(=JU]Ym_&;7]$1:>6,l4L:]/@L:Ipa85pCp.!Vk+5$4Vae+\rq%,&DZ.6ru7b%AAa#/Phb./00P4EgX\2.1V$7XEZNn-JNMi*][d.Qn#Lu<>RpY:B;g,P]3(o$(EagDd@QkMV,PC]1QcK(JA;-U=8W[%\dd9.0Q*'?/nJ1Oi;^j`X2SXb(%\mX8VX:)1C46cGZKWYZ&T0Z@P6<"#\0rs+GqMk+\7>D,e&hh_l.@al%Tej4bp6V>F2j\NNMM-%lr!&*]+b\\7a!S9Yc7n9$PI"TfE;CnfJr8_0E)6M)MV?+C_]NNX=:eoU";+uNIY:VQ25uH_BB[mCh6ZZ!f#s6@o7rE-;Cc#&2Z0G%(Es+kPO2[qSH521,Ze7U-^>Jli#ogkM?(UI_feC(PKd%+1iO:5#5F[>BQOcl!9*7K#U;HE1B06;clP:&!$WKW=ZP19,^YA372QhF%Lt?YJSAlS:K;-?U!<`ZK4O1,ML*Qt>IlH1;gV<jp**K:7TNUIje$eJ_O-iP%2+oL^0HSc$3C"tkRR0>k$"MoD>G+9?B[_SF(E"20%TbXTK;VV7P83e`aBdRVq+V"MS+k&f?3A;1"h=_)X`];8*&/#MoU.F$HR(Fq@%MQiIJ<;QOF_S-2A:\3XTo7)f(!@LuEg]4T6*!rM%"ciZhn1iiT4pF&-cpU;?)Dm:@C_5SMK**@*65>oG)aJJDp`Lt915$/>19>=uHqb1$!rsC<q`gJ1%`]VMM>.:bIk=#$e+t)POOfIn%5,+&EH2S5Sku6K\B+7Bq84c!98No[:5"J6tV#I8f)o2Gaf7=%$"`Z+t&uknEPuMlEYjK4Km+hhA@4)$t3'%Wo19?:3&hOPqUP=`W%HjeA69On?3ZL3GibsLP(GRlA5$BcZ$.0J@<(26R^;;D;l1b=9n7q!;]<S=m*]LN)9lm*2t#=lC:d\q&-QOfW@=2ZXtf)R.p+tGXs%eUa^<70X;4R3?I(@L>Op7'S&e7S"\Y0pZWB1't6u!<Qj>VP,K?(cMYNJ2@]_-o`>g^6#fL#T5F+UK3*(.3L+G3&h&p2^,q>.&3!9%!'c:u7"L4LA2i81n2OA^0X;fuaoiYS;]PiU#T]m5XthtD)Z[;V\UOU1ZpIi(!XpY5ADH_'KHV6T5Iq_l+U/D,2N]+?/HUQL?Tdbb%BtGOQcR=J9-VcB48i`DL&C6^DdE.4S"Ac[jA!j-_QuiOc<rlB*OrGV7VZ=W&9UK=$3^Zk8-N1j@\djDcc[mhuTbNr48AQYbRj:\[%[UB_:<Fs0i$;s<H68lbcC'9%q@*GOS62;HeWgLOY6W`*?S67NO_=Ku%r3^Y+LrU%R_MT_#"*:?\s'b?QFY/MsDDCVel5_?r-Qf5R%;I!o^7L,j_8fHo!%2ag/S@A52@o*lIeh/fY"5*!WYH]rB2'n,(.:-<c.6R2TUl6%3Lj\L>BON:eNYpb*Z9-cY$uU=n&h.HCZ3NpQ%-.EMq(=7WcYqLeHJ:WD%C%M9EkY:TM!MW#7h&tYU6?o-`Lq\pSfoY(r$/b'$2!c-Vce]_Y#@OSD#O1R<K+*PFdZ@g#_SR/`7BG$t%,f6R2+rnE/D1HEk9CI3*"(q?s:Y5Y1#`O@rnVbiuGtEftmcV-EW<uH-!<"HES"Ut6dnN6=B7#.iKI%a`g.loC%\+=jiEcp<\%X(6%Ss?Z;C;u"Fqk:3"#_RgOOXL)W,;_G'qh]!N$5%SI\"7SAcejPpWg0o"//$k83qV>___GhA%'aK,O]$!Q?5mG=BRDE"MF^[W(sS=U%CZ`UmGqhshfk,V;h`1ioVD;%_'0\k_s5W-%Zt(<]aZ+D^I2I5h`cV;;o!79`=qBf#p43('K6ub&i2p>@D=(i:c:-gQaU"6Jj8g0T%I/lb".E/E.\ANqnm&L<B>`jhcPG(W%*n7\-$-5,#%TX0^VrqA!RoZCD>H='Ef!rMSAQ6=>SkJQV-LrF=6jcPI85C"K&hr2<OntP%%o@92%:Ki*5l*DcTGp8h<M2VgdQ32r^6A0MMp0Mfr^>k*md?4DZKc$D@]b*[Mcq!'%_Lg*C4hYMO,6#.ZnJ[QF#LdqL9DB:n]GT.@%<3A_g!W:kgFO<[^JJ"(K7NV<oKH)p6[/(uto31ZUSCVJg+Y[XCl$_5#V439NA1s^E)gSG("hYs9ZHH1mnV/0&g4H[4'`n"E<gR[t%U9<XB6jIKS+hXL'T(gr=C8HQ*,,]t=<$C)n<\VI:?6-9c@R^\hVBWWS"O:V8(sU2I"CjAdC-nqr0Cr4&Eg\8q;+u?<$be)YQEc38%W^dTL@N5Ja2jR"7/-2`7.It<oYp4RRIcsi`B2?()nahs$]qq-"G&cHqpM[uX8S0Z59u^4d<n.Y#<0gRMp`<TR8B.>Fs)%4&W/P/g%QOM.VfZ7QS221#\[NdP;9W:KYqi'6UHN1Fkg<I.Js.ko3#0*lbWGND]De$1S9[5n`3ePMF*&0nqjcX(CNnEY34_<9s,gfPM,']X>%/V7J+\[C)4a1YL2O0?1T-XL$0O$r1iIrC9`nSlracT&rR!.#6JA*1bC?VC.Cd,s9j(D!R2"MD2>d1@&\iXhlR^M]"HCC1WYXrkY)%+_aru%fBeO9l',]?\D_j8ICNl(`.nYpYR!XJst$g.:ETFRI>sFacKkg&ut%"f^FV:RJAsl)"SX-B#?fg&&?\`37'8.Sq.*a?KO"!%<iM$NA-UOU%l,r&RJQab@T%QgCm^ooJ<Y&Q:18Er=oqaHkUn>uE_'UYd#6Ne2e@A.13n\3`LLI;f'+OXA9kje`e/IUO>\>Xa(A'm%[L0Ws3qqfD$+]@5J\k&/l:dDqjb7hZXr4,=s'"](q5Hbg-WN25#4ibN8lmOTE"+r6A35oBN+i8Z:UnDi8pm6SIt!&JKiUBXlfnBF%kgoMoIa@9*`SZJ3'i78c&V4o*`_@9]FBcHc_m.!!!bVA(.tb[pfF/U3\HVt_==7FX*WEjiXZjX$E5rpn42;`PKunJ_]*X#$ar(=O%A;?PW#=lYO_XppHUhG\q4:>*^)SkqT,](bVfbUa2`p&;m0CT3RR(shlq>A@=m%;?rWpPn!i2.s?R5P]<NWLPo^k5TGhD?E0EaAuJ%5YNf@hQ:fnj6k#$\jtIqM"Tc79gh>q\F)k./eC'"#!&PGLejm.>:W3O\]HcaBlj^/=`B)qofs9"$`\>=C;Q(]SGtjoe!#3>@7I8U%3Ek$QH^X>Q1F>E&Ds4#[.qZ`)W@RoTGtIRt8AZ+G,8ekp\0"M)XTCfo]7AQ2If6c1)qM>ZpZd'],1k[>R`[A!"3r_lbk@q.'+hKZ%T&"_4'UI'",N>n_):`f2Sg_$uW,a_X>#:Q(-oH&!7rV=$5<nlNq/(SV>=<peYg!_cLoY#Pdd&.8c=',[XEATWK>@oklkgqa?IE4U%MQ3E6\4_-M9c:3A)LVLK7r"_lf8"?k$A0]<ZY=6=.?o>\#aj@C0+<b1@+->0T7of-%&Qii^_OtdDF8!2R1*U),chsFHbaHr&X$33%\lgiH8?&Zi$oV(>OIBJ,N2Qsg;sqOc9`GOMf5D2Y"#qhr5iTmuQiXI#*fc<[UJ$`enZdCS7#m>$de+-d#I#?njK"b4gPn=th<4c?%h_6R@_-OObdD>/0/7!@!r*i-HK1"Ub;'H,lD-bgu9nf)YdI&,rEpF),F=`AdmaEPb(9S=C\$$e;S);gsN@8//O*d`$7:E$Y!o`03%@B8;&HXm_\LnDotNI$I"e!u[_k,b@-;u23tG[p=1a+9>eE%6b85R^9Yho6.HQ/c"T))'&VpYD\dK>tdY%n"pFWVNYs:1_FRT=*b.%1D0PNY)Zg9I4su6=l'k,gE]58Z("dJoO9K.dN>\mNX?)C:APRD:UpsA`,E)(e5n4@:&O0/G_FT=*>%'K0HFK`#<Y!hBeSF*c45#r%p,j3f%I<s+3KtI;-SM(#(LeJ6L_o[[N50bRLs`FGT#A%V\%hn?LA2UlmOSJ"lP:nu0k="Lc/*>?;n*\A)DgT@Un%>cSPpckc0<d$%#gVdQ!GT%Eg+fL[KiQ4KDABm@!>XK8f.8oD1Z_Xt8#Cs3YR3hu#1k=="g<S,X$$-j7sk`*q+-Ea_d#aUobKY"(=p>W?]-+8WA)Lq%L4F%kO??q4]+nhj_HJo3f#"\r(5O$2(Mt<CmC0kg$QJZ9l?V.b%?T1&1e$q@lN$<84r5(.-fU*_p/VfQUub+/W6GAb*W$j2A4Au$%i8<MHNI?6(huB@Y;X>ZW1T9q+W;b&7qKIQas0qW$R`-6`-6.EWf>'+O(Fi$uaHSsgouB^S<gpp$>O=o@pb3fZS'q_)4cj^B:%0js%R3RO`Ga>0r1p#XS_9rfS1ooH55FBBL1iDf]!AY3jk/\WVBP`d?67`'Q30-2pkN=4bUjPTSM/SSd)"(08k@.H*p2p?FhCdg+J1&?+%j=-19O`jnkE,T+MBYqqBHmF@Jb;L0@QPO$dL<Ck9KFAf=6Wq'Rh2'jV1+gfkPFp<V&<QDB<//B\OI+BPFMetN7OPJh%.HSi8&RBC%\QU.?f!4*E6ho_7L=oZ<]>eSf(r^\iSi'kb`ME,[ddp]'e8J4=8eBR,a;76^G4l?W4K(0PrsnLWQpuj;`f3)Q]]@.&lXrBkQ5(OF%%58%>20+_[8,Y74Gb<F5\HS,b@fmqTfjRSG2GUq=AsA[OnX[ZQc_L.oGT[N*qqrOWmu@"A>`6644Hp9i3457TLUee&<_1`S8u-sh%5FUde5?Y$#Y\%&3,.<S"&kM2BmW=C?&2=gl`,!CX:mL(4G^]8-V8Oa$1B.GB8>Iu+J8#7]-feJ>LqiEFM$ZuC-Xa\6L*3)E%C9[V%]>eSf(r[kc?d"l'4k?\J15s`qJ"In!Zt=DJgmB_SV0&=WVth'UMtEuJJd:n0H;BRrq[C$d5Ko*s'i+YdVMWo52pF"M+T<Uirb4P-%nUNm;aWkuSRL`)E.XH!Bo!W)'.3b)&Z_`,[npU&Vk46jEh;eK<ogPDKF>t:`3G^]VjPbZ:e;fCskP/<E9G%fg(\Ttt`)^7S0Ku,#%*3o8&dbV.IlWSH7="TFJR9RPo%'c%Yo4m@HhYk*:gpsP9d9%`&361:"\p9/VH"c3R5*T)0N5H29^EKdOB_<e,;s;=8H_28s%,220%RCA1Ia>hA_7pfW:<f:gBfWT0"Es04,gfqW-?45m15<`IZYenq+)K@JtTC=Xp90SS2-F=]R#k)fa6&o2m0UJga,e7Ya\]1.VK3X=W%";shR-(0A'Z1'=l=+,O;b`4,"k^+oj1V!kg.pG+i?K9BiC,f7UXccF<Vq"U0Y]Hn9D`"`aRYo^"AJr!&7PcbtL[r?\Cj?!t<U7^Z%H8=PT%PkN4&(jgkoDM7%k4g"^=[$L2PJ]P0CAaTPd'q",NBpU5NW"kSkZJ58,M#\nmR"k*nVs<&KD^R)'3[EER.WNbA=uDkF.YS<%;JFQPjQr\AliM19_<1cfh%j\A2XMjq]qs:2&=*4lq&;%M8!pILaXn^]Xq8qT_op*UY-U,r:-9=^iW2rhOV:fd=Y%I<S9fG%cWf'i%4i!El4ZnS>*OYeI1$Z;';?;,2#58KSVudU1#OVVOPmZ"SYjgI4<gQCp=FCs5'VC3)!uFFa$=aO$NR_U'YXU7/n3WSQ;Wl.e!M9Y<%i-@5EfrH7s+W0#T!GGThR-p-*CRL\*)EmNG;B=^I"C_Fk+.0QPPBWS,_AsoHGKbq^a?>9Aq!p::976[a/2Aq_J0lM>i@ZUF.O$mL%KBPA+io9ND`P>Y$:U>$`57_,1luk37QT(8;o(m-KEphrm8>8]L*)aGc/FhZX%.5p87@Q9_;O[NFi]X)j-Gsr342g4i4-T.C0XI9:%*!-N0?01C)00(4-QqJ23'G[n"$:.^inKVJc!F?DaULeVI-j^BqdHP:;/3QLD[Oa^HPEg0%F4N8DQ@=:as5fc$S!KsXD!k\XoAP;`%.4ZT0V0O;T4.)Sq?T1I-+<Yj].fX;o`fE?sm\35d=uGDmUr(,nLs;be?ASU>eR?]_QpZ*+R.#JH;+;df/e8i7(`T_2%UYO6m\kDV%H.4c>oW?h>*aL\45j=)PMN8+d$h+o@-CC^4*9H-NU`uu'>9o.N?rR<_P<R!KZIdQ*aFG9hI%Kt1p>/#r_hKB_7[YgN=?ueR%i`M6%,O7^-_t7_I.m@+To"IVA%$(-SX$Uk0ZBm8,m"UV*C^kGX&VM:=,[/9!#*U0$.%<BEKN[.rpGl_6-TsG:ng;kKVE0jN-T<S-7&B_P%qNbIBpW,2sNqlANdP%Dq?I?.jaS%aM]aitEX2cS>!RURsO23Om.5]_IL0aprY5MZ4a21G.k"DDD6t)*_4!?c[?AWPY3i<^9OKFkO%KHjnO*"+:elKbG0rZ!]@muV<'*:q:@N'<6B)WR,WE&18h`4-LKd5g1-^pH<<QV@Bo2\cn1&N9GGE9(OY2t308p0*$QFR9#+nc+iY%ru^(rJ*soS4qIMjP.s.,6pF;CTfu,GRSfbu)MT4u?f+!Cqu?C<KhqLdHL:0>?i.V+\^Gti'<49"Fd2nIXKaV<Rf=Ur[#h)X-cN%:%BH_)E4uq>U,TId#qW?K2g*CCbn#r;>]QW,`qm.B.e<+eRaUjB1Mli[&\.rQdE$5/3-YX]UGXW#IU&m2U?:CVb1,+^]Fm]WA\1dgW%k1Td_,VaE*j0e4EXY4\?htm5>7s.`H'.iXrGj0p_R%C,[rmf+]m^oa]!CK_$=;$+=B/fPW9n0qVRZs.[0O@I%`i.3IRn3>%4\\Fp%p-((T'=Y,0XQ#'OFmQ4ZqS<5jO=(B;WFi;\4eIO0n8&:Q+`S9Z<Za8fN[9Vj"Vi[jeC-Zr-V_2VAusQ`j2h@pBOG^sUZ5X5'i9;*%RrXV6W!Wi?,A+0Tn%,tp]M`/g7UsO38,Fc*0GPgi8[)(_^79%0IRE2d\.OXG6KOi?<C\)S+t/L@V!I&IX/[!Hg[c7m6LDTB$\<pA%dtZB)$fM7"_m<q_L^a@gbcY!S-V[6;=W^mpeb^Cian4A@ge3#:p+WA-JN2Ku95^#8]oGCgr#BW4b^$aAV4;$\j0J>OG,Kk\76&sS%$]d`g;?m>1A?35Z8B'/IZHD%SMG[tC8u^,Lp!-u&-XST5Ek_n!BN;lK%6#/!PTjf^84H0OQHg\&<CBK*T^X/mYV:^(&=LiZ#d`<*%g)?<\]TbDk9u_5_3c<$+B$n"a$6'(M'XlU2,.A/rj?hL@BJicL$9b5K/NAuTdhl"U4(OTo:OVRtW3$.f0VTa$28Q6<@@d#(qZ7<4%iJ@>r96k>"L[rI#_.I,_;f/fAS65ED5sY42VF2:ubp[GCYgt?l<LOqiVl:Ne>*/Y?U+t#:&6]P'Ld:[qcg+^W%$@jB>1?p]2NnlK%/'QNE"MuX$Qk&2Z.,18`Rsju)^8^Bc(W%rMf/T+B7=2)QC\IUQn6j#\BaSZ(PKgYkm0:bXP>#cB/\r,]XAMt7D,;j&#U!)Or2M7C%K41iB/Ym:;"EJNbY%u=&:"Ouls4o/o/;p*_lCSg&A2GgM@5g_-CBpqMXjUH+SgdeH$3)tJ-[c$Y"k'f_8m7e*)HX5V'FOIA@@Ll8%L]0>nH.?^3K2l0<\[r\?REGUf.1HSKY=<W:A3]m&Qu%H2XDLdHO>8h_ia5O`,h],;;HW.rE9G*<gKb*[<G$\bRbnoW#Xlj2Xm&J[%M0p)Vmr)GO<SsD_)^45E#ml/W9blN".K-p)6>DW\%?!TgE\>X9/gA7T<"4Y\X$=UqXAr3_3IC%'qnGAaW\t-p4</ZN<p%iF5BIRg%N%buh_>>DZP;id2C#rMB@e?50>1V-eFthse9]BOL`0^6$5CkD?[0hQ>$gY^fQ7$Cl0O?07h<H0V^=j"pB#64Wp:TI>0ShA4'j&jI%DI+t:THan_p^l8g0IGSQ`GS\CE<$jH>dO%b))oua%;kHTK]^V0C7\_uaLr">?>HRX$JJXb8P<faa9NZ[cb<&$M-0;U6]kfjk&_h$%H45UI"LpD'0AQnu5/qm2(GQ(82Fb(HT,5pe4U(<6jEF`gs6+W7$t2go8u-Sm8#nHXk+Cf889S't(s%YIbS6fi]SdM9msXT5:^6c9%%/J9[7+$Ps&T9Jjgk!6RAF0aB.9^Hhi3YSh5r>ZUk&sOJZFe78bt)_rbrZ9.X;9uiGFghH3:FKhlgnuM+jAYAgVAm\ij"'2XSuqW%hjdb&Zq^*m<rF][U)eBH1S'=IF^lFW7VX5)(h0oa][?*C5g>7.9fhA5FeYtfNCi<%pY?^41Y7_NC7r\_kmDVDT+o'/D]WGJ.$ET5%CEDlKO3&(Vdj:.EDff0u?sd!Wk<&c#<XU:6/d#4p-FDJ:Arq(RgjG.?giH[7=qL$gDNV]NRPFGgMO6fqR_NE3+=8`Z@O(+a8m&-.%=(1<l0q<?'q97]nkGn0eXGC&-B4l>2())5Zc.>[W?tegtYu-])83s:7h5NQMWnE9,Ko<+1kt1GYj6%sTEg-FuGWj!(0H27bT)OHu%rS3uH>q7?;)JCG%@\?N&SZMT+7JrbK(ZSt:n'J(C&+t"*"&[c.I*Yn1QqSC-B]JUYYlm?.mn+l5^c(:7Xk:e=/Yf()ErGf*)WC#l%NmW8)fV(ToWt[$\&gpu;mskk*=Ss22h:U=<rV\pBi%\kQ=)s]5f;Ge*WhZUu/!R<LP_2`-%A4[m87YD*LHN?k;3!P@2hk@-2gju6%;S1>3hVY3NW*d!8%l2fW'6Vc`998TqHinjX7TIY%2Q3l7oan;a5!P%+TglLp))/p.=]!GrjNVp0/<mZs&:oV3.S=:m7UAJs^LC7m%ES-Xi@8s9G,g@\S`lR!@/S[gQH1a\Ha>"g=TgAEC9/Pj,ariF4.o^SXbhK*RLJTifbs$B%SKgQM$:iGVDH0_#F/-G^`!BhnS&Wc_%ZJ:87>0KICXOK*oX/:F*J@r))jcN`CFiB'OXa+(D6K)BuXmfm8WpMl%O9utoXb5_qkU?h)]/H/$8#`CPW&"TgSlVlt5TA(Un5Puo%ZI3"?F'324h)[P9D,ot>df:'FYtXj\jKYajl_g#5JjSp<?:.=FjM]#X(K4T_E#=;*53*37/C15d7u<_pgW!\Fph>DgLH'k\ENK.t%I#T[F19('8oUa:JD:!3Bf8`#mAsPl#C_qX5AT#'br$AQ,XsakVPeFA>K*.6hgs>b+e,oKc^8O)"1l`:-.?FU$Oh&\rFL_Z^1leqH%^#(Y1jMVc]F6IZB6<;3H1d8#Sb%W_E@h-SCDaC%9@SD1kq9>/S15m8<';aIiohV1b/^\7%YD,/Tg%o.b.BY7n^Q?3N4X*JiTN%3U%;e20!&WKsZ+0D9Wc87iVF%>Y(]P<GVbc>$G;8^h4rnn;/G+cOn5@dnkW44P&l"ZFA$hKOEB3eq,d<?[N#kdSp0Gs\G%#H,P^?e1,%=EIc7RB:'ej=eWT%@s[o;GAftWbG]TR.sfe-nGf#mPM)MKpes;IV.Cc.`I[P'#%,1C5!)Ab#CbGY'X`]'_Sjh75hY0Eds]+=aksB%D)auKhDG!d1mftl"[^QT65Rm^D.)m*EJr2SVS434ms!78UXUt,/WdC4YF3;q6i1-22j[Y7)RJ0>3J=0#Ziap7cEYL,8uN3Jm)e0f%[GA:Y*DBd0,a)QcCdqJ)DVb02]h0cAYLCAdlT;BbA&TL"3VX6<b@.j_L2FGPJ7_tD;q5m*bi>#T%dG?cW1l%D+hdVp+<^<qNglgG%=j#831$*J`j6\--b@Z4LDTjY'"3rdmn1&4nWG<T!cVgnj%DmT*LQ_lIN.)e.j$,mY&R>_<qrpH6U7?:%H8sCg*h[8aiS9i%mNnGd%FO"UjgmR1B[5rN/eXYQ&K<Ac'=*Y(kr)i[D/h:$+hs$(LK;Lon$:lf9b7KA[V"G"g6a\\cereH`lVlaohRb!@.s0h_a3[trr3Sd3%kPU(5\BB>nk)]cK+.$.,`KGW@>m?`*;1X]i&*iJWP\Ja_#dW2Ie%cZbM:6RtE4Gc#,Z,bk`iBr?\&&=&Zp!6BV's"_n?QF;.sDt$%`>:FJ$>f'e=Lr(_Klka=HUB&-+'+Ce#@sZH\5Yd5lJFGiWWEA_eoj]jf0eS+N/HJK-QHUp5h=E#=6F-q>umc:^3s*4KEh/"g;Ua6%L6jaZK7t[iMJ!Ts,uXNT?ehR'8fa<YZ@0TuEEFj)@\pPid"3%$2_H.dNA<U[k<>V)<l:=a=;SrQ"rB512X-q[60;#tq;(J%jGVnh%J'r0=#]6Gk-pXI!Ej^LEGcC:s+%,#n%Y$hiN@CaLP)HVsoA5P\b'L^50$<Lm/PR!oEd^Go+G8ZKBZ6,AltIZWm'>ABJ"M\<F>`&t%P90rOnG\H'eB#!q^Z;9O^`SuDEEJ_hVU2Q:;2$\S$273>MBd@?I%kqAb(=,9raS6^%ESrQDaVR$oMXP-`ECTab-1g_98?KK7E0\D%i5$s@>f()f;mi*R/haicL17rW-Od/8q'I.pG$@pd%\1DSXh[X,f"Va=_.4@G8Z``?JZG)I4O<fu8JG7i_9i-ai&S`%^3C-OdcH;4%51u[+YN0lHF%ek'`\]D95t1ea.s[V=8t/efK9@-&*trj<%99t%WeAUU)>70ADBG`0GFA$b#;p>(Wa:$U<@]Z62,mb$=U4P3W5M;r%8(<&@R'BbeVl\stfDC`A,b7tM'=TEi5ggF2ZHZ?8<;.!#FB:_o]-o5W\j"+[/-(k6iPGZ`lZK:]dCu3S'nlh"@:dc[U]P$[g;U>A%od91k,mV-l\SO.7*)IgNaKZO2Q!GAVmH$&*6c_=!SRZ`>P'">O18a5[,J9$F*1PS#DmYHgp)_5rWTiFI7^_Vsa!\HE,^-[E`(L^g%hf;F^G<Y,e63-5=F]9O@<]-Wj[=LY#[1H;kfL5"nX$S)?EG7a3(OL'nIpG=,pGa^`Y(al<Qnj!,=b.nVS*Slr;":g7HYK-+NGE7d%dJgd%bW^M.%6R)5gX<a%<[fPZ^*m((NQgR&D5sm@?Y`RX1`2OUW>=BZp80+=EG<"LTCk*uJn`ibF@Cjg9*;BV>L"BF]&]CN^48>T%S3qJm-Kib&Ip$I;q.68Y*Knq:YV]XJ0;6qCIGfh7-U7qo@\0&6kO9+WpE8VfH@ls2[[;]O&Q?tLJ,qEF?P13r`efY#[F5#D90"*_%5;>VFT%PVd3Q/q'6m1S&.GWE"^ArP9od*3j*/@L8Dj@DMkE^.EU_Va!OYCjB,NUUH+oIY7"9TcbiD`^81*@JiZOO(s`[F@"dG5J<%1+q[-g2A-i?\c^g+QY;VB$9RL6q4ijPq-u#LWMQSBpo`V_Yd#Vi;uUofKp(S41a+Sku*Wi3aKf-U>hk:b[H*%1UFKgmoT>:/\`tr%X%0_@-G-]!>9W`[5=3XC9jE6>A#j$.aC5(Z(ANd"hogloOHfV]YhucuS2@[fi5dm64L,>)ME#R`:M*+_LkDV2fc@MWK/A$u"sZ6o%3NadBUolfZ-ugqjIZKKRVR%jn+C8Qd('P15UIM:DTBl#i8uBblr'B6`Q>=2;%f-U[@%C\Q9rYrYc8JlTf`DE<Qrl$qYYISAZ,#Fg%pTdMWNoY&_4hMH\o3;J`7N0Om(YO/=Dof%N.`1;8d3-U=lfARYc<os@!uAG]VM9)<@IV@G5K8\Ml/S:K./u$B\kY-$"3m@RZ%cM6%q3Y=nMiF,"C=?27ebs4Ba1smhcpYq93RpB1S&tKSF=X;77df_djJAiX4R]+4nB4N"dPN8'%20*KlhlKrVkn`S?jM\6`U3Ap2rrie%9#[0ZfJKP2J!CsK`.m$c_=XGS;DZ!p?"PoQ1ur59mHCA)js(utgI3>i4HoKlTl7t:>08fDgUq&d;qd=kJk/[\$?aO/W+YsMnOMHH%,hr6Nd5?O1F`h+PRd=q:Z(rL&=DO9;8F:4V%(#;SKp)FnSTd_P47)*g6,<78<B^S/+]jd]BMoh+6T^og@B-fJ(IWOf):cppR>=>N%41BW2#=*_JM="dS#pEGnq6YH"@l<<'c5Co2s*J'2(q-]h3@h0)?PXBAh-jg.",8A`W"8M^4M.l%Du+egOC1```fld@'D<>0$+']0%KM[iU?j8#s(IGF^a<*TI;*F,X<=s7>"GKbk3AK'[BB?[TlNei3JPS2Zjh-\l@c`[[$=&l9o<RG0i41$BOjGT$klnaJ>TgqRA.bd2%Qc3H;7mUY7)X?\9T*/'q%`IoaE:]sO?m?Sem%C8AIpJCca][TA*WcEY<ImVV3.g$]_KGqZr$F;NVPN,W"e:i!+F&i#'"Ae<;8Q9N%U6h!D>cf@!8b<-u'I"ef<^2\BXYkD&@o/,[@.0M>V$H.Q^`V>D>69U)V\)hmW#nJCkEZgF^_J8T9mC*+(PY%MiI?`:YUGdd/:f]?%AiTbo1rcHefZ#;n;TF:6o!XmnAIOZs&XS:niaWd=<4[$-KZ`8T8NR5T>K-^V5MVWX2E/_#7WkK!YZRCC*s*JBMP]+H$6Q:2@\^))%NZB:$/<I[MGiuc\F576M3t".^7b9I4ip(jV@7U$6HAlt[YfJhebTHq+!*F^`lS+e>.+,\Y?5W-f8CGlQn9&hh`u:^B)$'IV)5&um%4Jfa9192rN8r"bFVRq2?a(@>l3Ma48MYW;mCt(TE=?/;spI>om_Erq#?Xfd(D,J<Sn.ddc*X\HqTtSMacH`i:<pW(n4H,KWY-HT8%,'=m'S^@_D7Hr67oHeSi*(#4:QQgag9kR)2&[oTt\&CFt^6CLS;3Q<.[L(T"@[M7>P2BFFI5hEVpNP\p6A`8pa@<qghlV^<Y^W;B%@S'GB#CP!W+RY3SM$_%/>r/pQ+Efa;6,Wn/YdeMYPhh<k9GPEdc&U^BgrbTl>M4>2SIYYl*D/E[S-I:ol%3nlUbMjIT&*sQ<A&Re%FiD!E:8=P2>)df=6,&ocFgGE+<#-;&YYQV>RsdFJiSf1c9+$1-1g"T;@+c"s(4c9kJ$5+Z#6Rk][H`_n`/Md5D^FUoFX4.*n;Kl_%&I;=3BReSN?HaogjAAMb7t,IT9U<6HPbl*c=cD'RS&F1\\:FfBE_$,m>Grd:<nV<;#:X8+hllprq-t,S7EBES>pTtE.i8,;a@<V9%60i%$S7V-R#kk6@3o_+oYFBf9$lj[\+3Y&[M!-<W#XC$$#Y+uq$jbfFb*LSGA80lc;O%V8%,9\%#[ICF^"3G(5#8oEV$8QFl*Q\p%(UBXB<;IB-h?pBPp&.3<,He1ll)J]GXU>2aqM^&F8j7_L3d&<N1mLdn/(6'7qQ(+<bN^tL3'h>k=(Wqd-a]>B'Q_jF1A5(51Z3]V%[V:J%-CqF=$QZL3GqBO$h0`EHg`<LVUI.e/&XZe>oqe')^j>C0WVYNRH"[+\`#7+l+^<7g/!&0"5*J9En4R?lHqGRQ<QsTI\Ij)H%]nEn-<,&J_?B)$*5TjptEtm?u>`o\49Acr10D36.a(5.]F:a:2'`W[Q.HC,f1Zs\KGb2]gM=:]c#XY_%^uVn9Z7He1G_Y-G%LP!N%&:'lDOanmRI=EJk3)NK-A>E8I9kNCnE`IQ^YY-18aY3U]qPFls7hS+K][cRO#'mA\CuXRAZe763X(4ss1kcW<rM]EaN7?<%nr>.=%46'18o6BV\7o`sWYqqQ[7*`%n'$DPj;[6%FZ?&N9O3glF4:r5qV(Y.j*2f@A[j*AiI0YGtGLH9gOf%Xe0SGB<@L]kgLs^o9p?d[@%(.8(?"S-atXl*ZuqMd2qa5:Mda=FS[/q&`7npKffI?bb=-q_295Wts/`<(>;BSHn#i15uMC,Qq@li*[^r1OXHY<guqDg7`!_&5Z;%8U)V4-9Z*4k#7t-Itc:Y$hHiQU[lmU9pVpa=m#\AJf4,L%`iG![E@0a(H7dNj=%NFVrnos$]G]E&E[=(_@Q^Y#KtV)Ln7h9;s:>[%A,FYp&2HJb:([e"[[&$QTC4f'(<.XHeX'boHSpqPrpqq)]h&+t(&J?-%$#D.h4(Jr-Ka#m?"(i`P7?=@B\PhE\sgu)8j:gHE=)pc%?9(\qZJkZg*C38pW"8eM97!jqE-*L)@QrD[K\ks)&J:Gg_GLKomq0LPX\dCB=Z:B'`YF[+*-9D3.QGNnjaLI7(RB*+-^_BV7Y,9j%(hcF^Q8%NB9qh?YriNnuW/jF[n%0!$P`K2RoJap^An,qn`gHg[Oeus4CXk6VW\(.7,!HZ@C-eu78"\uWI#r'FUN)tS!pJMW$BdZ3%OoR8QO)tJ9lO)sbFKomjiG7-dE%f1r.%'PuOU32-`+WabZL_6)1\^!J4-H`WbN=U-"2p0mgGrk$^jSNeYmho!MRosV?Mf3OWA/pV%HV%7,1KadZ->1cRLeLmneq8ejM%impM:a4+Kt#Edrn5D(m`abEjh+9If1aN372tk2I7[VK7I(H-k^2j/%>YgD[SO"?9][VZ_.(@B%$Z/NSO%rkdZ?)ErY?^7-OHgb3-Wo+gL(WD3l\4u]c_UOp7pM6*QpX&2n@")p2CH!31KmN:b[#:+"\g\l4GX`N<MS>@ZmUanob*:i%#u[kdS9/^7cf_d^pbPERdU_oaWeK)SILsJFZ"mT[f]6i^+>B48[L&&k_mA%,G=M*rhs=_P6t1a_HBh0SE%'P"O&d%8\$te5f:Rc0%8%Dj;VVZWn%1rNMdR]E.&F"&[@od[ti.daXJ%>rJ8TDoJ),5YFW@cegAHG87VEUfRaoi!rF'5o2#nS/[c"'51!1Cs'SF%j$gm$fI%L:8i)!5/is=\[2MEqV]Q`rq2LiD#eJ(;NqoAS#'G58N[sRT9St7ggG;;l(I)&22[`7RW-Mc[+?N0b8>cf]l=_QX^%aL)Z]&`rZNR%AGVh,"d%E!;EpDWTVl&5%-Qk;Jn0Yt-#H+uprB:<:>-*re'N>jn^ec:VTh#7T"pc$V5Qs>;aM#72gK>m5%e\cgPr;+R%"_E*8@.p%ot#3*9[hZ#.JJL5X+PXbkL``dnH_msqZ:;d8'DO-=qHa^1r9Z=;F4En@%h*.6LO;Fo6'6uHY*tQkdA$sGQ]Laitd]+Q#`M.8<8@U%2s7P9mnl&J43Sfe\eob,/6tf1OY3=7::pJ8Ua*$2$3SnMVDW:5(fG0@4nHu+#Yu$4@p?k/&Yp/JD9^Lk46QI_1T[ZuDV46tTYb4_%24.Li0tTVfX_Q2T7Ms3@6og"cX)33@+gZ26D^k5q>W::="Gp@/]bXjY]em$:&'FVA[(t%Jr3>$--/YiU1n-cgT@&!=?"L_nP-dl;%!`g?`EmgZF5;sl/<b2tQYj;'%<%+S(O,=]Y"'Z*^Pahp?c_*SOs-F3B>D&XdUR8XW7`nKCD<Dh%*;I[6X`+K3:=X^gq>"l"P/>#j%lY[knO4,3V[^dA4\j%rLG,nGJn?,*3^77\I8P1Fu$3_tReTN"M1`.I+a8+"mVNK_8`nd,O$:Qo);(f\TY?YSViVO!'aVNlWGQb9V%Jn7nFX#%fPcJE?t$1o$Nj5L]ok7T(\HD<Zd97/A4j\kdl$$3:MHM4c(=XuH4es><n=g#2c,R_9lpHZN]4uqC#ag89e`g,.;D6IWb%#NB7R\d+rs?&A;@o\HQD\8hToc\Z^&d=![WX4<;MNF0m`M)_9:cG^2H/X'Pc0N/8uocrRLSW#MMHVr':Qh&EuJ7f&o)3J(=`=/LT%[TA#+^4tsS0!tfCodr]2@R0/FfCCb>k)5J5@kf1hi@IT`>l)1S$qO1mNUXN"TS-@Lq+CGlTfNknO"!E\GiJlnR9@DbLUhOt,]/t'%'QdrM.G#:7QWE[h>li<E;`iUV'P.7nfB%r2>2p=t&Jo36+M\t>i<hi\p;a`\#@9Xb$6[".OXWN%CN64$O'df$jXYJNFT#i*]E<#o%rk:9!Xba)U3M8NRaM%&a\XB7?R-"Ih<I%U-2H`CAphg"XID%p?:?"<q\I8*Y=><sQI&*F]ctfqiTZtWCf53Lu.W<o=9?5B6kg'Ui%N-SgZSIR^i.?7@YgQ[DJaMMANV<%s9`g/:h[N;d-^t2YL6I6,r%o:="LgM2]enf\_/ZUX8HNc>h;_EpkluX>;J+nY^[-+iclXX&Q%,0g^P4[(ltj64?geU4_+q16\^ceDEqo&TB6>^q2T^UqjFY?#@gB#Tm"@nf1?'o*9Y_n;J;Y-A=#Za9LR<2Nh/YcdYmpQpmPgFVGp%gfBrkpE(LRV,G1NMF33a.EmYOTFWimO<G3]<rEo;3#kBD>5N2;f9=O&&8BOL6iXs7m>Z`>b-1E6bs9ZuiI'@U`R@8fRI"Fc!oJ_0%brkB=4,_1;6]>@5a,7cqBt=-M<ZDkRVLW@tSJG-rDb)Hg;ZG*:;EW`n3+781Vr[t8qp<`<c'pgRlB[`H$dJ7)SYh@gMPFo#Nu!dW%*;[p_j6/gZfJTD_Mtatcb8T(cF(a?1S.D?M!`,u^o#gT2<ogApF/%O79#]5d[a9OcaE?@6"Y2"AgGjJ\RV5"#QbKTm:N4"6=GaVn%r*;;d;7(iqX7$"JBT[KM8e<T4^"[QAC>n3B9p:oWJMqj@,[%p(QMD63iKYM8f02\>.s"3LOYfu!I<`T5e]l*WGictd=nn\ChH,TT%&;m0"<kj\KN;_uu[^,C`#kZBb[U]DtBr[3UbG*TskZ5QI`67l_iP*Js?K^OcXRiQh`V!P_/O/p0,3`Oi,YO!peYEtB5HJ*QSt,4L%,@<25OM8CsW;!TuDSB#uH\']"NS?eg,uRI31qa]m=f"g\]`t=XM:]ui/t2fZ;_Yt.BSC!BG/m7ppN&.X"!_$u]Ps>LCfK/SF<j-B%[(->CKm2VFc_'!T!&^kT.T`["F<!=S!6N?MXuR-!p2qk*Nu-o`k;L2XRTXO_Y32AZGcX#-S'sJ+Lm;k,""\/NGOV,J&o^On]EZWE%!8(P'YJQJ'hoFG]mN]M-)!6BWSckE0B&F*"i'V5f!t5#e_1!TBROYNc9RV2p[,c#5/9'XRY/#D`0X9FY<pU9=`6S'"i$;"n)Y5*P%et2QSa5EIM/d!0"@PmP$X<D(I0]94Qq)5r(+)>'gFtWpIB'7RP]a._,S`sYX27naRY8S!DGU)tur).8+?GjJUQ^+\V_&qV#h2nL#%lbSV^R,-DM<m51qODab1G9\6[da-i?^uFh-r"!W18><c:NANY_D)VM/HnhnQg^#kB-5nrScq2n#<%NH#d;9f_VAM:2ZhE5E5.WuB%/tTYN.cr4P\hD8[5kh6^l;mI6c'?np/<NV5@mPeWL7k)<)-a7u;n)+da`-M\MmWqJDTSoD(5]Hc+Mg=E`<rV8@P'Q9K5h2_:G^EK%RZr1?\hD,Wm*DA0*aO$X"i8sY1N,[$2;uWqSt;:F):25(Gu17$*>N!R&u!8X(ZSd!H7j->U4@?p5222-/G^B%7U=KuB.bO.k@gBA%#g_9B0X<]am5)4^j]d^WDV=!RIcc5#7L_7cd`cn+h.J@EQ/>b"H0gNt53&&ha1?PXl-(_JWLqJ($\Xr3_O4VcdQsH\2\&G"(p=n+%c!8T.7-bOk<F+OR1\YB0m5)51mGrb]Zr/JT.4Ao,rMQ$A+<@RLo*?f`!:lAIUQr*^H+/(49s.HmUOBf3:ScTlQEH!J7g#R1IFHRD%PTI691:H\!F>Sqc[X>RTBF!d85dJ?CR?CTo33"KCV/K</<kh7."j!X<Q)5aBTiKo-k*p>UNqtb.)CAbA+%Jo?pSIR>l=^?mRSduJ%,"4@3B%K+*>++,:A1MA,K"(`5($mrZD>K^4h<(h>[3S,%g_9f+['W_1<q`co;J"nYe"F(m_<ef_j-YbT!kIPiFdA3a:)3</W+l-j%+$3H@?+A^sS'e2r)i7DWG141m:_id_>!'bIOJeQ)\e__<k0Y8OIp(?Yf]_R"6n0ulI4SrE0LJj@F</Uc26/S04!oOX(nE@>\rFf:%1POEi;>&Tp&T3EA>NMQk%8g]AK]TI+]n"-Ve'&<p,,VcmUO-D3__8*m)GEM*`%7j"gS+,Z)XaRb.d9Z&)AR-i1P[k["Zqbcl=9YI%UDo,3=P%7G=tfG[=l+glr=2r)ZR^H1r7R'XIFB:4)ul9)@P,+i$O6:=hY"Qs;UqXr0Y>9'<!C6fODiIMhZk)OhTXt`qp>k$IFHs>%+91dOs6[l,pW*=3A,Z=trZ=B)?iM]WiaU7^i^$u5WUPXk0eUHW"g#N`(^RIp"iP.H4//Yc_n*-@J)+3m%!4bmnHfa+VIJWsr3;X%%(N7#+;,[_:XKIB:ROE^jKF49hj<5H[>Hn0TS'lOJ:K,A"YP/JPbQt>*/0F3b=rIqZE0X2%(7pB[r%<rid2C.5dHX'^MX8D;7cj0k%hm"hD]]'Gt,*U4J*q0bX#eh18f0kA4Fp"k>+PTA7r<ScBT=r!o'g5iP"-?RCla'mX2lj03+ni$mr3A;oFJ(;+7H,(54:&KjXDa4T%Jq2N.LHGPh`0TgflbT%6s'H@j1>EVQa63^MN6*CAAA57>.,CkEfN0RJ]<3Z^$aDbC!=R)$CsDQgoW-:8%j]AO@6Rmo"h61<0cnqE%XOi'#I':MPl4BOloKiK]#U;<j%<J44ed]t_FKL1*@3$?ZF]cfP).n,mDF.S5'ZGV/E*Bpdjtf0d&<XX9#<V7E!]t=m1Wr"F0FNX&%WBsDMQ+[a/ic,tM?ah5VR(J<E^@7rik"iq8YhaK7<?eLM=@!"T^Gj/;nc=<lUh'^fX[aE*nL,RfL)4XE*+hI'o]JO^PRDFu&XDud%$*@<'92hr0s+;GnI+qMNNj0-I"8")#LPt0Gj2d@FC35@^]>+0N7gWB'6r$[X%s*Ej<'tPdGD,F/6rBp7[W/]a4Vgd1nf/lHY$"78%*5s,bKH],7AW%'TXQr1k?bi0o4GaWu_0JI92Ff;r[?V>.AH`?eLNGt0C0hor"fH$hak^&?DgFG<`hs++FUXK?NJbrhgn>21I_1l#%\m?1,"]+f3\=i69,.AjBQA'joNs8<J]39?bJ2jqS+tB.n!t)0#*am;cl_YT?SD,_6cRd!IB?a^#W=gZE7P6/JXI'q[@TselR8o<5%,B*H]bAnQjPmOW\,:f>iA3h(U)8I"ZE\2?&T/&3!B[pZa#i)('LTVkrf6+DA-i?b.]-DWi+u$7b_\lhOpO\KpL2hf*L#5J0*&jOP%5S^%'D>N0A<:b6$4P&N_+^%auO3q#N"+)V^U:+A`FUp$74D1genLU*>!oo]MDpJ$V(8idX.>+`(0/pfp+m:8<OTS&2AZGu&_.HA3%)HnH#jElPXQp*,]'.&m=j+SU(j6SSALY58/G9^^DN##W/nO.PRZ4RnYGN6LtMa07oU`2i%o)c7d83f!VCRN=26:mf7j:64TVI;pT%0KG\"$\U`@`LtIkGMr(cUkMj=gklGNIZU@W^*Z"!U*^Nr0l!#E=RAS&9,C#0Lt=.j421mIQ)a$u5XTapN.mG-[?V$gQk>EE$5,dF%e^1>=6&oE&[G!CcEN%SjM^NTTp4>_u+_!*m6a;3DjpRt?__OS_3U):r@ROYe+rg/CkRl/6#;b0%s+R8GAB>(GEgpZ:>5!KZ[$?"M%%:S<0T)0P50_'Lg7l!.nogSL=I"uO[lsQ=MSY68+L3b+$`*9Yf<#Wa!V.W6=$n'#?qR9!46bmN68/Z@k<S$Mp,^lN,e2Z$@VgI56%iLHPi/aPK;6']`u9QF`.WiJuuC"RKI7c\j;ZEQa7_QZ'o6!c(m'JXTUFeA\%_JC)*k*3<WJF(mA"WN?c]+tgpb=b!=k3rE,K!Z`H%Ook,EY1V0P,=WoH$G=kGD6N&p!\aJ<,C^Eb\G-Nil;9Rjd$#^J5!A'GkV714\i0<K$rNO[%4\aUO&8F9?Uojn.(-#6rOjqf)l*D,%.07L@l*_%pFN_>=f:aA*p"'APE\N&\;QWV8W"d]qYcfJ9P1Op*RXu['^7t-#EKYC>Ij!L;Ej0CF3B[PahKLM#YI.JtZCkX@,8PIC%dM[@JO7frl3Jo3YIiuHg*-2a!]%4V-Hf*KuB7\A-36Sh(4A5X0`#Z-.Gu5&eQ((qYB!ei(?@O+L]m<Q!<,n7_>T>gqnA4f9N"Ru=%M5Mk>G`Qs;_+[:$C2DG^*-BJ6##XN+cJUoO/rY?s(LdO$<#db.-o3fZgY@Q.CMD>o,^^=*M6MZ"+s7?Lj>`R&0&MIhXdhZ22L>W0%FY(bCO7a(J)69s0O5`63'Bm9&KRBj%Z*=K7724Ce))tOrYDYZX>kbs"_AE>d,=T#pVr#LQ:2V6EXDF7Ca3KNgY^PLTO(h3`a(<j$%BUAS5atBI=Fgme^WcR5jA08>e$f`/J,($F0`7&BV6rr[P&&9Q.6U%8T>K-_RmgAB7.]h[=+_%A0:,"fpgu&ikZX#:fZV!m2;Q2S&%dgr11.h$!`*ji4F[Cd@W&EESnFq>%nlm"DTW+jj]d-^Vgr@ufd8Y2\8*&4J%#ihH8%=hV&oO1d7TClsj<7?n2o+5Dn1$Y^TLk3et%DR%h3lgNJG,!D8IalV*.;5M!kBWT,,j^Nt[Crk'H]oL7I66S/J`LnkNp%A'qY0VSfg4+8L(PfT]%f!``MH]+EX.t"c*]H;0[Y!nr%Xtt;s*"ZZ@lI046%4au:^*B.`<'FAIp6;\,@Th8G5h4"INll-reUFEIX,)U$$&<$[_RT9+1-Z*M!#S6I3"Y*MbIC<`J@QG?@FP>r%EAtB`9QaiZnL(>a<d8&tr\LL(/3BE%OSb55Sl";hV?R7Ke2d5%7KcQb@B?(e$Y2rfb!@i]*O5+e5#c06@AlAH5)AY=j)G)U2KX]=%J.L1U>Z`04EEpM]jS5N(od=eO3!T#6eU@`"r.WN^*tYd)1ISG">aTr2@<?q"Zb[N`1eYTGB8mK@K;pLn%+//KYAjAd5htpU@C2(O%H[[`18Lm^V\_H:3^\RVb;b3Tu6bD^V(Sp.d=e9g<;7`f9SnEe,UcQ%)0fRE:cN@S*e6njYR%*7@B'+Ad!6[8]5N9&q[Na=4bZBhE%GXWf?m9@L\F;IF<4QGnq#aT\#/U7,'T*LZ+Ukh$@[kuDER9Mo/Y7$_&P$'dgLMJeKKm6:WO`d7\d[Nh$4@%)rXrj.Yr5`HBBaVlV%5R8_&>i]@KH+^-L.5O'qo;oB,Q7c$JQk.8,Sq`YASckOk&KH1h_osR"#9%2sRfHY=b;SK@GK.12<b.MA(8WEr`E#QMl%]cpbFBA"%o;$$@hqlLirY,)]bqgh`7@F&AN>_O&"d3+]Q$rY%2K1(5\$?o+f=:rp3YqmIaqL9m(_efESVo4YXgH`\.^Ocn>`<Ue[Vnk&\hNDS%(IC9A2&",R\QCP?YNDKP.I)q%eD\Nn;V0e-VK!Wt'IS&[T5l0*5@k0<j7cGj]D*D>0Z?6"F0_?F#0'`rqB";PRR;XHCmY7.@@hNL%PpC+WYI;:X/)!E0EB0Z`/J<dL0H2CpqO_pUF9fQocW;qsN+9#+"jD'?<k.?BBMkS=A/8"j[2@%E>AVg`I@%:4J=*>OYV</U3/).]%g--5K,;&6ApILZ(_nr3)XSkKPI::6jK(XCBfoYBCGg[JG-h8UA+R#e!Fnd*8inoP<4,Zq*U/Ig]nsj)q=f8OK&4KNX7:*K.+kf^%%"hU[bf_[3HE+9cpM5oZF>d`r9d[KR@8!e]a63k!<:A87Y@%*Wn8:KXjl\ImW>.Ijk=nkBEc<[r4ocF%,qKl]iH^D]1U_?i$F2fV3%)[EY=)`%BB'=$8SSV&T;FP[9Q*UdrO4$Hd\SfOs#%\lQQJ"7bZkZ#!BXB%OS/Lc'ph?ch)EXsOESgmhT+D-$eW7lE%JG1jsYYP5#%Ls)BL`U5(Sd7RdO3qgV>$<gpsF?a>]`MKj`3M&=qPJap5)acTB5\NMcbUs^^J/lr]@P=.baLGqf@';u=.4qOGZd$1Rnrp$ELZUBg%O`7%>\VR&_.(=iF=10VipM"g71KK'FCNcCgQ@4MX\sl`M/?j=C.<@9J,]#?UP&A\^-I$+K@-Lm8CE'"5dp8J&6<k_t46[q@+QmkZ%X3V?>YZM<X>(tZ2U8ZBi<P:*V=iODsI^A`m#_E%GFAu6SCJ"+]:L=q@0Z'"bl_9N*aA]58iN.`%RN3Vg);B^Z,BeIO1t0l"\a>J4%7uoaAWZpJQs)DPnK"4=L<MapHR#.c=*NICA*c//tZZ7m.NDOcei\IM,c0FS_ThSS5$^tniNY@M\"V+"oc4_)?j-Psq`T"FnEo#Js%hj!H.`A6k._mP5*hksb25KK7'ES/h>-)&K^?oCRtd87JI235;V&eSt8/ECPW*6C>B51nF$9"p=_?ts>-N&LCT%fjLb0#DsPWdN],%"O->E/rZ-%%*WKMg^Z$2FKYU!b-Q@50"L)sgf7`74P<_BpNpFDZj5=e/:&eP7:[A[O"Jdl<'0R-\_e""b/F&i0n^tdofqMK\d])S%=_uK+WG'KK>`B6/pltq\:F5+!R,\;%'O-aJ0J-#-]5*9U46\WAF^Oe<PHYhKoaf!=fJ0#FW`mU_i`G_8`DmLdf+^;YB?"#kMJQ;U%UUTZ[]C!P3i*mQr1iJPY7_aVJY^"HNLTIpSQ3<%N(BYdiEr7>b,$oZ9kIrLMHq*5Wm'oh:.)#X"j-W_K_+O_$`agkeaL7K[_QXm7%hDR1.8(QlpL'YfPUZn:'NFQ55FC=>N27@gu9'r"i*&o:%!6JWgJB_O9,7S6tfZ.Cnn\K)s6\O/Oe/@G,O;J_,]McBZ@e<l_GKkX4%gp:&2?Pp^pgQ`O1!)L3H=p&q!Ad@'+1W3..IOE;T-<2["a(!&Mehgm;8&;Uj+if6N1$KJ8fd=s\%)^T@*rP-lgoRj&<iG!TkU_o?%%&DbjZkk'Q)%bWGliXFn%aerGA#/Y@A,emflr`:;N7<m@XCS1%$*B^=[c/4)AtRj)0dYd5S)q'&?e]C?O@,cJgLde_CmWAj0/-'1%(GN"DLu'LbXg67/@h:0[*LN0\.ki<4$a$FLc5]SUWp6]UZPf]F7a]T*./sskb\!.E(f>0_@Q>@q_7#qmaLY$0AO,Pi#Y*:.)CVuX%Z&el?$H)R9)D2(lQV#3FE!pJr?/sWWDWsb"Hrr4eF_Rk3gtan)>JklK^=Bhqq!(Z9BXk5nRJf*[\.OpZ>:^`Vd9SJaDSi?mqf[ZW%L/sBW[geZBDF@194j_c!bLdI(em6VfNeWHXD>+<OjTG7:rVh)Fi?HiM3ehF[&Yb$W!_Q0WV<&]>9&MaJ62[/XE4\h:jqV?^"f;?b%UQ/P0Vqf[>b>^C]UV<=\4ut;CX$&8IZ@o_XaZW2Q'*4;[b:)9\[+s)RnB0.!6+4lf5cNo*WFW#eeD,jr2>:K_c"4]!):PDDicWug%\CFge]5JoS[G1aQaUNdhZOLad(N]51:N,XnD!%MPQDMGQV\PME2/rfa\-G$tMjSVAqOG&Fl*qjnApu,Q!gcfe*&SNE^9(atnbg]J%M"HV1g!$T7[9U^ea*U`-`g6euLuTO.(]:?$i$[fs?nZTq^6-,UWibAl6LCAk1(`)m4Z`"b;9(ha\s6MCP(R#_`S7\'%&Drnf[A\O%JW5W.P[&1>[\F)[Ago+M;0!0[[X_kbjFRH%Yo1e(9'Vh%\WpD^p$?HK*Vq9ggSj3L2bY8EpTTOWjs'YL?ft"3I3BA/FjsY-e!b3W%N%Jm(pRQNASTr[_!?[XH7'GA,f(Q'DA40rl2*g;+nUdq[eH(Mi8ql.jP[8maDP7a;WGa"@>ds+d)gA<m0K:uk&D'([=^h=)e,W*=%CJUGO?F1O_ehG,]Q:7[<;[kEb'_A?`f8LJ3g$m8X9b40nFC/3fPZ9ZsSSC.%dgUij<.dKi>.RcE0G\&?m/$^*A:)i0aLl9_`HF.9%Aj1!QAF8!A/:PiJV%XM6T:1;?:JJXKVZo<7VhR_h]Pjn=3FUnj4uelW*hIA@:X(6n]N&f6Bo%T\ktE&JXTjVj-pcGF/rW4cq*H>5%UBBr"M6de>;(&0+4g!Yfb:(P85H:dG5Sf?IO0LB`>btt[]8k8iaFZ,$/.D&8,iD@r3p2;]Z?:_I>5>)/8?h9LTAP!1T&B*/opuK1%&8da*4Hqr2Q9@lYdr\LCJ@Uk.i"r:'!`e4=d[?&0`L/u/=S"Orj<`*Zi!nME!^4`_A59BQ^DMjWGVQEWeZtn:'qUrR8ECpaJ!L/(%!g[J_l[B^0E^uK(e.Jf+)6m\d",:R!NE*70=>q#9]!4&KDipP@2U!m\^?$'K)A.sO,P!5.aB@ksPpBi.Ld-_R7,l,QO>DWIBr!0V%o=Q<hGN1q6q)C7Gr/\.L>AY_,*$U=[JL)[A!J/Oa<Ho.:\T3crgqRl,3j"p4dsp5)YRTCJHn'%F[h5p-rOjqWa$9idW<P+"aq&]5%L@+/M>'7OKC^0ZjB-X$J<;n(N9m%g-1f:Up0#B[ES>o_V#X51qLVPbcai39M6+nO7b2Gpf?iDG$ZZ2@_Bg88gdcQPaqt:LcWMNbg%[6kGtW%Qcl3**r"Yo4BInK$&S(0h\,oS'OS`8='QNmMh5hjBq*$]LtAa^Lc\h]f/pVr`-H7N-Sn`8=)G>5g37Nb*L@?SkVJB-].k%8-rqEYcH],;@KCg#KH*1+D3_g,9D<<ZkA7L"lPHY,"=/.,Ms8t64;X/:N4!b8BoI4LEo*6,F0J$WcemD@@pJ?+^Nu(YHo!.\'4G`%>(JIp,rn+K@dfNTY$oC%L%>^9ocirY1LKT,7"3EsPI.agOaBmmh\U^Q=frp>X9U7Z*B_[D,,_A"%Rbie^Z\1rgRr'go,2d3#I0Wo%q%5;jJ*;[56-^Y6/8m_`MHtM!<^,doFnYF]hQ(*O=lJnZ,guXNfMlu1Q4fX@W$^@f?>M^oM#:,$)'f7lX]X-JlH'Wbhk(u,7Me-%%eNs"J+C]LBWRHS[C?ei>Wf*55r3<7\"/Utf0U-^'"+O:%AmB3Hf7!^HL^]/NGo?2DU)Y5(,F5a:JNPd&F\=F4RQf4D2PPc;7"_O?%=6`4%c@E]\W\C6)0c!1MH]5QQ<IOH4)5;'#S_%Qj^4o+-cgPp,m6RiIQs1@(HR$b2$A=*H8GJbS/MhKej:;QThM8A`;j'"Q=d6qm%Ccp4E=7I`\lH+ZY>EA,*MQl9Mce6Sf8C2'H/!Pd'&f9"``7.*>ZiBq/(m=`>'n)OXlm%Q\[fq+lcX8p0<];%cXQNpFW9LjeIEc6I%&O9U&*nj/bXT+##YBC1$A>B1fZ(m'LFS4!rBA;CrL;$>P>H6S&+^q8dL0`05e!-1$Jg:t#L7N1;(,!ke%u(6@Ql>ZDpKpGgI2=d`%(mH)?)HhhZ'C:l1L?W8tLV#+%j3o>dR9\<[@dX=_Q9j$AL_l-6"]O%\XhIb#$Rt5UP72VlLH`-YXm\N0Eu-h<D2cQBg5Rcm5$'D8%[&L3H=a#l6I+uA9*SIOoqi;[`mDV>m\7qpGS!KLhB;h5EkCiq@/Z[I2FlCKPq+`W^R,1NAd8GK*']&\O!/,3.TW[!ObH)pJba;oM%X(#7N7c$me.d%f4)_C-;8W/IT_4.8nic3CgI_k[T+q-nX6[""q&B+1)SdlqW@r9,aQ#ikQa3Sr6G"(dT-)M*N`._'R@%EjN%Nf*o%/&i8DDSs=r\W#/J2OMauTLf-/nU4,cBbD65]K2<Fe0GTmU@@n/r<$K*rLc_)SqY;TJgLLL1[='aq8cJ.4^skuKi'(&:[lrL&:^<d%&f=\V-"+J4k0e9pf!fB2X'oENh]\jg>Sq&N0\1dLqb325!E;RQi%i_^p,n1qkfNii9Tut?)enNX&V$FXXK^8aDB*^l,%.9>OM&Rs%qm"UPoo3$j8!>((9XCK@!G[q`a4:l*>H10RO2@Jb,kGd4qguDtkO&X":,4MIemk'_ioCr_m9^-qeJ$5]UhF$MJgd,,S7u2o?td\H%r=8B$e"/lsQj>i36IoY66qth<J3L9qk#g1l%V&@V2,aWuTnRK!-GKBMbm0m9V?GTOOR(d3&m`/#?@0;H3btCZ5CAE(l9hUBabi)a%:KA>l"f-7`<W4KOWIT$c(fnZ$0OmL%&k<nLW@j-@>$I`$g#b-?MoaY3D,^B5W\W4@8e!;t*S$&/:2)pmn['Hh0h:lk@*4#K$5[.u%rjJQZVM?eInT=jW;)1c/.7*'-]rn_9+<Gg[RT&G"efd$U.?thaS[n%-,$oQ67Y_cQ4unFkXrN\O4(Op[V)B*)!EHs7.0+o]*ICbF%5iqH40X,QL--q3WPY]C][T]\A6:$R-GYip>Ri'/lXD7[UgT2GJ1^nUIJ^K?OQ!,dug(aPfE*'[U2^uf'k,s2Pb\2L)$:@(e.q@M?%#EsT7l\9)c&'-rFOeH)*b;nGlU-V<9fIEB<][N:[W[7o2$qjofLmm%MBq<f*lJ=pi(%Z``1s#]*`6_mUU=77oLcY"b<KKqa?K'B<%<hb#)Tg*7n)]?0i=lPc70'<mO.2n%c=i-@o-!.fNHjg%>S:I>HN,FK.][;>lE3LQ!S0nDO[,/Pbp1YL$UUZl+3?n1A7j;=UkB,Am%3Us/go,ilH9)T"S@gJH][+J)i6u3;7brYPr5Go6/F0*G?Sb;?@D9!l"!u]W%m[uss9El(J)>0D:I"7sh%_mGq/?AtbQW`a]b@Ta=%,g:jM2HShelO?^/`jcXU.`Je.9e81b\`9R$7=5LEZ]R.e[u/7*a1>?hZ*4k$q+A<rU<hngjJMc5f1L.M2%H`Lm7h4>p@#3s)[boX%c1riLI(!2XJV6%&b\!lEa&GIfh%80=RBG!j,GPMFdiP,/"+U;<3/5aAn.k@(("GjKpF>:94KLI7qd?7'rpSb-=i\7jl0j*U&,cI\%KDN>e*dI8Z/''Em/6/nteSK7sSI3L&7W>EkLpE7C34rFk%*\eYA/+/f76h4:`ool<79pQ3j+9II''-8H%Vpch_-F"=HaEgMDP_j<%Bp3OukX-a4#GfL$=d`J'CU/9fBlH3dYU9+I"LGKV5XRrN[b-6S52QFD>LqB*)OnOjJdi)pqCM=2^e9bFe6tStLushKbZCj*E^`6\%]]DI`Z)jFT5r)p7j=8RH6L<G8Z"19VhN=]N,:#>uM)U.o#W(^I;/Ir2,\#BJ6EN1GJ>\ro"CR%6?Fh$Y$D_Ul4&,,NWq!$2'M!^F%oY2!Eb=!IHB6+>g8_XW[o9/`M)PP8Lq5_uf60qm,IK[ltFkIANd"`,)]:<ss**`JiP;D4SbK"i&`>#VpdZnt$qqm3P)4m*dor2p3%pFsH6j'j3<X),LmVk\ltATk.'h)Kc@f(T@'D``l9+`Uh3Rknf85kHaUs0aHNYZ:Kg#HuU0I-G&$)j#j*OM29?>T6O<8AglOM17sq%1V$HbQp%K)^#UEP@#36/NXf.Ke#LN=$7%')AlI8uFH*R1J!c^h68.]NY6AO4:S*Q>+*43hhH#k>3j^@bE%prCp`_G0.6VZnV,Zfl%>_eW;e]jNMP]$F)a_"Z1a=jD^Xm6i0qbk:D<m$:q;Z?J%$"F5X)'Y7UO8=TQ,fFgn@kc+B:h-^WI@7eC:W*P$)T.I?i=2aX_)tg$%@c)!X1=X_igG,OrARKP'&m'%[qucID39DG;We#C<[YB?H*Q&1\]8aYY)TD352E)pDL.Y<4iO$o7,,.85Cqj-kq:R&^5T6CPQ$ClQ%YS+H>N[&+uiUIF(bX0*]Y$cI!dZ(K2f<l5cg=WeG:"i]o'%Zlardjh]*:o:N>c#phH"gFA?4"Zh8iX7\!fjC^a#WQc`ibTjg;d9q%b4*EW&rrKIE%%eUQSs#HS^DT;+kJ8)AomY1WB]K6W/Y(5J^'eW]b9h!.G'c7D1<`L_`l<'V`9#7.K2f<aJ&b)0a:VS8Ne/$b(\;l%/D[m`)rtjQ-GVAM_hHGf<_dOeR3_PB0fp0/iAR;?<XbsO)2f'W(!14LOq:gmQe7_tq7Y1ZPBYs:9K7cLAo>_l/,XH*^rI0ks7+1'%Hf)=CW$U>YE;5*IjD"<8IQ35#GFL@B0c`0e<.k021+)YBFrqT@<(bc)!?]:1+K3O5-^]_C!<EjJ=uX<GMV!tFQ/13"h[t5!g&!i@%<R<VOa8CF8#i>X4Hr'p0W32Y!#/l71M#9:_UD^An-W@gjI"N'oGDH\N66%753#P^3J;;\.%(N879Sc&)H0)C6(jfV58k-Osn&(6]%*-T+RDL(]Y"4k*f^-f_@DZ$1!2j_gDg<,,@>aB!VZ-C\Ye/d:tZlHX500]-K,PQD4&E$HAV%A)L>=rUH2nUO`_)F&:WC_Pg9VEL6%*Zf`3S+'sT2u%U<+o$kM]]gC1oGa2I[>Wt2i&/YX^EZc*,^`%^W7!U<i3FK,ZW#p5*1([KYKpGU4,lMKV;;LRoWS$lQt"*`NgjKY%_o0?[4Pt3bQ&+[n@mnjS/7]Om&q'k8)*X-V-Z!s?hT1j>&LP$eVnULGL5Pn2^&hiu7)S3a-@d%>%a(qT]sdXcC+eh/8Nt#6AZ!d0%5NV&@U#rR?Q4XugEQ<\N)aru43Ol>Ree84a\G\T'DFce(+jAk!Fh<lU5,*d3=XGeTameM@3H@-9]GKh1I^R<o96X0d'O<]^\[;)0%*qV5+TN<8h"ZcVIOfVX\O7qdTEdlJi/HUhhf`sNJ^fMT<Mb'-*Ypg#C56"#/Bc_*>07'XDh+0YZj,a]G*MA8Q]41Su2am\m#W,#=%XJ@@L8*%;)H?u8b5c=im#iG>+5'I2g(Xq/G4*Xm.gY&f(nIXS$@1NUe[]K3;&>irsS+mCB/>$EA^0_I.$'hhcrrh5Q$Q<[hLS,FP%)(cc4%b^%*144!VpU/!T-aTEh):78siSGuN9BJ]S1r6P3UXJNZ^4pM4%quR-F!?_B4N)/5C24"E.K(,Yp==L0Ok&1ZD)8995Cr68%ZcVKJT&/G\GX_SsS+$:rS4h&h/KXfjZP/j8K8`FrK7B;!YTr9f\=R]Ld[`K3fR<"U[]CioNaG!P"qrK0Ym1]kd*QNd<2,e?2P6BJ%@Qqo7bh*7G+1ZcW*:%I[R,"3lTkWenOrYBh$o9JPCGD:0-f;&ij%&4<f\4cmn9SHWkSI!i7q2Tro#D.DX_jEY<DkN);dlmDFTY*L%D?H`EmM_dYP=([g+-;4SCfeZkc-WR<9jEf;"K/,e,8,eh@+cN7f4B!"/l][tf-$,[6*7#IpCe\hSaoM_a"eVW)6`LGR&Mbh`G9<h%RiufSA%ba[Y'oerp^%r<(13T4`Ig-XG'mUe;,6<+`228L5n&_MrbBu`D//CY&O2).Prd2V%$.c\!i(m9g(W"Zp]<38dV0?pF!_ER%cJega2lF]%HGZM:]_BDO#6C^[WW)tbLcLQf6gSC(UGoj/&*#>j5PP<Ba74kGj]mV=re8if)YF28\^/I3><*n6CddVT%TjQLg4hmX%Ol\G<:MCq`;#E_uF9TnNe9c4hhX$SG2iK8gTjrNq#L#qRc<$T'AgUrKHHm#?)V+/^.F>i#aIi>Ve9[i>f9:&S?9=^I.U_i<JNk>s%B,:s./>YUMPiW=9HP^tie]O+0mjTB,T6[,I/GJOeVk-_8pjShYjs@!(H)iW>lfnBFR.H#LL&JSu$.qFm'?$\[KNCA(EiIp>UKqM/%d!nR028as4AdG3V8@3JA9>04e%SXG<On"?3.G*u.$I/>UnJd>n1Rd,?"i/t1Lj1BscUGd4Ks)QP''D_gALFZIMLdkHg=Kg&L`:1a%bg$D>c;$<-mrR;<XH;as@3,*+EW&+aA$eB:-(%^.Z$SfC`!4Gg;!AaZSg0RW!H^rSQn.?m\W:L56'-N_Yo?42-8o7TLWYXc+hdUk%?adobGn8.3gA%&KS+eT-+K,F\:NRrY)_nrjV3B0<%]$0B`o/Zs*QjsQA#ks58ksSVEl@EU"(j;LHP3g?/FU7?0ZM_CQo-A#nr]DR%nbIT7ZHTu[0+Nn"fHsm7nk@G;`seVPL5k`hLJioinD*Jg+WJ?rr^Fl=0n3^i9e"kd,3<N_F-95Tb_KG,$a#NN[[Psi$ReE1c]fse%=7:I\YSUeW.ZB1>O//a7SB-j+bJIVt0(Wr/`ToX#jlF0DcH-tZYor\gNJn=7gST([;O['?M?BDP4sN3Al&=-F\rYe`3@lUg`\`(=%Nm(o0g+6qeh8dKt(4o1(9?N<Y6%+g\0c\D-\hoZgir1*j!meH4\T+]"%.EN&74!&f@F!\R]?6YU>GSOY+K!l\4Z5Y''_=$,Flkt$%A5S^7k$VV)4=1&^'mj@6`uB%A[DhS@a>I1^q4*KB&392@/&j-So0,RHe"8#.-Nf/!7,lH5P5cu%<]E5P[b6,OQA01I$qQnU;`%K1%QX^L1$3952%c'*b:61$E[Z?HIq!=4']Za.^A.;hNL,M5-n)jSlr:DCk6([W9E+j=j!i=f]?9;R0kNkI"b7lZVDmY^XpN2L<FrY=j%*U'J=op2MmH/CVD0IjOnX489d5!%Ob/tO%o.A(993=`L^("oj41u'dcf&bl\l\G%NQ!:a\fJtr%[SMomGui4Y:iJ)$FZ2BBOKbst%&mKKZjZWo>kpkI/%uu;0K-MRLp8,H.)uX6?]&s]2^R3s-R&E6+Wf38uH]W;f6qkW(H5b0<c1g=I>pTM]I!e%:%Mkqpa*JTM)65EZ%O5^g5N$r.E'kaV.pfJ%O.TU+B1*WNu>H,Xja1dN2%e285js,RlONWX9D+Yp:?eI+lNh)pidYWtoA?srR2`_^>K$S$iG'5!b,sq2i%X/Uc%kO:IP3BRce`\h(0eB>O;6YW42<t5sJq$sstb;#X>2a-050<?&ZR,b<6[cb0O3j=E9jDl/Q`OnE3g=TXV%efguctVQp4:*Z0%$!c+I>?5cr%K(K7Q0`bc2G#eLA2'b(L]b.:Oip:GQ?eEKP]>1)pfOFammJE2bc(.KLUt6_59+bhHTSA-1XI+BifB.CO-*IC6/\19%a,og0QMFQtmUtJn.gAmM3Imu8,(&EcK,u0dj6@<rLsHkQ:#_ce&RrUr![qEqDKqAo*j_2Mj>D@.iOGHaq]ba^CfbkeikFTJ8?lBm%Lb\WVHYSZ7,!lla"'@jb;s`JJhZ75Y=$f)KKAo-*3[=D&3eQGP.$;3*rZ",ELiARt&=k]T$u\gmep1-\&&&Sl:;6O@Dr6))%mA.E%/taB0ap%p$T;ceJG-Zj#l*(\Z+?G?9.hG[I<,IHTR:sGL&\T/c:+I^G8*QX18NSti+S?-%$Fsq-aZ`#p-<21iO*O9b"]XVQp<3W/%65rm\1KlN=+3Ii>r<-=h-H@:A9_u?*T#c<aCSc]dd$8Z/DM@dnh5fF;Tf'I.5>NK^E_HEtWk$hQ9SAIuONQZOr-c9q](0`DHXUF,%m3c^7]<O?HNL`poMbs&)@g*2.G/VE>&V&\J?49@mL\/!7I;';6)"C1`lY-;`MRbuAbXNLsEl?iobcSsQ3mN^<IpusZ71h4`GEJ%d%`?&WPbSng;O+a?u&9n\6k5aQkncDq#!siu;3hjYqcRZ@`>9_7'k%!<8itRWO-s+X;AcWVOH^(pj_(UZ#aGrm2Vt$)9*2a'qV]"+@%,i!e1fSq-L1<#=lQ6fnB,O/kX.NdCu1I-LK9KRLQpmAaapFl-E'2^N=gu+]n#=I1JVWU$u1uf<-Md>?c@_kIYC9^boJ!JKH,PF<L%[UGZmTr4%TB8goEq'Qhap(^g-^qo[$+RnoH`]sJ>MlT,1#nqB#ZZ$OI(juc;cY's8o[MR8+$TGKdUK8t$u\BJm5:P;j2?L^B$joj%G2^7kh-'=!S6E8J%LU<@m@pcj%3a.9K)D[3WM7'G#nn>`V.d'!TY*`%[.?>->AKA8&@++`Bn?@LV1&qW0`Y\),XH#QZ`kL7%?ZL!%1Gi]*LupFY0k78[jCtE`D"DR9O^\78NscWg%Ap$VOW)-H3R&&W;LM^XPs_8+M<4gF;sDr0\i?5&?:Q9]V82Xm[.q?t,&'Q)HPl5E%7[5%`eWlm:_\bp4q00kf*(XKMEo<??\:@bV0,QOPEA)?2Op,b*B?[>XVb$a]q@f16K^0lNU4Cm6ka(NY,.#nJ7M,[l.#=uBg^aC:%&-8U,\i*De8iRk\-l0W!":"D`%>)q58f_OX+i7^@Trg5VRHqkJ@")O3&Y2aMdXtu+V]F!uV\g,VYqQ49+d<`@`+dAo"N.EY(X^71%g-j,)55ArYmCE?^_2&tjAEi.WoVdXlAch9>M%Q"$ef2^TE%B)6BAE!;*io6e-\9I+3Eprec'nW$/?'s74Jln47`ijeL7(]ClR''!%SAraZ<gGM2hVD.pVqgoIWX\Q];![jBR(QMgrJjGp!"$j^[Klpbp/u!3"CVa8Cm%bCMS6f`QH1o661n;T0mt%paVakRe,-F52jjZ5%<<5#KLJoI:P1[nh<bK..%bIRbnMsPf9_,7q(dh1S6kk<)N3/dk3o_ch**X^8(8ZCCMS=A]DLFlPcuX?1&,$tQ_gV]D#/$lQ3AF$O%gR(U'6D^H=c3!"+knm==E>Lor'U?H<.Mr%9;T_#e0c"<t3BNH=]gTbR1$`jF8@ht@`u_d@mhO],"L$k9`SiZsga<G^i)J%R&*SiT%[@eB2l#8C56KM2Y\n":p6b5g+OHcR>Bd4YZRM'NR&6?ZZOLfW!L`hYQV//F@Nj3QNKc!%i+8M5JW!koTDO&7[Q)<,(Tm6>WmDi=s%R>nKu@rG/"m)PGK]FORqEZC>8(j,T+#.cf,ICL"I;/ZBoR.I5L1'rLrotB#\ItBn`0jWs<#[GPUr+S'KmdR-1Cl47?psVX1K+d6%%"\TgY9J5id@!103<='-D$MD]h.cq.S-in-l;"4'I([DsB:OHeOe&o(h<WOoZ'bG"SNWfV%0Omo[0oduQF8'-?_es-s.onV>$u1SK%>RUt)5uQ33&8Le.)lV)(.l\3>qMR_c\rE,I6UerFe$7/k?L(a,?@bOf/,U&`e5/W\^nPeICf719W.6jc$CJ)s]uJ?l\s;Od/?7qc%5Aa4WW!*ZbBU,K$$jr6Q9K<`<3jcM%%mjIj)hU1-&m@:>"r._[:_!X5'eqGAL_qeDa;B(V-k'nHD-"@&dq%!n);3KoJZX\jFm*Zg%G-mSk^2,"4s#$Us@Lda2B1+HfH.i%Lfd.-:%19Tb(rgO,7=@;>c5+uU,pi!K-I4UJGqY0tZc'\g4TS^,\&g_bbOr$UN\I%cK=l;\%m+o=(=A2#`]Hk<EENj:RTGP5R<VnM2A+*TSq"7:W7XRT[S!84[aAMI;[`oHKBc99"3tfEnGcrtoKeb]_Q&g=I,sK'3Eb:%T?n5`o%lWt.i]$1+V;n/iX@q@g<jc"&&jDKQ".5UqFXG^<SBCddEFUrT<\e1-/Q^NPC[)M&$Fc6G#U??f_<u567ld%_#B-7G#MmhLNfiHpb%abG_F;GT7"iuQ4E+7@&hCq:PmB$:-\YitpCh$3-hp_MNuh2'28lJmiEIbcpG@]@F+K0e,Fld(44ib,to[Qui]2UKg7,Q>Dod.Khf%1ZJl3#2Mg*1?a=kl8CmCb@/ZVRF.\NoZ>)=Yerd0=:`\O[0p'0&^b+S1Acg>@+*HCL=q$gm0GS!"2HLLT8MMiaJ1-j8'HUp"]"SL%5fb7\k4[[iW1k1u"BZe9hRg@I1ZV@$P<H#L@N>UtDs)Vj_Ou(>ai<CKqpb+`&$.;5(Is/-,k'HHrB+B`N,Nq[`9$TKP6C4EF^p,[%#=iasEUA0\2Y-%TAo+9roR7:cQX'tfs0]1tFBptDrR:#hk8T8>C/A-*#o`MlqKl^^4)us?NSLqJc>,cfCu8ZNh&%I-J;?kIYB+Rs%8PTc:p<IRIQt%]bE\h(1QL)-+jk2h8A[=VlH[>%dfMPhpC)^LQJkA]7C837rGSt<hE+L$F?=k1G(t7hf4q:!V[N\UAjShcM-gue2%9$hi=YH+j8%T)%,5)+Te"DpKRgf>XTD)KWoENjKcS0r`E^%ZH-&mR^]p:)Vd=n>,Tc0#AJ(ao]G,60OG9YKE,*>e2siaW8HfT)T'%N?"(oL4Ng[\gCJBreaNa0hT$.VC1kVdL_%F%_&@jnWO%j82&^L=%'>,4?=/m@[S>V5=S9%[n)kha*aml7"2S"kJJi4@3Mka8kR]%%jN#-sc]cJ&]Y6i.(a<RN!Z+:&Y`RK1bW"k?fNF"4fg<KZp=X'Vm9/1Y\W0s'A!OZg$?i%a#fp>-%>Api:W5.+s-D@`e%:\q#EJUR%.A:6>jDY[^!V\`kh!:%RH22_@0]u6-6r2Qrl8PS9gBC3koir'^%14fNgY4Y8Y<teaNNLBg%'@jO?0OG$7bKTB2FFm`r!MP,!:CDf%V_X))(!;7".KiPN[VfKY/F9o5!@Cn/fW$//cEC&(%#,pq.hlC6BYCTGpcW=2oasG`nJW%h,*tH2;U92,*EY&03JX)d?[UD*cTKhr%^R"]_*=Ld)*F^rU!OE^ZIb]l/Tkgc(-cEOU)1PhTI5tt"-ir![-ipUm'QbVRG:S#b?#ab#?Gfk[jN7h3p;$D;au]o7?GlH'5dsQ&%Z*Bimo,)Is_@q4?EH)c7Jl!(7#pfg2)5*YJff4LeTp5^4ZsbD`,F"G"/ZqSlJQMMf=--8L6HTXqGQ@(omC_f)rKnSGgVCLBhaC9h%JKOc!0A?OoH'Cr!L^b575Y<u`7oVa'd61akV*QMT@Hg[&Z"3ISGqW]h+^u'Mcr2^O-:bG35q$_(o&0K-iOHMoD\;0K!Ac@=P]-Rg%8pTI5j\^X/aFiG"^X!*I=V-4janl1n@u-N"-Ob>Hh2'W9;QR(&T7mNUZ`nu7RIc`)\UkJVH5VS3Z:sfFb"6LnL(U].d%RZT0.bB3%28pB/\c./58T;nN$Jm'&Dq62GQ6D`L)j_^((Nt$7:.OtaL^tV92GE1[^F8;'KXG]'Aj]u92R8Yl>FNVh\biUk97T7u[88P5fkG4p%&<OR.)i@9b/H%s6&d;oqMhDsebiYn_Y3HJ<m;4@QjM5R*)H9^Y%M&cPr/"\<83u@ZAIcsHnAd7>a9!OJoJ78skN.QWgT2&q;E1Za%6?(A1h)OD;h11nZQ5shuLbaq(m)V1(:_\W/OM."T%m+bqn/AHrVfoka<T<\!YOOC1)TFtX&Q:sbn?bO\M*>EFNjr4N?tRu$:N['>%MWkFg][(PU.`GVG0QJu8IXYWd`G7R#YaKVY,dT,']0GhUX!"$\=T`D!%[:^<^?F`NXkD]Zgo_S=\*I@f4q>Z?c,`#q:s?Uh$\9=Z%26!Ze4<Eg0*!,CtM]MR6fuIU@F;U`"F3-0[]Pa@%eQgaYC%l#UJpEpsSAU-II)6-Y/Rl`U$e+7p6Tm\Zh<#[lmQ*.2SE%#Yb"6iL%X=n#[C&^FVo88nE2"Y<LGi.Z@^=%"9I.asgpS&TFGL9Q=HIO]ch$V,0lbKfOM[^+f(/;9len1oSNboS78[e<*Q#2=ogO7s:[*l?m%o`h:I5lA;M;-Q]]\7iZf$0NN^A';<(PO_$]o,7oO7ZXkSJN,(`bU@\7p;)IXqj`s\ka_IGjgAsZO34>5>c`0=`Jr>//JE^`AuuX:%bgBs%hRF4<[e@YRKXi`QDfB'>^'siConYZ<oC7IfC(9j49l>/3+6ju0ECen9EPVD<\K*$36S+8Z_JGgAC./<e]Zq=u*t+;d@b9QP%*XjF9-fRK!QjpG&V`jh[bX<N'Y]#G@R$\n,3L9Nkbd;8"7:rL/&DG#$4'OF.ARS>7>i!&S`3^mc\GGLjJ*4a#I3[`M*rJmoi)(3+%P*rDO,'_Re^;NCs]*aN9O-*:-UnnkJrU4q\R6rIpHPI!@FnP7O0-PQ[7.[<4.(3TAK@A3KRQ[s+WuOUr.WraE*]ePqrIl1F@[RfQ%<K$HC9/hhN,/_i.g!ePN20`6\,TJh^VI?]i@@TjR*a-]763<lSdJpt>Qo%Jn7c'VIO$-USA8i!aJ,PV``'tFS1OBE=rJm9@KmX&?%4E0"JN:Ij%$HYBtLG`lgZ+(l&0%lV$BkjPTl;'<Z\beeko#-=rCHK\:1?:VC&sP>LDbOkukC,p;Gl$'FF\<g7kT.g*08)n!)luZ,%3UhfDLbI/[?>UZYqUgVjoW\W/PJ".Va^r*Npr#FXbN5=+\G__5:NBKJ^[S%!s7uqVP8l9Gd]=)S(Eu0RF,Z'iF5D!)=SEf@#A]Vn%p.Rl\1j#,G!iEO@Mkf9;c"Zk9J5J@`!+?MnZ[Qb(Wrp;E(-JGoW@jhC$YeZn)mRbf&t`*m;bJ8%o46L-T?'SJMdfk3[I7CdHN$AB%N6D?9.MGHuZP*C3oU\A0JN4kH7s[[69c#f4+p*j4ln>FpC5S;:n[$[JnK:K1JE!LI;bBAE><PC_Xl:so"b[hf806Id]Et)S]CeK$%7$MSd,:q\_*f.UVRE;\!To[a?L,%,c&64!hUt^^bNDs:5[W5p+"7[L,fcP_B\1fFCFthLjWT3/q'Ldc;Xbn',+^7W>G?Q;XC$%=M%#9o8->MnRoLujknX$?@"Ab8=gO5dlaa0Hu$mL/S-@T1GsHleSQU'ZniJ:aSV<^Is/BN!">-E7t0qX8RQZ,+]FAV3'ad6jGrkLX?&%2n*9THbMZKZ6#XV]b&82aP;g$1jU96`2D(h,nWd)SP3)RS8c]PNjQ$4nO-P&F[-q.4G+3o"E4J\5%_T!'`NjmdD`.K0Z2t-4#<t9%+ML;Sp7.AgWQBB,ISq)t%gO^-&=imtHp4S9,."?A6p^kbmP8.\;_1g3jR-Ht2'Q?V+GCkm#8n9[q*855j1jCe1MC*NSk!"*XC%k@%1'k,)TbO\N!9f#jhV$6Ad"4VYQ?/"Q<\\X=aF!24PBjlsourd<Vc5X#R!/E#-jno5$S^jei$X)So_lcT7E)L8'XL>h=s1E+(&?eV%jAG*)lKXj^C'k6]p[R@^$=6[u9d&9LhbuqWVl^<&]]EJKh*3ojQb%)uT=36B#;bHJLN;eL7O77k:o?:QCL6;U_2b=8bU#DP"'RTV%3hr$gN(_SDU"ZTW3lO4^-2u8sTY2OZHbuM5M-.6E+s:5#Jf_8',5*(_ctal%)C@&4j)5c%jPB_a8G=)V&JI0_RRk)LLjne`nM<O&%MP#1d?\\B+7:J5A@?faToNj*Z=XPK&cODuQQ!<nca(sP#[mS>Jq]'9BBHI4:"Za2!Qsl%:>oXCcibX$r1.VDZFTI^RUr:2^(h6cX%T7]FgNS`ME6kbt6IIE/rE\k\S[4%^jj;cbo9O'eOK)-?>?%dI8bPOaMFgkW!E[LH^%*S3L@9I>Dj/TJ`Si,_kGX]KL%%+1:De_PE%WFo5jn@:F"RJ#gnIlF]EchoNW\W%U#Fd=o+IRLb<S?VR3m_dIoCe5c(DdTY);N-tnH-"B58a',AZ8a$b6jZ>+8lZ>$m)nHVQ4WXu%7jo/,Kue&)?SaShk[s0m;>7UC+CVnak1S+QbJ5Jn^DCJj@A;Afk6u>l;UkZ__=.M26%/6W_lF[MmGP3t^Tiri<c=rN"gW;1iFL6M%o2u')dujk"A\.*;TpgM9XAFHgj8WPRX?!-/]$CUJ2p7W4a'e]_bpn2&iqN+<Ur_''a:R=1a]lq;jh6(2[$_WQpuQ72-";u.mh)$%%K*@&V%#:P^H,Wf,*P!ECG[Vhh;O7"a2(^F!8!`4fPM[gdh>s]l%G;ME$jtlj7!bCt^1o*8\_^:lqfd'kJK\Jp"($Gj#7SX/idrot%;GhS02J!nhQL[=pE@6V*:8t(e9H`7aZ6d-+QJJ"UeWW$gos$bH2[-J0($g++4[Z"2H'p;D"*&a?p2toIOm`C:p(d`,U6ujb'prBr%?V[c]lJ/0CR8,rU)@RojceW/T84JksW"hXJk?()D0lDM"6kROhe<&#E5toCj>ltRGO%W:@DnLhsGp?b0.0ef2Ot:jp<C]qol#550%7$M*$OQ'Th%JQf8llM;\]n:Hu2`q,.WME52Ff'@&Ve&I+!C1V)i$,-N)A"Y%@sjFc;d%*0I)af/<>i%B0!WS_U_cSm#X/:th(Tm'%e*8ie[j5gbf[0k(ZM]`<H.]ETY*"50E^<?!]WG,h$>'b;&!-j9GME'/Mu_LHZ4<KMP9q]7fm!IP<+k`d32IZ6.eV/db5Vs@^_(m)%EW3#11X@XN:-,ead,@7Aa=<OTh3oR3W7M\qRpckYfUB0gJm(j7p4u'Q&7"<C2k'/>,-nX4'9[X?GZ%+&a-X-uNi(&(1c=TQ*Y0:K%,Glec+S$$-CW7%JK]Rt/Ak_M'</-#WdDmLs:Qks[QmBO_9P%YbeM>D:o!tlc'e8I34js<nf/E#I@lu`$8FA-4H59h?e2g=bl@EEL%#LM>5A6VRmGp4.R4XaeEltXLcB&W-bXbVLpTCo?VP<("tPs`X)P@YXXGSHGi<*:@9b_#?kCdoT+9dZs\8sP&W\8]*O>DrJDL$5L(%7Hn2_6b_#.0<IYe<O0M)g^Okl[?sDlPAG>6**`B.YY+lPDqH%p*pe[k)lVWjr`atJ)'T_oH>E8N(`&I1rAL1%>5qaJo)4oiO03d?%9i#B7N6!^e=n8n3>Gk8?CN(38V3miW*gZZddo,tRA'n&Z$<eYEK+1Nu%NaDa2S]b'm]lKmF&Isr?3JOYHA0aM*1<CSr*W/rLa0$"%;I)m1S:/RTeS%_,-OD6]/bW@3pZq/T#_aW&hK"i%%-0@q;nId3G%7X3,?T&3<L;H=#e(:\XB+E'oL.aFo3$BS;DI$fFt0%H7R/f0%mo[S64Y3M^kIu5_/B`7!M?o_+hZ;2o6HTtL+:V%]K>Y!"2IDRCC(3(.-OH@NG9fkl@m3o>97-?b$m2enB7nW=To?H`X*O*#H`fO3%,(AB]`WN(OKhjhRd6<b>g(C61Rp1D=\Rd'L;sm2DElWRM&JdE2IRCkudb1X`Y#=+sSb:V6?%h8bpTS&U$J;R^*=I&bFsD:?@/9[l%HD+ls3bRHg@%]d-UMg`3iWC#4JE.bHEZgNpqoAbL->KnQ\I;jm*3k(j0+g#/Y94_YWItTr0SqE6Rb%H3W9KHJBN;'0I_5n:p=`\r%,f+3Z)+/2W%hP'4(T%L8Uo!U"C$C`b@=DH&E#.2qnX!\X?]ck)4n<NYM6\PI-7<pq2GCH[%)#F`bHW7b?u0oHU<2KA#0oZTU3dbG%&5e^ZC?fR::;W0k+fM+-92Zj%&;qI5R?>]D[2YfhT)g&#j&gT^L&+j)!OMS6af9P;A_:P'?(*d6VcQ?$]QO,W:-oUY+\>O:I>9RS%VM=HCR04'>L:u#`Prph@mLr3ta\=o3%D)i&1U:Q)I`,Ymm>\dunbbG3F\Xs(CW2W40Qak1=:lE/#FUN<-JVs^i'rC5%4Z9Ne%K:-%.<;tTB3^1JCZJSI9R*>!`2=pN3K"F)lq0@GpcW(RE_p(uAr9_0W,rHk5tT'D"%E!dc$O%/f_rddHDoT)Q[/S^eq`Cs$&GJQ$eSF"%;5S?nc*&Qtf/*ZmCNhoF-(2\Mn+rK)nmHVJ4\1E*1Sdq&9%=?7A;5uVNKjPoZ^=A/#T265Ur+ra"q3,?a_7>rF/<dTZHk3t`E@po%3:bZV*0Q<?'^?V.r>!/n=lN"Z(ephlb\mN%.8d@aE[r=U'9BM&C=n.UXa3CDR`,/?!FoNP4>]0f?/1"tU(895I1lLDe'egqQs7_I%!*s4"'R^JiRUR.A#t=nULmoL=,4SrAC)oW-/,C/>L?=JKjVb9H"!Rl0ZV`:`=PV1]OkNh#O\<fto?-*Z>Zks@,#Q%Q<EdQ'\S$X)%%sc9/b-pZ#=NW-4l`Vo0MS*Jl"N-=-=$]&3QuA((:+ZL/\/[e!.UCL`#>O/brpgl0D>Bit:Y=tdK*5/a[[Q_$!$dGo&k0p*p@&=*%2OPl`0Z]ja+s8<o%U7RmrQ%_LIoV!l,E$l5(4XH]M>KfaH1nkS/po\>@ikgk(0bbOP;WiH#<pI_!=Rq'D%2r$[l#4Gg58tmBOVSF%V5%mM`7oT[0ef(eoG7<No-Gcprt5f^FoN2pgYeI.ZtcbEK+uRP("]$OIM`uUr7s"Y&O-)SE';q_LD<irl+ud9PZp`=IS)Il7-4a#%62]Ch@%gRpN(_cU))jKt]!!1Wf2*@Gj*<WlKPuRd63No;n&ak;=?+&(a20@dMDK=UN#nK-^.6Bc?WH!AJ7o*p#&DhDfO;!($b*0h%g$K+qB#G)5DFCn3H5^[&TE36bd(*G5:R?9b^[tn^YK47[78.StT(4<SP"@OdYF]oO.,T*\E\-q=g):``\+P]S[GhG4=XFaH`iYK6%7RYrK(<W&?ZVWom,6@Z=1+[rWjLSbWA11#iq_6dJ_9DW$1l.g*OtE5+&BbidWeM7f#TI?lgSfn^"h\gZ*Aa0V<IMgYM=W=N3RF@^%8gr^o[VB,0ju9cHYp6%.j^;\HH%)q:85nie*C1XG>88D:769H9'fk3,QNPoWU7+_d$(X7P%%<D6]?=osh&]l`pZY`,N'qZu!A7&f%dq8EFoVEW4MF<VdHNT@[`;i21VO=aReHA:4JhBaP!^K$rJ(D75aStJY;=t+nAe0W*/)^0F]Fd)+X#C$H+!Y-h]XP(8n-1!O-25S%%+COID!2R%;hYtn0iL1a)!+:sfiKS'q`RU8e5hm;$?kt8cJSc=_rknKc)h>%/V8cEiEk=9Co^?UXV::[g%<+#m"sD13rL%BY_)T$p%Z?QJ5;Uk)ODl"qSPft(s/LbG-<c<N+^bTg.nu*g_Ot)sXnY;1T]S98sPf^MG<o&EkjN+li7#Xq!W(?]%jq,=.g58S23WsCRdilRJ%!r+jj.Z85-"7?X1+aO6pR]5!G]`Im_<LhPV!,[rK?K)A)r`3Z^$h<'8QoY=gLhQIgBDu[bX"sa$?aG_oC=ugP3WfL1HuGPl+e?(7%god-f20+SZ,)#FFpT-8!'8(W6OC^?06S#'aa&fCH6?d=V_%V4ZhK/UgO[:9jMCET*%`$P(N:?U<,aAX;)SP/?^sVKpGQWUNCYf%-%Zt./13]1gU+h3QU)h8bM^R-q[>98.m_VTKD!9(NFV5?E_R5[Ar_BoPU4O%@J$pACe)8jOFa!H7#b>jP#_WRI.iQGI-GVCCkf^P/8%LP=Jd_,3#kLtLaVV;43c!BbOGr`%%$/%Pkr*ahJD<\TP+/(*\\_Ba:%K-XAqiD'kl*a,hcko?&pjpe.4MWq)g+R4&t@<<4p25rZ_%pmsR<T14+"cu,uLF74e=N2qo+/aPfC0\[@6BP.jSNjKdLc<%I5hO*aDF-lKNREIUQe:U7DqREP.'_IjOPAh/p28:O!M:sVFe87[a%i.E#Ao*^aT^"3s\C3%_)q90B$!qm\?d-h[o&NtV)kWV.9Wu;1Rj<#T/64bkKfmC"<.3SK#F!:$%3qn1]O8d$Ns0'LVTC_6!;Y.Rd%D&gLN-pWZp(BI#u="d*kgAjlXoiPmqYO5A>73K]WQh5"P_;q++RX>X%^,G6CU*Bm%H0W2+i$m2s-o+cN)+m(!aO.s;p'<,PHQ]S8%*?-B@-,t,CJFrLn3>tMPd&aYRA"ZI),@[r:*ZYYLN.B-7K$BW,Q?=jK'ptuD<5\<*')9^g-4qs_Y[`,Bl!QK;GcC5IKhG,^qO(:I%OeHs3&u3N6_GE:Ji:dN0JtYk]2<Bf$Pf7's:qbI7?/$:&<*4]6`]gTJs"%@GJ,=hnhW$1RZJiP?nV3jrlg5c9h>&/Lo%X1i6ToAf%cG7F5dDQu[ha8F1n:WR?>GI=Lc=6fZf[bPKgAh'JlT`$.<3(00r#BE&4o6m*AA=@>0=+F;)=NN$rnNgN?q("Z?[dnLRfB$RV^k"2%m%`OQI!2*b^Am]'^BK(3H@!Z(oe+QR%7*j+&jo'Ma%FD/"'1/\-f;g[%K#jOqVK3N&SUQ&FSG/"<i^I@IO@LfmtcB*8g[4=%7Vs2%;NE$i]0O<bmSSj7gBUOn;/0/U>SeG=$C*DVe4U0E)EhVcGdcOOom"c74u@E?Z`CNBO0U0%X"aa&N[(B,V/cQQ7t.o5<N(MMabn)E%K"uWsT>U,t6l'PD9pWkRWK6\q5W&!Ndg<mekD6E$>8shHVR_<oJ^2G9`f`U*XlntF;GWTO0<h@:91`DO6QK*'f5k(W(o^WY*H36G%lnb_0oOA6aL@A>jD@/ai>Jud*0e^'^d[N(r6:nHiTq^^7b$.=8>BWLWH,5ui4Wf+7P75"*0OS9j7c>a0,jMN;O[4KhiuUiNV"c@>%Bs+#a?J!39(P@J6XEIPsYnatdA*t"0_5)ZT6\9U,0d(iS,sjX.hpncT\igD'P2,ida3fW<qPNo(h2.-!V62Z.[3dn[87+t>bHUAN%PU;s!-Eb,E;"ZFs+9C_hjY(W"F:W7"$m+il=\.HC:&:fP=\"aaLLofP%#4]i7D<Nn_f7/P(T?D;4t%H,#Y.:a-Xg3?dUYB*V1Z`p%.mWm,-6;1E+Vu/"2f#GX>!;`I%"unras=nGLC8@L3D'rPe[cLuZ4hRQ'sUW'1_=)!erWoH;Wde0/Q8p;Gi'%Gi_!FAjEjjU!qm08%Z=IgMHea/qpi%3s=@86[1<t-FXlDkfhW>`%=9JC_nk`)&]gmNBT_5W6n>["/;4*838!"4u^`i)]>L*r=bH?"hWh]b=AO:n[s+]3T%g,ScRja?1e1V\Wg2V8X]n7H_W)pR_d<R2R)ml^)OXe[#i//sE[2]bh8%ef9;CtiSios8eUZ)VI&B#2RIL[Cgs$Xh\&",&M3j/j%&%BpNA'lO4Vdl(C,0M8k*'/]G)b6sp)s;O;??FMMn6Pi)*jRN-He#o21/`?S%<A;h[0#fh\d2#?t:LNQAJC%0d;fCkN;UCPKo4D9%O%&]lN^Q<^'8Cb1UIDB3^b"Rc..ESkD;`"sloB70Y?0Yk03&,=>Aqek1N]JZir`IMY&4c(WmW.M.4TOQ+pGJ0b7+F.Kl6(dp[rK#rc%Q(e>aK9#KML6H6`(AP6i,m0Nj.8r!PaLQ$]".4h$qs.o5BZZk=/i?*;6-GXSNEn1hj2(MRF0pn(T2/C\rW%Q5\o\>l.EcD09GYXe%;)0iN8Mp\#1AG&*0-p_V.jHGVhajG5UP3_VW(f`,k>a,\K@qmK$;/;U@acDQNO+mCad>M5bFqmI:s:.2-505"9?B/6d$+r8HY3d;%"`nc\4UXs*GT+QRrLm2Sn/4a<GZbuPP/.82lWuQ\RkC,sSBFh,:i2hdRcZnh](G3\r@YKM=`Fa_c2]\^WG%Oe"M4[^I$$_7T\(PC%MY[0K^=?.YX@h`^'GB]1H:3dZOT1cl##(?\Y%A0+aip`u:u$FiBm!(uBLS_fAZ,[*V7_;HMH03fNd@M0NXH#D$$(-4cMS!2+[Gb!%C;WsH&hLk,"b^dY4;%'^'o#X!@;)K"F"F`<8dU1>hF(b'VlGoEH+"T*NRG<fXh;oW0k41E>l%XoYRmmO?YDuX/pZTB`X^a')P0@&%5-+7bS]ThdLC%uV9=e.dK"cY:nBX@ZE>A$Vcbcl4?.4t\OnSa_W(f(YN[j*:8KTM.9:K6)1gV0-L>5%^<VhiA?`!V!9;o\)#DA[=%Bj&$%B'TY$dn)D),[teSiXe?,Z7=>Q8=)BAE'ud)I)('QZ3(t:8#iR>kqS>dc=??j]>>^FQ"4cla9OMm53I7*9/2&%ATJfRh_hT[%LA<?L2KujH9]+0FpGn'p>3p=MbiI.6/@:qRqN*V>b=5t=s0&L01mZ.+dW9,[?RGO0EAo`YBLR_c=*&mSB<#\X[92#1236h=pDLO/%X=NB"Ch$eP&"ueb[7$E+B\^DY;reg[]RS"upKGH8a-_B[eeAe&rD/_/-+)V/Fj7X9<mo[P&]TuuFL<a@K!Dm`!V(UtgLlJM#P_Mb%js7cT(%Ir#R#hSH4FNVY1YmX%]WuhiDC248d`k:APiSK/'V4E6D/Nq&or>WUpAgm8g=8;N$tgZc(&7#GoeWJ3GS&5DfVVn[*W%1u%9q:,bqBTco9p_\3;S1!q+O@P'bHf<3^Y7gU^T^mc44>D7]j.%EX-k4l.pZ;pHGRd0SG!Ib$2G!=/-T4rP*:dYps4j@,_R_\"bVY0%A;eSq;c@n+Qf=d;11-_i1STD;B"pBW;UT<j$<=Y&*\I&]$&9I$7GL=C"'AQ?;cJDT)0/uLrX#CafUA+`Q@(<\pGl/M2m1r:^I9IA%_,A`4N[Ul&0-?#_ei(P1d3ER8")0>Unp)\\4D7Gg;iqKp/[ZY!RL3lm@+'@6)jkY&lD`]#jqLNs5cU:(%Ph4tDLBf)S!sb*d8S@6%Rll.GpkY+VTqt!L'&$QBgDrEl8M9>?NFAW>lFA3el=T=KYZ.6`R2dP+BT.6e=/dZUS4?;%=WF'hSPka^9f*%'79:748^BPFI7a6>%??j<f@IQ5t[AsW^8lNpEJIG)mWa'UoR7/pnI]n>Tkt],G5cBAOA.*H0(9P1ZbI0E0+6OIDU,NuRS;Gm(P26#^FH*<0onI^/)[E4l%S7%+`U;U1;(u)AG]'>_9/L&*hq5tGb@)$TP(b!'jGc<6.ZM]di"0T?c+65I0Z1l*W%#ucE'imJ:Gh0W)?=ZilV$inu99hZ.7TbTH%7TJQ7l]jUejhhnB#3QJs)@W,c3]'E=5aZ**^\8mI3GIfZmTWe[1LFnZB#_Z&=ef&pP]6Ld4%X.*XnK/P(OL1[YH?\M^'hC!ka$E*%/gC[iY%IcD!,G*OR&A9*p/m2le]!,26S4[SU`FNV*oX#ua?B5ZfK8EA;]e,$Z[:1C`&CTCT4iD`L?sB<lqgtn6(8VG@ao!mADZ#k%C18<+m[BlL1EfV1:s\sN(!YW@.]]q/I$Nel<`#9]Y#:>NNHLRG"+Z#G*TNVC-X/B2:mV27BjQ:uDAG?^kc7BEg>W#R_cantkk>Kb%robRYFsS7F-q&g@eU+G[?+RZ<:,QV,]=@A-'ET.TA[d>7_30A=UE^kVShaO$<N:7#UH:5oSgMG?d_dV70O_i[(NeE5]2?loq"Thf%ad1iSM;+$RTiJhULP1M*7".YpP#)L'<-f$GLm"+,']N&CBp<\%rBg>Q>qi[q8LU7e9^RPfL,](dpk7p_:``'_%qSA5Z7Rsc%=e1o%@iK;Z#I32P5fEL\KP>4LaseF.DSaY98d1-=PInd."gWIs8u,?"IMqT2,4mer,1aO59D[5snPCLN*;:l3WG*pjF@mfuUF7>$P?1"&%eE$Y&;1,&_V)5;sGHZmR#`iU,'hat?a^@->R?fIU%*GlP-"XYm#[M@uSR0G/q]*+O0,d%=<EL#Fer()d_i,@N-GH?_S[#=qcNUc5%o,]WSG=R&;_0[U-*Z4RJ$M.RL_L@krg^_fGk8b-T.C[me)]qK1]h6S\CYl,*&c93c:<"8n8uq_Z?LqLBWATo,?8q:QT6Q_>k2!^%%+h>J&(Wie)jqMjBj_N_2\<i^@<V4-^n"45Pb1=4t6b;*Z'j3`LMR&M85]`0l9WU9mfa;3L>#D^P"fuNRPHEahVLH]h,^eG8QEBrD%hR@;)3OIpQ[Xpn.B=++he="QL#MBGlN@8"^k]<DRei^mg1Q'aG,gt,'5%m::;7,J'#)"4)+&(ScO(`qq2,:,Q7-3F>Dub<'FP2Op%NZM_H(,)o`pTd<A,?r8cD7=?+oCt52C^&"mVB,OH&<X([G-@6Kbu<VH7G3Q4D(Eb0Ye&pJh..ePV07fcCrJ.J3i-/?&[sA\A\aG1%-rjlDXj$e!U28)t%alS+_0KlRb1>#kPFD8QS%!2;G?X>DTp3:?Rr!N+8s0^s$$e7-<5EZTmJ>$rC#U^dAcmFqW[:s?-q0PuWh*Bn%=oVH:N,=gMgjG$jlf^f`Y^5c%kEe3.K]##p+@C)E"Ot,%<t*n5TI,P0Fc._'jpuHi.f#6!/VUQsK(Z'8aXsONEU%`<;V>B2e=t+P%\$cUnUl)`]e]$X@7f4j'JDTMqX6*`^^!8rC3k`fO9YkSGbV6][o0A;8OtXJi*EoSFA?(MP;QD9G%(E&+i2(_=eRIK<<O,\I&%`Zm%L[,A7/9Z!WbMED]E>#EP9W&U:fMn0dUiob`r,/gGBNO;;R4jNQ<Ol`&K&_U9f<tKN[UkUA0l]YBF!]]o)@8l7Hm<%M8^T%4de/!5%Y0K@06kD/f$_e#,'b`%d+U4AOF(*3SX(hD=A?b]95>B=->0MPm0rI:iR&VRV$6F:e=A'a[p.7;B-oH]n`U1s`?:YGdp&0VKjB&4X%*CIMGLqQHi?L`4GCDCrfp1^Xho=AOLF\5iMZW<t,]FR)G8e/RNLCRN`8!G1kn;%arn(CH7Un?1QU9&IqdmR%;U@+CgrBcb1)jn<D%f0hH;N$-7s<c-`E5*d6m#&L\jXfF5-@DU\]-"$>!PcA:S!`G;t6`[cZS#-p$n"HXLNO`DO.ENc_T(TqX##T3%/X\Lm.HJU9(K>ga%A=96BF+0!_@2W?,Zd2:'[bed_a>+E-R$f61qU`s,?l&4sW-k]d(cu"q#+@05O-[UWni9e0hXU-e#]4qu;7R:)<4LORD?5P74tK\*%%Rje9\hs#[3V#I6FdEp%:l9oClLToo,J/Ul@GPY_cc@n%l8?"Rir0"_'DqbpR'Fkt%lQ6*h.%meJgjS2Sgj[0jb==Pj[+WR!^r%M%)$6e,(-H:*RgJG+gQAOCg>M`k;6aaPc`HBBHa3L<#H:^cUs?Ns;'5u!kHmFWZW&f[Z!CqrQj1hJq-KB]4YMNd8=&_dc0t8r$K8_t%NOU[4.>JX/#=YQ'#pCWhAi0ZZR.>!m30[=)Leg%4;RKe/Nee!W`[Q\I@*<sRnUT!<4lpo.Qn+JS74X@5as/01*Y=n5-9>;"nn'L1%53:<gP!8&/;PM-%0+uSd9R9*;dc$4a?@b<)`N8Ypl,=-*T?\q)L255<jSK4ZRMgg,ddR!kXt]n53=,*Rji^GLqtL&=rVhlXqu,]m%r:91BIeVs%TDn0&J,&,Tr;-$"I/E$W07WcakC<BjmH6_5nP=Z6q9QhRlglcJJ,&]'hu<PO?[m@um@XFNmm*J:=Ri#4qY`YWh3\-H]G]\J~>%AI9_PrivateDataEnd