%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 013x003.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 27/05/15
%%BoundingBox: 0 0 250 114
%%HiResBoundingBox: 0 0 249.3149 113.2803
%%CropBox: 0 0 249.3149 113.2803
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 10278 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFFF7DFD07FF7DFD06FFA8A8FD06FFA8A8FD06FFA8A8FD06FFA8%FD07FFA8FD06FFA8A8FD06FFA87DFD06FFA8A1FD06FFA8A8FD06FFA8FD07%FF7DFD07FF7DFD07FF7DFD07FF7DFD08FFA87DFD06FFA87DFD06FF7D7DFD%06FF7DA8FD06FF52A8FD06FF52FD07FF52FD06FFA852FD06FFA876FD06FF%A87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FF%A87DFD08FFCA7DFD06FFCA7DFD06FFA87DFD06FFA8A1FD06FF7DA8FD06FF%7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD06FF7DA8FD06FF7DA8FD06FF%7DA8FD06FF7DFD06FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06FFA8%7DFD06FF7D7DFD06FF7DA8FD06FF52A8FD06FF52FD07FF52FD07FF52FD06%FFA852FD06FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87DFD06%FFA87DFD06FFA87DFD09FF7DFD07FF7DFD06FFA87DFD06FFA8A8FD06FF7D%A8FD06FF7DFD07FFFD077D527DFD06FFA87DFD06FF7DA8FD06FF7DA8FD06%FF7DA8FD06FF7DFD06FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06FF%A87DFD06FF7D7DFD06FF7DA8FD06FF52A8FD06FF52FD07FF52A87DA87DA8%7D7D52FD06FFA852FD06FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05%FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06FFA87DFD06FFA87DFD06%FF7D7DFD06FF7DA8FD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD06%FFA17DFD06FFA17DFD06FF7DA8FD06FF7DFD06FFCA7DFD06FFCA7DFD06FF%CA7DFD08FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD06FF52A8FD06FF%52FD07FF52FFFFFFC9CAFFA852FD06FFA852FD06FFA87DFD06FFA87DFD06%FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06%FFA87DFD06FFA87DFD06FFA17DFD06FF7DA8FD06FF7DA8FD06FF7DFFFFC2%C9C2FFA87DFD06FFA87DFD06FFA8A1FD06FFA8A1FD06FF7DA8FD06FF7DFD%07FF7DFD07FF7DFD07FF7DFD08FFA87DFD06FFA87DFD06FF7D7DFD06FF7D%A8FD06FF76A8FD06FF76FD07FF76FFFFC2C3CAFFA876FD06FFA876FD06FF%A87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FF%A87DFD08FFCA7DFD06FFCA7DFD06FFA87DFD06FFA8A1FD06FF7DA8FD06FF%7DA8FD05FFA87DFFFFCAC9CAFFA87DFD06FFA87DFD06FF7DA8FD06FF7DA8%FD06FF7DA8FD06FF7DFD06FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD%06FFA87DFD06FF7D7DFD06FF7DA8FD06FF52FD07FF52FD07FF52FD07FF52%FD06FFA852FD06FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87D%FD06FFA87DFD06FFA87DFD09FF7DFD07FF7DFD06FFA87DFD06FFA8A8FD06%FF7D7DA87DA87DA87D7DFD07FF52527D527D527D527DFD06FFA8527D7D76%7D7D7D52A8FD06FF7DA8FD06FF7DA8FD06FF7DFD06FFA87DFD06FFA87DFD%06FFA87DFD08FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD06FF52FD04%7DA87D7D52FD07FF52FD047DA87D7D52FD06FFA852FFA8A8A8FFA87D7DFD%06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD%08FFA87DFD06FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FFFFFFC9FFFF%7DA8FD05FFA87DFD04FFA8FFA87DFD06FFA87DFFFFFFCAC3FFA87DFD06FF%A17DFD06FF7DA8FD06FF7DFD06FFCA7DFD06FFCA7DFD06FFCA7DFD08FFA8%7DFD06FFA87DFD06FF7D7DFD06FF7DA8FD06FF52A8FFFFFFC2A1FF52FD07%FF52FFFFFFA87DA8A852FD06FFA852FFFFFFC3C2FFA87DFD06FFA87DFD06%FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06%FFA87DFD06FFA87DFD06FFA17DFD06FF7DA8FFCAC9C2CAFF7DA8FD06FF7D%FFFFA8847DFFA87DFD06FFA87DFFFFC2C9C2FFA8A1FD06FFA8A1FD06FF7D%A8FD06FF7DFD07FF7DFD07FF7DFD07FF7DFD08FFA87DFD06FFA87DFD06FF%7D7DFD06FF7DA8FD06FF76A8FFC2CAC3C9FF76FD07FF76FFA853A87DFFA8%76FD06FFA876FFC9C2CAC2FFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD%05FFA87DFD06FFA87DFD06FFA87DFD08FFCA7DFD06FFCA7DFD06FFA87DFD%06FFA8A1FD06FF7DA8FFC3C9BCC9FF7DA8FD05FFA87DFFFF7DA852FFA87D%FD06FFA87DFFFFC3C9C2FF7DA8FD06FF7DA8FD06FF7DA8FD06FF7DFD06FF%A87DFD06FFA87DFD06FFA87DFD08FFA87DFD06FFA87DFD06FF7DA1FD06FF%7DA8FD06FF52FFFFFFA8CACAFF76FD07FF76FFFFFFA8FFFFFF52FD06FFA8%76FFFFFFCAFFFFA87DFD06FFA87DFD06FF7D7DFD06FF7DA8FD05FFA87DFD%06FFA87DFD06FFA87DFD09FF7DFD07FF7DFD06FFA852A87DA8A1A8A87DA8%FD06FF7D527D7D7EFD047DFD07FF7CFD067D527DFD06FFA852527D527D52%7D4BA1FD06FF7D7DA8A8A8FFA8FF7DA8FD06FF7DFD06FFA87DFD06FFA87D%FD06FFA87DFD08FFA87DFD06FFA87DFD06FF7D76FD067D52A8FD06FFFD05%527D525227FD07FF527D527D527D525252FD06FFA852A87D7D7DA87D7D7D%FD06FFA8527D7D7D767D7D527DFD06FF7DA8FD05FFA87DFD06FFA87DFD06%FFA87DFD08FFA87DFD06FFA87DFD06FFA87DFD06FFA87DFD06FF7DA8FD06%FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD06FFA87DFD06FFA1A1FD06%FF7DA8FD06FF7DFD06FFCA7DFD06FFCA7DFD06FFCA7DFD08FFA87DFD06FF%A87DFD06FF7D7DFFFFCACAFFFF7DA8FD06FF52A8FFFFA8FFFFFF52FD07FF%52FFFFFFA8FFFFA852FD06FFA852FFFFFF7DFFFFA87DFD06FFA87DFFFFFF%CAFFFF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD08FFA87D%FD06FFA87DFD06FFA87DFFCAC9C2CAFFA17DFD06FF7DA8FFA87E7DFFFF7D%A8FD06FF7DFFFF7D7D7DFFA87DFD06FFA87DFFFF7DA87DFFA8A1FD06FFA8%A1FFFFC3C9CAFF7DA8FD06FF7DFD07FF7DFD07FF7DFD07FF7DFD08FFA87D%FD06FFA87DFD06FF7D7DFFC9C3CAA0FF7DA8FD06FF76A8FF7DA87D7DFF76%FD07FF76FFA87DFF7DA8A876FD06FFA876FFA87DA852FFA87DFD06FFA87D%FFA1C9CAC2FF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FFA87DFD08%FFCA7DFD06FFCA7DFD06FFA87DFFCAC3C2CAFFA8A1FD06FF7DA8FF7D7D7D%FFFF7DA8FD05FFA87DFFFF7D7D7DFFA87DFD06FFA87DFFFF7D7DA8FF7DA8%FD06FF7DA8FFCFC2C3C9FF7DA8FD06FF7DFD06FFA87DFD06FFA87DFD06FF%A87DFD08FFA87DFD06FFA87DFD06FF7DA8FFFFCAFFFFFF7DA8FD06FF52FF%FFFFA8FFFFFF52FD07FF52FFFFFFA8FFFFFF52FD06FFA876FD06FFA87DFD%06FFA87DFFFFFFA8FFFF7D7DFD06FF7DA8FD05FFA87DFD06FFA87DFD06FF%A87DFD09FF52A87DA87DA87D7D7DFD06FFA852A17DA2FD057DFD06FF7D7D%A87DA8A8A87D7DFD06FFA8FD047DA87D7D527DFD06FFA852527D527D527D%527DFD06FF7D7DFD06A852A8FD06FF52A87DA87DA8A17D52FD06FFA87DFD%06FFA87DFD08FFA852FD067D527DFD06FF7DFD04527D527D27A8FD06FF52%525276527D525227FD07FF277D5252527D525252FD06FFA8277D527D527D%76527DFD06FF7D27FD06524B7DFD06FF5276A87D7D7DA8527DFD06FFA87D%FD06FFA87DFD08FFA87DFD07FF7DFD06FFA87DFD06FFA87DFD06FF7DA8FD%06FF7DA8FD05FFA87DFD07FF7DFD06FFA87DFD06FFA87DFD06FFA1A8FD06%FF7DA8FD06FF7DFD07FF7DFD06FFCA7DFD06FFCA7DFD08FFA87DFFFFCACA%FFFFA87DFD06FF7D7DFFFFA8FFFFFF7DA8FD06FF52A8FFFFA8FFFFFF52FD%07FF52FFFFFFA8FFFFA852FD06FFA852FFFFA884FFFFA87DFD06FFA87DFD%06FF7D7DFD06FF7DA8FFCACACAFFA87DFD06FFA87DFD06FFA87DFD08FFA8%7DFFFFC3C9FFFFA87DFD06FFA87DFFA87D7EFFFFA17DFD06FF7DA8FFA87D%A8FFFF7DA8FD06FF7DFFFF7DA8A8FFA87DFD06FFA87DFFFF7DA8A8FFA8A1%FD06FFA8A1FFFF7DA8A8FF7DA8FD06FF7DFFFFC9C3CAFFFF7DFD07FF7DFD%07FF7DFD08FFA87DFFCF9AFFCAFFA87DFD06FF7D7DFFA87DFFA8FF7DA8FD%06FF76A8FF7DA8FFAFFF76FD07FF76FFA87DFFFFFFA876FD06FFA876FFA8%7DFFFFFFA87DFD06FFA87DFF7D7DFFFFFF7D7DFD06FF7DA8FF9AFFCAFFA8%7DFD06FFA87DFD06FFA87DFD08FFCA7DFFFFC9C3CFFFCA7DFD06FFA87DFF%A87EA8FFFFA8A1FD06FF7DA8FFA87EA8FFFF7DA8FD05FFA87DFFFF7DA8A8%FFA87DFD06FFA87DFFFF7DA8A8FF7DA8FD06FF7DA8FFFF7DA8A8FF7DA8FD%06FF7DFFFFCAC3CFFFA87DFD06FFA87DFD06FFA87DFD08FFA87DFD06FFA8%7DFD06FF7DA1FD06FF7DA8FD06FF52A8FFFFA8FFFFFF52FD07FF52FFFFFF%A8FFFFA852FD06FFA852FD06FFA87DFD06FFA87DFFFFFFA8FFFF7D7DFD06%FF7DFD06FFA87DFD06FFA87DFD06FFA87DFD09FF52A87DFD04A87D7DFD06%FFA852A87DFD04A87DA1FD06FF7D7DFFA8FFA8FFA87DFD06FFA87DA1A87D%A8A8A87D7DFD06FFA87D7DA17DA87DA852A8FD06FF7D7DA8FFA8FFA8FF76%A8FD06FF527D7DA17DA87D7D52FD07FF52A8A8A87DA8A87D76FD08FFAFFD%077D76A8FD06FFA8FD087DFD07FFFD047D52FD047DFD07FFFD097DFD07FF%FD057DA87D7DA8FD06FFA8527D7D7D527D7D7DA8FD06FFA87DA87D7D7DA8%7DA8FD07FFFD087DA8FDFCFFFD33FFA8FD0FFFA8FD50FF52FD0EFFA852FD%0EFF52A8FD0EFF52A8FD47FF7D527D76FD057D52A8FD04FFA87D7D7D76FD%067DFD05FF52FD067DA85252A8FD05FF52FD067DA85276A8FD05FFA87D76%A87D7D7D7676FD07FF7D7D7DA8767D7D767DFD07FF527D7DA852A8527D7D%FD07FF527D7D7D527D527DA8FD08FF527D5252527D4BFD0452FD04FFA84B%7D27525276277D5252A8FD04FF525252277D27FD045276FD05FF52525227%7D27FD04527DFD06FF277D27527D52527D52FD06FFA8527D277D52527D52%7DFD06FF7D5252277D27527D52FD06FFA8527D27527D277D527DFD08FF7D%527D7D5227525276527DFD04FFA852527DFD05527D52A8FD04FFFD047D27%FD04527D52FD05FF7D767D7D27FD04527D52FD06FF7D527D527D7D5252A8%FD06FFA852527D527D7D7652FD07FF7D767D7D527D527D7DFD07FF527D7D%7D52A8527DA8FD08FF5252FFFFA8FFA8FFA8FFA8FD04FFA827A8FFFFA8FF%A8FFA8FFCAFD04FF5252FFFFA8A8FFA8FFA8FD06FF5252FFFFCBA8FFA8FF%A8FD07FF27A1FFFFA8A827FD08FFA827FFFFAFFF7D52FD08FF5252FFFFA8%FF527DFD07FFA8527DFFFFFF7D52FD0BFFA9FD1DFFA9CAC9FD0DFFA8FD15%FFA8FD0DFFCACAA8FD09FFA8FD05FFA8FD09FFA8FD05FFA8FD0BFFCACAFF%AFFFA8A8FD08FFCACAFFFFA8FFA8FD09FFC3C3A8FD0DFFCAFD0FFFCACAFD%10FFCAC3A0FD0BFFA8FFA8A8A8CACAFD09FFA8FFA8FFFFFFA8CFCAFD07FF%C9C3CFA8FFA8FFA8FFA8FD05FFCAC9C2CAA8FFA8FFA8FD07FFC3C9C3FFA8%FD0BFFC3C2C9FD0DFFCFC3C2FD0EFFA8A8C9C3C9FD0AFFA8AFA8FFA8CAC3%C9FD08FFA8FFA8FFA8FFA8CAC3CFFD07FFC2CAA7FFA8A8A8FFA8FFA8FD04%FFCAC3C3A1FFA8A8A8FD08FFC3C3C2A8FD0CFFC2C3CAFD0DFFCFBCCACAFD%0DFFA8CAA0CAC2FD0AFFFD04A8A9A0C9A0FD07FFFD08A8A1C3CAFD07FFCF%C3CFA8FFFFFFA8FFA9FD06FFC9C3FFA8FD0BFFC9C9C3FFA8FD0BFFC9C9CF%FD0EFFCAC9FD10FFCAC2CAFD0EFFA8FFC3CAFD08FFA8FFFFFFA8FFA8FFC9%C9FD07FFCAFD0FFFCAFD0FFFCAFD0FFFCAFD0FFFCAFD11FFCFFD11FFCAFD%13FFCAFDFCFFFD10FF7DFD0FFF7DFD0EFFA87DFD0FFFA8FD0DFFA87DA8FD%0DFFA9A8FD0EFF7D7DFD0EFFA8A8FD10FF7DA8FD0DFFA87D7DFD0DFFA87D%A8FD0DFF7D7DFD0EFF52A8FD0DFF7D52A8FD0CFFA8A87DFD0EFF7D53FD10%FF7DFD0FFF7DFD0FFF52A8FD0DFF7D59FD0DFFA8A87DFD0DFF7D7D7DFD0D%FF7DA8FD0EFF7D7DA8FD0FFF7DA8A9FD0CFF7D7DA8FD0DFFA8A8A8FD0DFF%A87DA8FD0DFF7DA8A8FD0DFF7DA8A8FD0CFFFD04A8FD0CFFFD04A8FDFCFF%FD0AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-27T12:37:34+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-27T12:37:35+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-27T12:37:35+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>116</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Fed5pYtGtmido2Oq6Qh&#xA;ZSVPF9UtlZduzKSD7Yqn+KpB53mli0a2aJ2jY6rpCFlJU8X1S2Vl27MpIPtiqf4qxrzzPPDb6MYZ&#xA;GjL6zp8blCV5I0wDKadQe4xVkuKsa86TzxXHlsRSNGJdZgjkCkryQwzEq1Oo26YqyXFUg8yTSx6z&#xA;5UVHZFl1WVJVUkBlGl3zcWp1HJQfmMVT/FWNeYZ5083eVIkkZYpp7wSopIVwtm5HIDrQ774qyXFW&#xA;Na1POnnny1CkjLDLBqJljBIViqQ8eQ6GldsVZLiqQXs0o8+6PCHYQvpWqO8YJ4lkuNPCsR0JUO1P&#xA;mcVT/FWPX3/kwtF/7ZOrf9ROnYqyHFWLyf8Akz7f/tiT/wDUXDirKMVY5Jd3Q/MWC0Ez/VTo80pt&#xA;+R9MyC6iUPwrx5BSRXFWR4qxyO7uj+Ys9oZn+qjR4ZRb8j6YkN1KpfhXjyKgCuKsjxVjWizzv558&#xA;ywvIzQxQacYoySVUsk3LiOgrTfFWS4qkHluaWTWfNau7OsWqxJErEkKp0uxbiteg5MT8ziqf4qkH&#xA;luaWTWfNau7OsWqxJErEkKp0uxbiteg5MT8ziqf4qkHluaWTWfNau7OsWqxJErEkKp0uxbiteg5M&#xA;T8ziqf4qx7z3/wAcS2/7a2jf91a1xVkOKse89/8AHEtv+2to3/dWtcVZDirF/P8A/vNof/bb07/k&#xA;+MVZRirF/PH+9Plf/ttwf8mJ8VZRirHvNH/Hb8of9taX/uk3+KshxVi/mT/lMvKH/Ge9/wCoKTFW&#xA;UYqwzzfpdtqXnXytb3D3Ecfo6k3K1uZ7SSoSD/dlu8T09q0xVEXHlfynbTxwXGpalFNLx4Rtreqg&#xA;nm3Bf+Pr9pvhHidshLJEGid22GCcgSASAh7bQLHSvzD0lrWW8kM2kaoH+t3t5eAcbnTqcRdSzcOu&#xA;/Glcm1MzxVj19/5MLRf+2Tq3/UTp2KshxVi8n/kz7f8A7Yk//UXDirKMVYvJ/wCTPt/+2JP/ANRc&#xA;OKsoxVi8f/kz7j/tiQf9Rc2KsoxVi+h/8p95p/4waZ/xCfFWUYqx7yv/AMdvzf8A9taL/uk2GKsh&#xA;xVj3lf8A47fm/wD7a0X/AHSbDFWQ4qx7yv8A8dvzf/21ov8Auk2GKshxVj3nv/jiW3/bW0b/ALq1&#xA;rirIcVY957/44lt/21tG/wC6ta4qyHFWL+f/APebQ/8Att6d/wAnxirKMVYv54/3p8r/APbbg/5M&#xA;T4qyjFWPeaP+O35Q/wC2tL/3Sb/FWQ4qxfzJ/wApl5Q/4z3v/UFJirKMVYvrn/KfeVv+MGp/8Qgx&#xA;VW1DyvLcaxc3qSI0F7HAlxDKZAEa2csrqqMFeob7L9Dv4g4mTTkyJ6Gu/o7LDrhHEIEbxMqIr+L3&#xA;8vh02bvv/JhaL/2ydW/6idOzLdayHFWPX3/kwtF/7ZOrf9ROnYqyHFWLyf8Akz7f/tiT/wDUXDir&#xA;KMVYvJ/5M+3/AO2JP/1Fw4qyjFWLx/8Akz7j/tiQf9Rc2KsoxVi+h/8AKfeaf+MGmf8AEJ8VZRir&#xA;HvK//Hb83/8AbWi/7pNhirIcVY95X/47fm//ALa0X/dJsMVZDirHvK//AB2/N/8A21ov+6TYYqyH&#xA;FWPee/8AjiW3/bW0b/urWuKshxVj3nv/AI4lt/21tG/7q1rirIcVYv5//wB5tD/7benf8nxirKMV&#xA;Yv54/wB6fK//AG24P+TE+KsoxVifnzS7LVL7ypZXqM9tJq8hdUkeInjpd8w+ONkYbjscVQPmDyb5&#xA;I0fSrm+ezlke3ikmS3Oo3cbSCJebhSZjuFFemVZcnBG3K0mmObIIDayBdXVoaTyvoWlecvKF3p0E&#xA;kMlw95z9S4nn2Nk7UAldwPmMsibFuPIUSHoeFiwTz75Z0LzF5w8rWGtWiXtn6Wov6LlgOSpBQ1Uq&#xA;cVSfzV+W35R6Bp/1k+XLSefknG0a5kikdGdUdkBdi3DlUimNLaaaP5F8p+V/zE01tB06Owa70jUx&#xA;cFGduYjudP415s3TkcVZ/irEfMeiaNrHnrQrfVrC21G3TS9VkSG7hjnQOLjTgGCyBgDRiK4qgPMW&#xA;gflrpKRpH5b0KW8M1vG9o9rbLJ6dxMsXJVEZNRzrQ9QDmPmziHKr7nP0ehlmJuxGpb1tcRatpvl/&#xA;QdH/ADMiTSNNtdOSXRZmlW0gjgDEXcQBYRqtfpzIcBm+KsXk/wDJn2//AGxJ/wDqLhxVlGKsXj/8&#xA;mfcf9sSD/qLmxVlGKsX0P/lPvNP/ABg0z/iE+KsoxVj3lf8A47fm/wD7a0X/AHSbDFWQ4qx7yv8A&#xA;8dvzf/21ov8Auk2GKshxVj3lf/jt+b/+2tF/3SbDFWQ4qx7z3/xxLb/traN/3VrXFWQ4qx7z3/xx&#xA;Lb/traN/3VrXFWQ4qxfz/wD7zaH/ANtvTv8Ak+MVZRirF/PH+9Plf/ttwf8AJifFWUYqx7zR/wAd&#xA;vyh/21pf+6Tf4qhvNPlrU7+fUpbRYJ/0hpj6eqXDlPQersJEokleXPfpuo+jEzYZSJIo3Gvc7fQ6&#xA;3HjEBKxwZOPbry2O47vtPxS1ZJ4/MvkiOcKs6PdrKsbFkDCxcHixCkj6BmTAEAAusykGRI5Wy/JN&#xA;bF9c/wCU+8rf8YNT/wCIQYqlHmvyX5hvL/XbjT4rO8GsxWSwvezSRNbNZPy4KFhnqjn49qENXY7Y&#xA;VTy6Mh8/aEZFCyHR9V5qpLKG+s6bUBiFqPegwKyPFWMaveWlr5/0SS6njgRtK1VQ8rKgJ+s6caVY&#xA;jFUs1iytbiTU/qWtaeI9SubS8b15QWSS0aI8AVb7DCFfluPlh5MEiZUR6q+x2+n1+OIhxg3CMo7V&#xA;yle/v9SLivrK7/M6BrW4juFXRZwxidXAJu4uvEnMx1DL8VYvJ/5M+3/7Yk//AFFw4qyjFWLx/wDk&#xA;z7j/ALYkH/UXNirKMVYvof8Ayn3mn/jBpn/EJ8VZRirHvK//AB2/N/8A21ov+6TYYqyHFWPeV/8A&#xA;jt+b/wDtrRf90mwxVkOKse8r/wDHb83/APbWi/7pNhirIcVY957/AOOJbf8AbW0b/urWuKshxVj3&#xA;nv8A44lt/wBtbRv+6ta4qyHFWIfmZZWt9pmk2l3GJrafWdPSWNujK0wBG2KqOoeSPyv04oLvS4I2&#xA;cMyqFlc8EpzchCxCLX4mOw75XPLGPNvw6fJk+kX+OW/XyS/XvJ3lPStQ8rX+kWEMEz6xAqzxEmqN&#xA;BM2xJIoaA5MG2kgg0XouFDDvzE0HSNeufKumavbLd2E2ruZYHLAEppd8y7qQdmAOKpLqn5afkdpU&#xA;yQ6hpVpbyOvqcXkn+GMMF9RyHPBORpyagxW2/wDlX3k3y1578qXOhaXHYzzS3qSSIzsSos5DT42b&#xA;FXpWKsF89eXNC8wecPK1hrVjFqFn6Wov6E68l5KkNDiqAv8AyB+RVhfrYXeh6dFdN6fJfQZlj9Zu&#xA;EXquoKReow4pzI5HpiqM0ryR5S8tfmJpjaBpVvprXWkamLg26cS4S50/jy+XI4qz3FWH+ZtA0LW/&#xA;PehW+s6ba6nbx6XqskcN5DHcIr/WNOHJVkVgDQkVxVAXeg/ktaak2nz+WtIWaOSKCeUaVCYIprin&#xA;oRSziExRvJzXiGbuv8y1VVdL8teXdE/M2NNF0qz0xZtFmMq2dvFbhyLuKhYRqtfpxVnWKsG17y/p&#xA;WtfmTZw6jE8kcejTugjllhPL61ENzEyE9e+Kqj+TPy5S/FgwkF4SF9L69e15MvIKT61AxXcL1plZ&#xA;yxEuG928abIYcdHhU9B8v6Vov5k3kOnRPHHJo0DuJJZZjy+tSjYys5HTtljQznFWL6H/AMp95p/4&#xA;waZ/xCfFWUYqx7yv/wAdvzf/ANtaL/uk2GKshxVj3lf/AI7fm/8A7a0X/dJsMVZDirHvK/8Ax2/N&#xA;/wD21ov+6TYYqyHFWOef5I4tAgkkYJGmq6MzuxAUAatakkk9MVTT9P6F/wBXK1/5HR/81YqkPnTW&#xA;NJuNJtIYL23llbV9G4xpKjMaaranYA1xVluKsU/MSaKGy0WSV1jjXWtOLO5CqAJxuScVXax+i7u/&#xA;+v2WuWdtcPayWUvqskyGKRg3JVEkdGVh8jmPlwmUuIGjVOdp9XGEOCUeIcQlsa3HwOyW69Po0EXk&#xA;3TLG9huBaapaQxhZUdykVtMgJ4n2y6EeGIHc42bKck5TPORJ+bO8k1Me80f8dvyh/wBtaX/uk3+K&#xA;pf5p8iXurXurT2N9Fax6/pi6PqizQtMywqZaPAQ6BW4XMgowIrxPYgqqmtW8dt5p8lW0ZJjhku40&#xA;LGrUSxcCp7nbFWW4qxLzLdWtt568rSXMyQR+hqQ5yMEWvCDuxGKpbr2gaTqd7qrReYrO30/XRajV&#xA;bdgkk3+i7fuJfWQR80AU8kanUYqm0moWF3+YWj/VbmK44aRqvP0nV6VudOpXiTTpirKcVYl5h1nS&#xA;NK8+aFPql9b2EL6XqqJLcypCpb6xpx4hnKgmgO2KpBqMX5e3l9fn/GOnxaVq95bajqmni6tiZLi0&#xA;9Lhwl9SsaP8AVo/UXia02K1xVNrDXdE1b8zYm0vULa/WPRZhI1rNHMFJu4ftcC1MVZtirF5P/Jn2&#xA;/wD2xJ/+ouHFV8/lK4ku5gLtRp9xqEWqSJwPriWLgeCyBgOJaJTXjUCo8KYh05vn6eLi83aR7QiI&#xA;j0+sQMOe1G96rnv+lZH/AOTPuP8AtiQf9Rc2Zbq2UYqw/TNR0+08/wDmcXV1DbloNN4iWRUJok3T&#xA;kRirIf0/oX/Vytf+R0f/ADViqU+ULi3uNW82zW8qTRNq8fGSNgymmlWANCKjFWS4qx7yv/x2/N//&#xA;AG1ov+6TYYqyHFWPeV/+O35v/wC2tF/3SbDFWQ4qxr8w4ILjy7DBcRrNBLqujpLFIoZGVtVtQVZT&#xA;UEEYq1qGgeQbGSGKbQbFprjkYoo7KF2KxjlI1An2UB3+7qQMryZRGr6t+HTyyAkch3+fL5pd5r8t&#xA;+VbfSLC+0/SbK3l/SuivBcQ20UbgPqlqKhgqsKqcmDYsNMokGizfChh/5m6fYahpmj2l/bRXdrLr&#xA;WnrLbzossbAzAEMjgqdjiqF1byv+T2lXEdveeWNIE0kUlwUj0uCUpBDQSTScIm4opdRU9ztiqG8y&#xA;eSfJelal5WvNK0DTbC6/TUAFxa2kEMnEwzGnONFNKgYq9DxVifnzSNK1a+8qWOq2UGoWMmryGS1u&#xA;okmiYrpV8y8kkDKaEVG2KpfqPlP8ltOvksbzyxosdw6CZgNLt2WOJn9NZJXWIrGrSfCpYiprToaK&#xA;qd55N8oaJ558pXGi6Hp+mTvNeq81nawW7sv1OTYtGqkjFXoGKsJ85aHousedvKttq+n22o2wh1Jh&#xA;BdwxzoGCQb8ZAwriqnceV/ydg1Q6Y/ljSDdKYVl46ZAyRtctxgWRxFxVpCPhFf1jFVW08reWND/M&#xA;TSm0XSLLS2n0jVBObK3ity4W507jz9JV5UqaVxVmuKsS8w6NpGq+fNCg1Sxt7+FNL1V0iuYkmUN9&#xA;Y04cgrhgDQnfFUOmlflpJrM+lQ+WLGaS0kjt7q4j0+3aGKeWP1kicheQPpkMTx4ioqQTirVhoWia&#xA;T+ZsS6Xp9tYLJosxkW1hjhDEXcP2uAWuKs2xV5/5m8oeWPMf5lWcOu6bBqMcWjTPGs68grC6jFR/&#xA;wRxVDj8vfyNOqtpX6B0766sot2T0G4eu0RnEPqU9P1PRHPhy5cd6YqiPLPlDyx5c/Mq8h0LTYNOj&#xA;l0aF5FgXiGY3Ugqf+BGKvQMVYRZ6DoWpfmD5mfUdOtb10t9NCNcQxykApNWhdTTpiqOsNF/L+/ma&#xA;O20GyZQZBHMbGIRyei/pycG4UPF9vftUZVDNGRoORl0s8YuVdNr3Fixfw/a35KsLGw1PzbbWNvFa&#xA;2yavGVhgRY0BOlWBNFUAbnLXHZRirHvK/wDx2/N//bWi/wC6TYYqyHFWPeV/+O35v/7a0X/dJsMV&#xA;ZDirG/zCnhg8uwzzyLFBFqmjvLK5CoqLqtqWZmOwAHU4qo6lr3ky7vLS9i8y2FveWYkWKVbq3YFJ&#xA;gokRlZt68FI9xlWTHxEEGiHJw6jgjKBHFGVfMcvvKC80+ZPLVzo+n2NnrNpe3R1TRVREuYZZpOGq&#xA;WpJ4o1SaKSaDLAKFNEjZJ5M3wsWJ/mPc29tp+j3FzKkEEWtae0s0jBEVROKlmagAxVD6rqXk+61i&#xA;DWLPzXY2N/FbS2TutxbSK8EzK/2WbZ0dKo3TrUNiqj5n8xeXr+98rWun6raXs66zAfThuIpZCqwT&#xA;AsQjE/M4qzrFWNeb7i3t9W8pTXEqQxLq8nKSRgqiulX4FSaDFUPe2+jvr8mt6fr9tZXV3ax2N98U&#xA;UvOGF3kiaOrgRyoZX+IhhQ7rsMVU9b1LTrvzp5RW1uobhlmvSyxSK5A+pvueJOKsxxVh/mvUdP0/&#xA;zv5XuL+6itLf0dSX1p5FiSpSCg5OQK4qpNqHlCPXbrVbPzZZWw1A251C3FxbMJDa7KUYtVOafA/W&#xA;q9OJ3xVWTXNF1P8AMPSBpuoW16YtI1Qyi2mjl48rnTqcuBalaHFWX4qxHzHrWjaR560O51a/t9Ot&#xA;n0vVY0mu5UgQubjT2ChpCo5UUmntiqDi1/8ALSDV7vUrXzjY231+WK4vrSLULIQyzQosau1ayAlI&#xA;0DBXAbjuOtVVTTde0PWfzKjl0jUbXUoodGmSaS0mjnVGa6iIDGMsASB3xVm2KsRvr2ztPzNtXup4&#xA;7dG0WcK0rqgJ+txGgLEYq3YwaVp+q3tzZeYLaKw1G7F/dWnKJnM3pLG4SUv8Mb+mrFeBNa0YA7Kt&#xA;WN7Z3f5m3T2s8dwi6LAGaJ1cA/W5TQlScVZdirBYfM3lvRvzB8ypq+rWenPNb6a0S3dxFAXCrMCV&#xA;EjLWle2Kq2lea/y70z91D5x01rNWleG2a+tOKGZy7DkGDMAxPGp2r3ynHh4OR27nK1Gq8XcgcW1n&#xA;3Cv7UV5G1PTdT1DzZeabdw3tnJq8YjubaRZY2K6VYq1HQspoRQ5c4rKsVYdo/mHQNN8xebYNR1O0&#xA;sp21SF1iuJ44nKHSrEBgrsDSoO+Kpx/jXyb/ANX7Tv8ApLg/5rxVAeS72yvtS82XVlcR3VtJq0fp&#xA;zwuskbcdKsVNGUkGhBGKsoxVZNBBPE0U8ayxN9qNwGU99wdsVQf6A0L/AKttr/yJj/5pxVTNl5Zt&#xA;Ly1iMFlb3twzfUkKRJK7Rrzb0hQMxVRyPHoMVTPFVO4tre5iMVxEk0RoTHIoZTTcbGoxVCfoDQv+&#xA;rba/8iY/+acVWQ2nlu31JLaGGzi1IRmeOFFiWf0gQhkCgc+PJuPLpiqZYqhtQ0vTNShWDUbSG9gV&#xA;g6xXEaSoHAIDBXBFaE74ql/+CvJv/Vh07/pEg/5oxVvTNI8n2upTLpllp8GpWir6620UCTxLMDx5&#xA;8AHUOFNK9cVTjFVG6sbK7VVureO4VTVRKiuAT4cgcVQ36A0L/q22v/ImP/mnFWrGHQIr64gsEtI7&#xA;63VBdRQCMSxpL8SeoqfEofhUV60xVMMVdirsVdirsVQWo6Fompsjalp9tetGCI2uIY5SoPULzDUr&#xA;iqD/AMFeTf8Aqw6d/wBIkH/NGKozTtC0TTGdtN0+2smkAEjW8McRYDoG4Ba0xVG4q7FXYq7FXYqh&#xA;bjSdKuJTLcWUE0rU5SSRIzGmw3IJxVS/QGhf9W21/wCRMf8AzTiqKtrS1tY/TtoUgjJ5FI1CLU96&#xA;KBiqrirCvzN1fVdLHlx7HUbqwivNWjsr4WdvFdSSQSwTOQsckNw/INEKcB47HFWDw+avzYspNOm1&#xA;VdZlhuPqMzQ2mlRzUij1WSG6+sCK2d42l00Ryugo4c/BQVGKpfpmtfmTqc+mS69Dq8dzZapDJBqC&#xA;aQ3OC3ntb6K4ZY/qdFZRNDGwPqr0ZWPxBVL2PyTf6rqHk/RbzWI5IdYmsrdtTilia3dbv0wJwYmC&#xA;lf3vKm1PDbFDFPzL1zzDpvmLRbXTNTvrWG/sdTZrWws4bx3uLVImtyFa3uJBVpSG/Z6dOuKsVm82&#xA;/m3p9wE1CLWJbp1WZorPSkubSP6xorP6XqRQcm9HVeKp+8rSvqHjviqWfpz80pLeLVJbfVR5ks7D&#xA;WIILxdJdhM3o2UtpFQ2UQWO4urd9mQMu45ceLlV7/BMk0McyBgkih1Dq0bgMKjkjhWU+IYVGKvL/&#xA;AD35g87WfnO907QL+9klGmWV3pulQWcFxA1zLeSQus8voGSKFo4/iZpV47kN2xVIdX82/mtZvcad&#xA;bHW5Ly3j1K2+vHRlnt2lTWYRp86tDbgNXTHk5lapQVCtICMVW6Lq3ntdYj1+e01e11C7t9Cg1OA6&#xA;Y0guETVb0XYmdbRKGCwuUcNGqMdgQGBUKvc8VeWeefMPnax8632n6BfXlxL+jrG903R4rOGeBriS&#xA;8kglSaYQc4oXjiqzPMtNyrdsVY/q3m382bP19Otzrct9bx6lbG/OjLNbPLHrUIsJ0MNv8XLTGk58&#xA;arTdVaQEYq3o2r+eI9Yj1+e01e21G8g0GDUoDpbyC4jTU74XYmkS0QD6vY3KSBkWNjsCOVVCr3LF&#xA;WCfmNrOr6drnlqG01S9sbPUZbuC9g0+1hvJn9O1eeNo42t7qTkHjANBShNfEKsW0vXfzhvLzT7bU&#xA;lvtPv7iTTEkt7axhayFpNZhtQuZLmSGVIriGcvxjMvVUHpsCaqpx+UXmHzjrUWn3epXN3qGmXehW&#xA;N5c3d7aR2gXUp6tJHbFIbb1YjGa1AdRt8W9MVemYq84/M/XPMuma9pdvo+p31ut/p2pullZWcN4z&#xA;3dosLWzBTbzyAM03F9wtKfZ64qxy/wDM/wCbq2ty939c03VozM91bQ2UT6bBYx6UZhcx3kkMqNML&#xA;wBeBmbuPTpuFWXfldrPmjVEuJtUnu7zTmstNmtby+tEs3N3NFI15HEEjg9SFP3RV+HVmAZqYqzzF&#xA;Xlf5h+YfO1h5vurHQNQvZJW0Zb3TNIt7OC5ikvVuhEqTSeg0kcMi/bZpV49Qw6Yqkfmjzb+allpm&#xA;qXcdxf2VzaJq01+GsIBZ2kVvdAaabS4mt+NwZ4QOY5yn4mPwELRV6N5FvPMdxNraanJdXOmQXaJo&#xA;t9f262l1LD6EZl5wrFbfCk/MIxjXkPEUJVZViryXU9X85H8w9a0/Rr+/uJbS+0c2th6cb6fHbXIU&#xA;331mX0i0aiAOyVevKnGpxVILnW/zNttOt7nU7/V9PWJtJXWZGt4UYandarHaXNvYq0LieD6tM7Jw&#xA;DrVUNa8gVXqnkCfzDNok7a36xK3t0mmyXSCK5ksFlItnnQBOLlPFQ1KFhyrirJcVSPzJBok0+mx3&#xA;+kwareGZm05JoopDG8aGVnRpQeDAJsRvWnzFWTJw0KslyMGDjBJNRjz+JpENr9uiGWWGSOEF15Gn&#xA;LnEhdlKg+CkfPLRuGiQo0tGqzQzSpLHI8jyAQQUUkD0g7CqA/wC37YoTSN/UjV+JXkA3FhRhUVoR&#xA;44qx3zDNoNtq8F7PpEN/q1hbS3aXZjiM9vbRGjmKWQcgTzNFU775Rlz8Bqr2v4OZptGcou+EGQiP&#xA;6x/HNFya4rvDdRFxYL63qNRaOI4i5oD8Qpx2y6JsWHElExJB6JlZ3TXCMzRPCymlHBFagGoJAr1p&#xA;88KFfFWI6zNplv5ga6sLFIdYjl0+31HV44bf1Wgu7lIxbvI6mVkYLvx6fDmNkzHi4R0Mb+JdlpdI&#xA;DHilXqjOhv8Awxu9u7z57sisNSW9JKRSLHTlHIykKwqV6067VzJdajMVdirG2uNDg83SvbaMsmru&#xA;sVvf6tDbqZgkwBRZJVXmUHpJy5NQbdabY5z+vhAJ7/i5sdGTi8QyAu6HfXP9n9jJMyHCdirsVY35&#xA;nn0GDVNPlutFTVdXhjmubGRbdZp4UhKczCxV3VizqFC0qe4yjLm4CBVlzdLozlBlxCMQQLPeb/Vu&#xA;yCeC3uraSC4iWa2nQxzQyqGR0cUZXRhQgg0IIy9wlPT9O0/TrSOy0+1is7OKvpW1vGsUS8iWPFEA&#xA;UVYk9MVRGKpPqFvoo1u2vpNLiutXt4j6N8IEe4iiYlCEl4l1B9RtgQKV8d1UttNTTzDqS21xb+r5&#xA;f1HTpJBZ3SQyRTKJkUOykM3xK+6saUptWuYmLMZz/omP6XZ6jSRxYiDRyRmAee2x27un3sks7Kzs&#xA;bWKzsoI7W0gUJBbwoscaIOioigKoHgMy3WK2KpJcxaDba7JqX6LibVUiVLjVEgU3CxPsFMoXnx+D&#xA;ccqUxVB6xe2V5G9hqmnpqVnqX1VLbTLpIZInkcyyAuGDLRRBz+KtCNu2V5cnCBtZJpv0+DxCd6ER&#xA;Z934KcaFe2d7pUE1nD9Xt15QLb0VRGYHMLRgL8NFZCBTbDjnxxtdRgOKZifL7RY+wo/JtCQ/7g9P&#xA;1K+1G30uGO7c+lfahDCizyMIxIBI4UMy9BVm64qp30FhqXqWOradBqZW6Mlva3iRyxxtHAj8lLow&#xA;BAlIU0rv1xVGab5gXUbmRba3Y2sTrFJOzKpWRoFuKcDuV4SKKg9e1N8qGS5VWw2cmen4YCRO8hYH&#xA;lfDz77B+HXom2WuMg9S0q01GNI7kGkbF0K0DBipWoalR8LEbdjleTEJii34NRLGSY9V0el6dHQJb&#xA;oAF4hQPhAK8TRfsiq7dMmBQpplIk2ebhpdgCSIqMSDyq3KqggHlWtaGnywoRKqqqFUAKooAOgAxV&#xA;AapodhqbI12vPgrIBRaFXpyVqg1VqCqnY+GVZMMZ83JwaqeL6fx+O/mrtplgz82hUtUn2qRxO3Tc&#xA;bHxy1xiqwW8MClYl4g9dyegoNz7CmKqmKpXqXlvS9RuPXu0LsRGGAIUERNzStBU8WJK77dsoyaeM&#xA;zZcvDrcmKNR8/t2KPhtbeFmaJApatae5qaDtU77Ze4irirsVQMmjWUmoi/dSZwFHYKeFSnKg+LiT&#xA;Va9D0yo4YmXF1b46mYhwDl+vn8+qOy1odirsVQWo6RZ6g0TXAJMXIJSgNHFHWtK8WGzCtD3yrJiE&#xA;+bfh1Esd8PX8D5dEb0y1odirsVUprW3mZXkQF1BAbvQ9R7jbocVQNj5c0uyvBdwIRMquinYBVkbk&#xA;yqFCgAtvTplENPGJsOXl1uSceEnb9SZ5e4jsVUZLO2llEskYZwAKnuAagEd6HcVxVCXPl/TJ0CGL&#xA;hTjRl+0PTNU4k148a7EdMhkxiYotuHNLGbCLs7OCztY7W3UJDEOKKAB+oDDCAiKDHJkM5GR5lWyT&#xA;BReytJJGkeFWdxxckVqKU38djTFVP9FadRh9XT4iC23Ugcf1bYqprounrqI1ARL9ZUcVbigoAvAU&#xA;ooNQp41r026ZV4UeLi6t/wCZn4fBfpR2WtDsVSTzvLLF5Q1iWCSaK4S0la3e19T1vWCn0gnpfHUv&#xA;QbYqmdnqFreBjAXIVUarxyRgiReS0LqtdutOnfFURirsVYl+Z13dW/lxhaXV3a3czNFbPZJKzeq0&#xA;b8HkaBJJEjjakhoPi48d+VCqyLSrkT2UZLSPJGqxyvLE0LM6qOR4sB1/yajwOKovFXYqxX8yLnU7&#xA;by7JNpsl3Hdx83iNmKkssbFVaiyMSW/u1pRpOKtVSQVWR2d0lzAJFWRP2WWZGjcMNjUED7xt4Yqr&#xA;4q7FWJ/mFqur6fa6dJZRXJthfWj3stoFeQxpcxFoeFQ3GSPmXYdlodmqFWUW9xHcRepHy48mX40a&#xA;M1Rih+Fwp6rse/UbYqqYq7FWIecJdVt9e0a5tPrUsSzQxNZQmVY5vWuEjkLGN1WsMTNMfUXiVUju&#xA;aFWV288dxBHPGGEcqh1EiNG9CKjkjhWU+xFcCqmKuxVgnmHVfMlt+YVlFEsz6MIbT04YVmPqPNLc&#xA;LdseCmMiGNImYPWg+zQthVnEE8c8Ec8fL05VV05KyNRhUVVgrKfYiuBV+KuxVik9u8Pni4vXuNRF&#xA;lZ2S3k8SvPJaM83KBIo4EBVuCwPIyhS3JlPhirK8VdirsVYXPqHmS3/MGZpRM/l2K2JZY45WZSIg&#xA;/MIiyRyIXBUcaTc9qGPCrNMCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:AD37C3031D2068118083FCD562228612</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:AD37C3031D2068118083FCD562228612</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AD37C3031D2068118083FCD562228612</stEvt:instanceID>
                  <stEvt:when>2015-05-27T12:37:35+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -113.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 113.28 li
249.315 113.28 li
249.315 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 113.28 mo
249.315 113.28 li
249.315 0 li
0 0 li
0 113.28 li
cp
clp
16.3564 63.9521 mo
16.3564 63.8335 16.2373 63.8335 16.2017 63.8335 cv
16.0947 63.8335 16.0708 63.8809 16.0469 63.9521 cv
15.7017 65.0591 14.9282 65.2017 14.4883 65.2017 cv
13.8574 65.2017 12.8101 64.6904 12.8101 62.7744 cv
12.8101 60.8345 13.7861 60.335 14.4165 60.335 cv
14.5239 60.335 15.2734 60.3467 15.6899 60.7749 cv
15.2021 60.8105 15.1309 61.168 15.1309 61.3223 cv
15.1309 61.6318 15.3447 61.8701 15.6782 61.8701 cv
15.9873 61.8701 16.2256 61.6675 16.2256 61.3105 cv
16.2256 60.5015 15.3208 60.0371 14.4048 60.0371 cv
12.9175 60.0371 11.8223 61.3223 11.8223 62.7979 cv
11.8223 64.3213 13.0005 65.4995 14.3809 65.4995 cv
15.9756 65.4995 16.3564 64.0713 16.3564 63.9521 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .938 1 0 cmyk
f
.85 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
6.45654 54.6157 mo
21.7568 54.6157 li
21.7568 69.9155 li
6.45654 69.9155 li
6.45654 54.6157 li
cp
.746 .676 .668 .898 cmyk
@
46.9565 64.1011 mo
46.9565 63.9819 46.8374 63.9819 46.8018 63.9819 cv
46.6943 63.9819 46.6709 64.0293 46.647 64.1011 cv
46.3018 65.2075 45.5283 65.3506 45.0879 65.3506 cv
44.4575 65.3506 43.4102 64.8389 43.4102 62.9229 cv
43.4102 60.9834 44.3857 60.4834 45.0166 60.4834 cv
45.1235 60.4834 45.8735 60.4951 46.29 60.9238 cv
45.8022 60.9595 45.7305 61.3164 45.7305 61.4712 cv
45.7305 61.7803 45.9448 62.0186 46.2778 62.0186 cv
46.5874 62.0186 46.8257 61.8164 46.8257 61.459 cv
46.8257 60.6499 45.9209 60.186 45.0049 60.186 cv
43.5171 60.186 42.4224 61.4712 42.4224 62.9468 cv
42.4224 64.4697 43.6006 65.6479 44.981 65.6479 cv
46.5757 65.6479 46.9565 64.2197 46.9565 64.1011 cv
cp
0 0 0 1 cmyk
f
37.0566 54.7646 mo
52.3569 54.7646 li
52.3569 70.0645 li
37.0566 70.0645 li
37.0566 54.7646 li
cp
.746 .676 .668 .898 cmyk
@
47.6226 47.9678 mo
47.6226 46.4448 46.4326 45.1836 44.9927 45.1836 cv
43.5054 45.1836 42.3511 46.4805 42.3511 47.9678 cv
42.3511 49.5029 43.5889 50.6455 44.981 50.6455 cv
46.4209 50.6455 47.6226 49.4795 47.6226 47.9678 cv
cp
46.6353 47.873 mo
46.6353 48.3013 46.6353 48.9438 46.373 49.4673 cv
46.1113 50.0029 45.5879 50.3481 44.9927 50.3481 cv
44.481 50.3481 43.9575 50.0981 43.6362 49.5508 cv
43.3389 49.0273 43.3389 48.3013 43.3389 47.873 cv
43.3389 47.4087 43.3389 46.7661 43.6245 46.2427 cv
43.9458 45.6953 44.5049 45.4453 44.981 45.4453 cv
45.5044 45.4453 46.0161 45.707 46.3257 46.2188 cv
46.6353 46.7305 46.6353 47.4209 46.6353 47.873 cv
cp
0 .938 1 0 cmyk
f
37.0566 39.7617 mo
52.3569 39.7617 li
52.3569 55.062 li
37.0566 55.062 li
37.0566 39.7617 li
cp
.746 .676 .668 .898 cmyk
@
77.5562 64.2495 mo
77.5562 64.1304 77.4375 64.1304 77.4019 64.1304 cv
77.2944 64.1304 77.271 64.1782 77.2471 64.2495 cv
76.9019 65.3564 76.1284 65.499 75.688 65.499 cv
75.0571 65.499 74.0103 64.9873 74.0103 63.0713 cv
74.0103 61.1318 74.9858 60.6318 75.6167 60.6318 cv
75.7236 60.6318 76.4736 60.6436 76.8901 61.0723 cv
76.4019 61.1079 76.3306 61.4648 76.3306 61.6196 cv
76.3306 61.9292 76.5449 62.167 76.8779 62.167 cv
77.1875 62.167 77.4253 61.9648 77.4253 61.6079 cv
77.4253 60.7983 76.521 60.3345 75.605 60.3345 cv
74.1172 60.3345 73.0225 61.6196 73.0225 63.0952 cv
73.0225 64.6182 74.2007 65.7964 75.5811 65.7964 cv
77.1758 65.7964 77.5562 64.3687 77.5562 64.2495 cv
cp
0 0 0 1 cmyk
f
67.6567 54.9131 mo
82.9565 54.9131 li
82.9565 70.2134 li
67.6567 70.2134 li
67.6567 54.9131 li
cp
.746 .676 .668 .898 cmyk
@
78.2227 48.1167 mo
78.2227 46.5933 77.0327 45.332 75.5928 45.332 cv
74.1055 45.332 72.9512 46.6289 72.9512 48.1167 cv
72.9512 49.6519 74.1885 50.7939 75.5811 50.7939 cv
77.021 50.7939 78.2227 49.6279 78.2227 48.1167 cv
cp
77.2349 48.0215 mo
77.2349 48.4497 77.2349 49.0923 76.9731 49.6162 cv
76.7114 50.1514 76.188 50.4966 75.5928 50.4966 cv
75.0811 50.4966 74.5576 50.2466 74.2363 49.6992 cv
73.939 49.1758 73.939 48.4497 73.939 48.0215 cv
73.939 47.5571 73.939 46.9146 74.2241 46.3911 cv
74.5454 45.8438 75.105 45.5938 75.5811 45.5938 cv
76.1045 45.5938 76.6162 45.8555 76.9258 46.3672 cv
77.2349 46.8789 77.2349 47.5693 77.2349 48.0215 cv
cp
0 0 0 1 cmyk
f
67.6567 39.9106 mo
82.9565 39.9106 li
82.9565 55.2109 li
67.6567 55.2109 li
67.6567 39.9106 li
cp
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
78.8892 35.9316 mo
78.8892 35.5625 li
78.0562 35.5625 77.9609 35.4795 77.9609 34.896 cv
77.9609 27.6729 li
76.2476 27.8037 li
76.2476 28.1729 li
77.0806 28.1729 77.1758 28.2559 77.1758 28.8389 cv
77.1758 31.4092 li
76.8306 30.981 76.3188 30.6719 75.6763 30.6719 cv
74.272 30.6719 73.0225 31.8379 73.0225 33.373 cv
73.0225 34.8843 74.1885 36.0625 75.5454 36.0625 cv
76.3066 36.0625 76.8423 35.6577 77.1396 35.2769 cv
77.1396 36.0625 li
78.8892 35.9316 li
cp
77.1396 34.5273 mo
77.1396 34.7412 77.1396 34.7651 77.0088 34.9678 cv
76.6519 35.5386 76.1167 35.8008 75.605 35.8008 cv
75.0693 35.8008 74.6406 35.4912 74.3555 35.0391 cv
74.0459 34.5508 74.0103 33.8726 74.0103 33.3848 cv
74.0103 32.9443 74.0342 32.2305 74.3789 31.6948 cv
74.6289 31.3262 75.0811 30.9336 75.7236 30.9336 cv
76.1401 30.9336 76.6401 31.1118 77.0088 31.6475 cv
77.1396 31.8496 77.1396 31.8735 77.1396 32.0879 cv
77.1396 34.5273 li
cp
0 .938 1 0 cmyk
f
grestore
67.6567 24.4619 mo
82.9565 24.4619 li
82.9565 39.7617 li
67.6567 39.7617 li
67.6567 24.4619 li
cp
@
108.156 64.1011 mo
108.156 63.9819 108.038 63.9819 108.001 63.9819 cv
107.895 63.9819 107.871 64.0293 107.847 64.1011 cv
107.502 65.2075 106.729 65.3506 106.288 65.3506 cv
105.657 65.3506 104.61 64.8389 104.61 62.9229 cv
104.61 60.9834 105.586 60.4834 106.217 60.4834 cv
106.324 60.4834 107.073 60.4951 107.49 60.9238 cv
107.002 60.9595 106.931 61.3164 106.931 61.4712 cv
106.931 61.7803 107.145 62.0186 107.478 62.0186 cv
107.788 62.0186 108.025 61.8164 108.025 61.459 cv
108.025 60.6499 107.121 60.186 106.205 60.186 cv
104.717 60.186 103.623 61.4712 103.623 62.9468 cv
103.623 64.4697 104.8 65.6479 106.181 65.6479 cv
107.775 65.6479 108.156 64.2197 108.156 64.1011 cv
cp
0 0 0 1 cmyk
f
98.2568 54.7646 mo
113.557 54.7646 li
113.557 70.0645 li
98.2568 70.0645 li
98.2568 54.7646 li
cp
.746 .676 .668 .898 cmyk
@
108.823 47.9678 mo
108.823 46.4448 107.633 45.1836 106.193 45.1836 cv
104.706 45.1836 103.551 46.4805 103.551 47.9678 cv
103.551 49.5029 104.789 50.6455 106.181 50.6455 cv
107.621 50.6455 108.823 49.4795 108.823 47.9678 cv
cp
107.835 47.873 mo
107.835 48.3013 107.835 48.9438 107.573 49.4673 cv
107.312 50.0029 106.788 50.3481 106.193 50.3481 cv
105.681 50.3481 105.158 50.0981 104.836 49.5508 cv
104.539 49.0273 104.539 48.3013 104.539 47.873 cv
104.539 47.4087 104.539 46.7661 104.824 46.2427 cv
105.146 45.6953 105.705 45.4453 106.181 45.4453 cv
106.705 45.4453 107.216 45.707 107.526 46.2188 cv
107.835 46.7305 107.835 47.4209 107.835 47.873 cv
cp
0 0 0 1 cmyk
f
98.2568 39.7617 mo
113.557 39.7617 li
113.557 55.062 li
98.2568 55.062 li
98.2568 39.7617 li
cp
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
109.489 35.9263 mo
109.489 35.5576 li
108.656 35.5576 108.561 35.4741 108.561 34.8911 cv
108.561 27.668 li
106.847 27.7988 li
106.847 28.1675 li
107.68 28.1675 107.775 28.251 107.775 28.834 cv
107.775 31.4043 li
107.431 30.9761 106.919 30.6665 106.276 30.6665 cv
104.872 30.6665 103.623 31.833 103.623 33.3682 cv
103.623 34.8794 104.789 36.0571 106.145 36.0571 cv
106.907 36.0571 107.442 35.6528 107.74 35.272 cv
107.74 36.0571 li
109.489 35.9263 li
cp
107.74 34.5225 mo
107.74 34.7363 107.74 34.7603 107.609 34.9624 cv
107.252 35.5337 106.716 35.7954 106.205 35.7954 cv
105.669 35.7954 105.241 35.4863 104.955 35.0342 cv
104.646 34.5459 104.61 33.8677 104.61 33.3799 cv
104.61 32.9395 104.634 32.2256 104.979 31.6899 cv
105.229 31.3213 105.681 30.9282 106.324 30.9282 cv
106.74 30.9282 107.24 31.1069 107.609 31.6426 cv
107.74 31.8447 107.74 31.8687 107.74 32.0825 cv
107.74 34.5225 li
cp
0 0 0 1 cmyk
f
grestore
98.2568 24.3135 mo
113.557 24.3135 li
113.557 39.6133 li
98.2568 39.6133 li
98.2568 24.3135 li
cp
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
108.443 18.3496 mo
108.443 18.2305 108.348 18.2065 108.289 18.2065 cv
108.182 18.2065 108.158 18.2783 108.134 18.373 cv
107.718 19.5991 106.646 19.5991 106.528 19.5991 cv
105.933 19.5991 105.457 19.2422 105.183 18.8018 cv
104.826 18.2305 104.826 17.4453 104.826 17.0166 cv
108.146 17.0166 li
108.408 17.0166 108.443 17.0166 108.443 16.7666 cv
108.443 15.5889 107.801 14.4346 106.313 14.4346 cv
104.933 14.4346 103.838 15.6602 103.838 17.1475 cv
103.838 18.7422 105.088 19.8965 106.456 19.8965 cv
107.908 19.8965 108.443 18.5757 108.443 18.3496 cv
cp
107.658 16.7666 mo
104.838 16.7666 li
104.909 14.9937 105.909 14.6963 106.313 14.6963 cv
107.539 14.6963 107.658 16.3027 107.658 16.7666 cv
cp
0 .938 1 0 cmyk
f
grestore
98.2568 9.01318 mo
113.557 9.01318 li
113.557 24.3135 li
98.2568 24.3135 li
98.2568 9.01318 li
cp
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
6.45703 1.06543 mo
6.45703 54.6157 li
@
21.7568 1.06543 mo
21.7568 54.6157 li
@
37.0571 1.06543 mo
37.0571 39.3154 li
@
52.3569 1.06543 mo
52.3569 39.3154 li
@
67.6567 1.06543 mo
67.6567 24.0156 li
@
82.957 1.06543 mo
82.957 24.0156 li
@
98.2568 1.06543 mo
98.2568 8.71582 li
@
113.557 1.06543 mo
113.557 8.71582 li
@
16.5913 108.18 mo
16.5913 107.917 li
16.3193 107.917 li
15.5542 107.917 15.5288 107.823 15.5288 107.509 cv
15.5288 102.74 li
15.5288 102.536 15.5288 102.519 15.3335 102.519 cv
14.8062 103.063 14.0586 103.063 13.7861 103.063 cv
13.7861 103.327 li
13.9565 103.327 14.458 103.327 14.8999 103.105 cv
14.8999 107.509 li
14.8999 107.814 14.8745 107.917 14.1094 107.917 cv
13.8374 107.917 li
13.8374 108.18 li
14.1348 108.155 14.8745 108.155 15.2144 108.155 cv
15.5542 108.155 16.2939 108.155 16.5913 108.18 cv
cp
0 0 0 1 cmyk
f
18.9116 107.729 mo
18.9116 107.483 18.708 107.279 18.4614 107.279 cv
18.2148 107.279 18.0107 107.483 18.0107 107.729 cv
18.0107 107.976 18.2148 108.18 18.4614 108.18 cv
18.708 108.18 18.9116 107.976 18.9116 107.729 cv
cp
f
47.064 106.701 mo
46.8516 106.701 li
46.8091 106.956 46.7495 107.33 46.6646 107.458 cv
46.605 107.525 46.0439 107.525 45.8569 107.525 cv
44.3267 107.525 li
45.228 106.65 li
46.5537 105.477 47.064 105.018 47.064 104.168 cv
47.064 103.199 46.2988 102.519 45.2617 102.519 cv
44.3013 102.519 43.6724 103.301 43.6724 104.058 cv
43.6724 104.534 44.0972 104.534 44.123 104.534 cv
44.2676 104.534 44.5649 104.432 44.5649 104.083 cv
44.5649 103.862 44.4116 103.641 44.1143 103.641 cv
44.0464 103.641 44.0293 103.641 44.0039 103.649 cv
44.1992 103.097 44.6582 102.783 45.1514 102.783 cv
45.9248 102.783 46.2905 103.471 46.2905 104.168 cv
46.2905 104.848 45.8652 105.52 45.3979 106.047 cv
43.7661 107.866 li
43.6724 107.959 43.6724 107.976 43.6724 108.18 cv
46.8257 108.18 li
47.064 106.701 li
cp
f
49.1294 107.729 mo
49.1294 107.483 48.9253 107.279 48.6787 107.279 cv
48.4321 107.279 48.2285 107.483 48.2285 107.729 cv
48.2285 107.976 48.4321 108.18 48.6787 108.18 cv
48.9253 108.18 49.1294 107.976 49.1294 107.729 cv
cp
f
78.208 106.727 mo
78.208 106.03 77.6724 105.367 76.7886 105.188 cv
77.4854 104.958 77.9785 104.364 77.9785 103.692 cv
77.9785 102.995 77.2305 102.519 76.4146 102.519 cv
75.5557 102.519 74.9097 103.029 74.9097 103.675 cv
74.9097 103.956 75.0967 104.117 75.3433 104.117 cv
75.6069 104.117 75.7769 103.93 75.7769 103.684 cv
75.7769 103.259 75.3774 103.259 75.25 103.259 cv
75.5132 102.842 76.0742 102.731 76.3804 102.731 cv
76.729 102.731 77.1963 102.918 77.1963 103.684 cv
77.1963 103.786 77.1792 104.279 76.9585 104.653 cv
76.7036 105.061 76.4146 105.086 76.2017 105.095 cv
76.1338 105.103 75.9297 105.12 75.8706 105.12 cv
75.8022 105.129 75.7427 105.137 75.7427 105.222 cv
75.7427 105.315 75.8022 105.315 75.9468 105.315 cv
76.3208 105.315 li
77.0181 105.315 77.3325 105.894 77.3325 106.727 cv
77.3325 107.883 76.7461 108.129 76.3721 108.129 cv
76.0063 108.129 75.3687 107.985 75.0713 107.483 cv
75.3687 107.525 75.6323 107.339 75.6323 107.016 cv
75.6323 106.709 75.4028 106.54 75.1563 106.54 cv
74.9521 106.54 74.6802 106.659 74.6802 107.033 cv
74.6802 107.806 75.4707 108.367 76.3975 108.367 cv
77.4346 108.367 78.208 107.594 78.208 106.727 cv
cp
f
80.2056 107.729 mo
80.2056 107.483 80.0015 107.279 79.7549 107.279 cv
79.5083 107.279 79.3042 107.483 79.3042 107.729 cv
79.3042 107.976 79.5083 108.18 79.7549 108.18 cv
80.0015 108.18 80.2056 107.976 80.2056 107.729 cv
cp
f
108.893 106.778 mo
108.893 106.514 li
108.043 106.514 li
108.043 102.646 li
108.043 102.477 108.043 102.426 107.907 102.426 cv
107.831 102.426 107.805 102.426 107.737 102.528 cv
105.127 106.514 li
105.127 106.778 li
107.388 106.778 li
107.388 107.517 li
107.388 107.823 107.372 107.917 106.742 107.917 cv
106.564 107.917 li
106.564 108.18 li
106.913 108.155 107.354 108.155 107.711 108.155 cv
108.068 108.155 108.519 108.155 108.867 108.18 cv
108.867 107.917 li
108.689 107.917 li
108.06 107.917 108.043 107.823 108.043 107.517 cv
108.043 106.778 li
108.893 106.778 li
cp
107.439 106.514 mo
105.365 106.514 li
107.439 103.344 li
107.439 106.514 li
cp
f
110.771 107.729 mo
110.771 107.483 110.567 107.279 110.321 107.279 cv
110.074 107.279 109.871 107.483 109.871 107.729 cv
109.871 107.976 110.074 108.18 110.321 108.18 cv
110.567 108.18 110.771 107.976 110.771 107.729 cv
cp
f
139.272 106.472 mo
139.272 105.46 138.575 104.61 137.657 104.61 cv
137.249 104.61 136.883 104.746 136.578 105.043 cv
136.578 103.386 li
136.748 103.437 137.028 103.497 137.3 103.497 cv
138.345 103.497 138.94 102.723 138.94 102.613 cv
138.94 102.562 138.915 102.519 138.855 102.519 cv
138.855 102.519 138.83 102.519 138.788 102.545 cv
138.618 102.621 138.201 102.791 137.631 102.791 cv
137.292 102.791 136.9 102.731 136.5 102.553 cv
136.433 102.528 136.399 102.528 136.399 102.528 cv
136.314 102.528 136.314 102.596 136.314 102.731 cv
136.314 105.248 li
136.314 105.4 136.314 105.469 136.433 105.469 cv
136.493 105.469 136.509 105.443 136.543 105.392 cv
136.637 105.256 136.952 104.797 137.64 104.797 cv
138.082 104.797 138.294 105.188 138.363 105.341 cv
138.499 105.656 138.515 105.987 138.515 106.412 cv
138.515 106.709 138.515 107.22 138.311 107.577 cv
138.107 107.908 137.792 108.129 137.402 108.129 cv
136.782 108.129 136.297 107.679 136.153 107.177 cv
136.178 107.186 136.204 107.194 136.297 107.194 cv
136.578 107.194 136.722 106.981 136.722 106.778 cv
136.722 106.574 136.578 106.361 136.297 106.361 cv
136.178 106.361 135.88 106.421 135.88 106.812 cv
135.88 107.542 136.467 108.367 137.418 108.367 cv
138.405 108.367 139.272 107.551 139.272 106.472 cv
cp
f
141.337 107.729 mo
141.337 107.483 141.133 107.279 140.887 107.279 cv
140.64 107.279 140.436 107.483 140.436 107.729 cv
140.436 107.976 140.64 108.18 140.887 108.18 cv
141.133 108.18 141.337 107.976 141.337 107.729 cv
cp
f
170.059 106.446 mo
170.059 105.367 169.302 104.551 168.359 104.551 cv
167.781 104.551 167.466 104.984 167.296 105.392 cv
167.296 105.188 li
167.296 103.038 168.35 102.731 168.784 102.731 cv
168.988 102.731 169.345 102.783 169.532 103.072 cv
169.405 103.072 169.064 103.072 169.064 103.454 cv
169.064 103.718 169.268 103.845 169.456 103.845 cv
169.591 103.845 169.846 103.769 169.846 103.437 cv
169.846 102.927 169.472 102.519 168.767 102.519 cv
167.679 102.519 166.532 103.616 166.532 105.494 cv
166.532 107.764 167.517 108.367 168.308 108.367 cv
169.251 108.367 170.059 107.568 170.059 106.446 cv
cp
169.293 106.438 mo
169.293 106.846 169.293 107.271 169.149 107.577 cv
168.894 108.087 168.503 108.129 168.308 108.129 cv
167.772 108.129 167.517 107.619 167.466 107.492 cv
167.313 107.092 167.313 106.412 167.313 106.259 cv
167.313 105.596 167.585 104.746 168.35 104.746 cv
168.487 104.746 168.877 104.746 169.141 105.273 cv
169.293 105.588 169.293 106.021 169.293 106.438 cv
cp
f
172.056 107.729 mo
172.056 107.483 171.852 107.279 171.606 107.279 cv
171.36 107.279 171.156 107.483 171.156 107.729 cv
171.156 107.976 171.36 108.18 171.606 108.18 cv
171.852 108.18 172.056 107.976 172.056 107.729 cv
cp
f
grestore
138.906 63.6519 mo
138.906 63.5327 138.787 63.5327 138.751 63.5327 cv
138.644 63.5327 138.621 63.5806 138.596 63.6519 cv
138.251 64.7588 137.478 64.9014 137.038 64.9014 cv
136.407 64.9014 135.36 64.3896 135.36 62.4736 cv
135.36 60.5342 136.335 60.0342 136.966 60.0342 cv
137.073 60.0342 137.823 60.0464 138.24 60.4746 cv
137.751 60.5103 137.68 60.8672 137.68 61.022 cv
137.68 61.3315 137.894 61.5693 138.227 61.5693 cv
138.537 61.5693 138.775 61.3672 138.775 61.0103 cv
138.775 60.2007 137.871 59.7368 136.955 59.7368 cv
135.466 59.7368 134.372 61.022 134.372 62.4976 cv
134.372 64.0205 135.55 65.1987 136.93 65.1987 cv
138.525 65.1987 138.906 63.771 138.906 63.6519 cv
cp
0 0 0 1 cmyk
f
129.005 54.3149 mo
144.305 54.3149 li
144.305 69.6147 li
129.005 69.6147 li
129.005 54.3149 li
cp
.746 .676 .668 .898 cmyk
@
139.572 47.5186 mo
139.572 45.9951 138.382 44.7339 136.942 44.7339 cv
135.455 44.7339 134.3 46.0313 134.3 47.5186 cv
134.3 49.0537 135.538 50.1963 136.93 50.1963 cv
138.371 50.1963 139.572 49.0298 139.572 47.5186 cv
cp
138.584 47.4233 mo
138.584 47.8516 138.584 48.4941 138.323 49.0181 cv
138.061 49.5537 137.538 49.8984 136.942 49.8984 cv
136.43 49.8984 135.907 49.6484 135.585 49.1011 cv
135.289 48.5776 135.289 47.8516 135.289 47.4233 cv
135.289 46.959 135.289 46.3164 135.574 45.793 cv
135.895 45.2456 136.455 44.9956 136.93 44.9956 cv
137.454 44.9956 137.965 45.2578 138.275 45.769 cv
138.584 46.2808 138.584 46.9712 138.584 47.4233 cv
cp
0 0 0 1 cmyk
f
129.005 39.3125 mo
144.305 39.3125 li
144.305 54.6123 li
129.005 54.6123 li
129.005 39.3125 li
cp
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
140.239 35.3335 mo
140.239 34.9648 li
139.406 34.9648 139.31 34.8813 139.31 34.2983 cv
139.31 27.0752 li
137.597 27.2061 li
137.597 27.5747 li
138.43 27.5747 138.525 27.6582 138.525 28.2412 cv
138.525 30.8115 li
138.18 30.3833 137.668 30.0737 137.026 30.0737 cv
135.622 30.0737 134.372 31.2402 134.372 32.7754 cv
134.372 34.2866 135.538 35.4648 136.895 35.4648 cv
137.657 35.4648 138.192 35.0601 138.49 34.6792 cv
138.49 35.4648 li
140.239 35.3335 li
cp
138.49 33.9297 mo
138.49 34.1436 138.49 34.1675 138.358 34.3696 cv
138.001 34.9409 137.466 35.2026 136.955 35.2026 cv
136.418 35.2026 135.991 34.8936 135.705 34.4414 cv
135.395 33.9531 135.36 33.2749 135.36 32.7871 cv
135.36 32.3467 135.383 31.6328 135.728 31.0972 cv
135.978 30.7285 136.43 30.3359 137.073 30.3359 cv
137.49 30.3359 137.99 30.5142 138.358 31.0498 cv
138.49 31.252 138.49 31.2759 138.49 31.4902 cv
138.49 33.9297 li
cp
0 .938 1 0 cmyk
f
grestore
129.005 23.8633 mo
144.305 23.8633 li
144.305 39.1636 li
129.005 39.1636 li
129.005 23.8633 li
cp
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
129.006 .467773 mo
129.006 23.418 li
@
144.306 .467773 mo
144.306 23.418 li
@
grestore
169.781 64.3262 mo
169.781 64.207 169.662 64.207 169.625 64.207 cv
169.519 64.207 169.495 64.2544 169.471 64.3262 cv
169.126 65.4326 168.352 65.5752 167.913 65.5752 cv
167.282 65.5752 166.234 65.0635 166.234 63.1479 cv
166.234 61.208 167.21 60.7085 167.84 60.7085 cv
167.948 60.7085 168.698 60.7202 169.114 61.1484 cv
168.626 61.1846 168.555 61.5415 168.555 61.6963 cv
168.555 62.0054 168.769 62.2432 169.102 62.2432 cv
169.412 62.2432 169.65 62.041 169.65 61.6841 cv
169.65 60.875 168.746 60.4106 167.829 60.4106 cv
166.341 60.4106 165.247 61.6963 165.247 63.1719 cv
165.247 64.6948 166.424 65.873 167.805 65.873 cv
169.4 65.873 169.781 64.4448 169.781 64.3262 cv
cp
0 0 0 1 cmyk
f
159.881 54.9897 mo
175.182 54.9897 li
175.182 70.2896 li
159.881 70.2896 li
159.881 54.9897 li
cp
.746 .676 .668 .898 cmyk
@
170.447 48.1929 mo
170.447 46.6699 169.257 45.4082 167.817 45.4082 cv
166.33 45.4082 165.175 46.7056 165.175 48.1929 cv
165.175 49.728 166.413 50.8706 167.805 50.8706 cv
169.245 50.8706 170.447 49.7041 170.447 48.1929 cv
cp
169.459 48.0977 mo
169.459 48.5264 169.459 49.1689 169.198 49.6924 cv
168.936 50.228 168.412 50.5732 167.817 50.5732 cv
167.305 50.5732 166.782 50.3232 166.46 49.7759 cv
166.163 49.252 166.163 48.5264 166.163 48.0977 cv
166.163 47.6338 166.163 46.9912 166.449 46.4678 cv
166.77 45.9199 167.329 45.6704 167.805 45.6704 cv
168.329 45.6704 168.84 45.9321 169.15 46.4438 cv
169.459 46.9556 169.459 47.6455 169.459 48.0977 cv
cp
0 .938 1 0 cmyk
f
159.881 39.9863 mo
175.182 39.9863 li
175.182 55.2861 li
159.881 55.2861 li
159.881 39.9863 li
cp
.746 .676 .668 .898 cmyk
@
159.881 1.29102 mo
159.881 39.541 li
@
175.181 1.29102 mo
175.181 39.541 li
@
199.834 63.9023 mo
199.834 63.7832 199.715 63.7832 199.68 63.7832 cv
199.573 63.7832 199.548 63.8306 199.525 63.9023 cv
199.18 65.0088 198.407 65.1514 197.966 65.1514 cv
197.335 65.1514 196.289 64.6396 196.289 62.7241 cv
196.289 60.7842 197.264 60.2847 197.895 60.2847 cv
198.001 60.2847 198.751 60.2964 199.168 60.7246 cv
198.68 60.7607 198.609 61.1177 198.609 61.2725 cv
198.609 61.5815 198.823 61.8198 199.156 61.8198 cv
199.465 61.8198 199.704 61.6172 199.704 61.2603 cv
199.704 60.4512 198.799 59.9868 197.882 59.9868 cv
196.395 59.9868 195.3 61.2725 195.3 62.748 cv
195.3 64.271 196.479 65.4492 197.859 65.4492 cv
199.454 65.4492 199.834 64.021 199.834 63.9023 cv
cp
0 .938 1 0 cmyk
f
189.935 54.5654 mo
205.235 54.5654 li
205.235 69.8657 li
189.935 69.8657 li
189.935 54.5654 li
cp
.746 .676 .668 .898 cmyk
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
189.935 1.01563 mo
189.935 54.5654 li
@
205.235 1.01563 mo
205.235 54.5654 li
@
200.5 102.706 mo
198.434 102.706 li
197.398 102.706 197.38 102.596 197.346 102.434 cv
197.134 102.434 li
196.854 104.185 li
197.066 104.185 li
197.091 104.049 197.168 103.514 197.279 103.412 cv
197.338 103.361 198.001 103.361 198.112 103.361 cv
199.871 103.361 li
198.919 104.704 li
198.154 105.851 197.874 107.033 197.874 107.899 cv
197.874 107.985 197.874 108.367 198.264 108.367 cv
198.656 108.367 198.656 107.985 198.656 107.899 cv
198.656 107.466 li
198.656 106.999 198.681 106.531 198.749 106.072 cv
198.783 105.876 198.902 105.146 199.276 104.619 cv
200.423 103.004 li
200.5 102.902 200.5 102.885 200.5 102.706 cv
cp
0 0 0 1 cmyk
f
202.259 107.729 mo
202.259 107.483 202.055 107.279 201.809 107.279 cv
201.563 107.279 201.359 107.483 201.359 107.729 cv
201.359 107.976 201.563 108.18 201.809 108.18 cv
202.055 108.18 202.259 107.976 202.259 107.729 cv
cp
f
220.658 1.06543 mo
220.658 69.9155 li
235.958 69.9155 li
235.958 1.06543 li
.746 .676 .668 .898 cmyk
@
231.536 106.752 mo
231.536 106.446 231.443 106.063 231.12 105.707 cv
230.958 105.528 230.822 105.443 230.278 105.103 cv
230.89 104.789 231.306 104.347 231.306 103.786 cv
231.306 103.004 230.55 102.519 229.777 102.519 cv
228.926 102.519 228.238 103.148 228.238 103.938 cv
228.238 104.092 228.255 104.474 228.612 104.874 cv
228.706 104.976 229.02 105.188 229.233 105.333 cv
228.74 105.579 228.008 106.055 228.008 106.896 cv
228.008 107.798 228.875 108.367 229.768 108.367 cv
230.729 108.367 231.536 107.662 231.536 106.752 cv
cp
230.932 103.786 mo
230.932 104.27 230.601 104.678 230.091 104.976 cv
229.037 104.296 li
228.646 104.041 228.612 103.751 228.612 103.607 cv
228.612 103.089 229.165 102.731 229.768 102.731 cv
230.388 102.731 230.932 103.174 230.932 103.786 cv
cp
231.111 107.058 mo
231.111 107.687 230.473 108.129 229.777 108.129 cv
229.045 108.129 228.434 107.602 228.434 106.896 cv
228.434 106.404 228.706 105.86 229.428 105.46 cv
230.473 106.123 li
230.711 106.285 231.111 106.54 231.111 107.058 cv
cp
0 0 0 1 cmyk
f
233.534 107.729 mo
233.534 107.483 233.33 107.279 233.083 107.279 cv
232.836 107.279 232.632 107.483 232.632 107.729 cv
232.632 107.976 232.836 108.18 233.083 108.18 cv
233.33 108.18 233.534 107.976 233.534 107.729 cv
cp
f
9.56445 82.2617 mo
9.56445 80.9663 8.57471 79.9565 7.43262 79.9565 cv
6.63672 79.9565 6.2085 80.4053 6.00439 80.6299 cv
6.00439 79.9565 li
4.53564 80.0684 li
4.53564 80.3848 li
5.25977 80.3848 5.33154 80.4458 5.33154 80.895 cv
5.33154 85.6685 li
5.33154 86.1274 5.21924 86.1274 4.53564 86.1274 cv
4.53564 86.4434 li
5.67822 86.4131 li
6.83057 86.4434 li
6.83057 86.1274 li
6.14746 86.1274 6.03516 86.1274 6.03516 85.6685 cv
6.03516 83.9551 li
6.03516 83.8633 li
6.08594 84.0264 6.51465 84.5771 7.28955 84.5771 cv
8.50342 84.5771 9.56445 83.5771 9.56445 82.2617 cv
cp
8.71777 82.2617 mo
8.71777 83.4956 8.00391 84.3525 7.24902 84.3525 cv
6.84082 84.3525 6.45313 84.1484 6.17773 83.7305 cv
6.03516 83.5161 6.03516 83.5059 6.03516 83.3018 cv
6.03516 81.0273 li
6.33105 80.5073 6.83057 80.2114 7.35107 80.2114 cv
8.0957 80.2114 8.71777 81.1089 8.71777 82.2617 cv
cp
.746 .676 .668 .898 cmyk
f
15.3784 84.4648 mo
15.3784 84.1484 li
14.6646 84.1484 14.5825 84.0771 14.5825 83.5771 cv
14.5825 79.9565 li
13.0835 80.0684 li
13.0835 80.3848 li
13.7974 80.3848 13.8789 80.4561 13.8789 80.9561 cv
13.8789 82.7715 li
13.8789 83.6592 13.3892 84.3525 12.6445 84.3525 cv
11.7881 84.3525 11.7471 83.873 11.7471 83.3428 cv
11.7471 79.9565 li
10.2476 80.0684 li
10.2476 80.3848 li
11.0435 80.3848 11.0435 80.4155 11.0435 81.3232 cv
11.0435 82.853 li
11.0435 83.6489 11.0435 84.5771 12.5938 84.5771 cv
13.165 84.5771 13.6138 84.2915 13.9097 83.6592 cv
13.9097 84.5771 li
15.3784 84.4648 li
cp
f
19.2646 83.1592 mo
19.2646 82.6187 18.9585 82.3125 18.8359 82.1904 cv
18.4995 81.8638 18.1016 81.7822 17.6733 81.7007 cv
17.1021 81.5884 16.4189 81.4561 16.4189 80.8643 cv
16.4189 80.5073 16.6841 80.0889 17.561 80.0889 cv
18.6831 80.0889 18.7339 81.0068 18.7544 81.3232 cv
18.7646 81.415 18.877 81.415 18.877 81.415 cv
19.0098 81.415 19.0098 81.3643 19.0098 81.1704 cv
19.0098 80.1401 li
19.0098 79.9668 19.0098 79.895 18.8975 79.895 cv
18.8462 79.895 18.8262 79.895 18.6934 80.0176 cv
18.6626 80.0586 18.5605 80.1504 18.52 80.1807 cv
18.1323 79.895 17.7144 79.895 17.561 79.895 cv
16.3169 79.895 15.9292 80.5786 15.9292 81.1499 cv
15.9292 81.5068 16.0923 81.7925 16.3677 82.0166 cv
16.6943 82.2822 16.98 82.3433 17.7144 82.4858 cv
17.9385 82.5269 18.7749 82.6899 18.7749 83.4243 cv
18.7749 83.9443 18.418 84.3525 17.6226 84.3525 cv
16.7656 84.3525 16.3984 83.7715 16.2046 82.9043 cv
16.1738 82.7715 16.1636 82.731 16.0615 82.731 cv
15.9292 82.731 15.9292 82.8022 15.9292 82.9858 cv
15.9292 84.332 li
15.9292 84.5059 15.9292 84.5771 16.0415 84.5771 cv
16.0923 84.5771 16.1025 84.5669 16.2964 84.373 cv
16.3169 84.3525 16.3169 84.332 16.5005 84.1387 cv
16.9492 84.5669 17.4082 84.5771 17.6226 84.5771 cv
18.7954 84.5771 19.2646 83.8936 19.2646 83.1592 cv
cp
f
25.0684 84.4648 mo
25.0684 84.1484 li
24.5381 84.1484 24.2827 84.1484 24.2729 83.8428 cv
24.2729 81.8945 li
24.2729 81.0171 24.2729 80.7012 23.9565 80.334 cv
23.814 80.1602 23.4771 79.9565 22.8857 79.9565 cv
22.0288 79.9565 21.5801 80.5684 21.4165 80.9355 cv
21.4067 80.9355 li
21.4067 77.3857 li
19.938 77.498 li
19.938 77.8145 li
20.6519 77.8145 20.7334 77.8857 20.7334 78.3857 cv
20.7334 83.6895 li
20.7334 84.1484 20.6211 84.1484 19.938 84.1484 cv
19.938 84.4648 li
21.0903 84.4341 li
22.2329 84.4648 li
22.2329 84.1484 li
21.5493 84.1484 21.437 84.1484 21.437 83.6895 cv
21.437 81.813 li
21.437 80.752 22.1611 80.1807 22.814 80.1807 cv
23.4565 80.1807 23.5688 80.7314 23.5688 81.313 cv
23.5688 83.6895 li
23.5688 84.1484 23.4565 84.1484 22.7734 84.1484 cv
22.7734 84.4648 li
23.9258 84.4341 li
25.0684 84.4648 li
cp
f
grestore
.3162 lw
0 lc
4.25 95.6792 mo
7.92871 95.6792 li
0 .938 1 0 cmyk
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
8.48291 93.6152 mo
8.48291 93.5137 8.38135 93.5137 8.35059 93.5137 cv
8.25879 93.5137 8.23828 93.5542 8.21777 93.6152 cv
7.92236 94.564 7.25928 94.6865 6.88184 94.6865 cv
6.34131 94.6865 5.44336 94.248 5.44336 92.6055 cv
5.44336 90.9429 6.27979 90.5146 6.82031 90.5146 cv
6.91211 90.5146 7.55518 90.5249 7.91211 90.8921 cv
7.49365 90.9229 7.43262 91.2285 7.43262 91.3613 cv
7.43262 91.6265 7.61621 91.8306 7.90186 91.8306 cv
8.16699 91.8306 8.37109 91.6572 8.37109 91.3511 cv
8.37109 90.6572 7.5957 90.2598 6.81055 90.2598 cv
5.53516 90.2598 4.59717 91.3613 4.59717 92.626 cv
4.59717 93.9316 5.60693 94.9414 6.79004 94.9414 cv
8.15674 94.9414 8.48291 93.7173 8.48291 93.6152 cv
cp
f
13.583 92.6465 mo
13.583 91.3408 12.563 90.2598 11.3291 90.2598 cv
10.0537 90.2598 9.06445 91.3716 9.06445 92.6465 cv
9.06445 93.9624 10.1255 94.9414 11.3188 94.9414 cv
12.5527 94.9414 13.583 93.9419 13.583 92.6465 cv
cp
12.7363 92.5649 mo
12.7363 92.9321 12.7363 93.4829 12.5122 93.9316 cv
12.2876 94.3906 11.8389 94.6865 11.3291 94.6865 cv
10.8901 94.6865 10.4414 94.4722 10.166 94.0029 cv
9.91113 93.5542 9.91113 92.9321 9.91113 92.5649 cv
9.91113 92.167 9.91113 91.6162 10.1558 91.1675 cv
10.4312 90.6982 10.9106 90.4839 11.3188 90.4839 cv
11.7676 90.4839 12.2061 90.7085 12.4712 91.147 cv
12.7363 91.5854 12.7363 92.1772 12.7363 92.5649 cv
cp
0 0 0 .34 cmyk
f
19.5298 94.8291 mo
19.5298 94.5132 li
18.8159 94.5132 18.7339 94.4414 18.7339 93.9419 cv
18.7339 87.7505 li
17.2651 87.8628 li
17.2651 88.1787 li
17.9795 88.1787 18.061 88.25 18.061 88.75 cv
18.061 90.9531 li
17.7651 90.5859 17.3267 90.3208 16.7759 90.3208 cv
15.5723 90.3208 14.501 91.3203 14.501 92.6362 cv
14.501 93.9316 15.5005 94.9414 16.6636 94.9414 cv
17.3164 94.9414 17.7754 94.5947 18.0303 94.2681 cv
18.0303 94.9414 li
19.5298 94.8291 li
cp
18.0303 93.6255 mo
18.0303 93.8091 18.0303 93.8296 17.918 94.0029 cv
17.6123 94.4927 17.1533 94.7168 16.7144 94.7168 cv
16.2554 94.7168 15.8882 94.4517 15.6436 94.0645 cv
15.3784 93.646 15.3477 93.0645 15.3477 92.6465 cv
15.3477 92.269 15.3682 91.6572 15.6641 91.1982 cv
15.8779 90.8818 16.2656 90.5454 16.8164 90.5454 cv
17.1733 90.5454 17.6021 90.6982 17.918 91.1572 cv
18.0303 91.3306 18.0303 91.3511 18.0303 91.5347 cv
18.0303 93.6255 li
cp
f
24.0586 93.6152 mo
24.0586 93.5137 23.9771 93.4932 23.9258 93.4932 cv
23.834 93.4932 23.814 93.5542 23.7935 93.6357 cv
23.4365 94.6865 22.5186 94.6865 22.4165 94.6865 cv
21.9063 94.6865 21.4985 94.3804 21.2637 94.0029 cv
20.9575 93.5137 20.9575 92.8403 20.9575 92.4731 cv
23.8037 92.4731 li
24.0278 92.4731 24.0586 92.4731 24.0586 92.2588 cv
24.0586 91.249 23.5078 90.2598 22.2329 90.2598 cv
21.0493 90.2598 20.1113 91.3101 20.1113 92.585 cv
20.1113 93.9521 21.1821 94.9414 22.355 94.9414 cv
23.5996 94.9414 24.0586 93.8091 24.0586 93.6152 cv
cp
23.3853 92.2588 mo
20.9678 92.2588 li
21.0293 90.7393 21.8857 90.4839 22.2329 90.4839 cv
23.2832 90.4839 23.3853 91.8608 23.3853 92.2588 cv
cp
f
39.7563 82.2627 mo
39.7563 80.9673 38.7671 79.9575 37.6245 79.9575 cv
36.8291 79.9575 36.4004 80.4063 36.1968 80.6309 cv
36.1968 79.9575 li
34.7275 80.0698 li
34.7275 80.3857 li
35.4521 80.3857 35.5234 80.4473 35.5234 80.896 cv
35.5234 85.6694 li
35.5234 86.1284 35.4111 86.1284 34.7275 86.1284 cv
34.7275 86.4448 li
35.8701 86.4141 li
37.0229 86.4448 li
37.0229 86.1284 li
36.3394 86.1284 36.2271 86.1284 36.2271 85.6694 cv
36.2271 83.9561 li
36.2271 83.8643 li
36.2783 84.0273 36.7065 84.5781 37.4819 84.5781 cv
38.6953 84.5781 39.7563 83.5786 39.7563 82.2627 cv
cp
38.9097 82.2627 mo
38.9097 83.4971 38.1958 84.354 37.4409 84.354 cv
37.0327 84.354 36.6455 84.1499 36.3701 83.7314 cv
36.2271 83.5176 36.2271 83.5073 36.2271 83.3032 cv
36.2271 81.0288 li
36.5229 80.5083 37.0229 80.2124 37.543 80.2124 cv
38.2876 80.2124 38.9097 81.1104 38.9097 82.2627 cv
cp
.746 .676 .668 .898 cmyk
f
45.5703 84.4658 mo
45.5703 84.1499 li
44.8564 84.1499 44.7749 84.0786 44.7749 83.5786 cv
44.7749 79.9575 li
43.2754 80.0698 li
43.2754 80.3857 li
43.9893 80.3857 44.0708 80.4575 44.0708 80.957 cv
44.0708 82.7729 li
44.0708 83.6602 43.5815 84.354 42.8369 84.354 cv
41.98 84.354 41.939 83.8745 41.939 83.3438 cv
41.939 79.9575 li
40.4399 80.0698 li
40.4399 80.3857 li
41.2354 80.3857 41.2354 80.4165 41.2354 81.3242 cv
41.2354 82.8545 li
41.2354 83.6499 41.2354 84.5781 42.7856 84.5781 cv
43.3569 84.5781 43.8057 84.2925 44.1016 83.6602 cv
44.1016 84.5781 li
45.5703 84.4658 li
cp
f
49.4565 83.1602 mo
49.4565 82.6196 49.1504 82.314 49.0283 82.1914 cv
48.6914 81.8652 48.2939 81.7832 47.8652 81.7017 cv
47.2939 81.5898 46.6108 81.457 46.6108 80.8652 cv
46.6108 80.5083 46.876 80.0903 47.7529 80.0903 cv
48.875 80.0903 48.9263 81.0083 48.9468 81.3242 cv
48.9565 81.416 49.0688 81.416 49.0688 81.416 cv
49.2017 81.416 49.2017 81.3652 49.2017 81.1714 cv
49.2017 80.1411 li
49.2017 79.9678 49.2017 79.8965 49.0894 79.8965 cv
49.0386 79.8965 49.0181 79.8965 48.8853 80.0186 cv
48.855 80.0596 48.7529 80.1514 48.7119 80.1821 cv
48.3242 79.8965 47.9063 79.8965 47.7529 79.8965 cv
46.5088 79.8965 46.1211 80.5796 46.1211 81.1509 cv
46.1211 81.5078 46.2842 81.7935 46.5596 82.0181 cv
46.8862 82.2832 47.1719 82.3442 47.9063 82.4873 cv
48.1304 82.5278 48.9668 82.6914 48.9668 83.4258 cv
48.9668 83.9458 48.6099 84.354 47.8145 84.354 cv
46.9575 84.354 46.5903 83.7725 46.3965 82.9053 cv
46.3657 82.7729 46.356 82.7319 46.2539 82.7319 cv
46.1211 82.7319 46.1211 82.8032 46.1211 82.9868 cv
46.1211 84.3335 li
46.1211 84.5068 46.1211 84.5781 46.2334 84.5781 cv
46.2842 84.5781 46.2944 84.5679 46.4883 84.374 cv
46.5088 84.354 46.5088 84.3335 46.6924 84.1396 cv
47.1411 84.5679 47.6001 84.5781 47.8145 84.5781 cv
48.9873 84.5781 49.4565 83.8945 49.4565 83.1602 cv
cp
f
55.2603 84.4658 mo
55.2603 84.1499 li
54.73 84.1499 54.4751 84.1499 54.4648 83.8438 cv
54.4648 81.8955 li
54.4648 81.0186 54.4648 80.7021 54.1484 80.335 cv
54.0059 80.1616 53.6689 79.9575 53.0776 79.9575 cv
52.2207 79.9575 51.772 80.5693 51.6089 80.937 cv
51.5986 80.937 li
51.5986 77.3872 li
50.1299 77.4995 li
50.1299 77.8154 li
50.8438 77.8154 50.9253 77.8872 50.9253 78.3867 cv
50.9253 83.6909 li
50.9253 84.1499 50.813 84.1499 50.1299 84.1499 cv
50.1299 84.4658 li
51.2822 84.4355 li
52.4248 84.4658 li
52.4248 84.1499 li
51.7412 84.1499 51.6289 84.1499 51.6289 83.6909 cv
51.6289 81.814 li
51.6289 80.7529 52.3535 80.1821 53.0063 80.1821 cv
53.6489 80.1821 53.7607 80.7329 53.7607 81.3145 cv
53.7607 83.6909 li
53.7607 84.1499 53.6489 84.1499 52.9653 84.1499 cv
52.9653 84.4658 li
54.1182 84.4355 li
55.2603 84.4658 li
cp
f
grestore
34.439 95.6792 mo
38.9746 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
39.2437 92.6465 mo
39.2437 91.3408 38.2236 90.2598 36.9893 90.2598 cv
35.7144 90.2598 34.7251 91.3716 34.7251 92.6465 cv
34.7251 93.9624 35.7856 94.9414 36.979 94.9414 cv
38.2134 94.9414 39.2437 93.9419 39.2437 92.6465 cv
cp
38.397 92.5649 mo
38.397 92.9321 38.397 93.4829 38.1724 93.9316 cv
37.9482 94.3906 37.499 94.6865 36.9893 94.6865 cv
36.5508 94.6865 36.1021 94.4722 35.8267 94.0029 cv
35.5713 93.5542 35.5713 92.9321 35.5713 92.5649 cv
35.5713 92.167 35.5713 91.6162 35.8164 91.1675 cv
36.0918 90.6982 36.5708 90.4839 36.979 90.4839 cv
37.4277 90.4839 37.8667 90.7085 38.1318 91.147 cv
38.397 91.5854 38.397 92.1772 38.397 92.5649 cv
cp
f
45.2002 94.8291 mo
45.2002 94.5132 li
44.4863 94.5132 44.4048 94.4414 44.4048 93.9419 cv
44.4048 87.7505 li
42.936 87.8628 li
42.936 88.1787 li
43.6499 88.1787 43.7314 88.25 43.7314 88.75 cv
43.7314 90.9531 li
43.4355 90.5859 42.9971 90.3208 42.4463 90.3208 cv
41.2427 90.3208 40.1719 91.3203 40.1719 92.6362 cv
40.1719 93.9316 41.1714 94.9414 42.334 94.9414 cv
42.9868 94.9414 43.4458 94.5947 43.7007 94.2681 cv
43.7007 94.9414 li
45.2002 94.8291 li
cp
43.7007 93.6255 mo
43.7007 93.8091 43.7007 93.8296 43.5889 94.0029 cv
43.2827 94.4927 42.8237 94.7168 42.3853 94.7168 cv
41.9263 94.7168 41.5591 94.4517 41.314 94.0645 cv
41.0488 93.646 41.0181 93.0645 41.0181 92.6465 cv
41.0181 92.269 41.0386 91.6572 41.3345 91.1982 cv
41.5488 90.8818 41.936 90.5454 42.4868 90.5454 cv
42.8442 90.5454 43.2725 90.6982 43.5889 91.1572 cv
43.7007 91.3306 43.7007 91.3511 43.7007 91.5347 cv
43.7007 93.6255 li
cp
0 0 0 .34 cmyk
f
49.729 93.6152 mo
49.729 93.5137 49.6475 93.4932 49.5967 93.4932 cv
49.5049 93.4932 49.4844 93.5542 49.4639 93.6357 cv
49.1069 94.6865 48.189 94.6865 48.0869 94.6865 cv
47.5767 94.6865 47.1689 94.3804 46.9341 94.0029 cv
46.6284 93.5137 46.6284 92.8403 46.6284 92.4731 cv
49.4741 92.4731 li
49.6982 92.4731 49.729 92.4731 49.729 92.2588 cv
49.729 91.249 49.1782 90.2598 47.9033 90.2598 cv
46.7202 90.2598 45.7817 91.3101 45.7817 92.585 cv
45.7817 93.9521 46.8525 94.9414 48.0259 94.9414 cv
49.27 94.9414 49.729 93.8091 49.729 93.6152 cv
cp
49.0557 92.2588 mo
46.6387 92.2588 li
46.6997 90.7393 47.5566 90.4839 47.9033 90.4839 cv
48.9536 90.4839 49.0557 91.8608 49.0557 92.2588 cv
cp
f
133.563 82.2627 mo
133.563 80.9673 132.573 79.9575 131.431 79.9575 cv
130.635 79.9575 130.207 80.4063 130.003 80.6309 cv
130.003 79.9575 li
128.534 80.0698 li
128.534 80.3857 li
129.258 80.3857 129.33 80.4473 129.33 80.896 cv
129.33 85.6694 li
129.33 86.1284 129.218 86.1284 128.534 86.1284 cv
128.534 86.4448 li
129.677 86.4141 li
130.829 86.4448 li
130.829 86.1284 li
130.146 86.1284 130.034 86.1284 130.034 85.6694 cv
130.034 83.9561 li
130.034 83.8643 li
130.084 84.0273 130.513 84.5781 131.288 84.5781 cv
132.502 84.5781 133.563 83.5786 133.563 82.2627 cv
cp
132.716 82.2627 mo
132.716 83.4971 132.002 84.354 131.248 84.354 cv
130.839 84.354 130.452 84.1499 130.176 83.7314 cv
130.034 83.5176 130.034 83.5073 130.034 83.3032 cv
130.034 81.0288 li
130.33 80.5083 130.829 80.2124 131.35 80.2124 cv
132.094 80.2124 132.716 81.1104 132.716 82.2627 cv
cp
.746 .676 .668 .898 cmyk
f
139 82.2832 mo
139 80.9775 137.979 79.8965 136.746 79.8965 cv
135.47 79.8965 134.481 81.0083 134.481 82.2832 cv
134.481 83.5991 135.542 84.5781 136.735 84.5781 cv
137.969 84.5781 139 83.5786 139 82.2832 cv
cp
138.153 82.2017 mo
138.153 82.5688 138.153 83.1196 137.928 83.5684 cv
137.704 84.0273 137.255 84.3232 136.746 84.3232 cv
136.307 84.3232 135.858 84.1089 135.583 83.6396 cv
135.328 83.1909 135.328 82.5688 135.328 82.2017 cv
135.328 81.8037 135.328 81.2529 135.573 80.8042 cv
135.848 80.335 136.327 80.1206 136.735 80.1206 cv
137.184 80.1206 137.623 80.3452 137.887 80.7837 cv
138.153 81.2227 138.153 81.814 138.153 82.2017 cv
cp
f
144.61 82.2627 mo
144.61 80.9673 143.62 79.9575 142.478 79.9575 cv
141.682 79.9575 141.253 80.4063 141.049 80.6309 cv
141.049 79.9575 li
139.581 80.0698 li
139.581 80.3857 li
140.305 80.3857 140.376 80.4473 140.376 80.896 cv
140.376 85.6694 li
140.376 86.1284 140.264 86.1284 139.581 86.1284 cv
139.581 86.4448 li
140.723 86.4141 li
141.875 86.4448 li
141.875 86.1284 li
141.193 86.1284 141.081 86.1284 141.081 85.6694 cv
141.081 83.9561 li
141.081 83.8643 li
141.131 84.0273 141.56 84.5781 142.334 84.5781 cv
143.548 84.5781 144.61 83.5786 144.61 82.2627 cv
cp
143.763 82.2627 mo
143.763 83.4971 143.049 84.354 142.294 84.354 cv
141.886 84.354 141.499 84.1499 141.223 83.7314 cv
141.081 83.5176 141.081 83.5073 141.081 83.3032 cv
141.081 81.0288 li
141.376 80.5083 141.875 80.2124 142.396 80.2124 cv
143.141 80.2124 143.763 81.1104 143.763 82.2627 cv
cp
f
grestore
128.247 95.6792 mo
131.925 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
132.48 93.6152 mo
132.48 93.5137 132.398 93.4932 132.348 93.4932 cv
132.256 93.4932 132.235 93.5542 132.215 93.6357 cv
131.858 94.6865 130.94 94.6865 130.838 94.6865 cv
130.328 94.6865 129.92 94.3804 129.686 94.0029 cv
129.379 93.5137 129.379 92.8403 129.379 92.4731 cv
132.225 92.4731 li
132.45 92.4731 132.48 92.4731 132.48 92.2588 cv
132.48 91.249 131.929 90.2598 130.654 90.2598 cv
129.471 90.2598 128.533 91.3101 128.533 92.585 cv
128.533 93.9521 129.604 94.9414 130.777 94.9414 cv
132.021 94.9414 132.48 93.8091 132.48 93.6152 cv
cp
131.807 92.2588 mo
129.39 92.2588 li
129.451 90.7393 130.308 90.4839 130.654 90.4839 cv
131.705 90.4839 131.807 91.8608 131.807 92.2588 cv
cp
f
164.222 82.2627 mo
164.222 80.9673 163.233 79.9575 162.09 79.9575 cv
161.295 79.9575 160.867 80.4063 160.663 80.6309 cv
160.663 79.9575 li
159.194 80.0698 li
159.194 80.3857 li
159.918 80.3857 159.99 80.4473 159.99 80.896 cv
159.99 85.6694 li
159.99 86.1284 159.877 86.1284 159.194 86.1284 cv
159.194 86.4448 li
160.336 86.4141 li
161.489 86.4448 li
161.489 86.1284 li
160.805 86.1284 160.694 86.1284 160.694 85.6694 cv
160.694 83.9561 li
160.694 83.8643 li
160.745 84.0273 161.172 84.5781 161.948 84.5781 cv
163.162 84.5781 164.222 83.5786 164.222 82.2627 cv
cp
163.376 82.2627 mo
163.376 83.4971 162.662 84.354 161.907 84.354 cv
161.5 84.354 161.112 84.1499 160.836 83.7314 cv
160.694 83.5176 160.694 83.5073 160.694 83.3032 cv
160.694 81.0288 li
160.989 80.5083 161.489 80.2124 162.009 80.2124 cv
162.753 80.2124 163.376 81.1104 163.376 82.2627 cv
cp
.746 .676 .668 .898 cmyk
f
169.66 82.2832 mo
169.66 80.9775 168.639 79.8965 167.405 79.8965 cv
166.13 79.8965 165.141 81.0083 165.141 82.2832 cv
165.141 83.5991 166.202 84.5781 167.395 84.5781 cv
168.629 84.5781 169.66 83.5786 169.66 82.2832 cv
cp
168.813 82.2017 mo
168.813 82.5688 168.813 83.1196 168.588 83.5684 cv
168.364 84.0273 167.915 84.3232 167.405 84.3232 cv
166.966 84.3232 166.518 84.1089 166.243 83.6396 cv
165.987 83.1909 165.987 82.5688 165.987 82.2017 cv
165.987 81.8037 165.987 81.2529 166.232 80.8042 cv
166.507 80.335 166.987 80.1206 167.395 80.1206 cv
167.843 80.1206 168.282 80.3452 168.547 80.7837 cv
168.813 81.2227 168.813 81.814 168.813 82.2017 cv
cp
f
175.269 82.2627 mo
175.269 80.9673 174.28 79.9575 173.137 79.9575 cv
172.342 79.9575 171.914 80.4063 171.709 80.6309 cv
171.709 79.9575 li
170.241 80.0698 li
170.241 80.3857 li
170.964 80.3857 171.037 80.4473 171.037 80.896 cv
171.037 85.6694 li
171.037 86.1284 170.924 86.1284 170.241 86.1284 cv
170.241 86.4448 li
171.383 86.4141 li
172.536 86.4448 li
172.536 86.1284 li
171.852 86.1284 171.74 86.1284 171.74 85.6694 cv
171.74 83.9561 li
171.74 83.8643 li
171.792 84.0273 172.219 84.5781 172.995 84.5781 cv
174.208 84.5781 175.269 83.5786 175.269 82.2627 cv
cp
174.422 82.2627 mo
174.422 83.4971 173.708 84.354 172.954 84.354 cv
172.545 84.354 172.159 84.1499 171.883 83.7314 cv
171.74 83.5176 171.74 83.5073 171.74 83.3032 cv
171.74 81.0288 li
172.036 80.5083 172.536 80.2124 173.056 80.2124 cv
173.8 80.2124 174.422 81.1104 174.422 82.2627 cv
cp
f
163.141 93.6152 mo
163.141 93.5137 163.06 93.4932 163.008 93.4932 cv
162.917 93.4932 162.897 93.5542 162.876 93.6357 cv
162.519 94.6865 161.601 94.6865 161.5 94.6865 cv
160.989 94.6865 160.582 94.3804 160.346 94.0029 cv
160.041 93.5137 160.041 92.8403 160.041 92.4731 cv
162.886 92.4731 li
163.111 92.4731 163.141 92.4731 163.141 92.2588 cv
163.141 91.249 162.59 90.2598 161.316 90.2598 cv
160.132 90.2598 159.194 91.3101 159.194 92.585 cv
159.194 93.9521 160.265 94.9414 161.438 94.9414 cv
162.682 94.9414 163.141 93.8091 163.141 93.6152 cv
cp
162.468 92.2588 mo
160.051 92.2588 li
160.112 90.7393 160.969 90.4839 161.316 90.4839 cv
162.366 90.4839 162.468 91.8608 162.468 92.2588 cv
cp
0 0 0 .34 cmyk
f
grestore
163.438 95.6792 mo
168.249 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
168.814 94.8291 mo
168.814 94.5132 li
168.1 94.5132 168.018 94.4414 168.018 93.9419 cv
168.018 87.7505 li
166.549 87.8628 li
166.549 88.1787 li
167.263 88.1787 167.345 88.25 167.345 88.75 cv
167.345 90.9531 li
167.049 90.5859 166.611 90.3208 166.06 90.3208 cv
164.856 90.3208 163.786 91.3203 163.786 92.6362 cv
163.786 93.9316 164.785 94.9414 165.948 94.9414 cv
166.6 94.9414 167.059 94.5947 167.314 94.2681 cv
167.314 94.9414 li
168.814 94.8291 li
cp
167.314 93.6255 mo
167.314 93.8091 167.314 93.8296 167.203 94.0029 cv
166.896 94.4927 166.437 94.7168 165.999 94.7168 cv
165.54 94.7168 165.172 94.4517 164.927 94.0645 cv
164.663 93.646 164.631 93.0645 164.631 92.6465 cv
164.631 92.269 164.652 91.6572 164.948 91.1982 cv
165.163 90.8818 165.549 90.5454 166.1 90.5454 cv
166.458 90.5454 166.886 90.6982 167.203 91.1572 cv
167.314 91.3306 167.314 91.3511 167.314 91.5347 cv
167.314 93.6255 li
cp
f
194.691 82.2627 mo
194.691 80.9673 193.702 79.9575 192.559 79.9575 cv
191.764 79.9575 191.335 80.4063 191.131 80.6309 cv
191.131 79.9575 li
189.663 80.0698 li
189.663 80.3857 li
190.387 80.3857 190.458 80.4473 190.458 80.896 cv
190.458 85.6694 li
190.458 86.1284 190.346 86.1284 189.663 86.1284 cv
189.663 86.4448 li
190.805 86.4141 li
191.958 86.4448 li
191.958 86.1284 li
191.274 86.1284 191.162 86.1284 191.162 85.6694 cv
191.162 83.9561 li
191.162 83.8643 li
191.213 84.0273 191.641 84.5781 192.417 84.5781 cv
193.63 84.5781 194.691 83.5786 194.691 82.2627 cv
cp
193.844 82.2627 mo
193.844 83.4971 193.13 84.354 192.375 84.354 cv
191.968 84.354 191.581 84.1499 191.305 83.7314 cv
191.162 83.5176 191.162 83.5073 191.162 83.3032 cv
191.162 81.0288 li
191.458 80.5083 191.958 80.2124 192.478 80.2124 cv
193.222 80.2124 193.844 81.1104 193.844 82.2627 cv
cp
.746 .676 .668 .898 cmyk
f
200.127 82.2832 mo
200.127 80.9775 199.108 79.8965 197.874 79.8965 cv
196.598 79.8965 195.609 81.0083 195.609 82.2832 cv
195.609 83.5991 196.67 84.5781 197.864 84.5781 cv
199.097 84.5781 200.127 83.5786 200.127 82.2832 cv
cp
199.281 82.2017 mo
199.281 82.5688 199.281 83.1196 199.057 83.5684 cv
198.833 84.0273 198.383 84.3232 197.874 84.3232 cv
197.435 84.3232 196.986 84.1089 196.71 83.6396 cv
196.456 83.1909 196.456 82.5688 196.456 82.2017 cv
196.456 81.8037 196.456 81.2529 196.701 80.8042 cv
196.976 80.335 197.456 80.1206 197.864 80.1206 cv
198.312 80.1206 198.75 80.3452 199.016 80.7837 cv
199.281 81.2227 199.281 81.814 199.281 82.2017 cv
cp
f
205.738 82.2627 mo
205.738 80.9673 204.749 79.9575 203.606 79.9575 cv
202.81 79.9575 202.382 80.4063 202.178 80.6309 cv
202.178 79.9575 li
200.709 80.0698 li
200.709 80.3857 li
201.433 80.3857 201.504 80.4473 201.504 80.896 cv
201.504 85.6694 li
201.504 86.1284 201.393 86.1284 200.709 86.1284 cv
200.709 86.4448 li
201.852 86.4141 li
203.004 86.4448 li
203.004 86.1284 li
202.321 86.1284 202.208 86.1284 202.208 85.6694 cv
202.208 83.9561 li
202.208 83.8643 li
202.259 84.0273 202.688 84.5781 203.463 84.5781 cv
204.677 84.5781 205.738 83.5786 205.738 82.2627 cv
cp
204.891 82.2627 mo
204.891 83.4971 204.177 84.354 203.422 84.354 cv
203.014 84.354 202.626 84.1499 202.351 83.7314 cv
202.208 83.5176 202.208 83.5073 202.208 83.3032 cv
202.208 81.0288 li
202.504 80.5083 203.004 80.2124 203.524 80.2124 cv
204.269 80.2124 204.891 81.1104 204.891 82.2627 cv
cp
f
193.61 93.6152 mo
193.61 93.5137 193.529 93.4932 193.477 93.4932 cv
193.385 93.4932 193.365 93.5542 193.345 93.6357 cv
192.988 94.6865 192.07 94.6865 191.968 94.6865 cv
191.458 94.6865 191.049 94.3804 190.815 94.0029 cv
190.509 93.5137 190.509 92.8403 190.509 92.4731 cv
193.355 92.4731 li
193.58 92.4731 193.61 92.4731 193.61 92.2588 cv
193.61 91.249 193.059 90.2598 191.784 90.2598 cv
190.601 90.2598 189.663 91.3101 189.663 92.585 cv
189.663 93.9521 190.734 94.9414 191.907 94.9414 cv
193.151 94.9414 193.61 93.8091 193.61 93.6152 cv
cp
192.937 92.2588 mo
190.519 92.2588 li
190.581 90.7393 191.437 90.4839 191.784 90.4839 cv
192.834 90.4839 192.937 91.8608 192.937 92.2588 cv
cp
0 0 0 .34 cmyk
f
199.281 94.8291 mo
199.281 94.5132 li
198.567 94.5132 198.486 94.4414 198.486 93.9419 cv
198.486 87.7505 li
197.017 87.8628 li
197.017 88.1787 li
197.731 88.1787 197.812 88.25 197.812 88.75 cv
197.812 90.9531 li
197.516 90.5859 197.078 90.3208 196.527 90.3208 cv
195.324 90.3208 194.252 91.3203 194.252 92.6362 cv
194.252 93.9316 195.252 94.9414 196.415 94.9414 cv
197.068 94.9414 197.527 94.5947 197.782 94.2681 cv
197.782 94.9414 li
199.281 94.8291 li
cp
197.782 93.6255 mo
197.782 93.8091 197.782 93.8296 197.669 94.0029 cv
197.364 94.4927 196.905 94.7168 196.466 94.7168 cv
196.007 94.7168 195.64 94.4517 195.395 94.0645 cv
195.129 93.646 195.099 93.0645 195.099 92.6465 cv
195.099 92.269 195.12 91.6572 195.416 91.1982 cv
195.629 90.8818 196.017 90.5454 196.568 90.5454 cv
196.925 90.5454 197.353 90.6982 197.669 91.1572 cv
197.782 91.3306 197.782 91.3511 197.782 91.5347 cv
197.782 93.6255 li
cp
f
grestore
199.565 95.6792 mo
203.815 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
204.37 92.6465 mo
204.37 91.3408 203.349 90.2598 202.115 90.2598 cv
200.84 90.2598 199.85 91.3716 199.85 92.6465 cv
199.85 93.9624 200.912 94.9414 202.105 94.9414 cv
203.339 94.9414 204.37 93.9419 204.37 92.6465 cv
cp
203.523 92.5649 mo
203.523 92.9321 203.523 93.4829 203.298 93.9316 cv
203.074 94.3906 202.625 94.6865 202.115 94.6865 cv
201.676 94.6865 201.228 94.4722 200.953 94.0029 cv
200.697 93.5542 200.697 92.9321 200.697 92.5649 cv
200.697 92.167 200.697 91.6162 200.942 91.1675 cv
201.217 90.6982 201.697 90.4839 202.105 90.4839 cv
202.553 90.4839 202.993 90.7085 203.257 91.147 cv
203.523 91.5854 203.523 92.1772 203.523 92.5649 cv
cp
f
225.024 82.0386 mo
225.024 80.7432 224.035 79.7334 222.892 79.7334 cv
222.097 79.7334 221.668 80.1821 221.464 80.4063 cv
221.464 79.7334 li
219.996 79.8452 li
219.996 80.1616 li
220.72 80.1616 220.792 80.2227 220.792 80.6719 cv
220.792 85.4453 li
220.792 85.9043 220.679 85.9043 219.996 85.9043 cv
219.996 86.2202 li
221.138 86.1899 li
222.291 86.2202 li
222.291 85.9043 li
221.607 85.9043 221.495 85.9043 221.495 85.4453 cv
221.495 83.7314 li
221.495 83.6396 li
221.546 83.8027 221.974 84.354 222.75 84.354 cv
223.963 84.354 225.024 83.354 225.024 82.0386 cv
cp
224.177 82.0386 mo
224.177 83.2725 223.463 84.1294 222.708 84.1294 cv
222.301 84.1294 221.914 83.9253 221.638 83.5073 cv
221.495 83.293 221.495 83.2827 221.495 83.0786 cv
221.495 80.8042 li
221.791 80.2842 222.291 79.9883 222.811 79.9883 cv
223.555 79.9883 224.177 80.8857 224.177 82.0386 cv
cp
.746 .676 .668 .898 cmyk
f
230.46 82.0586 mo
230.46 80.7529 229.441 79.6719 228.207 79.6719 cv
226.932 79.6719 225.942 80.7837 225.942 82.0586 cv
225.942 83.3745 227.003 84.354 228.197 84.354 cv
229.43 84.354 230.46 83.354 230.46 82.0586 cv
cp
229.614 81.9771 mo
229.614 82.3442 229.614 82.895 229.39 83.3438 cv
229.166 83.8027 228.716 84.0986 228.207 84.0986 cv
227.768 84.0986 227.319 83.8848 227.043 83.4155 cv
226.789 82.9668 226.789 82.3442 226.789 81.9771 cv
226.789 81.5796 226.789 81.0288 227.034 80.5796 cv
227.309 80.1104 227.789 79.8965 228.197 79.8965 cv
228.645 79.8965 229.083 80.1206 229.349 80.5596 cv
229.614 80.998 229.614 81.5898 229.614 81.9771 cv
cp
f
236.071 82.0386 mo
236.071 80.7432 235.082 79.7334 233.939 79.7334 cv
233.143 79.7334 232.715 80.1821 232.511 80.4063 cv
232.511 79.7334 li
231.042 79.8452 li
231.042 80.1616 li
231.766 80.1616 231.837 80.2227 231.837 80.6719 cv
231.837 85.4453 li
231.837 85.9043 231.726 85.9043 231.042 85.9043 cv
231.042 86.2202 li
232.185 86.1899 li
233.337 86.2202 li
233.337 85.9043 li
232.654 85.9043 232.542 85.9043 232.542 85.4453 cv
232.542 83.7314 li
232.542 83.6396 li
232.592 83.8027 233.021 84.354 233.796 84.354 cv
235.01 84.354 236.071 83.354 236.071 82.0386 cv
cp
235.224 82.0386 mo
235.224 83.2725 234.51 84.1294 233.755 84.1294 cv
233.347 84.1294 232.959 83.9253 232.684 83.5073 cv
232.542 83.293 232.542 83.2827 232.542 83.0786 cv
232.542 80.8042 li
232.837 80.2842 233.337 79.9883 233.858 79.9883 cv
234.602 79.9883 235.224 80.8857 235.224 82.0386 cv
cp
f
223.943 93.3911 mo
223.943 93.2891 223.862 93.2686 223.81 93.2686 cv
223.718 93.2686 223.698 93.3296 223.678 93.4111 cv
223.321 94.4619 222.403 94.4619 222.301 94.4619 cv
221.791 94.4619 221.383 94.1563 221.148 93.7788 cv
220.842 93.2891 220.842 92.6157 220.842 92.2485 cv
223.688 92.2485 li
223.913 92.2485 223.943 92.2485 223.943 92.0342 cv
223.943 91.0244 223.392 90.0352 222.118 90.0352 cv
220.934 90.0352 219.996 91.0859 219.996 92.3608 cv
219.996 93.7275 221.067 94.7168 222.24 94.7168 cv
223.484 94.7168 223.943 93.585 223.943 93.3911 cv
cp
223.27 92.0342 mo
220.852 92.0342 li
220.914 90.5146 221.77 90.2598 222.118 90.2598 cv
223.167 90.2598 223.27 91.6367 223.27 92.0342 cv
cp
0 0 0 .34 cmyk
f
229.614 94.605 mo
229.614 94.2886 li
228.9 94.2886 228.819 94.2173 228.819 93.7173 cv
228.819 87.5259 li
227.35 87.6382 li
227.35 87.9546 li
228.064 87.9546 228.145 88.0259 228.145 88.5254 cv
228.145 90.729 li
227.85 90.3613 227.411 90.0962 226.86 90.0962 cv
225.657 90.0962 224.585 91.0962 224.585 92.4116 cv
224.585 93.707 225.585 94.7168 226.748 94.7168 cv
227.401 94.7168 227.86 94.3701 228.115 94.0439 cv
228.115 94.7168 li
229.614 94.605 li
cp
228.115 93.4014 mo
228.115 93.585 228.115 93.6055 228.002 93.7788 cv
227.697 94.2681 227.238 94.4927 226.799 94.4927 cv
226.34 94.4927 225.973 94.2275 225.728 93.8398 cv
225.462 93.4219 225.432 92.8403 225.432 92.4219 cv
225.432 92.0444 225.453 91.4326 225.749 90.9736 cv
225.962 90.6572 226.35 90.3208 226.901 90.3208 cv
227.258 90.3208 227.686 90.4736 228.002 90.9326 cv
228.115 91.1064 228.115 91.1265 228.115 91.3101 cv
228.115 93.4014 li
cp
f
234.714 92.4219 mo
234.714 91.1162 233.694 90.0352 232.46 90.0352 cv
231.185 90.0352 230.196 91.147 230.196 92.4219 cv
230.196 93.7378 231.256 94.7168 232.45 94.7168 cv
233.684 94.7168 234.714 93.7173 234.714 92.4219 cv
cp
233.868 92.3403 mo
233.868 92.7075 233.868 93.2583 233.643 93.707 cv
233.418 94.166 232.97 94.4619 232.46 94.4619 cv
232.021 94.4619 231.573 94.248 231.297 93.7788 cv
231.042 93.3296 231.042 92.7075 231.042 92.3403 cv
231.042 91.9424 231.042 91.3916 231.287 90.9429 cv
231.562 90.4736 232.042 90.2598 232.45 90.2598 cv
232.899 90.2598 233.337 90.4839 233.602 90.9229 cv
233.868 91.3613 233.868 91.9526 233.868 92.3403 cv
cp
f
grestore
235.288 95.4551 mo
238.966 95.4551 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
239.52 93.3916 mo
239.52 93.2896 239.418 93.2896 239.388 93.2896 cv
239.296 93.2896 239.276 93.3306 239.255 93.3916 cv
238.959 94.3403 238.296 94.4629 237.919 94.4629 cv
237.378 94.4629 236.481 94.0239 236.481 92.3818 cv
236.481 90.7192 237.317 90.291 237.858 90.291 cv
237.95 90.291 238.592 90.3013 238.95 90.6685 cv
238.531 90.6987 238.47 91.0049 238.47 91.1377 cv
238.47 91.4028 238.654 91.6064 238.939 91.6064 cv
239.205 91.6064 239.409 91.4331 239.409 91.1274 cv
239.409 90.4336 238.633 90.0361 237.848 90.0361 cv
236.573 90.0361 235.634 91.1377 235.634 92.4023 cv
235.634 93.708 236.644 94.7178 237.828 94.7178 cv
239.194 94.7178 239.52 93.4937 239.52 93.3916 cv
cp
f
69.8335 82.2637 mo
69.8335 80.9683 68.8438 79.958 67.7017 79.958 cv
66.9058 79.958 66.4775 80.4072 66.2734 80.6313 cv
66.2734 79.958 li
64.8047 80.0703 li
64.8047 80.3867 li
65.5288 80.3867 65.6001 80.4478 65.6001 80.8965 cv
65.6001 85.6704 li
65.6001 86.1294 65.4883 86.1294 64.8047 86.1294 cv
64.8047 86.4453 li
65.9473 86.415 li
67.0996 86.4453 li
67.0996 86.1294 li
66.416 86.1294 66.3042 86.1294 66.3042 85.6704 cv
66.3042 83.9565 li
66.3042 83.8647 li
66.355 84.0283 66.7837 84.5791 67.5586 84.5791 cv
68.7725 84.5791 69.8335 83.5791 69.8335 82.2637 cv
cp
68.9868 82.2637 mo
68.9868 83.4976 68.2725 84.3545 67.5181 84.3545 cv
67.1099 84.3545 66.7222 84.1504 66.4468 83.7324 cv
66.3042 83.5181 66.3042 83.5078 66.3042 83.3037 cv
66.3042 81.0293 li
66.6001 80.5093 67.0996 80.2134 67.6196 80.2134 cv
68.3643 80.2134 68.9868 81.1108 68.9868 82.2637 cv
cp
.746 .676 .668 .898 cmyk
f
75.6475 84.4668 mo
75.6475 84.1504 li
74.9331 84.1504 74.8516 84.0791 74.8516 83.5791 cv
74.8516 79.958 li
73.3521 80.0703 li
73.3521 80.3867 li
74.0664 80.3867 74.1479 80.458 74.1479 80.958 cv
74.1479 82.7734 li
74.1479 83.6611 73.6582 84.3545 72.9136 84.3545 cv
72.0566 84.3545 72.0161 83.875 72.0161 83.3447 cv
72.0161 79.958 li
70.5166 80.0703 li
70.5166 80.3867 li
71.312 80.3867 71.312 80.4175 71.312 81.3252 cv
71.312 82.855 li
71.312 83.6509 71.312 84.5791 72.8628 84.5791 cv
73.4341 84.5791 73.8828 84.2935 74.1782 83.6611 cv
74.1782 84.5791 li
75.6475 84.4668 li
cp
f
79.5337 83.1611 mo
79.5337 82.6206 79.2275 82.3145 79.105 82.1919 cv
78.7686 81.8657 78.3706 81.7842 77.9424 81.7026 cv
77.3711 81.5903 76.6875 81.4575 76.6875 80.8662 cv
76.6875 80.5093 76.9526 80.0908 77.8301 80.0908 cv
78.9521 80.0908 79.0029 81.0088 79.0234 81.3252 cv
79.0337 81.417 79.146 81.417 79.146 81.417 cv
79.2783 81.417 79.2783 81.3657 79.2783 81.1719 cv
79.2783 80.1421 li
79.2783 79.9688 79.2783 79.897 79.166 79.897 cv
79.1152 79.897 79.0947 79.897 78.9624 80.0195 cv
78.9316 80.0605 78.8296 80.1523 78.7891 80.1826 cv
78.4014 79.897 77.9829 79.897 77.8301 79.897 cv
76.5854 79.897 76.1982 80.5806 76.1982 81.1519 cv
76.1982 81.5088 76.3613 81.7944 76.6367 82.0186 cv
76.9629 82.2837 77.2485 82.3452 77.9829 82.4878 cv
78.2075 82.5288 79.0439 82.6919 79.0439 83.4263 cv
79.0439 83.9463 78.687 84.3545 77.8911 84.3545 cv
77.0347 84.3545 76.6675 83.7729 76.4736 82.9063 cv
76.4429 82.7734 76.4326 82.7324 76.3306 82.7324 cv
76.1982 82.7324 76.1982 82.8042 76.1982 82.9878 cv
76.1982 84.334 li
76.1982 84.5073 76.1982 84.5791 76.3101 84.5791 cv
76.3613 84.5791 76.3716 84.5688 76.5654 84.375 cv
76.5854 84.3545 76.5854 84.334 76.769 84.1401 cv
77.2183 84.5688 77.6772 84.5791 77.8911 84.5791 cv
79.0645 84.5791 79.5337 83.8955 79.5337 83.1611 cv
cp
f
85.3374 84.4668 mo
85.3374 84.1504 li
84.8066 84.1504 84.5518 84.1504 84.5415 83.8447 cv
84.5415 81.8965 li
84.5415 81.019 84.5415 80.7031 84.2256 80.3359 cv
84.0825 80.1621 83.7461 79.958 83.1543 79.958 cv
82.2979 79.958 81.8486 80.5703 81.6855 80.9375 cv
81.6753 80.9375 li
81.6753 77.3877 li
80.2065 77.5 li
80.2065 77.8164 li
80.9204 77.8164 81.0024 77.8877 81.0024 78.3877 cv
81.0024 83.6914 li
81.0024 84.1504 80.8901 84.1504 80.2065 84.1504 cv
80.2065 84.4668 li
81.3594 84.436 li
82.5015 84.4668 li
82.5015 84.1504 li
81.8184 84.1504 81.7061 84.1504 81.7061 83.6914 cv
81.7061 81.8145 li
81.7061 80.7539 82.4302 80.1826 83.083 80.1826 cv
83.7256 80.1826 83.8379 80.7334 83.8379 81.3149 cv
83.8379 83.6914 li
83.8379 84.1504 83.7256 84.1504 83.0425 84.1504 cv
83.0425 84.4668 li
84.1948 84.436 li
85.3374 84.4668 li
cp
f
grestore
64.5215 95.6792 mo
69.332 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
69.8975 94.8291 mo
69.8975 94.5132 li
69.1836 94.5132 69.1021 94.4414 69.1021 93.9419 cv
69.1021 87.7505 li
67.6333 87.8628 li
67.6333 88.1787 li
68.3472 88.1787 68.4287 88.25 68.4287 88.75 cv
68.4287 90.9531 li
68.1328 90.5859 67.6943 90.3208 67.1436 90.3208 cv
65.9399 90.3208 64.8691 91.3203 64.8691 92.6362 cv
64.8691 93.9316 65.8687 94.9414 67.0313 94.9414 cv
67.6841 94.9414 68.1431 94.5947 68.3979 94.2681 cv
68.3979 94.9414 li
69.8975 94.8291 li
cp
68.3979 93.6255 mo
68.3979 93.8091 68.3979 93.8296 68.2861 94.0029 cv
67.98 94.4927 67.521 94.7168 67.0825 94.7168 cv
66.6235 94.7168 66.2563 94.4517 66.0112 94.0645 cv
65.7461 93.646 65.7153 93.0645 65.7153 92.6465 cv
65.7153 92.269 65.7358 91.6572 66.0317 91.1982 cv
66.2461 90.8818 66.6333 90.5454 67.1841 90.5454 cv
67.5415 90.5454 67.9697 90.6982 68.2861 91.1572 cv
68.3979 91.3306 68.3979 91.3511 68.3979 91.5347 cv
68.3979 93.6255 li
cp
f
74.416 93.6152 mo
74.416 93.5137 74.3345 93.4932 74.2837 93.4932 cv
74.1919 93.4932 74.1714 93.5542 74.1509 93.6357 cv
73.7939 94.6865 72.876 94.6865 72.7739 94.6865 cv
72.2642 94.6865 71.856 94.3804 71.6211 94.0029 cv
71.3154 93.5137 71.3154 92.8403 71.3154 92.4731 cv
74.1611 92.4731 li
74.3853 92.4731 74.416 92.4731 74.416 92.2588 cv
74.416 91.249 73.8652 90.2598 72.5903 90.2598 cv
71.4072 90.2598 70.4688 91.3101 70.4688 92.585 cv
70.4688 93.9521 71.5396 94.9414 72.7129 94.9414 cv
73.957 94.9414 74.416 93.8091 74.416 93.6152 cv
cp
73.7427 92.2588 mo
71.3257 92.2588 li
71.3867 90.7393 72.2437 90.4839 72.5903 90.4839 cv
73.6411 90.4839 73.7427 91.8608 73.7427 92.2588 cv
cp
0 0 0 .34 cmyk
f
100.946 82.2627 mo
100.946 80.9673 99.957 79.9575 98.8145 79.9575 cv
98.019 79.9575 97.5903 80.4063 97.3867 80.6309 cv
97.3867 79.9575 li
95.9175 80.0698 li
95.9175 80.3857 li
96.6421 80.3857 96.7134 80.4473 96.7134 80.896 cv
96.7134 85.6694 li
96.7134 86.1284 96.6011 86.1284 95.9175 86.1284 cv
95.9175 86.4448 li
97.0601 86.4141 li
98.2129 86.4448 li
98.2129 86.1284 li
97.5293 86.1284 97.417 86.1284 97.417 85.6694 cv
97.417 83.9561 li
97.417 83.8643 li
97.4683 84.0273 97.8965 84.5781 98.6719 84.5781 cv
99.8853 84.5781 100.946 83.5786 100.946 82.2627 cv
cp
100.1 82.2627 mo
100.1 83.4971 99.3857 84.354 98.6309 84.354 cv
98.2231 84.354 97.8354 84.1499 97.5601 83.7314 cv
97.417 83.5176 97.417 83.5073 97.417 83.3032 cv
97.417 81.0288 li
97.7129 80.5083 98.2129 80.2124 98.7329 80.2124 cv
99.4775 80.2124 100.1 81.1104 100.1 82.2627 cv
cp
.746 .676 .668 .898 cmyk
f
106.76 84.4658 mo
106.76 84.1499 li
106.046 84.1499 105.965 84.0786 105.965 83.5786 cv
105.965 79.9575 li
104.465 80.0698 li
104.465 80.3857 li
105.179 80.3857 105.261 80.4575 105.261 80.957 cv
105.261 82.7729 li
105.261 83.6602 104.771 84.354 104.027 84.354 cv
103.17 84.354 103.129 83.8745 103.129 83.3438 cv
103.129 79.9575 li
101.63 80.0698 li
101.63 80.3857 li
102.425 80.3857 102.425 80.4165 102.425 81.3242 cv
102.425 82.8545 li
102.425 83.6499 102.425 84.5781 103.976 84.5781 cv
104.547 84.5781 104.996 84.2925 105.292 83.6602 cv
105.292 84.5781 li
106.76 84.4658 li
cp
f
110.646 83.1602 mo
110.646 82.6196 110.34 82.314 110.218 82.1914 cv
109.881 81.8652 109.484 81.7832 109.055 81.7017 cv
108.484 81.5898 107.801 81.457 107.801 80.8652 cv
107.801 80.5083 108.066 80.0903 108.943 80.0903 cv
110.065 80.0903 110.116 81.0083 110.137 81.3242 cv
110.146 81.416 110.259 81.416 110.259 81.416 cv
110.392 81.416 110.392 81.3652 110.392 81.1714 cv
110.392 80.1411 li
110.392 79.9678 110.392 79.8965 110.279 79.8965 cv
110.229 79.8965 110.208 79.8965 110.075 80.0186 cv
110.045 80.0596 109.943 80.1514 109.902 80.1821 cv
109.514 79.8965 109.096 79.8965 108.943 79.8965 cv
107.699 79.8965 107.311 80.5796 107.311 81.1509 cv
107.311 81.5078 107.474 81.7935 107.75 82.0181 cv
108.076 82.2832 108.362 82.3442 109.096 82.4873 cv
109.32 82.5278 110.157 82.6914 110.157 83.4258 cv
110.157 83.9458 109.8 84.354 109.004 84.354 cv
108.147 84.354 107.78 83.7725 107.586 82.9053 cv
107.556 82.7729 107.546 82.7319 107.444 82.7319 cv
107.311 82.7319 107.311 82.8032 107.311 82.9868 cv
107.311 84.3335 li
107.311 84.5068 107.311 84.5781 107.423 84.5781 cv
107.474 84.5781 107.484 84.5679 107.678 84.374 cv
107.699 84.354 107.699 84.3335 107.882 84.1396 cv
108.331 84.5679 108.79 84.5781 109.004 84.5781 cv
110.177 84.5781 110.646 83.8945 110.646 83.1602 cv
cp
f
116.45 84.4658 mo
116.45 84.1499 li
115.92 84.1499 115.665 84.1499 115.655 83.8438 cv
115.655 81.8955 li
115.655 81.0186 115.655 80.7021 115.338 80.335 cv
115.196 80.1616 114.859 79.9575 114.268 79.9575 cv
113.411 79.9575 112.962 80.5693 112.799 80.937 cv
112.789 80.937 li
112.789 77.3872 li
111.32 77.4995 li
111.32 77.8154 li
112.034 77.8154 112.115 77.8872 112.115 78.3867 cv
112.115 83.6909 li
112.115 84.1499 112.003 84.1499 111.32 84.1499 cv
111.32 84.4658 li
112.472 84.4355 li
113.615 84.4658 li
113.615 84.1499 li
112.931 84.1499 112.819 84.1499 112.819 83.6909 cv
112.819 81.814 li
112.819 80.7529 113.543 80.1821 114.196 80.1821 cv
114.839 80.1821 114.951 80.7329 114.951 81.3145 cv
114.951 83.6909 li
114.951 84.1499 114.839 84.1499 114.155 84.1499 cv
114.155 84.4658 li
115.308 84.4355 li
116.45 84.4658 li
cp
f
grestore
95.6333 95.6792 mo
99.312 95.6792 li
@
gsave
0 0 mo
249.315 0 li
249.315 113.28 li
0 113.28 li
0 0 li
cp
clp
99.8667 93.6152 mo
99.8667 93.5137 99.7847 93.4932 99.7339 93.4932 cv
99.6421 93.4932 99.6216 93.5542 99.6011 93.6357 cv
99.2441 94.6865 98.3262 94.6865 98.2241 94.6865 cv
97.7144 94.6865 97.3062 94.3804 97.0718 94.0029 cv
96.7656 93.5137 96.7656 92.8403 96.7656 92.4731 cv
99.6113 92.4731 li
99.8359 92.4731 99.8667 92.4731 99.8667 92.2588 cv
99.8667 91.249 99.3159 90.2598 98.0405 90.2598 cv
96.8574 90.2598 95.9189 91.3101 95.9189 92.585 cv
95.9189 93.9521 96.9902 94.9414 98.1631 94.9414 cv
99.4077 94.9414 99.8667 93.8091 99.8667 93.6152 cv
cp
99.1934 92.2588 mo
96.7759 92.2588 li
96.8369 90.7393 97.6938 90.4839 98.0405 90.4839 cv
99.0913 90.4839 99.1934 91.8608 99.1934 92.2588 cv
cp
f
grestore
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (013x003.eps)%%CreationDate: 27/05/15 12:37 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6GC(f$mjNLs!8dg?O<0cqdKq55XRr*G^e1n!J,n9k]?_S^ZX:gc`\U;`m,-LZ5'QC,'@:u?=dESi[d7gRX7arCI5Kii>5ql'%bGL`Z'GLIIe%-m(ZIte0dsBVQ-DsG@N<OBdA`+@NB?Gr4Y=L\(0GSi9e9_)hW],8PS^qSigF]iPX\O(#?2V=g9HR<mi(5eS;f=Kr%s%.,dWir%oCggCpWdHYgPud(Kg.TV0:-tVT4Dk%E1hoNF?SD)tEa#kf"KP=ob)7n%"kDUV$JoX62L]E6'<&9Eg\l`E?$p$DOmcrU%?4T'uQsf*7LH#)SJcKB^c/,#Bh`eWb::9iDC-KkH-9J@'=1.W+Y=nAW+Y.9U<p6m]qH(:+mF;N&<(YF#J1CA:^U'*M8Q&/8i.5^?%FULj0]ONSYl@463s0J6PWE3m.%]*!qdl[I%?dN@edj0d!dO1qWNI'c^q9]<2<!:m=7#.mJ]`F*QmoLFX2qA)0_#:&4cE!MFH4L4n%ebHtp0;gDY!Xun2p$[3^;@a^+DV(B@X\49-P+e:X9@o;T[Uc6)J&S(69$=6s1aou.ZsKg;len%t0Jk.2=N?tn[u][WQ!R@13elC[%O.&.`VNSCO#JiW;$3/cXIu5ZH\_!l@)</G1`C%*U8]i'Fd0@nRJ^'Y6%j77@=D:,p>Cap5n3XH\m8X0:.Ad7no&')jh`YL%$3$nR%IMrE>g,=BqM]AaspfCJcWN+rV<M`JA'muLbAJeOl0^tE;?n'"/;MJ&Jn2bD*bLe_=Z#/P;r/7Cf)b]-Kr5;LP,*j\on]bMTT+m2c%VGb7.Q&9#.gQ`+0Y>j^I'P!"R`J:lmTAl@<\I/7gT3)HtKV)?Rqo!hRT4*fM'?adEn.Y]D.7)k152dmg_B.Y`ejSajCW7FS-h\MZ%+r'p-D,P,sp9>>*$U:miV1LBb5);4q0r6(j&q87fC!S7%'R,ERD&k@oA&M$eIom'TLS%Z^*C8CpqM^FOrl%df5<crK.eI$5++E3&%ll@*rr1o])"@'.*p('CP-rM[kFJ\A7Mjt"`F3[!tbU@q)l<&qlNRNUTS77PH;nQeUZt;L.ZipDaA[$BK1U20!2XNAMMZ(Fg/4K@R%qaY?eho/ABK=soh3G3EdTp2<(;"!I.b^"n`)e)Q&L%5;3$U1GPmM%`TFkSIE)e.)_K_LJcNhq!d[!):0I89f>bc,,NDPgo=BgZ[7%OFNLE?"p5*Up=6/?-2)JEd=9t2s5OSs6sllLUa.lUWf_(NWWb/.>_uTeDRiWI!N?2?M^NM9B72oV-6`.rtL/NEW=I:3-F1EpFlK3%b3D$A\:<a-e"jb7^\".0dGL8/gU>bL6@h=?s3cC$>P,E%Qi9Wh9-jpbs3cDY1B$V>V>hh(+4]O6G5+YLQ2]p\k[3PGU(oPVr\@-3%P%:l55gb0`YbJkJaH5sYc\+@?rhoN4NiT'Hs'NrR&-$7-n/M"\I-5Y;MYiCa62m$+h/B/V^VL<t>-h&/*fP[A2IKW<E2`XcW:qpA%WGH\D,!PpqJ@>u-S3k!dBS^S^oJN.n%P;\=4Ob@,K(Np;4*D1ep%+eY6CJ:qL@Y+RQ?4DZh'fH99/hu;P0sfsT`67]&^LGp9L-?X%WeHJ:ru:?L-s^:AOL-T$:cYHq5OZ5A@)aY6bAe@F;):5F8,a7j@_k^PE(U?.41_n%-(7b".3Qt=Yls4o0NH!D'!u)>Amfq%."0_q%-&2;VeR;;PMCPGIf7j6&XbaJ&pmB+D315U)3A\d5e%$`a1BTHXq9.M6:,BJ"&#1"&T=`g3[6lW8h'i9kieaL*K5)`\(<"I;Pk7dh%+;osL)BE`d1NJ@f*[mp9l#2-\O_DZWAKBWfd@5PA1(?WgVS4rF@ak,<WA#AoI8Vhn*Yl)]4+AX)UU5FQA;tRZEXUKrPZrOhPeNgq%CTmaMSP!I"6)b["K5]dSQA0MKV_c!%FDd1hmC+)?dB?MAqF8[OfIAkpa;:S:"^7o?1GWF6SupArL!:/-Q@MnD.3,L+\Wh?G/WR$J%<?sQuBj?>T8q:NJHpMEcX<[Y5*'BS+Ba]s#B]ZfF$Zmook;+T5ps8&46?=K%SC`tij*oesV2r0X=--:F]JC/KZ=U&dfUG<WlIX%Y%NlHN`>OH`5)5Xnj?75X4P&Qt.E%H6^'k1lT*-=V(\OI@t&,ac.Da*dNJ)W"M+f7QuGS5uZBST^7gi!9#epXVq-#+Jnk@!0i:(mm&%3T2Eeo*\fl]_^9uX!Y/n"YL;5a0a-b\HOR$>%/>N*+F1!)VD6_iH^jW$'.hm3!APZas16KN3f1P;[RsFO3u>QR+&L;0!K1#;SSfH%/>EPU4eef#0Ht(74\_bUn'fb8-UOo6/f]i@,aK1BYDKBs..>X<Nf7!7>)K":J)=l`=,PK@Ykr)U+t]O3+"E2/`qA#3'g@+o\_kU-%U';FR_Q/fQncSb8[b!0F<-'o8E-hU?cpb+3Dc85=QEPOLeR36SDi=IQI\YWGeI*?=Cu=PEoNTu?\Q>gU-G2L\FDJn)!G;,7\mf\s%map`].:Q'0jK4NQ!MXFN(tS*"!o>n1kY)]Mc1G.%6),@i0$_9VqHS8$<1>\WbrO=XdlEIYlZDF*a6@]Q@tX+\hJ]Sk+]`#XYXi-\%)_dg$1h2WP.[)7YHCa?mMN;cmXrG:N3djnfh=7@gSNlFuNn?2bi#NUWk2D7gZ!nNJ2Xuh3mu<B4*'FhY.Xla"eJs#ic`,LQ6U()>%,N</JjH'*fF5H4T^V2),V9HKgX7>!n_,`VEk7OKKZd&B=E*d%%:[h"pZ&<V_r`Dp_[DV*Xo3-`J?@]b6ed\?*4@e/$IWT]kO(!rB%7!kE3f$Elb?)X"_B*+h-A?Nnj=:--A`iXu21Jo*Z^EplbGl=]YK@.D"V$%sS%eA6!N-%8C0bak)oC#(6Fl&]o#Ii:[?h]C=8(-oS%:M?jGrDc.\.B+f7KoT,(Qe7+\q7$LgALFqPI+(d09/7o5XG"Tm8tR6(P$[A-6D/F4V0u00+!rS(k)M[CFTV;B%.:#m*.Na)+oT]'%7?L4;5G^O;OQ]rLD:+c=pH[J"W[T9cL&%gnHV!$\.%+4X"ugdFkS*eNTAAb1d.4hLDj1[&\8Y;3h3NZLESoi?cKuC#EW"Kgc*_O&%>?W-;'BMBqgpK^eT=?iDp4m/:dZi3NoH`7*Lk.@.L,]t*dDLG)nT.3Wcb#eK=`9,@`1BlO6t]eLS="a@h_a+9`@_(BaZ$K0kWFZ>%OZm!V,m(-o?Me`;d5g&&Al5i/LQpWsW*LjoW2%`>JF=-$=!a9:'2]%h$fnqE?on2Ns1QC"<PY.!Oj.,nEoOe>F+ihe5inQ$".ICG%SOL?gU3KSJ^g]#;hQep^!1_V+1_ZE%qaO)"I8LO1A:C;rW(-Z8SeIkiOiB)C#(j:"@M>"Pl<1B\&797CO,j!"Rh9@=fY5K),B==f%jp57'k;fB2MAVF^7;'l!iO2bI<264D*\6b-$%?tk.bFa-#rS-j7JhVcJiFq((sSRjZ70.$atUEZ!Pdl8:o<jgm\-DROP7m:s(P]/%0k4!q7Q"-*KCHX]N;0]nPZq,`NQrWO`9),Y'pbE$\)Qt#_/elX_Z,!9@Iddfgag"n5IYo2mWU"O-1O-q^IhJNpmBJ)Qa`Zh=L2L_%<8>6[[iL<9n!4sN*52f08_L?Y=C!oGZs<oC&ibd'MC#_`pPJLTaLT@g]i&CIIt?<[flFER)[P];@d=C\G]ro6_NR`qd<_S6SF>O\%=hXRYVRn+qn#)orPl>@UcGe9FH"&q-1k+B1G,P#^hJN70V.L+Cek8/ShPn4UZ1RS0TDE>A/j7AXm^KNpO'XtNrFjMG<`Ed447tFY%#VVC6r,;MfV>BX]kKA:E6HdWglA\hKW7HN!S$hlg[F:/>qP6u*<]b!sGA9>:p^<ZmJOXP5/hB;bohMt*"=(+3,/+7*$4)\*1fWkU%VmdT;B!(CK9n.I$Vm,smc<bLOCF?gGq<>VkcWdN+;m#eV;`b'p.$jmWZuJE=BHB)]JbiS["oKqe3k^#K.o8:>"aKf\Y.[qS1d9bW%eb8m\CJY*6c^gBcZU#Gon#r'Yj.lM5nrj&6WHNS0YDrD3hq_W;/#kM'`p\t#%2b4@2](6"<u]U*dV&%!G+I.9H`rNoB240W'51cN%a"Ar4.pnc0_-QlM^Dli`._jkWrMN59UmG#dGG+o75E4O;>WR@6rMlb3;u*b\Y;UKV'p6qb.>dGOs+G<g.DAT,5K1+p9BkcWiQ!!e%q#d;iUh)!'R(dp/dPV#3T;HQhrH0]WVeU,rQ-Mb/n<[Mg?#oInmGpjH;$Y)g=Id%"_@e%(Vf&Lf:#b4kFgC*c_Wr+nKEk>E8@Q;s%O93=YPq:<QPd.H]s+c0!+s/M7EeZ*jd%E2k;kF#DiP](FY=OXfkAToq9':EWd4DXMVk&u]@S\(FRr:OA2c)E72GPBQ:gQo[[m4KV%$R_Kk\))\(k.L]N?FjD=kZ(tR)BZZ-Bjk=.Au68'okK'%4nP-l_:-kZPuM=mO+2KCT3hB$$6n!qpg7RMdVbW]I:r9AY[75%q%=_k%lWuD4?<];Ffa\o7JR)\%(*If(j^&kYSQ;aM'X6'%.a;iM%#=!2hs%Vq7kNQqpg80A1IBE']`-5hlh.RfW5$__elU?r[m?ZK:s[`h%U[!"KUp^ft=1)+*^Yl1cX<B-b^HOb>Jf^'eS"8W:U$KA;s8?[hTth:i1nCcQ5Q@e<pgF>Bep$Y(n*`/]RP/bD<QZXp%)2#?C(7[g%F9L[`&GW<[q5=@S?uWaX"sj2/j7#9)Kb_)@lha2I#1CB2piMEj&>ZN$nab-r6l3t?I_Pes\Qd%`#PH[JnA$C=Or%VU-Q^Ocl"9\S%or$P[IBA/:(3!=RB8;'4Tmo&CKB9k2FV"8OqetjAp0fZ^3tB@9d!&l!3haL>lK*YsFnsob.^9fgbg:l3Y$R%T?aJ8kUVd&I^2`N>%8M1iF(]9bV,pAD`III17ci:6fYhSqtrVsh.7lk\AqWYZD8OiTlZ;3ZUO%%Gfa(M:K^P13jFPPcY]lD=3pilDnn"AP8kG-UTO6r((%ff<'`rbXf-aS5Go^&IQq*cGr>ZC4]C8c=uuMdtZ%YEr9#beo)0miFVm+MNWdJ,GXTXhOu<P0"L%VZ4j&g@7ls@mXK-5_u`T#!8iU%hFjp'WMNtlE"DeM=#@l'/X'5`0?u8i(@?&scHp]6%kf@B;X%D`c3Y(eXb2.?W0Z_5jPctF[J<n3HfbHj7'jj&@m$B;KtpGe+3iYV%]lDmiV:(![qs6nTqggD^Vi!iWWmOQKV`mPRgFY*i=`i*"j_+CQ[+l`UF,TR-?0S-=DH-X"XEHel"4OQ7Zt\7*J1a-MSE_:*]S&f#%,jpo`@nr%2+^-R4WWo@d]38]3@<1V7[6J\,="%(_Wa40^5--H$*?XOWm8hR-?FB=^143Lh?23ZlSEM6M_7D"IH!'OL`rn)+fh5^A%1"%PJIld\T2NPDWri11r(]\0(cH:H.b"72jq^h)7IMr[@S<rnD(Jo[\9^*FPX>+OE[6Zppjp<p@[Yp(YJkYL.fD'%1e(n?.ouU3e%&lRo'UJSl)p=f:T""c26oNr0;2o(a2l-e9mm7n&Qh.l?`PH1d?'e\&VN?XbAmW\u'X#+"^cLLA\h7B4767C3]s-GYs#si^=BSZ)s%dU1?0%/*?%;/O$f*G*oi*&/.3N]'g';9#cLRKltIU;Bj3a27(5-M)EReHtDo(T#UobGpG6Qm(j\dLH>`-/H:N\n-UN/1E&fXDUIM%XSgtI1P%t/4[kqTb=Wr&j3^nt[q3=CoG9]<XYs:J9G=9(9=A?f6)607c&_9SLc-\O.tDi;!_l<e!H(I/mh/>PIhehD5S`Ia[d\__%9q:40+5II=/p,[Fp?L%DOb"MM2.7ugD:\"PXaG6%1&1QO3NKp'RX@l8FWd_7)i89\i[8c(AXLS/QLNNt6VD/2EGXGl]Ru[j#ok0R%YqpA/QRb0p%6=l_7aG(d>,^"A,$1eJog88P&R1Xp`)f!a"e8m(17P,>agf-ga3OrfH:aI!f_=^A3;?RG0RjWeK^2smZq'kJ<^pJ2%8,#K97@8-?<&?$RkhQulo<m,JeSG*f>WRAal?OG/e#Mi=g7E]i\))Y4IZqHRFP[[i/Qki8:X7An3:Z!''&8^?QD"0\Qg:-F=,q\u%PK/C[<=Gb]G,JO@5U<R7C=N&op#8;E8q`)N;tA'cZQ.7YgF7k^]K^\n/^(W\^-6TkNI&:hqY`MMe#`]e\+"%^436DCY?s;-8%*a4%p!-fUm6\qHYJ3<8(7q]POL=Lqltip1E`>\5NjhdlWh$krh*!hpbDN!]9?OOa8_X,J^GjTmFR/ZkUE59K(VK/HLl+V^[8&YNfA@EW%dERjFeRl/LqR:RJq[.>lXrBZ@>4AHc)H3Hg`-#<3QcV-HLirX)SSRpZEkVUWG3pZS5W>j#f2hZK5QN_"UC4Gt+Fu]@01<7f8d]aL%*`<W@V?$E#.bX?Y2"fdY*ofAE!SVYjUB_kJJHOj_-R]LTd<@]E[2rU\6Uq*Sg5@Kb[-Nj>\B$F4.+hgF91i$kB)SjsDVGIHo^[PO%Mfg]VnbQVc7X-5oS%W)$kJ_AGq2<`@mEY0dX1grZ\QZfT,W@2IE`t(F9cC]=>eK*CRL)U\>4'7>)dqn)4O\7L04LKF\:A^RdLOh7%b'L9%StAQ(j/(Id@W!aK&U*Mp%l#NeY.h_go/f8^d?Zkr#aOIoKHZX[o["*"lG%>Y(02f7qXLKV!qO_8Wj_l[->)6\D8=o>Nujqa%P.X)Y2KtSuV/7#-.)q@c1CXKtrG/<s_pD>Wg<TY^YZq==YZMG&DSF^SE0>u3h:L7jP]EF.g5X_!Kd]VK<aBg^3UX06hW+IbH&JR&%P^3"X+oOj`/2/!u6f>`QH`QbQGi1BZ>cWJmCc/*,7OR@%&RY$toB<K-mV]L[;5PY(FHpbQ"/DqcgFZNZ+B\#/Th8-\YSi'E<N"U[%>A'"sYZC4A]J\^tfku"SAFjIK,@I5>Q8bZX;X?WiMMV^u&XBp'C:7+A%2u=6Iec'2lG0LXM,>tr\iW*A'Pn+BTas9#hD6D@VAWZA%R#bc.\u7D&`>*K-,"kkOMMbB^m9k)*-!R%RKH`:bdLr6tU!NeB8%7)X`S9c`GgfcR2=6W$:c">)_/'B-U^:?o6)f&j/'j=`dIQ(R%&Mach4M=dj;($gr],J*:lnO8&dfj&;N=N8?G^$fI])%T)U_3;Pd>/<QWB?ZiZ&4@.inciQ,auMRpiG%Y#qb1Wo0q/#0H^Gg^;*#H%=%S9cQ/knL-'?&R$nd-!";jrEG!A4F0L[f__jS<je;Zq^5>K@PY_'H690Q#<V)%#33$e8L0cD+$Y:mQT0@U$kV:2OkTfPL;\^u/D%'H_lfA`!df7@s?8-%&t2;(>a15"l^;ncZ3'NgI^QL1\V7E_Ls>aZ:F\/UlsJ$OjeZrj22no2jUHXBFpdT/`nN<BgWbnGtHqG_^@:%T6]7W,&[r"dZ!>.TH*H6WBA$d#RWuYXLPlXl(pEr,M'H1Y!8B`)j`4'.DKi3\?PM[;t6?OXo;L)SHlp"Dre`l\oHT].fHfb5BeGM%f;b\)d`oAp<*<<b2;U-1lHWRF.6hmBb%;F?5?BX^8%3YRnbiP24o`f=(4MRq15gq>V9G*EW(?`lRp"1PSght`d^i'F&<JDjC)b4>%lfse4>/m]7Fh>6W>\TU-W`4&38ioiA@Og-sXKT;O(>D?+S,7AQh:c#Fb#MWSg1@g9Ik-e%.lZXV[DLXu4C9e3X;,kmYc\#GB]hDs%/[K]t\=6X,QE8<IC[MUXAKe.F=a[76RCSC)7V8g4ompD<'>(+nSk=:qm*oa;G+A6e3SR)9Z"0>``nHDAah$$f*mnom`Ife9;1]"T%5>?V>7'grA^!h#eJb?@R^7C[8M42V3XmK(gq71d"!PikGW_MB8`+iAbf:@]-dNKh"5n?Kqmk3C1'?]l.]I":i*Xdrk>Sncrd8\]K%XStlkm"@7mgj/\_?%b%<HneBs91i$U0`#)@8e11QNb2o3T>?Mi:/#kEVHWA[7QWi\\Z+8KWRH4B-lj+t=fET^XG/QH9MS_@^[9rK%[@;NBEk_2sW6nSQ4&K]FB9,7e:P8KnD,7SM65uKK44"JTaEu=FIoZ3Hd5g.G4p"MbWEHnn"#"Dk^/81->%`hdbfok%<'*%J)l-=B%Y*ZHK-q`SnpS%1tq*K=TY.rBG-iKe5Q4Ig(EU!BLZr&XZqeV!DR`bJqKi&!cm4L&6K,Zs.+1:G/K>jKQ]//b3E_rO1/2XEBccp:V%[tFO7UO".bD!<@Pd>?#83Hb1p*!\>N<?<22Uf#X`rk9;7g!Aeh0s&d&[(Z6^);OGa<1'Z2RQ%rMR3(\d-5SUC?Z26BI6t8[UoiJ%%7a(Ou'i1U6X3uR0,\*V@I?![E>=;@f=_QB&qtk\YG?YMje<i'WCR)rE7SD1gr.FBP'O%3TmX?g-rokDn"u^e918BR^\mI[#V3"18%QDCjb\HupqYcmpcoqT.R\_4bf05$_lToGYWs'j^6D%p2_c#-1@qsDql7M"#87:gO_/\'4%hF)%PQVZ?L4YlI2p@VP!g=S%^2gVu?%IX:qbn.=79_suomY>N^TC\H)6?E8`9H>c@ch8W?3UITgf?cTUO"uc=b]*(/T['-%efg7$]d@1NCr:.02fVir"1m-I===Q\5bMT*m%R)N=4o^cTWYsr*M3M4[Bh&]PY8YaGPqWs6OV[(ZAr,MfW?0n%pT)O,8ZIAC$dlB7sf(#fXDJOQX2;6eenF\U?'E&nfFR)EQod[ht%:A83\K8o"aUX0fS/+"tZ^(u(07Mf*K-4JVlL:k:^BiKRhChlPeUeu8L\[_*FF:'mToqdMi9)cPJ$M>1thn=tUs6>*"[ofEK^N)O/%::0<4kB)$N=.]nnFeS8/9L#tOh<2MM2o"FWbHRo5BRB[\4_:'(<,ZJ3jD>`dl%NT44oJ;<I8:;FIc>Tr5:uoak53)>.NA6>4P=#S%%t/1Ao;Bpn:Z&461[\0``Jhoj14B$<qY%`lF$g7`qJuL\-0QeOQn`kKnbTO)o!Yq^]sE%4V,)TeI+uBH0,?`Prii<k`3TF-bMHBc%;_6l&ASH^"R/p*eZ7l#Ips],gns]H_O(-Gg7rp0Pm6A:Jp.ji#cV%j8=3sl8Z*2KrqIA14d+r%ZHK`g@79dM:IJVZF3BIMEfQ:_O%pO5<uBt83X;@e2eVef&Ji=meQPc;4TOLOm'WOt.8qn,&'id87Uri<ZISecCJI];*_J)6bM"?e+f4$U-hc/G=n)n2<Wi_sg@"OF<^%1g`WiB'-8[3bP1&<dE+<>Vi38Kq<3;Za=B&JEQgm*'\HLX(2u=Va^Nn!``l/Tf(,c6)n?qHe$RsXuAEUb08S]&t9?kX>iSK:T>i&%HXG:U!S:#,VYm.<S,kS>q?M-u\3&'smo?:!ao'35b8f`SM))Y(9-.Xr2S-,m]_r1Oe<lc=BK,@tH/EHSVq]tQ7UZZ#,DS0,<IQ$\%"Z=H`"XhOGTY=m126g$GCeABj3ncV.)Qc_0:V)O/-f=6f_S!)K#e^."ol\:oh/7HUS\#2F'Zdn`"?"?'ET0&>I8t[u7c3/ZUsYZe%n=EBS\sd9gp\'mI%\\lVn*hCRk\;F\e0sk+8@&OWT`c\X8SFl4O.:R:Zu5KtaYu-S?u-QrCL>I8Bt;9VY@_T2A+KN%I!mP\R#mL-%46&E"0=IP"pOrbo,391"oB_f&g&pWTo$\c)"it_ma`Oic@fBkXH-uRmDpR"[RB'-C<C#(,p=sCeL`^%/lh8WR++hDA]mWr`[8eeg%b:<8]"9d<!=n]+FfO>:$".D1,@KTn?CXXK!8/Y9N>P\#>.I2AOH9DWOniCrOQ`u`lZ+J>/)][st'DOSIcJ6`.V[g-1I=\t:`(-C7%8Ech][&7QCj9&QU.Lr:NHT)5,<0e^#oJ6TNHap#uCe20U`5WUl,Xb]TI^\rUU'Hl%58`ZhMoM"Z4iA1&-:.[Q8*p#AJbL'IJs/t0%k!T$$L@7Rppn9(,C]nbU>!<FU,o3NgXc*2$jS>oBQ+4u"0`0"U1[gCK=ki].d<&/1V`^>9[mNcJ=8%2Ib1<].2^GZ@Wb9UW4`&s[%HlgJfTiHjgNUm$c7jK5,a$"DQlV8,T'10=OZ:!I[C_k3PoRkPO7sb'Cp1DDsQ(ltBQ:_e5$gcT,:F_p_(o1s4`o[#)1neno[eH[3%n'_hI8de4:<BnT"ZdJ5Op+g@DZ8HZXckX2/E,^KWX'qU_V?+Br;TLOD[cQf(bYB,_L6)RC@>'b0$'TjW/Z`sKEB'?hKS!nhql4\r%0Zbg9b2%IFP[CNq8KEX9%Ou\QM<geTOdqXP0B>S"\79qqWssK9!Le#:]H92-HoUWuL=6T@p[^ih07!8*6*[`U?Ofs8B$cn$Fs(,W%gFqBU:')f\o1c4@]?'_L@1bl4cp&e`mEdjGPmp_W_*%[1F[HUi:lE_h.m;o#f$%DQEanU#DqO8k,=Qdg(9DF`8o-Z@[_7"@5:r][%ladaJ"B)pm]b$Eg:Dl&6.#G2:MH%)Wk6tXjn[#-@2Lh?-&T.,d`ig7sd*_@c?S';)DP)<9_@4;?N0Tqka2M2Ql%J?,&LtDLG%(ZN%=H$NE(r`(-A##Eid>";rgTqL.m.<<@]lh(&&neI8XQ,j;>f"l#4goM3Sk85""A<<E@q'7P\TRj6Q,$7o2ZN#nYaQLrSIKlE+=VGb%YXrDkXdb13&ZN+nFf+7sSa>&E_5?0d]MaPO"Btn+P.PttLdYp-<&Q1"]XHp0Lf!DH-XQ.fT&E#WXSK;WU$Fc^X15lGODdZ+2;KDL%WEZ.gd!a"BiGA:tM]?)aN0*fRTN_m%BEsi2P+[Q&4A\/m:)35"mLmEI!.QsJV9(]H5Ht97k[e8`/-:l$.tHGA'S*rJ*e,8X3&<PA%K1YL9'E[G6+4l8#npbh&61??is&.P&&M3V9nj@U_Gs%kZ-YFJBE<!O22Ic=cG[Tk^&[;C*4Hp]h-[U[2'leB=rlf^XI*XJ*JPMX]%\eGc#!Nqt123tK0L1K*t$SO]#SVjU6YPfL\+n5\H_n%`^9%U$(hnr_/LU$ht<-Vn?hYZh<bGochN"'_;P^s@ZPp&47E:R>mX?&c)%kA(SEL2VHM$(/\@#nn-@o;Mf\kC[VEUlLRf3eAjN6lN_8o]?\?5:.;t^^!G_M=IJ8^2$>ra\)]h/cWs_A)g=:4Dl#p&ZQcdk"Im-%`(Ye_?M==2iD<gL$gh+IRntX&pGp@un@?`am=##Y2cPPfhC1*7eeb:c2D2<3i!R9+$^q[iaWIB%b*E4b3"oRC-RZ63ENs7JgqA9P%!na$hiu;%eML\DR8]7*FI)3M154^En%QE,SCE+fC=1f9Kl5.-"FYX:uJjg"gVg<Qbo5P//oTF5WWPs!)q<j7dlNrZgTN\8t)c=oe%.huqRi9q1=o7^6->osK_/eY9c?ol-`XOl;[OtEi1P/C<h'?7_CAF&O=dnQKBM3TO#!S@*58bo8JO)^Nu@YQFT7r#F!k?OWKl[CI^%@cm*S)@ZtYq&M7Dn^cLg`@)YL(P.@a`hq-9>`CYSV1`jQU`(g_p0larT[CjEHUD;\ee>15;T\5BII3<L'<rUc\2ETRj5^:ga#dZm%&"9RE$]@?gdUBAF_DZ`1?&7G/oYnf^k$<KXHI!<YJgXG_BUPPO*c/+t6-bOd2.L)A$TqJ(^W_XQeT8B@-GnA@'0;-)QUCVthJpAO%o5/7]7O_^s*lD<C-k99Rj;&#./R^_@83Qo(oe>#Lce_-on4&l-rlUr:=[Dr*U1QdVhh$>9"P?VZjJ7sbL=M.0^b#TiH$n4Fj0A&e%<Sk8?PfJs2L0$rPlVod"7IInq\*s4d*K4/O48NcLogI,[a_!8*:I=qBC)/&eN,7B]/O=HOj6mL:)r?'7M.,:H80_2uZf+j_8hn0e%f`[,k&ipsacR.G&j_hsAmQK7"p=+p9&s8D%[X]bnf0Q_0ooYG2p[pe;/fg9Tl+Tn<h6C^a;(Rica#fVAP.;\a&)3or@b1TC0D!:F%,!OFJO@mS+_8><)Q>i0o0t5Xk0bncg-kGC7.9kE3TCBOh8Tq7^nHrV,5`]g`nKL%k`ja\<.uRcJ8[<Ml<Md"deB7d,(mqh#1D@`k%_q#%)A,2A-d\g*!qT(UXRr:G0OU*8P[jF;s``FY"mX2IG+#X3a$V0n^^0LCaZdepG6k<-t.]ADq3EJtE6g"kj?j7W3-"%-AFO:tJ%WU+kMkkZ4jAC+1j3I20@F9Wat$]ZHeNlkO-"s*:d7a@]ccCe\#Jg9I*"ZGXVcimtg%[06rSO(<BmMIg:/inX1c$^N_LFtW?%e\I6%Ep3ENb.A`VGeJ.e*4l-K9\bY%+s^Tb5US@Q3"K3bfu!?2Ya+Fs/fpf4:l<skQ"$V!U5Z'D2fdAGG_jJVP$%;0^ThkfZ[V@8mTe*4%.L\lr?\k\2HTS'%.R";[A_t>/!W1*l?=os2_8mN:VW%KQ?]Ko6K(`XKrKi1bYd-)^s+L'3ra[s+j=6,PnL3LI.jMqCSY6`6\V`^'%1hhtO&YCgKGV#FpbPlq?"%W<G-be5+\euc>.nF@#fH9?P&2l-O^(hn9=7g*=Eo^c?J=Ve>-+aVl'dPU`ENqZ!W634Xb=C4_!tZf,%.u<,<U_<Gljj4F<KK`,b]8PTMmU*;G;82)c4IJsI<X*bpK89%e%GX4j,DlRLR8t[FrE4p'JMT(X@D4l9.q1(l6/[]W%Jbsqrb8cg%@1mh^@SH#?oH_+(ZR[X=ba/JKC30oIa7g6+,7TaTpCa%s1?f*KKr:eB7-oJ#E#aQ:V>&(cPW"48X$d7g0mhg`fL8Wkp-p_<be_6X%f5W%&Tsj%_Q,WP9ATCOaZHD0)A>8SaY)6\"EK3NZ::fE70i0D^9lrXX`>sXD6SVsAbguI3P'<tU:2'>p;HoIM-=G=^Ts+dIn^6$1%c:J^)<I@Q[i:*g1b4tKH,hp2MnXZpFHZ)"&^i%M%2ib3\>"+s-kc;Ls@GZ1%%n@4%H@SCDJ'LU_#X(aN4e=@\`tZ"Y6&%(>#.\\]%IUtK!i_j9=emnhuIcsV0S9pt2&R5'tadL#D^)X1OD\+i`4O_>@pF&ds8O&)-O7R$*kKMnXS@3;gF?Uef*o"ZJN(N%/m.qtka<!uD%VhF"LT:t)M58c8to&F-Zf-tf^X-4\AJ<H&q-"5tU<!M&A&Xg]K4)IZ5MTpL-6HU70an8/7^@jl<1*Jaq&s:id1*Yc/0_54mGTnp.%e8fFf8aIWe6tU?W4,BPefeK92DP)<9I%Ct0H$i",Pp?fUjG45I<nlNc3!^1[SC<hr*jsZ)POuL3QZ,S(T94PIW#On_a_NHra5s!a%)9_#2'^E]W_W6Nsd,#9?l$.EP,kP8JP"Cm!l@a7'An:,Zo'FG',Nc-Oqa5<NVN6F$QeW(Iiq)G)4u]RVO1T96fJX[,9UY,#HAQeU%,%3r4*>Q8`rQ$*pCiZ(rUY^j3Np:R=6K8k(L<PDlr4KaPo&2peP/`q$LTQN(N#J<!QS?`p`-aNlcbbkX2g"aa83YgZ)6$!c_ZaZ\%N]S=8?<`F7+3q.fL/6>jO:R]Q*0QHTi<%$\:OR]Iq/G1(g3N,5aNHUqO)=O5HCWiT/e5FmeR9UoXDHBLOfmi]CaIdK)40li##W!^%`@B"=./%S@(b-Jqe?_-7fj+/dB8FVBO0<1IR9[7g+k1EOkU]W=a"Y%V4<QQGNb>`3k']QemBN%08194ZTcUT8"KL*ZVBOQ)"!WV)%fsnI;hmA4ONb47q[?Gin1"LSh/>iNtCr'"C,$#?HJQfq0-h5k17<a7!i7J;NCbbcWi.6'#qi1dh5'q7!,A-'RqdW`qHKK4G"7jEo%mA7\p?Xa(+l*5f#(66O.X\Lt^VND@NO]n<##n.XZQB?JNSrD1rmr;m6@P-W]8B#t]EFbkS4elYc@P.S<e?EGUj7Ba_qYY-TL'?(m%Z.k5M@^m*pL=agmXlR*27nJCBR`3:=$5Y`U@nhYuc[emO\.>&9(JM)RVnsbP.n<9e9-m&BPZ50,*>(Z9_F5Du6>lHjeDeVY-c-[J%)^P>3,D510"hI.:'q8/\_3tg6QKY-IYW[Q/;jsDcOi!;+`B6X!LT`#C0.r>#[Nt%:9sXH7OQk`#)mt?_HubmXC#/EPof_L[<&"IH%:@F-G%,O@g`dh<U\UOIjh70OMPpU92jbc4/q,fXa5:LO5HS`X`q1a/^Xtq`eQ91Ri*TMON\<VCm(:Wl3GR;2hRnlN,L-Gmc@SYcr%XGFNqe]_=oc#)%8jV)Q#d@9L2np5[3L7a/hp%S:KC8M`3lujD3@Fq'KeFK>aplaIY\&'rfn5AXg=JO3))0Xb-[a:uQ5-s@)Y1'=6%faY-RG&B/O'>Wg[I'Z\lDK7A:d=p,9YHSEs@rh.pppgp[Ye.H(aufKXb-5ZPT*I6rn)HL.^Xp=Xm-7HYKYO\-)_E/fD%"(FT>4B"%Flb'Rd9h='"QIRm-f5c50*dGbE64A52/;jjdH.SIQLB&b9<tPg^^)V_\_pM;)ZJtXl7B>;@CL*jA,d@6IG<gYVH_Gp2H#D'BG)?F%/jrF.m]lVK7Og,bhW*C$pKS/TP?a4B9BXH;hBWmo+jtMoQp]JhdOB9rjC%jn8dTATnJIXUpV%)^M-NkWKJbnNbclI+HeA\Y0`=-C%6n7?%JLHb9H+u3"B$(CDI$*G$jCPqEEt+8Dfi?7H(f*%q&;L27K[I-jJo^,PmS"KYRk?,I`UDe+?T)1d/mY38-O7ek$X^(WB/X%_%[N'3Dh+1E/`7]5uc:7j^O-iZ)0bRS@SQGO*O\HXV9,FC47a%Y:ns`Qfc__)mV/t3oa-KH?$q!fC*T(]q^21BR>WOeR1TkQ*T[>&_%l`k'N"g<fD4.@i.V3HMVGd?Rc`\6glj,pY3Jo^+M/Yum]l%5p-%9Qb\2I407h@[*Yr)Fo\O,IJp2W90#99;l7S787(dfnj]dFG^G%B%$qFdKSNm2bGu6:^-eX,GSl"$"S$V9>Y^=L<l_)ZCOqn"3F$XV@1PCMn)o2LhsYq&W/QCHcU"aZ+E,b/t$&a8reSh2rQ:U_e.@$%Fi]'0rBT%X?BcWR^kdqKY6,WGiqd:Hl-W3[?IE`H23l:(Z%-9oh=!=3(WdbC?X9mY1%+r('&T/iHXC(,S@.4jN-?B1Y]MAfU(*%[%'6PM%Eq:V+%#P\,q3,&`QScC^rsIKL9]6gL`EE8U;pHSK$K"H1(eQ20dIGO*Q0Ist2WVQS03#)LfkoWZhnT1>8Jl9*C[T&^o%r"/%#63EK;f([rLlp<E-&u8iFNp@$02WPA,u.AG]B4"8rQ2r`F6>V2+S_\C_8:'jfA+@&1_I#f@A%E(pfn\^d@GdW./o[IV!#V&pIC7f%W>cXoeiUVT]`E+;6"WtDU!_]Q+(ZNXj(.B/g>'c+FJ1c,#M<fd''Y-D.e7.jAk1-sh%/5V0mH_;hG(IAHQ+?BSkWa(GGG:_&gb@>%b9nJr2EBgD.)J>MUGpmR>4:-.q==D96RIW.linP>2\]5WBJ4D#h,$pNOr`B+qoaiY)b]>RTQa'j4Q`h[jIBCO$_-_([:R4$_Db=$%FALmU/t1kq,`Xaep<:9cK%ui7ef<;@J65g%I2@uPR3^eqYYCk9]JiQ<mbBm"84q9l$nrj[aOT'n^IO?qGf--_i6Qij6Y;5UguEp+%'b[E"5\12J=V1bk?jMfg&hF[9h;IJKn"XGX-;A$,^1.H7)>2QcXCWBL"OQJqU5X>@GC"X"?83G\;S)jS&gL<m##8]2@&*0*_oqS+%U$m`JiU\Q)\`&RV&h\oK\`&RO=bP[P2i&<*hf(M^k2VR!6if7.N@os62r'C3;r.MgFQ?/AiF4e)%<qI<TCA&]@k.(_:P@MB(Ur]W%@:JV(o_,/XHL1WX'JlX?pMF`'[J/SX>6'DjI4at@l-Yo[LL\CuLK\_nn$sY8`;!0.V"K]-5&kGm\%-,7r-!Bl?IU%8_=QEJB,CH`%E-^$,R2iH709I)X&!Y!H(kqQnKKY&.PDPKjS/Vm'B>^nX)ecbgX7Ac%qC%[%BQL7+M,]5M/\Mj6-9+%=O^EC)1lWq6M<UuQ3mWsi%#0V#"*^#:9jAq&*L&o=@P#SC]%E#FIpklW0pXsOaik99jbAk3%?*SD9Z/dpJ2hN2H'n4HYc$6C<j>Z1[.EAi`bD._.Up>E6L#oi<%D8QY@Ld%("cQGQM`c0`YMZD]i*15BF+<kdR%l<'cf$6p\EcEVEG?(*5n"#_%(=(4W>0dQ\I+piY\UE*(Q'sJ75#J$f%ghT[']\(6%Bm<,eVdcEmI(8V*jirW!Wq,#a[TpJWn`@XpGtHt/Gb(JiAN@+pW?TTBAc<R2;s*?"KBU!p'=R>H'+QB>D)JuRmE+)j?_^$\o6],5%?ZL'npTVn2Uo'^HiV@HK)0<A6m'TlB=cRR0)g@:'e?ld-)s=7#bWiC#eKOG]l:FOA`ai+3.QrRK_`^FF\ijVLjMcVrh64rTO@H>m%:MQ`@d8ODIFPhei^\aAVNL%a((%8(riR:6Y)b\$FR:"/7b#+&hQW/l@Jf:KKq;jqpE^6nk<j1jbPL/V7c+e&1=fr'u3f=U<PAi9Z%_MsaE<.3'()H9>?D)/pZAo#en9mmV:JF"@mo9T[:=r!&q0lUKhE,nV"e>DZlHc^nWR(e)gZE7,X=].5_-eo"G6`78X%;<kidLpAu%8t)"\ZUZeX5Okbl-*N\!]l@2!$$U*'cQWFi^3s1;UI;CIVcs8jdu$I@3(c;d]X/l+BeaE*DOU'oX7H5c]N8C(7uf;[mhP-E9sA"B%P?/O"SHln+l"2AV.nl'%)kpc\&70f:]6=2#nZdWTN!k]-Q,g.?rE(D/jiB66&nPmf'-'?.8jJbP]p9d9/gYUsPAD0-0<h`Dm)F&S%FCgCpEj[ZI0K:W/NsU"BG1Jp0J81oFc9LO76f+2fp>'rX_Pbq@^V)ID,2%+g.;/0`7!MT1j6X4id1+g/;VR5VDblhDA7s\6_'J1`%KP.b_SW'#Q)YY?h^0*Zd,+obn"c@b(N@C.A];A,"H%o&tN5,"B<[HNV'3/3-]uI=%\J_AK=oZad_fi>(]lKpkic9;KTifO]j^8d\%=h,NNP6]fi.)l&2KgVEaJSrsNk*I6s!0cOFHDGT>/AQ]SJo^oTf(d$`J.X<Xal:F!Z2g*N!63m2*`g6F2sLS7L.[s>Qo#%%pmg3:%=b'*.))PDAcN6e/".6koNlV8qRKFD5qA,V*\4Nsin!3oN5.X83PBcR->fml+aY?q&aY)\54,IE/Qh!u_Zhk8?b3-Aiko[L$0B@TC%0ji'^8/,t:9DSKuWVnW>np+iPJ*^(I5YEOTSW!j/R:$\X2Ul./q@.U+e?J]DM(5P*<kk?SL@X0d(VP)K-L3\^]mc)LRiQpLdb]5o%L.ZQk?gQHBA%C2EqGt?3ngd5OKa>ak*9pkF+G8L`e^&GtfbcUV#MnZ(9IABL]+r4>\H][t0D\_aOmfJap\Kjb[nM+O?Zaj>Bk7_I%qF0l):UWVJra*@8q3@`2lfXCc^5SIF:*/D$5<!R8BVLEj`s0*+07"n]ZI6aWm`o_C9+^8^FK]'DCmT5[FPOQYam\7/3TiQt<kk?r%iu<6c$bh[?'FAksEHQKdMU__$qSd6nESTjrSXr.mn>"n,(VQe5]ZE\_iEj8_;L36RM]<OAV'bV:^Z\o#Jhr,c^Xk-m*/r'5)c(c-%Rk)OFpCM_QhnZN>Ej&iW)%_$7h[oPY"k9gp2u80alPEi"b^Fkqn+DUQeLtBkDm6m0HIT'G7$!>d?GG].rDM<7`%_*q^B([h`g10f%hWgG,O2]r@2juUqoNo9Xp[O5lY@$q(IY6Is2lufLn)GA\?9`?[raYqZ1K+Lmf.SP>2UI:AM=1%pG,WNneml5A0D\_a)"0>-148/b%I_s@K,MhZEd&B`,hs9Gu8+`or%=]JW+OR:3qtNWVL1e!lNOn;1hs2'kc=S#1fM7]on+B=oG5CFsqF/H4]Q\B*J$33UqO$Sa"jCFC%h<PmE[aUebUYkARmC)ngEnGa;Jgcq(-fb:%qBbba8%dG,dI+i5n+H!&$pD)r3N\6bYFdVTJ[bI^Vp19EY?uB<Cb!``9mEjKoSSVn%Z'"JIoA\jB:(D-Yq!Rg5?<i:H*@UHkIaPY$d;sY(^XnOA'V#_-f>InY.jZ8k3S]?a%Q&t8,0;"*leClV-Roa2p_kL:Gi+!H@R/qI%O.Rgpg_eW=>$K@ab[b3Xc$F$-k?Q1VN0HQ0)pTQJH$n"lDPs7Oh_Qsglt$t#Ni&WMoqtB>?p7S&l>V/1-d=P*q:E6eVKUhj.R:8Y%KDk+FIWjskDJ&3]9A4YQ.SP<kC`/Z<C/'D#c^Rkab"m<ZnG)l[s8K[A1\I:3C)p?XF8NLC7R,PVT!qHZ0/dQXLW7mAH2U;6^7;>*%T"6DqBr+$-kGS3Vm,rD!ot"/\Qu.::RGZ]CB%&`^>TI\*9W>AQ7eZT4mdAlVqrF=!]!!cNTd?+tlPJ_sQ^QXGj(:c+qn?<;<G+4d%b1?QX<;HL(-Z'gOVk),>4ko4)=!00Pa[bBfX2!G\32qGk$Z#R7X.4KD:[ka#5P\(K^4houfos7Q^7O]>Q.pp=]C>ZtNGA$cm>MG0%-i*?bBBKYl#CAbT,34:Bp80nlFXe'Xe+_P\9`8Mmo(IHZWnGM3\4eF,gWsE*QDn:FkoNV1c29-$[3OJ1G1\'#M4$]lr&cK(eS>.H%BmC0][SM:DCF;P0ZHD1KFKQ>G[fj)S7#?%2>Por+<pJ;tqTRs:p?Au)<3/f1k'O.US,$r=V.*5LSs6E:eOL`dF+(Z?H$u=-(3YY\%$e07nc)[ZWB[4a.T-bm@hE5\Y*+V++=,!j/6+=(JFnN+<^:`==Dp[=(7LkW*(TC?JY2=>Wk9T/9Za^h1WQ0GJ]UkVOhrIoQ3sM.@%:&&GJPIt7!34j&&\[G%X_CTl^JY0n$J$"m;Pa+TDWnidQ8rMApb3[FAY.QacrfkQG7/,l_7s;*$4BN.:*%\``&!k-=O(R3nO;B"G%Mf1p4ZLDOSlPoF'Noid_`U!scI'b:cGggEQK,hGZ:u7VoP]06^P'<3A.[g$lAEkB"[kAF@#EYn<Z\opU]I`/q="rlYOV.(nGDYqj%cTG,r-O2Y0KPZ<sT;RkCd!_&8UP;":'mbc"]Xi(mr/,>AF&TV02L%0mA.5,rU:e>]]fFB#<n&]o[8uRRF2*Y%7celq@80pW\$:B;%rC&7`(/a]ul9;s$W]eT;?>\Ro7fCkD88biT`S,@;E&#&s>^SL)gP,5co*T+4>M6TWJ#kcWh<c_6YLakD>g??9`PG;eD\3W?]`3#V%kf?%)QoOgDYZ!"Q(^QP)hl7?V9B7%Rs(n9UgU^C/E4WSW*e%.6aZ"@broucQD`SY:,4^MkHsV?n3jC9S#[0%F&_(*RV;J:O`AKP!%T2ikHjol[5f\d:s1bL8e]$lu^FlT3Jqsg70j>#\<WKaTh:+s@>B.b[7AaN9#ddHi%0BU='O(lr2J9%kDEb4\lNu0(u'hFs<,RV#i%5bS89]f24l_!G5Q'7=&$N8(P,7d5-*HbR&%ENKuLYGFg_\_sk+VL@1H;.]oDbN4N>enk.slYpcXY0k(\$&kFWZBRE]d['muL1dIK%o!+Wn4qB&iVRWcn(T<"(>sEr1I88ko*tp$NFS)E_>dsY-q/$cSM)S.6h^jm<.fcq:P2$IFgr,i.$_T!KXJ5i%F@PpEhRJd]Q6WgX%DRdfN!L'u7Eu89:anljt;GJKOLMU6F3[(22ra:3kpUksuMc00";0nnseln^:@PQVL.'IP%7=j=F.4D7ih7TPulm&q4n^JnHqNOU!%X"=Vb*QnrE5179@1:t4Xchhpn5fOV\HjdQ;_2+j4gAH,@)9pJPpb4@F;VC($B;*Tbg\.UC2m@Yka(l/#`TTLET4#LO5cfWBE-QH/%dPEY"8%3YRiAJ*$+'Y.%V/etRcE/->B,3-BG;DnfRFBBsYDHt@HBq\`W9a4Ub:F]@mptQAS]/f^k'70aimMCIk.cEf>?en"Q^nph%^9;oGk2Ha92;0T_T?Ejrc0tT%k2jhO:#UK]cYR=icIaY;rQJ#ecr>#qZ[]S6>Q-e?>4f!Fct3qJ>5Y<mGG)Y8n'0EYkGIgW\2.8I%ITnr`S<pU^ddLQ!;dt#p1Cl8fWKqCeOCE"7PJhQ>9!?8S?7.+7bJ-ZaVq[EYC9dC4*IiM.FVeZNL^l@*:udu+p\9i.E&i/tSnZ!#%FZ=33X=[9XV7A$JP.ILPf($lE6Rl:hl2'uOUa@\NgB4k-a+^n&]KXSYY2$cVQ#`eKS`9+Gk">cM]-LGcSP1JgjSpKdX^=38Qhqt.%oM?@.&+P1p]e=P*7cd4O\t.-pPKO3/S'0pia4BG?m'$!*abRP)?-!gS]3cZ98uWtP0lKZ7I=U<?m89jQa_<hjYE;:8P1lT)_s+k>%r/3TjlT`i9TBeX:a+9EZl+3eQaVg)nAs0gm8NOSjZ9Bkcc.29Zrlc)('ol1eo.uT2RDnXg!NONLFIDm^_,:N'k?2D:DA+kor75=h%a]a!aAM\BL%8a4P?ha?(KZ,k]W@<lu5G57X6le`]Og'n@AhNC'qNq(p]9T;NH)CLU*5<j:p7X?;=GKDtD>`1\a:9Tb/i"@%(2s/u%=NUJF2qu+9@am[RkVFWnb:.`Mps@HT<7ZT?7TJa\PWDo="4,tZcf)h)+2?2YbUbYEG6suAG<R?#ocW&o$^S#cLXEPBL28lWc[E-%%TOa&'@kd@AgM;H*($a#RJMYoG@k/eb`Sson;S[Fe3@ZSgV9QmCYG4^(@mT!&/@LjW^sD=0JE-?N[/'U3]i+8\]H$6sQcH)R:\Edn%1Z.FkD*8siB,,bk?a&*\VmYO%hW2u)ceJ;*._Ctp3g\"5`r*7u5/n-)b*->?E[3]^:U).ilt!T<n8\>335<,kXOQX_-hKUoDLV&E%*gE_UR9]Qr2Y#'fdh9YCgNk9BKqNs//FRn2S[@LX.Bk&2mr8J\pr1:#@SFT8&nas]O4]k36Ss+cP]F=b/$P50H4TT/b22;q1)ks)%l89bpXf#-AAA^-Q4st[l'$]7MbhU]oqRu1M3BS_'P>Zb?Ze.O/dS@Pp)m+DLb?4+dka#0#_>T&'p$4j,M*pms$(EI05^Z@U*K2uI%&TePP?Pii>o62G"!)hMF=bRjd\]4kjmF4A"@2Oe?L#>lhmeROlPoFZ(o#&SC%?lRP#p63P0MtLbOe8\T9>+>m6+.;3i]0*QbkF$h%$Tn2R%]5`=1\`D!QD[r`jjI\aOT(C<-+O)m^'#k>;;G6E\kP6#N7N#!CJ;0p`N@ISk'\[kc?,hZ<o:jl5<HWuc"qJDCb2OjkUpP9%p673Ie!HCXra6-_oi-+6\R[QA+p3HU^Tp((\h@o=YC2"';85]Cao%<8Udm/5aNDSSoBY<cT$!'J$l7PPZ]gT6q,"qnapo\'6ZtCV%O,^qb6/@OYYorQT6&uHt?:,'$"HN_Cf9!j<pQ+-dqo?A(:W\NQV,IObH:OBWgY'iq6:7ea(8#>gpi@dgq#9FW,Bu_gDR+l1^#R>l%o5>!Q<6A;Q>0/>_ff*g<Dk*Lca/T71Fj/8,+QFf6*I"#_fEb'mi_"<_TC;la<t=Pq%d>4!,u,'%E>\Yq=Q"Fo)"_0i$:PHSHu'47%kchg8:CeHf)i3P%'+_G2a1%QUik7gn')u>J2Sa`%#`=[o8BpQ2(E[G$4-fCHm@(O1'mnr\%/!VP4;GF<2I=[AAr@b!]=F`$N4UHV%@J.OJU)#;O8lk<giNpZ_oj71EI&KR$2O;V(oc2Z&Vgi".SPPm:5*oihD00/!A)h\1^2SPkk:rZs7(uZm1@T-lOiHF7+D<NJU\jin%^D/4oT8iY=Ti(cP5e>&rW+VgPc)a(tSQ+/.>`a8UD`%6E#+c5bfam[M%_N>rq$..r$p2`fs6.7^@E5urrm?;[X$$FK^lr1KC5m.n%JTk]*T,`)2m'qi3+!#S]lkk9qgV>V_^:1B*gHXffJYtT.SA"g0B3Vm36g2@VLR$r/ptDW/n(jhDpRg%#hjMQ0:6R\U@I:.$j+d*i%[+H(\8QYYigmM+jT"esu/S5,Hq/-$Lng^6;r[NA':;-lNFS]%k'7)oORC/M;a#h!(h!)_hf,HFa4KZ(Br[QFR41C)'=p7Pe!h,4q%Dfj$<j_72Pqq<e[m9iuOIXI?@%mVT^[/)r3TUul*\FJ2,"Bt,4OKd'lFsH/_TD?a4q'oe\GX1uZS[@2,I8\o1M8`UE\gq-cSst2=%9Wp9*NY'SEHuS,ZltFrjQg7<q?`)TB4'OXfJlKJ1^.b*SbLHo9)gD"&[8O0H.JAtA7Pg9n>5)p'b8%S=ae!UZETp6dYu4bq#b.hZ%K^<I9R1hm0]0no#5(sYsaV?h#"JtOS6\9ZO"OP<6ceYin"Q)(8MkNOX8YBu#R[n"8W,<T%8?gllG!iNH1ZFM7&ciMhlS@>SRbN$W%Yk*sGpiGES""Gt\H_1!]BU"@uj%i,Ij[U*^i:Zk!N"9O!I\g-sDngre\K2Ab+n-[TOe;d8=,L#)X+U\V_I!>SgqtWQFBju$"K"J$%0+<knYa.*jZK+j<TVkTkLc(l.U2HXTaUO(/ebh5gPl7!lKrLfW&h"N"`N7.I+jqA[gTtE2g#:,JWXu^]3"7YontfGW;N@+j>feE1%?A42f^C$;X_hW;Cq6PpQ:TKl/qPt2&EYuffFh&.]10bPH=%:Pf9*U[[^+(,:P]fZ30@$\>9lIR&QhdH"q3H[!c%E3)66;'KeQ`1#%LHH>T70nr#jmtKpa+ffQ\YP\?jg"e7"<JM^)^:=Pfo7[,$cIVeQlh4h1NI*)FT79XTQD9h(!QP3T.hK;V8U$iPt>ubccG\aFC-j7%,$/fF#ag`!7Ut;GOeWYX:MgCoo),^J13'kiJ*M=ARQ209Ec62Rk423&R<k-r-_@Vbdc,O[B5Mqam;8CRQRp;j'9Vci-P7e'Ic@%Q%Zg?G=3bC;<i4TGm`SWK/kje'lYb0+FBGKqdZ(D7>X5`lmEfXijm7L,Gc@_K;[VjC$%g`.O*MnhJ(5,1Ek1G!"aaG:D]WLYbh$<5p%b$0E]n7<Qd\E3G<]F,Hg[p<5Q*XF?9n)f_&k<V8dPDhDao05GbjTlBM=cdhc:=4Lb7FON<'.8W405h48Fni@8rO:B-F.&$GiaIc-%2n^iGU%@q-:Eh7Ylc(OefIrZ+n`td+Mt`:8:6MtX]Ejf54*l9I)NMYEON"6DD/?@76%RLe7db--E:Wl&TX;J'3HOfNW/,d5^t^_s%[Zn=nb,Q"O)SVeM#AXf->C,aKWkSFNCV:J.I\o<O\$Zmn?9=L)a.05(jl,BBP:)qcWgnpl25-51%F`GX]qQLFP^X@p;nL3DI,lfV%qrM5r^WFb],l/6InnR,BebQ)i.`s8K#5l,F2*S]SOSlS5T%8*93T#K8@(`V[aWJ2r`S<E6\b%o$K]2N`mNcB_ic7`Q/6cGfk8lQ`%Us#_@@6;p//3E-_G0'WTI;t<F>Lss;DPQLhgbFub!BtD(d*7$$SSsBfmdNq<Qkk4sYKHIu9ehnb/Qd(Z9)7u)E^pl:C4/_`NDZ/2%IBfTgb0q>19\"t_@`U+i,+sENOE/t_`9+dl:\2HehZL[\O?@NOreQoFHLf##1o=lNB>;!Gfj#^u0iUKK+C(6a&\WX&1,TD"l-=V\%[r\M(n&N\"5Cr>*k*@5Vq3/ru#OX6)#X>QCFjNl/)\SqZCk0j6`^I/mbp\oLc6?jOf%e2QclpSR38B;ML^Kf8,u`N7?d)[r3H)qG%,`A1i5JCj1:l]Qi-Y)jpSu#J*+%o!ZM$f=kOQ5j4n(n#WSh_n@86`Z:VXp]MNI'ctoC;P%9J<8D;Ye24/715LX\,Kt5Hk*r=),GJ%I+=_"oQ!!"3%OFb>'d1Ig8`]Pj?bR!fb@m4FFms&47Rh2c[Gko"%p>qmE_?Fe$WrT[retEh^pO[m];O58hcnRej!5M^<km:a#e/H%aCQ-9QHq60W0CGJ%MbKK"4(<eU9_8JfBqkOF/<GSWDZHT0=K\TII3l8fKS$Dgpao]f$<P\Y0so30$Bg_>H)^K\N-jp("Q\_papJT%WI)jEGW`Vd'l"X#7lBZ!-2+^1R4;?bRcagX4kpQf7!D,9K+/ubFT-WmK5j*@s#12^IHCMA5tjJ.ngBp6k#@WdS\YrN:F[W,HJVYr%W4OSpIg^A?0b!HkELn60Y]]n-"[=YNH<p\:1>q4gbo`O*illMYi#2g<&]?I3D@Tpg4S)Ul2#Gq$J*0q>^8-6?Pm&.s`A,s-=Zr5.%Z[UTY2Af8[1\L@fDJ^uC%s>CJ*D8X0c(2l',\+$IW[8_4+L'J@0g1YM7F5Boo)+#qr6)Jn^DuUc_7)Lo9j]Q7b.>9e^f\9L<W9+t%OXf#1I\&1>@iOq$0_fpaBCC<+8c7></<'Rd1:(u)cAuY;WP[<tNu@VISjW$qpmpNd_O$DKBT1)0K.Y:9.?Au*A$k#i0m_G3VpSSc%._S>DhNg*5iEK=EheMSq'!Ejq^\:6.7sTsdke50^r7q.+H+>bO=F!*Sg>[riTdMCreXe@A!X,);`Kt\:"2ibDLmdAhQD0YJ[_=CR%o=atJJurghr+MSn#!',CV";BS[1.??!nf?F3@i`U8I]+,$uVs#eZ"0>.YF3>A4@We:`8%^ThBlf)(L9-.IMbO6)Pub(2r*PR=:pa%Es1*lDu%Ya]M+t3`PR;7!-d[3_aE(H=N08ifiQ!VEGD7"/2b`,2laAm7\CD.lPnT+WNe>L>AEM"<%@<JPT?_eU$$h=>[O*;S-hGl%SSabdr0-LP)-TZ)o)6^o3k]P]_n_TSnK\Qijro<7_'(fGHg!YmKZ1KNIHl+Ac6>Ql##/a#%^EE1G&#Tsii[7ZMUDT0i<"A-DjbO;%3Qa*!??+fnX`1P!hk2j0TG9)!=_<1LPRmt$&;Y;W;-u9paN?"\6LhMXaB(D')j(9%CI1QWob\<MIS(a"7e+):0([>R3eK*[MG*'+%Y/oZ;XE:>F;9QXoZN:l`$>fbn792+Oi,8?.ZASIR3"S_3Y_n-c,U/l_GL76U2I&2,"sRW?<6jSpm7,rf"5-d5=?!#Y9]`=jQZbA:%%pjsfK#P8Cfd7D+.c$$S6`LB81X>!Y)J3tDUk1HMl#r$)V9g\YE"FNBLXId:&r]<0IY^EW;u(B?Z6.a/Bcu(7W'D-,PX\In68fSo%?@aiq$<MF\Hb\d>=FT*Y3Rq)1:0>W\Qf=u!T7fL^HKF^"IW7cmjMMgF=Vc96MG<\6(aKe#9!K3KM=6059hN,o-E8#[C7W!Mb%"!h%5-MudYQLZ8G$&"B<HQf7ePh/WWn(#_Kc)ljMb"i)REC;;4!XX-aGn7QMI>58Z9p&nAMC52cH*rK#)@$$9;D+ML&6Jcp246^;RaGa%&'L$WX3CB#XuDbmHMtCM4RLW6aZ3+DM<U`2:AdQGaf-3q'BI*T)'7+lS0<+#O95lin*:rq8:IiM!dMHOk<l^RcZiHf<`bnbg]Muc%a3?Q`!u2F@SO"Yd-t]#;<qjR#<YmE"kE+5B@9!H6;g;OD/blmE4%iMan'8bNF3K>$QuL?34VH)%"fKIFHTDecO54\,9Cr3cB>Ne&%U?d+e`W6S0&WPAa09986mU$@/a@f`,:B%Z^=Nj]#^B7k([Q8(9Z'JbL$6&R-lcq3cY\IN`mppm)CLt<g&lP?,R5:-L_OTd%/3jea%l!8o+$VWPJpj%=U,qZPR(L3^\md/4pG#oJ4<]\7sKm$EL+)8,uJarFb_rH5jDWL*9AM7W_VtT?rhg;aZXs<A9U$Q.JfFm32/e)RR%M+9W(f!nQ/\"C9&H@eD-Y56)N.;q7JTX08<Pc*81XRS2=2O>mhN<=L>YO_=,b3FGI]6:^O<fCTRYLNP2%lE83<jsa.=.,eEj:SXL%bAZV9*UoKiXjF*$T3Wi>o8okJ5-8('Cc)6g"ZlN]W]J=n%k9)Tq,QooF'LhWW0A26YD(HsqjI#udcM8de&/'Or)@=R@N6boL7Y#p%54[?$:^oQPeNI)Y$n&!.StDIoNq!8&d.:1Ug#"eU[Iq;d;_-5_Xt2f&Rl,220U9lajK.58Bk%2BBrh7,d6+B,?14TM2#U4%s7"LE%e$<GZ'jZS:3^O?`;R<08>+SA/JDp-b06DN:O4W5YX'+ifSR+e4p#3a+DCN8hVIcBmlq2R>Y`YNM1d%5E29@5]n0oZ[$h42hIo>1n%k8=2bEjf_Fk!)cW6O!nq%6sREb9$`_-S8!U_t;c;PciugV^^<)F/EiSC!AJTR]NF%]HCK[bqq`qeQ.&/8_%+f.sXps%DuCB1DQ*S%DAapXBU7m>7phHo<I.E*/>/bLj]#6C#t-\%LpCUS/6decHY-%#D,i,uj:kb*$,eM,98&Zmh1d)hpDfP0BIY@.*SO2&QB[S47A7uJ%QKCMIF1.fi8m0MuY#:'"l(iNd/R,Ss>>`Lh:eK.a8-eE&J2E/qfsVVK7+*o]]uFG\c;\qGPVP*_?45t5b-X0e:k_1`2-#PCPu,V"%9T;:GgGVJ+<.HsUpDfQ3kU(.B5n'E5A2jit,fG4#-oG#X<lIs_:/Nk$m>V*s;(ufY('eG:.GZ=\V+D#SVZn!*FBhLtd""Das%J$B%;bCG!`?mJ<Ge0:=%GZE$P)t2:-bp\r#n/!Y>?U4hP_(*BZh3m>;DJkM-\JTi2,ki;?npG2i4og*Qmq,R>rE;W]ZX`CJGKaR>qWEN%?[NIm"mJ]0$4r?6%t-/@);=f"<"&I1+c:$85)?!Q0'&;1-eX76/L?gB73O-/.0@mJbA@dHPC\%e0'j_MM]uAu=sSee,T.F!+duu3%/d1&6ma,fF/7j>KdFWID`kqtITER0(V#s&u"oX/*R$MG_7\gT/%/@eqi+jGVMQVf4m$qO*LoJGu@b=B$Tf%gP:6?B7C6E:o;R/pI%%Y[3S7#2$5@Be?'ODYpo.AU\_Ptr-:)f<m-"UKP&[VSqlKd-bGd[E^J,/fcuKoI+*_-k?]9&!8YWd\KS(a4fJQnF%i'D.>;QI9i?%U+&iM"98i3d"8pm^u1+[mG]NbP![.3P\o-EC(]T:&Cs".TZKi`bURC1;]eXC,`R\?JqSaedUPh*:*]lEM(!0E3tPdBH,-I/NUFCu%ed/2bV/cJ^E"7#E;GofEC:40n<T?F1^a)9[U-p.[crHo0#+>l'_o@_i2PZWLS4$bbTrD#$LaW9lP&3g)>LOSm'.lOtVi1pM79K_C%@ShTN=u'qf2DiD^-La"286'LW/O2;H,)#U5o:D,OO]DNO"es*oD,2kt!A,ZLRa/-:JZB(#0H$<;@8VR-$L\u%$%l&WL/P$Rb!q5c%'u;"i;A+8jjto`kqMc+-OA_bec_/pZTr.^B%[g*fQf)]u3hU3JM/!,A^I4FrL]I0Z]9Z(/!d(-4)WKs7#a7;GXC<X>7`?]3=Vg#Z%6<JS6lkg-8NA:UcA0[df$3Ti*"QL'97$]%6"O*PdbOe&%He@rc$fL<u&CRIL:e&krdc\CU]Fq29]&Ji9%Vl3s(GQ`k&oo)E,VjK+%b6(XA!tB'3<4+S*"GY]c]TUkTgJGS[$kk(NQ%Qdr!6qh*f'$m!XU6F4(_oJ,Mc&I\$E.]m84YWD!q0irQuuUa"I`@lW:^MHXt;t6%C9ui6%LhJJ[.pjL'aKrH!Yb^\JYD-kn3*/.d*qKKZ:ka*O<:/HMG7_d`R\l!)C(J@m:_0?WhQbT8F\u>+:W\DJS@+6!W[nu+ok%u%BuSXs>C]OZlB\Pt97_*'XB3i?#VgI2-OMQ#]j\2>'ZK3h3#rc+1+X5.WN"(46=:0NRd0T8JA<:pFQa\U0XO:SMTc\mR(A.'[>+N]%Z!@Y$S4RN4?HV5+*<[9\W1TOaRft[2Af\o4A4b87'Vl[a@cafr!<t?OXMa6A#k)e9,G76h//TLe7)KXKU?Pnu),(7(_k^R[+:=e`%8ruVW19c-DV.<_/l,3bf1R0C55o+LCA5EU88%B0X;hXFR.@==]RoV-l$t=ai,S5T#^4oRLA.b&:>Lq4D#Y!L%Yg.ON;d_WiY==&@%5V[sM#Cjj+@8bPlERINAPNdrs79Cq=#nYQr&B[3W6=idP1E\9Gj$Z]*F/VZ"'p#_$ON6S?i=[+!Yq.d")'lFRm<&B43O>>1"7B\8%;aC+(U=W\<MFc+g_/)$N]ETFg+q+p90M.I!Vk$`,Kds2q7FW:WCQ1q)"T`D[kaZ$<2X4<[@3%1`5Ud2:h:<8P-D1f*Ti]b$\Y5la%/g<8TBtC!r,3Q`O]OE;T0Sfs?nKP2,5^b&$h_CuU.MhYaTbf]9=\S<)(c%a#+JItN<0AP[5e+(M*2S;%f-QfM'Qcd*lXYSZn<dWt%Xs/!29_(mH,_T&23/rejCGMk7QnTAa3Q:!PTRj,>R*16Hc?[4iBT!a7#`Q,;c@Wi0FJK4274^%[_9eF`jt+Uu&=CEsQBFjJ(j(kg%Nl"&3VQ.#8A=dlc9^jl-."kQ/!%=n)UpSLfiJ%@X3(UMpHA2Ep/un/i^gsAF'D@LLJKp5kWO>JKWi=Ll&jVbY&`3a/)ltD'KE0P!%(ke9)/juVT<_U%X=TLTTUDsWd.V]TL!JBZdR#L,F<8MS)*1/P6&I@T@&L(.<^Z`t!fR9:aBN5BX%S0gS18s_R.[!@GL94C,6S^7H%Ki!d`5`LSrfITb\YLjm%)UQunEFCn>"\6NS\Ptm\<&'gj5a[*I=h7E:1"S6C(8bX.?BLGU9$c_,pC@&?ot]*Gi73J5""&o.TdpEB%a&`Tb*gd?>OM_Q5R&5D[Ks?C8pK\$T#cR27oq&`e2,h7fG'\<aI=3u3p&cDU#/0!CIN3OheVMuu&2bJZ2$3'$0`3M1,MeMG5qim?%K383%<*T)_,ZP,.]or+(gX*U0^t@+i+;dF%gCjYkWt@hO&n55c:f/Mn\ci;;!H,Ru#"E&m[Od^G`?ZsC&Boj<;(rg+_dI/1>G`\L%\?J-L1-K&"@c6Q]YRL$Nd+36T?l"d+Cj<g)=Glg5LVZOV<mcUTQj[oN?m:D]_(9,C_\N;YfUQX`&3:0VAa*YQ%$I!8&-`dk4:LAh%GSgkDj2O:mE$8@06h>uITF+iA@;nl-bT5hS0GiZ%_-@ffK+VaMpgcM&Kl2^CHD4g"4-O'o$]3Y2UL8L44dc1dJk<l?cTDPH))OB!%7_p(3&-[.3'r#)aogRX8-m>U!Gp6W?N5h#c#`jM0(_L?o,%)0)I&\M]^rRYODSV1W(t>i.!CO#s<1sT'NGZ0+0H;O,Q/DZs'?tN]%=XO4369*C;KEo:\(_)#+&0:hhp(Tmf"MbQtc.%CH(bY>LL+S(e3<'9S0C6Hl@VN1\5X<g6+TR7]<*3sr#JaSjo)P.;-8Y_R2faod%?n&Sc@sA&_/rU%Ni-e0C6bu,ombkSU0U+MQFPJ=!N2Xlc!6g/,!AG>0"(55pNJ)IA>F](fr!SWb:^oF=>f:pcX06k;3<<A[`:t.8%0lb>LAWb$J6lG%TYJ0l2:-a?jadPmTGmb$q-@$*F:aIT:/jqHCKS6F_nKV``j"j&(RC/un3gDhg1Lf+.ZK5h"#Jt!^6rkiBL:=#s%bjL^opo1i5;\q]Ajtooi'Qlh[Aj5J\fX_k#e"(,(U`KMr,sn8Jl2k?X8TWN:FTG1=oEdCR$_UF$6`!)NHhs5UQ5m\N:K(f5$keC!%'LPbe;W<;,k"KHQi+RZkHJ/JK8An#O.$fVEGQ2V'#iZ,r1c#k(kf/r*#/)mUK)d7_Q2nf`D1d'o!3oO,KV/uD-6!ajS,f$tW$N%n%L\_"D;nO4jf8:MHg5nfaaI2Lq#@Jr(7)kLAKm/ftci_(L)l.XM<N$;&@aBj!TeO7+PU%aIL1r(hKFY,9&IG-FS#XR1W1"nscipYm%q4)a2VWFfo@\]-s%]U>iY[%MjF!Tlbdo)"3VGTW6APMcR*4Q-/GBDMb#6El]IuOiokUP8YOTSJTES,hD+.BcUMn75c2$3&9&cb5[%K*aK=.ld'N+9"^>5m9`"?k!09Oie##fMT&M+Y?>JJJb9&U`UgU%YWO23%/Yn[m:J;BR763"a:<=JLb-l5m)Xp0FanL*LP%uAQ,MA%%>i6.@?WSeK^'5<jF!e[JOA_2/;fju)Mj18ppeCb1+<BK2D!"MT^Ge\@Ud!?OGcE'8lp"<9.4B!>ma]GXAIG@7MUC<#$kpc2NK/+%9`Qm5L'(DB%LB$>g12,[0WJ$,mW)\:fn(?"m&qUQ0huI<qaSGj#R8XV'uN,W"@<]%<F%.dJsqm*780=-J=9D=R)anh5`q4_m!:ps%BdQbZQ;0K]+;@Bkr,*r"D.!NOf$jSf;uFC*/#^fh?1THJ#!*%@'7KH/kc]uG"L_kG0NNa#,oOUl%SYMEF67AW&PE=Eei@55O.IgA%OG(FVfqRSuj\;GA]AtE,FCH.T8N4qGJJ"7W84a^GnM]gN4=+9b\0XQf)7losP(^d1.NOUI0%d>F/Q0$:q[c_gA]nW=rZ%"(`YYoo%26[6dKBu:<FnC&@N'L?I[0DGI<g3hUe4MGA^i88NWJZ<ZeDFSg`\mp^<D<]b2ohW>J05TE[CB./,J3;1#hd\I!QC9/Ou,`X#ad/f%cXC@FRuZG8(Lg5C,6U+mPP'XG=T9:GR'%s(0&Y`&,,K6Y;PY[/Msf^?kq9bjGUTSbrXAp\+jmsQ3tMK'1'dC8*A1BM`)/*>`5<$p%L-s!Q`dO6T1fUa\mt$UG'1-5dcq=OrK,\16fsV:t_f5r)!AHd_oTmp9`=Qet+J_0sSc^2AUJMUm<G7Bo?;go#]SqA!X2a$WlnWGp%d0r>ZQu`[gD=g\I$s,,ZK7]bF!n(Vd@MN-NQ"_DIhh5f.1"b-oA8h#J.qC4C]8ZVka?CD7pH]M!Ob,rXA7(=q=Lnl%+F@_9VPZ>7%8YA@nA*Fg=<&M6k<p1']7@NUp(j,B6X4V2!&;)/mXDCDf895"'$$:l_TI$<'mZmp:0l\-Maq!66j?PuP8N,HRaC%&M6NNpD^'F_0%KOd)r^1J4lJNtbt)[>]#NR;kL@\Co@YkK+S(uZ/XMiPIOKJb1;TRgYj6Jp6K9C\=r<7qeE(c>%@ZoFWo+X63'DVu]#,Q7mATbE6b%X,7:Y>C+(=0u[$=V7=hQlD>Np"99N)(T*D`%YT<?gb+.?TUE08e&M''J:O\s16.M8,Jo[7!qboZJ/1J$cNBldRL#U%_VM035R76S%F?h)Z=os6gQ&,`8K@^*#a^u'd-59qf8qs9<E,1ZV,a&n*dIYu.M?F46,p!ojO&HY0?"f1t&cj5dN.Wsf`SWPI8oPB2lU=19Nf+:o%E9TY5bB8gr8<QABQ=p7,+COg17;p@)Bdjl<[`iAUPSYT:e[uI2U]DPR#1K*a(5<:(O4B@qg]f#CT';NAMWnYJSPmD>U(FnLi^+'b%bEfm*^d'X&XW/T'63L16^J.Fhq/<ju-:sNbQE[(;BY7aoWp'[(QEtDN@)0jH7G">0doO-nKBrTt&CrSe$_h"4+qc"A2MnH_k"JEF%>R9)kU.Vjj$J5,jMnV^P)$GbRV?kX&RB7E315.usl2%]#Yjj'&"kF_!#Dq0S%JR^fl(H[>\l)-60G%\S[+&)2!<C?jkR+Ajb,gh>%dda3X?Q;DiURRti7Q5,`JMiFPo)4k3hO"Bh2R0.u#==`'*(Z2EYEH6o%V)Q`17J=.RlYHL^nhkZ(!U8>o*iJ=M@tf_5\X@>-)Z^Y%-F%E4=3,7p#=<DX3_h)Wr$*p(_,;Za)O=[*6M\YN7H\Gs?^1mN-mOGRk<Oi/c^:6?%,I]ecX[>(+dQS8;5#L.*5VhNf=ZechC;g+%('2@IB3QN]hpCd99psLcU=?EH@ECBb9$NU-TUlk3$d#TjW+n\Tg_?"=QPW+kYcb:^=@Z'f7+OdOn<GPdgTmW2V4_hMON!Xk#Zp.4%N2g<q-DmcujrA7+ioHDFct:i'4%DF)*u_c@AD/,`/r8O_6A&!6(0qGp94@0ae\!SB9NZnO2+h2\3V(?$j)rMS:2C)d9Y,qPiIujY%`thf<`7AH;[3Ul/#Jugi'[9iS!W1+LO]@<$C1K2U"Gdarm$7lE3^e=5g49fWS\QpoL_-*^i<]TI/eO)l$\0FX@G(i@SseKsJPj1=%"ES.6at3(+8F<o997Y*"=/,">&`T4Ai[n^lOtB!7ZM5j#6NVr$KFrQ8'(BFAA]V=46"d8=+p\`HW1oUn*-1nd8;JsP&I^IllF"5l%(u$m?!nhBe$3A#NZn&0WA!<`cMG5Ea9b)j"WX**3J#=V?LMh0nXL^C]1'612)LppH<`ND__#6TQ05\",-bqRM<?LQAgpK_O-K#)d%5j5(.%XEd&E64'bcEn9&]Tu<00gbsm^bC;-Cc5KJ.UjR:E*Wis*++pfRi5rcRgL;W#%i^GO*b%B@Zp*_*.fT[\6W5Q9Asb`(6C48%-p.K.-T6V_Ak?C:&;\BT6\qHU<a)a+#Y^M3V<IJ4655e*s!"9bRDDSTA3rGj;&X:%e"@D@<:8lkK[J7L26iD,7TYC_7;+&g)jR?M%"BhbmC**M==9OFFr[*=m=gu&?*/FpY]F`Lp;1)0;_=WHfe#<$)JQTA"E$.\+!5k!GLPUY#=f21c%Aj>`BXmXK+`pdB&j]E4R@ta#%2H+a1hW]d>fTURf"@-,Ms/k]nG&0a1jM%;dTf-.N,NBfLPY*/c:]V1cg'`n/"sp4*'M(Omrk6b(h8;D$WU=KGL998`]5]SNj5o5q%X.mC_7[!"Dg&m[;YBgAqbV\83^Fm'%NKgI0L,9/i6,A*RRmODf.E";A";p4:GGVAWLrD>\@-sD+qT4p=8@\+ppf>L)n/E9ib:Gf`%@e?:a#CT@8bguCrPpTdc`0_01m(Ro<GB0+c&`e=m-RnTu2lsDR&$k!(b2iPAJB+bb;P@=jB^mXP[p%7@QRQrs1:52uFVG/;30;^i%LBK.Q?VgC<ls)NUPpR2m\_CPc-!Q`9[gt_,Zu[90O%D>oWru9)H#[4SjajeeK"M)Hk6eNRK>5%`dHH$X1!qWb$AaRt"62E1%h_GF%?=qV0oZ5eR:@G*NT;FQZqdM0tV&Xk&aBp=G16.BN>jK+*!b(:r>jaIB4qH94]rLO%8HKr]-!+oHA$oD5b&qm7c)$8eGkN`Y!AKpt%@lKjh%&$XH)dpP%JT0KNU`r9@S\Kdr9c>b__M&p)(o<aEEm?[SUF`+`#L]UPf:r3qN*@#3rBNu/&9sWEF0V$7@+\i_57EGUQl8]g%qdGp@ojmd2?c*HrjdCI3[0O*2Q5u(a+O,?r^V'bD&(T!^NEbW(6Gl=;jB0AnD!a)^&qC]6o8Zj$hUV*#A/2M[hJ9+UmrU35#%SZi%*t]b!Q__CN(h:0<e=A'p8)t#.qfo.\OC+tK^tRT0X/ZJKc$fZ*bC$r^"=koh#Tc+f703S>k;oabn<_B6N6%hHqtr)']7;$]J/cM%%/7t!R@DWM\"k_n%p_q]np?\<QcRUQV@W.8&#IDb2Bc%sQ_epU+&j.:%Y%u8A0Wb$6mqK^@pQ<uqO&$+=SV@`?F3L8P8"ID4+,A]#%De$K3V`]>EGMM)po,R^m]VJk$$5q3Ms)hep`g&(=C_'(cf^C8D&7/6\&MpeW^d1)2p+CQV2>qYA2eB[qM?jWG'WaYH]t'\YFdM$-%7J-.@h0QOs^_g\k=b+SW%g[9!=pY:c$`/[Y;21@cO:+tF0r9EU4R/k.Zq22)BG"8BNiI*VF(J8sFI:u\mrBGD[0UbKa'YZ$]1*XU%+?[Ap+qEar2<5W<c[b4rZ-3tfh,?.t-[Pb8JV,^bJjJ)Y?+M8L,GOa:]9dlL7XGf2!Lu&1dcq`c5HsS^aM<d,#(C&fC,ltTX(3_:%K0*[S`4H-JA\$.>-nN`RH@C9K`d^pspO/b[.N`#N:l1^Q$O.hU2Y?FaJ3bDInb6B/pA)t^IPKKEh`#o0+Q>0PnpoP/Z>LXJ&eAP[%r[$J\M6BbkP\pfqE4KC>=4(.=MKE0b0]')Ie+[lrKQofN/Z&nNfirK.6*dJ#D#ilpj1P]9Cd>)Z&`M=^^FNb0%S2k$#ek5a/d[q5%Xu<eN01L0C.j:t!0tBC_im:Tt"_</Mh>:O*@\Y3h,9M"Z;92kULp($(.pu;^7.7sjE>!.8AKA+O?ah[dpPN4[UGJY[2YjP4<UgT>%'&bc<8,>DrA9ns;%;0#sXg"((\A4:824BNgqfK^^QGi[G;75MI&:`m'V1;`7GRA\jh=2bN[-,d4[tK+sSK`&;FbG1PTs3u&?W>X^%mgT*kk%VRSi/q3t@LO^a?VPb%`\R,\%tm6Z*2IqT0HTlkm'N\$S+3\mX/atn>`5qhG!Ae^U>%>.-+%-oDXJE?>QdWbrf2-+<0AiQ%d_c#cPKQ&+EaL5NFWaY8K*4Rr0+2J+JX)3LfC8;!I0b(*>de@aZrJe5&B8EG2B'gh8NrJ=E[/0m3-=",iD(Y,i@netYs]/fW2<9n%UQer24cjIDK+rm[KuTsel$VA-;I(a\+>-+6>/45QiKKaQ?6`iC"q$_h=>R-*)nAah*11XtNnk5j9B=(2aCl]qVfY26%d1hJ-65O/%[_O,.XV3sAcC53\7\`WrqOj^:ghR\=CCI9p(f?WW",?Sh7-9c+'5qH6RU_s["H_$!AsDEt"*jA1iI]GB,pRWUJ\;Z/h_Yf9elI"0%=-9V,5;pK;D*Q\BDFf9Nrlp],rt=Yb7o_m;9NgoD1[+cs$X%B6rB0.sI=CcE3VX;Ti5R2p7uj;8:$"G7-[jB))B'=Em;U([^Z&.L%)AcN%/ubCN6O?n#5d%7i'-52i325[srCl&T8H`=KQY<;<]QMo^jB'PY72FlLeHW9L'WG%u>B!=%$<'2`6&\jsD9<L/KN)Hof5NtZ%6DLmPhhj#Ha(@&r,V>e2BN;\s=3YG*,3o/U2sdda]OQ[q[AkNIC!B6;K4lOf[U_pC<GPKJD<<_d5_JqY<-j]nj8Auam'_;n<?+h.%$\Q??Rj'!^Hq`u(7..laCAgs;7538p6E<)-KmF7LOE(Lm#'/4V6`YgoW`f9n!]"Y%01r6S9kkg/8MbS46=m#9hffM7b`7p"CpY!m%PE`h[Q2J+j/hf`bmZ+A-'PbQU5Uo'BkhVq`P(\H8ao8,FTAMcu?`ho!:[CZ2NV(cNR]@:bmP!B\L*RW,\/(BBP\L15c#kj3j5sKd%$d%s)AFtIM_^J1N:drmLC/qpBOh!90^C'E^VlOIP=)BIU<NC6X/kLB0Lkp0.&cKB&GPCW.8r]rj`S_e0^(+ilbf>t796LYFWjoE;%<'ap,\O)F&]&<:f2.V5RX2d\4GPYd:"185P4"udrZj%WC,10i><&'I*H1I[QR.kq)c[@)iHGD"R$f3bj[#F%$WO+8&NWQfRki&m,%pKhUP$H[F4bRo8klo;s:.>H##j`,$hDtdo_T[q0;O%-b5fL7+"5(D>%8U7SSJt+><8,CNcd/1'cBmG+kG8[[3Dk;]Sk@d.VBW#8_%[c@`_$-q.eUS0uYh(NU*>6`urN`L/5%m)lt@e^91.?/]T@]km/mhls=%;QJKOO\b^2.K;d&2EG5X5mo1MWLbWc][&W=Lniqf]<OX%cRq*3m8eY7/HI`J&1\\23:K@e3%"IHGYm!q]CuOf^.k[<L>ZoLo"nV!+VY279`0ulWFW/@#98".opG/?+C/.[mag]"jB=*o&hrT`%13-iI[+ol>NWs8djEIq7[0LDG1rPNQhW!F]1&pca@(9tCAQMbk-j!U5-F?hk+sT*aS>9/WC3QmX$-5738W6Z0FX`i=-S`6$=/mMZ%T"BkZ<BK\a2!4-_@>TkclY.OBD%a6$['*-^e!*Ou_Hc7f*.&4K]lFt?r>pE'f]P3>e(_FlbU>g9in(YVs2j.4>CP%rT1_AbJF!Q&%%Rp#J.s[Gh*;bu6,baO]&[CP)M<FqK+`=.'?\`PO)UqFHSQKc(gg9aB`j"1;FA-"Dc1Q4[*/cJ3m=Y0QKOf%7c:d/?QuJbR^0[9)%J5U:!2'[.BhSYI73REM8bn,6bOt&Jk>IBA]L#55!L(B6B$=&KVK0pOQ)3?Bk-3qK/(tTZ<rm<Sk5e"6!RU5"rp</!Uq/=;L&5tp-%QX^3^j,dVCN>/12OJe=4TP-V`@^Cr]YG):P#=8JZ:b4^8d`2p[T(]$KGb9BKMFAl=kIJHIl!%Ii";S&1=!7YgE1cPI"Ijk2R!@oS%ib?f.a4("p:-a1<@Ya6-Xf?ZCpO`NV0#*4!Zd,2=mQ?!TG5:MXH'@&uIELTJrGC^/:#YD/GMH<!JR2bAP<.XJf`!HtLS&]T<"tcl%)LY_jK``N,M#Y:l]*]`*4D4eHV?Q>5M@04^9/:goIF?o[cAlE<7uCmJ*n]cI&m\XuS6u`1i8K[>U2`;S.XZU5:0"82p;rnAFD2I5%I=*+=]:ZhTEs&c`Fj3]_U6![/+Asl2&7p]QTQgA&JKA5om$_iJ$:XP?=Nf`gfHm6^?#u'Wa8sh0WRr7'RRC^T00@2EQnf/RCLj-+%"Y^U<KoCj!Nm(V1NI;,?=q:&>f@o%&s05Zr'VT0dMnVq[X<f9E;6'o+n^tXMjs6/<-.AG=l$DpU4&CArU\YJJ6VjPA]B)o2moVjl%TlsqgN/^J`#Ar$(@/&bQ_t$cpUNdMr0NttR=L1(;!oqBXMP1c*QS`T52OK#fbh]W`].l>+JMbUk@Vq2\HVGt)b569ll\aYIa[m6_%6XG;u]0N)9=V42S7h7CBH`$MC8e=09@,qS5>H:r'53X3ZTKHbK`jK:YYK8`/fQGbRMJiCcH#3]?WM1(tBh&NrJaj-Q+pt$7dm.g0%&s*Y':<npQ9!^RqP;]/5q18&U%Sr7_3kWa5o?\k'Zb*mmF+0Y!Zi/ZnrkDh.99)EMei)W)r=q'*(FKcY,gC):OXjES%"hlH+KlWI%@W5fD<fAJ@"K6ADBL<ldbM`]TplX.H[l%^U7KBI'"&'nMlM-+"eF=/PNDXZ][3Z.6lk&b*3jNb[,U2p3%7.H:BMj(l[0M5m\)m:.%R-Z*8s4fY_GoT)gOB$BS%\Ub+G:al)=SN)t!^gJuY;0T<<qsSce<%[hDa/^GV9c#BWImL\IKphccs>#WiL'5Pn?g;6J:q,f/0#U%%UmEP,cC>r;3\jXs*J;U,'%/#EH7XG)_>j\Dqk2#7lrT>@<d7PraTe-^U\=Klm2XU<a\$4]Vhi+<QHM2eHiJ8j6e7`T59O-`jk21)%"H;H7PN\b)I=jN>ej*YXrEE<i"FOC2]fu;1hdLYqQO)+O&2oCfo60sF1#5r0Cd@R7pLXLl&Q7PCXRknc[*X=G@GsmAHG[PP=BIP]%S\QrA]l6fB!*+9#Um+W-H1>(n5VRHJRT2+>XA_7@K`g;HIbqm2XC&H_RjLGXTbVS[V][g.#=L(,]tHB@^UcrmjRLcT`NP#)[$CF:%&]*T&5\Sl"Mn_VgH-PNY&/)okAg=l`i44V:o;0rVZ!-#Dr[dn80F":D5m^,neZk>^=,9(es(5-ACOLup\WR2uBmcH_eLT3Bi-"9j%XGgQfOpeb;P]/3'e$,u#XW#WMJaaaLp`T?\Tr#.Gn%d7%Fh]co<H8[-nj"8!MeXK8Oe-,d![_PEbj)OV,kFb<KN6&N,'>&j1`74*%OASrmK$P^jHC.DY-R#7ZiF*].oQMO0ALgrlO&h,h\Y:0:K'E1br2qi@*ZDqIeP#f$#S(G>JXN$_85C+UHSikU!3;@cTdNTjV5nQE%PSNAfX!l6^QP/82&7T_GoHbs"(7q+n+C%1K1fuEi'qn?N\!fuh:*SgIH4Z4/7a^*BL4I$3lBZDLF-V`bA74mG!+?ls=_:!RKf.)^%#fC&5l+=FB$6=%mg.=^tmlp;R'2SOY$\:THD+N3nJA<\+pMr!I(!KgT,cu<b>/ni#%QO6NqIoDLA!W;u)*C$8G)lmgON9I#Q8[Id%,F1l=dd"PjaT,BlZ%a79)-UmQot!no?sMRJn%.$Gs,:(/>?jS9;W>H3aN6Sj]1'?3[,>RiTc0;tEGgU<dhbe",tH<(QF!8r#GNnJ%4)7Hp*qJQS8\G!"4t"oKbTtt9]>ZrT]0nqJSY8q@B56RBOPu51$t$LMWC.C;INtC1YQLSI'2(S:RU]:['gEoI9+,G.+p&]*!3(+j%01jCbi6UV_i'p4fU'2hc8kU:PNdb5=f<%-?8s?`aaE*U3390:T#_sUA",1=m@W\:\p)^H0nVBf=a?:U^o:$dTQ<3qDDcoYJ@mCZP%,s!LWi&^0pP35J&"G:.bHfF4Fl.B'*M]_P#I5'_6oZMq=I`W]4@Uam`N0UITm5>_\"h^!ITD]<o`O?-MY@B("$44eE_m(N11#CP^%GMk4$l*V81&,*/bKsB1&8%WKna+7Ji$>_^<L,EAmH$aj*dYL7DcVc;&f2)g=33811mJZL>aRJ's:Zd.U6/q]gXSrT-*iVS+/*"[a%W$RZ0LV,r-LjmD*.b377HA-K>4-PW;:5Eco+G4"U"$m@j7RT>3.I:`u/'^F'4M"C!C\@Waq,JS(@)_A5ZKOG.-J'U$&F*j@S'_ep%p*I@_[mIk?,4b8Cen>T8O>,%BQ[gY2EM.3.HqkfjjX0H>3BJEG26A41&S$=ke1;\S/ZN@=;E75K,V^"oGBFop:(UTT+I^:fYUT3h%M5>f4#D9(hFKqZu/^b1J9JT`kXTn%2n>$cu#2`KXqQ#U\bp@ADQ.9>5PlY;SWZa-ZM`RstK(cmDItn-9o!<_X6X<eEW1Gf%(Kj+.%9e2(URYL$M0nJ1cKgj_]>-C^Pfka^+<d\8aBVt&3F]f=Jb-Kk+`YaniF?Hmc!eml=h/Q:241!OS';Gu(B1Z_!.i4VI@4?\&>GJa\%gE8rf-=#nfeHiNGA<^3:re!6W.m`QnA:O&342;Ab^JS=E#RpZk37R8W=E"#_A7m%>kMdj'P\oMKa+*WS(lVp[lHlW+k,ja*1h8a'%+:e`&$W5.r?WkoU*GHpb<-eX5Xo*Iigh)9R#ZXqCHLqrW,s7?\41_qL3U<c"eVq'OXDm?^i/6kV>#_'qU9FH=$!<O/kT!RA?2@a\%itYU:K/MprdC\GKgpckNr-<&&iMukf;SoYK=d8XbP;8!rA'pn^6,XPh%k8#sIGp'PlkgdD<12=+0%<?bnPWB,&1)Ot)dp.D86q?P%Od\%,f-[5D,S;-7Ck/+P$E-ctF#+8>FWc%<2g26'bA)835M_W)#NUKVlBNCtAK]:VfsF?teKM$Eqc:Kcb:oH&6qmqS"bjBWW/.n!%hXHY\/udm0UQ)(XhHs%]-Z22H'J4h3AhG[(+,[i`8QJFc&aS&*iKH[7c_qLjOBWj-VGRIa=.%VGe4u.&qW0fR]Q\q*2OtE.,<nVR%`DNusIKMHJ+DKnm5k'hN?eSN60U5"s`QFZ$Od8CfP/<Goc0Dn8kase%$]pC;67WlsY:L?-U%iq!"uj6dXUAZ;BIYU1mm_!a<-6$L%PmjpmQ1;39#SW&TH+Xp+XT?o.]mhi=mgjaaBr",I#]%Y4n]kE$Dbl844^9I,<jJe[hSVd_g*cFA"i>Pu:eRsffIFOrP_%//fE^lN%U:>YfN0)ioE2TSM#6ZF>^18ae>%24;BHp-%$+csqaa@)[e[1,fCQP4tC]&KD6qIf](Kkb0N&OD.7$mmjbq9@MX`h2FE3't%i8:sT%eGI-EMo]/#9kSbb'bY(]$M,Y[L@#;7<a7=d93='Mqk3Y`M^qm(>c;(NLr-W*'d\^Vrb+8H*>oIip$iYK@CaF2g'jGODe%1h@s]?D%.(.\WX9fV2%h%QbBKtrmbUbK5`;5d;H,:c[fe(]pTIMPbCPI*E;0`X3=Z&uF5,:/^;-V+ZFcg!cC*M<'O=<=\<OQ(j8-[8;)G_20%:B]8.JAB.F@V-+dDT,lhCuoDDAsD4d\rmt6;lc,'WY%PCP?p8_eK0>h'pkL^C6JuI3K&HdE==d\4?S!XZ<@UB&;-5MGt_c02FPP=%isN150h4C-)[B@RJ?Yi%GSh<_k*Z,8rPjp/Z!A]8`-71.OX,Q;IrO9W9#i(_/"=R)EVKWF*/0Eh75q)-C1Ff)qA0Z<%tO@=Ogisn%,r'`/(Qh4HmR8$(HnIcBa7OAW$E+bpQgV9P*Q$[JSI:S:YkJg+1II`eiCn2F$;:7BB*unDW,olT_#OR)5.IdA!6AC3<RSjDrk+PK%X-'dT_i.RahL%ac\(E&_]#B*PV<Jc`/2%>9?iB]X=BJ"kMr?e$U5ak,"=j5Dk'pN'.()1CfUJ0Xpjb&i6jak`#$Z>sqCKUsE'5=r%N+K?nAEbk3a8+3.8[)DVV#[C-0oq-([E#`ma5U_J.2R;X[UJ^4.j?uor9T6D:gc\o.cm0Z1aItFGZ7c04@f*s6/:d>kHaBqjR0,m%+O)P?-O\+/?TN^)MD7/f5C<EBJQX:42?33W=pTFA6Hu'8cW-;@C1RLHjjKtf.*G_rGnokF,G:YTSlsa\8Wj/U.>LX$,:rtq:V@\V%6liNd4+m"cFl\056Ed0`CdTBU;#>PIS^l,a&2b!rNCYGmcd9hO]4e7;MGu`l04BM:,\&UK*m>3-9<'1cALj_]**XjYVrJ(/I.pk?%)1@O92)lgM_R'CW+qo',V<j"[[#u?rBZ4`#&]q\\dd&<OOP,L%dd*iqm\<9iE$2-IEEX3t_4a3T4b%e+$Y)TuPH:CTNXo3F\%311%P,-]LoFncZ6IF[>#0DU>6.,?SNnu[O4D8k[Ir"9V/e3WSdHOcD>1d#KNd6>-_ne<ueMb1/]/h-oc2rWs`Ta=rU.F01>U*8]`l$%%%ic%,sYSiT.U=^o]0>.qo.0hI2'`fTV,9=RgiWs,G;AkbIBmnK`Q:Mt[*/,Vkj4%6tNmS9;2M+6u#Jg7s\+m9^RFRoACZ5gf&3[Xk%]]D-3D#.Tc(/:ToDb6QlTHK98P)o9WN7:>D.@q+g$unB>4)S.5D*L-1DG5Ppc\m!&ZV]<%._FGgo'GTd'ab<gF?(@>h(b8])/S#@%3d17a712jUlj6tMlu@&^N3qN5#fj=-pOU+C$D=f-W:)IadMnAF/\]7P5@_j!hcDVJ<NjhoW<H:'c98UN>!A"m7kt-&9iRj^;=4Wk%X2SrB4^`@q&h0dA5Lf?c`Zs'AA9gXlGO(7i&ZPiB*ol-s4HbHU0m^oo(d;CinFs7f4m'b1@)uR9Q&A`AZ;:.m06+5U)^iP8A%R_S%'nJWLEqH+5WVZ>pqlf$`1hMNU(7u1kj0?`[7r-Y9Em?8#d,O"JUte^Y"fdG2U@D9TbDBJCqT?*C/<"A[p4AU.44:P+:)qlFL%0`q%i>gCgIJ+WP45PaEA.?0.Oc&<e`5:JWr&1C?"FR/%ZK@+[Qij*j,9Z90Tor2`$hqU?@r0$U`DCtPaR$A.!0Nbc>D/r2\(j>$BW,D$%'lOKq4IRJM+@Q0*r&S;`$@qe2,3k6rR!N9QAFO6T/^`jH!QKB\D0KU$WHag'NZZ;p6FZJ^\'(hm<k,N^mQR$i[$i4#A\sP0;s$@/%P^/i_[k]'X\HTVD=2`T;6VBmd@c4(sb,<8h=IBnDH8&``$9m5oj1t@$32A/E5).dI=f0&TD>P'[PgnZcX`h2(@/g(D%gK-!Ca9f,%$Wjrik.kXC4-@Cl,%sHLEND-uZ;^]joZp@?,XK%f?D&C?]ls9cW&*S(@]M!PRI-[K1<em\*ZAFf*ksip7$>-&g$1h=llB"8%?[Xp%boqSc)AIQUlr-iD,(2<7G>[fP]e;XH8?D]%3!Q;n*a4]$-MT73BW@+?N4A^t:*fLB<jn(OGs41C!_BCF[IC5Xk.no*6[G[ko7dOT%po=.'!j[52Nk(2T?R=am:7;8`0+Ec'=>%EDIRP^N[t.=%+PTQLR!WQ:r/$SMgJ,RE/m=gq!Q/&L?BMj6BHA:gMmk19Z'_"-+QfO-%OIl&gd#B#,["6*_YX>`qZ;>_F/rWfb9lj")\nM5Sh)*FkHb*piOHRr2h))dEKAJ8kBh79-BoEAS1dH`GHQUO4g<ANS7lYYaG-hTp%UmpMW&,Rchmr=NK[,!PD6rsSSMb+EDK#.'0;Lp35)F@LI8"2McFo_lAX)Ckk1c2UBCki9tkb'3&Le+)ANT`68bSFD;;gQ$EL>!r;%.)QpZJM6:geo0<!\nMXBgbeBoLgCu0dWMAqKi*0u[[/=KlD<G>8FD=kY<BolaC/rH**]892-nF!'9MUX$(,sOKM\lW2[r89O!F4G%[[.TdCQ:7q1?if;r)u$R6.*Ji\ekLGDOMcnn\JI,Y%fBugOK8T<t/6\<^l.nhl2160idPe9%_3_/Xe7\5L#&#:D4<2dfa@]Bn/dX%S6>",.J8&7%Kq<iUk>.khm`I0C6*qWBq@h0f:tY*?.U4S0SYIaRg/=h(%JE,U*koTEJ5/>8L$SIO:\BMMUqiWpSEpO2iV<bBeC4E%me1=-hN6K[;08r7/(g8@lnP<&k!7Eh'<pl#3A;B!q/f3#gPBu\HYFJRhA:Rc`RJ)cdd3B\bm`;i)D3_@1A`$b3r'7_+3h(Oe44Rf%lD#L\eT+,$%?P-]2DEHrDb,3&2WA]LYNWD$.n'=]cg0fM`@OJLOph2;DcRBJYp#FD"3Id?Z`#0ke!^1mNA![,WpJ%S^Q%Nn;O<7t%2.l6B";hoM[d6dJK)X4M%[tp_=H;"=c,B1l,+a)%p._;tnP;NJj,W?d*P\'L<c5/W%dg:b@o4<bk^1]`k2mF+p,ZEh:[M'GPe?)s%O`I+3B+@on#qgK'GZ'hoT0bKaQE[`G`$nM$]OR[L#'lfO=H'^m^6IDC!jmV)J29a``sgN_2f@2Y/RF\0oi=ocB=:ci\KW6$PA6Km%FWl:uLt:e+n_jgJ)P%e4efh/=a)+C4Ibj%AL0`qt&TGg%c[?V2m>rgl*E%m(/pgJP)uFMaOWn$'i*)W)+aTgIbZoea3=q&h8%.W$%a@/m&*dSVckS$nJ[oC32(IlLpHVbQc*fXt=9_(<+P-:EjG5X+D)`,;4N?Y9.3(5d%Ljb@IWH!MVUC*35$%aPlkS+gq)[h6&"dl3a%N2bmk=:dWpr*X4@,'a1@&;oP*Le/Z.>k19VcM/ZDZN8]AE67.-bEVm^(d/f`c^r51Ch#)ET^JmBi_0#4q$o.4'A&brSqrg$+gXlL%nGunU,`hO[fMl(941/jh1N,/,,G[EoE@o./jPQ7T',QDK4PjquKR=NXq6.,9U4&'eJ<ZZH']cD$!b:f:<WdWb]N.kuG\:gj:]p64%Q7`QIr.WW%T6fGI8_?a8bj[S7.6M`elC'/H!&W-TPX%KEkDF,pmB9,)J^b2VOStn=2e<I@./\&s@5`O1!p/\fgD#mT$7[/OFejS.%'p+&3;i+ki&QJiB6rZEp4F:&aV[QEqXqc[GHNLV_(beqj\WBFjCARk>$HRA+c+b2DWO08p^jp510OUUUE_*>KF?@-0MSQ_+8G+7k%UK(D-e,Z+Ac*,[u;9h[l:)>+7R1r,)RpIWj(%RWC`%sA=;&HWCo(R$%[F!Tm_PM"hP9>TW%>hVU>7;SZ`NURk$p3NZ(tE6LeUn\c%!T2F[KLNQn1@YN&N5BKIGM]@3lk)P]1fShJU68BVk85+JEYt(+9%;8@&,On1*%k7VQ\JO@I/mI_j1C_U*<boPJfmN[*KEo,`#B)9%(knj.(:PSEOCcBs.#B0XP1VLU`"<Z>7n0d!A[D-I7Bp>TA&4uh9>tK4T$>o*@kNZoC0)+g^0&*:9GGNiB;.@p-Ak*_<dW>gMNWP#%OMq]<L$Kk=;%ZFod;EO]`$Fm5>'d\7UV^n(/Q&o@a%VnYLhM>fJ\<nMd'Q&9UM1;Hq$P[V[rNEflP6HTgU4h3/4@*Md<4G`+R4Q:%&_Y]"P^Jr=^`mN$7&9"+\/H2=;$.gn23;t%eaotZ?t"Fj%Z2AicC\qg%s<n6?\]iHEoh&9d8ihSURNH`dB$LS`=tT[F&N5%>_s["%1jcL-n^TK*=DoGpR3IIPk;@"!HZju^Ll0NtNYSuh_;\XM)Rt@#"`D8C^gaD9H_p/($L8QM@Z$V`g7>YUrV0rb$Q<9Uoe\rqAch0c%;S&T9_(DCh+HeoZG.(N4cW_R9q2-Li&>G;q2[H)1[!^OB5R0UVjN&*%%_2RkN4)n_,(S#hX2lQ\"leDPX]>@""Rb>aK(LcOq=?F@%^3I"Mr%WpF1C7$9-I-M^65ScVLBN4TV:K=4]THF%Y[URuN^ZQ@N(PAB`e">n7Ht:O$+-r[JLWEdHF-#iWauOH"H&",+NI^g78+2;%4Iu07*SGj[$07IH((fiS>&akUV_bbsZ+-&iTM<)^Dr&Uu42aN`>^7ZJ,%`#)f[A,N4hR7!h:e>1rk9F3Z)fc6/[emNQ*Rmcj*LP*%[lNLhpLmO':ueaEJB?>,mXeZ2,0+X08POmq`8aC:_Xf(hcs)2_MDk.W#JZ_,IDrUnJ;D@!\r"q29i1u-Z@oASYmBj#8"70O>bFcq%dc*A%T?o0h8@d7p&s_S]YtK.7VY2Um>8<,shs(nn8+fC[jf$dujW>&_VBVbg<9\-[F*.h"P_+YOKD,)L.oRBB>maplnY;s.mHG(k%'UAo<#C.i3$Z9Ou&QbhL;e6;I++)A)GV:W6E&LXWM4%4\22EUPY[DptFqBn3QLERO&6r1::&.lE6-0),Td1QIEaUXJ#=9%0E4fHK%#dOMtC#-.X(XaM3k_KDK!3):!V]d_'H8'M&[$habVBITX8mW.GV'.M-7-1\8(Eu:hj4NW^1uorj)Y-4jQ(=5b[oEmUdZ>:=WGC/l%L:jbJ/VSjfhRoukaCT0GbHkiVC>n(dnIc%),@86;CW+DQYj/\B46#@I3]G(r0:j),Tb/p_-4qn55Onu0i,9&8dX[[7m!onm4Q(p[%Dm:)HJ<pAeJ/<Ys-'Uao#1=Vu]LtM5]Sg8@mfKTEK[=026o-\WP(a9?/>bMc"V[;nSk@^O=9+f0]*-(3>lphl/pIqcjFkunfh1f[%#bAOn:^m5<&RGli3Ta2V>lqIP?(P^%rR[KdqTqd7E+="6DV`!1%YEN7H]q-kGjFd*jLM#VV,oISgTA*>+*Kdi]l`..1RjP4\dsI\%DFaDsgEF=RhjEc9IHa4nRO0K+IC]ZeLY]Q1n$D"sg1V"J?+QX4C>UR'NfSSar>i4;G=Rm\V9\Qkh4"W@KhHV[3KA>?a*<_/ADarp%[f6/pHXl$[h2>Khm*<;LE9Fs?@D5FGF5P(*<cjXOmYKMdgG-Ha7ndg/?#M)&cn>*YgG-H8G;J%LNI/u_Cpl(5ESiul>"j2*?7XnV%G2nV+c>MDLZPtipT3Cm%gqC44e:,#@Z%i_]]`P@"ULhMJM-[W`f$]26%(66nE<WD(@qIfZLff'0@a3J4oDs),WDRRNag<$DkA4ad%@.Y>8ER^cPJ&%L^Gp:7-PEM6d1SYJZ;ogH'NBRr:N]Z5iT88?O`t:-(i-c"7FJB@-2:TYr7NZ`B5MP<?P..fI(k"(DWC62>R43/r%UCRQ-dko>3j!/G"T/]bYo6He:I=_llSlordq219eI))ItXcUB]ZP/9]isH7lnsgLNpc,Q24q="&LMU`d0'>Ao@6%g3@WY9,ZE<90%ms86_o*>/"4#]*/P%P1;%$*.IeEpi]1<BV:S^btT64^R0&#be_k)5Yg!W@]iP=4s]#UPNV>Ojc7Op>6;<gHr8&,Kg*\OEIP#k(Mc%nt6KJ\5mEW6XZ)?EL;.,TG6'39!/9+0bZZW/Sp`48XV>1n6sO.n-k7S>-V(+io_n=DFDAd?1Me_8=i]7!b@I,@mTYok[d$sOjq;R%;$9Z_9^k%(JgY#J^luI;XqT28\E%YR7EX6e)](Ya11RqU\`b31=,u,@?S((X-@4[_1XQjj'0Vhh`=Hf6Z7AD/@>"1fjNIl'eKrs`%\(V4$n(,P@oLm2qNq^lKF5Dn#,8bcXnHQL_4l%SaDDMbT4Ym:8bDe&W[XkjoD\Q^-;]kp02Dg<-XZ[7/Rn*cg_A3".h("u,\Ynmo%3o4IjNUs&_!MF081\[PPF%*E0Diu&b+ECTpk+7!Loi;i0ZctYC(X])k1i<^W*LZnD)_l\87+C(GY"LL:D=><.biDfu0PjO8>C7DH%P>CYIb%tS5T&a;MkseY4Xm@CE9g4TIai?+nq=Nr0ZUC/Fk*?Ja(UTQqO&f[dLl(/3jZJF%jK[HO-]+3Qj?RB+)+dABiiI\RXLF90%`&imRQ&#SH=.MO9dVZeb[IW#93m8jTC"K,JUnb;-$FSWEBXGES8HN9hOq!h="@1Q-Qm$t*Uraop,=-h?<G!IAT9F,<RQij/au[t&%q#,JkZlkB+X.aW>(eHNHph6.Zj?SYB9bB=I4O)tGP3eZA0TngtN?eT`dAP_naB1Ak.,>XM[utPY=@kc:`UO78P),Nk"FVm_U]p:'%`r#$ZP;qQ6P)TW$ao2.60eZu^_$cZ7^$Qo/Uca^tD-U:J.kYQee?W)4Y?4@9fiA`@bXun?8<LS+6(cklib_$(\)O8R^[hk:6,uZf%RD^g=P<@+UDh3oHB8jESS03SaQYbCWqU^\;]Pl@G;>7kZR+DpEe-.V1lU]OeAS:48`C+"B@NV:M\-o/T`1C5=Y7XF:iQB^BnjHa`%V*3Im#@]8s&@2l5IKr7SFT\Lt\d("_B;H@QoifQ&ognlr:75]YZg.i[mcp]?$CC`-Mt(4Pb#8$]D!!Z#r55,))hqT2FUs.^]$HT'%f7#$W%#MOrdmRJ:@Z0blHZju@*`ZpC]iFlZb__X`l[[03%;DCda-7:j^.7p2Kq7#,CmMQa^"1[&q:g@@r7]k^,$Y87%&AmmAU.SY%DVTrP"NV'$+EI2j<UqcCHQ]H!lhg*a]lu>qW$d%Uq/@sgr-uP"E?Z&/4sF.0@KfGa(SC%Z>&'-%9dYC.!/iWK<bYVR%3k"%s2!^-%[*]qF-+336LM8ClPYKJ-"DJD)`YK#Zpj"GsN/A%M@6^(398L[ae[8j2S-##lRE%5(7rM0fDMgId?+E;s]DKZ=/cDM3'.EnQ!3o/;%-\!VVG_Qg(>9'iJ3qhhe7s,W1`K!r,1\j-f<]h\+j]!!G7B@#S]Y,:eWYFct^F0V%\^C-fT?,A-5^\kK!%G)lqk1"N4+r#Herj2s%hG9*M3;LQo20+WC/?\IS9dnX2/I$3DE'kAp52'bTOR\!W($8^;A:D['1u[4*-I72K_1En!(h"oSZD@sB$`aTg@-_"q;4M[b+1.P,%M3^Pkpgr4^I1#"E;EdBbF_Rgflu20i2c>X*M6p%Q*D2j&/P+Z`NpMc2KV*JdDG"'2J>`d2n$=i?[ZTI,UrFRWN.mk,=BZ)g=(X9M%`@Ubfcmf8u03C(lS4ub5H0OYgR"P8ALI@XKEVDT?Sl9[Hp7K<!7Fg]S@TrDX"K>DsLU[Y=JddbP0-rkp/X>%%Et*r>%a/p'W#Yk4%&#4HYi26)8nmsDSXZ8;nr>naj^@#u@KBTJY_p]bD54oigKf]OE![LpSSI-J04Ot5diEDJ'b8q9ec5,]3ib-N![8d!maQ2apLe=:i%RIh(L9')0Z8Md=n'p-kZGK2!k^nhRU=3>?+.iSMS5#7s7Me?0]`\;i\'B+RNf4iE[0qNSJG%F)W53Qg`Fi@Be1nuXNpsH(:."*(V%klWD4dQb863?XSNphA0fF](19aV-R?'L%Pen-R__4pNFr[dijgRB29J(L6_TR)g$?Yg'nVq!ja\blX^#LC:1t8G)>(/sG`8'gD`R%ioe*Vr"'O9VgWM71KN.\-m1Y`4$Qesm3$8R(Wgng^6Lp\)&),=-)pl]>`'.rMtpEtOd:%b1D1:+cpinY/(!LUFkX<*=#O9$(#Cml%eR"koi:et-m4+uc>N8>%TiGob=p60qXhR/]Ka9:+L5=V[=Y2_IeZC9Yp2n\M"_9+IbC/tXq>k'NL=UQ+\VSP34s4lK2WQ+<?bM^n%:t@6]j`3:X2M3p,OLUN!4+(C#R'.Tn$!BK;m29XA2saJ_.Oc/AYqUL]+[pK6LEK9rgi*L:\.)=bT2T%f@T9b:`GT1P6)]4]?ld'D%.8ELU]'qQ:6.KdD@beloYbkeBP^/Zqm@Dr\X;76rT@_Da`(Ho/,N$..*k;=3;bdHp4QL7k/5f7*%G4_5Bn1cm(#ip`D?@A8@!4p@%p7VDq9qW'V3ZpuuA>+1Q(:hLRL(.sKg4`P;]O9<KiJdkG$iO(fH:B3%@Tf(%Aq]t^Hs+pMm01H7oMX)e\cm^6qQ,rIKTQt8Pq*qG%14Hs%;qS48E^\pr@@[KBa<buR5N2h$bGO%mDBnfdToK!;S&p$gf.sn@_-5E25-EY-0%<r6me:a9igA5#!!RRIs%&kJ(D2i)#`lW+%%6(muGiW3m6lASm&'00Lb6u-6dACFO#[U^SMVk9DOX-ccoi%pR<-IcSaKr1s$1m@50_o;5U9l=Yol9dW+;9*aS4FgiR'hcg:11la%@n3M-?)AI^8.j[:]\QZ\j2dNtO01TSX/'%<+h?7I0T.6DI*ShmmerV8I=Ko'&.1n9K'i%B0c4Ad>Xp`90"oe@<N0g0D/u29=Yi`_%s5H4'E]EP3cK0*5,+uqd7;Z&45XSPC0-Hf"_XT%ZMi7t>"4<]Y7)/3ch:.>L&QqJhiVV-Y:#lkLhlU4FIG'RG;PeQm8Yn&o3==@q%@k5/^R5L)dBuDgob"%tWASX0I<X"!7oDJDIGoDs/Snh[F6c;6Qf1Md+#U>t6/[4`tH9&>j74B(t:)T.AL'A%uF'.E=dhY)G5$Dt!%&(OdpeaBi:--tKBgC:]j+sS(:<HPga4"4r'S700#i.olMT1e_0\irD7>^s!ODa\eV5XoGW_-[KrC2?8C7G1%6OesSbI+sGM<ullt%AJLIEQd4]eBL6^"S;JQdh.7j.ed<B0;i,c,.FB-OES4k3C^_bDpkX#0:FdWL0_Hiq,%Y:!_>@%R<-R5;V<Ysp]M\HiAp)hCk:XMR%,qIQOm;GBBUHlJ56UW2pSrESBZ&(e0Ptr3=#e+tLA\:g]W%+P55UP@?C8PcR0N(<)Us@0P2RZ5?fck:8Cebfg3A1<?N2DoQYr3ES%TA`uU18L_-r(\tf9TVZ]p*R`ohNjEMO,3F+dk#[CY_$fhf3Y*$ZuPp?4?lNa+jC\jZ!S)q[2suQ87rdOn/,nBf#n_$M0ur9CL5n'%>GW?hN:M#q_lmhR@2AS8Z[u@M(@I,bm3faPmu@fJJ:EKl>>i6+P?k]*MUm2??gL(jG+#W4#f*q93\3\GF!T]3_IIDI4g?l^0(V2'%]3J_q+ChG7(iF.]WCQkmb>Va\5Cg5_OQ<KQaO9tB$:?_1d\ZR(5+:U2$%'J-lrWX7"rCORpg]o6N\TV\@\l_n:R#/bji6dH)oR)`%lN'srQe2kP&=rL'"%:$ESuag("/>6cj=U))aQe3:UKFp26GRi1qb2`fNp6/2)`-m(@q3Nto,Z85p&/!7A5I_>Z$,6/c^1T$VVt<U%jUtaLi%EL[`9uhN[r8Q'B*AV;%T6o>]ghi3'%WGT_pH$1j8gg2oG'+:@Ft\/V40gPE`3?BQM1N8Dgm%Q/?C!!iE.e:Y+^i/2$Bgr%[u*IV6Vmo"?"f])I3<q:gIo>t=\ttZ9<g+%&*3";YCYk/GB_t/I2\8o>AVhH::NrF#7'2(OP7&G`K*KaeiYn:`o9KiNE#V4N^uSZ%r.nTX^3N)AL<8VR5RkW[Ag;Z1^fOG2\YbI6erEe8/6=ue8VM`cS5sh$lH.%o)U\DOZG.HI(V*rmq"D)QA%lU[40S`u"q\>)OrO[9%cT%ArJb2<s-4h=Ve.'<4Hf(,8Jje7"$@u)4[CUSIjS9Rq6F0<4#`=c(g+i8C_E?o#@_@s'CdTBS+K:iAA.6u:]jI+a7bn]>?5E.^%8>GO**_??!`9=K\X7@c`+&+3T`"A(<Ll2+qXcus<Zr1E@$f$:YYuEf>:-lqq4L&,-eCOdG"#p,(a)XRog61!pZrV<pnH)"pk(76@%!jI\X0fGInB0ETH,^P/Z$Cp'ddF;*m0*sjcGWO"23>Y@QkJ@"OgXrk?/8U#ejCRl-'0V/m/^oXW:9c6Y*'ctH1@"T[I*-IY8f2()%2cq*6>%g+"i3l:$-#kPlNXJ!De^*R5&t]ZU'fhf7862te!s3i&[;<Yr<Y;_IjI.l0WAlFZgq';J&cgjLE!Ouq_YXE5GNf$:'W?u5%XBLXI-S5pNAWukb$8RK>fX&bhO(N(5&\/_^TF@e/lr]T"cd.D)Ac7OC*ac/AV/W)!(NfL_X'p\oOgr9IdYAlM/"[3j"[YW(.h#ai%Pl!"T.8G5u?7e=*6M*0^Y\1tffo4>2)sq^P9D%cGBhEsoS874PYWM!!^#>hFUL\;IMj=9lR(&umN,rgXrTuCMA;Eg\#BCp"K(Q,N%4,bQci:#s\;OmPtdOJ6Y@jpU3lIPQHYAFQN=<k7@R(ng!0N]*H'IL^,!GnBHr8"JR-cb'G#)X6#9EHa,`?n/MI`*.,7e#646,@(U%`INa^(aLh\>!S65s6[c[-n\&.q`HSRIH;l$TS2Na,Ss1q[\1SM7o-G1(O0ZU1Y5XLfkt;.=YquQq--_iDQKHrfR4W@`MURbImshI%"/q]Lc!%EFka<#$p#1jbInNk#[Mi><Y%^%l"1]<Pl2h_j2.1c*bL7Krk%tRF]!3qo3:)T;a+j8,\,@(V@`lA%1MHtM9h[uUB,WRU%*DHrag9ls(!XC%eb7B7W)Q^2cj>R&Oi^Io%;8G!QZI!)(H$\&Zk"]bU[t%=Q2/B%MBHRmLQ(t&R0KE#hM$=NG&8Vu=L_tu'@n*0n%Uc?a^hc@ls;1O(pl5:3I%J78#$?I\cZ\A1"q)UMi]bO31DN!*RK4u;D52O;QE?O>hE5XanSn@RW=s)<.F.dMd6qfTt.Ve87>f]EI%-gVET%7cpU@q1'W!u@-LNfjGKAfM`QEt.[2!+oYj32=i>`$mN$(+;"9&##q'==?#q_UX9oO)n9)I1:Wj0dNPk;Lmm69lU^KN=B\*%NK"d)7Y*eh$LtN/m7!T67M((kbudAs]bZ*XnRodS2#[p(S3Q%J;VusfL]Z;#"M"Xj%Hrj5P$=lN3K;"6A/_g$*]+bbC;g<2%Hu]W%`(&^>_PQeP"ZMGN29.\C7YHG5Jn*]]lfQ;sM(E3L;D*s/(Y@;/=\Y,R"$k%")-(ir[88]FH8IWK,=;CXaJFH;`_cNU1/]@H;$A-e%L[h1A6L>[TD'MNH&J:kfW,e.5<#Wuh)P/Ps#42_9.LjFW8d"beTj'C;N'5(09&o?f][kK1+9=G]\HChj)NH83#$`f^6UpeMS;m1i%Ul%o%*BLP790rg2_n,ZoN9<`X^)e-;*Ab_,OYmd$,+3u:C?fd!mc[3R<4Oo=U,kVIF%/'H'Ja[JF(Dj0,qg%Ro)k]Sj2bgpGK:ZJ%O[bPAWkEB,U/+0.@i7F*<mfD6cUV$:Z+&Fs@#X8E,IKH^P;Hl4a)GP.G^f[!VU9FFnQ+VnoZUq>QhkQ4FkI*Yb&aAHbm2D_NHo.-%]m];fdQ0.Q*V7Ker0F/k2O7JXTl$Ru3YCC7GK`(n,:;4*j0H$`6bEq)HL@0,R5:6\*N@:IT<[4lSFmks<mj?"FM3'W)!cHPHH(7P%0k3?OB%:CEoc/lq=D!Q_'RN4bF.F*^fdJt^][^=;`d7WkSt]M;?=8I\YE9pW0k\BDE8k)<\a2Jh&WJSF?5*r\4l9@D87RIA(`1W?%i^/6&nmFU&A=:rQM6`WR@]\aQ3U=4cb'K)j!2G5*BQTs1q/?Po;`#!8F!0RP4a4hIcSlV()^M(jS=aY#r+qIWNoRGj6Itaa.-nE2%c?eoGZ(=%_(CU^BURoX9k(l$,X(hAM`d3XW[F0uuQZC/Mc^tsi/_dVgh,Y"sV-An?Yb'18!HO\&r'o0sjK.MX>JLZ+YZ/oLnU\]+%505\U)G/7fnhrg\INu<C031Xf4a1G#Sju<S_F,Nu6$b`$L)q6WIB:+(X\]8n+?]s-:==2K<GQFZSN-nI?epjZZIN%^l+&$2H6*)3%4l9@cddr8$l$5[M-6-<Y&#AC(b!C=`j>oiX0a?ZhoGgsr8C)4m7usJ/5cuk)J/uDJ5HNAp_dQ!+-a95LHO6&-6$YX+K5j_Z8&Qh%%*Abk0GmXB%VEDnogB6OtQGsI`$lRA=r7hP;\b.upSkh``*e`]Y";7\HK]e@TiH`@pn/V>b3XF(%]'Fq:HpUJ0nJK3B9Ki?.nGN:>%2'3+M-^au5La>k.^2j]\eRJ3kGO@g9>&Aq?k7KD^F2sg>gbIhNO,0<0kX%J6Jb\$>7\g4CPiOW71jIq?hi$Y7W9`A'a71i*ps(V[%`B#;@LS#n6h:rYW\lgRcEOXX,UbSH*St\&T:PS*u8G%nP7)(J8VUuO[7]tV""4FRE\P\q[k*5%h)<H-389mDfK=7e0bUCeU9EOK1%G6E^irpK[K]GF1IosiPtXoY]^$<l@RGs2hFq*94S@ls5).*ji\.F0BKpBSk4L`,=MD!H/uPioB@G>BX5rGSSrhcOr7mYL,C2fj=`%`-Ph4>Nf([k+8pm^.*#.M<p>\cXn+(/#*&?8lVuJL6`\ON#:Na@nq::Qk>ocNE4rW34dIE-Thn4WH$eOl98%6<]:]/o8"7B\RT&I%"/`c@V`Os\73)-4Q[jeKU':-*eAlG">I7qI(.l]sOq$5/r=,(Z_9fZ=fXIN=N=j=kL^$4(aR*1[<alf&`H29#Zt_`LZZ!+3>04$L%GbZ+cT).BVE\VJ$D;^;5=Fk?X/!?q&$:&<3r(%MN;-H=+?KS_J$c&SS-So_8VFHQ".MU7Qo)sB8CB%,26I2pa/[u:b=;E./RN?(s%_Ou+t%ajb!Lfq22U=Lo<4)+4l2/coVQs=@V/0D/F^s-)DR<a]`.2K5_#nH)L/;tA9^o3ddCBjBr,Au@Y9[-ciOL&s]qr2bmPp)O#%eFmq%@^F+,&G+K5Wqe`s>!N&TleCTPf8o+XIt%"%kBFZ?qj64=]DpC[a$9R^TAP.rlVE$,LOXREh=(@/O2(_Z^]3Q=s7Q3:T3d!H%k9'`m:Tm"^i=CG9bE%/Kl2TQ=oD8>KrUf9fr:*QI^&IhWrpa?Ggcr(+^\chOrg3Z[o)A[jr3S0~>%AI9_PrivateDataEnd