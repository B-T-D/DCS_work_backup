%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x004.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 189 139
%%HiResBoundingBox: 0 0 188.7720 138.9883
%%CropBox: 0 0 188.7720 138.9883
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 5528 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FF7DA87DA87DA87D7D7DFFAFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFFF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFA8FD09FF7DA8FD087DFD15A87DFD15A87DFD15A87DFD15A87DFD%15A87DFD08FFA8A8A8FFA8FFA8FFA8A8FD6DFFA8FD11FFA8FD6DFFA8FD11%FFA8FD6CFFA8A9FD11FFA8FD6DFFA8FD10FFA8A8FD6DFFA8FD11FFA8FD6D%FFA8FD10FFA8A9FD6DFFA8FD11FFA8FD6DFFA8FD11FFA8FD6CFFA8A8FD11%FFA8FD6DFFA8FD11FFA8FD6CFFA8A9FD11FFA8FD3DFFA8A9A8A87EA9A8A8%7EA97EA9A8A9A8FD21FFA8FD10FFA8A8FD39FFA9A8A9A8A9A8FD0AFFA9A8%A984A9A8FD1EFFA8FD11FFA8FD36FFA97EA9A8FFA9FD11FFA8A97EA9A8FD%1BFFA8FD11FFA9FD34FFA8A9A8FD1AFFA97EA9FD19FFA8FD07FFA8A8A87D%A87D7DA87D7DA8FD31FFA9A87EA9FD1EFFA8A97EFD17FFA8FD08FF7DA8FD%047D527D7D84A8FD2FFFA8A9A9FD23FF7EA9FD14FFA8A8FD07FFA87D7E7E%7DA87DA87D7EA8FD2EFFA97EA9FD26FFA884A8FD13FF7EFD11FFA8FD2DFF%A9A8FD2AFFA984FD11FFAFA9FD11FFA8FD2BFFA884A8FD2DFF7EA9FD10FF%A8FD10FFA8A8FD2AFF7EA9FD30FFA8A9FD0FFFA8FD11FFA8FD29FF7EA9FD%32FFA87EA8FD0DFFA8FD10FFA8A9FD28FF7EFD36FFA9A9FD0CFFA8FD11FF%A8FD26FFA87EFD38FFA9A8FD0BFFA8FD11FFA8FD25FFA9A8FD3AFFA97EFD%09FFA8A8FD11FFA8FD24FF84A8FD3CFFA97EFD09FFA8FD11FFA8FD23FFA9%A8FD3FFF7EFD07FFA8A9FD11FFA8FD21FFA9A8A8FD40FFA97EFD07FFA8FD%10FFA8A8FD21FFA9A9FD43FF7EFD06FFA8FD11FFA8FD1FFFA87EA8FD44FF%A97EFD05FFA8FD10FFA8A9FD1FFFA9A9FD47FF84FD04FFA8FD11FFA8FD1E%FFA8A8FD49FF7EFFFFFFA8FD0AFFA8FFA8FFA8FFA8A9FD1DFFA9A8FD4AFF%AF7EFFFFA8FD09FFFD047D527D527D7DFD1CFFA8A8FD4CFFA97EA87DFD0A%FF7DA87D847DA87DA8FD1BFFA9A8FD4EFFA97EA8FD09FFA8FD07FFA8FD1A%FFA97EFD50FFA87EFFA87DA8FD0CFFA8A8FD1AFF7EFD52FFA8FF7D7D7DFD%0DFFA8FD19FF7EFD53FFA8FF7D7DA8FD0CFFA8A9FD18FF7EFD54FFA8FF7D%A8A8FD0DFFA8FD17FF7EA9FD54FFA8FFFFA8FD0EFFA8FD16FFA8A9FD54FF%A8A8FF84A8A8FD0DFFA8FD15FFA8A8FD56FFA8FF7D52FD0EFFA8FD15FFA9%FD56FFA8A9FF527DA8FD0DFFA8FD14FFA8A8FD57FFA8FFA853AFFD0CFFA8%A8FD14FFA8FD58FFA8FF7D7DA8FD0DFFA8FD13FF7EFD59FFA8FFA87DFD0D%FFA8A9FD12FF7EFD5AFFA8FF7DA8FD0EFFA8FD11FFA8A9FD5AFFA8FF597D%FD0EFFA8FD10FFA9A9FD5AFFA8A8FFA8AFA8FD0BFFA8FFA8FD10FF7EA8FD%5BFFA8FD0FFF7E7DA8FD0FFFA9A8FD5BFFA8A8FD0FFF537D7DFD0FFF7EFD%5CFFA87DFD0FFFA8A8FD0FFF7EFD5EFFA8FD11FFA8FD0DFF84A9FD5EFFA8%FD10FFA8A9FD0DFFA9FD5FFFA8FD11FFA8FD0CFFA9A8FD5FFFA8FD11FFA8%FD0BFFA984FD5FFFA8A8FD11FFA8FD0BFF7EFD61FFA8FD11FFA8FD0AFFA8%FD61FFA8A9FD11FFA8FD09FFA8A9FD62FFA8FD10FFA8A8FD09FFA9A9FD62%FFA8FD11FFA8FD08FFA97EFD63FFA8FD10FFA8A9FD08FF7EFD64FFA8FD11%FFA8FD07FF7EA9FD64FFA8FD11FFA8FD07FFA9FD64FFA8A8FD11FFA8FD06%FFA8A8FD65FFA8FD11FFA8FD06FFA8FD65FFA8A9FD09FFA87DFD04A87DA8%A8FD05FF7EFD67FFA8FD07FFA87DA87D7D52FD047DA8FD04FFA8A9FD66FF%A8A8FD07FFA8FFA8847DA87DA87D7D7DFFFFFFA9A8FD68FFA8FD15FFA9A8%FD68FFA8FD11FFA8FFFFFF7EFD69FFA8FD11FFA8FFFFA8A9FD68FFA8A8FD%11FFA8FFA8A8FD6AFFA8FD11FFA8FFA9A9FD69FFA8A9FD11FFA8FFA9FD6B%FFA8FD10FFA8A8FD6DFFA8FD11FFA8FD6DFFA8FD10FFA8A9FD6DFFA8FD11%FFA8FD6DFFA8FD11FFA8FD6CFFA8A8FD11FFA8FD6DFFA8FD11FFA8FD6CFF%A8A9FD11FFA8FD6DFFA8FD08FFA8FFA8FFA8FFA8FFA8FD6EFFA8FD05FFA8%A8A87EFD097DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A87DFFA8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DFFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFFD04A87DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A87DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A87DFD06FFA8FF7DA8%7DA87DA87D7D7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FD09FF%A8A8FFFFFFA8FFFFA87DAFFD14FF52FD14FFA8A87DA8FD11FFAFA8A87DFD%13FF847D7DFD12FFA8A87D7DFD0FFFA87D7DFD13FFA87DA8FD13FF7D7E52%A8FD12FF7DA852A8FD12FF7D7D52FD13FF7DA852FD10FF7DFD15FF7DFD13%FFFD05A8FD12FF7E7EA8A8FD11FFA87DA87EA8FD11FFA87DA8A8FDBCFF7D%7DA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A87DA8A8FD6AFF7DA87D7D59%7D527DFF7D52FD047D52A8A87D527DA8FD69FFA8A8A87D7D7E7D7D7DFF7D%7DA8A87DA87DAFA87D527D84FD2CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T16:45:34+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T16:45:34+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T16:45:34+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>188</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qk/m3RptZ0K40+FIH&#xA;mlKGM3IJRGVgwcUDHktKr74qxLV/yy1DUJdUkSazthqUyzvD6bzAy+jcxGdnPB+aG5WSNeitGCKE&#xA;1BVbP+Vl/JeTT/XbcCS6M9PRatTLLKLs7/72KJggfpRR06BtWT6FZ6vd6NZXlzrV0bi6ginlCJZh&#xA;FaRAzKg+r14gnapJ98Co/wDRV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm8/4C&#xA;z/7J8Vd+ir7/AKvN5/wFn/2T4qptpOrfWEK61dfV+D+oClpy51XhT/R6Upyr9GKqn6Kvv+rzef8A&#xA;AWf/AGT4q79FX3/V5vP+As/+yfFXfoq+/wCrzef8BZ/9k+Ku/RV9/wBXm8/4Cz/7J8Vd+ir7/q83&#xA;n/AWf/ZPiqnb6Tqwt4hca1dG4CL6xRLQKXp8XGtvWlemKqn6Kvv+rzef8BZ/9k+Ku/RV9/1ebz/g&#xA;LP8A7J8Vd+ir7/q83n/AWf8A2T4q79FX3/V5vP8AgLP/ALJ8VU20nVvrCFdauvq/B/UBS05c6rwp&#xA;/o9KU5V+jFVT9FX3/V5vP+As/wDsnxV36Kvv+rzef8BZ/wDZPirv0Vff9Xm8/wCAs/8AsnxV36Kv&#xA;v+rzef8AAWf/AGT4q79FX3/V5vP+As/+yfFVO30nVhbxC41q6NwEX1iiWgUvT4uNbetK9MVVP0Vf&#xA;f9Xm8/4Cz/7J8Vd+ir7/AKvN5/wFn/2T4q79FX3/AFebz/gLP/snxV36Kvv+rzef8BZ/9k+KoeCP&#xA;UrXzBbwSajNd2lxa3EjwzpbjjJFJAqMhhiibpI1ak9sVTnFXYq7FXYql3lr/AJRzSv8AmDt/+TS4&#xA;qmOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLp/8AlI7H&#xA;/mDu/wDk7bYqmOKuxV2KuxVLvLX/ACjmlf8AMHb/APJpcVTHFXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql0//ACkdj/zB3f8AydtsVTHFXYq7FXYql3lr/lHN&#xA;K/5g7f8A5NLiqY4q7FXYq7FXYq7FXYq7FXYq7FXYq7FVG7vbOzhM93PHbwg0MkrBFqegqxGGMSdg&#xA;qB/TUtwP9x1hPcg04zSj6tDU+Jl4yFaftJG2T8OuZ/Si2+HmWUkmWzs1OwjVJLlvn6ha3H/CY+gd&#xA;5+z9a7rhpeokVfWLoMevCO1Cj5BoXP3k48Y/mj7f1rTv0Xff9Xi7/wCAtP8Aqhjxj+aPt/WtNfUd&#xA;bjP7jU1kB/5a7dZD9Bga2H4Y8Ueo+R/Xa0Whda/B/f2MV0g2L2koEh9/SnEaqP8AnqceGJ5Gvf8A&#xA;s/Uu6+313Tppkt3dra6fZLa5RoZGI6hA4Akp4oSMTjI35hbTDK0uxV2KuxV2KuxVLp/+Ujsf+YO7&#xA;/wCTttiqY4qk/m2bU4NCuJdMacXyFDALaNJXY8h8JR1kHEj7W1adCMVYbq15+Zxl1FrBbwRmYtbK&#xA;sNrRBxuTbJDzHJkcrbfWDJutWoV3oVbnuvzQ+uTemt16H1wiOkdrTl6soSMVWv1MwiIlz+8rXfti&#xA;hmflRrg+XNN9dEQi2gEfBy9U9JaE1VKH23+eBKbYq7FXYq7FXYq7FXYq7FXYq7FVK7u7Wzt2uLqV&#xA;YYE+1I5oBXYD5k9MMYkmgqWm51rUaizT9HWh2+t3CVnYeMUB+x7GXfxTLKjHnufx1/V80boi00Sw&#xA;t5hcsrXN6P8Aj8uD6ku/XiTsgP8AKgVfbIyyE7dFpH5BLsVdirsVdirsVU7m1trqFoLmJJ4H2eKR&#xA;Q6Ee6tUHCCRuFSxtIvrOjaPdFIx1sLotLAR4I5PqxeAoSo/kyzjB+ofH8fjzRStaazG9wtneRNY3&#xA;7V4QSkFZeIqTDIPhkHen2gPtKMEse1jcLaY5Wl2KuxV2KpVK1wfNNoHRBCLO69Nw5LE+pbV5LxAW&#xA;n+scVTXFXYq7FXYql3lr/lHNK/5g7f8A5NLiqY4q7FXYq7FXYq7FXYq7FXYql19q/p3H1Gyi+uaj&#xA;QFoQeKRK3R5pKMEXwFCx7A70sjDazsEEtWeigXC3uoS/XtQWvpysvGKGvUQRVYJ/rVLnuxGMsm1D&#xA;YfjmtJllaXYq7FXYq7FXYq7FXYq7FXYqo3lna3lu9tdRLNA/2o3FRsag/MHcHthjIg2FS0nUtI3J&#xA;k1HTK7nd7qBfoq06D/kYP8uu1m0vI/Yf1fd7kck0trm3uoEuLaRZoJByjlQhlYexGVkEGilUwK7F&#xA;Uun/AOUjsf8AmDu/+TttiqY4q7FXYq7FUu8tf8o5pX/MHb/8mlxVMcVdirsVdirsVdirsVdiqU3F&#xA;9d31w9jpbenHEeN5qVAVjI6xwggq8u1D+ynep+HLRERFy+SLR1hp9pYwejbJxUkvIxJZ3c/ad3NW&#xA;Zj3J3yEpGR3SAiMirsVdirsVdirsVdirsVdirsVdirsVdiqU3WmXNpPJf6RxEsjc7uxY8Ybg92Bp&#xA;+7lp+10bo3YraJgipfPu/Yikbp2o21/B6sPJWU8JoZBxkicblJFP2WH9o2IOQlAxO6gonIpS6f8A&#xA;5SOx/wCYO7/5O22KpjirsVdirsVS7y1/yjmlf8wdv/yaXFUxxV2KuxV2KuxV2KuxVKJLmfVriWzt&#xA;C8VhCxju71TxaRhs0MDDfbo8g6fZX4qlLQBEWefd+tHNM7a2t7W3jtraNYYIVCRRIKKqjYAAZWSS&#xA;bKVTArsVdirsVdirsVdirsVdirsVdirsVdirsVdiqW6hpkpmOo6cUi1NUCHnURzotSIpqdt/hcCq&#xA;nxFVNkZ9DyQQr6ZqMd/b+oEaGaNjHcW0lBJFIOqNSo9wRsRQjYjIzhwlQVGf/lI7H/mDu/8Ak7bZ&#xA;FKY4q7FWA6t+aM2mzahBNpsYmsZ2UK11/eW6R3MokBWIqJZVsnWOKpPLrTCqmv5sk3awfo2OjT8O&#xA;X1k19H1hDSnpf70cmr6Ph+1jSGWeVJ0m8uabwDjhbQI3NHTcRL05heQ/yhtgSm2KuxV2KuxV2Kux&#xA;VKLq4m1O6fT7KRo7WBguo3a1BO29vCwpRz+24+wNh8RqtoAiLPPp+tHNNIYYYIUhhRY4Y1CRxoAF&#xA;VQKAADoBlZNpX4FdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7U7C5Mq3+nFU1CIBWVtk&#xA;niBJ9GSnzJRuqn2LA2QkOR5fcghA2er2mo6/ZtAJFaO0u1mjljdDG/q23KNiRx5L3AJyMomJoqCk&#xA;nkzzzd65rtxYtcCeKFHLkafNaqJEIV40keeY1jJAcOi7nY1BUBLOsCoddO09efG1iX1ZPWkpGo5S&#xA;g15ttu1d69cVX/U7StfQjr6nrV4r/eUpz6fap364qg/LX/KOaV/zB2//ACaXFUxxV2KuxV2KuxVK&#xA;9Tu7ie4/ROnsUuXUPdXQp/o8LVAYVqPVeh9MEU6sdhQ2wiAOI/2oKOs7O2s7aO2toxFBEKIg+8kk&#xA;7kk7kncnc5XKRJspVsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpO9nbR+bLe6j&#xA;jCz3Flcidxtz9OS3CkjpUA0r1pQdhkjI1SEj8m6t5b1PVZk0ye/mls1fkl1dzSpGvPgtI3lblzG6&#xA;swNB33wJZpgV2KuxVLvLX/KOaV/zB2//ACaXFUxxV2KuxV2KoHVdQe1jjit1EuoXR9O0hNaFv2ne&#xA;m4jjG7n6BuQDOEb58gglfpmnpY25j5maeVjLdXLABpZWADO1PkAB0VQFGwGCcrKgIvIpdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqXT/8pHY/8wd3/wAnbbFWF/ltY/Utf1m2tnL6&#xA;dbyT28KyXTzuno3LIq8ZLiaQ/Cu7PFHQ7DmPiwq9FwK7FXYql3lr/lHNK/5g7f8A5NLiqY4q7FXY&#xA;qo3l3b2drLdXDcIYVLu1Cdh4AbknsB1wxiSaCoLSbS4aWTU75eN9cqFSHY/V4AarCCNuX7UhHVvE&#xA;KuTnIfSOQ+1ATPK0uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpdP/ykdj/z&#xA;B3f/ACdtsVS3yd5X1LQI7iO71JdTE7CT1XhkWfnwVXLSyTzkh2QuVoPiY0oKAKsjxV2KpdqvmDSt&#xA;KltYr6Vo3vH9OALHJJvyVeTlFbgnKRVLNQAkb4q7y1/yjmlf8wdv/wAmlxVMcVdirsVSdK6vqZc7&#xA;6Zp0hEYp8M90hoW/1YDsP8uv8gy36R5n7v2/d70c04ypLsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVS6f/lI7H/mDu/8Ak7bYqmOKuxV2KpZrPlzS9XltZb1XL2jco+DsgZS6&#xA;OY3Cn4kZ4kJU/wAuKrPKltbweXNNEESRCS2gkk4KF5O0S1Y06k+OKptirsVSzWLuYvDpdm5S9vAS&#xA;ZR1hgWgkm7778U/yiOwOWY4j6jyCCjrW1gtbaO2t0EcEKhI0HZRsOuQJJNlKrgV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVLb26eabSdIkWaWzuhJKFAZgsltTk3U0xVNc&#xA;VdirsVdiqXeWv+Uc0r/mDt/+TS4qmOKqV3d29nay3Vw3CCFS8jdaAeAG5PthjEk0FQejWtwqy394&#xA;pW+viryxk19KNa+lAP8AUDHlTqxY98nkI5DkEBMcrS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYql0//KR2P/MHd/8AJ22xVMcVdirsVdiqXeWv+Uc0r/mDt/8Ak0uKpjiq&#xA;UTf7k9XFuN7HTGWS460kutnij9xEKSN/lFPA5aPTG+p+78fpRzTfKkuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLp/+Ujsf+YO7/wCTttiqY4q7FVizwMzKsilkIDqG&#xA;BKk9AfCuKrua9Kitade/WmKpf5a/5RzSv+YO3/5NLiqpq9/JZ2lYFEl5Owhs4m6PM/2a034qAWen&#xA;RQTk4Rs78kEqmm2EdhZR2yMZCtWklb7UkjktJI3u7kscE5cRtQETkUuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLp/+Ujsf+YO7/wCTttiqY4qhNRsrm7RFg1C408qS&#xA;We2WBiw8D68U4+4DFWE6x+WV7qMmqcbq3ghv5/WEbRvNV2huYWnYlkIkH1pXRV+FWjBFC1QVWS/l&#xA;ZcyXk1x9ctwJLozAeg1filkl+sk8/wDetfV4CTwUfINoZd5UiePy5pvOZ5uVtAy8wg4gxL8A4Kuw&#xA;96n3wJdYH9I6nLqJ3tbUva2A7MwNJ5vpZfTX2UkbPlsvSK6nn+hATbKkuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVLE6+abSQzOyPZ3QWEhOKUktqlaKG39ycVT&#xA;XFXYq7FXYqx60e9/wjpNvZB1uLu2toFnQVEKtCC8pPbiinjXq3Ed8shV2eiCnttbQWtvFbQII4IU&#xA;WOJB0VVFAPuyBJJspVMCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KpdP/AMpHY/8AMHd/8nbbFUxxV2KuxV2Kpd5a/wCUc0r/AJg7f/k0uKpjirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS6f/AJSOx/5g7v8A5O22KpjirsVd&#xA;irsVS7y1/wAo5pX/ADB2/wDyaXFUxxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KpdP/wApHY/8wd3/AMnbbFUxxVjXmK681LpF80NuIJYypsX0+VrqeQiQbPFJ&#xA;boqhl+1RjTx74qxzVbr80GfUW09LoIZibVfTs6AFbo26xc/i9Mn6r6/qfECW40+KhVdNP+aAvZ+I&#xA;uRbi7PpkJZ0r6knFRXf6n6Xpkt/eVrvWuKE88o6nq1x5fs1sxpt/DaxpbfWre+kZHaFApb/eb4a0&#xA;rTfam5wJTn1/Mf8Ayw2f/SXL/wBk2Ku9fzH/AMsNn/0ly/8AZNirvX8x/wDLDZ/9Jcv/AGTYq71/&#xA;Mf8Ayw2f/SXL/wBk2Kpfda7q1tqtpZTLp8U10khitGvJfUkIZAGX/Rui1IPzGKph6/mP/lhs/wDp&#xA;Ll/7JsVd6/mP/lhs/wDpLl/7JsVd6/mP/lhs/wDpLl/7JsVd6/mP/lhs/wDpLl/7JsVQ9/q+rafa&#xA;SXl7b2NvaxUMk0l5KFUEhRU/VvE4qh9O17VLieXTlGm3Op2KoL+KO9k5K7L1KC2+GuKph6/mP/lh&#xA;s/8ApLl/7JsVd6/mP/lhs/8ApLl/7JsVd6/mP/lhs/8ApLl/7JsVd6/mP/lhs/8ApLl/7JsVSe88&#xA;2XNrdSCeTTIY7QiK7ia9k5LLMQYf+PbaoR9u/wBGFU3W58wsoZbKzKkVB+ty9D/0bYFb9fzH/wAs&#xA;Nn/0ly/9k2Ku9fzH/wAsNn/0ly/9k2Ku9fzH/wAsNn/0ly/9k2KoTU9c1LS7U3eoQWNtbKQGle8l&#xA;Civifquw8Tiqlpeu6peGW0iGm3d9ZBEvxDeyHi7AipUWxoGZWp7gjqDiqYev5j/5YbP/AKS5f+yb&#xA;FXev5j/5YbP/AKS5f+ybFXev5j/5YbP/AKS5f+ybFXev5j/5YbP/AKS5f+ybFUiTzLAfMnqahdaf&#xA;axWEUtnJFHcySzGe4eNkHB4IaAC1k3BO49jhVl2BXYq7FVssSSxPE4qkilWHTZhQ4qlnlvy9BoVi&#xA;9rHcS3TSOryTz8ObFIkgTaNUXaOFBsPfFU1xV2KuxV2KpPq3lm01PVtN1KVzHNpjl4SkcXqGpB4+&#xA;sytKqNT4lVgG74qnGKuxV2KuxVAa9pX6W0a90v13tlvYmgkmjCsypIOL0DgrupI6YqkHlmLyynmC&#xA;/nstYN/fnlHPbEx8YZH4yzbKqkGQgOQxNO1BhVlMN3bTqzQyrIqOYnKkEB1PEr8wdsCtxXFvNEJY&#xA;pUkiJKiRGDKSG4kVG32tvnirhcwGV4vUX1Iwpda7j1CQlf8AWptirVxd2tsivPKsSO6xIWNKu7BV&#xA;Ue5Y0xViGoaFoPmu7vnj1mO6iv4IYxBGlrOsaWkkiiSJpEko6yTP8fVTTCrMYYhFCkQLMI1ChmPJ&#xA;iAKVJPU4FX4q7FXYqlfmXQ31vSZNNF5LZRTMvrvCFLSRA/FE3IH4H6NTcjbFVDQvKlno9/eXkM8s&#xA;pu6hYnEYSIPPLcyCPgqn45rh2+InsB0xVO8VdirsVdirEtY/L2DVpdQkvNQldtQdD6hht3kgiiV1&#xA;SO3d43MXD1WZHHxBqtWpOKstxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5P5t/Qn1zXvrHr8&#xA;v05H6tPS9P1/0TYceXqfD6HHh6nPanKvw4QpYbrn+E/q139Z+t+n9Yj9b0P7n1/Rn4/V/qv7z6v6&#xA;fPj6f7v1OPH4vUxQyDzT+gv8L6Py/wCOX+k9S4+j9X9bh6Nx6np/s+tx5+lx+Plxpviq62/wn+kd&#xA;M/R/97wtvUr9W9H1PVvfU9Tnv9a+1w4/HWlNq4qv8n/oH/ANh+hvrHofpmPh9a5cq/Vhz9T1v3fL&#xA;6tX7P7v1fpxVHflB6FdK9L6x9W+q6t9Q9b7PD67bepxpt6dPS9L/AGfamJS9XwK7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:8C17B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8C17B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8C17B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T16:45:34+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -138.988 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 138.988 li
188.772 138.988 li
188.772 0 li
cp
clp
[1 0 0 1 0 0 ]ct
24.2231 127.304 mo
186.039 127.304 li
186.039 2.02734 li
24.2231 2.02734 li
24.2231 127.304 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
24.2231 127.304 mo
186.039 127.304 li
186.039 2.02734 li
24.2231 2.02734 li
24.2231 127.304 li
cp
clp
.36249 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.4595 111.118 mo
30.6958 105.155 li
33.9321 99.3921 li
37.1685 93.8301 li
40.4048 88.4683 li
43.6411 83.3062 li
46.8774 78.3457 li
50.1138 73.585 li
53.3501 69.0254 li
56.5864 64.6655 li
59.8228 60.5059 li
63.0591 56.5479 li
66.2954 52.7891 li
69.5317 49.231 li
72.7681 45.874 li
76.0044 42.7168 li
79.2407 39.7603 li
82.4771 37.0044 li
85.7134 34.4487 li
88.9487 32.0938 li
92.1851 29.9385 li
95.4214 27.9844 li
98.6577 26.2305 li
101.894 24.6772 li
105.13 23.3242 li
108.367 22.1714 li
111.603 21.2197 li
114.839 20.4678 li
118.076 19.9165 li
121.312 19.5659 li
124.548 19.4155 li
127.785 19.4658 li
131.021 19.7158 li
134.257 20.167 li
137.494 20.8188 li
140.73 21.6709 li
143.966 22.7231 li
147.203 23.9756 li
150.439 25.4287 li
153.675 27.082 li
156.912 28.9365 li
160.148 30.9912 li
163.384 33.2461 li
166.621 35.7017 li
169.857 38.3569 li
173.093 41.2134 li
176.33 44.2705 li
179.566 47.5273 li
182.802 50.9854 li
186.039 54.6436 li
.884 .769 0 0 cmyk
@
grestore
24.2231 127.304 mo
24.2231 125.854 li
24.2231 127.304 li
cp
0 0 0 1 cmyk
f
.181245 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.2231 127.304 mo
24.2231 125.854 li
@
24.2231 3.47754 mo
24.2231 2.02734 li
24.2231 3.47754 li
cp
f
24.2231 2.02734 mo
24.2231 3.47705 li
@
24.5103 129.173 mo
24.2886 129.173 24.1235 129.282 24.0103 129.499 cv
23.897 129.717 23.8442 130.043 23.8442 130.478 cv
23.8442 130.913 23.897 131.239 24.0103 131.456 cv
24.1235 131.675 24.2886 131.783 24.5103 131.783 cv
24.7319 131.783 24.897 131.675 25.0103 131.456 cv
25.1196 131.239 25.1753 130.913 25.1753 130.478 cv
25.1753 130.043 25.1196 129.717 25.0103 129.499 cv
24.897 129.282 24.7319 129.173 24.5103 129.173 cv
24.5103 128.834 mo
24.8628 128.834 25.1323 128.978 25.3237 129.256 cv
25.5103 129.538 25.606 129.947 25.606 130.478 cv
25.606 131.013 25.5103 131.422 25.3237 131.7 cv
25.1323 131.979 24.8628 132.118 24.5103 132.118 cv
24.1538 132.118 23.8794 131.979 23.6929 131.7 cv
23.5054 131.422 23.4136 131.013 23.4136 130.478 cv
23.4136 129.947 23.5054 129.538 23.6929 129.256 cv
23.8794 128.978 24.1538 128.834 24.5103 128.834 cv
f
56.5864 127.304 mo
56.5864 125.854 li
f
56.5864 127.304 mo
56.5864 125.854 li
@
56.5864 2.02734 mo
56.5864 3.47705 li
f
56.5864 2.02734 mo
56.5864 3.47705 li
@
56.0278 128.89 mo
57.7114 128.89 li
57.7114 129.251 li
56.4194 129.251 li
56.4194 130.03 li
56.48 130.009 56.5454 129.991 56.606 129.982 cv
56.6675 129.974 56.7329 129.965 56.7935 129.965 cv
57.146 129.965 57.4243 130.064 57.6333 130.257 cv
57.8413 130.452 57.9458 130.713 57.9458 131.044 cv
57.9458 131.388 57.8374 131.652 57.6245 131.84 cv
57.4106 132.026 57.1108 132.118 56.728 132.118 cv
56.5933 132.118 56.4585 132.104 56.3188 132.087 cv
56.1802 132.065 56.0405 132.035 55.8931 131.987 cv
55.8931 131.557 li
56.019 131.626 56.1499 131.679 56.2886 131.714 cv
56.4233 131.748 56.5669 131.761 56.7192 131.761 cv
56.9634 131.761 57.1587 131.7 57.3022 131.57 cv
57.4419 131.439 57.5151 131.265 57.5151 131.044 cv
57.5151 130.826 57.4419 130.651 57.3022 130.521 cv
57.1587 130.392 56.9634 130.325 56.7192 130.325 cv
56.606 130.325 56.4888 130.339 56.3755 130.364 cv
56.2632 130.392 56.145 130.431 56.0278 130.482 cv
56.0278 128.89 li
f
88.9487 127.304 mo
88.9487 125.854 li
f
88.9487 127.304 mo
88.9487 125.854 li
@
88.9487 2.02734 mo
88.9487 3.47705 li
f
88.9487 2.02734 mo
88.9487 3.47705 li
@
87.1011 131.7 mo
87.8013 131.7 li
87.8013 129.282 li
87.0405 129.435 li
87.0405 129.042 li
87.7974 128.89 li
88.228 128.89 li
88.228 131.7 li
88.9282 131.7 li
88.9282 132.062 li
87.1011 132.062 li
87.1011 131.7 li
cp
f
90.7114 129.173 mo
90.4897 129.173 90.3247 129.282 90.2114 129.499 cv
90.0981 129.717 90.0464 130.043 90.0464 130.478 cv
90.0464 130.913 90.0981 131.239 90.2114 131.456 cv
90.3247 131.675 90.4897 131.783 90.7114 131.783 cv
90.9331 131.783 91.0981 131.675 91.2114 131.456 cv
91.3208 131.239 91.3774 130.913 91.3774 130.478 cv
91.3774 130.043 91.3208 129.717 91.2114 129.499 cv
91.0981 129.282 90.9331 129.173 90.7114 129.173 cv
90.7114 128.834 mo
91.064 128.834 91.3335 128.978 91.5249 129.256 cv
91.7124 129.538 91.8081 129.947 91.8081 130.478 cv
91.8081 131.013 91.7124 131.422 91.5249 131.7 cv
91.3335 131.979 91.064 132.118 90.7114 132.118 cv
90.355 132.118 90.0806 131.979 89.894 131.7 cv
89.7065 131.422 89.6157 131.013 89.6157 130.478 cv
89.6157 129.947 89.7065 129.538 89.894 129.256 cv
90.0806 128.978 90.355 128.834 90.7114 128.834 cv
f
121.312 127.304 mo
121.312 125.854 li
f
121.312 127.304 mo
121.312 125.854 li
@
121.312 2.02734 mo
121.312 3.47705 li
f
121.312 2.02734 mo
121.312 3.47705 li
@
119.509 131.7 mo
120.209 131.7 li
120.209 129.282 li
119.449 129.435 li
119.449 129.042 li
120.206 128.89 li
120.636 128.89 li
120.636 131.7 li
121.336 131.7 li
121.336 132.062 li
119.509 132.062 li
119.509 131.7 li
cp
f
122.207 128.89 mo
123.89 128.89 li
123.89 129.251 li
122.598 129.251 li
122.598 130.03 li
122.659 130.009 122.724 129.991 122.786 129.982 cv
122.846 129.974 122.911 129.965 122.972 129.965 cv
123.325 129.965 123.603 130.064 123.812 130.257 cv
124.021 130.452 124.125 130.713 124.125 131.044 cv
124.125 131.388 124.016 131.652 123.803 131.84 cv
123.589 132.026 123.29 132.118 122.907 132.118 cv
122.772 132.118 122.637 132.104 122.499 132.087 cv
122.359 132.065 122.219 132.035 122.072 131.987 cv
122.072 131.557 li
122.198 131.626 122.329 131.679 122.467 131.714 cv
122.602 131.748 122.746 131.761 122.898 131.761 cv
123.141 131.761 123.337 131.7 123.481 131.57 cv
123.62 131.439 123.694 131.265 123.694 131.044 cv
123.694 130.826 123.62 130.651 123.481 130.521 cv
123.337 130.392 123.141 130.325 122.898 130.325 cv
122.786 130.325 122.667 130.339 122.555 130.364 cv
122.441 130.392 122.324 130.431 122.207 130.482 cv
122.207 128.89 li
f
153.675 127.304 mo
153.675 125.854 li
f
153.675 127.304 mo
153.675 125.854 li
@
153.675 2.02734 mo
153.675 3.47705 li
f
153.675 2.02734 mo
153.675 3.47705 li
@
152.043 131.7 mo
153.541 131.7 li
153.541 132.062 li
151.526 132.062 li
151.526 131.7 li
151.688 131.535 151.909 131.309 152.192 131.021 cv
152.47 130.739 152.649 130.557 152.722 130.474 cv
152.862 130.321 152.958 130.19 153.009 130.082 cv
153.062 129.978 153.092 129.869 153.092 129.765 cv
153.092 129.599 153.032 129.46 152.914 129.355 cv
152.796 129.251 152.644 129.194 152.453 129.194 cv
152.318 129.194 152.174 129.221 152.027 129.265 cv
151.878 129.312 151.718 129.382 151.548 129.478 cv
151.548 129.042 li
151.722 128.974 151.883 128.921 152.031 128.886 cv
152.178 128.852 152.318 128.834 152.444 128.834 cv
152.77 128.834 153.032 128.917 153.227 129.081 cv
153.422 129.247 153.523 129.464 153.523 129.738 cv
153.523 129.869 153.497 129.995 153.449 130.108 cv
153.401 130.226 153.314 130.364 153.184 130.521 cv
153.149 130.565 153.036 130.683 152.844 130.878 cv
152.653 131.073 152.387 131.348 152.043 131.7 cv
f
155.359 129.173 mo
155.137 129.173 154.971 129.282 154.858 129.499 cv
154.746 129.717 154.693 130.043 154.693 130.478 cv
154.693 130.913 154.746 131.239 154.858 131.456 cv
154.971 131.675 155.137 131.783 155.359 131.783 cv
155.581 131.783 155.746 131.675 155.859 131.456 cv
155.967 131.239 156.024 130.913 156.024 130.478 cv
156.024 130.043 155.967 129.717 155.859 129.499 cv
155.746 129.282 155.581 129.173 155.359 129.173 cv
155.359 128.834 mo
155.711 128.834 155.981 128.978 156.172 129.256 cv
156.359 129.538 156.455 129.947 156.455 130.478 cv
156.455 131.013 156.359 131.422 156.172 131.7 cv
155.981 131.979 155.711 132.118 155.359 132.118 cv
155.002 132.118 154.728 131.979 154.541 131.7 cv
154.354 131.422 154.262 131.013 154.262 130.478 cv
154.262 129.947 154.354 129.538 154.541 129.256 cv
154.728 128.978 155.002 128.834 155.359 128.834 cv
f
186.039 127.304 mo
186.039 125.854 li
f
186.039 127.304 mo
186.039 125.854 li
@
186.039 2.02734 mo
186.039 3.47705 li
f
186.039 2.02734 mo
186.039 3.47705 li
@
184.453 131.7 mo
185.949 131.7 li
185.949 132.062 li
183.935 132.062 li
183.935 131.7 li
184.095 131.535 184.318 131.309 184.6 131.021 cv
184.878 130.739 185.057 130.557 185.131 130.474 cv
185.27 130.321 185.366 130.19 185.418 130.082 cv
185.47 129.978 185.5 129.869 185.5 129.765 cv
185.5 129.599 185.44 129.46 185.322 129.355 cv
185.205 129.251 185.052 129.194 184.861 129.194 cv
184.726 129.194 184.583 129.221 184.435 129.265 cv
184.287 129.312 184.126 129.382 183.957 129.478 cv
183.957 129.042 li
184.13 128.974 184.292 128.921 184.439 128.886 cv
184.587 128.852 184.726 128.834 184.852 128.834 cv
185.179 128.834 185.44 128.917 185.635 129.081 cv
185.832 129.247 185.931 129.464 185.931 129.738 cv
185.931 129.869 185.905 129.995 185.857 130.108 cv
185.809 130.226 185.722 130.364 185.592 130.521 cv
185.557 130.565 185.444 130.683 185.252 130.878 cv
185.061 131.073 184.796 131.348 184.453 131.7 cv
f
186.853 128.89 mo
188.537 128.89 li
188.537 129.251 li
187.245 129.251 li
187.245 130.03 li
187.306 130.009 187.372 129.991 187.432 129.982 cv
187.493 129.974 187.558 129.965 187.619 129.965 cv
187.971 129.965 188.25 130.064 188.458 130.257 cv
188.667 130.452 188.772 130.713 188.772 131.044 cv
188.772 131.388 188.663 131.652 188.45 131.84 cv
188.237 132.026 187.937 132.118 187.554 132.118 cv
187.418 132.118 187.284 132.104 187.145 132.087 cv
187.005 132.065 186.867 132.035 186.718 131.987 cv
186.718 131.557 li
186.844 131.626 186.975 131.679 187.115 131.714 cv
187.25 131.748 187.393 131.761 187.545 131.761 cv
187.789 131.761 187.985 131.7 188.128 131.57 cv
188.267 131.439 188.341 131.265 188.341 131.044 cv
188.341 130.826 188.267 130.651 188.128 130.521 cv
187.985 130.392 187.789 130.325 187.545 130.325 cv
187.432 130.325 187.314 130.339 187.202 130.364 cv
187.088 130.392 186.971 130.431 186.853 130.482 cv
186.853 128.89 li
f
88.98 134.917 mo
91.6597 134.917 li
91.6597 135.278 li
90.5327 135.278 li
90.5327 138.088 li
90.1021 138.088 li
90.1021 135.278 li
88.98 135.278 li
88.98 134.917 li
cp
f
92.0552 135.708 mo
92.4468 135.708 li
92.4468 138.087 li
92.0552 138.087 li
92.0552 135.708 li
cp
92.0552 134.782 mo
92.4468 134.782 li
92.4468 135.278 li
92.0552 135.278 li
92.0552 134.782 li
cp
f
94.978 135.8 mo
94.978 136.165 li
94.8657 136.104 94.7563 136.062 94.6431 136.03 cv
94.5308 136 94.4214 135.982 94.3081 135.982 cv
94.0562 135.982 93.856 136.065 93.7173 136.226 cv
93.5776 136.388 93.5083 136.613 93.5083 136.9 cv
93.5083 137.192 93.5776 137.418 93.7173 137.579 cv
93.856 137.739 94.0562 137.817 94.3081 137.817 cv
94.4214 137.817 94.5308 137.805 94.6431 137.774 cv
94.7563 137.744 94.8657 137.696 94.978 137.636 cv
94.978 137.997 li
94.8657 138.049 94.7524 138.088 94.6392 138.109 cv
94.522 138.132 94.395 138.145 94.2651 138.145 cv
93.9087 138.145 93.6216 138.036 93.4126 137.81 cv
93.1997 137.588 93.0952 137.283 93.0952 136.9 cv
93.0952 136.513 93.1997 136.209 93.4126 135.987 cv
93.6255 135.765 93.9165 135.651 94.2915 135.651 cv
94.4126 135.651 94.5308 135.665 94.6431 135.69 cv
94.7563 135.717 94.8696 135.752 94.978 135.8 cv
f
95.644 134.782 mo
96.0356 134.782 li
96.0356 136.735 li
97.2007 135.708 li
97.7017 135.708 li
96.4399 136.821 li
97.7534 138.088 li
97.2446 138.088 li
96.0356 136.927 li
96.0356 138.088 li
95.644 138.088 li
95.644 134.782 li
cp
f
100.211 136.8 mo
100.211 136.991 li
98.4146 136.991 li
98.4321 137.261 98.5103 137.47 98.6577 137.609 cv
98.8013 137.749 99.0015 137.817 99.2632 137.817 cv
99.4106 137.817 99.5591 137.801 99.6978 137.766 cv
99.8374 137.731 99.981 137.675 100.12 137.597 cv
100.12 137.966 li
99.981 138.026 99.8374 138.075 99.689 138.101 cv
99.5415 138.127 99.3892 138.145 99.2407 138.145 cv
98.8579 138.145 98.5581 138.036 98.3364 137.817 cv
98.1147 137.601 98.0054 137.3 98.0054 136.922 cv
98.0054 136.534 98.1099 136.226 98.3188 135.995 cv
98.5278 135.77 98.8149 135.651 99.1714 135.651 cv
99.4937 135.651 99.7456 135.757 99.9331 135.961 cv
100.116 136.169 100.211 136.448 100.211 136.8 cv
99.8198 136.687 mo
99.8149 136.474 99.7544 136.304 99.6411 136.173 cv
99.5239 136.048 99.3677 135.982 99.1763 135.982 cv
98.9585 135.982 98.7847 136.048 98.6538 136.169 cv
98.5229 136.291 98.4448 136.466 98.4272 136.687 cv
99.8198 136.687 li
f
101.238 135.034 mo
101.238 135.708 li
102.042 135.708 li
102.042 136.013 li
101.238 136.013 li
101.238 137.305 li
101.238 137.501 101.264 137.627 101.316 137.679 cv
101.369 137.735 101.477 137.762 101.642 137.762 cv
102.042 137.762 li
102.042 138.088 li
101.642 138.088 li
101.338 138.088 101.129 138.031 101.016 137.918 cv
100.903 137.806 100.846 137.601 100.846 137.305 cv
100.846 136.013 li
100.559 136.013 li
100.559 135.708 li
100.846 135.708 li
100.846 135.034 li
101.238 135.034 li
f
104.318 137.731 mo
104.318 138.988 li
103.926 138.988 li
103.926 135.708 li
104.318 135.708 li
104.318 136.069 li
104.396 135.931 104.5 135.825 104.626 135.757 cv
104.752 135.687 104.905 135.651 105.079 135.651 cv
105.366 135.651 105.601 135.77 105.784 135.995 cv
105.961 136.226 106.053 136.526 106.053 136.9 cv
106.053 137.274 105.961 137.579 105.784 137.805 cv
105.601 138.031 105.366 138.145 105.079 138.145 cv
104.905 138.145 104.752 138.11 104.626 138.044 cv
104.5 137.979 104.396 137.875 104.318 137.731 cv
105.649 136.9 mo
105.649 136.613 105.587 136.392 105.47 136.226 cv
105.348 136.062 105.187 135.978 104.983 135.978 cv
104.774 135.978 104.613 136.062 104.496 136.226 cv
104.374 136.392 104.318 136.613 104.318 136.9 cv
104.318 137.188 104.374 137.413 104.496 137.579 cv
104.613 137.744 104.774 137.823 104.983 137.823 cv
105.187 137.823 105.348 137.744 105.47 137.579 cv
105.587 137.413 105.649 137.188 105.649 136.9 cv
f
108.081 136.073 mo
108.037 136.048 107.989 136.03 107.937 136.017 cv
107.884 136.009 107.828 136 107.767 136 cv
107.544 136 107.375 136.073 107.257 136.218 cv
107.136 136.36 107.08 136.565 107.08 136.835 cv
107.08 138.088 li
106.688 138.088 li
106.688 135.708 li
107.08 135.708 li
107.08 136.078 li
107.158 135.935 107.267 135.825 107.397 135.757 cv
107.528 135.687 107.689 135.651 107.879 135.651 cv
107.906 135.651 107.937 135.656 107.971 135.656 cv
108.001 135.66 108.037 135.665 108.081 135.674 cv
108.081 136.073 li
f
108.489 135.708 mo
108.88 135.708 li
108.88 138.087 li
108.489 138.087 li
108.489 135.708 li
cp
108.489 134.782 mo
108.88 134.782 li
108.88 135.278 li
108.489 135.278 li
108.489 134.782 li
cp
f
111.412 135.8 mo
111.412 136.165 li
111.299 136.104 111.19 136.062 111.077 136.03 cv
110.964 136 110.855 135.982 110.742 135.982 cv
110.49 135.982 110.29 136.065 110.151 136.226 cv
110.011 136.388 109.942 136.613 109.942 136.9 cv
109.942 137.192 110.011 137.418 110.151 137.579 cv
110.29 137.739 110.49 137.817 110.742 137.817 cv
110.855 137.817 110.964 137.805 111.077 137.774 cv
111.19 137.744 111.299 137.696 111.412 137.636 cv
111.412 137.997 li
111.299 138.049 111.186 138.088 111.073 138.109 cv
110.956 138.132 110.83 138.145 110.699 138.145 cv
110.342 138.145 110.055 138.036 109.846 137.81 cv
109.633 137.588 109.529 137.283 109.529 136.9 cv
109.529 136.513 109.633 136.209 109.846 135.987 cv
110.059 135.765 110.351 135.651 110.725 135.651 cv
110.846 135.651 110.964 135.665 111.077 135.69 cv
111.19 135.717 111.303 135.752 111.412 135.8 cv
f
114.126 136.8 mo
114.126 136.991 li
112.33 136.991 li
112.347 137.261 112.425 137.47 112.574 137.609 cv
112.717 137.749 112.917 137.817 113.178 137.817 cv
113.326 137.817 113.474 137.801 113.613 137.766 cv
113.752 137.731 113.896 137.675 114.035 137.597 cv
114.035 137.966 li
113.896 138.026 113.752 138.075 113.604 138.101 cv
113.457 138.127 113.304 138.145 113.157 138.145 cv
112.774 138.145 112.473 138.036 112.251 137.817 cv
112.03 137.601 111.921 137.3 111.921 136.922 cv
111.921 136.534 112.026 136.226 112.234 135.995 cv
112.443 135.77 112.73 135.651 113.086 135.651 cv
113.409 135.651 113.661 135.757 113.848 135.961 cv
114.031 136.169 114.126 136.448 114.126 136.8 cv
113.735 136.687 mo
113.731 136.474 113.669 136.304 113.556 136.173 cv
113.439 136.048 113.283 135.982 113.091 135.982 cv
112.874 135.982 112.7 136.048 112.569 136.169 cv
112.439 136.291 112.361 136.466 112.343 136.687 cv
113.735 136.687 li
f
117.088 134.786 mo
116.897 135.116 116.758 135.438 116.667 135.757 cv
116.571 136.073 116.528 136.396 116.528 136.722 cv
116.528 137.053 116.571 137.374 116.667 137.692 cv
116.758 138.014 116.897 138.331 117.088 138.657 cv
116.75 138.657 li
116.537 138.323 116.375 138.001 116.271 137.679 cv
116.167 137.356 116.115 137.04 116.115 136.722 cv
116.115 136.409 116.167 136.091 116.271 135.77 cv
116.375 135.447 116.532 135.121 116.75 134.786 cv
117.088 134.786 li
f
118.907 138.723 mo
118.694 138.723 li
118.694 138.088 li
118.542 138.088 118.393 138.07 118.246 138.036 cv
118.098 138.005 117.946 137.958 117.797 137.892 cv
117.797 137.509 li
117.941 137.601 118.089 137.671 118.237 137.714 cv
118.385 137.762 118.537 137.788 118.694 137.788 cv
118.694 136.817 li
118.38 136.766 118.15 136.679 118.01 136.557 cv
117.868 136.435 117.797 136.27 117.797 136.057 cv
117.797 135.831 117.872 135.647 118.028 135.513 cv
118.18 135.382 118.402 135.304 118.694 135.282 cv
118.694 134.782 li
118.907 134.782 li
118.907 135.278 li
119.038 135.282 119.164 135.295 119.286 135.317 cv
119.408 135.343 119.529 135.374 119.651 135.408 cv
119.651 135.778 li
119.529 135.722 119.408 135.679 119.286 135.644 cv
119.164 135.608 119.038 135.591 118.907 135.582 cv
118.907 136.491 li
119.229 136.544 119.463 136.631 119.616 136.757 cv
119.764 136.888 119.842 137.062 119.842 137.278 cv
119.842 137.519 119.759 137.705 119.598 137.845 cv
119.438 137.983 119.207 138.065 118.907 138.083 cv
118.907 138.723 li
118.694 136.452 mo
118.694 135.582 li
118.528 135.6 118.402 135.647 118.315 135.722 cv
118.228 135.8 118.189 135.899 118.189 136.021 cv
118.189 136.144 118.228 136.239 118.307 136.309 cv
118.385 136.378 118.516 136.426 118.694 136.452 cv
118.907 136.86 mo
118.907 137.778 li
119.085 137.757 119.22 137.705 119.311 137.627 cv
119.403 137.548 119.451 137.448 119.451 137.317 cv
119.451 137.196 119.408 137.097 119.321 137.022 cv
119.233 136.948 119.094 136.896 118.907 136.86 cv
f
120.551 134.786 mo
120.891 134.786 li
121.099 135.121 121.26 135.447 121.365 135.77 cv
121.469 136.091 121.526 136.409 121.526 136.722 cv
121.526 137.04 121.469 137.356 121.365 137.679 cv
121.26 138.001 121.099 138.323 120.891 138.657 cv
120.551 138.657 li
120.739 138.331 120.877 138.014 120.973 137.692 cv
121.064 137.374 121.112 137.053 121.112 136.722 cv
121.112 136.396 121.064 136.073 120.973 135.757 cv
120.877 135.438 120.739 135.116 120.551 134.786 cv
f
24.2231 127.304 mo
25.6724 127.304 li
f
24.2231 127.304 mo
25.6724 127.304 li
@
186.039 127.304 mo
184.588 127.304 li
f
186.039 127.304 mo
184.588 127.304 li
@
10.2085 128.144 mo
10.9087 128.144 li
10.9087 125.725 li
10.1479 125.877 li
10.1479 125.485 li
10.9048 125.333 li
11.3354 125.333 li
11.3354 128.144 li
12.0356 128.144 li
12.0356 128.505 li
10.2085 128.505 li
10.2085 128.144 li
cp
f
13.8198 125.616 mo
13.5972 125.616 13.4321 125.725 13.3188 125.942 cv
13.2056 126.159 13.1538 126.486 13.1538 126.921 cv
13.1538 127.356 13.2056 127.683 13.3188 127.899 cv
13.4321 128.117 13.5972 128.226 13.8198 128.226 cv
14.0415 128.226 14.2065 128.117 14.3198 127.899 cv
14.4282 127.683 14.4849 127.356 14.4849 126.921 cv
14.4849 126.486 14.4282 126.159 14.3198 125.942 cv
14.2065 125.725 14.0415 125.616 13.8198 125.616 cv
13.8198 125.276 mo
14.1714 125.276 14.4419 125.421 14.6333 125.698 cv
14.8198 125.981 14.9155 126.391 14.9155 126.921 cv
14.9155 127.456 14.8198 127.865 14.6333 128.144 cv
14.4419 128.422 14.1714 128.562 13.8198 128.562 cv
13.4624 128.562 13.189 128.422 13.0015 128.144 cv
12.8149 127.865 12.7231 127.456 12.7231 126.921 cv
12.7231 126.391 12.8149 125.981 13.0015 125.698 cv
13.189 125.421 13.4624 125.276 13.8198 125.276 cv
f
16.5854 125.616 mo
16.3638 125.616 16.1987 125.725 16.0854 125.942 cv
15.9722 126.159 15.9204 126.486 15.9204 126.921 cv
15.9204 127.356 15.9722 127.683 16.0854 127.899 cv
16.1987 128.117 16.3638 128.226 16.5854 128.226 cv
16.8081 128.226 16.9731 128.117 17.0864 127.899 cv
17.1948 127.683 17.2515 127.356 17.2515 126.921 cv
17.2515 126.486 17.1948 126.159 17.0864 125.942 cv
16.9731 125.725 16.8081 125.616 16.5854 125.616 cv
16.5854 125.276 mo
16.938 125.276 17.2075 125.421 17.3989 125.698 cv
17.5864 125.981 17.6821 126.391 17.6821 126.921 cv
17.6821 127.456 17.5864 127.865 17.3989 128.144 cv
17.2075 128.422 16.938 128.562 16.5854 128.562 cv
16.229 128.562 15.9556 128.422 15.7681 128.144 cv
15.5806 127.865 15.4897 127.456 15.4897 126.921 cv
15.4897 126.391 15.5806 125.981 15.7681 125.698 cv
15.9556 125.421 16.229 125.276 16.5854 125.276 cv
f
19.3521 125.616 mo
19.1304 125.616 18.9653 125.725 18.8521 125.942 cv
18.7388 126.159 18.687 126.486 18.687 126.921 cv
18.687 127.356 18.7388 127.683 18.8521 127.899 cv
18.9653 128.117 19.1304 128.226 19.3521 128.226 cv
19.5737 128.226 19.7397 128.117 19.8521 127.899 cv
19.9614 127.683 20.0181 127.356 20.0181 126.921 cv
20.0181 126.486 19.9614 126.159 19.8521 125.942 cv
19.7397 125.725 19.5737 125.616 19.3521 125.616 cv
19.3521 125.276 mo
19.7046 125.276 19.9741 125.421 20.1655 125.698 cv
20.353 125.981 20.4487 126.391 20.4487 126.921 cv
20.4487 127.456 20.353 127.865 20.1655 128.144 cv
19.9741 128.422 19.7046 128.562 19.3521 128.562 cv
18.9956 128.562 18.7212 128.422 18.5347 128.144 cv
18.3472 127.865 18.2563 127.456 18.2563 126.921 cv
18.2563 126.391 18.3472 125.981 18.5347 125.698 cv
18.7212 125.421 18.9956 125.276 19.3521 125.276 cv
f
22.1187 125.616 mo
21.897 125.616 21.7319 125.725 21.6187 125.942 cv
21.5054 126.159 21.4536 126.486 21.4536 126.921 cv
21.4536 127.356 21.5054 127.683 21.6187 127.899 cv
21.7319 128.117 21.897 128.226 22.1187 128.226 cv
22.3403 128.226 22.5063 128.117 22.6196 127.899 cv
22.728 127.683 22.7847 127.356 22.7847 126.921 cv
22.7847 126.486 22.728 126.159 22.6196 125.942 cv
22.5063 125.725 22.3403 125.616 22.1187 125.616 cv
22.1187 125.276 mo
22.4712 125.276 22.7407 125.421 22.9321 125.698 cv
23.1196 125.981 23.2153 126.391 23.2153 126.921 cv
23.2153 127.456 23.1196 127.865 22.9321 128.144 cv
22.7407 128.422 22.4712 128.562 22.1187 128.562 cv
21.7622 128.562 21.4878 128.422 21.3013 128.144 cv
21.1138 127.865 21.0229 127.456 21.0229 126.921 cv
21.0229 126.391 21.1138 125.981 21.3013 125.698 cv
21.4878 125.421 21.7622 125.276 22.1187 125.276 cv
f
gsave
5.22412 129.53 mo
11.6274 129.53 li
11.6274 124.464 li
5.22412 124.464 li
5.22412 129.53 li
cp
clp
6.48584 126.96 mo
9.2085 126.96 li
9.2085 127.321 li
6.48584 127.321 li
6.48584 126.96 li
cp
f
grestore
24.2231 102.248 mo
25.6724 102.248 li
f
24.2231 102.248 mo
25.6724 102.248 li
@
186.039 102.248 mo
184.588 102.248 li
f
186.039 102.248 mo
184.588 102.248 li
@
12.9087 100.278 mo
14.5923 100.278 li
14.5923 100.639 li
13.3003 100.639 li
13.3003 101.418 li
13.3608 101.396 13.4263 101.378 13.4878 101.37 cv
13.5483 101.361 13.6138 101.353 13.6743 101.353 cv
14.0269 101.353 14.3052 101.452 14.5142 101.644 cv
14.7231 101.84 14.8276 102.101 14.8276 102.431 cv
14.8276 102.775 14.7183 103.04 14.5054 103.228 cv
14.2925 103.414 13.9917 103.505 13.6089 103.505 cv
13.4741 103.505 13.3394 103.493 13.2007 103.475 cv
13.061 103.454 12.9224 103.423 12.7739 103.375 cv
12.7739 102.944 li
12.8999 103.014 13.0308 103.066 13.1694 103.101 cv
13.3052 103.136 13.4487 103.149 13.6001 103.149 cv
13.8442 103.149 14.0396 103.088 14.1831 102.958 cv
14.3228 102.827 14.397 102.653 14.397 102.431 cv
14.397 102.214 14.3228 102.04 14.1831 101.909 cv
14.0396 101.779 13.8442 101.713 13.6001 101.713 cv
13.4878 101.713 13.3696 101.727 13.2573 101.752 cv
13.144 101.779 13.0259 101.818 12.9087 101.87 cv
12.9087 100.278 li
f
16.5894 100.561 mo
16.3667 100.561 16.2017 100.669 16.0884 100.887 cv
15.9761 101.104 15.9233 101.431 15.9233 101.866 cv
15.9233 102.301 15.9761 102.627 16.0884 102.845 cv
16.2017 103.062 16.3667 103.171 16.5894 103.171 cv
16.811 103.171 16.9761 103.062 17.0894 102.845 cv
17.1978 102.627 17.2544 102.301 17.2544 101.866 cv
17.2544 101.431 17.1978 101.104 17.0894 100.887 cv
16.9761 100.669 16.811 100.561 16.5894 100.561 cv
16.5894 100.222 mo
16.9409 100.222 17.2114 100.365 17.4028 100.644 cv
17.5894 100.926 17.6851 101.335 17.6851 101.866 cv
17.6851 102.401 17.5894 102.81 17.4028 103.088 cv
17.2114 103.366 16.9409 103.506 16.5894 103.506 cv
16.2319 103.506 15.9585 103.366 15.771 103.088 cv
15.5845 102.81 15.4927 102.401 15.4927 101.866 cv
15.4927 101.335 15.5845 100.926 15.771 100.644 cv
15.9585 100.365 16.2319 100.222 16.5894 100.222 cv
f
19.356 100.561 mo
19.1333 100.561 18.9683 100.669 18.855 100.887 cv
18.7417 101.104 18.6899 101.431 18.6899 101.866 cv
18.6899 102.301 18.7417 102.627 18.855 102.845 cv
18.9683 103.062 19.1333 103.171 19.356 103.171 cv
19.5776 103.171 19.7427 103.062 19.856 102.845 cv
19.9644 102.627 20.021 102.301 20.021 101.866 cv
20.021 101.431 19.9644 101.104 19.856 100.887 cv
19.7427 100.669 19.5776 100.561 19.356 100.561 cv
19.356 100.222 mo
19.7075 100.222 19.9771 100.365 20.1685 100.644 cv
20.356 100.926 20.4517 101.335 20.4517 101.866 cv
20.4517 102.401 20.356 102.81 20.1685 103.088 cv
19.9771 103.366 19.7075 103.506 19.356 103.506 cv
18.9985 103.506 18.7251 103.366 18.5376 103.088 cv
18.3511 102.81 18.2593 102.401 18.2593 101.866 cv
18.2593 101.335 18.3511 100.926 18.5376 100.644 cv
18.7251 100.365 18.9985 100.222 19.356 100.222 cv
f
22.1216 100.561 mo
21.8999 100.561 21.7349 100.669 21.6216 100.887 cv
21.5083 101.104 21.4565 101.431 21.4565 101.866 cv
21.4565 102.301 21.5083 102.627 21.6216 102.845 cv
21.7349 103.062 21.8999 103.171 22.1216 103.171 cv
22.3442 103.171 22.5093 103.062 22.6226 102.845 cv
22.731 102.627 22.7876 102.301 22.7876 101.866 cv
22.7876 101.431 22.731 101.104 22.6226 100.887 cv
22.5093 100.669 22.3442 100.561 22.1216 100.561 cv
22.1216 100.222 mo
22.4741 100.222 22.7437 100.365 22.9351 100.644 cv
23.1226 100.926 23.2183 101.335 23.2183 101.866 cv
23.2183 102.401 23.1226 102.81 22.9351 103.088 cv
22.7437 103.366 22.4741 103.506 22.1216 103.506 cv
21.7651 103.506 21.4907 103.366 21.3042 103.088 cv
21.1167 102.81 21.0259 102.401 21.0259 101.866 cv
21.0259 101.335 21.1167 100.926 21.3042 100.644 cv
21.4907 100.365 21.7651 100.222 22.1216 100.222 cv
f
gsave
7.99463 104.476 mo
14.397 104.476 li
14.397 99.4077 li
7.99463 99.4077 li
7.99463 104.476 li
cp
clp
9.25537 101.905 mo
11.978 101.905 li
11.978 102.266 li
9.25537 102.266 li
9.25537 101.905 li
cp
f
grestore
24.2231 77.1929 mo
25.6724 77.1929 li
f
24.2231 77.1929 mo
25.6724 77.1929 li
@
186.039 77.1929 mo
184.588 77.1929 li
f
186.039 77.1929 mo
184.588 77.1929 li
@
21.9644 75.5054 mo
21.7427 75.5054 21.5767 75.6143 21.4644 75.8315 cv
21.3511 76.0493 21.2983 76.3755 21.2983 76.8105 cv
21.2983 77.2451 21.3511 77.5718 21.4644 77.7891 cv
21.5767 78.0068 21.7427 78.1152 21.9644 78.1152 cv
22.186 78.1152 22.3511 78.0068 22.4644 77.7891 cv
22.5728 77.5718 22.6294 77.2451 22.6294 76.8105 cv
22.6294 76.3755 22.5728 76.0493 22.4644 75.8315 cv
22.3511 75.6143 22.186 75.5054 21.9644 75.5054 cv
21.9644 75.166 mo
22.3169 75.166 22.5864 75.3096 22.7778 75.5884 cv
22.9644 75.8711 23.0601 76.2798 23.0601 76.8105 cv
23.0601 77.3457 22.9644 77.7544 22.7778 78.0332 cv
22.5864 78.311 22.3169 78.4502 21.9644 78.4502 cv
21.6079 78.4502 21.3335 78.311 21.146 78.0332 cv
20.9595 77.7544 20.8677 77.3457 20.8677 76.8105 cv
20.8677 76.2798 20.9595 75.8711 21.146 75.5884 cv
21.3335 75.3096 21.6079 75.166 21.9644 75.166 cv
f
24.2231 52.1377 mo
25.6724 52.1377 li
f
24.2231 52.1377 mo
25.6724 52.1377 li
@
186.039 52.1377 mo
184.588 52.1377 li
f
186.039 52.1377 mo
184.588 52.1377 li
@
12.7876 50.1675 mo
14.4702 50.1675 li
14.4702 50.5283 li
13.1782 50.5283 li
13.1782 51.3071 li
13.2397 51.2852 13.3052 51.2681 13.3657 51.2593 cv
13.4263 51.2505 13.4917 51.2417 13.5522 51.2417 cv
13.9048 51.2417 14.1831 51.3418 14.3921 51.5332 cv
14.6011 51.729 14.7056 51.9902 14.7056 52.3208 cv
14.7056 52.6641 14.5962 52.9297 14.3833 53.1167 cv
14.1704 53.3037 13.8706 53.395 13.4878 53.395 cv
13.353 53.395 13.2173 53.3818 13.0786 53.3647 cv
12.939 53.3428 12.8003 53.3125 12.6519 53.2646 cv
12.6519 52.834 li
12.7788 52.9033 12.9087 52.9556 13.0483 52.9902 cv
13.1831 53.0254 13.3267 53.0381 13.479 53.0381 cv
13.7222 53.0381 13.9185 52.9775 14.062 52.8467 cv
14.2007 52.7163 14.2749 52.5425 14.2749 52.3208 cv
14.2749 52.103 14.2007 51.9292 14.062 51.7988 cv
13.9185 51.668 13.7222 51.603 13.479 51.603 cv
13.3657 51.603 13.2485 51.6157 13.1353 51.6421 cv
13.022 51.668 12.9048 51.707 12.7876 51.7593 cv
12.7876 50.1675 li
f
16.4673 50.4502 mo
16.2456 50.4502 16.0806 50.5591 15.9673 50.7764 cv
15.854 50.9941 15.8013 51.3203 15.8013 51.7554 cv
15.8013 52.1904 15.854 52.5166 15.9673 52.7339 cv
16.0806 52.9512 16.2456 53.0601 16.4673 53.0601 cv
16.689 53.0601 16.854 52.9512 16.9673 52.7339 cv
17.0767 52.5166 17.1323 52.1904 17.1323 51.7554 cv
17.1323 51.3203 17.0767 50.9941 16.9673 50.7764 cv
16.854 50.5591 16.689 50.4502 16.4673 50.4502 cv
16.4673 50.1108 mo
16.8198 50.1108 17.0894 50.2544 17.2808 50.5327 cv
17.4673 50.8154 17.563 51.2246 17.563 51.7554 cv
17.563 52.29 17.4673 52.6992 17.2808 52.9775 cv
17.0894 53.2559 16.8198 53.395 16.4673 53.395 cv
16.1108 53.395 15.8364 53.2559 15.6499 52.9775 cv
15.4624 52.6992 15.3716 52.29 15.3716 51.7554 cv
15.3716 51.2246 15.4624 50.8154 15.6499 50.5327 cv
15.8364 50.2544 16.1108 50.1108 16.4673 50.1108 cv
f
19.2339 50.4502 mo
19.0122 50.4502 18.8462 50.5591 18.7339 50.7764 cv
18.6206 50.9941 18.5679 51.3203 18.5679 51.7554 cv
18.5679 52.1904 18.6206 52.5166 18.7339 52.7339 cv
18.8462 52.9512 19.0122 53.0601 19.2339 53.0601 cv
19.4556 53.0601 19.6206 52.9512 19.7339 52.7339 cv
19.8423 52.5166 19.8989 52.1904 19.8989 51.7554 cv
19.8989 51.3203 19.8423 50.9941 19.7339 50.7764 cv
19.6206 50.5591 19.4556 50.4502 19.2339 50.4502 cv
19.2339 50.1108 mo
19.5864 50.1108 19.856 50.2544 20.0474 50.5327 cv
20.2339 50.8154 20.3296 51.2246 20.3296 51.7554 cv
20.3296 52.29 20.2339 52.6992 20.0474 52.9775 cv
19.856 53.2559 19.5864 53.395 19.2339 53.395 cv
18.8774 53.395 18.603 53.2559 18.4155 52.9775 cv
18.229 52.6992 18.1372 52.29 18.1372 51.7554 cv
18.1372 51.2246 18.229 50.8154 18.4155 50.5327 cv
18.603 50.2544 18.8774 50.1108 19.2339 50.1108 cv
f
22.0005 50.4502 mo
21.7788 50.4502 21.6128 50.5591 21.4995 50.7764 cv
21.3872 50.9941 21.3345 51.3203 21.3345 51.7554 cv
21.3345 52.1904 21.3872 52.5166 21.4995 52.7339 cv
21.6128 52.9512 21.7788 53.0601 22.0005 53.0601 cv
22.2222 53.0601 22.3872 52.9512 22.5005 52.7339 cv
22.6089 52.5166 22.6655 52.1904 22.6655 51.7554 cv
22.6655 51.3203 22.6089 50.9941 22.5005 50.7764 cv
22.3872 50.5591 22.2222 50.4502 22.0005 50.4502 cv
22.0005 50.1108 mo
22.3521 50.1108 22.6226 50.2544 22.814 50.5327 cv
23.0005 50.8154 23.0962 51.2246 23.0962 51.7554 cv
23.0962 52.29 23.0005 52.6992 22.814 52.9775 cv
22.6226 53.2559 22.3521 53.395 22.0005 53.395 cv
21.6431 53.395 21.3696 53.2559 21.1821 52.9775 cv
20.9956 52.6992 20.9038 52.29 20.9038 51.7554 cv
20.9038 51.2246 20.9956 50.8154 21.1821 50.5327 cv
21.3696 50.2544 21.6431 50.1108 22.0005 50.1108 cv
f
24.2231 27.0825 mo
25.6724 27.0825 li
f
24.2231 27.0825 mo
25.6724 27.0825 li
@
186.039 27.0825 mo
184.588 27.0825 li
f
186.039 27.0825 mo
184.588 27.0825 li
@
10.229 27.9224 mo
10.9292 27.9224 li
10.9292 25.5039 li
10.1675 25.6558 li
10.1675 25.2646 li
10.9243 25.1123 li
11.355 25.1123 li
11.355 27.9224 li
12.0552 27.9224 li
12.0552 28.2832 li
10.229 28.2832 li
10.229 27.9224 li
cp
f
13.8394 25.395 mo
13.6177 25.395 13.4517 25.5039 13.3394 25.7212 cv
13.2261 25.9385 13.1733 26.2646 13.1733 26.6997 cv
13.1733 27.1348 13.2261 27.4609 13.3394 27.6787 cv
13.4517 27.896 13.6177 28.0049 13.8394 28.0049 cv
14.061 28.0049 14.2261 27.896 14.3394 27.6787 cv
14.4478 27.4609 14.5044 27.1348 14.5044 26.6997 cv
14.5044 26.2646 14.4478 25.9385 14.3394 25.7212 cv
14.2261 25.5039 14.061 25.395 13.8394 25.395 cv
13.8394 25.0557 mo
14.1919 25.0557 14.4614 25.1992 14.6528 25.4775 cv
14.8394 25.7603 14.9351 26.1689 14.9351 26.6997 cv
14.9351 27.2349 14.8394 27.6436 14.6528 27.9224 cv
14.4614 28.2007 14.1919 28.3398 13.8394 28.3398 cv
13.4829 28.3398 13.2085 28.2007 13.021 27.9224 cv
12.8345 27.6436 12.7427 27.2349 12.7427 26.6997 cv
12.7427 26.1689 12.8345 25.7603 13.021 25.4775 cv
13.2085 25.1992 13.4829 25.0557 13.8394 25.0557 cv
f
16.606 25.395 mo
16.3843 25.395 16.2183 25.5039 16.105 25.7212 cv
15.9927 25.9385 15.9399 26.2646 15.9399 26.6997 cv
15.9399 27.1348 15.9927 27.4609 16.105 27.6787 cv
16.2183 27.896 16.3843 28.0049 16.606 28.0049 cv
16.8276 28.0049 16.9927 27.896 17.106 27.6787 cv
17.2144 27.4609 17.271 27.1348 17.271 26.6997 cv
17.271 26.2646 17.2144 25.9385 17.106 25.7212 cv
16.9927 25.5039 16.8276 25.395 16.606 25.395 cv
16.606 25.0557 mo
16.9575 25.0557 17.228 25.1992 17.4194 25.4775 cv
17.606 25.7603 17.7017 26.1689 17.7017 26.6997 cv
17.7017 27.2349 17.606 27.6436 17.4194 27.9224 cv
17.228 28.2007 16.9575 28.3398 16.606 28.3398 cv
16.2485 28.3398 15.9751 28.2007 15.7876 27.9224 cv
15.6011 27.6436 15.5093 27.2349 15.5093 26.6997 cv
15.5093 26.1689 15.6011 25.7603 15.7876 25.4775 cv
15.9751 25.1992 16.2485 25.0557 16.606 25.0557 cv
f
19.3726 25.395 mo
19.1499 25.395 18.9849 25.5039 18.8716 25.7212 cv
18.7583 25.9385 18.7065 26.2646 18.7065 26.6997 cv
18.7065 27.1348 18.7583 27.4609 18.8716 27.6787 cv
18.9849 27.896 19.1499 28.0049 19.3726 28.0049 cv
19.5942 28.0049 19.7593 27.896 19.8726 27.6787 cv
19.981 27.4609 20.0376 27.1348 20.0376 26.6997 cv
20.0376 26.2646 19.981 25.9385 19.8726 25.7212 cv
19.7593 25.5039 19.5942 25.395 19.3726 25.395 cv
19.3726 25.0557 mo
19.7241 25.0557 19.9946 25.1992 20.186 25.4775 cv
20.3726 25.7603 20.4683 26.1689 20.4683 26.6997 cv
20.4683 27.2349 20.3726 27.6436 20.186 27.9224 cv
19.9946 28.2007 19.7241 28.3398 19.3726 28.3398 cv
19.0151 28.3398 18.7417 28.2007 18.5542 27.9224 cv
18.3677 27.6436 18.2759 27.2349 18.2759 26.6997 cv
18.2759 26.1689 18.3677 25.7603 18.5542 25.4775 cv
18.7417 25.1992 19.0151 25.0557 19.3726 25.0557 cv
f
22.1392 25.395 mo
21.9165 25.395 21.7515 25.5039 21.6382 25.7212 cv
21.5259 25.9385 21.4731 26.2646 21.4731 26.6997 cv
21.4731 27.1348 21.5259 27.4609 21.6382 27.6787 cv
21.7515 27.896 21.9165 28.0049 22.1392 28.0049 cv
22.3608 28.0049 22.5259 27.896 22.6392 27.6787 cv
22.7476 27.4609 22.8042 27.1348 22.8042 26.6997 cv
22.8042 26.2646 22.7476 25.9385 22.6392 25.7212 cv
22.5259 25.5039 22.3608 25.395 22.1392 25.395 cv
22.1392 25.0557 mo
22.4907 25.0557 22.7612 25.1992 22.9526 25.4775 cv
23.1392 25.7603 23.2349 26.1689 23.2349 26.6997 cv
23.2349 27.2349 23.1392 27.6436 22.9526 27.9224 cv
22.7612 28.2007 22.4907 28.3398 22.1392 28.3398 cv
21.7817 28.3398 21.5083 28.2007 21.3208 27.9224 cv
21.1343 27.6436 21.0425 27.2349 21.0425 26.6997 cv
21.0425 26.1689 21.1343 25.7603 21.3208 25.4775 cv
21.5083 25.1992 21.7817 25.0557 22.1392 25.0557 cv
f
24.2231 2.02734 mo
25.6724 2.02734 li
f
24.2231 2.02734 mo
25.6724 2.02734 li
@
186.039 2.02734 mo
184.588 2.02734 li
f
186.039 2.02734 mo
184.588 2.02734 li
@
10.229 2.8667 mo
10.9292 2.8667 li
10.9292 .448242 li
10.1675 .600586 li
10.1675 .208984 li
10.9243 .0566406 li
11.355 .0566406 li
11.355 2.8667 li
12.0552 2.8667 li
12.0552 3.22803 li
10.229 3.22803 li
10.229 2.8667 li
cp
f
12.9253 .0566406 mo
14.6089 .0566406 li
14.6089 .417969 li
13.3169 .417969 li
13.3169 1.19629 li
13.3784 1.1748 13.4438 1.15723 13.5044 1.14844 cv
13.5649 1.14014 13.6304 1.13135 13.6909 1.13135 cv
14.0435 1.13135 14.3218 1.23145 14.5308 1.42285 cv
14.7397 1.61865 14.8442 1.87939 14.8442 2.20996 cv
14.8442 2.55371 14.7349 2.81885 14.522 3.00586 cv
14.3091 3.19336 14.0093 3.28467 13.6265 3.28467 cv
13.4907 3.28467 13.356 3.27148 13.2173 3.25391 cv
13.0776 3.23242 12.939 3.20166 12.7905 3.15381 cv
12.7905 2.72314 li
12.9175 2.79297 13.0474 2.84521 13.187 2.87988 cv
13.3218 2.91455 13.4653 2.92773 13.6177 2.92773 cv
13.8608 2.92773 14.0571 2.8667 14.2007 2.73633 cv
14.3394 2.60596 14.4136 2.43164 14.4136 2.20996 cv
14.4136 1.99268 14.3394 1.81836 14.2007 1.68799 cv
14.0571 1.55762 13.8608 1.49219 13.6177 1.49219 cv
13.5044 1.49219 13.3872 1.50537 13.2739 1.53125 cv
13.1606 1.55762 13.0435 1.59668 12.9253 1.64893 cv
12.9253 .0566406 li
f
16.606 .339355 mo
16.3843 .339355 16.2183 .448242 16.105 .666016 cv
15.9927 .883301 15.9399 1.20947 15.9399 1.64453 cv
15.9399 2.07959 15.9927 2.40576 16.105 2.62305 cv
16.2183 2.84082 16.3843 2.94922 16.606 2.94922 cv
16.8276 2.94922 16.9927 2.84082 17.106 2.62305 cv
17.2144 2.40576 17.271 2.07959 17.271 1.64453 cv
17.271 1.20947 17.2144 .883301 17.106 .666016 cv
16.9927 .448242 16.8276 .339355 16.606 .339355 cv
16.606 0 mo
16.9575 0 17.228 .143555 17.4194 .422363 cv
17.606 .705078 17.7017 1.11377 17.7017 1.64453 cv
17.7017 2.17969 17.606 2.58838 17.4194 2.8667 cv
17.228 3.14502 16.9575 3.28418 16.606 3.28418 cv
16.2485 3.28418 15.9751 3.14502 15.7876 2.8667 cv
15.6011 2.58838 15.5093 2.17969 15.5093 1.64453 cv
15.5093 1.11377 15.6011 .705078 15.7876 .422363 cv
15.9751 .143555 16.2485 0 16.606 0 cv
f
19.3726 .339355 mo
19.1499 .339355 18.9849 .448242 18.8716 .666016 cv
18.7583 .883301 18.7065 1.20947 18.7065 1.64453 cv
18.7065 2.07959 18.7583 2.40576 18.8716 2.62305 cv
18.9849 2.84082 19.1499 2.94922 19.3726 2.94922 cv
19.5942 2.94922 19.7593 2.84082 19.8726 2.62305 cv
19.981 2.40576 20.0376 2.07959 20.0376 1.64453 cv
20.0376 1.20947 19.981 .883301 19.8726 .666016 cv
19.7593 .448242 19.5942 .339355 19.3726 .339355 cv
19.3726 0 mo
19.7241 0 19.9946 .143555 20.186 .422363 cv
20.3726 .705078 20.4683 1.11377 20.4683 1.64453 cv
20.4683 2.17969 20.3726 2.58838 20.186 2.8667 cv
19.9946 3.14502 19.7241 3.28418 19.3726 3.28418 cv
19.0151 3.28418 18.7417 3.14502 18.5542 2.8667 cv
18.3677 2.58838 18.2759 2.17969 18.2759 1.64453 cv
18.2759 1.11377 18.3677 .705078 18.5542 .422363 cv
18.7417 .143555 19.0151 0 19.3726 0 cv
f
22.1392 .339355 mo
21.9165 .339355 21.7515 .448242 21.6382 .666016 cv
21.5259 .883301 21.4731 1.20947 21.4731 1.64453 cv
21.4731 2.07959 21.5259 2.40576 21.6382 2.62305 cv
21.7515 2.84082 21.9165 2.94922 22.1392 2.94922 cv
22.3608 2.94922 22.5259 2.84082 22.6392 2.62305 cv
22.7476 2.40576 22.8042 2.07959 22.8042 1.64453 cv
22.8042 1.20947 22.7476 .883301 22.6392 .666016 cv
22.5259 .448242 22.3608 .339355 22.1392 .339355 cv
22.1392 0 mo
22.4907 0 22.7612 .143555 22.9526 .422363 cv
23.1392 .705078 23.2349 1.11377 23.2349 1.64453 cv
23.2349 2.17969 23.1392 2.58838 22.9526 2.8667 cv
22.7612 3.14502 22.4907 3.28418 22.1392 3.28418 cv
21.7817 3.28418 21.5083 3.14502 21.3208 2.8667 cv
21.1343 2.58838 21.0425 2.17969 21.0425 1.64453 cv
21.0425 1.11377 21.1343 .705078 21.3208 .422363 cv
21.5083 .143555 21.7817 0 22.1392 0 cv
f
.487305 73.0635 mo
1.6792 73.0635 li
1.6792 72.5244 li
1.6792 72.3237 1.63135 72.1714 1.52686 72.0625 cv
1.42285 71.9541 1.2749 71.8975 1.0835 71.8975 cv
.89209 71.8975 .748535 71.9541 .644043 72.0625 cv
.539551 72.1714 .487305 72.3237 .487305 72.5244 cv
.487305 73.0635 li
.135254 73.4941 mo
.135254 72.5244 li
.135254 72.1714 .217773 71.9019 .378418 71.7192 cv
.539551 71.5366 .774414 71.4453 1.0835 71.4453 cv
1.39648 71.4453 1.63574 71.5366 1.79248 71.7192 cv
1.95313 71.9019 2.03174 72.1714 2.03174 72.5244 cv
2.03174 73.0635 li
3.30615 73.0635 li
3.30615 73.4941 li
.135254 73.4941 li
f
1.29199 69.5093 mo
1.26611 69.5527 1.24854 69.6006 1.23535 69.6528 cv
1.22705 69.7051 1.21826 69.7617 1.21826 69.8228 cv
1.21826 70.0444 1.29199 70.2144 1.43555 70.3315 cv
1.5791 70.4536 1.78369 70.5098 2.05322 70.5098 cv
3.30615 70.5098 li
3.30615 70.9014 li
.926758 70.9014 li
.926758 70.5098 li
1.29639 70.5098 li
1.15283 70.4316 1.04395 70.3228 .974609 70.1924 cv
.904785 70.062 .870117 69.9009 .870117 69.7095 cv
.870117 69.6836 .874512 69.6528 .874512 69.6182 cv
.878906 69.5879 .883301 69.5527 .89209 69.5093 cv
1.29199 69.5093 li
f
1.20068 68.1787 mo
1.20068 68.3872 1.2832 68.5527 1.44873 68.6743 cv
1.61377 68.7959 1.83594 68.8569 2.11865 68.8569 cv
2.40576 68.8569 2.62744 68.8003 2.79297 68.6787 cv
2.95801 68.5566 3.03662 68.3916 3.03662 68.1787 cv
3.03662 67.9697 2.95801 67.8042 2.79297 67.6826 cv
2.62744 67.5605 2.40576 67.5 2.11865 67.5 cv
1.84033 67.5 1.61377 67.5605 1.44873 67.6826 cv
1.2832 67.8042 1.20068 67.9697 1.20068 68.1787 cv
.870117 68.1787 mo
.870117 67.8389 .983398 67.5737 1.20068 67.3779 cv
1.42236 67.1865 1.72705 67.0869 2.11865 67.0869 cv
2.51025 67.0869 2.81445 67.1865 3.03223 67.3779 cv
3.25342 67.5737 3.36279 67.8389 3.36279 68.1787 cv
3.36279 68.522 3.25342 68.792 3.03223 68.9834 cv
2.81445 69.1748 2.51025 69.2705 2.11865 69.2705 cv
1.72705 69.2705 1.42236 69.1748 1.20068 68.9834 cv
.983398 68.792 .870117 68.522 .870117 68.1787 cv
f
0 65.2334 mo
.32666 65.2334 li
.32666 65.6074 li
.32666 65.7471 .356934 65.8467 .413574 65.8989 cv
.469727 65.9556 .569824 65.9814 .717773 65.9814 cv
.926758 65.9814 li
.926758 65.3379 li
1.23096 65.3379 li
1.23096 65.9814 li
3.30615 65.9814 li
3.30615 66.373 li
1.23096 66.373 li
1.23096 66.7471 li
.926758 66.7471 li
.926758 66.373 li
.76123 66.373 li
.500488 66.373 .304688 66.3125 .183105 66.1904 cv
.0610352 66.0688 0 65.873 0 65.6035 cv
0 65.2334 li
f
.926758 64.5156 mo
3.30615 64.5156 li
3.30615 64.9072 li
.926758 64.9072 li
.926758 64.5156 li
cp
.000488281 64.5156 mo
.496094 64.5156 li
.496094 64.9072 li
.000488281 64.9072 li
.000488281 64.5156 li
cp
f
.252441 63.311 mo
.926758 63.311 li
.926758 62.5063 li
1.23145 62.5063 li
1.23145 63.311 li
2.52295 63.311 li
2.71875 63.311 2.84521 63.2847 2.89746 63.2324 cv
2.95361 63.1802 2.97998 63.0718 2.97998 62.9063 cv
2.97998 62.5063 li
3.30615 62.5063 li
3.30615 62.9063 li
3.30615 63.2109 3.24951 63.4194 3.13672 63.5327 cv
3.02344 63.646 2.81885 63.7021 2.52295 63.7021 cv
1.23145 63.7021 li
1.23145 63.9893 li
.926758 63.9893 li
.926758 63.7021 li
.252441 63.7021 li
.252441 63.311 li
f
.00439453 59.6699 mo
.334961 59.8613 .657227 60.0005 .974609 60.0918 cv
1.29199 60.1875 1.61426 60.231 1.94043 60.231 cv
2.271 60.231 2.59277 60.1875 2.91016 60.0918 cv
3.23193 60.0005 3.54932 59.8613 3.87549 59.6699 cv
3.87549 60.0093 li
3.5415 60.2227 3.21924 60.3833 2.89746 60.4878 cv
2.5752 60.5923 2.25781 60.6445 1.94043 60.6445 cv
1.62695 60.6445 1.30957 60.5923 .987793 60.4878 cv
.665527 60.3833 .339355 60.2266 .00439453 60.0093 cv
.00439453 59.6699 li
f
3.94092 57.8521 mo
3.94092 58.0649 li
3.30615 58.0649 li
3.30615 58.2173 3.28857 58.3652 3.25342 58.5132 cv
3.22314 58.6611 3.17578 58.8135 3.11035 58.9609 cv
2.72754 58.9609 li
2.81885 58.8174 2.88867 58.6699 2.93213 58.522 cv
2.97998 58.374 3.00586 58.2217 3.00586 58.0649 cv
2.03613 58.0649 li
1.98389 58.3784 1.89648 58.6089 1.7749 58.748 cv
1.65332 58.8916 1.48779 58.9609 1.2749 58.9609 cv
1.04834 58.9609 .865723 58.8872 .730957 58.7305 cv
.600586 58.5781 .521973 58.3564 .500488 58.0649 cv
0 58.0649 li
0 57.8521 li
.496094 57.8521 li
.500488 57.7217 .513672 57.5952 .535156 57.4736 cv
.561523 57.3516 .591797 57.23 .626465 57.1079 cv
.996094 57.1079 li
.939941 57.23 .895996 57.3516 .861328 57.4736 cv
.82666 57.5952 .809082 57.7217 .800293 57.8521 cv
1.70947 57.8521 li
1.76172 57.5303 1.84912 57.2949 1.9751 57.1431 cv
2.10547 56.9951 2.2793 56.9165 2.49707 56.9165 cv
2.73633 56.9165 2.92334 56.9995 3.0625 57.1602 cv
3.20166 57.3213 3.28467 57.5518 3.30127 57.8521 cv
3.94092 57.8521 li
1.67041 58.0649 mo
.800293 58.0649 li
.817871 58.2305 .865723 58.3564 .939941 58.4434 cv
1.01807 58.5303 1.11816 58.5698 1.23975 58.5698 cv
1.36182 58.5698 1.45752 58.5303 1.52686 58.4521 cv
1.59668 58.374 1.64453 58.2432 1.67041 58.0649 cv
2.07959 57.8521 mo
2.99707 57.8521 li
2.97559 57.6738 2.92334 57.5386 2.84521 57.4473 cv
2.7666 57.356 2.6665 57.3081 2.53613 57.3081 cv
2.41455 57.3081 2.31445 57.3516 2.24023 57.4385 cv
2.1665 57.5259 2.11426 57.665 2.07959 57.8521 cv
f
.00439453 56.2075 mo
.00439453 55.8682 li
.339355 55.6597 .665527 55.4985 .987793 55.394 cv
1.30957 55.29 1.62695 55.2334 1.94043 55.2334 cv
2.25781 55.2334 2.5752 55.29 2.89746 55.394 cv
3.21924 55.4985 3.5415 55.6597 3.87549 55.8682 cv
3.87549 56.2075 li
3.54932 56.0205 3.23193 55.8813 2.91016 55.7856 cv
2.59277 55.6943 2.271 55.6465 1.94043 55.6465 cv
1.61426 55.6465 1.29199 55.6943 .974609 55.7856 cv
.657227 55.8813 .334961 56.0205 .00439453 56.2075 cv
f
.36249 lw
24.2231 127.304 mo
24.2231 2.02734 li
@
186.039 127.304 mo
186.039 2.02734 li
@
24.2231 2.02734 mo
186.039 2.02734 li
@
24.2231 127.304 mo
186.039 127.304 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x004.eps)%%CreationDate: 26/05/15 4:45 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$Dn[dkEa/^c=XmP)oj[0A0L7n,".=8AZAK"@taQ^H]GB+-dU72R]lAI]$h]\bg+CA[td?.[<UPQ'>#[g:sanU\.Jts*#cg%aDt09NMIoC8R44el1@a2XPWQ7aXX<,6c#j8kp@l3AL0pUd49Oo1,\]-WVuPf?#TC3]'ZtQY?,O!gYL^YZM8XOPru-sTI89#Tilg@%8u2'jqK&L\XB4-3mqP(DYY+t\Q06#&UKK\TrI1km=-BS#"'Buk\1W+6$,Qr)$$`rPf)2Z#:Cts#D>+u4m_K"s)1OlSp\UliL]eSm%=$4.O(F_^JqVV5L=oG,ClZ]E.7_A>\TiH9jSaU=f$b\0drsW%%R^PPS?.?VNc"b"RH)!uX<_&tF:]?oN7#`H31sc?X8EptT0Nl:Q%cg$!;lMk!YmaS;FHC&S!hsI$prWb;`ee#I8-[Bb+gT5TP>E(h@:'H_R=EN2ueXNKmkP\#ZqE\>9&F`Ini1es(W:uFYgWa)=qb#:G%2'<JN<<'+F$2:*Ej%d:1dD!Is/fU7IZud>`B1l8<r`9NFW2-M0:5(J',^9=ti*aW#,aoAlXQ+3YUX<8MP08_XA@UH4e@5cY-#&JP%9RkV+rjUS\KM^1\I_Xa6KHm$;*caA6D%Fra"W*e%c!&X%@[O6i2Af!n&Q:s+cmi&meWlr5,OeJ,^WF@MIF'MOrDQ_k1^s/dD>5Xt%),sVpYH#H<<J@?N8tK'5n2>R80VFY=^b<TU;MG4K%&6^/3,KVWfJ\u!D,;#C$`.YY9#3I]KMoc5PU[I-c!h9V'T5eb;Lta2MIF<T%PmTXW<6..S@R;`ALX\kd_OKo&MUW"tTbOj?5+r[tM7&R1K,29NP^sUd-a]@_K"MJ.Jku.F/V6d67/0/(6]9k9g'rN4$>kAU#rbHS%:^Yn[T2;C_!>q"2:el7/\4F+4TB&_pE^Dp_S^9i@#KiHn=:+O/8jW@4'/1")P#dcZ6t5X%8jW?AKF(`$]?ib:KO<(e,(KA5PQM%P%TbOjE5)Bu1Q4UcnqOpBU"$elq+!rd1+5o8F,(*mJ+Y>(k"6G1g;D5l1j@)\FIo$>Qa#"H5#B,f,PGcbkpk2O5^S-(/-feS.KJLoc%7%.gJlT9c@U^!RL9S]%=0Ppp7M5Chi@/Y]!Pjk5?8%;=Z-%#g;R7(03#jkHGeP<?4pW7LIO&/St-IHELF2AlJTn<:VrT1_`]TYmm%hTC0\itL$mU>8N3\c0G">_cEWk>Gnsk&LHZ(an9Zc4*5nUR0M(n<,_A=i13s0<pBirMM()$3*Zt_8lf[pg<SFOk+XViIAs6dj2^(%?h2OKaD]72F^+KF5#7d>^Z8aq5^r=>jBj*:.M2sd9E(4"j>[*3r^kC"@a@>`n4D\5I^<DB05@,R'fE[&P0?P;/EJJ_5Q"T^jADnh%77qq,U1#P0aj@ftm?-6F??]s?#$s7b^EhL.mH>L(GGQSNq9Zm52#AV.%.KmA%KESqN"WrYbN(>V%<Z/O&XTnRb"0?Nf\<cl*EJB)%*d?H>AHZ2d&qRifAsrQkUu<9kAO@n8p/7t9?F&aiN0G\$,Ve'%#YZk_lW4ND6SQD:p;DL_cO7TOW._0*$5"i8hFHI?.TM\S`[l\L%J3L;8oX7GlU@4=LD<ST'hm\tRTY@4i-!c(G;%'&Q'j<PB=$[UX@aQ#/8DU4lfdnANnNKsmDjNJl$FJS4=CmGJF%%Nd4XZc>/[RA2%Zm*Xb.<$9r%])Xh]gRql?m/<G7t7=l>8E+@arp.B_<o$;95a,"g+>WEOWMMBjL@b:Uj]b;76$<"'g+A=m"n?rLj<lZ]qsg%In;0@%+tG%o*aC0W+a(]LJBO<dm8g1XiO^Es\>\JNY&TKDXDJl@Nb#Y8PUi7oRRSQWbNW>^iK=>1#q\GS1_6`El(Jq1Q@i\R83_.L)8KBa%][QG]DYajLCJY8`?)#*t%EBN'P`+%Wje6RdVj>>E(6pO42))_O38YV"AGe?"\LpaI<u;F(gRp[fU99SYcuB9Nc1K2V,ue2;^]A;L%HDbP["N]>oUF+Gu<eaMqm#Jo$ksT"5JqIsOYiq$\h-`)`\iCOskSef.n5Y"^/f]mGcqPiG*RpUfL\=QE#J0#21W)P%:U_2O/291(%@%JdR7%Rh+[9%P*9:tN.E(q`(1#4*$W.n<*rp#^m)M!2?g5dQ8cY/:QVCgjXKBXkJZUF[9HFrCJUEZ#BXmh8[^]t]<fFspJpFFH6%Gil8AR)=Rmf+Zs-!jef9;nMX-JP]dr*di8,[c-`)H"JjgTt'q^HY/IScM5Z@ZWOCc<3NusW1FrgQ!eN'Nd_og$\J8N"*Zm_\8<sB%cWenr&NHrJG,1mq?;*0jX;[tX'^Ba%7bg'^WX5-3&]<jCb[05tb3NhD*8N?:[aC3<oA"B6N;m<YCbM=0lM+i0T$*/="RLF.)cS_U%"?@Gf$QbAP$LtWRI'On:QQI!:"Ql/6LFB^Q!T#mIg2G'b6[2?q8X&pjXC(l(A[3ZXaP1.bM/VJd-iUY@k2CQA^D;H2VSO"AWG]uO%qWD;eF399(oS&(69tf;Cs4pq<5mQh]C`MKA*R'3E).0%TZI+Jgm)5*pS6:gY<gJ%<$7j4M1ju+(*`'g&jONN&*QJj<!F=[!LfGQD%i<^Ml8u-YEN-IO@[+9N'$tB_7%9Sp-pM]h,.$Dt";rbbSnMbq*qS-OFCj6mgD.dt2rXp[+7WW;`-pM+@,8Q3fmED%Mln'&WPTlNp%VTZ([6u9uS@f%)gl9,p+4mBDEm18d3q2V);fDE<'&sgPPT9%^)FJB#5ikuFX@Qg>?J'k%YDYpoLgNmcck4?"SCHZsjXhLK<alCu;%os]As3DT\Rg\Gc_?dDalSP1H+9!d6R-cnaJ1B,Dp%Y))iIrBPGq<J/eDZ*RR[Q=Oo#?#EhP1S6%B/o1?B!kY+-8F;lI*hWr4fKVH%ESMNL!GT7%lQCr@=)\aI"X+&&7hI5Np-4apB"_413Om1,2rOlt*8gQ2/1Pb*L$imJ1O7Ac2]]9n7h0\L`_\)`n#57L^X,#Z&I&]q%6jn6Tb'3a_\lqqpi#9t[Il$e-[FoADFK:tY`g^<=50odgaKmj`p%S2r]@lCrF+"ZD-e3+Ln^ae6s5!"m^Vd8V2r5LU)H&t>h)Mh0%mgcE8-dP#XSN=dDs/b.Ak70iW)-L@p`\&p")df'sJS!4-hp$I#OkXf^s3nhLOt2CbHY!)T^Wlaf-CHrqIb0cVM;3C:]7ZP=Mb(tM%KL?V$^X0Hr"C%8K:U'Lg.=(MDqQYgir'@"U,\8EMR(Rp5Ou3BV3D70aj\7=h,A(jOOj'MFd9fQjC(dF_BHp<QbrSaM9Z>+h,%q,u%B^-lJetl1!&gmj\&r%nH$P*e0O`(>=^]d2iPq8%f7'Qa:s$aa0OTu_RSC5QG`6!i7S7B<r38ms!%Cf:&rf)ENH89\FY;T[]"0<J,%([K=X&a:PZS!Qr;.B$LJfku"phqrd'=u(;CG];08eM7(!ko-ZFl.C9r$UapkJ%qI)<+$S->"J,'HiD@kW]#?@!BZ_(7Eod7mf2+:%:NQ>L[n7S#VVo)CYLX7<`[="mNI\dDh+%(F$2Z/trrs\H+/e(IP7+G(bhHd*=mOXC[#Cn1#R/W.g24M%p4:R:r+Jp1s'"Ye_,<TQ%qd1+Tj<hDdL3IqoIgm]GI^[dR7\]1M"r%ec<rR<^^tUOk&H!q[j5,63rV$!#[<\o^_<O"S(,Xca?hN,l5.0+HqS/(WN-_,q=RDi#%G_@"iXDP-M]JE@_pU*e5`BU=*0fmLmfb-\`P.U+pp](.U2?NT@NOSp`%"Gc1kO%0p>9.X(rE$GL:%Dr1naSWpq2nZ-CKm+Ir7ujZ%^,,$Z7Id!>XoCDo=dG=1:$#a5.SBSGU])=g+D3(p^T0eQqt_X,>N9N2s*(m5^OE;1D>01iFARJUP>0*8FYB.5[+kVP<XgtF?S^3,%U$;U=6g`sSRgBZ[`#l35)Ch+tbeO'.$]Pk$XhUl!a;&ZG*OLJN-_:#=?LC?*<*LHZeW5%IUtpU+\kBm0$RabVYMT5YT"M$%\">5'%)ZAr:UY4l2m7%Ql')?FYR`D[t6-$gj9_MYhdH`WiIih_'?_5DaHhhRZ[9`1NBRG^7OV6_]&DM6RDRB7Qp#\^?N+bG7c1<=M?3=r[%:M'*[Bj!pR1i6NC&JrI?'4TREj:3UoHA-)rUG`F=pgpMrL.'*^s%"sf2"6_ooB6EHJ=/;D#q>[F1)]B5A;A:&rE$\eJZp"l&N)8H%"T^<[&rI`4E2VN/r(jr4,E1!,Tu\,eR(#'-SaC<cWH0b"&m=O"h]10D("4i=d,NJdCiVA>AAKuJRVnNZ[,Rf(YuW!Td&cefqbBop%.=)2W'$ElJeO,'$PH4'#6>tiS[q_*baY],H>-^<`*?b3Yg1p7DOk/K#"9Efb+jdSe#[j>:H,223GYsiO$ksNFNpqK/:RpEGNF%7i%Q1KI4?OqVo$Sq]s6;QKUea!1:1qL@DoQae(YJ7JL<%F(_6#9P4,;N&f'8i5f).k_I@N?C\Zl$]JZK4($_Mq4laGAMDg0K@.($((B%`hF'>?Z!J:h)h^Y<iU*2I-[OfZnQBSVf\R=33DmS2G6uDB`Z97<<F\\X@q!gpZop"UE<V6rH'48p>W)X[b&lK<=`lL@s^Sr_X26.%M8hsf]*jmZfE8$dh6JUmU`cj(\EVX!(0`sUlWGYe$'+7OI^en&Cbj?#$=Q1lMOoP5_Jd[g-i)>JYk`d4h>.A&Vrr5;]sM$(DQV"Z%r2uTl1?[U*ni"nZnA2X]97d6n'%!cSqXs:I?`42$c>0i0]8=I?[Zd7s#F4^7^42W^qb]Q4+4b4ehsVgdpj=(R>l8uhMF.F<%Jr`b%hPcS^#cRRo\)7#K-dOK?NW6i&$h[BM.@O]Lo0O%7+U,r]rS)6K>4lF0heditIsEI%=!"Kk?$%1>H_3[(p,]QSRKtk&)j@6eXjb@;%aKIK@4cadZ3pjYZe9A;j]jfN"jE7K1RPPu*mj@Y@rO,)YT_*ZCe46*X6l'nK1E]?ufJFlLeS;jI+hU?:D)Qk\Wn\(^74?^T<a374%'hsYDr^PNY25IMW_nG14Cn\d)ON<NS7WPZl&:$\7\6>s8fAG<<>.lgBoORBgh2h/p[3EX=G.Bj)f.;+'X3Dt9KPJO)?uP\Oakf:a%qs]PRhP/geRO[sp5YX2M,[s-i);TmXmX6rRYK5XLKbn5n,Ghol*@Q]?TL'l(S[g-7Z.Nj,_M47"E7_#Z%5N7DfL?=K,qI$jB6i$&%50WJe+"(X=d*-'47?Jk_+VW/V[r4Z\qn:sui//VchR^*GROu?Q#2Cp-(2S0#c;a0G%Qt(NMgS2t\dp-](LHYO28CY,/AqOB#Z\4b%aaStP6H/fBZ!gqV:Rk7Yp\*2/HH_"Q3mBTAJ!C)7lG<BF9@l?:^J^V`n#n9+F.rR3Sg@7:aMkc=p)9WH^YO`O[YYu]&<>efaPbQ`%?E/FAqCP7b^O)X1h91s=hI+?IHJ)?tUWPqW!JOi!ctDR0ia8L<$q2rhaa:(\mJXbRB`SpI2*9Xg[M,"sCHEubS*sG@^RZpc=lBNt%B>Hrb0NGb2+9(c6moL.4*:DcLTNo*-q]/S-(J[o@o@=E9:gf&LXJanSXET:7Jb9MsBEO[F+iW<Lm1>S(%An5Y'g5CBC\;mj.>3tI%TOHridJp@m]R4khg']^XBMb^=S*u62Kb+dNn$c@g^2!auL=jmKVsEVU6O)CR^Ia?-3ji?fTNI2\bpaG01F`c<U++%/,J40>9"isd%AW94l.8S,j^=#GDBu%8>gc,coa=X0`.7$DAPs=*u="I<E:af[*UE[&sTuN@?T""1'^YCH>V]bJ=+B[`*iEEqHph1*Ul[^t\b_D,#%QkaIHT4)]Ds$S@a1,d"je;[J^d=DR7>m"Vf!<Q'o[Fu)UPYeM5m!'6lR!s4cla8:@mU+<u:R6Eue'#UuWE&D@dFZPcTa[.nOs*oi%H"?E+`N1@ms%\lkBYa%jpMY;IGAKqC-e[a;U;rssAp@`M$&6$+T4)TTNpm9pk<d?g4FY_0+s"8''(0;)6)X>-mf$!-$].jip"t4n%hi)/GM3;<ecfY:Z>2"V2dR/bbH4.0=eqW^M]'=da$.4"i47^/f(9JmaWJ/UTH=ZZ.:fNf=q3bEagah2n'7j!H!EWL-G!DeOi^,3G%dH_+i_RG0l52fnWH?][5aq3F1L0:i(30ep)].gV92iL/<:q\2-phd\R.H45OpImTnM@+E90fGct:u4e(^\-_\^&),cj(p"F#GUoD%61P%F526+jC"*@I:Zp9ClA'&;DKM??]K<jdMRfE-PY]SggYHTRk0l:ENC;`Wbe!BU$%D!=8/S]VRWhgm;HAtVh;eS>^`ZthC;<Kr%hAY0kiKrPdKjP.[8sBT6HVEI?(OT[)<9.9mE"8*^6:e[Y6dfUV834PN#[q%u+=+<U*!6dC#R]8&ULVX8[4FeL>A_*cSSYZPU`IGZ%?dY%:,KSH:4C/ZUO[NFu<&j;$J^P^\K#P&W(rYDO7ICj,^d_43J0O\<OTW*!J\YCe]XYRhl(pG.<ku;VTtctQRocdR.CXQ3[(,qb%=5fXCXduVnc@]'Y)h,#kDI2rCV0@:`CM3K[]io`KDE")`b2W8cnX7Ou46rm-gtZ$VSQahD>"`Femd/HOB*1;CH-`?'Iojoo98>I&%e?X1p8@eEJH!J%S.V;G`T$f\g`0J'Dc/Y-"[:#u"EG'[VXY%:eg?,dmebE'WkIFnmUq>HBp"0+>k@edLhsP>`4)<I$9)DAq.X*!&%Us`Q1p7eja?[n7Unn*g2U<^\m)WDTJ>dpc1QEHg&;p3atQ!/RYSjTP0J<a&+cS[kNBm_d:R=:h1:!8>ee!A:TS9BADe4^cUg[^MF%-IP_r6`%&:WtDcUg:\a%NP9Ya6Y)EX"ZKec[g8)KIAl"<=nTT,?/4(-c#T[nF$4;#O]HpL?X==P].)9BDbD;.e_X$p0iL+96=&Xq%<hjjTn$FNTAHBIk@oaWYPs/Lm-!k:0mAX,N<PQ+2Q+h>^J,5K4Pnm_dZg+jU="0;]caoEpg:F'4l26ltV/'#9]t'PSa03qZmn7h9%rcRAi!EVnS,#g'mUs6;t8r`'QC\?NWY>i,^O=D'#;nkp<l/#C9Z][Li*1lu6<SF$^*s>V*[s+Jc#-mp.qs^KL6)>HpaTDsC\lR:+%Ih'/j[0NM=1:'7s4dhf2aAfc*\!sm*e@Ao/]MdsYX1cRAj4,[2q936C/'n''m3Cdul-o4B;.-54meqMC=.2[,W^TfS?*q)Hf^l<=%`-g!N4qEtW.dbJtgrb)2-IShrrA-62W,MR@'r6.+<G^p@\'h7uLH0GLXW74<.TIN3/%AK]akjHEe*4'e@54_/WjKJ3EogZm[ZmDb%c^VD88uWisp8=68Bj5MBk<5AJo13)8+I/67^+-9Xn(+9:F'45i(BuAFWOHkC9r(XoB#iZWKDW8q5c)K-q,OIX"]\`h%Mp1':Sk!*%;XNnub1<3Qd@"pLkGrZ=@&<bnF&`RGoR9q(J'L`]>(#)9^JdA.^WXju<dHXTq?X1pr:?.V?X>226EAq.Y4aqmrfnP'l-%6#g:Dd1%S\;#<9!=hqVttYnpMK6$FM54lnuq\)U\t%3qY98Yl/V<cY,>0&$a'-KX^8%2<;KuoO1j\]J#,Yb3o@udV>=6h]Xs,=EaW+`l1;kn%5c(rV;Ru>2k?Fp.ZojW-H<`(t8lpI\V.^S'<pBA3I&<1CWYnU1akRn9(N?4ngrB8P];5b\bJHjm.U<r0BqGA&,gs$ihX^oNG.m3!%Kt[3H3j#d(\`daA$4ZVF;JG)jhK9dSV/GaB,6a?EEM]TcU/foQAo0-n4d@Y&mS"LodS5":fi>$N\^]#e?>ub+bXum4?0Mc"rp"8,%Wg156mH3_OVS@I,YPm#OX;#?E/#QM\H`,TjQO>R]eZ7#Na1K]B/n^g1/,Zs@l0YJJI22DH'7?uj^SfTP,L]kc%<ri6@!8fBVGI6A%:!ZbUP+NWJ]e@S+[.QG%P=PpB2c"Tu*Whs;b/2h)nC,_Kdi<l&iKu?j=(^pX!oH1DCi(Z<:LB1?=8e_"NZ$<d;fAj$!H21(ZTDrh%4nA5nm`5%Z^0GKUrh3-LW>4mNf=gbkj-\0aX3r3`14>a#VdFMEi27*^Q$*(JJ7C7s-Z^X(m6CQ5c;*<HY:HGglM$N`m/*ihnJ(UR%C@:>d*r'hQd5GkDT>%^>cOYUf2Og/kI96c&>0\5(ecVQ4.@X7V0ZW`5AL=_rn@$%UQ.HgSRoe`R4\lkI:4&K&Bed6^m?KaL0A?k[%^ZW,Q0$J,eGM)BKk2"Unp_6HIKUH7gH(bL-bhRW/:X6nX=licsR@5T')4:48;p0O]/XlM7\U]_l^ac=[dTI/GY*#]iB>>IaP<iYd%BRSF;!jeBP.:mDqA=8G^E`sG+2PsL<id9QnZ@f#d6>t!e>-0eANP,&jRuF4+W5eQhVnVD#A,S9;Ctho,VE;sR@kC`m\>FYD##o>2%:LA:6pYr^/X+fO+0!J51"T=Gb/!VUQ8*>>ddf':Mk*o^^U!fB3WHLHM<,*Egc@nl+Za8,ndbaV/rCe(&<=a^@IV-=_=f'kI=/D>>%^e,2cf+l%mWAfk#%Sg5.%te<Yn.\^`m:1*.V^ajS2=A*2MWYJ#Q,;>8e%a>=<7\6N4;Yoc*m=dC(jdNZQ%D5@iK@p2B%>p[<;O\h%.c/^i_b6/5:VYehU#h6tT;V8)Z"RPI9'W$Jn#3oJTJf$q(PRYZn$k%BhsP.g1B3Ws/iG></a$?f-M&$pNTl]Srisk=Y?fMS5)r\f%VJ^K2CE4RI":-pPSXD^0L(/M,^4a^2[1"pnCrRh6YYe0EO/9`PXT1H0X9)-+C>*uh'QHRaYgFu^53o&Po5Woa=jW8^YuA:<[;:cG%IG*@c,[[.9T<g5>qd!Ub+[3Xg:j7f[aKkpU4e.l4oQ2"$J4a,Y,O*D.ockoJVF3TIc6:_$>Z0]BV-P.InH:<re!7u2_EMVD5Ki#<%P-22a9Zc$UL]O:qZk%WpQ/=Tj]agCe[*uaC_"N?>HPn4rR#+=s+NUbRdEnT2U8Yl>(do]('`M'd+cE)]X38eu5IP0@5Q$3+4V=7V%a>LOJZ0/Xo5%9gU\?kp!A<u!BA@Ultj$'4#WU(D&3iY$Z&%c,0JI!?eM7Z`2()rkGhE@,Ep'+@"<*gajP]n\,4/fQrbO/[cRVi(2%M.:hF9tU)j8k0e>R\jt/>o\ST)W\3;57;S*"cuVcN7+a&8TpClImD]1\<a2hfF<G3i/L!Sdg=hGjs;gAaL`l)LhWh5=(gZ=L1t#q%>G)bS(b(P$\^1!/3n#*>PArk/T?"5BPnSq0L<SKB(']QlC;mC.iJ:suITN)Oq$iVM[(LK00>Y[lD$sWd(f1WO)<]3?JHBEBKF]>'%*lK,LN@N_`j0=1[ZK"l=."O/'QN"<G>oVP%4hjH19h*I<UjE%r2rKCDLh(L%,dm$T0eSRu1d:n"rFPX'*J-P;d2=H?njVEZI6Vg]%o#`m^]%b#_*Oc:>)42Up:UP&KSb<Od$)5"Yi!gj0^UY.Gdd\3O-@d?rG!UokG3L!o7?X9+j72pM*/ed.h^-$<\3idILZW&C,e/9n%4cV9',;LB'DbWj1>f-lQ@q-Xn%A1SWj4FpX/fr')]+a4lB[K<-=N@f]_<_Y*>l,IH,:&:YEP1>&3)dZ"!'=5kq+O5Jf_G3`roV_K%H=c'tB-tJ`RJ?\mMo'53%sKqnrI_'(nY7Fn<XQ<7ZX\#gUZW'/JMrqn'`P8oc>]O4KFk'cOV3)"(JIAU'hG-qo#0p"`Zp.](H]OH%]k:re(bf]Rlp0e2hP2QJ0'5)O,`A*RaF2&_.Z_9pX:WZHhf_<GbFoL\DZs[P_#Wqc-Q"/.+W(aR*d"<;>F)nRnVAnA%OPn9fR,oh%!I3t/LW!<u*=Fe+]5\70[sbFT5&0%]I&?eIguU![N\;HU%J&W\m)"A4FbKH7dR,<_lHA;0hKJO9`o*AWcM3LpJ#X/lej'K7NEnq]%Q;8;-<!KGG/nVZ+\2n,LjkO-hceHEe-Y]aI;F#m<C$jE[Z%P7]P3$HpDL*L&._bZ4rd/%+`"eLGC>.H&9d>sR%sBfM%\4,cKf:pO%]jLN<XLcHpT`GWs1=CdsA]+cZR_1R5Wf@Ybq;-aXiEHgsHq(B7N#<Dso9]S9TD/(3JNH=(mKf]*'kqX!dTaIss-W"D,<^hq9H<Im%mrMPkW4taYh9'FmS/OR"ZFFJm5cAR,RWHA(@`U5oqTHTs+<7@pRD>[GdLiV0rkLo^L7WH\md,9j^6'=uEY!GHZ+a$:Y^)Yfiu8!M%/niCpB5a/d,[V>W`Ymu,2*%*Y$]A#+ipI7h'nU!Z1VQ``>nKqtN=tbn1Hth>hjf%[+@dC<YW%T(9e,!,W!9k?>al.m-Ggs\7oS6U%e!\tm#JI&SO0S1g,hq-0+s*?tk_Fk:YT\82=K14\d!S(Oa;9ZV]fm:s>sqkqJ96C>H+1Ok`*6IKHOa<rN>VC>iiT9OLE#,r,p6-l%1"Z1%=o"u0!-+A+Ad0f-LK_(A=(]7BotD1T6cSPm((E!1lXu#YL3mu#QfD1):BV^^S!ZXVj;)TS:C6%/;(Ysbha_^VJ47B(GDF1-%`=m.:'%-6.^\3QTKWGD1($;'0S=FNDE=9uHK?!5u_P3-rFQi1id#D@J(F#=<%)g-dk$EQYH-[3VJk%R_i0f-TmdIFs;*R8T[u?H/%/CLfo_c:GfYFa-a3u,F%)KF2MF#Dr^g+=,&RqGsS-q46A\/]iMU)4D:kS=F7QCscu(sh-)H5(*pk3kW<GXGbW0=%fIQJ_\HYgF#i%Dp^Wb,1pp\cUgMH%BEE?^0:_Lc1l1Z-fa(t<:7"F:rf;hL=];#eqnL9MELgTp[8@R*KjSM4oT+#Gf%M<BVQEa'@FQ*)oXM&Z2K$b%i\qW6oDNp/iPSGn2]NYB8`V@C1jg?L.0`nE9n4@Q^sR+452naW^(%upoluhWF#QK4+tEbC!O30kq"8Lu*'&?6^5:t9'"J/=m[Hb\%H`5Vp*/i=cLJKOb,dVs54D:'bJ7!s(H'O;b&]5j,R&GfZiSV3$_\2<6.qY+Q#,YifR,hA51o5.iq[MCD)J/*#S$([L!1<;qk[&K=%b2da#!j^dc2c8.D!*(5FcE-FU9L+Gm=Yir<3G<9F/^*<*Sj#FT3(L[lh0eP:Le&d?Si-&*)dc1Wjl>$KIb=4^=ZCgOkKEN^;Tl2k%B6&gNEaF0GbdhcD*'-T[^);%fP^j)$d"Q,Z-.8"!Tc9r[PsIpAjnLiXi>Ha!/NAS,3muW31?drG@dG)Gn-h@H/N@n`SSt?"#+],0%i$^U-i>Hb(m#H(,ke].>Gja=23HX3tFC<-9O[J:h;==D0rp,j>F6Eg`13#B2NfXBT!hIP8L<ZC13EpGD&C_?,fu6BZ#YAJ%V\7K:%N0H%sl%O#$$4\e9<t\/4s*#l`K"U"<&g-Gm?A0!ej9[OMDJpn-8dnM5>?u1sXNs):p"0$/<%tu)#AJF4l;s1s-bk(3hYBf44]l!M%eNRF?AMDf^*OuMdqJ_U<Ss>F8Qqg3k(:abs.PPRsTbs@VLNRFC_Nqn4WaeQtn4\5/+*BA1pf<KlTWpH()^0$&NkZ=I-Wfq`H$\gf%2kQY&UF!Okfa8@ZPIT*[-WK3gVr^6mrYUS#h?kH#6P:!n7chDoXb_%eNdDSYM`eL]o;_]se+762\QXhSmI_:YX6R<JP!p'p-(.f3%%_Z##iINd9rLg\a@TLQRG(dXK$QHA`H/m*5Get`imE5g4_iU)SK&!M;H!m3pYX#+%KKR!+@3\[/4MKG:r0M,!cmh"4D(9',I"^N.%>U4_m#EcA>jB+iCBH"/]5/o4,g9s(pl/N7CQ=#tK0EZaH(s%HV1!99]hIsubV9">;j^&Z*AA]`4d2U3FWtXDnGa`;>NX\&W@0jn9%fe\>OgL^+[Vk(WiRAdhNb>!McDoBrh43!%gb;gqI$pjD@22$]#j[k2f(Vd[9ll4iMfOXG\`uWh*46snSlij+#Af_-fGV%(Z:AEcr%U829Eb'A%tL.g`5ME9c(lMH\&(,a/E`)",s>gU,=QlX(BA,XthI!gCmTV;>>'b(H%b.iPS'L)-L=I&`&VO>8g4s%FnC%@AXU[[n8%Qdp*$*;7Qilh(A#o2u"E0!o1V4oWd1VoS]1A't&c0tcOdZj6:P6fqKg1+L'eKhcN.1no@g;Bh2Jll6MY5`6A>$-f^'-H)gUH*:XE%\K`l__2->0?=6/J5fWpM14(68AD@qihOg306q3_Maj*A4>ssLilqLpo&OJ3:JX""<POGd&;aN5]*g'#^8OFFY+p4mrp5_*<`e5W#%%-5'VD0CIU4a36N\>=k<aIYNDc&9<sG*_lXje7DhbMl)-lK73foU*eJg%Pm=\9Fr@S@,"U-;s--'@I1)O\sS.k/V?XG'AYS5D"VV%qH.]YM)Qh;4KiYhF2L'9Yj3XU[b2cXV8@HB7G9m1N#=!c<1G9%LB^&"-J*N%lCA4HW/`2,FSOk5M"u#[cg)Mr+"hLaBqkEB:s6Aj%W5J5c,3E$eR1JKA=h$6H7a<%]aG5\AOZHr8S:A!*V"<Q">K]V!_`;&\kc#I4o&1db6S_\+S<$qSe/'I&&*H-MS`L?@]rXTmfZ)7=%LZ'iMiXfJ!%LQ>?Z>oV,Em&s_NjL0S=N6]ma6g\XX"ZK*34M7`Uhk.3B5(V[\`h_l&<\D)*7%#.\R7'Xi4M)$=esu:6#p7M5V2>`%BCNPL4IqT/@m^A2Yo@!QcCiu@:^tZ\)KCbf-_^mf-FG`,[Y$[#GhtE!43DAZLc8Y1aD&F8>Hfq0&M$KJ6!/`N:ZSiDML9n@Hticp%[MXH=E3,VfSg/gbcQ8$b`(XcW0STb1B<DQK:VKr<]i5RCMp/sj3u7^,iNS9jlI<.Y)X.MFWR[tLhge#*N7@18A>DEe9Hk\rYY65c%(%T<jOc]uq`m70Z/Dc?8TOXXMkAOW:bcb:k(;O)`h.Ga9L<Dd:n0U9#'n*RY32pkGUY+X+i<&*rd8W)S%XaLtql$K5rZ%DL.U9o;%jd<#dM9&)EP6s7Q,@\Sj\8]JbaK</c>?m#/,(.eE6,L5h&jNSFG?X'1Yt:`9XP!TZ81/N`m0Rm*dYs9I'qQ+"juQs2GV*Y)iW;k`%MfQPc1gR9n(`m"1@7rT-#7#:<f'U7Uhf8C`M@lLWEbF0jruMe&"+3Ds`pr58o;_XlR]cUT/,%3<;rqKKUqDuYcP7rHS)u<:cFe7#%mV_-1N/PAY+o>:k(39:k$,LnB%7]TZ2[2ob:@;r"OM%p-e:$i2D:[soM*%Hq:3Kii4$F@rcU+K)k<aJHeIG2p]*ZT`lV1Ao3O+3]%P2._t_&7E8WHL.td[/;h]Bs06W760dfuddMWRRF(#$4M\[i1,1@,sMcq64Bg3?))binE[A:kkMq4oJmg4p5KMh;3qKSUH9)fX3@b%r$l:PnK$+DCI&h]orq]<e!o8fb=D<]_Hb=.i0fnBqA`K!l$t7WmRjP#hl*-Mpdj;WjD#s!g;?4$3N.Yo4._OsFQbh@HsBP"E@\du%mr01gQJ.Y/gG\&rs,4"1D=T'\mI37XM9's!OUc@IU*a=C=T*md'q$?AEUH3g>fFEKcHlA6A*"tSP4KV(aZB!S6eA+(.<(2U]_sO\%#WIdR*6ccVhaY7Hc4:Xj9pZAHWZDS^C]o-Q_%uk[2<:ok0Tq*/^D(lJAI(l!aRL,GA\1.e)BuoK<Qou\9K&F`L#1@5n[%KXEp3er%9Gop]c7e+pmc'aA2P"2-?)3Z3@qF*mY?+ISRkDcc:,\SZXJg:&Cc]>QLQ<dCR8)jb&ning]C/N>S'E[RcHj@dQVHX%Db`tgS'E[R%c<5Lb=>h1B$sgDcCq&fmZK_:-l$+1[;V?/@d`#)LM.Y64YDQ(9S'I(jKL!joZK_;JkBjN)=P7eF\THf%dO<djI]*l6OU]X6Mn$Vc%Ai?1r'kmN@3#:oq`oL6TCqAgM)^h-#0:.^#^.gAPc7bO0s/*GKZK_8u%-EM-RnY97`E=c!ar)'[S'K?(:3[9p)`sP70:-Rt]qQ`^%e+lQ`jG`L=Zg#EjZ<XtSo?'=A6qk?%??mVMS'J3'hD=P/A^e1]$CLmKA>HdaJ3GKdIs.S.h)&Z.ZodWCb%S=fLguLZT4+9rAH/n2%lMS>R8`*Scq;-dupXM^W=mI`d\bEq#b,8-%gp%\Y;((ES2g9j?>`tK#+6BN6W9Kk*=3q.a$4l+E:_1?_b#o!I_-8AJOTbV/4T=SX%1>Oa\9mNr*$'hPIG/lE,&+2Z>&dF88c!@PJhOE06i88lfNfC[n1%^pHaK^Z.Y.8WM9@u[WOjfPHY.9J"5C(aomQ@BMpg8+Z0C7hB%c/%lY-3CV)`4G)kNKp1Rh0BftL0o!<oj##Prn*>nFn8L+]>p8#2^%NYa=KqOFLjR2j6X[]RZ&/oSf'VP/o]u^N4me%O`%P%,#8te%HL)'mID7?Rn[$[%DRu,/]3u`3[>?HuN`<rf84bM_nqjT2:!\)@MVuk2n;Xl=epFi$^:j-)&JN*;lirNU)[[aHZkkaNDCC/hb)YoZ%rT2]&9dK<bmN%LONd:/RSPtHOclk'p>"6FD]SS,h4c,B4BTh28375[uF75t4HuHlICJq&3!\,;lc6p@^9#_132Ms51h_YqTF71:s%/&d@@NsicK=.+cY)*R'?NIEd92u@:jR47!6O+#;RLn)V<O<'!e7Du^P&3W(2YXgnC#!^.X+#!4?C*H%?*CG?igfnh#b9Tgh+P4_h%3UqK@qJ\RbDA_P7]"r_+6W4k3-Sd5Nl+=RdeRZ7bkD$Uro./kVE(=[MmY2CciJt!B"Q+28V],itE#1>%EQ!5KT:>DkmtLp'gl6;P%?AuF:kY6?=h([t#GNAIii02$5+S02@"PdrTCtDD"`7jPHm7gIFfYc#pDU(N8gVa_?++Cl3!/u1">3&o9__WAF-]j[TY[kf3F+s,m%R6r9piYcP.`2r(9k*hG(gW=S`@=&^KkI7Y=0+E$@Q$I:[ZHp8!8DWb^<YCU7'[E6]p(Z^a7S[E5DD5=`&&')9eoDFsnj[[)3#;1#%F$LM;<sH\sh&L3!3'&\?]^dCa)H0`NdrRHeSAhnSbAk4PT>ZD(X+O\FTApQ(W`2[40^(^7@WqZtG)V]*n(ZoD>]0^GC`IpUHB.<.%r1g6CcagWXb]T!5VS!5s\/)E]^]g5rH2q)ENpFJ=N'N@>+DL<R+s:V%f0.Of&;];\KXUY1J[p5kn[>cQ;>QH6L"tO-BtD$&?J8XH%^K>Eh//ma,p'Jk.]6U@)PdudQ&fGq5?ruD+qsI(o45)e1.s9skoqnp1:W-(pq]<22ir,u,+&9mM$;SM)rk>JTJX&hBBd"nrc^::Y%cSCR@m+%Z2oamX43*#4A_3Jn6hd(OX`Km.P_m]H2r<Tui/JF;9G+o6)_tE09frhR2>4lDdB')&@RfTL&REuo9Wntra]L14XnG_-5%5c)JB>!"4I"QdNaLK(iJA%;AnpS,:Kl+;I<XW:JXV74l/:ShUZKqlE[=2C/fbEisQ<+k.RP4O[1@/_d[k<.i3`s,2:74A:-l"+9L%+/'\6fLib_k//HZor[B4[GWUfp^E_4OQhsJ10DJSPDH2a`k<9iMRmX[_C]BciMfNR&JC`&+6)mY@W&:T-E64@Y>%!e-#.0n0E,9u%Iii8FTGq``Q#Ds&N9_("64Vu'q2c&!dBh7FCorS`Pr<06Ae]Z&W5L!c+a\NjA_ff1V8[$^+[ce+du$p6cJk@2a4dF+7Zr7cG_H(E%%b[[IWU[N5_IKak%iYmoF&a8C`_:$K#kr4i"iDL/AV&Dmp>&NRb<r_Tpe?5?/Be76b>2^;kDpT)MfiE4E."`LM'_Jc16*o@Sj=&>%A$Zj-&DBMT`f)ron^HPs`(=s59dAKu<dKPW7#li$9Q6"sXi(_S#K?K^i@`'pMA6Dq<X.U^EDIWra&KF<JQ!B!XR>T49-YgIh1V>>%2Z/L>="<,^^WfikIQLPEgI(SeULl:7.@r+.jd^t]m'a-^;'U>G/u!qVlUOJK'VhFZUL,ej9'(/u.H4@!O]):9?[>.;$+J-3+Uc':%GUQi[,8H:LhJ>;h,6udMa$M[8QR<9`L9+Y"j4KHYb?0`dclN6K2NTO2315bKURj0RN0"2[2$_LY.q<2m%as:-"6f<q@qPgsX?9"2%-V);\N1'i.oEP"3'X;Q*oA'ij3=@NU%\Wh^]hu*9U[llPXGi_S(c;OP_AkQ]$SZ<*i/lKun1;@,6Hro=]U/2O4c6D\K7DfW^7guX%,\npaV0p0UU6s0$I)Nngrkk)nH1"?%LG%Zr\0$"5Qh&+P_Ms!nTD'nEJ*'Wmf-p?R?-;?r.7N?^&`Pl^C5/>i(%5JDG\9C'HEWrS%U'>Q/)u4:ucb4edRhpij4\*6<0=5Hbj6oq#S'9P^Om_l]H8a8@me$t&eLsC@jVYN>4unHEh<X7eYk))t4L^\P@+2@;Xa[$UElHq<%(nA\_mp<cu>Q)RU^QRI>2dY8plFhZ*=a.BA$/Fh_^0a+Y%b9P4qF/Z4*:I2u=+;(.R.8_f&ao>PM0j[R?'mhlk?boB8Hrb&9dnhg%hWbn#c6):W^[TW'l7V:/p\I=nO)OBTpV:#37_4X6p5nHe+5]%@OCR7X4*8Fk`k?i=XlUhroa=Pk+VFM>n+@(G<$:%.,`QfIhZ,04%\,(g$79HN,G->9JXa^6e6h0X<$[2i2AYi*J]p"JA'?bal^XXu\h[d6K0AI$+]oR)bHi8>r/.Ielr-SCZYme1(0Clf*iOAZ;XRX9Q%H`2_UlA+cZ"Rbpj^XY!"NmeGin+DU,Pr>luC[kH?W-3"0]mf!ej&,:<MfKosq"OW=hs)$H5/'n+O7tiP;=F1!A+:W3kF\.Ts'@q)%?s9WFFX#Z-(I"P4k?:[>?GGu6rJ&O&UF3s7hWcKD>WgTNI^)Xb)Ym](:HG4_4_s]epu4]J6LWqR58g'Ll8S.&.sA+'5WG6NW1c:Q%`kL%Xb1Z%>hs2("f5fcj2>Y"8Id(?iY2qHsNHD@2pp?UY*$5,d^[PsL[o\T9YFcoW,4:,CEN``fH0(FfqF0+$3;1%7"-0)@<^3LJ%1%4dV"RCE8T5`N^=SMZG-c@?d9m.c<lPI9E,B.J#Hi;`AH%V;*q_4UgrPB?eL7A_fq-Li*>Q)XR4lbGca%5bsLa?irn]shLq$[aW%JV+'HiOt1jM!;qQkJ2q3(`'c=aYqudhNR/e\EM<f_@n!.g0!eL2OD!k[&SEG./&g@F2gb]j1=1Tq8bE04m7%#9(+QiL6]I%ir.8`%Pe6`H8J0%A9$J>nlt3*i<\!iehpKsAk?\=3XSHP%?7sGTIqRmN56Ycaj![.jo33nH&(R,+^:e@-=KB3ufu)jB1]?M&p>4<*g7*4e%\]O8P].*\d>C.fhI9gaAc4>p#c\qX^rc9r(J"O9sB=-*ZWJe+]7/C\q\TZH)DpGh@T$<mLGH59pV65k;k@W6>D'T".^Up!2rLCUR%g(3ik/6\Rs\T)n7I[/&.5&I-\O.WJl20Ee0WYG.7;W[jo:YI^=caqpKHbS7@Y#0]59g9N!4oP'Q`(:-F=Bs0(?Y@mkH]"Z5rQ02/%%rJgmcCX`:olXi4Y210]g\J>-%[bB0N[#@M:\+6K:+t\;%efgfL"V$GgRmkVeX9BM90_U?F7ka]X1O:LR8u8%j>*cL+2?:L>,he;%UjFXQ2"eK1d>hVLg0kBP,c:-tMi4r!;m.@s8_`X:G<F[d2=73\,HEYm9ZB]`IS45&r&CriUl3!a]1W#+?_:JKgci>)Nf(6DX^$?m%D_'G?X]FfQYESPMQMQ9ef%Sbo?JR^hdeOn.onr6Dr@kV>!mQ"9n]QSr`nRDneUpg;[jqF653V,&YHOQ7b?$Van-q8LUmZq4h'FhU%hp?;RGig:5qX^p-iOR:sa>lCFa1f[e3-L7*@^aWZErkJ&,(m5V5sNtfn4tluh078m@[=].a]6L+TnUk]8;j=@oP\;iB6RE`ReqJ-%U`#m')=`jFY<!10`<QX+DpEuHn\LDlG95h`#G'k0:l?keg+N:gI_jE`#eQUVAVH22`!7Afc$>DipD_7:1KtJ##rD.tE^dt-rfKmO%#eB=q"k\B.<:/GZ7PuPd3M\0eoXI:,Gd=s*FT6Q9R\Q(!/1uN5_P<`9P4I7PQ-i)2IblL6'[6f(o)e/,e?*7nZ5G.)gKc?4<(g(p%V3TmYB5oM<_,@DcqGZOiph<]f$VbEj&nW(%-aV^_;kajmc_0]o=!P(b\bKhCDDE+uHRWsA`o[%h0n23qqGR5JpH/2/I-V\?"'[50%00E7+1\^c=k3]%^jDpr7'h<^nVgqnMj8SA\P1'rA8;X\1#^/\K!!GVDjBHclC)MLglp"i"h[4Sm%Lb;*b2_sE0)h`nf\_+1i'W8D%bIIR</ROjcH(EZTOT_dHr!;9,c]`:tRGp7Ba]DJ^W-LfH>]-hP*uaGpGIl7h=*=,?!rMLo/C6-3DRl"4Y0F+s[,rtkCLunZ5go)o%bpf4(P)ibtnpkbb->I,l4pMdRhW8aHZT&<$[n*.nh>Ij!_iWW\=N9uPC5fdnSS%+Lh7M<CgUtr)q_us1a'EZ]#I>Ieknp`DeoKmB%\3435/fa9o1<hEk9jm<%b#7rMcWYXu)kJ9[QcU^Ek<-iL;o<bL[7GUGiT:Gh^9=MPXtb&S9;F5cB7&aLY9+]f8@WBnk&qV4=V3pB%i8eLg`@^kqZA;2nT+*K)99)sncl6%!^p;UZK+0bB/22AH.1>["SXa?//E'![G4=(JU(\0.AInLt@F+8#]Hjmk*2A:jgj8ij?7Mg6%PiRfUCa`[LFbYk*`bnQ"?h]-+qf$;6bBupY]sY;%$6@<Meij])O?U:i^;/HH[#!fO1+tmK+;f+*9WI"<XFU1nKKdV\SOC'ans-CW%_mXt?i(!"'qK9E&75;B7j<o1k8._hQ*ZWs?XRqKOk31)c/\Yf*i1lB;;CY2tB4gOE-+.jf[$t7Ec(1[H:T%g`l$7#(YAV-G/[]\F%Z]iOR]1]-"eB8i1`>)H`3e'G=Cjcm"?@#pCq4[B>\;RDlf4_3iI49Y_[=3-L>?>lY\+ts45P(`-HXe^Yr]<>u3_^pd./OO!flE_L%p6'VWJQ*S^dUJt,gI:ekr+rcb]!msfV4HlKn]0?Lrh?45Pho2_B@uh@V&nel;D$]S!QWd[VQoH[PhqEZh34A-24p2kB04QmC9dDg%)ZKHsBeC<d6Q4bF,)k]RGK'kk"O"W&j@fZ%XM\HSqV!]u:s.!aP12"i$HFMuO,7tTV!BZg=H.*FY[c5-jFZ\uhOYOl<ZaMt9A-Y<%DXi.gobrDGSE4M"Rk"6=r1DKDNQ^L=nj)8n*9r.R6TAIpn!bA_;0`q[DC;4OoZG#'ek3L0."':cT9a[r)Y2HT5*mqiIQ)S<;H#3p%fp#NP+N&QW-bXOQX6nu_a-(Nm[uob_k4e#\.@J+jr6D0%;t!ft8"(Eql)ob2=#>;o8bAlMC&$iU`iM-X=+?M@1K25kE0qMKR%%DT%/cBc$^l0>MP^+?6=RLe24ARP?[ZI=k-nM3\XlZHK3gFD9O`>6/5/>nc']0%fAm@.gR%<'^eWKJKFnTh!bZ,ZTs([%3\+8=h8<mP@%j3Pf;I:N^!eDRTK)`tMV[)#V/$]5.t`EU)&<jM5B9+UI&(g"dBD+;P3C5/5]5&tS"g=MFHNGI)i(j4mg`?*"YO5\aST=iW.as]/C%F"sH'G<SK.Fe%S<%i2479@4)f,M!jek(-CR[qC]"@qaX.pXeEW'f)3;JMTKXUFRSa`F9u@.;8!iH^%n&86bo!e"]NLF&Ci<0==mD%coeN3LaI!m7pGEuS^hcTnb$"&^-9f+I]Fj:>IeX$VXSW%S6,&kIA:8tSCNLXHdb'W^E4CfM0'oAFg%%?c%U"1I#K*.Q,CXOAT;gD%SRR@%ZdZVY@cQl4IrTVe?*2l;0@]jJVtmZ?G#5>BkHa3]g=.K59hUR6])>_6%m`K;@sQ\VlDQSdbTK.0k5ciYQsY5e^s3'$?\Z*)%]d%i8fa*jL/#@'*m2GfBci$@ZCN]+3/=I*%.s3oc6bTBcH>LVVJj%/$'dAXnUQ"!HH[9%?mi7A2n#5$5lmNXm;q`+rD<"WWg+j9?%+hZr*3rV5b^4#r-BB#k9o7W-h6kDR=hZmWu5(rBRisR0KWW%A5(dK9.HrRq;I."8"[XR?Ze0#0QO$`=Q*56k)o?,;gF62rQcpiYC%Z%YBm$>?*"5/KP9es?2KBE[!P5Qf@._,d_R\Y%d,0=,?%\N35FV96qs]<kJ)Xr5YP1;6.8!72K'K0/LCeRNKlN\BGCS4FUJSRSkn%2:m.&A^.blpsA:D=T<TcQXM*Xf`sU'eM3MN/50]r'9!gM9:C5^"r[)%HF^G"2+&PiEN<I&T.)pf[^Xl'OB#/-E5V5@&kUO3\57E]%,j+k??c<]C$&67tCSlQ$FIA3>\J"./h.ssk#2$18FNgr!+Zec;]uI9d0tPtmSL[+Kr4:L9SVuhV]+t($\[S3j(RIa,$AA&3;N#bj%>H,T=<_4l+fCn.c>\`NpcQbjINaU[R'nUeQWQ`Pt"Ucek.#2P//aqB%4SUkWd%B@KU"SabU[<NU9d2ab35qg.Os,`6iGj=J#I%Mp%l:c?=3V#St'RgK]dLV<@:1b+@o9YS+Og1o.)M9%jlnA4a,KIi6BfsVXK7*L:/LLbH?GiZRs'Q8dBDQ`.(EZ"MC49g&pfOTGX^#[W%2g@qmZ)<&q^q#?[9SMhc*T#-*k)55KI4"5%_tO9dXu2/Rik`L2AC^YbF&mRhhCj>HO7dJH7^G+BS\ogLo^D,CMqN1(kH[F`NQ-,r%2U<-[ne[XBSg)ICn@-P]$@Q,a,4RW9#T?FlaF8T>Du%QI=*('uDcZm+khZ"Q_R!A/V:HaA:9*STf$D##)\)ci_.0b1r@n8Ii.VHY%5:Cb-Fr4Tc;8HbI_d,2#W8Q>YcT`q)/G>4Wpu2RNp\fS>n6#%]LZBNl4;L"Hi$TjrlIbhi(HqYnp`=[cK?DlZ%sta=CH7%`A6c,[%GJr+Ilim,9I=:Ul7dnVj[W<@JEJs/GjVi3!he'j-n4:.!J'CJ]V0MO1M78j\kk'r+HcT$rUqJ1*?Vc+R+*@3Ofb7P>@B&qSDeF6>%l+5?!c<bG.E:BscY'<gB]D!;a3C,qEOUt=Xju9U+\+2YZAA/EuU`I\&gJ8n(kQ0t6'O(H<T[9mA7G.CY2hBNa-:lKqI(PM^M9j&i%og0Co"aY^nhOV%Lm61i#L;_M&mCK@UB<I_Q=J&o:?60-@;t/_rIG*"1Qci+'SL]oko\ICO^!J8ok?hlI*ouUN[LG=qh,YuZAfU\B%6)?$I9!*;%bPDsff#aNGe8W.^H`WGiA&=N]0Hn,qH=9LoEh!G$c'NBY0>8WcYb9K-G?F@M=b(6irOkF=R,GMeC+55NS-A3/l23YT%6$;eO`IaAHZQ"d&RhA.FPR2<U>EA&u+g^XA@-97+p#jbu#Gf,Ems/B?TFiJ.O2!(VP[@SCK=BmY+?c):p6AIVI%1OfE]ll]+m:+:%&HMp(=,JEI<C1\%GS/lW4l$!ea<bS^J2E)L`V;7qCIrTA8rhC0EXK3M\&KDGe-rQBfb%p@Q@DZ#Z+k>>-rmcX,*!+$0e_g'5jo3M%g[fY1g!S!*:l&:8RY@.Gohn0i<?pY2<\f[=UC_//U>T2m/C)M*Y80[$TNFa3;$_J.MIOnQX[I"D%0bA+&3d=i62LQ\$:cbGS^R>7%F),%(>qX$[:T@Y6**R8&4lmmQ=@fJJ&M,$f==B%,*K-r\),\FDlg^CAQB1@a+::ET7V[[V@j<lV8B6*l+?JY],/T/+RO^Ok;AteV%P8h>ia79N]E`>dbE35'kK6K^iLg^+sBb7\8BnXfg*$U@G4sGb$/s"Zu7c]8#7q=aDWrK']kg[heBT^Po(J-7*N0pSGH%'?S4""m2%#BnsdQTdSknDoaEq*?2;]^$gejmZ&*Zt5hXqbr9o`Z;QJ!S@*1pB*5.SONBrAKJM$SRqZh5bfaa03A!$X(bXU;K<htI'F,:_]N:_%+Z`4:XY1$BKZp]\i\H!+B"W!Ik4f%$B([Cp*dFuM8DJ64I=XaShJF'qKEjiggUgTbk65B;*cORfo^b;^39:DUKNXO`2U>e-E(\PD%d7bN-5.uCr6Iat9M9Ol6B$:u>_55%-a_uK0?AHYSBb!X2jL<B>&D3sUh`/<fB]8s<[:u.s#oCDjZ,;N==T]OH#[+6$Aohb<#n!1;%Rb<aUr5m^j6"tg-FjBU;8/HIrJFPFH$;+p.Z6mMS7`TRrYjP=dd/,1Hp$Kd]lQ^oY44>V8eP766m6X9'k%%aIO2"Ip/Fi@(AP.?D%$&pKQRSF@]2:4[cFBX?cg3&G;,@;\NYE'Rr-9LCPkgqf9Wt!rckF4q;PZPU/o^e)PI"&*rqsSPVXm]#*^'RBHE*J0_5C05b\SoV`%l"c#sL9EhQPF-'?b;%95FEu!R4Dh2m=#5cOG,1IMHION\&H<kiiQ%m6k`8kQWB-M/#.?^iO5"H;Aj=G`2ao9Apn7^^o:b<RnoAkW%9Vb=><i/bD+'r)TWlV?o$Y!e.n7;!W-9YD$1W1tIVtR>>ZcJ"Hqh$q-(7G9R4S7QG:6>GW!gm8`-Vi)3i=]0mT(oicc-4?.%l6"G%b;^sU7d(>)Xt,rs?9^0D)+?IJhL,X<F/[ple(0/<_=.GFb<_c58`a=^pD4j%+)1"$Z;*@u'(nlX"+1iP;ltp=UKkYrMib2Gj,(ar%L9+oNgkYZ\$H*rX-G8*IS@;>@q)D^!=l^k,nO!D2Eg3CY)7%;(1pqB$=Mgq,1k6j&*0(j1m/<Q9KP=RYdaB^'R61:_f"8uY`^ceh%>Y;(EEqs!D^22?RQ#=9a;?(RLe:.;nY.+8LQ"2Ls?JOAEoMYXi?)o@CKjab8.E!p]!(@!5iW1(&r;ab?PhtfpYFXpaokN_s]%ulD%(<EF9lSsq<3DbVQ?Y^ooB^)kn$/5NeWQ!b[F3"V:V3[rF"\(r<o9Y-/m%*Zp\$l34Bq*_S<"o-Fh<qbWrgI3Z*:7V1gV"&3BC.`a%C#<W+jmL$W<4]-c?<#MIlYec\(-/.S+7gWs&+<,ERYA[W%GH+3/M3f28lgu53?d#rm"[PE4!W+)9d,R>iFf_0EB`^gG6e+qmJu[,%OF/V@:::Gj6lI/<5ngk+.QD9kJK%Ij>o%O3$e^\Q,heIB*'(g.E:Yl<IU:1X]EWCe^ra9Y4$<OpOm->;3sKpR#\Oe**cT-3YZet%%qk6U]cEUm^8cNrXNG*,C-]$0XHBd*h:2Obc3D`q$oo%79D*>iJFh!PS:I#NJS`]N#<Nk/W-61ATW7U>i3K\k^csJGIm!suKl]!1)%*pdLc[sOMQ?a!8JL:sW1=hRj9p8t3#'NDGHB?TAg"unXPrOg8"GJEPlp?bEeV#RI=D'!Mt,8t<sE-B,t8pr&L:qReIUm\RYD+$E'%U[m08b;*nT@isbK/Uf0=s!I&2qF4J]s!5_@o%#r"<gD@I)F%?`NTTs/s(M$Q09I<hIoTXmCoj(,b>X1]Qc$0^SnJj`_@g/A.BjI.%hukL;UuNF37X%/BXj"3gXaFFL\_>4!(J9UoY-"t(D*"0]fERkkK-%+4nr4$%b669FIlAZ.Jtit99nB?Dj#S[[h%Vsqa)k;?].%:T%0:npOf1k3/;YlrI,^R**-YIarB%IW">Fsq8fCC\O:)3A!c2uddB+5AZ)%jhcU[1:N=Ie%q$VQKNp8oesQXT+-eAgW/>A@t-Ga97p%;j@^IN3X\YVt?Ja_9L4rhEfMUGICqCo1ufa=L<bGjbMAtFa!Fa7Y39F_+>R+bX2ekK0upIp=O^mZ&1@7qV6;bSOS3#%@YR&%AIWr%o[KsbKs,I3MUE_UiBmOr^bXeVCRes"\Dk*]=lH(_^OBs'IOe[_Z:p3BPRmt$'UWjs<F6UWnB*7k6Lh5P`)\o22'NFDec`4-fJ-dN%_Ml9`c/MN'>iqM/FlP.LMG*'kY/oZJXE5f;@EZ?PH%CluL"8bZ64m`Dq3IWb;(P,3!IIGQ-l-=c#Tj1sd26k>Zt:l0@\mG8b[eb2%7a=@'hH1Jq),^U6nf[Ft?"W0m-sR%D14FWjF"D(p?<S2n4RgTT9B03CV54.plUo[o(e`&'-j"&n&`?%@QEh*u&[icjafAA^)JJ"=%D2&b*DtkH:Ke9,ES-\?u9+"$o9_6Q[S(c^PH8q3pi$E#>lKS[-=nu*'(irOg`330Ga)Xg_1+!g5+=jar@ps,@MkV>F1_>ZV;3Bh^%OMY/B[`O1[@pH'u;Z_(mC6-]?_eIahdU,3i/eSlS%:++M:r]n(b*"G&#?)4,6a0I6B](,@Q\t-s)PIG^9d2``iDSZ<*H=Kedqgia%gZjpbr'LB+02?l'YNO$7J56^!:Fg4&no\2UdFmd/f<Xt[;d7-%33ad,a5/2809V`n\p6;i:V<3-nXSi(I)cXZY`R(WSHB8i:DuMa%1LK_EYu`;c]W*c'CG.[8!H[>"XUf%K.MD#,K2?eh9KS$2mYck%/mZWF+fkLWWX)k-n?MsFb]ESAb;6c&cG?S"3e]_aEmB_/'$lV-%P9sr0kt!p$G.Y()OTSjZ"f!<!XR#6j#9_#2'!7F+T@+5;dm[0q[3L;NT.W2Ho*ib05d2eF*AiY(jV2G1LL,Ga3Q;&Vp?h9SAuE.>%(7cQkR?K-=A&Vm#75i!a'Xj=q-)cC1KJOX`aGmL$72P(`0hUHNmbDo&D=MYSCM[6j7sX^22GY,+n'4i_rcc[5="dglPg"(5M]^i'%]d0a*m]8e5^Wt7R`4K:fe:83nFS`+bWR,RupJ9iQJT@Xa9YW"u3Zuf6_'-tmh%jD2bMpdCb&d0)*:Kpjs.3*C0:<bLg[<!^k0%N,%O7PUMc>M`\H+?ZbKd;_@F]ilTTBCaNZtG(n:&jWB_4Safl/f7oV++N"+BkGeDl'J?bk\3cP#pOd0/^ehMoSGh3VA\&]6K\n^FjG1%1RT;m4QiV'CDN*n5rJ00<1"n+libkSo2GJ4WY7?X2=UOn7!aG4W!8ic$HrFo$**CmZ]S?Yp$TunF1G9aQNn2g1kM7LqnF."TKa7X%+-"i;p$[2c+XbB]')E,&9fjdS<`7=foKrlI_/!L$QVGVjj8j:kSoa^F^XRMo2qkBKp[@/MJ8Pi-/pBt1Pp@gUN68:Mk7KT"1FeA*%ARJ7'),^1!OHOn]s36$+^Za!`6;!F@^(M&)"?lZ%rRaJErZKR;P-U<79\r!+aVqg:Q;CODX6I3c<%TW$S!'6<:8kUh<D6!IYQGBa%AMn7;L5B<`]+1q,KC9rQT(kU:SL()5ASF^bCDo)XD*O^:b%*o.PZ8/]Z]kDTmorr4QF3M8Bj"BdD+'GZa]Vh&c(l\]QXsBP\huW$%)k)^n7TQj+)oJbY-;!E,7EJ/jMIF)d2,lu4VO6S@DIJou[7iHWWCg2M9N'*Wb*%`j<R%VJ=?s<(aB;NldAr_!<@h@o0J0>0$3D*D%`Kl'@B%E,B__b>X,$?tB9K=Wf)L>E8;:@'iZ)M:LKLF;VXK!*?"I0!6L74rW>/23p]kJ<d6W8!$JD?CY2^ARW5VJL><n:!(`0R]t%WLu1D,:gqeDP=1E:!#jI.r-"\-IXlY[\fg$/NKj\3Yn_@AS"M$Y?Im;70G3A=\T*^T!_R(`umd-Y/76<W>7t$8iHLF=Z4W`@7Ui<%"bCJM/),f45mE,\]kScuCGpas=l$NZ*)NWm=-:EP<C\/@<Ma+j'I,,r1;&KD8hpY\nP1hK%'t'i;[62'@;DfqWas3gVN^]R9[bRk%cH]%f@1\fZAYOceFbRIYlP,)RZYWOC.@D#`APGT@eOmE5M]lfhL2:@_'aY6TYmWE/eADL\82c2GV,T=h(!B(@6nkE>#*oe@:*[&0%RUo,_U)N;V-J!143*@,$M\HWBK!Z;-Q>5.;<=:7\V-o$%bq`f3?<+:cJe_HXWb(E%i[@\Qfi2pu8FdB+)H$s=GI!&s7VGc>!X(k]%$jd:DM-2cJoId/fOAoI<U=?O^C(1cOP5_YZQ:m$f#R7Y<VJ%>6e4)lli8&J%!r]<)SBo,rU6R]4fZEq_o&a+0N\WAMIM?`<C8dr$%C4g=?[U^*(IY(ZTfohI`$>A3;C;LUGU]KWAZBA4)6PnYSCU@"m3b](mD_E"B;tc\_p^JCm7+O4%.Y8'\?pMET7[B'$i&=PF(&^T;%&dSSqY3REh(c(@sDtkoA#8L=&Pm<,!'H9>7cW6.tE'\FVaa4_V1sSA+6,9:iVC8`PT8#0EfgG<OV$aWded5?@DO$/:6JEpL%C[-R%mjTP-.k>'q*>]/JmeY;gV4+DT($]+]eKX)b6ti1mUKhal3Lk-T'DUfgj`'%LSBAf&\RM:b'Vm!H'JWLK'ri"[JpS_r@;NMM+M'./%(nru&1j)7j)CI6F%o**jeloo7YuFkL6_$V-0[qjFU.co$&3l9L'rs\1Pq==%ST7]<D,MCN)]9u,ZG]dB#^O`S<*LnbnEMDKA$A#D%:0fbGRU@*i?$&.>Qc_?Cao_m4_^ArUR0I<$_f8;X+;MBP5cP3YW4SA*>9[5p#KA>mAVelmLaLKAZ*L+Si@nkdU/DS`-&`*5\K$u6%BF)V4$]SXS)ONPO^^UCLKm7fr/dHog6oEKQRi#b[1,2gqJ]:Us0lb7aaZtglAd/^TP6Qg\@(&dKg#0ID`&;T/"pcV%U.Ra9.u1cG%9$n2g]1X$Q60j_rB*Jo@$:#$\"5rp8'4e*GVC@=/JB3OC%$;"G:C][f8sNr`Sc_@JLl+hsL.t@3U*,L/f;BQ+kucj[&3:7p0o3A.%IKqKZSlpY:`@Z8$?/UU7/+,0I/SP>sfK+cN\jZ'jVG,mrA47iQ8X=p#.EHWV&ChtlA-T9"-5@16KR=rre>PJE4H-&TBgd-cIA03f%el>U41H)N^.C=Okf*P6g'?3XP>P'dU-*Pum@l]2r$0)^l+XYm*_8d7?keL+jUkC'#Pe$8p$O(oOJ=+Dn,=W%&1G4J.9F$;'Y@cK[%!>DcFMIMJ9JXKM[VK@J@E01leSPkJA0CiAep/))1-W>DjPc72Al#`26(IKs7OsA;@]n\^f=ffpP[3kt<W'\f7Mi7F2dAOI+I<"C1%U>+qJ,2:#6BS&p?;c^,5!\C'/N//e,*nj/HWlh^WR6qp9B2qqklp-6O1$AVP8im_*f2PuK_CS\qY:@!GZE=J1)86Z[9&'^99`?`q%=Ql[g6453?3S5bLLlj'CFIj@mlEdK'Re>@FbolL[2ft%+:B3+l_rYA/bgnVe'8*9iUiBa9pe;!C#=<i&!=/9*Kpj"M;4r^@Qib7V%+:>5kbU1,I1u3AB;B9OC0Zhs&\Z1k?m*a<NU*O3L"i;:9co;%q);nnC=N%3Qpup)cE8.(Ub/5eck,Si.a&`G3$)<O`_q9(Ki*$L"%NP.j;.ng(J6cTE6LgjO;pX<@YVp,^1qKr>kl5'fX1$;E,M0bNjh:)fI>3G[\+EuMc`Bjp8N?V7)CI@rn/#Gk#6A>SnC^2.@:4Q1W%31([D.>,943%l_u);0U8gl`=5<@<;ART'M-h(hJg'53e:=ja*e=B*H`%8/Ae&fR3M_>_::TMMlUZABR`QtCTp+@D?&RU%UVRdmF$%3Pc7/b^qOF5>8!k/<cn6^`;qs1rHTEK1uFMN@Zu^`Y,6G`mHkN;.MUC!fZp5n>aJ"D?/b-jqu+N(?,iLLohW''Y*9TRSukb8]q[s%*5bI.PesR`5\/lu;PtHVMPS?66JeJc>polm9uf&F`^iKt*R>^53#(V%jslt\)PfH(cWku[cC>8s4`cR=`Zq]tNiQ*$3X[9p3MoAV%E=?[&JSmp-L!^"VMeoV5Mug(PW]7uuIgql,h:ORiLoEu\'627tVVBU+a0%Fg]ZtU%>]YF'f2hCc"dn>?j#7^B^i2pI\\WZ5m#N?H%J^#G6cA?R<h,O^][V=1!_!T,N7SX8FO9W$^N`/J]'-F<r!&8&=]LI<jb[2,<^qR@:j#/r\$Set3`"AmLUV=9hM>H@$I?&4u:doeD%:,mC-L"88e\P)I,.@&4MZ"oB=C!l/HFj2Xj9r>%g3gGETW,F;1D9"RWm-`LbB<cC&F??_j,="XRJ]=%A'l>mb73)E'@0n8I73719%QrrpjC!mkK1V4XHc)q)mUhL"JkdsOtZXp0".dhV]<`u12:?$U=d)kM4d\9?Ghut'o#r6ZT%-XZ'<CQ,C!3pZ]'(K_l)l?W@l1C/6%'*odd2UMuO;@O%31cfV5M'W=eXg3H`3"uRu<bQ$66F^kk"L$aGpDb%/-"&K-3]+uE*>"mKLo+u+N(h2gSH/o'cD9<t#mLV8cql)T%#ZL68QE(^+YegrR35\)5/R!m+M-)B'F9jfjOrtNG,'7TY"SP**Y`=FN/`8lKiI\n-:?>&lDU>'a,M211Y,a<$_4[s$D-8>76'ET5%'NQmo:1K)1%Lk==k;QrbHc<m*>:5TaF;h!_<Vco+dj&ZT7?CJb.LeWi6=a(Tl"^dQOgV/bK4:5aJPc(F.?1#W.2o3QPg.Q+6DI:h%U';#>8PLZjTV+-%-K>+62iZN\):kU'gRUmCD9.rsQ:6R599Mi<0P$[Jkdk470"Up:G(7ope1fORaQB@SiL9YB&Bl9*T$<QD.O$Tj%dQ&$FUBho!nUc"CAI'dm/dV(D3K-])3$pO$jRr$l,H$FD.llG00Ap^-h?/?YWobe-ZeuqEUO,ZT]S4:9l*a+rZ7WL3Mf_#lTlgEq%o"`*&nB%Y*i$P;BiOD64Q&/^[cMWpEq>A`mPp]eu0T6IlMtqH$5pV@l&3?]j&kqSdPDL)@'H.c7P;<dp1tc#j+qm,"M+n2"Fj>r.%e&8,KS8L7XjK7J6;ZsF/kgV'#SLT65UlU2o9_s^s">Mtf@S4*3EN,u@UHEKL3IGkIj30>>1EDK[/-b'(`@X/kL,uP$/M:0rpJ3!-%$$6U\<lDaA=B,;G)O=bTF>a8Brrg#1K;.-ci@s\XfJ&Eo!-.H1JQ.>XXGM.1lYKO0hMJApYtoI:?jh``j);jr5nL\ILH?lf7Dr#&%QZIadAC+o%#lnc[f-7qc%HBE:9mm]0i3!Wr&cbcD9c1'%#kLbY(`<te\LFl4&Bkk#T[PW\q'N=[7AV^Rm$lqQ;(%./*B#H_.tT#:%L3[M!U2L*l6]R5cRt*a5e)d"u^S,!%RXe(R9+tPD&=g^KIFL+d@FR/c(GWU`CBDQl[d]#W';3.*CmSphl,<02k*e8(+\!;PCH4;@%E_$D(^^E,L`L[A;TLkt(\gBs>Oe]q+$>#=M)Up_[f0k9Gf0k9h;'Um3R"B)TW%H29\L%<Oit:fT?rIh^QAK5U6n7VI(T]EQ*b3e)%[uJZGM/*0p[ku@kRXg:BM(8$hJ7f4K?4tRpTJqMV;f)n\7h]Af[Z+I!\\e(n(_+9R2`9%i!:cG8%BE,Y[R+FY#_KN(nX'_M%#sp6%&sKS/,F6>Y.p0ru>:Ra)/N,.H8j`13%F[m=2lDlLRg*T&'8L*0KJ"tLO:6_$;dgZ/5ph4Q5A3SWJ2hUp(Q=#X0IDd<MBjMNoiX+8%^g]'D3Q.Z@2]S#I&D=;+BFD3!11Z_Q"e=!ec!<r.Fh4N/@ktJ]=3c%]#*s*sKRebe5jl'Lh(b100qFKsO:6p7O:8eD4Cd`-!-0tA%i/!=dpPk"A),Ld#75blIJAIa?*,L2gRUZ&GYXrk9?:cRk?s-`&!JkL;V&'o1!VXr508[amJ8We4KLB?=#`HcC(lQHpLfcosf-YTC%LF*c[iH2D.$Z@&HaG=U"PiC..Q$*p;<=Nh(aEsp2M#e_M!ikr>,3/<2*g#o8Fgb>NOPL<X2P"C'%!P#B3cK^n#*Y1`B`Tp:,eA=f%f3^@AOSG\<#DP)@BlfU9cl@s3WFVgC1A4?dR(_JZ-A<Ir0VKQN?(i;m4rg^@9>Y;hD`9u_M07b=Oc>[PRgdjf`.m#eM)X3>"=ffX%=lpn>e&M92Ri!8V-NucFLJ'ZG497d=>7&:nSH(LXed$hi6=."6,=2Ci"onWr;ZaYm^WB-+A]a?qOp,+l+P:d,B\:_J[$iljgYb5S%)HYCbFq?QSCD&(m(gnFF`'R51C=)\p(bq0n'@M7J]'&`0/P"\HSWkU^H@VN+UujWbcWWhgPIDqFKJJc`(>\$1E"WSTc!I13[V/d.%Mo;?ZAXLu_d%[7'/k6T61Ym(^HX8C8:$<OlG+#??oHYnW*QAqHiD!_,%Ya2<65;hnRDo8\]LLn.]G,V;0^tNIQ\GX4&2i0F6dr#*%1fYk(:b4'rih[k*R5p*86'N&f-;l0?5VXEN0m'Z]Rg_#NF**T_"7/#]_CYg47TXX.8.)&r`43``7$[hh$_LC_JD!iVU')<9jTL@0%RPqJ<jQVi[9gUNH*Y^/ca^R_k`F1IM5eNZi0X0JmiA)=-CW*/mO@`_[oVMb4'3`W.4f4FR=<btg'fNIfWZ*:LUQ&ZSk$Yg"M8_1Z%))<.=$4Vsq7Xc#<Ae6`fX@eb?D8mUQ[)kuX+HUY1/=;AdJ&pcfh?jN01*Q^mgXKUB6\?M+YJ+\1&5:*HRTKo8mH9jUH@eo:,9dt_%fqnd=+:?&H!/MR0V;!2t)*507\9164(6^1*i<:*#5s3XnF-u(UcNgP?TlX>"_!j#g2@_f'5T]@7@,l4ANTF:#:.P1E1_oK$_.H3X%D-'\:0PQneGh\Hjj:I::_\5\22D'U<)itqD<<LGXZ/EuPC]FKjha\4jq#^n_]H@L5c3dO&2a_gZ@E;LQc8H?QRjRfG3Hhi*%auOt%X(J@M;\PAj$@(;D1e*T2_hOXsMT1]t$AZ1%WO),"JK$Y>Y$?m[JPFs"g`!+,6&;!=L(:$GK%LWq,k"SI6D-ZQ(_bF=1>@HXn<QL*%pfb,$PW6#NQ;/ZA+hc"&@CQuLWlrfk<tsJ0Q_I>0KF)6E^gF_`"''!WW_<SrC8T?2>Y;*VQ,`p5VP,\D<m^c_-FVEU2L`8He8!):%mFF+$&@<F3JHOk*?^O9J1Ri8!jtHdCL5SJg'EU0pY^mm.)fPL/6]qlC%"L-g+?7LD!*LJ$YReYP7?LCREtQa#VXl:HRQq!6Fj@K+%_)+::@?$%&/V;p6&TeDO9[XN/paUNq"Z8RWZLP_-5nS_%;G7?MJUK<@dt8c/(@4J>&/OV`O0B/9RKXQ4%(bfGLAGg#`dBjui"ust%s'SGCZ`';M,pJ^o8[@9`6;!kdd=D>=emoVG22aiCH]k2:8jRtn1IXuNoN.t!m*pf<"A.36W`XM.;slo\.jMpPU'\kn/2duAoD5su%b,Jj1,,ZFI%N#?*4piJ#UKe@&;,.Fb-pNF^*3MA&$.>Q4Hf\=N`\aBSf]%C=0S>=a#8i1/k'UThAiZ".5nKVLB\3]YFcs7h9bk*"%^e#.d"`oL?#/j$&H@Rc1d)aF4`nm4W>"/U6Na4KIa>W=$lfj(IKi/[DZ.'2OaJ[AoQa)ib[=MLN@aYiVZ#ntZ&AuX6K'EUqio"cL%<,b0PFOEHDWOhF$URR<lXEEODa*>BmM/s$:>jH>BO+nq.iU@gp3*aGaJddr^-O82>)&mD'WtS-+,%C^s-VJR)!.r*TCe>$G'&`lt%\GU:?4W3f.M&k'eH`4h9@0#1:64a#(00q/.cs0#\NcIT$5]C<_(*DU0OOnH'/p7S5bS^PGA^V2(D&"4WMQCMH+i&as_5,g8r*Vhr%@'BEW?s&/C^.e[8BU`iR9@9JR-`9U&\BM87?,@3o$IU4Ol;Vb7[op;0cm<(?ipIFSn.@u>-4q#Q-rC7q:LS5^7>;\Z,Bc!,Ec_Bc%,R*ecX"SR>JHn"hJBt50M2p6*XGXo?*/D;Pj#@/9E#_A!8`McS67N`U,fF\m2ha5O(E8:m-jn(U(*bgLN5orM869@`3Pr$@"<i*l%SWO=HLb]=R*!DIB3m5Ai%sdW0_1kAI^D3.R+`[LWYcYrT.C/Wm$0NFeMPK[X^klHVVCG.Yc9W!SDKQ.Y%cPu7KTU3`a2GhT]KSN@%EN3,#LJuK10t_qiL$)][8i_i>!?KH\*mrq?B>Z59%#a=gl1(,NLH/3PrZ[9c!-6a*S3ou$7eMR4mXS%FB4=.IBT"#AjrLp5Pm$,B%3JD)m@OW\Y81$D(iqSTdWe9r5fN0H#UVQC%&p;!0<(DU$&p7S5Wl$R=W"-"k7s0>1k)85l%a]&!AdC=j2dLSu&U[M\Le3f`(IsiZ%9ZIaB'@XcQd1mh%1XJ:CJr?\F7KgULkeJl@%!2J;P0"h6]RL&==g4,Z3Y76$E&n(EK'9Ke7QM6>Pc=(A#D1(A<McNk,^if8;AGIW%DF1-d;0dSW_$]PC<Q%E55YTuSknn*>'Br?GnuiVhi%Q5:!3CqANca3JCba?=jC+01OUg.PS^+fLB2El,Q^C%jZ=f)X%Rm.NZsrKZ%mFS5o/nIY0)!X?tmZQ$q#;k:H1HulE:ghJW1TLXN&4A5]GGp/3Gc680a[.!f3t$0ZGZ2+6e,alIf?^!a#IHrX`)$^&M.Lu/^W%T7%:+;H'ms4q7OjOs)7"iO:+cF/H"V.\3`F+H,@DNE`A&/YjKQihFSh\`-kjDg`ek8^GG(>Y`=nGF]IBj^RV0r*R/%_)f99Q+I"n`D6%l/f8rgc\t:8:cGY&kKeV[@5NoPViP+,7o?#*.&YeIe-T?p9*[k>VgGJGdptFRsT:X4EXtu5IG#l6h3IMOdYSjgGI/uW$?Ytj.0uK%MRN&-g?P:F^)FHBK$130)]$GOcRK%q;LhlA%pbD#>Oo+Y7I,s.1(AgTk;FRNep@6HYVXGpMpcGb@0Rf:A(F25@!hc%8[6\<_r<8g%Fr^LHo#6)j+(Gt2F8in*cdT<ScY;+Vc3;o;-3Udl];JVtQ'VTp[$l8K!Rk_=%6FYtKPglq_%54q$i08Nm-&9gX7L,;bqV<=EK2ZR%q=;J@Rc<O(UlF:KfGK!9%''S>?f%1%(0SW_Sp2JdV$P!Tco5EKc\0iPIP<.u51U4bO6T,jem24:/OELCh3K<U.C-nk2&Ybhn.@`C%i4j>u,)h_s1U\)]4Rh0gm41]=iWg5SX2dM8#ft3P4@s(0]'Mo[h?.IM'Ap!g9Pr5AE<\7+_=mmEn#ksnqi#'jQXYEp,j8Y8n[7B$%X%+qhC<$0Q<nh%MYnSCXNkEdWVmE!cbKNLkkMEi2r4hM?Z.Bl:g`Y5hqRtWOC%9`ucF6(<j,i_K0!CnKZUhh.B>+qrgLbTipd&*a%aC`,5&e(8a/^:UC&Z.;5UCU?UDLGU<ZMqc^f1RqmAXPDm=nQi<l+j,V$fkmm)LL;Q"g-pj%=@K2$tk#nYqhF\nQ$KO[B)leD9:*j%G-F\1Ga%b9M'/_oc3p;L@<UY2(E&'"[e*a-abF`9nZgDUh:.WuPpZT?-)EY5fqm,2Smo*#]s202^SGN$Bbf%8'=LD5qcTJ$RLUnD%J_?'YkLpo3rR]5l0GqH`?Tq2O9On!gL#tca%TS>cf%\:MTU61"DUVFNc.P-cbSDl'm+PsCBN%mK[(AIh0[A<XNZ`K,pPXF0hUn+N%"8o30?Xkk-"DDR@782mZI[VtZ,\*(i2UC0-TFe9^4=^Z9p.4fMa[/PTc]%"-s#a!kLM)S&boa-od(&3,GFL-?qRsp`nn*2(W*@M&%heBcXJ+C:.Z^=g)5P+9p>Eh,=*SU*U&DsgOjMY;*]X!Gl^=C>#hYe-<(C67pCPWt#/3^!7=aY>Xm:3&0Y>>)Ap5N>0gdkZ/;eI_4%HCgDr'b]/[Y"P][VSNo:j]IYe,o`8o_N#g[q+%Ep7!rWS]Mb>F$:BfS*OT:mYoe,.q&l(Ies&rfl.`>>jnFT$;)7%q8C?qOEUe'U%H_935^cpXWrIMWhFtLEGI'ql*_t'Pr"FO@<Y-@f6m]Ga?\!@fEYT-jLg3+tTIh+![SlHfW0fpiS3fh.^[jNDYC5R`TMq&Pm2j4#E%%J)6dM#m.l/8,cSC2"ef15jG,Rrq=hY=,..?G8&oZ4?aMI/1KPOONNurHH2ASe=BaI(,bK$e_BS^O@Z+DTpk);/hI61N!XT&cD(R%a'E2$C;`09.#lFu$bqgr`$lEr)2?nXhu[k>`2EbNU7RO=C,:PnSYtC\Qe?]OW2>'L4n2UKGZsA_0r&FT+6gkk&f6J\cuM5l8Im<m%pd!JJqemo=]JrUu+u42TCoS7CVcSfb^V^lA@3@3e4hN@<8U_nmZ(DFDWF92KW77a)TJ%bQI)Yrt%qcE=VG_:*5ke2'(PLfn7P0]7%2+;tgc]kH:Ss#FO*pjaM!UGUKq]<JeSDk=MKpZbp5L*B2Q4Mdj[N8aD:HPnp)ZB1IU`BLcT-Y]A(X1_8X>Xo-+j!L>.#"[79>N,&%F*JV48$'r,.F1s0V.4,V'35f\c]0A1f+=#M.570uJe1q(bW8Ep9%,5,=l[nA's7$C7dK#K7.H,'@ZM!piAX8Cqpi<=lio`t4CU$N%IS*!4/Qhd1.5<Hr:SK55WYeCN.h9OgN7RU`AW#"o(H/(1AeIkKS[$6eREe>PQJ@(JY6IH:O:q4SI\P)OWc[ZLX&Wcd4[^dn/*@nN%=Q/!h._8)>fB.JrpUQE54gRjXf(#S'SaZjCjDd4q+Z4G^bi_PFUOp]8FsmuUMdeIBF)2JcfQaek+2X&f:0:M\@e7>&'0B_s]LI^N%MD:Z-6<+$>Po)lRKG^`2:?+3c.YXeYAX!GC<P-]U6Ukiuie/3J!^!OMki+UNM8Nf^?<=;Yl%DSIT9hSgO_NId_WaW@",#qiH70G:%N,g]a`MONQfRGMP5f4=s<J)@ifLKgpPa@V*[ngibFT#Qo25XLuI*kIgO\ohTd\s0O@Pu2:Zc=K]p[1,/oF+ZG^'GeeO$L%;R/+X8%L3J0?_K9=(<Q=::mMUe+Bd#6T_)tIaLk2#]1f.,L$Ifd&!]>b2OkT5_b*\c8k\NI\_WT'*YIeY<)U#^R$4Y5"-%ZN?d1N,`8;MRa%G,ie$WcXhaX'K?'<N+&I(ooe`7$Mc"k\=<3eFEa7\67!-aRmGpc`Gm^Y=,7M'+;Q&,t8+78c5A`'kAb="elj"iJMQEF%i>Fdb/8*%dEb>XFmh:TR77mtQe[1Kf*4\b"<D66]L8)8;/&.h/uq+g/n4N]fi%d`4a:'#]ffhENYO"/:J:,#"+-TDbtg)g^GYBF#sIX@)bM9e%@Fsp])UAn`Rq5n-HPPmNrPS-*r&1gh-hQ9)N.5Ypc:#iXqp2n)75E2Pd)WIMh^.j2>YY0c3L126n1c-EcI33J^C1eX?@.U+KcO;C%p,Z]mT@t;)p+<n)$QEuH2oear?s)i^mFD^HfB0\JS!eeC3,7c+=24>-fQp>)[Wf+e4P"1_euW+dmtJ^:'tnnR.@d_,<p+*iP-Nma%]-EUq"EM%!j8?'X:2hGtX[W->1Eg88Mj^$Lm&[<f=tmP]ZS/(3T:u><\IiJ`[4r(/rhJ%`22'MIT19<53=?.Y/1.ef[FqAp5Ye\[%\&:N>9%TK27'>:3[Dd1jlS\gt(+3W=#DQL)Bhjb\,]R%kpWD=t[p>=J>jtJEO<mg=W1a64*%`HB'A.[Q:1/:2!'tO8)f]d"\=2b$%Z93g=4moTUJhM&.!smgo<a`8g>$r#>LFepFfcGqaXA0%<.@;D'-;(a!2rW?$X`l*b$q&L.c$pL<gY(dr`YLfV1OYi*m5UqS#h!sp%9"V\<87N./+1lP45,T@*m>aS67sD_7-]oGla)0GYb_:"TZLuFk^iIA0O,$&>qfsJ5`Yma]KLF2(ER*U'Ce'.052Ri/06oUb+0O[O%dH8aXRI7J"_CWnP)c7F9?L'/Y/AuF4"Y>96,dSTki@-j>-Bo!^`O]Z1aB\(!V:rV2JOiO(L*p*eJ<ZuZne5S4.]T#%dk$R"Rh?n?%QbN0QM3)d3bYo#-OaC^0<(1^[mG?0$8u=3.@,A!@1)ucJjGgbdiP::m5B:+a\ee*I\";L;7&G]<d:X''q.b:4X!*l7l2&aEb`^37%+35g9Vmi63M,#^Y'qpIX/k[`05Y=ugq2$Fs-E9/((5pC[H^4dp`!8%*Ec'ePQ?'LRFjMFX$"n"<QO$LRL6g`\lDfa&i!W2e01m*#%`NK?!6=lCHg_kr+\r,)\?`,2V0.SQ<E/d3M.9sPe;PFmp,&>Y@,pJWi/>>!.0j)OlJi,uk_C7?Znn>Qo$PIs2=LE7ff#0@j<83c2%=C,IOAe2MdXB5<2FU[T4^++qt4#$Lo.:m<0^P\\I.`/7icTkI)B!b`FiS*ImD#71biq)HRD=q(@O_Ke*^F4:LPKOS[*>G@";t2AT%Q;F=I&7"QW>OP]]Ul-U26GuoFoFBq'[Tu%0==^L&@ZeYIRmns[fo*GB+rid$7P#uC@[!>c/7i;/p1X]a50N.8@[hkWQ)Cj8CDsLE%TEn0NLG[#]X&(D"2AEgGC+"ca==A`bW$q3MF]'^SS<Ae9B'[\JOn]<Z[cdLShU/tA><Jj0LPEpsR^^?LDer`A/06<tN'&e?5:J<R%aA:fO;J!**>1c>-MI@C1i3Kif.I.&<KMFR/EpI%E0/=^$ED:HeRG=*1k^\nr-h7pf;CLh#K$u?5f)&K?"K;mC?IG/;QZ&!J\jm<W%<FfI^OXZIkSRHG4BR)Z"o'3W6e(c@4rMk4,^g7c1mrb;ZTI@Pam-P+mhieQ7G,V<5WJncE7mc;6A:C$]WS^c<j25>RPfu@AmqTKV%mt\1'Y+F<Alen"hq4:k,H37AHU'hl!!GU`*LDQ/;/b4IcDJjROS2o:+=T:G^Ps_HV?s7)%.Q=P:R.\@<"n)4>&hZB(IK"8\Dnm8V%f>nTpq7mJob>WCp8J,]d7Ff>YH%Jt*C0oXDEYFSO#o4FM8u8?EVlEFa9&V5/fOV:W:=oDr,u;8O1ha)e`/G`erer?W8Ss?]q$%N3%[Nt3![53hf].Au$leH)?L)jA9oIN?'?=@PB\92`N't,iZT_SKTLKs2+,kUn?;a]=Tn-NNLaI//cJ'Y4n+`<F@Hh.7MRYVAHYYY<K%;+^_C-:=Y.G=Z!TH*j'tMT>MsXitdKY0Jt_rJkUXqdb.<D:S)j^A4uM+!pNlCp(N+d04gcgI@<R6q[PiY;9eJNBD8tl1F-UqR#Zl%A,lkK&/p:XR$HDnVs_W9fr$%sercq)chRWXh/ceUV*)H-\#1j>1[^km`04t;j<m_l#&]K$ZbI92!BoQkUoSLOZ$1orS1L\:L3<7Y%kDX49S]h*^(.E1T4#*tLk/g`!%K#WIr$gU<hWfhu=es0Pi3(oUZ0U&0l3e^IU?DHq_!*f\Y3&;<lNCU;QUk2N+!S/?HQ5R6P?YmE%aDT]!(a9OWK)"n.0Y>-c/R2k,OmHk-,m`lrJ^Z4#/-CAHp@DY/-!Vk10\adr:B-_&JFh0COG<PVX>-_;L#s"=&-/sc:6A&co`-=L%/*0qmHaaBg4`S(c]+:b49^a>QVBg=)OX3ah[k1BeLG&(#r[`^@?Et`+%qKs.F:NsUe)0bbEA$[S%F^da'2u%WI:ZH.$N\>-cAoT*%">j:lN[*$D;ijWrfBu275MWLVM-MQ[,?@sH*PQoH$>NeM$aRi\1VZ@^bBE_\#7bcY+D1EZO`cX:'Z@Qt#md6ZJ4J)n"hU)6?UUjT%?/%g;$kSH%@d*<^-hS?m\KbY3bp:Alg$ZhO,1>o(C.i:C1,Qg6!@1&ZOe&G66;c^+RmqZ[SYgE&(L*8P)V9ub&bBbCk"&k"'e/N,%+Ik55_/UO.htsoM@AjgCaV6>,-\N]leiiONPd$',L@V[?8$WUWUr!A4k57Pdlk[WX<<3"KCN!(rSB6_#c6ph25;Xu:SUO/;LeVFN%=CRs*;PKW*-d&5aU@Jk#bVC.+I4j-sn7]`a^U/a-\8s>W70c.;$QZG$c&cm=>4.>?b3l;kX<K\(_SZ&*:khKFWurmc1=SqcLrL>R%,IU+?J;W"&Y0rJ``HgM9O:9dblTZ\'0<`F"J0c>('eBEPKG^q(-NT\l;;IJ*-@%G<VK2L!N)ufGa&p;8O@VO[<Lr=Lq4d]5`Su9@%3$R(u@(0([.YnKq0KMBH0f[7X6E$^&5V'r$(=f8oYBGLt@iCB39js)6l8rTt>,t%X7^e)??0jm)IjO5,-q^J9i`F8RWD_h(\<phc%hYTualV/?BOof^7AjWNq#H&8VWlT-"74Q.h%3nVj=%,)r@Mu<o`,I"a$!.JQE)!l!=uj$Kf(O/'efSVrICb4k^Z&X1e\(`W"DZe-%^LSZ6!u#Ls_Qb4O'p5%8P!W%%.CN>h2Oih3p_QD8c^"$$W=Whu+g-GIL3:]Mf)1sZEC2;!pS"`>L^ZC"\ihJs1rrGoLf,tOHEHEp%'#g^cXgk3GMWgYUKZl`C8nL5d;+`+hn.TCDZ&-Q[":Gs+'%KC!U.e0JPuI1SnlW6gSgFY:X@Ur[g<h;A3t_YQ-hHB:5lJE?oH+k/%UL_)c*7%r=Vd8J6jDd;onfY2=_/RWd=EsHJ[jD)jle*@7gLJ6AOXL?Um%e8Q!C+PfD_t5h(1s\,?KZ;Fp@`$5H6COKUTR^e`.:%\%$8L;`UFb,REl>uED?)I=e=M5uf!YCH_*43Vd>C>CHeQZc%u3upE^`]jOZ?5;#Z])HqPZb:O\g1HoZ2<FfGM)!VrchLablfI4Z0lG%;^dY#&?>Zr(P^1",up!/@nBE`L*p*e+=WSEP+O3[V(.b.jD("6GggrNr6)=neQsb]FE0WQ>h8Z?j!p;*lo[CO)0jn?1$ob<<XT78%cHG$i69&djGMr-EC@7#lMRL-;4*cq!A?n8T3/V?HT@"*W19)Kp?$>o:+_R*O[O8^G^E,okg,s^165,KT#o3jj,q<VUU</Lre/_H9%+:gqgEX!%;18[l2rCTZO#rFnIYJE@Nl^3+d/5"lPd>)#?<"P([(d1&3<E(5.N?+@bi[^k.(sK7!U`PX@d\fp.."mUOo-cE`+"@oj%nY&loQp@N_L`#;),?.9-DQ:hjWUu`ZQUMt_2O0or?SY7BTqMp/3Q2S1$0=(ccaOLhfsbiR>0Jb\J]Bo1PcBt7$GoXRUW8Q2UE]MJ%m%dShY`uad:e]"k4eiRuSiW'@&isrK`re770h,E&9W*)&'"Nimr^n_`5YBO)nl'D&:o3at>g+skmX<O#>-qtE@`*n7n+$nJ%."oi%]a&h:FagBcO=Wu6+/65r<>3b[(!49.Q>TJj%#ndFiBs"MA<`R'aO*Sdg+N0IVcXj;iHfbab7q+GG6aFY]tF21ig#>P<j7D3Uf7Aa%r%qe[WmZ/b??UV$Sn9VMQ\\b.Eh-XF9^,Y<O7F@8NV%)]Z-+)PM'q:)ptSa'.Ys$F0R>o3ATX$+`"8cf5bm+n75\jM/2@9DMX0UF%;hS1i]/"AaHOiNAeN;iVgkAEs9?_NTPYt<<-eb@mWcJt]bVGUS8HIPMY&hPT."*Sk\6!`QDsBKqe2c]L%,"Lb,%Loc:XiS`iTQ+Q%A<ToFD"?&B9rTUS;t>h!*1t5epQfI_<#.q<V<6s*-@VmqgRCgc]`4Bj:.3)L=D/j,Q)9_:l8,7dXf(5pRG!$f$!R<SA%)9R3oq@U%^Aa'#:A>>4,g/5q=`al]?Yhn;nQ/"egk!lI8Vuu"r%s:/.Y_-L?-t'4A^!X(e*3i>=+nlk.rrO&,pG0V_KXIWP+0PR[DYB:UdR?l%5Lj?Q<B<plBpK"Q4\K,&Q*/=l&Gp_CiWj"Chu0pEFniH`+!pNrj9;,\QD86dK%R,5Rl=T:6j5:1$hAi8qkgn35h:NPneBD)@2jKL%kEm:cdaU]PDbgRLeUVg$lY+6rNoV?t2T[/1*OUgcG:<02NXbG2l!OI7goYAEFa9k"DBK*lX]TC8hG#B8YGR-b_e%lK+1q!K:Rl_i%A2O<uD0\MnZ&-H]\FS/3q*:-O[-.mMK4LGl*F)a0JRT:#D;4%Y*XXp$ZeL<5N**EU9\0DZk=^aHhERn'/IlLJNGC5hR7DlfCE$hC%3ocT0_q#.8G"+s:/m9A1C2#$+4CpD/7VTui81<s]Ub-EKK3E<iM:JXUXMD`8UIC(cgm>Y+&NFR70,U]5QE897e%[fVF,eI<phXS6%45H]U"USkq\aLqQE'rF5G.FD1=rS<1*<e566sN`840^oUq=VsRB,4d?SGbu[Yk.t#[\'-Af^F+.O>5IV&Xl\'dn`#f'$e1-L[r>T%,0p=F:ai6p,I?H_%ppX*n,`o[VYB[291^)>_j<>*Buj[WWF$f8n/LKdemqr.*4Nt+CECfkU0`oDocp?-A'0`U'M4,*meb@!KhheE%<03.56=e6VJoY5pN&9ul/Qha^#GKY\0N7b#jd?s*YJ!,XbSDDcB,OeoOr'OX65$$V7&"."jk1')-P@IE1D(Lm?nqX+6ktiR-o**C%[OH<ej2#9pOs9\=]dQ$#.mf1$#en?HVQdP^11`lsr4PN[.L0E=l5iIkLiC_Z3\#9lB;'tghe-#6kQ7?P*$J8T=qHf8hi5X.5n/sX%Lcfeq]:]jP$=t$a%$<"0*?mG)a]XIS%S2G&,.g`"AYR0n[od4Mh)Eb+&uV.'TOVL6U3n>o'^B%nas\peF@S?k,!#A6dclZf"pWa\%n<?TY@3p'9?k'4^2)>UQWKDV-:lQ1.'WR;:OB@KQLVtYS0s"apX/*[A,sM]:$:TqQn2/:?iSGkK1g2]A:k"PKL[q!0;5f+9*^dRo%EZO/=K#k.uUXt]-7RjXmplnGi@jQ?=Tc,e`2%pAH;jMeB8s,iEG*0fVR3L6[EYgKV/2>aB;+`td4"@RI&rh\%@[5VihaiT;[.[bC%V.2pY6$t$m'N;N%U(lQ)W=B595ra*u$s->9\<<K&/#CC5mF1(dr%*JaG`AeV4;F9>+r'9uM-D5[7&ELsLtkC/FFo2V8;VX:5LCg3%U<Y34R:S/0]4AtsYE;frc\TMlGYb+_eAWVe+at8R%e3ObACuI\mn&A@6$<u.P_i7,\J^65<5r]!'rInMNg*:beQ0^O,<A2haE*0m%6me6H(-3QalA=k"R?WOHVqeZ%U[9,^'dq\9IX3hh"T29)qo;gR^WkE9?s@?STAft8Yi]9:&DR,C@9l]'7U3!.4ZmWK?6.f.^`Alp%>%XFA%$pcMbdq\e&H!$-\T>tjSND_FM\<I*j+6*)h\0_1Op]s;I]2=Zf_Ac:$&8!kmp'[a?;V@/%F"J;qF$+B)*&Q4HF9L:eOF_a%lN:-rU2e#X%?YNH^t6OD8b3Td5gIp7oK[IoL1pWHl8:XA]Ea&SY=7K&q!ZcloV(pf*dj5(6EApd4`R6F`@k]EPZn^aqb]/QP,<lI%%0cZ>7h+u#C)_=9D>/p2"'iLp1Jihm3!9SaH(r4Qn2M_d*5+(&Es1=L-fgk/3e(`YnnFGk/7cV;ji\Zbhbet_OPFNKr6oJj77/3m%-uQ'g@cbt]-i@#dMgAB2PG\k.T'(R.DWgO!9RbaoN$'kLVeuYmONk'3/)DSA%r'cbV[Y!qClmL#hWW_I$)dn1OTF)XVh$*+Ek[5m%bC`#(FtFr164HSVB1=dDciS#hgsC5pRNl%+:%,5'md]kdATF8IEZBNu_H4_Eh$C/EZ[o;.4W11qO'qR#/`ZIR:`*C8PZ>4Ocg;QW%G9"K2ee!jtcUi:OSNLKN[>,A]\#7VcFu\lp%2B3T@SiLqJeO""q<s,^l]G;6E5%to]A9Z&n=PD2HfQePn2R-c_[FDjE^bf'6W=^*%;45:].SlJN;Bbb/mC4DjJs02k%3/J/Vc^F$R%E?_Z%a:"aB+@F5D((,e$bq*m=[%='XLpEEO5*339I-?Xe&HX;'pD=`YJDbT(T`9%ZW>%_NADl!%u?U<R!i]\8p4M#WViJXU<=EPST.'4,f`X<A+nW*jKB?k3iltm-Bb&XKc*lcOi/dop7q0M'@$JbY]F(Do]p^hq1?PG%_Bnn:@s5'2gPk):PQ<a9$,B<Mfbt%Ic?nf-(*%,(_\ScT**4-,_i&E;_m7th'/)^[m0*!S1N-Y^)fLYD`GfWqDhVhkrg#A>F)5(;%rU^E'5/%f(6M\MV^&eQ#9(].BJ4te?eK"YV,UA\)X6Xa!CF%/@W(Vd,bN=^Kg2RES"RNJFb7eB,em>*SH!C6u3VS+-+8QUr'km,u%&?krR^ttYZoBm/HQ1.=e.hcC/7EeFXO7_FT>>l@+1`T`+'E;G4=be>e*QuQWG/_MWVc`m3)Z`?T5]6j4kWbGrbmZS9Bn1V(Z.=,c%'=*ZE3B&*DJ6guDP^<C*qm:G1MHmdd4;CNmV;@ePn_:Mjg\7;CX48L8)tlYpB`L[F:rlF6^flZ<%i7)'Y[$Oj(dhVAr>@NXFS2Zm%f@c\_1&7qRpDLEY$$Gu/Cj`\IS(>X(L@a<<QCP8K)=*=(%D2+sApmO",KJJX=mO8%D=a7^I<scKGP@!@haZp??6>!Ll<`;D:K\>3%TnEq_Gj?io&In;'.\%qp]1S+4fuL&]6.s1q43BP"hU_DL39'6nb7Be%L@'0-2t$q:\[QsI/VhO"cLimEa*G5^[[3T*S@`QMAihYo%Wo7aSVNe;%#tj9f`Y",lC5iR+e)%?X(7W>=?CoePDG.>qm:r_B:KEB6VjU*rE=K>;n;"(MR-DLLrbY33DaWPF/dZJ+?"afNCg1Bq%A(P$*Z>U<fqmdIT/"*Y\o2D-\"bGTiW9G5tC#b!F%0'U/l?rfMmTt-A9=f?-[4@fP@^M?t)m04ResI'J]R=6QUFs">gCCuKfFU+V%IO!_<H&\a)@[B3qdW..^RMOZ/#HomMQ4XL&CUT<q`"])]l)EKRNg5cG\A>;L\RRXhXZC?f4:mS0Iq0@R]H;#tQ"],rM!_r,'G"!G%VW^LRIG6ns[^J/*Dn<o!5NL]bBk4KWq<oj\Crd5M?1u6I]8u(qCfeQh`!aP+&X^`Q'COh'(OFjhXpaiL6h$r*AFOASj_`rp_b%Hb%b\Xu/'FBc,r2`%1!W=:P0S_MJ?EO19&%V(3/ESP]E?f8BXiG^)0toHP_VRg-7or9G7)H./DhC4grj[<=/6c!=@D?r(EHLpD8@pCs%(,"14T_pd9>rlLKO2Mij\]a1dW$W&g48m/56O*)m#gD=N6'"/V&9O.qQ13<_%JsB%L:l/um)WN8fHTI=I:)$"g-Pdl@PMtXR/X_[%=$6q*kcXY_JEA3l781o+X,_iH7F!:s?t14@##L*fE_#=_q1]3+gGd?'(4YE'ld8UgJF"n#Rg@Wr\R!tK'4HWs!AX$eh('#XI!m%\%SGX;!\(*Q[,P(2;`"n?g/V_ZPhSa:D$?k<W%ejD_Lt%j*G]:.)GGuao0A^e3[Rp02g[R9SNU!DJ;-(/Cnj;-Z=Y6OAmni#q<7H8;%O2ZIZI1pVVpcDZOo(P*MjibA_jas/da[JS=S4eb[fsKN?%E*;)(Fkc\l]]9r^A3K:IE;RpkK.SI/W=jXoPjVH_\Z*qgqtlVfT8cS%lqO+p`EH-]-(XVe_N.T7ECe1n/c>1!,/Lu<$h196%j/t2;'Yl6B#;Rq6Tk1Gr:("f5,1-oG$)uilX-iFqrt#nq1n@prpES^rqah<%IJN7@J,&Zb:]L(1+2@`sDnl55gR$e]rUDPUr6L_U^\m=lJ,\aeJ,SqFpKp,an[C0$q<OZ&qssP9s7,:P"`jVg+91T'^\c'ds7H>Sg>0+~>%AI9_PrivateDataEnd