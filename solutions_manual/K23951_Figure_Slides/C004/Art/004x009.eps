%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x009.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 270 213
%%HiResBoundingBox: 0 0 269.5566 212.1309
%%CropBox: 0 0 269.5566 212.1309
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 6016 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A87DFF7DA8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FD04FF527DA87D7D847DFD15A87DFD17A87DFD17A87DFD%17A87DFD17A853FD04FFA8FFA8A87EFD17FFA8FD17FFA8FD17FFA8FD17FF%A8FD16FFA8A8FD07FFA8A8FD75FFA8FD08FFA8FD76FFA8A8FD07FFA8A8FD%75FFA8FD08FFA8FD76FFA8FD08FFA8A8FD75FFA8FD08FFA8FD76FFA9FD08%FFA8A8FD75FFA8FD08FF7EFD76FFA8A8FD07FFA8A8FD75FFA8FD08FFA8FD%76FFA8A8FFFF7DA8FFA87DA8A8FD75FFA8FFFFFFA853FF527D7EA8FD75FF%A8FFFFFF7D7DA87D7DA8A8FD75FF84FD08FFA8FD76FFA9FD08FFA8A8FD75%FFA8FD08FF7EFD76FFA8A8FD07FFA8A8FD75FFA8FD08FFA8FD76FFA8A8FD%07FFA8A8FD75FFA8FD08FFA8FD76FFA8FD08FFA8A8FD75FFA8FD08FFA8A9%FD75FFA9FD08FFA8A8FD75FFA8FFFFFFA9A8FFFFFF7EAFFD75FFA8A8FFFF%7D7DFF7D7DA87EFD75FF7DFFFFFFA853FF7D7D7DA8FD75FFA8AFFFFF7DFD%06A8FD75FFA8FD08FFA8A9FD75FFA8FD08FFA8A8FD75FFA8FD08FFA8A9FD%75FFA9FD08FFA87EFD75FFA8FD08FF7EA9FD75FFA8A8FD07FFA87EFD75FF%A8FD08FFA8A9FD75FFA8A8FD07FFA87EFFA8FD73FFA8FD08FFA8A9A8A9FD%73FFA8FD08FFA87EA97EFD73FFA8FFFFFFA87EFFA8A8A8A9A8A9FD73FFA9%FFFFFF7D7DFF5253A87DA87EFD73FF7DFFFFFF7E7DFF7DA8A8A9A8A9FD73%FFA8A8FD07FFA87EA97EFD73FFA8FD08FFA8A9A8A9FD73FFA8A8FD07FFA8%7EA97EFFA8FD71FFA8FD08FFA8A97EA9FFA9FD71FFA8FD08FFA884A87EFF%7EFD71FFA8FD08FFA8A9A8A9FF7EFD71FFA9FD08FFA8A8A87EFF7EFFA8FD%6FFFA8FD08FF7EA9A8A9FF7EFFA8A8FD6EFFA8A8FD07FFA87EA97EFF7DFF%7EA9A8A9FD6CFFA8FD08FFA8A9A8A9FFA9FFA9A8FF7EFFA9FD6AFFA8A8FF%FFA8A8FFFD04A8A97EFF7EFF7EA9A884FF84A8FFA9FD67FFA8FFFFFFA853%FFA87D7EA8A8A9A984A9A9A8A97EFF7EFF7EA9FFA9FD65FFA8FFFFFF7D7D%A87D53A87EA97EA97EFF7EA9A8A8A87EFFA87EFF7EFF7EFFA8A9FD60FF7D%FD04FFA8FF7EA9A8A9A8A9A9A9A8A9A9FF7EFF7EFF7EA9FF7EFFA9A9A97E%FF7EFF7EA9FFA9FFA9FFFFA9FFA9FFA9FD59FFA884A97EA9A8A97EAFA8A8%A8A9A8A984FF7EAF7EAF84A8AF7EFF847EAF7EFF5AFF7E84FF7EFF84A8AF%7EFF7EFF84A9AFA9FFA8A9AFA8FF7EFFA8AFA9A9FFA9FFFFA9FFA8FFA8FF%AFFFFFA9FFFFAFFFA8FFA9FFAFFD07FFA9FFAFFFAFFD07FFAFFFFFFFAFFD%07FFAFFFFFFFA8FD08FFA2A8A8A8A1CAA1A2A1CAA1CAA1A8A1CAA1A8A8A2%A1CAA1A8A1CAA1CAA1A2A8A2A1A8A1CA7DCAA1CAA1A2A8A1A1A2A1CA7DCA%7DCAA1A2CA7DA7A2A1CA7DCA7DCAA1A2CAA1A7A2A1A87DCA7DCA7DA8A8A1%A7A2A2A87DCA7DCAA1A8A1A2A7A2A8A2A1CA7DCA7DCAA1A2A7A2A8A2A1CA%7DCA7DCAA1A2A1A8FFA8A8FD07FFA87DCAA2A2A2A8A1A8A1A8A1A87DA8A8%A2A1A2A2A2A1A87DA87DA8A1A2A1A2A8A2A1A87DCA77CA7DA2A87EA87EA1%A87DCA77CA7DA2A27EA87DA8A87DCA77CF7DA8A17ECA7DA8A27DCA77CF7D%A8A1A2A87DA8A2A1CA77CF7DCA7DA2A87EA8A2A2A87DCF7DCA7DA8A87EA8%A2A8A87DCA7DCA7DA8A8A2A8FFA8FD08FFA8A9A9A984FFA8A9A8FD06A9AF%84FF7EFF84A9AFA9AFA9FFA97EFF7EFF7EA9A984FF85FFA9A8FF7EFF84FF%A9A9FFA9FFAFA9FFA9FFA8FFAFFD07FFA9FFA9FD32FFA8A8FD07FFA87EA9%A8A8A8A9A8A87EFF7EFF7EA9A8A8FF7EFF847EFF7EFF7EFFA8A9FFA9FFA9%A8FFA8FFA9FD51FFA8FD08FFA8A8A8A9A8FF7EFFA8A9FF7EFF84A8A97EFF%7EFFA8FD62FFA8FD08FFA87EFD04A87EA8A87EFF59FF7EA9A8A9FFFFA9FD%63FFA8FD08FFA8A8A8FFA8FF7EFFA8A9FFA9FD6BFFA9FD08FFA87EA9A8A9%A87EFFA97EFFA8FD6BFFA8FD08FFA8A8A8FF7EFF7EFFA8A9FD6DFFA8A8FF%FF7D7DFF847DA87EA9A87EFF7EA8FFA8FD6DFFA8FFFFFFA853FF7D847DA8%A8FF7EFF7EFD70FFA8AFFFFF7DA8A8A87DA87EA9A87EFFA9A9FD6FFFA8FD%08FFA8A8A8FF7EFD72FFA8FD08FFA87EA8A87EFD72FFA8FD08FFA8A8A8FF%7EFD72FFA9FD08FFA87EA8A8A8FD72FFA8FD08FFA8A8A8FF7EFD72FFA8A8%FD07FFA87EA8FFA9FD72FFA8FD08FFA8A9A8FD74FFA8A8FD07FFA87EA9FD%74FFA8FD08FFA8A87EFD74FFA8FD08FFA87EA8FD74FFA8FFFFFFA8A8FFA8%FFA8A8A8FD78FF7D7DFF7D52A87DA9FD74FF7DFFFFFF7D7DFF537DA87EA8%FD74FFA8A8FFFF7EA8A8FFA8A87DA9FD74FFA8FD08FFA8A8A8FD74FFA8A8%FD07FFA87DA9FD74FFA8FD08FFA884A8FD74FFA8FD08FFA87EA9FD74FFA8%FD08FFA8A8A9FD74FFA9FD08FFA87EFD75FFA8FD08FFA8A9FD75FFA8A8FD%07FFA8A8FD75FFA8FD08FFA8FD76FFA8A8FFFFA8FD04FFA8A8FD75FFA8FF%FFFFA87DFF7DA8A8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FD05FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA8A8FFFF7D%84A8527DA87DFD75A87DFFFFFF7DA8FFA8A87DA8FD15FFFD04A8FD14FFFD%04A8FD13FFA8A8A884FD14FFFD04A8FD13FFA8A8FF7EA87DFD04FFA87D7D%FD15FFFD047DFD13FFA8277D7DA8FD13FF7D527D7DA8FD13FF7D527D7DA8%FD12FFA884FD047DFD05FF59A8FD14FFA87DA87DA8FD13FFA87D7D7DA8FD%13FFA87D7D7DA8FD13FFFD047DFD13FFA87DA87DA87DFD06FFA8FD15FFA8%FFA8FD13FFA8FFFFFFA8FD05FFA8FFA8FD0DFFA8FFA8FD15FFA8FFA8FD13%FFA8FD42FF7DA8A8FFA8FFA8FFA8FD77FFA87D52527D527D7D527DFD76FF%A8A97DFD05A87DA8FDB8FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T17:00:06+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T17:00:06+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T17:00:06+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7Vb+RvM9to2q6XJd2eop&#xA;qN4l9JNKJoDMyC2Z451/0gcbloZFk47Kp+FaHiqqP8u6PrNnPHor6pJbQadp1oRb2iQGISTTXIcB&#xA;poXfiixoidNh0wqn/wCir7/q83n/AAFn/wBk+BXfoq+/6vN5/wABZ/8AZPirv0Vff9Xm8/4Cz/7J&#xA;8Vd+ir7/AKvN5/wFn/2T4q79FX3/AFebz/gLP/snxVSi0nVg83q61dFC49AKlpUJwWob/R+vPl9G&#xA;Kqv6Kvv+rzef8BZ/9k+Ku/RV9/1ebz/gLP8A7J8Vd+ir7/q83n/AWf8A2T4q79FX3/V5vP8AgLP/&#xA;ALJ8Vd+ir7/q83n/AAFn/wBk+KqUWk6sHm9XWrooXHoBUtKhOC1Df6P158voxVV/RV9/1ebz/gLP&#xA;/snxV36Kvv8Aq83n/AWf/ZPirv0Vff8AV5vP+As/+yfFXfoq+/6vN5/wFn/2T4q79FX3/V5vP+As&#xA;/wDsnxVSi0nVg83q61dFC49AKlpUJwWob/R+vPl9GKqv6Kvv+rzef8BZ/wDZPirv0Vff9Xm8/wCA&#xA;s/8AsnxV36Kvv+rzef8AAWf/AGT4q79FX3/V5vP+As/+yfFXfoq+/wCrzef8BZ/9k+KqUWk6sHm9&#xA;XWrooXHoBUtKhOC1Df6P158voxVV/RV9/wBXm8/4Cz/7J8Vd+ir7/q83n/AWf/ZPirv0Vff9Xm8/&#xA;4Cz/AOyfFXfoq+/6vN5/wFn/ANk+KtHSr8gj9M3g9+Fn/wBk+KteW3vW0si9uWu547m7i+sOsasy&#xA;RXUqR8hEsaVEaqDRRiqZ4qlVt/yleo/8wNj/AMnrvD0VNcCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpdoH+8Mv/MZe/8AUZLiqY4qlVt/ylWo/wDM&#xA;DY/8nrvD0VNcCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KpdoH+8Mv/ADGXv/UZLirDf8VeaE0nzGYhPc3MMpGgzG2eskfBWYn9xEBw5GtY24+Mhwqm&#xA;Xki/1u9vDc6nDxuZdNtPrRkDRSBlub1UIj4LUMorU8fHiK0CeSGY4EuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpuXE8QC1PhBNAT7mhxVLPLRmOmOZlV&#xA;JTd3vNUYuoP1yXoxCE/diqaYqlVt/wApVqP/ADA2P/J67w9FTXArsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqXaB/vDL/zGXv8A1GS4qmOKpRbyIPN1&#xA;/GT8b6fZso8Qs10D/wASGSrZU3yKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KpdoH+8Mv8AzGXv/UZLiqTRfmFpw0vW7+6tZ4DoM31e7txwkdpCF4rH&#xA;xahLM4XrSvem+KrNC1q11PzSt2hWJrrSYWSBmUuONzMGFB3Ug18O+T/h+KGW5BLsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaZlRSzEKqirMdgAO5xVLPL&#xA;U0M2mPLC6yRPd3pSRCGUj65LuCNsVUR5M8thJUa0MgnLGYySyyM/JQvxM7sx4gfDv8P7NMVQumWF&#xA;pp/m6Szs4xFbxaXCEQEnrczEkkkkkk1JO5OT/h+KGSZBLsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqXaB/vDL/zGXv/AFGS4qmOKsdB/wCQhkdjpAr9&#xA;FycsH0H3j9KOrIsrS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYql2gf7wy/8xl7/ANRkuKq1jq+k38ElxY3tvdwQsUmlglSREZQCysykgEA1IOKsauLu&#xA;3ufNM13aTJPbz+XzLb3ETB0dHmLI6OpIZWBqCMux8v8AOH6WJ5sj0OZ5tF0+Z/ty20Lt82jBPXIZ&#xA;BUj70jkjcgl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KpdoH+8Mv8AzGXv/UZLiqQp5CupbbWre81ZimvTrPfNbRsrAKsa+nGbmW84o6xlHUgrxPFQmKpR&#xA;+hTo1y2mm6kum03yq1utw1I+YiZkB9OOiDboKHtuTvl+H/fD9LEs18uf8o9pf/MJB/yaXIZfrPvK&#xA;RyTHK0uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtMoZS&#xA;prQihoSDv4EbjFUs8tRLFpjxqWKrd3oBdmdv97JerMSx+k4qmmKsM8x/8pFqv/gOz/8AJ1syMP8A&#xA;vo/pYyRmlXssLeVbRZCI7nTpOcfZjHFAQfmK/rwzjfGe4/rUHkyfMZk7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu0D/eGX/mMvf+oyXFUxxVhnmM/wDO&#xA;x6r/AOA7P/ydbMjD/vo/pYyatif0n5OTqIo72IHvxihCL9NFyZ5T+CO5M9G1oRaTcTXHqSGPVriy&#xA;61NZtRaGKlT9lRKvyAyvJjuQr+aD/sUg7MgEiF2QMC60LKDuK9Kj3yimTeKuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLtA/3hl/5jL3/qMlxViVrd+ZbOLzCL&#xA;q01W9s3kP6JSGi3PwRuzqrSOzLyZVUPXjU/Co6koS+z/AEwTIdTdzef4Zn+srOhEob15KKSSCeIo&#xA;OTCrAVO5y/D/AL6P6UFObf4dd0RWJ9Oznvooz4B5LiEcqePpoMsP0y86/Qjqlw5roKyAAL+lYdQ8&#xA;do7RNQJI23JSrfM98n/F/m19vCjom813PFqfnKRJCkkNpCbZh1BjtnckU7q0g/DKhEEQ9/6U96Os&#xA;deuDc+XrdwGTU7F5Zm6kTCOKSPff7S+r86ZCWMVI9x/H6E3yVLfzbayadBeNEw+s6gdPhRdySbho&#xA;o5D7NGok+RxOA3XcL+xeJGP5g02OTVEd2X9DxrLemlQqNGZQRSpPwjIeEdv6SbRC6jYvPbwLMDLd&#xA;wvcW6b/HFGUDsPl6yffkeA0T3Lbk1KweJJkuIzFJKYI35CjSq5jKA9zzUjHgPctqpubceqTKgEH9&#xA;/wDEPg+Hl8f8vw779sFFK/koYJUciCQvcgUqafSMCtgg9MVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirTcuJ4kBqfCSKgH3FRiqWeWhMNMcTMryi7vebIpRSfrkvRSXI+/FU0xVg3moXB8&#xA;03SxSIgfR1SQOpbkj3fFlFGTqDluMS6Ecx09/myiYfxAn3Gv0FTgh1H65PL68JeG7hpWFusuqXUR&#xA;p+92FW5fcPfJETrmOXd/RHmy4sX82X+mH/EpeseovpC2iSRMXtRdhfSblQ6SYOP97uaADp137Uyd&#xA;T4rsc65f0r70cWKvpl/ph/xKMnS/uLk3IuYXXU5ZYnZYXoyJe2lnuPUpsBt7V8dogZAKsbeXkT/O&#xA;TxYv5sv9MP8AiVJJb6xLX5nhaHRGjtwTE5oqz3dpT+9/ldWIr/L4bngyS2sery8onvXixfzZf6Yf&#xA;8SsfTtWjibR3eL6za2v6TjHpOCWhso7RKH1OvMnt1FfbCDP6rFE1y87/AJyLxcuGX+mH/Eq3+nT3&#xA;IniuYXHmSV4nIhbjJHaXSRrSsvRrbm1P5QfnkeHIBVj0eXePf3p4sX82W/8ASH/EocXGp2Vu+sB4&#xA;XTy2y6WAYmBb0vVgNB6n7frRMfGg8N5cEyeGx69+XuP873o4sX82W39If8SqnRtXgYaBDLHJJpEf&#xA;6XswsTHlKiKsQqZP92z+sT7ivegHFM+qx6tuX/Hu6lvFy4Zf6Yf8SuWDUrySORZY5IPOB/euYHCG&#xA;CA8owf3uwns6gjrtTrvgqY6j935ft6FeLEf4Zb/0h/xLaN5mhVtXQia60dv0QkJhkZpwPgMgHqdJ&#xA;ZWiJP+TXtumMj6bjUvVy5f7LutPFi58Mv9MP+JVBoHmO3A0iCb1YtG/3J2UxiZfXmPxRxF/Voecn&#xA;rc17Die4oOOR9RMfVsdv2+5bxcuGX+mH/Erxp/ma7orORb+Zh6l83pSr9WjQVCsPU/dtLb8Yz7jx&#xA;3xuQ6x9HLbn/ALLv3W8X82W/9If8SvVPPSM2qbS3lof0bHaNGwSdK0N3T1APjm4kttRFJ9iK/h4o&#xA;0d+X2fV3favFj/my/wBMP+JXLpHnG3U2MN20kOkf6XZ3Tq3K8dqsIZCJdxX1EYHoChHs8RO5MfVt&#xA;9PL7fd9q3j/my/0w/wCJXjTvOk9ImujDHrX7+8lVWV7EqARHH+92LJxj+HoQW6kkiyOsfT/R5/b8&#xA;U3j/AJsv9MP+JVBF5/5G/wDUiNyp+oiyKkQslafXOPq9fU38fT7cvhwV0sVz+k/Ln+CvFj/my/0w&#xA;/wCJaGm+eYa20V6JItLAms55BVr4sCfRmJk24/Em/irdRs3e9x3/AKJ2/wBkt4/5sv8ATD/iV36M&#xA;89Sj0Hv1hj1P99d3CL8diwA/cw/vfiDfCoIHZm6kVbre47f0Tv8Aat4/5sv9MP8AiV/o/mESLz1b&#xA;ZZ2P1VrHifRVK0+tg86luW/Gv2O3LbBQ5WO++E/L6vwV4sf82X+mH/EuGn+e4v3a38csenfHayOg&#xA;5XxYH4J/j+DgKrXuaN2x59Rv5Hb/AGS3j7pf6Yf8Su/R3nx6QNqMMSXv7+4u0jq9o4p+4hUtR0Ow&#xA;BI/mJ3Ixvrtt5Hfz+pbx90v9MP8AiV3o/mC3G5NxaJLI31eSyEZMUaVI+tKxbkz134VpxPiMFDlY&#xA;+R+X1LxY/wCbL/TD/iXfUvPkYKrfwTCxANuzxANfVG6z0b91x6Ap1O522x+I38jt7vUvFj7pf6Yf&#xA;8S2NP8+MRA2p26R3H7+W7SGr27gg+hEhbi8daUZ96cq9sb67fI7+f1LePul/ph/xLlt/zAalw11Z&#xA;xyzH0ZLQRs0UKAkevG/Lk79+DbdOlN2ulj5fZ9S8WP8Amy/0w/4ls2nn5Klb+0l+pikCvFx+u1G5&#xA;nKn90V7ensW67bY/Eb+R293q3Xix90v9MP8AiV31Dz0W9A6rarHL++e7W3rJE9a+hHGW4tH4O3xU&#xA;r3ocHnt8j8/qW8fdL/TD/iXC28/MFla8sY5J6Ry2yxO0duor++ickPK/+S9F6dKHk15/Zz/2S8WP&#xA;+bL/AEw/4lG6VbeZ47ojU7yCa1gX04jFFwknJAPqy78UK0pxTY7nwAT+NuX2lEjCtgfnf+9CtoH+&#xA;8Mv/ADGXv/UZLga0xxVhPmoFvM6Rr9qWC0iWuwrLcSoCf+CzIwcixko3k/1ez1ievH0ZYJOdK046&#xA;xdGtPamWxFmI/H0hCOsbNE83W1lIlEj0FImjNTSk3AitfDbISl+7J/pqOaE0HTry70LylcFWalzJ&#xA;cXZ/lhkWa4UtsP8AdyRD/MZPJMCUx5fqH60DkE1k8pfWLDXLCaUJFql59ZikUcmRSsTFSDT/AHaj&#xA;nr3yoZ6MT3Blw804Gl241h9VqTctbra0/ZCK7Sbe5LfhlXGeHh87TS200TTbW1062ihHp6UALInq&#xA;lImhrUdSUcg1xlkJJP8AOUBXFhZBZV9CMrPJ6sylQQ0gp8TA9T8I+7BxFNKwRA5cKObAAtTcgVIF&#xA;fapyKtgAAACgGwAxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLtA/3hl/5&#xA;jL3/AKjJcVSCPz1dpZ6213Yxx3mk3EVvFGszCOf1+HpvyeNWVAZN34kUHIeGFUmk1z9La1pl3JCY&#xA;ZZhZK6LyeMNFqEsTcZCqgqWSq1AqMvw8pe79DEq2sI8mjecQCSYGCwqPFZnuR86yTH6Mvh9UPx5M&#xA;TyLNf0Un6d/S3L4/qv1Xh7ep6lcw+P08PnbOt0ZHHHFGsUShI0AVEUAKqgUAAHQDIE2ldirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirTMFUsa0AqaAk7eAG5xVLP&#xA;LUqy6Y8ihgrXd6QHVkb/AHsl6qwDD6RiqrF5f0GGEww6baxwsXLRpDGqkyjjJUBafGuzeOKsX8x2&#xA;8Nv5h05YEWKNJtKgSNAFRYzNctxCjYUMa0pmRg/i/qljJNdDs4Jb7zVbypzhlvxE6mu8clhbOy1H&#xA;blK/34MkiBA+X6SiPMsiyhm7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FUu0D/eGX/mMvf+oyXFUxxVhnmr/lI7H/mL0n/k7eZkYP4v6pYyZTZWItrm/m5V&#xA;+uzrOR4cYIoaf8ka5TKVgeX60gIrIpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiqXaB/vDL/zGXv8A1GS4qpJ5q0N7G8vfXdYLAhboSQzJIpIBX906LI3M&#xA;MOHFTyrtXFWM6xqFpqes6VdWL+rBc3OltExDIaI98zVVwrKV4GoYA1265kYP4v6pYyZ5mOydirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7QP94Zf+Yy&#xA;9/6jJcVSD/lXQk0vUtNvNZuruDVpnnvmkjti8jPx4hyYjyRAiqFO3EcacdsVSqTy9p+h61oGn2q8&#xA;ks5rKKGV1QOEZdRcqOCqqrXoqgAAAU2y/Dyl/V/SGMuj0XKGTsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaZVdSrAMrCjKdwQexxVLPLUMMOmPFCixxJd3&#xA;oSNAFUD65LsANsVTTFWLarGH86acCvILJbMaioFLbUyD9By3GfTL3fpDE8wynKmTsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqXaB/vDL/zGXv8A1GS4&#xA;qmOKpQLaKbzPNI9eVtb2ksVD+0TeR7/7GQ4QaCpvgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLtA/3hl/5jL3/qMlxViEHl7zYfLeu2NvC+l3mpTv&#xA;Lbendc1gjAjUJFITIweVEJZyB8bE0phVT8tS38GuppDXj2l9FaJZ3K+jHLAZbat0say+oCJRb38b&#xA;P+74H9k7UCrMvqGs/wDV0/5IR/1wK76hrP8A1dP+SEf9cVd9Q1n/AKun/JCP+uKu+oaz/wBXT/kh&#xA;H/XFWmstaVSw1MtQE8RBHU+wqcVYhbecmS69OW7vYri5vPQuYZLe1f6q6tb21ZGjmkTh6lxGv7st&#xA;QlqgcWoVZh9Q1n/q6f8AJCP+uBXfUNZ/6un/ACQj/rirvqGs/wDV0/5IR/1xV31DWf8Aq6f8kI/6&#xA;4qtktNWijaSTVgkaAs7tDGFCgVJJJ2AxViGk+doLy4iNrqN2yajPx9SS0iRYT6gtIuas4dVmkj+A&#xA;Ba1rUDChmP1DWf8Aq6f8kI/64Eu+oaz/ANXT/khH/XFXfUNZ/wCrp/yQj/rirvqGs/8AV0/5IR/1&#xA;xVD6ib/TtPutQu9X9O0s4nuLiT6unwxxKXc9eyjFWMaN5yF7cwLDfXP+5N1cu0NpLHAXLW8KyNDN&#xA;KF9VrV+IWtCDy4nCrL/qGs/9XT/khH/XArvqGs/9XT/khH/XFXfUNZ/6un/JCP8ArirvqGs/9XT/&#xA;AJIR/wBcVQmry6jpWlXmqXWpsbaxgkuZhHbRs/CJS7cRUb0GKsa8v+dIdUvLdLPUrhhqrllmaC2a&#xA;GKQCaJI+aSup9T6hKyGPkjbHl8a1Ksw+oaz/ANXT/khH/XArvqGs/wDV0/5IR/1xV31DWf8Aq6f8&#xA;kI/64q76hrP/AFdP+SEf9cVQOrTavp0cDvfSSJcTxW3qx28JWN55FijaQM6Hj6jqPhqfoxVIdJ8+&#xA;6PpGmz21ybu+ngnubiSZIY09WGae7ne5jQStSFPq0wFTzPHZTyWpVn2BUui8vaTFrU2tJCRqE68Z&#xA;HMkhTdUQsIi3ph2SFFLheRCgVpiqY4q7FXYq7FWmUMpU1owoaEg7+BG4xVj1p+X/AJVtI7COC2lE&#xA;emyGS0R7q5lCkuklG9SR+a+rCkgVqjmOXWpxVkWKuxV2KuxVZPBDcQyQTxrLBKpSWJwGRkYUZWU7&#xA;EEdRiqR2vkHyjZzwzWenJatbzPcxpC0kcZkkf1CWjVgjgP8AEoYEL+zTFU/xVi2o+e7fSLu+XWrd&#xA;bKwsmjUXgl9UyG4ZhCFiVK1YISd9sKrT+Z/lTgJI3upoWJCTRWlw6sF9MFl4oaqDPGK+JpgpUfo3&#xA;nPQNY1GTTrCV3u4oRcSxvG8ZRSQtG5hSDU0+/wADiqcXVtb3VtLa3CCW3nRopo26Mjjiyn2IOKpL&#xA;Z+RfLFndW91BauLi2YukrTzuWclm5S83b1SpduPOvGvw0xVPsVdirsVdiqH1HT7PUbG4sL2P1bS6&#xA;jaKeOpXkjChFVIYfMGuKpVY+SPLljfW19bwSC6teZSR7id+TyNKzSSh3YSPW5lozgkczTFU9xV2K&#xA;uxV2KoHV9FsNWgjgvRKY4pY50EM81ufUiYOhJheMtxZQwB2riqVz/l75Sn9f1bJm+syGWX9/OOol&#xA;DRrST4Ym+sy8oloh5t8O+KsixV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVItc/wAJcbv9K+ly&#xA;5W31ivL1OfI/VuPD4+da8eG+KqEX+CPQi4ej6VJfSryrT14PV67/AN96Na96YVb0b/BX6df9Gel+&#xA;l/Rl6epX0fUT1/T5fDT1PT58e/GvbArI8VdirsVdirsVdirsVdirsVdirsVdirsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:9117B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9117B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9117B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T17:00:06+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -212.131 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 212.131 li
269.557 212.131 li
269.557 0 li
cp
clp
[1 0 0 1 0 0 ]ct
11.8774 196.952 mo
262.978 196.952 li
262.978 2.55225 li
11.8774 2.55225 li
11.8774 196.952 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
11.8774 196.952 mo
262.978 196.952 li
262.978 2.55225 li
11.8774 2.55225 li
11.8774 196.952 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
11.8774 2.55225 mo
14.3882 187.695 li
16.8994 76.6094 li
19.4102 155.956 li
21.9214 94.2422 li
24.4326 144.735 li
26.9434 102.01 li
29.4546 139.039 li
31.9653 106.367 li
34.4766 135.599 li
36.9873 109.15 li
39.4985 133.299 li
42.0093 111.082 li
44.5205 131.654 li
47.0313 112.501 li
49.5425 130.418 li
52.0532 113.587 li
54.5645 129.456 li
57.0752 114.445 li
59.5864 128.687 li
62.0972 115.14 li
64.6084 128.057 li
67.1191 115.714 li
69.6304 127.531 li
72.1416 116.196 li
74.6523 127.087 li
77.1636 116.607 li
79.6743 126.706 li
82.1855 116.961 li
84.6963 126.375 li
87.2075 117.27 li
89.7183 126.086 li
92.2295 117.541 li
94.7402 125.832 li
97.2515 117.782 li
99.7622 125.604 li
102.273 117.996 li
104.784 125.401 li
107.295 118.188 li
109.807 125.219 li
112.317 118.362 li
114.828 125.054 li
117.339 118.52 li
119.851 124.904 li
122.361 118.663 li
124.873 124.767 li
127.383 118.794 li
129.895 124.641 li
132.405 118.914 li
134.917 124.525 li
137.427 119.025 li
139.938 124.418 li
142.449 119.128 li
144.96 124.319 li
147.472 119.224 li
149.982 124.228 li
152.493 119.312 li
155.005 124.142 li
157.516 119.395 li
160.026 124.063 li
162.537 119.472 li
165.049 123.987 li
167.56 119.544 li
170.07 123.918 li
172.581 119.612 li
175.093 123.852 li
177.604 119.676 li
180.114 123.79 li
182.625 119.735 li
185.137 123.731 li
187.647 119.792 li
190.158 123.676 li
192.669 119.846 li
195.181 123.624 li
197.691 119.896 li
200.202 123.575 li
202.714 119.945 li
205.225 123.528 li
207.735 119.99 li
210.246 123.483 li
212.758 120.034 li
215.269 123.441 li
217.779 120.075 li
220.29 123.401 li
222.802 120.115 li
225.313 123.362 li
227.823 120.152 li
230.334 123.326 li
232.846 120.188 li
235.356 123.291 li
237.867 120.222 li
240.378 123.257 li
242.89 120.255 li
245.4 123.226 li
247.911 120.287 li
250.423 123.195 li
252.934 120.316 li
255.444 123.165 li
257.955 120.345 li
.884 .769 0 0 cmyk
@
11.8774 121.748 mo
14.3882 121.748 li
16.8994 121.748 li
19.4102 121.748 li
21.9214 121.748 li
24.4326 121.748 li
26.9434 121.748 li
29.4546 121.748 li
31.9653 121.748 li
34.4766 121.748 li
36.9873 121.748 li
39.4985 121.748 li
42.0093 121.748 li
44.5205 121.748 li
47.0313 121.748 li
49.5425 121.748 li
52.0532 121.748 li
54.5645 121.748 li
57.0752 121.748 li
59.5864 121.748 li
62.0972 121.748 li
64.6084 121.748 li
67.1191 121.748 li
69.6304 121.748 li
72.1416 121.748 li
74.6523 121.748 li
77.1636 121.748 li
79.6743 121.748 li
82.1855 121.748 li
84.6963 121.748 li
87.2075 121.748 li
89.7183 121.748 li
92.2295 121.748 li
94.7402 121.748 li
97.2515 121.748 li
99.7622 121.748 li
102.273 121.748 li
104.784 121.748 li
107.295 121.748 li
109.807 121.748 li
112.317 121.748 li
114.828 121.748 li
117.339 121.748 li
119.851 121.748 li
122.361 121.748 li
124.873 121.748 li
127.383 121.748 li
129.895 121.748 li
132.405 121.748 li
134.917 121.748 li
137.427 121.748 li
139.938 121.748 li
142.449 121.748 li
144.96 121.748 li
147.472 121.748 li
149.982 121.748 li
152.493 121.748 li
155.005 121.748 li
157.516 121.748 li
160.026 121.748 li
162.537 121.748 li
165.049 121.748 li
167.56 121.748 li
170.07 121.748 li
172.581 121.748 li
175.093 121.748 li
177.604 121.748 li
180.114 121.748 li
182.625 121.748 li
185.137 121.748 li
187.647 121.748 li
190.158 121.748 li
192.669 121.748 li
195.181 121.748 li
197.691 121.748 li
200.202 121.748 li
202.714 121.748 li
205.225 121.748 li
207.735 121.748 li
210.246 121.748 li
212.758 121.748 li
215.269 121.748 li
217.779 121.748 li
220.29 121.748 li
222.802 121.748 li
225.313 121.748 li
227.823 121.748 li
230.334 121.748 li
232.846 121.748 li
235.356 121.748 li
237.867 121.748 li
240.378 121.748 li
242.89 121.748 li
245.4 121.748 li
247.911 121.748 li
250.423 121.748 li
252.934 121.748 li
255.444 121.748 li
257.955 121.748 li
0 .994 1 0 cmyk
@
grestore
11.8774 196.952 mo
11.8774 194.702 li
11.8774 196.952 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
11.8774 196.952 mo
11.8774 194.702 li
@
11.8774 4.80225 mo
11.8774 2.55225 li
11.8774 4.80225 li
cp
f
11.8774 2.55225 mo
11.8774 4.80225 li
@
12.3232 199.729 mo
11.979 199.729 11.7227 199.898 11.5469 200.236 cv
11.3716 200.573 11.2905 201.08 11.2905 201.755 cv
11.2905 202.43 11.3716 202.937 11.5469 203.273 cv
11.7227 203.611 11.979 203.78 12.3232 203.78 cv
12.6675 203.78 12.9238 203.611 13.0996 203.273 cv
13.2681 202.937 13.356 202.43 13.356 201.755 cv
13.356 201.08 13.2681 200.573 13.0996 200.236 cv
12.9238 199.898 12.6675 199.729 12.3232 199.729 cv
12.3232 199.203 mo
12.8701 199.203 13.2886 199.427 13.5854 199.858 cv
13.8755 200.297 14.0244 200.931 14.0244 201.755 cv
14.0244 202.585 13.8755 203.22 13.5854 203.651 cv
13.2886 204.083 12.8701 204.3 12.3232 204.3 cv
11.7695 204.3 11.3442 204.083 11.0542 203.651 cv
10.7637 203.22 10.6221 202.585 10.6221 201.755 cv
10.6221 200.931 10.7637 200.297 11.0542 199.858 cv
11.3442 199.427 11.7695 199.203 12.3232 199.203 cv
f
62.0972 196.952 mo
62.0972 194.702 li
f
62.0972 196.952 mo
62.0972 194.702 li
@
62.0972 2.55225 mo
62.0972 4.80225 li
f
62.0972 2.55225 mo
62.0972 4.80225 li
@
59.5659 203.651 mo
61.8877 203.651 li
61.8877 204.212 li
58.7627 204.212 li
58.7627 203.651 li
59.0122 203.396 59.3564 203.044 59.7954 202.599 cv
60.2271 202.16 60.5039 201.877 60.6187 201.748 cv
60.835 201.512 60.9834 201.31 61.0645 201.141 cv
61.145 200.979 61.1924 200.81 61.1924 200.647 cv
61.1924 200.392 61.0981 200.175 60.9155 200.013 cv
60.7334 199.851 60.4971 199.764 60.2002 199.764 cv
59.9912 199.764 59.7681 199.804 59.5386 199.872 cv
59.3091 199.946 59.0596 200.054 58.7964 200.202 cv
58.7964 199.527 li
59.0664 199.42 59.3159 199.339 59.5454 199.284 cv
59.7749 199.231 59.9912 199.204 60.1865 199.204 cv
60.6929 199.204 61.0981 199.331 61.4019 199.588 cv
61.7056 199.845 61.8608 200.183 61.8608 200.607 cv
61.8608 200.81 61.8203 201.005 61.7461 201.181 cv
61.6719 201.364 61.5366 201.579 61.334 201.822 cv
61.2803 201.89 61.1045 202.071 60.8076 202.376 cv
60.5107 202.68 60.0991 203.104 59.5659 203.651 cv
f
64.709 199.729 mo
64.3647 199.729 64.1084 199.898 63.9331 200.236 cv
63.7573 200.573 63.6763 201.08 63.6763 201.755 cv
63.6763 202.43 63.7573 202.937 63.9331 203.273 cv
64.1084 203.611 64.3647 203.78 64.709 203.78 cv
65.0537 203.78 65.3101 203.611 65.4854 203.273 cv
65.6543 202.937 65.7422 202.43 65.7422 201.755 cv
65.7422 201.08 65.6543 200.573 65.4854 200.236 cv
65.3101 199.898 65.0537 199.729 64.709 199.729 cv
64.709 199.203 mo
65.2559 199.203 65.6743 199.427 65.9717 199.858 cv
66.2617 200.297 66.4102 200.931 66.4102 201.755 cv
66.4102 202.585 66.2617 203.22 65.9717 203.651 cv
65.6743 204.083 65.2559 204.3 64.709 204.3 cv
64.1558 204.3 63.7305 204.083 63.4404 203.651 cv
63.1499 203.22 63.0083 202.585 63.0083 201.755 cv
63.0083 200.931 63.1499 200.297 63.4404 199.858 cv
63.7305 199.427 64.1558 199.203 64.709 199.203 cv
f
112.317 196.952 mo
112.317 194.702 li
f
112.317 196.952 mo
112.317 194.702 li
@
112.317 2.55225 mo
112.317 4.80225 li
f
112.317 2.55225 mo
112.317 4.80225 li
@
110.962 199.872 mo
109.281 202.497 li
110.962 202.497 li
110.962 199.872 li
110.787 199.291 mo
111.624 199.291 li
111.624 202.497 li
112.326 202.497 li
112.326 203.051 li
111.624 203.051 li
111.624 204.212 li
110.962 204.212 li
110.962 203.051 li
108.742 203.051 li
108.742 202.409 li
110.787 199.291 li
cp
f
114.85 199.729 mo
114.506 199.729 114.249 199.898 114.074 200.236 cv
113.898 200.573 113.817 201.08 113.817 201.755 cv
113.817 202.43 113.898 202.937 114.074 203.273 cv
114.249 203.611 114.506 203.78 114.85 203.78 cv
115.194 203.78 115.451 203.611 115.626 203.273 cv
115.795 202.937 115.883 202.43 115.883 201.755 cv
115.883 201.08 115.795 200.573 115.626 200.236 cv
115.451 199.898 115.194 199.729 114.85 199.729 cv
114.85 199.203 mo
115.397 199.203 115.815 199.427 116.112 199.858 cv
116.402 200.297 116.551 200.931 116.551 201.755 cv
116.551 202.585 116.402 203.22 116.112 203.651 cv
115.815 204.083 115.397 204.3 114.85 204.3 cv
114.296 204.3 113.871 204.083 113.581 203.651 cv
113.291 203.22 113.149 202.585 113.149 201.755 cv
113.149 200.931 113.291 200.297 113.581 199.858 cv
113.871 199.427 114.296 199.203 114.85 199.203 cv
f
162.537 196.952 mo
162.537 194.702 li
f
162.537 196.952 mo
162.537 194.702 li
@
162.537 2.55225 mo
162.537 4.80225 li
f
162.537 2.55225 mo
162.537 4.80225 li
@
160.929 201.485 mo
160.632 201.485 160.396 201.593 160.22 201.796 cv
160.044 201.998 159.956 202.281 159.956 202.632 cv
159.956 202.99 160.044 203.273 160.22 203.476 cv
160.396 203.679 160.632 203.78 160.929 203.78 cv
161.226 203.78 161.462 203.679 161.637 203.476 cv
161.813 203.273 161.901 202.99 161.901 202.632 cv
161.901 202.281 161.813 201.998 161.637 201.796 cv
161.462 201.593 161.226 201.485 160.929 201.485 cv
162.252 199.399 mo
162.252 200.007 li
162.083 199.926 161.914 199.864 161.745 199.824 cv
161.57 199.784 161.4 199.763 161.239 199.763 cv
160.793 199.763 160.456 199.912 160.227 200.208 cv
159.997 200.507 159.862 200.958 159.835 201.552 cv
159.963 201.363 160.125 201.215 160.321 201.114 cv
160.518 201.013 160.732 200.958 160.969 200.958 cv
161.462 200.958 161.854 201.114 162.137 201.411 cv
162.42 201.708 162.568 202.12 162.568 202.632 cv
162.568 203.138 162.414 203.544 162.116 203.848 cv
161.819 204.151 161.421 204.3 160.929 204.3 cv
160.361 204.3 159.923 204.083 159.626 203.651 cv
159.322 203.22 159.173 202.585 159.173 201.755 cv
159.173 200.979 159.355 200.357 159.727 199.898 cv
160.092 199.439 160.591 199.204 161.212 199.204 cv
161.374 199.204 161.543 199.224 161.718 199.251 cv
161.887 199.284 162.063 199.331 162.252 199.399 cv
f
165.141 199.729 mo
164.796 199.729 164.54 199.898 164.364 200.236 cv
164.188 200.573 164.107 201.08 164.107 201.755 cv
164.107 202.43 164.188 202.937 164.364 203.273 cv
164.54 203.611 164.796 203.78 165.141 203.78 cv
165.484 203.78 165.741 203.611 165.917 203.273 cv
166.086 202.937 166.173 202.43 166.173 201.755 cv
166.173 201.08 166.086 200.573 165.917 200.236 cv
165.741 199.898 165.484 199.729 165.141 199.729 cv
165.141 199.203 mo
165.688 199.203 166.105 199.427 166.402 199.858 cv
166.693 200.297 166.842 200.931 166.842 201.755 cv
166.842 202.585 166.693 203.22 166.402 203.651 cv
166.105 204.083 165.688 204.3 165.141 204.3 cv
164.587 204.3 164.162 204.083 163.871 203.651 cv
163.581 203.22 163.439 202.585 163.439 201.755 cv
163.439 200.931 163.581 200.297 163.871 199.858 cv
164.162 199.427 164.587 199.203 165.141 199.203 cv
f
212.758 196.952 mo
212.758 194.702 li
f
212.758 196.952 mo
212.758 194.702 li
@
212.758 2.55225 mo
212.758 4.80225 li
f
212.758 2.55225 mo
212.758 4.80225 li
@
211.059 201.876 mo
210.741 201.876 210.491 201.964 210.31 202.132 cv
210.128 202.302 210.039 202.53 210.039 202.827 cv
210.039 203.126 210.128 203.362 210.31 203.53 cv
210.491 203.698 210.741 203.78 211.059 203.78 cv
211.369 203.78 211.618 203.698 211.801 203.523 cv
211.983 203.354 212.078 203.126 212.078 202.827 cv
212.078 202.53 211.983 202.302 211.808 202.132 cv
211.626 201.964 211.376 201.876 211.059 201.876 cv
210.39 201.593 mo
210.107 201.525 209.884 201.391 209.722 201.194 cv
209.561 200.999 209.485 200.763 209.485 200.479 cv
209.485 200.087 209.621 199.777 209.904 199.548 cv
210.181 199.317 210.565 199.204 211.059 199.204 cv
211.544 199.204 211.93 199.317 212.213 199.548 cv
212.49 199.777 212.632 200.087 212.632 200.479 cv
212.632 200.763 212.55 200.999 212.388 201.194 cv
212.227 201.391 212.01 201.525 211.727 201.593 cv
212.044 201.667 212.294 201.815 212.477 202.031 cv
212.651 202.247 212.746 202.519 212.746 202.827 cv
212.746 203.308 212.598 203.671 212.308 203.922 cv
212.01 204.179 211.599 204.3 211.059 204.3 cv
210.512 204.3 210.093 204.179 209.804 203.922 cv
209.513 203.671 209.371 203.308 209.371 202.827 cv
209.371 202.519 209.459 202.247 209.641 202.031 cv
209.816 201.815 210.066 201.667 210.39 201.593 cv
210.147 200.54 mo
210.147 200.796 210.222 200.999 210.384 201.14 cv
210.546 201.282 210.769 201.35 211.059 201.35 cv
211.343 201.35 211.564 201.282 211.727 201.14 cv
211.89 200.999 211.97 200.796 211.97 200.54 cv
211.97 200.284 211.89 200.087 211.727 199.945 cv
211.564 199.804 211.343 199.729 211.059 199.729 cv
210.769 199.729 210.546 199.804 210.384 199.945 cv
210.222 200.087 210.147 200.284 210.147 200.54 cv
f
215.352 199.729 mo
215.008 199.729 214.751 199.898 214.575 200.236 cv
214.4 200.573 214.319 201.08 214.319 201.755 cv
214.319 202.43 214.4 202.937 214.575 203.273 cv
214.751 203.611 215.008 203.78 215.352 203.78 cv
215.695 203.78 215.952 203.611 216.128 203.273 cv
216.297 202.937 216.385 202.43 216.385 201.755 cv
216.385 201.08 216.297 200.573 216.128 200.236 cv
215.952 199.898 215.695 199.729 215.352 199.729 cv
215.352 199.203 mo
215.898 199.203 216.317 199.427 216.614 199.858 cv
216.904 200.297 217.053 200.931 217.053 201.755 cv
217.053 202.585 216.904 203.22 216.614 203.651 cv
216.317 204.083 215.898 204.3 215.352 204.3 cv
214.798 204.3 214.373 204.083 214.083 203.651 cv
213.793 203.22 213.65 202.585 213.65 201.755 cv
213.65 200.931 213.793 200.297 214.083 199.858 cv
214.373 199.427 214.798 199.203 215.352 199.203 cv
f
262.978 196.952 mo
262.978 194.702 li
f
262.978 196.952 mo
262.978 194.702 li
@
262.978 2.55225 mo
262.978 4.80225 li
f
262.978 2.55225 mo
262.978 4.80225 li
@
257.961 203.651 mo
259.048 203.651 li
259.048 199.898 li
257.866 200.135 li
257.866 199.527 li
259.041 199.291 li
259.709 199.291 li
259.709 203.651 li
260.796 203.651 li
260.796 204.212 li
257.961 204.212 li
257.961 203.651 li
cp
f
263.563 199.729 mo
263.22 199.729 262.963 199.898 262.787 200.236 cv
262.612 200.573 262.53 201.08 262.53 201.755 cv
262.53 202.43 262.612 202.937 262.787 203.273 cv
262.963 203.611 263.22 203.78 263.563 203.78 cv
263.907 203.78 264.164 203.611 264.34 203.273 cv
264.509 202.937 264.596 202.43 264.596 201.755 cv
264.596 201.08 264.509 200.573 264.34 200.236 cv
264.164 199.898 263.907 199.729 263.563 199.729 cv
263.563 199.203 mo
264.11 199.203 264.529 199.427 264.825 199.858 cv
265.116 200.297 265.265 200.931 265.265 201.755 cv
265.265 202.585 265.116 203.22 264.825 203.651 cv
264.529 204.083 264.11 204.3 263.563 204.3 cv
263.01 204.3 262.585 204.083 262.294 203.651 cv
262.005 203.22 261.862 202.585 261.862 201.755 cv
261.862 200.931 262.005 200.297 262.294 199.858 cv
262.585 199.427 263.01 199.203 263.563 199.203 cv
f
267.856 199.729 mo
267.513 199.729 267.256 199.898 267.08 200.236 cv
266.905 200.573 266.824 201.08 266.824 201.755 cv
266.824 202.43 266.905 202.937 267.08 203.273 cv
267.256 203.611 267.513 203.78 267.856 203.78 cv
268.2 203.78 268.457 203.611 268.633 203.273 cv
268.802 202.937 268.89 202.43 268.89 201.755 cv
268.89 201.08 268.802 200.573 268.633 200.236 cv
268.457 199.898 268.2 199.729 267.856 199.729 cv
267.856 199.203 mo
268.403 199.203 268.822 199.427 269.118 199.858 cv
269.409 200.297 269.557 200.931 269.557 201.755 cv
269.557 202.585 269.409 203.22 269.118 203.651 cv
268.822 204.083 268.403 204.3 267.856 204.3 cv
267.303 204.3 266.878 204.083 266.587 203.651 cv
266.298 203.22 266.155 202.585 266.155 201.755 cv
266.155 200.931 266.298 200.297 266.587 199.858 cv
266.878 199.427 267.303 199.203 267.856 199.203 cv
f
127.627 207.122 mo
131.785 207.122 li
131.785 207.683 li
130.037 207.683 li
130.037 212.043 li
129.369 212.043 li
129.369 207.683 li
127.627 207.683 li
127.627 207.122 li
cp
f
135.559 210.045 mo
135.559 210.342 li
132.771 210.342 li
132.798 210.76 132.919 211.085 133.148 211.3 cv
133.371 211.517 133.682 211.624 134.087 211.624 cv
134.317 211.624 134.545 211.598 134.762 211.544 cv
134.978 211.489 135.2 211.401 135.417 211.28 cv
135.417 211.854 li
135.2 211.948 134.978 212.022 134.749 212.063 cv
134.519 212.104 134.282 212.131 134.053 212.131 cv
133.459 212.131 132.993 211.962 132.649 211.624 cv
132.305 211.287 132.136 210.821 132.136 210.233 cv
132.136 209.634 132.298 209.153 132.622 208.796 cv
132.946 208.445 133.392 208.263 133.945 208.263 cv
134.445 208.263 134.836 208.425 135.126 208.742 cv
135.41 209.066 135.559 209.498 135.559 210.045 cv
134.951 209.868 mo
134.944 209.538 134.85 209.275 134.674 209.072 cv
134.492 208.877 134.249 208.776 133.952 208.776 cv
133.615 208.776 133.344 208.877 133.142 209.066 cv
132.939 209.255 132.817 209.525 132.791 209.868 cv
134.951 209.868 li
f
138.69 208.918 mo
138.623 208.878 138.549 208.851 138.468 208.83 cv
138.387 208.816 138.299 208.804 138.205 208.804 cv
137.86 208.804 137.598 208.918 137.415 209.141 cv
137.226 209.363 137.138 209.68 137.138 210.099 cv
137.138 212.043 li
136.53 212.043 li
136.53 208.351 li
137.138 208.351 li
137.138 208.925 li
137.259 208.702 137.428 208.532 137.631 208.425 cv
137.833 208.317 138.083 208.263 138.38 208.263 cv
138.421 208.263 138.468 208.27 138.521 208.27 cv
138.569 208.276 138.623 208.283 138.69 208.297 cv
138.69 208.918 li
f
142.2 209.06 mo
142.349 208.79 142.531 208.594 142.74 208.458 cv
142.95 208.331 143.199 208.263 143.489 208.263 cv
143.868 208.263 144.165 208.397 144.374 208.668 cv
144.583 208.938 144.691 209.323 144.691 209.815 cv
144.691 212.043 li
144.084 212.043 li
144.084 209.836 li
144.084 209.485 144.017 209.222 143.895 209.046 cv
143.767 208.877 143.577 208.79 143.321 208.79 cv
143.004 208.79 142.754 208.897 142.571 209.106 cv
142.39 209.315 142.302 209.6 142.302 209.957 cv
142.302 212.043 li
141.694 212.043 li
141.694 209.836 li
141.694 209.485 141.626 209.222 141.505 209.046 cv
141.377 208.877 141.181 208.79 140.925 208.79 cv
140.614 208.79 140.364 208.897 140.182 209.106 cv
140 209.315 139.912 209.6 139.912 209.957 cv
139.912 212.043 li
139.305 212.043 li
139.305 208.351 li
139.912 208.351 li
139.912 208.925 li
140.047 208.702 140.216 208.532 140.412 208.425 cv
140.601 208.317 140.83 208.263 141.1 208.263 cv
141.37 208.263 141.593 208.331 141.782 208.466 cv
141.971 208.601 142.106 208.803 142.2 209.06 cv
f
148.255 208.458 mo
148.255 209.032 li
148.079 208.951 147.904 208.884 147.723 208.837 cv
147.533 208.796 147.344 208.77 147.148 208.77 cv
146.845 208.77 146.615 208.817 146.466 208.911 cv
146.318 209.006 146.243 209.14 146.243 209.322 cv
146.243 209.464 146.298 209.572 146.405 209.653 cv
146.514 209.735 146.729 209.815 147.054 209.883 cv
147.263 209.931 li
147.694 210.024 147.999 210.159 148.181 210.322 cv
148.356 210.49 148.451 210.727 148.451 211.024 cv
148.451 211.368 148.315 211.638 148.046 211.833 cv
147.775 212.036 147.398 212.13 146.926 212.13 cv
146.723 212.13 146.521 212.11 146.305 212.077 cv
146.088 212.043 145.865 211.989 145.629 211.907 cv
145.629 211.28 li
145.853 211.401 146.075 211.489 146.291 211.544 cv
146.508 211.604 146.723 211.632 146.938 211.632 cv
147.223 211.632 147.445 211.585 147.601 211.489 cv
147.749 211.396 147.83 211.253 147.83 211.071 cv
147.83 210.909 147.77 210.78 147.661 210.693 cv
147.553 210.604 147.31 210.517 146.932 210.437 cv
146.723 210.39 li
146.345 210.308 146.068 210.187 145.906 210.024 cv
145.737 209.862 145.656 209.64 145.656 209.35 cv
145.656 209.006 145.778 208.735 146.021 208.546 cv
146.264 208.357 146.615 208.263 147.074 208.263 cv
147.297 208.263 147.506 208.283 147.708 208.317 cv
147.904 208.351 148.086 208.398 148.255 208.458 cv
f
11.8774 196.952 mo
14.1274 196.952 li
f
11.8774 196.952 mo
14.1274 196.952 li
@
262.978 196.952 mo
260.728 196.952 li
f
262.978 196.952 mo
260.728 196.952 li
@
1.10596 198.849 mo
3.42822 198.849 li
3.42822 199.408 li
.302734 199.408 li
.302734 198.849 li
.552734 198.592 .896973 198.241 1.33545 197.796 cv
1.76758 197.356 2.04443 197.073 2.15918 196.944 cv
2.375 196.708 2.52344 196.506 2.60449 196.337 cv
2.68555 196.175 2.73291 196.007 2.73291 195.845 cv
2.73291 195.588 2.63818 195.372 2.45605 195.21 cv
2.27393 195.048 2.0376 194.96 1.74072 194.96 cv
1.53125 194.96 1.30859 195.001 1.0791 195.068 cv
.849609 195.143 .600098 195.251 .336426 195.399 cv
.336426 194.724 li
.606445 194.616 .856445 194.535 1.08594 194.481 cv
1.31543 194.428 1.53125 194.4 1.72705 194.4 cv
2.2334 194.4 2.63818 194.528 2.94189 194.784 cv
3.24609 195.041 3.40137 195.379 3.40137 195.804 cv
3.40137 196.007 3.36084 196.202 3.28613 196.378 cv
3.21191 196.561 3.07715 196.776 2.87451 197.019 cv
2.8208 197.087 2.64502 197.269 2.34814 197.572 cv
2.05127 197.876 1.63916 198.302 1.10596 198.849 cv
f
4.8252 198.571 mo
5.52051 198.571 li
5.52051 199.409 li
4.8252 199.409 li
4.8252 198.571 li
cp
f
8.47705 196.682 mo
8.17969 196.682 7.94336 196.789 7.76807 196.992 cv
7.59277 197.194 7.50488 197.478 7.50488 197.829 cv
7.50488 198.187 7.59277 198.47 7.76807 198.673 cv
7.94336 198.875 8.17969 198.977 8.47705 198.977 cv
8.77393 198.977 9.01025 198.875 9.18555 198.673 cv
9.36133 198.47 9.44873 198.187 9.44873 197.829 cv
9.44873 197.478 9.36133 197.194 9.18555 196.992 cv
9.01025 196.789 8.77393 196.682 8.47705 196.682 cv
9.7998 194.596 mo
9.7998 195.204 li
9.63086 195.122 9.4624 195.062 9.29346 195.021 cv
9.11816 194.98 8.94922 194.96 8.78711 194.96 cv
8.3418 194.96 8.00439 195.108 7.7749 195.405 cv
7.54541 195.703 7.41016 196.155 7.3833 196.749 cv
7.51172 196.56 7.67383 196.411 7.86914 196.311 cv
8.06494 196.209 8.28125 196.155 8.51758 196.155 cv
9.01025 196.155 9.40137 196.311 9.68506 196.607 cv
9.96875 196.904 10.1172 197.316 10.1172 197.829 cv
10.1172 198.335 9.96191 198.74 9.66504 199.044 cv
9.36768 199.349 8.96973 199.497 8.47705 199.497 cv
7.90967 199.497 7.47119 199.28 7.17432 198.849 cv
6.87012 198.417 6.72168 197.782 6.72168 196.951 cv
6.72168 196.175 6.9043 195.555 7.27539 195.095 cv
7.63965 194.636 8.13916 194.4 8.76025 194.4 cv
8.92236 194.4 9.09131 194.42 9.2666 194.447 cv
9.43555 194.481 9.61084 194.528 9.7998 194.596 cv
f
11.8774 169.181 mo
14.1274 169.181 li
f
11.8774 169.181 mo
14.1274 169.181 li
@
262.978 169.181 mo
260.728 169.181 li
f
262.978 169.181 mo
260.728 169.181 li
@
1.14111 171.077 mo
3.46338 171.077 li
3.46338 171.638 li
.337891 171.638 li
.337891 171.077 li
.587891 170.82 .932129 170.47 1.37061 170.024 cv
1.80273 169.585 2.07959 169.302 2.19434 169.173 cv
2.41016 168.937 2.55859 168.735 2.63965 168.565 cv
2.7207 168.403 2.76807 168.235 2.76807 168.073 cv
2.76807 167.817 2.67334 167.601 2.49121 167.438 cv
2.30908 167.276 2.07275 167.188 1.77588 167.188 cv
1.56641 167.188 1.34375 167.229 1.11426 167.297 cv
.884766 167.371 .635254 167.479 .371582 167.628 cv
.371582 166.952 li
.641602 166.845 .891602 166.764 1.12109 166.71 cv
1.35059 166.655 1.56641 166.629 1.76221 166.629 cv
2.26855 166.629 2.67334 166.757 2.97705 167.014 cv
3.28125 167.271 3.43652 167.607 3.43652 168.032 cv
3.43652 168.235 3.396 168.431 3.32129 168.606 cv
3.24707 168.788 3.1123 169.005 2.90967 169.247 cv
2.85596 169.315 2.68018 169.497 2.3833 169.802 cv
2.08643 170.104 1.67432 170.53 1.14111 171.077 cv
f
4.86035 170.8 mo
5.55566 170.8 li
5.55566 171.638 li
4.86035 171.638 li
4.86035 170.8 li
cp
f
8.43115 169.302 mo
8.11377 169.302 7.86426 169.39 7.68213 169.558 cv
7.49951 169.728 7.41211 169.956 7.41211 170.253 cv
7.41211 170.55 7.49951 170.787 7.68213 170.956 cv
7.86426 171.124 8.11377 171.205 8.43115 171.205 cv
8.7417 171.205 8.9917 171.124 9.17383 170.948 cv
9.35596 170.78 9.45068 170.55 9.45068 170.253 cv
9.45068 169.956 9.35596 169.728 9.18066 169.558 cv
8.99805 169.39 8.74854 169.302 8.43115 169.302 cv
7.76318 169.019 mo
7.47949 168.95 7.25684 168.815 7.09473 168.62 cv
6.93262 168.425 6.8584 168.188 6.8584 167.905 cv
6.8584 167.513 6.99365 167.203 7.27686 166.973 cv
7.55371 166.743 7.93848 166.628 8.43115 166.628 cv
8.91699 166.628 9.30176 166.743 9.58545 166.973 cv
9.8623 167.203 10.0039 167.513 10.0039 167.905 cv
10.0039 168.188 9.92285 168.425 9.76074 168.62 cv
9.59912 168.815 9.38281 168.95 9.09961 169.019 cv
9.4165 169.093 9.6665 169.241 9.84863 169.457 cv
10.0244 169.673 10.1187 169.943 10.1187 170.253 cv
10.1187 170.732 9.97021 171.097 9.68018 171.347 cv
9.38281 171.604 8.97119 171.726 8.43115 171.726 cv
7.88428 171.726 7.46582 171.604 7.17578 171.347 cv
6.88525 171.097 6.74365 170.732 6.74365 170.253 cv
6.74365 169.943 6.83154 169.673 7.01367 169.457 cv
7.18945 169.241 7.43896 169.093 7.76318 169.019 cv
7.52002 167.965 mo
7.52002 168.222 7.59424 168.425 7.75635 168.565 cv
7.91797 168.708 8.14111 168.774 8.43115 168.774 cv
8.71484 168.774 8.9375 168.708 9.09961 168.565 cv
9.26172 168.425 9.34229 168.222 9.34229 167.965 cv
9.34229 167.708 9.26172 167.513 9.09961 167.371 cv
8.9375 167.229 8.71484 167.155 8.43115 167.155 cv
8.14111 167.155 7.91797 167.229 7.75635 167.371 cv
7.59424 167.513 7.52002 167.708 7.52002 167.965 cv
f
11.8774 141.409 mo
14.1274 141.409 li
f
11.8774 141.409 mo
14.1274 141.409 li
@
262.978 141.409 mo
260.728 141.409 li
f
262.978 141.409 mo
260.728 141.409 li
@
2.59473 141.213 mo
2.91162 141.28 3.16162 141.422 3.33691 141.638 cv
3.5127 141.854 3.60693 142.124 3.60693 142.435 cv
3.60693 142.921 3.43848 143.299 3.10742 143.563 cv
2.77002 143.825 2.29736 143.953 1.68311 143.953 cv
1.47412 143.953 1.25781 143.933 1.04199 143.894 cv
.826172 143.858 .59668 143.799 .367188 143.718 cv
.367188 143.076 li
.549316 143.184 .751953 143.265 .974609 143.319 cv
1.19043 143.373 1.41992 143.4 1.66309 143.4 cv
2.08154 143.4 2.39893 143.319 2.61475 143.157 cv
2.83057 142.995 2.94531 142.752 2.94531 142.435 cv
2.94531 142.151 2.84424 141.922 2.6416 141.761 cv
2.43945 141.599 2.15576 141.51 1.79102 141.51 cv
1.21729 141.51 li
1.21729 140.964 li
1.81836 140.964 li
2.14209 140.964 2.39209 140.902 2.56738 140.768 cv
2.74316 140.64 2.83057 140.45 2.83057 140.2 cv
2.83057 139.95 2.73633 139.755 2.56055 139.62 cv
2.37842 139.485 2.12207 139.418 1.79102 139.418 cv
1.60889 139.418 1.41309 139.438 1.2041 139.478 cv
.994629 139.519 .765137 139.58 .515625 139.66 cv
.515625 139.067 li
.765137 138.999 1.00146 138.945 1.22412 138.911 cv
1.44043 138.878 1.64941 138.856 1.85205 138.856 cv
2.35156 138.856 2.75 138.973 3.04688 139.202 cv
3.34375 139.431 3.49219 139.741 3.49219 140.133 cv
3.49219 140.403 3.41113 140.633 3.25586 140.821 cv
3.10059 141.011 2.87793 141.146 2.59473 141.213 cv
f
4.86914 143.029 mo
5.56445 143.029 li
5.56445 143.866 li
4.86914 143.866 li
4.86914 143.029 li
cp
f
8.43994 139.384 mo
8.0957 139.384 7.83936 139.552 7.66357 139.89 cv
7.48828 140.228 7.40723 140.733 7.40723 141.409 cv
7.40723 142.083 7.48828 142.59 7.66357 142.927 cv
7.83936 143.265 8.0957 143.434 8.43994 143.434 cv
8.78418 143.434 9.04102 143.265 9.21631 142.927 cv
9.38525 142.59 9.47266 142.083 9.47266 141.409 cv
9.47266 140.733 9.38525 140.228 9.21631 139.89 cv
9.04102 139.552 8.78418 139.384 8.43994 139.384 cv
8.43994 138.856 mo
8.98682 138.856 9.40527 139.08 9.70215 139.513 cv
9.99268 139.95 10.1411 140.586 10.1411 141.409 cv
10.1411 142.239 9.99268 142.874 9.70215 143.306 cv
9.40527 143.737 8.98682 143.953 8.43994 143.953 cv
7.88672 143.953 7.46143 143.737 7.1709 143.306 cv
6.88086 142.874 6.73926 142.239 6.73926 141.409 cv
6.73926 140.586 6.88086 139.95 7.1709 139.513 cv
7.46143 139.08 7.88672 138.856 8.43994 138.856 cv
f
11.8774 113.638 mo
14.1274 113.638 li
f
11.8774 113.638 mo
14.1274 113.638 li
@
262.978 113.638 mo
260.728 113.638 li
f
262.978 113.638 mo
260.728 113.638 li
@
2.82275 113.441 mo
3.14014 113.509 3.39014 113.651 3.56543 113.867 cv
3.74121 114.083 3.83545 114.353 3.83545 114.663 cv
3.83545 115.149 3.6665 115.527 3.33594 115.791 cv
2.99854 116.054 2.52588 116.182 1.91162 116.182 cv
1.70264 116.182 1.48633 116.162 1.27051 116.121 cv
1.05469 116.087 .825195 116.027 .595703 115.946 cv
.595703 115.305 li
.777832 115.413 .980469 115.494 1.20313 115.548 cv
1.41895 115.602 1.64844 115.628 1.8916 115.628 cv
2.31006 115.628 2.62744 115.548 2.84326 115.386 cv
3.05908 115.224 3.17383 114.98 3.17383 114.663 cv
3.17383 114.38 3.07275 114.15 2.87012 113.988 cv
2.66797 113.826 2.38428 113.739 2.01953 113.739 cv
1.4458 113.739 li
1.4458 113.192 li
2.04688 113.192 li
2.37061 113.192 2.62061 113.131 2.7959 112.996 cv
2.97168 112.867 3.05908 112.679 3.05908 112.429 cv
3.05908 112.179 2.96484 111.983 2.78906 111.849 cv
2.60693 111.713 2.35059 111.646 2.01953 111.646 cv
1.8374 111.646 1.6416 111.667 1.43262 111.707 cv
1.22314 111.747 .993652 111.808 .744141 111.889 cv
.744141 111.295 li
.993652 111.228 1.22998 111.174 1.45264 111.14 cv
1.66895 111.106 1.87793 111.086 2.08057 111.086 cv
2.58008 111.086 2.97803 111.201 3.27539 111.43 cv
3.57227 111.66 3.7207 111.97 3.7207 112.361 cv
3.7207 112.632 3.63965 112.861 3.48438 113.05 cv
3.3291 113.239 3.10645 113.374 2.82275 113.441 cv
f
5.09766 115.257 mo
5.79297 115.257 li
5.79297 116.094 li
5.09766 116.094 li
5.09766 115.257 li
cp
f
7.81787 115.534 mo
10.1401 115.534 li
10.1401 116.094 li
7.01465 116.094 li
7.01465 115.534 li
7.26465 115.277 7.60889 114.926 8.04736 114.481 cv
8.47949 114.043 8.75635 113.759 8.87109 113.63 cv
9.08691 113.394 9.23535 113.191 9.31641 113.023 cv
9.39746 112.861 9.44482 112.692 9.44482 112.53 cv
9.44482 112.273 9.3501 112.058 9.16797 111.896 cv
8.98584 111.733 8.74951 111.646 8.45264 111.646 cv
8.24316 111.646 8.02051 111.687 7.79102 111.754 cv
7.56152 111.828 7.31152 111.936 7.04834 112.084 cv
7.04834 111.41 li
7.31836 111.302 7.56836 111.221 7.79785 111.167 cv
8.02734 111.113 8.24316 111.086 8.43896 111.086 cv
8.94531 111.086 9.3501 111.214 9.65381 111.47 cv
9.95752 111.727 10.1128 112.064 10.1128 112.49 cv
10.1128 112.692 10.0723 112.888 9.99805 113.063 cv
9.92383 113.246 9.78906 113.462 9.58643 113.705 cv
9.53223 113.772 9.35693 113.955 9.06006 114.258 cv
8.7627 114.562 8.35107 114.987 7.81787 115.534 cv
f
11.8774 85.8662 mo
14.1274 85.8662 li
f
11.8774 85.8662 mo
14.1274 85.8662 li
@
262.978 85.8662 mo
260.728 85.8662 li
f
262.978 85.8662 mo
260.728 85.8662 li
@
2.52441 85.6699 mo
2.84131 85.7373 3.09131 85.8794 3.2666 86.0952 cv
3.44238 86.3115 3.53662 86.5811 3.53662 86.8916 cv
3.53662 87.3779 3.36816 87.7559 3.03711 88.019 cv
2.69971 88.2822 2.22705 88.4106 1.61279 88.4106 cv
1.40381 88.4106 1.1875 88.3901 .97168 88.3496 cv
.755859 88.3159 .526367 88.2554 .296875 88.1743 cv
.296875 87.5332 li
.479004 87.6411 .681641 87.7222 .904297 87.7759 cv
1.12012 87.8301 1.34961 87.8569 1.59277 87.8569 cv
2.01123 87.8569 2.32861 87.7759 2.54443 87.6143 cv
2.76025 87.4521 2.875 87.209 2.875 86.8916 cv
2.875 86.6084 2.77393 86.3789 2.57129 86.2168 cv
2.36914 86.0547 2.08545 85.9668 1.7207 85.9668 cv
1.14697 85.9668 li
1.14697 85.4204 li
1.74805 85.4204 li
2.07178 85.4204 2.32178 85.3594 2.49707 85.2246 cv
2.67285 85.0962 2.76025 84.9072 2.76025 84.6577 cv
2.76025 84.4077 2.66602 84.2119 2.49023 84.0771 cv
2.30811 83.9419 2.05176 83.8745 1.7207 83.8745 cv
1.53857 83.8745 1.34277 83.8945 1.13379 83.9355 cv
.924316 83.9756 .694824 84.0366 .445313 84.1177 cv
.445313 83.5234 li
.694824 83.4561 .931152 83.4019 1.15381 83.3682 cv
1.37012 83.3345 1.5791 83.3145 1.78174 83.3145 cv
2.28125 83.3145 2.67969 83.4292 2.97656 83.6587 cv
3.27344 83.8882 3.42188 84.1987 3.42188 84.5898 cv
3.42188 84.8599 3.34082 85.0894 3.18555 85.2783 cv
3.03027 85.4678 2.80762 85.6025 2.52441 85.6699 cv
f
4.79883 87.4854 mo
5.49414 87.4854 li
5.49414 88.3228 li
4.79883 88.3228 li
4.79883 87.4854 li
cp
f
8.77441 83.9824 mo
7.09375 86.6084 li
8.77441 86.6084 li
8.77441 83.9824 li
8.59912 83.4019 mo
9.43604 83.4019 li
9.43604 86.6084 li
10.1382 86.6084 li
10.1382 87.1616 li
9.43604 87.1616 li
9.43604 88.3228 li
8.77441 88.3228 li
8.77441 87.1616 li
6.55371 87.1616 li
6.55371 86.5205 li
8.59912 83.4019 li
cp
f
11.8774 58.0947 mo
14.1274 58.0947 li
f
11.8774 58.0947 mo
14.1274 58.0947 li
@
262.978 58.0947 mo
260.728 58.0947 li
f
262.978 58.0947 mo
260.728 58.0947 li
@
2.57666 57.8989 mo
2.89404 57.9663 3.14404 58.1079 3.31934 58.3242 cv
3.49512 58.54 3.58936 58.8101 3.58936 59.1206 cv
3.58936 59.6064 3.42041 59.9844 3.08984 60.248 cv
2.75244 60.5112 2.27979 60.6392 1.66553 60.6392 cv
1.45654 60.6392 1.24023 60.6191 1.02441 60.5786 cv
.808594 60.5449 .579102 60.4839 .349609 60.4033 cv
.349609 59.7617 li
.531738 59.8696 .734375 59.9507 .957031 60.0049 cv
1.17285 60.0586 1.40234 60.0859 1.64551 60.0859 cv
2.06396 60.0859 2.38135 60.0049 2.59717 59.8428 cv
2.81299 59.6807 2.92773 59.438 2.92773 59.1206 cv
2.92773 58.8369 2.82666 58.6074 2.62402 58.4453 cv
2.42188 58.2837 2.13818 58.1958 1.77344 58.1958 cv
1.19971 58.1958 li
1.19971 57.6489 li
1.80078 57.6489 li
2.12451 57.6489 2.37451 57.5884 2.5498 57.4531 cv
2.72559 57.3252 2.81299 57.1362 2.81299 56.8862 cv
2.81299 56.6367 2.71875 56.4409 2.54297 56.3057 cv
2.36084 56.1709 2.10449 56.1035 1.77344 56.1035 cv
1.59131 56.1035 1.39551 56.1235 1.18652 56.1641 cv
.977051 56.2046 .747559 56.2651 .498047 56.3462 cv
.498047 55.7524 li
.747559 55.6846 .983887 55.6309 1.20654 55.5972 cv
1.42285 55.5635 1.63184 55.543 1.83447 55.543 cv
2.33398 55.543 2.73193 55.6577 3.0293 55.8872 cv
3.32617 56.1167 3.47461 56.4272 3.47461 56.8188 cv
3.47461 57.0889 3.39355 57.3184 3.23828 57.5073 cv
3.08301 57.6963 2.86035 57.8311 2.57666 57.8989 cv
f
4.85156 59.7144 mo
5.54688 59.7144 li
5.54688 60.5513 li
4.85156 60.5513 li
4.85156 59.7144 li
cp
f
8.50342 57.8242 mo
8.20605 57.8242 7.96973 57.9326 7.79443 58.1348 cv
7.61914 58.3374 7.53125 58.6211 7.53125 58.9717 cv
7.53125 59.3296 7.61914 59.6133 7.79443 59.8154 cv
7.96973 60.0181 8.20605 60.1191 8.50342 60.1191 cv
8.80029 60.1191 9.03662 60.0181 9.21191 59.8154 cv
9.3877 59.6133 9.4751 59.3296 9.4751 58.9717 cv
9.4751 58.6211 9.3877 58.3374 9.21191 58.1348 cv
9.03662 57.9326 8.80029 57.8242 8.50342 57.8242 cv
9.82617 55.7388 mo
9.82617 56.3462 li
9.65723 56.2651 9.48877 56.2046 9.31982 56.1641 cv
9.14453 56.1235 8.97559 56.103 8.81348 56.103 cv
8.36816 56.103 8.03076 56.2515 7.80127 56.5488 cv
7.57178 56.8457 7.43652 57.2979 7.40967 57.8921 cv
7.53809 57.7031 7.7002 57.5547 7.89551 57.4531 cv
8.09131 57.3521 8.30762 57.2979 8.54395 57.2979 cv
9.03662 57.2979 9.42773 57.4531 9.71143 57.75 cv
9.99512 58.0474 10.1436 58.459 10.1436 58.9717 cv
10.1436 59.478 9.98828 59.8833 9.69141 60.187 cv
9.39404 60.4907 8.99609 60.6392 8.50342 60.6392 cv
7.93604 60.6392 7.49756 60.4233 7.20068 59.9912 cv
6.89648 59.5591 6.74805 58.9248 6.74805 58.0942 cv
6.74805 57.3184 6.93066 56.6973 7.30176 56.2383 cv
7.66602 55.7793 8.16553 55.543 8.78662 55.543 cv
8.94873 55.543 9.11768 55.563 9.29297 55.5903 cv
9.46191 55.624 9.63721 55.6709 9.82617 55.7388 cv
f
11.8774 30.3232 mo
14.1274 30.3232 li
f
11.8774 30.3232 mo
14.1274 30.3232 li
@
262.978 30.3232 mo
260.728 30.3232 li
f
262.978 30.3232 mo
260.728 30.3232 li
@
2.61182 30.1274 mo
2.9292 30.1948 3.1792 30.3364 3.35449 30.5527 cv
3.53027 30.7686 3.62451 31.0386 3.62451 31.3491 cv
3.62451 31.835 3.45557 32.2129 3.125 32.4766 cv
2.7876 32.7397 2.31494 32.8677 1.70068 32.8677 cv
1.4917 32.8677 1.27539 32.8477 1.05957 32.8071 cv
.84375 32.7734 .614258 32.7124 .384766 32.6318 cv
.384766 31.9902 li
.566895 32.0986 .769531 32.1792 .992188 32.2334 cv
1.20801 32.2871 1.4375 32.3145 1.68066 32.3145 cv
2.09912 32.3145 2.4165 32.2334 2.63232 32.0713 cv
2.84814 31.9092 2.96289 31.6665 2.96289 31.3491 cv
2.96289 31.0654 2.86182 30.8359 2.65918 30.6738 cv
2.45703 30.5122 2.17334 30.4243 1.80859 30.4243 cv
1.23486 30.4243 li
1.23486 29.8774 li
1.83594 29.8774 li
2.15967 29.8774 2.40967 29.8169 2.58496 29.6816 cv
2.76074 29.5537 2.84814 29.3647 2.84814 29.1147 cv
2.84814 28.8652 2.75391 28.6694 2.57813 28.5342 cv
2.396 28.3994 2.13965 28.332 1.80859 28.332 cv
1.62646 28.332 1.43066 28.3521 1.22168 28.3926 cv
1.01221 28.4331 .782715 28.4937 .533203 28.5747 cv
.533203 27.981 li
.782715 27.9131 1.01904 27.8594 1.2417 27.8257 cv
1.45801 27.792 1.66699 27.7715 1.86963 27.7715 cv
2.36914 27.7715 2.76709 27.8862 3.06445 28.1157 cv
3.36133 28.3452 3.50977 28.6558 3.50977 29.0474 cv
3.50977 29.3174 3.42871 29.5469 3.27344 29.7358 cv
3.11816 29.9248 2.89551 30.0596 2.61182 30.1274 cv
f
4.88672 31.9434 mo
5.58203 31.9434 li
5.58203 32.7803 li
4.88672 32.7803 li
4.88672 31.9434 li
cp
f
8.45752 30.4443 mo
8.14014 30.4443 7.89063 30.5322 7.7085 30.7012 cv
7.52588 30.8696 7.43848 31.0991 7.43848 31.3965 cv
7.43848 31.6934 7.52588 31.9297 7.7085 32.0981 cv
7.89063 32.2671 8.14014 32.3481 8.45752 32.3481 cv
8.76807 32.3481 9.01807 32.2671 9.2002 32.0918 cv
9.38232 31.9229 9.47705 31.6934 9.47705 31.3965 cv
9.47705 31.0991 9.38232 30.8696 9.20703 30.7012 cv
9.02441 30.5322 8.7749 30.4443 8.45752 30.4443 cv
7.78955 30.1611 mo
7.50586 30.0938 7.2832 29.9585 7.12109 29.7627 cv
6.95898 29.5669 6.88477 29.3311 6.88477 29.0474 cv
6.88477 28.6558 7.02002 28.3452 7.30322 28.1157 cv
7.58008 27.8862 7.96484 27.7715 8.45752 27.7715 cv
8.94336 27.7715 9.32813 27.8862 9.61182 28.1157 cv
9.88867 28.3452 10.0303 28.6558 10.0303 29.0474 cv
10.0303 29.3311 9.94922 29.5669 9.78711 29.7627 cv
9.62549 29.9585 9.40918 30.0938 9.12598 30.1611 cv
9.44336 30.2354 9.69287 30.3838 9.875 30.5996 cv
10.0508 30.8159 10.145 31.0859 10.145 31.3965 cv
10.145 31.8755 9.99658 32.2402 9.70654 32.4897 cv
9.40918 32.7461 8.99756 32.8677 8.45752 32.8677 cv
7.91064 32.8677 7.49219 32.7461 7.20215 32.4897 cv
6.91211 32.2402 6.77002 31.8755 6.77002 31.3965 cv
6.77002 31.0859 6.85791 30.8159 7.04004 30.5996 cv
7.21582 30.3838 7.46533 30.2354 7.78955 30.1611 cv
7.54639 29.1079 mo
7.54639 29.3647 7.62061 29.5669 7.78271 29.709 cv
7.94482 29.8506 8.16748 29.918 8.45752 29.918 cv
8.74121 29.918 8.96387 29.8506 9.12598 29.709 cv
9.28809 29.5669 9.36865 29.3647 9.36865 29.1079 cv
9.36865 28.8516 9.28809 28.6558 9.12598 28.5142 cv
8.96387 28.3721 8.74121 28.2979 8.45752 28.2979 cv
8.16748 28.2979 7.94482 28.3721 7.78271 28.5142 cv
7.62061 28.6558 7.54639 28.8516 7.54639 29.1079 cv
f
11.8774 2.55225 mo
14.1274 2.55225 li
f
11.8774 2.55225 mo
14.1274 2.55225 li
@
262.978 2.55225 mo
260.728 2.55225 li
f
262.978 2.55225 mo
260.728 2.55225 li
@
2.2207 .668457 mo
.540039 3.29395 li
2.2207 3.29395 li
2.2207 .668457 li
2.04541 .0878906 mo
2.88232 .0878906 li
2.88232 3.29395 li
3.58447 3.29395 li
3.58447 3.84766 li
2.88232 3.84766 li
2.88232 5.00879 li
2.2207 5.00879 li
2.2207 3.84766 li
0 3.84766 li
0 3.20605 li
2.04541 .0878906 li
cp
f
4.68457 4.17139 mo
5.37988 4.17139 li
5.37988 5.00879 li
4.68457 5.00879 li
4.68457 4.17139 li
cp
f
8.25537 .526367 mo
7.91113 .526367 7.65479 .695313 7.479 1.03271 cv
7.30371 1.37012 7.22266 1.87646 7.22266 2.55176 cv
7.22266 3.22656 7.30371 3.73291 7.479 4.07031 cv
7.65479 4.40771 7.91113 4.57666 8.25537 4.57666 cv
8.59961 4.57666 8.85596 4.40771 9.03174 4.07031 cv
9.2002 3.73291 9.28809 3.22656 9.28809 2.55176 cv
9.28809 1.87646 9.2002 1.37012 9.03174 1.03271 cv
8.85596 .695313 8.59961 .526367 8.25537 .526367 cv
8.25537 0 mo
8.80225 0 9.2207 .222656 9.51758 .654785 cv
9.80811 1.09375 9.95654 1.72803 9.95654 2.55176 cv
9.95654 3.38184 9.80811 4.0166 9.51758 4.44824 cv
9.2207 4.88037 8.80225 5.09619 8.25537 5.09619 cv
7.70215 5.09619 7.27686 4.88037 6.98633 4.44824 cv
6.69629 4.0166 6.55469 3.38184 6.55469 2.55176 cv
6.55469 1.72803 6.69629 1.09375 6.98633 .654785 cv
7.27686 .222656 7.70215 0 8.25537 0 cv
f
.5625 lw
2 lc
11.8774 2.55225 mo
262.978 2.55225 li
@
262.978 196.952 mo
262.978 2.55176 li
@
11.8774 196.952 mo
262.978 196.952 li
@
11.8774 196.952 mo
11.8774 2.55176 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x009.eps)%%CreationDate: 26/05/15 5:00 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q0FMNcT!mC^capqP)oi^?a:?2m*!Mb-R<XD:'_CRrP&7/n[nM"]N7s1'MEr)1XDS?RXiO,bH`\@Z=Tr_gT@)[[GH;gDZ+c*%WEMbh=089lRn6P"'C#.,rN+TCQcWEkAjO87U$=*WD.GN[e^5mBehhJnYLn0uq5Q<!Vk)CCXkPG7)QcbY-!C#TdS(]^hU.NZo![+_%[/Q9EDH,IV'C#Fdq-:']C?8LZX3sY@C/tA.W]b;#e/QruT<HjMB-jOh/qEV-N:O94E$;UXSUgI'DiLB(m1^_G<VO5Sj"<HuTCM[I%>-E]"JgaJ.ObKRb".;CWV>nftT@Mfah-R#-X1+OY)-UULec)Rj51/['qTi'IV!VpXfgY;/h5Ks\Qq+_sAkbZCrY47(8^p:99!ckH%`,3tS&iONm?sW0'HL3pIak^-s>3c_0jZC0IqZ!38X+m;rjHD\dqe=P@Qd'ge;5XN;,qM)l<GN%C)1TEVW4^Rp+9^\f'Y()`hJ5:(%l)hr9[!a7bYSp=S**3'AFU7`7Js1A[H-s4?<%_C0STG8Rpua,%dW$8V6Gf[sC)X`O<I>FlJ-BmGj>Q:l;q+qtSbd]H\`+m$23[[k%:8_D5?"e"FLO<M+Z]=[mbPilBU,Mal[3d1>a].4ii),a*d5e2aiWG$?ZVj:%;`0500p3$@AfD%DZWQHl<g&c#H>L(ahrOLg4V01K%rR5oaZn1uo?2,rb(f],GYHGcA?&,>h:7dcpn2>R8ZCmFn_(Wu`;O.K_/?<#f3*d?C\1X"c?'#is$`.)E9#3I]KMmL*PU[C*bsDH&%'FI[6>_]0<Z=Ul,jYAqOQcV=B@R;`ALX\kd_OKo&NoUR3TbOj?5+r[tM7&R1K,29NP^sUd-a]@_K"MJ.Jku.F/V6d67/0/(6]9k9%g'rN4$>kAU#rbHS:^Yn[T2;Ci"rQYJTUbM=E05)G509:ijb.qH4/%Y`%[=:`@O9)[-jB!j:V]AEOL1H=,<Z6\TbOkpoe>>3Go,0>%TC<4l8,=;k$0;/<:FHD6K29pR6qR_l8c;I1P6%>HaUd\n66G/IPTkKbHm('he-"fc/lF@=bkd6^@/ll.[#R^)Zjtq>XX6i;IIIQ>%LjVSe#Z&ORn-N[!Fbqr=Cc6GBk=?%M\sWs_=^f__PS6V3ZG=H`lVkZE665#GWL*)`-tb][g.#b2;QP%nS\.aiPCJ7+1,=\CP<LA,%+W/As+-Bnbg;uF51`NQ+A2-7SfdG4mjBfnL]IdZMNHERkN6@q;J0N!)G[#->dE:Zaob+pu9iY3_5PRmYU.YH")L3P+P(-lNi1Kd;%r[$!i8Kd"Gq.JIC\+iVq3=blP337"QrlaKH'ChFegYO9l`F&0hOY.CU7/SA28gX%4r$D@Wrf?8akWAPbrCVOF?fWkTT4ScG1[iu8%EnN)-*Is=!_1.T<MHM^u0D+RDDuKi](DW]M2DsEC?*oNMJbW)A$"&RimJWMFb7IT"DZdG\KA\&+'<FKL1$(jS,,N]!2Z%*UPST&P%[0+Psd_Vd4mnc,!r.]ChQN;trlLNt$FgFtW-8!"<:MIsK`"gKl]>U:t*Wllc5)V??,D]Yl$))`+H:8].)?uE5k?f;&(P0*tV+>r=%hR6=rbaoC`i`_J'0&5_)GmY,!.<pUCakih@_N\7j2"a-9b>;p3FL0[)-Ntj593-p@WkV#!3Pn)<>;*27",FHAAmL]9Jcl$Cho!cG%1-u:[5a"g38/fC]ph,q\k)qG)3G4S&lLn(ITV=9;S<PD';n_X-Sme4:T/[$h%D:Ns(9XX\T1G,5hI<l9c`6@!+9!U`d4,=.%<I2!%:0M3DJg_cAk8fElb2o%mEitZnUQN!JEWdm2ULe*bIF%VIGOdX0n[Lb!Q$#[31*6;#1jYgU6.YBHmc>)?Z)F#Z88sH,"7R`.5)`=8%K,Fn"%IC9CO3g-q&-(</T\MmTra1&*H;'\!Z-2XS8-d:fEWQ:@!#5D;534M"A4oPUS!f&pUf<bJ^s^)K]6R;HK>0FZSRp4NM(4;6%Z$_tUcmQ58\3ub-LJ-UmGFA/,R;54q@BuWTnYd5oGnp:pJ+7`<s)mldM>'8LBa<K;0Y?P"Wsfr_5qA*Gn2kQH-N];lD1[b`kr=Hd%1Ha(''2g30fSg"f2Ao9Tk"jJhf:[4R_%VgdVg'4K"mp4;^S`g?kS'5u*JnAIe#ZuWLAt6tkL("Q5J`^9S7j_/0%'B-!fghd-10is%`)#H?3+pBcB)ou:4+5o6W&+fTi=]9?EfJumaC?DG8M6<..]m#/J_tQC=j$dJe]hYb01M8fP>jBeFKJobiH@!dms)7'W239O:n5Jq%@!^#gC1`?'IZ'7^Qg8_jL8B1_):=U8hr4+mar6c!L@i%EYHM4)eq`qN[b"7f/6H(JN5q<?m=&k8NEDG<3O,47cSDSdF0s7bBs00V%8e\@)gdPEr97@2taW?t^IuDNs+l2.SY\<pD8%Ic71WoM,fD>c\a8p2b9L--641*UfmpN]7NIFI:IZ*1(O)Z+fl8agoNc:69;#K*W%r(!'4N*2L[`P!)Ih<:)eQuYq:nKo9RS]'9s[duGRFpF8NQFjmP]GuBi@:de^cS=n[#R>_/H&#TA_cN#Ia+Q+$8pTP4I=M'6_Xdda%5,kph=hrc(V$#QqU9rGD1@\SA=4k/!pd'/?7N(Z?Qnb==LrMa<NA@crjHn/&!G53iRJ.#M,cH:D:HU7\'@160=j:P7&QL3!)uLYi%XV&*Q(k<-obNKV*Ol7(^*&N<A6/]5=')"6'9]p)h.E32T(YELlV's'Y&mWu?gP3^ZXXsEX[-7i_Et42;(I!Zq'5rr=QF1V"cL]J\%AecN]jBJ>N"\U4K(:-6mZl6&jnr/(=:X3ahT/Ki%^qZM&>GuYW$#9U!A,O8j5&L4j7m!9m:OB;@]9Sc0='Ml9j@-!;L5I9Q?N8O3%HC<hV"c.*[5P8>7>H,(fObh/>8uIt#&(/Sq-i6"#m:,I,X7IWD-dYc_Y?I^OQI'YCV--N!=$#`bW)"@tAu1^0E/saurYKlY5s,di%"Y9l+>,U+E%)]:,,/+C.$:p4e<)i+1,e"`#B!og%PFl0u$#D<0o/Bc7l6Ni#5M_C]7B=tsBYBHdFpc5c.0&b7itT8T4D>E4p")S>%phS#rHN1Q[;!IHfd)1>hp-PV'W5!O+m>q*J:^$mGGtmAQ0S8ulf5%EamsYRgOs$Zf:9XZJW1EtEmFAqFYQ6\3f:,bcLfh7qC0P%^%fH?8<s/<;?(h`<4N(]a`K]Y)=^p8u+?B/(#/pRNah7^QB[;I14ctrZYM16dP'(bigqc/(`]uNf%G?jsD-'o7ToD2N-22)fCOs^Qi%Xu_',DeBBb!e$/<$f=SIk&9m%++<s;5lXEU9(FBUs/73D#^g]ZJ;*9XC*H0thJ+7&6hR1gQpT:J6/TIISlQae,l!aae(7"?<Wf"o%S*8UWE;Gk[h<'tV>f3f8&>><`f%1+2@$JB'(%R.d(81K<-l=,u!CMrI>1qa;@aUfhlo43)pf2eGDH&ZHj56l)bam96%?GX^/HX7P%>,+q[15Ti=&h9i5Pq+dsXj5&Whq]2&RCbI?4Dn/7)#sMUPu`rVm(CpNP<]*)Y=90?=GDk`Our5@nFOCEN?;?>:$2.G1H^_FJ%+[k%>e\[dO@FLEpo=!:<Q'gc#uF,:i3,bN??pD'`gQ80JVa?HC&$TH_Q#$Up/,a-41-Ceiu8;&6"F1]p",fW&A!N:oum#8/):PG8f2.>%b8hP68R@;5SaOX-!stNjD0DOK=*7S3MFo^@s1@)0g<e_#pee]D^&<&"Xfm4io/se)`Gn9pBXHV[CXp7KC:9S=Iij:[o`=*XdQte?%(cPi!gKs2j/#N13CS0C>Io6W.(bG]!9b<L[hR7WXs6'D:$eT=Ghu5iKrbt6M><e[f)W'0FYABDhjH!LCrF<)'UT%EteJ4GH]DiLh%B@Q["`II1'hT+Pd=`2eI/aHcp/4t;>X8X0m,//:#hpnI9".bX,Xl1]0s/srN2lJU;XWI&*%Vrh+A:+.1`[,]\Xk(7b<W*C%QP`q;%S,Qc4CF<b6-:GK\J0<lGGBD!Br#UcU'IqAB.UC+&iR&-=6<043J:cB7P)#=bqbQ=eQ99#l+g15FE;[ReVq.tmri.7tCB*ZI9@\?l%nlft]H[gC)6RkdD;leu!0W!ZJn26EC<igN"NQU-KQ-Q;2o"AqTdsGq33`R)k&rrah=Z/[WS@7_-hH?t#d5iN#&&rno[+29GD>:)&%?EtTl9%p^h8h]2@3)<!b3fq@V`($q-M.b<b_%XS"f&':?1=8=PPm<:2jj/>F_%:"Op%O-&r(V34C7Sn)oh"JQ>,MgL1FaSpBOhJp%?pZ+q1UQ(XX&K%j<c_=td@-o2#44*oER6d/SJi1)E4dI'eulZ*dEsi+Z:!!udV!B>1pH%!=!raefO;/HU,&uK.(.F'dXQUkUdYt\%"%LCDQ&t8S(Q7selBaheiUaNNK/Ui[O[(t-47F75qPquFG<_2=iF2ojH5@_YN*$?nV%:,Q?rQtOCj-.!(Tk.<IMbk*nZ-uF:@u\S%YL9I?^P+aipt)=(^=TI;r`cOL\c_0f^N*Y-CGi(j,$ffQ$L*[mGliUpQ5%BFj7OshZ*CkU@i2Oj"V,J6`[1c`M!7Vp>f4SsA,r@D%+q)f!1uJ)tNZ,1ab$-ITHuBEEN*G9l*@_-'eUbU"(j\:n&:"+^THoju72blL%I&B7!t0U?/;3=q>d[)r>,J9g;%;[!2j,aZmma9i%>ZB.`:jI^Xi)Q8,l_kC!7IB&.a*t;Knp/d0.To2\9L&,qje#"pGt(j@!tnN(1ti5M2<sSi>79HQs%RZOn*$=Ff;8/hEl$R8RJlqE%2d'S7_]*.M,4"_N\>:[<""+c/WH<KpcLP>@#5$2VV'1SM,%u.`m7J=_maf.%)L2$S52771WqE!fUe'm$m.Xb:I)[q>!;hMaUi:6o%Km*[LI.Ga%s7DIeR*b^0i7b%(B]!NYk(N=mPBijToL8)Df;LWDa_n<2qIKTr5fBiM>[r*D5,r`i##O]2BN]6tgf/0--3i"D4mO?-%d\qA<da`3DHG39aPqM`eFZu(.=/o7a*Q[[qo09o(-ag_`"1coKSpX3IFX/ge9a]N0,l-,0]mV*;W0:D$r\.0Y3DrR$ea$2'h0&rr%N8FP'f]lH^Z2Z&]jq)?k`77_O+[(h]\V=VT1!()<YmO`cCNZYbC4E-/F2tE>0TT?eEaiLEqpTl9@L'WqBJ;cOABae/7fStE%E,i%%T,$r6mF9K^Tj%V63mf5c)]IMCL!e]SXLDQ!_YK-C`gT@h$'j7H%S]6c7]c0k-Z$*@DnX#JP9b*+@.<hFHG7`m%B(Vs-Tbsdh+^)W%n"$'r<R!;cASjk7']U>Mc.oc]7!e0CS\*f`&@^LWeL[.@_:]Pi0a&8.FL$:op'SiE7$g>+-7[gRQ-bLCq1Ta&9+VQ[7j14LW3ilQ%&XZD"*cc)L&..Vs.+<TkC\g3Vr\El\)k4SlTi?/CIZpUdT2ndfpA<HS(8%bWqY`KKU0Os]GJri*7d46[*P6+i3><&Fa+]YmWE&mr%#;YsFlG;E;JOXiB9,;fj);jjoS$i!J#ebm*HEG)PTf+4,8-:;u7Q?Rgc!IjUo,8nY:o)fYGCI#G>U$-6UmPhE:mq?lZf#Fa(SHBa%S,RB,6qLhdYh9O:M-LOo\IU.@C0,lh'^/$8e7ub++pJbF+VO*Tofd,]E(46G"#X7PWcCA0[n\H*V*]b_?!5D\Q1ShY2n0RMb"%h%%H*-hT.W%CW4ko\)'J_F926?C4Z*Xer@JKeCCWL_UL7]'([,(.p#1rpng[-k3nTMM_:'hW8P.'n$0efB.0I.Q7/3V!G?rq*6AgD/&%Jk1/jed:\K`0<<QO<g(NTRoKd3eeDN<*oDWh-e&c`?^!Alt04M[O"h^ZGH/+p%PB9jn'8jIe3fEr$#CJFmJM@6+.hJ_p3(_?,isZ%8K/,VMu>#00q#:$/5p2[dTcucPk>m7&-W3.p1pK<2(5/'8)!M`9e_4lBZI;ZCbrSoB:c1/2Q*$u3E*98NM<VG7@hk.0!#S;36rh'%LGWU#q>,<@fKf_R'0X(gFYU*@-(&4,#\B(7[-d(oOq8%DeNT_]L`PGuk0?D]Tm208#E#nQg.J`9M2Y4,UXf14=;hg1&fSNuHERoV%V\1/l3aU#26D_$sH_gt7UfnH*MH0uPLUuc#%25K+a`hR=!?/'hXf4b6i4?jQa!`E3RY"Kj0DA'tg;G*JHbbnYZdjsN[($YTF`b6Y%[Kml2h%)J3Y80::)_-O8.T+p$$Vk7DD_I&#o*(GY)_'C7"[C8@!C],FjIIa_=]&n9/B:4R&^!2;s0pQ=X`]*Eh?7%S_7ljr;sO1?%+s3rem+/69nYc!$?aV+hV<dM</an[;G[bQh$)Q,BjA)UNL&!RN9I!EE0X]3`+i1A;'a]M1bNdmsN`<DsIP5sP!AI'sJK"$@[_E#"%?218TaMP,K:aPiA/pfqFEYi1o&m"'u%WM-,.R6P95XWt4E_&5ZPt5=iN$'=O3uA(aNX-?!O%1S3eSA0F=uTYpFZW`Ei^c/`L;9r<%<QF<-^[V"in4"%1M9+!4Q3lq!;CoJ-<r7MO,,NAM!s@1HD@B@[SgACWQQZnWbF]UEp)LD@"4[`\(H9PSHZAZB25fLNO-UP?5C,A<%du:\A.lr1LMgrVT<qX^qhKJFu]CWQpIC<H2r`3nqpeu$LrQP+/Ab=gOe8fHp/<N[ZDLAU`1<4TVC?_LR*khKsVA=Y^c;RA+2oX:P%Ehk.pp"Oas]pU?\IMlFnH\@2*IN"\'0,sbrUH@%tol[aPr).Fcf=Fip:R0c!=s9$rF>h]Wo1SK2rN-12]A`+Z?"_?_46*?jH+6e1%GNIS;np5c`9jPip9j3H=1L/B?a%55O*@%t6osC&hG*\]Ki`l*r>3,acPZiC9R]0!ZZ]WE&[d2;IN8-7"ktK2:k@_G>dW!p+QZOI7%L6?E-)sas;@I&*;HVD0$(D"-6N$>:[k0s#?!AZ_IQ$XaV+$)WE)`t$%_:3;(lg,nFg<]00.g#&oPj7UP;+A1O^$.XkMFTq1LHNLi%o^:_00r;!'T\!/eaqLc&a%NH].SZ^eeXF8FcV@T=0:g/PhIT6SKidTAZE+40ML*&'>cV:Mh)3u0r\M(4[AhjIge=ah<,(OY,s*p_%3ck"F.jb-<<ND@Lc*`X*Xm$^9osYlFWH%g.PV9Ip"]_!^GGiUNQ1RZHkU`[7b0G+p0XT9=rBoTnN4kRKLGs&l.a9)-mUPb9[@T:'%F6H&fe^piP1E3^Le%%JGT,JO>:'4RT#1mW^<!oC@[JSU%]R%OPTBWP$jk7;J^?5PJI9O?E%^"7+rB?jkPpXqnC/M1/+kg4)lipO;%C-NRp+,<KTQ$2=KDUkCP'5:FJq2q*"Y3cA"'mfOR.D*`B@&6f`GC/K=903H[<%1$qQ>raoPPo@+VUM0^UI&(Z'kM%BjXRdg*@3pO%S%!<aPu9crktNgJd^J!bchdpkk-;2j5Un?KI$Qp\hQ85^p9G$j0(`/T>AN2[RRj2gmC'd3L\H"XO@lWhqm0IT$ELP4*%a:a^.M6S%UtWNNQ*!9Aj0QNncWB<%cq4g`kIM:(l2@o.rg]BC[03r2@(1<,J!ZQ6XRp81q&W`(q8Y.gI79u/$a"SB\N4E-"]p#KV_?4tC[8g%%[eH[d/%p8cRHe4m+5#-Xja-Nk(gQ=Q7d9a5fAg@KV2m!rHbN*l/[X4r[q<#f;X&h/4E_[e_3H)ABn)\`NZM<eoA27Nae<S=UsBiU%+dLnj.]*!nIUK"tna]XolZ'Ig.UDkiPp._*[*m:,rCe_ieMFp*PIWcV/Ds..\W-DjDbCV+Q\C\e<4^RlBqG?P-do?drpp;nG.lp;%L#(>H3j#cu\`dgC$5r[KWHA#<h=E,5V,$c*,6a?EEM]TcZ<#[`Ao0-lI$H=emS6o\dS9CBfi+mGZ.([l?Z;k<bY$j0>NlQ0rlT!i%W`At6mGr%7-GTF,^]$+jXDH?X=+4_/m%%nA?7q%ZX&Y`CT6F`3?HtaB<lB(:e(\6pf2^JP&+I8]Jt>lbO&U%;2WS`)#IB>B1k#4u%B)A0'Nr$u`mX@4rVp1:%Rm]=0\UD&undtZId2(#6_Ol9VT'!si+31JI]Jb-2(Ada`@WPHUJ,4K^HSt"9k*S#S1A1@P)tLGD41i+J%fd0FDc[EDhgm<rleN`]*3jmssqRV15A/ku%IT9W`?=q"%lh"sF(&mj!\?[`Yp2TFFrFF6-^AXsRg>39eqK\oSrsF'E3VN,KhKTBS%)`@BAWYtYT?SaTX6D(tL?dB8#3B!@qh0W60I9Oc8^",NBmVA:jC,j9).;^E<'(WKAX-D0O=IWCS=+*j\07J%&l-htBbs*\%04&f;%nj1UlQsH*4AF=E`e'5M,'DX)GRRo<Q_X^"oI$hJAJs`(M;mZ&$))4"tH8@8H/Yn^,h-2`-rGqu]=b)c99?"4=Hs@mrkK\T::+(Z^%_pJ60BA6*uG,DXWp![Je%Fhb$+Z?3?(ukF"A?pibB$tA8*BDA)1l]0D!M,1H4/g0VCV7CG>^cQ.K65jI$)Tf-*b?p)]""WNrsGaT%R\%602st7h0<,1sHP]j71-pE>cq9Son)O#49'LR$KD?;4<iEAT=)+8O8<l6VgZMJ2e_/Vi;/(7NUNS!;IGMs%NUN:=HWKB+_c(:3%2RHB#hK:EK;X08%\H?cNmUIrp*M,SI]mU<-ku>3/GjN/RXa'7F=t.Z95(Y:j94``*`H*b=mGV:uK<[oZ=t04k(S3gm\ZC,TNV5PV%[L.6/YNV.FgsaSNF'q"DqYR76F!>CeOHS`2Prl!![S`M9nr$C68dsLAq(HZn#H@ao:BrBd`0U!HWftD[\bbs@P5*[CcW;d`<$0/]%&5tOARC0I;56:s,mdA:@9Z)UsF'h=MX&=P<FZ/9D#hUQ%l,V4LMcP?KBNB\W"uU829o=0>AQ\26k<<Y"2#fQ,c7EYMl\$'-67k9>%F'nW")9J5CkiXKjk'e'_GDOT6$e5-lF6$J\Kg*d4qdqmK5<pKt#EeZCmKJ`;85l7SJ*)jV*\D)IS'%=Yf_>N5R-E>bch;otH8*P$%K9C,Z85.._6APZ<@^HYq%.(`M1j^7uK@@J]$_cqia7h?rs'R/pY6Ud$>!<65a=N2U]Sh5LlGE7enfVI_KRJ!2g\nB'CZjY<RdZ+.%S4Ba0h2!;r48'8m[-]r!Imdmo<DQ)_*btE]4\mABfBT.)7d4?b,;Tni@l&+ckg!Z!'>hAZ&nc+g2+sblnj.QA,/*qQHb8VbQ*T*R%*gJ^N(YH*!hl,VL0hg'gc)ZbtBLYA(ll=4Nh.In,'Gof:Wcji%V7kb6lm5o[<GUq*_,TnnU4EhAYD.>EbTcUqMBUf_e5e(UF1[&M%0SD#S$Y>80b*^sSCN5oe%[U]G&.7R)l9iPN0_(6Ma5'(safgq]7NIL;%Qj).;`?q'4ZTVs?)gQeEDP=U<u^u=")5dNdQqQ%ZL3AV%e=@e>h(K]^\3A$4"_D3l^Go('AZ.2oSNsbEG$_dHNC8qgSo6'chIWk9$]F53`VqKhmY'<(6on<C"O$G8dg^F*69ReU.m<ih]UAY'%Ug`igDclJr!(V4G*j![A`V,n'4'k);2bOH$]#*r+&CoOj%jC2uN)C<UOrV(V7"r6p]^'&"T0)*)q>2.iBV422J'DY^Nq=E^MoFqs%S^Xc^KL)obJF'p/.EV.J';EOe5^")0M&D=`"8oah3;2-q(rp0H2?LqQSrF#!Vf1SKg[H^:fnp7!*UaIo'g)lOA(rpaWONV2i)/1^%S=8*/gqNTUM(qjS56'<1[$hrLSPAe80J7R$W(EemmG"Vn0tFX<j^pMP-OZOjfJVG)X:tjM!js.Ki_T*]$&R"1M0*!oG^[co#U/'D%mbhOBRi*i5=O$SG#[Q?b6q,>=K'%eu;,[V.cNH`)Z29uT_V+/-*_:Z-1.(!(J8@+,iuR[nirh4bjT38OmSr`MjW8S-L6rL,P;GF9%^)pP[4SI2*i[g7O74Wo%@2+7,I@g6uC>mt;9FkaGa&<8N00Z?EoB$#=_1LTfN:nRG"+.9);bN2-SbV`6r]*!0nKI/scmQi7^&]8l%]84G-J0>s`$s8ZUbjl6`IE)60H&)1/Iu">)dQGpRO9c/Ug8T(%$2Ynl/(Q8aoYd>#I-l:ZpWs2&-R]qb[(11F7Pt-/ltSKu3$4.f%DeuHN5@1[tHYql[!!ahgahbGE@Y5pthX@eN,K,#Ep0hD)f#O'V.lNJDK496m<Ij6'_7h47a,7\R8JQIo%:3+^l\FgKPFZD5#B>?P%K3d^DiC\lbQPdA>q3?u;7[QIW[gY'GqW=V;2cq7.QpEK6%fD'#Uo%]iS!HUce4Kso'BLCu>Y&o4^i0$<C/E&gnj6i7OU>Lf12RN)%!'Ild.:\tJ@JZ+6=i;7skTV<5ShCJ0<HIa!%;6K.AUH;J;9)rC;3QtQnRaSki)\a*qj/EqZZat?8'!"lDZs,=6Z6(t%"fnH,)&fj%]t;`r^P*T>\.Xk-LhS-hh(^+FJ.WWOKm9g6GfEjb&6R;,Iq["AMTi[r)!YDF>,d$oJu*ar^KJ?V>XM!k>nr>:pF>+'X2CEr^j.4K%e$;?DnV+:>:Mg-l0HnXK=ltaoB\h!.T18-q/g^eTm^O/E0kT`u5eda$k&)fld:g6"4@1q\NHQa-g?>+@`22L/[)fM5qJ?9P%JRRq%1c?hTBT8=6O(\Bu=,\M94_SPVT!.28!_89[_gF7R]T+Np$;!mG_-RK)kf%]gU)?a6C`Hj>"k\t3>eqV//0tFj)0k2X/o(KIo93k4%(gG*+)(RjTV8i5o)-s^MiG5VO-]L&d,L3.!r;ur[gX\3=;?/6ha'OcS%YlEP$\T$`fM30?Vgh<%$8j@*GEFDgOY40d=]?LoB`D2!%2+6h9oNOZc>E0abM>5Z+13FAB7:<&3hp(h)r-O%<CC<L@/<2U#N]XXDUn^?=iHohL^/*X[?;%*7[t]D\g(q]7@Mhm7s$"S_@6A&s%pOFR2(@q;#E7XO;4),W+fg6=^MR8,ar@>he)eKa+oLl,?>a^Y`%ng`V#];f^V=r]$kRs;K+hiIhL2MU_[Wd`OIrsQVjlqqW#p%h\%Yt"IQ[7rXsCPWLm>b[h6#*&2X?"tO3%H?PN/tPH>Nq?eT@S0&Xi:<<_fVMWi0)$6\68k@pTdFL-p.b3-I.(a=SSMQC_H-bG`](j*%_E1R@\(_[[%:6`)ZZZGL&nuc+p#'cj6<qUcZ/Wl6CBNG-I#d7O'3(ZHjP.c#[iUB^7?Ze;'-D8T.iGk6So'ibc+o_N+8\$)Y5=eo%DZ4r/LSuceod@hN/&fc,j4tT?6&/5BQp;-eF9Z"p4dd;$^.LO+F@9>nT0jEc5mQ(pPK9FB@kB6aNm92qcCp0ATVL1lA*;2B<m!5^%K!GPMae=X<TOVVYN130NSO"WDho<j5Mp@st4Z8-:3kpRCmY;9YY8f`]Y2>JcgQ?K/,V0VmFKR`>"te0S_Xi;NQKZRG*hjiLMV::[%TWV_)N2^hVEmms3LrmDp=S2L*"8NYnrSA?EX_2tq7c]ad`72Q8ST$#43"9eK_'?/bqomVukG(tln/<CEiVf`]9h(_+p0md[0/;Qr%Fa9qZ8aA&.a_otV<>a0iPEb[@N/YVq9%'BR<>8<(8TP<Zi065Q@tOrnjPO$%FOUiI`0Ydi2hOM:"UPVVq]id/_T&G2[t4bDMV]s]%O.GVQYS2&aA@H!UJqW830"&_+<Up!o>_LEf"Co<XJk4@P7#\ZR.5XCBk+&=9h*ph-p93/^C>X[)4J#<NP_Yn)#']72*k6ca721ML%19F4jq6LR+")#.<_rgZK=V5H&0`ku=Cre0u`i%;ZKh9YGQP2uH+XcN.\QsjY^jK9mTha2FH$hi//CG)TI':rn0@QMc<Hr94<5]jQ%(roKu8G\\`,ABfnZ&4gn1ggjl&A&4J45L6TJ3+U[s#M?U)<tE9JS`[QUP-tXNJD=HMG+^ihGmE<2JAfs^QB_Q3WY70Vhko*YsCl'%%,dL+HY30;G1jLXBf@kq-E]#FEYBS\)fr4ggA'lJ3IVU[!#2&("))r,SlGK0#o_RH^@C$9:%mFf]n,"4ZYoPK0,2AJp!AK0Vd\G+%UCTkWH[:K93If>qi#[2Fim)ec`]g3.`=4SUnM=hc(H/H*B?-[pfUt*i!1t>jB](lE6j"XAnupt-L!P-,<lNoLe'.;T+!9C8,^DZO%;07,S8*fY#LP'X$]"Lpe5*S:?#AomUM#XgE)t?5n=?Jdd%.Es2mCrP@O?&VrN!P52+j[9N7oTI[=q$RiS\n;BBL>4!+uASE$1V_;%hJ3g&hM=k659f^,*u^7JOg1"(bl3D1)6\cl%q[.%OjRfBZEnO[(GR*hqifYuKM]lg+D#NToP<gbPYdt_NlWL*UnNbgOb)%tpY2&<%@j7(WqJtGf2S25;Sp/8pgeu!?Z7c`2o:i.-S`PJiH)OTcZ@!:=^3R7K4f0p?%t[,/hOQ,NB._3G`(D'3+e8msN1.115BbM[].8m>%&L8(=a24TEU-XXPH$*Vh)qI3'>rP,eRgn\\<:k(A=M"fh1#o'ib-Rmra<9]^j?!<1]i/VcPtNkt#;89"Qk).RH$uIK_hG6>9f*q%%C)JrJF`9NLbWLe<oAOqcKdS*_jQr"jI(1=U;Ferd$dKNXF?\JfD)mH#3:?I!SuNAI+"m7I,\,rR"n^!1g;9ZWiOgPFZeV7ZQZZs_%g\@30@,Blq%Z/a$Y`L.R)g>)Rd/6tI=F24sAUN`.h!SOSMK/e+r>R"Ob!sErQH"':$bl!:&UEAgnOt3l$hc?/cC9SMM\Q(D8?N=2%L^guV)*G)+h]O3DfRT!<3=N)XB@,KKW!;B>NOVFs&5`R@PM2IQgW"kb4Du4L*G;f?^`+q#j>:8-/Qa!SL_XRt+=uKh-hc46"gPgN%G\SK7[Ldj4n5)3]I7F>DT050P&MoiOrYQEHSp;[4!Vp3pp/43S0/`p-o[qM\$V+d(<i2Gjdn!!M8?GS!"pPKjb=K=<9Le<bpEVLl%!Qu`D;B]C`&fI[!BDd]f^uE[2%6Fc?E;nF2hu)37@0*as^hlQt@CR:2$u_m#>4HgkNfsedAAomf$5_DL'2=/okJ5-+\<!'c(X0-U%Vo$EC=,r[UQ\\Ac32pkF4!I-fKo:*_V;1@jW5Y%\:4t:q2G!UE7Y]6i$_/".<brE5(i)$[/CmBu@=&&=V_fW/@tc:ANd6X%%UVjI%]XWJjf]&F)2GMdR6d3G`2eiXH^2Y9nC#/KRof_X_<&k$P610\9$Jn-:qZ'ub\T.2Fe$uD?(T4;uV6W1hoi/ZX3%]"/H?4f2`MS'A%Y;7igPr`.F?0bt7Yap1m'Xi&fE!a@+Ri.uC_]ON-0dglt<^bft>3\<Lju2DSb,I=okY65)I60HP_p;5Wk/Tf7/_(2$G.WUPYj5&L%X#YHUplaGc[_jofi)8r7=J[[5)0S*bY#MD#5-pNn0!EcslipNco32[c">Fj<hgAD/S!jegFE)0j.kJT`R\'MeINCg3lu)9eo$4tD%1@/0\(I==lqtLY:+4[S(]38/diNJa?8k[5!447BXcet4g^A8gMl*!9J6Go'hO2"OP?O>rpi0(.G0H(IWdH.#:RdYJn8lF,`BEbo?%CuCV/)Lc`GFdCaI[+dM$Z2]a,^2<G=Z`WFS)i<3m1pIO1Q_Gg(pK2i6',?u^mr@atpKS/UP?a4D95N]8DitJ`Lh%NO^nL(6q%UD/%Ek)'%`>COoGT=rKHf%<*6nS`[(/9i#1TDE']PI^uR/Rj*&iJUMJLH[,]3cP$1M$\\^<#g]j(5,Hi#3fEfi?=JQqTDD&;C,6K^lD5%Jo^,PmS"K[Rk?,I`U;`U>W,ka/mYQB-\ojA$X^*-A2[_\[[_.lh,mP?f\(@4PE,]8*]';2j!;uV3q(^n6oJ=I/mXQn))%I3B\o8H%GW&i(/fe;GSQIcjFUUFDFDSGRjKe$%Ep5t3Al@<(6+r2Oee?<*$XOR=F>dD98I:6Fa^ij(oj?Y!`a`T/"m+0$HV1&DdflF;%#Je>%2I4NAhD)A$r2;m?-cN?(T5[>]`Q4p7c`qJql%3s?aQhM*Zg!'^l%3ir)^h+-#XNscaLKoF&mP-G8Qa9Zkh1&D^2q/@+PGE#F@!HZ%"7?mE+e(*_LEb%-*\j-ZDD',/M`7gJAOju:S+)^;;7#M=)WX-3I].'D01c`h^kdqKmfY=P`V%P`gnU>Cb`_Z(>uMUo(CP6LZ26[t%YflATFC/=XG;8@Zl=/Y?0^uff\2e?<`B!BNfMVHDlpWuOr?pku>ik*B:`,KDk4?X(W\/18BE&^RiL.Obpb^>"n==S85udV[MW%*X%nIclB$rWMM):>=mht;]Gobk7+Zhs^uO5bi/L:QG!>USu9lsT=dI6YbAhN&M!c!B\g`E:aInaR67d9Z)qV6Fb'L>/=_l8<e";Z_P(%\f39g(3%OSi0u&[[ODW-boO-UOVcjL(QSc-Eu4RU\G!bkOZ@j];GDN*bK(V6%q9&b-"8pkm=TEPiDW<;NEa_fSOaR.o5KN!ei8e0%[%nmQ(2%s[%+p3*/KDZ@V8:u0/+[t;#-MSP=kFaoLc_l)@,g8]@2YQ+o4JcRTrHEYD.B^Bm$rP#k:\&,L^huG5/_=eKIk\\jB0$f%&@+8W\tf"dA'Hrpbf=/\R,g$ba"qm6/]L+O?F[G&M'mZaePPuc:?&!>G#.*c'5PqmRjRX<$0TQ)SI,Y$!rTZ\r5pu:-]$J9b054]%7-Mq0MjUT1-^"K_KSWlE(A_\9OGc'of`;$<V[6n2ps2)53*.8H.K`"\(nDBr`!qIbd:nP.i^#NuEW:I"bf@5M%+08-!M4:LbloY^%3$j)[-Ptm_Mr!WMnT]iJ0UL5\hienFatRo]_]nJrmkDDCbV8\FE&W)ljY/XKd9=DBiC%Rn,AS(RGMEW`%)["n)`%#)`-e;0S+=Q@%L4)#9NH%nR&9I*WS+=FOiK-"ROkYB&:C81obb%$1El6_+>rOJOCTjMB2oX<W&)ZEW3ISGV'2,ETq"ESH0]MJ8Z#<3pc?qaC5[HLg%Or]%u'ui%;%[Dj.B<:>2e!>EOCIZTf-eIHKm84ie^O9[BWG`WVbkj2["8;E,)MU1<,r#QmiOg%::SH'Elm*p,KAjt#q"8#^/N3\[%Il+'a@r[Pf#@qgDAU*"YbHYZ<UZ5h..rXFE0h!BC4a06[/?WQo*7p\=PF-<,Fgu3(E*OS^PoA(*%(hS(O<&hC*FgDNq_ku)fA"Xe%)t&d+cZ-W=rb/>$F09C.F58(Q.;qO5Y(^[EF9*bOmR%bUj4^sO,?,l`8ErEl#`+qbFcS?\"Pn$16X,/0^g'+FGhZN=."81MmG.\`%EOrT.?JJdJ^K>Ef/6_8lc7-m&]6Pf+[CM9r+u)2>YUadRIJ9Pr*H.OkQ$W#[]$j`iVfJ`YHOnk'iVqDp%k$HbKr<mPIU6()cq9S/%Z4N>tB2-_)B:288p?GB)H3d;+S1;#@n4Io%mk0$R@a36e@G?.R^5(O^QAJ.,4#OqIiOX+(Ce*2pXo#CD1\7+1NKDYs9]V1S'n>?f%hP&(0I'@c4;Q2OE2NE\K@JOlg&XDe.=J#'B^Zb+;oNb"acE8P&dU27,Y>V[pK$3W!<Ht@:dUh+dX#'6eM1;9LQp1uE3F=e`Z2To4%6&C.iH!+7ka!c^&[aOH+KUG61^,>i#(AMoEJE\UQ9V8,E_.%;P6qfHohUS9.ghi60DD>@V:2T9SO9B+o&>-]sjOU>MOpZd;g8'p:%iheVVLYk`Gm)/H!FQ75?$I"Y7],l#@j8_B7&(lCJ5:\>*euH5_B`n'B`fVX'8m_',Ybu\Aem6L*>&7d_5uc`*Xl2jg=e)h#U%W1h%OVAc]*au^g,'IZtC'&:An>WJ:_o@:0?'WEi1"4f+_S$aq_/MYG=f?KbqX199jT/RoJu6:+)J0'0jen:2o1+h%%<Z&`G^QSLM'_Jc%&rnM5Sj=&@A$[39&DBM\`f)ro$'O@YbXlfE9dBW@<dKPW7#lgN:N2>!.1[L/%ZBpG_Hhhe2,k]k;XTV;%t!l/2l:&3pRSnbl#[-e%?5bnflmD"^Zb^9BGZ"PIq/(\r)miP?\hc%T4`2U1RhFD+ER$QMcYeY%))[.-mNF'-Z[Rj$5WLl_3;PWkTi=eURNc)")*&FNn>01h%Q#t2C'XHqLN<dlX1/\-Us38QY2R787E\(aREd<DufRT71iA``'j`7:h*Z>Q_*:$66%\:fRFebO=?Ui*<N10q5)3mR%!VXtRS-/!F%`eVh@N*(@c(Jg'V"W00'E8V2l@46lA;(llI<9u0O\2f)UkOcd=!fY=K+Bo^J$SZH.@#R*d6l'1c*5DTUDp_^<>D/IE<r"E1,C:+f%M$O'rV0i@kGsKq]]M&&)SO>3#9DOBug&$OXjn%;poFG6M(NMb2KJ2F+-42^.V0r9KeGbk/q)h^E+1majcr5hF-S*&X`mbD\)eum0%rJ!BQC=IV/A/3XEX5D!26i$0CMr)*++R;&]]mc)<Rid-Pdf*e&L5L,WhnZRl-??:soW<R0jB%A($PAJa37>Kh5n:N:e^&Gtf`X2B%#MnZ(8g`0Z]+r4>\V@`J0D\_aZ1"llp\Kjc[u>[;?Zaj>Y%7\/qF0l)O1.K!n@a9jo..knf?Z5oqD)Xa-$b/jrC#XOOJ.U'a+h.V%0=iOKZI1(amS7]nM\5-5Fg#/Z[>VX)HI0?SnaGKW46Jd!<kjdbiu?_5"lI?Zc3P+dK^Ok*Yo;V.^VSWE')25kVl,U^r:p$_7;jZ;%D_b51\C[pFQ(D4Y,5Xf4W>Tf]?hCIL_&5VXhs2*G%M$WRRnS,U[?VEKHO.@9Ds4GJEj&iW)\@69h[&uQ"^kIOeGI/@lPGOl^jUU8%n+DUQeLtBkDn*H8>1B['=H?27?GG].r=\@'L10kjIR@_D9e=Ik^==m>*ZK4)hg""&gjB"ZgrDAQ]meA<q@.Wjhl+H5IimRHp\K0?%plG4Yc:f,T?GE.@g/'0^`4FPRH:!V;[@Y1IIaPY$%@FiK:POqCePEceGcZ8jL,u_VjEpiQl%m(HXO6Ls)^_!gGotr=ameq'^N'!Q%Z$ZF9_V'#u%Ge!=p:Yopc;#J]?GG^6QM4.WdI6`98fn^fXT0k0d_1+Wdrr$<Gl2peU8RDX;*!pTIR+s3\J'">Hi7F!/'#<S0@oR-%Z1%AOEst4@qXIb/][r3gCuDFEdV8;_h<PlJ&=XLnfo:9\?hB58`3HT8p%-Vn%o//O_t`ZmMdBX*E&ph^Hi9[WocrYnN.8#Q,:PSq%QE5oRIo]/o^c:,')@)GCHPtuXduBoZ^(V59/:7njD7o>P-SZ``d3h_C-R+;QZ/1dg/p5i\<V'NIp6'8!`[JB]R`.AafJ==,lukEn%pEPC9b'n*qrcgoSh0dqP#inp\Ar\eCZH@PNQ$^,])g^[W^Pk/'G]\F@0$GtuA`gG9\!>eDj8AQDcaK*bW)Rp3m:C(Q=oBeo*h@\N%RGXXGpU6JIhOLA3:%f^a8XY>q`ln)/kN-=Kr5cJK\>UF;hcKEWh_Wm[N)BL/F`DSd8:Rd!eo"[!c2$MrZi-H_Cc/?TeFi@ogl+G3%A#4\4n*O\85,Re.ejF9XG:h,,gpk!V^Ii&RT=.YOqtJY#RQe3WPd_13Q1FCQI:^Hf4mR2rh"a^s\OPVU48i^'G0SY9;k=>@Z+-B0%^<Z#!mM&<@qig>f+'NX:S3%b(lKcPE?+i=IG4TXeg7Te=gUpnO509E528,+/3nt6T(1medDJuu4d:Z@>/cD'?bgfIdYO4#$At#81%lBbYuGlO1L<)Zf<-/E4UTrFZ\[W)`QeW-(X-S^l>?X0ClR9C?A:0V%[^$Qb&W+i.5&Qtt#A7@'cq^mq6$f]*ZPqMtKn&i$WI!oVc%ETc].3\FC0[W9'hrN0>6\ls9T5>Or(>P]"B>B=;PEHUl78EY3!e18CWp!(jH$T.%s`D7G9)/l.U<Y&+LgoC9Rl`cjC\A!Du/7%)u%_Dg!"dmb+9G*g:GI`&hci0fdllcm=RK]aDG,Nm;;*;cVYj4H*GM;:Qam00$SM\OHC)uX#K_EX.t]C2DbKe.SQS1Br5,6spu<>LKc%l(@PEmbXPH2#$O182ERC1@c[!=5aZ*jTgR!Du@GWr8>]"nHV)M6+cV=eY5ZsG.,./^Yj?&L0`*>ZGOXTnq2.]arb0arJ'V*ba&;W%@7K'Y0'h0X+0/q0OP@=qJ/sG7Q(D3Y=)t=(6a?bbO%Y^gVgHT\p4!jV3]]FJiZ`Ul4Sj?#BTLtN'n''?kD_r+d9P$W09Eh5h-+D;%S"ZBs]8-7`eP]4FBr/9d=^6m!mHDi1m4%Y=n6qSX[N!N!,L&,):1q>GVaMbe5,7P8=!P(b\`(s0h.5#rp/2K9XipC&6N2"Koqh.d%+11VUq;sP:"'=6k?[+%bBC6;;bhGj_oui%A6lc$Em;:&KYktVZ97.^YO:Z'>&F>>a!=4?haLB=AeM@,YfRLV#^2;cl]3oMo[E"oI%4oA$HEPHf*_7L"BQLXa&>!=U%o/a:SU)nF=n0<TJ5>T!nAd[k290OjEVre^oE4O(3]Gk[cgmPf,YPRBm)><+(3$;_^h/Y5O=dr]B%DpDXSf1O&T^80SURpU7Y90QrNb6-JWROj`;q]&E<EgOg`cJg8-rZZncFSFX7$q"pa@L:L.W3Pd)FrSEXl0cOAg?+BW5IaRfII;^=%5FD+X9<QKnd$?2C-a!3mp%Hf4G,EZ<UC"$Xm?3XG#h#%<l\=TDct.WjTlV9NoVpi]q-50iD#<?$%DL/fCp#sE3_Od+REp%LDkGo>%erXk"`6I[)Nj9jZOho/aLl5L,F(Gr_ME`&Q!1.r65+jj;'S'c"0*`G6ZFIg%SYn$W(Nsl6"g\>m,jjTn.g6t,RUm!>k$cU%\%8@l%?b"NO>&M%HW@eq6D+aB=(02,'RlWpZC1AopR'-b1m/o>UaeM%bir3+S6%r'50""KNF3'a)=^PS(4'ol($[o_uc%'3?nM7(mVnE0"%k:uh;YBCTD_TQT+7MX\'R=lN9Hg8Z;%Mn-h53bASK0pZa)X>/Tc,El48nF%Ogsk=fFpgLB;bL<iR/G10*Nu9)Y+G>bbIP0ieDd[2%=a57a>0cFQn52n3*Sp(Z17c]gC+8g2#@_[!KUC%lO<.V5"N*mY$Re0&^U^td$@@c@8sPakk>q19pTep!GBTIj=T($_gq1&hoB/@0%;eXOBZWu.tL!,eZ8@Oo_WsPTU(mPm%jk1-Dn)ett[G/5D5;2D!k>0sd%eCK*A#B%u=8*,M?JX,k>Z%JtRml8fqV<uO*OOh\aej9F%'=[+2`S\#hknUm.HpnKoHhK<5=lbAC2`h<*\`'1NJJ>q@n/OI;J0+#qe:b*89INjq1QJ2OMp:XQe#gYY\m.):QQ]IjCOU5XWgWMf%Y$67"?J&G0pinE'cX&Ydhs8P=(eb_sfCPP40o4rkUl9.q4ti/s,$3i%(ZZ[T!LrsnoUq06ZZL=OZ-q)OLM'gAV-8<EF+4*iC%o!;%DLL\hq;U74]j!*Ie877915^4MGgC\H<6f'7h>Gl,4WVX]V"qq(]t*]l9O]o/AlHFCpJ;;hOuuFe4UmH*B_XKLpe?gunBKLC=kP]7%^6e^Q;rjosPT!hpRpJ`>ICB_QN?5s$q#EQ[mXXjj:G$.dOJZ=9?:le2b>3t:.T:7.jkBY*!,jAaHkV=)n]^3P*:1D5Nd<q@?lqn`%>h)[>?QH6:Q(NC>WR?]Ine$5QO/ud,)EbHGA*<PR2E5Sq6."PuGisk#8f$9ql2H)Ij*#H.RuoJ<RNX&0O$).UN\r(lj/Vbh8f`1L%6X0*>D)h7b-h"F$@`??$/nVKjcH"S=*i?KhK>jSI&[^r9&ShknF.X0T**Hdo(pa%drn9&PKhUVsi(Qi,kfO0[Z*9d!1c0?e4jG^g%Q*'u=YN'YCF4&dh0==jCcoeN+LaI!ma'6;3g8h'qj6MQTG^Z#0r_uWg[W7qqbkB5bG$]?ic&K"jF&jkTmSE;Srk*/#-.:ONUN<9V%D(b2Mia_=/Y8f_A.uU/9lkDNDR@Wc3(@-/dq2;<>c>(VkI%o2i54%aoZbo\;17'TK<Mr%EBj+CVUg&l`n.7E51KO64Xc?WWbRF%e%^)s!Q&G$9*&(m:8p19=Id64@>QAn`*[8tL`f<17.r7lWu[oW5fcf4aS\5KLD1!k8>UrRWuA*A!H=!<ms*lW.5n*0S8GN\J"r/Stf%a]bsC4Jgk_h)8U4W%A\Q+/3OGUkbQi%'O%<adG,ghEIdEP'"Y:bh(g@*?W,l+T"J3i76_G*<Sj.#?qpjaQG`+B^9;[UBY-LHk_0.%iJ@.OQre1>gFJ>_7kQP<ee\*agI?p,qAB6;>?gNt+UbSsL^_W*iE!+jH'$o@0=/aT>b.X^8pP!V<EptJ="WMUYqPV^!44%;iJp!*%or6]Up1:n*'5;6n>psN=c8?]$=aR:jD-D@BombT-%'j\[+7)6n&(+XX@G3NO?qap6dc?$88?!ubbKXUr&J5lt[eeO,RGpSRB4q/V%BbgRc2]US==?Sg-$\_YOL:"/%Mg-F/_(\u)c.#OLhrc3nY!dT7iAG(c6hK"J1)ABp#T4!g?=W3(+bnU)K.B:.Jqhm5K8](<]9W,O%H+0F*(RL"l)MIaC;i>kk>H,Sr;,/]+=81\:>\`N`cQbjINa^aS'nUc[WQ`P(#8U92:_)$=>2FIA7IY5YTg.tqU"SabU[:@m9d2ab%35qg.Oo^Ikd;aUd#I%Mpl:c?=3V#St'L<0u]cS+"SBN5_jt@s5,)<1I?jq5>YeTO#NuT5\9&a8+*p1XADE0F^p)6)Zp]k<5!Rmsa%T_K?B;Y.Mq`Q+G7:AJAJ\A;+,Z9._hLX&nOAh%=5m,2kI2d`M]mPAjBN7\fR\5p)AM$FEdP#ZfQbZWK,>-IF(5LuQO)pRMQH4KE&%1V^*]04rO=T?@St2EJ4'Z$EeIOMA='o+Z83KYNeE;s<!$&rFY#6-sl)7eZF`H-;PH58t!lI&$6[`otG"&>$j]2mrY+G#D>SZU*k^%gh?0fFZf)8]H?:.m!'sGndfn+mWPffs(KI5DMPi?rm?a=X$$Dua5_%ZBoR%uNYc4*TBpgXmBDB,+74=.m1=i@=N=@\^:1Z:gHR"X%^lod<I.'8cfp8f&OBRb9Lm$JX?i+p]]Y!g\rmMea3tp;mBl)fFf?[)ijqtkXb#MkC\or$E/?)[[GW"PdbV4/8g\Np>-sk>N'L/e!%hi\L2H`-7(/\nU?qX#)kSR-X1oV&VC><*ZcCUVB7'`-\"5]KOqcpT.t'>4.#m.`.scY8fND&^n5k1-$#G6R%-NCjP[HnS=[kL:\l%r"Y\dX*kX,BJ[BYLgT/JY][WU_.%s:i4X?4/TJBu_OD^R1f&nplIVHeVB7^n<u[LH5j/nE\Fj0O1b\^e-Ip8(aEIF*p?fOM.R3'&%B?hRJb*9.548Z]p.GJ;Oqaj)M.De]PHU#]n'u&8@SJK]\^>jRAZkd/gQ7am8]p<tQ9JCL=#scb5FCHo;,)<CqfKJCKGRuDk[B0A_%T5Z.PY*iH#AV+<@^@c8jT!G#pH/`8K8sf"$U=H.%/fD_539[J;AUcd_^fdo=R%=(pl&u3)?G-"pYuB#*&DJS)PR6').a,Z_a\eEF%bRseGW7KgT8U#2<`^V,n,!lkD!M3B8.*,CT_k?KD^mBCm`rkRm\0D('+EeNUVa4KZRZg0\Uh5]eVuqc3k#e]sJC_i&8-@9;F8Cjm%R2\YpU88KBC`nU\=Y<'2GN@DJa6UfO/k85O9BBh*AmUcr)+@eeR)`+H3#7N@VSS<[87d$iDQ\@FU%\kNKsVqU,aY83p:QJZe<\KY%#cWd@!ui+gm.[43EiJC@cX6LMED:A^N"A1LI'Lq1]m]O<M^`-JXieT/Hlup]-phGqY+0-8)&mG2BB!Yi+_1I!,T.Q#)7#3\fShL%%$`&?pR%K6Q(-+6RI/$-Ed(3"Z":IE<-X#N?S6->#)4(QB7:(eDqk@edV34D<J45L^N<NaQUD9+kD+PLg@8r/DVd-Vo[2ba+nV\19%Cj;*'o$#1CHKF=&QEkSc@X2AED0>+AI037tBpKhd,/LlR&LiKb_P&RQo\5uVA2`km]a;3ghfI[/j5"":5?I!`/)4F-57\3\iqMP,%O(C39.6Jp>;9g!4YVY8>VB;P-jO*guoLR+EgF+V2#BIi=`a2D&ct?D:oB_#]gPEd"GLdQ5<9E"3@7bbfe\&5T"`[j6lJVbV[)"a%%o7Ku%i'<YuFa*EcV@UF4)CV&2j2@kIpI0m!r)t<9\$m6%L%aHQ;2aKo]e-G*jQfkW7oIjGbrt9p?RgKaf-NlopQ)IOj0VLi#aTQo%bkRJ5k^s6lMcIr:DQWK&^tElUqnA.VIJ\Fp4P3;tMgRK>`'"E7i_6"^/[JYfP@@.Zj8!i-cDfJTH`&[-S]<hT4b*Ge;_Qs,:Eb)P%6:EZLZS&Z+T;O9,Gl"3l+hfY+7M[q"T#5nL,Z$#j._naF3lgfRY7^3S`sd>oq)K__2,<^W_)Ip71C/ldlBd3RhGK6XDe3>V?&kcS%h'r8kPQVE(Q14_!4'g-[dp@p(1NY<ur\8\-VBmn91sXRH,rbG&[AmKV/5"ZZ?KUKL\"l=LK="&eUUFSpAjrQmCutlQqM7=QY@3mu%W:Fkq>jgh3!14?`c*-]]eSQIl/hT2QEk-:6jbR53HF:15LW0Tqp:k:hA,/,P'N8RX+$269X9d6=BHUl[)*lG6(S9cbhL@cj]7]^n%8bsZ:_Wo5V5<#O0=df;%C1_6!8&[_"h4_Z-72+'aV`%PM8135?n)3>`gAQKSHLN^-*^FU'aHJif*-C,T+t*/JVQM02KX2iLW'ihb%kB:@8=nZHl.l_/R1)?o7Yo)_ePmhd/&O)ojEQ:o_mrg>H*Ahfn:DRpc3D"^J2aF&VB;nX\m-u&iXkYp6Y\K=9+A!]2irqWXs(<Qb%4-#SJ9ZKojc@-\>c:Or5?>h0W'!$joISWrsS(1QM;la3RrnAs3hL<1Rc!GE:REM3=p@]K4=F4g`CIrmsR/(2a0aqNaBY[A,TYn)X%JEVOCDg1AcGPZ-h;Z*ZPDYSD`AG"]#S4ADUW5XbB23KW"oMPX=D#r>>im5b-A-<WGbK>qO<\a+A,q1<jB78U</\dNSp9h&&jmbdK%qe`FLk*OfBqca;CGJi*>]?Z^HGK*X^o5LTAn&i*Ujn8QJ)\0X%c6sFJI)s@GHW$PL+`Z"^[U)6mMlE,=P9Y?J#dt9@+ca[i#kVM'%as13eT'ek6ch[UsJUa:RJ;56m+"OnN/V6!F`^a[g`9u)0:7GQ$8ecB6"2j"^]&X!:mHI3&*8n&Lo0%_T?E3)!#'+7il+NZM3r]?+%FKm56"$@0K1C7q0"_1k@/TR<Y^ncI//6Q?.^RIb=)OlEe@e?`CAbM[%Y-Wa#W3*Va7<,NBSmmI9go0!Act%?unN9OblaC7n#;f!2%om/r"A=sP,f?5-qTHa,VUStAOHPuJC?DZfMoh!nWpGCB$Y8*UVWu;fYmFommATDSh*$'c_hW3n4TD&]ip7t<os/O=\*cA2,)QLAj%G/I6NIjX>T]Gu?tRBuBo`B"p4r6q=^1<ega%s!Vp3#/34PNA(D;,QR@.I)r)235IO<;*FD%[M@7\c'3+#!L+%VT8%/Pnu1pX7k*7%e5?&'..,/)>(rQP6s"`Dfa/4/JeVG;i<P+b>nD'-ZRsEM?#P4"D<6'O`C8B8f%AA.m7htE"&A#F&(W\Y`Wa"dJk9"IS!"W);&S4b%JZD_)F]=*>;m8\3dSUn=9d*/Z_`93a\gcW(b+M[rA<44gj@m>;loBZ5bI@E3=^K+pWBu&k0>Llhf'i[*O\m[[90NK:Kpg2K[+%)(%hWjZP)2:m\D/AXEV8h)<DlL!'<A'3S.(`)gb09Ymgt\F^3J.)ihhF_J5M9c/XsHap4fg:%Z`EgMlM0?OS>8Hr4N&p53$_.)O54Fh%M`B1hcTMfrBd@BAT]mG7&7&M9Ve3&H@YG1jPTK?%(\5WCQMD;cj"0f<("Z1;$5["C%9hd!>2bX2AVLIY8O9"<M$`nsrKT)<YIlV;%'^htsCo%eB,I7Al9aD,_*Wm`?bXbF[/:=qfA\RtLBDCRpH)Z2H'q&<cQ-McYC:Q8Z06%T-cj#;(,_F77f^^gBMM8Ps?r&3_`Ss]=%+om0r1e&H(XVo;LYqfulB!UGT,Nkg&D_)g0)+k=2nfdM!?"VUF;0WX'AV.o[k#gEd]sKJfH4ZQcQH%H/91pE6f!W$B0p\+m;2!:=%,J])_/S/Ga7aumC-,3:PBV8j"Z5Le]@j:u).W$Voi'bN9=OJ#fCK_.LmaTNJ_8ih9Jg`Y.e5oF[amte\_3g-*+@3+B16u,_P;0U%%!Ei92)2f-V>T<bNV1ET%J;=VOL(_a'[S8*K)<5J&S/*SaECYCO+&'R)lM^CN_BM:nfe@OZ$>j%MUFf%Q3Lkst)T%3N7t\%eIO_X5%8q\NO2i7/tMG"m`lc9hZ:UAH%Co^4'o*bAL]KGT;\Xk1t!\lhh4ftg5ak'+d8S=q[T?Gs[DKQ8Xj2@7N*kNM=^.;jVqW?lR54NZR%`H.p>n/X=[^d9gNjTcR\T/;.MB"m?hA%+qQGh$HXem<=N"6R[#>OQqD.MM)/K2?kj8Fo2L&*-)YQS)9eaQe>`.K\3N]W_@$k.0KB%jdEdmIP>Pl:14[2q"_28o(fP(d_sb/NofkBGM4PS3P^n5(`b,;?#S=UKPin!d9?59.Eul4=sQOCgF>bbY@[,Vc]J&7"O#6D6)suf%IR,RDd&V)s-Q#+r^>7VGlkJ(B+qG<L3OtH\<]FSAZ8!,fYdX0V61kC.piQEX2p.:!?'G`:W5q'4F48sQ`QQel[;fn#kO$=T4C)@-%4&<-Vhn=hN]a4/V1-a;bEI@6JP.Zgb]+/?N3_PeNn+K:K"&:s6l*n[/7_eoW5EQT^8t!gXrMI8tJA@rcLM5"X>Cc5rM`6u;c](;4%]W_&,F%1/aA8\oah8uqGQdt@CrkOW@DA@#6\P<m8,`db(=a!0)msr`kDhV4fs6T:6cXVuonlbA.TW8A1/MQFu@YHIV53fN9eQ:U'%bt6mRZ!;*=^#dQm*p-(ub?NT":QLsYo2GIR`?\2T%6Zojk/\2t5rJ<4<,o;1"AVc&4[1fdT&9pTU$&>jZ9LQ>[Io#-'!%tf4]Qn_%266<=?m;.2ORlZEV[WgRkO$uM]m3`U]@KQP8b/L*re"#$9raYGe4^PS0EHLpR[D-,PA2FiL`E>U>e\Z;f&(fH<jU6M41PEcS"mmE%]jc".8]j5lZE))m7#gbr8u"lo=He,%'L!n/A01]!o:Nr3qK%frP2sC(KL,u2&-#*`p<f3k#kXabW[*XgpQ%qP$87ts<85QaQD,^K%?-Sh@l6O+WL1Y'M9@3n/:r#cLbdsrl,8bos_\rRN%MQSjhl*ieKT^Ht,H53jbJg7t,W%oWMC;EM4.;T8:B8Nj"EUo,XZ/o.5SspM%JuTiEh9hC?WFfGl+<Vo0\;91VXeBB`r;a10Q=;*Kh8njg-:W.5XK%_fEK6W5'S=S0Z^,2L%1UjjlaUf7O];u?<6WUUMLi%C#b-AV%)k*'mD=eBI#bC4SEit^N%9#bN9gRto(R7qTXR>?hL*:r)$K]L5Af(Z*n@:$5Za5C_\esRA2+:%56^9YaiWOk4C=ZF.-td*+"';07%=\U]GR$1N-N"%qWFjiXQN3$eu-AE[[L(2*5%gc#g%:M&0;GKM?`\<&Uoa2CS9\[?*K[+b7R%?0KXVsN]?8*'>CH+3VTl,%(Z\GJk%*M(ObgfAPs9[,&eAn)BeNFlk6Qu4mZ(ugQniaRY!9,S#'@6l@+<WYUt9LKe`Ecf_2"!Ouj;@H+tDQ/2Kfaa66I:G8SL4fZ8&B\^q%JX^3hW&4o2B:'/5=]nhV823Q\E##7>7D2BPfrBd6[BQ_u3KRZ3">gL[1COMTF&Ch(Qj*C8j\3S.CpFU9bCXb\<],!SIN.7`rLcCh%0a(p+>TK0Z2,hCH)jaAANP'q_;,qF;`,HGr`6klJVVu!A7[f/<"-R1((UFOu/WL:g")UB<lmTB7+Pindb1S];;C'AAAWh'lD@mcq%VJWBDPcO#DPYED18m.U@Yp&Wl>q@*hZrB/rFQa7S-07f)1XIX%.7^18=)9_M5`SYq,j-"t&0!;S'bGONA99(\WbL\,R#V@XL*:B!%M2UVuARH(dAt&oB&lBI_&3@iYj\U0[=(*5`+A&N%C:O%E1_smY+OCuU!SLU4P\aSuZ0A<F3N-[tc87+HSZ\[FVI=TA-c0D/"I2EE%W?Y*&%[\4]0=XYt1_+?V,abf"5VN:KE^5@U3@sIr6g.d5TX.@`Pd?K]ZRo(8BJUY<"\6O0A=tT#Gj$ImFtbtNS8G8/L*!,IUmu#N%(l%OJ.`#c.Ug>kn*(q[S&:(cl$fSE$;TupCU8+E4oK,?oaMb8c#b?nN`Z^KG0Ghim%88O>OB<?S<47?>*u-U%^dm%`8=SA0R&/^j%CnrEfKiEt"!U^1L+C%hkkZ!8C((CPN:SF:e3=^ceI'uN6W<VSr1a3@K+SZA)OGlY^M\)%l%Zs.9,##s$ps9OFZAY]kE&gY#E?/^d%R$se6Ed1--W`4),T[QTj^bCGeE(P,5$t/tT>)CE_(3p^i")3C.BV[u&G`:Z$9I/s77Yf!:l08DBB&YO]W5&h*TL/cH?:?2G"mlZY%1u)f"L,99L$<Ec!d]uD1M27nB!M+3?Xp&9mJ_c1c@AXKE_JC$.7P`F4-CJQc7*W(D7a8:KU1RS`0f(D6W1!@pR$j7Ke4`Lh@A[TQ%2:ET`1Xe+<RV<YZc*RnSG1m%.L0B=/6S63cTpB-*:jYIO:s1P)W!.trC)P#"[00rn>)"b!/O8)hb:mh6,oAGg15q];!TU%\L2g-D%_3h?j@GFlk(q8$NN8&(R`b`$kj0i.,R&uZ?gfR3'g\[0RCB7qb=pAtV/]"s%Q=/KM$^`X!&r`;q$-(5t"QSX5_^':T_77%A@,,']%0Q+)u9GhRP`XK9YiW`V=EJ#iN_I-"jB!<Qm2qSb%)f,Ng#$Z\!X"D/tfp6%$C^ZUagCfI7D$e5,[KPW&>JPpFQ=/Ka9/(7l,oASq%!liKn"QF#tJoS+K_78/60Q+<F&3&>VN14Yj`m(rB$*u5"\Cm0Ugh]V;DRK^BQu*/Lc*dc8At-[`].Lk/h3MI(DG)[$[fq`FD$e/J%[KPW6>Cpk,/R[@O9-A,]3UC"Bqu<kDofj)@M.YaK_G/<gOuLuj=@,`2##ZS[d"ECW.4g@,@gEbbnj.6M5f4(LE814D'9:-Jp$p&O%cpYsJJVT%>o5_)bo7SssZ(*1j&dpptj<=1*U't4!LXH-U@E9A>!X94fL*2*Qh@gg/a=fu>$Ve*Q%6<\`'!/PF^eBs/YgWUa>6.,7%Bh2e@!"pSs4NUe1KN`p4Og#t[&Ng8s/u2BMA-^s(&k0lF>)Jf6W&>b0U*c_F;90\gOC;n(>foBVdrK"n-;s'K:4)7^OfG[.R4@ht%0kA-]5\_9oE=QqUS4U@SM3XSZc>ZOge1'7W.jW8.7Z)5aU</m>QrGgl1ti*A@oQ,gM.N%WK)?W&6a.H%PaI2[>Mqh<!PPWFOX(C1%9=cW@4>#_M<AjEEKZQVg3O0DuI;!M-/$.is.K_$'<`5Y3)*BU=SrUc$+qV>bW8:F<Ju7oJ-6&)FC#8\_ZV2iuPUZoPBZH8bQQVID%;AeQua2C!Wl]_+cWT%1GPk1L:pE0%o_Bg,.7H'P*$;#hhKiF(3*c\H<WAS!_;Eb_P/"`2.%)<KN"Unk\'I/mUDq^($@#&&*35bgF%d5WsM628\/L0:\<@.@'UF-)&9YlP)cM16F%H&feLDjW"UEJYmd*Fss`GhK>q%'_?&"-EDV'8ZeX!O!Yo8D(3F.**RNV(@N)d$2\g%!#p]!60KFt7UC-mqO2,dU_L>J!3k-l%,c[57GkDm84U!pSY1-?U4n\)VIGAG;KZloFH4"G:aKSEGn=\XNSEa6q`8>Fj(OI'&<9l$%mW_ABA?[0^Ee#hHbtQ5eZ##]06mlGp8T8NS*!c]g;E.@,Hd*mI70fM<,Qu174rNTTgS"CB1QhksQ5l92RjtPt+TU#09"&0^UlZ'1%.l@I,Y-(-\CUpHq&2*4UC!*83G7f!59`dR*'uqF[J7jaX=A3kU43Cl2_kk^*LMC@15\(/K1-4er#tB7]5p50GKgNhnM=`:mcN)?E%.QXLldie,<?3CP&he6+E?-@0mSZ5,$T;L>LIBJ:/,B8H0(hoU:[(QKX23ns?+07m_`YK;B#0)O1)+4gJ7jZ=0J1,XALrQI`#=fh3%4"T&^!>tBK9``^bKnKfCh#n!1;6m>)Et(LB_%=O-CHTg99+\8t,oAB4&gHTU8C__;5pD24(_YfW$^$muI2*3u5FSLkV3'')\gh3A%AK#K00Zjtn&lI"(Ulbf9![&C/@#P6j&RuKX:%2&B`&KBjB"cXEGKa!JSo@I/@)un7":R!<Xt!*l!%c[-A]'B3d9Th@?\%@;isHGO%6)8Zs0Pp/'9[kAMlJmnW+GtI]'&D%>nT68R;`#IGY]Oe41tHLM'+u/4E]ga\%-a'O'7q'iiCJ(6&2(7.`crU[0g>-m,\D(c36O><%]N>#Z-[R:5=3I`MrYa<HM0q83(I5rM2Zj#<l\@mBHQGA!d_M?]>`Dnrc,FTGXf>J9lqiGQ8ukBjHH=9NoFMk<:Z@[rGCs;YHU4H0%L)C8ZhU=b1oFMiP,i*urEdt]/2Mt!U7nToU(Im>7BR(N5M?SOoRtjC:0QW-tVQ%bF:5%:tZAS$AM?=t4.1t8<!GpA,4Z^\NHJ4MS%('8/1[QI6m$&BEK!_1]ca28UjW(a-o:(^FHJnV$i7FQp18+Qu;G3)&4M+So-o3Mc4[GcD7DFl\<TVYXe:b;[AB`c9k+:p7SM<Y3k%"]:69S8Qn&IJq0N]6GNa4+aFAm2Mch!27\c8uubM,%+;K_\<^pii&lQ[/_DM2>U6d1'8*L-kJ'9.]O(q<Y3/jYooFuCUlBl<_"ja%Q9ZPqLs=@)(*L1Tk7+LRO<*(6-))B53:VT>)8[\b_cZL6-H7-)TAZH:MY!8KcF_!OBp)N[iGV:N9<af[4YE$S:!_!T.U.MDeG4*h%6th):,f:rP4?<m%i"?H19k[ch0[-t!.cRHqb^eq]FKF/;Y%VLU-Z#I7%DR[`08>lIZ0]Ck^cY48ZKi]t"U&.!b1ifDnPZCTd->"]%743.U)Of%C"B<F*)`j<aFIW%`VI@hcKL6t:FHUBiLS1pH%$OF2*/,jnL!E84N=*@nkgUEtB_0S9:_XOG_@oU:3Rq$73]&H_eIW;/%(!LKn'PstY<.Q#3Gg->SK\D(9ZcP6lI]/`h(;/6*o3QVdJ4WcDa]f0a-l0XtOKPAT`cVPO/S"u5IAT>*1MCW!YbFeI5&Q[dlEW^k%*&;V;/qn6oVC=%t7]AA5C_>U+U):&;#W`T)UqVOOO8rO>82-Ot&dW=#q*'d=^d9Ib'&:C#3ZGLi@@:1*(;/+q^TY8fDfo;PRf=#'%.&LRtV',VI;M_1]#K/lE_%=lQbd;=ZdV1^ZK40oL#G+Q^%msr[,X.tu1E?i6:tX\k`<X:7kA?!q!F@i3UI1g8)8fnMf'#45c'_.9%=Cb7%L02qJ:l$A]&rbRhMMW5QWB+/R5uT-\%Q4]@>:+@i.,i[sGf5DA,$_P8BQ>Oc?8s:m4d+29eVAD<R]9$rC8bX`KF7cu*<U9s%E&=(Z]J@;r:(_+uVcr@"Dq>^dmNV;2UZo]aV=(&f;]Ar'@cRNo*ClQhK$@`<+a%f*Ut_%[K^Fq78FE2T&L0i^kV2%AfKeM?M:!dY%@UiRQc,VtcR\Us/fUq-M+ilhdL?(!sMdq)37GK4:.o\UG**uPimD&acG2P'o!DW+p$("&&JsCp9`c".&l]]&S'>p)"i=7*J$sRll%0h+m/S)QE"@F5o7EHQ5?>BUjg23`[nr3rTS[M0"/E)?:&WeifW&j=apPA')g;!Lq:;Xq+unelR4=4\H!&V?CQCO)o^$*r1h_*fFP%=7:f])8a?m&IP-a5[\%P'(lQ#$E=rT3T3ksGl(5/);-4Im-P*]>b<_tQ;F39Q'K$G!K68"`l*IW7Zcgf@LTQ=)*;$['n+1X)llQC%iB]2S![LO.%GKO1?9^P=]n9^]k)`p"@.,d7%&-[_^Z,@s=C<sr#eUBMN-#7i93H(9F%d?*s&+7\fn(>D"YjBl+bXn:D&mn]_h]0H%L`F'#>H/-ArJj<Rj15Gu&kI+#i=i>g&Af1)"0!!r'?A&%.FlIacA7X0MULn\])ib:,-FnMWRHC")X18%F7?VLphd;h<)(`?YhP(Y%ZYm:3%*d-VRE5XBdFm$Ek5[o(72mgDN-8L#qUrmS85QococtI<.X_]njrnIJQ\%U,Bo,4:Y]/dpd]LQ\K.\Le@?(UK%8>5T*NV*%%.1IHCAo8'Q>6=<&ftqHu%"L2ic&d3]_`gp>-S77$iV\F)Qh3Gp-X?.S^QJ9#[tj.eJB6lr+<X5%&sL%A_O_W;-4MG=YVce=#EAS9%6uE/2EKr)6G[MF"Z9mjs[YSW2Z<`gB.P-Q=?_T!JVm0_:^#I-)$E<KI04C>laGWq#flAEJJk_%X9[2lj!p5q,;/!sWl5mM_#]C`=%E?65jA/UO$$.V["Lr;tTK'UQ!2s;/$lP';Kj,Se+26=8"@pq,K7R3=K2?fJ.6F_QD[+L48H(,h>HGatt+/VA'Bld80Q6DhhEu:8k%#nc"m/QHEr7'p`Gl2iqU1ml-/+DuedV9G:AHRi&k.>SNc*_`M4%Lm>+)K@+nh?o/R"^W)Q^88nm9*!g.%c]*JGW;$@Z2DXfBsH>A%kIALDIF0L8Nq5:0&6dTnYL=#e0G<#J%]7;(LS1ecH/c_&hE=VB`4d@MXdcW:0-J,c&hrT3$Ui4N(=`^5guIf1EnT@aNKT#EnfSrA%G5#D]]P5OV5/]*G<(U&C?o7Mn#dPVfUC37\Dp^*G@Vlo`(k4qZJr>4)`bRjtmg=Q"nKBBR#[\[eDn1bG\0HsD/d7"2U7&H&[0fjl%O9Q7\('$1q6sO"-OBO5$`+e@9QsVGF'&L)?M#$7dBK#MD%V5_VU9V/oH:qDP+aa(l_Gp`>&&DN*Pp4-h@>\Vh&Rl8=&lf9K/.e0c%QUH7RQ%CL*E'ZMMPeO;ah#75#T:W`h1#;f<=Miklrgfon1+]<7*u@R0'cQ)*/r`\P+2+O%;Gc:JL/Fh3?+6]i:j5[N.7=f-DJZ$8%C-$@QkXqCs,EHRV9WH\Yo@+m"=\&*@"$hirQGND?daA?N(m^tW^G*m/+Zp/gE9'cZG%grp<,Bl%8:]+?.b-icE=H.#<"akB^'#Z1%:I7I7U/W.7SJ"e!_$[cQ%[J$R2)U[)k(M,[0RpA[)%h'6V<TUpKHLk<Z!]YgRffJ+=X#%c=hkVh2Y$&XAoaV*b;nOo>ProiPdU.:%.r0C%"t_84@l-kNN")k9>gGSC9SmOUq[YAKeYLQN"Hck?_6Dd[0N$XSe]0PG6l"7Y''3(/HTII-Ck.q6lZc&_L1SPq>faH1^%ENQ%];d#QKd=j=$iQ<1#pP3XKlJ_a9Uo%o5)Go%.aE033U[i8s*=Pm1tO"b`8jdR[&i9.gPZ)A.Y^'%5nbc+GM)2BLSr;4(-se5Q%uJl%M"V2n'n:djN=\sX(e90+2VJ;mCda0CM/eF^MsHc$\-5f@.Ai%q'gYo-+#9UO,*,q6XQd/MD?W:?*J\VUE($3l]K1n=S1)[(:,q\Y%J+)oI/"VQ:X(uMea.reklAduE&]D+7n$iNn**XJn!)Y:]Dik0b=t[XIoF"?/KS]KC3"f2qd3^8S,?!r32Js+cmQ]g0oW5()QAeD]%l7-r;H$q_FrfO/-=bqr6/jXaZF:f+[>i:u/Vg*V&5<2`6l^HHd97+\9J+=@*=+^[*5bOi#,2%k6U=kid%3(!AatP)nY_SHRo&3%"%5aVldQmr95Br)jVP2G>b:fnrm3pImHSKTWVR<=nHWj)D<ik7MUdpU^'Fij&qS43e]TE1cQTGeq`-`%.^G-Vu#12q6g&^pM`Dmdd^%E$0Z?2@gqKWFZWc%?3Cb*+ZSoagp>cCe.^:Bl,cbZ%6:B*.hl+#lk5W>/_a2.DYgq=ORTXbroSl6Nqb)GeU4>38!c_"_e<(S,n_?%YfW'E)?bffLC,1ZfEh\f.@<"AmZIe<.KQc%8'jjJNBo6e6Z*N%FP)Q\SW)%e!FjgC2gNSh5rFKS0%hid!6AdR!7$2HH++n\fcp*V%L5cQPnV3Q-8EYZ'ie'QOI5"V.#mgfb%B?^rOPYY-'.1OaYp5(%R\Y6MZcs\A+Z*j>K0bG;\&0s,-G411[h[6R)2,@4&ZEjKCsm=5%5)8VG>[\/(crV2&K@ZD\irR(q*R\C9QA?dl@_,12P[LX$>M:eY,%J3b&>::^6m/RU%@%2C??ud03E1HE4=sK&'G/Ids4uA9lr]Ed%eM!kNW(BW9\1%9`LJYQQTHf!j#\L$cPT$@!DUa(<ipV`sYeuTKW[_FX\]Wl@Df=D-mDsq2Lpp#nH#JCI@Pp4.hk5[tSL+cAG5pW7%_'q>;_T&MCM;c0sc-/AQ&rM]+I9NTQ&NNJT<Wa]pPgdusA7>S$:_)s?+>:Tg*=N,P(-.0V8duF<b2In=['^;;M7LZcakduY]]pX@%3(DA-S61o6@%VNX%VnA0(^;ICXoS/7_VC8L+#[pVRXcZq5(Pum_>4VmQd7>o(!H3CO_)k-RP;(K_kAmc#d?C^8.#bdnZnSnJR[PG%'0WABaKB#j&<12QH%p*SUiLCMeH*O+&?OfP_hI<d=G";_p9>C)#\e&9!!"J3di3bP@@<-:O+<qIoa=^;%u(O%>uA'68-H*r)%=AB%RWA0p(^CVC=A;Z2dMeWHn"K1`4HG".`gmNWGTX+mp"VBpOE#Q>O:/s2YV\,7TVM[(N;50!#;p+@ou'BF9VBSYrTV3'>oYX`-I3e[%;0MNMJqe-CLQb;SSA_@71QS0HPWoD,9!TDpnk7#FG[87q_eUDBAbW%7Q67P"<@#D#kjNQO29Mb25#11*4)j=nd6K],4$kI`V[j_i%d@e??ob=rm16G"hBo9W<ElrW+UGnXW3^)atP@@nP2;;i1gM'Q%!o@-1C>bfm]P^ZTQo)o4/S!UNP0`GH\"+ibZ=pPJMZRU!7;nmu%CmeWo_tN]aPRQ#ig-?[IGE5LgF,%SVcT5o>E$iR&ZpBFNN;EfGhGA%_D$I<7(m$0?eCq-gBsZ,IKLtF?>.cm@o+&$iY(IfTe!jhM%G8+d`N7?!m8:9*pJEr=Xg;$g_M\m+YOD<[>b_QAa7$PHDh`PTL4eYeBl0J$IE(ZS])P3ND9M*J75!s^[l+U=i#%.!$j!G;Z9'#G&%cB6Yse5`42+e5!5o^BuT]H^9F>rV,CG:#um($sO3n"=,3]Ds+CkiW!k+,O]-"hB$3E<\hQ,7oB@i$j^bCs9<j#)u^fSicZ\8I?nH%kq%J"e4i$n_0uhV3@-I4i>0R9P2t-q2s?"#Dgf+!+Rq'./PomsUHPmCR_m0>i>>nI4Cpf^&[@r"ktk^)-$W1f*^*kd#\D<6>,`hj%&:,'^Ec546MUB9t#3:%c-^K6tQ6lt5l>^/(5tu*o'VmD+_Y";AP2P2&+uhW]O(4(3*.ell[[-[79N[,=2NOPS%]\Qp&:HKD[>L&.%2/KjuYV15dbhk<qV7a4Xfhif!c=;Mh^g'6T[P4b.dJ<?p^$0KEKtteD`QWZ=6.17pAgac5GY-ZYS/qPZ-PCCNJ(iM[Wsm72p74D2%p4ed@@`q`lKQ-q`EA=th2a`5U4qOnB6d)UOgoj2eMW!0m[EmqP$ql+8#9X3ijD/[TeK6ajjh"9QFl$T>QJ-8T1?]qVd:sD/B#Kqq%5[g/ilbrP?a@5AU7]0q'(7L,(q>L5f!UFI]%G3u7ofKnT_g-/Rht88N4AkU-heS_ZJ,EGfHhhCkOc"LkbC!Z*"$:-mqipo94mprO%rNj@5c'Q99)9-T%p`%opE1gV)!%H-&6B(3OgF!&X5BmXBK2b5>jl0uNJc]t199D0>&Aj8pEo9n7RM.//4`g`>&48E@OEa#R8PtW6%7$q#6H:khD!@8HZ!lR3D+?;,.0e25CL/@NmG7.op21(49arO=0#GO$]f]uH/lr`in:`fNCZa1S`Z-O[\A<="qI3h$e[@m]M+/,J5%(6kNrqLu-O-SBr9?,2JncQ^?''1"lGJ0V""8%S.#'h,;Ojdm,)81IKg7$'"I]*A=r!Wn'O"5rQj632dk[Ws!)kI_Kg=k5KuLhRRg%hIob%jZ8<])RIN;P[+fY'qIl/,ccQEH"g`2[;:?5WQO[kf=E2D6L2elJ+efSN'K_#]V^>b)UD>o,A#BOo\;:A;HEF6ao8F_8PuCA%U!_*.ZkQ*R`lXq:6RGC1890A8/o^lm`s@4c0lK!-O1`(%P!dd!E*++r&gm=^@nbR'gqRtMkM-!5&XMB];5>8r^\C/8`fRnN@^72.%-"4b%N867>ecFHrXbte(e?3N7;$3ns_H'8kRQCRRVpu)\hDH\!1:(%$8:TJ@M5=+E$Sp(RhGs=saq+mF\a&0BBBb$nH>c-M,P7D=%WQu7]8!_6m[8a/NM`F-i$DXV?r:iNji'hZOAFVtdb'q$Q/ig+L,+;^Vn^]0C:1iCZF`m,Y.m!`0rmQ^(GRFQt9$Ojs[^dRER2g;s%moV]ZCc0O@m3CliPAD$_PPCWB*:hS-cb_saLNHFF"VSsk(F"a$EGpQbI'/VE<K$$&j(DX%Z9,c.0%cCfEt!TKPN4dG)\Srckqci@%!ba@s$V*9.-NY/SbXSXf7O^bJ*"T@sOKM;<cRnWsNn\R:KnJm.2em3$M/rdGF@(aoD5LlPU>J(=JXe*4g!7MpHgn&m1oZG7Yt!UD%(i>8s_RM\%NhZ+j)VuKio.!DsF*CH'7WM*J"%=.iOI^u*j:0cZBYu71DET#G1LIm%SjK$%^8k"[3);^I9&g,FeX#Yd6pt#"]Opn=%g+ZT(8L6T>5F7otG7=n5>=7*L^*2810XceAH<Puj^UKDJD<"(W3V$rk?E`5J[(F9(1/s!>(IokHI\HJi]mO1c]tV8"dJ&[\]tJed%W9k1c=_UcW/^tu0DaKKoZ;1C\b_$2PkEnKA+Ol?)8d`Y=bi(MJ/YP^>TS8].P>TJrG[.gp]AZ5_;:G(>mN?&ae'&(pJ/;!!/gU_t%Q$0'7ND'BV[R7ljgrgC+iH%O)$IPPJg0+*1SaqNr[RB).d2^*]@;2m"/7=]U),FLil9AHW@o9'@A<l?E$Dr.o#rt<blCls,`'Q$W%/bVXh@f^#s1.X8ZIA1LZo.AKJ&eRKE'_@F-f[PcZr`hONL;UeoSRS]DCI_Q'"gsp=ja(Vh7T`cM9Z=)g$FO>8is2,tJ9^g+;]3F#%V=2jJ'`:>Rg.^3)PrbX5bC,B_-5O1Um$UOt`YI\mLiR7P;XHea=o@O%%J,1(5J,K%Y]=-Bp33a$CrVX3LY2*$6Kp0R;,N'9IL<?t%/4[Ub"^>$2/%.<.Y;5_7('cp"C+<LH[k-356*/[+agN$p./;P&]d-feg=V5N6sHliID[*f[VbC,WM,Zf]kt"X]Vgc<_A-&6q/XNc%rH+Nk;f/c$D)SBZNJYjF3(,'lW0A0_l&AdcT(X?#$dgPg"tn68<K024h,A?2_#="jc2?1d1.:-,%t$`(4l:i)>J7YH+<T;0HZL/&%2WLae#$rMZ15/lUD^(p6W,T/5Pe)/r3VT.M1gbmhen#Hg^3VTKMB1.3$H@gLVKG&p<0<FlD^kM0NX+!rYtp#`:ls&FUlZ!fq,Y[-%k]78Imlqk2)c3H00qgK&Z^XuaA_6!ri&O3?;jg=#g<$Iq'hLq'_.QES',c>O7]DbZ)nE\cDR/T&mQWT[2I&VlG0sU5?H>%6%5S#s%omrYO1]8db,r=V5[aQ0.DoqmFCoffXlfL-8J2(&"qM5_$RkPWcBfM9eQ&Vk[Z,N]Q!'2VZSd8KgL;^Jc%)Eqq4M/Jj%dBH7=oC)g%7[qp">S-";==g:`;])p)pB/3e<MIW7EOCZ^B4!ef,pKYn*hrUP1L?hCoMiM`Hm.,62TR^73sn"9F:'KoE?jU+KGJJOLQ+LII9Blp%]:5*A:Hlohg5r34O>f0+UnI1_$sC`PM,fIAUY!%Hp^dnT)m#8D_lXb-GXLW3(Y%r37/497e7?JRI]fXpYE&n<A:38=hIK[EVJ!h^%9(^*/>+NN)g3Z.p%JReK-1d8%gGXu=Aln!&7_XtTD&6_$XH"'eP5SfN2:"QC@-+,.Ecfg=0!A@FWKtu%Ce;6f0sUIg.GsRTqc_/8%rM<l6G80N5jm-*m.DtcVkZIFAH%I5?f(Uq=^quIuY]9fa2>T#=jVEc"N*u#_D?CM5Nqm#+5<BKQme1kE:A#o*((@iA3g+VYYh\u8%AaT#tcr:OC=+nB7/i+bh6?j8T*&^Gj7,ps/&mcuomB)7@/0HLc5qsJM-4rN\OMuSaQAP8YTft5]!l(on+qDI7kcr,Vk6idI;k9Kc%fX+F*i;j`;R3c1N4/F-&R,D'<Lm,hDk@mF%jWV$+-%CG=qfQ@+j@#kAS)`?4O'73WF\XPs\1!*]ldW[A8G\?l3APY7%D5P&=hqJ5%)o_qFm"ge%?je\bS,%^C@7\k"Tpcs/.!X%:K<ioP*q`')Aef_T&Q-%K3#F%:\784OI#ncU4-S#!+[s1AN0J$G.WTc*RDQ_n8]Aer%N$RU]rl^:!kGFnGYTre_hWWWE3RDIB+(t&"jH)ju2H'gRU([6q*i"'ACkbUBZ(G-BZ3[Zm41N41Rq!.^FI7W+Y<lnJ&rY<&kPLXj%9\*_XBT.b$^h_>%,!\3S5ALji+b#S3M75-nKJrP\Z_kU."PeB[a5?q.E]*L"Y2DnBFAg_53oEX$r/$e39\R*^+]9hJ-kmbKL9M_G%+7c8\iBei_%jtKj<PUJh-a2H_jBuK=L=rNa[3o1O't%+tpijd!C7JgZZ5f`1[\*pB#Opq8X5&`rV..kVO6m42O`a>Dp_nMG)![["%2K_]AC[C.SJ'3,#YS$1iatL>Hlc:#jC#A)3+1"4[Fpnb'-S9VW2Vn_'k96m(\H82A.tEtO"^5>7Ohk6l7B]L(5?FX[>7g&5-i-]:%<d<Qo]YC=fh$Oj0I?qJ["PUM4"F2njqp,GVJ$qX')djW[6FQ,qQtW]blBe7.TA,/^a0[8/L:pXLp"J6?g%di5!e\Hpk%%2F4[pMX%_t%Z]K2k0=q:XeALQ8LDUfjR*oqn86)mZ?SYWADN=?Rh:a9&Mo&!kEtI2a*S]H"+p(W6F:IGRFEbqeU6Dl%!mX/CVI^N'96BLV;H%W)HMEQ>8VPL"r&=@4&kVBb>+YhF>dJW^ZP;o!L*R=7;P:b83hqMJ[t/_VQliI]&P$MR2(39+ZOG.,N_%\&?s?i,u$WB+604G5+mb%*On(>I>iKq[>uSQ(0+cCn,h)OcdENC[-AAQoIb0;ECZ2K#1[o*9-[(:VX=tJM9V3TcO1;F)7>Wni5@SH&DMou&rIMd0+bks>(]4H%9'-N/I<i,5]!i%9.1tg\67t$0fQWRn$=YUhd>=,<M1GSI5-Yf*Y`RViL9DnNqQOC".?2(-q%Ou^%P:*#RQTag:"R'8p>pT\P$iq+%E6^!2[LX;@#e%Y"#elC7jH".rKb?F:\9aLoM1e<V$!AjoIZ`1+[>BZl!p[*WjNHGC[AF=!'r#MuU_Fu"XB6&M*"uX:/M!=rZ$=&&%?FuFYLM+lIH:O)ogQ!+'jHF/JShKH8A#G8liY6,VdOab(O[jX3Ddj^*@>"qO'TQAKG7:o:s7+4A!$SR]XJT#qBuLNic="95[)s*!%T('<?&BZp-4h$ghE^i9Q8usE;L$6W$Jsa622Fb(Ij]*72WWr=$`'\hRP<IO>mGm+\cW*^[ags>9_8DGsi`Oan,fQ!aNAWas?9W0I%2BV7M,pTIPFsr;!UnTb"/gb3t:og,!S,!=.1YTG=E$Tr6;lPq\At,[Q0`G*J@c:0@6J=Q';8[lV$M5mSQ<lPR8PAH2KPn2+@4m/R%ZO<(EE^c$M]20T1bV\mTL)DC8Q93:le7a(:;`&fA1/Fm8N\);!n2j4AA^&fD*]k,PO8%;A2>6U:5?;r_"EBOMk@&IkmW]l3$H=,K%#.*5a0G5ppo9aoXq:c]pXNSCdVW%[#3-6hsVf3gV,?mDcR!1bHr&cdN2md,[FD*h\6,>=@]_oVRg7[>WUs-9iNR6jSQQS9_P^5Us%iKB1]i.Xi?CQL'em9N'7OZI89h(X/EAYk==bcINbUYqiJ>k8;HWjV.(YW.<Hm@0Nmf.OVB2Zf#62l^(NL%u@L_&?9t[@*p/JnaW]%A@G6,b9P&L1^W?ih.1ab5(0p`MK-;O+Jg-qq`SW?p_5=R)iAn1f=SM/C2Lpa"n1eF+*eXY[Zo_4jtA7=!g]"Mbp$uQqit-$'(6hX%-J!e<BlXfo8fDQABSgaKjc7^6Cu<)XYElfbP^p0@:>a1Pc/"EqUifXb(Pg8B50ZlSW^j[9I&Eeq4WlI]U1u9+E^No:l,2M*p4XB2%RB4Y$6gP\f4u-q,-!f2O0`:<U^;X%6*2V]`o'=6N0*Qj;Qg[S`fCtX0qVG)^\!M"OFg6g:e)'XPkscXDJ.;f_0[PaV<>trVkli?q%^-)/QQiOB4+`E[^7R=4'h%7TTq>Qf7&pTODR'S:GoCr(3m"psoV[/GH/t76e81+SS_l`,ROC\f94;!?6oU>MTYa'7R%L)1?U70WA%P71uG`>OBeMe[oi6N5eTTZYCb!-1[EMVVB:3)@Yk=XFE!`=M?2fj.l<mi2T8nL._]2+8G55/Tm(A0MeP`#1b"#,KOXNogZ"4sP"s%T0Q\!;!g!UX)#!@U=;1G<MZN,L&aIKHoRM'+A*YFZLGJV[?qmkP(daf$t'Hs1-5dT5`0Et$c0VHG%05N`LF#i`!fAZ>=787L^gp-%#K=V&4,.6%(!F<RCDS=UmRaF+@3!6@O`!)?CLBD0\pMTa-rQ1kN0YEbP&cS#aN5Ck:/UelW[-YiU"O!WPL@dfM0#8a^2W:=2%:6u%c!b3%X>\KDYuN`'RC?5(dh9biZ7'!klFS^UmSPir;B<$gX,G'HZt#K<`,WZMC9t&s8"Ve68RE5NgD"a!DCd7g^bP?4!n,5]1\2Z=%SU4%f*B-!@BI)3"0>t5,h3"`Q@sO5`%o_HF1\DWho.BW%:R$JAKp$LY8Ui?eVE2&F,ZBb"]SY$>/K8[B$fth5ddufc.J_Y3:b[59%c)a/n*fPJ=,.?iUkOOjf1L+,=PUbZ'BfA9Z>M*H+%Pbe0s45iGPQ!JP/n5dM14>RA]GpRs0lQe8(a&^W(f0O#hnI(4JMXD"/("!$%:h[sl/8A0kT$2"7kB(hR^(2u1#C1?-;n7AS%HK/acO=^<8oS;.6Gg[t05>mHQg]hNfCtVnnD7$T\!M#j)?nHjT5AA8p9sS(BS=Y5%h"rB9OU&1u3[Occ@4XtP@LY!q!`Fh>8LWeEknV!u,RYND\q1-oI1q0`lupK2&7NpbDir1$"IU=k8C%,oV4!Mt.\1nZ*bS_Y'=#(t%iLIG^iIMp6HA3mf@8S;i8sUc8+?bV7d#"`c&&2H^qi5sf=8S3J4.[96N9iW\'*&jo1YB7M3nM362[\8(dTBr_ml)Zi^%gUN#0P0K%l!XU9*9UM72R$KKX(-FTn?P,FG_C2cNhW]o]"ui5p33TBYaoD-CEYW18Th6RJ?eC,OejaA@6Ddl@I,l6C#,/QBs07PV%_eh.b_@d%$aGdZ8TS@%4,2r&b8:MkSWKD^7gf]fS7>q@Vh7iK5*_pbTZ=G"AEZY$@^%dsKOW(oCNlSG46K(.kd*eN[=\%]%.B$IR!`Tp1DI#g%E\_PA=DF/83_(&f/8-8d&ITFT$MIN%5X6SU=Fj8bWp;CACCCt*QGs>Ii"egbUf6hdB85FfD>B/=emL#5/U;fuMu0N^C,/0M9.\Ui%Rus%67E7<kIQ2Y?KuTcQg+#V)p&n'f5c0uei0;Q^-H/+'lp4%=V9[PIM2!3IZRgZ`%8JS+[Njt#!u$8^\V]EG/6tMG+CdgGc_)$T%p.6dRO-OP&FkOu*Ff$1B45QLGbA.O$3-QSmBR>_Q1nN?0a-nRFO8W9m02MH!;XV[Q#VFV7mMK$\.<ikI]D)Hu5r1``G@2m[@_Qh!%9MD_YI)oF/*[e-P=_1hX4hm3?H*r7'-E6`!U4[`<'#DU:1\NG!PG#&(#uqBJj[,ZrUf6eWnIh-2MD?4hb-'fYU)Z9;])@saHg3X6%kgT/@c<nsY=VH;^]qi=4L"I/3:&A[jjmHBePNG5f=;trYRauc=ShtLnBrnn0%nF2<^m__l*UF/DoXm3dZf4<O%T#T.*rq7j\*]:j%!R1Tn3j>itm3[O<%!pBGh."-QHR$Hn*kitr6U?&po>6P=Or;*dPR;`F?_4i<FkN)hOc2*21H)]d,H9'PIKj@SBiaTR]Qo_Z0J8n,%Mb$bR2?AMeH)`872!u`PE^nN[9g9c4n,O+URLf*hD#;ILNRh5l"!N8?<-P;0I4O0+!.+=+1"o=66]CoZ8G+aK3]N-_2rAR*f'GDl%GT&6lUM:T"S!k-OA>1$K3,$2Xa]pu+L9pDL^K4]L`Oru`@@cFP<oD'`W4fHt!S\97*;;qV0NUb9l-m,6bBe#8)\h*)XmH5JODTV$%bX@g]?%eZ]\!(lMj$iT#nnVZ?XkqMD!#0n#q6MRb'77Jdo'KbtYEE/J?cp<68+GGB^8[8(CsdfYXZCTfPH:;lIIYbENLV"M+!4)K%k@pT0#1JZj<>\GKLsR;g\.p#f2^F>E*H9$V_3F@#&oOaY#<)m<@];U&-]6>Jb%\^Fk`Eh>fZIMjq>5.Y9uO=J["5>ZO])h,0YfLm%+>$`,Jp.J54YZ_UWiLJd!%BmQ%AO"lQ_62L@9)/5CF0o3":DFaI^>tB%Atbt0Lc;F!"d\9<354*19dpW*8QCa>BV0%>;!kJ$'kLj%<E%>bl<Q[VE,]2YD+3@t<&=Tp=up\*(QI2[jFqD#\mb6%9*-?12-+1Mm>igKA::n<6>[/(/!E]]E-;4@jU$]\;E^P+-p.Q9kS&<u%1!7CoC?;-C0l&0T8*.ZW)'c4g,.DUAGKf';`lt6,1M-WEBn\%Dit[a;W]dXA?L#tB+g@`mB$3(DUPMZ2V9NLMaC#K#0]$Nlh9Nh:%@C>r#Rt]LUNi.AFXVe^mSgZ_Kh4K[kYcOL"9ObiCh\eI97l>ou=Nh0u+1SNqn,a$#9"j4ir*`=?YhC0U_(%N&9EQ>&$[qD@B_TFb%r5!Jk!\dPl71nsrONj$([;(k.piFFN5XX<SO<"-I-N\LtkgHSsTI`9.VY>=*-ja'MR95FAhZR1WiXKsjm&Pbmd3c1UGDht-Ap,Li%?(Am86h0;\??urF)7_8[j't4UdaZ,T4'%S\o%:]7p@>#of/]'Xdg*!P?Z(\pS3ffqSfDiP5UaI3F1uA1,]o#U\g'e4l,Au8$3fqE%c5U/RKQ1R-)jX4R\k1&BhL@&df_.0FQ`AmH]chZXM[SNk#[9f_"6Qe,(W<S+dhi`YVqDU(@<:$pFbFg?Le'i6CopC,Xf&\r](p]2%hJ6*BP'GpZ<P)g;[]$$sU?0Tj'^m60'h2$:?!0Sg644VuHDFI1;!_U[oJ5c_UN01[2n&k]llDK5B#d%3JB4RuD*;VD5"=Z=`LILq%F)>EK$aEX^<o;"]%g7Usm&('=3?5MgZM)u=kH[G5[m=SP/ZsYCaI:t?R0Zq!Df4p_MDmJ7nj2HC'A]i5C^[T>3gXd)S/>_H3-EC'%lVJ1ufhP*ECH9_5CFT'GN\e-!NH0:JK\WH'DlbEt769h?XL>.NF<b!PKr9N=(l,HIDWsknfX:Z2=Uj*bf]>&G60DHJctY-\XksL9%?+Q"F-j=?)q*MOcD-3CWk4pDER=auCDR9g%K"=f!iTG.a?E<XCkM6isH0cP]bVN;9<>1Q:`.oo(a*8#O+Ar!"@9/@(R]9MegaSO_%&*&W>ZjTQ<c$Nl!d7IP<<Ab;rhlFm%p%i?$<=.L9a=@nYqS'+%I'/g2h-7;)LjM`Dd)t8#!jen\<9?nJM&^@Sq*JtH].d/los?-$%h])5`ch&%F+u.K/b"cd]o6U5(WLDSJ;+jJcfXk/.n+?1#HNMA_ik%_NhHp1I:WY`N2Yhg^ft,@sD?h$0@:>3;.nD'eiKmIG%o8<=%V="!41G#N`W>'o7E.R3)p8uLl5KCpGS$k$r.J@I-Qg3*MPairb]',.;D(;U:>K#Fd*n?-g3\>AOWPp=cZ*r0!*]pgTEd_`ij[jsF%9T<5GRT@OXRTP:[Y8/jM8/`t0?X6T\2:"8W53D[5&]=^o<uEX0JQ@TNS(:F[7CaEs]hXO&T3G)o23GB*b=^Nq"?9JmelgA#Rh$4@%ZDM9MOqk-_Xc]YDC`NZoTt:1BSpNEY6,E6NdQ[.0=jpU-,/WWE?,DtYD^4E`eKXi.q-'.eX*<AYf70;_fXu+E%:aml9_2>l0/,k4%!@]1nE?M1p(lJb65rIH7=$'X>Ok[MbG3\o!j44kb7h,@AA]:j!Gr2H;6$*S6>k$IqD,go?jH,-6pI7_3Dmk[6;p>(:F2!1-0j,OL%L:naGEXQ(s=</tKXe4@(\H]H4^';;'bAEfY]B4Qca,b`I;<N/&?bJka*pGYu^\QmKROD?'X/Pphl`[^D2'Vej:ERTs5Pt&5s74Lj%^E.mtiJ52GS+<b4r8lfW5Q9!lhu<,#%mU!]pHSZTq&b+`nNU>Ds7YF7hgbR-cQ@Z7jd0?So])Q-s6'2B++O:WoC%2*os`6hJ,f7M%ru9&Ta_^so%tFMh^]*`;:1i,b~>%AI9_PrivateDataEnd