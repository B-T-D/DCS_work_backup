%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 004x006.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Rajesh Tyagi
%%CreationDate: 26/05/15
%%BoundingBox: 0 0 286 213
%%HiResBoundingBox: 0 0 285.1514 212.1304
%%CropBox: 0 0 285.1514 212.1304
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 5640 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA87DA87D7D7DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD0CFFA8FD057D52FD1BA87DFD1BA87DFD1BA87DFD1BA87DA8FD09FF%A8FFA8FFA8A8A8FD6FFFA8FD0EFFA8A8A8FD6DFFA8A8FD0EFFA9A9A9FD6E%FFA8FD0EFFA8FF7EA9FD6CFFA8A8FD0EFFA8FFFF7EFD6DFFA8FD0EFFA8FF%FFA9A8FD6BFFA8A8FD0EFFA8FFFFFFA9FD6CFFA8FD0EFFA8FFFFFFA8A8FD%6AFFA8A8FD0EFFA8FD04FFA8FD6BFFA8FD0EFFA8FD05FF7EFD69FFA8A8FD%0EFFA9FD05FFA9A8FD69FFA8FD0EFFA8FD06FFA8A9FD67FFA8A8FD0EFFA8%FD06FFA9A9FD68FFA8FD0EFFA8FD07FF7EA9FD66FFA8A8FD0EFFA8FD08FF%7EFD67FFA8FD0AFF7DA87DA8A8FD08FFA97EFD65FFA9A8FD0AFF7D527D7D%A8A8FD08FFA9A8FD64FFA8A8FD0AFF7D847DA87EFD09FFA984A8FD63FFA8%A8FD19FFA8A9FD64FFA8FD0EFFA8FD0BFF7EAFFD62FFA8A8FD0EFFA8FD0C%FF7EFD63FFA8FD0EFFA8FD0CFFA97EFD61FFA8A8FD0EFFA8FD0DFFA9A8FD%61FFA8FD0EFFA8FD0EFFA8A8FD5FFFA8A8FD0EFFA8FD0FFFA9FD60FFA8FD%06FFA8FD07FFA8FD0FFFA8A8FD5EFFA8A8FD04FF7D52FD08FFA9FD10FFA8%A9FD5EFFA8FD04FFA87DA8FD07FFA8FD11FF7EA9FD5CFFA8A8FD04FF7D7D%A8FD07FFA8FD12FF7EFD5DFFA8FD04FF7DA8A8FD07FFA8FD13FF7EFD5BFF%A8A8FD05FF7DFD08FFA8FD14FF7EFD5BFFA8FD04FF7D7DA8FD07FFA8FD14%FFA97EFD59FFA8A8FD04FFA852FD07FFA8AFFD15FFA9A8FD59FFA8FD04FF%7D7D7DFFFFFF52FD047DFD16FFA8A8FD57FFA8A8FD05FF52FD04FFFD047D%A8A8FD16FFA9A9FD56FFA8A8FD04FF7D7D7DFFFFFFA8FFA8A8A8FD18FF84%A9FD55FFA8A8FD04FF7D7DFD08FFA8FD18FFA9A9FD56FFA8FD04FFA87DA8%FD07FFA8FD19FFA87EA9FD53FFA8A8FD04FFA852A8FD07FFA8FD1AFFA9A9%FD54FFA8FD04FF7EA8A8FD07FFA8FD1BFFA8A8AFFD51FFA8A8FD04FF7DA8%A8FD07FFA8FD1CFFA9A9FD52FFA8FD04FFA87DA8FD07FFA8FD1DFFA87EA8%FD4FFFA8A8FD04FFA8FD09FFA9FD1EFFA9A9FD50FFA8FD04FF7D7DA8FD07%FFA8FD1FFFA8A8A8FD4DFFA8A8FD04FFA859A8FD07FFA8FD20FFAFA9A9FD%4DFFA8FD04FFA8A8A8FD07FFA8FD21FFA8A8A8FD4BFFA8A8FD05FFA8FD08%FFA8FD23FFA9A8FD4BFFA8FD04FFA8597DFD07FFA8FD24FFA87EFD49FFA8%A8FD04FFA87DA8FD07FFA8FD25FFA97EFD49FFA8FD04FF7D7DA8FD07FFA8%FD27FF7EAFFD46FFA8A8FD04FFA87DA9FFFFFFA87EA8A8FD29FF84A9FD46%FFA8FD04FF7D7DA8FFFFFF52527D7D7DFD29FFA8A8A9FD43FFA8A8FD04FF%A87DFD04FFA87DA8A8A8FD2AFFA9A8A8FD43FFA8FD04FFA852A8FD07FFA8%FD2CFFA87EFD41FFA8A8FD04FFA852A8FD07FFA8FD2DFFA97EFD41FFA8FD%04FFA87DA8FD07FFA8FD2FFF7EA9FD3EFFA8A8FD05FF59A8FD07FFA8FD30%FFA8A9A8FD3DFFA8FD04FF7D7D7DFD07FFA8FD31FFA9A87EFD3BFFA8A8FD%04FF7D7DA8FD07FFA9FD34FF7EA9FD3AFFA8FD04FFA884A8FD07FFA8FD35%FFA8A8A8FD37FFA8A8FD0EFFA8FD37FFA97EFD37FFA8FD0EFFA8FD38FFAF%7EA9A9FD33FFA8A8FD0EFFA8FD3AFFA9A984FD33FFA8FD0EFFA8FD3CFFA9%7EA9A9FD2FFFA8A8FD0EFFA8FD3EFFA8A9A8FD2FFFA8FD0EFFA8FD41FF7E%A8A8FD2BFFA8A8FD0EFFA9FD42FFA9A9A8A9FD2AFFA8FD0AFFA8FFA8A8A8%FD45FFA8A87EFD27FFA8A8FD0AFFA87D7D7DA8A8FD47FF7EA9A8FD24FFA8%A8FD0AFFFD047DA8FD49FFA8A97EA8A8FD21FFA8A8FD0BFFA8FFFFA8FD4C%FFA9A9A8A9A8FD1FFFA8FD0EFFA8FD4FFFA9A97EA9A8FD1BFFA8A8FD0EFF%A8FD52FFA9A9A8A9A8FD19FFA8FD0EFFA8FD55FFA8A97EA97EA9A8FD13FF%A8A8FD0EFFA9FD5AFFA8A9A8A9A9FD11FFA8FD0EFFA8FD5DFFA8A97EA97E%A9A8FD0BFFA8A8FD0EFFA8FD62FFA8A9A8A9A8FFA9FD07FFA8FD0EFFA8FD%65FFA8FFA8A87EA984A9A8FFA8A8FD0EFFA8FD6CFFA8A9A8A9A8FD0EFFA8%FD6FFFA8A8FD0EFFA8FD70FFA8FD0EFFA8FD6FFFA8A8FD0EFFA9FD70FFA8%FD0EFFA8FD6FFFA8A8FD0EFFA8FD70FFA8FD0CFF7DA87DFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0BFFA87D7DA8A8AFA8A8A8A9A8%A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8FFA8A8A8FFA8AFA8A9A8A8A8%A9A8A8A8A9A8A8A8A9A8A8A8A9A8A9A8FFA8A8A8FFA8FFA8A9A8A8A8A9A8%A8A8A9A8A8A8A9A8A8A8A9A8A8A8FFA8A8A8FFA8FFA8AFA8A8A8A9A8A8A8%A9A8A8A8A9A8A8A8A9A8A8A8FFA8A8A8FD0CFF7DA87DFD18FF7DFD07A8FD%13FFFD06A87EA8A8A8FD12FFFD0AA8FD13FFFD08A87DFD09FFA87D7DFD17%FFFD047D527D52A8FD14FF7DA8527D7D7D597D7DFD13FF7DA87D7E7D7D52%7D7DFD13FFFD067D597D53FD0AFF7DA8FD16FFA8A87D847D847D7D7DFD13%FFA87D7E7D7DA87DA87DA8FD12FFA87DA87D7D7E7D7D7D7EFD12FFA87DA8%FD077DFDBEFFA8FD047DA87E7D7DFD78FF7DA8527D527D7D52A8FD78FFA8%A9A8A8A8FFA8FD38FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-05-26T16:49:04+05:30</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:ModifyDate>2015-05-26T16:49:04+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2015-05-26T16:49:04+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwDWfy91PUJL702sr&#xA;eK41KS+gRVY8PWt1t2n2UUuEMfqqw/bY1PfCqDj0DX/K94s0epC3sbmaSbUVs44+cscQq1zI08c3&#xA;73i5aSn2gtAfCcI8RpBZyNLvSARrN2QdwQtn/wBk+Vpb/RV9/wBXm8/4Cz/7J8Vd+ir7/q83n/AW&#xA;f/ZPirv0Vff9Xm8/4Cz/AOyfFXfoq+/6vN5/wFn/ANk+Ku/RV9/1ebz/AICz/wCyfFVOTSdVLxGP&#xA;WroIGJmBS0JKcWAC/wCj7HlxPyxVU/RV9/1ebz/gLP8A7J8Vd+ir7/q83n/AWf8A2T4q79FX3/V5&#xA;vP8AgLP/ALJ8Vd+ir7/q83n/AAFn/wBk+Ku/RV9/1ebz/gLP/snxV36Kvv8Aq83n/AWf/ZPiqnJp&#xA;Oql4jHrV0EDEzApaElOLABf9H2PLifliqp+ir7/q83n/AAFn/wBk+Ku/RV9/1ebz/gLP/snxV36K&#xA;vv8Aq83n/AWf/ZPirv0Vff8AV5vP+As/+yfFXfoq+/6vN5/wFn/2T4q79FX3/V5vP+As/wDsnxVT&#xA;k0nVS8Rj1q6CBiZgUtCSnFgAv+j7HlxPyxVU/RV9/wBXm8/4Cz/7J8Vd+ir7/q83n/AWf/ZPirv0&#xA;Vff9Xm8/4Cz/AOyfFXfoq+/6vN5/wFn/ANk+Ku/RV9/1ebz/AICz/wCyfFXfoq+/6vN5/wABZ/8A&#xA;ZPiqC1W01a0it7iHWbpit3aJJFIloUeOW5jjkVuMCtujGnFhiqfYq7FXYqlt+AdZ0sHcH1/+TYxV&#xA;T0WtlNLoshPG2HqWDH9q1Y0C7mpMLfAf8nif2styb+r5+/8AagdybZUl2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpdr/8AvDF/zGWX/UZFiqY4q7FXYqlt/wD8&#xA;dnS/+e//ACbGKt61ZzyRR3lmtdQsWMtuuw9QUpJCSe0q7b9Go3bLMchyPIoKLs7y3vLWK6t25QzK&#xA;GQ9Dv2IO4I6EHochKJBopVsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2Kpdr/APvDF/zGWX/UZFiqY4q7FXYqlt//AMdnS/8Anv8A8mxiqZYqlCf7i9WMXTT9TctG&#xA;e0V2QWdfZZgOQ/y+Xdxlv1R8x937PxyRyTfKkuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2Kpdr/wDvDF/zGWX/AFGRYqmOKuxVifnzzNruiSaQuk2yXH1y5EdzzR3p&#xA;HyUELxZaMQ5I6nbphVAeW/Meuarf2Umo2Z5pNIg9KJoBH6kCPJG4nermBmKM6dabLXFDO8CUPqFj&#xA;BfWctrPURyD7SmjqwPJXQ9mRgGU9iMlGRibCkIfR72aaOS1vCP0jZkJdUFA4I+CZR/LKBUeBqvVT&#xA;kpxA3HIoCYZWl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpV5jld&#xA;bW2RYXkV7yzDSKU4pS7i3bkwbf8AyQcVTXFXYq7FUtv/APjs6X/z3/5NjFUyxV2KpZq9rOkkeq2S&#xA;F721Uq8K0rPATV4t/wBrblH/AJW3RmyyEh9J5FBR1pdW93bRXNs4kgmUPG47g/PcZCUSDRSq4Fdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7X/wDeGL/mMsv+oyLFUxxV&#xA;rkvIrUcgASO9D0/VireKpbf/APHZ0v8A57/8mxiqZYq7FXYqk0h/Q2oGXcaVfyfvR+zb3Mhpz9km&#xA;Y/F4Pv8AtEi4esf0h9o/Z9yOSc5Sl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxVLtf/AN4Yv+Yyy/6jIsVTHFXnn5eaSLDX7ieLRL3TYb+zVib6aCd4PTdXS3/dNJIpb6wz&#xA;H1m5fDQbDYq9DwKlt/8A8dnS/wDnv/ybGKplirsVdiqyaGKeGSGZFkhlUpJGwBVlYUKkHqCMINbq&#xA;lmmzzWNyNIvJGk2J066c1Msa7mN2PWWMeO7L8XXlSyYBHEPigJtlSXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql2v/7wxf8AMZZf9RkWKpjirAfJmqajced9ehuplliaS5+r&#xA;SRuQjrb3Ah4+l9Uho0C8Ynb6w9T0HgVZZrHmLSdIlsob6b05tQmFvZxBSzSSHegAHbxP68CpbZ+Y&#xA;tK1vVbGXTpWkSFpkcvG8deUKujrzC8kdWBVhscKskwK7FXYq7FUNqOnw39sYJSUIIeGZNnjkXdJE&#xA;Jr8Sn6OxqNslCRibQQh9L1CaR5LG+Aj1K3FZAtQksZNFmir+y3cfstt4EynHqOSgpjlaXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu1/8A3hi/5jLL/qMixVMcVeeeQoNRHnHW&#xA;7i+/c3cjXC3cH1e5TmVuP3EizSRrC8aw7J6bfEDVviBoVZbr/lfSdd+rHUEdjaOXiZHKGjU5I1Oq&#xA;tQVHtgVLLbypomk6rp0drByVpJZV9ZjMU9KFUiWMvUqsaqAgHTCrKcCuxV2KuxV2KoLVNM+uIkkL&#xA;/V7+3JazuuPIox2IIqOSP0da7+xAInCde5BDWmaot2ZbeVPQv7Uhbq1Jrx5fZdDQco3p8LU9jRgQ&#xA;GcK36FQUdkEuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKvMdvbyWttLJEjyQ3&#xA;lmYnZQWQm7iB4k9K+2Kprirz7yLpUK+ZZNWXTriz1C6tJW11p7eWCNL6eZJHSGSVR9YSoYAqzKqq&#xA;KH4jhV6DgVLb/wD47Ol/89/+TYxVMsVdirsVdirsVdiqC1HTmuGS5tnEGoQA+hPSoIO7RyKKco2p&#xA;uPpFCAcnCdbHkghvTtTS79SJ19C+goLq0Y1ZCa0YHbkjUPF+/sQQGcK9ygozIJdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVS7X/94Yv+Yyy/6jIsVTHFWG+TW8yQa3fadqEl/cadbCVb&#xA;aa+9NvszUjPqrbw+qZUPNeMrcRs1GxVmWKpbf/8AHZ0v/nv/AMmxiqZYq7FXYq7FXYq7FXYqgdR0&#xA;wXTJcwOLfUYARbXVOVAaEo61HONqfEtfcUYAicJ1seSCFunar9Ylezuo/q2pQCssBNVddh6sLftx&#xA;knr1HRgDhnCtxyUFMMrS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu1/8A3hi/5jLL&#xA;/qMixVMcVYB5T1fVNS823b2+pStpZeeSXS54qiNFYpGySyO0vKVmD0X92qinGpBwqz/AqW3/APx2&#xA;dL/57/8AJsYqmWKuxV2KuxV2KuxV2KuxVCajplvfxqJC0c0R521zGeMkT/zIf1g1DDYgjJQmYoIQ&#xA;1pqdxBcJYasFjuXPG2ukFIbjvRa14SU6xk/6pIrScoAi48vuW00ypLsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdiqXa/wD7wxf8xll/1GRYqmOKvP8AyMyp5u1ezluXe5szcolrIwZ1ia4BWQsg&#xA;RSHAUgFaqNgepJQnPnfQ/M2qnSTot+lnHZX9td3kTGRDMkNzE7IXQj4PSEnJCKMSOlMCUq8r6H5m&#xA;0q40+HU7pZJ2mdmLyS3fMJaxRzyh3MZjM8qPJx3C16VJGFWeYFdirsVdirsVdirsVdirsVUrq0tr&#xA;u3e2uYlmgkFHjcVB7/gcMZEGwqWepf6PUTGS/wBKH2ZgDJcwDwkAq0yD+YfGP2g27CyhPltL7P2f&#xA;cjkmsE8FxCk0EiywyDkkiEMrA9wRscrII5pX4FdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrz&#xA;GtwbW2MbosYvLP1VZCzMPrcVOLBl4/SDiqa4q858nS6S/wCYWrSWD2ZhdLj44pE9VpprgSuVVby6&#xA;9QPwYsxhjpxAHcAq9GwKlt//AMdnS/8Anv8A8mxiqZYq7FXYq7FXYq7FXYq7FXYq7FXYqlc2kSW8&#xA;z3WkuttPIxee2YH6vMx6llH2HP8AOm/8wbplgne0t/vRSpZaxFNMLS5jaz1ClTay0+IDq0Lj4ZV9&#xA;13H7QU7Yyx0LG4UFMMrS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu1//eGL/mMsv+oyLFUxxVIt&#xA;E8n2Gk3MU6XFxdG0gNnp6XBjZbW2PEmKLgkbEH013cs21K0xVPcVS2//AOOzpf8Az3/5NjFUyxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KqF7YWd9B6F3EssdQyg9VYdGVhQqw7MDUZKMiDYUhLxHrOm/wB2&#xA;W1WyH+63KrdoNqcXPFJh/rcW/wApjk7jL+ifs/YjdG2Gp2N+jNbS8mjPGaJgUljbwkjcK6Hb9oZC&#xA;UDHmoKKyKXYq7FXYq7FXYq7FXYq7FXYq7FXYql2v/wC8MX/MZZf9RkWKpjirsVdiqW3/APx2dL/5&#xA;7/8AJsYqmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVB6hpFjfFXlUpcRgiG7iYxzx1/lkWjU8V&#xA;6HuDk4zMUEIYPrtgKOv6Wth/uxOEV0P9ZTwhk+a8P9U5L0y/o/d+v713RVjq2n3xZLeWs0f97buG&#xA;jmT/AF4nCuv0jIygY81BReQS7FXYq7FXYq7FXYq7FXYq7FUu1/8A3hi/5jLL/qMixVMcVdiqQebP&#xA;MraIdNEbW7TX93HbJbTuUklDsA/pU2HppydmbYAU74qknl3zjc6/qVnK1mo9KV1pbyBwizW6ScZe&#xA;fp0ki5UkUV+WFDOsCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhr7TLC+C/WoVkaM1il3WS&#xA;M+Mci0dD7qRkozI5IIQf1LWrMf6FdLeQjpb31Q436LcRgtQD+dHJ8cnxRPMV7v1Lu2PMFvDQanDJ&#xA;prfzzgGD/kehaIb9A7K3tj4RP07/AI7ltMo5I5I1kjYPG4qrqQQQe4IyohK7FXYq7FXYq7FXYq7F&#xA;Uq8xyutrbIsLyK95ZhpFKcUpdxbtyYNv/kg4qmuKuxVZLbwTFTLGkhQ1Xmoah9q4ql96qrrOmBQF&#xA;qbgmgpuUBJxVM8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS1/L+nB2ltA9hMx5&#xA;GS0b0gWrXk8Y/dSH/XRss8U9d/eilvp+Yrb+7lt9RjBICzA20tPFpIxJG5+UaDG4HvH2/j5ru79P&#xA;RxVF/aXNjSh5yR+pHTuTLAZUUD/LK4+FfIg/jzW0daX1leReraXEdzFWnqROrrUdqqSMhKJHNNq2&#xA;BXYq7FXYql2v/wC8MX/MZZf9RkWKpjirsVdiqW3/APx2dL/57/8AJsYqmWKuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBXmiaTeSGW4tY2uNgLkDhMKdOMq0kX6Dk45JDkUU&#xA;o/oe6hqbLUrmIDdYpitzHX/KMoMxHylGHxAeYH3fs+xaa5+ZYahorS9XrzRpLVvkI2FwD/wYx9B7&#xA;x9v6l3Xfpto/969OvLYHowjFwCflatOw+kDHw+4j7vvpbXReYdDkcRi+hSY/7okcRyg+Bjfi4+kY&#xA;nFLuWw1r/wDvDF/zGWX/AFGRZWlMcVdirsVS2/8A+Ozpf/Pf/k2MVTLFXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtlhhmjaKZFkjbZkcBlPzBwg0qRavoej20&#xA;EE9raRW0q3llvAoiBrdxD4gnEN1/ayRySOxKKT/IJdirsVY/Hruj6prOnHT7uO6EbXKP6bVoyRqT&#xA;+Dqa9wRhVkGBXYq7FXYq7FXYqteWNGjV2CtK3CMH9pgpag/2Kk4quxV2KuxV2KuxV2KrXljRo1dg&#xA;rStwjB/aYKWoP9ipOKrsVdirsVdirsVdiq15Y0aNXYK0rcIwf2mClqD/AGKk4quxV2KuxV2KuxV2&#xA;KpZ5hZVsIixoPrtiKnxN5CB+OKpnirsVdirzXUfLsGg6to9hBp6axbXEsSiS/tVunjjSW3tVggkR&#xA;USEQWzPLycMzhOuxwqzn/DXlz/q1Wf8A0jxf804Fd/hry5/1arP/AKR4v+acVd/hry5/1arP/pHi&#xA;/wCacVd/hry5/wBWqz/6R4v+acVd/hry5/1arP8A6R4v+acVSrzPo2lWWhXdzYadp0V3Gq+jJcW6&#xA;ekCXAq/FGNKHwwqweTV7pzE8fl2zRDDbO/r6YTJBHKbZZr5uJClVFxN+6HxfB1G+KE38nzSaprK2&#xA;uq+XrG1iayWd4hYGNo39G1dWLvUUle4mUIfiX06dQ2KWbf4a8uf9Wqz/AOkeL/mnArv8NeXP+rVZ&#xA;/wDSPF/zTirv8NeXP+rVZ/8ASPF/zTirv8NeXP8Aq1Wf/SPF/wA04qkfm2x0XSdPtruGx0+Ffr1p&#xA;Fc+rZpJyt5Z1SYLx48GWMl+RqAB0wqw671XUVurlIvLdhIsF0yRE6Y54yK9yi2dajk8iwxkTD4f3&#xA;nTpihy6vqhnRB5csGQ3Ppsf0Y4o/NVNl1/vApLer9nbpir03/DXlz/q1Wf8A0jxf804Eu/w15c/6&#xA;tVn/ANI8X/NOKu/w15c/6tVn/wBI8X/NOKu/w15c/wCrVZ/9I8X/ADTiqS+brDRdK0c3tvp9hE6T&#xA;wKxktEkDRtKqyKAvGh4E7708MKsO1TU5rdtTW30XTrlrW8ZbSdNOM8Qj9O7aGE8Qjes728cTdh6g&#xA;oasBihbdaxqkdxeoPLdgiQTskVdNZv3itdhLKoNGeVbeBhMPg/e9N1xV6b/hry5/1arP/pHi/wCa&#xA;cCXf4a8uf9Wqz/6R4v8AmnFXf4a8uf8AVqs/+keL/mnFXf4a8uf9Wqz/AOkeL/mnFUh87Wmi6N5e&#xA;nvrXTrJLpSqW4Nkk4eRzREIBjChm+07NRRU4VYff6rqEFzPInl/TY2s5Q8F2umSTC2dFkeBlZSpk&#xA;+sPFHwKcSvIe2KEwu/P/AJ5jS+b9HJC0EzoiNazyemU+uejAxVx6jXP1a3IdR8Pq07ril6fgV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVK/M41f8AQV5Jo8hTU4IzPaKFDiWSL4xCymlVl48DQg0O&#xA;xBxVhl9rP5raXPf2UFhFqUFrDGLK/McjSzyn0TJK6xlI+LM8o4KeS8Rtxq+FUfpeu/mJNq+ni/06&#xA;KHTrqa4S6iSCQSQRISIWaVpCh5Uqx2O44r1xVnGBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:PTEX.Fullbanner>This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0</pdfx:PTEX.Fullbanner>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>pdfTeX-1.40.15</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:8E17B46A382068118C14CB8B9B69008A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8E17B46A382068118C14CB8B9B69008A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b55c2958-5e9c-5944-b46d-24e468c2fde7</stRef:instanceID>
            <stRef:documentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ac3a3d-59f8-8246-ab76-e3fb9f563385</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8E17B46A382068118C14CB8B9B69008A</stEvt:instanceID>
                  <stEvt:when>2015-05-26T16:49:04+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -212.13 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 212.13 li
285.151 212.13 li
285.151 0 li
cp
clp
[1 0 0 1 0 0 ]ct
23.3062 196.953 mo
274.406 196.953 li
274.406 2.55225 li
23.3062 2.55225 li
23.3062 196.953 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
23.3062 196.953 mo
274.406 196.953 li
274.406 2.55225 li
23.3062 2.55225 li
23.3062 196.953 li
cp
clp
.5625 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
23.3062 2.55225 mo
27.1641 9.64746 li
31.0386 16.5127 li
34.9312 23.1563 li
38.8418 29.585 li
42.7729 35.8071 li
46.7256 41.8306 li
50.7012 47.6611 li
54.7007 53.3066 li
58.7266 58.7734 li
62.7803 64.0674 li
66.8633 69.1948 li
70.978 74.1621 li
75.1265 78.9741 li
79.3101 83.6372 li
83.5317 88.1553 li
87.7944 92.5342 li
92.1006 96.7783 li
96.4521 100.893 li
100.853 104.881 li
105.304 108.748 li
109.812 112.498 li
114.377 116.134 li
119.006 119.659 li
123.701 123.079 li
128.466 126.395 li
133.306 129.61 li
138.226 132.729 li
143.229 135.752 li
148.324 138.685 li
153.513 141.527 li
158.805 144.282 li
164.204 146.953 li
169.719 149.541 li
175.355 152.048 li
181.123 154.476 li
187.029 156.827 li
193.084 159.101 li
199.298 161.301 li
205.681 163.428 li
212.244 165.482 li
219.002 167.467 li
225.967 169.381 li
233.155 171.227 li
240.585 173.004 li
248.272 174.714 li
256.24 176.358 li
264.512 177.937 li
273.111 179.449 li
274.406 179.666 li
.884 .769 0 0 cmyk
@
grestore
23.3062 196.953 mo
23.3062 194.702 li
23.3062 196.953 li
cp
0 0 0 1 cmyk
f
.28125 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
23.3062 196.953 mo
23.3062 194.703 li
@
23.3062 4.80225 mo
23.3062 2.55225 li
23.3062 4.80225 li
cp
f
23.3062 2.55225 mo
23.3062 4.80225 li
@
23.752 199.73 mo
23.4077 199.73 23.1514 199.898 22.9756 200.236 cv
22.8003 200.574 22.7192 201.08 22.7192 201.755 cv
22.7192 202.429 22.8003 202.936 22.9756 203.273 cv
23.1514 203.611 23.4077 203.78 23.752 203.78 cv
24.0962 203.78 24.3525 203.611 24.5283 203.273 cv
24.6968 202.936 24.7847 202.429 24.7847 201.755 cv
24.7847 201.08 24.6968 200.574 24.5283 200.236 cv
24.3525 199.898 24.0962 199.73 23.752 199.73 cv
23.752 199.203 mo
24.2988 199.203 24.7173 199.426 25.0142 199.858 cv
25.3042 200.296 25.4531 200.931 25.4531 201.755 cv
25.4531 202.585 25.3042 203.22 25.0142 203.652 cv
24.7173 204.083 24.2988 204.3 23.752 204.3 cv
23.1982 204.3 22.7729 204.083 22.4829 203.652 cv
22.1924 203.22 22.0508 202.585 22.0508 201.755 cv
22.0508 200.931 22.1924 200.296 22.4829 199.858 cv
22.7729 199.426 23.1982 199.203 23.752 199.203 cv
f
86.0811 196.953 mo
86.0811 194.703 li
f
86.0811 196.953 mo
86.0811 194.703 li
@
86.0811 2.55225 mo
86.0811 4.80225 li
f
86.0811 2.55225 mo
86.0811 4.80225 li
@
78.6978 199.291 mo
81.3101 199.291 li
81.3101 199.851 li
79.3052 199.851 li
79.3052 201.06 li
79.3999 201.026 79.501 200.999 79.5957 200.986 cv
79.6899 200.972 79.791 200.958 79.8857 200.958 cv
80.4326 200.958 80.8647 201.113 81.1885 201.412 cv
81.5127 201.714 81.6743 202.119 81.6743 202.632 cv
81.6743 203.166 81.5059 203.578 81.1748 203.869 cv
80.8442 204.158 80.3784 204.299 79.7847 204.299 cv
79.5752 204.299 79.3662 204.279 79.1499 204.251 cv
78.9341 204.218 78.7178 204.171 78.4883 204.097 cv
78.4883 203.429 li
78.6841 203.537 78.8867 203.618 79.1025 203.671 cv
79.312 203.726 79.5347 203.746 79.771 203.746 cv
80.1489 203.746 80.4526 203.652 80.6753 203.45 cv
80.8916 203.247 81.0063 202.976 81.0063 202.632 cv
81.0063 202.294 80.8916 202.025 80.6753 201.822 cv
80.4526 201.621 80.1489 201.519 79.771 201.519 cv
79.5957 201.519 79.4131 201.539 79.2378 201.58 cv
79.0625 201.621 78.8799 201.681 78.6978 201.762 cv
78.6978 199.291 li
f
84.4082 199.73 mo
84.064 199.73 83.8076 199.898 83.6318 200.236 cv
83.4565 200.574 83.3755 201.08 83.3755 201.755 cv
83.3755 202.429 83.4565 202.936 83.6318 203.273 cv
83.8076 203.611 84.064 203.78 84.4082 203.78 cv
84.7524 203.78 85.0088 203.611 85.1846 203.273 cv
85.353 202.936 85.4409 202.429 85.4409 201.755 cv
85.4409 201.08 85.353 200.574 85.1846 200.236 cv
85.0088 199.898 84.7524 199.73 84.4082 199.73 cv
84.4082 199.203 mo
84.9551 199.203 85.3735 199.426 85.6704 199.858 cv
85.9609 200.296 86.1094 200.931 86.1094 201.755 cv
86.1094 202.585 85.9609 203.22 85.6704 203.652 cv
85.3735 204.083 84.9551 204.3 84.4082 204.3 cv
83.8545 204.3 83.4297 204.083 83.1392 203.652 cv
82.8491 203.22 82.707 202.585 82.707 201.755 cv
82.707 200.931 82.8491 200.296 83.1392 199.858 cv
83.4297 199.426 83.8545 199.203 84.4082 199.203 cv
f
88.7012 199.73 mo
88.3569 199.73 88.1006 199.898 87.9253 200.236 cv
87.7495 200.574 87.6685 201.08 87.6685 201.755 cv
87.6685 202.429 87.7495 202.936 87.9253 203.273 cv
88.1006 203.611 88.3569 203.78 88.7012 203.78 cv
89.0454 203.78 89.3022 203.611 89.4775 203.273 cv
89.6465 202.936 89.7344 202.429 89.7344 201.755 cv
89.7344 201.08 89.6465 200.574 89.4775 200.236 cv
89.3022 199.898 89.0454 199.73 88.7012 199.73 cv
88.7012 199.203 mo
89.248 199.203 89.6665 199.426 89.9639 199.858 cv
90.2539 200.296 90.4023 200.931 90.4023 201.755 cv
90.4023 202.585 90.2539 203.22 89.9639 203.652 cv
89.6665 204.083 89.248 204.3 88.7012 204.3 cv
88.1479 204.3 87.7227 204.083 87.4326 203.652 cv
87.1421 203.22 87.0005 202.585 87.0005 201.755 cv
87.0005 200.931 87.1421 200.296 87.4326 199.858 cv
87.7227 199.426 88.1479 199.203 88.7012 199.203 cv
f
92.9941 199.73 mo
92.6499 199.73 92.3936 199.898 92.2178 200.236 cv
92.0425 200.574 91.9614 201.08 91.9614 201.755 cv
91.9614 202.429 92.0425 202.936 92.2178 203.273 cv
92.3936 203.611 92.6499 203.78 92.9941 203.78 cv
93.3384 203.78 93.5952 203.611 93.7705 203.273 cv
93.9395 202.936 94.0269 202.429 94.0269 201.755 cv
94.0269 201.08 93.9395 200.574 93.7705 200.236 cv
93.5952 199.898 93.3384 199.73 92.9941 199.73 cv
92.9941 199.203 mo
93.541 199.203 93.9595 199.426 94.2563 199.858 cv
94.5469 200.296 94.6953 200.931 94.6953 201.755 cv
94.6953 202.585 94.5469 203.22 94.2563 203.652 cv
93.9595 204.083 93.541 204.3 92.9941 204.3 cv
92.4409 204.3 92.0156 204.083 91.7251 203.652 cv
91.4351 203.22 91.2935 202.585 91.2935 201.755 cv
91.2935 200.931 91.4351 200.296 91.7251 199.858 cv
92.0156 199.426 92.4409 199.203 92.9941 199.203 cv
f
148.856 196.953 mo
148.856 194.703 li
f
148.856 196.953 mo
148.856 194.703 li
@
148.856 2.55225 mo
148.856 4.80225 li
f
148.856 2.55225 mo
148.856 4.80225 li
@
139.542 203.652 mo
140.628 203.652 li
140.628 199.898 li
139.447 200.134 li
139.447 199.527 li
140.622 199.291 li
141.29 199.291 li
141.29 203.652 li
142.377 203.652 li
142.377 204.212 li
139.542 204.212 li
139.542 203.652 li
cp
f
145.145 199.73 mo
144.8 199.73 144.544 199.898 144.368 200.236 cv
144.193 200.574 144.112 201.08 144.112 201.755 cv
144.112 202.429 144.193 202.936 144.368 203.273 cv
144.544 203.611 144.8 203.78 145.145 203.78 cv
145.488 203.78 145.745 203.611 145.921 203.273 cv
146.089 202.936 146.177 202.429 146.177 201.755 cv
146.177 201.08 146.089 200.574 145.921 200.236 cv
145.745 199.898 145.488 199.73 145.145 199.73 cv
145.145 199.203 mo
145.691 199.203 146.11 199.426 146.406 199.858 cv
146.697 200.296 146.845 200.931 146.845 201.755 cv
146.845 202.585 146.697 203.22 146.406 203.652 cv
146.11 204.083 145.691 204.3 145.145 204.3 cv
144.591 204.3 144.166 204.083 143.875 203.652 cv
143.585 203.22 143.443 202.585 143.443 201.755 cv
143.443 200.931 143.585 200.296 143.875 199.858 cv
144.166 199.426 144.591 199.203 145.145 199.203 cv
f
149.438 199.73 mo
149.093 199.73 148.836 199.898 148.661 200.236 cv
148.486 200.574 148.405 201.08 148.405 201.755 cv
148.405 202.429 148.486 202.936 148.661 203.273 cv
148.836 203.611 149.093 203.78 149.438 203.78 cv
149.781 203.78 150.038 203.611 150.214 203.273 cv
150.382 202.936 150.47 202.429 150.47 201.755 cv
150.47 201.08 150.382 200.574 150.214 200.236 cv
150.038 199.898 149.781 199.73 149.438 199.73 cv
149.438 199.203 mo
149.984 199.203 150.403 199.426 150.7 199.858 cv
150.99 200.296 151.138 200.931 151.138 201.755 cv
151.138 202.585 150.99 203.22 150.7 203.652 cv
150.403 204.083 149.984 204.3 149.438 204.3 cv
148.884 204.3 148.458 204.083 148.168 203.652 cv
147.878 203.22 147.736 202.585 147.736 201.755 cv
147.736 200.931 147.878 200.296 148.168 199.858 cv
148.458 199.426 148.884 199.203 149.438 199.203 cv
f
153.73 199.73 mo
153.386 199.73 153.13 199.898 152.954 200.236 cv
152.778 200.574 152.697 201.08 152.697 201.755 cv
152.697 202.429 152.778 202.936 152.954 203.273 cv
153.13 203.611 153.386 203.78 153.73 203.78 cv
154.074 203.78 154.331 203.611 154.507 203.273 cv
154.675 202.936 154.763 202.429 154.763 201.755 cv
154.763 201.08 154.675 200.574 154.507 200.236 cv
154.331 199.898 154.074 199.73 153.73 199.73 cv
153.73 199.203 mo
154.277 199.203 154.695 199.426 154.992 199.858 cv
155.283 200.296 155.432 200.931 155.432 201.755 cv
155.432 202.585 155.283 203.22 154.992 203.652 cv
154.695 204.083 154.277 204.3 153.73 204.3 cv
153.177 204.3 152.752 204.083 152.461 203.652 cv
152.171 203.22 152.029 202.585 152.029 201.755 cv
152.029 200.931 152.171 200.296 152.461 199.858 cv
152.752 199.426 153.177 199.203 153.73 199.203 cv
f
158.023 199.73 mo
157.679 199.73 157.423 199.898 157.247 200.236 cv
157.072 200.574 156.99 201.08 156.99 201.755 cv
156.99 202.429 157.072 202.936 157.247 203.273 cv
157.423 203.611 157.679 203.78 158.023 203.78 cv
158.367 203.78 158.624 203.611 158.8 203.273 cv
158.968 202.936 159.056 202.429 159.056 201.755 cv
159.056 201.08 158.968 200.574 158.8 200.236 cv
158.624 199.898 158.367 199.73 158.023 199.73 cv
158.023 199.203 mo
158.57 199.203 158.988 199.426 159.285 199.858 cv
159.576 200.296 159.725 200.931 159.725 201.755 cv
159.725 202.585 159.576 203.22 159.285 203.652 cv
158.988 204.083 158.57 204.3 158.023 204.3 cv
157.471 204.3 157.045 204.083 156.754 203.652 cv
156.465 203.22 156.322 202.585 156.322 201.755 cv
156.322 200.931 156.465 200.296 156.754 199.858 cv
157.045 199.426 157.471 199.203 158.023 199.203 cv
f
211.631 196.953 mo
211.631 194.703 li
f
211.631 196.953 mo
211.631 194.703 li
@
211.631 2.55225 mo
211.631 4.80225 li
f
211.631 2.55225 mo
211.631 4.80225 li
@
202.316 203.652 mo
203.403 203.652 li
203.403 199.898 li
202.223 200.134 li
202.223 199.527 li
203.396 199.291 li
204.065 199.291 li
204.065 203.652 li
205.151 203.652 li
205.151 204.212 li
202.316 204.212 li
202.316 203.652 li
cp
f
206.502 199.291 mo
209.114 199.291 li
209.114 199.851 li
207.109 199.851 li
207.109 201.06 li
207.203 201.026 207.306 200.999 207.399 200.986 cv
207.494 200.972 207.595 200.958 207.689 200.958 cv
208.236 200.958 208.669 201.113 208.993 201.412 cv
209.316 201.714 209.479 202.119 209.479 202.632 cv
209.479 203.166 209.31 203.578 208.979 203.869 cv
208.648 204.158 208.183 204.299 207.589 204.299 cv
207.38 204.299 207.17 204.279 206.954 204.251 cv
206.738 204.218 206.521 204.171 206.293 204.097 cv
206.293 203.429 li
206.488 203.537 206.691 203.618 206.907 203.671 cv
207.116 203.726 207.339 203.746 207.574 203.746 cv
207.953 203.746 208.257 203.652 208.479 203.45 cv
208.695 203.247 208.81 202.976 208.81 202.632 cv
208.81 202.294 208.695 202.025 208.479 201.822 cv
208.257 201.621 207.953 201.519 207.574 201.519 cv
207.399 201.519 207.217 201.539 207.042 201.58 cv
206.866 201.621 206.684 201.681 206.502 201.762 cv
206.502 199.291 li
f
212.212 199.73 mo
211.868 199.73 211.612 199.898 211.436 200.236 cv
211.261 200.574 211.18 201.08 211.18 201.755 cv
211.18 202.429 211.261 202.936 211.436 203.273 cv
211.612 203.611 211.868 203.78 212.212 203.78 cv
212.557 203.78 212.813 203.611 212.988 203.273 cv
213.157 202.936 213.245 202.429 213.245 201.755 cv
213.245 201.08 213.157 200.574 212.988 200.236 cv
212.813 199.898 212.557 199.73 212.212 199.73 cv
212.212 199.203 mo
212.759 199.203 213.178 199.426 213.475 199.858 cv
213.765 200.296 213.913 200.931 213.913 201.755 cv
213.913 202.585 213.765 203.22 213.475 203.652 cv
213.178 204.083 212.759 204.3 212.212 204.3 cv
211.659 204.3 211.233 204.083 210.943 203.652 cv
210.653 203.22 210.512 202.585 210.512 201.755 cv
210.512 200.931 210.653 200.296 210.943 199.858 cv
211.233 199.426 211.659 199.203 212.212 199.203 cv
f
216.505 199.73 mo
216.161 199.73 215.905 199.898 215.729 200.236 cv
215.554 200.574 215.473 201.08 215.473 201.755 cv
215.473 202.429 215.554 202.936 215.729 203.273 cv
215.905 203.611 216.161 203.78 216.505 203.78 cv
216.85 203.78 217.105 203.611 217.281 203.273 cv
217.45 202.936 217.538 202.429 217.538 201.755 cv
217.538 201.08 217.45 200.574 217.281 200.236 cv
217.105 199.898 216.85 199.73 216.505 199.73 cv
216.505 199.203 mo
217.053 199.203 217.471 199.426 217.768 199.858 cv
218.059 200.296 218.206 200.931 218.206 201.755 cv
218.206 202.585 218.059 203.22 217.768 203.652 cv
217.471 204.083 217.053 204.3 216.505 204.3 cv
215.952 204.3 215.527 204.083 215.236 203.652 cv
214.946 203.22 214.805 202.585 214.805 201.755 cv
214.805 200.931 214.946 200.296 215.236 199.858 cv
215.527 199.426 215.952 199.203 216.505 199.203 cv
f
220.799 199.73 mo
220.454 199.73 220.198 199.898 220.021 200.236 cv
219.847 200.574 219.766 201.08 219.766 201.755 cv
219.766 202.429 219.847 202.936 220.021 203.273 cv
220.198 203.611 220.454 203.78 220.799 203.78 cv
221.143 203.78 221.398 203.611 221.575 203.273 cv
221.743 202.936 221.831 202.429 221.831 201.755 cv
221.831 201.08 221.743 200.574 221.575 200.236 cv
221.398 199.898 221.143 199.73 220.799 199.73 cv
220.799 199.203 mo
221.346 199.203 221.764 199.426 222.061 199.858 cv
222.351 200.296 222.499 200.931 222.499 201.755 cv
222.499 202.585 222.351 203.22 222.061 203.652 cv
221.764 204.083 221.346 204.3 220.799 204.3 cv
220.245 204.3 219.819 204.083 219.529 203.652 cv
219.239 203.22 219.098 202.585 219.098 201.755 cv
219.098 200.931 219.239 200.296 219.529 199.858 cv
219.819 199.426 220.245 199.203 220.799 199.203 cv
f
274.406 196.953 mo
274.406 194.703 li
f
274.406 196.953 mo
274.406 194.703 li
@
274.406 2.55225 mo
274.406 4.80225 li
f
274.406 2.55225 mo
274.406 4.80225 li
@
265.428 203.652 mo
267.75 203.652 li
267.75 204.212 li
264.625 204.212 li
264.625 203.652 li
264.874 203.395 265.219 203.044 265.657 202.599 cv
266.089 202.16 266.366 201.876 266.48 201.748 cv
266.696 201.511 266.846 201.309 266.926 201.14 cv
267.007 200.978 267.055 200.81 267.055 200.648 cv
267.055 200.391 266.96 200.175 266.777 200.013 cv
266.596 199.851 266.359 199.763 266.063 199.763 cv
265.853 199.763 265.63 199.804 265.4 199.872 cv
265.171 199.946 264.922 200.054 264.658 200.203 cv
264.658 199.527 li
264.929 199.419 265.178 199.338 265.407 199.285 cv
265.637 199.231 265.853 199.204 266.049 199.204 cv
266.555 199.204 266.96 199.332 267.264 199.587 cv
267.567 199.844 267.723 200.182 267.723 200.607 cv
267.723 200.81 267.683 201.005 267.608 201.181 cv
267.534 201.364 267.398 201.58 267.196 201.822 cv
267.143 201.89 266.967 202.072 266.67 202.375 cv
266.373 202.679 265.961 203.105 265.428 203.652 cv
f
270.571 199.73 mo
270.228 199.73 269.971 199.898 269.795 200.236 cv
269.62 200.574 269.538 201.08 269.538 201.755 cv
269.538 202.429 269.62 202.936 269.795 203.273 cv
269.971 203.611 270.228 203.78 270.571 203.78 cv
270.915 203.78 271.172 203.611 271.348 203.273 cv
271.517 202.936 271.604 202.429 271.604 201.755 cv
271.604 201.08 271.517 200.574 271.348 200.236 cv
271.172 199.898 270.915 199.73 270.571 199.73 cv
270.571 199.203 mo
271.118 199.203 271.537 199.426 271.833 199.858 cv
272.124 200.296 272.271 200.931 272.271 201.755 cv
272.271 202.585 272.124 203.22 271.833 203.652 cv
271.537 204.083 271.118 204.3 270.571 204.3 cv
270.018 204.3 269.593 204.083 269.302 203.652 cv
269.013 203.22 268.87 202.585 268.87 201.755 cv
268.87 200.931 269.013 200.296 269.302 199.858 cv
269.593 199.426 270.018 199.203 270.571 199.203 cv
f
274.864 199.73 mo
274.521 199.73 274.264 199.898 274.088 200.236 cv
273.913 200.574 273.832 201.08 273.832 201.755 cv
273.832 202.429 273.913 202.936 274.088 203.273 cv
274.264 203.611 274.521 203.78 274.864 203.78 cv
275.208 203.78 275.465 203.611 275.641 203.273 cv
275.81 202.936 275.897 202.429 275.897 201.755 cv
275.897 201.08 275.81 200.574 275.641 200.236 cv
275.465 199.898 275.208 199.73 274.864 199.73 cv
274.864 199.203 mo
275.411 199.203 275.83 199.426 276.126 199.858 cv
276.417 200.296 276.564 200.931 276.564 201.755 cv
276.564 202.585 276.417 203.22 276.126 203.652 cv
275.83 204.083 275.411 204.3 274.864 204.3 cv
274.311 204.3 273.886 204.083 273.595 203.652 cv
273.305 203.22 273.163 202.585 273.163 201.755 cv
273.163 200.931 273.305 200.296 273.595 199.858 cv
273.886 199.426 274.311 199.203 274.864 199.203 cv
f
279.157 199.73 mo
278.813 199.73 278.557 199.898 278.381 200.236 cv
278.206 200.574 278.125 201.08 278.125 201.755 cv
278.125 202.429 278.206 202.936 278.381 203.273 cv
278.557 203.611 278.813 203.78 279.157 203.78 cv
279.501 203.78 279.758 203.611 279.934 203.273 cv
280.103 202.936 280.19 202.429 280.19 201.755 cv
280.19 201.08 280.103 200.574 279.934 200.236 cv
279.758 199.898 279.501 199.73 279.157 199.73 cv
279.157 199.203 mo
279.704 199.203 280.123 199.426 280.42 199.858 cv
280.71 200.296 280.857 200.931 280.857 201.755 cv
280.857 202.585 280.71 203.22 280.42 203.652 cv
280.123 204.083 279.704 204.3 279.157 204.3 cv
278.604 204.3 278.179 204.083 277.889 203.652 cv
277.598 203.22 277.456 202.585 277.456 201.755 cv
277.456 200.931 277.598 200.296 277.889 199.858 cv
278.179 199.426 278.604 199.203 279.157 199.203 cv
f
283.45 199.73 mo
283.105 199.73 282.85 199.898 282.674 200.236 cv
282.498 200.574 282.418 201.08 282.418 201.755 cv
282.418 202.429 282.498 202.936 282.674 203.273 cv
282.85 203.611 283.105 203.78 283.45 203.78 cv
283.795 203.78 284.051 203.611 284.227 203.273 cv
284.396 202.936 284.483 202.429 284.483 201.755 cv
284.483 201.08 284.396 200.574 284.227 200.236 cv
284.051 199.898 283.795 199.73 283.45 199.73 cv
283.45 199.203 mo
283.997 199.203 284.415 199.426 284.713 199.858 cv
285.003 200.296 285.151 200.931 285.151 201.755 cv
285.151 202.585 285.003 203.22 284.713 203.652 cv
284.415 204.083 283.997 204.3 283.45 204.3 cv
282.896 204.3 282.472 204.083 282.182 203.652 cv
281.891 203.22 281.749 202.585 281.749 201.755 cv
281.749 200.931 281.891 200.296 282.182 199.858 cv
282.472 199.426 282.896 199.203 283.45 199.203 cv
f
140.104 207.123 mo
140.813 207.123 li
142.176 209.148 li
143.533 207.123 li
144.249 207.123 li
142.507 209.701 li
142.507 212.042 li
141.839 212.042 li
141.839 209.701 li
140.104 207.123 li
cp
f
148.029 210.044 mo
148.029 210.341 li
145.241 210.341 li
145.268 210.759 145.39 211.084 145.619 211.3 cv
145.841 211.517 146.152 211.625 146.558 211.625 cv
146.787 211.625 147.016 211.597 147.232 211.543 cv
147.448 211.49 147.67 211.402 147.887 211.281 cv
147.887 211.854 li
147.67 211.949 147.448 212.023 147.219 212.063 cv
146.989 212.103 146.752 212.13 146.523 212.13 cv
145.93 212.13 145.463 211.962 145.119 211.625 cv
144.775 211.287 144.606 210.822 144.606 210.234 cv
144.606 209.633 144.769 209.154 145.092 208.796 cv
145.416 208.445 145.862 208.263 146.416 208.263 cv
146.915 208.263 147.307 208.425 147.596 208.742 cv
147.88 209.066 148.029 209.498 148.029 210.044 cv
147.421 209.869 mo
147.414 209.539 147.32 209.275 147.145 209.072 cv
146.962 208.876 146.719 208.776 146.422 208.776 cv
146.085 208.776 145.814 208.876 145.612 209.066 cv
145.41 209.255 145.289 209.525 145.261 209.869 cv
147.421 209.869 li
f
150.702 210.187 mo
150.209 210.187 149.871 210.248 149.682 210.355 cv
149.494 210.47 149.399 210.66 149.399 210.929 cv
149.399 211.145 149.467 211.321 149.608 211.443 cv
149.75 211.57 149.945 211.631 150.189 211.631 cv
150.526 211.631 150.796 211.517 150.998 211.273 cv
151.201 211.037 151.302 210.72 151.302 210.322 cv
151.302 210.187 li
150.702 210.187 li
151.91 209.937 mo
151.91 212.042 li
151.302 212.042 li
151.302 211.482 li
151.16 211.712 150.985 211.875 150.783 211.976 cv
150.58 212.077 150.324 212.13 150.027 212.13 cv
149.649 212.13 149.345 212.029 149.122 211.82 cv
148.899 211.611 148.792 211.328 148.792 210.97 cv
148.792 210.558 148.927 210.248 149.21 210.031 cv
149.487 209.822 149.898 209.714 150.452 209.714 cv
151.302 209.714 li
151.302 209.654 li
151.302 209.376 151.208 209.161 151.025 209.005 cv
150.844 208.857 150.587 208.776 150.256 208.776 cv
150.04 208.776 149.838 208.802 149.635 208.857 cv
149.432 208.912 149.243 208.986 149.062 209.08 cv
149.062 208.519 li
149.278 208.439 149.494 208.371 149.703 208.331 cv
149.912 208.291 150.115 208.263 150.316 208.263 cv
150.851 208.263 151.249 208.405 151.511 208.681 cv
151.774 208.958 151.91 209.376 151.91 209.937 cv
f
155.299 208.917 mo
155.231 208.877 155.157 208.85 155.076 208.83 cv
154.995 208.816 154.907 208.803 154.813 208.803 cv
154.468 208.803 154.205 208.917 154.022 209.14 cv
153.834 209.363 153.746 209.679 153.746 210.099 cv
153.746 212.042 li
153.139 212.042 li
153.139 208.351 li
153.746 208.351 li
153.746 208.924 li
153.867 208.702 154.036 208.533 154.239 208.425 cv
154.441 208.317 154.691 208.263 154.988 208.263 cv
155.028 208.263 155.076 208.269 155.13 208.269 cv
155.177 208.276 155.231 208.283 155.299 208.296 cv
155.299 208.917 li
f
158.288 208.458 mo
158.288 209.033 li
158.113 208.951 157.938 208.884 157.756 208.836 cv
157.566 208.796 157.378 208.769 157.182 208.769 cv
156.878 208.769 156.648 208.817 156.5 208.912 cv
156.352 209.005 156.277 209.14 156.277 209.322 cv
156.277 209.464 156.332 209.572 156.439 209.654 cv
156.547 209.735 156.763 209.816 157.087 209.882 cv
157.296 209.93 li
157.729 210.025 158.032 210.16 158.214 210.322 cv
158.391 210.49 158.484 210.726 158.484 211.024 cv
158.484 211.368 158.35 211.638 158.079 211.833 cv
157.81 212.037 157.432 212.13 156.959 212.13 cv
156.756 212.13 156.554 212.111 156.338 212.078 cv
156.122 212.042 155.899 211.989 155.663 211.908 cv
155.663 211.281 li
155.886 211.402 156.108 211.49 156.325 211.543 cv
156.541 211.604 156.756 211.632 156.973 211.632 cv
157.256 211.632 157.479 211.584 157.634 211.49 cv
157.783 211.396 157.863 211.253 157.863 211.072 cv
157.863 210.909 157.803 210.781 157.694 210.693 cv
157.587 210.605 157.344 210.517 156.966 210.437 cv
156.756 210.39 li
156.378 210.308 156.102 210.187 155.939 210.025 cv
155.771 209.863 155.69 209.64 155.69 209.349 cv
155.69 209.005 155.812 208.736 156.055 208.546 cv
156.297 208.357 156.648 208.263 157.107 208.263 cv
157.331 208.263 157.539 208.283 157.742 208.317 cv
157.938 208.351 158.12 208.398 158.288 208.458 cv
f
23.3062 196.953 mo
25.5562 196.953 li
f
23.3062 196.953 mo
25.5562 196.953 li
@
274.406 196.953 mo
272.156 196.953 li
f
274.406 196.953 mo
272.156 196.953 li
@
19.8013 194.927 mo
19.457 194.927 19.2002 195.095 19.0249 195.433 cv
18.8496 195.771 18.7686 196.277 18.7686 196.952 cv
18.7686 197.626 18.8496 198.132 19.0249 198.47 cv
19.2002 198.808 19.457 198.976 19.8013 198.976 cv
20.1455 198.976 20.4019 198.808 20.5771 198.47 cv
20.7461 198.132 20.834 197.626 20.834 196.952 cv
20.834 196.277 20.7461 195.771 20.5771 195.433 cv
20.4019 195.095 20.1455 194.927 19.8013 194.927 cv
19.8013 194.4 mo
20.3477 194.4 20.7666 194.623 21.0635 195.054 cv
21.3535 195.494 21.502 196.128 21.502 196.952 cv
21.502 197.782 21.3535 198.417 21.0635 198.849 cv
20.7666 199.281 20.3477 199.497 19.8013 199.497 cv
19.2476 199.497 18.8223 199.281 18.5322 198.849 cv
18.2417 198.417 18.1001 197.782 18.1001 196.952 cv
18.1001 196.128 18.2417 195.494 18.5322 195.054 cv
18.8223 194.623 19.2476 194.4 19.8013 194.4 cv
f
23.3062 158.072 mo
25.5562 158.072 li
f
23.3062 158.072 mo
25.5562 158.072 li
@
274.406 158.072 mo
272.156 158.072 li
f
274.406 158.072 mo
272.156 158.072 li
@
14.6968 159.968 mo
17.019 159.968 li
17.019 160.528 li
13.8936 160.528 li
13.8936 159.968 li
14.1436 159.712 14.4878 159.361 14.9263 158.915 cv
15.3584 158.477 15.6353 158.193 15.75 158.064 cv
15.9658 157.829 16.1143 157.626 16.1953 157.457 cv
16.2764 157.295 16.3237 157.126 16.3237 156.964 cv
16.3237 156.708 16.229 156.492 16.0469 156.33 cv
15.8647 156.168 15.6284 156.081 15.3315 156.081 cv
15.1221 156.081 14.8994 156.121 14.6699 156.188 cv
14.4404 156.262 14.1904 156.371 13.9272 156.519 cv
13.9272 155.844 li
14.1973 155.736 14.4473 155.655 14.6768 155.601 cv
14.9063 155.547 15.1221 155.521 15.3179 155.521 cv
15.8242 155.521 16.229 155.648 16.5327 155.905 cv
16.8369 156.161 16.9917 156.499 16.9917 156.924 cv
16.9917 157.126 16.9512 157.323 16.877 157.498 cv
16.8027 157.681 16.668 157.896 16.4653 158.139 cv
16.4116 158.207 16.2358 158.389 15.939 158.692 cv
15.6421 158.996 15.23 159.421 14.6968 159.968 cv
f
19.8403 156.046 mo
19.4961 156.046 19.2397 156.215 19.0645 156.553 cv
18.8887 156.89 18.8076 157.396 18.8076 158.072 cv
18.8076 158.747 18.8887 159.253 19.0645 159.59 cv
19.2397 159.928 19.4961 160.097 19.8403 160.097 cv
20.1846 160.097 20.4414 159.928 20.6167 159.59 cv
20.7856 159.253 20.873 158.747 20.873 158.072 cv
20.873 157.396 20.7856 156.89 20.6167 156.553 cv
20.4414 156.215 20.1846 156.046 19.8403 156.046 cv
19.8403 155.52 mo
20.3872 155.52 20.8057 155.743 21.1025 156.175 cv
21.3931 156.614 21.5415 157.248 21.5415 158.072 cv
21.5415 158.902 21.3931 159.536 21.1025 159.968 cv
20.8057 160.4 20.3872 160.616 19.8403 160.616 cv
19.2871 160.616 18.8618 160.4 18.5713 159.968 cv
18.2813 159.536 18.1396 158.902 18.1396 158.072 cv
18.1396 157.248 18.2813 156.614 18.5713 156.175 cv
18.8618 155.743 19.2871 155.52 19.8403 155.52 cv
f
23.3062 119.192 mo
25.5562 119.192 li
f
23.3062 119.192 mo
25.5562 119.192 li
@
274.406 119.192 mo
272.156 119.192 li
f
274.406 119.192 mo
272.156 119.192 li
@
15.7939 117.308 mo
14.1133 119.934 li
15.7939 119.934 li
15.7939 117.308 li
15.6187 116.728 mo
16.4556 116.728 li
16.4556 119.934 li
17.1577 119.934 li
17.1577 120.487 li
16.4556 120.487 li
16.4556 121.648 li
15.7939 121.648 li
15.7939 120.487 li
13.5732 120.487 li
13.5732 119.847 li
15.6187 116.728 li
cp
f
19.6821 117.167 mo
19.3379 117.167 19.0815 117.335 18.9058 117.673 cv
18.7305 118.01 18.6494 118.517 18.6494 119.192 cv
18.6494 119.867 18.7305 120.373 18.9058 120.71 cv
19.0815 121.048 19.3379 121.217 19.6821 121.217 cv
20.0264 121.217 20.2832 121.048 20.4585 120.71 cv
20.6274 120.373 20.7148 119.867 20.7148 119.192 cv
20.7148 118.517 20.6274 118.01 20.4585 117.673 cv
20.2832 117.335 20.0264 117.167 19.6821 117.167 cv
19.6821 116.64 mo
20.229 116.64 20.6475 116.863 20.9443 117.295 cv
21.2349 117.733 21.3833 118.368 21.3833 119.192 cv
21.3833 120.022 21.2349 120.656 20.9443 121.089 cv
20.6475 121.521 20.229 121.736 19.6821 121.736 cv
19.1289 121.736 18.7036 121.521 18.4131 121.089 cv
18.123 120.656 17.9814 120.022 17.9814 119.192 cv
17.9814 118.368 18.123 117.733 18.4131 117.295 cv
18.7036 116.863 19.1289 116.64 19.6821 116.64 cv
f
23.3062 80.312 mo
25.5562 80.312 li
f
23.3062 80.312 mo
25.5562 80.312 li
@
274.406 80.312 mo
272.156 80.312 li
f
274.406 80.312 mo
272.156 80.312 li
@
15.6108 80.0415 mo
15.3135 80.0415 15.0776 80.1494 14.9019 80.3521 cv
14.7266 80.5547 14.6387 80.8379 14.6387 81.189 cv
14.6387 81.5469 14.7266 81.8301 14.9019 82.0327 cv
15.0776 82.2354 15.3135 82.3364 15.6108 82.3364 cv
15.9077 82.3364 16.144 82.2354 16.3193 82.0327 cv
16.4951 81.8301 16.5825 81.5469 16.5825 81.189 cv
16.5825 80.8379 16.4951 80.5547 16.3193 80.3521 cv
16.144 80.1494 15.9077 80.0415 15.6108 80.0415 cv
16.9336 77.9556 mo
16.9336 78.5635 li
16.7651 78.4824 16.5962 78.4214 16.4272 78.3809 cv
16.252 78.3403 16.083 78.3203 15.9214 78.3203 cv
15.4756 78.3203 15.1382 78.4688 14.9087 78.7656 cv
14.6792 79.0625 14.5439 79.5151 14.5171 80.1089 cv
14.6455 79.9199 14.8076 79.7715 15.0034 79.6704 cv
15.1987 79.5688 15.415 79.5151 15.6514 79.5151 cv
16.144 79.5151 16.5356 79.6704 16.8188 79.9673 cv
17.1025 80.2642 17.251 80.6758 17.251 81.189 cv
17.251 81.6953 17.0957 82.1001 16.7988 82.4043 cv
16.5015 82.708 16.1035 82.8564 15.6108 82.8564 cv
15.0439 82.8564 14.605 82.6401 14.3081 82.208 cv
14.0044 81.7764 13.8555 81.1416 13.8555 80.3115 cv
13.8555 79.5352 14.0381 78.9141 14.4092 78.4551 cv
14.7739 77.9961 15.2734 77.7598 15.894 77.7598 cv
16.0562 77.7598 16.2251 77.7803 16.4004 77.8071 cv
16.5693 77.8408 16.7446 77.8882 16.9336 77.9556 cv
f
19.8228 78.2866 mo
19.4785 78.2866 19.2222 78.4556 19.0464 78.793 cv
18.8711 79.1304 18.79 79.6367 18.79 80.3115 cv
18.79 80.9868 18.8711 81.4932 19.0464 81.8306 cv
19.2222 82.168 19.4785 82.3369 19.8228 82.3369 cv
20.167 82.3369 20.4238 82.168 20.5991 81.8306 cv
20.7681 81.4932 20.8555 80.9868 20.8555 80.3115 cv
20.8555 79.6367 20.7681 79.1304 20.5991 78.793 cv
20.4238 78.4556 20.167 78.2866 19.8228 78.2866 cv
19.8228 77.7603 mo
20.3696 77.7603 20.7881 77.9829 21.085 78.415 cv
21.3755 78.8535 21.5239 79.4883 21.5239 80.3115 cv
21.5239 81.1421 21.3755 81.7764 21.085 82.2085 cv
20.7881 82.6406 20.3696 82.8564 19.8228 82.8564 cv
19.2695 82.8564 18.8442 82.6406 18.5537 82.2085 cv
18.2637 81.7764 18.1221 81.1421 18.1221 80.3115 cv
18.1221 79.4883 18.2637 78.8535 18.5537 78.415 cv
18.8442 77.9829 19.2695 77.7603 19.8228 77.7603 cv
f
23.3062 41.4321 mo
25.5562 41.4321 li
f
23.3062 41.4321 mo
25.5562 41.4321 li
@
274.406 41.4321 mo
272.156 41.4321 li
f
274.406 41.4321 mo
272.156 41.4321 li
@
15.5122 41.5532 mo
15.1948 41.5532 14.9453 41.6406 14.7627 41.8096 cv
14.5806 41.9785 14.4927 42.208 14.4927 42.5049 cv
14.4927 42.8018 14.5806 43.0381 14.7627 43.207 cv
14.9453 43.3755 15.1948 43.4565 15.5122 43.4565 cv
15.8228 43.4565 16.0723 43.3755 16.2544 43.2002 cv
16.437 43.0313 16.5313 42.8018 16.5313 42.5049 cv
16.5313 42.208 16.437 41.9785 16.2612 41.8096 cv
16.0791 41.6406 15.8291 41.5532 15.5122 41.5532 cv
14.8438 41.2695 mo
14.5605 41.2021 14.3374 41.0674 14.1758 40.8716 cv
14.0137 40.6758 13.9395 40.4395 13.9395 40.1558 cv
13.9395 39.7646 14.0742 39.4541 14.3579 39.2246 cv
14.6348 38.9951 15.0195 38.8799 15.5122 38.8799 cv
15.998 38.8799 16.3828 38.9951 16.6665 39.2246 cv
16.9429 39.4541 17.085 39.7646 17.085 40.1558 cv
17.085 40.4395 17.0039 40.6758 16.8418 40.8716 cv
16.6797 41.0674 16.4639 41.2021 16.1802 41.2695 cv
16.4976 41.3438 16.7476 41.4922 16.9297 41.7085 cv
17.105 41.9243 17.1997 42.1943 17.1997 42.5049 cv
17.1997 42.9844 17.0513 43.3486 16.7607 43.5986 cv
16.4639 43.855 16.0522 43.9766 15.5122 43.9766 cv
14.9653 43.9766 14.5469 43.855 14.2568 43.5986 cv
13.9663 43.3486 13.8247 42.9844 13.8247 42.5049 cv
13.8247 42.1943 13.9121 41.9243 14.0947 41.7085 cv
14.27 41.4922 14.52 41.3438 14.8438 41.2695 cv
14.6011 40.2168 mo
14.6011 40.4731 14.6753 40.6758 14.8369 40.8174 cv
14.999 40.959 15.2217 41.0264 15.5122 41.0264 cv
15.7954 41.0264 16.0186 40.959 16.1802 40.8174 cv
16.3423 40.6758 16.4233 40.4731 16.4233 40.2168 cv
16.4233 39.96 16.3423 39.7646 16.1802 39.6226 cv
16.0186 39.481 15.7954 39.4067 15.5122 39.4067 cv
15.2217 39.4067 14.999 39.481 14.8369 39.6226 cv
14.6753 39.7646 14.6011 39.96 14.6011 40.2168 cv
f
19.8052 39.4067 mo
19.4609 39.4067 19.2046 39.5752 19.0293 39.9131 cv
18.8535 40.2505 18.7725 40.7568 18.7725 41.4316 cv
18.7725 42.1064 18.8535 42.6128 19.0293 42.9502 cv
19.2046 43.2881 19.4609 43.4565 19.8052 43.4565 cv
20.1494 43.4565 20.4063 43.2881 20.5815 42.9502 cv
20.7505 42.6128 20.8379 42.1064 20.8379 41.4316 cv
20.8379 40.7568 20.7505 40.2505 20.5815 39.9131 cv
20.4063 39.5752 20.1494 39.4067 19.8052 39.4067 cv
19.8052 38.8799 mo
20.3521 38.8799 20.7705 39.103 21.0674 39.5352 cv
21.3579 39.9736 21.5063 40.6084 21.5063 41.4316 cv
21.5063 42.2617 21.3579 42.8965 21.0674 43.3281 cv
20.7705 43.7603 20.3521 43.9766 19.8052 43.9766 cv
19.252 43.9766 18.8267 43.7603 18.5361 43.3281 cv
18.2461 42.8965 18.1045 42.2617 18.1045 41.4316 cv
18.1045 40.6084 18.2461 39.9736 18.5361 39.5352 cv
18.8267 39.103 19.252 38.8799 19.8052 38.8799 cv
f
23.3062 2.55225 mo
25.5562 2.55225 li
f
23.3062 2.55225 mo
25.5562 2.55225 li
@
274.406 2.55225 mo
272.156 2.55225 li
f
274.406 2.55225 mo
272.156 2.55225 li
@
10.186 4.44824 mo
11.2725 4.44824 li
11.2725 .695313 li
10.0913 .931641 li
10.0913 .324219 li
11.2661 .0878906 li
11.9341 .0878906 li
11.9341 4.44824 li
13.021 4.44824 li
13.021 5.00879 li
10.186 5.00879 li
10.186 4.44824 li
cp
f
15.7886 .526367 mo
15.4443 .526367 15.188 .695313 15.0122 1.03271 cv
14.8369 1.37012 14.7559 1.87646 14.7559 2.55176 cv
14.7559 3.22656 14.8369 3.73291 15.0122 4.07031 cv
15.188 4.40771 15.4443 4.57666 15.7886 4.57666 cv
16.1328 4.57666 16.3896 4.40771 16.5649 4.07031 cv
16.7339 3.73291 16.8213 3.22656 16.8213 2.55176 cv
16.8213 1.87646 16.7339 1.37012 16.5649 1.03271 cv
16.3896 .695313 16.1328 .526367 15.7886 .526367 cv
15.7886 0 mo
16.3354 0 16.7539 .222656 17.0508 .654785 cv
17.3413 1.09375 17.4897 1.72803 17.4897 2.55176 cv
17.4897 3.38184 17.3413 4.0166 17.0508 4.44824 cv
16.7539 4.88037 16.3354 5.09619 15.7886 5.09619 cv
15.2354 5.09619 14.8101 4.88037 14.5195 4.44824 cv
14.2295 4.0166 14.0879 3.38184 14.0879 2.55176 cv
14.0879 1.72803 14.2295 1.09375 14.5195 .654785 cv
14.8101 .222656 15.2354 0 15.7886 0 cv
f
20.0815 .526367 mo
19.7373 .526367 19.481 .695313 19.3052 1.03271 cv
19.1299 1.37012 19.0488 1.87646 19.0488 2.55176 cv
19.0488 3.22656 19.1299 3.73291 19.3052 4.07031 cv
19.481 4.40771 19.7373 4.57666 20.0815 4.57666 cv
20.4258 4.57666 20.6821 4.40771 20.8579 4.07031 cv
21.0264 3.73291 21.1143 3.22656 21.1143 2.55176 cv
21.1143 1.87646 21.0264 1.37012 20.8579 1.03271 cv
20.6821 .695313 20.4258 .526367 20.0815 .526367 cv
20.0815 0 mo
20.6284 0 21.0469 .222656 21.3438 .654785 cv
21.6343 1.09375 21.7827 1.72803 21.7827 2.55176 cv
21.7827 3.38184 21.6343 4.0166 21.3438 4.44824 cv
21.0469 4.88037 20.6284 5.09619 20.0815 5.09619 cv
19.5283 5.09619 19.103 4.88037 18.8125 4.44824 cv
18.5225 4.0166 18.3809 3.38184 18.3809 2.55176 cv
18.3809 1.72803 18.5225 1.09375 18.8125 .654785 cv
19.103 .222656 19.5283 0 20.0815 0 cv
f
.662109 134.569 mo
.662109 135.055 .844238 135.44 1.20215 135.724 cv
1.56641 136.007 2.05225 136.149 2.67334 136.149 cv
3.29443 136.149 3.78711 136.007 4.14502 135.724 cv
4.50928 135.44 4.68506 135.055 4.68506 134.569 cv
4.68506 134.09 4.50928 133.706 4.14502 133.422 cv
3.78711 133.138 3.29443 132.996 2.67334 132.996 cv
2.05225 132.996 1.56641 133.138 1.20215 133.422 cv
.844238 133.706 .662109 134.09 .662109 134.569 cv
5.04248 133.638 mo
5.99463 132.76 li
5.99463 133.563 li
5.20459 134.292 li
5.20459 134.367 5.21143 134.42 5.21143 134.461 cv
5.21143 134.502 5.21826 134.535 5.21826 134.569 cv
5.21826 135.264 4.98877 135.818 4.52979 136.229 cv
4.0708 136.648 3.45654 136.851 2.67334 136.851 cv
1.89697 136.851 1.27637 136.648 .817383 136.229 cv
.358398 135.818 .12207 135.264 .12207 134.569 cv
.12207 133.88 .358398 133.334 .817383 132.916 cv
1.27637 132.503 1.89697 132.294 2.67334 132.294 cv
3.24707 132.294 3.73975 132.409 4.14502 132.638 cv
4.5498 132.868 4.85352 133.206 5.04248 133.638 cv
f
3.67236 131.343 mo
1.43799 131.343 li
1.43799 130.735 li
3.65234 130.735 li
4.00293 130.735 4.25977 130.668 4.43506 130.533 cv
4.61084 130.397 4.69824 130.195 4.69824 129.918 cv
4.69824 129.595 4.59717 129.331 4.3877 129.142 cv
4.17871 128.953 3.89502 128.859 3.53076 128.859 cv
1.43799 128.859 li
1.43799 128.251 li
5.13037 128.251 li
5.13037 128.859 li
4.56348 128.859 li
4.79297 129.007 4.95508 129.183 5.06299 129.372 cv
5.16406 129.567 5.21826 129.79 5.21826 130.047 cv
5.21826 130.472 5.08984 130.796 4.82666 131.012 cv
4.57031 131.235 4.18555 131.343 3.67236 131.343 cv
f
3.27441 125.322 mo
3.27441 125.814 3.33496 126.152 3.44287 126.341 cv
3.55762 126.529 3.74658 126.624 4.0166 126.624 cv
4.23242 126.624 4.4082 126.557 4.52979 126.415 cv
4.65771 126.273 4.71875 126.078 4.71875 125.834 cv
4.71875 125.497 4.604 125.227 4.36084 125.024 cv
4.12451 124.822 3.80762 124.721 3.40918 124.721 cv
3.27441 124.721 li
3.27441 125.322 li
3.02441 124.113 mo
5.13037 124.113 li
5.13037 124.721 li
4.57031 124.721 li
4.7998 124.863 4.96191 125.038 5.06299 125.24 cv
5.16406 125.443 5.21826 125.7 5.21826 125.997 cv
5.21826 126.375 5.1167 126.678 4.90771 126.901 cv
4.69824 127.124 4.41504 127.232 4.05713 127.232 cv
3.64551 127.232 3.33496 127.097 3.11914 126.813 cv
2.90967 126.537 2.80176 126.125 2.80176 125.571 cv
2.80176 124.721 li
2.74072 124.721 li
2.46436 124.721 2.24805 124.815 2.09277 124.998 cv
1.94434 125.18 1.86328 125.437 1.86328 125.767 cv
1.86328 125.983 1.89063 126.186 1.94434 126.388 cv
1.99854 126.591 2.07275 126.78 2.16699 126.962 cv
1.60693 126.962 li
1.52588 126.746 1.4585 126.529 1.41797 126.321 cv
1.37744 126.111 1.35059 125.909 1.35059 125.707 cv
1.35059 125.173 1.49219 124.775 1.76904 124.512 cv
2.0459 124.249 2.46436 124.113 3.02441 124.113 cv
f
2.90283 119.793 mo
5.13037 119.793 li
5.13037 120.401 li
2.92285 120.401 li
2.57227 120.401 2.31543 120.475 2.14014 120.61 cv
1.96436 120.745 1.87695 120.948 1.87695 121.218 cv
1.87695 121.548 1.98486 121.805 2.19385 121.994 cv
2.40332 122.183 2.68701 122.277 3.04443 122.277 cv
5.13037 122.277 li
5.13037 122.885 li
1.43799 122.885 li
1.43799 122.277 li
2.01172 122.277 li
1.7959 122.136 1.62695 121.967 1.51904 121.764 cv
1.41113 121.568 1.3501 121.339 1.3501 121.083 cv
1.3501 120.664 1.48535 120.34 1.74854 120.124 cv
2.01172 119.908 2.39648 119.793 2.90283 119.793 cv
f
.39209 117.984 mo
1.43799 117.984 li
1.43799 116.735 li
1.91064 116.735 li
1.91064 117.984 li
3.91553 117.984 li
4.21924 117.984 4.41504 117.944 4.49609 117.863 cv
4.5835 117.782 4.62402 117.613 4.62402 117.356 cv
4.62402 116.735 li
5.13037 116.735 li
5.13037 117.356 li
5.13037 117.829 5.04248 118.153 4.86719 118.328 cv
4.69189 118.504 4.37451 118.592 3.91553 118.592 cv
1.91064 118.592 li
1.91064 119.038 li
1.43799 119.038 li
1.43799 118.592 li
.39209 118.592 li
.39209 117.984 li
f
1.43848 115.332 mo
5.13037 115.332 li
5.13037 115.938 li
1.43848 115.938 li
1.43848 115.332 li
cp
0 115.332 mo
.769531 115.332 li
.769531 115.938 li
0 115.938 li
0 115.332 li
cp
f
.39209 113.462 mo
1.43799 113.462 li
1.43799 112.213 li
1.91064 112.213 li
1.91064 113.462 li
3.91553 113.462 li
4.21924 113.462 4.41504 113.421 4.49609 113.34 cv
4.5835 113.259 4.62402 113.091 4.62402 112.834 cv
4.62402 112.213 li
5.13037 112.213 li
5.13037 112.834 li
5.13037 113.307 5.04248 113.631 4.86719 113.806 cv
4.69189 113.981 4.37451 114.069 3.91553 114.069 cv
1.91064 114.069 li
1.91064 114.515 li
1.43799 114.515 li
1.43799 114.069 li
.39209 114.069 li
.39209 113.462 li
f
5.46777 109.877 mo
5.8999 110.053 6.18994 110.222 6.3252 110.383 cv
6.45996 110.546 6.52783 110.762 6.52783 111.032 cv
6.52783 111.518 li
6.02148 111.518 li
6.02148 111.16 li
6.02148 110.998 5.98096 110.87 5.8999 110.775 cv
5.81885 110.681 5.63672 110.58 5.33984 110.465 cv
5.06982 110.357 li
1.43799 111.849 li
1.43799 111.208 li
4.32715 110.053 li
1.43799 108.899 li
1.43799 108.258 li
5.46777 109.877 li
f
1.86328 103.843 mo
1.86328 104.167 1.9917 104.423 2.24805 104.612 cv
2.50439 104.801 2.84863 104.896 3.2876 104.896 cv
3.73291 104.896 4.07715 104.809 4.33398 104.62 cv
4.59033 104.431 4.71191 104.174 4.71191 103.843 cv
4.71191 103.52 4.59033 103.263 4.33398 103.074 cv
4.07715 102.885 3.73291 102.791 3.2876 102.791 cv
2.85547 102.791 2.50439 102.885 2.24805 103.074 cv
1.9917 103.263 1.86328 103.52 1.86328 103.843 cv
1.3501 103.843 mo
1.3501 103.316 1.52588 102.905 1.86328 102.602 cv
2.20752 102.304 2.68018 102.148 3.2876 102.148 cv
3.89502 102.148 4.36768 102.304 4.70508 102.602 cv
5.04932 102.905 5.21777 103.316 5.21777 103.843 cv
5.21777 104.376 5.04932 104.794 4.70508 105.092 cv
4.36768 105.389 3.89502 105.538 3.2876 105.538 cv
2.68018 105.538 2.20752 105.389 1.86328 105.092 cv
1.52588 104.794 1.3501 104.376 1.3501 103.843 cv
f
.000488281 99.2734 mo
.506348 99.2734 li
.506348 99.854 li
.506348 100.07 .553711 100.225 .641602 100.306 cv
.729492 100.394 .884277 100.435 1.11377 100.435 cv
1.43799 100.435 li
1.43799 99.4355 li
1.91064 99.4355 li
1.91064 100.435 li
5.13037 100.435 li
5.13037 101.042 li
1.91064 101.042 li
1.91064 101.622 li
1.43799 101.622 li
1.43799 101.042 li
1.18164 101.042 li
.776367 101.042 .472656 100.947 .283691 100.758 cv
.0947266 100.569 .000488281 100.266 .000488281 99.8472 cv
.000488281 99.2734 li
f
.587402 92.9082 mo
1.28955 92.9082 li
1.08691 93.1377 .931641 93.374 .82373 93.6304 cv
.722656 93.8867 .668457 94.1504 .668457 94.4336 cv
.668457 95.0005 .84375 95.4326 1.18799 95.7295 cv
1.53223 96.0264 2.02539 96.1753 2.67334 96.1753 cv
3.32129 96.1753 3.8208 96.0264 4.16504 95.7295 cv
4.50928 95.4326 4.67773 95.0005 4.67773 94.4336 cv
4.67773 94.1504 4.63086 93.8867 4.52246 93.6304 cv
4.42139 93.374 4.26611 93.1377 4.05713 92.9082 cv
4.75195 92.9082 li
4.91406 93.1445 5.02881 93.394 5.10303 93.6504 cv
5.17725 93.9072 5.21777 94.1841 5.21777 94.4741 cv
5.21777 95.2168 4.99512 95.8037 4.54297 96.2358 cv
4.09082 96.668 3.46973 96.877 2.67334 96.877 cv
1.8833 96.877 1.2627 96.668 .803223 96.2358 cv
.351074 95.8037 .121582 95.2168 .121582 94.4741 cv
.121582 94.1772 .162109 93.9004 .236328 93.644 cv
.317383 93.3872 .432129 93.1377 .587402 92.9082 cv
f
3.27441 90.2285 mo
3.27441 90.7212 3.33496 91.0586 3.44287 91.2476 cv
3.55762 91.4365 3.74658 91.5313 4.0166 91.5313 cv
4.23242 91.5313 4.4082 91.4634 4.52979 91.3218 cv
4.65771 91.1802 4.71875 90.9844 4.71875 90.7412 cv
4.71875 90.4038 4.604 90.1338 4.36084 89.9312 cv
4.12451 89.7285 3.80762 89.6274 3.40918 89.6274 cv
3.27441 89.6274 li
3.27441 90.2285 li
3.02441 89.02 mo
5.13037 89.02 li
5.13037 89.6274 li
4.57031 89.6274 li
4.7998 89.7695 4.96191 89.9448 5.06299 90.1475 cv
5.16406 90.3496 5.21826 90.6064 5.21826 90.9033 cv
5.21826 91.2813 5.1167 91.585 4.90771 91.8076 cv
4.69824 92.0303 4.41504 92.1387 4.05713 92.1387 cv
3.64551 92.1387 3.33496 92.0034 3.11914 91.7202 cv
2.90967 91.4434 2.80176 91.0313 2.80176 90.478 cv
2.80176 89.6274 li
2.74072 89.6274 li
2.46436 89.6274 2.24805 89.7222 2.09277 89.9043 cv
1.94434 90.0864 1.86328 90.3428 1.86328 90.6738 cv
1.86328 90.8896 1.89063 91.0923 1.94434 91.2949 cv
1.99854 91.4971 2.07275 91.6865 2.16699 91.8687 cv
1.60693 91.8687 li
1.52588 91.6523 1.4585 91.4365 1.41797 91.2275 cv
1.37744 91.0181 1.35059 90.8154 1.35059 90.6133 cv
1.35059 90.0796 1.49219 89.6816 1.76904 89.4185 cv
2.0459 89.1553 2.46436 89.02 3.02441 89.02 cv
f
2.00488 85.6318 mo
1.96436 85.6992 1.9375 85.7734 1.91699 85.8545 cv
1.90381 85.9355 1.89014 86.0229 1.89014 86.1177 cv
1.89014 86.4619 2.00488 86.7251 2.22754 86.9072 cv
2.45068 87.0962 2.76758 87.1841 3.18604 87.1841 cv
5.13037 87.1841 li
5.13037 87.7915 li
1.43799 87.7915 li
1.43799 87.1841 li
2.01172 87.1841 li
1.78906 87.0625 1.62012 86.894 1.51221 86.6914 cv
1.4043 86.4888 1.3501 86.2393 1.3501 85.9424 cv
1.3501 85.9014 1.35693 85.8545 1.35693 85.8003 cv
1.36377 85.7529 1.37061 85.6992 1.38379 85.6318 cv
2.00488 85.6318 li
f
3.2876 82.3447 mo
2.84229 82.3447 2.49805 82.439 2.24121 82.6211 cv
1.98486 82.8101 1.85645 83.0601 1.85645 83.3774 cv
1.85645 83.7012 1.98486 83.9512 2.24121 84.1333 cv
2.49805 84.3223 2.84229 84.4102 3.2876 84.4102 cv
3.73291 84.4102 4.08398 84.3223 4.34082 84.1333 cv
4.59717 83.9512 4.71875 83.7012 4.71875 83.3774 cv
4.71875 83.0601 4.59717 82.8101 4.34082 82.6211 cv
4.08398 82.439 3.73291 82.3447 3.2876 82.3447 cv
1.99854 84.4102 mo
1.78223 84.2886 1.62012 84.1265 1.51221 83.9307 cv
1.4043 83.7349 1.35059 83.499 1.35059 83.2285 cv
1.35059 82.7832 1.53271 82.4189 1.88379 82.1353 cv
2.24121 81.8584 2.70703 81.7168 3.2876 81.7168 cv
3.86816 81.7168 4.34082 81.8584 4.69141 82.1353 cv
5.04248 82.4189 5.21826 82.7832 5.21826 83.2285 cv
5.21826 83.499 5.16406 83.7349 5.06299 83.9307 cv
4.96143 84.1265 4.7998 84.2886 4.57666 84.4102 cv
5.13037 84.4102 li
5.13037 85.0176 li
.000488281 85.0176 li
.000488281 84.4102 li
1.99854 84.4102 li
f
1.86328 79.2798 mo
1.86328 79.604 1.9917 79.8604 2.24805 80.0493 cv
2.50439 80.2383 2.84863 80.333 3.2876 80.333 cv
3.73291 80.333 4.07715 80.2451 4.33398 80.0562 cv
4.59033 79.8672 4.71191 79.6108 4.71191 79.2798 cv
4.71191 78.9561 4.59033 78.6992 4.33398 78.5103 cv
4.07715 78.3213 3.73291 78.2271 3.2876 78.2271 cv
2.85547 78.2271 2.50439 78.3213 2.24805 78.5103 cv
1.9917 78.6992 1.86328 78.9561 1.86328 79.2798 cv
1.3501 79.2798 mo
1.3501 78.7534 1.52588 78.3418 1.86328 78.0381 cv
2.20752 77.7407 2.68018 77.5854 3.2876 77.5854 cv
3.89502 77.5854 4.36768 77.7407 4.70508 78.0381 cv
5.04932 78.3418 5.21777 78.7534 5.21777 79.2798 cv
5.21777 79.813 5.04932 80.2314 4.70508 80.5288 cv
4.36768 80.8257 3.89502 80.9741 3.2876 80.9741 cv
2.68018 80.9741 2.20752 80.8257 1.86328 80.5288 cv
1.52588 80.2314 1.3501 79.813 1.3501 79.2798 cv
f
2.90283 73.5088 mo
5.13037 73.5088 li
5.13037 74.1162 li
2.92285 74.1162 li
2.57227 74.1162 2.31543 74.1904 2.14014 74.3257 cv
1.96436 74.4604 1.87695 74.6631 1.87695 74.9331 cv
1.87695 75.2637 1.98486 75.5205 2.19385 75.7095 cv
2.40332 75.8984 2.68701 75.9927 3.04443 75.9927 cv
5.13037 75.9927 li
5.13037 76.6001 li
1.43799 76.6001 li
1.43799 75.9927 li
2.01172 75.9927 li
1.7959 75.8511 1.62695 75.6821 1.51904 75.4795 cv
1.41113 75.2842 1.3501 75.0547 1.3501 74.7979 cv
1.3501 74.3794 1.48535 74.0557 1.74854 73.8394 cv
2.01172 73.6235 2.39648 73.5088 2.90283 73.5088 cv
f
3.01074 70.8291 mo
3.55029 70.8291 li
3.55029 72.604 li
3.01074 72.604 li
3.01074 70.8291 li
cp
f
4.56982 69.6611 mo
4.56982 68.5747 li
.816895 68.5747 li
1.05322 69.7559 li
.445801 69.7559 li
.209473 68.5815 li
.209473 67.9131 li
4.56982 67.9131 li
4.56982 66.8262 li
5.13037 66.8262 li
5.13037 69.6611 li
4.56982 69.6611 li
cp
f
.790039 63.6538 mo
3.41602 65.3345 li
3.41602 63.6538 li
.790039 63.6538 li
.209473 63.8291 mo
.209473 62.9922 li
3.41602 62.9922 li
3.41602 62.29 li
3.96924 62.29 li
3.96924 62.9922 li
5.13037 62.9922 li
5.13037 63.6538 li
3.96924 63.6538 li
3.96924 65.8745 li
3.32813 65.8745 li
.209473 63.8291 li
cp
f
.5625 lw
2 lc
23.3062 2.55225 mo
274.406 2.55225 li
@
274.406 196.953 mo
274.406 2.55176 li
@
23.3062 196.953 mo
274.406 196.953 li
@
23.3062 196.953 mo
23.3062 2.55176 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Rajesh Tyagi) ()%%Title: (004x006.eps)%%CreationDate: 26/05/15 4:49 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6q-#7>dl9<G^cd4*]28CaNZdc5EShLrUE1!YYhuq)5CV3J&\1nB;,n<'J($4"S:2A".kA&eLl>R_1Rm36r7#(<l>IW$s":0K%;bu_VOZ%;?D-D*4S)+''WO@G%Egd:LTOQ3P<>TC33CA@!:!:[>MPe4:V8g^)=1-mFDDbb#m<5a3CUDfRl/LTcHMX<*##?`5NEYH*%1R0QYR#g?i>.*.!I8r=B<QuspW+qA459I;b_k4-qC25Q+].OlbNs+$Z)h7oNr(`/ol7]Q;fBP'jXhO4N_;dF;YTM!]dqYc_)up9p%:ffchhNKC@;YK#?m7I!<UYTWa3Zj@Xr<u'HC,E[TX\X1IJc@9$9A?U=T:JusR^Gbc8q`riB$LNWaf"m(eH@3j/^8kPWg,I_XC61i%4IK4LqPaC+0tgkp]N/696A8J'o](FOA^rIKKmqGt-U5"Rlb*5E!U=bXEiFj))R%[0+;=41CR$iu!<DUQBn`lcl`Jlleo&udOS?`$%__FCilrX1h[]&g0_,7OB5AOL8.MkclFk]MmR\$hp9201^a3rbMl7,OIs48eO[BuqQ!k[`G;BuM\!HLl4IE0]T8$.i]O8>T7?I2C"%TNeOZ=0Fc(/a^mq_G&7;rce2<P\LapVc0]R/jR71#9FjRaW6mL"D@1rF7mZ\85Icd#:o0A0cQc&ohqVb=Th/P'PO';VDnMBTUI>!%:Y5-cZLH=cnZu?YV7M\:FWI+>3^2):qQsMI\*7+_Ks`H>Ip!Q<Z7N(g=lhDol+1!;Fg6tmU?:B@XQ@#q$btXJeg_H?<j@I!(5qs`%=N!8^1-R:V/IUGgQgo@39])NX;gKlU'I/$`Dt<'PkSenZ/`[4&YnloK3Mk&`,Q,J@a:WkFhcpfd?/u;VnJ?5!T*U:rM*a[ln.YW;%^K?@U+\jL]MB?UW?hfJ#b%3-am=UX%),ht^.H)Y&PB'EtVmKCV.!DDV[h5f0s'[M?%mLX=D*c<%I7@ELs'dS@O1-g.$@N`d_b^2a%gsPi9:J*X5i$[)BrpZ,[,1R;U=,J(SEZIEf\c2(VU\%E_@kB/h/f2YjV&h(`FA][b12egLKE&hMa;rl+j::(E>goUl++@ZNWo(l>%PmMjT5Ht]=Qca?nk-dW'7kmj-juU_/KkhW*:,Raj!k/QoVGuuJ3\#90Qc]adk:OPrUU4M_Nh&M7n'gIl+/PK2-Il_^k#=5Q6CIbH%qWh9GI4(<Af'6BRQ]n?E<4f]tHhrM9HTK(sh.pRSAZm,9+tcH7gQMi>Q.*qH;Rl?n<E7+)r(F_tb5Q)nIH(4%s0*H[J)4Q/09nCh%>2oLWs(n2(pAWKiN^J:X%`dt@It[rPir,_R2E'c;mk=X+b*GZ,`;<4-D/ReZhI$+T&c\doa0rl]g91',s$cqhJ!s4kb]690b2n4b%QgfM&%tDtfd=8E46D'Kh]h*2SqIV/D`,A8X91k?F2=6R+PtUBHnfROke9(4tKL5^Zs2lXgbi!;0AL72DQ+H`4P\pi`RhUUj8]lt*%g4W(FP=+k4akJG!^X;ua53&jKjeO6um6]__f('fP<,OGu>jlOP$%9glE!(#]Uc)+Zq_8-5oI6&X'6qh=P-DMG,^^8/CfUUB:gIWi%&Xl@-#g-g$;aYEA(A$f'\da4Ee8l$"Dj.VK_0$/a9;e$7GL[Fu)$/GM#jl2JU34jYHmbU]&%kmV1ojo#PrP>]@VXi79jZR*GJ2$S%5bYrd`@Og!U'?$M^d/F&qG62T]IJkYQe.EaKEk4OH)m?%5;Xj2WMW.]@$WogU@iaOS^lDd2C>f8`$iMaL0$mbk(@/?.j=RjRBD-/%\>5Q"mA1/,0jP;2kSj&DplE'r&2,._e+@b:j>ES[WQ-GhKs$nG:c9<%lpFbImMJX[B(-7$!feA*gbQgf\.f3=XEF0.'R]I$:l+nT%Bh3:#%($Q:3%-dcoi&r67+<dq.^^,l.5;_Ij[Rp!-+?=A[jdt!@I;?gW`o,WBp8Z]]/!t-i@pXuXAP-poQ..6&kpX7RbTiAgmZN2%ak2]KR4`2:%ZO']1t-D,h\%7Tc/^p%\7%L@T;pT"q\YWkA#SX44l^CY\Ys)\[:+o`aFhYmSpF,,>@[@ohXG4k;GK1bZni+iS#EuA%T-UcDj[C=#ePE__5IHZ9KIZn'R)I/&)sNr46i6M`]WP)FBj9gJ^C923dT+Er@b*uk;r#*15`CH5?''?/rJ5u;1>E"q*p=bM$/nkH%rgH&;X!bS'eQH2HHC%d>A+6DE1Lc@#gKI\)_'J/`3QfYVioR^Xe,41jl@h\^;_?BVrrq)j&c60H%JeI8h@$\:WC.%V((5B\_Q9QK%I4VA:qI?5PSdnWp@pBj>(,NLk5;gMhR6Kdn<?Hu1\#BO="QCKbYmCg>8!j',-7cF<j\/lF%J9(qJ)kRQ2t/eil`j!5dmKn9JBgFH%@!Z[?&CL(ED[BIl#>9s+X=cZ@'gI^D%@>Zh4]-GE)+p%3EL]f#^Dp\VqO_iYs4c@J-@NK;q5i3&?>FS00/*c"C8eR;mhu(*GS!=N%0;mM:q53J-ZX!2gO2p)LB%d2H)RnnuUt-ki%/%#-;peWbI)((Y@Qtb[.r\_0hNmgp/sd\C+h^,5$eTCF^-cI/$1H!?(FHP4:4p5O%au(+)#n.TO$PAR>AU'=Z*@KeFr#P(K3A`pOk1!$Kl:q*bqEF?SNRn`iL5</"3/#/X*KLTN$0BHUQrfM_9`#+F_!G\3'k`?e[pnA*%Vt8YjmeF<BW&<Gq1\%"u3N[IRRWKI<r-gbE5jaUn:/.VraV3k-\Fp#c[T\Z_k"bl!,;ibOD*1nKB<B;a<(e;rs/E_SB%#/0_#&<O%o?jQ".Ncp'=?ttOV,^7=L[[(paoD'`]2\abBRP00e'cM;?e&>T.=i3[Q25:mZI3L]#(9aWe17XX.2S*?5Q66^'p+O_gFGns[+]7R%6"&ag;C-i9VLnFg!MW3L4hX^nemI/52Z;kfS<ii&GPZoL(p3F"l_j]Q5&2ui!j)EaJBj$D.G"NCi&E&:e;rlo5i%f0Kcm6ZX7NO4%!k"dX^r(XXoO=XtqflmVRdV=O@0f2k$V^1q5Do..f5m_\dJi_/8Lca'ZoT9^[Hd#6m8!=)%N7t"pIG/s'TmW!O4qTT'3D6`Vsfm_%Q,)b!QV#G#!RQ2s%kRV1KnXd7ld@/j#2Asc<c+c*HhGC.lJtH]0f=@ehQQKKleKg^o7rU7C3i(/5Q1@l!\:@0P!2JeD"7*1^7D(p%6Kha50?,L+X2!W6/q!Hs7K5r[9)9ZYH`s5PU%mmuL$PR:YGjX,HV:>[*q7$R66WSodFXT(j%?E\MGL01ISN<`Ij7\T<7dl>nOr.l%6Qk?lq@V[MJ<T*G`<3(n86`&#I7+eX_>IZA(]X^H,ChRRq0G0jd3%uX2`)o]qKP;?<*Fd8hl<*iT2[<u?giLqeW7[aX]>RqKYD^Q%.On<gb-a^6FnGQT]?4mNY7C7:)m<6CIsV$XTa)T"mBj+@TDn:\XUZ']n=pJ>8)F](r`>ri_^`1\r!osiHeeG/ae%W&X]C-2jeq%;%g8V`:/;>N;*K5N`.]ncSEt('L[/US'r'*ros/$Kr]K._7+19^$[Ee%?/4$9AI;A0/q58jucBCcSHMuH)]7QUeXmCPJ@2$!.V\n<*%0E0Lcd-8Yuq[o9s]bF=DU07BND$H&VmKOhqOtl_%e*]',riPP_IRU<tJ6Gcb]R3aeHcrDFW)s"I!oh^bfOL`]Ap?i`kf)<J#MBol%rqlJS\bIP[TFYQ.2g^.06Lsa)rr&Jha*POEmGm=.'AXa=jL"I+HE!'E[f8skr$9$Y5Mk7D#="ZWj]#N*H+a#-d<A?6G>nG&j0eL8%Rk;\)WMXG.bLg:BGB<G$:QF'smXH0GItn4U4h21%e,N_/r&9S(k=,^9Vu>oL%c-7%S%3WiUXAl2E7N4K^SJ2i^?P[ZII65ZS.Q>d%9gB7iZuefNngj(r\WL?tr`>qUR0mE3K@NfK[$X*%lQ,6g9)\.TnlAI,2ju_0mSe)q_JuX1Y.">0VU):BmA)[J5<>(mO4m+eDa/27%cR?0#Pld@Il&H_bD"?1M+73[Bo(PGHobg$/dk8!gc](Q_Ptb)#JY[mc+4Rb>2a6MtPA9KdEC.&T46Pkg7f*:mOf'[Wa`\XSD;23B%]gsW:g^VqY0XX;?$smE^c`'WK,^s)"G_%4&WdcEY%lX#Y3!ndR#=*snh%E?V2bfjA[aIn,-B5d?XX;>_0br(\B=;a`bYnhmN3'PF%BRTeSUV8=&d@-n?cU8[&=<7@c<iaBn3>sN@>&./FK^.ciD:oM/8aR0T3pKjh6b!fIFR1DZ8QD0\-^%YDC\,:]@;.Gr:Jal.>pTP8%jp1F"<J+HlXF0kBWA0]T)\g^th4F'Xd2/)E8,F=6N`;bRi*?=j(l87N8fr`&fV\j<fPVcRc5KFAr@"(il5(Q0&*d4k4-`Pur[lQ[%rP'[^qG.!sqVUj6X5/EBi%(_UQU[N[-28)aX0,W_AV*B"CPlWTa]b"ofMG:8+:Qr3*XmPY-7/fKM#0nYY0hEHM.j[UoFRQcrC*)t%SAgdE0@`DfXk'g6i?V5];?[3TTuuL7H87)AhuqRq8M?Hgde!Depj`')PWqhXU4"[\mIS#WC$K:M_nu/fMT,2!EA!\ZQ2E6YO7<GV%[HY2])H5&$*mHa&Me123<AUQ6'Iba7/F8UNC,I%M>lY"(;Ks,;$,=tRRd$.CcC=hmh5\3*4)KI<)l2RhKXJ,\$Ti7;_LmU[bSl2l%iQ[RPW^m/\9L,Z,mSmBuIfTaukIFL^bXCu7G14].'5G!@^4'h8r0SIA&#ufT5@8+Xh=SECEX@XAbCTd.)g9Y9GbZd`+V=7m:T+$;%8Y6P\5Q6FGQgh8gdgXKXQA$[/6A]B6`_WN+;6QkOSQ=d7a3-UH5C:j:VN:.tCAY[Le\Qd%[jJn&H=M"RG\qoj!p!Et+74T%[@<.N%T[m2@c(\\'ioDsIYHMCp:tS>UIQ@p(C3T!!8uVoTHpSFQ,W?hT$MZ;#rE4'OHidPdU]qo*oMf]/<0M'>>*XEG=b2.ObMN<eitXEE%J%V^?!a7-p+4+QVVkKZ^A<&bqH(J1jU"!EfXk2iRGGD)-LQ,%nO#\#%Dd\q3ds00#!5;@3EC-%)9Qs]Nn4ildM!ckAMZp/iW\@Cc%=-8qPHqb/>:%W=#1q,\6Ra9o253&\`en?Y]j`]1,+fN>tOr/Q*-B$^"1[[4oUNAk^Y?TB&`<J$cRP#\!SJ60)I5ei\HB_GfbHMei%786X<]:!p&^3ftGNSbg%"P:Mdp!S02_.X,c;XbYnBZ4.*-\cB^GiV2=?&15/FpD;>420hn0Hb+,&(*fhJ>uV<\b?q3:oshN%6'ER%k/9=JQ^<"P@d^DJXM+,nWtJ!()ojlt[eOQjeS;gHIHJV-%uoJ]F**]uEV5VVH;.5JdqC)2>D%GM7cL4!31T8LOQoZ9IRu+.DB<3A%m2TEmN>?oJSZ>iL.c/ZJ7&B&WZl.GmKNG.(USpT`q-EIMg-<o'>(BUZCX(H!L7";5j.06BfFP%She!A9XS<.H=@h$c9pJf/li'Ga%+''%A%Y&[E;6SAprTR1Q*D]V/q9k'R..flKY,BZmYI://61bZCkQeW?*n=S#N>Re()U.EfBkF0<^K,ho80P*_7!1$++.]T-1FQ>^%[_4YU%%U:]pjCt(=q'q7IR!3L`3('S1WGJ6Rk:7`p#pYTSJnQcCq`A;K%40VDk^P>aA<[IU*e-]-[5spQ"m?@.iOfu>+a>f6<b7Z%nq!_4Gg<Qq7F*bNL)*ch?MZJ6E5dEDP!Xj\1K7eq`&^t;4>1&kJ,2OX5Xgo-f47lXKjUnJO10G=^)gu5_/*Ak9LR9i2B#%dqbOM4%Z="@<9Wc$D$QVc7f@N;X3$=0eT.@$'UVqI1C!3P6^^Th0Xe9=3c1$V)EO$M*:-45@VL#Wj7pe=_NRCf[WXV+6Sd'rT*qM8fr-,a%%Je#C-Dr:?$B@r4W:9lQ?3T;`042/"r"?f,[pGa3c+T06s\_&qO:0?giPpT^>M%;A8dqQNT>5sf-6P<B#qsAcQC<:iQ<Dqi:]eMdJ%QF:e:FH8&R>0"=NYJ'#76M8+iRA(#OGN+Vb4^),p;i;U2[;#*#TW0h^$?NVLhD<o"PCQIB!E\RZ7OQ2h8L6RNd;DV6,1OE_ms(p<%2;Z,a.SfG4ik/D5K?=\W?5Qo0$[\UkXBng8Id/RLWq]Q85>j-'WmY!PSf9DtWP%8Ps&NpUe^j3SM^MP/Z"qq)0"$'pQ1r:J[Qe*1%kFYL"IoR#PQi:[LWWiG#L2Y?H=P,`"9lIEhY;i+#R;$aY0$:;SGNe*hrdmmtDTM8%2]\l4l,$2A+"+iX@0\NK-1)fZ5@*?Hrl?:e%`)%bh#cW0hk2jn$JOrh+;gEu$X&]h1Ul0%]qF$p<Nc6;m1bSk@1UYsV!c<r7&8FI"7tK3+<M$V$2n[].oLGIrZt%u)g9_Q:K!l+<%:QP_Z9HpGJgGo0nOf_!O75rOjpEZ&k;WQ/T6"i)6"tAQX;L'g[95n@AE*D&MEQh;q>q874>;`&>\[@@Y]TSmKR%IT0n*'O@1R<MB%lJfW5nVoY5dauc*)l;H[f&uc%a\&E%>Ie&T:UR`u'C.e;UMm>H(@kBOWGH0aolE,LF*Q_Wk2/D]dF7PhB's=%1c'W#<QZj@#F^f_%\Xk/3btN->QdOC<#=)PYdo\\X>1GPOh6Ck!YFFX-VfK\he<O,(WNuJ)/Z,hUf':D!@D7#s]>!I:=.Sa?b?VSt@pEiYmV\9;:&4Xe%]M_jW;.g8[SRKnnqI9s[7[\&"N6M4=_bOg[=`?-;0=b$Bb/(C.bl$M%R@3mGXCZ!))^!/TN6I_FJ"l"`dh@;#1<t,ib19HnXP%-d%Z#X\XZ#2DPL\)O4EPDrnPQ8PMV]DjjA@CnU[mj-MGCJ[T[ka/=:ilH@Z^&[J5M&]W:p<qu?72pL1>&Gs<U5+2FF]&@a9,;W]5opN%R'ns^YGjpS7hX8IF0"@F9k=E?c!U<[.gkN>li+M;*eC]nCn4N@ZnS<&qJGCnNT,*8E3k8EE2:ZePO5?+7PbHelfT]U1&X4SE^u5>%G*1-$AS#^=!i\%@i@OqN_iYkhG=q[Ij&[)G<44qjDD#O^4q:?)GZD2l)uGagVfqfoK.-8]\*dS0>sp^URbT4IYtI5qG,F1dUX@Vl%M\E-"l1*8&TM:D%H`KVtJoNqlH:ZF5QeM29qho*]o/#2n(E^onf=-,UdYEO__apSHrqGXk6(5q#cpFdbM7+5`g>PS`m0D\:I=FEh%BmXUf=q*ifaoYc<I:d5h\eW48[d(7uG*TsAUgrLFHfF*Z3sn?TPje(a"=a3.+Ks@@p9T3EN'^]F[cX27_NA^bKrO@EI2tSqr)g!U%5/5*^]j@'9(sUd.Z#W?sDVff-I7S:BQ$n!F7AR7q8@PW/@]?=XTXC7T?MAAV.M54REVo@8r"+RhU`@V8])e^XKqdE!?<mNZ3]m^;%HFbr07j?ciT'AoNdb=reoPnIOY_;SY[p;/0]pY8u7=$[gIu?^@qYlCu?OnSp@;*-7MnS7n37<4<HX:#c?3s-Ug`;;@HL\L&efk!@%.'H.`jk=#i*9k<)k2X@_qtj3cpICi;!Mfi+6i6'#Hn@i2]lTG8G&8BBl/A8sf9,C_Th$8L(;M:fo%M6Xc=J2]?Cra;+()XR8=dYP%Z-<(C_BpC2r$Ft.(\>;fc_LH[O?Vtd!Mc'nfrrU4UtX>`oX:C@IH>0dZ%,C.]6]pd5MrI,Uq6GJ#&%(A6!)]V9Wg(FS[H!.V]"^^%B.22fCN[\d#j5FZo@46nbn6beMsQ^P(-&M::&sP6de9%sOfk[1$U1BKqg?jPHm2,SM8eJG+6`oSrlT:&d4.Fg>D6gElgJ^<k^UiA%M]3)hiicTP]OQrddi%Q0Wg-()&7([XkE?F97IPN[l1H_&lQYWY42tSk@8E<S#M31KN-H;q?uiE;AP`>*mD)ZD;'.gSm8#,)[/N74%Q-)Q[[uY_KminAbg?cp[o[EQW_j'mP+>IZETM=:U7)$?!='sFNT0=@q?4)$O,\E#XNP.Gm8%e5*:MqhX\*;B!;r;HmpA*LadNA0^%*Erq9IGR,hF,>T5^F7@s-o9rKAbJ-VM10bP>$UThG"M$Lqd<2f^AXsNgt[p;qK\cOr!Ien,kgn6?@@WU)qb+sA4Ac=eVr%ZaJU]a%kL9BCM+qS/GOB&fT5GDSSu[uLGI=h52-OICN&EDs)"G&FX_b/aEh4)FQNBtGc@31Qf[F;I3G=]4B2;a<Ks9aYAnNLBGW6]:FR<]=%8:Cn51MLB%>aR*P$o<$1oEJt!d&d.Y`XL,!c30/TMj]9)pDQN8J'RO.LLoSkI-IG_+.(pNg^/qZfjKnf(l#57ZGHKOCJ:4$3F6+,%JXVjNLt-Jc9ml\n%X)5n-<X:H^o:,G0_4K6I524T!9<NZJT![NZ1:!Z^27["LH>l-B.Y@!>LqY[73K"Xa3U6_>IiYccsh3G'8[F7%TKd0:;Pj<gn2(P&ZPVs^?c%%VUouOOj)dUSl5X]38k<;:-c\BGmIBr9M:D"[!<KBQ:OLu=Ug#\ud[BDlU`eM//IX(d`lZk!n>Z]r%N+7Wu#c-)Hd@?5^gP2ohp[_"s%Zs;%m-l'VF?,Nm6V>@-"RZ1fUju$)&r@=_OY^@6<aC`WHt08h_,g*godda'XnV>V<UX):)ZP9=%]K23=9LMVHS`q0d(E:0]?"$KsOn&qTC&6";gB6lYr6lk8"iPGmc?uql@fBkbESgRpD,.j;Z(X@LY6(E#2J8>Fdej[Y=EV)#rX]uK%h6#EE\?3n#@b1@2:Ej1h1WquE%iPiW$(s9[NuDDCV+I`_B$,qYgW7-293Le)iZD=-.Basn]nBLrA9OSgf/Un8a7+-_#BN,9>WO_(%%ntLO,%K\*8V@,d/%]CO90Q/u07/iRl0a4ePfbbU*e1%PFV!WBWAS8-S$<8n<"bm?pHKUDT$YADNZX4%UI"(-JfNbi5UHM]jJ-Ab%S\jTuG70E=ramDN_nc"/ZMe_fSu`+#r>G\Gm3sRj$DWMs@-[*uT5lSm8X+X;61k%ACY%(mGJ)^0aX%IkdER3-j0sFJQF:enmLCWr%^[%<X>S$/pJY%WkJ(*\8[`7Ic:.l?F^uHYZTB]/ak7]#NLJ8rK#\rK\kNN58*M;T`f%TEn^K&Eo45;=->[Agof)_odXjIYpqV&pA%6+ikq?+0GROm\D=;G)"%\>gV5-<]YY.JkI.EmY_m+WLhq8Mg\toQut'R7SOiWYEiSo1cVJ0t#h1"!ba9=I<K\8AXBE)fmN7GD%<,%$));UWrZ%+*[VaY^YR.XGPRMER+7<:`I@3W13W=(gQLU^r4+kL+1I1F[bB*)(uQ:02tnL8PW't=5]_78f\O,9_/"E"?;LiLoLf`A%;$O[T[R04^h0Nso0aX9Wce"Fsk<.W:KuGmj>^)CEDFO8=WGJC%$.nE;V]?Wd6q3-0YOo4U6o2<CfT%E5^/;#EKbE)48$IQ).<5"P%]&i\8_/:\j<S-P]@u0EOm7*1ZFMau5+A&0:TL;5(FJA"4[@]MmM#"XaMti[sf7*DfJ<%&[N5^sei7@GM0ZkO2a9_.>4t=hJFXP\"%%0>fVILsu#`-T@ErCQ@\2):$1*c1n6216DUlrM`R[Bgcn6?4a1:NX8*cVX*V_N/P=]k<K<Cr3<[ZSj]sX5(5]Sk(P3VD8+mS@"_(%,+UT6Da14C_Pg%;[>jLWaW[Leg(rLbUeg\nMX\u3]=1`&5mUp#;N_R\U'Z\H!i^!6RJ::8rWo4F`HH1+%u^q[,'qMCD4J2O%B,.C%((2'#dR?lKP5E1MW84qTF4,.gI+prHhi+*L#pQ$H%D$'TO^O>D%EWmgH*EhhrjLT*JO^gBiFnCoH]@b54+R3'[`:LgUgrp)@&G(O%&EM.rh?OOgqA4IfaF01;B`A^lg8J-QcOMQ5?7+S`Q0m7VV2i-4hqgshT@#eKB-TUerc`d$_WioGd(,'&_?r$f87`p4lk>]B`:XH2%1[d9mh4TU[%aoa29+`s*TXA:Ic6_h';mP8KKqFsTK8Qj<J,C?J6fOT"NFHa>(tPYKho/k1#<g,FERPkBlL'_J>Lrb$A^:Ym68Ic@%[l,?rOs]X@or8,<qg@ej_XM\5/0V]/:Vl[llO13((sduXQ7*b(JTN/=i1"HMLXPKQFT7^J9S4B3R7urf9(.&!FHjHaOPSp"CcjR]%2ot/6UH1_imG+;uXV!_-6#&'"_2`IWen-+/94\c_V7j$_EZ]VqBl\8Jf^fQj:r_DS7F(SF3e4X0XP(>jnEkg>Jp@c"dgm/9Jo!hF%(TY["@Tcs;RZ_l5+BMAt',^6KC3N+>-C88_Rud?]\\:*6/jTuugQ?.hJ;n<X'gZu3?GAZAN@)Ic76jfM]@2&;7<WuK24d)'L66k-%a+/+q/2.J>NF68S%'`^h6%SQTh`Y<l0`UuWA9<rIV#o*Pk,81JAs$nLNO0\6.[k>5X%9\%p>=\ZN[k^/QKrUO02e$aWj=Yq'-YSU%AaWZ]f)D3(nn@F:\Q"X(4/k^P_5r.\BU@T'gsu3S*\B&J&&:ZsdEXn92L)$No?p2n>-.*Y]8aV$Ok08&N=?4BhP6p1_\mpjQ,&5Z%&";CC(@*sU:s8Af=C;8+ercdt+_g0p4A'$$^%a3J)"D^mNFSB+!I!Ba=1AO-a9c9cL=(6jaBA^.5Do2oM4H3]f]M!YB'?1bdrdeh%^%Rn6d!0[fi)n^j0%b&mD,#XB"bbkCm,],(rnt_4JI"Mtg8REsF:Y>UTk8<@-?b)%2C&e7MjqcpgHQJ*)ZkM1_;5aG(?-nnQ+T&W%N1GW>&a4#KGBGp7pn!*.pP"_jQD?IP9KKOUA`HbNm^rMo^<>D"X/3,>pP&r$^+W12M\.oTj86>mN5-;l^.0S[IA%MHpX^A@IE.aa%='nL2Y$uaqa6o4%/F-p^+LXpRDn%ctE$(CT%3qBiZ:jSi("4G6-mN1%fnQZHCth0D:2\lhI7:`S>p?EJ.ZnlJFPBJuM+kSVi"B3K%(M;c+]@8%a)Na,N5++n4T'7Oh-.I`ij77Ce\4`rk>Nk@>MRdD`q\l8E)cs4-d<eBIls0/2'tjs),JH@cMsN\Hh/6F"epI':ak@2U%8nI[PV7lg>-ugtS-^mhk=rZt?j^XHET7Vq?,@AK/^@c2.,*K=KRWtGD?`E"1rRn2r:_+RL#hpa&Ep^?[6N,L\4[`kTTKciHgh+tS%3mjIk)0Fr(J.^kh`FmPoZD5O8lU'm[TVL@ap`-m?$p)TJ*(:>X[C)qA3]=8\3eo=OK8sLN%\5s'MH"-5Kk1W%P!^%X6-%=>(cI.%%5(h/(I2aeo/j=mtrR`N=k^kG0^E5La]s@YX]'c^phMt9A8>7kjNi1%57aU^n/NOCJZ,CR(nIZL';V_8N'FP?`APABDZ(%>ZVjN&d%M5=VXgJ^jEdI1qolg+@QK`U9LQt#@;hG0o3lCE[=2!\)mOF:^kcdVE`?t>6-e+!?901M^4@Jd9\j-PFFYdDanJ("0dGI!]fjsj!e%]h-?O<^m9*3[:WUbZ,W[O\'U67.6@#U1:kOFu-Y3]'icd1(p5J,i&kA^D/#7dPs58RparpZi@-M+h=?!$faT%]7oU)*%]dFT<05u%3Jm@P@A^%mITeo^k3kYkd9Ao4@7VlafP!&r6S%,_VWlu,n>(62ffX'-^%=FT:TfrZ+81FJkHc5@JWe>-p6B/l)*8+9*QCmFOk,R3%gOl_>f!5r_SFL;\hBT4Q3mGGs$+t[MU3%5uP$V,?eLM.]O9HC;F:F>PpX?05l6DAY3BmISgc&p^SXMGPZNi\1E>1U"hT)B^>*j92%&g]C-fE:$O/qV\,rsWL131.5S>2B["A8Kp(Y[1gu9la!I117dnAE)hDYDOO.?3?2J9R>0g,EQ#TRV8<+lZEn.%uCIqB/Zoq(]7L.%[Ni+kP/adi2Z[Q>',l42+!7+,-VgE"!TJ1%#7XJ_K8LaH@C@cT)rD^i@..se5Hu/Ner:O57=sab*kD=S4NuQ'r8B&E9D=Ps(X*c]%h*R/pdLf9>m:2#XdRf0AH%ldeU;iJGiolXG)n%(,'(Z2m4mh#`)\B?@J!$6MHkON*.WtS*Ak$G0"QUW%aZ\(5imZq8?:UMG*1#()%mR6d3IDo\XaNKAjrm+?Tiksc\A9(:%]b:[Y]CmU^k#d'h.c:aC7;d6'U-_E!&s+C+*0/3-lYAs:2T*fWOdpa[]uCZGT976<ccCM$%7aB(CkZGc^bjL!;14Bb/mS/XP7Rj"PbY9FP]1=V#ZTF$b6i^\B"=\t-a'V3+VZ^knHU]?I,RnVS)&Z\]G/'#6#UUlYV^ppnDR0]t%l1n%+iKb,5,7!d9f?QF75?Qe.Q%p7o/B]D<k\K@&j$P:`F"_?%a1kP!iMZo@R7+$L@S/#F7g@N[Vh\lDKY*E7&"oV`4r-;nj=una%SQ@cB\RE`Ggi_)d[b7Tkb/Ec"9=0$W"Z&j;W'!]+Mk("<R9UQ`W-9epUC'`8db]lm"6RMoIpV"Tq/DI38L)K86S-,%U\;ug9:0?H%A3QO)Zg_PE%@fQoOUp&V7d>O"E8fK%UX"Y\m4Chj%k"*c_,E3(jMN9-LLd?2\<(n0;k4qO5+MY+G+LcPoWetM@iIV<*kSnWMaQ?9%FjuX%!ZQ;YV!%P,)N"/Up<*0Y_kc,%@MK[`'Y?:p%$Z`Hi62]N2AZJM).N0THc$^m-5Z)]L`AAJFVZFGA!gL;4X&DFNb=<`AckLn%j09X7OjFLi,"L#Z'<$6>1(C`_)`"1E^db^hq79.VE4BR$V4D/(fHV:fNoW$)ROqY,Obf:@HiQdGq'8/9UZh)`karbBJh=ta$/F.X%n%b($iF`\pEQ$)FI.nTrVOmSfe04WsanAWkr*Nn6`qcmRNu!c!8?Ih6L8L(COHE]aHOcT#kV"1RE\nZ5GMf1:84=r%a@O9tYu,&-%,+RUJ;@uMT,;na'khc,>QX/WehhD=,Q9D\pq9<k%`!ij/kI$KA[N-\00!#j.I4AK4]8SQ]c8u7pahW>O<4Hn(NB.e,iOEpL<4Gn:%U4u6nle2q*?n,E/?mt,;?cOb$oQML,0sEqf\2)K^?<ud!.'R0EasL5s6"#OElAF:/kW>UYJ.4A!.8.m/`,P?P;X_R.P/<OGI'mt&%?5_-R4La@:E0>DToJE]9Y-Yk>h1I3'!56iCj6"8ROK^Vc(M'Zi]l2FR.Z^Frf:U<n40ec]5$L2,>gIVkMWM0%qjLc&?Fng+XV\FJ%ZeaV1m\O%@aRA(6"K+uN).dU"3ES3&jNki'aZE_Pgd^2Vk58CFp<P/`PMMO2NXk.7B*kR55+>j'1np/hY$s0Qg106r]PJ^AA@Jn)%kR9Pc<4`csoI2]9DJR(RO9Y/0>F]I:UqpS#]P:X*C+(H[dJN^9j-&6J>U7b.je]/Z$p/6Pr7h(YMp/E;^5^;tqhiS$CRgrL+m&Ig%m8r1PUGD29EOgb;Y+h%r*o:d+A$M\W-gLQV@hd?u?)e%ib0Z>j9[=MB>!K[^;Bgq:h0s`7`5;'cO(h>>Fm`HWTdVkTnkUjiS]74s%[P$sU9mH%)>eOpBr:+;BIa:J5E?7iK6enM@PIPt@^>k&B9ToE8pRZ`7qS#NR/Gc2kjX>&1$gSAg3c^9Kf9=?+Ef4IXqdE)'DB/0M%R'HD"%=!_7(au,I^)1HY4m71E#f\RS*/5*Vj0!qmP,*QAeF."l(m4qVa$\M&<jft*7,DNW3<N_IflUX:#$2Imc__)nV<b]KAa!sA%YR)t3([("fl,%K*&tM/<=#O@VHK?Q]l(YiPBX?rXR^Gn\9c#__#gq]VZfuj'!m@G3g\rV,l,%K*_E?%]flUZ_k1%JYl,%K*`7jOu%ZKYJ!kf]g_]5:')9c'*gkKUo'.[r&lFig`X8@.Qt=%,WM9c$8s8torTflUZi(OECW:t]r!\TIA(dNI4b@A$MH!pcCOQZ.Y&aDAF1%.+J#h8M!%Plr.@"ZK[NFCm]%MYZs6#qDQK4]!,GNn=0!'aefFJd%)sJCc7h0(9q$UPqt1?2I0GOS-g<.2KUi_=>!m?HUS1\V@.15%Qnu;YbbgTWjgfKT`g)\G8=4i>^%+@#2I..e_)(KUb,4co'Jf`Ja[l(8!(0dls6M!o\uE^uBrBQ?Q-"'O5[sKTmp=!dMndklFlC`e%W:-c[HuD?tqs'@,XEE[&r;0k,PuFXq+'<WWW"X6;Rm034?]oZXTB*#`V!4H+=3sEL$MTW\cNkY4b#o-Md9A'r,73``If;.IAbnnb%C[,e!0NG8O\BR:RhnB%<aY[*afA&gljP>q=%0!XRPh<eK&S&#T90@DQe2;He?K*TK9:VjnFj43Aqi_8ujt:UF5kmclrCsnX>]\No%VMU+G$@Q3$a8=$3Msc1T8%l+:96r3qF)U913IU:"c2.=(JN"_>--.W0,n.ASHc,3fB:97QXiq3E8/Ji.Y`HKK,`uuKUnU*iB6NJI%fY+L@*;sNHiSAU6dl4rKf=-SflAei*:80#$AGJV]a2Y$/)+Ad`CA^QU7-d!?a'Z[QbCBn.4a)JPYo=%#-/+9IBK$V*9<t<SIXaBJ%Hm?a\m.ZN3TjpAJ6g)r3.'1UMp6H$D6uSgbl^l$l>VsRk8K;GRm:gOg"M$JMZp(Kg!>/:%Hl%rQR3^eqW(l9qr&7><mbBls-q\b-%)%o8\1KQB=h'76i`>e_kJ7/*"#Vo>1k8oDKX,o<+!J'RXB1;H4K-<?<:9[:ElNTQc^CQ\,Qo'pKrf/.T1[M6S#\=^J"OQJqiduDn%GC"0eIP^?R;S):C&n=iXqG(RgA$,2Y_i)p0@GlmP_=K2S\`&QWM)N86gi,d8/>DUClc0F/Dn,*ho5VQnU6(l8L,[#Q)t&Hj.Bef;%FR2_Id:V%o%<qI<TBMKUHN4Fc:INuWf5&u4_Sk0Oq!CdIrRfs#0O[^Xmb>eqC[\ui[f?h]qc_u`dc3,*%n;YI%T%2`n$sW]HAnOq%8`:(8I,a"gCNIb9q<dgc]XU+^rTCXC:="-PiSnr51HAuQ?Qq;=l77]?F;E/o&bZbR9I<MD&iUX[:.JY%f%4pUJdTfcF@e%JdH1]c%M,d$k>P]XH:N1D\U2f9pdPRi2,c8U_A3W_koU"TaeUJ2FafUR5%7?.K,cO[i#)6"LnJ-,_n$D&K`-^B2QfEB4\RHfCZ/dpJfDQdc%'n+BXok:LTj>Z1[.*&`_b==2CUp=:AU2jMN[UDR=6l/GNB+Q4`,Im0(blD0.m+]TSQk4N+LDb$b.qb\S[CD@V]e#.EG>CkIF/NY$%NMecE^24n>gqKi$nuF[V3`_sq&"2(8--!^sddRau:1U07I(8nF`V$Ju<TUuND6\>4*QX#"nrf`rn6/%PMeXM8V6%m1Ac>im'DBPl%]f^W6-Z%U--QJ/3RsHp>XmqnP!)hhPq)rOUcagN`He;q>;U^ZNk^9o6PWd]_p0-d5/B=1C[G+kQC>)AJNH:@mjr`9M.KmDnHlR^e%)UB=WV5L8>\AoG^>8*=K?@j!Lr>NG-5jE1_;CdAj:BF)O^'gXLHPb(#2`K(+r`5T*Vt8me9>UOo?-*?:;2KGIe;Hp#Ls"35@Ne$#%OP"$;ZfuUr_"G)IgpJ8jCI5VX@a+=53Z0L-`^p`A3TFHU.OEn/RG\jeQ2&k+Xr3CallR/;QhoK@'hqR\FC1MZE_Fj1VKVudahqVU%XpNop>H:)sUp+3%\.c0'S5+EI5YI]6Q=+K.d]BesHSgrM'*fg:H1fh=gFMSBi@Z]GZA9[(CS+Z-,`sY'a[TY7[,OU`T-YPo?5bQ1%ZktYD2baG1e`P]QXP[<#%R%kV7]uf=-c(CCO1_bhn(dZn:Y,t;[_d\,Ij7)"#c<q12SD)"i;'Xl%ZH=;+57dSP4c^>R9>P5K.'U:%Ai%7H[&F1[)0F@@VTGZfKAn/G7Y2#LljgXi*!9Ifi>B+'mXHuOC7ZL\mUG1W^*Wn2jmIEnISV$Uc`%c=?)K<&3j%8JQR5HQ]8A]3%XS3SE^/VmSEEd,BL@%rch<LEcShuYQc$7on8^9>Pc>JP%))X]:mNX3-Z[RKo5^@Me,l0MUU/XnfRNbnr))rA8pSCq*P]Y)B*3f3b%NI0+8AY^NSm[K1@A[6*bE[Y>/Ed@MD=HA`jrZp')jg$NdpPldUM05X&7h0/.\ku8g?O"RQ9UZ(IZc^"g!4uqNcN3Z,j*bP@`iM9M%RnleD"dh+OYicJ^;'>_H;(m#M<8oIEUcEtakO^+G!_b)iYeDl<(1>Q1^]\0.Qn6%K3Ij7nhr:sBf-rT5>QleBUO*]'M$O'rV0kE`%\OY4OZ:k">SO>3$9DPNAg%gCVjU9k1oFG6M(ND\1LbIlUB,5CS9DO0PWVnW>o(dU:J*^(Icq#UbS?/+1R8DB0CoI@$p$;'_W'TnF%P?h/^XaUAE%2HD)07NM%O0%N_p\Mk72Egt%V;9Oh%@--`^Rf(*NT=E\pfm^naKHR-(Et+PEM.[W_?+oL<klF%Ag>qb*-SC?+IQL5%moGCmjQc2?^\D%3L;(Ech<R#T]OfN<rSk0O#aQ(XlPI<C5M6OshY6jmc*&,T?9b&FFCi[LC@VB!qK[pE@3&WY4P%ilIdo!-Q'F8%%FE_o/?\3S&7/-PspNB,P62.tB0DU$D6g)*PhWd&HI=-HeH/\Mf%:ar1'[M!DY#t@:Y?u3d3Jr1^imUii%/fVhqSdA&ODcmPL:Gj=%99d.prF4MM>,gb/Y@%40Ic2/3rSQoW*tJ"e8fLKN-gN9QQM1r>X'abm+*"JkHl*E@+5[(mqLq2&n(%:5hs2'hV8n"3M=:+q^XXuL%NN^+0LMGVHI`.;,i*O1n>Q%IQI`sMB?GA\1dRKO6/`5i[e;s:6f5J044R'P.8abUXra*A7>Q+E1O)Ikd$/W]]ke2Fo.)BEm_D>-e%^Xk,T19I_nFV<Nr(I+Q>k?<r)?GH8>rHaE/P:+8ghWcKE>WgNLIXRd@2"82-JTSiGHIh$Knb"]-'mh%[nB(1d<ki);>k*1>,,V^"%L)RL!Aa"L>P+8(,r4RRLo32,T\H]h#0._Oq)f(0"@KYHP(I)`64,8U+f.VU**jj'Un+@'P=MgVjIGF.TE*PEa]mbf]%h=#k?WUY!%]@B\b)=h)udBK=RqFRU0%s>'_HpVYLf3gPr]mfK%2Nl"5]%>8(=)`2#i#!e[Y@%4e6BBTH'&W!kJ#aYS[qGJ_rA[C-$*eSH]`5<9%nfaRA9k<EPF*Q#p*+HLjp"jhc+t8FV_rMd*]C/<"8R)\f':"D5LUF_AP^G(kfbg`'IkUM[CNtG.njc\Q2"I>Y/@s_V[C#XS#.g)U%bhVUEKTa+HZtU9!Voh[QXR>/6l$=]VEn`GCf)'>&,Z_O$J"=n\07;#<D1$7MgM_k$naE(Z.s"d;e`#93qLl3IZT3;MoR11tIpV$d%B$PX@%a%k`]j*'tmV`t=)^h9@CTjW@f&cd3p!EWNR'-F[\1Gi@V*AI&-[ViZk@/<(W_m&kY(&[ihq?S,h)`bb*j/43kgNa:p@mt"%cHOW3poVrRX"KR4-(1=)k@^\/RG?T8H:E8Y^6i-UVq..(`nlGJrr'.'CfurLXk&[th.f$<?n^p;#OAp;52RE><5>iNQ2JL1:>^99%GhUoEI&h\I^rtlqnaKOc?Zt\^c2OJBGkolX2gO*km=P((r]I15fu!UbDO@Ya3.Ti1A?2P&A7@QIT<:jfO2inkc;l=XXZWu6Uh7:<%N7VAlYF%tobEG:L5P%V0&GN4Ge4EDEVGKH<b:41U="$.Jp]L5%^jL[?j.\K=b3"n%?RafL$#V=g'!#'Apf"aQ=0K^<RDo'*P:Pt'%pc>jTmk!q1kM*15AU"(DGk5r]IfQb(=1;o\=*LW[@GApe".Y9f%[LFo3N^STg6g*/rNO#CT4nn?$=AekG%'k1no8R=ibBFI!P?C[%*%('udm<r4H/0Yh-RIZ<`k;Y=*Bls<S%1!I9q<VP`ul&-%R9>`P4o=oB;Z&#=6@V#kf%FDn?\MBYEe_@:$o^sYhR<*Bg2DmT&/>W%;<Ok6+&c<;kh_9raR)sFK/rbDrnNEVYTQ/TYcHbL?@L6P^.DF+l-\)%2s(nrcH9_]e'G\tiOo*Hc$0s6Eo_[:FaIS'_(K._h-MMq%Uu+C9kn##QFfqDt5X^lt>PtG\<@&0eJk;$p9Rt/F$XEFUAsk_AhTq<6A0X574AiK_p9P)JYP@]]USheNl>(%*YD?DPRE3XW`k1(N%D#d[ql4QI1I?YsYoF4<7QDtHO^PhP]q.QPcN'#I$A+b*;MaU0R7PW8h#KG9op*AN[fWL^&]"ssg*a%`UA[,>sT3Q[l^>""Z_HER]%M7nJ@D;<E#PTOOUpU$?TWt4&>B=b##&19CqL^:6BJ)6e6G#/2cc@&"3#rMaR#aqCD.Us8&j;WpTFI%C1\C%dj]=HM\J!P<"2grRA%l2Z>n'<<Yqqa2p,k7G:dD5km6c4kO,YRAqP>@jP=_OBPlU'YS+!Q"RMJ+.&h;n4Ud0@0LKGo?A:4ZTHNf$-N1?Wit*I&g&6Q^9Xj%5@$jm>?ASl30o"eqN_AnrFK+^41BL2&G<1kGg;FS\D9/K.ad'tdn(F1?#uKg*fh6*k%hS0qOMJqXY6k`)25aSANUMVpu@"KJ@?6<%X:K6[G^n51hRqW'f\Mpo[I@i2CO9Piadn-2bM[N\;q,o7>KsB,%lf""\?8$YW.f(n4b3'NNofgRA&je?op+cHHh6@jgEdmRDjn2I%?6HSU:ghM/jCXM53rWBS"'>#*'cl5FB[o1hj$LSf*/Wcr_bH.JR(DsP_tf#RHsjcA-"`=Kaju`OQkGkK&,)l?cg/&$YLK1tdfV84%deHf)MqKF%H$,Z;$62d2J?rG8aXcNF*_Lbi:Mo[5:SkG1geaZlOXda3JMn"Gfr^NBcJRS#BjY]J%:fPg,7YM<qQ8m(L7a7j@:*iK%ZGi`f6BsR>XV2"!W-d[I*tB(JfmRNu.>!2,=Gi'qnE+2^@qB6^DqrRl95Yb72DXl-q2kTG=[$*7b[3L!A/=`7-^hMPA!?][1p^$*%=7P<.1OjAOSXF3"jtlUsV^YT'$VuW4p]^TJarGT;m(@kn]CNE:(RK*EdJ@J:C%HDZrgeOB^R.'m/t=NlR4dm^>.]L;TBS'aRW;.O%qmRBIjkmD(q;>uh7@O9knY85"!dn),l](;_Fnp$+Hb==i[_,s,.iB"shnRkm,k>\_m\`\"CURP9M65QlPL)TG]c=0M#<>@1s!mu=%ClU16`R6Orrpgn6(OG-ZL?gFAG\R@OI&KKD*'?[91gn?b*7WBe(+=mZb_2`>m8AAmk]m%iPqA=ro;N6t'?kZ<?^Q,N&DZ!_j6ZWj%h>:\2GOj65ra)Qg-P3j:EkTiBPeoif:[6Ttq;^gRf?=sme-4i!4CE7)M]J$ZI[%!QVnM`tir7'rib%jnj)]PCfB2esLV!Ija;7H1%?Q\ZUWMXR;d?IN)!69H7TiO1=1U[Zu6a_$;[))?(bBn*r(ELGqr_-o*6gq`+#>OWAFW]Yc'oh!\P+;1jN3=h8:<J!+ja3[_1IW>l%a19UNWU])or-*3(h<7$4RJ5XU649@IBkDg+*B``U`dDC7=a3JK1G^+1E3Ak@GPJUue^on]$/^QQ:Lap&3ja>[@ir_8>Z@Ei0D8Fi%b)`+"biY+3oUa^f#PKiK$kMa[ppiPm$n#U&'b,)>GCJa\am<4ngV*&bfL?A0)4]C!"?d'=?u&DMCS51T](H2$*?q>oHh%+4E"_c'%5%kh0(E8*7,3[sUO,6<]&%`Ch&lnNPg;_WmQm6nElGZ(ACIfIuIQp#&lc63U_43H(jpgJ*ap<9t\<0]H(qNup(?V+/HK!u;@C`a'%BC6Pt)iIWKcKj9'_!UB*rV'H9BsVs^Ht:g"+!sTEQ/eY4I&f'.nT:_#QJHP%[HpYY]GBs[a1%CahH&f<fo;NL]$R>*B"%j5A,J$a%4?40-7qO.D.<]5U45Shaqm^o)S6]C.QE"ig'=cB$gY^a5qjWkn<,V<iFmPZiVBrW9[W,Zm#XO**Z+AuU3[s3J$&Bh?n#us\pr/"M%&kkRjdOUi$+0m]G#!dL6Q#aFs98JcR488%:ddH9iZ5A<=o`l'lUSh(7keJp(5::dm'(t(5o\;9LqRu7Q3S^gNP=g2/]i\X(dWW*<%)\,%#16VDU*cigcs#?^%s8#NO_u[Q"bkarc&Dn..qa38hN82>I(Iip?Ilm9B5UtO#=!<?HmW([!3=0kD3"89963oOjDuBs^Q"t=3%ir/Cu$_<'\%Nik5cr#`DP+Tq@$_:km6+6K\j#Pq&cZdt6$JX]g%_A-f;u!>V(FL/u`R=O^V>MS:96(8f]S&9"@>ClaGFPsh)%L^;%CQ192`Jr3CqHYO_:UT5pej.:P^Y?NqlIkAbfUei*K3dt#c&'5H9NPQKkU0lUWMd$0o`_6/1GdB2qPCl^dTpR&CZQ5BMZ-<e-iH]4%Q6%B++tFmdp94FqGUbelBs:.P/5AssjoZK&.bg;8%ENF?*udPe_UsjqYqYbf_N4@u?3;*IN/iU[f7:k0pQ&V'qoAWh:W\OdV%X<9%oF<Zu2q.)\\XHC@bWii0im4UJr;3+5SA@;*Fd",AgcN[&4T0GB6"L_q!LCsHY']P1rf(s`:IK=ZH6)NlHWY6Nb)Ue>@aH!U*fDQ=%oDCueE4p;=Om7I,jH7YbKJ<t=+$18uRR%@B?NusVljJ6f3S8n\rT/9Mi;'Xl1`f0H;6g&_Q4kK4YOOu:IrGlUAGEMR2EqBm28)0*%r)gYc.\Eg\=(Fj"G/o'uaK\@i8;6Jam;;#be&@Blm7br'`nM.d\,9Z?dKgUa-*)+l(pg5@eP>Yj^9>QR2O;V(r>aM.B7=.CSkYg9%5*n^HD7&aCA*mh#Y&JR`k98e4M0pg<B&MFl4IqOs-:*i0)r8h9oW:r=r2e//$an-L"P-;]!M$]@40rtRG>_GTF(+Lm]@#OYC3\1n%A3\:&g$mDuaZnGIUtN#&q*uBq1csQ*o8bdl?fh)r)kJn`5\kcG1q[Jus('$2B#d%[s(K<6B#beaOYo6/loT!(Jc/O(*dG8K9'kBS%4knDm*"iK45#kLMnnXlcXFHSNfmR%6E+^BP3DK@[\WtXg<ur3n9Zj;):V+2_l1LiUna+qjD_WK5j58G6!=/.Z%>+A#55pjWd)d5D%=5napAQGtK`9?jKGGbrj]jAn2_38K+*!Du(gj1)<.0u5q">V-ihrp*Xo&Grmo<i":g;1/-p$eiO*e77rd`V;8/,^HW_i;Ff-ICAI%!>=rsDDr2ppromJc;oa)^]Un:m^V63mZ[3S8Bajcdp;f2n_NiTD0i1)IY`Z;iIbqGAOk3U]3Jncq+\Gk^9qs/.p;!2o^g#CSQZme%[W#loh^de,>[fo87%0gD1toF&goe`+:@>V^N@/pjO-S;S6<Mhc+_6oq:L"/ph@frgo-p6_9<Q@0+t0ipKa@*/&HJ,nTA(S6KYTHD%o8uB/7%ga`R\"+8W2q$87'P;Z]:g(qN8,[AKn'EA[@-H$bj5WJCu=EqrgX5cJD,q]SgSso)HC8Dk`Z<=qb^ofGW@g@dXs"6?RaOZ%gFqedY5?-[,[CNa#lp',V$qr^-.EH]+96GmLYj.d]-Oci9S:udl^nAq/SRgXaar*;Vbi/923Cub2ULdN#,Hfrr[E94rQGeI<:O,u%''fj5>1Uk&l]/C?BsNaMoPu&cZ;qIt@A[VLPX-SFLhWTK>[l)'A/^%B4KXQ[cF(X;3jq3U0q/W(OS!Q)`Lce1&pP9&KVt(iEo<6L%D8-I3cq@r^FS[P+NN;sBc$7C/Pg;5jXk3;uH3n^FL9$^FSe#rp(.<h9-.VT)=iU`QpmIqLcdT.:&<`%_`.k@'"0rN8A"b_U*=Gc-%TL[:$Q0s)U)RT3j+2D^.o1;)c;G#)Y>+(V0@#mF>_"Ygs+DW:TLl`Z<VDVu!*]`(s"l,En,L6kR,Ej9PohRHkL1]G>76VW]UU`K#%Ei*1=nWBa9*&i*`fP+9TIsYBGK1hNlLP\RsY"1t'PFm)5b;B+iVi$n%gN[W<_>&BB)b7QqF6r)L1e*2R$gd&j_*Io^?gR9`VB&+$%jP7rS@]T3]pOLVOZ_R0?b+/)parFV;/pIofN47?.]_=[`=F)Le#D$\93cDR:1@(4JZJ-kS9+N;l><=iEk?2a7G9ipmmJP9@8NFWi%@HQ),[1aNDr1[nu0G5ai:X<s#3:$'LSrV]7-L=1PK(B3VRc!bCY_%M2?[4DjU;!_r@"\DUfc.]O$!=iiFEsCPA`?._[+TH;[pWS_%S4Qkbg<A:IP*cqCfr4#hAdcX4^\:BJ4.0##+-)f"0*09Y'50b&fe+pNF%V)&q6ds]W7`jd`tR"*q]"_#E;DB\Z$GqeN7huZ.d38@%]%$.t*nGVrl%@9Hprnhe/?RSLL\HsHTN:nh`0&bbT'%>*!po+I)>p@hF%FMJP2t0/Dn>^U:_9*h?P`RP@1XMfasd7Y4AY:T;8bCB%#oIS2&c&1\\t&Yp4dA2YQna!f0h#QK,qm<g::$G]m``TFP&`93-Z)A"RV#(G;MMgpb):J&g8]Fjo8r7$1IikEHhb+b`*rAQ._]V;%]n86GbD[!II[-NXY)B8qC!N+qQT#F-*3WAYY?!UCWA,ldh(P)d=FQd6Ni=eB9*1MA?3U6;(fCjs5\f`@pbXY3rZ)^*/WqJVdi\)m%<aVHnWPRB6iq,0R1[>EZ<XbPG%2d\#915s)gWYY/:V-5V_(?/)qu*aJ(DJPe^t`t[VdNC_qS9d)61@$1>mKgdZ6@%6+U7_sW/]?N%retlOj=Fc[iiADJ$pJ3A#+PL?*)QabEE"F"Xn-63/EcD6Nb":$oZ&lm*QhfNq..\jca2-DXWrP0-J8FJ"EHV2i4])=<`?He=D>ft%lu`6fVcIXT[6EG2lKS,o;CZ&+;:Y:7CST[b<mRfGm?AMB5@;re-bYnm(J]lM4-!ID^,0/sBlYAaq.*->(pnp)'6`pI*PVIPe-D4e%]3Co^j!Q@BdVn5n27Qju7c.MqH'Ak*c)lFIdsRkbpQ'OR(6H_`r@FOL7SkP?TH%Xt.u'Y1,gFKg=C4#1$W#l=IAna#Z@0"FI]G!F%L&'limeWO0??N]C06?6pNH)5V]":g32s'A3nk*?PKhT6-c7&@Gq2gYmpSC2N@cF>;]Nu_YV9D?LajW@".,2`>&;P@?"?]eMnjmE.%a'1OLkPYA=^qVNB+=;oda%H>USO-(_ajCtWZ2;%)d\^Y?-]5X]61]<9QQ/<?*ZsM.!=g&Mh\5MN>c$U@cm&XQDtX%EkpQ0uB6.Be%5R)gb-GfAh-^Z9A78C2XRIi.m-0n2"G>hY;Z!JCn7,R:Wbc^Q\Fg`EC>+_gdQ$-J81Ajt(.oet=RN1bF*lj[p>uqI!J-JTYSr`)l%$u?.Hq)lt6W5q21.I-O(c4#*4<E](hr1L1'3uYKVF%,9L?4?sf2=9SK!^3smNt-f7=*aN-kH2V94fD9E5AO25qlBXNL0%YA]AXp.%5LOU$SdrK@4BVBa&fls/ri*/6);aKF%sj2#G:H)F.OU=l0NI@".-d,04q6C!.f]5-*A$`tEr.qJ%!Il%9TRl;.*p2?0%h$K@gD+n%K<-SqBGGg0&mObVi$UeJ#uZ.B7iWAcG!SeR:,Xq=o5`mg@QiV:/^:i'Z-89;Bs*S.)b<"#4BPbX2D1(C'3ql\_j&XNJP,rN$=9:W%DkPO.QpQ,[4p.)L_\B]Sf3b3!Dj]N)8/ZSCOrX"8SX^Q+RXI\FXTt0LI*9^/FKAR]'+8aqJMfP@Rup"\Ir#;hbS;MV2Pm7iC%ket%Qchqaf\#KC(11fmbQa@OgLK?N[i&a]WK*DB!._,Nj+7:#0eKhBddp8CC8>RCco:EZ(A,_F>88'j1lj"ucnc2()'0c\ULj2e8"HS<%pTKVuTA8*nd%HT";h?1$[`D4g>1'tt/mM8b-S&F5O**&Gc..SPk//^Pl[]d'[dY6E`YGr!,qmI60bG^+!mO;'\8CKV>R4m%Pma:1%oD67(3e82P"R'VF6pU\f$=S*E'#IiB]-/j!9p]&^0DEU^jhn7Bj:eV:VQt3b]ee-#'Zg]!Lap@FR$mQSr!Wj?2CT(\;@3R^f9\pZ%!:Ub`6"5JOZ-\gc_lRl*2_5pD!"EIK;1EC1$'Zn>+HUb,U\558#@N!-bdNAHP$7VXm""N?gPdpQXG<49NrZDY-/FS9^CU\qJd*(m%3L"DFQ_64qp-[%/Pq#$$Zi*uaPeLrY"Fqt=.?0HXN,?dS*.Tp7)-;0$CTeS:=FSi%3DnCpN`jWtQf`pf:SJt?>^8ArT-$rbq'ZDL%<+R).;q$+,"c9%+9!!f*oO^II(F@rc'?A+s?72pFl<$rBcg/8YfS7sa3@N0M&?Sr2pOU\GofCg>e0@I^&PGKu;?^b'HK61`\KNgs%PCf9'Fs+i%p#gJY*gmGC@6h9XVR,m#KtDq!m+o7CVS`IRGe!RR\BG.a8(BX>SR-^sBTLoOoAgl=^;P-NIOF/E3g.tDcH""_QW&8q%B7,Tl0gcF%UgmbO?m5?fAe8A297Pg-X7V?PI:@KtM9L>))#7V=9oM>K63Cj38e6e^EQIF:I)tUN\LJ(lh31l.n2c94Q/C"Lf6_.=%@cq#:bW<XrYkqqir7FC4r)admM7'6Kq>AmIk+Y0QE"raMLC.>=gU?g\)%YtJXnqsW'sN24d43I:'fGg=Jr#dABRU2Njk/jk<CA7M%&.8^7lHAl5.:?OjDJiI'MJIK49G5c.\MdqL$Gi7o&hH9[Ds:V\lC+(O_st)2+A5mS;(`i_,4FmDO11J=cBh_clFCn:YjYqsf`L3Y%Bnjt6h0LkY:S)lH1I&(8hXS:GoC=s%p'TOQAWA>chX&T\%6X1%AD_.b)Z05Lq`mpgfUSp'Z>\HdM#^4mE/=44Z]5T8Eb'6jp/p(I%a89V45:6m5e'+*([MsKEo4dI^O*G&'B=E3"4C)QV;NaPo\h(Ui06"^>2R#NKB7G*CjNi7G>5=t;DQqXoS1QGJ[o,XGF5H5ak/CCF%8Bk$%m(Q`)NP-$$cL.PfT,6'3H(,l)"6ZS>22b>%TGi*).ZTW]G(OJiq5N5uWZsJh2=g[p<-EpBW(*ANMTc"Y"P(Nl=\UIKhAoUE%goS95bCcd1(.q?&SY%600HW6RD]eZNb2:`M8kme7'_i2'D)\S3:0KGJpgIXrrc;hCe4lu"l$Wi-*qP(dVtBN-q.S8.XhW>C=EJ\i%J%eiR0;`I>8#X%aSd&qo8#QlXAoLK8&L`$#.Hpp3J+]G`&,\F[.;AY9B1cTc^r*qGa"Dc8"%E5]X%N42I=&/n?h)+!P\OD_do+]&%DRhdJE38b6b0]LFALX'L[dTKLQBBWi-kUC'P$/-mrRC;c2]t.Q.65F'dRqfn>XI"J8cu(mTLscZi:[+l!W5QhNfl1t-Z,;q:,NIc%Yr_BuKr:fIj>;YM:`Up]3[VLQkW-g/7BVqT>glH;\t.;L>:3u_:=0'VW@L!\L&+p6k$6XEE1-f7<#`t:7F/LkJlCKqC8`U2Z_7dm%S#W&9>SD*jWg[uL"l<6!!:2\@$ukD7Le6!7[ViTWVC=N*[C*C#Jd`CK+D&?CY.@H,!Qb\bTfG-h;2hm@fJuHC8=?W39X%(6WKp+J%XISYX!J^!WRtP0:bpcHkM?'YF?SousDAjjd.6sCu#Vk,)X]T>lYfrW<\E$rEaJfMUY^dZe-,c3H%R^dTi/;%G2c+,N3Q3b)@!Ft=%=;gV'X+2#?_Qk.JSuk<5\PCj4TZmn9ciOYLKP*RIfGZ>_e=<WB$&/ItXOr1A#8Ft,-8hID<*(A&]5#X,"u:9FVq=&0#7V"+!mNb[%DCX;K\t\=\)d#$aMBHc*P_#ba$fG`2::![U9ijV89F&a+Z5P0sF22JC:l3UEEB64'D%2;RB:>Z[C&lj`>X5;-3SPe\eU]('`bJ[P%f.9hE5df+8Ynbb>U+!T]j`DO@!UpC)5f&k=h?;Xm'JjAOW_(@'S?&ET5Qc/`+D&o!#)X)h"+<HUdtrmS.<JBm>pm$r2[=)06P2#I%.>0[B-4g2YliICG,SG+iS>/1@.^T=,5$Bj::'1sPd:OA!joSQc/D5a.JS)eTOG.NP6TUU(@hIB3)K:F<F\l5s,d_gQ"3OU!6G05%%&,O=pc?nh3<DWQc\`r@Ho[Tf!)HCa9@G&7KOKGN2<hqZ!^5Tn^92Y]m]'OWK;32NZ5WK9Me0PoMM"7V&baLrO&lRc#;uc0]ctgl)%7+,Q-'Esa1N8/Lm0C[KpZOg\M!a\eM-+]'>%eW)u"ZDF!o9-sGdq!#:_Sd'+[2"q\Z,+9!"c<=5R_D4KJ9oaddLmB[B0)K?$_3su%Nq4PC&Hr(L3ek"01g$9BV'XE#_$^j6@;;fALNO=E(_cg-OPrP2[V8jT7$3>?d7:PlOZ8QI)#FArOH;^Ta\`VgKe:B3g;Df_`Dd`I%U?$5g"e79q#Kp!sYDb_G9M1,A(pl][_#G%q/Bct)@(1Ytctf&&>h@P,_NM$P[!a55j/`[f-3_ZpJR>]69h#@3eQgBY,>-!o_+74P%6a*;"VT_"MTt6ndMX%BV@:prR!iP0oRNEXFogJHU<R;8.5EuKj"[7VTAP<:0OH>Yk-V75J-"JV6([ViO4`&a'F"l2Y6j0k9OM$T%%nsiH8ela8N&`pNI<T.Z)!\H.lLmOlV6G-d-bS`^-:Ymp!Zm:P&V':ja8CpLD.aqBBb+S8I2?7ZRAX9;W[*/^s=9;oa9.a4r?j',Y%]L[lO)ALA"K>$G5?im`$!=f#L5/Iq4kO2gc^'E%9FKBL7#gQD)H4%grZbR3kcjWeRS[1cA1ME.CPS#ur/9*O;,Pl.8]&bSB/_=S&%YqeS'*ArD$_&J\*Le?QWLl-LS=4]Gr`HA,gZjahtgfV.bF8tK&Ni=b;&h4\fF&fad!72E\!cU^;6pD/5J\[_fLG"r.3ESeJTfU#n%.kW7oNCM^2!hjrq-'d`5Ant@WFN,=j1'FnV:d5"+$X09ogd<4N(D_XEhdV4=&j:1Rk't1,.DM>1H6op]%2]oVCI%r<HCY>-\=1U>%1l:*6X_sNM#=9P.>!]J/l2_ob:`rAXm4$2nm4eL4OJ$$!&;#S]TS"%Q-_nfe.B&J+7_)*c=c#@D_V14>5-"hr@Sq9%!<Y1i#cUr5%qF(1KY$-R=%[o[r#,B&>.P2MsqH)7<IWJ#o!o]'7@ur*_K'3F^1/OcQ&.:&62FQ/R"g2J$ErV#G#6mGRf*`6fAEg\W;u91Sj-Rnj%Y:i29JUrJL6k9o)/B72#VGW/f)NRk%86$WsWaem6Q_6T;mcpeoQNaSW&j=ST>6L36=d2I98S*j/%S'&\+Htk78E.K%7#UaE2B%WT%Hr!k7Jn6W.PBoGEJUsoeopLWcED0U)=ijKC<=H)2-)>7XiUtU4'#D%*UYWTdLd_FZ3Y=;A7'YrB,+M(E&pkft_.JHGLG%2qaB#WY%859Y@"OiDB8#2G$;["I"d5t+5.$1s&b*WS?+<`+`:6MIs9#t6K0"$VPoiR_N`Yg'X;aI9]A7IKq-@<l9"g4^n`bO]sLZ8bsZ&JH;%:DIm?a0]AePtO+2?5_@B%h^Z.&"R>u*_kG6"PM!14k>:k64o0Z-%e)ikd`7t=J:E@q%>;+7mdAR%g5P&@E9^P&rA?BN3U^f#RLfJ%OrOWs>hFXAd2p+n'?2LdiPl49(0J2E'Mq,nU--DG&hj]#(ec9]'O<Ut,Yc`uA!K\4^0)?&Gn1HF$P/e@4<@AT`&toI)1(Xp`X9tn%\ZTbMW!F6@8s"#[:Gr(F5_0WA$c*Ird3ZXuJ]+*Y`ag1l#rr<6Ou*>>6KWl=WEoG((Go/X?oWU>"\7bp539TU<F%L`m%5#BcO+6D%UA0Z^L.2A]&tuF*M;V^)$-a9J\8_drOoYlXKUE.X\Ku:Q4C^7Z>NAd<L`o,_!<qYB>sBeIY[*)*#e^Z$B<.api_(b2giGGA5TH+9%76qJ$[3/VZ7\Ijc9D'>36cDW)h.NZ5c7&Pue]\mfe<X&AaD``'!^_`YqNOr/&PS*<Y3uFR0F<;*1)rTE0J>`%0L=!TA>_\sX6KUU%A:@S]A7JFTYZ%'<p3R=s-:a1Z<Nj39WM5?.5QDF+''LTL$DN3p"lZ1Y!c9<ErH/91B,[1oJ\,!LFS)1>9%6sJe.lJ<WMK7s5gS%,%k5\bk9\2*`MZgH-.;hY>*5]Ep`h^7Chc3Y@+YCn-(YO2LJ@oWdeEH[tJrAcl]+JTe>*FtB_om!UlO(:h%9?L;@1DCHEP1<md&Y@+%oG8rt%9&T5JP4!.NoqpcJBb9E%L!Z`q"tir3kD'Dd,+=5PHTWg]2Ze@S-OoH5nBOL.m9?26hTYT51a:>pgk7(^1#Yl*BRo4Y3au<%7&BFbKFA8^B4[;OBP,k^"$a!-ZX^P)H=d[!GKh0i8X+fT/oO%aBTcc@$0Nj(iSN71ps^^9!s$^a>lo!\\=TX5Wm@@]+U4DqVJZW2%J/_^59lc(u>a-rrk5jS&cpR!,991Lh<'A+/j7V'rgbY1OfbmZ1FWK/]K>+9B+%:6uTL4I:b>c#+<)GN0E)@`t-^?D(#XC^O!hCT2%6'RJA+C)9HYk@p&'`'T.<IG(P.knog*Q_]o"NDar:`u=16L0r=A\%rCCZms7"f>SUB<Y9j0N_2lFC0VfbsOfFCe1:W=dh`;)uY$*%EJ#RO)coJA3k3\?))<$GA'gTK63]`eXu[1a\4Wr<1=;i7kDM_G'7^'.KI"o9U(g"8GmgoHP6;hb)m&K71KZ3W%9l^=/5]Y@l?*Z;%X85<9KFZh'ed/Lu1*+JCI3jJ`;+B)B!lQY-_^<St,)I2*6oHhhM)f"If^=W7qJ(R.\FO/8Q5GqTq!jK7APFKY[f@8F7(4S+R$5[[%#Qu7n-@no)VBAK%>S&NqMSJP1jpJ:Q7_i9f.rKHjF@2!\\GA0m:mUCu0aD$kV1h\rYoM5W[8e[gm#*Wmq#V0f%Y7B\+@23q1I3rY%7DYL,XqnN:`V.gol_=js["<&XIUj"iCPHZ.C_Bho>*MRZ8S(Qq!g!tV5UVE:neT$>]EQu_8V.E7RB,sJQn*:NFEU&#L6Vkmk/b[I%\u#Te%/9L05!:ae,*Jb&;Mi=N/)t@t!"$j,fHg&#,RG\/A.(a=bXpq(6IHiRXp$S#I+F1e3>C5/cGg#2T*p4q>dZ,>Cf0+h=&Hs_%+92]s$$;=]3DDisJo%D\r%/^=<`Oi=h3JK@Mj-5j+\aBESf`sdfgL+Y^slZ)YsK=2XRl'\`Eb`hCohX`kM@`LHLF./VW"6?m)PlX%>F@u?1IR9a@B?J\NmX$T^bEoR*#T.fkDFc_'#kmWTeKM+BA/Zt=@J(rYYl>p<WP_s8YD88.>[!S(1`=M#r\;-<r!%\<d<NP2;)**%`3LuJ=J<Z4I'G@@O_n6m)BraIY@E\f7$EK`VY(uQDAWGEB0@;-gr;I^\J]_;H,^2&(+sq/C,r^B<7>,g]&-[gK/?T:<nrG,\<=7G%"[7>LAP<4.O:[U@-OE]_,pY)K(Te<d4*dh-LiOKpke0Ol;3lI,+sE2lW<ut`RqqLc&kl<tH9DnEM4="qGtN>3"D;W+dNEgB/e_.u%poZpGkkS23<$\=jkc9SZqh&eG$5B!&m4OUL3mo(=Xth_3+gE2f._8d#W=%Ga=(.QG,RMU#FO+ta+#RAmfSuS/$=?X>.hb!$Yfu#M%>FWh^.WbopfV!dAQH>J4klqSJZOLVu"r9H;9"Qg^`&2YS/&BhF(a4VPZki(te`[&`fq3iNBSK7;$/;(<6q-4Tp1FqLXg9kmDtTE_%Yk<CCN:"q6O=ZrGiu7@k1nBW.f_u:GQ,7]SOSp&MEnrKr\)B*&29.5@@^1%2n^fNQ?D?[`^beRogG?(-?'k4p\3GVQ]Zm=[kZepg%Qj2GC8,$XeAUJt3H'(l0O:<*2[_^MB+UfkD+6G0."q@:F2W*^e4"LO_;5LB2KOGH*d1%!B(6+#5XHJI!$+?bR=CUT43gf<\+S%Db%Eft.bG#<Lr34,Fl-,0'eASf=_p!u'<l8Sr2Ys1UMMJ\aM#T(mqi(e+7n7fV8AajQ&A:Fet:=j%23p?PO,%8&3LSMafcu$3WKQqmj%\Cpk?DKBIf1WTc4(oaCo&.Qie;<<e5=CUKo[g\)s[`5(0(0=nIU,p_[-C1Tr[$+B?i#SC;ih;A;L.+HN/h^c+#h$AILCqd4IKa@.%5/UE"F]GGOj:$g_E"!.'KPUGi;t/=;=@Zc)*EdKf[7@SPOZ8QI)#FArOH;^Ta\`VgKe:@]m1F.l&YI0@G^N!Q6=0@5]qQgV5>kSG%hag?J5rE>.d`;M^drdZ3O\5i;U5T7:*ZuL3H0DnsaWl\`<?C*]p@?l-+uI_j.&L5WFMX,!OqJ65s$fn\6Rlje+Uu>3-+`njM)VVo%#s^`f65$dR;$r26^]i8_;1_LY(en.H_iEVRD=FZb-&:os'[.6XYuQmCl8M]^dhS7GW$4Qb+fhX;RrckJ\B9.PQrSBe4O^R3&J6lS%O(*!ZJh>;D?#ZI&Co:%RG#Y*)3kVqglkDBl.C,L*1n-n=;c+_rWDpn(;udPS.aUb1.Z!)-.``BK)Jh1T:8K>T:0g[BT16?+S*Mk/%#PoIc[n)?eNahn0'I_FX6[lR6igZ3QFVfR]5mVRqfa+=*EH/RDr<_UK.tr.J'j[trRUE_4PsU>Lk:ntXe0)_lXV=E5Bs'r'Q?:Y-%UAT@7\;WOTSg6IV\@au)V)Ij&>eisK"11Yf4MOE)dg'<X5c\YC<XJl,C':UP_H+YF=XiiMC=8D4?]!]IPR1P/OLVD"FHWa5RY7dM%\sXRbbR%L]Flj6\'b'YTH03&bmC9ab<,LE9W_94(j3Cug)MhH=E@-r*rWODf,CrUQU`bPQRo:mW,hQqM;WT:];Jk3Q/*R%bB54HJ%3BA2Vq=I=Xkt@0T!b&*Eb*jfF#e!/>=*Xg;(kk4&R>rC^(`9/TfUuVIZ;b(hZ:oa"bN+TT'Tg-iMbE7V9Q=pAV;d;'-Cb&/kpe>q%r!Oo>7KSo%8O8K#\"Hp38[.0Ll&P1b2EAl2l#]En-rJG'_%aI6\YStA8'fd3nZ'*PTh<LbpaXsakM$IiQ&.L*9Jgj--`W-=>9c*M%*iEQR7_Mo5fM't7drn9=97nU"5_0L@-&%2I3Z\)a)]P57;En;*!iAAiA5HLn4"O+DB(*8mn4.UU1kj)E"BO_2YXGm)QEYoZ@Gs'l%dk%*XL(h4%U+7c9+@Be@`552\S\6Dn8,u1'WB-T%_k";j!4oms8\m%BNpXu%F!lW&<G/XY3"J_/TX$s';F98>'tF`akD09RQO;1s%q5/FBI!Hlp+I6pcP,aJc@[j_-Vcg7k>a95+TUnq/A+Nd'4WQH(X2AnB[O3.3)A[9e8?g`3cc!PNP2NhWlhkSC8!\ETEMj0&=:sEA%Z+-U.J9`_B^c!2^@u8=>;6m$j2N4E1I!3XUQ!?%.LO/#3!Pce3PEe_Amcl@n_KNb$&^V:$e]HSrIF!)hfUcp%`Y.F'fVff`$pNNY%dfr3iW4t*dX9j4lbGhjkW's[S:@MY_O6&(#=DZolC/gQER=X^akr.rR*U=X_:4JYZdL05A\n65g5F0s)._86rcA#s#m<-?&S^03X%?5H7.c'7oqqF[-aQc`D`00u=`J:pZc$Q_kjUl_OP;2<(.%ns2uZW0r(K*a:'IL20JDOS!UQNmH)Z6Y%/S>uBUjolB)?4g[R5S4&1%\0Nd9MR]_kc([(ID8tTKh\-cl@%#upX60V[`l@MDUVmeai/:"14!fR4dUl$$n-.0ZJ]+o8LO29gpFfqf6%VK8$RI'e=h#Vp-@ukH%EKtJ(A[Tl39Ljg?*JVEF?f8i$4#T+7W.K!*Zjhk0;'>BUPq`:F5XIpASKp`lPRt;H>\Xn$_tce6oS<Vt@&E-iI<sl7Gg6fL*:TW0%)mE4Z't3,.;XgZcj&8pV6ng::KZXZngaE:da`9@4_RqkUg].LfSrq`os!cR)H01rR@e&-$#o+LMiQ+KGSZj\EbR5])]HYA-J0O&!%E(NqA'QHtXRRL]h>Kem$l%q)l)`5\+)6(lm0qgITb>8:1b%F>#!nnJQ99W5e'#D")j8.'[#`B88,eFX6$0r47$O[Zm8TkFqJYfsW%>%2WD6,JG.O%),n=.5n^<8frl.bgpNn>WE9@j2J7KU;m'8X>AqD9O7X#T'TUCqG4g@eQUt8mUTr.<FTr=[Ue^I+oQ:*mDU2H.9hj%%'r,L?+*[p=fb6m>^[ogH*<0B]a'DIKnmr0*^LFJ0L7P%6'!a/Vn1%L+g6N6<gmj&:nekshbJ;"QqUMc;^ekMR:,_m@S2k=`WZVk%*.^WnTcf-6=V*,f,1p/;8ED5S89J/HZ=P7LLoMY9Lqs]spMWVLKLc2mr2nG1&Q_f>6ng48R'(Kag_`.QT#l3[EPq@'k/QShk*`07%-80,mr.8\,ODmM3p7!JqN@?6.?jSiB`Zn\%8A%N*9EG9WOHMjV8Q$*Gj=LWRD%^ZqTSZj"g.sJ$(b3VkEX'XCFBhC]@.[r3!?61>%/PFf$K-b@4?)Xc&,.JG#6KJ@rDA*)BA2o/f@:#I?DLd<rcU]Y%/B[:O`(ckdiZQ2srO>P*-Y[T4$PZ%$5EnbccD358^AoNi,g],G%r4b>j\m<R$gq"l3GGpu8S-ok9[.Sd6<,<\n!><1&OuoFI2oYluAqHU?K"QO*>)T,Rn!rYqkFro<f!cr&'I?Tj8NBY+h+kD>aQp(t%W>^6UWS3Zgf#=@8X0%<*F/[9qT)qJ<Bp?Kt<7fSR<s'*3D:fKt<KBo`D_+SR[a!\f`S*5"gGEa$eErI-D]RQGl75)YfCU&<a7V2j%*s!k_R&nX5]l)ju[f`=F!AbL97F!5u0(@;GEfN6?@8tOWMciq)eq>YgKE`C?2[8YSXT_B!3mX,]E4^9r4-X]cO.OYc3i5/f/_cC?%$tU)/pB.b_)T",<-[^_QfrlLECdC>WC5'D?-@TfPrV._@W=E5'5<qZg1a"[)KCcBfL"^)@O;%RK%<#^_IkdUOWHsX-%b\Z8dF7oN%+Vp'RFCOd@X'+gj'=3C8CTf1E"+!$5$<0;FJCFWn0IUS2$6["0?/>DK6'l/ur/YrTcN@4+k8.>$^7AA?QdX"7RLQ=Q_S-Y`\4qCE%(#mUJDO2jnOh:8e]S!,G73t[h(X.ORRC,#=$VJ]sUtuhq1(qmd$aJ&-G2+4GSjApG#d,mISeH]ZbI@gUZ$p8Le"%oH*gfe+Sm[K^%7be*0R=In7PCE<AYjs?+K2,@W,`\P,lE],`"J$/<),c%@jrFl68Aj/OMU52t57jnuk]6-^:kjd+M*=]3/*P"/.!UDB0f6mXitUO0%OAq@u8_$/-)LD6&1i`a&$cQ3K:kj+`McGt_<\$Nl8pA,M!TY$naHFXo=h^T^Omkc\*V/)f<#_.'Knq<AIP6Y$Y$q,m9fC"DhP+\d%fp#-qo41RR+KfLZHRI<Iq1(j.1Li:*R#UQ=`-b]RTT9/j5K"UWaqoK0*ipWNbR6maL'V5O.6H=%*oso%lDL,868"@WOk"O%I=U$u%(iDfS0K+(^"em^5Pt1a%@jbSLG["j=<Q$t.M_1Z!'*MmcY?[nr-q_O+&J9)<g/'TO?;ra6Z*m[g43PQ9B#@$6EkU+,PW8<s3=\do%P'm).>=g[mq%=S#=%^F699@#o-RPl(L7tGQZAMQeL4OCYJhfK\l^D+R,6'V26QqM--0@0@0Rg4WMN>=2q:.>9bE2s<be0tk$QA@H%%jWA]pr)JS+M:+X32L@O$F]R[T)pq3I.ih-]p%TB>WKo5%e2=H6S<2t0bR_Z1V*SXMs<@/A%!!3V.@mJlLPXF9hUIQQ*k*H@Ln6F%$^n?$->&FO*L#\!9^u=nSpOZ:.(rBi*GU0[\u,G&-(C3V<6B8llk1,1+FMZ'/#D,UHX59`Rq7OHjcjJ&4P`Qira`pS+ScVE*ZFu3%6&&)O>r#ga6UA'Z0AaTTe"K,XB]LYh2>NE2Q]gN$/5iOp&\fg<am(r4-.oXuO#2.#S>dm?`R9HW:PEEt*r,r;%3G,`3;N7Ka5:?N%r357C(ef0gIj7u`>q/HDFHm>]5^8q"+?)H9JTU]V1?;%`Ir^$f!4eg*R>UEq&!d6REU!+tpMZ.1G&Dm3jDK\<aq0pU(J*=E)*amM%K0_6#,N(Tr9^1a"Nf6ZBI0Y+FCAu^aJ,a/JMuQjV@%Nt-*!&=&<Y"@EkQq,2CmPggD,s@uZ1qMge"261I+R@W`>T>n^jdK9,*<QH%[1JTRWujrB]>k\F"j(im(cjF$q*6DP1'h2ogbS_YH2fH]LgHN@_$]Bd?3lbJkWuQj@>L*KH*1ptCS1+*;fKh!CGfFL1[RrG@^Ct'%U9j2Q<%a_K+g3T5].&MGnl.qb?_\@Io-bN"mhuVsiEbu:ZNDZ=CE,(k/1*,G@e7i-n>VnF/_3[oEluRW*KLs["9rSrDDki57AE$2%6(YIf6\.4c15-0B\:%Aa%t2=)'6f?b)/G7RktB-m5M,1.JMa_D@)YeT8CJHZN(&G\i>Y)(^ppM:@g2[p=VK-0=OhXm_6Dgo$T720%(hVKQCU#`*6cuo5=)&:<Pk(LY.q367Wm<N23,7#96X$lL(V)J^`Ch4LP/_8iAa!"3dOem?[QOUE85%M;fqI=S/(/j`4usfB_qG]E%]Kk]4e,o#mOD.:.W-jU&3HV+?bFKZNbMPY9iVMsmH+B\nVV8ob(qjhpN55pK-(RbN^eF%[9sL?O8(MB4@Y<DbC8rV=nfWXFiB5''%oU7:8Cb5CHcSR&:T%.X1j+'lJ[s%bd"l0,KL+u1TDjt=d#*3Q%;%&bW+_Jj,GcVl>4Q4uq7`1P;1U];(ngpqZ$$FJTqpfL3e?/o]%kjO$Z]N,R5X/7fkBp-3EXMl%J[\Zp7!bXtc5E_>D(1(s)[^7sq)]:5m[de<CFTYZ@fs(l_ZhcA\p4.-D@)(mKoV8hlXtS>aMtMm<%3n'Dps*/Y!YN6jT.lTEH<N7%Sb%8,RDn@N+=Fta#`d3W7jtIhWH1^Pl8*WiV(-m81JBl^W%Nl,>ka-112?N.npQktl/%_[5S[ui'%)Up7Zkp?al=3STW339M(bH:1a"QcqpjG0r0MY6M.SmDltNqW10SneU21%AHnHir4eK/O*<24I=@Z,"OOd:W0JH4S0ad-UtlrX/cZ%Q*22tokQSki&Se\UR)n?I@.3cS&ra5+W0Y<fZQk=EepT:bXQ'>"%ENu>uNQ6aDMOT]X&=d:#J'5\kRA61(tWPC5)gupGAYVJ(:RT%D-BXf/ssEOC9BsFapP(gOol>-<S6_gM;26n6lmsYSC*6u+,ZED$DqEBBV*I:Ro3@%*;e^Vl?@"=h;p,NpP%abWVFkE^AFcnZQ/2T%##7Mt3q62,o5s3`KQ?89)CV#8q!EDFMLHki_`T!l?u?W#*I\hj8jSd;#1#UK%#)GpO<?s`Do9Zuk>NK[IfO37GiT6J"AZr$B]gp:%$jIe+_3Wgtm/dP<=Rg,qJr(I<.9";nC:80U3NNj?(o"3I.0J!H]b)./^9&A0W#;pPeNUc"Cs9D],mDZ0JWua-Hd!L:GgJ]ZH1m:?%I?tG?5Us3S8&UbKRe)T=B!NVjrGbNi2+T"WEIrqO?dVrB@dp$Ap,>]-*4nLd<-ohNbGPH3:ae/n7=M:/:X3oE01._sU];c,+;mD#%n3fhOL0NHh'c\;rIle]W=buipn_ol6Q1HrV)&LB#fS_0\_Y2:ifgjhV$&,QB^d)6!eW&MINF4l\`\V'BFWdpdo@4SgFT[<%Xd#HY%o[P")=@u^kP.R-GUiTihGL(iW,e,QI(g).911D!,2>,9@\0R9rVjM4F<pj\g`:HTk10;rs.-&l/2YX^<0#ua*2c-Z:OArJAkG=f$%99+!pk%d32cDOX&>;!i1>u46[.2(VsL=?Xo`T&e,VAPE"NW9+Gb*M<-_2QcF$B5qn[S`,1,aUe,geIHo,]<L[CBg/@;W9',f*7q7%,_*JZ<)R[3TI1nHG)IV-&j#0BGCS/M=gXV*Cg8f6?5qFA3*ljWcqO)T-)JpePIcmP-lEInKm,,1)a8_@mZ6qGaIpF6%N.5T;<^?k%Cs)`g8r"R`f)`L`Bn'.sD@ktOg&jiDRS,R_<F@p1<*FD(AZ06"S`<:0S%nm&j&\'RKmJgrnnMfQ\/q%C9lQfoOmEM[;&/.#n7nIb%X0Kag7FGfC,'sjClbIqIUm-nPa5p,N(A?c\b&>o&qb#!`^X\5aV;b!\q5lFfQFdWXWm<`\$etioS6gGeCgh5_6fqG9qU/]A=jt*C%h5SWMZL>&UD0?ci/Ges"==F&'Q[AQ]2J_DI<q#kh2ZcbA?)p-`oh>c./=`t(Z1[jYQ$k`!UG16.;UnE`$Z,t!=Vh9Q?>qVJ;t^^H%#8ieX4:;!IV3V/NU-eSU9p0[`8D&GcMMR8$m2i`ZV2n8*dV?WF8rLsQZJQF1-`WV-i.O=NFHY1d"_b;@fZO1!)7FmO'd^SUEO;&(%Ln%E9XM6`C#,3+E?$"4-Yj-3LXgS9USKMS>,'jdAbIHqf@!*?qXkIV2TUjLcegJ$MWG'OOO`cNkk"R]oOOjli_o87`"XUM5/tfY/%*1\trf!26gc74,ugWZ,!\YcE%)]94k:TC,kYRt3<!lk>D107o61BntLF=Rl/W9@8'aeLkl)btT&lB^*_&FN*QSn$%KYA*OKRg[G^%U7C=?GSl`Vlos22n7!MLd,Q%YYTMa/I_1p'h[+K%]nZP8'gGmFDd(aF\V_08F,8bBD^Y7KHj1\Q_Ze(+`0V@*9FaXM']b)a;^PE3%\>Gh[kdiat+.T7<],<@48apeA7/D/Kb@oib>[qD^%khPZ#_[n\%!cUO?oII8nPrF5#j$%53I?<f\?uq5)CF>-W7ZX:!uOgnW*DsI%5_.cMLu\n55JHb<fuGP8Op##+h)]r4dkin:o1H\T,.?8[7,cKMgTI(emoZVUe%JLbdc0e?kWO"pX&k]W;Jn?9<Ip5]k?,<o52g[B%bnYLkl,3bUC_Y8D1*95j&G+@1h1b>dlRZ%P)*D[c6u:!1SpuIk6aEQ@_@&^Xr$Vf%i_-^Wa;$A?%X9;P=d\pulqG#p6n$pJar,ro%Kafb;,/,Wjn5^\Bm-Q^q.;fg01;[WHqWlKu\&%7Cq!@]W[YD_;Ij$^pRciW[s!WduFJ_INI!\qk*l6:kR#Q9XWH?<O;UH>OPL4TL%c/khPP2D)Gf#u&m7rAZNP@K9i)-'"&m/9Gu&R6L]bAb%Spf!.A##ZltZD8mX\XM3hC;TiW3QLiN/s4Du,-(,n?.3%:b):;IK`2iu%2BBGW(r#QTj#+YZFQ]tn,hAEH.+jkiM1c,P],*/2_Q(]QjK/T'3_dn@V`Tj\3I5%=PXf?Vl:[k;"lW=(*9'8`8:3n4itgHJ[/fs6%<5<<+@6X^T]qA<FOU&'X?r*GT<Ga.XU,<[0F-s3+dSrY6;3(h0CZ=fcmH($GI^SZFeg#O8VPIGUUUd0CW^'OHc"keAJC(h1/I$GO%c6I6XE7-1UIQQ(q6s`@M0HoY8+_OP++i)RJ0cnqn>>%jMD=Y9FCg<;ic^F#["_)b*:;ZMm!]Q!;CICLe*CF-Ye+clShIE**[UtSO%RgDA;'f2V&\iC)cfPO""Lk*P$Nis@K>=2+D*,s6d$J3Hd;q^KMO^6hIpD\/hXGWN@X0KH3Vo\]$<;W&qNnd-n@qCbpQ(lRefFMbX%^Ji>EkIB1+?0D)n.XnajIou^EhnSW1$V3_M-]SVm%d6C=#hdO:-6a0.)_[/lB]qJ&/;5`%aUYP+V[BA,iCS#3]iT%i*S*SJbb,F2%;tt+eG,<3IV@JSUHgj%0#?A!)pDbUma>tV9Cm8`P)la45U2:Rp?J!`+?)39+UjYufB9_FOVq0Kb6VPB3(W'7n.Bgkh);9/74&pW8%N:<1MqdSLfWpc?)i)dU5?c.a08&3i$R0#=2EW.T=et)u:b#u^mC1=<SaCfiLLjX)cS4J!mO/:;3$hQ5^2Z$d7-tk'/hn1g%-"W$1%lrhi7J*1],na3]9cU;SsC5sB1V'-9_9tcE#RtJ`SS72Rtd&aKJDSe?<],*1V!V[f-HJa\@SP+B>k>Wj#@/<jT7MqL8mMrs;aX7O)%WP`Jc%&#^4mF1@7es;4-#O*eNe"NbEngh::]HGPi(Fs.NZOeM]lFt?u><h@C=nGG&r;O]^K4fo*hXJ6=^$q\4m;_n0Z/m4Tj"#I<%/_&:8=nHC2,=tG%MU>BJ;SJ:L^PI^S&D5P8UDbH<A1,&LmMVD;_l+^sR!5ki*Wg`fK6+3@!2YYB&/F[p[>7J>C6l(FPWcd_=ZLBF%B#HU_G"aO^<Rjr"+JIPM?.Yq+Cc*A!B?@El)cq!->:HRiAR5[rhmbL,L=MB.?.k7AVNR-uRUBSA2j&:FFkCI#R\Ircf9AHH4<WLo%JCSf![>LJO':M3JffA:M)0h1s%JMS,a2i\%s5Q7[?[\5u;[WsGFe#2fLCm*Wa`Gl?_K2oO!44)i1qm4bn5(kVQFU7jKQ*]1(FNX9%g2"5YW?rI<mB4I_]+KIs?(=I9m96dY?5%=&DGO?F$Ip$/H5+qM[89Zq6_A!iO5_4[J_SU$O^^gI^Duk%Wu>W3[1c[+Uc>-?>T\pV%&N`.FB%Y%gCJu*Z';lr"O?/JCK0a,pp^*$;3+a`)VCpkD9m0?bml(d^q#hsbg+g+i\oUddP(oCAXZ`W*H1fsk69%\:c].KQ!I+S;%1kd-%h=p`1l'G]i*04hpgV[PQ#?=39jZp@$LTh]Z>k"2P;r1j=Vc2\^GKP>E?H;NP,J_G5[oIVq5Hb!8^P752HFp#Zs&eSO;T&6W%RrICK-Z\1n?P'hF;'a#1hBLH[C4'M_q?9lR[U8F?So\0Z?Bi5MEiKO.\];b;D@m@WAUY%rEo5Cc2"D+QqS#TQi4,1`%h4Rm/fe'g%a"/0n#1Z.KmF*mT33]XY`B@kD$_m7k1<ll[2)6<#SBMS]+C(t;@6CBPc_2\]jK(juU>Hr'6r]>a9HZGHFt[s`&3FM5S4<3RY^i'B%;-0]*BFPm[0M!HH97F4hhT5-?`YJr*9oD`X\]mgGBlSNa]gh,>fPU:1r/uD4qGY:cW+/_!dbFmth3+6d8D?$s*P%Q7/fVF\(LL6E%`<5Xj4,+kA;gYUCBAmRrNpZA9j)mIBWZL"AfHF(O#>Jrk4ZC;9PL97&(#utp:!?BjcM!iN`orO7?:Rig(?HJqUt.9\K%K(Ro(Hh*%fc!l9Ff4"bk&pUYCJhb=N3ftI>Gtu](3pFF=^)U7E6R%1Mh<^!X"KgWXE>f\h_Cb2?B`]=Df<s*-YcAa:&(0<]6enU1-'9unLN,B%AumF3+sJq3oR]W,aV*S9\fD*jF3Jpf2*%;A\\Loeb'EE.qma;!?IYqOQSi]$_`Lee[kq'M3,bLuE@29;7L+H*8gDTR\HdtNM"f[Z%Q[Z-[B8F%+kL$/Ac*g@BRZY43Hf!1Q3W&X&4Jlt.\uKi*4rCK?"&VMT\q+fj6MCOn9^nL@;;PVek9A&omWA?9]T1jlX@7@DhSj*T%U/kqYY7kh>=/P6AP^eVDX\7n;QDM<Q`'k*GqKcW4IL^*\@$:e8&*S`Q;Y[K>M8:f>"SYDOFKKd12rB`(=L($A3g;Z,\[Ei48/&k)%`\""G:)E#"c76]lGDj6bpdQCh)KXT/b02ei,:EdMWGBMWMYUHERNAml2/I*t2@o:Oea9o\N:7"(hJGfaafYhfhW&8X931)(@$=R^%38,_V/ip0(c7K1\)BTk*+!DLT3EP8K9"rPY8_oh1L'RsrDPb4=F:Vh'DjOGR$"Nus3V2q*kn9SGoko6e:f:CV43?e2U_[a1+TupH%+Z'A%gPgJjehmR@U6Drj!TEo4U"b<(\');A=.PaX6:Kbucl<+0mi719qnnA70-C\fL?MkUWdtC$H0(%AnEhW)9GHFo"ja;FoPN4C%]5*-l>`Ad`Pr$NtE`RqWSDd5m*[[ZZA_c92%<@Z%Z:U<OCZ_9FhK3Z%/RhGrOks(2CA5`^ZM2Qujqs2K.!*_g`sXMQ)@oi5D1.(F%o&BCuGBC)%_W_k-]<!2HR"<u286Epe8!RG@RY6pNBl?!fPh\s!d>XaE_FD?^L8(!3d\>][0.o&UoSn6TCbY3`%0FW"D%#bpR#^GV%/<n+j5qa2+_T]Ah9St-a`k*>p>(Te*Wfhd.bi4WT2-If)gIg.NMjKEr3c(V6?fbCUO\k&Caq8.*+_1QR."\.J.ECT4,K@+P%n7Xp%['C=SfXr$''afK,=bKqEOspaq!d>'!4/$Gc\erG!(M4)n]7c7)DsiNk=Ftb9K?2^1*.*c^1X6h<P"bV>'bBjTokQsuB2[<00Wa1M%[&t.-"rADNE5NY7DFD`Uo9<3ZN"(tDc%DuX-!X2Cg433d3F(s4E!p6rjG/bg@jY6o$"=;n``+3+M/T6lTsH`j?H`QU:8<[*m82_#%nrf>_EZBP.,E,=%**=24dBnu)nefHP@$MHM%]ndI[+hE0KFc<L#iB=(El'H"Lkm1PT=mh@b,Of%.>q.X=1UgE4rZZp9Pr:t"bnl9%dG=MU+PZ4j=[!aUGS^"<(fQm-A@;*`S1ZBe/ZmBJdP0*QTA*(IbtAgm,+$\@ZrK2NFH^:t(=r%Q\W4_$a`Mc7JbCVCs7faMf=]$P%"Jc]7p+=Sb?o;!W1AgbLs+j_<%nZ"!^.%D:q/cueH@uEY5T29Lf^EGNDG"sc\C5Sq^hL)d5jf5hPo4ijNj"h<Ji/hIJsuHWb7B;@%2Nf?"k$^=WP-b3t[Y+aNXnrSP/Eu"c4%QiWU)W[q9&J"qa4/Ot^_08PH:L3@4XHQ-dOjNQjCXceY?ZQ=pZL_S:5@cji&f5\d]d5`%A9^tVMGnG'A"'q:X*'@W(FL>[$ddI_8M]D>S>OS)bfDL1dBa>J,6aj-VoDp*M:>Cg1cgrg/Ob_uP#D)5MUm:Zb9de7]V';h;Zt=Q%]Or*3X9mJ(@U_GkP9F9W)[nf1"$NTTlHG#c-sO*,3[PVKAW#?!7,qN*L=&Ip\lO_()1XMqc0/bGs7bmg!J/\eEWA8IYRG1rmU<0A%D8T@Wec9$Cq3ncMMk"\O+8Ue7eRdmVA8rL&Z%\,7d%tVZ#8\/$L"MNa%T],:5/^o5>QE*U0r^//F06@gG=NdcR,Y3Nr0s1gkoe%\%_;GNe\_U^jd[2CYi'@%ue&ET"911t\<nXYg)bPdo:J1lU+\dl&N[0?eF?ausIuc5[F*0,HQ-8DipREg'^7=Q5MH1'$N[(BkUAGN<%b3m[U!3uV\(%'S*/N)e?'1p&0cb>+H71>6A-n8qt2=0W6oeG0V7-8Nuie%hH#m97jGhLHdCONjpprD2bSC=a<8%DsY+kK/L!Jap0%KS?^I!#HF4H=:$\lYYS\-J.pVj+!<Z#HN#W17:S(7k,lA@9to=3tU\9qZsO6?VcV@/[f1S8F!/Waf[>B[<>)a`<GolJn.r/7*Zq.%$]1%[YdY:hURtH^*R)^0nbiIY+o6QZPO[smB9P*pMT0m%@%B@eB"S.en4[ALNs_*H%#km)E%'*CBAT+bojO+m]P67oeMA7R4rr:n%W4\(4GjjjCfQ2d=*2\5q?N1,DE=^-dr@rKYb&,P+(^[;?$koi<4;+V`H:B$!+>->>fZVuEiQ]2f,8&;G*1?JK)3P>^ODaZ`Ng-'9%a(J[$>6fmn^L^"#3D."8fli0qXfLnc6kG8Xa60S',6RUt-ON'2Ffgi5'ieXQl9IXf(k;hYa_V'5DBY0d)%$"<OERRn?;W(]7q2XP%s#EndBe0A6Ni6IRS7tgAFptj+ZL0>hA*FMPD)=^W64eXRCZ'@!D3&/H$kY_*qu2k%aD5f[H>Cf@-YSR%d<lGV5&,=RHR&^Cm],l<%Os7]-hoFNmb_ANfF/c%-_([,Y8[6+r^$s#4G+UoEU@S[%Wo5Jh[S,T\D5i\+/?!A;Y6Aj/P)Z>LV[>gtOR?qS]-D)J*P.NL2cPGq%^"Hk9[pGZ7@todp75YW_oME@IWC4r15hGK'Q1N+5>0IE"3QI[=*u-1$A`sVF,'J57?IFDNN[qS$VAsr@=BcZA%ud[`5SS.Pl``"b%qgbkAiHrYWgVYXu)f]='iY3H-UTt<hDI!PJiCL?;/M&MD%!QUffTn_>6J8c#IY_!HmO7re`gejj/K\J/[O=G;A(#u^hCC.9gdMQ6%+RitI:iBhr6Qk_2"0S$,ZM&/X:dia>Fs7UQ>/,G=lu.'5(^6cIgsODVX7`77</3jkYEhckB'od7$f_``cuUqr9rBVLB][-W"W)m7%H:/Q*+Ka?DN$D"+Cup>d0P*0WF<iG1ojif#GS'qdf"FmWC9I\o'AhAMZ66b"OCg:9G5^hX2D@'u6eL:<"l"fI\l=Q^Z$"U$8]#<I%<q]7r,GB/Z1DX(Je%hi`X6>2(>q,CJb;#0":s:h3""2oT3D8C7_XM8,=j8eG7>(8>_[Nf[ib%L6q,V\a+SMLKb[l";hM6!EO\^Ye%m;[o7V]l5JX-3")[u;.t/+4VmHS^7:.5h6N+n7*C):h]3Y1Ipo[#ekBL_usK;$=S0,4in'*ZR=Y,RSaLP]*JSOjL^j[B*iVL3?lM%h$dO(/+)8EgLHRXGZ#u$l4*pl1+V88jEm6:5s1#Vm-V_h0B9:Z0.^;g48etM_3@s62a*>2Xn!JeJ]7)EP<NHsn2@e#^7%&+JlJ?%%]O(#"C&3*ZjZBf*8q3",So=QC5JPPrcd9C>Q%rR^];+F'c^s2uq>J\rMDE56fiMjPk=`_g0ZrDjltVhgg"Z%=G#&^#0oiMZ!=K<C%7et-pA`m?dDt"TpELCC!7X9rC`@ed]]]32/Nj-?@#\H5^PXd`mndk+D/Rpu(o&u&^N2jE<[okQ0K*O0@/sC[db!ra4ne`afnZbgZ%$]??WPf0o^gE_j6Fe,a1nt;Zm\#Ib#%m!5&91p#]G(&=?qnkJ`"fUb*Zn1e+GeV)t=laprf1WKlpWd;Ja$=WF]q9Z?:%Ie/`KMn2%:@,h(.nF$41ZUI9UYiJ\]gsLGc(/F/`uO>)/]],S5W$Q;De+o!2>;oE)niD]bM+)!2rJaX3Eb&jCR:%,&6p!_V//GFOCk!BYspQS%e7FYq'_euWaW(gon#!b@+MXhl1<;*o)W]r>HKFs2OLNHSAL+([06VAuFWB%VS)iW!oDhs!(KR(MPXmOaQXHW35YDrueg2*]W,_(@%PmFbU8$rMg7EI!1:SCKF?9a]=\Y%S)l/I:LblM].4U,ABCm13h,LN0uYdY:XdWI%bhnctl1/'?;):VZW;Ggi-GEG+nAb9jK[s^0g%F=hpBn_#TM!dUsIX?!NZhT+NKc7k#2$J2kJ6\R]V!C=Tr]LjI[<)P+gOc6]`8";SnqA+uB+,GeY1"IO.Z>t(YL9@"Objq*>/j+Y>%!cBXK`S8m;0&4UR^6bf(Tt0)H.*llf6cP!o9.,o@,-Ag<#Fon>aQ2Jq';T>MCi[)2DUL/V:LDO]enK4LAiIiU8`F*"fni$ip*`1B%DODV+9l$)>Z5j4!$^bqLFGe>=V0GC/;E_Q8_j:_:`rq]2-l$OYiY5NtS0B3"M.Bc.9DK&5b.^Kg>MKXE-&<tWYP[!g>(.#l3p6t0%HRd(70s@Hk9"]mGC4VeZmI?O+%J94Kn29sJlPl.mUrC>gb4<1Om:GN[b=[s)fhuWc>9?5i%#Hm2rKY&\i:XSsKr1.@cmEFC.\#XP%Gh3"/%.K^U8O70`PtmN!h!+MeGoaFskK^IfiRF-.1i+?k^PljYA;[%\"LW%S\[b,O-B]r;F3Te`DbN<p(oT/7RPsnAbEfYR136rA%DV69o;<q2i$$X=6(XHt$]UI6ZM4?a-$J*JL'UTm-S&db@S$[73)`QO3O<d2fI<0o"I.E_rS"W".\J)B*`T_gh]([Ps32ckQDS.Q=%W3E(*j$XBARSOkMaCnafA`H1eLGj5?[3<TgnZS6=&J\<pk%&R%F2aCuR3i11P1b5Vq3#jS"dC5qVu[j6faK?rN@!9NQSg^hGpo+@%Q,5"GT<T@i]Q8fq$g7N3\[3hiSD7sA\&[(LepnUZYJ^(q,Bo*g2m_dh87#D's/-p\MV]0S7;!$][P%i8Pg#*oSX`A5Z4oQ<RklQS%BR<lE8@iGo8:"7Y\`SEPosX"iFO-65fR5Jdd^t^j(LodG>+7^(0db]8VN/F^`E5[d(Dldg@em>.DQ/KM_7],4*>]K>0gOK6ns1rK%dt?gWQ9K4oN!Ho")tW9O!EQ"Yp+2fOO]aqM^gp7_0c&I?^#Y)+ZbjDb0?/Xgk*+E\L:qG[bAtU)'(]G4jG_K.)>!3lE];?oc\k$.%hBHQG/)Of=_nLRrTC1XL,.>\5;OZ*m@flb)b<P.+')7(7aSC@lcgek8$Kg]Y(gUBGp?Jgu"&Ih"G2HeSIC,RAeVBObj6Hqu>EOiE%nVT9V(2Fr&'ko-Unkjt!1"cNs+u7&mnma582'Tejn`?R5ZL>%k:G:F)(%E[[qYEM04Kg8)&=.dKoNU[@]q+fDBlEpWCcE-$TsXXe%J,ZNgg=j7SbPN2bMeLh*T0PENZSr%OHEuX\l0j&r6B0OkO.YRt^\N)Gs2TU"s*FPQT76Y2s/H"Hhu2eHhL>I=^\mr;J,AK.TDn0&%J,JECrVH-cr;+U?TDnVPTE"X=T7?jhTDnc?TE"c2s*B.ir5W/oq9*.Fr9H#.s73@Cr]`Z>,4"imIep\Vo(SdU+,eFL_>~>%AI9_PrivateDataEnd